{"test_class": {"identifier": "GitCloneTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TestingDir testdir = new TestingDir();", "modifier": "@Rule\n    public", "type": "TestingDir", "declarator": "testdir = new TestingDir()", "var_name": "testdir"}], "file": "sdkfido/src/test/java/net/erdfelt/android/sdkfido/tasks/GitCloneTaskTest.java"}, "test_case": {"identifier": "testCloneAndBranchLauncher", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCloneAndBranchLauncher() throws Throwable {\n        testdir.ensureEmpty();\n\n        GitMirrors mirrors = GitMirrors.load();\n        GitFactory.setMirrors(mirrors);\n\n        WorkDir workdir = new WorkDir(testdir.getFile(\"work\"));\n\n        Repo repo = new Repo();\n        repo.setUrl(\"git://android.git.kernel.org/platform/packages/apps/Launcher.git\");\n        String branchName = \"android-sdk-2.0.1_r1\";\n\n        IGit git = workdir.getGitRepo(repo.getUrl());\n\n        GitCloneTask gitclone = new GitCloneTask(git, repo.getUrl());\n        GitSwitchBranchTask gitbranch = new GitSwitchBranchTask(git, branchName);\n\n        TaskQueue tasks = new TaskQueue();\n\n        gitclone.run(tasks);\n        gitbranch.run(tasks);\n\n        Assert.assertThat(\"Branch name\", git.getCurrentBranch(), is(\"refs/tags/\" + branchName));\n    }", "signature": "void testCloneAndBranchLauncher()", "full_signature": "@Test public void testCloneAndBranchLauncher()", "class_method_signature": "GitCloneTaskTest.testCloneAndBranchLauncher()", "testcase": true, "constructor": false, "invocations": ["ensureEmpty", "load", "setMirrors", "getFile", "setUrl", "getGitRepo", "getUrl", "getUrl", "run", "run", "assertThat", "getCurrentBranch", "is"]}, "focal_class": {"identifier": "GitCloneTask", "superclass": "", "interfaces": "implements Task", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(GitCloneTask.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(GitCloneTask.class.getName())", "var_name": "LOG"}, {"original_string": "private IGit git;", "modifier": "private", "type": "IGit", "declarator": "git", "var_name": "git"}, {"original_string": "private String remoteUrl;", "modifier": "private", "type": "String", "declarator": "remoteUrl", "var_name": "remoteUrl"}], "methods": [{"identifier": "GitCloneTask", "parameters": "(IGit git, String url)", "modifiers": "public", "return": "", "signature": " GitCloneTask(IGit git, String url)", "full_signature": "public  GitCloneTask(IGit git, String url)", "class_method_signature": "GitCloneTask.GitCloneTask(IGit git, String url)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "GitCloneTask.getName()", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(TaskQueue tasks)", "modifiers": "@Override public", "return": "void", "signature": "void run(TaskQueue tasks)", "full_signature": "@Override public void run(TaskQueue tasks)", "class_method_signature": "GitCloneTask.run(TaskQueue tasks)", "testcase": false, "constructor": false}], "file": "sdkfido/src/main/java/net/erdfelt/android/sdkfido/tasks/GitCloneTask.java"}, "focal_method": {"identifier": "run", "parameters": "(TaskQueue tasks)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run(TaskQueue tasks) throws Throwable {\n        if (git.exists()) {\n            LOG.info(\"git clone already performed, issuing pull instead.\");\n            tasks.insertAtHead(new GitPullRemoteTask(git));\n            return;\n        }\n\n        git.clone(remoteUrl);\n    }", "signature": "void run(TaskQueue tasks)", "full_signature": "@Override public void run(TaskQueue tasks)", "class_method_signature": "GitCloneTask.run(TaskQueue tasks)", "testcase": false, "constructor": false, "invocations": ["exists", "info", "insertAtHead", "clone"]}, "repository": {"repo_id": 1332011, "url": "https://github.com/joakime/android-sdkfido", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 9, "size": 984, "license": "licensed"}}