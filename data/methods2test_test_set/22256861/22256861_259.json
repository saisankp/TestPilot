{"test_class": {"identifier": "Landsat8MetadataTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Landsat8Metadata metadata;", "modifier": "private", "type": "Landsat8Metadata", "declarator": "metadata", "var_name": "metadata"}], "file": "s3tbx-landsat-reader/src/test/java/org/esa/s3tbx/dataio/landsat/geotiff/Landsat8MetadataTest.java"}, "test_case": {"identifier": "testGetSpectralInputString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSpectralInputString() throws Exception {\n        System.setProperty(LandsatGeotiffReader.SYSPROP_READ_AS, \"reflectance\");\n        assertEquals(\"REFLECTANCE\", Landsat8Metadata.getSpectralInputString());\n        System.setProperty(LandsatGeotiffReader.SYSPROP_READ_AS, \"radiance\");\n        assertEquals(\"RADIANCE\", Landsat8Metadata.getSpectralInputString());\n    }", "signature": "void testGetSpectralInputString()", "full_signature": "@Test public void testGetSpectralInputString()", "class_method_signature": "Landsat8MetadataTest.testGetSpectralInputString()", "testcase": true, "constructor": false, "invocations": ["setProperty", "assertEquals", "getSpectralInputString", "setProperty", "assertEquals", "getSpectralInputString"]}, "focal_class": {"identifier": "Landsat8Metadata", "superclass": "extends AbstractLandsatMetadata", "interfaces": "", "fields": [{"original_string": "private static final double DEFAULT_SCALE_FACTOR = 1.0;", "modifier": "private static final", "type": "double", "declarator": "DEFAULT_SCALE_FACTOR = 1.0", "var_name": "DEFAULT_SCALE_FACTOR"}, {"original_string": "private static final double DEFAULT_OFFSET = 0.0;", "modifier": "private static final", "type": "double", "declarator": "DEFAULT_OFFSET = 0.0", "var_name": "DEFAULT_OFFSET"}, {"original_string": "private static final Preferences PREFERENCES = Config.instance(\"s3tbx\").load().preferences();", "modifier": "private static final", "type": "Preferences", "declarator": "PREFERENCES = Config.instance(\"s3tbx\").load().preferences()", "var_name": "PREFERENCES"}, {"original_string": "private static final Logger LOG = Logger.getLogger(Landsat8Metadata.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(Landsat8Metadata.class.getName())", "var_name": "LOG"}, {"original_string": "private static final String[] BAND_DESCRIPTIONS = {\n            \"Coastal Aerosol (Operational Land Imager (OLI))\",\n            \"Blue (OLI)\",\n            \"Green (OLI)\",\n            \"Red (OLI)\",\n            \"Near-Infrared (NIR) (OLI)\",\n            \"Short Wavelength Infrared (SWIR) 1 (OLI)\",\n            \"SWIR 2 (OLI)\",\n            \"Panchromatic (OLI)\",\n            \"Cirrus (OLI)\",\n            \"Thermal Infrared Sensor (TIRS) 1\",\n            \"TIRS 2\"\n    };", "modifier": "private static final", "type": "String[]", "declarator": "BAND_DESCRIPTIONS = {\n            \"Coastal Aerosol (Operational Land Imager (OLI))\",\n            \"Blue (OLI)\",\n            \"Green (OLI)\",\n            \"Red (OLI)\",\n            \"Near-Infrared (NIR) (OLI)\",\n            \"Short Wavelength Infrared (SWIR) 1 (OLI)\",\n            \"SWIR 2 (OLI)\",\n            \"Panchromatic (OLI)\",\n            \"Cirrus (OLI)\",\n            \"Thermal Infrared Sensor (TIRS) 1\",\n            \"TIRS 2\"\n    }", "var_name": "BAND_DESCRIPTIONS"}, {"original_string": "private static final float[] WAVELENGTHS = {\n            440,\n            480,\n            560,\n            655,\n            865,\n            1610,\n            2200,\n            590,\n            1370,\n            10895,\n            12005\n    };", "modifier": "private static final", "type": "float[]", "declarator": "WAVELENGTHS = {\n            440,\n            480,\n            560,\n            655,\n            865,\n            1610,\n            2200,\n            590,\n            1370,\n            10895,\n            12005\n    }", "var_name": "WAVELENGTHS"}, {"original_string": "private static final String[] BAND_NAMES = {\n            \"coastal_aerosol\",\n            \"blue\",\n            \"green\",\n            \"red\",\n            \"near_infrared\",\n            \"swir_1\",\n            \"swir_2\",\n            \"panchromatic\",\n            \"cirrus\",\n            \"thermal_infrared_(tirs)_1\",\n            \"thermal_infrared_(tirs)_2\",\n    };", "modifier": "private static final", "type": "String[]", "declarator": "BAND_NAMES = {\n            \"coastal_aerosol\",\n            \"blue\",\n            \"green\",\n            \"red\",\n            \"near_infrared\",\n            \"swir_1\",\n            \"swir_2\",\n            \"panchromatic\",\n            \"cirrus\",\n            \"thermal_infrared_(tirs)_1\",\n            \"thermal_infrared_(tirs)_2\",\n    }", "var_name": "BAND_NAMES"}, {"original_string": "private static final float[] BANDWIDTHS = {\n            20,\n            60,\n            60,\n            30,\n            30,\n            80,\n            180,\n            180,\n            20,\n            590,\n            1010\n    };", "modifier": "private static final", "type": "float[]", "declarator": "BANDWIDTHS = {\n            20,\n            60,\n            60,\n            30,\n            30,\n            80,\n            180,\n            180,\n            20,\n            590,\n            1010\n    }", "var_name": "BANDWIDTHS"}], "methods": [{"identifier": "Landsat8Metadata", "parameters": "(Reader fileReader)", "modifiers": "public", "return": "", "signature": " Landsat8Metadata(Reader fileReader)", "full_signature": "public  Landsat8Metadata(Reader fileReader)", "class_method_signature": "Landsat8Metadata.Landsat8Metadata(Reader fileReader)", "testcase": false, "constructor": true}, {"identifier": "Landsat8Metadata", "parameters": "(MetadataElement root)", "modifiers": "public", "return": "", "signature": " Landsat8Metadata(MetadataElement root)", "full_signature": "public  Landsat8Metadata(MetadataElement root)", "class_method_signature": "Landsat8Metadata.Landsat8Metadata(MetadataElement root)", "testcase": false, "constructor": true}, {"identifier": "getProductMetadata", "parameters": "()", "modifiers": "@Override public", "return": "MetadataElement", "signature": "MetadataElement getProductMetadata()", "full_signature": "@Override public MetadataElement getProductMetadata()", "class_method_signature": "Landsat8Metadata.getProductMetadata()", "testcase": false, "constructor": false}, {"identifier": "getReflectanceDim", "parameters": "()", "modifiers": "@Override public", "return": "Dimension", "signature": "Dimension getReflectanceDim()", "full_signature": "@Override public Dimension getReflectanceDim()", "class_method_signature": "Landsat8Metadata.getReflectanceDim()", "testcase": false, "constructor": false}, {"identifier": "getThermalDim", "parameters": "()", "modifiers": "@Override public", "return": "Dimension", "signature": "Dimension getThermalDim()", "full_signature": "@Override public Dimension getThermalDim()", "class_method_signature": "Landsat8Metadata.getThermalDim()", "testcase": false, "constructor": false}, {"identifier": "getPanchromaticDim", "parameters": "()", "modifiers": "@Override public", "return": "Dimension", "signature": "Dimension getPanchromaticDim()", "full_signature": "@Override public Dimension getPanchromaticDim()", "class_method_signature": "Landsat8Metadata.getPanchromaticDim()", "testcase": false, "constructor": false}, {"identifier": "getProductType", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getProductType()", "full_signature": "@Override public String getProductType()", "class_method_signature": "Landsat8Metadata.getProductType()", "testcase": false, "constructor": false}, {"identifier": "getScalingFactor", "parameters": "(String bandId)", "modifiers": "@Override public", "return": "double", "signature": "double getScalingFactor(String bandId)", "full_signature": "@Override public double getScalingFactor(String bandId)", "class_method_signature": "Landsat8Metadata.getScalingFactor(String bandId)", "testcase": false, "constructor": false}, {"identifier": "getScalingOffset", "parameters": "(String bandId)", "modifiers": "@Override public", "return": "double", "signature": "double getScalingOffset(String bandId)", "full_signature": "@Override public double getScalingOffset(String bandId)", "class_method_signature": "Landsat8Metadata.getScalingOffset(String bandId)", "testcase": false, "constructor": false}, {"identifier": "getCenterTime", "parameters": "()", "modifiers": "@Override public", "return": "ProductData.UTC", "signature": "ProductData.UTC getCenterTime()", "full_signature": "@Override public ProductData.UTC getCenterTime()", "class_method_signature": "Landsat8Metadata.getCenterTime()", "testcase": false, "constructor": false}, {"identifier": "getOpticalBandFileNamePattern", "parameters": "()", "modifiers": "@Override public", "return": "Pattern", "signature": "Pattern getOpticalBandFileNamePattern()", "full_signature": "@Override public Pattern getOpticalBandFileNamePattern()", "class_method_signature": "Landsat8Metadata.getOpticalBandFileNamePattern()", "testcase": false, "constructor": false}, {"identifier": "getQualityBandNameKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getQualityBandNameKey()", "full_signature": "@Override public String getQualityBandNameKey()", "class_method_signature": "Landsat8Metadata.getQualityBandNameKey()", "testcase": false, "constructor": false}, {"identifier": "getWavelength", "parameters": "(String bandIndexNumber)", "modifiers": "@Override public", "return": "float", "signature": "float getWavelength(String bandIndexNumber)", "full_signature": "@Override public float getWavelength(String bandIndexNumber)", "class_method_signature": "Landsat8Metadata.getWavelength(String bandIndexNumber)", "testcase": false, "constructor": false}, {"identifier": "getBandwidth", "parameters": "(String bandIndexNumber)", "modifiers": "@Override public", "return": "float", "signature": "float getBandwidth(String bandIndexNumber)", "full_signature": "@Override public float getBandwidth(String bandIndexNumber)", "class_method_signature": "Landsat8Metadata.getBandwidth(String bandIndexNumber)", "testcase": false, "constructor": false}, {"identifier": "getBandDescription", "parameters": "(String bandNumber)", "modifiers": "@Override public", "return": "String", "signature": "String getBandDescription(String bandNumber)", "full_signature": "@Override public String getBandDescription(String bandNumber)", "class_method_signature": "Landsat8Metadata.getBandDescription(String bandNumber)", "testcase": false, "constructor": false}, {"identifier": "getBandNamePrefix", "parameters": "(String bandNumber)", "modifiers": "@Override public", "return": "String", "signature": "String getBandNamePrefix(String bandNumber)", "full_signature": "@Override public String getBandNamePrefix(String bandNumber)", "class_method_signature": "Landsat8Metadata.getBandNamePrefix(String bandNumber)", "testcase": false, "constructor": false}, {"identifier": "getIndex", "parameters": "(String bandIndexNumber)", "modifiers": "private static", "return": "int", "signature": "int getIndex(String bandIndexNumber)", "full_signature": "private static int getIndex(String bandIndexNumber)", "class_method_signature": "Landsat8Metadata.getIndex(String bandIndexNumber)", "testcase": false, "constructor": false}, {"identifier": "getSpectralInputString", "parameters": "()", "modifiers": "static", "return": "String", "signature": "String getSpectralInputString()", "full_signature": "static String getSpectralInputString()", "class_method_signature": "Landsat8Metadata.getSpectralInputString()", "testcase": false, "constructor": false}, {"identifier": "getSunAngleCorrectionFactor", "parameters": "(String spectralInput)", "modifiers": "private", "return": "double", "signature": "double getSunAngleCorrectionFactor(String spectralInput)", "full_signature": "private double getSunAngleCorrectionFactor(String spectralInput)", "class_method_signature": "Landsat8Metadata.getSunAngleCorrectionFactor(String spectralInput)", "testcase": false, "constructor": false}], "file": "s3tbx-landsat-reader/src/main/java/org/esa/s3tbx/dataio/landsat/geotiff/Landsat8Metadata.java"}, "focal_method": {"identifier": "getSpectralInputString", "parameters": "()", "modifiers": "static", "return": "String", "body": "static String getSpectralInputString() {\n        final Preferences preferences = Config.instance(\"s3tbx\").load().preferences();\n        final String readAs = preferences.get(LandsatGeotiffReader.SYSPROP_READ_AS, null);\n        String spectralInput;\n        if (readAs != null) {\n            switch (readAs.toLowerCase()) {\n                case \"reflectance\":\n                    spectralInput = \"REFLECTANCE\";\n                    break;\n                case \"radiance\":\n                    spectralInput = \"RADIANCE\";\n                    break;\n                default:\n                    spectralInput = \"RADIANCE\";\n                    LOG.warning(String.format(\"Property '%s' has unsupported value '%s'.%n\" +\n                                              \"Interpreting values as radiance.\",\n                                              LandsatGeotiffReader.SYSPROP_READ_AS, readAs));\n\n            }\n        }else {\n            spectralInput = \"RADIANCE\";\n        }\n        return spectralInput;\n    }", "signature": "String getSpectralInputString()", "full_signature": "static String getSpectralInputString()", "class_method_signature": "Landsat8Metadata.getSpectralInputString()", "testcase": false, "constructor": false, "invocations": ["preferences", "load", "instance", "get", "toLowerCase", "warning", "format"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}