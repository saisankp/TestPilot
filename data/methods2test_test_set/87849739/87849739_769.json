{"test_class": {"identifier": "PipelineFunctionParameterResolverFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String KNOWN_VALUE = \"expected\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_VALUE = \"expected\"", "var_name": "KNOWN_VALUE"}, {"original_string": "private static final String KNOWN_PLACEHOLDER = \"thing:name\";", "modifier": "private static final", "type": "String", "declarator": "KNOWN_PLACEHOLDER = \"thing:name\"", "var_name": "KNOWN_PLACEHOLDER"}, {"original_string": "private static final PipelineFunction DUMMY = new PipelineFunctionDelete();", "modifier": "private static final", "type": "PipelineFunction", "declarator": "DUMMY = new PipelineFunctionDelete()", "var_name": "DUMMY"}, {"original_string": "@Mock\n    private ExpressionResolver expressionResolver;", "modifier": "@Mock\n    private", "type": "ExpressionResolver", "declarator": "expressionResolver", "var_name": "expressionResolver"}], "file": "model/placeholders/src/test/java/org/eclipse/ditto/model/placeholders/PipelineFunctionParameterResolverFactoryTest.java"}, "test_case": {"identifier": "singleResolverResolvesPlaceholder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void singleResolverResolvesPlaceholder() {\n        final PipelineFunctionParameterResolverFactory.SingleParameterResolver parameterResolver =\n                PipelineFunctionParameterResolverFactory.forStringOrPlaceholderParameter();\n\n        final String params = \"(\" + KNOWN_PLACEHOLDER + \")\";\n        when(expressionResolver.resolveAsPipelineElement(anyString()))\n                .thenReturn(PipelineElement.resolved(KNOWN_VALUE));\n\n        assertThat(parameterResolver.apply(params, expressionResolver, DUMMY)).contains(KNOWN_VALUE);\n\n        verify(expressionResolver).resolveAsPipelineElement(KNOWN_PLACEHOLDER);\n    }", "signature": "void singleResolverResolvesPlaceholder()", "full_signature": "@Test public void singleResolverResolvesPlaceholder()", "class_method_signature": "PipelineFunctionParameterResolverFactoryTest.singleResolverResolvesPlaceholder()", "testcase": true, "constructor": false, "invocations": ["forStringOrPlaceholderParameter", "thenReturn", "when", "resolveAsPipelineElement", "anyString", "resolved", "contains", "assertThat", "apply", "resolveAsPipelineElement", "verify"]}, "focal_class": {"identifier": "PipelineFunctionParameterResolverFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final EmptyParameterResolver EMPTY_PARAMETER_RESOLVER = new EmptyParameterResolver();", "modifier": "private static final", "type": "EmptyParameterResolver", "declarator": "EMPTY_PARAMETER_RESOLVER = new EmptyParameterResolver()", "var_name": "EMPTY_PARAMETER_RESOLVER"}, {"original_string": "private static final SingleParameterResolver STRING_PARAMETER_RESOLVER = new SingleParameterResolver(false);", "modifier": "private static final", "type": "SingleParameterResolver", "declarator": "STRING_PARAMETER_RESOLVER = new SingleParameterResolver(false)", "var_name": "STRING_PARAMETER_RESOLVER"}, {"original_string": "private static final SingleParameterResolver STRING_OR_PLACEHOLDER_PARAMETER_RESOLVER =\n            new SingleParameterResolver(true);", "modifier": "private static final", "type": "SingleParameterResolver", "declarator": "STRING_OR_PLACEHOLDER_PARAMETER_RESOLVER =\n            new SingleParameterResolver(true)", "var_name": "STRING_OR_PLACEHOLDER_PARAMETER_RESOLVER"}, {"original_string": "private static final ParameterResolver TRIPLE_STRING_OR_PLACEHOLDER_PARAMETER_RESOLVER =\n            new ParameterResolver(3, true);", "modifier": "private static final", "type": "ParameterResolver", "declarator": "TRIPLE_STRING_OR_PLACEHOLDER_PARAMETER_RESOLVER =\n            new ParameterResolver(3, true)", "var_name": "TRIPLE_STRING_OR_PLACEHOLDER_PARAMETER_RESOLVER"}], "methods": [{"identifier": "forEmptyParameters", "parameters": "()", "modifiers": "static", "return": "EmptyParameterResolver", "signature": "EmptyParameterResolver forEmptyParameters()", "full_signature": "static EmptyParameterResolver forEmptyParameters()", "class_method_signature": "PipelineFunctionParameterResolverFactory.forEmptyParameters()", "testcase": false, "constructor": false}, {"identifier": "forStringParameter", "parameters": "()", "modifiers": "static", "return": "SingleParameterResolver", "signature": "SingleParameterResolver forStringParameter()", "full_signature": "static SingleParameterResolver forStringParameter()", "class_method_signature": "PipelineFunctionParameterResolverFactory.forStringParameter()", "testcase": false, "constructor": false}, {"identifier": "forStringOrPlaceholderParameter", "parameters": "()", "modifiers": "static", "return": "SingleParameterResolver", "signature": "SingleParameterResolver forStringOrPlaceholderParameter()", "full_signature": "static SingleParameterResolver forStringOrPlaceholderParameter()", "class_method_signature": "PipelineFunctionParameterResolverFactory.forStringOrPlaceholderParameter()", "testcase": false, "constructor": false}, {"identifier": "forTripleStringOrPlaceholderParameter", "parameters": "()", "modifiers": "static", "return": "ParameterResolver", "signature": "ParameterResolver forTripleStringOrPlaceholderParameter()", "full_signature": "static ParameterResolver forTripleStringOrPlaceholderParameter()", "class_method_signature": "PipelineFunctionParameterResolverFactory.forTripleStringOrPlaceholderParameter()", "testcase": false, "constructor": false}, {"identifier": "PipelineFunctionParameterResolverFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " PipelineFunctionParameterResolverFactory()", "full_signature": "private  PipelineFunctionParameterResolverFactory()", "class_method_signature": "PipelineFunctionParameterResolverFactory.PipelineFunctionParameterResolverFactory()", "testcase": false, "constructor": true}], "file": "model/placeholders/src/main/java/org/eclipse/ditto/model/placeholders/PipelineFunctionParameterResolverFactory.java"}, "focal_method": {"identifier": "forStringOrPlaceholderParameter", "parameters": "()", "modifiers": "static", "return": "SingleParameterResolver", "body": "static SingleParameterResolver forStringOrPlaceholderParameter() {\n        return STRING_OR_PLACEHOLDER_PARAMETER_RESOLVER;\n    }", "signature": "SingleParameterResolver forStringOrPlaceholderParameter()", "full_signature": "static SingleParameterResolver forStringOrPlaceholderParameter()", "class_method_signature": "PipelineFunctionParameterResolverFactory.forStringOrPlaceholderParameter()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}