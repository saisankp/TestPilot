{"test_class": {"identifier": "TransactionNormalizerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TransactionNormalizer normalizer = new TransactionNormalizer();", "modifier": "private final", "type": "TransactionNormalizer", "declarator": "normalizer = new TransactionNormalizer()", "var_name": "normalizer"}], "file": "services/src/test/java/com/greensopinion/finance/services/transaction/TransactionNormalizerTest.java"}, "test_case": {"identifier": "normalizeSome", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void normalizeSome() {\n\t\tTransaction transaction0 = mockTransaction(452);\n\t\tTransaction transaction1 = mockTransaction(-10234);\n\t\tTransaction transaction2 = mockTransaction(10234);\n\t\tTransaction transaction3 = mockTransaction(453);\n\t\tassertEquals(ImmutableList.of(transaction0, transaction3),\n\t\t\t\tnormalizer.normalize(ImmutableList.of(transaction0, transaction1, transaction2, transaction3)));\n\t}", "signature": "void normalizeSome()", "full_signature": "@Test public void normalizeSome()", "class_method_signature": "TransactionNormalizerTest.normalizeSome()", "testcase": true, "constructor": false, "invocations": ["mockTransaction", "mockTransaction", "mockTransaction", "mockTransaction", "assertEquals", "of", "normalize", "of"]}, "focal_class": {"identifier": "TransactionNormalizer", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "normalize", "parameters": "(List<Transaction> transactions)", "modifiers": "public", "return": "List<Transaction>", "signature": "List<Transaction> normalize(List<Transaction> transactions)", "full_signature": "public List<Transaction> normalize(List<Transaction> transactions)", "class_method_signature": "TransactionNormalizer.normalize(List<Transaction> transactions)", "testcase": false, "constructor": false}], "file": "services/src/main/java/com/greensopinion/finance/services/transaction/TransactionNormalizer.java"}, "focal_method": {"identifier": "normalize", "parameters": "(List<Transaction> transactions)", "modifiers": "public", "return": "List<Transaction>", "body": "public List<Transaction> normalize(List<Transaction> transactions) {\n\t\tList<Transaction> normalizedTransactions = new ArrayList<>(transactions);\n\n\t\tListMultimap<Long, Transaction> transactionByAbsoluteValue = ArrayListMultimap.create();\n\t\tfor (Transaction transaction : transactions) {\n\t\t\ttransactionByAbsoluteValue.put(Math.abs(transaction.getAmount()), transaction);\n\t\t}\n\t\tfor (Long amount : transactionByAbsoluteValue.keySet()) {\n\t\t\tList<Transaction> list = transactionByAbsoluteValue.get(amount);\n\t\t\tSet<Transaction> canceledOut = Sets.newIdentityHashSet();\n\t\t\tfor (Transaction transaction : list) {\n\t\t\t\tif (canceledOut.contains(transaction)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor (Transaction transaction2 : list) {\n\t\t\t\t\tif (transaction.getAmount() == -transaction2.getAmount() && !canceledOut.contains(transaction2)) {\n\t\t\t\t\t\tcanceledOut.add(transaction);\n\t\t\t\t\t\tcanceledOut.add(transaction2);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tnormalizedTransactions.removeAll(canceledOut);\n\t\t}\n\n\t\treturn normalizedTransactions;\n\t}", "signature": "List<Transaction> normalize(List<Transaction> transactions)", "full_signature": "public List<Transaction> normalize(List<Transaction> transactions)", "class_method_signature": "TransactionNormalizer.normalize(List<Transaction> transactions)", "testcase": false, "constructor": false, "invocations": ["create", "put", "abs", "getAmount", "keySet", "get", "newIdentityHashSet", "contains", "getAmount", "getAmount", "contains", "add", "add", "removeAll"]}, "repository": {"repo_id": 54854741, "url": "https://github.com/greensopinion/greenbeans", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 30, "size": 1684, "license": "licensed"}}