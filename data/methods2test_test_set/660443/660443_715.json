{"test_class": {"identifier": "IPBondLearningDescriptorTest", "superclass": "extends BondDescriptorTest", "interfaces": "", "fields": [{"original_string": "private IPBondLearningDescriptor descriptor;", "modifier": "private", "type": "IPBondLearningDescriptor", "declarator": "descriptor", "var_name": "descriptor"}, {"original_string": "private LonePairElectronChecker  lpcheck = new LonePairElectronChecker();", "modifier": "private", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}], "file": "legacy/src/test/java/org/openscience/cdk/qsar/descriptors/bond/IPBondLearningDescriptorTest.java"}, "test_case": {"identifier": "testIPDescriptor_3", "parameters": "()", "modifiers": "@Test @Category(SlowTest.class) public", "return": "void", "body": "@Test\n    @Category(SlowTest.class)\n    public void testIPDescriptor_3() throws java.lang.Exception {\n\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(\"C=CCCCC\");\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol);\n        addExplicitHydrogens(mol);\n        lpcheck.saturate(mol);\n\n        double result = ((DoubleResult) descriptor.calculate(mol.getBond(0), mol).getValue()).doubleValue();\n        double resultAccordingNIST = 9.44;\n        Assert.assertEquals(result, resultAccordingNIST, 0.3);\n    }", "signature": "void testIPDescriptor_3()", "full_signature": "@Test @Category(SlowTest.class) public void testIPDescriptor_3()", "class_method_signature": "IPBondLearningDescriptorTest.testIPDescriptor_3()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "percieveAtomTypesAndConfigureAtoms", "addExplicitHydrogens", "saturate", "doubleValue", "getValue", "calculate", "getBond", "assertEquals"]}, "focal_class": {"identifier": "IPBondLearningDescriptor", "superclass": "extends AbstractBondDescriptor", "interfaces": "", "fields": [{"original_string": "private static final String[] DESCRIPTOR_NAMES = {\"ipBondLearning\"};", "modifier": "private static final", "type": "String[]", "declarator": "DESCRIPTOR_NAMES = {\"ipBondLearning\"}", "var_name": "DESCRIPTOR_NAMES"}], "methods": [{"identifier": "IPBondLearningDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " IPBondLearningDescriptor()", "full_signature": "public  IPBondLearningDescriptor()", "class_method_signature": "IPBondLearningDescriptor.IPBondLearningDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "IPBondLearningDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "IPBondLearningDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "IPBondLearningDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "IPBondLearningDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "IPBondLearningDescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IBond bond, IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IBond bond, IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IBond bond, IAtomContainer atomContainer)", "class_method_signature": "IPBondLearningDescriptor.calculate(IBond bond, IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "IPBondLearningDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "IPBondLearningDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/qsar/descriptors/bond/IPBondLearningDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IBond bond, IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IBond bond, IAtomContainer atomContainer) {\n        double value = 0;\n        // FIXME: for now I'll cache a few modified atomic properties, and restore them at the end of this method\n        String originalAtomtypeName1 = bond.getBegin().getAtomTypeName();\n        Integer originalNeighborCount1 = bond.getBegin().getFormalNeighbourCount();\n        IAtomType.Hybridization originalHybridization1 = bond.getBegin().getHybridization();\n        Integer originalValency1 = bond.getBegin().getValency();\n        String originalAtomtypeName2 = bond.getEnd().getAtomTypeName();\n        Integer originalNeighborCount2 = bond.getEnd().getFormalNeighbourCount();\n        IAtomType.Hybridization originalHybridization2 = bond.getEnd().getHybridization();\n        Integer originalValency2 = bond.getEnd().getValency();\n        Double originalBondOrderSum1 = bond.getBegin().getBondOrderSum();\n        Order originalMaxBondOrder1 = bond.getBegin().getMaxBondOrder();\n        Double originalBondOrderSum2 = bond.getEnd().getBondOrderSum();\n        Order originalMaxBondOrder2 = bond.getEnd().getMaxBondOrder();\n\n        if (!isCachedAtomContainer(atomContainer)) {\n            try {\n                AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(atomContainer);\n                LonePairElectronChecker lpcheck = new LonePairElectronChecker();\n                lpcheck.saturate(atomContainer);\n            } catch (CDKException e) {\n                return getDummyDescriptorValue(e);\n            }\n\n        }\n        if (!bond.getOrder().equals(IBond.Order.SINGLE)) {\n            try {\n                value = IonizationPotentialTool.predictIP(atomContainer, bond);\n            } catch (CDKException e) {\n                return getDummyDescriptorValue(e);\n            }\n        }\n        bond.getBegin().setAtomTypeName(originalAtomtypeName1);\n        bond.getBegin().setHybridization(originalHybridization1);\n        bond.getBegin().setValency(originalValency1);\n        bond.getBegin().setFormalNeighbourCount(originalNeighborCount1);\n        bond.getEnd().setAtomTypeName(originalAtomtypeName2);\n        bond.getEnd().setHybridization(originalHybridization2);\n        bond.getEnd().setValency(originalValency2);\n        bond.getEnd().setFormalNeighbourCount(originalNeighborCount2);\n        bond.getBegin().setMaxBondOrder(originalMaxBondOrder1);\n        bond.getBegin().setBondOrderSum(originalBondOrderSum1);\n        bond.getEnd().setMaxBondOrder(originalMaxBondOrder2);\n        bond.getEnd().setBondOrderSum(originalBondOrderSum2);\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(value),\n                DESCRIPTOR_NAMES);\n    }", "signature": "DescriptorValue calculate(IBond bond, IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IBond bond, IAtomContainer atomContainer)", "class_method_signature": "IPBondLearningDescriptor.calculate(IBond bond, IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["getAtomTypeName", "getBegin", "getFormalNeighbourCount", "getBegin", "getHybridization", "getBegin", "getValency", "getBegin", "getAtomTypeName", "getEnd", "getFormalNeighbourCount", "getEnd", "getHybridization", "getEnd", "getValency", "getEnd", "getBondOrderSum", "getBegin", "getMaxBondOrder", "getBegin", "getBondOrderSum", "getEnd", "getMaxBondOrder", "getEnd", "isCachedAtomContainer", "percieveAtomTypesAndConfigureAtoms", "saturate", "getDummyDescriptorValue", "equals", "getOrder", "predictIP", "getDummyDescriptorValue", "setAtomTypeName", "getBegin", "setHybridization", "getBegin", "setValency", "getBegin", "setFormalNeighbourCount", "getBegin", "setAtomTypeName", "getEnd", "setHybridization", "getEnd", "setValency", "getEnd", "setFormalNeighbourCount", "getEnd", "setMaxBondOrder", "getBegin", "setBondOrderSum", "getBegin", "setMaxBondOrder", "getEnd", "setBondOrderSum", "getEnd", "getSpecification", "getParameterNames", "getParameters"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}