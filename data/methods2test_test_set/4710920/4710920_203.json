{"test_class": {"identifier": "EchoFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Filter echoFilter = new EchoFilter();", "modifier": "", "type": "Filter", "declarator": "echoFilter = new EchoFilter()", "var_name": "echoFilter"}], "file": "dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/filter/EchoFilterTest.java"}, "test_case": {"identifier": "testEcho", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testEcho() {\n        Invocation invocation = mock(Invocation.class);\n        given(invocation.getMethodName()).willReturn(\"$echo\");\n        given(invocation.getParameterTypes()).willReturn(new Class<?>[]{Enum.class});\n        given(invocation.getArguments()).willReturn(new Object[]{\"hello\"});\n        given(invocation.getObjectAttachments()).willReturn(null);\n\n        Invoker<DemoService> invoker = mock(Invoker.class);\n        given(invoker.isAvailable()).willReturn(true);\n        given(invoker.getInterface()).willReturn(DemoService.class);\n        AppResponse result = new AppResponse();\n        result.setValue(\"High\");\n        given(invoker.invoke(invocation)).willReturn(result);\n        URL url = URL.valueOf(\"test://test:11/test?group=dubbo&version=1.1\");\n        given(invoker.getUrl()).willReturn(url);\n\n        Result filterResult = echoFilter.invoke(invoker, invocation);\n        assertEquals(\"hello\", filterResult.getValue());\n    }", "signature": "void testEcho()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void testEcho()", "class_method_signature": "EchoFilterTest.testEcho()", "testcase": true, "constructor": false, "invocations": ["mock", "willReturn", "given", "getMethodName", "willReturn", "given", "getParameterTypes", "willReturn", "given", "getArguments", "willReturn", "given", "getObjectAttachments", "mock", "willReturn", "given", "isAvailable", "willReturn", "given", "getInterface", "setValue", "willReturn", "given", "invoke", "valueOf", "willReturn", "given", "getUrl", "invoke", "assertEquals", "getValue"]}, "focal_class": {"identifier": "EchoFilter", "superclass": "", "interfaces": "implements Filter", "fields": [], "methods": [{"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation inv)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invoker<?> invoker, Invocation inv)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation inv)", "class_method_signature": "EchoFilter.invoke(Invoker<?> invoker, Invocation inv)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/filter/EchoFilter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation inv)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(Invoker<?> invoker, Invocation inv) throws RpcException {\n        if (inv.getMethodName().equals($ECHO) && inv.getArguments() != null && inv.getArguments().length == 1) {\n            return AsyncRpcResult.newDefaultAsyncResult(inv.getArguments()[0], inv);\n        }\n        return invoker.invoke(inv);\n    }", "signature": "Result invoke(Invoker<?> invoker, Invocation inv)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation inv)", "class_method_signature": "EchoFilter.invoke(Invoker<?> invoker, Invocation inv)", "testcase": false, "constructor": false, "invocations": ["equals", "getMethodName", "getArguments", "getArguments", "newDefaultAsyncResult", "getArguments", "invoke"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}