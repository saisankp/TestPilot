{"test_class": {"identifier": "CommonCodegenUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/test/java/org/kie/pmml/compiler/commons/utils/CommonCodegenUtilsTest.java"}, "test_case": {"identifier": "getAssignExpression", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAssignExpression() {\n        BlockStmt body = new BlockStmt();\n        Optional<AssignExpr> retrieved = CommonCodegenUtils.getAssignExpression(body, \"NOMATCH\");\n        assertNotNull(retrieved);\n        assertFalse(retrieved.isPresent());\n        AssignExpr assignExpr = new AssignExpr();\n        assignExpr.setTarget(new NameExpr(\"MATCH\"));\n        body.addStatement(assignExpr);\n        retrieved = CommonCodegenUtils.getAssignExpression(body, \"NOMATCH\");\n        assertNotNull(retrieved);\n        assertFalse(retrieved.isPresent());\n        retrieved = CommonCodegenUtils.getAssignExpression(body, \"MATCH\");\n        assertNotNull(retrieved);\n        assertTrue(retrieved.isPresent());\n        AssignExpr retrievedAssignExpr = retrieved.get();\n        assertEquals(assignExpr, retrievedAssignExpr);\n    }", "signature": "void getAssignExpression()", "full_signature": "@Test public void getAssignExpression()", "class_method_signature": "CommonCodegenUtilsTest.getAssignExpression()", "testcase": true, "constructor": false, "invocations": ["getAssignExpression", "assertNotNull", "assertFalse", "isPresent", "setTarget", "addStatement", "getAssignExpression", "assertNotNull", "assertFalse", "isPresent", "getAssignExpression", "assertNotNull", "assertTrue", "isPresent", "get", "assertEquals"]}, "focal_class": {"identifier": "CommonCodegenUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static String OPTIONAL_FILTERED_KIEPMMLNAMEVALUE_NAME =\"kiePMMLNameValue\";", "modifier": "public static", "type": "String", "declarator": "OPTIONAL_FILTERED_KIEPMMLNAMEVALUE_NAME =\"kiePMMLNameValue\"", "var_name": "OPTIONAL_FILTERED_KIEPMMLNAMEVALUE_NAME"}, {"original_string": "static final String LAMBDA_PARAMETER_NAME = \"lmbdParam\";", "modifier": "static final", "type": "String", "declarator": "LAMBDA_PARAMETER_NAME = \"lmbdParam\"", "var_name": "LAMBDA_PARAMETER_NAME"}, {"original_string": "static final String METHOD_NAME_TEMPLATE = \"%s%s\";", "modifier": "static final", "type": "String", "declarator": "METHOD_NAME_TEMPLATE = \"%s%s\"", "var_name": "METHOD_NAME_TEMPLATE"}, {"original_string": "static final String PARAMETER_NAME_TEMPLATE = \"param%s\";", "modifier": "static final", "type": "String", "declarator": "PARAMETER_NAME_TEMPLATE = \"param%s\"", "var_name": "PARAMETER_NAME_TEMPLATE"}], "methods": [{"identifier": "CommonCodegenUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " CommonCodegenUtils()", "full_signature": "private  CommonCodegenUtils()", "class_method_signature": "CommonCodegenUtils.CommonCodegenUtils()", "testcase": false, "constructor": true}, {"identifier": "populateMethodDeclarations", "parameters": "(final ClassOrInterfaceDeclaration toPopulate,\n                                                  final Collection<MethodDeclaration> methodDeclarations)", "modifiers": "public static", "return": "void", "signature": "void populateMethodDeclarations(final ClassOrInterfaceDeclaration toPopulate,\n                                                  final Collection<MethodDeclaration> methodDeclarations)", "full_signature": "public static void populateMethodDeclarations(final ClassOrInterfaceDeclaration toPopulate,\n                                                  final Collection<MethodDeclaration> methodDeclarations)", "class_method_signature": "CommonCodegenUtils.populateMethodDeclarations(final ClassOrInterfaceDeclaration toPopulate,\n                                                  final Collection<MethodDeclaration> methodDeclarations)", "testcase": false, "constructor": false}, {"identifier": "getFilteredKiePMMLNameValueExpression", "parameters": "(final String kiePMMLNameValueListParam,\n                                                                       final String fieldNameToRef,\n                                                                       boolean stringLiteralComparison)", "modifiers": "public static", "return": "ExpressionStmt", "signature": "ExpressionStmt getFilteredKiePMMLNameValueExpression(final String kiePMMLNameValueListParam,\n                                                                       final String fieldNameToRef,\n                                                                       boolean stringLiteralComparison)", "full_signature": "public static ExpressionStmt getFilteredKiePMMLNameValueExpression(final String kiePMMLNameValueListParam,\n                                                                       final String fieldNameToRef,\n                                                                       boolean stringLiteralComparison)", "class_method_signature": "CommonCodegenUtils.getFilteredKiePMMLNameValueExpression(final String kiePMMLNameValueListParam,\n                                                                       final String fieldNameToRef,\n                                                                       boolean stringLiteralComparison)", "testcase": false, "constructor": false}, {"identifier": "addMapPopulation", "parameters": "(final Map<String, MethodDeclaration> toAdd,\n                                        final BlockStmt body,\n                                        final String mapName)", "modifiers": "public static", "return": "void", "signature": "void addMapPopulation(final Map<String, MethodDeclaration> toAdd,\n                                        final BlockStmt body,\n                                        final String mapName)", "full_signature": "public static void addMapPopulation(final Map<String, MethodDeclaration> toAdd,\n                                        final BlockStmt body,\n                                        final String mapName)", "class_method_signature": "CommonCodegenUtils.addMapPopulation(final Map<String, MethodDeclaration> toAdd,\n                                        final BlockStmt body,\n                                        final String mapName)", "testcase": false, "constructor": false}, {"identifier": "getMethodDeclaration", "parameters": "(final String methodName,\n                                                         final Map<String, ClassOrInterfaceType> parameterNameTypeMap)", "modifiers": "public static", "return": "MethodDeclaration", "signature": "MethodDeclaration getMethodDeclaration(final String methodName,\n                                                         final Map<String, ClassOrInterfaceType> parameterNameTypeMap)", "full_signature": "public static MethodDeclaration getMethodDeclaration(final String methodName,\n                                                         final Map<String, ClassOrInterfaceType> parameterNameTypeMap)", "class_method_signature": "CommonCodegenUtils.getMethodDeclaration(final String methodName,\n                                                         final Map<String, ClassOrInterfaceType> parameterNameTypeMap)", "testcase": false, "constructor": false}, {"identifier": "getMethodDeclaration", "parameters": "(final String methodName)", "modifiers": "public static", "return": "MethodDeclaration", "signature": "MethodDeclaration getMethodDeclaration(final String methodName)", "full_signature": "public static MethodDeclaration getMethodDeclaration(final String methodName)", "class_method_signature": "CommonCodegenUtils.getMethodDeclaration(final String methodName)", "testcase": false, "constructor": false}, {"identifier": "getReturnStmt", "parameters": "(final String returnedVariableName)", "modifiers": "public static", "return": "ReturnStmt", "signature": "ReturnStmt getReturnStmt(final String returnedVariableName)", "full_signature": "public static ReturnStmt getReturnStmt(final String returnedVariableName)", "class_method_signature": "CommonCodegenUtils.getReturnStmt(final String returnedVariableName)", "testcase": false, "constructor": false}, {"identifier": "getTypedClassOrInterfaceType", "parameters": "(final String className,\n                                                                    final List<String> typesName )", "modifiers": "public static", "return": "ClassOrInterfaceType", "signature": "ClassOrInterfaceType getTypedClassOrInterfaceType(final String className,\n                                                                    final List<String> typesName )", "full_signature": "public static ClassOrInterfaceType getTypedClassOrInterfaceType(final String className,\n                                                                    final List<String> typesName )", "class_method_signature": "CommonCodegenUtils.getTypedClassOrInterfaceType(final String className,\n                                                                    final List<String> typesName )", "testcase": false, "constructor": false}, {"identifier": "setAssignExpressionValue", "parameters": "( final BlockStmt body, final String assignExpressionName, final Expression value)", "modifiers": "public static", "return": "void", "signature": "void setAssignExpressionValue( final BlockStmt body, final String assignExpressionName, final Expression value)", "full_signature": "public static void setAssignExpressionValue( final BlockStmt body, final String assignExpressionName, final Expression value)", "class_method_signature": "CommonCodegenUtils.setAssignExpressionValue( final BlockStmt body, final String assignExpressionName, final Expression value)", "testcase": false, "constructor": false}, {"identifier": "getAssignExpression", "parameters": "(final BlockStmt body, final String assignExpressionName)", "modifiers": "public static", "return": "Optional<AssignExpr>", "signature": "Optional<AssignExpr> getAssignExpression(final BlockStmt body, final String assignExpressionName)", "full_signature": "public static Optional<AssignExpr> getAssignExpression(final BlockStmt body, final String assignExpressionName)", "class_method_signature": "CommonCodegenUtils.getAssignExpression(final BlockStmt body, final String assignExpressionName)", "testcase": false, "constructor": false}, {"identifier": "getExplicitConstructorInvocationStmt", "parameters": "(final BlockStmt body)", "modifiers": "public static", "return": "Optional<ExplicitConstructorInvocationStmt>", "signature": "Optional<ExplicitConstructorInvocationStmt> getExplicitConstructorInvocationStmt(final BlockStmt body)", "full_signature": "public static Optional<ExplicitConstructorInvocationStmt> getExplicitConstructorInvocationStmt(final BlockStmt body)", "class_method_signature": "CommonCodegenUtils.getExplicitConstructorInvocationStmt(final BlockStmt body)", "testcase": false, "constructor": false}, {"identifier": "setExplicitConstructorInvocationArgument", "parameters": "(final ExplicitConstructorInvocationStmt constructorInvocationStmt, final String parameterName, final String value)", "modifiers": "public static", "return": "void", "signature": "void setExplicitConstructorInvocationArgument(final ExplicitConstructorInvocationStmt constructorInvocationStmt, final String parameterName, final String value)", "full_signature": "public static void setExplicitConstructorInvocationArgument(final ExplicitConstructorInvocationStmt constructorInvocationStmt, final String parameterName, final String value)", "class_method_signature": "CommonCodegenUtils.setExplicitConstructorInvocationArgument(final ExplicitConstructorInvocationStmt constructorInvocationStmt, final String parameterName, final String value)", "testcase": false, "constructor": false}, {"identifier": "getExplicitConstructorInvocationParameter", "parameters": "(final ExplicitConstructorInvocationStmt constructorInvocationStmt, final String parameterName)", "modifiers": "public static", "return": "Optional<NameExpr>", "signature": "Optional<NameExpr> getExplicitConstructorInvocationParameter(final ExplicitConstructorInvocationStmt constructorInvocationStmt, final String parameterName)", "full_signature": "public static Optional<NameExpr> getExplicitConstructorInvocationParameter(final ExplicitConstructorInvocationStmt constructorInvocationStmt, final String parameterName)", "class_method_signature": "CommonCodegenUtils.getExplicitConstructorInvocationParameter(final ExplicitConstructorInvocationStmt constructorInvocationStmt, final String parameterName)", "testcase": false, "constructor": false}, {"identifier": "getMethodDeclaration", "parameters": "(final ClassOrInterfaceDeclaration classOrInterfaceDeclaration, final String methodName)", "modifiers": "public static", "return": "Optional<MethodDeclaration>", "signature": "Optional<MethodDeclaration> getMethodDeclaration(final ClassOrInterfaceDeclaration classOrInterfaceDeclaration, final String methodName)", "full_signature": "public static Optional<MethodDeclaration> getMethodDeclaration(final ClassOrInterfaceDeclaration classOrInterfaceDeclaration, final String methodName)", "class_method_signature": "CommonCodegenUtils.getMethodDeclaration(final ClassOrInterfaceDeclaration classOrInterfaceDeclaration, final String methodName)", "testcase": false, "constructor": false}, {"identifier": "addMethod", "parameters": "(final MethodDeclaration methodTemplate,\n                                                 final ClassOrInterfaceDeclaration tableTemplate,\n                                                 final String methodName)", "modifiers": "public static", "return": "MethodDeclaration", "signature": "MethodDeclaration addMethod(final MethodDeclaration methodTemplate,\n                                                 final ClassOrInterfaceDeclaration tableTemplate,\n                                                 final String methodName)", "full_signature": "public static MethodDeclaration addMethod(final MethodDeclaration methodTemplate,\n                                                 final ClassOrInterfaceDeclaration tableTemplate,\n                                                 final String methodName)", "class_method_signature": "CommonCodegenUtils.addMethod(final MethodDeclaration methodTemplate,\n                                                 final ClassOrInterfaceDeclaration tableTemplate,\n                                                 final String methodName)", "testcase": false, "constructor": false}, {"identifier": "getVariableDeclarator", "parameters": "(final BlockStmt body, final String variableName)", "modifiers": "public static", "return": "Optional<VariableDeclarator>", "signature": "Optional<VariableDeclarator> getVariableDeclarator(final BlockStmt body, final String variableName)", "full_signature": "public static Optional<VariableDeclarator> getVariableDeclarator(final BlockStmt body, final String variableName)", "class_method_signature": "CommonCodegenUtils.getVariableDeclarator(final BlockStmt body, final String variableName)", "testcase": false, "constructor": false}], "file": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/CommonCodegenUtils.java"}, "focal_method": {"identifier": "getAssignExpression", "parameters": "(final BlockStmt body, final String assignExpressionName)", "modifiers": "public static", "return": "Optional<AssignExpr>", "body": "public static Optional<AssignExpr> getAssignExpression(final BlockStmt body, final String assignExpressionName) {\n        final List<AssignExpr> assignExprs = body.findAll(AssignExpr.class);\n        return assignExprs.stream()\n                .filter(assignExpr -> assignExpressionName.equals(assignExpr.getTarget().asNameExpr().getNameAsString()))\n                .findFirst();\n    }", "signature": "Optional<AssignExpr> getAssignExpression(final BlockStmt body, final String assignExpressionName)", "full_signature": "public static Optional<AssignExpr> getAssignExpression(final BlockStmt body, final String assignExpressionName)", "class_method_signature": "CommonCodegenUtils.getAssignExpression(final BlockStmt body, final String assignExpressionName)", "testcase": false, "constructor": false, "invocations": ["findAll", "findFirst", "filter", "stream", "equals", "getNameAsString", "asNameExpr", "getTarget"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}