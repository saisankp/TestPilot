{"test_class": {"identifier": "HibernateSimpleQueryUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "backend/project-board/src/test/java/de/adesso/projectboard/base/search/HibernateSimpleQueryUtilsTest.java"}, "test_case": {"identifier": "getIndexAfterFirstAppearanceOfReturnsMinusOneWhenCharacterNotPresent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getIndexAfterFirstAppearanceOfReturnsMinusOneWhenCharacterNotPresent() {\n        // given\n        var input = \"abc\";\n        var character = 'e';\n        var expectedIndex = -1;\n        var startIndex = 0;\n\n        // when\n        var actualIndex = HibernateSimpleQueryUtils.getIndexAfterFirstAppearanceOf(startIndex, character, input);\n\n        // then\n        assertThat(actualIndex).isEqualTo(expectedIndex);\n    }", "signature": "void getIndexAfterFirstAppearanceOfReturnsMinusOneWhenCharacterNotPresent()", "full_signature": "@Test public void getIndexAfterFirstAppearanceOfReturnsMinusOneWhenCharacterNotPresent()", "class_method_signature": "HibernateSimpleQueryUtilsTest.getIndexAfterFirstAppearanceOfReturnsMinusOneWhenCharacterNotPresent()", "testcase": true, "constructor": false, "invocations": ["getIndexAfterFirstAppearanceOf", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "HibernateSimpleQueryUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<Character> TERM_DELIMITER = Set.of('(', ')', '|', ' ', '&', '-');", "modifier": "private static final", "type": "Set<Character>", "declarator": "TERM_DELIMITER = Set.of('(', ')', '|', ' ', '&', '-')", "var_name": "TERM_DELIMITER"}, {"original_string": "private static final Set<Character> SPECIAL_CHARACTERS = Set.of('~', '*');", "modifier": "private static final", "type": "Set<Character>", "declarator": "SPECIAL_CHARACTERS = Set.of('~', '*')", "var_name": "SPECIAL_CHARACTERS"}], "methods": [{"identifier": "makeQueryPrefixAndFuzzy", "parameters": "(@NonNull String simpleQuery)", "modifiers": "public static", "return": "String", "signature": "String makeQueryPrefixAndFuzzy(@NonNull String simpleQuery)", "full_signature": "public static String makeQueryPrefixAndFuzzy(@NonNull String simpleQuery)", "class_method_signature": "HibernateSimpleQueryUtils.makeQueryPrefixAndFuzzy(@NonNull String simpleQuery)", "testcase": false, "constructor": false}, {"identifier": "replaceTermWithFuzzyAndPrefixDisjunction", "parameters": "(Pair<Integer, Integer> startEndIndexPair, String simpleQuery)", "modifiers": "static", "return": "String", "signature": "String replaceTermWithFuzzyAndPrefixDisjunction(Pair<Integer, Integer> startEndIndexPair, String simpleQuery)", "full_signature": "static String replaceTermWithFuzzyAndPrefixDisjunction(Pair<Integer, Integer> startEndIndexPair, String simpleQuery)", "class_method_signature": "HibernateSimpleQueryUtils.replaceTermWithFuzzyAndPrefixDisjunction(Pair<Integer, Integer> startEndIndexPair, String simpleQuery)", "testcase": false, "constructor": false}, {"identifier": "replaceSubstring", "parameters": "(Pair<Integer, Integer> startEndIndexPair, String stringToReplaceIn, String replacement)", "modifiers": "static", "return": "String", "signature": "String replaceSubstring(Pair<Integer, Integer> startEndIndexPair, String stringToReplaceIn, String replacement)", "full_signature": "static String replaceSubstring(Pair<Integer, Integer> startEndIndexPair, String stringToReplaceIn, String replacement)", "class_method_signature": "HibernateSimpleQueryUtils.replaceSubstring(Pair<Integer, Integer> startEndIndexPair, String stringToReplaceIn, String replacement)", "testcase": false, "constructor": false}, {"identifier": "getIndexAfterFirstAppearanceOfAny", "parameters": "(int startIndex, Set<Character> characters, String searchedString)", "modifiers": "static", "return": "int", "signature": "int getIndexAfterFirstAppearanceOfAny(int startIndex, Set<Character> characters, String searchedString)", "full_signature": "static int getIndexAfterFirstAppearanceOfAny(int startIndex, Set<Character> characters, String searchedString)", "class_method_signature": "HibernateSimpleQueryUtils.getIndexAfterFirstAppearanceOfAny(int startIndex, Set<Character> characters, String searchedString)", "testcase": false, "constructor": false}, {"identifier": "getIndexAfterFirstAppearanceOf", "parameters": "(int startIndex, char character, String searchedString)", "modifiers": "static", "return": "int", "signature": "int getIndexAfterFirstAppearanceOf(int startIndex, char character, String searchedString)", "full_signature": "static int getIndexAfterFirstAppearanceOf(int startIndex, char character, String searchedString)", "class_method_signature": "HibernateSimpleQueryUtils.getIndexAfterFirstAppearanceOf(int startIndex, char character, String searchedString)", "testcase": false, "constructor": false}, {"identifier": "getIndexOfFirstAppearanceOfAny", "parameters": "(int startIndex, Set<Character> characters, String searchedString)", "modifiers": "static", "return": "int", "signature": "int getIndexOfFirstAppearanceOfAny(int startIndex, Set<Character> characters, String searchedString)", "full_signature": "static int getIndexOfFirstAppearanceOfAny(int startIndex, Set<Character> characters, String searchedString)", "class_method_signature": "HibernateSimpleQueryUtils.getIndexOfFirstAppearanceOfAny(int startIndex, Set<Character> characters, String searchedString)", "testcase": false, "constructor": false}, {"identifier": "getIndexAfterPhraseTerm", "parameters": "(int startIndex, String simpleQuery)", "modifiers": "static", "return": "int", "signature": "int getIndexAfterPhraseTerm(int startIndex, String simpleQuery)", "full_signature": "static int getIndexAfterPhraseTerm(int startIndex, String simpleQuery)", "class_method_signature": "HibernateSimpleQueryUtils.getIndexAfterPhraseTerm(int startIndex, String simpleQuery)", "testcase": false, "constructor": false}, {"identifier": "getReplaceableTermsOfQuery", "parameters": "(String simpleQuery)", "modifiers": "static", "return": "List<Pair<Integer, Integer>>", "signature": "List<Pair<Integer, Integer>> getReplaceableTermsOfQuery(String simpleQuery)", "full_signature": "static List<Pair<Integer, Integer>> getReplaceableTermsOfQuery(String simpleQuery)", "class_method_signature": "HibernateSimpleQueryUtils.getReplaceableTermsOfQuery(String simpleQuery)", "testcase": false, "constructor": false}, {"identifier": "createLuceneQueryString", "parameters": "(Collection<String> values, String operator,\n                                                  Function<String, String> function)", "modifiers": "public static", "return": "String", "signature": "String createLuceneQueryString(Collection<String> values, String operator,\n                                                  Function<String, String> function)", "full_signature": "public static String createLuceneQueryString(Collection<String> values, String operator,\n                                                  Function<String, String> function)", "class_method_signature": "HibernateSimpleQueryUtils.createLuceneQueryString(Collection<String> values, String operator,\n                                                  Function<String, String> function)", "testcase": false, "constructor": false}, {"identifier": "createLuceneQueryString", "parameters": "(Collection<String> values, String operator)", "modifiers": "public static", "return": "String", "signature": "String createLuceneQueryString(Collection<String> values, String operator)", "full_signature": "public static String createLuceneQueryString(Collection<String> values, String operator)", "class_method_signature": "HibernateSimpleQueryUtils.createLuceneQueryString(Collection<String> values, String operator)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/base/search/HibernateSimpleQueryUtils.java"}, "focal_method": {"identifier": "getIndexAfterFirstAppearanceOf", "parameters": "(int startIndex, char character, String searchedString)", "modifiers": "static", "return": "int", "body": "static int getIndexAfterFirstAppearanceOf(int startIndex, char character, String searchedString) {\n        var queryCharCount = searchedString.length();\n\n        if(startIndex >= queryCharCount) {\n            return -1;\n        }\n\n        var indexAfterFirstAppearance = searchedString.substring(startIndex).indexOf(character) + startIndex + 1;\n        if(indexAfterFirstAppearance > 0 && indexAfterFirstAppearance < queryCharCount) {\n            return indexAfterFirstAppearance;\n        }\n\n        return -1;\n    }", "signature": "int getIndexAfterFirstAppearanceOf(int startIndex, char character, String searchedString)", "full_signature": "static int getIndexAfterFirstAppearanceOf(int startIndex, char character, String searchedString)", "class_method_signature": "HibernateSimpleQueryUtils.getIndexAfterFirstAppearanceOf(int startIndex, char character, String searchedString)", "testcase": false, "constructor": false, "invocations": ["length", "indexOf", "substring"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}