{"test_class": {"identifier": "SanitizedFileTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/org/fdroid/fdroid/data/SanitizedFileTest.java"}, "test_case": {"identifier": "testSanitizedFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSanitizedFile() {\n        assumeTrue(\"/\".equals(System.getProperty(\"file.separator\")));\n\n        File directory = new File(\"/tmp/blah\");\n\n        String safeFile = \"safe\";\n        String nonEvilFile = \"$%^safe-and_bleh.boo*@~\";\n        String evilFile = \";rm /etc/shadow;\";\n\n        File safeNotSanitized = new File(directory, safeFile);\n        File nonEvilNotSanitized = new File(directory, nonEvilFile);\n        File evilNotSanitized = new File(directory, evilFile);\n\n        assertEquals(\"/tmp/blah/safe\", safeNotSanitized.getAbsolutePath());\n        assertEquals(\"/tmp/blah/$%^safe-and_bleh.boo*@~\", nonEvilNotSanitized.getAbsolutePath());\n        assertEquals(\"/tmp/blah/;rm /etc/shadow;\", evilNotSanitized.getAbsolutePath());\n\n        assertEquals(\"safe\", safeNotSanitized.getName());\n        assertEquals(\"$%^safe-and_bleh.boo*@~\", nonEvilNotSanitized.getName());\n        assertEquals(\"shadow;\", evilNotSanitized.getName());\n\n        SanitizedFile safeSanitized = new SanitizedFile(directory, safeFile);\n        SanitizedFile nonEvilSanitized = new SanitizedFile(directory, nonEvilFile);\n        SanitizedFile evilSanitized = new SanitizedFile(directory, evilFile);\n\n        assertEquals(\"/tmp/blah/safe\", safeSanitized.getAbsolutePath());\n        assertEquals(\"/tmp/blah/safe-and_bleh.boo\", nonEvilSanitized.getAbsolutePath());\n        assertEquals(\"/tmp/blah/rm etcshadow\", evilSanitized.getAbsolutePath());\n\n        assertEquals(\"safe\", safeSanitized.getName());\n        assertEquals(\"safe-and_bleh.boo\", nonEvilSanitized.getName());\n        assertEquals(\"rm etcshadow\", evilSanitized.getName());\n\n    }", "signature": "void testSanitizedFile()", "full_signature": "@Test public void testSanitizedFile()", "class_method_signature": "SanitizedFileTest.testSanitizedFile()", "testcase": true, "constructor": false, "invocations": ["assumeTrue", "equals", "getProperty", "assertEquals", "getAbsolutePath", "assertEquals", "getAbsolutePath", "assertEquals", "getAbsolutePath", "assertEquals", "getName", "assertEquals", "getName", "assertEquals", "getName", "assertEquals", "getAbsolutePath", "assertEquals", "getAbsolutePath", "assertEquals", "getAbsolutePath", "assertEquals", "getName", "assertEquals", "getName", "assertEquals", "getName"]}, "focal_class": {"identifier": "SanitizedFile", "superclass": "extends File", "interfaces": "", "fields": [], "methods": [{"identifier": "sanitizeFileName", "parameters": "(String name)", "modifiers": "public static", "return": "String", "signature": "String sanitizeFileName(String name)", "full_signature": "public static String sanitizeFileName(String name)", "class_method_signature": "SanitizedFile.sanitizeFileName(String name)", "testcase": false, "constructor": false}, {"identifier": "SanitizedFile", "parameters": "(File parent, String name)", "modifiers": "public", "return": "", "signature": " SanitizedFile(File parent, String name)", "full_signature": "public  SanitizedFile(File parent, String name)", "class_method_signature": "SanitizedFile.SanitizedFile(File parent, String name)", "testcase": false, "constructor": true}, {"identifier": "SanitizedFile", "parameters": "(File file)", "modifiers": "private", "return": "", "signature": " SanitizedFile(File file)", "full_signature": "private  SanitizedFile(File file)", "class_method_signature": "SanitizedFile.SanitizedFile(File file)", "testcase": false, "constructor": true}, {"identifier": "knownSanitized", "parameters": "(String path)", "modifiers": "public static", "return": "SanitizedFile", "signature": "SanitizedFile knownSanitized(String path)", "full_signature": "public static SanitizedFile knownSanitized(String path)", "class_method_signature": "SanitizedFile.knownSanitized(String path)", "testcase": false, "constructor": false}, {"identifier": "knownSanitized", "parameters": "(File file)", "modifiers": "public static", "return": "SanitizedFile", "signature": "SanitizedFile knownSanitized(File file)", "full_signature": "public static SanitizedFile knownSanitized(File file)", "class_method_signature": "SanitizedFile.knownSanitized(File file)", "testcase": false, "constructor": false}], "file": "app/src/main/java/org/fdroid/fdroid/data/SanitizedFile.java"}, "focal_method": {"identifier": "SanitizedFile", "parameters": "(File parent, String name)", "modifiers": "public", "return": "", "body": "public SanitizedFile(File parent, String name) {\n        super(parent, sanitizeFileName(name));\n    }", "signature": " SanitizedFile(File parent, String name)", "full_signature": "public  SanitizedFile(File parent, String name)", "class_method_signature": "SanitizedFile.SanitizedFile(File parent, String name)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 22165604, "url": "https://github.com/f-droid/fdroidclient", "stars": 331, "created": "7/23/2014 5:46:02 PM +00:00", "updates": "2020-01-25T14:27:31+00:00", "fork": "False", "license": "licensed"}}