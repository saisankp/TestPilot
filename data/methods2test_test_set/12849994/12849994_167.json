{"test_class": {"identifier": "RangeIndexTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "RangeIndex rangeIndex;", "modifier": "", "type": "RangeIndex", "declarator": "rangeIndex", "var_name": "rangeIndex"}, {"original_string": "@Mock\n  Comparable<Object> comparable, lowerBound, upperBound;", "modifier": "@Mock", "type": "Comparable<Object>", "declarator": "comparable", "var_name": "comparable"}, {"original_string": "@Mock\n  NavigableMap<Object, Set<Object>> map;", "modifier": "@Mock", "type": "NavigableMap<Object, Set<Object>>", "declarator": "map", "var_name": "map"}, {"original_string": "@Mock\n  Entry<Object, Set<Object>> entry;", "modifier": "@Mock", "type": "Entry<Object, Set<Object>>", "declarator": "entry", "var_name": "entry"}, {"original_string": "@Spy\n  List<Object> result = new ArrayList<Object>();", "modifier": "@Spy", "type": "List<Object>", "declarator": "result = new ArrayList<Object>()", "var_name": "result"}], "file": "imcache-core/src/test/java/com/cetsoft/imcache/cache/search/index/RangeIndexTest.java"}, "test_case": {"identifier": "equalsTo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void equalsTo() {\n    List<Object> list = new ArrayList<Object>();\n    Object value = new Object();\n    Set<Object> set = new HashSet<Object>();\n    set.add(value);\n    doReturn(set).when(map).get(value);\n    rangeIndex.equalsTo(value, list);\n    assertTrue(list.contains(value));\n  }", "signature": "void equalsTo()", "full_signature": "@Test public void equalsTo()", "class_method_signature": "RangeIndexTest.equalsTo()", "testcase": true, "constructor": false, "invocations": ["add", "get", "when", "doReturn", "equalsTo", "assertTrue", "contains"]}, "focal_class": {"identifier": "RangeIndex", "superclass": "extends MultiValueIndex", "interfaces": "", "fields": [], "methods": [{"identifier": "RangeIndex", "parameters": "()", "modifiers": "public", "return": "", "signature": " RangeIndex()", "full_signature": "public  RangeIndex()", "class_method_signature": "RangeIndex.RangeIndex()", "testcase": false, "constructor": true}, {"identifier": "lessThan", "parameters": "(Object value)", "modifiers": "public", "return": "List<Object>", "signature": "List<Object> lessThan(Object value)", "full_signature": "public List<Object> lessThan(Object value)", "class_method_signature": "RangeIndex.lessThan(Object value)", "testcase": false, "constructor": false}, {"identifier": "lessThanOrEqualsTo", "parameters": "(Object value)", "modifiers": "public", "return": "List<Object>", "signature": "List<Object> lessThanOrEqualsTo(Object value)", "full_signature": "public List<Object> lessThanOrEqualsTo(Object value)", "class_method_signature": "RangeIndex.lessThanOrEqualsTo(Object value)", "testcase": false, "constructor": false}, {"identifier": "lower", "parameters": "(NavigableMap<Object, Set<Object>> map,\n      Entry<Object, Set<Object>> current)", "modifiers": "protected", "return": "List<Object>", "signature": "List<Object> lower(NavigableMap<Object, Set<Object>> map,\n      Entry<Object, Set<Object>> current)", "full_signature": "protected List<Object> lower(NavigableMap<Object, Set<Object>> map,\n      Entry<Object, Set<Object>> current)", "class_method_signature": "RangeIndex.lower(NavigableMap<Object, Set<Object>> map,\n      Entry<Object, Set<Object>> current)", "testcase": false, "constructor": false}, {"identifier": "greaterThan", "parameters": "(Object value)", "modifiers": "public", "return": "List<Object>", "signature": "List<Object> greaterThan(Object value)", "full_signature": "public List<Object> greaterThan(Object value)", "class_method_signature": "RangeIndex.greaterThan(Object value)", "testcase": false, "constructor": false}, {"identifier": "greaterThanOrEqualsTo", "parameters": "(Object value)", "modifiers": "public", "return": "List<Object>", "signature": "List<Object> greaterThanOrEqualsTo(Object value)", "full_signature": "public List<Object> greaterThanOrEqualsTo(Object value)", "class_method_signature": "RangeIndex.greaterThanOrEqualsTo(Object value)", "testcase": false, "constructor": false}, {"identifier": "equalsTo", "parameters": "(Object value, List<Object> result)", "modifiers": "protected", "return": "void", "signature": "void equalsTo(Object value, List<Object> result)", "full_signature": "protected void equalsTo(Object value, List<Object> result)", "class_method_signature": "RangeIndex.equalsTo(Object value, List<Object> result)", "testcase": false, "constructor": false}, {"identifier": "higher", "parameters": "(NavigableMap<Object, Set<Object>> map,\n      Entry<Object, Set<Object>> current)", "modifiers": "protected", "return": "List<Object>", "signature": "List<Object> higher(NavigableMap<Object, Set<Object>> map,\n      Entry<Object, Set<Object>> current)", "full_signature": "protected List<Object> higher(NavigableMap<Object, Set<Object>> map,\n      Entry<Object, Set<Object>> current)", "class_method_signature": "RangeIndex.higher(NavigableMap<Object, Set<Object>> map,\n      Entry<Object, Set<Object>> current)", "testcase": false, "constructor": false}, {"identifier": "between", "parameters": "(Object lowerBound, Object upperBound)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "List<Object>", "signature": "List<Object> between(Object lowerBound, Object upperBound)", "full_signature": "@SuppressWarnings(\"unchecked\") public List<Object> between(Object lowerBound, Object upperBound)", "class_method_signature": "RangeIndex.between(Object lowerBound, Object upperBound)", "testcase": false, "constructor": false}, {"identifier": "getMap", "parameters": "()", "modifiers": "public", "return": "NavigableMap<Object, Set<Object>>", "signature": "NavigableMap<Object, Set<Object>> getMap()", "full_signature": "public NavigableMap<Object, Set<Object>> getMap()", "class_method_signature": "RangeIndex.getMap()", "testcase": false, "constructor": false}], "file": "imcache-core/src/main/java/com/cetsoft/imcache/cache/search/index/RangeIndex.java"}, "focal_method": {"identifier": "equalsTo", "parameters": "(Object value, List<Object> result)", "modifiers": "protected", "return": "void", "body": "protected void equalsTo(Object value, List<Object> result) {\n    Collection<Object> results = map.get(value);\n    if (results != null) {\n      synchronized (results) {\n        result.addAll(results);\n      }\n    }\n  }", "signature": "void equalsTo(Object value, List<Object> result)", "full_signature": "protected void equalsTo(Object value, List<Object> result)", "class_method_signature": "RangeIndex.equalsTo(Object value, List<Object> result)", "testcase": false, "constructor": false, "invocations": ["get", "addAll"]}, "repository": {"repo_id": 12849994, "url": "https://github.com/Cetsoft/imcache", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 121, "size": 1599, "license": "licensed"}}