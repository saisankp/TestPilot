{"test_class": {"identifier": "TestJMSMessageConsumer", "superclass": "extends JMSMessageConsumerTestBase", "interfaces": "", "fields": [], "file": "flume-ng-sources/flume-jms-source/src/test/java/org/apache/flume/source/jms/TestJMSMessageConsumer.java"}, "test_case": {"identifier": "testTopic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTopic() throws Exception {\n    destinationType = JMSDestinationType.TOPIC;\n    when(session.createTopic(destinationName)).thenReturn(topic);\n    consumer = create();\n    List<Event> events = consumer.take();\n    assertEquals(batchSize, events.size());\n    assertBodyIsExpected(events);\n    verify(session, never()).createQueue(anyString());\n  }", "signature": "void testTopic()", "full_signature": "@Test public void testTopic()", "class_method_signature": "TestJMSMessageConsumer.testTopic()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "createTopic", "create", "take", "assertEquals", "size", "assertBodyIsExpected", "createQueue", "verify", "never", "anyString"]}, "focal_class": {"identifier": "JMSMessageConsumer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory\n      .getLogger(JMSMessageConsumer.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory\n      .getLogger(JMSMessageConsumer.class)", "var_name": "logger"}, {"original_string": "private final int batchSize;", "modifier": "private final", "type": "int", "declarator": "batchSize", "var_name": "batchSize"}, {"original_string": "private final long pollTimeout;", "modifier": "private final", "type": "long", "declarator": "pollTimeout", "var_name": "pollTimeout"}, {"original_string": "private final JMSMessageConverter messageConverter;", "modifier": "private final", "type": "JMSMessageConverter", "declarator": "messageConverter", "var_name": "messageConverter"}, {"original_string": "private final Connection connection;", "modifier": "private final", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private final Session session;", "modifier": "private final", "type": "Session", "declarator": "session", "var_name": "session"}, {"original_string": "private final Destination destination;", "modifier": "private final", "type": "Destination", "declarator": "destination", "var_name": "destination"}, {"original_string": "private final MessageConsumer messageConsumer;", "modifier": "private final", "type": "MessageConsumer", "declarator": "messageConsumer", "var_name": "messageConsumer"}], "methods": [{"identifier": "JMSMessageConsumer", "parameters": "(InitialContext initialContext, ConnectionFactory connectionFactory,\n                     String destinationName, JMSDestinationLocator destinationLocator,\n                     JMSDestinationType destinationType, String messageSelector, int batchSize,\n                     long pollTimeout, JMSMessageConverter messageConverter,\n                     Optional<String> userName, Optional<String> password,\n                     Optional<String> clientId, boolean createDurableSubscription,\n                     String durableSubscriptionName)", "modifiers": "", "return": "", "signature": " JMSMessageConsumer(InitialContext initialContext, ConnectionFactory connectionFactory,\n                     String destinationName, JMSDestinationLocator destinationLocator,\n                     JMSDestinationType destinationType, String messageSelector, int batchSize,\n                     long pollTimeout, JMSMessageConverter messageConverter,\n                     Optional<String> userName, Optional<String> password,\n                     Optional<String> clientId, boolean createDurableSubscription,\n                     String durableSubscriptionName)", "full_signature": "  JMSMessageConsumer(InitialContext initialContext, ConnectionFactory connectionFactory,\n                     String destinationName, JMSDestinationLocator destinationLocator,\n                     JMSDestinationType destinationType, String messageSelector, int batchSize,\n                     long pollTimeout, JMSMessageConverter messageConverter,\n                     Optional<String> userName, Optional<String> password,\n                     Optional<String> clientId, boolean createDurableSubscription,\n                     String durableSubscriptionName)", "class_method_signature": "JMSMessageConsumer.JMSMessageConsumer(InitialContext initialContext, ConnectionFactory connectionFactory,\n                     String destinationName, JMSDestinationLocator destinationLocator,\n                     JMSDestinationType destinationType, String messageSelector, int batchSize,\n                     long pollTimeout, JMSMessageConverter messageConverter,\n                     Optional<String> userName, Optional<String> password,\n                     Optional<String> clientId, boolean createDurableSubscription,\n                     String durableSubscriptionName)", "testcase": false, "constructor": true}, {"identifier": "take", "parameters": "()", "modifiers": "", "return": "List<Event>", "signature": "List<Event> take()", "full_signature": " List<Event> take()", "class_method_signature": "JMSMessageConsumer.take()", "testcase": false, "constructor": false}, {"identifier": "receive", "parameters": "()", "modifiers": "private", "return": "Message", "signature": "Message receive()", "full_signature": "private Message receive()", "class_method_signature": "JMSMessageConsumer.receive()", "testcase": false, "constructor": false}, {"identifier": "receiveNoWait", "parameters": "()", "modifiers": "private", "return": "Message", "signature": "Message receiveNoWait()", "full_signature": "private Message receiveNoWait()", "class_method_signature": "JMSMessageConsumer.receiveNoWait()", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "()", "modifiers": "", "return": "void", "signature": "void commit()", "full_signature": " void commit()", "class_method_signature": "JMSMessageConsumer.commit()", "testcase": false, "constructor": false}, {"identifier": "rollback", "parameters": "()", "modifiers": "", "return": "void", "signature": "void rollback()", "full_signature": " void rollback()", "class_method_signature": "JMSMessageConsumer.rollback()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "", "return": "void", "signature": "void close()", "full_signature": " void close()", "class_method_signature": "JMSMessageConsumer.close()", "testcase": false, "constructor": false}], "file": "flume-ng-sources/flume-jms-source/src/main/java/org/apache/flume/source/jms/JMSMessageConsumer.java"}, "focal_method": {"identifier": "take", "parameters": "()", "modifiers": "", "return": "List<Event>", "body": "List<Event> take() throws JMSException {\n    List<Event> result = new ArrayList<Event>(batchSize);\n    Message message;\n    message = receive();\n    if (message != null) {\n      result.addAll(messageConverter.convert(message));\n      int max = batchSize - 1;\n      for (int i = 0; i < max; i++) {\n        message = receiveNoWait();\n        if (message == null) {\n          break;\n        }\n        result.addAll(messageConverter.convert(message));\n      }\n    }\n    if (logger.isDebugEnabled()) {\n      logger.debug(String.format(\"Took batch of %s from %s\", result.size(), destination));\n    }\n    return result;\n  }", "signature": "List<Event> take()", "full_signature": " List<Event> take()", "class_method_signature": "JMSMessageConsumer.take()", "testcase": false, "constructor": false, "invocations": ["receive", "addAll", "convert", "receiveNoWait", "addAll", "convert", "isDebugEnabled", "debug", "format", "size"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}