{"test_class": {"identifier": "HostProxyProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger( HostProxyProviderTest.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger( HostProxyProviderTest.class )", "var_name": "logger"}, {"original_string": "private static final String HMS_NODE_ID = \"hms.node.id\";", "modifier": "private static final", "type": "String", "declarator": "HMS_NODE_ID = \"hms.node.id\"", "var_name": "HMS_NODE_ID"}, {"original_string": "private static final String HMS_IB_IP_ADDRESS = \"hms.ib.ip.address\";", "modifier": "private static final", "type": "String", "declarator": "HMS_IB_IP_ADDRESS = \"hms.ib.ip.address\"", "var_name": "HMS_IB_IP_ADDRESS"}, {"original_string": "private static final String HMS_IB_USERNAME = \"hms.ib.username\";", "modifier": "private static final", "type": "String", "declarator": "HMS_IB_USERNAME = \"hms.ib.username\"", "var_name": "HMS_IB_USERNAME"}, {"original_string": "private static final String HMS_IB_PASSWORD = \"hms.ib.password\";", "modifier": "private static final", "type": "String", "declarator": "HMS_IB_PASSWORD = \"hms.ib.password\"", "var_name": "HMS_IB_PASSWORD"}, {"original_string": "private static final String HMS_CHANGED_IB_IP_ADDRESS = \"hms.ib.changed.ip.address\";", "modifier": "private static final", "type": "String", "declarator": "HMS_CHANGED_IB_IP_ADDRESS = \"hms.ib.changed.ip.address\"", "var_name": "HMS_CHANGED_IB_IP_ADDRESS"}, {"original_string": "private static final String HMS_CHANGED_IB_USERNAME = \"hms.ib.changed.os.username\";", "modifier": "private static final", "type": "String", "declarator": "HMS_CHANGED_IB_USERNAME = \"hms.ib.changed.os.username\"", "var_name": "HMS_CHANGED_IB_USERNAME"}, {"original_string": "private static final String HMS_CHANGED_IB_PASSWORD = \"hms.ib.changed.os.password\";", "modifier": "private static final", "type": "String", "declarator": "HMS_CHANGED_IB_PASSWORD = \"hms.ib.changed.os.password\"", "var_name": "HMS_CHANGED_IB_PASSWORD"}, {"original_string": "private static final String HMS_DUMMY_IB_IP_ADDRESS = \"hms.ib.dummy.ip.address\";", "modifier": "private static final", "type": "String", "declarator": "HMS_DUMMY_IB_IP_ADDRESS = \"hms.ib.dummy.ip.address\"", "var_name": "HMS_DUMMY_IB_IP_ADDRESS"}, {"original_string": "private static Properties properties;", "modifier": "private static", "type": "Properties", "declarator": "properties", "var_name": "properties"}], "file": "modules/hms-inband/src/test/java/com/vmware/vrack/hms/common/util/HostProxyProviderTest.java"}, "test_case": {"identifier": "getHostProxyTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getHostProxyTest()\n        throws HmsException\n    {\n        ServiceServerNode node = new ServiceServerNode();\n        node.setNodeID( properties.getProperty( HMS_NODE_ID ) );\n        node.setIbIpAddress( properties.getProperty( HMS_IB_IP_ADDRESS ) );\n        node.setOsUserName( properties.getProperty( HMS_IB_USERNAME ) );\n        node.setOsPassword( properties.getProperty( HMS_IB_PASSWORD ) );\n\n        HostProxy hostProxy = HostProxyProvider.getInstance().getHostProxy( node );\n\n        assertTrue( hostProxy.getHostSystem() != null );\n        assertTrue( hostProxy.getHostSystem().getHardware() != null );\n        assertTrue( hostProxy.getHostSystem().getHardware().getCpuPkg().length > 0 );\n\n    }", "signature": "void getHostProxyTest()", "full_signature": "@Test public void getHostProxyTest()", "class_method_signature": "HostProxyProviderTest.getHostProxyTest()", "testcase": true, "constructor": false, "invocations": ["setNodeID", "getProperty", "setIbIpAddress", "getProperty", "setOsUserName", "getProperty", "setOsPassword", "getProperty", "getHostProxy", "getInstance", "assertTrue", "getHostSystem", "assertTrue", "getHardware", "getHostSystem", "assertTrue", "getCpuPkg", "getHardware", "getHostSystem"]}, "focal_class": {"identifier": "HostProxyProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger( HostProxyProvider.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger( HostProxyProvider.class )", "var_name": "logger"}, {"original_string": "private Map<HostIdentifier, HostProxy> hostProxyMap = new ConcurrentHashMap<HostIdentifier, HostProxy>();", "modifier": "private", "type": "Map<HostIdentifier, HostProxy>", "declarator": "hostProxyMap = new ConcurrentHashMap<HostIdentifier, HostProxy>()", "var_name": "hostProxyMap"}, {"original_string": "private static HostProxyProvider hostProxyProvider = null;", "modifier": "private static", "type": "HostProxyProvider", "declarator": "hostProxyProvider = null", "var_name": "hostProxyProvider"}, {"original_string": "private Map<String, Object> locksMap = new ConcurrentHashMap<String, Object>();", "modifier": "private", "type": "Map<String, Object>", "declarator": "locksMap = new ConcurrentHashMap<String, Object>()", "var_name": "locksMap"}], "methods": [{"identifier": "HostProxyProvider", "parameters": "()", "modifiers": "private", "return": "", "signature": " HostProxyProvider()", "full_signature": "private  HostProxyProvider()", "class_method_signature": "HostProxyProvider.HostProxyProvider()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "HostProxyProvider", "signature": "HostProxyProvider getInstance()", "full_signature": "public static HostProxyProvider getInstance()", "class_method_signature": "HostProxyProvider.getInstance()", "testcase": false, "constructor": false}, {"identifier": "getHostProxy", "parameters": "( ServiceServerNode node )", "modifiers": "public", "return": "HostProxy", "signature": "HostProxy getHostProxy( ServiceServerNode node )", "full_signature": "public HostProxy getHostProxy( ServiceServerNode node )", "class_method_signature": "HostProxyProvider.getHostProxy( ServiceServerNode node )", "testcase": false, "constructor": false}, {"identifier": "removeStaleProxy", "parameters": "( HostIdentifier hostIdentifier )", "modifiers": "private", "return": "void", "signature": "void removeStaleProxy( HostIdentifier hostIdentifier )", "full_signature": "private void removeStaleProxy( HostIdentifier hostIdentifier )", "class_method_signature": "HostProxyProvider.removeStaleProxy( HostIdentifier hostIdentifier )", "testcase": false, "constructor": false}, {"identifier": "removeHostProxy", "parameters": "( HostIdentifier id )", "modifiers": "public", "return": "void", "signature": "void removeHostProxy( HostIdentifier id )", "full_signature": "public void removeHostProxy( HostIdentifier id )", "class_method_signature": "HostProxyProvider.removeHostProxy( HostIdentifier id )", "testcase": false, "constructor": false}, {"identifier": "removeAllHostProxies", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void removeAllHostProxies()", "full_signature": "public void removeAllHostProxies()", "class_method_signature": "HostProxyProvider.removeAllHostProxies()", "testcase": false, "constructor": false}, {"identifier": "isHostProxyValid", "parameters": "( HostProxy hostProxy )", "modifiers": "public static", "return": "boolean", "signature": "boolean isHostProxyValid( HostProxy hostProxy )", "full_signature": "public static boolean isHostProxyValid( HostProxy hostProxy )", "class_method_signature": "HostProxyProvider.isHostProxyValid( HostProxy hostProxy )", "testcase": false, "constructor": false}, {"identifier": "createHostProxy", "parameters": "( ServiceServerNode node )", "modifiers": "private", "return": "HostProxy", "signature": "HostProxy createHostProxy( ServiceServerNode node )", "full_signature": "private HostProxy createHostProxy( ServiceServerNode node )", "class_method_signature": "HostProxyProvider.createHostProxy( ServiceServerNode node )", "testcase": false, "constructor": false}, {"identifier": "setHostProxyforNode", "parameters": "( ServiceServerNode node, HostProxy hostProxy )", "modifiers": "public", "return": "boolean", "signature": "boolean setHostProxyforNode( ServiceServerNode node, HostProxy hostProxy )", "full_signature": "public boolean setHostProxyforNode( ServiceServerNode node, HostProxy hostProxy )", "class_method_signature": "HostProxyProvider.setHostProxyforNode( ServiceServerNode node, HostProxy hostProxy )", "testcase": false, "constructor": false}], "file": "modules/hms-inband/src/main/java/com/vmware/vrack/hms/common/util/HostProxyProvider.java"}, "focal_method": {"identifier": "getHostProxy", "parameters": "( ServiceServerNode node )", "modifiers": "public", "return": "HostProxy", "body": "public HostProxy getHostProxy( ServiceServerNode node )\n        throws HmsException\n    {\n        if ( node != null )\n        {\n            HostIdentifier hostIdentifier = new HostIdentifier( node.getNodeID(), node.getIbIpAddress(),\n                                                                node.getOsUserName(), node.getOsPassword() );\n\n            synchronized ( this )\n            {\n                // If HostProxy is NOT available, then create Object for that node, so that later in this method, it can\n                // be used as Lock.\n                if ( !hostProxyMap.containsKey( hostIdentifier ) )\n                {\n                    if ( !locksMap.containsKey( node.getNodeID() ) )\n                    {\n                        locksMap.put( node.getNodeID(), new Object() );\n                    }\n                }\n            }\n\n            // Host proxy is NOT there or NOT valid.\n            // Try to create HostProxy in Synchronous way, but will be synchronized only for same node.\n            // If call comes for another Host, it creating HostProxy for that should NOT get blocked.\n            Object lockObj = locksMap.get( node.getNodeID() );\n\n            synchronized ( lockObj )\n            {\n                if ( hostProxyMap.containsKey( hostIdentifier ) )\n                {\n                    HostProxy cachedHostProxy = hostProxyMap.get( hostIdentifier );\n\n                    if ( isHostProxyValid( cachedHostProxy ) )\n                    {\n                        return cachedHostProxy;\n                    }\n                }\n                else\n                {\n                    removeStaleProxy( hostIdentifier );\n                }\n\n                HostProxy hostProxy = createHostProxy( node );\n                hostProxyMap.put( hostIdentifier, hostProxy );\n                return hostProxy;\n            }\n        }\n        else\n        {\n            String err = \"Cannot get HostProxy for Null Node: \" + node;\n            logger.error( err );\n            throw new HmsException( err );\n        }\n    }", "signature": "HostProxy getHostProxy( ServiceServerNode node )", "full_signature": "public HostProxy getHostProxy( ServiceServerNode node )", "class_method_signature": "HostProxyProvider.getHostProxy( ServiceServerNode node )", "testcase": false, "constructor": false, "invocations": ["getNodeID", "getIbIpAddress", "getOsUserName", "getOsPassword", "containsKey", "containsKey", "getNodeID", "put", "getNodeID", "get", "getNodeID", "containsKey", "get", "isHostProxyValid", "removeStaleProxy", "createHostProxy", "put", "error"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}