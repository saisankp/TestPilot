{"test_class": {"identifier": "MDLV3000WriterTest", "superclass": "", "interfaces": "", "fields": [], "file": "storage/ctab/src/test/java/org/openscience/cdk/io/MDLV3000WriterTest.java"}, "test_case": {"identifier": "writeDimensionField3D", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void writeDimensionField3D() throws Exception {\n        IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();\n        IAtomContainer mol = builder.newAtomContainer();\n        IAtom atom = builder.newAtom();\n        atom.setSymbol(\"C\");\n        atom.setImplicitHydrogenCount(4);\n        atom.setPoint3d(new Point3d(0.5, 0.5, 0.1));\n        mol.addAtom(atom);\n        StringWriter sw = new StringWriter();\n        try (MDLV3000Writer mdlw = new MDLV3000Writer(sw)) {\n            mdlw.write(mol);\n        }\n        assertThat(sw.toString(), containsString(\"3D\"));\n    }", "signature": "void writeDimensionField3D()", "full_signature": "@Test public void writeDimensionField3D()", "class_method_signature": "MDLV3000WriterTest.writeDimensionField3D()", "testcase": true, "constructor": false, "invocations": ["getInstance", "newAtomContainer", "newAtom", "setSymbol", "setImplicitHydrogenCount", "setPoint3d", "addAtom", "write", "assertThat", "toString", "containsString"]}, "focal_class": {"identifier": "MDLV3000Writer", "superclass": "extends DefaultChemObjectWriter", "interfaces": "", "fields": [{"original_string": "private static final Pattern         R_GRP_NUM = Pattern.compile(\"R(\\\\d+)\");", "modifier": "private static final", "type": "Pattern", "declarator": "R_GRP_NUM = Pattern.compile(\"R(\\\\d+)\")", "var_name": "R_GRP_NUM"}, {"original_string": "private              V30LineWriter   writer;", "modifier": "private", "type": "V30LineWriter", "declarator": "writer", "var_name": "writer"}, {"original_string": "private              StringIOSetting programNameOpt;", "modifier": "private", "type": "StringIOSetting", "declarator": "programNameOpt", "var_name": "programNameOpt"}], "methods": [{"identifier": "MDLV3000Writer", "parameters": "(Writer writer)", "modifiers": "public", "return": "", "signature": " MDLV3000Writer(Writer writer)", "full_signature": "public  MDLV3000Writer(Writer writer)", "class_method_signature": "MDLV3000Writer.MDLV3000Writer(Writer writer)", "testcase": false, "constructor": true}, {"identifier": "MDLV3000Writer", "parameters": "(OutputStream out)", "modifiers": "public", "return": "", "signature": " MDLV3000Writer(OutputStream out)", "full_signature": "public  MDLV3000Writer(OutputStream out)", "class_method_signature": "MDLV3000Writer.MDLV3000Writer(OutputStream out)", "testcase": false, "constructor": true}, {"identifier": "MDLV3000Writer", "parameters": "()", "modifiers": "public", "return": "", "signature": " MDLV3000Writer()", "full_signature": "public  MDLV3000Writer()", "class_method_signature": "MDLV3000Writer.MDLV3000Writer()", "testcase": false, "constructor": true}, {"identifier": "nullAsZero", "parameters": "(Integer x)", "modifiers": "private static", "return": "int", "signature": "int nullAsZero(Integer x)", "full_signature": "private static int nullAsZero(Integer x)", "class_method_signature": "MDLV3000Writer.nullAsZero(Integer x)", "testcase": false, "constructor": false}, {"identifier": "findIdx", "parameters": "(Map<T, Integer> idxs, T obj)", "modifiers": "private static", "return": "Integer", "signature": "Integer findIdx(Map<T, Integer> idxs, T obj)", "full_signature": "private static Integer findIdx(Map<T, Integer> idxs, T obj)", "class_method_signature": "MDLV3000Writer.findIdx(Map<T, Integer> idxs, T obj)", "testcase": false, "constructor": false}, {"identifier": "getProgName", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getProgName()", "full_signature": "private String getProgName()", "class_method_signature": "MDLV3000Writer.getProgName()", "testcase": false, "constructor": false}, {"identifier": "writeHeader", "parameters": "(IAtomContainer mol)", "modifiers": "private", "return": "void", "signature": "void writeHeader(IAtomContainer mol)", "full_signature": "private void writeHeader(IAtomContainer mol)", "class_method_signature": "MDLV3000Writer.writeHeader(IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "getLocalParity", "parameters": "(Map<IChemObject, Integer> idxs, ITetrahedralChirality stereo)", "modifiers": "private static", "return": "Stereo", "signature": "Stereo getLocalParity(Map<IChemObject, Integer> idxs, ITetrahedralChirality stereo)", "full_signature": "private static Stereo getLocalParity(Map<IChemObject, Integer> idxs, ITetrahedralChirality stereo)", "class_method_signature": "MDLV3000Writer.getLocalParity(Map<IChemObject, Integer> idxs, ITetrahedralChirality stereo)", "testcase": false, "constructor": false}, {"identifier": "writeAtomBlock", "parameters": "(IAtomContainer mol, IAtom[] atoms, Map<IChemObject, Integer> idxs,\n                                Map<IAtom, ITetrahedralChirality> atomToStereo)", "modifiers": "private", "return": "void", "signature": "void writeAtomBlock(IAtomContainer mol, IAtom[] atoms, Map<IChemObject, Integer> idxs,\n                                Map<IAtom, ITetrahedralChirality> atomToStereo)", "full_signature": "private void writeAtomBlock(IAtomContainer mol, IAtom[] atoms, Map<IChemObject, Integer> idxs,\n                                Map<IAtom, ITetrahedralChirality> atomToStereo)", "class_method_signature": "MDLV3000Writer.writeAtomBlock(IAtomContainer mol, IAtom[] atoms, Map<IChemObject, Integer> idxs,\n                                Map<IAtom, ITetrahedralChirality> atomToStereo)", "testcase": false, "constructor": false}, {"identifier": "getSymbol", "parameters": "(IAtom atom, int elem)", "modifiers": "private", "return": "String", "signature": "String getSymbol(IAtom atom, int elem)", "full_signature": "private String getSymbol(IAtom atom, int elem)", "class_method_signature": "MDLV3000Writer.getSymbol(IAtom atom, int elem)", "testcase": false, "constructor": false}, {"identifier": "writeBondBlock", "parameters": "(IAtomContainer mol,\n                                Map<IChemObject, Integer> idxs)", "modifiers": "private", "return": "void", "signature": "void writeBondBlock(IAtomContainer mol,\n                                Map<IChemObject, Integer> idxs)", "full_signature": "private void writeBondBlock(IAtomContainer mol,\n                                Map<IChemObject, Integer> idxs)", "class_method_signature": "MDLV3000Writer.writeBondBlock(IAtomContainer mol,\n                                Map<IChemObject, Integer> idxs)", "testcase": false, "constructor": false}, {"identifier": "pushHydrogensToBack", "parameters": "(IAtomContainer mol, Map<IChemObject, Integer> atomToIdx)", "modifiers": "private", "return": "IAtom[]", "signature": "IAtom[] pushHydrogensToBack(IAtomContainer mol, Map<IChemObject, Integer> atomToIdx)", "full_signature": "private IAtom[] pushHydrogensToBack(IAtomContainer mol, Map<IChemObject, Integer> atomToIdx)", "class_method_signature": "MDLV3000Writer.pushHydrogensToBack(IAtomContainer mol, Map<IChemObject, Integer> atomToIdx)", "testcase": false, "constructor": false}, {"identifier": "getSgroups", "parameters": "(IAtomContainer mol)", "modifiers": "private", "return": "List<Sgroup>", "signature": "List<Sgroup> getSgroups(IAtomContainer mol)", "full_signature": "private List<Sgroup> getSgroups(IAtomContainer mol)", "class_method_signature": "MDLV3000Writer.getSgroups(IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfDimensions", "parameters": "(IAtomContainer mol)", "modifiers": "private", "return": "int", "signature": "int getNumberOfDimensions(IAtomContainer mol)", "full_signature": "private int getNumberOfDimensions(IAtomContainer mol)", "class_method_signature": "MDLV3000Writer.getNumberOfDimensions(IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "writeSgroupBlock", "parameters": "(List<Sgroup> sgroups, Map<IChemObject, Integer> idxs)", "modifiers": "private", "return": "void", "signature": "void writeSgroupBlock(List<Sgroup> sgroups, Map<IChemObject, Integer> idxs)", "full_signature": "private void writeSgroupBlock(List<Sgroup> sgroups, Map<IChemObject, Integer> idxs)", "class_method_signature": "MDLV3000Writer.writeSgroupBlock(List<Sgroup> sgroups, Map<IChemObject, Integer> idxs)", "testcase": false, "constructor": false}, {"identifier": "writeMol", "parameters": "(IAtomContainer mol)", "modifiers": "private", "return": "void", "signature": "void writeMol(IAtomContainer mol)", "full_signature": "private void writeMol(IAtomContainer mol)", "class_method_signature": "MDLV3000Writer.writeMol(IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(IChemObject object)", "modifiers": "@Override public", "return": "void", "signature": "void write(IChemObject object)", "full_signature": "@Override public void write(IChemObject object)", "class_method_signature": "MDLV3000Writer.write(IChemObject object)", "testcase": false, "constructor": false}, {"identifier": "setWriter", "parameters": "(Writer writer)", "modifiers": "@Override public", "return": "void", "signature": "void setWriter(Writer writer)", "full_signature": "@Override public void setWriter(Writer writer)", "class_method_signature": "MDLV3000Writer.setWriter(Writer writer)", "testcase": false, "constructor": false}, {"identifier": "setWriter", "parameters": "(OutputStream writer)", "modifiers": "@Override public", "return": "void", "signature": "void setWriter(OutputStream writer)", "full_signature": "@Override public void setWriter(OutputStream writer)", "class_method_signature": "MDLV3000Writer.setWriter(OutputStream writer)", "testcase": false, "constructor": false}, {"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "IResourceFormat", "signature": "IResourceFormat getFormat()", "full_signature": "@Override public IResourceFormat getFormat()", "class_method_signature": "MDLV3000Writer.getFormat()", "testcase": false, "constructor": false}, {"identifier": "accepts", "parameters": "(Class<? extends IChemObject> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accepts(Class<? extends IChemObject> c)", "full_signature": "@Override public boolean accepts(Class<? extends IChemObject> c)", "class_method_signature": "MDLV3000Writer.accepts(Class<? extends IChemObject> c)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "MDLV3000Writer.close()", "testcase": false, "constructor": false}, {"identifier": "initIOSettings", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initIOSettings()", "full_signature": "private void initIOSettings()", "class_method_signature": "MDLV3000Writer.initIOSettings()", "testcase": false, "constructor": false}, {"identifier": "customizeJob", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void customizeJob()", "full_signature": "public void customizeJob()", "class_method_signature": "MDLV3000Writer.customizeJob()", "testcase": false, "constructor": false}], "file": "storage/ctab/src/main/java/org/openscience/cdk/io/MDLV3000Writer.java"}, "focal_method": {"identifier": "write", "parameters": "(IChemObject object)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void write(IChemObject object) throws CDKException {\n        try {\n            if (IAtomContainer.class.isInstance(object))\n                writeMol((IAtomContainer) object);\n            else\n                throw new CDKException(\"Unsupported ChemObject \" + object.getClass());\n        } catch (IOException ex) {\n            throw new CDKException(\"Could not write V3000 format\", ex);\n        }\n    }", "signature": "void write(IChemObject object)", "full_signature": "@Override public void write(IChemObject object)", "class_method_signature": "MDLV3000Writer.write(IChemObject object)", "testcase": false, "constructor": false, "invocations": ["isInstance", "writeMol", "getClass"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}