{"test_class": {"identifier": "CSVRowTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CSVRow<TestCSVColumn> FULL_ROW = CSVRowBuilder.create(TestCSVColumn.class)\n            .withValue(TestCSVColumn.INTEGER, 1)\n            .withValue(TestCSVColumn.DOUBLE, 2d)\n            .withValue(TestCSVColumn.BIG_DECIMAL, 3d)\n            .withValue(TestCSVColumn.BOOLEAN, \"True\")\n            .withValue(TestCSVColumn.ENUM, \"EXAMPLE\")\n            .build();", "modifier": "private final", "type": "CSVRow<TestCSVColumn>", "declarator": "FULL_ROW = CSVRowBuilder.create(TestCSVColumn.class)\n            .withValue(TestCSVColumn.INTEGER, 1)\n            .withValue(TestCSVColumn.DOUBLE, 2d)\n            .withValue(TestCSVColumn.BIG_DECIMAL, 3d)\n            .withValue(TestCSVColumn.BOOLEAN, \"True\")\n            .withValue(TestCSVColumn.ENUM, \"EXAMPLE\")\n            .build()", "var_name": "FULL_ROW"}, {"original_string": "private final CSVRow<TestCSVColumn> EMPTY_ROW = CSVRowBuilder.create(TestCSVColumn.class)\n            .withValue(TestCSVColumn.INTEGER, \"\")\n            .withValue(TestCSVColumn.DOUBLE, \"\")\n            .withValue(TestCSVColumn.BIG_DECIMAL, \"\")\n            .withValue(TestCSVColumn.BOOLEAN, \"\")\n            .withValue(TestCSVColumn.ENUM, \"\")\n            .build();", "modifier": "private final", "type": "CSVRow<TestCSVColumn>", "declarator": "EMPTY_ROW = CSVRowBuilder.create(TestCSVColumn.class)\n            .withValue(TestCSVColumn.INTEGER, \"\")\n            .withValue(TestCSVColumn.DOUBLE, \"\")\n            .withValue(TestCSVColumn.BIG_DECIMAL, \"\")\n            .withValue(TestCSVColumn.BOOLEAN, \"\")\n            .withValue(TestCSVColumn.ENUM, \"\")\n            .build()", "var_name": "EMPTY_ROW"}, {"original_string": "private final CSVRow<TestCSVColumn> INCORRECT_ROW = CSVRowBuilder.create(TestCSVColumn.class)\n            .withValue(TestCSVColumn.INTEGER, 1d)\n            .withValue(TestCSVColumn.DOUBLE, \"NULL\")\n            .withValue(TestCSVColumn.BIG_DECIMAL, \"NULL\")\n            .withValue(TestCSVColumn.BOOLEAN, \"NULL\")\n            .withValue(TestCSVColumn.ENUM, \"NOTAVALUE\")\n            .withValue(TestCSVColumn.MISSING, \"\")\n            .build();", "modifier": "private final", "type": "CSVRow<TestCSVColumn>", "declarator": "INCORRECT_ROW = CSVRowBuilder.create(TestCSVColumn.class)\n            .withValue(TestCSVColumn.INTEGER, 1d)\n            .withValue(TestCSVColumn.DOUBLE, \"NULL\")\n            .withValue(TestCSVColumn.BIG_DECIMAL, \"NULL\")\n            .withValue(TestCSVColumn.BOOLEAN, \"NULL\")\n            .withValue(TestCSVColumn.ENUM, \"NOTAVALUE\")\n            .withValue(TestCSVColumn.MISSING, \"\")\n            .build()", "var_name": "INCORRECT_ROW"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/tableio/csv/CSVRowTest.java"}, "test_case": {"identifier": "testParseNotNullableNullColumn", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testParseNotNullableNullColumn() {\n        Assertions.assertThrows(\n                IllegalStateException.class,\n                () -> INCORRECT_ROW.parse(TestCSVColumn.MISSING),\n                \"Setting Not-Nullable column MISSING to null did not cause an exception\");\n    }", "signature": "void testParseNotNullableNullColumn()", "full_signature": "@Test void testParseNotNullableNullColumn()", "class_method_signature": "CSVRowTest.testParseNotNullableNullColumn()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "parse"]}, "focal_class": {"identifier": "CSVRow", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EMPTY_STRING = \"\";", "modifier": "private static final", "type": "String", "declarator": "EMPTY_STRING = \"\"", "var_name": "EMPTY_STRING"}, {"original_string": "public final ImmutableMap<String, String> lineByHeader;", "modifier": "public final", "type": "ImmutableMap<String, String>", "declarator": "lineByHeader", "var_name": "lineByHeader"}], "methods": [{"identifier": "CSVRow", "parameters": "(ImmutableMap<String, String> lineByHeader)", "modifiers": "public", "return": "", "signature": " CSVRow(ImmutableMap<String, String> lineByHeader)", "full_signature": "public  CSVRow(ImmutableMap<String, String> lineByHeader)", "class_method_signature": "CSVRow.CSVRow(ImmutableMap<String, String> lineByHeader)", "testcase": false, "constructor": true}, {"identifier": "hasEntry", "parameters": "(T csvColumn)", "modifiers": "public", "return": "boolean", "signature": "boolean hasEntry(T csvColumn)", "full_signature": "public boolean hasEntry(T csvColumn)", "class_method_signature": "CSVRow.hasEntry(T csvColumn)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(T csvColumn)", "modifiers": "public", "return": "String", "signature": "String parse(T csvColumn)", "full_signature": "public String parse(T csvColumn)", "class_method_signature": "CSVRow.parse(T csvColumn)", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "(T csvColumn)", "modifiers": "public", "return": "Integer", "signature": "Integer parseInt(T csvColumn)", "full_signature": "public Integer parseInt(T csvColumn)", "class_method_signature": "CSVRow.parseInt(T csvColumn)", "testcase": false, "constructor": false}, {"identifier": "parseDouble", "parameters": "(T csvColumn)", "modifiers": "public", "return": "Double", "signature": "Double parseDouble(T csvColumn)", "full_signature": "public Double parseDouble(T csvColumn)", "class_method_signature": "CSVRow.parseDouble(T csvColumn)", "testcase": false, "constructor": false}, {"identifier": "parseBigDecimal", "parameters": "(T csvColumn)", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal parseBigDecimal(T csvColumn)", "full_signature": "public BigDecimal parseBigDecimal(T csvColumn)", "class_method_signature": "CSVRow.parseBigDecimal(T csvColumn)", "testcase": false, "constructor": false}, {"identifier": "parseBoolean", "parameters": "(T csvColumn)", "modifiers": "@Nullable public", "return": "Boolean", "signature": "Boolean parseBoolean(T csvColumn)", "full_signature": "@Nullable public Boolean parseBoolean(T csvColumn)", "class_method_signature": "CSVRow.parseBoolean(T csvColumn)", "testcase": false, "constructor": false}, {"identifier": "parseEnum", "parameters": "(T csvColumn, Class<E> enumClass)", "modifiers": "public", "return": "E", "signature": "E parseEnum(T csvColumn, Class<E> enumClass)", "full_signature": "public E parseEnum(T csvColumn, Class<E> enumClass)", "class_method_signature": "CSVRow.parseEnum(T csvColumn, Class<E> enumClass)", "testcase": false, "constructor": false}, {"identifier": "hasNullValue", "parameters": "(String value)", "modifiers": "private", "return": "boolean", "signature": "boolean hasNullValue(String value)", "full_signature": "private boolean hasNullValue(String value)", "class_method_signature": "CSVRow.hasNullValue(String value)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/tableio/csv/CSVRow.java"}, "focal_method": {"identifier": "parse", "parameters": "(T csvColumn)", "modifiers": "public", "return": "String", "body": "public String parse(T csvColumn) {\n        String header = csvColumn.name();\n        String value = lineByHeader.get(header);\n\n        if (!csvColumn.allowMissingColumn()) {\n            Preconditions.checkNotNull(value, \"Missing column \" + header);\n        }\n\n        if (!csvColumn.isNullable()) {\n            Preconditions.checkState(\n                    !value.equals(\"\"),\n                    header + \" should not be null\");\n        }\n\n        return value;\n    }", "signature": "String parse(T csvColumn)", "full_signature": "public String parse(T csvColumn)", "class_method_signature": "CSVRow.parse(T csvColumn)", "testcase": false, "constructor": false, "invocations": ["name", "get", "allowMissingColumn", "checkNotNull", "isNullable", "checkState", "equals"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}