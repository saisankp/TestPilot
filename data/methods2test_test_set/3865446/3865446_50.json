{"test_class": {"identifier": "EuclideanDistanceFunctionTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "protected EuclideanDistanceFunction function;", "modifier": "protected", "type": "EuclideanDistanceFunction", "declarator": "function", "var_name": "function"}], "file": "jcool/benchmark/src/test/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/functions/distance/EuclideanDistanceFunctionTest.java"}, "test_case": {"identifier": "testDistance", "parameters": "()", "modifiers": "@Test // test for correct distance measure and symmetric of relationship. public", "return": "void", "body": "@Test\n    // test for correct distance measure and symmetric of relationship.\n    public void testDistance() throws Exception {\n        Representation repr1 = new SimplePhenotypeRepresentation();\n        repr1.setDoubleValue(new double[]{1.0, 2.3, 5.6, 1000.4});\n        Individual ind1 = new SimpleIndividual(0, 0.0, repr1);\n        Representation repr2 = new SimplePhenotypeRepresentation();\n        repr2.setDoubleValue(new double[]{13.6, 10004.5, -11.5, -666.7});\n        Individual ind2 = new SimpleIndividual(0, 0.0, repr2);\n        double distance1 = this.function.distance(ind1, ind2);\n        assertEquals(10140.2011, distance1, 0.0001);\n        double distance2 = this.function.distance(ind2, ind1);\n        assertEquals(10140.2011, distance2, 0.0001);\n        distance1 = this.function.distance(ind1, ind1);\n        assertTrue(distance1 == 0.0);\n    }", "signature": "void testDistance()", "full_signature": "@Test // test for correct distance measure and symmetric of relationship. public void testDistance()", "class_method_signature": "EuclideanDistanceFunctionTest.testDistance()", "testcase": true, "constructor": false, "invocations": ["setDoubleValue", "setDoubleValue", "distance", "assertEquals", "distance", "assertEquals", "distance", "assertTrue"]}, "focal_class": {"identifier": "EuclideanDistanceFunction", "superclass": "", "interfaces": "implements DistanceFunction", "fields": [], "methods": [{"identifier": "distance", "parameters": "(Individual firstIndividual, Individual secondIndividual)", "modifiers": "public", "return": "double", "signature": "double distance(Individual firstIndividual, Individual secondIndividual)", "full_signature": "public double distance(Individual firstIndividual, Individual secondIndividual)", "class_method_signature": "EuclideanDistanceFunction.distance(Individual firstIndividual, Individual secondIndividual)", "testcase": false, "constructor": false}, {"identifier": "getAcceptableType", "parameters": "()", "modifiers": "public", "return": "Class<? extends Representation>", "signature": "Class<? extends Representation> getAcceptableType()", "full_signature": "public Class<? extends Representation> getAcceptableType()", "class_method_signature": "EuclideanDistanceFunction.getAcceptableType()", "testcase": false, "constructor": false}], "file": "jcool/benchmark/src/main/java/cz/cvut/felk/cig/jcool/benchmark/method/evolutionary/functions/distance/EuclideanDistanceFunction.java"}, "focal_method": {"identifier": "distance", "parameters": "(Individual firstIndividual, Individual secondIndividual)", "modifiers": "public", "return": "double", "body": "public double distance(Individual firstIndividual, Individual secondIndividual) {\n        double[] first = firstIndividual.getRepresentation().getDoubleValue();\n        double[] second = secondIndividual.getRepresentation().getDoubleValue();\n        double distance = 0.0;\n        double ba;\n        for (int i = 0; i < first.length; i++){\n            ba = second[i] - first[i];\n            distance += ba * ba;\n        }\n        return Math.sqrt(distance);\n    }", "signature": "double distance(Individual firstIndividual, Individual secondIndividual)", "full_signature": "public double distance(Individual firstIndividual, Individual secondIndividual)", "class_method_signature": "EuclideanDistanceFunction.distance(Individual firstIndividual, Individual secondIndividual)", "testcase": false, "constructor": false, "invocations": ["getDoubleValue", "getRepresentation", "getDoubleValue", "getRepresentation", "sqrt"]}, "repository": {"repo_id": 3865446, "url": "https://github.com/dhonza/JCOOL", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 415, "license": "licensed"}}