{"test_class": {"identifier": "CapabilitiesFilterSplitterTest", "superclass": "extends AbstractCapabilitiesFilterSplitterTests", "interfaces": "", "fields": [{"original_string": "private Capabilities simpleLogicalCaps = new Capabilities();", "modifier": "private", "type": "Capabilities", "declarator": "simpleLogicalCaps = new Capabilities()", "var_name": "simpleLogicalCaps"}, {"original_string": "private CapabilitiesFilterSplitter visitor;", "modifier": "private", "type": "CapabilitiesFilterSplitter", "declarator": "visitor", "var_name": "visitor"}], "file": "modules/library/main/src/test/java/org/geotools/filter/visitor/CapabilitiesFilterSplitterTest.java"}, "test_case": {"identifier": "testVisitNullFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVisitNullFilter() throws Exception {\n        Filter filter = ff.isNull(ff.property(nameAtt));\n        runTest(filter, newCapabilities(PropertyIsNull.class), nameAtt);\n    }", "signature": "void testVisitNullFilter()", "full_signature": "@Test public void testVisitNullFilter()", "class_method_signature": "CapabilitiesFilterSplitterTest.testVisitNullFilter()", "testcase": true, "constructor": false, "invocations": ["isNull", "property", "runTest", "newCapabilities"]}, "focal_class": {"identifier": "CapabilitiesFilterSplitter", "superclass": "", "interfaces": "implements FilterVisitor, ExpressionVisitor", "fields": [{"original_string": "private static final Logger LOGGER = org.geotools.util.logging.Logging\n            .getLogger(\"org.geotools.filter\");", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging\n            .getLogger(\"org.geotools.filter\")", "var_name": "LOGGER"}, {"original_string": "private Stack postStack = new Stack();", "modifier": "private", "type": "Stack", "declarator": "postStack = new Stack()", "var_name": "postStack"}, {"original_string": "private Stack preStack = new Stack();", "modifier": "private", "type": "Stack", "declarator": "preStack = new Stack()", "var_name": "preStack"}, {"original_string": "private Set changedStack = new HashSet();", "modifier": "private", "type": "Set", "declarator": "changedStack = new HashSet()", "var_name": "changedStack"}, {"original_string": "private Capabilities fcs = null;", "modifier": "private", "type": "Capabilities", "declarator": "fcs = null", "var_name": "fcs"}, {"original_string": "private FeatureType parent = null;", "modifier": "private", "type": "FeatureType", "declarator": "parent = null", "var_name": "parent"}, {"original_string": "private Filter original = null;", "modifier": "private", "type": "Filter", "declarator": "original = null", "var_name": "original"}, {"original_string": "private ClientTransactionAccessor transactionAccessor;", "modifier": "private", "type": "ClientTransactionAccessor", "declarator": "transactionAccessor", "var_name": "transactionAccessor"}, {"original_string": "private FilterFactory ff;", "modifier": "private", "type": "FilterFactory", "declarator": "ff", "var_name": "ff"}], "methods": [{"identifier": "CapabilitiesFilterSplitter", "parameters": "(Capabilities fcs, FeatureType parent,\n            ClientTransactionAccessor transactionAccessor)", "modifiers": "public", "return": "", "signature": " CapabilitiesFilterSplitter(Capabilities fcs, FeatureType parent,\n            ClientTransactionAccessor transactionAccessor)", "full_signature": "public  CapabilitiesFilterSplitter(Capabilities fcs, FeatureType parent,\n            ClientTransactionAccessor transactionAccessor)", "class_method_signature": "CapabilitiesFilterSplitter.CapabilitiesFilterSplitter(Capabilities fcs, FeatureType parent,\n            ClientTransactionAccessor transactionAccessor)", "testcase": false, "constructor": true}, {"identifier": "getFilterPost", "parameters": "()", "modifiers": "public", "return": "Filter", "signature": "Filter getFilterPost()", "full_signature": "public Filter getFilterPost()", "class_method_signature": "CapabilitiesFilterSplitter.getFilterPost()", "testcase": false, "constructor": false}, {"identifier": "getFilterPre", "parameters": "()", "modifiers": "public", "return": "Filter", "signature": "Filter getFilterPre()", "full_signature": "public Filter getFilterPre()", "class_method_signature": "CapabilitiesFilterSplitter.getFilterPre()", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(IncludeFilter filter)", "modifiers": "public", "return": "void", "signature": "void visit(IncludeFilter filter)", "full_signature": "public void visit(IncludeFilter filter)", "class_method_signature": "CapabilitiesFilterSplitter.visit(IncludeFilter filter)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(ExcludeFilter filter)", "modifiers": "public", "return": "void", "signature": "void visit(ExcludeFilter filter)", "full_signature": "public void visit(ExcludeFilter filter)", "class_method_signature": "CapabilitiesFilterSplitter.visit(ExcludeFilter filter)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsBetween filter, Object extradata)", "modifiers": "public", "return": "Object", "signature": "Object visit(PropertyIsBetween filter, Object extradata)", "full_signature": "public Object visit(PropertyIsBetween filter, Object extradata)", "class_method_signature": "CapabilitiesFilterSplitter.visit(PropertyIsBetween filter, Object extradata)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsEqualTo filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(PropertyIsEqualTo filter, Object notUsed)", "full_signature": "public Object visit(PropertyIsEqualTo filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(PropertyIsEqualTo filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsGreaterThan filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(PropertyIsGreaterThan filter, Object notUsed)", "full_signature": "public Object visit(PropertyIsGreaterThan filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(PropertyIsGreaterThan filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsGreaterThanOrEqualTo filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(PropertyIsGreaterThanOrEqualTo filter, Object notUsed)", "full_signature": "public Object visit(PropertyIsGreaterThanOrEqualTo filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(PropertyIsGreaterThanOrEqualTo filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsLessThan filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(PropertyIsLessThan filter, Object notUsed)", "full_signature": "public Object visit(PropertyIsLessThan filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(PropertyIsLessThan filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsLessThanOrEqualTo filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(PropertyIsLessThanOrEqualTo filter, Object notUsed)", "full_signature": "public Object visit(PropertyIsLessThanOrEqualTo filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(PropertyIsLessThanOrEqualTo filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsNotEqualTo filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(PropertyIsNotEqualTo filter, Object notUsed)", "full_signature": "public Object visit(PropertyIsNotEqualTo filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(PropertyIsNotEqualTo filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visitBinaryOperator", "parameters": "(Filter filter, Expression leftValue, Expression rightValue)", "modifiers": "private", "return": "void", "signature": "void visitBinaryOperator(Filter filter, Expression leftValue, Expression rightValue)", "full_signature": "private void visitBinaryOperator(Filter filter, Expression leftValue, Expression rightValue)", "class_method_signature": "CapabilitiesFilterSplitter.visitBinaryOperator(Filter filter, Expression leftValue, Expression rightValue)", "testcase": false, "constructor": false}, {"identifier": "visitBinaryComparisonOperator", "parameters": "(BinaryComparisonOperator filter)", "modifiers": "private", "return": "void", "signature": "void visitBinaryComparisonOperator(BinaryComparisonOperator filter)", "full_signature": "private void visitBinaryComparisonOperator(BinaryComparisonOperator filter)", "class_method_signature": "CapabilitiesFilterSplitter.visitBinaryComparisonOperator(BinaryComparisonOperator filter)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(BBOX filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(BBOX filter, Object notUsed)", "full_signature": "public Object visit(BBOX filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(BBOX filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Beyond filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(Beyond filter, Object notUsed)", "full_signature": "public Object visit(Beyond filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Beyond filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Contains filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(Contains filter, Object notUsed)", "full_signature": "public Object visit(Contains filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Contains filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Crosses filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(Crosses filter, Object notUsed)", "full_signature": "public Object visit(Crosses filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Crosses filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Disjoint filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(Disjoint filter, Object notUsed)", "full_signature": "public Object visit(Disjoint filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Disjoint filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(DWithin filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(DWithin filter, Object notUsed)", "full_signature": "public Object visit(DWithin filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(DWithin filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Equals filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(Equals filter, Object notUsed)", "full_signature": "public Object visit(Equals filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Equals filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Intersects filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(Intersects filter, Object notUsed)", "full_signature": "public Object visit(Intersects filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Intersects filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Overlaps filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(Overlaps filter, Object notUsed)", "full_signature": "public Object visit(Overlaps filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Overlaps filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Touches filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(Touches filter, Object notUsed)", "full_signature": "public Object visit(Touches filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Touches filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Within filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(Within filter, Object notUsed)", "full_signature": "public Object visit(Within filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Within filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visitBinarySpatialOperator", "parameters": "(BinarySpatialOperator filter)", "modifiers": "private", "return": "void", "signature": "void visitBinarySpatialOperator(BinarySpatialOperator filter)", "full_signature": "private void visitBinarySpatialOperator(BinarySpatialOperator filter)", "class_method_signature": "CapabilitiesFilterSplitter.visitBinarySpatialOperator(BinarySpatialOperator filter)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsLike filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(PropertyIsLike filter, Object notUsed)", "full_signature": "public Object visit(PropertyIsLike filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(PropertyIsLike filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(And filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(And filter, Object notUsed)", "full_signature": "public Object visit(And filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(And filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Not filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(Not filter, Object notUsed)", "full_signature": "public Object visit(Not filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Not filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Or filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(Or filter, Object notUsed)", "full_signature": "public Object visit(Or filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Or filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visitLogicOperator", "parameters": "(Filter filter)", "modifiers": "private", "return": "void", "signature": "void visitLogicOperator(Filter filter)", "full_signature": "private void visitLogicOperator(Filter filter)", "class_method_signature": "CapabilitiesFilterSplitter.visitLogicOperator(Filter filter)", "testcase": false, "constructor": false}, {"identifier": "popToSize", "parameters": "(Stack stack, int j)", "modifiers": "private", "return": "void", "signature": "void popToSize(Stack stack, int j)", "full_signature": "private void popToSize(Stack stack, int j)", "class_method_signature": "CapabilitiesFilterSplitter.popToSize(Stack stack, int j)", "testcase": false, "constructor": false}, {"identifier": "visitNullFilter", "parameters": "(Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visitNullFilter(Object notUsed)", "full_signature": "public Object visitNullFilter(Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visitNullFilter(Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(IncludeFilter filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(IncludeFilter filter, Object notUsed)", "full_signature": "public Object visit(IncludeFilter filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(IncludeFilter filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(ExcludeFilter filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(ExcludeFilter filter, Object notUsed)", "full_signature": "public Object visit(ExcludeFilter filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(ExcludeFilter filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsNull filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(PropertyIsNull filter, Object notUsed)", "full_signature": "public Object visit(PropertyIsNull filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(PropertyIsNull filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyIsNil filter, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(PropertyIsNil filter, Object extraData)", "full_signature": "public Object visit(PropertyIsNil filter, Object extraData)", "class_method_signature": "CapabilitiesFilterSplitter.visit(PropertyIsNil filter, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visitNullNil", "parameters": "(Filter filter, Expression e)", "modifiers": "", "return": "Object", "signature": "Object visitNullNil(Filter filter, Expression e)", "full_signature": " Object visitNullNil(Filter filter, Expression e)", "class_method_signature": "CapabilitiesFilterSplitter.visitNullNil(Filter filter, Expression e)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Id filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(Id filter, Object notUsed)", "full_signature": "public Object visit(Id filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Id filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(PropertyName expression, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(PropertyName expression, Object notUsed)", "full_signature": "public Object visit(PropertyName expression, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(PropertyName expression, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Literal expression, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(Literal expression, Object notUsed)", "full_signature": "public Object visit(Literal expression, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Literal expression, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Add filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(Add filter, Object notUsed)", "full_signature": "public Object visit(Add filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Add filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Divide filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(Divide filter, Object notUsed)", "full_signature": "public Object visit(Divide filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Divide filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Multiply filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(Multiply filter, Object notUsed)", "full_signature": "public Object visit(Multiply filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Multiply filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Subtract filter, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(Subtract filter, Object notUsed)", "full_signature": "public Object visit(Subtract filter, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Subtract filter, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visitMathExpression", "parameters": "(BinaryExpression expression)", "modifiers": "private", "return": "void", "signature": "void visitMathExpression(BinaryExpression expression)", "full_signature": "private void visitMathExpression(BinaryExpression expression)", "class_method_signature": "CapabilitiesFilterSplitter.visitMathExpression(BinaryExpression expression)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Function expression, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(Function expression, Object notUsed)", "full_signature": "public Object visit(Function expression, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Function expression, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(NilExpression nilExpression, Object notUsed)", "modifiers": "public", "return": "Object", "signature": "Object visit(NilExpression nilExpression, Object notUsed)", "full_signature": "public Object visit(NilExpression nilExpression, Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visit(NilExpression nilExpression, Object notUsed)", "testcase": false, "constructor": false}, {"identifier": "translateOr", "parameters": "(Or filter)", "modifiers": "private", "return": "Filter", "signature": "Filter translateOr(Or filter)", "full_signature": "private Filter translateOr(Or filter)", "class_method_signature": "CapabilitiesFilterSplitter.translateOr(Or filter)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(After after, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(After after, Object extraData)", "full_signature": "public Object visit(After after, Object extraData)", "class_method_signature": "CapabilitiesFilterSplitter.visit(After after, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(AnyInteracts anyInteracts, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(AnyInteracts anyInteracts, Object extraData)", "full_signature": "public Object visit(AnyInteracts anyInteracts, Object extraData)", "class_method_signature": "CapabilitiesFilterSplitter.visit(AnyInteracts anyInteracts, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Before before, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Before before, Object extraData)", "full_signature": "public Object visit(Before before, Object extraData)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Before before, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Begins begins, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Begins begins, Object extraData)", "full_signature": "public Object visit(Begins begins, Object extraData)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Begins begins, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(BegunBy begunBy, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(BegunBy begunBy, Object extraData)", "full_signature": "public Object visit(BegunBy begunBy, Object extraData)", "class_method_signature": "CapabilitiesFilterSplitter.visit(BegunBy begunBy, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(During during, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(During during, Object extraData)", "full_signature": "public Object visit(During during, Object extraData)", "class_method_signature": "CapabilitiesFilterSplitter.visit(During during, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(EndedBy endedBy, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(EndedBy endedBy, Object extraData)", "full_signature": "public Object visit(EndedBy endedBy, Object extraData)", "class_method_signature": "CapabilitiesFilterSplitter.visit(EndedBy endedBy, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Ends ends, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Ends ends, Object extraData)", "full_signature": "public Object visit(Ends ends, Object extraData)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Ends ends, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(Meets meets, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(Meets meets, Object extraData)", "full_signature": "public Object visit(Meets meets, Object extraData)", "class_method_signature": "CapabilitiesFilterSplitter.visit(Meets meets, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(MetBy metBy, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(MetBy metBy, Object extraData)", "full_signature": "public Object visit(MetBy metBy, Object extraData)", "class_method_signature": "CapabilitiesFilterSplitter.visit(MetBy metBy, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(OverlappedBy overlappedBy, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(OverlappedBy overlappedBy, Object extraData)", "full_signature": "public Object visit(OverlappedBy overlappedBy, Object extraData)", "class_method_signature": "CapabilitiesFilterSplitter.visit(OverlappedBy overlappedBy, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(TContains contains, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(TContains contains, Object extraData)", "full_signature": "public Object visit(TContains contains, Object extraData)", "class_method_signature": "CapabilitiesFilterSplitter.visit(TContains contains, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(TEquals equals, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(TEquals equals, Object extraData)", "full_signature": "public Object visit(TEquals equals, Object extraData)", "class_method_signature": "CapabilitiesFilterSplitter.visit(TEquals equals, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(TOverlaps contains, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object visit(TOverlaps contains, Object extraData)", "full_signature": "public Object visit(TOverlaps contains, Object extraData)", "class_method_signature": "CapabilitiesFilterSplitter.visit(TOverlaps contains, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "visit", "parameters": "(BinaryTemporalOperator filter, Object data)", "modifiers": "protected", "return": "Object", "signature": "Object visit(BinaryTemporalOperator filter, Object data)", "full_signature": "protected Object visit(BinaryTemporalOperator filter, Object data)", "class_method_signature": "CapabilitiesFilterSplitter.visit(BinaryTemporalOperator filter, Object data)", "testcase": false, "constructor": false}], "file": "modules/library/main/src/main/java/org/geotools/filter/visitor/CapabilitiesFilterSplitter.java"}, "focal_method": {"identifier": "visitNullFilter", "parameters": "(Object notUsed)", "modifiers": "public", "return": "Object", "body": "public Object visitNullFilter(Object notUsed) {\n        return null;\n    }", "signature": "Object visitNullFilter(Object notUsed)", "full_signature": "public Object visitNullFilter(Object notUsed)", "class_method_signature": "CapabilitiesFilterSplitter.visitNullFilter(Object notUsed)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}