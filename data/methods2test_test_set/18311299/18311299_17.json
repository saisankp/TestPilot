{"test_class": {"identifier": "MysqlEventSourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ConnectionProvider provider = new MysqlConnectionProvider(URL, USERNAME, PASSWORD);", "modifier": "", "type": "ConnectionProvider", "declarator": "provider = new MysqlConnectionProvider(URL, USERNAME, PASSWORD)", "var_name": "provider"}, {"original_string": "private static final String LIST_ALL_QUERY =\n            \"SELECT * FROM \" + ListenerRepo.TABLE_NAME;", "modifier": "private static final", "type": "String", "declarator": "LIST_ALL_QUERY =\n            \"SELECT * FROM \" + ListenerRepo.TABLE_NAME", "var_name": "LIST_ALL_QUERY"}], "file": "reactive-source-mysql/src/test/java/org/reactivesource/mysql/MysqlEventSourceTest.java"}, "test_case": {"identifier": "testConnectCreatesCorrectEntryInListenerTable", "parameters": "()", "modifiers": "@Test(groups = INTEGRATION) public", "return": "void", "body": "@Test(groups = INTEGRATION)\n    public void testConnectCreatesCorrectEntryInListenerTable() throws SQLException {\n        MysqlEventSource eventSource = new MysqlEventSource(provider, TEST_TABLE_NAME);\n        eventSource.connect();\n\n        assertEquals(listAllListeners().size(), 1);\n    }", "signature": "void testConnectCreatesCorrectEntryInListenerTable()", "full_signature": "@Test(groups = INTEGRATION) public void testConnectCreatesCorrectEntryInListenerTable()", "class_method_signature": "MysqlEventSourceTest.testConnectCreatesCorrectEntryInListenerTable()", "testcase": true, "constructor": false, "invocations": ["connect", "assertEquals", "size", "listAllListeners"]}, "focal_class": {"identifier": "MysqlEventSource", "superclass": "", "interfaces": "implements EventSource", "fields": [{"original_string": "private final ConnectionProvider connectionProvider;", "modifier": "private final", "type": "ConnectionProvider", "declarator": "connectionProvider", "var_name": "connectionProvider"}, {"original_string": "private final String tableName;", "modifier": "private final", "type": "String", "declarator": "tableName", "var_name": "tableName"}, {"original_string": "private final MysqlEventMapper eventMapper;", "modifier": "private final", "type": "MysqlEventMapper", "declarator": "eventMapper", "var_name": "eventMapper"}, {"original_string": "private MysqlEventRepo eventRepo;", "modifier": "private", "type": "MysqlEventRepo", "declarator": "eventRepo", "var_name": "eventRepo"}, {"original_string": "private ListenerRepo listenerRepo;", "modifier": "private", "type": "ListenerRepo", "declarator": "listenerRepo", "var_name": "listenerRepo"}, {"original_string": "private Listener listener;", "modifier": "private", "type": "Listener", "declarator": "listener", "var_name": "listener"}, {"original_string": "private Connection connection;", "modifier": "private", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private MysqlConfigurator configurator;", "modifier": "private", "type": "MysqlConfigurator", "declarator": "configurator", "var_name": "configurator"}], "methods": [{"identifier": "MysqlEventSource", "parameters": "(ConnectionProvider connectionProvider, String tableName)", "modifiers": "public", "return": "", "signature": " MysqlEventSource(ConnectionProvider connectionProvider, String tableName)", "full_signature": "public  MysqlEventSource(ConnectionProvider connectionProvider, String tableName)", "class_method_signature": "MysqlEventSource.MysqlEventSource(ConnectionProvider connectionProvider, String tableName)", "testcase": false, "constructor": true}, {"identifier": "MysqlEventSource", "parameters": "(ConnectionProvider connectionProvider, String tableName, MysqlConfigurator configurator)", "modifiers": "@VisibleForTesting", "return": "", "signature": " MysqlEventSource(ConnectionProvider connectionProvider, String tableName, MysqlConfigurator configurator)", "full_signature": "@VisibleForTesting  MysqlEventSource(ConnectionProvider connectionProvider, String tableName, MysqlConfigurator configurator)", "class_method_signature": "MysqlEventSource.MysqlEventSource(ConnectionProvider connectionProvider, String tableName, MysqlConfigurator configurator)", "testcase": false, "constructor": true}, {"identifier": "getNewEvents", "parameters": "()", "modifiers": "@Override public", "return": "List<Event<Map<String, Object>>>", "signature": "List<Event<Map<String, Object>>> getNewEvents()", "full_signature": "@Override public List<Event<Map<String, Object>>> getNewEvents()", "class_method_signature": "MysqlEventSource.getNewEvents()", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void connect()", "full_signature": "@Override public void connect()", "class_method_signature": "MysqlEventSource.connect()", "testcase": false, "constructor": false}, {"identifier": "disconnect", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void disconnect()", "full_signature": "@Override public void disconnect()", "class_method_signature": "MysqlEventSource.disconnect()", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConnected()", "full_signature": "@Override public boolean isConnected()", "class_method_signature": "MysqlEventSource.isConnected()", "testcase": false, "constructor": false}, {"identifier": "setup", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void setup()", "full_signature": "@Override public void setup()", "class_method_signature": "MysqlEventSource.setup()", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cleanup()", "full_signature": "@Override public void cleanup()", "class_method_signature": "MysqlEventSource.cleanup()", "testcase": false, "constructor": false}, {"identifier": "mapMysqlEventsToGenericEvents", "parameters": "(List<MysqlEvent> mysqlEvents)", "modifiers": "private", "return": "List<Event<Map<String, Object>>>", "signature": "List<Event<Map<String, Object>>> mapMysqlEventsToGenericEvents(List<MysqlEvent> mysqlEvents)", "full_signature": "private List<Event<Map<String, Object>>> mapMysqlEventsToGenericEvents(List<MysqlEvent> mysqlEvents)", "class_method_signature": "MysqlEventSource.mapMysqlEventsToGenericEvents(List<MysqlEvent> mysqlEvents)", "testcase": false, "constructor": false}], "file": "reactive-source-mysql/src/main/java/org/reactivesource/mysql/MysqlEventSource.java"}, "focal_method": {"identifier": "connect", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void connect() throws DataAccessException {\n        if (!isConnected()) {\n            connection = connectionProvider.getConnection();\n            listener = listenerRepo.insert(new Listener(tableName), connection);\n        }\n    }", "signature": "void connect()", "full_signature": "@Override public void connect()", "class_method_signature": "MysqlEventSource.connect()", "testcase": false, "constructor": false, "invocations": ["isConnected", "getConnection", "insert"]}, "repository": {"repo_id": 18311299, "url": "https://github.com/eBay/reactive-source", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 9, "size": 317, "license": "licensed"}}