{"test_class": {"identifier": "LLDPTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected byte[] pkt = {0x01,0x23,0x20,0x00,0x00,0x01,0x00,0x12,(byte) 0xe2,0x78,0x67,0x78,(byte) 0x88,(byte) 0xcc,0x02,0x07,\n            0x04,0x00,0x12,(byte) 0xe2,0x78,0x67,0x64,0x04,0x03,0x02,0x00,0x06,0x06,0x02,0x00,0x78,\n            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};", "modifier": "protected", "type": "byte[]", "declarator": "pkt = {0x01,0x23,0x20,0x00,0x00,0x01,0x00,0x12,(byte) 0xe2,0x78,0x67,0x78,(byte) 0x88,(byte) 0xcc,0x02,0x07,\n            0x04,0x00,0x12,(byte) 0xe2,0x78,0x67,0x64,0x04,0x03,0x02,0x00,0x06,0x06,0x02,0x00,0x78,\n            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}", "var_name": "pkt"}], "file": "network-level/fl-ho-nl/src/test/java/net/floodlightcontroller/packet/LLDPTest.java"}, "test_case": {"identifier": "testDeserialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeserialize() throws Exception {\n        Ethernet ethernet = (Ethernet) new Ethernet().deserialize(pkt, 0, pkt.length);\n        ethernet.setPad(true);\n        assertTrue(Arrays.equals(pkt, ethernet.serialize()));\n\n        IPacket expected = getPacket();\n        assertEquals(expected, ethernet);\n    }", "signature": "void testDeserialize()", "full_signature": "@Test public void testDeserialize()", "class_method_signature": "LLDPTest.testDeserialize()", "testcase": true, "constructor": false, "invocations": ["deserialize", "setPad", "assertTrue", "equals", "serialize", "getPacket", "assertEquals"]}, "focal_class": {"identifier": "LLDP", "superclass": "extends BasePacket", "interfaces": "", "fields": [{"original_string": "protected LLDPTLV chassisId;", "modifier": "protected", "type": "LLDPTLV", "declarator": "chassisId", "var_name": "chassisId"}, {"original_string": "protected LLDPTLV portId;", "modifier": "protected", "type": "LLDPTLV", "declarator": "portId", "var_name": "portId"}, {"original_string": "protected LLDPTLV ttl;", "modifier": "protected", "type": "LLDPTLV", "declarator": "ttl", "var_name": "ttl"}, {"original_string": "protected List<LLDPTLV> optionalTLVList;", "modifier": "protected", "type": "List<LLDPTLV>", "declarator": "optionalTLVList", "var_name": "optionalTLVList"}, {"original_string": "protected short ethType;", "modifier": "protected", "type": "short", "declarator": "ethType", "var_name": "ethType"}], "methods": [{"identifier": "LLDP", "parameters": "()", "modifiers": "public", "return": "", "signature": " LLDP()", "full_signature": "public  LLDP()", "class_method_signature": "LLDP.LLDP()", "testcase": false, "constructor": true}, {"identifier": "getChassisId", "parameters": "()", "modifiers": "public", "return": "LLDPTLV", "signature": "LLDPTLV getChassisId()", "full_signature": "public LLDPTLV getChassisId()", "class_method_signature": "LLDP.getChassisId()", "testcase": false, "constructor": false}, {"identifier": "setChassisId", "parameters": "(LLDPTLV chassisId)", "modifiers": "public", "return": "LLDP", "signature": "LLDP setChassisId(LLDPTLV chassisId)", "full_signature": "public LLDP setChassisId(LLDPTLV chassisId)", "class_method_signature": "LLDP.setChassisId(LLDPTLV chassisId)", "testcase": false, "constructor": false}, {"identifier": "getPortId", "parameters": "()", "modifiers": "public", "return": "LLDPTLV", "signature": "LLDPTLV getPortId()", "full_signature": "public LLDPTLV getPortId()", "class_method_signature": "LLDP.getPortId()", "testcase": false, "constructor": false}, {"identifier": "setPortId", "parameters": "(LLDPTLV portId)", "modifiers": "public", "return": "LLDP", "signature": "LLDP setPortId(LLDPTLV portId)", "full_signature": "public LLDP setPortId(LLDPTLV portId)", "class_method_signature": "LLDP.setPortId(LLDPTLV portId)", "testcase": false, "constructor": false}, {"identifier": "getTtl", "parameters": "()", "modifiers": "public", "return": "LLDPTLV", "signature": "LLDPTLV getTtl()", "full_signature": "public LLDPTLV getTtl()", "class_method_signature": "LLDP.getTtl()", "testcase": false, "constructor": false}, {"identifier": "setTtl", "parameters": "(LLDPTLV ttl)", "modifiers": "public", "return": "LLDP", "signature": "LLDP setTtl(LLDPTLV ttl)", "full_signature": "public LLDP setTtl(LLDPTLV ttl)", "class_method_signature": "LLDP.setTtl(LLDPTLV ttl)", "testcase": false, "constructor": false}, {"identifier": "getOptionalTLVList", "parameters": "()", "modifiers": "public", "return": "List<LLDPTLV>", "signature": "List<LLDPTLV> getOptionalTLVList()", "full_signature": "public List<LLDPTLV> getOptionalTLVList()", "class_method_signature": "LLDP.getOptionalTLVList()", "testcase": false, "constructor": false}, {"identifier": "setOptionalTLVList", "parameters": "(List<LLDPTLV> optionalTLVList)", "modifiers": "public", "return": "LLDP", "signature": "LLDP setOptionalTLVList(List<LLDPTLV> optionalTLVList)", "full_signature": "public LLDP setOptionalTLVList(List<LLDPTLV> optionalTLVList)", "class_method_signature": "LLDP.setOptionalTLVList(List<LLDPTLV> optionalTLVList)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] serialize()", "full_signature": "@Override public byte[] serialize()", "class_method_signature": "LLDP.serialize()", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(byte[] data, int offset, int length)", "modifiers": "@Override public", "return": "IPacket", "signature": "IPacket deserialize(byte[] data, int offset, int length)", "full_signature": "@Override public IPacket deserialize(byte[] data, int offset, int length)", "class_method_signature": "LLDP.deserialize(byte[] data, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "LLDP.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "LLDP.equals(Object obj)", "testcase": false, "constructor": false}], "file": "network-level/fl-ho-nl/src/main/java/net/floodlightcontroller/packet/LLDP.java"}, "focal_method": {"identifier": "deserialize", "parameters": "(byte[] data, int offset, int length)", "modifiers": "@Override public", "return": "IPacket", "body": "@Override\n    public IPacket deserialize(byte[] data, int offset, int length) {\n        ByteBuffer bb = ByteBuffer.wrap(data, offset, length);\n        LLDPTLV tlv;\n        do {\n            tlv = new LLDPTLV().deserialize(bb);\n\n            // if there was a failure to deserialize stop processing TLVs\n            if (tlv == null)\n                break;\n            switch (tlv.getType()) {\n                case 0x0:\n                    // can throw this one away, its just an end delimiter\n                    break;\n                case 0x1:\n                    this.chassisId = tlv;\n                    break;\n                case 0x2:\n                    this.portId = tlv;\n                    break;\n                case 0x3:\n                    this.ttl = tlv;\n                    break;\n                default:\n                    this.optionalTLVList.add(tlv);\n                    break;\n            }\n        } while (tlv.getType() != 0 && bb.hasRemaining());\n        return this;\n    }", "signature": "IPacket deserialize(byte[] data, int offset, int length)", "full_signature": "@Override public IPacket deserialize(byte[] data, int offset, int length)", "class_method_signature": "LLDP.deserialize(byte[] data, int offset, int length)", "testcase": false, "constructor": false, "invocations": ["wrap", "deserialize", "getType", "add", "getType", "hasRemaining"]}, "repository": {"repo_id": 10459637, "url": "https://github.com/rizard/geni-openflow-vertical-handover", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 33971, "license": "licensed"}}