{"test_class": {"identifier": "AsyncSqsClientFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final AsyncSqsClientConfiguration ASYNC_CONFIG =\n      new AsyncSqsClientConfiguration(AsyncSqsClientConfiguration.Type.PRODUCTION);", "modifier": "private static final", "type": "AsyncSqsClientConfiguration", "declarator": "ASYNC_CONFIG =\n      new AsyncSqsClientConfiguration(AsyncSqsClientConfiguration.Type.PRODUCTION)", "var_name": "ASYNC_CONFIG"}, {"original_string": "private static final AsyncSqsClientConfiguration LOCAL_CONFIG =\n      new AsyncSqsClientConfiguration(AsyncSqsClientConfiguration.Type.MOCK);", "modifier": "private static final", "type": "AsyncSqsClientConfiguration", "declarator": "LOCAL_CONFIG =\n      new AsyncSqsClientConfiguration(AsyncSqsClientConfiguration.Type.MOCK)", "var_name": "LOCAL_CONFIG"}, {"original_string": "private final AsyncSqsClientFactory factory =\n      new AsyncSqsClientFactory(new NoOpConveyorMetrics());", "modifier": "private final", "type": "AsyncSqsClientFactory", "declarator": "factory =\n      new AsyncSqsClientFactory(new NoOpConveyorMetrics())", "var_name": "factory"}], "file": "conveyor/src/test/java/com/airbnb/conveyor/async/AsyncSqsClientFactoryTest.java"}, "test_case": {"identifier": "testAsyncWithOverrideConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testAsyncWithOverrideConfig() throws Exception {\n    AsyncSqsClientConfiguration config =\n        new AsyncSqsClientConfiguration(AsyncSqsClientConfiguration.Type.PRODUCTION);\n\n    RetryPolicyConfiguration retryPolicyConfiguration = new RetryPolicyConfiguration();\n    retryPolicyConfiguration.setCondition(RetryPolicyConfiguration.Condition.DEFAULT);\n    retryPolicyConfiguration.setBackOff(RetryPolicyConfiguration.BackOff.EQUAL_JITTER);\n\n    OverrideConfiguration overrideConfiguration = new OverrideConfiguration();\n    overrideConfiguration.setApiCallAttemptTimeout(300);\n    overrideConfiguration.setApiCallTimeout(25 * 1000);\n    overrideConfiguration.setRetryPolicyConfiguration(retryPolicyConfiguration);\n\n    config.setOverrideConfiguration(overrideConfiguration);\n\n    AsyncSqsClient asyncClient = factory.create(config);\n    assertTrue(asyncClient instanceof AsyncSqsClientImpl);\n\n    SqsAsyncClient sqs = ((AsyncSqsClientImpl) asyncClient).getClient();\n    assertNotNull(sqs);\n  }", "signature": "void testAsyncWithOverrideConfig()", "full_signature": "@Test public void testAsyncWithOverrideConfig()", "class_method_signature": "AsyncSqsClientFactoryTest.testAsyncWithOverrideConfig()", "testcase": true, "constructor": false, "invocations": ["setCondition", "setBackOff", "setApiCallAttemptTimeout", "setApiCallTimeout", "setRetryPolicyConfiguration", "setOverrideConfiguration", "create", "assertTrue", "getClient", "assertNotNull"]}, "focal_class": {"identifier": "AsyncSqsClientFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "@NonNull private final AsyncConveyorMetrics metrics;", "modifier": "@NonNull private final", "type": "AsyncConveyorMetrics", "declarator": "metrics", "var_name": "metrics"}], "methods": [{"identifier": "create", "parameters": "(@NonNull final AsyncSqsClientConfiguration configuration)", "modifiers": "public", "return": "AsyncSqsClient", "signature": "AsyncSqsClient create(@NonNull final AsyncSqsClientConfiguration configuration)", "full_signature": "public AsyncSqsClient create(@NonNull final AsyncSqsClientConfiguration configuration)", "class_method_signature": "AsyncSqsClientFactory.create(@NonNull final AsyncSqsClientConfiguration configuration)", "testcase": false, "constructor": false}, {"identifier": "buildRetryPolicy", "parameters": "(RetryPolicyConfiguration config)", "modifiers": "private", "return": "RetryPolicy", "signature": "RetryPolicy buildRetryPolicy(RetryPolicyConfiguration config)", "full_signature": "private RetryPolicy buildRetryPolicy(RetryPolicyConfiguration config)", "class_method_signature": "AsyncSqsClientFactory.buildRetryPolicy(RetryPolicyConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "getAsyncSQSClient", "parameters": "(AsyncSqsClientConfiguration config)", "modifiers": "private", "return": "SqsAsyncClient", "signature": "SqsAsyncClient getAsyncSQSClient(AsyncSqsClientConfiguration config)", "full_signature": "private SqsAsyncClient getAsyncSQSClient(AsyncSqsClientConfiguration config)", "class_method_signature": "AsyncSqsClientFactory.getAsyncSQSClient(AsyncSqsClientConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "createClient", "parameters": "(@NonNull final AsyncSqsClientConfiguration configuration)", "modifiers": "private", "return": "AsyncSqsClient", "signature": "AsyncSqsClient createClient(@NonNull final AsyncSqsClientConfiguration configuration)", "full_signature": "private AsyncSqsClient createClient(@NonNull final AsyncSqsClientConfiguration configuration)", "class_method_signature": "AsyncSqsClientFactory.createClient(@NonNull final AsyncSqsClientConfiguration configuration)", "testcase": false, "constructor": false}], "file": "conveyor/src/main/java/com/airbnb/conveyor/async/AsyncSqsClientFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(@NonNull final AsyncSqsClientConfiguration configuration)", "modifiers": "public", "return": "AsyncSqsClient", "body": "public AsyncSqsClient create(@NonNull final AsyncSqsClientConfiguration configuration) {\n    return createClient(configuration);\n  }", "signature": "AsyncSqsClient create(@NonNull final AsyncSqsClientConfiguration configuration)", "full_signature": "public AsyncSqsClient create(@NonNull final AsyncSqsClientConfiguration configuration)", "class_method_signature": "AsyncSqsClientFactory.create(@NonNull final AsyncSqsClientConfiguration configuration)", "testcase": false, "constructor": false, "invocations": ["createClient"]}, "repository": {"repo_id": 208320365, "url": "https://github.com/airbnb/dynein", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 247, "size": 71, "license": "licensed"}}