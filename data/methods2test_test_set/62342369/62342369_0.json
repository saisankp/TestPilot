{"test_class": {"identifier": "ArtefactFunctionHandlerTest", "superclass": "", "interfaces": "", "fields": [], "file": "step-functions-plugins/step-functions-plugins-composite/step-functions-plugins-composite-handler/src/test/java/step/plugins/functions/types/composite/ArtefactFunctionHandlerTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test() {\n\t\tExecutionContext context = newExecutionContext();\n\n\t\tReturn r = new Return();\n\t\tr.setOutput(new DynamicValue<String>(\"{\\\"Result\\\":{\\\"dynamic\\\":true,\\\"expression\\\":\\\"input.Input1\\\"}}\"));\n\t\t\n\t\tPlan compositePlan = PlanBuilder.create().startBlock(BaseArtefacts.sequence()).add(r).endBlock().build();\n\t\tcontext.getPlanAccessor().save(compositePlan);\n\t\t\n\t\tReportNode parentNode = new ReportNode();\n\t\tcontext.getReportNodeAccessor().save(parentNode);\n\t\t\n\t\tArtefactFunctionHandler handler = createArtefactFunctionHandler(context);\n\t\t\n\t\tInput<JsonObject> input = new Input<>();\n\t\tinput.setPayload(Json.createObjectBuilder().add(\"Input1\", \"InputValue1\").build());\n\t\tMap<String, String> properties = getInputProperties(compositePlan, parentNode);\n\t\tinput.setProperties(properties);\n\t\tOutput<JsonObject> output = handler.handle(input);\n\t\t\n\t\tAssert.assertNull(output.getError());\n\t\tAssert.assertEquals(\"InputValue1\", output.getPayload().getString(\"Result\"));\n\t\t\n\t\tAtomicInteger count = new AtomicInteger(0);\n\t\tcontext.getReportNodeAccessor().getAll().forEachRemaining(n->count.incrementAndGet());\n\t\tAssert.assertEquals(3, count.get());\n\t}", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "ArtefactFunctionHandlerTest.test()", "testcase": true, "constructor": false, "invocations": ["newExecutionContext", "setOutput", "build", "endBlock", "add", "startBlock", "create", "sequence", "save", "getPlanAccessor", "save", "getReportNodeAccessor", "createArtefactFunctionHandler", "setPayload", "build", "add", "createObjectBuilder", "getInputProperties", "setProperties", "handle", "assertNull", "getError", "assertEquals", "getString", "getPayload", "forEachRemaining", "getAll", "getReportNodeAccessor", "incrementAndGet", "assertEquals", "get"]}, "focal_class": {"identifier": "ArtefactFunctionHandler", "superclass": "extends JsonBasedFunctionHandler", "interfaces": "", "fields": [{"original_string": "private static final String INPUT = \"input\";", "modifier": "private static final", "type": "String", "declarator": "INPUT = \"input\"", "var_name": "INPUT"}, {"original_string": "private static final String OUTPUT = \"output\";", "modifier": "private static final", "type": "String", "declarator": "OUTPUT = \"output\"", "var_name": "OUTPUT"}, {"original_string": "public static final String PLANID_KEY = \"$planid\";", "modifier": "public static final", "type": "String", "declarator": "PLANID_KEY = \"$planid\"", "var_name": "PLANID_KEY"}], "methods": [{"identifier": "handle", "parameters": "(Input<JsonObject> input)", "modifiers": "@Override protected", "return": "Output<JsonObject>", "signature": "Output<JsonObject> handle(Input<JsonObject> input)", "full_signature": "@Override protected Output<JsonObject> handle(Input<JsonObject> input)", "class_method_signature": "ArtefactFunctionHandler.handle(Input<JsonObject> input)", "testcase": false, "constructor": false}], "file": "step-functions-plugins/step-functions-plugins-composite/step-functions-plugins-composite-handler/src/main/java/step/plugins/functions/types/composite/ArtefactFunctionHandler.java"}, "focal_method": {"identifier": "handle", "parameters": "(Input<JsonObject> input)", "modifiers": "@Override protected", "return": "Output<JsonObject>", "body": "@Override\n\tprotected Output<JsonObject> handle(Input<JsonObject> input) {\n\t\tOutputBuilder output = new OutputBuilder();\n\n\t\tExecutionContext executionContext = (ExecutionContext) getTokenReservationSession().get(AbstractFunctionHandler.EXECUTION_CONTEXT_KEY);\n\t\t\n\t\tif(executionContext == null) {\n\t\t\toutput.setError(\"Running composite Keyword on agent not supported. Please change the keyword configuration accordingly.\");\n\t\t} else {\n\t\t\tString planId = input.getProperties().get(PLANID_KEY);\n\t\t\tString parentReportId = input.getProperties().get(AbstractFunctionHandler.PARENTREPORTID_KEY);\n\t\t\t\n\t\t\tReportNode parentNode;\n\t\t\tif(parentReportId!=null) {\n\t\t\t\tparentNode = executionContext.getReportNodeAccessor().get(parentReportId);\n\t\t\t\tif(parentNode == null) {\n\t\t\t\t\tparentNode = executionContext.getCurrentReportNode();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparentNode = executionContext.getCurrentReportNode();\n\t\t\t\t//throw new RuntimeException(\"Parent node id is null. This should never occur\");\n\t\t\t}\n\t\t\t\n\t\t\tReportNode previousCurrentNode = executionContext.getCurrentReportNode();\n\t\t\texecutionContext.setCurrentReportNode(parentNode);\n\t\t\texecutionContext.getReportNodeCache().put(parentNode);\n\t\t\t\n\t\t\tAbstractArtefact artefact = executionContext.getPlanAccessor().get(planId).getRoot();\n\t\t\t\n\t\t\texecutionContext.getVariablesManager().putVariable(parentNode, INPUT, input.getPayload());\n\t\t\texecutionContext.getVariablesManager().putVariable(parentNode, VariableType.IMMUTABLE, OUTPUT, output);\n\t\t\t\n\t\t\ttry {\n\t\t\t\tReportNode node = executionContext.getArtefactHandlerManager().execute(artefact, parentNode);\n\t\t\t\tif(node.getStatus()== ReportNodeStatus.TECHNICAL_ERROR || node.getStatus()== ReportNodeStatus.FAILED) {\n\t\t\t\t\tError error = new Error();\n\t\t\t\t\terror.setCode(0);\n\t\t\t\t\terror.setMsg(\"Error in composite keyword\");\n\t\t\t\t\terror.setRoot(false);\n\t\t\t\t\terror.setType(node.getStatus().equals(ReportNodeStatus.FAILED)?ErrorType.BUSINESS:ErrorType.TECHNICAL);\n\t\t\t\t\toutput.setError(error);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\texecutionContext.getVariablesManager().removeVariable(parentNode, OUTPUT);\n\t\t\t\texecutionContext.setCurrentReportNode(previousCurrentNode);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn output.build();\n\t}", "signature": "Output<JsonObject> handle(Input<JsonObject> input)", "full_signature": "@Override protected Output<JsonObject> handle(Input<JsonObject> input)", "class_method_signature": "ArtefactFunctionHandler.handle(Input<JsonObject> input)", "testcase": false, "constructor": false, "invocations": ["get", "getTokenReservationSession", "setError", "get", "getProperties", "get", "getProperties", "get", "getReportNodeAccessor", "getCurrentReportNode", "getCurrentReportNode", "getCurrentReportNode", "setCurrentReportNode", "put", "getReportNodeCache", "getRoot", "get", "getPlanAccessor", "putVariable", "getVariablesManager", "getPayload", "putVariable", "getVariablesManager", "execute", "getArtefactHandlerManager", "getStatus", "getStatus", "setCode", "setMsg", "setRoot", "setType", "equals", "getStatus", "setError", "removeVariable", "getVariablesManager", "setCurrentReportNode", "build"]}, "repository": {"repo_id": 62342369, "url": "https://github.com/exense/step", "stars": 12, "created": "6/30/2016 9:08:29 PM +00:00", "updates": "2020-01-24T17:13:24+00:00", "fork": "False", "license": "licensed"}}