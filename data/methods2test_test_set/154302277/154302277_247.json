{"test_class": {"identifier": "DeviceResponseMessageSenderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private DeviceResponseMessageSender messageSender;", "modifier": "@InjectMocks\n    private", "type": "DeviceResponseMessageSender", "declarator": "messageSender", "var_name": "messageSender"}, {"original_string": "@Mock\n    private JmsTemplate jmsTemplate;", "modifier": "@Mock\n    private", "type": "JmsTemplate", "declarator": "jmsTemplate", "var_name": "jmsTemplate"}, {"original_string": "@Mock\n    private ClientConnectionService clientConnectionService;", "modifier": "@Mock\n    private", "type": "ClientConnectionService", "declarator": "clientConnectionService", "var_name": "clientConnectionService"}], "file": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/infra/messaging/DeviceResponseMessageSenderTest.java"}, "test_case": {"identifier": "shouldSendResponse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldSendResponse() {\n        // Arrange\n        final ProtocolResponseMessage responseMessage = this.createDefaultResponseMessage();\n\n        // Act\n        this.messageSender.send(responseMessage);\n\n        // Assert\n        verify(this.jmsTemplate).send(any(MessageCreator.class));\n    }", "signature": "void shouldSendResponse()", "full_signature": "@Test public void shouldSendResponse()", "class_method_signature": "DeviceResponseMessageSenderTest.shouldSendResponse()", "testcase": true, "constructor": false, "invocations": ["createDefaultResponseMessage", "send", "send", "verify", "any"]}, "focal_class": {"identifier": "DeviceResponseMessageSender", "superclass": "", "interfaces": "implements ResponseMessageSender", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DeviceResponseMessageSender.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DeviceResponseMessageSender.class)", "var_name": "LOGGER"}, {"original_string": "private static final String LOG_MESSAGE_RESPONSE_MESSAGE_OF_WRONG_TYPE = \"Only ProtocolResponseMessage type is expected for DeviceResponseMessageSender, received responseMessage of type {}.\";", "modifier": "private static final", "type": "String", "declarator": "LOG_MESSAGE_RESPONSE_MESSAGE_OF_WRONG_TYPE = \"Only ProtocolResponseMessage type is expected for DeviceResponseMessageSender, received responseMessage of type {}.\"", "var_name": "LOG_MESSAGE_RESPONSE_MESSAGE_OF_WRONG_TYPE"}, {"original_string": "private static final String LOG_MESSAGE_JMS_EXCEPTION = \"JMS Exception, closing all connections.\";", "modifier": "private static final", "type": "String", "declarator": "LOG_MESSAGE_JMS_EXCEPTION = \"JMS Exception, closing all connections.\"", "var_name": "LOG_MESSAGE_JMS_EXCEPTION"}, {"original_string": "@Autowired\n    @Qualifier(\"protocolIec60870OutboundOsgpCoreResponsesJmsTemplate\")\n    private JmsTemplate jmsTemplate;", "modifier": "@Autowired\n    @Qualifier(\"protocolIec60870OutboundOsgpCoreResponsesJmsTemplate\")\n    private", "type": "JmsTemplate", "declarator": "jmsTemplate", "var_name": "jmsTemplate"}, {"original_string": "@Autowired\n    private ClientConnectionService iec60870DeviceConnectionService;", "modifier": "@Autowired\n    private", "type": "ClientConnectionService", "declarator": "iec60870DeviceConnectionService", "var_name": "iec60870DeviceConnectionService"}, {"original_string": "@Autowired\n    private boolean isCloseConnectionsOnBrokerFailure;", "modifier": "@Autowired\n    private", "type": "boolean", "declarator": "isCloseConnectionsOnBrokerFailure", "var_name": "isCloseConnectionsOnBrokerFailure"}], "methods": [{"identifier": "send", "parameters": "(final ResponseMessage responseMessage)", "modifiers": "@Override public", "return": "void", "signature": "void send(final ResponseMessage responseMessage)", "full_signature": "@Override public void send(final ResponseMessage responseMessage)", "class_method_signature": "DeviceResponseMessageSender.send(final ResponseMessage responseMessage)", "testcase": false, "constructor": false}, {"identifier": "sendMessage", "parameters": "(final ProtocolResponseMessage responseMessage)", "modifiers": "private", "return": "void", "signature": "void sendMessage(final ProtocolResponseMessage responseMessage)", "full_signature": "private void sendMessage(final ProtocolResponseMessage responseMessage)", "class_method_signature": "DeviceResponseMessageSender.sendMessage(final ProtocolResponseMessage responseMessage)", "testcase": false, "constructor": false}], "file": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/infra/messaging/DeviceResponseMessageSender.java"}, "focal_method": {"identifier": "send", "parameters": "(final ResponseMessage responseMessage)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void send(final ResponseMessage responseMessage) {\n        if (!(responseMessage instanceof ProtocolResponseMessage)) {\n            LOGGER.error(LOG_MESSAGE_RESPONSE_MESSAGE_OF_WRONG_TYPE, responseMessage.getClass().getName());\n            return;\n        }\n\n        final ProtocolResponseMessage msg = (ProtocolResponseMessage) responseMessage;\n\n        if (!ProtocolResponseMessageValidator.isValid(msg, LOGGER)) {\n            return;\n        }\n\n        try {\n            this.sendMessage(msg);\n        } catch (final IllegalStateException | UncategorizedJmsException e) {\n            /*\n             * IllegalStateException occurs when activemq connection pool is\n             * exhausted or activemq failover timeout is reached\n             * UncategorizedJmsException might also occur when activemq failover\n             * timeout is reached\n             */\n            if (this.isCloseConnectionsOnBrokerFailure) {\n                LOGGER.error(LOG_MESSAGE_JMS_EXCEPTION, e);\n                this.iec60870DeviceConnectionService.closeAllConnections();\n            }\n            throw e;\n        }\n    }", "signature": "void send(final ResponseMessage responseMessage)", "full_signature": "@Override public void send(final ResponseMessage responseMessage)", "class_method_signature": "DeviceResponseMessageSender.send(final ResponseMessage responseMessage)", "testcase": false, "constructor": false, "invocations": ["error", "getName", "getClass", "isValid", "sendMessage", "error", "closeAllConnections"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}