{"test_class": {"identifier": "ReflectiveGenericLifecycleObserverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LifecycleOwner mOwner;", "modifier": "private", "type": "LifecycleOwner", "declarator": "mOwner", "var_name": "mOwner"}, {"original_string": "private Lifecycle mLifecycle;", "modifier": "private", "type": "Lifecycle", "declarator": "mLifecycle", "var_name": "mLifecycle"}], "file": "lifecycle/common/src/test/java/android/arch/lifecycle/ReflectiveGenericLifecycleObserverTest.java"}, "test_case": {"identifier": "testPrivateObserverMethods", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPrivateObserverMethods() {\n        class ObserverWithPrivateMethod implements LifecycleObserver {\n            boolean mCalled = false;\n            @OnLifecycleEvent(ON_START)\n            private void started() {\n                mCalled = true;\n            }\n        }\n\n        ObserverWithPrivateMethod obj = mock(ObserverWithPrivateMethod.class);\n        ReflectiveGenericLifecycleObserver observer = new ReflectiveGenericLifecycleObserver(obj);\n        observer.onStateChanged(mOwner, ON_START);\n        assertThat(obj.mCalled, is(true));\n    }", "signature": "void testPrivateObserverMethods()", "full_signature": "@Test public void testPrivateObserverMethods()", "class_method_signature": "ReflectiveGenericLifecycleObserverTest.testPrivateObserverMethods()", "testcase": true, "constructor": false, "invocations": ["mock", "onStateChanged", "assertThat", "is"]}, "focal_class": {"identifier": "ReflectiveGenericLifecycleObserver", "superclass": "", "interfaces": "implements GenericLifecycleObserver", "fields": [{"original_string": "private final Object mWrapped;", "modifier": "private final", "type": "Object", "declarator": "mWrapped", "var_name": "mWrapped"}, {"original_string": "private final CallbackInfo mInfo;", "modifier": "private final", "type": "CallbackInfo", "declarator": "mInfo", "var_name": "mInfo"}, {"original_string": "@SuppressWarnings(\"WeakerAccess\")\n    static final Map<Class, CallbackInfo> sInfoCache = new HashMap<>();", "modifier": "@SuppressWarnings(\"WeakerAccess\")\n    static final", "type": "Map<Class, CallbackInfo>", "declarator": "sInfoCache = new HashMap<>()", "var_name": "sInfoCache"}, {"original_string": "private static final int CALL_TYPE_NO_ARG = 0;", "modifier": "private static final", "type": "int", "declarator": "CALL_TYPE_NO_ARG = 0", "var_name": "CALL_TYPE_NO_ARG"}, {"original_string": "private static final int CALL_TYPE_PROVIDER = 1;", "modifier": "private static final", "type": "int", "declarator": "CALL_TYPE_PROVIDER = 1", "var_name": "CALL_TYPE_PROVIDER"}, {"original_string": "private static final int CALL_TYPE_PROVIDER_WITH_EVENT = 2;", "modifier": "private static final", "type": "int", "declarator": "CALL_TYPE_PROVIDER_WITH_EVENT = 2", "var_name": "CALL_TYPE_PROVIDER_WITH_EVENT"}], "methods": [{"identifier": "ReflectiveGenericLifecycleObserver", "parameters": "(Object wrapped)", "modifiers": "", "return": "", "signature": " ReflectiveGenericLifecycleObserver(Object wrapped)", "full_signature": "  ReflectiveGenericLifecycleObserver(Object wrapped)", "class_method_signature": "ReflectiveGenericLifecycleObserver.ReflectiveGenericLifecycleObserver(Object wrapped)", "testcase": false, "constructor": true}, {"identifier": "onStateChanged", "parameters": "(LifecycleOwner source, Event event)", "modifiers": "@Override public", "return": "void", "signature": "void onStateChanged(LifecycleOwner source, Event event)", "full_signature": "@Override public void onStateChanged(LifecycleOwner source, Event event)", "class_method_signature": "ReflectiveGenericLifecycleObserver.onStateChanged(LifecycleOwner source, Event event)", "testcase": false, "constructor": false}, {"identifier": "invokeMethodsForEvent", "parameters": "(List<MethodReference> handlers, LifecycleOwner source,\n            Event event)", "modifiers": "private", "return": "void", "signature": "void invokeMethodsForEvent(List<MethodReference> handlers, LifecycleOwner source,\n            Event event)", "full_signature": "private void invokeMethodsForEvent(List<MethodReference> handlers, LifecycleOwner source,\n            Event event)", "class_method_signature": "ReflectiveGenericLifecycleObserver.invokeMethodsForEvent(List<MethodReference> handlers, LifecycleOwner source,\n            Event event)", "testcase": false, "constructor": false}, {"identifier": "invokeCallbacks", "parameters": "(CallbackInfo info, LifecycleOwner source, Event event)", "modifiers": "@SuppressWarnings(\"ConstantConditions\") private", "return": "void", "signature": "void invokeCallbacks(CallbackInfo info, LifecycleOwner source, Event event)", "full_signature": "@SuppressWarnings(\"ConstantConditions\") private void invokeCallbacks(CallbackInfo info, LifecycleOwner source, Event event)", "class_method_signature": "ReflectiveGenericLifecycleObserver.invokeCallbacks(CallbackInfo info, LifecycleOwner source, Event event)", "testcase": false, "constructor": false}, {"identifier": "invokeCallback", "parameters": "(MethodReference reference, LifecycleOwner source, Event event)", "modifiers": "private", "return": "void", "signature": "void invokeCallback(MethodReference reference, LifecycleOwner source, Event event)", "full_signature": "private void invokeCallback(MethodReference reference, LifecycleOwner source, Event event)", "class_method_signature": "ReflectiveGenericLifecycleObserver.invokeCallback(MethodReference reference, LifecycleOwner source, Event event)", "testcase": false, "constructor": false}, {"identifier": "getReceiver", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object getReceiver()", "full_signature": "@Override public Object getReceiver()", "class_method_signature": "ReflectiveGenericLifecycleObserver.getReceiver()", "testcase": false, "constructor": false}, {"identifier": "getInfo", "parameters": "(Class klass)", "modifiers": "private static", "return": "CallbackInfo", "signature": "CallbackInfo getInfo(Class klass)", "full_signature": "private static CallbackInfo getInfo(Class klass)", "class_method_signature": "ReflectiveGenericLifecycleObserver.getInfo(Class klass)", "testcase": false, "constructor": false}, {"identifier": "verifyAndPutHandler", "parameters": "(Map<MethodReference, Event> handlers,\n            MethodReference newHandler, Event newEvent, Class klass)", "modifiers": "private static", "return": "void", "signature": "void verifyAndPutHandler(Map<MethodReference, Event> handlers,\n            MethodReference newHandler, Event newEvent, Class klass)", "full_signature": "private static void verifyAndPutHandler(Map<MethodReference, Event> handlers,\n            MethodReference newHandler, Event newEvent, Class klass)", "class_method_signature": "ReflectiveGenericLifecycleObserver.verifyAndPutHandler(Map<MethodReference, Event> handlers,\n            MethodReference newHandler, Event newEvent, Class klass)", "testcase": false, "constructor": false}, {"identifier": "createInfo", "parameters": "(Class klass)", "modifiers": "private static", "return": "CallbackInfo", "signature": "CallbackInfo createInfo(Class klass)", "full_signature": "private static CallbackInfo createInfo(Class klass)", "class_method_signature": "ReflectiveGenericLifecycleObserver.createInfo(Class klass)", "testcase": false, "constructor": false}], "file": "lifecycle/common/src/main/java/android/arch/lifecycle/ReflectiveGenericLifecycleObserver.java"}, "focal_method": {"identifier": "onStateChanged", "parameters": "(LifecycleOwner source, Event event)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onStateChanged(LifecycleOwner source, Event event) {\n        invokeCallbacks(mInfo, source, event);\n    }", "signature": "void onStateChanged(LifecycleOwner source, Event event)", "full_signature": "@Override public void onStateChanged(LifecycleOwner source, Event event)", "class_method_signature": "ReflectiveGenericLifecycleObserver.onStateChanged(LifecycleOwner source, Event event)", "testcase": false, "constructor": false, "invocations": ["invokeCallbacks"]}, "repository": {"repo_id": 104025215, "url": "https://github.com/Rayduh/support", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 8, "size": 253405, "license": "licensed"}}