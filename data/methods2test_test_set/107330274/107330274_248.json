{"test_class": {"identifier": "ClusterRemovableInstanceGroupAgentRemoverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TestScheduler testScheduler = Schedulers.test();", "modifier": "private final", "type": "TestScheduler", "declarator": "testScheduler = Schedulers.test()", "var_name": "testScheduler"}, {"original_string": "private final TitusRuntime titusRuntime = TitusRuntimes.test(testScheduler);", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime = TitusRuntimes.test(testScheduler)", "var_name": "titusRuntime"}, {"original_string": "private final ClusterOperationsConfiguration configuration = mock(ClusterOperationsConfiguration.class);", "modifier": "private final", "type": "ClusterOperationsConfiguration", "declarator": "configuration = mock(ClusterOperationsConfiguration.class)", "var_name": "configuration"}, {"original_string": "private final AgentManagementService agentManagementService = mock(AgentManagementService.class);", "modifier": "private final", "type": "AgentManagementService", "declarator": "agentManagementService = mock(AgentManagementService.class)", "var_name": "agentManagementService"}, {"original_string": "private final V3JobOperations v3JobOperations = mock(V3JobOperations.class);", "modifier": "private final", "type": "V3JobOperations", "declarator": "v3JobOperations = mock(V3JobOperations.class)", "var_name": "v3JobOperations"}], "file": "titus-server-master/src/test/java/com/netflix/titus/master/clusteroperations/ClusterRemovableInstanceGroupAgentRemoverTest.java"}, "test_case": {"identifier": "testDoNotRemoveMoreAgentsThanInstanceGroupMin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDoNotRemoveMoreAgentsThanInstanceGroupMin() {\n        AgentInstanceGroup instanceGroup = createRemovableInstanceGroup(\"instanceGroup1\", 2);\n        when(agentManagementService.getInstanceGroups()).thenReturn(singletonList(instanceGroup));\n\n        AgentInstance agentInstance1 = AgentInstance.newBuilder()\n                .withId(\"agentInstance1\")\n                .withInstanceGroupId(\"instanceGroup1\")\n                .build();\n        AgentInstance agentInstance2 = AgentInstance.newBuilder()\n                .withId(\"agentInstance2\")\n                .withInstanceGroupId(\"instanceGroup1\")\n                .build();\n\n        List<AgentInstance> agentInstances = asList(agentInstance1, agentInstance2);\n        when(agentManagementService.getAgentInstances(\"instanceGroup1\")).thenReturn(agentInstances);\n\n        when(agentManagementService.terminateAgents(\"instanceGroup1\", singletonList(\"agentInstance1\"), true))\n                .thenReturn(Observable.just(singletonList(Either.ofValue(true))));\n\n        when(v3JobOperations.getTasks()).thenReturn(emptyList());\n\n        testScheduler.advanceTimeBy(6, TimeUnit.MINUTES);\n\n        ClusterRemovableInstanceGroupAgentRemover clusterRemovableInstanceGroupAgentRemover = new ClusterRemovableInstanceGroupAgentRemover(titusRuntime, configuration,\n                agentManagementService, v3JobOperations, testScheduler);\n\n        clusterRemovableInstanceGroupAgentRemover.doRemoveAgents().await();\n\n        verify(agentManagementService, times(0)).terminateAgents(any(), any(), anyBoolean());\n    }", "signature": "void testDoNotRemoveMoreAgentsThanInstanceGroupMin()", "full_signature": "@Test public void testDoNotRemoveMoreAgentsThanInstanceGroupMin()", "class_method_signature": "ClusterRemovableInstanceGroupAgentRemoverTest.testDoNotRemoveMoreAgentsThanInstanceGroupMin()", "testcase": true, "constructor": false, "invocations": ["createRemovableInstanceGroup", "thenReturn", "when", "getInstanceGroups", "singletonList", "build", "withInstanceGroupId", "withId", "newBuilder", "build", "withInstanceGroupId", "withId", "newBuilder", "asList", "thenReturn", "when", "getAgentInstances", "thenReturn", "when", "terminateAgents", "singletonList", "just", "singletonList", "ofValue", "thenReturn", "when", "getTasks", "emptyList", "advanceTimeBy", "await", "doRemoveAgents", "terminateAgents", "verify", "times", "any", "any", "anyBoolean"]}, "focal_class": {"identifier": "ClusterRemovableInstanceGroupAgentRemover", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ClusterRemovableInstanceGroupAgentRemover.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ClusterRemovableInstanceGroupAgentRemover.class)", "var_name": "logger"}, {"original_string": "private static final String METRIC_ROOT = METRIC_CLUSTER_OPERATIONS + \"clusterRemovableInstanceGroupAgentRemover.\";", "modifier": "private static final", "type": "String", "declarator": "METRIC_ROOT = METRIC_CLUSTER_OPERATIONS + \"clusterRemovableInstanceGroupAgentRemover.\"", "var_name": "METRIC_ROOT"}, {"original_string": "private static final long TIME_TO_WAIT_AFTER_ACTIVATION = 300_000;", "modifier": "private static final", "type": "long", "declarator": "TIME_TO_WAIT_AFTER_ACTIVATION = 300_000", "var_name": "TIME_TO_WAIT_AFTER_ACTIVATION"}, {"original_string": "private static final long REMOVE_AGENTS_ITERATION_INTERVAL_MS = 30_000;", "modifier": "private static final", "type": "long", "declarator": "REMOVE_AGENTS_ITERATION_INTERVAL_MS = 30_000", "var_name": "REMOVE_AGENTS_ITERATION_INTERVAL_MS"}, {"original_string": "private static final long REMOVE_AGENTS_COMPLETABLE_TIMEOUT_MS = 300_000;", "modifier": "private static final", "type": "long", "declarator": "REMOVE_AGENTS_COMPLETABLE_TIMEOUT_MS = 300_000", "var_name": "REMOVE_AGENTS_COMPLETABLE_TIMEOUT_MS"}, {"original_string": "private static final long AGENT_INSTANCES_BEING_TERMINATED_TTL_MS = 300_000;", "modifier": "private static final", "type": "long", "declarator": "AGENT_INSTANCES_BEING_TERMINATED_TTL_MS = 300_000", "var_name": "AGENT_INSTANCES_BEING_TERMINATED_TTL_MS"}, {"original_string": "private static final long TOKEN_BUCKET_CAPACITY = 100;", "modifier": "private static final", "type": "long", "declarator": "TOKEN_BUCKET_CAPACITY = 100", "var_name": "TOKEN_BUCKET_CAPACITY"}, {"original_string": "private static final long TOKEN_BUCKET_REFILL_AMOUNT = 2;", "modifier": "private static final", "type": "long", "declarator": "TOKEN_BUCKET_REFILL_AMOUNT = 2", "var_name": "TOKEN_BUCKET_REFILL_AMOUNT"}, {"original_string": "private static final long TOKEN_BUCKET_REFILL_INTERVAL_MS = 1_000;", "modifier": "private static final", "type": "long", "declarator": "TOKEN_BUCKET_REFILL_INTERVAL_MS = 1_000", "var_name": "TOKEN_BUCKET_REFILL_INTERVAL_MS"}, {"original_string": "private final TitusRuntime titusRuntime;", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime", "var_name": "titusRuntime"}, {"original_string": "private final ClusterOperationsConfiguration configuration;", "modifier": "private final", "type": "ClusterOperationsConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final AgentManagementService agentManagementService;", "modifier": "private final", "type": "AgentManagementService", "declarator": "agentManagementService", "var_name": "agentManagementService"}, {"original_string": "private final V3JobOperations v3JobOperations;", "modifier": "private final", "type": "V3JobOperations", "declarator": "v3JobOperations", "var_name": "v3JobOperations"}, {"original_string": "private final Scheduler scheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private final Cache<String, String> agentInstancesBeingTerminated;", "modifier": "private final", "type": "Cache<String, String>", "declarator": "agentInstancesBeingTerminated", "var_name": "agentInstancesBeingTerminated"}, {"original_string": "private final Gauge totalAgentsToRemoveGauge;", "modifier": "private final", "type": "Gauge", "declarator": "totalAgentsToRemoveGauge", "var_name": "totalAgentsToRemoveGauge"}, {"original_string": "private final Gauge totalEligibleAgentsToRemoveGauge;", "modifier": "private final", "type": "Gauge", "declarator": "totalEligibleAgentsToRemoveGauge", "var_name": "totalEligibleAgentsToRemoveGauge"}, {"original_string": "private final Gauge totalAgentsBeingRemovedGauge;", "modifier": "private final", "type": "Gauge", "declarator": "totalAgentsBeingRemovedGauge", "var_name": "totalAgentsBeingRemovedGauge"}, {"original_string": "private ImmutableTokenBucket lastTokenBucket;", "modifier": "private", "type": "ImmutableTokenBucket", "declarator": "lastTokenBucket", "var_name": "lastTokenBucket"}, {"original_string": "private Subscription removeAgentsSubscription;", "modifier": "private", "type": "Subscription", "declarator": "removeAgentsSubscription", "var_name": "removeAgentsSubscription"}], "methods": [{"identifier": "ClusterRemovableInstanceGroupAgentRemover", "parameters": "(TitusRuntime titusRuntime,\n                                                     ClusterOperationsConfiguration configuration,\n                                                     AgentManagementService agentManagementService,\n                                                     V3JobOperations v3JobOperations)", "modifiers": "@Inject public", "return": "", "signature": " ClusterRemovableInstanceGroupAgentRemover(TitusRuntime titusRuntime,\n                                                     ClusterOperationsConfiguration configuration,\n                                                     AgentManagementService agentManagementService,\n                                                     V3JobOperations v3JobOperations)", "full_signature": "@Inject public  ClusterRemovableInstanceGroupAgentRemover(TitusRuntime titusRuntime,\n                                                     ClusterOperationsConfiguration configuration,\n                                                     AgentManagementService agentManagementService,\n                                                     V3JobOperations v3JobOperations)", "class_method_signature": "ClusterRemovableInstanceGroupAgentRemover.ClusterRemovableInstanceGroupAgentRemover(TitusRuntime titusRuntime,\n                                                     ClusterOperationsConfiguration configuration,\n                                                     AgentManagementService agentManagementService,\n                                                     V3JobOperations v3JobOperations)", "testcase": false, "constructor": true}, {"identifier": "ClusterRemovableInstanceGroupAgentRemover", "parameters": "(TitusRuntime titusRuntime,\n                                                     ClusterOperationsConfiguration configuration,\n                                                     AgentManagementService agentManagementService,\n                                                     V3JobOperations v3JobOperations,\n                                                     Scheduler scheduler)", "modifiers": "public", "return": "", "signature": " ClusterRemovableInstanceGroupAgentRemover(TitusRuntime titusRuntime,\n                                                     ClusterOperationsConfiguration configuration,\n                                                     AgentManagementService agentManagementService,\n                                                     V3JobOperations v3JobOperations,\n                                                     Scheduler scheduler)", "full_signature": "public  ClusterRemovableInstanceGroupAgentRemover(TitusRuntime titusRuntime,\n                                                     ClusterOperationsConfiguration configuration,\n                                                     AgentManagementService agentManagementService,\n                                                     V3JobOperations v3JobOperations,\n                                                     Scheduler scheduler)", "class_method_signature": "ClusterRemovableInstanceGroupAgentRemover.ClusterRemovableInstanceGroupAgentRemover(TitusRuntime titusRuntime,\n                                                     ClusterOperationsConfiguration configuration,\n                                                     AgentManagementService agentManagementService,\n                                                     V3JobOperations v3JobOperations,\n                                                     Scheduler scheduler)", "testcase": false, "constructor": true}, {"identifier": "enterActiveMode", "parameters": "()", "modifiers": "@Activator public", "return": "void", "signature": "void enterActiveMode()", "full_signature": "@Activator public void enterActiveMode()", "class_method_signature": "ClusterRemovableInstanceGroupAgentRemover.enterActiveMode()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@PreDestroy public", "return": "void", "signature": "void shutdown()", "full_signature": "@PreDestroy public void shutdown()", "class_method_signature": "ClusterRemovableInstanceGroupAgentRemover.shutdown()", "testcase": false, "constructor": false}, {"identifier": "doRemoveAgents", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "Completable", "signature": "Completable doRemoveAgents()", "full_signature": "@VisibleForTesting Completable doRemoveAgents()", "class_method_signature": "ClusterRemovableInstanceGroupAgentRemover.doRemoveAgents()", "testcase": false, "constructor": false}, {"identifier": "createTokenBucket", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createTokenBucket()", "full_signature": "private void createTokenBucket()", "class_method_signature": "ClusterRemovableInstanceGroupAgentRemover.createTokenBucket()", "testcase": false, "constructor": false}, {"identifier": "createTerminateAgentsCompletable", "parameters": "(String instanceGroupId, List<String> terminateIds)", "modifiers": "private", "return": "Completable", "signature": "Completable createTerminateAgentsCompletable(String instanceGroupId, List<String> terminateIds)", "full_signature": "private Completable createTerminateAgentsCompletable(String instanceGroupId, List<String> terminateIds)", "class_method_signature": "ClusterRemovableInstanceGroupAgentRemover.createTerminateAgentsCompletable(String instanceGroupId, List<String> terminateIds)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfTasksOnAgents", "parameters": "()", "modifiers": "private", "return": "Map<String, Long>", "signature": "Map<String, Long> getNumberOfTasksOnAgents()", "full_signature": "private Map<String, Long> getNumberOfTasksOnAgents()", "class_method_signature": "ClusterRemovableInstanceGroupAgentRemover.getNumberOfTasksOnAgents()", "testcase": false, "constructor": false}], "file": "titus-server-master/src/main/java/com/netflix/titus/master/clusteroperations/ClusterRemovableInstanceGroupAgentRemover.java"}, "focal_method": {"identifier": "doRemoveAgents", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "Completable", "body": "@VisibleForTesting\n    Completable doRemoveAgents() {\n        return Completable.defer(() -> {\n            if (!configuration.isRemovingAgentsEnabled()) {\n                logger.debug(\"Removing agents is not enabled\");\n                return Completable.complete();\n            }\n\n            long now = titusRuntime.getClock().wallTime();\n            List<AgentInstanceGroup> eligibleInstanceGroups = agentManagementService.getInstanceGroups().stream()\n                    .filter(agentManagementService::isOwnedByFenzo)\n                    .filter(ig -> ig.getLifecycleStatus().getState() == InstanceGroupLifecycleState.Removable)\n                    .filter(ig -> now - ig.getLifecycleStatus().getTimestamp() >= configuration.getInstanceGroupRemovableGracePeriodMs())\n                    .collect(Collectors.toList());\n\n            logger.debug(\"Eligible instance groups: {}\", eligibleInstanceGroups);\n            long totalAgentsToRemove = 0;\n            Map<AgentInstanceGroup, List<AgentInstance>> agentInstancesPerInstanceGroup = new HashMap<>();\n            for (AgentInstanceGroup instanceGroup : eligibleInstanceGroups) {\n                List<AgentInstance> agentInstances = agentManagementService.getAgentInstances(instanceGroup.getId());\n                totalAgentsToRemove += agentInstances.size();\n                agentInstancesPerInstanceGroup.put(instanceGroup, agentInstances);\n            }\n            totalAgentsToRemoveGauge.set(totalAgentsToRemove);\n            logger.debug(\"Agent instances per instance group: {}\", agentInstancesPerInstanceGroup);\n\n            if (totalAgentsToRemove <= 0) {\n                totalEligibleAgentsToRemoveGauge.set(0);\n                return Completable.complete();\n            }\n\n            long totalEligibleAgentsToRemove = 0;\n            Map<AgentInstanceGroup, List<AgentInstance>> eligibleAgentInstancesPerInstanceGroup = new HashMap<>();\n            Map<String, Long> numberOfTasksOnAgents = getNumberOfTasksOnAgents();\n            logger.debug(\"numberOfTasksOnAgents: {}\", numberOfTasksOnAgents);\n\n            for (Map.Entry<AgentInstanceGroup, List<AgentInstance>> entry : agentInstancesPerInstanceGroup.entrySet()) {\n                List<AgentInstance> eligibleAgentInstances = entry.getValue().stream()\n                        .filter(i -> agentInstancesBeingTerminated.getIfPresent(i.getId()) == null)\n                        .filter(i -> numberOfTasksOnAgents.getOrDefault(i.getId(), 0L) <= 0)\n                        .collect(Collectors.toList());\n                totalEligibleAgentsToRemove += eligibleAgentInstances.size();\n                eligibleAgentInstancesPerInstanceGroup.put(entry.getKey(), eligibleAgentInstances);\n            }\n            totalEligibleAgentsToRemoveGauge.set(totalEligibleAgentsToRemove);\n            logger.debug(\"Eligible agent instances per instance group: {}\", eligibleAgentInstancesPerInstanceGroup);\n\n            if (totalEligibleAgentsToRemove <= 0) {\n                return Completable.complete();\n            }\n\n            long maxTokensToTake = Math.min(TOKEN_BUCKET_CAPACITY, totalEligibleAgentsToRemove);\n            Optional<Pair<Long, ImmutableTokenBucket>> takeOpt = this.lastTokenBucket.tryTake(1, maxTokensToTake);\n            if (takeOpt.isPresent()) {\n                Pair<Long, ImmutableTokenBucket> takePair = takeOpt.get();\n                this.lastTokenBucket = takePair.getRight();\n                long tokensAvailable = takePair.getLeft();\n                long tokensUsed = 0;\n\n                logger.debug(\"Attempting to terminate {} agent instances\", tokensAvailable);\n                List<Completable> actions = new ArrayList<>();\n                for (Map.Entry<AgentInstanceGroup, List<AgentInstance>> entry : eligibleAgentInstancesPerInstanceGroup.entrySet()) {\n                    long tokensRemaining = tokensAvailable - tokensUsed;\n                    if (tokensRemaining <= 0) {\n                        break;\n                    }\n                    List<AgentInstance> agentInstances = entry.getValue();\n                    if (agentInstances.isEmpty()) {\n                        continue;\n                    }\n                    AgentInstanceGroup instanceGroup = entry.getKey();\n                    String instanceGroupId = instanceGroup.getId();\n                    int agentCountEligibleToTerminateInInstanceGroup = instanceGroup.getCurrent() - instanceGroup.getMin();\n                    int agentCountToTerminate = Math.min((int) tokensRemaining, agentCountEligibleToTerminateInInstanceGroup);\n                    if (agentCountToTerminate > 0) {\n                        List<String> agentInstanceIdsToTerminate = agentInstances.stream()\n                                .limit(agentCountToTerminate)\n                                .map(AgentInstance::getId)\n                                .collect(Collectors.toList());\n                        logger.info(\"Terminating in instance group: {} agent instances({}): {}\", instanceGroupId, agentInstanceIdsToTerminate.size(), agentInstanceIdsToTerminate);\n                        actions.add(createTerminateAgentsCompletable(instanceGroupId, agentInstanceIdsToTerminate));\n                        tokensUsed += agentInstanceIdsToTerminate.size();\n                    }\n                }\n                totalAgentsBeingRemovedGauge.set(tokensUsed);\n                return Completable.concat(actions);\n            }\n            return Completable.complete();\n        }).doOnCompleted(() -> logger.debug(\"Completed cluster agent removal\"))\n                .timeout(REMOVE_AGENTS_COMPLETABLE_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n    }", "signature": "Completable doRemoveAgents()", "full_signature": "@VisibleForTesting Completable doRemoveAgents()", "class_method_signature": "ClusterRemovableInstanceGroupAgentRemover.doRemoveAgents()", "testcase": false, "constructor": false, "invocations": ["timeout", "doOnCompleted", "defer", "isRemovingAgentsEnabled", "debug", "complete", "wallTime", "getClock", "collect", "filter", "filter", "filter", "stream", "getInstanceGroups", "getState", "getLifecycleStatus", "getTimestamp", "getLifecycleStatus", "getInstanceGroupRemovableGracePeriodMs", "toList", "debug", "getAgentInstances", "getId", "size", "put", "set", "debug", "set", "complete", "getNumberOfTasksOnAgents", "debug", "entrySet", "collect", "filter", "filter", "stream", "getValue", "getIfPresent", "getId", "getOrDefault", "getId", "toList", "size", "put", "getKey", "set", "debug", "complete", "min", "tryTake", "isPresent", "get", "getRight", "getLeft", "debug", "entrySet", "getValue", "isEmpty", "getKey", "getId", "getCurrent", "getMin", "min", "collect", "map", "limit", "stream", "toList", "info", "size", "add", "createTerminateAgentsCompletable", "size", "set", "concat", "complete", "debug"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}