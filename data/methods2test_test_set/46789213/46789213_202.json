{"test_class": {"identifier": "TestSocketNetwork", "superclass": "extends AbstractCloseableNetworkTest", "interfaces": "", "fields": [], "file": "core/src/test/java/dk/alexandra/fresco/framework/network/socket/TestSocketNetwork.java"}, "test_case": {"identifier": "testClosedSocketReciever", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testClosedSocketReciever()\n      throws InterruptedException, ExecutionException, IOException {\n    final int numParties = 2;\n    List<NetworkConfiguration> confs = getNetConfs(numParties);\n    ExecutorService es = Executors.newFixedThreadPool(numParties);\n    List<Future<NetworkConnector>> fs = new ArrayList<>(numParties);\n    try {\n      for (int i = 0; i < numParties; i++) {\n        final int id = i;\n        fs.add(es.submit(() -> new Connector(confs.get(id), DEFAULT_CONNECTION_TIMEOUT)));\n      }\n      Map<Integer, Socket> socketMap1 = fs.get(0).get().getSocketMap();\n      Map<Integer, Socket> socketMap2 = fs.get(1).get().getSocketMap();\n      Receiver r = new Receiver(socketMap1.get(2));\n      socketMap2.get(1).close();\n    } finally {\n      for (Future<NetworkConnector> futureConn : fs) {\n        for (Socket s : futureConn.get().getSocketMap().values()) {\n          // s.close();\n        }\n      }\n\n      es.shutdownNow();\n    }\n  }", "signature": "void testClosedSocketReciever()", "full_signature": "@Test public void testClosedSocketReciever()", "class_method_signature": "TestSocketNetwork.testClosedSocketReciever()", "testcase": true, "constructor": false, "invocations": ["getNetConfs", "newFixedThreadPool", "add", "submit", "get", "getSocketMap", "get", "get", "getSocketMap", "get", "get", "get", "close", "get", "values", "getSocketMap", "get", "shutdownNow"]}, "focal_class": {"identifier": "SocketNetwork", "superclass": "", "interfaces": "implements CloseableNetwork", "fields": [{"original_string": "private static final Duration RECEIVE_TIMEOUT = Duration.ofMillis(100);", "modifier": "private static final", "type": "Duration", "declarator": "RECEIVE_TIMEOUT = Duration.ofMillis(100)", "var_name": "RECEIVE_TIMEOUT"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(SocketNetwork.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SocketNetwork.class)", "var_name": "logger"}, {"original_string": "private final BlockingQueue<byte[]> selfQueue;", "modifier": "private final", "type": "BlockingQueue<byte[]>", "declarator": "selfQueue", "var_name": "selfQueue"}, {"original_string": "private final NetworkConfiguration conf;", "modifier": "private final", "type": "NetworkConfiguration", "declarator": "conf", "var_name": "conf"}, {"original_string": "private boolean alive;", "modifier": "private", "type": "boolean", "declarator": "alive", "var_name": "alive"}, {"original_string": "private final Collection<Socket> sockets;", "modifier": "private final", "type": "Collection<Socket>", "declarator": "sockets", "var_name": "sockets"}, {"original_string": "private final Map<Integer, Sender> senders;", "modifier": "private final", "type": "Map<Integer, Sender>", "declarator": "senders", "var_name": "senders"}, {"original_string": "private final Map<Integer, Receiver> receivers;", "modifier": "private final", "type": "Map<Integer, Receiver>", "declarator": "receivers", "var_name": "receivers"}], "methods": [{"identifier": "SocketNetwork", "parameters": "(NetworkConfiguration conf, Map<Integer, Socket> socketMap)", "modifiers": "public", "return": "", "signature": " SocketNetwork(NetworkConfiguration conf, Map<Integer, Socket> socketMap)", "full_signature": "public  SocketNetwork(NetworkConfiguration conf, Map<Integer, Socket> socketMap)", "class_method_signature": "SocketNetwork.SocketNetwork(NetworkConfiguration conf, Map<Integer, Socket> socketMap)", "testcase": false, "constructor": true}, {"identifier": "SocketNetwork", "parameters": "(NetworkConfiguration conf)", "modifiers": "public", "return": "", "signature": " SocketNetwork(NetworkConfiguration conf)", "full_signature": "public  SocketNetwork(NetworkConfiguration conf)", "class_method_signature": "SocketNetwork.SocketNetwork(NetworkConfiguration conf)", "testcase": false, "constructor": true}, {"identifier": "startCommunication", "parameters": "(Map<Integer, Socket> sockets)", "modifiers": "private", "return": "void", "signature": "void startCommunication(Map<Integer, Socket> sockets)", "full_signature": "private void startCommunication(Map<Integer, Socket> sockets)", "class_method_signature": "SocketNetwork.startCommunication(Map<Integer, Socket> sockets)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(int partyId, byte[] data)", "modifiers": "@Override public", "return": "void", "signature": "void send(int partyId, byte[] data)", "full_signature": "@Override public void send(int partyId, byte[] data)", "class_method_signature": "SocketNetwork.send(int partyId, byte[] data)", "testcase": false, "constructor": false}, {"identifier": "receive", "parameters": "(final int partyId)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] receive(final int partyId)", "full_signature": "@Override public byte[] receive(final int partyId)", "class_method_signature": "SocketNetwork.receive(final int partyId)", "testcase": false, "constructor": false}, {"identifier": "inRange", "parameters": "(final int partyId)", "modifiers": "private", "return": "void", "signature": "void inRange(final int partyId)", "full_signature": "private void inRange(final int partyId)", "class_method_signature": "SocketNetwork.inRange(final int partyId)", "testcase": false, "constructor": false}, {"identifier": "closeCommunication", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void closeCommunication()", "full_signature": "private void closeCommunication()", "class_method_signature": "SocketNetwork.closeCommunication()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SocketNetwork.close()", "testcase": false, "constructor": false}, {"identifier": "getNoOfParties", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNoOfParties()", "full_signature": "@Override public int getNoOfParties()", "class_method_signature": "SocketNetwork.getNoOfParties()", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/network/socket/SocketNetwork.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void close() {\n    if (alive) {\n      alive = false;\n      if (conf.noOfParties() < 2) {\n        logger.info(\"P{}: Network closed\", conf.getMyId());\n        return;\n      }\n      ExceptionConverter.safe(() -> {\n        closeCommunication();\n        logger.info(\"P{}: Network closed\", conf.getMyId());\n        return null;\n      }, \"Unable to properly close the network.\");\n    } else {\n      logger.info(\"P{}: Network already closed\", conf.getMyId());\n    }\n  }", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SocketNetwork.close()", "testcase": false, "constructor": false, "invocations": ["noOfParties", "info", "getMyId", "safe", "closeCommunication", "info", "getMyId", "info", "getMyId"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}