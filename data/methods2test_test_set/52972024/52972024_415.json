{"test_class": {"identifier": "ActorReceiverCreatorPluginTest", "superclass": "", "interfaces": "", "fields": [], "file": "CoreFeatures/MessageProcessing-plugins/PluginActorReceiverCreator/src/test/java/info/smart_tools/smartactors/message_processing_plugins/actor_reveiver_creator_plugin/ActorReceiverCreatorPluginTest.java"}, "test_case": {"identifier": "checkPluginExceptionOnPluginLoad", "parameters": "()", "modifiers": "@Test (expected = PluginException.class) public", "return": "void", "body": "@Test (expected = PluginException.class)\n    public void checkPluginExceptionOnPluginLoad()\n            throws Exception {\n        IBootstrap<IBootstrapItem<String>> bootstrap = mock(IBootstrap.class);\n        IPlugin plugin = new ActorReceiverCreatorPlugin(bootstrap);\n        doThrow(Exception.class).when(bootstrap).add(any(IBootstrapItem.class));\n        plugin.load();\n        fail();\n    }", "signature": "void checkPluginExceptionOnPluginLoad()", "full_signature": "@Test (expected = PluginException.class) public void checkPluginExceptionOnPluginLoad()", "class_method_signature": "ActorReceiverCreatorPluginTest.checkPluginExceptionOnPluginLoad()", "testcase": true, "constructor": false, "invocations": ["mock", "add", "when", "doThrow", "any", "load", "fail"]}, "focal_class": {"identifier": "ActorReceiverCreatorPlugin", "superclass": "", "interfaces": "implements IPlugin", "fields": [{"original_string": "private IBootstrap<IBootstrapItem<String>> bootstrap;", "modifier": "private", "type": "IBootstrap<IBootstrapItem<String>>", "declarator": "bootstrap", "var_name": "bootstrap"}], "methods": [{"identifier": "ActorReceiverCreatorPlugin", "parameters": "(final IBootstrap<IBootstrapItem<String>> bootstrap)", "modifiers": "public", "return": "", "signature": " ActorReceiverCreatorPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "full_signature": "public  ActorReceiverCreatorPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "class_method_signature": "ActorReceiverCreatorPlugin.ActorReceiverCreatorPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "ActorReceiverCreatorPlugin.load()", "testcase": false, "constructor": false}], "file": "CoreFeatures/MessageProcessing-plugins/PluginActorReceiverCreator/src/main/java/info/smart_tools/smartactors/message_processing_plugins/actor_reveiver_creator_plugin/ActorReceiverCreatorPlugin.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void load()\n            throws PluginException {\n        try {\n            IBootstrapItem<String> item = new BootstrapItem(\"ActorReceiverCreator\");\n            item\n                    .after(\"IOC\")\n                    .before(\"starter\")\n                    .after(\"InitializeReceiverGenerator\")\n                    .after(\"InitializeWrapperGenerator\")\n                    .after(\"IFieldPlugin\")\n                    .after(\"IFieldNamePlugin\")\n                    .process(\n                            () -> {\n                                try {\n                                    IOC.register(\n                                            Keys.getOrAdd(\"actor_receiver_queue\"),\n                                            new CreateNewInstanceStrategy(args -> new ConcurrentLinkedQueue()));\n\n                                    IOC.register(\n                                            Keys.getOrAdd(\"actor_receiver_busyness_flag\"),\n                                            new CreateNewInstanceStrategy(args -> new AtomicBoolean(false)));\n\n                                    ActorReceiverCreator objectCreator = new ActorReceiverCreator();\n                                    IOC.register(\n                                            IOC.resolve(\n                                                    IOC.getKeyForKeyStorage(),\n                                                    IRoutedObjectCreator.class.getCanonicalName() + \"#actor\"\n                                            ),\n                                            new SingletonStrategy(objectCreator)\n                                    );\n                                } catch (ResolutionException e) {\n                                    throw new ActionExecuteException(\"ActorReceiverCreator plugin can't load: can't get ActorReceiverCreator key\", e);\n                                } catch (InvalidArgumentException e) {\n                                    throw new ActionExecuteException(\"ActorReceiverCreator plugin can't load: can't create strategy\", e);\n                                } catch (RegistrationException e) {\n                                    throw new ActionExecuteException(\"ActorReceiverCreator plugin can't load: can't register new strategy\", e);\n                                } catch (ObjectCreationException e) {\n                                    throw new ActionExecuteException(\"ActorReceiverCreator plugin can't load: constructor error\", e);\n                                }\n                            }\n                    );\n            this.bootstrap.add(item);\n        } catch (Throwable e) {\n            throw new PluginException(\"Could not load 'ActorReceiverCreator plugin'\", e);\n        }\n    }", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "ActorReceiverCreatorPlugin.load()", "testcase": false, "constructor": false, "invocations": ["process", "after", "after", "after", "after", "before", "after", "register", "getOrAdd", "register", "getOrAdd", "register", "resolve", "getKeyForKeyStorage", "getCanonicalName", "add"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}