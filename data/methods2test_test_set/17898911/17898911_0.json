{"test_class": {"identifier": "DisplayerSubtypeSelectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    DisplayerSubtypeSelector.View subtypeView;", "modifier": "@Mock", "type": "DisplayerSubtypeSelector.View", "declarator": "subtypeView", "var_name": "subtypeView"}, {"original_string": "@Mock\n    RendererManager rendererManager;", "modifier": "@Mock", "type": "RendererManager", "declarator": "rendererManager", "var_name": "rendererManager"}, {"original_string": "@Mock\n    RendererLibrary rendererLibrary;", "modifier": "@Mock", "type": "RendererLibrary", "declarator": "rendererLibrary", "var_name": "rendererLibrary"}, {"original_string": "@Mock\n    EventSourceMock<DisplayerSubtypeSelectedEvent> subtypeSelectedEvent;", "modifier": "@Mock", "type": "EventSourceMock<DisplayerSubtypeSelectedEvent>", "declarator": "subtypeSelectedEvent", "var_name": "subtypeSelectedEvent"}, {"original_string": "DisplayerSubtypeSelector presenter;", "modifier": "", "type": "DisplayerSubtypeSelector", "declarator": "presenter", "var_name": "presenter"}], "file": "dashbuilder-client/dashbuilder-displayer-client/src/test/java/org/dashbuilder/displayer/client/widgets/DisplayerSubtypeSelectorTest.java"}, "test_case": {"identifier": "testInitialization1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitialization1() {\n        presenter.init(BARCHART, BAR);\n        verify(subtypeView).show(BARCHART, BAR);\n        verify(subtypeView).show(BARCHART, BAR_STACKED);\n        verify(subtypeView).select(BAR);\n    }", "signature": "void testInitialization1()", "full_signature": "@Test public void testInitialization1()", "class_method_signature": "DisplayerSubtypeSelectorTest.testInitialization1()", "testcase": true, "constructor": false, "invocations": ["init", "show", "verify", "show", "verify", "select", "verify"]}, "focal_class": {"identifier": "DisplayerSubtypeSelector", "superclass": "", "interfaces": "implements IsWidget", "fields": [{"original_string": "View view = null;", "modifier": "", "type": "View", "declarator": "view = null", "var_name": "view"}, {"original_string": "RendererManager rendererManager;", "modifier": "", "type": "RendererManager", "declarator": "rendererManager", "var_name": "rendererManager"}, {"original_string": "DisplayerSubType selectedSubtype;", "modifier": "", "type": "DisplayerSubType", "declarator": "selectedSubtype", "var_name": "selectedSubtype"}, {"original_string": "Event<DisplayerSubtypeSelectedEvent> selectEvent;", "modifier": "", "type": "Event<DisplayerSubtypeSelectedEvent>", "declarator": "selectEvent", "var_name": "selectEvent"}], "methods": [{"identifier": "DisplayerSubtypeSelector", "parameters": "(View view,\n                                    RendererManager rendererManager,\n                                    Event<DisplayerSubtypeSelectedEvent> selectEvent)", "modifiers": "@Inject public", "return": "", "signature": " DisplayerSubtypeSelector(View view,\n                                    RendererManager rendererManager,\n                                    Event<DisplayerSubtypeSelectedEvent> selectEvent)", "full_signature": "@Inject public  DisplayerSubtypeSelector(View view,\n                                    RendererManager rendererManager,\n                                    Event<DisplayerSubtypeSelectedEvent> selectEvent)", "class_method_signature": "DisplayerSubtypeSelector.DisplayerSubtypeSelector(View view,\n                                    RendererManager rendererManager,\n                                    Event<DisplayerSubtypeSelectedEvent> selectEvent)", "testcase": false, "constructor": true}, {"identifier": "asWidget", "parameters": "()", "modifiers": "@Override public", "return": "Widget", "signature": "Widget asWidget()", "full_signature": "@Override public Widget asWidget()", "class_method_signature": "DisplayerSubtypeSelector.asWidget()", "testcase": false, "constructor": false}, {"identifier": "getSelectedSubtype", "parameters": "()", "modifiers": "public", "return": "DisplayerSubType", "signature": "DisplayerSubType getSelectedSubtype()", "full_signature": "public DisplayerSubType getSelectedSubtype()", "class_method_signature": "DisplayerSubtypeSelector.getSelectedSubtype()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(DisplayerType type, DisplayerSubType selectedSubType)", "modifiers": "public", "return": "void", "signature": "void init(DisplayerType type, DisplayerSubType selectedSubType)", "full_signature": "public void init(DisplayerType type, DisplayerSubType selectedSubType)", "class_method_signature": "DisplayerSubtypeSelector.init(DisplayerType type, DisplayerSubType selectedSubType)", "testcase": false, "constructor": false}, {"identifier": "onSelect", "parameters": "(DisplayerSubType subtype)", "modifiers": "", "return": "void", "signature": "void onSelect(DisplayerSubType subtype)", "full_signature": " void onSelect(DisplayerSubType subtype)", "class_method_signature": "DisplayerSubtypeSelector.onSelect(DisplayerSubType subtype)", "testcase": false, "constructor": false}], "file": "dashbuilder-client/dashbuilder-displayer-client/src/main/java/org/dashbuilder/displayer/client/widgets/DisplayerSubtypeSelector.java"}, "focal_method": {"identifier": "init", "parameters": "(DisplayerType type, DisplayerSubType selectedSubType)", "modifiers": "public", "return": "void", "body": "public void init(DisplayerType type, DisplayerSubType selectedSubType) {\n        view.clear();\n\n        RendererLibrary rendererLibrary = rendererManager.getRendererForType(type);\n        if (rendererLibrary != null) {\n            List<DisplayerSubType> supportedSubTypes = rendererLibrary.getSupportedSubtypes(type);\n            if (supportedSubTypes != null && !supportedSubTypes.isEmpty()) {\n                for (int i = 0; i < supportedSubTypes.size(); i++) {\n                    DisplayerSubType subtype = supportedSubTypes.get(i);\n\n                    // Double check the renderer library for invalid subtypes for this type\n                    if (!type.getSubTypes().contains(subtype)) {\n                        throw new RuntimeException(\"Wrong subtype (\" + subtype + \") indicated for type \" + type + \" by renderer library \" + rendererLibrary.getUUID());\n                    }\n\n                    boolean initiallySelected = selectedSubType != null ? subtype == selectedSubType : i == 0;\n                    view.show(type, subtype);\n                    if (initiallySelected) {\n                        view.select(subtype);\n                    }\n                }\n            } else {\n                view.showDefault(type);\n            }\n        }\n    }", "signature": "void init(DisplayerType type, DisplayerSubType selectedSubType)", "full_signature": "public void init(DisplayerType type, DisplayerSubType selectedSubType)", "class_method_signature": "DisplayerSubtypeSelector.init(DisplayerType type, DisplayerSubType selectedSubType)", "testcase": false, "constructor": false, "invocations": ["clear", "getRendererForType", "getSupportedSubtypes", "isEmpty", "size", "get", "contains", "getSubTypes", "getUUID", "show", "select", "showDefault"]}, "repository": {"repo_id": 17898911, "url": "https://github.com/dashbuilder/dashbuilder", "language": "Java", "is_fork": false, "fork_count": 119, "stargazer_count": 160, "size": 10456, "license": "licensed"}}