{"test_class": {"identifier": "OFSwitchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected OFSwitch sw;", "modifier": "protected", "type": "OFSwitch", "declarator": "sw", "var_name": "sw"}, {"original_string": "protected OFFactory factory = OFFactories.getFactory(OFVersion.OF_13);", "modifier": "protected", "type": "OFFactory", "declarator": "factory = OFFactories.getFactory(OFVersion.OF_13)", "var_name": "factory"}], "file": "src/agents/apps/floodlight/floodlight-1.2/src/test/java/net/floodlightcontroller/core/internal/OFSwitchTest.java"}, "test_case": {"identifier": "testHasAnotherMaster", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testHasAnotherMaster() {\n\t\tURI cokeUri = URIUtil.createURI(\"1.2.3.4\", 6653);\n\t\tInetSocketAddress address = (InetSocketAddress) sw.getConnection(OFAuxId.MAIN).getLocalInetAddress();\n\t\tURI pepsiUri = URIUtil.createURI(address.getHostName(), address.getPort());\n\n\t\tupdateControllerConnections(sw, OFControllerRole.ROLE_SLAVE, OFBsnControllerConnectionState.BSN_CONTROLLER_CONNECTION_STATE_CONNECTED, cokeUri.toString(),\n\t\t\t\tOFControllerRole.ROLE_MASTER, OFBsnControllerConnectionState.BSN_CONTROLLER_CONNECTION_STATE_CONNECTED, pepsiUri.toString());\n\n\t\t// From the perspective of pepsi, the cluster currently does NOT have another master controller\n\t\tassertFalse(sw.hasAnotherMaster());\n\n\t\t// Switch the controller connections so that pepsi is no longer master\n\t\tupdateControllerConnections(sw, OFControllerRole.ROLE_MASTER, OFBsnControllerConnectionState.BSN_CONTROLLER_CONNECTION_STATE_CONNECTED, cokeUri.toString(),\n\t\t\t\tOFControllerRole.ROLE_SLAVE, OFBsnControllerConnectionState.BSN_CONTROLLER_CONNECTION_STATE_CONNECTED, pepsiUri.toString());\n\n\t\t// From the perspective of pepsi, the cluster currently has another master controller\n\t\tassertTrue(sw.hasAnotherMaster());\n\t}", "signature": "void testHasAnotherMaster()", "full_signature": "@Test public void testHasAnotherMaster()", "class_method_signature": "OFSwitchTest.testHasAnotherMaster()", "testcase": true, "constructor": false, "invocations": ["createURI", "getLocalInetAddress", "getConnection", "createURI", "getHostName", "getPort", "updateControllerConnections", "toString", "toString", "assertFalse", "hasAnotherMaster", "updateControllerConnections", "toString", "toString", "assertTrue", "hasAnotherMaster"]}, "focal_class": {"identifier": "OFSwitch", "superclass": "", "interfaces": "implements IOFSwitchBackend", "fields": [{"original_string": "protected static final Logger log =\n\t\t\tLoggerFactory.getLogger(OFSwitch.class);", "modifier": "protected static final", "type": "Logger", "declarator": "log =\n\t\t\tLoggerFactory.getLogger(OFSwitch.class)", "var_name": "log"}, {"original_string": "protected final ConcurrentMap<Object, Object> attributes;", "modifier": "protected final", "type": "ConcurrentMap<Object, Object>", "declarator": "attributes", "var_name": "attributes"}, {"original_string": "protected final IOFSwitchManager switchManager;", "modifier": "protected final", "type": "IOFSwitchManager", "declarator": "switchManager", "var_name": "switchManager"}, {"original_string": "protected Set<OFCapabilities> capabilities;", "modifier": "protected", "type": "Set<OFCapabilities>", "declarator": "capabilities", "var_name": "capabilities"}, {"original_string": "protected long buffers;", "modifier": "protected", "type": "long", "declarator": "buffers", "var_name": "buffers"}, {"original_string": "protected Set<OFActionType> actions;", "modifier": "protected", "type": "Set<OFActionType>", "declarator": "actions", "var_name": "actions"}, {"original_string": "protected Collection<TableId> tables;", "modifier": "protected", "type": "Collection<TableId>", "declarator": "tables", "var_name": "tables"}, {"original_string": "protected short nTables;", "modifier": "protected", "type": "short", "declarator": "nTables", "var_name": "nTables"}, {"original_string": "protected final DatapathId datapathId;", "modifier": "protected final", "type": "DatapathId", "declarator": "datapathId", "var_name": "datapathId"}, {"original_string": "private Map<TableId, TableFeatures> tableFeaturesByTableId;", "modifier": "private", "type": "Map<TableId, TableFeatures>", "declarator": "tableFeaturesByTableId", "var_name": "tableFeaturesByTableId"}, {"original_string": "private boolean startDriverHandshakeCalled = false;", "modifier": "private", "type": "boolean", "declarator": "startDriverHandshakeCalled = false", "var_name": "startDriverHandshakeCalled"}, {"original_string": "private final Map<OFAuxId, IOFConnectionBackend> connections;", "modifier": "private final", "type": "Map<OFAuxId, IOFConnectionBackend>", "declarator": "connections", "var_name": "connections"}, {"original_string": "private volatile Map<URI, Map<OFAuxId, OFBsnControllerConnection>> controllerConnections;", "modifier": "private volatile", "type": "Map<URI, Map<OFAuxId, OFBsnControllerConnection>>", "declarator": "controllerConnections", "var_name": "controllerConnections"}, {"original_string": "protected OFFactory factory;", "modifier": "protected", "type": "OFFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private final PortManager portManager;", "modifier": "private final", "type": "PortManager", "declarator": "portManager", "var_name": "portManager"}, {"original_string": "private volatile boolean connected;", "modifier": "private volatile", "type": "boolean", "declarator": "connected", "var_name": "connected"}, {"original_string": "private volatile OFControllerRole role;", "modifier": "private volatile", "type": "OFControllerRole", "declarator": "role", "var_name": "role"}, {"original_string": "private boolean flowTableFull = false;", "modifier": "private", "type": "boolean", "declarator": "flowTableFull = false", "var_name": "flowTableFull"}, {"original_string": "protected SwitchDescription description;", "modifier": "protected", "type": "SwitchDescription", "declarator": "description", "var_name": "description"}, {"original_string": "private SwitchStatus status;", "modifier": "private", "type": "SwitchStatus", "declarator": "status", "var_name": "status"}, {"original_string": "public static final int OFSWITCH_APP_ID = ident(5);", "modifier": "public static final", "type": "int", "declarator": "OFSWITCH_APP_ID = ident(5)", "var_name": "OFSWITCH_APP_ID"}, {"original_string": "private TableId maxTableToGetTableMissFlow = TableId.of(4);", "modifier": "private", "type": "TableId", "declarator": "maxTableToGetTableMissFlow = TableId.of(4)", "var_name": "maxTableToGetTableMissFlow"}], "methods": [{"identifier": "OFSwitch", "parameters": "(IOFConnectionBackend connection, @Nonnull OFFactory factory, @Nonnull IOFSwitchManager switchManager,\n\t\t\t@Nonnull DatapathId datapathId)", "modifiers": "public", "return": "", "signature": " OFSwitch(IOFConnectionBackend connection, @Nonnull OFFactory factory, @Nonnull IOFSwitchManager switchManager,\n\t\t\t@Nonnull DatapathId datapathId)", "full_signature": "public  OFSwitch(IOFConnectionBackend connection, @Nonnull OFFactory factory, @Nonnull IOFSwitchManager switchManager,\n\t\t\t@Nonnull DatapathId datapathId)", "class_method_signature": "OFSwitch.OFSwitch(IOFConnectionBackend connection, @Nonnull OFFactory factory, @Nonnull IOFSwitchManager switchManager,\n\t\t\t@Nonnull DatapathId datapathId)", "testcase": false, "constructor": true}, {"identifier": "ident", "parameters": "(int i)", "modifiers": "private static", "return": "int", "signature": "int ident(int i)", "full_signature": "private static int ident(int i)", "class_method_signature": "OFSwitch.ident(int i)", "testcase": false, "constructor": false}, {"identifier": "getOFFactory", "parameters": "()", "modifiers": "@Override public", "return": "OFFactory", "signature": "OFFactory getOFFactory()", "full_signature": "@Override public OFFactory getOFFactory()", "class_method_signature": "OFSwitch.getOFFactory()", "testcase": false, "constructor": false}, {"identifier": "attributeEquals", "parameters": "(String name, Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean attributeEquals(String name, Object other)", "full_signature": "@Override public boolean attributeEquals(String name, Object other)", "class_method_signature": "OFSwitch.attributeEquals(String name, Object other)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getAttribute(String name)", "full_signature": "@Override public Object getAttribute(String name)", "class_method_signature": "OFSwitch.getAttribute(String name)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String name, Object value)", "modifiers": "@Override public", "return": "void", "signature": "void setAttribute(String name, Object value)", "full_signature": "@Override public void setAttribute(String name, Object value)", "class_method_signature": "OFSwitch.setAttribute(String name, Object value)", "testcase": false, "constructor": false}, {"identifier": "removeAttribute", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object removeAttribute(String name)", "full_signature": "@Override public Object removeAttribute(String name)", "class_method_signature": "OFSwitch.removeAttribute(String name)", "testcase": false, "constructor": false}, {"identifier": "hasAttribute", "parameters": "(String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasAttribute(String name)", "full_signature": "@Override public boolean hasAttribute(String name)", "class_method_signature": "OFSwitch.hasAttribute(String name)", "testcase": false, "constructor": false}, {"identifier": "registerConnection", "parameters": "(IOFConnectionBackend connection)", "modifiers": "@Override public", "return": "void", "signature": "void registerConnection(IOFConnectionBackend connection)", "full_signature": "@Override public void registerConnection(IOFConnectionBackend connection)", "class_method_signature": "OFSwitch.registerConnection(IOFConnectionBackend connection)", "testcase": false, "constructor": false}, {"identifier": "getConnections", "parameters": "()", "modifiers": "@Override public", "return": "ImmutableList<IOFConnection>", "signature": "ImmutableList<IOFConnection> getConnections()", "full_signature": "@Override public ImmutableList<IOFConnection> getConnections()", "class_method_signature": "OFSwitch.getConnections()", "testcase": false, "constructor": false}, {"identifier": "removeConnections", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void removeConnections()", "full_signature": "@Override public void removeConnections()", "class_method_signature": "OFSwitch.removeConnections()", "testcase": false, "constructor": false}, {"identifier": "removeConnection", "parameters": "(IOFConnectionBackend connection)", "modifiers": "@Override public", "return": "void", "signature": "void removeConnection(IOFConnectionBackend connection)", "full_signature": "@Override public void removeConnection(IOFConnectionBackend connection)", "class_method_signature": "OFSwitch.removeConnection(IOFConnectionBackend connection)", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "(OFAuxId auxId)", "modifiers": "public", "return": "IOFConnection", "signature": "IOFConnection getConnection(OFAuxId auxId)", "full_signature": "public IOFConnection getConnection(OFAuxId auxId)", "class_method_signature": "OFSwitch.getConnection(OFAuxId auxId)", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "(LogicalOFMessageCategory category)", "modifiers": "public", "return": "IOFConnection", "signature": "IOFConnection getConnection(LogicalOFMessageCategory category)", "full_signature": "public IOFConnection getConnection(LogicalOFMessageCategory category)", "class_method_signature": "OFSwitch.getConnection(LogicalOFMessageCategory category)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OFMessage m)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean write(OFMessage m)", "full_signature": "@Override public boolean write(OFMessage m)", "class_method_signature": "OFSwitch.write(OFMessage m)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Iterable<OFMessage> msglist)", "modifiers": "@Override public", "return": "Collection<OFMessage>", "signature": "Collection<OFMessage> write(Iterable<OFMessage> msglist)", "full_signature": "@Override public Collection<OFMessage> write(Iterable<OFMessage> msglist)", "class_method_signature": "OFSwitch.write(Iterable<OFMessage> msglist)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(OFMessage m, LogicalOFMessageCategory category)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean write(OFMessage m, LogicalOFMessageCategory category)", "full_signature": "@Override public boolean write(OFMessage m, LogicalOFMessageCategory category)", "class_method_signature": "OFSwitch.write(OFMessage m, LogicalOFMessageCategory category)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Iterable<OFMessage> msgList, LogicalOFMessageCategory category)", "modifiers": "@Override public", "return": "Collection<OFMessage>", "signature": "Collection<OFMessage> write(Iterable<OFMessage> msgList, LogicalOFMessageCategory category)", "full_signature": "@Override public Collection<OFMessage> write(Iterable<OFMessage> msgList, LogicalOFMessageCategory category)", "class_method_signature": "OFSwitch.write(Iterable<OFMessage> msgList, LogicalOFMessageCategory category)", "testcase": false, "constructor": false}, {"identifier": "getConnectionByCategory", "parameters": "(LogicalOFMessageCategory category)", "modifiers": "@Override public", "return": "OFConnection", "signature": "OFConnection getConnectionByCategory(LogicalOFMessageCategory category)", "full_signature": "@Override public OFConnection getConnectionByCategory(LogicalOFMessageCategory category)", "class_method_signature": "OFSwitch.getConnectionByCategory(LogicalOFMessageCategory category)", "testcase": false, "constructor": false}, {"identifier": "writeRequest", "parameters": "(OFRequest<R> request, LogicalOFMessageCategory category)", "modifiers": "@Override public", "return": "ListenableFuture<R>", "signature": "ListenableFuture<R> writeRequest(OFRequest<R> request, LogicalOFMessageCategory category)", "full_signature": "@Override public ListenableFuture<R> writeRequest(OFRequest<R> request, LogicalOFMessageCategory category)", "class_method_signature": "OFSwitch.writeRequest(OFRequest<R> request, LogicalOFMessageCategory category)", "testcase": false, "constructor": false}, {"identifier": "writeRequest", "parameters": "(OFRequest<R> request)", "modifiers": "@Override public", "return": "ListenableFuture<R>", "signature": "ListenableFuture<R> writeRequest(OFRequest<R> request)", "full_signature": "@Override public ListenableFuture<R> writeRequest(OFRequest<R> request)", "class_method_signature": "OFSwitch.writeRequest(OFRequest<R> request)", "testcase": false, "constructor": false}, {"identifier": "disconnect", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void disconnect()", "full_signature": "@Override public void disconnect()", "class_method_signature": "OFSwitch.disconnect()", "testcase": false, "constructor": false}, {"identifier": "setFeaturesReply", "parameters": "(OFFeaturesReply featuresReply)", "modifiers": "@Override public", "return": "void", "signature": "void setFeaturesReply(OFFeaturesReply featuresReply)", "full_signature": "@Override public void setFeaturesReply(OFFeaturesReply featuresReply)", "class_method_signature": "OFSwitch.setFeaturesReply(OFFeaturesReply featuresReply)", "testcase": false, "constructor": false}, {"identifier": "setPortDescStats", "parameters": "(OFPortDescStatsReply reply)", "modifiers": "@Override public", "return": "void", "signature": "void setPortDescStats(OFPortDescStatsReply reply)", "full_signature": "@Override public void setPortDescStats(OFPortDescStatsReply reply)", "class_method_signature": "OFSwitch.setPortDescStats(OFPortDescStatsReply reply)", "testcase": false, "constructor": false}, {"identifier": "getEnabledPorts", "parameters": "()", "modifiers": "@Override public", "return": "Collection<OFPortDesc>", "signature": "Collection<OFPortDesc> getEnabledPorts()", "full_signature": "@Override public Collection<OFPortDesc> getEnabledPorts()", "class_method_signature": "OFSwitch.getEnabledPorts()", "testcase": false, "constructor": false}, {"identifier": "getEnabledPortNumbers", "parameters": "()", "modifiers": "@Override public", "return": "Collection<OFPort>", "signature": "Collection<OFPort> getEnabledPortNumbers()", "full_signature": "@Override public Collection<OFPort> getEnabledPortNumbers()", "class_method_signature": "OFSwitch.getEnabledPortNumbers()", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "(OFPort portNumber)", "modifiers": "@Override public", "return": "OFPortDesc", "signature": "OFPortDesc getPort(OFPort portNumber)", "full_signature": "@Override public OFPortDesc getPort(OFPort portNumber)", "class_method_signature": "OFSwitch.getPort(OFPort portNumber)", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "(String portName)", "modifiers": "@Override public", "return": "OFPortDesc", "signature": "OFPortDesc getPort(String portName)", "full_signature": "@Override public OFPortDesc getPort(String portName)", "class_method_signature": "OFSwitch.getPort(String portName)", "testcase": false, "constructor": false}, {"identifier": "processOFPortStatus", "parameters": "(OFPortStatus ps)", "modifiers": "@Override public", "return": "OrderedCollection<PortChangeEvent>", "signature": "OrderedCollection<PortChangeEvent> processOFPortStatus(OFPortStatus ps)", "full_signature": "@Override public OrderedCollection<PortChangeEvent> processOFPortStatus(OFPortStatus ps)", "class_method_signature": "OFSwitch.processOFPortStatus(OFPortStatus ps)", "testcase": false, "constructor": false}, {"identifier": "processOFTableFeatures", "parameters": "(List<OFTableFeaturesStatsReply> replies)", "modifiers": "@Override public", "return": "void", "signature": "void processOFTableFeatures(List<OFTableFeaturesStatsReply> replies)", "full_signature": "@Override public void processOFTableFeatures(List<OFTableFeaturesStatsReply> replies)", "class_method_signature": "OFSwitch.processOFTableFeatures(List<OFTableFeaturesStatsReply> replies)", "testcase": false, "constructor": false}, {"identifier": "getSortedPorts", "parameters": "()", "modifiers": "@Override public", "return": "Collection<OFPortDesc>", "signature": "Collection<OFPortDesc> getSortedPorts()", "full_signature": "@Override public Collection<OFPortDesc> getSortedPorts()", "class_method_signature": "OFSwitch.getSortedPorts()", "testcase": false, "constructor": false}, {"identifier": "getPorts", "parameters": "()", "modifiers": "@Override public", "return": "Collection<OFPortDesc>", "signature": "Collection<OFPortDesc> getPorts()", "full_signature": "@Override public Collection<OFPortDesc> getPorts()", "class_method_signature": "OFSwitch.getPorts()", "testcase": false, "constructor": false}, {"identifier": "comparePorts", "parameters": "(Collection<OFPortDesc> ports)", "modifiers": "@Override public", "return": "OrderedCollection<PortChangeEvent>", "signature": "OrderedCollection<PortChangeEvent> comparePorts(Collection<OFPortDesc> ports)", "full_signature": "@Override public OrderedCollection<PortChangeEvent> comparePorts(Collection<OFPortDesc> ports)", "class_method_signature": "OFSwitch.comparePorts(Collection<OFPortDesc> ports)", "testcase": false, "constructor": false}, {"identifier": "setPorts", "parameters": "(Collection<OFPortDesc> ports)", "modifiers": "@Override public", "return": "OrderedCollection<PortChangeEvent>", "signature": "OrderedCollection<PortChangeEvent> setPorts(Collection<OFPortDesc> ports)", "full_signature": "@Override public OrderedCollection<PortChangeEvent> setPorts(Collection<OFPortDesc> ports)", "class_method_signature": "OFSwitch.setPorts(Collection<OFPortDesc> ports)", "testcase": false, "constructor": false}, {"identifier": "portEnabled", "parameters": "(OFPort portNumber)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean portEnabled(OFPort portNumber)", "full_signature": "@Override public boolean portEnabled(OFPort portNumber)", "class_method_signature": "OFSwitch.portEnabled(OFPort portNumber)", "testcase": false, "constructor": false}, {"identifier": "portEnabled", "parameters": "(String portName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean portEnabled(String portName)", "full_signature": "@Override public boolean portEnabled(String portName)", "class_method_signature": "OFSwitch.portEnabled(String portName)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "@Override public", "return": "DatapathId", "signature": "DatapathId getId()", "full_signature": "@Override public DatapathId getId()", "class_method_signature": "OFSwitch.getId()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "OFSwitch.toString()", "testcase": false, "constructor": false}, {"identifier": "getAttributes", "parameters": "()", "modifiers": "@Override public", "return": "ConcurrentMap<Object, Object>", "signature": "ConcurrentMap<Object, Object> getAttributes()", "full_signature": "@Override public ConcurrentMap<Object, Object> getAttributes()", "class_method_signature": "OFSwitch.getAttributes()", "testcase": false, "constructor": false}, {"identifier": "getConnectedSince", "parameters": "()", "modifiers": "@Override public", "return": "Date", "signature": "Date getConnectedSince()", "full_signature": "@Override public Date getConnectedSince()", "class_method_signature": "OFSwitch.getConnectedSince()", "testcase": false, "constructor": false}, {"identifier": "writeStatsRequest", "parameters": "(OFStatsRequest<REPLY> request)", "modifiers": "@Override public", "return": "ListenableFuture<List<REPLY>>", "signature": "ListenableFuture<List<REPLY>> writeStatsRequest(OFStatsRequest<REPLY> request)", "full_signature": "@Override public ListenableFuture<List<REPLY>> writeStatsRequest(OFStatsRequest<REPLY> request)", "class_method_signature": "OFSwitch.writeStatsRequest(OFStatsRequest<REPLY> request)", "testcase": false, "constructor": false}, {"identifier": "writeStatsRequest", "parameters": "(OFStatsRequest<REPLY> request, LogicalOFMessageCategory category)", "modifiers": "@Override public", "return": "ListenableFuture<List<REPLY>>", "signature": "ListenableFuture<List<REPLY>> writeStatsRequest(OFStatsRequest<REPLY> request, LogicalOFMessageCategory category)", "full_signature": "@Override public ListenableFuture<List<REPLY>> writeStatsRequest(OFStatsRequest<REPLY> request, LogicalOFMessageCategory category)", "class_method_signature": "OFSwitch.writeStatsRequest(OFStatsRequest<REPLY> request, LogicalOFMessageCategory category)", "testcase": false, "constructor": false}, {"identifier": "addInternalStatsReplyListener", "parameters": "(final ListenableFuture<List<REPLY>> future, OFStatsRequest<REPLY> request)", "modifiers": "private", "return": "ListenableFuture<List<REPLY>>", "signature": "ListenableFuture<List<REPLY>> addInternalStatsReplyListener(final ListenableFuture<List<REPLY>> future, OFStatsRequest<REPLY> request)", "full_signature": "private ListenableFuture<List<REPLY>> addInternalStatsReplyListener(final ListenableFuture<List<REPLY>> future, OFStatsRequest<REPLY> request)", "class_method_signature": "OFSwitch.addInternalStatsReplyListener(final ListenableFuture<List<REPLY>> future, OFStatsRequest<REPLY> request)", "testcase": false, "constructor": false}, {"identifier": "cancelAllPendingRequests", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void cancelAllPendingRequests()", "full_signature": "@Override public void cancelAllPendingRequests()", "class_method_signature": "OFSwitch.cancelAllPendingRequests()", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConnected()", "full_signature": "@Override public boolean isConnected()", "class_method_signature": "OFSwitch.isConnected()", "testcase": false, "constructor": false}, {"identifier": "isActive", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isActive()", "full_signature": "@Override public boolean isActive()", "class_method_signature": "OFSwitch.isActive()", "testcase": false, "constructor": false}, {"identifier": "getControllerRole", "parameters": "()", "modifiers": "@Override public", "return": "OFControllerRole", "signature": "OFControllerRole getControllerRole()", "full_signature": "@Override public OFControllerRole getControllerRole()", "class_method_signature": "OFSwitch.getControllerRole()", "testcase": false, "constructor": false}, {"identifier": "setControllerRole", "parameters": "(OFControllerRole role)", "modifiers": "@Override public", "return": "void", "signature": "void setControllerRole(OFControllerRole role)", "full_signature": "@Override public void setControllerRole(OFControllerRole role)", "class_method_signature": "OFSwitch.setControllerRole(OFControllerRole role)", "testcase": false, "constructor": false}, {"identifier": "getInetAddress", "parameters": "()", "modifiers": "@Override public", "return": "SocketAddress", "signature": "SocketAddress getInetAddress()", "full_signature": "@Override public SocketAddress getInetAddress()", "class_method_signature": "OFSwitch.getInetAddress()", "testcase": false, "constructor": false}, {"identifier": "getBuffers", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getBuffers()", "full_signature": "@Override public long getBuffers()", "class_method_signature": "OFSwitch.getBuffers()", "testcase": false, "constructor": false}, {"identifier": "getActions", "parameters": "()", "modifiers": "@Override public", "return": "Set<OFActionType>", "signature": "Set<OFActionType> getActions()", "full_signature": "@Override public Set<OFActionType> getActions()", "class_method_signature": "OFSwitch.getActions()", "testcase": false, "constructor": false}, {"identifier": "getCapabilities", "parameters": "()", "modifiers": "@Override public", "return": "Set<OFCapabilities>", "signature": "Set<OFCapabilities> getCapabilities()", "full_signature": "@Override public Set<OFCapabilities> getCapabilities()", "class_method_signature": "OFSwitch.getCapabilities()", "testcase": false, "constructor": false}, {"identifier": "getTables", "parameters": "()", "modifiers": "@Override public", "return": "Collection<TableId>", "signature": "Collection<TableId> getTables()", "full_signature": "@Override public Collection<TableId> getTables()", "class_method_signature": "OFSwitch.getTables()", "testcase": false, "constructor": false}, {"identifier": "getNumTables", "parameters": "()", "modifiers": "@Override public", "return": "short", "signature": "short getNumTables()", "full_signature": "@Override public short getNumTables()", "class_method_signature": "OFSwitch.getNumTables()", "testcase": false, "constructor": false}, {"identifier": "getSwitchDescription", "parameters": "()", "modifiers": "@Override public", "return": "SwitchDescription", "signature": "SwitchDescription getSwitchDescription()", "full_signature": "@Override public SwitchDescription getSwitchDescription()", "class_method_signature": "OFSwitch.getSwitchDescription()", "testcase": false, "constructor": false}, {"identifier": "setTableFull", "parameters": "(boolean isFull)", "modifiers": "@Override public", "return": "void", "signature": "void setTableFull(boolean isFull)", "full_signature": "@Override public void setTableFull(boolean isFull)", "class_method_signature": "OFSwitch.setTableFull(boolean isFull)", "testcase": false, "constructor": false}, {"identifier": "startDriverHandshake", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startDriverHandshake()", "full_signature": "@Override public void startDriverHandshake()", "class_method_signature": "OFSwitch.startDriverHandshake()", "testcase": false, "constructor": false}, {"identifier": "isDriverHandshakeComplete", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDriverHandshakeComplete()", "full_signature": "@Override public boolean isDriverHandshakeComplete()", "class_method_signature": "OFSwitch.isDriverHandshakeComplete()", "testcase": false, "constructor": false}, {"identifier": "processDriverHandshakeMessage", "parameters": "(OFMessage m)", "modifiers": "@Override public", "return": "void", "signature": "void processDriverHandshakeMessage(OFMessage m)", "full_signature": "@Override public void processDriverHandshakeMessage(OFMessage m)", "class_method_signature": "OFSwitch.processDriverHandshakeMessage(OFMessage m)", "testcase": false, "constructor": false}, {"identifier": "setSwitchProperties", "parameters": "(SwitchDescription description)", "modifiers": "@Override public", "return": "void", "signature": "void setSwitchProperties(SwitchDescription description)", "full_signature": "@Override public void setSwitchProperties(SwitchDescription description)", "class_method_signature": "OFSwitch.setSwitchProperties(SwitchDescription description)", "testcase": false, "constructor": false}, {"identifier": "getStatus", "parameters": "()", "modifiers": "@Override public", "return": "SwitchStatus", "signature": "SwitchStatus getStatus()", "full_signature": "@Override public SwitchStatus getStatus()", "class_method_signature": "OFSwitch.getStatus()", "testcase": false, "constructor": false}, {"identifier": "setStatus", "parameters": "(SwitchStatus switchStatus)", "modifiers": "@Override public", "return": "void", "signature": "void setStatus(SwitchStatus switchStatus)", "full_signature": "@Override public void setStatus(SwitchStatus switchStatus)", "class_method_signature": "OFSwitch.setStatus(SwitchStatus switchStatus)", "testcase": false, "constructor": false}, {"identifier": "updateControllerConnections", "parameters": "(OFBsnControllerConnectionsReply controllerCxnsReply)", "modifiers": "@Override public", "return": "void", "signature": "void updateControllerConnections(OFBsnControllerConnectionsReply controllerCxnsReply)", "full_signature": "@Override public void updateControllerConnections(OFBsnControllerConnectionsReply controllerCxnsReply)", "class_method_signature": "OFSwitch.updateControllerConnections(OFBsnControllerConnectionsReply controllerCxnsReply)", "testcase": false, "constructor": false}, {"identifier": "hasAnotherMaster", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasAnotherMaster()", "full_signature": "@Override public boolean hasAnotherMaster()", "class_method_signature": "OFSwitch.hasAnotherMaster()", "testcase": false, "constructor": false}, {"identifier": "getTableFeatures", "parameters": "(TableId table)", "modifiers": "@Override public", "return": "TableFeatures", "signature": "TableFeatures getTableFeatures(TableId table)", "full_signature": "@Override public TableFeatures getTableFeatures(TableId table)", "class_method_signature": "OFSwitch.getTableFeatures(TableId table)", "testcase": false, "constructor": false}, {"identifier": "getMaxTableForTableMissFlow", "parameters": "()", "modifiers": "@Override public", "return": "TableId", "signature": "TableId getMaxTableForTableMissFlow()", "full_signature": "@Override public TableId getMaxTableForTableMissFlow()", "class_method_signature": "OFSwitch.getMaxTableForTableMissFlow()", "testcase": false, "constructor": false}, {"identifier": "setMaxTableForTableMissFlow", "parameters": "(TableId max)", "modifiers": "@Override public", "return": "TableId", "signature": "TableId setMaxTableForTableMissFlow(TableId max)", "full_signature": "@Override public TableId setMaxTableForTableMissFlow(TableId max)", "class_method_signature": "OFSwitch.setMaxTableForTableMissFlow(TableId max)", "testcase": false, "constructor": false}, {"identifier": "getLatency", "parameters": "()", "modifiers": "@Override public", "return": "U64", "signature": "U64 getLatency()", "full_signature": "@Override public U64 getLatency()", "class_method_signature": "OFSwitch.getLatency()", "testcase": false, "constructor": false}], "file": "src/agents/apps/floodlight/floodlight-1.2/src/main/java/net/floodlightcontroller/core/internal/OFSwitch.java"}, "focal_method": {"identifier": "hasAnotherMaster", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean hasAnotherMaster() {\n\n\t\t//TODO: refactor get connection to not throw illegal arg exceptions\n\t\tIOFConnection mainCxn = this.getConnection(OFAuxId.MAIN);\n\n\t\tif(mainCxn != null) {\n\n\t\t\t// Determine the local URI\n\t\t\tInetSocketAddress address = (InetSocketAddress) mainCxn.getLocalInetAddress();\n\t\t\tURI localURI = URIUtil.createURI(address.getHostName(), address.getPort());\n\n\t\t\tfor(Entry<URI,Map<OFAuxId, OFBsnControllerConnection>> entry : this.controllerConnections.entrySet()) {\n\n\t\t\t\t// Don't check our own controller connections\n\t\t\t\tURI uri = entry.getKey();\n\t\t\t\tif(!localURI.equals(uri)){\n\n\t\t\t\t\t// We only care for the MAIN connection\n\t\t\t\t\tMap<OFAuxId, OFBsnControllerConnection> cxns = this.controllerConnections.get(uri);\n\t\t\t\t\tOFBsnControllerConnection controllerCxn = cxns.get(OFAuxId.MAIN);\n\n\t\t\t\t\tif(controllerCxn != null) {\n\t\t\t\t\t\t// If the controller id disconnected or not master we know it is not connected\n\t\t\t\t\t\tif(controllerCxn.getState() == OFBsnControllerConnectionState.BSN_CONTROLLER_CONNECTION_STATE_CONNECTED\n\t\t\t\t\t\t\t\t&& controllerCxn.getRole() == OFControllerRole.ROLE_MASTER){\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlog.warn(\"Unable to find controller connection with aux id \"\n\t\t\t\t\t\t\t\t+ \"MAIN for switch {} on controller with URI {}.\",\n\t\t\t\t\t\t\t\tthis, uri);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "signature": "boolean hasAnotherMaster()", "full_signature": "@Override public boolean hasAnotherMaster()", "class_method_signature": "OFSwitch.hasAnotherMaster()", "testcase": false, "constructor": false, "invocations": ["getConnection", "getLocalInetAddress", "createURI", "getHostName", "getPort", "entrySet", "getKey", "equals", "get", "get", "getState", "getRole", "warn"]}, "repository": {"repo_id": 181421086, "url": "https://github.com/seungsoo-lee/DELTA", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 99244, "license": "licensed"}}