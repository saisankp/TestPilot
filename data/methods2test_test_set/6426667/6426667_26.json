{"test_class": {"identifier": "LibrarySourceLocatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final LibrarySourceLocator locator = new LibrarySourceLocator();", "modifier": "private final", "type": "LibrarySourceLocator", "declarator": "locator = new LibrarySourceLocator()", "var_name": "locator"}], "file": "jumi-actors-generator/src/test/java/fi/jumi/actors/generator/ast/LibrarySourceLocatorTest.java"}, "test_case": {"identifier": "cannot_find_sources_of_unpublished_JDK_classes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void cannot_find_sources_of_unpublished_JDK_classes() {\n        String sources = locator.findSources(sun.misc.Unsafe.class.getName());\n        assertThat(sources, is(nullValue()));\n    }", "signature": "void cannot_find_sources_of_unpublished_JDK_classes()", "full_signature": "@Test public void cannot_find_sources_of_unpublished_JDK_classes()", "class_method_signature": "LibrarySourceLocatorTest.cannot_find_sources_of_unpublished_JDK_classes()", "testcase": true, "constructor": false, "invocations": ["findSources", "getName", "assertThat", "is", "nullValue"]}, "focal_class": {"identifier": "LibrarySourceLocator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File javaHome = new File(System.getProperty(\"java.home\"));", "modifier": "private static final", "type": "File", "declarator": "javaHome = new File(System.getProperty(\"java.home\"))", "var_name": "javaHome"}], "methods": [{"identifier": "findSources", "parameters": "(String className)", "modifiers": "public", "return": "String", "signature": "String findSources(String className)", "full_signature": "public String findSources(String className)", "class_method_signature": "LibrarySourceLocator.findSources(String className)", "testcase": false, "constructor": false}, {"identifier": "findJarContaining", "parameters": "(String className)", "modifiers": "private", "return": "File", "signature": "File findJarContaining(String className)", "full_signature": "private File findJarContaining(String className)", "class_method_signature": "LibrarySourceLocator.findJarContaining(String className)", "testcase": false, "constructor": false}, {"identifier": "findZipFileEntry", "parameters": "(File zipFile, String entryName)", "modifiers": "private", "return": "String", "signature": "String findZipFileEntry(File zipFile, String entryName)", "full_signature": "private String findZipFileEntry(File zipFile, String entryName)", "class_method_signature": "LibrarySourceLocator.findZipFileEntry(File zipFile, String entryName)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(InputStream in)", "modifiers": "private static", "return": "String", "signature": "String toString(InputStream in)", "full_signature": "private static String toString(InputStream in)", "class_method_signature": "LibrarySourceLocator.toString(InputStream in)", "testcase": false, "constructor": false}], "file": "jumi-actors-generator/src/main/java/fi/jumi/actors/generator/ast/LibrarySourceLocator.java"}, "focal_method": {"identifier": "findSources", "parameters": "(String className)", "modifiers": "public", "return": "String", "body": "public String findSources(String className) {\n        String result = null;\n        String sourceFilePath = className.replace('.', '/') + \".java\";\n        try {\n            // TODO: consider using javax.annotation.processing.Filer.getResource and javax.tools.StandardLocation.SOURCE_PATH\n\n            // classpath\n            InputStream in = getClass().getClassLoader().getResourceAsStream(sourceFilePath);\n            if (in != null) {\n                result = toString(in);\n            }\n\n            // JDK\n            if (result == null) {\n                File jdkSourcesFile = new File(javaHome.getParentFile(), \"src.zip\");\n                if (jdkSourcesFile.isFile()) {\n                    result = findZipFileEntry(jdkSourcesFile, sourceFilePath);\n                }\n            }\n\n            // JDK 6 on OS X\n            if (result == null) {\n                File jdkSourcesFile = new File(javaHome, \"src.jar\");\n                if (jdkSourcesFile.isFile()) {\n                    result = findZipFileEntry(jdkSourcesFile, \"src/\" + sourceFilePath);\n                }\n            }\n\n            // local Maven repository\n            if (result == null) {\n                File classesJar = findJarContaining(className);\n                if (classesJar != null) {\n                    File sourcesJar = new File(classesJar.getPath().replaceAll(\"\\\\.jar$\", \"-sources.jar\"));\n                    if (sourcesJar.isFile()) {\n                        result = findZipFileEntry(sourcesJar, sourceFilePath);\n                    }\n                }\n            }\n        } catch (IOException e) {\n            System.err.println(\"Error: failed to read sources of \" + className);\n            e.printStackTrace();\n        }\n        return result;\n    }", "signature": "String findSources(String className)", "full_signature": "public String findSources(String className)", "class_method_signature": "LibrarySourceLocator.findSources(String className)", "testcase": false, "constructor": false, "invocations": ["replace", "getResourceAsStream", "getClassLoader", "getClass", "toString", "getParentFile", "isFile", "findZipFileEntry", "isFile", "findZipFileEntry", "findJarContaining", "replaceAll", "getPath", "isFile", "findZipFileEntry", "println", "printStackTrace"]}, "repository": {"repo_id": 6426667, "url": "https://github.com/luontola/jumi-actors", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 78, "size": 2989, "license": "licensed"}}