{"test_class": {"identifier": "ConfigurationUtilsTest", "superclass": "extends Mockito", "interfaces": "", "fields": [{"original_string": "private IbisContext ibisContext = spy(new IbisContext());", "modifier": "private", "type": "IbisContext", "declarator": "ibisContext = spy(new IbisContext())", "var_name": "ibisContext"}, {"original_string": "private PreparedStatementMock stmt;", "modifier": "private", "type": "PreparedStatementMock", "declarator": "stmt", "var_name": "stmt"}], "file": "core/src/test/java/nl/nn/adapterframework/configuration/ConfigurationUtilsTest.java"}, "test_case": {"identifier": "processMultiConfigZipFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void processMultiConfigZipFile() throws Exception {\n\t\tmockDatabase();\n\n\t\tURL zip = ConfigurationUtilsTest.class.getResource(\"/ConfigurationUtils/multiConfig.zip\");\n\t\tassertNotNull(\"multiConfig.zip not found\", zip);\n\n\t\tConfigurationUtils.ADDITIONAL_PROPERTIES_FILE_SUFFIX = \"\";\n\t\tString result = ConfigurationUtils.processMultiConfigZipFile(ibisContext, \"fakeDataSource\", false, false, zip.openStream(), \"user\");\n\t\tassertNotNull(\"file uploaded to mock database\", result);\n\t\tassertEquals(\"buildInfoZip.jar:true\", result.trim());\n\n\t\tMap<String, Object> parameters = stmt.getNamedParameters();\n\t\tassertEquals(\"buildInfo name does not match\", \"ConfigurationName\", parameters.get(\"NAME\"));\n\t\tassertEquals(\"buildInfo version does not match\", \"001_20191002-1300\", parameters.get(\"VERSION\"));\n\n\t\t//Make sure ACTIVECONFIG, AUTORELOAD and RUSER are passed through properly\n\t\tassertEquals(\"ACTIVECONFIG does not match\", \"FALSE\", parameters.get(\"ACTIVECONFIG\"));\n\t\tassertEquals(\"AUTORELOAD does not match\", \"FALSE\", parameters.get(\"AUTORELOAD\"));\n\t\tassertEquals(\"RUSER does not match\", \"user\", parameters.get(\"RUSER\"));\n\n\t\t//This field is pretty obsolete, check if it's been set\n\t\tassertNotNull(\"FILENAME not set\", parameters.get(\"FILENAME\"));\n\t}", "signature": "void processMultiConfigZipFile()", "full_signature": "@Test public void processMultiConfigZipFile()", "class_method_signature": "ConfigurationUtilsTest.processMultiConfigZipFile()", "testcase": true, "constructor": false, "invocations": ["mockDatabase", "getResource", "assertNotNull", "processMultiConfigZipFile", "openStream", "assertNotNull", "assertEquals", "trim", "getNamedParameters", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertNotNull", "get"]}, "focal_class": {"identifier": "ConfigurationUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger log = LogUtil.getLogger(ConfigurationUtils.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LogUtil.getLogger(ConfigurationUtils.class)", "var_name": "log"}, {"original_string": "private static final String STUB4TESTTOOL_CONFIGURATION_KEY = \"stub4testtool.configuration\";", "modifier": "private static final", "type": "String", "declarator": "STUB4TESTTOOL_CONFIGURATION_KEY = \"stub4testtool.configuration\"", "var_name": "STUB4TESTTOOL_CONFIGURATION_KEY"}, {"original_string": "private static final String STUB4TESTTOOL_VALIDATORS_DISABLED_KEY = \"validators.disabled\";", "modifier": "private static final", "type": "String", "declarator": "STUB4TESTTOOL_VALIDATORS_DISABLED_KEY = \"validators.disabled\"", "var_name": "STUB4TESTTOOL_VALIDATORS_DISABLED_KEY"}, {"original_string": "private static final String STUB4TESTTOOL_XSLT = \"/xml/xsl/stub4testtool.xsl\";", "modifier": "private static final", "type": "String", "declarator": "STUB4TESTTOOL_XSLT = \"/xml/xsl/stub4testtool.xsl\"", "var_name": "STUB4TESTTOOL_XSLT"}, {"original_string": "private static final String ACTIVE_XSLT = \"/xml/xsl/active.xsl\";", "modifier": "private static final", "type": "String", "declarator": "ACTIVE_XSLT = \"/xml/xsl/active.xsl\"", "var_name": "ACTIVE_XSLT"}, {"original_string": "private static final String CANONICALIZE_XSLT = \"/xml/xsl/canonicalize.xsl\";", "modifier": "private static final", "type": "String", "declarator": "CANONICALIZE_XSLT = \"/xml/xsl/canonicalize.xsl\"", "var_name": "CANONICALIZE_XSLT"}, {"original_string": "private static final AppConstants APP_CONSTANTS = AppConstants.getInstance();", "modifier": "private static final", "type": "AppConstants", "declarator": "APP_CONSTANTS = AppConstants.getInstance()", "var_name": "APP_CONSTANTS"}, {"original_string": "private static final boolean CONFIG_AUTO_DB_CLASSLOADER = APP_CONSTANTS.getBoolean(\"configurations.autoDatabaseClassLoader\", false);", "modifier": "private static final", "type": "boolean", "declarator": "CONFIG_AUTO_DB_CLASSLOADER = APP_CONSTANTS.getBoolean(\"configurations.autoDatabaseClassLoader\", false)", "var_name": "CONFIG_AUTO_DB_CLASSLOADER"}, {"original_string": "private static final boolean CONFIG_AUTO_FS_CLASSLOADER = APP_CONSTANTS.getBoolean(\"configurations.directory.autoLoad\", false);", "modifier": "private static final", "type": "boolean", "declarator": "CONFIG_AUTO_FS_CLASSLOADER = APP_CONSTANTS.getBoolean(\"configurations.directory.autoLoad\", false)", "var_name": "CONFIG_AUTO_FS_CLASSLOADER"}, {"original_string": "private static final String CONFIGURATIONS = APP_CONSTANTS.getResolvedProperty(\"configurations.names.application\");", "modifier": "private static final", "type": "String", "declarator": "CONFIGURATIONS = APP_CONSTANTS.getResolvedProperty(\"configurations.names.application\")", "var_name": "CONFIGURATIONS"}, {"original_string": "public static String ADDITIONAL_PROPERTIES_FILE_SUFFIX = APP_CONSTANTS.getString(\"ADDITIONAL.PROPERTIES.FILE.SUFFIX\", null);", "modifier": "public static", "type": "String", "declarator": "ADDITIONAL_PROPERTIES_FILE_SUFFIX = APP_CONSTANTS.getString(\"ADDITIONAL.PROPERTIES.FILE.SUFFIX\", null)", "var_name": "ADDITIONAL_PROPERTIES_FILE_SUFFIX"}, {"original_string": "public static final String DEFAULT_CONFIGURATION_FILE = \"Configuration.xml\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_CONFIGURATION_FILE = \"Configuration.xml\"", "var_name": "DEFAULT_CONFIGURATION_FILE"}], "methods": [{"identifier": "isConfigurationStubbed", "parameters": "(ClassLoader classLoader)", "modifiers": "public static", "return": "boolean", "signature": "boolean isConfigurationStubbed(ClassLoader classLoader)", "full_signature": "public static boolean isConfigurationStubbed(ClassLoader classLoader)", "class_method_signature": "ConfigurationUtils.isConfigurationStubbed(ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "getStubbedConfiguration", "parameters": "(Configuration configuration, String originalConfig)", "modifiers": "public static", "return": "String", "signature": "String getStubbedConfiguration(Configuration configuration, String originalConfig)", "full_signature": "public static String getStubbedConfiguration(Configuration configuration, String originalConfig)", "class_method_signature": "ConfigurationUtils.getStubbedConfiguration(Configuration configuration, String originalConfig)", "testcase": false, "constructor": false}, {"identifier": "getActivatedConfiguration", "parameters": "(Configuration configuration, String originalConfig)", "modifiers": "public static", "return": "String", "signature": "String getActivatedConfiguration(Configuration configuration, String originalConfig)", "full_signature": "public static String getActivatedConfiguration(Configuration configuration, String originalConfig)", "class_method_signature": "ConfigurationUtils.getActivatedConfiguration(Configuration configuration, String originalConfig)", "testcase": false, "constructor": false}, {"identifier": "getCanonicalizedConfiguration", "parameters": "(Configuration configuration, String originalConfig)", "modifiers": "public static", "return": "String", "signature": "String getCanonicalizedConfiguration(Configuration configuration, String originalConfig)", "full_signature": "public static String getCanonicalizedConfiguration(Configuration configuration, String originalConfig)", "class_method_signature": "ConfigurationUtils.getCanonicalizedConfiguration(Configuration configuration, String originalConfig)", "testcase": false, "constructor": false}, {"identifier": "transformConfiguration", "parameters": "(Configuration configuration, String originalConfig, String xslt, Map<String, Object> parameters)", "modifiers": "public static", "return": "String", "signature": "String transformConfiguration(Configuration configuration, String originalConfig, String xslt, Map<String, Object> parameters)", "full_signature": "public static String transformConfiguration(Configuration configuration, String originalConfig, String xslt, Map<String, Object> parameters)", "class_method_signature": "ConfigurationUtils.transformConfiguration(Configuration configuration, String originalConfig, String xslt, Map<String, Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "getConfigurationFile", "parameters": "(ClassLoader classLoader, String currentConfigurationName)", "modifiers": "public static", "return": "String", "signature": "String getConfigurationFile(ClassLoader classLoader, String currentConfigurationName)", "full_signature": "public static String getConfigurationFile(ClassLoader classLoader, String currentConfigurationName)", "class_method_signature": "ConfigurationUtils.getConfigurationFile(ClassLoader classLoader, String currentConfigurationName)", "testcase": false, "constructor": false}, {"identifier": "getConfigurationVersion", "parameters": "(ClassLoader classLoader)", "modifiers": "public static", "return": "String", "signature": "String getConfigurationVersion(ClassLoader classLoader)", "full_signature": "public static String getConfigurationVersion(ClassLoader classLoader)", "class_method_signature": "ConfigurationUtils.getConfigurationVersion(ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "getConfigurationVersion", "parameters": "(Properties properties)", "modifiers": "private static", "return": "String", "signature": "String getConfigurationVersion(Properties properties)", "full_signature": "private static String getConfigurationVersion(Properties properties)", "class_method_signature": "ConfigurationUtils.getConfigurationVersion(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "getApplicationVersion", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getApplicationVersion()", "full_signature": "public static String getApplicationVersion()", "class_method_signature": "ConfigurationUtils.getApplicationVersion()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "(Properties properties, String versionKey, String timestampKey)", "modifiers": "private static", "return": "String", "signature": "String getVersion(Properties properties, String versionKey, String timestampKey)", "full_signature": "private static String getVersion(Properties properties, String versionKey, String timestampKey)", "class_method_signature": "ConfigurationUtils.getVersion(Properties properties, String versionKey, String timestampKey)", "testcase": false, "constructor": false}, {"identifier": "getConfigFromDatabase", "parameters": "(IbisContext ibisContext, String name)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> getConfigFromDatabase(IbisContext ibisContext, String name)", "full_signature": "public static Map<String, Object> getConfigFromDatabase(IbisContext ibisContext, String name)", "class_method_signature": "ConfigurationUtils.getConfigFromDatabase(IbisContext ibisContext, String name)", "testcase": false, "constructor": false}, {"identifier": "getConfigFromDatabase", "parameters": "(IbisContext ibisContext, String name, String jmsRealm)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> getConfigFromDatabase(IbisContext ibisContext, String name, String jmsRealm)", "full_signature": "public static Map<String, Object> getConfigFromDatabase(IbisContext ibisContext, String name, String jmsRealm)", "class_method_signature": "ConfigurationUtils.getConfigFromDatabase(IbisContext ibisContext, String name, String jmsRealm)", "testcase": false, "constructor": false}, {"identifier": "getConfigFromDatabase", "parameters": "(IbisContext ibisContext, String name, String jmsRealm, String version)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> getConfigFromDatabase(IbisContext ibisContext, String name, String jmsRealm, String version)", "full_signature": "public static Map<String, Object> getConfigFromDatabase(IbisContext ibisContext, String name, String jmsRealm, String version)", "class_method_signature": "ConfigurationUtils.getConfigFromDatabase(IbisContext ibisContext, String name, String jmsRealm, String version)", "testcase": false, "constructor": false}, {"identifier": "addConfigToDatabase", "parameters": "(IbisContext ibisContext, String datasource, boolean activate_config, boolean automatic_reload, String fileName, InputStream file, String ruser)", "modifiers": "public static", "return": "boolean", "signature": "boolean addConfigToDatabase(IbisContext ibisContext, String datasource, boolean activate_config, boolean automatic_reload, String fileName, InputStream file, String ruser)", "full_signature": "public static boolean addConfigToDatabase(IbisContext ibisContext, String datasource, boolean activate_config, boolean automatic_reload, String fileName, InputStream file, String ruser)", "class_method_signature": "ConfigurationUtils.addConfigToDatabase(IbisContext ibisContext, String datasource, boolean activate_config, boolean automatic_reload, String fileName, InputStream file, String ruser)", "testcase": false, "constructor": false}, {"identifier": "processMultiConfigZipFile", "parameters": "(IbisContext ibisContext, String datasource, boolean activate_config, boolean automatic_reload, InputStream file, String ruser)", "modifiers": "public static", "return": "String", "signature": "String processMultiConfigZipFile(IbisContext ibisContext, String datasource, boolean activate_config, boolean automatic_reload, InputStream file, String ruser)", "full_signature": "public static String processMultiConfigZipFile(IbisContext ibisContext, String datasource, boolean activate_config, boolean automatic_reload, InputStream file, String ruser)", "class_method_signature": "ConfigurationUtils.processMultiConfigZipFile(IbisContext ibisContext, String datasource, boolean activate_config, boolean automatic_reload, InputStream file, String ruser)", "testcase": false, "constructor": false}, {"identifier": "addConfigToDatabase", "parameters": "(IbisContext ibisContext, String datasource, boolean activate_config, boolean automatic_reload, String name, String version, String fileName, InputStream file, String ruser)", "modifiers": "public static", "return": "boolean", "signature": "boolean addConfigToDatabase(IbisContext ibisContext, String datasource, boolean activate_config, boolean automatic_reload, String name, String version, String fileName, InputStream file, String ruser)", "full_signature": "public static boolean addConfigToDatabase(IbisContext ibisContext, String datasource, boolean activate_config, boolean automatic_reload, String name, String version, String fileName, InputStream file, String ruser)", "class_method_signature": "ConfigurationUtils.addConfigToDatabase(IbisContext ibisContext, String datasource, boolean activate_config, boolean automatic_reload, String name, String version, String fileName, InputStream file, String ruser)", "testcase": false, "constructor": false}, {"identifier": "removeConfigFromDatabase", "parameters": "(IbisContext ibisContext, String name, String jmsRealm, String version)", "modifiers": "public static", "return": "void", "signature": "void removeConfigFromDatabase(IbisContext ibisContext, String name, String jmsRealm, String version)", "full_signature": "public static void removeConfigFromDatabase(IbisContext ibisContext, String name, String jmsRealm, String version)", "class_method_signature": "ConfigurationUtils.removeConfigFromDatabase(IbisContext ibisContext, String name, String jmsRealm, String version)", "testcase": false, "constructor": false}, {"identifier": "activateConfig", "parameters": "(IbisContext ibisContext, String name, String version, boolean value, String jmsRealm)", "modifiers": "public static", "return": "boolean", "signature": "boolean activateConfig(IbisContext ibisContext, String name, String version, boolean value, String jmsRealm)", "full_signature": "public static boolean activateConfig(IbisContext ibisContext, String name, String version, boolean value, String jmsRealm)", "class_method_signature": "ConfigurationUtils.activateConfig(IbisContext ibisContext, String name, String version, boolean value, String jmsRealm)", "testcase": false, "constructor": false}, {"identifier": "autoReloadConfig", "parameters": "(IbisContext ibisContext, String name, String version, boolean booleanValue, String jmsRealm)", "modifiers": "public static", "return": "boolean", "signature": "boolean autoReloadConfig(IbisContext ibisContext, String name, String version, boolean booleanValue, String jmsRealm)", "full_signature": "public static boolean autoReloadConfig(IbisContext ibisContext, String name, String version, boolean booleanValue, String jmsRealm)", "class_method_signature": "ConfigurationUtils.autoReloadConfig(IbisContext ibisContext, String name, String version, boolean booleanValue, String jmsRealm)", "testcase": false, "constructor": false}, {"identifier": "retrieveAllConfigNames", "parameters": "(IbisContext ibisContext)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> retrieveAllConfigNames(IbisContext ibisContext)", "full_signature": "public static Map<String, String> retrieveAllConfigNames(IbisContext ibisContext)", "class_method_signature": "ConfigurationUtils.retrieveAllConfigNames(IbisContext ibisContext)", "testcase": false, "constructor": false}, {"identifier": "retrieveConfigNamesFromDatabase", "parameters": "(IbisContext ibisContext, String jmsRealm)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> retrieveConfigNamesFromDatabase(IbisContext ibisContext, String jmsRealm)", "full_signature": "public static List<String> retrieveConfigNamesFromDatabase(IbisContext ibisContext, String jmsRealm)", "class_method_signature": "ConfigurationUtils.retrieveConfigNamesFromDatabase(IbisContext ibisContext, String jmsRealm)", "testcase": false, "constructor": false}, {"identifier": "retrieveConfigNamesFromDatabase", "parameters": "(IbisContext ibisContext, String jmsRealm, boolean onlyAutoReload)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> retrieveConfigNamesFromDatabase(IbisContext ibisContext, String jmsRealm, boolean onlyAutoReload)", "full_signature": "public static List<String> retrieveConfigNamesFromDatabase(IbisContext ibisContext, String jmsRealm, boolean onlyAutoReload)", "class_method_signature": "ConfigurationUtils.retrieveConfigNamesFromDatabase(IbisContext ibisContext, String jmsRealm, boolean onlyAutoReload)", "testcase": false, "constructor": false}, {"identifier": "retrieveBuildInfo", "parameters": "(InputStream inputStream)", "modifiers": "@Deprecated public static", "return": "String[]", "signature": "String[] retrieveBuildInfo(InputStream inputStream)", "full_signature": "@Deprecated public static String[] retrieveBuildInfo(InputStream inputStream)", "class_method_signature": "ConfigurationUtils.retrieveBuildInfo(InputStream inputStream)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/configuration/ConfigurationUtils.java"}, "focal_method": {"identifier": "processMultiConfigZipFile", "parameters": "(IbisContext ibisContext, String datasource, boolean activate_config, boolean automatic_reload, InputStream file, String ruser)", "modifiers": "public static", "return": "String", "body": "public static String processMultiConfigZipFile(IbisContext ibisContext, String datasource, boolean activate_config, boolean automatic_reload, InputStream file, String ruser) throws IOException, ConfigurationException {\n\t\tString result = \"\";\n\t\tif (file.available() > 0) {\n\t\t\ttry (ZipInputStream zipInputStream = new ZipInputStream(file)) {\n\t\t\t\tint counter = 1;\n\t\t\t\tZipEntry zipEntry;\n\t\t\t\twhile ((zipEntry = zipInputStream.getNextEntry()) != null) {\n\t\t\t\t\tString entryName = zipEntry.getName();\n\n\t\t\t\t\tString fileName = \"file_zipentry\" + counter;\n\t\t\t\t\tif (StringUtils.isNotEmpty(result)) {\n\t\t\t\t\t\tresult += \"\\n\";\n\t\t\t\t\t}\n\n\t\t\t\t\tresult += entryName + \":\" + \n\t\t\t\t\tConfigurationUtils.addConfigToDatabase(ibisContext, datasource, activate_config, automatic_reload, fileName, zipInputStream, ruser);\n\t\n\t\t\t\t\tcounter++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "signature": "String processMultiConfigZipFile(IbisContext ibisContext, String datasource, boolean activate_config, boolean automatic_reload, InputStream file, String ruser)", "full_signature": "public static String processMultiConfigZipFile(IbisContext ibisContext, String datasource, boolean activate_config, boolean automatic_reload, InputStream file, String ruser)", "class_method_signature": "ConfigurationUtils.processMultiConfigZipFile(IbisContext ibisContext, String datasource, boolean activate_config, boolean automatic_reload, InputStream file, String ruser)", "testcase": false, "constructor": false, "invocations": ["available", "getNextEntry", "getName", "isNotEmpty", "addConfigToDatabase"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}