{"test_class": {"identifier": "DataCleanTest", "superclass": "", "interfaces": "", "fields": [], "file": "storm/storm-benchmark/src/test/java/storm/benchmark/benchmarks/DataCleanTest.java"}, "test_case": {"identifier": "componentParallelismCouldBeSetThroughConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void componentParallelismCouldBeSetThroughConfig() {\n    StormBenchmark benchmark = new DataClean();\n    Config config = new Config();\n    config.put(DataClean.SPOUT_NUM, 3);\n    config.put(DataClean.VIEW_NUM, 4);\n    config.put(DataClean.FILTER_NUM, 5);\n\n    StormTopology topology = benchmark.getTopology(config);\n    assertThat(topology).isNotNull();\n    TestUtils.verifyParallelism(Utils.getComponentCommon(topology, DataClean.SPOUT_ID), 3);\n    TestUtils.verifyParallelism(Utils.getComponentCommon(topology, DataClean.VIEW_ID), 4);\n    TestUtils.verifyParallelism(Utils.getComponentCommon(topology, DataClean.FILTER_ID), 5);\n  }", "signature": "void componentParallelismCouldBeSetThroughConfig()", "full_signature": "@Test public void componentParallelismCouldBeSetThroughConfig()", "class_method_signature": "DataCleanTest.componentParallelismCouldBeSetThroughConfig()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "getTopology", "isNotNull", "assertThat", "verifyParallelism", "getComponentCommon", "verifyParallelism", "getComponentCommon", "verifyParallelism", "getComponentCommon"]}, "focal_class": {"identifier": "DataClean", "superclass": "extends StormBenchmark", "interfaces": "", "fields": [{"original_string": "public final static String SPOUT_ID = \"spout\";", "modifier": "public final static", "type": "String", "declarator": "SPOUT_ID = \"spout\"", "var_name": "SPOUT_ID"}, {"original_string": "public final static String SPOUT_NUM = \"component.spout_num\";", "modifier": "public final static", "type": "String", "declarator": "SPOUT_NUM = \"component.spout_num\"", "var_name": "SPOUT_NUM"}, {"original_string": "public final static String VIEW_ID = \"view\";", "modifier": "public final static", "type": "String", "declarator": "VIEW_ID = \"view\"", "var_name": "VIEW_ID"}, {"original_string": "public final static String VIEW_NUM = \"component.view_bolt_num\";", "modifier": "public final static", "type": "String", "declarator": "VIEW_NUM = \"component.view_bolt_num\"", "var_name": "VIEW_NUM"}, {"original_string": "public final static String FILTER_ID = \"filter\";", "modifier": "public final static", "type": "String", "declarator": "FILTER_ID = \"filter\"", "var_name": "FILTER_ID"}, {"original_string": "public final static String FILTER_NUM = \"component.filter_bolt_num\";", "modifier": "public final static", "type": "String", "declarator": "FILTER_NUM = \"component.filter_bolt_num\"", "var_name": "FILTER_NUM"}, {"original_string": "public static final int DEFAULT_SPOUT_NUM = 4;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_SPOUT_NUM = 4", "var_name": "DEFAULT_SPOUT_NUM"}, {"original_string": "public static final int DEFAULT_PV_BOLT_NUM = 4;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_PV_BOLT_NUM = 4", "var_name": "DEFAULT_PV_BOLT_NUM"}, {"original_string": "public static final int DEFAULT_FILTER_BOLT_NUM = 4;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_FILTER_BOLT_NUM = 4", "var_name": "DEFAULT_FILTER_BOLT_NUM"}, {"original_string": "private IRichSpout spout;", "modifier": "private", "type": "IRichSpout", "declarator": "spout", "var_name": "spout"}], "methods": [{"identifier": "getTopology", "parameters": "(Config config)", "modifiers": "@Override public", "return": "StormTopology", "signature": "StormTopology getTopology(Config config)", "full_signature": "@Override public StormTopology getTopology(Config config)", "class_method_signature": "DataClean.getTopology(Config config)", "testcase": false, "constructor": false}], "file": "storm/storm-benchmark/src/main/java/storm/benchmark/benchmarks/DataClean.java"}, "focal_method": {"identifier": "getTopology", "parameters": "(Config config)", "modifiers": "@Override public", "return": "StormTopology", "body": "@Override\n  public StormTopology getTopology(Config config) {\n    final int spoutNum = BenchmarkUtils.getInt(config, SPOUT_NUM, DEFAULT_SPOUT_NUM);\n    final int pvBoltNum = BenchmarkUtils.getInt(config, VIEW_NUM, DEFAULT_PV_BOLT_NUM);\n    final int filterBoltNum = BenchmarkUtils.getInt(config, FILTER_NUM, DEFAULT_FILTER_BOLT_NUM);\n    spout = new KafkaSpout(KafkaUtils.getSpoutConfig(\n            config, new SchemeAsMultiScheme(new StringScheme())));\n\n    TopologyBuilder builder = new TopologyBuilder();\n    builder.setSpout(SPOUT_ID, spout, spoutNum);\n    builder.setBolt(VIEW_ID, new PageViewBolt(Item.STATUS, Item.ALL), pvBoltNum)\n            .localOrShuffleGrouping(SPOUT_ID);\n    builder.setBolt(FILTER_ID, new FilterBolt<Integer>(404), filterBoltNum)\n            .fieldsGrouping(VIEW_ID, new Fields(Item.STATUS.toString()));\n    return builder.createTopology();\n  }", "signature": "StormTopology getTopology(Config config)", "full_signature": "@Override public StormTopology getTopology(Config config)", "class_method_signature": "DataClean.getTopology(Config config)", "testcase": false, "constructor": false, "invocations": ["getInt", "getInt", "getInt", "getSpoutConfig", "setSpout", "localOrShuffleGrouping", "setBolt", "fieldsGrouping", "setBolt", "toString", "createTopology"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}