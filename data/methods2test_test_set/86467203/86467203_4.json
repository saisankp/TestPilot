{"test_class": {"identifier": "TopologicalSorterTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/github/swissquote/carnotzet/core/maven/TopologicalSorterTest.java"}, "test_case": {"identifier": "cycle_strict", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void cycle_strict() {\n\t\tNode a = createNode(\"a\", \"1\");\n\t\tNode b = createNode(\"b\", \"1\");\n\t\tNode c = createNode(\"c\", \"1\");\n\t\tNode d = createNode(\"d\", \"1\");\n\t\tNode oc = createOmittedNode(\"c\", \"1\");\n\t\tNode ob = createOmittedNode(\"b\", \"1\");\n\n\t\ta.addChildNode(b);\n\t\ta.addChildNode(c);\n\t\tb.addChildNode(d);\n\t\tc.addChildNode(ob);\n\t\tb.addChildNode(oc);\n\n\t\ttry {\n\t\t\tnew TopologicalSorter().sort(a, true);\n\t\t}\n\t\tcatch (CarnotzetDefinitionException e) {\n\t\t\tAssert.assertTrue(e.getMessage().contains(\"Cycle detected\"));\n\t\t\treturn;\n\t\t}\n\n\t\tfail(\"Expected a CarnotzetDefinitionException to be thrown, but it was not.\");\n\n\t}", "signature": "void cycle_strict()", "full_signature": "@Test public void cycle_strict()", "class_method_signature": "TopologicalSorterTest.cycle_strict()", "testcase": true, "constructor": false, "invocations": ["createNode", "createNode", "createNode", "createNode", "createOmittedNode", "createOmittedNode", "addChildNode", "addChildNode", "addChildNode", "addChildNode", "addChildNode", "sort", "assertTrue", "contains", "getMessage", "fail"]}, "focal_class": {"identifier": "TopologicalSorter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "sort", "parameters": "(Node root, boolean failOnCycles)", "modifiers": "public", "return": "List<Node>", "signature": "List<Node> sort(Node root, boolean failOnCycles)", "full_signature": "public List<Node> sort(Node root, boolean failOnCycles)", "class_method_signature": "TopologicalSorter.sort(Node root, boolean failOnCycles)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/github/swissquote/carnotzet/core/maven/TopologicalSorter.java"}, "focal_method": {"identifier": "sort", "parameters": "(Node root, boolean failOnCycles)", "modifiers": "public", "return": "List<Node>", "body": "public List<Node> sort(Node root, boolean failOnCycles) {\n\t\treturn new Sort(root, failOnCycles).compute();\n\t}", "signature": "List<Node> sort(Node root, boolean failOnCycles)", "full_signature": "public List<Node> sort(Node root, boolean failOnCycles)", "class_method_signature": "TopologicalSorter.sort(Node root, boolean failOnCycles)", "testcase": false, "constructor": false, "invocations": ["compute"]}, "repository": {"repo_id": 86467203, "url": "https://github.com/swissquote/carnotzet", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 36, "size": 803, "license": "licensed"}}