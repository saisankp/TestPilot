{"test_class": {"identifier": "TopicMapPreferencesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String testdataDirectory = \"tmprefs\";", "modifier": "private final static", "type": "String", "declarator": "testdataDirectory = \"tmprefs\"", "var_name": "testdataDirectory"}, {"original_string": "private final static String DEFAULTVALUE = \"____DEFAULT_VALUE____\";", "modifier": "private final static", "type": "String", "declarator": "DEFAULTVALUE = \"____DEFAULT_VALUE____\"", "var_name": "DEFAULTVALUE"}, {"original_string": "private String base;", "modifier": "private", "type": "String", "declarator": "base", "var_name": "base"}, {"original_string": "private String filename;", "modifier": "private", "type": "String", "declarator": "filename", "var_name": "filename"}], "file": "ontopia-tmprefs/src/test/java/net/ontopia/topicmaps/utils/tmprefs/TopicMapPreferencesTest.java"}, "test_case": {"identifier": "testFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFile() throws IOException, BackingStoreException {\n\t\tTestFileUtils.verifyDirectory(base, \"out\");\n\t\tTestFileUtils.verifyDirectory(base, \"ltm\");\n\t\tString in = TestFileUtils.getTestInputFile(testdataDirectory, \"in\", filename);\n\t\tString baseline = TestFileUtils.getTestInputFile(testdataDirectory, \"baseline\", filename + \".cxtm\");\n\t\tFile out = new File(base + File.separator + \"out\" + File.separator + filename + \".cxtm\");\n\t\tFile ltm = new File(base + File.separator + \"ltm\" + File.separator + filename + \".ltm\");\n\t\tTestTMPrefsFactory.setFixedReference(in);\n\t\t\n\t\trunPreferencesMethods();\n\t\t\n\t\tTopicMapReferenceIF reference = TestTMPrefsFactory.getSystemTopicMapReference();\n\t\tTopicMapStoreIF store = reference.createStore(true);\n\t\tTopicMapIF topicmap = store.getTopicMap();\n\t\t\n\t\tnew LTMTopicMapWriter(ltm).write(topicmap);\n\n\t\tnew CanonicalXTMWriter(out).write(topicmap);\n\n\t\t// // compare results\n\t\t// Assert.assertTrue(\"Canonicalizing the test file \" + filename +\n\t\t// \t\" produces \" + out + \" which is different from \" +\n\t\t// \tbaseline, FileUtils.compareFileToResource(out, baseline));\n\n\t\tTestTMPrefsFactory.setFixedReference(null);\n\t\tstore.close();\n\t}", "signature": "void testFile()", "full_signature": "@Test public void testFile()", "class_method_signature": "TopicMapPreferencesTest.testFile()", "testcase": true, "constructor": false, "invocations": ["verifyDirectory", "verifyDirectory", "getTestInputFile", "getTestInputFile", "setFixedReference", "runPreferencesMethods", "getSystemTopicMapReference", "createStore", "getTopicMap", "write", "write", "setFixedReference", "close"]}, "focal_class": {"identifier": "TopicMapPreferences", "superclass": "extends AbstractPreferences", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TopicMapPreferences.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TopicMapPreferences.class)", "var_name": "logger"}, {"original_string": "protected HashMap<String, TopicMapPreferences> children = new HashMap<String, TopicMapPreferences>();", "modifier": "protected", "type": "HashMap<String, TopicMapPreferences>", "declarator": "children = new HashMap<String, TopicMapPreferences>()", "var_name": "children"}, {"original_string": "protected HashMap<String, String> properties = new HashMap<String, String>();", "modifier": "protected", "type": "HashMap<String, String>", "declarator": "properties = new HashMap<String, String>()", "var_name": "properties"}, {"original_string": "protected final TopicMapPreferencesFactory factory;", "modifier": "protected final", "type": "TopicMapPreferencesFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "protected TopicMapReferenceIF topicMapReference;", "modifier": "protected", "type": "TopicMapReferenceIF", "declarator": "topicMapReference", "var_name": "topicMapReference"}, {"original_string": "protected TopicIF topic;", "modifier": "protected", "type": "TopicIF", "declarator": "topic", "var_name": "topic"}, {"original_string": "private final boolean isUserNode;", "modifier": "private final", "type": "boolean", "declarator": "isUserNode", "var_name": "isUserNode"}, {"original_string": "private HashSet<String> propertiesStored   = new HashSet<String>();", "modifier": "private", "type": "HashSet<String>", "declarator": "propertiesStored   = new HashSet<String>()", "var_name": "propertiesStored"}, {"original_string": "private HashSet<String> propertiesAdded    = new HashSet<String>();", "modifier": "private", "type": "HashSet<String>", "declarator": "propertiesAdded    = new HashSet<String>()", "var_name": "propertiesAdded"}, {"original_string": "private HashSet<String> propertiesModified = new HashSet<String>();", "modifier": "private", "type": "HashSet<String>", "declarator": "propertiesModified = new HashSet<String>()", "var_name": "propertiesModified"}, {"original_string": "private HashSet<String> propertiesRemoved  = new HashSet<String>();", "modifier": "private", "type": "HashSet<String>", "declarator": "propertiesRemoved  = new HashSet<String>()", "var_name": "propertiesRemoved"}], "methods": [{"identifier": "handlePropertyStatusChange", "parameters": "(String key, PropertyStatus newStatus)", "modifiers": "private synchronized", "return": "void", "signature": "void handlePropertyStatusChange(String key, PropertyStatus newStatus)", "full_signature": "private synchronized void handlePropertyStatusChange(String key, PropertyStatus newStatus)", "class_method_signature": "TopicMapPreferences.handlePropertyStatusChange(String key, PropertyStatus newStatus)", "testcase": false, "constructor": false}, {"identifier": "createSystemRoot", "parameters": "(TopicMapReferenceIF topicMapReference, TopicMapPreferencesFactory factory)", "modifiers": "public static", "return": "TopicMapPreferences", "signature": "TopicMapPreferences createSystemRoot(TopicMapReferenceIF topicMapReference, TopicMapPreferencesFactory factory)", "full_signature": "public static TopicMapPreferences createSystemRoot(TopicMapReferenceIF topicMapReference, TopicMapPreferencesFactory factory)", "class_method_signature": "TopicMapPreferences.createSystemRoot(TopicMapReferenceIF topicMapReference, TopicMapPreferencesFactory factory)", "testcase": false, "constructor": false}, {"identifier": "createUserRoot", "parameters": "(TopicMapReferenceIF topicMapReference, TopicMapPreferencesFactory factory)", "modifiers": "public static", "return": "TopicMapPreferences", "signature": "TopicMapPreferences createUserRoot(TopicMapReferenceIF topicMapReference, TopicMapPreferencesFactory factory)", "full_signature": "public static TopicMapPreferences createUserRoot(TopicMapReferenceIF topicMapReference, TopicMapPreferencesFactory factory)", "class_method_signature": "TopicMapPreferences.createUserRoot(TopicMapReferenceIF topicMapReference, TopicMapPreferencesFactory factory)", "testcase": false, "constructor": false}, {"identifier": "TopicMapPreferences", "parameters": "(boolean isUserNode, TopicMapReferenceIF topicMapReference, TopicMapPreferencesFactory factory)", "modifiers": "private", "return": "", "signature": " TopicMapPreferences(boolean isUserNode, TopicMapReferenceIF topicMapReference, TopicMapPreferencesFactory factory)", "full_signature": "private  TopicMapPreferences(boolean isUserNode, TopicMapReferenceIF topicMapReference, TopicMapPreferencesFactory factory)", "class_method_signature": "TopicMapPreferences.TopicMapPreferences(boolean isUserNode, TopicMapReferenceIF topicMapReference, TopicMapPreferencesFactory factory)", "testcase": false, "constructor": true}, {"identifier": "TopicMapPreferences", "parameters": "(TopicMapPreferences parent, String name)", "modifiers": "private", "return": "", "signature": " TopicMapPreferences(TopicMapPreferences parent, String name)", "full_signature": "private  TopicMapPreferences(TopicMapPreferences parent, String name)", "class_method_signature": "TopicMapPreferences.TopicMapPreferences(TopicMapPreferences parent, String name)", "testcase": false, "constructor": true}, {"identifier": "isUserNode", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isUserNode()", "full_signature": "@Override public boolean isUserNode()", "class_method_signature": "TopicMapPreferences.isUserNode()", "testcase": false, "constructor": false}, {"identifier": "getSpi", "parameters": "(String key)", "modifiers": "@Override public", "return": "String", "signature": "String getSpi(String key)", "full_signature": "@Override public String getSpi(String key)", "class_method_signature": "TopicMapPreferences.getSpi(String key)", "testcase": false, "constructor": false}, {"identifier": "putSpi", "parameters": "(String key, String value)", "modifiers": "@Override public", "return": "void", "signature": "void putSpi(String key, String value)", "full_signature": "@Override public void putSpi(String key, String value)", "class_method_signature": "TopicMapPreferences.putSpi(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "removeSpi", "parameters": "(String key)", "modifiers": "@Override public", "return": "void", "signature": "void removeSpi(String key)", "full_signature": "@Override public void removeSpi(String key)", "class_method_signature": "TopicMapPreferences.removeSpi(String key)", "testcase": false, "constructor": false}, {"identifier": "childSpi", "parameters": "(String name)", "modifiers": "@Override public", "return": "TopicMapPreferences", "signature": "TopicMapPreferences childSpi(String name)", "full_signature": "@Override public TopicMapPreferences childSpi(String name)", "class_method_signature": "TopicMapPreferences.childSpi(String name)", "testcase": false, "constructor": false}, {"identifier": "removeNodeSpi", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void removeNodeSpi()", "full_signature": "@Override public void removeNodeSpi()", "class_method_signature": "TopicMapPreferences.removeNodeSpi()", "testcase": false, "constructor": false}, {"identifier": "keysSpi", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] keysSpi()", "full_signature": "@Override public String[] keysSpi()", "class_method_signature": "TopicMapPreferences.keysSpi()", "testcase": false, "constructor": false}, {"identifier": "childrenNamesSpi", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] childrenNamesSpi()", "full_signature": "@Override public String[] childrenNamesSpi()", "class_method_signature": "TopicMapPreferences.childrenNamesSpi()", "testcase": false, "constructor": false}, {"identifier": "syncSpi", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void syncSpi()", "full_signature": "@Override public synchronized void syncSpi()", "class_method_signature": "TopicMapPreferences.syncSpi()", "testcase": false, "constructor": false}, {"identifier": "flushSpi", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void flushSpi()", "full_signature": "@Override public synchronized void flushSpi()", "class_method_signature": "TopicMapPreferences.flushSpi()", "testcase": false, "constructor": false}, {"identifier": "createStore", "parameters": "(TopicMapReferenceIF topicMapReference, boolean readonly)", "modifiers": "protected", "return": "TopicMapStoreIF", "signature": "TopicMapStoreIF createStore(TopicMapReferenceIF topicMapReference, boolean readonly)", "full_signature": "protected TopicMapStoreIF createStore(TopicMapReferenceIF topicMapReference, boolean readonly)", "class_method_signature": "TopicMapPreferences.createStore(TopicMapReferenceIF topicMapReference, boolean readonly)", "testcase": false, "constructor": false}, {"identifier": "fetchChildren", "parameters": "(TopicMapIF topicmap, TopicIF topic)", "modifiers": "protected", "return": "Set<TopicIF>", "signature": "Set<TopicIF> fetchChildren(TopicMapIF topicmap, TopicIF topic)", "full_signature": "protected Set<TopicIF> fetchChildren(TopicMapIF topicmap, TopicIF topic)", "class_method_signature": "TopicMapPreferences.fetchChildren(TopicMapIF topicmap, TopicIF topic)", "testcase": false, "constructor": false}, {"identifier": "fetchProperties", "parameters": "(TopicMapIF topicmap)", "modifiers": "protected", "return": "Set<OccurrenceIF>", "signature": "Set<OccurrenceIF> fetchProperties(TopicMapIF topicmap)", "full_signature": "protected Set<OccurrenceIF> fetchProperties(TopicMapIF topicmap)", "class_method_signature": "TopicMapPreferences.fetchProperties(TopicMapIF topicmap)", "testcase": false, "constructor": false}, {"identifier": "fetchPropertyType", "parameters": "(String key, TopicMapIF topicmap)", "modifiers": "protected", "return": "TopicIF", "signature": "TopicIF fetchPropertyType(String key, TopicMapIF topicmap)", "full_signature": "protected TopicIF fetchPropertyType(String key, TopicMapIF topicmap)", "class_method_signature": "TopicMapPreferences.fetchPropertyType(String key, TopicMapIF topicmap)", "testcase": false, "constructor": false}, {"identifier": "fetchTopic", "parameters": "(TopicMapIF topicmap)", "modifiers": "protected", "return": "TopicIF", "signature": "TopicIF fetchTopic(TopicMapIF topicmap)", "full_signature": "protected TopicIF fetchTopic(TopicMapIF topicmap)", "class_method_signature": "TopicMapPreferences.fetchTopic(TopicMapIF topicmap)", "testcase": false, "constructor": false}, {"identifier": "createTopic", "parameters": "(TopicMapIF topicmap)", "modifiers": "protected", "return": "TopicIF", "signature": "TopicIF createTopic(TopicMapIF topicmap)", "full_signature": "protected TopicIF createTopic(TopicMapIF topicmap)", "class_method_signature": "TopicMapPreferences.createTopic(TopicMapIF topicmap)", "testcase": false, "constructor": false}, {"identifier": "removeTopic", "parameters": "(TopicMapIF topicmap, TopicIF topic)", "modifiers": "protected", "return": "void", "signature": "void removeTopic(TopicMapIF topicmap, TopicIF topic)", "full_signature": "protected void removeTopic(TopicMapIF topicmap, TopicIF topic)", "class_method_signature": "TopicMapPreferences.removeTopic(TopicMapIF topicmap, TopicIF topic)", "testcase": false, "constructor": false}, {"identifier": "mergeTopics", "parameters": "(TopicIF targetTopic, TopicIF sourceTopic)", "modifiers": "protected", "return": "void", "signature": "void mergeTopics(TopicIF targetTopic, TopicIF sourceTopic)", "full_signature": "protected void mergeTopics(TopicIF targetTopic, TopicIF sourceTopic)", "class_method_signature": "TopicMapPreferences.mergeTopics(TopicIF targetTopic, TopicIF sourceTopic)", "testcase": false, "constructor": false}, {"identifier": "revitalize", "parameters": "(TopicIF topic, TopicMapIF topicmap)", "modifiers": "protected", "return": "TopicIF", "signature": "TopicIF revitalize(TopicIF topic, TopicMapIF topicmap)", "full_signature": "protected TopicIF revitalize(TopicIF topic, TopicMapIF topicmap)", "class_method_signature": "TopicMapPreferences.revitalize(TopicIF topic, TopicMapIF topicmap)", "testcase": false, "constructor": false}], "file": "ontopia-tmprefs/src/main/java/net/ontopia/topicmaps/utils/tmprefs/TopicMapPreferences.java"}, "focal_method": {"identifier": "createStore", "parameters": "(TopicMapReferenceIF topicMapReference, boolean readonly)", "modifiers": "protected", "return": "TopicMapStoreIF", "body": "protected TopicMapStoreIF createStore(TopicMapReferenceIF topicMapReference, boolean readonly) throws BackingStoreException {\n\t\ttry {\n\t\t\treturn topicMapReference.createStore(readonly);\n\t\t} catch (IOException e) {\n\t\t\tthrow new BackingStoreException(e);\n\t\t}\n\t}", "signature": "TopicMapStoreIF createStore(TopicMapReferenceIF topicMapReference, boolean readonly)", "full_signature": "protected TopicMapStoreIF createStore(TopicMapReferenceIF topicMapReference, boolean readonly)", "class_method_signature": "TopicMapPreferences.createStore(TopicMapReferenceIF topicMapReference, boolean readonly)", "testcase": false, "constructor": false, "invocations": ["createStore"]}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}