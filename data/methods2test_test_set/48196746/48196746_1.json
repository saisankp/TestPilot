{"test_class": {"identifier": "DetektAnalyzerTest", "superclass": "", "interfaces": "", "fields": [], "file": "code-assert/src/test/java/guru/nidi/codeassert/detekt/DetektAnalyzerTest.java"}, "test_case": {"identifier": "analyze", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void analyze() {\n        final DetektResult result = new DetektAnalyzer(AnalyzerConfig.maven(KOTLIN).mainAndTest(), new DetektCollector()\n                .just(In.classes(\"Linker\").ignore(\"MaxLineLength\")))\n                .analyze();\n        assertMatcher(\"\"\n                        + line(Style, \"style\", \"NewLineAtEndOfFile\", \"Linker\", 59, \"Checks whether files end with a line separator.\"),\n                result, hasNoDetektIssues());\n    }", "signature": "void analyze()", "full_signature": "@Test void analyze()", "class_method_signature": "DetektAnalyzerTest.analyze()", "testcase": true, "constructor": false, "invocations": ["analyze", "mainAndTest", "maven", "just", "ignore", "classes", "assertMatcher", "line", "hasNoDetektIssues"]}, "focal_class": {"identifier": "DetektAnalyzer", "superclass": "", "interfaces": "implements Analyzer<List<TypedDetektFinding>>", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DetektAnalyzer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DetektAnalyzer.class)", "var_name": "LOG"}, {"original_string": "private static final List<Severity> SEVERITIES = asList(\n            Style, CodeSmell, Minor, Performance, Maintainability, Warning, Security, Defect);", "modifier": "private static final", "type": "List<Severity>", "declarator": "SEVERITIES = asList(\n            Style, CodeSmell, Minor, Performance, Maintainability, Warning, Security, Defect)", "var_name": "SEVERITIES"}, {"original_string": "private static final Comparator<Severity> SEVERITY_COMPARATOR = Comparator.comparingInt(SEVERITIES::indexOf);", "modifier": "private static final", "type": "Comparator<Severity>", "declarator": "SEVERITY_COMPARATOR = Comparator.comparingInt(SEVERITIES::indexOf)", "var_name": "SEVERITY_COMPARATOR"}, {"original_string": "private static final Comparator<TypedDetektFinding> FINDING_COMPARATOR = Comparator\n            .comparing((TypedDetektFinding f) -> f.severity, SEVERITY_COMPARATOR)\n            .thenComparing(f -> f.type)\n            .thenComparing(f -> f.name);", "modifier": "private static final", "type": "Comparator<TypedDetektFinding>", "declarator": "FINDING_COMPARATOR = Comparator\n            .comparing((TypedDetektFinding f) -> f.severity, SEVERITY_COMPARATOR)\n            .thenComparing(f -> f.type)\n            .thenComparing(f -> f.name)", "var_name": "FINDING_COMPARATOR"}, {"original_string": "private final AnalyzerConfig config;", "modifier": "private final", "type": "AnalyzerConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private final DetektCollector collector;", "modifier": "private final", "type": "DetektCollector", "declarator": "collector", "var_name": "collector"}, {"original_string": "private final Config detektConfig;", "modifier": "private final", "type": "Config", "declarator": "detektConfig", "var_name": "detektConfig"}, {"original_string": "private final List<RuleSetProvider> ruleSetProviders;", "modifier": "private final", "type": "List<RuleSetProvider>", "declarator": "ruleSetProviders", "var_name": "ruleSetProviders"}], "methods": [{"identifier": "DetektAnalyzer", "parameters": "(AnalyzerConfig config, DetektCollector collector)", "modifiers": "public", "return": "", "signature": " DetektAnalyzer(AnalyzerConfig config, DetektCollector collector)", "full_signature": "public  DetektAnalyzer(AnalyzerConfig config, DetektCollector collector)", "class_method_signature": "DetektAnalyzer.DetektAnalyzer(AnalyzerConfig config, DetektCollector collector)", "testcase": false, "constructor": true}, {"identifier": "DetektAnalyzer", "parameters": "(AnalyzerConfig config, DetektCollector collector, Config detektConfig,\n                           List<RuleSetProvider> ruleSetProviders)", "modifiers": "private", "return": "", "signature": " DetektAnalyzer(AnalyzerConfig config, DetektCollector collector, Config detektConfig,\n                           List<RuleSetProvider> ruleSetProviders)", "full_signature": "private  DetektAnalyzer(AnalyzerConfig config, DetektCollector collector, Config detektConfig,\n                           List<RuleSetProvider> ruleSetProviders)", "class_method_signature": "DetektAnalyzer.DetektAnalyzer(AnalyzerConfig config, DetektCollector collector, Config detektConfig,\n                           List<RuleSetProvider> ruleSetProviders)", "testcase": false, "constructor": true}, {"identifier": "withConfig", "parameters": "(Config detektConfig)", "modifiers": "public", "return": "DetektAnalyzer", "signature": "DetektAnalyzer withConfig(Config detektConfig)", "full_signature": "public DetektAnalyzer withConfig(Config detektConfig)", "class_method_signature": "DetektAnalyzer.withConfig(Config detektConfig)", "testcase": false, "constructor": false}, {"identifier": "withRuleSets", "parameters": "(RuleSetProvider... providers)", "modifiers": "public", "return": "DetektAnalyzer", "signature": "DetektAnalyzer withRuleSets(RuleSetProvider... providers)", "full_signature": "public DetektAnalyzer withRuleSets(RuleSetProvider... providers)", "class_method_signature": "DetektAnalyzer.withRuleSets(RuleSetProvider... providers)", "testcase": false, "constructor": false}, {"identifier": "analyze", "parameters": "()", "modifiers": "public", "return": "DetektResult", "signature": "DetektResult analyze()", "full_signature": "public DetektResult analyze()", "class_method_signature": "DetektAnalyzer.analyze()", "testcase": false, "constructor": false}, {"identifier": "calcDetektConfig", "parameters": "()", "modifiers": "private", "return": "Config", "signature": "Config calcDetektConfig()", "full_signature": "private Config calcDetektConfig()", "class_method_signature": "DetektAnalyzer.calcDetektConfig()", "testcase": false, "constructor": false}, {"identifier": "ruleSetProviders", "parameters": "(ProcessingSettings settings)", "modifiers": "private", "return": "List<RuleSetProvider>", "signature": "List<RuleSetProvider> ruleSetProviders(ProcessingSettings settings)", "full_signature": "private List<RuleSetProvider> ruleSetProviders(ProcessingSettings settings)", "class_method_signature": "DetektAnalyzer.ruleSetProviders(ProcessingSettings settings)", "testcase": false, "constructor": false}, {"identifier": "createResult", "parameters": "(File baseDir, Detektion detektion)", "modifiers": "private", "return": "DetektResult", "signature": "DetektResult createResult(File baseDir, Detektion detektion)", "full_signature": "private DetektResult createResult(File baseDir, Detektion detektion)", "class_method_signature": "DetektAnalyzer.createResult(File baseDir, Detektion detektion)", "testcase": false, "constructor": false}], "file": "code-assert/src/main/java/guru/nidi/codeassert/detekt/DetektAnalyzer.java"}, "focal_method": {"identifier": "analyze", "parameters": "()", "modifiers": "public", "return": "DetektResult", "body": "public DetektResult analyze() {\n        final File baseDir = new File(AnalyzerConfig.Path.commonBase(config.getSourcePaths(KOTLIN)).getPath());\n        try {\n            final PrintStream printStream = new PrintStream(new LoggingOutputStream(), true, \"utf-8\");\n            final ProcessingSettings settings = new ProcessingSettings(\n                    singletonList(baseDir.toPath()), calcDetektConfig(), null, false, false, emptyList(), emptyList(),\n                    LanguageVersion.KOTLIN_1_3, JvmTarget.JVM_1_8, Executors.newSingleThreadExecutor(),\n                    printStream, printStream, false, false, emptyList());\n            final DetektFacade df = DetektFacade.Companion.create(settings, ruleSetProviders(settings), emptyList());\n            return createResult(baseDir, df.run());\n        } catch (UnsupportedEncodingException e) {\n            //cannot happen\n            throw new AssertionError(e);\n        }\n    }", "signature": "DetektResult analyze()", "full_signature": "public DetektResult analyze()", "class_method_signature": "DetektAnalyzer.analyze()", "testcase": false, "constructor": false, "invocations": ["getPath", "commonBase", "getSourcePaths", "singletonList", "toPath", "calcDetektConfig", "emptyList", "emptyList", "newSingleThreadExecutor", "emptyList", "create", "ruleSetProviders", "emptyList", "createResult", "run"]}, "repository": {"repo_id": 48196746, "url": "https://github.com/nidi3/code-assert", "stars": 67, "created": "12/17/2015 8:30:58 PM +00:00", "updates": "2019-12-16T11:54:24+00:00", "fork": "False", "license": "licensed"}}