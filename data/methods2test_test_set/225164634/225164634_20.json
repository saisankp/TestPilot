{"test_class": {"identifier": "AttributeBaseDomainServiceTest", "superclass": "extends ServiceTestBootstrap", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private AttributeBaseDomainService attributeBaseDomainService;", "modifier": "@Autowired\n    private", "type": "AttributeBaseDomainService", "declarator": "attributeBaseDomainService", "var_name": "attributeBaseDomainService"}, {"original_string": "@Autowired\n    private BackCategoryDAO backCategoryDAO;", "modifier": "@Autowired\n    private", "type": "BackCategoryDAO", "declarator": "backCategoryDAO", "var_name": "backCategoryDAO"}, {"original_string": "@Autowired\n    private CategoryAttributeDAO categoryAttributeDAO;", "modifier": "@Autowired\n    private", "type": "CategoryAttributeDAO", "declarator": "categoryAttributeDAO", "var_name": "categoryAttributeDAO"}], "file": "ic-product-core-master/ic-category/ic-category-core/src/test/java/com/mallcai/itemcenter/category/service/AttributeBaseDomainServiceTest.java"}, "test_case": {"identifier": "testFindAllByCategoryId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindAllByCategoryId() {\n        Long cid = setupTestFindAllByCategoryId();\n        List<CategoryAttribute> attrs = attributeBaseDomainService.findAllByCategoryId(cid);\n        attrs.stream().map(CategoryAttribute::getAttrValsJson).forEach(System.out::println);\n        assertThat(attrs.stream().map(CategoryAttribute::getAttrKey).collect(Collectors.toList()))\n                .isNotEmpty()\n                .hasSize(5)\n                .containsExactly(\"\u540c\u540d\u5c5e\u6027-2\", \"\u4e09\u7ea7\u7c7b\u76ee\u5c5e\u6027\", \"\u4e8c\u7ea7\u7c7b\u76ee\u5c5e\u6027\", \"\u540c\u540d\u5c5e\u6027\", \"\u4e00\u7ea7\u7c7b\u76ee\u5c5e\u6027\");\n    }", "signature": "void testFindAllByCategoryId()", "full_signature": "@Test public void testFindAllByCategoryId()", "class_method_signature": "AttributeBaseDomainServiceTest.testFindAllByCategoryId()", "testcase": true, "constructor": false, "invocations": ["setupTestFindAllByCategoryId", "findAllByCategoryId", "forEach", "map", "stream", "containsExactly", "hasSize", "isNotEmpty", "assertThat", "collect", "map", "stream", "toList"]}, "focal_class": {"identifier": "AttributeBaseDomainService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CategoryAttributeDAO categoryAttributeDAO;", "modifier": "private final", "type": "CategoryAttributeDAO", "declarator": "categoryAttributeDAO", "var_name": "categoryAttributeDAO"}, {"original_string": "private final BackCategoryDomainReadService backCategoryDomainReadService;", "modifier": "private final", "type": "BackCategoryDomainReadService", "declarator": "backCategoryDomainReadService", "var_name": "backCategoryDomainReadService"}, {"original_string": "@CreateCache(name = \"AttributeBase:categoryAttributes\", expire = Constant.EXPIRE_30M, cacheType = CacheType.REMOTE)\n    private Cache<Long, List<CategoryAttribute>> listCache;", "modifier": "@CreateCache(name = \"AttributeBase:categoryAttributes\", expire = Constant.EXPIRE_30M, cacheType = CacheType.REMOTE)\n    private", "type": "Cache<Long, List<CategoryAttribute>>", "declarator": "listCache", "var_name": "listCache"}], "methods": [{"identifier": "AttributeBaseDomainService", "parameters": "(CategoryAttributeDAO categoryAttributeDAO,\n                                      BackCategoryDomainReadService backCategoryDomainReadService)", "modifiers": "public", "return": "", "signature": " AttributeBaseDomainService(CategoryAttributeDAO categoryAttributeDAO,\n                                      BackCategoryDomainReadService backCategoryDomainReadService)", "full_signature": "public  AttributeBaseDomainService(CategoryAttributeDAO categoryAttributeDAO,\n                                      BackCategoryDomainReadService backCategoryDomainReadService)", "class_method_signature": "AttributeBaseDomainService.AttributeBaseDomainService(CategoryAttributeDAO categoryAttributeDAO,\n                                      BackCategoryDomainReadService backCategoryDomainReadService)", "testcase": false, "constructor": true}, {"identifier": "findAllByCategoryId", "parameters": "(Long categoryId)", "modifiers": "public", "return": "List<CategoryAttribute>", "signature": "List<CategoryAttribute> findAllByCategoryId(Long categoryId)", "full_signature": "public List<CategoryAttribute> findAllByCategoryId(Long categoryId)", "class_method_signature": "AttributeBaseDomainService.findAllByCategoryId(Long categoryId)", "testcase": false, "constructor": false}, {"identifier": "getAttrModelMap", "parameters": "(Long categoryId)", "modifiers": "public", "return": "Map<String, CategoryAttribute>", "signature": "Map<String, CategoryAttribute> getAttrModelMap(Long categoryId)", "full_signature": "public Map<String, CategoryAttribute> getAttrModelMap(Long categoryId)", "class_method_signature": "AttributeBaseDomainService.getAttrModelMap(Long categoryId)", "testcase": false, "constructor": false}, {"identifier": "findByCategoryId", "parameters": "(Long categoryId)", "modifiers": "public", "return": "List<CategoryAttribute>", "signature": "List<CategoryAttribute> findByCategoryId(Long categoryId)", "full_signature": "public List<CategoryAttribute> findByCategoryId(Long categoryId)", "class_method_signature": "AttributeBaseDomainService.findByCategoryId(Long categoryId)", "testcase": false, "constructor": false}, {"identifier": "attrIdentity", "parameters": "(CategoryAttribute attribute)", "modifiers": "private", "return": "String", "signature": "String attrIdentity(CategoryAttribute attribute)", "full_signature": "private String attrIdentity(CategoryAttribute attribute)", "class_method_signature": "AttributeBaseDomainService.attrIdentity(CategoryAttribute attribute)", "testcase": false, "constructor": false}], "file": "ic-product-core-master/ic-category/ic-category-core/src/main/java/com/mallcai/itemcenter/category/service/AttributeBaseDomainService.java"}, "focal_method": {"identifier": "findAllByCategoryId", "parameters": "(Long categoryId)", "modifiers": "public", "return": "List<CategoryAttribute>", "body": "public List<CategoryAttribute> findAllByCategoryId(Long categoryId) {\n        List<Long> ancestorIds = backCategoryDomainReadService.findAncestorIdsOf(categoryId);\n        Map<String, CategoryAttribute> leafCtgAttrMap = getAttrModelMap(categoryId);\n\n        ancestorIds.remove(categoryId);\n        ancestorIds.stream()\n                .sorted(Comparator.reverseOrder())\n                .forEach(cid -> {\n                    List<CategoryAttribute> attributes = findByCategoryId(cid);\n                    for (CategoryAttribute attr : attributes) {\n                        // 1. \u7ee7\u627f\u7236\u7c7b\u5c5e\u6027\n                        // 2. \u5c31\u8fd1\u539f\u5219\n                        leafCtgAttrMap.putIfAbsent(attrIdentity(attr), attr);\n                    }\n                });\n\n        return leafCtgAttrMap.values().stream().\n                sorted(Comparator.comparingLong(CategoryAttribute::getIndex)).\n                collect(Collectors.toList());\n    }", "signature": "List<CategoryAttribute> findAllByCategoryId(Long categoryId)", "full_signature": "public List<CategoryAttribute> findAllByCategoryId(Long categoryId)", "class_method_signature": "AttributeBaseDomainService.findAllByCategoryId(Long categoryId)", "testcase": false, "constructor": false, "invocations": ["findAncestorIdsOf", "getAttrModelMap", "remove", "forEach", "sorted", "stream", "reverseOrder", "findByCategoryId", "putIfAbsent", "attrIdentity", "collect", "sorted", "stream", "values", "comparingLong", "toList"]}, "repository": {"repo_id": 225164634, "url": "https://github.com/dailuobo-code/ic-product", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 883, "license": "licensed"}}