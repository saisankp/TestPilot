{"test_class": {"identifier": "DefaultDiagnosticLoggingAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CORRELATION_ID_KEY = CommonMdcEntryKey.CORRELATION_ID.toString();", "modifier": "private static final", "type": "String", "declarator": "CORRELATION_ID_KEY = CommonMdcEntryKey.CORRELATION_ID.toString()", "var_name": "CORRELATION_ID_KEY"}, {"original_string": "private static final String CONNECTION_ID_KEY = \"connection-id\";", "modifier": "private static final", "type": "String", "declarator": "CONNECTION_ID_KEY = \"connection-id\"", "var_name": "CONNECTION_ID_KEY"}, {"original_string": "private static final String CONNECTION_ID_VALUE = \"my-connection\";", "modifier": "private static final", "type": "String", "declarator": "CONNECTION_ID_VALUE = \"my-connection\"", "var_name": "CONNECTION_ID_VALUE"}, {"original_string": "private static final String LOGGER_NAME = DefaultDiagnosticLoggingAdapterTest.class.getName();", "modifier": "private static final", "type": "String", "declarator": "LOGGER_NAME = DefaultDiagnosticLoggingAdapterTest.class.getName()", "var_name": "LOGGER_NAME"}, {"original_string": "@Rule\n    public final TestName testName = new TestName();", "modifier": "@Rule\n    public final", "type": "TestName", "declarator": "testName = new TestName()", "var_name": "testName"}, {"original_string": "@Rule\n    public final JUnitSoftAssertions softly = new JUnitSoftAssertions();", "modifier": "@Rule\n    public final", "type": "JUnitSoftAssertions", "declarator": "softly = new JUnitSoftAssertions()", "var_name": "softly"}, {"original_string": "@Mock\n    private DiagnosticLoggingAdapter plainLoggingAdapter;", "modifier": "@Mock\n    private", "type": "DiagnosticLoggingAdapter", "declarator": "plainLoggingAdapter", "var_name": "plainLoggingAdapter"}], "file": "services/utils/akka/src/test/java/org/eclipse/ditto/services/utils/akka/logging/DefaultDiagnosticLoggingAdapterTest.java"}, "test_case": {"identifier": "getInstanceWithBlankLoggerName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getInstanceWithBlankLoggerName() {\n        assertThatIllegalArgumentException()\n                .isThrownBy(() -> DefaultDiagnosticLoggingAdapter.of(plainLoggingAdapter, \"\"))\n                .withMessage(\"The argument 'loggerName' must not be empty!\")\n                .withNoCause();\n    }", "signature": "void getInstanceWithBlankLoggerName()", "full_signature": "@Test public void getInstanceWithBlankLoggerName()", "class_method_signature": "DefaultDiagnosticLoggingAdapterTest.getInstanceWithBlankLoggerName()", "testcase": true, "constructor": false, "invocations": ["withNoCause", "withMessage", "isThrownBy", "assertThatIllegalArgumentException", "of"]}, "focal_class": {"identifier": "DefaultDiagnosticLoggingAdapter", "superclass": "extends AbstractDiagnosticLoggingAdapter", "interfaces": "", "fields": [{"original_string": "private final DiagnosticLoggingAdapter loggingAdapter;", "modifier": "private final", "type": "DiagnosticLoggingAdapter", "declarator": "loggingAdapter", "var_name": "loggingAdapter"}, {"original_string": "private final String loggerName;", "modifier": "private final", "type": "String", "declarator": "loggerName", "var_name": "loggerName"}, {"original_string": "private final Map<String, Object> localMdc;", "modifier": "private final", "type": "Map<String, Object>", "declarator": "localMdc", "var_name": "localMdc"}], "methods": [{"identifier": "DefaultDiagnosticLoggingAdapter", "parameters": "(final DiagnosticLoggingAdapter loggingAdapter,\n            final CharSequence loggerName)", "modifiers": "private", "return": "", "signature": " DefaultDiagnosticLoggingAdapter(final DiagnosticLoggingAdapter loggingAdapter,\n            final CharSequence loggerName)", "full_signature": "private  DefaultDiagnosticLoggingAdapter(final DiagnosticLoggingAdapter loggingAdapter,\n            final CharSequence loggerName)", "class_method_signature": "DefaultDiagnosticLoggingAdapter.DefaultDiagnosticLoggingAdapter(final DiagnosticLoggingAdapter loggingAdapter,\n            final CharSequence loggerName)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(final DiagnosticLoggingAdapter loggingAdapter,\n            final CharSequence loggerName)", "modifiers": "public static", "return": "DefaultDiagnosticLoggingAdapter", "signature": "DefaultDiagnosticLoggingAdapter of(final DiagnosticLoggingAdapter loggingAdapter,\n            final CharSequence loggerName)", "full_signature": "public static DefaultDiagnosticLoggingAdapter of(final DiagnosticLoggingAdapter loggingAdapter,\n            final CharSequence loggerName)", "class_method_signature": "DefaultDiagnosticLoggingAdapter.of(final DiagnosticLoggingAdapter loggingAdapter,\n            final CharSequence loggerName)", "testcase": false, "constructor": false}, {"identifier": "isErrorEnabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isErrorEnabled()", "full_signature": "@Override public boolean isErrorEnabled()", "class_method_signature": "DefaultDiagnosticLoggingAdapter.isErrorEnabled()", "testcase": false, "constructor": false}, {"identifier": "isWarningEnabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWarningEnabled()", "full_signature": "@Override public boolean isWarningEnabled()", "class_method_signature": "DefaultDiagnosticLoggingAdapter.isWarningEnabled()", "testcase": false, "constructor": false}, {"identifier": "isInfoEnabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isInfoEnabled()", "full_signature": "@Override public boolean isInfoEnabled()", "class_method_signature": "DefaultDiagnosticLoggingAdapter.isInfoEnabled()", "testcase": false, "constructor": false}, {"identifier": "isDebugEnabled", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDebugEnabled()", "full_signature": "@Override public boolean isDebugEnabled()", "class_method_signature": "DefaultDiagnosticLoggingAdapter.isDebugEnabled()", "testcase": false, "constructor": false}, {"identifier": "notifyError", "parameters": "(final String message)", "modifiers": "@Override public", "return": "void", "signature": "void notifyError(final String message)", "full_signature": "@Override public void notifyError(final String message)", "class_method_signature": "DefaultDiagnosticLoggingAdapter.notifyError(final String message)", "testcase": false, "constructor": false}, {"identifier": "putLocalMdcToActualMdc", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void putLocalMdcToActualMdc()", "full_signature": "private void putLocalMdcToActualMdc()", "class_method_signature": "DefaultDiagnosticLoggingAdapter.putLocalMdcToActualMdc()", "testcase": false, "constructor": false}, {"identifier": "notifyError", "parameters": "(final Throwable cause, final String message)", "modifiers": "@Override public", "return": "void", "signature": "void notifyError(final Throwable cause, final String message)", "full_signature": "@Override public void notifyError(final Throwable cause, final String message)", "class_method_signature": "DefaultDiagnosticLoggingAdapter.notifyError(final Throwable cause, final String message)", "testcase": false, "constructor": false}, {"identifier": "notifyWarning", "parameters": "(final String message)", "modifiers": "@Override public", "return": "void", "signature": "void notifyWarning(final String message)", "full_signature": "@Override public void notifyWarning(final String message)", "class_method_signature": "DefaultDiagnosticLoggingAdapter.notifyWarning(final String message)", "testcase": false, "constructor": false}, {"identifier": "notifyInfo", "parameters": "(final String message)", "modifiers": "@Override public", "return": "void", "signature": "void notifyInfo(final String message)", "full_signature": "@Override public void notifyInfo(final String message)", "class_method_signature": "DefaultDiagnosticLoggingAdapter.notifyInfo(final String message)", "testcase": false, "constructor": false}, {"identifier": "notifyDebug", "parameters": "(final String message)", "modifiers": "@Override public", "return": "void", "signature": "void notifyDebug(final String message)", "full_signature": "@Override public void notifyDebug(final String message)", "class_method_signature": "DefaultDiagnosticLoggingAdapter.notifyDebug(final String message)", "testcase": false, "constructor": false}, {"identifier": "mdc", "parameters": "()", "modifiers": "@Override public", "return": "scala.collection.immutable.Map<String, Object>", "signature": "scala.collection.immutable.Map<String, Object> mdc()", "full_signature": "@Override public scala.collection.immutable.Map<String, Object> mdc()", "class_method_signature": "DefaultDiagnosticLoggingAdapter.mdc()", "testcase": false, "constructor": false}, {"identifier": "mdc", "parameters": "(final scala.collection.immutable.Map<String, Object> mdc)", "modifiers": "@Override public", "return": "void", "signature": "void mdc(final scala.collection.immutable.Map<String, Object> mdc)", "full_signature": "@Override public void mdc(final scala.collection.immutable.Map<String, Object> mdc)", "class_method_signature": "DefaultDiagnosticLoggingAdapter.mdc(final scala.collection.immutable.Map<String, Object> mdc)", "testcase": false, "constructor": false}, {"identifier": "getMDC", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> getMDC()", "full_signature": "@Override public Map<String, Object> getMDC()", "class_method_signature": "DefaultDiagnosticLoggingAdapter.getMDC()", "testcase": false, "constructor": false}, {"identifier": "setMDC", "parameters": "(final Map<String, Object> jMdc)", "modifiers": "@Override public", "return": "void", "signature": "void setMDC(final Map<String, Object> jMdc)", "full_signature": "@Override public void setMDC(final Map<String, Object> jMdc)", "class_method_signature": "DefaultDiagnosticLoggingAdapter.setMDC(final Map<String, Object> jMdc)", "testcase": false, "constructor": false}, {"identifier": "clearMDC", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearMDC()", "full_signature": "@Override public void clearMDC()", "class_method_signature": "DefaultDiagnosticLoggingAdapter.clearMDC()", "testcase": false, "constructor": false}, {"identifier": "putMdcEntry", "parameters": "(final CharSequence key, @Nullable final CharSequence value)", "modifiers": "@Override public", "return": "DefaultDiagnosticLoggingAdapter", "signature": "DefaultDiagnosticLoggingAdapter putMdcEntry(final CharSequence key, @Nullable final CharSequence value)", "full_signature": "@Override public DefaultDiagnosticLoggingAdapter putMdcEntry(final CharSequence key, @Nullable final CharSequence value)", "class_method_signature": "DefaultDiagnosticLoggingAdapter.putMdcEntry(final CharSequence key, @Nullable final CharSequence value)", "testcase": false, "constructor": false}, {"identifier": "validateMdcEntryKey", "parameters": "(final CharSequence key)", "modifiers": "private static", "return": "CharSequence", "signature": "CharSequence validateMdcEntryKey(final CharSequence key)", "full_signature": "private static CharSequence validateMdcEntryKey(final CharSequence key)", "class_method_signature": "DefaultDiagnosticLoggingAdapter.validateMdcEntryKey(final CharSequence key)", "testcase": false, "constructor": false}, {"identifier": "removeMdcEntry", "parameters": "(final CharSequence key)", "modifiers": "@Override public", "return": "DefaultDiagnosticLoggingAdapter", "signature": "DefaultDiagnosticLoggingAdapter removeMdcEntry(final CharSequence key)", "full_signature": "@Override public DefaultDiagnosticLoggingAdapter removeMdcEntry(final CharSequence key)", "class_method_signature": "DefaultDiagnosticLoggingAdapter.removeMdcEntry(final CharSequence key)", "testcase": false, "constructor": false}, {"identifier": "discardMdcEntries", "parameters": "()", "modifiers": "@Override public", "return": "DefaultDiagnosticLoggingAdapter", "signature": "DefaultDiagnosticLoggingAdapter discardMdcEntries()", "full_signature": "@Override public DefaultDiagnosticLoggingAdapter discardMdcEntries()", "class_method_signature": "DefaultDiagnosticLoggingAdapter.discardMdcEntries()", "testcase": false, "constructor": false}, {"identifier": "tryToRemoveLocalMdcFromActualMdc", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void tryToRemoveLocalMdcFromActualMdc()", "full_signature": "private void tryToRemoveLocalMdcFromActualMdc()", "class_method_signature": "DefaultDiagnosticLoggingAdapter.tryToRemoveLocalMdcFromActualMdc()", "testcase": false, "constructor": false}, {"identifier": "removeLocalMdcFromActualMdc", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void removeLocalMdcFromActualMdc()", "full_signature": "private void removeLocalMdcFromActualMdc()", "class_method_signature": "DefaultDiagnosticLoggingAdapter.removeLocalMdcFromActualMdc()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "DefaultDiagnosticLoggingAdapter.getName()", "testcase": false, "constructor": false}], "file": "services/utils/akka/src/main/java/org/eclipse/ditto/services/utils/akka/logging/DefaultDiagnosticLoggingAdapter.java"}, "focal_method": {"identifier": "of", "parameters": "(final DiagnosticLoggingAdapter loggingAdapter,\n            final CharSequence loggerName)", "modifiers": "public static", "return": "DefaultDiagnosticLoggingAdapter", "body": "public static DefaultDiagnosticLoggingAdapter of(final DiagnosticLoggingAdapter loggingAdapter,\n            final CharSequence loggerName) {\n\n        return new DefaultDiagnosticLoggingAdapter(loggingAdapter, loggerName);\n    }", "signature": "DefaultDiagnosticLoggingAdapter of(final DiagnosticLoggingAdapter loggingAdapter,\n            final CharSequence loggerName)", "full_signature": "public static DefaultDiagnosticLoggingAdapter of(final DiagnosticLoggingAdapter loggingAdapter,\n            final CharSequence loggerName)", "class_method_signature": "DefaultDiagnosticLoggingAdapter.of(final DiagnosticLoggingAdapter loggingAdapter,\n            final CharSequence loggerName)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}