{"test_class": {"identifier": "EndpointResponseStrategyTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private IObject environment;", "modifier": "private", "type": "IObject", "declarator": "environment", "var_name": "environment"}, {"original_string": "private IObject context;", "modifier": "private", "type": "IObject", "declarator": "context", "var_name": "context"}, {"original_string": "private IObject responseObj;", "modifier": "private", "type": "IObject", "declarator": "responseObj", "var_name": "responseObj"}, {"original_string": "private IResponseSender responseSender;", "modifier": "private", "type": "IResponseSender", "declarator": "responseSender", "var_name": "responseSender"}, {"original_string": "private IChannelHandler channelHandler;", "modifier": "private", "type": "IChannelHandler", "declarator": "channelHandler", "var_name": "channelHandler"}, {"original_string": "private IResponse response;", "modifier": "private", "type": "IResponse", "declarator": "response", "var_name": "response"}, {"original_string": "private IResponseContentStrategy responseContentStrategy;", "modifier": "private", "type": "IResponseContentStrategy", "declarator": "responseContentStrategy", "var_name": "responseContentStrategy"}, {"original_string": "private Object request;", "modifier": "private", "type": "Object", "declarator": "request", "var_name": "request"}], "file": "CoreFeatures/Endpoint/EndpointResponseStrategy/src/test/java/info/smart_tools/smartactors/endpoint/response_strategy/EndpointResponseStrategyTest.java"}, "test_case": {"identifier": "Should_wrapExceptions", "parameters": "()", "modifiers": "@Test(expected = ResponseException.class) public", "return": "void", "body": "@Test(expected = ResponseException.class)\n    public void Should_wrapExceptions()\n            throws Exception {\n        doThrow(ResponseSendingException.class).when(responseSender).send(any(), any(), any());\n\n        new EndpointResponseStrategy().sendResponse(environment);\n    }", "signature": "void Should_wrapExceptions()", "full_signature": "@Test(expected = ResponseException.class) public void Should_wrapExceptions()", "class_method_signature": "EndpointResponseStrategyTest.Should_wrapExceptions()", "testcase": true, "constructor": false, "invocations": ["send", "when", "doThrow", "any", "any", "any", "sendResponse"]}, "focal_class": {"identifier": "EndpointResponseStrategy", "superclass": "", "interfaces": "implements IResponseStrategy", "fields": [], "methods": [{"identifier": "sendResponse", "parameters": "(final IObject environment)", "modifiers": "@Override public", "return": "void", "signature": "void sendResponse(final IObject environment)", "full_signature": "@Override public void sendResponse(final IObject environment)", "class_method_signature": "EndpointResponseStrategy.sendResponse(final IObject environment)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Endpoint/EndpointResponseStrategy/src/main/java/info/smart_tools/smartactors/endpoint/response_strategy/EndpointResponseStrategy.java"}, "focal_method": {"identifier": "sendResponse", "parameters": "(final IObject environment)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void sendResponse(final IObject environment) throws ResponseException {\n        try {\n            // Most of this code is copy-pasted from old ResponseSenderActor.\n            IFieldName responseFieldName = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"response\");\n            IFieldName contextFieldName = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"context\");\n            IFieldName httpResponseIsSentFieldName = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"sendResponseOnChainEnd\");\n            IFieldName endpointName = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"endpointName\");\n            IFieldName channelFieldName = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), \"channel\");\n\n            IObject responseIObject = (IObject) environment.getValue(responseFieldName);\n            IObject contextIObject = (IObject) environment.getValue(contextFieldName);\n\n            IChannelHandler channelHandler = (IChannelHandler) contextIObject.getValue(channelFieldName);\n\n            IResponse response = IOC.resolve(Keys.getOrAdd(IResponse.class.getCanonicalName()));\n            IResponseContentStrategy contentStrategy =\n                    IOC.resolve(Keys.getOrAdd(IResponseContentStrategy.class.getCanonicalName()), environment);\n            contentStrategy.setContent(responseIObject, response);\n\n            IResponseSender sender = IOC.resolve(Keys.getOrAdd(IResponseSender.class.getCanonicalName()),\n                    IOC.resolve(Keys.getOrAdd(\"http_request_key_for_response_sender\"), environment),\n                    contextIObject.getValue(endpointName));\n            sender.send(response, environment, channelHandler);\n            contextIObject.setValue(httpResponseIsSentFieldName, true);\n        } catch (Exception e) {\n            throw new ResponseException(e);\n        }\n    }", "signature": "void sendResponse(final IObject environment)", "full_signature": "@Override public void sendResponse(final IObject environment)", "class_method_signature": "EndpointResponseStrategy.sendResponse(final IObject environment)", "testcase": false, "constructor": false, "invocations": ["resolve", "getOrAdd", "resolve", "getOrAdd", "resolve", "getOrAdd", "resolve", "getOrAdd", "resolve", "getOrAdd", "getValue", "getValue", "getValue", "resolve", "getOrAdd", "getCanonicalName", "resolve", "getOrAdd", "getCanonicalName", "setContent", "resolve", "getOrAdd", "getCanonicalName", "resolve", "getOrAdd", "getValue", "send", "setValue"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}