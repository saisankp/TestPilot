{"test_class": {"identifier": "TestBtree", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "static final Random random = new Random();", "modifier": "static final", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}], "file": "cloudata-btree/src/test/java/com/cloudata/btree/TestBtree.java"}, "test_case": {"identifier": "testOpenAndClose", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOpenAndClose() throws Exception {\n        byte[] keyBytes = randomBytes(16);\n        File file = new File(folder.getRoot(), UUID.randomUUID().toString());\n\n        for (int i = 0; i < 3; i++) {\n            Database db = Database.build(file, keyBytes, null, null);\n            boolean uniqueKeys = true;\n            Btree btree = new Btree(db, uniqueKeys);\n\n            if (i == 0) {\n                simplePut(btree, 100);\n            }\n\n            simpleRead(btree, 100);\n\n            System.out.println(btree.getDb().getPageStore().debugDump());\n            System.out.flush();\n\n            Assert.assertTrue(btree.getDb().getPageStore().debugIsIdle().or(true));\n            db.close();\n        }\n\n    }", "signature": "void testOpenAndClose()", "full_signature": "@Test public void testOpenAndClose()", "class_method_signature": "TestBtree.testOpenAndClose()", "testcase": true, "constructor": false, "invocations": ["randomBytes", "getRoot", "toString", "randomUUID", "build", "simplePut", "simpleRead", "println", "debugDump", "getPageStore", "getDb", "flush", "assertTrue", "or", "debugIsIdle", "getPageStore", "getDb", "close"]}, "focal_class": {"identifier": "Btree", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(Btree.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Btree.class)", "var_name": "log"}, {"original_string": "final Database db;", "modifier": "final", "type": "Database", "declarator": "db", "var_name": "db"}, {"original_string": "final boolean uniqueKeys;", "modifier": "final", "type": "boolean", "declarator": "uniqueKeys", "var_name": "uniqueKeys"}, {"original_string": "final Lock writeLock = new ReentrantLock();", "modifier": "final", "type": "Lock", "declarator": "writeLock = new ReentrantLock()", "var_name": "writeLock"}], "methods": [{"identifier": "Btree", "parameters": "(Database db, boolean uniqueKeys)", "modifiers": "public", "return": "", "signature": " Btree(Database db, boolean uniqueKeys)", "full_signature": "public  Btree(Database db, boolean uniqueKeys)", "class_method_signature": "Btree.Btree(Database db, boolean uniqueKeys)", "testcase": false, "constructor": true}, {"identifier": "beginReadWrite", "parameters": "()", "modifiers": "public", "return": "WriteTransaction", "signature": "WriteTransaction beginReadWrite()", "full_signature": "public WriteTransaction beginReadWrite()", "class_method_signature": "Btree.beginReadWrite()", "testcase": false, "constructor": false}, {"identifier": "beginReadOnly", "parameters": "()", "modifiers": "public", "return": "ReadOnlyTransaction", "signature": "ReadOnlyTransaction beginReadOnly()", "full_signature": "public ReadOnlyTransaction beginReadOnly()", "class_method_signature": "Btree.beginReadOnly()", "testcase": false, "constructor": false}, {"identifier": "isUniqueKeys", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUniqueKeys()", "full_signature": "public boolean isUniqueKeys()", "class_method_signature": "Btree.isUniqueKeys()", "testcase": false, "constructor": false}, {"identifier": "getDb", "parameters": "()", "modifiers": "public", "return": "Database", "signature": "Database getDb()", "full_signature": "public Database getDb()", "class_method_signature": "Btree.getDb()", "testcase": false, "constructor": false}, {"identifier": "writeSnapshot", "parameters": "(ReadOnlyTransaction txn, SnapshotStorage snapshotDest)", "modifiers": "public", "return": "String", "signature": "String writeSnapshot(ReadOnlyTransaction txn, SnapshotStorage snapshotDest)", "full_signature": "public String writeSnapshot(ReadOnlyTransaction txn, SnapshotStorage snapshotDest)", "class_method_signature": "Btree.writeSnapshot(ReadOnlyTransaction txn, SnapshotStorage snapshotDest)", "testcase": false, "constructor": false}], "file": "cloudata-btree/src/main/java/com/cloudata/btree/Btree.java"}, "focal_method": {"identifier": "getDb", "parameters": "()", "modifiers": "public", "return": "Database", "body": "public Database getDb() {\n        return db;\n    }", "signature": "Database getDb()", "full_signature": "public Database getDb()", "class_method_signature": "Btree.getDb()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 15012247, "url": "https://github.com/justinsb/cloudata", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 1308, "license": "licensed"}}