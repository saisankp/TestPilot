{"test_class": {"identifier": "ReportTooltipPresenterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int DAYS = 15;", "modifier": "private static final", "type": "int", "declarator": "DAYS = 15", "var_name": "DAYS"}, {"original_string": "ReportTooltipPresenter presenter;", "modifier": "", "type": "ReportTooltipPresenter", "declarator": "presenter", "var_name": "presenter"}, {"original_string": "@Mock\n    LegacyTooltipView tooltipView;", "modifier": "@Mock", "type": "LegacyTooltipView", "declarator": "tooltipView", "var_name": "tooltipView"}, {"original_string": "@Mock\n    ReportTooltipInteractor interactor;", "modifier": "@Mock", "type": "ReportTooltipInteractor", "declarator": "interactor", "var_name": "interactor"}, {"original_string": "@Mock\n    BackupProvidersManager backupProvidersManager;", "modifier": "@Mock", "type": "BackupProvidersManager", "declarator": "backupProvidersManager", "var_name": "backupProvidersManager"}, {"original_string": "@Mock\n    Analytics analytics;", "modifier": "@Mock", "type": "Analytics", "declarator": "analytics", "var_name": "analytics"}, {"original_string": "private final SyncErrorType errorType = SyncErrorType.NoRemoteDiskSpace;", "modifier": "private final", "type": "SyncErrorType", "declarator": "errorType = SyncErrorType.NoRemoteDiskSpace", "var_name": "errorType"}], "file": "app/src/test/java/co/smartreceipts/android/widget/tooltip/report/ReportTooltipPresenterTest.java"}, "test_case": {"identifier": "passErrorTooltipCloseClicks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void passErrorTooltipCloseClicks() {\n        when(interactor.checkTooltipCauses()).thenReturn(Observable.just(ReportTooltipUiIndicator.syncError(errorType)));\n        when(tooltipView.getCloseButtonClicks()).thenReturn(Observable.just(ReportTooltipUiIndicator.syncError(errorType)));\n\n        presenter.subscribe();\n\n        verify(tooltipView).present(ReportTooltipUiIndicator.syncError(errorType));\n        verify(tooltipView).present(ReportTooltipUiIndicator.none());\n        verify(interactor, never()).handleClickOnErrorTooltip(errorType);\n    }", "signature": "void passErrorTooltipCloseClicks()", "full_signature": "@Test public void passErrorTooltipCloseClicks()", "class_method_signature": "ReportTooltipPresenterTest.passErrorTooltipCloseClicks()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "checkTooltipCauses", "just", "syncError", "thenReturn", "when", "getCloseButtonClicks", "just", "syncError", "subscribe", "present", "verify", "syncError", "present", "verify", "none", "handleClickOnErrorTooltip", "verify", "never"]}, "focal_class": {"identifier": "ReportTooltipPresenter", "superclass": "extends BaseViperPresenter<LegacyTooltipView, ReportTooltipInteractor<? extends FragmentActivity>>", "interfaces": "implements BackupProviderChangeListener", "fields": [{"original_string": "private final BackupProvidersManager backupProvidersManager;", "modifier": "private final", "type": "BackupProvidersManager", "declarator": "backupProvidersManager", "var_name": "backupProvidersManager"}, {"original_string": "private final Analytics analytics;", "modifier": "private final", "type": "Analytics", "declarator": "analytics", "var_name": "analytics"}, {"original_string": "private final Scheduler subscribeOnScheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "subscribeOnScheduler", "var_name": "subscribeOnScheduler"}, {"original_string": "private final Scheduler observeOnScheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "observeOnScheduler", "var_name": "observeOnScheduler"}], "methods": [{"identifier": "ReportTooltipPresenter", "parameters": "(@NonNull LegacyTooltipView view,\n                                  @NonNull ReportTooltipInteractor interactor,\n                                  @NonNull BackupProvidersManager backupProvidersManager,\n                                  @NonNull Analytics analytics)", "modifiers": "@SuppressWarnings(\"unchecked\") @Inject public", "return": "", "signature": " ReportTooltipPresenter(@NonNull LegacyTooltipView view,\n                                  @NonNull ReportTooltipInteractor interactor,\n                                  @NonNull BackupProvidersManager backupProvidersManager,\n                                  @NonNull Analytics analytics)", "full_signature": "@SuppressWarnings(\"unchecked\") @Inject public  ReportTooltipPresenter(@NonNull LegacyTooltipView view,\n                                  @NonNull ReportTooltipInteractor interactor,\n                                  @NonNull BackupProvidersManager backupProvidersManager,\n                                  @NonNull Analytics analytics)", "class_method_signature": "ReportTooltipPresenter.ReportTooltipPresenter(@NonNull LegacyTooltipView view,\n                                  @NonNull ReportTooltipInteractor interactor,\n                                  @NonNull BackupProvidersManager backupProvidersManager,\n                                  @NonNull Analytics analytics)", "testcase": false, "constructor": true}, {"identifier": "ReportTooltipPresenter", "parameters": "(@NonNull LegacyTooltipView view,\n                                  @NonNull ReportTooltipInteractor interactor,\n                                  @NonNull BackupProvidersManager backupProvidersManager,\n                                  @NonNull Analytics analytics,\n                                  @NonNull Scheduler subscribeOnScheduler,\n                                  @NonNull Scheduler observeOnScheduler)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "", "signature": " ReportTooltipPresenter(@NonNull LegacyTooltipView view,\n                                  @NonNull ReportTooltipInteractor interactor,\n                                  @NonNull BackupProvidersManager backupProvidersManager,\n                                  @NonNull Analytics analytics,\n                                  @NonNull Scheduler subscribeOnScheduler,\n                                  @NonNull Scheduler observeOnScheduler)", "full_signature": "@SuppressWarnings(\"unchecked\") public  ReportTooltipPresenter(@NonNull LegacyTooltipView view,\n                                  @NonNull ReportTooltipInteractor interactor,\n                                  @NonNull BackupProvidersManager backupProvidersManager,\n                                  @NonNull Analytics analytics,\n                                  @NonNull Scheduler subscribeOnScheduler,\n                                  @NonNull Scheduler observeOnScheduler)", "class_method_signature": "ReportTooltipPresenter.ReportTooltipPresenter(@NonNull LegacyTooltipView view,\n                                  @NonNull ReportTooltipInteractor interactor,\n                                  @NonNull BackupProvidersManager backupProvidersManager,\n                                  @NonNull Analytics analytics,\n                                  @NonNull Scheduler subscribeOnScheduler,\n                                  @NonNull Scheduler observeOnScheduler)", "testcase": false, "constructor": true}, {"identifier": "subscribe", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void subscribe()", "full_signature": "@Override public void subscribe()", "class_method_signature": "ReportTooltipPresenter.subscribe()", "testcase": false, "constructor": false}, {"identifier": "unsubscribe", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void unsubscribe()", "full_signature": "@Override public void unsubscribe()", "class_method_signature": "ReportTooltipPresenter.unsubscribe()", "testcase": false, "constructor": false}, {"identifier": "onProviderChanged", "parameters": "(@NonNull SyncProvider newProvider)", "modifiers": "@Override public", "return": "void", "signature": "void onProviderChanged(@NonNull SyncProvider newProvider)", "full_signature": "@Override public void onProviderChanged(@NonNull SyncProvider newProvider)", "class_method_signature": "ReportTooltipPresenter.onProviderChanged(@NonNull SyncProvider newProvider)", "testcase": false, "constructor": false}, {"identifier": "updateProvider", "parameters": "(@NonNull SyncProvider provider)", "modifiers": "private", "return": "void", "signature": "void updateProvider(@NonNull SyncProvider provider)", "full_signature": "private void updateProvider(@NonNull SyncProvider provider)", "class_method_signature": "ReportTooltipPresenter.updateProvider(@NonNull SyncProvider provider)", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/widget/tooltip/report/ReportTooltipPresenter.java"}, "focal_method": {"identifier": "subscribe", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void subscribe() {\n        backupProvidersManager.registerChangeListener(this);\n        updateProvider(backupProvidersManager.getSyncProvider());\n\n        compositeDisposable.add(interactor.checkTooltipCauses()\n                .subscribeOn(subscribeOnScheduler)\n                .observeOn(observeOnScheduler)\n                .subscribe(view::present));\n\n        compositeDisposable.add(view.getTooltipsClicks()\n                .doOnNext(uiIndicator -> {\n                    Logger.info(ReportTooltipPresenter.this, \"User clicked on {} tooltip\", uiIndicator);\n                    if (uiIndicator.getState() == ReportTooltipUiIndicator.State.GenerateInfo) {\n                        analytics.record(Events.Informational.ClickedGenerateReportTip);\n                    } else if (uiIndicator.getState() == ReportTooltipUiIndicator.State.BackupReminder) {\n                        analytics.record(Events.Informational.ClickedBackupReminderTip);\n                    }\n                })\n                .subscribe(uiIndicator -> {\n                    view.present(ReportTooltipUiIndicator.none());\n                    if (uiIndicator.getState() == ReportTooltipUiIndicator.State.SyncError) {\n                        interactor.handleClickOnErrorTooltip(uiIndicator.getErrorType().get());\n                    } else if (uiIndicator.getState() == ReportTooltipUiIndicator.State.GenerateInfo) {\n                        // Note: The actual click logic is in the view (probably need to clean up dagger for this to be cleaner)\n                        interactor.generateInfoTooltipClosed();\n                    } else if (uiIndicator.getState() == ReportTooltipUiIndicator.State.BackupReminder) {\n                        interactor.backupReminderTooltipClosed();\n                    }\n                }));\n\n        compositeDisposable.add(view.getCloseButtonClicks()\n                .subscribe(uiIndicator -> {\n                    view.present(ReportTooltipUiIndicator.none());\n                    if (uiIndicator.getState() == ReportTooltipUiIndicator.State.GenerateInfo) {\n                        interactor.generateInfoTooltipClosed();\n                    } else if (uiIndicator.getState() == ReportTooltipUiIndicator.State.BackupReminder) {\n                        interactor.backupReminderTooltipClosed();\n                    } else if (uiIndicator.getState() == ReportTooltipUiIndicator.State.ImportInfo) {\n                        interactor.importInfoTooltipClosed();\n                    }\n                }));\n    }", "signature": "void subscribe()", "full_signature": "@Override public void subscribe()", "class_method_signature": "ReportTooltipPresenter.subscribe()", "testcase": false, "constructor": false, "invocations": ["registerChangeListener", "updateProvider", "getSyncProvider", "add", "subscribe", "observeOn", "subscribeOn", "checkTooltipCauses", "add", "subscribe", "doOnNext", "getTooltipsClicks", "info", "getState", "record", "getState", "record", "present", "none", "getState", "handleClickOnErrorTooltip", "get", "getErrorType", "getState", "generateInfoTooltipClosed", "getState", "backupReminderTooltipClosed", "add", "subscribe", "getCloseButtonClicks", "present", "none", "getState", "generateInfoTooltipClosed", "getState", "backupReminderTooltipClosed", "getState", "importInfoTooltipClosed"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}