{"test_class": {"identifier": "SmacUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-meris-smac/src/test/java/org/esa/s3tbx/smac/SmacUtilsTest.java"}, "test_case": {"identifier": "testGetSensorTypeIsNullOnIllegalTypes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSensorTypeIsNullOnIllegalTypes() {\n        assertNull(SmacUtils.getSensorType(\"Nasenann\"));\n        assertNull(SmacUtils.getSensorType(\"strange\"));\n        assertNull(SmacUtils.getSensorType(\"\"));\n    }", "signature": "void testGetSensorTypeIsNullOnIllegalTypes()", "full_signature": "@Test public void testGetSensorTypeIsNullOnIllegalTypes()", "class_method_signature": "SmacUtilsTest.testGetSensorTypeIsNullOnIllegalTypes()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getSensorType", "assertNull", "getSensorType", "assertNull", "getSensorType"]}, "focal_class": {"identifier": "SmacUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Pattern AATSR_L1_TOA_TYPE_PATTERN = Pattern.compile(\"ATS_TOA_1P\");", "modifier": "private static", "type": "Pattern", "declarator": "AATSR_L1_TOA_TYPE_PATTERN = Pattern.compile(\"ATS_TOA_1P\")", "var_name": "AATSR_L1_TOA_TYPE_PATTERN"}], "methods": [{"identifier": "getSensorType", "parameters": "(String productType)", "modifiers": "public static", "return": "String", "signature": "String getSensorType(String productType)", "full_signature": "public static String getSensorType(String productType)", "class_method_signature": "SmacUtils.getSensorType(String productType)", "testcase": false, "constructor": false}, {"identifier": "isSupportedMerisProductType", "parameters": "(String productType)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSupportedMerisProductType(String productType)", "full_signature": "public static boolean isSupportedMerisProductType(String productType)", "class_method_signature": "SmacUtils.isSupportedMerisProductType(String productType)", "testcase": false, "constructor": false}, {"identifier": "isSupportedAatsrProductType", "parameters": "(String productType)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSupportedAatsrProductType(String productType)", "full_signature": "public static boolean isSupportedAatsrProductType(String productType)", "class_method_signature": "SmacUtils.isSupportedAatsrProductType(String productType)", "testcase": false, "constructor": false}, {"identifier": "isSupportedProductType", "parameters": "(String productType)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSupportedProductType(String productType)", "full_signature": "public static boolean isSupportedProductType(String productType)", "class_method_signature": "SmacUtils.isSupportedProductType(String productType)", "testcase": false, "constructor": false}], "file": "s3tbx-meris-smac/src/main/java/org/esa/s3tbx/smac/SmacUtils.java"}, "focal_method": {"identifier": "getSensorType", "parameters": "(String productType)", "modifiers": "public static", "return": "String", "body": "public static String getSensorType(String productType) {\n        Guardian.assertNotNull(\"productType\", productType);\n\n        if (isSupportedAatsrProductType(productType)) {\n            return SensorCoefficientManager.AATSR_NAME;\n        } else if (isSupportedMerisProductType(productType)) {\n            return SensorCoefficientManager.MERIS_NAME;\n        }\n        return null;\n    }", "signature": "String getSensorType(String productType)", "full_signature": "public static String getSensorType(String productType)", "class_method_signature": "SmacUtils.getSensorType(String productType)", "testcase": false, "constructor": false, "invocations": ["assertNotNull", "isSupportedAatsrProductType", "isSupportedMerisProductType"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}