{"test_class": {"identifier": "EverrestProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String                         httpMethod     = \"POST\";", "modifier": "private", "type": "String", "declarator": "httpMethod     = \"POST\"", "var_name": "httpMethod"}, {"original_string": "private URI                            requestUri     = URI.create(\"http://localhost:8080/servlet/a/b/c\");", "modifier": "private", "type": "URI", "declarator": "requestUri     = URI.create(\"http://localhost:8080/servlet/a/b/c\")", "var_name": "requestUri"}, {"original_string": "private URI                            baseUri        = URI.create(\"http://localhost:8080/servlet\");", "modifier": "private", "type": "URI", "declarator": "baseUri        = URI.create(\"http://localhost:8080/servlet\")", "var_name": "baseUri"}, {"original_string": "private MultivaluedMap<String, String> requestHeaders = new MultivaluedHashMap<>();", "modifier": "private", "type": "MultivaluedMap<String, String>", "declarator": "requestHeaders = new MultivaluedHashMap<>()", "var_name": "requestHeaders"}, {"original_string": "private RequestHandler        requestHandler;", "modifier": "private", "type": "RequestHandler", "declarator": "requestHandler", "var_name": "requestHandler"}, {"original_string": "private DependencySupplier    dependencySupplier;", "modifier": "private", "type": "DependencySupplier", "declarator": "dependencySupplier", "var_name": "dependencySupplier"}, {"original_string": "private EverrestConfiguration configuration;", "modifier": "private", "type": "EverrestConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private EverrestProcessor everrestProcessor;", "modifier": "private", "type": "EverrestProcessor", "declarator": "everrestProcessor", "var_name": "everrestProcessor"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/EverrestProcessorTest.java"}, "test_case": {"identifier": "setsUpEnvironmentContextBeforeCallToRequestHandler", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void setsUpEnvironmentContextBeforeCallToRequestHandler() throws Exception {\n        ContainerRequest containerRequest = mockContainerRequest();\n        ContainerResponse containerResponse = mockContainerResponse();\n        EnvironmentContext environmentContext = mock(EnvironmentContext.class);\n\n        EnvironmentContext[] environmentContextThatRequestHandlerCalledWith = new EnvironmentContext[1];\n        doAnswer(invocation -> {\n            environmentContextThatRequestHandlerCalledWith[0] = EnvironmentContext.getCurrent();\n            return null;\n        }).when(requestHandler).handleRequest(containerRequest, containerResponse);\n\n        everrestProcessor.process(containerRequest, containerResponse, environmentContext);\n        assertNotNull(environmentContextThatRequestHandlerCalledWith[0]);\n        assertSame(environmentContext, environmentContextThatRequestHandlerCalledWith[0]);\n    }", "signature": "void setsUpEnvironmentContextBeforeCallToRequestHandler()", "full_signature": "@Test public void setsUpEnvironmentContextBeforeCallToRequestHandler()", "class_method_signature": "EverrestProcessorTest.setsUpEnvironmentContextBeforeCallToRequestHandler()", "testcase": true, "constructor": false, "invocations": ["mockContainerRequest", "mockContainerResponse", "mock", "handleRequest", "when", "doAnswer", "getCurrent", "process", "assertNotNull", "assertSame"]}, "focal_class": {"identifier": "EverrestProcessor", "superclass": "", "interfaces": "implements Lifecycle", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(EverrestProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(EverrestProcessor.class)", "var_name": "LOG"}, {"original_string": "private final DependencySupplier    dependencySupplier;", "modifier": "private final", "type": "DependencySupplier", "declarator": "dependencySupplier", "var_name": "dependencySupplier"}, {"original_string": "private final RequestHandler        requestHandler;", "modifier": "private final", "type": "RequestHandler", "declarator": "requestHandler", "var_name": "requestHandler"}, {"original_string": "private final EverrestApplication   everrestApplication;", "modifier": "private final", "type": "EverrestApplication", "declarator": "everrestApplication", "var_name": "everrestApplication"}, {"original_string": "private final EverrestConfiguration configuration;", "modifier": "private final", "type": "EverrestConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final MethodInvokerDecoratorFactory methodInvokerDecoratorFactory;", "modifier": "private final", "type": "MethodInvokerDecoratorFactory", "declarator": "methodInvokerDecoratorFactory", "var_name": "methodInvokerDecoratorFactory"}, {"original_string": "private final Map<String, String> properties;", "modifier": "private final", "type": "Map<String, String>", "declarator": "properties", "var_name": "properties"}], "methods": [{"identifier": "EverrestProcessor", "parameters": "(DependencySupplier dependencySupplier, RequestHandler requestHandler)", "modifiers": "public", "return": "", "signature": " EverrestProcessor(DependencySupplier dependencySupplier, RequestHandler requestHandler)", "full_signature": "public  EverrestProcessor(DependencySupplier dependencySupplier, RequestHandler requestHandler)", "class_method_signature": "EverrestProcessor.EverrestProcessor(DependencySupplier dependencySupplier, RequestHandler requestHandler)", "testcase": false, "constructor": true}, {"identifier": "EverrestProcessor", "parameters": "(EverrestConfiguration configuration, DependencySupplier dependencySupplier, RequestHandler requestHandler, Application application)", "modifiers": "public", "return": "", "signature": " EverrestProcessor(EverrestConfiguration configuration, DependencySupplier dependencySupplier, RequestHandler requestHandler, Application application)", "full_signature": "public  EverrestProcessor(EverrestConfiguration configuration, DependencySupplier dependencySupplier, RequestHandler requestHandler, Application application)", "class_method_signature": "EverrestProcessor.EverrestProcessor(EverrestConfiguration configuration, DependencySupplier dependencySupplier, RequestHandler requestHandler, Application application)", "testcase": false, "constructor": true}, {"identifier": "createMethodInvokerDecoratorFactory", "parameters": "(EverrestConfiguration configuration)", "modifiers": "private", "return": "MethodInvokerDecoratorFactory", "signature": "MethodInvokerDecoratorFactory createMethodInvokerDecoratorFactory(EverrestConfiguration configuration)", "full_signature": "private MethodInvokerDecoratorFactory createMethodInvokerDecoratorFactory(EverrestConfiguration configuration)", "class_method_signature": "EverrestProcessor.createMethodInvokerDecoratorFactory(EverrestConfiguration configuration)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(String name)", "modifiers": "public", "return": "String", "signature": "String getProperty(String name)", "full_signature": "public String getProperty(String name)", "class_method_signature": "EverrestProcessor.getProperty(String name)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(String name, String value)", "modifiers": "public", "return": "void", "signature": "void setProperty(String name, String value)", "full_signature": "public void setProperty(String name, String value)", "class_method_signature": "EverrestProcessor.setProperty(String name, String value)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(GenericContainerRequest request, GenericContainerResponse response, EnvironmentContext environmentContext)", "modifiers": "public", "return": "void", "signature": "void process(GenericContainerRequest request, GenericContainerResponse response, EnvironmentContext environmentContext)", "full_signature": "public void process(GenericContainerRequest request, GenericContainerResponse response, EnvironmentContext environmentContext)", "class_method_signature": "EverrestProcessor.process(GenericContainerRequest request, GenericContainerResponse response, EnvironmentContext environmentContext)", "testcase": false, "constructor": false}, {"identifier": "normalizeRequestUri", "parameters": "(GenericContainerRequest request)", "modifiers": "private", "return": "void", "signature": "void normalizeRequestUri(GenericContainerRequest request)", "full_signature": "private void normalizeRequestUri(GenericContainerRequest request)", "class_method_signature": "EverrestProcessor.normalizeRequestUri(GenericContainerRequest request)", "testcase": false, "constructor": false}, {"identifier": "overrideHttpMethod", "parameters": "(GenericContainerRequest request)", "modifiers": "private", "return": "void", "signature": "void overrideHttpMethod(GenericContainerRequest request)", "full_signature": "private void overrideHttpMethod(GenericContainerRequest request)", "class_method_signature": "EverrestProcessor.overrideHttpMethod(GenericContainerRequest request)", "testcase": false, "constructor": false}, {"identifier": "addApplication", "parameters": "(Application application)", "modifiers": "public", "return": "void", "signature": "void addApplication(Application application)", "full_signature": "public void addApplication(Application application)", "class_method_signature": "EverrestProcessor.addApplication(Application application)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "EverrestProcessor.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "EverrestProcessor.stop()", "testcase": false, "constructor": false}, {"identifier": "getProviders", "parameters": "()", "modifiers": "public", "return": "ProviderBinder", "signature": "ProviderBinder getProviders()", "full_signature": "public ProviderBinder getProviders()", "class_method_signature": "EverrestProcessor.getProviders()", "testcase": false, "constructor": false}, {"identifier": "getResources", "parameters": "()", "modifiers": "public", "return": "ResourceBinder", "signature": "ResourceBinder getResources()", "full_signature": "public ResourceBinder getResources()", "class_method_signature": "EverrestProcessor.getResources()", "testcase": false, "constructor": false}, {"identifier": "getApplication", "parameters": "()", "modifiers": "public", "return": "EverrestApplication", "signature": "EverrestApplication getApplication()", "full_signature": "public EverrestApplication getApplication()", "class_method_signature": "EverrestProcessor.getApplication()", "testcase": false, "constructor": false}, {"identifier": "getDependencySupplier", "parameters": "()", "modifiers": "public", "return": "DependencySupplier", "signature": "DependencySupplier getDependencySupplier()", "full_signature": "public DependencySupplier getDependencySupplier()", "class_method_signature": "EverrestProcessor.getDependencySupplier()", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/EverrestProcessor.java"}, "focal_method": {"identifier": "process", "parameters": "(GenericContainerRequest request, GenericContainerResponse response, EnvironmentContext environmentContext)", "modifiers": "public", "return": "void", "body": "public void process(GenericContainerRequest request, GenericContainerResponse response, EnvironmentContext environmentContext)\n            throws IOException {\n\n        EnvironmentContext.setCurrent(environmentContext);\n\n        ApplicationContext context = anApplicationContext()\n                .withRequest(request)\n                .withResponse(response)\n                .withProviders(requestHandler.getProviders())\n                .withProperties(properties)\n                .withApplication(everrestApplication)\n                .withConfiguration(new EverrestConfiguration(configuration))\n                .withDependencySupplier(dependencySupplier)\n                .withMethodInvokerDecoratorFactory(methodInvokerDecoratorFactory)\n                .build();\n        try {\n            context.start();\n            ApplicationContext.setCurrent(context);\n            if (configuration.isNormalizeUri()) {\n                normalizeRequestUri(request);\n            }\n            if (configuration.isHttpMethodOverride()) {\n                overrideHttpMethod(request);\n            }\n            requestHandler.handleRequest(request, response);\n        } finally {\n            try {\n                context.stop();\n            } finally {\n                ApplicationContext.setCurrent(null);\n            }\n            EnvironmentContext.setCurrent(null);\n        }\n    }", "signature": "void process(GenericContainerRequest request, GenericContainerResponse response, EnvironmentContext environmentContext)", "full_signature": "public void process(GenericContainerRequest request, GenericContainerResponse response, EnvironmentContext environmentContext)", "class_method_signature": "EverrestProcessor.process(GenericContainerRequest request, GenericContainerResponse response, EnvironmentContext environmentContext)", "testcase": false, "constructor": false, "invocations": ["setCurrent", "build", "withMethodInvokerDecoratorFactory", "withDependencySupplier", "withConfiguration", "withApplication", "withProperties", "withProviders", "withResponse", "withRequest", "anApplicationContext", "getProviders", "start", "setCurrent", "isNormalizeUri", "normalizeRequestUri", "isHttpMethodOverride", "overrideHttpMethod", "handleRequest", "stop", "setCurrent", "setCurrent"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}