{"test_class": {"identifier": "ViewerPreferencesParametersTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-model/src/test/java/org/sejda/model/parameter/ViewerPreferencesParametersTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n        ViewerPreferencesParameters eq1 = new ViewerPreferencesParameters();\n        ViewerPreferencesParameters eq2 = new ViewerPreferencesParameters();\n        ViewerPreferencesParameters eq3 = new ViewerPreferencesParameters();\n        ViewerPreferencesParameters diff = new ViewerPreferencesParameters();\n        diff.addEnabledPreference(PdfBooleanPreference.HIDE_MENUBAR);\n        TestUtils.testEqualsAndHashCodes(eq1, eq2, eq3, diff);\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "ViewerPreferencesParametersTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["addEnabledPreference", "testEqualsAndHashCodes"]}, "focal_class": {"identifier": "ViewerPreferencesParameters", "superclass": "extends MultiplePdfSourceMultipleOutputParameters", "interfaces": "", "fields": [{"original_string": "@NotNull\n    private PdfPageMode pageMode = PdfPageMode.USE_NONE;", "modifier": "@NotNull\n    private", "type": "PdfPageMode", "declarator": "pageMode = PdfPageMode.USE_NONE", "var_name": "pageMode"}, {"original_string": "@NotNull\n    private PdfPageLayout pageLayout = PdfPageLayout.SINGLE_PAGE;", "modifier": "@NotNull\n    private", "type": "PdfPageLayout", "declarator": "pageLayout = PdfPageLayout.SINGLE_PAGE", "var_name": "pageLayout"}, {"original_string": "@NotNull\n    private PdfNonFullScreenPageMode nfsMode = PdfNonFullScreenPageMode.USE_NONE;", "modifier": "@NotNull\n    private", "type": "PdfNonFullScreenPageMode", "declarator": "nfsMode = PdfNonFullScreenPageMode.USE_NONE", "var_name": "nfsMode"}, {"original_string": "private PdfDuplex duplex;", "modifier": "private", "type": "PdfDuplex", "declarator": "duplex", "var_name": "duplex"}, {"original_string": "private PdfDirection direction;", "modifier": "private", "type": "PdfDirection", "declarator": "direction", "var_name": "direction"}, {"original_string": "private PdfPrintScaling printScaling;", "modifier": "private", "type": "PdfPrintScaling", "declarator": "printScaling", "var_name": "printScaling"}, {"original_string": "private Set<PdfBooleanPreference> enabledBooleanPreferences = EnumSet.noneOf(PdfBooleanPreference.class);", "modifier": "private", "type": "Set<PdfBooleanPreference>", "declarator": "enabledBooleanPreferences = EnumSet.noneOf(PdfBooleanPreference.class)", "var_name": "enabledBooleanPreferences"}], "methods": [{"identifier": "addEnabledPreference", "parameters": "(PdfBooleanPreference e)", "modifiers": "public", "return": "boolean", "signature": "boolean addEnabledPreference(PdfBooleanPreference e)", "full_signature": "public boolean addEnabledPreference(PdfBooleanPreference e)", "class_method_signature": "ViewerPreferencesParameters.addEnabledPreference(PdfBooleanPreference e)", "testcase": false, "constructor": false}, {"identifier": "clearEnabledPreferences", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearEnabledPreferences()", "full_signature": "public void clearEnabledPreferences()", "class_method_signature": "ViewerPreferencesParameters.clearEnabledPreferences()", "testcase": false, "constructor": false}, {"identifier": "getPageMode", "parameters": "()", "modifiers": "public", "return": "PdfPageMode", "signature": "PdfPageMode getPageMode()", "full_signature": "public PdfPageMode getPageMode()", "class_method_signature": "ViewerPreferencesParameters.getPageMode()", "testcase": false, "constructor": false}, {"identifier": "setPageMode", "parameters": "(PdfPageMode pageMode)", "modifiers": "public", "return": "void", "signature": "void setPageMode(PdfPageMode pageMode)", "full_signature": "public void setPageMode(PdfPageMode pageMode)", "class_method_signature": "ViewerPreferencesParameters.setPageMode(PdfPageMode pageMode)", "testcase": false, "constructor": false}, {"identifier": "getPageLayout", "parameters": "()", "modifiers": "public", "return": "PdfPageLayout", "signature": "PdfPageLayout getPageLayout()", "full_signature": "public PdfPageLayout getPageLayout()", "class_method_signature": "ViewerPreferencesParameters.getPageLayout()", "testcase": false, "constructor": false}, {"identifier": "setPageLayout", "parameters": "(PdfPageLayout pageLayout)", "modifiers": "public", "return": "void", "signature": "void setPageLayout(PdfPageLayout pageLayout)", "full_signature": "public void setPageLayout(PdfPageLayout pageLayout)", "class_method_signature": "ViewerPreferencesParameters.setPageLayout(PdfPageLayout pageLayout)", "testcase": false, "constructor": false}, {"identifier": "getNfsMode", "parameters": "()", "modifiers": "public", "return": "PdfNonFullScreenPageMode", "signature": "PdfNonFullScreenPageMode getNfsMode()", "full_signature": "public PdfNonFullScreenPageMode getNfsMode()", "class_method_signature": "ViewerPreferencesParameters.getNfsMode()", "testcase": false, "constructor": false}, {"identifier": "setNfsMode", "parameters": "(PdfNonFullScreenPageMode nfsMode)", "modifiers": "public", "return": "void", "signature": "void setNfsMode(PdfNonFullScreenPageMode nfsMode)", "full_signature": "public void setNfsMode(PdfNonFullScreenPageMode nfsMode)", "class_method_signature": "ViewerPreferencesParameters.setNfsMode(PdfNonFullScreenPageMode nfsMode)", "testcase": false, "constructor": false}, {"identifier": "getDuplex", "parameters": "()", "modifiers": "public", "return": "PdfDuplex", "signature": "PdfDuplex getDuplex()", "full_signature": "public PdfDuplex getDuplex()", "class_method_signature": "ViewerPreferencesParameters.getDuplex()", "testcase": false, "constructor": false}, {"identifier": "setDuplex", "parameters": "(PdfDuplex duplex)", "modifiers": "public", "return": "void", "signature": "void setDuplex(PdfDuplex duplex)", "full_signature": "public void setDuplex(PdfDuplex duplex)", "class_method_signature": "ViewerPreferencesParameters.setDuplex(PdfDuplex duplex)", "testcase": false, "constructor": false}, {"identifier": "getDirection", "parameters": "()", "modifiers": "public", "return": "PdfDirection", "signature": "PdfDirection getDirection()", "full_signature": "public PdfDirection getDirection()", "class_method_signature": "ViewerPreferencesParameters.getDirection()", "testcase": false, "constructor": false}, {"identifier": "setDirection", "parameters": "(PdfDirection direction)", "modifiers": "public", "return": "void", "signature": "void setDirection(PdfDirection direction)", "full_signature": "public void setDirection(PdfDirection direction)", "class_method_signature": "ViewerPreferencesParameters.setDirection(PdfDirection direction)", "testcase": false, "constructor": false}, {"identifier": "getPrintScaling", "parameters": "()", "modifiers": "public", "return": "PdfPrintScaling", "signature": "PdfPrintScaling getPrintScaling()", "full_signature": "public PdfPrintScaling getPrintScaling()", "class_method_signature": "ViewerPreferencesParameters.getPrintScaling()", "testcase": false, "constructor": false}, {"identifier": "setPrintScaling", "parameters": "(PdfPrintScaling printScaling)", "modifiers": "public", "return": "void", "signature": "void setPrintScaling(PdfPrintScaling printScaling)", "full_signature": "public void setPrintScaling(PdfPrintScaling printScaling)", "class_method_signature": "ViewerPreferencesParameters.setPrintScaling(PdfPrintScaling printScaling)", "testcase": false, "constructor": false}, {"identifier": "getEnabledPreferences", "parameters": "()", "modifiers": "public", "return": "Set<PdfBooleanPreference>", "signature": "Set<PdfBooleanPreference> getEnabledPreferences()", "full_signature": "public Set<PdfBooleanPreference> getEnabledPreferences()", "class_method_signature": "ViewerPreferencesParameters.getEnabledPreferences()", "testcase": false, "constructor": false}, {"identifier": "getMinRequiredPdfVersion", "parameters": "()", "modifiers": "@Override public", "return": "PdfVersion", "signature": "PdfVersion getMinRequiredPdfVersion()", "full_signature": "@Override public PdfVersion getMinRequiredPdfVersion()", "class_method_signature": "ViewerPreferencesParameters.getMinRequiredPdfVersion()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ViewerPreferencesParameters.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "ViewerPreferencesParameters.equals(Object other)", "testcase": false, "constructor": false}], "file": "sejda-model/src/main/java/org/sejda/model/parameter/ViewerPreferencesParameters.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (!(other instanceof ViewerPreferencesParameters)) {\n            return false;\n        }\n        ViewerPreferencesParameters parameter = (ViewerPreferencesParameters) other;\n        return new EqualsBuilder().appendSuper(super.equals(other)).append(printScaling, parameter.getPrintScaling())\n                .append(direction, parameter.getDirection()).append(duplex, parameter.getDuplex())\n                .append(pageLayout, parameter.getPageLayout()).append(pageMode, parameter.getPageMode())\n                .append(nfsMode, parameter.getNfsMode())\n                .append(enabledBooleanPreferences, parameter.getEnabledPreferences()).isEquals();\n    }", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "ViewerPreferencesParameters.equals(Object other)", "testcase": false, "constructor": false, "invocations": ["isEquals", "append", "append", "append", "append", "append", "append", "append", "appendSuper", "equals", "getPrintScaling", "getDirection", "getDuplex", "getPageLayout", "getPageMode", "getNfsMode", "getEnabledPreferences"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}