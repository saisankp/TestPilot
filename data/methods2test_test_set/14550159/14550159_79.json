{"test_class": {"identifier": "ApplicationPublisherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ResourceBinder resources;", "modifier": "private", "type": "ResourceBinder", "declarator": "resources", "var_name": "resources"}, {"original_string": "private ProviderBinder providers;", "modifier": "private", "type": "ProviderBinder", "declarator": "providers", "var_name": "providers"}, {"original_string": "private ApplicationPublisher publisher;", "modifier": "private", "type": "ApplicationPublisher", "declarator": "publisher", "var_name": "publisher"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/ApplicationPublisherTest.java"}, "test_case": {"identifier": "publishesSingletonExceptionMapper", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void publishesSingletonExceptionMapper() {\n        ExceptionMapper exceptionMapper = new RuntimeExceptionMapper();\n        Application application = mock(Application.class);\n        when(application.getSingletons()).thenReturn(newHashSet(exceptionMapper));\n\n        publisher.publish(application);\n\n        verify(providers).addExceptionMapper(exceptionMapper);\n    }", "signature": "void publishesSingletonExceptionMapper()", "full_signature": "@Test public void publishesSingletonExceptionMapper()", "class_method_signature": "ApplicationPublisherTest.publishesSingletonExceptionMapper()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getSingletons", "newHashSet", "publish", "addExceptionMapper", "verify"]}, "focal_class": {"identifier": "ApplicationPublisher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ResourceBinder        resources;", "modifier": "private final", "type": "ResourceBinder", "declarator": "resources", "var_name": "resources"}, {"original_string": "private final RestComponentResolver componentResolver;", "modifier": "private final", "type": "RestComponentResolver", "declarator": "componentResolver", "var_name": "componentResolver"}], "methods": [{"identifier": "ApplicationPublisher", "parameters": "(ResourceBinder resources, ProviderBinder providers)", "modifiers": "public", "return": "", "signature": " ApplicationPublisher(ResourceBinder resources, ProviderBinder providers)", "full_signature": "public  ApplicationPublisher(ResourceBinder resources, ProviderBinder providers)", "class_method_signature": "ApplicationPublisher.ApplicationPublisher(ResourceBinder resources, ProviderBinder providers)", "testcase": false, "constructor": true}, {"identifier": "ApplicationPublisher", "parameters": "(ResourceBinder resources, RestComponentResolver componentResolver)", "modifiers": "", "return": "", "signature": " ApplicationPublisher(ResourceBinder resources, RestComponentResolver componentResolver)", "full_signature": "  ApplicationPublisher(ResourceBinder resources, RestComponentResolver componentResolver)", "class_method_signature": "ApplicationPublisher.ApplicationPublisher(ResourceBinder resources, RestComponentResolver componentResolver)", "testcase": false, "constructor": true}, {"identifier": "publish", "parameters": "(Application application)", "modifiers": "public", "return": "void", "signature": "void publish(Application application)", "full_signature": "public void publish(Application application)", "class_method_signature": "ApplicationPublisher.publish(Application application)", "testcase": false, "constructor": false}, {"identifier": "addResource", "parameters": "(String uriPattern, Class<?> resourceClass)", "modifiers": "private", "return": "void", "signature": "void addResource(String uriPattern, Class<?> resourceClass)", "full_signature": "private void addResource(String uriPattern, Class<?> resourceClass)", "class_method_signature": "ApplicationPublisher.addResource(String uriPattern, Class<?> resourceClass)", "testcase": false, "constructor": false}, {"identifier": "addResource", "parameters": "(String uriPattern, Object resource)", "modifiers": "private", "return": "void", "signature": "void addResource(String uriPattern, Object resource)", "full_signature": "private void addResource(String uriPattern, Object resource)", "class_method_signature": "ApplicationPublisher.addResource(String uriPattern, Object resource)", "testcase": false, "constructor": false}, {"identifier": "addSingleton", "parameters": "(Object instance)", "modifiers": "private", "return": "void", "signature": "void addSingleton(Object instance)", "full_signature": "private void addSingleton(Object instance)", "class_method_signature": "ApplicationPublisher.addSingleton(Object instance)", "testcase": false, "constructor": false}, {"identifier": "addPerRequest", "parameters": "(Class clazz)", "modifiers": "@SuppressWarnings({\"unchecked\"}) private", "return": "void", "signature": "void addPerRequest(Class clazz)", "full_signature": "@SuppressWarnings({\"unchecked\"}) private void addPerRequest(Class clazz)", "class_method_signature": "ApplicationPublisher.addPerRequest(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "addFactory", "parameters": "(ObjectFactory factory)", "modifiers": "@SuppressWarnings({\"unchecked\"}) private", "return": "void", "signature": "void addFactory(ObjectFactory factory)", "full_signature": "@SuppressWarnings({\"unchecked\"}) private void addFactory(ObjectFactory factory)", "class_method_signature": "ApplicationPublisher.addFactory(ObjectFactory factory)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/ApplicationPublisher.java"}, "focal_method": {"identifier": "publish", "parameters": "(Application application)", "modifiers": "public", "return": "void", "body": "public void publish(Application application) {\n        Set<Class<?>> classes = new LinkedHashSet<>();\n        Set<Class<?>> appClasses = application.getClasses();\n        if (appClasses != null) {\n            classes.addAll(appClasses);\n        }\n        if (application instanceof EverrestApplication) {\n            EverrestApplication everrest = (EverrestApplication)application;\n            for (Map.Entry<String, Class<?>> e : everrest.getResourceClasses().entrySet()) {\n                Class<?> clazz = e.getValue();\n                addResource(e.getKey(), clazz);\n                classes.remove(clazz);\n            }\n            for (Map.Entry<String, Object> e : everrest.getResourceSingletons().entrySet()) {\n                addResource(e.getKey(), e.getValue());\n            }\n            for (ObjectFactory<? extends ObjectModel> factory : everrest.getFactories()) {\n                addFactory(factory);\n                classes.remove(factory.getObjectModel().getObjectClass());\n            }\n        }\n        for (Class<?> clazz : classes) {\n            addPerRequest(clazz);\n        }\n        Set<Object> singletons = application.getSingletons();\n        if (singletons != null) {\n            for (Object instance : singletons) {\n                addSingleton(instance);\n            }\n        }\n    }", "signature": "void publish(Application application)", "full_signature": "public void publish(Application application)", "class_method_signature": "ApplicationPublisher.publish(Application application)", "testcase": false, "constructor": false, "invocations": ["getClasses", "addAll", "entrySet", "getResourceClasses", "getValue", "addResource", "getKey", "remove", "entrySet", "getResourceSingletons", "addResource", "getKey", "getValue", "getFactories", "addFactory", "remove", "getObjectClass", "getObjectModel", "addPerRequest", "getSingletons", "addSingleton"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}