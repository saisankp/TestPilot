{"test_class": {"identifier": "DataSourceManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DataSourceManagerTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DataSourceManagerTest.class)", "var_name": "logger"}], "file": "ch-commons-sql/src/test/java/com/cloudhopper/commons/sql/DataSourceManagerTest.java"}, "test_case": {"identifier": "createFailsWithMissingDefaultProperties", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createFailsWithMissingDefaultProperties() throws Exception {\n        DataSourceConfiguration config = new DataSourceConfiguration();\n\n        try {\n            DataSourceManager.create(config);\n            Assert.fail(\"create() should have failed\");\n        } catch (SQLConfigurationException e) {\n            // correct\n        }\n\n        config.setUsername(\"test\");\n        try {\n            DataSourceManager.create(config);\n            Assert.fail(\"create() should have failed\");\n        } catch (SQLConfigurationException e) {\n            // correct\n        }\n\n        config.setPassword(\"test\");\n        try {\n            DataSourceManager.create(config);\n            Assert.fail(\"create() should have failed\");\n        } catch (SQLConfigurationException e) {\n            // correct\n        }\n\n        config.setName(\"test\");\n        try {\n            DataSourceManager.create(config);\n            Assert.fail(\"create() should have failed\");\n        } catch (SQLConfigurationException e) {\n            // correct\n        }\n\n        // last required property, now it should succeed\n        config.setUrl(\"jdbc:mysql://localhost:3306/stratus001\");\n    }", "signature": "void createFailsWithMissingDefaultProperties()", "full_signature": "@Test public void createFailsWithMissingDefaultProperties()", "class_method_signature": "DataSourceManagerTest.createFailsWithMissingDefaultProperties()", "testcase": true, "constructor": false, "invocations": ["create", "fail", "setUsername", "create", "fail", "setPassword", "create", "fail", "setName", "create", "fail", "setUrl"]}, "focal_class": {"identifier": "DataSourceManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DataSourceManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DataSourceManager.class)", "var_name": "logger"}], "methods": [{"identifier": "DataSourceManager", "parameters": "()", "modifiers": "private", "return": "", "signature": " DataSourceManager()", "full_signature": "private  DataSourceManager()", "class_method_signature": "DataSourceManager.DataSourceManager()", "testcase": false, "constructor": true}, {"identifier": "verify", "parameters": "(DataSource ds)", "modifiers": "public static", "return": "void", "signature": "void verify(DataSource ds)", "full_signature": "public static void verify(DataSource ds)", "class_method_signature": "DataSourceManager.verify(DataSource ds)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(DataSourceConfiguration configuration)", "modifiers": "public static", "return": "DataSource", "signature": "DataSource create(DataSourceConfiguration configuration)", "full_signature": "public static DataSource create(DataSourceConfiguration configuration)", "class_method_signature": "DataSourceManager.create(DataSourceConfiguration configuration)", "testcase": false, "constructor": false}], "file": "ch-commons-sql/src/main/java/com/cloudhopper/commons/sql/DataSourceManager.java"}, "focal_method": {"identifier": "create", "parameters": "(DataSourceConfiguration configuration)", "modifiers": "public static", "return": "DataSource", "body": "public static DataSource create(DataSourceConfiguration configuration) throws SQLMissingDependencyException, SQLConfigurationException {\n        // verify all required properties are configured and set\n        configuration.validate();\n\n        // clone the configuration so we can save the properties used to create the ds\n        DataSourceConfiguration config = (DataSourceConfiguration)configuration.clone();\n\n        // verify database driver exists and try to register the database driver\n        try {\n            // create a new instance\n            Driver driver = (Driver)Class.forName(config.getDriver()).newInstance();\n            // put out some properties to save 'em?\n        } catch (Exception e) {\n            throw new SQLMissingDependencyException(\"Database driver '\" + config.getDriver() + \"' failed to load. Perhaps missing jar file?\", e);\n        }\n\n        // get the class responsible for creating the datasource\n        String adapterClass = config.getProvider().getAdapter();\n\n        // create a new instance of the adapter\n        DataSourceAdapter adapter = null;\n        try {\n            adapter = (DataSourceAdapter)Class.forName(adapterClass).newInstance();\n        } catch (Exception e) {\n            //throw new SQLConfigurationException(\"Invalid DataSourceAdapter class specified. Should be impossible error?\");\n            throw new SQLMissingDependencyException(\"DataSourceAdapter '\" + adapterClass + \"' failed to load. Perhaps missing jar file?\", e);\n        }\n\n        // delegate creating the new datasource to the adapter\n        ManagedDataSource mds = adapter.create(config);\n\n        // if the user requested this datasource to be added to jmx\n        if (config.getJmx()) {\n            // hmm... if jmx is turned on, let's register the MBean\n            MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n            try {\n                ObjectName name = new ObjectName(config.getJmxDomain() + \":type=ManagedDataSource,name=\" + config.getName());\n                mbs.registerMBean(mds, name);\n            } catch (Exception e) {\n                // log the error, but don't throw an exception for this datasource\n                logger.error(\"Error while attempting to register ManagedDataSourceMBean '\" + config.getName() + \"'\", e);\n            }\n        }\n\n        // return the datasource\n        return mds.getDataSource();\n    }", "signature": "DataSource create(DataSourceConfiguration configuration)", "full_signature": "public static DataSource create(DataSourceConfiguration configuration)", "class_method_signature": "DataSourceManager.create(DataSourceConfiguration configuration)", "testcase": false, "constructor": false, "invocations": ["validate", "clone", "newInstance", "forName", "getDriver", "getDriver", "getAdapter", "getProvider", "newInstance", "forName", "create", "getJmx", "getPlatformMBeanServer", "getJmxDomain", "getName", "registerMBean", "error", "getName", "getDataSource"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}