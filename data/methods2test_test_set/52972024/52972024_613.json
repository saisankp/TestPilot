{"test_class": {"identifier": "ResolveByNameIocStrategyTest", "superclass": "", "interfaces": "", "fields": [], "file": "CoreFeatures/IOC/ResolveByNameIocStrategy/src/test/java/info/smart_tools/smartactors/ioc/resolve_by_name_ioc_strategy/ResolveByNameIocStrategyTest.java"}, "test_case": {"identifier": "checkStrategyResolutionException", "parameters": "()", "modifiers": "@Test (expected = ResolveDependencyStrategyException.class) public", "return": "void", "body": "@Test (expected = ResolveDependencyStrategyException.class)\n    public void checkStrategyResolutionException()\n            throws Exception {\n        IResolveDependencyStrategy strategy = new ResolveByNameIocStrategy();\n        strategy.resolve(null);\n    }", "signature": "void checkStrategyResolutionException()", "full_signature": "@Test (expected = ResolveDependencyStrategyException.class) public void checkStrategyResolutionException()", "class_method_signature": "ResolveByNameIocStrategyTest.checkStrategyResolutionException()", "testcase": true, "constructor": false, "invocations": ["resolve"]}, "focal_class": {"identifier": "ResolveByNameIocStrategy", "superclass": "", "interfaces": "implements IResolveDependencyStrategy", "fields": [{"original_string": "private Map<String, IKey> storage = new ConcurrentHashMap<>();", "modifier": "private", "type": "Map<String, IKey>", "declarator": "storage = new ConcurrentHashMap<>()", "var_name": "storage"}], "methods": [{"identifier": "ResolveByNameIocStrategy", "parameters": "()", "modifiers": "public", "return": "", "signature": " ResolveByNameIocStrategy()", "full_signature": "public  ResolveByNameIocStrategy()", "class_method_signature": "ResolveByNameIocStrategy.ResolveByNameIocStrategy()", "testcase": false, "constructor": true}, {"identifier": "resolve", "parameters": "(final Object... args)", "modifiers": "@Override public", "return": "T", "signature": "T resolve(final Object... args)", "full_signature": "@Override public T resolve(final Object... args)", "class_method_signature": "ResolveByNameIocStrategy.resolve(final Object... args)", "testcase": false, "constructor": false}], "file": "CoreFeatures/IOC/ResolveByNameIocStrategy/src/main/java/info/smart_tools/smartactors/ioc/resolve_by_name_ioc_strategy/ResolveByNameIocStrategy.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final Object... args)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T resolve(final Object... args)\n            throws ResolveDependencyStrategyException {\n        try {\n            IKey result = storage.get((String) args[0]);\n            if (null == result) {\n                result = new Key((String) args[0]);\n                storage.put((String) args[0], result);\n            }\n            return (T) result;\n        } catch (Exception e) {\n            throw new ResolveDependencyStrategyException(\"Object resolution failed.\", e);\n        }\n    }", "signature": "T resolve(final Object... args)", "full_signature": "@Override public T resolve(final Object... args)", "class_method_signature": "ResolveByNameIocStrategy.resolve(final Object... args)", "testcase": false, "constructor": false, "invocations": ["get", "put"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}