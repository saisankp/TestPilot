{"test_class": {"identifier": "TestBoneCP", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BoneCP testClass;", "modifier": "private", "type": "BoneCP", "declarator": "testClass", "var_name": "testClass"}, {"original_string": "private BoneCPConfig mockConfig;", "modifier": "private", "type": "BoneCPConfig", "declarator": "mockConfig", "var_name": "mockConfig"}, {"original_string": "private ConnectionPartition mockPartition;", "modifier": "private", "type": "ConnectionPartition", "declarator": "mockPartition", "var_name": "mockPartition"}, {"original_string": "private ScheduledExecutorService mockKeepAliveScheduler;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "mockKeepAliveScheduler", "var_name": "mockKeepAliveScheduler"}, {"original_string": "private ExecutorService mockConnectionsScheduler;", "modifier": "private", "type": "ExecutorService", "declarator": "mockConnectionsScheduler", "var_name": "mockConnectionsScheduler"}, {"original_string": "private LinkedBlockingQueue<ConnectionHandle> mockConnectionHandles;", "modifier": "private", "type": "LinkedBlockingQueue<ConnectionHandle>", "declarator": "mockConnectionHandles", "var_name": "mockConnectionHandles"}, {"original_string": "private ConnectionHandle mockConnection;", "modifier": "private", "type": "ConnectionHandle", "declarator": "mockConnection", "var_name": "mockConnection"}, {"original_string": "private Lock mockLock;", "modifier": "private", "type": "Lock", "declarator": "mockLock", "var_name": "mockLock"}, {"original_string": "private Logger mockLogger;", "modifier": "private", "type": "Logger", "declarator": "mockLogger", "var_name": "mockLogger"}, {"original_string": "private DatabaseMetaData mockDatabaseMetadata;", "modifier": "private", "type": "DatabaseMetaData", "declarator": "mockDatabaseMetadata", "var_name": "mockDatabaseMetadata"}, {"original_string": "private MockResultSet mockResultSet;", "modifier": "private", "type": "MockResultSet", "declarator": "mockResultSet", "var_name": "mockResultSet"}, {"original_string": "private MockJDBCDriver driver;", "modifier": "private", "type": "MockJDBCDriver", "declarator": "driver", "var_name": "driver"}, {"original_string": "private BoneCP mockPool;", "modifier": "private", "type": "BoneCP", "declarator": "mockPool", "var_name": "mockPool"}], "file": "bonecp/src/test/java/com/jolbox/bonecp/TestBoneCP.java"}, "test_case": {"identifier": "testJMXRegisterWithName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testJMXRegisterWithName() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException, InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException{\n\t\tMBeanServer mockMbs = EasyMock.createNiceMock(MBeanServer.class);\n\t\tField field = testClass.getClass().getDeclaredField(\"mbs\");\n\t\tfield.setAccessible(true);\n\t\tfield.set(testClass, mockMbs);\n\t\texpect(mockConfig.getPoolName()).andReturn(\"poolName\").anyTimes();\n\t\tObjectInstance mockInstance = EasyMock.createNiceMock(ObjectInstance.class);\n\t\texpect(mockMbs.isRegistered((ObjectName)anyObject())).andReturn(false).anyTimes();\n\t\texpect(mockMbs.registerMBean(anyObject(), (ObjectName)anyObject())).andReturn(mockInstance).once().andThrow(new InstanceAlreadyExistsException()).once();\n\t\treplay(mockMbs, mockInstance, mockConfig);\n\t\ttestClass.registerUnregisterJMX(true);\n\t\tverify(mockMbs);\n\t}", "signature": "void testJMXRegisterWithName()", "full_signature": "@Test public void testJMXRegisterWithName()", "class_method_signature": "TestBoneCP.testJMXRegisterWithName()", "testcase": true, "constructor": false, "invocations": ["createNiceMock", "getDeclaredField", "getClass", "setAccessible", "set", "anyTimes", "andReturn", "expect", "getPoolName", "createNiceMock", "anyTimes", "andReturn", "expect", "isRegistered", "anyObject", "once", "andThrow", "once", "andReturn", "expect", "registerMBean", "anyObject", "anyObject", "replay", "registerUnregisterJMX", "verify"]}, "focal_class": {"identifier": "BoneCP", "superclass": "", "interfaces": "implements Serializable, Closeable", "fields": [{"original_string": "private static final String THREAD_CLOSE_CONNECTION_WARNING = \"Thread close connection monitoring has been enabled. This will negatively impact on your performance. Only enable this option for debugging purposes!\";", "modifier": "private static final", "type": "String", "declarator": "THREAD_CLOSE_CONNECTION_WARNING = \"Thread close connection monitoring has been enabled. This will negatively impact on your performance. Only enable this option for debugging purposes!\"", "var_name": "THREAD_CLOSE_CONNECTION_WARNING"}, {"original_string": "private static final long serialVersionUID = -8386816681977604817L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -8386816681977604817L", "var_name": "serialVersionUID"}, {"original_string": "private static final String ERROR_TEST_CONNECTION = \"Unable to open a test connection to the given database. JDBC url = %s, username = %s. Terminating connection pool (set lazyInit to true if you expect to start your database after your app). Original Exception: %s\";", "modifier": "private static final", "type": "String", "declarator": "ERROR_TEST_CONNECTION = \"Unable to open a test connection to the given database. JDBC url = %s, username = %s. Terminating connection pool (set lazyInit to true if you expect to start your database after your app). Original Exception: %s\"", "var_name": "ERROR_TEST_CONNECTION"}, {"original_string": "private static final String SHUTDOWN_LOCATION_TRACE = \"Attempting to obtain a connection from a pool that has already been shutdown. \\nStack trace of location where pool was shutdown follows:\\n\";", "modifier": "private static final", "type": "String", "declarator": "SHUTDOWN_LOCATION_TRACE = \"Attempting to obtain a connection from a pool that has already been shutdown. \\nStack trace of location where pool was shutdown follows:\\n\"", "var_name": "SHUTDOWN_LOCATION_TRACE"}, {"original_string": "private static final String UNCLOSED_EXCEPTION_MESSAGE = \"Connection obtained from thread [%s] was never closed. \\nStack trace of location where connection was obtained follows:\\n\";", "modifier": "private static final", "type": "String", "declarator": "UNCLOSED_EXCEPTION_MESSAGE = \"Connection obtained from thread [%s] was never closed. \\nStack trace of location where connection was obtained follows:\\n\"", "var_name": "UNCLOSED_EXCEPTION_MESSAGE"}, {"original_string": "public static final String MBEAN_CONFIG = \"com.jolbox.bonecp:type=BoneCPConfig\";", "modifier": "public static final", "type": "String", "declarator": "MBEAN_CONFIG = \"com.jolbox.bonecp:type=BoneCPConfig\"", "var_name": "MBEAN_CONFIG"}, {"original_string": "public static final String MBEAN_BONECP = \"com.jolbox.bonecp:type=BoneCP\";", "modifier": "public static final", "type": "String", "declarator": "MBEAN_BONECP = \"com.jolbox.bonecp:type=BoneCP\"", "var_name": "MBEAN_BONECP"}, {"original_string": "private static final String[] METADATATABLE = new String[] {\"TABLE\"};", "modifier": "private static final", "type": "String[]", "declarator": "METADATATABLE = new String[] {\"TABLE\"}", "var_name": "METADATATABLE"}, {"original_string": "private static final String KEEPALIVEMETADATA = \"BONECPKEEPALIVE\";", "modifier": "private static final", "type": "String", "declarator": "KEEPALIVEMETADATA = \"BONECPKEEPALIVE\"", "var_name": "KEEPALIVEMETADATA"}, {"original_string": "protected final int poolAvailabilityThreshold;", "modifier": "protected final", "type": "int", "declarator": "poolAvailabilityThreshold", "var_name": "poolAvailabilityThreshold"}, {"original_string": "protected int partitionCount;", "modifier": "protected", "type": "int", "declarator": "partitionCount", "var_name": "partitionCount"}, {"original_string": "protected ConnectionPartition[] partitions;", "modifier": "protected", "type": "ConnectionPartition[]", "declarator": "partitions", "var_name": "partitions"}, {"original_string": "@VisibleForTesting protected ScheduledExecutorService keepAliveScheduler;", "modifier": "@VisibleForTesting protected", "type": "ScheduledExecutorService", "declarator": "keepAliveScheduler", "var_name": "keepAliveScheduler"}, {"original_string": "private ScheduledExecutorService maxAliveScheduler;", "modifier": "private", "type": "ScheduledExecutorService", "declarator": "maxAliveScheduler", "var_name": "maxAliveScheduler"}, {"original_string": "private ExecutorService connectionsScheduler;", "modifier": "private", "type": "ExecutorService", "declarator": "connectionsScheduler", "var_name": "connectionsScheduler"}, {"original_string": "@VisibleForTesting protected BoneCPConfig config;", "modifier": "@VisibleForTesting protected", "type": "BoneCPConfig", "declarator": "config", "var_name": "config"}, {"original_string": "private ListeningExecutorService asyncExecutor;", "modifier": "private", "type": "ListeningExecutorService", "declarator": "asyncExecutor", "var_name": "asyncExecutor"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(BoneCP.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(BoneCP.class)", "var_name": "logger"}, {"original_string": "private MBeanServer mbs;", "modifier": "private", "type": "MBeanServer", "declarator": "mbs", "var_name": "mbs"}, {"original_string": "protected boolean closeConnectionWatch = false;", "modifier": "protected", "type": "boolean", "declarator": "closeConnectionWatch = false", "var_name": "closeConnectionWatch"}, {"original_string": "private ExecutorService closeConnectionExecutor;", "modifier": "private", "type": "ExecutorService", "declarator": "closeConnectionExecutor", "var_name": "closeConnectionExecutor"}, {"original_string": "protected volatile boolean poolShuttingDown;", "modifier": "protected volatile", "type": "boolean", "declarator": "poolShuttingDown", "var_name": "poolShuttingDown"}, {"original_string": "protected String shutdownStackTrace;", "modifier": "protected", "type": "String", "declarator": "shutdownStackTrace", "var_name": "shutdownStackTrace"}, {"original_string": "private final Map<Connection, Reference<ConnectionHandle>> finalizableRefs = new ConcurrentHashMap<Connection, Reference<ConnectionHandle>>();", "modifier": "private final", "type": "Map<Connection, Reference<ConnectionHandle>>", "declarator": "finalizableRefs = new ConcurrentHashMap<Connection, Reference<ConnectionHandle>>()", "var_name": "finalizableRefs"}, {"original_string": "private transient FinalizableReferenceQueue finalizableRefQueue;", "modifier": "private transient", "type": "FinalizableReferenceQueue", "declarator": "finalizableRefQueue", "var_name": "finalizableRefQueue"}, {"original_string": "protected long connectionTimeoutInMs;", "modifier": "protected", "type": "long", "declarator": "connectionTimeoutInMs", "var_name": "connectionTimeoutInMs"}, {"original_string": "private long closeConnectionWatchTimeoutInMs;", "modifier": "private", "type": "long", "declarator": "closeConnectionWatchTimeoutInMs", "var_name": "closeConnectionWatchTimeoutInMs"}, {"original_string": "protected boolean statisticsEnabled;", "modifier": "protected", "type": "boolean", "declarator": "statisticsEnabled", "var_name": "statisticsEnabled"}, {"original_string": "protected Statistics statistics = new Statistics(this);", "modifier": "protected", "type": "Statistics", "declarator": "statistics = new Statistics(this)", "var_name": "statistics"}, {"original_string": "@VisibleForTesting protected boolean nullOnConnectionTimeout;", "modifier": "@VisibleForTesting protected", "type": "boolean", "declarator": "nullOnConnectionTimeout", "var_name": "nullOnConnectionTimeout"}, {"original_string": "@VisibleForTesting\n\tprotected boolean resetConnectionOnClose;", "modifier": "@VisibleForTesting\n\tprotected", "type": "boolean", "declarator": "resetConnectionOnClose", "var_name": "resetConnectionOnClose"}, {"original_string": "protected boolean cachedPoolStrategy;", "modifier": "protected", "type": "boolean", "declarator": "cachedPoolStrategy", "var_name": "cachedPoolStrategy"}, {"original_string": "protected ConnectionStrategy connectionStrategy;", "modifier": "protected", "type": "ConnectionStrategy", "declarator": "connectionStrategy", "var_name": "connectionStrategy"}, {"original_string": "private AtomicBoolean dbIsDown = new AtomicBoolean();", "modifier": "private", "type": "AtomicBoolean", "declarator": "dbIsDown = new AtomicBoolean()", "var_name": "dbIsDown"}, {"original_string": "@VisibleForTesting protected Properties clientInfo;", "modifier": "@VisibleForTesting protected", "type": "Properties", "declarator": "clientInfo", "var_name": "clientInfo"}, {"original_string": "@VisibleForTesting protected volatile boolean driverInitialized = false;", "modifier": "@VisibleForTesting protected volatile", "type": "boolean", "declarator": "driverInitialized = false", "var_name": "driverInitialized"}, {"original_string": "protected int jvmMajorVersion;", "modifier": "protected", "type": "int", "declarator": "jvmMajorVersion", "var_name": "jvmMajorVersion"}, {"original_string": "protected static String connectionClass = \"java.sql.Connection\";", "modifier": "protected static", "type": "String", "declarator": "connectionClass = \"java.sql.Connection\"", "var_name": "connectionClass"}], "methods": [{"identifier": "shutdown", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void shutdown()", "full_signature": "public synchronized void shutdown()", "class_method_signature": "BoneCP.shutdown()", "testcase": false, "constructor": false}, {"identifier": "unregisterDriver", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void unregisterDriver()", "full_signature": "protected void unregisterDriver()", "class_method_signature": "BoneCP.unregisterDriver()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "BoneCP.close()", "testcase": false, "constructor": false}, {"identifier": "destroyConnection", "parameters": "(ConnectionHandle conn)", "modifiers": "protected", "return": "void", "signature": "void destroyConnection(ConnectionHandle conn)", "full_signature": "protected void destroyConnection(ConnectionHandle conn)", "class_method_signature": "BoneCP.destroyConnection(ConnectionHandle conn)", "testcase": false, "constructor": false}, {"identifier": "postDestroyConnection", "parameters": "(ConnectionHandle handle)", "modifiers": "protected", "return": "void", "signature": "void postDestroyConnection(ConnectionHandle handle)", "full_signature": "protected void postDestroyConnection(ConnectionHandle handle)", "class_method_signature": "BoneCP.postDestroyConnection(ConnectionHandle handle)", "testcase": false, "constructor": false}, {"identifier": "obtainInternalConnection", "parameters": "(ConnectionHandle connectionHandle)", "modifiers": "protected", "return": "Connection", "signature": "Connection obtainInternalConnection(ConnectionHandle connectionHandle)", "full_signature": "protected Connection obtainInternalConnection(ConnectionHandle connectionHandle)", "class_method_signature": "BoneCP.obtainInternalConnection(ConnectionHandle connectionHandle)", "testcase": false, "constructor": false}, {"identifier": "obtainRawInternalConnection", "parameters": "()", "modifiers": "protected", "return": "Connection", "signature": "Connection obtainRawInternalConnection()", "full_signature": "protected Connection obtainRawInternalConnection()", "class_method_signature": "BoneCP.obtainRawInternalConnection()", "testcase": false, "constructor": false}, {"identifier": "BoneCP", "parameters": "(BoneCPConfig config)", "modifiers": "public", "return": "", "signature": " BoneCP(BoneCPConfig config)", "full_signature": "public  BoneCP(BoneCPConfig config)", "class_method_signature": "BoneCP.BoneCP(BoneCPConfig config)", "testcase": false, "constructor": true}, {"identifier": "registerUnregisterJMX", "parameters": "(boolean doRegister)", "modifiers": "protected", "return": "void", "signature": "void registerUnregisterJMX(boolean doRegister)", "full_signature": "protected void registerUnregisterJMX(boolean doRegister)", "class_method_signature": "BoneCP.registerUnregisterJMX(boolean doRegister)", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "()", "modifiers": "public", "return": "Connection", "signature": "Connection getConnection()", "full_signature": "public Connection getConnection()", "class_method_signature": "BoneCP.getConnection()", "testcase": false, "constructor": false}, {"identifier": "watchConnection", "parameters": "(ConnectionHandle connectionHandle)", "modifiers": "protected", "return": "void", "signature": "void watchConnection(ConnectionHandle connectionHandle)", "full_signature": "protected void watchConnection(ConnectionHandle connectionHandle)", "class_method_signature": "BoneCP.watchConnection(ConnectionHandle connectionHandle)", "testcase": false, "constructor": false}, {"identifier": "captureStackTrace", "parameters": "(String message)", "modifiers": "protected", "return": "String", "signature": "String captureStackTrace(String message)", "full_signature": "protected String captureStackTrace(String message)", "class_method_signature": "BoneCP.captureStackTrace(String message)", "testcase": false, "constructor": false}, {"identifier": "getAsyncConnection", "parameters": "()", "modifiers": "public", "return": "ListenableFuture<Connection>", "signature": "ListenableFuture<Connection> getAsyncConnection()", "full_signature": "public ListenableFuture<Connection> getAsyncConnection()", "class_method_signature": "BoneCP.getAsyncConnection()", "testcase": false, "constructor": false}, {"identifier": "maybeSignalForMoreConnections", "parameters": "(ConnectionPartition connectionPartition)", "modifiers": "protected", "return": "void", "signature": "void maybeSignalForMoreConnections(ConnectionPartition connectionPartition)", "full_signature": "protected void maybeSignalForMoreConnections(ConnectionPartition connectionPartition)", "class_method_signature": "BoneCP.maybeSignalForMoreConnections(ConnectionPartition connectionPartition)", "testcase": false, "constructor": false}, {"identifier": "releaseConnection", "parameters": "(Connection connection)", "modifiers": "protected", "return": "void", "signature": "void releaseConnection(Connection connection)", "full_signature": "protected void releaseConnection(Connection connection)", "class_method_signature": "BoneCP.releaseConnection(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "internalReleaseConnection", "parameters": "(ConnectionHandle connectionHandle)", "modifiers": "protected", "return": "void", "signature": "void internalReleaseConnection(ConnectionHandle connectionHandle)", "full_signature": "protected void internalReleaseConnection(ConnectionHandle connectionHandle)", "class_method_signature": "BoneCP.internalReleaseConnection(ConnectionHandle connectionHandle)", "testcase": false, "constructor": false}, {"identifier": "putConnectionBackInPartition", "parameters": "(ConnectionHandle connectionHandle)", "modifiers": "protected", "return": "void", "signature": "void putConnectionBackInPartition(ConnectionHandle connectionHandle)", "full_signature": "protected void putConnectionBackInPartition(ConnectionHandle connectionHandle)", "class_method_signature": "BoneCP.putConnectionBackInPartition(ConnectionHandle connectionHandle)", "testcase": false, "constructor": false}, {"identifier": "isConnectionHandleAlive", "parameters": "(ConnectionHandle connection)", "modifiers": "public", "return": "boolean", "signature": "boolean isConnectionHandleAlive(ConnectionHandle connection)", "full_signature": "public boolean isConnectionHandleAlive(ConnectionHandle connection)", "class_method_signature": "BoneCP.isConnectionHandleAlive(ConnectionHandle connection)", "testcase": false, "constructor": false}, {"identifier": "closeStatement", "parameters": "(Statement stmt, boolean result)", "modifiers": "private", "return": "boolean", "signature": "boolean closeStatement(Statement stmt, boolean result)", "full_signature": "private boolean closeStatement(Statement stmt, boolean result)", "class_method_signature": "BoneCP.closeStatement(Statement stmt, boolean result)", "testcase": false, "constructor": false}, {"identifier": "getTotalLeased", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTotalLeased()", "full_signature": "public int getTotalLeased()", "class_method_signature": "BoneCP.getTotalLeased()", "testcase": false, "constructor": false}, {"identifier": "getTotalFree", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTotalFree()", "full_signature": "public int getTotalFree()", "class_method_signature": "BoneCP.getTotalFree()", "testcase": false, "constructor": false}, {"identifier": "getTotalCreatedConnections", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTotalCreatedConnections()", "full_signature": "public int getTotalCreatedConnections()", "class_method_signature": "BoneCP.getTotalCreatedConnections()", "testcase": false, "constructor": false}, {"identifier": "getConfig", "parameters": "()", "modifiers": "public", "return": "BoneCPConfig", "signature": "BoneCPConfig getConfig()", "full_signature": "public BoneCPConfig getConfig()", "class_method_signature": "BoneCP.getConfig()", "testcase": false, "constructor": false}, {"identifier": "getFinalizableRefs", "parameters": "()", "modifiers": "protected", "return": "Map<Connection, Reference<ConnectionHandle>>", "signature": "Map<Connection, Reference<ConnectionHandle>> getFinalizableRefs()", "full_signature": "protected Map<Connection, Reference<ConnectionHandle>> getFinalizableRefs()", "class_method_signature": "BoneCP.getFinalizableRefs()", "testcase": false, "constructor": false}, {"identifier": "getFinalizableRefQueue", "parameters": "()", "modifiers": "protected", "return": "FinalizableReferenceQueue", "signature": "FinalizableReferenceQueue getFinalizableRefQueue()", "full_signature": "protected FinalizableReferenceQueue getFinalizableRefQueue()", "class_method_signature": "BoneCP.getFinalizableRefQueue()", "testcase": false, "constructor": false}, {"identifier": "getStatistics", "parameters": "()", "modifiers": "public", "return": "Statistics", "signature": "Statistics getStatistics()", "full_signature": "public Statistics getStatistics()", "class_method_signature": "BoneCP.getStatistics()", "testcase": false, "constructor": false}, {"identifier": "getDbIsDown", "parameters": "()", "modifiers": "public", "return": "AtomicBoolean", "signature": "AtomicBoolean getDbIsDown()", "full_signature": "public AtomicBoolean getDbIsDown()", "class_method_signature": "BoneCP.getDbIsDown()", "testcase": false, "constructor": false}], "file": "bonecp/src/main/java/com/jolbox/bonecp/BoneCP.java"}, "focal_method": {"identifier": "registerUnregisterJMX", "parameters": "(boolean doRegister)", "modifiers": "protected", "return": "void", "body": "protected void registerUnregisterJMX(boolean doRegister) {\n\t\tif (this.mbs == null ){ // this way makes it easier for mocking.\n\t\t\tthis.mbs = ManagementFactory.getPlatformMBeanServer();\n\t\t}\n\t\ttry {\n\t\t\tString suffix = \"\";\n\n\t\t\tif (this.config.getPoolName()!=null){\n\t\t\t\tsuffix=\"-\"+this.config.getPoolName();\n\t\t\t}\n\n\t\t\tObjectName name = new ObjectName(MBEAN_BONECP +suffix);\n\t\t\tObjectName configname = new ObjectName(MBEAN_CONFIG + suffix);\n\n\n\t\t\tif (doRegister){\n\t\t\t\tif (!this.mbs.isRegistered(name)){\n\t\t\t\t\tthis.mbs.registerMBean(this.statistics, name);\n\t\t\t\t}\n\t\t\t\tif (!this.mbs.isRegistered(configname)){\n\t\t\t\t\tthis.mbs.registerMBean(this.config, configname);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this.mbs.isRegistered(name)){\n\t\t\t\t\tthis.mbs.unregisterMBean(name);\n\t\t\t\t}\n\t\t\t\tif (this.mbs.isRegistered(configname)){\n\t\t\t\t\tthis.mbs.unregisterMBean(configname);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Unable to start/stop JMX\", e);\n\t\t}\n\t}", "signature": "void registerUnregisterJMX(boolean doRegister)", "full_signature": "protected void registerUnregisterJMX(boolean doRegister)", "class_method_signature": "BoneCP.registerUnregisterJMX(boolean doRegister)", "testcase": false, "constructor": false, "invocations": ["getPlatformMBeanServer", "getPoolName", "getPoolName", "isRegistered", "registerMBean", "isRegistered", "registerMBean", "isRegistered", "unregisterMBean", "isRegistered", "unregisterMBean", "error"]}, "repository": {"repo_id": 466142, "url": "https://github.com/wwadge/bonecp", "language": "Java", "is_fork": false, "fork_count": 161, "stargazer_count": 544, "size": 3833, "license": "licensed"}}