{"test_class": {"identifier": "ObservableExtTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int DELAY_MS = 100;", "modifier": "private static final", "type": "int", "declarator": "DELAY_MS = 100", "var_name": "DELAY_MS"}, {"original_string": "private final TestScheduler testScheduler = Schedulers.test();", "modifier": "private final", "type": "TestScheduler", "declarator": "testScheduler = Schedulers.test()", "var_name": "testScheduler"}, {"original_string": "private final ExtTestSubscriber<Object> testSubscriber = new ExtTestSubscriber<>();", "modifier": "private final", "type": "ExtTestSubscriber<Object>", "declarator": "testSubscriber = new ExtTestSubscriber<>()", "var_name": "testSubscriber"}, {"original_string": "private final Object A = new Object(),\n            B = new Object(),\n            C = new Object(),\n            D = new Object(),\n            E = new Object(),\n            F = new Object();", "modifier": "private final", "type": "Object", "declarator": "A = new Object()", "var_name": "A"}], "file": "titus-common/src/test/java/com/netflix/titus/common/util/rx/ObservableExtTest.java"}, "test_case": {"identifier": "testFromWithDelayEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFromWithDelayEmpty() {\n        final List<Observable<Object>> chunks = Collections.emptyList();\n        Observable<Object> observable = ObservableExt.fromWithDelay(chunks, DELAY_MS, TimeUnit.MILLISECONDS, testScheduler);\n        observable = observable.defaultIfEmpty(B);\n\n        observable.subscribe(testSubscriber);\n\n        assertThat(testSubscriber.takeNext()).isSameAs(B);\n        assertThat(testSubscriber.takeNext()).isNull();\n    }", "signature": "void testFromWithDelayEmpty()", "full_signature": "@Test public void testFromWithDelayEmpty()", "class_method_signature": "ObservableExtTest.testFromWithDelayEmpty()", "testcase": true, "constructor": false, "invocations": ["emptyList", "fromWithDelay", "defaultIfEmpty", "subscribe", "isSameAs", "assertThat", "takeNext", "isNull", "assertThat", "takeNext"]}, "focal_class": {"identifier": "ObservableExt", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "fromCallable", "parameters": "(Supplier<Collection<T>> supplier)", "modifiers": "public static", "return": "Observable<T>", "signature": "Observable<T> fromCallable(Supplier<Collection<T>> supplier)", "full_signature": "public static Observable<T> fromCallable(Supplier<Collection<T>> supplier)", "class_method_signature": "ObservableExt.fromCallable(Supplier<Collection<T>> supplier)", "testcase": false, "constructor": false}, {"identifier": "fromCallableSupplier", "parameters": "(Callable<Completable> completableSupplier)", "modifiers": "public static", "return": "Completable", "signature": "Completable fromCallableSupplier(Callable<Completable> completableSupplier)", "full_signature": "public static Completable fromCallableSupplier(Callable<Completable> completableSupplier)", "class_method_signature": "ObservableExt.fromCallableSupplier(Callable<Completable> completableSupplier)", "testcase": false, "constructor": false}, {"identifier": "toObservable", "parameters": "(Future<T> future, Scheduler scheduler)", "modifiers": "public static", "return": "Observable<T>", "signature": "Observable<T> toObservable(Future<T> future, Scheduler scheduler)", "full_signature": "public static Observable<T> toObservable(Future<T> future, Scheduler scheduler)", "class_method_signature": "ObservableExt.toObservable(Future<T> future, Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "fromWithDelay", "parameters": "(List<Observable<T>> chunks, long delay, TimeUnit timeUnit, Scheduler scheduler)", "modifiers": "public static", "return": "Observable<T>", "signature": "Observable<T> fromWithDelay(List<Observable<T>> chunks, long delay, TimeUnit timeUnit, Scheduler scheduler)", "full_signature": "public static Observable<T> fromWithDelay(List<Observable<T>> chunks, long delay, TimeUnit timeUnit, Scheduler scheduler)", "class_method_signature": "ObservableExt.fromWithDelay(List<Observable<T>> chunks, long delay, TimeUnit timeUnit, Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "fromCollection", "parameters": "(Supplier<Collection<T>> listProvider)", "modifiers": "public static", "return": "Observable<T>", "signature": "Observable<T> fromCollection(Supplier<Collection<T>> listProvider)", "full_signature": "public static Observable<T> fromCollection(Supplier<Collection<T>> listProvider)", "class_method_signature": "ObservableExt.fromCollection(Supplier<Collection<T>> listProvider)", "testcase": false, "constructor": false}, {"identifier": "head", "parameters": "(Supplier<Collection<T>> headSupplier)", "modifiers": "public static", "return": "Observable.Transformer<T, T>", "signature": "Observable.Transformer<T, T> head(Supplier<Collection<T>> headSupplier)", "full_signature": "public static Observable.Transformer<T, T> head(Supplier<Collection<T>> headSupplier)", "class_method_signature": "ObservableExt.head(Supplier<Collection<T>> headSupplier)", "testcase": false, "constructor": false}, {"identifier": "combine", "parameters": "(Supplier<S> stateFactory)", "modifiers": "public static", "return": "Observable.Transformer<T, Pair<T, S>>", "signature": "Observable.Transformer<T, Pair<T, S>> combine(Supplier<S> stateFactory)", "full_signature": "public static Observable.Transformer<T, Pair<T, S>> combine(Supplier<S> stateFactory)", "class_method_signature": "ObservableExt.combine(Supplier<S> stateFactory)", "testcase": false, "constructor": false}, {"identifier": "mapWithState", "parameters": "(S zero, BiFunction<T, S, Pair<R, S>> transformer)", "modifiers": "public static", "return": "Observable.Transformer<T, R>", "signature": "Observable.Transformer<T, R> mapWithState(S zero, BiFunction<T, S, Pair<R, S>> transformer)", "full_signature": "public static Observable.Transformer<T, R> mapWithState(S zero, BiFunction<T, S, Pair<R, S>> transformer)", "class_method_signature": "ObservableExt.mapWithState(S zero, BiFunction<T, S, Pair<R, S>> transformer)", "testcase": false, "constructor": false}, {"identifier": "mapWithState", "parameters": "(Supplier<S> zeroSupplier, BiFunction<T, S, Pair<R, S>> transformer)", "modifiers": "public static", "return": "Observable.Transformer<T, R>", "signature": "Observable.Transformer<T, R> mapWithState(Supplier<S> zeroSupplier, BiFunction<T, S, Pair<R, S>> transformer)", "full_signature": "public static Observable.Transformer<T, R> mapWithState(Supplier<S> zeroSupplier, BiFunction<T, S, Pair<R, S>> transformer)", "class_method_signature": "ObservableExt.mapWithState(Supplier<S> zeroSupplier, BiFunction<T, S, Pair<R, S>> transformer)", "testcase": false, "constructor": false}, {"identifier": "mapWithState", "parameters": "(S zero,\n                                                                      BiFunction<T, S, Pair<R, S>> transformer,\n                                                                      Observable<Function<S, Pair<R, S>>> cleanupActions)", "modifiers": "public static", "return": "Observable.Transformer<T, R>", "signature": "Observable.Transformer<T, R> mapWithState(S zero,\n                                                                      BiFunction<T, S, Pair<R, S>> transformer,\n                                                                      Observable<Function<S, Pair<R, S>>> cleanupActions)", "full_signature": "public static Observable.Transformer<T, R> mapWithState(S zero,\n                                                                      BiFunction<T, S, Pair<R, S>> transformer,\n                                                                      Observable<Function<S, Pair<R, S>>> cleanupActions)", "class_method_signature": "ObservableExt.mapWithState(S zero,\n                                                                      BiFunction<T, S, Pair<R, S>> transformer,\n                                                                      Observable<Function<S, Pair<R, S>>> cleanupActions)", "testcase": false, "constructor": false}, {"identifier": "subscriptionTimeout", "parameters": "(Supplier<Long> timeout, TimeUnit unit, Scheduler scheduler)", "modifiers": "public static", "return": "Observable.Transformer<T, T>", "signature": "Observable.Transformer<T, T> subscriptionTimeout(Supplier<Long> timeout, TimeUnit unit, Scheduler scheduler)", "full_signature": "public static Observable.Transformer<T, T> subscriptionTimeout(Supplier<Long> timeout, TimeUnit unit, Scheduler scheduler)", "class_method_signature": "ObservableExt.subscriptionTimeout(Supplier<Long> timeout, TimeUnit unit, Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "emitError", "parameters": "(Observable<?> source)", "modifiers": "public static", "return": "Single<Optional<Throwable>>", "signature": "Single<Optional<Throwable>> emitError(Observable<?> source)", "full_signature": "public static Single<Optional<Throwable>> emitError(Observable<?> source)", "class_method_signature": "ObservableExt.emitError(Observable<?> source)", "testcase": false, "constructor": false}, {"identifier": "batchWithRateLimit", "parameters": "(RateLimitedBatcher<T, I> batcher,\n                                                              String metricsRootName,\n                                                              Registry registry)", "modifiers": "public static", "return": "Observable.Transformer<T, Batch<T, I>>", "signature": "Observable.Transformer<T, Batch<T, I>> batchWithRateLimit(RateLimitedBatcher<T, I> batcher,\n                                                              String metricsRootName,\n                                                              Registry registry)", "full_signature": "public static Observable.Transformer<T, Batch<T, I>> batchWithRateLimit(RateLimitedBatcher<T, I> batcher,\n                                                              String metricsRootName,\n                                                              Registry registry)", "class_method_signature": "ObservableExt.batchWithRateLimit(RateLimitedBatcher<T, I> batcher,\n                                                              String metricsRootName,\n                                                              Registry registry)", "testcase": false, "constructor": false}, {"identifier": "batchWithRateLimit", "parameters": "(RateLimitedBatcher<T, I> batcher,\n                                                              String metricsRootName,\n                                                              List<Tag> tags,\n                                                              Registry registry)", "modifiers": "public static", "return": "Observable.Transformer<T, Batch<T, I>>", "signature": "Observable.Transformer<T, Batch<T, I>> batchWithRateLimit(RateLimitedBatcher<T, I> batcher,\n                                                              String metricsRootName,\n                                                              List<Tag> tags,\n                                                              Registry registry)", "full_signature": "public static Observable.Transformer<T, Batch<T, I>> batchWithRateLimit(RateLimitedBatcher<T, I> batcher,\n                                                              String metricsRootName,\n                                                              List<Tag> tags,\n                                                              Registry registry)", "class_method_signature": "ObservableExt.batchWithRateLimit(RateLimitedBatcher<T, I> batcher,\n                                                              String metricsRootName,\n                                                              List<Tag> tags,\n                                                              Registry registry)", "testcase": false, "constructor": false}, {"identifier": "emitError", "parameters": "(Completable source)", "modifiers": "public static", "return": "Single<Optional<Throwable>>", "signature": "Single<Optional<Throwable>> emitError(Completable source)", "full_signature": "public static Single<Optional<Throwable>> emitError(Completable source)", "class_method_signature": "ObservableExt.emitError(Completable source)", "testcase": false, "constructor": false}, {"identifier": "generatorFrom", "parameters": "(Supplier<T> source)", "modifiers": "public static", "return": "Observable<T>", "signature": "Observable<T> generatorFrom(Supplier<T> source)", "full_signature": "public static Observable<T> generatorFrom(Supplier<T> source)", "class_method_signature": "ObservableExt.generatorFrom(Supplier<T> source)", "testcase": false, "constructor": false}, {"identifier": "generatorFrom", "parameters": "(Function<Long, T> source, Scheduler scheduler)", "modifiers": "public static", "return": "Observable<T>", "signature": "Observable<T> generatorFrom(Function<Long, T> source, Scheduler scheduler)", "full_signature": "public static Observable<T> generatorFrom(Function<Long, T> source, Scheduler scheduler)", "class_method_signature": "ObservableExt.generatorFrom(Function<Long, T> source, Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "periodicGenerator", "parameters": "(Observable<T> sourceObservable,\n                                                            long initialDelay,\n                                                            long interval,\n                                                            TimeUnit timeUnit,\n                                                            Scheduler scheduler)", "modifiers": "public static", "return": "Observable<List<T>>", "signature": "Observable<List<T>> periodicGenerator(Observable<T> sourceObservable,\n                                                            long initialDelay,\n                                                            long interval,\n                                                            TimeUnit timeUnit,\n                                                            Scheduler scheduler)", "full_signature": "public static Observable<List<T>> periodicGenerator(Observable<T> sourceObservable,\n                                                            long initialDelay,\n                                                            long interval,\n                                                            TimeUnit timeUnit,\n                                                            Scheduler scheduler)", "class_method_signature": "ObservableExt.periodicGenerator(Observable<T> sourceObservable,\n                                                            long initialDelay,\n                                                            long interval,\n                                                            TimeUnit timeUnit,\n                                                            Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "schedule", "parameters": "(String metricNameRoot,\n                                                           Registry registry,\n                                                           String completableName,\n                                                           Completable completable,\n                                                           long initialDelay,\n                                                           long interval,\n                                                           TimeUnit timeUnit,\n                                                           Scheduler scheduler)", "modifiers": "public static", "return": "Observable<Optional<Throwable>>", "signature": "Observable<Optional<Throwable>> schedule(String metricNameRoot,\n                                                           Registry registry,\n                                                           String completableName,\n                                                           Completable completable,\n                                                           long initialDelay,\n                                                           long interval,\n                                                           TimeUnit timeUnit,\n                                                           Scheduler scheduler)", "full_signature": "public static Observable<Optional<Throwable>> schedule(String metricNameRoot,\n                                                           Registry registry,\n                                                           String completableName,\n                                                           Completable completable,\n                                                           long initialDelay,\n                                                           long interval,\n                                                           TimeUnit timeUnit,\n                                                           Scheduler scheduler)", "class_method_signature": "ObservableExt.schedule(String metricNameRoot,\n                                                           Registry registry,\n                                                           String completableName,\n                                                           Completable completable,\n                                                           long initialDelay,\n                                                           long interval,\n                                                           TimeUnit timeUnit,\n                                                           Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "protectFromMissingExceptionHandlers", "parameters": "(Observable<T> unprotectedStream, Logger logger)", "modifiers": "public static", "return": "Observable<T>", "signature": "Observable<T> protectFromMissingExceptionHandlers(Observable<T> unprotectedStream, Logger logger)", "full_signature": "public static Observable<T> protectFromMissingExceptionHandlers(Observable<T> unprotectedStream, Logger logger)", "class_method_signature": "ObservableExt.protectFromMissingExceptionHandlers(Observable<T> unprotectedStream, Logger logger)", "testcase": false, "constructor": false}, {"identifier": "onBackpressureDropAndNotify", "parameters": "(Observable<T> unprotectedStream,\n                                                                long maxBufferSize,\n                                                                Consumer<Long> onDropAction,\n                                                                long notificationInterval,\n                                                                TimeUnit timeUnit)", "modifiers": "public static", "return": "Observable<T>", "signature": "Observable<T> onBackpressureDropAndNotify(Observable<T> unprotectedStream,\n                                                                long maxBufferSize,\n                                                                Consumer<Long> onDropAction,\n                                                                long notificationInterval,\n                                                                TimeUnit timeUnit)", "full_signature": "public static Observable<T> onBackpressureDropAndNotify(Observable<T> unprotectedStream,\n                                                                long maxBufferSize,\n                                                                Consumer<Long> onDropAction,\n                                                                long notificationInterval,\n                                                                TimeUnit timeUnit)", "class_method_signature": "ObservableExt.onBackpressureDropAndNotify(Observable<T> unprotectedStream,\n                                                                long maxBufferSize,\n                                                                Consumer<Long> onDropAction,\n                                                                long notificationInterval,\n                                                                TimeUnit timeUnit)", "testcase": false, "constructor": false}, {"identifier": "safeUnsubscribe", "parameters": "(Subscription... subscriptions)", "modifiers": "public static", "return": "void", "signature": "void safeUnsubscribe(Subscription... subscriptions)", "full_signature": "public static void safeUnsubscribe(Subscription... subscriptions)", "class_method_signature": "ObservableExt.safeUnsubscribe(Subscription... subscriptions)", "testcase": false, "constructor": false}, {"identifier": "silentSubscriber", "parameters": "()", "modifiers": "public static", "return": "Subscriber<T>", "signature": "Subscriber<T> silentSubscriber()", "full_signature": "public static Subscriber<T> silentSubscriber()", "class_method_signature": "ObservableExt.silentSubscriber()", "testcase": false, "constructor": false}, {"identifier": "createEventLoop", "parameters": "(String metricNameRoot, Registry registry, Scheduler scheduler)", "modifiers": "public static", "return": "InstrumentedEventLoop", "signature": "InstrumentedEventLoop createEventLoop(String metricNameRoot, Registry registry, Scheduler scheduler)", "full_signature": "public static InstrumentedEventLoop createEventLoop(String metricNameRoot, Registry registry, Scheduler scheduler)", "class_method_signature": "ObservableExt.createEventLoop(String metricNameRoot, Registry registry, Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "reemiter", "parameters": "(Function<T, T> transformer, long interval, TimeUnit timeUnit, Scheduler scheduler)", "modifiers": "public static", "return": "Observable.Transformer<T, T>", "signature": "Observable.Transformer<T, T> reemiter(Function<T, T> transformer, long interval, TimeUnit timeUnit, Scheduler scheduler)", "full_signature": "public static Observable.Transformer<T, T> reemiter(Function<T, T> transformer, long interval, TimeUnit timeUnit, Scheduler scheduler)", "class_method_signature": "ObservableExt.reemiter(Function<T, T> transformer, long interval, TimeUnit timeUnit, Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "propagate", "parameters": "(Observable<T> source, int outputs)", "modifiers": "public static", "return": "List<Observable<T>>", "signature": "List<Observable<T>> propagate(Observable<T> source, int outputs)", "full_signature": "public static List<Observable<T>> propagate(Observable<T> source, int outputs)", "class_method_signature": "ObservableExt.propagate(Observable<T> source, int outputs)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/rx/ObservableExt.java"}, "focal_method": {"identifier": "fromWithDelay", "parameters": "(List<Observable<T>> chunks, long delay, TimeUnit timeUnit, Scheduler scheduler)", "modifiers": "public static", "return": "Observable<T>", "body": "public static <T> Observable<T> fromWithDelay(List<Observable<T>> chunks, long delay, TimeUnit timeUnit, Scheduler scheduler) {\n        if (chunks.isEmpty()) {\n            return Observable.empty();\n        }\n        final Iterator<Observable<T>> chunkIterator = chunks.iterator();\n        Observable<T> result = chunkIterator.next();\n        while (chunkIterator.hasNext()) {\n            result = result.concatWith(chunkIterator.next().delay(delay, timeUnit, scheduler));\n        }\n        return result;\n    }", "signature": "Observable<T> fromWithDelay(List<Observable<T>> chunks, long delay, TimeUnit timeUnit, Scheduler scheduler)", "full_signature": "public static Observable<T> fromWithDelay(List<Observable<T>> chunks, long delay, TimeUnit timeUnit, Scheduler scheduler)", "class_method_signature": "ObservableExt.fromWithDelay(List<Observable<T>> chunks, long delay, TimeUnit timeUnit, Scheduler scheduler)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "empty", "iterator", "next", "hasNext", "concatWith", "delay", "next"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}