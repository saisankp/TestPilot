{"test_class": {"identifier": "StringUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "shared/src/test/java/org/eclipse/steady/shared/util/StringUtilTest.java"}, "test_case": {"identifier": "testJoin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testJoin() {\n    final String[] a = new String[] {\"a\", \"b\"};\n    final String j1 = StringUtil.join(a, \", \");\n    assertEquals(\"a, b\", j1);\n\n    final List<String> s = new ArrayList<String>();\n    s.add(\"1\");\n    s.add(\"2\");\n    final String j2 = StringUtil.join(s, \", \");\n    assertEquals(\"1, 2\", j2);\n  }", "signature": "void testJoin()", "full_signature": "@Test public void testJoin()", "class_method_signature": "StringUtilTest.testJoin()", "testcase": true, "constructor": false, "invocations": ["join", "assertEquals", "add", "add", "join", "assertEquals"]}, "focal_class": {"identifier": "StringUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final long KILOBYTE = 1024L;", "modifier": "public static final", "type": "long", "declarator": "KILOBYTE = 1024L", "var_name": "KILOBYTE"}, {"original_string": "public static final long MEGABYTE = 1024L * 1024L;", "modifier": "public static final", "type": "long", "declarator": "MEGABYTE = 1024L * 1024L", "var_name": "MEGABYTE"}, {"original_string": "public static final long MILLI_IN_MIN = 60L * 1000L;", "modifier": "public static final", "type": "long", "declarator": "MILLI_IN_MIN = 60L * 1000L", "var_name": "MILLI_IN_MIN"}, {"original_string": "public static final long NANOS_IN_MIN = 60L * 1000L * 1000L * 1000L;", "modifier": "public static final", "type": "long", "declarator": "NANOS_IN_MIN = 60L * 1000L * 1000L * 1000L", "var_name": "NANOS_IN_MIN"}, {"original_string": "private static final String FORMAT_STRING = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\";", "modifier": "private static final", "type": "String", "declarator": "FORMAT_STRING = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"", "var_name": "FORMAT_STRING"}, {"original_string": "private static final SimpleDateFormat FORMAT = new SimpleDateFormat(FORMAT_STRING);", "modifier": "private static final", "type": "SimpleDateFormat", "declarator": "FORMAT = new SimpleDateFormat(FORMAT_STRING)", "var_name": "FORMAT"}], "methods": [{"identifier": "formatMinString", "parameters": "(double _d)", "modifiers": "public static final", "return": "String", "signature": "String formatMinString(double _d)", "full_signature": "public static final String formatMinString(double _d)", "class_method_signature": "StringUtil.formatMinString(double _d)", "testcase": false, "constructor": false}, {"identifier": "formatMinString", "parameters": "(long _n)", "modifiers": "public static final", "return": "String", "signature": "String formatMinString(long _n)", "full_signature": "public static final String formatMinString(long _n)", "class_method_signature": "StringUtil.formatMinString(long _n)", "testcase": false, "constructor": false}, {"identifier": "formatMBString", "parameters": "(double _d)", "modifiers": "public static final", "return": "String", "signature": "String formatMBString(double _d)", "full_signature": "public static final String formatMBString(double _d)", "class_method_signature": "StringUtil.formatMBString(double _d)", "testcase": false, "constructor": false}, {"identifier": "formatKBString", "parameters": "(double _d)", "modifiers": "public static final", "return": "String", "signature": "String formatKBString(double _d)", "full_signature": "public static final String formatKBString(double _d)", "class_method_signature": "StringUtil.formatKBString(double _d)", "testcase": false, "constructor": false}, {"identifier": "byteToMBString", "parameters": "(double _bytes)", "modifiers": "public static final", "return": "String", "signature": "String byteToMBString(double _bytes)", "full_signature": "public static final String byteToMBString(double _bytes)", "class_method_signature": "StringUtil.byteToMBString(double _bytes)", "testcase": false, "constructor": false}, {"identifier": "byteToKBString", "parameters": "(long _bytes)", "modifiers": "public static final", "return": "String", "signature": "String byteToKBString(long _bytes)", "full_signature": "public static final String byteToKBString(long _bytes)", "class_method_signature": "StringUtil.byteToKBString(long _bytes)", "testcase": false, "constructor": false}, {"identifier": "byteToMBString", "parameters": "(long _bytes)", "modifiers": "public static final", "return": "String", "signature": "String byteToMBString(long _bytes)", "full_signature": "public static final String byteToMBString(long _bytes)", "class_method_signature": "StringUtil.byteToMBString(long _bytes)", "testcase": false, "constructor": false}, {"identifier": "formatDate", "parameters": "(long _ms)", "modifiers": "public static final synchronized", "return": "String", "signature": "String formatDate(long _ms)", "full_signature": "public static final synchronized String formatDate(long _ms)", "class_method_signature": "StringUtil.formatDate(long _ms)", "testcase": false, "constructor": false}, {"identifier": "nanoToMinString", "parameters": "(long _nano)", "modifiers": "@Deprecated public static final", "return": "String", "signature": "String nanoToMinString(long _nano)", "full_signature": "@Deprecated public static final String nanoToMinString(long _nano)", "class_method_signature": "StringUtil.nanoToMinString(long _nano)", "testcase": false, "constructor": false}, {"identifier": "nanoToFlexDurationString", "parameters": "(long _nano)", "modifiers": "public static final", "return": "String", "signature": "String nanoToFlexDurationString(long _nano)", "full_signature": "public static final String nanoToFlexDurationString(long _nano)", "class_method_signature": "StringUtil.nanoToFlexDurationString(long _nano)", "testcase": false, "constructor": false}, {"identifier": "msToMinString", "parameters": "(long _ms)", "modifiers": "public static final", "return": "String", "signature": "String msToMinString(long _ms)", "full_signature": "public static final String msToMinString(long _ms)", "class_method_signature": "StringUtil.msToMinString(long _ms)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Object[] _objs, String _sep)", "modifiers": "public static", "return": "String", "signature": "String join(Object[] _objs, String _sep)", "full_signature": "public static String join(Object[] _objs, String _sep)", "class_method_signature": "StringUtil.join(Object[] _objs, String _sep)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(String[] _strings, String _sep)", "modifiers": "public static", "return": "String", "signature": "String join(String[] _strings, String _sep)", "full_signature": "public static String join(String[] _strings, String _sep)", "class_method_signature": "StringUtil.join(String[] _strings, String _sep)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(Collection<?> _objs, String _sep)", "modifiers": "public static", "return": "String", "signature": "String join(Collection<?> _objs, String _sep)", "full_signature": "public static String join(Collection<?> _objs, String _sep)", "class_method_signature": "StringUtil.join(Collection<?> _objs, String _sep)", "testcase": false, "constructor": false}, {"identifier": "padLeft", "parameters": "(String _value, int _length)", "modifiers": "public static", "return": "String", "signature": "String padLeft(String _value, int _length)", "full_signature": "public static String padLeft(String _value, int _length)", "class_method_signature": "StringUtil.padLeft(String _value, int _length)", "testcase": false, "constructor": false}, {"identifier": "padLeft", "parameters": "(long _value, int _length)", "modifiers": "public static", "return": "String", "signature": "String padLeft(long _value, int _length)", "full_signature": "public static String padLeft(long _value, int _length)", "class_method_signature": "StringUtil.padLeft(long _value, int _length)", "testcase": false, "constructor": false}, {"identifier": "padLeft", "parameters": "(int _value, int _length)", "modifiers": "public static", "return": "String", "signature": "String padLeft(int _value, int _length)", "full_signature": "public static String padLeft(int _value, int _length)", "class_method_signature": "StringUtil.padLeft(int _value, int _length)", "testcase": false, "constructor": false}, {"identifier": "padLeft", "parameters": "(boolean _value, int _length)", "modifiers": "public static", "return": "String", "signature": "String padLeft(boolean _value, int _length)", "full_signature": "public static String padLeft(boolean _value, int _length)", "class_method_signature": "StringUtil.padLeft(boolean _value, int _length)", "testcase": false, "constructor": false}, {"identifier": "padLeft", "parameters": "(double _value, int _length)", "modifiers": "public static", "return": "String", "signature": "String padLeft(double _value, int _length)", "full_signature": "public static String padLeft(double _value, int _length)", "class_method_signature": "StringUtil.padLeft(double _value, int _length)", "testcase": false, "constructor": false}, {"identifier": "meetsLengthConstraint", "parameters": "(String _string, int _length)", "modifiers": "public static", "return": "boolean", "signature": "boolean meetsLengthConstraint(String _string, int _length)", "full_signature": "public static boolean meetsLengthConstraint(String _string, int _length)", "class_method_signature": "StringUtil.meetsLengthConstraint(String _string, int _length)", "testcase": false, "constructor": false}, {"identifier": "getRandonString", "parameters": "(int _length)", "modifiers": "public static final", "return": "String", "signature": "String getRandonString(int _length)", "full_signature": "public static final String getRandonString(int _length)", "class_method_signature": "StringUtil.getRandonString(int _length)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(@NotNull String _string)", "modifiers": "public static", "return": "String[]", "signature": "String[] toArray(@NotNull String _string)", "full_signature": "public static String[] toArray(@NotNull String _string)", "class_method_signature": "StringUtil.toArray(@NotNull String _string)", "testcase": false, "constructor": false}, {"identifier": "isEmptyOrContainsEmptyString", "parameters": "(String[] _array)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmptyOrContainsEmptyString(String[] _array)", "full_signature": "public static boolean isEmptyOrContainsEmptyString(String[] _array)", "class_method_signature": "StringUtil.isEmptyOrContainsEmptyString(String[] _array)", "testcase": false, "constructor": false}, {"identifier": "matchesPattern", "parameters": "(String _string, Pattern[] _patterns)", "modifiers": "public static", "return": "boolean", "signature": "boolean matchesPattern(String _string, Pattern[] _patterns)", "full_signature": "public static boolean matchesPattern(String _string, Pattern[] _patterns)", "class_method_signature": "StringUtil.matchesPattern(String _string, Pattern[] _patterns)", "testcase": false, "constructor": false}], "file": "shared/src/main/java/org/eclipse/steady/shared/util/StringUtil.java"}, "focal_method": {"identifier": "join", "parameters": "(Object[] _objs, String _sep)", "modifiers": "public static", "return": "String", "body": "public static String join(Object[] _objs, String _sep) {\n    final List<String> objs = new ArrayList<String>();\n    for (Object o : _objs) objs.add(o.toString());\n    return StringUtil.join(objs, _sep);\n  }", "signature": "String join(Object[] _objs, String _sep)", "full_signature": "public static String join(Object[] _objs, String _sep)", "class_method_signature": "StringUtil.join(Object[] _objs, String _sep)", "testcase": false, "constructor": false, "invocations": ["add", "toString", "join"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}