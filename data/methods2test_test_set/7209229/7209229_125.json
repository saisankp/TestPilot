{"test_class": {"identifier": "TestTrailFilePositionSetter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String MODULE = TestTrailFilePositionSetter.class.getName();", "modifier": "public static final", "type": "String", "declarator": "MODULE = TestTrailFilePositionSetter.class.getName()", "var_name": "MODULE"}, {"original_string": "public static final Logger LOG = Logger.getLogger(MODULE);", "modifier": "public static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(MODULE)", "var_name": "LOG"}, {"original_string": "private static final String TRAIL_FILENAME_PREFIX = \"x3\";", "modifier": "private static final", "type": "String", "declarator": "TRAIL_FILENAME_PREFIX = \"x3\"", "var_name": "TRAIL_FILENAME_PREFIX"}, {"original_string": "private static final String[] _txnPattern =\n    {\n      \"<transaction timestamp=\\\"2013-03-09:02:54:34.000000\\\">\",\n      \" <dbupdate table=\\\"TASKMGR.TASKCTL_JOBS_1\\\" type=\\\"update\\\">\",\n      \"   <columns>\",\n      \"     <column name=\\\"JOB_ID\\\" key=\\\"true\\\">1621745</column>\",\n      \"     <column name=\\\"GG_MODI_TS\\\">2013-03-09:02:54:33.996072000</column>\",\n      \"     <column name=\\\"GG_STATUS\\\">o</column>\",\n      \"   </columns>\",\n      \"   <tokens>\",\n      \"     <token name=\\\"TK-XID\\\">42.8.2681282</token>\",\n      \"     <token name=\\\"TK-CSN\\\">${SCN}</token>\",\n      \"   </tokens>\",\n      \" </dbupdate>\",\n      \" <dbupdate table=\\\"TASKMGR.TASKCTL_JOBS_2\\\" type=\\\"update\\\">\",\n      \"   <columns>\",\n      \"     <column name=\\\"JOB_ID\\\" key=\\\"true\\\">1621745</column>\",\n      \"     <column name=\\\"GG_MODI_TS\\\">2013-03-09:02:54:33.996072000</column>\",\n      \"     <column name=\\\"GG_STATUS\\\">o</column>\",\n      \"   </columns>\",\n      \"   <tokens>\",\n      \"     <token name=\\\"TK-XID\\\">42.8.2681283</token>\",\n      \"     <token name=\\\"TK-CSN\\\">${SCN}</token>\",\n      \"   </tokens>\",\n      \" </dbupdate>\",\n      \"</transaction>\"\n   };", "modifier": "private static final", "type": "String[]", "declarator": "_txnPattern =\n    {\n      \"<transaction timestamp=\\\"2013-03-09:02:54:34.000000\\\">\",\n      \" <dbupdate table=\\\"TASKMGR.TASKCTL_JOBS_1\\\" type=\\\"update\\\">\",\n      \"   <columns>\",\n      \"     <column name=\\\"JOB_ID\\\" key=\\\"true\\\">1621745</column>\",\n      \"     <column name=\\\"GG_MODI_TS\\\">2013-03-09:02:54:33.996072000</column>\",\n      \"     <column name=\\\"GG_STATUS\\\">o</column>\",\n      \"   </columns>\",\n      \"   <tokens>\",\n      \"     <token name=\\\"TK-XID\\\">42.8.2681282</token>\",\n      \"     <token name=\\\"TK-CSN\\\">${SCN}</token>\",\n      \"   </tokens>\",\n      \" </dbupdate>\",\n      \" <dbupdate table=\\\"TASKMGR.TASKCTL_JOBS_2\\\" type=\\\"update\\\">\",\n      \"   <columns>\",\n      \"     <column name=\\\"JOB_ID\\\" key=\\\"true\\\">1621745</column>\",\n      \"     <column name=\\\"GG_MODI_TS\\\">2013-03-09:02:54:33.996072000</column>\",\n      \"     <column name=\\\"GG_STATUS\\\">o</column>\",\n      \"   </columns>\",\n      \"   <tokens>\",\n      \"     <token name=\\\"TK-XID\\\">42.8.2681283</token>\",\n      \"     <token name=\\\"TK-CSN\\\">${SCN}</token>\",\n      \"   </tokens>\",\n      \" </dbupdate>\",\n      \"</transaction>\"\n   }", "var_name": "_txnPattern"}, {"original_string": "private static final String DONE_STRING =\n      \"done\\n----------------------------------------------------------------------------\\n\";", "modifier": "private static final", "type": "String", "declarator": "DONE_STRING =\n      \"done\\n----------------------------------------------------------------------------\\n\"", "var_name": "DONE_STRING"}, {"original_string": "private ArrayList<File> _dirsToDelete = new ArrayList<File>(100);", "modifier": "private", "type": "ArrayList<File>", "declarator": "_dirsToDelete = new ArrayList<File>(100)", "var_name": "_dirsToDelete"}], "file": "databus2-relay/databus2-relay-impl/src/test/java/com/linkedin/databus/core/TestTrailFilePositionSetter.java"}, "test_case": {"identifier": "testFailureMode_MalformedTransactionNoValidScnsInMiddleOfMiddleFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFailureMode_MalformedTransactionNoValidScnsInMiddleOfMiddleFile()\n    throws Exception\n  {\n    final Logger log = Logger.getLogger(\"TestTrailFilePositionSetter.testFailureMode_MalformedTransactionNoValidScns\");\n    log.info(\"starting\");\n\n    File dir = createTempDir();\n\n    // corrupt both SCNs in each of six transactions:\n    HashSet<Long> corruptedScns = new HashSet<Long>(10);\n    corruptedScns.add(new Long(100));  // case 1\n    corruptedScns.add(new Long(101));  // case 1\n    corruptedScns.add(new Long(204));  // case 2\n    corruptedScns.add(new Long(205));  // case 2\n    corruptedScns.add(new Long(206));  // case 3\n    corruptedScns.add(new Long(207));  // case 3\n    corruptedScns.add(new Long(250));  // case 4\n    corruptedScns.add(new Long(251));  // case 4\n    corruptedScns.add(new Long(310));  // case 5\n    corruptedScns.add(new Long(311));  // case 5\n    corruptedScns.add(new Long(398));  // case 6\n    corruptedScns.add(new Long(399));  // case 6\n    createTrailFiles(dir.getAbsolutePath(), TRAIL_FILENAME_PREFIX, 150 /* numTxns, 24 lines each */,\n                     1250 /* numLinesPerFile */, 1 /* numLinesPerNewline */, \"\\n\", 0,\n                     corruptedScns, \"blargh\", false, \"\");\n\n    TrailFilePositionSetter posSetter = new TrailFilePositionSetter(dir.getAbsolutePath(), TRAIL_FILENAME_PREFIX);\n    GGXMLTrailTransactionFinder finder = new GGXMLTrailTransactionFinder();\n    FilePositionResult res;\n\n    // SCN 101 is before the earliest (valid) SCN present, so expect ERROR:\n    res = posSetter.locateFilePosition(101, finder);\n    Assert.assertEquals(res.getStatus(), FilePositionResult.Status.ERROR,\n                        \"expected error for exact-match SCN that's 'too old'.\");\n\n    // For SCN <= the earliest transactions maxSCN, we throw error\n    finder.reset();\n    res = posSetter.locateFilePosition(102, finder);\n    Assert.assertEquals(res.getStatus(), FilePositionResult.Status.ERROR,\n                      \"expected error for exact-match SCN that's 'too old'.\");\n\n    // expect first non-corrupted SCN here, not first \"transaction SCN\":\n    finder.reset();\n    res = posSetter.locateFilePosition(TrailFilePositionSetter.USE_EARLIEST_SCN, finder);\n    assertFilePositionResult(res, dir, 102, FilePositionResult.Status.FOUND);\n\n    // 107 = max SCN of its transaction = \"transaction SCN\" => should get FOUND\n    finder.reset();\n    res = posSetter.locateFilePosition(107, finder);\n    assertFilePositionResult(res, dir, 107, FilePositionResult.Status.FOUND);\n\n    // 203 = last valid SCN in first file = max SCN of its transaction = \"transaction SCN\"\n    // => should be FOUND\n    finder.reset();\n    res = posSetter.locateFilePosition(203, finder);\n    assertFilePositionResult(res, dir, 203, FilePositionResult.Status.FOUND);\n\n    // SCN 204 is invalid and is part of a transaction split across first/second files;\n    // 209 = next \"transaction SCN\" and is near the top of the middle file\n    finder.reset();\n    res = posSetter.locateFilePosition(204, finder);\n    assertFilePositionResult(res, dir, 209, FilePositionResult.Status.EXACT_SCN_NOT_FOUND);\n\n    // SCN 250 is invalid (as is 251); expect 253 since max SCN of following transaction\n    finder.reset();\n    res = posSetter.locateFilePosition(250, finder);\n    assertFilePositionResult(res, dir, 253, FilePositionResult.Status.EXACT_SCN_NOT_FOUND);\n\n    // SCN 251 is invalid (as is 250); expect 253 since max SCN of following transaction\n    finder.reset();\n    res = posSetter.locateFilePosition(251, finder);\n    assertFilePositionResult(res, dir, 253, FilePositionResult.Status.EXACT_SCN_NOT_FOUND);\n\n    // SCN 252 is valid and present, but weird corner case => still EXACT_SCN_NOT_FOUND\n    finder.reset();\n    res = posSetter.locateFilePosition(252, finder);\n    assertFilePositionResult(res, dir, 252, FilePositionResult.Status.EXACT_SCN_NOT_FOUND);\n\n    // SCN 253 is valid and present and max SCN of its transaction => FOUND\n    finder.reset();\n    res = posSetter.locateFilePosition(253, finder);\n    assertFilePositionResult(res, dir, 253, FilePositionResult.Status.FOUND);\n\n    // SCN 309 is valid and present and max SCN of its transaction => FOUND (even though\n    // split across second/third files, and following transaction is corrupted)\n    finder.reset();\n    res = posSetter.locateFilePosition(309, finder);\n    assertFilePositionResult(res, dir, 309, FilePositionResult.Status.FOUND);\n\n    // SCN 310 is invalid (as is 311); expect 313\n    finder.reset();\n    res = posSetter.locateFilePosition(310, finder);\n    assertFilePositionResult(res, dir, 313, FilePositionResult.Status.EXACT_SCN_NOT_FOUND);\n\n    // SCN 311 is invalid (as is 310); expect 313\n    finder.reset();\n    res = posSetter.locateFilePosition(311, finder);\n    assertFilePositionResult(res, dir, 313, FilePositionResult.Status.EXACT_SCN_NOT_FOUND);\n\n    // SCN 398 is invalid (as is 399) and is in last transaction of last file, but since\n    // trail file is expected to continue growing (i.e., eventually to have a valid SCN\n    // that's larger than the request), expect EXACT_SCN_NOT_FOUND rather than ERROR.  SCN\n    // returned will be that of last valid transaction, i.e., 397.\n    // [checks beginning of last valid transaction == 396/397 one at byte offset 35650]\n    finder.reset();\n    res = posSetter.locateFilePosition(398, finder);\n    assertFilePositionResult(res, dir, 397, FilePositionResult.Status.EXACT_SCN_NOT_FOUND);\n\n    // SCN 405 is completely missing (would be after last transaction of last file); expect\n    // same behavior as previous case\n    finder.reset();\n    res = posSetter.locateFilePosition(405, finder);\n    assertFilePositionResult(res, dir, 397, FilePositionResult.Status.EXACT_SCN_NOT_FOUND);\n\n    // last valid transaction-SCN is 397\n    finder.reset();\n    res = posSetter.locateFilePosition(TrailFilePositionSetter.USE_LATEST_SCN, finder);\n    assertFilePositionResult(res, dir, 397, FilePositionResult.Status.FOUND);\n\n    log.info(DONE_STRING);\n  }", "signature": "void testFailureMode_MalformedTransactionNoValidScnsInMiddleOfMiddleFile()", "full_signature": "@Test public void testFailureMode_MalformedTransactionNoValidScnsInMiddleOfMiddleFile()", "class_method_signature": "TestTrailFilePositionSetter.testFailureMode_MalformedTransactionNoValidScnsInMiddleOfMiddleFile()", "testcase": true, "constructor": false, "invocations": ["getLogger", "info", "createTempDir", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "createTrailFiles", "getAbsolutePath", "getAbsolutePath", "locateFilePosition", "assertEquals", "getStatus", "reset", "locateFilePosition", "assertEquals", "getStatus", "reset", "locateFilePosition", "assertFilePositionResult", "reset", "locateFilePosition", "assertFilePositionResult", "reset", "locateFilePosition", "assertFilePositionResult", "reset", "locateFilePosition", "assertFilePositionResult", "reset", "locateFilePosition", "assertFilePositionResult", "reset", "locateFilePosition", "assertFilePositionResult", "reset", "locateFilePosition", "assertFilePositionResult", "reset", "locateFilePosition", "assertFilePositionResult", "reset", "locateFilePosition", "assertFilePositionResult", "reset", "locateFilePosition", "assertFilePositionResult", "reset", "locateFilePosition", "assertFilePositionResult", "reset", "locateFilePosition", "assertFilePositionResult", "reset", "locateFilePosition", "assertFilePositionResult", "reset", "locateFilePosition", "assertFilePositionResult", "info"]}, "focal_class": {"identifier": "TrailFilePositionSetter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public Logger _log;", "modifier": "public", "type": "Logger", "declarator": "_log", "var_name": "_log"}, {"original_string": "public static final long USE_LATEST_SCN  = -1;", "modifier": "public static final", "type": "long", "declarator": "USE_LATEST_SCN  = -1", "var_name": "USE_LATEST_SCN"}, {"original_string": "public static final long USE_EARLIEST_SCN = -2;", "modifier": "public static final", "type": "long", "declarator": "USE_EARLIEST_SCN = -2", "var_name": "USE_EARLIEST_SCN"}, {"original_string": "private final File _dir;", "modifier": "private final", "type": "File", "declarator": "_dir", "var_name": "_dir"}, {"original_string": "private final String _filePrefix;", "modifier": "private final", "type": "String", "declarator": "_filePrefix", "var_name": "_filePrefix"}, {"original_string": "private final FileFilter _filter;", "modifier": "private final", "type": "FileFilter", "declarator": "_filter", "var_name": "_filter"}, {"original_string": "private String _phySourceName;", "modifier": "private", "type": "String", "declarator": "_phySourceName", "var_name": "_phySourceName"}, {"original_string": "public static final String NEW_LINE_PATTERN_STR = \"\\r?\\n|\\r\";", "modifier": "public static final", "type": "String", "declarator": "NEW_LINE_PATTERN_STR = \"\\r?\\n|\\r\"", "var_name": "NEW_LINE_PATTERN_STR"}, {"original_string": "public static final String DOUBLE_CHAR_NEWLINE = \"\\r\\n\";", "modifier": "public static final", "type": "String", "declarator": "DOUBLE_CHAR_NEWLINE = \"\\r\\n\"", "var_name": "DOUBLE_CHAR_NEWLINE"}, {"original_string": "public static final int NO_NEWLINE_LEN = -1;", "modifier": "public static final", "type": "int", "declarator": "NO_NEWLINE_LEN = -1", "var_name": "NO_NEWLINE_LEN"}], "methods": [{"identifier": "TrailFilePositionSetter", "parameters": "(String dir, String filePrefix)", "modifiers": "public", "return": "", "signature": " TrailFilePositionSetter(String dir, String filePrefix)", "full_signature": "public  TrailFilePositionSetter(String dir, String filePrefix)", "class_method_signature": "TrailFilePositionSetter.TrailFilePositionSetter(String dir, String filePrefix)", "testcase": false, "constructor": true}, {"identifier": "TrailFilePositionSetter", "parameters": "(String dir, String filePrefix, String phySourceName)", "modifiers": "public", "return": "", "signature": " TrailFilePositionSetter(String dir, String filePrefix, String phySourceName)", "full_signature": "public  TrailFilePositionSetter(String dir, String filePrefix, String phySourceName)", "class_method_signature": "TrailFilePositionSetter.TrailFilePositionSetter(String dir, String filePrefix, String phySourceName)", "testcase": false, "constructor": true}, {"identifier": "validateDir", "parameters": "(String dir)", "modifiers": "private static", "return": "void", "signature": "void validateDir(String dir)", "full_signature": "private static void validateDir(String dir)", "class_method_signature": "TrailFilePositionSetter.validateDir(String dir)", "testcase": false, "constructor": false}, {"identifier": "locateFilePosition", "parameters": "(long scn, TransactionSCNFinderCallback callback)", "modifiers": "public synchronized", "return": "FilePositionResult", "signature": "FilePositionResult locateFilePosition(long scn, TransactionSCNFinderCallback callback)", "full_signature": "public synchronized FilePositionResult locateFilePosition(long scn, TransactionSCNFinderCallback callback)", "class_method_signature": "TrailFilePositionSetter.locateFilePosition(long scn, TransactionSCNFinderCallback callback)", "testcase": false, "constructor": false}, {"identifier": "getFilePosition", "parameters": "(long scn, TransactionSCNFinderCallback callback)", "modifiers": "protected synchronized", "return": "FilePositionResult", "signature": "FilePositionResult getFilePosition(long scn, TransactionSCNFinderCallback callback)", "full_signature": "protected synchronized FilePositionResult getFilePosition(long scn, TransactionSCNFinderCallback callback)", "class_method_signature": "TrailFilePositionSetter.getFilePosition(long scn, TransactionSCNFinderCallback callback)", "testcase": false, "constructor": false}, {"identifier": "getFilePosition", "parameters": "(long scn, TransactionSCNFinderCallback callback, String startFile)", "modifiers": "protected synchronized", "return": "FilePositionResult", "signature": "FilePositionResult getFilePosition(long scn, TransactionSCNFinderCallback callback, String startFile)", "full_signature": "protected synchronized FilePositionResult getFilePosition(long scn, TransactionSCNFinderCallback callback, String startFile)", "class_method_signature": "TrailFilePositionSetter.getFilePosition(long scn, TransactionSCNFinderCallback callback, String startFile)", "testcase": false, "constructor": false}, {"identifier": "findTxnScn", "parameters": "(ConcurrentAppendableCompositeFileInputStream stream,\n          long expScn,\n          TransactionSCNFinderCallback callback)", "modifiers": "private", "return": "FilePositionResult", "signature": "FilePositionResult findTxnScn(ConcurrentAppendableCompositeFileInputStream stream,\n          long expScn,\n          TransactionSCNFinderCallback callback)", "full_signature": "private FilePositionResult findTxnScn(ConcurrentAppendableCompositeFileInputStream stream,\n          long expScn,\n          TransactionSCNFinderCallback callback)", "class_method_signature": "TrailFilePositionSetter.findTxnScn(ConcurrentAppendableCompositeFileInputStream stream,\n          long expScn,\n          TransactionSCNFinderCallback callback)", "testcase": false, "constructor": false}, {"identifier": "splitBytesByNewLines", "parameters": "(byte[] buf,\n                                               int numBytes,\n                                               boolean spanFile,\n                                               int endOffset,\n                                               String prevLine,\n                                               List<String> lines,\n                                               List<Integer> lineEndPos)", "modifiers": "protected static", "return": "String", "signature": "String splitBytesByNewLines(byte[] buf,\n                                               int numBytes,\n                                               boolean spanFile,\n                                               int endOffset,\n                                               String prevLine,\n                                               List<String> lines,\n                                               List<Integer> lineEndPos)", "full_signature": "protected static String splitBytesByNewLines(byte[] buf,\n                                               int numBytes,\n                                               boolean spanFile,\n                                               int endOffset,\n                                               String prevLine,\n                                               List<String> lines,\n                                               List<Integer> lineEndPos)", "class_method_signature": "TrailFilePositionSetter.splitBytesByNewLines(byte[] buf,\n                                               int numBytes,\n                                               boolean spanFile,\n                                               int endOffset,\n                                               String prevLine,\n                                               List<String> lines,\n                                               List<Integer> lineEndPos)", "testcase": false, "constructor": false}], "file": "databus2-relay/databus2-relay-impl/src/main/java/com/linkedin/databus/core/TrailFilePositionSetter.java"}, "focal_method": {"identifier": "locateFilePosition", "parameters": "(long scn, TransactionSCNFinderCallback callback)", "modifiers": "public synchronized", "return": "FilePositionResult", "body": "public synchronized FilePositionResult locateFilePosition(long scn, TransactionSCNFinderCallback callback)\n      throws IOException\n  {\n    TrailFileNotifier notifier = new TrailFileNotifier(_dir, _filter, null, 0, null);\n    List<File> orderedTrailFiles = notifier.getCandidateTrailFiles();\n\n    _log.info(\"Initial set of Trail Files :\" + orderedTrailFiles);\n\n    if ( (null == orderedTrailFiles) || orderedTrailFiles.isEmpty())\n    {\n      return FilePositionResult.createNoTxnsFoundResult();\n    }\n\n    FilePositionResult res = null;\n\n    if ( scn == USE_EARLIEST_SCN)\n    {\n      res = getFilePosition(scn, callback);\n    } else {\n      for (int i = orderedTrailFiles.size() - 1; i >= 0; i--)\n      {\n        callback.reset();\n\n        File startFile = orderedTrailFiles.get(i);\n        _log.info(\"Locating the SCN (\" + scn + \") starting from the trail file :\" + startFile);\n        res = getFilePosition(scn, callback,startFile.getName());\n\n        _log.info(\"Result of the location operation for SCN (\" + scn + \") starting from trail file (\" + startFile + \") is : \" + res);\n\n        // If this is the first txn scanned, we need to go to previous file\n        if (((res.getStatus() == Status.EXACT_SCN_NOT_FOUND) || (res.getStatus() == Status.FOUND))\n            && (res.getTxnPos().getTxnRank() > 0)) // TxnRank will be 0 if this is the\n                                                   // first txn scanned\n        {\n          break;\n        }\n\n        if ((0 == i) && (res != null))\n        {\n          ScnTxnPos scnTxnPos = res.getTxnPos();\n          if ( (scnTxnPos != null) && (scnTxnPos.getTxnRank() <= 0))\n          {\n            return FilePositionResult.createErrorResult(new DatabusException(\"A transaction with scn less than requested SCN was not found. \"\n              + \"Without this txn, we cannot identify if all transactions for requested SCN \"\n              + \"have been located. Requested SinceSCN is :\" + scn));\n          }\n        }\n      }\n    }\n    return res;\n  }", "signature": "FilePositionResult locateFilePosition(long scn, TransactionSCNFinderCallback callback)", "full_signature": "public synchronized FilePositionResult locateFilePosition(long scn, TransactionSCNFinderCallback callback)", "class_method_signature": "TrailFilePositionSetter.locateFilePosition(long scn, TransactionSCNFinderCallback callback)", "testcase": false, "constructor": false, "invocations": ["getCandidateTrailFiles", "info", "isEmpty", "createNoTxnsFoundResult", "getFilePosition", "size", "reset", "get", "info", "getFilePosition", "getName", "info", "getStatus", "getStatus", "getTxnRank", "getTxnPos", "getTxnPos", "getTxnRank", "createErrorResult"]}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}