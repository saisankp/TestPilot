{"test_class": {"identifier": "ResourceLimitManagerImplTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(ResourceLimitManagerImplTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(ResourceLimitManagerImplTest.class)", "var_name": "s_logger"}, {"original_string": "MockResourceLimitManagerImpl _resourceLimitService = new MockResourceLimitManagerImpl();", "modifier": "", "type": "MockResourceLimitManagerImpl", "declarator": "_resourceLimitService = new MockResourceLimitManagerImpl()", "var_name": "_resourceLimitService"}], "file": "server/src/test/java/com/cloud/resourcelimit/ResourceLimitManagerImplTest.java"}, "test_case": {"identifier": "testInjected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInjected() throws Exception {\n        s_logger.info(\"Starting test for Resource Limit manager\");\n        updateResourceCount();\n        updateResourceLimit();\n        //listResourceLimits();\n        s_logger.info(\"Resource Limit Manager: TEST PASSED\");\n    }", "signature": "void testInjected()", "full_signature": "@Test public void testInjected()", "class_method_signature": "ResourceLimitManagerImplTest.testInjected()", "testcase": true, "constructor": false, "invocations": ["info", "updateResourceCount", "updateResourceLimit", "info"]}, "focal_class": {"identifier": "ResourceLimitManagerImpl", "superclass": "extends ManagerBase", "interfaces": "implements ResourceLimitService", "fields": [{"original_string": "public static final Logger s_logger = LoggerFactory.getLogger(ResourceLimitManagerImpl.class);", "modifier": "public static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(ResourceLimitManagerImpl.class)", "var_name": "s_logger"}, {"original_string": "@Inject\n    private DomainDao _domainDao;", "modifier": "@Inject\n    private", "type": "DomainDao", "declarator": "_domainDao", "var_name": "_domainDao"}, {"original_string": "@Inject\n    private AccountManager _accountMgr;", "modifier": "@Inject\n    private", "type": "AccountManager", "declarator": "_accountMgr", "var_name": "_accountMgr"}, {"original_string": "@Inject\n    private AlertManager _alertMgr;", "modifier": "@Inject\n    private", "type": "AlertManager", "declarator": "_alertMgr", "var_name": "_alertMgr"}, {"original_string": "@Inject\n    private ResourceCountDao _resourceCountDao;", "modifier": "@Inject\n    private", "type": "ResourceCountDao", "declarator": "_resourceCountDao", "var_name": "_resourceCountDao"}, {"original_string": "@Inject\n    private ResourceLimitDao _resourceLimitDao;", "modifier": "@Inject\n    private", "type": "ResourceLimitDao", "declarator": "_resourceLimitDao", "var_name": "_resourceLimitDao"}, {"original_string": "@Inject\n    private UserVmDao _userVmDao;", "modifier": "@Inject\n    private", "type": "UserVmDao", "declarator": "_userVmDao", "var_name": "_userVmDao"}, {"original_string": "@Inject\n    private AccountDao _accountDao;", "modifier": "@Inject\n    private", "type": "AccountDao", "declarator": "_accountDao", "var_name": "_accountDao"}, {"original_string": "@Inject\n    protected SnapshotDao _snapshotDao;", "modifier": "@Inject\n    protected", "type": "SnapshotDao", "declarator": "_snapshotDao", "var_name": "_snapshotDao"}, {"original_string": "@Inject\n    protected VMTemplateDao _vmTemplateDao;", "modifier": "@Inject\n    protected", "type": "VMTemplateDao", "declarator": "_vmTemplateDao", "var_name": "_vmTemplateDao"}, {"original_string": "@Inject\n    private VolumeDao _volumeDao;", "modifier": "@Inject\n    private", "type": "VolumeDao", "declarator": "_volumeDao", "var_name": "_volumeDao"}, {"original_string": "@Inject\n    private IPAddressDao _ipAddressDao;", "modifier": "@Inject\n    private", "type": "IPAddressDao", "declarator": "_ipAddressDao", "var_name": "_ipAddressDao"}, {"original_string": "@Inject\n    private VMInstanceDao _vmDao;", "modifier": "@Inject\n    private", "type": "VMInstanceDao", "declarator": "_vmDao", "var_name": "_vmDao"}, {"original_string": "@Inject\n    private ConfigurationDao _configDao;", "modifier": "@Inject\n    private", "type": "ConfigurationDao", "declarator": "_configDao", "var_name": "_configDao"}, {"original_string": "@Inject\n    private EntityManager _entityMgr;", "modifier": "@Inject\n    private", "type": "EntityManager", "declarator": "_entityMgr", "var_name": "_entityMgr"}, {"original_string": "@Inject\n    private ProjectDao _projectDao;", "modifier": "@Inject\n    private", "type": "ProjectDao", "declarator": "_projectDao", "var_name": "_projectDao"}, {"original_string": "@Inject\n    private ProjectAccountDao _projectAccountDao;", "modifier": "@Inject\n    private", "type": "ProjectAccountDao", "declarator": "_projectAccountDao", "var_name": "_projectAccountDao"}, {"original_string": "@Inject\n    private NetworkDao _networkDao;", "modifier": "@Inject\n    private", "type": "NetworkDao", "declarator": "_networkDao", "var_name": "_networkDao"}, {"original_string": "@Inject\n    private VpcDao _vpcDao;", "modifier": "@Inject\n    private", "type": "VpcDao", "declarator": "_vpcDao", "var_name": "_vpcDao"}, {"original_string": "@Inject\n    private ServiceOfferingDao _serviceOfferingDao;", "modifier": "@Inject\n    private", "type": "ServiceOfferingDao", "declarator": "_serviceOfferingDao", "var_name": "_serviceOfferingDao"}, {"original_string": "@Inject\n    private TemplateDataStoreDao _vmTemplateStoreDao;", "modifier": "@Inject\n    private", "type": "TemplateDataStoreDao", "declarator": "_vmTemplateStoreDao", "var_name": "_vmTemplateStoreDao"}, {"original_string": "@Inject\n    private VlanDao _vlanDao;", "modifier": "@Inject\n    private", "type": "VlanDao", "declarator": "_vlanDao", "var_name": "_vlanDao"}, {"original_string": "@Inject\n    private SnapshotDataStoreDao _snapshotDataStoreDao;", "modifier": "@Inject\n    private", "type": "SnapshotDataStoreDao", "declarator": "_snapshotDataStoreDao", "var_name": "_snapshotDataStoreDao"}, {"original_string": "protected GenericSearchBuilder<TemplateDataStoreVO, SumCount> templateSizeSearch;", "modifier": "protected", "type": "GenericSearchBuilder<TemplateDataStoreVO, SumCount>", "declarator": "templateSizeSearch", "var_name": "templateSizeSearch"}, {"original_string": "protected GenericSearchBuilder<SnapshotDataStoreVO, SumCount> snapshotSizeSearch;", "modifier": "protected", "type": "GenericSearchBuilder<SnapshotDataStoreVO, SumCount>", "declarator": "snapshotSizeSearch", "var_name": "snapshotSizeSearch"}, {"original_string": "protected SearchBuilder<ResourceCountVO> ResourceCountSearch;", "modifier": "protected", "type": "SearchBuilder<ResourceCountVO>", "declarator": "ResourceCountSearch", "var_name": "ResourceCountSearch"}, {"original_string": "ScheduledExecutorService _rcExecutor;", "modifier": "", "type": "ScheduledExecutorService", "declarator": "_rcExecutor", "var_name": "_rcExecutor"}, {"original_string": "long _resourceCountCheckInterval = 0;", "modifier": "", "type": "long", "declarator": "_resourceCountCheckInterval = 0", "var_name": "_resourceCountCheckInterval"}, {"original_string": "Map<ResourceType, Long> accountResourceLimitMap = new EnumMap<ResourceType, Long>(ResourceType.class);", "modifier": "", "type": "Map<ResourceType, Long>", "declarator": "accountResourceLimitMap = new EnumMap<ResourceType, Long>(ResourceType.class)", "var_name": "accountResourceLimitMap"}, {"original_string": "Map<ResourceType, Long> domainResourceLimitMap = new EnumMap<ResourceType, Long>(ResourceType.class);", "modifier": "", "type": "Map<ResourceType, Long>", "declarator": "domainResourceLimitMap = new EnumMap<ResourceType, Long>(ResourceType.class)", "var_name": "domainResourceLimitMap"}, {"original_string": "Map<ResourceType, Long> projectResourceLimitMap = new EnumMap<ResourceType, Long>(ResourceType.class);", "modifier": "", "type": "Map<ResourceType, Long>", "declarator": "projectResourceLimitMap = new EnumMap<ResourceType, Long>(ResourceType.class)", "var_name": "projectResourceLimitMap"}], "methods": [{"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean start()", "full_signature": "@Override public boolean start()", "class_method_signature": "ResourceLimitManagerImpl.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean stop()", "full_signature": "@Override public boolean stop()", "class_method_signature": "ResourceLimitManagerImpl.stop()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(final String name, final Map<String, Object> params)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean configure(final String name, final Map<String, Object> params)", "full_signature": "@Override public boolean configure(final String name, final Map<String, Object> params)", "class_method_signature": "ResourceLimitManagerImpl.configure(final String name, final Map<String, Object> params)", "testcase": false, "constructor": false}, {"identifier": "incrementResourceCount", "parameters": "(long accountId, ResourceType type, Long... delta)", "modifiers": "@Override public", "return": "void", "signature": "void incrementResourceCount(long accountId, ResourceType type, Long... delta)", "full_signature": "@Override public void incrementResourceCount(long accountId, ResourceType type, Long... delta)", "class_method_signature": "ResourceLimitManagerImpl.incrementResourceCount(long accountId, ResourceType type, Long... delta)", "testcase": false, "constructor": false}, {"identifier": "decrementResourceCount", "parameters": "(long accountId, ResourceType type, Long... delta)", "modifiers": "@Override public", "return": "void", "signature": "void decrementResourceCount(long accountId, ResourceType type, Long... delta)", "full_signature": "@Override public void decrementResourceCount(long accountId, ResourceType type, Long... delta)", "class_method_signature": "ResourceLimitManagerImpl.decrementResourceCount(long accountId, ResourceType type, Long... delta)", "testcase": false, "constructor": false}, {"identifier": "findCorrectResourceLimitForAccount", "parameters": "(Account account, ResourceType type)", "modifiers": "@Override public", "return": "long", "signature": "long findCorrectResourceLimitForAccount(Account account, ResourceType type)", "full_signature": "@Override public long findCorrectResourceLimitForAccount(Account account, ResourceType type)", "class_method_signature": "ResourceLimitManagerImpl.findCorrectResourceLimitForAccount(Account account, ResourceType type)", "testcase": false, "constructor": false}, {"identifier": "findCorrectResourceLimitForAccount", "parameters": "(long accountId, Long limit, ResourceType type)", "modifiers": "@Override public", "return": "long", "signature": "long findCorrectResourceLimitForAccount(long accountId, Long limit, ResourceType type)", "full_signature": "@Override public long findCorrectResourceLimitForAccount(long accountId, Long limit, ResourceType type)", "class_method_signature": "ResourceLimitManagerImpl.findCorrectResourceLimitForAccount(long accountId, Long limit, ResourceType type)", "testcase": false, "constructor": false}, {"identifier": "findCorrectResourceLimitForDomain", "parameters": "(Domain domain, ResourceType type)", "modifiers": "@Override public", "return": "long", "signature": "long findCorrectResourceLimitForDomain(Domain domain, ResourceType type)", "full_signature": "@Override public long findCorrectResourceLimitForDomain(Domain domain, ResourceType type)", "class_method_signature": "ResourceLimitManagerImpl.findCorrectResourceLimitForDomain(Domain domain, ResourceType type)", "testcase": false, "constructor": false}, {"identifier": "checkResourceLimit", "parameters": "(final Account account, final ResourceType type, long... count)", "modifiers": "@Override @DB public", "return": "void", "signature": "void checkResourceLimit(final Account account, final ResourceType type, long... count)", "full_signature": "@Override @DB public void checkResourceLimit(final Account account, final ResourceType type, long... count)", "class_method_signature": "ResourceLimitManagerImpl.checkResourceLimit(final Account account, final ResourceType type, long... count)", "testcase": false, "constructor": false}, {"identifier": "searchForLimits", "parameters": "(Long id, Long accountId, Long domainId, Integer type, Long startIndex, Long pageSizeVal)", "modifiers": "@Override public", "return": "List<ResourceLimitVO>", "signature": "List<ResourceLimitVO> searchForLimits(Long id, Long accountId, Long domainId, Integer type, Long startIndex, Long pageSizeVal)", "full_signature": "@Override public List<ResourceLimitVO> searchForLimits(Long id, Long accountId, Long domainId, Integer type, Long startIndex, Long pageSizeVal)", "class_method_signature": "ResourceLimitManagerImpl.searchForLimits(Long id, Long accountId, Long domainId, Integer type, Long startIndex, Long pageSizeVal)", "testcase": false, "constructor": false}, {"identifier": "updateResourceLimit", "parameters": "(Long accountId, Long domainId, Integer typeId, Long max)", "modifiers": "@Override public", "return": "ResourceLimitVO", "signature": "ResourceLimitVO updateResourceLimit(Long accountId, Long domainId, Integer typeId, Long max)", "full_signature": "@Override public ResourceLimitVO updateResourceLimit(Long accountId, Long domainId, Integer typeId, Long max)", "class_method_signature": "ResourceLimitManagerImpl.updateResourceLimit(Long accountId, Long domainId, Integer typeId, Long max)", "testcase": false, "constructor": false}, {"identifier": "recalculateResourceCount", "parameters": "(Long accountId, Long domainId, Integer typeId)", "modifiers": "@Override public", "return": "List<ResourceCountVO>", "signature": "List<ResourceCountVO> recalculateResourceCount(Long accountId, Long domainId, Integer typeId)", "full_signature": "@Override public List<ResourceCountVO> recalculateResourceCount(Long accountId, Long domainId, Integer typeId)", "class_method_signature": "ResourceLimitManagerImpl.recalculateResourceCount(Long accountId, Long domainId, Integer typeId)", "testcase": false, "constructor": false}, {"identifier": "updateResourceCountForAccount", "parameters": "(final long accountId, final ResourceType type, final boolean increment, final long delta)", "modifiers": "@DB protected", "return": "boolean", "signature": "boolean updateResourceCountForAccount(final long accountId, final ResourceType type, final boolean increment, final long delta)", "full_signature": "@DB protected boolean updateResourceCountForAccount(final long accountId, final ResourceType type, final boolean increment, final long delta)", "class_method_signature": "ResourceLimitManagerImpl.updateResourceCountForAccount(final long accountId, final ResourceType type, final boolean increment, final long delta)", "testcase": false, "constructor": false}, {"identifier": "recalculateDomainResourceCount", "parameters": "(final long domainId, final ResourceType type)", "modifiers": "@DB protected", "return": "long", "signature": "long recalculateDomainResourceCount(final long domainId, final ResourceType type)", "full_signature": "@DB protected long recalculateDomainResourceCount(final long domainId, final ResourceType type)", "class_method_signature": "ResourceLimitManagerImpl.recalculateDomainResourceCount(final long domainId, final ResourceType type)", "testcase": false, "constructor": false}, {"identifier": "recalculateAccountResourceCount", "parameters": "(final long accountId, final ResourceType type)", "modifiers": "@DB protected", "return": "long", "signature": "long recalculateAccountResourceCount(final long accountId, final ResourceType type)", "full_signature": "@DB protected long recalculateAccountResourceCount(final long accountId, final ResourceType type)", "class_method_signature": "ResourceLimitManagerImpl.recalculateAccountResourceCount(final long accountId, final ResourceType type)", "testcase": false, "constructor": false}, {"identifier": "countCpusForAccount", "parameters": "(long accountId)", "modifiers": "public", "return": "long", "signature": "long countCpusForAccount(long accountId)", "full_signature": "public long countCpusForAccount(long accountId)", "class_method_signature": "ResourceLimitManagerImpl.countCpusForAccount(long accountId)", "testcase": false, "constructor": false}, {"identifier": "calculateMemoryForAccount", "parameters": "(long accountId)", "modifiers": "public", "return": "long", "signature": "long calculateMemoryForAccount(long accountId)", "full_signature": "public long calculateMemoryForAccount(long accountId)", "class_method_signature": "ResourceLimitManagerImpl.calculateMemoryForAccount(long accountId)", "testcase": false, "constructor": false}, {"identifier": "calculateSecondaryStorageForAccount", "parameters": "(long accountId)", "modifiers": "public", "return": "long", "signature": "long calculateSecondaryStorageForAccount(long accountId)", "full_signature": "public long calculateSecondaryStorageForAccount(long accountId)", "class_method_signature": "ResourceLimitManagerImpl.calculateSecondaryStorageForAccount(long accountId)", "testcase": false, "constructor": false}, {"identifier": "calculatePublicIpForAccount", "parameters": "(long accountId)", "modifiers": "private", "return": "long", "signature": "long calculatePublicIpForAccount(long accountId)", "full_signature": "private long calculatePublicIpForAccount(long accountId)", "class_method_signature": "ResourceLimitManagerImpl.calculatePublicIpForAccount(long accountId)", "testcase": false, "constructor": false}, {"identifier": "getResourceCount", "parameters": "(Account account, ResourceType type)", "modifiers": "@Override public", "return": "long", "signature": "long getResourceCount(Account account, ResourceType type)", "full_signature": "@Override public long getResourceCount(Account account, ResourceType type)", "class_method_signature": "ResourceLimitManagerImpl.getResourceCount(Account account, ResourceType type)", "testcase": false, "constructor": false}, {"identifier": "isDisplayFlagOn", "parameters": "(Boolean displayResource)", "modifiers": "private", "return": "boolean", "signature": "boolean isDisplayFlagOn(Boolean displayResource)", "full_signature": "private boolean isDisplayFlagOn(Boolean displayResource)", "class_method_signature": "ResourceLimitManagerImpl.isDisplayFlagOn(Boolean displayResource)", "testcase": false, "constructor": false}, {"identifier": "checkResourceLimit", "parameters": "(Account account, ResourceType type, Boolean displayResource, long... count)", "modifiers": "@Override public", "return": "void", "signature": "void checkResourceLimit(Account account, ResourceType type, Boolean displayResource, long... count)", "full_signature": "@Override public void checkResourceLimit(Account account, ResourceType type, Boolean displayResource, long... count)", "class_method_signature": "ResourceLimitManagerImpl.checkResourceLimit(Account account, ResourceType type, Boolean displayResource, long... count)", "testcase": false, "constructor": false}, {"identifier": "incrementResourceCount", "parameters": "(long accountId, ResourceType type, Boolean displayResource, Long... delta)", "modifiers": "@Override public", "return": "void", "signature": "void incrementResourceCount(long accountId, ResourceType type, Boolean displayResource, Long... delta)", "full_signature": "@Override public void incrementResourceCount(long accountId, ResourceType type, Boolean displayResource, Long... delta)", "class_method_signature": "ResourceLimitManagerImpl.incrementResourceCount(long accountId, ResourceType type, Boolean displayResource, Long... delta)", "testcase": false, "constructor": false}, {"identifier": "decrementResourceCount", "parameters": "(long accountId, ResourceType type, Boolean displayResource, Long... delta)", "modifiers": "@Override public", "return": "void", "signature": "void decrementResourceCount(long accountId, ResourceType type, Boolean displayResource, Long... delta)", "full_signature": "@Override public void decrementResourceCount(long accountId, ResourceType type, Boolean displayResource, Long... delta)", "class_method_signature": "ResourceLimitManagerImpl.decrementResourceCount(long accountId, ResourceType type, Boolean displayResource, Long... delta)", "testcase": false, "constructor": false}, {"identifier": "changeResourceCount", "parameters": "(long accountId, ResourceType type, Boolean displayResource, Long... delta)", "modifiers": "@Override public", "return": "void", "signature": "void changeResourceCount(long accountId, ResourceType type, Boolean displayResource, Long... delta)", "full_signature": "@Override public void changeResourceCount(long accountId, ResourceType type, Boolean displayResource, Long... delta)", "class_method_signature": "ResourceLimitManagerImpl.changeResourceCount(long accountId, ResourceType type, Boolean displayResource, Long... delta)", "testcase": false, "constructor": false}], "file": "server/src/main/java/com/cloud/resourcelimit/ResourceLimitManagerImpl.java"}, "focal_method": {"identifier": "updateResourceLimit", "parameters": "(Long accountId, Long domainId, Integer typeId, Long max)", "modifiers": "@Override public", "return": "ResourceLimitVO", "body": "@Override\n    public ResourceLimitVO updateResourceLimit(Long accountId, Long domainId, Integer typeId, Long max) {\n        Account caller = CallContext.current().getCallingAccount();\n\n        if (max == null) {\n            max = new Long(Resource.RESOURCE_UNLIMITED);\n        } else if (max.longValue() < Resource.RESOURCE_UNLIMITED) {\n            throw new InvalidParameterValueException(\"Please specify either '-1' for an infinite limit, or a limit that is at least '0'.\");\n        }\n\n        // Map resource type\n        ResourceType resourceType = null;\n        if (typeId != null) {\n            for (ResourceType type : Resource.ResourceType.values()) {\n                if (type.getOrdinal() == typeId.intValue()) {\n                    resourceType = type;\n                }\n            }\n            if (resourceType == null) {\n                throw new InvalidParameterValueException(\"Please specify valid resource type\");\n            }\n        }\n\n        //Convert max storage size from GiB to bytes\n        if ((resourceType == ResourceType.primary_storage || resourceType == ResourceType.secondary_storage) && max >= 0) {\n            max = max * ResourceType.bytesToGiB;\n        }\n\n        ResourceOwnerType ownerType = null;\n        Long ownerId = null;\n\n        if (accountId != null) {\n            Account account = _entityMgr.findById(Account.class, accountId);\n            if (account == null) {\n                throw new InvalidParameterValueException(\"Unable to find account \" + accountId);\n            }\n            if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {\n                throw new InvalidParameterValueException(\"Can't update system account\");\n            }\n\n            //only Unlimited value is accepted if account is  Root Admin\n            if (_accountMgr.isRootAdmin(account.getId()) && max.shortValue() != Resource.RESOURCE_UNLIMITED) {\n                throw new InvalidParameterValueException(\"Only \" + Resource.RESOURCE_UNLIMITED + \" limit is supported for Root Admin accounts\");\n            }\n\n            if ((caller.getAccountId() == accountId.longValue()) &&\n                (_accountMgr.isDomainAdmin(caller.getId()) ||\n                caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN)) {\n                // If the admin is trying to update his own account, disallow.\n                throw new PermissionDeniedException(\"Unable to update resource limit for his own account \" + accountId + \", permission denied\");\n            }\n\n            if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {\n                _accountMgr.checkAccess(caller, AccessType.ModifyProject, true, account);\n            } else {\n                _accountMgr.checkAccess(caller, null, true, account);\n            }\n\n            ownerType = ResourceOwnerType.Account;\n            ownerId = accountId;\n        } else if (domainId != null) {\n            Domain domain = _entityMgr.findById(Domain.class, domainId);\n\n            _accountMgr.checkAccess(caller, domain);\n\n            if (Domain.ROOT_DOMAIN == domainId.longValue()) {\n                // no one can add limits on ROOT domain, disallow...\n                throw new PermissionDeniedException(\"Cannot update resource limit for ROOT domain \" + domainId + \", permission denied\");\n            }\n\n            if ((caller.getDomainId() == domainId.longValue()) && caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN ||\n                caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {\n                // if the admin is trying to update their own domain, disallow...\n                throw new PermissionDeniedException(\"Unable to update resource limit for domain \" + domainId + \", permission denied\");\n            }\n            Long parentDomainId = domain.getParent();\n            if (parentDomainId != null) {\n                DomainVO parentDomain = _domainDao.findById(parentDomainId);\n                long parentMaximum = findCorrectResourceLimitForDomain(parentDomain, resourceType);\n                if ((parentMaximum >= 0) && (max.longValue() > parentMaximum)) {\n                    throw new InvalidParameterValueException(\"Domain \" + domain.getName() + \"(id: \" + parentDomain.getId() + \") has maximum allowed resource limit \" +\n                        parentMaximum + \" for \" + resourceType + \", please specify a value less that or equal to \" + parentMaximum);\n                }\n            }\n            ownerType = ResourceOwnerType.Domain;\n            ownerId = domainId;\n        }\n\n        if (ownerId == null) {\n            throw new InvalidParameterValueException(\"AccountId or domainId have to be specified in order to update resource limit\");\n        }\n\n        ResourceLimitVO limit = _resourceLimitDao.findByOwnerIdAndType(ownerId, ownerType, resourceType);\n        if (limit != null) {\n            // Update the existing limit\n            _resourceLimitDao.update(limit.getId(), max);\n            return _resourceLimitDao.findById(limit.getId());\n        } else {\n            return _resourceLimitDao.persist(new ResourceLimitVO(resourceType, max, ownerId, ownerType));\n        }\n    }", "signature": "ResourceLimitVO updateResourceLimit(Long accountId, Long domainId, Integer typeId, Long max)", "full_signature": "@Override public ResourceLimitVO updateResourceLimit(Long accountId, Long domainId, Integer typeId, Long max)", "class_method_signature": "ResourceLimitManagerImpl.updateResourceLimit(Long accountId, Long domainId, Integer typeId, Long max)", "testcase": false, "constructor": false, "invocations": ["getCallingAccount", "current", "longValue", "values", "getOrdinal", "intValue", "findById", "getId", "isRootAdmin", "getId", "shortValue", "getAccountId", "longValue", "isDomainAdmin", "getId", "getType", "getType", "checkAccess", "checkAccess", "findById", "checkAccess", "longValue", "getDomainId", "longValue", "getType", "getType", "getParent", "findById", "findCorrectResourceLimitForDomain", "longValue", "getName", "getId", "findByOwnerIdAndType", "update", "getId", "findById", "getId", "persist"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}