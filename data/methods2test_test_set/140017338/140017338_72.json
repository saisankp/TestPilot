{"test_class": {"identifier": "SW360AttachmentUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_FILE = \"/__files/all_releases.json\";", "modifier": "private static final", "type": "String", "declarator": "TEST_FILE = \"/__files/all_releases.json\"", "var_name": "TEST_FILE"}, {"original_string": "private static final String TEST_FILE_SHA1 = \"7a5daedffafd0be187c351968592fefee4f648f4\";", "modifier": "private static final", "type": "String", "declarator": "TEST_FILE_SHA1 = \"7a5daedffafd0be187c351968592fefee4f648f4\"", "var_name": "TEST_FILE_SHA1"}, {"original_string": "@Rule\n    public TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}], "file": "modules/sw360/sw360-client/src/test/java/org/eclipse/sw360/antenna/sw360/client/adapter/SW360AttachmentUtilsTest.java"}, "test_case": {"identifier": "testDownloadAttachment", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDownloadAttachment() {\n        String attachmentId = \"attach-0123456789\";\n        String fileName = \"downloadedAttachment.doc\";\n        Path downloadPath = folder.getRoot().toPath().resolve(\"downloads\");\n        String releaseLink = \"https://sw360.org/releases/1234567890\";\n        SW360Release release = new SW360Release();\n        release.getLinks().setSelf(new Self(releaseLink));\n        SW360SparseAttachment attachment = new SW360SparseAttachment();\n        attachment.setFilename(fileName);\n        attachment.getLinks().setSelf(new Self(\"https://sw360.org/attachments/\" + attachmentId));\n        SW360ReleaseClient releaseClient = mock(SW360ReleaseClient.class);\n        when(releaseClient.processAttachment(eq(releaseLink), eq(attachmentId), any()))\n                .thenAnswer((Answer<CompletableFuture<Path>>) invocationOnMock -> {\n                    SW360AttachmentUtils.AttachmentDownloadProcessor processor =\n                            invocationOnMock.getArgument(2);\n                    assertThat(processor.getCopyOptions()).containsOnly(StandardCopyOption.REPLACE_EXISTING);\n                    try (InputStream stream = Files.newInputStream(testFile())) {\n                        return CompletableFuture.completedFuture(processor.processAttachmentStream(stream));\n                    }\n                });\n\n        Optional<Path> optTarget = FutureUtils.block(SW360AttachmentUtils.downloadAttachment(releaseClient,\n                release, attachment, downloadPath));\n        assertThat(optTarget).isNotEmpty();\n        Path target = optTarget.get();\n        assertThat(target).isEqualTo(downloadPath.resolve(fileName));\n        checkFileDownloaded(target);\n    }", "signature": "void testDownloadAttachment()", "full_signature": "@Test public void testDownloadAttachment()", "class_method_signature": "SW360AttachmentUtilsTest.testDownloadAttachment()", "testcase": true, "constructor": false, "invocations": ["resolve", "toPath", "getRoot", "setSelf", "getLinks", "setFilename", "setSelf", "getLinks", "mock", "thenAnswer", "when", "processAttachment", "eq", "eq", "any", "getArgument", "containsOnly", "assertThat", "getCopyOptions", "newInputStream", "testFile", "completedFuture", "processAttachmentStream", "block", "downloadAttachment", "isNotEmpty", "assertThat", "get", "isEqualTo", "assertThat", "resolve", "checkFileDownloaded"]}, "focal_class": {"identifier": "SW360AttachmentUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char[] HEX_DIGITS = \"0123456789abcdef\".toCharArray();", "modifier": "private static final", "type": "char[]", "declarator": "HEX_DIGITS = \"0123456789abcdef\".toCharArray()", "var_name": "HEX_DIGITS"}, {"original_string": "private static final String ALG_SHA1 = \"SHA-1\";", "modifier": "private static final", "type": "String", "declarator": "ALG_SHA1 = \"SHA-1\"", "var_name": "ALG_SHA1"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SW360AttachmentUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SW360AttachmentUtils.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "SW360AttachmentUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " SW360AttachmentUtils()", "full_signature": "private  SW360AttachmentUtils()", "class_method_signature": "SW360AttachmentUtils.SW360AttachmentUtils()", "testcase": false, "constructor": true}, {"identifier": "uploadAttachments", "parameters": "(SW360AttachmentAwareClient<T> client, AttachmentUploadRequest<T> uploadRequest,\n                      Function<? super T, Set<SW360SparseAttachment>> getAttachmentsFunc)", "modifiers": "public static", "return": "CompletableFuture<AttachmentUploadResult<T>>", "signature": "CompletableFuture<AttachmentUploadResult<T>> uploadAttachments(SW360AttachmentAwareClient<T> client, AttachmentUploadRequest<T> uploadRequest,\n                      Function<? super T, Set<SW360SparseAttachment>> getAttachmentsFunc)", "full_signature": "public static CompletableFuture<AttachmentUploadResult<T>> uploadAttachments(SW360AttachmentAwareClient<T> client, AttachmentUploadRequest<T> uploadRequest,\n                      Function<? super T, Set<SW360SparseAttachment>> getAttachmentsFunc)", "class_method_signature": "SW360AttachmentUtils.uploadAttachments(SW360AttachmentAwareClient<T> client, AttachmentUploadRequest<T> uploadRequest,\n                      Function<? super T, Set<SW360SparseAttachment>> getAttachmentsFunc)", "testcase": false, "constructor": false}, {"identifier": "downloadAttachment", "parameters": "(SW360AttachmentAwareClient<? extends T> client, T entity, SW360SparseAttachment attachment,\n                       Path downloadPath)", "modifiers": "public static", "return": "CompletableFuture<Optional<Path>>", "signature": "CompletableFuture<Optional<Path>> downloadAttachment(SW360AttachmentAwareClient<? extends T> client, T entity, SW360SparseAttachment attachment,\n                       Path downloadPath)", "full_signature": "public static CompletableFuture<Optional<Path>> downloadAttachment(SW360AttachmentAwareClient<? extends T> client, T entity, SW360SparseAttachment attachment,\n                       Path downloadPath)", "class_method_signature": "SW360AttachmentUtils.downloadAttachment(SW360AttachmentAwareClient<? extends T> client, T entity, SW360SparseAttachment attachment,\n                       Path downloadPath)", "testcase": false, "constructor": false}, {"identifier": "defaultAttachmentDownloadProcessor", "parameters": "(SW360SparseAttachment attachment,\n                                                                                 Path downloadPath)", "modifiers": "public static", "return": "AttachmentDownloadProcessor", "signature": "AttachmentDownloadProcessor defaultAttachmentDownloadProcessor(SW360SparseAttachment attachment,\n                                                                                 Path downloadPath)", "full_signature": "public static AttachmentDownloadProcessor defaultAttachmentDownloadProcessor(SW360SparseAttachment attachment,\n                                                                                 Path downloadPath)", "class_method_signature": "SW360AttachmentUtils.defaultAttachmentDownloadProcessor(SW360SparseAttachment attachment,\n                                                                                 Path downloadPath)", "testcase": false, "constructor": false}, {"identifier": "defaultAttachmentDownloadProcessor", "parameters": "(String fileName, Path downloadPath)", "modifiers": "public static", "return": "AttachmentDownloadProcessor", "signature": "AttachmentDownloadProcessor defaultAttachmentDownloadProcessor(String fileName, Path downloadPath)", "full_signature": "public static AttachmentDownloadProcessor defaultAttachmentDownloadProcessor(String fileName, Path downloadPath)", "class_method_signature": "SW360AttachmentUtils.defaultAttachmentDownloadProcessor(String fileName, Path downloadPath)", "testcase": false, "constructor": false}, {"identifier": "calculateHash", "parameters": "(Path file, MessageDigest digest)", "modifiers": "public static", "return": "String", "signature": "String calculateHash(Path file, MessageDigest digest)", "full_signature": "public static String calculateHash(Path file, MessageDigest digest)", "class_method_signature": "SW360AttachmentUtils.calculateHash(Path file, MessageDigest digest)", "testcase": false, "constructor": false}, {"identifier": "calculateSha1Hash", "parameters": "(Path file)", "modifiers": "public static", "return": "String", "signature": "String calculateSha1Hash(Path file)", "full_signature": "public static String calculateSha1Hash(Path file)", "class_method_signature": "SW360AttachmentUtils.calculateSha1Hash(Path file)", "testcase": false, "constructor": false}, {"identifier": "safeCreateDirectory", "parameters": "(Path path, boolean withParents)", "modifiers": "static", "return": "Path", "signature": "Path safeCreateDirectory(Path path, boolean withParents)", "full_signature": "static Path safeCreateDirectory(Path path, boolean withParents)", "class_method_signature": "SW360AttachmentUtils.safeCreateDirectory(Path path, boolean withParents)", "testcase": false, "constructor": false}, {"identifier": "attachmentIsPotentialDuplicate", "parameters": "(Path attachment, Set<SW360SparseAttachment> attachments)", "modifiers": "private static", "return": "boolean", "signature": "boolean attachmentIsPotentialDuplicate(Path attachment, Set<SW360SparseAttachment> attachments)", "full_signature": "private static boolean attachmentIsPotentialDuplicate(Path attachment, Set<SW360SparseAttachment> attachments)", "class_method_signature": "SW360AttachmentUtils.attachmentIsPotentialDuplicate(Path attachment, Set<SW360SparseAttachment> attachments)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(byte[] bytes)", "modifiers": "private static", "return": "String", "signature": "String toHexString(byte[] bytes)", "full_signature": "private static String toHexString(byte[] bytes)", "class_method_signature": "SW360AttachmentUtils.toHexString(byte[] bytes)", "testcase": false, "constructor": false}], "file": "modules/sw360/sw360-client/src/main/java/org/eclipse/sw360/antenna/sw360/client/adapter/SW360AttachmentUtils.java"}, "focal_method": {"identifier": "downloadAttachment", "parameters": "(SW360AttachmentAwareClient<? extends T> client, T entity, SW360SparseAttachment attachment,\n                       Path downloadPath)", "modifiers": "public static", "return": "CompletableFuture<Optional<Path>>", "body": "public static <T extends SW360HalResource<?, ?>> CompletableFuture<Optional<Path>>\n    downloadAttachment(SW360AttachmentAwareClient<? extends T> client, T entity, SW360SparseAttachment attachment,\n                       Path downloadPath) {\n        return Optional.ofNullable(entity.getSelfLink())\n                .map(self -> {\n                    AttachmentDownloadProcessor downloadProcessor =\n                            defaultAttachmentDownloadProcessor(attachment, downloadPath);\n                    return optionalFuture(client.processAttachment(self.getHref(), attachment.getId(),\n                            downloadProcessor));\n                })\n                .orElseGet(() -> CompletableFuture.completedFuture(Optional.empty()));\n    }", "signature": "CompletableFuture<Optional<Path>> downloadAttachment(SW360AttachmentAwareClient<? extends T> client, T entity, SW360SparseAttachment attachment,\n                       Path downloadPath)", "full_signature": "public static CompletableFuture<Optional<Path>> downloadAttachment(SW360AttachmentAwareClient<? extends T> client, T entity, SW360SparseAttachment attachment,\n                       Path downloadPath)", "class_method_signature": "SW360AttachmentUtils.downloadAttachment(SW360AttachmentAwareClient<? extends T> client, T entity, SW360SparseAttachment attachment,\n                       Path downloadPath)", "testcase": false, "constructor": false, "invocations": ["orElseGet", "map", "ofNullable", "getSelfLink", "defaultAttachmentDownloadProcessor", "optionalFuture", "processAttachment", "getHref", "getId", "completedFuture", "empty"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}