{"test_class": {"identifier": "GeoTiffWriterTest", "superclass": "extends Assert", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = org.geotools.util.logging.Logging\n            .getLogger(GeoTiffWriterTest.class.toString());", "modifier": "private static final", "type": "Logger", "declarator": "logger = org.geotools.util.logging.Logging\n            .getLogger(GeoTiffWriterTest.class.toString())", "var_name": "logger"}], "file": "modules/unsupported/geotiff_new/src/test/java/org/geotools/gce/geotiff/GeoTiffWriterTest.java"}, "test_case": {"identifier": "testWriteGoogleMercator", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n    @Ignore\n    public void testWriteGoogleMercator() throws Exception {\n        final String google= \"PROJCS[\\\"WGS84 / Google Mercator\\\", GEOGCS[\\\"WGS 84\\\", DATUM[\\\"World Geodetic System 1984\\\", SPHEROID[\\\"WGS 84\\\", 6378137.0, 298.257223563, AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]], AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]], PRIMEM[\\\"Greenwich\\\", 0.0, AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]], UNIT[\\\"degree\\\", 0.017453292519943295], AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]], PROJECTION[\\\"Mercator (1SP)\\\", AUTHORITY[\\\"EPSG\\\",\\\"9804\\\"]], PARAMETER[\\\"semi_major\\\", 6378137.0], PARAMETER[\\\"semi_minor\\\", 6378137.0], PARAMETER[\\\"latitude_of_origin\\\", 0.0], PARAMETER[\\\"central_meridian\\\", 0.0], PARAMETER[\\\"scale_factor\\\", 1.0], PARAMETER[\\\"false_easting\\\", 0.0], PARAMETER[\\\"false_northing\\\", 0.0], UNIT[\\\"m\\\", 1.0],  AUTHORITY[\\\"EPSG\\\",\\\"900913\\\"]]\";\n        final CoordinateReferenceSystem googleCRS= CRS.parseWKT(google);\n        \n        //\n        // world geotiff\n        //\n        final File testFile = TestData.file(GeoTiffReaderTest.class, \"latlon.tiff\");\n        final AbstractGridFormat format = new GeoTiffFormat();\n        assertTrue(format.accepts(testFile));\n        \n        // getting a reader\n        GeoTiffReader reader = new GeoTiffReader(testFile);\n\n        // reading the coverage\n        GridCoverage2D coverage = (GridCoverage2D) reader.read(null);\n\n        // check coverage and crs\n        assertNotNull(coverage);\n        assertNotNull(coverage.getCoordinateReferenceSystem());\n        assertEquals(CRS.lookupIdentifier(coverage.getCoordinateReferenceSystem(), true), \"EPSG:4267\");\n        reader.dispose();\n        \n        // reproject\n        coverage=(GridCoverage2D) Operations.DEFAULT.resample(coverage, googleCRS);\n        \n        // get a writer\n        final File mercator = new File(TestData.file(GeoTiffReaderTest.class, \".\"),\"wms_900913.tif\");\n        GeoTiffWriter writer = new GeoTiffWriter(mercator);\n        \n        writer.write(coverage,null );\n        writer.dispose();\n        \n        // getting a reader\n        reader = new GeoTiffReader(mercator);\n        // reading the coverage\n        GridCoverage2D coverageMercator = (GridCoverage2D) reader.read(null);\n        // check coverage and crs\n        assertNotNull(coverageMercator);\n        assertNotNull(coverageMercator.getCoordinateReferenceSystem());\n        assertTrue(CRS.equalsIgnoreMetadata(coverage.getCoordinateReferenceSystem(),googleCRS));\n        assertTrue(coverage.getEnvelope2D().getFrame().equals(coverageMercator.getEnvelope2D().getFrame()));\n        reader.dispose();\n        coverage.dispose(true);\n        coverage.dispose(true);\n                \n    }", "signature": "void testWriteGoogleMercator()", "full_signature": "@Test @Ignore public void testWriteGoogleMercator()", "class_method_signature": "GeoTiffWriterTest.testWriteGoogleMercator()", "testcase": true, "constructor": false, "invocations": ["parseWKT", "file", "assertTrue", "accepts", "read", "assertNotNull", "assertNotNull", "getCoordinateReferenceSystem", "assertEquals", "lookupIdentifier", "getCoordinateReferenceSystem", "dispose", "resample", "file", "write", "dispose", "read", "assertNotNull", "assertNotNull", "getCoordinateReferenceSystem", "assertTrue", "equalsIgnoreMetadata", "getCoordinateReferenceSystem", "assertTrue", "equals", "getFrame", "getEnvelope2D", "getFrame", "getEnvelope2D", "dispose", "dispose", "dispose"]}, "focal_class": {"identifier": "GeoTiffWriter", "superclass": "extends AbstractGridCoverageWriter", "interfaces": "implements\n\t\tGridCoverageWriter", "fields": [{"original_string": "private final static Logger LOGGER = org.geotools.util.logging.Logging.getLogger(GeoTiffWriter.class.toString());", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging.getLogger(GeoTiffWriter.class.toString())", "var_name": "LOGGER"}, {"original_string": "private final Map<String, String> metadataKeyValue = new HashMap<String, String>();", "modifier": "private final", "type": "Map<String, String>", "declarator": "metadataKeyValue = new HashMap<String, String>()", "var_name": "metadataKeyValue"}], "methods": [{"identifier": "GeoTiffWriter", "parameters": "(Object destination)", "modifiers": "public", "return": "", "signature": " GeoTiffWriter(Object destination)", "full_signature": "public  GeoTiffWriter(Object destination)", "class_method_signature": "GeoTiffWriter.GeoTiffWriter(Object destination)", "testcase": false, "constructor": true}, {"identifier": "setMetadataValue", "parameters": "(String name, String value)", "modifiers": "@Override public", "return": "void", "signature": "void setMetadataValue(String name, String value)", "full_signature": "@Override public void setMetadataValue(String name, String value)", "class_method_signature": "GeoTiffWriter.setMetadataValue(String name, String value)", "testcase": false, "constructor": false}, {"identifier": "GeoTiffWriter", "parameters": "(Object destination, Hints hints)", "modifiers": "public", "return": "", "signature": " GeoTiffWriter(Object destination, Hints hints)", "full_signature": "public  GeoTiffWriter(Object destination, Hints hints)", "class_method_signature": "GeoTiffWriter.GeoTiffWriter(Object destination, Hints hints)", "testcase": false, "constructor": true}, {"identifier": "getFormat", "parameters": "()", "modifiers": "public", "return": "Format", "signature": "Format getFormat()", "full_signature": "public Format getFormat()", "class_method_signature": "GeoTiffWriter.getFormat()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(final GridCoverage gc, final GeneralParameterValue[] params)", "modifiers": "public", "return": "void", "signature": "void write(final GridCoverage gc, final GeneralParameterValue[] params)", "full_signature": "public void write(final GridCoverage gc, final GeneralParameterValue[] params)", "class_method_signature": "GeoTiffWriter.write(final GridCoverage gc, final GeneralParameterValue[] params)", "testcase": false, "constructor": false}, {"identifier": "setGeoReference", "parameters": "(final CoordinateReferenceSystem crs,\n            final GeoTiffIIOMetadataEncoder metadata, final AffineTransform rasterToModel,\n            GridEnvelope2D range)", "modifiers": "private static", "return": "void", "signature": "void setGeoReference(final CoordinateReferenceSystem crs,\n            final GeoTiffIIOMetadataEncoder metadata, final AffineTransform rasterToModel,\n            GridEnvelope2D range)", "full_signature": "private static void setGeoReference(final CoordinateReferenceSystem crs,\n            final GeoTiffIIOMetadataEncoder metadata, final AffineTransform rasterToModel,\n            GridEnvelope2D range)", "class_method_signature": "GeoTiffWriter.setGeoReference(final CoordinateReferenceSystem crs,\n            final GeoTiffIIOMetadataEncoder metadata, final AffineTransform rasterToModel,\n            GridEnvelope2D range)", "testcase": false, "constructor": false}, {"identifier": "writeImage", "parameters": "(final RenderedImage image, final ImageOutputStream outputStream,\n            final GeoTiffIIOMetadataEncoder geoTIFFMetadata, GeoToolsWriteParams gtParams)", "modifiers": "private", "return": "boolean", "signature": "boolean writeImage(final RenderedImage image, final ImageOutputStream outputStream,\n            final GeoTiffIIOMetadataEncoder geoTIFFMetadata, GeoToolsWriteParams gtParams)", "full_signature": "private boolean writeImage(final RenderedImage image, final ImageOutputStream outputStream,\n            final GeoTiffIIOMetadataEncoder geoTIFFMetadata, GeoToolsWriteParams gtParams)", "class_method_signature": "GeoTiffWriter.writeImage(final RenderedImage image, final ImageOutputStream outputStream,\n            final GeoTiffIIOMetadataEncoder geoTIFFMetadata, GeoToolsWriteParams gtParams)", "testcase": false, "constructor": false}, {"identifier": "getCandidateNoData", "parameters": "(GridCoverage gc)", "modifiers": "static", "return": "double", "signature": "double getCandidateNoData(GridCoverage gc)", "full_signature": "static double getCandidateNoData(GridCoverage gc)", "class_method_signature": "GeoTiffWriter.getCandidateNoData(GridCoverage gc)", "testcase": false, "constructor": false}], "file": "modules/unsupported/geotiff_new/src/main/java/org/geotools/gce/geotiff/GeoTiffWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(final GridCoverage gc, final GeneralParameterValue[] params)", "modifiers": "public", "return": "void", "body": "public void write(final GridCoverage gc, final GeneralParameterValue[] params)\n            throws IllegalArgumentException, IOException, IndexOutOfBoundsException {\n\n        GeoToolsWriteParams gtParams = null;\n        boolean writeTfw = GeoTiffFormat.WRITE_TFW.getDefaultValue();\n        if (params != null) {\n            // /////////////////////////////////////////////////////////////////////\n            //\n            // Checking params\n            //\n            // /////////////////////////////////////////////////////////////////////\n            if (params != null) {\n                Parameter param;\n                final int length = params.length;\n                for (int i = 0; i < length; i++) {\n                    param = (Parameter) params[i];\n                    final ReferenceIdentifier name = param.getDescriptor().getName();\n                    if (name.equals(AbstractGridFormat.GEOTOOLS_WRITE_PARAMS.getName())) {\n                        gtParams = (GeoToolsWriteParams) param.getValue();\n                    }\n                    if (name.equals(GeoTiffFormat.WRITE_TFW.getName())) {\n                        writeTfw = (Boolean) param.getValue();\n                    }\n                }\n            }\n        }\n        if (gtParams == null)\n            gtParams = new GeoTiffWriteParams();\n\n        // /////////////////////////////////////////////////////////////////////\n        //\n        // getting the coordinate reference system\n        //\n        // /////////////////////////////////////////////////////////////////////\n        final GridGeometry2D gg = (GridGeometry2D) gc.getGridGeometry();\n        GridEnvelope2D range = gg.getGridRange2D();\n        final Rectangle sourceRegion = gtParams.getSourceRegion();\n        if (sourceRegion != null)\n            range = new GridEnvelope2D(sourceRegion);\n        final AffineTransform tr = (AffineTransform) gg.getGridToCRS2D();\n        final CoordinateReferenceSystem crs = gg.getCoordinateReferenceSystem2D();\n        final double inNoData = getCandidateNoData(gc);\n\n        // /////////////////////////////////////////////////////////////////////\n        //\n        // we handle just projected and geographic crs\n        //\n        // /////////////////////////////////////////////////////////////////////\n        if (crs instanceof ProjectedCRS || crs instanceof GeographicCRS) {\n\n            // creating geotiff metadata\n            final CRS2GeoTiffMetadataAdapter adapter = new CRS2GeoTiffMetadataAdapter(crs);\n            final GeoTiffIIOMetadataEncoder metadata = adapter.parseCoordinateReferenceSystem();\n            if (!Double.isNaN(inNoData))\n                metadata.setNoData(inNoData);\n            if (metadataKeyValue != null && !metadataKeyValue.isEmpty()) {\n                metadata.setTiffTagsMetadata(metadataKeyValue);\n            }\n\n            // setting georeferencing\n            setGeoReference(crs, metadata, tr, range);\n\n            // writing ALWAYS the geophysics vew of the data\n            writeImage(((GridCoverage2D) gc).geophysics(true).getRenderedImage(), this.outStream,\n                    metadata, gtParams);\n\n            // write tfw\n            if (writeTfw && (destination instanceof File)) {\n                final File destFile = (File) this.destination;\n                final File tfw = new File(destFile.getParentFile(), destFile.getName().replace(\n                        \"tif\", \"tfw\"));\n                final BufferedWriter outW = new BufferedWriter(new FileWriter(tfw));\n                try {\n                    outW.write(gc.getCoordinateReferenceSystem().toWKT());\n                } finally {\n                    try {\n                        outW.close();\n                    } catch (Exception e) {\n                        // ssshhh :)\n                    }\n                }\n            }\n\n        } else {\n            throw new GeoTiffException(\n                    null, \"The supplied grid coverage uses an unsupported crs! You are allowed to\"\n                    + \" use only projected and geographic coordinate reference systems\", null);\n        }\n    }", "signature": "void write(final GridCoverage gc, final GeneralParameterValue[] params)", "full_signature": "public void write(final GridCoverage gc, final GeneralParameterValue[] params)", "class_method_signature": "GeoTiffWriter.write(final GridCoverage gc, final GeneralParameterValue[] params)", "testcase": false, "constructor": false, "invocations": ["getDefaultValue", "getName", "getDescriptor", "equals", "getName", "getValue", "equals", "getName", "getValue", "getGridGeometry", "getGridRange2D", "getSourceRegion", "getGridToCRS2D", "getCoordinateReferenceSystem2D", "getCandidateNoData", "parseCoordinateReferenceSystem", "isNaN", "setNoData", "isEmpty", "setTiffTagsMetadata", "setGeoReference", "writeImage", "getRenderedImage", "geophysics", "getParentFile", "replace", "getName", "write", "toWKT", "getCoordinateReferenceSystem", "close"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}