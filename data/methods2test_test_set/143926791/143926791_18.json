{"test_class": {"identifier": "UserServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "MockMvc mockMvc;", "modifier": "", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@InjectMocks\n\tUserService service;", "modifier": "@InjectMocks", "type": "UserService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n\tUserRepository repo;", "modifier": "@Mock", "type": "UserRepository", "declarator": "repo", "var_name": "repo"}], "file": "user-service/src/test/java/io/pivotal/user/service/UserServiceTest.java"}, "test_case": {"identifier": "doFindAccountUserIdNotFound", "parameters": "()", "modifiers": "@Test(expected=NoRecordsFoundException.class) public", "return": "void", "body": "@Test(expected=NoRecordsFoundException.class)\n\tpublic void doFindAccountUserIdNotFound() {\n\t\twhen(repo.findByUserid(ServiceTestConfiguration.BAD_USER_ID)).thenReturn(null);\n\t\tservice.findUser(ServiceTestConfiguration.BAD_USER_ID);\n\t}", "signature": "void doFindAccountUserIdNotFound()", "full_signature": "@Test(expected=NoRecordsFoundException.class) public void doFindAccountUserIdNotFound()", "class_method_signature": "UserServiceTest.doFindAccountUserIdNotFound()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findByUserid", "findUser"]}, "focal_class": {"identifier": "UserService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory\n\t\t\t.getLogger(UserService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory\n\t\t\t.getLogger(UserService.class)", "var_name": "logger"}, {"original_string": "@Autowired\n\tUserRepository user;", "modifier": "@Autowired", "type": "UserRepository", "declarator": "user", "var_name": "user"}], "methods": [{"identifier": "findUser", "parameters": "(Integer id)", "modifiers": "public", "return": "User", "signature": "User findUser(Integer id)", "full_signature": "public User findUser(Integer id)", "class_method_signature": "UserService.findUser(Integer id)", "testcase": false, "constructor": false}, {"identifier": "findUser", "parameters": "(String username)", "modifiers": "public", "return": "User", "signature": "User findUser(String username)", "full_signature": "public User findUser(String username)", "class_method_signature": "UserService.findUser(String username)", "testcase": false, "constructor": false}, {"identifier": "findAccountprofileByAuthtoken", "parameters": "(String token)", "modifiers": "@Cacheable(value = \"authorizationCache\") public", "return": "User", "signature": "User findAccountprofileByAuthtoken(String token)", "full_signature": "@Cacheable(value = \"authorizationCache\") public User findAccountprofileByAuthtoken(String token)", "class_method_signature": "UserService.findAccountprofileByAuthtoken(String token)", "testcase": false, "constructor": false}, {"identifier": "saveUser", "parameters": "(User userRequest)", "modifiers": "public", "return": "Integer", "signature": "Integer saveUser(User userRequest)", "full_signature": "public Integer saveUser(User userRequest)", "class_method_signature": "UserService.saveUser(User userRequest)", "testcase": false, "constructor": false}, {"identifier": "login", "parameters": "(String username, String password)", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> login(String username, String password)", "full_signature": "public Map<String, Object> login(String username, String password)", "class_method_signature": "UserService.login(String username, String password)", "testcase": false, "constructor": false}, {"identifier": "logout", "parameters": "(String userId)", "modifiers": "public", "return": "User", "signature": "User logout(String userId)", "full_signature": "public User logout(String userId)", "class_method_signature": "UserService.logout(String userId)", "testcase": false, "constructor": false}], "file": "user-service/src/main/java/io/pivotal/user/service/UserService.java"}, "focal_method": {"identifier": "findUser", "parameters": "(Integer id)", "modifiers": "public", "return": "User", "body": "public User findUser(Integer id) {\n\n\t\tlogger.debug(\"user.findAccount: id=\" + id);\n\n\t\tOptional<User> account = user.findById(id);\n\t\tif (!account.isPresent()) {\n\t\t\tlogger.warn(\"UserService.findAccount: could not find account with id: \"\n\t\t\t\t\t+ id);\n\t\t\tthrow new NoRecordsFoundException();\n\t\t}\n\n\t\tlogger.info(String\n\t\t\t\t.format(\"UserService.findAccount - retrieved account with id: %s. Payload is: %s\",\n\t\t\t\t\t\tid, account.get()));\n\n\t\treturn account.get();\n\t}", "signature": "User findUser(Integer id)", "full_signature": "public User findUser(Integer id)", "class_method_signature": "UserService.findUser(Integer id)", "testcase": false, "constructor": false, "invocations": ["debug", "findById", "isPresent", "warn", "info", "format", "get", "get"]}, "repository": {"repo_id": 143926791, "url": "https://github.com/Pivotal-Field-Engineering/pivotal-bank-demo", "language": "Java", "is_fork": false, "fork_count": 48, "stargazer_count": 35, "size": 45556, "license": "licensed"}}