{"test_class": {"identifier": "AbstractOnSubscribeTest", "superclass": "", "interfaces": "", "fields": [], "file": "zava/src/test/java/rx/observables/AbstractOnSubscribeTest.java"}, "test_case": {"identifier": "testIndependentStates", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIndependentStates() {\n        int count = 100;\n        final ConcurrentHashMap<Object, Object> states = new ConcurrentHashMap<Object, Object>();\n        AbstractOnSubscribe<Integer, Void> aos = new AbstractOnSubscribe<Integer, Void>() {\n            @Override\n            protected void next(SubscriptionState<Integer, Void> state) {\n                states.put(state, state);\n                state.stop();\n            }\n        };\n        Observable<Integer> source = aos.toObservable();\n        for (int i = 0; i < count; i++) {\n            source.subscribe();\n        }\n        \n        assertEquals(count, states.size());\n    }", "signature": "void testIndependentStates()", "full_signature": "@Test public void testIndependentStates()", "class_method_signature": "AbstractOnSubscribeTest.testIndependentStates()", "testcase": true, "constructor": false, "invocations": ["put", "stop", "toObservable", "subscribe", "assertEquals", "size"]}, "focal_class": {"identifier": "AbstractOnSubscribe", "superclass": "", "interfaces": "implements OnSubscribe<T>", "fields": [{"original_string": "private static final Func1<Object, Object> NULL_FUNC1 = new Func1<Object, Object>() {\n        @Override\n        public Object call(Object t1) {\n            return null;\n        }\n    };", "modifier": "private static final", "type": "Func1<Object, Object>", "declarator": "NULL_FUNC1 = new Func1<Object, Object>() {\n        @Override\n        public Object call(Object t1) {\n            return null;\n        }\n    }", "var_name": "NULL_FUNC1"}], "methods": [{"identifier": "onSubscribe", "parameters": "(Subscriber<? super T> subscriber)", "modifiers": "protected", "return": "S", "signature": "S onSubscribe(Subscriber<? super T> subscriber)", "full_signature": "protected S onSubscribe(Subscriber<? super T> subscriber)", "class_method_signature": "AbstractOnSubscribe.onSubscribe(Subscriber<? super T> subscriber)", "testcase": false, "constructor": false}, {"identifier": "onTerminated", "parameters": "(S state)", "modifiers": "protected", "return": "void", "signature": "void onTerminated(S state)", "full_signature": "protected void onTerminated(S state)", "class_method_signature": "AbstractOnSubscribe.onTerminated(S state)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "(SubscriptionState<T, S> state)", "modifiers": "protected abstract", "return": "void", "signature": "void next(SubscriptionState<T, S> state)", "full_signature": "protected abstract void next(SubscriptionState<T, S> state)", "class_method_signature": "AbstractOnSubscribe.next(SubscriptionState<T, S> state)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "(final Subscriber<? super T> subscriber)", "modifiers": "@Override public final", "return": "void", "signature": "void call(final Subscriber<? super T> subscriber)", "full_signature": "@Override public final void call(final Subscriber<? super T> subscriber)", "class_method_signature": "AbstractOnSubscribe.call(final Subscriber<? super T> subscriber)", "testcase": false, "constructor": false}, {"identifier": "toObservable", "parameters": "()", "modifiers": "public final", "return": "Observable<T>", "signature": "Observable<T> toObservable()", "full_signature": "public final Observable<T> toObservable()", "class_method_signature": "AbstractOnSubscribe.toObservable()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Action1<SubscriptionState<T, S>> next)", "modifiers": "public static", "return": "AbstractOnSubscribe<T, S>", "signature": "AbstractOnSubscribe<T, S> create(Action1<SubscriptionState<T, S>> next)", "full_signature": "public static AbstractOnSubscribe<T, S> create(Action1<SubscriptionState<T, S>> next)", "class_method_signature": "AbstractOnSubscribe.create(Action1<SubscriptionState<T, S>> next)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Action1<SubscriptionState<T, S>> next,\n            Func1<? super Subscriber<? super T>, ? extends S> onSubscribe)", "modifiers": "public static", "return": "AbstractOnSubscribe<T, S>", "signature": "AbstractOnSubscribe<T, S> create(Action1<SubscriptionState<T, S>> next,\n            Func1<? super Subscriber<? super T>, ? extends S> onSubscribe)", "full_signature": "public static AbstractOnSubscribe<T, S> create(Action1<SubscriptionState<T, S>> next,\n            Func1<? super Subscriber<? super T>, ? extends S> onSubscribe)", "class_method_signature": "AbstractOnSubscribe.create(Action1<SubscriptionState<T, S>> next,\n            Func1<? super Subscriber<? super T>, ? extends S> onSubscribe)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Action1<SubscriptionState<T, S>> next,\n            Func1<? super Subscriber<? super T>, ? extends S> onSubscribe, Action1<? super S> onTerminated)", "modifiers": "public static", "return": "AbstractOnSubscribe<T, S>", "signature": "AbstractOnSubscribe<T, S> create(Action1<SubscriptionState<T, S>> next,\n            Func1<? super Subscriber<? super T>, ? extends S> onSubscribe, Action1<? super S> onTerminated)", "full_signature": "public static AbstractOnSubscribe<T, S> create(Action1<SubscriptionState<T, S>> next,\n            Func1<? super Subscriber<? super T>, ? extends S> onSubscribe, Action1<? super S> onTerminated)", "class_method_signature": "AbstractOnSubscribe.create(Action1<SubscriptionState<T, S>> next,\n            Func1<? super Subscriber<? super T>, ? extends S> onSubscribe, Action1<? super S> onTerminated)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/observables/AbstractOnSubscribe.java"}, "focal_method": {"identifier": "toObservable", "parameters": "()", "modifiers": "public final", "return": "Observable<T>", "body": "public final Observable<T> toObservable() {\n        return Observable.create(this);\n    }", "signature": "Observable<T> toObservable()", "full_signature": "public final Observable<T> toObservable()", "class_method_signature": "AbstractOnSubscribe.toObservable()", "testcase": false, "constructor": false, "invocations": ["create"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}