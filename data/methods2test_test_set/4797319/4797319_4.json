{"test_class": {"identifier": "TestHash", "superclass": "", "interfaces": "", "fields": [], "file": "sparqled-commons/src/test/java/org/sindice/core/analytics/commons/util/TestHash.java"}, "test_case": {"identifier": "testLong", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testLong() {\n    assertTrue(Hash.getLong(\"test1\") != Hash.getLong(\"test2\"));\n    assertTrue(Hash.getLong(\"test1\", \"test2\") != Hash.getLong(\"test2\"));\n    assertTrue(Hash.getLong(\"test1\", \"test2\") != Hash.getLong(\"test2\", \"test1\"));\n    assertTrue(Hash.getLong(\"test1\", \"test3\") == Hash.getLong(\"test1\", \"test3\"));\n  }", "signature": "void testLong()", "full_signature": "@Test public void testLong()", "class_method_signature": "TestHash.testLong()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "getLong", "getLong", "assertTrue", "getLong", "getLong", "assertTrue", "getLong", "getLong", "assertTrue", "getLong", "getLong"]}, "focal_class": {"identifier": "Hash", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static MurmurHash3           hasher = new MurmurHash3();", "modifier": "private static", "type": "MurmurHash3", "declarator": "hasher = new MurmurHash3()", "var_name": "hasher"}, {"original_string": "protected static final StringBuilder sb     = new StringBuilder();", "modifier": "protected static final", "type": "StringBuilder", "declarator": "sb     = new StringBuilder()", "var_name": "sb"}], "methods": [{"identifier": "get", "parameters": "(Object s)", "modifiers": "public static", "return": "int", "signature": "int get(Object s)", "full_signature": "public static int get(Object s)", "class_method_signature": "Hash.get(Object s)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Object s1, Object s2)", "modifiers": "public static", "return": "int", "signature": "int get(Object s1, Object s2)", "full_signature": "public static int get(Object s1, Object s2)", "class_method_signature": "Hash.get(Object s1, Object s2)", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "(Object s)", "modifiers": "public static", "return": "long", "signature": "long getLong(Object s)", "full_signature": "public static long getLong(Object s)", "class_method_signature": "Hash.getLong(Object s)", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "(String s)", "modifiers": "public static", "return": "long", "signature": "long getLong(String s)", "full_signature": "public static long getLong(String s)", "class_method_signature": "Hash.getLong(String s)", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "(Object s1, Object s2)", "modifiers": "public static", "return": "long", "signature": "long getLong(Object s1, Object s2)", "full_signature": "public static long getLong(Object s1, Object s2)", "class_method_signature": "Hash.getLong(Object s1, Object s2)", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "(List<Object> toHash)", "modifiers": "public static", "return": "long", "signature": "long getLong(List<Object> toHash)", "full_signature": "public static long getLong(List<Object> toHash)", "class_method_signature": "Hash.getLong(List<Object> toHash)", "testcase": false, "constructor": false}], "file": "sparqled-commons/src/main/java/org/sindice/core/analytics/commons/util/Hash.java"}, "focal_method": {"identifier": "getLong", "parameters": "(Object s)", "modifiers": "public static", "return": "long", "body": "public static long getLong(Object s) {\n    return hasher.hashLong(s);\n  }", "signature": "long getLong(Object s)", "full_signature": "public static long getLong(Object s)", "class_method_signature": "Hash.getLong(Object s)", "testcase": false, "constructor": false, "invocations": ["hashLong"]}, "repository": {"repo_id": 4797319, "url": "https://github.com/sindice/sparqled", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 33, "size": 12885, "license": "licensed"}}