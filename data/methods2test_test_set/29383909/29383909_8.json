{"test_class": {"identifier": "TextTableTest", "superclass": "", "interfaces": "", "fields": [], "file": "karamel-core/src/test/java/se/kth/karamel/common/TextTableTest.java"}, "test_case": {"identifier": "testMakeTable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMakeTable() throws IOException, KaramelException {\n    Settings.CB_CLASSPATH_MODE = true;\n    String ymlString = Resources.toString(Resources.getResource(\"se/kth/karamel/client/model/test-definitions/hopsworks.yml\"), Charsets.UTF_8);\n    JsonCluster definition = ClusterDefinitionService.yamlToJsonObject(ymlString);\n    ClusterRuntime dummyRuntime = MockingUtil.dummyRuntime(definition);\n    List<MachineRuntime> machines = dummyRuntime.getGroups().get(1).getMachines();\n    String[] columnNames = {\"Machine\", \"Public IP\", \"Private IP\", \"SSH Port\", \"SSH User\", \"Life Status\", \"Task Status\"};\n\n    String[][] data = new String[machines.size()][columnNames.length];\n    for (int i = 0; i < machines.size(); i++) {\n      MachineRuntime machine = machines.get(i);\n      data[i][0] = machine.getName();\n      data[i][1] = \"<a kref='shellconnect \" + machine.getPublicIp() + \"'>\" + machine.getPublicIp() + \"</a>\";\n      data[i][2] = machine.getPrivateIp();\n      data[i][3] = machine.getSshPort() + \"\";\n      data[i][4] = machine.getSshUser();\n      data[i][5] = machine.getLifeStatus() + \"\";\n      data[i][6] = machine.getTasksStatus() + \"\";\n    }\n    String table = TextTable.makeTable(columnNames, 0, data, true);\n    System.out.println(table);\n    table = TextTable.makeTable(columnNames, 0, data, false);\n    System.out.println(table);\n  }", "signature": "void testMakeTable()", "full_signature": "@Test public void testMakeTable()", "class_method_signature": "TextTableTest.testMakeTable()", "testcase": true, "constructor": false, "invocations": ["toString", "getResource", "yamlToJsonObject", "dummyRuntime", "getMachines", "get", "getGroups", "size", "size", "get", "getName", "getPublicIp", "getPublicIp", "getPrivateIp", "getSshPort", "getSshUser", "getLifeStatus", "getTasksStatus", "makeTable", "println", "makeTable", "println"]}, "focal_class": {"identifier": "TextTable", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Pattern METADATA_PATTERN = Pattern.compile(\"(<a[^>]*>([^<>]*)<\\\\/a>)\");", "modifier": "private static", "type": "Pattern", "declarator": "METADATA_PATTERN = Pattern.compile(\"(<a[^>]*>([^<>]*)<\\\\/a>)\")", "var_name": "METADATA_PATTERN"}], "methods": [{"identifier": "makeTable", "parameters": "(String[] columnNames, int sortIndex, Object[][] data, boolean rowNumbering)", "modifiers": "public static", "return": "String", "signature": "String makeTable(String[] columnNames, int sortIndex, Object[][] data, boolean rowNumbering)", "full_signature": "public static String makeTable(String[] columnNames, int sortIndex, Object[][] data, boolean rowNumbering)", "class_method_signature": "TextTable.makeTable(String[] columnNames, int sortIndex, Object[][] data, boolean rowNumbering)", "testcase": false, "constructor": false}, {"identifier": "calcColLengths", "parameters": "(String[] columnNames, Object[][] data)", "modifiers": "private static", "return": "int[]", "signature": "int[] calcColLengths(String[] columnNames, Object[][] data)", "full_signature": "private static int[] calcColLengths(String[] columnNames, Object[][] data)", "class_method_signature": "TextTable.calcColLengths(String[] columnNames, Object[][] data)", "testcase": false, "constructor": false}, {"identifier": "maxLength", "parameters": "(int length, Object data)", "modifiers": "private static", "return": "int", "signature": "int maxLength(int length, Object data)", "full_signature": "private static int maxLength(int length, Object data)", "class_method_signature": "TextTable.maxLength(int length, Object data)", "testcase": false, "constructor": false}, {"identifier": "realDataLen", "parameters": "(Object data)", "modifiers": "public static", "return": "int", "signature": "int realDataLen(Object data)", "full_signature": "public static int realDataLen(Object data)", "class_method_signature": "TextTable.realDataLen(Object data)", "testcase": false, "constructor": false}], "file": "karamel-core/src/main/java/se/kth/karamel/common/TextTable.java"}, "focal_method": {"identifier": "makeTable", "parameters": "(String[] columnNames, int sortIndex, Object[][] data, boolean rowNumbering)", "modifiers": "public static", "return": "String", "body": "public static String makeTable(String[] columnNames, int sortIndex, Object[][] data, boolean rowNumbering) {\n    StringBuilder builder = new StringBuilder();\n    int[] colLengths = calcColLengths(columnNames, data);\n    int allColsLen = 0;\n    for (int i : colLengths) {\n      allColsLen += i;\n    }\n    int totalLegth = columnNames.length * 1 //column marginal space\n            + (columnNames.length + 1) //pipe lines \n            + allColsLen;  //real data size\n\n    int paddingLen = 0;\n    if (rowNumbering && data.length > 0) {\n      int len = data.length;\n      while (len > 0) {\n        paddingLen++;\n        len /= 10;\n      }\n    }\n\n    if (rowNumbering) {\n      builder.append(StringUtils.repeat(\" \", paddingLen + 2));\n    }\n\n    //top line _______\n    builder.append(StringUtils.repeat(\"_\", totalLegth));\n\n    builder.append(\"\\n\");\n\n    if (rowNumbering) {\n      builder.append(StringUtils.repeat(\" \", paddingLen + 2));\n    }\n\n    //title row\n    for (int i = 0; i < columnNames.length; i++) {\n      builder.append(String.format(\"| %-\" + colLengths[i] + \"s\", columnNames[i]));\n    }\n\n    builder.append(\"|\"); //closing pipe of the title line\n\n    builder.append(\"\\n\");\n    //botton line =====\n    if (rowNumbering) {\n      builder.append(StringUtils.repeat(\" \", paddingLen + 2));\n    }\n    builder.append(StringUtils.repeat(\"=\", totalLegth));\n    //data rows\n    for (int x = 0; x < data.length; x++) {\n      Object[] row = data[x];\n      builder.append(\"\\n\");\n      if (rowNumbering) {\n        builder.append(String.format(\"%\" + paddingLen + \"d. \", x + 1));\n      }\n      for (int i = 0; i < row.length; i++) {\n        builder.append(String.format(\"| %-\" + colLengths[i] + \"s\", row[i]));\n      }\n\n      builder.append(\"|\"); //closing pipe of the row line\n    }\n    return builder.toString();\n  }", "signature": "String makeTable(String[] columnNames, int sortIndex, Object[][] data, boolean rowNumbering)", "full_signature": "public static String makeTable(String[] columnNames, int sortIndex, Object[][] data, boolean rowNumbering)", "class_method_signature": "TextTable.makeTable(String[] columnNames, int sortIndex, Object[][] data, boolean rowNumbering)", "testcase": false, "constructor": false, "invocations": ["calcColLengths", "append", "repeat", "append", "repeat", "append", "append", "repeat", "append", "format", "append", "append", "append", "repeat", "append", "repeat", "append", "append", "format", "append", "format", "append", "toString"]}, "repository": {"repo_id": 29383909, "url": "https://github.com/karamelchef/karamel", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 30, "size": 12029, "license": "licensed"}}