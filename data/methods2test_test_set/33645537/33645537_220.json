{"test_class": {"identifier": "AvlTreeMedianTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DELTA = 0.1;", "modifier": "private static final", "type": "double", "declarator": "DELTA = 0.1", "var_name": "DELTA"}, {"original_string": "private AvlTreeMedian avlTreeMedian;", "modifier": "private", "type": "AvlTreeMedian", "declarator": "avlTreeMedian", "var_name": "avlTreeMedian"}], "file": "algs/src/test/java/com/github/pedrovgs/problem36/AvlTreeMedianTest.java"}, "test_case": {"identifier": "shouldReturnRootElementIfTheTreeContainsJustOneElement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldReturnRootElementIfTheTreeContainsJustOneElement() {\n    BinaryNode<Integer> root = new BinaryNode<Integer>(1);\n\n    double median = avlTreeMedian.find(root);\n\n    assertEquals(1, median, DELTA);\n  }", "signature": "void shouldReturnRootElementIfTheTreeContainsJustOneElement()", "full_signature": "@Test public void shouldReturnRootElementIfTheTreeContainsJustOneElement()", "class_method_signature": "AvlTreeMedianTest.shouldReturnRootElementIfTheTreeContainsJustOneElement()", "testcase": true, "constructor": false, "invocations": ["find", "assertEquals"]}, "focal_class": {"identifier": "AvlTreeMedian", "superclass": "", "interfaces": "", "fields": [{"original_string": "BinaryTreeInOrder binaryTreeInOrder;", "modifier": "", "type": "BinaryTreeInOrder", "declarator": "binaryTreeInOrder", "var_name": "binaryTreeInOrder"}], "methods": [{"identifier": "AvlTreeMedian", "parameters": "()", "modifiers": "public", "return": "", "signature": " AvlTreeMedian()", "full_signature": "public  AvlTreeMedian()", "class_method_signature": "AvlTreeMedian.AvlTreeMedian()", "testcase": false, "constructor": true}, {"identifier": "find", "parameters": "(BinaryNode<Integer> root)", "modifiers": "public", "return": "double", "signature": "double find(BinaryNode<Integer> root)", "full_signature": "public double find(BinaryNode<Integer> root)", "class_method_signature": "AvlTreeMedian.find(BinaryNode<Integer> root)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem36/AvlTreeMedian.java"}, "focal_method": {"identifier": "find", "parameters": "(BinaryNode<Integer> root)", "modifiers": "public", "return": "double", "body": "public double find(BinaryNode<Integer> root) {\n    if (root == null) {\n      throw new IllegalArgumentException(\"You can't pass a null binary tree to this method.\");\n    }\n\n    List<BinaryNode<Integer>> sortedElements = binaryTreeInOrder.getIterative(root);\n    double median = 0;\n    if (sortedElements.size() % 2 == 0) {\n      median = (sortedElements.get(sortedElements.size() / 2).getData() + sortedElements.get(\n          sortedElements.size() / 2 - 1).getData()) / 2;\n    } else {\n      median = sortedElements.get(sortedElements.size() / 2).getData();\n    }\n    return median;\n  }", "signature": "double find(BinaryNode<Integer> root)", "full_signature": "public double find(BinaryNode<Integer> root)", "class_method_signature": "AvlTreeMedian.find(BinaryNode<Integer> root)", "testcase": false, "constructor": false, "invocations": ["getIterative", "size", "getData", "get", "size", "getData", "get", "size", "getData", "get", "size"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}