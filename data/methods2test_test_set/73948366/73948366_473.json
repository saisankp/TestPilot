{"test_class": {"identifier": "KeyRefresherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MessageDigest md = MessageDigest.getInstance(\"MD5\");", "modifier": "private final", "type": "MessageDigest", "declarator": "md = MessageDigest.getInstance(\"MD5\")", "var_name": "md"}, {"original_string": "private ClassLoader classLoader = this.getClass().getClassLoader();", "modifier": "private", "type": "ClassLoader", "declarator": "classLoader = this.getClass().getClassLoader()", "var_name": "classLoader"}, {"original_string": "@Mocked\n    private KeyManagerProxy mockedKeyManagerProxy;", "modifier": "@Mocked\n    private", "type": "KeyManagerProxy", "declarator": "mockedKeyManagerProxy", "var_name": "mockedKeyManagerProxy"}, {"original_string": "@Mocked\n    private TrustManagerProxy mockedTrustManagerProxy;", "modifier": "@Mocked\n    private", "type": "TrustManagerProxy", "declarator": "mockedTrustManagerProxy", "var_name": "mockedTrustManagerProxy"}, {"original_string": "@Mocked\n    private TrustStore mockedTrustStore;", "modifier": "@Mocked\n    private", "type": "TrustStore", "declarator": "mockedTrustStore", "var_name": "mockedTrustStore"}], "file": "libs/java/cert_refresher/src/test/java/com/oath/auth/KeyRefresherTest.java"}, "test_case": {"identifier": "haveFilesBeenChangedTestFilesAltered", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void haveFilesBeenChangedTestFilesAltered() throws Exception {\n        KeyRefresher keyRefresher = new KeyRefresher(\"\", \"\", mockedTrustStore, mockedKeyManagerProxy, mockedTrustManagerProxy);\n        assertTrue(keyRefresher.haveFilesBeenChanged(classLoader.getResource(\"testFile\").getPath(), new byte[md.getDigestLength()]));\n    }", "signature": "void haveFilesBeenChangedTestFilesAltered()", "full_signature": "@Test public void haveFilesBeenChangedTestFilesAltered()", "class_method_signature": "KeyRefresherTest.haveFilesBeenChangedTestFilesAltered()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "haveFilesBeenChanged", "getPath", "getResource", "getDigestLength"]}, "focal_class": {"identifier": "KeyRefresher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(KeyRefresher.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(KeyRefresher.class)", "var_name": "LOGGER"}, {"original_string": "private Thread scanForFileChangesThread;", "modifier": "private", "type": "Thread", "declarator": "scanForFileChangesThread", "var_name": "scanForFileChangesThread"}, {"original_string": "private boolean shutdown = false;", "modifier": "private", "type": "boolean", "declarator": "shutdown = false", "var_name": "shutdown"}, {"original_string": "public static final int DEFAULT_RETRY_CHECK_FREQUENCY = 60_000 * 60;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_RETRY_CHECK_FREQUENCY = 60_000 * 60", "var_name": "DEFAULT_RETRY_CHECK_FREQUENCY"}, {"original_string": "private final MessageDigest md = MessageDigest.getInstance(\"MD5\");", "modifier": "private final", "type": "MessageDigest", "declarator": "md = MessageDigest.getInstance(\"MD5\")", "var_name": "md"}, {"original_string": "private final byte[] lastPublicCertManagerChecksum = new byte[md.getDigestLength()];", "modifier": "private final", "type": "byte[]", "declarator": "lastPublicCertManagerChecksum = new byte[md.getDigestLength()]", "var_name": "lastPublicCertManagerChecksum"}, {"original_string": "private final byte[] lastPrivateKeyManagerChecksum = new byte[md.getDigestLength()];", "modifier": "private final", "type": "byte[]", "declarator": "lastPrivateKeyManagerChecksum = new byte[md.getDigestLength()]", "var_name": "lastPrivateKeyManagerChecksum"}, {"original_string": "private final byte[] lastTrustManagerChecksum = new byte[md.getDigestLength()];", "modifier": "private final", "type": "byte[]", "declarator": "lastTrustManagerChecksum = new byte[md.getDigestLength()]", "var_name": "lastTrustManagerChecksum"}, {"original_string": "private final String athenzPublicCert;", "modifier": "private final", "type": "String", "declarator": "athenzPublicCert", "var_name": "athenzPublicCert"}, {"original_string": "private final String athenzPrivateKey;", "modifier": "private final", "type": "String", "declarator": "athenzPrivateKey", "var_name": "athenzPrivateKey"}, {"original_string": "private final TrustStore trustStore;", "modifier": "private final", "type": "TrustStore", "declarator": "trustStore", "var_name": "trustStore"}, {"original_string": "private final KeyManagerProxy keyManagerProxy;", "modifier": "private final", "type": "KeyManagerProxy", "declarator": "keyManagerProxy", "var_name": "keyManagerProxy"}, {"original_string": "private final TrustManagerProxy trustManagerProxy;", "modifier": "private final", "type": "TrustManagerProxy", "declarator": "trustManagerProxy", "var_name": "trustManagerProxy"}, {"original_string": "private int retryFrequency = DEFAULT_RETRY_CHECK_FREQUENCY;", "modifier": "private", "type": "int", "declarator": "retryFrequency = DEFAULT_RETRY_CHECK_FREQUENCY", "var_name": "retryFrequency"}, {"original_string": "private final KeyRefresherListener keyRefresherListener;", "modifier": "private final", "type": "KeyRefresherListener", "declarator": "keyRefresherListener", "var_name": "keyRefresherListener"}], "methods": [{"identifier": "KeyRefresher", "parameters": "(final String athenzPublicCert, final String athenzPrivateKey, final TrustStore trustStore,\n            final KeyManagerProxy keyManagerProxy, final TrustManagerProxy trustManagerProxy)", "modifiers": "public", "return": "", "signature": " KeyRefresher(final String athenzPublicCert, final String athenzPrivateKey, final TrustStore trustStore,\n            final KeyManagerProxy keyManagerProxy, final TrustManagerProxy trustManagerProxy)", "full_signature": "public  KeyRefresher(final String athenzPublicCert, final String athenzPrivateKey, final TrustStore trustStore,\n            final KeyManagerProxy keyManagerProxy, final TrustManagerProxy trustManagerProxy)", "class_method_signature": "KeyRefresher.KeyRefresher(final String athenzPublicCert, final String athenzPrivateKey, final TrustStore trustStore,\n            final KeyManagerProxy keyManagerProxy, final TrustManagerProxy trustManagerProxy)", "testcase": false, "constructor": true}, {"identifier": "KeyRefresher", "parameters": "(final String athenzPublicCert, final String athenzPrivateKey, final TrustStore trustStore,\n                        final KeyManagerProxy keyManagerProxy, final TrustManagerProxy trustManagerProxy,\n                        final KeyRefresherListener keyRefresherListener)", "modifiers": "public", "return": "", "signature": " KeyRefresher(final String athenzPublicCert, final String athenzPrivateKey, final TrustStore trustStore,\n                        final KeyManagerProxy keyManagerProxy, final TrustManagerProxy trustManagerProxy,\n                        final KeyRefresherListener keyRefresherListener)", "full_signature": "public  KeyRefresher(final String athenzPublicCert, final String athenzPrivateKey, final TrustStore trustStore,\n                        final KeyManagerProxy keyManagerProxy, final TrustManagerProxy trustManagerProxy,\n                        final KeyRefresherListener keyRefresherListener)", "class_method_signature": "KeyRefresher.KeyRefresher(final String athenzPublicCert, final String athenzPrivateKey, final TrustStore trustStore,\n                        final KeyManagerProxy keyManagerProxy, final TrustManagerProxy trustManagerProxy,\n                        final KeyRefresherListener keyRefresherListener)", "testcase": false, "constructor": true}, {"identifier": "getKeyManagerProxy", "parameters": "()", "modifiers": "public", "return": "KeyManagerProxy", "signature": "KeyManagerProxy getKeyManagerProxy()", "full_signature": "public KeyManagerProxy getKeyManagerProxy()", "class_method_signature": "KeyRefresher.getKeyManagerProxy()", "testcase": false, "constructor": false}, {"identifier": "getTrustManagerProxy", "parameters": "()", "modifiers": "public", "return": "TrustManagerProxy", "signature": "TrustManagerProxy getTrustManagerProxy()", "full_signature": "public TrustManagerProxy getTrustManagerProxy()", "class_method_signature": "KeyRefresher.getTrustManagerProxy()", "testcase": false, "constructor": false}, {"identifier": "scanForFileChanges", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void scanForFileChanges()", "full_signature": "private void scanForFileChanges()", "class_method_signature": "KeyRefresher.scanForFileChanges()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "KeyRefresher.shutdown()", "testcase": false, "constructor": false}, {"identifier": "startup", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startup()", "full_signature": "public void startup()", "class_method_signature": "KeyRefresher.startup()", "testcase": false, "constructor": false}, {"identifier": "startup", "parameters": "(int retryFrequency)", "modifiers": "public", "return": "void", "signature": "void startup(int retryFrequency)", "full_signature": "public void startup(int retryFrequency)", "class_method_signature": "KeyRefresher.startup(int retryFrequency)", "testcase": false, "constructor": false}, {"identifier": "haveFilesBeenChanged", "parameters": "(final String filePath, byte[] checksum)", "modifiers": "protected", "return": "boolean", "signature": "boolean haveFilesBeenChanged(final String filePath, byte[] checksum)", "full_signature": "protected boolean haveFilesBeenChanged(final String filePath, byte[] checksum)", "class_method_signature": "KeyRefresher.haveFilesBeenChanged(final String filePath, byte[] checksum)", "testcase": false, "constructor": false}], "file": "libs/java/cert_refresher/src/main/java/com/oath/auth/KeyRefresher.java"}, "focal_method": {"identifier": "haveFilesBeenChanged", "parameters": "(final String filePath, byte[] checksum)", "modifiers": "protected", "return": "boolean", "body": "protected boolean haveFilesBeenChanged(final String filePath, byte[] checksum) {\n\n        // if we don't have an absolute path for our file path then it\n        // was retrieved from our resource and as such there is no need\n        // to check to see if it was changed or not.\n\n        final Path path = Paths.get(filePath);\n        if (!path.isAbsolute()) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"Relative path: {} specified - ignoring change check\", filePath);\n            }\n            return false;\n        }\n\n        try (InputStream is = Files.newInputStream(path);\n             DigestInputStream digestInputStream = new DigestInputStream(is, md)) {\n            //noinspection StatementWithEmptyBody\n            while (digestInputStream.read() != -1) {\n                // do nothing, just read until the EoF\n            }\n        } catch (IOException ex) {\n            //this is best effort, if we couldn't read the file, assume its the same\n            LOGGER.warn(\"Error reading file \" + filePath, ex);\n            return false;\n        }\n        byte[] digest = md.digest();\n        if (!Arrays.equals(checksum, digest)) {\n            //they aren't the same, overwrite old checksum\n            System.arraycopy(digest, 0, checksum, 0, digest.length);\n            return true;\n        }\n        return false;\n    }", "signature": "boolean haveFilesBeenChanged(final String filePath, byte[] checksum)", "full_signature": "protected boolean haveFilesBeenChanged(final String filePath, byte[] checksum)", "class_method_signature": "KeyRefresher.haveFilesBeenChanged(final String filePath, byte[] checksum)", "testcase": false, "constructor": false, "invocations": ["get", "isAbsolute", "isDebugEnabled", "debug", "newInputStream", "read", "warn", "digest", "equals", "arraycopy"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}