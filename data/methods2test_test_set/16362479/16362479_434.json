{"test_class": {"identifier": "CommitTransactionPayloadTest", "superclass": "extends AbstractTest", "interfaces": "", "fields": [{"original_string": "static final QName LEAF_SET = QName.create(TestModel.TEST_QNAME, \"leaf-set\");", "modifier": "static final", "type": "QName", "declarator": "LEAF_SET = QName.create(TestModel.TEST_QNAME, \"leaf-set\")", "var_name": "LEAF_SET"}, {"original_string": "private DataTreeCandidate candidate;", "modifier": "private", "type": "DataTreeCandidate", "declarator": "candidate", "var_name": "candidate"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/persisted/CommitTransactionPayloadTest.java"}, "test_case": {"identifier": "testCandidateSerialization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCandidateSerialization() throws IOException {\n        final CommitTransactionPayload payload = CommitTransactionPayload.create(nextTransactionId(), candidate);\n        assertEquals(\"payload size\", 156, payload.size());\n    }", "signature": "void testCandidateSerialization()", "full_signature": "@Test public void testCandidateSerialization()", "class_method_signature": "CommitTransactionPayloadTest.testCandidateSerialization()", "testcase": true, "constructor": false, "invocations": ["create", "nextTransactionId", "assertEquals", "size"]}, "focal_class": {"identifier": "CommitTransactionPayload", "superclass": "extends IdentifiablePayload<TransactionIdentifier>", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(CommitTransactionPayload.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(CommitTransactionPayload.class)", "var_name": "LOG"}, {"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private volatile Entry<TransactionIdentifier, DataTreeCandidateWithVersion> candidate = null;", "modifier": "private volatile", "type": "Entry<TransactionIdentifier, DataTreeCandidateWithVersion>", "declarator": "candidate = null", "var_name": "candidate"}], "methods": [{"identifier": "CommitTransactionPayload", "parameters": "()", "modifiers": "", "return": "", "signature": " CommitTransactionPayload()", "full_signature": "  CommitTransactionPayload()", "class_method_signature": "CommitTransactionPayload.CommitTransactionPayload()", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(final TransactionIdentifier transactionId,\n            final DataTreeCandidate candidate, final PayloadVersion version, final int initialSerializedBufferCapacity)", "modifiers": "public static @NonNull", "return": "CommitTransactionPayload", "signature": "CommitTransactionPayload create(final TransactionIdentifier transactionId,\n            final DataTreeCandidate candidate, final PayloadVersion version, final int initialSerializedBufferCapacity)", "full_signature": "public static @NonNull CommitTransactionPayload create(final TransactionIdentifier transactionId,\n            final DataTreeCandidate candidate, final PayloadVersion version, final int initialSerializedBufferCapacity)", "class_method_signature": "CommitTransactionPayload.create(final TransactionIdentifier transactionId,\n            final DataTreeCandidate candidate, final PayloadVersion version, final int initialSerializedBufferCapacity)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final TransactionIdentifier transactionId,\n            final DataTreeCandidate candidate, final PayloadVersion version)", "modifiers": "@VisibleForTesting public static @NonNull", "return": "CommitTransactionPayload", "signature": "CommitTransactionPayload create(final TransactionIdentifier transactionId,\n            final DataTreeCandidate candidate, final PayloadVersion version)", "full_signature": "@VisibleForTesting public static @NonNull CommitTransactionPayload create(final TransactionIdentifier transactionId,\n            final DataTreeCandidate candidate, final PayloadVersion version)", "class_method_signature": "CommitTransactionPayload.create(final TransactionIdentifier transactionId,\n            final DataTreeCandidate candidate, final PayloadVersion version)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final TransactionIdentifier transactionId,\n            final DataTreeCandidate candidate)", "modifiers": "@VisibleForTesting public static @NonNull", "return": "CommitTransactionPayload", "signature": "CommitTransactionPayload create(final TransactionIdentifier transactionId,\n            final DataTreeCandidate candidate)", "full_signature": "@VisibleForTesting public static @NonNull CommitTransactionPayload create(final TransactionIdentifier transactionId,\n            final DataTreeCandidate candidate)", "class_method_signature": "CommitTransactionPayload.create(final TransactionIdentifier transactionId,\n            final DataTreeCandidate candidate)", "testcase": false, "constructor": false}, {"identifier": "getCandidate", "parameters": "()", "modifiers": "public @NonNull", "return": "Entry<TransactionIdentifier, DataTreeCandidateWithVersion>", "signature": "Entry<TransactionIdentifier, DataTreeCandidateWithVersion> getCandidate()", "full_signature": "public @NonNull Entry<TransactionIdentifier, DataTreeCandidateWithVersion> getCandidate()", "class_method_signature": "CommitTransactionPayload.getCandidate()", "testcase": false, "constructor": false}, {"identifier": "getCandidate", "parameters": "(\n            final ReusableStreamReceiver receiver)", "modifiers": "public final @NonNull", "return": "Entry<TransactionIdentifier, DataTreeCandidateWithVersion>", "signature": "Entry<TransactionIdentifier, DataTreeCandidateWithVersion> getCandidate(\n            final ReusableStreamReceiver receiver)", "full_signature": "public final @NonNull Entry<TransactionIdentifier, DataTreeCandidateWithVersion> getCandidate(\n            final ReusableStreamReceiver receiver)", "class_method_signature": "CommitTransactionPayload.getCandidate(\n            final ReusableStreamReceiver receiver)", "testcase": false, "constructor": false}, {"identifier": "getIdentifier", "parameters": "()", "modifiers": "@Override public", "return": "TransactionIdentifier", "signature": "TransactionIdentifier getIdentifier()", "full_signature": "@Override public TransactionIdentifier getIdentifier()", "class_method_signature": "CommitTransactionPayload.getIdentifier()", "testcase": false, "constructor": false}, {"identifier": "acquireCandidate", "parameters": "()", "modifiers": "public", "return": "Entry<TransactionIdentifier, DataTreeCandidateWithVersion>", "signature": "Entry<TransactionIdentifier, DataTreeCandidateWithVersion> acquireCandidate()", "full_signature": "public Entry<TransactionIdentifier, DataTreeCandidateWithVersion> acquireCandidate()", "class_method_signature": "CommitTransactionPayload.acquireCandidate()", "testcase": false, "constructor": false}, {"identifier": "writeBytes", "parameters": "(ObjectOutput out)", "modifiers": "abstract", "return": "void", "signature": "void writeBytes(ObjectOutput out)", "full_signature": "abstract void writeBytes(ObjectOutput out)", "class_method_signature": "CommitTransactionPayload.writeBytes(ObjectOutput out)", "testcase": false, "constructor": false}, {"identifier": "newDataInput", "parameters": "()", "modifiers": "abstract", "return": "DataInput", "signature": "DataInput newDataInput()", "full_signature": "abstract DataInput newDataInput()", "class_method_signature": "CommitTransactionPayload.newDataInput()", "testcase": false, "constructor": false}, {"identifier": "writeReplace", "parameters": "()", "modifiers": "final", "return": "Object", "signature": "Object writeReplace()", "full_signature": "final Object writeReplace()", "class_method_signature": "CommitTransactionPayload.writeReplace()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/persisted/CommitTransactionPayload.java"}, "focal_method": {"identifier": "create", "parameters": "(final TransactionIdentifier transactionId,\n            final DataTreeCandidate candidate, final PayloadVersion version, final int initialSerializedBufferCapacity)", "modifiers": "public static @NonNull", "return": "CommitTransactionPayload", "body": "public static @NonNull CommitTransactionPayload create(final TransactionIdentifier transactionId,\n            final DataTreeCandidate candidate, final PayloadVersion version, final int initialSerializedBufferCapacity)\n                    throws IOException {\n        final ChunkedOutputStream cos = new ChunkedOutputStream(initialSerializedBufferCapacity);\n        try (DataOutputStream dos = new DataOutputStream(cos)) {\n            transactionId.writeTo(dos);\n            DataTreeCandidateInputOutput.writeDataTreeCandidate(dos, version, candidate);\n        }\n\n        final Variant<byte[], ChunkedByteArray> source = cos.toVariant();\n        LOG.debug(\"Initial buffer capacity {}, actual serialized size {}\", initialSerializedBufferCapacity, cos.size());\n        return source.isFirst() ? new Simple(source.getFirst()) : new Chunked(source.getSecond());\n    }", "signature": "CommitTransactionPayload create(final TransactionIdentifier transactionId,\n            final DataTreeCandidate candidate, final PayloadVersion version, final int initialSerializedBufferCapacity)", "full_signature": "public static @NonNull CommitTransactionPayload create(final TransactionIdentifier transactionId,\n            final DataTreeCandidate candidate, final PayloadVersion version, final int initialSerializedBufferCapacity)", "class_method_signature": "CommitTransactionPayload.create(final TransactionIdentifier transactionId,\n            final DataTreeCandidate candidate, final PayloadVersion version, final int initialSerializedBufferCapacity)", "testcase": false, "constructor": false, "invocations": ["writeTo", "writeDataTreeCandidate", "toVariant", "debug", "size", "isFirst", "getFirst", "getSecond"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}