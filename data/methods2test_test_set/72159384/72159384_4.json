{"test_class": {"identifier": "ProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ConsumerRecordRelay<Integer, String> relay;", "modifier": "@Mock\n    private", "type": "ConsumerRecordRelay<Integer, String>", "declarator": "relay", "var_name": "relay"}, {"original_string": "private volatile AssertionError assertionError;", "modifier": "private volatile", "type": "AssertionError", "declarator": "assertionError", "var_name": "assertionError"}, {"original_string": "private ConsumerRecord<Integer, String> record = new ConsumerRecord<>(\"testTopic\", 1, 42, 1234, \"SomeValue\");", "modifier": "private", "type": "ConsumerRecord<Integer, String>", "declarator": "record = new ConsumerRecord<>(\"testTopic\", 1, 42, 1234, \"SomeValue\")", "var_name": "record"}], "file": "verteiler/src/test/java/io/datanerds/verteiler/ProcessorTest.java"}, "test_case": {"identifier": "stoppedSetOnException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void stoppedSetOnException() throws Exception {\n        final Processor<Integer, String> processor = new Processor<>(new TopicPartition(\"Hello\", 1), relay, message -> {\n            throw new RuntimeException(\"Foobar! Something went wrong\");\n        }, 42);\n\n        new Thread(processor).start();\n        processor.queue(record);\n\n        await().until(processor::isStopped, is(equalTo(true)));\n    }", "signature": "void stoppedSetOnException()", "full_signature": "@Test public void stoppedSetOnException()", "class_method_signature": "ProcessorTest.stoppedSetOnException()", "testcase": true, "constructor": false, "invocations": ["start", "queue", "until", "await", "is", "equalTo"]}, "focal_class": {"identifier": "Processor", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(Processor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(Processor.class)", "var_name": "logger"}, {"original_string": "private volatile boolean stopped = false;", "modifier": "private volatile", "type": "boolean", "declarator": "stopped = false", "var_name": "stopped"}, {"original_string": "private final BlockingQueue<ConsumerRecord<K, V>> queue;", "modifier": "private final", "type": "BlockingQueue<ConsumerRecord<K, V>>", "declarator": "queue", "var_name": "queue"}, {"original_string": "private final ConsumerRecordRelay<K, V> relay;", "modifier": "private final", "type": "ConsumerRecordRelay<K, V>", "declarator": "relay", "var_name": "relay"}, {"original_string": "private final java.util.function.Consumer<V> action;", "modifier": "private final", "type": "java.util.function.Consumer<V>", "declarator": "action", "var_name": "action"}, {"original_string": "private final TopicPartition topicPartition;", "modifier": "private final", "type": "TopicPartition", "declarator": "topicPartition", "var_name": "topicPartition"}], "methods": [{"identifier": "Processor", "parameters": "(TopicPartition topicPartition, ConsumerRecordRelay<K, V> relay, java.util.function.Consumer<V> action,\n            int queueSize)", "modifiers": "", "return": "", "signature": " Processor(TopicPartition topicPartition, ConsumerRecordRelay<K, V> relay, java.util.function.Consumer<V> action,\n            int queueSize)", "full_signature": "  Processor(TopicPartition topicPartition, ConsumerRecordRelay<K, V> relay, java.util.function.Consumer<V> action,\n            int queueSize)", "class_method_signature": "Processor.Processor(TopicPartition topicPartition, ConsumerRecordRelay<K, V> relay, java.util.function.Consumer<V> action,\n            int queueSize)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "Processor.run()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "Processor.stop()", "testcase": false, "constructor": false}, {"identifier": "queue", "parameters": "(ConsumerRecord<K, V> record)", "modifiers": "public", "return": "void", "signature": "void queue(ConsumerRecord<K, V> record)", "full_signature": "public void queue(ConsumerRecord<K, V> record)", "class_method_signature": "Processor.queue(ConsumerRecord<K, V> record)", "testcase": false, "constructor": false}, {"identifier": "isStopped", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isStopped()", "full_signature": "public boolean isStopped()", "class_method_signature": "Processor.isStopped()", "testcase": false, "constructor": false}], "file": "verteiler/src/main/java/io/datanerds/verteiler/Processor.java"}, "focal_method": {"identifier": "queue", "parameters": "(ConsumerRecord<K, V> record)", "modifiers": "public", "return": "void", "body": "public void queue(ConsumerRecord<K, V> record) throws InterruptedException {\n        queue.put(record);\n    }", "signature": "void queue(ConsumerRecord<K, V> record)", "full_signature": "public void queue(ConsumerRecord<K, V> record)", "class_method_signature": "Processor.queue(ConsumerRecord<K, V> record)", "testcase": false, "constructor": false, "invocations": ["put"]}, "repository": {"repo_id": 72159384, "url": "https://github.com/datanerds-io/verteiler", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 7, "size": 33, "license": "licensed"}}