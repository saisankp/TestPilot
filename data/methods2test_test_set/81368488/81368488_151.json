{"test_class": {"identifier": "StatsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Scene mockScene;", "modifier": "@Mock\n    private", "type": "Scene", "declarator": "mockScene", "var_name": "mockScene"}, {"original_string": "private Stats stats;", "modifier": "private", "type": "Stats", "declarator": "stats", "var_name": "stats"}], "file": "gazeplay-commons/src/test/java/net/gazeplay/commons/utils/stats/StatsTest.java"}, "test_case": {"identifier": "shouldGetDefaultShotRatio", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldGetDefaultShotRatio() {\n        int result = stats.getShotRatio();\n\n        assertEquals(100, result);\n    }", "signature": "void shouldGetDefaultShotRatio()", "full_signature": "@Test void shouldGetDefaultShotRatio()", "class_method_signature": "StatsTest.shouldGetDefaultShotRatio()", "testcase": true, "constructor": false, "invocations": ["getShotRatio", "assertEquals"]}, "focal_class": {"identifier": "Stats", "superclass": "", "interfaces": "implements GazeMotionListener", "fields": [{"original_string": "private static final int trail = 10;", "modifier": "private static final", "type": "int", "declarator": "trail = 10", "var_name": "trail"}, {"original_string": "private static final int fixationTrail = 50;", "modifier": "private static final", "type": "int", "declarator": "fixationTrail = 50", "var_name": "fixationTrail"}, {"original_string": "private final double heatMapPixelSize;", "modifier": "private final", "type": "double", "declarator": "heatMapPixelSize", "var_name": "heatMapPixelSize"}, {"original_string": "public final Scene gameContextScene;", "modifier": "public final", "type": "Scene", "declarator": "gameContextScene", "var_name": "gameContextScene"}, {"original_string": "protected String gameName;", "modifier": "protected", "type": "String", "declarator": "gameName", "var_name": "gameName"}, {"original_string": "long startTime;", "modifier": "", "type": "long", "declarator": "startTime", "var_name": "startTime"}, {"original_string": "int sceneCounter = 0;", "modifier": "", "type": "int", "declarator": "sceneCounter = 0", "var_name": "sceneCounter"}, {"original_string": "private EventHandler<MouseEvent> recordMouseMovements;", "modifier": "private", "type": "EventHandler<MouseEvent>", "declarator": "recordMouseMovements", "var_name": "recordMouseMovements"}, {"original_string": "private EventHandler<GazeEvent> recordGazeMovements;", "modifier": "private", "type": "EventHandler<GazeEvent>", "declarator": "recordGazeMovements", "var_name": "recordGazeMovements"}, {"original_string": "private LifeCycle lifeCycle = new LifeCycle();", "modifier": "private", "type": "LifeCycle", "declarator": "lifeCycle = new LifeCycle()", "var_name": "lifeCycle"}, {"original_string": "private RoundsDurationReport roundsDurationReport = new RoundsDurationReport();", "modifier": "private", "type": "RoundsDurationReport", "declarator": "roundsDurationReport = new RoundsDurationReport()", "var_name": "roundsDurationReport"}, {"original_string": "private int counter = 0;", "modifier": "private", "type": "int", "declarator": "counter = 0", "var_name": "counter"}, {"original_string": "private final List<CoordinatesTracker> movementHistory = new ArrayList<>();", "modifier": "private final", "type": "List<CoordinatesTracker>", "declarator": "movementHistory = new ArrayList<>()", "var_name": "movementHistory"}, {"original_string": "private long previousTime = 0;", "modifier": "private", "type": "long", "declarator": "previousTime = 0", "var_name": "previousTime"}, {"original_string": "private int previousX = 0;", "modifier": "private", "type": "int", "declarator": "previousX = 0", "var_name": "previousX"}, {"original_string": "private int previousY = 0;", "modifier": "private", "type": "int", "declarator": "previousY = 0", "var_name": "previousY"}, {"original_string": "private File movieFolder;", "modifier": "private", "type": "File", "declarator": "movieFolder", "var_name": "movieFolder"}, {"original_string": "private boolean convexHULL = true;", "modifier": "private", "type": "boolean", "declarator": "convexHULL = true", "var_name": "convexHULL"}, {"original_string": "private ScreenRecorder screenRecorder;", "modifier": "private", "type": "ScreenRecorder", "declarator": "screenRecorder", "var_name": "screenRecorder"}, {"original_string": "private ArrayList<TargetAOI> targetAOIList = null;", "modifier": "private", "type": "ArrayList<TargetAOI>", "declarator": "targetAOIList = null", "var_name": "targetAOIList"}, {"original_string": "private double[][] heatMap;", "modifier": "private", "type": "double[][]", "declarator": "heatMap", "var_name": "heatMap"}, {"original_string": "@Getter\n    public int nbGoalsReached = 0;", "modifier": "@Getter\n    public", "type": "int", "declarator": "nbGoalsReached = 0", "var_name": "nbGoalsReached"}, {"original_string": "@Getter\n    protected int nbGoalsToReach = 0;", "modifier": "@Getter\n    protected", "type": "int", "declarator": "nbGoalsToReach = 0", "var_name": "nbGoalsToReach"}, {"original_string": "@Setter\n    private long accidentalShotPreventionPeriod = 0;", "modifier": "@Setter\n    private", "type": "long", "declarator": "accidentalShotPreventionPeriod = 0", "var_name": "accidentalShotPreventionPeriod"}, {"original_string": "@Getter\n    private int nbUnCountedGoalsReached;", "modifier": "@Getter\n    private", "type": "int", "declarator": "nbUnCountedGoalsReached", "var_name": "nbUnCountedGoalsReached"}, {"original_string": "@Getter\n    @Setter\n    private long currentGazeTime;", "modifier": "@Getter\n    @Setter\n    private", "type": "long", "declarator": "currentGazeTime", "var_name": "currentGazeTime"}, {"original_string": "@Getter\n    @Setter\n    private long lastGazeTime;", "modifier": "@Getter\n    @Setter\n    private", "type": "long", "declarator": "lastGazeTime", "var_name": "lastGazeTime"}, {"original_string": "@Getter\n    private ArrayList<LinkedList<FixationPoint>> fixationSequence;", "modifier": "@Getter\n    private", "type": "ArrayList<LinkedList<FixationPoint>>", "declarator": "fixationSequence", "var_name": "fixationSequence"}, {"original_string": "@Getter\n    private SavedStatsInfo savedStatsInfo;", "modifier": "@Getter\n    private", "type": "SavedStatsInfo", "declarator": "savedStatsInfo", "var_name": "savedStatsInfo"}, {"original_string": "@Getter\n    private WritableImage gameScreenShot;", "modifier": "@Getter\n    private", "type": "WritableImage", "declarator": "gameScreenShot", "var_name": "gameScreenShot"}, {"original_string": "private String directoryOfVideo;", "modifier": "private", "type": "String", "declarator": "directoryOfVideo", "var_name": "directoryOfVideo"}, {"original_string": "private String nameOfVideo;", "modifier": "private", "type": "String", "declarator": "nameOfVideo", "var_name": "nameOfVideo"}, {"original_string": "private Long currentRoundStartTime;", "modifier": "private", "type": "Long", "declarator": "currentRoundStartTime", "var_name": "currentRoundStartTime"}, {"original_string": "private int movementHistoryidx = 0;", "modifier": "private", "type": "int", "declarator": "movementHistoryidx = 0", "var_name": "movementHistoryidx"}, {"original_string": "private final List<AreaOfInterestProps> allAOIList = new ArrayList<>();", "modifier": "private final", "type": "List<AreaOfInterestProps>", "declarator": "allAOIList = new ArrayList<>()", "var_name": "allAOIList"}, {"original_string": "private List<CoordinatesTracker> areaOfInterestList = new ArrayList<>();", "modifier": "private", "type": "List<CoordinatesTracker>", "declarator": "areaOfInterestList = new ArrayList<>()", "var_name": "areaOfInterestList"}, {"original_string": "@Getter\n    private final List<List> allAOIListTemp = new ArrayList<>();", "modifier": "@Getter\n    private final", "type": "List<List>", "declarator": "allAOIListTemp = new ArrayList<>()", "var_name": "allAOIListTemp"}, {"original_string": "@Getter\n    private final List<int[]> startAndEndIdx = new ArrayList<>();", "modifier": "@Getter\n    private final", "type": "List<int[]>", "declarator": "startAndEndIdx = new ArrayList<>()", "var_name": "startAndEndIdx"}, {"original_string": "@Getter\n    private final List<Polygon> allAOIListPolygon = new ArrayList<>();", "modifier": "@Getter\n    private final", "type": "List<Polygon>", "declarator": "allAOIListPolygon = new ArrayList<>()", "var_name": "allAOIListPolygon"}, {"original_string": "@Getter\n    private final List<Double[]> allAOIListPolygonPt = new ArrayList<>();", "modifier": "@Getter\n    private final", "type": "List<Double[]>", "declarator": "allAOIListPolygonPt = new ArrayList<>()", "var_name": "allAOIListPolygonPt"}, {"original_string": "private double highestFixationTime = 0;", "modifier": "private", "type": "double", "declarator": "highestFixationTime = 0", "var_name": "highestFixationTime"}, {"original_string": "private final Configuration config = ActiveConfigurationContext.getInstance();", "modifier": "private final", "type": "Configuration", "declarator": "config = ActiveConfigurationContext.getInstance()", "var_name": "config"}, {"original_string": "private int colorIterator;", "modifier": "private", "type": "int", "declarator": "colorIterator", "var_name": "colorIterator"}, {"original_string": "private final javafx.scene.paint.Color[] colors = new javafx.scene.paint.Color[]{\n        javafx.scene.paint.Color.PURPLE,\n        javafx.scene.paint.Color.WHITE,\n        javafx.scene.paint.Color.PINK,\n        javafx.scene.paint.Color.ORANGE,\n        javafx.scene.paint.Color.BLUE,\n        javafx.scene.paint.Color.RED,\n        javafx.scene.paint.Color.CHOCOLATE\n    };", "modifier": "private final", "type": "javafx.scene.paint.Color[]", "declarator": "colors = new javafx.scene.paint.Color[]{\n        javafx.scene.paint.Color.PURPLE,\n        javafx.scene.paint.Color.WHITE,\n        javafx.scene.paint.Color.PINK,\n        javafx.scene.paint.Color.ORANGE,\n        javafx.scene.paint.Color.BLUE,\n        javafx.scene.paint.Color.RED,\n        javafx.scene.paint.Color.CHOCOLATE\n    }", "var_name": "colors"}], "methods": [{"identifier": "Stats", "parameters": "(final Scene gameContextScene)", "modifiers": "public", "return": "", "signature": " Stats(final Scene gameContextScene)", "full_signature": "public  Stats(final Scene gameContextScene)", "class_method_signature": "Stats.Stats(final Scene gameContextScene)", "testcase": false, "constructor": true}, {"identifier": "Stats", "parameters": "(final Scene gameContextScene, final String gameName)", "modifiers": "public", "return": "", "signature": " Stats(final Scene gameContextScene, final String gameName)", "full_signature": "public  Stats(final Scene gameContextScene, final String gameName)", "class_method_signature": "Stats.Stats(final Scene gameContextScene, final String gameName)", "testcase": false, "constructor": true}, {"identifier": "instantiateHeatMapData", "parameters": "(final Scene gameContextScene, final double heatMapPixelSize)", "modifiers": "static", "return": "double[][]", "signature": "double[][] instantiateHeatMapData(final Scene gameContextScene, final double heatMapPixelSize)", "full_signature": "static double[][] instantiateHeatMapData(final Scene gameContextScene, final double heatMapPixelSize)", "class_method_signature": "Stats.instantiateHeatMapData(final Scene gameContextScene, final double heatMapPixelSize)", "testcase": false, "constructor": false}, {"identifier": "getTargetAOIList", "parameters": "()", "modifiers": "public", "return": "ArrayList<TargetAOI>", "signature": "ArrayList<TargetAOI> getTargetAOIList()", "full_signature": "public ArrayList<TargetAOI> getTargetAOIList()", "class_method_signature": "Stats.getTargetAOIList()", "testcase": false, "constructor": false}, {"identifier": "setTargetAOIList", "parameters": "(final ArrayList<TargetAOI> targetAOIList)", "modifiers": "public", "return": "void", "signature": "void setTargetAOIList(final ArrayList<TargetAOI> targetAOIList)", "full_signature": "public void setTargetAOIList(final ArrayList<TargetAOI> targetAOIList)", "class_method_signature": "Stats.setTargetAOIList(final ArrayList<TargetAOI> targetAOIList)", "testcase": false, "constructor": false}, {"identifier": "notifyNewRoundReady", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void notifyNewRoundReady()", "full_signature": "public void notifyNewRoundReady()", "class_method_signature": "Stats.notifyNewRoundReady()", "testcase": false, "constructor": false}, {"identifier": "notifyNextRound", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void notifyNextRound()", "full_signature": "public void notifyNextRound()", "class_method_signature": "Stats.notifyNextRound()", "testcase": false, "constructor": false}, {"identifier": "startVideoRecording", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startVideoRecording()", "full_signature": "public void startVideoRecording()", "class_method_signature": "Stats.startVideoRecording()", "testcase": false, "constructor": false}, {"identifier": "endVideoRecording", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void endVideoRecording()", "full_signature": "public void endVideoRecording()", "class_method_signature": "Stats.endVideoRecording()", "testcase": false, "constructor": false}, {"identifier": "generateAOIList", "parameters": "(final int index)", "modifiers": "private", "return": "void", "signature": "void generateAOIList(final int index)", "full_signature": "private void generateAOIList(final int index)", "class_method_signature": "Stats.generateAOIList(final int index)", "testcase": false, "constructor": false}, {"identifier": "calculateRectangle", "parameters": "(final Point2D[] point2D)", "modifiers": "static", "return": "Double[]", "signature": "Double[] calculateRectangle(final Point2D[] point2D)", "full_signature": "static Double[] calculateRectangle(final Point2D[] point2D)", "class_method_signature": "Stats.calculateRectangle(final Point2D[] point2D)", "testcase": false, "constructor": false}, {"identifier": "calculateConvexHull", "parameters": "(final Point2D[] points)", "modifiers": "static", "return": "Double[]", "signature": "Double[] calculateConvexHull(final Point2D[] points)", "full_signature": "static Double[] calculateConvexHull(final Point2D[] points)", "class_method_signature": "Stats.calculateConvexHull(final Point2D[] points)", "testcase": false, "constructor": false}, {"identifier": "orientation", "parameters": "(final Point2D p1, final Point2D p2, final Point2D p3)", "modifiers": "static", "return": "int", "signature": "int orientation(final Point2D p1, final Point2D p2, final Point2D p3)", "full_signature": "static int orientation(final Point2D p1, final Point2D p2, final Point2D p3)", "class_method_signature": "Stats.orientation(final Point2D p1, final Point2D p2, final Point2D p3)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "Stats.start()", "testcase": false, "constructor": false}, {"identifier": "getMovementHistoryWithTime", "parameters": "()", "modifiers": "public", "return": "List<CoordinatesTracker>", "signature": "List<CoordinatesTracker> getMovementHistoryWithTime()", "full_signature": "public List<CoordinatesTracker> getMovementHistoryWithTime()", "class_method_signature": "Stats.getMovementHistoryWithTime()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "Stats.reset()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "Stats.stop()", "testcase": false, "constructor": false}, {"identifier": "gazeMoved", "parameters": "(final javafx.geometry.Point2D position)", "modifiers": "@Override public", "return": "void", "signature": "void gazeMoved(final javafx.geometry.Point2D position)", "full_signature": "@Override public void gazeMoved(final javafx.geometry.Point2D position)", "class_method_signature": "Stats.gazeMoved(final javafx.geometry.Point2D position)", "testcase": false, "constructor": false}, {"identifier": "saveImageAsPng", "parameters": "(final BufferedImage bufferedImage, final File outputFile)", "modifiers": "static", "return": "void", "signature": "void saveImageAsPng(final BufferedImage bufferedImage, final File outputFile)", "full_signature": "static void saveImageAsPng(final BufferedImage bufferedImage, final File outputFile)", "class_method_signature": "Stats.saveImageAsPng(final BufferedImage bufferedImage, final File outputFile)", "testcase": false, "constructor": false}, {"identifier": "initGazeMetricsImage", "parameters": "(BufferedImage bImage, BufferedImage screenshotImage)", "modifiers": "public", "return": "Graphics", "signature": "Graphics initGazeMetricsImage(BufferedImage bImage, BufferedImage screenshotImage)", "full_signature": "public Graphics initGazeMetricsImage(BufferedImage bImage, BufferedImage screenshotImage)", "class_method_signature": "Stats.initGazeMetricsImage(BufferedImage bImage, BufferedImage screenshotImage)", "testcase": false, "constructor": false}, {"identifier": "newBufferImage", "parameters": "(BufferedImage screenshotImage)", "modifiers": "private", "return": "BufferedImage", "signature": "BufferedImage newBufferImage(BufferedImage screenshotImage)", "full_signature": "private BufferedImage newBufferImage(BufferedImage screenshotImage)", "class_method_signature": "Stats.newBufferImage(BufferedImage screenshotImage)", "testcase": false, "constructor": false}, {"identifier": "addHeatMapToMetrics", "parameters": "(HeatMap hm, BufferedImage bImage, Graphics graphics, BufferedImage screenshotImage)", "modifiers": "private", "return": "void", "signature": "void addHeatMapToMetrics(HeatMap hm, BufferedImage bImage, Graphics graphics, BufferedImage screenshotImage)", "full_signature": "private void addHeatMapToMetrics(HeatMap hm, BufferedImage bImage, Graphics graphics, BufferedImage screenshotImage)", "class_method_signature": "Stats.addHeatMapToMetrics(HeatMap hm, BufferedImage bImage, Graphics graphics, BufferedImage screenshotImage)", "testcase": false, "constructor": false}, {"identifier": "addFixationSequence", "parameters": "(int fixationSequenceIndex, Graphics gMouseOrGaze, Graphics gMouseAndGaze, BufferedImage screenshotImage)", "modifiers": "private", "return": "void", "signature": "void addFixationSequence(int fixationSequenceIndex, Graphics gMouseOrGaze, Graphics gMouseAndGaze, BufferedImage screenshotImage)", "full_signature": "private void addFixationSequence(int fixationSequenceIndex, Graphics gMouseOrGaze, Graphics gMouseAndGaze, BufferedImage screenshotImage)", "class_method_signature": "Stats.addFixationSequence(int fixationSequenceIndex, Graphics gMouseOrGaze, Graphics gMouseAndGaze, BufferedImage screenshotImage)", "testcase": false, "constructor": false}, {"identifier": "saveStats", "parameters": "()", "modifiers": "public", "return": "SavedStatsInfo", "signature": "SavedStatsInfo saveStats()", "full_signature": "public SavedStatsInfo saveStats()", "class_method_signature": "Stats.saveStats()", "testcase": false, "constructor": false}, {"identifier": "computeRoundsDurationAverageDuration", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long computeRoundsDurationAverageDuration()", "full_signature": "public long computeRoundsDurationAverageDuration()", "class_method_signature": "Stats.computeRoundsDurationAverageDuration()", "testcase": false, "constructor": false}, {"identifier": "getStartTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getStartTime()", "full_signature": "public long getStartTime()", "class_method_signature": "Stats.getStartTime()", "testcase": false, "constructor": false}, {"identifier": "computeRoundsDurationMedianDuration", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long computeRoundsDurationMedianDuration()", "full_signature": "public long computeRoundsDurationMedianDuration()", "class_method_signature": "Stats.computeRoundsDurationMedianDuration()", "testcase": false, "constructor": false}, {"identifier": "getRoundsTotalAdditiveDuration", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getRoundsTotalAdditiveDuration()", "full_signature": "public long getRoundsTotalAdditiveDuration()", "class_method_signature": "Stats.getRoundsTotalAdditiveDuration()", "testcase": false, "constructor": false}, {"identifier": "computeTotalElapsedDuration", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long computeTotalElapsedDuration()", "full_signature": "public long computeTotalElapsedDuration()", "class_method_signature": "Stats.computeTotalElapsedDuration()", "testcase": false, "constructor": false}, {"identifier": "computeRoundsDurationVariance", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double computeRoundsDurationVariance()", "full_signature": "public double computeRoundsDurationVariance()", "class_method_signature": "Stats.computeRoundsDurationVariance()", "testcase": false, "constructor": false}, {"identifier": "computeRoundsDurationStandardDeviation", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double computeRoundsDurationStandardDeviation()", "full_signature": "public double computeRoundsDurationStandardDeviation()", "class_method_signature": "Stats.computeRoundsDurationStandardDeviation()", "testcase": false, "constructor": false}, {"identifier": "incrementNumberOfGoalsToReach", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void incrementNumberOfGoalsToReach()", "full_signature": "public void incrementNumberOfGoalsToReach()", "class_method_signature": "Stats.incrementNumberOfGoalsToReach()", "testcase": false, "constructor": false}, {"identifier": "incrementNumberOfGoalsToReach", "parameters": "(int i)", "modifiers": "public", "return": "void", "signature": "void incrementNumberOfGoalsToReach(int i)", "full_signature": "public void incrementNumberOfGoalsToReach(int i)", "class_method_signature": "Stats.incrementNumberOfGoalsToReach(int i)", "testcase": false, "constructor": false}, {"identifier": "incrementNumberOfGoalsReached", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void incrementNumberOfGoalsReached()", "full_signature": "public void incrementNumberOfGoalsReached()", "class_method_signature": "Stats.incrementNumberOfGoalsReached()", "testcase": false, "constructor": false}, {"identifier": "addRoundDuration", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void addRoundDuration()", "full_signature": "public void addRoundDuration()", "class_method_signature": "Stats.addRoundDuration()", "testcase": false, "constructor": false}, {"identifier": "getShotRatio", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getShotRatio()", "full_signature": "public int getShotRatio()", "class_method_signature": "Stats.getShotRatio()", "testcase": false, "constructor": false}, {"identifier": "getSortedDurationsBetweenGoals", "parameters": "()", "modifiers": "public", "return": "List<Long>", "signature": "List<Long> getSortedDurationsBetweenGoals()", "full_signature": "public List<Long> getSortedDurationsBetweenGoals()", "class_method_signature": "Stats.getSortedDurationsBetweenGoals()", "testcase": false, "constructor": false}, {"identifier": "getOriginalDurationsBetweenGoals", "parameters": "()", "modifiers": "public", "return": "List<Long>", "signature": "List<Long> getOriginalDurationsBetweenGoals()", "full_signature": "public List<Long> getOriginalDurationsBetweenGoals()", "class_method_signature": "Stats.getOriginalDurationsBetweenGoals()", "testcase": false, "constructor": false}, {"identifier": "getDirectoryOfVideo", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDirectoryOfVideo()", "full_signature": "public String getDirectoryOfVideo()", "class_method_signature": "Stats.getDirectoryOfVideo()", "testcase": false, "constructor": false}, {"identifier": "createInfoStatsFile", "parameters": "()", "modifiers": "protected", "return": "File", "signature": "File createInfoStatsFile()", "full_signature": "protected File createInfoStatsFile()", "class_method_signature": "Stats.createInfoStatsFile()", "testcase": false, "constructor": false}, {"identifier": "getGameStatsOfTheDayDirectory", "parameters": "()", "modifiers": "protected", "return": "File", "signature": "File getGameStatsOfTheDayDirectory()", "full_signature": "protected File getGameStatsOfTheDayDirectory()", "class_method_signature": "Stats.getGameStatsOfTheDayDirectory()", "testcase": false, "constructor": false}, {"identifier": "printLengthBetweenGoalsToString", "parameters": "(final PrintWriter out)", "modifiers": "protected", "return": "void", "signature": "void printLengthBetweenGoalsToString(final PrintWriter out)", "full_signature": "protected void printLengthBetweenGoalsToString(final PrintWriter out)", "class_method_signature": "Stats.printLengthBetweenGoalsToString(final PrintWriter out)", "testcase": false, "constructor": false}, {"identifier": "saveHeatMapAsCsv", "parameters": "(final File file)", "modifiers": "private", "return": "void", "signature": "void saveHeatMapAsCsv(final File file)", "full_signature": "private void saveHeatMapAsCsv(final File file)", "class_method_signature": "Stats.saveHeatMapAsCsv(final File file)", "testcase": false, "constructor": false}, {"identifier": "incrementFixationSequence", "parameters": "(final int x, final int y, LinkedList<FixationPoint> fixationSequence)", "modifiers": "", "return": "void", "signature": "void incrementFixationSequence(final int x, final int y, LinkedList<FixationPoint> fixationSequence)", "full_signature": " void incrementFixationSequence(final int x, final int y, LinkedList<FixationPoint> fixationSequence)", "class_method_signature": "Stats.incrementFixationSequence(final int x, final int y, LinkedList<FixationPoint> fixationSequence)", "testcase": false, "constructor": false}, {"identifier": "incrementHeatMap", "parameters": "(final int x, final int y)", "modifiers": "", "return": "void", "signature": "void incrementHeatMap(final int x, final int y)", "full_signature": " void incrementHeatMap(final int x, final int y)", "class_method_signature": "Stats.incrementHeatMap(final int x, final int y)", "testcase": false, "constructor": false}, {"identifier": "increment", "parameters": "(final int x, final int y)", "modifiers": "private", "return": "void", "signature": "void increment(final int x, final int y)", "full_signature": "private void increment(final int x, final int y)", "class_method_signature": "Stats.increment(final int x, final int y)", "testcase": false, "constructor": false}, {"identifier": "computeHeatMapPixelSize", "parameters": "(final Scene gameContextScene)", "modifiers": "", "return": "double", "signature": "double computeHeatMapPixelSize(final Scene gameContextScene)", "full_signature": " double computeHeatMapPixelSize(final Scene gameContextScene)", "class_method_signature": "Stats.computeHeatMapPixelSize(final Scene gameContextScene)", "testcase": false, "constructor": false}, {"identifier": "takeScreenShot", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void takeScreenShot()", "full_signature": "public void takeScreenShot()", "class_method_signature": "Stats.takeScreenShot()", "testcase": false, "constructor": false}], "file": "gazeplay-commons/src/main/java/net/gazeplay/commons/utils/stats/Stats.java"}, "focal_method": {"identifier": "getShotRatio", "parameters": "()", "modifiers": "public", "return": "int", "body": "public int getShotRatio() {\n        if (this.nbGoalsToReach == this.nbGoalsReached || this.nbGoalsToReach == 0) {\n            return 100;\n        } else {\n            return (int) ((float) this.nbGoalsReached / (float) this.nbGoalsToReach * 100.0);\n        }\n    }", "signature": "int getShotRatio()", "full_signature": "public int getShotRatio()", "class_method_signature": "Stats.getShotRatio()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}