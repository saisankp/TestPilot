{"test_class": {"identifier": "PauseableTimerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mocked Timer anyTimer;", "modifier": "@Mocked", "type": "Timer", "declarator": "anyTimer", "var_name": "anyTimer"}, {"original_string": "@Mocked MetricRegistry registry;", "modifier": "@Mocked", "type": "MetricRegistry", "declarator": "registry", "var_name": "registry"}], "file": "server/src/test/java/org/jvalue/ods/admin/monitoring/PauseableTimerTest.java"}, "test_case": {"identifier": "testPauseableTimer", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPauseableTimer() throws Exception {\n\t\tPauseableTimer timer = PauseableTimer.createTimer(registry, \"someName\");\n\t\tPauseableTimer.Context context = timer.createContext();\n\t\tcontext.resume();\n\t\tcontext.pause();\n\t\tThread.sleep(100);\n\t\tcontext.resume();\n\t\tcontext.stop();\n\n\t\tnew Verifications() {{\n\t\t\tlong time;\n\t\t\tTimer timer = new Timer((Reservoir) any, (Clock) any);\n\t\t\ttimer.update(time = withCapture(), TimeUnit.NANOSECONDS);\n\t\t\tAssert.assertTrue(time > 0);\n\t\t\tAssert.assertTrue(time < 100 * 1000);\n\t\t}};\n\t}", "signature": "void testPauseableTimer()", "full_signature": "@Test public void testPauseableTimer()", "class_method_signature": "PauseableTimerTest.testPauseableTimer()", "testcase": true, "constructor": false, "invocations": ["createTimer", "createContext", "resume", "pause", "sleep", "resume", "stop", "update", "withCapture", "assertTrue", "assertTrue"]}, "focal_class": {"identifier": "PauseableTimer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Timer timer;", "modifier": "private final", "type": "Timer", "declarator": "timer", "var_name": "timer"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "methods": [{"identifier": "createTimer", "parameters": "(MetricRegistry registry, String name)", "modifiers": "public static", "return": "PauseableTimer", "signature": "PauseableTimer createTimer(MetricRegistry registry, String name)", "full_signature": "public static PauseableTimer createTimer(MetricRegistry registry, String name)", "class_method_signature": "PauseableTimer.createTimer(MetricRegistry registry, String name)", "testcase": false, "constructor": false}, {"identifier": "PauseableTimer", "parameters": "(Timer timer)", "modifiers": "private", "return": "", "signature": " PauseableTimer(Timer timer)", "full_signature": "private  PauseableTimer(Timer timer)", "class_method_signature": "PauseableTimer.PauseableTimer(Timer timer)", "testcase": false, "constructor": true}, {"identifier": "PauseableTimer", "parameters": "()", "modifiers": "private", "return": "", "signature": " PauseableTimer()", "full_signature": "private  PauseableTimer()", "class_method_signature": "PauseableTimer.PauseableTimer()", "testcase": false, "constructor": true}, {"identifier": "createContext", "parameters": "()", "modifiers": "public", "return": "Context", "signature": "Context createContext()", "full_signature": "public Context createContext()", "class_method_signature": "PauseableTimer.createContext()", "testcase": false, "constructor": false}, {"identifier": "getTimer", "parameters": "()", "modifiers": "public", "return": "Timer", "signature": "Timer getTimer()", "full_signature": "public Timer getTimer()", "class_method_signature": "PauseableTimer.getTimer()", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/jvalue/ods/admin/monitoring/PauseableTimer.java"}, "focal_method": {"identifier": "PauseableTimer", "parameters": "(Timer timer)", "modifiers": "private", "return": "", "body": "private PauseableTimer(Timer timer) {\n\t\tthis.timer = timer;\n\t\tthis.clock = Clock.defaultClock();\n\t}", "signature": " PauseableTimer(Timer timer)", "full_signature": "private  PauseableTimer(Timer timer)", "class_method_signature": "PauseableTimer.PauseableTimer(Timer timer)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 14989619, "url": "https://github.com/jvalue/open-data-service-v1", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 6, "size": 4525, "license": "licensed"}}