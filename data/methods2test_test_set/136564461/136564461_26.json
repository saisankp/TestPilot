{"test_class": {"identifier": "PointEd448Test", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Curve curve = Curve448.getInstance();", "modifier": "private", "type": "Curve", "declarator": "curve = Curve448.getInstance()", "var_name": "curve"}], "file": "eddsa/src/test/java/io/moatwel/crypto/eddsa/ed448/PointEd448Test.java"}, "test_case": {"identifier": "success_ScalarMultipleBasePoint_3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void success_ScalarMultipleBasePoint_3() {\n        Point point = curve.getBasePoint().scalarMultiply(new BigInteger(\"3\"));\n\n        assertThat(point.getAffineX().getInteger(), is(new BigInteger(\"23839778817283171003887799738662344287085130522697782688245073320169861206004018274567429238677677920280078599146891901463786155880335\")));\n        assertThat(point.getAffineY().getInteger(), is(new BigInteger(\"636046652612779686502873775776967954190574036985351036782021535703553242737829645273154208057988851307101009474686328623630835377952508\")));\n    }", "signature": "void success_ScalarMultipleBasePoint_3()", "full_signature": "@Test public void success_ScalarMultipleBasePoint_3()", "class_method_signature": "PointEd448Test.success_ScalarMultipleBasePoint_3()", "testcase": true, "constructor": false, "invocations": ["scalarMultiply", "getBasePoint", "assertThat", "getInteger", "getAffineX", "is", "assertThat", "getInteger", "getAffineY", "is"]}, "focal_class": {"identifier": "PointEd448", "superclass": "extends Point", "interfaces": "", "fields": [{"original_string": "static final PointEd448 O = new PointEd448(CoordinateEd448.ZERO, CoordinateEd448.ONE, CoordinateEd448.ONE, CoordinateEd448.ZERO);", "modifier": "static final", "type": "PointEd448", "declarator": "O = new PointEd448(CoordinateEd448.ZERO, CoordinateEd448.ONE, CoordinateEd448.ONE, CoordinateEd448.ZERO)", "var_name": "O"}, {"original_string": "private static final Coordinate DEFAULT_Z = CoordinateEd448.ONE;", "modifier": "private static final", "type": "Coordinate", "declarator": "DEFAULT_Z = CoordinateEd448.ONE", "var_name": "DEFAULT_Z"}, {"original_string": "private static final Curve curve = Curve448.getInstance();", "modifier": "private static final", "type": "Curve", "declarator": "curve = Curve448.getInstance()", "var_name": "curve"}], "methods": [{"identifier": "PointEd448", "parameters": "(Coordinate x, Coordinate y, Coordinate z, Coordinate t)", "modifiers": "", "return": "", "signature": " PointEd448(Coordinate x, Coordinate y, Coordinate z, Coordinate t)", "full_signature": "  PointEd448(Coordinate x, Coordinate y, Coordinate z, Coordinate t)", "class_method_signature": "PointEd448.PointEd448(Coordinate x, Coordinate y, Coordinate z, Coordinate t)", "testcase": false, "constructor": true}, {"identifier": "fromAffine", "parameters": "(Coordinate x, Coordinate y)", "modifiers": "public static", "return": "PointEd448", "signature": "PointEd448 fromAffine(Coordinate x, Coordinate y)", "full_signature": "public static PointEd448 fromAffine(Coordinate x, Coordinate y)", "class_method_signature": "PointEd448.fromAffine(Coordinate x, Coordinate y)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Point point)", "modifiers": "@Override public", "return": "Point", "signature": "Point add(Point point)", "full_signature": "@Override public Point add(Point point)", "class_method_signature": "PointEd448.add(Point point)", "testcase": false, "constructor": false}, {"identifier": "doubling", "parameters": "()", "modifiers": "@Override public", "return": "Point", "signature": "Point doubling()", "full_signature": "@Override public Point doubling()", "class_method_signature": "PointEd448.doubling()", "testcase": false, "constructor": false}, {"identifier": "scalarMultiply", "parameters": "(BigInteger integer)", "modifiers": "@Override public", "return": "Point", "signature": "Point scalarMultiply(BigInteger integer)", "full_signature": "@Override public Point scalarMultiply(BigInteger integer)", "class_method_signature": "PointEd448.scalarMultiply(BigInteger integer)", "testcase": false, "constructor": false}, {"identifier": "negateY", "parameters": "()", "modifiers": "@Override public", "return": "Point", "signature": "Point negateY()", "full_signature": "@Override public Point negateY()", "class_method_signature": "PointEd448.negateY()", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "()", "modifiers": "@Override public", "return": "EncodedPoint", "signature": "EncodedPoint encode()", "full_signature": "@Override public EncodedPoint encode()", "class_method_signature": "PointEd448.encode()", "testcase": false, "constructor": false}, {"identifier": "negate", "parameters": "()", "modifiers": "@Override public", "return": "Point", "signature": "Point negate()", "full_signature": "@Override public Point negate()", "class_method_signature": "PointEd448.negate()", "testcase": false, "constructor": false}], "file": "eddsa/src/main/java/io/moatwel/crypto/eddsa/ed448/PointEd448.java"}, "focal_method": {"identifier": "scalarMultiply", "parameters": "(BigInteger integer)", "modifiers": "@Override public", "return": "Point", "body": "@Override\n    public Point scalarMultiply(BigInteger integer) {\n        if (integer.equals(BigInteger.ZERO)) {\n            return PointEd448.O;\n        }\n\n        Point[] qs = new Point[]{O, O};\n        Point[] rs = new Point[]{this, this, negateY()};\n\n        int[] signedBin = ArrayUtils.toMutualOppositeForm(integer);\n\n        for (int aSignedBin : signedBin) {\n            qs[0] = qs[0].doubling();\n            qs[1] = qs[0].add(rs[1 - aSignedBin]).negate();\n            qs[0] = qs[(aSignedBin ^ (aSignedBin >> 31)) - (aSignedBin >> 31)];\n        }\n        return qs[0];\n    }", "signature": "Point scalarMultiply(BigInteger integer)", "full_signature": "@Override public Point scalarMultiply(BigInteger integer)", "class_method_signature": "PointEd448.scalarMultiply(BigInteger integer)", "testcase": false, "constructor": false, "invocations": ["equals", "negateY", "toMutualOppositeForm", "doubling", "negate", "add"]}, "repository": {"repo_id": 136564461, "url": "https://github.com/halu5071/edwards", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 626, "license": "licensed"}}