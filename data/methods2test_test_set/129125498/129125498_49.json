{"test_class": {"identifier": "MetricDataTimestampExtractorTest", "superclass": "", "interfaces": "", "fields": [], "file": "kafka/src/test/java/com/expedia/adaptivealerting/kafka/processor/MetricDataTimestampExtractorTest.java"}, "test_case": {"identifier": "testExtract", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExtract() {\n        val metricData = TestObjectMother.metricData();\n        val record = new ConsumerRecord<Object, Object>(\"some-topic\", 1, 0, \"some-key\", metricData);\n        val expectedTimestamp = metricData.getTimestamp() * 1000L;\n        val actualTimestamp = new MetricDataTimestampExtractor().extract(record, -1L);\n        assertEquals(expectedTimestamp, actualTimestamp);\n    }", "signature": "void testExtract()", "full_signature": "@Test public void testExtract()", "class_method_signature": "MetricDataTimestampExtractorTest.testExtract()", "testcase": true, "constructor": false, "invocations": ["metricData", "getTimestamp", "extract", "assertEquals"]}, "focal_class": {"identifier": "MetricDataTimestampExtractor", "superclass": "", "interfaces": "implements TimestampExtractor", "fields": [], "methods": [{"identifier": "extract", "parameters": "(ConsumerRecord<Object, Object> record, long previousTimestamp)", "modifiers": "@Override public", "return": "long", "signature": "long extract(ConsumerRecord<Object, Object> record, long previousTimestamp)", "full_signature": "@Override public long extract(ConsumerRecord<Object, Object> record, long previousTimestamp)", "class_method_signature": "MetricDataTimestampExtractor.extract(ConsumerRecord<Object, Object> record, long previousTimestamp)", "testcase": false, "constructor": false}], "file": "kafka/src/main/java/com/expedia/adaptivealerting/kafka/processor/MetricDataTimestampExtractor.java"}, "focal_method": {"identifier": "extract", "parameters": "(ConsumerRecord<Object, Object> record, long previousTimestamp)", "modifiers": "@Override public", "return": "long", "body": "@Override\n    public long extract(ConsumerRecord<Object, Object> record, long previousTimestamp) {\n        val metricData = (MetricData) record.value();\n        if (metricData == null) {\n            // -1 skips the record. Don't log as it can fill up the logs.\n            return -1L;\n        }\n        return metricData.getTimestamp() * 1000L;\n    }", "signature": "long extract(ConsumerRecord<Object, Object> record, long previousTimestamp)", "full_signature": "@Override public long extract(ConsumerRecord<Object, Object> record, long previousTimestamp)", "class_method_signature": "MetricDataTimestampExtractor.extract(ConsumerRecord<Object, Object> record, long previousTimestamp)", "testcase": false, "constructor": false, "invocations": ["value", "getTimestamp"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}