{"test_class": {"identifier": "ArchiveImageLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Path CSAR_OUTPUT_FOLDER = Paths.get(\"./target/csarTests\");", "modifier": "private static final", "type": "Path", "declarator": "CSAR_OUTPUT_FOLDER = Paths.get(\"./target/csarTests\")", "var_name": "CSAR_OUTPUT_FOLDER"}, {"original_string": "private static final String tmpArchiveName = \"tosca-base-types-tags.csar\";", "modifier": "private static final", "type": "String", "declarator": "tmpArchiveName = \"tosca-base-types-tags.csar\"", "var_name": "tmpArchiveName"}, {"original_string": "private static final String tmpArchiveNameWithError = \"tosca-base-types-tags-error.csar\";", "modifier": "private static final", "type": "String", "declarator": "tmpArchiveNameWithError = \"tosca-base-types-tags-error.csar\"", "var_name": "tmpArchiveNameWithError"}, {"original_string": "private static final Path PATH_TOSCA_BASE_TYPES = Paths.get(\"src/test/resources/org/alien4cloud/tosca/catalog/index/archive-image-loader-test\");", "modifier": "private static final", "type": "Path", "declarator": "PATH_TOSCA_BASE_TYPES = Paths.get(\"src/test/resources/org/alien4cloud/tosca/catalog/index/archive-image-loader-test\")", "var_name": "PATH_TOSCA_BASE_TYPES"}, {"original_string": "private static final Path PATH_TOSCA_BASE_TYPES_ERROR = Paths.get(\"src/test/resources/org/alien4cloud/tosca/catalog/index/archive-image-loader-test-error\");", "modifier": "private static final", "type": "Path", "declarator": "PATH_TOSCA_BASE_TYPES_ERROR = Paths.get(\"src/test/resources/org/alien4cloud/tosca/catalog/index/archive-image-loader-test-error\")", "var_name": "PATH_TOSCA_BASE_TYPES_ERROR"}, {"original_string": "@Resource\n    private ArchiveImageLoader imageLoader;", "modifier": "@Resource\n    private", "type": "ArchiveImageLoader", "declarator": "imageLoader", "var_name": "imageLoader"}, {"original_string": "@Resource\n    private ArchiveParser parser;", "modifier": "@Resource\n    private", "type": "ArchiveParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "@Resource\n    private IImageDAO imageDAO;", "modifier": "@Resource\n    private", "type": "IImageDAO", "declarator": "imageDAO", "var_name": "imageDAO"}, {"original_string": "@Resource(name = \"image-dao\")\n    private IGenericIdDAO imageGenericIdDAO;", "modifier": "@Resource(name = \"image-dao\")\n    private", "type": "IGenericIdDAO", "declarator": "imageGenericIdDAO", "var_name": "imageGenericIdDAO"}], "file": "alien4cloud-core/src/test/java/org/alien4cloud/tosca/catalog/index/ArchiveImageLoaderTest.java"}, "test_case": {"identifier": "importToscaElementWithBadImageUri", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void importToscaElementWithBadImageUri() throws IOException, ParsingException {\n        Path csarFileForTesting = Paths.get(CSAR_OUTPUT_FOLDER.toString(), tmpArchiveNameWithError);\n\n        // Zip the csarSourceFolder and write it to csarFileForTesting\n        FileUtil.zip(PATH_TOSCA_BASE_TYPES_ERROR, csarFileForTesting);\n        // Parse the archive for definitions\n        ParsingResult<ArchiveRoot> result = parser.parse(csarFileForTesting, AlienConstants.GLOBAL_WORKSPACE_ID);\n        imageLoader.importImages(csarFileForTesting, result.getResult(), result.getContext().getParsingErrors());\n\n        // we expect to have warning issues due to missing files or invalid formats.\n        Assert.assertFalse(result.hasError(ParsingErrorLevel.ERROR));\n        Assert.assertTrue(result.hasError(ParsingErrorLevel.WARNING));\n    }", "signature": "void importToscaElementWithBadImageUri()", "full_signature": "@Test public void importToscaElementWithBadImageUri()", "class_method_signature": "ArchiveImageLoaderTest.importToscaElementWithBadImageUri()", "testcase": true, "constructor": false, "invocations": ["get", "toString", "zip", "parse", "importImages", "getResult", "getParsingErrors", "getContext", "assertFalse", "hasError", "assertTrue", "hasError"]}, "focal_class": {"identifier": "ArchiveImageLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ALIEN_ICON_TAG = \"icon\";", "modifier": "private static final", "type": "String", "declarator": "ALIEN_ICON_TAG = \"icon\"", "var_name": "ALIEN_ICON_TAG"}, {"original_string": "private static final Pattern UUID_PATTERN = Pattern.compile(\"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\");", "modifier": "private static final", "type": "Pattern", "declarator": "UUID_PATTERN = Pattern.compile(\"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\")", "var_name": "UUID_PATTERN"}, {"original_string": "@Inject\n    private IImageDAO imageDAO;", "modifier": "@Inject\n    private", "type": "IImageDAO", "declarator": "imageDAO", "var_name": "imageDAO"}], "methods": [{"identifier": "importImages", "parameters": "(Path archiveFile, ArchiveRoot archiveRoot, List<ParsingError> parsingErrors)", "modifiers": "public", "return": "void", "signature": "void importImages(Path archiveFile, ArchiveRoot archiveRoot, List<ParsingError> parsingErrors)", "full_signature": "public void importImages(Path archiveFile, ArchiveRoot archiveRoot, List<ParsingError> parsingErrors)", "class_method_signature": "ArchiveImageLoader.importImages(Path archiveFile, ArchiveRoot archiveRoot, List<ParsingError> parsingErrors)", "testcase": false, "constructor": false}, {"identifier": "importImages", "parameters": "(Path archiveFile, Map<String, ? extends AbstractInheritableToscaType> toscaInheritableElement, List<ParsingError> parsingErrors)", "modifiers": "private", "return": "void", "signature": "void importImages(Path archiveFile, Map<String, ? extends AbstractInheritableToscaType> toscaInheritableElement, List<ParsingError> parsingErrors)", "full_signature": "private void importImages(Path archiveFile, Map<String, ? extends AbstractInheritableToscaType> toscaInheritableElement, List<ParsingError> parsingErrors)", "class_method_signature": "ArchiveImageLoader.importImages(Path archiveFile, Map<String, ? extends AbstractInheritableToscaType> toscaInheritableElement, List<ParsingError> parsingErrors)", "testcase": false, "constructor": false}, {"identifier": "importImages", "parameters": "(Path archiveFile, List<Tag> tags, List<ParsingError> parsingErrors)", "modifiers": "private", "return": "void", "signature": "void importImages(Path archiveFile, List<Tag> tags, List<ParsingError> parsingErrors)", "full_signature": "private void importImages(Path archiveFile, List<Tag> tags, List<ParsingError> parsingErrors)", "class_method_signature": "ArchiveImageLoader.importImages(Path archiveFile, List<Tag> tags, List<ParsingError> parsingErrors)", "testcase": false, "constructor": false}, {"identifier": "importImage", "parameters": "(Path archiveFile, List<ParsingError> parsingErrors, Tag iconTag)", "modifiers": "private", "return": "void", "signature": "void importImage(Path archiveFile, List<ParsingError> parsingErrors, Tag iconTag)", "full_signature": "private void importImage(Path archiveFile, List<ParsingError> parsingErrors, Tag iconTag)", "class_method_signature": "ArchiveImageLoader.importImage(Path archiveFile, List<ParsingError> parsingErrors, Tag iconTag)", "testcase": false, "constructor": false}, {"identifier": "safeToString", "parameters": "(Path path)", "modifiers": "private", "return": "String", "signature": "String safeToString(Path path)", "full_signature": "private String safeToString(Path path)", "class_method_signature": "ArchiveImageLoader.safeToString(Path path)", "testcase": false, "constructor": false}, {"identifier": "getIconTag", "parameters": "(List<Tag> tags)", "modifiers": "public static", "return": "Tag", "signature": "Tag getIconTag(List<Tag> tags)", "full_signature": "public static Tag getIconTag(List<Tag> tags)", "class_method_signature": "ArchiveImageLoader.getIconTag(List<Tag> tags)", "testcase": false, "constructor": false}], "file": "alien4cloud-core/src/main/java/org/alien4cloud/tosca/catalog/index/ArchiveImageLoader.java"}, "focal_method": {"identifier": "importImages", "parameters": "(Path archiveFile, ArchiveRoot archiveRoot, List<ParsingError> parsingErrors)", "modifiers": "public", "return": "void", "body": "public void importImages(Path archiveFile, ArchiveRoot archiveRoot, List<ParsingError> parsingErrors) {\n        // Import archive icons\n        importImages(archiveFile, archiveRoot.getNodeTypes(), parsingErrors);\n        importImages(archiveFile, archiveRoot.getRelationshipTypes(), parsingErrors);\n        importImages(archiveFile, archiveRoot.getCapabilityTypes(), parsingErrors);\n        importImages(archiveFile, archiveRoot.getArtifactTypes(), parsingErrors);\n        importImages(archiveFile, archiveRoot.getPolicyTypes(), parsingErrors);\n        // Import topology icon\n        importImages(archiveFile, archiveRoot.getArchive().getTags(), parsingErrors);\n        if (archiveRoot.getArchive().isHasTopology()) {\n            importImages(archiveFile, archiveRoot.getTopology().getTags(), parsingErrors);\n        }\n    }", "signature": "void importImages(Path archiveFile, ArchiveRoot archiveRoot, List<ParsingError> parsingErrors)", "full_signature": "public void importImages(Path archiveFile, ArchiveRoot archiveRoot, List<ParsingError> parsingErrors)", "class_method_signature": "ArchiveImageLoader.importImages(Path archiveFile, ArchiveRoot archiveRoot, List<ParsingError> parsingErrors)", "testcase": false, "constructor": false, "invocations": ["importImages", "getNodeTypes", "importImages", "getRelationshipTypes", "importImages", "getCapabilityTypes", "importImages", "getArtifactTypes", "importImages", "getPolicyTypes", "importImages", "getTags", "getArchive", "isHasTopology", "getArchive", "importImages", "getTags", "getTopology"]}, "repository": {"repo_id": 24750302, "url": "https://github.com/alien4cloud/alien4cloud", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 67, "size": 27647, "license": "licensed"}}