{"test_class": {"identifier": "AVLGroupTreeTest", "superclass": "extends AbstractTest", "interfaces": "", "fields": [], "file": "core/src/test/java/com/tdunning/math/stats/AVLGroupTreeTest.java"}, "test_case": {"identifier": "testFloorSum", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFloorSum() {\n        AVLGroupTree x = new AVLGroupTree(false);\n        int total = 0;\n        for (int i = 0; i < 1000; ++i) {\n            int count = randomIntBetween(1, 10);\n            x.add(randomDouble(), count, null);\n            total += count;\n        }\n        assertEquals(IntAVLTree.NIL, x.floorSum(-1));\n        for (long i = 0; i < total + 10; ++i) {\n            final int floorNode = x.floorSum(i);\n            assertTrue(x.headSum(floorNode) <= i);\n            final int next = x.next(floorNode);\n            assertTrue(next == IntAVLTree.NIL || x.headSum(next) > i);\n        }\n    }", "signature": "void testFloorSum()", "full_signature": "@Test public void testFloorSum()", "class_method_signature": "AVLGroupTreeTest.testFloorSum()", "testcase": true, "constructor": false, "invocations": ["randomIntBetween", "add", "randomDouble", "assertEquals", "floorSum", "floorSum", "assertTrue", "headSum", "next", "assertTrue", "headSum"]}, "focal_class": {"identifier": "AVLGroupTree", "superclass": "extends AbstractCollection<Centroid>", "interfaces": "implements Serializable", "fields": [{"original_string": "private double centroid;", "modifier": "private", "type": "double", "declarator": "centroid", "var_name": "centroid"}, {"original_string": "private int count;", "modifier": "private", "type": "int", "declarator": "count", "var_name": "count"}, {"original_string": "private List<Double> data;", "modifier": "private", "type": "List<Double>", "declarator": "data", "var_name": "data"}, {"original_string": "private double[] centroids;", "modifier": "private", "type": "double[]", "declarator": "centroids", "var_name": "centroids"}, {"original_string": "private int[] counts;", "modifier": "private", "type": "int[]", "declarator": "counts", "var_name": "counts"}, {"original_string": "private List<Double>[] datas;", "modifier": "private", "type": "List<Double>[]", "declarator": "datas", "var_name": "datas"}, {"original_string": "private int[] aggregatedCounts;", "modifier": "private", "type": "int[]", "declarator": "aggregatedCounts", "var_name": "aggregatedCounts"}, {"original_string": "private final IntAVLTree tree;", "modifier": "private final", "type": "IntAVLTree", "declarator": "tree", "var_name": "tree"}], "methods": [{"identifier": "AVLGroupTree", "parameters": "()", "modifiers": "", "return": "", "signature": " AVLGroupTree()", "full_signature": "  AVLGroupTree()", "class_method_signature": "AVLGroupTree.AVLGroupTree()", "testcase": false, "constructor": true}, {"identifier": "AVLGroupTree", "parameters": "(final boolean record)", "modifiers": "", "return": "", "signature": " AVLGroupTree(final boolean record)", "full_signature": "  AVLGroupTree(final boolean record)", "class_method_signature": "AVLGroupTree.AVLGroupTree(final boolean record)", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "AVLGroupTree.size()", "testcase": false, "constructor": false}, {"identifier": "prev", "parameters": "(int node)", "modifiers": "public", "return": "int", "signature": "int prev(int node)", "full_signature": "public int prev(int node)", "class_method_signature": "AVLGroupTree.prev(int node)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "(int node)", "modifiers": "public", "return": "int", "signature": "int next(int node)", "full_signature": "public int next(int node)", "class_method_signature": "AVLGroupTree.next(int node)", "testcase": false, "constructor": false}, {"identifier": "mean", "parameters": "(int node)", "modifiers": "public", "return": "double", "signature": "double mean(int node)", "full_signature": "public double mean(int node)", "class_method_signature": "AVLGroupTree.mean(int node)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(int node)", "modifiers": "public", "return": "int", "signature": "int count(int node)", "full_signature": "public int count(int node)", "class_method_signature": "AVLGroupTree.count(int node)", "testcase": false, "constructor": false}, {"identifier": "data", "parameters": "(int node)", "modifiers": "public", "return": "List<Double>", "signature": "List<Double> data(int node)", "full_signature": "public List<Double> data(int node)", "class_method_signature": "AVLGroupTree.data(int node)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(double centroid, int count, List<Double> data)", "modifiers": "public", "return": "void", "signature": "void add(double centroid, int count, List<Double> data)", "full_signature": "public void add(double centroid, int count, List<Double> data)", "class_method_signature": "AVLGroupTree.add(double centroid, int count, List<Double> data)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Centroid centroid)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(Centroid centroid)", "full_signature": "@Override public boolean add(Centroid centroid)", "class_method_signature": "AVLGroupTree.add(Centroid centroid)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(int node, double centroid, int count, List<Double> data, boolean forceInPlace)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "void", "signature": "void update(int node, double centroid, int count, List<Double> data, boolean forceInPlace)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public void update(int node, double centroid, int count, List<Double> data, boolean forceInPlace)", "class_method_signature": "AVLGroupTree.update(int node, double centroid, int count, List<Double> data, boolean forceInPlace)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int node)", "modifiers": "public", "return": "void", "signature": "void remove(int node)", "full_signature": "public void remove(int node)", "class_method_signature": "AVLGroupTree.remove(int node)", "testcase": false, "constructor": false}, {"identifier": "floor", "parameters": "(double centroid)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "int", "signature": "int floor(double centroid)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public int floor(double centroid)", "class_method_signature": "AVLGroupTree.floor(double centroid)", "testcase": false, "constructor": false}, {"identifier": "floorSum", "parameters": "(long sum)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "int", "signature": "int floorSum(long sum)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public int floorSum(long sum)", "class_method_signature": "AVLGroupTree.floorSum(long sum)", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int first()", "full_signature": "public int first()", "class_method_signature": "AVLGroupTree.first()", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "()", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "int", "signature": "int last()", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public int last()", "class_method_signature": "AVLGroupTree.last()", "testcase": false, "constructor": false}, {"identifier": "headSum", "parameters": "(int node)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "long", "signature": "long headSum(int node)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public long headSum(int node)", "class_method_signature": "AVLGroupTree.headSum(int node)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Centroid>", "signature": "Iterator<Centroid> iterator()", "full_signature": "@Override public Iterator<Centroid> iterator()", "class_method_signature": "AVLGroupTree.iterator()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "(final int startNode)", "modifiers": "private", "return": "Iterator<Centroid>", "signature": "Iterator<Centroid> iterator(final int startNode)", "full_signature": "private Iterator<Centroid> iterator(final int startNode)", "class_method_signature": "AVLGroupTree.iterator(final int startNode)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int sum()", "full_signature": "public int sum()", "class_method_signature": "AVLGroupTree.sum()", "testcase": false, "constructor": false}, {"identifier": "checkBalance", "parameters": "()", "modifiers": "", "return": "void", "signature": "void checkBalance()", "full_signature": " void checkBalance()", "class_method_signature": "AVLGroupTree.checkBalance()", "testcase": false, "constructor": false}, {"identifier": "checkAggregates", "parameters": "()", "modifiers": "", "return": "void", "signature": "void checkAggregates()", "full_signature": " void checkAggregates()", "class_method_signature": "AVLGroupTree.checkAggregates()", "testcase": false, "constructor": false}, {"identifier": "checkAggregates", "parameters": "(int node)", "modifiers": "private", "return": "void", "signature": "void checkAggregates(int node)", "full_signature": "private void checkAggregates(int node)", "class_method_signature": "AVLGroupTree.checkAggregates(int node)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/tdunning/math/stats/AVLGroupTree.java"}, "focal_method": {"identifier": "floorSum", "parameters": "(long sum)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "int", "body": "@SuppressWarnings(\"WeakerAccess\")\n    public int floorSum(long sum) {\n        int floor = IntAVLTree.NIL;\n        for (int node = tree.root(); node != IntAVLTree.NIL; ) {\n            final int left = tree.left(node);\n            final long leftCount = aggregatedCounts[left];\n            if (leftCount <= sum) {\n                floor = node;\n                sum -= leftCount + count(node);\n                node = tree.right(node);\n            } else {\n                node = tree.left(node);\n            }\n        }\n        return floor;\n    }", "signature": "int floorSum(long sum)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public int floorSum(long sum)", "class_method_signature": "AVLGroupTree.floorSum(long sum)", "testcase": false, "constructor": false, "invocations": ["root", "left", "count", "right", "left"]}, "repository": {"repo_id": 14509169, "url": "https://github.com/tdunning/t-digest", "language": "Java", "is_fork": false, "fork_count": 170, "stargazer_count": 1212, "size": 41644, "license": "licensed"}}