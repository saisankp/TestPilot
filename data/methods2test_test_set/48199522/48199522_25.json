{"test_class": {"identifier": "SQLIngesterTest", "superclass": "", "interfaces": "", "fields": [], "file": "legacy/src/test/java/macrobase/ingest/SQLIngesterTest.java"}, "test_case": {"identifier": "testSchema", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSchema() throws Exception {\n        JDBCMockObjectFactory factory = new JDBCMockObjectFactory();\n        factory.registerMockDriver();\n        MockConnection connection = factory.getMockConnection();\n        StatementResultSetHandler statementHandler =\n                connection.getStatementResultSetHandler();\n        MockResultSet result = statementHandler.createResultSet();\n        result.setFetchSize(0);\n\n        MockResultSetMetaData metaData = new MockResultSetMetaData();\n\n        Map<String, String> fakeColumnMap = new HashMap<>();\n        fakeColumnMap.put(\"test1\", \"numeric\");\n        fakeColumnMap.put(\"test2\", \"varchar\");\n        fakeColumnMap.put(\"test3\", \"int8\");\n\n        Set<String> fakeColumns = fakeColumnMap.keySet();\n\n        metaData.setColumnCount(fakeColumnMap.size());\n        int i = 1;\n        for (Map.Entry<String, String> fc : fakeColumnMap.entrySet()) {\n            metaData.setColumnName(i, fc.getKey());\n            metaData.setColumnTypeName(i, fc.getValue());\n            i++;\n        }\n\n        result.setResultSetMetaData(metaData);\n\n        statementHandler.prepareGlobalResultSet(result);\n\n        MacroBaseConf conf = new MacroBaseConf();\n        conf.set(MacroBaseConf.ATTRIBUTES, Lists.newArrayList(fakeColumns));\n        conf.set(MacroBaseConf.METRICS, new ArrayList<>());\n        conf.set(MacroBaseConf.BASE_QUERY, \"SELECT * FROM test;\");\n\n\n        SQLIngester loader = new TestSQLIngester(conf, connection);\n        Schema schema = loader.getSchema(\"foo\");\n\n        for (Schema.SchemaColumn sc : schema.getColumns()) {\n            assertTrue(fakeColumns.contains(sc.getName()));\n            assertEquals(fakeColumnMap.get(sc.getName()), sc.getType());\n            fakeColumns.remove(sc.getName());\n        }\n\n        assertTrue(fakeColumns.isEmpty());\n    }", "signature": "void testSchema()", "full_signature": "@Test public void testSchema()", "class_method_signature": "SQLIngesterTest.testSchema()", "testcase": true, "constructor": false, "invocations": ["registerMockDriver", "getMockConnection", "getStatementResultSetHandler", "createResultSet", "setFetchSize", "put", "put", "put", "keySet", "setColumnCount", "size", "entrySet", "setColumnName", "getKey", "setColumnTypeName", "getValue", "setResultSetMetaData", "prepareGlobalResultSet", "set", "newArrayList", "set", "set", "getSchema", "getColumns", "assertTrue", "contains", "getName", "assertEquals", "get", "getName", "getType", "remove", "getName", "assertTrue", "isEmpty"]}, "focal_class": {"identifier": "SQLIngester", "superclass": "extends DataIngester", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(SQLIngester.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(SQLIngester.class)", "var_name": "log"}, {"original_string": "private ManagedDataSource source;", "modifier": "private", "type": "ManagedDataSource", "declarator": "source", "var_name": "source"}, {"original_string": "private Connection connection;", "modifier": "private", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private final String dbUrl;", "modifier": "private final", "type": "String", "declarator": "dbUrl", "var_name": "dbUrl"}, {"original_string": "private final String dbUser;", "modifier": "private final", "type": "String", "declarator": "dbUser", "var_name": "dbUser"}, {"original_string": "private final String dbPassword;", "modifier": "private final", "type": "String", "declarator": "dbPassword", "var_name": "dbPassword"}, {"original_string": "private final String dbName;", "modifier": "private final", "type": "String", "declarator": "dbName", "var_name": "dbName"}, {"original_string": "private final Integer timeColumn;", "modifier": "private final", "type": "Integer", "declarator": "timeColumn", "var_name": "timeColumn"}, {"original_string": "protected final String baseQuery;", "modifier": "protected final", "type": "String", "declarator": "baseQuery", "var_name": "baseQuery"}, {"original_string": "protected ResultSet resultSet;", "modifier": "protected", "type": "ResultSet", "declarator": "resultSet", "var_name": "resultSet"}, {"original_string": "private final MBStream<Datum> output = new MBStream<>();", "modifier": "private final", "type": "MBStream<Datum>", "declarator": "output = new MBStream<>()", "var_name": "output"}, {"original_string": "private boolean connected = false;", "modifier": "private", "type": "boolean", "declarator": "connected = false", "var_name": "connected"}, {"original_string": "private static final String LIMIT_REGEX = \"(LIMIT\\\\s\\\\d+)\";", "modifier": "private static final", "type": "String", "declarator": "LIMIT_REGEX = \"(LIMIT\\\\s\\\\d+)\"", "var_name": "LIMIT_REGEX"}], "methods": [{"identifier": "getDriverClass", "parameters": "()", "modifiers": "abstract public", "return": "String", "signature": "String getDriverClass()", "full_signature": "abstract public String getDriverClass()", "class_method_signature": "SQLIngester.getDriverClass()", "testcase": false, "constructor": false}, {"identifier": "getJDBCUrlPrefix", "parameters": "()", "modifiers": "abstract public", "return": "String", "signature": "String getJDBCUrlPrefix()", "full_signature": "abstract public String getJDBCUrlPrefix()", "class_method_signature": "SQLIngester.getJDBCUrlPrefix()", "testcase": false, "constructor": false}, {"identifier": "SQLIngester", "parameters": "(MacroBaseConf conf)", "modifiers": "public", "return": "", "signature": " SQLIngester(MacroBaseConf conf)", "full_signature": "public  SQLIngester(MacroBaseConf conf)", "class_method_signature": "SQLIngester.SQLIngester(MacroBaseConf conf)", "testcase": false, "constructor": true}, {"identifier": "SQLIngester", "parameters": "(MacroBaseConf conf, Connection connection)", "modifiers": "public", "return": "", "signature": " SQLIngester(MacroBaseConf conf, Connection connection)", "full_signature": "public  SQLIngester(MacroBaseConf conf, Connection connection)", "class_method_signature": "SQLIngester.SQLIngester(MacroBaseConf conf, Connection connection)", "testcase": false, "constructor": true}, {"identifier": "connect", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void connect()", "full_signature": "public void connect()", "class_method_signature": "SQLIngester.connect()", "testcase": false, "constructor": false}, {"identifier": "getJDBCProperties", "parameters": "()", "modifiers": "protected", "return": "Map<String, String>", "signature": "Map<String, String> getJDBCProperties()", "full_signature": "protected Map<String, String> getJDBCProperties()", "class_method_signature": "SQLIngester.getJDBCProperties()", "testcase": false, "constructor": false}, {"identifier": "removeLimit", "parameters": "(String sql)", "modifiers": "private", "return": "String", "signature": "String removeLimit(String sql)", "full_signature": "private String removeLimit(String sql)", "class_method_signature": "SQLIngester.removeLimit(String sql)", "testcase": false, "constructor": false}, {"identifier": "removeSqlJunk", "parameters": "(String sql)", "modifiers": "private", "return": "String", "signature": "String removeSqlJunk(String sql)", "full_signature": "private String removeSqlJunk(String sql)", "class_method_signature": "SQLIngester.removeSqlJunk(String sql)", "testcase": false, "constructor": false}, {"identifier": "getSchema", "parameters": "(String baseQuery)", "modifiers": "public", "return": "Schema", "signature": "Schema getSchema(String baseQuery)", "full_signature": "public Schema getSchema(String baseQuery)", "class_method_signature": "SQLIngester.getSchema(String baseQuery)", "testcase": false, "constructor": false}, {"identifier": "getRowsSql", "parameters": "(String baseQuery,\n                             Map<String, String> preds,\n                             int limit,\n                             int offset)", "modifiers": "public", "return": "String", "signature": "String getRowsSql(String baseQuery,\n                             Map<String, String> preds,\n                             int limit,\n                             int offset)", "full_signature": "public String getRowsSql(String baseQuery,\n                             Map<String, String> preds,\n                             int limit,\n                             int offset)", "class_method_signature": "SQLIngester.getRowsSql(String baseQuery,\n                             Map<String, String> preds,\n                             int limit,\n                             int offset)", "testcase": false, "constructor": false}, {"identifier": "getRows", "parameters": "(String baseQuery,\n                          Map<String, String> preds,\n                          int limit,\n                          int offset)", "modifiers": "@Override public", "return": "RowSet", "signature": "RowSet getRows(String baseQuery,\n                          Map<String, String> preds,\n                          int limit,\n                          int offset)", "full_signature": "@Override public RowSet getRows(String baseQuery,\n                          Map<String, String> preds,\n                          int limit,\n                          int offset)", "class_method_signature": "SQLIngester.getRows(String baseQuery,\n                          Map<String, String> preds,\n                          int limit,\n                          int offset)", "testcase": false, "constructor": false}, {"identifier": "initializeConnection", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeConnection()", "full_signature": "private void initializeConnection()", "class_method_signature": "SQLIngester.initializeConnection()", "testcase": false, "constructor": false}, {"identifier": "initializeResultSet", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeResultSet()", "full_signature": "private void initializeResultSet()", "class_method_signature": "SQLIngester.initializeResultSet()", "testcase": false, "constructor": false}, {"identifier": "getStream", "parameters": "()", "modifiers": "@Override public", "return": "MBStream<Datum>", "signature": "MBStream<Datum> getStream()", "full_signature": "@Override public MBStream<Datum> getStream()", "class_method_signature": "SQLIngester.getStream()", "testcase": false, "constructor": false}, {"identifier": "getNext", "parameters": "()", "modifiers": "private", "return": "Datum", "signature": "Datum getNext()", "full_signature": "private Datum getNext()", "class_method_signature": "SQLIngester.getNext()", "testcase": false, "constructor": false}, {"identifier": "getAttrs", "parameters": "(ResultSet rs, DatumEncoder encoder, int rsStartIndex)", "modifiers": "private", "return": "List<Integer>", "signature": "List<Integer> getAttrs(ResultSet rs, DatumEncoder encoder, int rsStartIndex)", "full_signature": "private List<Integer> getAttrs(ResultSet rs, DatumEncoder encoder, int rsStartIndex)", "class_method_signature": "SQLIngester.getAttrs(ResultSet rs, DatumEncoder encoder, int rsStartIndex)", "testcase": false, "constructor": false}, {"identifier": "getMetrics", "parameters": "(ResultSet rs, int rsStartIndex)", "modifiers": "private", "return": "RealVector", "signature": "RealVector getMetrics(ResultSet rs, int rsStartIndex)", "full_signature": "private RealVector getMetrics(ResultSet rs, int rsStartIndex)", "class_method_signature": "SQLIngester.getMetrics(ResultSet rs, int rsStartIndex)", "testcase": false, "constructor": false}, {"identifier": "orderByTimeColumn", "parameters": "(String sql, @Nullable Integer timeColumn)", "modifiers": "private", "return": "String", "signature": "String orderByTimeColumn(String sql, @Nullable Integer timeColumn)", "full_signature": "private String orderByTimeColumn(String sql, @Nullable Integer timeColumn)", "class_method_signature": "SQLIngester.orderByTimeColumn(String sql, @Nullable Integer timeColumn)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/macrobase/ingest/SQLIngester.java"}, "focal_method": {"identifier": "getSchema", "parameters": "(String baseQuery)", "modifiers": "public", "return": "Schema", "body": "public Schema getSchema(String baseQuery)\n            throws SQLException {\n        initializeConnection();\n\n        Statement stmt = connection.createStatement();\n        String sql = String.format(\"%s LIMIT 1\", removeSqlJunk(removeLimit(baseQuery)));\n        ResultSet rs = stmt.executeQuery(sql);\n\n        List<Schema.SchemaColumn> columns = Lists.newArrayList();\n\n        for (int i = 1; i <= rs.getMetaData().getColumnCount(); ++i) {\n            columns.add(new Schema.SchemaColumn(rs.getMetaData().getColumnName(i),\n                    rs.getMetaData().getColumnTypeName(i)));\n        }\n\n        return new Schema(columns);\n    }", "signature": "Schema getSchema(String baseQuery)", "full_signature": "public Schema getSchema(String baseQuery)", "class_method_signature": "SQLIngester.getSchema(String baseQuery)", "testcase": false, "constructor": false, "invocations": ["initializeConnection", "createStatement", "format", "removeSqlJunk", "removeLimit", "executeQuery", "newArrayList", "getColumnCount", "getMetaData", "add", "getColumnName", "getMetaData", "getColumnTypeName", "getMetaData"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}