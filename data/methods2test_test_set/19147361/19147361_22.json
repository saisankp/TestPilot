{"test_class": {"identifier": "TestThemisScanner", "superclass": "extends ClientTestBase", "interfaces": "", "fields": [], "file": "themis-client/src/test/java/org/apache/hadoop/hbase/themis/TestThemisScanner.java"}, "test_case": {"identifier": "testCreateGetFromScan", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCreateGetFromScan() {\n    Scan scan = new Scan(ANOTHER_ROW, ROW);\n    scan.addColumn(FAMILY, QUALIFIER).addColumn(ANOTHER_FAMILY, ANOTHER_QUALIFIER);\n    Get get = ThemisScanner.createGetFromScan(scan, ROW);\n    Assert.assertArrayEquals(ROW, get.getRow());\n    Assert.assertEquals(2, get.getFamilyMap().size());\n    Assert.assertEquals(1, get.getFamilyMap().get(FAMILY).size());\n    Assert.assertArrayEquals(QUALIFIER, get.getFamilyMap().get(FAMILY).iterator().next());\n    Assert.assertEquals(1, get.getFamilyMap().get(ANOTHER_FAMILY).size());\n    Assert.assertArrayEquals(ANOTHER_QUALIFIER,\n      get.getFamilyMap().get(ANOTHER_FAMILY).iterator().next());\n  }", "signature": "void testCreateGetFromScan()", "full_signature": "@Test public void testCreateGetFromScan()", "class_method_signature": "TestThemisScanner.testCreateGetFromScan()", "testcase": true, "constructor": false, "invocations": ["addColumn", "addColumn", "createGetFromScan", "assertArrayEquals", "getRow", "assertEquals", "size", "getFamilyMap", "assertEquals", "size", "get", "getFamilyMap", "assertArrayEquals", "next", "iterator", "get", "getFamilyMap", "assertEquals", "size", "get", "getFamilyMap", "assertArrayEquals", "next", "iterator", "get", "getFamilyMap"]}, "focal_class": {"identifier": "ThemisScanner", "superclass": "extends AbstractClientScanner", "interfaces": "", "fields": [{"original_string": "protected final ResultScanner scanner;", "modifier": "protected final", "type": "ResultScanner", "declarator": "scanner", "var_name": "scanner"}, {"original_string": "protected final byte[] tableName;", "modifier": "protected final", "type": "byte[]", "declarator": "tableName", "var_name": "tableName"}, {"original_string": "protected Transaction transaction;", "modifier": "protected", "type": "Transaction", "declarator": "transaction", "var_name": "transaction"}, {"original_string": "protected final Scan scan;", "modifier": "protected final", "type": "Scan", "declarator": "scan", "var_name": "scan"}], "methods": [{"identifier": "ThemisScanner", "parameters": "(final byte[] tableName, final Scan scan, final Transaction transaction)", "modifiers": "public", "return": "", "signature": " ThemisScanner(final byte[] tableName, final Scan scan, final Transaction transaction)", "full_signature": "public  ThemisScanner(final byte[] tableName, final Scan scan, final Transaction transaction)", "class_method_signature": "ThemisScanner.ThemisScanner(final byte[] tableName, final Scan scan, final Transaction transaction)", "testcase": false, "constructor": true}, {"identifier": "setStartTsToScan", "parameters": "(Scan scan, long startTs)", "modifiers": "protected static", "return": "void", "signature": "void setStartTsToScan(Scan scan, long startTs)", "full_signature": "protected static void setStartTsToScan(Scan scan, long startTs)", "class_method_signature": "ThemisScanner.setStartTsToScan(Scan scan, long startTs)", "testcase": false, "constructor": false}, {"identifier": "createGetFromScan", "parameters": "(Scan scan, byte[] rowkey)", "modifiers": "public static", "return": "Get", "signature": "Get createGetFromScan(Scan scan, byte[] rowkey)", "full_signature": "public static Get createGetFromScan(Scan scan, byte[] rowkey)", "class_method_signature": "ThemisScanner.createGetFromScan(Scan scan, byte[] rowkey)", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "public", "return": "Result", "signature": "Result next()", "full_signature": "public Result next()", "class_method_signature": "ThemisScanner.next()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ThemisScanner.close()", "testcase": false, "constructor": false}, {"identifier": "getScan", "parameters": "()", "modifiers": "protected", "return": "Scan", "signature": "Scan getScan()", "full_signature": "protected Scan getScan()", "class_method_signature": "ThemisScanner.getScan()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "(int nbRows)", "modifiers": "@Override public", "return": "Result[]", "signature": "Result[] next(int nbRows)", "full_signature": "@Override public Result[] next(int nbRows)", "class_method_signature": "ThemisScanner.next(int nbRows)", "testcase": false, "constructor": false}], "file": "themis-client/src/main/java/org/apache/hadoop/hbase/themis/ThemisScanner.java"}, "focal_method": {"identifier": "createGetFromScan", "parameters": "(Scan scan, byte[] rowkey)", "modifiers": "public static", "return": "Get", "body": "public static Get createGetFromScan(Scan scan, byte[] rowkey) {\n    Get get = new Get(rowkey);\n    for (Entry<byte[], NavigableSet<byte[]>> familyEntry : scan.getFamilyMap().entrySet()) {\n      if (familyEntry.getValue() != null && familyEntry.getValue().size() > 0) {\n        for (byte[] qualifier : familyEntry.getValue()) {\n          get.addColumn(familyEntry.getKey(), qualifier);\n        }\n      } else {\n        get.addFamily(familyEntry.getKey());\n      }\n    }\n    return get;\n  }", "signature": "Get createGetFromScan(Scan scan, byte[] rowkey)", "full_signature": "public static Get createGetFromScan(Scan scan, byte[] rowkey)", "class_method_signature": "ThemisScanner.createGetFromScan(Scan scan, byte[] rowkey)", "testcase": false, "constructor": false, "invocations": ["entrySet", "getFamilyMap", "getValue", "size", "getValue", "getValue", "addColumn", "getKey", "addFamily", "getKey"]}, "repository": {"repo_id": 19147361, "url": "https://github.com/XiaoMi/themis", "language": "Java", "is_fork": false, "fork_count": 57, "stargazer_count": 212, "size": 1400, "license": "Apache License 2.0"}}