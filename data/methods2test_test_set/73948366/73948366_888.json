{"test_class": {"identifier": "AWSCertRecordStoreFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/impl/AWSCertRecordStoreFactoryTest.java"}, "test_case": {"identifier": "testCreate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreate() {\n        \n        System.setProperty(ZTSConsts.ZTS_PROP_AWS_RDS_MASTER_INSTANCE, \"instance\");\n        System.setProperty(ZTSConsts.ZTS_PROP_AWS_RDS_USER, \"rds-user\");\n        System.setProperty(ZTSConsts.ZTS_PROP_AWS_RDS_IAM_ROLE, \"role\");\n        System.setProperty(ZTSConsts.ZTS_PROP_AWS_RDS_CREDS_REFRESH_TIME, \"1\");\n        \n        AWSCertRecordStoreFactory factory = new TestAWSCertRecordStoreFactory();\n        CertRecordStore store = factory.create(null);\n        \n        // sleep a couple of seconds for the updater to run\n        try {\n            Thread.sleep(2000);\n        } catch (InterruptedException ignored) {\n        }\n        assertNotNull(store);\n\n        System.clearProperty(ZTSConsts.ZTS_PROP_AWS_RDS_MASTER_INSTANCE);\n        System.clearProperty(ZTSConsts.ZTS_PROP_AWS_RDS_USER);\n        System.clearProperty(ZTSConsts.ZTS_PROP_AWS_RDS_IAM_ROLE);\n        System.clearProperty(ZTSConsts.ZTS_PROP_AWS_RDS_CREDS_REFRESH_TIME);\n    }", "signature": "void testCreate()", "full_signature": "@Test public void testCreate()", "class_method_signature": "AWSCertRecordStoreFactoryTest.testCreate()", "testcase": true, "constructor": false, "invocations": ["setProperty", "setProperty", "setProperty", "setProperty", "create", "sleep", "assertNotNull", "clearProperty", "clearProperty", "clearProperty", "clearProperty"]}, "focal_class": {"identifier": "AWSCertRecordStoreFactory", "superclass": "", "interfaces": "implements CertRecordStoreFactory", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(AWSCertRecordStoreFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(AWSCertRecordStoreFactory.class)", "var_name": "LOGGER"}, {"original_string": "private static Properties mysqlConnectionProperties = new Properties();", "modifier": "private static", "type": "Properties", "declarator": "mysqlConnectionProperties = new Properties()", "var_name": "mysqlConnectionProperties"}, {"original_string": "private static String rdsUser = null;", "modifier": "private static", "type": "String", "declarator": "rdsUser = null", "var_name": "rdsUser"}, {"original_string": "private static String rdsIamRole = null;", "modifier": "private static", "type": "String", "declarator": "rdsIamRole = null", "var_name": "rdsIamRole"}, {"original_string": "private static String rdsMaster = null;", "modifier": "private static", "type": "String", "declarator": "rdsMaster = null", "var_name": "rdsMaster"}, {"original_string": "private int rdsPort = 3306;", "modifier": "private", "type": "int", "declarator": "rdsPort = 3306", "var_name": "rdsPort"}], "methods": [{"identifier": "create", "parameters": "(PrivateKeyStore keyStore)", "modifiers": "@Override public", "return": "CertRecordStore", "signature": "CertRecordStore create(PrivateKeyStore keyStore)", "full_signature": "@Override public CertRecordStore create(PrivateKeyStore keyStore)", "class_method_signature": "AWSCertRecordStoreFactory.create(PrivateKeyStore keyStore)", "testcase": false, "constructor": false}, {"identifier": "getInstanceRegion", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getInstanceRegion()", "full_signature": " String getInstanceRegion()", "class_method_signature": "AWSCertRecordStoreFactory.getInstanceRegion()", "testcase": false, "constructor": false}, {"identifier": "getTokenGenerator", "parameters": "(InstanceProfileCredentialsProvider awsCredProvider)", "modifiers": "", "return": "RdsIamAuthTokenGenerator", "signature": "RdsIamAuthTokenGenerator getTokenGenerator(InstanceProfileCredentialsProvider awsCredProvider)", "full_signature": " RdsIamAuthTokenGenerator getTokenGenerator(InstanceProfileCredentialsProvider awsCredProvider)", "class_method_signature": "AWSCertRecordStoreFactory.getTokenGenerator(InstanceProfileCredentialsProvider awsCredProvider)", "testcase": false, "constructor": false}, {"identifier": "getAuthToken", "parameters": "(String hostname, int port, String rdsUser, String rdsIamRole)", "modifiers": "", "return": "String", "signature": "String getAuthToken(String hostname, int port, String rdsUser, String rdsIamRole)", "full_signature": " String getAuthToken(String hostname, int port, String rdsUser, String rdsIamRole)", "class_method_signature": "AWSCertRecordStoreFactory.getAuthToken(String hostname, int port, String rdsUser, String rdsIamRole)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/AWSCertRecordStoreFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(PrivateKeyStore keyStore)", "modifiers": "@Override public", "return": "CertRecordStore", "body": "@Override\n    public CertRecordStore create(PrivateKeyStore keyStore) {\n        \n        rdsUser = System.getProperty(ZTSConsts.ZTS_PROP_AWS_RDS_USER);\n        rdsIamRole = System.getProperty(ZTSConsts.ZTS_PROP_AWS_RDS_IAM_ROLE);\n        rdsMaster = System.getProperty(ZTSConsts.ZTS_PROP_AWS_RDS_MASTER_INSTANCE);\n        rdsPort = Integer.parseInt(System.getProperty(ZTSConsts.ZTS_PROP_AWS_RDS_MASTER_PORT, \"3306\"));\n        \n        final String rdsEngine = System.getProperty(ZTSConsts.ZTS_PROP_AWS_RDS_ENGINE, \"mysql\");\n        final String rdsDatabase = System.getProperty(ZTSConsts.ZTS_PROP_AWS_RDS_DATABASE, \"zts_store\");\n\n        final String jdbcStore = String.format(\"jdbc:%s://%s:%d/%s\", rdsEngine, rdsMaster, rdsPort, rdsDatabase);\n        String rdsToken = getAuthToken(rdsMaster, rdsPort, rdsUser, rdsIamRole);\n        \n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Connecting to {} with auth token {}\", jdbcStore, rdsToken);\n        }\n\n        mysqlConnectionProperties.setProperty(ZTSConsts.DB_PROP_VERIFY_SERVER_CERT,\n                System.getProperty(ZTSConsts.ZTS_PROP_CERT_JDBC_VERIFY_SERVER_CERT, \"true\"));\n        mysqlConnectionProperties.setProperty(ZTSConsts.DB_PROP_USE_SSL,\n                System.getProperty(ZTSConsts.ZTS_PROP_CERT_JDBC_USE_SSL, \"true\"));\n        mysqlConnectionProperties.setProperty(ZTSConsts.DB_PROP_USER, rdsUser);\n        mysqlConnectionProperties.setProperty(ZTSConsts.DB_PROP_PASSWORD, rdsToken);\n        \n        PoolableDataSource dataSource = DataSourceFactory.create(jdbcStore, mysqlConnectionProperties);\n        \n        long credsRefreshTime = Integer.parseInt(System.getProperty(ZTSConsts.ZTS_PROP_AWS_RDS_CREDS_REFRESH_TIME, \"300\"));\n\n        ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(1);\n        scheduledThreadPool.scheduleAtFixedRate(new CredentialsUpdater(), credsRefreshTime,\n                credsRefreshTime, TimeUnit.SECONDS);\n        \n        return new JDBCCertRecordStore(dataSource);\n    }", "signature": "CertRecordStore create(PrivateKeyStore keyStore)", "full_signature": "@Override public CertRecordStore create(PrivateKeyStore keyStore)", "class_method_signature": "AWSCertRecordStoreFactory.create(PrivateKeyStore keyStore)", "testcase": false, "constructor": false, "invocations": ["getProperty", "getProperty", "getProperty", "parseInt", "getProperty", "getProperty", "getProperty", "format", "getAuthToken", "isDebugEnabled", "debug", "setProperty", "getProperty", "setProperty", "getProperty", "setProperty", "setProperty", "create", "parseInt", "getProperty", "newScheduledThreadPool", "scheduleAtFixedRate"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}