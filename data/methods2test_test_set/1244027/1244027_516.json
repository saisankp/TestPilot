{"test_class": {"identifier": "RootPathTest", "superclass": "extends AbstractPathTest", "interfaces": "", "fields": [{"original_string": "protected Path root;", "modifier": "protected", "type": "Path", "declarator": "root", "var_name": "root"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/value/basic/RootPathTest.java"}, "test_case": {"identifier": "shouldReturnIteratorWithRootPathFromPathsFromRoot", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnIteratorWithRootPathFromPathsFromRoot() {\n        Iterator<Path> iter = root.pathsFromRoot();\n        assertThat(iter.hasNext(), is(true));\n        assertThat(iter.next(), is(root));\n        assertThat(iter.hasNext(), is(false));\n    }", "signature": "void shouldReturnIteratorWithRootPathFromPathsFromRoot()", "full_signature": "@Test public void shouldReturnIteratorWithRootPathFromPathsFromRoot()", "class_method_signature": "RootPathTest.shouldReturnIteratorWithRootPathFromPathsFromRoot()", "testcase": true, "constructor": false, "invocations": ["pathsFromRoot", "assertThat", "hasNext", "is", "assertThat", "next", "is", "assertThat", "hasNext", "is"]}, "focal_class": {"identifier": "RootPath", "superclass": "extends AbstractPath", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "public static final Path INSTANCE = new RootPath();", "modifier": "public static final", "type": "Path", "declarator": "INSTANCE = new RootPath()", "var_name": "INSTANCE"}, {"original_string": "private static final Path.Segment[] EMPTY_SEGMENT_ARRAY = new Path.Segment[] {};", "modifier": "private static final", "type": "Path.Segment[]", "declarator": "EMPTY_SEGMENT_ARRAY = new Path.Segment[] {}", "var_name": "EMPTY_SEGMENT_ARRAY"}, {"original_string": "private static final List<Path.Segment> EMPTY_SEGMENT_LIST = Collections.emptyList();", "modifier": "private static final", "type": "List<Path.Segment>", "declarator": "EMPTY_SEGMENT_LIST = Collections.emptyList()", "var_name": "EMPTY_SEGMENT_LIST"}], "methods": [{"identifier": "RootPath", "parameters": "()", "modifiers": "private", "return": "", "signature": " RootPath()", "full_signature": "private  RootPath()", "class_method_signature": "RootPath.RootPath()", "testcase": false, "constructor": true}, {"identifier": "getAncestor", "parameters": "( int degree )", "modifiers": "@Override public", "return": "Path", "signature": "Path getAncestor( int degree )", "full_signature": "@Override public Path getAncestor( int degree )", "class_method_signature": "RootPath.getAncestor( int degree )", "testcase": false, "constructor": false}, {"identifier": "getSegmentsOfParent", "parameters": "()", "modifiers": "@Override protected", "return": "Iterator<Segment>", "signature": "Iterator<Segment> getSegmentsOfParent()", "full_signature": "@Override protected Iterator<Segment> getSegmentsOfParent()", "class_method_signature": "RootPath.getSegmentsOfParent()", "testcase": false, "constructor": false}, {"identifier": "getCanonicalPath", "parameters": "()", "modifiers": "@Override public", "return": "Path", "signature": "Path getCanonicalPath()", "full_signature": "@Override public Path getCanonicalPath()", "class_method_signature": "RootPath.getCanonicalPath()", "testcase": false, "constructor": false}, {"identifier": "getCommonAncestor", "parameters": "( Path that )", "modifiers": "@Override public", "return": "Path", "signature": "Path getCommonAncestor( Path that )", "full_signature": "@Override public Path getCommonAncestor( Path that )", "class_method_signature": "RootPath.getCommonAncestor( Path that )", "testcase": false, "constructor": false}, {"identifier": "getLastSegment", "parameters": "()", "modifiers": "@Override public", "return": "Segment", "signature": "Segment getLastSegment()", "full_signature": "@Override public Segment getLastSegment()", "class_method_signature": "RootPath.getLastSegment()", "testcase": false, "constructor": false}, {"identifier": "endsWith", "parameters": "( Name nameOfLastSegment )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean endsWith( Name nameOfLastSegment )", "full_signature": "@Override public boolean endsWith( Name nameOfLastSegment )", "class_method_signature": "RootPath.endsWith( Name nameOfLastSegment )", "testcase": false, "constructor": false}, {"identifier": "endsWith", "parameters": "( Name nameOfLastSegment,\n                             int snsIndex )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean endsWith( Name nameOfLastSegment,\n                             int snsIndex )", "full_signature": "@Override public boolean endsWith( Name nameOfLastSegment,\n                             int snsIndex )", "class_method_signature": "RootPath.endsWith( Name nameOfLastSegment,\n                             int snsIndex )", "testcase": false, "constructor": false}, {"identifier": "getNormalizedPath", "parameters": "()", "modifiers": "@Override public", "return": "Path", "signature": "Path getNormalizedPath()", "full_signature": "@Override public Path getNormalizedPath()", "class_method_signature": "RootPath.getNormalizedPath()", "testcase": false, "constructor": false}, {"identifier": "relativeToRoot", "parameters": "()", "modifiers": "@Override public", "return": "Path", "signature": "Path relativeToRoot()", "full_signature": "@Override public Path relativeToRoot()", "class_method_signature": "RootPath.relativeToRoot()", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "( Path relativePath )", "modifiers": "@Override public", "return": "Path", "signature": "Path resolve( Path relativePath )", "full_signature": "@Override public Path resolve( Path relativePath )", "class_method_signature": "RootPath.resolve( Path relativePath )", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "()", "modifiers": "@Override public", "return": "Path", "signature": "Path getParent()", "full_signature": "@Override public Path getParent()", "class_method_signature": "RootPath.getParent()", "testcase": false, "constructor": false}, {"identifier": "getSegment", "parameters": "( int index )", "modifiers": "@Override public", "return": "Segment", "signature": "Segment getSegment( int index )", "full_signature": "@Override public Segment getSegment( int index )", "class_method_signature": "RootPath.getSegment( int index )", "testcase": false, "constructor": false}, {"identifier": "getSegmentsArray", "parameters": "()", "modifiers": "@Override public", "return": "Segment[]", "signature": "Segment[] getSegmentsArray()", "full_signature": "@Override public Segment[] getSegmentsArray()", "class_method_signature": "RootPath.getSegmentsArray()", "testcase": false, "constructor": false}, {"identifier": "getSegmentsList", "parameters": "()", "modifiers": "@Override public", "return": "List<Segment>", "signature": "List<Segment> getSegmentsList()", "full_signature": "@Override public List<Segment> getSegmentsList()", "class_method_signature": "RootPath.getSegmentsList()", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getString()", "full_signature": "@Override public String getString()", "class_method_signature": "RootPath.getString()", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "( TextEncoder encoder )", "modifiers": "@Override public", "return": "String", "signature": "String getString( TextEncoder encoder )", "full_signature": "@Override public String getString( TextEncoder encoder )", "class_method_signature": "RootPath.getString( TextEncoder encoder )", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "( NamespaceRegistry namespaceRegistry )", "modifiers": "@Override public", "return": "String", "signature": "String getString( NamespaceRegistry namespaceRegistry )", "full_signature": "@Override public String getString( NamespaceRegistry namespaceRegistry )", "class_method_signature": "RootPath.getString( NamespaceRegistry namespaceRegistry )", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "( NamespaceRegistry namespaceRegistry,\n                             TextEncoder encoder )", "modifiers": "@Override public", "return": "String", "signature": "String getString( NamespaceRegistry namespaceRegistry,\n                             TextEncoder encoder )", "full_signature": "@Override public String getString( NamespaceRegistry namespaceRegistry,\n                             TextEncoder encoder )", "class_method_signature": "RootPath.getString( NamespaceRegistry namespaceRegistry,\n                             TextEncoder encoder )", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "( NamespaceRegistry namespaceRegistry,\n                             TextEncoder encoder,\n                             TextEncoder delimiterEncoder )", "modifiers": "@Override public", "return": "String", "signature": "String getString( NamespaceRegistry namespaceRegistry,\n                             TextEncoder encoder,\n                             TextEncoder delimiterEncoder )", "full_signature": "@Override public String getString( NamespaceRegistry namespaceRegistry,\n                             TextEncoder encoder,\n                             TextEncoder delimiterEncoder )", "class_method_signature": "RootPath.getString( NamespaceRegistry namespaceRegistry,\n                             TextEncoder encoder,\n                             TextEncoder delimiterEncoder )", "testcase": false, "constructor": false}, {"identifier": "hasSameAncestor", "parameters": "( Path that )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasSameAncestor( Path that )", "full_signature": "@Override public boolean hasSameAncestor( Path that )", "class_method_signature": "RootPath.hasSameAncestor( Path that )", "testcase": false, "constructor": false}, {"identifier": "isAbsolute", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAbsolute()", "full_signature": "@Override public boolean isAbsolute()", "class_method_signature": "RootPath.isAbsolute()", "testcase": false, "constructor": false}, {"identifier": "isAncestorOf", "parameters": "( Path descendant )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAncestorOf( Path descendant )", "full_signature": "@Override public boolean isAncestorOf( Path descendant )", "class_method_signature": "RootPath.isAncestorOf( Path descendant )", "testcase": false, "constructor": false}, {"identifier": "isAtOrAbove", "parameters": "( Path other )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAtOrAbove( Path other )", "full_signature": "@Override public boolean isAtOrAbove( Path other )", "class_method_signature": "RootPath.isAtOrAbove( Path other )", "testcase": false, "constructor": false}, {"identifier": "isAtOrBelow", "parameters": "( Path other )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAtOrBelow( Path other )", "full_signature": "@Override public boolean isAtOrBelow( Path other )", "class_method_signature": "RootPath.isAtOrBelow( Path other )", "testcase": false, "constructor": false}, {"identifier": "isDescendantOf", "parameters": "( Path ancestor )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDescendantOf( Path ancestor )", "full_signature": "@Override public boolean isDescendantOf( Path ancestor )", "class_method_signature": "RootPath.isDescendantOf( Path ancestor )", "testcase": false, "constructor": false}, {"identifier": "isNormalized", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isNormalized()", "full_signature": "@Override public boolean isNormalized()", "class_method_signature": "RootPath.isNormalized()", "testcase": false, "constructor": false}, {"identifier": "isRoot", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRoot()", "full_signature": "@Override public boolean isRoot()", "class_method_signature": "RootPath.isRoot()", "testcase": false, "constructor": false}, {"identifier": "isSameAs", "parameters": "( Path other )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSameAs( Path other )", "full_signature": "@Override public boolean isSameAs( Path other )", "class_method_signature": "RootPath.isSameAs( Path other )", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Segment>", "signature": "Iterator<Segment> iterator()", "full_signature": "@Override public Iterator<Segment> iterator()", "class_method_signature": "RootPath.iterator()", "testcase": false, "constructor": false}, {"identifier": "pathsFromRoot", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Path>", "signature": "Iterator<Path> pathsFromRoot()", "full_signature": "@Override public Iterator<Path> pathsFromRoot()", "class_method_signature": "RootPath.pathsFromRoot()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "RootPath.size()", "testcase": false, "constructor": false}, {"identifier": "subpath", "parameters": "( int beginIndex )", "modifiers": "@Override public", "return": "Path", "signature": "Path subpath( int beginIndex )", "full_signature": "@Override public Path subpath( int beginIndex )", "class_method_signature": "RootPath.subpath( int beginIndex )", "testcase": false, "constructor": false}, {"identifier": "subpath", "parameters": "( int beginIndex,\n                         int endIndex )", "modifiers": "@Override public", "return": "Path", "signature": "Path subpath( int beginIndex,\n                         int endIndex )", "full_signature": "@Override public Path subpath( int beginIndex,\n                         int endIndex )", "class_method_signature": "RootPath.subpath( int beginIndex,\n                         int endIndex )", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "( Path other )", "modifiers": "@Override public", "return": "int", "signature": "int compareTo( Path other )", "full_signature": "@Override public int compareTo( Path other )", "class_method_signature": "RootPath.compareTo( Path other )", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "( Object obj )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals( Object obj )", "full_signature": "@Override public boolean equals( Object obj )", "class_method_signature": "RootPath.equals( Object obj )", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RootPath.hashCode()", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/value/basic/RootPath.java"}, "focal_method": {"identifier": "pathsFromRoot", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Path>", "body": "@Override\n    public Iterator<Path> pathsFromRoot() {\n        return new SingleIterator<Path>(this);\n    }", "signature": "Iterator<Path> pathsFromRoot()", "full_signature": "@Override public Iterator<Path> pathsFromRoot()", "class_method_signature": "RootPath.pathsFromRoot()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}