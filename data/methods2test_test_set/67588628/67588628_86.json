{"test_class": {"identifier": "AbstractGraphTemplateTest", "superclass": "", "interfaces": "", "fields": [], "file": "artemis-graph/src/test/java/org/jnosql/artemis/graph/AbstractGraphTemplateTest.java"}, "test_case": {"identifier": "shouldReturnErrorInFindWhenIdIsNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnErrorInFindWhenIdIsNull() {\n        assertThrows(NullPointerException.class, () -> getGraphTemplate().find(null));\n    }", "signature": "void shouldReturnErrorInFindWhenIdIsNull()", "full_signature": "@Test public void shouldReturnErrorInFindWhenIdIsNull()", "class_method_signature": "AbstractGraphTemplateTest.shouldReturnErrorInFindWhenIdIsNull()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "find", "getGraphTemplate"]}, "focal_class": {"identifier": "AbstractGraphTemplate", "superclass": "", "interfaces": "implements GraphTemplate", "fields": [{"original_string": "private static final Function<GraphTraversal<?, ?>, GraphTraversal<Vertex, Vertex>> INITIAL_VERTEX =\n            g -> (GraphTraversal<Vertex, Vertex>) g;", "modifier": "private static final", "type": "Function<GraphTraversal<?, ?>, GraphTraversal<Vertex, Vertex>>", "declarator": "INITIAL_VERTEX =\n            g -> (GraphTraversal<Vertex, Vertex>) g", "var_name": "INITIAL_VERTEX"}, {"original_string": "private static final Function<GraphTraversal<?, ?>, GraphTraversal<Vertex, Edge>> INITIAL_EDGE =\n            g -> (GraphTraversal<Vertex, Edge>) g;", "modifier": "private static final", "type": "Function<GraphTraversal<?, ?>, GraphTraversal<Vertex, Edge>>", "declarator": "INITIAL_EDGE =\n            g -> (GraphTraversal<Vertex, Edge>) g", "var_name": "INITIAL_EDGE"}, {"original_string": "private GremlinExecutor gremlinExecutor;", "modifier": "private", "type": "GremlinExecutor", "declarator": "gremlinExecutor", "var_name": "gremlinExecutor"}], "methods": [{"identifier": "getGraph", "parameters": "()", "modifiers": "protected abstract", "return": "Graph", "signature": "Graph getGraph()", "full_signature": "protected abstract Graph getGraph()", "class_method_signature": "AbstractGraphTemplate.getGraph()", "testcase": false, "constructor": false}, {"identifier": "getClassMappings", "parameters": "()", "modifiers": "protected abstract", "return": "ClassMappings", "signature": "ClassMappings getClassMappings()", "full_signature": "protected abstract ClassMappings getClassMappings()", "class_method_signature": "AbstractGraphTemplate.getClassMappings()", "testcase": false, "constructor": false}, {"identifier": "getConverter", "parameters": "()", "modifiers": "protected abstract", "return": "GraphConverter", "signature": "GraphConverter getConverter()", "full_signature": "protected abstract GraphConverter getConverter()", "class_method_signature": "AbstractGraphTemplate.getConverter()", "testcase": false, "constructor": false}, {"identifier": "getFlow", "parameters": "()", "modifiers": "protected abstract", "return": "GraphWorkflow", "signature": "GraphWorkflow getFlow()", "full_signature": "protected abstract GraphWorkflow getFlow()", "class_method_signature": "AbstractGraphTemplate.getFlow()", "testcase": false, "constructor": false}, {"identifier": "getExecutor", "parameters": "()", "modifiers": "private", "return": "GremlinExecutor", "signature": "GremlinExecutor getExecutor()", "full_signature": "private GremlinExecutor getExecutor()", "class_method_signature": "AbstractGraphTemplate.getExecutor()", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(T entity)", "modifiers": "@Override public", "return": "T", "signature": "T insert(T entity)", "full_signature": "@Override public T insert(T entity)", "class_method_signature": "AbstractGraphTemplate.insert(T entity)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(T entity)", "modifiers": "@Override public", "return": "T", "signature": "T update(T entity)", "full_signature": "@Override public T update(T entity)", "class_method_signature": "AbstractGraphTemplate.update(T entity)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(T idValue)", "modifiers": "@Override public", "return": "void", "signature": "void delete(T idValue)", "full_signature": "@Override public void delete(T idValue)", "class_method_signature": "AbstractGraphTemplate.delete(T idValue)", "testcase": false, "constructor": false}, {"identifier": "deleteEdge", "parameters": "(T idEdge)", "modifiers": "@Override public", "return": "void", "signature": "void deleteEdge(T idEdge)", "full_signature": "@Override public void deleteEdge(T idEdge)", "class_method_signature": "AbstractGraphTemplate.deleteEdge(T idEdge)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(ID idValue)", "modifiers": "@Override public", "return": "Optional<T>", "signature": "Optional<T> find(ID idValue)", "full_signature": "@Override public Optional<T> find(ID idValue)", "class_method_signature": "AbstractGraphTemplate.find(ID idValue)", "testcase": false, "constructor": false}, {"identifier": "edge", "parameters": "(OUT outgoing, String label, IN incoming)", "modifiers": "@Override public", "return": "EdgeEntity", "signature": "EdgeEntity edge(OUT outgoing, String label, IN incoming)", "full_signature": "@Override public EdgeEntity edge(OUT outgoing, String label, IN incoming)", "class_method_signature": "AbstractGraphTemplate.edge(OUT outgoing, String label, IN incoming)", "testcase": false, "constructor": false}, {"identifier": "edge", "parameters": "(E edgeId)", "modifiers": "@Override public", "return": "Optional<EdgeEntity>", "signature": "Optional<EdgeEntity> edge(E edgeId)", "full_signature": "@Override public Optional<EdgeEntity> edge(E edgeId)", "class_method_signature": "AbstractGraphTemplate.edge(E edgeId)", "testcase": false, "constructor": false}, {"identifier": "getEdges", "parameters": "(T entity, Direction direction)", "modifiers": "@Override public", "return": "Collection<EdgeEntity>", "signature": "Collection<EdgeEntity> getEdges(T entity, Direction direction)", "full_signature": "@Override public Collection<EdgeEntity> getEdges(T entity, Direction direction)", "class_method_signature": "AbstractGraphTemplate.getEdges(T entity, Direction direction)", "testcase": false, "constructor": false}, {"identifier": "getEdges", "parameters": "(T entity, Direction direction, String... labels)", "modifiers": "@Override public", "return": "Collection<EdgeEntity>", "signature": "Collection<EdgeEntity> getEdges(T entity, Direction direction, String... labels)", "full_signature": "@Override public Collection<EdgeEntity> getEdges(T entity, Direction direction, String... labels)", "class_method_signature": "AbstractGraphTemplate.getEdges(T entity, Direction direction, String... labels)", "testcase": false, "constructor": false}, {"identifier": "getEdges", "parameters": "(T entity, Direction direction, Supplier<String>... labels)", "modifiers": "@SafeVarargs @Override public final", "return": "Collection<EdgeEntity>", "signature": "Collection<EdgeEntity> getEdges(T entity, Direction direction, Supplier<String>... labels)", "full_signature": "@SafeVarargs @Override public final Collection<EdgeEntity> getEdges(T entity, Direction direction, Supplier<String>... labels)", "class_method_signature": "AbstractGraphTemplate.getEdges(T entity, Direction direction, Supplier<String>... labels)", "testcase": false, "constructor": false}, {"identifier": "getEdgesById", "parameters": "(ID id, Direction direction, String... labels)", "modifiers": "@Override public", "return": "Collection<EdgeEntity>", "signature": "Collection<EdgeEntity> getEdgesById(ID id, Direction direction, String... labels)", "full_signature": "@Override public Collection<EdgeEntity> getEdgesById(ID id, Direction direction, String... labels)", "class_method_signature": "AbstractGraphTemplate.getEdgesById(ID id, Direction direction, String... labels)", "testcase": false, "constructor": false}, {"identifier": "getEdgesById", "parameters": "(ID id, Direction direction)", "modifiers": "@Override public", "return": "Collection<EdgeEntity>", "signature": "Collection<EdgeEntity> getEdgesById(ID id, Direction direction)", "full_signature": "@Override public Collection<EdgeEntity> getEdgesById(ID id, Direction direction)", "class_method_signature": "AbstractGraphTemplate.getEdgesById(ID id, Direction direction)", "testcase": false, "constructor": false}, {"identifier": "getEdgesById", "parameters": "(ID id, Direction direction, Supplier<String>... labels)", "modifiers": "@SafeVarargs @Override public final", "return": "Collection<EdgeEntity>", "signature": "Collection<EdgeEntity> getEdgesById(ID id, Direction direction, Supplier<String>... labels)", "full_signature": "@SafeVarargs @Override public final Collection<EdgeEntity> getEdgesById(ID id, Direction direction, Supplier<String>... labels)", "class_method_signature": "AbstractGraphTemplate.getEdgesById(ID id, Direction direction, Supplier<String>... labels)", "testcase": false, "constructor": false}, {"identifier": "getTraversalVertex", "parameters": "(Object... vertexIds)", "modifiers": "@Override public", "return": "VertexTraversal", "signature": "VertexTraversal getTraversalVertex(Object... vertexIds)", "full_signature": "@Override public VertexTraversal getTraversalVertex(Object... vertexIds)", "class_method_signature": "AbstractGraphTemplate.getTraversalVertex(Object... vertexIds)", "testcase": false, "constructor": false}, {"identifier": "getTraversalEdge", "parameters": "(Object... edgeIds)", "modifiers": "@Override public", "return": "EdgeTraversal", "signature": "EdgeTraversal getTraversalEdge(Object... edgeIds)", "full_signature": "@Override public EdgeTraversal getTraversalEdge(Object... edgeIds)", "class_method_signature": "AbstractGraphTemplate.getTraversalEdge(Object... edgeIds)", "testcase": false, "constructor": false}, {"identifier": "getTransaction", "parameters": "()", "modifiers": "@Override public", "return": "Transaction", "signature": "Transaction getTransaction()", "full_signature": "@Override public Transaction getTransaction()", "class_method_signature": "AbstractGraphTemplate.getTransaction()", "testcase": false, "constructor": false}, {"identifier": "query", "parameters": "(String gremlin)", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> query(String gremlin)", "full_signature": "@Override public List<T> query(String gremlin)", "class_method_signature": "AbstractGraphTemplate.query(String gremlin)", "testcase": false, "constructor": false}, {"identifier": "singleResult", "parameters": "(String gremlin)", "modifiers": "@Override public", "return": "Optional<T>", "signature": "Optional<T> singleResult(String gremlin)", "full_signature": "@Override public Optional<T> singleResult(String gremlin)", "class_method_signature": "AbstractGraphTemplate.singleResult(String gremlin)", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "(String gremlin)", "modifiers": "@Override public", "return": "PreparedStatement", "signature": "PreparedStatement prepare(String gremlin)", "full_signature": "@Override public PreparedStatement prepare(String gremlin)", "class_method_signature": "AbstractGraphTemplate.prepare(String gremlin)", "testcase": false, "constructor": false}, {"identifier": "getTraversal", "parameters": "()", "modifiers": "protected", "return": "GraphTraversalSource", "signature": "GraphTraversalSource getTraversal()", "full_signature": "protected GraphTraversalSource getTraversal()", "class_method_signature": "AbstractGraphTemplate.getTraversal()", "testcase": false, "constructor": false}, {"identifier": "getVertices", "parameters": "(Object id)", "modifiers": "protected", "return": "Iterator<Vertex>", "signature": "Iterator<Vertex> getVertices(Object id)", "full_signature": "protected Iterator<Vertex> getVertices(Object id)", "class_method_signature": "AbstractGraphTemplate.getVertices(Object id)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(String label)", "modifiers": "@Override public", "return": "long", "signature": "long count(String label)", "full_signature": "@Override public long count(String label)", "class_method_signature": "AbstractGraphTemplate.count(String label)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(Class<T> entityClass)", "modifiers": "@Override public", "return": "long", "signature": "long count(Class<T> entityClass)", "full_signature": "@Override public long count(Class<T> entityClass)", "class_method_signature": "AbstractGraphTemplate.count(Class<T> entityClass)", "testcase": false, "constructor": false}, {"identifier": "getEdgesByIdImpl", "parameters": "(ID id, Direction direction, String... labels)", "modifiers": "private", "return": "Collection<EdgeEntity>", "signature": "Collection<EdgeEntity> getEdgesByIdImpl(ID id, Direction direction, String... labels)", "full_signature": "private Collection<EdgeEntity> getEdgesByIdImpl(ID id, Direction direction, String... labels)", "class_method_signature": "AbstractGraphTemplate.getEdgesByIdImpl(ID id, Direction direction, String... labels)", "testcase": false, "constructor": false}, {"identifier": "getVertex", "parameters": "(T entity)", "modifiers": "private", "return": "Optional<Vertex>", "signature": "Optional<Vertex> getVertex(T entity)", "full_signature": "private Optional<Vertex> getVertex(T entity)", "class_method_signature": "AbstractGraphTemplate.getVertex(T entity)", "testcase": false, "constructor": false}, {"identifier": "getEdgesImpl", "parameters": "(T entity, Direction direction, String... labels)", "modifiers": "private", "return": "Collection<EdgeEntity>", "signature": "Collection<EdgeEntity> getEdgesImpl(T entity, Direction direction, String... labels)", "full_signature": "private Collection<EdgeEntity> getEdgesImpl(T entity, Direction direction, String... labels)", "class_method_signature": "AbstractGraphTemplate.getEdgesImpl(T entity, Direction direction, String... labels)", "testcase": false, "constructor": false}, {"identifier": "checkLabelsSupplier", "parameters": "(Supplier<String>[] labels)", "modifiers": "private", "return": "void", "signature": "void checkLabelsSupplier(Supplier<String>[] labels)", "full_signature": "private void checkLabelsSupplier(Supplier<String>[] labels)", "class_method_signature": "AbstractGraphTemplate.checkLabelsSupplier(Supplier<String>[] labels)", "testcase": false, "constructor": false}, {"identifier": "isIdNull", "parameters": "(T entity)", "modifiers": "private", "return": "boolean", "signature": "boolean isIdNull(T entity)", "full_signature": "private boolean isIdNull(T entity)", "class_method_signature": "AbstractGraphTemplate.isIdNull(T entity)", "testcase": false, "constructor": false}, {"identifier": "checkId", "parameters": "(T entity)", "modifiers": "private", "return": "void", "signature": "void checkId(T entity)", "full_signature": "private void checkId(T entity)", "class_method_signature": "AbstractGraphTemplate.checkId(T entity)", "testcase": false, "constructor": false}], "file": "artemis-graph/src/main/java/org/jnosql/artemis/graph/AbstractGraphTemplate.java"}, "focal_method": {"identifier": "find", "parameters": "(ID idValue)", "modifiers": "@Override public", "return": "Optional<T>", "body": "@Override\n    public <T, ID> Optional<T> find(ID idValue) {\n        requireNonNull(idValue, \"id is required\");\n        Optional<Vertex> vertex = getTraversal().V(idValue).tryNext();\n        return vertex.map(getConverter()::toEntity);\n    }", "signature": "Optional<T> find(ID idValue)", "full_signature": "@Override public Optional<T> find(ID idValue)", "class_method_signature": "AbstractGraphTemplate.find(ID idValue)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "tryNext", "V", "getTraversal", "map", "getConverter"]}, "repository": {"repo_id": 67588628, "url": "https://github.com/eclipse/jnosql-artemis", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 2612, "license": "licensed"}}