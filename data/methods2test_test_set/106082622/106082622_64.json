{"test_class": {"identifier": "UtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/manager/UtilsTest.java"}, "test_case": {"identifier": "testCalculateRanges_empty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCalculateRanges_empty() {\n        final List<String> result = Utils.calculateRanges(\n            Arrays.asList()\n        );\n\n        assertEquals(0, result.size());\n    }", "signature": "void testCalculateRanges_empty()", "full_signature": "@Test public void testCalculateRanges_empty()", "class_method_signature": "UtilsTest.testCalculateRanges_empty()", "testcase": true, "constructor": false, "invocations": ["calculateRanges", "asList", "assertEquals", "size"]}, "focal_class": {"identifier": "Utils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "calculateRanges", "parameters": "(final Collection<Integer> numbers)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> calculateRanges(final Collection<Integer> numbers)", "full_signature": "public static List<String> calculateRanges(final Collection<Integer> numbers)", "class_method_signature": "Utils.calculateRanges(final Collection<Integer> numbers)", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/manager/Utils.java"}, "focal_method": {"identifier": "calculateRanges", "parameters": "(final Collection<Integer> numbers)", "modifiers": "public static", "return": "List<String>", "body": "public static List<String> calculateRanges(final Collection<Integer> numbers) {\n        // Copy list\n        final List<Integer> sorted = new ArrayList<>();\n        sorted.addAll(numbers);\n\n        // Ensure numbers are sorted\n        Collections.sort(sorted, Comparator.naturalOrder());\n\n        // TODO filter duplicate numbers out?\n\n        final List<String> ranges = new ArrayList<>();\n\n        if (sorted.size() == 1) {\n            ranges.add(String.valueOf(sorted.get(0)));\n            return ranges;\n        }\n\n        final Iterator<Integer> numberIterator = numbers.iterator();\n        if (!numberIterator.hasNext()) {\n            return new ArrayList<>();\n        }\n\n        // Start calculating range?\n        Integer first = null;\n        Integer last = null;\n        do {\n            Integer number = numberIterator.next();\n\n            if (first == null) {\n                first = number;\n                last = number;\n\n                if (!numberIterator.hasNext()) {\n                    ranges.add(String.valueOf(first));\n                }\n                continue;\n            }\n\n            if (number.equals(last + 1)) {\n                last = number;\n\n                if (!numberIterator.hasNext()) {\n                    ranges.add(String.valueOf(first) + \"-\" + String.valueOf(last));\n                }\n                continue;\n            } else {\n                if (first.equals(last)) {\n                    ranges.add(String.valueOf(first));\n                } else {\n                    ranges.add(String.valueOf(first) + \"-\" + String.valueOf(last));\n                }\n                first = number;\n                last = number;\n\n                if (!numberIterator.hasNext()) {\n                    ranges.add(String.valueOf(first));\n                }\n                continue;\n            }\n\n\n        } while (numberIterator.hasNext());\n\n\n        return ranges;\n    }", "signature": "List<String> calculateRanges(final Collection<Integer> numbers)", "full_signature": "public static List<String> calculateRanges(final Collection<Integer> numbers)", "class_method_signature": "Utils.calculateRanges(final Collection<Integer> numbers)", "testcase": false, "constructor": false, "invocations": ["addAll", "sort", "naturalOrder", "size", "add", "valueOf", "get", "iterator", "hasNext", "next", "hasNext", "add", "valueOf", "equals", "hasNext", "add", "valueOf", "valueOf", "equals", "add", "valueOf", "add", "valueOf", "valueOf", "hasNext", "add", "valueOf", "hasNext"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}