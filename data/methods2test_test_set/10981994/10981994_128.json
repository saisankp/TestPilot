{"test_class": {"identifier": "HeaderTemplateTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}], "file": "core/src/test/java/feign/template/HeaderTemplateTest.java"}, "test_case": {"identifier": "it_should_throw_exception_when_value_is_null_for_chunks", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void it_should_throw_exception_when_value_is_null_for_chunks() {\n    HeaderTemplate.from(\"test\", null);\n    exception.expectMessage(\"values are required\");\n  }", "signature": "void it_should_throw_exception_when_value_is_null_for_chunks()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void it_should_throw_exception_when_value_is_null_for_chunks()", "class_method_signature": "HeaderTemplateTest.it_should_throw_exception_when_value_is_null_for_chunks()", "testcase": true, "constructor": false, "invocations": ["from", "expectMessage"]}, "focal_class": {"identifier": "HeaderTemplate", "superclass": "extends Template", "interfaces": "", "fields": [{"original_string": "private LinkedHashSet<String> values;", "modifier": "private", "type": "LinkedHashSet<String>", "declarator": "values", "var_name": "values"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}], "methods": [{"identifier": "from", "parameters": "(String name, List<TemplateChunk> chunks)", "modifiers": "public static", "return": "HeaderTemplate", "signature": "HeaderTemplate from(String name, List<TemplateChunk> chunks)", "full_signature": "public static HeaderTemplate from(String name, List<TemplateChunk> chunks)", "class_method_signature": "HeaderTemplate.from(String name, List<TemplateChunk> chunks)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, Iterable<String> values)", "modifiers": "public static", "return": "HeaderTemplate", "signature": "HeaderTemplate create(String name, Iterable<String> values)", "full_signature": "public static HeaderTemplate create(String name, Iterable<String> values)", "class_method_signature": "HeaderTemplate.create(String name, Iterable<String> values)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(HeaderTemplate headerTemplate, Iterable<String> values)", "modifiers": "public static", "return": "HeaderTemplate", "signature": "HeaderTemplate append(HeaderTemplate headerTemplate, Iterable<String> values)", "full_signature": "public static HeaderTemplate append(HeaderTemplate headerTemplate, Iterable<String> values)", "class_method_signature": "HeaderTemplate.append(HeaderTemplate headerTemplate, Iterable<String> values)", "testcase": false, "constructor": false}, {"identifier": "appendFrom", "parameters": "(HeaderTemplate headerTemplate,\n                                          List<TemplateChunk> chunks)", "modifiers": "public static", "return": "HeaderTemplate", "signature": "HeaderTemplate appendFrom(HeaderTemplate headerTemplate,\n                                          List<TemplateChunk> chunks)", "full_signature": "public static HeaderTemplate appendFrom(HeaderTemplate headerTemplate,\n                                          List<TemplateChunk> chunks)", "class_method_signature": "HeaderTemplate.appendFrom(HeaderTemplate headerTemplate,\n                                          List<TemplateChunk> chunks)", "testcase": false, "constructor": false}, {"identifier": "HeaderTemplate", "parameters": "(String template, String name, Iterable<String> values, Charset charset)", "modifiers": "private", "return": "", "signature": " HeaderTemplate(String template, String name, Iterable<String> values, Charset charset)", "full_signature": "private  HeaderTemplate(String template, String name, Iterable<String> values, Charset charset)", "class_method_signature": "HeaderTemplate.HeaderTemplate(String template, String name, Iterable<String> values, Charset charset)", "testcase": false, "constructor": true}, {"identifier": "HeaderTemplate", "parameters": "(String name, Charset charset, List<TemplateChunk> chunks)", "modifiers": "private", "return": "", "signature": " HeaderTemplate(String name, Charset charset, List<TemplateChunk> chunks)", "full_signature": "private  HeaderTemplate(String name, Charset charset, List<TemplateChunk> chunks)", "class_method_signature": "HeaderTemplate.HeaderTemplate(String name, Charset charset, List<TemplateChunk> chunks)", "testcase": false, "constructor": true}, {"identifier": "getValues", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getValues()", "full_signature": "public Collection<String> getValues()", "class_method_signature": "HeaderTemplate.getValues()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "HeaderTemplate.getName()", "testcase": false, "constructor": false}, {"identifier": "expand", "parameters": "(Map<String, ?> variables)", "modifiers": "@Override public", "return": "String", "signature": "String expand(Map<String, ?> variables)", "full_signature": "@Override public String expand(Map<String, ?> variables)", "class_method_signature": "HeaderTemplate.expand(Map<String, ?> variables)", "testcase": false, "constructor": false}], "file": "core/src/main/java/feign/template/HeaderTemplate.java"}, "focal_method": {"identifier": "from", "parameters": "(String name, List<TemplateChunk> chunks)", "modifiers": "public static", "return": "HeaderTemplate", "body": "public static HeaderTemplate from(String name, List<TemplateChunk> chunks) {\n    if (name == null || name.isEmpty()) {\n      throw new IllegalArgumentException(\"name is required.\");\n    }\n\n    if (chunks == null) {\n      throw new IllegalArgumentException(\"chunks are required.\");\n    }\n\n    return new HeaderTemplate(name, Util.UTF_8, chunks);\n  }", "signature": "HeaderTemplate from(String name, List<TemplateChunk> chunks)", "full_signature": "public static HeaderTemplate from(String name, List<TemplateChunk> chunks)", "class_method_signature": "HeaderTemplate.from(String name, List<TemplateChunk> chunks)", "testcase": false, "constructor": false, "invocations": ["isEmpty"]}, "repository": {"repo_id": 10981994, "url": "https://github.com/OpenFeign/feign", "stars": 5385, "created": "6/26/2013 11:28:16 PM +00:00", "updates": "2020-01-27T14:44:13+00:00", "fork": "False", "license": "licensed"}}