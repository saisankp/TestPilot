{"test_class": {"identifier": "ScheduledEvictionListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  CacheTask<Object, Object> cacheTask;", "modifier": "@Mock", "type": "CacheTask<Object, Object>", "declarator": "cacheTask", "var_name": "cacheTask"}, {"original_string": "@Mock\n  BlockingQueue<CacheTask<Object, Object>> cacheTasks;", "modifier": "@Mock", "type": "BlockingQueue<CacheTask<Object, Object>>", "declarator": "cacheTasks", "var_name": "cacheTasks"}, {"original_string": "ScheduledEvictionListener<Object, Object> asyncEvictionListener;", "modifier": "", "type": "ScheduledEvictionListener<Object, Object>", "declarator": "asyncEvictionListener", "var_name": "asyncEvictionListener"}], "file": "imcache-core/src/test/java/com/cetsoft/imcache/cache/async/ScheduledEvictionListenerTest.java"}, "test_case": {"identifier": "drainQueue", "parameters": "()", "modifiers": "@Test @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public", "return": "void", "body": "@Test\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void drainQueue() {\n    final TasksHolder tasksHolder = new TasksHolder();\n    doReturn(false).doReturn(true).when(cacheTasks).isEmpty();\n    doAnswer(new Answer() {\n      public Object answer(InvocationOnMock invocation) throws Throwable {\n        List<CacheTask<Object, Object>> tasks = (List<CacheTask<Object, Object>>) invocation\n            .getArguments()[0];\n        tasks.add(cacheTask);\n        tasksHolder.tasks = tasks;\n        return null;\n      }\n    }).when(cacheTasks).drainTo(anyList(), anyInt());\n    doNothing().when(asyncEvictionListener).save(anyList());\n    asyncEvictionListener.drainQueue();\n    assertEquals(cacheTask, tasksHolder.tasks.get(0));\n  }", "signature": "void drainQueue()", "full_signature": "@Test @SuppressWarnings({\"unchecked\", \"rawtypes\"}) public void drainQueue()", "class_method_signature": "ScheduledEvictionListenerTest.drainQueue()", "testcase": true, "constructor": false, "invocations": ["isEmpty", "when", "doReturn", "doReturn", "drainTo", "when", "doAnswer", "getArguments", "add", "anyList", "anyInt", "save", "when", "doNothing", "anyList", "drainQueue", "assertEquals", "get"]}, "focal_class": {"identifier": "ScheduledEvictionListener", "superclass": "extends QueuingEvictionListener<K, V>", "interfaces": "", "fields": [{"original_string": "public static final long DEFAULT_PERIOD = 3000;", "modifier": "public static final", "type": "long", "declarator": "DEFAULT_PERIOD = 3000", "var_name": "DEFAULT_PERIOD"}, {"original_string": "private static final AtomicInteger NO_OF_EVICTION_DRAINERS = new AtomicInteger();", "modifier": "private static final", "type": "AtomicInteger", "declarator": "NO_OF_EVICTION_DRAINERS = new AtomicInteger()", "var_name": "NO_OF_EVICTION_DRAINERS"}], "methods": [{"identifier": "ScheduledEvictionListener", "parameters": "()", "modifiers": "public", "return": "", "signature": " ScheduledEvictionListener()", "full_signature": "public  ScheduledEvictionListener()", "class_method_signature": "ScheduledEvictionListener.ScheduledEvictionListener()", "testcase": false, "constructor": true}, {"identifier": "ScheduledEvictionListener", "parameters": "(final int batchSize, final long period, final int queueSize)", "modifiers": "public", "return": "", "signature": " ScheduledEvictionListener(final int batchSize, final long period, final int queueSize)", "full_signature": "public  ScheduledEvictionListener(final int batchSize, final long period, final int queueSize)", "class_method_signature": "ScheduledEvictionListener.ScheduledEvictionListener(final int batchSize, final long period, final int queueSize)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(final long period, final int queueSize)", "modifiers": "protected", "return": "void", "signature": "void init(final long period, final int queueSize)", "full_signature": "protected void init(final long period, final int queueSize)", "class_method_signature": "ScheduledEvictionListener.init(final long period, final int queueSize)", "testcase": false, "constructor": false}, {"identifier": "drainQueue", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void drainQueue()", "full_signature": "@Override protected void drainQueue()", "class_method_signature": "ScheduledEvictionListener.drainQueue()", "testcase": false, "constructor": false}], "file": "imcache-core/src/main/java/com/cetsoft/imcache/cache/async/ScheduledEvictionListener.java"}, "focal_method": {"identifier": "drainQueue", "parameters": "()", "modifiers": "@Override protected", "return": "void", "body": "@Override\n  protected void drainQueue() {\n    while (!cacheTasks.isEmpty()) {\n      super.drainQueue();\n    }\n  }", "signature": "void drainQueue()", "full_signature": "@Override protected void drainQueue()", "class_method_signature": "ScheduledEvictionListener.drainQueue()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "drainQueue"]}, "repository": {"repo_id": 12849994, "url": "https://github.com/Cetsoft/imcache", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 121, "size": 1599, "license": "licensed"}}