{"test_class": {"identifier": "FileSystemActorTest", "superclass": "extends HelperedFileSystemTestBase", "interfaces": "", "fields": [{"original_string": "protected FileSystemActor<F, FS> actor;", "modifier": "protected", "type": "FileSystemActor<F, FS>", "declarator": "actor", "var_name": "actor"}, {"original_string": "protected FS fileSystem;", "modifier": "protected", "type": "FS", "declarator": "fileSystem", "var_name": "fileSystem"}, {"original_string": "protected INamedObject owner;", "modifier": "protected", "type": "INamedObject", "declarator": "owner", "var_name": "owner"}, {"original_string": "private IPipeLineSession session;", "modifier": "private", "type": "IPipeLineSession", "declarator": "session", "var_name": "session"}], "file": "core/src/test/java/nl/nn/adapterframework/filesystem/FileSystemActorTest.java"}, "test_case": {"identifier": "fileSystemActorTestConfigureNoAction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void fileSystemActorTestConfigureNoAction() throws Exception {\n\t\tthrown.expectMessage(\"action must be specified\");\n\t\tthrown.expectMessage(\"fake owner of FileSystemActor\");\n\t\tactor.configure(fileSystem,null,owner);\n\t}", "signature": "void fileSystemActorTestConfigureNoAction()", "full_signature": "@Test public void fileSystemActorTestConfigureNoAction()", "class_method_signature": "FileSystemActorTest.fileSystemActorTestConfigureNoAction()", "testcase": true, "constructor": false, "invocations": ["expectMessage", "expectMessage", "configure"]}, "focal_class": {"identifier": "FileSystemActor", "superclass": "", "interfaces": "implements IOutputStreamingSupport", "fields": [{"original_string": "protected Logger log = LogUtil.getLogger(this);", "modifier": "protected", "type": "Logger", "declarator": "log = LogUtil.getLogger(this)", "var_name": "log"}, {"original_string": "public final String ACTION_LIST=\"list\";", "modifier": "public final", "type": "String", "declarator": "ACTION_LIST=\"list\"", "var_name": "ACTION_LIST"}, {"original_string": "public final String ACTION_INFO=\"info\";", "modifier": "public final", "type": "String", "declarator": "ACTION_INFO=\"info\"", "var_name": "ACTION_INFO"}, {"original_string": "public final String ACTION_READ1=\"read\";", "modifier": "public final", "type": "String", "declarator": "ACTION_READ1=\"read\"", "var_name": "ACTION_READ1"}, {"original_string": "public final String ACTION_READ2=\"download\";", "modifier": "public final", "type": "String", "declarator": "ACTION_READ2=\"download\"", "var_name": "ACTION_READ2"}, {"original_string": "public final String ACTION_READ_DELETE=\"readDelete\";", "modifier": "public final", "type": "String", "declarator": "ACTION_READ_DELETE=\"readDelete\"", "var_name": "ACTION_READ_DELETE"}, {"original_string": "public final String ACTION_MOVE=\"move\";", "modifier": "public final", "type": "String", "declarator": "ACTION_MOVE=\"move\"", "var_name": "ACTION_MOVE"}, {"original_string": "public final String ACTION_COPY=\"copy\";", "modifier": "public final", "type": "String", "declarator": "ACTION_COPY=\"copy\"", "var_name": "ACTION_COPY"}, {"original_string": "public final String ACTION_DELETE=\"delete\";", "modifier": "public final", "type": "String", "declarator": "ACTION_DELETE=\"delete\"", "var_name": "ACTION_DELETE"}, {"original_string": "public final String ACTION_MKDIR=\"mkdir\";", "modifier": "public final", "type": "String", "declarator": "ACTION_MKDIR=\"mkdir\"", "var_name": "ACTION_MKDIR"}, {"original_string": "public final String ACTION_RMDIR=\"rmdir\";", "modifier": "public final", "type": "String", "declarator": "ACTION_RMDIR=\"rmdir\"", "var_name": "ACTION_RMDIR"}, {"original_string": "public final String ACTION_WRITE1=\"write\";", "modifier": "public final", "type": "String", "declarator": "ACTION_WRITE1=\"write\"", "var_name": "ACTION_WRITE1"}, {"original_string": "public final String ACTION_WRITE2=\"upload\";", "modifier": "public final", "type": "String", "declarator": "ACTION_WRITE2=\"upload\"", "var_name": "ACTION_WRITE2"}, {"original_string": "public final String ACTION_APPEND=\"append\";", "modifier": "public final", "type": "String", "declarator": "ACTION_APPEND=\"append\"", "var_name": "ACTION_APPEND"}, {"original_string": "public final String ACTION_RENAME=\"rename\";", "modifier": "public final", "type": "String", "declarator": "ACTION_RENAME=\"rename\"", "var_name": "ACTION_RENAME"}, {"original_string": "public final String PARAMETER_CONTENTS1=\"contents\";", "modifier": "public final", "type": "String", "declarator": "PARAMETER_CONTENTS1=\"contents\"", "var_name": "PARAMETER_CONTENTS1"}, {"original_string": "public final String PARAMETER_CONTENTS2=\"file\";", "modifier": "public final", "type": "String", "declarator": "PARAMETER_CONTENTS2=\"file\"", "var_name": "PARAMETER_CONTENTS2"}, {"original_string": "public final String PARAMETER_FILENAME=\"filename\";", "modifier": "public final", "type": "String", "declarator": "PARAMETER_FILENAME=\"filename\"", "var_name": "PARAMETER_FILENAME"}, {"original_string": "public final String PARAMETER_INPUTFOLDER=\"inputFolder\";", "modifier": "public final", "type": "String", "declarator": "PARAMETER_INPUTFOLDER=\"inputFolder\"", "var_name": "PARAMETER_INPUTFOLDER"}, {"original_string": "public final String PARAMETER_DESTINATION=\"destination\";", "modifier": "public final", "type": "String", "declarator": "PARAMETER_DESTINATION=\"destination\"", "var_name": "PARAMETER_DESTINATION"}, {"original_string": "public final String BASE64_ENCODE=\"encode\";", "modifier": "public final", "type": "String", "declarator": "BASE64_ENCODE=\"encode\"", "var_name": "BASE64_ENCODE"}, {"original_string": "public final String BASE64_DECODE=\"decode\";", "modifier": "public final", "type": "String", "declarator": "BASE64_DECODE=\"decode\"", "var_name": "BASE64_DECODE"}, {"original_string": "public final String[] ACTIONS_BASIC= {ACTION_LIST, ACTION_INFO, ACTION_READ1, ACTION_READ2, ACTION_READ_DELETE, ACTION_MOVE, ACTION_COPY, ACTION_DELETE, ACTION_MKDIR, ACTION_RMDIR};", "modifier": "public final", "type": "String[]", "declarator": "ACTIONS_BASIC= {ACTION_LIST, ACTION_INFO, ACTION_READ1, ACTION_READ2, ACTION_READ_DELETE, ACTION_MOVE, ACTION_COPY, ACTION_DELETE, ACTION_MKDIR, ACTION_RMDIR}", "var_name": "ACTIONS_BASIC"}, {"original_string": "public final String[] ACTIONS_WRITABLE_FS= {ACTION_WRITE1, ACTION_WRITE2, ACTION_APPEND, ACTION_RENAME};", "modifier": "public final", "type": "String[]", "declarator": "ACTIONS_WRITABLE_FS= {ACTION_WRITE1, ACTION_WRITE2, ACTION_APPEND, ACTION_RENAME}", "var_name": "ACTIONS_WRITABLE_FS"}, {"original_string": "private String action;", "modifier": "private", "type": "String", "declarator": "action", "var_name": "action"}, {"original_string": "private String filename;", "modifier": "private", "type": "String", "declarator": "filename", "var_name": "filename"}, {"original_string": "private String destination;", "modifier": "private", "type": "String", "declarator": "destination", "var_name": "destination"}, {"original_string": "private String inputFolder;", "modifier": "private", "type": "String", "declarator": "inputFolder", "var_name": "inputFolder"}, {"original_string": "private boolean createFolder;", "modifier": "private", "type": "boolean", "declarator": "createFolder", "var_name": "createFolder"}, {"original_string": "private String base64;", "modifier": "private", "type": "String", "declarator": "base64", "var_name": "base64"}, {"original_string": "private int rotateDays=0;", "modifier": "private", "type": "int", "declarator": "rotateDays=0", "var_name": "rotateDays"}, {"original_string": "private int rotateSize=0;", "modifier": "private", "type": "int", "declarator": "rotateSize=0", "var_name": "rotateSize"}, {"original_string": "private int numberOfBackups=0;", "modifier": "private", "type": "int", "declarator": "numberOfBackups=0", "var_name": "numberOfBackups"}, {"original_string": "private Set<String> actions = new LinkedHashSet<String>(Arrays.asList(ACTIONS_BASIC));", "modifier": "private", "type": "Set<String>", "declarator": "actions = new LinkedHashSet<String>(Arrays.asList(ACTIONS_BASIC))", "var_name": "actions"}, {"original_string": "private INamedObject owner;", "modifier": "private", "type": "INamedObject", "declarator": "owner", "var_name": "owner"}, {"original_string": "private FS fileSystem;", "modifier": "private", "type": "FS", "declarator": "fileSystem", "var_name": "fileSystem"}, {"original_string": "private ParameterList parameterList;", "modifier": "private", "type": "ParameterList", "declarator": "parameterList", "var_name": "parameterList"}], "methods": [{"identifier": "configure", "parameters": "(FS fileSystem, ParameterList parameterList, INamedObject owner)", "modifiers": "public", "return": "void", "signature": "void configure(FS fileSystem, ParameterList parameterList, INamedObject owner)", "full_signature": "public void configure(FS fileSystem, ParameterList parameterList, INamedObject owner)", "class_method_signature": "FileSystemActor.configure(FS fileSystem, ParameterList parameterList, INamedObject owner)", "testcase": false, "constructor": false}, {"identifier": "actionRequiresParameter", "parameters": "(INamedObject owner, ParameterList parameterList, String action, String parameter)", "modifiers": "protected", "return": "void", "signature": "void actionRequiresParameter(INamedObject owner, ParameterList parameterList, String action, String parameter)", "full_signature": "protected void actionRequiresParameter(INamedObject owner, ParameterList parameterList, String action, String parameter)", "class_method_signature": "FileSystemActor.actionRequiresParameter(INamedObject owner, ParameterList parameterList, String action, String parameter)", "testcase": false, "constructor": false}, {"identifier": "actionRequiresAtLeastOneOfTwoParametersOrAttribute", "parameters": "(INamedObject owner, ParameterList parameterList, String action, String parameter1, String parameter2, String attributeName, String attributeValue)", "modifiers": "protected", "return": "void", "signature": "void actionRequiresAtLeastOneOfTwoParametersOrAttribute(INamedObject owner, ParameterList parameterList, String action, String parameter1, String parameter2, String attributeName, String attributeValue)", "full_signature": "protected void actionRequiresAtLeastOneOfTwoParametersOrAttribute(INamedObject owner, ParameterList parameterList, String action, String parameter1, String parameter2, String attributeName, String attributeValue)", "class_method_signature": "FileSystemActor.actionRequiresAtLeastOneOfTwoParametersOrAttribute(INamedObject owner, ParameterList parameterList, String action, String parameter1, String parameter2, String attributeName, String attributeValue)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void open()", "full_signature": "public void open()", "class_method_signature": "FileSystemActor.open()", "testcase": false, "constructor": false}, {"identifier": "determineFilename", "parameters": "(Message input, ParameterValueList pvl)", "modifiers": "private", "return": "String", "signature": "String determineFilename(Message input, ParameterValueList pvl)", "full_signature": "private String determineFilename(Message input, ParameterValueList pvl)", "class_method_signature": "FileSystemActor.determineFilename(Message input, ParameterValueList pvl)", "testcase": false, "constructor": false}, {"identifier": "determineDestination", "parameters": "(ParameterValueList pvl)", "modifiers": "private", "return": "String", "signature": "String determineDestination(ParameterValueList pvl)", "full_signature": "private String determineDestination(ParameterValueList pvl)", "class_method_signature": "FileSystemActor.determineDestination(ParameterValueList pvl)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(Message input, ParameterValueList pvl)", "modifiers": "private", "return": "F", "signature": "F getFile(Message input, ParameterValueList pvl)", "full_signature": "private F getFile(Message input, ParameterValueList pvl)", "class_method_signature": "FileSystemActor.getFile(Message input, ParameterValueList pvl)", "testcase": false, "constructor": false}, {"identifier": "determineInputFoldername", "parameters": "(Message input, ParameterValueList pvl)", "modifiers": "private", "return": "String", "signature": "String determineInputFoldername(Message input, ParameterValueList pvl)", "full_signature": "private String determineInputFoldername(Message input, ParameterValueList pvl)", "class_method_signature": "FileSystemActor.determineInputFoldername(Message input, ParameterValueList pvl)", "testcase": false, "constructor": false}, {"identifier": "doAction", "parameters": "(Message input, ParameterValueList pvl, IPipeLineSession session)", "modifiers": "public", "return": "Object", "signature": "Object doAction(Message input, ParameterValueList pvl, IPipeLineSession session)", "full_signature": "public Object doAction(Message input, ParameterValueList pvl, IPipeLineSession session)", "class_method_signature": "FileSystemActor.doAction(Message input, ParameterValueList pvl, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "writeContentsToFile", "parameters": "(OutputStream out, Message input, ParameterValueList pvl)", "modifiers": "private", "return": "void", "signature": "void writeContentsToFile(OutputStream out, Message input, ParameterValueList pvl)", "full_signature": "private void writeContentsToFile(OutputStream out, Message input, ParameterValueList pvl)", "class_method_signature": "FileSystemActor.writeContentsToFile(OutputStream out, Message input, ParameterValueList pvl)", "testcase": false, "constructor": false}, {"identifier": "canProvideOutputStream", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean canProvideOutputStream()", "full_signature": "public boolean canProvideOutputStream()", "class_method_signature": "FileSystemActor.canProvideOutputStream()", "testcase": false, "constructor": false}, {"identifier": "supportsOutputStreamPassThrough", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsOutputStreamPassThrough()", "full_signature": "@Override public boolean supportsOutputStreamPassThrough()", "class_method_signature": "FileSystemActor.supportsOutputStreamPassThrough()", "testcase": false, "constructor": false}, {"identifier": "provideOutputStream", "parameters": "(IPipeLineSession session, IForwardTarget next)", "modifiers": "@SuppressWarnings(\"resource\") @Override public", "return": "MessageOutputStream", "signature": "MessageOutputStream provideOutputStream(IPipeLineSession session, IForwardTarget next)", "full_signature": "@SuppressWarnings(\"resource\") @Override public MessageOutputStream provideOutputStream(IPipeLineSession session, IForwardTarget next)", "class_method_signature": "FileSystemActor.provideOutputStream(IPipeLineSession session, IForwardTarget next)", "testcase": false, "constructor": false}, {"identifier": "getFileAsXmlBuilder", "parameters": "(F f, String rootElementName)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder getFileAsXmlBuilder(F f, String rootElementName)", "full_signature": "public XmlBuilder getFileAsXmlBuilder(F f, String rootElementName)", "class_method_signature": "FileSystemActor.getFileAsXmlBuilder(F f, String rootElementName)", "testcase": false, "constructor": false}, {"identifier": "addActions", "parameters": "(List<String> specificActions)", "modifiers": "protected", "return": "void", "signature": "void addActions(List<String> specificActions)", "full_signature": "protected void addActions(List<String> specificActions)", "class_method_signature": "FileSystemActor.addActions(List<String> specificActions)", "testcase": false, "constructor": false}, {"identifier": "setAction", "parameters": "(String action)", "modifiers": "@IbisDoc({\"1\", \"Possible values: \"+ACTION_LIST+\", \"+ACTION_INFO+\", \"+ACTION_READ1+\", \"+ACTION_READ_DELETE+\", \"+ACTION_MOVE+\", \"+ACTION_COPY+\", \"+ACTION_DELETE+\", \"+ACTION_MKDIR+\", \"+ACTION_RMDIR+\", \"+ACTION_WRITE1+\", \"+ACTION_APPEND+\", \"+ACTION_RENAME, \"\" }) public", "return": "void", "signature": "void setAction(String action)", "full_signature": "@IbisDoc({\"1\", \"Possible values: \"+ACTION_LIST+\", \"+ACTION_INFO+\", \"+ACTION_READ1+\", \"+ACTION_READ_DELETE+\", \"+ACTION_MOVE+\", \"+ACTION_COPY+\", \"+ACTION_DELETE+\", \"+ACTION_MKDIR+\", \"+ACTION_RMDIR+\", \"+ACTION_WRITE1+\", \"+ACTION_APPEND+\", \"+ACTION_RENAME, \"\" }) public void setAction(String action)", "class_method_signature": "FileSystemActor.setAction(String action)", "testcase": false, "constructor": false}, {"identifier": "getAction", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAction()", "full_signature": "public String getAction()", "class_method_signature": "FileSystemActor.getAction()", "testcase": false, "constructor": false}, {"identifier": "setInputFolder", "parameters": "(String inputFolder)", "modifiers": "@IbisDoc({\"2\", \"Folder that is scanned for files when action=\"+ACTION_LIST+\". When not set, the root is scanned\", \"\"}) public", "return": "void", "signature": "void setInputFolder(String inputFolder)", "full_signature": "@IbisDoc({\"2\", \"Folder that is scanned for files when action=\"+ACTION_LIST+\". When not set, the root is scanned\", \"\"}) public void setInputFolder(String inputFolder)", "class_method_signature": "FileSystemActor.setInputFolder(String inputFolder)", "testcase": false, "constructor": false}, {"identifier": "getInputFolder", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getInputFolder()", "full_signature": "public String getInputFolder()", "class_method_signature": "FileSystemActor.getInputFolder()", "testcase": false, "constructor": false}, {"identifier": "setCreateFolder", "parameters": "(boolean createFolder)", "modifiers": "@IbisDoc({\"3\", \"when set to <code>true</code>, the folder to move to is created if it does not exist\", \"false\"}) public", "return": "void", "signature": "void setCreateFolder(boolean createFolder)", "full_signature": "@IbisDoc({\"3\", \"when set to <code>true</code>, the folder to move to is created if it does not exist\", \"false\"}) public void setCreateFolder(boolean createFolder)", "class_method_signature": "FileSystemActor.setCreateFolder(boolean createFolder)", "testcase": false, "constructor": false}, {"identifier": "isCreateFolder", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCreateFolder()", "full_signature": "public boolean isCreateFolder()", "class_method_signature": "FileSystemActor.isCreateFolder()", "testcase": false, "constructor": false}, {"identifier": "setBase64", "parameters": "(String base64)", "modifiers": "@IbisDoc({\"4\", \"Can be set to 'encode' or 'decode' for actions \"+ACTION_READ1+\", \"+ACTION_WRITE1+\" and \"+ACTION_APPEND+\". When set the stream is base64 encoded or decoded, respectively\", \"\"}) public", "return": "void", "signature": "void setBase64(String base64)", "full_signature": "@IbisDoc({\"4\", \"Can be set to 'encode' or 'decode' for actions \"+ACTION_READ1+\", \"+ACTION_WRITE1+\" and \"+ACTION_APPEND+\". When set the stream is base64 encoded or decoded, respectively\", \"\"}) public void setBase64(String base64)", "class_method_signature": "FileSystemActor.setBase64(String base64)", "testcase": false, "constructor": false}, {"identifier": "getBase64", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getBase64()", "full_signature": "public String getBase64()", "class_method_signature": "FileSystemActor.getBase64()", "testcase": false, "constructor": false}, {"identifier": "setFilename", "parameters": "(String filename)", "modifiers": "@IbisDoc({\"5\", \"filename to operate on. When not set, the parameter \"+PARAMETER_FILENAME+\" is used. When that is not set either, the input is used\", \"\"}) public", "return": "void", "signature": "void setFilename(String filename)", "full_signature": "@IbisDoc({\"5\", \"filename to operate on. When not set, the parameter \"+PARAMETER_FILENAME+\" is used. When that is not set either, the input is used\", \"\"}) public void setFilename(String filename)", "class_method_signature": "FileSystemActor.setFilename(String filename)", "testcase": false, "constructor": false}, {"identifier": "getFilename", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFilename()", "full_signature": "public String getFilename()", "class_method_signature": "FileSystemActor.getFilename()", "testcase": false, "constructor": false}, {"identifier": "setDestination", "parameters": "(String destination)", "modifiers": "@IbisDoc({\"5\", \"destination for \"+ACTION_MOVE+\", \"+ACTION_COPY+\" or \"+ACTION_RENAME+\". If not set, the parameter \"+PARAMETER_DESTINATION+\" is used. When that is not set either, the input is used\", \"\"}) public", "return": "void", "signature": "void setDestination(String destination)", "full_signature": "@IbisDoc({\"5\", \"destination for \"+ACTION_MOVE+\", \"+ACTION_COPY+\" or \"+ACTION_RENAME+\". If not set, the parameter \"+PARAMETER_DESTINATION+\" is used. When that is not set either, the input is used\", \"\"}) public void setDestination(String destination)", "class_method_signature": "FileSystemActor.setDestination(String destination)", "testcase": false, "constructor": false}, {"identifier": "getDestination", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDestination()", "full_signature": "public String getDestination()", "class_method_signature": "FileSystemActor.getDestination()", "testcase": false, "constructor": false}, {"identifier": "setRotateDays", "parameters": "(int rotateDays)", "modifiers": "@IbisDoc({\"6\", \"for action=\"+ACTION_APPEND+\": when set to a positive number, the file is rotated each day, and this number of files is kept. The inputFolder must point to the directory where the file resides\", \"0\"}) public", "return": "void", "signature": "void setRotateDays(int rotateDays)", "full_signature": "@IbisDoc({\"6\", \"for action=\"+ACTION_APPEND+\": when set to a positive number, the file is rotated each day, and this number of files is kept. The inputFolder must point to the directory where the file resides\", \"0\"}) public void setRotateDays(int rotateDays)", "class_method_signature": "FileSystemActor.setRotateDays(int rotateDays)", "testcase": false, "constructor": false}, {"identifier": "getRotateDays", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRotateDays()", "full_signature": "public int getRotateDays()", "class_method_signature": "FileSystemActor.getRotateDays()", "testcase": false, "constructor": false}, {"identifier": "setRotateSize", "parameters": "(int rotateSize)", "modifiers": "@IbisDoc({\"7\", \"for action=\"+ACTION_APPEND+\": when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept. Size is specified in plain bytes, suffixes like 'K', 'M' or 'G' are not recognized. The inputFolder must point to the directory where the file resides\", \"0\"}) public", "return": "void", "signature": "void setRotateSize(int rotateSize)", "full_signature": "@IbisDoc({\"7\", \"for action=\"+ACTION_APPEND+\": when set to a positive number, the file is rotated when it has reached the specified size, and the number of files specified in numberOfBackups is kept. Size is specified in plain bytes, suffixes like 'K', 'M' or 'G' are not recognized. The inputFolder must point to the directory where the file resides\", \"0\"}) public void setRotateSize(int rotateSize)", "class_method_signature": "FileSystemActor.setRotateSize(int rotateSize)", "testcase": false, "constructor": false}, {"identifier": "getRotateSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRotateSize()", "full_signature": "public int getRotateSize()", "class_method_signature": "FileSystemActor.getRotateSize()", "testcase": false, "constructor": false}, {"identifier": "setNumberOfBackups", "parameters": "(int numberOfBackups)", "modifiers": "@IbisDoc({\"8\", \"for action=\"+ACTION_WRITE1+\", and for action=\"+ACTION_APPEND+\" with rotateSize>0: the number of backup files that is kept. The inputFolder must point to the directory where the file resides\", \"0\"}) public", "return": "void", "signature": "void setNumberOfBackups(int numberOfBackups)", "full_signature": "@IbisDoc({\"8\", \"for action=\"+ACTION_WRITE1+\", and for action=\"+ACTION_APPEND+\" with rotateSize>0: the number of backup files that is kept. The inputFolder must point to the directory where the file resides\", \"0\"}) public void setNumberOfBackups(int numberOfBackups)", "class_method_signature": "FileSystemActor.setNumberOfBackups(int numberOfBackups)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfBackups", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumberOfBackups()", "full_signature": "public int getNumberOfBackups()", "class_method_signature": "FileSystemActor.getNumberOfBackups()", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemActor.java"}, "focal_method": {"identifier": "configure", "parameters": "(FS fileSystem, ParameterList parameterList, INamedObject owner)", "modifiers": "public", "return": "void", "body": "public void configure(FS fileSystem, ParameterList parameterList, INamedObject owner) throws ConfigurationException {\n\t\tthis.owner=owner;\n\t\tthis.fileSystem=fileSystem;\n\t\tthis.parameterList=parameterList;\n\t\tif (fileSystem instanceof IWritableFileSystem) {\n\t\t\tactions.addAll(Arrays.asList(ACTIONS_WRITABLE_FS));\n\t\t}\n\n\t\tif (getAction() == null)\n\t\t\tthrow new ConfigurationException(owner.getClass().getSimpleName()+\" [\"+owner.getName()+\"]: action must be specified\");\n\t\tif (!actions.contains(getAction()))\n\t\t\tthrow new ConfigurationException(owner.getClass().getSimpleName()+\" [\"+owner.getName()+\"]: unknown or invalid action [\" + getAction() + \"] supported actions are \" + actions.toString() + \"\");\n\n\t\tif (getAction().equals(ACTION_READ2)) {\n\t\t\tConfigurationWarnings.add(owner, log, \"action [\"+ACTION_READ2+\"] has been replaced with [\"+ACTION_READ1+\"]\");\n\t\t\tsetAction(ACTION_READ1);\n\t\t}\n\t\tif (getAction().equals(ACTION_WRITE2)) {\n\t\t\tConfigurationWarnings.add(owner, log, \"action [\"+ACTION_WRITE2+\"] has been replaced with [\"+ACTION_WRITE1+\"]\");\n\t\t\tsetAction(ACTION_WRITE1);\n\t\t}\n\t\t\n\t\tif (StringUtils.isNotEmpty(getBase64()) && !(getBase64().equals(BASE64_ENCODE) || getBase64().equals(BASE64_DECODE))) {\n\t\t\tthrow new ConfigurationException(\"attribute 'base64' can have value '\"+BASE64_ENCODE+\"' or '\"+BASE64_DECODE+\"' or can be left empty\");\n\t\t}\n\t\t\n\t\tif (parameterList!=null && parameterList.findParameter(PARAMETER_CONTENTS2) != null && parameterList.findParameter(PARAMETER_CONTENTS1) == null) {\n\t\t\tConfigurationWarnings.add(owner, log, \"parameter [\"+PARAMETER_CONTENTS2+\"] has been replaced with [\"+PARAMETER_CONTENTS1+\"]\");\n\t\t\tparameterList.findParameter(PARAMETER_CONTENTS2).setName(PARAMETER_CONTENTS1);\n\t\t}\n\t\t\n\t\t//Check if necessarily parameters are available\n\t\tactionRequiresAtLeastOneOfTwoParametersOrAttribute(owner, parameterList, ACTION_WRITE1, PARAMETER_CONTENTS1, PARAMETER_FILENAME, \"filename\", getFilename());\n\t\tactionRequiresAtLeastOneOfTwoParametersOrAttribute(owner, parameterList, ACTION_MOVE,   PARAMETER_DESTINATION, null, \"destination\", getDestination());\n\t\tactionRequiresAtLeastOneOfTwoParametersOrAttribute(owner, parameterList, ACTION_COPY,   PARAMETER_DESTINATION, null, \"destination\", getDestination());\n\t\tactionRequiresAtLeastOneOfTwoParametersOrAttribute(owner, parameterList, ACTION_RENAME, PARAMETER_DESTINATION, null, \"destination\", getDestination());\n\t\t\n\t\tif (StringUtils.isNotEmpty(getInputFolder()) && parameterList!=null && parameterList.findParameter(PARAMETER_INPUTFOLDER) != null) {\n\t\t\tConfigurationWarnings.add(owner, log, \"inputFolder configured via attribute [inputFolder] as well as via parameter [\"+PARAMETER_INPUTFOLDER+\"], parameter will be ignored\");\n\t\t}\n\t\tif (!(fileSystem instanceof IWritableFileSystem)) {\n\t\t\tif (getNumberOfBackups()>0) {\n\t\t\t\tthrow new ConfigurationException(\"FileSystem [\"+ClassUtils.nameOf(fileSystem)+\"] does not support setting attribute 'numberOfBackups'\");\n\t\t\t}\n\t\t\tif (getRotateDays()>0) {\n\t\t\t\tthrow new ConfigurationException(\"FileSystem [\"+ClassUtils.nameOf(fileSystem)+\"] does not support setting attribute 'rotateDays'\");\n\t\t\t}\n\t\t}\n\t}", "signature": "void configure(FS fileSystem, ParameterList parameterList, INamedObject owner)", "full_signature": "public void configure(FS fileSystem, ParameterList parameterList, INamedObject owner)", "class_method_signature": "FileSystemActor.configure(FS fileSystem, ParameterList parameterList, INamedObject owner)", "testcase": false, "constructor": false, "invocations": ["addAll", "asList", "getAction", "getSimpleName", "getClass", "getName", "contains", "getAction", "getSimpleName", "getClass", "getName", "getAction", "toString", "equals", "getAction", "add", "setAction", "equals", "getAction", "add", "setAction", "isNotEmpty", "getBase64", "equals", "getBase64", "equals", "getBase64", "findParameter", "findParameter", "add", "setName", "findParameter", "actionRequiresAtLeastOneOfTwoParametersOrAttribute", "getFilename", "actionRequiresAtLeastOneOfTwoParametersOrAttribute", "getDestination", "actionRequiresAtLeastOneOfTwoParametersOrAttribute", "getDestination", "actionRequiresAtLeastOneOfTwoParametersOrAttribute", "getDestination", "isNotEmpty", "getInputFolder", "findParameter", "add", "getNumberOfBackups", "nameOf", "getRotateDays", "nameOf"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}