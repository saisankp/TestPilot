{"test_class": {"identifier": "JsonReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "json/src/test/java/tech/tablesaw/io/json/JsonReaderTest.java"}, "test_case": {"identifier": "arrayOfNestedObjects", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void arrayOfNestedObjects() {\n    String json =\n        \"[{\\\"a\\\":1453438800000,\\\"b\\\":{\\\"c\\\":-2.1448117025014}},{\\\"a\\\":1454043600000,\\\"b\\\":{\\\"c\\\":-2.9763153817574}},{\\\"a\\\":1454648400000,\\\"b\\\":{\\\"c\\\":-2.9545283436391}}]\";\n    Table table = Table.read().string(json, \"json\");\n    assertEquals(2, table.columnCount());\n    assertEquals(3, table.rowCount());\n    assertEquals(\"a\", table.column(0).name());\n    assertEquals(\"b.c\", table.column(1).name());\n    assertEquals(ColumnType.LONG, table.columnTypes()[0]);\n  }", "signature": "void arrayOfNestedObjects()", "full_signature": "@Test public void arrayOfNestedObjects()", "class_method_signature": "JsonReaderTest.arrayOfNestedObjects()", "testcase": true, "constructor": false, "invocations": ["string", "read", "assertEquals", "columnCount", "assertEquals", "rowCount", "assertEquals", "name", "column", "assertEquals", "name", "column", "assertEquals", "columnTypes"]}, "focal_class": {"identifier": "JsonReader", "superclass": "", "interfaces": "implements DataReader<JsonReadOptions>", "fields": [{"original_string": "private static final JsonReader INSTANCE = new JsonReader();", "modifier": "private static final", "type": "JsonReader", "declarator": "INSTANCE = new JsonReader()", "var_name": "INSTANCE"}, {"original_string": "private static final ObjectMapper mapper = new ObjectMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}], "methods": [{"identifier": "register", "parameters": "(ReaderRegistry registry)", "modifiers": "public static", "return": "void", "signature": "void register(ReaderRegistry registry)", "full_signature": "public static void register(ReaderRegistry registry)", "class_method_signature": "JsonReader.register(ReaderRegistry registry)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(JsonReadOptions options)", "modifiers": "@Override public", "return": "Table", "signature": "Table read(JsonReadOptions options)", "full_signature": "@Override public Table read(JsonReadOptions options)", "class_method_signature": "JsonReader.read(JsonReadOptions options)", "testcase": false, "constructor": false}, {"identifier": "convertArrayOfArrays", "parameters": "(JsonNode jsonObj, ReadOptions options)", "modifiers": "private", "return": "Table", "signature": "Table convertArrayOfArrays(JsonNode jsonObj, ReadOptions options)", "full_signature": "private Table convertArrayOfArrays(JsonNode jsonObj, ReadOptions options)", "class_method_signature": "JsonReader.convertArrayOfArrays(JsonNode jsonObj, ReadOptions options)", "testcase": false, "constructor": false}, {"identifier": "convertArrayOfObjects", "parameters": "(JsonNode jsonObj, ReadOptions options)", "modifiers": "private", "return": "Table", "signature": "Table convertArrayOfObjects(JsonNode jsonObj, ReadOptions options)", "full_signature": "private Table convertArrayOfObjects(JsonNode jsonObj, ReadOptions options)", "class_method_signature": "JsonReader.convertArrayOfObjects(JsonNode jsonObj, ReadOptions options)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(Source source)", "modifiers": "@Override public", "return": "Table", "signature": "Table read(Source source)", "full_signature": "@Override public Table read(Source source)", "class_method_signature": "JsonReader.read(Source source)", "testcase": false, "constructor": false}], "file": "json/src/main/java/tech/tablesaw/io/json/JsonReader.java"}, "focal_method": {"identifier": "read", "parameters": "(JsonReadOptions options)", "modifiers": "@Override public", "return": "Table", "body": "@Override\n  public Table read(JsonReadOptions options) throws IOException {\n    JsonNode jsonObj = mapper.readTree(options.source().createReader(null));\n    if (options.path() != null) {\n      jsonObj = jsonObj.at(options.path());\n    }\n    if (!jsonObj.isArray()) {\n      throw new IllegalStateException(\n          \"Only reading a JSON array is currently supported. The array must hold an array or object for each row.\");\n    }\n    if (jsonObj.size() == 0) {\n      return Table.create(options.tableName());\n    }\n\n    JsonNode firstNode = jsonObj.get(0);\n    if (firstNode.isArray()) {\n      return convertArrayOfArrays(jsonObj, options);\n    }\n    return convertArrayOfObjects(jsonObj, options);\n  }", "signature": "Table read(JsonReadOptions options)", "full_signature": "@Override public Table read(JsonReadOptions options)", "class_method_signature": "JsonReader.read(JsonReadOptions options)", "testcase": false, "constructor": false, "invocations": ["readTree", "createReader", "source", "path", "at", "path", "isArray", "size", "create", "tableName", "get", "isArray", "convertArrayOfArrays", "convertArrayOfObjects"]}, "repository": {"repo_id": 48880766, "url": "https://github.com/jtablesaw/tablesaw", "stars": 2021, "created": "1/1/2016 2:58:28 PM +00:00", "updates": "2020-01-24T23:26:07+00:00", "fork": "False", "license": "licensed"}}