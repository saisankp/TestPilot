{"test_class": {"identifier": "MatchingArchivedMessageResultsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Entity INITIATING_ENTITY = EntityImpl.parseUnchecked(\"juliet@capulet.lit/chamber\");", "modifier": "private static final", "type": "Entity", "declarator": "INITIATING_ENTITY = EntityImpl.parseUnchecked(\"juliet@capulet.lit/chamber\")", "var_name": "INITIATING_ENTITY"}, {"original_string": "private static final Entity ARCHIVE_ID = EntityImpl.parseUnchecked(\"juliet@capulet.lit\");", "modifier": "private static final", "type": "Entity", "declarator": "ARCHIVE_ID = EntityImpl.parseUnchecked(\"juliet@capulet.lit\")", "var_name": "ARCHIVE_ID"}, {"original_string": "private Query query;", "modifier": "private", "type": "Query", "declarator": "query", "var_name": "query"}, {"original_string": "private MessageStanza messageStanza;", "modifier": "private", "type": "MessageStanza", "declarator": "messageStanza", "var_name": "messageStanza"}], "file": "server/extensions/xep0313-mam/src/test/java/org/apache/vysper/xmpp/modules/extension/xep0313_mam/query/MatchingArchivedMessageResultsTest.java"}, "test_case": {"identifier": "testUncomplete", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUncomplete() throws IOException, SAXException {\n        SimpleArchivedMessage archivedMessage1 = new SimpleArchivedMessage(\"28482-98726-73623\",\n                ZonedDateTime.of(LocalDateTime.of(2010, 7, 10, 23, 8, 25), ZoneId.of(\"Z\")), messageStanza);\n        SimpleArchivedMessage archivedMessage2 = new SimpleArchivedMessage(\"09af3-cc343-b409f\",\n                ZonedDateTime.of(LocalDateTime.of(2010, 7, 10, 23, 8, 25), ZoneId.of(\"Z\")), messageStanza);\n\n        List<ArchivedMessage> archivedMessagesList = new ArrayList<>();\n        archivedMessagesList.add(archivedMessage1);\n        archivedMessagesList.add(archivedMessage2);\n\n        SimpleArchivedMessages archivedMessages = new SimpleArchivedMessages(archivedMessagesList, 0L, 3L);\n\n        MatchingArchivedMessageResults tested = new MatchingArchivedMessageResults(INITIATING_ENTITY, ARCHIVE_ID, query,\n                archivedMessages);\n\n        List<Stanza> responseStanzas = tested.toStanzas();\n        assertEquals(3, responseStanzas.size());\n\n        StanzaAssert.assertEquals(StanzaBuilder\n                .createClone(XMLParserUtil.parseRequiredDocument(\"<message to='juliet@capulet.lit/chamber'>\"\n                        + \"  <result xmlns='urn:xmpp:mam:2' queryid='f27' id='28482-98726-73623'>\"\n                        + \"    <forwarded xmlns='urn:xmpp:forward:0'>\"\n                        + \"      <delay xmlns='urn:xmpp:delay' stamp='2010-07-10T23:08:25Z'/>\"\n                        + \"      <message xmlns='jabber:client' from='witch@shakespeare.lit' to='macbeth@shakespeare.lit'>\"\n                        + \"        <body>Hail to thee</body>\"\n                        + \"        <stanza-id xmlns='urn:xmpp:sid:0' by='juliet@capulet.lit' id='28482-98726-73623'/>\"\n                        + \"</message></forwarded></result></message>\"), true, null)\n                .build(), responseStanzas.get(0));\n\n        StanzaAssert.assertEquals(StanzaBuilder\n                .createClone(XMLParserUtil.parseRequiredDocument(\"<message to='juliet@capulet.lit/chamber'>\"\n                        + \"  <result xmlns='urn:xmpp:mam:2' queryid='f27' id='09af3-cc343-b409f'>\"\n                        + \"    <forwarded xmlns='urn:xmpp:forward:0'>\"\n                        + \"      <delay xmlns='urn:xmpp:delay' stamp='2010-07-10T23:08:25Z'/>\"\n                        + \"      <message xmlns='jabber:client' from='witch@shakespeare.lit' to='macbeth@shakespeare.lit'>\"\n                        + \"        <body>Hail to thee</body>\"\n                        + \"        <stanza-id xmlns='urn:xmpp:sid:0' by='juliet@capulet.lit' id='09af3-cc343-b409f'/>\"\n                        + \"</message></forwarded></result></message>\"), true, null)\n                .build(), responseStanzas.get(1));\n\n        StanzaAssert.assertEquals(\n                StanzaBuilder.createClone(XMLParserUtil\n                        .parseRequiredDocument(\"<iq type='result' id='juliet1'><fin xmlns='urn:xmpp:mam:2'>\"\n                                + \"    <set xmlns='http://jabber.org/protocol/rsm'>\"\n                                + \"      <count>3</count><first index='0'>28482-98726-73623</first>\"\n                                + \"      <last>09af3-cc343-b409f</last></set></fin></iq>\"),\n                        true, null).build(),\n                responseStanzas.get(2));\n    }", "signature": "void testUncomplete()", "full_signature": "@Test public void testUncomplete()", "class_method_signature": "MatchingArchivedMessageResultsTest.testUncomplete()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "of", "of", "of", "add", "add", "toStanzas", "assertEquals", "size", "assertEquals", "build", "createClone", "parseRequiredDocument", "get", "assertEquals", "build", "createClone", "parseRequiredDocument", "get", "assertEquals", "build", "createClone", "parseRequiredDocument", "get"]}, "focal_class": {"identifier": "MatchingArchivedMessageResults", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Entity initiatingEntity;", "modifier": "private final", "type": "Entity", "declarator": "initiatingEntity", "var_name": "initiatingEntity"}, {"original_string": "private final Entity archiveId;", "modifier": "private final", "type": "Entity", "declarator": "archiveId", "var_name": "archiveId"}, {"original_string": "private final Query query;", "modifier": "private final", "type": "Query", "declarator": "query", "var_name": "query"}, {"original_string": "private final ArchivedMessages archivedMessages;", "modifier": "private final", "type": "ArchivedMessages", "declarator": "archivedMessages", "var_name": "archivedMessages"}], "methods": [{"identifier": "MatchingArchivedMessageResults", "parameters": "(Entity initiatingEntity, Entity archiveId, Query query,\n            ArchivedMessages archivedMessages)", "modifiers": "public", "return": "", "signature": " MatchingArchivedMessageResults(Entity initiatingEntity, Entity archiveId, Query query,\n            ArchivedMessages archivedMessages)", "full_signature": "public  MatchingArchivedMessageResults(Entity initiatingEntity, Entity archiveId, Query query,\n            ArchivedMessages archivedMessages)", "class_method_signature": "MatchingArchivedMessageResults.MatchingArchivedMessageResults(Entity initiatingEntity, Entity archiveId, Query query,\n            ArchivedMessages archivedMessages)", "testcase": false, "constructor": true}, {"identifier": "toStanzas", "parameters": "()", "modifiers": "public", "return": "List<Stanza>", "signature": "List<Stanza> toStanzas()", "full_signature": "public List<Stanza> toStanzas()", "class_method_signature": "MatchingArchivedMessageResults.toStanzas()", "testcase": false, "constructor": false}, {"identifier": "buildResultIq", "parameters": "()", "modifiers": "private", "return": "Stanza", "signature": "Stanza buildResultIq()", "full_signature": "private Stanza buildResultIq()", "class_method_signature": "MatchingArchivedMessageResults.buildResultIq()", "testcase": false, "constructor": false}, {"identifier": "buildSet", "parameters": "()", "modifiers": "private", "return": "Set", "signature": "Set buildSet()", "full_signature": "private Set buildSet()", "class_method_signature": "MatchingArchivedMessageResults.buildSet()", "testcase": false, "constructor": false}], "file": "server/extensions/xep0313-mam/src/main/java/org/apache/vysper/xmpp/modules/extension/xep0313_mam/query/MatchingArchivedMessageResults.java"}, "focal_method": {"identifier": "toStanzas", "parameters": "()", "modifiers": "public", "return": "List<Stanza>", "body": "public List<Stanza> toStanzas() {\n        List<Stanza> stanzas = new ArrayList<>();\n        archivedMessages.list().stream().map(archivedMessage -> new MatchingArchivedMessageResult(initiatingEntity,\n                archiveId, query, archivedMessage)).map(MatchingArchivedMessageResult::toStanza).forEach(stanzas::add);\n        stanzas.add(buildResultIq());\n        return stanzas;\n    }", "signature": "List<Stanza> toStanzas()", "full_signature": "public List<Stanza> toStanzas()", "class_method_signature": "MatchingArchivedMessageResults.toStanzas()", "testcase": false, "constructor": false, "invocations": ["forEach", "map", "map", "stream", "list", "add", "buildResultIq"]}, "repository": {"repo_id": 165370485, "url": "https://github.com/apache/mina-vysper", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 29305, "license": "licensed"}}