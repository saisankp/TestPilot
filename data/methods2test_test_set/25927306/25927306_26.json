{"test_class": {"identifier": "MessageFrameDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MessageFrameDecoder decoder = new MessageFrameDecoder();", "modifier": "private final", "type": "MessageFrameDecoder", "declarator": "decoder = new MessageFrameDecoder()", "var_name": "decoder"}], "file": "core/src/test/java/org/ldaptive/transport/netty/MessageFrameDecoderTest.java"}, "test_case": {"identifier": "decode", "parameters": "(final byte[] berValue, final boolean frame)", "modifiers": "@Test(groups = \"transport\", dataProvider = \"response\") public", "return": "void", "body": "@Test(groups = \"transport\", dataProvider = \"response\")\n  public void decode(final byte[] berValue, final boolean frame)\n    throws Exception\n  {\n    final List<Object> out = new ArrayList<>();\n    decoder.decode(null, Unpooled.wrappedBuffer(berValue), out);\n    Assert.assertEquals(!out.isEmpty(), frame);\n    if (frame) {\n      Assert.assertEquals(((ByteBuf) out.get(0)).array(), berValue);\n    }\n  }", "signature": "void decode(final byte[] berValue, final boolean frame)", "full_signature": "@Test(groups = \"transport\", dataProvider = \"response\") public void decode(final byte[] berValue, final boolean frame)", "class_method_signature": "MessageFrameDecoderTest.decode(final byte[] berValue, final boolean frame)", "testcase": true, "constructor": false, "invocations": ["decode", "wrappedBuffer", "assertEquals", "isEmpty", "assertEquals", "array", "get"]}, "focal_class": {"identifier": "MessageFrameDecoder", "superclass": "extends ByteToMessageDecoder", "interfaces": "", "fields": [{"original_string": "protected final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "protected final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}], "methods": [{"identifier": "decode", "parameters": "(final ChannelHandlerContext ctx, final ByteBuf in, final List<Object> out)", "modifiers": "@Override protected", "return": "void", "signature": "void decode(final ChannelHandlerContext ctx, final ByteBuf in, final List<Object> out)", "full_signature": "@Override protected void decode(final ChannelHandlerContext ctx, final ByteBuf in, final List<Object> out)", "class_method_signature": "MessageFrameDecoder.decode(final ChannelHandlerContext ctx, final ByteBuf in, final List<Object> out)", "testcase": false, "constructor": false}, {"identifier": "readMessageLength", "parameters": "(final DERBuffer buffer)", "modifiers": "private", "return": "int", "signature": "int readMessageLength(final DERBuffer buffer)", "full_signature": "private int readMessageLength(final DERBuffer buffer)", "class_method_signature": "MessageFrameDecoder.readMessageLength(final DERBuffer buffer)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/transport/netty/MessageFrameDecoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(final ChannelHandlerContext ctx, final ByteBuf in, final List<Object> out)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n  protected void decode(final ChannelHandlerContext ctx, final ByteBuf in, final List<Object> out)\n  {\n    logger.trace(\"decoding {} bytes from {}\", in.readableBytes(), in);\n    if (in.readableBytes() <= 2) {\n      return;\n    }\n\n    final int readerIdx = in.readerIndex();\n    final int writerIdx = in.writerIndex();\n    int len = 0;\n    try {\n      final DERBuffer buffer = new NettyDERBuffer(in.readSlice(in.readableBytes()));\n      len = readMessageLength(buffer);\n    } finally {\n      logger.trace(\"decoded message length of {} for {}\", len, in);\n      // return the reader and writer indexes back to their initial position\n      in.setIndex(readerIdx, writerIdx);\n    }\n    if (len > 0) {\n      logger.trace(\"read enough bytes from {} to decode message\", in);\n      out.add(in.readRetainedSlice(len));\n      if (ctx != null) {\n        ctx.fireUserEventTriggered(NettyConnection.MessageStatus.READ);\n      }\n    } else {\n      logger.trace(\"could not read enough bytes from {} to decode message\", in);\n    }\n  }", "signature": "void decode(final ChannelHandlerContext ctx, final ByteBuf in, final List<Object> out)", "full_signature": "@Override protected void decode(final ChannelHandlerContext ctx, final ByteBuf in, final List<Object> out)", "class_method_signature": "MessageFrameDecoder.decode(final ChannelHandlerContext ctx, final ByteBuf in, final List<Object> out)", "testcase": false, "constructor": false, "invocations": ["trace", "readableBytes", "readableBytes", "readerIndex", "writerIndex", "readSlice", "readableBytes", "readMessageLength", "trace", "setIndex", "trace", "add", "readRetainedSlice", "fireUserEventTriggered", "trace"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}