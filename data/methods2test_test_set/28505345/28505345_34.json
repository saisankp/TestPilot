{"test_class": {"identifier": "HeadersTest", "superclass": "", "interfaces": "", "fields": [], "file": "jus-java/src/test/java/io/apptik/comm/jus/http/HeadersTest.java"}, "test_case": {"identifier": "ofThrowsOnNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void ofThrowsOnNull() {\n    try {\n      Headers.of(\"User-Agent\", null);\n      fail();\n    } catch (IllegalArgumentException expected) {\n    }\n  }", "signature": "void ofThrowsOnNull()", "full_signature": "@Test public void ofThrowsOnNull()", "class_method_signature": "HeadersTest.ofThrowsOnNull()", "testcase": true, "constructor": false, "invocations": ["of", "fail"]}, "focal_class": {"identifier": "Headers", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String[] namesAndValues;", "modifier": "private final", "type": "String[]", "declarator": "namesAndValues", "var_name": "namesAndValues"}], "methods": [{"identifier": "Headers", "parameters": "(Builder builder)", "modifiers": "private", "return": "", "signature": " Headers(Builder builder)", "full_signature": "private  Headers(Builder builder)", "class_method_signature": "Headers.Headers(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "Headers", "parameters": "(String[] namesAndValues)", "modifiers": "private", "return": "", "signature": " Headers(String[] namesAndValues)", "full_signature": "private  Headers(String[] namesAndValues)", "class_method_signature": "Headers.Headers(String[] namesAndValues)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(String name)", "modifiers": "public", "return": "String", "signature": "String get(String name)", "full_signature": "public String get(String name)", "class_method_signature": "Headers.get(String name)", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "(String name)", "modifiers": "public", "return": "Date", "signature": "Date getDate(String name)", "full_signature": "public Date getDate(String name)", "class_method_signature": "Headers.getDate(String name)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "Headers.size()", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "(int index)", "modifiers": "public", "return": "String", "signature": "String name(int index)", "full_signature": "public String name(int index)", "class_method_signature": "Headers.name(int index)", "testcase": false, "constructor": false}, {"identifier": "value", "parameters": "(int index)", "modifiers": "public", "return": "String", "signature": "String value(int index)", "full_signature": "public String value(int index)", "class_method_signature": "Headers.value(int index)", "testcase": false, "constructor": false}, {"identifier": "names", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> names()", "full_signature": "public Set<String> names()", "class_method_signature": "Headers.names()", "testcase": false, "constructor": false}, {"identifier": "values", "parameters": "(String name)", "modifiers": "public", "return": "List<String>", "signature": "List<String> values(String name)", "full_signature": "public List<String> values(String name)", "class_method_signature": "Headers.values(String name)", "testcase": false, "constructor": false}, {"identifier": "newBuilder", "parameters": "()", "modifiers": "public", "return": "Builder", "signature": "Builder newBuilder()", "full_signature": "public Builder newBuilder()", "class_method_signature": "Headers.newBuilder()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "Headers.equals(Object other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Headers.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Headers.toString()", "testcase": false, "constructor": false}, {"identifier": "toMultimap", "parameters": "()", "modifiers": "public", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> toMultimap()", "full_signature": "public Map<String, List<String>> toMultimap()", "class_method_signature": "Headers.toMultimap()", "testcase": false, "constructor": false}, {"identifier": "toMap", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> toMap()", "full_signature": "public Map<String, String> toMap()", "class_method_signature": "Headers.toMap()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String[] namesAndValues, String name)", "modifiers": "private static", "return": "String", "signature": "String get(String[] namesAndValues, String name)", "full_signature": "private static String get(String[] namesAndValues, String name)", "class_method_signature": "Headers.get(String[] namesAndValues, String name)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(String... namesAndValues)", "modifiers": "public static", "return": "Headers", "signature": "Headers of(String... namesAndValues)", "full_signature": "public static Headers of(String... namesAndValues)", "class_method_signature": "Headers.of(String... namesAndValues)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(Map<String, String> headers)", "modifiers": "public static", "return": "Headers", "signature": "Headers of(Map<String, String> headers)", "full_signature": "public static Headers of(Map<String, String> headers)", "class_method_signature": "Headers.of(Map<String, String> headers)", "testcase": false, "constructor": false}, {"identifier": "ofMMap", "parameters": "(Map<String, List<String>> headers)", "modifiers": "public static", "return": "Headers", "signature": "Headers ofMMap(Map<String, List<String>> headers)", "full_signature": "public static Headers ofMMap(Map<String, List<String>> headers)", "class_method_signature": "Headers.ofMMap(Map<String, List<String>> headers)", "testcase": false, "constructor": false}], "file": "jus-java/src/main/java/io/apptik/comm/jus/http/Headers.java"}, "focal_method": {"identifier": "of", "parameters": "(String... namesAndValues)", "modifiers": "public static", "return": "Headers", "body": "public static Headers of(String... namesAndValues) {\n        if (namesAndValues == null) throw new NullPointerException(\"namesAndValues == null\");\n        if (namesAndValues.length % 2 != 0) {\n            throw new IllegalArgumentException(\"Expected alternating header names and values\");\n        }\n\n        // Make a defensive copy and clean it up.\n        namesAndValues = namesAndValues.clone();\n        for (int i = 0; i < namesAndValues.length; i++) {\n            if (namesAndValues[i] == null) throw new IllegalArgumentException(\"Headers cannot be null\");\n            namesAndValues[i] = namesAndValues[i].trim();\n        }\n\n        // Check for malformed headers.\n        for (int i = 0; i < namesAndValues.length; i += 2) {\n            String name = namesAndValues[i];\n            String value = namesAndValues[i + 1];\n            if (name.length() == 0 || name.indexOf('\\0') != -1 || value.indexOf('\\0') != -1) {\n                throw new IllegalArgumentException(\"Unexpected header: \" + name + \": \" + value);\n            }\n        }\n\n        return new Headers(namesAndValues);\n    }", "signature": "Headers of(String... namesAndValues)", "full_signature": "public static Headers of(String... namesAndValues)", "class_method_signature": "Headers.of(String... namesAndValues)", "testcase": false, "constructor": false, "invocations": ["clone", "trim", "length", "indexOf", "indexOf"]}, "repository": {"repo_id": 28505345, "url": "https://github.com/apptik/jus", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 56, "size": 2057, "license": "licensed"}}