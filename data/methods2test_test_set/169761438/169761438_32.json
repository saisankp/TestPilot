{"test_class": {"identifier": "VenServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Long start = System.currentTimeMillis();", "modifier": "private", "type": "Long", "declarator": "start = System.currentTimeMillis()", "var_name": "start"}, {"original_string": "@Resource\n\tprivate VenService venService;", "modifier": "@Resource\n\tprivate", "type": "VenService", "declarator": "venService", "var_name": "venService"}, {"original_string": "@Resource\n\tprivate VenResourceService venResourceService;", "modifier": "@Resource\n\tprivate", "type": "VenResourceService", "declarator": "venResourceService", "var_name": "venResourceService"}, {"original_string": "@Resource\n\tprivate VenMarketContextService venMarketContextService;", "modifier": "@Resource\n\tprivate", "type": "VenMarketContextService", "declarator": "venMarketContextService", "var_name": "venMarketContextService"}, {"original_string": "@Resource\n\tprivate VenGroupService venGroupService;", "modifier": "@Resource\n\tprivate", "type": "VenGroupService", "declarator": "venGroupService", "var_name": "venGroupService"}, {"original_string": "@Resource\n\tprivate DemandResponseEventService demandResponseEventService;", "modifier": "@Resource\n\tprivate", "type": "DemandResponseEventService", "declarator": "demandResponseEventService", "var_name": "demandResponseEventService"}], "file": "OpenADRServerVTNCommon/src/test/java/com/avob/openadr/server/common/vtn/service/VenServiceTest.java"}, "test_case": {"identifier": "searchTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void searchTest() {\n\t\tList<Ven> vens = new ArrayList<>();\n\t\tList<DemandResponseEvent> events = new ArrayList<>();\n\t\tVenMarketContext marketContext = null;\n\t\tVen ven1;\n\t\tVen ven2;\n\t\tVen ven3;\n\t\tDemandResponseEvent event1 = null;\n\t\tDemandResponseEvent event2 = null;\n\t\tDemandResponseEvent event3 = null;\n\n\t\tString marketContextName = \"http://oadr.avob.com\";\n\t\tmarketContext = venMarketContextService.prepare(new VenMarketContextDto(marketContextName));\n\t\tvenMarketContextService.save(marketContext);\n\n\t\tString groupName = \"group1\";\n\t\tVenGroup group = venGroupService.prepare(new VenGroupDto(groupName));\n\t\tvenGroupService.save(group);\n\n\t\tven1 = venService.prepare(\"ven1\");\n\t\tven1.setVenMarketContexts(Sets.newHashSet(marketContext));\n\t\tven1.setVenGroup(Sets.newHashSet(group));\n\t\tven1 = venService.save(ven1);\n\t\tvens.add(ven1);\n\n\t\tven2 = venService.prepare(\"ven2\");\n\t\tven2.setVenMarketContexts(Sets.newHashSet(marketContext));\n\t\tven2 = venService.save(ven2);\n\t\tvens.add(ven2);\n\n\t\tven3 = venService.prepare(\"ven3\");\n\t\tven3.setVenMarketContexts(Sets.newHashSet(marketContext));\n\t\tven3.setVenGroup(Sets.newHashSet(group));\n\t\tven3 = venService.save(ven3);\n\t\tvens.add(ven3);\n\n\t\tString duration = \"PT1H\";\n\t\tString notificationDuration = \"P1D\";\n\n\t\tDemandResponseEventStateEnum state = DemandResponseEventStateEnum.ACTIVE;\n\n\t\tDemandResponseEventSignalDto signal = new DemandResponseEventSignalDto();\n\t\tsignal.setCurrentValue(DemandResponseEventSimpleValueEnum.SIMPLE_SIGNAL_PAYLOAD_HIGH.getValue());\n\t\tsignal.setSignalName(\"SIMPLE\");\n\t\tsignal.setSignalType(\"level\");\n\n\t\tDemandResponseEventCreateDto dto = new DemandResponseEventCreateDto();\n\t\tdto.getDescriptor().setState(state);\n\t\tdto.getDescriptor().setOadrProfile(DemandResponseEventOadrProfileEnum.OADR20B);\n\t\tdto.getActivePeriod().setStart(start);\n\t\tdto.getDescriptor().setMarketContext(marketContext.getName());\n\t\tdto.getActivePeriod().setDuration(duration);\n\t\tdto.getActivePeriod().setNotificationDuration(notificationDuration);\n\t\tdto.getTargets().add(new DemandResponseEventTargetDto(\"ven\", \"ven1\"));\n\t\tdto.getTargets().add(new DemandResponseEventTargetDto(\"ven\", \"ven2\"));\n\t\tdto.getSignals().add(signal);\n\t\tdto.setPublished(true);\n\t\tevent1 = demandResponseEventService.create(dto);\n\t\tevents.add(event1);\n\n\t\tdto = new DemandResponseEventCreateDto();\n\t\tdto.getDescriptor().setState(DemandResponseEventStateEnum.CANCELLED);\n\t\tdto.getDescriptor().setOadrProfile(DemandResponseEventOadrProfileEnum.OADR20B);\n\t\tdto.getActivePeriod().setStart(start);\n\t\tdto.getDescriptor().setMarketContext(marketContext.getName());\n\t\tdto.getActivePeriod().setDuration(duration);\n\t\tdto.getActivePeriod().setNotificationDuration(notificationDuration);\n\t\tdto.getActivePeriod().setRampUpDuration(\"PT1H\");\n\t\tdto.getActivePeriod().setRecoveryDuration(\"PT1H\");\n\t\tdto.getDescriptor().setVtnComment(\"comment\");\n\t\tdto.getTargets().add(new DemandResponseEventTargetDto(\"ven\", \"ven2\"));\n\t\tdto.getSignals().add(signal);\n\t\tdto.setPublished(true);\n\t\tevent2 = demandResponseEventService.create(dto);\n\t\tevents.add(event2);\n\n\t\tdto = new DemandResponseEventCreateDto();\n\t\tdto.getDescriptor().setOadrProfile(DemandResponseEventOadrProfileEnum.OADR20B);\n\t\tdto.getDescriptor().setState(state);\n\t\tdto.getActivePeriod().setStart(start);\n\t\tdto.getDescriptor().setMarketContext(marketContext.getName());\n\t\tdto.getActivePeriod().setDuration(duration);\n\t\tdto.getActivePeriod().setNotificationDuration(notificationDuration);\n\t\tdto.getTargets().add(new DemandResponseEventTargetDto(\"ven\", \"ven3\"));\n\t\tdto.getSignals().add(signal);\n\t\tdto.setPublished(true);\n\t\tevent3 = demandResponseEventService.create(dto);\n\t\tevents.add(event3);\n\n\t\tString event1Id = String.valueOf(event1.getId());\n\t\tString event2Id = String.valueOf(event2.getId());\n\t\tString event3Id = String.valueOf(event3.getId());\n\n\t\tList<VenFilter> filters = new ArrayList<>();\n\t\tPage<Ven> search = venService.search(filters);\n\t\tassertEquals(3, search.getTotalElements());\n\n\t\tfilters = new ArrayList<>();\n\n\t\tfilters.add(getFilter(VenFilterType.EVENT, event1Id));\n\t\tsearch = venService.search(filters);\n\t\tassertEquals(2, search.getTotalElements());\n\n\t\tfilters = new ArrayList<>();\n\t\tfilters.add(getFilter(VenFilterType.EVENT, event2Id));\n\t\tsearch = venService.search(filters);\n\t\tassertEquals(1, search.getTotalElements());\n\n\t\tfilters = new ArrayList<>();\n\t\tfilters.add(getFilter(VenFilterType.EVENT, event3Id));\n\t\tsearch = venService.search(filters);\n\t\tassertEquals(1, search.getTotalElements());\n\n\t\tfilters = new ArrayList<>();\n\t\tfilters.add(getFilter(VenFilterType.EVENT, event1Id));\n\t\tfilters.add(getFilter(VenFilterType.EVENT, event2Id));\n\t\tsearch = venService.search(filters);\n\t\tassertEquals(2, search.getTotalElements());\n\n\t\tfilters = new ArrayList<>();\n\t\tfilters.add(getFilter(VenFilterType.EVENT, event1Id));\n\t\tfilters.add(getFilter(VenFilterType.EVENT, event2Id));\n\t\tfilters.add(getFilter(VenFilterType.EVENT, event3Id));\n\t\tsearch = venService.search(filters);\n\t\tassertEquals(3, search.getTotalElements());\n\n\t\tfilters = new ArrayList<>();\n\t\tfilters.add(getFilter(VenFilterType.IS_REGISTERED, Boolean.TRUE.toString()));\n\t\tsearch = venService.search(filters);\n\t\tassertEquals(0, search.getTotalElements());\n\n\t\tfilters = new ArrayList<>();\n\t\tfilters.add(getFilter(VenFilterType.IS_REGISTERED, Boolean.FALSE.toString()));\n\t\tsearch = venService.search(filters);\n\t\tassertEquals(3, search.getTotalElements());\n\n\t\tfilters = new ArrayList<>();\n\t\tfilters.add(getFilter(VenFilterType.GROUP, groupName));\n\t\tsearch = venService.search(filters);\n\t\tassertEquals(2, search.getTotalElements());\n\n\t\tfilters = new ArrayList<>();\n\t\tfilters.add(getFilter(VenFilterType.GROUP, groupName));\n\t\tfilters.add(getFilter(VenFilterType.EVENT, event1Id));\n\t\tsearch = venService.search(filters);\n\t\tassertEquals(1, search.getTotalElements());\n\n\t\tfilters = new ArrayList<>();\n\t\tfilters.add(getFilter(VenFilterType.MARKET_CONTEXT, marketContextName));\n\t\tfilters.add(getFilter(VenFilterType.EVENT, event1Id));\n\t\tsearch = venService.search(filters);\n\t\tassertEquals(2, search.getTotalElements());\n\n\t\tfilters = new ArrayList<>();\n\t\tfilters.add(getFilter(VenFilterType.MARKET_CONTEXT, marketContextName));\n\t\tfilters.add(getFilter(VenFilterType.EVENT, event1Id));\n\t\tfilters.add(getFilter(VenFilterType.VEN, \"ven1\"));\n\t\tsearch = venService.search(filters);\n\t\tassertEquals(1, search.getTotalElements());\n\n\t\tfilters = new ArrayList<>();\n\t\tfilters.add(getFilter(VenFilterType.MARKET_CONTEXT, marketContextName));\n\t\tfilters.add(getFilter(VenFilterType.EVENT, event1Id));\n\t\tfilters.add(getFilter(VenFilterType.VEN, \"ven\"));\n\t\tsearch = venService.search(filters);\n\t\tassertEquals(2, search.getTotalElements());\n\n\t\tfilters = new ArrayList<>();\n\t\tfilters.add(getFilter(VenFilterType.MARKET_CONTEXT, marketContextName));\n\t\tfilters.add(getFilter(VenFilterType.EVENT, event1Id));\n\t\tfilters.add(getFilter(VenFilterType.VEN, \"mouaiccool\"));\n\t\tsearch = venService.search(filters);\n\t\tassertEquals(0, search.getTotalElements());\n\n\t\tdemandResponseEventService.delete(events);\n\t\tvenService.delete(vens);\n\t\tvenMarketContextService.delete(marketContext);\n\t\tvenGroupService.delete(group);\n\t}", "signature": "void searchTest()", "full_signature": "@Test public void searchTest()", "class_method_signature": "VenServiceTest.searchTest()", "testcase": true, "constructor": false, "invocations": ["prepare", "save", "prepare", "save", "prepare", "setVenMarketContexts", "newHashSet", "setVenGroup", "newHashSet", "save", "add", "prepare", "setVenMarketContexts", "newHashSet", "save", "add", "prepare", "setVenMarketContexts", "newHashSet", "setVenGroup", "newHashSet", "save", "add", "setCurrentValue", "getValue", "setSignalName", "setSignalType", "setState", "getDescriptor", "setOadrProfile", "getDescriptor", "setStart", "getActivePeriod", "setMarketContext", "getDescriptor", "getName", "setDuration", "getActivePeriod", "setNotificationDuration", "getActivePeriod", "add", "getTargets", "add", "getTargets", "add", "getSignals", "setPublished", "create", "add", "setState", "getDescriptor", "setOadrProfile", "getDescriptor", "setStart", "getActivePeriod", "setMarketContext", "getDescriptor", "getName", "setDuration", "getActivePeriod", "setNotificationDuration", "getActivePeriod", "setRampUpDuration", "getActivePeriod", "setRecoveryDuration", "getActivePeriod", "setVtnComment", "getDescriptor", "add", "getTargets", "add", "getSignals", "setPublished", "create", "add", "setOadrProfile", "getDescriptor", "setState", "getDescriptor", "setStart", "getActivePeriod", "setMarketContext", "getDescriptor", "getName", "setDuration", "getActivePeriod", "setNotificationDuration", "getActivePeriod", "add", "getTargets", "add", "getSignals", "setPublished", "create", "add", "valueOf", "getId", "valueOf", "getId", "valueOf", "getId", "search", "assertEquals", "getTotalElements", "add", "getFilter", "search", "assertEquals", "getTotalElements", "add", "getFilter", "search", "assertEquals", "getTotalElements", "add", "getFilter", "search", "assertEquals", "getTotalElements", "add", "getFilter", "add", "getFilter", "search", "assertEquals", "getTotalElements", "add", "getFilter", "add", "getFilter", "add", "getFilter", "search", "assertEquals", "getTotalElements", "add", "getFilter", "toString", "search", "assertEquals", "getTotalElements", "add", "getFilter", "toString", "search", "assertEquals", "getTotalElements", "add", "getFilter", "search", "assertEquals", "getTotalElements", "add", "getFilter", "add", "getFilter", "search", "assertEquals", "getTotalElements", "add", "getFilter", "add", "getFilter", "search", "assertEquals", "getTotalElements", "add", "getFilter", "add", "getFilter", "add", "getFilter", "search", "assertEquals", "getTotalElements", "add", "getFilter", "add", "getFilter", "add", "getFilter", "search", "assertEquals", "getTotalElements", "add", "getFilter", "add", "getFilter", "add", "getFilter", "search", "assertEquals", "getTotalElements", "delete", "delete", "delete", "delete"]}, "focal_class": {"identifier": "VenService", "superclass": "extends AbstractUserService<Ven>", "interfaces": "", "fields": [{"original_string": "private static final Integer DEFAULT_SEARCH_SIZE = 20;", "modifier": "private static final", "type": "Integer", "declarator": "DEFAULT_SEARCH_SIZE = 20", "var_name": "DEFAULT_SEARCH_SIZE"}, {"original_string": "@Resource\n\tprivate VenDao venDao;", "modifier": "@Resource\n\tprivate", "type": "VenDao", "declarator": "venDao", "var_name": "venDao"}, {"original_string": "@Resource\n\tprivate VenResourceDao venResourceDao;", "modifier": "@Resource\n\tprivate", "type": "VenResourceDao", "declarator": "venResourceDao", "var_name": "venResourceDao"}, {"original_string": "@Resource\n\tprivate VenDemandResponseEventDao venDemandResponseEventDao;", "modifier": "@Resource\n\tprivate", "type": "VenDemandResponseEventDao", "declarator": "venDemandResponseEventDao", "var_name": "venDemandResponseEventDao"}, {"original_string": "@Autowired(required = false)\n\tprivate GenerateX509CertificateService generateX509VenService;", "modifier": "@Autowired(required = false)\n\tprivate", "type": "GenerateX509CertificateService", "declarator": "generateX509VenService", "var_name": "generateX509VenService"}, {"original_string": "@Resource\n\tprivate DigestAuthenticationProvider digestAuthenticationProvider;", "modifier": "@Resource\n\tprivate", "type": "DigestAuthenticationProvider", "declarator": "digestAuthenticationProvider", "var_name": "digestAuthenticationProvider"}, {"original_string": "private Mapper mapper = new DozerBeanMapper();", "modifier": "private", "type": "Mapper", "declarator": "mapper = new DozerBeanMapper()", "var_name": "mapper"}], "methods": [{"identifier": "prepare", "parameters": "(String username, String password)", "modifiers": "public", "return": "Ven", "signature": "Ven prepare(String username, String password)", "full_signature": "public Ven prepare(String username, String password)", "class_method_signature": "VenService.prepare(String username, String password)", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "(String username)", "modifiers": "public", "return": "Ven", "signature": "Ven prepare(String username)", "full_signature": "public Ven prepare(String username)", "class_method_signature": "VenService.prepare(String username)", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "(VenCreateDto dto)", "modifiers": "public", "return": "Ven", "signature": "Ven prepare(VenCreateDto dto)", "full_signature": "public Ven prepare(VenCreateDto dto)", "class_method_signature": "VenService.prepare(VenCreateDto dto)", "testcase": false, "constructor": false}, {"identifier": "generateCertificateIfRequired", "parameters": "(VenCreateDto dto, Ven ven)", "modifiers": "public", "return": "Optional<File>", "signature": "Optional<File> generateCertificateIfRequired(VenCreateDto dto, Ven ven)", "full_signature": "public Optional<File> generateCertificateIfRequired(VenCreateDto dto, Ven ven)", "class_method_signature": "VenService.generateCertificateIfRequired(VenCreateDto dto, Ven ven)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Ven instance)", "modifiers": "@Override @Transactional public", "return": "void", "signature": "void delete(Ven instance)", "full_signature": "@Override @Transactional public void delete(Ven instance)", "class_method_signature": "VenService.delete(Ven instance)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Iterable<Ven> instances)", "modifiers": "@Override public", "return": "void", "signature": "void delete(Iterable<Ven> instances)", "full_signature": "@Override public void delete(Iterable<Ven> instances)", "class_method_signature": "VenService.delete(Iterable<Ven> instances)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(Ven instance)", "modifiers": "@Override public", "return": "Ven", "signature": "Ven save(Ven instance)", "full_signature": "@Override public Ven save(Ven instance)", "class_method_signature": "VenService.save(Ven instance)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(Iterable<Ven> instances)", "modifiers": "@Override public", "return": "void", "signature": "void save(Iterable<Ven> instances)", "full_signature": "@Override public void save(Iterable<Ven> instances)", "class_method_signature": "VenService.save(Iterable<Ven> instances)", "testcase": false, "constructor": false}, {"identifier": "findOneByUsername", "parameters": "(String username)", "modifiers": "public", "return": "Ven", "signature": "Ven findOneByUsername(String username)", "full_signature": "public Ven findOneByUsername(String username)", "class_method_signature": "VenService.findOneByUsername(String username)", "testcase": false, "constructor": false}, {"identifier": "findOneByRegistrationId", "parameters": "(String registrationId)", "modifiers": "public", "return": "Ven", "signature": "Ven findOneByRegistrationId(String registrationId)", "full_signature": "public Ven findOneByRegistrationId(String registrationId)", "class_method_signature": "VenService.findOneByRegistrationId(String registrationId)", "testcase": false, "constructor": false}, {"identifier": "findByUsernameInAndVenMarketContextsContains", "parameters": "(List<String> username,\n\t\t\tVenMarketContext venMarketContext)", "modifiers": "public", "return": "List<Ven>", "signature": "List<Ven> findByUsernameInAndVenMarketContextsContains(List<String> username,\n\t\t\tVenMarketContext venMarketContext)", "full_signature": "public List<Ven> findByUsernameInAndVenMarketContextsContains(List<String> username,\n\t\t\tVenMarketContext venMarketContext)", "class_method_signature": "VenService.findByUsernameInAndVenMarketContextsContains(List<String> username,\n\t\t\tVenMarketContext venMarketContext)", "testcase": false, "constructor": false}, {"identifier": "findByGroupName", "parameters": "(List<String> groupName)", "modifiers": "public", "return": "List<Ven>", "signature": "List<Ven> findByGroupName(List<String> groupName)", "full_signature": "public List<Ven> findByGroupName(List<String> groupName)", "class_method_signature": "VenService.findByGroupName(List<String> groupName)", "testcase": false, "constructor": false}, {"identifier": "findByMarketContextName", "parameters": "(List<String> groupName)", "modifiers": "public", "return": "List<Ven>", "signature": "List<Ven> findByMarketContextName(List<String> groupName)", "full_signature": "public List<Ven> findByMarketContextName(List<String> groupName)", "class_method_signature": "VenService.findByMarketContextName(List<String> groupName)", "testcase": false, "constructor": false}, {"identifier": "findOne", "parameters": "(Long id)", "modifiers": "public", "return": "Ven", "signature": "Ven findOne(Long id)", "full_signature": "public Ven findOne(Long id)", "class_method_signature": "VenService.findOne(Long id)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "()", "modifiers": "public", "return": "Iterable<Ven>", "signature": "Iterable<Ven> findAll()", "full_signature": "public Iterable<Ven> findAll()", "class_method_signature": "VenService.findAll()", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long count()", "full_signature": "public long count()", "class_method_signature": "VenService.count()", "testcase": false, "constructor": false}, {"identifier": "cleanRegistration", "parameters": "(Ven ven)", "modifiers": "public", "return": "void", "signature": "void cleanRegistration(Ven ven)", "full_signature": "public void cleanRegistration(Ven ven)", "class_method_signature": "VenService.cleanRegistration(Ven ven)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(List<VenFilter> filters)", "modifiers": "public", "return": "Page<Ven>", "signature": "Page<Ven> search(List<VenFilter> filters)", "full_signature": "public Page<Ven> search(List<VenFilter> filters)", "class_method_signature": "VenService.search(List<VenFilter> filters)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(List<VenFilter> filters, Integer page, Integer size)", "modifiers": "public", "return": "Page<Ven>", "signature": "Page<Ven> search(List<VenFilter> filters, Integer page, Integer size)", "full_signature": "public Page<Ven> search(List<VenFilter> filters, Integer page, Integer size)", "class_method_signature": "VenService.search(List<VenFilter> filters, Integer page, Integer size)", "testcase": false, "constructor": false}], "file": "OpenADRServerVTNCommon/src/main/java/com/avob/openadr/server/common/vtn/service/VenService.java"}, "focal_method": {"identifier": "search", "parameters": "(List<VenFilter> filters)", "modifiers": "public", "return": "Page<Ven>", "body": "public Page<Ven> search(List<VenFilter> filters) {\n\t\treturn search(filters, null, null);\n\t}", "signature": "Page<Ven> search(List<VenFilter> filters)", "full_signature": "public Page<Ven> search(List<VenFilter> filters)", "class_method_signature": "VenService.search(List<VenFilter> filters)", "testcase": false, "constructor": false, "invocations": ["search"]}, "repository": {"repo_id": 169761438, "url": "https://github.com/avob/OpenADR", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 55915, "license": "licensed"}}