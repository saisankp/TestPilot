{"test_class": {"identifier": "EventPollerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "EventPoller<Integer> poller;", "modifier": "", "type": "EventPoller<Integer>", "declarator": "poller", "var_name": "poller"}, {"original_string": "@Mock\n    EventSource evtSource;", "modifier": "@Mock", "type": "EventSource", "declarator": "evtSource", "var_name": "evtSource"}, {"original_string": "@Mock\n    EventChannel<Integer> channel;", "modifier": "@Mock", "type": "EventChannel<Integer>", "declarator": "channel", "var_name": "channel"}, {"original_string": "@Mock\n    UncaughtExceptionHandler uncaughtExceptionHandler;", "modifier": "@Mock", "type": "UncaughtExceptionHandler", "declarator": "uncaughtExceptionHandler", "var_name": "uncaughtExceptionHandler"}], "file": "reactive-source-core/src/test/java/org/reactivesource/EventPollerTest.java"}, "test_case": {"identifier": "testWhenPollerStopsInvokesTheCleanupMethodOfTheEventSource", "parameters": "()", "modifiers": "@Test(groups = SMALL) public", "return": "void", "body": "@Test(groups = SMALL)\n    public void testWhenPollerStopsInvokesTheCleanupMethodOfTheEventSource() throws InterruptedException {\n        startPollingThread();\n        poller.stop();\n\n        sleep(100L);\n        verify(evtSource).cleanup();\n    }", "signature": "void testWhenPollerStopsInvokesTheCleanupMethodOfTheEventSource()", "full_signature": "@Test(groups = SMALL) public void testWhenPollerStopsInvokesTheCleanupMethodOfTheEventSource()", "class_method_signature": "EventPollerTest.testWhenPollerStopsInvokesTheCleanupMethodOfTheEventSource()", "testcase": true, "constructor": false, "invocations": ["startPollingThread", "stop", "sleep", "cleanup", "verify"]}, "focal_class": {"identifier": "EventPoller", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "static final long TIME_BETWEEN_POLLS = 500L;", "modifier": "static final", "type": "long", "declarator": "TIME_BETWEEN_POLLS = 500L", "var_name": "TIME_BETWEEN_POLLS"}, {"original_string": "private final EventChannel<T> eventChannel;", "modifier": "private final", "type": "EventChannel<T>", "declarator": "eventChannel", "var_name": "eventChannel"}, {"original_string": "private final EventSource eventSource;", "modifier": "private final", "type": "EventSource", "declarator": "eventSource", "var_name": "eventSource"}, {"original_string": "private volatile boolean runnable = true;", "modifier": "private volatile", "type": "boolean", "declarator": "runnable = true", "var_name": "runnable"}], "methods": [{"identifier": "EventPoller", "parameters": "(EventSource eventSource, EventChannel<T> eventChannel)", "modifiers": "", "return": "", "signature": " EventPoller(EventSource eventSource, EventChannel<T> eventChannel)", "full_signature": "  EventPoller(EventSource eventSource, EventChannel<T> eventChannel)", "class_method_signature": "EventPoller.EventPoller(EventSource eventSource, EventChannel<T> eventChannel)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void run()", "full_signature": "public void run()", "class_method_signature": "EventPoller.run()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "", "return": "void", "signature": "void stop()", "full_signature": " void stop()", "class_method_signature": "EventPoller.stop()", "testcase": false, "constructor": false}, {"identifier": "pushNewEventsToEventChannel", "parameters": "(List<Event<Map<String, Object>>> newEvents)", "modifiers": "private", "return": "void", "signature": "void pushNewEventsToEventChannel(List<Event<Map<String, Object>>> newEvents)", "full_signature": "private void pushNewEventsToEventChannel(List<Event<Map<String, Object>>> newEvents)", "class_method_signature": "EventPoller.pushNewEventsToEventChannel(List<Event<Map<String, Object>>> newEvents)", "testcase": false, "constructor": false}, {"identifier": "verifyConnectionToEventSource", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void verifyConnectionToEventSource()", "full_signature": "private void verifyConnectionToEventSource()", "class_method_signature": "EventPoller.verifyConnectionToEventSource()", "testcase": false, "constructor": false}], "file": "reactive-source-core/src/main/java/org/reactivesource/EventPoller.java"}, "focal_method": {"identifier": "stop", "parameters": "()", "modifiers": "", "return": "void", "body": "void stop() {\n        runnable = false;\n    }", "signature": "void stop()", "full_signature": " void stop()", "class_method_signature": "EventPoller.stop()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 18311299, "url": "https://github.com/eBay/reactive-source", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 9, "size": 317, "license": "licensed"}}