{"test_class": {"identifier": "ReferenceCountedACLCacheTest", "superclass": "", "interfaces": "", "fields": [], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/server/ReferenceCountedACLCacheTest.java"}, "test_case": {"identifier": "testSameACLGivesSameID", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSameACLGivesSameID() {\n        List<ACL> testACL = createACL(\"myid\");\n\n        ReferenceCountedACLCache cache = new ReferenceCountedACLCache();\n        Long aclId = cache.convertAcls(testACL);\n\n        List<ACL> testACL2 = createACL(\"myid\");\n\n        assertEquals(aclId, cache.convertAcls(testACL2));\n    }", "signature": "void testSameACLGivesSameID()", "full_signature": "@Test public void testSameACLGivesSameID()", "class_method_signature": "ReferenceCountedACLCacheTest.testSameACLGivesSameID()", "testcase": true, "constructor": false, "invocations": ["createACL", "convertAcls", "createACL", "assertEquals", "convertAcls"]}, "focal_class": {"identifier": "ReferenceCountedACLCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ReferenceCountedACLCache.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ReferenceCountedACLCache.class)", "var_name": "LOG"}, {"original_string": "final Map<Long, List<ACL>> longKeyMap =\n            new HashMap<Long, List<ACL>>();", "modifier": "final", "type": "Map<Long, List<ACL>>", "declarator": "longKeyMap =\n            new HashMap<Long, List<ACL>>()", "var_name": "longKeyMap"}, {"original_string": "final Map<List<ACL>, Long> aclKeyMap =\n            new HashMap<List<ACL>, Long>();", "modifier": "final", "type": "Map<List<ACL>, Long>", "declarator": "aclKeyMap =\n            new HashMap<List<ACL>, Long>()", "var_name": "aclKeyMap"}, {"original_string": "final Map<Long, AtomicLongWithEquals> referenceCounter =\n            new HashMap<Long, AtomicLongWithEquals>();", "modifier": "final", "type": "Map<Long, AtomicLongWithEquals>", "declarator": "referenceCounter =\n            new HashMap<Long, AtomicLongWithEquals>()", "var_name": "referenceCounter"}, {"original_string": "private static final long OPEN_UNSAFE_ACL_ID = -1L;", "modifier": "private static final", "type": "long", "declarator": "OPEN_UNSAFE_ACL_ID = -1L", "var_name": "OPEN_UNSAFE_ACL_ID"}, {"original_string": "long aclIndex = 0;", "modifier": "", "type": "long", "declarator": "aclIndex = 0", "var_name": "aclIndex"}], "methods": [{"identifier": "convertAcls", "parameters": "(List<ACL> acls)", "modifiers": "public synchronized", "return": "Long", "signature": "Long convertAcls(List<ACL> acls)", "full_signature": "public synchronized Long convertAcls(List<ACL> acls)", "class_method_signature": "ReferenceCountedACLCache.convertAcls(List<ACL> acls)", "testcase": false, "constructor": false}, {"identifier": "convertLong", "parameters": "(Long longVal)", "modifiers": "public synchronized", "return": "List<ACL>", "signature": "List<ACL> convertLong(Long longVal)", "full_signature": "public synchronized List<ACL> convertLong(Long longVal)", "class_method_signature": "ReferenceCountedACLCache.convertLong(Long longVal)", "testcase": false, "constructor": false}, {"identifier": "incrementIndex", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long incrementIndex()", "full_signature": "private long incrementIndex()", "class_method_signature": "ReferenceCountedACLCache.incrementIndex()", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(InputArchive ia)", "modifiers": "public synchronized", "return": "void", "signature": "void deserialize(InputArchive ia)", "full_signature": "public synchronized void deserialize(InputArchive ia)", "class_method_signature": "ReferenceCountedACLCache.deserialize(InputArchive ia)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(OutputArchive oa)", "modifiers": "public synchronized", "return": "void", "signature": "void serialize(OutputArchive oa)", "full_signature": "public synchronized void serialize(OutputArchive oa)", "class_method_signature": "ReferenceCountedACLCache.serialize(OutputArchive oa)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "ReferenceCountedACLCache.size()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void clear()", "full_signature": "private void clear()", "class_method_signature": "ReferenceCountedACLCache.clear()", "testcase": false, "constructor": false}, {"identifier": "addUsage", "parameters": "(Long acl)", "modifiers": "public synchronized", "return": "void", "signature": "void addUsage(Long acl)", "full_signature": "public synchronized void addUsage(Long acl)", "class_method_signature": "ReferenceCountedACLCache.addUsage(Long acl)", "testcase": false, "constructor": false}, {"identifier": "removeUsage", "parameters": "(Long acl)", "modifiers": "public synchronized", "return": "void", "signature": "void removeUsage(Long acl)", "full_signature": "public synchronized void removeUsage(Long acl)", "class_method_signature": "ReferenceCountedACLCache.removeUsage(Long acl)", "testcase": false, "constructor": false}, {"identifier": "purgeUnused", "parameters": "()", "modifiers": "public synchronized", "return": "void", "signature": "void purgeUnused()", "full_signature": "public synchronized void purgeUnused()", "class_method_signature": "ReferenceCountedACLCache.purgeUnused()", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/server/ReferenceCountedACLCache.java"}, "focal_method": {"identifier": "convertAcls", "parameters": "(List<ACL> acls)", "modifiers": "public synchronized", "return": "Long", "body": "public synchronized Long convertAcls(List<ACL> acls) {\n        if (acls == null)\n            return OPEN_UNSAFE_ACL_ID;\n\n        // get the value from the map\n        Long ret = aclKeyMap.get(acls);\n        if (ret == null) {\n            ret = incrementIndex();\n            longKeyMap.put(ret, acls);\n            aclKeyMap.put(acls, ret);\n        }\n\n        addUsage(ret);\n\n        return ret;\n    }", "signature": "Long convertAcls(List<ACL> acls)", "full_signature": "public synchronized Long convertAcls(List<ACL> acls)", "class_method_signature": "ReferenceCountedACLCache.convertAcls(List<ACL> acls)", "testcase": false, "constructor": false, "invocations": ["get", "incrementIndex", "put", "put", "addUsage"]}, "repository": {"repo_id": 230430206, "url": "https://github.com/boomblog/zookeeper-vip2", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 10, "size": 3105, "license": "licensed"}}