{"test_class": {"identifier": "MainCommandLineTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(MainCommandLineTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(MainCommandLineTest.class)", "var_name": "LOG"}, {"original_string": "private static final int SERVER_PORT = 8081;", "modifier": "private static final", "type": "int", "declarator": "SERVER_PORT = 8081", "var_name": "SERVER_PORT"}], "file": "service/src/test/java/com/mapcode/services/standalone/MainCommandLineTest.java"}, "test_case": {"identifier": "testHelp", "parameters": "()", "modifiers": "@SuppressWarnings(\"JUnitTestMethodWithNoAssertions\") @Test public", "return": "void", "body": "@SuppressWarnings(\"JUnitTestMethodWithNoAssertions\")\n    @Test\n    public void testHelp() {\n        LOG.info(\"testHelp\");\n\n        // Initialize Mockito.\n        MockitoAnnotations.initMocks(this);\n        MainCommandLine.execute(\"--help\");\n    }", "signature": "void testHelp()", "full_signature": "@SuppressWarnings(\"JUnitTestMethodWithNoAssertions\") @Test public void testHelp()", "class_method_signature": "MainCommandLineTest.testHelp()", "testcase": true, "constructor": false, "invocations": ["info", "initMocks", "execute"]}, "focal_class": {"identifier": "MainCommandLine", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CMD_HELP = \"--help\";", "modifier": "private static final", "type": "String", "declarator": "CMD_HELP = \"--help\"", "var_name": "CMD_HELP"}, {"original_string": "private static final String CMD_SILENT = \"--silent\";", "modifier": "private static final", "type": "String", "declarator": "CMD_SILENT = \"--silent\"", "var_name": "CMD_SILENT"}, {"original_string": "private static final String CMD_DEBUG = \"--debug\";", "modifier": "private static final", "type": "String", "declarator": "CMD_DEBUG = \"--debug\"", "var_name": "CMD_DEBUG"}, {"original_string": "private static final String CMD_PORT = \"--port\";", "modifier": "private static final", "type": "String", "declarator": "CMD_PORT = \"--port\"", "var_name": "CMD_PORT"}, {"original_string": "private static final int DEFAULT_PORT = 8080;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_PORT = 8080", "var_name": "DEFAULT_PORT"}, {"original_string": "private static final Server server;", "modifier": "private static final", "type": "Server", "declarator": "server", "var_name": "server"}, {"original_string": "private static final Logger rootLogger;", "modifier": "private static final", "type": "Logger", "declarator": "rootLogger", "var_name": "rootLogger"}, {"original_string": "private static final ConsoleAppender consoleAppender;", "modifier": "private static final", "type": "ConsoleAppender", "declarator": "consoleAppender", "var_name": "consoleAppender"}], "methods": [{"identifier": "MainCommandLine", "parameters": "()", "modifiers": "private", "return": "", "signature": " MainCommandLine()", "full_signature": "private  MainCommandLine()", "class_method_signature": "MainCommandLine.MainCommandLine()", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(final String... args)", "modifiers": "public static", "return": "void", "signature": "void execute(final String... args)", "full_signature": "public static void execute(final String... args)", "class_method_signature": "MainCommandLine.execute(final String... args)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void stop()", "full_signature": "public static void stop()", "class_method_signature": "MainCommandLine.stop()", "testcase": false, "constructor": false}, {"identifier": "createGuice", "parameters": "()", "modifiers": "private static", "return": "Injector", "signature": "Injector createGuice()", "full_signature": "private static Injector createGuice()", "class_method_signature": "MainCommandLine.createGuice()", "testcase": false, "constructor": false}, {"identifier": "printUsage", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void printUsage()", "full_signature": "private static void printUsage()", "class_method_signature": "MainCommandLine.printUsage()", "testcase": false, "constructor": false}], "file": "service/src/main/java/com/mapcode/services/standalone/MainCommandLine.java"}, "focal_method": {"identifier": "execute", "parameters": "(final String... args)", "modifiers": "public static", "return": "void", "body": "public static void execute(final String... args) {\n        int port = DEFAULT_PORT;\n        String command = null;\n        boolean debug = false;\n\n        // Parse command-line arguments.\n        int index = 0;\n        while (index < args.length) {\n\n            switch (args[index]) {\n                case CMD_SILENT:\n                    rootLogger.setLevel(Level.WARN);\n                    consoleAppender.setThreshold(Level.WARN);\n                    break;\n\n                case CMD_DEBUG:\n                    debug = true;\n                    break;\n\n                case CMD_PORT:\n                    if (index >= (args.length - 1)) {\n                        System.out.println(\"Missing port number\");\n                        printUsage();\n                        return;\n                    }\n                    port = Integer.parseInt(args[index + 1]);\n                    ++index;\n                    break;\n\n                default:\n                    if (args[index].startsWith(\"-\")) {\n                        System.out.println(\"Unknown option: \" + args[index]);\n                        printUsage();\n                        return;\n                    }\n                    if (command != null) {\n                        System.out.println(\"Unknown argument: \" + args[index]);\n                        printUsage();\n                        return;\n                    }\n                    command = args[index];\n                    break;\n            }\n            ++index;\n        }\n\n        if (debug) {\n            consoleAppender.setThreshold(Level.DEBUG);\n        }\n\n        if ((command != null) && command.equals(CMD_HELP)) {\n            printUsage();\n        } else {\n            server.startServer(port);\n        }\n    }", "signature": "void execute(final String... args)", "full_signature": "public static void execute(final String... args)", "class_method_signature": "MainCommandLine.execute(final String... args)", "testcase": false, "constructor": false, "invocations": ["setLevel", "setThreshold", "println", "printUsage", "parseInt", "startsWith", "println", "printUsage", "println", "printUsage", "setThreshold", "equals", "printUsage", "startServer"]}, "repository": {"repo_id": 34164637, "url": "https://github.com/mapcode-foundation/mapcode-rest-service", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 1181, "license": "licensed"}}