{"test_class": {"identifier": "TestPalindrome", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Palindrome palindrome = new Palindrome();", "modifier": "static", "type": "Palindrome", "declarator": "palindrome = new Palindrome()", "var_name": "palindrome"}], "file": "proj1b/TestPalindrome.java"}, "test_case": {"identifier": "testIsPalindrome", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsPalindrome() {\n        Palindrome palindrome = new Palindrome();\n        assertTrue(palindrome.isPalindrome(new String(\"a\")));\n        assertTrue(palindrome.isPalindrome(new String(\"racecar\")));\n        assertTrue(palindrome.isPalindrome(new String(\"noon\")));\n        assertFalse(palindrome.isPalindrome(new String(\"horse\")));\n        assertFalse(palindrome.isPalindrome(new String(\"rancor\")));\n        assertFalse(palindrome.isPalindrome(new String(\"aaaaab\")));\n        CharacterComparator cc = new OffByOne();\n        assertTrue(palindrome.isPalindrome(new String(\"a\"),cc));\n        assertTrue(palindrome.isPalindrome(new String(\"flake\"),cc));\n    }", "signature": "void testIsPalindrome()", "full_signature": "@Test public void testIsPalindrome()", "class_method_signature": "TestPalindrome.testIsPalindrome()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isPalindrome", "assertTrue", "isPalindrome", "assertTrue", "isPalindrome", "assertFalse", "isPalindrome", "assertFalse", "isPalindrome", "assertFalse", "isPalindrome", "assertTrue", "isPalindrome", "assertTrue", "isPalindrome"]}, "focal_class": {"identifier": "Palindrome", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "wordToDeque", "parameters": "(String word)", "modifiers": "public", "return": "Deque<Character>", "signature": "Deque<Character> wordToDeque(String word)", "full_signature": "public Deque<Character> wordToDeque(String word)", "class_method_signature": "Palindrome.wordToDeque(String word)", "testcase": false, "constructor": false}, {"identifier": "isPalindrome", "parameters": "(String word)", "modifiers": "public", "return": "boolean", "signature": "boolean isPalindrome(String word)", "full_signature": "public boolean isPalindrome(String word)", "class_method_signature": "Palindrome.isPalindrome(String word)", "testcase": false, "constructor": false}, {"identifier": "isPalindrome", "parameters": "(String word, CharacterComparator cc)", "modifiers": "public", "return": "boolean", "signature": "boolean isPalindrome(String word, CharacterComparator cc)", "full_signature": "public boolean isPalindrome(String word, CharacterComparator cc)", "class_method_signature": "Palindrome.isPalindrome(String word, CharacterComparator cc)", "testcase": false, "constructor": false}], "file": "proj1b/Palindrome.java"}, "focal_method": {"identifier": "isPalindrome", "parameters": "(String word)", "modifiers": "public", "return": "boolean", "body": "public boolean isPalindrome(String word) {\n        Deque<Character> deque = wordToDeque(word);\n        while(deque.size() > 1) {\n            if(deque.removeFirst() != deque.removeLast()) {\n                return false;\n            }\n        }\n        return true;\n    }", "signature": "boolean isPalindrome(String word)", "full_signature": "public boolean isPalindrome(String word)", "class_method_signature": "Palindrome.isPalindrome(String word)", "testcase": false, "constructor": false, "invocations": ["wordToDeque", "size", "removeFirst", "removeLast"]}, "repository": {"repo_id": 128527927, "url": "https://github.com/shenzheyu/CS61B", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 21, "size": 2766, "license": "licensed"}}