{"test_class": {"identifier": "TestJVoiceXmlEventHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private VoiceXmlInterpreterContext context;", "modifier": "private", "type": "VoiceXmlInterpreterContext", "declarator": "context", "var_name": "context"}, {"original_string": "private DataModel model;", "modifier": "private", "type": "DataModel", "declarator": "model", "var_name": "model"}, {"original_string": "private VoiceXmlInterpreter interpreter;", "modifier": "private", "type": "VoiceXmlInterpreter", "declarator": "interpreter", "var_name": "interpreter"}, {"original_string": "private Profile profile;", "modifier": "private", "type": "Profile", "declarator": "profile", "var_name": "profile"}], "file": "org.jvoicexml/src/test/java/org/jvoicexml/interpreter/event/TestJVoiceXmlEventHandler.java"}, "test_case": {"identifier": "testCollect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCollect() throws Exception {\n        final VoiceXmlDocument document = new VoiceXmlDocument();\n        final Vxml vxml = document.getVxml();\n        final Form form = vxml.appendChild(Form.class);\n        final Field field = form.appendChild(Field.class);\n        field.appendChild(Filled.class);\n        field.appendChild(Noinput.class);\n        field.appendChild(Help.class);\n        final Catch catchNode = field.appendChild(Catch.class);\n        catchNode.setEvent(\"test\");\n\n        final FieldFormItem item = new FieldFormItem(context, field);\n        final JVoiceXmlEventHandler handler = new JVoiceXmlEventHandler(null,\n                null);\n        handler.collect(context, interpreter, null, item);\n\n        final Collection<EventStrategy> strategies = handler.getStrategies();\n        Assert.assertEquals(6, strategies.size());\n        Assert.assertTrue(\"expected to find type test\",\n                containsType(strategies, \"test\"));\n        Assert.assertTrue(\"expected to find type noinput\",\n                containsType(strategies, \"noinput\"));\n        Assert.assertTrue(\"expected to find type help\",\n                containsType(strategies, \"help\"));\n        Assert.assertTrue(\"expected to find type cancel\",\n                containsType(strategies, \"cancel\"));\n        Assert.assertTrue(\"expected to find type \"\n                + RecognitionEvent.EVENT_TYPE,\n                containsType(strategies, RecognitionEvent.EVENT_TYPE));\n    }", "signature": "void testCollect()", "full_signature": "@Test public void testCollect()", "class_method_signature": "TestJVoiceXmlEventHandler.testCollect()", "testcase": true, "constructor": false, "invocations": ["getVxml", "appendChild", "appendChild", "appendChild", "appendChild", "appendChild", "appendChild", "setEvent", "collect", "getStrategies", "assertEquals", "size", "assertTrue", "containsType", "assertTrue", "containsType", "assertTrue", "containsType", "assertTrue", "containsType", "assertTrue", "containsType"]}, "focal_class": {"identifier": "JVoiceXmlEventHandler", "superclass": "", "interfaces": "implements EventHandler", "fields": [{"original_string": "private static final Logger LOGGER = LogManager\n            .getLogger(JVoiceXmlEventHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager\n            .getLogger(JVoiceXmlEventHandler.class)", "var_name": "LOGGER"}, {"original_string": "private final EventStrategyDecoratorFactory inputItemFactory;", "modifier": "private final", "type": "EventStrategyDecoratorFactory", "declarator": "inputItemFactory", "var_name": "inputItemFactory"}, {"original_string": "private JVoiceXMLEvent event;", "modifier": "private", "type": "JVoiceXMLEvent", "declarator": "event", "var_name": "event"}, {"original_string": "private final Collection<EventFilter> filters;", "modifier": "private final", "type": "Collection<EventFilter>", "declarator": "filters", "var_name": "filters"}, {"original_string": "private final Collection<EventFilter> filtersNoinput;", "modifier": "private final", "type": "Collection<EventFilter>", "declarator": "filtersNoinput", "var_name": "filtersNoinput"}, {"original_string": "private final ScopedCollection<EventStrategy> strategies;", "modifier": "private final", "type": "ScopedCollection<EventStrategy>", "declarator": "strategies", "var_name": "strategies"}, {"original_string": "private final Object semaphore;", "modifier": "private final", "type": "Object", "declarator": "semaphore", "var_name": "semaphore"}, {"original_string": "private final DataModel model;", "modifier": "private final", "type": "DataModel", "declarator": "model", "var_name": "model"}], "methods": [{"identifier": "JVoiceXmlEventHandler", "parameters": "(final DataModel dataModel,\n            final ScopeObserver observer)", "modifiers": "public", "return": "", "signature": " JVoiceXmlEventHandler(final DataModel dataModel,\n            final ScopeObserver observer)", "full_signature": "public  JVoiceXmlEventHandler(final DataModel dataModel,\n            final ScopeObserver observer)", "class_method_signature": "JVoiceXmlEventHandler.JVoiceXmlEventHandler(final DataModel dataModel,\n            final ScopeObserver observer)", "testcase": false, "constructor": true}, {"identifier": "getStrategies", "parameters": "()", "modifiers": "", "return": "Collection<EventStrategy>", "signature": "Collection<EventStrategy> getStrategies()", "full_signature": " Collection<EventStrategy> getStrategies()", "class_method_signature": "JVoiceXmlEventHandler.getStrategies()", "testcase": false, "constructor": false}, {"identifier": "collect", "parameters": "(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final VoiceXmlDocument document)", "modifiers": "@Override public", "return": "void", "signature": "void collect(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final VoiceXmlDocument document)", "full_signature": "@Override public void collect(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final VoiceXmlDocument document)", "class_method_signature": "JVoiceXmlEventHandler.collect(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final VoiceXmlDocument document)", "testcase": false, "constructor": false}, {"identifier": "collect", "parameters": "(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter, final Dialog dialog)", "modifiers": "@Override public", "return": "void", "signature": "void collect(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter, final Dialog dialog)", "full_signature": "@Override public void collect(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter, final Dialog dialog)", "class_method_signature": "JVoiceXmlEventHandler.collect(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter, final Dialog dialog)", "testcase": false, "constructor": false}, {"identifier": "collect", "parameters": "(\n            final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final CatchContainer item)", "modifiers": "@Override public", "return": "Collection<EventStrategy>", "signature": "Collection<EventStrategy> collect(\n            final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final CatchContainer item)", "full_signature": "@Override public Collection<EventStrategy> collect(\n            final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final CatchContainer item)", "class_method_signature": "JVoiceXmlEventHandler.collect(\n            final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final CatchContainer item)", "testcase": false, "constructor": false}, {"identifier": "addCustomEvents", "parameters": "(\n            final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final AbstractCatchElement catchElement, final String eventType)", "modifiers": "private", "return": "EventStrategy", "signature": "EventStrategy addCustomEvents(\n            final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final AbstractCatchElement catchElement, final String eventType)", "full_signature": "private EventStrategy addCustomEvents(\n            final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final AbstractCatchElement catchElement, final String eventType)", "class_method_signature": "JVoiceXmlEventHandler.addCustomEvents(\n            final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final AbstractCatchElement catchElement, final String eventType)", "testcase": false, "constructor": false}, {"identifier": "addDefaultStrategies", "parameters": "(\n            final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final CatchContainer item)", "modifiers": "private", "return": "Collection<EventStrategy>", "signature": "Collection<EventStrategy> addDefaultStrategies(\n            final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final CatchContainer item)", "full_signature": "private Collection<EventStrategy> addDefaultStrategies(\n            final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final CatchContainer item)", "class_method_signature": "JVoiceXmlEventHandler.addDefaultStrategies(\n            final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final CatchContainer item)", "testcase": false, "constructor": false}, {"identifier": "addStrategy", "parameters": "(final EventStrategy strategy)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addStrategy(final EventStrategy strategy)", "full_signature": "@Override public boolean addStrategy(final EventStrategy strategy)", "class_method_signature": "JVoiceXmlEventHandler.addStrategy(final EventStrategy strategy)", "testcase": false, "constructor": false}, {"identifier": "clean", "parameters": "(final FormItem item)", "modifiers": "@Override public", "return": "void", "signature": "void clean(final FormItem item)", "full_signature": "@Override public void clean(final FormItem item)", "class_method_signature": "JVoiceXmlEventHandler.clean(final FormItem item)", "testcase": false, "constructor": false}, {"identifier": "getStrategy", "parameters": "(final String type)", "modifiers": "private", "return": "EventStrategy", "signature": "EventStrategy getStrategy(final String type)", "full_signature": "private EventStrategy getStrategy(final String type)", "class_method_signature": "JVoiceXmlEventHandler.getStrategy(final String type)", "testcase": false, "constructor": false}, {"identifier": "containsStrategy", "parameters": "(final String type)", "modifiers": "private", "return": "boolean", "signature": "boolean containsStrategy(final String type)", "full_signature": "private boolean containsStrategy(final String type)", "class_method_signature": "JVoiceXmlEventHandler.containsStrategy(final String type)", "testcase": false, "constructor": false}, {"identifier": "waitEvent", "parameters": "()", "modifiers": "@Override public", "return": "JVoiceXMLEvent", "signature": "JVoiceXMLEvent waitEvent()", "full_signature": "@Override public JVoiceXMLEvent waitEvent()", "class_method_signature": "JVoiceXmlEventHandler.waitEvent()", "testcase": false, "constructor": false}, {"identifier": "processEvent", "parameters": "(final CatchContainer item)", "modifiers": "@Override public", "return": "void", "signature": "void processEvent(final CatchContainer item)", "full_signature": "@Override public void processEvent(final CatchContainer item)", "class_method_signature": "JVoiceXmlEventHandler.processEvent(final CatchContainer item)", "testcase": false, "constructor": false}, {"identifier": "clearEvent", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearEvent()", "full_signature": "@Override public void clearEvent()", "class_method_signature": "JVoiceXmlEventHandler.clearEvent()", "testcase": false, "constructor": false}, {"identifier": "onEvent", "parameters": "(final JVoiceXMLEvent e)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void onEvent(final JVoiceXMLEvent e)", "full_signature": "@Override public synchronized void onEvent(final JVoiceXMLEvent e)", "class_method_signature": "JVoiceXmlEventHandler.onEvent(final JVoiceXMLEvent e)", "testcase": false, "constructor": false}, {"identifier": "transformEvent", "parameters": "(final JVoiceXMLEvent e)", "modifiers": "private", "return": "JVoiceXMLEvent", "signature": "JVoiceXMLEvent transformEvent(final JVoiceXMLEvent e)", "full_signature": "private JVoiceXMLEvent transformEvent(final JVoiceXMLEvent e)", "class_method_signature": "JVoiceXmlEventHandler.transformEvent(final JVoiceXMLEvent e)", "testcase": false, "constructor": false}, {"identifier": "getEvent", "parameters": "()", "modifiers": "public", "return": "JVoiceXMLEvent", "signature": "JVoiceXMLEvent getEvent()", "full_signature": "public JVoiceXMLEvent getEvent()", "class_method_signature": "JVoiceXmlEventHandler.getEvent()", "testcase": false, "constructor": false}, {"identifier": "removeStrategies", "parameters": "(final Collection<EventStrategy> strats)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeStrategies(final Collection<EventStrategy> strats)", "full_signature": "@Override public boolean removeStrategies(final Collection<EventStrategy> strats)", "class_method_signature": "JVoiceXmlEventHandler.removeStrategies(final Collection<EventStrategy> strats)", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/interpreter/event/JVoiceXmlEventHandler.java"}, "focal_method": {"identifier": "collect", "parameters": "(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final VoiceXmlDocument document)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void collect(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final VoiceXmlDocument document) {\n        final Vxml vxml = document.getVxml();\n        final Collection<AbstractCatchElement> catches =\n                new java.util.ArrayList<AbstractCatchElement>();\n        final NodeList children = vxml.getChildNodes();\n        for (int i = 0; i < children.getLength(); i++) {\n            final Node child = children.item(i);\n            if (child instanceof AbstractCatchElement) {\n                final AbstractCatchElement catchElement =\n                        (AbstractCatchElement) child;\n                catches.add(catchElement);\n            }\n        }\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"found \" + catches.size()\n                    + \" catch elements in document\");\n        }\n\n        // Transform them into event handlers.\n        final FormInterpretationAlgorithm fia;\n        if (interpreter == null) {\n            fia = null;\n        } else {\n            fia = interpreter.getFormInterpretationAlgorithm();\n        }\n        for (AbstractCatchElement catchElement : catches) {\n            final TokenList events = catchElement.getEventList();\n            for (String eventType : events) {\n                addCustomEvents(context, interpreter, fia, null, catchElement,\n                        eventType);\n            }\n        }\n    }", "signature": "void collect(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final VoiceXmlDocument document)", "full_signature": "@Override public void collect(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final VoiceXmlDocument document)", "class_method_signature": "JVoiceXmlEventHandler.collect(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final VoiceXmlDocument document)", "testcase": false, "constructor": false, "invocations": ["getVxml", "getChildNodes", "getLength", "item", "add", "isDebugEnabled", "debug", "size", "getFormInterpretationAlgorithm", "getEventList", "addCustomEvents"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}