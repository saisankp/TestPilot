{"test_class": {"identifier": "TracingJMSConsumerTest", "superclass": "extends ITJms", "interfaces": "", "fields": [{"original_string": "TraceContext parent = newTraceContext(SamplingFlags.SAMPLED);", "modifier": "", "type": "TraceContext", "declarator": "parent = newTraceContext(SamplingFlags.SAMPLED)", "var_name": "parent"}, {"original_string": "JMSConsumer delegate = mock(JMSConsumer.class);", "modifier": "", "type": "JMSConsumer", "declarator": "delegate = mock(JMSConsumer.class)", "var_name": "delegate"}, {"original_string": "JMSConsumer tracingJMSConsumer = new TracingJMSConsumer(delegate, null, jmsTracing);", "modifier": "", "type": "JMSConsumer", "declarator": "tracingJMSConsumer = new TracingJMSConsumer(delegate, null, jmsTracing)", "var_name": "tracingJMSConsumer"}], "file": "instrumentation/jms/src/test/java/brave/jms/TracingJMSConsumerTest.java"}, "test_case": {"identifier": "receive_creates_consumer_span", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void receive_creates_consumer_span() throws Exception {\n    ActiveMQTextMessage message = new ActiveMQTextMessage();\n    receive(message);\n\n    MutableSpan consumer = testSpanHandler.takeRemoteSpan(CONSUMER);\n    assertThat(consumer.name()).isEqualTo(\"receive\");\n    assertThat(consumer.name()).isEqualTo(\"receive\");\n  }", "signature": "void receive_creates_consumer_span()", "full_signature": "@Test public void receive_creates_consumer_span()", "class_method_signature": "TracingJMSConsumerTest.receive_creates_consumer_span()", "testcase": true, "constructor": false, "invocations": ["receive", "takeRemoteSpan", "isEqualTo", "assertThat", "name", "isEqualTo", "assertThat", "name"]}, "focal_class": {"identifier": "TracingJMSConsumer", "superclass": "extends TracingConsumer<JMSConsumer>", "interfaces": "implements JMSConsumer", "fields": [{"original_string": "final Destination destination;", "modifier": "final", "type": "Destination", "declarator": "destination", "var_name": "destination"}], "methods": [{"identifier": "TracingJMSConsumer", "parameters": "(JMSConsumer delegate, Destination destination, JmsTracing jmsTracing)", "modifiers": "", "return": "", "signature": " TracingJMSConsumer(JMSConsumer delegate, Destination destination, JmsTracing jmsTracing)", "full_signature": "  TracingJMSConsumer(JMSConsumer delegate, Destination destination, JmsTracing jmsTracing)", "class_method_signature": "TracingJMSConsumer.TracingJMSConsumer(JMSConsumer delegate, Destination destination, JmsTracing jmsTracing)", "testcase": false, "constructor": true}, {"identifier": "destination", "parameters": "(Message message)", "modifiers": "@Override", "return": "Destination", "signature": "Destination destination(Message message)", "full_signature": "@Override Destination destination(Message message)", "class_method_signature": "TracingJMSConsumer.destination(Message message)", "testcase": false, "constructor": false}, {"identifier": "getMessageSelector", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMessageSelector()", "full_signature": "@Override public String getMessageSelector()", "class_method_signature": "TracingJMSConsumer.getMessageSelector()", "testcase": false, "constructor": false}, {"identifier": "getMessageListener", "parameters": "()", "modifiers": "@Override public", "return": "MessageListener", "signature": "MessageListener getMessageListener()", "full_signature": "@Override public MessageListener getMessageListener()", "class_method_signature": "TracingJMSConsumer.getMessageListener()", "testcase": false, "constructor": false}, {"identifier": "setMessageListener", "parameters": "(MessageListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void setMessageListener(MessageListener listener)", "full_signature": "@Override public void setMessageListener(MessageListener listener)", "class_method_signature": "TracingJMSConsumer.setMessageListener(MessageListener listener)", "testcase": false, "constructor": false}, {"identifier": "receive", "parameters": "()", "modifiers": "@Override public", "return": "Message", "signature": "Message receive()", "full_signature": "@Override public Message receive()", "class_method_signature": "TracingJMSConsumer.receive()", "testcase": false, "constructor": false}, {"identifier": "receive", "parameters": "(long timeout)", "modifiers": "@Override public", "return": "Message", "signature": "Message receive(long timeout)", "full_signature": "@Override public Message receive(long timeout)", "class_method_signature": "TracingJMSConsumer.receive(long timeout)", "testcase": false, "constructor": false}, {"identifier": "receiveNoWait", "parameters": "()", "modifiers": "@Override public", "return": "Message", "signature": "Message receiveNoWait()", "full_signature": "@Override public Message receiveNoWait()", "class_method_signature": "TracingJMSConsumer.receiveNoWait()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "TracingJMSConsumer.close()", "testcase": false, "constructor": false}, {"identifier": "receiveBody", "parameters": "(Class<T> c)", "modifiers": "@Override public", "return": "T", "signature": "T receiveBody(Class<T> c)", "full_signature": "@Override public T receiveBody(Class<T> c)", "class_method_signature": "TracingJMSConsumer.receiveBody(Class<T> c)", "testcase": false, "constructor": false}, {"identifier": "receiveBody", "parameters": "(Class<T> c, long timeout)", "modifiers": "@Override public", "return": "T", "signature": "T receiveBody(Class<T> c, long timeout)", "full_signature": "@Override public T receiveBody(Class<T> c, long timeout)", "class_method_signature": "TracingJMSConsumer.receiveBody(Class<T> c, long timeout)", "testcase": false, "constructor": false}, {"identifier": "receiveBodyNoWait", "parameters": "(Class<T> c)", "modifiers": "@Override public", "return": "T", "signature": "T receiveBodyNoWait(Class<T> c)", "full_signature": "@Override public T receiveBodyNoWait(Class<T> c)", "class_method_signature": "TracingJMSConsumer.receiveBodyNoWait(Class<T> c)", "testcase": false, "constructor": false}], "file": "instrumentation/jms/src/main/java/brave/jms/TracingJMSConsumer.java"}, "focal_method": {"identifier": "receive", "parameters": "()", "modifiers": "@Override public", "return": "Message", "body": "@Override public Message receive() {\n    Message message = delegate.receive();\n    handleReceive(message);\n    return message;\n  }", "signature": "Message receive()", "full_signature": "@Override public Message receive()", "class_method_signature": "TracingJMSConsumer.receive()", "testcase": false, "constructor": false, "invocations": ["receive", "handleReceive"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}