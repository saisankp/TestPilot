{"test_class": {"identifier": "CandidateListChangeListenerTest", "superclass": "extends AbstractActorTest", "interfaces": "", "fields": [{"original_string": "private static final String ENTITY_TYPE = \"test\";", "modifier": "private static final", "type": "String", "declarator": "ENTITY_TYPE = \"test\"", "var_name": "ENTITY_TYPE"}, {"original_string": "private static final YangInstanceIdentifier ENTITY_ID1 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity1\"));", "modifier": "private static final", "type": "YangInstanceIdentifier", "declarator": "ENTITY_ID1 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity1\"))", "var_name": "ENTITY_ID1"}, {"original_string": "private static final YangInstanceIdentifier ENTITY_ID2 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity2\"));", "modifier": "private static final", "type": "YangInstanceIdentifier", "declarator": "ENTITY_ID2 =\n            YangInstanceIdentifier.of(QName.create(\"test\", \"2015-08-14\", \"entity2\"))", "var_name": "ENTITY_ID2"}, {"original_string": "private ShardDataTree shardDataTree;", "modifier": "private", "type": "ShardDataTree", "declarator": "shardDataTree", "var_name": "shardDataTree"}, {"original_string": "@Mock\n    private Shard mockShard;", "modifier": "@Mock\n    private", "type": "Shard", "declarator": "mockShard", "var_name": "mockShard"}], "file": "opendaylight/md-sal/sal-distributed-eos/src/test/java/org/opendaylight/controller/cluster/entityownership/CandidateListChangeListenerTest.java"}, "test_case": {"identifier": "testOnDataTreeChanged", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnDataTreeChanged() throws Exception {\n        TestKit kit = new TestKit(getSystem());\n\n        new CandidateListChangeListener(kit.getRef(), \"test\").init(shardDataTree);\n\n        String memberName1 = \"member-1\";\n        writeNode(ENTITY_OWNERS_PATH, entityOwnersWithCandidate(ENTITY_TYPE, ENTITY_ID1, memberName1));\n\n        CandidateAdded candidateAdded = kit.expectMsgClass(CandidateAdded.class);\n        assertEquals(\"getEntityId\", entityPath(ENTITY_TYPE, ENTITY_ID1), candidateAdded.getEntityPath());\n        assertEquals(\"getNewCandidate\", memberName1, candidateAdded.getNewCandidate());\n        assertEquals(\"getAllCandidates\", ImmutableSet.of(memberName1),\n                ImmutableSet.copyOf(candidateAdded.getAllCandidates()));\n\n        writeNode(ENTITY_OWNERS_PATH, entityOwnersWithCandidate(ENTITY_TYPE, ENTITY_ID1, memberName1));\n        kit.expectNoMessage(Duration.ofMillis(500));\n\n        String memberName2 = \"member-2\";\n        writeNode(ENTITY_OWNERS_PATH, entityOwnersWithCandidate(ENTITY_TYPE, ENTITY_ID1, memberName2));\n\n        candidateAdded = kit.expectMsgClass(CandidateAdded.class);\n        assertEquals(\"getEntityId\", entityPath(ENTITY_TYPE, ENTITY_ID1), candidateAdded.getEntityPath());\n        assertEquals(\"getNewCandidate\", memberName2, candidateAdded.getNewCandidate());\n        assertEquals(\"getAllCandidates\", ImmutableSet.of(memberName1, memberName2),\n                ImmutableSet.copyOf(candidateAdded.getAllCandidates()));\n\n        writeNode(ENTITY_OWNERS_PATH, entityOwnersWithCandidate(ENTITY_TYPE, ENTITY_ID2, memberName1));\n\n        candidateAdded = kit.expectMsgClass(CandidateAdded.class);\n        assertEquals(\"getEntityId\", entityPath(ENTITY_TYPE, ENTITY_ID2), candidateAdded.getEntityPath());\n        assertEquals(\"getNewCandidate\", memberName1, candidateAdded.getNewCandidate());\n        assertEquals(\"getAllCandidates\", ImmutableSet.of(memberName1),\n                ImmutableSet.copyOf(candidateAdded.getAllCandidates()));\n\n        deleteNode(candidatePath(ENTITY_TYPE, ENTITY_ID1, memberName1));\n\n        CandidateRemoved candidateRemoved = kit.expectMsgClass(CandidateRemoved.class);\n        assertEquals(\"getEntityId\", entityPath(ENTITY_TYPE, ENTITY_ID1), candidateRemoved.getEntityPath());\n        assertEquals(\"getRemovedCandidate\", memberName1, candidateRemoved.getRemovedCandidate());\n        assertEquals(\"getRemainingCandidates\", ImmutableSet.of(memberName2),\n                ImmutableSet.copyOf(candidateRemoved.getRemainingCandidates()));\n\n        deleteNode(candidatePath(ENTITY_TYPE, ENTITY_ID1, memberName2));\n\n        candidateRemoved = kit.expectMsgClass(CandidateRemoved.class);\n        assertEquals(\"getEntityId\", entityPath(ENTITY_TYPE, ENTITY_ID1), candidateRemoved.getEntityPath());\n        assertEquals(\"getRemovedCandidate\", memberName2, candidateRemoved.getRemovedCandidate());\n        assertEquals(\"getRemainingCandidates\", ImmutableSet.of(),\n                ImmutableSet.copyOf(candidateRemoved.getRemainingCandidates()));\n    }", "signature": "void testOnDataTreeChanged()", "full_signature": "@Test public void testOnDataTreeChanged()", "class_method_signature": "CandidateListChangeListenerTest.testOnDataTreeChanged()", "testcase": true, "constructor": false, "invocations": ["getSystem", "init", "getRef", "writeNode", "entityOwnersWithCandidate", "expectMsgClass", "assertEquals", "entityPath", "getEntityPath", "assertEquals", "getNewCandidate", "assertEquals", "of", "copyOf", "getAllCandidates", "writeNode", "entityOwnersWithCandidate", "expectNoMessage", "ofMillis", "writeNode", "entityOwnersWithCandidate", "expectMsgClass", "assertEquals", "entityPath", "getEntityPath", "assertEquals", "getNewCandidate", "assertEquals", "of", "copyOf", "getAllCandidates", "writeNode", "entityOwnersWithCandidate", "expectMsgClass", "assertEquals", "entityPath", "getEntityPath", "assertEquals", "getNewCandidate", "assertEquals", "of", "copyOf", "getAllCandidates", "deleteNode", "candidatePath", "expectMsgClass", "assertEquals", "entityPath", "getEntityPath", "assertEquals", "getRemovedCandidate", "assertEquals", "of", "copyOf", "getRemainingCandidates", "deleteNode", "candidatePath", "expectMsgClass", "assertEquals", "entityPath", "getEntityPath", "assertEquals", "getRemovedCandidate", "assertEquals", "of", "copyOf", "getRemainingCandidates"]}, "focal_class": {"identifier": "CandidateListChangeListener", "superclass": "", "interfaces": "implements DOMDataTreeChangeListener", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(CandidateListChangeListener.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(CandidateListChangeListener.class)", "var_name": "LOG"}, {"original_string": "private final String logId;", "modifier": "private final", "type": "String", "declarator": "logId", "var_name": "logId"}, {"original_string": "private final ActorRef shard;", "modifier": "private final", "type": "ActorRef", "declarator": "shard", "var_name": "shard"}, {"original_string": "private final Map<YangInstanceIdentifier, Collection<String>> currentCandidates = new HashMap<>();", "modifier": "private final", "type": "Map<YangInstanceIdentifier, Collection<String>>", "declarator": "currentCandidates = new HashMap<>()", "var_name": "currentCandidates"}], "methods": [{"identifier": "CandidateListChangeListener", "parameters": "(final ActorRef shard, final String logId)", "modifiers": "", "return": "", "signature": " CandidateListChangeListener(final ActorRef shard, final String logId)", "full_signature": "  CandidateListChangeListener(final ActorRef shard, final String logId)", "class_method_signature": "CandidateListChangeListener.CandidateListChangeListener(final ActorRef shard, final String logId)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(final ShardDataTree shardDataTree)", "modifiers": "", "return": "void", "signature": "void init(final ShardDataTree shardDataTree)", "full_signature": " void init(final ShardDataTree shardDataTree)", "class_method_signature": "CandidateListChangeListener.init(final ShardDataTree shardDataTree)", "testcase": false, "constructor": false}, {"identifier": "onDataTreeChanged", "parameters": "(final Collection<DataTreeCandidate> changes)", "modifiers": "@Override public", "return": "void", "signature": "void onDataTreeChanged(final Collection<DataTreeCandidate> changes)", "full_signature": "@Override public void onDataTreeChanged(final Collection<DataTreeCandidate> changes)", "class_method_signature": "CandidateListChangeListener.onDataTreeChanged(final Collection<DataTreeCandidate> changes)", "testcase": false, "constructor": false}, {"identifier": "addToCurrentCandidates", "parameters": "(final YangInstanceIdentifier entityId,\n            final String newCandidate)", "modifiers": "private", "return": "Collection<String>", "signature": "Collection<String> addToCurrentCandidates(final YangInstanceIdentifier entityId,\n            final String newCandidate)", "full_signature": "private Collection<String> addToCurrentCandidates(final YangInstanceIdentifier entityId,\n            final String newCandidate)", "class_method_signature": "CandidateListChangeListener.addToCurrentCandidates(final YangInstanceIdentifier entityId,\n            final String newCandidate)", "testcase": false, "constructor": false}, {"identifier": "removeFromCurrentCandidates", "parameters": "(final YangInstanceIdentifier entityId,\n            final String candidateToRemove)", "modifiers": "private", "return": "Collection<String>", "signature": "Collection<String> removeFromCurrentCandidates(final YangInstanceIdentifier entityId,\n            final String candidateToRemove)", "full_signature": "private Collection<String> removeFromCurrentCandidates(final YangInstanceIdentifier entityId,\n            final String candidateToRemove)", "class_method_signature": "CandidateListChangeListener.removeFromCurrentCandidates(final YangInstanceIdentifier entityId,\n            final String candidateToRemove)", "testcase": false, "constructor": false}, {"identifier": "extractEntityPath", "parameters": "(final YangInstanceIdentifier candidatePath)", "modifiers": "private static", "return": "YangInstanceIdentifier", "signature": "YangInstanceIdentifier extractEntityPath(final YangInstanceIdentifier candidatePath)", "full_signature": "private static YangInstanceIdentifier extractEntityPath(final YangInstanceIdentifier candidatePath)", "class_method_signature": "CandidateListChangeListener.extractEntityPath(final YangInstanceIdentifier candidatePath)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-eos/src/main/java/org/opendaylight/controller/cluster/entityownership/CandidateListChangeListener.java"}, "focal_method": {"identifier": "onDataTreeChanged", "parameters": "(final Collection<DataTreeCandidate> changes)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onDataTreeChanged(final Collection<DataTreeCandidate> changes) {\n        for (DataTreeCandidate change: changes) {\n            DataTreeCandidateNode changeRoot = change.getRootNode();\n            ModificationType type = changeRoot.getModificationType();\n\n            LOG.debug(\"{}: Candidate node changed: {}, {}\", logId, type, change.getRootPath());\n\n            NodeIdentifierWithPredicates candidateKey =\n                    (NodeIdentifierWithPredicates) change.getRootPath().getLastPathArgument();\n            String candidate = candidateKey.getValue(CANDIDATE_NAME_QNAME).toString();\n\n            YangInstanceIdentifier entityId = extractEntityPath(change.getRootPath());\n\n            if (type == ModificationType.WRITE || type == ModificationType.APPEARED) {\n                LOG.debug(\"{}: Candidate {} was added for entity {}\", logId, candidate, entityId);\n\n                Collection<String> newCandidates = addToCurrentCandidates(entityId, candidate);\n                shard.tell(new CandidateAdded(entityId, candidate, new ArrayList<>(newCandidates)), shard);\n            } else if (type == ModificationType.DELETE || type == ModificationType.DISAPPEARED) {\n                LOG.debug(\"{}: Candidate {} was removed for entity {}\", logId, candidate, entityId);\n\n                Collection<String> newCandidates = removeFromCurrentCandidates(entityId, candidate);\n                shard.tell(new CandidateRemoved(entityId, candidate, new ArrayList<>(newCandidates)), shard);\n            }\n        }\n    }", "signature": "void onDataTreeChanged(final Collection<DataTreeCandidate> changes)", "full_signature": "@Override public void onDataTreeChanged(final Collection<DataTreeCandidate> changes)", "class_method_signature": "CandidateListChangeListener.onDataTreeChanged(final Collection<DataTreeCandidate> changes)", "testcase": false, "constructor": false, "invocations": ["getRootNode", "getModificationType", "debug", "getRootPath", "getLastPathArgument", "getRootPath", "toString", "getValue", "extractEntityPath", "getRootPath", "debug", "addToCurrentCandidates", "tell", "debug", "removeFromCurrentCandidates", "tell"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}