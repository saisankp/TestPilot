{"test_class": {"identifier": "IFieldPluginTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IFieldPlugin plugin;", "modifier": "private", "type": "IFieldPlugin", "declarator": "plugin", "var_name": "plugin"}, {"original_string": "private IBootstrap bootstrap;", "modifier": "private", "type": "IBootstrap", "declarator": "bootstrap", "var_name": "bootstrap"}], "file": "CoreFeatures/Field-plugins/PluginIField/src/test/java/info/smart_tools/smartactors/field_plugins/ifield_plugin/IFieldPluginTest.java"}, "test_case": {"identifier": "MustInCorrectExecuteActionWhenNewCreateStrategyThrowException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void MustInCorrectExecuteActionWhenNewCreateStrategyThrowException() throws Exception {\n\n        BootstrapItem item = mock(BootstrapItem.class);\n        whenNew(BootstrapItem.class).withArguments(\"IFieldPlugin\").thenReturn(item);\n\n        when(item.after(anyString())).thenReturn(item);\n\n        plugin.load();\n\n        verifyNew(BootstrapItem.class).withArguments(\"IFieldPlugin\");\n\n        verify(item).after(\"IOC\");\n\n        ArgumentCaptor<IPoorAction> iPoorActionArgumentCaptor = ArgumentCaptor.forClass(IPoorAction.class);\n        verify(item).process(iPoorActionArgumentCaptor.capture());\n\n        verify(bootstrap).add(item);\n\n        IKey iFieldNameKey = mock(IKey.class);\n        when(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\")).thenReturn(iFieldNameKey);\n        IKey iFieldKey = mock(IKey.class);\n        when(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\")).thenReturn(iFieldKey);\n\n        whenNew(ResolveByNameIocStrategy.class).withArguments(any()).thenThrow(new InvalidArgumentException(\"\"));\n\n        try {\n            iPoorActionArgumentCaptor.getValue().execute();\n        } catch (ActionExecuteException e) {\n\n            verifyStatic();\n            Keys.getOrAdd(IField.class.getCanonicalName());\n\n            verifyNew(ResolveByNameIocStrategy.class).withArguments(any());\n            return;\n        }\n        fail();\n\n    }", "signature": "void MustInCorrectExecuteActionWhenNewCreateStrategyThrowException()", "full_signature": "@Test public void MustInCorrectExecuteActionWhenNewCreateStrategyThrowException()", "class_method_signature": "IFieldPluginTest.MustInCorrectExecuteActionWhenNewCreateStrategyThrowException()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "withArguments", "whenNew", "thenReturn", "when", "after", "anyString", "load", "withArguments", "verifyNew", "after", "verify", "forClass", "process", "verify", "capture", "add", "verify", "mock", "thenReturn", "when", "getOrAdd", "mock", "thenReturn", "when", "getOrAdd", "thenThrow", "withArguments", "whenNew", "any", "execute", "getValue", "verifyStatic", "getOrAdd", "getCanonicalName", "withArguments", "verifyNew", "any", "fail"]}, "focal_class": {"identifier": "IFieldPlugin", "superclass": "", "interfaces": "implements IPlugin", "fields": [{"original_string": "private final IBootstrap<IBootstrapItem<String>> bootstrap;", "modifier": "private final", "type": "IBootstrap<IBootstrapItem<String>>", "declarator": "bootstrap", "var_name": "bootstrap"}], "methods": [{"identifier": "IFieldPlugin", "parameters": "(final IBootstrap<IBootstrapItem<String>> bootstrap)", "modifiers": "public", "return": "", "signature": " IFieldPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "full_signature": "public  IFieldPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "class_method_signature": "IFieldPlugin.IFieldPlugin(final IBootstrap<IBootstrapItem<String>> bootstrap)", "testcase": false, "constructor": true}, {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "IFieldPlugin.load()", "testcase": false, "constructor": false}], "file": "CoreFeatures/Field-plugins/PluginIField/src/main/java/info/smart_tools/smartactors/field_plugins/ifield_plugin/IFieldPlugin.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void load() throws PluginException {\n\n        try {\n            BootstrapItem item = new BootstrapItem(\"IFieldPlugin\");\n            item\n                .after(\"IOC\")\n                .process(() -> {\n                    try {\n                        IKey fieldKey = Keys.getOrAdd(IField.class.getCanonicalName());\n                        IOC.register(fieldKey, new ResolveByNameIocStrategy(\n                            (args) -> {\n                                String fieldName = String.valueOf(args[0]);\n                                try {\n                                    return new Field(IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), fieldName));\n                                } catch (InvalidArgumentException | ResolutionException e) {\n                                    throw new RuntimeException(\"Can't resolve IField: \", e);\n                                }\n                            }));\n                    } catch (ResolutionException e) {\n                        throw new ActionExecuteException(\"IField plugin can't load: can't get IField key\", e);\n                    } catch (InvalidArgumentException e) {\n                        throw new ActionExecuteException(\"IField plugin can't load: can't create strategy\", e);\n                    } catch (RegistrationException e) {\n                        throw new ActionExecuteException(\"IField plugin can't load: can't register new strategy\", e);\n                    }\n                });\n            bootstrap.add(item);\n        } catch (InvalidArgumentException e) {\n            throw new PluginException(\"Can't load IField plugin\", e);\n        }\n    }", "signature": "void load()", "full_signature": "@Override public void load()", "class_method_signature": "IFieldPlugin.load()", "testcase": false, "constructor": false, "invocations": ["process", "after", "getOrAdd", "getCanonicalName", "register", "valueOf", "resolve", "getOrAdd", "add"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}