{"test_class": {"identifier": "TakeSnapshotTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    TakeSnapshotTask task = new TakeSnapshotTask(null, null, null, from(now()));", "modifier": "@InjectMocks", "type": "TakeSnapshotTask", "declarator": "task = new TakeSnapshotTask(null, null, null, from(now()))", "var_name": "task"}, {"original_string": "@Mock\n    Scorer scorer;", "modifier": "@Mock", "type": "Scorer", "declarator": "scorer", "var_name": "scorer"}, {"original_string": "@Mock\n    Date date = new Date();", "modifier": "@Mock", "type": "Date", "declarator": "date = new Date()", "var_name": "date"}, {"original_string": "static final String ORGANIZATION_LOGIN = \"myLogin\";", "modifier": "static final", "type": "String", "declarator": "ORGANIZATION_LOGIN = \"myLogin\"", "var_name": "ORGANIZATION_LOGIN"}, {"original_string": "static final int ORGANIZATION_ID = 77;", "modifier": "static final", "type": "int", "declarator": "ORGANIZATION_ID = 77", "var_name": "ORGANIZATION_ID"}], "file": "catwatch-backend/src/test/java/org/zalando/catwatch/backend/github/TakeSnapshotTaskTest.java"}, "test_case": {"identifier": "testCountExternalContributors", "parameters": "()", "modifiers": "@Test /** * Tests the counting of external contributors */ public", "return": "void", "body": "@Test\n    /**\n     * Tests the counting of external contributors\n     */\n    public void testCountExternalContributors() throws Exception {\n        GHRepository.Contributor internal1 = new TestGHContributor(\"internal1\", 1);\n        GHRepository.Contributor internal2 = new TestGHContributor(\"internal2\", 2);\n        List<GHUser> members = Lists.newArrayList(internal1, internal2);\n        List<GHRepository.Contributor> contributors = Lists.newArrayList(internal1, internal2, new TestGHContributor(\"external\", 3));\n\n        RepositoryWrapper repo = mock(RepositoryWrapper.class);\n        when(repo.listContributors()).thenReturn(contributors);\n\n        // given\n        OrganizationWrapper org = mock(OrganizationWrapper.class);\n        when(org.listMembers()).thenReturn(members);\n        when(org.listTeams()).thenReturn(mockList(GHTeam.class, 4));\n        when(org.listRepositories()).thenReturn(Lists.newArrayList(repo));\n        when(org.contributorIsMember(any(Contributor.class))).thenCallRealMethod();\n\n        // when\n        Statistics statistics = task.collectStatistics(org);\n\n        assertThat(statistics.getExternalContributorsCount(), equalTo(1));\n        assertThat(statistics.getAllContributorsCount(), equalTo(3));\n    }", "signature": "void testCountExternalContributors()", "full_signature": "@Test /** * Tests the counting of external contributors */ public void testCountExternalContributors()", "class_method_signature": "TakeSnapshotTaskTest.testCountExternalContributors()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "newArrayList", "mock", "thenReturn", "when", "listContributors", "mock", "thenReturn", "when", "listMembers", "thenReturn", "when", "listTeams", "mockList", "thenReturn", "when", "listRepositories", "newArrayList", "thenCallRealMethod", "when", "contributorIsMember", "any", "collectStatistics", "assertThat", "getExternalContributorsCount", "equalTo", "assertThat", "getAllContributorsCount", "equalTo"]}, "focal_class": {"identifier": "TakeSnapshotTask", "superclass": "", "interfaces": "implements Callable<Snapshot>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TakeSnapshotTask.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TakeSnapshotTask.class)", "var_name": "logger"}, {"original_string": "private final GitHub gitHub;", "modifier": "private final", "type": "GitHub", "declarator": "gitHub", "var_name": "gitHub"}, {"original_string": "private final String organisationName;", "modifier": "private final", "type": "String", "declarator": "organisationName", "var_name": "organisationName"}, {"original_string": "private final Date snapshotDate;", "modifier": "private final", "type": "Date", "declarator": "snapshotDate", "var_name": "snapshotDate"}, {"original_string": "private Scorer scorer;", "modifier": "private", "type": "Scorer", "declarator": "scorer", "var_name": "scorer"}], "methods": [{"identifier": "TakeSnapshotTask", "parameters": "(final GitHub gitHub, final String organisationName, Scorer scorer, Date snapshotDate)", "modifiers": "public", "return": "", "signature": " TakeSnapshotTask(final GitHub gitHub, final String organisationName, Scorer scorer, Date snapshotDate)", "full_signature": "public  TakeSnapshotTask(final GitHub gitHub, final String organisationName, Scorer scorer, Date snapshotDate)", "class_method_signature": "TakeSnapshotTask.TakeSnapshotTask(final GitHub gitHub, final String organisationName, Scorer scorer, Date snapshotDate)", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "Snapshot", "signature": "Snapshot call()", "full_signature": "@Override public Snapshot call()", "class_method_signature": "TakeSnapshotTask.call()", "testcase": false, "constructor": false}, {"identifier": "collectStatistics", "parameters": "(final OrganizationWrapper organization)", "modifiers": "", "return": "Statistics", "signature": "Statistics collectStatistics(final OrganizationWrapper organization)", "full_signature": " Statistics collectStatistics(final OrganizationWrapper organization)", "class_method_signature": "TakeSnapshotTask.collectStatistics(final OrganizationWrapper organization)", "testcase": false, "constructor": false}, {"identifier": "collectProjects", "parameters": "(OrganizationWrapper organization)", "modifiers": "", "return": "Collection<Project>", "signature": "Collection<Project> collectProjects(OrganizationWrapper organization)", "full_signature": " Collection<Project> collectProjects(OrganizationWrapper organization)", "class_method_signature": "TakeSnapshotTask.collectProjects(OrganizationWrapper organization)", "testcase": false, "constructor": false}, {"identifier": "getProjectMaintainers", "parameters": "(RepositoryWrapper repository)", "modifiers": "", "return": "List<String>", "signature": "List<String> getProjectMaintainers(RepositoryWrapper repository)", "full_signature": " List<String> getProjectMaintainers(RepositoryWrapper repository)", "class_method_signature": "TakeSnapshotTask.getProjectMaintainers(RepositoryWrapper repository)", "testcase": false, "constructor": false}, {"identifier": "readCatwatchYaml", "parameters": "(RepositoryWrapper repository, Project project)", "modifiers": "", "return": "void", "signature": "void readCatwatchYaml(RepositoryWrapper repository, Project project)", "full_signature": " void readCatwatchYaml(RepositoryWrapper repository, Project project)", "class_method_signature": "TakeSnapshotTask.readCatwatchYaml(RepositoryWrapper repository, Project project)", "testcase": false, "constructor": false}, {"identifier": "collectContributors", "parameters": "(OrganizationWrapper organization)", "modifiers": "@SuppressWarnings(\"unchecked\")", "return": "Collection<Contributor>", "signature": "Collection<Contributor> collectContributors(OrganizationWrapper organization)", "full_signature": "@SuppressWarnings(\"unchecked\") Collection<Contributor> collectContributors(OrganizationWrapper organization)", "class_method_signature": "TakeSnapshotTask.collectContributors(OrganizationWrapper organization)", "testcase": false, "constructor": false}, {"identifier": "collectLanguages", "parameters": "(OrganizationWrapper organization)", "modifiers": "@SuppressWarnings(\"rawtypes\")", "return": "Collection<Language>", "signature": "Collection<Language> collectLanguages(OrganizationWrapper organization)", "full_signature": "@SuppressWarnings(\"rawtypes\") Collection<Language> collectLanguages(OrganizationWrapper organization)", "class_method_signature": "TakeSnapshotTask.collectLanguages(OrganizationWrapper organization)", "testcase": false, "constructor": false}], "file": "catwatch-backend/src/main/java/org/zalando/catwatch/backend/github/TakeSnapshotTask.java"}, "focal_method": {"identifier": "collectStatistics", "parameters": "(final OrganizationWrapper organization)", "modifiers": "", "return": "Statistics", "body": "Statistics collectStatistics(final OrganizationWrapper organization) throws IOException {\n        logger.info(\"Started collecting statistics for organization '{}'.\", organisationName);\n\n        Statistics statistics = new Statistics(organization.getId(), snapshotDate);\n\n        statistics.setPublicProjectCount(organization.listRepositories().size());\n        statistics.setMembersCount(organization.listMembers().size());\n        statistics.setTeamsCount(organization.listTeams().size());\n        statistics.setAllContributorsCount((int) organization.listRepositories().stream()\n                .map(RepositoryWrapper::listContributors)\n                .flatMap(List::stream)\n                .map(GHRepository.Contributor::getId)\n                .distinct()\n                .count());\n        statistics.setExternalContributorsCount((int) organization.listRepositories().stream()\n                .map(RepositoryWrapper::listContributors)\n                .flatMap(List::stream)\n                .filter(contributor -> !organization.contributorIsMember(contributor))\n                .map(GHRepository.Contributor::getId)\n                .distinct()\n                .count());\n        statistics.setAllStarsCount(organization.listRepositories().stream()\n                .map(RepositoryWrapper::getStarsCount)\n                .reduce(0, Integer::sum));\n        statistics.setAllForksCount(organization.listRepositories().stream()\n                .map(RepositoryWrapper::getForksCount)\n                .reduce(0, Integer::sum));\n        statistics.setAllSizeCount(organization.listRepositories().stream()\n                .map(RepositoryWrapper::getSize)\n                .reduce(0, Integer::sum));\n        statistics.setProgramLanguagesCount((int) organization.listRepositories().stream()\n                .map(RepositoryWrapper::getPrimaryLanguage)\n                .distinct()\n                .count());\n        statistics.setTagsCount((int) organization.listRepositories().stream()\n                .map(RepositoryWrapper::listTags)\n                .flatMap(List::stream)\n                .count());\n        statistics.setOrganizationName(organization.getLogin());\n\n        logger.info(\"Finished collecting statistics for organization '{}'.\", organisationName);\n\n        return statistics;\n    }", "signature": "Statistics collectStatistics(final OrganizationWrapper organization)", "full_signature": " Statistics collectStatistics(final OrganizationWrapper organization)", "class_method_signature": "TakeSnapshotTask.collectStatistics(final OrganizationWrapper organization)", "testcase": false, "constructor": false, "invocations": ["info", "getId", "setPublicProjectCount", "size", "listRepositories", "setMembersCount", "size", "listMembers", "setTeamsCount", "size", "listTeams", "setAllContributorsCount", "count", "distinct", "map", "flatMap", "map", "stream", "listRepositories", "setExternalContributorsCount", "count", "distinct", "map", "filter", "flatMap", "map", "stream", "listRepositories", "contributorIsMember", "setAllStarsCount", "reduce", "map", "stream", "listRepositories", "setAllForksCount", "reduce", "map", "stream", "listRepositories", "setAllSizeCount", "reduce", "map", "stream", "listRepositories", "setProgramLanguagesCount", "count", "distinct", "map", "stream", "listRepositories", "setTagsCount", "count", "flatMap", "map", "stream", "listRepositories", "setOrganizationName", "getLogin", "info"]}, "repository": {"repo_id": 35957836, "url": "https://github.com/zalando-incubator/catwatch", "language": "Java", "is_fork": false, "fork_count": 20, "stargazer_count": 55, "size": 1999, "license": "licensed"}}