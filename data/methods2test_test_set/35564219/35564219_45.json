{"test_class": {"identifier": "InputStreamWriterTest", "superclass": "extends RobolectricTest", "interfaces": "", "fields": [], "file": "library/src/test/java/com/climate/mirage/cache/disk/writers/InputStreamWriterTest.java"}, "test_case": {"identifier": "testFailsGracefullyOnFileNotFound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFailsGracefullyOnFileNotFound() throws Exception {\n\t\tInputStream is = new InputStream() {\n\t\t\tprivate int calls = 10;\n\t\t\t@Override\n\t\t\tpublic int read() throws IOException {\n\t\t\t\tif (calls < 20) return calls++;\n\t\t\t\telse return -1;\n\t\t\t}\n\t\t};\n\t\tInputStreamWriter writer = new InputStreamWriter(is);\n\t\tFile file = new File(\"http://invalid_file_name\");\n\t\tboolean result = writer.write(file);\n\t\tAssert.assertFalse(result);\n\t}", "signature": "void testFailsGracefullyOnFileNotFound()", "full_signature": "@Test public void testFailsGracefullyOnFileNotFound()", "class_method_signature": "InputStreamWriterTest.testFailsGracefullyOnFileNotFound()", "testcase": true, "constructor": false, "invocations": ["write", "assertFalse"]}, "focal_class": {"identifier": "InputStreamWriter", "superclass": "", "interfaces": "implements DiskCache.Writer", "fields": [{"original_string": "private InputStream in;", "modifier": "private", "type": "InputStream", "declarator": "in", "var_name": "in"}], "methods": [{"identifier": "InputStreamWriter", "parameters": "(InputStream in)", "modifiers": "public", "return": "", "signature": " InputStreamWriter(InputStream in)", "full_signature": "public  InputStreamWriter(InputStream in)", "class_method_signature": "InputStreamWriter.InputStreamWriter(InputStream in)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(File file)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean write(File file)", "full_signature": "@Override public boolean write(File file)", "class_method_signature": "InputStreamWriter.write(File file)", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/climate/mirage/cache/disk/writers/InputStreamWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(File file)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean write(File file) {\n\t\tFileOutputStream stream = null;\n\t\tFileLock lock = null;\n\t\ttry {\n\t\t\tstream = new FileOutputStream(file);\n\t\t\tlock = stream.getChannel().lock();\n\t\t\tint bufferSize = 1024;\n\t\t\tbyte[] buffer = new byte[bufferSize];\n\t\t\tint len = 0;\n\t\t\twhile ((len = in.read(buffer)) != -1) {\n\t\t\t\tstream.write(buffer, 0, len);\n\t\t\t}\n\t\t\treturn true;\n\t\t} catch (FileNotFoundException e) {\n\t\t\treturn false;\n\t\t} catch (IOException e) {\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tif (lock != null) {\n\t\t\t\ttry {\n\t\t\t\t\tlock.release();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tLog.w(\"InputStreamWriter\", \"Couldn't release lock\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tIOUtils.close(stream);\n\t\t}\n\t}", "signature": "boolean write(File file)", "full_signature": "@Override public boolean write(File file)", "class_method_signature": "InputStreamWriter.write(File file)", "testcase": false, "constructor": false, "invocations": ["lock", "getChannel", "read", "write", "release", "w", "close"]}, "repository": {"repo_id": 35564219, "url": "https://github.com/TheClimateCorporation/mirage", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 8, "size": 3928, "license": "licensed"}}