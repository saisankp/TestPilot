{"test_class": {"identifier": "HaversineDistanceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private HaversineDistance distance = new HaversineDistance();", "modifier": "private", "type": "HaversineDistance", "declarator": "distance = new HaversineDistance()", "var_name": "distance"}, {"original_string": "private DenseVector denseVector1 = new DenseVector(new double[] {40, 20});", "modifier": "private", "type": "DenseVector", "declarator": "denseVector1 = new DenseVector(new double[] {40, 20})", "var_name": "denseVector1"}, {"original_string": "private DenseVector denseVector2 = new DenseVector(new double[] {10, 60});", "modifier": "private", "type": "DenseVector", "declarator": "denseVector2 = new DenseVector(new double[] {10, 60})", "var_name": "denseVector2"}], "file": "core/src/test/java/com/alibaba/alink/operator/common/distance/HaversineDistanceTest.java"}, "test_case": {"identifier": "testUpdateLabel", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUpdateLabel() {\n        DenseVector label = distance.prepareVectorData(Tuple2.of(denseVector1, null)).getLabel();\n        Assert.assertEquals(label.size(), 3);\n        Assert.assertEquals(label.get(0), 0.642, 0.001);\n        Assert.assertEquals(label.get(1), 0.719, 0.001);\n        Assert.assertEquals(label.get(2), 0.262, 0.001);\n\n        FastDistanceMatrixData matrixData = initMatrixData();\n\n        Assert.assertEquals(matrixData.label.numCols(), 2);\n        Assert.assertEquals(matrixData.label.numRows(), 3);\n        double[] expect = new double[]{0.642, 0.719, 0.262, 0.173, 0.492, 0.852};\n        double[] predict = matrixData.getLabel().getData();\n\n        for (int i = 0; i < expect.length; i++) {\n            Assert.assertEquals(expect[i], predict[i], 0.001);\n        }\n    }", "signature": "void testUpdateLabel()", "full_signature": "@Test public void testUpdateLabel()", "class_method_signature": "HaversineDistanceTest.testUpdateLabel()", "testcase": true, "constructor": false, "invocations": ["getLabel", "prepareVectorData", "of", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "initMatrixData", "assertEquals", "numCols", "assertEquals", "numRows", "getData", "getLabel", "assertEquals"]}, "focal_class": {"identifier": "HaversineDistance", "superclass": "extends FastDistance", "interfaces": "", "fields": [{"original_string": "private static int EARTH_RADIUS = 6371;", "modifier": "private static", "type": "int", "declarator": "EARTH_RADIUS = 6371", "var_name": "EARTH_RADIUS"}, {"original_string": "private static double DEGREE_TO_RADIAN_CONSTANT = Math.PI / 180;", "modifier": "private static", "type": "double", "declarator": "DEGREE_TO_RADIAN_CONSTANT = Math.PI / 180", "var_name": "DEGREE_TO_RADIAN_CONSTANT"}, {"original_string": "private static int LABEL_SIZE = 3;", "modifier": "private static", "type": "int", "declarator": "LABEL_SIZE = 3", "var_name": "LABEL_SIZE"}, {"original_string": "private static int VECTOR_SIZE = 2;", "modifier": "private static", "type": "int", "declarator": "VECTOR_SIZE = 2", "var_name": "VECTOR_SIZE"}], "methods": [{"identifier": "haverSine", "parameters": "(double theta)", "modifiers": "static", "return": "double", "signature": "double haverSine(double theta)", "full_signature": "static double haverSine(double theta)", "class_method_signature": "HaversineDistance.haverSine(double theta)", "testcase": false, "constructor": false}, {"identifier": "degreeToRadian", "parameters": "(double data)", "modifiers": "static", "return": "double", "signature": "double degreeToRadian(double data)", "full_signature": "static double degreeToRadian(double data)", "class_method_signature": "HaversineDistance.degreeToRadian(double data)", "testcase": false, "constructor": false}, {"identifier": "cal", "parameters": "(double h)", "modifiers": "private static", "return": "double", "signature": "double cal(double h)", "full_signature": "private static double cal(double h)", "class_method_signature": "HaversineDistance.cal(double h)", "testcase": false, "constructor": false}, {"identifier": "vectorLabel", "parameters": "(double latitude, double longitude)", "modifiers": "private static", "return": "double[]", "signature": "double[] vectorLabel(double latitude, double longitude)", "full_signature": "private static double[] vectorLabel(double latitude, double longitude)", "class_method_signature": "HaversineDistance.vectorLabel(double latitude, double longitude)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(double latitude1, double longitude1, double latitude2, double longitude2)", "modifiers": "public", "return": "double", "signature": "double calc(double latitude1, double longitude1, double latitude2, double longitude2)", "full_signature": "public double calc(double latitude1, double longitude1, double latitude2, double longitude2)", "class_method_signature": "HaversineDistance.calc(double latitude1, double longitude1, double latitude2, double longitude2)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(double[] array1, double[] array2)", "modifiers": "@Override public", "return": "double", "signature": "double calc(double[] array1, double[] array2)", "full_signature": "@Override public double calc(double[] array1, double[] array2)", "class_method_signature": "HaversineDistance.calc(double[] array1, double[] array2)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(Vector vec1, Vector vec2)", "modifiers": "@Override public", "return": "double", "signature": "double calc(Vector vec1, Vector vec2)", "full_signature": "@Override public double calc(Vector vec1, Vector vec2)", "class_method_signature": "HaversineDistance.calc(Vector vec1, Vector vec2)", "testcase": false, "constructor": false}, {"identifier": "updateLabel", "parameters": "(FastDistanceData data)", "modifiers": "@Override public", "return": "void", "signature": "void updateLabel(FastDistanceData data)", "full_signature": "@Override public void updateLabel(FastDistanceData data)", "class_method_signature": "HaversineDistance.updateLabel(FastDistanceData data)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(FastDistanceVectorData left, FastDistanceVectorData right)", "modifiers": "@Override", "return": "double", "signature": "double calc(FastDistanceVectorData left, FastDistanceVectorData right)", "full_signature": "@Override double calc(FastDistanceVectorData left, FastDistanceVectorData right)", "class_method_signature": "HaversineDistance.calc(FastDistanceVectorData left, FastDistanceVectorData right)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(FastDistanceVectorData leftVector, FastDistanceMatrixData rightVectors, double[] res)", "modifiers": "@Override", "return": "void", "signature": "void calc(FastDistanceVectorData leftVector, FastDistanceMatrixData rightVectors, double[] res)", "full_signature": "@Override void calc(FastDistanceVectorData leftVector, FastDistanceMatrixData rightVectors, double[] res)", "class_method_signature": "HaversineDistance.calc(FastDistanceVectorData leftVector, FastDistanceMatrixData rightVectors, double[] res)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(FastDistanceMatrixData left, FastDistanceMatrixData right, DenseMatrix res)", "modifiers": "@Override", "return": "void", "signature": "void calc(FastDistanceMatrixData left, FastDistanceMatrixData right, DenseMatrix res)", "full_signature": "@Override void calc(FastDistanceMatrixData left, FastDistanceMatrixData right, DenseMatrix res)", "class_method_signature": "HaversineDistance.calc(FastDistanceMatrixData left, FastDistanceMatrixData right, DenseMatrix res)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/distance/HaversineDistance.java"}, "focal_method": {"identifier": "updateLabel", "parameters": "(FastDistanceData data)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void updateLabel(FastDistanceData data) {\n        if (data instanceof FastDistanceVectorData) {\n            FastDistanceVectorData vectorData = (FastDistanceVectorData)data;\n            Vector vec = vectorData.getVector();\n            Preconditions.checkState(vec.size() == VECTOR_SIZE,\n                \"HaversineDistance only supports vector size 2, the first value is latitude and the second value is \"\n                    + \"longitude\");\n            if (vectorData.label == null || vectorData.label.size() != LABEL_SIZE) {\n                vectorData.label = new DenseVector(LABEL_SIZE);\n            }\n            vectorData.label = new DenseVector(vectorLabel(vec.get(0), vec.get(1)));\n        } else {\n            FastDistanceMatrixData matrix = (FastDistanceMatrixData)data;\n            if (matrix.label == null || matrix.label.numRows() != LABEL_SIZE || matrix.label.numCols() != matrix.vectors\n                .numCols()) {\n                matrix.label = new DenseMatrix(LABEL_SIZE, matrix.vectors.numCols());\n            }\n            double[] matrixData = matrix.vectors.getData();\n            Preconditions.checkState(matrixData.length % VECTOR_SIZE == 0,\n                \"HaversineDistance only supports vector size 2, the first value is latitude and the second value is \"\n                    + \"longitude\");\n\n            double[] normData = matrix.label.getData();\n            int labelCnt = 0;\n            for (int i = 0; i < matrixData.length; i += VECTOR_SIZE) {\n                double[] norm = vectorLabel(matrixData[i], matrixData[i + 1]);\n                normData[labelCnt++] = norm[0];\n                normData[labelCnt++] = norm[1];\n                normData[labelCnt++] = norm[2];\n            }\n        }\n    }", "signature": "void updateLabel(FastDistanceData data)", "full_signature": "@Override public void updateLabel(FastDistanceData data)", "class_method_signature": "HaversineDistance.updateLabel(FastDistanceData data)", "testcase": false, "constructor": false, "invocations": ["getVector", "checkState", "size", "size", "vectorLabel", "get", "get", "numRows", "numCols", "numCols", "numCols", "getData", "checkState", "getData", "vectorLabel"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}