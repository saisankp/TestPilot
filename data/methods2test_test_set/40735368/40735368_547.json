{"test_class": {"identifier": "InclusionFeatureCollectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "FilterFactory ff = CommonFactoryFinder.getFilterFactory(null);", "modifier": "", "type": "FilterFactory", "declarator": "ff = CommonFactoryFinder.getFilterFactory(null)", "var_name": "ff"}, {"original_string": "GeometryFactory gf = new GeometryFactory();", "modifier": "", "type": "GeometryFactory", "declarator": "gf = new GeometryFactory()", "var_name": "gf"}], "file": "modules/unsupported/process-feature/src/test/java/org/geotools/process/vector/InclusionFeatureCollectionTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute() throws Exception {\n        SimpleFeatureTypeBuilder tb = new SimpleFeatureTypeBuilder();\n        tb.setName(\"featureType\");\n        tb.add(\"geometry\", Geometry.class);\n        tb.add(\"integer\", Integer.class);\n\n        GeometryFactory gf = new GeometryFactory();\n        SimpleFeatureBuilder b = new SimpleFeatureBuilder(tb.buildFeatureType());\n\n        DefaultFeatureCollection features = new DefaultFeatureCollection(null, b.getFeatureType());\n        DefaultFeatureCollection secondFeatures = new DefaultFeatureCollection(null, b\n                .getFeatureType());\n\n        Coordinate firstArray[] = new Coordinate[5];\n        for (int numFeatures = 0; numFeatures < 1; numFeatures++) {\n            firstArray[0] = new Coordinate(0, 0);\n            firstArray[1] = new Coordinate(1, 0);\n            firstArray[2] = new Coordinate(1, 1);\n            firstArray[3] = new Coordinate(0, 1);\n            firstArray[4] = new Coordinate(0, 0);\n            LinearRing shell = gf.createLinearRing(firstArray);\n            b.add(gf.createPolygon(shell, null));\n            b.add(0);\n\n            features.add(b.buildFeature(numFeatures + \"\"));\n\n        }\n        for (int numFeatures = 0; numFeatures < 1; numFeatures++) {\n            Coordinate array[] = new Coordinate[5];\n            array[0] = new Coordinate(firstArray[0].x - 1, firstArray[0].y - 1);\n            array[1] = new Coordinate(firstArray[1].x + 1, firstArray[1].y - 1);\n            array[2] = new Coordinate(firstArray[2].x + 1, firstArray[2].y + 1);\n            array[3] = new Coordinate(firstArray[3].x - 1, firstArray[3].y + 1);\n            array[4] = new Coordinate(firstArray[0].x - 1, firstArray[0].y - 1);\n            LinearRing shell = gf.createLinearRing(array);\n            b.add(gf.createPolygon(shell, null));\n            b.add(0);\n\n            secondFeatures.add(b.buildFeature(numFeatures + \"\"));\n        }\n        InclusionFeatureCollection process = new InclusionFeatureCollection();\n        SimpleFeatureCollection output = process.execute(features, secondFeatures);\n        assertEquals(1, output.size());\n        SimpleFeatureIterator iterator = output.features();\n\n        Geometry expected = (Geometry) features.features().next().getDefaultGeometry();\n        SimpleFeature sf = iterator.next();\n        assertTrue(expected.equals((Geometry) sf.getDefaultGeometry()));\n\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "InclusionFeatureCollectionTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["setName", "add", "add", "buildFeatureType", "getFeatureType", "getFeatureType", "createLinearRing", "add", "createPolygon", "add", "add", "buildFeature", "createLinearRing", "add", "createPolygon", "add", "add", "buildFeature", "execute", "assertEquals", "size", "features", "getDefaultGeometry", "next", "features", "next", "assertTrue", "equals", "getDefaultGeometry"]}, "focal_class": {"identifier": "InclusionFeatureCollection", "superclass": "", "interfaces": "implements VectorProcess", "fields": [], "methods": [{"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"first\", description = \"First feature collection\") SimpleFeatureCollection firstFeatures,\n            @DescribeParameter(name = \"second\", description = \"Second feature collection\") SimpleFeatureCollection secondFeatures)", "modifiers": "@DescribeResult(description = \"Output feature collection\") public", "return": "SimpleFeatureCollection", "signature": "SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"first\", description = \"First feature collection\") SimpleFeatureCollection firstFeatures,\n            @DescribeParameter(name = \"second\", description = \"Second feature collection\") SimpleFeatureCollection secondFeatures)", "full_signature": "@DescribeResult(description = \"Output feature collection\") public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"first\", description = \"First feature collection\") SimpleFeatureCollection firstFeatures,\n            @DescribeParameter(name = \"second\", description = \"Second feature collection\") SimpleFeatureCollection secondFeatures)", "class_method_signature": "InclusionFeatureCollection.execute(\n            @DescribeParameter(name = \"first\", description = \"First feature collection\") SimpleFeatureCollection firstFeatures,\n            @DescribeParameter(name = \"second\", description = \"Second feature collection\") SimpleFeatureCollection secondFeatures)", "testcase": false, "constructor": false}], "file": "modules/unsupported/process-feature/src/main/java/org/geotools/process/vector/InclusionFeatureCollection.java"}, "focal_method": {"identifier": "execute", "parameters": "(\n            @DescribeParameter(name = \"first\", description = \"First feature collection\") SimpleFeatureCollection firstFeatures,\n            @DescribeParameter(name = \"second\", description = \"Second feature collection\") SimpleFeatureCollection secondFeatures)", "modifiers": "@DescribeResult(description = \"Output feature collection\") public", "return": "SimpleFeatureCollection", "body": "@DescribeResult(description = \"Output feature collection\")\n    public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"first\", description = \"First feature collection\") SimpleFeatureCollection firstFeatures,\n            @DescribeParameter(name = \"second\", description = \"Second feature collection\") SimpleFeatureCollection secondFeatures) {\n        return new IncludedFeatureCollection(firstFeatures, secondFeatures);\n    }", "signature": "SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"first\", description = \"First feature collection\") SimpleFeatureCollection firstFeatures,\n            @DescribeParameter(name = \"second\", description = \"Second feature collection\") SimpleFeatureCollection secondFeatures)", "full_signature": "@DescribeResult(description = \"Output feature collection\") public SimpleFeatureCollection execute(\n            @DescribeParameter(name = \"first\", description = \"First feature collection\") SimpleFeatureCollection firstFeatures,\n            @DescribeParameter(name = \"second\", description = \"Second feature collection\") SimpleFeatureCollection secondFeatures)", "class_method_signature": "InclusionFeatureCollection.execute(\n            @DescribeParameter(name = \"first\", description = \"First feature collection\") SimpleFeatureCollection firstFeatures,\n            @DescribeParameter(name = \"second\", description = \"Second feature collection\") SimpleFeatureCollection secondFeatures)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}