{"test_class": {"identifier": "SearchIndexDaoHelperTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/SearchIndexDaoHelperTest.java"}, "test_case": {"identifier": "testActivateSearchIndexEntity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testActivateSearchIndexEntity()\n    {\n        // Create and persist multiple search index entities of the same type.\n        SearchIndexEntity searchIndexEntity = searchIndexDaoTestHelper.createSearchIndexEntity(SEARCH_INDEX_NAME, SEARCH_INDEX_TYPE, SEARCH_INDEX_STATUS);\n        SearchIndexEntity searchIndexEntity1 = searchIndexDaoTestHelper.createSearchIndexEntity(SEARCH_INDEX_NAME_2, SEARCH_INDEX_TYPE, SEARCH_INDEX_STATUS);\n\n        // Activate the first search index\n        searchIndexDaoHelper.activateSearchIndex(searchIndexEntity);\n\n        // Validate the results\n        assertEquals(Boolean.TRUE, searchIndexEntity.getActive());\n        assertEquals(Boolean.FALSE, searchIndexEntity1.getActive());\n    }", "signature": "void testActivateSearchIndexEntity()", "full_signature": "@Test public void testActivateSearchIndexEntity()", "class_method_signature": "SearchIndexDaoHelperTest.testActivateSearchIndexEntity()", "testcase": true, "constructor": false, "invocations": ["createSearchIndexEntity", "createSearchIndexEntity", "activateSearchIndex", "assertEquals", "getActive", "assertEquals", "getActive"]}, "focal_class": {"identifier": "SearchIndexDaoHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private SearchIndexDao searchIndexDao;", "modifier": "@Autowired\n    private", "type": "SearchIndexDao", "declarator": "searchIndexDao", "var_name": "searchIndexDao"}, {"original_string": "@Autowired\n    private SearchIndexStatusDaoHelper searchIndexStatusDaoHelper;", "modifier": "@Autowired\n    private", "type": "SearchIndexStatusDaoHelper", "declarator": "searchIndexStatusDaoHelper", "var_name": "searchIndexStatusDaoHelper"}, {"original_string": "@Autowired\n    private SearchIndexTypeDaoHelper searchIndexTypeDaoHelper;", "modifier": "@Autowired\n    private", "type": "SearchIndexTypeDaoHelper", "declarator": "searchIndexTypeDaoHelper", "var_name": "searchIndexTypeDaoHelper"}], "methods": [{"identifier": "getSearchIndexEntity", "parameters": "(SearchIndexKey searchIndexKey)", "modifiers": "public", "return": "SearchIndexEntity", "signature": "SearchIndexEntity getSearchIndexEntity(SearchIndexKey searchIndexKey)", "full_signature": "public SearchIndexEntity getSearchIndexEntity(SearchIndexKey searchIndexKey)", "class_method_signature": "SearchIndexDaoHelper.getSearchIndexEntity(SearchIndexKey searchIndexKey)", "testcase": false, "constructor": false}, {"identifier": "updateSearchIndexStatus", "parameters": "(SearchIndexKey searchIndexKey, String searchIndexStatus)", "modifiers": "public", "return": "void", "signature": "void updateSearchIndexStatus(SearchIndexKey searchIndexKey, String searchIndexStatus)", "full_signature": "public void updateSearchIndexStatus(SearchIndexKey searchIndexKey, String searchIndexStatus)", "class_method_signature": "SearchIndexDaoHelper.updateSearchIndexStatus(SearchIndexKey searchIndexKey, String searchIndexStatus)", "testcase": false, "constructor": false}, {"identifier": "activateSearchIndex", "parameters": "(SearchIndexEntity currentSearchIndexEntity)", "modifiers": "public", "return": "void", "signature": "void activateSearchIndex(SearchIndexEntity currentSearchIndexEntity)", "full_signature": "public void activateSearchIndex(SearchIndexEntity currentSearchIndexEntity)", "class_method_signature": "SearchIndexDaoHelper.activateSearchIndex(SearchIndexEntity currentSearchIndexEntity)", "testcase": false, "constructor": false}, {"identifier": "getActiveSearchIndex", "parameters": "(String indexType)", "modifiers": "public", "return": "String", "signature": "String getActiveSearchIndex(String indexType)", "full_signature": "public String getActiveSearchIndex(String indexType)", "class_method_signature": "SearchIndexDaoHelper.getActiveSearchIndex(String indexType)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/SearchIndexDaoHelper.java"}, "focal_method": {"identifier": "activateSearchIndex", "parameters": "(SearchIndexEntity currentSearchIndexEntity)", "modifiers": "public", "return": "void", "body": "public void activateSearchIndex(SearchIndexEntity currentSearchIndexEntity)\n    {\n        // Get all the search index entities of the respective type.\n        List<SearchIndexEntity> searchIndexEntities = searchIndexDao.getSearchIndexEntities(currentSearchIndexEntity.getType());\n\n        // Exclude the current search index entity and de-activate the other entities.\n        searchIndexEntities.stream().filter(searchIndexEntity -> !currentSearchIndexEntity.equals(searchIndexEntity)).collect(Collectors.toList())\n            .forEach(searchIndexEntity -> {\n                searchIndexEntity.setActive(Boolean.FALSE);\n                searchIndexDao.saveAndRefresh(searchIndexEntity);\n            });\n\n        // Set the current search index entity to active.\n        currentSearchIndexEntity.setActive(Boolean.TRUE);\n        searchIndexDao.saveAndRefresh(currentSearchIndexEntity);\n    }", "signature": "void activateSearchIndex(SearchIndexEntity currentSearchIndexEntity)", "full_signature": "public void activateSearchIndex(SearchIndexEntity currentSearchIndexEntity)", "class_method_signature": "SearchIndexDaoHelper.activateSearchIndex(SearchIndexEntity currentSearchIndexEntity)", "testcase": false, "constructor": false, "invocations": ["getSearchIndexEntities", "getType", "forEach", "collect", "filter", "stream", "equals", "toList", "setActive", "saveAndRefresh", "setActive", "saveAndRefresh"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}