{"test_class": {"identifier": "CombinedAtomicMassNumberRuleTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "static SmilesParser   smiles = new SmilesParser(SilentChemObjectBuilder.getInstance());", "modifier": "static", "type": "SmilesParser", "declarator": "smiles = new SmilesParser(SilentChemObjectBuilder.getInstance())", "var_name": "smiles"}, {"original_string": "static IAtomContainer molecule;", "modifier": "static", "type": "IAtomContainer", "declarator": "molecule", "var_name": "molecule"}], "file": "descriptor/cip/src/test/java/org/openscience/cdk/geometry/cip/rules/CombinedAtomicMassNumberRuleTest.java"}, "test_case": {"identifier": "testCompare", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompare() {\n        ILigand ligand1 = new Ligand(molecule, new VisitedAtoms(), molecule.getAtom(1), molecule.getAtom(0));\n        ILigand ligand2 = new Ligand(molecule, new VisitedAtoms(), molecule.getAtom(1), molecule.getAtom(2));\n        ISequenceSubRule<ILigand> rule = new CombinedAtomicMassNumberRule();\n        Assert.assertEquals(-1, rule.compare(ligand1, ligand2));\n        Assert.assertEquals(1, rule.compare(ligand2, ligand1));\n    }", "signature": "void testCompare()", "full_signature": "@Test public void testCompare()", "class_method_signature": "CombinedAtomicMassNumberRuleTest.testCompare()", "testcase": true, "constructor": false, "invocations": ["getAtom", "getAtom", "getAtom", "getAtom", "assertEquals", "compare", "assertEquals", "compare"]}, "focal_class": {"identifier": "CombinedAtomicMassNumberRule", "superclass": "", "interfaces": "implements ISequenceSubRule<ILigand>", "fields": [{"original_string": "MassNumberRule   massNumberRule   = new MassNumberRule();", "modifier": "", "type": "MassNumberRule", "declarator": "massNumberRule   = new MassNumberRule()", "var_name": "massNumberRule"}, {"original_string": "AtomicNumberRule atomicNumberRule = new AtomicNumberRule();", "modifier": "", "type": "AtomicNumberRule", "declarator": "atomicNumberRule = new AtomicNumberRule()", "var_name": "atomicNumberRule"}], "methods": [{"identifier": "compare", "parameters": "(ILigand ligand1, ILigand ligand2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(ILigand ligand1, ILigand ligand2)", "full_signature": "@Override public int compare(ILigand ligand1, ILigand ligand2)", "class_method_signature": "CombinedAtomicMassNumberRule.compare(ILigand ligand1, ILigand ligand2)", "testcase": false, "constructor": false}], "file": "descriptor/cip/src/main/java/org/openscience/cdk/geometry/cip/rules/CombinedAtomicMassNumberRule.java"}, "focal_method": {"identifier": "compare", "parameters": "(ILigand ligand1, ILigand ligand2)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int compare(ILigand ligand1, ILigand ligand2) {\n        int atomicNumberComp = atomicNumberRule.compare(ligand1, ligand2);\n        if (atomicNumberComp != 0) return atomicNumberComp;\n\n        int massNumberComp = massNumberRule.compare(ligand1, ligand2);\n        if (massNumberComp != 0) return massNumberComp;\n\n        if (\"H\".equals(ligand1.getLigandAtom().getSymbol())) {\n            // both atoms are hydrogens\n            return 0;\n        }\n\n        return massNumberComp;\n    }", "signature": "int compare(ILigand ligand1, ILigand ligand2)", "full_signature": "@Override public int compare(ILigand ligand1, ILigand ligand2)", "class_method_signature": "CombinedAtomicMassNumberRule.compare(ILigand ligand1, ILigand ligand2)", "testcase": false, "constructor": false, "invocations": ["compare", "compare", "equals", "getSymbol", "getLigandAtom"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}