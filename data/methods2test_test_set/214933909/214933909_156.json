{"test_class": {"identifier": "PublicStrategyServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private PublicStrategyService publicStrategyService;", "modifier": "@Mock\n    private", "type": "PublicStrategyService", "declarator": "publicStrategyService", "var_name": "publicStrategyService"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/service/PublicStrategyServiceTest.java"}, "test_case": {"identifier": "validatePermisionTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validatePermisionTest() throws SQLException {\n        LoginUser user = LoginUser.builder().id(1L).build();\n        PublicStrategy publicStrategy = PublicStrategy.builder().id(1L).name(\"name\").build();\n        Errors errors = new BeanPropertyBindingResult(publicStrategy, \"publicStrategy\", true, 256);\n        Assert.assertTrue(publicStrategyService.validatePermision(user, errors).validate().isValid());\n    }", "signature": "void validatePermisionTest()", "full_signature": "@Test public void validatePermisionTest()", "class_method_signature": "PublicStrategyServiceTest.validatePermisionTest()", "testcase": true, "constructor": false, "invocations": ["build", "id", "builder", "build", "name", "id", "builder", "assertTrue", "isValid", "validate", "validatePermision"]}, "focal_class": {"identifier": "PublicStrategyService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private Message message;", "modifier": "@Autowired\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@Autowired\n    private PublicStrategyDao publicStrategyDao;", "modifier": "@Autowired\n    private", "type": "PublicStrategyDao", "declarator": "publicStrategyDao", "var_name": "publicStrategyDao"}, {"original_string": "@Autowired\n    private PermissionService permissionService;", "modifier": "@Autowired\n    private", "type": "PermissionService", "declarator": "permissionService", "var_name": "permissionService"}], "methods": [{"identifier": "validatePermision", "parameters": "(LoginUser user, Errors errors)", "modifiers": "public", "return": "ValidatorChain", "signature": "ValidatorChain validatePermision(LoginUser user, Errors errors)", "full_signature": "public ValidatorChain validatePermision(LoginUser user, Errors errors)", "class_method_signature": "PublicStrategyService.validatePermision(LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "findPublicShardingStrategyPageList", "parameters": "(Paging<PublicStrategy> paging)", "modifiers": "public", "return": "ListResult<PublicStrategyView>", "signature": "ListResult<PublicStrategyView> findPublicShardingStrategyPageList(Paging<PublicStrategy> paging)", "full_signature": "public ListResult<PublicStrategyView> findPublicShardingStrategyPageList(Paging<PublicStrategy> paging)", "class_method_signature": "PublicStrategyService.findPublicShardingStrategyPageList(Paging<PublicStrategy> paging)", "testcase": false, "constructor": false}, {"identifier": "isNotExistByName", "parameters": "(PublicStrategy publicStrategy)", "modifiers": "public", "return": "boolean", "signature": "boolean isNotExistByName(PublicStrategy publicStrategy)", "full_signature": "public boolean isNotExistByName(PublicStrategy publicStrategy)", "class_method_signature": "PublicStrategyService.isNotExistByName(PublicStrategy publicStrategy)", "testcase": false, "constructor": false}, {"identifier": "getStrategyClassName", "parameters": "(DatabaseSet databaseSet)", "modifiers": "public", "return": "String", "signature": "String getStrategyClassName(DatabaseSet databaseSet)", "full_signature": "public String getStrategyClassName(DatabaseSet databaseSet)", "class_method_signature": "PublicStrategyService.getStrategyClassName(DatabaseSet databaseSet)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/service/PublicStrategyService.java"}, "focal_method": {"identifier": "validatePermision", "parameters": "(LoginUser user, Errors errors)", "modifiers": "public", "return": "ValidatorChain", "body": "public ValidatorChain validatePermision(LoginUser user, Errors errors) {\n        return ValidatorChain.newInstance().controllerValidate(errors)\n                .addAssert(() -> permissionService.isManagerById(user.getId()), message.permisson_user_crud);\n    }", "signature": "ValidatorChain validatePermision(LoginUser user, Errors errors)", "full_signature": "public ValidatorChain validatePermision(LoginUser user, Errors errors)", "class_method_signature": "PublicStrategyService.validatePermision(LoginUser user, Errors errors)", "testcase": false, "constructor": false, "invocations": ["addAssert", "controllerValidate", "newInstance", "isManagerById", "getId"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}