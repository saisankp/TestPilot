{"test_class": {"identifier": "NTv2GridShiftFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final URL TEST_GRID = NTv2GridShiftFactoryTest.class.getResource(\"BALR2009.gsb\");", "modifier": "private static final", "type": "URL", "declarator": "TEST_GRID = NTv2GridShiftFactoryTest.class.getResource(\"BALR2009.gsb\")", "var_name": "TEST_GRID"}, {"original_string": "private static final URL INEXISTENT_GRID = NTv2GridShiftFactoryTest.class.getResource(\"this_NTv2_grid_does_not_exist\");", "modifier": "private static final", "type": "URL", "declarator": "INEXISTENT_GRID = NTv2GridShiftFactoryTest.class.getResource(\"this_NTv2_grid_does_not_exist\")", "var_name": "INEXISTENT_GRID"}, {"original_string": "private static final URL MALFORMED_GRID = NTv2GridShiftFactoryTest.class.getResource(\"malformedNTv2grid.gsb\");", "modifier": "private static final", "type": "URL", "declarator": "MALFORMED_GRID = NTv2GridShiftFactoryTest.class.getResource(\"malformedNTv2grid.gsb\")", "var_name": "MALFORMED_GRID"}, {"original_string": "private NTv2GridShiftFactory factory;", "modifier": "private", "type": "NTv2GridShiftFactory", "declarator": "factory", "var_name": "factory"}], "file": "modules/library/referencing/src/test/java/org/geotools/referencing/factory/gridshift/NTv2GridShiftFactoryTest.java"}, "test_case": {"identifier": "testCreateNTv2Grid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateNTv2Grid() {\n        \n        // Try to create a null grid\n        boolean factoryExceptionThrown = false;\n        try {\n            factory.createNTv2Grid(null);\n        } catch (FactoryException e) {\n            factoryExceptionThrown = true;\n        }\n        assertTrue(factoryExceptionThrown);\n\n        // Try to create a grid from an inexistent resource\n        factoryExceptionThrown = false;\n        try {\n            factory.createNTv2Grid(INEXISTENT_GRID); // Will log a FINEST message\n        } catch (FactoryException e) {\n            factoryExceptionThrown = true;\n        }\n        assertTrue(factoryExceptionThrown);\n        \n        // Try to create a grid from a corrupt NTv2 grid file\n        factoryExceptionThrown = false;\n        try {\n            factory.createNTv2Grid(MALFORMED_GRID);  // Will log a SEVERE message\n        } catch (FactoryException e) {\n            factoryExceptionThrown = true;\n        }\n        assertTrue(factoryExceptionThrown);\n    \n        // Create a grid from the test file\n        factoryExceptionThrown = false;\n        GridShiftFile grid = null;\n        try {\n            grid = factory.createNTv2Grid(TEST_GRID);\n        } catch (FactoryException e) {\n            factoryExceptionThrown = true;\n        }\n        assertFalse(factoryExceptionThrown);\n        assertNotNull(grid);\n        assertTrue(grid.isLoaded());\n    }", "signature": "void testCreateNTv2Grid()", "full_signature": "@Test public void testCreateNTv2Grid()", "class_method_signature": "NTv2GridShiftFactoryTest.testCreateNTv2Grid()", "testcase": true, "constructor": false, "invocations": ["createNTv2Grid", "assertTrue", "createNTv2Grid", "assertTrue", "createNTv2Grid", "assertTrue", "createNTv2Grid", "assertFalse", "assertNotNull", "assertTrue", "isLoaded"]}, "focal_class": {"identifier": "NTv2GridShiftFactory", "superclass": "extends ReferencingFactory", "interfaces": "implements BufferedFactory", "fields": [{"original_string": "private static final int GRID_CACHE_HARD_REFERENCES = 10;", "modifier": "private static final", "type": "int", "declarator": "GRID_CACHE_HARD_REFERENCES = 10", "var_name": "GRID_CACHE_HARD_REFERENCES"}, {"original_string": "protected static final Logger LOGGER = Logging.getLogger(\"org.geotools.referencing\");", "modifier": "protected static final", "type": "Logger", "declarator": "LOGGER = Logging.getLogger(\"org.geotools.referencing\")", "var_name": "LOGGER"}, {"original_string": "private SoftValueHashMap<String, GridShiftFile> ntv2GridCache;", "modifier": "private", "type": "SoftValueHashMap<String, GridShiftFile>", "declarator": "ntv2GridCache", "var_name": "ntv2GridCache"}], "methods": [{"identifier": "NTv2GridShiftFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " NTv2GridShiftFactory()", "full_signature": "public  NTv2GridShiftFactory()", "class_method_signature": "NTv2GridShiftFactory.NTv2GridShiftFactory()", "testcase": false, "constructor": true}, {"identifier": "NTv2GridShiftFactory", "parameters": "(final int priority)", "modifiers": "public", "return": "", "signature": " NTv2GridShiftFactory(final int priority)", "full_signature": "public  NTv2GridShiftFactory(final int priority)", "class_method_signature": "NTv2GridShiftFactory.NTv2GridShiftFactory(final int priority)", "testcase": false, "constructor": true}, {"identifier": "isNTv2Grid", "parameters": "(URL location)", "modifiers": "public", "return": "boolean", "signature": "boolean isNTv2Grid(URL location)", "full_signature": "public boolean isNTv2Grid(URL location)", "class_method_signature": "NTv2GridShiftFactory.isNTv2Grid(URL location)", "testcase": false, "constructor": false}, {"identifier": "createNTv2Grid", "parameters": "(URL gridLocation)", "modifiers": "public", "return": "GridShiftFile", "signature": "GridShiftFile createNTv2Grid(URL gridLocation)", "full_signature": "public GridShiftFile createNTv2Grid(URL gridLocation)", "class_method_signature": "NTv2GridShiftFactory.createNTv2Grid(URL gridLocation)", "testcase": false, "constructor": false}, {"identifier": "isNTv2GridFileValid", "parameters": "(URL url)", "modifiers": "protected", "return": "boolean", "signature": "boolean isNTv2GridFileValid(URL url)", "full_signature": "protected boolean isNTv2GridFileValid(URL url)", "class_method_signature": "NTv2GridShiftFactory.isNTv2GridFileValid(URL url)", "testcase": false, "constructor": false}, {"identifier": "loadNTv2Grid", "parameters": "(URL location)", "modifiers": "private", "return": "GridShiftFile", "signature": "GridShiftFile loadNTv2Grid(URL location)", "full_signature": "private GridShiftFile loadNTv2Grid(URL location)", "class_method_signature": "NTv2GridShiftFactory.loadNTv2Grid(URL location)", "testcase": false, "constructor": false}], "file": "modules/library/referencing/src/main/java/org/geotools/referencing/factory/gridshift/NTv2GridShiftFactory.java"}, "focal_method": {"identifier": "createNTv2Grid", "parameters": "(URL gridLocation)", "modifiers": "public", "return": "GridShiftFile", "body": "public GridShiftFile createNTv2Grid(URL gridLocation) throws FactoryException {\n        if(gridLocation == null) {\n            throw new FactoryException(\"The grid location must be not null\");\n        }\n        \n        synchronized (ntv2GridCache) { // Prevent simultaneous threads trying to load same grid\n            GridShiftFile grid = ntv2GridCache.get(gridLocation.toExternalForm());\n            if (grid != null) { // Cached:\n                return grid; // - Return\n            } else { // Not cached:\n                if (gridLocation != null) {\n                    grid = loadNTv2Grid(gridLocation); // - Load\n                    if (grid != null) {\n                        ntv2GridCache.put(gridLocation.toExternalForm(), grid); // - Cache\n                        return grid; // - Return\n                    }\n                }\n                throw new FactoryException(\"NTv2 Grid \" + gridLocation + \" could not be created.\");\n            }\n        }\n    }", "signature": "GridShiftFile createNTv2Grid(URL gridLocation)", "full_signature": "public GridShiftFile createNTv2Grid(URL gridLocation)", "class_method_signature": "NTv2GridShiftFactory.createNTv2Grid(URL gridLocation)", "testcase": false, "constructor": false, "invocations": ["get", "toExternalForm", "loadNTv2Grid", "put", "toExternalForm"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}