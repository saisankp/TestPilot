{"test_class": {"identifier": "AgentManagementConstraintTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String INSTANCE_ID = \"1234\";", "modifier": "private static final", "type": "String", "declarator": "INSTANCE_ID = \"1234\"", "var_name": "INSTANCE_ID"}, {"original_string": "private static final String INSTANCE_GROUP_ID = \"instanceGroupId\";", "modifier": "private static final", "type": "String", "declarator": "INSTANCE_GROUP_ID = \"instanceGroupId\"", "var_name": "INSTANCE_GROUP_ID"}, {"original_string": "private final SchedulerConfiguration schedulerConfiguration = mock(SchedulerConfiguration.class);", "modifier": "private final", "type": "SchedulerConfiguration", "declarator": "schedulerConfiguration = mock(SchedulerConfiguration.class)", "var_name": "schedulerConfiguration"}, {"original_string": "private final AgentManagementService agentManagementService = mock(AgentManagementService.class);", "modifier": "private final", "type": "AgentManagementService", "declarator": "agentManagementService = mock(AgentManagementService.class)", "var_name": "agentManagementService"}, {"original_string": "private final AgentStatusMonitor agentStatusMonitor = mock(AgentStatusMonitor.class);", "modifier": "private final", "type": "AgentStatusMonitor", "declarator": "agentStatusMonitor = mock(AgentStatusMonitor.class)", "var_name": "agentStatusMonitor"}, {"original_string": "private final AgentManagementConstraint agentManagementConstraint = new AgentManagementConstraint(schedulerConfiguration, agentManagementService, agentStatusMonitor);", "modifier": "private final", "type": "AgentManagementConstraint", "declarator": "agentManagementConstraint = new AgentManagementConstraint(schedulerConfiguration, agentManagementService, agentStatusMonitor)", "var_name": "agentManagementConstraint"}], "file": "titus-server-master/src/test/java/com/netflix/titus/master/scheduler/constraint/AgentManagementConstraintTest.java"}, "test_case": {"identifier": "instanceOnlyRunsGpuTasks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void instanceOnlyRunsGpuTasks() {\n        AgentInstance instance = createAgentInstance(INSTANCE_GROUP_ID);\n        when(agentManagementService.findAgentInstance(INSTANCE_ID)).thenReturn(Optional.of(instance));\n        AgentInstanceGroup agentInstanceGroup = createAgentInstanceGroup(InstanceGroupLifecycleState.Active, Tier.Flex, 1);\n        when(agentManagementService.findInstanceGroup(INSTANCE_GROUP_ID)).thenReturn(Optional.of(agentInstanceGroup));\n\n        JobDescriptor<BatchJobExt> descriptor = oneTaskBatchJobDescriptor()\n                .but(jd -> jd.getContainer().but(c -> c.toBuilder().withContainerResources(\n                        c.getContainerResources().toBuilder().withGpu(0).build()\n                )));\n        Job<BatchJobExt> gpuBatchJob = JobGenerator.batchJobs(descriptor).getValue();\n        TaskRequest taskRequest = createTaskRequest(gpuBatchJob);\n        Result result = agentManagementConstraint.evaluate(taskRequest,\n                createVirtualMachineCurrentStateMock(INSTANCE_ID), mock(TaskTrackerState.class));\n        assertThat(result.isSuccessful()).isFalse();\n        assertThat(result.getFailureReason()).isEqualToIgnoringCase(\"Instance group does not run non gpu tasks\");\n    }", "signature": "void instanceOnlyRunsGpuTasks()", "full_signature": "@Test public void instanceOnlyRunsGpuTasks()", "class_method_signature": "AgentManagementConstraintTest.instanceOnlyRunsGpuTasks()", "testcase": true, "constructor": false, "invocations": ["createAgentInstance", "thenReturn", "when", "findAgentInstance", "of", "createAgentInstanceGroup", "thenReturn", "when", "findInstanceGroup", "of", "but", "oneTaskBatchJobDescriptor", "but", "getContainer", "withContainerResources", "toBuilder", "build", "withGpu", "toBuilder", "getContainerResources", "getValue", "batchJobs", "createTaskRequest", "evaluate", "createVirtualMachineCurrentStateMock", "mock", "isFalse", "assertThat", "isSuccessful", "isEqualToIgnoringCase", "assertThat", "getFailureReason"]}, "focal_class": {"identifier": "AgentManagementConstraint", "superclass": "", "interfaces": "implements SystemConstraint", "fields": [{"original_string": "public static final String NAME = \"AgentManagementConstraint\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"AgentManagementConstraint\"", "var_name": "NAME"}, {"original_string": "private static final Result VALID = new Result(true, null);", "modifier": "private static final", "type": "Result", "declarator": "VALID = new Result(true, null)", "var_name": "VALID"}, {"original_string": "private static final Set<String> FAILURE_REASONS = Stream.of(Failure.values())\n            .map(f -> f.toResult().getFailureReason())\n            .collect(Collectors.toSet());", "modifier": "private static final", "type": "Set<String>", "declarator": "FAILURE_REASONS = Stream.of(Failure.values())\n            .map(f -> f.toResult().getFailureReason())\n            .collect(Collectors.toSet())", "var_name": "FAILURE_REASONS"}, {"original_string": "private final SchedulerConfiguration schedulerConfiguration;", "modifier": "private final", "type": "SchedulerConfiguration", "declarator": "schedulerConfiguration", "var_name": "schedulerConfiguration"}, {"original_string": "private final AgentManagementService agentManagementService;", "modifier": "private final", "type": "AgentManagementService", "declarator": "agentManagementService", "var_name": "agentManagementService"}, {"original_string": "private final AgentStatusMonitor agentStatusMonitor;", "modifier": "private final", "type": "AgentStatusMonitor", "declarator": "agentStatusMonitor", "var_name": "agentStatusMonitor"}], "methods": [{"identifier": "isAgentManagementConstraintReason", "parameters": "(String reason)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAgentManagementConstraintReason(String reason)", "full_signature": "public static boolean isAgentManagementConstraintReason(String reason)", "class_method_signature": "AgentManagementConstraint.isAgentManagementConstraintReason(String reason)", "testcase": false, "constructor": false}, {"identifier": "AgentManagementConstraint", "parameters": "(SchedulerConfiguration schedulerConfiguration,\n                                     AgentManagementService agentManagementService,\n                                     AgentStatusMonitor agentStatusMonitor)", "modifiers": "@Inject public", "return": "", "signature": " AgentManagementConstraint(SchedulerConfiguration schedulerConfiguration,\n                                     AgentManagementService agentManagementService,\n                                     AgentStatusMonitor agentStatusMonitor)", "full_signature": "@Inject public  AgentManagementConstraint(SchedulerConfiguration schedulerConfiguration,\n                                     AgentManagementService agentManagementService,\n                                     AgentStatusMonitor agentStatusMonitor)", "class_method_signature": "AgentManagementConstraint.AgentManagementConstraint(SchedulerConfiguration schedulerConfiguration,\n                                     AgentManagementService agentManagementService,\n                                     AgentStatusMonitor agentStatusMonitor)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "AgentManagementConstraint.getName()", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "modifiers": "@Override public", "return": "Result", "signature": "Result evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "full_signature": "@Override public Result evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "class_method_signature": "AgentManagementConstraint.evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "testcase": false, "constructor": false}, {"identifier": "evaluateInstanceGroup", "parameters": "(AgentInstanceGroup instanceGroup)", "modifiers": "private", "return": "Result", "signature": "Result evaluateInstanceGroup(AgentInstanceGroup instanceGroup)", "full_signature": "private Result evaluateInstanceGroup(AgentInstanceGroup instanceGroup)", "class_method_signature": "AgentManagementConstraint.evaluateInstanceGroup(AgentInstanceGroup instanceGroup)", "testcase": false, "constructor": false}, {"identifier": "evaluateInstance", "parameters": "(AgentInstance instance)", "modifiers": "private", "return": "Result", "signature": "Result evaluateInstance(AgentInstance instance)", "full_signature": "private Result evaluateInstance(AgentInstance instance)", "class_method_signature": "AgentManagementConstraint.evaluateInstance(AgentInstance instance)", "testcase": false, "constructor": false}, {"identifier": "evaluateTask", "parameters": "(V3QueueableTask taskRequest, AgentInstanceGroup instanceGroup, AgentInstance instance)", "modifiers": "private", "return": "Result", "signature": "Result evaluateTask(V3QueueableTask taskRequest, AgentInstanceGroup instanceGroup, AgentInstance instance)", "full_signature": "private Result evaluateTask(V3QueueableTask taskRequest, AgentInstanceGroup instanceGroup, AgentInstance instance)", "class_method_signature": "AgentManagementConstraint.evaluateTask(V3QueueableTask taskRequest, AgentInstanceGroup instanceGroup, AgentInstance instance)", "testcase": false, "constructor": false}, {"identifier": "isGpuTask", "parameters": "(V3QueueableTask taskRequest)", "modifiers": "private", "return": "boolean", "signature": "boolean isGpuTask(V3QueueableTask taskRequest)", "full_signature": "private boolean isGpuTask(V3QueueableTask taskRequest)", "class_method_signature": "AgentManagementConstraint.isGpuTask(V3QueueableTask taskRequest)", "testcase": false, "constructor": false}, {"identifier": "evaluateInstanceGroupAttributes", "parameters": "(AgentInstanceGroup instanceGroup)", "modifiers": "private", "return": "Result", "signature": "Result evaluateInstanceGroupAttributes(AgentInstanceGroup instanceGroup)", "full_signature": "private Result evaluateInstanceGroupAttributes(AgentInstanceGroup instanceGroup)", "class_method_signature": "AgentManagementConstraint.evaluateInstanceGroupAttributes(AgentInstanceGroup instanceGroup)", "testcase": false, "constructor": false}, {"identifier": "evaluateAgentInstanceAttributes", "parameters": "(AgentInstance agentInstance)", "modifiers": "private", "return": "Result", "signature": "Result evaluateAgentInstanceAttributes(AgentInstance agentInstance)", "full_signature": "private Result evaluateAgentInstanceAttributes(AgentInstance agentInstance)", "class_method_signature": "AgentManagementConstraint.evaluateAgentInstanceAttributes(AgentInstance agentInstance)", "testcase": false, "constructor": false}, {"identifier": "evaluateSchedulingAttributes", "parameters": "(Map<String, String> attributes)", "modifiers": "private", "return": "Result", "signature": "Result evaluateSchedulingAttributes(Map<String, String> attributes)", "full_signature": "private Result evaluateSchedulingAttributes(Map<String, String> attributes)", "class_method_signature": "AgentManagementConstraint.evaluateSchedulingAttributes(Map<String, String> attributes)", "testcase": false, "constructor": false}, {"identifier": "evaluateRelocationAttributes", "parameters": "(Map<String, String> attributes)", "modifiers": "private", "return": "Result", "signature": "Result evaluateRelocationAttributes(Map<String, String> attributes)", "full_signature": "private Result evaluateRelocationAttributes(Map<String, String> attributes)", "class_method_signature": "AgentManagementConstraint.evaluateRelocationAttributes(Map<String, String> attributes)", "testcase": false, "constructor": false}, {"identifier": "taskCanTolerateTaints", "parameters": "(V3QueueableTask taskRequest, AgentInstanceGroup instanceGroup, AgentInstance instance)", "modifiers": "private", "return": "boolean", "signature": "boolean taskCanTolerateTaints(V3QueueableTask taskRequest, AgentInstanceGroup instanceGroup, AgentInstance instance)", "full_signature": "private boolean taskCanTolerateTaints(V3QueueableTask taskRequest, AgentInstanceGroup instanceGroup, AgentInstance instance)", "class_method_signature": "AgentManagementConstraint.taskCanTolerateTaints(V3QueueableTask taskRequest, AgentInstanceGroup instanceGroup, AgentInstance instance)", "testcase": false, "constructor": false}], "file": "titus-server-master/src/main/java/com/netflix/titus/master/scheduler/constraint/AgentManagementConstraint.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState) {\n        V3QueueableTask v3QueueableTask = (V3QueueableTask) taskRequest;\n        Optional<AgentInstance> instanceOpt = SchedulerUtils.findInstance(agentManagementService, schedulerConfiguration.getInstanceAttributeName(), targetVM);\n        if (!instanceOpt.isPresent()) {\n            return Failure.INSTANCE_NOT_FOUND.toResult();\n        }\n\n        AgentInstance instance = instanceOpt.get();\n        String instanceGroupId = instance.getInstanceGroupId();\n\n        Optional<AgentInstanceGroup> instanceGroupOpt = agentManagementService.findInstanceGroup(instanceGroupId);\n        if (!instanceGroupOpt.isPresent()) {\n            return Failure.INSTANCE_GROUP_NOT_FOUND.toResult();\n        }\n\n        AgentInstanceGroup instanceGroup = instanceGroupOpt.get();\n        Result instanceGroupEvaluationResult = evaluateInstanceGroup(instanceGroup);\n        if (instanceGroupEvaluationResult != VALID) {\n            return instanceGroupEvaluationResult;\n        }\n\n        Result instanceEvaluationResult = evaluateInstance(instance);\n        if (instanceEvaluationResult != VALID) {\n            return instanceEvaluationResult;\n        }\n\n        return evaluateTask(v3QueueableTask, instanceGroup, instance);\n    }", "signature": "Result evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "full_signature": "@Override public Result evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "class_method_signature": "AgentManagementConstraint.evaluate(TaskRequest taskRequest, VirtualMachineCurrentState targetVM, TaskTrackerState taskTrackerState)", "testcase": false, "constructor": false, "invocations": ["findInstance", "getInstanceAttributeName", "isPresent", "toResult", "get", "getInstanceGroupId", "findInstanceGroup", "isPresent", "toResult", "get", "evaluateInstanceGroup", "evaluateInstance", "evaluateTask"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}