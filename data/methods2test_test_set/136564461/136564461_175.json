{"test_class": {"identifier": "ArrayUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "eddsa/src/test/java/io/moatwel/util/ArrayUtilsTest.java"}, "test_case": {"identifier": "success_toBinaryArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void success_toBinaryArray() {\n        BigInteger integer = new BigInteger(\"2\");   // 00000010\n        BigInteger integer1 = new BigInteger(\"17\"); // 00010001\n        BigInteger integer2 = new BigInteger(\"257\"); // 0000000100000001\n        BigInteger integer3 = new BigInteger(\"256\"); // 0000000100000000\n\n        int[] result = ArrayUtils.toBinaryArray(integer);\n        int[] result1 = ArrayUtils.toBinaryArray(integer1);\n        int[] result2 = ArrayUtils.toBinaryArray(integer2);\n        int[] result3 = ArrayUtils.toBinaryArray(integer3);\n\n        assertThat(result, is(new int[]{1, 0}));\n        assertThat(result1, is(new int[]{1, 0, 0, 0, 1}));\n        assertThat(result2, is(new int[]{1, 0, 0, 0, 0, 0, 0, 0, 1}));\n        assertThat(result3, is(new int[]{1, 0, 0, 0, 0, 0, 0, 0, 0}));\n    }", "signature": "void success_toBinaryArray()", "full_signature": "@Test public void success_toBinaryArray()", "class_method_signature": "ArrayUtilsTest.success_toBinaryArray()", "testcase": true, "constructor": false, "invocations": ["toBinaryArray", "toBinaryArray", "toBinaryArray", "toBinaryArray", "assertThat", "is", "assertThat", "is", "assertThat", "is", "assertThat", "is"]}, "focal_class": {"identifier": "ArrayUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "split", "parameters": "(byte[] bytes, int splitIndex)", "modifiers": "public static", "return": "byte[][]", "signature": "byte[][] split(byte[] bytes, int splitIndex)", "full_signature": "public static byte[][] split(byte[] bytes, int splitIndex)", "class_method_signature": "ArrayUtils.split(byte[] bytes, int splitIndex)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(int[] input)", "modifiers": "public static", "return": "int[]", "signature": "int[] reverse(int[] input)", "full_signature": "public static int[] reverse(int[] input)", "class_method_signature": "ArrayUtils.reverse(int[] input)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(BigInteger value, int expectedBytesLength)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(BigInteger value, int expectedBytesLength)", "full_signature": "public static byte[] toByteArray(BigInteger value, int expectedBytesLength)", "class_method_signature": "ArrayUtils.toByteArray(BigInteger value, int expectedBytesLength)", "testcase": false, "constructor": false}, {"identifier": "toBinaryArray", "parameters": "(BigInteger integer)", "modifiers": "public static", "return": "int[]", "signature": "int[] toBinaryArray(BigInteger integer)", "full_signature": "public static int[] toBinaryArray(BigInteger integer)", "class_method_signature": "ArrayUtils.toBinaryArray(BigInteger integer)", "testcase": false, "constructor": false}, {"identifier": "toMutualOppositeForm", "parameters": "(BigInteger integer)", "modifiers": "public static", "return": "int[]", "signature": "int[] toMutualOppositeForm(BigInteger integer)", "full_signature": "public static int[] toMutualOppositeForm(BigInteger integer)", "class_method_signature": "ArrayUtils.toMutualOppositeForm(BigInteger integer)", "testcase": false, "constructor": false}], "file": "eddsa/src/main/java/io/moatwel/util/ArrayUtils.java"}, "focal_method": {"identifier": "toBinaryArray", "parameters": "(BigInteger integer)", "modifiers": "public static", "return": "int[]", "body": "public static int[] toBinaryArray(BigInteger integer) {\n        byte[] tmp = integer.toByteArray();\n        int[] array = new int[tmp.length * 8];\n        for (int i = 0; i < tmp.length; i++) {\n            for (int j = 0; j < 8; j++) {\n                array[i * 8 + j] = (tmp[i] & 0x80) / 0x80;\n                tmp[i] <<= 1;\n            }\n        }\n\n        int count = 0;\n        for (int anArray : array) {\n            if (anArray == 1) {\n                break;\n            } else {\n                count++;\n            }\n        }\n\n        int[] result = new int[array.length - count];\n        System.arraycopy(array, count, result, 0, result.length);\n        return result;\n    }", "signature": "int[] toBinaryArray(BigInteger integer)", "full_signature": "public static int[] toBinaryArray(BigInteger integer)", "class_method_signature": "ArrayUtils.toBinaryArray(BigInteger integer)", "testcase": false, "constructor": false, "invocations": ["toByteArray", "arraycopy"]}, "repository": {"repo_id": 136564461, "url": "https://github.com/halu5071/edwards", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 626, "license": "licensed"}}