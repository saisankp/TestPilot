{"test_class": {"identifier": "ProviderHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/api/src/test/java/com/alipay/sofa/rpc/client/ProviderHelperTest.java"}, "test_case": {"identifier": "toUrl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void toUrl() throws Exception {\n        {\n            String src = \"10.15.233.114:12200\";\n            ProviderInfo providerInfo = ProviderHelper.toProviderInfo(src);\n            Assert.assertEquals(providerInfo.getHost(), \"10.15.233.114\");\n            Assert.assertEquals(providerInfo.getPort(), 12200);\n            Assert.assertEquals(providerInfo.getPath(), StringUtils.EMPTY);\n            Assert.assertEquals(ProviderHelper.toUrl(providerInfo), providerInfo.getProtocolType() + \"://\" + src);\n        }\n        {\n            String src = \"10.15.233.114:12200/\";\n            ProviderInfo providerInfo = ProviderHelper.toProviderInfo(src);\n            Assert.assertEquals(providerInfo.getHost(), \"10.15.233.114\");\n            Assert.assertEquals(providerInfo.getPort(), 12200);\n            Assert.assertEquals(providerInfo.getPath(), StringUtils.CONTEXT_SEP);\n            Assert.assertEquals(ProviderHelper.toUrl(providerInfo), providerInfo.getProtocolType() + \"://\" + src);\n        }\n        {\n            String src = \"bolt://10.15.233.114:12200\";\n            ProviderInfo providerInfo = ProviderHelper.toProviderInfo(src);\n            Assert.assertEquals(providerInfo.getProtocolType(), \"bolt\");\n            Assert.assertEquals(providerInfo.getHost(), \"10.15.233.114\");\n            Assert.assertEquals(providerInfo.getPort(), 12200);\n            Assert.assertEquals(providerInfo.getPath(), StringUtils.EMPTY);\n            Assert.assertEquals(ProviderHelper.toUrl(providerInfo), src);\n        }\n        {\n            String src = \"bolt://10.15.233.114:12200/\";\n            ProviderInfo providerInfo = ProviderHelper.toProviderInfo(src);\n            Assert.assertEquals(providerInfo.getProtocolType(), \"bolt\");\n            Assert.assertEquals(providerInfo.getHost(), \"10.15.233.114\");\n            Assert.assertEquals(providerInfo.getPort(), 12200);\n            Assert.assertEquals(providerInfo.getPath(), StringUtils.CONTEXT_SEP);\n            Assert.assertEquals(ProviderHelper.toUrl(providerInfo), src);\n        }\n        {\n            String src = \"bolt://10.15.233.114:12200?weight=222&serialization=hessian2\";\n            ProviderInfo providerInfo = ProviderHelper.toProviderInfo(src);\n            Assert.assertEquals(providerInfo.getProtocolType(), \"bolt\");\n            Assert.assertEquals(providerInfo.getHost(), \"10.15.233.114\");\n            Assert.assertEquals(providerInfo.getPort(), 12200);\n            Assert.assertEquals(providerInfo.getPath(), StringUtils.EMPTY);\n            Assert.assertEquals(providerInfo.getWeight(), 222);\n            Assert.assertEquals(providerInfo.getSerializationType(), \"hessian2\");\n            Assert.assertEquals(ProviderHelper.toProviderInfo(ProviderHelper.toUrl(providerInfo)), providerInfo);\n        }\n        {\n            String src = \"bolt://10.15.233.114:12200/?weight=222&serialization=hessian2\";\n            ProviderInfo providerInfo = ProviderHelper.toProviderInfo(src);\n            Assert.assertEquals(providerInfo.getProtocolType(), \"bolt\");\n            Assert.assertEquals(providerInfo.getHost(), \"10.15.233.114\");\n            Assert.assertEquals(providerInfo.getPort(), 12200);\n            Assert.assertEquals(providerInfo.getPath(), StringUtils.CONTEXT_SEP);\n            Assert.assertEquals(providerInfo.getWeight(), 222);\n            Assert.assertEquals(providerInfo.getSerializationType(), \"hessian2\");\n            Assert.assertEquals(ProviderHelper.toProviderInfo(ProviderHelper.toUrl(providerInfo)), providerInfo);\n        }\n    }", "signature": "void toUrl()", "full_signature": "@Test public void toUrl()", "class_method_signature": "ProviderHelperTest.toUrl()", "testcase": true, "constructor": false, "invocations": ["toProviderInfo", "assertEquals", "getHost", "assertEquals", "getPort", "assertEquals", "getPath", "assertEquals", "toUrl", "getProtocolType", "toProviderInfo", "assertEquals", "getHost", "assertEquals", "getPort", "assertEquals", "getPath", "assertEquals", "toUrl", "getProtocolType", "toProviderInfo", "assertEquals", "getProtocolType", "assertEquals", "getHost", "assertEquals", "getPort", "assertEquals", "getPath", "assertEquals", "toUrl", "toProviderInfo", "assertEquals", "getProtocolType", "assertEquals", "getHost", "assertEquals", "getPort", "assertEquals", "getPath", "assertEquals", "toUrl", "toProviderInfo", "assertEquals", "getProtocolType", "assertEquals", "getHost", "assertEquals", "getPort", "assertEquals", "getPath", "assertEquals", "getWeight", "assertEquals", "getSerializationType", "assertEquals", "toProviderInfo", "toUrl", "toProviderInfo", "assertEquals", "getProtocolType", "assertEquals", "getHost", "assertEquals", "getPort", "assertEquals", "getPath", "assertEquals", "getWeight", "assertEquals", "getSerializationType", "assertEquals", "toProviderInfo", "toUrl"]}, "focal_class": {"identifier": "ProviderHelper", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "compareGroup", "parameters": "(ProviderGroup oldGroup, ProviderGroup newGroup,\n                                    List<ProviderInfo> add, List<ProviderInfo> remove)", "modifiers": "public static", "return": "void", "signature": "void compareGroup(ProviderGroup oldGroup, ProviderGroup newGroup,\n                                    List<ProviderInfo> add, List<ProviderInfo> remove)", "full_signature": "public static void compareGroup(ProviderGroup oldGroup, ProviderGroup newGroup,\n                                    List<ProviderInfo> add, List<ProviderInfo> remove)", "class_method_signature": "ProviderHelper.compareGroup(ProviderGroup oldGroup, ProviderGroup newGroup,\n                                    List<ProviderInfo> add, List<ProviderInfo> remove)", "testcase": false, "constructor": false}, {"identifier": "compareProviders", "parameters": "(List<ProviderInfo> oldList, List<ProviderInfo> newList,\n                                        List<ProviderInfo> add, List<ProviderInfo> remove)", "modifiers": "public static", "return": "void", "signature": "void compareProviders(List<ProviderInfo> oldList, List<ProviderInfo> newList,\n                                        List<ProviderInfo> add, List<ProviderInfo> remove)", "full_signature": "public static void compareProviders(List<ProviderInfo> oldList, List<ProviderInfo> newList,\n                                        List<ProviderInfo> add, List<ProviderInfo> remove)", "class_method_signature": "ProviderHelper.compareProviders(List<ProviderInfo> oldList, List<ProviderInfo> newList,\n                                        List<ProviderInfo> add, List<ProviderInfo> remove)", "testcase": false, "constructor": false}, {"identifier": "compareGroups", "parameters": "(List<ProviderGroup> oldGroups, List<ProviderGroup> newGroups,\n                                     List<ProviderInfo> add,\n                                     List<ProviderInfo> remove)", "modifiers": "public static", "return": "void", "signature": "void compareGroups(List<ProviderGroup> oldGroups, List<ProviderGroup> newGroups,\n                                     List<ProviderInfo> add,\n                                     List<ProviderInfo> remove)", "full_signature": "public static void compareGroups(List<ProviderGroup> oldGroups, List<ProviderGroup> newGroups,\n                                     List<ProviderInfo> add,\n                                     List<ProviderInfo> remove)", "class_method_signature": "ProviderHelper.compareGroups(List<ProviderGroup> oldGroups, List<ProviderGroup> newGroups,\n                                     List<ProviderInfo> add,\n                                     List<ProviderInfo> remove)", "testcase": false, "constructor": false}, {"identifier": "convertToMap", "parameters": "(List<ProviderGroup> providerGroups)", "modifiers": "private static", "return": "Map<String, List<ProviderInfo>>", "signature": "Map<String, List<ProviderInfo>> convertToMap(List<ProviderGroup> providerGroups)", "full_signature": "private static Map<String, List<ProviderInfo>> convertToMap(List<ProviderGroup> providerGroups)", "class_method_signature": "ProviderHelper.convertToMap(List<ProviderGroup> providerGroups)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(ProviderGroup group)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(ProviderGroup group)", "full_signature": "public static boolean isEmpty(ProviderGroup group)", "class_method_signature": "ProviderHelper.isEmpty(ProviderGroup group)", "testcase": false, "constructor": false}, {"identifier": "toUrl", "parameters": "(ProviderInfo providerInfo)", "modifiers": "public static", "return": "String", "signature": "String toUrl(ProviderInfo providerInfo)", "full_signature": "public static String toUrl(ProviderInfo providerInfo)", "class_method_signature": "ProviderHelper.toUrl(ProviderInfo providerInfo)", "testcase": false, "constructor": false}, {"identifier": "toProviderInfo", "parameters": "(String url)", "modifiers": "public static", "return": "ProviderInfo", "signature": "ProviderInfo toProviderInfo(String url)", "full_signature": "public static ProviderInfo toProviderInfo(String url)", "class_method_signature": "ProviderHelper.toProviderInfo(String url)", "testcase": false, "constructor": false}], "file": "core/api/src/main/java/com/alipay/sofa/rpc/client/ProviderHelper.java"}, "focal_method": {"identifier": "toUrl", "parameters": "(ProviderInfo providerInfo)", "modifiers": "public static", "return": "String", "body": "public static String toUrl(ProviderInfo providerInfo) {\n        String uri = providerInfo.getProtocolType() + \"://\" + providerInfo.getHost() + \":\" + providerInfo.getPort();\n        uri += StringUtils.trimToEmpty(providerInfo.getPath());\n        StringBuilder sb = new StringBuilder();\n        if (providerInfo.getRpcVersion() > 0) {\n            sb.append(\"&\").append(ProviderInfoAttrs.ATTR_RPC_VERSION).append(\"=\").append(providerInfo.getRpcVersion());\n        }\n        if (providerInfo.getSerializationType() != null) {\n            sb.append(\"&\").append(ProviderInfoAttrs.ATTR_SERIALIZATION).append(\"=\")\n                .append(providerInfo.getSerializationType());\n        }\n        for (Map.Entry<String, String> entry : providerInfo.getStaticAttrs().entrySet()) {\n            sb.append(\"&\").append(entry.getKey()).append(\"=\").append(entry.getValue());\n        }\n        if (sb.length() > 0) {\n            uri += sb.replace(0, 1, \"?\").toString();\n        }\n        return uri;\n    }", "signature": "String toUrl(ProviderInfo providerInfo)", "full_signature": "public static String toUrl(ProviderInfo providerInfo)", "class_method_signature": "ProviderHelper.toUrl(ProviderInfo providerInfo)", "testcase": false, "constructor": false, "invocations": ["getProtocolType", "getHost", "getPort", "trimToEmpty", "getPath", "getRpcVersion", "append", "append", "append", "append", "getRpcVersion", "getSerializationType", "append", "append", "append", "append", "getSerializationType", "entrySet", "getStaticAttrs", "append", "append", "append", "append", "getKey", "getValue", "length", "toString", "replace"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}