{"test_class": {"identifier": "RedisRateLimiterFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RedisClient client = mock(RedisClient.class);", "modifier": "private", "type": "RedisClient", "declarator": "client = mock(RedisClient.class)", "var_name": "client"}, {"original_string": "private StatefulRedisConnection<String, String> connection = mock(StatefulRedisConnection.class);", "modifier": "private", "type": "StatefulRedisConnection<String, String>", "declarator": "connection = mock(StatefulRedisConnection.class)", "var_name": "connection"}, {"original_string": "private RedisReactiveCommands<String, String> commands = mock(RedisReactiveCommands.class);", "modifier": "private", "type": "RedisReactiveCommands<String, String>", "declarator": "commands = mock(RedisReactiveCommands.class)", "var_name": "commands"}, {"original_string": "private RedisRateLimiterFactory factory;", "modifier": "private", "type": "RedisRateLimiterFactory", "declarator": "factory", "var_name": "factory"}], "file": "ratelimitj-redis/src/test/java/es/moki/ratelimitj/redis/request/RedisRateLimiterFactoryTest.java"}, "test_case": {"identifier": "shouldReturnTheSameInstanceForSameRules", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldReturnTheSameInstanceForSameRules() {\n\n        RequestLimitRule rule1 = RequestLimitRule.of(Duration.ofMinutes(1), 10);\n        RequestRateLimiter rateLimiter1 = factory.getInstance(ImmutableSet.of(rule1));\n\n        RequestLimitRule rule2 = RequestLimitRule.of(Duration.ofMinutes(1), 10);\n        RequestRateLimiter rateLimiter2 = factory.getInstance(ImmutableSet.of(rule2));\n\n        assertThat(rateLimiter1).isSameAs(rateLimiter2);\n    }", "signature": "void shouldReturnTheSameInstanceForSameRules()", "full_signature": "@Test void shouldReturnTheSameInstanceForSameRules()", "class_method_signature": "RedisRateLimiterFactoryTest.shouldReturnTheSameInstanceForSameRules()", "testcase": true, "constructor": false, "invocations": ["of", "ofMinutes", "getInstance", "of", "of", "ofMinutes", "getInstance", "of", "isSameAs", "assertThat"]}, "focal_class": {"identifier": "RedisRateLimiterFactory", "superclass": "extends AbstractRequestRateLimiterFactory<RedisSlidingWindowRequestRateLimiter>", "interfaces": "", "fields": [{"original_string": "private final RedisClient client;", "modifier": "private final", "type": "RedisClient", "declarator": "client", "var_name": "client"}, {"original_string": "private StatefulRedisConnection<String, String> connection;", "modifier": "private", "type": "StatefulRedisConnection<String, String>", "declarator": "connection", "var_name": "connection"}], "methods": [{"identifier": "RedisRateLimiterFactory", "parameters": "(RedisClient client)", "modifiers": "public", "return": "", "signature": " RedisRateLimiterFactory(RedisClient client)", "full_signature": "public  RedisRateLimiterFactory(RedisClient client)", "class_method_signature": "RedisRateLimiterFactory.RedisRateLimiterFactory(RedisClient client)", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "(Set<RequestLimitRule> rules)", "modifiers": "@Override public", "return": "RequestRateLimiter", "signature": "RequestRateLimiter getInstance(Set<RequestLimitRule> rules)", "full_signature": "@Override public RequestRateLimiter getInstance(Set<RequestLimitRule> rules)", "class_method_signature": "RedisRateLimiterFactory.getInstance(Set<RequestLimitRule> rules)", "testcase": false, "constructor": false}, {"identifier": "getInstanceReactive", "parameters": "(Set<RequestLimitRule> rules)", "modifiers": "@Override public", "return": "ReactiveRequestRateLimiter", "signature": "ReactiveRequestRateLimiter getInstanceReactive(Set<RequestLimitRule> rules)", "full_signature": "@Override public ReactiveRequestRateLimiter getInstanceReactive(Set<RequestLimitRule> rules)", "class_method_signature": "RedisRateLimiterFactory.getInstanceReactive(Set<RequestLimitRule> rules)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Set<RequestLimitRule> rules)", "modifiers": "@Override protected", "return": "RedisSlidingWindowRequestRateLimiter", "signature": "RedisSlidingWindowRequestRateLimiter create(Set<RequestLimitRule> rules)", "full_signature": "@Override protected RedisSlidingWindowRequestRateLimiter create(Set<RequestLimitRule> rules)", "class_method_signature": "RedisRateLimiterFactory.create(Set<RequestLimitRule> rules)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "RedisRateLimiterFactory.close()", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "()", "modifiers": "private", "return": "StatefulRedisConnection<String, String>", "signature": "StatefulRedisConnection<String, String> getConnection()", "full_signature": "private StatefulRedisConnection<String, String> getConnection()", "class_method_signature": "RedisRateLimiterFactory.getConnection()", "testcase": false, "constructor": false}], "file": "ratelimitj-redis/src/main/java/es/moki/ratelimitj/redis/request/RedisRateLimiterFactory.java"}, "focal_method": {"identifier": "getInstance", "parameters": "(Set<RequestLimitRule> rules)", "modifiers": "@Override public", "return": "RequestRateLimiter", "body": "@Override\n    public RequestRateLimiter getInstance(Set<RequestLimitRule> rules) {\n        return lookupInstance(rules);\n    }", "signature": "RequestRateLimiter getInstance(Set<RequestLimitRule> rules)", "full_signature": "@Override public RequestRateLimiter getInstance(Set<RequestLimitRule> rules)", "class_method_signature": "RedisRateLimiterFactory.getInstance(Set<RequestLimitRule> rules)", "testcase": false, "constructor": false, "invocations": ["lookupInstance"]}, "repository": {"repo_id": 60940117, "url": "https://github.com/mokies/ratelimitj", "stars": 284, "created": "6/12/2016 3:27:46 AM +00:00", "updates": "2020-01-21T19:53:03+00:00", "fork": "False", "license": "licensed"}}