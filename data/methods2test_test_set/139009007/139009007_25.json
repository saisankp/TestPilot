{"test_class": {"identifier": "ConcatStageFactoryTest", "superclass": "extends StageTestBase", "interfaces": "", "fields": [{"original_string": "private final ConcatStageFactory factory = new ConcatStageFactory();", "modifier": "private final", "type": "ConcatStageFactory", "declarator": "factory = new ConcatStageFactory()", "var_name": "factory"}], "file": "implementation/src/test/java/io/smallrye/reactive/streams/stages/ConcatStageFactoryTest.java"}, "test_case": {"identifier": "testWithoutEngine", "parameters": "()", "modifiers": "@Test(expected = NullPointerException.class) public", "return": "void", "body": "@Test(expected = NullPointerException.class)\n    public void testWithoutEngine() {\n        Graph g1 = () -> Collections.singletonList((Stage.Of) () -> Arrays.asList(1, 2, 3));\n        Graph g2 = () -> Collections.singletonList((Stage.Of) () -> Arrays.asList(1, 2, 3));\n        factory.create(null, new Stage.Concat() {\n            @Override\n            public Graph getFirst() {\n                return g1;\n            }\n\n            @Override\n            public Graph getSecond() {\n                return g2;\n            }\n        });\n    }", "signature": "void testWithoutEngine()", "full_signature": "@Test(expected = NullPointerException.class) public void testWithoutEngine()", "class_method_signature": "ConcatStageFactoryTest.testWithoutEngine()", "testcase": true, "constructor": false, "invocations": ["singletonList", "asList", "singletonList", "asList", "create"]}, "focal_class": {"identifier": "ConcatStageFactory", "superclass": "", "interfaces": "implements PublisherStageFactory<Stage.Concat>", "fields": [], "methods": [{"identifier": "create", "parameters": "(Engine engine, Stage.Concat stage)", "modifiers": "@Override public", "return": "PublisherStage<O>", "signature": "PublisherStage<O> create(Engine engine, Stage.Concat stage)", "full_signature": "@Override public PublisherStage<O> create(Engine engine, Stage.Concat stage)", "class_method_signature": "ConcatStageFactory.create(Engine engine, Stage.Concat stage)", "testcase": false, "constructor": false}], "file": "implementation/src/main/java/io/smallrye/reactive/streams/stages/ConcatStageFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(Engine engine, Stage.Concat stage)", "modifiers": "@Override public", "return": "PublisherStage<O>", "body": "@Override\n    public <O> PublisherStage<O> create(Engine engine, Stage.Concat stage) {\n        Objects.requireNonNull(engine);\n        Objects.requireNonNull(stage);\n        Graph g1 = stage.getFirst();\n        Graph g2 = stage.getSecond();\n        return new ConcatStage<>(engine, g1, g2);\n    }", "signature": "PublisherStage<O> create(Engine engine, Stage.Concat stage)", "full_signature": "@Override public PublisherStage<O> create(Engine engine, Stage.Concat stage)", "class_method_signature": "ConcatStageFactory.create(Engine engine, Stage.Concat stage)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "getFirst", "getSecond"]}, "repository": {"repo_id": 139009007, "url": "https://github.com/smallrye/smallrye-reactive-streams-operators", "stars": 14, "created": "6/28/2018 11:27:21 AM +00:00", "updates": "2020-01-20T06:48:19+00:00", "fork": "False", "license": "licensed"}}