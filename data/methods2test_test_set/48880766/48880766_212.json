{"test_class": {"identifier": "DateColumnTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DateColumn column1;", "modifier": "private", "type": "DateColumn", "declarator": "column1", "var_name": "column1"}], "file": "core/src/test/java/tech/tablesaw/api/DateColumnTest.java"}, "test_case": {"identifier": "testCountUnique", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCountUnique() {\n    column1.append(LocalDate.of(2000, 1, 1));\n    column1.append(LocalDate.of(2000, 1, 1));\n    column1.append(LocalDate.of(2000, 2, 1));\n    column1.appendMissing();\n\n    assertEquals(3, column1.countUnique());\n  }", "signature": "void testCountUnique()", "full_signature": "@Test public void testCountUnique()", "class_method_signature": "DateColumnTest.testCountUnique()", "testcase": true, "constructor": false, "invocations": ["append", "of", "append", "of", "append", "of", "appendMissing", "assertEquals", "countUnique"]}, "focal_class": {"identifier": "DateColumn", "superclass": "extends AbstractColumn<DateColumn, LocalDate>", "interfaces": "implements DateFilters,\n        DateFillers<DateColumn>,\n        DateMapFunctions,\n        CategoricalColumn<LocalDate>", "fields": [{"original_string": "private IntArrayList data;", "modifier": "private", "type": "IntArrayList", "declarator": "data", "var_name": "data"}, {"original_string": "private final IntComparator comparator =\n      (r1, r2) -> {\n        final int f1 = getIntInternal(r1);\n        int f2 = getIntInternal(r2);\n        return Integer.compare(f1, f2);\n      };", "modifier": "private final", "type": "IntComparator", "declarator": "comparator =\n      (r1, r2) -> {\n        final int f1 = getIntInternal(r1);\n        int f2 = getIntInternal(r2);\n        return Integer.compare(f1, f2);\n      }", "var_name": "comparator"}, {"original_string": "private DateColumnFormatter printFormatter = new DateColumnFormatter();", "modifier": "private", "type": "DateColumnFormatter", "declarator": "printFormatter = new DateColumnFormatter()", "var_name": "printFormatter"}], "methods": [{"identifier": "create", "parameters": "(final String name)", "modifiers": "public static", "return": "DateColumn", "signature": "DateColumn create(final String name)", "full_signature": "public static DateColumn create(final String name)", "class_method_signature": "DateColumn.create(final String name)", "testcase": false, "constructor": false}, {"identifier": "createInternal", "parameters": "(String name, int[] data)", "modifiers": "public static", "return": "DateColumn", "signature": "DateColumn createInternal(String name, int[] data)", "full_signature": "public static DateColumn createInternal(String name, int[] data)", "class_method_signature": "DateColumn.createInternal(String name, int[] data)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final String name, final int initialSize)", "modifiers": "public static", "return": "DateColumn", "signature": "DateColumn create(final String name, final int initialSize)", "full_signature": "public static DateColumn create(final String name, final int initialSize)", "class_method_signature": "DateColumn.create(final String name, final int initialSize)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, Collection<LocalDate> data)", "modifiers": "public static", "return": "DateColumn", "signature": "DateColumn create(String name, Collection<LocalDate> data)", "full_signature": "public static DateColumn create(String name, Collection<LocalDate> data)", "class_method_signature": "DateColumn.create(String name, Collection<LocalDate> data)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, LocalDate... data)", "modifiers": "public static", "return": "DateColumn", "signature": "DateColumn create(String name, LocalDate... data)", "full_signature": "public static DateColumn create(String name, LocalDate... data)", "class_method_signature": "DateColumn.create(String name, LocalDate... data)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(String name, Stream<LocalDate> stream)", "modifiers": "public static", "return": "DateColumn", "signature": "DateColumn create(String name, Stream<LocalDate> stream)", "full_signature": "public static DateColumn create(String name, Stream<LocalDate> stream)", "class_method_signature": "DateColumn.create(String name, Stream<LocalDate> stream)", "testcase": false, "constructor": false}, {"identifier": "DateColumn", "parameters": "(String name, IntArrayList data)", "modifiers": "private", "return": "", "signature": " DateColumn(String name, IntArrayList data)", "full_signature": "private  DateColumn(String name, IntArrayList data)", "class_method_signature": "DateColumn.DateColumn(String name, IntArrayList data)", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "DateColumn.size()", "testcase": false, "constructor": false}, {"identifier": "subset", "parameters": "(final int[] rows)", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn subset(final int[] rows)", "full_signature": "@Override public DateColumn subset(final int[] rows)", "class_method_signature": "DateColumn.subset(final int[] rows)", "testcase": false, "constructor": false}, {"identifier": "appendInternal", "parameters": "(int f)", "modifiers": "public", "return": "DateColumn", "signature": "DateColumn appendInternal(int f)", "full_signature": "public DateColumn appendInternal(int f)", "class_method_signature": "DateColumn.appendInternal(int f)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int index, int value)", "modifiers": "public", "return": "DateColumn", "signature": "DateColumn set(int index, int value)", "full_signature": "public DateColumn set(int index, int value)", "class_method_signature": "DateColumn.set(int index, int value)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int index, LocalDate value)", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn set(int index, LocalDate value)", "full_signature": "@Override public DateColumn set(int index, LocalDate value)", "class_method_signature": "DateColumn.set(int index, LocalDate value)", "testcase": false, "constructor": false}, {"identifier": "setPrintFormatter", "parameters": "(DateTimeFormatter dateTimeFormatter, String missingValueString)", "modifiers": "public", "return": "void", "signature": "void setPrintFormatter(DateTimeFormatter dateTimeFormatter, String missingValueString)", "full_signature": "public void setPrintFormatter(DateTimeFormatter dateTimeFormatter, String missingValueString)", "class_method_signature": "DateColumn.setPrintFormatter(DateTimeFormatter dateTimeFormatter, String missingValueString)", "testcase": false, "constructor": false}, {"identifier": "setPrintFormatter", "parameters": "(DateTimeFormatter dateTimeFormatter)", "modifiers": "public", "return": "void", "signature": "void setPrintFormatter(DateTimeFormatter dateTimeFormatter)", "full_signature": "public void setPrintFormatter(DateTimeFormatter dateTimeFormatter)", "class_method_signature": "DateColumn.setPrintFormatter(DateTimeFormatter dateTimeFormatter)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(int row)", "modifiers": "@Override public", "return": "String", "signature": "String getString(int row)", "full_signature": "@Override public String getString(int row)", "class_method_signature": "DateColumn.getString(int row)", "testcase": false, "constructor": false}, {"identifier": "getUnformattedString", "parameters": "(int row)", "modifiers": "@Override public", "return": "String", "signature": "String getUnformattedString(int row)", "full_signature": "@Override public String getUnformattedString(int row)", "class_method_signature": "DateColumn.getUnformattedString(int row)", "testcase": false, "constructor": false}, {"identifier": "emptyCopy", "parameters": "()", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn emptyCopy()", "full_signature": "@Override public DateColumn emptyCopy()", "class_method_signature": "DateColumn.emptyCopy()", "testcase": false, "constructor": false}, {"identifier": "emptyCopy", "parameters": "(int rowSize)", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn emptyCopy(int rowSize)", "full_signature": "@Override public DateColumn emptyCopy(int rowSize)", "class_method_signature": "DateColumn.emptyCopy(int rowSize)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn copy()", "full_signature": "@Override public DateColumn copy()", "class_method_signature": "DateColumn.copy()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "DateColumn.clear()", "testcase": false, "constructor": false}, {"identifier": "lead", "parameters": "(int n)", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn lead(int n)", "full_signature": "@Override public DateColumn lead(int n)", "class_method_signature": "DateColumn.lead(int n)", "testcase": false, "constructor": false}, {"identifier": "lag", "parameters": "(int n)", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn lag(int n)", "full_signature": "@Override public DateColumn lag(int n)", "class_method_signature": "DateColumn.lag(int n)", "testcase": false, "constructor": false}, {"identifier": "sortAscending", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void sortAscending()", "full_signature": "@Override public void sortAscending()", "class_method_signature": "DateColumn.sortAscending()", "testcase": false, "constructor": false}, {"identifier": "sortDescending", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void sortDescending()", "full_signature": "@Override public void sortDescending()", "class_method_signature": "DateColumn.sortDescending()", "testcase": false, "constructor": false}, {"identifier": "countUnique", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int countUnique()", "full_signature": "@Override public int countUnique()", "class_method_signature": "DateColumn.countUnique()", "testcase": false, "constructor": false}, {"identifier": "unique", "parameters": "()", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn unique()", "full_signature": "@Override public DateColumn unique()", "class_method_signature": "DateColumn.unique()", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(final Column<LocalDate> column)", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn append(final Column<LocalDate> column)", "full_signature": "@Override public DateColumn append(final Column<LocalDate> column)", "class_method_signature": "DateColumn.append(final Column<LocalDate> column)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(Column<LocalDate> column, int row)", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn append(Column<LocalDate> column, int row)", "full_signature": "@Override public DateColumn append(Column<LocalDate> column, int row)", "class_method_signature": "DateColumn.append(Column<LocalDate> column, int row)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int row, Column<LocalDate> column, int sourceRow)", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn set(int row, Column<LocalDate> column, int sourceRow)", "full_signature": "@Override public DateColumn set(int row, Column<LocalDate> column, int sourceRow)", "class_method_signature": "DateColumn.set(int row, Column<LocalDate> column, int sourceRow)", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "()", "modifiers": "@Override public", "return": "LocalDate", "signature": "LocalDate max()", "full_signature": "@Override public LocalDate max()", "class_method_signature": "DateColumn.max()", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "()", "modifiers": "@Override public", "return": "LocalDate", "signature": "LocalDate min()", "full_signature": "@Override public LocalDate min()", "class_method_signature": "DateColumn.min()", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(Selection rowSelection, LocalDate newValue)", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn set(Selection rowSelection, LocalDate newValue)", "full_signature": "@Override public DateColumn set(Selection rowSelection, LocalDate newValue)", "class_method_signature": "DateColumn.set(Selection rowSelection, LocalDate newValue)", "testcase": false, "constructor": false}, {"identifier": "appendMissing", "parameters": "()", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn appendMissing()", "full_signature": "@Override public DateColumn appendMissing()", "class_method_signature": "DateColumn.appendMissing()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int index)", "modifiers": "@Override public", "return": "LocalDate", "signature": "LocalDate get(int index)", "full_signature": "@Override public LocalDate get(int index)", "class_method_signature": "DateColumn.get(int index)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "DateColumn.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "rowComparator", "parameters": "()", "modifiers": "@Override public", "return": "IntComparator", "signature": "IntComparator rowComparator()", "full_signature": "@Override public IntComparator rowComparator()", "class_method_signature": "DateColumn.rowComparator()", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(LocalDate value)", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn append(LocalDate value)", "full_signature": "@Override public DateColumn append(LocalDate value)", "class_method_signature": "DateColumn.append(LocalDate value)", "testcase": false, "constructor": false}, {"identifier": "appendObj", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn appendObj(Object obj)", "full_signature": "@Override public DateColumn appendObj(Object obj)", "class_method_signature": "DateColumn.appendObj(Object obj)", "testcase": false, "constructor": false}, {"identifier": "appendCell", "parameters": "(String string)", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn appendCell(String string)", "full_signature": "@Override public DateColumn appendCell(String string)", "class_method_signature": "DateColumn.appendCell(String string)", "testcase": false, "constructor": false}, {"identifier": "appendCell", "parameters": "(String string, AbstractColumnParser<?> parser)", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn appendCell(String string, AbstractColumnParser<?> parser)", "full_signature": "@Override public DateColumn appendCell(String string, AbstractColumnParser<?> parser)", "class_method_signature": "DateColumn.appendCell(String string, AbstractColumnParser<?> parser)", "testcase": false, "constructor": false}, {"identifier": "getIntInternal", "parameters": "(int index)", "modifiers": "@Override public", "return": "int", "signature": "int getIntInternal(int index)", "full_signature": "@Override public int getIntInternal(int index)", "class_method_signature": "DateColumn.getIntInternal(int index)", "testcase": false, "constructor": false}, {"identifier": "getPackedDate", "parameters": "(int index)", "modifiers": "protected", "return": "int", "signature": "int getPackedDate(int index)", "full_signature": "protected int getPackedDate(int index)", "class_method_signature": "DateColumn.getPackedDate(int index)", "testcase": false, "constructor": false}, {"identifier": "summary", "parameters": "()", "modifiers": "@Override public", "return": "Table", "signature": "Table summary()", "full_signature": "@Override public Table summary()", "class_method_signature": "DateColumn.summary()", "testcase": false, "constructor": false}, {"identifier": "valueIsMissing", "parameters": "(int i)", "modifiers": "public static", "return": "boolean", "signature": "boolean valueIsMissing(int i)", "full_signature": "public static boolean valueIsMissing(int i)", "class_method_signature": "DateColumn.valueIsMissing(int i)", "testcase": false, "constructor": false}, {"identifier": "countMissing", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int countMissing()", "full_signature": "@Override public int countMissing()", "class_method_signature": "DateColumn.countMissing()", "testcase": false, "constructor": false}, {"identifier": "top", "parameters": "(int n)", "modifiers": "public", "return": "List<LocalDate>", "signature": "List<LocalDate> top(int n)", "full_signature": "public List<LocalDate> top(int n)", "class_method_signature": "DateColumn.top(int n)", "testcase": false, "constructor": false}, {"identifier": "bottom", "parameters": "(int n)", "modifiers": "public", "return": "List<LocalDate>", "signature": "List<LocalDate> bottom(int n)", "full_signature": "public List<LocalDate> bottom(int n)", "class_method_signature": "DateColumn.bottom(int n)", "testcase": false, "constructor": false}, {"identifier": "intIterator", "parameters": "()", "modifiers": "public", "return": "IntIterator", "signature": "IntIterator intIterator()", "full_signature": "public IntIterator intIterator()", "class_method_signature": "DateColumn.intIterator()", "testcase": false, "constructor": false}, {"identifier": "removeMissing", "parameters": "()", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn removeMissing()", "full_signature": "@Override public DateColumn removeMissing()", "class_method_signature": "DateColumn.removeMissing()", "testcase": false, "constructor": false}, {"identifier": "asList", "parameters": "()", "modifiers": "@Override public", "return": "List<LocalDate>", "signature": "List<LocalDate> asList()", "full_signature": "@Override public List<LocalDate> asList()", "class_method_signature": "DateColumn.asList()", "testcase": false, "constructor": false}, {"identifier": "where", "parameters": "(Selection selection)", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn where(Selection selection)", "full_signature": "@Override public DateColumn where(Selection selection)", "class_method_signature": "DateColumn.where(Selection selection)", "testcase": false, "constructor": false}, {"identifier": "asSet", "parameters": "()", "modifiers": "public", "return": "Set<LocalDate>", "signature": "Set<LocalDate> asSet()", "full_signature": "public Set<LocalDate> asSet()", "class_method_signature": "DateColumn.asSet()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(LocalDate localDate)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(LocalDate localDate)", "full_signature": "@Override public boolean contains(LocalDate localDate)", "class_method_signature": "DateColumn.contains(LocalDate localDate)", "testcase": false, "constructor": false}, {"identifier": "setMissing", "parameters": "(int i)", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn setMissing(int i)", "full_signature": "@Override public DateColumn setMissing(int i)", "class_method_signature": "DateColumn.setMissing(int i)", "testcase": false, "constructor": false}, {"identifier": "asDoubleArray", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] asDoubleArray()", "full_signature": "public double[] asDoubleArray()", "class_method_signature": "DateColumn.asDoubleArray()", "testcase": false, "constructor": false}, {"identifier": "asDoubleColumn", "parameters": "()", "modifiers": "public", "return": "DoubleColumn", "signature": "DoubleColumn asDoubleColumn()", "full_signature": "public DoubleColumn asDoubleColumn()", "class_method_signature": "DateColumn.asDoubleColumn()", "testcase": false, "constructor": false}, {"identifier": "isMissing", "parameters": "(int rowNumber)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isMissing(int rowNumber)", "full_signature": "@Override public boolean isMissing(int rowNumber)", "class_method_signature": "DateColumn.isMissing(int rowNumber)", "testcase": false, "constructor": false}, {"identifier": "getDouble", "parameters": "(int i)", "modifiers": "public", "return": "double", "signature": "double getDouble(int i)", "full_signature": "public double getDouble(int i)", "class_method_signature": "DateColumn.getDouble(int i)", "testcase": false, "constructor": false}, {"identifier": "byteSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int byteSize()", "full_signature": "@Override public int byteSize()", "class_method_signature": "DateColumn.byteSize()", "testcase": false, "constructor": false}, {"identifier": "asBytes", "parameters": "(int rowNumber)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] asBytes(int rowNumber)", "full_signature": "@Override public byte[] asBytes(int rowNumber)", "class_method_signature": "DateColumn.asBytes(int rowNumber)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<LocalDate>", "signature": "Iterator<LocalDate> iterator()", "full_signature": "@Override public Iterator<LocalDate> iterator()", "class_method_signature": "DateColumn.iterator()", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(\n      int count, Iterator<LocalDate> iterator, Consumer<LocalDate> acceptor)", "modifiers": "private", "return": "DateColumn", "signature": "DateColumn fillWith(\n      int count, Iterator<LocalDate> iterator, Consumer<LocalDate> acceptor)", "full_signature": "private DateColumn fillWith(\n      int count, Iterator<LocalDate> iterator, Consumer<LocalDate> acceptor)", "class_method_signature": "DateColumn.fillWith(\n      int count, Iterator<LocalDate> iterator, Consumer<LocalDate> acceptor)", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(Iterator<LocalDate> iterator)", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn fillWith(Iterator<LocalDate> iterator)", "full_signature": "@Override public DateColumn fillWith(Iterator<LocalDate> iterator)", "class_method_signature": "DateColumn.fillWith(Iterator<LocalDate> iterator)", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(\n      int count, Iterable<LocalDate> iterable, Consumer<LocalDate> acceptor)", "modifiers": "private", "return": "DateColumn", "signature": "DateColumn fillWith(\n      int count, Iterable<LocalDate> iterable, Consumer<LocalDate> acceptor)", "full_signature": "private DateColumn fillWith(\n      int count, Iterable<LocalDate> iterable, Consumer<LocalDate> acceptor)", "class_method_signature": "DateColumn.fillWith(\n      int count, Iterable<LocalDate> iterable, Consumer<LocalDate> acceptor)", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(Iterable<LocalDate> iterable)", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn fillWith(Iterable<LocalDate> iterable)", "full_signature": "@Override public DateColumn fillWith(Iterable<LocalDate> iterable)", "class_method_signature": "DateColumn.fillWith(Iterable<LocalDate> iterable)", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(\n      int count, Supplier<LocalDate> supplier, Consumer<LocalDate> acceptor)", "modifiers": "private", "return": "DateColumn", "signature": "DateColumn fillWith(\n      int count, Supplier<LocalDate> supplier, Consumer<LocalDate> acceptor)", "full_signature": "private DateColumn fillWith(\n      int count, Supplier<LocalDate> supplier, Consumer<LocalDate> acceptor)", "class_method_signature": "DateColumn.fillWith(\n      int count, Supplier<LocalDate> supplier, Consumer<LocalDate> acceptor)", "testcase": false, "constructor": false}, {"identifier": "fillWith", "parameters": "(Supplier<LocalDate> supplier)", "modifiers": "@Override public", "return": "DateColumn", "signature": "DateColumn fillWith(Supplier<LocalDate> supplier)", "full_signature": "@Override public DateColumn fillWith(Supplier<LocalDate> supplier)", "class_method_signature": "DateColumn.fillWith(Supplier<LocalDate> supplier)", "testcase": false, "constructor": false}, {"identifier": "asObjectArray", "parameters": "()", "modifiers": "@Override public", "return": "LocalDate[]", "signature": "LocalDate[] asObjectArray()", "full_signature": "@Override public LocalDate[] asObjectArray()", "class_method_signature": "DateColumn.asObjectArray()", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(LocalDate o1, LocalDate o2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(LocalDate o1, LocalDate o2)", "full_signature": "@Override public int compare(LocalDate o1, LocalDate o2)", "class_method_signature": "DateColumn.compare(LocalDate o1, LocalDate o2)", "testcase": false, "constructor": false}], "file": "core/src/main/java/tech/tablesaw/api/DateColumn.java"}, "focal_method": {"identifier": "countUnique", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int countUnique() {\n    IntSet ints = new IntOpenHashSet(size());\n    for (int i = 0; i < size(); i++) {\n      ints.add(data.getInt(i));\n    }\n    return ints.size();\n  }", "signature": "int countUnique()", "full_signature": "@Override public int countUnique()", "class_method_signature": "DateColumn.countUnique()", "testcase": false, "constructor": false, "invocations": ["size", "size", "add", "getInt", "size"]}, "repository": {"repo_id": 48880766, "url": "https://github.com/jtablesaw/tablesaw", "stars": 2021, "created": "1/1/2016 2:58:28 PM +00:00", "updates": "2020-01-24T23:26:07+00:00", "fork": "False", "license": "licensed"}}