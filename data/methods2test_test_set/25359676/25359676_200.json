{"test_class": {"identifier": "ScriptUtilsTest", "superclass": "extends ProcessLoggingUnitTest", "interfaces": "", "fields": [], "file": "rice-framework/krad-web-framework/src/test/java/org/kuali/rice/krad/uif/util/ScriptUtilsTest.java"}, "test_case": {"identifier": "testBuildEventHandlerScript", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuildEventHandlerScript() {\n        String onClickScript = \"alert('A click happened');\";\n        String onClickHandler = ScriptUtils.buildEventHandlerScript(\"u09\", \"click\", onClickScript);\n\n        String expectedHandler = \"jQuery('#u09').on('click', function(e) {\" + onClickScript + \"}); \";\n\n        assertEquals(\"generate event script is not correct\", expectedHandler, onClickHandler);\n    }", "signature": "void testBuildEventHandlerScript()", "full_signature": "@Test public void testBuildEventHandlerScript()", "class_method_signature": "ScriptUtilsTest.testBuildEventHandlerScript()", "testcase": true, "constructor": false, "invocations": ["buildEventHandlerScript", "assertEquals"]}, "focal_class": {"identifier": "ScriptUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "translateValue", "parameters": "(Object value)", "modifiers": "public static", "return": "String", "signature": "String translateValue(Object value)", "full_signature": "public static String translateValue(Object value)", "class_method_signature": "ScriptUtils.translateValue(Object value)", "testcase": false, "constructor": false}, {"identifier": "toJSON", "parameters": "(Map<String, String> map)", "modifiers": "public static", "return": "String", "signature": "String toJSON(Map<String, String> map)", "full_signature": "public static String toJSON(Map<String, String> map)", "class_method_signature": "ScriptUtils.toJSON(Map<String, String> map)", "testcase": false, "constructor": false}, {"identifier": "escapeJSONString", "parameters": "(String jsonString)", "modifiers": "public static", "return": "String", "signature": "String escapeJSONString(String jsonString)", "full_signature": "public static String escapeJSONString(String jsonString)", "class_method_signature": "ScriptUtils.escapeJSONString(String jsonString)", "testcase": false, "constructor": false}, {"identifier": "convertToJsValue", "parameters": "(Map<String, String> stringMap)", "modifiers": "public static", "return": "String", "signature": "String convertToJsValue(Map<String, String> stringMap)", "full_signature": "public static String convertToJsValue(Map<String, String> stringMap)", "class_method_signature": "ScriptUtils.convertToJsValue(Map<String, String> stringMap)", "testcase": false, "constructor": false}, {"identifier": "convertToJsValue", "parameters": "(String value)", "modifiers": "public static", "return": "String", "signature": "String convertToJsValue(String value)", "full_signature": "public static String convertToJsValue(String value)", "class_method_signature": "ScriptUtils.convertToJsValue(String value)", "testcase": false, "constructor": false}, {"identifier": "escapeName", "parameters": "(String name)", "modifiers": "public static", "return": "String", "signature": "String escapeName(String name)", "full_signature": "public static String escapeName(String name)", "class_method_signature": "ScriptUtils.escapeName(String name)", "testcase": false, "constructor": false}, {"identifier": "convertStringListToJsArray", "parameters": "(List<String> list)", "modifiers": "public static", "return": "String", "signature": "String convertStringListToJsArray(List<String> list)", "full_signature": "public static String convertStringListToJsArray(List<String> list)", "class_method_signature": "ScriptUtils.convertStringListToJsArray(List<String> list)", "testcase": false, "constructor": false}, {"identifier": "escapeHtml", "parameters": "(String string)", "modifiers": "public static", "return": "String", "signature": "String escapeHtml(String string)", "full_signature": "public static String escapeHtml(String string)", "class_method_signature": "ScriptUtils.escapeHtml(String string)", "testcase": false, "constructor": false}, {"identifier": "escapeHtml", "parameters": "(List<String> strings)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> escapeHtml(List<String> strings)", "full_signature": "public static List<String> escapeHtml(List<String> strings)", "class_method_signature": "ScriptUtils.escapeHtml(List<String> strings)", "testcase": false, "constructor": false}, {"identifier": "appendScript", "parameters": "(String script, String appendScript)", "modifiers": "public static", "return": "String", "signature": "String appendScript(String script, String appendScript)", "full_signature": "public static String appendScript(String script, String appendScript)", "class_method_signature": "ScriptUtils.appendScript(String script, String appendScript)", "testcase": false, "constructor": false}, {"identifier": "buildFunctionCall", "parameters": "(String functionName, Object... arguments)", "modifiers": "public static", "return": "String", "signature": "String buildFunctionCall(String functionName, Object... arguments)", "full_signature": "public static String buildFunctionCall(String functionName, Object... arguments)", "class_method_signature": "ScriptUtils.buildFunctionCall(String functionName, Object... arguments)", "testcase": false, "constructor": false}, {"identifier": "buildEventHandlerScript", "parameters": "(String id, String eventName, String eventScript)", "modifiers": "public static", "return": "String", "signature": "String buildEventHandlerScript(String id, String eventName, String eventScript)", "full_signature": "public static String buildEventHandlerScript(String id, String eventName, String eventScript)", "class_method_signature": "ScriptUtils.buildEventHandlerScript(String id, String eventName, String eventScript)", "testcase": false, "constructor": false}], "file": "rice-framework/krad-web-framework/src/main/java/org/kuali/rice/krad/uif/util/ScriptUtils.java"}, "focal_method": {"identifier": "buildEventHandlerScript", "parameters": "(String id, String eventName, String eventScript)", "modifiers": "public static", "return": "String", "body": "public static String buildEventHandlerScript(String id, String eventName, String eventScript) {\n        if (StringUtils.isBlank(eventScript)) {\n            return \"\";\n        }\n\n        Assert.hasLength(id, \"Id is required for building event handler script\");\n        Assert.hasLength(eventName, \"Event name is required for building event handler script\");\n\n        StringBuffer sb = new StringBuffer();\n\n        sb.append(\"jQuery('#\" + id + \"').on('\");\n        sb.append(eventName);\n        sb.append(\"', function(e) {\");\n        sb.append(eventScript);\n        sb.append(\"}); \");\n\n        return sb.toString();\n    }", "signature": "String buildEventHandlerScript(String id, String eventName, String eventScript)", "full_signature": "public static String buildEventHandlerScript(String id, String eventName, String eventScript)", "class_method_signature": "ScriptUtils.buildEventHandlerScript(String id, String eventName, String eventScript)", "testcase": false, "constructor": false, "invocations": ["isBlank", "hasLength", "hasLength", "append", "append", "append", "append", "append", "toString"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}