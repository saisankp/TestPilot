{"test_class": {"identifier": "IndexedQueryPlannerTest", "superclass": "", "interfaces": "", "fields": [], "file": "yqlplus_engine/src/test/java/com/yahoo/yqlplus/engine/internal/plan/IndexedQueryPlannerTest.java"}, "test_case": {"identifier": "testIndexIdPants3", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIndexIdPants3() throws Exception {\n        IndexKey ID_INDEX = IndexKey.of(\"id\");\n        IndexKey PANTS_INDEX = IndexKey.of(\"id\", \"pants\");\n        Set<IndexKey> indexKeySet = Sets.newHashSet(\n                ID_INDEX,\n                PANTS_INDEX\n        );\n        IndexedQueryPlanner planner = new IndexedQueryPlanner(indexKeySet);\n        QueryStrategy strategy = planner.plan(parseFilter(\"id = '1' AND pants IN ('2', '3', '4') OR id = '3'\"));\n        Assert.assertFalse(strategy.scan);\n        Assert.assertEquals(strategy.indexes.size(), 2);\n        Collection<IndexStrategy> q = strategy.indexes.get(PANTS_INDEX);\n        Assert.assertEquals(q.size(), 1);\n        Iterator<IndexStrategy> strategyIterator = q.iterator();\n        IndexStrategy strategyKey = strategyIterator.next();\n        Assert.assertNull(strategyKey.filter);\n        Assert.assertEquals(strategyKey.indexFilter.get(\"id\").toString(), \"(EQ (READ_FIELD L0:1 row, id), (LITERAL L5:1 1))\");\n        Assert.assertEquals(strategyKey.indexFilter.get(\"pants\").toString(), \"(IN (READ_FIELD L13:1 row, pants), (ARRAY L23:1 [(LITERAL L23:1 2), (LITERAL L28:1 3), (LITERAL L33:1 4)]))\");\n\n        q = strategy.indexes.get(ID_INDEX);\n        Assert.assertEquals(q.size(), 1);\n        strategyIterator = q.iterator();\n        strategyKey = strategyIterator.next();\n        Assert.assertNull(strategyKey.filter);\n        Assert.assertEquals(strategyKey.indexFilter.get(\"id\").toString(), \"(EQ (READ_FIELD L41:1 row, id), (LITERAL L46:1 3))\");\n    }", "signature": "void testIndexIdPants3()", "full_signature": "@Test public void testIndexIdPants3()", "class_method_signature": "IndexedQueryPlannerTest.testIndexIdPants3()", "testcase": true, "constructor": false, "invocations": ["of", "of", "newHashSet", "plan", "parseFilter", "assertFalse", "assertEquals", "size", "get", "assertEquals", "size", "iterator", "next", "assertNull", "assertEquals", "toString", "get", "assertEquals", "toString", "get", "get", "assertEquals", "size", "iterator", "next", "assertNull", "assertEquals", "toString", "get"]}, "focal_class": {"identifier": "IndexedQueryPlanner", "superclass": "", "interfaces": "", "fields": [{"original_string": "final Set<String> indexColumns;", "modifier": "final", "type": "Set<String>", "declarator": "indexColumns", "var_name": "indexColumns"}, {"original_string": "final Map<IndexKey, IndexDescriptor> indexes;", "modifier": "final", "type": "Map<IndexKey, IndexDescriptor>", "declarator": "indexes", "var_name": "indexes"}], "methods": [{"identifier": "convertSet", "parameters": "(Set<IndexKey> indexes)", "modifiers": "private static", "return": "Iterable<IndexDescriptor>", "signature": "Iterable<IndexDescriptor> convertSet(Set<IndexKey> indexes)", "full_signature": "private static Iterable<IndexDescriptor> convertSet(Set<IndexKey> indexes)", "class_method_signature": "IndexedQueryPlanner.convertSet(Set<IndexKey> indexes)", "testcase": false, "constructor": false}, {"identifier": "IndexedQueryPlanner", "parameters": "(Set<IndexKey> indexes)", "modifiers": "public", "return": "", "signature": " IndexedQueryPlanner(Set<IndexKey> indexes)", "full_signature": "public  IndexedQueryPlanner(Set<IndexKey> indexes)", "class_method_signature": "IndexedQueryPlanner.IndexedQueryPlanner(Set<IndexKey> indexes)", "testcase": false, "constructor": true}, {"identifier": "IndexedQueryPlanner", "parameters": "(Iterable<IndexDescriptor> indexes)", "modifiers": "public", "return": "", "signature": " IndexedQueryPlanner(Iterable<IndexDescriptor> indexes)", "full_signature": "public  IndexedQueryPlanner(Iterable<IndexDescriptor> indexes)", "class_method_signature": "IndexedQueryPlanner.IndexedQueryPlanner(Iterable<IndexDescriptor> indexes)", "testcase": false, "constructor": true}, {"identifier": "planExact", "parameters": "(OperatorNode<ExpressionOperator> filter)", "modifiers": "public", "return": "QueryStrategy", "signature": "QueryStrategy planExact(OperatorNode<ExpressionOperator> filter)", "full_signature": "public QueryStrategy planExact(OperatorNode<ExpressionOperator> filter)", "class_method_signature": "IndexedQueryPlanner.planExact(OperatorNode<ExpressionOperator> filter)", "testcase": false, "constructor": false}, {"identifier": "plan", "parameters": "(OperatorNode<ExpressionOperator> filter)", "modifiers": "public", "return": "QueryStrategy", "signature": "QueryStrategy plan(OperatorNode<ExpressionOperator> filter)", "full_signature": "public QueryStrategy plan(OperatorNode<ExpressionOperator> filter)", "class_method_signature": "IndexedQueryPlanner.plan(OperatorNode<ExpressionOperator> filter)", "testcase": false, "constructor": false}, {"identifier": "planJoin", "parameters": "(OperatorNode<PhysicalExprOperator> leftSide, OperatorNode<ExpressionOperator> joinExpression, OperatorNode<ExpressionOperator> filter)", "modifiers": "public", "return": "QueryStrategy", "signature": "QueryStrategy planJoin(OperatorNode<PhysicalExprOperator> leftSide, OperatorNode<ExpressionOperator> joinExpression, OperatorNode<ExpressionOperator> filter)", "full_signature": "public QueryStrategy planJoin(OperatorNode<PhysicalExprOperator> leftSide, OperatorNode<ExpressionOperator> joinExpression, OperatorNode<ExpressionOperator> filter)", "class_method_signature": "IndexedQueryPlanner.planJoin(OperatorNode<PhysicalExprOperator> leftSide, OperatorNode<ExpressionOperator> joinExpression, OperatorNode<ExpressionOperator> filter)", "testcase": false, "constructor": false}, {"identifier": "planInternal", "parameters": "(Set<String> availableJoinColumns, OperatorNode<ExpressionOperator> filter, boolean exact)", "modifiers": "private", "return": "QueryStrategy", "signature": "QueryStrategy planInternal(Set<String> availableJoinColumns, OperatorNode<ExpressionOperator> filter, boolean exact)", "full_signature": "private QueryStrategy planInternal(Set<String> availableJoinColumns, OperatorNode<ExpressionOperator> filter, boolean exact)", "class_method_signature": "IndexedQueryPlanner.planInternal(Set<String> availableJoinColumns, OperatorNode<ExpressionOperator> filter, boolean exact)", "testcase": false, "constructor": false}, {"identifier": "prepareQuery", "parameters": "(Set<String> availableJoinColumns, QueryStrategy iq, OperatorNode<ExpressionOperator> filter, boolean exact)", "modifiers": "private", "return": "void", "signature": "void prepareQuery(Set<String> availableJoinColumns, QueryStrategy iq, OperatorNode<ExpressionOperator> filter, boolean exact)", "full_signature": "private void prepareQuery(Set<String> availableJoinColumns, QueryStrategy iq, OperatorNode<ExpressionOperator> filter, boolean exact)", "class_method_signature": "IndexedQueryPlanner.prepareQuery(Set<String> availableJoinColumns, QueryStrategy iq, OperatorNode<ExpressionOperator> filter, boolean exact)", "testcase": false, "constructor": false}, {"identifier": "matchIndex", "parameters": "(Set<String> columns, boolean exact)", "modifiers": "private", "return": "IndexKey", "signature": "IndexKey matchIndex(Set<String> columns, boolean exact)", "full_signature": "private IndexKey matchIndex(Set<String> columns, boolean exact)", "class_method_signature": "IndexedQueryPlanner.matchIndex(Set<String> columns, boolean exact)", "testcase": false, "constructor": false}, {"identifier": "processFilterClause", "parameters": "(Map<String, OperatorNode<ExpressionOperator>> columns,\n                                     List<OperatorNode<ExpressionOperator>> others,\n                                     OperatorNode<ExpressionOperator> filter)", "modifiers": "private", "return": "void", "signature": "void processFilterClause(Map<String, OperatorNode<ExpressionOperator>> columns,\n                                     List<OperatorNode<ExpressionOperator>> others,\n                                     OperatorNode<ExpressionOperator> filter)", "full_signature": "private void processFilterClause(Map<String, OperatorNode<ExpressionOperator>> columns,\n                                     List<OperatorNode<ExpressionOperator>> others,\n                                     OperatorNode<ExpressionOperator> filter)", "class_method_signature": "IndexedQueryPlanner.processFilterClause(Map<String, OperatorNode<ExpressionOperator>> columns,\n                                     List<OperatorNode<ExpressionOperator>> others,\n                                     OperatorNode<ExpressionOperator> filter)", "testcase": false, "constructor": false}, {"identifier": "extractFieldMatch", "parameters": "(OperatorNode<ExpressionOperator> expr)", "modifiers": "private", "return": "String", "signature": "String extractFieldMatch(OperatorNode<ExpressionOperator> expr)", "full_signature": "private String extractFieldMatch(OperatorNode<ExpressionOperator> expr)", "class_method_signature": "IndexedQueryPlanner.extractFieldMatch(OperatorNode<ExpressionOperator> expr)", "testcase": false, "constructor": false}], "file": "yqlplus_engine/src/main/java/com/yahoo/yqlplus/engine/internal/plan/IndexedQueryPlanner.java"}, "focal_method": {"identifier": "plan", "parameters": "(OperatorNode<ExpressionOperator> filter)", "modifiers": "public", "return": "QueryStrategy", "body": "public QueryStrategy plan(OperatorNode<ExpressionOperator> filter) {\n        return planInternal(ImmutableSet.<String>of(), filter, false);\n    }", "signature": "QueryStrategy plan(OperatorNode<ExpressionOperator> filter)", "full_signature": "public QueryStrategy plan(OperatorNode<ExpressionOperator> filter)", "class_method_signature": "IndexedQueryPlanner.plan(OperatorNode<ExpressionOperator> filter)", "testcase": false, "constructor": false, "invocations": ["planInternal", "of"]}, "repository": {"repo_id": 76505423, "url": "https://github.com/yahoo/yql-plus", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 30, "size": 1315, "license": "licensed"}}