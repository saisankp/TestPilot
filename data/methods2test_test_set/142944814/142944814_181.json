{"test_class": {"identifier": "IntRangeTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/util/src/test/java/hera/util/IntRangeTest.java"}, "test_case": {"identifier": "testSelect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSelect() {\n    final Object[][] testParameters =\n        new Object[][] {{1, 5, 10, 15}, {-10, 1, 100, 101}, {-1, 0, 1, 2}, {-2, -1, 0, 1}};\n    for (final Object[] testParameter : testParameters) {\n      final Integer first = Integer.valueOf((Integer) testParameter[0]);\n      final Integer second = Integer.valueOf((Integer) testParameter[1]);\n      final Integer third = Integer.valueOf((Integer) testParameter[2]);\n      final Integer fourth = Integer.valueOf((Integer) testParameter[3]);\n      final IntRange intRange1 = new IntRange(first, third);\n      final IntRange intRange2 = new IntRange(second, fourth);\n      final IntRange join = intRange1.select(intRange2);\n      logger.debug(\"Range: {}\", join);\n      assertEquals(second, join.v1);\n      assertEquals(third, join.v2);\n    }\n  }", "signature": "void testSelect()", "full_signature": "@Test public void testSelect()", "class_method_signature": "IntRangeTest.testSelect()", "testcase": true, "constructor": false, "invocations": ["valueOf", "valueOf", "valueOf", "valueOf", "select", "debug", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "IntRange", "superclass": "extends Pair<Integer, Integer>", "interfaces": "", "fields": [], "methods": [{"identifier": "IntRange", "parameters": "(final Integer v1, final Integer v2)", "modifiers": "public", "return": "", "signature": " IntRange(final Integer v1, final Integer v2)", "full_signature": "public  IntRange(final Integer v1, final Integer v2)", "class_method_signature": "IntRange.IntRange(final Integer v1, final Integer v2)", "testcase": false, "constructor": true}, {"identifier": "select", "parameters": "(final IntRange sub)", "modifiers": "public", "return": "IntRange", "signature": "IntRange select(final IntRange sub)", "full_signature": "public IntRange select(final IntRange sub)", "class_method_signature": "IntRange.select(final IntRange sub)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "IntRange.toString()", "testcase": false, "constructor": false}], "file": "core/util/src/main/java/hera/util/IntRange.java"}, "focal_method": {"identifier": "select", "parameters": "(final IntRange sub)", "modifiers": "public", "return": "IntRange", "body": "public IntRange select(final IntRange sub) {\n    final int index1 = Math.min(Math.max(sub.v1, this.v1), this.v2);\n    final int index2 = Math.min(Math.max(sub.v2, this.v1), this.v2);\n\n    if (index1 == sub.v1 && index2 == sub.v2) {\n      return sub;\n    }\n\n    return new IntRange(index1, index2);\n  }", "signature": "IntRange select(final IntRange sub)", "full_signature": "public IntRange select(final IntRange sub)", "class_method_signature": "IntRange.select(final IntRange sub)", "testcase": false, "constructor": false, "invocations": ["min", "max", "min", "max"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}