{"test_class": {"identifier": "AtomTypeDiffTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [], "file": "misc/diff/src/test/java/org/openscience/cdk/tools/diff/AtomTypeDiffTest.java"}, "test_case": {"identifier": "testDifference", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDifference() {\n        IAtomType element1 = mock(IAtomType.class);\n        IAtomType element2 = mock(IAtomType.class);\n        when(element1.getHybridization()).thenReturn(PLANAR3);\n        when(element2.getHybridization()).thenReturn(SP3);\n\n        IDifference difference = AtomTypeDiff.difference(element1, element2);\n        Assert.assertNotNull(difference);\n    }", "signature": "void testDifference()", "full_signature": "@Test public void testDifference()", "class_method_signature": "AtomTypeDiffTest.testDifference()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getHybridization", "thenReturn", "when", "getHybridization", "difference", "assertNotNull"]}, "focal_class": {"identifier": "AtomTypeDiff", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "AtomTypeDiff", "parameters": "()", "modifiers": "private", "return": "", "signature": " AtomTypeDiff()", "full_signature": "private  AtomTypeDiff()", "class_method_signature": "AtomTypeDiff.AtomTypeDiff()", "testcase": false, "constructor": true}, {"identifier": "diff", "parameters": "(IChemObject first, IChemObject second)", "modifiers": "public static", "return": "String", "signature": "String diff(IChemObject first, IChemObject second)", "full_signature": "public static String diff(IChemObject first, IChemObject second)", "class_method_signature": "AtomTypeDiff.diff(IChemObject first, IChemObject second)", "testcase": false, "constructor": false}, {"identifier": "difference", "parameters": "(IChemObject first, IChemObject second)", "modifiers": "public static", "return": "IDifference", "signature": "IDifference difference(IChemObject first, IChemObject second)", "full_signature": "public static IDifference difference(IChemObject first, IChemObject second)", "class_method_signature": "AtomTypeDiff.difference(IChemObject first, IChemObject second)", "testcase": false, "constructor": false}], "file": "misc/diff/src/main/java/org/openscience/cdk/tools/diff/AtomTypeDiff.java"}, "focal_method": {"identifier": "difference", "parameters": "(IChemObject first, IChemObject second)", "modifiers": "public static", "return": "IDifference", "body": "public static IDifference difference(IChemObject first, IChemObject second) {\n        if (!(first instanceof IAtomType && second instanceof IAtomType)) {\n            return null;\n        }\n        IAtomType firstElem = (IAtomType) first;\n        IAtomType secondElem = (IAtomType) second;\n        ChemObjectDifference totalDiff = new ChemObjectDifference(\"AtomTypeDiff\");\n        totalDiff.addChild(StringDifference.construct(\"N\", firstElem.getAtomTypeName(), secondElem.getAtomTypeName()));\n        totalDiff.addChild(BondOrderDifference.construct(\"MBO\", firstElem.getMaxBondOrder(),\n                secondElem.getMaxBondOrder()));\n        totalDiff\n                .addChild(DoubleDifference.construct(\"BOS\", firstElem.getBondOrderSum(), secondElem.getBondOrderSum()));\n        totalDiff\n                .addChild(IntegerDifference.construct(\"FC\", firstElem.getFormalCharge(), secondElem.getFormalCharge()));\n        totalDiff.addChild(AtomTypeHybridizationDifference.construct(\"H\", firstElem.getHybridization(),\n                secondElem.getHybridization()));\n        totalDiff.addChild(IntegerDifference.construct(\"NC\", firstElem.getFormalNeighbourCount(),\n                secondElem.getFormalNeighbourCount()));\n        totalDiff.addChild(DoubleDifference.construct(\"CR\", firstElem.getCovalentRadius(),\n                secondElem.getCovalentRadius()));\n        totalDiff.addChild(IntegerDifference.construct(\"V\", firstElem.getValency(), secondElem.getValency()));\n        totalDiff.addChild(IsotopeDiff.difference(first, second));\n        if (totalDiff.childCount() > 0) {\n            return totalDiff;\n        } else {\n            return null;\n        }\n    }", "signature": "IDifference difference(IChemObject first, IChemObject second)", "full_signature": "public static IDifference difference(IChemObject first, IChemObject second)", "class_method_signature": "AtomTypeDiff.difference(IChemObject first, IChemObject second)", "testcase": false, "constructor": false, "invocations": ["addChild", "construct", "getAtomTypeName", "getAtomTypeName", "addChild", "construct", "getMaxBondOrder", "getMaxBondOrder", "addChild", "construct", "getBondOrderSum", "getBondOrderSum", "addChild", "construct", "getFormalCharge", "getFormalCharge", "addChild", "construct", "getHybridization", "getHybridization", "addChild", "construct", "getFormalNeighbourCount", "getFormalNeighbourCount", "addChild", "construct", "getCovalentRadius", "getCovalentRadius", "addChild", "construct", "getValency", "getValency", "addChild", "difference", "childCount"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}