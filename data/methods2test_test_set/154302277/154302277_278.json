{"test_class": {"identifier": "ClientConnectionEventListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String DEVICE_IDENTIFICATION = \"TEST-DEVICE-1\";", "modifier": "private final static", "type": "String", "declarator": "DEVICE_IDENTIFICATION = \"TEST-DEVICE-1\"", "var_name": "DEVICE_IDENTIFICATION"}, {"original_string": "private ClientConnectionEventListener clientConnectionEventListener;", "modifier": "private", "type": "ClientConnectionEventListener", "declarator": "clientConnectionEventListener", "var_name": "clientConnectionEventListener"}, {"original_string": "private ResponseMetadata responseMetadata;", "modifier": "private", "type": "ResponseMetadata", "declarator": "responseMetadata", "var_name": "responseMetadata"}, {"original_string": "@Mock\n    private ClientConnectionCache connectionCache;", "modifier": "@Mock\n    private", "type": "ClientConnectionCache", "declarator": "connectionCache", "var_name": "connectionCache"}, {"original_string": "@Mock\n    private ClientAsduHandlerRegistry asduHandlerRegistry;", "modifier": "@Mock\n    private", "type": "ClientAsduHandlerRegistry", "declarator": "asduHandlerRegistry", "var_name": "asduHandlerRegistry"}, {"original_string": "@Mock\n    private ClientAsduHandler asduHandler;", "modifier": "@Mock\n    private", "type": "ClientAsduHandler", "declarator": "asduHandler", "var_name": "asduHandler"}], "file": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/ClientConnectionEventListenerTest.java"}, "test_case": {"identifier": "shouldHandleAsduWhenNewAsduIsReceived", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldHandleAsduWhenNewAsduIsReceived() throws Exception {\n        // Arrange\n        final ASdu asdu = AsduFactory.ofType(ASduType.C_IC_NA_1);\n        when(this.asduHandlerRegistry.getHandler(asdu)).thenReturn(this.asduHandler);\n\n        // Act\n        this.clientConnectionEventListener.newASdu(asdu);\n\n        // Assert\n        verify(this.asduHandler).handleAsdu(asdu, this.responseMetadata);\n    }", "signature": "void shouldHandleAsduWhenNewAsduIsReceived()", "full_signature": "@Test public void shouldHandleAsduWhenNewAsduIsReceived()", "class_method_signature": "ClientConnectionEventListenerTest.shouldHandleAsduWhenNewAsduIsReceived()", "testcase": true, "constructor": false, "invocations": ["ofType", "thenReturn", "when", "getHandler", "newASdu", "handleAsdu", "verify"]}, "focal_class": {"identifier": "ClientConnectionEventListener", "superclass": "", "interfaces": "implements ConnectionEventListener", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ClientConnectionEventListener.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ClientConnectionEventListener.class)", "var_name": "LOGGER"}, {"original_string": "private final ResponseMetadata responseMetadata;", "modifier": "private final", "type": "ResponseMetadata", "declarator": "responseMetadata", "var_name": "responseMetadata"}, {"original_string": "private final ClientConnectionCache connectionCache;", "modifier": "private final", "type": "ClientConnectionCache", "declarator": "connectionCache", "var_name": "connectionCache"}, {"original_string": "private final ClientAsduHandlerRegistry asduHandlerRegistry;", "modifier": "private final", "type": "ClientAsduHandlerRegistry", "declarator": "asduHandlerRegistry", "var_name": "asduHandlerRegistry"}, {"original_string": "private final String deviceIdentification;", "modifier": "private final", "type": "String", "declarator": "deviceIdentification", "var_name": "deviceIdentification"}], "methods": [{"identifier": "ClientConnectionEventListener", "parameters": "(final String deviceIdentification, final ClientConnectionCache connectionCache,\n            final ClientAsduHandlerRegistry asduHandlerRegistry, final ResponseMetadata responseMetadata)", "modifiers": "public", "return": "", "signature": " ClientConnectionEventListener(final String deviceIdentification, final ClientConnectionCache connectionCache,\n            final ClientAsduHandlerRegistry asduHandlerRegistry, final ResponseMetadata responseMetadata)", "full_signature": "public  ClientConnectionEventListener(final String deviceIdentification, final ClientConnectionCache connectionCache,\n            final ClientAsduHandlerRegistry asduHandlerRegistry, final ResponseMetadata responseMetadata)", "class_method_signature": "ClientConnectionEventListener.ClientConnectionEventListener(final String deviceIdentification, final ClientConnectionCache connectionCache,\n            final ClientAsduHandlerRegistry asduHandlerRegistry, final ResponseMetadata responseMetadata)", "testcase": false, "constructor": true}, {"identifier": "newASdu", "parameters": "(final ASdu asdu)", "modifiers": "@Override public", "return": "void", "signature": "void newASdu(final ASdu asdu)", "full_signature": "@Override public void newASdu(final ASdu asdu)", "class_method_signature": "ClientConnectionEventListener.newASdu(final ASdu asdu)", "testcase": false, "constructor": false}, {"identifier": "connectionClosed", "parameters": "(final IOException e)", "modifiers": "@Override public", "return": "void", "signature": "void connectionClosed(final IOException e)", "full_signature": "@Override public void connectionClosed(final IOException e)", "class_method_signature": "ClientConnectionEventListener.connectionClosed(final IOException e)", "testcase": false, "constructor": false}], "file": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/ClientConnectionEventListener.java"}, "focal_method": {"identifier": "newASdu", "parameters": "(final ASdu asdu)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void newASdu(final ASdu asdu) {\n        LOGGER.info(\"Received incoming ASDU {} from device {}\", asdu, this.deviceIdentification);\n        try {\n            final ClientAsduHandler asduHandler = this.asduHandlerRegistry.getHandler(asdu);\n            asduHandler.handleAsdu(asdu, this.responseMetadata);\n\n        } catch (final Iec60870AsduHandlerNotFoundException e) {\n            LOGGER.error(\"Unknown request received, no handler available for ASDU: {}\", asdu, e);\n        } catch (final Exception e) {\n            LOGGER.error(\"Exception occurred while handling an incoming ASDU from device {}.\",\n                    this.deviceIdentification, e);\n        }\n    }", "signature": "void newASdu(final ASdu asdu)", "full_signature": "@Override public void newASdu(final ASdu asdu)", "class_method_signature": "ClientConnectionEventListener.newASdu(final ASdu asdu)", "testcase": false, "constructor": false, "invocations": ["info", "getHandler", "handleAsdu", "error", "error"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}