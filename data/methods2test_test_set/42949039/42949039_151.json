{"test_class": {"identifier": "StopWatchAdviceTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private StopWatchAdvice stopWatchAdvice;", "modifier": "@InjectMocks\n    private", "type": "StopWatchAdvice", "declarator": "stopWatchAdvice", "var_name": "stopWatchAdvice"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/advice/StopWatchAdviceTest.java"}, "test_case": {"identifier": "testLogMethodTimeWithInfoLoggingEnabled", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLogMethodTimeWithInfoLoggingEnabled() throws Throwable\n    {\n        // Mock a join point of the method call.\n        ProceedingJoinPoint joinPoint = getMockedProceedingJoinPoint(new StopWatchAdviceTest(), StopWatchAdviceTest.class.getDeclaredMethod(\"mockMethod\"));\n\n        // Get the logger and the current logger level.\n        LogLevel origLogLevel = getLogLevel(\"org.finra.herd.core.StopWatchAdvice\");\n\n        // Set logging level to INFO.\n        setLogLevel(\"org.finra.herd.core.StopWatchAdvice\", LogLevel.INFO);\n\n        // Run the test and reset the logging level back to the original value.\n        try\n        {\n            // Call the method under test.\n            stopWatchAdvice.logMethodTime(joinPoint);\n        }\n        finally\n        {\n            setLogLevel(\"org.finra.herd.core.StopWatchAdvice\", origLogLevel);\n        }\n    }", "signature": "void testLogMethodTimeWithInfoLoggingEnabled()", "full_signature": "@Test public void testLogMethodTimeWithInfoLoggingEnabled()", "class_method_signature": "StopWatchAdviceTest.testLogMethodTimeWithInfoLoggingEnabled()", "testcase": true, "constructor": false, "invocations": ["getMockedProceedingJoinPoint", "getDeclaredMethod", "getLogLevel", "setLogLevel", "logMethodTime", "setLogLevel"]}, "focal_class": {"identifier": "StopWatchAdvice", "superclass": "extends AbstractServiceAdvice", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(\"org.finra.herd.core.StopWatchAdvice\");", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(\"org.finra.herd.core.StopWatchAdvice\")", "var_name": "LOGGER"}], "methods": [{"identifier": "logMethodTime", "parameters": "(ProceedingJoinPoint pjp)", "modifiers": "@Around(\"serviceMethods()\") public", "return": "Object", "signature": "Object logMethodTime(ProceedingJoinPoint pjp)", "full_signature": "@Around(\"serviceMethods()\") public Object logMethodTime(ProceedingJoinPoint pjp)", "class_method_signature": "StopWatchAdvice.logMethodTime(ProceedingJoinPoint pjp)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/advice/StopWatchAdvice.java"}, "focal_method": {"identifier": "logMethodTime", "parameters": "(ProceedingJoinPoint pjp)", "modifiers": "@Around(\"serviceMethods()\") public", "return": "Object", "body": "@Around(\"serviceMethods()\")\n    public Object logMethodTime(ProceedingJoinPoint pjp) throws Throwable\n    {\n        // Get the target class being called.\n        Class<?> targetClass = pjp.getTarget().getClass();\n\n        // Get the target method being called.\n        MethodSignature targetMethodSignature = (MethodSignature) pjp.getSignature();\n        Method targetMethod = targetMethodSignature.getMethod();\n        if (targetMethod.getDeclaringClass().isInterface())\n        {\n            // Get the underlying implementation if we are given an interface.\n            targetMethod = pjp.getTarget().getClass().getMethod(pjp.getSignature().getName(), targetMethod.getParameterTypes());\n        }\n\n        // Only keep a stop watch if the class and method aren't suppressing logging and the log level is info.\n        if ((AnnotationUtils.findAnnotation(targetClass, SuppressLogging.class) == null) &&\n            (AnnotationUtils.findAnnotation(targetMethod, SuppressLogging.class) == null) && (LOGGER.isInfoEnabled()))\n        {\n            // Start the stop watch.\n            StopWatch stopWatch = new StopWatch();\n            stopWatch.start();\n\n            // Proceed to the join point (i.e. call the method and let it return).\n            Object returnValue = pjp.proceed();\n\n            // Log the duration.\n            long durationMilliseconds = stopWatch.getTime();\n            LOGGER.info(\"javaMethod=\\\"{}.{}\\\" javaMethodDurationTimeInMilliseconds={} javaMethodDurationTimeFormatted=\\\"{}\\\"\", targetClass.getName(),\n                targetMethodSignature.getName(), durationMilliseconds, HerdDateUtils.formatDuration(durationMilliseconds));\n\n            // Return the method return value.\n            return returnValue;\n        }\n        else\n        {\n            // Invoke the method normally.\n            return pjp.proceed();\n        }\n    }", "signature": "Object logMethodTime(ProceedingJoinPoint pjp)", "full_signature": "@Around(\"serviceMethods()\") public Object logMethodTime(ProceedingJoinPoint pjp)", "class_method_signature": "StopWatchAdvice.logMethodTime(ProceedingJoinPoint pjp)", "testcase": false, "constructor": false, "invocations": ["getClass", "getTarget", "getSignature", "getMethod", "isInterface", "getDeclaringClass", "getMethod", "getClass", "getTarget", "getName", "getSignature", "getParameterTypes", "findAnnotation", "findAnnotation", "isInfoEnabled", "start", "proceed", "getTime", "info", "getName", "getName", "formatDuration", "proceed"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}