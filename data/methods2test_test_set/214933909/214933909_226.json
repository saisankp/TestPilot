{"test_class": {"identifier": "SetupDataBaseControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private WebApplicationContext webApplicationContext;", "modifier": "@Autowired\n    private", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}, {"original_string": "@MockBean\n    private UserLoginInterceptor userLoginInterceptor;", "modifier": "@MockBean\n    private", "type": "UserLoginInterceptor", "declarator": "userLoginInterceptor", "var_name": "userLoginInterceptor"}, {"original_string": "@MockBean\n    private CommStatusInterceptor commStatusInterceptor;", "modifier": "@MockBean\n    private", "type": "CommStatusInterceptor", "declarator": "commStatusInterceptor", "var_name": "commStatusInterceptor"}, {"original_string": "@MockBean\n    private PermissionService permissionService;", "modifier": "@MockBean\n    private", "type": "PermissionService", "declarator": "permissionService", "var_name": "permissionService"}, {"original_string": "@MockBean\n    private SetupDataBaseService setupDataBaseService;", "modifier": "@MockBean\n    private", "type": "SetupDataBaseService", "declarator": "setupDataBaseService", "var_name": "setupDataBaseService"}, {"original_string": "@MockBean\n    private Consts consts;", "modifier": "@MockBean\n    private", "type": "Consts", "declarator": "consts", "var_name": "consts"}, {"original_string": "@Autowired\n    private SetupDataBaseService setupDBService;", "modifier": "@Autowired\n    private", "type": "SetupDataBaseService", "declarator": "setupDBService", "var_name": "setupDBService"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "private String requestJson;", "modifier": "private", "type": "String", "declarator": "requestJson", "var_name": "requestJson"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/controller/SetupDataBaseControllerTest.java"}, "test_case": {"identifier": "initializeDb", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void initializeDb() throws Exception {\n        requestJson = JSONObject.toJSONString(InitDbUserRequset.builder().adminName(\"name\").build());\n        mockMvc.perform(MockMvcRequestBuilders.post(\"/setupDb/initializeDb\")\n                .contentType(MediaType.APPLICATION_JSON_UTF8)\n                .content(requestJson)\n                .accept(MediaType.APPLICATION_JSON_UTF8))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andDo(MockMvcResultHandlers.print());\n    }", "signature": "void initializeDb()", "full_signature": "@Test public void initializeDb()", "class_method_signature": "SetupDataBaseControllerTest.initializeDb()", "testcase": true, "constructor": false, "invocations": ["toJSONString", "build", "adminName", "builder", "andDo", "andExpect", "perform", "accept", "content", "contentType", "post", "isOk", "status", "print"]}, "focal_class": {"identifier": "SetupDataBaseController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private Consts consts;", "modifier": "@Autowired\n    private", "type": "Consts", "declarator": "consts", "var_name": "consts"}, {"original_string": "@Autowired\n    private SetupDataBaseService setupDBService;", "modifier": "@Autowired\n    private", "type": "SetupDataBaseService", "declarator": "setupDBService", "var_name": "setupDBService"}], "methods": [{"identifier": "setupDbCheck", "parameters": "()", "modifiers": "@RequestMapping(value = \"/setupDbCheck\") public", "return": "ServiceResult", "signature": "ServiceResult setupDbCheck()", "full_signature": "@RequestMapping(value = \"/setupDbCheck\") public ServiceResult setupDbCheck()", "class_method_signature": "SetupDataBaseController.setupDbCheck()", "testcase": false, "constructor": false}, {"identifier": "connectionTest", "parameters": "(@RequestBody ConnectionRequest connectionRequest)", "modifiers": "@RequestMapping(value = \"/connectionTest\", method = RequestMethod.POST) public", "return": "ServiceResult", "signature": "ServiceResult connectionTest(@RequestBody ConnectionRequest connectionRequest)", "full_signature": "@RequestMapping(value = \"/connectionTest\", method = RequestMethod.POST) public ServiceResult connectionTest(@RequestBody ConnectionRequest connectionRequest)", "class_method_signature": "SetupDataBaseController.connectionTest(@RequestBody ConnectionRequest connectionRequest)", "testcase": false, "constructor": false}, {"identifier": "tableConsistentCheck", "parameters": "(@RequestBody ConnectionRequest connectionRequest)", "modifiers": "@RequestMapping(value = \"tableConsistentCheck\", method = RequestMethod.POST) public", "return": "ServiceResult", "signature": "ServiceResult tableConsistentCheck(@RequestBody ConnectionRequest connectionRequest)", "full_signature": "@RequestMapping(value = \"tableConsistentCheck\", method = RequestMethod.POST) public ServiceResult tableConsistentCheck(@RequestBody ConnectionRequest connectionRequest)", "class_method_signature": "SetupDataBaseController.tableConsistentCheck(@RequestBody ConnectionRequest connectionRequest)", "testcase": false, "constructor": false}, {"identifier": "initializeDb", "parameters": "(@RequestBody InitDbUserRequset initDbUserRequset)", "modifiers": "@RequestMapping(value = \"initializeDb\", method = RequestMethod.POST) public", "return": "ServiceResult", "signature": "ServiceResult initializeDb(@RequestBody InitDbUserRequset initDbUserRequset)", "full_signature": "@RequestMapping(value = \"initializeDb\", method = RequestMethod.POST) public ServiceResult initializeDb(@RequestBody InitDbUserRequset initDbUserRequset)", "class_method_signature": "SetupDataBaseController.initializeDb(@RequestBody InitDbUserRequset initDbUserRequset)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/controller/SetupDataBaseController.java"}, "focal_method": {"identifier": "initializeDb", "parameters": "(@RequestBody InitDbUserRequset initDbUserRequset)", "modifiers": "@RequestMapping(value = \"initializeDb\", method = RequestMethod.POST) public", "return": "ServiceResult", "body": "@RequestMapping(value = \"initializeDb\", method = RequestMethod.POST)\n    public ServiceResult initializeDb(@RequestBody InitDbUserRequset initDbUserRequset) {\n        try {\n           /* if (!setupDBService.datasourceXmlValid() || !setupDBService.initializeDatasourceXml(initDbUserRequset.getDbaddress(), initDbUserRequset.getDbport(), initDbUserRequset.getDbuser(), initDbUserRequset.getDbpassword(), initDbUserRequset.getDbcatalog())) {\n                return ServiceResult.fail(\"Error occured while initializing the jdbc.properties file.\");\n            }*/\n\n            /*if (!setupDBService.setupTables()) {\n                return ServiceResult.fail(\"Error occured while setting up the tables.\");\n            }\n\n            DasGroup group = DasGroup.builder()\n                    .group_name(initDbUserRequset.getGroupName())\n                    .group_comment(initDbUserRequset.getGroupComment())\n                    .build();\n\n            LoginUser user = LoginUser.builder()\n                    .userNo(initDbUserRequset.getAdminNo())\n                    .userName(initDbUserRequset.getAdminName())\n                    .userEmail(initDbUserRequset.getAdminEmail())\n                    .password(MD5Util.parseStrToMd5L32(initDbUserRequset.getAdminPass()))\n                    .build();*/\n\n            /*if (!setupDBService.setupAdmin(group, user)) {\n                return ServiceResult.fail(\"Error occured while setting up the admin.\");\n            }*/\n            return ServiceResult.success();\n        } catch (Exception e) {\n            log.error(\"SetupDBController.initializeDb : {}\", StringUtil.getMessage(e));\n            return ServiceResult.fail(StringUtil.getMessage(e));\n        }\n    }", "signature": "ServiceResult initializeDb(@RequestBody InitDbUserRequset initDbUserRequset)", "full_signature": "@RequestMapping(value = \"initializeDb\", method = RequestMethod.POST) public ServiceResult initializeDb(@RequestBody InitDbUserRequset initDbUserRequset)", "class_method_signature": "SetupDataBaseController.initializeDb(@RequestBody InitDbUserRequset initDbUserRequset)", "testcase": false, "constructor": false, "invocations": ["success", "error", "getMessage", "fail", "getMessage"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}