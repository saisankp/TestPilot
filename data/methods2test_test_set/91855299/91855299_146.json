{"test_class": {"identifier": "CameraUrlGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "plugins/cameraserver/src/test/java/edu/wpi/first/shuffleboard/plugin/cameraserver/source/CameraUrlGeneratorTest.java"}, "test_case": {"identifier": "testGenerateUrlsNI", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGenerateUrlsNI() {\n    String cameraName = \"IMAQdx:Microsoft LifeCam HD-3000\";\n    Map<String, String> commands = new HashMap<>();\n    commands.put(\"name\", cameraName);\n    String url1 = \"http://roborio-0000-frc.local:1181/IMAQdxStream.mjpg\";\n    String url2 = \"http://10.0.0.2:1181/IMAQdxStream.mjpg\";\n    String[] baseUrls = {url1, url2};\n\n\n    String[] baseUrlsWithNames = Arrays.stream(baseUrls).map(x -> x + \"?name=cam0\").toArray(String[]::new);\n    String[] baseUrlsWithCameraNames = Arrays.stream(baseUrls)\n        .map(x -> x + \"?name=IMAQdx%3AMicrosoft%20LifeCam%20HD-3000\")\n        .toArray(String[]::new);\n\n    assertArrayEquals(baseUrlsWithCameraNames, CameraUrlGenerator.generateUrls(commands, baseUrlsWithNames),\n        \"Name should be replaced\");\n  }", "signature": "void testGenerateUrlsNI()", "full_signature": "@Test public void testGenerateUrlsNI()", "class_method_signature": "CameraUrlGeneratorTest.testGenerateUrlsNI()", "testcase": true, "constructor": false, "invocations": ["put", "toArray", "map", "stream", "toArray", "map", "stream", "assertArrayEquals", "generateUrls"]}, "focal_class": {"identifier": "CameraUrlGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CameraServerSource source;", "modifier": "private final", "type": "CameraServerSource", "declarator": "source", "var_name": "source"}], "methods": [{"identifier": "CameraUrlGenerator", "parameters": "(CameraServerSource source)", "modifiers": "public", "return": "", "signature": " CameraUrlGenerator(CameraServerSource source)", "full_signature": "public  CameraUrlGenerator(CameraServerSource source)", "class_method_signature": "CameraUrlGenerator.CameraUrlGenerator(CameraServerSource source)", "testcase": false, "constructor": true}, {"identifier": "generateUrls", "parameters": "(String[] baseUrls)", "modifiers": "public", "return": "String[]", "signature": "String[] generateUrls(String[] baseUrls)", "full_signature": "public String[] generateUrls(String[] baseUrls)", "class_method_signature": "CameraUrlGenerator.generateUrls(String[] baseUrls)", "testcase": false, "constructor": false}, {"identifier": "generateUrls", "parameters": "(Map<String, String> commands, String[] baseUrls)", "modifiers": "@VisibleForTesting static", "return": "String[]", "signature": "String[] generateUrls(Map<String, String> commands, String[] baseUrls)", "full_signature": "@VisibleForTesting static String[] generateUrls(Map<String, String> commands, String[] baseUrls)", "class_method_signature": "CameraUrlGenerator.generateUrls(Map<String, String> commands, String[] baseUrls)", "testcase": false, "constructor": false}, {"identifier": "addHttpParams", "parameters": "(String input, Map<String, String> commands)", "modifiers": "@VisibleForTesting static", "return": "String", "signature": "String addHttpParams(String input, Map<String, String> commands)", "full_signature": "@VisibleForTesting static String addHttpParams(String input, Map<String, String> commands)", "class_method_signature": "CameraUrlGenerator.addHttpParams(String input, Map<String, String> commands)", "testcase": false, "constructor": false}, {"identifier": "encodeUri", "parameters": "(URI uri, String queryStr)", "modifiers": "private static", "return": "String", "signature": "String encodeUri(URI uri, String queryStr)", "full_signature": "private static String encodeUri(URI uri, String queryStr)", "class_method_signature": "CameraUrlGenerator.encodeUri(URI uri, String queryStr)", "testcase": false, "constructor": false}, {"identifier": "httpUrlEncode", "parameters": "(Map.Entry<String, String> rawCommand)", "modifiers": "private static", "return": "String", "signature": "String httpUrlEncode(Map.Entry<String, String> rawCommand)", "full_signature": "private static String httpUrlEncode(Map.Entry<String, String> rawCommand)", "class_method_signature": "CameraUrlGenerator.httpUrlEncode(Map.Entry<String, String> rawCommand)", "testcase": false, "constructor": false}], "file": "plugins/cameraserver/src/main/java/edu/wpi/first/shuffleboard/plugin/cameraserver/source/CameraUrlGenerator.java"}, "focal_method": {"identifier": "generateUrls", "parameters": "(String[] baseUrls)", "modifiers": "public", "return": "String[]", "body": "public String[] generateUrls(String[] baseUrls) { // NOPMD varargs instead of array\n    Map<String, String> commands = new LinkedHashMap<>();\n    Resolution resolution = source.getTargetResolution();\n    if (resolution != null && resolution.getWidth() > 0 && resolution.getHeight() > 0) {\n      commands.put(\"resolution\", resolution.getWidth() + \"x\" + resolution.getHeight());\n    }\n    int compression = source.getTargetCompression();\n    if (compression >= 0 && compression <= 100) {\n      commands.put(\"compression\", Integer.toString(compression));\n    }\n    int frameRate = source.getTargetFps();\n    if (frameRate > 0) {\n      commands.put(\"fps\", Integer.toString(frameRate));\n    }\n    // Add a special case command for NI Cameras\n    if (source.getName().contains(\"IMAQdx\")) {\n      commands.put(\"name\", source.getName());\n    }\n    return generateUrls(commands, baseUrls);\n  }", "signature": "String[] generateUrls(String[] baseUrls)", "full_signature": "public String[] generateUrls(String[] baseUrls)", "class_method_signature": "CameraUrlGenerator.generateUrls(String[] baseUrls)", "testcase": false, "constructor": false, "invocations": ["getTargetResolution", "getWidth", "getHeight", "put", "getWidth", "getHeight", "getTargetCompression", "put", "toString", "getTargetFps", "put", "toString", "contains", "getName", "put", "getName", "generateUrls"]}, "repository": {"repo_id": 91855299, "url": "https://github.com/wpilibsuite/shuffleboard", "stars": 52, "created": "5/20/2017 12:38:25 AM +00:00", "updates": "2020-01-23T20:11:35+00:00", "fork": "False", "license": "licensed"}}