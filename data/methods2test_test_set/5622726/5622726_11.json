{"test_class": {"identifier": "RequestParameterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ValidationStrategy<String> ALWAYS_INVALID_VALIDATION = new ValidationStrategy<String>(null, new Validator<String>() {\n        @Override\n        public boolean execute(String content) {\n            return false;\n        }\n    }, null);", "modifier": "private static final", "type": "ValidationStrategy<String>", "declarator": "ALWAYS_INVALID_VALIDATION = new ValidationStrategy<String>(null, new Validator<String>() {\n        @Override\n        public boolean execute(String content) {\n            return false;\n        }\n    }, null)", "var_name": "ALWAYS_INVALID_VALIDATION"}], "file": "inputvalidation/src/test/java/com/switchfly/inputvalidation/RequestParameterTest.java"}, "test_case": {"identifier": "testToBooleanWithValidValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToBooleanWithValidValues() throws Exception {\n        assertEquals(true, new RequestParameter(null, \"true\").toBoolean());\n        assertEquals(true, new RequestParameter(null, \"TRUE\").toBoolean());\n        assertEquals(true, new RequestParameter(null, \"yes\").toBoolean());\n        assertEquals(true, new RequestParameter(null, \"YES\").toBoolean());\n        assertEquals(false, new RequestParameter(null, \"false\").toBoolean());\n        assertEquals(false, new RequestParameter(null, \"no\").toBoolean());\n        assertEquals(false, new RequestParameter(null, \"1\").toBoolean());\n        assertEquals(false, new RequestParameter(null, \"0\").toBoolean());\n        assertEquals(false, new RequestParameter(null, \"foo\").toBoolean());\n    }", "signature": "void testToBooleanWithValidValues()", "full_signature": "@Test public void testToBooleanWithValidValues()", "class_method_signature": "RequestParameterTest.testToBooleanWithValidValues()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toBoolean", "assertEquals", "toBoolean", "assertEquals", "toBoolean", "assertEquals", "toBoolean", "assertEquals", "toBoolean", "assertEquals", "toBoolean", "assertEquals", "toBoolean", "assertEquals", "toBoolean", "assertEquals", "toBoolean"]}, "focal_class": {"identifier": "RequestParameter", "superclass": "extends Parameter<String>", "interfaces": "", "fields": [], "methods": [{"identifier": "RequestParameter", "parameters": "(String name, String value)", "modifiers": "public", "return": "", "signature": " RequestParameter(String name, String value)", "full_signature": "public  RequestParameter(String name, String value)", "class_method_signature": "RequestParameter.RequestParameter(String name, String value)", "testcase": false, "constructor": true}, {"identifier": "isBlank", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBlank()", "full_signature": "public boolean isBlank()", "class_method_signature": "RequestParameter.isBlank()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "RequestParameter.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "validateWith", "parameters": "(ValidationStrategy<String> validationStrategy)", "modifiers": "@Override public", "return": "RequestParameter", "signature": "RequestParameter validateWith(ValidationStrategy<String> validationStrategy)", "full_signature": "@Override public RequestParameter validateWith(ValidationStrategy<String> validationStrategy)", "class_method_signature": "RequestParameter.validateWith(ValidationStrategy<String> validationStrategy)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RequestParameter.toString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(String defaultValue)", "modifiers": "public", "return": "String", "signature": "String toString(String defaultValue)", "full_signature": "public String toString(String defaultValue)", "class_method_signature": "RequestParameter.toString(String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "toDouble", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double toDouble()", "full_signature": "public Double toDouble()", "class_method_signature": "RequestParameter.toDouble()", "testcase": false, "constructor": false}, {"identifier": "toDouble", "parameters": "(double defaultValue)", "modifiers": "public", "return": "Double", "signature": "Double toDouble(double defaultValue)", "full_signature": "public Double toDouble(double defaultValue)", "class_method_signature": "RequestParameter.toDouble(double defaultValue)", "testcase": false, "constructor": false}, {"identifier": "toLong", "parameters": "()", "modifiers": "public", "return": "Long", "signature": "Long toLong()", "full_signature": "public Long toLong()", "class_method_signature": "RequestParameter.toLong()", "testcase": false, "constructor": false}, {"identifier": "toLong", "parameters": "(long defaultValue)", "modifiers": "public", "return": "Long", "signature": "Long toLong(long defaultValue)", "full_signature": "public Long toLong(long defaultValue)", "class_method_signature": "RequestParameter.toLong(long defaultValue)", "testcase": false, "constructor": false}, {"identifier": "toInteger", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer toInteger()", "full_signature": "public Integer toInteger()", "class_method_signature": "RequestParameter.toInteger()", "testcase": false, "constructor": false}, {"identifier": "toInteger", "parameters": "(int defaultValue)", "modifiers": "public", "return": "Integer", "signature": "Integer toInteger(int defaultValue)", "full_signature": "public Integer toInteger(int defaultValue)", "class_method_signature": "RequestParameter.toInteger(int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "toBoolean", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean toBoolean()", "full_signature": "public boolean toBoolean()", "class_method_signature": "RequestParameter.toBoolean()", "testcase": false, "constructor": false}, {"identifier": "toBoolean", "parameters": "(boolean defaultValue)", "modifiers": "public", "return": "boolean", "signature": "boolean toBoolean(boolean defaultValue)", "full_signature": "public boolean toBoolean(boolean defaultValue)", "class_method_signature": "RequestParameter.toBoolean(boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "toEnum", "parameters": "(Class<E> type)", "modifiers": "public", "return": "E", "signature": "E toEnum(Class<E> type)", "full_signature": "public E toEnum(Class<E> type)", "class_method_signature": "RequestParameter.toEnum(Class<E> type)", "testcase": false, "constructor": false}, {"identifier": "toEnum", "parameters": "(Class<E> type, E defaultValue)", "modifiers": "public", "return": "E", "signature": "E toEnum(Class<E> type, E defaultValue)", "full_signature": "public E toEnum(Class<E> type, E defaultValue)", "class_method_signature": "RequestParameter.toEnum(Class<E> type, E defaultValue)", "testcase": false, "constructor": false}], "file": "inputvalidation/src/main/java/com/switchfly/inputvalidation/RequestParameter.java"}, "focal_method": {"identifier": "toBoolean", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean toBoolean() {\n        String value = toString();\n        return BooleanUtils.toBoolean(value);\n    }", "signature": "boolean toBoolean()", "full_signature": "public boolean toBoolean()", "class_method_signature": "RequestParameter.toBoolean()", "testcase": false, "constructor": false, "invocations": ["toString", "toBoolean"]}, "repository": {"repo_id": 5622726, "url": "https://github.com/switchfly/switchfly-java", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 752, "license": "licensed"}}