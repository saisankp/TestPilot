{"test_class": {"identifier": "AppSchemaDataAccessTest", "superclass": "extends AppSchemaTestSupport", "interfaces": "", "fields": [{"original_string": "private final static Logger LOGGER = org.geotools.util.logging.Logging\n            .getLogger(AppSchemaDataAccessTest.class.getPackage().getName());", "modifier": "private final static", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging\n            .getLogger(AppSchemaDataAccessTest.class.getPackage().getName())", "var_name": "LOGGER"}, {"original_string": "Name targetName;", "modifier": "", "type": "Name", "declarator": "targetName", "var_name": "targetName"}, {"original_string": "FeatureType targetType;", "modifier": "", "type": "FeatureType", "declarator": "targetType", "var_name": "targetType"}, {"original_string": "private AppSchemaDataAccess dataStore;", "modifier": "private", "type": "AppSchemaDataAccess", "declarator": "dataStore", "var_name": "dataStore"}, {"original_string": "FeatureTypeMapping mapping;", "modifier": "", "type": "FeatureTypeMapping", "declarator": "mapping", "var_name": "mapping"}], "file": "modules/extension/app-schema/app-schema/src/test/java/org/geotools/data/complex/AppSchemaDataAccessTest.java"}, "test_case": {"identifier": "testGetTypeNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetTypeNames() throws IOException {\n        Name[] typeNames = dataStore.getTypeNames();\n        assertNotNull(typeNames);\n        assertEquals(1, typeNames.length);\n        assertEquals(targetName, typeNames[0]);\n\n        // DataAccess interface:\n        List names = dataStore.getNames();\n        assertNotNull(names);\n        assertEquals(1, names.size());\n        assertEquals(targetName, names.get(0));\n    }", "signature": "void testGetTypeNames()", "full_signature": "@Test public void testGetTypeNames()", "class_method_signature": "AppSchemaDataAccessTest.testGetTypeNames()", "testcase": true, "constructor": false, "invocations": ["getTypeNames", "assertNotNull", "assertEquals", "assertEquals", "getNames", "assertNotNull", "assertEquals", "size", "assertEquals", "get"]}, "focal_class": {"identifier": "AppSchemaDataAccess", "superclass": "", "interfaces": "implements DataAccess<FeatureType, Feature>", "fields": [{"original_string": "private static final Logger LOGGER = org.geotools.util.logging.Logging\n            .getLogger(AppSchemaDataAccess.class.getPackage().getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging\n            .getLogger(AppSchemaDataAccess.class.getPackage().getName())", "var_name": "LOGGER"}, {"original_string": "private Map<Name, FeatureTypeMapping> mappings = new LinkedHashMap<Name, FeatureTypeMapping>();", "modifier": "private", "type": "Map<Name, FeatureTypeMapping>", "declarator": "mappings = new LinkedHashMap<Name, FeatureTypeMapping>()", "var_name": "mappings"}, {"original_string": "private FilterFactory2 filterFac = CommonFactoryFinder.getFilterFactory2(null);", "modifier": "private", "type": "FilterFactory2", "declarator": "filterFac = CommonFactoryFinder.getFilterFactory2(null)", "var_name": "filterFac"}], "methods": [{"identifier": "AppSchemaDataAccess", "parameters": "(Set<FeatureTypeMapping> mappings)", "modifiers": "public", "return": "", "signature": " AppSchemaDataAccess(Set<FeatureTypeMapping> mappings)", "full_signature": "public  AppSchemaDataAccess(Set<FeatureTypeMapping> mappings)", "class_method_signature": "AppSchemaDataAccess.AppSchemaDataAccess(Set<FeatureTypeMapping> mappings)", "testcase": false, "constructor": true}, {"identifier": "register", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void register()", "full_signature": "protected void register()", "class_method_signature": "AppSchemaDataAccess.register()", "testcase": false, "constructor": false}, {"identifier": "getTypeNames", "parameters": "()", "modifiers": "public", "return": "Name[]", "signature": "Name[] getTypeNames()", "full_signature": "public Name[] getTypeNames()", "class_method_signature": "AppSchemaDataAccess.getTypeNames()", "testcase": false, "constructor": false}, {"identifier": "getSchema", "parameters": "(Name typeName)", "modifiers": "public", "return": "FeatureType", "signature": "FeatureType getSchema(Name typeName)", "full_signature": "public FeatureType getSchema(Name typeName)", "class_method_signature": "AppSchemaDataAccess.getSchema(Name typeName)", "testcase": false, "constructor": false}, {"identifier": "getMappingByName", "parameters": "(Name typeName)", "modifiers": "public", "return": "FeatureTypeMapping", "signature": "FeatureTypeMapping getMappingByName(Name typeName)", "full_signature": "public FeatureTypeMapping getMappingByName(Name typeName)", "class_method_signature": "AppSchemaDataAccess.getMappingByName(Name typeName)", "testcase": false, "constructor": false}, {"identifier": "getMappingByElement", "parameters": "(Name typeName)", "modifiers": "public", "return": "FeatureTypeMapping", "signature": "FeatureTypeMapping getMappingByElement(Name typeName)", "full_signature": "public FeatureTypeMapping getMappingByElement(Name typeName)", "class_method_signature": "AppSchemaDataAccess.getMappingByElement(Name typeName)", "testcase": false, "constructor": false}, {"identifier": "hasName", "parameters": "(Name name)", "modifiers": "public", "return": "boolean", "signature": "boolean hasName(Name name)", "full_signature": "public boolean hasName(Name name)", "class_method_signature": "AppSchemaDataAccess.hasName(Name name)", "testcase": false, "constructor": false}, {"identifier": "hasElement", "parameters": "(Name typeName)", "modifiers": "public", "return": "boolean", "signature": "boolean hasElement(Name typeName)", "full_signature": "public boolean hasElement(Name typeName)", "class_method_signature": "AppSchemaDataAccess.hasElement(Name typeName)", "testcase": false, "constructor": false}, {"identifier": "getBounds", "parameters": "(Query query)", "modifiers": "protected", "return": "ReferencedEnvelope", "signature": "ReferencedEnvelope getBounds(Query query)", "full_signature": "protected ReferencedEnvelope getBounds(Query query)", "class_method_signature": "AppSchemaDataAccess.getBounds(Query query)", "testcase": false, "constructor": false}, {"identifier": "getCount", "parameters": "(final Query targetQuery)", "modifiers": "protected", "return": "int", "signature": "int getCount(final Query targetQuery)", "full_signature": "protected int getCount(final Query targetQuery)", "class_method_signature": "AppSchemaDataAccess.getCount(final Query targetQuery)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(Query query)", "modifiers": "private", "return": "Name", "signature": "Name getName(Query query)", "full_signature": "private Name getName(Query query)", "class_method_signature": "AppSchemaDataAccess.getName(Query query)", "testcase": false, "constructor": false}, {"identifier": "getUnsupportedFilter", "parameters": "(String typeName, Filter filter)", "modifiers": "protected", "return": "Filter", "signature": "Filter getUnsupportedFilter(String typeName, Filter filter)", "full_signature": "protected Filter getUnsupportedFilter(String typeName, Filter filter)", "class_method_signature": "AppSchemaDataAccess.getUnsupportedFilter(String typeName, Filter filter)", "testcase": false, "constructor": false}, {"identifier": "unrollQuery", "parameters": "(Query query, FeatureTypeMapping mapping)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "Query", "signature": "Query unrollQuery(Query query, FeatureTypeMapping mapping)", "full_signature": "@SuppressWarnings(\"unchecked\") public Query unrollQuery(Query query, FeatureTypeMapping mapping)", "class_method_signature": "AppSchemaDataAccess.unrollQuery(Query query, FeatureTypeMapping mapping)", "testcase": false, "constructor": false}, {"identifier": "matchProperty", "parameters": "(StepList requestedProperty, StepList target)", "modifiers": "protected static", "return": "boolean", "signature": "boolean matchProperty(StepList requestedProperty, StepList target)", "full_signature": "protected static boolean matchProperty(StepList requestedProperty, StepList target)", "class_method_signature": "AppSchemaDataAccess.matchProperty(StepList requestedProperty, StepList target)", "testcase": false, "constructor": false}, {"identifier": "matchProperty", "parameters": "(String requestedProperty, StepList target)", "modifiers": "protected static", "return": "boolean", "signature": "boolean matchProperty(String requestedProperty, StepList target)", "full_signature": "protected static boolean matchProperty(String requestedProperty, StepList target)", "class_method_signature": "AppSchemaDataAccess.matchProperty(String requestedProperty, StepList target)", "testcase": false, "constructor": false}, {"identifier": "getSurrogatePropertyNames", "parameters": "(List<PropertyName> requestedProperties,\n            FeatureTypeMapping mapping, boolean includeMandatory)", "modifiers": "private", "return": "List<PropertyName>", "signature": "List<PropertyName> getSurrogatePropertyNames(List<PropertyName> requestedProperties,\n            FeatureTypeMapping mapping, boolean includeMandatory)", "full_signature": "private List<PropertyName> getSurrogatePropertyNames(List<PropertyName> requestedProperties,\n            FeatureTypeMapping mapping, boolean includeMandatory)", "class_method_signature": "AppSchemaDataAccess.getSurrogatePropertyNames(List<PropertyName> requestedProperties,\n            FeatureTypeMapping mapping, boolean includeMandatory)", "testcase": false, "constructor": false}, {"identifier": "unrollProperty", "parameters": "(PropertyName property, final FeatureTypeMapping mapping)", "modifiers": "private", "return": "List<Expression>", "signature": "List<Expression> unrollProperty(PropertyName property, final FeatureTypeMapping mapping)", "full_signature": "private List<Expression> unrollProperty(PropertyName property, final FeatureTypeMapping mapping)", "class_method_signature": "AppSchemaDataAccess.unrollProperty(PropertyName property, final FeatureTypeMapping mapping)", "testcase": false, "constructor": false}, {"identifier": "unrollFilter", "parameters": "(Filter complexFilter, FeatureTypeMapping mapping)", "modifiers": "public static", "return": "Filter", "signature": "Filter unrollFilter(Filter complexFilter, FeatureTypeMapping mapping)", "full_signature": "public static Filter unrollFilter(Filter complexFilter, FeatureTypeMapping mapping)", "class_method_signature": "AppSchemaDataAccess.unrollFilter(Filter complexFilter, FeatureTypeMapping mapping)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void dispose()", "full_signature": "public void dispose()", "class_method_signature": "AppSchemaDataAccess.dispose()", "testcase": false, "constructor": false}, {"identifier": "getInfo", "parameters": "()", "modifiers": "public", "return": "ServiceInfo", "signature": "ServiceInfo getInfo()", "full_signature": "public ServiceInfo getInfo()", "class_method_signature": "AppSchemaDataAccess.getInfo()", "testcase": false, "constructor": false}, {"identifier": "getNames", "parameters": "()", "modifiers": "public", "return": "List<Name>", "signature": "List<Name> getNames()", "full_signature": "public List<Name> getNames()", "class_method_signature": "AppSchemaDataAccess.getNames()", "testcase": false, "constructor": false}, {"identifier": "createSchema", "parameters": "(FeatureType featureType)", "modifiers": "public", "return": "void", "signature": "void createSchema(FeatureType featureType)", "full_signature": "public void createSchema(FeatureType featureType)", "class_method_signature": "AppSchemaDataAccess.createSchema(FeatureType featureType)", "testcase": false, "constructor": false}, {"identifier": "getFeatureSource", "parameters": "(Name typeName)", "modifiers": "public", "return": "FeatureSource<FeatureType, Feature>", "signature": "FeatureSource<FeatureType, Feature> getFeatureSource(Name typeName)", "full_signature": "public FeatureSource<FeatureType, Feature> getFeatureSource(Name typeName)", "class_method_signature": "AppSchemaDataAccess.getFeatureSource(Name typeName)", "testcase": false, "constructor": false}, {"identifier": "updateSchema", "parameters": "(Name typeName, FeatureType featureType)", "modifiers": "public", "return": "void", "signature": "void updateSchema(Name typeName, FeatureType featureType)", "full_signature": "public void updateSchema(Name typeName, FeatureType featureType)", "class_method_signature": "AppSchemaDataAccess.updateSchema(Name typeName, FeatureType featureType)", "testcase": false, "constructor": false}, {"identifier": "removeSchema", "parameters": "(Name typeName)", "modifiers": "public", "return": "void", "signature": "void removeSchema(Name typeName)", "full_signature": "public void removeSchema(Name typeName)", "class_method_signature": "AppSchemaDataAccess.removeSchema(Name typeName)", "testcase": false, "constructor": false}, {"identifier": "getFeatureSourceByName", "parameters": "(Name typeName)", "modifiers": "public", "return": "FeatureSource<FeatureType, Feature>", "signature": "FeatureSource<FeatureType, Feature> getFeatureSourceByName(Name typeName)", "full_signature": "public FeatureSource<FeatureType, Feature> getFeatureSourceByName(Name typeName)", "class_method_signature": "AppSchemaDataAccess.getFeatureSourceByName(Name typeName)", "testcase": false, "constructor": false}, {"identifier": "findFeature", "parameters": "(FeatureId id, Hints hints)", "modifiers": "public", "return": "Feature", "signature": "Feature findFeature(FeatureId id, Hints hints)", "full_signature": "public Feature findFeature(FeatureId id, Hints hints)", "class_method_signature": "AppSchemaDataAccess.findFeature(FeatureId id, Hints hints)", "testcase": false, "constructor": false}], "file": "modules/extension/app-schema/app-schema/src/main/java/org/geotools/data/complex/AppSchemaDataAccess.java"}, "focal_method": {"identifier": "getTypeNames", "parameters": "()", "modifiers": "public", "return": "Name[]", "body": "public Name[] getTypeNames() throws IOException {\n        Name[] typeNames = new Name[mappings.size()];\n        int i = 0;\n        for (FeatureTypeMapping mapping : mappings.values()) {\n            typeNames[i] = mapping.getTargetFeature().getName();\n            i++;\n        }\n        return typeNames;\n    }", "signature": "Name[] getTypeNames()", "full_signature": "public Name[] getTypeNames()", "class_method_signature": "AppSchemaDataAccess.getTypeNames()", "testcase": false, "constructor": false, "invocations": ["size", "values", "getName", "getTargetFeature"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}