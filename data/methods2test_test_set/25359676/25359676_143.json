{"test_class": {"identifier": "RequestsNodeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private ActionRequestService actionRequestService;", "modifier": "@Mock\n    private", "type": "ActionRequestService", "declarator": "actionRequestService", "var_name": "actionRequestService"}, {"original_string": "@Mock\n    private ActionTakenValue actionTaken;", "modifier": "@Mock\n    private", "type": "ActionTakenValue", "declarator": "actionTaken", "var_name": "actionTaken"}, {"original_string": "@Mock\n    private DocumentRouteHeaderValue documentRouteHeaderValue;", "modifier": "@Mock\n    private", "type": "DocumentRouteHeaderValue", "declarator": "documentRouteHeaderValue", "var_name": "documentRouteHeaderValue"}, {"original_string": "@Mock\n    private RouteContext routeContext;", "modifier": "@Mock\n    private", "type": "RouteContext", "declarator": "routeContext", "var_name": "routeContext"}, {"original_string": "@Mock\n    private RouteModule routeModule;", "modifier": "@Mock\n    private", "type": "RouteModule", "declarator": "routeModule", "var_name": "routeModule"}, {"original_string": "@Mock\n    private RouteModuleService routeModuleService;", "modifier": "@Mock\n    private", "type": "RouteModuleService", "declarator": "routeModuleService", "var_name": "routeModuleService"}, {"original_string": "@Mock\n    private RouteNode routeNode;", "modifier": "@Mock\n    private", "type": "RouteNode", "declarator": "routeNode", "var_name": "routeNode"}, {"original_string": "@Mock\n    private RouteNodeInstance routeNodeInstance;", "modifier": "@Mock\n    private", "type": "RouteNodeInstance", "declarator": "routeNodeInstance", "var_name": "routeNodeInstance"}, {"original_string": "@InjectMocks\n    private RequestsNode requestsNode;", "modifier": "@InjectMocks\n    private", "type": "RequestsNode", "declarator": "requestsNode", "var_name": "requestsNode"}, {"original_string": "private final RouteNodeInstance nodeInstance = new RouteNodeInstance();", "modifier": "private final", "type": "RouteNodeInstance", "declarator": "nodeInstance = new RouteNodeInstance()", "var_name": "nodeInstance"}], "file": "rice-middleware/impl/src/test/java/org/kuali/rice/kew/engine/node/RequestsNodeTest.java"}, "test_case": {"identifier": "testActionRequestsWithDifferentNumbersOfChildrenAreNotDuplicates", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testActionRequestsWithDifferentNumbersOfChildrenAreNotDuplicates() throws Exception {\n        List<ActionRequestValue> actionRequestValues = new ArrayList<ActionRequestValue>();\n        ActionRequestValue firstActionRequest = getActionRequest();\n        List<ActionRequestValue> children = new ArrayList<ActionRequestValue>();\n        children.add(getActionRequest());\n        firstActionRequest.setChildrenRequests(children);\n        actionRequestValues.add(firstActionRequest);\n        ActionRequestValue secondActionRequest = getActionRequest();\n        secondActionRequest.setChildrenRequests(Collections.<ActionRequestValue>emptyList());\n        actionRequestValues.add(secondActionRequest);\n        when(routeModule.findActionRequests(routeContext)).thenReturn(actionRequestValues);\n\n        List<ActionRequestValue> deduplicatedActionRequestValues = requestsNode.getNewActionRequests(routeContext);\n        assertEquals(2, deduplicatedActionRequestValues.size());\n    }", "signature": "void testActionRequestsWithDifferentNumbersOfChildrenAreNotDuplicates()", "full_signature": "@Test public void testActionRequestsWithDifferentNumbersOfChildrenAreNotDuplicates()", "class_method_signature": "RequestsNodeTest.testActionRequestsWithDifferentNumbersOfChildrenAreNotDuplicates()", "testcase": true, "constructor": false, "invocations": ["getActionRequest", "add", "getActionRequest", "setChildrenRequests", "add", "getActionRequest", "setChildrenRequests", "emptyList", "add", "thenReturn", "when", "findActionRequests", "getNewActionRequests", "assertEquals", "size"]}, "focal_class": {"identifier": "RequestsNode", "superclass": "extends RequestActivationNode", "interfaces": "", "fields": [{"original_string": "private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger\n\t\t\t.getLogger( RequestsNode.class );", "modifier": "private static final", "type": "org.apache.log4j.Logger", "declarator": "LOG = org.apache.log4j.Logger\n\t\t\t.getLogger( RequestsNode.class )", "var_name": "LOG"}, {"original_string": "protected static final String SUPPRESS_POLICY_ERRORS_KEY = \"_suppressPolicyErrorsRequestActivationNode\";", "modifier": "protected static final", "type": "String", "declarator": "SUPPRESS_POLICY_ERRORS_KEY = \"_suppressPolicyErrorsRequestActivationNode\"", "var_name": "SUPPRESS_POLICY_ERRORS_KEY"}], "methods": [{"identifier": "process", "parameters": "(RouteContext routeContext, RouteHelper routeHelper)", "modifiers": "public final", "return": "SimpleResult", "signature": "SimpleResult process(RouteContext routeContext, RouteHelper routeHelper)", "full_signature": "public final SimpleResult process(RouteContext routeContext, RouteHelper routeHelper)", "class_method_signature": "RequestsNode.process(RouteContext routeContext, RouteHelper routeHelper)", "testcase": false, "constructor": false}, {"identifier": "generateRequests", "parameters": "(RouteContext routeContext)", "modifiers": "protected", "return": "List<ActionRequestValue>", "signature": "List<ActionRequestValue> generateRequests(RouteContext routeContext)", "full_signature": "protected List<ActionRequestValue> generateRequests(RouteContext routeContext)", "class_method_signature": "RequestsNode.generateRequests(RouteContext routeContext)", "testcase": false, "constructor": false}, {"identifier": "applyPoliciesOnExit", "parameters": "(List<ActionRequestValue> requestsGenerated, RouteContext routeContext)", "modifiers": "protected", "return": "void", "signature": "void applyPoliciesOnExit(List<ActionRequestValue> requestsGenerated, RouteContext routeContext)", "full_signature": "protected void applyPoliciesOnExit(List<ActionRequestValue> requestsGenerated, RouteContext routeContext)", "class_method_signature": "RequestsNode.applyPoliciesOnExit(List<ActionRequestValue> requestsGenerated, RouteContext routeContext)", "testcase": false, "constructor": false}, {"identifier": "processCustom", "parameters": "(RouteContext routeContext, RouteHelper routeHelper)", "modifiers": "protected", "return": "boolean", "signature": "boolean processCustom(RouteContext routeContext, RouteHelper routeHelper)", "full_signature": "protected boolean processCustom(RouteContext routeContext, RouteHelper routeHelper)", "class_method_signature": "RequestsNode.processCustom(RouteContext routeContext, RouteHelper routeHelper)", "testcase": false, "constructor": false}, {"identifier": "verifyFinalApprovalRequest", "parameters": "( DocumentRouteHeaderValue document, List<ActionRequestValue> requests, RouteNodeInstance nodeInstance, RouteContext routeContext )", "modifiers": "protected", "return": "void", "signature": "void verifyFinalApprovalRequest( DocumentRouteHeaderValue document, List<ActionRequestValue> requests, RouteNodeInstance nodeInstance, RouteContext routeContext )", "full_signature": "protected void verifyFinalApprovalRequest( DocumentRouteHeaderValue document, List<ActionRequestValue> requests, RouteNodeInstance nodeInstance, RouteContext routeContext )", "class_method_signature": "RequestsNode.verifyFinalApprovalRequest( DocumentRouteHeaderValue document, List<ActionRequestValue> requests, RouteNodeInstance nodeInstance, RouteContext routeContext )", "testcase": false, "constructor": false}, {"identifier": "getNewActionRequests", "parameters": "(RouteContext context)", "modifiers": "public", "return": "List<ActionRequestValue>", "signature": "List<ActionRequestValue> getNewActionRequests(RouteContext context)", "full_signature": "public List<ActionRequestValue> getNewActionRequests(RouteContext context)", "class_method_signature": "RequestsNode.getNewActionRequests(RouteContext context)", "testcase": false, "constructor": false}, {"identifier": "isDuplicateActionRequestDetected", "parameters": "(ActionRequestValue actionRequest, ActionRequestValue actionRequestToCompare)", "modifiers": "private", "return": "boolean", "signature": "boolean isDuplicateActionRequestDetected(ActionRequestValue actionRequest, ActionRequestValue actionRequestToCompare)", "full_signature": "private boolean isDuplicateActionRequestDetected(ActionRequestValue actionRequest, ActionRequestValue actionRequestToCompare)", "class_method_signature": "RequestsNode.isDuplicateActionRequestDetected(ActionRequestValue actionRequest, ActionRequestValue actionRequestToCompare)", "testcase": false, "constructor": false}, {"identifier": "areChildrenDuplicated", "parameters": "(List<ActionRequestValue> childrenRequests, List<ActionRequestValue> childrenRequestsToCompare)", "modifiers": "private", "return": "boolean", "signature": "boolean areChildrenDuplicated(List<ActionRequestValue> childrenRequests, List<ActionRequestValue> childrenRequestsToCompare)", "full_signature": "private boolean areChildrenDuplicated(List<ActionRequestValue> childrenRequests, List<ActionRequestValue> childrenRequestsToCompare)", "class_method_signature": "RequestsNode.areChildrenDuplicated(List<ActionRequestValue> childrenRequests, List<ActionRequestValue> childrenRequestsToCompare)", "testcase": false, "constructor": false}, {"identifier": "getRouteModule", "parameters": "(RouteContext context)", "modifiers": "protected", "return": "RouteModule", "signature": "RouteModule getRouteModule(RouteContext context)", "full_signature": "protected RouteModule getRouteModule(RouteContext context)", "class_method_signature": "RequestsNode.getRouteModule(RouteContext context)", "testcase": false, "constructor": false}, {"identifier": "isPastFinalApprover", "parameters": "(DocumentRouteHeaderValue document,\n\t\t\tRouteNodeInstance nodeInstance)", "modifiers": "protected", "return": "boolean", "signature": "boolean isPastFinalApprover(DocumentRouteHeaderValue document,\n\t\t\tRouteNodeInstance nodeInstance)", "full_signature": "protected boolean isPastFinalApprover(DocumentRouteHeaderValue document,\n\t\t\tRouteNodeInstance nodeInstance)", "class_method_signature": "RequestsNode.isPastFinalApprover(DocumentRouteHeaderValue document,\n\t\t\tRouteNodeInstance nodeInstance)", "testcase": false, "constructor": false}, {"identifier": "isPastFinalApprover", "parameters": "(List previousNodeInstances, FinalApproverContext context,\n\t\t\tSet revokedNodeInstanceIds)", "modifiers": "protected", "return": "void", "signature": "void isPastFinalApprover(List previousNodeInstances, FinalApproverContext context,\n\t\t\tSet revokedNodeInstanceIds)", "full_signature": "protected void isPastFinalApprover(List previousNodeInstances, FinalApproverContext context,\n\t\t\tSet revokedNodeInstanceIds)", "class_method_signature": "RequestsNode.isPastFinalApprover(List previousNodeInstances, FinalApproverContext context,\n\t\t\tSet revokedNodeInstanceIds)", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "(RouteNodeInstance nodeInstance)", "modifiers": "protected", "return": "Object", "signature": "Object getKey(RouteNodeInstance nodeInstance)", "full_signature": "protected Object getKey(RouteNodeInstance nodeInstance)", "class_method_signature": "RequestsNode.getKey(RouteNodeInstance nodeInstance)", "testcase": false, "constructor": false}, {"identifier": "detectRunawayProcess", "parameters": "(RouteContext routeContext, int currentIteration)", "modifiers": "protected", "return": "void", "signature": "void detectRunawayProcess(RouteContext routeContext, int currentIteration)", "full_signature": "protected void detectRunawayProcess(RouteContext routeContext, int currentIteration)", "class_method_signature": "RequestsNode.detectRunawayProcess(RouteContext routeContext, int currentIteration)", "testcase": false, "constructor": false}, {"identifier": "isSuppressingPolicyErrors", "parameters": "(RouteContext routeContext)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSuppressingPolicyErrors(RouteContext routeContext)", "full_signature": "public static boolean isSuppressingPolicyErrors(RouteContext routeContext)", "class_method_signature": "RequestsNode.isSuppressingPolicyErrors(RouteContext routeContext)", "testcase": false, "constructor": false}, {"identifier": "setSuppressPolicyErrors", "parameters": "(RouteContext routeContext)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "void", "signature": "void setSuppressPolicyErrors(RouteContext routeContext)", "full_signature": "@SuppressWarnings(\"unchecked\") public static void setSuppressPolicyErrors(RouteContext routeContext)", "class_method_signature": "RequestsNode.setSuppressPolicyErrors(RouteContext routeContext)", "testcase": false, "constructor": false}, {"identifier": "getParameterService", "parameters": "()", "modifiers": "protected", "return": "ParameterService", "signature": "ParameterService getParameterService()", "full_signature": "protected ParameterService getParameterService()", "class_method_signature": "RequestsNode.getParameterService()", "testcase": false, "constructor": false}], "file": "rice-middleware/impl/src/main/java/org/kuali/rice/kew/engine/node/RequestsNode.java"}, "focal_method": {"identifier": "getNewActionRequests", "parameters": "(RouteContext context)", "modifiers": "public", "return": "List<ActionRequestValue>", "body": "public List<ActionRequestValue> getNewActionRequests(RouteContext context) throws Exception {\n\t\tRouteNodeInstance nodeInstance = context.getNodeInstance();\n\t\tString routeMethodName = nodeInstance.getRouteNode().getRouteMethodName();\n\t\tif ( LOG.isDebugEnabled() ) {\n\t\t\tLOG.debug( \"Looking for action requests in \" + routeMethodName + \" : \"\n\t\t\t\t\t+ nodeInstance.getRouteNode().getRouteNodeName() );\n\t\t}\n\t\tList<ActionRequestValue> newRequests = new ArrayList<ActionRequestValue>();\n\t\ttry {\n\t\t\tRouteModule routeModule = getRouteModule( context );\n\t\t\tList<ActionRequestValue> requests = routeModule.findActionRequests( context );\n            // route module should only be returning root requests to us, but in case it doesn't...\n            requests = KEWServiceLocator.getActionRequestService().getRootRequests(requests);\n            List<ActionRequestValue> uniqueRequests = new ArrayList<ActionRequestValue>();\n            for ( ActionRequestValue actionRequest : requests ) {\n                boolean duplicateFound = false;\n                for (ActionRequestValue uniqueRequest: uniqueRequests ) {\n                    if (isDuplicateActionRequestDetected(uniqueRequest, actionRequest)) {\n                        duplicateFound = true;\n                        break;\n                    }\n                }\n                if (!duplicateFound) {\n                    uniqueRequests.add(actionRequest);\n                }\n            }\n            for ( ActionRequestValue actionRequest : uniqueRequests ) {\n\t\t\t\tif ( LOG.isDebugEnabled() ) {\n\t\t\t\t\tLOG.debug( \"Request generated by RouteModule '\" + routeModule + \"' for node \"\n\t\t\t\t\t\t\t+ nodeInstance + \":\" + actionRequest );\n\t\t\t\t}\n\t\t\t\tactionRequest = KEWServiceLocator.getActionRequestService()\n\t\t\t\t\t\t.initializeActionRequestGraph( actionRequest, context.getDocument(),\n\t\t\t\t\t\t\t\tnodeInstance );\n\t\t\t\tactionRequest = saveActionRequest( context, actionRequest );\n\t\t\t\tnewRequests.add( actionRequest );\n\t\t\t}\n\t\t} catch ( WorkflowException ex ) {\n\t\t\tLOG.warn( \"Caught WorkflowException during routing\", ex );\n\t\t\tthrow new RouteManagerException( ex, context );\n\t\t}\n\t\treturn newRequests;\n\t}", "signature": "List<ActionRequestValue> getNewActionRequests(RouteContext context)", "full_signature": "public List<ActionRequestValue> getNewActionRequests(RouteContext context)", "class_method_signature": "RequestsNode.getNewActionRequests(RouteContext context)", "testcase": false, "constructor": false, "invocations": ["getNodeInstance", "getRouteMethodName", "getRouteNode", "isDebugEnabled", "debug", "getRouteNodeName", "getRouteNode", "getRouteModule", "findActionRequests", "getRootRequests", "getActionRequestService", "isDuplicateActionRequestDetected", "add", "isDebugEnabled", "debug", "initializeActionRequestGraph", "getActionRequestService", "getDocument", "saveActionRequest", "add", "warn"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}