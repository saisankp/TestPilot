{"test_class": {"identifier": "CountUpdateBloomFilterWrapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LongAdder filterUpdateTimesCounter;", "modifier": "private", "type": "LongAdder", "declarator": "filterUpdateTimesCounter", "var_name": "filterUpdateTimesCounter"}, {"original_string": "private BloomFilter innerFilter;", "modifier": "private", "type": "BloomFilter", "declarator": "innerFilter", "var_name": "innerFilter"}, {"original_string": "private CountUpdateBloomFilterWrapper wrapper;", "modifier": "private", "type": "CountUpdateBloomFilterWrapper", "declarator": "wrapper", "var_name": "wrapper"}], "file": "filter-service-core/src/test/java/cn/leancloud/filter/service/CountUpdateBloomFilterWrapperTest.java"}, "test_case": {"identifier": "testUpdateCounter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUpdateCounter() {\n        final String testingValue = \"testingValue\";\n        when(innerFilter.set(testingValue)).thenReturn(false);\n        assertThat(filterUpdateTimesCounter.sum()).isZero();\n        assertThat(wrapper.set(testingValue)).isFalse();\n        assertThat(filterUpdateTimesCounter.sum()).isEqualTo(1);\n    }", "signature": "void testUpdateCounter()", "full_signature": "@Test public void testUpdateCounter()", "class_method_signature": "CountUpdateBloomFilterWrapperTest.testUpdateCounter()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "set", "isZero", "assertThat", "sum", "isFalse", "assertThat", "set", "isEqualTo", "assertThat", "sum"]}, "focal_class": {"identifier": "CountUpdateBloomFilterWrapper", "superclass": "", "interfaces": "implements BloomFilter", "fields": [{"original_string": "private final LongAdder filterUpdateTimesCounter;", "modifier": "private final", "type": "LongAdder", "declarator": "filterUpdateTimesCounter", "var_name": "filterUpdateTimesCounter"}, {"original_string": "@JsonUnwrapped\n    private final BloomFilter filter;", "modifier": "@JsonUnwrapped\n    private final", "type": "BloomFilter", "declarator": "filter", "var_name": "filter"}], "methods": [{"identifier": "CountUpdateBloomFilterWrapper", "parameters": "(BloomFilter filter, LongAdder filterUpdateTimesCounter)", "modifiers": "", "return": "", "signature": " CountUpdateBloomFilterWrapper(BloomFilter filter, LongAdder filterUpdateTimesCounter)", "full_signature": "  CountUpdateBloomFilterWrapper(BloomFilter filter, LongAdder filterUpdateTimesCounter)", "class_method_signature": "CountUpdateBloomFilterWrapper.CountUpdateBloomFilterWrapper(BloomFilter filter, LongAdder filterUpdateTimesCounter)", "testcase": false, "constructor": true}, {"identifier": "expectedInsertions", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int expectedInsertions()", "full_signature": "@Override public int expectedInsertions()", "class_method_signature": "CountUpdateBloomFilterWrapper.expectedInsertions()", "testcase": false, "constructor": false}, {"identifier": "fpp", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double fpp()", "full_signature": "@Override public double fpp()", "class_method_signature": "CountUpdateBloomFilterWrapper.fpp()", "testcase": false, "constructor": false}, {"identifier": "mightContain", "parameters": "(String value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean mightContain(String value)", "full_signature": "@Override public boolean mightContain(String value)", "class_method_signature": "CountUpdateBloomFilterWrapper.mightContain(String value)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(String value)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean set(String value)", "full_signature": "@Override public boolean set(String value)", "class_method_signature": "CountUpdateBloomFilterWrapper.set(String value)", "testcase": false, "constructor": false}, {"identifier": "valid", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean valid()", "full_signature": "@Override public boolean valid()", "class_method_signature": "CountUpdateBloomFilterWrapper.valid()", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(OutputStream out)", "modifiers": "@Override public", "return": "void", "signature": "void writeTo(OutputStream out)", "full_signature": "@Override public void writeTo(OutputStream out)", "class_method_signature": "CountUpdateBloomFilterWrapper.writeTo(OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "CountUpdateBloomFilterWrapper.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "CountUpdateBloomFilterWrapper.hashCode()", "testcase": false, "constructor": false}], "file": "filter-service-core/src/main/java/cn/leancloud/filter/service/CountUpdateBloomFilterWrapper.java"}, "focal_method": {"identifier": "set", "parameters": "(String value)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean set(String value) {\n        filterUpdateTimesCounter.increment();\n        return filter.set(value);\n    }", "signature": "boolean set(String value)", "full_signature": "@Override public boolean set(String value)", "class_method_signature": "CountUpdateBloomFilterWrapper.set(String value)", "testcase": false, "constructor": false, "invocations": ["increment", "set"]}, "repository": {"repo_id": 217849614, "url": "https://github.com/leancloud/filter-service", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 14, "size": 2797, "license": "licensed"}}