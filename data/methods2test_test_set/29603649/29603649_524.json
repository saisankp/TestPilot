{"test_class": {"identifier": "ConditionEvaluatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Condition condition;", "modifier": "@Mock\n    private", "type": "Condition", "declarator": "condition", "var_name": "condition"}, {"original_string": "@Mock\n    private ConditionChecker conditionChecker;", "modifier": "@Mock\n    private", "type": "ConditionChecker", "declarator": "conditionChecker", "var_name": "conditionChecker"}, {"original_string": "@Mock\n    private WilmaHttpRequest request;", "modifier": "@Mock\n    private", "type": "WilmaHttpRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private SimpleCondition simpleCondition;", "modifier": "@Mock\n    private", "type": "SimpleCondition", "declarator": "simpleCondition", "var_name": "simpleCondition"}, {"original_string": "@Mock\n    private CompositeCondition compositeConditionMock;", "modifier": "@Mock\n    private", "type": "CompositeCondition", "declarator": "compositeConditionMock", "var_name": "compositeConditionMock"}, {"original_string": "private CompositeCondition compositeCondition;", "modifier": "private", "type": "CompositeCondition", "declarator": "compositeCondition", "var_name": "compositeCondition"}, {"original_string": "private ConditionEvaluator underTest;", "modifier": "private", "type": "ConditionEvaluator", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "private ParameterList parameterMap;", "modifier": "private", "type": "ParameterList", "declarator": "parameterMap", "var_name": "parameterMap"}], "file": "wilma-application/modules/wilma-route-engine/src/test/java/com/epam/wilma/router/evaluation/ConditionEvaluatorTest.java"}, "test_case": {"identifier": "testEvaluateWhenConditionIsOrShouldReturnFalse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEvaluateWhenConditionIsOrShouldReturnFalse() {\n        //GIVEN\n        List<Condition> conditionList = new ArrayList<>();\n        conditionList.add(simpleCondition);\n        conditionList.add(simpleCondition);\n        compositeCondition = new CompositeCondition(ConditionType.OR, conditionList);\n        given(conditionChecker.checkCondition(request, parameterMap)).willReturn(false);\n        //WHEN\n        boolean actual = underTest.evaluate(compositeCondition, request);\n        //THEN\n        assertEquals(actual, false);\n    }", "signature": "void testEvaluateWhenConditionIsOrShouldReturnFalse()", "full_signature": "@Test public void testEvaluateWhenConditionIsOrShouldReturnFalse()", "class_method_signature": "ConditionEvaluatorTest.testEvaluateWhenConditionIsOrShouldReturnFalse()", "testcase": true, "constructor": false, "invocations": ["add", "add", "willReturn", "given", "checkCondition", "evaluate", "assertEquals"]}, "focal_class": {"identifier": "ConditionEvaluator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "evaluate", "parameters": "(final Condition condition, final WilmaHttpRequest request)", "modifiers": "public", "return": "boolean", "signature": "boolean evaluate(final Condition condition, final WilmaHttpRequest request)", "full_signature": "public boolean evaluate(final Condition condition, final WilmaHttpRequest request)", "class_method_signature": "ConditionEvaluator.evaluate(final Condition condition, final WilmaHttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "evaluateAndCondition", "parameters": "(final Condition condition, final WilmaHttpRequest request)", "modifiers": "private", "return": "boolean", "signature": "boolean evaluateAndCondition(final Condition condition, final WilmaHttpRequest request)", "full_signature": "private boolean evaluateAndCondition(final Condition condition, final WilmaHttpRequest request)", "class_method_signature": "ConditionEvaluator.evaluateAndCondition(final Condition condition, final WilmaHttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "evaluateOrCondition", "parameters": "(final Condition condition, final WilmaHttpRequest request)", "modifiers": "private", "return": "boolean", "signature": "boolean evaluateOrCondition(final Condition condition, final WilmaHttpRequest request)", "full_signature": "private boolean evaluateOrCondition(final Condition condition, final WilmaHttpRequest request)", "class_method_signature": "ConditionEvaluator.evaluateOrCondition(final Condition condition, final WilmaHttpRequest request)", "testcase": false, "constructor": false}, {"identifier": "evaluateNotCondition", "parameters": "(final Condition condition, final WilmaHttpRequest request)", "modifiers": "private", "return": "boolean", "signature": "boolean evaluateNotCondition(final Condition condition, final WilmaHttpRequest request)", "full_signature": "private boolean evaluateNotCondition(final Condition condition, final WilmaHttpRequest request)", "class_method_signature": "ConditionEvaluator.evaluateNotCondition(final Condition condition, final WilmaHttpRequest request)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-route-engine/src/main/java/com/epam/wilma/router/evaluation/ConditionEvaluator.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(final Condition condition, final WilmaHttpRequest request)", "modifiers": "public", "return": "boolean", "body": "public boolean evaluate(final Condition condition, final WilmaHttpRequest request) {\n        boolean fulfilled = false;\n        if (condition instanceof CompositeCondition) {\n            if (condition.getConditionType() == ConditionType.AND) {\n                fulfilled = evaluateAndCondition(condition, request);\n            } else if (condition.getConditionType() == ConditionType.OR) {\n                fulfilled = evaluateOrCondition(condition, request);\n            } else if (condition.getConditionType() == ConditionType.NOT) {\n                fulfilled = evaluateNotCondition(condition, request);\n            }\n        } else if (condition instanceof SimpleCondition) {\n            SimpleCondition simpleCondition = (SimpleCondition) condition;\n            ConditionChecker conditionChecker = simpleCondition.getConditionChecker();\n            boolean negate = simpleCondition.isNegate();\n            fulfilled = !negate && conditionChecker.checkCondition(request, simpleCondition.getParameters());\n        }\n        return fulfilled;\n    }", "signature": "boolean evaluate(final Condition condition, final WilmaHttpRequest request)", "full_signature": "public boolean evaluate(final Condition condition, final WilmaHttpRequest request)", "class_method_signature": "ConditionEvaluator.evaluate(final Condition condition, final WilmaHttpRequest request)", "testcase": false, "constructor": false, "invocations": ["getConditionType", "evaluateAndCondition", "getConditionType", "evaluateOrCondition", "getConditionType", "evaluateNotCondition", "getConditionChecker", "isNegate", "checkCondition", "getParameters"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}