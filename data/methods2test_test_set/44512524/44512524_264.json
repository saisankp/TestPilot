{"test_class": {"identifier": "DistributedCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DistributedCache distributedCache;", "modifier": "private", "type": "DistributedCache", "declarator": "distributedCache", "var_name": "distributedCache"}, {"original_string": "private HazelcastInstance hazelcastInstance;", "modifier": "private", "type": "HazelcastInstance", "declarator": "hazelcastInstance", "var_name": "hazelcastInstance"}, {"original_string": "private ObjectMapper mapper;", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}], "file": "real-time/foxtrot/foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/impl/DistributedCacheTest.java"}, "test_case": {"identifier": "testPut", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPut() throws Exception {\n        ActionResponse expectedResponse = new GroupResponse(Collections.<String, Object>singletonMap(\"Hello\", \"world\"));\n        ActionResponse returnResponse = distributedCache.put(\"DUMMY_KEY_PUT\", expectedResponse);\n        assertEquals(expectedResponse, returnResponse);\n\n        GroupResponse actualResponse = GroupResponse.class.cast(distributedCache.get(\"DUMMY_KEY_PUT\"));\n        assertEquals(GroupResponse.class.cast(expectedResponse).getResult(), actualResponse.getResult());\n    }", "signature": "void testPut()", "full_signature": "@Test public void testPut()", "class_method_signature": "DistributedCacheTest.testPut()", "testcase": true, "constructor": false, "invocations": ["singletonMap", "put", "assertEquals", "cast", "get", "assertEquals", "getResult", "cast", "getResult"]}, "focal_class": {"identifier": "DistributedCache", "superclass": "", "interfaces": "implements Cache", "fields": [{"original_string": "private static final String NAME_PREFIX=\"cache-for-\";", "modifier": "private static final", "type": "String", "declarator": "NAME_PREFIX=\"cache-for-\"", "var_name": "NAME_PREFIX"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(DistributedCache.class.getSimpleName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DistributedCache.class.getSimpleName())", "var_name": "logger"}, {"original_string": "private final IMap<String, String> distributedMap;", "modifier": "private final", "type": "IMap<String, String>", "declarator": "distributedMap", "var_name": "distributedMap"}, {"original_string": "private final ObjectMapper mapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "setupConfig", "parameters": "(HazelcastConnection hazelcastConnection)", "modifiers": "public static", "return": "void", "signature": "void setupConfig(HazelcastConnection hazelcastConnection)", "full_signature": "public static void setupConfig(HazelcastConnection hazelcastConnection)", "class_method_signature": "DistributedCache.setupConfig(HazelcastConnection hazelcastConnection)", "testcase": false, "constructor": false}, {"identifier": "DistributedCache", "parameters": "(HazelcastConnection hazelcastConnection, String name, ObjectMapper mapper)", "modifiers": "public", "return": "", "signature": " DistributedCache(HazelcastConnection hazelcastConnection, String name, ObjectMapper mapper)", "full_signature": "public  DistributedCache(HazelcastConnection hazelcastConnection, String name, ObjectMapper mapper)", "class_method_signature": "DistributedCache.DistributedCache(HazelcastConnection hazelcastConnection, String name, ObjectMapper mapper)", "testcase": false, "constructor": true}, {"identifier": "put", "parameters": "(String key, ActionResponse data)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse put(String key, ActionResponse data)", "full_signature": "@Override public ActionResponse put(String key, ActionResponse data)", "class_method_signature": "DistributedCache.put(String key, ActionResponse data)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String key)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse get(String key)", "full_signature": "@Override public ActionResponse get(String key)", "class_method_signature": "DistributedCache.get(String key)", "testcase": false, "constructor": false}, {"identifier": "has", "parameters": "(String key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean has(String key)", "full_signature": "@Override public boolean has(String key)", "class_method_signature": "DistributedCache.has(String key)", "testcase": false, "constructor": false}], "file": "real-time/foxtrot/foxtrot-core/src/main/java/com/flipkart/foxtrot/core/querystore/impl/DistributedCache.java"}, "focal_method": {"identifier": "put", "parameters": "(String key, ActionResponse data)", "modifiers": "@Override public", "return": "ActionResponse", "body": "@Override\n    public ActionResponse put(String key, ActionResponse data) {\n        try {\n            final String serializedData = mapper.writeValueAsString(data);\n            if (serializedData != null) {\n                // Only cache if size is less that 32 KB\n                if (serializedData.length() <= 32 * 1024) {\n                    distributedMap.put(key, mapper.writeValueAsString(data));\n                } else {\n                    logger.error(\n                            String.format(\"Size of response is too big for cache. Skipping it. Response Part : %s\",\n                                    serializedData.substring(0, 1024)));\n                }\n            }\n        } catch (JsonProcessingException e) {\n            logger.error(\"Error saving value to map: \", e);\n        }\n        return data;\n    }", "signature": "ActionResponse put(String key, ActionResponse data)", "full_signature": "@Override public ActionResponse put(String key, ActionResponse data)", "class_method_signature": "DistributedCache.put(String key, ActionResponse data)", "testcase": false, "constructor": false, "invocations": ["writeValueAsString", "length", "put", "writeValueAsString", "error", "format", "substring", "error"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}