{"test_class": {"identifier": "TypeCoordinateServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DELTA = 1e-6;", "modifier": "private static final", "type": "double", "declarator": "DELTA = 1e-6", "var_name": "DELTA"}, {"original_string": "@Autowired\n\tprivate TypeCoordinateService geocoder;", "modifier": "@Autowired\n\tprivate", "type": "TypeCoordinateService", "declarator": "geocoder", "var_name": "geocoder"}], "file": "plugin/geocoder/geocoder/src/test/java/org/geomajas/plugin/geocoder/service/TypeCoordinateServiceTest.java"}, "test_case": {"identifier": "testGeocoderInvalidTransform", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGeocoderInvalidTransform() {\n\t\tList<String> list = new ArrayList<String>();\n\t\tGetLocationResult[] result;\n\n\t\tlist.clear();\n\t\tlist.add(\"4.77397  51.05125  crs:bla\");\n\t\tresult = geocoder.getLocation(list, 50, null);\n\t\tAssert.assertNotNull(result);\n\t\tAssert.assertEquals(1,result.length);\n\t\tAssert.assertNotNull(result[0].getCoordinate());\n\t\tAssert.assertEquals(4.77397, result[0].getCoordinate().x, DELTA);\n\t\tAssert.assertEquals(51.05125, result[0].getCoordinate().y, DELTA);\n\t\tAssert.assertEquals(1, result[0].getCanonicalStrings().size());\n\t\tAssert.assertEquals(\"4.77397 51.05125\", result[0].getCanonicalStrings().get(0));\n\t\tAssert.assertNull(result[0].getEnvelope());\n\t}", "signature": "void testGeocoderInvalidTransform()", "full_signature": "@Test public void testGeocoderInvalidTransform()", "class_method_signature": "TypeCoordinateServiceTest.testGeocoderInvalidTransform()", "testcase": true, "constructor": false, "invocations": ["clear", "add", "getLocation", "assertNotNull", "assertEquals", "assertNotNull", "getCoordinate", "assertEquals", "getCoordinate", "assertEquals", "getCoordinate", "assertEquals", "size", "getCanonicalStrings", "assertEquals", "get", "getCanonicalStrings", "assertNull", "getEnvelope"]}, "focal_class": {"identifier": "TypeCoordinateService", "superclass": "", "interfaces": "implements GeocoderService", "fields": [{"original_string": "private static final String CRS_PREFIX = \"crs:\";", "modifier": "private static final", "type": "String", "declarator": "CRS_PREFIX = \"crs:\"", "var_name": "CRS_PREFIX"}, {"original_string": "private final Logger log = LoggerFactory.getLogger(TypeCoordinateService.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(TypeCoordinateService.class)", "var_name": "log"}, {"original_string": "@Autowired\n\tprivate GeoService geoService;", "modifier": "@Autowired\n\tprivate", "type": "GeoService", "declarator": "geoService", "var_name": "geoService"}, {"original_string": "private String defaultCrs = \"EPSG:4326\";", "modifier": "private", "type": "String", "declarator": "defaultCrs = \"EPSG:4326\"", "var_name": "defaultCrs"}, {"original_string": "private Crs crs;", "modifier": "private", "type": "Crs", "declarator": "crs", "var_name": "crs"}, {"original_string": "private String name = \"TypeCoordinate\";", "modifier": "private", "type": "String", "declarator": "name = \"TypeCoordinate\"", "var_name": "name"}], "methods": [{"identifier": "postConstruct", "parameters": "()", "modifiers": "@PostConstruct protected", "return": "void", "signature": "void postConstruct()", "full_signature": "@PostConstruct protected void postConstruct()", "class_method_signature": "TypeCoordinateService.postConstruct()", "testcase": false, "constructor": false}, {"identifier": "setDefaultCrs", "parameters": "(String defaultCrs)", "modifiers": "public", "return": "void", "signature": "void setDefaultCrs(String defaultCrs)", "full_signature": "public void setDefaultCrs(String defaultCrs)", "class_method_signature": "TypeCoordinateService.setDefaultCrs(String defaultCrs)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "TypeCoordinateService.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "@Api public", "return": "void", "signature": "void setName(String name)", "full_signature": "@Api public void setName(String name)", "class_method_signature": "TypeCoordinateService.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "getCrs", "parameters": "()", "modifiers": "@Override public", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem getCrs()", "full_signature": "@Override public CoordinateReferenceSystem getCrs()", "class_method_signature": "TypeCoordinateService.getCrs()", "testcase": false, "constructor": false}, {"identifier": "getLocation", "parameters": "(List<String> location, int maxAlternatives, Locale locale)", "modifiers": "@Override public", "return": "GetLocationResult[]", "signature": "GetLocationResult[] getLocation(List<String> location, int maxAlternatives, Locale locale)", "full_signature": "@Override public GetLocationResult[] getLocation(List<String> location, int maxAlternatives, Locale locale)", "class_method_signature": "TypeCoordinateService.getLocation(List<String> location, int maxAlternatives, Locale locale)", "testcase": false, "constructor": false}], "file": "plugin/geocoder/geocoder/src/main/java/org/geomajas/plugin/geocoder/service/TypeCoordinateService.java"}, "focal_method": {"identifier": "getLocation", "parameters": "(List<String> location, int maxAlternatives, Locale locale)", "modifiers": "@Override public", "return": "GetLocationResult[]", "body": "@Override\n\tpublic GetLocationResult[] getLocation(List<String> location, int maxAlternatives, Locale locale) {\n\t\tif (null == locale) {\n\t\t\tlocale = Locale.US;\n\t\t}\n\t\tGetLocationResult result = new GetLocationResult();\n\t\tif (location.size() > 0) {\n\t\t\tString[] parts = location.get(0).split(\"\\\\s+\");\n\t\t\tif (parts.length >= 2) {\n\t\t\t\tNumberFormat format = NumberFormat.getInstance(locale);\n\t\t\t\ttry {\n\t\t\t\t\tDouble x = format.parse(parts[0]).doubleValue();\n\t\t\t\t\tDouble y = format.parse(parts[1]).doubleValue();\n\t\t\t\t\tCoordinate coordinate = new Coordinate(x, y);\n\n\t\t\t\t\tString canonicalCrs = \"\";\n\t\t\t\t\tif (parts.length > 2) {\n\t\t\t\t\t\tString crsPart = parts[2];\n\t\t\t\t\t\tif (crsPart.startsWith(CRS_PREFIX)) {\n\t\t\t\t\t\t\tcrsPart = crsPart.substring(CRS_PREFIX.length());\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tcoordinate = geoService.transform(coordinate, crsPart, defaultCrs);\n\t\t\t\t\t\t\t\tcanonicalCrs = \" \" + CRS_PREFIX + crsPart;\n\t\t\t\t\t\t\t} catch (GeomajasException le) {\n\t\t\t\t\t\t\t\tlog.debug(\"Crs conversion from \" + crsPart + \" tot \" + defaultCrs + \" failed, \" +\n\t\t\t\t\t\t\t\t\t\tle.getMessage());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tresult.setCoordinate(coordinate);\n\t\t\t\t\tList<String> canonical = new ArrayList<String>();\n\t\t\t\t\tcanonical.add(parts[0] + \" \" + parts[1] + canonicalCrs);\n\t\t\t\t\tresult.setCanonicalStrings(canonical);\n\t\t\t\t\treturn new GetLocationResult[] { result };\n\t\t\t\t} catch (ParseException pe) {\n\t\t\t\t\tlog.debug(\"Could not parse \" + location.get(0) + \", \" + pe.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new GetLocationResult[0];\n\t}", "signature": "GetLocationResult[] getLocation(List<String> location, int maxAlternatives, Locale locale)", "full_signature": "@Override public GetLocationResult[] getLocation(List<String> location, int maxAlternatives, Locale locale)", "class_method_signature": "TypeCoordinateService.getLocation(List<String> location, int maxAlternatives, Locale locale)", "testcase": false, "constructor": false, "invocations": ["size", "split", "get", "getInstance", "doubleValue", "parse", "doubleValue", "parse", "startsWith", "substring", "length", "transform", "debug", "getMessage", "setCoordinate", "add", "setCanonicalStrings", "debug", "get", "getMessage"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}