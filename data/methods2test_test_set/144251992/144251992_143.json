{"test_class": {"identifier": "BaseProjectionFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private UserAuthService userAuthServiceMock;", "modifier": "@Mock\n    private", "type": "UserAuthService", "declarator": "userAuthServiceMock", "var_name": "userAuthServiceMock"}, {"original_string": "@Mock\n    private ProjectionFactory projectionFactoryMock;", "modifier": "@Mock\n    private", "type": "ProjectionFactory", "declarator": "projectionFactoryMock", "var_name": "projectionFactoryMock"}, {"original_string": "@Mock\n    private User userMock;", "modifier": "@Mock\n    private", "type": "User", "declarator": "userMock", "var_name": "userMock"}, {"original_string": "private BaseProjectionFactory baseProjectionFactory;", "modifier": "private", "type": "BaseProjectionFactory", "declarator": "baseProjectionFactory", "var_name": "baseProjectionFactory"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/base/projection/BaseProjectionFactoryTest.java"}, "test_case": {"identifier": "getProjectionTypeReturnsNormalTypeWhenUserNotAManager", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getProjectionTypeReturnsNormalTypeWhenUserNotAManager() {\n        // given\n        var normalProjection = Integer.class;\n        var managerProjection = String.class;\n\n        given(userAuthServiceMock.getAuthenticatedUser()).willReturn(userMock);\n        given(userAuthServiceMock.userIsEffectivelyAManager(userMock)).willReturn(false);\n\n        // when\n        var actualProjection = baseProjectionFactory.getProjectionType(normalProjection, managerProjection);\n\n        // then\n        assertThat(actualProjection).isEqualTo(normalProjection);\n    }", "signature": "void getProjectionTypeReturnsNormalTypeWhenUserNotAManager()", "full_signature": "@Test public void getProjectionTypeReturnsNormalTypeWhenUserNotAManager()", "class_method_signature": "BaseProjectionFactoryTest.getProjectionTypeReturnsNormalTypeWhenUserNotAManager()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "getAuthenticatedUser", "willReturn", "given", "userIsEffectivelyAManager", "getProjectionType", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "BaseProjectionFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ProjectionFactory projectionFactory;", "modifier": "private final", "type": "ProjectionFactory", "declarator": "projectionFactory", "var_name": "projectionFactory"}, {"original_string": "private final UserAuthService userAuthService;", "modifier": "private final", "type": "UserAuthService", "declarator": "userAuthService", "var_name": "userAuthService"}], "methods": [{"identifier": "BaseProjectionFactory", "parameters": "(ProjectionFactory projectionFactory, UserAuthService userAuthService)", "modifiers": "@Autowired public", "return": "", "signature": " BaseProjectionFactory(ProjectionFactory projectionFactory, UserAuthService userAuthService)", "full_signature": "@Autowired public  BaseProjectionFactory(ProjectionFactory projectionFactory, UserAuthService userAuthService)", "class_method_signature": "BaseProjectionFactory.BaseProjectionFactory(ProjectionFactory projectionFactory, UserAuthService userAuthService)", "testcase": false, "constructor": true}, {"identifier": "createProjection", "parameters": "(@NotNull Object object, @NotNull Class<T> projectionType)", "modifiers": "public", "return": "T", "signature": "T createProjection(@NotNull Object object, @NotNull Class<T> projectionType)", "full_signature": "public T createProjection(@NotNull Object object, @NotNull Class<T> projectionType)", "class_method_signature": "BaseProjectionFactory.createProjection(@NotNull Object object, @NotNull Class<T> projectionType)", "testcase": false, "constructor": false}, {"identifier": "createProjections", "parameters": "(@NotNull Collection<?> objects, @NotNull Class<T> projectionType)", "modifiers": "public", "return": "List<T>", "signature": "List<T> createProjections(@NotNull Collection<?> objects, @NotNull Class<T> projectionType)", "full_signature": "public List<T> createProjections(@NotNull Collection<?> objects, @NotNull Class<T> projectionType)", "class_method_signature": "BaseProjectionFactory.createProjections(@NotNull Collection<?> objects, @NotNull Class<T> projectionType)", "testcase": false, "constructor": false}, {"identifier": "createProjectionForAuthenticatedUser", "parameters": "(@NotNull Object object, @NotNull Class<?> normalProjectionType, @NotNull Class<?> managerProjectionType)", "modifiers": "public", "return": "Object", "signature": "Object createProjectionForAuthenticatedUser(@NotNull Object object, @NotNull Class<?> normalProjectionType, @NotNull Class<?> managerProjectionType)", "full_signature": "public Object createProjectionForAuthenticatedUser(@NotNull Object object, @NotNull Class<?> normalProjectionType, @NotNull Class<?> managerProjectionType)", "class_method_signature": "BaseProjectionFactory.createProjectionForAuthenticatedUser(@NotNull Object object, @NotNull Class<?> normalProjectionType, @NotNull Class<?> managerProjectionType)", "testcase": false, "constructor": false}, {"identifier": "createProjectionsForAuthenticatedUser", "parameters": "(@NotNull Collection<?> objects, @NotNull Class<?> normalProjectionType, @NotNull Class<?> managerProjectionType)", "modifiers": "public", "return": "List<?>", "signature": "List<?> createProjectionsForAuthenticatedUser(@NotNull Collection<?> objects, @NotNull Class<?> normalProjectionType, @NotNull Class<?> managerProjectionType)", "full_signature": "public List<?> createProjectionsForAuthenticatedUser(@NotNull Collection<?> objects, @NotNull Class<?> normalProjectionType, @NotNull Class<?> managerProjectionType)", "class_method_signature": "BaseProjectionFactory.createProjectionsForAuthenticatedUser(@NotNull Collection<?> objects, @NotNull Class<?> normalProjectionType, @NotNull Class<?> managerProjectionType)", "testcase": false, "constructor": false}, {"identifier": "createProjectionsForAuthenticatedUser", "parameters": "(@NotNull Page<?> page, @NotNull Class<?> normalProjectionType, @NotNull Class<?> managerProjectionType)", "modifiers": "public", "return": "Page<?>", "signature": "Page<?> createProjectionsForAuthenticatedUser(@NotNull Page<?> page, @NotNull Class<?> normalProjectionType, @NotNull Class<?> managerProjectionType)", "full_signature": "public Page<?> createProjectionsForAuthenticatedUser(@NotNull Page<?> page, @NotNull Class<?> normalProjectionType, @NotNull Class<?> managerProjectionType)", "class_method_signature": "BaseProjectionFactory.createProjectionsForAuthenticatedUser(@NotNull Page<?> page, @NotNull Class<?> normalProjectionType, @NotNull Class<?> managerProjectionType)", "testcase": false, "constructor": false}, {"identifier": "getProjectionType", "parameters": "(Class<?> normalProjectionType, Class<?> managerProjectionType)", "modifiers": "", "return": "Class<?>", "signature": "Class<?> getProjectionType(Class<?> normalProjectionType, Class<?> managerProjectionType)", "full_signature": " Class<?> getProjectionType(Class<?> normalProjectionType, Class<?> managerProjectionType)", "class_method_signature": "BaseProjectionFactory.getProjectionType(Class<?> normalProjectionType, Class<?> managerProjectionType)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/base/projection/BaseProjectionFactory.java"}, "focal_method": {"identifier": "getProjectionType", "parameters": "(Class<?> normalProjectionType, Class<?> managerProjectionType)", "modifiers": "", "return": "Class<?>", "body": "Class<?> getProjectionType(Class<?> normalProjectionType, Class<?> managerProjectionType) {\n        var authenticatedUser = userAuthService.getAuthenticatedUser();\n\n        return userAuthService.userIsEffectivelyAManager(authenticatedUser) ?\n                managerProjectionType :\n                normalProjectionType;\n    }", "signature": "Class<?> getProjectionType(Class<?> normalProjectionType, Class<?> managerProjectionType)", "full_signature": " Class<?> getProjectionType(Class<?> normalProjectionType, Class<?> managerProjectionType)", "class_method_signature": "BaseProjectionFactory.getProjectionType(Class<?> normalProjectionType, Class<?> managerProjectionType)", "testcase": false, "constructor": false, "invocations": ["getAuthenticatedUser", "userIsEffectivelyAManager"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}