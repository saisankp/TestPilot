{"test_class": {"identifier": "RevAwaiterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RevAwaiterTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RevAwaiterTest.class)", "var_name": "LOG"}, {"original_string": "public @Rule LogCaptureRule logCaptureRule = new LogCaptureRule();", "modifier": "public @Rule", "type": "LogCaptureRule", "declarator": "logCaptureRule = new LogCaptureRule()", "var_name": "logCaptureRule"}, {"original_string": "private static final Duration MS_100 = Duration.ofMillis(100);", "modifier": "private static final", "type": "Duration", "declarator": "MS_100 = Duration.ofMillis(100)", "var_name": "MS_100"}, {"original_string": "RevAwaiter awaiter = new RevAwaiter(\"TEST\");", "modifier": "", "type": "RevAwaiter", "declarator": "awaiter = new RevAwaiter(\"TEST\")", "var_name": "awaiter"}], "file": "ds/src/test/java/org/opendaylight/etcd/ds/impl/RevAwaiterTest.java"}, "test_case": {"identifier": "testAwaitFail", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testAwaitFail() {\n        assertThrows(TimeoutException.class, () -> awaiter.await(1, MS_100));\n    }", "signature": "void testAwaitFail()", "full_signature": "@Test public void testAwaitFail()", "class_method_signature": "RevAwaiterTest.testAwaitFail()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "await"]}, "focal_class": {"identifier": "RevAwaiter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RevAwaiter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RevAwaiter.class)", "var_name": "LOG"}, {"original_string": "private static final AwaitableRev[] EMPTY_ARRAY = new AwaitableRev[0];", "modifier": "private static final", "type": "AwaitableRev[]", "declarator": "EMPTY_ARRAY = new AwaitableRev[0]", "var_name": "EMPTY_ARRAY"}, {"original_string": "private final AtomicLong currentRev = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "currentRev = new AtomicLong()", "var_name": "currentRev"}, {"original_string": "private final Queue<AwaitableRev> pq = new PriorityQueue<>((o1, o2) -> Long.compare(o1.rev, o2.rev));", "modifier": "private final", "type": "Queue<AwaitableRev>", "declarator": "pq = new PriorityQueue<>((o1, o2) -> Long.compare(o1.rev, o2.rev))", "var_name": "pq"}, {"original_string": "private final String nodeName;", "modifier": "private final", "type": "String", "declarator": "nodeName", "var_name": "nodeName"}], "methods": [{"identifier": "RevAwaiter", "parameters": "(String nodeName)", "modifiers": "", "return": "", "signature": " RevAwaiter(String nodeName)", "full_signature": "  RevAwaiter(String nodeName)", "class_method_signature": "RevAwaiter.RevAwaiter(String nodeName)", "testcase": false, "constructor": true}, {"identifier": "update", "parameters": "(long rev)", "modifiers": "@SuppressFBWarnings({ \"NO_NOTIFY_NOT_NOTIFYALL\", \"NN_NAKED_NOTIFY\" })", "return": "void", "signature": "void update(long rev)", "full_signature": "@SuppressFBWarnings({ \"NO_NOTIFY_NOT_NOTIFYALL\", \"NN_NAKED_NOTIFY\" }) void update(long rev)", "class_method_signature": "RevAwaiter.update(long rev)", "testcase": false, "constructor": false}, {"identifier": "await", "parameters": "(long rev, Duration maxWaitTime)", "modifiers": "", "return": "void", "signature": "void await(long rev, Duration maxWaitTime)", "full_signature": " void await(long rev, Duration maxWaitTime)", "class_method_signature": "RevAwaiter.await(long rev, Duration maxWaitTime)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RevAwaiter.toString()", "testcase": false, "constructor": false}], "file": "ds/src/main/java/org/opendaylight/etcd/ds/impl/RevAwaiter.java"}, "focal_method": {"identifier": "await", "parameters": "(long rev, Duration maxWaitTime)", "modifiers": "", "return": "void", "body": "void await(long rev, Duration maxWaitTime) throws TimeoutException, InterruptedException {\n        if (currentRev.get() >= rev) {\n            return;\n        }\n        AwaitableRev awaitable = new AwaitableRev(rev);\n        synchronized (pq) {\n            pq.add(awaitable);\n        }\n        synchronized (awaitable) {\n            // account for possible spurious wake up\n            @Var long now = System.nanoTime();\n            long deadline = now + maxWaitTime.toNanos();\n            while (currentRev.get() < rev && now < deadline) {\n                // http://errorprone.info/bugpattern/WaitNotInLoop\n                awaitable.wait((deadline - now) / 1000000);\n                now = System.nanoTime();\n            }\n            if (now >= deadline) {\n                throw new TimeoutException();\n            }\n            // else it's a real awaitable.notify(), not spurious nor timeout, and we return to caller.\n        }\n    }", "signature": "void await(long rev, Duration maxWaitTime)", "full_signature": " void await(long rev, Duration maxWaitTime)", "class_method_signature": "RevAwaiter.await(long rev, Duration maxWaitTime)", "testcase": false, "constructor": false, "invocations": ["get", "add", "nanoTime", "toNanos", "get", "wait", "nanoTime"]}, "repository": {"repo_id": 102614080, "url": "https://github.com/vorburger/opendaylight-etcd", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 446, "license": "licensed"}}