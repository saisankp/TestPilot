{"test_class": {"identifier": "StoredDoubleTimeSeriesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}], "file": "time-series/time-series-api/src/test/java/com/powsybl/timeseries/StoredDoubleTimeSeriesTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() throws IOException {\n        RegularTimeSeriesIndex index = RegularTimeSeriesIndex.create(Interval.parse(\"2015-01-01T00:00:00Z/2015-01-01T01:45:00Z\"),\n                                                                     Duration.ofMinutes(15));\n        TimeSeriesMetadata metadata = new TimeSeriesMetadata(\"ts1\", TimeSeriesDataType.DOUBLE, Collections.emptyMap(), index);\n        UncompressedDoubleDataChunk chunk = new UncompressedDoubleDataChunk(2, new double[] {1d, 2d});\n        CompressedDoubleDataChunk chunk2 = new CompressedDoubleDataChunk(5, 3, new double[] {3d, 4d}, new int[] {1, 2});\n        assertEquals(TimeSeriesDataType.DOUBLE, chunk.getDataType());\n        StoredDoubleTimeSeries timeSeries = new StoredDoubleTimeSeries(metadata, chunk, chunk2);\n        assertSame(metadata, timeSeries.getMetadata());\n        assertEquals(Arrays.asList(chunk, chunk2), timeSeries.getChunks());\n        assertArrayEquals(new double[] {Double.NaN, Double.NaN, 1d, 2d, Double.NaN, 3d, 4d, 4d}, timeSeries.toArray(), 0d);\n        DoublePoint[] pointsRef = {new DoublePoint(0, Instant.parse(\"2015-01-01T00:00:00Z\").toEpochMilli(), Double.NaN),\n                                   new DoublePoint(2, Instant.parse(\"2015-01-01T00:30:00Z\").toEpochMilli(), 1d),\n                                   new DoublePoint(3, Instant.parse(\"2015-01-01T00:45:00Z\").toEpochMilli(), 2d),\n                                   new DoublePoint(4, Instant.parse(\"2015-01-01T01:00:00Z\").toEpochMilli(), Double.NaN),\n                                   new DoublePoint(5, Instant.parse(\"2015-01-01T01:15:00Z\").toEpochMilli(), 3d),\n                                   new DoublePoint(6, Instant.parse(\"2015-01-01T01:30:00Z\").toEpochMilli(), 4d)};\n        assertArrayEquals(pointsRef, timeSeries.stream().toArray());\n        assertArrayEquals(pointsRef, Iterators.toArray(timeSeries.iterator(), DoublePoint.class));\n\n        // json test\n        String jsonRef = String.join(System.lineSeparator(),\n                \"{\",\n                \"  \\\"metadata\\\" : {\",\n                \"    \\\"name\\\" : \\\"ts1\\\",\",\n                \"    \\\"dataType\\\" : \\\"DOUBLE\\\",\",\n                \"    \\\"tags\\\" : [ ],\",\n                \"    \\\"regularIndex\\\" : {\",\n                \"      \\\"startTime\\\" : 1420070400000,\",\n                \"      \\\"endTime\\\" : 1420076700000,\",\n                \"      \\\"spacing\\\" : 900000\",\n                \"    }\",\n                \"  },\",\n                \"  \\\"chunks\\\" : [ {\",\n                \"    \\\"offset\\\" : 2,\",\n                \"    \\\"values\\\" : [ 1.0, 2.0 ]\",\n                \"  }, {\",\n                \"    \\\"offset\\\" : 5,\",\n                \"    \\\"uncompressedLength\\\" : 3,\",\n                \"    \\\"stepValues\\\" : [ 3.0, 4.0 ],\",\n                \"    \\\"stepLengths\\\" : [ 1, 2 ]\",\n                \"  } ]\",\n                \"}\"\n               );\n        String json = JsonUtil.toJson(timeSeries::writeJson);\n        assertEquals(jsonRef, json);\n        List<TimeSeries> timeSeriesList = TimeSeries.parseJson(json);\n        assertEquals(1, timeSeriesList.size());\n        String json2 = JsonUtil.toJson(timeSeriesList.get(0)::writeJson);\n        assertEquals(json, json2);\n\n        // test json with object mapper\n        ObjectMapper objectMapper = JsonUtil.createObjectMapper()\n                .registerModule(new TimeSeriesJsonModule());\n\n        assertEquals(timeSeries, objectMapper.readValue(objectMapper.writeValueAsString(timeSeries), DoubleTimeSeries.class));\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "StoredDoubleTimeSeriesTest.test()", "testcase": true, "constructor": false, "invocations": ["create", "parse", "ofMinutes", "emptyMap", "assertEquals", "getDataType", "assertSame", "getMetadata", "assertEquals", "asList", "getChunks", "assertArrayEquals", "toArray", "toEpochMilli", "parse", "toEpochMilli", "parse", "toEpochMilli", "parse", "toEpochMilli", "parse", "toEpochMilli", "parse", "toEpochMilli", "parse", "assertArrayEquals", "toArray", "stream", "assertArrayEquals", "toArray", "iterator", "join", "lineSeparator", "toJson", "assertEquals", "parseJson", "assertEquals", "size", "toJson", "get", "assertEquals", "registerModule", "createObjectMapper", "assertEquals", "readValue", "writeValueAsString"]}, "focal_class": {"identifier": "StoredDoubleTimeSeries", "superclass": "extends AbstractTimeSeries<DoublePoint, DoubleDataChunk, DoubleTimeSeries>", "interfaces": "implements DoubleTimeSeries", "fields": [{"original_string": "private static final double[] NAN_ARRAY = new double[] {Double.NaN};", "modifier": "private static final", "type": "double[]", "declarator": "NAN_ARRAY = new double[] {Double.NaN}", "var_name": "NAN_ARRAY"}], "methods": [{"identifier": "StoredDoubleTimeSeries", "parameters": "(TimeSeriesMetadata metadata, DoubleDataChunk... chunks)", "modifiers": "public", "return": "", "signature": " StoredDoubleTimeSeries(TimeSeriesMetadata metadata, DoubleDataChunk... chunks)", "full_signature": "public  StoredDoubleTimeSeries(TimeSeriesMetadata metadata, DoubleDataChunk... chunks)", "class_method_signature": "StoredDoubleTimeSeries.StoredDoubleTimeSeries(TimeSeriesMetadata metadata, DoubleDataChunk... chunks)", "testcase": false, "constructor": true}, {"identifier": "StoredDoubleTimeSeries", "parameters": "(TimeSeriesMetadata metadata, List<DoubleDataChunk> chunks)", "modifiers": "public", "return": "", "signature": " StoredDoubleTimeSeries(TimeSeriesMetadata metadata, List<DoubleDataChunk> chunks)", "full_signature": "public  StoredDoubleTimeSeries(TimeSeriesMetadata metadata, List<DoubleDataChunk> chunks)", "class_method_signature": "StoredDoubleTimeSeries.StoredDoubleTimeSeries(TimeSeriesMetadata metadata, List<DoubleDataChunk> chunks)", "testcase": false, "constructor": true}, {"identifier": "createGapFillingChunk", "parameters": "(int i, int length)", "modifiers": "protected", "return": "CompressedDoubleDataChunk", "signature": "CompressedDoubleDataChunk createGapFillingChunk(int i, int length)", "full_signature": "protected CompressedDoubleDataChunk createGapFillingChunk(int i, int length)", "class_method_signature": "StoredDoubleTimeSeries.createGapFillingChunk(int i, int length)", "testcase": false, "constructor": false}, {"identifier": "createTimeSeries", "parameters": "(DoubleDataChunk chunk)", "modifiers": "@Override protected", "return": "DoubleTimeSeries", "signature": "DoubleTimeSeries createTimeSeries(DoubleDataChunk chunk)", "full_signature": "@Override protected DoubleTimeSeries createTimeSeries(DoubleDataChunk chunk)", "class_method_signature": "StoredDoubleTimeSeries.createTimeSeries(DoubleDataChunk chunk)", "testcase": false, "constructor": false}, {"identifier": "forEachChunk", "parameters": "(Consumer<DoubleDataChunk> consumer)", "modifiers": "private", "return": "void", "signature": "void forEachChunk(Consumer<DoubleDataChunk> consumer)", "full_signature": "private void forEachChunk(Consumer<DoubleDataChunk> consumer)", "class_method_signature": "StoredDoubleTimeSeries.forEachChunk(Consumer<DoubleDataChunk> consumer)", "testcase": false, "constructor": false}, {"identifier": "fillBuffer", "parameters": "(DoubleBuffer buffer, int timeSeriesOffset)", "modifiers": "@Override public", "return": "void", "signature": "void fillBuffer(DoubleBuffer buffer, int timeSeriesOffset)", "full_signature": "@Override public void fillBuffer(DoubleBuffer buffer, int timeSeriesOffset)", "class_method_signature": "StoredDoubleTimeSeries.fillBuffer(DoubleBuffer buffer, int timeSeriesOffset)", "testcase": false, "constructor": false}, {"identifier": "fillBuffer", "parameters": "(BigDoubleBuffer buffer, long timeSeriesOffset)", "modifiers": "@Override public", "return": "void", "signature": "void fillBuffer(BigDoubleBuffer buffer, long timeSeriesOffset)", "full_signature": "@Override public void fillBuffer(BigDoubleBuffer buffer, long timeSeriesOffset)", "class_method_signature": "StoredDoubleTimeSeries.fillBuffer(BigDoubleBuffer buffer, long timeSeriesOffset)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Override public", "return": "double[]", "signature": "double[] toArray()", "full_signature": "@Override public double[] toArray()", "class_method_signature": "StoredDoubleTimeSeries.toArray()", "testcase": false, "constructor": false}], "file": "time-series/time-series-api/src/main/java/com/powsybl/timeseries/StoredDoubleTimeSeries.java"}, "focal_method": {"identifier": "toArray", "parameters": "()", "modifiers": "@Override public", "return": "double[]", "body": "@Override\n    public double[] toArray() {\n        DoubleBuffer buffer = DoubleBuffer.allocate(metadata.getIndex().getPointCount());\n        for (int i = 0; i < metadata.getIndex().getPointCount(); i++) {\n            buffer.put(i, Double.NaN);\n        }\n        fillBuffer(buffer, 0);\n        return buffer.array();\n    }", "signature": "double[] toArray()", "full_signature": "@Override public double[] toArray()", "class_method_signature": "StoredDoubleTimeSeries.toArray()", "testcase": false, "constructor": false, "invocations": ["allocate", "getPointCount", "getIndex", "getPointCount", "getIndex", "put", "fillBuffer", "array"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}