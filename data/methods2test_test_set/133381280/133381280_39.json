{"test_class": {"identifier": "DefaultIdTest", "superclass": "", "interfaces": "", "fields": [], "file": "client/lookout-api/src/test/java/com/alipay/lookout/api/DefaultIdTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n\n        Id id1 = new DefaultId(\"name\").withTag(new BasicTag(\"k1\", \"v1\")).withTag(\n            new BasicTag(\"k2\", \"v2\"));\n\n        Tag[] tags = new Tag[] { new BasicTag(\"k2\", \"v2\"), new BasicTag(\"k1\", \"v1\") };\n        Id id2 = new DefaultId(\"name\").withTags(tags);\n        System.out.println(id1);\n        Assert.assertTrue(id1.equals(id2));\n        Assert.assertEquals(id1, id2);\n        Assert.assertEquals(id1.hashCode(), id2.hashCode());\n\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "DefaultIdTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["withTag", "withTag", "withTags", "println", "assertTrue", "equals", "assertEquals", "assertEquals", "hashCode", "hashCode"]}, "focal_class": {"identifier": "DefaultId", "superclass": "", "interfaces": "implements Id", "fields": [{"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final TagSet tags;", "modifier": "private final", "type": "TagSet", "declarator": "tags", "var_name": "tags"}], "methods": [{"identifier": "DefaultId", "parameters": "(String name)", "modifiers": "public", "return": "", "signature": " DefaultId(String name)", "full_signature": "public  DefaultId(String name)", "class_method_signature": "DefaultId.DefaultId(String name)", "testcase": false, "constructor": true}, {"identifier": "DefaultId", "parameters": "(String name, TagSet tags)", "modifiers": "", "return": "", "signature": " DefaultId(String name, TagSet tags)", "full_signature": "  DefaultId(String name, TagSet tags)", "class_method_signature": "DefaultId.DefaultId(String name, TagSet tags)", "testcase": false, "constructor": true}, {"identifier": "name", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String name()", "full_signature": "@Override public String name()", "class_method_signature": "DefaultId.name()", "testcase": false, "constructor": false}, {"identifier": "tags", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<Tag>", "signature": "Iterable<Tag> tags()", "full_signature": "@Override public Iterable<Tag> tags()", "class_method_signature": "DefaultId.tags()", "testcase": false, "constructor": false}, {"identifier": "withTag", "parameters": "(Tag tag)", "modifiers": "@Override public", "return": "DefaultId", "signature": "DefaultId withTag(Tag tag)", "full_signature": "@Override public DefaultId withTag(Tag tag)", "class_method_signature": "DefaultId.withTag(Tag tag)", "testcase": false, "constructor": false}, {"identifier": "withTag", "parameters": "(String key, String value)", "modifiers": "@Override public", "return": "DefaultId", "signature": "DefaultId withTag(String key, String value)", "full_signature": "@Override public DefaultId withTag(String key, String value)", "class_method_signature": "DefaultId.withTag(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "withTags", "parameters": "(Tag... ts)", "modifiers": "@Override public", "return": "DefaultId", "signature": "DefaultId withTags(Tag... ts)", "full_signature": "@Override public DefaultId withTags(Tag... ts)", "class_method_signature": "DefaultId.withTags(Tag... ts)", "testcase": false, "constructor": false}, {"identifier": "withTags", "parameters": "(Iterable<Tag> ts)", "modifiers": "@Override public", "return": "DefaultId", "signature": "DefaultId withTags(Iterable<Tag> ts)", "full_signature": "@Override public DefaultId withTags(Iterable<Tag> ts)", "class_method_signature": "DefaultId.withTags(Iterable<Tag> ts)", "testcase": false, "constructor": false}, {"identifier": "withTags", "parameters": "(Map<String, String> ts)", "modifiers": "@Override public", "return": "DefaultId", "signature": "DefaultId withTags(Map<String, String> ts)", "full_signature": "@Override public DefaultId withTags(Map<String, String> ts)", "class_method_signature": "DefaultId.withTags(Map<String, String> ts)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "DefaultId.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DefaultId.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DefaultId.toString()", "testcase": false, "constructor": false}], "file": "client/lookout-api/src/main/java/com/alipay/lookout/api/DefaultId.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null || !(obj instanceof DefaultId))\n            return false;\n        DefaultId other = (DefaultId) obj;\n        return name.equals(other.name) && tags.equals(other.tags);\n    }", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "DefaultId.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "equals"]}, "repository": {"repo_id": 133381280, "url": "https://github.com/sofastack/sofa-lookout", "language": "Java", "is_fork": false, "fork_count": 113, "stargazer_count": 318, "size": 1394, "license": "licensed"}}