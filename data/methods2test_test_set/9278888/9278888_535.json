{"test_class": {"identifier": "TracerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final BaggageField BAGGAGE_FIELD = BaggageField.create(\"user-id\");", "modifier": "static final", "type": "BaggageField", "declarator": "BAGGAGE_FIELD = BaggageField.create(\"user-id\")", "var_name": "BAGGAGE_FIELD"}, {"original_string": "TraceContext context = TraceContext.newBuilder().traceId(1).spanId(2).shared(true).build();", "modifier": "", "type": "TraceContext", "declarator": "context = TraceContext.newBuilder().traceId(1).spanId(2).shared(true).build()", "var_name": "context"}, {"original_string": "TestSpanHandler spans = new TestSpanHandler();", "modifier": "", "type": "TestSpanHandler", "declarator": "spans = new TestSpanHandler()", "var_name": "spans"}, {"original_string": "Propagation.Factory propagationFactory = B3Propagation.FACTORY;", "modifier": "", "type": "Propagation.Factory", "declarator": "propagationFactory = B3Propagation.FACTORY", "var_name": "propagationFactory"}, {"original_string": "CurrentTraceContext currentTraceContext = StrictCurrentTraceContext.create();", "modifier": "", "type": "CurrentTraceContext", "declarator": "currentTraceContext = StrictCurrentTraceContext.create()", "var_name": "currentTraceContext"}, {"original_string": "Propagation.Factory baggageFactory = BaggagePropagation.newFactoryBuilder(B3Propagation.FACTORY)\n    .add(SingleBaggageField.remote(BAGGAGE_FIELD)).build();", "modifier": "", "type": "Propagation.Factory", "declarator": "baggageFactory = BaggagePropagation.newFactoryBuilder(B3Propagation.FACTORY)\n    .add(SingleBaggageField.remote(BAGGAGE_FIELD)).build()", "var_name": "baggageFactory"}, {"original_string": "Tracer tracer = Tracing.newBuilder()\n    .addSpanHandler(spans)\n    .trackOrphans()\n    .propagationFactory(new Propagation.Factory() {\n      @Deprecated @Override public <K> Propagation<K> create(Propagation.KeyFactory<K> keyFactory) {\n        return propagationFactory.create(keyFactory);\n      }\n\n      @Override public boolean supportsJoin() {\n        return propagationFactory.supportsJoin();\n      }\n\n      @Override public boolean requires128BitTraceId() {\n        return propagationFactory.requires128BitTraceId();\n      }\n\n      @Override public TraceContext decorate(TraceContext context) {\n        return propagationFactory.decorate(context);\n      }\n    })\n    .currentTraceContext(currentTraceContext)\n    .localServiceName(\"my-service\")\n    .build().tracer();", "modifier": "", "type": "Tracer", "declarator": "tracer = Tracing.newBuilder()\n    .addSpanHandler(spans)\n    .trackOrphans()\n    .propagationFactory(new Propagation.Factory() {\n      @Deprecated @Override public <K> Propagation<K> create(Propagation.KeyFactory<K> keyFactory) {\n        return propagationFactory.create(keyFactory);\n      }\n\n      @Override public boolean supportsJoin() {\n        return propagationFactory.supportsJoin();\n      }\n\n      @Override public boolean requires128BitTraceId() {\n        return propagationFactory.requires128BitTraceId();\n      }\n\n      @Override public TraceContext decorate(TraceContext context) {\n        return propagationFactory.decorate(context);\n      }\n    })\n    .currentTraceContext(currentTraceContext)\n    .localServiceName(\"my-service\")\n    .build().tracer()", "var_name": "tracer"}], "file": "brave/src/test/java/brave/TracerTest.java"}, "test_case": {"identifier": "localRootId_nextSpan_flags_notSampled", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void localRootId_nextSpan_flags_notSampled() {\n    TraceContextOrSamplingFlags flags = TraceContextOrSamplingFlags.NOT_SAMPLED;\n    localRootId(flags, flags, ctx -> tracer.nextSpan(ctx));\n  }", "signature": "void localRootId_nextSpan_flags_notSampled()", "full_signature": "@Test public void localRootId_nextSpan_flags_notSampled()", "class_method_signature": "TracerTest.localRootId_nextSpan_flags_notSampled()", "testcase": true, "constructor": false, "invocations": ["localRootId", "nextSpan"]}, "focal_class": {"identifier": "Tracer", "superclass": "", "interfaces": "", "fields": [{"original_string": "final Clock clock;", "modifier": "final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "final Propagation.Factory propagationFactory;", "modifier": "final", "type": "Propagation.Factory", "declarator": "propagationFactory", "var_name": "propagationFactory"}, {"original_string": "final SpanHandler spanHandler;", "modifier": "final", "type": "SpanHandler", "declarator": "spanHandler", "var_name": "spanHandler"}, {"original_string": "final PendingSpans pendingSpans;", "modifier": "final", "type": "PendingSpans", "declarator": "pendingSpans", "var_name": "pendingSpans"}, {"original_string": "final Sampler sampler;", "modifier": "final", "type": "Sampler", "declarator": "sampler", "var_name": "sampler"}, {"original_string": "final CurrentTraceContext currentTraceContext;", "modifier": "final", "type": "CurrentTraceContext", "declarator": "currentTraceContext", "var_name": "currentTraceContext"}, {"original_string": "final boolean traceId128Bit, supportsJoin, alwaysSampleLocal;", "modifier": "final", "type": "boolean", "declarator": "traceId128Bit", "var_name": "traceId128Bit"}, {"original_string": "final AtomicBoolean noop;", "modifier": "final", "type": "AtomicBoolean", "declarator": "noop", "var_name": "noop"}], "methods": [{"identifier": "Tracer", "parameters": "(\n    Clock clock,\n    Propagation.Factory propagationFactory,\n    SpanHandler spanHandler,\n    PendingSpans pendingSpans,\n    Sampler sampler,\n    CurrentTraceContext currentTraceContext,\n    boolean traceId128Bit,\n    boolean supportsJoin,\n    boolean alwaysSampleLocal,\n    AtomicBoolean noop\n  )", "modifiers": "", "return": "", "signature": " Tracer(\n    Clock clock,\n    Propagation.Factory propagationFactory,\n    SpanHandler spanHandler,\n    PendingSpans pendingSpans,\n    Sampler sampler,\n    CurrentTraceContext currentTraceContext,\n    boolean traceId128Bit,\n    boolean supportsJoin,\n    boolean alwaysSampleLocal,\n    AtomicBoolean noop\n  )", "full_signature": "  Tracer(\n    Clock clock,\n    Propagation.Factory propagationFactory,\n    SpanHandler spanHandler,\n    PendingSpans pendingSpans,\n    Sampler sampler,\n    CurrentTraceContext currentTraceContext,\n    boolean traceId128Bit,\n    boolean supportsJoin,\n    boolean alwaysSampleLocal,\n    AtomicBoolean noop\n  )", "class_method_signature": "Tracer.Tracer(\n    Clock clock,\n    Propagation.Factory propagationFactory,\n    SpanHandler spanHandler,\n    PendingSpans pendingSpans,\n    Sampler sampler,\n    CurrentTraceContext currentTraceContext,\n    boolean traceId128Bit,\n    boolean supportsJoin,\n    boolean alwaysSampleLocal,\n    AtomicBoolean noop\n  )", "testcase": false, "constructor": true}, {"identifier": "withSampler", "parameters": "(Sampler sampler)", "modifiers": "@Deprecated public", "return": "Tracer", "signature": "Tracer withSampler(Sampler sampler)", "full_signature": "@Deprecated public Tracer withSampler(Sampler sampler)", "class_method_signature": "Tracer.withSampler(Sampler sampler)", "testcase": false, "constructor": false}, {"identifier": "newTrace", "parameters": "()", "modifiers": "public", "return": "Span", "signature": "Span newTrace()", "full_signature": "public Span newTrace()", "class_method_signature": "Tracer.newTrace()", "testcase": false, "constructor": false}, {"identifier": "joinSpan", "parameters": "(TraceContext context)", "modifiers": "public final", "return": "Span", "signature": "Span joinSpan(TraceContext context)", "full_signature": "public final Span joinSpan(TraceContext context)", "class_method_signature": "Tracer.joinSpan(TraceContext context)", "testcase": false, "constructor": false}, {"identifier": "swapForPendingContext", "parameters": "(TraceContext context)", "modifiers": "", "return": "TraceContext", "signature": "TraceContext swapForPendingContext(TraceContext context)", "full_signature": " TraceContext swapForPendingContext(TraceContext context)", "class_method_signature": "Tracer.swapForPendingContext(TraceContext context)", "testcase": false, "constructor": false}, {"identifier": "newChild", "parameters": "(TraceContext parent)", "modifiers": "public", "return": "Span", "signature": "Span newChild(TraceContext parent)", "full_signature": "public Span newChild(TraceContext parent)", "class_method_signature": "Tracer.newChild(TraceContext parent)", "testcase": false, "constructor": false}, {"identifier": "newRootContext", "parameters": "(int flags)", "modifiers": "", "return": "TraceContext", "signature": "TraceContext newRootContext(int flags)", "full_signature": " TraceContext newRootContext(int flags)", "class_method_signature": "Tracer.newRootContext(int flags)", "testcase": false, "constructor": false}, {"identifier": "decorateContext", "parameters": "(TraceContext parent, long parentId)", "modifiers": "", "return": "TraceContext", "signature": "TraceContext decorateContext(TraceContext parent, long parentId)", "full_signature": " TraceContext decorateContext(TraceContext parent, long parentId)", "class_method_signature": "Tracer.decorateContext(TraceContext parent, long parentId)", "testcase": false, "constructor": false}, {"identifier": "decorateContext", "parameters": "(\n    int flags,\n    long traceIdHigh,\n    long traceId,\n    long localRootId,\n    long parentId,\n    long spanId,\n    List<Object> extra\n  )", "modifiers": "", "return": "TraceContext", "signature": "TraceContext decorateContext(\n    int flags,\n    long traceIdHigh,\n    long traceId,\n    long localRootId,\n    long parentId,\n    long spanId,\n    List<Object> extra\n  )", "full_signature": " TraceContext decorateContext(\n    int flags,\n    long traceIdHigh,\n    long traceId,\n    long localRootId,\n    long parentId,\n    long spanId,\n    List<Object> extra\n  )", "class_method_signature": "Tracer.decorateContext(\n    int flags,\n    long traceIdHigh,\n    long traceId,\n    long localRootId,\n    long parentId,\n    long spanId,\n    List<Object> extra\n  )", "testcase": false, "constructor": false}, {"identifier": "nextSpan", "parameters": "(TraceContextOrSamplingFlags extracted)", "modifiers": "public", "return": "Span", "signature": "Span nextSpan(TraceContextOrSamplingFlags extracted)", "full_signature": "public Span nextSpan(TraceContextOrSamplingFlags extracted)", "class_method_signature": "Tracer.nextSpan(TraceContextOrSamplingFlags extracted)", "testcase": false, "constructor": false}, {"identifier": "toSpan", "parameters": "(TraceContext context)", "modifiers": "public", "return": "Span", "signature": "Span toSpan(TraceContext context)", "full_signature": "public Span toSpan(TraceContext context)", "class_method_signature": "Tracer.toSpan(TraceContext context)", "testcase": false, "constructor": false}, {"identifier": "toSpan", "parameters": "(@Nullable TraceContext parent, TraceContext context)", "modifiers": "", "return": "Span", "signature": "Span toSpan(@Nullable TraceContext parent, TraceContext context)", "full_signature": " Span toSpan(@Nullable TraceContext parent, TraceContext context)", "class_method_signature": "Tracer.toSpan(@Nullable TraceContext parent, TraceContext context)", "testcase": false, "constructor": false}, {"identifier": "_toSpan", "parameters": "(@Nullable TraceContext parent, TraceContext context)", "modifiers": "", "return": "Span", "signature": "Span _toSpan(@Nullable TraceContext parent, TraceContext context)", "full_signature": " Span _toSpan(@Nullable TraceContext parent, TraceContext context)", "class_method_signature": "Tracer._toSpan(@Nullable TraceContext parent, TraceContext context)", "testcase": false, "constructor": false}, {"identifier": "withSpanInScope", "parameters": "(@Nullable Span span)", "modifiers": "public", "return": "SpanInScope", "signature": "SpanInScope withSpanInScope(@Nullable Span span)", "full_signature": "public SpanInScope withSpanInScope(@Nullable Span span)", "class_method_signature": "Tracer.withSpanInScope(@Nullable Span span)", "testcase": false, "constructor": false}, {"identifier": "currentSpanCustomizer", "parameters": "()", "modifiers": "public", "return": "SpanCustomizer", "signature": "SpanCustomizer currentSpanCustomizer()", "full_signature": "public SpanCustomizer currentSpanCustomizer()", "class_method_signature": "Tracer.currentSpanCustomizer()", "testcase": false, "constructor": false}, {"identifier": "currentSpan", "parameters": "()", "modifiers": "@Nullable public", "return": "Span", "signature": "Span currentSpan()", "full_signature": "@Nullable public Span currentSpan()", "class_method_signature": "Tracer.currentSpan()", "testcase": false, "constructor": false}, {"identifier": "nextSpan", "parameters": "()", "modifiers": "public", "return": "Span", "signature": "Span nextSpan()", "full_signature": "public Span nextSpan()", "class_method_signature": "Tracer.nextSpan()", "testcase": false, "constructor": false}, {"identifier": "startScopedSpan", "parameters": "(String name)", "modifiers": "public", "return": "ScopedSpan", "signature": "ScopedSpan startScopedSpan(String name)", "full_signature": "public ScopedSpan startScopedSpan(String name)", "class_method_signature": "Tracer.startScopedSpan(String name)", "testcase": false, "constructor": false}, {"identifier": "startScopedSpan", "parameters": "(String name, SamplerFunction<T> samplerFunction, T arg)", "modifiers": "public", "return": "ScopedSpan", "signature": "ScopedSpan startScopedSpan(String name, SamplerFunction<T> samplerFunction, T arg)", "full_signature": "public ScopedSpan startScopedSpan(String name, SamplerFunction<T> samplerFunction, T arg)", "class_method_signature": "Tracer.startScopedSpan(String name, SamplerFunction<T> samplerFunction, T arg)", "testcase": false, "constructor": false}, {"identifier": "nextSpan", "parameters": "(SamplerFunction<T> samplerFunction, T arg)", "modifiers": "public", "return": "Span", "signature": "Span nextSpan(SamplerFunction<T> samplerFunction, T arg)", "full_signature": "public Span nextSpan(SamplerFunction<T> samplerFunction, T arg)", "class_method_signature": "Tracer.nextSpan(SamplerFunction<T> samplerFunction, T arg)", "testcase": false, "constructor": false}, {"identifier": "nextSpanWithParent", "parameters": "(SamplerFunction<T> samplerFunction, T arg,\n    @Nullable TraceContext parent)", "modifiers": "public", "return": "Span", "signature": "Span nextSpanWithParent(SamplerFunction<T> samplerFunction, T arg,\n    @Nullable TraceContext parent)", "full_signature": "public Span nextSpanWithParent(SamplerFunction<T> samplerFunction, T arg,\n    @Nullable TraceContext parent)", "class_method_signature": "Tracer.nextSpanWithParent(SamplerFunction<T> samplerFunction, T arg,\n    @Nullable TraceContext parent)", "testcase": false, "constructor": false}, {"identifier": "nextContext", "parameters": "(SamplerFunction<T> samplerFunction, T arg, TraceContext parent)", "modifiers": "", "return": "TraceContext", "signature": "TraceContext nextContext(SamplerFunction<T> samplerFunction, T arg, TraceContext parent)", "full_signature": " TraceContext nextContext(SamplerFunction<T> samplerFunction, T arg, TraceContext parent)", "class_method_signature": "Tracer.nextContext(SamplerFunction<T> samplerFunction, T arg, TraceContext parent)", "testcase": false, "constructor": false}, {"identifier": "startScopedSpanWithParent", "parameters": "(String name, @Nullable TraceContext parent)", "modifiers": "public", "return": "ScopedSpan", "signature": "ScopedSpan startScopedSpanWithParent(String name, @Nullable TraceContext parent)", "full_signature": "public ScopedSpan startScopedSpanWithParent(String name, @Nullable TraceContext parent)", "class_method_signature": "Tracer.startScopedSpanWithParent(String name, @Nullable TraceContext parent)", "testcase": false, "constructor": false}, {"identifier": "newScopedSpan", "parameters": "(@Nullable TraceContext parent, TraceContext context, String name)", "modifiers": "", "return": "ScopedSpan", "signature": "ScopedSpan newScopedSpan(@Nullable TraceContext parent, TraceContext context, String name)", "full_signature": " ScopedSpan newScopedSpan(@Nullable TraceContext parent, TraceContext context, String name)", "class_method_signature": "Tracer.newScopedSpan(@Nullable TraceContext parent, TraceContext context, String name)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Tracer.toString()", "testcase": false, "constructor": false}, {"identifier": "isNoop", "parameters": "(TraceContext context)", "modifiers": "", "return": "boolean", "signature": "boolean isNoop(TraceContext context)", "full_signature": " boolean isNoop(TraceContext context)", "class_method_signature": "Tracer.isNoop(TraceContext context)", "testcase": false, "constructor": false}, {"identifier": "nextId", "parameters": "()", "modifiers": "", "return": "long", "signature": "long nextId()", "full_signature": " long nextId()", "class_method_signature": "Tracer.nextId()", "testcase": false, "constructor": false}], "file": "brave/src/main/java/brave/Tracer.java"}, "focal_method": {"identifier": "nextSpan", "parameters": "(TraceContextOrSamplingFlags extracted)", "modifiers": "public", "return": "Span", "body": "public Span nextSpan(TraceContextOrSamplingFlags extracted) {\n    if (extracted == null) throw new NullPointerException(\"extracted == null\");\n    TraceContext context = extracted.context();\n    if (context != null) return newChild(context);\n\n    TraceIdContext traceIdContext = extracted.traceIdContext();\n    if (traceIdContext != null) {\n      return _toSpan(null, decorateContext(\n        InternalPropagation.instance.flags(extracted.traceIdContext()),\n        traceIdContext.traceIdHigh(),\n        traceIdContext.traceId(),\n        0L,\n        0L,\n        0L,\n        extracted.extra()\n      ));\n    }\n\n    SamplingFlags samplingFlags = extracted.samplingFlags();\n    List<Object> extra = extracted.extra();\n\n    TraceContext parent = currentTraceContext.get();\n    int flags;\n    long traceIdHigh = 0L, traceId = 0L, localRootId = 0L, spanId = 0L;\n    if (parent != null) {\n      // At this point, we didn't extract trace IDs, but do have a trace in progress. Since typical\n      // trace sampling is up front, we retain the decision from the parent.\n      flags = InternalPropagation.instance.flags(parent);\n      traceIdHigh = parent.traceIdHigh();\n      traceId = parent.traceId();\n      localRootId = parent.localRootId();\n      spanId = parent.spanId();\n      extra = concat(extra, parent.extra());\n    } else {\n      flags = InternalPropagation.instance.flags(samplingFlags);\n    }\n    return _toSpan(parent,\n      decorateContext(flags, traceIdHigh, traceId, localRootId, spanId, 0L, extra));\n  }", "signature": "Span nextSpan(TraceContextOrSamplingFlags extracted)", "full_signature": "public Span nextSpan(TraceContextOrSamplingFlags extracted)", "class_method_signature": "Tracer.nextSpan(TraceContextOrSamplingFlags extracted)", "testcase": false, "constructor": false, "invocations": ["context", "newChild", "traceIdContext", "_toSpan", "decorateContext", "flags", "traceIdContext", "traceIdHigh", "traceId", "extra", "samplingFlags", "extra", "get", "flags", "traceIdHigh", "traceId", "localRootId", "spanId", "concat", "extra", "flags", "_toSpan", "decorateContext"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}