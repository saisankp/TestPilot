{"test_class": {"identifier": "MethodInvokerTest", "superclass": "", "interfaces": "", "fields": [], "file": "py4j-java/src/test/java/py4j/reflection/MethodInvokerTest.java"}, "test_case": {"identifier": "testInvoke", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testInvoke() {\n\t\tCat cat = new Cat();\n\t\ttry {\n\t\t\tMethod m = Cat.class.getMethod(\"meow10\", float.class);\n\t\t\tMethodInvoker invoker = new MethodInvoker(m,\n\t\t\t\t\tnew TypeConverter[] { new TypeConverter(TypeConverter.DOUBLE_TO_FLOAT) }, 0);\n\t\t\tinvoker.invoke(cat, new Object[] { new Double(2.0) });\n\n\t\t\tm = Cat.class.getMethod(\"meow11\", new Class[0]);\n\t\t\tinvoker = new MethodInvoker(m, null, 0);\n\t\t\tinvoker.invoke(cat, new Object[0]);\n\n\t\t\tm = Cat.class.getMethod(\"meow10\", float.class);\n\t\t\tinvoker = new MethodInvoker(m, null, 0);\n\t\t\tinvoker.invoke(cat, new Object[] { new Float(1.1f) });\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail();\n\t\t}\n\t}", "signature": "void testInvoke()", "full_signature": "@Test public void testInvoke()", "class_method_signature": "MethodInvokerTest.testInvoke()", "testcase": true, "constructor": false, "invocations": ["getMethod", "invoke", "getMethod", "invoke", "getMethod", "invoke", "printStackTrace", "fail"]}, "focal_class": {"identifier": "MethodInvoker", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final static int INVALID_INVOKER_COST = -1;", "modifier": "public final static", "type": "int", "declarator": "INVALID_INVOKER_COST = -1", "var_name": "INVALID_INVOKER_COST"}, {"original_string": "public final static int MAX_DISTANCE = 100000000;", "modifier": "public final static", "type": "int", "declarator": "MAX_DISTANCE = 100000000", "var_name": "MAX_DISTANCE"}, {"original_string": "private int cost;", "modifier": "private", "type": "int", "declarator": "cost", "var_name": "cost"}, {"original_string": "private List<TypeConverter> converters;", "modifier": "private", "type": "List<TypeConverter>", "declarator": "converters", "var_name": "converters"}, {"original_string": "private Method method;", "modifier": "private", "type": "Method", "declarator": "method", "var_name": "method"}, {"original_string": "private Constructor<?> constructor;", "modifier": "private", "type": "Constructor<?>", "declarator": "constructor", "var_name": "constructor"}, {"original_string": "private final Logger logger = Logger.getLogger(MethodInvoker.class.getName());", "modifier": "private final", "type": "Logger", "declarator": "logger = Logger.getLogger(MethodInvoker.class.getName())", "var_name": "logger"}, {"original_string": "public static final MethodInvoker INVALID_INVOKER = new MethodInvoker((Method) null, null, INVALID_INVOKER_COST);", "modifier": "public static final", "type": "MethodInvoker", "declarator": "INVALID_INVOKER = new MethodInvoker((Method) null, null, INVALID_INVOKER_COST)", "var_name": "INVALID_INVOKER"}], "methods": [{"identifier": "allNoConverter", "parameters": "(List<TypeConverter> converters)", "modifiers": "private static", "return": "boolean", "signature": "boolean allNoConverter(List<TypeConverter> converters)", "full_signature": "private static boolean allNoConverter(List<TypeConverter> converters)", "class_method_signature": "MethodInvoker.allNoConverter(List<TypeConverter> converters)", "testcase": false, "constructor": false}, {"identifier": "buildConverters", "parameters": "(List<TypeConverter> converters, Class<?>[] parameters, Class<?>[] arguments)", "modifiers": "public static", "return": "int", "signature": "int buildConverters(List<TypeConverter> converters, Class<?>[] parameters, Class<?>[] arguments)", "full_signature": "public static int buildConverters(List<TypeConverter> converters, Class<?>[] parameters, Class<?>[] arguments)", "class_method_signature": "MethodInvoker.buildConverters(List<TypeConverter> converters, Class<?>[] parameters, Class<?>[] arguments)", "testcase": false, "constructor": false}, {"identifier": "buildInvoker", "parameters": "(Constructor<?> constructor, Class<?>[] arguments)", "modifiers": "public static", "return": "MethodInvoker", "signature": "MethodInvoker buildInvoker(Constructor<?> constructor, Class<?>[] arguments)", "full_signature": "public static MethodInvoker buildInvoker(Constructor<?> constructor, Class<?>[] arguments)", "class_method_signature": "MethodInvoker.buildInvoker(Constructor<?> constructor, Class<?>[] arguments)", "testcase": false, "constructor": false}, {"identifier": "buildInvoker", "parameters": "(Method method, Class<?>[] arguments)", "modifiers": "public static", "return": "MethodInvoker", "signature": "MethodInvoker buildInvoker(Method method, Class<?>[] arguments)", "full_signature": "public static MethodInvoker buildInvoker(Method method, Class<?>[] arguments)", "class_method_signature": "MethodInvoker.buildInvoker(Method method, Class<?>[] arguments)", "testcase": false, "constructor": false}, {"identifier": "MethodInvoker", "parameters": "(Constructor<?> constructor, TypeConverter[] converters, int cost)", "modifiers": "public", "return": "", "signature": " MethodInvoker(Constructor<?> constructor, TypeConverter[] converters, int cost)", "full_signature": "public  MethodInvoker(Constructor<?> constructor, TypeConverter[] converters, int cost)", "class_method_signature": "MethodInvoker.MethodInvoker(Constructor<?> constructor, TypeConverter[] converters, int cost)", "testcase": false, "constructor": true}, {"identifier": "MethodInvoker", "parameters": "(Method method, TypeConverter[] converters, int cost)", "modifiers": "public", "return": "", "signature": " MethodInvoker(Method method, TypeConverter[] converters, int cost)", "full_signature": "public  MethodInvoker(Method method, TypeConverter[] converters, int cost)", "class_method_signature": "MethodInvoker.MethodInvoker(Method method, TypeConverter[] converters, int cost)", "testcase": false, "constructor": true}, {"identifier": "getConstructor", "parameters": "()", "modifiers": "public", "return": "Constructor<?>", "signature": "Constructor<?> getConstructor()", "full_signature": "public Constructor<?> getConstructor()", "class_method_signature": "MethodInvoker.getConstructor()", "testcase": false, "constructor": false}, {"identifier": "getConverters", "parameters": "()", "modifiers": "public", "return": "List<TypeConverter>", "signature": "List<TypeConverter> getConverters()", "full_signature": "public List<TypeConverter> getConverters()", "class_method_signature": "MethodInvoker.getConverters()", "testcase": false, "constructor": false}, {"identifier": "getCost", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCost()", "full_signature": "public int getCost()", "class_method_signature": "MethodInvoker.getCost()", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "()", "modifiers": "public", "return": "Method", "signature": "Method getMethod()", "full_signature": "public Method getMethod()", "class_method_signature": "MethodInvoker.getMethod()", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(Object obj, Object[] arguments)", "modifiers": "public", "return": "Object", "signature": "Object invoke(Object obj, Object[] arguments)", "full_signature": "public Object invoke(Object obj, Object[] arguments)", "class_method_signature": "MethodInvoker.invoke(Object obj, Object[] arguments)", "testcase": false, "constructor": false}, {"identifier": "isVoid", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isVoid()", "full_signature": "public boolean isVoid()", "class_method_signature": "MethodInvoker.isVoid()", "testcase": false, "constructor": false}], "file": "py4j-java/src/main/java/py4j/reflection/MethodInvoker.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Object obj, Object[] arguments)", "modifiers": "public", "return": "Object", "body": "public Object invoke(Object obj, Object[] arguments) {\n\t\tObject returnObject = null;\n\n\t\ttry {\n\t\t\tObject[] newArguments = arguments;\n\n\t\t\tif (converters != null) {\n\t\t\t\tint size = arguments.length;\n\t\t\t\tnewArguments = new Object[size];\n\t\t\t\tfor (int i = 0; i < size; i++) {\n\t\t\t\t\tnewArguments[i] = converters.get(i).convert(arguments[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (method != null) {\n\t\t\t\tAccessController.doPrivileged(new PrivilegedAction<Object>() {\n\t\t\t\t\tpublic Object run() {\n\t\t\t\t\t\tmethod.setAccessible(true);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturnObject = method.invoke(obj, newArguments);\n\t\t\t} else if (constructor != null) {\n\t\t\t\tconstructor.setAccessible(true);\n\t\t\t\treturnObject = constructor.newInstance(newArguments);\n\t\t\t}\n\t\t} catch (InvocationTargetException ie) {\n\t\t\tlogger.log(Level.WARNING, \"Exception occurred in client code.\", ie);\n\t\t\tthrow new Py4JJavaException(ie.getCause());\n\t\t} catch (Exception e) {\n\t\t\tlogger.log(Level.WARNING, \"Could not invoke method or received an exception while invoking.\", e);\n\t\t\tthrow new Py4JException(e);\n\t\t}\n\n\t\treturn returnObject;\n\t}", "signature": "Object invoke(Object obj, Object[] arguments)", "full_signature": "public Object invoke(Object obj, Object[] arguments)", "class_method_signature": "MethodInvoker.invoke(Object obj, Object[] arguments)", "testcase": false, "constructor": false, "invocations": ["convert", "get", "doPrivileged", "setAccessible", "invoke", "setAccessible", "newInstance", "log", "getCause", "log"]}, "repository": {"repo_id": 1045976, "url": "https://github.com/bartdag/py4j", "language": "Java", "is_fork": false, "fork_count": 141, "stargazer_count": 737, "size": 16415, "license": "licensed"}}