{"test_class": {"identifier": "TypeExtractorTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-core/src/test/java/org/apache/flink/api/java/typeutils/TypeExtractorTest.java"}, "test_case": {"identifier": "testCreateTypeInfoFromInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCreateTypeInfoFromInstance() {\n\t\tResultTypeQueryable instance = new ResultTypeQueryable<Long>() {\n\t\t\t@Override\n\t\t\tpublic TypeInformation<Long> getProducedType() {\n\t\t\t\treturn BasicTypeInfo.LONG_TYPE_INFO;\n\t\t\t}\n\t\t};\n\t\tTypeInformation<?> ti = TypeExtractor.createTypeInfo(instance, null, null, 0);\n\t\tAssert.assertEquals(BasicTypeInfo.LONG_TYPE_INFO, ti);\n\n\t\t// method also needs to work for instances that do not implement ResultTypeQueryable\n\t\tMapFunction<Integer, Long> func = new MapFunction<Integer, Long>() {\n\t\t\t@Override\n\t\t\tpublic Long map(Integer value) throws Exception {\n\t\t\t\treturn value.longValue();\n\t\t\t}\n\t\t};\n\t\tti = TypeExtractor.createTypeInfo(func, MapFunction.class, func.getClass(), 0);\n\t\tAssert.assertEquals(BasicTypeInfo.INT_TYPE_INFO, ti);\n\t}", "signature": "void testCreateTypeInfoFromInstance()", "full_signature": "@Test public void testCreateTypeInfoFromInstance()", "class_method_signature": "TypeExtractorTest.testCreateTypeInfoFromInstance()", "testcase": true, "constructor": false, "invocations": ["createTypeInfo", "assertEquals", "longValue", "createTypeInfo", "getClass", "assertEquals"]}, "focal_class": {"identifier": "TypeExtractor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TypeExtractor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TypeExtractor.class)", "var_name": "LOG"}], "methods": [{"identifier": "TypeExtractor", "parameters": "()", "modifiers": "protected", "return": "", "signature": " TypeExtractor()", "full_signature": "protected  TypeExtractor()", "class_method_signature": "TypeExtractor.TypeExtractor()", "testcase": false, "constructor": true}, {"identifier": "getMapReturnTypes", "parameters": "(MapFunction<IN, OUT> mapInterface, TypeInformation<IN> inType)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getMapReturnTypes(MapFunction<IN, OUT> mapInterface, TypeInformation<IN> inType)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getMapReturnTypes(MapFunction<IN, OUT> mapInterface, TypeInformation<IN> inType)", "class_method_signature": "TypeExtractor.getMapReturnTypes(MapFunction<IN, OUT> mapInterface, TypeInformation<IN> inType)", "testcase": false, "constructor": false}, {"identifier": "getMapReturnTypes", "parameters": "(MapFunction<IN, OUT> mapInterface, TypeInformation<IN> inType,\n\t\t\tString functionName, boolean allowMissing)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getMapReturnTypes(MapFunction<IN, OUT> mapInterface, TypeInformation<IN> inType,\n\t\t\tString functionName, boolean allowMissing)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getMapReturnTypes(MapFunction<IN, OUT> mapInterface, TypeInformation<IN> inType,\n\t\t\tString functionName, boolean allowMissing)", "class_method_signature": "TypeExtractor.getMapReturnTypes(MapFunction<IN, OUT> mapInterface, TypeInformation<IN> inType,\n\t\t\tString functionName, boolean allowMissing)", "testcase": false, "constructor": false}, {"identifier": "getFlatMapReturnTypes", "parameters": "(FlatMapFunction<IN, OUT> flatMapInterface, TypeInformation<IN> inType)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getFlatMapReturnTypes(FlatMapFunction<IN, OUT> flatMapInterface, TypeInformation<IN> inType)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getFlatMapReturnTypes(FlatMapFunction<IN, OUT> flatMapInterface, TypeInformation<IN> inType)", "class_method_signature": "TypeExtractor.getFlatMapReturnTypes(FlatMapFunction<IN, OUT> flatMapInterface, TypeInformation<IN> inType)", "testcase": false, "constructor": false}, {"identifier": "getFlatMapReturnTypes", "parameters": "(FlatMapFunction<IN, OUT> flatMapInterface, TypeInformation<IN> inType,\n\t\t\tString functionName, boolean allowMissing)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getFlatMapReturnTypes(FlatMapFunction<IN, OUT> flatMapInterface, TypeInformation<IN> inType,\n\t\t\tString functionName, boolean allowMissing)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getFlatMapReturnTypes(FlatMapFunction<IN, OUT> flatMapInterface, TypeInformation<IN> inType,\n\t\t\tString functionName, boolean allowMissing)", "class_method_signature": "TypeExtractor.getFlatMapReturnTypes(FlatMapFunction<IN, OUT> flatMapInterface, TypeInformation<IN> inType,\n\t\t\tString functionName, boolean allowMissing)", "testcase": false, "constructor": false}, {"identifier": "getFoldReturnTypes", "parameters": "(FoldFunction<IN, OUT> foldInterface, TypeInformation<IN> inType)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getFoldReturnTypes(FoldFunction<IN, OUT> foldInterface, TypeInformation<IN> inType)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getFoldReturnTypes(FoldFunction<IN, OUT> foldInterface, TypeInformation<IN> inType)", "class_method_signature": "TypeExtractor.getFoldReturnTypes(FoldFunction<IN, OUT> foldInterface, TypeInformation<IN> inType)", "testcase": false, "constructor": false}, {"identifier": "getFoldReturnTypes", "parameters": "(FoldFunction<IN, OUT> foldInterface, TypeInformation<IN> inType, String functionName, boolean allowMissing)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getFoldReturnTypes(FoldFunction<IN, OUT> foldInterface, TypeInformation<IN> inType, String functionName, boolean allowMissing)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getFoldReturnTypes(FoldFunction<IN, OUT> foldInterface, TypeInformation<IN> inType, String functionName, boolean allowMissing)", "class_method_signature": "TypeExtractor.getFoldReturnTypes(FoldFunction<IN, OUT> foldInterface, TypeInformation<IN> inType, String functionName, boolean allowMissing)", "testcase": false, "constructor": false}, {"identifier": "getMapPartitionReturnTypes", "parameters": "(MapPartitionFunction<IN, OUT> mapPartitionInterface, TypeInformation<IN> inType)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getMapPartitionReturnTypes(MapPartitionFunction<IN, OUT> mapPartitionInterface, TypeInformation<IN> inType)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getMapPartitionReturnTypes(MapPartitionFunction<IN, OUT> mapPartitionInterface, TypeInformation<IN> inType)", "class_method_signature": "TypeExtractor.getMapPartitionReturnTypes(MapPartitionFunction<IN, OUT> mapPartitionInterface, TypeInformation<IN> inType)", "testcase": false, "constructor": false}, {"identifier": "getMapPartitionReturnTypes", "parameters": "(MapPartitionFunction<IN, OUT> mapPartitionInterface, TypeInformation<IN> inType,\n\t\t\tString functionName, boolean allowMissing)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getMapPartitionReturnTypes(MapPartitionFunction<IN, OUT> mapPartitionInterface, TypeInformation<IN> inType,\n\t\t\tString functionName, boolean allowMissing)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getMapPartitionReturnTypes(MapPartitionFunction<IN, OUT> mapPartitionInterface, TypeInformation<IN> inType,\n\t\t\tString functionName, boolean allowMissing)", "class_method_signature": "TypeExtractor.getMapPartitionReturnTypes(MapPartitionFunction<IN, OUT> mapPartitionInterface, TypeInformation<IN> inType,\n\t\t\tString functionName, boolean allowMissing)", "testcase": false, "constructor": false}, {"identifier": "getGroupReduceReturnTypes", "parameters": "(GroupReduceFunction<IN, OUT> groupReduceInterface, TypeInformation<IN> inType)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getGroupReduceReturnTypes(GroupReduceFunction<IN, OUT> groupReduceInterface, TypeInformation<IN> inType)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getGroupReduceReturnTypes(GroupReduceFunction<IN, OUT> groupReduceInterface, TypeInformation<IN> inType)", "class_method_signature": "TypeExtractor.getGroupReduceReturnTypes(GroupReduceFunction<IN, OUT> groupReduceInterface, TypeInformation<IN> inType)", "testcase": false, "constructor": false}, {"identifier": "getGroupReduceReturnTypes", "parameters": "(GroupReduceFunction<IN, OUT> groupReduceInterface, TypeInformation<IN> inType,\n\t\t\tString functionName, boolean allowMissing)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getGroupReduceReturnTypes(GroupReduceFunction<IN, OUT> groupReduceInterface, TypeInformation<IN> inType,\n\t\t\tString functionName, boolean allowMissing)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getGroupReduceReturnTypes(GroupReduceFunction<IN, OUT> groupReduceInterface, TypeInformation<IN> inType,\n\t\t\tString functionName, boolean allowMissing)", "class_method_signature": "TypeExtractor.getGroupReduceReturnTypes(GroupReduceFunction<IN, OUT> groupReduceInterface, TypeInformation<IN> inType,\n\t\t\tString functionName, boolean allowMissing)", "testcase": false, "constructor": false}, {"identifier": "getGroupCombineReturnTypes", "parameters": "(GroupCombineFunction<IN, OUT> combineInterface, TypeInformation<IN> inType)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getGroupCombineReturnTypes(GroupCombineFunction<IN, OUT> combineInterface, TypeInformation<IN> inType)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getGroupCombineReturnTypes(GroupCombineFunction<IN, OUT> combineInterface, TypeInformation<IN> inType)", "class_method_signature": "TypeExtractor.getGroupCombineReturnTypes(GroupCombineFunction<IN, OUT> combineInterface, TypeInformation<IN> inType)", "testcase": false, "constructor": false}, {"identifier": "getGroupCombineReturnTypes", "parameters": "(GroupCombineFunction<IN, OUT> combineInterface, TypeInformation<IN> inType,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tString functionName, boolean allowMissing)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getGroupCombineReturnTypes(GroupCombineFunction<IN, OUT> combineInterface, TypeInformation<IN> inType,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tString functionName, boolean allowMissing)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getGroupCombineReturnTypes(GroupCombineFunction<IN, OUT> combineInterface, TypeInformation<IN> inType,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tString functionName, boolean allowMissing)", "class_method_signature": "TypeExtractor.getGroupCombineReturnTypes(GroupCombineFunction<IN, OUT> combineInterface, TypeInformation<IN> inType,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tString functionName, boolean allowMissing)", "testcase": false, "constructor": false}, {"identifier": "getFlatJoinReturnTypes", "parameters": "(FlatJoinFunction<IN1, IN2, OUT> joinInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getFlatJoinReturnTypes(FlatJoinFunction<IN1, IN2, OUT> joinInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getFlatJoinReturnTypes(FlatJoinFunction<IN1, IN2, OUT> joinInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "class_method_signature": "TypeExtractor.getFlatJoinReturnTypes(FlatJoinFunction<IN1, IN2, OUT> joinInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "testcase": false, "constructor": false}, {"identifier": "getFlatJoinReturnTypes", "parameters": "(FlatJoinFunction<IN1, IN2, OUT> joinInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type, String functionName, boolean allowMissing)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getFlatJoinReturnTypes(FlatJoinFunction<IN1, IN2, OUT> joinInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type, String functionName, boolean allowMissing)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getFlatJoinReturnTypes(FlatJoinFunction<IN1, IN2, OUT> joinInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type, String functionName, boolean allowMissing)", "class_method_signature": "TypeExtractor.getFlatJoinReturnTypes(FlatJoinFunction<IN1, IN2, OUT> joinInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type, String functionName, boolean allowMissing)", "testcase": false, "constructor": false}, {"identifier": "getJoinReturnTypes", "parameters": "(JoinFunction<IN1, IN2, OUT> joinInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getJoinReturnTypes(JoinFunction<IN1, IN2, OUT> joinInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getJoinReturnTypes(JoinFunction<IN1, IN2, OUT> joinInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "class_method_signature": "TypeExtractor.getJoinReturnTypes(JoinFunction<IN1, IN2, OUT> joinInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "testcase": false, "constructor": false}, {"identifier": "getJoinReturnTypes", "parameters": "(JoinFunction<IN1, IN2, OUT> joinInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type, String functionName, boolean allowMissing)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getJoinReturnTypes(JoinFunction<IN1, IN2, OUT> joinInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type, String functionName, boolean allowMissing)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getJoinReturnTypes(JoinFunction<IN1, IN2, OUT> joinInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type, String functionName, boolean allowMissing)", "class_method_signature": "TypeExtractor.getJoinReturnTypes(JoinFunction<IN1, IN2, OUT> joinInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type, String functionName, boolean allowMissing)", "testcase": false, "constructor": false}, {"identifier": "getCoGroupReturnTypes", "parameters": "(CoGroupFunction<IN1, IN2, OUT> coGroupInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getCoGroupReturnTypes(CoGroupFunction<IN1, IN2, OUT> coGroupInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getCoGroupReturnTypes(CoGroupFunction<IN1, IN2, OUT> coGroupInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "class_method_signature": "TypeExtractor.getCoGroupReturnTypes(CoGroupFunction<IN1, IN2, OUT> coGroupInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "testcase": false, "constructor": false}, {"identifier": "getCoGroupReturnTypes", "parameters": "(CoGroupFunction<IN1, IN2, OUT> coGroupInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type, String functionName, boolean allowMissing)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getCoGroupReturnTypes(CoGroupFunction<IN1, IN2, OUT> coGroupInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type, String functionName, boolean allowMissing)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getCoGroupReturnTypes(CoGroupFunction<IN1, IN2, OUT> coGroupInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type, String functionName, boolean allowMissing)", "class_method_signature": "TypeExtractor.getCoGroupReturnTypes(CoGroupFunction<IN1, IN2, OUT> coGroupInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type, String functionName, boolean allowMissing)", "testcase": false, "constructor": false}, {"identifier": "getCrossReturnTypes", "parameters": "(CrossFunction<IN1, IN2, OUT> crossInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getCrossReturnTypes(CrossFunction<IN1, IN2, OUT> crossInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getCrossReturnTypes(CrossFunction<IN1, IN2, OUT> crossInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "class_method_signature": "TypeExtractor.getCrossReturnTypes(CrossFunction<IN1, IN2, OUT> crossInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "testcase": false, "constructor": false}, {"identifier": "getCrossReturnTypes", "parameters": "(CrossFunction<IN1, IN2, OUT> crossInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type, String functionName, boolean allowMissing)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getCrossReturnTypes(CrossFunction<IN1, IN2, OUT> crossInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type, String functionName, boolean allowMissing)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getCrossReturnTypes(CrossFunction<IN1, IN2, OUT> crossInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type, String functionName, boolean allowMissing)", "class_method_signature": "TypeExtractor.getCrossReturnTypes(CrossFunction<IN1, IN2, OUT> crossInterface,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type, String functionName, boolean allowMissing)", "testcase": false, "constructor": false}, {"identifier": "getKeySelectorTypes", "parameters": "(KeySelector<IN, OUT> selectorInterface, TypeInformation<IN> inType)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getKeySelectorTypes(KeySelector<IN, OUT> selectorInterface, TypeInformation<IN> inType)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getKeySelectorTypes(KeySelector<IN, OUT> selectorInterface, TypeInformation<IN> inType)", "class_method_signature": "TypeExtractor.getKeySelectorTypes(KeySelector<IN, OUT> selectorInterface, TypeInformation<IN> inType)", "testcase": false, "constructor": false}, {"identifier": "getKeySelectorTypes", "parameters": "(KeySelector<IN, OUT> selectorInterface,\n\t\t\tTypeInformation<IN> inType, String functionName, boolean allowMissing)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getKeySelectorTypes(KeySelector<IN, OUT> selectorInterface,\n\t\t\tTypeInformation<IN> inType, String functionName, boolean allowMissing)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> getKeySelectorTypes(KeySelector<IN, OUT> selectorInterface,\n\t\t\tTypeInformation<IN> inType, String functionName, boolean allowMissing)", "class_method_signature": "TypeExtractor.getKeySelectorTypes(KeySelector<IN, OUT> selectorInterface,\n\t\t\tTypeInformation<IN> inType, String functionName, boolean allowMissing)", "testcase": false, "constructor": false}, {"identifier": "getPartitionerTypes", "parameters": "(Partitioner<T> partitioner)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<T>", "signature": "TypeInformation<T> getPartitionerTypes(Partitioner<T> partitioner)", "full_signature": "@PublicEvolving public static TypeInformation<T> getPartitionerTypes(Partitioner<T> partitioner)", "class_method_signature": "TypeExtractor.getPartitionerTypes(Partitioner<T> partitioner)", "testcase": false, "constructor": false}, {"identifier": "getPartitionerTypes", "parameters": "(Partitioner<T> partitioner, String functionName, boolean allowMissing)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<T>", "signature": "TypeInformation<T> getPartitionerTypes(Partitioner<T> partitioner, String functionName, boolean allowMissing)", "full_signature": "@PublicEvolving public static TypeInformation<T> getPartitionerTypes(Partitioner<T> partitioner, String functionName, boolean allowMissing)", "class_method_signature": "TypeExtractor.getPartitionerTypes(Partitioner<T> partitioner, String functionName, boolean allowMissing)", "testcase": false, "constructor": false}, {"identifier": "getInputFormatTypes", "parameters": "(InputFormat<IN, ?> inputFormatInterface)", "modifiers": "@SuppressWarnings(\"unchecked\") @PublicEvolving public static", "return": "TypeInformation<IN>", "signature": "TypeInformation<IN> getInputFormatTypes(InputFormat<IN, ?> inputFormatInterface)", "full_signature": "@SuppressWarnings(\"unchecked\") @PublicEvolving public static TypeInformation<IN> getInputFormatTypes(InputFormat<IN, ?> inputFormatInterface)", "class_method_signature": "TypeExtractor.getInputFormatTypes(InputFormat<IN, ?> inputFormatInterface)", "testcase": false, "constructor": false}, {"identifier": "getUnaryOperatorReturnType", "parameters": "(Function function, Class<?> baseClass, \n\t\t\tboolean hasIterable, boolean hasCollector, TypeInformation<IN> inType,\n\t\t\tString functionName, boolean allowMissing)", "modifiers": "@SuppressWarnings(\"unchecked\") @PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getUnaryOperatorReturnType(Function function, Class<?> baseClass, \n\t\t\tboolean hasIterable, boolean hasCollector, TypeInformation<IN> inType,\n\t\t\tString functionName, boolean allowMissing)", "full_signature": "@SuppressWarnings(\"unchecked\") @PublicEvolving public static TypeInformation<OUT> getUnaryOperatorReturnType(Function function, Class<?> baseClass, \n\t\t\tboolean hasIterable, boolean hasCollector, TypeInformation<IN> inType,\n\t\t\tString functionName, boolean allowMissing)", "class_method_signature": "TypeExtractor.getUnaryOperatorReturnType(Function function, Class<?> baseClass, \n\t\t\tboolean hasIterable, boolean hasCollector, TypeInformation<IN> inType,\n\t\t\tString functionName, boolean allowMissing)", "testcase": false, "constructor": false}, {"identifier": "getBinaryOperatorReturnType", "parameters": "(Function function, Class<?> baseClass,\n\t\t\tboolean hasIterables, boolean hasCollector, TypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type,\n\t\t\tString functionName, boolean allowMissing)", "modifiers": "@SuppressWarnings(\"unchecked\") @PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> getBinaryOperatorReturnType(Function function, Class<?> baseClass,\n\t\t\tboolean hasIterables, boolean hasCollector, TypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type,\n\t\t\tString functionName, boolean allowMissing)", "full_signature": "@SuppressWarnings(\"unchecked\") @PublicEvolving public static TypeInformation<OUT> getBinaryOperatorReturnType(Function function, Class<?> baseClass,\n\t\t\tboolean hasIterables, boolean hasCollector, TypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type,\n\t\t\tString functionName, boolean allowMissing)", "class_method_signature": "TypeExtractor.getBinaryOperatorReturnType(Function function, Class<?> baseClass,\n\t\t\tboolean hasIterables, boolean hasCollector, TypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type,\n\t\t\tString functionName, boolean allowMissing)", "testcase": false, "constructor": false}, {"identifier": "createTypeInfo", "parameters": "(Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "TypeInformation<T>", "signature": "TypeInformation<T> createTypeInfo(Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") public static TypeInformation<T> createTypeInfo(Class<T> type)", "class_method_signature": "TypeExtractor.createTypeInfo(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "createTypeInfo", "parameters": "(Type t)", "modifiers": "public static", "return": "TypeInformation<?>", "signature": "TypeInformation<?> createTypeInfo(Type t)", "full_signature": "public static TypeInformation<?> createTypeInfo(Type t)", "class_method_signature": "TypeExtractor.createTypeInfo(Type t)", "testcase": false, "constructor": false}, {"identifier": "createTypeInfo", "parameters": "(Object instance, Class<?> baseClass, Class<?> clazz, int returnParamPos)", "modifiers": "@SuppressWarnings(\"unchecked\") @PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> createTypeInfo(Object instance, Class<?> baseClass, Class<?> clazz, int returnParamPos)", "full_signature": "@SuppressWarnings(\"unchecked\") @PublicEvolving public static TypeInformation<OUT> createTypeInfo(Object instance, Class<?> baseClass, Class<?> clazz, int returnParamPos)", "class_method_signature": "TypeExtractor.createTypeInfo(Object instance, Class<?> baseClass, Class<?> clazz, int returnParamPos)", "testcase": false, "constructor": false}, {"identifier": "createTypeInfo", "parameters": "(Class<?> baseClass, Class<?> clazz, int returnParamPos,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "modifiers": "@PublicEvolving public static", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> createTypeInfo(Class<?> baseClass, Class<?> clazz, int returnParamPos,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "full_signature": "@PublicEvolving public static TypeInformation<OUT> createTypeInfo(Class<?> baseClass, Class<?> clazz, int returnParamPos,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "class_method_signature": "TypeExtractor.createTypeInfo(Class<?> baseClass, Class<?> clazz, int returnParamPos,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "testcase": false, "constructor": false}, {"identifier": "privateCreateTypeInfo", "parameters": "(Type t)", "modifiers": "private", "return": "TypeInformation<?>", "signature": "TypeInformation<?> privateCreateTypeInfo(Type t)", "full_signature": "private TypeInformation<?> privateCreateTypeInfo(Type t)", "class_method_signature": "TypeExtractor.privateCreateTypeInfo(Type t)", "testcase": false, "constructor": false}, {"identifier": "privateCreateTypeInfo", "parameters": "(Class<?> baseClass, Class<?> clazz, int returnParamPos,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> privateCreateTypeInfo(Class<?> baseClass, Class<?> clazz, int returnParamPos,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "full_signature": "@SuppressWarnings(\"unchecked\") private TypeInformation<OUT> privateCreateTypeInfo(Class<?> baseClass, Class<?> clazz, int returnParamPos,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "class_method_signature": "TypeExtractor.privateCreateTypeInfo(Class<?> baseClass, Class<?> clazz, int returnParamPos,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "testcase": false, "constructor": false}, {"identifier": "privateCreateTypeInfo", "parameters": "(Type returnType, TypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> privateCreateTypeInfo(Type returnType, TypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "full_signature": "@SuppressWarnings(\"unchecked\") private TypeInformation<OUT> privateCreateTypeInfo(Type returnType, TypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "class_method_signature": "TypeExtractor.privateCreateTypeInfo(Type returnType, TypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "testcase": false, "constructor": false}, {"identifier": "createTypeInfoWithTypeHierarchy", "parameters": "(ArrayList<Type> typeHierarchy, Type t,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) private", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> createTypeInfoWithTypeHierarchy(ArrayList<Type> typeHierarchy, Type t,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "full_signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) private TypeInformation<OUT> createTypeInfoWithTypeHierarchy(ArrayList<Type> typeHierarchy, Type t,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "class_method_signature": "TypeExtractor.createTypeInfoWithTypeHierarchy(ArrayList<Type> typeHierarchy, Type t,\n\t\t\tTypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "testcase": false, "constructor": false}, {"identifier": "createTypeInfoFromInputs", "parameters": "(TypeVariable<?> returnTypeVar, ArrayList<Type> returnTypeHierarchy, \n\t\t\tTypeInformation<IN1> in1TypeInfo, TypeInformation<IN2> in2TypeInfo)", "modifiers": "private", "return": "TypeInformation<?>", "signature": "TypeInformation<?> createTypeInfoFromInputs(TypeVariable<?> returnTypeVar, ArrayList<Type> returnTypeHierarchy, \n\t\t\tTypeInformation<IN1> in1TypeInfo, TypeInformation<IN2> in2TypeInfo)", "full_signature": "private TypeInformation<?> createTypeInfoFromInputs(TypeVariable<?> returnTypeVar, ArrayList<Type> returnTypeHierarchy, \n\t\t\tTypeInformation<IN1> in1TypeInfo, TypeInformation<IN2> in2TypeInfo)", "class_method_signature": "TypeExtractor.createTypeInfoFromInputs(TypeVariable<?> returnTypeVar, ArrayList<Type> returnTypeHierarchy, \n\t\t\tTypeInformation<IN1> in1TypeInfo, TypeInformation<IN2> in2TypeInfo)", "testcase": false, "constructor": false}, {"identifier": "createTypeInfoFromInput", "parameters": "(TypeVariable<?> returnTypeVar, ArrayList<Type> inputTypeHierarchy, Type inType, TypeInformation<IN1> inTypeInfo)", "modifiers": "private", "return": "TypeInformation<?>", "signature": "TypeInformation<?> createTypeInfoFromInput(TypeVariable<?> returnTypeVar, ArrayList<Type> inputTypeHierarchy, Type inType, TypeInformation<IN1> inTypeInfo)", "full_signature": "private TypeInformation<?> createTypeInfoFromInput(TypeVariable<?> returnTypeVar, ArrayList<Type> inputTypeHierarchy, Type inType, TypeInformation<IN1> inTypeInfo)", "class_method_signature": "TypeExtractor.createTypeInfoFromInput(TypeVariable<?> returnTypeVar, ArrayList<Type> inputTypeHierarchy, Type inType, TypeInformation<IN1> inTypeInfo)", "testcase": false, "constructor": false}, {"identifier": "createSubTypesInfo", "parameters": "(Type originalType, ParameterizedType definingType,\n\t\t\tArrayList<Type> typeHierarchy, TypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "modifiers": "private", "return": "TypeInformation<?>[]", "signature": "TypeInformation<?>[] createSubTypesInfo(Type originalType, ParameterizedType definingType,\n\t\t\tArrayList<Type> typeHierarchy, TypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "full_signature": "private TypeInformation<?>[] createSubTypesInfo(Type originalType, ParameterizedType definingType,\n\t\t\tArrayList<Type> typeHierarchy, TypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "class_method_signature": "TypeExtractor.createSubTypesInfo(Type originalType, ParameterizedType definingType,\n\t\t\tArrayList<Type> typeHierarchy, TypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(Class<?> baseClass, Class<?> clazz, int pos)", "modifiers": "@PublicEvolving public static", "return": "Type", "signature": "Type getParameterType(Class<?> baseClass, Class<?> clazz, int pos)", "full_signature": "@PublicEvolving public static Type getParameterType(Class<?> baseClass, Class<?> clazz, int pos)", "class_method_signature": "TypeExtractor.getParameterType(Class<?> baseClass, Class<?> clazz, int pos)", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(Class<?> baseClass, ArrayList<Type> typeHierarchy, Class<?> clazz, int pos)", "modifiers": "private static", "return": "Type", "signature": "Type getParameterType(Class<?> baseClass, ArrayList<Type> typeHierarchy, Class<?> clazz, int pos)", "full_signature": "private static Type getParameterType(Class<?> baseClass, ArrayList<Type> typeHierarchy, Class<?> clazz, int pos)", "class_method_signature": "TypeExtractor.getParameterType(Class<?> baseClass, ArrayList<Type> typeHierarchy, Class<?> clazz, int pos)", "testcase": false, "constructor": false}, {"identifier": "getParameterTypeFromGenericType", "parameters": "(Class<?> baseClass, ArrayList<Type> typeHierarchy, Type t, int pos)", "modifiers": "private static", "return": "Type", "signature": "Type getParameterTypeFromGenericType(Class<?> baseClass, ArrayList<Type> typeHierarchy, Type t, int pos)", "full_signature": "private static Type getParameterTypeFromGenericType(Class<?> baseClass, ArrayList<Type> typeHierarchy, Type t, int pos)", "class_method_signature": "TypeExtractor.getParameterTypeFromGenericType(Class<?> baseClass, ArrayList<Type> typeHierarchy, Type t, int pos)", "testcase": false, "constructor": false}, {"identifier": "validateInputType", "parameters": "(Type t, TypeInformation<?> inType)", "modifiers": "private static", "return": "void", "signature": "void validateInputType(Type t, TypeInformation<?> inType)", "full_signature": "private static void validateInputType(Type t, TypeInformation<?> inType)", "class_method_signature": "TypeExtractor.validateInputType(Type t, TypeInformation<?> inType)", "testcase": false, "constructor": false}, {"identifier": "validateInputType", "parameters": "(Class<?> baseClass, Class<?> clazz, int inputParamPos, TypeInformation<?> inTypeInfo)", "modifiers": "private static", "return": "void", "signature": "void validateInputType(Class<?> baseClass, Class<?> clazz, int inputParamPos, TypeInformation<?> inTypeInfo)", "full_signature": "private static void validateInputType(Class<?> baseClass, Class<?> clazz, int inputParamPos, TypeInformation<?> inTypeInfo)", "class_method_signature": "TypeExtractor.validateInputType(Class<?> baseClass, Class<?> clazz, int inputParamPos, TypeInformation<?> inTypeInfo)", "testcase": false, "constructor": false}, {"identifier": "validateInfo", "parameters": "(ArrayList<Type> typeHierarchy, Type type, TypeInformation<?> typeInfo)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "void", "signature": "void validateInfo(ArrayList<Type> typeHierarchy, Type type, TypeInformation<?> typeInfo)", "full_signature": "@SuppressWarnings(\"unchecked\") private static void validateInfo(ArrayList<Type> typeHierarchy, Type type, TypeInformation<?> typeInfo)", "class_method_signature": "TypeExtractor.validateInfo(ArrayList<Type> typeHierarchy, Type type, TypeInformation<?> typeInfo)", "testcase": false, "constructor": false}, {"identifier": "countTypeInHierarchy", "parameters": "(ArrayList<Type> typeHierarchy, Type type)", "modifiers": "private static", "return": "int", "signature": "int countTypeInHierarchy(ArrayList<Type> typeHierarchy, Type type)", "full_signature": "private static int countTypeInHierarchy(ArrayList<Type> typeHierarchy, Type type)", "class_method_signature": "TypeExtractor.countTypeInHierarchy(ArrayList<Type> typeHierarchy, Type type)", "testcase": false, "constructor": false}, {"identifier": "getTypeHierarchy", "parameters": "(ArrayList<Type> typeHierarchy, Type curT, Class<?> stopAtClass)", "modifiers": "private static", "return": "Type", "signature": "Type getTypeHierarchy(ArrayList<Type> typeHierarchy, Type curT, Class<?> stopAtClass)", "full_signature": "private static Type getTypeHierarchy(ArrayList<Type> typeHierarchy, Type curT, Class<?> stopAtClass)", "class_method_signature": "TypeExtractor.getTypeHierarchy(ArrayList<Type> typeHierarchy, Type curT, Class<?> stopAtClass)", "testcase": false, "constructor": false}, {"identifier": "countFieldsInClass", "parameters": "(Class<?> clazz)", "modifiers": "private", "return": "int", "signature": "int countFieldsInClass(Class<?> clazz)", "full_signature": "private int countFieldsInClass(Class<?> clazz)", "class_method_signature": "TypeExtractor.countFieldsInClass(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "removeGenericWrapper", "parameters": "(Type t)", "modifiers": "private static", "return": "Type", "signature": "Type removeGenericWrapper(Type t)", "full_signature": "private static Type removeGenericWrapper(Type t)", "class_method_signature": "TypeExtractor.removeGenericWrapper(Type t)", "testcase": false, "constructor": false}, {"identifier": "validateLambdaGenericParameters", "parameters": "(Method m)", "modifiers": "private static", "return": "void", "signature": "void validateLambdaGenericParameters(Method m)", "full_signature": "private static void validateLambdaGenericParameters(Method m)", "class_method_signature": "TypeExtractor.validateLambdaGenericParameters(Method m)", "testcase": false, "constructor": false}, {"identifier": "validateLambdaGenericParameter", "parameters": "(Type t)", "modifiers": "private static", "return": "void", "signature": "void validateLambdaGenericParameter(Type t)", "full_signature": "private static void validateLambdaGenericParameter(Type t)", "class_method_signature": "TypeExtractor.validateLambdaGenericParameter(Type t)", "testcase": false, "constructor": false}, {"identifier": "encodePrimitiveClass", "parameters": "(Class<?> primitiveClass)", "modifiers": "private static", "return": "String", "signature": "String encodePrimitiveClass(Class<?> primitiveClass)", "full_signature": "private static String encodePrimitiveClass(Class<?> primitiveClass)", "class_method_signature": "TypeExtractor.encodePrimitiveClass(Class<?> primitiveClass)", "testcase": false, "constructor": false}, {"identifier": "findCorrespondingInfo", "parameters": "(TypeVariable<?> typeVar, Type type, TypeInformation<?> corrInfo, ArrayList<Type> typeHierarchy)", "modifiers": "private static", "return": "TypeInformation<?>", "signature": "TypeInformation<?> findCorrespondingInfo(TypeVariable<?> typeVar, Type type, TypeInformation<?> corrInfo, ArrayList<Type> typeHierarchy)", "full_signature": "private static TypeInformation<?> findCorrespondingInfo(TypeVariable<?> typeVar, Type type, TypeInformation<?> corrInfo, ArrayList<Type> typeHierarchy)", "class_method_signature": "TypeExtractor.findCorrespondingInfo(TypeVariable<?> typeVar, Type type, TypeInformation<?> corrInfo, ArrayList<Type> typeHierarchy)", "testcase": false, "constructor": false}, {"identifier": "materializeTypeVariable", "parameters": "(ArrayList<Type> typeHierarchy, TypeVariable<?> typeVar)", "modifiers": "private static", "return": "Type", "signature": "Type materializeTypeVariable(ArrayList<Type> typeHierarchy, TypeVariable<?> typeVar)", "full_signature": "private static Type materializeTypeVariable(ArrayList<Type> typeHierarchy, TypeVariable<?> typeVar)", "class_method_signature": "TypeExtractor.materializeTypeVariable(ArrayList<Type> typeHierarchy, TypeVariable<?> typeVar)", "testcase": false, "constructor": false}, {"identifier": "getForClass", "parameters": "(Class<X> clazz)", "modifiers": "public static", "return": "TypeInformation<X>", "signature": "TypeInformation<X> getForClass(Class<X> clazz)", "full_signature": "public static TypeInformation<X> getForClass(Class<X> clazz)", "class_method_signature": "TypeExtractor.getForClass(Class<X> clazz)", "testcase": false, "constructor": false}, {"identifier": "privateGetForClass", "parameters": "(Class<X> clazz, ArrayList<Type> typeHierarchy)", "modifiers": "private", "return": "TypeInformation<X>", "signature": "TypeInformation<X> privateGetForClass(Class<X> clazz, ArrayList<Type> typeHierarchy)", "full_signature": "private TypeInformation<X> privateGetForClass(Class<X> clazz, ArrayList<Type> typeHierarchy)", "class_method_signature": "TypeExtractor.privateGetForClass(Class<X> clazz, ArrayList<Type> typeHierarchy)", "testcase": false, "constructor": false}, {"identifier": "privateGetForClass", "parameters": "(Class<OUT> clazz, ArrayList<Type> typeHierarchy,\n\t\t\tParameterizedType parameterizedType, TypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) private", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> privateGetForClass(Class<OUT> clazz, ArrayList<Type> typeHierarchy,\n\t\t\tParameterizedType parameterizedType, TypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "full_signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) private TypeInformation<OUT> privateGetForClass(Class<OUT> clazz, ArrayList<Type> typeHierarchy,\n\t\t\tParameterizedType parameterizedType, TypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "class_method_signature": "TypeExtractor.privateGetForClass(Class<OUT> clazz, ArrayList<Type> typeHierarchy,\n\t\t\tParameterizedType parameterizedType, TypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "testcase": false, "constructor": false}, {"identifier": "isValidPojoField", "parameters": "(Field f, Class<?> clazz, ArrayList<Type> typeHierarchy)", "modifiers": "private", "return": "boolean", "signature": "boolean isValidPojoField(Field f, Class<?> clazz, ArrayList<Type> typeHierarchy)", "full_signature": "private boolean isValidPojoField(Field f, Class<?> clazz, ArrayList<Type> typeHierarchy)", "class_method_signature": "TypeExtractor.isValidPojoField(Field f, Class<?> clazz, ArrayList<Type> typeHierarchy)", "testcase": false, "constructor": false}, {"identifier": "analyzePojo", "parameters": "(Class<OUT> clazz, ArrayList<Type> typeHierarchy,\n\t\t\tParameterizedType parameterizedType, TypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "TypeInformation<OUT>", "signature": "TypeInformation<OUT> analyzePojo(Class<OUT> clazz, ArrayList<Type> typeHierarchy,\n\t\t\tParameterizedType parameterizedType, TypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "full_signature": "@SuppressWarnings(\"unchecked\") protected TypeInformation<OUT> analyzePojo(Class<OUT> clazz, ArrayList<Type> typeHierarchy,\n\t\t\tParameterizedType parameterizedType, TypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "class_method_signature": "TypeExtractor.analyzePojo(Class<OUT> clazz, ArrayList<Type> typeHierarchy,\n\t\t\tParameterizedType parameterizedType, TypeInformation<IN1> in1Type, TypeInformation<IN2> in2Type)", "testcase": false, "constructor": false}, {"identifier": "getAllDeclaredFields", "parameters": "(Class<?> clazz)", "modifiers": "@PublicEvolving public static", "return": "List<Field>", "signature": "List<Field> getAllDeclaredFields(Class<?> clazz)", "full_signature": "@PublicEvolving public static List<Field> getAllDeclaredFields(Class<?> clazz)", "class_method_signature": "TypeExtractor.getAllDeclaredFields(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getDeclaredField", "parameters": "(Class<?> clazz, String name)", "modifiers": "@PublicEvolving public static", "return": "Field", "signature": "Field getDeclaredField(Class<?> clazz, String name)", "full_signature": "@PublicEvolving public static Field getDeclaredField(Class<?> clazz, String name)", "class_method_signature": "TypeExtractor.getDeclaredField(Class<?> clazz, String name)", "testcase": false, "constructor": false}, {"identifier": "hasFieldWithSameName", "parameters": "(String name, List<Field> fields)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasFieldWithSameName(String name, List<Field> fields)", "full_signature": "private static boolean hasFieldWithSameName(String name, List<Field> fields)", "class_method_signature": "TypeExtractor.hasFieldWithSameName(String name, List<Field> fields)", "testcase": false, "constructor": false}, {"identifier": "getAllDeclaredMethods", "parameters": "(Class<?> clazz)", "modifiers": "private static", "return": "List<Method>", "signature": "List<Method> getAllDeclaredMethods(Class<?> clazz)", "full_signature": "private static List<Method> getAllDeclaredMethods(Class<?> clazz)", "class_method_signature": "TypeExtractor.getAllDeclaredMethods(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "typeToClass", "parameters": "(Type t)", "modifiers": "@Internal public static", "return": "Class<?>", "signature": "Class<?> typeToClass(Type t)", "full_signature": "@Internal public static Class<?> typeToClass(Type t)", "class_method_signature": "TypeExtractor.typeToClass(Type t)", "testcase": false, "constructor": false}, {"identifier": "isClassType", "parameters": "(Type t)", "modifiers": "@Internal public static", "return": "boolean", "signature": "boolean isClassType(Type t)", "full_signature": "@Internal public static boolean isClassType(Type t)", "class_method_signature": "TypeExtractor.isClassType(Type t)", "testcase": false, "constructor": false}, {"identifier": "sameTypeVars", "parameters": "(Type t1, Type t2)", "modifiers": "private static", "return": "boolean", "signature": "boolean sameTypeVars(Type t1, Type t2)", "full_signature": "private static boolean sameTypeVars(Type t1, Type t2)", "class_method_signature": "TypeExtractor.sameTypeVars(Type t1, Type t2)", "testcase": false, "constructor": false}, {"identifier": "getTypeOfPojoField", "parameters": "(TypeInformation<?> pojoInfo, Field field)", "modifiers": "private static", "return": "TypeInformation<?>", "signature": "TypeInformation<?> getTypeOfPojoField(TypeInformation<?> pojoInfo, Field field)", "full_signature": "private static TypeInformation<?> getTypeOfPojoField(TypeInformation<?> pojoInfo, Field field)", "class_method_signature": "TypeExtractor.getTypeOfPojoField(TypeInformation<?> pojoInfo, Field field)", "testcase": false, "constructor": false}, {"identifier": "getForObject", "parameters": "(X value)", "modifiers": "public static", "return": "TypeInformation<X>", "signature": "TypeInformation<X> getForObject(X value)", "full_signature": "public static TypeInformation<X> getForObject(X value)", "class_method_signature": "TypeExtractor.getForObject(X value)", "testcase": false, "constructor": false}, {"identifier": "privateGetForObject", "parameters": "(X value)", "modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) private", "return": "TypeInformation<X>", "signature": "TypeInformation<X> privateGetForObject(X value)", "full_signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) private TypeInformation<X> privateGetForObject(X value)", "class_method_signature": "TypeExtractor.privateGetForObject(X value)", "testcase": false, "constructor": false}], "file": "flink-core/src/main/java/org/apache/flink/api/java/typeutils/TypeExtractor.java"}, "focal_method": {"identifier": "createTypeInfo", "parameters": "(Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "TypeInformation<T>", "body": "@SuppressWarnings(\"unchecked\")\n\tpublic static <T> TypeInformation<T> createTypeInfo(Class<T> type) {\n\t\treturn (TypeInformation<T>) createTypeInfo((Type) type);\n\t}", "signature": "TypeInformation<T> createTypeInfo(Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") public static TypeInformation<T> createTypeInfo(Class<T> type)", "class_method_signature": "TypeExtractor.createTypeInfo(Class<T> type)", "testcase": false, "constructor": false, "invocations": ["createTypeInfo"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}