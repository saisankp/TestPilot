{"test_class": {"identifier": "DefaultRegisterableItemsFactoryTest", "superclass": "extends AbstractDeploymentDescriptorTest", "interfaces": "", "fields": [{"original_string": "private PoolingDataSourceWrapper pds;", "modifier": "private", "type": "PoolingDataSourceWrapper", "declarator": "pds", "var_name": "pds"}, {"original_string": "private RuntimeManager manager;", "modifier": "private", "type": "RuntimeManager", "declarator": "manager", "var_name": "manager"}], "file": "jbpm-runtime-manager/src/test/java/org/jbpm/runtime/manager/impl/DefaultRegisterableItemsFactoryTest.java"}, "test_case": {"identifier": "testJmsAuditCacheInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testJmsAuditCacheInstance() throws Exception {\n        KieServices ks = KieServices.Factory.get();\n        ReleaseId releaseId = ks.newReleaseId(\"org.jbpm.test.jms\", \"kjar-jms-audit\", \"1.0.0\");\n\n        DeploymentDescriptor customDescriptor = new DeploymentDescriptorImpl(\"org.jbpm.persistence.jpa\");\n        customDescriptor.getBuilder()\n                        .auditMode(AuditMode.JMS);\n        Map<String, String> resources = new HashMap<String, String>();\n        resources.put(\"src/main/resources/\" + DeploymentDescriptor.META_INF_LOCATION, customDescriptor.toXml());\n\n        InternalKieModule kJar1 = createKieJar(ks, releaseId, resources);\n        installKjar(releaseId, kJar1);\n\n        RuntimeEnvironment environment = RuntimeEnvironmentBuilder.Factory.get()\n                                                                          .newDefaultBuilder(releaseId)\n                                                                          .classLoader(this.getClass().getClassLoader())\n                                                                          .get();\n\n        manager = RuntimeManagerFactory.Factory.get().newPerProcessInstanceRuntimeManager(environment);\n        assertNotNull(manager);\n\n        RuntimeEngine engine = manager.getRuntimeEngine(ProcessInstanceIdContext.get());\n        assertNotNull(engine);\n        AsyncAuditLogProducer asyncAuditLogProducer = null;\n        KieSession kieSession = engine.getKieSession();\n        for (ProcessEventListener listener : kieSession.getProcessEventListeners()) {\n            if (listener instanceof AsyncAuditLogProducer) {\n                asyncAuditLogProducer = (AsyncAuditLogProducer) listener;\n                break;\n            }\n        }\n        assertNotNull(asyncAuditLogProducer);\n\n        manager.close();\n        manager = RuntimeManagerFactory.Factory.get().newPerProcessInstanceRuntimeManager(environment);\n        assertNotNull(manager);\n\n        RuntimeEngine engine2 = manager.getRuntimeEngine(ProcessInstanceIdContext.get());\n\n        KieSession kieSession2 = engine2.getKieSession();\n        AsyncAuditLogProducer asyncAuditLogProducer2 = null;\n        for (ProcessEventListener listener : kieSession2.getProcessEventListeners()) {\n            if (listener instanceof AsyncAuditLogProducer) {\n                asyncAuditLogProducer2 = (AsyncAuditLogProducer) listener;\n                break;\n            }\n        }\n        assertNotNull(asyncAuditLogProducer2);\n        // check if the instance is the same (cached)\n        assertEquals(asyncAuditLogProducer, asyncAuditLogProducer2);\n    }", "signature": "void testJmsAuditCacheInstance()", "full_signature": "@Test public void testJmsAuditCacheInstance()", "class_method_signature": "DefaultRegisterableItemsFactoryTest.testJmsAuditCacheInstance()", "testcase": true, "constructor": false, "invocations": ["get", "newReleaseId", "auditMode", "getBuilder", "put", "toXml", "createKieJar", "installKjar", "get", "classLoader", "newDefaultBuilder", "get", "getClassLoader", "getClass", "newPerProcessInstanceRuntimeManager", "get", "assertNotNull", "getRuntimeEngine", "get", "assertNotNull", "getKieSession", "getProcessEventListeners", "assertNotNull", "close", "newPerProcessInstanceRuntimeManager", "get", "assertNotNull", "getRuntimeEngine", "get", "getKieSession", "getProcessEventListeners", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "DefaultRegisterableItemsFactory", "superclass": "extends SimpleRegisterableItemsFactory", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DefaultRegisterableItemsFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DefaultRegisterableItemsFactory.class)", "var_name": "logger"}, {"original_string": "private AuditEventBuilder auditBuilder = new ManagedAuditEventBuilderImpl();", "modifier": "private", "type": "AuditEventBuilder", "declarator": "auditBuilder = new ManagedAuditEventBuilderImpl()", "var_name": "auditBuilder"}, {"original_string": "private AbstractAuditLogger jmsLogger = null;", "modifier": "private", "type": "AbstractAuditLogger", "declarator": "jmsLogger = null", "var_name": "jmsLogger"}, {"original_string": "private AsyncTaskLifeCycleEventProducer jmsTaskLogger = null;", "modifier": "private", "type": "AsyncTaskLifeCycleEventProducer", "declarator": "jmsTaskLogger = null", "var_name": "jmsTaskLogger"}], "methods": [{"identifier": "getWorkItemHandlers", "parameters": "(RuntimeEngine runtime)", "modifiers": "@Override public", "return": "Map<String, WorkItemHandler>", "signature": "Map<String, WorkItemHandler> getWorkItemHandlers(RuntimeEngine runtime)", "full_signature": "@Override public Map<String, WorkItemHandler> getWorkItemHandlers(RuntimeEngine runtime)", "class_method_signature": "DefaultRegisterableItemsFactory.getWorkItemHandlers(RuntimeEngine runtime)", "testcase": false, "constructor": false}, {"identifier": "getProcessEventListeners", "parameters": "(RuntimeEngine runtime)", "modifiers": "@Override public", "return": "List<ProcessEventListener>", "signature": "List<ProcessEventListener> getProcessEventListeners(RuntimeEngine runtime)", "full_signature": "@Override public List<ProcessEventListener> getProcessEventListeners(RuntimeEngine runtime)", "class_method_signature": "DefaultRegisterableItemsFactory.getProcessEventListeners(RuntimeEngine runtime)", "testcase": false, "constructor": false}, {"identifier": "getAgendaEventListeners", "parameters": "(RuntimeEngine runtime)", "modifiers": "@Override public", "return": "List<AgendaEventListener>", "signature": "List<AgendaEventListener> getAgendaEventListeners(RuntimeEngine runtime)", "full_signature": "@Override public List<AgendaEventListener> getAgendaEventListeners(RuntimeEngine runtime)", "class_method_signature": "DefaultRegisterableItemsFactory.getAgendaEventListeners(RuntimeEngine runtime)", "testcase": false, "constructor": false}, {"identifier": "getRuleRuntimeEventListeners", "parameters": "(RuntimeEngine runtime)", "modifiers": "@Override public", "return": "List<RuleRuntimeEventListener>", "signature": "List<RuleRuntimeEventListener> getRuleRuntimeEventListeners(RuntimeEngine runtime)", "full_signature": "@Override public List<RuleRuntimeEventListener> getRuleRuntimeEventListeners(RuntimeEngine runtime)", "class_method_signature": "DefaultRegisterableItemsFactory.getRuleRuntimeEventListeners(RuntimeEngine runtime)", "testcase": false, "constructor": false}, {"identifier": "getTaskListeners", "parameters": "()", "modifiers": "@Override public", "return": "List<TaskLifeCycleEventListener>", "signature": "List<TaskLifeCycleEventListener> getTaskListeners()", "full_signature": "@Override public List<TaskLifeCycleEventListener> getTaskListeners()", "class_method_signature": "DefaultRegisterableItemsFactory.getTaskListeners()", "testcase": false, "constructor": false}, {"identifier": "getGlobals", "parameters": "(RuntimeEngine runtime)", "modifiers": "@Override public", "return": "Map<String, Object>", "signature": "Map<String, Object> getGlobals(RuntimeEngine runtime)", "full_signature": "@Override public Map<String, Object> getGlobals(RuntimeEngine runtime)", "class_method_signature": "DefaultRegisterableItemsFactory.getGlobals(RuntimeEngine runtime)", "testcase": false, "constructor": false}, {"identifier": "getHTWorkItemHandler", "parameters": "(RuntimeEngine runtime)", "modifiers": "protected", "return": "WorkItemHandler", "signature": "WorkItemHandler getHTWorkItemHandler(RuntimeEngine runtime)", "full_signature": "protected WorkItemHandler getHTWorkItemHandler(RuntimeEngine runtime)", "class_method_signature": "DefaultRegisterableItemsFactory.getHTWorkItemHandler(RuntimeEngine runtime)", "testcase": false, "constructor": false}, {"identifier": "getAuditBuilder", "parameters": "()", "modifiers": "public", "return": "AuditEventBuilder", "signature": "AuditEventBuilder getAuditBuilder()", "full_signature": "public AuditEventBuilder getAuditBuilder()", "class_method_signature": "DefaultRegisterableItemsFactory.getAuditBuilder()", "testcase": false, "constructor": false}, {"identifier": "getAuditBuilder", "parameters": "(RuntimeEngine engine)", "modifiers": "public", "return": "AuditEventBuilder", "signature": "AuditEventBuilder getAuditBuilder(RuntimeEngine engine)", "full_signature": "public AuditEventBuilder getAuditBuilder(RuntimeEngine engine)", "class_method_signature": "DefaultRegisterableItemsFactory.getAuditBuilder(RuntimeEngine engine)", "testcase": false, "constructor": false}, {"identifier": "setAuditBuilder", "parameters": "(AuditEventBuilder auditBuilder)", "modifiers": "public", "return": "void", "signature": "void setAuditBuilder(AuditEventBuilder auditBuilder)", "full_signature": "public void setAuditBuilder(AuditEventBuilder auditBuilder)", "class_method_signature": "DefaultRegisterableItemsFactory.setAuditBuilder(AuditEventBuilder auditBuilder)", "testcase": false, "constructor": false}, {"identifier": "getInstanceFromModel", "parameters": "(ObjectModel model, ClassLoader classloader, Map<String, Object> contaxtParams)", "modifiers": "protected", "return": "Object", "signature": "Object getInstanceFromModel(ObjectModel model, ClassLoader classloader, Map<String, Object> contaxtParams)", "full_signature": "protected Object getInstanceFromModel(ObjectModel model, ClassLoader classloader, Map<String, Object> contaxtParams)", "class_method_signature": "DefaultRegisterableItemsFactory.getInstanceFromModel(ObjectModel model, ClassLoader classloader, Map<String, Object> contaxtParams)", "testcase": false, "constructor": false}, {"identifier": "getParametersMap", "parameters": "(RuntimeEngine runtime)", "modifiers": "protected", "return": "Map<String, Object>", "signature": "Map<String, Object> getParametersMap(RuntimeEngine runtime)", "full_signature": "protected Map<String, Object> getParametersMap(RuntimeEngine runtime)", "class_method_signature": "DefaultRegisterableItemsFactory.getParametersMap(RuntimeEngine runtime)", "testcase": false, "constructor": false}, {"identifier": "getTaskListenersFromDescriptor", "parameters": "()", "modifiers": "protected", "return": "List<TaskLifeCycleEventListener>", "signature": "List<TaskLifeCycleEventListener> getTaskListenersFromDescriptor()", "full_signature": "protected List<TaskLifeCycleEventListener> getTaskListenersFromDescriptor()", "class_method_signature": "DefaultRegisterableItemsFactory.getTaskListenersFromDescriptor()", "testcase": false, "constructor": false}, {"identifier": "getWorkItemHandlersFromDescriptor", "parameters": "(RuntimeEngine runtime)", "modifiers": "protected", "return": "Map<String, WorkItemHandler>", "signature": "Map<String, WorkItemHandler> getWorkItemHandlersFromDescriptor(RuntimeEngine runtime)", "full_signature": "protected Map<String, WorkItemHandler> getWorkItemHandlersFromDescriptor(RuntimeEngine runtime)", "class_method_signature": "DefaultRegisterableItemsFactory.getWorkItemHandlersFromDescriptor(RuntimeEngine runtime)", "testcase": false, "constructor": false}, {"identifier": "getEventListenerFromDescriptor", "parameters": "(RuntimeEngine runtime, Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "List<T>", "signature": "List<T> getEventListenerFromDescriptor(RuntimeEngine runtime, Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") protected List<T> getEventListenerFromDescriptor(RuntimeEngine runtime, Class<T> type)", "class_method_signature": "DefaultRegisterableItemsFactory.getEventListenerFromDescriptor(RuntimeEngine runtime, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "getGlobalsFromDescriptor", "parameters": "(RuntimeEngine runtime)", "modifiers": "protected", "return": "Map<String, Object>", "signature": "Map<String, Object> getGlobalsFromDescriptor(RuntimeEngine runtime)", "full_signature": "protected Map<String, Object> getGlobalsFromDescriptor(RuntimeEngine runtime)", "class_method_signature": "DefaultRegisterableItemsFactory.getGlobalsFromDescriptor(RuntimeEngine runtime)", "testcase": false, "constructor": false}, {"identifier": "loadJMSProperties", "parameters": "()", "modifiers": "protected", "return": "Properties", "signature": "Properties loadJMSProperties()", "full_signature": "protected Properties loadJMSProperties()", "class_method_signature": "DefaultRegisterableItemsFactory.loadJMSProperties()", "testcase": false, "constructor": false}], "file": "jbpm-runtime-manager/src/main/java/org/jbpm/runtime/manager/impl/DefaultRegisterableItemsFactory.java"}, "focal_method": {"identifier": "getProcessEventListeners", "parameters": "(RuntimeEngine runtime)", "modifiers": "@Override public", "return": "List<ProcessEventListener>", "body": "@Override\n    public List<ProcessEventListener> getProcessEventListeners(RuntimeEngine runtime) {\n        KieSession ksession = ((InternalRuntimeEngine) runtime).internalGetKieSession();\n        List<ProcessEventListener> defaultListeners = new ArrayList<ProcessEventListener>();\n        DeploymentDescriptor descriptor = getRuntimeManager().getDeploymentDescriptor();\n        if (descriptor == null) {\n        \t// register JPAWorkingMemoryDBLogger\n\t        AbstractAuditLogger logger = AuditLoggerFactory.newJPAInstance(ksession.getEnvironment());\n\t        logger.setBuilder(getAuditBuilder(runtime));\n\t        defaultListeners.add(logger);\n        } else if (descriptor.getAuditMode() == AuditMode.JPA) {\n        \t// register JPAWorkingMemoryDBLogger\n        \tAbstractAuditLogger logger = null;\n        \tif (descriptor.getPersistenceUnit().equals(descriptor.getAuditPersistenceUnit())) {\n        \t\tlogger = AuditLoggerFactory.newJPAInstance(ksession.getEnvironment());\n        \t} else {\n        \t\tEnvironment env = EnvironmentFactory.newEnvironment();\n        \t\tenv.set(EnvironmentName.ENTITY_MANAGER_FACTORY, EntityManagerFactoryManager.get().getOrCreate(descriptor.getAuditPersistenceUnit()));\n        \t\tlogger = AuditLoggerFactory.newJPAInstance(env);\n        \t}\n\t        \n\t        logger.setBuilder(getAuditBuilder(runtime));\n\t        defaultListeners.add(logger);\n        } else if (descriptor.getAuditMode() == AuditMode.JMS) {\n            try {\n                if (jmsLogger == null) {\n                    Properties properties = loadJMSProperties();\n                    logger.debug(\"Creating AsyncAuditLogProducer {}\", properties);\n\n                    jmsLogger = AuditLoggerFactory.newJMSInstance((Map) properties);\n                    jmsLogger.setBuilder(getAuditBuilder(runtime));\n                }\n                defaultListeners.add(jmsLogger);\n            } catch (IOException e) {\n                logger.error(\"Unable to load jms audit properties from {}\", \"/jbpm.audit.jms.properties\", e);\n            }\n        }\n        // add any custom listeners\n        defaultListeners.addAll(super.getProcessEventListeners(runtime));\n        // add listeners from descriptor\n        defaultListeners.addAll(getEventListenerFromDescriptor(runtime, ProcessEventListener.class));        \n        return defaultListeners;\n    }", "signature": "List<ProcessEventListener> getProcessEventListeners(RuntimeEngine runtime)", "full_signature": "@Override public List<ProcessEventListener> getProcessEventListeners(RuntimeEngine runtime)", "class_method_signature": "DefaultRegisterableItemsFactory.getProcessEventListeners(RuntimeEngine runtime)", "testcase": false, "constructor": false, "invocations": ["internalGetKieSession", "getDeploymentDescriptor", "getRuntimeManager", "newJPAInstance", "getEnvironment", "setBuilder", "getAuditBuilder", "add", "getAuditMode", "equals", "getPersistenceUnit", "getAuditPersistenceUnit", "newJPAInstance", "getEnvironment", "newEnvironment", "set", "getOrCreate", "get", "getAuditPersistenceUnit", "newJPAInstance", "setBuilder", "getAuditBuilder", "add", "getAuditMode", "loadJMSProperties", "debug", "newJMSInstance", "setBuilder", "getAuditBuilder", "add", "error", "addAll", "getProcessEventListeners", "addAll", "getEventListenerFromDescriptor"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}