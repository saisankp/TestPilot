{"test_class": {"identifier": "HibernateDatabaseInfoProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private DhisConfigurationProvider config;", "modifier": "@Mock\n    private", "type": "DhisConfigurationProvider", "declarator": "config", "var_name": "config"}, {"original_string": "@Mock\n    private JdbcOperations jdbcTemplate;", "modifier": "@Mock\n    private", "type": "JdbcOperations", "declarator": "jdbcTemplate", "var_name": "jdbcTemplate"}, {"original_string": "private MockEnvironment environment = new MockEnvironment();", "modifier": "private", "type": "MockEnvironment", "declarator": "environment = new MockEnvironment()", "var_name": "environment"}, {"original_string": "@Mock\n    private ResultSet resultSet;", "modifier": "@Mock\n    private", "type": "ResultSet", "declarator": "resultSet", "var_name": "resultSet"}, {"original_string": "private HibernateDatabaseInfoProvider provider;", "modifier": "private", "type": "HibernateDatabaseInfoProvider", "declarator": "provider", "var_name": "provider"}, {"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}], "file": "dhis-2/dhis-support/dhis-support-system/src/test/java/org/hisp/dhis/system/database/HibernateDatabaseInfoProviderTest.java"}, "test_case": {"identifier": "init", "parameters": "()", "modifiers": "@Test @SuppressWarnings( \"unchecked\" ) public", "return": "void", "body": "@Test\n    @SuppressWarnings( \"unchecked\" )\n    public void init() throws SQLException\n    {\n        Mockito.when( jdbcTemplate.queryForObject( Mockito.eq( \"select postgis_full_version();\" ), Mockito.eq( String.class ) ) ).thenReturn( \"2\" );\n\n        Mockito.when( config.getProperty( Mockito.eq( ConfigurationKey.CONNECTION_URL ) ) ).thenReturn( \"jdbc:postgresql:dhisx\" );\n        Mockito.when( config.getProperty( Mockito.eq( ConfigurationKey.CONNECTION_USERNAME ) ) ).thenReturn( \"dhisy\" );\n        Mockito.when( config.getProperty( Mockito.eq( ConfigurationKey.CONNECTION_PASSWORD ) ) ).thenReturn( \"dhisz\" );\n\n        Mockito.when( resultSet.getString( Mockito.eq( 1 ) ) ).thenReturn( \"PostgreSQL 10.5, compiled by Visual C++ build 1800, 64-bit\" );\n        Mockito.when( resultSet.getString( Mockito.eq( 2 ) ) ).thenReturn( \"dhis2\" );\n        Mockito.when( resultSet.getString( Mockito.eq( 3 ) ) ).thenReturn( \"dhis\" );\n\n        Mockito.when( jdbcTemplate.queryForObject( Mockito.eq( \"select version(),current_catalog,current_user\" ), Mockito.isA( RowMapper.class ) ) )\n            .thenAnswer( invocation -> ( (RowMapper<?>) invocation.getArgument( 1 ) ).mapRow( resultSet, 1 ) );\n\n        provider.init();\n\n        final DatabaseInfo databaseInfo = provider.getDatabaseInfo();\n        Assert.assertEquals( \"jdbc:postgresql:dhisx\", databaseInfo.getUrl() );\n        Assert.assertEquals( \"dhis2\", databaseInfo.getName() );\n        Assert.assertEquals( \"dhis\", databaseInfo.getUser() );\n        Assert.assertEquals( \"dhisz\", databaseInfo.getPassword() );\n        Assert.assertEquals( \"PostgreSQL 10.5\", databaseInfo.getDatabaseVersion() );\n        Assert.assertTrue( databaseInfo.isSpatialSupport() );\n    }", "signature": "void init()", "full_signature": "@Test @SuppressWarnings( \"unchecked\" ) public void init()", "class_method_signature": "HibernateDatabaseInfoProviderTest.init()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "queryForObject", "eq", "eq", "thenReturn", "when", "getProperty", "eq", "thenReturn", "when", "getProperty", "eq", "thenReturn", "when", "getProperty", "eq", "thenReturn", "when", "getString", "eq", "thenReturn", "when", "getString", "eq", "thenReturn", "when", "getString", "eq", "thenAnswer", "when", "queryForObject", "eq", "isA", "mapRow", "getArgument", "init", "getDatabaseInfo", "assertEquals", "getUrl", "assertEquals", "getName", "assertEquals", "getUser", "assertEquals", "getPassword", "assertEquals", "getDatabaseVersion", "assertTrue", "isSpatialSupport"]}, "focal_class": {"identifier": "HibernateDatabaseInfoProvider", "superclass": "", "interfaces": "implements DatabaseInfoProvider", "fields": [{"original_string": "private static final String POSTGIS_MISSING_ERROR = \"Postgis extension is not installed. Execute \\\"CREATE EXTENSION postgis;\\\" as a superuser and start the application again.\";", "modifier": "private static final", "type": "String", "declarator": "POSTGIS_MISSING_ERROR = \"Postgis extension is not installed. Execute \\\"CREATE EXTENSION postgis;\\\" as a superuser and start the application again.\"", "var_name": "POSTGIS_MISSING_ERROR"}, {"original_string": "private static final String POSTGRES_VERSION_REGEX = \"^([a-zA-Z_-]+ \\\\d+\\\\.+\\\\d+)?[ ,].*$\";", "modifier": "private static final", "type": "String", "declarator": "POSTGRES_VERSION_REGEX = \"^([a-zA-Z_-]+ \\\\d+\\\\.+\\\\d+)?[ ,].*$\"", "var_name": "POSTGRES_VERSION_REGEX"}, {"original_string": "private static final Pattern POSTGRES_VERSION_PATTERN = Pattern.compile( POSTGRES_VERSION_REGEX );", "modifier": "private static final", "type": "Pattern", "declarator": "POSTGRES_VERSION_PATTERN = Pattern.compile( POSTGRES_VERSION_REGEX )", "var_name": "POSTGRES_VERSION_PATTERN"}, {"original_string": "private DatabaseInfo info;", "modifier": "private", "type": "DatabaseInfo", "declarator": "info", "var_name": "info"}, {"original_string": "private final DhisConfigurationProvider config;", "modifier": "private final", "type": "DhisConfigurationProvider", "declarator": "config", "var_name": "config"}, {"original_string": "private final JdbcOperations jdbcTemplate;", "modifier": "private final", "type": "JdbcOperations", "declarator": "jdbcTemplate", "var_name": "jdbcTemplate"}, {"original_string": "private final Environment environment;", "modifier": "private final", "type": "Environment", "declarator": "environment", "var_name": "environment"}], "methods": [{"identifier": "HibernateDatabaseInfoProvider", "parameters": "( DhisConfigurationProvider config, JdbcOperations jdbcTemplate,\n        Environment environment )", "modifiers": "public", "return": "", "signature": " HibernateDatabaseInfoProvider( DhisConfigurationProvider config, JdbcOperations jdbcTemplate,\n        Environment environment )", "full_signature": "public  HibernateDatabaseInfoProvider( DhisConfigurationProvider config, JdbcOperations jdbcTemplate,\n        Environment environment )", "class_method_signature": "HibernateDatabaseInfoProvider.HibernateDatabaseInfoProvider( DhisConfigurationProvider config, JdbcOperations jdbcTemplate,\n        Environment environment )", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct public void init()", "class_method_signature": "HibernateDatabaseInfoProvider.init()", "testcase": false, "constructor": false}, {"identifier": "getDatabaseInfo", "parameters": "()", "modifiers": "@Override public", "return": "DatabaseInfo", "signature": "DatabaseInfo getDatabaseInfo()", "full_signature": "@Override public DatabaseInfo getDatabaseInfo()", "class_method_signature": "HibernateDatabaseInfoProvider.getDatabaseInfo()", "testcase": false, "constructor": false}, {"identifier": "isInMemory", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isInMemory()", "full_signature": "@Override public boolean isInMemory()", "class_method_signature": "HibernateDatabaseInfoProvider.isInMemory()", "testcase": false, "constructor": false}, {"identifier": "getInternalDatabaseInfo", "parameters": "()", "modifiers": "@Nonnull private", "return": "InternalDatabaseInfo", "signature": "InternalDatabaseInfo getInternalDatabaseInfo()", "full_signature": "@Nonnull private InternalDatabaseInfo getInternalDatabaseInfo()", "class_method_signature": "HibernateDatabaseInfoProvider.getInternalDatabaseInfo()", "testcase": false, "constructor": false}, {"identifier": "checkDatabaseConnectivity", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkDatabaseConnectivity()", "full_signature": "private void checkDatabaseConnectivity()", "class_method_signature": "HibernateDatabaseInfoProvider.checkDatabaseConnectivity()", "testcase": false, "constructor": false}, {"identifier": "isSpatialSupport", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isSpatialSupport()", "full_signature": "private boolean isSpatialSupport()", "class_method_signature": "HibernateDatabaseInfoProvider.isSpatialSupport()", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-support/dhis-support-system/src/main/java/org/hisp/dhis/system/database/HibernateDatabaseInfoProvider.java"}, "focal_method": {"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "body": "@PostConstruct\n    public void init()\n    {\n        checkDatabaseConnectivity();\n\n        boolean spatialSupport = false;\n\n        // Check if postgis is installed, fail startup if not\n\n        if ( !SystemUtils.isTestRun(environment.getActiveProfiles()) )\n        {\n            spatialSupport = isSpatialSupport();\n\n            if ( !spatialSupport )\n            {\n                log.error( POSTGIS_MISSING_ERROR );\n                throw new IllegalStateException( POSTGIS_MISSING_ERROR );\n            }\n        }\n\n        String url = config.getProperty( ConfigurationKey.CONNECTION_URL );\n        String user = config.getProperty( ConfigurationKey.CONNECTION_USERNAME );\n        String password = config.getProperty( ConfigurationKey.CONNECTION_PASSWORD );\n        InternalDatabaseInfo internalDatabaseInfo = getInternalDatabaseInfo();\n\n        info = new DatabaseInfo();\n        info.setName( internalDatabaseInfo.getDatabase() );\n        info.setUser( StringUtils.defaultIfEmpty( internalDatabaseInfo.getUser(), user ) );\n        info.setPassword( password );\n        info.setUrl( url );\n        info.setSpatialSupport( spatialSupport );\n        info.setDatabaseVersion( internalDatabaseInfo.getVersion() );\n    }", "signature": "void init()", "full_signature": "@PostConstruct public void init()", "class_method_signature": "HibernateDatabaseInfoProvider.init()", "testcase": false, "constructor": false, "invocations": ["checkDatabaseConnectivity", "isTestRun", "getActiveProfiles", "isSpatialSupport", "error", "getProperty", "getProperty", "getProperty", "getInternalDatabaseInfo", "setName", "getDatabase", "setUser", "defaultIfEmpty", "getUser", "setPassword", "setUrl", "setSpatialSupport", "setDatabaseVersion", "getVersion"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}