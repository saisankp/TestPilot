{"test_class": {"identifier": "S3FileTest", "superclass": "", "interfaces": "", "fields": [], "file": "kstore-s3/src/test/java/org/kstore/impl/S3FileTest.java"}, "test_case": {"identifier": "testWithProtocol", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testWithProtocol() {\n\t\tS3File file = new S3File(\"s3a://root/folder\");\n\t\tAssert.assertEquals(\"root\", file.getBucket());\n\t}", "signature": "void testWithProtocol()", "full_signature": "@Test public void testWithProtocol()", "class_method_signature": "S3FileTest.testWithProtocol()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getBucket"]}, "focal_class": {"identifier": "S3File", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LogManager.getLogger(S3File.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager.getLogger(S3File.class)", "var_name": "LOGGER"}, {"original_string": "private static final int RETRY = 3;", "modifier": "private static final", "type": "int", "declarator": "RETRY = 3", "var_name": "RETRY"}, {"original_string": "static final long MAX_SIZE = 4 * 1024 * 1024 * 1024;", "modifier": "static final", "type": "long", "declarator": "MAX_SIZE = 4 * 1024 * 1024 * 1024", "var_name": "MAX_SIZE"}, {"original_string": "private static final String KEY_ACCESS = \"s3.access.key\";", "modifier": "private static final", "type": "String", "declarator": "KEY_ACCESS = \"s3.access.key\"", "var_name": "KEY_ACCESS"}, {"original_string": "private static final String KEY_SECRET = \"s3.secret.key\";", "modifier": "private static final", "type": "String", "declarator": "KEY_SECRET = \"s3.secret.key\"", "var_name": "KEY_SECRET"}, {"original_string": "private static AmazonS3 CLIENT;", "modifier": "private static", "type": "AmazonS3", "declarator": "CLIENT", "var_name": "CLIENT"}, {"original_string": "private static TransferManager transfers;", "modifier": "private static", "type": "TransferManager", "declarator": "transfers", "var_name": "transfers"}, {"original_string": "private final String bucket;", "modifier": "private final", "type": "String", "declarator": "bucket", "var_name": "bucket"}, {"original_string": "private final String key;", "modifier": "private final", "type": "String", "declarator": "key", "var_name": "key"}, {"original_string": "private File local;", "modifier": "private", "type": "File", "declarator": "local", "var_name": "local"}, {"original_string": "private static final AtomicLong OPENED_STREAMS = new AtomicLong();", "modifier": "private static final", "type": "AtomicLong", "declarator": "OPENED_STREAMS = new AtomicLong()", "var_name": "OPENED_STREAMS"}, {"original_string": "private static final AtomicLong CLOSED_STREAMS = new AtomicLong();", "modifier": "private static final", "type": "AtomicLong", "declarator": "CLOSED_STREAMS = new AtomicLong()", "var_name": "CLOSED_STREAMS"}, {"original_string": "private static final AtomicLong MAX_CONCURRENT_STREAMS = new AtomicLong();", "modifier": "private static final", "type": "AtomicLong", "declarator": "MAX_CONCURRENT_STREAMS = new AtomicLong()", "var_name": "MAX_CONCURRENT_STREAMS"}], "methods": [{"identifier": "S3File", "parameters": "(String fullPath)", "modifiers": "public", "return": "", "signature": " S3File(String fullPath)", "full_signature": "public  S3File(String fullPath)", "class_method_signature": "S3File.S3File(String fullPath)", "testcase": false, "constructor": true}, {"identifier": "getBucket", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getBucket()", "full_signature": "public String getBucket()", "class_method_signature": "S3File.getBucket()", "testcase": false, "constructor": false}, {"identifier": "initClient", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void initClient()", "full_signature": "public static void initClient()", "class_method_signature": "S3File.initClient()", "testcase": false, "constructor": false}, {"identifier": "setAmazonClient", "parameters": "(AmazonS3 s3)", "modifiers": "public static", "return": "void", "signature": "void setAmazonClient(AmazonS3 s3)", "full_signature": "public static void setAmazonClient(AmazonS3 s3)", "class_method_signature": "S3File.setAmazonClient(AmazonS3 s3)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(int retry)", "modifiers": "private", "return": "InputStream", "signature": "InputStream open(int retry)", "full_signature": "private InputStream open(int retry)", "class_method_signature": "S3File.open(int retry)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "()", "modifiers": "public", "return": "InputStream", "signature": "InputStream open()", "full_signature": "public InputStream open()", "class_method_signature": "S3File.open()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "()", "modifiers": "public", "return": "OutputStream", "signature": "OutputStream create()", "full_signature": "public OutputStream create()", "class_method_signature": "S3File.create()", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "()", "modifiers": "public", "return": "OutputStream", "signature": "OutputStream append()", "full_signature": "public OutputStream append()", "class_method_signature": "S3File.append()", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void delete()", "full_signature": "public void delete()", "class_method_signature": "S3File.delete()", "testcase": false, "constructor": false}, {"identifier": "rename", "parameters": "(S3File dstKey)", "modifiers": "public", "return": "void", "signature": "void rename(S3File dstKey)", "full_signature": "public void rename(S3File dstKey)", "class_method_signature": "S3File.rename(S3File dstKey)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void save()", "full_signature": "public void save()", "class_method_signature": "S3File.save()", "testcase": false, "constructor": false}, {"identifier": "showStats", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void showStats()", "full_signature": "private static void showStats()", "class_method_signature": "S3File.showStats()", "testcase": false, "constructor": false}], "file": "kstore-s3/src/main/java/org/kstore/impl/S3File.java"}, "focal_method": {"identifier": "getBucket", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getBucket() {\n\t\treturn bucket;\n\t}", "signature": "String getBucket()", "full_signature": "public String getBucket()", "class_method_signature": "S3File.getBucket()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 147673645, "url": "https://github.com/openkstore/kstore", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 7, "size": 71, "license": "licensed"}}