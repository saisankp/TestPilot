{"test_class": {"identifier": "VanillaChronicleConfigTest", "superclass": "extends VanillaChronicleTestBase", "interfaces": "", "fields": [], "file": "chronicle/src/test/java/net/openhft/chronicle/VanillaChronicleConfigTest.java"}, "test_case": {"identifier": "testVanillaChronicleConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVanillaChronicleConfig()  {\n        try {\n            System.out.print(\"Check entriesPerCycle >= 256: \");\n            new VanillaChronicleConfig().entriesPerCycle(128);\n            fail(\"expected IllegalArgumentException (entriesPerCycle >= 256\");\n        } catch(IllegalArgumentException e) {\n            System.out.print(\" OK\\n\");\n        }\n\n        try {\n            System.out.print(\"Check entriesPerCycle <= 1L << 48: \");\n            new VanillaChronicleConfig().entriesPerCycle(1L << 56);\n            fail(\"expected IllegalArgumentException (entriesPerCycle <= 1L << 48)\");\n        } catch(IllegalArgumentException e) {\n            System.out.print(\" OK\\n\");\n        }\n\n        try {\n            System.out.print(\"Check entriesPerCycle is a power of 2: \");\n            new VanillaChronicleConfig().entriesPerCycle(257);\n            fail(\"expected IllegalArgumentException (entriesPerCycle power of 2)\");\n        } catch(IllegalArgumentException e) {\n            System.out.print(\" OK\\n\");\n        }\n\n        new VanillaChronicleConfig().entriesPerCycle(512);\n        new VanillaChronicleConfig().entriesPerCycle(1024);\n    }", "signature": "void testVanillaChronicleConfig()", "full_signature": "@Test public void testVanillaChronicleConfig()", "class_method_signature": "VanillaChronicleConfigTest.testVanillaChronicleConfig()", "testcase": true, "constructor": false, "invocations": ["print", "entriesPerCycle", "fail", "print", "print", "entriesPerCycle", "fail", "print", "print", "entriesPerCycle", "fail", "print", "entriesPerCycle", "entriesPerCycle"]}, "focal_class": {"identifier": "VanillaChronicleConfig", "superclass": "", "interfaces": "implements Cloneable", "fields": [{"original_string": "public static final VanillaChronicleConfig DEFAULT = new VanillaChronicleConfig();", "modifier": "public static final", "type": "VanillaChronicleConfig", "declarator": "DEFAULT = new VanillaChronicleConfig()", "var_name": "DEFAULT"}, {"original_string": "public static final long MIN_CYCLE_LENGTH = TimeUnit.HOURS.toMillis(1);", "modifier": "public static final", "type": "long", "declarator": "MIN_CYCLE_LENGTH = TimeUnit.HOURS.toMillis(1)", "var_name": "MIN_CYCLE_LENGTH"}, {"original_string": "public static final int THREAD_ID_BITS = Integer.getInteger(\"os.max.pid.bits\", Jvm.PID_BITS);", "modifier": "public static final", "type": "int", "declarator": "THREAD_ID_BITS = Integer.getInteger(\"os.max.pid.bits\", Jvm.PID_BITS)", "var_name": "THREAD_ID_BITS"}, {"original_string": "public static final long THREAD_ID_MASK = -1L >>> -THREAD_ID_BITS;", "modifier": "public static final", "type": "long", "declarator": "THREAD_ID_MASK = -1L >>> -THREAD_ID_BITS", "var_name": "THREAD_ID_MASK"}, {"original_string": "public static final int INDEX_DATA_OFFSET_BITS = 64 - THREAD_ID_BITS;", "modifier": "public static final", "type": "int", "declarator": "INDEX_DATA_OFFSET_BITS = 64 - THREAD_ID_BITS", "var_name": "INDEX_DATA_OFFSET_BITS"}, {"original_string": "public static final long INDEX_DATA_OFFSET_MASK = -1L >>> -INDEX_DATA_OFFSET_BITS;", "modifier": "public static final", "type": "long", "declarator": "INDEX_DATA_OFFSET_MASK = -1L >>> -INDEX_DATA_OFFSET_BITS", "var_name": "INDEX_DATA_OFFSET_MASK"}, {"original_string": "private String cycleFormat = \"yyyyMMdd\";", "modifier": "private", "type": "String", "declarator": "cycleFormat = \"yyyyMMdd\"", "var_name": "cycleFormat"}, {"original_string": "private int cycleLength = 24 * 60 * 60 * 1000;", "modifier": "private", "type": "int", "declarator": "cycleLength = 24 * 60 * 60 * 1000", "var_name": "cycleLength"}, {"original_string": "private long indexBlockSize = 16L << 20;", "modifier": "private", "type": "long", "declarator": "indexBlockSize = 16L << 20", "var_name": "indexBlockSize"}, {"original_string": "private long dataBlockSize = 64L << 20;", "modifier": "private", "type": "long", "declarator": "dataBlockSize = 64L << 20", "var_name": "dataBlockSize"}, {"original_string": "private int defaultMessageSize = 128 << 10;", "modifier": "private", "type": "int", "declarator": "defaultMessageSize = 128 << 10", "var_name": "defaultMessageSize"}, {"original_string": "private long entriesPerCycle = 1L << 40;", "modifier": "private", "type": "long", "declarator": "entriesPerCycle = 1L << 40", "var_name": "entriesPerCycle"}, {"original_string": "private boolean synchronous = false;", "modifier": "private", "type": "boolean", "declarator": "synchronous = false", "var_name": "synchronous"}, {"original_string": "private boolean cleanupOnClose = false;", "modifier": "private", "type": "boolean", "declarator": "cleanupOnClose = false", "var_name": "cleanupOnClose"}, {"original_string": "private int dataCacheCapacity = 32;", "modifier": "private", "type": "int", "declarator": "dataCacheCapacity = 32", "var_name": "dataCacheCapacity"}, {"original_string": "private int indexCacheCapacity = 32;", "modifier": "private", "type": "int", "declarator": "indexCacheCapacity = 32", "var_name": "indexCacheCapacity"}, {"original_string": "private boolean useCheckedExcerpt = false;", "modifier": "private", "type": "boolean", "declarator": "useCheckedExcerpt = false", "var_name": "useCheckedExcerpt"}], "methods": [{"identifier": "cycleFormat", "parameters": "(String cycleFormat)", "modifiers": "public", "return": "VanillaChronicleConfig", "signature": "VanillaChronicleConfig cycleFormat(String cycleFormat)", "full_signature": "public VanillaChronicleConfig cycleFormat(String cycleFormat)", "class_method_signature": "VanillaChronicleConfig.cycleFormat(String cycleFormat)", "testcase": false, "constructor": false}, {"identifier": "cycleFormat", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String cycleFormat()", "full_signature": "public String cycleFormat()", "class_method_signature": "VanillaChronicleConfig.cycleFormat()", "testcase": false, "constructor": false}, {"identifier": "cycleLength", "parameters": "(int cycleLength)", "modifiers": "public", "return": "VanillaChronicleConfig", "signature": "VanillaChronicleConfig cycleLength(int cycleLength)", "full_signature": "public VanillaChronicleConfig cycleLength(int cycleLength)", "class_method_signature": "VanillaChronicleConfig.cycleLength(int cycleLength)", "testcase": false, "constructor": false}, {"identifier": "cycleLength", "parameters": "(int cycleLength, boolean check)", "modifiers": "public", "return": "VanillaChronicleConfig", "signature": "VanillaChronicleConfig cycleLength(int cycleLength, boolean check)", "full_signature": "public VanillaChronicleConfig cycleLength(int cycleLength, boolean check)", "class_method_signature": "VanillaChronicleConfig.cycleLength(int cycleLength, boolean check)", "testcase": false, "constructor": false}, {"identifier": "cycleLength", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int cycleLength()", "full_signature": "public int cycleLength()", "class_method_signature": "VanillaChronicleConfig.cycleLength()", "testcase": false, "constructor": false}, {"identifier": "indexBlockSize", "parameters": "(long indexBlockSize)", "modifiers": "public", "return": "VanillaChronicleConfig", "signature": "VanillaChronicleConfig indexBlockSize(long indexBlockSize)", "full_signature": "public VanillaChronicleConfig indexBlockSize(long indexBlockSize)", "class_method_signature": "VanillaChronicleConfig.indexBlockSize(long indexBlockSize)", "testcase": false, "constructor": false}, {"identifier": "indexBlockSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long indexBlockSize()", "full_signature": "public long indexBlockSize()", "class_method_signature": "VanillaChronicleConfig.indexBlockSize()", "testcase": false, "constructor": false}, {"identifier": "dataBlockSize", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long dataBlockSize()", "full_signature": "public long dataBlockSize()", "class_method_signature": "VanillaChronicleConfig.dataBlockSize()", "testcase": false, "constructor": false}, {"identifier": "dataBlockSize", "parameters": "(int dataBlockSize)", "modifiers": "public", "return": "VanillaChronicleConfig", "signature": "VanillaChronicleConfig dataBlockSize(int dataBlockSize)", "full_signature": "public VanillaChronicleConfig dataBlockSize(int dataBlockSize)", "class_method_signature": "VanillaChronicleConfig.dataBlockSize(int dataBlockSize)", "testcase": false, "constructor": false}, {"identifier": "entriesPerCycle", "parameters": "(long entriesPerCycle)", "modifiers": "public", "return": "VanillaChronicleConfig", "signature": "VanillaChronicleConfig entriesPerCycle(long entriesPerCycle)", "full_signature": "public VanillaChronicleConfig entriesPerCycle(long entriesPerCycle)", "class_method_signature": "VanillaChronicleConfig.entriesPerCycle(long entriesPerCycle)", "testcase": false, "constructor": false}, {"identifier": "entriesPerCycle", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long entriesPerCycle()", "full_signature": "public long entriesPerCycle()", "class_method_signature": "VanillaChronicleConfig.entriesPerCycle()", "testcase": false, "constructor": false}, {"identifier": "defaultMessageSize", "parameters": "(int defaultMessageSize)", "modifiers": "public", "return": "VanillaChronicleConfig", "signature": "VanillaChronicleConfig defaultMessageSize(int defaultMessageSize)", "full_signature": "public VanillaChronicleConfig defaultMessageSize(int defaultMessageSize)", "class_method_signature": "VanillaChronicleConfig.defaultMessageSize(int defaultMessageSize)", "testcase": false, "constructor": false}, {"identifier": "defaultMessageSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int defaultMessageSize()", "full_signature": "public int defaultMessageSize()", "class_method_signature": "VanillaChronicleConfig.defaultMessageSize()", "testcase": false, "constructor": false}, {"identifier": "synchronous", "parameters": "(boolean synchronous)", "modifiers": "public", "return": "VanillaChronicleConfig", "signature": "VanillaChronicleConfig synchronous(boolean synchronous)", "full_signature": "public VanillaChronicleConfig synchronous(boolean synchronous)", "class_method_signature": "VanillaChronicleConfig.synchronous(boolean synchronous)", "testcase": false, "constructor": false}, {"identifier": "synchronous", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean synchronous()", "full_signature": "public boolean synchronous()", "class_method_signature": "VanillaChronicleConfig.synchronous()", "testcase": false, "constructor": false}, {"identifier": "cleanupOnClose", "parameters": "(boolean cleanupOnClose)", "modifiers": "public", "return": "VanillaChronicleConfig", "signature": "VanillaChronicleConfig cleanupOnClose(boolean cleanupOnClose)", "full_signature": "public VanillaChronicleConfig cleanupOnClose(boolean cleanupOnClose)", "class_method_signature": "VanillaChronicleConfig.cleanupOnClose(boolean cleanupOnClose)", "testcase": false, "constructor": false}, {"identifier": "cleanupOnClose", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean cleanupOnClose()", "full_signature": "public boolean cleanupOnClose()", "class_method_signature": "VanillaChronicleConfig.cleanupOnClose()", "testcase": false, "constructor": false}, {"identifier": "dataCacheCapacity", "parameters": "(int dataCacheCapacity)", "modifiers": "public", "return": "VanillaChronicleConfig", "signature": "VanillaChronicleConfig dataCacheCapacity(int dataCacheCapacity)", "full_signature": "public VanillaChronicleConfig dataCacheCapacity(int dataCacheCapacity)", "class_method_signature": "VanillaChronicleConfig.dataCacheCapacity(int dataCacheCapacity)", "testcase": false, "constructor": false}, {"identifier": "dataCacheCapacity", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int dataCacheCapacity()", "full_signature": "public int dataCacheCapacity()", "class_method_signature": "VanillaChronicleConfig.dataCacheCapacity()", "testcase": false, "constructor": false}, {"identifier": "indexCacheCapacity", "parameters": "(int indexCacheCapacity)", "modifiers": "public", "return": "VanillaChronicleConfig", "signature": "VanillaChronicleConfig indexCacheCapacity(int indexCacheCapacity)", "full_signature": "public VanillaChronicleConfig indexCacheCapacity(int indexCacheCapacity)", "class_method_signature": "VanillaChronicleConfig.indexCacheCapacity(int indexCacheCapacity)", "testcase": false, "constructor": false}, {"identifier": "indexCacheCapacity", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int indexCacheCapacity()", "full_signature": "public int indexCacheCapacity()", "class_method_signature": "VanillaChronicleConfig.indexCacheCapacity()", "testcase": false, "constructor": false}, {"identifier": "useCheckedExcerpt", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean useCheckedExcerpt()", "full_signature": "public boolean useCheckedExcerpt()", "class_method_signature": "VanillaChronicleConfig.useCheckedExcerpt()", "testcase": false, "constructor": false}, {"identifier": "useCheckedExcerpt", "parameters": "(boolean useCheckedExcerpt)", "modifiers": "public", "return": "VanillaChronicleConfig", "signature": "VanillaChronicleConfig useCheckedExcerpt(boolean useCheckedExcerpt)", "full_signature": "public VanillaChronicleConfig useCheckedExcerpt(boolean useCheckedExcerpt)", "class_method_signature": "VanillaChronicleConfig.useCheckedExcerpt(boolean useCheckedExcerpt)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@NotNull @SuppressWarnings(\"CloneDoesntDeclareCloneNotSupportedException\") @Override public", "return": "VanillaChronicleConfig", "signature": "VanillaChronicleConfig clone()", "full_signature": "@NotNull @SuppressWarnings(\"CloneDoesntDeclareCloneNotSupportedException\") @Override public VanillaChronicleConfig clone()", "class_method_signature": "VanillaChronicleConfig.clone()", "testcase": false, "constructor": false}], "file": "chronicle/src/main/java/net/openhft/chronicle/VanillaChronicleConfig.java"}, "focal_method": {"identifier": "entriesPerCycle", "parameters": "(long entriesPerCycle)", "modifiers": "public", "return": "VanillaChronicleConfig", "body": "public VanillaChronicleConfig entriesPerCycle(long entriesPerCycle) {\n        if(entriesPerCycle < 256) {\n            throw new IllegalArgumentException(\"EntriesPerCycle must be at least 256\");\n        }\n\n        if(entriesPerCycle > 1L << 48) {\n            throw new IllegalArgumentException(\"EntriesPerCycle must not exceed 1L << 48 (\" + (1L << 48) + \")\");\n        }\n\n        if(!((entriesPerCycle & -entriesPerCycle) == entriesPerCycle)) {\n            throw new IllegalArgumentException(\"EntriesPerCycle must be a power of 2\");\n        }\n\n        this.entriesPerCycle = entriesPerCycle;\n        return this;\n    }", "signature": "VanillaChronicleConfig entriesPerCycle(long entriesPerCycle)", "full_signature": "public VanillaChronicleConfig entriesPerCycle(long entriesPerCycle)", "class_method_signature": "VanillaChronicleConfig.entriesPerCycle(long entriesPerCycle)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 23783621, "url": "https://github.com/peter-lawrey/Java-Chronicle-OLD", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 33, "size": 1275, "license": "licensed"}}