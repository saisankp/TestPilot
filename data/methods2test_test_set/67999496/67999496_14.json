{"test_class": {"identifier": "ImgscalrImageManipulatorTest", "superclass": "extends AbstractImageTest", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ImgscalrImageManipulatorTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ImgscalrImageManipulatorTest.class)", "var_name": "log"}, {"original_string": "private ImgscalrImageManipulator manipulator;", "modifier": "private", "type": "ImgscalrImageManipulator", "declarator": "manipulator", "var_name": "manipulator"}], "file": "services/image-imgscalr/src/test/java/com/gentics/mesh/image/ImgscalrImageManipulatorTest.java"}, "test_case": {"identifier": "testTikaMetadata", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testTikaMetadata() throws IOException, TikaException {\n\t\tInputStream ins = getClass().getResourceAsStream(\"/pictures/12382975864_09e6e069e7_o.jpg\");\n\t\tMap<String, String> metadata = manipulator.getMetadata(ins).blockingGet();\n\t\tassertTrue(!metadata.isEmpty());\n\t\tfor (String key : metadata.keySet()) {\n\t\t\tSystem.out.println(key + \"=\" + metadata.get(key));\n\t\t}\n\t}", "signature": "void testTikaMetadata()", "full_signature": "@Test public void testTikaMetadata()", "class_method_signature": "ImgscalrImageManipulatorTest.testTikaMetadata()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "blockingGet", "getMetadata", "assertTrue", "isEmpty", "keySet", "println", "get"]}, "focal_class": {"identifier": "ImgscalrImageManipulator", "superclass": "extends AbstractImageManipulator", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(ImgscalrImageManipulator.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ImgscalrImageManipulator.class)", "var_name": "log"}, {"original_string": "private FocalPointModifier focalPointModifier;", "modifier": "private", "type": "FocalPointModifier", "declarator": "focalPointModifier", "var_name": "focalPointModifier"}, {"original_string": "private WorkerExecutor workerPool;", "modifier": "private", "type": "WorkerExecutor", "declarator": "workerPool", "var_name": "workerPool"}, {"original_string": "private final BootstrapInitializer boot;", "modifier": "private final", "type": "BootstrapInitializer", "declarator": "boot", "var_name": "boot"}], "methods": [{"identifier": "ImgscalrImageManipulator", "parameters": "(Vertx vertx, MeshOptions options, BootstrapInitializer boot)", "modifiers": "public", "return": "", "signature": " ImgscalrImageManipulator(Vertx vertx, MeshOptions options, BootstrapInitializer boot)", "full_signature": "public  ImgscalrImageManipulator(Vertx vertx, MeshOptions options, BootstrapInitializer boot)", "class_method_signature": "ImgscalrImageManipulator.ImgscalrImageManipulator(Vertx vertx, MeshOptions options, BootstrapInitializer boot)", "testcase": false, "constructor": true}, {"identifier": "ImgscalrImageManipulator", "parameters": "(Vertx vertx, ImageManipulatorOptions options, BootstrapInitializer boot)", "modifiers": "", "return": "", "signature": " ImgscalrImageManipulator(Vertx vertx, ImageManipulatorOptions options, BootstrapInitializer boot)", "full_signature": "  ImgscalrImageManipulator(Vertx vertx, ImageManipulatorOptions options, BootstrapInitializer boot)", "class_method_signature": "ImgscalrImageManipulator.ImgscalrImageManipulator(Vertx vertx, ImageManipulatorOptions options, BootstrapInitializer boot)", "testcase": false, "constructor": true}, {"identifier": "crop", "parameters": "(BufferedImage originalImage, ImageRect cropArea)", "modifiers": "protected", "return": "BufferedImage", "signature": "BufferedImage crop(BufferedImage originalImage, ImageRect cropArea)", "full_signature": "protected BufferedImage crop(BufferedImage originalImage, ImageRect cropArea)", "class_method_signature": "ImgscalrImageManipulator.crop(BufferedImage originalImage, ImageRect cropArea)", "testcase": false, "constructor": false}, {"identifier": "resizeIfRequested", "parameters": "(BufferedImage originalImage, ImageManipulationParameters parameters)", "modifiers": "protected", "return": "BufferedImage", "signature": "BufferedImage resizeIfRequested(BufferedImage originalImage, ImageManipulationParameters parameters)", "full_signature": "protected BufferedImage resizeIfRequested(BufferedImage originalImage, ImageManipulationParameters parameters)", "class_method_signature": "ImgscalrImageManipulator.resizeIfRequested(BufferedImage originalImage, ImageManipulationParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "getImageReader", "parameters": "(ImageInputStream input)", "modifiers": "private", "return": "ImageReader", "signature": "ImageReader getImageReader(ImageInputStream input)", "full_signature": "private ImageReader getImageReader(ImageInputStream input)", "class_method_signature": "ImgscalrImageManipulator.getImageReader(ImageInputStream input)", "testcase": false, "constructor": false}, {"identifier": "getImageWriter", "parameters": "(ImageReader reader, ImageOutputStream out)", "modifiers": "private", "return": "ImageWriter", "signature": "ImageWriter getImageWriter(ImageReader reader, ImageOutputStream out)", "full_signature": "private ImageWriter getImageWriter(ImageReader reader, ImageOutputStream out)", "class_method_signature": "ImgscalrImageManipulator.getImageWriter(ImageReader reader, ImageOutputStream out)", "testcase": false, "constructor": false}, {"identifier": "cropAndResize", "parameters": "(BufferedImage image, ImageManipulationParameters parameters)", "modifiers": "protected", "return": "BufferedImage", "signature": "BufferedImage cropAndResize(BufferedImage image, ImageManipulationParameters parameters)", "full_signature": "protected BufferedImage cropAndResize(BufferedImage image, ImageManipulationParameters parameters)", "class_method_signature": "ImgscalrImageManipulator.cropAndResize(BufferedImage image, ImageManipulationParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "handleResize", "parameters": "(Binary binary, ImageManipulationParameters parameters)", "modifiers": "@Override public", "return": "Single<String>", "signature": "Single<String> handleResize(Binary binary, ImageManipulationParameters parameters)", "full_signature": "@Override public Single<String> handleResize(Binary binary, ImageManipulationParameters parameters)", "class_method_signature": "ImgscalrImageManipulator.handleResize(Binary binary, ImageManipulationParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "getImageWriteparams", "parameters": "(String extension)", "modifiers": "private", "return": "ImageWriteParam", "signature": "ImageWriteParam getImageWriteparams(String extension)", "full_signature": "private ImageWriteParam getImageWriteparams(String extension)", "class_method_signature": "ImgscalrImageManipulator.getImageWriteparams(String extension)", "testcase": false, "constructor": false}, {"identifier": "isJpeg", "parameters": "(String extension)", "modifiers": "private", "return": "boolean", "signature": "boolean isJpeg(String extension)", "full_signature": "private boolean isJpeg(String extension)", "class_method_signature": "ImgscalrImageManipulator.isJpeg(String extension)", "testcase": false, "constructor": false}, {"identifier": "calculateDominantColor", "parameters": "(BufferedImage image)", "modifiers": "@Override public", "return": "int[]", "signature": "int[] calculateDominantColor(BufferedImage image)", "full_signature": "@Override public int[] calculateDominantColor(BufferedImage image)", "class_method_signature": "ImgscalrImageManipulator.calculateDominantColor(BufferedImage image)", "testcase": false, "constructor": false}, {"identifier": "getMetadata", "parameters": "(InputStream ins)", "modifiers": "@Override public", "return": "Single<Map<String, String>>", "signature": "Single<Map<String, String>> getMetadata(InputStream ins)", "full_signature": "@Override public Single<Map<String, String>> getMetadata(InputStream ins)", "class_method_signature": "ImgscalrImageManipulator.getMetadata(InputStream ins)", "testcase": false, "constructor": false}], "file": "services/image-imgscalr/src/main/java/com/gentics/mesh/image/ImgscalrImageManipulator.java"}, "focal_method": {"identifier": "getMetadata", "parameters": "(InputStream ins)", "modifiers": "@Override public", "return": "Single<Map<String, String>>", "body": "@Override\n\tpublic Single<Map<String, String>> getMetadata(InputStream ins) {\n\t\treturn Single.create(sub -> {\n\t\t\tParser parser = new AutoDetectParser();\n\t\t\tBodyContentHandler handler = new BodyContentHandler();\n\t\t\tMetadata metadata = new Metadata();\n\t\t\tParseContext context = new ParseContext();\n\t\t\ttry {\n\t\t\t\tparser.parse(ins, handler, metadata, context);\n\t\t\t\tMap<String, String> map = new HashMap<>();\n\t\t\t\tString[] metadataNames = metadata.names();\n\n\t\t\t\tfor (String name : metadataNames) {\n\t\t\t\t\tmap.put(name, metadata.get(name));\n\t\t\t\t}\n\n\t\t\t\tsub.onSuccess(map);\n\n\t\t\t} catch (Exception e) {\n\t\t\t\tsub.onError(e);\n\t\t\t}\n\t\t\t// ins.close();\n\t\t});\n\t}", "signature": "Single<Map<String, String>> getMetadata(InputStream ins)", "full_signature": "@Override public Single<Map<String, String>> getMetadata(InputStream ins)", "class_method_signature": "ImgscalrImageManipulator.getMetadata(InputStream ins)", "testcase": false, "constructor": false, "invocations": ["create", "parse", "names", "put", "get", "onSuccess", "onError"]}, "repository": {"repo_id": 67999496, "url": "https://github.com/gentics/mesh", "stars": 412, "created": "9/12/2016 10:28:41 AM +00:00", "updates": "2020-01-27T10:25:42+00:00", "fork": "False", "license": "licensed"}}