{"test_class": {"identifier": "AndroidProfilerToolWindowTest", "superclass": "", "interfaces": "", "fields": [], "file": "profilers-android/testSrc/com/android/tools/idea/profilers/AndroidProfilerToolWindowTest.java"}, "test_case": {"identifier": "testDeviceDisplayName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDeviceDisplayName() {\n    IDevice device = mock(IDevice.class);\n    when(device.getSerialNumber()).thenReturn(\"Serial\");\n    when(device.getProperty(IDevice.PROP_DEVICE_MANUFACTURER)).thenReturn(\"Manufacturer\");\n    when(device.getProperty(IDevice.PROP_DEVICE_MODEL)).thenReturn(\"Model\");\n    assertThat(AndroidProfilerToolWindow.getDeviceDisplayName(device)).isEqualTo(\"Manufacturer Model\");\n\n    IDevice deviceWithEmptyManufacturer = mock(IDevice.class);\n    when(deviceWithEmptyManufacturer.getSerialNumber()).thenReturn(\"Serial\");\n    when(deviceWithEmptyManufacturer.getProperty(IDevice.PROP_DEVICE_MODEL)).thenReturn(\"Model\");\n    assertThat(AndroidProfilerToolWindow.getDeviceDisplayName(deviceWithEmptyManufacturer)).isEqualTo(\"Model\");\n\n\n    IDevice deviceWithSerialInModel = mock(IDevice.class);\n    when(deviceWithSerialInModel.getSerialNumber()).thenReturn(\"Serial\");\n    when(deviceWithSerialInModel.getProperty(IDevice.PROP_DEVICE_MANUFACTURER)).thenReturn(\"Manufacturer\");\n    when(deviceWithSerialInModel.getProperty(IDevice.PROP_DEVICE_MODEL)).thenReturn(\"Model-Serial\");\n    assertThat(AndroidProfilerToolWindow.getDeviceDisplayName(deviceWithSerialInModel)).isEqualTo(\"Manufacturer Model\");\n  }", "signature": "void testDeviceDisplayName()", "full_signature": "@Test public void testDeviceDisplayName()", "class_method_signature": "AndroidProfilerToolWindowTest.testDeviceDisplayName()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getSerialNumber", "thenReturn", "when", "getProperty", "thenReturn", "when", "getProperty", "isEqualTo", "assertThat", "getDeviceDisplayName", "mock", "thenReturn", "when", "getSerialNumber", "thenReturn", "when", "getProperty", "isEqualTo", "assertThat", "getDeviceDisplayName", "mock", "thenReturn", "when", "getSerialNumber", "thenReturn", "when", "getProperty", "thenReturn", "when", "getProperty", "isEqualTo", "assertThat", "getDeviceDisplayName"]}, "focal_class": {"identifier": "AndroidProfilerToolWindow", "superclass": "", "interfaces": "implements Disposable", "fields": [{"original_string": "static final Key<PreferredProcessInfo> LAST_RUN_APP_INFO = Key.create(\"Profiler.Last.Run.App\");", "modifier": "static final", "type": "Key<PreferredProcessInfo>", "declarator": "LAST_RUN_APP_INFO = Key.create(\"Profiler.Last.Run.App\")", "var_name": "LAST_RUN_APP_INFO"}, {"original_string": "private static final String HIDE_STOP_PROMPT = \"profilers.hide.stop.prompt\";", "modifier": "private static final", "type": "String", "declarator": "HIDE_STOP_PROMPT = \"profilers.hide.stop.prompt\"", "var_name": "HIDE_STOP_PROMPT"}, {"original_string": "@NotNull\n  private static final Notification OPEN_FILE_FAILURE_NOTIFICATION = new Notification.Builder(\n    \"Failed to open file\",\n    \"The profiler was unable to open the selected file. Please try opening it \" +\n    \"again or select a different file.\")\n    .setSeverity(Notification.Severity.ERROR)\n    .build();", "modifier": "@NotNull\n  private static final", "type": "Notification", "declarator": "OPEN_FILE_FAILURE_NOTIFICATION = new Notification.Builder(\n    \"Failed to open file\",\n    \"The profiler was unable to open the selected file. Please try opening it \" +\n    \"again or select a different file.\")\n    .setSeverity(Notification.Severity.ERROR)\n    .build()", "var_name": "OPEN_FILE_FAILURE_NOTIFICATION"}, {"original_string": "private static final String NO_CLIENT_TITLE = \"Initialization failed\";", "modifier": "private static final", "type": "String", "declarator": "NO_CLIENT_TITLE = \"Initialization failed\"", "var_name": "NO_CLIENT_TITLE"}, {"original_string": "private static final String NO_CLIENT_MESSAGE = \"To start the profiler, close all other Android Studio projects.\";", "modifier": "private static final", "type": "String", "declarator": "NO_CLIENT_MESSAGE = \"To start the profiler, close all other Android Studio projects.\"", "var_name": "NO_CLIENT_MESSAGE"}, {"original_string": "@NotNull\n  private final JPanel myPanel;", "modifier": "@NotNull\n  private final", "type": "JPanel", "declarator": "myPanel", "var_name": "myPanel"}, {"original_string": "@Nullable\n  private StudioProfilersWrapper myProfilersWrapper;", "modifier": "@Nullable\n  private", "type": "StudioProfilersWrapper", "declarator": "myProfilersWrapper", "var_name": "myProfilersWrapper"}, {"original_string": "@NotNull\n  private final ToolWindow myWindow;", "modifier": "@NotNull\n  private final", "type": "ToolWindow", "declarator": "myWindow", "var_name": "myWindow"}, {"original_string": "@NotNull\n  private final Project myProject;", "modifier": "@NotNull\n  private final", "type": "Project", "declarator": "myProject", "var_name": "myProject"}, {"original_string": "@NotNull\n  private final IntellijProfilerServices myIdeProfilerServices;", "modifier": "@NotNull\n  private final", "type": "IntellijProfilerServices", "declarator": "myIdeProfilerServices", "var_name": "myIdeProfilerServices"}], "methods": [{"identifier": "AndroidProfilerToolWindow", "parameters": "(@NotNull ToolWindow window, @NotNull Project project)", "modifiers": "public", "return": "", "signature": " AndroidProfilerToolWindow(@NotNull ToolWindow window, @NotNull Project project)", "full_signature": "public  AndroidProfilerToolWindow(@NotNull ToolWindow window, @NotNull Project project)", "class_method_signature": "AndroidProfilerToolWindow.AndroidProfilerToolWindow(@NotNull ToolWindow window, @NotNull Project project)", "testcase": false, "constructor": true}, {"identifier": "tryInitializeProfilers", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean tryInitializeProfilers()", "full_signature": "private boolean tryInitializeProfilers()", "class_method_signature": "AndroidProfilerToolWindow.tryInitializeProfilers()", "testcase": false, "constructor": false}, {"identifier": "buildInitializationFailedUi", "parameters": "()", "modifiers": "@NotNull private", "return": "JComponent", "signature": "JComponent buildInitializationFailedUi()", "full_signature": "@NotNull private JComponent buildInitializationFailedUi()", "class_method_signature": "AndroidProfilerToolWindow.buildInitializationFailedUi()", "testcase": false, "constructor": false}, {"identifier": "getProfilers", "parameters": "()", "modifiers": "@Nullable", "return": "StudioProfilers", "signature": "StudioProfilers getProfilers()", "full_signature": "@Nullable StudioProfilers getProfilers()", "class_method_signature": "AndroidProfilerToolWindow.getProfilers()", "testcase": false, "constructor": false}, {"identifier": "profile", "parameters": "(@NotNull PreferredProcessInfo processInfo)", "modifiers": "public", "return": "void", "signature": "void profile(@NotNull PreferredProcessInfo processInfo)", "full_signature": "public void profile(@NotNull PreferredProcessInfo processInfo)", "class_method_signature": "AndroidProfilerToolWindow.profile(@NotNull PreferredProcessInfo processInfo)", "testcase": false, "constructor": false}, {"identifier": "disableAutoProfiling", "parameters": "()", "modifiers": "", "return": "void", "signature": "void disableAutoProfiling()", "full_signature": " void disableAutoProfiling()", "class_method_signature": "AndroidProfilerToolWindow.disableAutoProfiling()", "testcase": false, "constructor": false}, {"identifier": "openFile", "parameters": "(@NotNull VirtualFile file)", "modifiers": "public", "return": "void", "signature": "void openFile(@NotNull VirtualFile file)", "full_signature": "public void openFile(@NotNull VirtualFile file)", "class_method_signature": "AndroidProfilerToolWindow.openFile(@NotNull VirtualFile file)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "AndroidProfilerToolWindow.dispose()", "testcase": false, "constructor": false}, {"identifier": "getComponent", "parameters": "()", "modifiers": "@NotNull public", "return": "JComponent", "signature": "JComponent getComponent()", "full_signature": "@NotNull public JComponent getComponent()", "class_method_signature": "AndroidProfilerToolWindow.getComponent()", "testcase": false, "constructor": false}, {"identifier": "getPreferredProcessName", "parameters": "(@NotNull Project project)", "modifiers": "@Nullable private static", "return": "String", "signature": "String getPreferredProcessName(@NotNull Project project)", "full_signature": "@Nullable private static String getPreferredProcessName(@NotNull Project project)", "class_method_signature": "AndroidProfilerToolWindow.getPreferredProcessName(@NotNull Project project)", "testcase": false, "constructor": false}, {"identifier": "getModuleName", "parameters": "(@NotNull Module module)", "modifiers": "@Nullable static", "return": "String", "signature": "String getModuleName(@NotNull Module module)", "full_signature": "@Nullable static String getModuleName(@NotNull Module module)", "class_method_signature": "AndroidProfilerToolWindow.getModuleName(@NotNull Module module)", "testcase": false, "constructor": false}, {"identifier": "getDeviceDisplayName", "parameters": "(@NotNull IDevice device)", "modifiers": "@NotNull static", "return": "String", "signature": "String getDeviceDisplayName(@NotNull IDevice device)", "full_signature": "@NotNull static String getDeviceDisplayName(@NotNull IDevice device)", "class_method_signature": "AndroidProfilerToolWindow.getDeviceDisplayName(@NotNull IDevice device)", "testcase": false, "constructor": false}], "file": "profilers-android/src/com/android/tools/idea/profilers/AndroidProfilerToolWindow.java"}, "focal_method": {"identifier": "getDeviceDisplayName", "parameters": "(@NotNull IDevice device)", "modifiers": "@NotNull static", "return": "String", "body": "@NotNull\n  static String getDeviceDisplayName(@NotNull IDevice device) {\n    StringBuilder deviceNameBuilder = new StringBuilder();\n    String manufacturer = TransportServiceProxy.getDeviceManufacturer(device);\n    String model = TransportServiceProxy.getDeviceModel(device);\n    String serial = device.getSerialNumber();\n    String suffix = String.format(\"-%s\", serial);\n    if (model.endsWith(suffix)) {\n      model = model.substring(0, model.length() - suffix.length());\n    }\n    if (!StringUtil.isEmpty(manufacturer)) {\n      deviceNameBuilder.append(manufacturer);\n      deviceNameBuilder.append(\" \");\n    }\n    deviceNameBuilder.append(model);\n\n    return deviceNameBuilder.toString();\n  }", "signature": "String getDeviceDisplayName(@NotNull IDevice device)", "full_signature": "@NotNull static String getDeviceDisplayName(@NotNull IDevice device)", "class_method_signature": "AndroidProfilerToolWindow.getDeviceDisplayName(@NotNull IDevice device)", "testcase": false, "constructor": false, "invocations": ["getDeviceManufacturer", "getDeviceModel", "getSerialNumber", "format", "endsWith", "substring", "length", "length", "isEmpty", "append", "append", "append", "toString"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}