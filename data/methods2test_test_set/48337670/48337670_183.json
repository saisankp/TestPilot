{"test_class": {"identifier": "ExtensibleTrustManagerImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private X509Certificate[] chain;", "modifier": "private", "type": "X509Certificate[]", "declarator": "chain", "var_name": "chain"}, {"original_string": "private ExtensibleTrustManagerImpl subject;", "modifier": "private", "type": "ExtensibleTrustManagerImpl", "declarator": "subject", "var_name": "subject"}, {"original_string": "private @Mock TlsTrustManagerProvider trustmanagerProvider;", "modifier": "private @Mock", "type": "TlsTrustManagerProvider", "declarator": "trustmanagerProvider", "var_name": "trustmanagerProvider"}, {"original_string": "private @Mock TlsTrustManagerProvider trustmanagerProviderHostPort;", "modifier": "private @Mock", "type": "TlsTrustManagerProvider", "declarator": "trustmanagerProviderHostPort", "var_name": "trustmanagerProviderHostPort"}, {"original_string": "private @Mock X509ExtendedTrustManager trustmanager;", "modifier": "private @Mock", "type": "X509ExtendedTrustManager", "declarator": "trustmanager", "var_name": "trustmanager"}, {"original_string": "private @Mock X509ExtendedTrustManager trustmanager2;", "modifier": "private @Mock", "type": "X509ExtendedTrustManager", "declarator": "trustmanager2", "var_name": "trustmanager2"}, {"original_string": "private @Mock X509ExtendedTrustManager defaultTrustManager;", "modifier": "private @Mock", "type": "X509ExtendedTrustManager", "declarator": "defaultTrustManager", "var_name": "defaultTrustManager"}, {"original_string": "private @Mock SSLEngine sslEngine;", "modifier": "private @Mock", "type": "SSLEngine", "declarator": "sslEngine", "var_name": "sslEngine"}, {"original_string": "private @Mock X509Certificate topOfChain;", "modifier": "private @Mock", "type": "X509Certificate", "declarator": "topOfChain", "var_name": "topOfChain"}, {"original_string": "private @Mock X509Certificate bottomOfChain;", "modifier": "private @Mock", "type": "X509Certificate", "declarator": "bottomOfChain", "var_name": "bottomOfChain"}], "file": "bundles/org.openhab.core.io.net/src/test/java/org/openhab/core/io/net/http/internal/ExtensibleTrustManagerImplTest.java"}, "test_case": {"identifier": "shouldBeResilientAgainstNullSubjectAlternativeNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldBeResilientAgainstNullSubjectAlternativeNames()\n            throws CertificateException, IllegalAccessException, NoSuchFieldException, SecurityException {\n        writeField(subject, \"defaultTrustManager\", defaultTrustManager, true);\n\n        when(topOfChain.getSubjectX500Principal())\n                .thenReturn(new X500Principal(\"CN=example.com, OU=Smarthome, O=Eclipse, C=DE\"));\n        when(topOfChain.getSubjectAlternativeNames()).thenReturn(null);\n\n        subject.checkClientTrusted(chain, \"just\");\n\n        verify(defaultTrustManager).checkClientTrusted(chain, \"just\", (Socket) null);\n        verifyNoMoreInteractions(trustmanager);\n    }", "signature": "void shouldBeResilientAgainstNullSubjectAlternativeNames()", "full_signature": "@Test public void shouldBeResilientAgainstNullSubjectAlternativeNames()", "class_method_signature": "ExtensibleTrustManagerImplTest.shouldBeResilientAgainstNullSubjectAlternativeNames()", "testcase": true, "constructor": false, "invocations": ["writeField", "thenReturn", "when", "getSubjectX500Principal", "thenReturn", "when", "getSubjectAlternativeNames", "checkClientTrusted", "checkClientTrusted", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "ExtensibleTrustManagerImpl", "superclass": "extends X509ExtendedTrustManager", "interfaces": "implements ExtensibleTrustManager", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(ExtensibleTrustManagerImpl.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ExtensibleTrustManagerImpl.class)", "var_name": "logger"}, {"original_string": "private static final Queue<X509ExtendedTrustManager> EMPTY_QUEUE = new ConcurrentLinkedQueue<>();", "modifier": "private static final", "type": "Queue<X509ExtendedTrustManager>", "declarator": "EMPTY_QUEUE = new ConcurrentLinkedQueue<>()", "var_name": "EMPTY_QUEUE"}, {"original_string": "private final X509ExtendedTrustManager defaultTrustManager = TrustManagerUtil.keyStoreToTrustManager(null);", "modifier": "private final", "type": "X509ExtendedTrustManager", "declarator": "defaultTrustManager = TrustManagerUtil.keyStoreToTrustManager(null)", "var_name": "defaultTrustManager"}, {"original_string": "private final Map<String, Queue<X509ExtendedTrustManager>> linkedTrustManager = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, Queue<X509ExtendedTrustManager>>", "declarator": "linkedTrustManager = new ConcurrentHashMap<>()", "var_name": "linkedTrustManager"}, {"original_string": "private final Map<TlsCertificateProvider, X509ExtendedTrustManager> mappingFromTlsCertificateProvider = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<TlsCertificateProvider, X509ExtendedTrustManager>", "declarator": "mappingFromTlsCertificateProvider = new ConcurrentHashMap<>()", "var_name": "mappingFromTlsCertificateProvider"}], "methods": [{"identifier": "checkClientTrusted", "parameters": "(X509Certificate[] chain, String authType)", "modifiers": "@Override public", "return": "void", "signature": "void checkClientTrusted(X509Certificate[] chain, String authType)", "full_signature": "@Override public void checkClientTrusted(X509Certificate[] chain, String authType)", "class_method_signature": "ExtensibleTrustManagerImpl.checkClientTrusted(X509Certificate[] chain, String authType)", "testcase": false, "constructor": false}, {"identifier": "checkServerTrusted", "parameters": "(X509Certificate[] chain, String authType)", "modifiers": "@Override public", "return": "void", "signature": "void checkServerTrusted(X509Certificate[] chain, String authType)", "full_signature": "@Override public void checkServerTrusted(X509Certificate[] chain, String authType)", "class_method_signature": "ExtensibleTrustManagerImpl.checkServerTrusted(X509Certificate[] chain, String authType)", "testcase": false, "constructor": false}, {"identifier": "getAcceptedIssuers", "parameters": "()", "modifiers": "@Override public", "return": "X509Certificate[]", "signature": "X509Certificate[] getAcceptedIssuers()", "full_signature": "@Override public X509Certificate[] getAcceptedIssuers()", "class_method_signature": "ExtensibleTrustManagerImpl.getAcceptedIssuers()", "testcase": false, "constructor": false}, {"identifier": "checkClientTrusted", "parameters": "(X509Certificate[] chain, String authType, Socket socket)", "modifiers": "@Override public", "return": "void", "signature": "void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket)", "full_signature": "@Override public void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket)", "class_method_signature": "ExtensibleTrustManagerImpl.checkClientTrusted(X509Certificate[] chain, String authType, Socket socket)", "testcase": false, "constructor": false}, {"identifier": "checkClientTrusted", "parameters": "(X509Certificate[] chain, String authType, SSLEngine sslEngine)", "modifiers": "@Override public", "return": "void", "signature": "void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine sslEngine)", "full_signature": "@Override public void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine sslEngine)", "class_method_signature": "ExtensibleTrustManagerImpl.checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine sslEngine)", "testcase": false, "constructor": false}, {"identifier": "checkServerTrusted", "parameters": "(X509Certificate[] chain, String authType, Socket socket)", "modifiers": "@Override public", "return": "void", "signature": "void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket)", "full_signature": "@Override public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket)", "class_method_signature": "ExtensibleTrustManagerImpl.checkServerTrusted(X509Certificate[] chain, String authType, Socket socket)", "testcase": false, "constructor": false}, {"identifier": "checkServerTrusted", "parameters": "(X509Certificate[] chain, String authType, SSLEngine sslEngine)", "modifiers": "@Override public", "return": "void", "signature": "void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine sslEngine)", "full_signature": "@Override public void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine sslEngine)", "class_method_signature": "ExtensibleTrustManagerImpl.checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine sslEngine)", "testcase": false, "constructor": false}, {"identifier": "getLinkedTrustMananger", "parameters": "(X509Certificate[] chain, SSLEngine sslEngine)", "modifiers": "private", "return": "X509ExtendedTrustManager", "signature": "X509ExtendedTrustManager getLinkedTrustMananger(X509Certificate[] chain, SSLEngine sslEngine)", "full_signature": "private X509ExtendedTrustManager getLinkedTrustMananger(X509Certificate[] chain, SSLEngine sslEngine)", "class_method_signature": "ExtensibleTrustManagerImpl.getLinkedTrustMananger(X509Certificate[] chain, SSLEngine sslEngine)", "testcase": false, "constructor": false}, {"identifier": "getLinkedTrustMananger", "parameters": "(X509Certificate[] chain)", "modifiers": "private", "return": "X509ExtendedTrustManager", "signature": "X509ExtendedTrustManager getLinkedTrustMananger(X509Certificate[] chain)", "full_signature": "private X509ExtendedTrustManager getLinkedTrustMananger(X509Certificate[] chain)", "class_method_signature": "ExtensibleTrustManagerImpl.getLinkedTrustMananger(X509Certificate[] chain)", "testcase": false, "constructor": false}, {"identifier": "getSubjectAlternatives", "parameters": "(X509Certificate[] chain)", "modifiers": "private", "return": "Collection<List<?>>", "signature": "Collection<List<?>> getSubjectAlternatives(X509Certificate[] chain)", "full_signature": "private Collection<List<?>> getSubjectAlternatives(X509Certificate[] chain)", "class_method_signature": "ExtensibleTrustManagerImpl.getSubjectAlternatives(X509Certificate[] chain)", "testcase": false, "constructor": false}, {"identifier": "getCommonName", "parameters": "(X509Certificate x509Certificate)", "modifiers": "private", "return": "String", "signature": "String getCommonName(X509Certificate x509Certificate)", "full_signature": "private String getCommonName(X509Certificate x509Certificate)", "class_method_signature": "ExtensibleTrustManagerImpl.getCommonName(X509Certificate x509Certificate)", "testcase": false, "constructor": false}, {"identifier": "addTlsCertificateProvider", "parameters": "(TlsCertificateProvider tlsCertificateProvider)", "modifiers": "@Override @Reference(cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC) public", "return": "void", "signature": "void addTlsCertificateProvider(TlsCertificateProvider tlsCertificateProvider)", "full_signature": "@Override @Reference(cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC) public void addTlsCertificateProvider(TlsCertificateProvider tlsCertificateProvider)", "class_method_signature": "ExtensibleTrustManagerImpl.addTlsCertificateProvider(TlsCertificateProvider tlsCertificateProvider)", "testcase": false, "constructor": false}, {"identifier": "removeTlsCertificateProvider", "parameters": "(TlsCertificateProvider tlsCertificateProvider)", "modifiers": "@Override public", "return": "void", "signature": "void removeTlsCertificateProvider(TlsCertificateProvider tlsCertificateProvider)", "full_signature": "@Override public void removeTlsCertificateProvider(TlsCertificateProvider tlsCertificateProvider)", "class_method_signature": "ExtensibleTrustManagerImpl.removeTlsCertificateProvider(TlsCertificateProvider tlsCertificateProvider)", "testcase": false, "constructor": false}, {"identifier": "addTlsTrustManagerProvider", "parameters": "(TlsTrustManagerProvider tlsTrustManagerProvider)", "modifiers": "@Override @Reference(cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC) public", "return": "void", "signature": "void addTlsTrustManagerProvider(TlsTrustManagerProvider tlsTrustManagerProvider)", "full_signature": "@Override @Reference(cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC) public void addTlsTrustManagerProvider(TlsTrustManagerProvider tlsTrustManagerProvider)", "class_method_signature": "ExtensibleTrustManagerImpl.addTlsTrustManagerProvider(TlsTrustManagerProvider tlsTrustManagerProvider)", "testcase": false, "constructor": false}, {"identifier": "removeTlsTrustManagerProvider", "parameters": "(TlsTrustManagerProvider tlsTrustManagerProvider)", "modifiers": "@Override public", "return": "void", "signature": "void removeTlsTrustManagerProvider(TlsTrustManagerProvider tlsTrustManagerProvider)", "full_signature": "@Override public void removeTlsTrustManagerProvider(TlsTrustManagerProvider tlsTrustManagerProvider)", "class_method_signature": "ExtensibleTrustManagerImpl.removeTlsTrustManagerProvider(TlsTrustManagerProvider tlsTrustManagerProvider)", "testcase": false, "constructor": false}, {"identifier": "addLinkedTrustManager", "parameters": "(String hostName, X509ExtendedTrustManager trustManager)", "modifiers": "private", "return": "void", "signature": "void addLinkedTrustManager(String hostName, X509ExtendedTrustManager trustManager)", "full_signature": "private void addLinkedTrustManager(String hostName, X509ExtendedTrustManager trustManager)", "class_method_signature": "ExtensibleTrustManagerImpl.addLinkedTrustManager(String hostName, X509ExtendedTrustManager trustManager)", "testcase": false, "constructor": false}, {"identifier": "removeLinkedTrustManager", "parameters": "(String hostName, X509ExtendedTrustManager trustManager)", "modifiers": "private", "return": "void", "signature": "void removeLinkedTrustManager(String hostName, X509ExtendedTrustManager trustManager)", "full_signature": "private void removeLinkedTrustManager(String hostName, X509ExtendedTrustManager trustManager)", "class_method_signature": "ExtensibleTrustManagerImpl.removeLinkedTrustManager(String hostName, X509ExtendedTrustManager trustManager)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/http/internal/ExtensibleTrustManagerImpl.java"}, "focal_method": {"identifier": "checkClientTrusted", "parameters": "(X509Certificate[] chain, String authType)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        checkClientTrusted(chain, authType, (Socket) null);\n    }", "signature": "void checkClientTrusted(X509Certificate[] chain, String authType)", "full_signature": "@Override public void checkClientTrusted(X509Certificate[] chain, String authType)", "class_method_signature": "ExtensibleTrustManagerImpl.checkClientTrusted(X509Certificate[] chain, String authType)", "testcase": false, "constructor": false, "invocations": ["checkClientTrusted"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}