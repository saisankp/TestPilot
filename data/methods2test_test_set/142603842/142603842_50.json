{"test_class": {"identifier": "LocationRepositoryImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private LocationCrudRepository crudRepository;", "modifier": "@Mock\n    private", "type": "LocationCrudRepository", "declarator": "crudRepository", "var_name": "crudRepository"}, {"original_string": "@InjectMocks\n    private LocationRepositoryImpl repository;", "modifier": "@InjectMocks\n    private", "type": "LocationRepositoryImpl", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Captor\n    private ArgumentCaptor<LocationEntity> locationEntityCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<LocationEntity>", "declarator": "locationEntityCaptor", "var_name": "locationEntityCaptor"}, {"original_string": "private final Location testLocation = new Location(76, Coordinates.valueOf(1.2, 3.4), \"description\");", "modifier": "private final", "type": "Location", "declarator": "testLocation = new Location(76, Coordinates.valueOf(1.2, 3.4), \"description\")", "var_name": "testLocation"}], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/plugin/persistence/LocationRepositoryImplTest.java"}, "test_case": {"identifier": "should_create_location_and_generate_id", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void should_create_location_and_generate_id() {\n        // arrange\n        LocationEntity newEntity = locationEntity(testLocation);\n        when(crudRepository.save(locationEntityCaptor.capture())).thenReturn(newEntity);\n        Coordinates savedCoordinates = Coordinates.valueOf(0.00213, 32.777);\n        String savedDescription = \"new location\";\n\n        // act\n        Location newLocation = repository.createLocation(savedCoordinates, savedDescription);\n\n        // assert\n        // -- the correct values were used to save the entity\n        LocationEntity savedLocation = locationEntityCaptor.getValue();\n        assertThat(savedLocation.getLatitude()).isEqualTo(savedCoordinates.latitude());\n        assertThat(savedLocation.getLongitude()).isEqualTo(savedCoordinates.longitude());\n        assertThat(savedLocation.getDescription()).isEqualTo(savedDescription);\n\n        // -- created domain location is equal to the entity returned by repository.save()\n        // This may be confusing but that's the contract of Spring Repository API.\n        // The entity instance that is being saved is meant to be discarded. The returned instance should be used\n        // for further operations as the save() operation may update it (for example generate the ID).\n        assertThat(newLocation.id()).isEqualTo(newEntity.getId());\n        assertThat(newLocation.coordinates())\n                .isEqualTo(new Coordinates(newEntity.getLatitude(), newEntity.getLongitude()));\n        assertThat(newLocation.description()).isEqualTo(newEntity.getDescription());\n    }", "signature": "void should_create_location_and_generate_id()", "full_signature": "@Test void should_create_location_and_generate_id()", "class_method_signature": "LocationRepositoryImplTest.should_create_location_and_generate_id()", "testcase": true, "constructor": false, "invocations": ["locationEntity", "thenReturn", "when", "save", "capture", "valueOf", "createLocation", "getValue", "isEqualTo", "assertThat", "getLatitude", "latitude", "isEqualTo", "assertThat", "getLongitude", "longitude", "isEqualTo", "assertThat", "getDescription", "isEqualTo", "assertThat", "id", "getId", "isEqualTo", "assertThat", "coordinates", "getLatitude", "getLongitude", "isEqualTo", "assertThat", "description", "getDescription"]}, "focal_class": {"identifier": "LocationRepositoryImpl", "superclass": "", "interfaces": "implements LocationRepository", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(LocationRepositoryImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(LocationRepositoryImpl.class)", "var_name": "logger"}, {"original_string": "private final LocationCrudRepository repository;", "modifier": "private final", "type": "LocationCrudRepository", "declarator": "repository", "var_name": "repository"}], "methods": [{"identifier": "LocationRepositoryImpl", "parameters": "(LocationCrudRepository repository)", "modifiers": "@Autowired", "return": "", "signature": " LocationRepositoryImpl(LocationCrudRepository repository)", "full_signature": "@Autowired  LocationRepositoryImpl(LocationCrudRepository repository)", "class_method_signature": "LocationRepositoryImpl.LocationRepositoryImpl(LocationCrudRepository repository)", "testcase": false, "constructor": true}, {"identifier": "createLocation", "parameters": "(Coordinates coordinates, String description)", "modifiers": "@Override public", "return": "Location", "signature": "Location createLocation(Coordinates coordinates, String description)", "full_signature": "@Override public Location createLocation(Coordinates coordinates, String description)", "class_method_signature": "LocationRepositoryImpl.createLocation(Coordinates coordinates, String description)", "testcase": false, "constructor": false}, {"identifier": "locations", "parameters": "()", "modifiers": "@Override public", "return": "List<Location>", "signature": "List<Location> locations()", "full_signature": "@Override public List<Location> locations()", "class_method_signature": "LocationRepositoryImpl.locations()", "testcase": false, "constructor": false}, {"identifier": "removeLocation", "parameters": "(long id)", "modifiers": "@Override public", "return": "Location", "signature": "Location removeLocation(long id)", "full_signature": "@Override public Location removeLocation(long id)", "class_method_signature": "LocationRepositoryImpl.removeLocation(long id)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void removeAll()", "full_signature": "@Override public void removeAll()", "class_method_signature": "LocationRepositoryImpl.removeAll()", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(long locationId)", "modifiers": "@Override public", "return": "Optional<Location>", "signature": "Optional<Location> find(long locationId)", "full_signature": "@Override public Optional<Location> find(long locationId)", "class_method_signature": "LocationRepositoryImpl.find(long locationId)", "testcase": false, "constructor": false}, {"identifier": "toDomain", "parameters": "(LocationEntity locationEntity)", "modifiers": "private static", "return": "Location", "signature": "Location toDomain(LocationEntity locationEntity)", "full_signature": "private static Location toDomain(LocationEntity locationEntity)", "class_method_signature": "LocationRepositoryImpl.toDomain(LocationEntity locationEntity)", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/persistence/LocationRepositoryImpl.java"}, "focal_method": {"identifier": "createLocation", "parameters": "(Coordinates coordinates, String description)", "modifiers": "@Override public", "return": "Location", "body": "@Override\n    public Location createLocation(Coordinates coordinates, String description) {\n        LocationEntity locationEntity = repository.save(\n                new LocationEntity(0, coordinates.latitude(), coordinates.longitude(), description));\n        Location location = toDomain(locationEntity);\n        logger.info(\"Created location {}.\", location.fullDescription());\n        return location;\n    }", "signature": "Location createLocation(Coordinates coordinates, String description)", "full_signature": "@Override public Location createLocation(Coordinates coordinates, String description)", "class_method_signature": "LocationRepositoryImpl.createLocation(Coordinates coordinates, String description)", "testcase": false, "constructor": false, "invocations": ["save", "latitude", "longitude", "toDomain", "info", "fullDescription"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}