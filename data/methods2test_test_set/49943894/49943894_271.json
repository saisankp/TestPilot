{"test_class": {"identifier": "SshHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "utils/src/test/java/com/cloud/utils/ssh/SshHelperTest.java"}, "test_case": {"identifier": "doNotThrowSshExceptionIfConditionsStdout", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void doNotThrowSshExceptionIfConditionsStdout() throws SshException {\n        SshHelper.throwSshExceptionIfConditionsTimeout(ChannelCondition.STDOUT_DATA);\n    }", "signature": "void doNotThrowSshExceptionIfConditionsStdout()", "full_signature": "@Test public void doNotThrowSshExceptionIfConditionsStdout()", "class_method_signature": "SshHelperTest.doNotThrowSshExceptionIfConditionsStdout()", "testcase": true, "constructor": false, "invocations": ["throwSshExceptionIfConditionsTimeout"]}, "focal_class": {"identifier": "SshHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int DEFAULT_CONNECT_TIMEOUT = 180000;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_CONNECT_TIMEOUT = 180000", "var_name": "DEFAULT_CONNECT_TIMEOUT"}, {"original_string": "private static final int DEFAULT_KEX_TIMEOUT = 60000;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_KEX_TIMEOUT = 60000", "var_name": "DEFAULT_KEX_TIMEOUT"}, {"original_string": "private static final long WAITING_OPEN_SSH_SESSION = 1000;", "modifier": "private static final", "type": "long", "declarator": "WAITING_OPEN_SSH_SESSION = 1000", "var_name": "WAITING_OPEN_SSH_SESSION"}, {"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(SshHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(SshHelper.class)", "var_name": "s_logger"}], "methods": [{"identifier": "sshExecute", "parameters": "(String host, int port, String user, File pemKeyFile, String password, String command)", "modifiers": "public static", "return": "Pair<Boolean, String>", "signature": "Pair<Boolean, String> sshExecute(String host, int port, String user, File pemKeyFile, String password, String command)", "full_signature": "public static Pair<Boolean, String> sshExecute(String host, int port, String user, File pemKeyFile, String password, String command)", "class_method_signature": "SshHelper.sshExecute(String host, int port, String user, File pemKeyFile, String password, String command)", "testcase": false, "constructor": false}, {"identifier": "scpTo", "parameters": "(String host, int port, String user, File pemKeyFile, String password, String remoteTargetDirectory, String localFile, String fileMode)", "modifiers": "public static", "return": "void", "signature": "void scpTo(String host, int port, String user, File pemKeyFile, String password, String remoteTargetDirectory, String localFile, String fileMode)", "full_signature": "public static void scpTo(String host, int port, String user, File pemKeyFile, String password, String remoteTargetDirectory, String localFile, String fileMode)", "class_method_signature": "SshHelper.scpTo(String host, int port, String user, File pemKeyFile, String password, String remoteTargetDirectory, String localFile, String fileMode)", "testcase": false, "constructor": false}, {"identifier": "scpTo", "parameters": "(String host, int port, String user, File pemKeyFile, String password, String remoteTargetDirectory, byte[] data, String remoteFileName,\n            String fileMode)", "modifiers": "public static", "return": "void", "signature": "void scpTo(String host, int port, String user, File pemKeyFile, String password, String remoteTargetDirectory, byte[] data, String remoteFileName,\n            String fileMode)", "full_signature": "public static void scpTo(String host, int port, String user, File pemKeyFile, String password, String remoteTargetDirectory, byte[] data, String remoteFileName,\n            String fileMode)", "class_method_signature": "SshHelper.scpTo(String host, int port, String user, File pemKeyFile, String password, String remoteTargetDirectory, byte[] data, String remoteFileName,\n            String fileMode)", "testcase": false, "constructor": false}, {"identifier": "scpTo", "parameters": "(String host, int port, String user, File pemKeyFile, String password, String remoteTargetDirectory, String localFile, String fileMode,\n            int connectTimeoutInMs, int kexTimeoutInMs)", "modifiers": "public static", "return": "void", "signature": "void scpTo(String host, int port, String user, File pemKeyFile, String password, String remoteTargetDirectory, String localFile, String fileMode,\n            int connectTimeoutInMs, int kexTimeoutInMs)", "full_signature": "public static void scpTo(String host, int port, String user, File pemKeyFile, String password, String remoteTargetDirectory, String localFile, String fileMode,\n            int connectTimeoutInMs, int kexTimeoutInMs)", "class_method_signature": "SshHelper.scpTo(String host, int port, String user, File pemKeyFile, String password, String remoteTargetDirectory, String localFile, String fileMode,\n            int connectTimeoutInMs, int kexTimeoutInMs)", "testcase": false, "constructor": false}, {"identifier": "scpTo", "parameters": "(String host, int port, String user, File pemKeyFile, String password, String remoteTargetDirectory, byte[] data, String remoteFileName,\n            String fileMode, int connectTimeoutInMs, int kexTimeoutInMs)", "modifiers": "public static", "return": "void", "signature": "void scpTo(String host, int port, String user, File pemKeyFile, String password, String remoteTargetDirectory, byte[] data, String remoteFileName,\n            String fileMode, int connectTimeoutInMs, int kexTimeoutInMs)", "full_signature": "public static void scpTo(String host, int port, String user, File pemKeyFile, String password, String remoteTargetDirectory, byte[] data, String remoteFileName,\n            String fileMode, int connectTimeoutInMs, int kexTimeoutInMs)", "class_method_signature": "SshHelper.scpTo(String host, int port, String user, File pemKeyFile, String password, String remoteTargetDirectory, byte[] data, String remoteFileName,\n            String fileMode, int connectTimeoutInMs, int kexTimeoutInMs)", "testcase": false, "constructor": false}, {"identifier": "sshExecute", "parameters": "(String host, int port, String user, File pemKeyFile, String password, String command, int connectTimeoutInMs,\n            int kexTimeoutInMs,\n            int waitResultTimeoutInMs)", "modifiers": "public static", "return": "Pair<Boolean, String>", "signature": "Pair<Boolean, String> sshExecute(String host, int port, String user, File pemKeyFile, String password, String command, int connectTimeoutInMs,\n            int kexTimeoutInMs,\n            int waitResultTimeoutInMs)", "full_signature": "public static Pair<Boolean, String> sshExecute(String host, int port, String user, File pemKeyFile, String password, String command, int connectTimeoutInMs,\n            int kexTimeoutInMs,\n            int waitResultTimeoutInMs)", "class_method_signature": "SshHelper.sshExecute(String host, int port, String user, File pemKeyFile, String password, String command, int connectTimeoutInMs,\n            int kexTimeoutInMs,\n            int waitResultTimeoutInMs)", "testcase": false, "constructor": false}, {"identifier": "openConnectionSession", "parameters": "(Connection conn)", "modifiers": "protected static", "return": "Session", "signature": "Session openConnectionSession(Connection conn)", "full_signature": "protected static Session openConnectionSession(Connection conn)", "class_method_signature": "SshHelper.openConnectionSession(Connection conn)", "testcase": false, "constructor": false}, {"identifier": "canEndTheSshConnection", "parameters": "(int waitResultTimeoutInMs, com.trilead.ssh2.Session sess, int conditions)", "modifiers": "protected static", "return": "boolean", "signature": "boolean canEndTheSshConnection(int waitResultTimeoutInMs, com.trilead.ssh2.Session sess, int conditions)", "full_signature": "protected static boolean canEndTheSshConnection(int waitResultTimeoutInMs, com.trilead.ssh2.Session sess, int conditions)", "class_method_signature": "SshHelper.canEndTheSshConnection(int waitResultTimeoutInMs, com.trilead.ssh2.Session sess, int conditions)", "testcase": false, "constructor": false}, {"identifier": "throwSshExceptionIfConditionsTimeout", "parameters": "(int conditions)", "modifiers": "protected static", "return": "void", "signature": "void throwSshExceptionIfConditionsTimeout(int conditions)", "full_signature": "protected static void throwSshExceptionIfConditionsTimeout(int conditions)", "class_method_signature": "SshHelper.throwSshExceptionIfConditionsTimeout(int conditions)", "testcase": false, "constructor": false}, {"identifier": "isChannelConditionEof", "parameters": "(int conditions)", "modifiers": "protected static", "return": "boolean", "signature": "boolean isChannelConditionEof(int conditions)", "full_signature": "protected static boolean isChannelConditionEof(int conditions)", "class_method_signature": "SshHelper.isChannelConditionEof(int conditions)", "testcase": false, "constructor": false}, {"identifier": "throwSshExceptionIfStdoutOrStdeerIsNull", "parameters": "(InputStream stdout, InputStream stderr)", "modifiers": "protected static", "return": "void", "signature": "void throwSshExceptionIfStdoutOrStdeerIsNull(InputStream stdout, InputStream stderr)", "full_signature": "protected static void throwSshExceptionIfStdoutOrStdeerIsNull(InputStream stdout, InputStream stderr)", "class_method_signature": "SshHelper.throwSshExceptionIfStdoutOrStdeerIsNull(InputStream stdout, InputStream stderr)", "testcase": false, "constructor": false}], "file": "utils/src/main/java/com/cloud/utils/ssh/SshHelper.java"}, "focal_method": {"identifier": "throwSshExceptionIfConditionsTimeout", "parameters": "(int conditions)", "modifiers": "protected static", "return": "void", "body": "protected static void throwSshExceptionIfConditionsTimeout(int conditions) throws SshException {\n        if ((conditions & ChannelCondition.TIMEOUT) != 0) {\n            String msg = \"Timed out in waiting for SSH execution exit status\";\n            s_logger.error(msg);\n            throw new SshException(msg);\n        }\n    }", "signature": "void throwSshExceptionIfConditionsTimeout(int conditions)", "full_signature": "protected static void throwSshExceptionIfConditionsTimeout(int conditions)", "class_method_signature": "SshHelper.throwSshExceptionIfConditionsTimeout(int conditions)", "testcase": false, "constructor": false, "invocations": ["error"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}