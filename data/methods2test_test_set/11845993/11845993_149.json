{"test_class": {"identifier": "MonitoredHttpRequestTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ConfigurationRegistry configuration;", "modifier": "private", "type": "ConfigurationRegistry", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private io.opentracing.mock.MockTracer tracer;", "modifier": "private", "type": "io.opentracing.mock.MockTracer", "declarator": "tracer", "var_name": "tracer"}, {"original_string": "private ServletPlugin servletPlugin;", "modifier": "private", "type": "ServletPlugin", "declarator": "servletPlugin", "var_name": "servletPlugin"}], "file": "stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/MonitoredHttpRequestTest.java"}, "test_case": {"identifier": "testParseUserAgent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testParseUserAgent() throws Exception {\n\t\tdoReturn(true).when(servletPlugin).isParseUserAgent();\n\t\tfinal MockHttpServletRequest request = new MockHttpServletRequest(\"GET\", \"/test.js\");\n\t\trequest.addHeader(\"User-Agent\", \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36\");\n\n\t\tfinal MonitoredHttpRequest monitoredHttpRequest = createMonitoredHttpRequest(request);\n\n\t\tSpan span = monitoredHttpRequest.createSpan();\n\t\tScope scope = tracer.scopeManager().activate(span);\n\t\tspan.finish();\n\t\tscope.close();\n\n\t\tassertEquals(1, tracer.finishedSpans().size());\n\t\tfinal MockSpan mockSpan = tracer.finishedSpans().get(0);\n\t\tassertThat(mockSpan.tags()).containsEntry(\"user_agent.browser\", \"Chrome\");\n\t}", "signature": "void testParseUserAgent()", "full_signature": "@Test public void testParseUserAgent()", "class_method_signature": "MonitoredHttpRequestTest.testParseUserAgent()", "testcase": true, "constructor": false, "invocations": ["isParseUserAgent", "when", "doReturn", "addHeader", "createMonitoredHttpRequest", "createSpan", "activate", "scopeManager", "finish", "close", "assertEquals", "size", "finishedSpans", "get", "finishedSpans", "containsEntry", "assertThat", "tags"]}, "focal_class": {"identifier": "MonitoredHttpRequest", "superclass": "extends MonitoredRequest", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(MonitoredHttpRequest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(MonitoredHttpRequest.class)", "var_name": "logger"}, {"original_string": "public static final String CONNECTION_ID_ATTRIBUTE = \"connectionId\";", "modifier": "public static final", "type": "String", "declarator": "CONNECTION_ID_ATTRIBUTE = \"connectionId\"", "var_name": "CONNECTION_ID_ATTRIBUTE"}, {"original_string": "public static final String WIDGET_ALLOWED_ATTRIBUTE = \"showWidgetAllowed\";", "modifier": "public static final", "type": "String", "declarator": "WIDGET_ALLOWED_ATTRIBUTE = \"showWidgetAllowed\"", "var_name": "WIDGET_ALLOWED_ATTRIBUTE"}, {"original_string": "public static final String MONITORED_HTTP_REQUEST_ATTRIBUTE = \"MonitoredHttpRequest\";", "modifier": "public static final", "type": "String", "declarator": "MONITORED_HTTP_REQUEST_ATTRIBUTE = \"MonitoredHttpRequest\"", "var_name": "MONITORED_HTTP_REQUEST_ATTRIBUTE"}, {"original_string": "public static final String USER_AGENT_PARSED_FUTURE_ATTRIBUTE = MonitoredHttpRequest.class.getName() + \".userAgentParsedFuture\";", "modifier": "public static final", "type": "String", "declarator": "USER_AGENT_PARSED_FUTURE_ATTRIBUTE = MonitoredHttpRequest.class.getName() + \".userAgentParsedFuture\"", "var_name": "USER_AGENT_PARSED_FUTURE_ATTRIBUTE"}, {"original_string": "private static UserAgentParser userAgentParser;", "modifier": "private static", "type": "UserAgentParser", "declarator": "userAgentParser", "var_name": "userAgentParser"}, {"original_string": "protected final HttpServletRequest httpServletRequest;", "modifier": "protected final", "type": "HttpServletRequest", "declarator": "httpServletRequest", "var_name": "httpServletRequest"}, {"original_string": "protected final FilterChain filterChain;", "modifier": "protected final", "type": "FilterChain", "declarator": "filterChain", "var_name": "filterChain"}, {"original_string": "protected final StatusExposingByteCountingServletResponse responseWrapper;", "modifier": "protected final", "type": "StatusExposingByteCountingServletResponse", "declarator": "responseWrapper", "var_name": "responseWrapper"}, {"original_string": "protected final ServletPlugin servletPlugin;", "modifier": "protected final", "type": "ServletPlugin", "declarator": "servletPlugin", "var_name": "servletPlugin"}, {"original_string": "private final TracingPlugin tracingPlugin;", "modifier": "private final", "type": "TracingPlugin", "declarator": "tracingPlugin", "var_name": "tracingPlugin"}, {"original_string": "private final String userAgentHeader;", "modifier": "private final", "type": "String", "declarator": "userAgentHeader", "var_name": "userAgentHeader"}, {"original_string": "private final String connectionId;", "modifier": "private final", "type": "String", "declarator": "connectionId", "var_name": "connectionId"}, {"original_string": "private final boolean widgetAndStagemonitorEndpointsAllowed;", "modifier": "private final", "type": "boolean", "declarator": "widgetAndStagemonitorEndpointsAllowed", "var_name": "widgetAndStagemonitorEndpointsAllowed"}, {"original_string": "private final String clientIp;", "modifier": "private final", "type": "String", "declarator": "clientIp", "var_name": "clientIp"}, {"original_string": "private final ExecutorService userAgentParsingExecutor;", "modifier": "private final", "type": "ExecutorService", "declarator": "userAgentParsingExecutor", "var_name": "userAgentParsingExecutor"}], "methods": [{"identifier": "MonitoredHttpRequest", "parameters": "(HttpServletRequest httpServletRequest,\n\t\t\t\t\t\t\t\tStatusExposingByteCountingServletResponse responseWrapper,\n\t\t\t\t\t\t\t\tFilterChain filterChain, ConfigurationRegistry configuration, ExecutorService userAgentParsingExecutor)", "modifiers": "public", "return": "", "signature": " MonitoredHttpRequest(HttpServletRequest httpServletRequest,\n\t\t\t\t\t\t\t\tStatusExposingByteCountingServletResponse responseWrapper,\n\t\t\t\t\t\t\t\tFilterChain filterChain, ConfigurationRegistry configuration, ExecutorService userAgentParsingExecutor)", "full_signature": "public  MonitoredHttpRequest(HttpServletRequest httpServletRequest,\n\t\t\t\t\t\t\t\tStatusExposingByteCountingServletResponse responseWrapper,\n\t\t\t\t\t\t\t\tFilterChain filterChain, ConfigurationRegistry configuration, ExecutorService userAgentParsingExecutor)", "class_method_signature": "MonitoredHttpRequest.MonitoredHttpRequest(HttpServletRequest httpServletRequest,\n\t\t\t\t\t\t\t\tStatusExposingByteCountingServletResponse responseWrapper,\n\t\t\t\t\t\t\t\tFilterChain filterChain, ConfigurationRegistry configuration, ExecutorService userAgentParsingExecutor)", "testcase": false, "constructor": true}, {"identifier": "createSpan", "parameters": "()", "modifiers": "@Override public", "return": "Span", "signature": "Span createSpan()", "full_signature": "@Override public Span createSpan()", "class_method_signature": "MonitoredHttpRequest.createSpan()", "testcase": false, "constructor": false}, {"identifier": "parseUserAgentAsync", "parameters": "(final Span span, SpanContextInformation info)", "modifiers": "private", "return": "void", "signature": "void parseUserAgentAsync(final Span span, SpanContextInformation info)", "full_signature": "private void parseUserAgentAsync(final Span span, SpanContextInformation info)", "class_method_signature": "MonitoredHttpRequest.parseUserAgentAsync(final Span span, SpanContextInformation info)", "testcase": false, "constructor": false}, {"identifier": "getReferringSite", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getReferringSite()", "full_signature": "private String getReferringSite()", "class_method_signature": "MonitoredHttpRequest.getReferringSite()", "testcase": false, "constructor": false}, {"identifier": "getClientIp", "parameters": "(HttpServletRequest request)", "modifiers": "public static", "return": "String", "signature": "String getClientIp(HttpServletRequest request)", "full_signature": "public static String getClientIp(HttpServletRequest request)", "class_method_signature": "MonitoredHttpRequest.getClientIp(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "getFirstIp", "parameters": "(String ip)", "modifiers": "private static", "return": "String", "signature": "String getFirstIp(String ip)", "full_signature": "private static String getFirstIp(String ip)", "class_method_signature": "MonitoredHttpRequest.getFirstIp(String ip)", "testcase": false, "constructor": false}, {"identifier": "getIpFromHeaderIfNotAlreadySet", "parameters": "(String header, HttpServletRequest request, String ip)", "modifiers": "private static", "return": "String", "signature": "String getIpFromHeaderIfNotAlreadySet(String header, HttpServletRequest request, String ip)", "full_signature": "private static String getIpFromHeaderIfNotAlreadySet(String header, HttpServletRequest request, String ip)", "class_method_signature": "MonitoredHttpRequest.getIpFromHeaderIfNotAlreadySet(String header, HttpServletRequest request, String ip)", "testcase": false, "constructor": false}, {"identifier": "getRequestName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRequestName()", "full_signature": "public String getRequestName()", "class_method_signature": "MonitoredHttpRequest.getRequestName()", "testcase": false, "constructor": false}, {"identifier": "getRequestNameByRequest", "parameters": "(HttpServletRequest request, ServletPlugin servletPlugin)", "modifiers": "public static", "return": "String", "signature": "String getRequestNameByRequest(HttpServletRequest request, ServletPlugin servletPlugin)", "full_signature": "public static String getRequestNameByRequest(HttpServletRequest request, ServletPlugin servletPlugin)", "class_method_signature": "MonitoredHttpRequest.getRequestNameByRequest(HttpServletRequest request, ServletPlugin servletPlugin)", "testcase": false, "constructor": false}, {"identifier": "removeSemicolonContent", "parameters": "(String requestUri)", "modifiers": "public static", "return": "String", "signature": "String removeSemicolonContent(String requestUri)", "full_signature": "public static String removeSemicolonContent(String requestUri)", "class_method_signature": "MonitoredHttpRequest.removeSemicolonContent(String requestUri)", "testcase": false, "constructor": false}, {"identifier": "getHeaders", "parameters": "(HttpServletRequest request)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> getHeaders(HttpServletRequest request)", "full_signature": "private Map<String, String> getHeaders(HttpServletRequest request)", "class_method_signature": "MonitoredHttpRequest.getHeaders(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "MonitoredHttpRequest.execute()", "testcase": false, "constructor": false}, {"identifier": "setUserAgentInformation", "parameters": "(Span span, String userAgenHeader)", "modifiers": "private", "return": "void", "signature": "void setUserAgentInformation(Span span, String userAgenHeader)", "full_signature": "private void setUserAgentInformation(Span span, String userAgenHeader)", "class_method_signature": "MonitoredHttpRequest.setUserAgentInformation(Span span, String userAgenHeader)", "testcase": false, "constructor": false}], "file": "stagemonitor-web-servlet/src/main/java/org/stagemonitor/web/servlet/MonitoredHttpRequest.java"}, "focal_method": {"identifier": "createSpan", "parameters": "()", "modifiers": "@Override public", "return": "Span", "body": "@Override\n\tpublic Span createSpan() {\n\t\tboolean sample = true;\n\t\tif (servletPlugin.isHonorDoNotTrackHeader() && \"1\".equals(httpServletRequest.getHeader(\"dnt\"))) {\n\t\t\tsample = false;\n\t\t}\n\n\t\tfinal Tracer tracer = tracingPlugin.getTracer();\n\t\tio.opentracing.SpanContext spanCtx = tracer.extract(Format.Builtin.HTTP_HEADERS, new HttpServletRequestTextMapExtractAdapter(httpServletRequest));\n\t\tTracer.SpanBuilder spanBuilder = tracer.buildSpan(getRequestName())\n\t\t\t\t.asChildOf(spanCtx)\n\t\t\t\t.withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_SERVER);\n\t\tif (widgetAndStagemonitorEndpointsAllowed) {\n\t\t\t// use null as value so that the tag is not really set\n\t\t\tspanBuilder = spanBuilder.withTag(WIDGET_ALLOWED_ATTRIBUTE, (String) null);\n\t\t}\n\t\tif (!sample) {\n\t\t\tspanBuilder = spanBuilder.withTag(Tags.SAMPLING_PRIORITY.getKey(), 0);\n\t\t}\n\t\tspanBuilder.withTag(SpanUtils.OPERATION_TYPE, \"http\");\n\t\tfinal Span span = spanBuilder.start();\n\t\tTags.HTTP_URL.set(span, httpServletRequest.getRequestURI());\n\t\tTags.PEER_PORT.set(span, httpServletRequest.getRemotePort());\n\t\tspan.setTag(\"method\", httpServletRequest.getMethod());\n\t\tspan.setTag(\"http.referring_site\", getReferringSite());\n\t\tif (servletPlugin.isCollectHttpHeaders()) {\n\t\t\tSpanUtils.setHttpHeaders(span, getHeaders(httpServletRequest));\n\t\t}\n\n\t\tSpanContextInformation info = SpanContextInformation.forSpan(span);\n\t\tinfo.addRequestAttribute(CONNECTION_ID_ATTRIBUTE, connectionId);\n\t\tinfo.addRequestAttribute(MONITORED_HTTP_REQUEST_ATTRIBUTE, this);\n\t\tif (tracingPlugin.isSampled(span) && servletPlugin.isParseUserAgent() && StringUtils.isNotEmpty(userAgentHeader)) {\n\t\t\tparseUserAgentAsync(span, info);\n\t\t}\n\t\treturn span;\n\t}", "signature": "Span createSpan()", "full_signature": "@Override public Span createSpan()", "class_method_signature": "MonitoredHttpRequest.createSpan()", "testcase": false, "constructor": false, "invocations": ["isHonorDoNotTrackHeader", "equals", "getHeader", "getTracer", "extract", "withTag", "asChildOf", "buildSpan", "getRequestName", "getKey", "withTag", "withTag", "getKey", "withTag", "start", "set", "getRequestURI", "set", "getRemotePort", "setTag", "getMethod", "setTag", "getReferringSite", "isCollectHttpHeaders", "setHttpHeaders", "getHeaders", "forSpan", "addRequestAttribute", "addRequestAttribute", "isSampled", "isParseUserAgent", "isNotEmpty", "parseUserAgentAsync"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}