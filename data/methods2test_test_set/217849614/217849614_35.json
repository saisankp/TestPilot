{"test_class": {"identifier": "BootstrapTest", "superclass": "", "interfaces": "", "fields": [], "file": "filter-service-core/src/test/java/cn/leancloud/filter/service/BootstrapTest.java"}, "test_case": {"identifier": "testVersion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVersion() {\n        final String[] args = new String[]{\"-V\"};\n        ParseCommandLineArgsResult ret = Bootstrap.parseCommandLineArgs(args);\n        assertThat(ret.isExit()).isTrue();\n        assertThat(ret.getExitCode()).isEqualTo(ExitCode.OK);\n        assertThat(ret.getOptions()).isNull();\n    }", "signature": "void testVersion()", "full_signature": "@Test public void testVersion()", "class_method_signature": "BootstrapTest.testVersion()", "testcase": true, "constructor": false, "invocations": ["parseCommandLineArgs", "isTrue", "assertThat", "isExit", "isEqualTo", "assertThat", "getExitCode", "isNull", "assertThat", "getOptions"]}, "focal_class": {"identifier": "Bootstrap", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(Bootstrap.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(Bootstrap.class)", "var_name": "logger"}, {"original_string": "private final MetricsService metricsService;", "modifier": "private final", "type": "MetricsService", "declarator": "metricsService", "var_name": "metricsService"}, {"original_string": "private final BackgroundJobScheduler scheduler;", "modifier": "private final", "type": "BackgroundJobScheduler", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private final ScheduledThreadPoolExecutor scheduledThreadPoolExecutor;", "modifier": "private final", "type": "ScheduledThreadPoolExecutor", "declarator": "scheduledThreadPoolExecutor", "var_name": "scheduledThreadPoolExecutor"}, {"original_string": "private final CountUpdateBloomFilterFactory<ExpirableBloomFilterConfig> factory;", "modifier": "private final", "type": "CountUpdateBloomFilterFactory<ExpirableBloomFilterConfig>", "declarator": "factory", "var_name": "factory"}, {"original_string": "private final BloomFilterManagerImpl<BloomFilter, ExpirableBloomFilterConfig> bloomFilterManager;", "modifier": "private final", "type": "BloomFilterManagerImpl<BloomFilter, ExpirableBloomFilterConfig>", "declarator": "bloomFilterManager", "var_name": "bloomFilterManager"}, {"original_string": "private final PersistentManager<BloomFilter> persistentManager;", "modifier": "private final", "type": "PersistentManager<BloomFilter>", "declarator": "persistentManager", "var_name": "persistentManager"}, {"original_string": "private final Server server;", "modifier": "private final", "type": "Server", "declarator": "server", "var_name": "server"}], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "Bootstrap.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "parseCommandLineArgs", "parameters": "(String[] args)", "modifiers": "static", "return": "ParseCommandLineArgsResult", "signature": "ParseCommandLineArgsResult parseCommandLineArgs(String[] args)", "full_signature": "static ParseCommandLineArgsResult parseCommandLineArgs(String[] args)", "class_method_signature": "Bootstrap.parseCommandLineArgs(String[] args)", "testcase": false, "constructor": false}, {"identifier": "Bootstrap", "parameters": "(ServerOptions opts)", "modifiers": "public", "return": "", "signature": " Bootstrap(ServerOptions opts)", "full_signature": "public  Bootstrap(ServerOptions opts)", "class_method_signature": "Bootstrap.Bootstrap(ServerOptions opts)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "(boolean forTesting)", "modifiers": "", "return": "void", "signature": "void start(boolean forTesting)", "full_signature": " void start(boolean forTesting)", "class_method_signature": "Bootstrap.start(boolean forTesting)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "", "return": "void", "signature": "void stop()", "full_signature": " void stop()", "class_method_signature": "Bootstrap.stop()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void start()", "full_signature": "private void start()", "class_method_signature": "Bootstrap.start()", "testcase": false, "constructor": false}, {"identifier": "loadMetricsService", "parameters": "()", "modifiers": "private", "return": "MetricsService", "signature": "MetricsService loadMetricsService()", "full_signature": "private MetricsService loadMetricsService()", "class_method_signature": "Bootstrap.loadMetricsService()", "testcase": false, "constructor": false}, {"identifier": "recoverPreviousBloomFilters", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void recoverPreviousBloomFilters()", "full_signature": "private void recoverPreviousBloomFilters()", "class_method_signature": "Bootstrap.recoverPreviousBloomFilters()", "testcase": false, "constructor": false}, {"identifier": "newServer", "parameters": "(MeterRegistry registry, ServerOptions opts, ScheduledExecutorService scheduledExecutorService)", "modifiers": "private", "return": "Server", "signature": "Server newServer(MeterRegistry registry, ServerOptions opts, ScheduledExecutorService scheduledExecutorService)", "full_signature": "private Server newServer(MeterRegistry registry, ServerOptions opts, ScheduledExecutorService scheduledExecutorService)", "class_method_signature": "Bootstrap.newServer(MeterRegistry registry, ServerOptions opts, ScheduledExecutorService scheduledExecutorService)", "testcase": false, "constructor": false}, {"identifier": "newBloomFilterManager", "parameters": "()", "modifiers": "private", "return": "BloomFilterManagerImpl<BloomFilter, ExpirableBloomFilterConfig>", "signature": "BloomFilterManagerImpl<BloomFilter, ExpirableBloomFilterConfig> newBloomFilterManager()", "full_signature": "private BloomFilterManagerImpl<BloomFilter, ExpirableBloomFilterConfig> newBloomFilterManager()", "class_method_signature": "Bootstrap.newBloomFilterManager()", "testcase": false, "constructor": false}], "file": "filter-service-core/src/main/java/cn/leancloud/filter/service/Bootstrap.java"}, "focal_method": {"identifier": "parseCommandLineArgs", "parameters": "(String[] args)", "modifiers": "static", "return": "ParseCommandLineArgsResult", "body": "static ParseCommandLineArgsResult parseCommandLineArgs(String[] args) {\n        final ServerOptions opts = new ServerOptions();\n        final CommandLine cli = new CommandLine(opts);\n        try {\n            cli.parseArgs(args);\n\n            if (cli.isUsageHelpRequested()) {\n                cli.usage(cli.getOut());\n                return new ParseCommandLineArgsResult(cli.getCommandSpec().exitCodeOnUsageHelp());\n            } else if (cli.isVersionHelpRequested()) {\n                cli.printVersionHelp(cli.getOut());\n                return new ParseCommandLineArgsResult(cli.getCommandSpec().exitCodeOnVersionHelp());\n            }\n        } catch (ParameterException ex) {\n            cli.getErr().println(ex.getMessage());\n            if (!UnmatchedArgumentException.printSuggestions(ex, cli.getErr())) {\n                ex.getCommandLine().usage(cli.getErr());\n            }\n            return new ParseCommandLineArgsResult(cli.getCommandSpec().exitCodeOnInvalidInput());\n        } catch (Exception ex) {\n            ex.printStackTrace(cli.getErr());\n            return new ParseCommandLineArgsResult(cli.getCommandSpec().exitCodeOnExecutionException());\n        }\n        return new ParseCommandLineArgsResult(opts);\n    }", "signature": "ParseCommandLineArgsResult parseCommandLineArgs(String[] args)", "full_signature": "static ParseCommandLineArgsResult parseCommandLineArgs(String[] args)", "class_method_signature": "Bootstrap.parseCommandLineArgs(String[] args)", "testcase": false, "constructor": false, "invocations": ["parseArgs", "isUsageHelpRequested", "usage", "getOut", "exitCodeOnUsageHelp", "getCommandSpec", "isVersionHelpRequested", "printVersionHelp", "getOut", "exitCodeOnVersionHelp", "getCommandSpec", "println", "getErr", "getMessage", "printSuggestions", "getErr", "usage", "getCommandLine", "getErr", "exitCodeOnInvalidInput", "getCommandSpec", "printStackTrace", "getErr", "exitCodeOnExecutionException", "getCommandSpec"]}, "repository": {"repo_id": 217849614, "url": "https://github.com/leancloud/filter-service", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 14, "size": 2797, "license": "licensed"}}