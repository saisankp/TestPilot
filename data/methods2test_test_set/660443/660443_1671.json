{"test_class": {"identifier": "CIPLigandRuleTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "static SmilesParser smiles = new SmilesParser(SilentChemObjectBuilder.getInstance());", "modifier": "static", "type": "SmilesParser", "declarator": "smiles = new SmilesParser(SilentChemObjectBuilder.getInstance())", "var_name": "smiles"}], "file": "descriptor/cip/src/test/java/org/openscience/cdk/geometry/cip/rules/CIPLigandRuleTest.java"}, "test_case": {"identifier": "testSideChains", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSideChains() throws Exception {\n        IAtomContainer molecule = smiles.parseSmiles(\"CC(C)C([H])(C)CC\");\n        ILigand ligand1 = CIPTool.defineLigand(molecule, new VisitedAtoms(), 3, 6);\n        ILigand ligand2 = CIPTool.defineLigand(molecule, new VisitedAtoms(), 3, 1);\n        ISequenceSubRule<ILigand> rule = new CIPLigandRule();\n        Assert.assertEquals(-1, rule.compare(ligand1, ligand2));\n        Assert.assertEquals(1, rule.compare(ligand2, ligand1));\n    }", "signature": "void testSideChains()", "full_signature": "@Test public void testSideChains()", "class_method_signature": "CIPLigandRuleTest.testSideChains()", "testcase": true, "constructor": false, "invocations": ["parseSmiles", "defineLigand", "defineLigand", "assertEquals", "compare", "assertEquals", "compare"]}, "focal_class": {"identifier": "CIPLigandRule", "superclass": "", "interfaces": "implements ISequenceSubRule<ILigand>", "fields": [{"original_string": "CombinedAtomicMassNumberRule numberRule = new CombinedAtomicMassNumberRule();", "modifier": "", "type": "CombinedAtomicMassNumberRule", "declarator": "numberRule = new CombinedAtomicMassNumberRule()", "var_name": "numberRule"}], "methods": [{"identifier": "compare", "parameters": "(ILigand ligand1, ILigand ligand2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(ILigand ligand1, ILigand ligand2)", "full_signature": "@Override public int compare(ILigand ligand1, ILigand ligand2)", "class_method_signature": "CIPLigandRule.compare(ILigand ligand1, ILigand ligand2)", "testcase": false, "constructor": false}, {"identifier": "order", "parameters": "(ILigand[] ligands)", "modifiers": "private", "return": "ILigand[]", "signature": "ILigand[] order(ILigand[] ligands)", "full_signature": "private ILigand[] order(ILigand[] ligands)", "class_method_signature": "CIPLigandRule.order(ILigand[] ligands)", "testcase": false, "constructor": false}], "file": "descriptor/cip/src/main/java/org/openscience/cdk/geometry/cip/rules/CIPLigandRule.java"}, "focal_method": {"identifier": "compare", "parameters": "(ILigand ligand1, ILigand ligand2)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int compare(ILigand ligand1, ILigand ligand2) {\n        int numberComp = numberRule.compare(ligand1, ligand2);\n        if (numberComp != 0) return numberComp;\n\n        // OK, now I need to recurse...\n        ILigand[] ligand1Ligands = CIPTool.getLigandLigands(ligand1);\n        ILigand[] ligand2Ligands = CIPTool.getLigandLigands(ligand2);\n        // if neither have ligands:\n        if (ligand1Ligands.length == 0 && ligand2Ligands.length == 0) return 0;\n        // else if one has no ligands\n        if (ligand1Ligands.length == 0) return -1;\n        if (ligand2Ligands.length == 0) return 1;\n        // ok, both have at least one ligand\n        int minLigandCount = Math.min(ligand1Ligands.length, ligand2Ligands.length);\n        if (ligand1Ligands.length > 1) ligand1Ligands = order(ligand1Ligands);\n        if (ligand2Ligands.length > 1) ligand2Ligands = order(ligand2Ligands);\n        // first do a basic number rule\n        for (int i = 0; i < minLigandCount; i++) {\n            int comparison = numberRule.compare(ligand1Ligands[i], ligand2Ligands[i]);\n            if (comparison != 0) return comparison;\n        }\n        if (ligand1Ligands.length == ligand2Ligands.length) {\n            // it that does not resolve it, do a full, recursive compare\n            for (int i = 0; i < minLigandCount; i++) {\n                int comparison = compare(ligand1Ligands[i], ligand2Ligands[i]);\n                if (comparison != 0) return comparison;\n            }\n        }\n        // OK, if we reached this point, then the ligands they 'share' are all equals, so the one\n        // with more ligands wins\n        if (ligand1Ligands.length > ligand2Ligands.length)\n            return 1;\n        else if (ligand1Ligands.length < ligand2Ligands.length)\n            return -1;\n        else\n            return 0;\n    }", "signature": "int compare(ILigand ligand1, ILigand ligand2)", "full_signature": "@Override public int compare(ILigand ligand1, ILigand ligand2)", "class_method_signature": "CIPLigandRule.compare(ILigand ligand1, ILigand ligand2)", "testcase": false, "constructor": false, "invocations": ["compare", "getLigandLigands", "getLigandLigands", "min", "order", "order", "compare", "compare"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}