{"test_class": {"identifier": "RepositoryNodeTypeManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RepositoryConfiguration config;", "modifier": "private", "type": "RepositoryConfiguration", "declarator": "config", "var_name": "config"}, {"original_string": "private JcrRepository repository;", "modifier": "private", "type": "JcrRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private ExecutionContext context;", "modifier": "private", "type": "ExecutionContext", "declarator": "context", "var_name": "context"}, {"original_string": "private RepositoryNodeTypeManager repoTypeManager;", "modifier": "private", "type": "RepositoryNodeTypeManager", "declarator": "repoTypeManager", "var_name": "repoTypeManager"}, {"original_string": "private JcrSession session;", "modifier": "private", "type": "JcrSession", "declarator": "session", "var_name": "session"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/RepositoryNodeTypeManagerTest.java"}, "test_case": {"identifier": "shouldAllowOverridingOfPropertyDefinitions", "parameters": "()", "modifiers": "@Test @FixFor( \"MODE-1857\" ) public", "return": "void", "body": "@Test\n    @FixFor( \"MODE-1857\" )\n    public void shouldAllowOverridingOfPropertyDefinitions() throws Exception {\n        InputStream cnd = getClass().getClassLoader().getResourceAsStream(\"cnd/overridingPropertyDefinition.cnd\");\n        assertThat(cnd, is(notNullValue()));\n        session.getWorkspace().getNodeTypeManager().registerNodeTypes(cnd, true);\n\n        Node car = session.getRootNode().addNode(\"car\", \"car\");\n        car.setProperty(\"engine\", \"4CYL\");\n        Node cycle = session.getRootNode().addNode(\"cycle\", \"motorcycle\");\n        cycle.setProperty(\"engine\", \"2CYL\");\n        session.save();\n\n        try {\n            car.setProperty(\"engine\", \"2CYL\");\n            fail(\"Should not have allowed setting the 'engine' property on a node of type 'car' to \\\"2CYL\\\"\");\n        } catch (ConstraintViolationException e) {\n            // expected ...\n        }\n        try {\n            cycle.setProperty(\"engine\", \"4CYL\");\n            fail(\"Should not have allowed setting the 'engine' property on a node of type 'car' to \\\"2CYL\\\"\");\n        } catch (ConstraintViolationException e) {\n            // expected ...\n        }\n    }", "signature": "void shouldAllowOverridingOfPropertyDefinitions()", "full_signature": "@Test @FixFor( \"MODE-1857\" ) public void shouldAllowOverridingOfPropertyDefinitions()", "class_method_signature": "RepositoryNodeTypeManagerTest.shouldAllowOverridingOfPropertyDefinitions()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClassLoader", "getClass", "assertThat", "is", "notNullValue", "registerNodeTypes", "getNodeTypeManager", "getWorkspace", "addNode", "getRootNode", "setProperty", "addNode", "getRootNode", "setProperty", "save", "setProperty", "fail", "setProperty", "fail"]}, "focal_class": {"identifier": "RepositoryNodeTypeManager", "superclass": "", "interfaces": "implements ChangeSetListener, NodeTypes.Supplier", "fields": [{"original_string": "private final JcrRepository.RunningState repository;", "modifier": "private final", "type": "JcrRepository.RunningState", "declarator": "repository", "var_name": "repository"}, {"original_string": "private final ExecutionContext context;", "modifier": "private final", "type": "ExecutionContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final String systemWorkspaceName;", "modifier": "private final", "type": "String", "declarator": "systemWorkspaceName", "var_name": "systemWorkspaceName"}, {"original_string": "private final Path nodeTypesPath;", "modifier": "private final", "type": "Path", "declarator": "nodeTypesPath", "var_name": "nodeTypesPath"}, {"original_string": "private final NameFactory nameFactory;", "modifier": "private final", "type": "NameFactory", "declarator": "nameFactory", "var_name": "nameFactory"}, {"original_string": "private final Logger logger = Logger.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "logger = Logger.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private final ReadWriteLock nodeTypesLock = new ReentrantReadWriteLock();", "modifier": "private final", "type": "ReadWriteLock", "declarator": "nodeTypesLock = new ReentrantReadWriteLock()", "var_name": "nodeTypesLock"}, {"original_string": "@GuardedBy( \"nodeTypesLock\" )\n    private volatile NodeTypes nodeTypesCache;", "modifier": "@GuardedBy( \"nodeTypesLock\" )\n    private volatile", "type": "NodeTypes", "declarator": "nodeTypesCache", "var_name": "nodeTypesCache"}, {"original_string": "private final QueryParser queryParser;", "modifier": "private final", "type": "QueryParser", "declarator": "queryParser", "var_name": "queryParser"}, {"original_string": "private final boolean includeColumnsForInheritedProperties;", "modifier": "private final", "type": "boolean", "declarator": "includeColumnsForInheritedProperties", "var_name": "includeColumnsForInheritedProperties"}, {"original_string": "private final boolean includePseudoColumnsInSelectStar;", "modifier": "private final", "type": "boolean", "declarator": "includePseudoColumnsInSelectStar", "var_name": "includePseudoColumnsInSelectStar"}, {"original_string": "private volatile NodeTypeSchemata schemata;", "modifier": "private volatile", "type": "NodeTypeSchemata", "declarator": "schemata", "var_name": "schemata"}, {"original_string": "private final CopyOnWriteArrayList<NodeTypes.Listener> listeners = new CopyOnWriteArrayList<>();", "modifier": "private final", "type": "CopyOnWriteArrayList<NodeTypes.Listener>", "declarator": "listeners = new CopyOnWriteArrayList<>()", "var_name": "listeners"}], "methods": [{"identifier": "RepositoryNodeTypeManager", "parameters": "( JcrRepository.RunningState repository,\n                               boolean includeColumnsForInheritedProperties,\n                               boolean includePseudoColumnsInSelectStar )", "modifiers": "", "return": "", "signature": " RepositoryNodeTypeManager( JcrRepository.RunningState repository,\n                               boolean includeColumnsForInheritedProperties,\n                               boolean includePseudoColumnsInSelectStar )", "full_signature": "  RepositoryNodeTypeManager( JcrRepository.RunningState repository,\n                               boolean includeColumnsForInheritedProperties,\n                               boolean includePseudoColumnsInSelectStar )", "class_method_signature": "RepositoryNodeTypeManager.RepositoryNodeTypeManager( JcrRepository.RunningState repository,\n                               boolean includeColumnsForInheritedProperties,\n                               boolean includePseudoColumnsInSelectStar )", "testcase": false, "constructor": true}, {"identifier": "with", "parameters": "( JcrRepository.RunningState repository,\n                                    boolean includeColumnsForInheritedProperties,\n                                    boolean includePseudoColumnsInSelectStar )", "modifiers": "", "return": "RepositoryNodeTypeManager", "signature": "RepositoryNodeTypeManager with( JcrRepository.RunningState repository,\n                                    boolean includeColumnsForInheritedProperties,\n                                    boolean includePseudoColumnsInSelectStar )", "full_signature": " RepositoryNodeTypeManager with( JcrRepository.RunningState repository,\n                                    boolean includeColumnsForInheritedProperties,\n                                    boolean includePseudoColumnsInSelectStar )", "class_method_signature": "RepositoryNodeTypeManager.with( JcrRepository.RunningState repository,\n                                    boolean includeColumnsForInheritedProperties,\n                                    boolean includePseudoColumnsInSelectStar )", "testcase": false, "constructor": false}, {"identifier": "strings", "parameters": "()", "modifiers": "protected final", "return": "ValueFactory<String>", "signature": "ValueFactory<String> strings()", "full_signature": "protected final ValueFactory<String> strings()", "class_method_signature": "RepositoryNodeTypeManager.strings()", "testcase": false, "constructor": false}, {"identifier": "getNodeTypes", "parameters": "()", "modifiers": "@Override public", "return": "NodeTypes", "signature": "NodeTypes getNodeTypes()", "full_signature": "@Override public NodeTypes getNodeTypes()", "class_method_signature": "RepositoryNodeTypeManager.getNodeTypes()", "testcase": false, "constructor": false}, {"identifier": "registerListener", "parameters": "( NodeTypes.Listener listener )", "modifiers": "final", "return": "boolean", "signature": "boolean registerListener( NodeTypes.Listener listener )", "full_signature": "final boolean registerListener( NodeTypes.Listener listener )", "class_method_signature": "RepositoryNodeTypeManager.registerListener( NodeTypes.Listener listener )", "testcase": false, "constructor": false}, {"identifier": "unregisterListener", "parameters": "( NodeTypes.Listener listener )", "modifiers": "final", "return": "boolean", "signature": "boolean unregisterListener( NodeTypes.Listener listener )", "full_signature": "final boolean unregisterListener( NodeTypes.Listener listener )", "class_method_signature": "RepositoryNodeTypeManager.unregisterListener( NodeTypes.Listener listener )", "testcase": false, "constructor": false}, {"identifier": "notifiyListeners", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void notifiyListeners()", "full_signature": "private void notifiyListeners()", "class_method_signature": "RepositoryNodeTypeManager.notifiyListeners()", "testcase": false, "constructor": false}, {"identifier": "unregisterNodeType", "parameters": "( Collection<Name> nodeTypeNames,\n                             boolean failIfNodeTypesAreUsed )", "modifiers": "", "return": "void", "signature": "void unregisterNodeType( Collection<Name> nodeTypeNames,\n                             boolean failIfNodeTypesAreUsed )", "full_signature": " void unregisterNodeType( Collection<Name> nodeTypeNames,\n                             boolean failIfNodeTypesAreUsed )", "class_method_signature": "RepositoryNodeTypeManager.unregisterNodeType( Collection<Name> nodeTypeNames,\n                             boolean failIfNodeTypesAreUsed )", "testcase": false, "constructor": false}, {"identifier": "getRepositorySchemata", "parameters": "()", "modifiers": "", "return": "NodeTypeSchemata", "signature": "NodeTypeSchemata getRepositorySchemata()", "full_signature": " NodeTypeSchemata getRepositorySchemata()", "class_method_signature": "RepositoryNodeTypeManager.getRepositorySchemata()", "testcase": false, "constructor": false}, {"identifier": "signalNamespaceChanges", "parameters": "()", "modifiers": "", "return": "void", "signature": "void signalNamespaceChanges()", "full_signature": " void signalNamespaceChanges()", "class_method_signature": "RepositoryNodeTypeManager.signalNamespaceChanges()", "testcase": false, "constructor": false}, {"identifier": "isNodeTypeInUse", "parameters": "( Name nodeTypeName )", "modifiers": "", "return": "boolean", "signature": "boolean isNodeTypeInUse( Name nodeTypeName )", "full_signature": " boolean isNodeTypeInUse( Name nodeTypeName )", "class_method_signature": "RepositoryNodeTypeManager.isNodeTypeInUse( Name nodeTypeName )", "testcase": false, "constructor": false}, {"identifier": "registerNodeType", "parameters": "( NodeTypeDefinition ntd )", "modifiers": "", "return": "JcrNodeType", "signature": "JcrNodeType registerNodeType( NodeTypeDefinition ntd )", "full_signature": " JcrNodeType registerNodeType( NodeTypeDefinition ntd )", "class_method_signature": "RepositoryNodeTypeManager.registerNodeType( NodeTypeDefinition ntd )", "testcase": false, "constructor": false}, {"identifier": "registerNodeType", "parameters": "( NodeTypeDefinition ntd,\n                                  boolean failIfNodeTypeExists )", "modifiers": "", "return": "JcrNodeType", "signature": "JcrNodeType registerNodeType( NodeTypeDefinition ntd,\n                                  boolean failIfNodeTypeExists )", "full_signature": " JcrNodeType registerNodeType( NodeTypeDefinition ntd,\n                                  boolean failIfNodeTypeExists )", "class_method_signature": "RepositoryNodeTypeManager.registerNodeType( NodeTypeDefinition ntd,\n                                  boolean failIfNodeTypeExists )", "testcase": false, "constructor": false}, {"identifier": "registerNodeTypes", "parameters": "( Iterable<NodeTypeDefinition> nodeTypeDefns )", "modifiers": "", "return": "List<JcrNodeType>", "signature": "List<JcrNodeType> registerNodeTypes( Iterable<NodeTypeDefinition> nodeTypeDefns )", "full_signature": " List<JcrNodeType> registerNodeTypes( Iterable<NodeTypeDefinition> nodeTypeDefns )", "class_method_signature": "RepositoryNodeTypeManager.registerNodeTypes( Iterable<NodeTypeDefinition> nodeTypeDefns )", "testcase": false, "constructor": false}, {"identifier": "registerNodeTypes", "parameters": "( Iterable<NodeTypeDefinition> nodeTypeDefns,\n                                         boolean failIfNodeTypeDefinitionsExist,\n                                         boolean skipIfNodeTypeDefinitionExists,\n                                         boolean persist )", "modifiers": "", "return": "List<JcrNodeType>", "signature": "List<JcrNodeType> registerNodeTypes( Iterable<NodeTypeDefinition> nodeTypeDefns,\n                                         boolean failIfNodeTypeDefinitionsExist,\n                                         boolean skipIfNodeTypeDefinitionExists,\n                                         boolean persist )", "full_signature": " List<JcrNodeType> registerNodeTypes( Iterable<NodeTypeDefinition> nodeTypeDefns,\n                                         boolean failIfNodeTypeDefinitionsExist,\n                                         boolean skipIfNodeTypeDefinitionExists,\n                                         boolean persist )", "class_method_signature": "RepositoryNodeTypeManager.registerNodeTypes( Iterable<NodeTypeDefinition> nodeTypeDefns,\n                                         boolean failIfNodeTypeDefinitionsExist,\n                                         boolean skipIfNodeTypeDefinitionExists,\n                                         boolean persist )", "testcase": false, "constructor": false}, {"identifier": "validateTypes", "parameters": "( List<JcrNodeType> typesPendingRegistration )", "modifiers": "private", "return": "void", "signature": "void validateTypes( List<JcrNodeType> typesPendingRegistration )", "full_signature": "private void validateTypes( List<JcrNodeType> typesPendingRegistration )", "class_method_signature": "RepositoryNodeTypeManager.validateTypes( List<JcrNodeType> typesPendingRegistration )", "testcase": false, "constructor": false}, {"identifier": "nodeTypeFrom", "parameters": "( NodeTypeDefinition nodeType,\n                                      List<JcrNodeType> supertypes )", "modifiers": "private", "return": "JcrNodeType", "signature": "JcrNodeType nodeTypeFrom( NodeTypeDefinition nodeType,\n                                      List<JcrNodeType> supertypes )", "full_signature": "private JcrNodeType nodeTypeFrom( NodeTypeDefinition nodeType,\n                                      List<JcrNodeType> supertypes )", "class_method_signature": "RepositoryNodeTypeManager.nodeTypeFrom( NodeTypeDefinition nodeType,\n                                      List<JcrNodeType> supertypes )", "testcase": false, "constructor": false}, {"identifier": "propertyDefinitionFrom", "parameters": "( PropertyDefinition propDefn )", "modifiers": "private", "return": "JcrPropertyDefinition", "signature": "JcrPropertyDefinition propertyDefinitionFrom( PropertyDefinition propDefn )", "full_signature": "private JcrPropertyDefinition propertyDefinitionFrom( PropertyDefinition propDefn )", "class_method_signature": "RepositoryNodeTypeManager.propertyDefinitionFrom( PropertyDefinition propDefn )", "testcase": false, "constructor": false}, {"identifier": "childNodeDefinitionFrom", "parameters": "( NodeDefinition childNodeDefn )", "modifiers": "private", "return": "JcrNodeDefinition", "signature": "JcrNodeDefinition childNodeDefinitionFrom( NodeDefinition childNodeDefn )", "full_signature": "private JcrNodeDefinition childNodeDefinitionFrom( NodeDefinition childNodeDefn )", "class_method_signature": "RepositoryNodeTypeManager.childNodeDefinitionFrom( NodeDefinition childNodeDefn )", "testcase": false, "constructor": false}, {"identifier": "notify", "parameters": "( ChangeSet changeSet )", "modifiers": "@Override public", "return": "void", "signature": "void notify( ChangeSet changeSet )", "full_signature": "@Override public void notify( ChangeSet changeSet )", "class_method_signature": "RepositoryNodeTypeManager.notify( ChangeSet changeSet )", "testcase": false, "constructor": false}, {"identifier": "refreshFromSystem", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean refreshFromSystem()", "full_signature": "protected boolean refreshFromSystem()", "class_method_signature": "RepositoryNodeTypeManager.refreshFromSystem()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RepositoryNodeTypeManager.toString()", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/RepositoryNodeTypeManager.java"}, "focal_method": {"identifier": "registerNodeTypes", "parameters": "( Iterable<NodeTypeDefinition> nodeTypeDefns )", "modifiers": "", "return": "List<JcrNodeType>", "body": "List<JcrNodeType> registerNodeTypes( Iterable<NodeTypeDefinition> nodeTypeDefns )\n        throws InvalidNodeTypeDefinitionException, NodeTypeExistsException, RepositoryException {\n        return registerNodeTypes(nodeTypeDefns, true, false, true);\n    }", "signature": "List<JcrNodeType> registerNodeTypes( Iterable<NodeTypeDefinition> nodeTypeDefns )", "full_signature": " List<JcrNodeType> registerNodeTypes( Iterable<NodeTypeDefinition> nodeTypeDefns )", "class_method_signature": "RepositoryNodeTypeManager.registerNodeTypes( Iterable<NodeTypeDefinition> nodeTypeDefns )", "testcase": false, "constructor": false, "invocations": ["registerNodeTypes"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}