{"test_class": {"identifier": "ArrayUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "eddsa/src/test/java/io/moatwel/util/ArrayUtilsTest.java"}, "test_case": {"identifier": "success_toMutualOppositeForm", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void success_toMutualOppositeForm() {\n        BigInteger integer1 = new BigInteger(\"27\");\n        BigInteger integer2 = new BigInteger(\"11\");\n        BigInteger integer3 = new BigInteger(\"247\");\n        BigInteger integer4 = new BigInteger(\"327\");\n\n        int[] result1 = ArrayUtils.toMutualOppositeForm(integer1);\n        int[] result2 = ArrayUtils.toMutualOppositeForm(integer2);\n        int[] result3 = ArrayUtils.toMutualOppositeForm(integer3);\n        int[] result4 = ArrayUtils.toMutualOppositeForm(integer4);\n\n        assertThat(result1, is(new int[]{1, 0, -1, 1, 0, -1}));\n        assertThat(result2, is(new int[]{1, -1, 1, 0, -1}));\n        assertThat(result3, is(new int[]{1, 0, 0, 0, -1, 1, 0, 0, -1}));\n        assertThat(result4, is(new int[]{1, -1, 1, -1, 0, 0, 1, 0, 0, -1}));\n    }", "signature": "void success_toMutualOppositeForm()", "full_signature": "@Test public void success_toMutualOppositeForm()", "class_method_signature": "ArrayUtilsTest.success_toMutualOppositeForm()", "testcase": true, "constructor": false, "invocations": ["toMutualOppositeForm", "toMutualOppositeForm", "toMutualOppositeForm", "toMutualOppositeForm", "assertThat", "is", "assertThat", "is", "assertThat", "is", "assertThat", "is"]}, "focal_class": {"identifier": "ArrayUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "split", "parameters": "(byte[] bytes, int splitIndex)", "modifiers": "public static", "return": "byte[][]", "signature": "byte[][] split(byte[] bytes, int splitIndex)", "full_signature": "public static byte[][] split(byte[] bytes, int splitIndex)", "class_method_signature": "ArrayUtils.split(byte[] bytes, int splitIndex)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(int[] input)", "modifiers": "public static", "return": "int[]", "signature": "int[] reverse(int[] input)", "full_signature": "public static int[] reverse(int[] input)", "class_method_signature": "ArrayUtils.reverse(int[] input)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(BigInteger value, int expectedBytesLength)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(BigInteger value, int expectedBytesLength)", "full_signature": "public static byte[] toByteArray(BigInteger value, int expectedBytesLength)", "class_method_signature": "ArrayUtils.toByteArray(BigInteger value, int expectedBytesLength)", "testcase": false, "constructor": false}, {"identifier": "toBinaryArray", "parameters": "(BigInteger integer)", "modifiers": "public static", "return": "int[]", "signature": "int[] toBinaryArray(BigInteger integer)", "full_signature": "public static int[] toBinaryArray(BigInteger integer)", "class_method_signature": "ArrayUtils.toBinaryArray(BigInteger integer)", "testcase": false, "constructor": false}, {"identifier": "toMutualOppositeForm", "parameters": "(BigInteger integer)", "modifiers": "public static", "return": "int[]", "signature": "int[] toMutualOppositeForm(BigInteger integer)", "full_signature": "public static int[] toMutualOppositeForm(BigInteger integer)", "class_method_signature": "ArrayUtils.toMutualOppositeForm(BigInteger integer)", "testcase": false, "constructor": false}], "file": "eddsa/src/main/java/io/moatwel/util/ArrayUtils.java"}, "focal_method": {"identifier": "toMutualOppositeForm", "parameters": "(BigInteger integer)", "modifiers": "public static", "return": "int[]", "body": "public static int[] toMutualOppositeForm(BigInteger integer) {\n        int[] binaryArray = toBinaryArray(integer);\n        int binaryLength = binaryArray.length;\n\n        int[] ternaryArray = new int[binaryLength + 1];\n\n        ternaryArray[0] = binaryArray[0];\n\n        for (int i = 1; i < binaryLength; i++) {\n            ternaryArray[i] = binaryArray[i] - binaryArray[i - 1];\n        }\n\n        ternaryArray[binaryLength] = -binaryArray[binaryLength - 1];\n\n        return ternaryArray;\n    }", "signature": "int[] toMutualOppositeForm(BigInteger integer)", "full_signature": "public static int[] toMutualOppositeForm(BigInteger integer)", "class_method_signature": "ArrayUtils.toMutualOppositeForm(BigInteger integer)", "testcase": false, "constructor": false, "invocations": ["toBinaryArray"]}, "repository": {"repo_id": 136564461, "url": "https://github.com/halu5071/edwards", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 626, "license": "licensed"}}