{"test_class": {"identifier": "StreamsTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/io/blobkeeper/common/util/StreamsTest.java"}, "test_case": {"identifier": "parallelizeWithException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parallelizeWithException() {\n        List<Long> delays = Lists.newArrayList(1001L, 1002L);\n\n        assertEquals((long) Streams.parallelize(delays, delay -> () -> {\n            if (delay == 1002L) {\n                throw new RuntimeException();\n            }\n\n            try {\n                Thread.sleep(delay);\n            } catch (InterruptedException ignored) {\n            }\n\n            return delay + delay;\n        })\n                .filter(r -> !r.hasError())\n                .map(ResultWrapper::getResult)\n                .reduce(0L, (a, b) -> a + b), 2002L);\n    }", "signature": "void parallelizeWithException()", "full_signature": "@Test public void parallelizeWithException()", "class_method_signature": "StreamsTest.parallelizeWithException()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "assertEquals", "reduce", "map", "filter", "parallelize", "sleep", "hasError"]}, "focal_class": {"identifier": "Streams", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(Streams.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(Streams.class)", "var_name": "log"}, {"original_string": "private static final ExecutorService parallelExecutor = Executors.newCachedThreadPool(\n            new ThreadFactoryBuilder()\n                    .setDaemon(true)\n                    .setNameFormat(\"ParallelizeWorker-%d\")\n                    .build()\n    );", "modifier": "private static final", "type": "ExecutorService", "declarator": "parallelExecutor = Executors.newCachedThreadPool(\n            new ThreadFactoryBuilder()\n                    .setDaemon(true)\n                    .setNameFormat(\"ParallelizeWorker-%d\")\n                    .build()\n    )", "var_name": "parallelExecutor"}], "methods": [{"identifier": "Streams", "parameters": "()", "modifiers": "private", "return": "", "signature": " Streams()", "full_signature": "private  Streams()", "class_method_signature": "Streams.Streams()", "testcase": false, "constructor": true}, {"identifier": "parallelize", "parameters": "(\n            @NotNull Collection<S> source,\n            @NotNull Function<S, Supplier<T>> mapper\n    )", "modifiers": "@NotNull public static", "return": "Stream<ResultWrapper<T>>", "signature": "Stream<ResultWrapper<T>> parallelize(\n            @NotNull Collection<S> source,\n            @NotNull Function<S, Supplier<T>> mapper\n    )", "full_signature": "@NotNull public static Stream<ResultWrapper<T>> parallelize(\n            @NotNull Collection<S> source,\n            @NotNull Function<S, Supplier<T>> mapper\n    )", "class_method_signature": "Streams.parallelize(\n            @NotNull Collection<S> source,\n            @NotNull Function<S, Supplier<T>> mapper\n    )", "testcase": false, "constructor": false}, {"identifier": "parallelize", "parameters": "(int n, @NotNull Supplier<T> supplier)", "modifiers": "@NotNull public static", "return": "Stream<ResultWrapper<T>>", "signature": "Stream<ResultWrapper<T>> parallelize(int n, @NotNull Supplier<T> supplier)", "full_signature": "@NotNull public static Stream<ResultWrapper<T>> parallelize(int n, @NotNull Supplier<T> supplier)", "class_method_signature": "Streams.parallelize(int n, @NotNull Supplier<T> supplier)", "testcase": false, "constructor": false}, {"identifier": "collect", "parameters": "(List<CompletableFuture<ResultWrapper<T>>> results)", "modifiers": "private static", "return": "Stream<ResultWrapper<T>>", "signature": "Stream<ResultWrapper<T>> collect(List<CompletableFuture<ResultWrapper<T>>> results)", "full_signature": "private static Stream<ResultWrapper<T>> collect(List<CompletableFuture<ResultWrapper<T>>> results)", "class_method_signature": "Streams.collect(List<CompletableFuture<ResultWrapper<T>>> results)", "testcase": false, "constructor": false}], "file": "common/src/main/java/io/blobkeeper/common/util/Streams.java"}, "focal_method": {"identifier": "parallelize", "parameters": "(\n            @NotNull Collection<S> source,\n            @NotNull Function<S, Supplier<T>> mapper\n    )", "modifiers": "@NotNull public static", "return": "Stream<ResultWrapper<T>>", "body": "@NotNull\n    public static <S, T> Stream<ResultWrapper<T>> parallelize(\n            @NotNull Collection<S> source,\n            @NotNull Function<S, Supplier<T>> mapper\n    ) {\n        // operations will be executed in parallel\n        List<CompletableFuture<ResultWrapper<T>>> results = source.stream()\n                .map(s -> CompletableFuture.supplyAsync(new ResultSupplier<>(mapper.apply(s)), parallelExecutor))\n                .collect(ImmutableList.toImmutableList());\n\n        return collect(results);\n    }", "signature": "Stream<ResultWrapper<T>> parallelize(\n            @NotNull Collection<S> source,\n            @NotNull Function<S, Supplier<T>> mapper\n    )", "full_signature": "@NotNull public static Stream<ResultWrapper<T>> parallelize(\n            @NotNull Collection<S> source,\n            @NotNull Function<S, Supplier<T>> mapper\n    )", "class_method_signature": "Streams.parallelize(\n            @NotNull Collection<S> source,\n            @NotNull Function<S, Supplier<T>> mapper\n    )", "testcase": false, "constructor": false, "invocations": ["collect", "map", "stream", "supplyAsync", "apply", "toImmutableList", "collect"]}, "repository": {"repo_id": 43258821, "url": "https://github.com/sherman/blobkeeper", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 20, "size": 417, "license": "licensed"}}