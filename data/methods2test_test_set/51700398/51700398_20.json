{"test_class": {"identifier": "SymbolServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate SymbolRepository symbolRepo;", "modifier": "@Autowired\n\tprivate", "type": "SymbolRepository", "declarator": "symbolRepo", "var_name": "symbolRepo"}, {"original_string": "@Autowired\n\tprivate SymbolService symbolService;", "modifier": "@Autowired\n\tprivate", "type": "SymbolService", "declarator": "symbolService", "var_name": "symbolService"}], "file": "trading-common/src/test/java/fr/ymanvieu/trading/common/symbol/SymbolServiceTest.java"}, "test_case": {"identifier": "testGetForCode", "parameters": "()", "modifiers": "@Sql(\"/sql/insert_data.sql\") @Test public", "return": "void", "body": "@Sql(\"/sql/insert_data.sql\")\n\t@Test\n\tpublic void testGetForCode() {\n\t\tassertThat(symbolService.getForCode(USD))\n\t\t.hasValueSatisfying((result) -> {\n\t\t\tassertThat(result).isEqualTo(new Symbol(USD, \"US Dollar\", \"us\", null));\n\t\t\tassertThat(result).isEqualToIgnoringGivenFields(symbolRepo.findById(USD).get(), \"currencyCode\");\n\t\t});\n\t}", "signature": "void testGetForCode()", "full_signature": "@Sql(\"/sql/insert_data.sql\") @Test public void testGetForCode()", "class_method_signature": "SymbolServiceTest.testGetForCode()", "testcase": true, "constructor": false, "invocations": ["hasValueSatisfying", "assertThat", "getForCode", "isEqualTo", "assertThat", "isEqualToIgnoringGivenFields", "assertThat", "get", "findById"]}, "focal_class": {"identifier": "SymbolService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate SymbolRepository symbolRepo;", "modifier": "@Autowired\n\tprivate", "type": "SymbolRepository", "declarator": "symbolRepo", "var_name": "symbolRepo"}, {"original_string": "@Autowired\n\tprivate FavoriteSymbolRepository favoriteSymbolRepository;", "modifier": "@Autowired\n\tprivate", "type": "FavoriteSymbolRepository", "declarator": "favoriteSymbolRepository", "var_name": "favoriteSymbolRepository"}, {"original_string": "@Autowired\n\tprivate SymbolMapper symbolMapper;", "modifier": "@Autowired\n\tprivate", "type": "SymbolMapper", "declarator": "symbolMapper", "var_name": "symbolMapper"}], "methods": [{"identifier": "addSymbol", "parameters": "(String code, String name, String countryFlag, String currencyCode)", "modifiers": "public", "return": "Symbol", "signature": "Symbol addSymbol(String code, String name, String countryFlag, String currencyCode)", "full_signature": "public Symbol addSymbol(String code, String name, String countryFlag, String currencyCode)", "class_method_signature": "SymbolService.addSymbol(String code, String name, String countryFlag, String currencyCode)", "testcase": false, "constructor": false}, {"identifier": "getForCode", "parameters": "(String code)", "modifiers": "public", "return": "Optional<Symbol>", "signature": "Optional<Symbol> getForCode(String code)", "full_signature": "public Optional<Symbol> getForCode(String code)", "class_method_signature": "SymbolService.getForCode(String code)", "testcase": false, "constructor": false}, {"identifier": "getForCodeWithNoCurrency", "parameters": "(String code)", "modifiers": "public", "return": "Optional<Symbol>", "signature": "Optional<Symbol> getForCodeWithNoCurrency(String code)", "full_signature": "public Optional<Symbol> getForCodeWithNoCurrency(String code)", "class_method_signature": "SymbolService.getForCodeWithNoCurrency(String code)", "testcase": false, "constructor": false}, {"identifier": "addFavoriteSymbol", "parameters": "(String fromSymbolCode, String toSymbolCode, String username)", "modifiers": "public", "return": "void", "signature": "void addFavoriteSymbol(String fromSymbolCode, String toSymbolCode, String username)", "full_signature": "public void addFavoriteSymbol(String fromSymbolCode, String toSymbolCode, String username)", "class_method_signature": "SymbolService.addFavoriteSymbol(String fromSymbolCode, String toSymbolCode, String username)", "testcase": false, "constructor": false}, {"identifier": "deleteFavoriteSymbol", "parameters": "(String fromSymbolCode, String toSymbolCode, String username)", "modifiers": "public", "return": "void", "signature": "void deleteFavoriteSymbol(String fromSymbolCode, String toSymbolCode, String username)", "full_signature": "public void deleteFavoriteSymbol(String fromSymbolCode, String toSymbolCode, String username)", "class_method_signature": "SymbolService.deleteFavoriteSymbol(String fromSymbolCode, String toSymbolCode, String username)", "testcase": false, "constructor": false}], "file": "trading-common/src/main/java/fr/ymanvieu/trading/common/symbol/SymbolService.java"}, "focal_method": {"identifier": "getForCode", "parameters": "(String code)", "modifiers": "public", "return": "Optional<Symbol>", "body": "public Optional<Symbol> getForCode(String code) {\n\t\treturn symbolRepo.findById(code).map(symbolMapper::mapToSymbol);\n\t}", "signature": "Optional<Symbol> getForCode(String code)", "full_signature": "public Optional<Symbol> getForCode(String code)", "class_method_signature": "SymbolService.getForCode(String code)", "testcase": false, "constructor": false, "invocations": ["map", "findById"]}, "repository": {"repo_id": 51700398, "url": "https://github.com/ymanvieu/trading", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 988, "license": "licensed"}}