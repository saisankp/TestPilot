{"test_class": {"identifier": "ClassLoaderUtilTest", "superclass": "extends CachedLogger", "interfaces": "", "fields": [], "file": "concurrency/src/test/java/com/baidu/unbiz/common/ClassLoaderUtilTest.java"}, "test_case": {"identifier": "loadServiceClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void loadServiceClass() throws Exception {\n        // load from context loader\n        assertNull(ClassLoaderUtil.loadServiceClass(null));\n\n        try {\n            ClassLoaderUtil.loadServiceClass(\"myservice.notexist\");\n            fail(\"expected ServiceNotFoundException\");\n        } catch (ServiceNotFoundException e) {\n        }\n\n        try {\n            ClassLoaderUtil.loadServiceClass(\"myservice.notfound\");\n            fail(\"expected ClassNotFoundException\");\n        } catch (ClassNotFoundException e) {\n            assertFalse(e instanceof ServiceNotFoundException);\n        }\n\n        assertEquals(MyService.class, ClassLoaderUtil.loadServiceClass(\"myservice\"));\n\n        // load from class referrer\n        assertNull(ClassLoaderUtil.loadServiceClass(null, getClass()));\n        assertNull(ClassLoaderUtil.loadServiceClass(null, (Class<?>) null));\n\n        try {\n            ClassLoaderUtil.loadServiceClass(\"myservice.notexist\", getClass());\n            fail(\"expected ServiceNotFoundException\");\n        } catch (ServiceNotFoundException e) {\n        }\n\n        try {\n            ClassLoaderUtil.loadServiceClass(\"myservice.notfound\", getClass());\n            fail(\"expected ClassNotFoundException\");\n        } catch (ClassNotFoundException e) {\n            assertFalse(e instanceof ServiceNotFoundException);\n        }\n\n        try {\n            ClassLoaderUtil.loadServiceClass(\"myservice.notexist\", (Class<?>) null);\n            fail(\"expected ServiceNotFoundException\");\n        } catch (ServiceNotFoundException e) {\n        }\n\n        try {\n            ClassLoaderUtil.loadServiceClass(\"myservice.notfound\", (Class<?>) null);\n            fail(\"expected ClassNotFoundException\");\n        } catch (ClassNotFoundException e) {\n            assertFalse(e instanceof ServiceNotFoundException);\n        }\n\n        assertEquals(MyService.class, ClassLoaderUtil.loadServiceClass(\"myservice\", getClass()));\n        assertEquals(MyService.class, ClassLoaderUtil.loadServiceClass(\"myservice\", (Class<?>) null));\n\n        // load from specified loader\n        assertNull(ClassLoaderUtil.loadServiceClass(null, getClass().getClassLoader()));\n        assertNull(ClassLoaderUtil.loadServiceClass(null, (ClassLoader) null));\n\n        try {\n            ClassLoaderUtil.loadServiceClass(\"myservice.notexist\", getClass().getClassLoader());\n            fail(\"expected ServiceNotFoundException\");\n        } catch (ServiceNotFoundException e) {\n        }\n\n        try {\n            ClassLoaderUtil.loadServiceClass(\"myservice.notfound\", getClass().getClassLoader());\n            fail(\"expected ClassNotFoundException\");\n        } catch (ClassNotFoundException e) {\n            assertFalse(e instanceof ServiceNotFoundException);\n        }\n\n        try {\n            ClassLoaderUtil.loadServiceClass(\"myservice.notexist\", (ClassLoader) null);\n            fail(\"expected ServiceNotFoundException\");\n        } catch (ServiceNotFoundException e) {\n        }\n\n        try {\n            ClassLoaderUtil.loadServiceClass(\"myservice.notfound\", (ClassLoader) null);\n            fail(\"expected ClassNotFoundException\");\n        } catch (ClassNotFoundException e) {\n            assertFalse(e instanceof ServiceNotFoundException);\n        }\n\n        assertEquals(MyService.class, ClassLoaderUtil.loadServiceClass(\"myservice\", getClass().getClassLoader()));\n        assertEquals(MyService.class, ClassLoaderUtil.loadServiceClass(\"myservice\", (ClassLoader) null));\n\n        try {\n            assertEquals(MyService.class, ClassLoaderUtil.loadServiceClass(\"com.baidu.unbiz.common.sample.MyService\",\n                    getClass().getClassLoader()));\n            fail(\"expected ServiceNotFoundException\");\n        } catch (ServiceNotFoundException e) {\n        }\n\n        try {\n            assertEquals(MyService.class,\n                    ClassLoaderUtil.loadServiceClass(\"com.baidu.unbiz.common.sample.MyService\", (ClassLoader) null));\n            fail(\"expected ServiceNotFoundException\");\n        } catch (ServiceNotFoundException e) {\n        }\n    }", "signature": "void loadServiceClass()", "full_signature": "@Test public void loadServiceClass()", "class_method_signature": "ClassLoaderUtilTest.loadServiceClass()", "testcase": true, "constructor": false, "invocations": ["assertNull", "loadServiceClass", "loadServiceClass", "fail", "loadServiceClass", "fail", "assertFalse", "assertEquals", "loadServiceClass", "assertNull", "loadServiceClass", "getClass", "assertNull", "loadServiceClass", "loadServiceClass", "getClass", "fail", "loadServiceClass", "getClass", "fail", "assertFalse", "loadServiceClass", "fail", "loadServiceClass", "fail", "assertFalse", "assertEquals", "loadServiceClass", "getClass", "assertEquals", "loadServiceClass", "assertNull", "loadServiceClass", "getClassLoader", "getClass", "assertNull", "loadServiceClass", "loadServiceClass", "getClassLoader", "getClass", "fail", "loadServiceClass", "getClassLoader", "getClass", "fail", "assertFalse", "loadServiceClass", "fail", "loadServiceClass", "fail", "assertFalse", "assertEquals", "loadServiceClass", "getClassLoader", "getClass", "assertEquals", "loadServiceClass", "assertEquals", "loadServiceClass", "getClassLoader", "getClass", "fail", "assertEquals", "loadServiceClass", "fail"]}, "focal_class": {"identifier": "ClassLoaderUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getContextClassLoader", "parameters": "()", "modifiers": "public static", "return": "ClassLoader", "signature": "ClassLoader getContextClassLoader()", "full_signature": "public static ClassLoader getContextClassLoader()", "class_method_signature": "ClassLoaderUtil.getContextClassLoader()", "testcase": false, "constructor": false}, {"identifier": "getClasspath", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getClasspath()", "full_signature": "public static String getClasspath()", "class_method_signature": "ClassLoaderUtil.getClasspath()", "testcase": false, "constructor": false}, {"identifier": "loadClass", "parameters": "(String className)", "modifiers": "public static", "return": "Class<T>", "signature": "Class<T> loadClass(String className)", "full_signature": "public static Class<T> loadClass(String className)", "class_method_signature": "ClassLoaderUtil.loadClass(String className)", "testcase": false, "constructor": false}, {"identifier": "loadClass", "parameters": "(String className, Class<?> referrer)", "modifiers": "public static", "return": "Class<T>", "signature": "Class<T> loadClass(String className, Class<?> referrer)", "full_signature": "public static Class<T> loadClass(String className, Class<?> referrer)", "class_method_signature": "ClassLoaderUtil.loadClass(String className, Class<?> referrer)", "testcase": false, "constructor": false}, {"identifier": "loadClass", "parameters": "(String className, ClassLoader classLoader)", "modifiers": "public static", "return": "Class<T>", "signature": "Class<T> loadClass(String className, ClassLoader classLoader)", "full_signature": "public static Class<T> loadClass(String className, ClassLoader classLoader)", "class_method_signature": "ClassLoaderUtil.loadClass(String className, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "loadServiceClass", "parameters": "(String serviceId)", "modifiers": "public static", "return": "Class<T>", "signature": "Class<T> loadServiceClass(String serviceId)", "full_signature": "public static Class<T> loadServiceClass(String serviceId)", "class_method_signature": "ClassLoaderUtil.loadServiceClass(String serviceId)", "testcase": false, "constructor": false}, {"identifier": "loadServiceClass", "parameters": "(String serviceId, Class<?> referrer)", "modifiers": "public static", "return": "Class<T>", "signature": "Class<T> loadServiceClass(String serviceId, Class<?> referrer)", "full_signature": "public static Class<T> loadServiceClass(String serviceId, Class<?> referrer)", "class_method_signature": "ClassLoaderUtil.loadServiceClass(String serviceId, Class<?> referrer)", "testcase": false, "constructor": false}, {"identifier": "loadServiceClass", "parameters": "(String serviceId, ClassLoader classLoader)", "modifiers": "public static", "return": "Class<T>", "signature": "Class<T> loadServiceClass(String serviceId, ClassLoader classLoader)", "full_signature": "public static Class<T> loadServiceClass(String serviceId, ClassLoader classLoader)", "class_method_signature": "ClassLoaderUtil.loadServiceClass(String serviceId, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "loadServiceClass", "parameters": "(String className, String serviceId)", "modifiers": "public static", "return": "Class<T>", "signature": "Class<T> loadServiceClass(String className, String serviceId)", "full_signature": "public static Class<T> loadServiceClass(String className, String serviceId)", "class_method_signature": "ClassLoaderUtil.loadServiceClass(String className, String serviceId)", "testcase": false, "constructor": false}, {"identifier": "loadServiceClass", "parameters": "(String className, String serviceId, Class<T> referrer)", "modifiers": "public static", "return": "Class<T>", "signature": "Class<T> loadServiceClass(String className, String serviceId, Class<T> referrer)", "full_signature": "public static Class<T> loadServiceClass(String className, String serviceId, Class<T> referrer)", "class_method_signature": "ClassLoaderUtil.loadServiceClass(String className, String serviceId, Class<T> referrer)", "testcase": false, "constructor": false}, {"identifier": "loadServiceClass", "parameters": "(String className, String serviceId, ClassLoader classLoader)", "modifiers": "public static", "return": "Class<T>", "signature": "Class<T> loadServiceClass(String className, String serviceId, ClassLoader classLoader)", "full_signature": "public static Class<T> loadServiceClass(String className, String serviceId, ClassLoader classLoader)", "class_method_signature": "ClassLoaderUtil.loadServiceClass(String className, String serviceId, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "getReferrerClassLoader", "parameters": "(Class<T> referrer)", "modifiers": "private static", "return": "ClassLoader", "signature": "ClassLoader getReferrerClassLoader(Class<T> referrer)", "full_signature": "private static ClassLoader getReferrerClassLoader(Class<T> referrer)", "class_method_signature": "ClassLoaderUtil.getReferrerClassLoader(Class<T> referrer)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(String className)", "modifiers": "public static", "return": "T", "signature": "T newInstance(String className)", "full_signature": "public static T newInstance(String className)", "class_method_signature": "ClassLoaderUtil.newInstance(String className)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(String className, Class<?> referrer)", "modifiers": "public static", "return": "Object", "signature": "Object newInstance(String className, Class<?> referrer)", "full_signature": "public static Object newInstance(String className, Class<?> referrer)", "class_method_signature": "ClassLoaderUtil.newInstance(String className, Class<?> referrer)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(String className, ClassLoader classLoader)", "modifiers": "public static", "return": "Object", "signature": "Object newInstance(String className, ClassLoader classLoader)", "full_signature": "public static Object newInstance(String className, ClassLoader classLoader)", "class_method_signature": "ClassLoaderUtil.newInstance(String className, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T newInstance(Class<T> clazz)", "full_signature": "public static T newInstance(Class<T> clazz)", "class_method_signature": "ClassLoaderUtil.newInstance(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "newServiceInstance", "parameters": "(String serviceId)", "modifiers": "public static", "return": "T", "signature": "T newServiceInstance(String serviceId)", "full_signature": "public static T newServiceInstance(String serviceId)", "class_method_signature": "ClassLoaderUtil.newServiceInstance(String serviceId)", "testcase": false, "constructor": false}, {"identifier": "newServiceInstance", "parameters": "(String serviceId, Class<T> referrer)", "modifiers": "public static", "return": "T", "signature": "T newServiceInstance(String serviceId, Class<T> referrer)", "full_signature": "public static T newServiceInstance(String serviceId, Class<T> referrer)", "class_method_signature": "ClassLoaderUtil.newServiceInstance(String serviceId, Class<T> referrer)", "testcase": false, "constructor": false}, {"identifier": "newServiceInstance", "parameters": "(String serviceId, ClassLoader classLoader)", "modifiers": "public static", "return": "T", "signature": "T newServiceInstance(String serviceId, ClassLoader classLoader)", "full_signature": "public static T newServiceInstance(String serviceId, ClassLoader classLoader)", "class_method_signature": "ClassLoaderUtil.newServiceInstance(String serviceId, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "newServiceInstance", "parameters": "(String className, String serviceId)", "modifiers": "public static", "return": "T", "signature": "T newServiceInstance(String className, String serviceId)", "full_signature": "public static T newServiceInstance(String className, String serviceId)", "class_method_signature": "ClassLoaderUtil.newServiceInstance(String className, String serviceId)", "testcase": false, "constructor": false}, {"identifier": "newServiceInstance", "parameters": "(String className, String serviceId, Class<T> referrer)", "modifiers": "public static", "return": "T", "signature": "T newServiceInstance(String className, String serviceId, Class<T> referrer)", "full_signature": "public static T newServiceInstance(String className, String serviceId, Class<T> referrer)", "class_method_signature": "ClassLoaderUtil.newServiceInstance(String className, String serviceId, Class<T> referrer)", "testcase": false, "constructor": false}, {"identifier": "newServiceInstance", "parameters": "(String className, String serviceId, ClassLoader classLoader)", "modifiers": "public static", "return": "T", "signature": "T newServiceInstance(String className, String serviceId, ClassLoader classLoader)", "full_signature": "public static T newServiceInstance(String className, String serviceId, ClassLoader classLoader)", "class_method_signature": "ClassLoaderUtil.newServiceInstance(String className, String serviceId, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "getResources", "parameters": "(String resourceName)", "modifiers": "public static", "return": "URL[]", "signature": "URL[] getResources(String resourceName)", "full_signature": "public static URL[] getResources(String resourceName)", "class_method_signature": "ClassLoaderUtil.getResources(String resourceName)", "testcase": false, "constructor": false}, {"identifier": "getResources", "parameters": "(String resourceName, Class<?> referrer)", "modifiers": "public static", "return": "URL[]", "signature": "URL[] getResources(String resourceName, Class<?> referrer)", "full_signature": "public static URL[] getResources(String resourceName, Class<?> referrer)", "class_method_signature": "ClassLoaderUtil.getResources(String resourceName, Class<?> referrer)", "testcase": false, "constructor": false}, {"identifier": "getResources", "parameters": "(String resourceName, ClassLoader classLoader)", "modifiers": "public static", "return": "URL[]", "signature": "URL[] getResources(String resourceName, ClassLoader classLoader)", "full_signature": "public static URL[] getResources(String resourceName, ClassLoader classLoader)", "class_method_signature": "ClassLoaderUtil.getResources(String resourceName, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "getResources", "parameters": "(List<URL> urlSet, String resourceName, ClassLoader classLoader,\n            boolean sysClassLoader)", "modifiers": "private static", "return": "boolean", "signature": "boolean getResources(List<URL> urlSet, String resourceName, ClassLoader classLoader,\n            boolean sysClassLoader)", "full_signature": "private static boolean getResources(List<URL> urlSet, String resourceName, ClassLoader classLoader,\n            boolean sysClassLoader)", "class_method_signature": "ClassLoaderUtil.getResources(List<URL> urlSet, String resourceName, ClassLoader classLoader,\n            boolean sysClassLoader)", "testcase": false, "constructor": false}, {"identifier": "getDistinctURLs", "parameters": "(List<URL> urls)", "modifiers": "private static", "return": "URL[]", "signature": "URL[] getDistinctURLs(List<URL> urls)", "full_signature": "private static URL[] getDistinctURLs(List<URL> urls)", "class_method_signature": "ClassLoaderUtil.getDistinctURLs(List<URL> urls)", "testcase": false, "constructor": false}, {"identifier": "getResource", "parameters": "(String resourceName)", "modifiers": "public static", "return": "URL", "signature": "URL getResource(String resourceName)", "full_signature": "public static URL getResource(String resourceName)", "class_method_signature": "ClassLoaderUtil.getResource(String resourceName)", "testcase": false, "constructor": false}, {"identifier": "getResource", "parameters": "(String resourceName, Class<?> referrer)", "modifiers": "public static", "return": "URL", "signature": "URL getResource(String resourceName, Class<?> referrer)", "full_signature": "public static URL getResource(String resourceName, Class<?> referrer)", "class_method_signature": "ClassLoaderUtil.getResource(String resourceName, Class<?> referrer)", "testcase": false, "constructor": false}, {"identifier": "getResource", "parameters": "(String resourceName, ClassLoader classLoader)", "modifiers": "public static", "return": "URL", "signature": "URL getResource(String resourceName, ClassLoader classLoader)", "full_signature": "public static URL getResource(String resourceName, ClassLoader classLoader)", "class_method_signature": "ClassLoaderUtil.getResource(String resourceName, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "getResourceAsStream", "parameters": "(String resourceName)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream getResourceAsStream(String resourceName)", "full_signature": "public static InputStream getResourceAsStream(String resourceName)", "class_method_signature": "ClassLoaderUtil.getResourceAsStream(String resourceName)", "testcase": false, "constructor": false}, {"identifier": "getResourceAsStream", "parameters": "(String resourceName, Class<?> referrer)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream getResourceAsStream(String resourceName, Class<?> referrer)", "full_signature": "public static InputStream getResourceAsStream(String resourceName, Class<?> referrer)", "class_method_signature": "ClassLoaderUtil.getResourceAsStream(String resourceName, Class<?> referrer)", "testcase": false, "constructor": false}, {"identifier": "getResourceAsStream", "parameters": "(String resourceName, ClassLoader classLoader)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream getResourceAsStream(String resourceName, ClassLoader classLoader)", "full_signature": "public static InputStream getResourceAsStream(String resourceName, ClassLoader classLoader)", "class_method_signature": "ClassLoaderUtil.getResourceAsStream(String resourceName, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "whichClasses", "parameters": "(String className)", "modifiers": "public static", "return": "URL[]", "signature": "URL[] whichClasses(String className)", "full_signature": "public static URL[] whichClasses(String className)", "class_method_signature": "ClassLoaderUtil.whichClasses(String className)", "testcase": false, "constructor": false}, {"identifier": "whichClasses", "parameters": "(String className, Class<T> referrer)", "modifiers": "public static", "return": "URL[]", "signature": "URL[] whichClasses(String className, Class<T> referrer)", "full_signature": "public static URL[] whichClasses(String className, Class<T> referrer)", "class_method_signature": "ClassLoaderUtil.whichClasses(String className, Class<T> referrer)", "testcase": false, "constructor": false}, {"identifier": "whichClasses", "parameters": "(String className, ClassLoader classLoader)", "modifiers": "public static", "return": "URL[]", "signature": "URL[] whichClasses(String className, ClassLoader classLoader)", "full_signature": "public static URL[] whichClasses(String className, ClassLoader classLoader)", "class_method_signature": "ClassLoaderUtil.whichClasses(String className, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "whichClass", "parameters": "(String className)", "modifiers": "public static", "return": "URL", "signature": "URL whichClass(String className)", "full_signature": "public static URL whichClass(String className)", "class_method_signature": "ClassLoaderUtil.whichClass(String className)", "testcase": false, "constructor": false}, {"identifier": "whichClass", "parameters": "(String className, Class<T> referrer)", "modifiers": "public static", "return": "URL", "signature": "URL whichClass(String className, Class<T> referrer)", "full_signature": "public static URL whichClass(String className, Class<T> referrer)", "class_method_signature": "ClassLoaderUtil.whichClass(String className, Class<T> referrer)", "testcase": false, "constructor": false}, {"identifier": "whichClass", "parameters": "(String className, ClassLoader classLoader)", "modifiers": "public static", "return": "URL", "signature": "URL whichClass(String className, ClassLoader classLoader)", "full_signature": "public static URL whichClass(String className, ClassLoader classLoader)", "class_method_signature": "ClassLoaderUtil.whichClass(String className, ClassLoader classLoader)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/ClassLoaderUtil.java"}, "focal_method": {"identifier": "loadServiceClass", "parameters": "(String serviceId)", "modifiers": "public static", "return": "Class<T>", "body": "public static <T> Class<T> loadServiceClass(String serviceId) throws ClassNotFoundException {\n        return loadServiceClass(serviceId, getContextClassLoader());\n    }", "signature": "Class<T> loadServiceClass(String serviceId)", "full_signature": "public static Class<T> loadServiceClass(String serviceId)", "class_method_signature": "ClassLoaderUtil.loadServiceClass(String serviceId)", "testcase": false, "constructor": false, "invocations": ["loadServiceClass", "getContextClassLoader"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}