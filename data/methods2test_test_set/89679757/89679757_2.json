{"test_class": {"identifier": "PassportTransactionFormatterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private TransactionOutput to;", "modifier": "@Mock\n    private", "type": "TransactionOutput", "declarator": "to", "var_name": "to"}, {"original_string": "@Mock\n    private Address address;", "modifier": "@Mock\n    private", "type": "Address", "declarator": "address", "var_name": "address"}, {"original_string": "@Mock\n    private PassportConnection pCon;", "modifier": "@Mock\n    private", "type": "PassportConnection", "declarator": "pCon", "var_name": "pCon"}, {"original_string": "@Mock\n    private PublicKey pubKey;", "modifier": "@Mock\n    private", "type": "PublicKey", "declarator": "pubKey", "var_name": "pubKey"}, {"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "private PassportTransactionFormatter ptf;", "modifier": "private", "type": "PassportTransactionFormatter", "declarator": "ptf", "var_name": "ptf"}], "file": "app/src/test/java/com/digitalvotingpass/passportconnection/PassportTransactionFormatterTest.java"}, "test_case": {"identifier": "testBuildRawTransaction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuildRawTransaction() {\n        byte[][] transaction = ptf.buildRawTransaction();\n\n        assertEquals(1, value(transaction[0]));\n        assertEquals(1, value(transaction[1]));\n\n        //check for number of outputs\n        assertEquals(1, value(transaction[7]));\n\n        //check for zero coins\n        assertEquals(0, value(transaction[8]));\n\n        //check length of script\n        assertEquals(25, value(transaction[9]));\n\n\n        // Create the raw transaction and hash it\n        byte[] raw = Bytes.concat(transaction[0], transaction[1], transaction[2], transaction[3], transaction[4], transaction[5],\n                transaction[6], transaction[7], transaction[8], transaction[9], transaction[10], transaction[11], transaction[12]);\n        byte[] hashRaw = Sha256Hash.hash(Sha256Hash.hash(raw));\n\n\n        //check for the correct hash\n        byte[] correctHash = Util.hexStringToByteArray(\"09AB317A17BBEB4F46EFA2BDA80F137059608AA6696FF5155F0E2A72DC6C249E\");\n        for(int i=0; i< correctHash.length; i++) {\n            assertEquals(correctHash[i], hashRaw[i]);\n        }\n    }", "signature": "void testBuildRawTransaction()", "full_signature": "@Test public void testBuildRawTransaction()", "class_method_signature": "PassportTransactionFormatterTest.testBuildRawTransaction()", "testcase": true, "constructor": false, "invocations": ["buildRawTransaction", "assertEquals", "value", "assertEquals", "value", "assertEquals", "value", "assertEquals", "value", "assertEquals", "value", "concat", "hash", "hash", "hexStringToByteArray", "assertEquals"]}, "focal_class": {"identifier": "PassportTransactionFormatter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Address destination;", "modifier": "private", "type": "Address", "declarator": "destination", "var_name": "destination"}, {"original_string": "private TransactionOutput utxo;", "modifier": "private", "type": "TransactionOutput", "declarator": "utxo", "var_name": "utxo"}, {"original_string": "private byte[] data;", "modifier": "private", "type": "byte[]", "declarator": "data", "var_name": "data"}], "methods": [{"identifier": "PassportTransactionFormatter", "parameters": "(TransactionOutput utxo, Address destination)", "modifiers": "public", "return": "", "signature": " PassportTransactionFormatter(TransactionOutput utxo, Address destination)", "full_signature": "public  PassportTransactionFormatter(TransactionOutput utxo, Address destination)", "class_method_signature": "PassportTransactionFormatter.PassportTransactionFormatter(TransactionOutput utxo, Address destination)", "testcase": false, "constructor": true}, {"identifier": "setDestinationAddress", "parameters": "(Address destination)", "modifiers": "public", "return": "void", "signature": "void setDestinationAddress(Address destination)", "full_signature": "public void setDestinationAddress(Address destination)", "class_method_signature": "PassportTransactionFormatter.setDestinationAddress(Address destination)", "testcase": false, "constructor": false}, {"identifier": "setUTXO", "parameters": "(TransactionOutput utxo)", "modifiers": "public", "return": "void", "signature": "void setUTXO(TransactionOutput utxo)", "full_signature": "public void setUTXO(TransactionOutput utxo)", "class_method_signature": "PassportTransactionFormatter.setUTXO(TransactionOutput utxo)", "testcase": false, "constructor": false}, {"identifier": "buildAndSign", "parameters": "(PublicKey pubKey, PassportConnection pcon)", "modifiers": "public", "return": "byte[]", "signature": "byte[] buildAndSign(PublicKey pubKey, PassportConnection pcon)", "full_signature": "public byte[] buildAndSign(PublicKey pubKey, PassportConnection pcon)", "class_method_signature": "PassportTransactionFormatter.buildAndSign(PublicKey pubKey, PassportConnection pcon)", "testcase": false, "constructor": false}, {"identifier": "buildRawTransaction", "parameters": "()", "modifiers": "public", "return": "byte[][]", "signature": "byte[][] buildRawTransaction()", "full_signature": "public byte[][] buildRawTransaction()", "class_method_signature": "PassportTransactionFormatter.buildRawTransaction()", "testcase": false, "constructor": false}, {"identifier": "signRawTransaction", "parameters": "(PublicKey pubkey, byte[][] parts, PassportConnection pcon)", "modifiers": "public", "return": "byte[]", "signature": "byte[] signRawTransaction(PublicKey pubkey, byte[][] parts, PassportConnection pcon)", "full_signature": "public byte[] signRawTransaction(PublicKey pubkey, byte[][] parts, PassportConnection pcon)", "class_method_signature": "PassportTransactionFormatter.signRawTransaction(PublicKey pubkey, byte[][] parts, PassportConnection pcon)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/digitalvotingpass/passportconnection/PassportTransactionFormatter.java"}, "focal_method": {"identifier": "buildRawTransaction", "parameters": "()", "modifiers": "public", "return": "byte[][]", "body": "public byte[][] buildRawTransaction() {\n\n        // Version\n        byte[] step1 = new BigInteger(\"01000000\", 16).toByteArray();\n\n        // Number of outputs\n        byte[] step2 = new byte[]{0x01};\n\n        if (utxo.getParentTransactionHash() == null)\n            return null;\n\n        // Transaction hash\n        byte[] step3 = utxo.getParentTransactionHash().getReversedBytes();\n\n        // Output index\n        byte[] step4 = ByteBuffer.allocate(4).putInt(Integer.reverseBytes(utxo.getIndex())).array();\n\n        // Length of scriptsig (scriptpubkey)\n        byte[] step5 = new byte[] {(byte) (utxo.getScriptBytes().length & 0xFF)};\n\n        // Scriptpubkey of output we want to redeem\n        byte[] step6 = utxo.getScriptBytes();\n\n        // Unused sequence\n        byte[] step7 = Util.hexStringToByteArray(\"FFFFFFFF\");\n\n        // Number of outputs in transaction\n        byte[] step8 = Util.hexStringToByteArray(\"01\");\n\n        // Spend amount\n        byte[] step9 = Util.hexStringToByteArray(\"0000000000000000\");\n\n        // Size of redeem script\n        byte[] step10 = new byte[]{(byte) (step6.length & 0xFF)};\n\n        // Redeem script (copies output and replaces address)\n        byte[] step11 = step6.clone();\n        System.arraycopy(this.destination.getHash160(), 0, step11, 3, 20);\n\n        // Lock time\n        byte[] step12 = Util.hexStringToByteArray(\"00000000\");\n\n        // Hash code type\n        byte[] step13 = Util.hexStringToByteArray(\"01000000\");\n\n        return new byte[][]{step1, step2, step3, step4, step5, step6, step7, step8, step9,\n                step10, step11, step12, step13};\n    }", "signature": "byte[][] buildRawTransaction()", "full_signature": "public byte[][] buildRawTransaction()", "class_method_signature": "PassportTransactionFormatter.buildRawTransaction()", "testcase": false, "constructor": false, "invocations": ["toByteArray", "getParentTransactionHash", "getReversedBytes", "getParentTransactionHash", "array", "putInt", "allocate", "reverseBytes", "getIndex", "getScriptBytes", "getScriptBytes", "hexStringToByteArray", "hexStringToByteArray", "hexStringToByteArray", "clone", "arraycopy", "getHash160", "hexStringToByteArray", "hexStringToByteArray"]}, "repository": {"repo_id": 89679757, "url": "https://github.com/digital-voting-pass/polling-station-app", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 34, "size": 58794, "license": "licensed"}}