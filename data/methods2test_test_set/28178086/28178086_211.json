{"test_class": {"identifier": "LinearIdTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final LinearId empty = new LinearId();", "modifier": "private final", "type": "LinearId", "declarator": "empty = new LinearId()", "var_name": "empty"}, {"original_string": "private final LinearId single = new LinearId(\"single\");", "modifier": "private final", "type": "LinearId", "declarator": "single = new LinearId(\"single\")", "var_name": "single"}, {"original_string": "private final LinearId dual = new LinearId(\"hello\", \"world\");", "modifier": "private final", "type": "LinearId", "declarator": "dual = new LinearId(\"hello\", \"world\")", "var_name": "dual"}], "file": "utilities/src/test/java/ec/tstoolkit/utilities/LinearIdTest.java"}, "test_case": {"identifier": "testParent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParent() {\n        assertThat(empty.parent()).isEqualTo(empty);\n        assertThat(single.parent()).isEqualTo(empty);\n        assertThat(dual.parent()).isEqualTo(new LinearId(\"hello\"));\n    }", "signature": "void testParent()", "full_signature": "@Test public void testParent()", "class_method_signature": "LinearIdTest.testParent()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "parent", "isEqualTo", "assertThat", "parent", "isEqualTo", "assertThat", "parent"]}, "focal_class": {"identifier": "LinearId", "superclass": "", "interfaces": "implements Id", "fields": [{"original_string": "private static final IdAggregator DEFAULT_AGGREGATOR = new DefaultIdAggregator();", "modifier": "private static final", "type": "IdAggregator", "declarator": "DEFAULT_AGGREGATOR = new DefaultIdAggregator()", "var_name": "DEFAULT_AGGREGATOR"}, {"original_string": "private final String[] data_;", "modifier": "private final", "type": "String[]", "declarator": "data_", "var_name": "data_"}, {"original_string": "private final IdAggregator aggregator_;", "modifier": "private final", "type": "IdAggregator", "declarator": "aggregator_", "var_name": "aggregator_"}], "methods": [{"identifier": "of", "parameters": "(@NonNull Id id)", "modifiers": "@NonNull public static", "return": "LinearId", "signature": "LinearId of(@NonNull Id id)", "full_signature": "@NonNull public static LinearId of(@NonNull Id id)", "class_method_signature": "LinearId.of(@NonNull Id id)", "testcase": false, "constructor": false}, {"identifier": "LinearId", "parameters": "()", "modifiers": "public", "return": "", "signature": " LinearId()", "full_signature": "public  LinearId()", "class_method_signature": "LinearId.LinearId()", "testcase": false, "constructor": true}, {"identifier": "LinearId", "parameters": "(String id)", "modifiers": "public", "return": "", "signature": " LinearId(String id)", "full_signature": "public  LinearId(String id)", "class_method_signature": "LinearId.LinearId(String id)", "testcase": false, "constructor": true}, {"identifier": "LinearId", "parameters": "(String parent, String tail)", "modifiers": "public", "return": "", "signature": " LinearId(String parent, String tail)", "full_signature": "public  LinearId(String parent, String tail)", "class_method_signature": "LinearId.LinearId(String parent, String tail)", "testcase": false, "constructor": true}, {"identifier": "LinearId", "parameters": "(String... id)", "modifiers": "public", "return": "", "signature": " LinearId(String... id)", "full_signature": "public  LinearId(String... id)", "class_method_signature": "LinearId.LinearId(String... id)", "testcase": false, "constructor": true}, {"identifier": "LinearId", "parameters": "(String[] ids, IdAggregator aggregator)", "modifiers": "public", "return": "", "signature": " LinearId(String[] ids, IdAggregator aggregator)", "full_signature": "public  LinearId(String[] ids, IdAggregator aggregator)", "class_method_signature": "LinearId.LinearId(String[] ids, IdAggregator aggregator)", "testcase": false, "constructor": true}, {"identifier": "LinearId", "parameters": "(String[] ids, IdAggregator aggregator, Void private_constructor)", "modifiers": "private", "return": "", "signature": " LinearId(String[] ids, IdAggregator aggregator, Void private_constructor)", "full_signature": "private  LinearId(String[] ids, IdAggregator aggregator, Void private_constructor)", "class_method_signature": "LinearId.LinearId(String[] ids, IdAggregator aggregator, Void private_constructor)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(int index)", "modifiers": "@Override public", "return": "String", "signature": "String get(int index)", "full_signature": "@Override public String get(int index)", "class_method_signature": "LinearId.get(int index)", "testcase": false, "constructor": false}, {"identifier": "extend", "parameters": "(String tail)", "modifiers": "@Override public", "return": "LinearId", "signature": "LinearId extend(String tail)", "full_signature": "@Override public LinearId extend(String tail)", "class_method_signature": "LinearId.extend(String tail)", "testcase": false, "constructor": false}, {"identifier": "parent", "parameters": "()", "modifiers": "@Override public", "return": "LinearId", "signature": "LinearId parent()", "full_signature": "@Override public LinearId parent()", "class_method_signature": "LinearId.parent()", "testcase": false, "constructor": false}, {"identifier": "getCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getCount()", "full_signature": "@Override public int getCount()", "class_method_signature": "LinearId.getCount()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "LinearId.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(LinearId other)", "modifiers": "private", "return": "boolean", "signature": "boolean equals(LinearId other)", "full_signature": "private boolean equals(LinearId other)", "class_method_signature": "LinearId.equals(LinearId other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "LinearId.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "LinearId.toString()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] toArray()", "full_signature": "@Override public String[] toArray()", "class_method_signature": "LinearId.toArray()", "testcase": false, "constructor": false}], "file": "utilities/src/main/java/ec/tstoolkit/utilities/LinearId.java"}, "focal_method": {"identifier": "parent", "parameters": "()", "modifiers": "@Override public", "return": "LinearId", "body": "@Override\n    public LinearId parent() {\n        int n = getCount();\n        if (n <= 1) {\n            return new LinearId(null, aggregator_, null);\n        }\n        String[] ids = Arrays.copyOf(data_, n - 1);\n        return new LinearId(ids, aggregator_, null);\n    }", "signature": "LinearId parent()", "full_signature": "@Override public LinearId parent()", "class_method_signature": "LinearId.parent()", "testcase": false, "constructor": false, "invocations": ["getCount", "copyOf"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}