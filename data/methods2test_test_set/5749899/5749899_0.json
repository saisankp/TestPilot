{"test_class": {"identifier": "DynamicLoadBalanceFactorProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/jboss/modcluster/load/impl/DynamicLoadBalanceFactorProviderTest.java"}, "test_case": {"identifier": "getLoadBalanceFactor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getLoadBalanceFactor() throws Exception {\n        Engine engine = mock(Engine.class);\n\n        Set<LoadMetric> metrics = new HashSet<>();\n        LoadMetric metric = mock(LoadMetric.class);\n        when(metric.getWeight()).thenReturn(LoadMetric.DEFAULT_WEIGHT);\n        when(metric.getLoad(engine)).thenThrow(new NodeUnavailableException());\n        metrics.add(metric);\n\n        DynamicLoadBalanceFactorProvider provider = new DynamicLoadBalanceFactorProvider(metrics);\n\n        int loadBalanceFactor = provider.getLoadBalanceFactor(engine);\n        assertEquals(-1, loadBalanceFactor);\n    }", "signature": "void getLoadBalanceFactor()", "full_signature": "@Test public void getLoadBalanceFactor()", "class_method_signature": "DynamicLoadBalanceFactorProviderTest.getLoadBalanceFactor()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "getWeight", "thenThrow", "when", "getLoad", "add", "getLoadBalanceFactor", "assertEquals"]}, "focal_class": {"identifier": "DynamicLoadBalanceFactorProvider", "superclass": "", "interfaces": "implements LoadBalanceFactorProvider, DynamicLoadBalanceFactorProviderMBean", "fields": [{"original_string": "public static final int DEFAULT_INITIAL_LOAD = 0;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_INITIAL_LOAD = 0", "var_name": "DEFAULT_INITIAL_LOAD"}, {"original_string": "public static final float DEFAULT_DECAY_FACTOR = 2;", "modifier": "public static final", "type": "float", "declarator": "DEFAULT_DECAY_FACTOR = 2", "var_name": "DEFAULT_DECAY_FACTOR"}, {"original_string": "public static final int DEFAULT_HISTORY = 9;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_HISTORY = 9", "var_name": "DEFAULT_HISTORY"}, {"original_string": "private final Logger log = Logger.getLogger(this.getClass());", "modifier": "private final", "type": "Logger", "declarator": "log = Logger.getLogger(this.getClass())", "var_name": "log"}, {"original_string": "private final Map<LoadMetric, List<Double>> loadHistory = new LinkedHashMap<LoadMetric, List<Double>>();", "modifier": "private final", "type": "Map<LoadMetric, List<Double>>", "declarator": "loadHistory = new LinkedHashMap<LoadMetric, List<Double>>()", "var_name": "loadHistory"}, {"original_string": "private volatile float decayFactor = DEFAULT_DECAY_FACTOR;", "modifier": "private volatile", "type": "float", "declarator": "decayFactor = DEFAULT_DECAY_FACTOR", "var_name": "decayFactor"}, {"original_string": "private volatile int history = DEFAULT_HISTORY;", "modifier": "private volatile", "type": "int", "declarator": "history = DEFAULT_HISTORY", "var_name": "history"}], "methods": [{"identifier": "DynamicLoadBalanceFactorProvider", "parameters": "(Set<LoadMetric> metrics)", "modifiers": "public", "return": "", "signature": " DynamicLoadBalanceFactorProvider(Set<LoadMetric> metrics)", "full_signature": "public  DynamicLoadBalanceFactorProvider(Set<LoadMetric> metrics)", "class_method_signature": "DynamicLoadBalanceFactorProvider.DynamicLoadBalanceFactorProvider(Set<LoadMetric> metrics)", "testcase": false, "constructor": true}, {"identifier": "DynamicLoadBalanceFactorProvider", "parameters": "(Set<LoadMetric> metrics, int initialLoad)", "modifiers": "public", "return": "", "signature": " DynamicLoadBalanceFactorProvider(Set<LoadMetric> metrics, int initialLoad)", "full_signature": "public  DynamicLoadBalanceFactorProvider(Set<LoadMetric> metrics, int initialLoad)", "class_method_signature": "DynamicLoadBalanceFactorProvider.DynamicLoadBalanceFactorProvider(Set<LoadMetric> metrics, int initialLoad)", "testcase": false, "constructor": true}, {"identifier": "getMetrics", "parameters": "()", "modifiers": "@Override public synchronized", "return": "Map<String, Double>", "signature": "Map<String, Double> getMetrics()", "full_signature": "@Override public synchronized Map<String, Double> getMetrics()", "class_method_signature": "DynamicLoadBalanceFactorProvider.getMetrics()", "testcase": false, "constructor": false}, {"identifier": "getLoadBalanceFactor", "parameters": "(Engine engine)", "modifiers": "@Override public synchronized", "return": "int", "signature": "int getLoadBalanceFactor(Engine engine)", "full_signature": "@Override public synchronized int getLoadBalanceFactor(Engine engine)", "class_method_signature": "DynamicLoadBalanceFactorProvider.getLoadBalanceFactor(Engine engine)", "testcase": false, "constructor": false}, {"identifier": "recordLoad", "parameters": "(List<Double> queue, double load)", "modifiers": "private", "return": "void", "signature": "void recordLoad(List<Double> queue, double load)", "full_signature": "private void recordLoad(List<Double> queue, double load)", "class_method_signature": "DynamicLoadBalanceFactorProvider.recordLoad(List<Double> queue, double load)", "testcase": false, "constructor": false}, {"identifier": "average", "parameters": "(List<Double> queue)", "modifiers": "private", "return": "double", "signature": "double average(List<Double> queue)", "full_signature": "private double average(List<Double> queue)", "class_method_signature": "DynamicLoadBalanceFactorProvider.average(List<Double> queue)", "testcase": false, "constructor": false}, {"identifier": "getDecayFactor", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float getDecayFactor()", "full_signature": "@Override public float getDecayFactor()", "class_method_signature": "DynamicLoadBalanceFactorProvider.getDecayFactor()", "testcase": false, "constructor": false}, {"identifier": "setDecayFactor", "parameters": "(float decayFactor)", "modifiers": "@Override public", "return": "void", "signature": "void setDecayFactor(float decayFactor)", "full_signature": "@Override public void setDecayFactor(float decayFactor)", "class_method_signature": "DynamicLoadBalanceFactorProvider.setDecayFactor(float decayFactor)", "testcase": false, "constructor": false}, {"identifier": "getHistory", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getHistory()", "full_signature": "@Override public int getHistory()", "class_method_signature": "DynamicLoadBalanceFactorProvider.getHistory()", "testcase": false, "constructor": false}, {"identifier": "setHistory", "parameters": "(int history)", "modifiers": "@Override public", "return": "void", "signature": "void setHistory(int history)", "full_signature": "@Override public void setHistory(int history)", "class_method_signature": "DynamicLoadBalanceFactorProvider.setHistory(int history)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/jboss/modcluster/load/impl/DynamicLoadBalanceFactorProvider.java"}, "focal_method": {"identifier": "getLoadBalanceFactor", "parameters": "(Engine engine)", "modifiers": "@Override public synchronized", "return": "int", "body": "@Override\n    public synchronized int getLoadBalanceFactor(Engine engine) {\n        boolean nodeUnavailable = false;\n        int totalWeight = 0;\n        double totalWeightedLoad = 0;\n\n        for (Map.Entry<LoadMetric, List<Double>> entry : this.loadHistory.entrySet()) {\n            LoadMetric metric = entry.getKey();\n\n            int weight = metric.getWeight();\n\n            if (weight > 0) {\n                List<Double> metricLoadHistory = entry.getValue();\n\n                try {\n                    // Normalize load with respect to capacity\n                    this.recordLoad(metricLoadHistory, metric.getLoad(engine) / metric.getCapacity());\n\n                    totalWeight += weight;\n                    totalWeightedLoad += this.average(metricLoadHistory) * weight;\n                } catch (NodeUnavailableException e) {\n                    // The metric requested to put the node into error state\n                    // Call LoadMetric#getLoad on remaining metrics so that historical values are populated\n                    nodeUnavailable = true;\n                } catch (Exception e) {\n                    this.log.error(e.getLocalizedMessage(), e);\n                }\n            }\n        }\n\n        if (nodeUnavailable) {\n            return -1;\n        }\n\n        // Convert load ratio to integer percentage\n        int load = (int) Math.round(100 * totalWeightedLoad / totalWeight);\n\n        // apply ceiling & floor and invert to express as \"load factor\"\n        // result should be a value between 1-100\n        return 100 - Math.max(0, Math.min(load, 99));\n    }", "signature": "int getLoadBalanceFactor(Engine engine)", "full_signature": "@Override public synchronized int getLoadBalanceFactor(Engine engine)", "class_method_signature": "DynamicLoadBalanceFactorProvider.getLoadBalanceFactor(Engine engine)", "testcase": false, "constructor": false, "invocations": ["entrySet", "getKey", "getWeight", "getValue", "recordLoad", "getLoad", "getCapacity", "average", "error", "getLocalizedMessage", "round", "max", "min"]}, "repository": {"repo_id": 5749899, "url": "https://github.com/modcluster/mod_cluster", "stars": 84, "created": "9/10/2012 1:25:41 PM +00:00", "updates": "2020-01-24T14:16:44+00:00", "fork": "False", "license": "licensed"}}