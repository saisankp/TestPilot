{"test_class": {"identifier": "ClusterRepairSchedulerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DateTime TWO_HOURS_AGO = DateTime.now().minusHours(2);", "modifier": "private static final", "type": "DateTime", "declarator": "TWO_HOURS_AGO = DateTime.now().minusHours(2)", "var_name": "TWO_HOURS_AGO"}, {"original_string": "private static final Duration DELAY_BEFORE_SCHEDULE = Duration.ofMinutes(4);", "modifier": "private static final", "type": "Duration", "declarator": "DELAY_BEFORE_SCHEDULE = Duration.ofMinutes(4)", "var_name": "DELAY_BEFORE_SCHEDULE"}, {"original_string": "private static final String STCS = \"SizeTieredCompactionStrategy\";", "modifier": "private static final", "type": "String", "declarator": "STCS = \"SizeTieredCompactionStrategy\"", "var_name": "STCS"}, {"original_string": "private Cluster cluster;", "modifier": "private", "type": "Cluster", "declarator": "cluster", "var_name": "cluster"}, {"original_string": "private AppContext context;", "modifier": "private", "type": "AppContext", "declarator": "context", "var_name": "context"}, {"original_string": "private ClusterRepairScheduler clusterRepairAuto;", "modifier": "private", "type": "ClusterRepairScheduler", "declarator": "clusterRepairAuto", "var_name": "clusterRepairAuto"}, {"original_string": "private JmxProxy jmxProxy;", "modifier": "private", "type": "JmxProxy", "declarator": "jmxProxy", "var_name": "jmxProxy"}], "file": "src/server/src/test/java/io/cassandrareaper/service/ClusterRepairSchedulerTest.java"}, "test_case": {"identifier": "addSchedulesForNewKeyspace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void addSchedulesForNewKeyspace() throws Exception {\n    context.storage.addCluster(cluster);\n    context.storage.addRepairSchedule(aRepairSchedule(cluster, \"keyspace1\", TWO_HOURS_AGO));\n\n    when(jmxProxy.getKeyspaces()).thenReturn(Lists.newArrayList(\"keyspace1\", \"keyspace2\"));\n\n    when(jmxProxy.getTablesForKeyspace(\"keyspace1\")).thenReturn(\n            Sets.newHashSet(Table.builder().withName(\"table1\").withCompactionStrategy(STCS).build()));\n\n    when(jmxProxy.getTablesForKeyspace(\"keyspace2\")).thenReturn(\n            Sets.newHashSet(Table.builder().withName(\"table2\").withCompactionStrategy(STCS).build()));\n\n    clusterRepairAuto.scheduleRepairs(cluster);\n    assertThat(context.storage.getAllRepairSchedules()).hasSize(2);\n\n    assertThatClusterRepairSchedules(context.storage.getRepairSchedulesForCluster(cluster.getName()))\n        .hasScheduleCount(2)\n        .repairScheduleForKeyspace(\"keyspace1\").hasCreationTime(TWO_HOURS_AGO)\n        .andThen()\n        .repairScheduleForKeyspace(\"keyspace2\").hasCreationTimeCloseTo(DateTime.now());\n  }", "signature": "void addSchedulesForNewKeyspace()", "full_signature": "@Test public void addSchedulesForNewKeyspace()", "class_method_signature": "ClusterRepairSchedulerTest.addSchedulesForNewKeyspace()", "testcase": true, "constructor": false, "invocations": ["addCluster", "addRepairSchedule", "aRepairSchedule", "thenReturn", "when", "getKeyspaces", "newArrayList", "thenReturn", "when", "getTablesForKeyspace", "newHashSet", "build", "withCompactionStrategy", "withName", "builder", "thenReturn", "when", "getTablesForKeyspace", "newHashSet", "build", "withCompactionStrategy", "withName", "builder", "scheduleRepairs", "hasSize", "assertThat", "getAllRepairSchedules", "hasCreationTimeCloseTo", "repairScheduleForKeyspace", "andThen", "hasCreationTime", "repairScheduleForKeyspace", "hasScheduleCount", "assertThatClusterRepairSchedules", "getRepairSchedulesForCluster", "getName", "now"]}, "focal_class": {"identifier": "ClusterRepairScheduler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ClusterRepairScheduler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ClusterRepairScheduler.class)", "var_name": "LOG"}, {"original_string": "private static final String REPAIR_OWNER = \"auto-scheduling\";", "modifier": "private static final", "type": "String", "declarator": "REPAIR_OWNER = \"auto-scheduling\"", "var_name": "REPAIR_OWNER"}, {"original_string": "private static final String SYSTEM_KEYSPACE_PREFIX = \"system\";", "modifier": "private static final", "type": "String", "declarator": "SYSTEM_KEYSPACE_PREFIX = \"system\"", "var_name": "SYSTEM_KEYSPACE_PREFIX"}, {"original_string": "private final AppContext context;", "modifier": "private final", "type": "AppContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final RepairUnitService repairUnitService;", "modifier": "private final", "type": "RepairUnitService", "declarator": "repairUnitService", "var_name": "repairUnitService"}, {"original_string": "private final RepairScheduleService repairScheduleService;", "modifier": "private final", "type": "RepairScheduleService", "declarator": "repairScheduleService", "var_name": "repairScheduleService"}], "methods": [{"identifier": "ClusterRepairScheduler", "parameters": "(AppContext context)", "modifiers": "public", "return": "", "signature": " ClusterRepairScheduler(AppContext context)", "full_signature": "public  ClusterRepairScheduler(AppContext context)", "class_method_signature": "ClusterRepairScheduler.ClusterRepairScheduler(AppContext context)", "testcase": false, "constructor": true}, {"identifier": "scheduleRepairs", "parameters": "(Cluster cluster)", "modifiers": "public", "return": "void", "signature": "void scheduleRepairs(Cluster cluster)", "full_signature": "public void scheduleRepairs(Cluster cluster)", "class_method_signature": "ClusterRepairScheduler.scheduleRepairs(Cluster cluster)", "testcase": false, "constructor": false}, {"identifier": "nextActivationStartDate", "parameters": "(int scheduleIndex)", "modifiers": "private", "return": "DateTime", "signature": "DateTime nextActivationStartDate(int scheduleIndex)", "full_signature": "private DateTime nextActivationStartDate(int scheduleIndex)", "class_method_signature": "ClusterRepairScheduler.nextActivationStartDate(int scheduleIndex)", "testcase": false, "constructor": false}, {"identifier": "deleteRepairSchedule", "parameters": "(Cluster cluster, String keyspace)", "modifiers": "private", "return": "void", "signature": "void deleteRepairSchedule(Cluster cluster, String keyspace)", "full_signature": "private void deleteRepairSchedule(Cluster cluster, String keyspace)", "class_method_signature": "ClusterRepairScheduler.deleteRepairSchedule(Cluster cluster, String keyspace)", "testcase": false, "constructor": false}, {"identifier": "keyspaceCandidateForRepair", "parameters": "(Cluster cluster, String keyspace)", "modifiers": "private", "return": "boolean", "signature": "boolean keyspaceCandidateForRepair(Cluster cluster, String keyspace)", "full_signature": "private boolean keyspaceCandidateForRepair(Cluster cluster, String keyspace)", "class_method_signature": "ClusterRepairScheduler.keyspaceCandidateForRepair(Cluster cluster, String keyspace)", "testcase": false, "constructor": false}, {"identifier": "createRepairSchedule", "parameters": "(Cluster cluster, String keyspace, DateTime nextActivationTime)", "modifiers": "private", "return": "void", "signature": "void createRepairSchedule(Cluster cluster, String keyspace, DateTime nextActivationTime)", "full_signature": "private void createRepairSchedule(Cluster cluster, String keyspace, DateTime nextActivationTime)", "class_method_signature": "ClusterRepairScheduler.createRepairSchedule(Cluster cluster, String keyspace, DateTime nextActivationTime)", "testcase": false, "constructor": false}, {"identifier": "keyspaceHasNoTable", "parameters": "(AppContext context, Cluster cluster, String keyspace)", "modifiers": "private", "return": "boolean", "signature": "boolean keyspaceHasNoTable(AppContext context, Cluster cluster, String keyspace)", "full_signature": "private boolean keyspaceHasNoTable(AppContext context, Cluster cluster, String keyspace)", "class_method_signature": "ClusterRepairScheduler.keyspaceHasNoTable(AppContext context, Cluster cluster, String keyspace)", "testcase": false, "constructor": false}], "file": "src/server/src/main/java/io/cassandrareaper/service/ClusterRepairScheduler.java"}, "focal_method": {"identifier": "scheduleRepairs", "parameters": "(Cluster cluster)", "modifiers": "public", "return": "void", "body": "public void scheduleRepairs(Cluster cluster) throws ReaperException {\n    List<String> excludedClusters = context\n        .config\n        .getAutoScheduling()\n        .getExcludedClusters()\n        .stream()\n        .map(Cluster::toSymbolicName)\n        .collect(Collectors.toList());\n    if (excludedClusters.contains(cluster.getName())) {\n      LOG.debug(\"Not creating schedules for excluded cluster {}.\", cluster.getName());\n      return;\n    }\n    AtomicInteger scheduleIndex = new AtomicInteger();\n    ScheduledRepairDiffView schedulesDiff = ScheduledRepairDiffView.compareWithExistingSchedules(context, cluster);\n    schedulesDiff.keyspacesDeleted().forEach(keyspace -> deleteRepairSchedule(cluster, keyspace));\n    schedulesDiff\n        .keyspacesWithoutSchedules()\n        .stream()\n        .filter(keyspace -> keyspaceCandidateForRepair(cluster, keyspace))\n        .forEach(\n            keyspace\n              -> createRepairSchedule(cluster, keyspace, nextActivationStartDate(scheduleIndex.getAndIncrement())));\n  }", "signature": "void scheduleRepairs(Cluster cluster)", "full_signature": "public void scheduleRepairs(Cluster cluster)", "class_method_signature": "ClusterRepairScheduler.scheduleRepairs(Cluster cluster)", "testcase": false, "constructor": false, "invocations": ["collect", "map", "stream", "getExcludedClusters", "getAutoScheduling", "toList", "contains", "getName", "debug", "getName", "compareWithExistingSchedules", "forEach", "keyspacesDeleted", "deleteRepairSchedule", "forEach", "filter", "stream", "keyspacesWithoutSchedules", "keyspaceCandidateForRepair", "createRepairSchedule", "nextActivationStartDate", "getAndIncrement"]}, "repository": {"repo_id": 70856121, "url": "https://github.com/thelastpickle/cassandra-reaper", "language": "Java", "is_fork": false, "fork_count": 156, "stargazer_count": 353, "size": 43662, "license": "licensed"}}