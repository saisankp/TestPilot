{"test_class": {"identifier": "BasicPermutationParityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "BasicPermutationParity permutationParity = new BasicPermutationParity(new int[]{0, 1, 2, 3});", "modifier": "", "type": "BasicPermutationParity", "declarator": "permutationParity = new BasicPermutationParity(new int[]{0, 1, 2, 3})", "var_name": "permutationParity"}], "file": "tool/hash/src/test/java/org/openscience/cdk/hash/stereo/BasicPermutationParityTest.java"}, "test_case": {"identifier": "testParity_Odd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParity_Odd() throws Exception {\n        assertEquals(-1, permutationParity.parity(new long[]{4, 2, 3, 1}));\n    }", "signature": "void testParity_Odd()", "full_signature": "@Test public void testParity_Odd()", "class_method_signature": "BasicPermutationParityTest.testParity_Odd()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "parity"]}, "focal_class": {"identifier": "BasicPermutationParity", "superclass": "extends PermutationParity", "interfaces": "", "fields": [{"original_string": "private final int[] indices;", "modifier": "private final", "type": "int[]", "declarator": "indices", "var_name": "indices"}], "methods": [{"identifier": "BasicPermutationParity", "parameters": "(int[] indices)", "modifiers": "public", "return": "", "signature": " BasicPermutationParity(int[] indices)", "full_signature": "public  BasicPermutationParity(int[] indices)", "class_method_signature": "BasicPermutationParity.BasicPermutationParity(int[] indices)", "testcase": false, "constructor": true}, {"identifier": "parity", "parameters": "(long[] current)", "modifiers": "@Override public", "return": "int", "signature": "int parity(long[] current)", "full_signature": "@Override public int parity(long[] current)", "class_method_signature": "BasicPermutationParity.parity(long[] current)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(long a, long b)", "modifiers": "private static", "return": "int", "signature": "int compare(long a, long b)", "full_signature": "private static int compare(long a, long b)", "class_method_signature": "BasicPermutationParity.compare(long a, long b)", "testcase": false, "constructor": false}], "file": "tool/hash/src/main/java/org/openscience/cdk/hash/stereo/BasicPermutationParity.java"}, "focal_method": {"identifier": "parity", "parameters": "(long[] current)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int parity(long[] current) {\n\n        int count = 0;\n\n        for (int i = 0, n = indices.length; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                int cmp = compare(current[indices[i]], current[indices[j]]);\n                if (cmp == 0)\n                    return 0;\n                else if (cmp > 0) count++;\n            }\n        }\n\n        // value is odd, -1 or value is even +1\n        return Integer.lowestOneBit(count) == 1 ? -1 : +1;\n    }", "signature": "int parity(long[] current)", "full_signature": "@Override public int parity(long[] current)", "class_method_signature": "BasicPermutationParity.parity(long[] current)", "testcase": false, "constructor": false, "invocations": ["compare", "lowestOneBit"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}