{"test_class": {"identifier": "RpcMetaUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "brpc-java-communication/src/test/java/com/baidu/brpc/utils/RpcMetaUtilsTest.java"}, "test_case": {"identifier": "testParseRpcMeta", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseRpcMeta() throws Exception {\n        Method method = EchoService.class.getMethod(\"echo\", Echo.EchoRequest.class);\n        RpcMetaUtils.RpcMetaInfo rpcMeta = RpcMetaUtils.parseRpcMeta(method);\n        Assert.assertTrue(rpcMeta.getServiceName().equals(\"example.EchoService\"));\n        Assert.assertTrue(rpcMeta.getMethodName().equals(\"Echo\"));\n    }", "signature": "void testParseRpcMeta()", "full_signature": "@Test public void testParseRpcMeta()", "class_method_signature": "RpcMetaUtilsTest.testParseRpcMeta()", "testcase": true, "constructor": false, "invocations": ["getMethod", "parseRpcMeta", "assertTrue", "equals", "getServiceName", "assertTrue", "equals", "getMethodName"]}, "focal_class": {"identifier": "RpcMetaUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parseRpcMeta", "parameters": "(Method targetMethod)", "modifiers": "public static", "return": "RpcMetaInfo", "signature": "RpcMetaInfo parseRpcMeta(Method targetMethod)", "full_signature": "public static RpcMetaInfo parseRpcMeta(Method targetMethod)", "class_method_signature": "RpcMetaUtils.parseRpcMeta(Method targetMethod)", "testcase": false, "constructor": false}], "file": "brpc-java-communication/src/main/java/com/baidu/brpc/utils/RpcMetaUtils.java"}, "focal_method": {"identifier": "parseRpcMeta", "parameters": "(Method targetMethod)", "modifiers": "public static", "return": "RpcMetaInfo", "body": "public static RpcMetaInfo parseRpcMeta(Method targetMethod) {\n        String serviceName;\n        String methodName;\n        BrpcMeta rpcMeta = targetMethod.getAnnotation(BrpcMeta.class);\n        if (rpcMeta != null) {\n            serviceName = rpcMeta.serviceName();\n            methodName = rpcMeta.methodName();\n        } else {\n            serviceName = targetMethod.getDeclaringClass().getName();\n            methodName = targetMethod.getName();\n        }\n        log.debug(\"serviceName={}, methodName={}\", serviceName, methodName);\n        RpcMetaInfo rpcMetaInfo = new RpcMetaInfo();\n        rpcMetaInfo.setServiceName(serviceName);\n        rpcMetaInfo.setMethodName(methodName);\n        return rpcMetaInfo;\n    }", "signature": "RpcMetaInfo parseRpcMeta(Method targetMethod)", "full_signature": "public static RpcMetaInfo parseRpcMeta(Method targetMethod)", "class_method_signature": "RpcMetaUtils.parseRpcMeta(Method targetMethod)", "testcase": false, "constructor": false, "invocations": ["getAnnotation", "serviceName", "methodName", "getName", "getDeclaringClass", "getName", "debug", "setServiceName", "setMethodName"]}, "repository": {"repo_id": 162548942, "url": "https://github.com/baidu/brpc-java", "language": "Java", "is_fork": false, "fork_count": 175, "stargazer_count": 551, "size": 3271, "license": "licensed"}}