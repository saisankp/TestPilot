{"test_class": {"identifier": "TestBasicAuthenticationService", "superclass": "extends BasicTestCase", "interfaces": "", "fields": [{"original_string": "private static final String USER = \"jane@doe.com\";", "modifier": "private static final", "type": "String", "declarator": "USER = \"jane@doe.com\"", "var_name": "USER"}, {"original_string": "private static final String INVALID_USER = \"janedoe@doe.com\";", "modifier": "private static final", "type": "String", "declarator": "INVALID_USER = \"janedoe@doe.com\"", "var_name": "INVALID_USER"}, {"original_string": "private static final String PASSWORD = \"password-for-jane\";", "modifier": "private static final", "type": "String", "declarator": "PASSWORD = \"password-for-jane\"", "var_name": "PASSWORD"}, {"original_string": "private static final String INVALID_PASSWORD = \"invalid-password\";", "modifier": "private static final", "type": "String", "declarator": "INVALID_PASSWORD = \"invalid-password\"", "var_name": "INVALID_PASSWORD"}, {"original_string": "private static final String BASIC_AUTH_PREFIX = \"Basic \";", "modifier": "private static final", "type": "String", "declarator": "BASIC_AUTH_PREFIX = \"Basic \"", "var_name": "BASIC_AUTH_PREFIX"}, {"original_string": "private static final String BASIC_AUTH_USER_SEPARATOR = \":\";", "modifier": "private static final", "type": "String", "declarator": "BASIC_AUTH_USER_SEPARATOR = \":\"", "var_name": "BASIC_AUTH_USER_SEPARATOR"}, {"original_string": "private static final String SET_COOKIE_HEADER = \"Set-Cookie\";", "modifier": "private static final", "type": "String", "declarator": "SET_COOKIE_HEADER = \"Set-Cookie\"", "var_name": "SET_COOKIE_HEADER"}, {"original_string": "private static final String ROLE = \"guest-role\";", "modifier": "private static final", "type": "String", "declarator": "ROLE = \"guest-role\"", "var_name": "ROLE"}, {"original_string": "private static final String USER_GROUP = \"guest-user-group\";", "modifier": "private static final", "type": "String", "declarator": "USER_GROUP = \"guest-user-group\"", "var_name": "USER_GROUP"}, {"original_string": "private static final String RESOURCE_GROUP = \"guest-resource-group\";", "modifier": "private static final", "type": "String", "declarator": "RESOURCE_GROUP = \"guest-resource-group\"", "var_name": "RESOURCE_GROUP"}, {"original_string": "private static final Long UPPER_SESSION_LIMIT = 28800L;", "modifier": "private static final", "type": "Long", "declarator": "UPPER_SESSION_LIMIT = 28800L", "var_name": "UPPER_SESSION_LIMIT"}], "file": "xenon-common/src/test/java/com/vmware/xenon/services/common/authn/TestBasicAuthenticationService.java"}, "test_case": {"identifier": "testGetExpirationTime", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetExpirationTime() throws Throwable {\n        BasicAuthenticationService basicAuthenticationService = new BasicAuthenticationService();\n        AuthenticationRequest authRequest = new AuthenticationRequest();\n\n        authRequest.sessionExpirationSeconds = null;\n\n        long expectedSec = Instant.now().getEpochSecond() + BasicAuthenticationService.AUTH_TOKEN_EXPIRATION_SECONDS;\n        long result = basicAuthenticationService.getExpirationTime(authRequest);\n        assertEquals(expectedSec, TimeUnit.MICROSECONDS.toSeconds(result));\n\n        authRequest.sessionExpirationSeconds = (long) 0;\n        result = basicAuthenticationService.getExpirationTime(authRequest);\n        expectedSec = Instant.now().getEpochSecond();\n        assertEquals(expectedSec, TimeUnit.MICROSECONDS.toSeconds(result));\n\n        authRequest.sessionExpirationSeconds = (long) -1;\n        result = basicAuthenticationService.getExpirationTime(authRequest);\n        expectedSec = Instant.now().getEpochSecond() - 1;\n        assertEquals(expectedSec, TimeUnit.MICROSECONDS.toSeconds(result));\n\n        authRequest.sessionExpirationSeconds = UPPER_SESSION_LIMIT - 1;\n        result = basicAuthenticationService.getExpirationTime(authRequest);\n        expectedSec = Instant.now().getEpochSecond() + UPPER_SESSION_LIMIT - 1;\n        assertEquals(expectedSec, TimeUnit.MICROSECONDS.toSeconds(result));\n\n        authRequest.sessionExpirationSeconds = UPPER_SESSION_LIMIT;\n        result = basicAuthenticationService.getExpirationTime(authRequest);\n        expectedSec = Instant.now().getEpochSecond() + UPPER_SESSION_LIMIT;\n        assertEquals(expectedSec, TimeUnit.MICROSECONDS.toSeconds(result));\n\n        authRequest.sessionExpirationSeconds = UPPER_SESSION_LIMIT + 1;\n        result = basicAuthenticationService.getExpirationTime(authRequest);\n        expectedSec = Instant.now().getEpochSecond() + UPPER_SESSION_LIMIT;\n        assertEquals(expectedSec, TimeUnit.MICROSECONDS.toSeconds(result));\n    }", "signature": "void testGetExpirationTime()", "full_signature": "@Test public void testGetExpirationTime()", "class_method_signature": "TestBasicAuthenticationService.testGetExpirationTime()", "testcase": true, "constructor": false, "invocations": ["getEpochSecond", "now", "getExpirationTime", "assertEquals", "toSeconds", "getExpirationTime", "getEpochSecond", "now", "assertEquals", "toSeconds", "getExpirationTime", "getEpochSecond", "now", "assertEquals", "toSeconds", "getExpirationTime", "getEpochSecond", "now", "assertEquals", "toSeconds", "getExpirationTime", "getEpochSecond", "now", "assertEquals", "toSeconds", "getExpirationTime", "getEpochSecond", "now", "assertEquals", "toSeconds"]}, "focal_class": {"identifier": "BasicAuthenticationService", "superclass": "extends StatelessService", "interfaces": "", "fields": [{"original_string": "public static final String SELF_LINK = ServiceUriPaths.CORE_AUTHN_BASIC;", "modifier": "public static final", "type": "String", "declarator": "SELF_LINK = ServiceUriPaths.CORE_AUTHN_BASIC", "var_name": "SELF_LINK"}, {"original_string": "static final long AUTH_TOKEN_EXPIRATION_SECONDS = XenonConfiguration.number(\n            BasicAuthenticationService.class,\n            \"AUTH_TOKEN_EXPIRATION_SECONDS\",\n            TimeUnit.HOURS.toSeconds(1)\n    );", "modifier": "static final", "type": "long", "declarator": "AUTH_TOKEN_EXPIRATION_SECONDS = XenonConfiguration.number(\n            BasicAuthenticationService.class,\n            \"AUTH_TOKEN_EXPIRATION_SECONDS\",\n            TimeUnit.HOURS.toSeconds(1)\n    )", "var_name": "AUTH_TOKEN_EXPIRATION_SECONDS"}, {"original_string": "private final long UPPER_SESSION_LIMIT_SECONDS = XenonConfiguration.number(\n            BasicAuthenticationService.class,\n            \"UPPER_SESSION_LIMIT_SECONDS\",\n            0\n    );", "modifier": "private final", "type": "long", "declarator": "UPPER_SESSION_LIMIT_SECONDS = XenonConfiguration.number(\n            BasicAuthenticationService.class,\n            \"UPPER_SESSION_LIMIT_SECONDS\",\n            0\n    )", "var_name": "UPPER_SESSION_LIMIT_SECONDS"}], "methods": [{"identifier": "BasicAuthenticationService", "parameters": "()", "modifiers": "public", "return": "", "signature": " BasicAuthenticationService()", "full_signature": "public  BasicAuthenticationService()", "class_method_signature": "BasicAuthenticationService.BasicAuthenticationService()", "testcase": false, "constructor": true}, {"identifier": "authorizeRequest", "parameters": "(Operation op)", "modifiers": "@Override public", "return": "void", "signature": "void authorizeRequest(Operation op)", "full_signature": "@Override public void authorizeRequest(Operation op)", "class_method_signature": "BasicAuthenticationService.authorizeRequest(Operation op)", "testcase": false, "constructor": false}, {"identifier": "queueRequest", "parameters": "(Operation op)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean queueRequest(Operation op)", "full_signature": "@Override public boolean queueRequest(Operation op)", "class_method_signature": "BasicAuthenticationService.queueRequest(Operation op)", "testcase": false, "constructor": false}, {"identifier": "handlePost", "parameters": "(Operation op)", "modifiers": "@Override public", "return": "void", "signature": "void handlePost(Operation op)", "full_signature": "@Override public void handlePost(Operation op)", "class_method_signature": "BasicAuthenticationService.handlePost(Operation op)", "testcase": false, "constructor": false}, {"identifier": "getExpirationTime", "parameters": "(AuthenticationRequest authRequest)", "modifiers": "protected", "return": "long", "signature": "long getExpirationTime(AuthenticationRequest authRequest)", "full_signature": "protected long getExpirationTime(AuthenticationRequest authRequest)", "class_method_signature": "BasicAuthenticationService.getExpirationTime(AuthenticationRequest authRequest)", "testcase": false, "constructor": false}], "file": "xenon-common/src/main/java/com/vmware/xenon/services/common/authn/BasicAuthenticationService.java"}, "focal_method": {"identifier": "getExpirationTime", "parameters": "(AuthenticationRequest authRequest)", "modifiers": "protected", "return": "long", "body": "protected long getExpirationTime(AuthenticationRequest authRequest) {\n        long expirationTimeSeconds = authRequest.sessionExpirationSeconds != null ?\n                authRequest.sessionExpirationSeconds : AUTH_TOKEN_EXPIRATION_SECONDS;\n\n        // Set a hard limit on the duration of a session if the expirationTimeMicros\n        // exceeds the upper session expiration limit.\n        if (this.UPPER_SESSION_LIMIT_SECONDS > 0 &&\n                expirationTimeSeconds > this.UPPER_SESSION_LIMIT_SECONDS) {\n            expirationTimeSeconds = this.UPPER_SESSION_LIMIT_SECONDS;\n        }\n\n        return Utils.fromNowMicrosUtc(TimeUnit.SECONDS.toMicros(expirationTimeSeconds));\n    }", "signature": "long getExpirationTime(AuthenticationRequest authRequest)", "full_signature": "protected long getExpirationTime(AuthenticationRequest authRequest)", "class_method_signature": "BasicAuthenticationService.getExpirationTime(AuthenticationRequest authRequest)", "testcase": false, "constructor": false, "invocations": ["fromNowMicrosUtc", "toMicros"]}, "repository": {"repo_id": 45276846, "url": "https://github.com/vmware-archive/xenon", "language": "Java", "is_fork": false, "fork_count": 97, "stargazer_count": 226, "size": 52010, "license": "licensed"}}