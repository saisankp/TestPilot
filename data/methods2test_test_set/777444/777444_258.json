{"test_class": {"identifier": "StringToOpenTypeConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private StringToOpenTypeConverter converter;", "modifier": "private", "type": "StringToOpenTypeConverter", "declarator": "converter", "var_name": "converter"}], "file": "agent/core/src/test/java/org/jolokia/converter/object/StringToOpenTypeConverterTest.java"}, "test_case": {"identifier": "compositeType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void compositeType() throws OpenDataException, AttributeNotFoundException, ParseException {\n        CompositeTypeAndJson taj = new CompositeTypeAndJson(\n                STRING,\"verein\",\"FCN\",\n                INTEGER,\"platz\",6,\n                STRING,\"trainer\",null,\n                BOOLEAN,\"absteiger\",false\n        );\n        for (Object input : new Object[] { taj.getJson(), taj.getJsonAsString() }) {\n            CompositeData result = (CompositeData) converter.convertToObject(taj.getType(),input);\n            assertEquals(result.get(\"verein\"),\"FCN\");\n            assertEquals(result.get(\"trainer\"),null);\n            assertEquals(result.get(\"platz\"),6);\n            assertEquals(result.get(\"absteiger\"),false);\n            assertEquals(result.values().size(),4);\n        }\n    }", "signature": "void compositeType()", "full_signature": "@Test public void compositeType()", "class_method_signature": "StringToOpenTypeConverterTest.compositeType()", "testcase": true, "constructor": false, "invocations": ["getJson", "getJsonAsString", "convertToObject", "getType", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "size", "values"]}, "focal_class": {"identifier": "StringToOpenTypeConverter", "superclass": "extends OpenTypeConverter", "interfaces": "", "fields": [{"original_string": "private List<OpenTypeConverter<? extends OpenType>> converters;", "modifier": "private", "type": "List<OpenTypeConverter<? extends OpenType>>", "declarator": "converters", "var_name": "converters"}], "methods": [{"identifier": "StringToOpenTypeConverter", "parameters": "(StringToObjectConverter pStringToObjectConverter)", "modifiers": "public", "return": "", "signature": " StringToOpenTypeConverter(StringToObjectConverter pStringToObjectConverter)", "full_signature": "public  StringToOpenTypeConverter(StringToObjectConverter pStringToObjectConverter)", "class_method_signature": "StringToOpenTypeConverter.StringToOpenTypeConverter(StringToObjectConverter pStringToObjectConverter)", "testcase": false, "constructor": true}, {"identifier": "convertToObject", "parameters": "(OpenType openType, Object pValue)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "Object", "signature": "Object convertToObject(OpenType openType, Object pValue)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public Object convertToObject(OpenType openType, Object pValue)", "class_method_signature": "StringToOpenTypeConverter.convertToObject(OpenType openType, Object pValue)", "testcase": false, "constructor": false}, {"identifier": "canConvert", "parameters": "(OpenType pType)", "modifiers": "@Override", "return": "boolean", "signature": "boolean canConvert(OpenType pType)", "full_signature": "@Override boolean canConvert(OpenType pType)", "class_method_signature": "StringToOpenTypeConverter.canConvert(OpenType pType)", "testcase": false, "constructor": false}, {"identifier": "makeForgiving", "parameters": "()", "modifiers": "public", "return": "StringToOpenTypeConverter", "signature": "StringToOpenTypeConverter makeForgiving()", "full_signature": "public StringToOpenTypeConverter makeForgiving()", "class_method_signature": "StringToOpenTypeConverter.makeForgiving()", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/converter/object/StringToOpenTypeConverter.java"}, "focal_method": {"identifier": "convertToObject", "parameters": "(OpenType openType, Object pValue)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "Object", "body": "@SuppressWarnings(\"unchecked\")\n    @Override\n\tpublic Object convertToObject(OpenType openType, Object pValue) {\n        if (pValue == null) {\n            return null;\n        } else {\n            for (OpenTypeConverter converter : converters) {\n                if (converter.canConvert(openType)) {\n                    return converter.convertToObject(openType,pValue);\n                }\n            }\n            throw new IllegalArgumentException(\n                    \"Cannot convert \" + pValue + \" to \" + openType + \": \" + \"No converter could be found\");\n        }\n\t}", "signature": "Object convertToObject(OpenType openType, Object pValue)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public Object convertToObject(OpenType openType, Object pValue)", "class_method_signature": "StringToOpenTypeConverter.convertToObject(OpenType openType, Object pValue)", "testcase": false, "constructor": false, "invocations": ["canConvert", "convertToObject"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}