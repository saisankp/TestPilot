{"test_class": {"identifier": "LangUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/modules/common/src/test/java/org/onetwo/common/utils/LangUtilsTest.java"}, "test_case": {"identifier": "testDigit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDigit(){\n\t\tString str = \"123\";\n\t\tAssert.assertTrue(LangUtils.isDigitString(str));\n\t\tstr = \"0\";\n\t\tAssert.assertTrue(LangUtils.isDigitString(str));\n\t\tstr = \"3\";\n\t\tAssert.assertTrue(LangUtils.isDigitString(str));\n\t\tstr = \"003\";\n\t\tAssert.assertTrue(LangUtils.isDigitString(str));\n\t\tstr = \"a3\";\n\t\tAssert.assertFalse(LangUtils.isDigitString(str));\n\t\tstr = \"3ssd\";\n\t\tAssert.assertFalse(LangUtils.isDigitString(str));\n\t\tstr = \"34 33\";\n\t\tAssert.assertFalse(LangUtils.isDigitString(str));\n\t}", "signature": "void testDigit()", "full_signature": "@Test public void testDigit()", "class_method_signature": "LangUtilsTest.testDigit()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isDigitString", "assertTrue", "isDigitString", "assertTrue", "isDigitString", "assertTrue", "isDigitString", "assertFalse", "isDigitString", "assertFalse", "isDigitString", "assertFalse", "isDigitString"]}, "focal_class": {"identifier": "LangUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String UTF8 = \"utf-8\";", "modifier": "public static final", "type": "String", "declarator": "UTF8 = \"utf-8\"", "var_name": "UTF8"}, {"original_string": "public static final Pattern DIGIT = Pattern.compile(\"^[0-9]+$\");", "modifier": "public static final", "type": "Pattern", "declarator": "DIGIT = Pattern.compile(\"^[0-9]+$\")", "var_name": "DIGIT"}, {"original_string": "public static final Pattern AWORD = Pattern.compile(\"^\\\\w+$\", Pattern.CASE_INSENSITIVE);", "modifier": "public static final", "type": "Pattern", "declarator": "AWORD = Pattern.compile(\"^\\\\w+$\", Pattern.CASE_INSENSITIVE)", "var_name": "AWORD"}, {"original_string": "public static final String EMPTY_STRING = \"\";", "modifier": "public static final", "type": "String", "declarator": "EMPTY_STRING = \"\"", "var_name": "EMPTY_STRING"}, {"original_string": "public static final Object EMPTY_OBJECT = new Object();", "modifier": "public static final", "type": "Object", "declarator": "EMPTY_OBJECT = new Object()", "var_name": "EMPTY_OBJECT"}, {"original_string": "public static final Object[] EMPTY_ARRAY = new Object[0];", "modifier": "public static final", "type": "Object[]", "declarator": "EMPTY_ARRAY = new Object[0]", "var_name": "EMPTY_ARRAY"}, {"original_string": "public static final String[] EMPTY_STRING_ARRAY = new String[0];", "modifier": "public static final", "type": "String[]", "declarator": "EMPTY_STRING_ARRAY = new String[0]", "var_name": "EMPTY_STRING_ARRAY"}, {"original_string": "public static final Class[] Empty_CLASSES = new Class[0];", "modifier": "public static final", "type": "Class[]", "declarator": "Empty_CLASSES = new Class[0]", "var_name": "Empty_CLASSES"}, {"original_string": "private final static Map<String, Pattern> REGEX_CACHE = new ConcurrentHashMap<String, Pattern>();", "modifier": "private final static", "type": "Map<String, Pattern>", "declarator": "REGEX_CACHE = new ConcurrentHashMap<String, Pattern>()", "var_name": "REGEX_CACHE"}, {"original_string": "public static final Consoler CONSOLE;", "modifier": "public static final", "type": "Consoler", "declarator": "CONSOLE", "var_name": "CONSOLE"}, {"original_string": "private static final Collection<Class<?>> BASE_CLASS;", "modifier": "private static final", "type": "Collection<Class<?>>", "declarator": "BASE_CLASS", "var_name": "BASE_CLASS"}, {"original_string": "private static final Collection<Class<?>> SIMPLE_CLASS;", "modifier": "private static final", "type": "Collection<Class<?>>", "declarator": "SIMPLE_CLASS", "var_name": "SIMPLE_CLASS"}, {"original_string": "public static final char[] WORD_CHARS = {  '1', '2', '3', '4', '5', '6', '7', \n\t\t\t'8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', \n\t\t\t'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', \n\t\t\t'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', \n\t\t\t'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', \n\t\t\t'Y', 'Z' };", "modifier": "public static final", "type": "char[]", "declarator": "WORD_CHARS = {  '1', '2', '3', '4', '5', '6', '7', \n\t\t\t'8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', \n\t\t\t'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', \n\t\t\t'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', \n\t\t\t'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', \n\t\t\t'Y', 'Z' }", "var_name": "WORD_CHARS"}, {"original_string": "public static final Comparator AscBeanOrderComparator = new Comparator() {\n\t\t@Override\n\t\tpublic int compare(Object o1, Object o2) {\n\t\t\tint rs = getBeanOrder(o1) - getBeanOrder(o2);\n\t\t\treturn rs==0?(o1.getClass().getSimpleName().compareTo(o2.getClass().getSimpleName())):rs;\n\t\t}\n\t};", "modifier": "public static final", "type": "Comparator", "declarator": "AscBeanOrderComparator = new Comparator() {\n\t\t@Override\n\t\tpublic int compare(Object o1, Object o2) {\n\t\t\tint rs = getBeanOrder(o1) - getBeanOrder(o2);\n\t\t\treturn rs==0?(o1.getClass().getSimpleName().compareTo(o2.getClass().getSimpleName())):rs;\n\t\t}\n\t}", "var_name": "AscBeanOrderComparator"}, {"original_string": "public static final Comparator DescBeanOrderComparator = Collections.reverseOrder(AscBeanOrderComparator);", "modifier": "public static final", "type": "Comparator", "declarator": "DescBeanOrderComparator = Collections.reverseOrder(AscBeanOrderComparator)", "var_name": "DescBeanOrderComparator"}, {"original_string": "public static TypeJudge FirstObject = new TypeJudge(){\n\n\n\t\t@Override\n\t\tpublic Object ifIterable(Iterable<?> obj) {\n\t\t\tIterator<?> it = obj.iterator();\n\t\t\tif(it.hasNext()){\n\t\t\t\treturn it.next();\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifList(List list) {\n\t\t\tif(list.isEmpty())\n\t\t\t\treturn null;\n\t\t\treturn list.get(0);\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic Object ifArray(Object[] array) {\n\t\t\treturn array.length==0?null:array[0];\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifCollection(Collection col) {\n\t\t\tif(col.isEmpty())\n\t\t\t\treturn null;\n\t\t\treturn col.iterator().next();\n\t\t}\n\n\t\tpublic Object other(Object obj, Class<?> type) {\n\t\t\treturn obj;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifMap(Map<?, ?> obj) {\n\t\t\tif(LangUtils.isEmpty(obj))\n\t\t\t\treturn null;\n\t\t\treturn obj.entrySet().iterator().next().getValue();\n\t\t}\n\n\t\t@Override\n\t\tpublic Object all(Object obj) {\n\t\t\treturn obj;\n\t\t}\n\t\t\n\t};", "modifier": "public static", "type": "TypeJudge", "declarator": "FirstObject = new TypeJudge(){\n\n\n\t\t@Override\n\t\tpublic Object ifIterable(Iterable<?> obj) {\n\t\t\tIterator<?> it = obj.iterator();\n\t\t\tif(it.hasNext()){\n\t\t\t\treturn it.next();\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifList(List list) {\n\t\t\tif(list.isEmpty())\n\t\t\t\treturn null;\n\t\t\treturn list.get(0);\n\t\t}\n\t\t\n\t\t@Override\n\t\tpublic Object ifArray(Object[] array) {\n\t\t\treturn array.length==0?null:array[0];\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifCollection(Collection col) {\n\t\t\tif(col.isEmpty())\n\t\t\t\treturn null;\n\t\t\treturn col.iterator().next();\n\t\t}\n\n\t\tpublic Object other(Object obj, Class<?> type) {\n\t\t\treturn obj;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifMap(Map<?, ?> obj) {\n\t\t\tif(LangUtils.isEmpty(obj))\n\t\t\t\treturn null;\n\t\t\treturn obj.entrySet().iterator().next().getValue();\n\t\t}\n\n\t\t@Override\n\t\tpublic Object all(Object obj) {\n\t\t\treturn obj;\n\t\t}\n\t\t\n\t}", "var_name": "FirstObject"}, {"original_string": "public static TypeJudge NotNullObject = new TypeJudgeAdapter(){\n\n\t\t@Override\n\t\tpublic Object ifArray(Object[] array) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifBoolean(Object obj) {\n\t\t\treturn Boolean.FALSE;\n\t\t}\n\t\t\n\t\tprotected Object defaultValueIfOhter(Object obj){\n\t\t\treturn EMPTY_OBJECT;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifCollection(Collection<?> obj) {\n\t\t\treturn Collections.emptySet();\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifDouble(Object obj) {\n\t\t\treturn Double.valueOf(0);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifFloat(Object obj) {\n\t\t\treturn Float.valueOf(0);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifInteger(Object obj) {\n\t\t\treturn Integer.valueOf(0);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifList(List<?> obj) {\n\t\t\treturn Collections.EMPTY_LIST;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifLong(Object obj) {\n\t\t\treturn Long.valueOf(0);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifMap(Map<?, ?> obj) {\n\t\t\treturn Collections.EMPTY_MAP;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifShort(Object obj) {\n\t\t\treturn Short.valueOf((short)0);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifString(Object obj) {\n\t\t\treturn \"\";\n\t\t}\n\n\t};", "modifier": "public static", "type": "TypeJudge", "declarator": "NotNullObject = new TypeJudgeAdapter(){\n\n\t\t@Override\n\t\tpublic Object ifArray(Object[] array) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifBoolean(Object obj) {\n\t\t\treturn Boolean.FALSE;\n\t\t}\n\t\t\n\t\tprotected Object defaultValueIfOhter(Object obj){\n\t\t\treturn EMPTY_OBJECT;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifCollection(Collection<?> obj) {\n\t\t\treturn Collections.emptySet();\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifDouble(Object obj) {\n\t\t\treturn Double.valueOf(0);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifFloat(Object obj) {\n\t\t\treturn Float.valueOf(0);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifInteger(Object obj) {\n\t\t\treturn Integer.valueOf(0);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifList(List<?> obj) {\n\t\t\treturn Collections.EMPTY_LIST;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifLong(Object obj) {\n\t\t\treturn Long.valueOf(0);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifMap(Map<?, ?> obj) {\n\t\t\treturn Collections.EMPTY_MAP;\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifShort(Object obj) {\n\t\t\treturn Short.valueOf((short)0);\n\t\t}\n\n\t\t@Override\n\t\tpublic Object ifString(Object obj) {\n\t\t\treturn \"\";\n\t\t}\n\n\t}", "var_name": "NotNullObject"}, {"original_string": "public static final double MB_SIZE = 1000.0*1000.0;", "modifier": "public static final", "type": "double", "declarator": "MB_SIZE = 1000.0*1000.0", "var_name": "MB_SIZE"}, {"original_string": "public static final double KB_SIZE = 1000.0;", "modifier": "public static final", "type": "double", "declarator": "KB_SIZE = 1000.0", "var_name": "KB_SIZE"}, {"original_string": "private static final boolean debug = true;", "modifier": "private static final", "type": "boolean", "declarator": "debug = true", "var_name": "debug"}, {"original_string": "private static Expression PRINT_SE = ExpressionFacotry.newExpression(\"${\", \"}\");", "modifier": "private static", "type": "Expression", "declarator": "PRINT_SE = ExpressionFacotry.newExpression(\"${\", \"}\")", "var_name": "PRINT_SE"}, {"original_string": "private static final String HEX_CHAR = \"0123456789ABCDEF\";", "modifier": "private static final", "type": "String", "declarator": "HEX_CHAR = \"0123456789ABCDEF\"", "var_name": "HEX_CHAR"}, {"original_string": "private static final NumberFormat NUMBER_FORMAT = NumberFormat.getInstance();", "modifier": "private static final", "type": "NumberFormat", "declarator": "NUMBER_FORMAT = NumberFormat.getInstance()", "var_name": "NUMBER_FORMAT"}], "methods": [{"identifier": "getBaseTypeClass", "parameters": "()", "modifiers": "public static", "return": "Collection<Class<?>>", "signature": "Collection<Class<?>> getBaseTypeClass()", "full_signature": "public static Collection<Class<?>> getBaseTypeClass()", "class_method_signature": "LangUtils.getBaseTypeClass()", "testcase": false, "constructor": false}, {"identifier": "isPrimitive", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPrimitive(Class<?> clazz)", "full_signature": "public static boolean isPrimitive(Class<?> clazz)", "class_method_signature": "LangUtils.isPrimitive(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isBaseType", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBaseType(Class<?> clazz)", "full_signature": "public static boolean isBaseType(Class<?> clazz)", "class_method_signature": "LangUtils.isBaseType(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isBaseTypeObject", "parameters": "(Object obj)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBaseTypeObject(Object obj)", "full_signature": "public static boolean isBaseTypeObject(Object obj)", "class_method_signature": "LangUtils.isBaseTypeObject(Object obj)", "testcase": false, "constructor": false}, {"identifier": "isSimpleType", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSimpleType(Class<?> clazz)", "full_signature": "public static boolean isSimpleType(Class<?> clazz)", "class_method_signature": "LangUtils.isSimpleType(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isSimpleTypeObject", "parameters": "(Object obj)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSimpleTypeObject(Object obj)", "full_signature": "public static boolean isSimpleTypeObject(Object obj)", "class_method_signature": "LangUtils.isSimpleTypeObject(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getSimpleClass", "parameters": "()", "modifiers": "public static", "return": "Collection<Class<?>>", "signature": "Collection<Class<?>> getSimpleClass()", "full_signature": "public static Collection<Class<?>> getSimpleClass()", "class_method_signature": "LangUtils.getSimpleClass()", "testcase": false, "constructor": false}, {"identifier": "isTimeClass", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isTimeClass(Class<?> clazz)", "full_signature": "public static boolean isTimeClass(Class<?> clazz)", "class_method_signature": "LangUtils.isTimeClass(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isTimeObject", "parameters": "(Object obj)", "modifiers": "public static", "return": "boolean", "signature": "boolean isTimeObject(Object obj)", "full_signature": "public static boolean isTimeObject(Object obj)", "class_method_signature": "LangUtils.isTimeObject(Object obj)", "testcase": false, "constructor": false}, {"identifier": "isMap", "parameters": "(Object obj)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMap(Object obj)", "full_signature": "public static boolean isMap(Object obj)", "class_method_signature": "LangUtils.isMap(Object obj)", "testcase": false, "constructor": false}, {"identifier": "isMapClass", "parameters": "(Class clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMapClass(Class clazz)", "full_signature": "public static boolean isMapClass(Class clazz)", "class_method_signature": "LangUtils.isMapClass(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "isCollectionClass", "parameters": "(Class clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isCollectionClass(Class clazz)", "full_signature": "public static boolean isCollectionClass(Class clazz)", "class_method_signature": "LangUtils.isCollectionClass(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "isIterableClass", "parameters": "(Class clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIterableClass(Class clazz)", "full_signature": "public static boolean isIterableClass(Class clazz)", "class_method_signature": "LangUtils.isIterableClass(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "isArrayClass", "parameters": "(Class clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isArrayClass(Class clazz)", "full_signature": "public static boolean isArrayClass(Class clazz)", "class_method_signature": "LangUtils.isArrayClass(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "getObjectClass", "parameters": "(Object obj)", "modifiers": "public static", "return": "Class", "signature": "Class getObjectClass(Object obj)", "full_signature": "public static Class getObjectClass(Object obj)", "class_method_signature": "LangUtils.getObjectClass(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getCauseServiceException", "parameters": "(Throwable e)", "modifiers": "public static", "return": "Throwable", "signature": "Throwable getCauseServiceException(Throwable e)", "full_signature": "public static Throwable getCauseServiceException(Throwable e)", "class_method_signature": "LangUtils.getCauseServiceException(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "getFinalCauseException", "parameters": "(Throwable e)", "modifiers": "public static", "return": "Throwable", "signature": "Throwable getFinalCauseException(Throwable e)", "full_signature": "public static Throwable getFinalCauseException(Throwable e)", "class_method_signature": "LangUtils.getFinalCauseException(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "getCauseException", "parameters": "(Throwable e, Class<T> root)", "modifiers": "public static", "return": "T", "signature": "T getCauseException(Throwable e, Class<T> root)", "full_signature": "public static T getCauseException(Throwable e, Class<T> root)", "class_method_signature": "LangUtils.getCauseException(Throwable e, Class<T> root)", "testcase": false, "constructor": false}, {"identifier": "getFirstNotJFishThrowable", "parameters": "(Throwable e)", "modifiers": "public static", "return": "Throwable", "signature": "Throwable getFirstNotJFishThrowable(Throwable e)", "full_signature": "public static Throwable getFirstNotJFishThrowable(Throwable e)", "class_method_signature": "LangUtils.getFirstNotJFishThrowable(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "isJFishThrowable", "parameters": "(Throwable t)", "modifiers": "public static", "return": "boolean", "signature": "boolean isJFishThrowable(Throwable t)", "full_signature": "public static boolean isJFishThrowable(Throwable t)", "class_method_signature": "LangUtils.isJFishThrowable(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "asServiceException", "parameters": "(Exception e)", "modifiers": "public static", "return": "ServiceException", "signature": "ServiceException asServiceException(Exception e)", "full_signature": "public static ServiceException asServiceException(Exception e)", "class_method_signature": "LangUtils.asServiceException(Exception e)", "testcase": false, "constructor": false}, {"identifier": "asServiceException", "parameters": "(String msg, Exception e)", "modifiers": "public static", "return": "ServiceException", "signature": "ServiceException asServiceException(String msg, Exception e)", "full_signature": "public static ServiceException asServiceException(String msg, Exception e)", "class_method_signature": "LangUtils.asServiceException(String msg, Exception e)", "testcase": false, "constructor": false}, {"identifier": "throwServiceException", "parameters": "(Exception e)", "modifiers": "public static", "return": "void", "signature": "void throwServiceException(Exception e)", "full_signature": "public static void throwServiceException(Exception e)", "class_method_signature": "LangUtils.throwServiceException(Exception e)", "testcase": false, "constructor": false}, {"identifier": "throwServiceException", "parameters": "(String msg)", "modifiers": "public static", "return": "void", "signature": "void throwServiceException(String msg)", "full_signature": "public static void throwServiceException(String msg)", "class_method_signature": "LangUtils.throwServiceException(String msg)", "testcase": false, "constructor": false}, {"identifier": "throwServiceException", "parameters": "(String msg, Exception e)", "modifiers": "public static", "return": "void", "signature": "void throwServiceException(String msg, Exception e)", "full_signature": "public static void throwServiceException(String msg, Exception e)", "class_method_signature": "LangUtils.throwServiceException(String msg, Exception e)", "testcase": false, "constructor": false}, {"identifier": "throwBaseException", "parameters": "(Exception e)", "modifiers": "public static", "return": "void", "signature": "void throwBaseException(Exception e)", "full_signature": "public static void throwBaseException(Exception e)", "class_method_signature": "LangUtils.throwBaseException(Exception e)", "testcase": false, "constructor": false}, {"identifier": "throwBaseException", "parameters": "(String msg)", "modifiers": "public static", "return": "void", "signature": "void throwBaseException(String msg)", "full_signature": "public static void throwBaseException(String msg)", "class_method_signature": "LangUtils.throwBaseException(String msg)", "testcase": false, "constructor": false}, {"identifier": "throwBaseException", "parameters": "(String msg, Exception e)", "modifiers": "public static", "return": "void", "signature": "void throwBaseException(String msg, Exception e)", "full_signature": "public static void throwBaseException(String msg, Exception e)", "class_method_signature": "LangUtils.throwBaseException(String msg, Exception e)", "testcase": false, "constructor": false}, {"identifier": "asBaseException", "parameters": "(Exception e)", "modifiers": "public static", "return": "BaseException", "signature": "BaseException asBaseException(Exception e)", "full_signature": "public static BaseException asBaseException(Exception e)", "class_method_signature": "LangUtils.asBaseException(Exception e)", "testcase": false, "constructor": false}, {"identifier": "asBaseException", "parameters": "(String msg)", "modifiers": "public static", "return": "BaseException", "signature": "BaseException asBaseException(String msg)", "full_signature": "public static BaseException asBaseException(String msg)", "class_method_signature": "LangUtils.asBaseException(String msg)", "testcase": false, "constructor": false}, {"identifier": "asBaseException", "parameters": "(String msg, Throwable e)", "modifiers": "public static", "return": "BaseException", "signature": "BaseException asBaseException(String msg, Throwable e)", "full_signature": "public static BaseException asBaseException(String msg, Throwable e)", "class_method_signature": "LangUtils.asBaseException(String msg, Throwable e)", "testcase": false, "constructor": false}, {"identifier": "throwIfNull", "parameters": "(Object value, String msg)", "modifiers": "public static", "return": "void", "signature": "void throwIfNull(Object value, String msg)", "full_signature": "public static void throwIfNull(Object value, String msg)", "class_method_signature": "LangUtils.throwIfNull(Object value, String msg)", "testcase": false, "constructor": false}, {"identifier": "block", "parameters": "(ArgsReturnableClosure block, Object...objects)", "modifiers": "public static", "return": "T", "signature": "T block(ArgsReturnableClosure block, Object...objects)", "full_signature": "public static T block(ArgsReturnableClosure block, Object...objects)", "class_method_signature": "LangUtils.block(ArgsReturnableClosure block, Object...objects)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(String str)", "modifiers": "public static", "return": "void", "signature": "void print(String str)", "full_signature": "public static void print(String str)", "class_method_signature": "LangUtils.print(String str)", "testcase": false, "constructor": false}, {"identifier": "print", "parameters": "(boolean print, String str)", "modifiers": "public static", "return": "void", "signature": "void print(boolean print, String str)", "full_signature": "public static void print(boolean print, String str)", "class_method_signature": "LangUtils.print(boolean print, String str)", "testcase": false, "constructor": false}, {"identifier": "println", "parameters": "(String str, Object...objects)", "modifiers": "public static", "return": "void", "signature": "void println(String str, Object...objects)", "full_signature": "public static void println(String str, Object...objects)", "class_method_signature": "LangUtils.println(String str, Object...objects)", "testcase": false, "constructor": false}, {"identifier": "debug", "parameters": "(String str, Object...objects)", "modifiers": "public static", "return": "void", "signature": "void debug(String str, Object...objects)", "full_signature": "public static void debug(String str, Object...objects)", "class_method_signature": "LangUtils.debug(String str, Object...objects)", "testcase": false, "constructor": false}, {"identifier": "printlnNamedArgs", "parameters": "(String str, Object...objects)", "modifiers": "public static", "return": "void", "signature": "void printlnNamedArgs(String str, Object...objects)", "full_signature": "public static void printlnNamedArgs(String str, Object...objects)", "class_method_signature": "LangUtils.printlnNamedArgs(String str, Object...objects)", "testcase": false, "constructor": false}, {"identifier": "comment", "parameters": "(String str, Object...objects)", "modifiers": "public static", "return": "void", "signature": "void comment(String str, Object...objects)", "full_signature": "public static void comment(String str, Object...objects)", "class_method_signature": "LangUtils.comment(String str, Object...objects)", "testcase": false, "constructor": false}, {"identifier": "comment", "parameters": "(boolean print, String str, Object...objects)", "modifiers": "public static", "return": "void", "signature": "void comment(boolean print, String str, Object...objects)", "full_signature": "public static void comment(boolean print, String str, Object...objects)", "class_method_signature": "LangUtils.comment(boolean print, String str, Object...objects)", "testcase": false, "constructor": false}, {"identifier": "println", "parameters": "(boolean print, String str, Object...objects)", "modifiers": "public static", "return": "void", "signature": "void println(boolean print, String str, Object...objects)", "full_signature": "public static void println(boolean print, String str, Object...objects)", "class_method_signature": "LangUtils.println(boolean print, String str, Object...objects)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(String str, Object...objects)", "modifiers": "public static", "return": "String", "signature": "String toString(String str, Object...objects)", "full_signature": "public static String toString(String str, Object...objects)", "class_method_signature": "LangUtils.toString(String str, Object...objects)", "testcase": false, "constructor": false}, {"identifier": "toStringWith", "parameters": "(boolean print, String str, boolean named, Object...objects)", "modifiers": "public static", "return": "String", "signature": "String toStringWith(boolean print, String str, boolean named, Object...objects)", "full_signature": "public static String toStringWith(boolean print, String str, boolean named, Object...objects)", "class_method_signature": "LangUtils.toStringWith(boolean print, String str, boolean named, Object...objects)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Throwable e, boolean detail)", "modifiers": "public static", "return": "String", "signature": "String toString(Throwable e, boolean detail)", "full_signature": "public static String toString(Throwable e, boolean detail)", "class_method_signature": "LangUtils.toString(Throwable e, boolean detail)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Object obj)", "modifiers": "public static", "return": "String", "signature": "String toString(Object obj)", "full_signature": "public static String toString(Object obj)", "class_method_signature": "LangUtils.toString(Object obj)", "testcase": false, "constructor": false}, {"identifier": "newString", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String newString(byte[] bytes)", "full_signature": "public static String newString(byte[] bytes)", "class_method_signature": "LangUtils.newString(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "newString", "parameters": "(byte[] bytes, String charset)", "modifiers": "public static", "return": "String", "signature": "String newString(byte[] bytes, String charset)", "full_signature": "public static String newString(byte[] bytes, String charset)", "class_method_signature": "LangUtils.newString(byte[] bytes, String charset)", "testcase": false, "constructor": false}, {"identifier": "changeCharset", "parameters": "(String str, String toCharset)", "modifiers": "public static", "return": "String", "signature": "String changeCharset(String str, String toCharset)", "full_signature": "public static String changeCharset(String str, String toCharset)", "class_method_signature": "LangUtils.changeCharset(String str, String toCharset)", "testcase": false, "constructor": false}, {"identifier": "changeCharset", "parameters": "(String str, String fromCharset, String toCharset)", "modifiers": "public static", "return": "String", "signature": "String changeCharset(String str, String fromCharset, String toCharset)", "full_signature": "public static String changeCharset(String str, String fromCharset, String toCharset)", "class_method_signature": "LangUtils.changeCharset(String str, String fromCharset, String toCharset)", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "(String source)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getBytes(String source)", "full_signature": "public static byte[] getBytes(String source)", "class_method_signature": "LangUtils.getBytes(String source)", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "(String source, String charset)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getBytes(String source, String charset)", "full_signature": "public static byte[] getBytes(String source, String charset)", "class_method_signature": "LangUtils.getBytes(String source, String charset)", "testcase": false, "constructor": false}, {"identifier": "toHex", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String toHex(byte[] bytes)", "full_signature": "public static String toHex(byte[] bytes)", "class_method_signature": "LangUtils.toHex(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "hex2Bytes", "parameters": "(String str)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] hex2Bytes(String str)", "full_signature": "public static byte[] hex2Bytes(String str)", "class_method_signature": "LangUtils.hex2Bytes(String str)", "testcase": false, "constructor": false}, {"identifier": "isHexString", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isHexString(String str)", "full_signature": "public static boolean isHexString(String str)", "class_method_signature": "LangUtils.isHexString(String str)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(Object... strings)", "modifiers": "public static", "return": "String", "signature": "String append(Object... strings)", "full_signature": "public static String append(Object... strings)", "class_method_signature": "LangUtils.append(Object... strings)", "testcase": false, "constructor": false}, {"identifier": "repeatString", "parameters": "(int count, String op)", "modifiers": "public static", "return": "String", "signature": "String repeatString(int count, String op)", "full_signature": "public static String repeatString(int count, String op)", "class_method_signature": "LangUtils.repeatString(int count, String op)", "testcase": false, "constructor": false}, {"identifier": "appendNotBlank", "parameters": "(Object... strings)", "modifiers": "public static", "return": "String", "signature": "String appendNotBlank(Object... strings)", "full_signature": "public static String appendNotBlank(Object... strings)", "class_method_signature": "LangUtils.appendNotBlank(Object... strings)", "testcase": false, "constructor": false}, {"identifier": "appendWith", "parameters": "(boolean ignoreBlank, Object... strings)", "modifiers": "public static", "return": "String", "signature": "String appendWith(boolean ignoreBlank, Object... strings)", "full_signature": "public static String appendWith(boolean ignoreBlank, Object... strings)", "class_method_signature": "LangUtils.appendWith(boolean ignoreBlank, Object... strings)", "testcase": false, "constructor": false}, {"identifier": "strings", "parameters": "(String... strings)", "modifiers": "public static", "return": "String", "signature": "String strings(String... strings)", "full_signature": "public static String strings(String... strings)", "class_method_signature": "LangUtils.strings(String... strings)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "(Object obj)", "modifiers": "public static", "return": "int", "signature": "int size(Object obj)", "full_signature": "public static int size(Object obj)", "class_method_signature": "LangUtils.size(Object obj)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "(Object obj, boolean reflectSizeMethod)", "modifiers": "public static", "return": "int", "signature": "int size(Object obj, boolean reflectSizeMethod)", "full_signature": "public static int size(Object obj, boolean reflectSizeMethod)", "class_method_signature": "LangUtils.size(Object obj, boolean reflectSizeMethod)", "testcase": false, "constructor": false}, {"identifier": "isBlank", "parameters": "(Object obj)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBlank(Object obj)", "full_signature": "public static boolean isBlank(Object obj)", "class_method_signature": "LangUtils.isBlank(Object obj)", "testcase": false, "constructor": false}, {"identifier": "isMultiple", "parameters": "(Object obj)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMultiple(Object obj)", "full_signature": "public static boolean isMultiple(Object obj)", "class_method_signature": "LangUtils.isMultiple(Object obj)", "testcase": false, "constructor": false}, {"identifier": "isMultipleAndNotEmpty", "parameters": "(Object obj)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMultipleAndNotEmpty(Object obj)", "full_signature": "public static boolean isMultipleAndNotEmpty(Object obj)", "class_method_signature": "LangUtils.isMultipleAndNotEmpty(Object obj)", "testcase": false, "constructor": false}, {"identifier": "isMultipleObjectClass", "parameters": "(Class clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMultipleObjectClass(Class clazz)", "full_signature": "public static boolean isMultipleObjectClass(Class clazz)", "class_method_signature": "LangUtils.isMultipleObjectClass(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "isArray", "parameters": "(Object obj)", "modifiers": "public static", "return": "boolean", "signature": "boolean isArray(Object obj)", "full_signature": "public static boolean isArray(Object obj)", "class_method_signature": "LangUtils.isArray(Object obj)", "testcase": false, "constructor": false}, {"identifier": "judgeType", "parameters": "(Object obj, TypeJudge executor)", "modifiers": "public static", "return": "Object", "signature": "Object judgeType(Object obj, TypeJudge executor)", "full_signature": "public static Object judgeType(Object obj, TypeJudge executor)", "class_method_signature": "LangUtils.judgeType(Object obj, TypeJudge executor)", "testcase": false, "constructor": false}, {"identifier": "judgeType", "parameters": "(Object obj, Class type, TypeJudge executor)", "modifiers": "public static", "return": "Object", "signature": "Object judgeType(Object obj, Class type, TypeJudge executor)", "full_signature": "public static Object judgeType(Object obj, Class type, TypeJudge executor)", "class_method_signature": "LangUtils.judgeType(Object obj, Class type, TypeJudge executor)", "testcase": false, "constructor": false}, {"identifier": "getFirst", "parameters": "(Object obj)", "modifiers": "public static", "return": "T", "signature": "T getFirst(Object obj)", "full_signature": "public static T getFirst(Object obj)", "class_method_signature": "LangUtils.getFirst(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getFirstOptional", "parameters": "(Object obj)", "modifiers": "public static", "return": "Optional<T>", "signature": "Optional<T> getFirstOptional(Object obj)", "full_signature": "public static Optional<T> getFirstOptional(Object obj)", "class_method_signature": "LangUtils.getFirstOptional(Object obj)", "testcase": false, "constructor": false}, {"identifier": "getFirstOrCreate", "parameters": "(Object obj, Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T getFirstOrCreate(Object obj, Class<T> clazz)", "full_signature": "public static T getFirstOrCreate(Object obj, Class<T> clazz)", "class_method_signature": "LangUtils.getFirstOrCreate(Object obj, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "emptyIfNull", "parameters": "(List<T> list)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> emptyIfNull(List<T> list)", "full_signature": "public static List<T> emptyIfNull(List<T> list)", "class_method_signature": "LangUtils.emptyIfNull(List<T> list)", "testcase": false, "constructor": false}, {"identifier": "emptyIfNull", "parameters": "(Map<K, V> map)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> emptyIfNull(Map<K, V> map)", "full_signature": "public static Map<K, V> emptyIfNull(Map<K, V> map)", "class_method_signature": "LangUtils.emptyIfNull(Map<K, V> map)", "testcase": false, "constructor": false}, {"identifier": "defIfEmpty", "parameters": "(List list, List def)", "modifiers": "public static", "return": "List", "signature": "List defIfEmpty(List list, List def)", "full_signature": "public static List defIfEmpty(List list, List def)", "class_method_signature": "LangUtils.defIfEmpty(List list, List def)", "testcase": false, "constructor": false}, {"identifier": "notNullValue", "parameters": "(Object obj, Class<T> type)", "modifiers": "public static", "return": "T", "signature": "T notNullValue(Object obj, Class<T> type)", "full_signature": "public static T notNullValue(Object obj, Class<T> type)", "class_method_signature": "LangUtils.notNullValue(Object obj, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "asMap", "parameters": "(Object... params)", "modifiers": "public static", "return": "Map", "signature": "Map asMap(Object... params)", "full_signature": "public static Map asMap(Object... params)", "class_method_signature": "LangUtils.asMap(Object... params)", "testcase": false, "constructor": false}, {"identifier": "asList", "parameters": "(Object array)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> asList(Object array)", "full_signature": "public static List<T> asList(Object array)", "class_method_signature": "LangUtils.asList(Object array)", "testcase": false, "constructor": false}, {"identifier": "asList", "parameters": "(Object array, boolean trimNull)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> asList(Object array, boolean trimNull)", "full_signature": "public static List<T> asList(Object array, boolean trimNull)", "class_method_signature": "LangUtils.asList(Object array, boolean trimNull)", "testcase": false, "constructor": false}, {"identifier": "getRadomString", "parameters": "(int length)", "modifiers": "public static", "return": "String", "signature": "String getRadomString(int length)", "full_signature": "public static String getRadomString(int length)", "class_method_signature": "LangUtils.getRadomString(int length)", "testcase": false, "constructor": false}, {"identifier": "getRadomNumberString", "parameters": "(int length)", "modifiers": "public static", "return": "String", "signature": "String getRadomNumberString(int length)", "full_signature": "public static String getRadomNumberString(int length)", "class_method_signature": "LangUtils.getRadomNumberString(int length)", "testcase": false, "constructor": false}, {"identifier": "printMemory", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void printMemory()", "full_signature": "public static void printMemory()", "class_method_signature": "LangUtils.printMemory()", "testcase": false, "constructor": false}, {"identifier": "printMemory", "parameters": "(String unit)", "modifiers": "public static", "return": "void", "signature": "void printMemory(String unit)", "full_signature": "public static void printMemory(String unit)", "class_method_signature": "LangUtils.printMemory(String unit)", "testcase": false, "constructor": false}, {"identifier": "statisticsMemory", "parameters": "(String unit)", "modifiers": "public static", "return": "String", "signature": "String statisticsMemory(String unit)", "full_signature": "public static String statisticsMemory(String unit)", "class_method_signature": "LangUtils.statisticsMemory(String unit)", "testcase": false, "constructor": false}, {"identifier": "closeIO", "parameters": "(Closeable io)", "modifiers": "public static", "return": "void", "signature": "void closeIO(Closeable io)", "full_signature": "public static void closeIO(Closeable io)", "class_method_signature": "LangUtils.closeIO(Closeable io)", "testcase": false, "constructor": false}, {"identifier": "hasNotElement", "parameters": "(Object obj)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasNotElement(Object obj)", "full_signature": "public static boolean hasNotElement(Object obj)", "class_method_signature": "LangUtils.hasNotElement(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hasElement", "parameters": "(Object obj)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasElement(Object obj)", "full_signature": "public static boolean hasElement(Object obj)", "class_method_signature": "LangUtils.hasElement(Object obj)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(Object obj)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(Object obj)", "full_signature": "public static boolean isEmpty(Object obj)", "class_method_signature": "LangUtils.isEmpty(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hasElement", "parameters": "(Object[] obj)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasElement(Object[] obj)", "full_signature": "public static boolean hasElement(Object[] obj)", "class_method_signature": "LangUtils.hasElement(Object[] obj)", "testcase": false, "constructor": false}, {"identifier": "hasElement", "parameters": "(Map map)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasElement(Map map)", "full_signature": "public static boolean hasElement(Map map)", "class_method_signature": "LangUtils.hasElement(Map map)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(Map map)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(Map map)", "full_signature": "public static boolean isEmpty(Map map)", "class_method_signature": "LangUtils.isEmpty(Map map)", "testcase": false, "constructor": false}, {"identifier": "isNotEmpty", "parameters": "(Map map)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotEmpty(Map map)", "full_signature": "public static boolean isNotEmpty(Map map)", "class_method_signature": "LangUtils.isNotEmpty(Map map)", "testcase": false, "constructor": false}, {"identifier": "hasElement", "parameters": "(Collection col)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasElement(Collection col)", "full_signature": "public static boolean hasElement(Collection col)", "class_method_signature": "LangUtils.hasElement(Collection col)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(Collection col)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(Collection col)", "full_signature": "public static boolean isEmpty(Collection col)", "class_method_signature": "LangUtils.isEmpty(Collection col)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(Object[] arrays)", "modifiers": "public static", "return": "boolean", "signature": "boolean isEmpty(Object[] arrays)", "full_signature": "public static boolean isEmpty(Object[] arrays)", "class_method_signature": "LangUtils.isEmpty(Object[] arrays)", "testcase": false, "constructor": false}, {"identifier": "isNullOrEmptyObject", "parameters": "(Object object)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNullOrEmptyObject(Object object)", "full_signature": "public static boolean isNullOrEmptyObject(Object object)", "class_method_signature": "LangUtils.isNullOrEmptyObject(Object object)", "testcase": false, "constructor": false}, {"identifier": "isNotEmpty", "parameters": "(Collection col)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNotEmpty(Collection col)", "full_signature": "public static boolean isNotEmpty(Collection col)", "class_method_signature": "LangUtils.isNotEmpty(Collection col)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj1, Object obj2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(Object obj1, Object obj2)", "full_signature": "public static boolean equals(Object obj1, Object obj2)", "class_method_signature": "LangUtils.equals(Object obj1, Object obj2)", "testcase": false, "constructor": false}, {"identifier": "equalsIgnoreCase", "parameters": "(String str1, String str2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equalsIgnoreCase(String str1, String str2)", "full_signature": "public static boolean equalsIgnoreCase(String str1, String str2)", "class_method_signature": "LangUtils.equalsIgnoreCase(String str1, String str2)", "testcase": false, "constructor": false}, {"identifier": "asBufferedReader", "parameters": "(InputStream in)", "modifiers": "public static", "return": "BufferedReader", "signature": "BufferedReader asBufferedReader(InputStream in)", "full_signature": "public static BufferedReader asBufferedReader(InputStream in)", "class_method_signature": "LangUtils.asBufferedReader(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "getBeanOrder", "parameters": "(Object obj)", "modifiers": "private static", "return": "int", "signature": "int getBeanOrder(Object obj)", "full_signature": "private static int getBeanOrder(Object obj)", "class_method_signature": "LangUtils.getBeanOrder(Object obj)", "testcase": false, "constructor": false}, {"identifier": "asc", "parameters": "(List<T> list)", "modifiers": "public static", "return": "void", "signature": "void asc(List<T> list)", "full_signature": "public static void asc(List<T> list)", "class_method_signature": "LangUtils.asc(List<T> list)", "testcase": false, "constructor": false}, {"identifier": "desc", "parameters": "(List<T> list)", "modifiers": "public static", "return": "void", "signature": "void desc(List<T> list)", "full_signature": "public static void desc(List<T> list)", "class_method_signature": "LangUtils.desc(List<T> list)", "testcase": false, "constructor": false}, {"identifier": "asc", "parameters": "(T[] array)", "modifiers": "public static", "return": "void", "signature": "void asc(T[] array)", "full_signature": "public static void asc(T[] array)", "class_method_signature": "LangUtils.asc(T[] array)", "testcase": false, "constructor": false}, {"identifier": "desc", "parameters": "(T[] array)", "modifiers": "public static", "return": "void", "signature": "void desc(T[] array)", "full_signature": "public static void desc(T[] array)", "class_method_signature": "LangUtils.desc(T[] array)", "testcase": false, "constructor": false}, {"identifier": "await", "parameters": "(long seconds)", "modifiers": "public static", "return": "void", "signature": "void await(long seconds)", "full_signature": "public static void await(long seconds)", "class_method_signature": "LangUtils.await(long seconds)", "testcase": false, "constructor": false}, {"identifier": "awaitInMillis", "parameters": "(long millis)", "modifiers": "public static", "return": "void", "signature": "void awaitInMillis(long millis)", "full_signature": "public static void awaitInMillis(long millis)", "class_method_signature": "LangUtils.awaitInMillis(long millis)", "testcase": false, "constructor": false}, {"identifier": "isIterable", "parameters": "(Object object)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIterable(Object object)", "full_signature": "public static boolean isIterable(Object object)", "class_method_signature": "LangUtils.isIterable(Object object)", "testcase": false, "constructor": false}, {"identifier": "convertIterator", "parameters": "(Object value)", "modifiers": "public static", "return": "Iterator", "signature": "Iterator convertIterator(Object value)", "full_signature": "public static Iterator convertIterator(Object value)", "class_method_signature": "LangUtils.convertIterator(Object value)", "testcase": false, "constructor": false}, {"identifier": "fetchNotNull", "parameters": "(T...args)", "modifiers": "public static", "return": "T", "signature": "T fetchNotNull(T...args)", "full_signature": "public static T fetchNotNull(T...args)", "class_method_signature": "LangUtils.fetchNotNull(T...args)", "testcase": false, "constructor": false}, {"identifier": "filterMap", "parameters": "(Map map, String...patterns)", "modifiers": "public static", "return": "void", "signature": "void filterMap(Map map, String...patterns)", "full_signature": "public static void filterMap(Map map, String...patterns)", "class_method_signature": "LangUtils.filterMap(Map map, String...patterns)", "testcase": false, "constructor": false}, {"identifier": "strCastTo", "parameters": "(String str, Class<T> toType)", "modifiers": "public static", "return": "T", "signature": "T strCastTo(String str, Class<T> toType)", "full_signature": "public static T strCastTo(String str, Class<T> toType)", "class_method_signature": "LangUtils.strCastTo(String str, Class<T> toType)", "testcase": false, "constructor": false}, {"identifier": "tryCastTo", "parameters": "(Object val, Class<T> toType)", "modifiers": "public static", "return": "T", "signature": "T tryCastTo(Object val, Class<T> toType)", "full_signature": "public static T tryCastTo(Object val, Class<T> toType)", "class_method_signature": "LangUtils.tryCastTo(Object val, Class<T> toType)", "testcase": false, "constructor": false}, {"identifier": "isMapContainsInstance", "parameters": "(Map<String, Object> model, Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMapContainsInstance(Map<String, Object> model, Class<?> clazz)", "full_signature": "public static boolean isMapContainsInstance(Map<String, Object> model, Class<?> clazz)", "class_method_signature": "LangUtils.isMapContainsInstance(Map<String, Object> model, Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Collection<?> collection, int start, int end)", "modifiers": "public static", "return": "void", "signature": "void remove(Collection<?> collection, int start, int end)", "full_signature": "public static void remove(Collection<?> collection, int start, int end)", "class_method_signature": "LangUtils.remove(Collection<?> collection, int start, int end)", "testcase": false, "constructor": false}, {"identifier": "toMap", "parameters": "(Properties prop)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> toMap(Properties prop)", "full_signature": "public static Map<String, String> toMap(Properties prop)", "class_method_signature": "LangUtils.toMap(Properties prop)", "testcase": false, "constructor": false}, {"identifier": "mapListToMap", "parameters": "(List<? extends Map> datas, String keyName, String valueName)", "modifiers": "public static", "return": "Map", "signature": "Map mapListToMap(List<? extends Map> datas, String keyName, String valueName)", "full_signature": "public static Map mapListToMap(List<? extends Map> datas, String keyName, String valueName)", "class_method_signature": "LangUtils.mapListToMap(List<? extends Map> datas, String keyName, String valueName)", "testcase": false, "constructor": false}, {"identifier": "asListWithType", "parameters": "(Class<T> clazz, Object...objects)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> asListWithType(Class<T> clazz, Object...objects)", "full_signature": "public static List<T> asListWithType(Class<T> clazz, Object...objects)", "class_method_signature": "LangUtils.asListWithType(Class<T> clazz, Object...objects)", "testcase": false, "constructor": false}, {"identifier": "stripNull", "parameters": "(Collection<T> collections)", "modifiers": "public static", "return": "Collection<T>", "signature": "Collection<T> stripNull(Collection<T> collections)", "full_signature": "public static Collection<T> stripNull(Collection<T> collections)", "class_method_signature": "LangUtils.stripNull(Collection<T> collections)", "testcase": false, "constructor": false}, {"identifier": "newArrayList", "parameters": "()", "modifiers": "public static", "return": "List<T>", "signature": "List<T> newArrayList()", "full_signature": "public static List<T> newArrayList()", "class_method_signature": "LangUtils.newArrayList()", "testcase": false, "constructor": false}, {"identifier": "newArrayList", "parameters": "(int size)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> newArrayList(int size)", "full_signature": "public static List<T> newArrayList(int size)", "class_method_signature": "LangUtils.newArrayList(int size)", "testcase": false, "constructor": false}, {"identifier": "newList", "parameters": "(T...objs)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> newList(T...objs)", "full_signature": "public static List<T> newList(T...objs)", "class_method_signature": "LangUtils.newList(T...objs)", "testcase": false, "constructor": false}, {"identifier": "newArrayList", "parameters": "(T...objs)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> newArrayList(T...objs)", "full_signature": "public static List<T> newArrayList(T...objs)", "class_method_signature": "LangUtils.newArrayList(T...objs)", "testcase": false, "constructor": false}, {"identifier": "newHashSet", "parameters": "()", "modifiers": "public static", "return": "HashSet<T>", "signature": "HashSet<T> newHashSet()", "full_signature": "public static HashSet<T> newHashSet()", "class_method_signature": "LangUtils.newHashSet()", "testcase": false, "constructor": false}, {"identifier": "newMap", "parameters": "()", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> newMap()", "full_signature": "public static Map<K, V> newMap()", "class_method_signature": "LangUtils.newMap()", "testcase": false, "constructor": false}, {"identifier": "newHashMap", "parameters": "(Object... params)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> newHashMap(Object... params)", "full_signature": "public static Map<K, V> newHashMap(Object... params)", "class_method_signature": "LangUtils.newHashMap(Object... params)", "testcase": false, "constructor": false}, {"identifier": "newHashMap", "parameters": "(int size)", "modifiers": "public static", "return": "Map<K, V>", "signature": "Map<K, V> newHashMap(int size)", "full_signature": "public static Map<K, V> newHashMap(int size)", "class_method_signature": "LangUtils.newHashMap(int size)", "testcase": false, "constructor": false}, {"identifier": "asBusinessException", "parameters": "(Exception e)", "modifiers": "public static", "return": "BusinessException", "signature": "BusinessException asBusinessException(Exception e)", "full_signature": "public static BusinessException asBusinessException(Exception e)", "class_method_signature": "LangUtils.asBusinessException(Exception e)", "testcase": false, "constructor": false}, {"identifier": "asBusinessException", "parameters": "(String msg, Exception e)", "modifiers": "public static", "return": "BusinessException", "signature": "BusinessException asBusinessException(String msg, Exception e)", "full_signature": "public static BusinessException asBusinessException(String msg, Exception e)", "class_method_signature": "LangUtils.asBusinessException(String msg, Exception e)", "testcase": false, "constructor": false}, {"identifier": "getBaseExceptonCode", "parameters": "(Exception e)", "modifiers": "public static", "return": "String", "signature": "String getBaseExceptonCode(Exception e)", "full_signature": "public static String getBaseExceptonCode(Exception e)", "class_method_signature": "LangUtils.getBaseExceptonCode(Exception e)", "testcase": false, "constructor": false}, {"identifier": "isError", "parameters": "(Exception e, String errorCode)", "modifiers": "public static", "return": "boolean", "signature": "boolean isError(Exception e, String errorCode)", "full_signature": "public static boolean isError(Exception e, String errorCode)", "class_method_signature": "LangUtils.isError(Exception e, String errorCode)", "testcase": false, "constructor": false}, {"identifier": "matche", "parameters": "(boolean cache, String regex, String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean matche(boolean cache, String regex, String str)", "full_signature": "public static boolean matche(boolean cache, String regex, String str)", "class_method_signature": "LangUtils.matche(boolean cache, String regex, String str)", "testcase": false, "constructor": false}, {"identifier": "generateToken", "parameters": "(String... strs)", "modifiers": "public static", "return": "String", "signature": "String generateToken(String... strs)", "full_signature": "public static String generateToken(String... strs)", "class_method_signature": "LangUtils.generateToken(String... strs)", "testcase": false, "constructor": false}, {"identifier": "isWord", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isWord(String str)", "full_signature": "public static boolean isWord(String str)", "class_method_signature": "LangUtils.isWord(String str)", "testcase": false, "constructor": false}, {"identifier": "formatValue", "parameters": "(Object value, String dataFormat)", "modifiers": "public static", "return": "Object", "signature": "Object formatValue(Object value, String dataFormat)", "full_signature": "public static Object formatValue(Object value, String dataFormat)", "class_method_signature": "LangUtils.formatValue(Object value, String dataFormat)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(Number num, String pattern)", "modifiers": "public static", "return": "String", "signature": "String format(Number num, String pattern)", "full_signature": "public static String format(Number num, String pattern)", "class_method_signature": "LangUtils.format(Number num, String pattern)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(Number num)", "modifiers": "public static", "return": "String", "signature": "String format(Number num)", "full_signature": "public static String format(Number num)", "class_method_signature": "LangUtils.format(Number num)", "testcase": false, "constructor": false}, {"identifier": "padLeft", "parameters": "(String s, int taotalLength, String append)", "modifiers": "public static", "return": "String", "signature": "String padLeft(String s, int taotalLength, String append)", "full_signature": "public static String padLeft(String s, int taotalLength, String append)", "class_method_signature": "LangUtils.padLeft(String s, int taotalLength, String append)", "testcase": false, "constructor": false}, {"identifier": "padRight", "parameters": "(String s, int taotalLength, String append)", "modifiers": "public static", "return": "String", "signature": "String padRight(String s, int taotalLength, String append)", "full_signature": "public static String padRight(String s, int taotalLength, String append)", "class_method_signature": "LangUtils.padRight(String s, int taotalLength, String append)", "testcase": false, "constructor": false}, {"identifier": "pad", "parameters": "(String s, int taotalLength, char append, boolean padLeft)", "modifiers": "public static", "return": "String", "signature": "String pad(String s, int taotalLength, char append, boolean padLeft)", "full_signature": "public static String pad(String s, int taotalLength, char append, boolean padLeft)", "class_method_signature": "LangUtils.pad(String s, int taotalLength, char append, boolean padLeft)", "testcase": false, "constructor": false}, {"identifier": "fixedLengthString", "parameters": "(String str, int length, String padString)", "modifiers": "public static", "return": "String", "signature": "String fixedLengthString(String str, int length, String padString)", "full_signature": "public static String fixedLengthString(String str, int length, String padString)", "class_method_signature": "LangUtils.fixedLengthString(String str, int length, String padString)", "testcase": false, "constructor": false}, {"identifier": "safeGetValue", "parameters": "(Object elemetns, int index)", "modifiers": "public static", "return": "Object", "signature": "Object safeGetValue(Object elemetns, int index)", "full_signature": "public static Object safeGetValue(Object elemetns, int index)", "class_method_signature": "LangUtils.safeGetValue(Object elemetns, int index)", "testcase": false, "constructor": false}, {"identifier": "safeGetValue", "parameters": "(Object elemetns, int index, Object def)", "modifiers": "public static", "return": "Object", "signature": "Object safeGetValue(Object elemetns, int index, Object def)", "full_signature": "public static Object safeGetValue(Object elemetns, int index, Object def)", "class_method_signature": "LangUtils.safeGetValue(Object elemetns, int index, Object def)", "testcase": false, "constructor": false}, {"identifier": "hexToLong", "parameters": "(String hexStr)", "modifiers": "public static", "return": "Long", "signature": "Long hexToLong(String hexStr)", "full_signature": "public static Long hexToLong(String hexStr)", "class_method_signature": "LangUtils.hexToLong(String hexStr)", "testcase": false, "constructor": false}, {"identifier": "decToHexString", "parameters": "(String decStr)", "modifiers": "public static", "return": "String", "signature": "String decToHexString(String decStr)", "full_signature": "public static String decToHexString(String decStr)", "class_method_signature": "LangUtils.decToHexString(String decStr)", "testcase": false, "constructor": false}, {"identifier": "decToHexString", "parameters": "(String decStr, int length)", "modifiers": "public static", "return": "String", "signature": "String decToHexString(String decStr, int length)", "full_signature": "public static String decToHexString(String decStr, int length)", "class_method_signature": "LangUtils.decToHexString(String decStr, int length)", "testcase": false, "constructor": false}, {"identifier": "decToRadixString", "parameters": "(String decStr, int radix, int length)", "modifiers": "public static", "return": "String", "signature": "String decToRadixString(String decStr, int radix, int length)", "full_signature": "public static String decToRadixString(String decStr, int radix, int length)", "class_method_signature": "LangUtils.decToRadixString(String decStr, int radix, int length)", "testcase": false, "constructor": false}, {"identifier": "encodeUrl", "parameters": "(String url)", "modifiers": "public static", "return": "String", "signature": "String encodeUrl(String url)", "full_signature": "public static String encodeUrl(String url)", "class_method_signature": "LangUtils.encodeUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "decodeUrl", "parameters": "(String url)", "modifiers": "public static", "return": "String", "signature": "String decodeUrl(String url)", "full_signature": "public static String decodeUrl(String url)", "class_method_signature": "LangUtils.decodeUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "safeUrlEncode", "parameters": "(String base64)", "modifiers": "public static", "return": "String", "signature": "String safeUrlEncode(String base64)", "full_signature": "public static String safeUrlEncode(String base64)", "class_method_signature": "LangUtils.safeUrlEncode(String base64)", "testcase": false, "constructor": false}, {"identifier": "safeUrlEncode", "parameters": "(String base64, boolean bouncyCastle)", "modifiers": "public static", "return": "String", "signature": "String safeUrlEncode(String base64, boolean bouncyCastle)", "full_signature": "public static String safeUrlEncode(String base64, boolean bouncyCastle)", "class_method_signature": "LangUtils.safeUrlEncode(String base64, boolean bouncyCastle)", "testcase": false, "constructor": false}, {"identifier": "safeUrldecode", "parameters": "(String base64, boolean bouncyCastle)", "modifiers": "public static", "return": "String", "signature": "String safeUrldecode(String base64, boolean bouncyCastle)", "full_signature": "public static String safeUrldecode(String base64, boolean bouncyCastle)", "class_method_signature": "LangUtils.safeUrldecode(String base64, boolean bouncyCastle)", "testcase": false, "constructor": false}, {"identifier": "isDigitString", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDigitString(String str)", "full_signature": "public static boolean isDigitString(String str)", "class_method_signature": "LangUtils.isDigitString(String str)", "testcase": false, "constructor": false}, {"identifier": "cast", "parameters": "(Object obj, Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T cast(Object obj, Class<T> clazz)", "full_signature": "public static T cast(Object obj, Class<T> clazz)", "class_method_signature": "LangUtils.cast(Object obj, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "firstNotNull", "parameters": "(Object...objects)", "modifiers": "public static", "return": "Object", "signature": "Object firstNotNull(Object...objects)", "full_signature": "public static Object firstNotNull(Object...objects)", "class_method_signature": "LangUtils.firstNotNull(Object...objects)", "testcase": false, "constructor": false}, {"identifier": "makeGenericArray", "parameters": "(Class<T> cls, int length)", "modifiers": "public static", "return": "T[]", "signature": "T[] makeGenericArray(Class<T> cls, int length)", "full_signature": "public static T[] makeGenericArray(Class<T> cls, int length)", "class_method_signature": "LangUtils.makeGenericArray(Class<T> cls, int length)", "testcase": false, "constructor": false}, {"identifier": "lockAction", "parameters": "(Lock lock, Runnable action)", "modifiers": "public static", "return": "void", "signature": "void lockAction(Lock lock, Runnable action)", "full_signature": "public static void lockAction(Lock lock, Runnable action)", "class_method_signature": "LangUtils.lockAction(Lock lock, Runnable action)", "testcase": false, "constructor": false}, {"identifier": "isNumberObject", "parameters": "(Object val)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNumberObject(Object val)", "full_signature": "public static boolean isNumberObject(Object val)", "class_method_signature": "LangUtils.isNumberObject(Object val)", "testcase": false, "constructor": false}, {"identifier": "isNumberType", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNumberType(Class<?> clazz)", "full_signature": "public static boolean isNumberType(Class<?> clazz)", "class_method_signature": "LangUtils.isNumberType(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isIntegralType", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIntegralType(Class<?> clazz)", "full_signature": "public static boolean isIntegralType(Class<?> clazz)", "class_method_signature": "LangUtils.isIntegralType(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getPid", "parameters": "()", "modifiers": "public static", "return": "Optional<String>", "signature": "Optional<String> getPid()", "full_signature": "public static Optional<String> getPid()", "class_method_signature": "LangUtils.getPid()", "testcase": false, "constructor": false}, {"identifier": "getOsName", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getOsName()", "full_signature": "public static String getOsName()", "class_method_signature": "LangUtils.getOsName()", "testcase": false, "constructor": false}, {"identifier": "isWindowsOS", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean isWindowsOS()", "full_signature": "public static boolean isWindowsOS()", "class_method_signature": "LangUtils.isWindowsOS()", "testcase": false, "constructor": false}, {"identifier": "converTo36Radix", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String converTo36Radix(String str)", "full_signature": "public static String converTo36Radix(String str)", "class_method_signature": "LangUtils.converTo36Radix(String str)", "testcase": false, "constructor": false}, {"identifier": "getCrc32", "parameters": "(String str)", "modifiers": "public static", "return": "long", "signature": "long getCrc32(String str)", "full_signature": "public static long getCrc32(String str)", "class_method_signature": "LangUtils.getCrc32(String str)", "testcase": false, "constructor": false}, {"identifier": "getCrc32", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "long", "signature": "long getCrc32(byte[] bytes)", "full_signature": "public static long getCrc32(byte[] bytes)", "class_method_signature": "LangUtils.getCrc32(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "randomUUID", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String randomUUID()", "full_signature": "public static String randomUUID()", "class_method_signature": "LangUtils.randomUUID()", "testcase": false, "constructor": false}, {"identifier": "sensitive", "parameters": "(String sensitive, int sensitiveIndex)", "modifiers": "public static", "return": "String", "signature": "String sensitive(String sensitive, int sensitiveIndex)", "full_signature": "public static String sensitive(String sensitive, int sensitiveIndex)", "class_method_signature": "LangUtils.sensitive(String sensitive, int sensitiveIndex)", "testcase": false, "constructor": false}, {"identifier": "sensitive", "parameters": "(String sensitive, int keepPlainTextSize, String replaceStr)", "modifiers": "public static", "return": "String", "signature": "String sensitive(String sensitive, int keepPlainTextSize, String replaceStr)", "full_signature": "public static String sensitive(String sensitive, int keepPlainTextSize, String replaceStr)", "class_method_signature": "LangUtils.sensitive(String sensitive, int keepPlainTextSize, String replaceStr)", "testcase": false, "constructor": false}, {"identifier": "sensitiveFromRight", "parameters": "(String sensitive, int keepPlainTextSize, String replaceStr)", "modifiers": "public static", "return": "String", "signature": "String sensitiveFromRight(String sensitive, int keepPlainTextSize, String replaceStr)", "full_signature": "public static String sensitiveFromRight(String sensitive, int keepPlainTextSize, String replaceStr)", "class_method_signature": "LangUtils.sensitiveFromRight(String sensitive, int keepPlainTextSize, String replaceStr)", "testcase": false, "constructor": false}, {"identifier": "sensitiveFromLeft", "parameters": "(String sensitive, int keepPlainTextSize, String replaceStr)", "modifiers": "public static", "return": "String", "signature": "String sensitiveFromLeft(String sensitive, int keepPlainTextSize, String replaceStr)", "full_signature": "public static String sensitiveFromLeft(String sensitive, int keepPlainTextSize, String replaceStr)", "class_method_signature": "LangUtils.sensitiveFromLeft(String sensitive, int keepPlainTextSize, String replaceStr)", "testcase": false, "constructor": false}], "file": "core/modules/common/src/main/java/org/onetwo/common/utils/LangUtils.java"}, "focal_method": {"identifier": "isDigitString", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isDigitString(String str){\n\t\treturn DIGIT.matcher(str).matches();\n\t}", "signature": "boolean isDigitString(String str)", "full_signature": "public static boolean isDigitString(String str)", "class_method_signature": "LangUtils.isDigitString(String str)", "testcase": false, "constructor": false, "invocations": ["matches", "matcher"]}, "repository": {"repo_id": 47802308, "url": "https://github.com/wayshall/onetwo", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 16, "size": 57582, "license": "licensed"}}