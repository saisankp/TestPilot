{"test_class": {"identifier": "SequenceRepositoryImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate TestTransactionManager testTransactionManager;", "modifier": "@Autowired\n\tprivate", "type": "TestTransactionManager", "declarator": "testTransactionManager", "var_name": "testTransactionManager"}, {"original_string": "@Autowired\n\tprivate HibernateTemplate hibernateTemplate;", "modifier": "@Autowired\n\tprivate", "type": "HibernateTemplate", "declarator": "hibernateTemplate", "var_name": "hibernateTemplate"}, {"original_string": "private SequenceRepositoryImpl sequenceRepository;", "modifier": "private", "type": "SequenceRepositoryImpl", "declarator": "sequenceRepository", "var_name": "sequenceRepository"}], "file": "commons/flow/src/test/java/org/openehealth/ipf/commons/flow/repository/SequenceRepositoryImplTest.java"}, "test_case": {"identifier": "testNextNumber", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testNextNumber() throws Exception {\n\t\tsequenceRepository.initSequence();\n\t\ttestTransactionManager.commitTransaction();\n\t\ttestTransactionManager.beginTransaction();\n\t\tfor (long i = 1; i < 10; i++) {\n\t\t\tlong number = sequenceRepository.nextNumber();\n\t\t\tassertEquals(i, number);\n\t\t}\n\t}", "signature": "void testNextNumber()", "full_signature": "@Test public void testNextNumber()", "class_method_signature": "SequenceRepositoryImplTest.testNextNumber()", "testcase": true, "constructor": false, "invocations": ["initSequence", "commitTransaction", "beginTransaction", "nextNumber", "assertEquals"]}, "focal_class": {"identifier": "SequenceRepositoryImpl", "superclass": "extends HibernateDaoSupport", "interfaces": "implements SequenceRepository", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SequenceRepositoryImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SequenceRepositoryImpl.class)", "var_name": "LOG"}], "methods": [{"identifier": "initSequence", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initSequence()", "full_signature": "@Override public void initSequence()", "class_method_signature": "SequenceRepositoryImpl.initSequence()", "testcase": false, "constructor": false}, {"identifier": "nextNumber", "parameters": "()", "modifiers": "@Override public", "return": "Long", "signature": "Long nextNumber()", "full_signature": "@Override public Long nextNumber()", "class_method_signature": "SequenceRepositoryImpl.nextNumber()", "testcase": false, "constructor": false}, {"identifier": "lockNumber", "parameters": "()", "modifiers": "private", "return": "FlowNumber", "signature": "FlowNumber lockNumber()", "full_signature": "private FlowNumber lockNumber()", "class_method_signature": "SequenceRepositoryImpl.lockNumber()", "testcase": false, "constructor": false}], "file": "commons/flow/src/main/java/org/openehealth/ipf/commons/flow/repository/SequenceRepositoryImpl.java"}, "focal_method": {"identifier": "nextNumber", "parameters": "()", "modifiers": "@Override public", "return": "Long", "body": "@Override\n    public Long nextNumber() {\n        return lockNumber().incrementAndGet();\n    }", "signature": "Long nextNumber()", "full_signature": "@Override public Long nextNumber()", "class_method_signature": "SequenceRepositoryImpl.nextNumber()", "testcase": false, "constructor": false, "invocations": ["incrementAndGet", "lockNumber"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}