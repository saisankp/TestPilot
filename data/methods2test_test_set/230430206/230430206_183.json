{"test_class": {"identifier": "MultiTransactionRecordTest", "superclass": "extends ZKTestCase", "interfaces": "", "fields": [], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/MultiTransactionRecordTest.java"}, "test_case": {"identifier": "testEmptyRoundTrip", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmptyRoundTrip() throws IOException {\n        MultiTransactionRecord request = new MultiTransactionRecord();\n        MultiTransactionRecord decodedRequest = codeDecode(request);\n\n        Assert.assertEquals(request, decodedRequest);\n        Assert.assertEquals(request.hashCode(), decodedRequest.hashCode());\n    }", "signature": "void testEmptyRoundTrip()", "full_signature": "@Test public void testEmptyRoundTrip()", "class_method_signature": "MultiTransactionRecordTest.testEmptyRoundTrip()", "testcase": true, "constructor": false, "invocations": ["codeDecode", "assertEquals", "assertEquals", "hashCode", "hashCode"]}, "focal_class": {"identifier": "MultiTransactionRecord", "superclass": "", "interfaces": "implements Record, Iterable<Op>", "fields": [{"original_string": "private List<Op> ops = new ArrayList<Op>();", "modifier": "private", "type": "List<Op>", "declarator": "ops = new ArrayList<Op>()", "var_name": "ops"}], "methods": [{"identifier": "MultiTransactionRecord", "parameters": "()", "modifiers": "public", "return": "", "signature": " MultiTransactionRecord()", "full_signature": "public  MultiTransactionRecord()", "class_method_signature": "MultiTransactionRecord.MultiTransactionRecord()", "testcase": false, "constructor": true}, {"identifier": "MultiTransactionRecord", "parameters": "(Iterable<Op> ops)", "modifiers": "public", "return": "", "signature": " MultiTransactionRecord(Iterable<Op> ops)", "full_signature": "public  MultiTransactionRecord(Iterable<Op> ops)", "class_method_signature": "MultiTransactionRecord.MultiTransactionRecord(Iterable<Op> ops)", "testcase": false, "constructor": true}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Op>", "signature": "Iterator<Op> iterator()", "full_signature": "@Override public Iterator<Op> iterator()", "class_method_signature": "MultiTransactionRecord.iterator()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Op op)", "modifiers": "public", "return": "void", "signature": "void add(Op op)", "full_signature": "public void add(Op op)", "class_method_signature": "MultiTransactionRecord.add(Op op)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "MultiTransactionRecord.size()", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(OutputArchive archive, String tag)", "modifiers": "@Override public", "return": "void", "signature": "void serialize(OutputArchive archive, String tag)", "full_signature": "@Override public void serialize(OutputArchive archive, String tag)", "class_method_signature": "MultiTransactionRecord.serialize(OutputArchive archive, String tag)", "testcase": false, "constructor": false}, {"identifier": "deserialize", "parameters": "(InputArchive archive, String tag)", "modifiers": "@Override public", "return": "void", "signature": "void deserialize(InputArchive archive, String tag)", "full_signature": "@Override public void deserialize(InputArchive archive, String tag)", "class_method_signature": "MultiTransactionRecord.deserialize(InputArchive archive, String tag)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "MultiTransactionRecord.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "MultiTransactionRecord.hashCode()", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/MultiTransactionRecord.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int hashCode() {\n        int h = 1023;\n        for (Op op : ops) {\n            h = h * 25 + op.hashCode();\n        }\n        return h;\n    }", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "MultiTransactionRecord.hashCode()", "testcase": false, "constructor": false, "invocations": ["hashCode"]}, "repository": {"repo_id": 230430206, "url": "https://github.com/boomblog/zookeeper-vip2", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 10, "size": 3105, "license": "licensed"}}