{"test_class": {"identifier": "FileObjectStoreTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zms/src/test/java/com/yahoo/athenz/zms/store/file/FileObjectStoreTest.java"}, "test_case": {"identifier": "testError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testError() {\n        try {\n            FileObjectStore.error(\"Not Found\");\n        } catch (RuntimeException ex) {\n            assertTrue(true);\n        }\n    }", "signature": "void testError()", "full_signature": "@Test public void testError()", "class_method_signature": "FileObjectStoreTest.testError()", "testcase": true, "constructor": false, "invocations": ["error", "assertTrue"]}, "focal_class": {"identifier": "FileObjectStore", "superclass": "", "interfaces": "implements ObjectStore", "fields": [{"original_string": "final File rootDir;", "modifier": "final", "type": "File", "declarator": "rootDir", "var_name": "rootDir"}, {"original_string": "File quotaDir;", "modifier": "", "type": "File", "declarator": "quotaDir", "var_name": "quotaDir"}], "methods": [{"identifier": "FileObjectStore", "parameters": "(File rootDirectory, File quotaDirectory)", "modifiers": "public", "return": "", "signature": " FileObjectStore(File rootDirectory, File quotaDirectory)", "full_signature": "public  FileObjectStore(File rootDirectory, File quotaDirectory)", "class_method_signature": "FileObjectStore.FileObjectStore(File rootDirectory, File quotaDirectory)", "testcase": false, "constructor": true}, {"identifier": "verifyDirectory", "parameters": "(File directory)", "modifiers": "", "return": "void", "signature": "void verifyDirectory(File directory)", "full_signature": " void verifyDirectory(File directory)", "class_method_signature": "FileObjectStore.verifyDirectory(File directory)", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "(boolean autoCommit, boolean readWrite)", "modifiers": "@Override public", "return": "ObjectStoreConnection", "signature": "ObjectStoreConnection getConnection(boolean autoCommit, boolean readWrite)", "full_signature": "@Override public ObjectStoreConnection getConnection(boolean autoCommit, boolean readWrite)", "class_method_signature": "FileObjectStore.getConnection(boolean autoCommit, boolean readWrite)", "testcase": false, "constructor": false}, {"identifier": "setOperationTimeout", "parameters": "(int opTimeout)", "modifiers": "@Override public", "return": "void", "signature": "void setOperationTimeout(int opTimeout)", "full_signature": "@Override public void setOperationTimeout(int opTimeout)", "class_method_signature": "FileObjectStore.setOperationTimeout(int opTimeout)", "testcase": false, "constructor": false}, {"identifier": "clearConnections", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearConnections()", "full_signature": "@Override public void clearConnections()", "class_method_signature": "FileObjectStore.clearConnections()", "testcase": false, "constructor": false}, {"identifier": "error", "parameters": "(String msg)", "modifiers": "static", "return": "void", "signature": "void error(String msg)", "full_signature": "static void error(String msg)", "class_method_signature": "FileObjectStore.error(String msg)", "testcase": false, "constructor": false}], "file": "servers/zms/src/main/java/com/yahoo/athenz/zms/store/file/FileObjectStore.java"}, "focal_method": {"identifier": "error", "parameters": "(String msg)", "modifiers": "static", "return": "void", "body": "static void error(String msg) {\n        throw new RuntimeException(\"FileObjectStore: \" + msg);\n    }", "signature": "void error(String msg)", "full_signature": "static void error(String msg)", "class_method_signature": "FileObjectStore.error(String msg)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}