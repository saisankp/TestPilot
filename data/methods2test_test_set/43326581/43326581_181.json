{"test_class": {"identifier": "CLIParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CLI_TESTFILE = \"<?xml version=\\\"1.0\\\" encoding=\\\"iso-8859-1\\\"?>\\n\" +\n            \"<ComponentLicenseInformation component=\\\"Clearing_Report_jquery-1_12_1\\\" creator=\\\"ite40294\\\" date=\\\"30/06/2016\\\"  baseDoc=\\\"Clearing_Report_jquery-1_12_1.doc\\\" toolUsed=\\\"ReadMe Generator V0.86\\\" componentID=\\\"-1\\\" >\\n\" +\n            \"<License type=\\\"global\\\" name=\\\"MIT License\\\" spdxidentifier=\\\"n/a\\\" > \\n\" +\n            \"<Content><![CDATA[jQuery projects are released under the terms of the MIT license.\\n\" +\n            \"]]></Content>\\n\" +\n            \"<Files><![CDATA[Found in:\\n\" +\n            \"\\n\" +\n            \"https://jquery.org/license/ \\n\" +\n            \"]]></Files>\\n\" +\n            \"</License>\\n\" +\n            \"<Copyright>\\n\" +\n            \"<Content><![CDATA[Copyrights\\n\" +\n            \"]]></Content>\\n\" +\n            \"<Files><![CDATA[Found in:\\n\" +\n            \"]]></Files>\\n\" +\n            \"</Copyright>\\n\" +\n            \"<Copyright>\\n\" +\n            \"<Content><![CDATA[(c) jQuery Foundation, Inc. | jquery.org\\n\" +\n            \"]]></Content>\\n\" +\n            \"<Files><![CDATA[\\\\jquery-1.12.1.min.js\\n\" +\n            \"]]></Files>\\n\" +\n            \"</Copyright>\\n\" +\n            \"</ComponentLicenseInformation>\";", "modifier": "private static final", "type": "String", "declarator": "CLI_TESTFILE = \"<?xml version=\\\"1.0\\\" encoding=\\\"iso-8859-1\\\"?>\\n\" +\n            \"<ComponentLicenseInformation component=\\\"Clearing_Report_jquery-1_12_1\\\" creator=\\\"ite40294\\\" date=\\\"30/06/2016\\\"  baseDoc=\\\"Clearing_Report_jquery-1_12_1.doc\\\" toolUsed=\\\"ReadMe Generator V0.86\\\" componentID=\\\"-1\\\" >\\n\" +\n            \"<License type=\\\"global\\\" name=\\\"MIT License\\\" spdxidentifier=\\\"n/a\\\" > \\n\" +\n            \"<Content><![CDATA[jQuery projects are released under the terms of the MIT license.\\n\" +\n            \"]]></Content>\\n\" +\n            \"<Files><![CDATA[Found in:\\n\" +\n            \"\\n\" +\n            \"https://jquery.org/license/ \\n\" +\n            \"]]></Files>\\n\" +\n            \"</License>\\n\" +\n            \"<Copyright>\\n\" +\n            \"<Content><![CDATA[Copyrights\\n\" +\n            \"]]></Content>\\n\" +\n            \"<Files><![CDATA[Found in:\\n\" +\n            \"]]></Files>\\n\" +\n            \"</Copyright>\\n\" +\n            \"<Copyright>\\n\" +\n            \"<Content><![CDATA[(c) jQuery Foundation, Inc. | jquery.org\\n\" +\n            \"]]></Content>\\n\" +\n            \"<Files><![CDATA[\\\\jquery-1.12.1.min.js\\n\" +\n            \"]]></Files>\\n\" +\n            \"</Copyright>\\n\" +\n            \"</ComponentLicenseInformation>\"", "var_name": "CLI_TESTFILE"}, {"original_string": "@Mock\n    private AttachmentConnector connector;", "modifier": "@Mock\n    private", "type": "AttachmentConnector", "declarator": "connector", "var_name": "connector"}, {"original_string": "private CLIParser parser;", "modifier": "private", "type": "CLIParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "private AttachmentContent content;", "modifier": "private", "type": "AttachmentContent", "declarator": "content", "var_name": "content"}, {"original_string": "private Attachment attachment;", "modifier": "private", "type": "Attachment", "declarator": "attachment", "var_name": "attachment"}], "file": "backend/src/src-licenseinfo/src/test/java/org/eclipse/sw360/licenseinfo/parsers/CLIParserTest.java"}, "test_case": {"identifier": "testGetCLIFailsOnMalformedXML", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetCLIFailsOnMalformedXML() throws Exception {\n        Attachment cliAttachment = new Attachment(\"A1\", \"a.xml\");\n        when(connector.getAttachmentStream(anyObject(), anyObject(), anyObject())).thenReturn(new ReaderInputStream(new StringReader(CLI_TESTFILE.replaceAll(\"</Content>\", \"</Broken>\"))));\n        LicenseInfoParsingResult res = parser.getLicenseInfos(cliAttachment, new User(), new Project()).stream().findFirst().orElseThrow(()->new RuntimeException(\"Parser returned empty LisenceInfoParsingResult list\"));\n        assertLicenseInfoParsingResult(res, LicenseInfoRequestStatus.FAILURE);\n        assertThat(res.getStatus(), is(LicenseInfoRequestStatus.FAILURE));\n        assertThat(res.getLicenseInfo(), notNullValue());\n        assertThat(res.getLicenseInfo().getFilenames(), contains(\"a.xml\"));\n\n    }", "signature": "void testGetCLIFailsOnMalformedXML()", "full_signature": "@Test public void testGetCLIFailsOnMalformedXML()", "class_method_signature": "CLIParserTest.testGetCLIFailsOnMalformedXML()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getAttachmentStream", "anyObject", "anyObject", "anyObject", "replaceAll", "orElseThrow", "findFirst", "stream", "getLicenseInfos", "assertLicenseInfoParsingResult", "assertThat", "getStatus", "is", "assertThat", "getLicenseInfo", "notNullValue", "assertThat", "getFilenames", "getLicenseInfo", "contains"]}, "focal_class": {"identifier": "CLIParser", "superclass": "extends AbstractCLIParser", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(CLIParser.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(CLIParser.class)", "var_name": "log"}, {"original_string": "private static final String COPYRIGHTS_XPATH = \"/ComponentLicenseInformation/Copyright/Content\";", "modifier": "private static final", "type": "String", "declarator": "COPYRIGHTS_XPATH = \"/ComponentLicenseInformation/Copyright/Content\"", "var_name": "COPYRIGHTS_XPATH"}, {"original_string": "private static final String LICENSES_XPATH = \"/ComponentLicenseInformation/License\";", "modifier": "private static final", "type": "String", "declarator": "LICENSES_XPATH = \"/ComponentLicenseInformation/License\"", "var_name": "LICENSES_XPATH"}, {"original_string": "private static final String CLI_ROOT_ELEMENT_NAME = \"ComponentLicenseInformation\";", "modifier": "private static final", "type": "String", "declarator": "CLI_ROOT_ELEMENT_NAME = \"ComponentLicenseInformation\"", "var_name": "CLI_ROOT_ELEMENT_NAME"}, {"original_string": "private static final String CLI_ROOT_ELEMENT_NAMESPACE = null;", "modifier": "private static final", "type": "String", "declarator": "CLI_ROOT_ELEMENT_NAMESPACE = null", "var_name": "CLI_ROOT_ELEMENT_NAMESPACE"}], "methods": [{"identifier": "CLIParser", "parameters": "(AttachmentConnector attachmentConnector, AttachmentContentProvider attachmentContentProvider)", "modifiers": "public", "return": "", "signature": " CLIParser(AttachmentConnector attachmentConnector, AttachmentContentProvider attachmentContentProvider)", "full_signature": "public  CLIParser(AttachmentConnector attachmentConnector, AttachmentContentProvider attachmentContentProvider)", "class_method_signature": "CLIParser.CLIParser(AttachmentConnector attachmentConnector, AttachmentContentProvider attachmentContentProvider)", "testcase": false, "constructor": true}, {"identifier": "isApplicableTo", "parameters": "(Attachment attachment, User user, T context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isApplicableTo(Attachment attachment, User user, T context)", "full_signature": "@Override public boolean isApplicableTo(Attachment attachment, User user, T context)", "class_method_signature": "CLIParser.isApplicableTo(Attachment attachment, User user, T context)", "testcase": false, "constructor": false}, {"identifier": "hasCLIRootElement", "parameters": "(AttachmentContent content, User user, T context)", "modifiers": "private", "return": "boolean", "signature": "boolean hasCLIRootElement(AttachmentContent content, User user, T context)", "full_signature": "private boolean hasCLIRootElement(AttachmentContent content, User user, T context)", "class_method_signature": "CLIParser.hasCLIRootElement(AttachmentContent content, User user, T context)", "testcase": false, "constructor": false}, {"identifier": "getLicenseInfos", "parameters": "(Attachment attachment, User user, T context)", "modifiers": "@Override public", "return": "List<LicenseInfoParsingResult>", "signature": "List<LicenseInfoParsingResult> getLicenseInfos(Attachment attachment, User user, T context)", "full_signature": "@Override public List<LicenseInfoParsingResult> getLicenseInfos(Attachment attachment, User user, T context)", "class_method_signature": "CLIParser.getLicenseInfos(Attachment attachment, User user, T context)", "testcase": false, "constructor": false}, {"identifier": "getLicenseNameWithTexts", "parameters": "(Document doc)", "modifiers": "private", "return": "Set<LicenseNameWithText>", "signature": "Set<LicenseNameWithText> getLicenseNameWithTexts(Document doc)", "full_signature": "private Set<LicenseNameWithText> getLicenseNameWithTexts(Document doc)", "class_method_signature": "CLIParser.getLicenseNameWithTexts(Document doc)", "testcase": false, "constructor": false}, {"identifier": "getCopyrights", "parameters": "(Document doc)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getCopyrights(Document doc)", "full_signature": "private Set<String> getCopyrights(Document doc)", "class_method_signature": "CLIParser.getCopyrights(Document doc)", "testcase": false, "constructor": false}, {"identifier": "nodeListToLicenseNamesWithTextsSet", "parameters": "(NodeList nodes)", "modifiers": "private", "return": "Set<LicenseNameWithText>", "signature": "Set<LicenseNameWithText> nodeListToLicenseNamesWithTextsSet(NodeList nodes)", "full_signature": "private Set<LicenseNameWithText> nodeListToLicenseNamesWithTextsSet(NodeList nodes)", "class_method_signature": "CLIParser.nodeListToLicenseNamesWithTextsSet(NodeList nodes)", "testcase": false, "constructor": false}], "file": "backend/src/src-licenseinfo/src/main/java/org/eclipse/sw360/licenseinfo/parsers/CLIParser.java"}, "focal_method": {"identifier": "getLicenseInfos", "parameters": "(Attachment attachment, User user, T context)", "modifiers": "@Override public", "return": "List<LicenseInfoParsingResult>", "body": "@Override\n    public <T> List<LicenseInfoParsingResult> getLicenseInfos(Attachment attachment, User user, T context) throws TException {\n        AttachmentContent attachmentContent = attachmentContentProvider.getAttachmentContent(attachment);\n        LicenseInfo licenseInfo = new LicenseInfo().setFilenames(Arrays.asList(attachmentContent.getFilename()));\n        LicenseInfoParsingResult result = new LicenseInfoParsingResult().setLicenseInfo(licenseInfo);\n        InputStream attachmentStream = null;\n\n        try {\n            attachmentStream = attachmentConnector.getAttachmentStream(attachmentContent, user, context);\n            Document doc = getDocument(attachmentStream);\n\n            Set<String> copyrights = getCopyrights(doc);\n            licenseInfo.setCopyrights(copyrights);\n\n            Set<LicenseNameWithText> licenseNamesWithTexts = getLicenseNameWithTexts(doc);\n            licenseInfo.setLicenseNamesWithTexts(licenseNamesWithTexts);\n\n            result.setStatus(LicenseInfoRequestStatus.SUCCESS);\n        } catch (ParserConfigurationException | IOException | XPathExpressionException | SAXException | SW360Exception e) {\n            log.error(e);\n            result.setStatus(LicenseInfoRequestStatus.FAILURE).setMessage(\"Error while parsing CLI file: \" + e.toString());\n        } finally {\n            closeQuietly(attachmentStream, log);\n        }\n        return Collections.singletonList(result);\n    }", "signature": "List<LicenseInfoParsingResult> getLicenseInfos(Attachment attachment, User user, T context)", "full_signature": "@Override public List<LicenseInfoParsingResult> getLicenseInfos(Attachment attachment, User user, T context)", "class_method_signature": "CLIParser.getLicenseInfos(Attachment attachment, User user, T context)", "testcase": false, "constructor": false, "invocations": ["getAttachmentContent", "setFilenames", "asList", "getFilename", "setLicenseInfo", "getAttachmentStream", "getDocument", "getCopyrights", "setCopyrights", "getLicenseNameWithTexts", "setLicenseNamesWithTexts", "setStatus", "error", "setMessage", "setStatus", "toString", "closeQuietly", "singletonList"]}, "repository": {"repo_id": 43326581, "url": "https://github.com/sw360/sw360portal", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 31, "size": 8770, "license": "licensed"}}