{"test_class": {"identifier": "WmsLayerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double ZOOMED_IN_SCALE = .0001;", "modifier": "private static final", "type": "double", "declarator": "ZOOMED_IN_SCALE = .0001", "var_name": "ZOOMED_IN_SCALE"}, {"original_string": "private static final double MAX_LEVEL_SCALE = .4;", "modifier": "private static final", "type": "double", "declarator": "MAX_LEVEL_SCALE = .4", "var_name": "MAX_LEVEL_SCALE"}, {"original_string": "private static final double DELTA = 1e-10;", "modifier": "private static final", "type": "double", "declarator": "DELTA = 1e-10", "var_name": "DELTA"}, {"original_string": "private static final String MERCATOR = \"EPSG:900913\";", "modifier": "private static final", "type": "String", "declarator": "MERCATOR = \"EPSG:900913\"", "var_name": "MERCATOR"}, {"original_string": "private static final String LONLAT = \"EPSG:4326\";", "modifier": "private static final", "type": "String", "declarator": "LONLAT = \"EPSG:4326\"", "var_name": "LONLAT"}, {"original_string": "@Autowired\n\t@Qualifier(\"bluemarble\")\n\tprivate WmsLayer wms;", "modifier": "@Autowired\n\t@Qualifier(\"bluemarble\")\n\tprivate", "type": "WmsLayer", "declarator": "wms", "var_name": "wms"}, {"original_string": "@Autowired\n\t@Qualifier(\"proxyBlue\")\n\tprivate WmsLayer proxyWms;", "modifier": "@Autowired\n\t@Qualifier(\"proxyBlue\")\n\tprivate", "type": "WmsLayer", "declarator": "proxyWms", "var_name": "proxyWms"}, {"original_string": "@Autowired\n\t@Qualifier(\"defaultBlue\")\n\tprivate WmsLayer defaultWms;", "modifier": "@Autowired\n\t@Qualifier(\"defaultBlue\")\n\tprivate", "type": "WmsLayer", "declarator": "defaultWms", "var_name": "defaultWms"}, {"original_string": "@Autowired\n\t@Qualifier(\"cachedBlue\")\n\tprivate WmsLayer cachedWms;", "modifier": "@Autowired\n\t@Qualifier(\"cachedBlue\")\n\tprivate", "type": "WmsLayer", "declarator": "cachedWms", "var_name": "cachedWms"}, {"original_string": "@Autowired\n\t@Qualifier(\"escapeBlue\")\n\tprivate WmsLayer escapeBlue;", "modifier": "@Autowired\n\t@Qualifier(\"escapeBlue\")\n\tprivate", "type": "WmsLayer", "declarator": "escapeBlue", "var_name": "escapeBlue"}, {"original_string": "@Autowired\n\tprivate GeoService geoService;", "modifier": "@Autowired\n\tprivate", "type": "GeoService", "declarator": "geoService", "var_name": "geoService"}], "file": "plugin/layer-wms/wms/src/test/java/org/geomajas/layer/wms/WmsLayerTest.java"}, "test_case": {"identifier": "testNormalEncoded", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testNormalEncoded() throws Exception {\n\t\tEnvelope googleEnvelope = new Envelope(10000, 10010, 5000, 5010);\n\n\t\t// back-transform envelope to latlon\n\t\tCrs google = geoService.getCrs2(MERCATOR);\n\t\tCrs latlon = geoService.getCrs2(LONLAT);\n\t\tEnvelope latlonEnvelope = geoService.transform(JTS.toGeometry(googleEnvelope), google, latlon)\n\t\t\t\t.getEnvelopeInternal();\n\n\t\t// back-transform scale to latlon\n\t\tdouble latlonScale = ZOOMED_IN_SCALE * googleEnvelope.getWidth() / latlonEnvelope.getWidth();\n\n\t\t// paint with re-projection (affine is fine for now...:-)\n\t\tList<RasterTile> tiles = escapeBlue.paint(latlon, latlonEnvelope, latlonScale);\n\t\tAssert.assertEquals(1, tiles.size());\n\t\tRasterTile tile = tiles.get(0);\n\n\t\t// ZOOMED_IN_SCALE 1E-4 corresponds to level 4 with current algorithm !!!!\n\t\tassertThat(tile.getUrl()).isEqualTo(\"http://apps.geomajas.org/geoserver/wms?SERVICE=WMS&\" +\n\t\t\t\t\"layers=geomajas%3Abluemarble&WIDTH=512&HEIGHT=512&bbox=0,0,45,45&format=image/png&version=1.1.1&\" +\n\t\t\t\t\"srs=EPSG%3A4326&styles=&what%3F=value%2Bmore%21&request=GetMap\");\n\n\t}", "signature": "void testNormalEncoded()", "full_signature": "@Test public void testNormalEncoded()", "class_method_signature": "WmsLayerTest.testNormalEncoded()", "testcase": true, "constructor": false, "invocations": ["getCrs2", "getCrs2", "getEnvelopeInternal", "transform", "toGeometry", "getWidth", "getWidth", "paint", "assertEquals", "size", "get", "isEqualTo", "assertThat", "getUrl"]}, "focal_class": {"identifier": "WmsLayer", "superclass": "", "interfaces": "implements RasterLayer, LayerFeatureInfoSupport, ProxyLayerSupport", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(WmsLayer.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(WmsLayer.class)", "var_name": "log"}, {"original_string": "private final List<Resolution> resolutions = new ArrayList<Resolution>();", "modifier": "private final", "type": "List<Resolution>", "declarator": "resolutions = new ArrayList<Resolution>()", "var_name": "resolutions"}, {"original_string": "private String baseWmsUrl;", "modifier": "private", "type": "String", "declarator": "baseWmsUrl", "var_name": "baseWmsUrl"}, {"original_string": "private String format = \"image/png\";", "modifier": "private", "type": "String", "declarator": "format = \"image/png\"", "var_name": "format"}, {"original_string": "private String version = \"1.1.1\";", "modifier": "private", "type": "String", "declarator": "version = \"1.1.1\"", "var_name": "version"}, {"original_string": "private String styles = \"\";", "modifier": "private", "type": "String", "declarator": "styles = \"\"", "var_name": "styles"}, {"original_string": "private List<Parameter> parameters;", "modifier": "private", "type": "List<Parameter>", "declarator": "parameters", "var_name": "parameters"}, {"original_string": "private boolean enableFeatureInfoSupport;", "modifier": "private", "type": "boolean", "declarator": "enableFeatureInfoSupport", "var_name": "enableFeatureInfoSupport"}, {"original_string": "private RasterLayerInfo layerInfo;", "modifier": "private", "type": "RasterLayerInfo", "declarator": "layerInfo", "var_name": "layerInfo"}, {"original_string": "private Crs crs;", "modifier": "private", "type": "Crs", "declarator": "crs", "var_name": "crs"}, {"original_string": "private String id;", "modifier": "private", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private WmsFeatureInfoFormat featureInfoFormat = WmsFeatureInfoFormat.GML2;", "modifier": "private", "type": "WmsFeatureInfoFormat", "declarator": "featureInfoFormat = WmsFeatureInfoFormat.GML2", "var_name": "featureInfoFormat"}, {"original_string": "@Deprecated\n\tprivate WmsAuthentication authentication;", "modifier": "@Deprecated\n\tprivate", "type": "WmsAuthentication", "declarator": "authentication", "var_name": "authentication"}, {"original_string": "private LayerAuthentication layerAuthentication;", "modifier": "private", "type": "LayerAuthentication", "declarator": "layerAuthentication", "var_name": "layerAuthentication"}, {"original_string": "private boolean useProxy;", "modifier": "private", "type": "boolean", "declarator": "useProxy", "var_name": "useProxy"}, {"original_string": "private boolean useCache;", "modifier": "private", "type": "boolean", "declarator": "useCache", "var_name": "useCache"}, {"original_string": "@Autowired\n\tprivate GeoService geoService;", "modifier": "@Autowired\n\tprivate", "type": "GeoService", "declarator": "geoService", "var_name": "geoService"}, {"original_string": "@Autowired\n\tprivate LayerHttpService httpService;", "modifier": "@Autowired\n\tprivate", "type": "LayerHttpService", "declarator": "httpService", "var_name": "httpService"}, {"original_string": "@Autowired\n\tprivate DtoConverterService converterService;", "modifier": "@Autowired\n\tprivate", "type": "DtoConverterService", "declarator": "converterService", "var_name": "converterService"}, {"original_string": "@Autowired(required = false)\n\tprivate DispatcherUrlService dispatcherUrlService;", "modifier": "@Autowired(required = false)\n\tprivate", "type": "DispatcherUrlService", "declarator": "dispatcherUrlService", "var_name": "dispatcherUrlService"}, {"original_string": "@Autowired(required = false)\n\tprivate CacheManagerService cacheManagerService;", "modifier": "@Autowired(required = false)\n\tprivate", "type": "CacheManagerService", "declarator": "cacheManagerService", "var_name": "cacheManagerService"}, {"original_string": "@Autowired\n\tprivate SecurityContext securityContext;", "modifier": "@Autowired\n\tprivate", "type": "SecurityContext", "declarator": "securityContext", "var_name": "securityContext"}], "methods": [{"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getId()", "full_signature": "public String getId()", "class_method_signature": "WmsLayer.getId()", "testcase": false, "constructor": false}, {"identifier": "setId", "parameters": "(String id)", "modifiers": "public", "return": "void", "signature": "void setId(String id)", "full_signature": "public void setId(String id)", "class_method_signature": "WmsLayer.setId(String id)", "testcase": false, "constructor": false}, {"identifier": "getLayerInfo", "parameters": "()", "modifiers": "public", "return": "RasterLayerInfo", "signature": "RasterLayerInfo getLayerInfo()", "full_signature": "public RasterLayerInfo getLayerInfo()", "class_method_signature": "WmsLayer.getLayerInfo()", "testcase": false, "constructor": false}, {"identifier": "getCrs", "parameters": "()", "modifiers": "@Deprecated public", "return": "CoordinateReferenceSystem", "signature": "CoordinateReferenceSystem getCrs()", "full_signature": "@Deprecated public CoordinateReferenceSystem getCrs()", "class_method_signature": "WmsLayer.getCrs()", "testcase": false, "constructor": false}, {"identifier": "postConstruct", "parameters": "()", "modifiers": "@PostConstruct protected", "return": "void", "signature": "void postConstruct()", "full_signature": "@PostConstruct protected void postConstruct()", "class_method_signature": "WmsLayer.postConstruct()", "testcase": false, "constructor": false}, {"identifier": "getFeatureInfoFormat", "parameters": "()", "modifiers": "@Api public", "return": "WmsFeatureInfoFormat", "signature": "WmsFeatureInfoFormat getFeatureInfoFormat()", "full_signature": "@Api public WmsFeatureInfoFormat getFeatureInfoFormat()", "class_method_signature": "WmsLayer.getFeatureInfoFormat()", "testcase": false, "constructor": false}, {"identifier": "setFeatureInfoFormat", "parameters": "(WmsFeatureInfoFormat featureInfoFormat)", "modifiers": "@Api public", "return": "void", "signature": "void setFeatureInfoFormat(WmsFeatureInfoFormat featureInfoFormat)", "full_signature": "@Api public void setFeatureInfoFormat(WmsFeatureInfoFormat featureInfoFormat)", "class_method_signature": "WmsLayer.setFeatureInfoFormat(WmsFeatureInfoFormat featureInfoFormat)", "testcase": false, "constructor": false}, {"identifier": "setLayerInfo", "parameters": "(RasterLayerInfo layerInfo)", "modifiers": "@Api public", "return": "void", "signature": "void setLayerInfo(RasterLayerInfo layerInfo)", "full_signature": "@Api public void setLayerInfo(RasterLayerInfo layerInfo)", "class_method_signature": "WmsLayer.setLayerInfo(RasterLayerInfo layerInfo)", "testcase": false, "constructor": false}, {"identifier": "getFeaturesByLocation", "parameters": "(Coordinate layerCoordinate, double layerScale, int pixelTolerance)", "modifiers": "public", "return": "List<Feature>", "signature": "List<Feature> getFeaturesByLocation(Coordinate layerCoordinate, double layerScale, int pixelTolerance)", "full_signature": "public List<Feature> getFeaturesByLocation(Coordinate layerCoordinate, double layerScale, int pixelTolerance)", "class_method_signature": "WmsLayer.getFeaturesByLocation(Coordinate layerCoordinate, double layerScale, int pixelTolerance)", "testcase": false, "constructor": false}, {"identifier": "getTextFeatures", "parameters": "(InputStream stream)", "modifiers": "private", "return": "List<Feature>", "signature": "List<Feature> getTextFeatures(InputStream stream)", "full_signature": "private List<Feature> getTextFeatures(InputStream stream)", "class_method_signature": "WmsLayer.getTextFeatures(InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "getHtmlFeatures", "parameters": "(String url)", "modifiers": "private", "return": "List<Feature>", "signature": "List<Feature> getHtmlFeatures(String url)", "full_signature": "private List<Feature> getHtmlFeatures(String url)", "class_method_signature": "WmsLayer.getHtmlFeatures(String url)", "testcase": false, "constructor": false}, {"identifier": "getGmlFeatures", "parameters": "(InputStream stream, Version version)", "modifiers": "private", "return": "List<Feature>", "signature": "List<Feature> getGmlFeatures(InputStream stream, Version version)", "full_signature": "private List<Feature> getGmlFeatures(InputStream stream, Version version)", "class_method_signature": "WmsLayer.getGmlFeatures(InputStream stream, Version version)", "testcase": false, "constructor": false}, {"identifier": "toDto", "parameters": "(SimpleFeature feature)", "modifiers": "private", "return": "Feature", "signature": "Feature toDto(SimpleFeature feature)", "full_signature": "private Feature toDto(SimpleFeature feature)", "class_method_signature": "WmsLayer.toDto(SimpleFeature feature)", "testcase": false, "constructor": false}, {"identifier": "paint", "parameters": "(CoordinateReferenceSystem targetCrs, Envelope bounds, double scale)", "modifiers": "public", "return": "List<RasterTile>", "signature": "List<RasterTile> paint(CoordinateReferenceSystem targetCrs, Envelope bounds, double scale)", "full_signature": "public List<RasterTile> paint(CoordinateReferenceSystem targetCrs, Envelope bounds, double scale)", "class_method_signature": "WmsLayer.paint(CoordinateReferenceSystem targetCrs, Envelope bounds, double scale)", "testcase": false, "constructor": false}, {"identifier": "getWmsTargetUrl", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getWmsTargetUrl()", "full_signature": "private String getWmsTargetUrl()", "class_method_signature": "WmsLayer.getWmsTargetUrl()", "testcase": false, "constructor": false}, {"identifier": "formatGetFeatureInfoUrl", "parameters": "(int width, int height, Bbox box, int x, int y,\n\t\t\tboolean internal)", "modifiers": "private", "return": "String", "signature": "String formatGetFeatureInfoUrl(int width, int height, Bbox box, int x, int y,\n\t\t\tboolean internal)", "full_signature": "private String formatGetFeatureInfoUrl(int width, int height, Bbox box, int x, int y,\n\t\t\tboolean internal)", "class_method_signature": "WmsLayer.formatGetFeatureInfoUrl(int width, int height, Bbox box, int x, int y,\n\t\t\tboolean internal)", "testcase": false, "constructor": false}, {"identifier": "formatUrl", "parameters": "(int width, int height, Bbox box)", "modifiers": "private", "return": "String", "signature": "String formatUrl(int width, int height, Bbox box)", "full_signature": "private String formatUrl(int width, int height, Bbox box)", "class_method_signature": "WmsLayer.formatUrl(int width, int height, Bbox box)", "testcase": false, "constructor": false}, {"identifier": "formatBaseUrl", "parameters": "(String targetUrl, int width, int height, Bbox box)", "modifiers": "private", "return": "StringBuilder", "signature": "StringBuilder formatBaseUrl(String targetUrl, int width, int height, Bbox box)", "full_signature": "private StringBuilder formatBaseUrl(String targetUrl, int width, int height, Bbox box)", "class_method_signature": "WmsLayer.formatBaseUrl(String targetUrl, int width, int height, Bbox box)", "testcase": false, "constructor": false}, {"identifier": "getResolutionForScale", "parameters": "(double scale)", "modifiers": "private", "return": "Resolution", "signature": "Resolution getResolutionForScale(double scale)", "full_signature": "private Resolution getResolutionForScale(double scale)", "class_method_signature": "WmsLayer.getResolutionForScale(double scale)", "testcase": false, "constructor": false}, {"identifier": "calculateBestQuadTreeResolution", "parameters": "(double scale)", "modifiers": "private", "return": "Resolution", "signature": "Resolution calculateBestQuadTreeResolution(double scale)", "full_signature": "private Resolution calculateBestQuadTreeResolution(double scale)", "class_method_signature": "WmsLayer.calculateBestQuadTreeResolution(double scale)", "testcase": false, "constructor": false}, {"identifier": "getRasterGrid", "parameters": "(Envelope bounds, double width, double height)", "modifiers": "private", "return": "RasterGrid", "signature": "RasterGrid getRasterGrid(Envelope bounds, double width, double height)", "full_signature": "private RasterGrid getRasterGrid(Envelope bounds, double width, double height)", "class_method_signature": "WmsLayer.getRasterGrid(Envelope bounds, double width, double height)", "testcase": false, "constructor": false}, {"identifier": "clipBounds", "parameters": "(Envelope bounds)", "modifiers": "private", "return": "Envelope", "signature": "Envelope clipBounds(Envelope bounds)", "full_signature": "private Envelope clipBounds(Envelope bounds)", "class_method_signature": "WmsLayer.clipBounds(Envelope bounds)", "testcase": false, "constructor": false}, {"identifier": "getBaseWmsUrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getBaseWmsUrl()", "full_signature": "public String getBaseWmsUrl()", "class_method_signature": "WmsLayer.getBaseWmsUrl()", "testcase": false, "constructor": false}, {"identifier": "setBaseWmsUrl", "parameters": "(String baseWmsUrl)", "modifiers": "@Api public", "return": "void", "signature": "void setBaseWmsUrl(String baseWmsUrl)", "full_signature": "@Api public void setBaseWmsUrl(String baseWmsUrl)", "class_method_signature": "WmsLayer.setBaseWmsUrl(String baseWmsUrl)", "testcase": false, "constructor": false}, {"identifier": "getFormat", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFormat()", "full_signature": "public String getFormat()", "class_method_signature": "WmsLayer.getFormat()", "testcase": false, "constructor": false}, {"identifier": "setFormat", "parameters": "(String format)", "modifiers": "@Api public", "return": "void", "signature": "void setFormat(String format)", "full_signature": "@Api public void setFormat(String format)", "class_method_signature": "WmsLayer.setFormat(String format)", "testcase": false, "constructor": false}, {"identifier": "setVersion", "parameters": "(String version)", "modifiers": "@Api public", "return": "void", "signature": "void setVersion(String version)", "full_signature": "@Api public void setVersion(String version)", "class_method_signature": "WmsLayer.setVersion(String version)", "testcase": false, "constructor": false}, {"identifier": "setStyles", "parameters": "(String styles)", "modifiers": "@Api public", "return": "void", "signature": "void setStyles(String styles)", "full_signature": "@Api public void setStyles(String styles)", "class_method_signature": "WmsLayer.setStyles(String styles)", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(List<Parameter> parameters)", "modifiers": "@Api public", "return": "void", "signature": "void setParameters(List<Parameter> parameters)", "full_signature": "@Api public void setParameters(List<Parameter> parameters)", "class_method_signature": "WmsLayer.setParameters(List<Parameter> parameters)", "testcase": false, "constructor": false}, {"identifier": "getAuthentication", "parameters": "()", "modifiers": "@Deprecated public", "return": "WmsAuthentication", "signature": "WmsAuthentication getAuthentication()", "full_signature": "@Deprecated public WmsAuthentication getAuthentication()", "class_method_signature": "WmsLayer.getAuthentication()", "testcase": false, "constructor": false}, {"identifier": "setAuthentication", "parameters": "(WmsAuthentication authentication)", "modifiers": "@Api @Deprecated public", "return": "void", "signature": "void setAuthentication(WmsAuthentication authentication)", "full_signature": "@Api @Deprecated public void setAuthentication(WmsAuthentication authentication)", "class_method_signature": "WmsLayer.setAuthentication(WmsAuthentication authentication)", "testcase": false, "constructor": false}, {"identifier": "getProxyAuthentication", "parameters": "()", "modifiers": "public", "return": "ProxyAuthentication", "signature": "ProxyAuthentication getProxyAuthentication()", "full_signature": "public ProxyAuthentication getProxyAuthentication()", "class_method_signature": "WmsLayer.getProxyAuthentication()", "testcase": false, "constructor": false}, {"identifier": "setLayerAuthentication", "parameters": "(LayerAuthentication layerAuthentication)", "modifiers": "@Api public", "return": "void", "signature": "void setLayerAuthentication(LayerAuthentication layerAuthentication)", "full_signature": "@Api public void setLayerAuthentication(LayerAuthentication layerAuthentication)", "class_method_signature": "WmsLayer.setLayerAuthentication(LayerAuthentication layerAuthentication)", "testcase": false, "constructor": false}, {"identifier": "setUseProxy", "parameters": "(boolean useProxy)", "modifiers": "@Api public", "return": "void", "signature": "void setUseProxy(boolean useProxy)", "full_signature": "@Api public void setUseProxy(boolean useProxy)", "class_method_signature": "WmsLayer.setUseProxy(boolean useProxy)", "testcase": false, "constructor": false}, {"identifier": "setUseCache", "parameters": "(boolean useCache)", "modifiers": "@Api public", "return": "void", "signature": "void setUseCache(boolean useCache)", "full_signature": "@Api public void setUseCache(boolean useCache)", "class_method_signature": "WmsLayer.setUseCache(boolean useCache)", "testcase": false, "constructor": false}, {"identifier": "isUseCache", "parameters": "()", "modifiers": "@Api public", "return": "boolean", "signature": "boolean isUseCache()", "full_signature": "@Api public boolean isUseCache()", "class_method_signature": "WmsLayer.isUseCache()", "testcase": false, "constructor": false}, {"identifier": "setEnableFeatureInfoSupport", "parameters": "(boolean enableFeatureInfoSupport)", "modifiers": "@Api public", "return": "void", "signature": "void setEnableFeatureInfoSupport(boolean enableFeatureInfoSupport)", "full_signature": "@Api public void setEnableFeatureInfoSupport(boolean enableFeatureInfoSupport)", "class_method_signature": "WmsLayer.setEnableFeatureInfoSupport(boolean enableFeatureInfoSupport)", "testcase": false, "constructor": false}, {"identifier": "isEnableFeatureInfoSupport", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEnableFeatureInfoSupport()", "full_signature": "public boolean isEnableFeatureInfoSupport()", "class_method_signature": "WmsLayer.isEnableFeatureInfoSupport()", "testcase": false, "constructor": false}, {"identifier": "clearCacheManagerService", "parameters": "()", "modifiers": "", "return": "void", "signature": "void clearCacheManagerService()", "full_signature": " void clearCacheManagerService()", "class_method_signature": "WmsLayer.clearCacheManagerService()", "testcase": false, "constructor": false}], "file": "plugin/layer-wms/wms/src/main/java/org/geomajas/layer/wms/WmsLayer.java"}, "focal_method": {"identifier": "paint", "parameters": "(CoordinateReferenceSystem targetCrs, Envelope bounds, double scale)", "modifiers": "public", "return": "List<RasterTile>", "body": "public List<RasterTile> paint(CoordinateReferenceSystem targetCrs, Envelope bounds, double scale)\n\t\t\tthrows GeomajasException {\n\t\tEnvelope layerBounds = bounds;\n\t\tdouble layerScale = scale;\n\t\tCrsTransform layerToMap = null;\n\t\tboolean needTransform = !crs.equals(targetCrs);\n\n\t\ttry {\n\t\t\t// We don't necessarily need to split into same CRS and different CRS cases, the latter implementation uses\n\t\t\t// identity transform if crs's are equal for map and layer but might introduce bugs in rounding and/or\n\t\t\t// conversions.\n\t\t\tif (needTransform) {\n\t\t\t\tlayerToMap = geoService.getCrsTransform(crs, targetCrs);\n\t\t\t\tCrsTransform mapToLayer = geoService.getCrsTransform(targetCrs, crs);\n\n\t\t\t\t// Translate the map coordinates to layer coordinates, assumes equal x-y orientation\n\t\t\t\tlayerBounds = geoService.transform(bounds, mapToLayer);\n\t\t\t\tlayerScale = bounds.getWidth() * scale / layerBounds.getWidth();\n\t\t\t}\n\t\t} catch (MismatchedDimensionException e) {\n\t\t\tthrow new GeomajasException(e, ExceptionCode.RENDER_DIMENSION_MISMATCH);\n\t\t}\n\t\tlayerBounds = clipBounds(layerBounds);\n\t\tif (layerBounds.isNull()) {\n\t\t\treturn new ArrayList<RasterTile>(0);\n\t\t}\n\n\t\t// Grid is in layer coordinate space!\n\t\tResolution bestResolution = getResolutionForScale(layerScale);\n\t\tRasterGrid grid = getRasterGrid(layerBounds, bestResolution.getTileWidth(), bestResolution.getTileHeight());\n\n\t\t// We calculate the first tile's screen box with this assumption\n\t\tList<RasterTile> result = new ArrayList<RasterTile>();\n\t\tfor (int i = grid.getXmin(); i < grid.getXmax(); i++) {\n\t\t\tfor (int j = grid.getYmin(); j < grid.getYmax(); j++) {\n\t\t\t\tdouble x = grid.getLowerLeft().x + (i - grid.getXmin()) * grid.getTileWidth();\n\t\t\t\tdouble y = grid.getLowerLeft().y + (j - grid.getYmin()) * grid.getTileHeight();\n\t\t\t\t// layer coordinates\n\t\t\t\tBbox worldBox;\n\t\t\t\tBbox layerBox;\n\t\t\t\tif (needTransform) {\n\t\t\t\t\tlayerBox = new Bbox(x, y, grid.getTileWidth(), grid.getTileHeight());\n\t\t\t\t\t// Transforming back to map coordinates will only result in a proper grid if the transformation\n\t\t\t\t\t// is nearly affine\n\t\t\t\t\tworldBox = geoService.transform(layerBox, layerToMap);\n\t\t\t\t} else {\n\t\t\t\t\tworldBox = new Bbox(x, y, grid.getTileWidth(), grid.getTileHeight());\n\t\t\t\t\tlayerBox = worldBox;\n\t\t\t\t}\n\t\t\t\t// Rounding to avoid white space between raster tiles lower-left becomes upper-left in inverted y-space\n\t\t\t\tBbox screenBox = new Bbox(Math.round(scale * worldBox.getX()), -Math.round(scale * worldBox.getMaxY()),\n\t\t\t\t\t\tMath.round(scale * worldBox.getMaxX()) - Math.round(scale * worldBox.getX()), Math.round(scale\n\t\t\t\t\t\t\t\t* worldBox.getMaxY())\n\t\t\t\t\t\t\t\t- Math.round(scale * worldBox.getY()));\n\n\t\t\t\tRasterTile image = new RasterTile(screenBox, getId() + \".\" + bestResolution.getLevel() + \".\" + i + \",\"\n\t\t\t\t\t\t+ j);\n\n\t\t\t\timage.setCode(new TileCode(bestResolution.getLevel(), i, j));\n\t\t\t\tString url = formatUrl(bestResolution.getTileWidthPx(), bestResolution.getTileHeightPx(), layerBox);\n\t\t\t\timage.setUrl(url);\n\t\t\t\tresult.add(image);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}", "signature": "List<RasterTile> paint(CoordinateReferenceSystem targetCrs, Envelope bounds, double scale)", "full_signature": "public List<RasterTile> paint(CoordinateReferenceSystem targetCrs, Envelope bounds, double scale)", "class_method_signature": "WmsLayer.paint(CoordinateReferenceSystem targetCrs, Envelope bounds, double scale)", "testcase": false, "constructor": false, "invocations": ["equals", "getCrsTransform", "getCrsTransform", "transform", "getWidth", "getWidth", "clipBounds", "isNull", "getResolutionForScale", "getRasterGrid", "getTileWidth", "getTileHeight", "getXmin", "getXmax", "getYmin", "getYmax", "getLowerLeft", "getXmin", "getTileWidth", "getLowerLeft", "getYmin", "getTileHeight", "getTileWidth", "getTileHeight", "transform", "getTileWidth", "getTileHeight", "round", "getX", "round", "getMaxY", "round", "getMaxX", "round", "getX", "round", "getMaxY", "round", "getY", "getId", "getLevel", "setCode", "getLevel", "formatUrl", "getTileWidthPx", "getTileHeightPx", "setUrl", "add"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}