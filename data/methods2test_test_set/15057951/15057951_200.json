{"test_class": {"identifier": "JavaMethodInvokerTest", "superclass": "", "interfaces": "", "fields": [], "file": "smartparam-engine/src/test/java/org/smartparam/engine/functions/java/JavaMethodInvokerTest.java"}, "test_case": {"identifier": "shouldWrapAnyExceptionComingFromFunctionInJavaFunctionInvocationException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldWrapAnyExceptionComingFromFunctionInJavaFunctionInvocationException() throws NoSuchMethodException {\n        // given\n        JavaMethodInvoker invoker = new JavaMethodInvoker();\n        FunctionWrapper wrapper = new FunctionWrapper();\n\n        // when\n        catchException(invoker).invokeMethod(wrapper, FunctionWrapper.class.getDeclaredMethod(\"throwingMethod\"), true);\n\n        // then\n        assertThat(caughtException()).isInstanceOf(JavaFunctionInvocationException.class);\n    }", "signature": "void shouldWrapAnyExceptionComingFromFunctionInJavaFunctionInvocationException()", "full_signature": "@Test public void shouldWrapAnyExceptionComingFromFunctionInJavaFunctionInvocationException()", "class_method_signature": "JavaMethodInvokerTest.shouldWrapAnyExceptionComingFromFunctionInJavaFunctionInvocationException()", "testcase": true, "constructor": false, "invocations": ["invokeMethod", "catchException", "getDeclaredMethod", "isInstanceOf", "assertThat", "caughtException"]}, "focal_class": {"identifier": "JavaMethodInvoker", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(JavaMethodInvoker.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(JavaMethodInvoker.class)", "var_name": "logger"}], "methods": [{"identifier": "invokeMethod", "parameters": "(Object instance, Method method, boolean makeAccessible, Object... args)", "modifiers": "public", "return": "Object", "signature": "Object invokeMethod(Object instance, Method method, boolean makeAccessible, Object... args)", "full_signature": "public Object invokeMethod(Object instance, Method method, boolean makeAccessible, Object... args)", "class_method_signature": "JavaMethodInvoker.invokeMethod(Object instance, Method method, boolean makeAccessible, Object... args)", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/functions/java/JavaMethodInvoker.java"}, "focal_method": {"identifier": "invokeMethod", "parameters": "(Object instance, Method method, boolean makeAccessible, Object... args)", "modifiers": "public", "return": "Object", "body": "public Object invokeMethod(Object instance, Method method, boolean makeAccessible, Object... args) {\n        try {\n            if (makeAccessible) {\n                method.setAccessible(true);\n            }\n\n            if (instance instanceof Proxy) {\n                InvocationHandler handler = Proxy.getInvocationHandler(instance);\n                return handler.invoke(instance, method, args);\n            } else {\n                return method.invoke(instance, args);\n            }\n        } catch (Throwable exception) {\n            logger.error(\"\", exception);\n            throw new JavaFunctionInvocationException(exception, instance, method);\n        }\n    }", "signature": "Object invokeMethod(Object instance, Method method, boolean makeAccessible, Object... args)", "full_signature": "public Object invokeMethod(Object instance, Method method, boolean makeAccessible, Object... args)", "class_method_signature": "JavaMethodInvoker.invokeMethod(Object instance, Method method, boolean makeAccessible, Object... args)", "testcase": false, "constructor": false, "invocations": ["setAccessible", "getInvocationHandler", "invoke", "invoke", "error"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}