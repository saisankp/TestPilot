{"test_class": {"identifier": "PluginClassLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TestPluginManager pluginManager;", "modifier": "private", "type": "TestPluginManager", "declarator": "pluginManager", "var_name": "pluginManager"}, {"original_string": "private TestPluginManager pluginManagerParentFirst;", "modifier": "private", "type": "TestPluginManager", "declarator": "pluginManagerParentFirst", "var_name": "pluginManagerParentFirst"}, {"original_string": "private DefaultPluginDescriptor pluginDependencyDescriptor;", "modifier": "private", "type": "DefaultPluginDescriptor", "declarator": "pluginDependencyDescriptor", "var_name": "pluginDependencyDescriptor"}, {"original_string": "private DefaultPluginDescriptor pluginDescriptor;", "modifier": "private", "type": "DefaultPluginDescriptor", "declarator": "pluginDescriptor", "var_name": "pluginDescriptor"}, {"original_string": "private PluginClassLoader parentLastPluginClassLoader;", "modifier": "private", "type": "PluginClassLoader", "declarator": "parentLastPluginClassLoader", "var_name": "parentLastPluginClassLoader"}, {"original_string": "private PluginClassLoader parentFirstPluginClassLoader;", "modifier": "private", "type": "PluginClassLoader", "declarator": "parentFirstPluginClassLoader", "var_name": "parentFirstPluginClassLoader"}, {"original_string": "private PluginClassLoader parentLastPluginDependencyClassLoader;", "modifier": "private", "type": "PluginClassLoader", "declarator": "parentLastPluginDependencyClassLoader", "var_name": "parentLastPluginDependencyClassLoader"}, {"original_string": "private PluginClassLoader parentFirstPluginDependencyClassLoader;", "modifier": "private", "type": "PluginClassLoader", "declarator": "parentFirstPluginDependencyClassLoader", "var_name": "parentFirstPluginDependencyClassLoader"}, {"original_string": "@TempDir\n    Path pluginsPath;", "modifier": "@TempDir", "type": "Path", "declarator": "pluginsPath", "var_name": "pluginsPath"}], "file": "pf4j/src/test/java/org/pf4j/PluginClassLoaderTest.java"}, "test_case": {"identifier": "parentFirstGetResourceExistsInParent", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void parentFirstGetResourceExistsInParent() throws IOException, URISyntaxException {\n        URL resource = parentFirstPluginClassLoader.getResource(\"META-INF/file-only-in-parent\");\n        assertFirstLine(\"parent\", resource);\n    }", "signature": "void parentFirstGetResourceExistsInParent()", "full_signature": "@Test void parentFirstGetResourceExistsInParent()", "class_method_signature": "PluginClassLoaderTest.parentFirstGetResourceExistsInParent()", "testcase": true, "constructor": false, "invocations": ["getResource", "assertFirstLine"]}, "focal_class": {"identifier": "PluginClassLoader", "superclass": "extends URLClassLoader", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(PluginClassLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(PluginClassLoader.class)", "var_name": "log"}, {"original_string": "private static final String JAVA_PACKAGE_PREFIX = \"java.\";", "modifier": "private static final", "type": "String", "declarator": "JAVA_PACKAGE_PREFIX = \"java.\"", "var_name": "JAVA_PACKAGE_PREFIX"}, {"original_string": "private static final String PLUGIN_PACKAGE_PREFIX = \"org.pf4j.\";", "modifier": "private static final", "type": "String", "declarator": "PLUGIN_PACKAGE_PREFIX = \"org.pf4j.\"", "var_name": "PLUGIN_PACKAGE_PREFIX"}, {"original_string": "private PluginManager pluginManager;", "modifier": "private", "type": "PluginManager", "declarator": "pluginManager", "var_name": "pluginManager"}, {"original_string": "private PluginDescriptor pluginDescriptor;", "modifier": "private", "type": "PluginDescriptor", "declarator": "pluginDescriptor", "var_name": "pluginDescriptor"}, {"original_string": "private ClassLoadingStrategy classLoadingStrategy;", "modifier": "private", "type": "ClassLoadingStrategy", "declarator": "classLoadingStrategy", "var_name": "classLoadingStrategy"}], "methods": [{"identifier": "PluginClassLoader", "parameters": "(PluginManager pluginManager, PluginDescriptor pluginDescriptor, ClassLoader parent)", "modifiers": "public", "return": "", "signature": " PluginClassLoader(PluginManager pluginManager, PluginDescriptor pluginDescriptor, ClassLoader parent)", "full_signature": "public  PluginClassLoader(PluginManager pluginManager, PluginDescriptor pluginDescriptor, ClassLoader parent)", "class_method_signature": "PluginClassLoader.PluginClassLoader(PluginManager pluginManager, PluginDescriptor pluginDescriptor, ClassLoader parent)", "testcase": false, "constructor": true}, {"identifier": "PluginClassLoader", "parameters": "(PluginManager pluginManager, PluginDescriptor pluginDescriptor, ClassLoader parent, boolean parentFirst)", "modifiers": "@Deprecated public", "return": "", "signature": " PluginClassLoader(PluginManager pluginManager, PluginDescriptor pluginDescriptor, ClassLoader parent, boolean parentFirst)", "full_signature": "@Deprecated public  PluginClassLoader(PluginManager pluginManager, PluginDescriptor pluginDescriptor, ClassLoader parent, boolean parentFirst)", "class_method_signature": "PluginClassLoader.PluginClassLoader(PluginManager pluginManager, PluginDescriptor pluginDescriptor, ClassLoader parent, boolean parentFirst)", "testcase": false, "constructor": true}, {"identifier": "PluginClassLoader", "parameters": "(PluginManager pluginManager, PluginDescriptor pluginDescriptor, ClassLoader parent, ClassLoadingStrategy classLoadingStrategy)", "modifiers": "public", "return": "", "signature": " PluginClassLoader(PluginManager pluginManager, PluginDescriptor pluginDescriptor, ClassLoader parent, ClassLoadingStrategy classLoadingStrategy)", "full_signature": "public  PluginClassLoader(PluginManager pluginManager, PluginDescriptor pluginDescriptor, ClassLoader parent, ClassLoadingStrategy classLoadingStrategy)", "class_method_signature": "PluginClassLoader.PluginClassLoader(PluginManager pluginManager, PluginDescriptor pluginDescriptor, ClassLoader parent, ClassLoadingStrategy classLoadingStrategy)", "testcase": false, "constructor": true}, {"identifier": "addURL", "parameters": "(URL url)", "modifiers": "@Override public", "return": "void", "signature": "void addURL(URL url)", "full_signature": "@Override public void addURL(URL url)", "class_method_signature": "PluginClassLoader.addURL(URL url)", "testcase": false, "constructor": false}, {"identifier": "addFile", "parameters": "(File file)", "modifiers": "public", "return": "void", "signature": "void addFile(File file)", "full_signature": "public void addFile(File file)", "class_method_signature": "PluginClassLoader.addFile(File file)", "testcase": false, "constructor": false}, {"identifier": "loadClass", "parameters": "(String className)", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> loadClass(String className)", "full_signature": "@Override public Class<?> loadClass(String className)", "class_method_signature": "PluginClassLoader.loadClass(String className)", "testcase": false, "constructor": false}, {"identifier": "getResource", "parameters": "(String name)", "modifiers": "@Override public", "return": "URL", "signature": "URL getResource(String name)", "full_signature": "@Override public URL getResource(String name)", "class_method_signature": "PluginClassLoader.getResource(String name)", "testcase": false, "constructor": false}, {"identifier": "getResources", "parameters": "(String name)", "modifiers": "@Override public", "return": "Enumeration<URL>", "signature": "Enumeration<URL> getResources(String name)", "full_signature": "@Override public Enumeration<URL> getResources(String name)", "class_method_signature": "PluginClassLoader.getResources(String name)", "testcase": false, "constructor": false}, {"identifier": "loadClassFromDependencies", "parameters": "(String className)", "modifiers": "protected", "return": "Class<?>", "signature": "Class<?> loadClassFromDependencies(String className)", "full_signature": "protected Class<?> loadClassFromDependencies(String className)", "class_method_signature": "PluginClassLoader.loadClassFromDependencies(String className)", "testcase": false, "constructor": false}, {"identifier": "findResourceFromDependencies", "parameters": "(String name)", "modifiers": "protected", "return": "URL", "signature": "URL findResourceFromDependencies(String name)", "full_signature": "protected URL findResourceFromDependencies(String name)", "class_method_signature": "PluginClassLoader.findResourceFromDependencies(String name)", "testcase": false, "constructor": false}, {"identifier": "findResourcesFromDependencies", "parameters": "(String name)", "modifiers": "protected", "return": "Collection<URL>", "signature": "Collection<URL> findResourcesFromDependencies(String name)", "full_signature": "protected Collection<URL> findResourcesFromDependencies(String name)", "class_method_signature": "PluginClassLoader.findResourcesFromDependencies(String name)", "testcase": false, "constructor": false}], "file": "pf4j/src/main/java/org/pf4j/PluginClassLoader.java"}, "focal_method": {"identifier": "getResource", "parameters": "(String name)", "modifiers": "@Override public", "return": "URL", "body": "@Override\n    public URL getResource(String name) {\n        log.trace(\"Received request to load resource '{}'\", name);\n        for (ClassLoadingStrategy.Source classLoadingSource : classLoadingStrategy.getSources()) {\n            URL url = null;\n            switch (classLoadingSource) {\n                case APPLICATION:\n                    url = super.getResource(name);\n                    break;\n                case PLUGIN:\n                    url = findResource(name);\n                    break;\n                case DEPENDENCIES:\n                    url = findResourceFromDependencies(name);\n                    break;\n            }\n\n            if (url != null) {\n                log.trace(\"Found resource '{}' in {} classpath\", name, classLoadingSource);\n                return url;\n            } else {\n                log.trace(\"Couldn't find resource '{}' in {}\", name, classLoadingSource);\n            }\n        }\n\n        return null;\n    }", "signature": "URL getResource(String name)", "full_signature": "@Override public URL getResource(String name)", "class_method_signature": "PluginClassLoader.getResource(String name)", "testcase": false, "constructor": false, "invocations": ["trace", "getSources", "getResource", "findResource", "findResourceFromDependencies", "trace", "trace"]}, "repository": {"repo_id": 6157458, "url": "https://github.com/pf4j/pf4j", "stars": 1034, "created": "10/10/2012 1:10:32 PM +00:00", "updates": "2020-01-20T02:39:14+00:00", "fork": "False", "license": "licensed"}}