{"test_class": {"identifier": "NamespaceIamRoleAuthorizationRestControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private NamespaceIamRoleAuthorizationRestController namespaceIamRoleAuthorizationRestController;", "modifier": "@InjectMocks\n    private", "type": "NamespaceIamRoleAuthorizationRestController", "declarator": "namespaceIamRoleAuthorizationRestController", "var_name": "namespaceIamRoleAuthorizationRestController"}, {"original_string": "@Mock\n    private NamespaceIamRoleAuthorizationService namespaceIamRoleAuthorizationService;", "modifier": "@Mock\n    private", "type": "NamespaceIamRoleAuthorizationService", "declarator": "namespaceIamRoleAuthorizationService", "var_name": "namespaceIamRoleAuthorizationService"}], "file": "herd-code/herd-rest/src/test/java/org/finra/herd/rest/NamespaceIamRoleAuthorizationRestControllerTest.java"}, "test_case": {"identifier": "getNamespaceIamRoleAuthorizationAssertCallsService", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getNamespaceIamRoleAuthorizationAssertCallsService()\n    {\n        String expectedNamespace = \"namespace\";\n        NamespaceIamRoleAuthorization expectedResult = new NamespaceIamRoleAuthorization();\n        when(namespaceIamRoleAuthorizationService.getNamespaceIamRoleAuthorization(any())).thenReturn(expectedResult);\n        NamespaceIamRoleAuthorization actualResult = namespaceIamRoleAuthorizationRestController.getNamespaceIamRoleAuthorization(expectedNamespace);\n        verify(namespaceIamRoleAuthorizationService).getNamespaceIamRoleAuthorization(expectedNamespace);\n        verifyNoMoreInteractions(namespaceIamRoleAuthorizationService);\n        assertEquals(expectedResult, actualResult);\n    }", "signature": "void getNamespaceIamRoleAuthorizationAssertCallsService()", "full_signature": "@Test public void getNamespaceIamRoleAuthorizationAssertCallsService()", "class_method_signature": "NamespaceIamRoleAuthorizationRestControllerTest.getNamespaceIamRoleAuthorizationAssertCallsService()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getNamespaceIamRoleAuthorization", "any", "getNamespaceIamRoleAuthorization", "getNamespaceIamRoleAuthorization", "verify", "verifyNoMoreInteractions", "assertEquals"]}, "focal_class": {"identifier": "NamespaceIamRoleAuthorizationRestController", "superclass": "extends HerdBaseController", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private NamespaceIamRoleAuthorizationService namespaceIamRoleAuthorizationService;", "modifier": "@Autowired\n    private", "type": "NamespaceIamRoleAuthorizationService", "declarator": "namespaceIamRoleAuthorizationService", "var_name": "namespaceIamRoleAuthorizationService"}], "methods": [{"identifier": "createNamespaceIamRoleAuthorization", "parameters": "(@RequestBody NamespaceIamRoleAuthorizationCreateRequest request)", "modifiers": "@RequestMapping(value = \"/namespaceIamRoleAuthorizations\", method = RequestMethod.POST, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_NAMESPACE_IAM_ROLE_AUTHORIZATIONS_POST) public", "return": "NamespaceIamRoleAuthorization", "signature": "NamespaceIamRoleAuthorization createNamespaceIamRoleAuthorization(@RequestBody NamespaceIamRoleAuthorizationCreateRequest request)", "full_signature": "@RequestMapping(value = \"/namespaceIamRoleAuthorizations\", method = RequestMethod.POST, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_NAMESPACE_IAM_ROLE_AUTHORIZATIONS_POST) public NamespaceIamRoleAuthorization createNamespaceIamRoleAuthorization(@RequestBody NamespaceIamRoleAuthorizationCreateRequest request)", "class_method_signature": "NamespaceIamRoleAuthorizationRestController.createNamespaceIamRoleAuthorization(@RequestBody NamespaceIamRoleAuthorizationCreateRequest request)", "testcase": false, "constructor": false}, {"identifier": "getNamespaceIamRoleAuthorization", "parameters": "(@PathVariable(\"namespace\") String namespace)", "modifiers": "@RequestMapping(value = \"/namespaceIamRoleAuthorizations/namespaces/{namespace}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_NAMESPACE_IAM_ROLE_AUTHORIZATIONS_GET) public", "return": "NamespaceIamRoleAuthorization", "signature": "NamespaceIamRoleAuthorization getNamespaceIamRoleAuthorization(@PathVariable(\"namespace\") String namespace)", "full_signature": "@RequestMapping(value = \"/namespaceIamRoleAuthorizations/namespaces/{namespace}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_NAMESPACE_IAM_ROLE_AUTHORIZATIONS_GET) public NamespaceIamRoleAuthorization getNamespaceIamRoleAuthorization(@PathVariable(\"namespace\") String namespace)", "class_method_signature": "NamespaceIamRoleAuthorizationRestController.getNamespaceIamRoleAuthorization(@PathVariable(\"namespace\") String namespace)", "testcase": false, "constructor": false}, {"identifier": "getNamespaceIamRoleAuthorizations", "parameters": "()", "modifiers": "@RequestMapping(value = \"/namespaceIamRoleAuthorizations\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_NAMESPACE_IAM_ROLE_AUTHORIZATIONS_ALL_GET) public", "return": "NamespaceIamRoleAuthorizations", "signature": "NamespaceIamRoleAuthorizations getNamespaceIamRoleAuthorizations()", "full_signature": "@RequestMapping(value = \"/namespaceIamRoleAuthorizations\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_NAMESPACE_IAM_ROLE_AUTHORIZATIONS_ALL_GET) public NamespaceIamRoleAuthorizations getNamespaceIamRoleAuthorizations()", "class_method_signature": "NamespaceIamRoleAuthorizationRestController.getNamespaceIamRoleAuthorizations()", "testcase": false, "constructor": false}, {"identifier": "updateNamespaceIamRoleAuthorization", "parameters": "(@PathVariable(\"namespace\") String namespace,\n        @RequestBody NamespaceIamRoleAuthorizationUpdateRequest request)", "modifiers": "@RequestMapping(value = \"/namespaceIamRoleAuthorizations/namespaces/{namespace}\", method = RequestMethod.PUT, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_NAMESPACE_IAM_ROLE_AUTHORIZATIONS_PUT) public", "return": "NamespaceIamRoleAuthorization", "signature": "NamespaceIamRoleAuthorization updateNamespaceIamRoleAuthorization(@PathVariable(\"namespace\") String namespace,\n        @RequestBody NamespaceIamRoleAuthorizationUpdateRequest request)", "full_signature": "@RequestMapping(value = \"/namespaceIamRoleAuthorizations/namespaces/{namespace}\", method = RequestMethod.PUT, consumes = {\"application/xml\", \"application/json\"}) @Secured(SecurityFunctions.FN_NAMESPACE_IAM_ROLE_AUTHORIZATIONS_PUT) public NamespaceIamRoleAuthorization updateNamespaceIamRoleAuthorization(@PathVariable(\"namespace\") String namespace,\n        @RequestBody NamespaceIamRoleAuthorizationUpdateRequest request)", "class_method_signature": "NamespaceIamRoleAuthorizationRestController.updateNamespaceIamRoleAuthorization(@PathVariable(\"namespace\") String namespace,\n        @RequestBody NamespaceIamRoleAuthorizationUpdateRequest request)", "testcase": false, "constructor": false}, {"identifier": "deleteNamespaceIamRoleAuthorization", "parameters": "(@PathVariable(\"namespace\") String namespace)", "modifiers": "@RequestMapping(value = \"/namespaceIamRoleAuthorizations/namespaces/{namespace}\", method = RequestMethod.DELETE) @Secured(SecurityFunctions.FN_NAMESPACE_IAM_ROLE_AUTHORIZATIONS_DELETE) public", "return": "NamespaceIamRoleAuthorization", "signature": "NamespaceIamRoleAuthorization deleteNamespaceIamRoleAuthorization(@PathVariable(\"namespace\") String namespace)", "full_signature": "@RequestMapping(value = \"/namespaceIamRoleAuthorizations/namespaces/{namespace}\", method = RequestMethod.DELETE) @Secured(SecurityFunctions.FN_NAMESPACE_IAM_ROLE_AUTHORIZATIONS_DELETE) public NamespaceIamRoleAuthorization deleteNamespaceIamRoleAuthorization(@PathVariable(\"namespace\") String namespace)", "class_method_signature": "NamespaceIamRoleAuthorizationRestController.deleteNamespaceIamRoleAuthorization(@PathVariable(\"namespace\") String namespace)", "testcase": false, "constructor": false}], "file": "herd-code/herd-rest/src/main/java/org/finra/herd/rest/NamespaceIamRoleAuthorizationRestController.java"}, "focal_method": {"identifier": "getNamespaceIamRoleAuthorization", "parameters": "(@PathVariable(\"namespace\") String namespace)", "modifiers": "@RequestMapping(value = \"/namespaceIamRoleAuthorizations/namespaces/{namespace}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_NAMESPACE_IAM_ROLE_AUTHORIZATIONS_GET) public", "return": "NamespaceIamRoleAuthorization", "body": "@RequestMapping(value = \"/namespaceIamRoleAuthorizations/namespaces/{namespace}\", method = RequestMethod.GET)\n    @Secured(SecurityFunctions.FN_NAMESPACE_IAM_ROLE_AUTHORIZATIONS_GET)\n    public NamespaceIamRoleAuthorization getNamespaceIamRoleAuthorization(@PathVariable(\"namespace\") String namespace)\n    {\n        return namespaceIamRoleAuthorizationService.getNamespaceIamRoleAuthorization(namespace);\n    }", "signature": "NamespaceIamRoleAuthorization getNamespaceIamRoleAuthorization(@PathVariable(\"namespace\") String namespace)", "full_signature": "@RequestMapping(value = \"/namespaceIamRoleAuthorizations/namespaces/{namespace}\", method = RequestMethod.GET) @Secured(SecurityFunctions.FN_NAMESPACE_IAM_ROLE_AUTHORIZATIONS_GET) public NamespaceIamRoleAuthorization getNamespaceIamRoleAuthorization(@PathVariable(\"namespace\") String namespace)", "class_method_signature": "NamespaceIamRoleAuthorizationRestController.getNamespaceIamRoleAuthorization(@PathVariable(\"namespace\") String namespace)", "testcase": false, "constructor": false, "invocations": ["getNamespaceIamRoleAuthorization"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}