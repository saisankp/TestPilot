{"test_class": {"identifier": "DeviceComparatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "android/testSrc/com/android/tools/idea/run/deployment/DeviceComparatorTest.java"}, "test_case": {"identifier": "compareType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void compareType() {\n    Device device1 = new VirtualDevice.Builder()\n      .setName(\"Pixel 3 API 28\")\n      .setKey(new Key(\"Pixel_3_API_28\"))\n      .setConnectionTime(Instant.parse(\"2018-11-28T01:15:27.000Z\"))\n      .setAndroidDevice(Mockito.mock(AndroidDevice.class))\n      .build();\n\n    Device device2 = new PhysicalDevice.Builder()\n      .setName(\"LGE Nexus 5X\")\n      .setKey(new Key(\"00fff9d2279fa601\"))\n      .setAndroidDevice(Mockito.mock(AndroidDevice.class))\n      .build();\n\n    assertTrue(new DeviceComparator().compare(device1, device2) < 0);\n  }", "signature": "void compareType()", "full_signature": "@Test public void compareType()", "class_method_signature": "DeviceComparatorTest.compareType()", "testcase": true, "constructor": false, "invocations": ["build", "setAndroidDevice", "setConnectionTime", "setKey", "setName", "parse", "mock", "build", "setAndroidDevice", "setKey", "setName", "mock", "assertTrue", "compare"]}, "focal_class": {"identifier": "DeviceComparator", "superclass": "", "interfaces": "implements Comparator<Device>", "fields": [{"original_string": "private static final Comparator<Device> COMPARATOR =\n    Comparator.comparing(Device::getConnectionTime, Comparator.nullsLast(Comparator.reverseOrder()))\n      .thenComparing(Device::isValid, Comparator.reverseOrder())\n      .thenComparing(DeviceComparator::getType)\n      .thenComparing(Device::getName);", "modifier": "private static final", "type": "Comparator<Device>", "declarator": "COMPARATOR =\n    Comparator.comparing(Device::getConnectionTime, Comparator.nullsLast(Comparator.reverseOrder()))\n      .thenComparing(Device::isValid, Comparator.reverseOrder())\n      .thenComparing(DeviceComparator::getType)\n      .thenComparing(Device::getName)", "var_name": "COMPARATOR"}], "methods": [{"identifier": "getType", "parameters": "(@NotNull Device device)", "modifiers": "@NotNull private static", "return": "Type", "signature": "Type getType(@NotNull Device device)", "full_signature": "@NotNull private static Type getType(@NotNull Device device)", "class_method_signature": "DeviceComparator.getType(@NotNull Device device)", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(@NotNull Device device1, @NotNull Device device2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(@NotNull Device device1, @NotNull Device device2)", "full_signature": "@Override public int compare(@NotNull Device device1, @NotNull Device device2)", "class_method_signature": "DeviceComparator.compare(@NotNull Device device1, @NotNull Device device2)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/run/deployment/DeviceComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(@NotNull Device device1, @NotNull Device device2)", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int compare(@NotNull Device device1, @NotNull Device device2) {\n    return COMPARATOR.compare(device1, device2);\n  }", "signature": "int compare(@NotNull Device device1, @NotNull Device device2)", "full_signature": "@Override public int compare(@NotNull Device device1, @NotNull Device device2)", "class_method_signature": "DeviceComparator.compare(@NotNull Device device1, @NotNull Device device2)", "testcase": false, "constructor": false, "invocations": ["compare"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}