{"test_class": {"identifier": "ModifyPolicyEntriesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final JsonObject KNOWN_JSON = JsonFactory.newObjectBuilder()\n            .set(PolicyCommand.JsonFields.TYPE, ModifyPolicyEntries.TYPE)\n            .set(PolicyCommand.JsonFields.JSON_POLICY_ID, TestConstants.Policy.POLICY_ID.toString())\n            .set(ModifyPolicyEntries.JSON_POLICY_ENTRIES,\n                    StreamSupport.stream(TestConstants.Policy.POLICY_ENTRIES.spliterator(), false)\n                            .map(entry -> JsonFactory.newObjectBuilder()\n                                    .set(entry.getLabel().toString(), entry.toJson(FieldType.regularOrSpecial()))\n                                    .build())\n                            .collect(JsonCollectors.objectsToObject()))\n            .build();", "modifier": "private static final", "type": "JsonObject", "declarator": "KNOWN_JSON = JsonFactory.newObjectBuilder()\n            .set(PolicyCommand.JsonFields.TYPE, ModifyPolicyEntries.TYPE)\n            .set(PolicyCommand.JsonFields.JSON_POLICY_ID, TestConstants.Policy.POLICY_ID.toString())\n            .set(ModifyPolicyEntries.JSON_POLICY_ENTRIES,\n                    StreamSupport.stream(TestConstants.Policy.POLICY_ENTRIES.spliterator(), false)\n                            .map(entry -> JsonFactory.newObjectBuilder()\n                                    .set(entry.getLabel().toString(), entry.toJson(FieldType.regularOrSpecial()))\n                                    .build())\n                            .collect(JsonCollectors.objectsToObject()))\n            .build()", "var_name": "KNOWN_JSON"}], "file": "signals/commands/policies/src/test/java/org/eclipse/ditto/signals/commands/policies/modify/ModifyPolicyEntriesTest.java"}, "test_case": {"identifier": "tryToCreateInstanceWithInvalidPolicyId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void tryToCreateInstanceWithInvalidPolicyId() {\n        assertThatExceptionOfType(PolicyIdInvalidException.class)\n                .isThrownBy(() -> ModifyPolicyEntries.of(\"undefined\", TestConstants.Policy.POLICY_ENTRIES,\n                        TestConstants.EMPTY_DITTO_HEADERS));\n    }", "signature": "void tryToCreateInstanceWithInvalidPolicyId()", "full_signature": "@Test public void tryToCreateInstanceWithInvalidPolicyId()", "class_method_signature": "ModifyPolicyEntriesTest.tryToCreateInstanceWithInvalidPolicyId()", "testcase": true, "constructor": false, "invocations": ["isThrownBy", "assertThatExceptionOfType", "of"]}, "focal_class": {"identifier": "ModifyPolicyEntries", "superclass": "extends AbstractCommand<ModifyPolicyEntries>", "interfaces": "implements PolicyModifyCommand<ModifyPolicyEntries>", "fields": [{"original_string": "public static final String NAME = \"modifyPolicyEntries\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"modifyPolicyEntries\"", "var_name": "NAME"}, {"original_string": "public static final String TYPE = TYPE_PREFIX + NAME;", "modifier": "public static final", "type": "String", "declarator": "TYPE = TYPE_PREFIX + NAME", "var_name": "TYPE"}, {"original_string": "static final JsonFieldDefinition<JsonObject> JSON_POLICY_ENTRIES =\n            JsonFactory.newJsonObjectFieldDefinition(\"policyEntries\", FieldType.REGULAR, JsonSchemaVersion.V_2);", "modifier": "static final", "type": "JsonFieldDefinition<JsonObject>", "declarator": "JSON_POLICY_ENTRIES =\n            JsonFactory.newJsonObjectFieldDefinition(\"policyEntries\", FieldType.REGULAR, JsonSchemaVersion.V_2)", "var_name": "JSON_POLICY_ENTRIES"}, {"original_string": "private final PolicyId policyId;", "modifier": "private final", "type": "PolicyId", "declarator": "policyId", "var_name": "policyId"}, {"original_string": "private final Iterable<PolicyEntry> policyEntries;", "modifier": "private final", "type": "Iterable<PolicyEntry>", "declarator": "policyEntries", "var_name": "policyEntries"}], "methods": [{"identifier": "ModifyPolicyEntries", "parameters": "(final PolicyId policyId, final Iterable<PolicyEntry> policyEntries,\n            final DittoHeaders dittoHeaders)", "modifiers": "private", "return": "", "signature": " ModifyPolicyEntries(final PolicyId policyId, final Iterable<PolicyEntry> policyEntries,\n            final DittoHeaders dittoHeaders)", "full_signature": "private  ModifyPolicyEntries(final PolicyId policyId, final Iterable<PolicyEntry> policyEntries,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "ModifyPolicyEntries.ModifyPolicyEntries(final PolicyId policyId, final Iterable<PolicyEntry> policyEntries,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(final String policyId, final Iterable<PolicyEntry> policyEntries,\n            final DittoHeaders dittoHeaders)", "modifiers": "@Deprecated public static", "return": "ModifyPolicyEntries", "signature": "ModifyPolicyEntries of(final String policyId, final Iterable<PolicyEntry> policyEntries,\n            final DittoHeaders dittoHeaders)", "full_signature": "@Deprecated public static ModifyPolicyEntries of(final String policyId, final Iterable<PolicyEntry> policyEntries,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "ModifyPolicyEntries.of(final String policyId, final Iterable<PolicyEntry> policyEntries,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final PolicyId policyId, final Iterable<PolicyEntry> policyEntries,\n            final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "ModifyPolicyEntries", "signature": "ModifyPolicyEntries of(final PolicyId policyId, final Iterable<PolicyEntry> policyEntries,\n            final DittoHeaders dittoHeaders)", "full_signature": "public static ModifyPolicyEntries of(final PolicyId policyId, final Iterable<PolicyEntry> policyEntries,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "ModifyPolicyEntries.of(final PolicyId policyId, final Iterable<PolicyEntry> policyEntries,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final String jsonString, final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "ModifyPolicyEntries", "signature": "ModifyPolicyEntries fromJson(final String jsonString, final DittoHeaders dittoHeaders)", "full_signature": "public static ModifyPolicyEntries fromJson(final String jsonString, final DittoHeaders dittoHeaders)", "class_method_signature": "ModifyPolicyEntries.fromJson(final String jsonString, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "ModifyPolicyEntries", "signature": "ModifyPolicyEntries fromJson(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "full_signature": "public static ModifyPolicyEntries fromJson(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "class_method_signature": "ModifyPolicyEntries.fromJson(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "getPolicyEntries", "parameters": "()", "modifiers": "public", "return": "Iterable<PolicyEntry>", "signature": "Iterable<PolicyEntry> getPolicyEntries()", "full_signature": "public Iterable<PolicyEntry> getPolicyEntries()", "class_method_signature": "ModifyPolicyEntries.getPolicyEntries()", "testcase": false, "constructor": false}, {"identifier": "getEntityId", "parameters": "()", "modifiers": "@Override public", "return": "PolicyId", "signature": "PolicyId getEntityId()", "full_signature": "@Override public PolicyId getEntityId()", "class_method_signature": "ModifyPolicyEntries.getEntityId()", "testcase": false, "constructor": false}, {"identifier": "getEntity", "parameters": "(final JsonSchemaVersion schemaVersion)", "modifiers": "@Override public", "return": "Optional<JsonValue>", "signature": "Optional<JsonValue> getEntity(final JsonSchemaVersion schemaVersion)", "full_signature": "@Override public Optional<JsonValue> getEntity(final JsonSchemaVersion schemaVersion)", "class_method_signature": "ModifyPolicyEntries.getEntity(final JsonSchemaVersion schemaVersion)", "testcase": false, "constructor": false}, {"identifier": "getResourcePath", "parameters": "()", "modifiers": "@Override public", "return": "JsonPointer", "signature": "JsonPointer getResourcePath()", "full_signature": "@Override public JsonPointer getResourcePath()", "class_method_signature": "ModifyPolicyEntries.getResourcePath()", "testcase": false, "constructor": false}, {"identifier": "appendPayload", "parameters": "(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> thePredicate)", "modifiers": "@Override protected", "return": "void", "signature": "void appendPayload(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> thePredicate)", "full_signature": "@Override protected void appendPayload(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> thePredicate)", "class_method_signature": "ModifyPolicyEntries.appendPayload(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> thePredicate)", "testcase": false, "constructor": false}, {"identifier": "getCategory", "parameters": "()", "modifiers": "@Override public", "return": "Category", "signature": "Category getCategory()", "full_signature": "@Override public Category getCategory()", "class_method_signature": "ModifyPolicyEntries.getCategory()", "testcase": false, "constructor": false}, {"identifier": "setDittoHeaders", "parameters": "(final DittoHeaders dittoHeaders)", "modifiers": "@Override public", "return": "ModifyPolicyEntries", "signature": "ModifyPolicyEntries setDittoHeaders(final DittoHeaders dittoHeaders)", "full_signature": "@Override public ModifyPolicyEntries setDittoHeaders(final DittoHeaders dittoHeaders)", "class_method_signature": "ModifyPolicyEntries.setDittoHeaders(final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "canEqual", "parameters": "(@Nullable final Object other)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean canEqual(@Nullable final Object other)", "full_signature": "@Override protected boolean canEqual(@Nullable final Object other)", "class_method_signature": "ModifyPolicyEntries.canEqual(@Nullable final Object other)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable final Object obj)", "modifiers": "@SuppressWarnings(\"squid:MethodCyclomaticComplexity\") @Override public", "return": "boolean", "signature": "boolean equals(@Nullable final Object obj)", "full_signature": "@SuppressWarnings(\"squid:MethodCyclomaticComplexity\") @Override public boolean equals(@Nullable final Object obj)", "class_method_signature": "ModifyPolicyEntries.equals(@Nullable final Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@SuppressWarnings(\"squid:S109\") @Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@SuppressWarnings(\"squid:S109\") @Override public int hashCode()", "class_method_signature": "ModifyPolicyEntries.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ModifyPolicyEntries.toString()", "testcase": false, "constructor": false}], "file": "signals/commands/policies/src/main/java/org/eclipse/ditto/signals/commands/policies/modify/ModifyPolicyEntries.java"}, "focal_method": {"identifier": "of", "parameters": "(final String policyId, final Iterable<PolicyEntry> policyEntries,\n            final DittoHeaders dittoHeaders)", "modifiers": "@Deprecated public static", "return": "ModifyPolicyEntries", "body": "@Deprecated\n    public static ModifyPolicyEntries of(final String policyId, final Iterable<PolicyEntry> policyEntries,\n            final DittoHeaders dittoHeaders) {\n\n        return of(PolicyId.of(policyId), policyEntries, dittoHeaders);\n    }", "signature": "ModifyPolicyEntries of(final String policyId, final Iterable<PolicyEntry> policyEntries,\n            final DittoHeaders dittoHeaders)", "full_signature": "@Deprecated public static ModifyPolicyEntries of(final String policyId, final Iterable<PolicyEntry> policyEntries,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "ModifyPolicyEntries.of(final String policyId, final Iterable<PolicyEntry> policyEntries,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false, "invocations": ["of", "of"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}