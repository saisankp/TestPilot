{"test_class": {"identifier": "CommandHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ObjectMapper mapper = new ObjectMapper();", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/command/CommandHelperTest.java"}, "test_case": {"identifier": "testCommandToPublisher", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCommandToPublisher() throws Exception {\n        // Given\n        HystrixCommand<InputStream> command = new InputStreamTestCommand();\n        final Publisher<CommandHelperTestData> publisher =\n                CommandHelper.toPublisher(CommandHelperTestData.class, mapper, command);\n        final List<CommandHelperTestData> receivedData = new ArrayList<>();\n\n        // When\n        Flux.from(publisher).subscribe(receivedData::add);\n\n        // Then\n        assertEquals(3, receivedData.size());\n        assertEquals(\"1\", receivedData.get(0).getValue());\n        assertEquals(\"2\", receivedData.get(1).getValue());\n        assertEquals(\"3\", receivedData.get(2).getValue());\n    }", "signature": "void testCommandToPublisher()", "full_signature": "@Test public void testCommandToPublisher()", "class_method_signature": "CommandHelperTest.testCommandToPublisher()", "testcase": true, "constructor": false, "invocations": ["toPublisher", "subscribe", "from", "assertEquals", "size", "assertEquals", "getValue", "get", "assertEquals", "getValue", "get", "assertEquals", "getValue", "get"]}, "focal_class": {"identifier": "CommandHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CommandHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CommandHelper.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "CommandHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " CommandHelper()", "full_signature": "private  CommandHelper()", "class_method_signature": "CommandHelper.CommandHelper()", "testcase": false, "constructor": true}, {"identifier": "toStreaming", "parameters": "(final HystrixCommand<InputStream> command)", "modifiers": "public static", "return": "StreamingResponseBody", "signature": "StreamingResponseBody toStreaming(final HystrixCommand<InputStream> command)", "full_signature": "public static StreamingResponseBody toStreaming(final HystrixCommand<InputStream> command)", "class_method_signature": "CommandHelper.toStreaming(final HystrixCommand<InputStream> command)", "testcase": false, "constructor": false}, {"identifier": "async", "parameters": "(final GenericCommand<?> command)", "modifiers": "public static", "return": "ResponseEntity<Void>", "signature": "ResponseEntity<Void> async(final GenericCommand<?> command)", "full_signature": "public static ResponseEntity<Void> async(final GenericCommand<?> command)", "class_method_signature": "CommandHelper.async(final GenericCommand<?> command)", "testcase": false, "constructor": false}, {"identifier": "toStreaming", "parameters": "(final GenericCommand<InputStream> command)", "modifiers": "public static", "return": "ResponseEntity<StreamingResponseBody>", "signature": "ResponseEntity<StreamingResponseBody> toStreaming(final GenericCommand<InputStream> command)", "full_signature": "public static ResponseEntity<StreamingResponseBody> toStreaming(final GenericCommand<InputStream> command)", "class_method_signature": "CommandHelper.toStreaming(final GenericCommand<InputStream> command)", "testcase": false, "constructor": false}, {"identifier": "toPublisher", "parameters": "(final Class<T> clazz, final ObjectMapper mapper,\n            final HystrixCommand<InputStream> command)", "modifiers": "public static", "return": "Publisher<T>", "signature": "Publisher<T> toPublisher(final Class<T> clazz, final ObjectMapper mapper,\n            final HystrixCommand<InputStream> command)", "full_signature": "public static Publisher<T> toPublisher(final Class<T> clazz, final ObjectMapper mapper,\n            final HystrixCommand<InputStream> command)", "class_method_signature": "CommandHelper.toPublisher(final Class<T> clazz, final ObjectMapper mapper,\n            final HystrixCommand<InputStream> command)", "testcase": false, "constructor": false}, {"identifier": "toStream", "parameters": "(Class<T> clazz, ObjectMapper mapper, HystrixCommand<InputStream> command)", "modifiers": "public static", "return": "Stream<T>", "signature": "Stream<T> toStream(Class<T> clazz, ObjectMapper mapper, HystrixCommand<InputStream> command)", "full_signature": "public static Stream<T> toStream(Class<T> clazz, ObjectMapper mapper, HystrixCommand<InputStream> command)", "class_method_signature": "CommandHelper.toStream(Class<T> clazz, ObjectMapper mapper, HystrixCommand<InputStream> command)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/command/CommandHelper.java"}, "focal_method": {"identifier": "toPublisher", "parameters": "(final Class<T> clazz, final ObjectMapper mapper,\n            final HystrixCommand<InputStream> command)", "modifiers": "public static", "return": "Publisher<T>", "body": "public static <T> Publisher<T> toPublisher(final Class<T> clazz, final ObjectMapper mapper,\n            final HystrixCommand<InputStream> command) {\n        AtomicInteger count = new AtomicInteger(0);\n        return Flux.create(sink -> {\n            final Observable<InputStream> observable = command.toObservable();\n            observable\n                    .map(i -> {\n                        try {\n                            return mapper.readerFor(clazz).<T> readValues(i);\n                        } catch (IOException e) {\n                            throw new TDPException(CommonErrorCodes.UNEXPECTED_EXCEPTION, e);\n                        }\n                    }) //\n                    .doOnCompleted(() -> LOGGER.debug(\"Completed command '{}' (emits '{}') with '{}' records.\",\n                            command.getClass().getName(), clazz.getName(), count.get())) //\n                    .toBlocking() //\n                    .forEach(s -> {\n                        while (s.hasNext()) {\n                            sink.next(s.next());\n                            count.incrementAndGet();\n                        }\n                        sink.complete();\n                    });\n        }, FluxSink.OverflowStrategy.BUFFER);\n    }", "signature": "Publisher<T> toPublisher(final Class<T> clazz, final ObjectMapper mapper,\n            final HystrixCommand<InputStream> command)", "full_signature": "public static Publisher<T> toPublisher(final Class<T> clazz, final ObjectMapper mapper,\n            final HystrixCommand<InputStream> command)", "class_method_signature": "CommandHelper.toPublisher(final Class<T> clazz, final ObjectMapper mapper,\n            final HystrixCommand<InputStream> command)", "testcase": false, "constructor": false, "invocations": ["create", "toObservable", "forEach", "toBlocking", "doOnCompleted", "map", "readValues", "readerFor", "debug", "getName", "getClass", "getName", "get", "hasNext", "next", "next", "incrementAndGet", "complete"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}