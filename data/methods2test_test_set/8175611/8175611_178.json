{"test_class": {"identifier": "DataProviderFilterTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private DataProviderFilter underTest;", "modifier": "@InjectMocks\n    private", "type": "DataProviderFilter", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private Filter filter;", "modifier": "@Mock\n    private", "type": "Filter", "declarator": "filter", "var_name": "filter"}], "file": "junit4/src/test/java/com/tngtech/java/junit/dataprovider/DataProviderFilterTest.java"}, "test_case": {"identifier": "testDescribeShouldReturnFilterDescripe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDescribeShouldReturnFilterDescripe() {\n        // Given:\n        when(filter.describe()).thenReturn(\"Method testMain[1: ](com.tngtech.Clazz)\");\n\n        // When:\n        String result = underTest.describe();\n\n        // Then:\n        assertThat(result).isEqualTo(\"Method testMain[1: ](com.tngtech.Clazz)\");\n    }", "signature": "void testDescribeShouldReturnFilterDescripe()", "full_signature": "@Test public void testDescribeShouldReturnFilterDescripe()", "class_method_signature": "DataProviderFilterTest.testDescribeShouldReturnFilterDescripe()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "describe", "describe", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "DataProviderFilter", "superclass": "extends Filter", "interfaces": "", "fields": [{"original_string": "static final Pattern DESCRIPTION_PATTERN = Pattern.compile(\"([^\\\\[\\\\] ]+)\" + \"(\\\\[(\\\\d+):.*\\\\])?\" + \"\\\\((.+)\\\\)$\", Pattern.DOTALL);", "modifier": "static final", "type": "Pattern", "declarator": "DESCRIPTION_PATTERN = Pattern.compile(\"([^\\\\[\\\\] ]+)\" + \"(\\\\[(\\\\d+):.*\\\\])?\" + \"\\\\((.+)\\\\)$\", Pattern.DOTALL)", "var_name": "DESCRIPTION_PATTERN"}, {"original_string": "static final Pattern GENEROUS_DESCRIPTION_PATTERN = Pattern.compile(\n            \"(\\\\p{javaJavaIdentifierStart}\\\\p{javaJavaIdentifierPart}+)\" + \"((.*))\"\n                    + \"\\\\(\"\n                        + \"((\\\\p{javaJavaIdentifierStart}\\\\p{javaJavaIdentifierPart}*\\\\.)*\"\n                            + \"\\\\p{javaJavaIdentifierStart}\\\\p{javaJavaIdentifierPart}*)\"\n                    + \"\\\\)$\", Pattern.DOTALL);", "modifier": "static final", "type": "Pattern", "declarator": "GENEROUS_DESCRIPTION_PATTERN = Pattern.compile(\n            \"(\\\\p{javaJavaIdentifierStart}\\\\p{javaJavaIdentifierPart}+)\" + \"((.*))\"\n                    + \"\\\\(\"\n                        + \"((\\\\p{javaJavaIdentifierStart}\\\\p{javaJavaIdentifierPart}*\\\\.)*\"\n                            + \"\\\\p{javaJavaIdentifierStart}\\\\p{javaJavaIdentifierPart}*)\"\n                    + \"\\\\)$\", Pattern.DOTALL)", "var_name": "GENEROUS_DESCRIPTION_PATTERN"}, {"original_string": "private static final int GROUP_METHOD_NAME = 1;", "modifier": "private static final", "type": "int", "declarator": "GROUP_METHOD_NAME = 1", "var_name": "GROUP_METHOD_NAME"}, {"original_string": "private static final int GROUP_METHOD_PARAMS = 2;", "modifier": "private static final", "type": "int", "declarator": "GROUP_METHOD_PARAMS = 2", "var_name": "GROUP_METHOD_PARAMS"}, {"original_string": "private static final int GROUP_METHOD_IDX = 3;", "modifier": "private static final", "type": "int", "declarator": "GROUP_METHOD_IDX = 3", "var_name": "GROUP_METHOD_IDX"}, {"original_string": "private static final int GROUP_CLASS = 4;", "modifier": "private static final", "type": "int", "declarator": "GROUP_CLASS = 4", "var_name": "GROUP_CLASS"}, {"original_string": "final Filter filter;", "modifier": "final", "type": "Filter", "declarator": "filter", "var_name": "filter"}], "methods": [{"identifier": "DataProviderFilter", "parameters": "(Filter filter)", "modifiers": "public", "return": "", "signature": " DataProviderFilter(Filter filter)", "full_signature": "public  DataProviderFilter(Filter filter)", "class_method_signature": "DataProviderFilter.DataProviderFilter(Filter filter)", "testcase": false, "constructor": true}, {"identifier": "shouldRun", "parameters": "(Description description)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean shouldRun(Description description)", "full_signature": "@Override public boolean shouldRun(Description description)", "class_method_signature": "DataProviderFilter.shouldRun(Description description)", "testcase": false, "constructor": false}, {"identifier": "describe", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String describe()", "full_signature": "@Override public String describe()", "class_method_signature": "DataProviderFilter.describe()", "testcase": false, "constructor": false}, {"identifier": "shouldRunTest", "parameters": "(Description description, Matcher filterDescriptionMatcher, String methodName, String className)", "modifiers": "private", "return": "boolean", "signature": "boolean shouldRunTest(Description description, Matcher filterDescriptionMatcher, String methodName, String className)", "full_signature": "private boolean shouldRunTest(Description description, Matcher filterDescriptionMatcher, String methodName, String className)", "class_method_signature": "DataProviderFilter.shouldRunTest(Description description, Matcher filterDescriptionMatcher, String methodName, String className)", "testcase": false, "constructor": false}], "file": "junit4/src/main/java/com/tngtech/java/junit/dataprovider/DataProviderFilter.java"}, "focal_method": {"identifier": "describe", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String describe() {\n        return filter.describe();\n    }", "signature": "String describe()", "full_signature": "@Override public String describe()", "class_method_signature": "DataProviderFilter.describe()", "testcase": false, "constructor": false, "invocations": ["describe"]}, "repository": {"repo_id": 8175611, "url": "https://github.com/TNG/junit-dataprovider", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 215, "size": 1383, "license": "licensed"}}