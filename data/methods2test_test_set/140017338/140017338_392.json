{"test_class": {"identifier": "CsvAnalyzerTest", "superclass": "extends AntennaTestWithMockedContext", "interfaces": "", "fields": [{"original_string": "private IProject project;", "modifier": "private", "type": "IProject", "declarator": "project", "var_name": "project"}, {"original_string": "private CsvAnalyzer analyzer;", "modifier": "private", "type": "CsvAnalyzer", "declarator": "analyzer", "var_name": "analyzer"}, {"original_string": "private License license1, license2;", "modifier": "private", "type": "License", "declarator": "license1", "var_name": "license1"}], "file": "core/core-workflow-steps/src/test/java/org/eclipse/sw360/antenna/workflow/analyzers/CsvAnalyzerTest.java"}, "test_case": {"identifier": "testCsvAnalyzerWithSemicolonseparator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCsvAnalyzerWithSemicolonseparator() throws URISyntaxException {\n        configureAnalyzer(\"dependenciesWithExcelFormat.csv\", \";\");\n        Set<Artifact> artifacts = analyzer.yield().getArtifacts();\n\n        assertThat(artifacts).hasSize(2);\n\n        Artifact foundArtifact = artifacts.stream()\n                .filter(artifact -> \"commons-csv\".equals(artifact.getCoordinateForType(PackageURL.StandardTypes.MAVEN)\n                        .map(Coordinate::getName)\n                        .orElse(\"\")))\n                .findFirst()\n                .get();\n\n        commonsCsvFullDependencyCheck(foundArtifact);\n\n        assertThat(foundArtifact.askFor(CopyrightStatement.class).get())\n                .isEqualTo(new CopyrightStatement(\"Copyright 2005-2016 The Apache Software Foundation\")\n                        .mergeWith(new CopyrightStatement(\"Copyright, 2020 the fake\"))\n                        .mergeWith(new CopyrightStatement(\"Copyright fake; the third\")));\n\n        List<String> hashes = foundArtifact.askFor(ArtifactFilename.class).get().\n                getArtifactFilenameEntries().stream()\n                .map(ArtifactFilename.ArtifactFilenameEntry::getHash)\n                .collect(Collectors.toList());\n        assertThat(hashes).hasSize(2);\n\n        Artifact cliArtifact = artifacts.stream()\n                .filter(artifact -> \"commons-cli\".equals(artifact.getCoordinateForType(PackageURL.StandardTypes.MAVEN)\n                                .map(Coordinate::getName)\n                                .orElse(\"\")))\n                .findFirst()\n                .get();\n\n        assertThat(cliArtifact.askFor(CopyrightStatement.class).get()).isEqualTo(\n                new CopyrightStatement(\"Copyright 2005-2016 The Apache Software Foundation\")\n                        .mergeWith(new CopyrightStatement(\"copy & paste\"))\n                        .mergeWith(new CopyrightStatement(\"this is $ it\"))\n                        .mergeWith(new CopyrightStatement(\"!nevermind\"))\n                        .mergeWith(new CopyrightStatement(\"\u00a7copsright\"))\n                        .mergeWith(new CopyrightStatement(\"%gsp\"))\n                        .mergeWith(new CopyrightStatement(\"?\"))\n                        .mergeWith(new CopyrightStatement(\"`wer`\"))\n                        .mergeWith(new CopyrightStatement(\"#wtewp\"))\n                        .mergeWith(new CopyrightStatement(\"~fjd\"))\n        );\n    }", "signature": "void testCsvAnalyzerWithSemicolonseparator()", "full_signature": "@Test public void testCsvAnalyzerWithSemicolonseparator()", "class_method_signature": "CsvAnalyzerTest.testCsvAnalyzerWithSemicolonseparator()", "testcase": true, "constructor": false, "invocations": ["configureAnalyzer", "getArtifacts", "yield", "hasSize", "assertThat", "get", "findFirst", "filter", "stream", "equals", "orElse", "map", "getCoordinateForType", "commonsCsvFullDependencyCheck", "isEqualTo", "assertThat", "get", "askFor", "mergeWith", "mergeWith", "collect", "map", "stream", "getArtifactFilenameEntries", "get", "askFor", "toList", "hasSize", "assertThat", "get", "findFirst", "filter", "stream", "equals", "orElse", "map", "getCoordinateForType", "isEqualTo", "assertThat", "get", "askFor", "mergeWith", "mergeWith", "mergeWith", "mergeWith", "mergeWith", "mergeWith", "mergeWith", "mergeWith", "mergeWith"]}, "focal_class": {"identifier": "CsvAnalyzer", "superclass": "extends ManualAnalyzer", "interfaces": "", "fields": [{"original_string": "private static final String DELIMITER = \"delimiter\";", "modifier": "private static final", "type": "String", "declarator": "DELIMITER = \"delimiter\"", "var_name": "DELIMITER"}, {"original_string": "private Character rowDelimiter = ',';", "modifier": "private", "type": "Character", "declarator": "rowDelimiter = ','", "var_name": "rowDelimiter"}], "methods": [{"identifier": "CsvAnalyzer", "parameters": "()", "modifiers": "public", "return": "", "signature": " CsvAnalyzer()", "full_signature": "public  CsvAnalyzer()", "class_method_signature": "CsvAnalyzer.CsvAnalyzer()", "testcase": false, "constructor": true}, {"identifier": "yield", "parameters": "()", "modifiers": "@Override public", "return": "WorkflowStepResult", "signature": "WorkflowStepResult yield()", "full_signature": "@Override public WorkflowStepResult yield()", "class_method_signature": "CsvAnalyzer.yield()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Map<String, String> configMap)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Map<String, String> configMap)", "full_signature": "@Override public void configure(Map<String, String> configMap)", "class_method_signature": "CsvAnalyzer.configure(Map<String, String> configMap)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "CsvAnalyzer.getName()", "testcase": false, "constructor": false}], "file": "core/core-workflow-steps/src/main/java/org/eclipse/sw360/antenna/workflow/analyzers/CsvAnalyzer.java"}, "focal_method": {"identifier": "yield", "parameters": "()", "modifiers": "@Override public", "return": "WorkflowStepResult", "body": "@Override\n    public WorkflowStepResult yield() {\n        Collection<Artifact> artifacts = new CSVArtifactMapper(\n                componentInfoFile.toPath(),\n                context.getToolConfiguration().getEncoding(),\n                rowDelimiter,\n                baseDir).createArtifactsList();\n\n        return new WorkflowStepResult(artifacts, true);\n    }", "signature": "WorkflowStepResult yield()", "full_signature": "@Override public WorkflowStepResult yield()", "class_method_signature": "CsvAnalyzer.yield()", "testcase": false, "constructor": false, "invocations": ["createArtifactsList", "toPath", "getEncoding", "getToolConfiguration"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}