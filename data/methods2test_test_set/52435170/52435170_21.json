{"test_class": {"identifier": "InsertOperationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String COLLECTION_NAME_1 = \"some_collection_1\";", "modifier": "private static final", "type": "String", "declarator": "COLLECTION_NAME_1 = \"some_collection_1\"", "var_name": "COLLECTION_NAME_1"}, {"original_string": "private static final String COLLECTION_NAME_2 = \"some_collection_2\";", "modifier": "private static final", "type": "String", "declarator": "COLLECTION_NAME_2 = \"some_collection_2\"", "var_name": "COLLECTION_NAME_2"}, {"original_string": "private static final Document DOCUMENT_1 = new Document().append(\"a\", \"A\").append(\"b\", \"B\");", "modifier": "private static final", "type": "Document", "declarator": "DOCUMENT_1 = new Document().append(\"a\", \"A\").append(\"b\", \"B\")", "var_name": "DOCUMENT_1"}, {"original_string": "private static final Document DOCUMENT_2 = new Document().append(\"c\", \"C\").append(\"d\", \"D\");", "modifier": "private static final", "type": "Document", "declarator": "DOCUMENT_2 = new Document().append(\"c\", \"C\").append(\"d\", \"D\")", "var_name": "DOCUMENT_2"}, {"original_string": "@Mock\n    private MongoDatabase connection;", "modifier": "@Mock\n    private", "type": "MongoDatabase", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Mock\n    private MongoCollection<Document> collection;", "modifier": "@Mock\n    private", "type": "MongoCollection<Document>", "declarator": "collection", "var_name": "collection"}, {"original_string": "@Captor\n    private ArgumentCaptor<String> collectionNameCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<String>", "declarator": "collectionNameCaptor", "var_name": "collectionNameCaptor"}, {"original_string": "@Captor\n    private ArgumentCaptor<List<Document>> documentCaptor;", "modifier": "@Captor\n    private", "type": "ArgumentCaptor<List<Document>>", "declarator": "documentCaptor", "var_name": "documentCaptor"}, {"original_string": "private InsertOperation operation = new InsertOperation();", "modifier": "private", "type": "InsertOperation", "declarator": "operation = new InsertOperation()", "var_name": "operation"}], "file": "mongodb/src/test/java/eu/drus/jpa/unit/mongodb/operation/InsertOperationTest.java"}, "test_case": {"identifier": "testInsertStructuredDataWithoutIndexDefinitions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInsertStructuredDataWithoutIndexDefinitions() {\n        // GIVEN\n        final List<Document> values1 = Arrays.asList(DOCUMENT_1);\n        final Document doc1 = new Document().append(\"data\", values1);\n        final List<Document> values2 = Arrays.asList(DOCUMENT_2);\n        final Document doc2 = new Document().append(\"data\", values2);\n        final Document data = new Document().append(COLLECTION_NAME_1, doc1).append(COLLECTION_NAME_2, doc2);\n\n        // WHEN\n        operation.execute(connection, data);\n\n        // THEN\n        verify(connection, times(2)).getCollection(collectionNameCaptor.capture());\n\n        final List<String> capturedCollectionNames = collectionNameCaptor.getAllValues();\n        assertThat(capturedCollectionNames.size(), equalTo(2));\n        assertThat(capturedCollectionNames, hasItems(COLLECTION_NAME_1, COLLECTION_NAME_2));\n\n        verify(collection, times(2)).insertMany(documentCaptor.capture());\n\n        final List<List<Document>> capturedDocuments = documentCaptor.getAllValues();\n        assertThat(capturedDocuments.size(), equalTo(2));\n        assertThat(capturedDocuments, hasItems(values1, values2));\n    }", "signature": "void testInsertStructuredDataWithoutIndexDefinitions()", "full_signature": "@Test public void testInsertStructuredDataWithoutIndexDefinitions()", "class_method_signature": "InsertOperationTest.testInsertStructuredDataWithoutIndexDefinitions()", "testcase": true, "constructor": false, "invocations": ["asList", "append", "asList", "append", "append", "append", "execute", "getCollection", "verify", "times", "capture", "getAllValues", "assertThat", "size", "equalTo", "assertThat", "hasItems", "insertMany", "verify", "times", "capture", "getAllValues", "assertThat", "size", "equalTo", "assertThat", "hasItems"]}, "focal_class": {"identifier": "InsertOperation", "superclass": "", "interfaces": "implements MongoDbOperation", "fields": [], "methods": [{"identifier": "execute", "parameters": "(final MongoDatabase connection, final Document data)", "modifiers": "@Override public", "return": "void", "signature": "void execute(final MongoDatabase connection, final Document data)", "full_signature": "@Override public void execute(final MongoDatabase connection, final Document data)", "class_method_signature": "InsertOperation.execute(final MongoDatabase connection, final Document data)", "testcase": false, "constructor": false}, {"identifier": "getCollectionData", "parameters": "(final Object obj)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "List<Document>", "signature": "List<Document> getCollectionData(final Object obj)", "full_signature": "@SuppressWarnings(\"unchecked\") private List<Document> getCollectionData(final Object obj)", "class_method_signature": "InsertOperation.getCollectionData(final Object obj)", "testcase": false, "constructor": false}, {"identifier": "insertData", "parameters": "(final MongoCollection<Document> collection, final List<Document> entries)", "modifiers": "private", "return": "void", "signature": "void insertData(final MongoCollection<Document> collection, final List<Document> entries)", "full_signature": "private void insertData(final MongoCollection<Document> collection, final List<Document> entries)", "class_method_signature": "InsertOperation.insertData(final MongoCollection<Document> collection, final List<Document> entries)", "testcase": false, "constructor": false}, {"identifier": "getIndexData", "parameters": "(final Object obj)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "List<Document>", "signature": "List<Document> getIndexData(final Object obj)", "full_signature": "@SuppressWarnings(\"unchecked\") private List<Document> getIndexData(final Object obj)", "class_method_signature": "InsertOperation.getIndexData(final Object obj)", "testcase": false, "constructor": false}, {"identifier": "insertIndexes", "parameters": "(final MongoCollection<Document> collection, final List<Document> indexes)", "modifiers": "private", "return": "void", "signature": "void insertIndexes(final MongoCollection<Document> collection, final List<Document> indexes)", "full_signature": "private void insertIndexes(final MongoCollection<Document> collection, final List<Document> indexes)", "class_method_signature": "InsertOperation.insertIndexes(final MongoCollection<Document> collection, final List<Document> indexes)", "testcase": false, "constructor": false}], "file": "mongodb/src/main/java/eu/drus/jpa/unit/mongodb/operation/InsertOperation.java"}, "focal_method": {"identifier": "execute", "parameters": "(final MongoDatabase connection, final Document data)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute(final MongoDatabase connection, final Document data) {\n        for (final Entry<String, Object> entry : data.entrySet()) {\n            final String collectionName = entry.getKey();\n            final Object content = entry.getValue();\n\n            final List<Document> indexes = getIndexData(content);\n            if (!indexes.isEmpty()) {\n                insertIndexes(connection.getCollection(collectionName), indexes);\n            }\n\n            final List<Document> entries = getCollectionData(content);\n            if (!entries.isEmpty()) {\n                insertData(connection.getCollection(collectionName), entries);\n            }\n        }\n    }", "signature": "void execute(final MongoDatabase connection, final Document data)", "full_signature": "@Override public void execute(final MongoDatabase connection, final Document data)", "class_method_signature": "InsertOperation.execute(final MongoDatabase connection, final Document data)", "testcase": false, "constructor": false, "invocations": ["entrySet", "getKey", "getValue", "getIndexData", "isEmpty", "insertIndexes", "getCollection", "getCollectionData", "isEmpty", "insertData", "getCollection"]}, "repository": {"repo_id": 52435170, "url": "https://github.com/dadrus/jpa-unit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 24, "size": 1190, "license": "licensed"}}