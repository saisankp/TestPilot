{"test_class": {"identifier": "FileSystemUtilsTest", "superclass": "extends HelperedFileSystemTestBase", "interfaces": "", "fields": [{"original_string": "protected FS fileSystem;", "modifier": "protected", "type": "FS", "declarator": "fileSystem", "var_name": "fileSystem"}], "file": "core/src/test/java/nl/nn/adapterframework/filesystem/FileSystemUtilsTest.java"}, "test_case": {"identifier": "testCopyWithBackup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCopyWithBackup() throws Exception {\n\t\tString filename = \"backupTest\" + FILE1;\n\t\tString contents = \"text content:\";\n\t\tString srcFolder = \"srcFolder\";\n\t\tString dstFolder = \"dstFolder\";\n\t\tint numOfBackups=3;\n\t\tint numOfFilesPresentAtStart=5;\n\t\t\n\t\tif (_fileExists(filename)) {\n\t\t\t_deleteFile(dstFolder, filename);\n\t\t}\n\n\t\tif (dstFolder!=null) {\n\t\t\tif  (_folderExists(dstFolder)) {\n\t\t\t\t_createFolder(dstFolder);\n\t\t\t}\n\t\t}\n\t\tfor (int i=1;i<=numOfFilesPresentAtStart;i++) {\n\t\t\tcreateFile(dstFolder, filename+\".\"+i,contents+i);\n\t\t}\n\t\tcreateFile(dstFolder, filename,contents+\"0\");\n\t\tcreateFile(srcFolder, filename,contents+\"new\");\n\t\t\n\t\tF file = fileSystem.toFile(srcFolder, filename);\n\t\t\n\t\tassertFileExistsWithContents(dstFolder, filename, contents.trim()+\"0\");\n\t\tassertFileExistsWithContents(dstFolder, filename+\".\"+numOfFilesPresentAtStart, contents.trim()+(numOfFilesPresentAtStart));\n\t\t\n\t\t// execute move\n\t\tFileSystemUtils.copyFile(fileSystem, file, dstFolder, false, numOfBackups, false);\n\t\t\n\t\t// assert that the file has been backed up, and backups have been rotated\n\t\tassertFileExistsWithContents(srcFolder, filename, contents.trim()+\"new\");\n\t\tassertFileExistsWithContents(dstFolder, filename, contents.trim()+\"new\");\n\t\tfor (int i=1;i<=numOfBackups;i++) {\n\t\t\tassertFileExistsWithContents(dstFolder, filename+\".\"+i, contents.trim()+(i-1));\n\t\t}\n\t\tassertFileDoesNotExist(dstFolder, filename+(numOfBackups+1));\n\t\tassertFileDoesNotExist(dstFolder, filename+(numOfBackups+2));\n\t}", "signature": "void testCopyWithBackup()", "full_signature": "@Test public void testCopyWithBackup()", "class_method_signature": "FileSystemUtilsTest.testCopyWithBackup()", "testcase": true, "constructor": false, "invocations": ["_fileExists", "_deleteFile", "_folderExists", "_createFolder", "createFile", "createFile", "createFile", "toFile", "assertFileExistsWithContents", "trim", "assertFileExistsWithContents", "trim", "copyFile", "assertFileExistsWithContents", "trim", "assertFileExistsWithContents", "trim", "assertFileExistsWithContents", "trim", "assertFileDoesNotExist", "assertFileDoesNotExist"]}, "focal_class": {"identifier": "FileSystemUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static Logger log = LogUtil.getLogger(FileSystemUtils.class);", "modifier": "protected static", "type": "Logger", "declarator": "log = LogUtil.getLogger(FileSystemUtils.class)", "var_name": "log"}], "methods": [{"identifier": "prepareDestination", "parameters": "(IBasicFileSystem<F> fileSystem, F file, String destinationFolder, boolean overwrite, int numOfBackups, boolean createFolders)", "modifiers": "public static", "return": "void", "signature": "void prepareDestination(IBasicFileSystem<F> fileSystem, F file, String destinationFolder, boolean overwrite, int numOfBackups, boolean createFolders)", "full_signature": "public static void prepareDestination(IBasicFileSystem<F> fileSystem, F file, String destinationFolder, boolean overwrite, int numOfBackups, boolean createFolders)", "class_method_signature": "FileSystemUtils.prepareDestination(IBasicFileSystem<F> fileSystem, F file, String destinationFolder, boolean overwrite, int numOfBackups, boolean createFolders)", "testcase": false, "constructor": false}, {"identifier": "moveFile", "parameters": "(IBasicFileSystem<F> fileSystem, F file, String destinationFolder, boolean overwrite, int numOfBackups, boolean createFolders)", "modifiers": "public static", "return": "F", "signature": "F moveFile(IBasicFileSystem<F> fileSystem, F file, String destinationFolder, boolean overwrite, int numOfBackups, boolean createFolders)", "full_signature": "public static F moveFile(IBasicFileSystem<F> fileSystem, F file, String destinationFolder, boolean overwrite, int numOfBackups, boolean createFolders)", "class_method_signature": "FileSystemUtils.moveFile(IBasicFileSystem<F> fileSystem, F file, String destinationFolder, boolean overwrite, int numOfBackups, boolean createFolders)", "testcase": false, "constructor": false}, {"identifier": "copyFile", "parameters": "(IBasicFileSystem<F> fileSystem, F file, String destinationFolder, boolean overwrite, int numOfBackups, boolean createFolders)", "modifiers": "public static", "return": "F", "signature": "F copyFile(IBasicFileSystem<F> fileSystem, F file, String destinationFolder, boolean overwrite, int numOfBackups, boolean createFolders)", "full_signature": "public static F copyFile(IBasicFileSystem<F> fileSystem, F file, String destinationFolder, boolean overwrite, int numOfBackups, boolean createFolders)", "class_method_signature": "FileSystemUtils.copyFile(IBasicFileSystem<F> fileSystem, F file, String destinationFolder, boolean overwrite, int numOfBackups, boolean createFolders)", "testcase": false, "constructor": false}, {"identifier": "rolloverByNumber", "parameters": "(IWritableFileSystem<F> fileSystem, F file, int numberOfBackups)", "modifiers": "public static", "return": "void", "signature": "void rolloverByNumber(IWritableFileSystem<F> fileSystem, F file, int numberOfBackups)", "full_signature": "public static void rolloverByNumber(IWritableFileSystem<F> fileSystem, F file, int numberOfBackups)", "class_method_signature": "FileSystemUtils.rolloverByNumber(IWritableFileSystem<F> fileSystem, F file, int numberOfBackups)", "testcase": false, "constructor": false}, {"identifier": "rolloverByNumber", "parameters": "(IWritableFileSystem<F> fileSystem, String folder, String filename, int numberOfBackups)", "modifiers": "public static", "return": "void", "signature": "void rolloverByNumber(IWritableFileSystem<F> fileSystem, String folder, String filename, int numberOfBackups)", "full_signature": "public static void rolloverByNumber(IWritableFileSystem<F> fileSystem, String folder, String filename, int numberOfBackups)", "class_method_signature": "FileSystemUtils.rolloverByNumber(IWritableFileSystem<F> fileSystem, String folder, String filename, int numberOfBackups)", "testcase": false, "constructor": false}, {"identifier": "rolloverBySize", "parameters": "(IWritableFileSystem<F> fileSystem, F file, int rotateSize, int numberOfBackups)", "modifiers": "public static", "return": "void", "signature": "void rolloverBySize(IWritableFileSystem<F> fileSystem, F file, int rotateSize, int numberOfBackups)", "full_signature": "public static void rolloverBySize(IWritableFileSystem<F> fileSystem, F file, int rotateSize, int numberOfBackups)", "class_method_signature": "FileSystemUtils.rolloverBySize(IWritableFileSystem<F> fileSystem, F file, int rotateSize, int numberOfBackups)", "testcase": false, "constructor": false}, {"identifier": "rolloverBySize", "parameters": "(IWritableFileSystem<F> fileSystem, F file, String folder, int rotateSize, int numberOfBackups)", "modifiers": "public static", "return": "void", "signature": "void rolloverBySize(IWritableFileSystem<F> fileSystem, F file, String folder, int rotateSize, int numberOfBackups)", "full_signature": "public static void rolloverBySize(IWritableFileSystem<F> fileSystem, F file, String folder, int rotateSize, int numberOfBackups)", "class_method_signature": "FileSystemUtils.rolloverBySize(IWritableFileSystem<F> fileSystem, F file, String folder, int rotateSize, int numberOfBackups)", "testcase": false, "constructor": false}, {"identifier": "rolloverByDay", "parameters": "(IWritableFileSystem<F> fileSystem, F file, String folder, int rotateDays)", "modifiers": "public static", "return": "void", "signature": "void rolloverByDay(IWritableFileSystem<F> fileSystem, F file, String folder, int rotateDays)", "full_signature": "public static void rolloverByDay(IWritableFileSystem<F> fileSystem, F file, String folder, int rotateDays)", "class_method_signature": "FileSystemUtils.rolloverByDay(IWritableFileSystem<F> fileSystem, F file, String folder, int rotateDays)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/filesystem/FileSystemUtils.java"}, "focal_method": {"identifier": "copyFile", "parameters": "(IBasicFileSystem<F> fileSystem, F file, String destinationFolder, boolean overwrite, int numOfBackups, boolean createFolders)", "modifiers": "public static", "return": "F", "body": "public static <F> F copyFile(IBasicFileSystem<F> fileSystem, F file, String destinationFolder, boolean overwrite, int numOfBackups, boolean createFolders) throws FileSystemException {\n\t\tprepareDestination(fileSystem, file, destinationFolder, overwrite, numOfBackups, createFolders);\n\t\tF newFile = fileSystem.copyFile(file, destinationFolder, createFolders);\n\t\tif (newFile == null) {\n\t\t\tthrow new FileSystemException(\"cannot copy file [\" + fileSystem.getName(file) + \"] to [\" + destinationFolder + \"]\");\n\t\t}\n\t\treturn newFile;\n\t}", "signature": "F copyFile(IBasicFileSystem<F> fileSystem, F file, String destinationFolder, boolean overwrite, int numOfBackups, boolean createFolders)", "full_signature": "public static F copyFile(IBasicFileSystem<F> fileSystem, F file, String destinationFolder, boolean overwrite, int numOfBackups, boolean createFolders)", "class_method_signature": "FileSystemUtils.copyFile(IBasicFileSystem<F> fileSystem, F file, String destinationFolder, boolean overwrite, int numOfBackups, boolean createFolders)", "testcase": false, "constructor": false, "invocations": ["prepareDestination", "copyFile", "getName"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}