{"test_class": {"identifier": "PropertyLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String configFile = \"src/test/resources/conf.properties\";", "modifier": "private final", "type": "String", "declarator": "configFile = \"src/test/resources/conf.properties\"", "var_name": "configFile"}, {"original_string": "@Mock\n    private Properties properties;", "modifier": "@Mock\n    private", "type": "Properties", "declarator": "properties", "var_name": "properties"}, {"original_string": "@Mock\n    private Properties validationProperties;", "modifier": "@Mock\n    private", "type": "Properties", "declarator": "validationProperties", "var_name": "validationProperties"}, {"original_string": "@Mock\n    private FileInputStream inputStream;", "modifier": "@Mock\n    private", "type": "FileInputStream", "declarator": "inputStream", "var_name": "inputStream"}, {"original_string": "@Mock\n    private FileInputStreamFactory inputStreamFactory;", "modifier": "@Mock\n    private", "type": "FileInputStreamFactory", "declarator": "inputStreamFactory", "var_name": "inputStreamFactory"}, {"original_string": "@Mock\n    private PropertiesFactory propertiesFactory;", "modifier": "@Mock\n    private", "type": "PropertiesFactory", "declarator": "propertiesFactory", "var_name": "propertiesFactory"}, {"original_string": "@Mock\n    private PropertyReader propertyReader;", "modifier": "@Mock\n    private", "type": "PropertyReader", "declarator": "propertyReader", "var_name": "propertyReader"}, {"original_string": "@InjectMocks\n    private PropertyLoader underTest;", "modifier": "@InjectMocks\n    private", "type": "PropertyLoader", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-message-search/modules/wilma-message-search-engine/src/test/java/com/epam/wilma/message/search/engine/properties/PropertyLoaderTest.java"}, "test_case": {"identifier": "testLoadPropertiesWhenProgramArgumentEmptyShouldThrowException", "parameters": "()", "modifiers": "@Test(expectedExceptions = PropertiesNotAvailableException.class) public", "return": "void", "body": "@Test(expectedExceptions = PropertiesNotAvailableException.class)\n    public void testLoadPropertiesWhenProgramArgumentEmptyShouldThrowException() {\n        //GIVEN\n        Whitebox.setInternalState(underTest, \"configFile\", \"\");\n        //WHEN\n        underTest.loadProperties();\n        //THEN excpetion should be thrown\n    }", "signature": "void testLoadPropertiesWhenProgramArgumentEmptyShouldThrowException()", "full_signature": "@Test(expectedExceptions = PropertiesNotAvailableException.class) public void testLoadPropertiesWhenProgramArgumentEmptyShouldThrowException()", "class_method_signature": "PropertyLoaderTest.testLoadPropertiesWhenProgramArgumentEmptyShouldThrowException()", "testcase": true, "constructor": false, "invocations": ["setInternalState", "loadProperties"]}, "focal_class": {"identifier": "PropertyLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(PropertyLoader.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PropertyLoader.class)", "var_name": "logger"}, {"original_string": "@Value(\"#{programArgs}\")\n    private String configFile;", "modifier": "@Value(\"#{programArgs}\")\n    private", "type": "String", "declarator": "configFile", "var_name": "configFile"}, {"original_string": "private Properties properties;", "modifier": "private", "type": "Properties", "declarator": "properties", "var_name": "properties"}, {"original_string": "private FileInputStream inputStream;", "modifier": "private", "type": "FileInputStream", "declarator": "inputStream", "var_name": "inputStream"}, {"original_string": "@Autowired\n    private FileInputStreamFactory inputStreamFactory;", "modifier": "@Autowired\n    private", "type": "FileInputStreamFactory", "declarator": "inputStreamFactory", "var_name": "inputStreamFactory"}, {"original_string": "@Autowired\n    private PropertiesFactory propertiesFactory;", "modifier": "@Autowired\n    private", "type": "PropertiesFactory", "declarator": "propertiesFactory", "var_name": "propertiesFactory"}, {"original_string": "@Autowired\n    private PropertyReader propertyReader;", "modifier": "@Autowired\n    private", "type": "PropertyReader", "declarator": "propertyReader", "var_name": "propertyReader"}], "methods": [{"identifier": "loadProperties", "parameters": "(final String configFile)", "modifiers": "public", "return": "Properties", "signature": "Properties loadProperties(final String configFile)", "full_signature": "public Properties loadProperties(final String configFile)", "class_method_signature": "PropertyLoader.loadProperties(final String configFile)", "testcase": false, "constructor": false}, {"identifier": "loadProperties", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void loadProperties()", "full_signature": "public void loadProperties()", "class_method_signature": "PropertyLoader.loadProperties()", "testcase": false, "constructor": false}, {"identifier": "checkPropertyFileArgument", "parameters": "(final String args)", "modifiers": "private", "return": "void", "signature": "void checkPropertyFileArgument(final String args)", "full_signature": "private void checkPropertyFileArgument(final String args)", "class_method_signature": "PropertyLoader.checkPropertyFileArgument(final String args)", "testcase": false, "constructor": false}, {"identifier": "loadExternalProperties", "parameters": "(final String location, final Properties properties)", "modifiers": "private", "return": "void", "signature": "void loadExternalProperties(final String location, final Properties properties)", "full_signature": "private void loadExternalProperties(final String location, final Properties properties)", "class_method_signature": "PropertyLoader.loadExternalProperties(final String location, final Properties properties)", "testcase": false, "constructor": false}], "file": "wilma-message-search/modules/wilma-message-search-engine/src/main/java/com/epam/wilma/message/search/engine/properties/PropertyLoader.java"}, "focal_method": {"identifier": "loadProperties", "parameters": "(final String configFile)", "modifiers": "public", "return": "Properties", "body": "public Properties loadProperties(final String configFile) {\n        Properties properties = new Properties();\n        try {\n            checkPropertyFileArgument(configFile);\n            InputStream inputStream = new FileInputStream(configFile);\n            properties.load(inputStream);\n            logger.debug(\"Properties loaded from external configuration.\");\n        } catch (IOException e) {\n            throw new PropertiesNotAvailableException(\"Configuration file \" + configFile + \" cannot be loaded\", e);\n        }\n        return properties;\n    }", "signature": "Properties loadProperties(final String configFile)", "full_signature": "public Properties loadProperties(final String configFile)", "class_method_signature": "PropertyLoader.loadProperties(final String configFile)", "testcase": false, "constructor": false, "invocations": ["checkPropertyFileArgument", "load", "debug"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}