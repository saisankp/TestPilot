{"test_class": {"identifier": "StandardGISGridSetTest", "superclass": "extends AbstractGisTest", "interfaces": "", "fields": [{"original_string": "private static final String SHP_RESOURCE = MapPolylineGridSetTest.class.getPackage().getName().replaceAll(\"\\\\.\", \"/\") //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t+ \"/test.shp\";", "modifier": "private static final", "type": "String", "declarator": "SHP_RESOURCE = MapPolylineGridSetTest.class.getPackage().getName().replaceAll(\"\\\\.\", \"/\") //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t+ \"/test.shp\"", "var_name": "SHP_RESOURCE"}, {"original_string": "private static final int MAX_REFERENCE_SIZE = 1000;", "modifier": "private static final", "type": "int", "declarator": "MAX_REFERENCE_SIZE = 1000", "var_name": "MAX_REFERENCE_SIZE"}, {"original_string": "private ArrayList<GISPrimitive> reference = null;", "modifier": "private", "type": "ArrayList<GISPrimitive>", "declarator": "reference = null", "var_name": "reference"}, {"original_string": "private Point2d center = null;", "modifier": "private", "type": "Point2d", "declarator": "center = null", "var_name": "center"}, {"original_string": "private Rectangle2d worldBounds = null;", "modifier": "private", "type": "Rectangle2d", "declarator": "worldBounds = null", "var_name": "worldBounds"}], "file": "advanced/gis/giscore/src/test/java/org/arakhne/afc/gis/grid/StandardGISGridSetTest.java"}, "test_case": {"identifier": "testAddE", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAddE() {\n\t\tStandardGISGridSet<GISPrimitive> test = new StandardGISGridSet<>(100,100,this.worldBounds);\n\t\tassertTrue(test.addAll(this.reference));\n\t\tassertEquals(this.reference.size(), test.size());\n\n\t\tString msg;\n\t\tRandom rnd = new Random();\n\t\tint testCount = rnd.nextInt(5)+1;\n\n\t\tfor(int i=0; i<testCount; ++i) {\n\t\t\tmsg = \"test \"+(i+1)+\"/\"+testCount; //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tgetLogger().info(msg+\"...\"); //$NON-NLS-1$\n\n\t\t\t// Add an element\n\t\t\tdouble x = this.worldBounds.getMinX() + rnd.nextDouble() * this.worldBounds.getWidth();\n\t\t\tdouble y = this.worldBounds.getMinY() + rnd.nextDouble() * this.worldBounds.getHeight();\n\t\t\tGISPrimitive newElement = new MapPoint(x,y);\n\t\t\tassertTrue(this.reference.add(newElement));\n\t\t\tassertTrue(test.add(newElement), msg);\n\t\t\tassertEquals(this.reference.size(), test.size(), msg);\n\t\t\tassertTrue(test.slowContains(newElement), msg);\n\t\t\tassertEpsilonEquals(this.reference.toArray(),test.toArray(), msg);\n\t\t\tgetLogger().info(\"done\"); //$NON-NLS-1$\n\t\t}\n\t}", "signature": "void testAddE()", "full_signature": "@Test public void testAddE()", "class_method_signature": "StandardGISGridSetTest.testAddE()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "addAll", "assertEquals", "size", "size", "nextInt", "info", "getLogger", "getMinX", "nextDouble", "getWidth", "getMinY", "nextDouble", "getHeight", "assertTrue", "add", "assertTrue", "add", "assertEquals", "size", "size", "assertTrue", "slowContains", "assertEpsilonEquals", "toArray", "toArray", "info", "getLogger"]}, "focal_class": {"identifier": "StandardGISGridSet", "superclass": "extends AbstractGISGridSet<P>", "interfaces": "", "fields": [], "methods": [{"identifier": "StandardGISGridSet", "parameters": "(int nRows, int nColumns, Rectangle2d bounds)", "modifiers": "public", "return": "", "signature": " StandardGISGridSet(int nRows, int nColumns, Rectangle2d bounds)", "full_signature": "public  StandardGISGridSet(int nRows, int nColumns, Rectangle2d bounds)", "class_method_signature": "StandardGISGridSet.StandardGISGridSet(int nRows, int nColumns, Rectangle2d bounds)", "testcase": false, "constructor": true}, {"identifier": "StandardGISGridSet", "parameters": "(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "modifiers": "public", "return": "", "signature": " StandardGISGridSet(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "full_signature": "public  StandardGISGridSet(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "class_method_signature": "StandardGISGridSet.StandardGISGridSet(int nRows, int nColumns, double boundsX, double boundsY, double boundsWidth, double boundsHeight)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(P point)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(P point)", "full_signature": "@Override public boolean add(P point)", "class_method_signature": "StandardGISGridSet.add(P point)", "testcase": false, "constructor": false}], "file": "advanced/gis/giscore/src/main/java/org/arakhne/afc/gis/grid/StandardGISGridSet.java"}, "focal_method": {"identifier": "add", "parameters": "(P point)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean add(P point) {\n\t\tif (this.grid.addElement(point)) {\n\t\t\tupdateComponentType(point);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}", "signature": "boolean add(P point)", "full_signature": "@Override public boolean add(P point)", "class_method_signature": "StandardGISGridSet.add(P point)", "testcase": false, "constructor": false, "invocations": ["addElement", "updateComponentType"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}