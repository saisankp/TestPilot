{"test_class": {"identifier": "ThreadImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "ThreadPool threadPoolMock;", "modifier": "", "type": "ThreadPool", "declarator": "threadPoolMock", "var_name": "threadPoolMock"}, {"original_string": "ThreadImpl thread;", "modifier": "", "type": "ThreadImpl", "declarator": "thread", "var_name": "thread"}], "file": "CoreFeatures/Task/ThreadPool/src/test/java/info/smart_tools/smartactors/task/thread_pool/ThreadImplTest.java"}, "test_case": {"identifier": "Should_ignoreExceptionsFromTask", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_ignoreExceptionsFromTask()\n            throws Exception {\n        ITask taskMock1 = mock(ITask.class), taskMock2 = mock(ITask.class);\n\n        doThrow(new TaskExecutionException(\"Whoops!\")).when(taskMock1).execute();\n\n        thread.execute(taskMock1);\n        verify(taskMock1, timeout(100)).execute();\n\n        Thread.sleep(100);\n\n        thread.execute(taskMock2);\n        verify(taskMock2, timeout(100)).execute();\n    }", "signature": "void Should_ignoreExceptionsFromTask()", "full_signature": "@Test public void Should_ignoreExceptionsFromTask()", "class_method_signature": "ThreadImplTest.Should_ignoreExceptionsFromTask()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "execute", "when", "doThrow", "execute", "execute", "verify", "timeout", "sleep", "execute", "execute", "verify", "timeout"]}, "focal_class": {"identifier": "ThreadImpl", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Thread thread;", "modifier": "private final", "type": "Thread", "declarator": "thread", "var_name": "thread"}, {"original_string": "private final ThreadPool pool;", "modifier": "private final", "type": "ThreadPool", "declarator": "pool", "var_name": "pool"}, {"original_string": "private final AtomicReference<ITask> setTaskRef;", "modifier": "private final", "type": "AtomicReference<ITask>", "declarator": "setTaskRef", "var_name": "setTaskRef"}, {"original_string": "private final Object lock;", "modifier": "private final", "type": "Object", "declarator": "lock", "var_name": "lock"}], "methods": [{"identifier": "ThreadImpl", "parameters": "(final ThreadPool pool)", "modifiers": "", "return": "", "signature": " ThreadImpl(final ThreadPool pool)", "full_signature": "  ThreadImpl(final ThreadPool pool)", "class_method_signature": "ThreadImpl.ThreadImpl(final ThreadPool pool)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(final ITask task)", "modifiers": "", "return": "void", "signature": "void execute(final ITask task)", "full_signature": " void execute(final ITask task)", "class_method_signature": "ThreadImpl.execute(final ITask task)", "testcase": false, "constructor": false}, {"identifier": "interrupt", "parameters": "()", "modifiers": "", "return": "void", "signature": "void interrupt()", "full_signature": " void interrupt()", "class_method_signature": "ThreadImpl.interrupt()", "testcase": false, "constructor": false}], "file": "CoreFeatures/Task/ThreadPool/src/main/java/info/smart_tools/smartactors/task/thread_pool/ThreadImpl.java"}, "focal_method": {"identifier": "execute", "parameters": "(final ITask task)", "modifiers": "", "return": "void", "body": "void execute(final ITask task) throws TaskExecutionException {\n        if (!setTaskRef.compareAndSet(null, task)) {\n            throw new TaskExecutionException(\"Another task is being executed.\");\n        }\n\n        if (!thread.isAlive()) {\n            throw new TaskExecutionException(\"Thread is dead.\");\n        }\n\n        synchronized (this.lock) {\n            this.lock.notifyAll();\n        }\n    }", "signature": "void execute(final ITask task)", "full_signature": " void execute(final ITask task)", "class_method_signature": "ThreadImpl.execute(final ITask task)", "testcase": false, "constructor": false, "invocations": ["compareAndSet", "isAlive", "notifyAll"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}