{"test_class": {"identifier": "FileFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "mucommander-commons-file/src/test/java/com/mucommander/commons/file/FileFactoryTest.java"}, "test_case": {"identifier": "testTemporaryFiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTemporaryFiles() throws IOException {\n        String desiredName = System.currentTimeMillis()+\".ext\";\n\n        // Assert that #getTemporaryFile returns a non-existing file with the desired name\n        AbstractFile temporaryFile1 = FileFactory.getTemporaryFile(desiredName, true);\n        assert temporaryFile1 != null;\n        assert !temporaryFile1.exists();\n        assert desiredName.equals(temporaryFile1.getName());\n\n        // Assert that #getTemporaryFile returns a new temporary file if the requested file already exists, and that the\n        // extension matches the desired one.\n        temporaryFile1.mkfile();\n\n        AbstractFile temporaryFile2 = FileFactory.getTemporaryFile(desiredName, true);\n        assert temporaryFile2 != null;\n        assert !temporaryFile2.exists();\n        assert !temporaryFile2.getName().equals(desiredName);\n        assert temporaryFile1.getExtension().equals(temporaryFile2.getExtension());\n\n        // Note: the temporary file should normally be deleted on VM shutdown, but we have no (easy) way to assert that\n\n        // Perform some basic tests on #getTemporaryFile when called without a desired name\n        temporaryFile1 = FileFactory.getTemporaryFile(true);\n        assert temporaryFile1 != null;\n        assert !temporaryFile1.exists();\n    }", "signature": "void testTemporaryFiles()", "full_signature": "@Test public void testTemporaryFiles()", "class_method_signature": "FileFactoryTest.testTemporaryFiles()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "getTemporaryFile", "exists", "equals", "getName", "mkfile", "getTemporaryFile", "exists", "equals", "getName", "equals", "getExtension", "getExtension", "getTemporaryFile", "exists"]}, "focal_class": {"identifier": "FileFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(FileFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(FileFactory.class)", "var_name": "LOGGER"}, {"original_string": "private static Hashtable<String, ProtocolProvider> protocolProviders = new Hashtable<String, ProtocolProvider>();", "modifier": "private static", "type": "Hashtable<String, ProtocolProvider>", "declarator": "protocolProviders = new Hashtable<String, ProtocolProvider>()", "var_name": "protocolProviders"}, {"original_string": "private static ProtocolProvider localFileProvider;", "modifier": "private static", "type": "ProtocolProvider", "declarator": "localFileProvider", "var_name": "localFileProvider"}, {"original_string": "private static Vector<ArchiveFormatProvider> archiveFormatProvidersV = new Vector<ArchiveFormatProvider>();", "modifier": "private static", "type": "Vector<ArchiveFormatProvider>", "declarator": "archiveFormatProvidersV = new Vector<ArchiveFormatProvider>()", "var_name": "archiveFormatProvidersV"}, {"original_string": "private static ArchiveFormatProvider[] archiveFormatProviders = new ArchiveFormatProvider[0];", "modifier": "private static", "type": "ArchiveFormatProvider[]", "declarator": "archiveFormatProviders = new ArchiveFormatProvider[0]", "var_name": "archiveFormatProviders"}, {"original_string": "private static final HashMap<String, FilePool> FILE_POOL_MAP = new HashMap<String, FilePool>();", "modifier": "private static final", "type": "HashMap<String, FilePool>", "declarator": "FILE_POOL_MAP = new HashMap<String, FilePool>()", "var_name": "FILE_POOL_MAP"}, {"original_string": "private static final AbstractFile TEMP_DIRECTORY;", "modifier": "private static final", "type": "AbstractFile", "declarator": "TEMP_DIRECTORY", "var_name": "TEMP_DIRECTORY"}, {"original_string": "private static FileIconProvider defaultFileIconProvider;", "modifier": "private static", "type": "FileIconProvider", "declarator": "defaultFileIconProvider", "var_name": "defaultFileIconProvider"}, {"original_string": "private static Authenticator defaultAuthenticator;", "modifier": "private static", "type": "Authenticator", "declarator": "defaultAuthenticator", "var_name": "defaultAuthenticator"}], "methods": [{"identifier": "FileFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " FileFactory()", "full_signature": "private  FileFactory()", "class_method_signature": "FileFactory.FileFactory()", "testcase": false, "constructor": true}, {"identifier": "registerProtocol", "parameters": "(String protocol, ProtocolProvider provider)", "modifiers": "public static", "return": "ProtocolProvider", "signature": "ProtocolProvider registerProtocol(String protocol, ProtocolProvider provider)", "full_signature": "public static ProtocolProvider registerProtocol(String protocol, ProtocolProvider provider)", "class_method_signature": "FileFactory.registerProtocol(String protocol, ProtocolProvider provider)", "testcase": false, "constructor": false}, {"identifier": "unregisterProtocol", "parameters": "(String protocol)", "modifiers": "public static", "return": "ProtocolProvider", "signature": "ProtocolProvider unregisterProtocol(String protocol)", "full_signature": "public static ProtocolProvider unregisterProtocol(String protocol)", "class_method_signature": "FileFactory.unregisterProtocol(String protocol)", "testcase": false, "constructor": false}, {"identifier": "getProtocolProvider", "parameters": "(String protocol)", "modifiers": "public static", "return": "ProtocolProvider", "signature": "ProtocolProvider getProtocolProvider(String protocol)", "full_signature": "public static ProtocolProvider getProtocolProvider(String protocol)", "class_method_signature": "FileFactory.getProtocolProvider(String protocol)", "testcase": false, "constructor": false}, {"identifier": "isRegisteredProtocol", "parameters": "(String protocol)", "modifiers": "public static", "return": "boolean", "signature": "boolean isRegisteredProtocol(String protocol)", "full_signature": "public static boolean isRegisteredProtocol(String protocol)", "class_method_signature": "FileFactory.isRegisteredProtocol(String protocol)", "testcase": false, "constructor": false}, {"identifier": "protocols", "parameters": "()", "modifiers": "public static", "return": "Iterator<String>", "signature": "Iterator<String> protocols()", "full_signature": "public static Iterator<String> protocols()", "class_method_signature": "FileFactory.protocols()", "testcase": false, "constructor": false}, {"identifier": "registerArchiveFormat", "parameters": "(ArchiveFormatProvider provider)", "modifiers": "public static", "return": "void", "signature": "void registerArchiveFormat(ArchiveFormatProvider provider)", "full_signature": "public static void registerArchiveFormat(ArchiveFormatProvider provider)", "class_method_signature": "FileFactory.registerArchiveFormat(ArchiveFormatProvider provider)", "testcase": false, "constructor": false}, {"identifier": "unregisterArchiveFormat", "parameters": "(ArchiveFormatProvider provider)", "modifiers": "public static", "return": "void", "signature": "void unregisterArchiveFormat(ArchiveFormatProvider provider)", "full_signature": "public static void unregisterArchiveFormat(ArchiveFormatProvider provider)", "class_method_signature": "FileFactory.unregisterArchiveFormat(ArchiveFormatProvider provider)", "testcase": false, "constructor": false}, {"identifier": "updateArchiveFormatProviderArray", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void updateArchiveFormatProviderArray()", "full_signature": "private static void updateArchiveFormatProviderArray()", "class_method_signature": "FileFactory.updateArchiveFormatProviderArray()", "testcase": false, "constructor": false}, {"identifier": "getArchiveFormatProvider", "parameters": "(String filename)", "modifiers": "public static", "return": "ArchiveFormatProvider", "signature": "ArchiveFormatProvider getArchiveFormatProvider(String filename)", "full_signature": "public static ArchiveFormatProvider getArchiveFormatProvider(String filename)", "class_method_signature": "FileFactory.getArchiveFormatProvider(String filename)", "testcase": false, "constructor": false}, {"identifier": "archiveFormats", "parameters": "()", "modifiers": "public static", "return": "List<ArchiveFormatProvider>", "signature": "List<ArchiveFormatProvider> archiveFormats()", "full_signature": "public static List<ArchiveFormatProvider> archiveFormats()", "class_method_signature": "FileFactory.archiveFormats()", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(String absPath)", "modifiers": "public static", "return": "AbstractFile", "signature": "AbstractFile getFile(String absPath)", "full_signature": "public static AbstractFile getFile(String absPath)", "class_method_signature": "FileFactory.getFile(String absPath)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(String absPath, boolean throwException)", "modifiers": "public static", "return": "AbstractFile", "signature": "AbstractFile getFile(String absPath, boolean throwException)", "full_signature": "public static AbstractFile getFile(String absPath, boolean throwException)", "class_method_signature": "FileFactory.getFile(String absPath, boolean throwException)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(String absPath, AbstractFile parent)", "modifiers": "public static", "return": "AbstractFile", "signature": "AbstractFile getFile(String absPath, AbstractFile parent)", "full_signature": "public static AbstractFile getFile(String absPath, AbstractFile parent)", "class_method_signature": "FileFactory.getFile(String absPath, AbstractFile parent)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(FileURL fileURL)", "modifiers": "public static", "return": "AbstractFile", "signature": "AbstractFile getFile(FileURL fileURL)", "full_signature": "public static AbstractFile getFile(FileURL fileURL)", "class_method_signature": "FileFactory.getFile(FileURL fileURL)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(FileURL fileURL, boolean throwException)", "modifiers": "public static", "return": "AbstractFile", "signature": "AbstractFile getFile(FileURL fileURL, boolean throwException)", "full_signature": "public static AbstractFile getFile(FileURL fileURL, boolean throwException)", "class_method_signature": "FileFactory.getFile(FileURL fileURL, boolean throwException)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(FileURL fileURL, AbstractFile parent)", "modifiers": "public static", "return": "AbstractFile", "signature": "AbstractFile getFile(FileURL fileURL, AbstractFile parent)", "full_signature": "public static AbstractFile getFile(FileURL fileURL, AbstractFile parent)", "class_method_signature": "FileFactory.getFile(FileURL fileURL, AbstractFile parent)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(FileURL fileURL, AbstractFile parent, Map<String, Object> instantiationParams)", "modifiers": "public static", "return": "AbstractFile", "signature": "AbstractFile getFile(FileURL fileURL, AbstractFile parent, Map<String, Object> instantiationParams)", "full_signature": "public static AbstractFile getFile(FileURL fileURL, AbstractFile parent, Map<String, Object> instantiationParams)", "class_method_signature": "FileFactory.getFile(FileURL fileURL, AbstractFile parent, Map<String, Object> instantiationParams)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(FileURL fileURL, AbstractFile parent, Authenticator authenticator, Map<String, Object> instantiationParams)", "modifiers": "public static", "return": "AbstractFile", "signature": "AbstractFile getFile(FileURL fileURL, AbstractFile parent, Authenticator authenticator, Map<String, Object> instantiationParams)", "full_signature": "public static AbstractFile getFile(FileURL fileURL, AbstractFile parent, Authenticator authenticator, Map<String, Object> instantiationParams)", "class_method_signature": "FileFactory.getFile(FileURL fileURL, AbstractFile parent, Authenticator authenticator, Map<String, Object> instantiationParams)", "testcase": false, "constructor": false}, {"identifier": "createRawFile", "parameters": "(FileURL fileURL, Authenticator authenticator, Map<String, Object> instantiationParams)", "modifiers": "private static", "return": "AbstractFile", "signature": "AbstractFile createRawFile(FileURL fileURL, Authenticator authenticator, Map<String, Object> instantiationParams)", "full_signature": "private static AbstractFile createRawFile(FileURL fileURL, Authenticator authenticator, Map<String, Object> instantiationParams)", "class_method_signature": "FileFactory.createRawFile(FileURL fileURL, Authenticator authenticator, Map<String, Object> instantiationParams)", "testcase": false, "constructor": false}, {"identifier": "getFilenameVariation", "parameters": "(String filename)", "modifiers": "private static", "return": "String", "signature": "String getFilenameVariation(String filename)", "full_signature": "private static String getFilenameVariation(String filename)", "class_method_signature": "FileFactory.getFilenameVariation(String filename)", "testcase": false, "constructor": false}, {"identifier": "getTemporaryFile", "parameters": "(String desiredFilename, boolean deleteOnExit)", "modifiers": "public static", "return": "AbstractFile", "signature": "AbstractFile getTemporaryFile(String desiredFilename, boolean deleteOnExit)", "full_signature": "public static AbstractFile getTemporaryFile(String desiredFilename, boolean deleteOnExit)", "class_method_signature": "FileFactory.getTemporaryFile(String desiredFilename, boolean deleteOnExit)", "testcase": false, "constructor": false}, {"identifier": "getTemporaryFile", "parameters": "(boolean deleteOnExit)", "modifiers": "public static", "return": "AbstractFile", "signature": "AbstractFile getTemporaryFile(boolean deleteOnExit)", "full_signature": "public static AbstractFile getTemporaryFile(boolean deleteOnExit)", "class_method_signature": "FileFactory.getTemporaryFile(boolean deleteOnExit)", "testcase": false, "constructor": false}, {"identifier": "getTemporaryFolder", "parameters": "()", "modifiers": "public static", "return": "AbstractFile", "signature": "AbstractFile getTemporaryFolder()", "full_signature": "public static AbstractFile getTemporaryFolder()", "class_method_signature": "FileFactory.getTemporaryFolder()", "testcase": false, "constructor": false}, {"identifier": "isArchiveFilename", "parameters": "(String filename)", "modifiers": "public static", "return": "boolean", "signature": "boolean isArchiveFilename(String filename)", "full_signature": "public static boolean isArchiveFilename(String filename)", "class_method_signature": "FileFactory.isArchiveFilename(String filename)", "testcase": false, "constructor": false}, {"identifier": "wrapArchive", "parameters": "(AbstractFile file)", "modifiers": "public static", "return": "AbstractFile", "signature": "AbstractFile wrapArchive(AbstractFile file)", "full_signature": "public static AbstractFile wrapArchive(AbstractFile file)", "class_method_signature": "FileFactory.wrapArchive(AbstractFile file)", "testcase": false, "constructor": false}, {"identifier": "wrapArchive", "parameters": "(AbstractFile file, String extension)", "modifiers": "public static", "return": "AbstractFile", "signature": "AbstractFile wrapArchive(AbstractFile file, String extension)", "full_signature": "public static AbstractFile wrapArchive(AbstractFile file, String extension)", "class_method_signature": "FileFactory.wrapArchive(AbstractFile file, String extension)", "testcase": false, "constructor": false}, {"identifier": "getDefaultFileIconProvider", "parameters": "()", "modifiers": "public static", "return": "FileIconProvider", "signature": "FileIconProvider getDefaultFileIconProvider()", "full_signature": "public static FileIconProvider getDefaultFileIconProvider()", "class_method_signature": "FileFactory.getDefaultFileIconProvider()", "testcase": false, "constructor": false}, {"identifier": "setDefaultFileIconProvider", "parameters": "(FileIconProvider fip)", "modifiers": "public static", "return": "void", "signature": "void setDefaultFileIconProvider(FileIconProvider fip)", "full_signature": "public static void setDefaultFileIconProvider(FileIconProvider fip)", "class_method_signature": "FileFactory.setDefaultFileIconProvider(FileIconProvider fip)", "testcase": false, "constructor": false}, {"identifier": "getDefaultAuthenticator", "parameters": "()", "modifiers": "public static", "return": "Authenticator", "signature": "Authenticator getDefaultAuthenticator()", "full_signature": "public static Authenticator getDefaultAuthenticator()", "class_method_signature": "FileFactory.getDefaultAuthenticator()", "testcase": false, "constructor": false}, {"identifier": "setDefaultAuthenticator", "parameters": "(Authenticator authenticator)", "modifiers": "public static", "return": "void", "signature": "void setDefaultAuthenticator(Authenticator authenticator)", "full_signature": "public static void setDefaultAuthenticator(Authenticator authenticator)", "class_method_signature": "FileFactory.setDefaultAuthenticator(Authenticator authenticator)", "testcase": false, "constructor": false}], "file": "mucommander-commons-file/src/main/java/com/mucommander/commons/file/FileFactory.java"}, "focal_method": {"identifier": "getTemporaryFile", "parameters": "(String desiredFilename, boolean deleteOnExit)", "modifiers": "public static", "return": "AbstractFile", "body": "public static AbstractFile getTemporaryFile(String desiredFilename, boolean deleteOnExit) throws IOException {\n        if(desiredFilename==null || desiredFilename.equals(\"\"))\n            desiredFilename = \"temp\";\n        \n        // Attempt to use the desired name\n        AbstractFile tempFile = TEMP_DIRECTORY.getDirectChild(desiredFilename);\n\n        if(tempFile.exists())\n            tempFile = TEMP_DIRECTORY.getDirectChild(getFilenameVariation(desiredFilename));\n\n        if(deleteOnExit)\n            ((java.io.File)tempFile.getUnderlyingFileObject()).deleteOnExit();\n\n        return tempFile;\n    }", "signature": "AbstractFile getTemporaryFile(String desiredFilename, boolean deleteOnExit)", "full_signature": "public static AbstractFile getTemporaryFile(String desiredFilename, boolean deleteOnExit)", "class_method_signature": "FileFactory.getTemporaryFile(String desiredFilename, boolean deleteOnExit)", "testcase": false, "constructor": false, "invocations": ["equals", "getDirectChild", "exists", "getDirectChild", "getFilenameVariation", "deleteOnExit", "getUnderlyingFileObject"]}, "repository": {"repo_id": 16462032, "url": "https://github.com/mucommander/mucommander", "language": "Java", "is_fork": false, "fork_count": 124, "stargazer_count": 448, "size": 47123, "license": "licensed"}}