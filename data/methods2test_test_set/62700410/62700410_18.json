{"test_class": {"identifier": "ArrowConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static BufferAllocator bufferAllocator = new RootAllocator(Long.MAX_VALUE);", "modifier": "private static", "type": "BufferAllocator", "declarator": "bufferAllocator = new RootAllocator(Long.MAX_VALUE)", "var_name": "bufferAllocator"}], "file": "datavec-arrow/src/test/java/org/datavec/arrow/ArrowConverterTest.java"}, "test_case": {"identifier": "testArrowBatchSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testArrowBatchSet() {\n        Schema.Builder schema = new Schema.Builder();\n        List<String> single = new ArrayList<>();\n        for(int i = 0; i < 2; i++) {\n            schema.addColumnInteger(String.valueOf(i));\n            single.add(String.valueOf(i));\n        }\n\n        List<List<Writable>> input = Arrays.asList(\n                Arrays.<Writable>asList(new IntWritable(0),new IntWritable(1)),\n                Arrays.<Writable>asList(new IntWritable(2),new IntWritable(3))\n        );\n\n        List<FieldVector> fieldVector = ArrowConverter.toArrowColumns(bufferAllocator,schema.build(),input);\n        ArrowWritableRecordBatch writableRecordBatch = new ArrowWritableRecordBatch(fieldVector,schema.build());\n        List<Writable> assertion = Arrays.<Writable>asList(new IntWritable(4), new IntWritable(5));\n        writableRecordBatch.set(1, Arrays.<Writable>asList(new IntWritable(4),new IntWritable(5)));\n        List<Writable> recordTest = writableRecordBatch.get(1);\n        assertEquals(assertion,recordTest);\n    }", "signature": "void testArrowBatchSet()", "full_signature": "@Test public void testArrowBatchSet()", "class_method_signature": "ArrowConverterTest.testArrowBatchSet()", "testcase": true, "constructor": false, "invocations": ["addColumnInteger", "valueOf", "add", "valueOf", "asList", "asList", "asList", "toArrowColumns", "build", "build", "asList", "set", "asList", "get", "assertEquals"]}, "focal_class": {"identifier": "ArrowConverter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "toArray", "parameters": "(ArrowWritableRecordTimeSeriesBatch arrowWritableRecordBatch)", "modifiers": "public static", "return": "INDArray", "signature": "INDArray toArray(ArrowWritableRecordTimeSeriesBatch arrowWritableRecordBatch)", "full_signature": "public static INDArray toArray(ArrowWritableRecordTimeSeriesBatch arrowWritableRecordBatch)", "class_method_signature": "ArrowConverter.toArray(ArrowWritableRecordTimeSeriesBatch arrowWritableRecordBatch)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(ArrowWritableRecordBatch arrowWritableRecordBatch)", "modifiers": "public static", "return": "INDArray", "signature": "INDArray toArray(ArrowWritableRecordBatch arrowWritableRecordBatch)", "full_signature": "public static INDArray toArray(ArrowWritableRecordBatch arrowWritableRecordBatch)", "class_method_signature": "ArrowConverter.toArray(ArrowWritableRecordBatch arrowWritableRecordBatch)", "testcase": false, "constructor": false}, {"identifier": "convertArrowVector", "parameters": "(FieldVector fieldVector,ColumnType type)", "modifiers": "public static", "return": "INDArray", "signature": "INDArray convertArrowVector(FieldVector fieldVector,ColumnType type)", "full_signature": "public static INDArray convertArrowVector(FieldVector fieldVector,ColumnType type)", "class_method_signature": "ArrowConverter.convertArrowVector(FieldVector fieldVector,ColumnType type)", "testcase": false, "constructor": false}, {"identifier": "convertToArrowVector", "parameters": "(INDArray from,List<String> name,ColumnType type,BufferAllocator bufferAllocator)", "modifiers": "public static", "return": "List<FieldVector>", "signature": "List<FieldVector> convertToArrowVector(INDArray from,List<String> name,ColumnType type,BufferAllocator bufferAllocator)", "full_signature": "public static List<FieldVector> convertToArrowVector(INDArray from,List<String> name,ColumnType type,BufferAllocator bufferAllocator)", "class_method_signature": "ArrowConverter.convertToArrowVector(INDArray from,List<String> name,ColumnType type,BufferAllocator bufferAllocator)", "testcase": false, "constructor": false}, {"identifier": "writeRecordBatchTo", "parameters": "(List<List<Writable>> recordBatch, Schema inputSchema,OutputStream outputStream)", "modifiers": "public static", "return": "void", "signature": "void writeRecordBatchTo(List<List<Writable>> recordBatch, Schema inputSchema,OutputStream outputStream)", "full_signature": "public static void writeRecordBatchTo(List<List<Writable>> recordBatch, Schema inputSchema,OutputStream outputStream)", "class_method_signature": "ArrowConverter.writeRecordBatchTo(List<List<Writable>> recordBatch, Schema inputSchema,OutputStream outputStream)", "testcase": false, "constructor": false}, {"identifier": "writeRecordBatchTo", "parameters": "(BufferAllocator bufferAllocator ,List<List<Writable>> recordBatch, Schema inputSchema,OutputStream outputStream)", "modifiers": "public static", "return": "void", "signature": "void writeRecordBatchTo(BufferAllocator bufferAllocator ,List<List<Writable>> recordBatch, Schema inputSchema,OutputStream outputStream)", "full_signature": "public static void writeRecordBatchTo(BufferAllocator bufferAllocator ,List<List<Writable>> recordBatch, Schema inputSchema,OutputStream outputStream)", "class_method_signature": "ArrowConverter.writeRecordBatchTo(BufferAllocator bufferAllocator ,List<List<Writable>> recordBatch, Schema inputSchema,OutputStream outputStream)", "testcase": false, "constructor": false}, {"identifier": "toArrowWritablesTimeSeries", "parameters": "(List<FieldVector> fieldVectors,Schema schema,int timeSeriesLength)", "modifiers": "public static", "return": "List<List<List<Writable>>>", "signature": "List<List<List<Writable>>> toArrowWritablesTimeSeries(List<FieldVector> fieldVectors,Schema schema,int timeSeriesLength)", "full_signature": "public static List<List<List<Writable>>> toArrowWritablesTimeSeries(List<FieldVector> fieldVectors,Schema schema,int timeSeriesLength)", "class_method_signature": "ArrowConverter.toArrowWritablesTimeSeries(List<FieldVector> fieldVectors,Schema schema,int timeSeriesLength)", "testcase": false, "constructor": false}, {"identifier": "toArrowWritables", "parameters": "(List<FieldVector> fieldVectors,Schema schema)", "modifiers": "public static", "return": "ArrowWritableRecordBatch", "signature": "ArrowWritableRecordBatch toArrowWritables(List<FieldVector> fieldVectors,Schema schema)", "full_signature": "public static ArrowWritableRecordBatch toArrowWritables(List<FieldVector> fieldVectors,Schema schema)", "class_method_signature": "ArrowConverter.toArrowWritables(List<FieldVector> fieldVectors,Schema schema)", "testcase": false, "constructor": false}, {"identifier": "toArrowWritablesSingle", "parameters": "(List<FieldVector> fieldVectors,Schema schema)", "modifiers": "public static", "return": "List<Writable>", "signature": "List<Writable> toArrowWritablesSingle(List<FieldVector> fieldVectors,Schema schema)", "full_signature": "public static List<Writable> toArrowWritablesSingle(List<FieldVector> fieldVectors,Schema schema)", "class_method_signature": "ArrowConverter.toArrowWritablesSingle(List<FieldVector> fieldVectors,Schema schema)", "testcase": false, "constructor": false}, {"identifier": "readFromFile", "parameters": "(FileInputStream input)", "modifiers": "public static", "return": "Pair<Schema,ArrowWritableRecordBatch>", "signature": "Pair<Schema,ArrowWritableRecordBatch> readFromFile(FileInputStream input)", "full_signature": "public static Pair<Schema,ArrowWritableRecordBatch> readFromFile(FileInputStream input)", "class_method_signature": "ArrowConverter.readFromFile(FileInputStream input)", "testcase": false, "constructor": false}, {"identifier": "readFromFile", "parameters": "(File input)", "modifiers": "public static", "return": "Pair<Schema,ArrowWritableRecordBatch>", "signature": "Pair<Schema,ArrowWritableRecordBatch> readFromFile(File input)", "full_signature": "public static Pair<Schema,ArrowWritableRecordBatch> readFromFile(File input)", "class_method_signature": "ArrowConverter.readFromFile(File input)", "testcase": false, "constructor": false}, {"identifier": "readFromBytes", "parameters": "(byte[] input)", "modifiers": "public static", "return": "Pair<Schema,ArrowWritableRecordBatch>", "signature": "Pair<Schema,ArrowWritableRecordBatch> readFromBytes(byte[] input)", "full_signature": "public static Pair<Schema,ArrowWritableRecordBatch> readFromBytes(byte[] input)", "class_method_signature": "ArrowConverter.readFromBytes(byte[] input)", "testcase": false, "constructor": false}, {"identifier": "toArrowSchema", "parameters": "(Schema schema)", "modifiers": "public static", "return": "org.apache.arrow.vector.types.pojo.Schema", "signature": "org.apache.arrow.vector.types.pojo.Schema toArrowSchema(Schema schema)", "full_signature": "public static org.apache.arrow.vector.types.pojo.Schema toArrowSchema(Schema schema)", "class_method_signature": "ArrowConverter.toArrowSchema(Schema schema)", "testcase": false, "constructor": false}, {"identifier": "toDatavecSchema", "parameters": "(org.apache.arrow.vector.types.pojo.Schema schema)", "modifiers": "public static", "return": "Schema", "signature": "Schema toDatavecSchema(org.apache.arrow.vector.types.pojo.Schema schema)", "full_signature": "public static Schema toDatavecSchema(org.apache.arrow.vector.types.pojo.Schema schema)", "class_method_signature": "ArrowConverter.toDatavecSchema(org.apache.arrow.vector.types.pojo.Schema schema)", "testcase": false, "constructor": false}, {"identifier": "field", "parameters": "(String name,ArrowType arrowType)", "modifiers": "public static", "return": "Field", "signature": "Field field(String name,ArrowType arrowType)", "full_signature": "public static Field field(String name,ArrowType arrowType)", "class_method_signature": "ArrowConverter.field(String name,ArrowType arrowType)", "testcase": false, "constructor": false}, {"identifier": "getFieldForColumn", "parameters": "(String name,ColumnType columnType)", "modifiers": "public static", "return": "Field", "signature": "Field getFieldForColumn(String name,ColumnType columnType)", "full_signature": "public static Field getFieldForColumn(String name,ColumnType columnType)", "class_method_signature": "ArrowConverter.getFieldForColumn(String name,ColumnType columnType)", "testcase": false, "constructor": false}, {"identifier": "doubleField", "parameters": "(String name)", "modifiers": "public static", "return": "Field", "signature": "Field doubleField(String name)", "full_signature": "public static Field doubleField(String name)", "class_method_signature": "ArrowConverter.doubleField(String name)", "testcase": false, "constructor": false}, {"identifier": "floatField", "parameters": "(String name)", "modifiers": "public static", "return": "Field", "signature": "Field floatField(String name)", "full_signature": "public static Field floatField(String name)", "class_method_signature": "ArrowConverter.floatField(String name)", "testcase": false, "constructor": false}, {"identifier": "intField", "parameters": "(String name)", "modifiers": "public static", "return": "Field", "signature": "Field intField(String name)", "full_signature": "public static Field intField(String name)", "class_method_signature": "ArrowConverter.intField(String name)", "testcase": false, "constructor": false}, {"identifier": "longField", "parameters": "(String name)", "modifiers": "public static", "return": "Field", "signature": "Field longField(String name)", "full_signature": "public static Field longField(String name)", "class_method_signature": "ArrowConverter.longField(String name)", "testcase": false, "constructor": false}, {"identifier": "stringField", "parameters": "(String name)", "modifiers": "public static", "return": "Field", "signature": "Field stringField(String name)", "full_signature": "public static Field stringField(String name)", "class_method_signature": "ArrowConverter.stringField(String name)", "testcase": false, "constructor": false}, {"identifier": "booleanField", "parameters": "(String name)", "modifiers": "public static", "return": "Field", "signature": "Field booleanField(String name)", "full_signature": "public static Field booleanField(String name)", "class_method_signature": "ArrowConverter.booleanField(String name)", "testcase": false, "constructor": false}, {"identifier": "providerForVectors", "parameters": "(List<FieldVector> vectors,List<Field> fields)", "modifiers": "public static", "return": "DictionaryProvider", "signature": "DictionaryProvider providerForVectors(List<FieldVector> vectors,List<Field> fields)", "full_signature": "public static DictionaryProvider providerForVectors(List<FieldVector> vectors,List<Field> fields)", "class_method_signature": "ArrowConverter.providerForVectors(List<FieldVector> vectors,List<Field> fields)", "testcase": false, "constructor": false}, {"identifier": "toArrowColumns", "parameters": "(final BufferAllocator bufferAllocator, final Schema schema, List<List<Writable>> dataVecRecord)", "modifiers": "public static", "return": "List<FieldVector>", "signature": "List<FieldVector> toArrowColumns(final BufferAllocator bufferAllocator, final Schema schema, List<List<Writable>> dataVecRecord)", "full_signature": "public static List<FieldVector> toArrowColumns(final BufferAllocator bufferAllocator, final Schema schema, List<List<Writable>> dataVecRecord)", "class_method_signature": "ArrowConverter.toArrowColumns(final BufferAllocator bufferAllocator, final Schema schema, List<List<Writable>> dataVecRecord)", "testcase": false, "constructor": false}, {"identifier": "toArrowColumnsTimeSeries", "parameters": "(final BufferAllocator bufferAllocator,\n                                                              final Schema schema,\n                                                              List<List<List<Writable>>> dataVecRecord)", "modifiers": "public static", "return": "List<FieldVector>", "signature": "List<FieldVector> toArrowColumnsTimeSeries(final BufferAllocator bufferAllocator,\n                                                              final Schema schema,\n                                                              List<List<List<Writable>>> dataVecRecord)", "full_signature": "public static List<FieldVector> toArrowColumnsTimeSeries(final BufferAllocator bufferAllocator,\n                                                              final Schema schema,\n                                                              List<List<List<Writable>>> dataVecRecord)", "class_method_signature": "ArrowConverter.toArrowColumnsTimeSeries(final BufferAllocator bufferAllocator,\n                                                              final Schema schema,\n                                                              List<List<List<Writable>>> dataVecRecord)", "testcase": false, "constructor": false}, {"identifier": "toArrowColumnsTimeSeriesHelper", "parameters": "(final BufferAllocator bufferAllocator,\n                                                                        final Schema schema,\n                                                                        List<List<List<T>>> dataVecRecord)", "modifiers": "public static", "return": "List<FieldVector>", "signature": "List<FieldVector> toArrowColumnsTimeSeriesHelper(final BufferAllocator bufferAllocator,\n                                                                        final Schema schema,\n                                                                        List<List<List<T>>> dataVecRecord)", "full_signature": "public static List<FieldVector> toArrowColumnsTimeSeriesHelper(final BufferAllocator bufferAllocator,\n                                                                        final Schema schema,\n                                                                        List<List<List<T>>> dataVecRecord)", "class_method_signature": "ArrowConverter.toArrowColumnsTimeSeriesHelper(final BufferAllocator bufferAllocator,\n                                                                        final Schema schema,\n                                                                        List<List<List<T>>> dataVecRecord)", "testcase": false, "constructor": false}, {"identifier": "toArrowColumnsStringSingle", "parameters": "(final BufferAllocator bufferAllocator, final Schema schema, List<String> dataVecRecord)", "modifiers": "public static", "return": "List<FieldVector>", "signature": "List<FieldVector> toArrowColumnsStringSingle(final BufferAllocator bufferAllocator, final Schema schema, List<String> dataVecRecord)", "full_signature": "public static List<FieldVector> toArrowColumnsStringSingle(final BufferAllocator bufferAllocator, final Schema schema, List<String> dataVecRecord)", "class_method_signature": "ArrowConverter.toArrowColumnsStringSingle(final BufferAllocator bufferAllocator, final Schema schema, List<String> dataVecRecord)", "testcase": false, "constructor": false}, {"identifier": "toArrowColumnsStringTimeSeries", "parameters": "(final BufferAllocator bufferAllocator,\n                                                                    final Schema schema,\n                                                                    List<List<List<String>>> dataVecRecord)", "modifiers": "public static", "return": "List<FieldVector>", "signature": "List<FieldVector> toArrowColumnsStringTimeSeries(final BufferAllocator bufferAllocator,\n                                                                    final Schema schema,\n                                                                    List<List<List<String>>> dataVecRecord)", "full_signature": "public static List<FieldVector> toArrowColumnsStringTimeSeries(final BufferAllocator bufferAllocator,\n                                                                    final Schema schema,\n                                                                    List<List<List<String>>> dataVecRecord)", "class_method_signature": "ArrowConverter.toArrowColumnsStringTimeSeries(final BufferAllocator bufferAllocator,\n                                                                    final Schema schema,\n                                                                    List<List<List<String>>> dataVecRecord)", "testcase": false, "constructor": false}, {"identifier": "toArrowColumnsString", "parameters": "(final BufferAllocator bufferAllocator, final Schema schema, List<List<String>> dataVecRecord)", "modifiers": "public static", "return": "List<FieldVector>", "signature": "List<FieldVector> toArrowColumnsString(final BufferAllocator bufferAllocator, final Schema schema, List<List<String>> dataVecRecord)", "full_signature": "public static List<FieldVector> toArrowColumnsString(final BufferAllocator bufferAllocator, final Schema schema, List<List<String>> dataVecRecord)", "class_method_signature": "ArrowConverter.toArrowColumnsString(final BufferAllocator bufferAllocator, final Schema schema, List<List<String>> dataVecRecord)", "testcase": false, "constructor": false}, {"identifier": "createFieldVectors", "parameters": "(BufferAllocator bufferAllocator,Schema schema, int numRows)", "modifiers": "private static", "return": "List<FieldVector>", "signature": "List<FieldVector> createFieldVectors(BufferAllocator bufferAllocator,Schema schema, int numRows)", "full_signature": "private static List<FieldVector> createFieldVectors(BufferAllocator bufferAllocator,Schema schema, int numRows)", "class_method_signature": "ArrowConverter.createFieldVectors(BufferAllocator bufferAllocator,Schema schema, int numRows)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(ColumnType columnType,FieldVector fieldVector,Object value,int row)", "modifiers": "public static", "return": "void", "signature": "void setValue(ColumnType columnType,FieldVector fieldVector,Object value,int row)", "full_signature": "public static void setValue(ColumnType columnType,FieldVector fieldVector,Object value,int row)", "class_method_signature": "ArrowConverter.setValue(ColumnType columnType,FieldVector fieldVector,Object value,int row)", "testcase": false, "constructor": false}, {"identifier": "setLongInTime", "parameters": "(FieldVector fieldVector,int index,long value)", "modifiers": "private static", "return": "void", "signature": "void setLongInTime(FieldVector fieldVector,int index,long value)", "full_signature": "private static void setLongInTime(FieldVector fieldVector,int index,long value)", "class_method_signature": "ArrowConverter.setLongInTime(FieldVector fieldVector,int index,long value)", "testcase": false, "constructor": false}, {"identifier": "vectorFor", "parameters": "(BufferAllocator allocator,String name,Date[] data)", "modifiers": "public static", "return": "TimeStampMilliVector", "signature": "TimeStampMilliVector vectorFor(BufferAllocator allocator,String name,Date[] data)", "full_signature": "public static TimeStampMilliVector vectorFor(BufferAllocator allocator,String name,Date[] data)", "class_method_signature": "ArrowConverter.vectorFor(BufferAllocator allocator,String name,Date[] data)", "testcase": false, "constructor": false}, {"identifier": "timeVectorOf", "parameters": "(BufferAllocator allocator,String name,int length)", "modifiers": "public static", "return": "TimeStampMilliVector", "signature": "TimeStampMilliVector timeVectorOf(BufferAllocator allocator,String name,int length)", "full_signature": "public static TimeStampMilliVector timeVectorOf(BufferAllocator allocator,String name,int length)", "class_method_signature": "ArrowConverter.timeVectorOf(BufferAllocator allocator,String name,int length)", "testcase": false, "constructor": false}, {"identifier": "vectorFor", "parameters": "(BufferAllocator allocator,String name,String[] data)", "modifiers": "public static", "return": "VarCharVector", "signature": "VarCharVector vectorFor(BufferAllocator allocator,String name,String[] data)", "full_signature": "public static VarCharVector vectorFor(BufferAllocator allocator,String name,String[] data)", "class_method_signature": "ArrowConverter.vectorFor(BufferAllocator allocator,String name,String[] data)", "testcase": false, "constructor": false}, {"identifier": "stringVectorOf", "parameters": "(BufferAllocator allocator,String name,int length)", "modifiers": "public static", "return": "VarCharVector", "signature": "VarCharVector stringVectorOf(BufferAllocator allocator,String name,int length)", "full_signature": "public static VarCharVector stringVectorOf(BufferAllocator allocator,String name,int length)", "class_method_signature": "ArrowConverter.stringVectorOf(BufferAllocator allocator,String name,int length)", "testcase": false, "constructor": false}, {"identifier": "vectorFor", "parameters": "(BufferAllocator allocator,String name,float[] data)", "modifiers": "public static", "return": "Float4Vector", "signature": "Float4Vector vectorFor(BufferAllocator allocator,String name,float[] data)", "full_signature": "public static Float4Vector vectorFor(BufferAllocator allocator,String name,float[] data)", "class_method_signature": "ArrowConverter.vectorFor(BufferAllocator allocator,String name,float[] data)", "testcase": false, "constructor": false}, {"identifier": "floatVectorOf", "parameters": "(BufferAllocator allocator,String name,int length)", "modifiers": "public static", "return": "Float4Vector", "signature": "Float4Vector floatVectorOf(BufferAllocator allocator,String name,int length)", "full_signature": "public static Float4Vector floatVectorOf(BufferAllocator allocator,String name,int length)", "class_method_signature": "ArrowConverter.floatVectorOf(BufferAllocator allocator,String name,int length)", "testcase": false, "constructor": false}, {"identifier": "vectorFor", "parameters": "(BufferAllocator allocator,String name,double[] data)", "modifiers": "public static", "return": "Float8Vector", "signature": "Float8Vector vectorFor(BufferAllocator allocator,String name,double[] data)", "full_signature": "public static Float8Vector vectorFor(BufferAllocator allocator,String name,double[] data)", "class_method_signature": "ArrowConverter.vectorFor(BufferAllocator allocator,String name,double[] data)", "testcase": false, "constructor": false}, {"identifier": "doubleVectorOf", "parameters": "(BufferAllocator allocator,String name,int length)", "modifiers": "public static", "return": "Float8Vector", "signature": "Float8Vector doubleVectorOf(BufferAllocator allocator,String name,int length)", "full_signature": "public static Float8Vector doubleVectorOf(BufferAllocator allocator,String name,int length)", "class_method_signature": "ArrowConverter.doubleVectorOf(BufferAllocator allocator,String name,int length)", "testcase": false, "constructor": false}, {"identifier": "vectorFor", "parameters": "(BufferAllocator allocator,String name,boolean[] data)", "modifiers": "public static", "return": "BitVector", "signature": "BitVector vectorFor(BufferAllocator allocator,String name,boolean[] data)", "full_signature": "public static BitVector vectorFor(BufferAllocator allocator,String name,boolean[] data)", "class_method_signature": "ArrowConverter.vectorFor(BufferAllocator allocator,String name,boolean[] data)", "testcase": false, "constructor": false}, {"identifier": "booleanVectorOf", "parameters": "(BufferAllocator allocator,String name,int length)", "modifiers": "public static", "return": "BitVector", "signature": "BitVector booleanVectorOf(BufferAllocator allocator,String name,int length)", "full_signature": "public static BitVector booleanVectorOf(BufferAllocator allocator,String name,int length)", "class_method_signature": "ArrowConverter.booleanVectorOf(BufferAllocator allocator,String name,int length)", "testcase": false, "constructor": false}, {"identifier": "vectorFor", "parameters": "(BufferAllocator allocator,String name,int[] data)", "modifiers": "public static", "return": "IntVector", "signature": "IntVector vectorFor(BufferAllocator allocator,String name,int[] data)", "full_signature": "public static IntVector vectorFor(BufferAllocator allocator,String name,int[] data)", "class_method_signature": "ArrowConverter.vectorFor(BufferAllocator allocator,String name,int[] data)", "testcase": false, "constructor": false}, {"identifier": "intVectorOf", "parameters": "(BufferAllocator allocator,String name,int length)", "modifiers": "public static", "return": "IntVector", "signature": "IntVector intVectorOf(BufferAllocator allocator,String name,int length)", "full_signature": "public static IntVector intVectorOf(BufferAllocator allocator,String name,int length)", "class_method_signature": "ArrowConverter.intVectorOf(BufferAllocator allocator,String name,int length)", "testcase": false, "constructor": false}, {"identifier": "vectorFor", "parameters": "(BufferAllocator allocator,String name,long[] data)", "modifiers": "public static", "return": "BigIntVector", "signature": "BigIntVector vectorFor(BufferAllocator allocator,String name,long[] data)", "full_signature": "public static BigIntVector vectorFor(BufferAllocator allocator,String name,long[] data)", "class_method_signature": "ArrowConverter.vectorFor(BufferAllocator allocator,String name,long[] data)", "testcase": false, "constructor": false}, {"identifier": "longVectorOf", "parameters": "(BufferAllocator allocator,String name,int length)", "modifiers": "public static", "return": "BigIntVector", "signature": "BigIntVector longVectorOf(BufferAllocator allocator,String name,int length)", "full_signature": "public static BigIntVector longVectorOf(BufferAllocator allocator,String name,int length)", "class_method_signature": "ArrowConverter.longVectorOf(BufferAllocator allocator,String name,int length)", "testcase": false, "constructor": false}, {"identifier": "metaDataFromField", "parameters": "(Field field)", "modifiers": "private static", "return": "ColumnMetaData", "signature": "ColumnMetaData metaDataFromField(Field field)", "full_signature": "private static ColumnMetaData metaDataFromField(Field field)", "class_method_signature": "ArrowConverter.metaDataFromField(Field field)", "testcase": false, "constructor": false}, {"identifier": "fromEntry", "parameters": "(int item,FieldVector from,ColumnType columnType)", "modifiers": "public static", "return": "Writable", "signature": "Writable fromEntry(int item,FieldVector from,ColumnType columnType)", "full_signature": "public static Writable fromEntry(int item,FieldVector from,ColumnType columnType)", "class_method_signature": "ArrowConverter.fromEntry(int item,FieldVector from,ColumnType columnType)", "testcase": false, "constructor": false}, {"identifier": "getIntFromFieldVector", "parameters": "(int row,FieldVector fieldVector)", "modifiers": "private static", "return": "int", "signature": "int getIntFromFieldVector(int row,FieldVector fieldVector)", "full_signature": "private static int getIntFromFieldVector(int row,FieldVector fieldVector)", "class_method_signature": "ArrowConverter.getIntFromFieldVector(int row,FieldVector fieldVector)", "testcase": false, "constructor": false}, {"identifier": "getLongFromFieldVector", "parameters": "(int row,FieldVector fieldVector)", "modifiers": "private static", "return": "long", "signature": "long getLongFromFieldVector(int row,FieldVector fieldVector)", "full_signature": "private static long getLongFromFieldVector(int row,FieldVector fieldVector)", "class_method_signature": "ArrowConverter.getLongFromFieldVector(int row,FieldVector fieldVector)", "testcase": false, "constructor": false}, {"identifier": "getDoubleFromFieldVector", "parameters": "(int row,FieldVector fieldVector)", "modifiers": "private static", "return": "double", "signature": "double getDoubleFromFieldVector(int row,FieldVector fieldVector)", "full_signature": "private static double getDoubleFromFieldVector(int row,FieldVector fieldVector)", "class_method_signature": "ArrowConverter.getDoubleFromFieldVector(int row,FieldVector fieldVector)", "testcase": false, "constructor": false}, {"identifier": "getFloatFromFieldVector", "parameters": "(int row,FieldVector fieldVector)", "modifiers": "private static", "return": "float", "signature": "float getFloatFromFieldVector(int row,FieldVector fieldVector)", "full_signature": "private static float getFloatFromFieldVector(int row,FieldVector fieldVector)", "class_method_signature": "ArrowConverter.getFloatFromFieldVector(int row,FieldVector fieldVector)", "testcase": false, "constructor": false}, {"identifier": "asDataVecBatch", "parameters": "(ArrowRecordBatch arrowRecordBatch, Schema schema, VectorSchemaRoot vectorLoader)", "modifiers": "private static", "return": "ArrowWritableRecordBatch", "signature": "ArrowWritableRecordBatch asDataVecBatch(ArrowRecordBatch arrowRecordBatch, Schema schema, VectorSchemaRoot vectorLoader)", "full_signature": "private static ArrowWritableRecordBatch asDataVecBatch(ArrowRecordBatch arrowRecordBatch, Schema schema, VectorSchemaRoot vectorLoader)", "class_method_signature": "ArrowConverter.asDataVecBatch(ArrowRecordBatch arrowRecordBatch, Schema schema, VectorSchemaRoot vectorLoader)", "testcase": false, "constructor": false}], "file": "datavec-arrow/src/main/java/org/datavec/arrow/ArrowConverter.java"}, "focal_method": {"identifier": "toArrowColumns", "parameters": "(final BufferAllocator bufferAllocator, final Schema schema, List<List<Writable>> dataVecRecord)", "modifiers": "public static", "return": "List<FieldVector>", "body": "public static List<FieldVector> toArrowColumns(final BufferAllocator bufferAllocator, final Schema schema, List<List<Writable>> dataVecRecord) {\n        int numRows = dataVecRecord.size();\n\n        List<FieldVector> ret = createFieldVectors(bufferAllocator,schema,numRows);\n\n        for(int j = 0; j < schema.numColumns(); j++) {\n            FieldVector fieldVector = ret.get(j);\n            int row = 0;\n            for(List<Writable> record : dataVecRecord) {\n                Writable writable = record.get(j);\n                setValue(schema.getType(j),fieldVector,writable,row);\n                row++;\n            }\n\n        }\n\n        return ret;\n    }", "signature": "List<FieldVector> toArrowColumns(final BufferAllocator bufferAllocator, final Schema schema, List<List<Writable>> dataVecRecord)", "full_signature": "public static List<FieldVector> toArrowColumns(final BufferAllocator bufferAllocator, final Schema schema, List<List<Writable>> dataVecRecord)", "class_method_signature": "ArrowConverter.toArrowColumns(final BufferAllocator bufferAllocator, final Schema schema, List<List<Writable>> dataVecRecord)", "testcase": false, "constructor": false, "invocations": ["size", "createFieldVectors", "numColumns", "get", "get", "setValue", "getType"]}, "repository": {"repo_id": 62700410, "url": "https://github.com/deeplearning4j/DataVec", "language": "Java", "is_fork": false, "fork_count": 174, "stargazer_count": 260, "size": 39842, "license": "licensed"}}