{"test_class": {"identifier": "IsotopePatternGeneratorTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private final static IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "private final static", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}], "file": "tool/formula/src/test/java/org/openscience/cdk/formula/IsotopePatternGeneratorTest.java"}, "test_case": {"identifier": "testCalculateIsotopesIodemethylidyne", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCalculateIsotopesIodemethylidyne() {\n        // RESULTS ACCORDING PAGE: http://www2.sisweb.com/mstools/isotope.htm\n        double[] massResults = {138.904480, 139.907839};\n        double[] abundResults = {1.00, .011};\n\n        IMolecularFormula molFor = new MolecularFormula();\n        molFor.addIsotope(builder.newInstance(IIsotope.class, \"C\"));\n        molFor.addIsotope(builder.newInstance(IIsotope.class, \"I\"));\n\n        Assert.assertEquals(2, molFor.getIsotopeCount());\n\n        IsotopePatternGenerator isotopeGe = new IsotopePatternGenerator(.01);\n        IsotopePattern isoPattern = isotopeGe.getIsotopes(molFor);\n\n        Assert.assertEquals(2, isoPattern.getNumberOfIsotopes());\n\n        Assert.assertEquals(massResults[0], isoPattern.getIsotope(0).getMass(), 0.01);\n        Assert.assertEquals(massResults[1], isoPattern.getIsotope(1).getMass(), 0.01);\n\n        Assert.assertEquals(abundResults[0], isoPattern.getIsotope(0).getIntensity(), 0.01);\n        Assert.assertEquals(abundResults[1], isoPattern.getIsotope(1).getIntensity(), 0.01);\n\n    }", "signature": "void testCalculateIsotopesIodemethylidyne()", "full_signature": "@Test public void testCalculateIsotopesIodemethylidyne()", "class_method_signature": "IsotopePatternGeneratorTest.testCalculateIsotopesIodemethylidyne()", "testcase": true, "constructor": false, "invocations": ["addIsotope", "newInstance", "addIsotope", "newInstance", "assertEquals", "getIsotopeCount", "getIsotopes", "assertEquals", "getNumberOfIsotopes", "assertEquals", "getMass", "getIsotope", "assertEquals", "getMass", "getIsotope", "assertEquals", "getIntensity", "getIsotope", "assertEquals", "getIntensity", "getIsotope"]}, "focal_class": {"identifier": "IsotopePatternGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IChemObjectBuilder builder        = null;", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder        = null", "var_name": "builder"}, {"original_string": "private IsotopeFactory     isoFactory;", "modifier": "private", "type": "IsotopeFactory", "declarator": "isoFactory", "var_name": "isoFactory"}, {"original_string": "private ILoggingTool       logger         = LoggingToolFactory.createLoggingTool(IsotopePatternGenerator.class);", "modifier": "private", "type": "ILoggingTool", "declarator": "logger         = LoggingToolFactory.createLoggingTool(IsotopePatternGenerator.class)", "var_name": "logger"}, {"original_string": "private double  minIntensity = 0.00001;", "modifier": "private", "type": "double", "declarator": "minIntensity = 0.00001", "var_name": "minIntensity"}, {"original_string": "private double  minAbundance = 1E-10;", "modifier": "private", "type": "double", "declarator": "minAbundance = 1E-10", "var_name": "minAbundance"}, {"original_string": "private double  resolution   = 0.00005f;", "modifier": "private", "type": "double", "declarator": "resolution   = 0.00005f", "var_name": "resolution"}, {"original_string": "private boolean storeFormula = false;", "modifier": "private", "type": "boolean", "declarator": "storeFormula = false", "var_name": "storeFormula"}], "methods": [{"identifier": "IsotopePatternGenerator", "parameters": "()", "modifiers": "public", "return": "", "signature": " IsotopePatternGenerator()", "full_signature": "public  IsotopePatternGenerator()", "class_method_signature": "IsotopePatternGenerator.IsotopePatternGenerator()", "testcase": false, "constructor": true}, {"identifier": "IsotopePatternGenerator", "parameters": "(double minIntensity)", "modifiers": "public", "return": "", "signature": " IsotopePatternGenerator(double minIntensity)", "full_signature": "public  IsotopePatternGenerator(double minIntensity)", "class_method_signature": "IsotopePatternGenerator.IsotopePatternGenerator(double minIntensity)", "testcase": false, "constructor": true}, {"identifier": "setMinIntensity", "parameters": "(double minIntensity)", "modifiers": "public", "return": "IsotopePatternGenerator", "signature": "IsotopePatternGenerator setMinIntensity(double minIntensity)", "full_signature": "public IsotopePatternGenerator setMinIntensity(double minIntensity)", "class_method_signature": "IsotopePatternGenerator.setMinIntensity(double minIntensity)", "testcase": false, "constructor": false}, {"identifier": "setMinResolution", "parameters": "(double resolution)", "modifiers": "public", "return": "IsotopePatternGenerator", "signature": "IsotopePatternGenerator setMinResolution(double resolution)", "full_signature": "public IsotopePatternGenerator setMinResolution(double resolution)", "class_method_signature": "IsotopePatternGenerator.setMinResolution(double resolution)", "testcase": false, "constructor": false}, {"identifier": "setStoreFormulas", "parameters": "(boolean storeFormula)", "modifiers": "public", "return": "IsotopePatternGenerator", "signature": "IsotopePatternGenerator setStoreFormulas(boolean storeFormula)", "full_signature": "public IsotopePatternGenerator setStoreFormulas(boolean storeFormula)", "class_method_signature": "IsotopePatternGenerator.setStoreFormulas(boolean storeFormula)", "testcase": false, "constructor": false}, {"identifier": "getIsotopes", "parameters": "(IMolecularFormula molFor)", "modifiers": "public", "return": "IsotopePattern", "signature": "IsotopePattern getIsotopes(IMolecularFormula molFor)", "full_signature": "public IsotopePattern getIsotopes(IMolecularFormula molFor)", "class_method_signature": "IsotopePatternGenerator.getIsotopes(IMolecularFormula molFor)", "testcase": false, "constructor": false}, {"identifier": "asFormula", "parameters": "(IIsotope isotope)", "modifiers": "private", "return": "IMolecularFormula", "signature": "IMolecularFormula asFormula(IIsotope isotope)", "full_signature": "private IMolecularFormula asFormula(IIsotope isotope)", "class_method_signature": "IsotopePatternGenerator.asFormula(IIsotope isotope)", "testcase": false, "constructor": false}, {"identifier": "union", "parameters": "(IMolecularFormula a, IMolecularFormula b)", "modifiers": "private", "return": "IMolecularFormula", "signature": "IMolecularFormula union(IMolecularFormula a, IMolecularFormula b)", "full_signature": "private IMolecularFormula union(IMolecularFormula a, IMolecularFormula b)", "class_method_signature": "IsotopePatternGenerator.union(IMolecularFormula a, IMolecularFormula b)", "testcase": false, "constructor": false}, {"identifier": "findExisting", "parameters": "(List<IsotopeContainer> containers,\n                                                 double mass, double treshhold)", "modifiers": "private static", "return": "IsotopeContainer", "signature": "IsotopeContainer findExisting(List<IsotopeContainer> containers,\n                                                 double mass, double treshhold)", "full_signature": "private static IsotopeContainer findExisting(List<IsotopeContainer> containers,\n                                                 double mass, double treshhold)", "class_method_signature": "IsotopePatternGenerator.findExisting(List<IsotopeContainer> containers,\n                                                 double mass, double treshhold)", "testcase": false, "constructor": false}, {"identifier": "addDistinctFormula", "parameters": "(IsotopeContainer container, IMolecularFormula mf)", "modifiers": "private", "return": "void", "signature": "void addDistinctFormula(IsotopeContainer container, IMolecularFormula mf)", "full_signature": "private void addDistinctFormula(IsotopeContainer container, IMolecularFormula mf)", "class_method_signature": "IsotopePatternGenerator.addDistinctFormula(IsotopeContainer container, IMolecularFormula mf)", "testcase": false, "constructor": false}, {"identifier": "calculateAbundanceAndMass", "parameters": "(IsotopePattern current, List<IsotopeContainer> additional)", "modifiers": "private", "return": "IsotopePattern", "signature": "IsotopePattern calculateAbundanceAndMass(IsotopePattern current, List<IsotopeContainer> additional)", "full_signature": "private IsotopePattern calculateAbundanceAndMass(IsotopePattern current, List<IsotopeContainer> additional)", "class_method_signature": "IsotopePatternGenerator.calculateAbundanceAndMass(IsotopePattern current, List<IsotopeContainer> additional)", "testcase": false, "constructor": false}, {"identifier": "cleanAbundance", "parameters": "(IsotopePattern isopattern, double minIntensity)", "modifiers": "private", "return": "IsotopePattern", "signature": "IsotopePattern cleanAbundance(IsotopePattern isopattern, double minIntensity)", "full_signature": "private IsotopePattern cleanAbundance(IsotopePattern isopattern, double minIntensity)", "class_method_signature": "IsotopePatternGenerator.cleanAbundance(IsotopePattern isopattern, double minIntensity)", "testcase": false, "constructor": false}], "file": "tool/formula/src/main/java/org/openscience/cdk/formula/IsotopePatternGenerator.java"}, "focal_method": {"identifier": "getIsotopes", "parameters": "(IMolecularFormula molFor)", "modifiers": "public", "return": "IsotopePattern", "body": "public IsotopePattern getIsotopes(IMolecularFormula molFor) {\n\n        if (builder == null) {\n            try {\n                isoFactory = Isotopes.getInstance();\n                builder = molFor.getBuilder();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        String mf = MolecularFormulaManipulator.getString(molFor, true);\n\n        IMolecularFormula molecularFormula = MolecularFormulaManipulator.getMajorIsotopeMolecularFormula(mf, builder);\n\n        IsotopePattern abundance_Mass = null;\n\n        for (IIsotope isos : molecularFormula.isotopes()) {\n            String elementSymbol = isos.getSymbol();\n            int atomCount = molecularFormula.getIsotopeCount(isos);\n\n            // Generate possible isotope containers for the current atom's\n            // these will then me 'multiplied' with the existing patten\n            List<IsotopeContainer> additional = new ArrayList<>();\n            for (IIsotope isotope : isoFactory.getIsotopes(elementSymbol)) {\n                double mass      = isotope.getExactMass();\n                double abundance = isotope.getNaturalAbundance();\n                if (abundance <= 0.000000001)\n                    continue;\n                IsotopeContainer container = new IsotopeContainer(mass, abundance);\n                if (storeFormula)\n                    container.setFormula(asFormula(isotope));\n                additional.add(container);\n            }\n\n            for (int i = 0; i < atomCount; i++)\n                abundance_Mass = calculateAbundanceAndMass(abundance_Mass, additional);\n        }\n\n        IsotopePattern isoP = IsotopePatternManipulator.sortAndNormalizedByIntensity(abundance_Mass);\n        isoP = cleanAbundance(isoP, minIntensity);\n        IsotopePattern isoPattern = IsotopePatternManipulator.sortByMass(isoP);\n        return isoPattern;\n\n    }", "signature": "IsotopePattern getIsotopes(IMolecularFormula molFor)", "full_signature": "public IsotopePattern getIsotopes(IMolecularFormula molFor)", "class_method_signature": "IsotopePatternGenerator.getIsotopes(IMolecularFormula molFor)", "testcase": false, "constructor": false, "invocations": ["getInstance", "getBuilder", "printStackTrace", "getString", "getMajorIsotopeMolecularFormula", "isotopes", "getSymbol", "getIsotopeCount", "getIsotopes", "getExactMass", "getNaturalAbundance", "setFormula", "asFormula", "add", "calculateAbundanceAndMass", "sortAndNormalizedByIntensity", "cleanAbundance", "sortByMass"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}