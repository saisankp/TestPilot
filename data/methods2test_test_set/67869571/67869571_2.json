{"test_class": {"identifier": "PreferenceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SharedPreferences preferences;", "modifier": "private", "type": "SharedPreferences", "declarator": "preferences", "var_name": "preferences"}, {"original_string": "private RxSharedPreferences rxPreferences;", "modifier": "private", "type": "RxSharedPreferences", "declarator": "rxPreferences", "var_name": "rxPreferences"}], "file": "library/src/test/java/tiamat/PreferenceTest.java"}, "test_case": {"identifier": "putValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void putValue() {\n        rxPreferences.putBoolean(\"key1\", true);\n        assertThat(rxPreferences.getBoolean(\"key1\", false).asValue()).isEqualTo(true);\n\n        rxPreferences.putFloat(\"key2\", 1);\n        assertThat(rxPreferences.getFloat(\"key2\", 0).asValue()).isEqualTo(1);\n\n        rxPreferences.putInt(\"key3\", 1);\n        assertThat(rxPreferences.getInt(\"key3\", 0).asValue()).isEqualTo(1);\n\n        rxPreferences.putLong(\"key4\", 1);\n        assertThat(rxPreferences.getLong(\"key4\", 0).asValue()).isEqualTo(1);\n\n        rxPreferences.putString(\"key5\", \"value\");\n        assertThat(rxPreferences.getString(\"key5\", null).asValue()).isEqualTo(\"value\");\n\n        rxPreferences.putStringSet(\"key6\", singleton(\"value\"));\n        assertThat(rxPreferences.getStringSet(\"key6\", null).asValue()).isEqualTo(singleton(\"value\"));\n    }", "signature": "void putValue()", "full_signature": "@Test public void putValue()", "class_method_signature": "PreferenceTest.putValue()", "testcase": true, "constructor": false, "invocations": ["putBoolean", "isEqualTo", "assertThat", "asValue", "getBoolean", "putFloat", "isEqualTo", "assertThat", "asValue", "getFloat", "putInt", "isEqualTo", "assertThat", "asValue", "getInt", "putLong", "isEqualTo", "assertThat", "asValue", "getLong", "putString", "isEqualTo", "assertThat", "asValue", "getString", "putStringSet", "singleton", "isEqualTo", "assertThat", "asValue", "getStringSet", "singleton"]}, "focal_class": {"identifier": "Preference", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SharedPreferences preferences;", "modifier": "private final", "type": "SharedPreferences", "declarator": "preferences", "var_name": "preferences"}, {"original_string": "private final String key;", "modifier": "private final", "type": "String", "declarator": "key", "var_name": "key"}, {"original_string": "private final T defValue;", "modifier": "private final", "type": "T", "declarator": "defValue", "var_name": "defValue"}, {"original_string": "private final Proxy<T> proxy;", "modifier": "private final", "type": "Proxy<T>", "declarator": "proxy", "var_name": "proxy"}, {"original_string": "private final Observable<T> values;", "modifier": "private final", "type": "Observable<T>", "declarator": "values", "var_name": "values"}], "methods": [{"identifier": "Preference", "parameters": "(SharedPreferences preferences, final String key, T defValue, Proxy<T> proxy, Observable<String> keyChanges)", "modifiers": "", "return": "", "signature": " Preference(SharedPreferences preferences, final String key, T defValue, Proxy<T> proxy, Observable<String> keyChanges)", "full_signature": "  Preference(SharedPreferences preferences, final String key, T defValue, Proxy<T> proxy, Observable<String> keyChanges)", "class_method_signature": "Preference.Preference(SharedPreferences preferences, final String key, T defValue, Proxy<T> proxy, Observable<String> keyChanges)", "testcase": false, "constructor": true}, {"identifier": "asValue", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T asValue()", "full_signature": "public T asValue()", "class_method_signature": "Preference.asValue()", "testcase": false, "constructor": false}, {"identifier": "asObservable", "parameters": "()", "modifiers": "public", "return": "Observable<T>", "signature": "Observable<T> asObservable()", "full_signature": "public Observable<T> asObservable()", "class_method_signature": "Preference.asObservable()", "testcase": false, "constructor": false}, {"identifier": "asAction", "parameters": "()", "modifiers": "public", "return": "Action1<? super T>", "signature": "Action1<? super T> asAction()", "full_signature": "public Action1<? super T> asAction()", "class_method_signature": "Preference.asAction()", "testcase": false, "constructor": false}], "file": "library/src/main/java/tiamat/Preference.java"}, "focal_method": {"identifier": "asValue", "parameters": "()", "modifiers": "public", "return": "T", "body": "public T asValue() {\n        return proxy.get(key, defValue, preferences);\n    }", "signature": "T asValue()", "full_signature": "public T asValue()", "class_method_signature": "Preference.asValue()", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 67869571, "url": "https://github.com/hotchemi/tiamat", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 71, "size": 311, "license": "licensed"}}