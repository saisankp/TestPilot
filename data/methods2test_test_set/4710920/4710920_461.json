{"test_class": {"identifier": "ExecutorUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/ExecutorUtilTest.java"}, "test_case": {"identifier": "testShutdownNow", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testShutdownNow() throws Exception {\n        ExecutorService executor = Mockito.mock(ExecutorService.class);\n        when(executor.isTerminated()).thenReturn(false, true);\n        ExecutorUtil.shutdownNow(executor, 20);\n        verify(executor).shutdownNow();\n        verify(executor).awaitTermination(20, TimeUnit.MILLISECONDS);\n    }", "signature": "void testShutdownNow()", "full_signature": "@Test public void testShutdownNow()", "class_method_signature": "ExecutorUtilTest.testShutdownNow()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "isTerminated", "shutdownNow", "shutdownNow", "verify", "awaitTermination", "verify"]}, "focal_class": {"identifier": "ExecutorUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ExecutorUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ExecutorUtil.class)", "var_name": "logger"}, {"original_string": "private static final ThreadPoolExecutor SHUTDOWN_EXECUTOR = new ThreadPoolExecutor(0, 1,\n            0L, TimeUnit.MILLISECONDS,\n            new LinkedBlockingQueue<Runnable>(100),\n            new NamedThreadFactory(\"Close-ExecutorService-Timer\", true));", "modifier": "private static final", "type": "ThreadPoolExecutor", "declarator": "SHUTDOWN_EXECUTOR = new ThreadPoolExecutor(0, 1,\n            0L, TimeUnit.MILLISECONDS,\n            new LinkedBlockingQueue<Runnable>(100),\n            new NamedThreadFactory(\"Close-ExecutorService-Timer\", true))", "var_name": "SHUTDOWN_EXECUTOR"}], "methods": [{"identifier": "isTerminated", "parameters": "(Executor executor)", "modifiers": "public static", "return": "boolean", "signature": "boolean isTerminated(Executor executor)", "full_signature": "public static boolean isTerminated(Executor executor)", "class_method_signature": "ExecutorUtil.isTerminated(Executor executor)", "testcase": false, "constructor": false}, {"identifier": "gracefulShutdown", "parameters": "(Executor executor, int timeout)", "modifiers": "public static", "return": "void", "signature": "void gracefulShutdown(Executor executor, int timeout)", "full_signature": "public static void gracefulShutdown(Executor executor, int timeout)", "class_method_signature": "ExecutorUtil.gracefulShutdown(Executor executor, int timeout)", "testcase": false, "constructor": false}, {"identifier": "shutdownNow", "parameters": "(Executor executor, final int timeout)", "modifiers": "public static", "return": "void", "signature": "void shutdownNow(Executor executor, final int timeout)", "full_signature": "public static void shutdownNow(Executor executor, final int timeout)", "class_method_signature": "ExecutorUtil.shutdownNow(Executor executor, final int timeout)", "testcase": false, "constructor": false}, {"identifier": "newThreadToCloseExecutor", "parameters": "(final ExecutorService es)", "modifiers": "private static", "return": "void", "signature": "void newThreadToCloseExecutor(final ExecutorService es)", "full_signature": "private static void newThreadToCloseExecutor(final ExecutorService es)", "class_method_signature": "ExecutorUtil.newThreadToCloseExecutor(final ExecutorService es)", "testcase": false, "constructor": false}, {"identifier": "setThreadName", "parameters": "(URL url, String defaultName)", "modifiers": "public static", "return": "URL", "signature": "URL setThreadName(URL url, String defaultName)", "full_signature": "public static URL setThreadName(URL url, String defaultName)", "class_method_signature": "ExecutorUtil.setThreadName(URL url, String defaultName)", "testcase": false, "constructor": false}, {"identifier": "cancelScheduledFuture", "parameters": "(ScheduledFuture<?> scheduledFuture)", "modifiers": "public static", "return": "void", "signature": "void cancelScheduledFuture(ScheduledFuture<?> scheduledFuture)", "full_signature": "public static void cancelScheduledFuture(ScheduledFuture<?> scheduledFuture)", "class_method_signature": "ExecutorUtil.cancelScheduledFuture(ScheduledFuture<?> scheduledFuture)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/ExecutorUtil.java"}, "focal_method": {"identifier": "shutdownNow", "parameters": "(Executor executor, final int timeout)", "modifiers": "public static", "return": "void", "body": "public static void shutdownNow(Executor executor, final int timeout) {\n        if (!(executor instanceof ExecutorService) || isTerminated(executor)) {\n            return;\n        }\n        final ExecutorService es = (ExecutorService) executor;\n        try {\n            es.shutdownNow();\n        } catch (SecurityException ex2) {\n            return;\n        } catch (NullPointerException ex2) {\n            return;\n        }\n        try {\n            es.awaitTermination(timeout, TimeUnit.MILLISECONDS);\n        } catch (InterruptedException ex) {\n            Thread.currentThread().interrupt();\n        }\n        if (!isTerminated(es)) {\n            newThreadToCloseExecutor(es);\n        }\n    }", "signature": "void shutdownNow(Executor executor, final int timeout)", "full_signature": "public static void shutdownNow(Executor executor, final int timeout)", "class_method_signature": "ExecutorUtil.shutdownNow(Executor executor, final int timeout)", "testcase": false, "constructor": false, "invocations": ["isTerminated", "shutdownNow", "awaitTermination", "interrupt", "currentThread", "isTerminated", "newThreadToCloseExecutor"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}