{"test_class": {"identifier": "InstantPeriodicTaskTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/schedulers/InstantPeriodicTaskTest.java"}, "test_case": {"identifier": "taskCrash", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void taskCrash() throws Exception {\n        ExecutorService exec = Executors.newSingleThreadExecutor();\n        List<Throwable> errors = TestHelper.trackPluginErrors();\n        try {\n\n            InstantPeriodicTask task = new InstantPeriodicTask(new Runnable() {\n                @Override\n                public void run() {\n                    throw new TestException();\n                }\n            }, exec);\n\n            assertNull(task.call());\n\n            TestHelper.assertUndeliverable(errors, 0, TestException.class);\n        } finally {\n            exec.shutdownNow();\n            RxJavaPlugins.reset();\n        }\n    }", "signature": "void taskCrash()", "full_signature": "@Test public void taskCrash()", "class_method_signature": "InstantPeriodicTaskTest.taskCrash()", "testcase": true, "constructor": false, "invocations": ["newSingleThreadExecutor", "trackPluginErrors", "assertNull", "call", "assertUndeliverable", "shutdownNow", "reset"]}, "focal_class": {"identifier": "InstantPeriodicTask", "superclass": "", "interfaces": "implements Callable<Void>, Disposable", "fields": [{"original_string": "final Runnable task;", "modifier": "final", "type": "Runnable", "declarator": "task", "var_name": "task"}, {"original_string": "final AtomicReference<Future<?>> rest;", "modifier": "final", "type": "AtomicReference<Future<?>>", "declarator": "rest", "var_name": "rest"}, {"original_string": "final AtomicReference<Future<?>> first;", "modifier": "final", "type": "AtomicReference<Future<?>>", "declarator": "first", "var_name": "first"}, {"original_string": "final ExecutorService executor;", "modifier": "final", "type": "ExecutorService", "declarator": "executor", "var_name": "executor"}, {"original_string": "Thread runner;", "modifier": "", "type": "Thread", "declarator": "runner", "var_name": "runner"}, {"original_string": "static final FutureTask<Void> CANCELLED = new FutureTask<Void>(Functions.EMPTY_RUNNABLE, null);", "modifier": "static final", "type": "FutureTask<Void>", "declarator": "CANCELLED = new FutureTask<Void>(Functions.EMPTY_RUNNABLE, null)", "var_name": "CANCELLED"}], "methods": [{"identifier": "InstantPeriodicTask", "parameters": "(Runnable task, ExecutorService executor)", "modifiers": "", "return": "", "signature": " InstantPeriodicTask(Runnable task, ExecutorService executor)", "full_signature": "  InstantPeriodicTask(Runnable task, ExecutorService executor)", "class_method_signature": "InstantPeriodicTask.InstantPeriodicTask(Runnable task, ExecutorService executor)", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "Void", "signature": "Void call()", "full_signature": "@Override public Void call()", "class_method_signature": "InstantPeriodicTask.call()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "InstantPeriodicTask.dispose()", "testcase": false, "constructor": false}, {"identifier": "isDisposed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDisposed()", "full_signature": "@Override public boolean isDisposed()", "class_method_signature": "InstantPeriodicTask.isDisposed()", "testcase": false, "constructor": false}, {"identifier": "setFirst", "parameters": "(Future<?> f)", "modifiers": "", "return": "void", "signature": "void setFirst(Future<?> f)", "full_signature": " void setFirst(Future<?> f)", "class_method_signature": "InstantPeriodicTask.setFirst(Future<?> f)", "testcase": false, "constructor": false}, {"identifier": "setRest", "parameters": "(Future<?> f)", "modifiers": "", "return": "void", "signature": "void setRest(Future<?> f)", "full_signature": " void setRest(Future<?> f)", "class_method_signature": "InstantPeriodicTask.setRest(Future<?> f)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/schedulers/InstantPeriodicTask.java"}, "focal_method": {"identifier": "call", "parameters": "()", "modifiers": "@Override public", "return": "Void", "body": "@Override\n    public Void call() throws Exception {\n        runner = Thread.currentThread();\n        try {\n            task.run();\n            setRest(executor.submit(this));\n            runner = null;\n        } catch (Throwable ex) {\n            runner = null;\n            RxJavaPlugins.onError(ex);\n        }\n        return null;\n    }", "signature": "Void call()", "full_signature": "@Override public Void call()", "class_method_signature": "InstantPeriodicTask.call()", "testcase": false, "constructor": false, "invocations": ["currentThread", "run", "setRest", "submit", "onError"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}