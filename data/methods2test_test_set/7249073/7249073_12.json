{"test_class": {"identifier": "TestKijiTableKeyValueStore", "superclass": "extends KijiClientTest", "interfaces": "", "fields": [], "file": "kiji-mapreduce/src/test/java/org/kiji/mapreduce/kvstore/lib/TestKijiTableKeyValueStore.java"}, "test_case": {"identifier": "testRequiresRealTable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRequiresRealTable() throws IOException {\n    final KijiURI tableURI =\n        KijiURI.newBuilder(getKiji().getURI().toString() + \"/table_name_not_real\").build();\n    try {\n      // The specified table must exist in the Kiji instance.\n\n      KijiTableKeyValueStore<String> input = KijiTableKeyValueStore.builder()\n        .withTable(tableURI)\n        .withColumn(\"some\", \"column\")\n        .withMinTimestamp(42)\n        .withMaxTimestamp(512)\n        .withCacheLimit(2121)\n        .build();\n      fail(\"Should have thrown an IllegalArgumentException.\");\n    } catch (IllegalArgumentException iae) {\n      assertEquals(\"Could not open table: \" + tableURI, iae.getMessage());\n    }\n  }", "signature": "void testRequiresRealTable()", "full_signature": "@Test public void testRequiresRealTable()", "class_method_signature": "TestKijiTableKeyValueStore.testRequiresRealTable()", "testcase": true, "constructor": false, "invocations": ["build", "newBuilder", "toString", "getURI", "getKiji", "build", "withCacheLimit", "withMaxTimestamp", "withMinTimestamp", "withColumn", "withTable", "builder", "fail", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "KijiTableKeyValueStore", "superclass": "", "interfaces": "implements Configurable, KeyValueStore<KijiRowKeyComponents, V>", "fields": [{"original_string": "private static final int DEFAULT_MAX_OBJECTS_TO_CACHE = 100;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_MAX_OBJECTS_TO_CACHE = 100", "var_name": "DEFAULT_MAX_OBJECTS_TO_CACHE"}, {"original_string": "private static final String CONF_TABLE_URI = \"table.uri\";", "modifier": "private static final", "type": "String", "declarator": "CONF_TABLE_URI = \"table.uri\"", "var_name": "CONF_TABLE_URI"}, {"original_string": "private static final String CONF_COLUMN = \"column\";", "modifier": "private static final", "type": "String", "declarator": "CONF_COLUMN = \"column\"", "var_name": "CONF_COLUMN"}, {"original_string": "private static final String CONF_MIN_TS = \"min.ts\";", "modifier": "private static final", "type": "String", "declarator": "CONF_MIN_TS = \"min.ts\"", "var_name": "CONF_MIN_TS"}, {"original_string": "private static final String CONF_MAX_TS = \"max.ts\";", "modifier": "private static final", "type": "String", "declarator": "CONF_MAX_TS = \"max.ts\"", "var_name": "CONF_MAX_TS"}, {"original_string": "private static final String CONF_CACHE_SIZE = \"cache.size\";", "modifier": "private static final", "type": "String", "declarator": "CONF_CACHE_SIZE = \"cache.size\"", "var_name": "CONF_CACHE_SIZE"}, {"original_string": "private static final String CONF_READER_SCHEMA = \"avro.reader.schema\";", "modifier": "private static final", "type": "String", "declarator": "CONF_READER_SCHEMA = \"avro.reader.schema\"", "var_name": "CONF_READER_SCHEMA"}, {"original_string": "private KijiURI mTableUri;", "modifier": "private", "type": "KijiURI", "declarator": "mTableUri", "var_name": "mTableUri"}, {"original_string": "private KijiColumnName mColumn;", "modifier": "private", "type": "KijiColumnName", "declarator": "mColumn", "var_name": "mColumn"}, {"original_string": "private long mMinTs;", "modifier": "private", "type": "long", "declarator": "mMinTs", "var_name": "mMinTs"}, {"original_string": "private long mMaxTs;", "modifier": "private", "type": "long", "declarator": "mMaxTs", "var_name": "mMaxTs"}, {"original_string": "private int mMaxObjectsToCache = DEFAULT_MAX_OBJECTS_TO_CACHE;", "modifier": "private", "type": "int", "declarator": "mMaxObjectsToCache = DEFAULT_MAX_OBJECTS_TO_CACHE", "var_name": "mMaxObjectsToCache"}, {"original_string": "private Schema mReaderSchema;", "modifier": "private", "type": "Schema", "declarator": "mReaderSchema", "var_name": "mReaderSchema"}, {"original_string": "private Configuration mConf;", "modifier": "private", "type": "Configuration", "declarator": "mConf", "var_name": "mConf"}, {"original_string": "private boolean mOpened;", "modifier": "private", "type": "boolean", "declarator": "mOpened", "var_name": "mOpened"}], "methods": [{"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder builder()", "full_signature": "public static Builder builder()", "class_method_signature": "KijiTableKeyValueStore.builder()", "testcase": false, "constructor": false}, {"identifier": "KijiTableKeyValueStore", "parameters": "()", "modifiers": "public", "return": "", "signature": " KijiTableKeyValueStore()", "full_signature": "public  KijiTableKeyValueStore()", "class_method_signature": "KijiTableKeyValueStore.KijiTableKeyValueStore()", "testcase": false, "constructor": true}, {"identifier": "KijiTableKeyValueStore", "parameters": "(Builder builder)", "modifiers": "private", "return": "", "signature": " KijiTableKeyValueStore(Builder builder)", "full_signature": "private  KijiTableKeyValueStore(Builder builder)", "class_method_signature": "KijiTableKeyValueStore.KijiTableKeyValueStore(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "setConf", "parameters": "(Configuration conf)", "modifiers": "@Override public", "return": "void", "signature": "void setConf(Configuration conf)", "full_signature": "@Override public void setConf(Configuration conf)", "class_method_signature": "KijiTableKeyValueStore.setConf(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getConf", "parameters": "()", "modifiers": "@Override public", "return": "Configuration", "signature": "Configuration getConf()", "full_signature": "@Override public Configuration getConf()", "class_method_signature": "KijiTableKeyValueStore.getConf()", "testcase": false, "constructor": false}, {"identifier": "storeToConf", "parameters": "(KeyValueStoreConfiguration conf)", "modifiers": "@Override public", "return": "void", "signature": "void storeToConf(KeyValueStoreConfiguration conf)", "full_signature": "@Override public void storeToConf(KeyValueStoreConfiguration conf)", "class_method_signature": "KijiTableKeyValueStore.storeToConf(KeyValueStoreConfiguration conf)", "testcase": false, "constructor": false}, {"identifier": "initFromConf", "parameters": "(KeyValueStoreConfiguration conf)", "modifiers": "@Override public", "return": "void", "signature": "void initFromConf(KeyValueStoreConfiguration conf)", "full_signature": "@Override public void initFromConf(KeyValueStoreConfiguration conf)", "class_method_signature": "KijiTableKeyValueStore.initFromConf(KeyValueStoreConfiguration conf)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "()", "modifiers": "@Override public", "return": "KeyValueStoreReader<KijiRowKeyComponents, V>", "signature": "KeyValueStoreReader<KijiRowKeyComponents, V> open()", "full_signature": "@Override public KeyValueStoreReader<KijiRowKeyComponents, V> open()", "class_method_signature": "KijiTableKeyValueStore.open()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object otherObj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object otherObj)", "full_signature": "@Override public boolean equals(Object otherObj)", "class_method_signature": "KijiTableKeyValueStore.equals(Object otherObj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "KijiTableKeyValueStore.hashCode()", "testcase": false, "constructor": false}], "file": "kiji-mapreduce/src/main/java/org/kiji/mapreduce/kvstore/lib/KijiTableKeyValueStore.java"}, "focal_method": {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "Builder", "body": "public static Builder builder() {\n    return new Builder();\n  }", "signature": "Builder builder()", "full_signature": "public static Builder builder()", "class_method_signature": "KijiTableKeyValueStore.builder()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 7249073, "url": "https://github.com/kijiproject/kiji-mapreduce", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 12, "size": 5029, "license": "licensed"}}