{"test_class": {"identifier": "GetStatsControlTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ldaptive/ad/control/GetStatsControlTest.java"}, "test_case": {"identifier": "decode", "parameters": "(final DERBuffer berValue, final GetStatsControl expected)", "modifiers": "@Test(groups = \"control\", dataProvider = \"response\") public", "return": "void", "body": "@Test(groups = \"control\", dataProvider = \"response\")\n  public void decode(final DERBuffer berValue, final GetStatsControl expected)\n    throws Exception\n  {\n    final GetStatsControl actual = new GetStatsControl(expected.getCriticality());\n    actual.decode(berValue);\n    Assert.assertEquals(actual, expected);\n  }", "signature": "void decode(final DERBuffer berValue, final GetStatsControl expected)", "full_signature": "@Test(groups = \"control\", dataProvider = \"response\") public void decode(final DERBuffer berValue, final GetStatsControl expected)", "class_method_signature": "GetStatsControlTest.decode(final DERBuffer berValue, final GetStatsControl expected)", "testcase": true, "constructor": false, "invocations": ["getCriticality", "decode", "assertEquals"]}, "focal_class": {"identifier": "GetStatsControl", "superclass": "extends AbstractControl", "interfaces": "implements RequestControl, ResponseControl", "fields": [{"original_string": "public static final String OID = \"1.2.840.113556.1.4.970\";", "modifier": "public static final", "type": "String", "declarator": "OID = \"1.2.840.113556.1.4.970\"", "var_name": "OID"}, {"original_string": "private static final int HASH_CODE_SEED = 929;", "modifier": "private static final", "type": "int", "declarator": "HASH_CODE_SEED = 929", "var_name": "HASH_CODE_SEED"}, {"original_string": "private static final DERPath THREAD_COUNT_PATH = new DERPath(\"/SEQ/INT[1]\");", "modifier": "private static final", "type": "DERPath", "declarator": "THREAD_COUNT_PATH = new DERPath(\"/SEQ/INT[1]\")", "var_name": "THREAD_COUNT_PATH"}, {"original_string": "private static final DERPath CALL_TIME_PATH = new DERPath(\"/SEQ/INT[3]\");", "modifier": "private static final", "type": "DERPath", "declarator": "CALL_TIME_PATH = new DERPath(\"/SEQ/INT[3]\")", "var_name": "CALL_TIME_PATH"}, {"original_string": "private static final DERPath ENTRIES_RETURNED_PATH = new DERPath(\"/SEQ/INT[5]\");", "modifier": "private static final", "type": "DERPath", "declarator": "ENTRIES_RETURNED_PATH = new DERPath(\"/SEQ/INT[5]\")", "var_name": "ENTRIES_RETURNED_PATH"}, {"original_string": "private static final DERPath ENTRIES_VISITED_PATH = new DERPath(\"/SEQ/INT[7]\");", "modifier": "private static final", "type": "DERPath", "declarator": "ENTRIES_VISITED_PATH = new DERPath(\"/SEQ/INT[7]\")", "var_name": "ENTRIES_VISITED_PATH"}, {"original_string": "private static final DERPath FILTER_PATH = new DERPath(\"/SEQ/OCTSTR[9]\");", "modifier": "private static final", "type": "DERPath", "declarator": "FILTER_PATH = new DERPath(\"/SEQ/OCTSTR[9]\")", "var_name": "FILTER_PATH"}, {"original_string": "private static final DERPath INDEX_PATH = new DERPath(\"/SEQ/OCTSTR[11]\");", "modifier": "private static final", "type": "DERPath", "declarator": "INDEX_PATH = new DERPath(\"/SEQ/OCTSTR[11]\")", "var_name": "INDEX_PATH"}, {"original_string": "private static final DERPath PAGES_REFERENCED_PATH = new DERPath(\"/SEQ/INT[13]\");", "modifier": "private static final", "type": "DERPath", "declarator": "PAGES_REFERENCED_PATH = new DERPath(\"/SEQ/INT[13]\")", "var_name": "PAGES_REFERENCED_PATH"}, {"original_string": "private static final DERPath PAGES_READ_PATH = new DERPath(\"/SEQ/INT[15]\");", "modifier": "private static final", "type": "DERPath", "declarator": "PAGES_READ_PATH = new DERPath(\"/SEQ/INT[15]\")", "var_name": "PAGES_READ_PATH"}, {"original_string": "private static final DERPath PAGES_PREREAD_PATH = new DERPath(\"/SEQ/INT[17]\");", "modifier": "private static final", "type": "DERPath", "declarator": "PAGES_PREREAD_PATH = new DERPath(\"/SEQ/INT[17]\")", "var_name": "PAGES_PREREAD_PATH"}, {"original_string": "private static final DERPath PAGES_DIRTIED_PATH = new DERPath(\"/SEQ/INT[19]\");", "modifier": "private static final", "type": "DERPath", "declarator": "PAGES_DIRTIED_PATH = new DERPath(\"/SEQ/INT[19]\")", "var_name": "PAGES_DIRTIED_PATH"}, {"original_string": "private static final DERPath PAGES_REDIRTIED_PATH = new DERPath(\"/SEQ/INT[21]\");", "modifier": "private static final", "type": "DERPath", "declarator": "PAGES_REDIRTIED_PATH = new DERPath(\"/SEQ/INT[21]\")", "var_name": "PAGES_REDIRTIED_PATH"}, {"original_string": "private static final DERPath LOG_RECORD_COUNT_PATH = new DERPath(\"/SEQ/INT[23]\");", "modifier": "private static final", "type": "DERPath", "declarator": "LOG_RECORD_COUNT_PATH = new DERPath(\"/SEQ/INT[23]\")", "var_name": "LOG_RECORD_COUNT_PATH"}, {"original_string": "private static final DERPath LOG_RECORD_BYTES_PATH = new DERPath(\"/SEQ/INT[25]\");", "modifier": "private static final", "type": "DERPath", "declarator": "LOG_RECORD_BYTES_PATH = new DERPath(\"/SEQ/INT[25]\")", "var_name": "LOG_RECORD_BYTES_PATH"}, {"original_string": "private final Map<String, Object> statistics = new HashMap<>();", "modifier": "private final", "type": "Map<String, Object>", "declarator": "statistics = new HashMap<>()", "var_name": "statistics"}], "methods": [{"identifier": "GetStatsControl", "parameters": "()", "modifiers": "public", "return": "", "signature": " GetStatsControl()", "full_signature": "public  GetStatsControl()", "class_method_signature": "GetStatsControl.GetStatsControl()", "testcase": false, "constructor": true}, {"identifier": "GetStatsControl", "parameters": "(final boolean critical)", "modifiers": "public", "return": "", "signature": " GetStatsControl(final boolean critical)", "full_signature": "public  GetStatsControl(final boolean critical)", "class_method_signature": "GetStatsControl.GetStatsControl(final boolean critical)", "testcase": false, "constructor": true}, {"identifier": "hasValue", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasValue()", "full_signature": "@Override public boolean hasValue()", "class_method_signature": "GetStatsControl.hasValue()", "testcase": false, "constructor": false}, {"identifier": "getStatistics", "parameters": "()", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> getStatistics()", "full_signature": "public Map<String, Object> getStatistics()", "class_method_signature": "GetStatsControl.getStatistics()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "GetStatsControl.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "GetStatsControl.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "GetStatsControl.toString()", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] encode()", "full_signature": "@Override public byte[] encode()", "class_method_signature": "GetStatsControl.encode()", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(final DERBuffer encoded)", "modifiers": "@Override public", "return": "void", "signature": "void decode(final DERBuffer encoded)", "full_signature": "@Override public void decode(final DERBuffer encoded)", "class_method_signature": "GetStatsControl.decode(final DERBuffer encoded)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/ad/control/GetStatsControl.java"}, "focal_method": {"identifier": "decode", "parameters": "(final DERBuffer encoded)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void decode(final DERBuffer encoded)\n  {\n    final DERParser parser = new DERParser();\n    parser.registerHandler(THREAD_COUNT_PATH, new IntegerHandler(this, \"threadCount\"));\n    parser.registerHandler(CALL_TIME_PATH, new IntegerHandler(this, \"callTime\"));\n    parser.registerHandler(ENTRIES_RETURNED_PATH, new IntegerHandler(this, \"entriesReturned\"));\n    parser.registerHandler(ENTRIES_VISITED_PATH, new IntegerHandler(this, \"entriesVisited\"));\n    parser.registerHandler(FILTER_PATH, new StringHandler(this, \"filter\"));\n    parser.registerHandler(INDEX_PATH, new StringHandler(this, \"index\"));\n    parser.registerHandler(PAGES_REFERENCED_PATH, new IntegerHandler(this, \"pagesReferenced\"));\n    parser.registerHandler(PAGES_READ_PATH, new IntegerHandler(this, \"pagesRead\"));\n    parser.registerHandler(PAGES_PREREAD_PATH, new IntegerHandler(this, \"pagesPreread\"));\n    parser.registerHandler(PAGES_DIRTIED_PATH, new IntegerHandler(this, \"pagesDirtied\"));\n    parser.registerHandler(PAGES_REDIRTIED_PATH, new IntegerHandler(this, \"pagesRedirtied\"));\n    parser.registerHandler(LOG_RECORD_COUNT_PATH, new IntegerHandler(this, \"logRecordCount\"));\n    parser.registerHandler(LOG_RECORD_BYTES_PATH, new IntegerHandler(this, \"logRecordBytes\"));\n    parser.parse(encoded);\n  }", "signature": "void decode(final DERBuffer encoded)", "full_signature": "@Override public void decode(final DERBuffer encoded)", "class_method_signature": "GetStatsControl.decode(final DERBuffer encoded)", "testcase": false, "constructor": false, "invocations": ["registerHandler", "registerHandler", "registerHandler", "registerHandler", "registerHandler", "registerHandler", "registerHandler", "registerHandler", "registerHandler", "registerHandler", "registerHandler", "registerHandler", "registerHandler", "parse"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}