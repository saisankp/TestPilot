{"test_class": {"identifier": "SimpleMergeRequestManagerTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private Repository repo;", "modifier": "private", "type": "Repository", "declarator": "repo", "var_name": "repo"}, {"original_string": "private SimpleMergeRequestManager manager;", "modifier": "private", "type": "SimpleMergeRequestManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "private OrmFactory<MergeRequest> mergeRequestFactory = getRequiredOrmFactory(MergeRequest.class);", "modifier": "private", "type": "OrmFactory<MergeRequest>", "declarator": "mergeRequestFactory = getRequiredOrmFactory(MergeRequest.class)", "var_name": "mergeRequestFactory"}, {"original_string": "private OrmFactory<AcceptedMergeRequest> acceptedMergeRequestFactory = getRequiredOrmFactory(AcceptedMergeRequest.class);", "modifier": "private", "type": "OrmFactory<AcceptedMergeRequest>", "declarator": "acceptedMergeRequestFactory = getRequiredOrmFactory(AcceptedMergeRequest.class)", "var_name": "acceptedMergeRequestFactory"}, {"original_string": "private OrmFactory<Comment> commentFactory = getRequiredOrmFactory(Comment.class);", "modifier": "private", "type": "OrmFactory<Comment>", "declarator": "commentFactory = getRequiredOrmFactory(Comment.class)", "var_name": "commentFactory"}, {"original_string": "private OrmFactory<User> userFactory = getRequiredOrmFactory(User.class);", "modifier": "private", "type": "OrmFactory<User>", "declarator": "userFactory = getRequiredOrmFactory(User.class)", "var_name": "userFactory"}, {"original_string": "private OrmFactory<Branch> branchFactory = getRequiredOrmFactory(Branch.class);", "modifier": "private", "type": "OrmFactory<Branch>", "declarator": "branchFactory = getRequiredOrmFactory(Branch.class)", "var_name": "branchFactory"}, {"original_string": "private OrmFactory<Commit> commitFactory = getRequiredOrmFactory(Commit.class);", "modifier": "private", "type": "OrmFactory<Commit>", "declarator": "commitFactory = getRequiredOrmFactory(Commit.class)", "var_name": "commitFactory"}, {"original_string": "private OrmFactory<VersionedRDFRecord> versionedRDFRecordFactory = getRequiredOrmFactory(VersionedRDFRecord.class);", "modifier": "private", "type": "OrmFactory<VersionedRDFRecord>", "declarator": "versionedRDFRecordFactory = getRequiredOrmFactory(VersionedRDFRecord.class)", "var_name": "versionedRDFRecordFactory"}, {"original_string": "private MergeRequest request1;", "modifier": "private", "type": "MergeRequest", "declarator": "request1", "var_name": "request1"}, {"original_string": "private MergeRequest request2;", "modifier": "private", "type": "MergeRequest", "declarator": "request2", "var_name": "request2"}, {"original_string": "private MergeRequest request3;", "modifier": "private", "type": "MergeRequest", "declarator": "request3", "var_name": "request3"}, {"original_string": "private AcceptedMergeRequest request4;", "modifier": "private", "type": "AcceptedMergeRequest", "declarator": "request4", "var_name": "request4"}, {"original_string": "private AcceptedMergeRequest request5;", "modifier": "private", "type": "AcceptedMergeRequest", "declarator": "request5", "var_name": "request5"}, {"original_string": "private User user1;", "modifier": "private", "type": "User", "declarator": "user1", "var_name": "user1"}, {"original_string": "private User user2;", "modifier": "private", "type": "User", "declarator": "user2", "var_name": "user2"}, {"original_string": "private VersionedRDFRecord versionedRDFRecord1;", "modifier": "private", "type": "VersionedRDFRecord", "declarator": "versionedRDFRecord1", "var_name": "versionedRDFRecord1"}, {"original_string": "private VersionedRDFRecord versionedRDFRecord2;", "modifier": "private", "type": "VersionedRDFRecord", "declarator": "versionedRDFRecord2", "var_name": "versionedRDFRecord2"}, {"original_string": "private Branch sourceBranch1;", "modifier": "private", "type": "Branch", "declarator": "sourceBranch1", "var_name": "sourceBranch1"}, {"original_string": "private Branch sourceBranch2;", "modifier": "private", "type": "Branch", "declarator": "sourceBranch2", "var_name": "sourceBranch2"}, {"original_string": "private Branch targetBranch1;", "modifier": "private", "type": "Branch", "declarator": "targetBranch1", "var_name": "targetBranch1"}, {"original_string": "private Branch targetBranch2;", "modifier": "private", "type": "Branch", "declarator": "targetBranch2", "var_name": "targetBranch2"}, {"original_string": "private Commit sourceCommit1;", "modifier": "private", "type": "Commit", "declarator": "sourceCommit1", "var_name": "sourceCommit1"}, {"original_string": "private Commit targetCommit1;", "modifier": "private", "type": "Commit", "declarator": "targetCommit1", "var_name": "targetCommit1"}, {"original_string": "private Commit sourceCommit2;", "modifier": "private", "type": "Commit", "declarator": "sourceCommit2", "var_name": "sourceCommit2"}, {"original_string": "private Commit targetCommit2;", "modifier": "private", "type": "Commit", "declarator": "targetCommit2", "var_name": "targetCommit2"}, {"original_string": "private Comment comment1;", "modifier": "private", "type": "Comment", "declarator": "comment1", "var_name": "comment1"}, {"original_string": "private Comment comment2;", "modifier": "private", "type": "Comment", "declarator": "comment2", "var_name": "comment2"}, {"original_string": "private Comment comment3;", "modifier": "private", "type": "Comment", "declarator": "comment3", "var_name": "comment3"}, {"original_string": "private Comment comment4;", "modifier": "private", "type": "Comment", "declarator": "comment4", "var_name": "comment4"}, {"original_string": "private Comment commentA;", "modifier": "private", "type": "Comment", "declarator": "commentA", "var_name": "commentA"}, {"original_string": "private Comment commentB;", "modifier": "private", "type": "Comment", "declarator": "commentB", "var_name": "commentB"}, {"original_string": "private Comment commentC;", "modifier": "private", "type": "Comment", "declarator": "commentC", "var_name": "commentC"}, {"original_string": "private Comment commentI;", "modifier": "private", "type": "Comment", "declarator": "commentI", "var_name": "commentI"}, {"original_string": "private Comment commentX;", "modifier": "private", "type": "Comment", "declarator": "commentX", "var_name": "commentX"}, {"original_string": "private Comment commentY;", "modifier": "private", "type": "Comment", "declarator": "commentY", "var_name": "commentY"}, {"original_string": "private Comment commentZ;", "modifier": "private", "type": "Comment", "declarator": "commentZ", "var_name": "commentZ"}, {"original_string": "private final IRI LOCAL_CATALOG_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/catalogs#local\");", "modifier": "private final", "type": "IRI", "declarator": "LOCAL_CATALOG_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/catalogs#local\")", "var_name": "LOCAL_CATALOG_IRI"}, {"original_string": "private final IRI RECORD_1_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#versioned-rdf-record1\");", "modifier": "private final", "type": "IRI", "declarator": "RECORD_1_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#versioned-rdf-record1\")", "var_name": "RECORD_1_IRI"}, {"original_string": "private final IRI RECORD_2_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#versioned-rdf-record2\");", "modifier": "private final", "type": "IRI", "declarator": "RECORD_2_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/records#versioned-rdf-record2\")", "var_name": "RECORD_2_IRI"}, {"original_string": "private final IRI SOURCE_BRANCH_1_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/branches#source1\");", "modifier": "private final", "type": "IRI", "declarator": "SOURCE_BRANCH_1_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/branches#source1\")", "var_name": "SOURCE_BRANCH_1_IRI"}, {"original_string": "private final IRI SOURCE_BRANCH_2_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/branches#source2\");", "modifier": "private final", "type": "IRI", "declarator": "SOURCE_BRANCH_2_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/branches#source2\")", "var_name": "SOURCE_BRANCH_2_IRI"}, {"original_string": "private final String SOURCE_BRANCH_TITLE = \"Source Title\";", "modifier": "private final", "type": "String", "declarator": "SOURCE_BRANCH_TITLE = \"Source Title\"", "var_name": "SOURCE_BRANCH_TITLE"}, {"original_string": "private final IRI TARGET_BRANCH_1_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/branches#target1\");", "modifier": "private final", "type": "IRI", "declarator": "TARGET_BRANCH_1_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/branches#target1\")", "var_name": "TARGET_BRANCH_1_IRI"}, {"original_string": "private final IRI TARGET_BRANCH_2_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/branches#target2\");", "modifier": "private final", "type": "IRI", "declarator": "TARGET_BRANCH_2_IRI = VALUE_FACTORY.createIRI(\"http://mobi.com/test/branches#target2\")", "var_name": "TARGET_BRANCH_2_IRI"}, {"original_string": "private final IRI DOES_NOT_EXIST_IRI = VALUE_FACTORY.createIRI(\"urn:does_not_exist\");", "modifier": "private final", "type": "IRI", "declarator": "DOES_NOT_EXIST_IRI = VALUE_FACTORY.createIRI(\"urn:does_not_exist\")", "var_name": "DOES_NOT_EXIST_IRI"}, {"original_string": "private final String TARGET_BRANCH_TITLE = \"Target Title\";", "modifier": "private final", "type": "String", "declarator": "TARGET_BRANCH_TITLE = \"Target Title\"", "var_name": "TARGET_BRANCH_TITLE"}, {"original_string": "private IRI titleIRI;", "modifier": "private", "type": "IRI", "declarator": "titleIRI", "var_name": "titleIRI"}, {"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "@Mock\n    private CatalogUtilsService utilsService;", "modifier": "@Mock\n    private", "type": "CatalogUtilsService", "declarator": "utilsService", "var_name": "utilsService"}, {"original_string": "@Mock\n    private VersioningManager versioningManager;", "modifier": "@Mock\n    private", "type": "VersioningManager", "declarator": "versioningManager", "var_name": "versioningManager"}, {"original_string": "@Mock\n    private Conflict conflict;", "modifier": "@Mock\n    private", "type": "Conflict", "declarator": "conflict", "var_name": "conflict"}, {"original_string": "@Mock\n    private CatalogConfigProvider configProvider;", "modifier": "@Mock\n    private", "type": "CatalogConfigProvider", "declarator": "configProvider", "var_name": "configProvider"}], "file": "com.mobi.catalog.impl/src/test/java/com/mobi/catalog/impl/mergerequest/SimpleMergeRequestManagerTest.java"}, "test_case": {"identifier": "acceptMergeRequestWithNoSourceHeadTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void acceptMergeRequestWithNoSourceHeadTest() {\n        // Setup\n        sourceBranch1.removeProperty(sourceCommit1.getResource(), VALUE_FACTORY.createIRI(Branch.head_IRI));\n        thrown.expect(IllegalStateException.class);\n\n        try (RepositoryConnection conn = repo.getConnection()) {\n            manager.acceptMergeRequest(request1.getResource(), user1, conn);\n        }\n        verify(versioningManager, never()).merge(any(Resource.class), any(Resource.class), any(Resource.class), any(Resource.class), any(User.class), any(), any());\n    }", "signature": "void acceptMergeRequestWithNoSourceHeadTest()", "full_signature": "@Test public void acceptMergeRequestWithNoSourceHeadTest()", "class_method_signature": "SimpleMergeRequestManagerTest.acceptMergeRequestWithNoSourceHeadTest()", "testcase": true, "constructor": false, "invocations": ["removeProperty", "getResource", "createIRI", "expect", "getConnection", "acceptMergeRequest", "getResource", "merge", "verify", "never", "any", "any", "any", "any", "any", "any", "any"]}, "focal_class": {"identifier": "SimpleMergeRequestManager", "superclass": "", "interfaces": "implements MergeRequestManager", "fields": [{"original_string": "static final String MERGE_REQUEST_NAMESPACE = \"https://mobi.com/merge-requests#\";", "modifier": "static final", "type": "String", "declarator": "MERGE_REQUEST_NAMESPACE = \"https://mobi.com/merge-requests#\"", "var_name": "MERGE_REQUEST_NAMESPACE"}, {"original_string": "static final String COMMENT_NAMESPACE = \"https://mobi.com/comments#\";", "modifier": "static final", "type": "String", "declarator": "COMMENT_NAMESPACE = \"https://mobi.com/comments#\"", "var_name": "COMMENT_NAMESPACE"}, {"original_string": "static final String COMPONENT_NAME = \"com.mobi.catalog.api.mergerequest.MergeRequestManager\";", "modifier": "static final", "type": "String", "declarator": "COMPONENT_NAME = \"com.mobi.catalog.api.mergerequest.MergeRequestManager\"", "var_name": "COMPONENT_NAME"}, {"original_string": "private ValueFactory vf;", "modifier": "private", "type": "ValueFactory", "declarator": "vf", "var_name": "vf"}, {"original_string": "private CatalogConfigProvider configProvider;", "modifier": "private", "type": "CatalogConfigProvider", "declarator": "configProvider", "var_name": "configProvider"}, {"original_string": "private CatalogUtilsService catalogUtils;", "modifier": "private", "type": "CatalogUtilsService", "declarator": "catalogUtils", "var_name": "catalogUtils"}, {"original_string": "private VersioningManager versioningManager;", "modifier": "private", "type": "VersioningManager", "declarator": "versioningManager", "var_name": "versioningManager"}, {"original_string": "private MergeRequestFactory mergeRequestFactory;", "modifier": "private", "type": "MergeRequestFactory", "declarator": "mergeRequestFactory", "var_name": "mergeRequestFactory"}, {"original_string": "private CommentFactory commentFactory;", "modifier": "private", "type": "CommentFactory", "declarator": "commentFactory", "var_name": "commentFactory"}, {"original_string": "private AcceptedMergeRequestFactory acceptedMergeRequestFactory;", "modifier": "private", "type": "AcceptedMergeRequestFactory", "declarator": "acceptedMergeRequestFactory", "var_name": "acceptedMergeRequestFactory"}, {"original_string": "private VersionedRDFRecordFactory recordFactory;", "modifier": "private", "type": "VersionedRDFRecordFactory", "declarator": "recordFactory", "var_name": "recordFactory"}, {"original_string": "private BranchFactory branchFactory;", "modifier": "private", "type": "BranchFactory", "declarator": "branchFactory", "var_name": "branchFactory"}, {"original_string": "private CommitFactory commitFactory;", "modifier": "private", "type": "CommitFactory", "declarator": "commitFactory", "var_name": "commitFactory"}, {"original_string": "private static final String GET_COMMENT_CHAINS;", "modifier": "private static final", "type": "String", "declarator": "GET_COMMENT_CHAINS", "var_name": "GET_COMMENT_CHAINS"}, {"original_string": "private static final int MAX_COMMENT_STRING_LENGTH = 1000000;", "modifier": "private static final", "type": "int", "declarator": "MAX_COMMENT_STRING_LENGTH = 1000000", "var_name": "MAX_COMMENT_STRING_LENGTH"}, {"original_string": "private static final String GET_MERGE_REQUESTS_QUERY;", "modifier": "private static final", "type": "String", "declarator": "GET_MERGE_REQUESTS_QUERY", "var_name": "GET_MERGE_REQUESTS_QUERY"}, {"original_string": "private static final String FILTERS = \"%FILTERS%\";", "modifier": "private static final", "type": "String", "declarator": "FILTERS = \"%FILTERS%\"", "var_name": "FILTERS"}, {"original_string": "private static final String REQUEST_ID_BINDING = \"requestId\";", "modifier": "private static final", "type": "String", "declarator": "REQUEST_ID_BINDING = \"requestId\"", "var_name": "REQUEST_ID_BINDING"}, {"original_string": "private static final String ASSIGNEE_BINDING = \"assignee\";", "modifier": "private static final", "type": "String", "declarator": "ASSIGNEE_BINDING = \"assignee\"", "var_name": "ASSIGNEE_BINDING"}, {"original_string": "private static final String ON_RECORD_BINDING = \"onRecord\";", "modifier": "private static final", "type": "String", "declarator": "ON_RECORD_BINDING = \"onRecord\"", "var_name": "ON_RECORD_BINDING"}, {"original_string": "private static final String SOURCE_BRANCH_BINDING = \"sourceBranch\";", "modifier": "private static final", "type": "String", "declarator": "SOURCE_BRANCH_BINDING = \"sourceBranch\"", "var_name": "SOURCE_BRANCH_BINDING"}, {"original_string": "private static final String TARGET_BRANCH_BINDING = \"targetBranch\";", "modifier": "private static final", "type": "String", "declarator": "TARGET_BRANCH_BINDING = \"targetBranch\"", "var_name": "TARGET_BRANCH_BINDING"}, {"original_string": "private static final String SOURCE_COMMIT_BINDING = \"sourceCommit\";", "modifier": "private static final", "type": "String", "declarator": "SOURCE_COMMIT_BINDING = \"sourceCommit\"", "var_name": "SOURCE_COMMIT_BINDING"}, {"original_string": "private static final String TARGET_COMMIT_BINDING = \"targetCommit\";", "modifier": "private static final", "type": "String", "declarator": "TARGET_COMMIT_BINDING = \"targetCommit\"", "var_name": "TARGET_COMMIT_BINDING"}, {"original_string": "private static final String REMOVE_SOURCE_BINDING = \"removeSource\";", "modifier": "private static final", "type": "String", "declarator": "REMOVE_SOURCE_BINDING = \"removeSource\"", "var_name": "REMOVE_SOURCE_BINDING"}, {"original_string": "private static final String SORT_PRED_BINDING = \"sortPred\";", "modifier": "private static final", "type": "String", "declarator": "SORT_PRED_BINDING = \"sortPred\"", "var_name": "SORT_PRED_BINDING"}], "methods": [{"identifier": "setVf", "parameters": "(ValueFactory vf)", "modifiers": "@Reference", "return": "void", "signature": "void setVf(ValueFactory vf)", "full_signature": "@Reference void setVf(ValueFactory vf)", "class_method_signature": "SimpleMergeRequestManager.setVf(ValueFactory vf)", "testcase": false, "constructor": false}, {"identifier": "setConfigProvider", "parameters": "(CatalogConfigProvider configProvider)", "modifiers": "@Reference", "return": "void", "signature": "void setConfigProvider(CatalogConfigProvider configProvider)", "full_signature": "@Reference void setConfigProvider(CatalogConfigProvider configProvider)", "class_method_signature": "SimpleMergeRequestManager.setConfigProvider(CatalogConfigProvider configProvider)", "testcase": false, "constructor": false}, {"identifier": "setCatalogUtils", "parameters": "(CatalogUtilsService catalogUtils)", "modifiers": "@Reference", "return": "void", "signature": "void setCatalogUtils(CatalogUtilsService catalogUtils)", "full_signature": "@Reference void setCatalogUtils(CatalogUtilsService catalogUtils)", "class_method_signature": "SimpleMergeRequestManager.setCatalogUtils(CatalogUtilsService catalogUtils)", "testcase": false, "constructor": false}, {"identifier": "setVersioningManager", "parameters": "(VersioningManager versioningManager)", "modifiers": "@Reference", "return": "void", "signature": "void setVersioningManager(VersioningManager versioningManager)", "full_signature": "@Reference void setVersioningManager(VersioningManager versioningManager)", "class_method_signature": "SimpleMergeRequestManager.setVersioningManager(VersioningManager versioningManager)", "testcase": false, "constructor": false}, {"identifier": "setMergeRequestFactory", "parameters": "(MergeRequestFactory mergeRequestFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setMergeRequestFactory(MergeRequestFactory mergeRequestFactory)", "full_signature": "@Reference void setMergeRequestFactory(MergeRequestFactory mergeRequestFactory)", "class_method_signature": "SimpleMergeRequestManager.setMergeRequestFactory(MergeRequestFactory mergeRequestFactory)", "testcase": false, "constructor": false}, {"identifier": "setCommentFactory", "parameters": "(CommentFactory commentFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setCommentFactory(CommentFactory commentFactory)", "full_signature": "@Reference void setCommentFactory(CommentFactory commentFactory)", "class_method_signature": "SimpleMergeRequestManager.setCommentFactory(CommentFactory commentFactory)", "testcase": false, "constructor": false}, {"identifier": "setAcceptedMergeRequestFactory", "parameters": "(AcceptedMergeRequestFactory acceptedMergeRequestFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setAcceptedMergeRequestFactory(AcceptedMergeRequestFactory acceptedMergeRequestFactory)", "full_signature": "@Reference void setAcceptedMergeRequestFactory(AcceptedMergeRequestFactory acceptedMergeRequestFactory)", "class_method_signature": "SimpleMergeRequestManager.setAcceptedMergeRequestFactory(AcceptedMergeRequestFactory acceptedMergeRequestFactory)", "testcase": false, "constructor": false}, {"identifier": "setRecordFactory", "parameters": "(VersionedRDFRecordFactory recordFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setRecordFactory(VersionedRDFRecordFactory recordFactory)", "full_signature": "@Reference void setRecordFactory(VersionedRDFRecordFactory recordFactory)", "class_method_signature": "SimpleMergeRequestManager.setRecordFactory(VersionedRDFRecordFactory recordFactory)", "testcase": false, "constructor": false}, {"identifier": "setBranchFactory", "parameters": "(BranchFactory branchFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setBranchFactory(BranchFactory branchFactory)", "full_signature": "@Reference void setBranchFactory(BranchFactory branchFactory)", "class_method_signature": "SimpleMergeRequestManager.setBranchFactory(BranchFactory branchFactory)", "testcase": false, "constructor": false}, {"identifier": "setCommitFactory", "parameters": "(CommitFactory commitFactory)", "modifiers": "@Reference", "return": "void", "signature": "void setCommitFactory(CommitFactory commitFactory)", "full_signature": "@Reference void setCommitFactory(CommitFactory commitFactory)", "class_method_signature": "SimpleMergeRequestManager.setCommitFactory(CommitFactory commitFactory)", "testcase": false, "constructor": false}, {"identifier": "getMergeRequests", "parameters": "(MergeRequestFilterParams params)", "modifiers": "@Override public", "return": "List<MergeRequest>", "signature": "List<MergeRequest> getMergeRequests(MergeRequestFilterParams params)", "full_signature": "@Override public List<MergeRequest> getMergeRequests(MergeRequestFilterParams params)", "class_method_signature": "SimpleMergeRequestManager.getMergeRequests(MergeRequestFilterParams params)", "testcase": false, "constructor": false}, {"identifier": "getMergeRequests", "parameters": "(MergeRequestFilterParams params, RepositoryConnection conn)", "modifiers": "@Override public", "return": "List<MergeRequest>", "signature": "List<MergeRequest> getMergeRequests(MergeRequestFilterParams params, RepositoryConnection conn)", "full_signature": "@Override public List<MergeRequest> getMergeRequests(MergeRequestFilterParams params, RepositoryConnection conn)", "class_method_signature": "SimpleMergeRequestManager.getMergeRequests(MergeRequestFilterParams params, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "createMergeRequest", "parameters": "(MergeRequestConfig config, Resource localCatalog)", "modifiers": "@Override public", "return": "MergeRequest", "signature": "MergeRequest createMergeRequest(MergeRequestConfig config, Resource localCatalog)", "full_signature": "@Override public MergeRequest createMergeRequest(MergeRequestConfig config, Resource localCatalog)", "class_method_signature": "SimpleMergeRequestManager.createMergeRequest(MergeRequestConfig config, Resource localCatalog)", "testcase": false, "constructor": false}, {"identifier": "createMergeRequest", "parameters": "(MergeRequestConfig config, Resource localCatalog,\n                                           RepositoryConnection conn)", "modifiers": "@Override public", "return": "MergeRequest", "signature": "MergeRequest createMergeRequest(MergeRequestConfig config, Resource localCatalog,\n                                           RepositoryConnection conn)", "full_signature": "@Override public MergeRequest createMergeRequest(MergeRequestConfig config, Resource localCatalog,\n                                           RepositoryConnection conn)", "class_method_signature": "SimpleMergeRequestManager.createMergeRequest(MergeRequestConfig config, Resource localCatalog,\n                                           RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "addMergeRequest", "parameters": "(MergeRequest request)", "modifiers": "@Override public", "return": "void", "signature": "void addMergeRequest(MergeRequest request)", "full_signature": "@Override public void addMergeRequest(MergeRequest request)", "class_method_signature": "SimpleMergeRequestManager.addMergeRequest(MergeRequest request)", "testcase": false, "constructor": false}, {"identifier": "addMergeRequest", "parameters": "(MergeRequest request, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void addMergeRequest(MergeRequest request, RepositoryConnection conn)", "full_signature": "@Override public void addMergeRequest(MergeRequest request, RepositoryConnection conn)", "class_method_signature": "SimpleMergeRequestManager.addMergeRequest(MergeRequest request, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getMergeRequest", "parameters": "(Resource requestId)", "modifiers": "@Override public", "return": "Optional<MergeRequest>", "signature": "Optional<MergeRequest> getMergeRequest(Resource requestId)", "full_signature": "@Override public Optional<MergeRequest> getMergeRequest(Resource requestId)", "class_method_signature": "SimpleMergeRequestManager.getMergeRequest(Resource requestId)", "testcase": false, "constructor": false}, {"identifier": "getMergeRequest", "parameters": "(Resource requestId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "Optional<MergeRequest>", "signature": "Optional<MergeRequest> getMergeRequest(Resource requestId, RepositoryConnection conn)", "full_signature": "@Override public Optional<MergeRequest> getMergeRequest(Resource requestId, RepositoryConnection conn)", "class_method_signature": "SimpleMergeRequestManager.getMergeRequest(Resource requestId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "updateMergeRequest", "parameters": "(Resource requestId, MergeRequest request)", "modifiers": "@Override public", "return": "void", "signature": "void updateMergeRequest(Resource requestId, MergeRequest request)", "full_signature": "@Override public void updateMergeRequest(Resource requestId, MergeRequest request)", "class_method_signature": "SimpleMergeRequestManager.updateMergeRequest(Resource requestId, MergeRequest request)", "testcase": false, "constructor": false}, {"identifier": "updateMergeRequest", "parameters": "(Resource requestId, MergeRequest request, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void updateMergeRequest(Resource requestId, MergeRequest request, RepositoryConnection conn)", "full_signature": "@Override public void updateMergeRequest(Resource requestId, MergeRequest request, RepositoryConnection conn)", "class_method_signature": "SimpleMergeRequestManager.updateMergeRequest(Resource requestId, MergeRequest request, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "deleteMergeRequest", "parameters": "(Resource requestId)", "modifiers": "@Override public", "return": "void", "signature": "void deleteMergeRequest(Resource requestId)", "full_signature": "@Override public void deleteMergeRequest(Resource requestId)", "class_method_signature": "SimpleMergeRequestManager.deleteMergeRequest(Resource requestId)", "testcase": false, "constructor": false}, {"identifier": "deleteMergeRequest", "parameters": "(Resource requestId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void deleteMergeRequest(Resource requestId, RepositoryConnection conn)", "full_signature": "@Override public void deleteMergeRequest(Resource requestId, RepositoryConnection conn)", "class_method_signature": "SimpleMergeRequestManager.deleteMergeRequest(Resource requestId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "acceptMergeRequest", "parameters": "(Resource requestId, User user)", "modifiers": "@Override public", "return": "void", "signature": "void acceptMergeRequest(Resource requestId, User user)", "full_signature": "@Override public void acceptMergeRequest(Resource requestId, User user)", "class_method_signature": "SimpleMergeRequestManager.acceptMergeRequest(Resource requestId, User user)", "testcase": false, "constructor": false}, {"identifier": "acceptMergeRequest", "parameters": "(Resource requestId, User user,  RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void acceptMergeRequest(Resource requestId, User user,  RepositoryConnection conn)", "full_signature": "@Override public void acceptMergeRequest(Resource requestId, User user,  RepositoryConnection conn)", "class_method_signature": "SimpleMergeRequestManager.acceptMergeRequest(Resource requestId, User user,  RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "deleteMergeRequestsWithRecordId", "parameters": "(Resource recordId)", "modifiers": "@Override public", "return": "void", "signature": "void deleteMergeRequestsWithRecordId(Resource recordId)", "full_signature": "@Override public void deleteMergeRequestsWithRecordId(Resource recordId)", "class_method_signature": "SimpleMergeRequestManager.deleteMergeRequestsWithRecordId(Resource recordId)", "testcase": false, "constructor": false}, {"identifier": "deleteMergeRequestsWithRecordId", "parameters": "(Resource recordId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void deleteMergeRequestsWithRecordId(Resource recordId, RepositoryConnection conn)", "full_signature": "@Override public void deleteMergeRequestsWithRecordId(Resource recordId, RepositoryConnection conn)", "class_method_signature": "SimpleMergeRequestManager.deleteMergeRequestsWithRecordId(Resource recordId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "cleanMergeRequests", "parameters": "(Resource recordId, Resource branchId)", "modifiers": "@Override public", "return": "void", "signature": "void cleanMergeRequests(Resource recordId, Resource branchId)", "full_signature": "@Override public void cleanMergeRequests(Resource recordId, Resource branchId)", "class_method_signature": "SimpleMergeRequestManager.cleanMergeRequests(Resource recordId, Resource branchId)", "testcase": false, "constructor": false}, {"identifier": "cleanMergeRequests", "parameters": "(Resource recordId, Resource branchId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "void", "signature": "void cleanMergeRequests(Resource recordId, Resource branchId, RepositoryConnection conn)", "full_signature": "@Override public void cleanMergeRequests(Resource recordId, Resource branchId, RepositoryConnection conn)", "class_method_signature": "SimpleMergeRequestManager.cleanMergeRequests(Resource recordId, Resource branchId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "createComment", "parameters": "(Resource requestId, User user, String commentStr)", "modifiers": "@Override public", "return": "Comment", "signature": "Comment createComment(Resource requestId, User user, String commentStr)", "full_signature": "@Override public Comment createComment(Resource requestId, User user, String commentStr)", "class_method_signature": "SimpleMergeRequestManager.createComment(Resource requestId, User user, String commentStr)", "testcase": false, "constructor": false}, {"identifier": "createComment", "parameters": "(Resource requestId, User user, String commentStr, Resource parentCommentId)", "modifiers": "@Override public", "return": "Comment", "signature": "Comment createComment(Resource requestId, User user, String commentStr, Resource parentCommentId)", "full_signature": "@Override public Comment createComment(Resource requestId, User user, String commentStr, Resource parentCommentId)", "class_method_signature": "SimpleMergeRequestManager.createComment(Resource requestId, User user, String commentStr, Resource parentCommentId)", "testcase": false, "constructor": false}, {"identifier": "getComments", "parameters": "(Resource requestId)", "modifiers": "@Override public", "return": "List<List<Comment>>", "signature": "List<List<Comment>> getComments(Resource requestId)", "full_signature": "@Override public List<List<Comment>> getComments(Resource requestId)", "class_method_signature": "SimpleMergeRequestManager.getComments(Resource requestId)", "testcase": false, "constructor": false}, {"identifier": "getComment", "parameters": "(Resource commentId)", "modifiers": "@Override public", "return": "Optional<Comment>", "signature": "Optional<Comment> getComment(Resource commentId)", "full_signature": "@Override public Optional<Comment> getComment(Resource commentId)", "class_method_signature": "SimpleMergeRequestManager.getComment(Resource commentId)", "testcase": false, "constructor": false}, {"identifier": "getComment", "parameters": "(Resource commentId, RepositoryConnection conn)", "modifiers": "@Override public", "return": "Optional<Comment>", "signature": "Optional<Comment> getComment(Resource commentId, RepositoryConnection conn)", "full_signature": "@Override public Optional<Comment> getComment(Resource commentId, RepositoryConnection conn)", "class_method_signature": "SimpleMergeRequestManager.getComment(Resource commentId, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "updateComment", "parameters": "(Resource commentId, Comment comment)", "modifiers": "@Override public", "return": "void", "signature": "void updateComment(Resource commentId, Comment comment)", "full_signature": "@Override public void updateComment(Resource commentId, Comment comment)", "class_method_signature": "SimpleMergeRequestManager.updateComment(Resource commentId, Comment comment)", "testcase": false, "constructor": false}, {"identifier": "deleteComment", "parameters": "(Resource commentId)", "modifiers": "@Override public", "return": "void", "signature": "void deleteComment(Resource commentId)", "full_signature": "@Override public void deleteComment(Resource commentId)", "class_method_signature": "SimpleMergeRequestManager.deleteComment(Resource commentId)", "testcase": false, "constructor": false}, {"identifier": "deleteCommentsWithRequestId", "parameters": "(Resource requestId)", "modifiers": "@Override public", "return": "void", "signature": "void deleteCommentsWithRequestId(Resource requestId)", "full_signature": "@Override public void deleteCommentsWithRequestId(Resource requestId)", "class_method_signature": "SimpleMergeRequestManager.deleteCommentsWithRequestId(Resource requestId)", "testcase": false, "constructor": false}, {"identifier": "getBranchTitle", "parameters": "(Branch branch)", "modifiers": "private", "return": "String", "signature": "String getBranchTitle(Branch branch)", "full_signature": "private String getBranchTitle(Branch branch)", "class_method_signature": "SimpleMergeRequestManager.getBranchTitle(Branch branch)", "testcase": false, "constructor": false}, {"identifier": "getBranchHead", "parameters": "(Branch branch)", "modifiers": "private", "return": "Resource", "signature": "Resource getBranchHead(Branch branch)", "full_signature": "private Resource getBranchHead(Branch branch)", "class_method_signature": "SimpleMergeRequestManager.getBranchHead(Branch branch)", "testcase": false, "constructor": false}], "file": "com.mobi.catalog.impl/src/main/java/com/mobi/catalog/impl/mergerequest/SimpleMergeRequestManager.java"}, "focal_method": {"identifier": "acceptMergeRequest", "parameters": "(Resource requestId, User user)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void acceptMergeRequest(Resource requestId, User user) {\n        try (RepositoryConnection conn = configProvider.getRepository().getConnection()) {\n            acceptMergeRequest(requestId, user, conn);\n        }\n    }", "signature": "void acceptMergeRequest(Resource requestId, User user)", "full_signature": "@Override public void acceptMergeRequest(Resource requestId, User user)", "class_method_signature": "SimpleMergeRequestManager.acceptMergeRequest(Resource requestId, User user)", "testcase": false, "constructor": false, "invocations": ["getConnection", "getRepository", "acceptMergeRequest"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}