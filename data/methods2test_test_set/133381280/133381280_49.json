{"test_class": {"identifier": "TagSetTest", "superclass": "", "interfaces": "", "fields": [], "file": "client/lookout-api/src/test/java/com/alipay/lookout/api/TagSetTest.java"}, "test_case": {"identifier": "testAddAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddAll() {\n        TagSet raw = new TagSet(new TreeMap<String, Tag>());\n        TagSet ts1 = raw.add(new BasicTag(\"k1\", \"k1\")).addAll(new Tag[] {})\n            .addAll(new ArrayList<Tag>()).addAll(new HashMap<String, String>());\n        System.out.println(ts1);\n        Assert.assertEquals(\"[k1=k1]\", ts1.toString());\n        Tag tag1 = new BasicTag(\"k1\", \"v1\");\n        Tag tag2 = new BasicTag(\"k2\", \"v2\");\n        Tag tag3 = new BasicTag(\"k3\", \"v3\");\n        Map<String, String> map = Maps.newTreeMap();\n        map.put(\"k3\", \"v33\");\n        map.put(\"k4\", \"v4\");\n        TagSet ts2 = raw.addAll(new Tag[] { tag1, tag2 })\n            .addAll(Lists.<Tag> newArrayList(tag2, tag3)).addAll(map);\n        System.out.println(ts2.toString());\n        Assert.assertEquals(\"[k1=v1, k2=v2, k3=v33, k4=v4]\", ts2.toString());\n\n    }", "signature": "void testAddAll()", "full_signature": "@Test public void testAddAll()", "class_method_signature": "TagSetTest.testAddAll()", "testcase": true, "constructor": false, "invocations": ["addAll", "addAll", "addAll", "add", "println", "assertEquals", "toString", "newTreeMap", "put", "put", "addAll", "addAll", "addAll", "newArrayList", "println", "toString", "assertEquals", "toString"]}, "focal_class": {"identifier": "TagSet", "superclass": "", "interfaces": "implements Iterable<Tag>", "fields": [{"original_string": "private final TreeMap<String, Tag> tags;", "modifier": "private final", "type": "TreeMap<String, Tag>", "declarator": "tags", "var_name": "tags"}, {"original_string": "static final TagSet                EMPTY = new TagSet(new TreeMap<String, Tag>());", "modifier": "static final", "type": "TagSet", "declarator": "EMPTY = new TagSet(new TreeMap<String, Tag>())", "var_name": "EMPTY"}], "methods": [{"identifier": "create", "parameters": "(Iterable<Tag> tags)", "modifiers": "static", "return": "TagSet", "signature": "TagSet create(Iterable<Tag> tags)", "full_signature": "static TagSet create(Iterable<Tag> tags)", "class_method_signature": "TagSet.create(Iterable<Tag> tags)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Map<String, String> tags)", "modifiers": "static", "return": "TagSet", "signature": "TagSet create(Map<String, String> tags)", "full_signature": "static TagSet create(Map<String, String> tags)", "class_method_signature": "TagSet.create(Map<String, String> tags)", "testcase": false, "constructor": false}, {"identifier": "TagSet", "parameters": "(TreeMap<String, Tag> tags)", "modifiers": "public", "return": "", "signature": " TagSet(TreeMap<String, Tag> tags)", "full_signature": "public  TagSet(TreeMap<String, Tag> tags)", "class_method_signature": "TagSet.TagSet(TreeMap<String, Tag> tags)", "testcase": false, "constructor": true}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Tag>", "signature": "Iterator<Tag> iterator()", "full_signature": "@Override public Iterator<Tag> iterator()", "class_method_signature": "TagSet.iterator()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": " boolean isEmpty()", "class_method_signature": "TagSet.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(String k, String v)", "modifiers": "", "return": "TagSet", "signature": "TagSet add(String k, String v)", "full_signature": " TagSet add(String k, String v)", "class_method_signature": "TagSet.add(String k, String v)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Tag tag)", "modifiers": "", "return": "TagSet", "signature": "TagSet add(Tag tag)", "full_signature": " TagSet add(Tag tag)", "class_method_signature": "TagSet.add(Tag tag)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(Iterable<Tag> ts)", "modifiers": "", "return": "TagSet", "signature": "TagSet addAll(Iterable<Tag> ts)", "full_signature": " TagSet addAll(Iterable<Tag> ts)", "class_method_signature": "TagSet.addAll(Iterable<Tag> ts)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(Map<String, String> ts)", "modifiers": "", "return": "TagSet", "signature": "TagSet addAll(Map<String, String> ts)", "full_signature": " TagSet addAll(Map<String, String> ts)", "class_method_signature": "TagSet.addAll(Map<String, String> ts)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(String[] ts)", "modifiers": "", "return": "TagSet", "signature": "TagSet addAll(String[] ts)", "full_signature": " TagSet addAll(String[] ts)", "class_method_signature": "TagSet.addAll(String[] ts)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(Tag[] ts)", "modifiers": "", "return": "TagSet", "signature": "TagSet addAll(Tag[] ts)", "full_signature": " TagSet addAll(Tag[] ts)", "class_method_signature": "TagSet.addAll(Tag[] ts)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "TagSet.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TagSet.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TagSet.toString()", "testcase": false, "constructor": false}], "file": "client/lookout-api/src/main/java/com/alipay/lookout/api/TagSet.java"}, "focal_method": {"identifier": "addAll", "parameters": "(Iterable<Tag> ts)", "modifiers": "", "return": "TagSet", "body": "TagSet addAll(Iterable<Tag> ts) {\n        if (ts instanceof TagSet) {\n            TagSet data = (TagSet) ts;\n            return addAll(data.tags.values());\n        }\n        Iterator<Tag> it = ts.iterator();\n        TreeMap<String, Tag> newTags = new TreeMap<String, Tag>(tags);\n        while (it.hasNext()) {\n            BasicTag tag = BasicTag.of(it.next());\n            newTags.put(tag.key(), tag);\n        }\n        return new TagSet(newTags);\n    }", "signature": "TagSet addAll(Iterable<Tag> ts)", "full_signature": " TagSet addAll(Iterable<Tag> ts)", "class_method_signature": "TagSet.addAll(Iterable<Tag> ts)", "testcase": false, "constructor": false, "invocations": ["addAll", "values", "iterator", "hasNext", "of", "next", "put", "key"]}, "repository": {"repo_id": 133381280, "url": "https://github.com/sofastack/sofa-lookout", "language": "Java", "is_fork": false, "fork_count": 113, "stargazer_count": 318, "size": 1394, "license": "licensed"}}