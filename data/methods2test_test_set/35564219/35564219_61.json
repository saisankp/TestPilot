{"test_class": {"identifier": "CircularDrawableTest", "superclass": "extends RobolectricTest", "interfaces": "", "fields": [], "file": "library/src/test/java/com/climate/mirage/targets/drawables/CircularDrawableTest.java"}, "test_case": {"identifier": "testCorrectOpacity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCorrectOpacity() {\n        Bitmap bitmap = Bitmap.createBitmap(100, 200, Bitmap.Config.ARGB_8888);\n        CircularDrawable drawable = new CircularDrawable(bitmap);\n        Assert.assertEquals(PixelFormat.TRANSLUCENT, drawable.getOpacity());\n    }", "signature": "void testCorrectOpacity()", "full_signature": "@Test public void testCorrectOpacity()", "class_method_signature": "CircularDrawableTest.testCorrectOpacity()", "testcase": true, "constructor": false, "invocations": ["createBitmap", "assertEquals", "getOpacity"]}, "focal_class": {"identifier": "CircularDrawable", "superclass": "extends Drawable", "interfaces": "", "fields": [{"original_string": "private Bitmap bitmap;", "modifier": "private", "type": "Bitmap", "declarator": "bitmap", "var_name": "bitmap"}, {"original_string": "private Paint paint;", "modifier": "private", "type": "Paint", "declarator": "paint", "var_name": "paint"}, {"original_string": "private BitmapShader shader;", "modifier": "private", "type": "BitmapShader", "declarator": "shader", "var_name": "shader"}, {"original_string": "private Matrix matrix;", "modifier": "private", "type": "Matrix", "declarator": "matrix", "var_name": "matrix"}, {"original_string": "private float centerX;", "modifier": "private", "type": "float", "declarator": "centerX", "var_name": "centerX"}, {"original_string": "private float centerY;", "modifier": "private", "type": "float", "declarator": "centerY", "var_name": "centerY"}, {"original_string": "private float diameter;", "modifier": "private", "type": "float", "declarator": "diameter", "var_name": "diameter"}, {"original_string": "private Paint borderPaint;", "modifier": "private", "type": "Paint", "declarator": "borderPaint", "var_name": "borderPaint"}, {"original_string": "private boolean useBorder = false;", "modifier": "private", "type": "boolean", "declarator": "useBorder = false", "var_name": "useBorder"}], "methods": [{"identifier": "CircularDrawable", "parameters": "(Bitmap bitmap)", "modifiers": "public", "return": "", "signature": " CircularDrawable(Bitmap bitmap)", "full_signature": "public  CircularDrawable(Bitmap bitmap)", "class_method_signature": "CircularDrawable.CircularDrawable(Bitmap bitmap)", "testcase": false, "constructor": true}, {"identifier": "CircularDrawable", "parameters": "(Bitmap bitmap, float explicitDiameter)", "modifiers": "public", "return": "", "signature": " CircularDrawable(Bitmap bitmap, float explicitDiameter)", "full_signature": "public  CircularDrawable(Bitmap bitmap, float explicitDiameter)", "class_method_signature": "CircularDrawable.CircularDrawable(Bitmap bitmap, float explicitDiameter)", "testcase": false, "constructor": true}, {"identifier": "getDiameter", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getDiameter()", "full_signature": "public float getDiameter()", "class_method_signature": "CircularDrawable.getDiameter()", "testcase": false, "constructor": false}, {"identifier": "setBorder", "parameters": "(float borderWidth, int borderColor)", "modifiers": "public", "return": "void", "signature": "void setBorder(float borderWidth, int borderColor)", "full_signature": "public void setBorder(float borderWidth, int borderColor)", "class_method_signature": "CircularDrawable.setBorder(float borderWidth, int borderColor)", "testcase": false, "constructor": false}, {"identifier": "clearBorder", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearBorder()", "full_signature": "public void clearBorder()", "class_method_signature": "CircularDrawable.clearBorder()", "testcase": false, "constructor": false}, {"identifier": "onBoundsChange", "parameters": "(Rect bounds)", "modifiers": "@Override protected", "return": "void", "signature": "void onBoundsChange(Rect bounds)", "full_signature": "@Override protected void onBoundsChange(Rect bounds)", "class_method_signature": "CircularDrawable.onBoundsChange(Rect bounds)", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(Canvas canvas)", "modifiers": "@Override public", "return": "void", "signature": "void draw(Canvas canvas)", "full_signature": "@Override public void draw(Canvas canvas)", "class_method_signature": "CircularDrawable.draw(Canvas canvas)", "testcase": false, "constructor": false}, {"identifier": "getOpacity", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getOpacity()", "full_signature": "@Override public int getOpacity()", "class_method_signature": "CircularDrawable.getOpacity()", "testcase": false, "constructor": false}, {"identifier": "setAlpha", "parameters": "(int alpha)", "modifiers": "@Override public", "return": "void", "signature": "void setAlpha(int alpha)", "full_signature": "@Override public void setAlpha(int alpha)", "class_method_signature": "CircularDrawable.setAlpha(int alpha)", "testcase": false, "constructor": false}, {"identifier": "setColorFilter", "parameters": "(ColorFilter cf)", "modifiers": "@Override public", "return": "void", "signature": "void setColorFilter(ColorFilter cf)", "full_signature": "@Override public void setColorFilter(ColorFilter cf)", "class_method_signature": "CircularDrawable.setColorFilter(ColorFilter cf)", "testcase": false, "constructor": false}, {"identifier": "getIntrinsicHeight", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getIntrinsicHeight()", "full_signature": "@Override public int getIntrinsicHeight()", "class_method_signature": "CircularDrawable.getIntrinsicHeight()", "testcase": false, "constructor": false}, {"identifier": "getIntrinsicWidth", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getIntrinsicWidth()", "full_signature": "@Override public int getIntrinsicWidth()", "class_method_signature": "CircularDrawable.getIntrinsicWidth()", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/climate/mirage/targets/drawables/CircularDrawable.java"}, "focal_method": {"identifier": "getOpacity", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n\tpublic int getOpacity() {\n\t\treturn PixelFormat.TRANSLUCENT;\n\t}", "signature": "int getOpacity()", "full_signature": "@Override public int getOpacity()", "class_method_signature": "CircularDrawable.getOpacity()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 35564219, "url": "https://github.com/TheClimateCorporation/mirage", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 8, "size": 3928, "license": "licensed"}}