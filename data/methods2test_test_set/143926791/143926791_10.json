{"test_class": {"identifier": "PortfolioServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "MockMvc mockMvc;", "modifier": "", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "@InjectMocks\n\tPortfolioService service;", "modifier": "@InjectMocks", "type": "PortfolioService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n\tOrderRepository repo;", "modifier": "@Mock", "type": "OrderRepository", "declarator": "repo", "var_name": "repo"}, {"original_string": "@Mock\n\tRestTemplate restTemplate;", "modifier": "@Mock", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}, {"original_string": "@Mock\n\tQuoteRemoteCallService quoteService;", "modifier": "@Mock", "type": "QuoteRemoteCallService", "declarator": "quoteService", "var_name": "quoteService"}, {"original_string": "@Mock\n\tPortfolioRepositoryService portfolioRepositoryService;", "modifier": "@Mock", "type": "PortfolioRepositoryService", "declarator": "portfolioRepositoryService", "var_name": "portfolioRepositoryService"}, {"original_string": "@Mock\n\tTracer tracer;", "modifier": "@Mock", "type": "Tracer", "declarator": "tracer", "var_name": "tracer"}, {"original_string": "Tracing clientTracing = Tracing.newBuilder()\n\t\t\t.localServiceName(\"client\")\n\t\t\t.build();", "modifier": "", "type": "Tracing", "declarator": "clientTracing = Tracing.newBuilder()\n\t\t\t.localServiceName(\"client\")\n\t\t\t.build()", "var_name": "clientTracing"}], "file": "portfolio-service/src/test/java/io/pivotal/portfolio/service/PortfolioServiceTest.java"}, "test_case": {"identifier": "doSaveOrderNullOrderFee", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void doSaveOrderNullOrderFee() {\n\t\tOrder returnOrder = ServiceTestConfiguration.order();\n\t\treturnOrder.setOrderId(1);\n\t\tdouble amount = returnOrder.getQuantity()*returnOrder.getPrice().doubleValue()+returnOrder.getOrderFee().doubleValue();\n\t\tResponseEntity<String> response = new ResponseEntity<String>(\"SUCCESS\", HttpStatus.OK);\n\t\t\n\t\t\n\t\t//when(accountService.getUri()).thenReturn(uri);\n\t\twhen(restTemplate.postForEntity(eq(service.downstreamProtocol + \"://\" + service.accountsService +\"/accounts/transaction\"), any(), eq(String.class))).thenReturn(response);\n\t\twhen(repo.save(isA(Order.class))).thenReturn(returnOrder);\n\t\tOrder requestOrder = ServiceTestConfiguration.order();\n\t\trequestOrder.setOrderFee(null);\n\t\tOrder order = service.addOrder(requestOrder);\n\t\tassertEquals(order.getOrderFee(), ServiceTestConfiguration.order().getOrderFee());\n\t}", "signature": "void doSaveOrderNullOrderFee()", "full_signature": "@Test public void doSaveOrderNullOrderFee()", "class_method_signature": "PortfolioServiceTest.doSaveOrderNullOrderFee()", "testcase": true, "constructor": false, "invocations": ["order", "setOrderId", "getQuantity", "doubleValue", "getPrice", "doubleValue", "getOrderFee", "thenReturn", "when", "postForEntity", "eq", "any", "eq", "thenReturn", "when", "save", "isA", "order", "setOrderFee", "addOrder", "assertEquals", "getOrderFee", "getOrderFee", "order"]}, "focal_class": {"identifier": "PortfolioService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory\n\t\t\t.getLogger(PortfolioService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory\n\t\t\t.getLogger(PortfolioService.class)", "var_name": "logger"}, {"original_string": "@Autowired\n\tOrderRepository repository;", "modifier": "@Autowired", "type": "OrderRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Value(\"${pivotal.downstream-protocol:http}\")\n\tprotected String downstreamProtocol;", "modifier": "@Value(\"${pivotal.downstream-protocol:http}\")\n\tprotected", "type": "String", "declarator": "downstreamProtocol", "var_name": "downstreamProtocol"}, {"original_string": "@Autowired\n\tQuoteRemoteCallService quoteService;", "modifier": "@Autowired", "type": "QuoteRemoteCallService", "declarator": "quoteService", "var_name": "quoteService"}, {"original_string": "@Autowired\n\t@LoadBalanced\n\tprivate RestTemplate restTemplate;", "modifier": "@Autowired\n\t@LoadBalanced\n\tprivate", "type": "RestTemplate", "declarator": "restTemplate", "var_name": "restTemplate"}, {"original_string": "@Autowired\n\tprivate PortfolioRepositoryService portfolioRepositoryService;", "modifier": "@Autowired\n\tprivate", "type": "PortfolioRepositoryService", "declarator": "portfolioRepositoryService", "var_name": "portfolioRepositoryService"}, {"original_string": "@Value(\"${pivotal.accountsService.name}\")\n\tprotected String accountsService;", "modifier": "@Value(\"${pivotal.accountsService.name}\")\n\tprotected", "type": "String", "declarator": "accountsService", "var_name": "accountsService"}], "methods": [{"identifier": "getPortfolio", "parameters": "(String userId)", "modifiers": "public", "return": "Portfolio", "signature": "Portfolio getPortfolio(String userId)", "full_signature": "public Portfolio getPortfolio(String userId)", "class_method_signature": "PortfolioService.getPortfolio(String userId)", "testcase": false, "constructor": false}, {"identifier": "createPortfolio", "parameters": "(Portfolio portfolio, List<Order> orders)", "modifiers": "private", "return": "Portfolio", "signature": "Portfolio createPortfolio(Portfolio portfolio, List<Order> orders)", "full_signature": "private Portfolio createPortfolio(Portfolio portfolio, List<Order> orders)", "class_method_signature": "PortfolioService.createPortfolio(Portfolio portfolio, List<Order> orders)", "testcase": false, "constructor": false}, {"identifier": "addOrder", "parameters": "(Order order)", "modifiers": "@Transactional public", "return": "Order", "signature": "Order addOrder(Order order)", "full_signature": "@Transactional public Order addOrder(Order order)", "class_method_signature": "PortfolioService.addOrder(Order order)", "testcase": false, "constructor": false}], "file": "portfolio-service/src/main/java/io/pivotal/portfolio/service/PortfolioService.java"}, "focal_method": {"identifier": "addOrder", "parameters": "(Order order)", "modifiers": "@Transactional public", "return": "Order", "body": "@Transactional\n\tpublic Order addOrder(Order order) {\n\t\tlogger.debug(\"Adding order: \" + order);\n\t\tif (order.getOrderFee() == null) {\n\t\t\torder.setOrderFee(Order.DEFAULT_ORDER_FEE);\n\t\t\tlogger.debug(\"Adding Fee to order: \" + order);\n\t\t}\n\t\tTransaction transaction = new Transaction();\n\t\t\n\t\tif (order.getOrderType().equals(OrderType.BUY)) {\n\t\t\tdouble amount = order.getQuantity()\n\t\t\t\t\t* order.getPrice().doubleValue()\n\t\t\t\t\t+ order.getOrderFee().doubleValue();\n\t\t\t\n\t\t\ttransaction.setAccountId(order.getAccountId());\n\t\t\ttransaction.setAmount(BigDecimal.valueOf(amount));\n\t\t\ttransaction.setCurrency(order.getCurrency());\n\t\t\ttransaction.setDate(order.getCompletionDate());\n\t\t\ttransaction.setDescription(order.toString());\n\t\t\ttransaction.setType(TransactionType.DEBIT);\n\t\t\t\n\t\t} else if (order.getOrderType().equals(OrderType.SELL)){\n\t\t\tdouble amount = order.getQuantity()\n\t\t\t\t\t* order.getPrice().doubleValue()\n\t\t\t\t\t- order.getOrderFee().doubleValue();\n\t\t\t\n\t\t\ttransaction.setAccountId(order.getAccountId());\n\t\t\ttransaction.setAmount(BigDecimal.valueOf(amount));\n\t\t\ttransaction.setCurrency(order.getCurrency());\n\t\t\ttransaction.setDate(order.getCompletionDate());\n\t\t\ttransaction.setDescription(order.toString());\n\t\t\ttransaction.setType(TransactionType.CREDIT);\n\t\t\t\n\t\t}\n\t\t\n\t\tResponseEntity<String> result = restTemplate.postForEntity(downstreamProtocol + \"://\"\n\t\t\t\t+ accountsService\n\t\t\t\t+ \"/accounts/transaction\",\n\t\t\t\ttransaction, String.class);\n\t\t\n\t\tif (result.getStatusCode() == HttpStatus.OK) {\n\t\t\tlogger.info(String\n\t\t\t\t\t.format(\"Account funds updated successfully for account: %s and new funds are: %s\",\n\t\t\t\t\t\t\torder.getAccountId(), result.getBody()));\n\t\t\treturn repository.save(order);\n\t\t\t\n\t\t} else {\n\t\t\t// TODO: throw exception - not enough funds!\n\t\t\t// SK - Whats the expected behaviour?\n\t\t\tlogger.warn(\"PortfolioService:addOrder - decreasing balance HTTP not ok: \");\n\t\t\treturn null;\n\t\t}\n\n\t}", "signature": "Order addOrder(Order order)", "full_signature": "@Transactional public Order addOrder(Order order)", "class_method_signature": "PortfolioService.addOrder(Order order)", "testcase": false, "constructor": false, "invocations": ["debug", "getOrderFee", "setOrderFee", "debug", "equals", "getOrderType", "getQuantity", "doubleValue", "getPrice", "doubleValue", "getOrderFee", "setAccountId", "getAccountId", "setAmount", "valueOf", "setCurrency", "getCurrency", "setDate", "getCompletionDate", "setDescription", "toString", "setType", "equals", "getOrderType", "getQuantity", "doubleValue", "getPrice", "doubleValue", "getOrderFee", "setAccountId", "getAccountId", "setAmount", "valueOf", "setCurrency", "getCurrency", "setDate", "getCompletionDate", "setDescription", "toString", "setType", "postForEntity", "getStatusCode", "info", "format", "getAccountId", "getBody", "save", "warn"]}, "repository": {"repo_id": 143926791, "url": "https://github.com/Pivotal-Field-Engineering/pivotal-bank-demo", "language": "Java", "is_fork": false, "fork_count": 48, "stargazer_count": 35, "size": 45556, "license": "licensed"}}