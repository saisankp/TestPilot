{"test_class": {"identifier": "GlobalLauncherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String YAML_TEST_FILE\t\t    \t= \"src\" + File.separator + \"test\" + File.separator + \"resources\" + File.separator + \"footballPlayers.yaml\" ;", "modifier": "private static final", "type": "String", "declarator": "YAML_TEST_FILE\t\t    \t= \"src\" + File.separator + \"test\" + File.separator + \"resources\" + File.separator + \"footballPlayers.yaml\"", "var_name": "YAML_TEST_FILE"}, {"original_string": "private static final String CMD_LINE_YAML_FILE_PATH \t= \"-f \" + YAML_TEST_FILE ;", "modifier": "private static final", "type": "String", "declarator": "CMD_LINE_YAML_FILE_PATH \t= \"-f \" + YAML_TEST_FILE", "var_name": "CMD_LINE_YAML_FILE_PATH"}, {"original_string": "private static final String CMD_LINE_CODEGEN_OUTPUT_DIR = \"-o target\" ;", "modifier": "private static final", "type": "String", "declarator": "CMD_LINE_CODEGEN_OUTPUT_DIR = \"-o target\"", "var_name": "CMD_LINE_CODEGEN_OUTPUT_DIR"}, {"original_string": "private static final String CMD_LINE_PARSER_TYPE\t    = \"-p example\" ;", "modifier": "private static final", "type": "String", "declarator": "CMD_LINE_PARSER_TYPE\t    = \"-p example\"", "var_name": "CMD_LINE_PARSER_TYPE"}], "file": "core/src/test/java/com/bbva/kltt/apirest/core/launcher/GlobalLauncherTest.java"}, "test_case": {"identifier": "fullTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void fullTest()\n\t{\n\t\ttry\n\t\t{\n\t\t\tString[] commandLine = new String[]{CMD_LINE_YAML_FILE_PATH, CMD_LINE_CODEGEN_OUTPUT_DIR, CMD_LINE_PARSER_TYPE} ;\n\t\t\t\n\t\t\tfinal GlobalLauncher globalLauncher = new GlobalLauncher() ;\n\t\t\t\n\t\t\tglobalLauncher.launch(commandLine, \"example\", \"GeneratorGlobalExample\") ;\n\t\t}\n\t\tcatch (APIRestGeneratorException apiRestGeneratorExc)\n\t\t{\n\t\t\tAssert.fail(apiRestGeneratorExc.getMessage()) ;\n\t\t}\n\t}", "signature": "void fullTest()", "full_signature": "@Test public void fullTest()", "class_method_signature": "GlobalLauncherTest.fullTest()", "testcase": true, "constructor": false, "invocations": ["launch", "fail", "getMessage"]}, "focal_class": {"identifier": "GlobalLauncher", "superclass": "", "interfaces": "implements ILauncher", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(GlobalLauncher.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(GlobalLauncher.class)", "var_name": "LOGGER"}, {"original_string": "private final Option specificationFilePathOption = new Option(ConstantsLauncher.FILE_PATH_FLAG,\n                                                                  ConstantsLauncher.FILE_PATH_EXTE_FLAG,\n                                                                  true,\n                                                                  ConstantsLauncher.FILE_PATH_DESCRIP);", "modifier": "private final", "type": "Option", "declarator": "specificationFilePathOption = new Option(ConstantsLauncher.FILE_PATH_FLAG,\n                                                                  ConstantsLauncher.FILE_PATH_EXTE_FLAG,\n                                                                  true,\n                                                                  ConstantsLauncher.FILE_PATH_DESCRIP)", "var_name": "specificationFilePathOption"}, {"original_string": "private final Option codeGenOutputDirectoryOption = new Option(ConstantsLauncher.CODE_GEN_OUT_DIR_FLAG,\n                                                                   ConstantsLauncher.CODE_GEN_OUT_DIR_EXTE_FLAG,\n                                                                   true,\n                                                                   ConstantsLauncher.CODE_GEN_OUT_DIR_DESCRIP);", "modifier": "private final", "type": "Option", "declarator": "codeGenOutputDirectoryOption = new Option(ConstantsLauncher.CODE_GEN_OUT_DIR_FLAG,\n                                                                   ConstantsLauncher.CODE_GEN_OUT_DIR_EXTE_FLAG,\n                                                                   true,\n                                                                   ConstantsLauncher.CODE_GEN_OUT_DIR_DESCRIP)", "var_name": "codeGenOutputDirectoryOption"}, {"original_string": "private final Option parserTypeOption \t\t\t  = new Option(ConstantsLauncher.PARSER_TYPE_FLAG,\n                                                                   ConstantsLauncher.PARSER_TYPE_EXTE_FLAG,\n                                                                   true,\n                                                                   ConstantsLauncher.PARSER_TYPE_DESCRIP);", "modifier": "private final", "type": "Option", "declarator": "parserTypeOption \t\t\t  = new Option(ConstantsLauncher.PARSER_TYPE_FLAG,\n                                                                   ConstantsLauncher.PARSER_TYPE_EXTE_FLAG,\n                                                                   true,\n                                                                   ConstantsLauncher.PARSER_TYPE_DESCRIP)", "var_name": "parserTypeOption"}, {"original_string": "private CommandLine commandLine;", "modifier": "private", "type": "CommandLine", "declarator": "commandLine", "var_name": "commandLine"}], "methods": [{"identifier": "launch", "parameters": "(final String[] cmdArgs, final String moduleName, final String className)", "modifiers": "public", "return": "void", "signature": "void launch(final String[] cmdArgs, final String moduleName, final String className)", "full_signature": "public void launch(final String[] cmdArgs, final String moduleName, final String className)", "class_method_signature": "GlobalLauncher.launch(final String[] cmdArgs, final String moduleName, final String className)", "testcase": false, "constructor": false}, {"identifier": "parseAndValidateCommandLine", "parameters": "(final String[] args)", "modifiers": "private", "return": "void", "signature": "void parseAndValidateCommandLine(final String[] args)", "full_signature": "private void parseAndValidateCommandLine(final String[] args)", "class_method_signature": "GlobalLauncher.parseAndValidateCommandLine(final String[] args)", "testcase": false, "constructor": false}, {"identifier": "addCommonCommandLineOptions", "parameters": "(final Options options)", "modifiers": "private", "return": "void", "signature": "void addCommonCommandLineOptions(final Options options)", "full_signature": "private void addCommonCommandLineOptions(final Options options)", "class_method_signature": "GlobalLauncher.addCommonCommandLineOptions(final Options options)", "testcase": false, "constructor": false}, {"identifier": "validateCommandLineArguments", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void validateCommandLineArguments()", "full_signature": "private void validateCommandLineArguments()", "class_method_signature": "GlobalLauncher.validateCommandLineArguments()", "testcase": false, "constructor": false}, {"identifier": "applyCommonParameters", "parameters": "(final GenerationParameters genParams)", "modifiers": "private", "return": "void", "signature": "void applyCommonParameters(final GenerationParameters genParams)", "full_signature": "private void applyCommonParameters(final GenerationParameters genParams)", "class_method_signature": "GlobalLauncher.applyCommonParameters(final GenerationParameters genParams)", "testcase": false, "constructor": false}, {"identifier": "getCmdStringOption", "parameters": "(final Option option)", "modifiers": "protected", "return": "String", "signature": "String getCmdStringOption(final Option option)", "full_signature": "protected String getCmdStringOption(final Option option)", "class_method_signature": "GlobalLauncher.getCmdStringOption(final Option option)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/bbva/kltt/apirest/core/launcher/GlobalLauncher.java"}, "focal_method": {"identifier": "launch", "parameters": "(final String[] cmdArgs, final String moduleName, final String className)", "modifiers": "public", "return": "void", "body": "public void launch(final String[] cmdArgs, final String moduleName, final String className) throws APIRestGeneratorException\n    {\n        final GenerationParameters genParams      = new GenerationParameters();\n\n        // Parse the command line arguments\n        this.parseAndValidateCommandLine(cmdArgs);\n\n        // Apply the common parameters to the parsed information\n        this.applyCommonParameters(genParams);\n\n        // Get the schemas parser and parse the information\n        final ParsedInfo parsedInfo               = ParserUtil.getSchemasParser(genParams).parse();\n\n        // Create an instance of ParsedInfoHandler to control the calls\n        final ParsedInfoHandler parsedInfoHandler = new ParsedInfoHandler(parsedInfo);\n\n        // Create and run the global generator\n        final GeneratorGlobal generator           = new GeneratorGlobal(genParams, parsedInfoHandler);\n\n        // Run the generation\n        generator.start(moduleName, className);\n\n    }", "signature": "void launch(final String[] cmdArgs, final String moduleName, final String className)", "full_signature": "public void launch(final String[] cmdArgs, final String moduleName, final String className)", "class_method_signature": "GlobalLauncher.launch(final String[] cmdArgs, final String moduleName, final String className)", "testcase": false, "constructor": false, "invocations": ["parseAndValidateCommandLine", "applyCommonParameters", "parse", "getSchemasParser", "start"]}, "repository": {"repo_id": 74581177, "url": "https://github.com/BBVA-CIB/APIRestGenerator", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 147303, "license": "licensed"}}