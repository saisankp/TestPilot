{"test_class": {"identifier": "CarTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Validator validator;", "modifier": "private static", "type": "Validator", "declarator": "validator", "var_name": "validator"}, {"original_string": "private CurrencyUnit usd = Monetary.getCurrency(Locale.US);", "modifier": "private", "type": "CurrencyUnit", "declarator": "usd = Monetary.getCurrency(Locale.US)", "var_name": "usd"}], "file": "artemis-demo-java-se/bean-validation/src/test/java/org/jnosql/artemis/demo/se/parking/CarTest.java"}, "test_case": {"identifier": "shouldReturnErrorWhenCarFancy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnErrorWhenCarFancy() {\n        Car ferrari = Car.builder().withPlate(\"BRL-1234\")\n                .withModel(\"ferrari\")\n                .withPrice(Money.of(1_0000_000_000L, usd))\n                .build();\n\n        Set<ConstraintViolation<Car>> validate = validator.validate(ferrari);\n        assertFalse(validate.isEmpty());\n        String message = validate.stream().findFirst()\n                .map(ConstraintViolation::getMessageTemplate)\n                .orElse(null);\n        assertEquals(\"The parking does not support fancy car\", message);\n\n    }", "signature": "void shouldReturnErrorWhenCarFancy()", "full_signature": "@Test public void shouldReturnErrorWhenCarFancy()", "class_method_signature": "CarTest.shouldReturnErrorWhenCarFancy()", "testcase": true, "constructor": false, "invocations": ["build", "withPrice", "withModel", "withPlate", "builder", "of", "validate", "assertFalse", "isEmpty", "orElse", "map", "findFirst", "stream", "assertEquals"]}, "focal_class": {"identifier": "Car", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Column\n    @NotNull\n    @Pattern(regexp = \"[A-Z]{3}-[0-9]{4}\", message = \"Invalid car plate\")\n    private String plate;", "modifier": "@Column\n    @NotNull\n    @Pattern(regexp = \"[A-Z]{3}-[0-9]{4}\", message = \"Invalid car plate\")\n    private", "type": "String", "declarator": "plate", "var_name": "plate"}, {"original_string": "@Column\n    @NotNull\n    @MonetaryMin(value = \"100\", message = \"There is not car cheap like that\")\n    @MonetaryMax(value = \"1000000\", message = \"The parking does not support fancy car\")\n    @CurrencyAccepted(currencies = \"USD\", message = \"The car price must work with USD\")\n    @Convert(MonetaryAmountConverter.class)\n    private MonetaryAmount price;", "modifier": "@Column\n    @NotNull\n    @MonetaryMin(value = \"100\", message = \"There is not car cheap like that\")\n    @MonetaryMax(value = \"1000000\", message = \"The parking does not support fancy car\")\n    @CurrencyAccepted(currencies = \"USD\", message = \"The car price must work with USD\")\n    @Convert(MonetaryAmountConverter.class)\n    private", "type": "MonetaryAmount", "declarator": "price", "var_name": "price"}, {"original_string": "@Column\n    @NotBlank\n    private String model;", "modifier": "@Column\n    @NotBlank\n    private", "type": "String", "declarator": "model", "var_name": "model"}, {"original_string": "@Column\n    @NotBlank\n    private String color;", "modifier": "@Column\n    @NotBlank\n    private", "type": "String", "declarator": "color", "var_name": "color"}], "methods": [{"identifier": "Car", "parameters": "(String plate, MonetaryAmount price, String model, String color)", "modifiers": "private", "return": "", "signature": " Car(String plate, MonetaryAmount price, String model, String color)", "full_signature": "private  Car(String plate, MonetaryAmount price, String model, String color)", "class_method_signature": "Car.Car(String plate, MonetaryAmount price, String model, String color)", "testcase": false, "constructor": true}, {"identifier": "Car", "parameters": "()", "modifiers": "@Deprecated", "return": "", "signature": " Car()", "full_signature": "@Deprecated  Car()", "class_method_signature": "Car.Car()", "testcase": false, "constructor": true}, {"identifier": "getPlate", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPlate()", "full_signature": "public String getPlate()", "class_method_signature": "Car.getPlate()", "testcase": false, "constructor": false}, {"identifier": "getPrice", "parameters": "()", "modifiers": "public", "return": "MonetaryAmount", "signature": "MonetaryAmount getPrice()", "full_signature": "public MonetaryAmount getPrice()", "class_method_signature": "Car.getPrice()", "testcase": false, "constructor": false}, {"identifier": "getModel", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getModel()", "full_signature": "public String getModel()", "class_method_signature": "Car.getModel()", "testcase": false, "constructor": false}, {"identifier": "getColor", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getColor()", "full_signature": "public String getColor()", "class_method_signature": "Car.getColor()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Car.toString()", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "CarBuilder", "signature": "CarBuilder builder()", "full_signature": "public static CarBuilder builder()", "class_method_signature": "Car.builder()", "testcase": false, "constructor": false}], "file": "artemis-demo-java-se/bean-validation/src/main/java/org/jnosql/artemis/demo/se/parking/Car.java"}, "focal_method": {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "CarBuilder", "body": "public static CarBuilder builder() {\n        return new CarBuilder();\n    }", "signature": "CarBuilder builder()", "full_signature": "public static CarBuilder builder()", "class_method_signature": "Car.builder()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 67832483, "url": "https://github.com/JNOSQL/artemis-demo", "stars": 21, "created": "9/9/2016 9:01:24 PM +00:00", "updates": "2020-01-06T09:37:32+00:00", "fork": "False", "license": "licensed"}}