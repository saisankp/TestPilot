{"test_class": {"identifier": "KafkaProducerRepositoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private KafkaProducerRepository repository;", "modifier": "private", "type": "KafkaProducerRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private final Map<String, String> configs = new HashMap<String, String>() {{\n        put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n        put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n        put(\"bootstrap.servers\", \"localhost:9092\");\n    }};", "modifier": "private final", "type": "Map<String, String>", "declarator": "configs = new HashMap<String, String>() {{\n        put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n        put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n        put(\"bootstrap.servers\", \"localhost:9092\");\n    }}", "var_name": "configs"}, {"original_string": "private final Map<String, String> configs_2 = new HashMap<String, String>() {{\n        put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n        put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n        put(\"bootstrap.servers\", \"localhost:9093\");\n        put(\"acks\", \"1\");\n    }};", "modifier": "private final", "type": "Map<String, String>", "declarator": "configs_2 = new HashMap<String, String>() {{\n        put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n        put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n        put(\"bootstrap.servers\", \"localhost:9093\");\n        put(\"acks\", \"1\");\n    }}", "var_name": "configs_2"}], "file": "gateleen-kafka/src/test/java/org/swisspush/gateleen/kafka/KafkaProducerRepositoryTest.java"}, "test_case": {"identifier": "closeAll", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void closeAll(TestContext context) {\n        Async async = context.async();\n\n        repository.addKafkaProducer(new KafkaConfiguration(patternFrom(\"my.topic.*\"), configs));\n        repository.addKafkaProducer(new KafkaConfiguration(patternFrom(\"my.other.topic.*\"), configs_2));\n\n        context.assertTrue(repository.findMatchingKafkaProducer(\"my.topic.zz\").isPresent());\n        context.assertTrue(repository.findMatchingKafkaProducer(\"my.other.topic.zz\").isPresent());\n\n        repository.closeAll().setHandler(event -> {\n            context.assertFalse(repository.findMatchingKafkaProducer(\"my.topic.zz\").isPresent());\n            context.assertFalse(repository.findMatchingKafkaProducer(\"my.other.topic.zz\").isPresent());\n            async.complete();\n        });\n    }", "signature": "void closeAll(TestContext context)", "full_signature": "@Test public void closeAll(TestContext context)", "class_method_signature": "KafkaProducerRepositoryTest.closeAll(TestContext context)", "testcase": true, "constructor": false, "invocations": ["async", "addKafkaProducer", "patternFrom", "addKafkaProducer", "patternFrom", "assertTrue", "isPresent", "findMatchingKafkaProducer", "assertTrue", "isPresent", "findMatchingKafkaProducer", "setHandler", "closeAll", "assertFalse", "isPresent", "findMatchingKafkaProducer", "assertFalse", "isPresent", "findMatchingKafkaProducer", "complete"]}, "focal_class": {"identifier": "KafkaProducerRepository", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger log = LoggerFactory.getLogger(KafkaProducerRepository.class);", "modifier": "private final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(KafkaProducerRepository.class)", "var_name": "log"}, {"original_string": "private final Vertx vertx;", "modifier": "private final", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}, {"original_string": "private final Map<Pattern, KafkaProducer<String, String>> kafkaProducers;", "modifier": "private final", "type": "Map<Pattern, KafkaProducer<String, String>>", "declarator": "kafkaProducers", "var_name": "kafkaProducers"}], "methods": [{"identifier": "KafkaProducerRepository", "parameters": "(Vertx vertx)", "modifiers": "public", "return": "", "signature": " KafkaProducerRepository(Vertx vertx)", "full_signature": "public  KafkaProducerRepository(Vertx vertx)", "class_method_signature": "KafkaProducerRepository.KafkaProducerRepository(Vertx vertx)", "testcase": false, "constructor": true}, {"identifier": "addKafkaProducer", "parameters": "(KafkaConfiguration config)", "modifiers": "", "return": "void", "signature": "void addKafkaProducer(KafkaConfiguration config)", "full_signature": " void addKafkaProducer(KafkaConfiguration config)", "class_method_signature": "KafkaProducerRepository.addKafkaProducer(KafkaConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "findMatchingKafkaProducer", "parameters": "(String topic)", "modifiers": "", "return": "Optional<Pair<KafkaProducer<String, String>, Pattern>>", "signature": "Optional<Pair<KafkaProducer<String, String>, Pattern>> findMatchingKafkaProducer(String topic)", "full_signature": " Optional<Pair<KafkaProducer<String, String>, Pattern>> findMatchingKafkaProducer(String topic)", "class_method_signature": "KafkaProducerRepository.findMatchingKafkaProducer(String topic)", "testcase": false, "constructor": false}, {"identifier": "closeAll", "parameters": "()", "modifiers": "", "return": "Future<Void>", "signature": "Future<Void> closeAll()", "full_signature": " Future<Void> closeAll()", "class_method_signature": "KafkaProducerRepository.closeAll()", "testcase": false, "constructor": false}], "file": "gateleen-kafka/src/main/java/org/swisspush/gateleen/kafka/KafkaProducerRepository.java"}, "focal_method": {"identifier": "closeAll", "parameters": "()", "modifiers": "", "return": "Future<Void>", "body": "Future<Void> closeAll(){\n        log.info(\"About to close all kafka producers\");\n        Future<Void> future = Future.future();\n        List<Future> futures = new ArrayList<>();\n\n        for (Map.Entry<Pattern, KafkaProducer<String, String>> entry : kafkaProducers.entrySet()) {\n            Future entryFuture = Future.future();\n            futures.add(entryFuture);\n            entry.getValue().close(event -> {\n                if(event.succeeded()){\n                    log.info(\"Successfully closed producer for topic '{}'\", entry.getKey().pattern());\n                } else {\n                    log.warn(\"Failed to close producer for topic '{}'\", entry.getKey().pattern());\n                }\n                entryFuture.complete();\n            });\n        }\n\n        // wait for all producers to be closed\n        CompositeFuture.all(futures).setHandler(event -> {\n            kafkaProducers.clear();\n            future.complete();\n        });\n        return future;\n    }", "signature": "Future<Void> closeAll()", "full_signature": " Future<Void> closeAll()", "class_method_signature": "KafkaProducerRepository.closeAll()", "testcase": false, "constructor": false, "invocations": ["info", "future", "entrySet", "future", "add", "close", "getValue", "succeeded", "info", "pattern", "getKey", "warn", "pattern", "getKey", "complete", "setHandler", "all", "clear", "complete"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}