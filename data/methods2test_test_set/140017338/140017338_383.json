{"test_class": {"identifier": "HTMLReportGeneratorTest", "superclass": "extends AntennaTestWithMockedContext", "interfaces": "", "fields": [{"original_string": "@Rule\n    public TemporaryFolder temporaryFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "temporaryFolder = new TemporaryFolder()", "var_name": "temporaryFolder"}, {"original_string": "private HTMLReportGenerator htmlReportGenerator;", "modifier": "private", "type": "HTMLReportGenerator", "declarator": "htmlReportGenerator", "var_name": "htmlReportGenerator"}, {"original_string": "private Charset charset = StandardCharsets.UTF_8;", "modifier": "private", "type": "Charset", "declarator": "charset = StandardCharsets.UTF_8", "var_name": "charset"}, {"original_string": "private static final String LICENSEID1 = \"LicenseName1\";", "modifier": "private static final", "type": "String", "declarator": "LICENSEID1 = \"LicenseName1\"", "var_name": "LICENSEID1"}, {"original_string": "private static final String LICENSETEXT1 = \"Some Super Long LicenseText1\";", "modifier": "private static final", "type": "String", "declarator": "LICENSETEXT1 = \"Some Super Long LicenseText1\"", "var_name": "LICENSETEXT1"}, {"original_string": "private static final String LICENSEID2 = \"LicenseName2\";", "modifier": "private static final", "type": "String", "declarator": "LICENSEID2 = \"LicenseName2\"", "var_name": "LICENSEID2"}, {"original_string": "private static final String LICENSETEXT2 = \"Some Super Long LicenseText2\";", "modifier": "private static final", "type": "String", "declarator": "LICENSETEXT2 = \"Some Super Long LicenseText2\"", "var_name": "LICENSETEXT2"}, {"original_string": "private static final String LICENSEID3 = \"LicenseName3\";", "modifier": "private static final", "type": "String", "declarator": "LICENSEID3 = \"LicenseName3\"", "var_name": "LICENSEID3"}, {"original_string": "private static final String LICENSETEXT3 = \"Some Super Long LicenseText3\";", "modifier": "private static final", "type": "String", "declarator": "LICENSETEXT3 = \"Some Super Long LicenseText3\"", "var_name": "LICENSETEXT3"}, {"original_string": "private static final String LICENSECOMMONNAME = \"License Common Name\";", "modifier": "private static final", "type": "String", "declarator": "LICENSECOMMONNAME = \"License Common Name\"", "var_name": "LICENSECOMMONNAME"}, {"original_string": "private static final String ARTIFACTID1 = \"ArtifactId1\";", "modifier": "private static final", "type": "String", "declarator": "ARTIFACTID1 = \"ArtifactId1\"", "var_name": "ARTIFACTID1"}, {"original_string": "private static final String ARTIFACTID2 = \"ArtifactId2\";", "modifier": "private static final", "type": "String", "declarator": "ARTIFACTID2 = \"ArtifactId2\"", "var_name": "ARTIFACTID2"}, {"original_string": "private static final String ARTIFACTID3 = \"ArtifactId3\";", "modifier": "private static final", "type": "String", "declarator": "ARTIFACTID3 = \"ArtifactId3\"", "var_name": "ARTIFACTID3"}, {"original_string": "private static final String ARTIFACTID4 = \"ArtifactId4\";", "modifier": "private static final", "type": "String", "declarator": "ARTIFACTID4 = \"ArtifactId4\"", "var_name": "ARTIFACTID4"}, {"original_string": "private static final String ARTIFACTVERSION1 = \"1.0.0\";", "modifier": "private static final", "type": "String", "declarator": "ARTIFACTVERSION1 = \"1.0.0\"", "var_name": "ARTIFACTVERSION1"}, {"original_string": "private static final String ARTIFACTVERSION2 = \"1.1.0\";", "modifier": "private static final", "type": "String", "declarator": "ARTIFACTVERSION2 = \"1.1.0\"", "var_name": "ARTIFACTVERSION2"}, {"original_string": "private static final String ARTIFACTVERSION3 = \"1.0.1\";", "modifier": "private static final", "type": "String", "declarator": "ARTIFACTVERSION3 = \"1.0.1\"", "var_name": "ARTIFACTVERSION3"}, {"original_string": "private static final String ARTIFACTVERSION4 = \"2.3.4\";", "modifier": "private static final", "type": "String", "declarator": "ARTIFACTVERSION4 = \"2.3.4\"", "var_name": "ARTIFACTVERSION4"}, {"original_string": "private static final List<String> COPYRIGHTLIST = Arrays.asList(\"Copyright (c) A Name 2020\", \"Copyright (c) Another Name 2020\");", "modifier": "private static final", "type": "List<String>", "declarator": "COPYRIGHTLIST = Arrays.asList(\"Copyright (c) A Name 2020\", \"Copyright (c) Another Name 2020\")", "var_name": "COPYRIGHTLIST"}, {"original_string": "private static final String COPYRIGHTSTRING = COPYRIGHTLIST.stream().collect(Collectors.joining(\"\\n\"));", "modifier": "private static final", "type": "String", "declarator": "COPYRIGHTSTRING = COPYRIGHTLIST.stream().collect(Collectors.joining(\"\\n\"))", "var_name": "COPYRIGHTSTRING"}, {"original_string": "private static final String ARTIFACTFILENAME1 = \"ArtifactName1\";", "modifier": "private static final", "type": "String", "declarator": "ARTIFACTFILENAME1 = \"ArtifactName1\"", "var_name": "ARTIFACTFILENAME1"}, {"original_string": "private static final String ARTIFACTFILENAME2 = \"ArtifactName2\";", "modifier": "private static final", "type": "String", "declarator": "ARTIFACTFILENAME2 = \"ArtifactName2\"", "var_name": "ARTIFACTFILENAME2"}, {"original_string": "public Collection<Artifact> artifacts;", "modifier": "public", "type": "Collection<Artifact>", "declarator": "artifacts", "var_name": "artifacts"}], "file": "core/core-workflow-steps/src/test/java/org/eclipse/sw360/antenna/workflow/generators/HTMLReportGeneratorTest.java"}, "test_case": {"identifier": "testThatArtifactsAreIncluded", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testThatArtifactsAreIncluded() throws Exception {\n        htmlReportGenerator.produce(artifacts);\n\n        byte[] encoded = Files.readAllBytes(temporaryFolder.getRoot().toPath().resolve(\"3rdparty-licenses.html\"));\n        final String contentOfFile = new String(encoded, charset);\n\n        assertThat(contentOfFile).contains(LICENSEID1);\n        assertThat(contentOfFile).contains(LICENSETEXT1);\n        assertThat(contentOfFile).contains(ARTIFACTID1);\n        assertThat(contentOfFile).contains(ARTIFACTVERSION1);\n        assertThat(contentOfFile).contains(LICENSEID2);\n        assertThat(contentOfFile).contains(LICENSETEXT2);\n        assertThat(contentOfFile).contains(LICENSECOMMONNAME);\n        assertThat(contentOfFile).contains(LICENSEID3);\n        assertThat(contentOfFile).contains(LICENSETEXT3);\n        assertThat(contentOfFile).contains(ARTIFACTID2);\n        assertThat(contentOfFile).contains(ARTIFACTVERSION2);\n        assertThat(contentOfFile).contains(ARTIFACTID3);\n        assertThat(contentOfFile).contains(ARTIFACTVERSION3);\n        assertThat(contentOfFile).contains(ARTIFACTID4);\n        assertThat(contentOfFile).contains(ARTIFACTVERSION4);\n        assertThat(contentOfFile).contains(COPYRIGHTLIST.get(0));\n        assertThat(contentOfFile).contains(COPYRIGHTLIST.get(1));\n        assertThat(contentOfFile).contains(ARTIFACTFILENAME1);\n        assertThat(contentOfFile).contains(ARTIFACTFILENAME2);\n        assertThat(temporaryFolder.getRoot().toPath().resolve(\"styles.css\")).exists();\n    }", "signature": "void testThatArtifactsAreIncluded()", "full_signature": "@Test public void testThatArtifactsAreIncluded()", "class_method_signature": "HTMLReportGeneratorTest.testThatArtifactsAreIncluded()", "testcase": true, "constructor": false, "invocations": ["produce", "readAllBytes", "resolve", "toPath", "getRoot", "contains", "assertThat", "contains", "assertThat", "contains", "assertThat", "contains", "assertThat", "contains", "assertThat", "contains", "assertThat", "contains", "assertThat", "contains", "assertThat", "contains", "assertThat", "contains", "assertThat", "contains", "assertThat", "contains", "assertThat", "contains", "assertThat", "contains", "assertThat", "contains", "assertThat", "contains", "assertThat", "get", "contains", "assertThat", "get", "contains", "assertThat", "contains", "assertThat", "exists", "assertThat", "resolve", "toPath", "getRoot"]}, "focal_class": {"identifier": "HTMLReportGenerator", "superclass": "extends AbstractGenerator", "interfaces": "", "fields": [{"original_string": "private static final String LICENSE_REPORT_TEMPLATE_FILE_KEY = \"license.report.template.file\";", "modifier": "private static final", "type": "String", "declarator": "LICENSE_REPORT_TEMPLATE_FILE_KEY = \"license.report.template.file\"", "var_name": "LICENSE_REPORT_TEMPLATE_FILE_KEY"}, {"original_string": "private static final String LICENSE_REPORT_FILE_KEY = \"license.report.file\";", "modifier": "private static final", "type": "String", "declarator": "LICENSE_REPORT_FILE_KEY = \"license.report.file\"", "var_name": "LICENSE_REPORT_FILE_KEY"}, {"original_string": "private static final String LICENSE_REPORT_STYLE_FILE_KEY = \"license.report.style.file\";", "modifier": "private static final", "type": "String", "declarator": "LICENSE_REPORT_STYLE_FILE_KEY = \"license.report.style.file\"", "var_name": "LICENSE_REPORT_STYLE_FILE_KEY"}, {"original_string": "private static final String IDENTIFIER = \"attribution-doc\";", "modifier": "private static final", "type": "String", "declarator": "IDENTIFIER = \"attribution-doc\"", "var_name": "IDENTIFIER"}, {"original_string": "private static final String CLASSIFIER = \"antenna-attribution-doc\";", "modifier": "private static final", "type": "String", "declarator": "CLASSIFIER = \"antenna-attribution-doc\"", "var_name": "CLASSIFIER"}, {"original_string": "private static final String TYPE = \"html\";", "modifier": "private static final", "type": "String", "declarator": "TYPE = \"html\"", "var_name": "TYPE"}, {"original_string": "private static final String LICENSE_REPORT_TEMPLATE_FILE = \"licenseReport.vm\";", "modifier": "private static final", "type": "String", "declarator": "LICENSE_REPORT_TEMPLATE_FILE = \"licenseReport.vm\"", "var_name": "LICENSE_REPORT_TEMPLATE_FILE"}, {"original_string": "private static final String LICENSE_REPORT_FILE = \"3rdparty-licenses.html\";", "modifier": "private static final", "type": "String", "declarator": "LICENSE_REPORT_FILE = \"3rdparty-licenses.html\"", "var_name": "LICENSE_REPORT_FILE"}, {"original_string": "private static final String LICENSE_REPORT_STYLE_FILE = \"styles.css\";", "modifier": "private static final", "type": "String", "declarator": "LICENSE_REPORT_STYLE_FILE = \"styles.css\"", "var_name": "LICENSE_REPORT_STYLE_FILE"}, {"original_string": "private String licenseReportTemplate;", "modifier": "private", "type": "String", "declarator": "licenseReportTemplate", "var_name": "licenseReportTemplate"}, {"original_string": "private Path licenseReport;", "modifier": "private", "type": "Path", "declarator": "licenseReport", "var_name": "licenseReport"}, {"original_string": "private URL licenseReportStyle;", "modifier": "private", "type": "URL", "declarator": "licenseReportStyle", "var_name": "licenseReportStyle"}, {"original_string": "private Charset encoding;", "modifier": "private", "type": "Charset", "declarator": "encoding", "var_name": "encoding"}], "methods": [{"identifier": "HTMLReportGenerator", "parameters": "()", "modifiers": "public", "return": "", "signature": " HTMLReportGenerator()", "full_signature": "public  HTMLReportGenerator()", "class_method_signature": "HTMLReportGenerator.HTMLReportGenerator()", "testcase": false, "constructor": true}, {"identifier": "produce", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "@Override public", "return": "Map<String, IAttachable>", "signature": "Map<String, IAttachable> produce(Collection<Artifact> artifacts)", "full_signature": "@Override public Map<String, IAttachable> produce(Collection<Artifact> artifacts)", "class_method_signature": "HTMLReportGenerator.produce(Collection<Artifact> artifacts)", "testcase": false, "constructor": false}, {"identifier": "writeReportToFile", "parameters": "(Set<ArtifactForHTMLReport> artifactsForHTMLReport, File reportFile)", "modifiers": "private", "return": "void", "signature": "void writeReportToFile(Set<ArtifactForHTMLReport> artifactsForHTMLReport, File reportFile)", "full_signature": "private void writeReportToFile(Set<ArtifactForHTMLReport> artifactsForHTMLReport, File reportFile)", "class_method_signature": "HTMLReportGenerator.writeReportToFile(Set<ArtifactForHTMLReport> artifactsForHTMLReport, File reportFile)", "testcase": false, "constructor": false}, {"identifier": "setupVelocityEngine", "parameters": "()", "modifiers": "private", "return": "VelocityEngine", "signature": "VelocityEngine setupVelocityEngine()", "full_signature": "private VelocityEngine setupVelocityEngine()", "class_method_signature": "HTMLReportGenerator.setupVelocityEngine()", "testcase": false, "constructor": false}, {"identifier": "setupVelocityContext", "parameters": "(Set<ArtifactForHTMLReport> artifactsForHTMLReport)", "modifiers": "private", "return": "VelocityContext", "signature": "VelocityContext setupVelocityContext(Set<ArtifactForHTMLReport> artifactsForHTMLReport)", "full_signature": "private VelocityContext setupVelocityContext(Set<ArtifactForHTMLReport> artifactsForHTMLReport)", "class_method_signature": "HTMLReportGenerator.setupVelocityContext(Set<ArtifactForHTMLReport> artifactsForHTMLReport)", "testcase": false, "constructor": false}, {"identifier": "extractRelevantArtifactInformation", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "private", "return": "Set<ArtifactForHTMLReport>", "signature": "Set<ArtifactForHTMLReport> extractRelevantArtifactInformation(Collection<Artifact> artifacts)", "full_signature": "private Set<ArtifactForHTMLReport> extractRelevantArtifactInformation(Collection<Artifact> artifacts)", "class_method_signature": "HTMLReportGenerator.extractRelevantArtifactInformation(Collection<Artifact> artifacts)", "testcase": false, "constructor": false}, {"identifier": "getAllLicenses", "parameters": "(Set<ArtifactForHTMLReport> artifacts)", "modifiers": "private", "return": "Set<License>", "signature": "Set<License> getAllLicenses(Set<ArtifactForHTMLReport> artifacts)", "full_signature": "private Set<License> getAllLicenses(Set<ArtifactForHTMLReport> artifacts)", "class_method_signature": "HTMLReportGenerator.getAllLicenses(Set<ArtifactForHTMLReport> artifacts)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Map<String, String> configMap)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Map<String, String> configMap)", "full_signature": "@Override public void configure(Map<String, String> configMap)", "class_method_signature": "HTMLReportGenerator.configure(Map<String, String> configMap)", "testcase": false, "constructor": false}], "file": "core/core-workflow-steps/src/main/java/org/eclipse/sw360/antenna/workflow/generators/HTMLReportGenerator.java"}, "focal_method": {"identifier": "produce", "parameters": "(Collection<Artifact> artifacts)", "modifiers": "@Override public", "return": "Map<String, IAttachable>", "body": "@Override\n    public Map<String, IAttachable> produce(Collection<Artifact> artifacts){\n        Path copiedReportStyle = context.getToolConfiguration()\n                .getAntennaTargetDirectory()\n                .resolve(LICENSE_REPORT_STYLE_FILE);\n\n        Set<ArtifactForHTMLReport> artifactsForHTMLReport = extractRelevantArtifactInformation(artifacts);\n\n        writeReportToFile(artifactsForHTMLReport, licenseReport.toFile());\n        try {\n            FileUtils.copyURLToFile(licenseReportStyle, copiedReportStyle.toFile());\n        } catch (IOException e) {\n            throw new ExecutionException(\"Cannot write HTML style file\", e);\n        }\n\n        return Collections.singletonMap(IDENTIFIER, new Attachable(TYPE, CLASSIFIER, licenseReport.toFile()));\n    }", "signature": "Map<String, IAttachable> produce(Collection<Artifact> artifacts)", "full_signature": "@Override public Map<String, IAttachable> produce(Collection<Artifact> artifacts)", "class_method_signature": "HTMLReportGenerator.produce(Collection<Artifact> artifacts)", "testcase": false, "constructor": false, "invocations": ["resolve", "getAntennaTargetDirectory", "getToolConfiguration", "extractRelevantArtifactInformation", "writeReportToFile", "toFile", "copyURLToFile", "toFile", "singletonMap", "toFile"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}