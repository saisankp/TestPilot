{"test_class": {"identifier": "ConfigUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final URI configUri = URI.create(\"system:ephemeris\");", "modifier": "private final", "type": "URI", "declarator": "configUri = URI.create(\"system:ephemeris\")", "var_name": "configUri"}, {"original_string": "private final ConfigDescriptionParameterBuilder configDescriptionParameterBuilder1 = ConfigDescriptionParameterBuilder\n            .create(\"p1\", DECIMAL).withMultiple(true).withMultipleLimit(7);", "modifier": "private final", "type": "ConfigDescriptionParameterBuilder", "declarator": "configDescriptionParameterBuilder1 = ConfigDescriptionParameterBuilder\n            .create(\"p1\", DECIMAL).withMultiple(true).withMultipleLimit(7)", "var_name": "configDescriptionParameterBuilder1"}, {"original_string": "private final ConfigDescriptionParameterBuilder configDescriptionParameterBuilder2 = ConfigDescriptionParameterBuilder\n            .create(\"p2\", TEXT).withMultiple(true).withMultipleLimit(2);", "modifier": "private final", "type": "ConfigDescriptionParameterBuilder", "declarator": "configDescriptionParameterBuilder2 = ConfigDescriptionParameterBuilder\n            .create(\"p2\", TEXT).withMultiple(true).withMultipleLimit(2)", "var_name": "configDescriptionParameterBuilder2"}], "file": "bundles/org.openhab.core.config.core/src/test/java/org/openhab/core/config/core/ConfigUtilTest.java"}, "test_case": {"identifier": "verifyApplyDefaultConfigurationReturnsAListWithMultipleValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void verifyApplyDefaultConfigurationReturnsAListWithMultipleValues() {\n        configDescriptionParameterBuilder1.withDefault(\"2.3,2.4,2.5\");\n\n        Configuration configuration = new Configuration();\n        ConfigDescription configDescription = ConfigDescriptionBuilder.create(configUri)\n                .withParameter(configDescriptionParameterBuilder1.build()).build();\n\n        ConfigUtil.applyDefaultConfiguration(configuration, configDescription);\n        verifyValuesOfConfiguration(configuration.get(\"p1\"), 3,\n                List.of(new BigDecimal(\"2.3\"), new BigDecimal(\"2.4\"), new BigDecimal(\"2.5\")));\n    }", "signature": "void verifyApplyDefaultConfigurationReturnsAListWithMultipleValues()", "full_signature": "@Test public void verifyApplyDefaultConfigurationReturnsAListWithMultipleValues()", "class_method_signature": "ConfigUtilTest.verifyApplyDefaultConfigurationReturnsAListWithMultipleValues()", "testcase": true, "constructor": false, "invocations": ["withDefault", "build", "withParameter", "create", "build", "applyDefaultConfiguration", "verifyValuesOfConfiguration", "get", "of"]}, "focal_class": {"identifier": "ConfigUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_LIST_DELIMITER = \",\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_LIST_DELIMITER = \",\"", "var_name": "DEFAULT_LIST_DELIMITER"}], "methods": [{"identifier": "getDefaultValueAsCorrectType", "parameters": "(ConfigDescriptionParameter parameter)", "modifiers": "public static @Nullable", "return": "Object", "signature": "Object getDefaultValueAsCorrectType(ConfigDescriptionParameter parameter)", "full_signature": "public static @Nullable Object getDefaultValueAsCorrectType(ConfigDescriptionParameter parameter)", "class_method_signature": "ConfigUtil.getDefaultValueAsCorrectType(ConfigDescriptionParameter parameter)", "testcase": false, "constructor": false}, {"identifier": "getDefaultValueAsCorrectType", "parameters": "(String parameterName, Type parameterType,\n            String defaultValue)", "modifiers": "static @Nullable", "return": "Object", "signature": "Object getDefaultValueAsCorrectType(String parameterName, Type parameterType,\n            String defaultValue)", "full_signature": "static @Nullable Object getDefaultValueAsCorrectType(String parameterName, Type parameterType,\n            String defaultValue)", "class_method_signature": "ConfigUtil.getDefaultValueAsCorrectType(String parameterName, Type parameterType,\n            String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfDecimalPlaces", "parameters": "(BigDecimal bigDecimal)", "modifiers": "static", "return": "int", "signature": "int getNumberOfDecimalPlaces(BigDecimal bigDecimal)", "full_signature": "static int getNumberOfDecimalPlaces(BigDecimal bigDecimal)", "class_method_signature": "ConfigUtil.getNumberOfDecimalPlaces(BigDecimal bigDecimal)", "testcase": false, "constructor": false}, {"identifier": "applyDefaultConfiguration", "parameters": "(Configuration configuration,\n            @Nullable ConfigDescription configDescription)", "modifiers": "public static", "return": "void", "signature": "void applyDefaultConfiguration(Configuration configuration,\n            @Nullable ConfigDescription configDescription)", "full_signature": "public static void applyDefaultConfiguration(Configuration configuration,\n            @Nullable ConfigDescription configDescription)", "class_method_signature": "ConfigUtil.applyDefaultConfiguration(Configuration configuration,\n            @Nullable ConfigDescription configDescription)", "testcase": false, "constructor": false}, {"identifier": "normalizeTypes", "parameters": "(Map<String, @Nullable Object> configuration)", "modifiers": "public static", "return": "Map<String, @Nullable Object>", "signature": "Map<String, @Nullable Object> normalizeTypes(Map<String, @Nullable Object> configuration)", "full_signature": "public static Map<String, @Nullable Object> normalizeTypes(Map<String, @Nullable Object> configuration)", "class_method_signature": "ConfigUtil.normalizeTypes(Map<String, @Nullable Object> configuration)", "testcase": false, "constructor": false}, {"identifier": "normalizeType", "parameters": "(Object value, @Nullable ConfigDescriptionParameter configDescriptionParameter)", "modifiers": "public static", "return": "Object", "signature": "Object normalizeType(Object value, @Nullable ConfigDescriptionParameter configDescriptionParameter)", "full_signature": "public static Object normalizeType(Object value, @Nullable ConfigDescriptionParameter configDescriptionParameter)", "class_method_signature": "ConfigUtil.normalizeType(Object value, @Nullable ConfigDescriptionParameter configDescriptionParameter)", "testcase": false, "constructor": false}, {"identifier": "normalizeTypes", "parameters": "(@Nullable Map<String, Object> configuration,\n            List<ConfigDescription> configDescriptions)", "modifiers": "public static @Nullable", "return": "Map<String, Object>", "signature": "Map<String, Object> normalizeTypes(@Nullable Map<String, Object> configuration,\n            List<ConfigDescription> configDescriptions)", "full_signature": "public static @Nullable Map<String, Object> normalizeTypes(@Nullable Map<String, Object> configuration,\n            List<ConfigDescription> configDescriptions)", "class_method_signature": "ConfigUtil.normalizeTypes(@Nullable Map<String, Object> configuration,\n            List<ConfigDescription> configDescriptions)", "testcase": false, "constructor": false}, {"identifier": "normalizeType", "parameters": "(Object value)", "modifiers": "public static", "return": "Object", "signature": "Object normalizeType(Object value)", "full_signature": "public static Object normalizeType(Object value)", "class_method_signature": "ConfigUtil.normalizeType(Object value)", "testcase": false, "constructor": false}, {"identifier": "normalizeCollection", "parameters": "(Collection<?> collection)", "modifiers": "private static", "return": "Collection<Object>", "signature": "Collection<Object> normalizeCollection(Collection<?> collection)", "full_signature": "private static Collection<Object> normalizeCollection(Collection<?> collection)", "class_method_signature": "ConfigUtil.normalizeCollection(Collection<?> collection)", "testcase": false, "constructor": false}, {"identifier": "isOSGiConfigParameter", "parameters": "(String name)", "modifiers": "private static", "return": "boolean", "signature": "boolean isOSGiConfigParameter(String name)", "full_signature": "private static boolean isOSGiConfigParameter(String name)", "class_method_signature": "ConfigUtil.isOSGiConfigParameter(String name)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core.config.core/src/main/java/org/openhab/core/config/core/ConfigUtil.java"}, "focal_method": {"identifier": "applyDefaultConfiguration", "parameters": "(Configuration configuration,\n            @Nullable ConfigDescription configDescription)", "modifiers": "public static", "return": "void", "body": "public static void applyDefaultConfiguration(Configuration configuration,\n            @Nullable ConfigDescription configDescription) {\n        if (configDescription != null) {\n            for (ConfigDescriptionParameter parameter : configDescription.getParameters()) {\n                String defaultValue = parameter.getDefault();\n                if (defaultValue != null && configuration.get(parameter.getName()) == null) {\n                    if (parameter.isMultiple()) {\n                        if (defaultValue.contains(DEFAULT_LIST_DELIMITER)) {\n                            List<Object> values = (List<Object>) List.of(defaultValue.split(DEFAULT_LIST_DELIMITER))\n                                    .stream() //\n                                    .map(String::trim) //\n                                    .filter(not(String::isEmpty)) //\n                                    .map(value -> ConfigUtil.getDefaultValueAsCorrectType(parameter.getName(),\n                                            parameter.getType(), value)) //\n                                    .filter(Objects::nonNull) //\n                                    .collect(Collectors.toList());\n                            Integer multipleLimit = parameter.getMultipleLimit();\n                            if (multipleLimit != null && values.size() > multipleLimit.intValue()) {\n                                LoggerFactory.getLogger(ConfigUtil.class).warn(\n                                        \"Number of default values ({}) for parameter '{}' is greater than multiple limit ({})\",\n                                        values.size(), parameter.getName(), multipleLimit);\n                            }\n                            configuration.put(parameter.getName(), values);\n                        } else {\n                            Object value = ConfigUtil.getDefaultValueAsCorrectType(parameter);\n                            if (value != null) {\n                                configuration.put(parameter.getName(), Arrays.asList(value));\n                            }\n                        }\n                    } else {\n                        Object value = ConfigUtil.getDefaultValueAsCorrectType(parameter);\n                        if (value != null) {\n                            configuration.put(parameter.getName(), value);\n                        }\n                    }\n                }\n            }\n        }\n    }", "signature": "void applyDefaultConfiguration(Configuration configuration,\n            @Nullable ConfigDescription configDescription)", "full_signature": "public static void applyDefaultConfiguration(Configuration configuration,\n            @Nullable ConfigDescription configDescription)", "class_method_signature": "ConfigUtil.applyDefaultConfiguration(Configuration configuration,\n            @Nullable ConfigDescription configDescription)", "testcase": false, "constructor": false, "invocations": ["getParameters", "getDefault", "get", "getName", "isMultiple", "contains", "collect", "filter", "map", "filter", "map", "stream", "of", "split", "not", "getDefaultValueAsCorrectType", "getName", "getType", "toList", "getMultipleLimit", "size", "intValue", "warn", "getLogger", "size", "getName", "put", "getName", "getDefaultValueAsCorrectType", "put", "getName", "asList", "getDefaultValueAsCorrectType", "put", "getName"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}