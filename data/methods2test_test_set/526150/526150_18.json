{"test_class": {"identifier": "GlobAerosolReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "beam-glob-due-reader/src/test/java/org/esa/beam/dataio/globaerosol/GlobAerosolReaderTest.java"}, "test_case": {"identifier": "testEndTimeCalculation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEndTimeCalculation() throws ParseException {\n        ProductData.UTC startTime = ProductData.UTC.parse(\"2010-05-26\", GlobAerosolReader.UTC_DATE_PATTERN);\n        ProductData.UTC endTime = GlobAerosolReader.calcEndTime(startTime, Period.DAILY);\n        Calendar actualCalendar = endTime.getAsCalendar();\n\n        Calendar expectCal = ProductData.UTC.parse(\"2010-05-26 23:59:59\", \"yyyy-MM-dd HH:mm:ss\").getAsCalendar();\n        assertEquals(expectCal, actualCalendar);\n\n        startTime = ProductData.UTC.parse(\"2000-02-26\", GlobAerosolReader.UTC_DATE_PATTERN);\n        endTime = GlobAerosolReader.calcEndTime(startTime, Period.WEEKLY);\n        expectCal = ProductData.UTC.parse(\"2000-03-03 23:59:59\", \"yyyy-MM-dd HH:mm:ss\").getAsCalendar();\n        actualCalendar = endTime.getAsCalendar();\n        assertEquals(expectCal, actualCalendar);\n\n        startTime = ProductData.UTC.parse(\"2000-02-01\", GlobAerosolReader.UTC_DATE_PATTERN);\n        endTime = GlobAerosolReader.calcEndTime(startTime, Period.MONTHLY);\n        expectCal = ProductData.UTC.parse(\"2000-02-29 23:59:59\", \"yyyy-MM-dd HH:mm:ss\").getAsCalendar();\n        actualCalendar = endTime.getAsCalendar();\n        assertEquals(expectCal, actualCalendar);\n\n        startTime = ProductData.UTC.parse(\"2002-02-01\", GlobAerosolReader.UTC_DATE_PATTERN);\n        endTime = GlobAerosolReader.calcEndTime(startTime, Period.YEAR);\n        expectCal = ProductData.UTC.parse(\"2003-01-31 23:59:59\", \"yyyy-MM-dd HH:mm:ss\").getAsCalendar();\n        actualCalendar = endTime.getAsCalendar();\n        assertEquals(expectCal, actualCalendar);\n\n\n    }", "signature": "void testEndTimeCalculation()", "full_signature": "@Test public void testEndTimeCalculation()", "class_method_signature": "GlobAerosolReaderTest.testEndTimeCalculation()", "testcase": true, "constructor": false, "invocations": ["parse", "calcEndTime", "getAsCalendar", "getAsCalendar", "parse", "assertEquals", "parse", "calcEndTime", "getAsCalendar", "parse", "getAsCalendar", "assertEquals", "parse", "calcEndTime", "getAsCalendar", "parse", "getAsCalendar", "assertEquals", "parse", "calcEndTime", "getAsCalendar", "parse", "getAsCalendar", "assertEquals"]}, "focal_class": {"identifier": "GlobAerosolReader", "superclass": "extends AbstractProductReader", "interfaces": "", "fields": [{"original_string": "private static final String NC_ATTRIBUTE_START_DATE = \"StartDate\";", "modifier": "private static final", "type": "String", "declarator": "NC_ATTRIBUTE_START_DATE = \"StartDate\"", "var_name": "NC_ATTRIBUTE_START_DATE"}, {"original_string": "private static final String NC_VARIABLE_MODEL = \"model\";", "modifier": "private static final", "type": "String", "declarator": "NC_VARIABLE_MODEL = \"model\"", "var_name": "NC_VARIABLE_MODEL"}, {"original_string": "private static final int ROW_COUNT = 2004;", "modifier": "private static final", "type": "int", "declarator": "ROW_COUNT = 2004", "var_name": "ROW_COUNT"}, {"original_string": "static final String UTC_DATE_PATTERN = \"yyyy-MM-dd\";", "modifier": "static final", "type": "String", "declarator": "UTC_DATE_PATTERN = \"yyyy-MM-dd\"", "var_name": "UTC_DATE_PATTERN"}, {"original_string": "private static final String NC_ATTRIBUTE_PERIOD = \"Period\";", "modifier": "private static final", "type": "String", "declarator": "NC_ATTRIBUTE_PERIOD = \"Period\"", "var_name": "NC_ATTRIBUTE_PERIOD"}, {"original_string": "private static final String NC_ATTRIBUTE_PRODUCT_ID = \"ProductID\";", "modifier": "private static final", "type": "String", "declarator": "NC_ATTRIBUTE_PRODUCT_ID = \"ProductID\"", "var_name": "NC_ATTRIBUTE_PRODUCT_ID"}, {"original_string": "private static final String CF_PROFILE = \"org.esa.beam.dataio.netcdf.metadata.profiles.cf.CfProfileSpi\";", "modifier": "private static final", "type": "String", "declarator": "CF_PROFILE = \"org.esa.beam.dataio.netcdf.metadata.profiles.cf.CfProfileSpi\"", "var_name": "CF_PROFILE"}, {"original_string": "private NetcdfFile ncfile;", "modifier": "private", "type": "NetcdfFile", "declarator": "ncfile", "var_name": "ncfile"}, {"original_string": "private ISINGrid isinGrid;", "modifier": "private", "type": "ISINGrid", "declarator": "isinGrid", "var_name": "isinGrid"}, {"original_string": "private Map<Band, VariableAccessor1D> accessorMap;", "modifier": "private", "type": "Map<Band, VariableAccessor1D>", "declarator": "accessorMap", "var_name": "accessorMap"}, {"original_string": "private RowInfo[] rowInfos;", "modifier": "private", "type": "RowInfo[]", "declarator": "rowInfos", "var_name": "rowInfos"}, {"original_string": "private Band lonBand;", "modifier": "private", "type": "Band", "declarator": "lonBand", "var_name": "lonBand"}, {"original_string": "private int width;", "modifier": "private", "type": "int", "declarator": "width", "var_name": "width"}, {"original_string": "private int height;", "modifier": "private", "type": "int", "declarator": "height", "var_name": "height"}, {"original_string": "private ProductReader delegateReader;", "modifier": "private", "type": "ProductReader", "declarator": "delegateReader", "var_name": "delegateReader"}, {"original_string": "private boolean isSorted = true;", "modifier": "private", "type": "boolean", "declarator": "isSorted = true", "var_name": "isSorted"}], "methods": [{"identifier": "GlobAerosolReader", "parameters": "(GlobAerosolReaderPlugIn readerPlugIn)", "modifiers": "protected", "return": "", "signature": " GlobAerosolReader(GlobAerosolReaderPlugIn readerPlugIn)", "full_signature": "protected  GlobAerosolReader(GlobAerosolReaderPlugIn readerPlugIn)", "class_method_signature": "GlobAerosolReader.GlobAerosolReader(GlobAerosolReaderPlugIn readerPlugIn)", "testcase": false, "constructor": true}, {"identifier": "readProductNodesImpl", "parameters": "()", "modifiers": "@Override protected", "return": "Product", "signature": "Product readProductNodesImpl()", "full_signature": "@Override protected Product readProductNodesImpl()", "class_method_signature": "GlobAerosolReader.readProductNodesImpl()", "testcase": false, "constructor": false}, {"identifier": "readBandRasterDataImpl", "parameters": "(int sourceOffsetX, int sourceOffsetY, int sourceWidth, int sourceHeight,\n                                          int sourceStepX, int sourceStepY, Band destBand, int destOffsetX,\n                                          int destOffsetY, int destWidth, int destHeight, ProductData destBuffer,\n                                          ProgressMonitor pm)", "modifiers": "@Override protected", "return": "void", "signature": "void readBandRasterDataImpl(int sourceOffsetX, int sourceOffsetY, int sourceWidth, int sourceHeight,\n                                          int sourceStepX, int sourceStepY, Band destBand, int destOffsetX,\n                                          int destOffsetY, int destWidth, int destHeight, ProductData destBuffer,\n                                          ProgressMonitor pm)", "full_signature": "@Override protected void readBandRasterDataImpl(int sourceOffsetX, int sourceOffsetY, int sourceWidth, int sourceHeight,\n                                          int sourceStepX, int sourceStepY, Band destBand, int destOffsetX,\n                                          int destOffsetY, int destWidth, int destHeight, ProductData destBuffer,\n                                          ProgressMonitor pm)", "class_method_signature": "GlobAerosolReader.readBandRasterDataImpl(int sourceOffsetX, int sourceOffsetY, int sourceWidth, int sourceHeight,\n                                          int sourceStepX, int sourceStepY, Band destBand, int destOffsetX,\n                                          int destOffsetY, int destWidth, int destHeight, ProductData destBuffer,\n                                          ProgressMonitor pm)", "testcase": false, "constructor": false}, {"identifier": "readSortedData", "parameters": "(int sourceOffsetX, int sourceOffsetY, int sourceWidth, int sourceHeight, Band destBand, ProductData destBuffer, ProgressMonitor pm)", "modifiers": "private", "return": "void", "signature": "void readSortedData(int sourceOffsetX, int sourceOffsetY, int sourceWidth, int sourceHeight, Band destBand, ProductData destBuffer, ProgressMonitor pm)", "full_signature": "private void readSortedData(int sourceOffsetX, int sourceOffsetY, int sourceWidth, int sourceHeight, Band destBand, ProductData destBuffer, ProgressMonitor pm)", "class_method_signature": "GlobAerosolReader.readSortedData(int sourceOffsetX, int sourceOffsetY, int sourceWidth, int sourceHeight, Band destBand, ProductData destBuffer, ProgressMonitor pm)", "testcase": false, "constructor": false}, {"identifier": "readUnsortedData", "parameters": "(int sourceOffsetX, int sourceOffsetY, int sourceWidth, int sourceHeight, Band destBand, ProductData destBuffer, ProgressMonitor pm)", "modifiers": "private", "return": "void", "signature": "void readUnsortedData(int sourceOffsetX, int sourceOffsetY, int sourceWidth, int sourceHeight, Band destBand, ProductData destBuffer, ProgressMonitor pm)", "full_signature": "private void readUnsortedData(int sourceOffsetX, int sourceOffsetY, int sourceWidth, int sourceHeight, Band destBand, ProductData destBuffer, ProgressMonitor pm)", "class_method_signature": "GlobAerosolReader.readUnsortedData(int sourceOffsetX, int sourceOffsetY, int sourceWidth, int sourceHeight, Band destBand, ProductData destBuffer, ProgressMonitor pm)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(Band band, RowInfo rowInfo)", "modifiers": "private", "return": "Array", "signature": "Array read(Band band, RowInfo rowInfo)", "full_signature": "private Array read(Band band, RowInfo rowInfo)", "class_method_signature": "GlobAerosolReader.read(Band band, RowInfo rowInfo)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "GlobAerosolReader.close()", "testcase": false, "constructor": false}, {"identifier": "createProduct", "parameters": "()", "modifiers": "private", "return": "Product", "signature": "Product createProduct()", "full_signature": "private Product createProduct()", "class_method_signature": "GlobAerosolReader.createProduct()", "testcase": false, "constructor": false}, {"identifier": "calcEndTime", "parameters": "(ProductData.UTC startDate, Period period)", "modifiers": "static", "return": "ProductData.UTC", "signature": "ProductData.UTC calcEndTime(ProductData.UTC startDate, Period period)", "full_signature": "static ProductData.UTC calcEndTime(ProductData.UTC startDate, Period period)", "class_method_signature": "GlobAerosolReader.calcEndTime(ProductData.UTC startDate, Period period)", "testcase": false, "constructor": false}, {"identifier": "getPeriod", "parameters": "()", "modifiers": "private", "return": "Period", "signature": "Period getPeriod()", "full_signature": "private Period getPeriod()", "class_method_signature": "GlobAerosolReader.getPeriod()", "testcase": false, "constructor": false}, {"identifier": "addGeoCoding", "parameters": "(Product product)", "modifiers": "private", "return": "void", "signature": "void addGeoCoding(Product product)", "full_signature": "private void addGeoCoding(Product product)", "class_method_signature": "GlobAerosolReader.addGeoCoding(Product product)", "testcase": false, "constructor": false}, {"identifier": "addBands", "parameters": "(Product product)", "modifiers": "private", "return": "void", "signature": "void addBands(Product product)", "full_signature": "private void addBands(Product product)", "class_method_signature": "GlobAerosolReader.addBands(Product product)", "testcase": false, "constructor": false}, {"identifier": "handleBand", "parameters": "(Band band, Variable variable, int cellDimemsionIndex,\n                            IndexCoding indexCoding, Map<Integer, Integer> dimSelection)", "modifiers": "private", "return": "void", "signature": "void handleBand(Band band, Variable variable, int cellDimemsionIndex,\n                            IndexCoding indexCoding, Map<Integer, Integer> dimSelection)", "full_signature": "private void handleBand(Band band, Variable variable, int cellDimemsionIndex,\n                            IndexCoding indexCoding, Map<Integer, Integer> dimSelection)", "class_method_signature": "GlobAerosolReader.handleBand(Band band, Variable variable, int cellDimemsionIndex,\n                            IndexCoding indexCoding, Map<Integer, Integer> dimSelection)", "testcase": false, "constructor": false}, {"identifier": "createRowInfos", "parameters": "()", "modifiers": "private", "return": "RowInfo[]", "signature": "RowInfo[] createRowInfos()", "full_signature": "private RowInfo[] createRowInfos()", "class_method_signature": "GlobAerosolReader.createRowInfos()", "testcase": false, "constructor": false}], "file": "beam-glob-due-reader/src/main/java/org/esa/beam/dataio/globaerosol/GlobAerosolReader.java"}, "focal_method": {"identifier": "calcEndTime", "parameters": "(ProductData.UTC startDate, Period period)", "modifiers": "static", "return": "ProductData.UTC", "body": "static ProductData.UTC calcEndTime(ProductData.UTC startDate, Period period) {\n        final Calendar asCalendar = startDate.getAsCalendar();\n        asCalendar.add(period.getCalendarFieldIndex(), period.getAmount());\n        asCalendar.add(Calendar.SECOND, -1);\n        return ProductData.UTC.create(asCalendar.getTime(), 0);\n    }", "signature": "ProductData.UTC calcEndTime(ProductData.UTC startDate, Period period)", "full_signature": "static ProductData.UTC calcEndTime(ProductData.UTC startDate, Period period)", "class_method_signature": "GlobAerosolReader.calcEndTime(ProductData.UTC startDate, Period period)", "testcase": false, "constructor": false, "invocations": ["getAsCalendar", "add", "getCalendarFieldIndex", "getAmount", "add", "create", "getTime"]}, "repository": {"repo_id": 526150, "url": "https://github.com/bcdev/glob-box", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 6, "size": 6440, "license": "licensed"}}