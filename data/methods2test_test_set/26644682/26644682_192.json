{"test_class": {"identifier": "DataSetAPITest", "superclass": "extends ApiServiceTestBase", "interfaces": "", "fields": [{"original_string": "@Autowired\n    UserDataRepository userDataRepository;", "modifier": "@Autowired", "type": "UserDataRepository", "declarator": "userDataRepository", "var_name": "userDataRepository"}, {"original_string": "@Autowired\n    Security security;", "modifier": "@Autowired", "type": "Security", "declarator": "security", "var_name": "security"}, {"original_string": "@Autowired\n    VersionService versionService;", "modifier": "@Autowired", "type": "VersionService", "declarator": "versionService", "var_name": "versionService"}], "file": "dataprep-api/src/test/java/org/talend/dataprep/api/service/DataSetAPITest.java"}, "test_case": {"identifier": "testLookupActionsActions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLookupActionsActions() throws Exception {\n        // given\n        final String firstDataSetId = testClient.createDataset(\"dataset/dataset.csv\", \"testDataset\");\n        final String dataSetId = testClient.createDataset(\"dataset/dataset_cars.csv\", \"cars\");\n        final String thirdDataSetId = testClient.createDataset(\"dataset/dataset.csv\", \"third\");\n\n        List<String> expectedIds = Arrays.asList(dataSetId, firstDataSetId, thirdDataSetId);\n\n        // when\n        final String actions = when().get(\"/api/datasets/{id}/actions\", dataSetId).asString();\n\n        // then\n        final JsonNode jsonNode = mapper.readTree(actions);\n        // response is an array\n        assertTrue(\"json not an array:\" + actions, jsonNode.isArray());\n        Assertions.assertThat(jsonNode.isArray()).isTrue();\n        // an array of 2 entries\n        ArrayNode lookups = (ArrayNode) jsonNode;\n        assertThat(lookups.size(), is(3));\n\n        // let's check the url of the possible lookups\n        for (int i = 0; i < lookups.size(); i++) {\n            final JsonNode lookup = lookups.get(i);\n            final ArrayNode parameters = (ArrayNode) lookup.get(\"parameters\");\n            for (int j = 0; j < parameters.size(); j++) {\n                final JsonNode parameter = parameters.get(j);\n                if (StringUtils.equals(parameter.get(\"name\").asText(), \"url\")) {\n                    final String url = parameter.get(\"default\").asText();\n                    // the url id must be known\n                    assertThat(expectedIds.stream().filter(url::contains).count(), is(1L));\n                }\n            }\n        }\n    }", "signature": "void testLookupActionsActions()", "full_signature": "@Test public void testLookupActionsActions()", "class_method_signature": "DataSetAPITest.testLookupActionsActions()", "testcase": true, "constructor": false, "invocations": ["createDataset", "createDataset", "createDataset", "asList", "asString", "get", "when", "readTree", "assertTrue", "isArray", "isTrue", "assertThat", "isArray", "assertThat", "size", "is", "size", "get", "get", "size", "get", "equals", "asText", "get", "asText", "get", "assertThat", "count", "filter", "stream", "is"]}, "focal_class": {"identifier": "DataSetAPI", "superclass": "extends APIService", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private DatasetClient datasetClient;", "modifier": "@Autowired\n    private", "type": "DatasetClient", "declarator": "datasetClient", "var_name": "datasetClient"}, {"original_string": "@Value(\"${dataset.list.limit:10}\")\n    private int datasetListLimit;", "modifier": "@Value(\"${dataset.list.limit:10}\")\n    private", "type": "int", "declarator": "datasetListLimit", "var_name": "datasetListLimit"}], "methods": [{"identifier": "create", "parameters": "(\n            @ApiParam(\n                    value = \"User readable name of the data set (e.g. 'Finance Report 2015', 'Test Data Set').\") @RequestParam(\n                            defaultValue = \"\", required = false) final String name,\n            @ApiParam(value = \"An optional tag to be added in data set metadata once created.\") @RequestParam(\n                    defaultValue = \"\", required = false) String tag,\n            @ApiParam(value = \"Size of the data set, in bytes.\") @RequestParam(defaultValue = \"0\") long size,\n            @RequestHeader(CONTENT_TYPE) String contentType, @ApiParam(value = \"content\") InputStream dataSetContent)", "modifiers": "@RequestMapping(value = \"/api/datasets\", method = POST, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Create a data set\", produces = TEXT_PLAIN_VALUE, notes = \"Create a new data set based on content provided in POST body. For documentation purposes, body is typed as 'text/plain' but operation accepts binary content too. Returns the id of the newly created data set.\") @Timed public", "return": "Callable<String>", "signature": "Callable<String> create(\n            @ApiParam(\n                    value = \"User readable name of the data set (e.g. 'Finance Report 2015', 'Test Data Set').\") @RequestParam(\n                            defaultValue = \"\", required = false) final String name,\n            @ApiParam(value = \"An optional tag to be added in data set metadata once created.\") @RequestParam(\n                    defaultValue = \"\", required = false) String tag,\n            @ApiParam(value = \"Size of the data set, in bytes.\") @RequestParam(defaultValue = \"0\") long size,\n            @RequestHeader(CONTENT_TYPE) String contentType, @ApiParam(value = \"content\") InputStream dataSetContent)", "full_signature": "@RequestMapping(value = \"/api/datasets\", method = POST, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Create a data set\", produces = TEXT_PLAIN_VALUE, notes = \"Create a new data set based on content provided in POST body. For documentation purposes, body is typed as 'text/plain' but operation accepts binary content too. Returns the id of the newly created data set.\") @Timed public Callable<String> create(\n            @ApiParam(\n                    value = \"User readable name of the data set (e.g. 'Finance Report 2015', 'Test Data Set').\") @RequestParam(\n                            defaultValue = \"\", required = false) final String name,\n            @ApiParam(value = \"An optional tag to be added in data set metadata once created.\") @RequestParam(\n                    defaultValue = \"\", required = false) String tag,\n            @ApiParam(value = \"Size of the data set, in bytes.\") @RequestParam(defaultValue = \"0\") long size,\n            @RequestHeader(CONTENT_TYPE) String contentType, @ApiParam(value = \"content\") InputStream dataSetContent)", "class_method_signature": "DataSetAPI.create(\n            @ApiParam(\n                    value = \"User readable name of the data set (e.g. 'Finance Report 2015', 'Test Data Set').\") @RequestParam(\n                            defaultValue = \"\", required = false) final String name,\n            @ApiParam(value = \"An optional tag to be added in data set metadata once created.\") @RequestParam(\n                    defaultValue = \"\", required = false) String tag,\n            @ApiParam(value = \"Size of the data set, in bytes.\") @RequestParam(defaultValue = \"0\") long size,\n            @RequestHeader(CONTENT_TYPE) String contentType, @ApiParam(value = \"content\") InputStream dataSetContent)", "testcase": false, "constructor": false}, {"identifier": "createOrUpdateById", "parameters": "(\n            @ApiParam(\n                    value = \"User readable name of the data set (e.g. 'Finance Report 2015', 'Test Data Set').\") @RequestParam(\n                            defaultValue = \"\", required = false) String name,\n            @ApiParam(value = \"Id of the data set to update / create\") @PathVariable(value = \"id\") String id,\n            @ApiParam(value = \"Size of the data set, in bytes.\") @RequestParam(defaultValue = \"0\") long size,\n            @ApiParam(value = \"content\") InputStream dataSetContent)", "modifiers": "@RequestMapping(value = \"/api/datasets/{id}\", method = PUT, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Update a data set by id.\", produces = TEXT_PLAIN_VALUE, // notes = \"Create or update a data set based on content provided in PUT body with given id. For documentation purposes, body is typed as 'text/plain' but operation accepts binary content too. Returns the id of the newly created data set.\") @Timed public", "return": "Callable<String>", "signature": "Callable<String> createOrUpdateById(\n            @ApiParam(\n                    value = \"User readable name of the data set (e.g. 'Finance Report 2015', 'Test Data Set').\") @RequestParam(\n                            defaultValue = \"\", required = false) String name,\n            @ApiParam(value = \"Id of the data set to update / create\") @PathVariable(value = \"id\") String id,\n            @ApiParam(value = \"Size of the data set, in bytes.\") @RequestParam(defaultValue = \"0\") long size,\n            @ApiParam(value = \"content\") InputStream dataSetContent)", "full_signature": "@RequestMapping(value = \"/api/datasets/{id}\", method = PUT, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Update a data set by id.\", produces = TEXT_PLAIN_VALUE, // notes = \"Create or update a data set based on content provided in PUT body with given id. For documentation purposes, body is typed as 'text/plain' but operation accepts binary content too. Returns the id of the newly created data set.\") @Timed public Callable<String> createOrUpdateById(\n            @ApiParam(\n                    value = \"User readable name of the data set (e.g. 'Finance Report 2015', 'Test Data Set').\") @RequestParam(\n                            defaultValue = \"\", required = false) String name,\n            @ApiParam(value = \"Id of the data set to update / create\") @PathVariable(value = \"id\") String id,\n            @ApiParam(value = \"Size of the data set, in bytes.\") @RequestParam(defaultValue = \"0\") long size,\n            @ApiParam(value = \"content\") InputStream dataSetContent)", "class_method_signature": "DataSetAPI.createOrUpdateById(\n            @ApiParam(\n                    value = \"User readable name of the data set (e.g. 'Finance Report 2015', 'Test Data Set').\") @RequestParam(\n                            defaultValue = \"\", required = false) String name,\n            @ApiParam(value = \"Id of the data set to update / create\") @PathVariable(value = \"id\") String id,\n            @ApiParam(value = \"Size of the data set, in bytes.\") @RequestParam(defaultValue = \"0\") long size,\n            @ApiParam(value = \"content\") InputStream dataSetContent)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(@ApiParam(value = \"Name of the copy\") @RequestParam(required = false) String name,\n            @ApiParam(value = \"Id of the data set to update / create\") @PathVariable(value = \"id\") String id)", "modifiers": "@RequestMapping(value = \"/api/datasets/{id}/copy\", method = POST, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Copy the dataset.\", produces = TEXT_PLAIN_VALUE, notes = \"Copy the dataset, returns the id of the copied created data set.\") @Timed public", "return": "Callable<String>", "signature": "Callable<String> copy(@ApiParam(value = \"Name of the copy\") @RequestParam(required = false) String name,\n            @ApiParam(value = \"Id of the data set to update / create\") @PathVariable(value = \"id\") String id)", "full_signature": "@RequestMapping(value = \"/api/datasets/{id}/copy\", method = POST, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Copy the dataset.\", produces = TEXT_PLAIN_VALUE, notes = \"Copy the dataset, returns the id of the copied created data set.\") @Timed public Callable<String> copy(@ApiParam(value = \"Name of the copy\") @RequestParam(required = false) String name,\n            @ApiParam(value = \"Id of the data set to update / create\") @PathVariable(value = \"id\") String id)", "class_method_signature": "DataSetAPI.copy(@ApiParam(value = \"Name of the copy\") @RequestParam(required = false) String name,\n            @ApiParam(value = \"Id of the data set to update / create\") @PathVariable(value = \"id\") String id)", "testcase": false, "constructor": false}, {"identifier": "updateMetadata", "parameters": "(\n            @ApiParam(value = \"Id of the data set metadata to be updated\") @PathVariable(value = \"id\") String id,\n            @ApiParam(value = \"content\") InputStream dataSetContent)", "modifiers": "@RequestMapping(value = \"/api/datasets/{id}/metadata\", method = PUT, produces = MediaType.APPLICATION_JSON_VALUE) @ApiOperation(value = \"Update a data set metadata by id.\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE, // notes = \"Update a data set metadata based on content provided in PUT body with given id. For documentation purposes. Returns the id of the updated data set metadata.\") @Timed public", "return": "void", "signature": "void updateMetadata(\n            @ApiParam(value = \"Id of the data set metadata to be updated\") @PathVariable(value = \"id\") String id,\n            @ApiParam(value = \"content\") InputStream dataSetContent)", "full_signature": "@RequestMapping(value = \"/api/datasets/{id}/metadata\", method = PUT, produces = MediaType.APPLICATION_JSON_VALUE) @ApiOperation(value = \"Update a data set metadata by id.\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE, // notes = \"Update a data set metadata based on content provided in PUT body with given id. For documentation purposes. Returns the id of the updated data set metadata.\") @Timed public void updateMetadata(\n            @ApiParam(value = \"Id of the data set metadata to be updated\") @PathVariable(value = \"id\") String id,\n            @ApiParam(value = \"content\") InputStream dataSetContent)", "class_method_signature": "DataSetAPI.updateMetadata(\n            @ApiParam(value = \"Id of the data set metadata to be updated\") @PathVariable(value = \"id\") String id,\n            @ApiParam(value = \"content\") InputStream dataSetContent)", "testcase": false, "constructor": false}, {"identifier": "updateColumn", "parameters": "(\n            @PathVariable(value = \"datasetId\") @ApiParam(value = \"Id of the dataset to update\") final String datasetId,\n            @PathVariable(value = \"columnId\") @ApiParam(value = \"Id of the column to update\") final String columnId,\n            @ApiParam(value = \"content\") final InputStream body)", "modifiers": "@RequestMapping(value = \"/api/datasets/{datasetId}/column/{columnId}\", method = POST, consumes = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Update a dataset.\", consumes = APPLICATION_JSON_VALUE, // notes = \"Update a data set based on content provided in POST body with given id. For documentation purposes, body is typed as 'text/plain' but operation accepts binary content too.\") @Timed public", "return": "void", "signature": "void updateColumn(\n            @PathVariable(value = \"datasetId\") @ApiParam(value = \"Id of the dataset to update\") final String datasetId,\n            @PathVariable(value = \"columnId\") @ApiParam(value = \"Id of the column to update\") final String columnId,\n            @ApiParam(value = \"content\") final InputStream body)", "full_signature": "@RequestMapping(value = \"/api/datasets/{datasetId}/column/{columnId}\", method = POST, consumes = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Update a dataset.\", consumes = APPLICATION_JSON_VALUE, // notes = \"Update a data set based on content provided in POST body with given id. For documentation purposes, body is typed as 'text/plain' but operation accepts binary content too.\") @Timed public void updateColumn(\n            @PathVariable(value = \"datasetId\") @ApiParam(value = \"Id of the dataset to update\") final String datasetId,\n            @PathVariable(value = \"columnId\") @ApiParam(value = \"Id of the column to update\") final String columnId,\n            @ApiParam(value = \"content\") final InputStream body)", "class_method_signature": "DataSetAPI.updateColumn(\n            @PathVariable(value = \"datasetId\") @ApiParam(value = \"Id of the dataset to update\") final String datasetId,\n            @PathVariable(value = \"columnId\") @ApiParam(value = \"Id of the column to update\") final String columnId,\n            @ApiParam(value = \"content\") final InputStream body)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id,\n            @ApiParam(value = \"Whether output should be the full data set (true) or not (false).\") @RequestParam(\n                    value = \"fullContent\", defaultValue = \"false\") boolean fullContent,\n            @ApiParam(value = \"Filter for retrieved content.\") @RequestParam(value = \"filter\",\n                    defaultValue = \"\") String filter,\n            @ApiParam(value = \"Whether to include internal technical properties (true) or not (false).\") @RequestParam(\n                    value = \"includeTechnicalProperties\", defaultValue = \"false\") boolean includeTechnicalProperties)", "modifiers": "@RequestMapping(value = \"/api/datasets/{id}\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get a data set by id.\", produces = APPLICATION_JSON_VALUE, notes = \"Get a data set based on given id.\") @Timed public", "return": "DataSet", "signature": "DataSet get(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id,\n            @ApiParam(value = \"Whether output should be the full data set (true) or not (false).\") @RequestParam(\n                    value = \"fullContent\", defaultValue = \"false\") boolean fullContent,\n            @ApiParam(value = \"Filter for retrieved content.\") @RequestParam(value = \"filter\",\n                    defaultValue = \"\") String filter,\n            @ApiParam(value = \"Whether to include internal technical properties (true) or not (false).\") @RequestParam(\n                    value = \"includeTechnicalProperties\", defaultValue = \"false\") boolean includeTechnicalProperties)", "full_signature": "@RequestMapping(value = \"/api/datasets/{id}\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get a data set by id.\", produces = APPLICATION_JSON_VALUE, notes = \"Get a data set based on given id.\") @Timed public DataSet get(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id,\n            @ApiParam(value = \"Whether output should be the full data set (true) or not (false).\") @RequestParam(\n                    value = \"fullContent\", defaultValue = \"false\") boolean fullContent,\n            @ApiParam(value = \"Filter for retrieved content.\") @RequestParam(value = \"filter\",\n                    defaultValue = \"\") String filter,\n            @ApiParam(value = \"Whether to include internal technical properties (true) or not (false).\") @RequestParam(\n                    value = \"includeTechnicalProperties\", defaultValue = \"false\") boolean includeTechnicalProperties)", "class_method_signature": "DataSetAPI.get(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id,\n            @ApiParam(value = \"Whether output should be the full data set (true) or not (false).\") @RequestParam(\n                    value = \"fullContent\", defaultValue = \"false\") boolean fullContent,\n            @ApiParam(value = \"Filter for retrieved content.\") @RequestParam(value = \"filter\",\n                    defaultValue = \"\") String filter,\n            @ApiParam(value = \"Whether to include internal technical properties (true) or not (false).\") @RequestParam(\n                    value = \"includeTechnicalProperties\", defaultValue = \"false\") boolean includeTechnicalProperties)", "testcase": false, "constructor": false}, {"identifier": "getMetadata", "parameters": "(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id)", "modifiers": "@RequestMapping(value = \"/api/datasets/{id}/metadata\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get a data set metadata by id.\", produces = APPLICATION_JSON_VALUE, notes = \"Get a data set metadata based on given id.\") @Timed public", "return": "DataSetMetadata", "signature": "DataSetMetadata getMetadata(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id)", "full_signature": "@RequestMapping(value = \"/api/datasets/{id}/metadata\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get a data set metadata by id.\", produces = APPLICATION_JSON_VALUE, notes = \"Get a data set metadata based on given id.\") @Timed public DataSetMetadata getMetadata(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id)", "class_method_signature": "DataSetAPI.getMetadata(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id)", "testcase": false, "constructor": false}, {"identifier": "preview", "parameters": "(\n            @ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id,\n            @RequestParam(defaultValue = \"true\") @ApiParam(name = \"metadata\",\n                    value = \"Include metadata information in the response\") boolean metadata,\n            @RequestParam(defaultValue = \"\") @ApiParam(name = \"sheetName\",\n                    value = \"Sheet name to preview\") String sheetName)", "modifiers": "@RequestMapping(value = \"/api/datasets/preview/{id}\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get a data set by id.\", produces = APPLICATION_JSON_VALUE, notes = \"Get a data set based on given id.\") @Timed public", "return": "ResponseEntity<StreamingResponseBody>", "signature": "ResponseEntity<StreamingResponseBody> preview(\n            @ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id,\n            @RequestParam(defaultValue = \"true\") @ApiParam(name = \"metadata\",\n                    value = \"Include metadata information in the response\") boolean metadata,\n            @RequestParam(defaultValue = \"\") @ApiParam(name = \"sheetName\",\n                    value = \"Sheet name to preview\") String sheetName)", "full_signature": "@RequestMapping(value = \"/api/datasets/preview/{id}\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get a data set by id.\", produces = APPLICATION_JSON_VALUE, notes = \"Get a data set based on given id.\") @Timed public ResponseEntity<StreamingResponseBody> preview(\n            @ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id,\n            @RequestParam(defaultValue = \"true\") @ApiParam(name = \"metadata\",\n                    value = \"Include metadata information in the response\") boolean metadata,\n            @RequestParam(defaultValue = \"\") @ApiParam(name = \"sheetName\",\n                    value = \"Sheet name to preview\") String sheetName)", "class_method_signature": "DataSetAPI.preview(\n            @ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id,\n            @RequestParam(defaultValue = \"true\") @ApiParam(name = \"metadata\",\n                    value = \"Include metadata information in the response\") boolean metadata,\n            @RequestParam(defaultValue = \"\") @ApiParam(name = \"sheetName\",\n                    value = \"Sheet name to preview\") String sheetName)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "(\n            @ApiParam(value = \"Sort key (by name or date), defaults to 'date'.\") @RequestParam(\n                    defaultValue = \"creationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc), defaults to 'desc'.\") @RequestParam(\n                    defaultValue = \"desc\") Order order,\n            @ApiParam(value = \"Filter on name containing the specified name\") @RequestParam(\n                    defaultValue = \"\") String name,\n            @ApiParam(value = \"Filter on certified data sets\") @RequestParam(defaultValue = \"false\") boolean certified,\n            @ApiParam(value = \"Filter on favorite data sets\") @RequestParam(defaultValue = \"false\") boolean favorite,\n            @ApiParam(value = \"Filter on recent data sets\") @RequestParam(defaultValue = \"false\") boolean limit)", "modifiers": "@RequestMapping(value = \"/api/datasets\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"List data sets.\", produces = APPLICATION_JSON_VALUE, notes = \"Returns a list of data sets the user can use.\") @Timed public", "return": "Stream<DatasetDTO>", "signature": "Stream<DatasetDTO> list(\n            @ApiParam(value = \"Sort key (by name or date), defaults to 'date'.\") @RequestParam(\n                    defaultValue = \"creationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc), defaults to 'desc'.\") @RequestParam(\n                    defaultValue = \"desc\") Order order,\n            @ApiParam(value = \"Filter on name containing the specified name\") @RequestParam(\n                    defaultValue = \"\") String name,\n            @ApiParam(value = \"Filter on certified data sets\") @RequestParam(defaultValue = \"false\") boolean certified,\n            @ApiParam(value = \"Filter on favorite data sets\") @RequestParam(defaultValue = \"false\") boolean favorite,\n            @ApiParam(value = \"Filter on recent data sets\") @RequestParam(defaultValue = \"false\") boolean limit)", "full_signature": "@RequestMapping(value = \"/api/datasets\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"List data sets.\", produces = APPLICATION_JSON_VALUE, notes = \"Returns a list of data sets the user can use.\") @Timed public Stream<DatasetDTO> list(\n            @ApiParam(value = \"Sort key (by name or date), defaults to 'date'.\") @RequestParam(\n                    defaultValue = \"creationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc), defaults to 'desc'.\") @RequestParam(\n                    defaultValue = \"desc\") Order order,\n            @ApiParam(value = \"Filter on name containing the specified name\") @RequestParam(\n                    defaultValue = \"\") String name,\n            @ApiParam(value = \"Filter on certified data sets\") @RequestParam(defaultValue = \"false\") boolean certified,\n            @ApiParam(value = \"Filter on favorite data sets\") @RequestParam(defaultValue = \"false\") boolean favorite,\n            @ApiParam(value = \"Filter on recent data sets\") @RequestParam(defaultValue = \"false\") boolean limit)", "class_method_signature": "DataSetAPI.list(\n            @ApiParam(value = \"Sort key (by name or date), defaults to 'date'.\") @RequestParam(\n                    defaultValue = \"creationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc), defaults to 'desc'.\") @RequestParam(\n                    defaultValue = \"desc\") Order order,\n            @ApiParam(value = \"Filter on name containing the specified name\") @RequestParam(\n                    defaultValue = \"\") String name,\n            @ApiParam(value = \"Filter on certified data sets\") @RequestParam(defaultValue = \"false\") boolean certified,\n            @ApiParam(value = \"Filter on favorite data sets\") @RequestParam(defaultValue = \"false\") boolean favorite,\n            @ApiParam(value = \"Filter on recent data sets\") @RequestParam(defaultValue = \"false\") boolean limit)", "testcase": false, "constructor": false}, {"identifier": "getDetails", "parameters": "(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id)", "modifiers": "@RequestMapping(value = \"/api/datasets/{id}/details\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get a data set detail by id.\", produces = APPLICATION_JSON_VALUE, notes = \"Get a data set metadata based on given id.\") @Timed public", "return": "DatasetDetailsDTO", "signature": "DatasetDetailsDTO getDetails(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id)", "full_signature": "@RequestMapping(value = \"/api/datasets/{id}/details\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get a data set detail by id.\", produces = APPLICATION_JSON_VALUE, notes = \"Get a data set metadata based on given id.\") @Timed public DatasetDetailsDTO getDetails(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id)", "class_method_signature": "DataSetAPI.getDetails(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id)", "testcase": false, "constructor": false}, {"identifier": "getPreparation", "parameters": "(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id)", "modifiers": "@RequestMapping(value = \"/api/datasets/{id}/preparations\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get the list of preparation using a dataset by the dataset id.\", produces = APPLICATION_JSON_VALUE, notes = \"Get the list of preparation using a dataset by the dataset id.\") @Timed public", "return": "List<DatasetDetailsDTO.Preparation>", "signature": "List<DatasetDetailsDTO.Preparation> getPreparation(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id)", "full_signature": "@RequestMapping(value = \"/api/datasets/{id}/preparations\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get the list of preparation using a dataset by the dataset id.\", produces = APPLICATION_JSON_VALUE, notes = \"Get the list of preparation using a dataset by the dataset id.\") @Timed public List<DatasetDetailsDTO.Preparation> getPreparation(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id)", "class_method_signature": "DataSetAPI.getPreparation(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id)", "testcase": false, "constructor": false}, {"identifier": "listSummary", "parameters": "(\n            @ApiParam(value = \"Sort key (by name or date), defaults to 'date'.\") @RequestParam(\n                    defaultValue = \"creationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc), defaults to 'desc'.\") @RequestParam(\n                    defaultValue = \"desc\") Order order,\n            @ApiParam(value = \"Filter on name containing the specified name\") @RequestParam(\n                    defaultValue = \"\") String name,\n            @ApiParam(value = \"Filter on certified data sets\") @RequestParam(defaultValue = \"false\") boolean certified,\n            @ApiParam(value = \"Filter on favorite data sets\") @RequestParam(defaultValue = \"false\") boolean favorite,\n            @ApiParam(value = \"Filter on recent data sets\") @RequestParam(defaultValue = \"false\") boolean limit)", "modifiers": "@RequestMapping(value = \"/api/datasets/summary\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"List data sets summary.\", produces = APPLICATION_JSON_VALUE, notes = \"Returns a list of data sets summary the user can use.\") @Timed public", "return": "Stream<DatasetDTO>", "signature": "Stream<DatasetDTO> listSummary(\n            @ApiParam(value = \"Sort key (by name or date), defaults to 'date'.\") @RequestParam(\n                    defaultValue = \"creationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc), defaults to 'desc'.\") @RequestParam(\n                    defaultValue = \"desc\") Order order,\n            @ApiParam(value = \"Filter on name containing the specified name\") @RequestParam(\n                    defaultValue = \"\") String name,\n            @ApiParam(value = \"Filter on certified data sets\") @RequestParam(defaultValue = \"false\") boolean certified,\n            @ApiParam(value = \"Filter on favorite data sets\") @RequestParam(defaultValue = \"false\") boolean favorite,\n            @ApiParam(value = \"Filter on recent data sets\") @RequestParam(defaultValue = \"false\") boolean limit)", "full_signature": "@RequestMapping(value = \"/api/datasets/summary\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"List data sets summary.\", produces = APPLICATION_JSON_VALUE, notes = \"Returns a list of data sets summary the user can use.\") @Timed public Stream<DatasetDTO> listSummary(\n            @ApiParam(value = \"Sort key (by name or date), defaults to 'date'.\") @RequestParam(\n                    defaultValue = \"creationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc), defaults to 'desc'.\") @RequestParam(\n                    defaultValue = \"desc\") Order order,\n            @ApiParam(value = \"Filter on name containing the specified name\") @RequestParam(\n                    defaultValue = \"\") String name,\n            @ApiParam(value = \"Filter on certified data sets\") @RequestParam(defaultValue = \"false\") boolean certified,\n            @ApiParam(value = \"Filter on favorite data sets\") @RequestParam(defaultValue = \"false\") boolean favorite,\n            @ApiParam(value = \"Filter on recent data sets\") @RequestParam(defaultValue = \"false\") boolean limit)", "class_method_signature": "DataSetAPI.listSummary(\n            @ApiParam(value = \"Sort key (by name or date), defaults to 'date'.\") @RequestParam(\n                    defaultValue = \"creationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc), defaults to 'desc'.\") @RequestParam(\n                    defaultValue = \"desc\") Order order,\n            @ApiParam(value = \"Filter on name containing the specified name\") @RequestParam(\n                    defaultValue = \"\") String name,\n            @ApiParam(value = \"Filter on certified data sets\") @RequestParam(defaultValue = \"false\") boolean certified,\n            @ApiParam(value = \"Filter on favorite data sets\") @RequestParam(defaultValue = \"false\") boolean favorite,\n            @ApiParam(value = \"Filter on recent data sets\") @RequestParam(defaultValue = \"false\") boolean limit)", "testcase": false, "constructor": false}, {"identifier": "listCompatiblePreparations", "parameters": "(\n            @ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String dataSetId,\n            @ApiParam(value = \"Sort key (by name or date), defaults to 'modification'.\") @RequestParam(\n                    defaultValue = \"lastModificationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc), defaults to 'desc'.\") @RequestParam(\n                    defaultValue = \"desc\") Order order)", "modifiers": "@RequestMapping(value = \"/api/datasets/{id}/compatiblepreparations\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"List compatible preparations.\", produces = APPLICATION_JSON_VALUE, notes = \"Returns a list of data sets that are compatible with the specified one.\") @Timed public", "return": "Stream<PreparationDTO>", "signature": "Stream<PreparationDTO> listCompatiblePreparations(\n            @ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String dataSetId,\n            @ApiParam(value = \"Sort key (by name or date), defaults to 'modification'.\") @RequestParam(\n                    defaultValue = \"lastModificationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc), defaults to 'desc'.\") @RequestParam(\n                    defaultValue = \"desc\") Order order)", "full_signature": "@RequestMapping(value = \"/api/datasets/{id}/compatiblepreparations\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"List compatible preparations.\", produces = APPLICATION_JSON_VALUE, notes = \"Returns a list of data sets that are compatible with the specified one.\") @Timed public Stream<PreparationDTO> listCompatiblePreparations(\n            @ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String dataSetId,\n            @ApiParam(value = \"Sort key (by name or date), defaults to 'modification'.\") @RequestParam(\n                    defaultValue = \"lastModificationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc), defaults to 'desc'.\") @RequestParam(\n                    defaultValue = \"desc\") Order order)", "class_method_signature": "DataSetAPI.listCompatiblePreparations(\n            @ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String dataSetId,\n            @ApiParam(value = \"Sort key (by name or date), defaults to 'modification'.\") @RequestParam(\n                    defaultValue = \"lastModificationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc), defaults to 'desc'.\") @RequestParam(\n                    defaultValue = \"desc\") Order order)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@PathVariable(value = \"id\") @ApiParam(name = \"id\",\n            value = \"Id of the data set to delete\") String dataSetId)", "modifiers": "@RequestMapping(value = \"/api/datasets/{id}\", method = DELETE) @ApiOperation(value = \"Delete a data set by id\", notes = \"Delete a data set content based on provided id. Id should be a UUID returned by the list operation. Not valid or non existing data set id returns empty content.\") @Timed public", "return": "ResponseEntity<String>", "signature": "ResponseEntity<String> delete(@PathVariable(value = \"id\") @ApiParam(name = \"id\",\n            value = \"Id of the data set to delete\") String dataSetId)", "full_signature": "@RequestMapping(value = \"/api/datasets/{id}\", method = DELETE) @ApiOperation(value = \"Delete a data set by id\", notes = \"Delete a data set content based on provided id. Id should be a UUID returned by the list operation. Not valid or non existing data set id returns empty content.\") @Timed public ResponseEntity<String> delete(@PathVariable(value = \"id\") @ApiParam(name = \"id\",\n            value = \"Id of the data set to delete\") String dataSetId)", "class_method_signature": "DataSetAPI.delete(@PathVariable(value = \"id\") @ApiParam(name = \"id\",\n            value = \"Id of the data set to delete\") String dataSetId)", "testcase": false, "constructor": false}, {"identifier": "suggestDatasetActions", "parameters": "(@PathVariable(value = \"id\") @ApiParam(name = \"id\",\n            value = \"Data set id to get suggestions from.\") String dataSetId)", "modifiers": "@RequestMapping(value = \"/api/datasets/{id}/actions\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get suggested actions for a whole data set.\", notes = \"Returns the suggested actions for the given dataset in decreasing order of likeness.\") @Timed @Deprecated public", "return": "Stream<ActionForm>", "signature": "Stream<ActionForm> suggestDatasetActions(@PathVariable(value = \"id\") @ApiParam(name = \"id\",\n            value = \"Data set id to get suggestions from.\") String dataSetId)", "full_signature": "@RequestMapping(value = \"/api/datasets/{id}/actions\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get suggested actions for a whole data set.\", notes = \"Returns the suggested actions for the given dataset in decreasing order of likeness.\") @Timed @Deprecated public Stream<ActionForm> suggestDatasetActions(@PathVariable(value = \"id\") @ApiParam(name = \"id\",\n            value = \"Data set id to get suggestions from.\") String dataSetId)", "class_method_signature": "DataSetAPI.suggestDatasetActions(@PathVariable(value = \"id\") @ApiParam(name = \"id\",\n            value = \"Data set id to get suggestions from.\") String dataSetId)", "testcase": false, "constructor": false}, {"identifier": "getDatasetsLookupActions", "parameters": "()", "modifiers": "@RequestMapping(value = \"/api/datasets/actions/lookup\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get lookup actions for all data sets.\", notes = \"Returns the lookup actions for the datasets.\") @Timed public", "return": "Stream<ActionForm>", "signature": "Stream<ActionForm> getDatasetsLookupActions()", "full_signature": "@RequestMapping(value = \"/api/datasets/actions/lookup\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get lookup actions for all data sets.\", notes = \"Returns the lookup actions for the datasets.\") @Timed public Stream<ActionForm> getDatasetsLookupActions()", "class_method_signature": "DataSetAPI.getDatasetsLookupActions()", "testcase": false, "constructor": false}, {"identifier": "favorite", "parameters": "(\n            @ApiParam(value = \"Id of the favorite data set \") @PathVariable(value = \"id\") String id,\n            @RequestParam(defaultValue = \"false\") @ApiParam(name = \"unset\",\n                    value = \"When true, will remove the dataset from favorites, if false (default) this will set the dataset as favorite.\") boolean unset)", "modifiers": "@RequestMapping(value = \"/api/datasets/favorite/{id}\", method = POST, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Set or Unset the dataset as favorite for the current user.\", produces = TEXT_PLAIN_VALUE, // notes = \"Specify if a dataset is or is not a favorite for the current user.\") @Timed public", "return": "Callable<String>", "signature": "Callable<String> favorite(\n            @ApiParam(value = \"Id of the favorite data set \") @PathVariable(value = \"id\") String id,\n            @RequestParam(defaultValue = \"false\") @ApiParam(name = \"unset\",\n                    value = \"When true, will remove the dataset from favorites, if false (default) this will set the dataset as favorite.\") boolean unset)", "full_signature": "@RequestMapping(value = \"/api/datasets/favorite/{id}\", method = POST, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Set or Unset the dataset as favorite for the current user.\", produces = TEXT_PLAIN_VALUE, // notes = \"Specify if a dataset is or is not a favorite for the current user.\") @Timed public Callable<String> favorite(\n            @ApiParam(value = \"Id of the favorite data set \") @PathVariable(value = \"id\") String id,\n            @RequestParam(defaultValue = \"false\") @ApiParam(name = \"unset\",\n                    value = \"When true, will remove the dataset from favorites, if false (default) this will set the dataset as favorite.\") boolean unset)", "class_method_signature": "DataSetAPI.favorite(\n            @ApiParam(value = \"Id of the favorite data set \") @PathVariable(value = \"id\") String id,\n            @RequestParam(defaultValue = \"false\") @ApiParam(name = \"unset\",\n                    value = \"When true, will remove the dataset from favorites, if false (default) this will set the dataset as favorite.\") boolean unset)", "testcase": false, "constructor": false}, {"identifier": "listEncodings", "parameters": "()", "modifiers": "@RequestMapping(value = \"/api/datasets/encodings\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"List supported dataset encodings.\", notes = \"Returns the supported dataset encodings.\") @Timed @PublicAPI public", "return": "Stream<String>", "signature": "Stream<String> listEncodings()", "full_signature": "@RequestMapping(value = \"/api/datasets/encodings\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"List supported dataset encodings.\", notes = \"Returns the supported dataset encodings.\") @Timed @PublicAPI public Stream<String> listEncodings()", "class_method_signature": "DataSetAPI.listEncodings()", "testcase": false, "constructor": false}, {"identifier": "getImportParameters", "parameters": "(@PathVariable(\"import\") final String importType)", "modifiers": "@RequestMapping(value = \"/api/datasets/imports/{import}/parameters\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Fetch the parameters needed to imports a dataset.\", notes = \"Returns the parameters needed to imports a dataset.\") @Timed @PublicAPI public", "return": "ResponseEntity<StreamingResponseBody>", "signature": "ResponseEntity<StreamingResponseBody> getImportParameters(@PathVariable(\"import\") final String importType)", "full_signature": "@RequestMapping(value = \"/api/datasets/imports/{import}/parameters\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Fetch the parameters needed to imports a dataset.\", notes = \"Returns the parameters needed to imports a dataset.\") @Timed @PublicAPI public ResponseEntity<StreamingResponseBody> getImportParameters(@PathVariable(\"import\") final String importType)", "class_method_signature": "DataSetAPI.getImportParameters(@PathVariable(\"import\") final String importType)", "testcase": false, "constructor": false}, {"identifier": "getDataSetColumnSemanticCategories", "parameters": "(\n            @ApiParam(value = \"The dataset id\") @PathVariable String datasetId,\n            @ApiParam(value = \"The column id\") @PathVariable String columnId)", "modifiers": "@RequestMapping(value = \"/api/datasets/{datasetId}/columns/{columnId}/types\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"list the types of the wanted column\", notes = \"This list can be used by user to change the column type.\") @Timed @PublicAPI public", "return": "Stream<SemanticDomain>", "signature": "Stream<SemanticDomain> getDataSetColumnSemanticCategories(\n            @ApiParam(value = \"The dataset id\") @PathVariable String datasetId,\n            @ApiParam(value = \"The column id\") @PathVariable String columnId)", "full_signature": "@RequestMapping(value = \"/api/datasets/{datasetId}/columns/{columnId}/types\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"list the types of the wanted column\", notes = \"This list can be used by user to change the column type.\") @Timed @PublicAPI public Stream<SemanticDomain> getDataSetColumnSemanticCategories(\n            @ApiParam(value = \"The dataset id\") @PathVariable String datasetId,\n            @ApiParam(value = \"The column id\") @PathVariable String columnId)", "class_method_signature": "DataSetAPI.getDataSetColumnSemanticCategories(\n            @ApiParam(value = \"The dataset id\") @PathVariable String datasetId,\n            @ApiParam(value = \"The column id\") @PathVariable String columnId)", "testcase": false, "constructor": false}], "file": "dataprep-api/src/main/java/org/talend/dataprep/api/service/DataSetAPI.java"}, "focal_method": {"identifier": "get", "parameters": "(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id,\n            @ApiParam(value = \"Whether output should be the full data set (true) or not (false).\") @RequestParam(\n                    value = \"fullContent\", defaultValue = \"false\") boolean fullContent,\n            @ApiParam(value = \"Filter for retrieved content.\") @RequestParam(value = \"filter\",\n                    defaultValue = \"\") String filter,\n            @ApiParam(value = \"Whether to include internal technical properties (true) or not (false).\") @RequestParam(\n                    value = \"includeTechnicalProperties\", defaultValue = \"false\") boolean includeTechnicalProperties)", "modifiers": "@RequestMapping(value = \"/api/datasets/{id}\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get a data set by id.\", produces = APPLICATION_JSON_VALUE, notes = \"Get a data set based on given id.\") @Timed public", "return": "DataSet", "body": "@RequestMapping(value = \"/api/datasets/{id}\", method = GET, produces = APPLICATION_JSON_VALUE)\n    @ApiOperation(value = \"Get a data set by id.\", produces = APPLICATION_JSON_VALUE,\n            notes = \"Get a data set based on given id.\")\n    @Timed\n    public DataSet get(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id,\n            @ApiParam(value = \"Whether output should be the full data set (true) or not (false).\") @RequestParam(\n                    value = \"fullContent\", defaultValue = \"false\") boolean fullContent,\n            @ApiParam(value = \"Filter for retrieved content.\") @RequestParam(value = \"filter\",\n                    defaultValue = \"\") String filter,\n            @ApiParam(value = \"Whether to include internal technical properties (true) or not (false).\") @RequestParam(\n                    value = \"includeTechnicalProperties\", defaultValue = \"false\") boolean includeTechnicalProperties) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Requesting dataset #{} (pool: {})...\", id, getConnectionStats());\n        }\n        try {\n            return datasetClient.getDataSet(id, fullContent, includeTechnicalProperties, filter);\n        } finally {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Request dataset #{} (pool: {}) done.\", id, getConnectionStats());\n            }\n        }\n    }", "signature": "DataSet get(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id,\n            @ApiParam(value = \"Whether output should be the full data set (true) or not (false).\") @RequestParam(\n                    value = \"fullContent\", defaultValue = \"false\") boolean fullContent,\n            @ApiParam(value = \"Filter for retrieved content.\") @RequestParam(value = \"filter\",\n                    defaultValue = \"\") String filter,\n            @ApiParam(value = \"Whether to include internal technical properties (true) or not (false).\") @RequestParam(\n                    value = \"includeTechnicalProperties\", defaultValue = \"false\") boolean includeTechnicalProperties)", "full_signature": "@RequestMapping(value = \"/api/datasets/{id}\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get a data set by id.\", produces = APPLICATION_JSON_VALUE, notes = \"Get a data set based on given id.\") @Timed public DataSet get(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id,\n            @ApiParam(value = \"Whether output should be the full data set (true) or not (false).\") @RequestParam(\n                    value = \"fullContent\", defaultValue = \"false\") boolean fullContent,\n            @ApiParam(value = \"Filter for retrieved content.\") @RequestParam(value = \"filter\",\n                    defaultValue = \"\") String filter,\n            @ApiParam(value = \"Whether to include internal technical properties (true) or not (false).\") @RequestParam(\n                    value = \"includeTechnicalProperties\", defaultValue = \"false\") boolean includeTechnicalProperties)", "class_method_signature": "DataSetAPI.get(@ApiParam(value = \"Id of the data set to get\") @PathVariable(value = \"id\") String id,\n            @ApiParam(value = \"Whether output should be the full data set (true) or not (false).\") @RequestParam(\n                    value = \"fullContent\", defaultValue = \"false\") boolean fullContent,\n            @ApiParam(value = \"Filter for retrieved content.\") @RequestParam(value = \"filter\",\n                    defaultValue = \"\") String filter,\n            @ApiParam(value = \"Whether to include internal technical properties (true) or not (false).\") @RequestParam(\n                    value = \"includeTechnicalProperties\", defaultValue = \"false\") boolean includeTechnicalProperties)", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug", "getConnectionStats", "getDataSet", "isDebugEnabled", "debug", "getConnectionStats"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}