{"test_class": {"identifier": "RemoveListDuplicatedElementsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RemoveListDuplicatedElements removeDuplicates;", "modifier": "private", "type": "RemoveListDuplicatedElements", "declarator": "removeDuplicates", "var_name": "removeDuplicates"}], "file": "algs/src/test/java/com/github/pedrovgs/problem57/RemoveListDuplicatedElementsTest.java"}, "test_case": {"identifier": "shouldNotAcceptNullInstancesAsParameter", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void shouldNotAcceptNullInstancesAsParameter() {\n    removeDuplicates.remove(null);\n  }", "signature": "void shouldNotAcceptNullInstancesAsParameter()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void shouldNotAcceptNullInstancesAsParameter()", "class_method_signature": "RemoveListDuplicatedElementsTest.shouldNotAcceptNullInstancesAsParameter()", "testcase": true, "constructor": false, "invocations": ["remove"]}, "focal_class": {"identifier": "RemoveListDuplicatedElements", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "remove", "parameters": "(ListNode<Integer> head)", "modifiers": "public", "return": "void", "signature": "void remove(ListNode<Integer> head)", "full_signature": "public void remove(ListNode<Integer> head)", "class_method_signature": "RemoveListDuplicatedElements.remove(ListNode<Integer> head)", "testcase": false, "constructor": false}, {"identifier": "remove2", "parameters": "(ListNode<Integer> head)", "modifiers": "public", "return": "void", "signature": "void remove2(ListNode<Integer> head)", "full_signature": "public void remove2(ListNode<Integer> head)", "class_method_signature": "RemoveListDuplicatedElements.remove2(ListNode<Integer> head)", "testcase": false, "constructor": false}, {"identifier": "validateInput", "parameters": "(ListNode head)", "modifiers": "private", "return": "void", "signature": "void validateInput(ListNode head)", "full_signature": "private void validateInput(ListNode head)", "class_method_signature": "RemoveListDuplicatedElements.validateInput(ListNode head)", "testcase": false, "constructor": false}, {"identifier": "removeNextNodesWithValue", "parameters": "(ListNode<Integer> srcNode)", "modifiers": "private", "return": "void", "signature": "void removeNextNodesWithValue(ListNode<Integer> srcNode)", "full_signature": "private void removeNextNodesWithValue(ListNode<Integer> srcNode)", "class_method_signature": "RemoveListDuplicatedElements.removeNextNodesWithValue(ListNode<Integer> srcNode)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem57/RemoveListDuplicatedElements.java"}, "focal_method": {"identifier": "remove", "parameters": "(ListNode<Integer> head)", "modifiers": "public", "return": "void", "body": "public void remove(ListNode<Integer> head) {\n    validateInput(head);\n\n    Set<Integer> elements = new HashSet<Integer>();\n    ListNode<Integer> currentNode = head;\n    ListNode<Integer> prevNode = null;\n    while (currentNode != null) {\n      if (elements.contains(currentNode.getData())) {\n        prevNode.setNext(currentNode.getNext());\n      } else {\n        elements.add(currentNode.getData());\n      }\n      prevNode = currentNode;\n      currentNode = currentNode.getNext();\n    }\n  }", "signature": "void remove(ListNode<Integer> head)", "full_signature": "public void remove(ListNode<Integer> head)", "class_method_signature": "RemoveListDuplicatedElements.remove(ListNode<Integer> head)", "testcase": false, "constructor": false, "invocations": ["validateInput", "contains", "getData", "setNext", "getNext", "add", "getData", "getNext"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}