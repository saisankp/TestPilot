{"test_class": {"identifier": "EbtsUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(EbtsUtilsTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(EbtsUtilsTest.class)", "var_name": "log"}], "file": "Jet/src/test/java/org/mitre/jet/ebts/EbtsUtilsTest.java"}, "test_case": {"identifier": "testByteArrayToInt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testByteArrayToInt() throws  Exception {\n        byte[] data = new byte[4];\n        data[0] = 0x00;\n        data[1] = 0x00;\n        data[2] = (byte) 0x98;\n        data[3] = (byte) 0xF2;\n\n        int val = EbtsUtils.byteArrayToInt(data);\n        assertEquals(39154,val);\n\n        log.debug(\"{}\",val);\n\n        data = new byte[1];\n        data[0] = (byte) 0xFF;\n\n        val = EbtsUtils.byteArrayToInt(data);\n\n        log.debug(\"{}\",val);\n\n        data = new byte[2];\n        data[0] = (byte) 0xFF;\n        data[1] = (byte) 0xFF;\n\n        val = EbtsUtils.byteArrayToInt(data);\n\n        log.debug(\"{}\",val);\n\n    }", "signature": "void testByteArrayToInt()", "full_signature": "@Test public void testByteArrayToInt()", "class_method_signature": "EbtsUtilsTest.testByteArrayToInt()", "testcase": true, "constructor": false, "invocations": ["byteArrayToInt", "assertEquals", "debug", "byteArrayToInt", "debug", "byteArrayToInt", "debug"]}, "focal_class": {"identifier": "EbtsUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(EbtsUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(EbtsUtils.class)", "var_name": "log"}, {"original_string": "private static final Map<Integer, HashBiMap<Integer, String>> tagMap = loadPropertiesFile();", "modifier": "private static final", "type": "Map<Integer, HashBiMap<Integer, String>>", "declarator": "tagMap = loadPropertiesFile()", "var_name": "tagMap"}, {"original_string": "private static final Set<Integer> binaryHeaderTypes = Sets.newHashSet(3,4,5,6,7,8);", "modifier": "private static final", "type": "Set<Integer>", "declarator": "binaryHeaderTypes = Sets.newHashSet(3,4,5,6,7,8)", "var_name": "binaryHeaderTypes"}, {"original_string": "private static final Set<Integer> genericRecordTypes = Sets.newHashSet(1,2,9,10,13,14,15,16,17);", "modifier": "private static final", "type": "Set<Integer>", "declarator": "genericRecordTypes = Sets.newHashSet(1,2,9,10,13,14,15,16,17)", "var_name": "genericRecordTypes"}], "methods": [{"identifier": "EbtsUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " EbtsUtils()", "full_signature": "private  EbtsUtils()", "class_method_signature": "EbtsUtils.EbtsUtils()", "testcase": false, "constructor": true}, {"identifier": "getBinaryHeaderTypes", "parameters": "()", "modifiers": "public static", "return": "Set<Integer>", "signature": "Set<Integer> getBinaryHeaderTypes()", "full_signature": "public static Set<Integer> getBinaryHeaderTypes()", "class_method_signature": "EbtsUtils.getBinaryHeaderTypes()", "testcase": false, "constructor": false}, {"identifier": "getGenericRecordTypes", "parameters": "()", "modifiers": "public static", "return": "Set<Integer>", "signature": "Set<Integer> getGenericRecordTypes()", "full_signature": "public static Set<Integer> getGenericRecordTypes()", "class_method_signature": "EbtsUtils.getGenericRecordTypes()", "testcase": false, "constructor": false}, {"identifier": "ensureExistence", "parameters": "(final Map<Integer, HashBiMap<Integer, String>> map, final int recordType)", "modifiers": "private static", "return": "void", "signature": "void ensureExistence(final Map<Integer, HashBiMap<Integer, String>> map, final int recordType)", "full_signature": "private static void ensureExistence(final Map<Integer, HashBiMap<Integer, String>> map, final int recordType)", "class_method_signature": "EbtsUtils.ensureExistence(final Map<Integer, HashBiMap<Integer, String>> map, final int recordType)", "testcase": false, "constructor": false}, {"identifier": "loadPropertiesFile", "parameters": "()", "modifiers": "private static", "return": "Map<Integer,HashBiMap<Integer,String>>", "signature": "Map<Integer,HashBiMap<Integer,String>> loadPropertiesFile()", "full_signature": "private static Map<Integer,HashBiMap<Integer,String>> loadPropertiesFile()", "class_method_signature": "EbtsUtils.loadPropertiesFile()", "testcase": false, "constructor": false}, {"identifier": "tagToFieldNumber", "parameters": "(final String tag)", "modifiers": "public static", "return": "int", "signature": "int tagToFieldNumber(final String tag)", "full_signature": "public static int tagToFieldNumber(final String tag)", "class_method_signature": "EbtsUtils.tagToFieldNumber(final String tag)", "testcase": false, "constructor": false}, {"identifier": "tagToRecordNumber", "parameters": "(final String tag)", "modifiers": "public static", "return": "int", "signature": "int tagToRecordNumber(final String tag)", "full_signature": "public static int tagToRecordNumber(final String tag)", "class_method_signature": "EbtsUtils.tagToRecordNumber(final String tag)", "testcase": false, "constructor": false}, {"identifier": "splitTag", "parameters": "(final String tag)", "modifiers": "public static", "return": "int[]", "signature": "int[] splitTag(final String tag)", "full_signature": "public static int[] splitTag(final String tag)", "class_method_signature": "EbtsUtils.splitTag(final String tag)", "testcase": false, "constructor": false}, {"identifier": "fieldNumberToMnemonic", "parameters": "(final int recordType, final int fieldNumber)", "modifiers": "public static", "return": "String", "signature": "String fieldNumberToMnemonic(final int recordType, final int fieldNumber)", "full_signature": "public static String fieldNumberToMnemonic(final int recordType, final int fieldNumber)", "class_method_signature": "EbtsUtils.fieldNumberToMnemonic(final int recordType, final int fieldNumber)", "testcase": false, "constructor": false}, {"identifier": "fieldTagToMnemonic", "parameters": "(final String tag)", "modifiers": "public static", "return": "String", "signature": "String fieldTagToMnemonic(final String tag)", "full_signature": "public static String fieldTagToMnemonic(final String tag)", "class_method_signature": "EbtsUtils.fieldTagToMnemonic(final String tag)", "testcase": false, "constructor": false}, {"identifier": "fieldMnemonicToNumber", "parameters": "(final int recordType, final String fieldIdentifier)", "modifiers": "public static", "return": "int", "signature": "int fieldMnemonicToNumber(final int recordType, final String fieldIdentifier)", "full_signature": "public static int fieldMnemonicToNumber(final int recordType, final String fieldIdentifier)", "class_method_signature": "EbtsUtils.fieldMnemonicToNumber(final int recordType, final String fieldIdentifier)", "testcase": false, "constructor": false}, {"identifier": "convertOccurrenceList", "parameters": "(final List<Occurrence> occurrences)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> convertOccurrenceList(final List<Occurrence> occurrences)", "full_signature": "public static List<String> convertOccurrenceList(final List<Occurrence> occurrences)", "class_method_signature": "EbtsUtils.convertOccurrenceList(final List<Occurrence> occurrences)", "testcase": false, "constructor": false}, {"identifier": "convertStringList", "parameters": "(final List<String> strings)", "modifiers": "public static", "return": "List<Occurrence>", "signature": "List<Occurrence> convertStringList(final List<String> strings)", "full_signature": "public static List<Occurrence> convertStringList(final List<String> strings)", "class_method_signature": "EbtsUtils.convertStringList(final List<String> strings)", "testcase": false, "constructor": false}, {"identifier": "convertStringList", "parameters": "(final List<String> strings, final int limit)", "modifiers": "public static", "return": "List<Occurrence>", "signature": "List<Occurrence> convertStringList(final List<String> strings, final int limit)", "full_signature": "public static List<Occurrence> convertStringList(final List<String> strings, final int limit)", "class_method_signature": "EbtsUtils.convertStringList(final List<String> strings, final int limit)", "testcase": false, "constructor": false}, {"identifier": "convertStringListToSubFields", "parameters": "(final List<String> strings)", "modifiers": "public static", "return": "List<SubField>", "signature": "List<SubField> convertStringListToSubFields(final List<String> strings)", "full_signature": "public static List<SubField> convertStringListToSubFields(final List<String> strings)", "class_method_signature": "EbtsUtils.convertStringListToSubFields(final List<String> strings)", "testcase": false, "constructor": false}, {"identifier": "byteArrayToInt", "parameters": "(final byte[] bytes)", "modifiers": "public static", "return": "int", "signature": "int byteArrayToInt(final byte[] bytes)", "full_signature": "public static int byteArrayToInt(final byte[] bytes)", "class_method_signature": "EbtsUtils.byteArrayToInt(final byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "getMimeExtension", "parameters": "(final byte[] data)", "modifiers": "public static", "return": "String", "signature": "String getMimeExtension(final byte[] data)", "full_signature": "public static String getMimeExtension(final byte[] data)", "class_method_signature": "EbtsUtils.getMimeExtension(final byte[] data)", "testcase": false, "constructor": false}], "file": "Jet/src/main/java/org/mitre/jet/ebts/EbtsUtils.java"}, "focal_method": {"identifier": "byteArrayToInt", "parameters": "(final byte[] bytes)", "modifiers": "public static", "return": "int", "body": "public static int byteArrayToInt(final byte[] bytes) {\n\n        if (bytes.length == 4) {\n            return Ints.fromByteArray(bytes);\n        } else if (bytes.length == 2) {\n            return Shorts.fromByteArray(bytes);\n        } else if (bytes.length == 1) {\n            return bytes[0] & 0xff;\n        } else {\n            throw new InputMismatchException(\"invalid data length of \"+bytes.length);\n        }\n    }", "signature": "int byteArrayToInt(final byte[] bytes)", "full_signature": "public static int byteArrayToInt(final byte[] bytes)", "class_method_signature": "EbtsUtils.byteArrayToInt(final byte[] bytes)", "testcase": false, "constructor": false, "invocations": ["fromByteArray", "fromByteArray"]}, "repository": {"repo_id": 33329835, "url": "https://github.com/ebts/jet", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 13, "size": 4035, "license": "licensed"}}