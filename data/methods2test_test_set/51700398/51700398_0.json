{"test_class": {"identifier": "JwtTokenUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate JwtTokenUtil jwtTokenUtil;", "modifier": "@Autowired\n\tprivate", "type": "JwtTokenUtil", "declarator": "jwtTokenUtil", "var_name": "jwtTokenUtil"}], "file": "trading-webapp/src/test/java/fr/ymanvieu/trading/webapp/jwt/JwtTokenUtilTest.java"}, "test_case": {"identifier": "testGenerateToken", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGenerateToken() throws Exception {\n\t\t// GIVEN\n\t\tInstant start = Instant.now().minusSeconds(1);\n\t\tUser userDetails = new User(\"username\", \"\", asList(new SimpleGrantedAuthority(\"USER\"), new SimpleGrantedAuthority(\"ADMIN\")));\n\t\tDuration expiration = Duration.ofMinutes(30);\n\t\t\n\t\t// WHEN\n\t\tString token = jwtTokenUtil.generateToken(userDetails);\n\t\t\n\t\t\n\t\t// THEN\n\t\tassertThat(jwtTokenUtil.getUsernameFromToken(token)).isEqualTo(\"username\");\n\t\tassertThat(jwtTokenUtil.getIssuedAtDateFromToken(token)).isBetween(start, Instant.now());\n\t\tassertThat(jwtTokenUtil.getExpirationDateFromToken(token)).isBetween(start.plus(expiration), Instant.now().plus(expiration));\n\t\n\n\t\tString[] roles = jwtTokenUtil.getClaimFromToken(token, c -> c.get(JwtTokenUtil.CLAIM_KEY_ROLES, String.class)).split(JwtTokenUtil.ROLES_CLAIM_DELIMITER);\n\t\t\n\t\tassertThat(roles).containsExactlyInAnyOrder(\"ADMIN\", \"USER\");\t\n\t}", "signature": "void testGenerateToken()", "full_signature": "@Test public void testGenerateToken()", "class_method_signature": "JwtTokenUtilTest.testGenerateToken()", "testcase": true, "constructor": false, "invocations": ["minusSeconds", "now", "asList", "ofMinutes", "generateToken", "isEqualTo", "assertThat", "getUsernameFromToken", "isBetween", "assertThat", "getIssuedAtDateFromToken", "now", "isBetween", "assertThat", "getExpirationDateFromToken", "plus", "plus", "now", "split", "getClaimFromToken", "get", "containsExactlyInAnyOrder", "assertThat"]}, "focal_class": {"identifier": "JwtTokenUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String CLAIM_KEY_ROLES = \"roles\";", "modifier": "static final", "type": "String", "declarator": "CLAIM_KEY_ROLES = \"roles\"", "var_name": "CLAIM_KEY_ROLES"}, {"original_string": "static final String ROLES_CLAIM_DELIMITER = \",\";", "modifier": "static final", "type": "String", "declarator": "ROLES_CLAIM_DELIMITER = \",\"", "var_name": "ROLES_CLAIM_DELIMITER"}, {"original_string": "@Autowired\n    private JwtProperties jwtConfig;", "modifier": "@Autowired\n    private", "type": "JwtProperties", "declarator": "jwtConfig", "var_name": "jwtConfig"}], "methods": [{"identifier": "getUsernameFromToken", "parameters": "(String token)", "modifiers": "public", "return": "String", "signature": "String getUsernameFromToken(String token)", "full_signature": "public String getUsernameFromToken(String token)", "class_method_signature": "JwtTokenUtil.getUsernameFromToken(String token)", "testcase": false, "constructor": false}, {"identifier": "getIssuedAtDateFromToken", "parameters": "(String token)", "modifiers": "public", "return": "Instant", "signature": "Instant getIssuedAtDateFromToken(String token)", "full_signature": "public Instant getIssuedAtDateFromToken(String token)", "class_method_signature": "JwtTokenUtil.getIssuedAtDateFromToken(String token)", "testcase": false, "constructor": false}, {"identifier": "getExpirationDateFromToken", "parameters": "(String token)", "modifiers": "public", "return": "Instant", "signature": "Instant getExpirationDateFromToken(String token)", "full_signature": "public Instant getExpirationDateFromToken(String token)", "class_method_signature": "JwtTokenUtil.getExpirationDateFromToken(String token)", "testcase": false, "constructor": false}, {"identifier": "getClaimFromToken", "parameters": "(String token, Function<Claims, T> claimsResolver)", "modifiers": "public", "return": "T", "signature": "T getClaimFromToken(String token, Function<Claims, T> claimsResolver)", "full_signature": "public T getClaimFromToken(String token, Function<Claims, T> claimsResolver)", "class_method_signature": "JwtTokenUtil.getClaimFromToken(String token, Function<Claims, T> claimsResolver)", "testcase": false, "constructor": false}, {"identifier": "getAllClaimsFromToken", "parameters": "(String token)", "modifiers": "private", "return": "Claims", "signature": "Claims getAllClaimsFromToken(String token)", "full_signature": "private Claims getAllClaimsFromToken(String token)", "class_method_signature": "JwtTokenUtil.getAllClaimsFromToken(String token)", "testcase": false, "constructor": false}, {"identifier": "isTokenExpired", "parameters": "(String token)", "modifiers": "private", "return": "Boolean", "signature": "Boolean isTokenExpired(String token)", "full_signature": "private Boolean isTokenExpired(String token)", "class_method_signature": "JwtTokenUtil.isTokenExpired(String token)", "testcase": false, "constructor": false}, {"identifier": "isCreatedBeforeLastPasswordReset", "parameters": "(Instant created, Instant lastPasswordReset)", "modifiers": "private", "return": "Boolean", "signature": "Boolean isCreatedBeforeLastPasswordReset(Instant created, Instant lastPasswordReset)", "full_signature": "private Boolean isCreatedBeforeLastPasswordReset(Instant created, Instant lastPasswordReset)", "class_method_signature": "JwtTokenUtil.isCreatedBeforeLastPasswordReset(Instant created, Instant lastPasswordReset)", "testcase": false, "constructor": false}, {"identifier": "generateToken", "parameters": "(UserDetails userDetails)", "modifiers": "public", "return": "String", "signature": "String generateToken(UserDetails userDetails)", "full_signature": "public String generateToken(UserDetails userDetails)", "class_method_signature": "JwtTokenUtil.generateToken(UserDetails userDetails)", "testcase": false, "constructor": false}, {"identifier": "doGenerateToken", "parameters": "(String subject, Map<String, Object> claims)", "modifiers": "private", "return": "String", "signature": "String doGenerateToken(String subject, Map<String, Object> claims)", "full_signature": "private String doGenerateToken(String subject, Map<String, Object> claims)", "class_method_signature": "JwtTokenUtil.doGenerateToken(String subject, Map<String, Object> claims)", "testcase": false, "constructor": false}, {"identifier": "canTokenBeRefreshed", "parameters": "(String token, Instant lastPasswordReset)", "modifiers": "public", "return": "Boolean", "signature": "Boolean canTokenBeRefreshed(String token, Instant lastPasswordReset)", "full_signature": "public Boolean canTokenBeRefreshed(String token, Instant lastPasswordReset)", "class_method_signature": "JwtTokenUtil.canTokenBeRefreshed(String token, Instant lastPasswordReset)", "testcase": false, "constructor": false}, {"identifier": "generateRefreshToken", "parameters": "(String subject)", "modifiers": "public", "return": "String", "signature": "String generateRefreshToken(String subject)", "full_signature": "public String generateRefreshToken(String subject)", "class_method_signature": "JwtTokenUtil.generateRefreshToken(String subject)", "testcase": false, "constructor": false}, {"identifier": "validateToken", "parameters": "(String token, UserDetails userDetails)", "modifiers": "public", "return": "Boolean", "signature": "Boolean validateToken(String token, UserDetails userDetails)", "full_signature": "public Boolean validateToken(String token, UserDetails userDetails)", "class_method_signature": "JwtTokenUtil.validateToken(String token, UserDetails userDetails)", "testcase": false, "constructor": false}, {"identifier": "getGrantedAuthoritiesFromToken", "parameters": "(String authToken)", "modifiers": "public", "return": "Collection<? extends GrantedAuthority>", "signature": "Collection<? extends GrantedAuthority> getGrantedAuthoritiesFromToken(String authToken)", "full_signature": "public Collection<? extends GrantedAuthority> getGrantedAuthoritiesFromToken(String authToken)", "class_method_signature": "JwtTokenUtil.getGrantedAuthoritiesFromToken(String authToken)", "testcase": false, "constructor": false}], "file": "trading-webapp/src/main/java/fr/ymanvieu/trading/webapp/jwt/JwtTokenUtil.java"}, "focal_method": {"identifier": "generateToken", "parameters": "(UserDetails userDetails)", "modifiers": "public", "return": "String", "body": "public String generateToken(UserDetails userDetails) {\n        Map<String, Object> claims = new HashMap<>();\n        claims.put(CLAIM_KEY_ROLES, userDetails.getAuthorities().stream().map(GrantedAuthority::getAuthority).collect(joining(ROLES_CLAIM_DELIMITER)));\n        \n        log.info(\"generateToken()\");\n        \n        return doGenerateToken(userDetails.getUsername(), claims);\n    }", "signature": "String generateToken(UserDetails userDetails)", "full_signature": "public String generateToken(UserDetails userDetails)", "class_method_signature": "JwtTokenUtil.generateToken(UserDetails userDetails)", "testcase": false, "constructor": false, "invocations": ["put", "collect", "map", "stream", "getAuthorities", "joining", "info", "doGenerateToken", "getUsername"]}, "repository": {"repo_id": 51700398, "url": "https://github.com/ymanvieu/trading", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 988, "license": "licensed"}}