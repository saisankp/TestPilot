{"test_class": {"identifier": "TransientScottyEngineTest", "superclass": "", "interfaces": "", "fields": [], "file": "projects/copper-coreengine/src/test/java/org/copperengine/core/tranzient/TransientScottyEngineTest.java"}, "test_case": {"identifier": "testStartup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStartup() throws Exception {\n        TransientEngineFactory factory = new TransientEngineFactory() {\n            @Override\n            protected File getWorkflowSourceDirectory() {\n                return new File(\"./src/test/workflow\");\n            }\n        };\n        TransientScottyEngine engine = factory.create();\n        try {\n            org.junit.Assert.assertEquals(\"STARTED\", engine.getState());\n            engine.run(\"test.HelloWorldWorkflow\", null);\n        } finally {\n            engine.shutdown();\n        }\n    }", "signature": "void testStartup()", "full_signature": "@Test public void testStartup()", "class_method_signature": "TransientScottyEngineTest.testStartup()", "testcase": true, "constructor": false, "invocations": ["create", "assertEquals", "getState", "run", "shutdown"]}, "focal_class": {"identifier": "TransientScottyEngine", "superclass": "extends AbstractProcessingEngine", "interfaces": "implements ProcessingEngine, ProcessingEngineMXBean", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TransientScottyEngine.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TransientScottyEngine.class)", "var_name": "logger"}, {"original_string": "private final Map<String, CorrelationSet> correlationMap = new HashMap<String, CorrelationSet>(50000);", "modifier": "private final", "type": "Map<String, CorrelationSet>", "declarator": "correlationMap = new HashMap<String, CorrelationSet>(50000)", "var_name": "correlationMap"}, {"original_string": "private final Map<String, Workflow<?>> workflowMap = new ConcurrentHashMap<String, Workflow<?>>(50000);", "modifier": "private final", "type": "Map<String, Workflow<?>>", "declarator": "workflowMap = new ConcurrentHashMap<String, Workflow<?>>(50000)", "var_name": "workflowMap"}, {"original_string": "private ProcessorPoolManager<TransientProcessorPool> poolManager;", "modifier": "private", "type": "ProcessorPoolManager<TransientProcessorPool>", "declarator": "poolManager", "var_name": "poolManager"}, {"original_string": "private TimeoutManager timeoutManager;", "modifier": "private", "type": "TimeoutManager", "declarator": "timeoutManager", "var_name": "timeoutManager"}, {"original_string": "private EarlyResponseContainer earlyResponseContainer;", "modifier": "private", "type": "EarlyResponseContainer", "declarator": "earlyResponseContainer", "var_name": "earlyResponseContainer"}, {"original_string": "private TicketPoolManager ticketPoolManager;", "modifier": "private", "type": "TicketPoolManager", "declarator": "ticketPoolManager", "var_name": "ticketPoolManager"}, {"original_string": "private final AtomicLong sequenceIdFactory = new AtomicLong(System.currentTimeMillis() * 10000L);", "modifier": "private final", "type": "AtomicLong", "declarator": "sequenceIdFactory = new AtomicLong(System.currentTimeMillis() * 10000L)", "var_name": "sequenceIdFactory"}, {"original_string": "private final AtomicLong errorWFCounter = new AtomicLong(0);", "modifier": "private final", "type": "AtomicLong", "declarator": "errorWFCounter = new AtomicLong(0)", "var_name": "errorWFCounter"}], "methods": [{"identifier": "setTicketPoolManager", "parameters": "(TicketPoolManager ticketPoolManager)", "modifiers": "public", "return": "void", "signature": "void setTicketPoolManager(TicketPoolManager ticketPoolManager)", "full_signature": "public void setTicketPoolManager(TicketPoolManager ticketPoolManager)", "class_method_signature": "TransientScottyEngine.setTicketPoolManager(TicketPoolManager ticketPoolManager)", "testcase": false, "constructor": false}, {"identifier": "setTimeoutManager", "parameters": "(TimeoutManager timeoutManager)", "modifiers": "public", "return": "void", "signature": "void setTimeoutManager(TimeoutManager timeoutManager)", "full_signature": "public void setTimeoutManager(TimeoutManager timeoutManager)", "class_method_signature": "TransientScottyEngine.setTimeoutManager(TimeoutManager timeoutManager)", "testcase": false, "constructor": false}, {"identifier": "setPoolManager", "parameters": "(ProcessorPoolManager<TransientProcessorPool> poolManager)", "modifiers": "public", "return": "void", "signature": "void setPoolManager(ProcessorPoolManager<TransientProcessorPool> poolManager)", "full_signature": "public void setPoolManager(ProcessorPoolManager<TransientProcessorPool> poolManager)", "class_method_signature": "TransientScottyEngine.setPoolManager(ProcessorPoolManager<TransientProcessorPool> poolManager)", "testcase": false, "constructor": false}, {"identifier": "setEarlyResponseContainer", "parameters": "(EarlyResponseContainer earlyResponseContainer)", "modifiers": "public", "return": "void", "signature": "void setEarlyResponseContainer(EarlyResponseContainer earlyResponseContainer)", "full_signature": "public void setEarlyResponseContainer(EarlyResponseContainer earlyResponseContainer)", "class_method_signature": "TransientScottyEngine.setEarlyResponseContainer(EarlyResponseContainer earlyResponseContainer)", "testcase": false, "constructor": false}, {"identifier": "notify", "parameters": "(Response<?> response, Acknowledge ack)", "modifiers": "@Override public", "return": "void", "signature": "void notify(Response<?> response, Acknowledge ack)", "full_signature": "@Override public void notify(Response<?> response, Acknowledge ack)", "class_method_signature": "TransientScottyEngine.notify(Response<?> response, Acknowledge ack)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(Workflow<?> w)", "modifiers": "@Override protected", "return": "String", "signature": "String run(Workflow<?> w)", "full_signature": "@Override protected String run(Workflow<?> w)", "class_method_signature": "TransientScottyEngine.run(Workflow<?> w)", "testcase": false, "constructor": false}, {"identifier": "enqueue", "parameters": "(Workflow<?> w)", "modifiers": "private", "return": "void", "signature": "void enqueue(Workflow<?> w)", "full_signature": "private void enqueue(Workflow<?> w)", "class_method_signature": "TransientScottyEngine.enqueue(Workflow<?> w)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public synchronized void shutdown()", "class_method_signature": "TransientScottyEngine.shutdown()", "testcase": false, "constructor": false}, {"identifier": "startup", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "signature": "void startup()", "full_signature": "@Override public synchronized void startup()", "class_method_signature": "TransientScottyEngine.startup()", "testcase": false, "constructor": false}, {"identifier": "registerCallbacks", "parameters": "(Workflow<?> w, WaitMode mode, long timeoutMsec, String... correlationIds)", "modifiers": "@Override public", "return": "void", "signature": "void registerCallbacks(Workflow<?> w, WaitMode mode, long timeoutMsec, String... correlationIds)", "full_signature": "@Override public void registerCallbacks(Workflow<?> w, WaitMode mode, long timeoutMsec, String... correlationIds)", "class_method_signature": "TransientScottyEngine.registerCallbacks(Workflow<?> w, WaitMode mode, long timeoutMsec, String... correlationIds)", "testcase": false, "constructor": false}, {"identifier": "removeWorkflow", "parameters": "(String id)", "modifiers": "public", "return": "void", "signature": "void removeWorkflow(String id)", "full_signature": "public void removeWorkflow(String id)", "class_method_signature": "TransientScottyEngine.removeWorkflow(String id)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(List<Workflow<?>> list)", "modifiers": "@Override protected", "return": "void", "signature": "void run(List<Workflow<?>> list)", "full_signature": "@Override protected void run(List<Workflow<?>> list)", "class_method_signature": "TransientScottyEngine.run(List<Workflow<?>> list)", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getState()", "full_signature": "@Override public String getState()", "class_method_signature": "TransientScottyEngine.getState()", "testcase": false, "constructor": false}, {"identifier": "queryObjectState", "parameters": "(String id)", "modifiers": "@Override public", "return": "String", "signature": "String queryObjectState(String id)", "full_signature": "@Override public String queryObjectState(String id)", "class_method_signature": "TransientScottyEngine.queryObjectState(String id)", "testcase": false, "constructor": false}, {"identifier": "queryWorkflowInstances", "parameters": "()", "modifiers": "@Override public", "return": "List<WorkflowInfo>", "signature": "List<WorkflowInfo> queryWorkflowInstances()", "full_signature": "@Override public List<WorkflowInfo> queryWorkflowInstances()", "class_method_signature": "TransientScottyEngine.queryWorkflowInstances()", "testcase": false, "constructor": false}, {"identifier": "queryWorkflowInstance", "parameters": "(String id)", "modifiers": "@Override public", "return": "WorkflowInfo", "signature": "WorkflowInfo queryWorkflowInstance(String id)", "full_signature": "@Override public WorkflowInfo queryWorkflowInstance(String id)", "class_method_signature": "TransientScottyEngine.queryWorkflowInstance(String id)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfWorkflowInstances", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNumberOfWorkflowInstances()", "full_signature": "@Override public int getNumberOfWorkflowInstances()", "class_method_signature": "TransientScottyEngine.getNumberOfWorkflowInstances()", "testcase": false, "constructor": false}, {"identifier": "addWaitHook", "parameters": "(String wfInstanceId, WaitHook waitHook)", "modifiers": "@Override public", "return": "void", "signature": "void addWaitHook(String wfInstanceId, WaitHook waitHook)", "full_signature": "@Override public void addWaitHook(String wfInstanceId, WaitHook waitHook)", "class_method_signature": "TransientScottyEngine.addWaitHook(String wfInstanceId, WaitHook waitHook)", "testcase": false, "constructor": false}, {"identifier": "getProcessorPools", "parameters": "()", "modifiers": "@Override public", "return": "List<ProcessorPoolMXBean>", "signature": "List<ProcessorPoolMXBean> getProcessorPools()", "full_signature": "@Override public List<ProcessorPoolMXBean> getProcessorPools()", "class_method_signature": "TransientScottyEngine.getProcessorPools()", "testcase": false, "constructor": false}, {"identifier": "getEngineType", "parameters": "()", "modifiers": "@Override public", "return": "EngineType", "signature": "EngineType getEngineType()", "full_signature": "@Override public EngineType getEngineType()", "class_method_signature": "TransientScottyEngine.getEngineType()", "testcase": false, "constructor": false}, {"identifier": "queryActiveWorkflowInstances", "parameters": "(final String className, final int max)", "modifiers": "@Override public", "return": "List<WorkflowInfo>", "signature": "List<WorkflowInfo> queryActiveWorkflowInstances(final String className, final int max)", "full_signature": "@Override public List<WorkflowInfo> queryActiveWorkflowInstances(final String className, final int max)", "class_method_signature": "TransientScottyEngine.queryActiveWorkflowInstances(final String className, final int max)", "testcase": false, "constructor": false}, {"identifier": "queryActiveWorkflowInstance", "parameters": "(final String id)", "modifiers": "@Override public", "return": "WorkflowInfo", "signature": "WorkflowInfo queryActiveWorkflowInstance(final String id)", "full_signature": "@Override public WorkflowInfo queryActiveWorkflowInstance(final String id)", "class_method_signature": "TransientScottyEngine.queryActiveWorkflowInstance(final String id)", "testcase": false, "constructor": false}, {"identifier": "getWorkflowInstanceStates", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getWorkflowInstanceStates()", "full_signature": "@Override public List<String> getWorkflowInstanceStates()", "class_method_signature": "TransientScottyEngine.getWorkflowInstanceStates()", "testcase": false, "constructor": false}, {"identifier": "queryWorkflowInstances", "parameters": "(final WorkflowInstanceFilter filter)", "modifiers": "@Override public", "return": "List<WorkflowInfo>", "signature": "List<WorkflowInfo> queryWorkflowInstances(final WorkflowInstanceFilter filter)", "full_signature": "@Override public List<WorkflowInfo> queryWorkflowInstances(final WorkflowInstanceFilter filter)", "class_method_signature": "TransientScottyEngine.queryWorkflowInstances(final WorkflowInstanceFilter filter)", "testcase": false, "constructor": false}, {"identifier": "countWorkflowInstances", "parameters": "(final WorkflowInstanceFilter filter)", "modifiers": "@Override public", "return": "long", "signature": "long countWorkflowInstances(final WorkflowInstanceFilter filter)", "full_signature": "@Override public long countWorkflowInstances(final WorkflowInstanceFilter filter)", "class_method_signature": "TransientScottyEngine.countWorkflowInstances(final WorkflowInstanceFilter filter)", "testcase": false, "constructor": false}, {"identifier": "incErrorWFCounter", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void incErrorWFCounter()", "full_signature": "public void incErrorWFCounter()", "class_method_signature": "TransientScottyEngine.incErrorWFCounter()", "testcase": false, "constructor": false}], "file": "projects/copper-coreengine/src/main/java/org/copperengine/core/tranzient/TransientScottyEngine.java"}, "focal_method": {"identifier": "startup", "parameters": "()", "modifiers": "@Override public synchronized", "return": "void", "body": "@Override\n    public synchronized void startup() {\n        if (engineState != EngineState.RAW)\n            throw new IllegalStateException();\n\n        logger.info(\"Engine is starting up...\");\n        super.startup();\n        wfRepository.start();\n        timeoutManager.setEngine(this);\n        poolManager.setEngine(this);\n        timeoutManager.startup();\n        earlyResponseContainer.startup();\n        poolManager.startup();\n        engineState = EngineState.STARTED;\n        logger.info(\"Engine is running\");\n        startupBlocker.unblock();\n    }", "signature": "void startup()", "full_signature": "@Override public synchronized void startup()", "class_method_signature": "TransientScottyEngine.startup()", "testcase": false, "constructor": false, "invocations": ["info", "startup", "start", "setEngine", "setEngine", "startup", "startup", "startup", "info", "unblock"]}, "repository": {"repo_id": 15008570, "url": "https://github.com/copper-engine/copper-engine", "language": "Java", "is_fork": false, "fork_count": 56, "stargazer_count": 169, "size": 122984, "license": "licensed"}}