{"test_class": {"identifier": "MySqlTaskContextTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Path DB_HISTORY_PATH = Testing.Files.createTestingPath(\"file-db-history-context.txt\").toAbsolutePath();", "modifier": "protected static final", "type": "Path", "declarator": "DB_HISTORY_PATH = Testing.Files.createTestingPath(\"file-db-history-context.txt\").toAbsolutePath()", "var_name": "DB_HISTORY_PATH"}, {"original_string": "protected String hostname;", "modifier": "protected", "type": "String", "declarator": "hostname", "var_name": "hostname"}, {"original_string": "protected int port;", "modifier": "protected", "type": "int", "declarator": "port", "var_name": "port"}, {"original_string": "protected String username;", "modifier": "protected", "type": "String", "declarator": "username", "var_name": "username"}, {"original_string": "protected String password;", "modifier": "protected", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "protected int serverId;", "modifier": "protected", "type": "int", "declarator": "serverId", "var_name": "serverId"}, {"original_string": "protected String serverName;", "modifier": "protected", "type": "String", "declarator": "serverName", "var_name": "serverName"}, {"original_string": "protected String databaseName;", "modifier": "protected", "type": "String", "declarator": "databaseName", "var_name": "databaseName"}, {"original_string": "protected Configuration config;", "modifier": "protected", "type": "Configuration", "declarator": "config", "var_name": "config"}, {"original_string": "protected MySqlTaskContext context;", "modifier": "protected", "type": "MySqlTaskContext", "declarator": "context", "var_name": "context"}], "file": "debezium-connector-mysql/src/test/java/io/debezium/connector/mysql/MySqlTaskContextTest.java"}, "test_case": {"identifier": "shouldFilterInternalDmlStatementsUsingDefaultFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldFilterInternalDmlStatementsUsingDefaultFilter() throws Exception {\n        config = simpleConfig().build();\n        context = new MySqlTaskContext(config, new Filters.Builder(config).build(), false, null);\n\n        assertThat(context.ddlFilter().test(\"INSERT INTO mysql.rds_heartbeat2(name) values ('innodb_txn_key') ON DUPLICATE KEY UPDATE value = 'v'\")).isTrue();\n        assertThat(context.ddlFilter().test(\"INSERT INTO mysql.rds_sysinfo(name, value) values ('innodb_txn_key','Sat Jun 13 06:26:02 UTC 2020')\")).isTrue();\n        assertThat(context.ddlFilter().test(\"INSERT INTO mysql.rds_monitor(name, value) values ('innodb_txn_key','Sat Jun 13 06:26:02 UTC 2020')\")).isTrue();\n        assertThat(context.ddlFilter().test(\"INSERT INTO mysql.rds_monitor(name) values ('innodb_txn_key') ON DUPLICATE KEY UPDATE value = 'v'\")).isTrue();\n        assertThat(context.ddlFilter().test(\"DELETE FROM mysql.rds_sysinfo\")).isTrue();\n        assertThat(context.ddlFilter().test(\"DELETE FROM mysql.rds_monitor;\")).isTrue();\n        assertThat(context.ddlFilter().test(\"FLUSH RELAY LOGS;\")).isTrue();\n        assertThat(context.ddlFilter().test(\"SAVEPOINT x\")).isTrue();\n        // Missing 'ON DUPLICATE ...' clause\n        assertThat(context.ddlFilter().test(\"INSERT INTO mysql.rds_heartbeat2(name) values ('innodb_txn_key')\")).isFalse();\n        // No space after 'SAVEPOINT'\n        assertThat(context.ddlFilter().test(\"SAVEPOINT;\")).isFalse();\n    }", "signature": "void shouldFilterInternalDmlStatementsUsingDefaultFilter()", "full_signature": "@Test public void shouldFilterInternalDmlStatementsUsingDefaultFilter()", "class_method_signature": "MySqlTaskContextTest.shouldFilterInternalDmlStatementsUsingDefaultFilter()", "testcase": true, "constructor": false, "invocations": ["build", "simpleConfig", "build", "isTrue", "assertThat", "test", "ddlFilter", "isTrue", "assertThat", "test", "ddlFilter", "isTrue", "assertThat", "test", "ddlFilter", "isTrue", "assertThat", "test", "ddlFilter", "isTrue", "assertThat", "test", "ddlFilter", "isTrue", "assertThat", "test", "ddlFilter", "isTrue", "assertThat", "test", "ddlFilter", "isTrue", "assertThat", "test", "ddlFilter", "isFalse", "assertThat", "test", "ddlFilter", "isFalse", "assertThat", "test", "ddlFilter"]}, "focal_class": {"identifier": "MySqlTaskContext", "superclass": "extends CdcSourceTaskContext", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(MySqlTaskContext.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(MySqlTaskContext.class)", "var_name": "LOGGER"}, {"original_string": "private final MySqlJdbcContext connectionContext;", "modifier": "private final", "type": "MySqlJdbcContext", "declarator": "connectionContext", "var_name": "connectionContext"}, {"original_string": "private final Configuration config;", "modifier": "private final", "type": "Configuration", "declarator": "config", "var_name": "config"}, {"original_string": "private final MySqlConnectorConfig connectorConfig;", "modifier": "private final", "type": "MySqlConnectorConfig", "declarator": "connectorConfig", "var_name": "connectorConfig"}, {"original_string": "private final SourceInfo source;", "modifier": "private final", "type": "SourceInfo", "declarator": "source", "var_name": "source"}, {"original_string": "private final MySqlSchema dbSchema;", "modifier": "private final", "type": "MySqlSchema", "declarator": "dbSchema", "var_name": "dbSchema"}, {"original_string": "private final TopicSelector<TableId> topicSelector;", "modifier": "private final", "type": "TopicSelector<TableId>", "declarator": "topicSelector", "var_name": "topicSelector"}, {"original_string": "private final RecordMakers recordProcessor;", "modifier": "private final", "type": "RecordMakers", "declarator": "recordProcessor", "var_name": "recordProcessor"}, {"original_string": "private final Predicate<String> gtidSourceFilter;", "modifier": "private final", "type": "Predicate<String>", "declarator": "gtidSourceFilter", "var_name": "gtidSourceFilter"}, {"original_string": "private final Predicate<String> ddlFilter;", "modifier": "private final", "type": "Predicate<String>", "declarator": "ddlFilter", "var_name": "ddlFilter"}, {"original_string": "private final boolean tableIdCaseInsensitive;", "modifier": "private final", "type": "boolean", "declarator": "tableIdCaseInsensitive", "var_name": "tableIdCaseInsensitive"}], "methods": [{"identifier": "MySqlTaskContext", "parameters": "(Configuration config, Filters filters)", "modifiers": "public", "return": "", "signature": " MySqlTaskContext(Configuration config, Filters filters)", "full_signature": "public  MySqlTaskContext(Configuration config, Filters filters)", "class_method_signature": "MySqlTaskContext.MySqlTaskContext(Configuration config, Filters filters)", "testcase": false, "constructor": true}, {"identifier": "MySqlTaskContext", "parameters": "(Configuration config, Filters filters, Map<String, ?> restartOffset)", "modifiers": "public", "return": "", "signature": " MySqlTaskContext(Configuration config, Filters filters, Map<String, ?> restartOffset)", "full_signature": "public  MySqlTaskContext(Configuration config, Filters filters, Map<String, ?> restartOffset)", "class_method_signature": "MySqlTaskContext.MySqlTaskContext(Configuration config, Filters filters, Map<String, ?> restartOffset)", "testcase": false, "constructor": true}, {"identifier": "MySqlTaskContext", "parameters": "(Configuration config, Filters filters, Boolean tableIdCaseInsensitive, Map<String, ?> restartOffset)", "modifiers": "public", "return": "", "signature": " MySqlTaskContext(Configuration config, Filters filters, Boolean tableIdCaseInsensitive, Map<String, ?> restartOffset)", "full_signature": "public  MySqlTaskContext(Configuration config, Filters filters, Boolean tableIdCaseInsensitive, Map<String, ?> restartOffset)", "class_method_signature": "MySqlTaskContext.MySqlTaskContext(Configuration config, Filters filters, Boolean tableIdCaseInsensitive, Map<String, ?> restartOffset)", "testcase": false, "constructor": true}, {"identifier": "config", "parameters": "()", "modifiers": "public", "return": "Configuration", "signature": "Configuration config()", "full_signature": "public Configuration config()", "class_method_signature": "MySqlTaskContext.config()", "testcase": false, "constructor": false}, {"identifier": "getConnectorConfig", "parameters": "()", "modifiers": "public", "return": "MySqlConnectorConfig", "signature": "MySqlConnectorConfig getConnectorConfig()", "full_signature": "public MySqlConnectorConfig getConnectorConfig()", "class_method_signature": "MySqlTaskContext.getConnectorConfig()", "testcase": false, "constructor": false}, {"identifier": "getConnectionContext", "parameters": "()", "modifiers": "public", "return": "MySqlJdbcContext", "signature": "MySqlJdbcContext getConnectionContext()", "full_signature": "public MySqlJdbcContext getConnectionContext()", "class_method_signature": "MySqlTaskContext.getConnectionContext()", "testcase": false, "constructor": false}, {"identifier": "connectorName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String connectorName()", "full_signature": "public String connectorName()", "class_method_signature": "MySqlTaskContext.connectorName()", "testcase": false, "constructor": false}, {"identifier": "topicSelector", "parameters": "()", "modifiers": "public", "return": "TopicSelector<TableId>", "signature": "TopicSelector<TableId> topicSelector()", "full_signature": "public TopicSelector<TableId> topicSelector()", "class_method_signature": "MySqlTaskContext.topicSelector()", "testcase": false, "constructor": false}, {"identifier": "source", "parameters": "()", "modifiers": "public", "return": "SourceInfo", "signature": "SourceInfo source()", "full_signature": "public SourceInfo source()", "class_method_signature": "MySqlTaskContext.source()", "testcase": false, "constructor": false}, {"identifier": "dbSchema", "parameters": "()", "modifiers": "public", "return": "MySqlSchema", "signature": "MySqlSchema dbSchema()", "full_signature": "public MySqlSchema dbSchema()", "class_method_signature": "MySqlTaskContext.dbSchema()", "testcase": false, "constructor": false}, {"identifier": "makeRecord", "parameters": "()", "modifiers": "public", "return": "RecordMakers", "signature": "RecordMakers makeRecord()", "full_signature": "public RecordMakers makeRecord()", "class_method_signature": "MySqlTaskContext.makeRecord()", "testcase": false, "constructor": false}, {"identifier": "gtidSourceFilter", "parameters": "()", "modifiers": "public", "return": "Predicate<String>", "signature": "Predicate<String> gtidSourceFilter()", "full_signature": "public Predicate<String> gtidSourceFilter()", "class_method_signature": "MySqlTaskContext.gtidSourceFilter()", "testcase": false, "constructor": false}, {"identifier": "initializeHistory", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initializeHistory()", "full_signature": "public void initializeHistory()", "class_method_signature": "MySqlTaskContext.initializeHistory()", "testcase": false, "constructor": false}, {"identifier": "loadHistory", "parameters": "(SourceInfo startingPoint)", "modifiers": "public", "return": "void", "signature": "void loadHistory(SourceInfo startingPoint)", "full_signature": "public void loadHistory(SourceInfo startingPoint)", "class_method_signature": "MySqlTaskContext.loadHistory(SourceInfo startingPoint)", "testcase": false, "constructor": false}, {"identifier": "historyExists", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean historyExists()", "full_signature": "public boolean historyExists()", "class_method_signature": "MySqlTaskContext.historyExists()", "testcase": false, "constructor": false}, {"identifier": "initializeHistoryStorage", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initializeHistoryStorage()", "full_signature": "public void initializeHistoryStorage()", "class_method_signature": "MySqlTaskContext.initializeHistoryStorage()", "testcase": false, "constructor": false}, {"identifier": "serverId", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long serverId()", "full_signature": "public long serverId()", "class_method_signature": "MySqlTaskContext.serverId()", "testcase": false, "constructor": false}, {"identifier": "rowCountForLargeTable", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long rowCountForLargeTable()", "full_signature": "public long rowCountForLargeTable()", "class_method_signature": "MySqlTaskContext.rowCountForLargeTable()", "testcase": false, "constructor": false}, {"identifier": "bufferSizeForBinlogReader", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int bufferSizeForBinlogReader()", "full_signature": "public int bufferSizeForBinlogReader()", "class_method_signature": "MySqlTaskContext.bufferSizeForBinlogReader()", "testcase": false, "constructor": false}, {"identifier": "includeSchemaChangeRecords", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean includeSchemaChangeRecords()", "full_signature": "public boolean includeSchemaChangeRecords()", "class_method_signature": "MySqlTaskContext.includeSchemaChangeRecords()", "testcase": false, "constructor": false}, {"identifier": "includeSqlQuery", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean includeSqlQuery()", "full_signature": "public boolean includeSqlQuery()", "class_method_signature": "MySqlTaskContext.includeSqlQuery()", "testcase": false, "constructor": false}, {"identifier": "isSnapshotAllowedWhenNeeded", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSnapshotAllowedWhenNeeded()", "full_signature": "public boolean isSnapshotAllowedWhenNeeded()", "class_method_signature": "MySqlTaskContext.isSnapshotAllowedWhenNeeded()", "testcase": false, "constructor": false}, {"identifier": "isSnapshotNeverAllowed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSnapshotNeverAllowed()", "full_signature": "public boolean isSnapshotNeverAllowed()", "class_method_signature": "MySqlTaskContext.isSnapshotNeverAllowed()", "testcase": false, "constructor": false}, {"identifier": "isInitialSnapshotOnly", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInitialSnapshotOnly()", "full_signature": "public boolean isInitialSnapshotOnly()", "class_method_signature": "MySqlTaskContext.isInitialSnapshotOnly()", "testcase": false, "constructor": false}, {"identifier": "isSchemaOnlySnapshot", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSchemaOnlySnapshot()", "full_signature": "public boolean isSchemaOnlySnapshot()", "class_method_signature": "MySqlTaskContext.isSchemaOnlySnapshot()", "testcase": false, "constructor": false}, {"identifier": "isSchemaOnlyRecoverySnapshot", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSchemaOnlyRecoverySnapshot()", "full_signature": "public boolean isSchemaOnlyRecoverySnapshot()", "class_method_signature": "MySqlTaskContext.isSchemaOnlyRecoverySnapshot()", "testcase": false, "constructor": false}, {"identifier": "snapshotMode", "parameters": "()", "modifiers": "protected", "return": "SnapshotMode", "signature": "SnapshotMode snapshotMode()", "full_signature": "protected SnapshotMode snapshotMode()", "class_method_signature": "MySqlTaskContext.snapshotMode()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "MySqlTaskContext.start()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "MySqlTaskContext.shutdown()", "testcase": false, "constructor": false}, {"identifier": "temporaryLoggingContext", "parameters": "(String contextName, Runnable operation)", "modifiers": "public", "return": "void", "signature": "void temporaryLoggingContext(String contextName, Runnable operation)", "full_signature": "public void temporaryLoggingContext(String contextName, Runnable operation)", "class_method_signature": "MySqlTaskContext.temporaryLoggingContext(String contextName, Runnable operation)", "testcase": false, "constructor": false}, {"identifier": "filterGtidSet", "parameters": "(GtidSet availableServerGtidSet, GtidSet purgedServerGtid)", "modifiers": "public", "return": "GtidSet", "signature": "GtidSet filterGtidSet(GtidSet availableServerGtidSet, GtidSet purgedServerGtid)", "full_signature": "public GtidSet filterGtidSet(GtidSet availableServerGtidSet, GtidSet purgedServerGtid)", "class_method_signature": "MySqlTaskContext.filterGtidSet(GtidSet availableServerGtidSet, GtidSet purgedServerGtid)", "testcase": false, "constructor": false}, {"identifier": "ddlFilter", "parameters": "()", "modifiers": "public", "return": "Predicate<String>", "signature": "Predicate<String> ddlFilter()", "full_signature": "public Predicate<String> ddlFilter()", "class_method_signature": "MySqlTaskContext.ddlFilter()", "testcase": false, "constructor": false}, {"identifier": "isTableIdCaseInsensitive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTableIdCaseInsensitive()", "full_signature": "public boolean isTableIdCaseInsensitive()", "class_method_signature": "MySqlTaskContext.isTableIdCaseInsensitive()", "testcase": false, "constructor": false}], "file": "debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlTaskContext.java"}, "focal_method": {"identifier": "ddlFilter", "parameters": "()", "modifiers": "public", "return": "Predicate<String>", "body": "public Predicate<String> ddlFilter() {\n        return ddlFilter;\n    }", "signature": "Predicate<String> ddlFilter()", "full_signature": "public Predicate<String> ddlFilter()", "class_method_signature": "MySqlTaskContext.ddlFilter()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 50205233, "url": "https://github.com/debezium/debezium", "stars": 2686, "created": "1/22/2016 8:17:05 PM +00:00", "updates": "2020-01-27T20:48:54+00:00", "fork": "False", "license": "licensed"}}