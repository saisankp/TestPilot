{"test_class": {"identifier": "WebsterMojoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File srcDir = new File(\"src/test/resources/WebsterMojoTest\");", "modifier": "private final", "type": "File", "declarator": "srcDir = new File(\"src/test/resources/WebsterMojoTest\")", "var_name": "srcDir"}, {"original_string": "private final File testOutBaseDir = new File(\"target/test-out/WebsterMojoTest\");", "modifier": "private final", "type": "File", "declarator": "testOutBaseDir = new File(\"target/test-out/WebsterMojoTest\")", "var_name": "testOutBaseDir"}], "file": "maven/src/test/java/net/adamcin/oakpal/maven/mojo/WebsterMojoTest.java"}, "test_case": {"identifier": "testExecute_noFixture", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute_noFixture() throws Exception {\n        final File testOutDir = new File(testOutBaseDir, \"testExecute_noFixture\");\n        FileUtils.deleteDirectory(testOutDir);\n        final File projectRoot = new File(testOutDir, \"content-package\");\n        FileUtils.copyDirectory(new File(srcDir, \"content-package\"), projectRoot);\n        WebsterMojo mojo = newMojo();\n        mojo.baseDir = projectRoot;\n        mojo.websterArchiveRoot = new File(projectRoot, \"src/main/resources\");\n        mojo.websterTargets = obj().key(\"nodetypes\", obj()).key(\"privileges\", obj()).get();\n        mojo.execute();\n        Optional<MockMojoLog.MockMojoLogEntry> logEntry = logFor(mojo).last();\n        assertTrue(\"log is not empty\", logEntry.isPresent());\n        assertTrue(\"log starts with 'No source Oak\",\n                logEntry.get().message.startsWith(\"No source Oak\"));\n    }", "signature": "void testExecute_noFixture()", "full_signature": "@Test public void testExecute_noFixture()", "class_method_signature": "WebsterMojoTest.testExecute_noFixture()", "testcase": true, "constructor": false, "invocations": ["deleteDirectory", "copyDirectory", "newMojo", "get", "key", "key", "obj", "obj", "obj", "execute", "last", "logFor", "assertTrue", "isPresent", "assertTrue", "startsWith", "get"]}, "focal_class": {"identifier": "WebsterMojo", "superclass": "extends AbstractMojo", "interfaces": "", "fields": [{"original_string": "public static final String PARAM_REPOSITORY_HOME = \"webster.repositoryHome\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_REPOSITORY_HOME = \"webster.repositoryHome\"", "var_name": "PARAM_REPOSITORY_HOME"}, {"original_string": "public static final String PARAM_OAK_RUN_ARGS = \"webster.oakRunArgs\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_OAK_RUN_ARGS = \"webster.oakRunArgs\"", "var_name": "PARAM_OAK_RUN_ARGS"}, {"original_string": "public static final String PARAM_TMPDIR = \"webster.tmpdir\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_TMPDIR = \"webster.tmpdir\"", "var_name": "PARAM_TMPDIR"}, {"original_string": "@Parameter(property = PARAM_REPOSITORY_HOME)\n    File websterRepositoryHome;", "modifier": "@Parameter(property = PARAM_REPOSITORY_HOME)", "type": "File", "declarator": "websterRepositoryHome", "var_name": "websterRepositoryHome"}, {"original_string": "@Parameter(property = PARAM_OAK_RUN_ARGS)\n    String websterOakRunArgs;", "modifier": "@Parameter(property = PARAM_OAK_RUN_ARGS)", "type": "String", "declarator": "websterOakRunArgs", "var_name": "websterOakRunArgs"}, {"original_string": "@Parameter(property = PARAM_TMPDIR, defaultValue = \"${project.build.directory}/oakpal-plugin/webster-tmpdir\")\n    File websterTempDirectory;", "modifier": "@Parameter(property = PARAM_TMPDIR, defaultValue = \"${project.build.directory}/oakpal-plugin/webster-tmpdir\")", "type": "File", "declarator": "websterTempDirectory", "var_name": "websterTempDirectory"}, {"original_string": "@Parameter(defaultValue = \"${basedir}/src/main/content\")\n    File websterArchiveRoot;", "modifier": "@Parameter(defaultValue = \"${basedir}/src/main/content\")", "type": "File", "declarator": "websterArchiveRoot", "var_name": "websterArchiveRoot"}, {"original_string": "@Parameter\n    JsonObject websterTargets;", "modifier": "@Parameter", "type": "JsonObject", "declarator": "websterTargets", "var_name": "websterTargets"}, {"original_string": "@Parameter(property = \"webster.revealOakLogging\")\n    boolean revealOakLogging;", "modifier": "@Parameter(property = \"webster.revealOakLogging\")", "type": "boolean", "declarator": "revealOakLogging", "var_name": "revealOakLogging"}, {"original_string": "@Parameter(defaultValue = \"${project.basedir}\")\n    File baseDir;", "modifier": "@Parameter(defaultValue = \"${project.basedir}\")", "type": "File", "declarator": "baseDir", "var_name": "baseDir"}, {"original_string": "Fun.ThrowingConsumer<File> tempDirDeleter = FileUtils::deleteDirectory;", "modifier": "", "type": "Fun.ThrowingConsumer<File>", "declarator": "tempDirDeleter = FileUtils::deleteDirectory", "var_name": "tempDirDeleter"}], "methods": [{"identifier": "suppressOakLogging", "parameters": "(final @NotNull BiConsumer<String, String> propSetter)", "modifiers": "", "return": "void", "signature": "void suppressOakLogging(final @NotNull BiConsumer<String, String> propSetter)", "full_signature": " void suppressOakLogging(final @NotNull BiConsumer<String, String> propSetter)", "class_method_signature": "WebsterMojo.suppressOakLogging(final @NotNull BiConsumer<String, String> propSetter)", "testcase": false, "constructor": false}, {"identifier": "addTargets", "parameters": "(final @NotNull WebsterPlan.Builder builder,\n                    final @NotNull Fun.ThrowingBiFunction<File, JsonObject, List<WebsterTarget>> parser)", "modifiers": "", "return": "void", "signature": "void addTargets(final @NotNull WebsterPlan.Builder builder,\n                    final @NotNull Fun.ThrowingBiFunction<File, JsonObject, List<WebsterTarget>> parser)", "full_signature": " void addTargets(final @NotNull WebsterPlan.Builder builder,\n                    final @NotNull Fun.ThrowingBiFunction<File, JsonObject, List<WebsterTarget>> parser)", "class_method_signature": "WebsterMojo.addTargets(final @NotNull WebsterPlan.Builder builder,\n                    final @NotNull Fun.ThrowingBiFunction<File, JsonObject, List<WebsterTarget>> parser)", "testcase": false, "constructor": false}, {"identifier": "getFixtureProvider", "parameters": "()", "modifiers": "@Nullable", "return": "WebsterPlan.FixtureProvider", "signature": "WebsterPlan.FixtureProvider getFixtureProvider()", "full_signature": "@Nullable WebsterPlan.FixtureProvider getFixtureProvider()", "class_method_signature": "WebsterMojo.getFixtureProvider()", "testcase": false, "constructor": false}, {"identifier": "executeWebsterPlan", "parameters": "(final @NotNull WebsterPlan.Builder builder)", "modifiers": "", "return": "void", "signature": "void executeWebsterPlan(final @NotNull WebsterPlan.Builder builder)", "full_signature": " void executeWebsterPlan(final @NotNull WebsterPlan.Builder builder)", "class_method_signature": "WebsterMojo.executeWebsterPlan(final @NotNull WebsterPlan.Builder builder)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public final", "return": "void", "signature": "void execute()", "full_signature": "@Override public final void execute()", "class_method_signature": "WebsterMojo.execute()", "testcase": false, "constructor": false}], "file": "maven/src/main/java/net/adamcin/oakpal/maven/mojo/WebsterMojo.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override public final", "return": "void", "body": "@Override\n    public final void execute() throws MojoFailureException {\n        WebsterPlan.Builder builder = new WebsterPlan.Builder();\n        builder.withArchiveRoot(websterArchiveRoot.getAbsoluteFile());\n        suppressOakLogging(System::setProperty);\n\n        if (websterTargets == null || websterTargets.isEmpty()) {\n            getLog().info(\"No websterTargets configuration found in plugin configuration. skipping webster execution.\");\n            return;\n        }\n\n        addTargets(builder, JsonTargetFactory::fromJsonHintMap);\n\n        WebsterPlan.FixtureProvider fixtureProvider = getFixtureProvider();\n        if (fixtureProvider == null) {\n            getLog().info(\"No source Oak repository provided. skipping webster execution.\");\n            return;\n        }\n\n        builder.withFixtureProvider(fixtureProvider);\n\n        executeWebsterPlan(builder);\n    }", "signature": "void execute()", "full_signature": "@Override public final void execute()", "class_method_signature": "WebsterMojo.execute()", "testcase": false, "constructor": false, "invocations": ["withArchiveRoot", "getAbsoluteFile", "suppressOakLogging", "isEmpty", "info", "getLog", "addTargets", "getFixtureProvider", "info", "getLog", "withFixtureProvider", "executeWebsterPlan"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}