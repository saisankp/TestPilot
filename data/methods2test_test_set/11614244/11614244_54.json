{"test_class": {"identifier": "EqualQaTest", "superclass": "extends AbstractOperationTest", "interfaces": "", "fields": [], "file": "photohawk-image-evaluator/src/test/java/at/ac/tuwien/photohawk/evaluation/qa/EqualQaTest.java"}, "test_case": {"identifier": "evaluateTest_equal_solid000000", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void evaluateTest_equal_solid000000() {\n        BufferedImage left = BufferedImageHelper.createSolidImage(new Color(0, 0, 0));\n        BufferedImage right = BufferedImageHelper.createSolidImage(new Color(0, 0, 0));\n\n        EqualQa equalQa = new EqualQa();\n        TransientOperation<Boolean, Boolean> op = equalQa.evaluate(left, right);\n        Assert.assertEquals(true, op.getAggregatedResult());\n        Assert.assertEquals(true, op.getResult());\n    }", "signature": "void evaluateTest_equal_solid000000()", "full_signature": "@Test public void evaluateTest_equal_solid000000()", "class_method_signature": "EqualQaTest.evaluateTest_equal_solid000000()", "testcase": true, "constructor": false, "invocations": ["createSolidImage", "createSolidImage", "evaluate", "assertEquals", "getAggregatedResult", "assertEquals", "getResult"]}, "focal_class": {"identifier": "EqualQa", "superclass": "", "interfaces": "implements Qa<Boolean, Boolean>", "fields": [], "methods": [{"identifier": "evaluate", "parameters": "(final BufferedImage left, final BufferedImage right)", "modifiers": "@Override public", "return": "TransientOperation<Boolean, Boolean>", "signature": "TransientOperation<Boolean, Boolean> evaluate(final BufferedImage left, final BufferedImage right)", "full_signature": "@Override public TransientOperation<Boolean, Boolean> evaluate(final BufferedImage left, final BufferedImage right)", "class_method_signature": "EqualQa.evaluate(final BufferedImage left, final BufferedImage right)", "testcase": false, "constructor": false}], "file": "photohawk-image-evaluator/src/main/java/at/ac/tuwien/photohawk/evaluation/qa/EqualQa.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(final BufferedImage left, final BufferedImage right)", "modifiers": "@Override public", "return": "TransientOperation<Boolean, Boolean>", "body": "@Override\n    public TransientOperation<Boolean, Boolean> evaluate(final BufferedImage left, final BufferedImage right) {\n        // Check size\n        CheckEqualSizePreprocessor equalSize = new CheckEqualSizePreprocessor(left, right);\n        equalSize.process();\n        equalSize = null;\n\n        ConvenientBufferedImageWrapper leftWrapped = new ConvenientBufferedImageWrapper(left);\n        ConvenientBufferedImageWrapper rightWrapped = new ConvenientBufferedImageWrapper(right);\n        AutoColorConverter convLeft = new AutoColorConverter(leftWrapped, rightWrapped,\n                                                             AutoColorConverter.AlternativeColorConverter.CIEXYZ);\n        AutoColorConverter convRight = new AutoColorConverter(rightWrapped, leftWrapped,\n                                                              AutoColorConverter.AlternativeColorConverter.CIEXYZ);\n\n        // Evaluate\n        EqualMetric metric = new EqualMetric(convLeft, convRight, new Point(0, 0),\n                                             new Point(left.getWidth(), left.getHeight()));\n\n        // Evaluate\n        return metric.execute();\n    }", "signature": "TransientOperation<Boolean, Boolean> evaluate(final BufferedImage left, final BufferedImage right)", "full_signature": "@Override public TransientOperation<Boolean, Boolean> evaluate(final BufferedImage left, final BufferedImage right)", "class_method_signature": "EqualQa.evaluate(final BufferedImage left, final BufferedImage right)", "testcase": false, "constructor": false, "invocations": ["process", "getWidth", "getHeight", "execute"]}, "repository": {"repo_id": 11614244, "url": "https://github.com/datascience/photohawk", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 6, "size": 4209, "license": "licensed"}}