{"test_class": {"identifier": "ThriftProtocolTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-rpc/dubbo-rpc-native-thrift/src/test/java/org/apache/dubbo/rpc/protocol/nativethrift/ThriftProtocolTest.java"}, "test_case": {"identifier": "testThriftProtocol", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testThriftProtocol() throws TException {\n        DemoServiceImpl server = new DemoServiceImpl();\n        ProxyFactory proxyFactory = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();\n        Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();\n        int port = NetUtils.getAvailablePort();\n        URL url = URL.valueOf(org.apache.dubbo.rpc.protocol.nativethrift.ThriftProtocol.NAME + \"://127.0.0.1:\" + port + \"/\" + DemoService.Iface.class.getName() + \"?version=1.0.0&nativethrift.overload.method=true\");\n        Exporter<DemoService.Iface> exporter = protocol.export(proxyFactory.getInvoker(server, DemoService.Iface.class, url));\n        Invoker<DemoService.Iface> invoker = protocol.refer(DemoService.Iface.class, url);\n        DemoService.Iface client = proxyFactory.getProxy(invoker);\n        String result = client.sayHello(\"haha\");\n        Assertions.assertTrue(server.isCalled());\n        Assertions.assertEquals(\"Hello, haha\", result);\n        invoker.destroy();\n        exporter.unexport();\n    }", "signature": "void testThriftProtocol()", "full_signature": "@Test public void testThriftProtocol()", "class_method_signature": "ThriftProtocolTest.testThriftProtocol()", "testcase": true, "constructor": false, "invocations": ["getAdaptiveExtension", "getExtensionLoader", "getAdaptiveExtension", "getExtensionLoader", "getAvailablePort", "valueOf", "getName", "export", "getInvoker", "refer", "getProxy", "sayHello", "assertTrue", "isCalled", "assertEquals", "destroy", "unexport"]}, "focal_class": {"identifier": "ThriftProtocol", "superclass": "extends AbstractProxyProtocol", "interfaces": "", "fields": [{"original_string": "public static final int DEFAULT_PORT = 40880;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_PORT = 40880", "var_name": "DEFAULT_PORT"}, {"original_string": "public static final String NAME = \"native-thrift\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"native-thrift\"", "var_name": "NAME"}, {"original_string": "public static final String THRIFT_IFACE = \"$Iface\";", "modifier": "public static final", "type": "String", "declarator": "THRIFT_IFACE = \"$Iface\"", "var_name": "THRIFT_IFACE"}, {"original_string": "public static final String THRIFT_PROCESSOR = \"$Processor\";", "modifier": "public static final", "type": "String", "declarator": "THRIFT_PROCESSOR = \"$Processor\"", "var_name": "THRIFT_PROCESSOR"}, {"original_string": "public static final String THRIFT_CLIENT = \"$Client\";", "modifier": "public static final", "type": "String", "declarator": "THRIFT_CLIENT = \"$Client\"", "var_name": "THRIFT_CLIENT"}, {"original_string": "private static final Map<String, TServer> SERVER_MAP = new HashMap<>();", "modifier": "private static final", "type": "Map<String, TServer>", "declarator": "SERVER_MAP = new HashMap<>()", "var_name": "SERVER_MAP"}, {"original_string": "private TMultiplexedProcessor processor = new TMultiplexedProcessor();", "modifier": "private", "type": "TMultiplexedProcessor", "declarator": "processor = new TMultiplexedProcessor()", "var_name": "processor"}], "methods": [{"identifier": "ThriftProtocol", "parameters": "()", "modifiers": "public", "return": "", "signature": " ThriftProtocol()", "full_signature": "public  ThriftProtocol()", "class_method_signature": "ThriftProtocol.ThriftProtocol()", "testcase": false, "constructor": true}, {"identifier": "ThriftProtocol", "parameters": "(Class<?>... exceptions)", "modifiers": "public", "return": "", "signature": " ThriftProtocol(Class<?>... exceptions)", "full_signature": "public  ThriftProtocol(Class<?>... exceptions)", "class_method_signature": "ThriftProtocol.ThriftProtocol(Class<?>... exceptions)", "testcase": false, "constructor": true}, {"identifier": "getDefaultPort", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDefaultPort()", "full_signature": "@Override public int getDefaultPort()", "class_method_signature": "ThriftProtocol.getDefaultPort()", "testcase": false, "constructor": false}, {"identifier": "doExport", "parameters": "(T impl, Class<T> type, URL url)", "modifiers": "@Override protected", "return": "Runnable", "signature": "Runnable doExport(T impl, Class<T> type, URL url)", "full_signature": "@Override protected Runnable doExport(T impl, Class<T> type, URL url)", "class_method_signature": "ThriftProtocol.doExport(T impl, Class<T> type, URL url)", "testcase": false, "constructor": false}, {"identifier": "doRefer", "parameters": "(Class<T> type, URL url)", "modifiers": "@Override protected", "return": "T", "signature": "T doRefer(Class<T> type, URL url)", "full_signature": "@Override protected T doRefer(Class<T> type, URL url)", "class_method_signature": "ThriftProtocol.doRefer(Class<T> type, URL url)", "testcase": false, "constructor": false}, {"identifier": "exportThreadedSelectorServer", "parameters": "(T impl, Class<T> type, URL url)", "modifiers": "private", "return": "Runnable", "signature": "Runnable exportThreadedSelectorServer(T impl, Class<T> type, URL url)", "full_signature": "private Runnable exportThreadedSelectorServer(T impl, Class<T> type, URL url)", "class_method_signature": "ThriftProtocol.exportThreadedSelectorServer(T impl, Class<T> type, URL url)", "testcase": false, "constructor": false}, {"identifier": "doReferFrameAndCompact", "parameters": "(Class<T> type, URL url)", "modifiers": "private", "return": "T", "signature": "T doReferFrameAndCompact(Class<T> type, URL url)", "full_signature": "private T doReferFrameAndCompact(Class<T> type, URL url)", "class_method_signature": "ThriftProtocol.doReferFrameAndCompact(Class<T> type, URL url)", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-native-thrift/src/main/java/org/apache/dubbo/rpc/protocol/nativethrift/ThriftProtocol.java"}, "focal_method": {"identifier": "ThriftProtocol", "parameters": "()", "modifiers": "public", "return": "", "body": "public ThriftProtocol() {\n        super(TException.class, RpcException.class);\n    }", "signature": " ThriftProtocol()", "full_signature": "public  ThriftProtocol()", "class_method_signature": "ThriftProtocol.ThriftProtocol()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}