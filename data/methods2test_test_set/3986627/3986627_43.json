{"test_class": {"identifier": "WorkspaceScannerTest", "superclass": "", "interfaces": "", "fields": [], "file": "org.jabylon.properties/src/test/java/org/jabylon/properties/util/scanner/WorkspaceScannerTest.java"}, "test_case": {"identifier": "testFullScanWithFileExcude", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFullScanWithFileExcude() {\n        File baseDir = new File(\"src/test/resources/project/master\");\n        ScanConfiguration configuration = PropertiesFactory.eINSTANCE.createScanConfiguration();\n        configuration.setExclude(\"**/wiki_examp*.properties\");\n\n        WorkspaceScanner scanner = new WorkspaceScanner();\n        final List<String> filenames = new ArrayList<String>();\n        scanner.fullScan(new PropertyFileAcceptor() {\n\n            @Override\n            public void newMatch(File file) {\n                filenames.add(file.getName());\n\n            }\n        }, baseDir, new JavaPropertyScanner(), configuration, new NullProgressMonitor());\n        int index = 0;\n        assertEquals(\"messages.properties\", filenames.get(index++));\n        assertEquals(\"messages2.properties\", filenames.get(index++));\n        assertEquals(\"plugin.properties\", filenames.get(index++));\n        assertEquals(\"messages.properties\", filenames.get(index++));\n        assertEquals(4, filenames.size());\n    }", "signature": "void testFullScanWithFileExcude()", "full_signature": "@Test public void testFullScanWithFileExcude()", "class_method_signature": "WorkspaceScannerTest.testFullScanWithFileExcude()", "testcase": true, "constructor": false, "invocations": ["createScanConfiguration", "setExclude", "fullScan", "add", "getName", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "size"]}, "focal_class": {"identifier": "WorkspaceScanner", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "WorkspaceScanner", "parameters": "()", "modifiers": "public", "return": "", "signature": " WorkspaceScanner()", "full_signature": "public  WorkspaceScanner()", "class_method_signature": "WorkspaceScanner.WorkspaceScanner()", "testcase": false, "constructor": true}, {"identifier": "fullScan", "parameters": "(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, IProgressMonitor monitor)", "modifiers": "public", "return": "void", "signature": "void fullScan(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, IProgressMonitor monitor)", "full_signature": "public void fullScan(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, IProgressMonitor monitor)", "class_method_signature": "WorkspaceScanner.fullScan(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, IProgressMonitor monitor)", "testcase": false, "constructor": false}, {"identifier": "checkCanceled", "parameters": "(IProgressMonitor monitor)", "modifiers": "private", "return": "void", "signature": "void checkCanceled(IProgressMonitor monitor)", "full_signature": "private void checkCanceled(IProgressMonitor monitor)", "class_method_signature": "WorkspaceScanner.checkCanceled(IProgressMonitor monitor)", "testcase": false, "constructor": false}, {"identifier": "partialScan", "parameters": "(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, File singleFile)", "modifiers": "public", "return": "void", "signature": "void partialScan(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, File singleFile)", "full_signature": "public void partialScan(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, File singleFile)", "class_method_signature": "WorkspaceScanner.partialScan(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, File singleFile)", "testcase": false, "constructor": false}, {"identifier": "partialScan", "parameters": "(File baseDir, PropertyScanner scanner, ScanConfiguration config, File singleFile)", "modifiers": "public", "return": "boolean", "signature": "boolean partialScan(File baseDir, PropertyScanner scanner, ScanConfiguration config, File singleFile)", "full_signature": "public boolean partialScan(File baseDir, PropertyScanner scanner, ScanConfiguration config, File singleFile)", "class_method_signature": "WorkspaceScanner.partialScan(File baseDir, PropertyScanner scanner, ScanConfiguration config, File singleFile)", "testcase": false, "constructor": false}, {"identifier": "createFileSet", "parameters": "(ScanConfiguration config)", "modifiers": "private", "return": "FileSet", "signature": "FileSet createFileSet(ScanConfiguration config)", "full_signature": "private FileSet createFileSet(ScanConfiguration config)", "class_method_signature": "WorkspaceScanner.createFileSet(ScanConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "normalizePattern", "parameters": "(String p)", "modifiers": "private static", "return": "String", "signature": "String normalizePattern(String p)", "full_signature": "private static String normalizePattern(String p)", "class_method_signature": "WorkspaceScanner.normalizePattern(String p)", "testcase": false, "constructor": false}], "file": "org.jabylon.properties/src/main/java/org/jabylon/properties/util/scanner/WorkspaceScanner.java"}, "focal_method": {"identifier": "fullScan", "parameters": "(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, IProgressMonitor monitor)", "modifiers": "public", "return": "void", "body": "public void fullScan(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, IProgressMonitor monitor) {\n\n        FileSet fs = createFileSet(config);\n        fs.setDir(baseDir);\n        SubMonitor subMon = SubMonitor.convert(monitor, \"Scanning\", 100);\n        String masterLocale = config.getMasterLocale();\n        if (masterLocale != null && masterLocale.isEmpty())\n            masterLocale = null;\n        if (baseDir.exists()) {\n            DirectoryScanner ds = fs.getDirectoryScanner(new org.apache.tools.ant.Project());\n            subMon.worked(10);\n            String[] files = ds.getIncludedFiles();\n            subMon.setWorkRemaining(files.length);\n            for (String f : files) {\n            \tcheckCanceled(monitor);\n                File file = new File(baseDir, f);\n                if(scanner.isTemplate(file, config.getMasterLocale())) {\n                    subMon.subTask(f);\n                    acceptor.newMatch(file);\n                    subMon.worked(1);\n                }\n            }\n        }\n        if(monitor!=null)\n            monitor.done();\n    }", "signature": "void fullScan(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, IProgressMonitor monitor)", "full_signature": "public void fullScan(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, IProgressMonitor monitor)", "class_method_signature": "WorkspaceScanner.fullScan(PropertyFileAcceptor acceptor, File baseDir, PropertyScanner scanner, ScanConfiguration config, IProgressMonitor monitor)", "testcase": false, "constructor": false, "invocations": ["createFileSet", "setDir", "convert", "getMasterLocale", "isEmpty", "exists", "getDirectoryScanner", "worked", "getIncludedFiles", "setWorkRemaining", "checkCanceled", "isTemplate", "getMasterLocale", "subTask", "newMatch", "worked", "done"]}, "repository": {"repo_id": 3986627, "url": "https://github.com/jutzig/jabylon", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 51, "size": 13400, "license": "licensed"}}