{"test_class": {"identifier": "VMCommandLineTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String[] commandLine = new String[] { \n\t\t\t\"-D=true\", \"-v\", \"clean\", \"-v\",  //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$\n\t\t\t\"-F\", \"-b\", \"-v\", \"package\",  //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$\n\t\t\t\"-F\", \"123\", \"-nob\", \"installters\",  //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$\n\t\t\t\"-S\", \"-b\", \"--\", \"-v\"};", "modifier": "private static final", "type": "String[]", "declarator": "commandLine = new String[] { \n\t\t\t\"-D=true\", \"-v\", \"clean\", \"-v\",  //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$\n\t\t\t\"-F\", \"-b\", \"-v\", \"package\",  //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$\n\t\t\t\"-F\", \"123\", \"-nob\", \"installters\",  //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$\n\t\t\t\"-S\", \"-b\", \"--\", \"-v\"}", "var_name": "commandLine"}, {"original_string": "private static final String[] commandLine2 = new String[] {\"-D=true\"};", "modifier": "private static final", "type": "String[]", "declarator": "commandLine2 = new String[] {\"-D=true\"}", "var_name": "commandLine2"}, {"original_string": "private static final String[] optionDefinitions = new String[] {\n\t\t\t\"D=b\", \"S=s\", \"F:f\", \"v+\", \"b!\"};", "modifier": "private static final", "type": "String[]", "declarator": "optionDefinitions = new String[] {\n\t\t\t\"D=b\", \"S=s\", \"F:f\", \"v+\", \"b!\"}", "var_name": "optionDefinitions"}], "file": "core/vmutils/src/test/java/org/arakhne/afc/vmutil/VMCommandLineTest.java"}, "test_case": {"identifier": "splitOptionsAndParameters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void splitOptionsAndParameters() {\n\t\tVMCommandLine.saveVMParameters(VMCommandLineTest.class, commandLine);\n\t\tVMCommandLine.splitOptionsAndParameters(optionDefinitions);\n\n\t\tMap<String,List<Object>> options = VMCommandLine.getCommandLineOptions();\n\t\tString[] parameters = VMCommandLine.getCommandLineParameters();\n\t\tList<Object> values;\n\t\t\n\t\tassertNotNull(options);\n\t\tassertEquals(5, options.size());\n\t\t\n\t\tassertTrue(options.containsKey(\"D\"));  //$NON-NLS-1$\n\t\tvalues = options.get(\"D\");  //$NON-NLS-1$\n\t\tassertNotNull(values);\n\t\tassertEquals(1, values.size());\n\t\tassertEquals(true, values.get(0));\n\n\t\tassertTrue(options.containsKey(\"v\"));  //$NON-NLS-1$\n\t\tvalues = options.get(\"v\");  //$NON-NLS-1$\n\t\tassertNotNull(values);\n\t\tassertEquals(1, values.size());\n\t\tassertEquals((long)3, values.get(0));\n\n\t\tassertTrue(options.containsKey(\"F\"));  //$NON-NLS-1$\n\t\tvalues = options.get(\"F\");  //$NON-NLS-1$\n\t\tassertNotNull(values);\n\t\tassertEquals(2, values.size());\n\t\tassertEquals(0., values.get(0));\n\t\tassertEquals(123., values.get(1));\n\n\t\tassertTrue(options.containsKey(\"b\"));  //$NON-NLS-1$\n\t\tvalues = options.get(\"b\");  //$NON-NLS-1$\n\t\tassertNotNull(values);\n\t\tassertEquals(1, values.size());\n\t\tassertEquals(false, values.get(0));\n\n\t\tassertTrue(options.containsKey(\"S\"));  //$NON-NLS-1$\n\t\tvalues = options.get(\"S\");  //$NON-NLS-1$\n\t\tassertNotNull(values);\n\t\tassertEquals(1, values.size());\n\t\tassertEquals(\"-b\", values.get(0));  //$NON-NLS-1$\n\t\t\n\t\tvalues = options.get(\"nob\");  //$NON-NLS-1$\n\t\tassertNull(values);\n\n\t\tassertNotNull(parameters);\n\t\tassertEquals(4, parameters.length);\n\t\tassertEquals(\"clean\", parameters[0]);  //$NON-NLS-1$\n\t\tassertEquals(\"package\", parameters[1]);  //$NON-NLS-1$\n\t\tassertEquals(\"installters\", parameters[2]);  //$NON-NLS-1$\n\t\tassertEquals(\"-v\", parameters[3]);  //$NON-NLS-1$\n\t}", "signature": "void splitOptionsAndParameters()", "full_signature": "@Test public void splitOptionsAndParameters()", "class_method_signature": "VMCommandLineTest.splitOptionsAndParameters()", "testcase": true, "constructor": false, "invocations": ["saveVMParameters", "splitOptionsAndParameters", "getCommandLineOptions", "getCommandLineParameters", "assertNotNull", "assertEquals", "size", "assertTrue", "containsKey", "get", "assertNotNull", "assertEquals", "size", "assertEquals", "get", "assertTrue", "containsKey", "get", "assertNotNull", "assertEquals", "size", "assertEquals", "get", "assertTrue", "containsKey", "get", "assertNotNull", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertTrue", "containsKey", "get", "assertNotNull", "assertEquals", "size", "assertEquals", "get", "assertTrue", "containsKey", "get", "assertNotNull", "assertEquals", "size", "assertEquals", "get", "get", "assertNull", "assertNotNull", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "VMCommandLine", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String classnameToLaunch;", "modifier": "private static", "type": "String", "declarator": "classnameToLaunch", "var_name": "classnameToLaunch"}, {"original_string": "private static boolean analyzed;", "modifier": "private static", "type": "boolean", "declarator": "analyzed", "var_name": "analyzed"}, {"original_string": "private static SortedMap<String, List<Object>> commandLineOptions;", "modifier": "private static", "type": "SortedMap<String, List<Object>>", "declarator": "commandLineOptions", "var_name": "commandLineOptions"}, {"original_string": "private static String[] commandLineParameters;", "modifier": "private static", "type": "String[]", "declarator": "commandLineParameters", "var_name": "commandLineParameters"}], "methods": [{"identifier": "VMCommandLine", "parameters": "(Class<?> classToLaunch, String... parameters)", "modifiers": "public", "return": "", "signature": " VMCommandLine(Class<?> classToLaunch, String... parameters)", "full_signature": "public  VMCommandLine(Class<?> classToLaunch, String... parameters)", "class_method_signature": "VMCommandLine.VMCommandLine(Class<?> classToLaunch, String... parameters)", "testcase": false, "constructor": true}, {"identifier": "VMCommandLine", "parameters": "(String classToLaunch, String... parameters)", "modifiers": "public", "return": "", "signature": " VMCommandLine(String classToLaunch, String... parameters)", "full_signature": "public  VMCommandLine(String classToLaunch, String... parameters)", "class_method_signature": "VMCommandLine.VMCommandLine(String classToLaunch, String... parameters)", "testcase": false, "constructor": true}, {"identifier": "VMCommandLine", "parameters": "(Class<?> classToLaunch, String[] optionDefinitions, String... parameters)", "modifiers": "public", "return": "", "signature": " VMCommandLine(Class<?> classToLaunch, String[] optionDefinitions, String... parameters)", "full_signature": "public  VMCommandLine(Class<?> classToLaunch, String[] optionDefinitions, String... parameters)", "class_method_signature": "VMCommandLine.VMCommandLine(Class<?> classToLaunch, String[] optionDefinitions, String... parameters)", "testcase": false, "constructor": true}, {"identifier": "VMCommandLine", "parameters": "(String classToLaunch, String[] optionDefinitions, String... parameters)", "modifiers": "public", "return": "", "signature": " VMCommandLine(String classToLaunch, String[] optionDefinitions, String... parameters)", "full_signature": "public  VMCommandLine(String classToLaunch, String[] optionDefinitions, String... parameters)", "class_method_signature": "VMCommandLine.VMCommandLine(String classToLaunch, String[] optionDefinitions, String... parameters)", "testcase": false, "constructor": true}, {"identifier": "VMCommandLine", "parameters": "()", "modifiers": "public", "return": "", "signature": " VMCommandLine()", "full_signature": "public  VMCommandLine()", "class_method_signature": "VMCommandLine.VMCommandLine()", "testcase": false, "constructor": true}, {"identifier": "getExecutableFilename", "parameters": "(String name)", "modifiers": "@Pure public static", "return": "String", "signature": "String getExecutableFilename(String name)", "full_signature": "@Pure public static String getExecutableFilename(String name)", "class_method_signature": "VMCommandLine.getExecutableFilename(String name)", "testcase": false, "constructor": false}, {"identifier": "getVMBinary", "parameters": "()", "modifiers": "@Pure public static", "return": "String", "signature": "String getVMBinary()", "full_signature": "@Pure public static String getVMBinary()", "class_method_signature": "VMCommandLine.getVMBinary()", "testcase": false, "constructor": false}, {"identifier": "launchVMWithClassPath", "parameters": "(Class<?> classToLaunch, String classpath,\n\t\t\tString... additionalParams)", "modifiers": "@Inline(value = \"VMCommandLine.launchVMWithClassPath(($1).getCanonicalName(), ($2), ($3))\", imported = {VMCommandLine.class}, statementExpression = true) public static", "return": "Process", "signature": "Process launchVMWithClassPath(Class<?> classToLaunch, String classpath,\n\t\t\tString... additionalParams)", "full_signature": "@Inline(value = \"VMCommandLine.launchVMWithClassPath(($1).getCanonicalName(), ($2), ($3))\", imported = {VMCommandLine.class}, statementExpression = true) public static Process launchVMWithClassPath(Class<?> classToLaunch, String classpath,\n\t\t\tString... additionalParams)", "class_method_signature": "VMCommandLine.launchVMWithClassPath(Class<?> classToLaunch, String classpath,\n\t\t\tString... additionalParams)", "testcase": false, "constructor": false}, {"identifier": "launchVMWithClassPath", "parameters": "(String classToLaunch, String classpath,\n\t\t\tString... additionalParams)", "modifiers": "@SuppressWarnings({\"checkstyle:magicnumber\"}) public static", "return": "Process", "signature": "Process launchVMWithClassPath(String classToLaunch, String classpath,\n\t\t\tString... additionalParams)", "full_signature": "@SuppressWarnings({\"checkstyle:magicnumber\"}) public static Process launchVMWithClassPath(String classToLaunch, String classpath,\n\t\t\tString... additionalParams)", "class_method_signature": "VMCommandLine.launchVMWithClassPath(String classToLaunch, String classpath,\n\t\t\tString... additionalParams)", "testcase": false, "constructor": false}, {"identifier": "launchVMWithClassPath", "parameters": "(Class<?> classToLaunch, File[] classpath,\n\t\t\tString... additionalParams)", "modifiers": "@Inline(value = \"VMCommandLine.launchVMWithClassPath(($1).getCanonicalName(), ($2), ($3))\", imported = {VMCommandLine.class}, statementExpression = true) public static", "return": "Process", "signature": "Process launchVMWithClassPath(Class<?> classToLaunch, File[] classpath,\n\t\t\tString... additionalParams)", "full_signature": "@Inline(value = \"VMCommandLine.launchVMWithClassPath(($1).getCanonicalName(), ($2), ($3))\", imported = {VMCommandLine.class}, statementExpression = true) public static Process launchVMWithClassPath(Class<?> classToLaunch, File[] classpath,\n\t\t\tString... additionalParams)", "class_method_signature": "VMCommandLine.launchVMWithClassPath(Class<?> classToLaunch, File[] classpath,\n\t\t\tString... additionalParams)", "testcase": false, "constructor": false}, {"identifier": "launchVMWithClassPath", "parameters": "(String classToLaunch, File[] classpath,\n\t\t\tString... additionalParams)", "modifiers": "public static", "return": "Process", "signature": "Process launchVMWithClassPath(String classToLaunch, File[] classpath,\n\t\t\tString... additionalParams)", "full_signature": "public static Process launchVMWithClassPath(String classToLaunch, File[] classpath,\n\t\t\tString... additionalParams)", "class_method_signature": "VMCommandLine.launchVMWithClassPath(String classToLaunch, File[] classpath,\n\t\t\tString... additionalParams)", "testcase": false, "constructor": false}, {"identifier": "launchVMWithJar", "parameters": "(File jarFile, String... additionalParams)", "modifiers": "@SuppressWarnings(\"checkstyle:magicnumber\") public static", "return": "Process", "signature": "Process launchVMWithJar(File jarFile, String... additionalParams)", "full_signature": "@SuppressWarnings(\"checkstyle:magicnumber\") public static Process launchVMWithJar(File jarFile, String... additionalParams)", "class_method_signature": "VMCommandLine.launchVMWithJar(File jarFile, String... additionalParams)", "testcase": false, "constructor": false}, {"identifier": "launchVM", "parameters": "(Class<?> classToLaunch, String... additionalParams)", "modifiers": "@Inline(value = \"VMCommandLine.launchVM(($1).getCanonicalName(), ($2))\", imported = {VMCommandLine.class}, statementExpression = true) public static", "return": "Process", "signature": "Process launchVM(Class<?> classToLaunch, String... additionalParams)", "full_signature": "@Inline(value = \"VMCommandLine.launchVM(($1).getCanonicalName(), ($2))\", imported = {VMCommandLine.class}, statementExpression = true) public static Process launchVM(Class<?> classToLaunch, String... additionalParams)", "class_method_signature": "VMCommandLine.launchVM(Class<?> classToLaunch, String... additionalParams)", "testcase": false, "constructor": false}, {"identifier": "launchVM", "parameters": "(String classToLaunch, String... additionalParams)", "modifiers": "@Inline(value = \"VMCommandLine.launchVMWithClassPath(($1), System.getProperty(\\\"java.class.path\\\"), ($2))\", imported = {VMCommandLine.class}, statementExpression = true) public static", "return": "Process", "signature": "Process launchVM(String classToLaunch, String... additionalParams)", "full_signature": "@Inline(value = \"VMCommandLine.launchVMWithClassPath(($1), System.getProperty(\\\"java.class.path\\\"), ($2))\", imported = {VMCommandLine.class}, statementExpression = true) public static Process launchVM(String classToLaunch, String... additionalParams)", "class_method_signature": "VMCommandLine.launchVM(String classToLaunch, String... additionalParams)", "testcase": false, "constructor": false}, {"identifier": "saveVMParameters", "parameters": "(Class<?> classToLaunch, String... parameters)", "modifiers": "@Inline(value = \"VMCommandLine.saveVMParameters((($1) != null) ? ($1).getCanonicalName() : null, ($2))\", imported = {VMCommandLine.class}, statementExpression = true) public static", "return": "void", "signature": "void saveVMParameters(Class<?> classToLaunch, String... parameters)", "full_signature": "@Inline(value = \"VMCommandLine.saveVMParameters((($1) != null) ? ($1).getCanonicalName() : null, ($2))\", imported = {VMCommandLine.class}, statementExpression = true) public static void saveVMParameters(Class<?> classToLaunch, String... parameters)", "class_method_signature": "VMCommandLine.saveVMParameters(Class<?> classToLaunch, String... parameters)", "testcase": false, "constructor": false}, {"identifier": "saveVMParameters", "parameters": "(String classToLaunch, String... parameters)", "modifiers": "public static", "return": "void", "signature": "void saveVMParameters(String classToLaunch, String... parameters)", "full_signature": "public static void saveVMParameters(String classToLaunch, String... parameters)", "class_method_signature": "VMCommandLine.saveVMParameters(String classToLaunch, String... parameters)", "testcase": false, "constructor": false}, {"identifier": "saveVMParametersIfNotSet", "parameters": "(Class<?> classToLaunch, String... parameters)", "modifiers": "@Inline(value = \"VMCommandLine.saveVMParametersIfNotSet(($1).getCanonicalName(), ($2))\", imported = {VMCommandLine.class}, statementExpression = true) public static", "return": "void", "signature": "void saveVMParametersIfNotSet(Class<?> classToLaunch, String... parameters)", "full_signature": "@Inline(value = \"VMCommandLine.saveVMParametersIfNotSet(($1).getCanonicalName(), ($2))\", imported = {VMCommandLine.class}, statementExpression = true) public static void saveVMParametersIfNotSet(Class<?> classToLaunch, String... parameters)", "class_method_signature": "VMCommandLine.saveVMParametersIfNotSet(Class<?> classToLaunch, String... parameters)", "testcase": false, "constructor": false}, {"identifier": "saveVMParametersIfNotSet", "parameters": "(String classToLaunch, String... parameters)", "modifiers": "public static", "return": "void", "signature": "void saveVMParametersIfNotSet(String classToLaunch, String... parameters)", "full_signature": "public static void saveVMParametersIfNotSet(String classToLaunch, String... parameters)", "class_method_signature": "VMCommandLine.saveVMParametersIfNotSet(String classToLaunch, String... parameters)", "testcase": false, "constructor": false}, {"identifier": "relaunchVM", "parameters": "()", "modifiers": "public static", "return": "Process", "signature": "Process relaunchVM()", "full_signature": "public static Process relaunchVM()", "class_method_signature": "VMCommandLine.relaunchVM()", "testcase": false, "constructor": false}, {"identifier": "getAllCommandLineParameters", "parameters": "()", "modifiers": "@Pure @SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\"}) public static", "return": "String[]", "signature": "String[] getAllCommandLineParameters()", "full_signature": "@Pure @SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\"}) public static String[] getAllCommandLineParameters()", "class_method_signature": "VMCommandLine.getAllCommandLineParameters()", "testcase": false, "constructor": false}, {"identifier": "getCommandLineParameters", "parameters": "()", "modifiers": "@Pure public static", "return": "String[]", "signature": "String[] getCommandLineParameters()", "full_signature": "@Pure public static String[] getCommandLineParameters()", "class_method_signature": "VMCommandLine.getCommandLineParameters()", "testcase": false, "constructor": false}, {"identifier": "shiftCommandLineParameters", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String shiftCommandLineParameters()", "full_signature": "public static String shiftCommandLineParameters()", "class_method_signature": "VMCommandLine.shiftCommandLineParameters()", "testcase": false, "constructor": false}, {"identifier": "getCommandLineOptions", "parameters": "()", "modifiers": "@Pure public static", "return": "Map<String, List<Object>>", "signature": "Map<String, List<Object>> getCommandLineOptions()", "full_signature": "@Pure public static Map<String, List<Object>> getCommandLineOptions()", "class_method_signature": "VMCommandLine.getCommandLineOptions()", "testcase": false, "constructor": false}, {"identifier": "getCommandLineOption", "parameters": "(String name)", "modifiers": "@Pure public static", "return": "List<Object>", "signature": "List<Object> getCommandLineOption(String name)", "full_signature": "@Pure public static List<Object> getCommandLineOption(String name)", "class_method_signature": "VMCommandLine.getCommandLineOption(String name)", "testcase": false, "constructor": false}, {"identifier": "hasCommandLineOption", "parameters": "(String name)", "modifiers": "@Pure public static", "return": "boolean", "signature": "boolean hasCommandLineOption(String name)", "full_signature": "@Pure public static boolean hasCommandLineOption(String name)", "class_method_signature": "VMCommandLine.hasCommandLineOption(String name)", "testcase": false, "constructor": false}, {"identifier": "registerOptionValue", "parameters": "(SortedMap<String, List<Object>> options, String name, Object value,\n\t\t\tOptionType type)", "modifiers": "@SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\"}) private static", "return": "boolean", "signature": "boolean registerOptionValue(SortedMap<String, List<Object>> options, String name, Object value,\n\t\t\tOptionType type)", "full_signature": "@SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"checkstyle:npathcomplexity\"}) private static boolean registerOptionValue(SortedMap<String, List<Object>> options, String name, Object value,\n\t\t\tOptionType type)", "class_method_signature": "VMCommandLine.registerOptionValue(SortedMap<String, List<Object>> options, String name, Object value,\n\t\t\tOptionType type)", "testcase": false, "constructor": false}, {"identifier": "splitOptionsAndParameters", "parameters": "(String... optionDefinitions)", "modifiers": "@SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"npathcomplexity\"}) public static", "return": "void", "signature": "void splitOptionsAndParameters(String... optionDefinitions)", "full_signature": "@SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"npathcomplexity\"}) public static void splitOptionsAndParameters(String... optionDefinitions)", "class_method_signature": "VMCommandLine.splitOptionsAndParameters(String... optionDefinitions)", "testcase": false, "constructor": false}, {"identifier": "hasOption", "parameters": "(String optionLabel)", "modifiers": "@Pure @SuppressWarnings(\"static-method\") public", "return": "boolean", "signature": "boolean hasOption(String optionLabel)", "full_signature": "@Pure @SuppressWarnings(\"static-method\") public boolean hasOption(String optionLabel)", "class_method_signature": "VMCommandLine.hasOption(String optionLabel)", "testcase": false, "constructor": false}, {"identifier": "getFirstOptionValue", "parameters": "(String optionLabel)", "modifiers": "@Pure @SuppressWarnings(\"static-method\") public", "return": "Object", "signature": "Object getFirstOptionValue(String optionLabel)", "full_signature": "@Pure @SuppressWarnings(\"static-method\") public Object getFirstOptionValue(String optionLabel)", "class_method_signature": "VMCommandLine.getFirstOptionValue(String optionLabel)", "testcase": false, "constructor": false}, {"identifier": "getOptionValues", "parameters": "(String optionLabel)", "modifiers": "@Pure @SuppressWarnings(\"static-method\") public", "return": "List<Object>", "signature": "List<Object> getOptionValues(String optionLabel)", "full_signature": "@Pure @SuppressWarnings(\"static-method\") public List<Object> getOptionValues(String optionLabel)", "class_method_signature": "VMCommandLine.getOptionValues(String optionLabel)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Pure @SuppressWarnings(\"static-method\") public", "return": "String[]", "signature": "String[] getParameters()", "full_signature": "@Pure @SuppressWarnings(\"static-method\") public String[] getParameters()", "class_method_signature": "VMCommandLine.getParameters()", "testcase": false, "constructor": false}, {"identifier": "shiftParameters", "parameters": "()", "modifiers": "@SuppressWarnings(\"static-method\") public", "return": "String", "signature": "String shiftParameters()", "full_signature": "@SuppressWarnings(\"static-method\") public String shiftParameters()", "class_method_signature": "VMCommandLine.shiftParameters()", "testcase": false, "constructor": false}, {"identifier": "getParameterCount", "parameters": "()", "modifiers": "@Pure @SuppressWarnings(\"static-method\") public", "return": "int", "signature": "int getParameterCount()", "full_signature": "@Pure @SuppressWarnings(\"static-method\") public int getParameterCount()", "class_method_signature": "VMCommandLine.getParameterCount()", "testcase": false, "constructor": false}, {"identifier": "getParameterAt", "parameters": "(int index)", "modifiers": "@Pure @SuppressWarnings(\"static-method\") public", "return": "String", "signature": "String getParameterAt(int index)", "full_signature": "@Pure @SuppressWarnings(\"static-method\") public String getParameterAt(int index)", "class_method_signature": "VMCommandLine.getParameterAt(int index)", "testcase": false, "constructor": false}, {"identifier": "isParameterExists", "parameters": "(int index)", "modifiers": "@Pure @SuppressWarnings(\"static-method\") public", "return": "boolean", "signature": "boolean isParameterExists(int index)", "full_signature": "@Pure @SuppressWarnings(\"static-method\") public boolean isParameterExists(int index)", "class_method_signature": "VMCommandLine.isParameterExists(int index)", "testcase": false, "constructor": false}], "file": "core/vmutils/src/main/java/org/arakhne/afc/vmutil/VMCommandLine.java"}, "focal_method": {"identifier": "splitOptionsAndParameters", "parameters": "(String... optionDefinitions)", "modifiers": "@SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"npathcomplexity\"}) public static", "return": "void", "body": "@SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"npathcomplexity\"})\n\tpublic static void splitOptionsAndParameters(String... optionDefinitions) {\n\t\tif (analyzed) {\n\t\t\treturn;\n\t\t}\n\n\t\tfinal List<String> params = new ArrayList<>();\n\t\tfinal SortedMap<String, List<Object>> options = new TreeMap<>();\n\t\tString opt;\n\n\t\t// Analyze definitions\n\t\tfinal Map<String, OptionType> defs = new TreeMap<>();\n\t\tfor (final String def : optionDefinitions) {\n\t\t\tif (def.endsWith(\"!\")) { //$NON-NLS-1$\n\t\t\t\topt = def.substring(0, def.length() - 1);\n\t\t\t\tdefs.put(opt, OptionType.FLAG);\n\t\t\t\tregisterOptionValue(options, opt, Boolean.FALSE, OptionType.FLAG);\n\t\t\t} else if (def.endsWith(\"+\")) { //$NON-NLS-1$\n\t\t\t\topt = def.substring(0, def.length() - 1);\n\t\t\t\tdefs.put(opt, OptionType.AUTO_INCREMENTED);\n\t\t\t\tregisterOptionValue(options, opt, Long.valueOf(0), OptionType.AUTO_INCREMENTED);\n\t\t\t} else if (def.endsWith(\"=b\")) { //$NON-NLS-1$\n\t\t\t\topt = def.substring(0, def.length() - 2);\n\t\t\t\tdefs.put(opt, OptionType.MANDATORY_BOOLEAN);\n\t\t\t} else if (def.endsWith(\":b\")) { //$NON-NLS-1$\n\t\t\t\topt = def.substring(0, def.length() - 2);\n\t\t\t\tdefs.put(opt, OptionType.OPTIONAL_BOOLEAN);\n\t\t\t} else if (def.endsWith(\"=f\")) { //$NON-NLS-1$\n\t\t\t\topt = def.substring(0, def.length() - 2);\n\t\t\t\tdefs.put(opt, OptionType.MANDATORY_FLOAT);\n\t\t\t} else if (def.endsWith(\":f\")) { //$NON-NLS-1$\n\t\t\t\topt = def.substring(0, def.length() - 2);\n\t\t\t\tdefs.put(opt, OptionType.OPTIONAL_FLOAT);\n\t\t\t} else if (def.endsWith(\"=i\")) { //$NON-NLS-1$\n\t\t\t\topt = def.substring(0, def.length() - 2);\n\t\t\t\tdefs.put(opt, OptionType.MANDATORY_INTEGER);\n\t\t\t} else if (def.endsWith(\":i\")) { //$NON-NLS-1$\n\t\t\t\topt = def.substring(0, def.length() - 2);\n\t\t\t\tdefs.put(opt, OptionType.OPTIONAL_INTEGER);\n\t\t\t} else if (def.endsWith(\"=s\")) { //$NON-NLS-1$\n\t\t\t\topt = def.substring(0, def.length() - 2);\n\t\t\t\tdefs.put(opt, OptionType.MANDATORY_STRING);\n\t\t\t} else if (def.endsWith(\":s\")) { //$NON-NLS-1$\n\t\t\t\topt = def.substring(0, def.length() - 2);\n\t\t\t\tdefs.put(opt, OptionType.OPTIONAL_STRING);\n\t\t\t} else {\n\t\t\t\tdefs.put(def, OptionType.SIMPLE);\n\t\t\t}\n\t\t}\n\n\t\tint idx;\n\t\tString base;\n\t\tString nbase;\n\t\tString val;\n\t\tOptionType type;\n\t\tOptionType waitingValue = null;\n\t\tString valueOptionName = null;\n\t\tboolean allParameters = false;\n\t\tboolean success;\n\n\t\tfor (final String param : commandLineParameters) {\n\t\t\tif (allParameters) {\n\t\t\t\tparams.add(param);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (waitingValue != null && waitingValue.isMandatory()) {\n\t\t\t\t// Expect a value as the next parameter\n\t\t\t\tsuccess = registerOptionValue(options, valueOptionName, param, waitingValue);\n\t\t\t\twaitingValue = null;\n\t\t\t\tvalueOptionName = null;\n\t\t\t\tif (success) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (\"--\".equals(param)) { //$NON-NLS-1$\n\t\t\t\tif (waitingValue != null) {\n\t\t\t\t\tregisterOptionValue(options, valueOptionName, null, waitingValue);\n\t\t\t\t\twaitingValue = null;\n\t\t\t\t\tvalueOptionName = null;\n\t\t\t\t}\n\t\t\t\tallParameters = true;\n\t\t\t\tcontinue;\n\t\t\t} else if ((File.separatorChar != '/') && (param.startsWith(\"/\"))) { //$NON-NLS-1$\n\t\t\t\topt = param.substring(1);\n\t\t\t} else if (param.startsWith(\"--\")) { //$NON-NLS-1$\n\t\t\t\topt = param.substring(2);\n\t\t\t} else if (param.startsWith(\"-\")) { //$NON-NLS-1$\n\t\t\t\topt = param.substring(1);\n\t\t\t} else if (waitingValue != null) {\n\t\t\t\tsuccess = registerOptionValue(options, valueOptionName, param, waitingValue);\n\t\t\t\twaitingValue = null;\n\t\t\t\tvalueOptionName = null;\n\t\t\t\tif (!success) {\n\t\t\t\t\tparams.add(param);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tparams.add(param);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (waitingValue != null) {\n\t\t\t\tsuccess = registerOptionValue(options, valueOptionName, param, waitingValue);\n\t\t\t\twaitingValue = null;\n\t\t\t\tvalueOptionName = null;\n\t\t\t\tif (success) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tidx = opt.indexOf('=');\n\t\t\tif (idx > 0) {\n\t\t\t\tbase = opt.substring(0, idx);\n\t\t\t\tval = opt.substring(idx + 1);\n\t\t\t} else {\n\t\t\t\tbase = opt;\n\t\t\t\tval = null;\n\t\t\t}\n\n\t\t\tnbase = null;\n\t\t\ttype = defs.get(base);\n\t\t\tif (type == null && base.toLowerCase().startsWith(\"no\")) { //$NON-NLS-1$\n\t\t\t\tnbase = base.substring(2);\n\t\t\t\ttype = defs.get(nbase);\n\t\t\t}\n\t\t\tif (type != null) {\n\t\t\t\tswitch (type) {\n\t\t\t\tcase FLAG:\n\t\t\t\t\tif (nbase == null) {\n\t\t\t\t\t\tregisterOptionValue(options, base, Boolean.TRUE, type);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tregisterOptionValue(options, nbase, Boolean.FALSE, type);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase MANDATORY_FLOAT:\n\t\t\t\tcase MANDATORY_BOOLEAN:\n\t\t\t\tcase MANDATORY_INTEGER:\n\t\t\t\tcase MANDATORY_STRING:\n\t\t\t\tcase OPTIONAL_FLOAT:\n\t\t\t\tcase OPTIONAL_BOOLEAN:\n\t\t\t\tcase OPTIONAL_INTEGER:\n\t\t\t\tcase OPTIONAL_STRING:\n\t\t\t\t\tif (val != null) {\n\t\t\t\t\t\tregisterOptionValue(options, base, val, type);\n\t\t\t\t\t} else {\n\t\t\t\t\t\twaitingValue = type;\n\t\t\t\t\t\tvalueOptionName = base;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t\t//$CASES-OMITTED$\n\t\t\t\tdefault:\n\t\t\t\t\tregisterOptionValue(options, base, val, type);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Not a recognized option, assuming simple\n\t\t\t\tregisterOptionValue(options, base, val, OptionType.SIMPLE);\n\t\t\t}\n\t\t}\n\n\t\tif (waitingValue != null && waitingValue.isMandatory()) {\n\t\t\tthrow new IllegalStateException(Locale.getString(\"E2\", valueOptionName)); //$NON-NLS-1$\n\t\t}\n\n\t\tcommandLineParameters = new String[params.size()];\n\t\tparams.toArray(commandLineParameters);\n\t\tparams.clear();\n\n\t\tcommandLineOptions = options;\n\n\t\tanalyzed = true;\n\t}", "signature": "void splitOptionsAndParameters(String... optionDefinitions)", "full_signature": "@SuppressWarnings({\"checkstyle:cyclomaticcomplexity\", \"npathcomplexity\"}) public static void splitOptionsAndParameters(String... optionDefinitions)", "class_method_signature": "VMCommandLine.splitOptionsAndParameters(String... optionDefinitions)", "testcase": false, "constructor": false, "invocations": ["endsWith", "substring", "length", "put", "registerOptionValue", "endsWith", "substring", "length", "put", "registerOptionValue", "valueOf", "endsWith", "substring", "length", "put", "endsWith", "substring", "length", "put", "endsWith", "substring", "length", "put", "endsWith", "substring", "length", "put", "endsWith", "substring", "length", "put", "endsWith", "substring", "length", "put", "endsWith", "substring", "length", "put", "endsWith", "substring", "length", "put", "put", "add", "isMandatory", "registerOptionValue", "equals", "registerOptionValue", "startsWith", "substring", "startsWith", "substring", "startsWith", "substring", "registerOptionValue", "add", "add", "registerOptionValue", "indexOf", "substring", "substring", "get", "startsWith", "toLowerCase", "substring", "get", "registerOptionValue", "registerOptionValue", "registerOptionValue", "registerOptionValue", "registerOptionValue", "isMandatory", "getString", "size", "toArray", "clear"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}