{"test_class": {"identifier": "ExcelChartSheetDefaultTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<?> CATEGORIES = Arrays.asList(\"cat 1\", \"cat 2\", \"cat 3\", \"cat 4\", \"cat 5\");", "modifier": "private static final", "type": "List<?>", "declarator": "CATEGORIES = Arrays.asList(\"cat 1\", \"cat 2\", \"cat 3\", \"cat 4\", \"cat 5\")", "var_name": "CATEGORIES"}, {"original_string": "private static final List<List<? extends Number>> VALUES =\n            Arrays.asList(Arrays.asList(5, 7, 10, 12, 6), Arrays.asList(20, 12, 10, 5, 14));", "modifier": "private static final", "type": "List<List<? extends Number>>", "declarator": "VALUES =\n            Arrays.asList(Arrays.asList(5, 7, 10, 12, 6), Arrays.asList(20, 12, 10, 5, 14))", "var_name": "VALUES"}, {"original_string": "private Workbook workbook;", "modifier": "private", "type": "Workbook", "declarator": "workbook", "var_name": "workbook"}], "file": "web/src/test/java/org/devgateway/toolkit/web/excelcharts/ExcelChartSheetDefaultTest.java"}, "test_case": {"identifier": "createChartAndLegend", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createChartAndLegend() throws Exception {\n        final ExcelChartSheet excelChartSheet = new ExcelChartSheetDefault(workbook, ChartType.pie.toString());\n        Chart chart = excelChartSheet.createChartAndLegend();\n\n        Assert.assertNotNull(chart);\n    }", "signature": "void createChartAndLegend()", "full_signature": "@Test public void createChartAndLegend()", "class_method_signature": "ExcelChartSheetDefaultTest.createChartAndLegend()", "testcase": true, "constructor": false, "invocations": ["toString", "createChartAndLegend", "assertNotNull"]}, "focal_class": {"identifier": "ExcelChartSheetDefault", "superclass": "", "interfaces": "implements ExcelChartSheet", "fields": [{"original_string": "private static final int DATAFONTHEIGHT = 12;", "modifier": "private static final", "type": "int", "declarator": "DATAFONTHEIGHT = 12", "var_name": "DATAFONTHEIGHT"}, {"original_string": "private static final int HEADERFONTHEIGHT = 14;", "modifier": "private static final", "type": "int", "declarator": "HEADERFONTHEIGHT = 14", "var_name": "HEADERFONTHEIGHT"}, {"original_string": "private static final int ROWHEADERHEIGHT = 800;", "modifier": "private static final", "type": "int", "declarator": "ROWHEADERHEIGHT = 800", "var_name": "ROWHEADERHEIGHT"}, {"original_string": "private static final int ROWHEIGHT = 600;", "modifier": "private static final", "type": "int", "declarator": "ROWHEIGHT = 600", "var_name": "ROWHEIGHT"}, {"original_string": "private final Sheet excelSheet;", "modifier": "private final", "type": "Sheet", "declarator": "excelSheet", "var_name": "excelSheet"}, {"original_string": "private final CellStyle dataStyleCell;", "modifier": "private final", "type": "CellStyle", "declarator": "dataStyleCell", "var_name": "dataStyleCell"}, {"original_string": "private final CellStyle headerStyleCell;", "modifier": "private final", "type": "CellStyle", "declarator": "headerStyleCell", "var_name": "headerStyleCell"}], "methods": [{"identifier": "ExcelChartSheetDefault", "parameters": "(final Workbook workbook, final String excelSheetName)", "modifiers": "public", "return": "", "signature": " ExcelChartSheetDefault(final Workbook workbook, final String excelSheetName)", "full_signature": "public  ExcelChartSheetDefault(final Workbook workbook, final String excelSheetName)", "class_method_signature": "ExcelChartSheetDefault.ExcelChartSheetDefault(final Workbook workbook, final String excelSheetName)", "testcase": false, "constructor": true}, {"identifier": "writeCell", "parameters": "(final Object value, final Row row, final int column)", "modifiers": "@Override public", "return": "void", "signature": "void writeCell(final Object value, final Row row, final int column)", "full_signature": "@Override public void writeCell(final Object value, final Row row, final int column)", "class_method_signature": "ExcelChartSheetDefault.writeCell(final Object value, final Row row, final int column)", "testcase": false, "constructor": false}, {"identifier": "createRow", "parameters": "(final int rowNumber)", "modifiers": "@Override public", "return": "Row", "signature": "Row createRow(final int rowNumber)", "full_signature": "@Override public Row createRow(final int rowNumber)", "class_method_signature": "ExcelChartSheetDefault.createRow(final int rowNumber)", "testcase": false, "constructor": false}, {"identifier": "createRow", "parameters": "()", "modifiers": "@Override public", "return": "Row", "signature": "Row createRow()", "full_signature": "@Override public Row createRow()", "class_method_signature": "ExcelChartSheetDefault.createRow()", "testcase": false, "constructor": false}, {"identifier": "setColumnWidth", "parameters": "(final int collNumber, final int size)", "modifiers": "@Override public", "return": "void", "signature": "void setColumnWidth(final int collNumber, final int size)", "full_signature": "@Override public void setColumnWidth(final int collNumber, final int size)", "class_method_signature": "ExcelChartSheetDefault.setColumnWidth(final int collNumber, final int size)", "testcase": false, "constructor": false}, {"identifier": "createChartAndLegend", "parameters": "()", "modifiers": "@Override public", "return": "Chart", "signature": "Chart createChartAndLegend()", "full_signature": "@Override public Chart createChartAndLegend()", "class_method_signature": "ExcelChartSheetDefault.createChartAndLegend()", "testcase": false, "constructor": false}, {"identifier": "getCategoryChartDataSource", "parameters": "()", "modifiers": "@Override public", "return": "ChartDataSource<?>", "signature": "ChartDataSource<?> getCategoryChartDataSource()", "full_signature": "@Override public ChartDataSource<?> getCategoryChartDataSource()", "class_method_signature": "ExcelChartSheetDefault.getCategoryChartDataSource()", "testcase": false, "constructor": false}, {"identifier": "getValuesChartDataSource", "parameters": "()", "modifiers": "@Override public", "return": "List<ChartDataSource<Number>>", "signature": "List<ChartDataSource<Number>> getValuesChartDataSource()", "full_signature": "@Override public List<ChartDataSource<Number>> getValuesChartDataSource()", "class_method_signature": "ExcelChartSheetDefault.getValuesChartDataSource()", "testcase": false, "constructor": false}, {"identifier": "getChartDataSource", "parameters": "(final int row)", "modifiers": "private", "return": "ChartDataSource", "signature": "ChartDataSource getChartDataSource(final int row)", "full_signature": "private ChartDataSource getChartDataSource(final int row)", "class_method_signature": "ExcelChartSheetDefault.getChartDataSource(final int row)", "testcase": false, "constructor": false}], "file": "web/src/main/java/org/devgateway/toolkit/web/excelcharts/ExcelChartSheetDefault.java"}, "focal_method": {"identifier": "createChartAndLegend", "parameters": "()", "modifiers": "@Override public", "return": "Chart", "body": "@Override\n    public Chart createChartAndLegend() {\n        final XSSFDrawing drawing = (XSSFDrawing) excelSheet.createDrawingPatriarch();\n        final ClientAnchor anchor = drawing.createAnchor(0, 0, 0, 0, 0, 5, 15, 25);\n        final Chart chart = drawing.createChart(anchor);\n\n        final ChartLegend legend = chart.getOrCreateLegend();\n        legend.setPosition(LegendPosition.BOTTOM);\n\n        return chart;\n    }", "signature": "Chart createChartAndLegend()", "full_signature": "@Override public Chart createChartAndLegend()", "class_method_signature": "ExcelChartSheetDefault.createChartAndLegend()", "testcase": false, "constructor": false, "invocations": ["createDrawingPatriarch", "createAnchor", "createChart", "getOrCreateLegend", "setPosition"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}