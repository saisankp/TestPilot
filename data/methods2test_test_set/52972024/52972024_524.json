{"test_class": {"identifier": "GetItemFromCachedCollectionTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GetItemFromCachedCollectionTask testTask;", "modifier": "private", "type": "GetItemFromCachedCollectionTask", "declarator": "testTask", "var_name": "testTask"}], "file": "CoreFeatures/Database/CachedCollection/src/test/java/info/smart_tools/smartactors/database/cached_collection/task/GetItemFromCachedCollectionTaskTest.java"}, "test_case": {"identifier": "MustCorrectPrepareQueryForSelecting", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n    @Ignore\n    public void MustCorrectPrepareQueryForSelecting() throws Exception {\n\n        IObject query = spy(new DSObject(\"{\" +\n            \"\\\"keyName\\\": \\\"name\\\",\" +\n            \" \\\"key\\\": \\\"keyValue\\\",\" +\n            \" \\\"collectionName\\\": \\\"collection\\\"\" +\n            \"}\"\n        ));\n\n        testTask.prepare(query);\n\n        FieldName keyNameFN = new FieldName(\"keyName\");\n        FieldName keyValueFN = new FieldName(\"key\");\n        FieldName collectionNameFN = new FieldName(\"collectionName\");\n\n        verify(query).getValue(eq(keyNameFN));\n        verify(query).getValue(eq(keyValueFN));\n        verify(query).getValue(eq(collectionNameFN));\n    }", "signature": "void MustCorrectPrepareQueryForSelecting()", "full_signature": "@Test @Ignore public void MustCorrectPrepareQueryForSelecting()", "class_method_signature": "GetItemFromCachedCollectionTaskTest.MustCorrectPrepareQueryForSelecting()", "testcase": true, "constructor": false, "invocations": ["spy", "prepare", "getValue", "verify", "eq", "getValue", "verify", "eq", "getValue", "verify", "eq"]}, "focal_class": {"identifier": "GetItemFromCachedCollectionTask", "superclass": "", "interfaces": "implements IDatabaseTask", "fields": [{"original_string": "private IDatabaseTask getItemTask;", "modifier": "private", "type": "IDatabaseTask", "declarator": "getItemTask", "var_name": "getItemTask"}, {"original_string": "private IStorageConnection connection;", "modifier": "private", "type": "IStorageConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private IField collectionNameField;", "modifier": "private", "type": "IField", "declarator": "collectionNameField", "var_name": "collectionNameField"}, {"original_string": "private IField callbackField;", "modifier": "private", "type": "IField", "declarator": "callbackField", "var_name": "callbackField"}, {"original_string": "private IField keyNameField;", "modifier": "private", "type": "IField", "declarator": "keyNameField", "var_name": "keyNameField"}, {"original_string": "private IField keyValueField;", "modifier": "private", "type": "IField", "declarator": "keyValueField", "var_name": "keyValueField"}, {"original_string": "private IField keyField;", "modifier": "private", "type": "IField", "declarator": "keyField", "var_name": "keyField"}, {"original_string": "private IField isActiveField;", "modifier": "private", "type": "IField", "declarator": "isActiveField", "var_name": "isActiveField"}, {"original_string": "private IField equalsField;", "modifier": "private", "type": "IField", "declarator": "equalsField", "var_name": "equalsField"}, {"original_string": "private IField filterField;", "modifier": "private", "type": "IField", "declarator": "filterField", "var_name": "filterField"}, {"original_string": "private IField dateToField;", "modifier": "private", "type": "IField", "declarator": "dateToField", "var_name": "dateToField"}, {"original_string": "private IField startDateTimeField;", "modifier": "private", "type": "IField", "declarator": "startDateTimeField", "var_name": "startDateTimeField"}, {"original_string": "private DateTimeFormatter formatter;", "modifier": "private", "type": "DateTimeFormatter", "declarator": "formatter", "var_name": "formatter"}], "methods": [{"identifier": "GetItemFromCachedCollectionTask", "parameters": "(final IStorageConnection connection)", "modifiers": "public", "return": "", "signature": " GetItemFromCachedCollectionTask(final IStorageConnection connection)", "full_signature": "public  GetItemFromCachedCollectionTask(final IStorageConnection connection)", "class_method_signature": "GetItemFromCachedCollectionTask.GetItemFromCachedCollectionTask(final IStorageConnection connection)", "testcase": false, "constructor": true}, {"identifier": "prepare", "parameters": "(final IObject query)", "modifiers": "@Override public", "return": "void", "signature": "void prepare(final IObject query)", "full_signature": "@Override public void prepare(final IObject query)", "class_method_signature": "GetItemFromCachedCollectionTask.prepare(final IObject query)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "GetItemFromCachedCollectionTask.execute()", "testcase": false, "constructor": false}], "file": "CoreFeatures/Database/CachedCollection/src/main/java/info/smart_tools/smartactors/database/cached_collection/task/GetItemFromCachedCollectionTask.java"}, "focal_method": {"identifier": "prepare", "parameters": "(final IObject query)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void prepare(final IObject query) throws TaskPrepareException {\n        try {\n            IObject queryForNestedTask  = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"));\n            IObject filterObject = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"));\n\n            keyField = IOC.resolve(Keys.getOrAdd(IField.class.getCanonicalName()), (String) keyNameField.in(query));\n            String keyValue = keyValueField.in(query);\n\n            IObject eqKeyObject = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"));\n            equalsField.out(eqKeyObject, keyValue);\n            keyField.out(filterObject, eqKeyObject);\n\n            IObject isActiveObject = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"));\n            equalsField.out(isActiveObject, true);\n            isActiveField.out(filterObject, isActiveObject);\n\n            IObject dateObject = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"));\n            dateToField.out(dateObject, LocalDateTime.now().format(formatter));\n            startDateTimeField.out(filterObject, dateObject);\n\n            filterField.out(queryForNestedTask, filterObject);\n\n            getItemTask = IOC.resolve(\n                Keys.getOrAdd(\"db.collection.search\"),\n                connection,\n                collectionNameField.in(query),\n                queryForNestedTask,\n                callbackField.in(query)\n            );\n\n        } catch (ResolutionException e) {\n            throw new TaskPrepareException(\"Can't create searchQuery from input query\", e);\n        } catch (InvalidArgumentException | ChangeValueException | ReadValueException e) {\n            throw new TaskPrepareException(\"Can't change value in one of IObjects\", e);\n        }\n    }", "signature": "void prepare(final IObject query)", "full_signature": "@Override public void prepare(final IObject query)", "class_method_signature": "GetItemFromCachedCollectionTask.prepare(final IObject query)", "testcase": false, "constructor": false, "invocations": ["resolve", "getOrAdd", "resolve", "getOrAdd", "resolve", "getOrAdd", "getCanonicalName", "in", "in", "resolve", "getOrAdd", "out", "out", "resolve", "getOrAdd", "out", "out", "resolve", "getOrAdd", "out", "format", "now", "out", "out", "resolve", "getOrAdd", "in", "in"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}