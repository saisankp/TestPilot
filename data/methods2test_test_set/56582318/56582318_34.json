{"test_class": {"identifier": "DistancesTest", "superclass": "", "interfaces": "", "fields": [], "file": "geoxygene-spatial/src/test/java/fr/ign/cogit/geoxygene/contrib/geometrie/DistancesTest.java"}, "test_case": {"identifier": "testEcartSurface", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEcartSurface() {\n    ILineString l1 = new GM_LineString(new DirectPosition(0,0), new DirectPosition(10,0));\n    ILineString l2 = new GM_LineString(new DirectPosition(0,10), new DirectPosition(10,10), new DirectPosition(10,30));\n    double ecart = Distances.ecartSurface(l1, l2);\n    Assert.assertEquals(100, ecart, 0.001);\n    ILineString l3 = new GM_LineString(new DirectPosition(0,0), new DirectPosition(0,10));\n    ecart = Distances.ecartSurface(l1, l3);\n    Assert.assertEquals(50, ecart, 0.001);\n    ILineString l4 = new GM_LineString(new DirectPosition(0,0), new DirectPosition(0,10), new DirectPosition(10,10), new DirectPosition(10,0));\n    ILineString l5 = new GM_LineString(new DirectPosition(0,0), new DirectPosition(10,0));\n    ecart = Distances.ecartSurface(l5, l4);\n    Assert.assertEquals(25, ecart, 0.001);\n  }", "signature": "void testEcartSurface()", "full_signature": "@Test public void testEcartSurface()", "class_method_signature": "DistancesTest.testEcartSurface()", "testcase": true, "constructor": false, "invocations": ["ecartSurface", "assertEquals", "ecartSurface", "assertEquals", "ecartSurface", "assertEquals"]}, "focal_class": {"identifier": "Distances", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static Logger logger = Logger.getLogger(Distances.class.getName());", "modifier": "public static", "type": "Logger", "declarator": "logger = Logger.getLogger(Distances.class.getName())", "var_name": "logger"}], "methods": [{"identifier": "distance", "parameters": "(IDirectPosition dp1, IDirectPosition dp2)", "modifiers": "@Deprecated /** Distance euclidienne entre 2 points (en 2D ou 3D si les points ont un Z). * @Deprecated La m\u00e9thode .distance de DirectPosition fait la m\u00eame chose * */ public static", "return": "double", "signature": "double distance(IDirectPosition dp1, IDirectPosition dp2)", "full_signature": "@Deprecated /** Distance euclidienne entre 2 points (en 2D ou 3D si les points ont un Z). * @Deprecated La m\u00e9thode .distance de DirectPosition fait la m\u00eame chose * */ public static double distance(IDirectPosition dp1, IDirectPosition dp2)", "class_method_signature": "Distances.distance(IDirectPosition dp1, IDirectPosition dp2)", "testcase": false, "constructor": false}, {"identifier": "distance2D", "parameters": "(IDirectPosition dp1, IDirectPosition dp2)", "modifiers": "@Deprecated public static", "return": "double", "signature": "double distance2D(IDirectPosition dp1, IDirectPosition dp2)", "full_signature": "@Deprecated public static double distance2D(IDirectPosition dp1, IDirectPosition dp2)", "class_method_signature": "Distances.distance2D(IDirectPosition dp1, IDirectPosition dp2)", "testcase": false, "constructor": false}, {"identifier": "proche", "parameters": "(IDirectPosition dp1, IDirectPosition dp2,\n      double distance)", "modifiers": "public static", "return": "boolean", "signature": "boolean proche(IDirectPosition dp1, IDirectPosition dp2,\n      double distance)", "full_signature": "public static boolean proche(IDirectPosition dp1, IDirectPosition dp2,\n      double distance)", "class_method_signature": "Distances.proche(IDirectPosition dp1, IDirectPosition dp2,\n      double distance)", "testcase": false, "constructor": false}, {"identifier": "distancePointSegment", "parameters": "(IDirectPosition M,\n      IDirectPosition A, IDirectPosition B)", "modifiers": "public static", "return": "double", "signature": "double distancePointSegment(IDirectPosition M,\n      IDirectPosition A, IDirectPosition B)", "full_signature": "public static double distancePointSegment(IDirectPosition M,\n      IDirectPosition A, IDirectPosition B)", "class_method_signature": "Distances.distancePointSegment(IDirectPosition M,\n      IDirectPosition A, IDirectPosition B)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(IDirectPosition point, ILineString line)", "modifiers": "public static", "return": "double", "signature": "double distance(IDirectPosition point, ILineString line)", "full_signature": "public static double distance(IDirectPosition point, ILineString line)", "class_method_signature": "Distances.distance(IDirectPosition point, ILineString line)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(IDirectPosition point, IRing ring)", "modifiers": "public static", "return": "double", "signature": "double distance(IDirectPosition point, IRing ring)", "full_signature": "public static double distance(IDirectPosition point, IRing ring)", "class_method_signature": "Distances.distance(IDirectPosition point, IRing ring)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(IDirectPosition point,\n      IOrientableSurface surface)", "modifiers": "public static", "return": "double", "signature": "double distance(IDirectPosition point,\n      IOrientableSurface surface)", "full_signature": "public static double distance(IDirectPosition point,\n      IOrientableSurface surface)", "class_method_signature": "Distances.distance(IDirectPosition point,\n      IOrientableSurface surface)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(IDirectPosition point,\n      IDirectPositionList pointList)", "modifiers": "public static", "return": "double", "signature": "double distance(IDirectPosition point,\n      IDirectPositionList pointList)", "full_signature": "public static double distance(IDirectPosition point,\n      IDirectPositionList pointList)", "class_method_signature": "Distances.distance(IDirectPosition point,\n      IDirectPositionList pointList)", "testcase": false, "constructor": false}, {"identifier": "premiereComposanteHausdorff", "parameters": "(ILineString l1,\n      ILineString l2)", "modifiers": "public static", "return": "double", "signature": "double premiereComposanteHausdorff(ILineString l1,\n      ILineString l2)", "full_signature": "public static double premiereComposanteHausdorff(ILineString l1,\n      ILineString l2)", "class_method_signature": "Distances.premiereComposanteHausdorff(ILineString l1,\n      ILineString l2)", "testcase": false, "constructor": false}, {"identifier": "hausdorff", "parameters": "(ILineString L1, ILineString L2)", "modifiers": "public static", "return": "double", "signature": "double hausdorff(ILineString L1, ILineString L2)", "full_signature": "public static double hausdorff(ILineString L1, ILineString L2)", "class_method_signature": "Distances.hausdorff(ILineString L1, ILineString L2)", "testcase": false, "constructor": false}, {"identifier": "hausdorff", "parameters": "(ILineString l, IPoint p)", "modifiers": "public static", "return": "double", "signature": "double hausdorff(ILineString l, IPoint p)", "full_signature": "public static double hausdorff(ILineString l, IPoint p)", "class_method_signature": "Distances.hausdorff(ILineString l, IPoint p)", "testcase": false, "constructor": false}, {"identifier": "distanceMoyenne", "parameters": "(ILineString L1, ILineString L2)", "modifiers": "public static", "return": "double", "signature": "double distanceMoyenne(ILineString L1, ILineString L2)", "full_signature": "public static double distanceMoyenne(ILineString L1, ILineString L2)", "class_method_signature": "Distances.distanceMoyenne(ILineString L1, ILineString L2)", "testcase": false, "constructor": false}, {"identifier": "lineMedianDistance", "parameters": "(ILineString l1, ILineString l2)", "modifiers": "public static", "return": "double", "signature": "double lineMedianDistance(ILineString l1, ILineString l2)", "full_signature": "public static double lineMedianDistance(ILineString l1, ILineString l2)", "class_method_signature": "Distances.lineMedianDistance(ILineString l1, ILineString l2)", "testcase": false, "constructor": false}, {"identifier": "lineMedianDistance2", "parameters": "(ILineString l1, ILineString l2)", "modifiers": "public static", "return": "double", "signature": "double lineMedianDistance2(ILineString l1, ILineString l2)", "full_signature": "public static double lineMedianDistance2(ILineString l1, ILineString l2)", "class_method_signature": "Distances.lineMedianDistance2(ILineString l1, ILineString l2)", "testcase": false, "constructor": false}, {"identifier": "ecartSurface", "parameters": "(ILineString l1, ILineString l2)", "modifiers": "public static", "return": "double", "signature": "double ecartSurface(ILineString l1, ILineString l2)", "full_signature": "public static double ecartSurface(ILineString l1, ILineString l2)", "class_method_signature": "Distances.ecartSurface(ILineString l1, ILineString l2)", "testcase": false, "constructor": false}, {"identifier": "ecartSurface", "parameters": "(ILineString l1, ILineString l2,\n      double threshold)", "modifiers": "public static", "return": "double", "signature": "double ecartSurface(ILineString l1, ILineString l2,\n      double threshold)", "full_signature": "public static double ecartSurface(ILineString l1, ILineString l2,\n      double threshold)", "class_method_signature": "Distances.ecartSurface(ILineString l1, ILineString l2,\n      double threshold)", "testcase": false, "constructor": false}, {"identifier": "toMultiSurface", "parameters": "(IGeometry geom)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "IMultiSurface<IOrientableSurface>", "signature": "IMultiSurface<IOrientableSurface> toMultiSurface(IGeometry geom)", "full_signature": "@SuppressWarnings(\"unchecked\") private static IMultiSurface<IOrientableSurface> toMultiSurface(IGeometry geom)", "class_method_signature": "Distances.toMultiSurface(IGeometry geom)", "testcase": false, "constructor": false}, {"identifier": "distanceSurfacique", "parameters": "(IGeometry geom, IGeometry geom2)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "double", "signature": "double distanceSurfacique(IGeometry geom, IGeometry geom2)", "full_signature": "@SuppressWarnings(\"unchecked\") public static double distanceSurfacique(IGeometry geom, IGeometry geom2)", "class_method_signature": "Distances.distanceSurfacique(IGeometry geom, IGeometry geom2)", "testcase": false, "constructor": false}, {"identifier": "distanceSurfacique", "parameters": "(IPolygon A, IPolygon B)", "modifiers": "public static", "return": "double", "signature": "double distanceSurfacique(IPolygon A, IPolygon B)", "full_signature": "public static double distanceSurfacique(IPolygon A, IPolygon B)", "class_method_signature": "Distances.distanceSurfacique(IPolygon A, IPolygon B)", "testcase": false, "constructor": false}, {"identifier": "distanceSurfacique", "parameters": "(IMultiSurface<IOrientableSurface> A,\n      IMultiSurface<IOrientableSurface> B)", "modifiers": "public static", "return": "double", "signature": "double distanceSurfacique(IMultiSurface<IOrientableSurface> A,\n      IMultiSurface<IOrientableSurface> B)", "full_signature": "public static double distanceSurfacique(IMultiSurface<IOrientableSurface> A,\n      IMultiSurface<IOrientableSurface> B)", "class_method_signature": "Distances.distanceSurfacique(IMultiSurface<IOrientableSurface> A,\n      IMultiSurface<IOrientableSurface> B)", "testcase": false, "constructor": false}, {"identifier": "distanceSurfaciqueRobuste", "parameters": "(GM_Polygon A, GM_Polygon B,\n      double min, double max)", "modifiers": "public static", "return": "double", "signature": "double distanceSurfaciqueRobuste(GM_Polygon A, GM_Polygon B,\n      double min, double max)", "full_signature": "public static double distanceSurfaciqueRobuste(GM_Polygon A, GM_Polygon B,\n      double min, double max)", "class_method_signature": "Distances.distanceSurfaciqueRobuste(GM_Polygon A, GM_Polygon B,\n      double min, double max)", "testcase": false, "constructor": false}, {"identifier": "distanceSurfaciqueRobuste", "parameters": "(IPolygon A, IPolygon B,\n      double min, double max)", "modifiers": "public static", "return": "double", "signature": "double distanceSurfaciqueRobuste(IPolygon A, IPolygon B,\n      double min, double max)", "full_signature": "public static double distanceSurfaciqueRobuste(IPolygon A, IPolygon B,\n      double min, double max)", "class_method_signature": "Distances.distanceSurfaciqueRobuste(IPolygon A, IPolygon B,\n      double min, double max)", "testcase": false, "constructor": false}, {"identifier": "distanceSurfaciqueRobuste", "parameters": "(\n      IMultiSurface<IOrientableSurface> A, IMultiSurface<IOrientableSurface> B)", "modifiers": "public static", "return": "double", "signature": "double distanceSurfaciqueRobuste(\n      IMultiSurface<IOrientableSurface> A, IMultiSurface<IOrientableSurface> B)", "full_signature": "public static double distanceSurfaciqueRobuste(\n      IMultiSurface<IOrientableSurface> A, IMultiSurface<IOrientableSurface> B)", "class_method_signature": "Distances.distanceSurfaciqueRobuste(\n      IMultiSurface<IOrientableSurface> A, IMultiSurface<IOrientableSurface> B)", "testcase": false, "constructor": false}, {"identifier": "surfaceIntersection", "parameters": "(IMultiSurface<IOrientableSurface> A,\n      IMultiSurface<IOrientableSurface> B)", "modifiers": "public static", "return": "double", "signature": "double surfaceIntersection(IMultiSurface<IOrientableSurface> A,\n      IMultiSurface<IOrientableSurface> B)", "full_signature": "public static double surfaceIntersection(IMultiSurface<IOrientableSurface> A,\n      IMultiSurface<IOrientableSurface> B)", "class_method_signature": "Distances.surfaceIntersection(IMultiSurface<IOrientableSurface> A,\n      IMultiSurface<IOrientableSurface> B)", "testcase": false, "constructor": false}, {"identifier": "surfaceUnion", "parameters": "(IMultiSurface<IOrientableSurface> A,\n      IMultiSurface<IOrientableSurface> B)", "modifiers": "public static", "return": "double", "signature": "double surfaceUnion(IMultiSurface<IOrientableSurface> A,\n      IMultiSurface<IOrientableSurface> B)", "full_signature": "public static double surfaceUnion(IMultiSurface<IOrientableSurface> A,\n      IMultiSurface<IOrientableSurface> B)", "class_method_signature": "Distances.surfaceUnion(IMultiSurface<IOrientableSurface> A,\n      IMultiSurface<IOrientableSurface> B)", "testcase": false, "constructor": false}, {"identifier": "exactitude", "parameters": "(IPolygon A, IPolygon B)", "modifiers": "public static", "return": "double", "signature": "double exactitude(IPolygon A, IPolygon B)", "full_signature": "public static double exactitude(IPolygon A, IPolygon B)", "class_method_signature": "Distances.exactitude(IPolygon A, IPolygon B)", "testcase": false, "constructor": false}, {"identifier": "completude", "parameters": "(IPolygon A, IPolygon B)", "modifiers": "public static", "return": "double", "signature": "double completude(IPolygon A, IPolygon B)", "full_signature": "public static double completude(IPolygon A, IPolygon B)", "class_method_signature": "Distances.completude(IPolygon A, IPolygon B)", "testcase": false, "constructor": false}, {"identifier": "exactitude", "parameters": "(IMultiSurface<IOrientableSurface> A,\n      IMultiSurface<IOrientableSurface> B)", "modifiers": "public static", "return": "double", "signature": "double exactitude(IMultiSurface<IOrientableSurface> A,\n      IMultiSurface<IOrientableSurface> B)", "full_signature": "public static double exactitude(IMultiSurface<IOrientableSurface> A,\n      IMultiSurface<IOrientableSurface> B)", "class_method_signature": "Distances.exactitude(IMultiSurface<IOrientableSurface> A,\n      IMultiSurface<IOrientableSurface> B)", "testcase": false, "constructor": false}, {"identifier": "completude", "parameters": "(IMultiSurface<IOrientableSurface> A,\n      IMultiSurface<IOrientableSurface> B)", "modifiers": "public static", "return": "double", "signature": "double completude(IMultiSurface<IOrientableSurface> A,\n      IMultiSurface<IOrientableSurface> B)", "full_signature": "public static double completude(IMultiSurface<IOrientableSurface> A,\n      IMultiSurface<IOrientableSurface> B)", "class_method_signature": "Distances.completude(IMultiSurface<IOrientableSurface> A,\n      IMultiSurface<IOrientableSurface> B)", "testcase": false, "constructor": false}, {"identifier": "associationSurfaces", "parameters": "(IGeometry A, IGeometry B,\n      double min, double coeff)", "modifiers": "public static", "return": "boolean", "signature": "boolean associationSurfaces(IGeometry A, IGeometry B,\n      double min, double coeff)", "full_signature": "public static boolean associationSurfaces(IGeometry A, IGeometry B,\n      double min, double coeff)", "class_method_signature": "Distances.associationSurfaces(IGeometry A, IGeometry B,\n      double min, double coeff)", "testcase": false, "constructor": false}, {"identifier": "associationSurfacesRobuste", "parameters": "(IGeometry A, IGeometry B,\n      double min, double coeff, double minDouglas, double maxDouglas)", "modifiers": "public static", "return": "boolean", "signature": "boolean associationSurfacesRobuste(IGeometry A, IGeometry B,\n      double min, double coeff, double minDouglas, double maxDouglas)", "full_signature": "public static boolean associationSurfacesRobuste(IGeometry A, IGeometry B,\n      double min, double coeff, double minDouglas, double maxDouglas)", "class_method_signature": "Distances.associationSurfacesRobuste(IGeometry A, IGeometry B,\n      double min, double coeff, double minDouglas, double maxDouglas)", "testcase": false, "constructor": false}], "file": "geoxygene-spatial/src/main/java/fr/ign/cogit/geoxygene/contrib/geometrie/Distances.java"}, "focal_method": {"identifier": "ecartSurface", "parameters": "(ILineString l1, ILineString l2)", "modifiers": "public static", "return": "double", "body": "public static double ecartSurface(ILineString l1, ILineString l2) {\n    return Distances.ecartSurface(l1, l2, 1.0);\n  }", "signature": "double ecartSurface(ILineString l1, ILineString l2)", "full_signature": "public static double ecartSurface(ILineString l1, ILineString l2)", "class_method_signature": "Distances.ecartSurface(ILineString l1, ILineString l2)", "testcase": false, "constructor": false, "invocations": ["ecartSurface"]}, "repository": {"repo_id": 56582318, "url": "https://github.com/IGNF/geoxygene", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 22, "size": 323511, "license": "licensed"}}