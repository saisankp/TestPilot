{"test_class": {"identifier": "CubeIdTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final CubeId EMPTY = CubeId.root();", "modifier": "public static final", "type": "CubeId", "declarator": "EMPTY = CubeId.root()", "var_name": "EMPTY"}, {"original_string": "public static final CubeId SECTOR_REGION = CubeId.root(\"sector\", \"region\");", "modifier": "public static final", "type": "CubeId", "declarator": "SECTOR_REGION = CubeId.root(\"sector\", \"region\")", "var_name": "SECTOR_REGION"}, {"original_string": "public static final CubeId INDUSTRY = SECTOR_REGION.child(\"industry\");", "modifier": "public static final", "type": "CubeId", "declarator": "INDUSTRY = SECTOR_REGION.child(\"industry\")", "var_name": "INDUSTRY"}, {"original_string": "public static final CubeId INDUSTRY_BE = INDUSTRY.child(\"be\");", "modifier": "public static final", "type": "CubeId", "declarator": "INDUSTRY_BE = INDUSTRY.child(\"be\")", "var_name": "INDUSTRY_BE"}], "file": "jtss/src/test/java/ec/tss/tsproviders/cube/CubeIdTest.java"}, "test_case": {"identifier": "testFactories", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"null\") public", "return": "void", "body": "@Test\n    @SuppressWarnings(\"null\")\n    public void testFactories() {\n        assertThatThrownBy(() -> CubeId.root((String[]) null)).isInstanceOf(NullPointerException.class);\n        assertThatThrownBy(() -> CubeId.root(\"hello\", (String) null)).isInstanceOf(IllegalArgumentException.class);\n        assertThatThrownBy(() -> CubeId.root((List<String>) null)).isInstanceOf(NullPointerException.class);\n        assertThatThrownBy(() -> CubeId.root(Arrays.asList(\"hello\", null))).isInstanceOf(IllegalArgumentException.class);\n    }", "signature": "void testFactories()", "full_signature": "@Test @SuppressWarnings(\"null\") public void testFactories()", "class_method_signature": "CubeIdTest.testFactories()", "testcase": true, "constructor": false, "invocations": ["isInstanceOf", "assertThatThrownBy", "root", "isInstanceOf", "assertThatThrownBy", "root", "isInstanceOf", "assertThatThrownBy", "root", "isInstanceOf", "assertThatThrownBy", "root", "asList"]}, "focal_class": {"identifier": "CubeId", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final CubeId VOID = new CubeId(Arrays2.EMPTY_STRING_ARRAY, Arrays2.EMPTY_STRING_ARRAY);", "modifier": "private static final", "type": "CubeId", "declarator": "VOID = new CubeId(Arrays2.EMPTY_STRING_ARRAY, Arrays2.EMPTY_STRING_ARRAY)", "var_name": "VOID"}, {"original_string": "private final String[] dimensionIds;", "modifier": "private final", "type": "String[]", "declarator": "dimensionIds", "var_name": "dimensionIds"}, {"original_string": "private final String[] dimensionsValues;", "modifier": "private final", "type": "String[]", "declarator": "dimensionsValues", "var_name": "dimensionsValues"}], "methods": [{"identifier": "root", "parameters": "(@NonNull String... dimensionIds)", "modifiers": "@NonNull public static", "return": "CubeId", "signature": "CubeId root(@NonNull String... dimensionIds)", "full_signature": "@NonNull public static CubeId root(@NonNull String... dimensionIds)", "class_method_signature": "CubeId.root(@NonNull String... dimensionIds)", "testcase": false, "constructor": false}, {"identifier": "root", "parameters": "(@NonNull List<String> dimensionIds)", "modifiers": "@NonNull public static", "return": "CubeId", "signature": "CubeId root(@NonNull List<String> dimensionIds)", "full_signature": "@NonNull public static CubeId root(@NonNull List<String> dimensionIds)", "class_method_signature": "CubeId.root(@NonNull List<String> dimensionIds)", "testcase": false, "constructor": false}, {"identifier": "CubeId", "parameters": "(@NonNull String[] dimensionIds, @NonNull String[] dimensionsValues)", "modifiers": "private", "return": "", "signature": " CubeId(@NonNull String[] dimensionIds, @NonNull String[] dimensionsValues)", "full_signature": "private  CubeId(@NonNull String[] dimensionIds, @NonNull String[] dimensionsValues)", "class_method_signature": "CubeId.CubeId(@NonNull String[] dimensionIds, @NonNull String[] dimensionsValues)", "testcase": false, "constructor": true}, {"identifier": "getLevel", "parameters": "()", "modifiers": "@NonNegative public", "return": "int", "signature": "int getLevel()", "full_signature": "@NonNegative public int getLevel()", "class_method_signature": "CubeId.getLevel()", "testcase": false, "constructor": false}, {"identifier": "getMaxLevel", "parameters": "()", "modifiers": "@NonNegative public", "return": "int", "signature": "int getMaxLevel()", "full_signature": "@NonNegative public int getMaxLevel()", "class_method_signature": "CubeId.getMaxLevel()", "testcase": false, "constructor": false}, {"identifier": "getDimensionValue", "parameters": "(@NonNegative int index)", "modifiers": "@NonNull public", "return": "String", "signature": "String getDimensionValue(@NonNegative int index)", "full_signature": "@NonNull public String getDimensionValue(@NonNegative int index)", "class_method_signature": "CubeId.getDimensionValue(@NonNegative int index)", "testcase": false, "constructor": false}, {"identifier": "getDimensionValueStream", "parameters": "()", "modifiers": "@NonNull public", "return": "Stream<String>", "signature": "Stream<String> getDimensionValueStream()", "full_signature": "@NonNull public Stream<String> getDimensionValueStream()", "class_method_signature": "CubeId.getDimensionValueStream()", "testcase": false, "constructor": false}, {"identifier": "getDimensionId", "parameters": "(@NonNegative int index)", "modifiers": "@NonNull public", "return": "String", "signature": "String getDimensionId(@NonNegative int index)", "full_signature": "@NonNull public String getDimensionId(@NonNegative int index)", "class_method_signature": "CubeId.getDimensionId(@NonNegative int index)", "testcase": false, "constructor": false}, {"identifier": "getDepth", "parameters": "()", "modifiers": "@NonNegative public", "return": "int", "signature": "int getDepth()", "full_signature": "@NonNegative public int getDepth()", "class_method_signature": "CubeId.getDepth()", "testcase": false, "constructor": false}, {"identifier": "isRoot", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isRoot()", "full_signature": "public boolean isRoot()", "class_method_signature": "CubeId.isRoot()", "testcase": false, "constructor": false}, {"identifier": "isSeries", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSeries()", "full_signature": "public boolean isSeries()", "class_method_signature": "CubeId.isSeries()", "testcase": false, "constructor": false}, {"identifier": "isVoid", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isVoid()", "full_signature": "public boolean isVoid()", "class_method_signature": "CubeId.isVoid()", "testcase": false, "constructor": false}, {"identifier": "child", "parameters": "(@NonNull String... dimensionValues)", "modifiers": "@NonNull public", "return": "CubeId", "signature": "CubeId child(@NonNull String... dimensionValues)", "full_signature": "@NonNull public CubeId child(@NonNull String... dimensionValues)", "class_method_signature": "CubeId.child(@NonNull String... dimensionValues)", "testcase": false, "constructor": false}, {"identifier": "isAncestorOf", "parameters": "(@NonNull CubeId input)", "modifiers": "public", "return": "boolean", "signature": "boolean isAncestorOf(@NonNull CubeId input)", "full_signature": "public boolean isAncestorOf(@NonNull CubeId input)", "class_method_signature": "CubeId.isAncestorOf(@NonNull CubeId input)", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "()", "modifiers": "@Nullable", "return": "CubeId", "signature": "CubeId getParent()", "full_signature": "@Nullable CubeId getParent()", "class_method_signature": "CubeId.getParent()", "testcase": false, "constructor": false}, {"identifier": "getAncestor", "parameters": "(int level)", "modifiers": "@Nullable", "return": "CubeId", "signature": "CubeId getAncestor(int level)", "full_signature": "@Nullable CubeId getAncestor(int level)", "class_method_signature": "CubeId.getAncestor(int level)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CubeId.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "CubeId.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "CubeId.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@NonNull CubeId that)", "modifiers": "private", "return": "boolean", "signature": "boolean equals(@NonNull CubeId that)", "full_signature": "private boolean equals(@NonNull CubeId that)", "class_method_signature": "CubeId.equals(@NonNull CubeId that)", "testcase": false, "constructor": false}, {"identifier": "equalsReversed", "parameters": "(@Nullable Object[] l, @Nullable Object[] r)", "modifiers": "private static", "return": "boolean", "signature": "boolean equalsReversed(@Nullable Object[] l, @Nullable Object[] r)", "full_signature": "private static boolean equalsReversed(@Nullable Object[] l, @Nullable Object[] r)", "class_method_signature": "CubeId.equalsReversed(@Nullable Object[] l, @Nullable Object[] r)", "testcase": false, "constructor": false}, {"identifier": "haveSameDimensions", "parameters": "(CubeId l, CubeId r)", "modifiers": "private", "return": "boolean", "signature": "boolean haveSameDimensions(CubeId l, CubeId r)", "full_signature": "private boolean haveSameDimensions(CubeId l, CubeId r)", "class_method_signature": "CubeId.haveSameDimensions(CubeId l, CubeId r)", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/tss/tsproviders/cube/CubeId.java"}, "focal_method": {"identifier": "root", "parameters": "(@NonNull String... dimensionIds)", "modifiers": "@NonNull public static", "return": "CubeId", "body": "@NonNull\n    public static CubeId root(@NonNull String... dimensionIds) throws IllegalArgumentException {\n        for (String o : dimensionIds) {\n            if (o == null) {\n                throw new IllegalArgumentException(\"Dimensions cannot be null\");\n            }\n        }\n        return dimensionIds.length == 0 ? VOID : new CubeId(dimensionIds.clone(), Arrays2.EMPTY_STRING_ARRAY);\n    }", "signature": "CubeId root(@NonNull String... dimensionIds)", "full_signature": "@NonNull public static CubeId root(@NonNull String... dimensionIds)", "class_method_signature": "CubeId.root(@NonNull String... dimensionIds)", "testcase": false, "constructor": false, "invocations": ["clone"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}