{"test_class": {"identifier": "FileChannelStorageTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String testDir = TestUtil.TEST_BASE_DIR + \"unit/file_channel_storage_test/\";", "modifier": "private static", "type": "String", "declarator": "testDir = TestUtil.TEST_BASE_DIR + \"unit/file_channel_storage_test/\"", "var_name": "testDir"}, {"original_string": "private IStorage fileChannelStorage = null;", "modifier": "private", "type": "IStorage", "declarator": "fileChannelStorage = null", "var_name": "fileChannelStorage"}], "file": "zava/src/test/java/com/ctriposs/bigcache/storage/FileChannelStorageTest.java"}, "test_case": {"identifier": "testFileChannelStorage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFileChannelStorage() throws IOException {\n\t\tfileChannelStorage = new FileChannelStorage(testDir, 1, 16 * 1024 * 1024);\n\t\t\n\t\t// test one item\n\t\tString testString = \"Test String\";\n\t\tfileChannelStorage.put(0, testString.getBytes());\n\t\tbyte[] dest = new byte[testString.getBytes().length];\n\t\tfileChannelStorage.get(0, dest);\n\t\t\n\t\tassertEquals(testString, new String(dest));\n\t\t\n\t\t// test limit items\n\t\tint limit = 1000;\n\t\tint[] positionArray = new int[limit];\n\t\tint[] lengthArray = new int[limit];\n\t\tint position = 0;\n\t\tfor(int i = 0; i < limit; i++) {\n\t\t\tbyte[] src = (testString + i).getBytes();\n\t\t\tpositionArray[i] = position;\n\t\t\tlengthArray[i] = src.length;\n\t\t\tfileChannelStorage.put(position, src);\n\t\t\tposition += src.length;\n\t\t}\n\t\t\n\t\tfor(int i = 0; i < limit; i++) {\n\t\t\tdest = new byte[lengthArray[i]];\n\t\t\tfileChannelStorage.get(positionArray[i], dest);\n\t\t\tassertEquals(testString + i, new String(dest));\n\t\t}\n\t}", "signature": "void testFileChannelStorage()", "full_signature": "@Test public void testFileChannelStorage()", "class_method_signature": "FileChannelStorageTest.testFileChannelStorage()", "testcase": true, "constructor": false, "invocations": ["put", "getBytes", "getBytes", "get", "assertEquals", "getBytes", "put", "get", "assertEquals"]}, "focal_class": {"identifier": "FileChannelStorage", "superclass": "", "interfaces": "implements IStorage", "fields": [{"original_string": "private FileChannel fileChannel;", "modifier": "private", "type": "FileChannel", "declarator": "fileChannel", "var_name": "fileChannel"}, {"original_string": "private RandomAccessFile raf;", "modifier": "private", "type": "RandomAccessFile", "declarator": "raf", "var_name": "raf"}], "methods": [{"identifier": "FileChannelStorage", "parameters": "(String dir, int index, int capacity)", "modifiers": "public", "return": "", "signature": " FileChannelStorage(String dir, int index, int capacity)", "full_signature": "public  FileChannelStorage(String dir, int index, int capacity)", "class_method_signature": "FileChannelStorage.FileChannelStorage(String dir, int index, int capacity)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(int position, byte[] dest)", "modifiers": "@Override public", "return": "void", "signature": "void get(int position, byte[] dest)", "full_signature": "@Override public void get(int position, byte[] dest)", "class_method_signature": "FileChannelStorage.get(int position, byte[] dest)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(int position, byte[] source)", "modifiers": "@Override public", "return": "void", "signature": "void put(int position, byte[] source)", "full_signature": "@Override public void put(int position, byte[] source)", "class_method_signature": "FileChannelStorage.put(int position, byte[] source)", "testcase": false, "constructor": false}, {"identifier": "free", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void free()", "full_signature": "@Override public void free()", "class_method_signature": "FileChannelStorage.free()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "FileChannelStorage.close()", "testcase": false, "constructor": false}], "file": "zava/src/main/java/com/ctriposs/bigcache/storage/FileChannelStorage.java"}, "focal_method": {"identifier": "FileChannelStorage", "parameters": "(String dir, int index, int capacity)", "modifiers": "public", "return": "", "body": "public FileChannelStorage(String dir, int index, int capacity) throws IOException {\n\t\tFile dirFile = new File(dir);\n\t\tif (!dirFile.exists()) { dirFile.mkdirs(); }\n\t\tString fullFileName = dir + index + \"-\" + System.currentTimeMillis() + DATA_FILE_SUFFIX;\n\t\traf = new RandomAccessFile(fullFileName, \"rw\");\n\t\traf.setLength(capacity);\n\t\tfileChannel = raf.getChannel();\n\t}", "signature": " FileChannelStorage(String dir, int index, int capacity)", "full_signature": "public  FileChannelStorage(String dir, int index, int capacity)", "class_method_signature": "FileChannelStorage.FileChannelStorage(String dir, int index, int capacity)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}