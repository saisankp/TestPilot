{"test_class": {"identifier": "DefaultPluginDescriptorTest", "superclass": "", "interfaces": "", "fields": [], "file": "pf4j/src/test/java/org/pf4j/DefaultPluginDescriptorTest.java"}, "test_case": {"identifier": "addDependency", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void addDependency() {\n        // Given a descriptor with empty dependencies\n        DefaultPluginDescriptor descriptor = new DefaultPluginDescriptor();\n        descriptor.setDependencies(\"\");\n        PluginDependency newDependency = new PluginDependency(\"test\");\n\n        // When I add a dependency\n        descriptor.addDependency(newDependency);\n\n        // Then the dependency is added\n        List<PluginDependency> expected = new ArrayList<>();\n        expected.add(newDependency);\n        assertEquals(expected, descriptor.getDependencies());\n    }", "signature": "void addDependency()", "full_signature": "@Test void addDependency()", "class_method_signature": "DefaultPluginDescriptorTest.addDependency()", "testcase": true, "constructor": false, "invocations": ["setDependencies", "addDependency", "add", "assertEquals", "getDependencies"]}, "focal_class": {"identifier": "DefaultPluginDescriptor", "superclass": "", "interfaces": "implements PluginDescriptor", "fields": [{"original_string": "private String pluginId;", "modifier": "private", "type": "String", "declarator": "pluginId", "var_name": "pluginId"}, {"original_string": "private String pluginDescription;", "modifier": "private", "type": "String", "declarator": "pluginDescription", "var_name": "pluginDescription"}, {"original_string": "private String pluginClass = Plugin.class.getName();", "modifier": "private", "type": "String", "declarator": "pluginClass = Plugin.class.getName()", "var_name": "pluginClass"}, {"original_string": "private String version;", "modifier": "private", "type": "String", "declarator": "version", "var_name": "version"}, {"original_string": "private String requires = \"*\";", "modifier": "private", "type": "String", "declarator": "requires = \"*\"", "var_name": "requires"}, {"original_string": "private String provider;", "modifier": "private", "type": "String", "declarator": "provider", "var_name": "provider"}, {"original_string": "private List<PluginDependency> dependencies;", "modifier": "private", "type": "List<PluginDependency>", "declarator": "dependencies", "var_name": "dependencies"}, {"original_string": "private String license;", "modifier": "private", "type": "String", "declarator": "license", "var_name": "license"}], "methods": [{"identifier": "DefaultPluginDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " DefaultPluginDescriptor()", "full_signature": "public  DefaultPluginDescriptor()", "class_method_signature": "DefaultPluginDescriptor.DefaultPluginDescriptor()", "testcase": false, "constructor": true}, {"identifier": "DefaultPluginDescriptor", "parameters": "(String pluginId, String pluginDescription, String pluginClass, String version, String requires, String provider, String license)", "modifiers": "public", "return": "", "signature": " DefaultPluginDescriptor(String pluginId, String pluginDescription, String pluginClass, String version, String requires, String provider, String license)", "full_signature": "public  DefaultPluginDescriptor(String pluginId, String pluginDescription, String pluginClass, String version, String requires, String provider, String license)", "class_method_signature": "DefaultPluginDescriptor.DefaultPluginDescriptor(String pluginId, String pluginDescription, String pluginClass, String version, String requires, String provider, String license)", "testcase": false, "constructor": true}, {"identifier": "addDependency", "parameters": "(PluginDependency dependency)", "modifiers": "public", "return": "void", "signature": "void addDependency(PluginDependency dependency)", "full_signature": "public void addDependency(PluginDependency dependency)", "class_method_signature": "DefaultPluginDescriptor.addDependency(PluginDependency dependency)", "testcase": false, "constructor": false}, {"identifier": "getPluginId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPluginId()", "full_signature": "@Override public String getPluginId()", "class_method_signature": "DefaultPluginDescriptor.getPluginId()", "testcase": false, "constructor": false}, {"identifier": "getPluginDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPluginDescription()", "full_signature": "@Override public String getPluginDescription()", "class_method_signature": "DefaultPluginDescriptor.getPluginDescription()", "testcase": false, "constructor": false}, {"identifier": "getPluginClass", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getPluginClass()", "full_signature": "@Override public String getPluginClass()", "class_method_signature": "DefaultPluginDescriptor.getPluginClass()", "testcase": false, "constructor": false}, {"identifier": "getVersion", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getVersion()", "full_signature": "@Override public String getVersion()", "class_method_signature": "DefaultPluginDescriptor.getVersion()", "testcase": false, "constructor": false}, {"identifier": "getRequires", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getRequires()", "full_signature": "@Override public String getRequires()", "class_method_signature": "DefaultPluginDescriptor.getRequires()", "testcase": false, "constructor": false}, {"identifier": "getProvider", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getProvider()", "full_signature": "@Override public String getProvider()", "class_method_signature": "DefaultPluginDescriptor.getProvider()", "testcase": false, "constructor": false}, {"identifier": "getLicense", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getLicense()", "full_signature": "@Override public String getLicense()", "class_method_signature": "DefaultPluginDescriptor.getLicense()", "testcase": false, "constructor": false}, {"identifier": "getDependencies", "parameters": "()", "modifiers": "@Override public", "return": "List<PluginDependency>", "signature": "List<PluginDependency> getDependencies()", "full_signature": "@Override public List<PluginDependency> getDependencies()", "class_method_signature": "DefaultPluginDescriptor.getDependencies()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DefaultPluginDescriptor.toString()", "testcase": false, "constructor": false}, {"identifier": "setPluginId", "parameters": "(String pluginId)", "modifiers": "protected", "return": "DefaultPluginDescriptor", "signature": "DefaultPluginDescriptor setPluginId(String pluginId)", "full_signature": "protected DefaultPluginDescriptor setPluginId(String pluginId)", "class_method_signature": "DefaultPluginDescriptor.setPluginId(String pluginId)", "testcase": false, "constructor": false}, {"identifier": "setPluginDescription", "parameters": "(String pluginDescription)", "modifiers": "protected", "return": "PluginDescriptor", "signature": "PluginDescriptor setPluginDescription(String pluginDescription)", "full_signature": "protected PluginDescriptor setPluginDescription(String pluginDescription)", "class_method_signature": "DefaultPluginDescriptor.setPluginDescription(String pluginDescription)", "testcase": false, "constructor": false}, {"identifier": "setPluginClass", "parameters": "(String pluginClassName)", "modifiers": "protected", "return": "PluginDescriptor", "signature": "PluginDescriptor setPluginClass(String pluginClassName)", "full_signature": "protected PluginDescriptor setPluginClass(String pluginClassName)", "class_method_signature": "DefaultPluginDescriptor.setPluginClass(String pluginClassName)", "testcase": false, "constructor": false}, {"identifier": "setPluginVersion", "parameters": "(String version)", "modifiers": "protected", "return": "DefaultPluginDescriptor", "signature": "DefaultPluginDescriptor setPluginVersion(String version)", "full_signature": "protected DefaultPluginDescriptor setPluginVersion(String version)", "class_method_signature": "DefaultPluginDescriptor.setPluginVersion(String version)", "testcase": false, "constructor": false}, {"identifier": "setProvider", "parameters": "(String provider)", "modifiers": "protected", "return": "PluginDescriptor", "signature": "PluginDescriptor setProvider(String provider)", "full_signature": "protected PluginDescriptor setProvider(String provider)", "class_method_signature": "DefaultPluginDescriptor.setProvider(String provider)", "testcase": false, "constructor": false}, {"identifier": "setRequires", "parameters": "(String requires)", "modifiers": "protected", "return": "PluginDescriptor", "signature": "PluginDescriptor setRequires(String requires)", "full_signature": "protected PluginDescriptor setRequires(String requires)", "class_method_signature": "DefaultPluginDescriptor.setRequires(String requires)", "testcase": false, "constructor": false}, {"identifier": "setDependencies", "parameters": "(String dependencies)", "modifiers": "protected", "return": "PluginDescriptor", "signature": "PluginDescriptor setDependencies(String dependencies)", "full_signature": "protected PluginDescriptor setDependencies(String dependencies)", "class_method_signature": "DefaultPluginDescriptor.setDependencies(String dependencies)", "testcase": false, "constructor": false}, {"identifier": "setLicense", "parameters": "(String license)", "modifiers": "public", "return": "PluginDescriptor", "signature": "PluginDescriptor setLicense(String license)", "full_signature": "public PluginDescriptor setLicense(String license)", "class_method_signature": "DefaultPluginDescriptor.setLicense(String license)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "DefaultPluginDescriptor.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DefaultPluginDescriptor.hashCode()", "testcase": false, "constructor": false}], "file": "pf4j/src/main/java/org/pf4j/DefaultPluginDescriptor.java"}, "focal_method": {"identifier": "addDependency", "parameters": "(PluginDependency dependency)", "modifiers": "public", "return": "void", "body": "public void addDependency(PluginDependency dependency) {\n        this.dependencies.add(dependency);\n    }", "signature": "void addDependency(PluginDependency dependency)", "full_signature": "public void addDependency(PluginDependency dependency)", "class_method_signature": "DefaultPluginDescriptor.addDependency(PluginDependency dependency)", "testcase": false, "constructor": false, "invocations": ["add"]}, "repository": {"repo_id": 6157458, "url": "https://github.com/pf4j/pf4j", "stars": 1034, "created": "10/10/2012 1:10:32 PM +00:00", "updates": "2020-01-20T02:39:14+00:00", "fork": "False", "license": "licensed"}}