{"test_class": {"identifier": "CollectionTypeDefinitionBuilderTest", "superclass": "extends AbstractAnnotationProcessingTest", "interfaces": "", "fields": [{"original_string": "private CollectionTypeDefinitionBuilder builder;", "modifier": "private", "type": "CollectionTypeDefinitionBuilder", "declarator": "builder", "var_name": "builder"}, {"original_string": "private VariableElement stringsField;", "modifier": "private", "type": "VariableElement", "declarator": "stringsField", "var_name": "stringsField"}, {"original_string": "private VariableElement colorsField;", "modifier": "private", "type": "VariableElement", "declarator": "colorsField", "var_name": "colorsField"}, {"original_string": "private VariableElement primitiveTypeModelsField;", "modifier": "private", "type": "VariableElement", "declarator": "primitiveTypeModelsField", "var_name": "primitiveTypeModelsField"}, {"original_string": "private VariableElement modelsField;", "modifier": "private", "type": "VariableElement", "declarator": "modelsField", "var_name": "modelsField"}, {"original_string": "private VariableElement modelArraysField;", "modifier": "private", "type": "VariableElement", "declarator": "modelArraysField", "var_name": "modelArraysField"}], "file": "dubbo-metadata/dubbo-metadata-processor/src/test/java/org/apache/dubbo/metadata/annotation/processing/builder/CollectionTypeDefinitionBuilderTest.java"}, "test_case": {"identifier": "testBuild", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBuild() {\n\n        buildAndAssertTypeDefinition(processingEnv, stringsField, \"java.util.Collection<java.lang.String>\", \"java.lang.String\", builder);\n\n        buildAndAssertTypeDefinition(processingEnv, colorsField, \"java.util.List<org.apache.dubbo.metadata.annotation.processing.model.Color>\",\n                \"org.apache.dubbo.metadata.annotation.processing.model.Color\", builder);\n\n        buildAndAssertTypeDefinition(processingEnv, primitiveTypeModelsField,\n                \"java.util.Queue<org.apache.dubbo.metadata.annotation.processing.model.PrimitiveTypeModel>\",\n                \"org.apache.dubbo.metadata.annotation.processing.model.PrimitiveTypeModel\", builder);\n\n        buildAndAssertTypeDefinition(processingEnv, modelsField,\n                \"java.util.Deque<org.apache.dubbo.metadata.annotation.processing.model.Model>\",\n                \"org.apache.dubbo.metadata.annotation.processing.model.Model\", builder);\n\n        buildAndAssertTypeDefinition(processingEnv, modelArraysField,\n                \"java.util.Set<org.apache.dubbo.metadata.annotation.processing.model.Model[]>\",\n                \"org.apache.dubbo.metadata.annotation.processing.model.Model[]\", builder);\n\n\n    }", "signature": "void testBuild()", "full_signature": "@Test public void testBuild()", "class_method_signature": "CollectionTypeDefinitionBuilderTest.testBuild()", "testcase": true, "constructor": false, "invocations": ["buildAndAssertTypeDefinition", "buildAndAssertTypeDefinition", "buildAndAssertTypeDefinition", "buildAndAssertTypeDefinition", "buildAndAssertTypeDefinition"]}, "focal_class": {"identifier": "CollectionTypeDefinitionBuilder", "superclass": "", "interfaces": "implements DeclaredTypeDefinitionBuilder", "fields": [], "methods": [{"identifier": "accept", "parameters": "(ProcessingEnvironment processingEnv, DeclaredType type)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accept(ProcessingEnvironment processingEnv, DeclaredType type)", "full_signature": "@Override public boolean accept(ProcessingEnvironment processingEnv, DeclaredType type)", "class_method_signature": "CollectionTypeDefinitionBuilder.accept(ProcessingEnvironment processingEnv, DeclaredType type)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(ProcessingEnvironment processingEnv, DeclaredType type, TypeDefinition typeDefinition)", "modifiers": "@Override public", "return": "void", "signature": "void build(ProcessingEnvironment processingEnv, DeclaredType type, TypeDefinition typeDefinition)", "full_signature": "@Override public void build(ProcessingEnvironment processingEnv, DeclaredType type, TypeDefinition typeDefinition)", "class_method_signature": "CollectionTypeDefinitionBuilder.build(ProcessingEnvironment processingEnv, DeclaredType type, TypeDefinition typeDefinition)", "testcase": false, "constructor": false}, {"identifier": "getPriority", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getPriority()", "full_signature": "@Override public int getPriority()", "class_method_signature": "CollectionTypeDefinitionBuilder.getPriority()", "testcase": false, "constructor": false}], "file": "dubbo-metadata/dubbo-metadata-processor/src/main/java/org/apache/dubbo/metadata/annotation/processing/builder/CollectionTypeDefinitionBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "(ProcessingEnvironment processingEnv, DeclaredType type, TypeDefinition typeDefinition)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void build(ProcessingEnvironment processingEnv, DeclaredType type, TypeDefinition typeDefinition) {\n        // Generic Type arguments\n        type.getTypeArguments()\n                .stream()\n                .map(typeArgument -> TypeDefinitionBuilder.build(processingEnv, typeArgument)) // build the TypeDefinition from typeArgument\n                .filter(Objects::nonNull)\n                .forEach(typeDefinition.getItems()::add);                              // Add into the declared TypeDefinition\n    }", "signature": "void build(ProcessingEnvironment processingEnv, DeclaredType type, TypeDefinition typeDefinition)", "full_signature": "@Override public void build(ProcessingEnvironment processingEnv, DeclaredType type, TypeDefinition typeDefinition)", "class_method_signature": "CollectionTypeDefinitionBuilder.build(ProcessingEnvironment processingEnv, DeclaredType type, TypeDefinition typeDefinition)", "testcase": false, "constructor": false, "invocations": ["forEach", "filter", "map", "stream", "getTypeArguments", "build", "getItems"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}