{"test_class": {"identifier": "Base64UtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "agent/core/src/test/java/org/jolokia/util/Base64UtilTest.java"}, "test_case": {"identifier": "decodeEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void decodeEmpty() {\n        assertEquals(Base64Util.decode(\"\").length, 0);\n    }", "signature": "void decodeEmpty()", "full_signature": "@Test public void decodeEmpty()", "class_method_signature": "Base64UtilTest.decodeEmpty()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "decode"]}, "focal_class": {"identifier": "Base64Util", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static byte[] ALPHABET = {\n        (byte)'A', (byte)'B', (byte)'C', (byte)'D', (byte)'E', (byte)'F', (byte)'G',\n        (byte)'H', (byte)'I', (byte)'J', (byte)'K', (byte)'L', (byte)'M', (byte)'N',\n        (byte)'O', (byte)'P', (byte)'Q', (byte)'R', (byte)'S', (byte)'T', (byte)'U',\n        (byte)'V', (byte)'W', (byte)'X', (byte)'Y', (byte)'Z',\n        (byte)'a', (byte)'b', (byte)'c', (byte)'d', (byte)'e', (byte)'f', (byte)'g',\n        (byte)'h', (byte)'i', (byte)'j', (byte)'k', (byte)'l', (byte)'m', (byte)'n',\n        (byte)'o', (byte)'p', (byte)'q', (byte)'r', (byte)'s', (byte)'t', (byte)'u',\n        (byte)'v', (byte)'w', (byte)'x', (byte)'y', (byte)'z',\n        (byte)'0', (byte)'1', (byte)'2', (byte)'3', (byte)'4', (byte)'5',\n        (byte)'6', (byte)'7', (byte)'8', (byte)'9', (byte)'+', (byte)'/'\n    };", "modifier": "private final static", "type": "byte[]", "declarator": "ALPHABET = {\n        (byte)'A', (byte)'B', (byte)'C', (byte)'D', (byte)'E', (byte)'F', (byte)'G',\n        (byte)'H', (byte)'I', (byte)'J', (byte)'K', (byte)'L', (byte)'M', (byte)'N',\n        (byte)'O', (byte)'P', (byte)'Q', (byte)'R', (byte)'S', (byte)'T', (byte)'U',\n        (byte)'V', (byte)'W', (byte)'X', (byte)'Y', (byte)'Z',\n        (byte)'a', (byte)'b', (byte)'c', (byte)'d', (byte)'e', (byte)'f', (byte)'g',\n        (byte)'h', (byte)'i', (byte)'j', (byte)'k', (byte)'l', (byte)'m', (byte)'n',\n        (byte)'o', (byte)'p', (byte)'q', (byte)'r', (byte)'s', (byte)'t', (byte)'u',\n        (byte)'v', (byte)'w', (byte)'x', (byte)'y', (byte)'z',\n        (byte)'0', (byte)'1', (byte)'2', (byte)'3', (byte)'4', (byte)'5',\n        (byte)'6', (byte)'7', (byte)'8', (byte)'9', (byte)'+', (byte)'/'\n    }", "var_name": "ALPHABET"}, {"original_string": "private static final byte[] DECODABET = {\n            -9,-9,-9,-9,-9,-9,-9,-9,-9,                 // Decimal  0 -  8\n            -5,-5,                                      // Whitespace: Tab and Linefeed\n            -9,-9,                                      // Decimal 11 - 12\n            -5,                                         // Whitespace: Carriage Return\n            -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 14 - 26\n            -9,-9,-9,-9,-9,                             // Decimal 27 - 31\n            -5,                                         // Whitespace: Space\n            -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,              // Decimal 33 - 42\n            62,                                         // Plus sign at decimal 43\n            -9,-9,-9,                                   // Decimal 44 - 46\n            63,                                         // Slash at decimal 47\n            52,53,54,55,56,57,58,59,60,61,              // Numbers zero through nine\n            -9,-9,-9,                                   // Decimal 58 - 60\n            -1,                                         // Equals sign at decimal 61\n            -9,-9,-9,                                      // Decimal 62 - 64\n            0,1,2,3,4,5,6,7,8,9,10,11,12,13,            // Letters 'A' through 'N'\n            14,15,16,17,18,19,20,21,22,23,24,25,        // Letters 'O' through 'Z'\n            -9,-9,-9,-9,-9,-9,                          // Decimal 91 - 96\n            26,27,28,29,30,31,32,33,34,35,36,37,38,     // Letters 'a' through 'm'\n            39,40,41,42,43,44,45,46,47,48,49,50,51,     // Letters 'n' through 'z'\n            -9,-9,-9,-9                                 // Decimal 123 - 126\n    };", "modifier": "private static final", "type": "byte[]", "declarator": "DECODABET = {\n            -9,-9,-9,-9,-9,-9,-9,-9,-9,                 // Decimal  0 -  8\n            -5,-5,                                      // Whitespace: Tab and Linefeed\n            -9,-9,                                      // Decimal 11 - 12\n            -5,                                         // Whitespace: Carriage Return\n            -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 14 - 26\n            -9,-9,-9,-9,-9,                             // Decimal 27 - 31\n            -5,                                         // Whitespace: Space\n            -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,              // Decimal 33 - 42\n            62,                                         // Plus sign at decimal 43\n            -9,-9,-9,                                   // Decimal 44 - 46\n            63,                                         // Slash at decimal 47\n            52,53,54,55,56,57,58,59,60,61,              // Numbers zero through nine\n            -9,-9,-9,                                   // Decimal 58 - 60\n            -1,                                         // Equals sign at decimal 61\n            -9,-9,-9,                                      // Decimal 62 - 64\n            0,1,2,3,4,5,6,7,8,9,10,11,12,13,            // Letters 'A' through 'N'\n            14,15,16,17,18,19,20,21,22,23,24,25,        // Letters 'O' through 'Z'\n            -9,-9,-9,-9,-9,-9,                          // Decimal 91 - 96\n            26,27,28,29,30,31,32,33,34,35,36,37,38,     // Letters 'a' through 'm'\n            39,40,41,42,43,44,45,46,47,48,49,50,51,     // Letters 'n' through 'z'\n            -9,-9,-9,-9                                 // Decimal 123 - 126\n    }", "var_name": "DECODABET"}, {"original_string": "private static final byte WHITE_SPACE_ENC = -5;", "modifier": "private static final", "type": "byte", "declarator": "WHITE_SPACE_ENC = -5", "var_name": "WHITE_SPACE_ENC"}, {"original_string": "private static final byte EQUALS_SIGN_ENC = -1;", "modifier": "private static final", "type": "byte", "declarator": "EQUALS_SIGN_ENC = -1", "var_name": "EQUALS_SIGN_ENC"}, {"original_string": "private static final byte EQUALS_SIGN = (byte)'=';", "modifier": "private static final", "type": "byte", "declarator": "EQUALS_SIGN = (byte)'='", "var_name": "EQUALS_SIGN"}], "methods": [{"identifier": "decode", "parameters": "(String s)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] decode(String s)", "full_signature": "public static byte[] decode(String s)", "class_method_signature": "Base64Util.decode(String s)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(byte[] source)", "modifiers": "public static", "return": "String", "signature": "String encode(byte[] source)", "full_signature": "public static String encode(byte[] source)", "class_method_signature": "Base64Util.encode(byte[] source)", "testcase": false, "constructor": false}, {"identifier": "decodeBytes", "parameters": "(byte[] pInBytes)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] decodeBytes(byte[] pInBytes)", "full_signature": "private static byte[] decodeBytes(byte[] pInBytes)", "class_method_signature": "Base64Util.decodeBytes(byte[] pInBytes)", "testcase": false, "constructor": false}, {"identifier": "decode4to3", "parameters": "(\n            byte[] source, int srcOffset,\n            byte[] destination, int destOffset)", "modifiers": "private static", "return": "int", "signature": "int decode4to3(\n            byte[] source, int srcOffset,\n            byte[] destination, int destOffset)", "full_signature": "private static int decode4to3(\n            byte[] source, int srcOffset,\n            byte[] destination, int destOffset)", "class_method_signature": "Base64Util.decode4to3(\n            byte[] source, int srcOffset,\n            byte[] destination, int destOffset)", "testcase": false, "constructor": false}, {"identifier": "verifyArguments", "parameters": "(byte[] source, int srcOffset, byte[] destination, int destOffset)", "modifiers": "private static", "return": "void", "signature": "void verifyArguments(byte[] source, int srcOffset, byte[] destination, int destOffset)", "full_signature": "private static void verifyArguments(byte[] source, int srcOffset, byte[] destination, int destOffset)", "class_method_signature": "Base64Util.verifyArguments(byte[] source, int srcOffset, byte[] destination, int destOffset)", "testcase": false, "constructor": false}, {"identifier": "encodeBytesToBytes", "parameters": "(byte[] source, int len)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] encodeBytesToBytes(byte[] source, int len)", "full_signature": "public static byte[] encodeBytesToBytes(byte[] source, int len)", "class_method_signature": "Base64Util.encodeBytesToBytes(byte[] source, int len)", "testcase": false, "constructor": false}, {"identifier": "encode3to4", "parameters": "(\n            byte[] source, int srcOffset, int numSigBytes,\n            byte[] destination, int destOffset)", "modifiers": "private static", "return": "byte[]", "signature": "byte[] encode3to4(\n            byte[] source, int srcOffset, int numSigBytes,\n            byte[] destination, int destOffset)", "full_signature": "private static byte[] encode3to4(\n            byte[] source, int srcOffset, int numSigBytes,\n            byte[] destination, int destOffset)", "class_method_signature": "Base64Util.encode3to4(\n            byte[] source, int srcOffset, int numSigBytes,\n            byte[] destination, int destOffset)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/util/Base64Util.java"}, "focal_method": {"identifier": "decode", "parameters": "(String s)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] decode(String s) {\n\n        if( s == null ){\n            throw new IllegalArgumentException(\"Input string was null.\");\n        }\n\n        byte[] inBytes;\n        try {\n            inBytes = s.getBytes(\"US-ASCII\");\n        }\n        catch( java.io.UnsupportedEncodingException uee ) {\n            inBytes = s.getBytes();\n        }\n\n        if( inBytes.length == 0 ) {\n            return new byte[0];\n        } else if( inBytes.length < 4 ){\n            throw new IllegalArgumentException(\n                    \"Base64-encoded string must have at least four characters, but length specified was \" + inBytes.length);\n        }   // end if\n\n        return decodeBytes(inBytes);\n    }", "signature": "byte[] decode(String s)", "full_signature": "public static byte[] decode(String s)", "class_method_signature": "Base64Util.decode(String s)", "testcase": false, "constructor": false, "invocations": ["getBytes", "getBytes", "decodeBytes"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}