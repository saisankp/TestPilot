{"test_class": {"identifier": "ColumnVisibilityConfigHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final StorageAdapter storage = new StorageAdapter() {\n        private final Map<String, String> store = new HashMap<>();\n\n        @Override\n        public void setItem(String key, String data) {\n            store.put(key, data);\n        }\n\n        @Override\n        public String getItem(String key) {\n            return store.get(key);\n        }\n    };", "modifier": "private final", "type": "StorageAdapter", "declarator": "storage = new StorageAdapter() {\n        private final Map<String, String> store = new HashMap<>();\n\n        @Override\n        public void setItem(String key, String data) {\n            store.put(key, data);\n        }\n\n        @Override\n        public String getItem(String key) {\n            return store.get(key);\n        }\n    }", "var_name": "storage"}, {"original_string": "private final ColumnVisibilityConfigHelper helper = new ColumnVisibilityConfigHelper(storage);", "modifier": "private final", "type": "ColumnVisibilityConfigHelper", "declarator": "helper = new ColumnVisibilityConfigHelper(storage)", "var_name": "helper"}], "file": "gae-studio/gae-studio-client/src/test/java/com/arcbees/gaestudio/client/application/visualizer/columnfilter/ColumnVisibilityConfigHelperTest.java"}, "test_case": {"identifier": "get_unexistingColumn_returnsDefaultVisibilityAndStoresDefaultVisibility", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void get_unexistingColumn_returnsDefaultVisibilityAndStoresDefaultVisibility() {\n        assertEquals(DEFAULT_COLUMN_VISIBILITY, helper.getColumnVisibility(\"appId\", \"ns\", \"kind\", \"col\"));\n\n        // we assert that getting a non-exiting column writes the default value to the store\n        String key = COLUMN_VISIBILITY_CONFIG + \"$appId$ns$kind$col\";\n        String item = storage.getItem(key);\n        assertEquals(DEFAULT_COLUMN_VISIBILITY, Boolean.valueOf(item));\n    }", "signature": "void get_unexistingColumn_returnsDefaultVisibilityAndStoresDefaultVisibility()", "full_signature": "@Test public void get_unexistingColumn_returnsDefaultVisibilityAndStoresDefaultVisibility()", "class_method_signature": "ColumnVisibilityConfigHelperTest.get_unexistingColumn_returnsDefaultVisibilityAndStoresDefaultVisibility()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getColumnVisibility", "getItem", "assertEquals", "valueOf"]}, "focal_class": {"identifier": "ColumnVisibilityConfigHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final boolean DEFAULT_COLUMN_VISIBILITY = true;", "modifier": "static final", "type": "boolean", "declarator": "DEFAULT_COLUMN_VISIBILITY = true", "var_name": "DEFAULT_COLUMN_VISIBILITY"}, {"original_string": "static final String COLUMN_VISIBILITY_CONFIG = \"column_visibility_config\";", "modifier": "static final", "type": "String", "declarator": "COLUMN_VISIBILITY_CONFIG = \"column_visibility_config\"", "var_name": "COLUMN_VISIBILITY_CONFIG"}, {"original_string": "private final StorageAdapter storage;", "modifier": "private final", "type": "StorageAdapter", "declarator": "storage", "var_name": "storage"}], "methods": [{"identifier": "ColumnVisibilityConfigHelper", "parameters": "(\n            StorageAdapter storage)", "modifiers": "@Inject", "return": "", "signature": " ColumnVisibilityConfigHelper(\n            StorageAdapter storage)", "full_signature": "@Inject  ColumnVisibilityConfigHelper(\n            StorageAdapter storage)", "class_method_signature": "ColumnVisibilityConfigHelper.ColumnVisibilityConfigHelper(\n            StorageAdapter storage)", "testcase": false, "constructor": true}, {"identifier": "setColumnVisible", "parameters": "(String appId, String namespace, String kind, String columnName, boolean visible)", "modifiers": "public", "return": "void", "signature": "void setColumnVisible(String appId, String namespace, String kind, String columnName, boolean visible)", "full_signature": "public void setColumnVisible(String appId, String namespace, String kind, String columnName, boolean visible)", "class_method_signature": "ColumnVisibilityConfigHelper.setColumnVisible(String appId, String namespace, String kind, String columnName, boolean visible)", "testcase": false, "constructor": false}, {"identifier": "getColumnVisibility", "parameters": "(String appId, String namespace, String kind, String columnName)", "modifiers": "public", "return": "boolean", "signature": "boolean getColumnVisibility(String appId, String namespace, String kind, String columnName)", "full_signature": "public boolean getColumnVisibility(String appId, String namespace, String kind, String columnName)", "class_method_signature": "ColumnVisibilityConfigHelper.getColumnVisibility(String appId, String namespace, String kind, String columnName)", "testcase": false, "constructor": false}, {"identifier": "generateKindKey", "parameters": "(String appId, String namespace, String kind, String columnName)", "modifiers": "private", "return": "String", "signature": "String generateKindKey(String appId, String namespace, String kind, String columnName)", "full_signature": "private String generateKindKey(String appId, String namespace, String kind, String columnName)", "class_method_signature": "ColumnVisibilityConfigHelper.generateKindKey(String appId, String namespace, String kind, String columnName)", "testcase": false, "constructor": false}], "file": "gae-studio/gae-studio-client/src/main/java/com/arcbees/gaestudio/client/application/visualizer/columnfilter/ColumnVisibilityConfigHelper.java"}, "focal_method": {"identifier": "getColumnVisibility", "parameters": "(String appId, String namespace, String kind, String columnName)", "modifiers": "public", "return": "boolean", "body": "public boolean getColumnVisibility(String appId, String namespace, String kind, String columnName) {\n        String kindKey = generateKindKey(appId, namespace, kind, columnName);\n        String item = storage.getItem(kindKey);\n\n        boolean visibility;\n\n        if (Strings.isNullOrEmpty(item)) {\n            visibility = DEFAULT_COLUMN_VISIBILITY;\n            setColumnVisible(appId, namespace, kind, columnName, visibility);\n        } else {\n            visibility = Boolean.valueOf(item);\n        }\n\n        return visibility;\n    }", "signature": "boolean getColumnVisibility(String appId, String namespace, String kind, String columnName)", "full_signature": "public boolean getColumnVisibility(String appId, String namespace, String kind, String columnName)", "class_method_signature": "ColumnVisibilityConfigHelper.getColumnVisibility(String appId, String namespace, String kind, String columnName)", "testcase": false, "constructor": false, "invocations": ["generateKindKey", "getItem", "isNullOrEmpty", "setColumnVisible", "valueOf"]}, "repository": {"repo_id": 29952888, "url": "https://github.com/ArcBees/gae-studio", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 21, "size": 11408, "license": "licensed"}}