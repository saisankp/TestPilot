{"test_class": {"identifier": "CertificateGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CertificateGenerator subject;", "modifier": "private", "type": "CertificateGenerator", "declarator": "subject", "var_name": "subject"}, {"original_string": "private RsaKeyPairGenerator keyGenerator;", "modifier": "private", "type": "RsaKeyPairGenerator", "declarator": "keyGenerator", "var_name": "keyGenerator"}, {"original_string": "private SignedCertificateGenerator signedCertificateGenerator;", "modifier": "private", "type": "SignedCertificateGenerator", "declarator": "signedCertificateGenerator", "var_name": "signedCertificateGenerator"}, {"original_string": "private CertificateAuthorityService certificateAuthorityService;", "modifier": "private", "type": "CertificateAuthorityService", "declarator": "certificateAuthorityService", "var_name": "certificateAuthorityService"}, {"original_string": "private FakeKeyPairGenerator fakeKeyPairGenerator;", "modifier": "private", "type": "FakeKeyPairGenerator", "declarator": "fakeKeyPairGenerator", "var_name": "fakeKeyPairGenerator"}, {"original_string": "private X500Name rootCaDn;", "modifier": "private", "type": "X500Name", "declarator": "rootCaDn", "var_name": "rootCaDn"}, {"original_string": "private X500Name signeeDn;", "modifier": "private", "type": "X500Name", "declarator": "signeeDn", "var_name": "signeeDn"}, {"original_string": "private KeyPair rootCaKeyPair;", "modifier": "private", "type": "KeyPair", "declarator": "rootCaKeyPair", "var_name": "rootCaKeyPair"}, {"original_string": "private X509Certificate rootCaX509Certificate;", "modifier": "private", "type": "X509Certificate", "declarator": "rootCaX509Certificate", "var_name": "rootCaX509Certificate"}, {"original_string": "private CertificateCredentialValue rootCa;", "modifier": "private", "type": "CertificateCredentialValue", "declarator": "rootCa", "var_name": "rootCa"}, {"original_string": "private CertificateGenerationParameters inputParameters;", "modifier": "private", "type": "CertificateGenerationParameters", "declarator": "inputParameters", "var_name": "inputParameters"}, {"original_string": "private CertificateGenerationRequestParameters generationParameters;", "modifier": "private", "type": "CertificateGenerationRequestParameters", "declarator": "generationParameters", "var_name": "generationParameters"}, {"original_string": "private X509Certificate childX509Certificate;", "modifier": "private", "type": "X509Certificate", "declarator": "childX509Certificate", "var_name": "childX509Certificate"}], "file": "components/credentials/src/test/java/org/cloudfoundry/credhub/generators/CertificateGeneratorTest.java"}, "test_case": {"identifier": "whenSelfSignIsTrue_itGeneratesAValidSelfSignedCertificate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void whenSelfSignIsTrue_itGeneratesAValidSelfSignedCertificate() throws Exception {\n    final X509Certificate certificate = new JcaX509CertificateConverter().setProvider(BouncyCastleFipsProvider.PROVIDER_NAME)\n      .getCertificate(generateX509SelfSignedCert());\n\n    generationParameters.setCaName(null);\n    generationParameters.setSelfSigned(true);\n    inputParameters = new CertificateGenerationParameters(generationParameters);\n    when(keyGenerator.generateKeyPair(anyInt())).thenReturn(rootCaKeyPair);\n    when(signedCertificateGenerator.getSelfSigned(rootCaKeyPair, inputParameters))\n      .thenReturn(certificate);\n\n    final CertificateCredentialValue certificateCredential = subject.generateCredential(inputParameters);\n    assertThat(certificateCredential.getPrivateKey(),\n      equalTo(CertificateFormatter.pemOf(rootCaKeyPair.getPrivate())));\n    assertThat(certificateCredential.getCertificate(),\n      equalTo(CertificateFormatter.pemOf(certificate)));\n    assertThat(certificateCredential.getCa(), equalTo(CertificateFormatter.pemOf(certificate)));\n    verify(signedCertificateGenerator, times(1)).getSelfSigned(rootCaKeyPair, inputParameters);\n  }", "signature": "void whenSelfSignIsTrue_itGeneratesAValidSelfSignedCertificate()", "full_signature": "@Test public void whenSelfSignIsTrue_itGeneratesAValidSelfSignedCertificate()", "class_method_signature": "CertificateGeneratorTest.whenSelfSignIsTrue_itGeneratesAValidSelfSignedCertificate()", "testcase": true, "constructor": false, "invocations": ["getCertificate", "setProvider", "generateX509SelfSignedCert", "setCaName", "setSelfSigned", "thenReturn", "when", "generateKeyPair", "anyInt", "thenReturn", "when", "getSelfSigned", "generateCredential", "assertThat", "getPrivateKey", "equalTo", "pemOf", "getPrivate", "assertThat", "getCertificate", "equalTo", "pemOf", "assertThat", "getCa", "equalTo", "pemOf", "getSelfSigned", "verify", "times"]}, "focal_class": {"identifier": "CertificateGenerator", "superclass": "", "interfaces": "implements CredentialGenerator<CertificateCredentialValue>", "fields": [{"original_string": "private final RsaKeyPairGenerator keyGenerator;", "modifier": "private final", "type": "RsaKeyPairGenerator", "declarator": "keyGenerator", "var_name": "keyGenerator"}, {"original_string": "private final SignedCertificateGenerator signedCertificateGenerator;", "modifier": "private final", "type": "SignedCertificateGenerator", "declarator": "signedCertificateGenerator", "var_name": "signedCertificateGenerator"}, {"original_string": "private final CertificateAuthorityService certificateAuthorityService;", "modifier": "private final", "type": "CertificateAuthorityService", "declarator": "certificateAuthorityService", "var_name": "certificateAuthorityService"}], "methods": [{"identifier": "CertificateGenerator", "parameters": "(\n    final RsaKeyPairGenerator keyGenerator,\n    final SignedCertificateGenerator signedCertificateGenerator,\n    final CertificateAuthorityService certificateAuthorityService)", "modifiers": "@Autowired public", "return": "", "signature": " CertificateGenerator(\n    final RsaKeyPairGenerator keyGenerator,\n    final SignedCertificateGenerator signedCertificateGenerator,\n    final CertificateAuthorityService certificateAuthorityService)", "full_signature": "@Autowired public  CertificateGenerator(\n    final RsaKeyPairGenerator keyGenerator,\n    final SignedCertificateGenerator signedCertificateGenerator,\n    final CertificateAuthorityService certificateAuthorityService)", "class_method_signature": "CertificateGenerator.CertificateGenerator(\n    final RsaKeyPairGenerator keyGenerator,\n    final SignedCertificateGenerator signedCertificateGenerator,\n    final CertificateAuthorityService certificateAuthorityService)", "testcase": false, "constructor": true}, {"identifier": "generateCredential", "parameters": "(final GenerationParameters p)", "modifiers": "@Override public", "return": "CertificateCredentialValue", "signature": "CertificateCredentialValue generateCredential(final GenerationParameters p)", "full_signature": "@Override public CertificateCredentialValue generateCredential(final GenerationParameters p)", "class_method_signature": "CertificateGenerator.generateCredential(final GenerationParameters p)", "testcase": false, "constructor": false}, {"identifier": "shouldUseTransitionalParentToSign", "parameters": "(final Boolean allowTransitionalParentToSign, final CertificateCredentialValue latestNonTransitionalCaVersion, final CertificateCredentialValue transitionalCaVersion)", "modifiers": "private", "return": "boolean", "signature": "boolean shouldUseTransitionalParentToSign(final Boolean allowTransitionalParentToSign, final CertificateCredentialValue latestNonTransitionalCaVersion, final CertificateCredentialValue transitionalCaVersion)", "full_signature": "private boolean shouldUseTransitionalParentToSign(final Boolean allowTransitionalParentToSign, final CertificateCredentialValue latestNonTransitionalCaVersion, final CertificateCredentialValue transitionalCaVersion)", "class_method_signature": "CertificateGenerator.shouldUseTransitionalParentToSign(final Boolean allowTransitionalParentToSign, final CertificateCredentialValue latestNonTransitionalCaVersion, final CertificateCredentialValue transitionalCaVersion)", "testcase": false, "constructor": false}], "file": "components/credentials/src/main/java/org/cloudfoundry/credhub/generators/CertificateGenerator.java"}, "focal_method": {"identifier": "generateCredential", "parameters": "(final GenerationParameters p)", "modifiers": "@Override public", "return": "CertificateCredentialValue", "body": "@Override\n  public CertificateCredentialValue generateCredential(final GenerationParameters p) {\n    final CertificateGenerationParameters params = (CertificateGenerationParameters) p;\n    final KeyPair keyPair;\n    final String privatePem;\n    try {\n      keyPair = keyGenerator.generateKeyPair(params.getKeyLength());\n      privatePem = CertificateFormatter.pemOf(keyPair.getPrivate());\n    } catch (final Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    if (params.isSelfSigned()) {\n      try {\n        final String cert = CertificateFormatter.pemOf(signedCertificateGenerator.getSelfSigned(keyPair, params));\n        return new CertificateCredentialValue(cert, cert, privatePem, null, params.isCa(), params.isSelfSigned(), true, false);\n      } catch (final Exception e) {\n        throw new RuntimeException(e);\n      }\n    } else {\n      final String caName = params.getCaName();\n      final CertificateCredentialValue latestNonTransitionalCaVersion = certificateAuthorityService.findActiveVersion(caName);\n      if (latestNonTransitionalCaVersion.getPrivateKey() == null) {\n        throw new ParameterizedValidationException(ErrorMessages.CA_MISSING_PRIVATE_KEY);\n      }\n      final CertificateCredentialValue transitionalCaVersion = certificateAuthorityService.findTransitionalVersion(caName);\n\n      String signingCaCertificate;\n      String signingCaPrivateKey;\n      String trustedCaCertificate = null;\n\n      if (shouldUseTransitionalParentToSign(params.getAllowTransitionalParentToSign(), latestNonTransitionalCaVersion, transitionalCaVersion)) {\n        signingCaCertificate = transitionalCaVersion.getCertificate();\n        signingCaPrivateKey = transitionalCaVersion.getPrivateKey();\n        trustedCaCertificate = latestNonTransitionalCaVersion.getCertificate();\n      } else {\n        signingCaCertificate = latestNonTransitionalCaVersion.getCertificate();\n        signingCaPrivateKey = latestNonTransitionalCaVersion.getPrivateKey();\n        if (transitionalCaVersion != null) {\n          trustedCaCertificate = transitionalCaVersion.getCertificate();\n        }\n      }\n\n      try {\n\n        final CertificateReader certificateReader = new CertificateReader(signingCaCertificate);\n\n        final X509Certificate cert = signedCertificateGenerator.getSignedByIssuer(\n          keyPair,\n          params,\n          certificateReader.getCertificate(),\n          PrivateKeyReader.getPrivateKey(signingCaPrivateKey)\n        );\n        return new CertificateCredentialValue(signingCaCertificate, CertificateFormatter.pemOf(cert), privatePem, caName, trustedCaCertificate, params.isCa(), params.isSelfSigned(), true, false);\n      } catch (final Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }", "signature": "CertificateCredentialValue generateCredential(final GenerationParameters p)", "full_signature": "@Override public CertificateCredentialValue generateCredential(final GenerationParameters p)", "class_method_signature": "CertificateGenerator.generateCredential(final GenerationParameters p)", "testcase": false, "constructor": false, "invocations": ["generateKeyPair", "getKeyLength", "pemOf", "getPrivate", "isSelfSigned", "pemOf", "getSelfSigned", "isCa", "isSelfSigned", "getCaName", "findActiveVersion", "getPrivateKey", "findTransitionalVersion", "shouldUseTransitionalParentToSign", "getAllowTransitionalParentToSign", "getCertificate", "getPrivateKey", "getCertificate", "getCertificate", "getPrivateKey", "getCertificate", "getSignedByIssuer", "getCertificate", "getPrivateKey", "pemOf", "isCa", "isSelfSigned"]}, "repository": {"repo_id": 57061988, "url": "https://github.com/cloudfoundry-incubator/credhub", "stars": 167, "created": "4/25/2016 5:30:51 PM +00:00", "updates": "2020-01-27T21:31:19+00:00", "fork": "False", "license": "licensed"}}