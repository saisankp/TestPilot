{"test_class": {"identifier": "StmProcessingFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/satoolkit/algorithm/implementation/StmProcessingFactoryTest.java"}, "test_case": {"identifier": "demoProcessing", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n    @Ignore\n    public void demoProcessing() {\n        StmSpecification spec=new StmSpecification();\n        //spec.getPreprocessingSpec().transform=DefaultTransformationType.None;\n        CompositeResults stm = StmProcessingFactory.process(data.Data.P, spec);\n        TsDataTable table=new TsDataTable();\n        table.insert(-1, stm.getData(\"y\", TsData.class));\n        table.insert(-1, stm.getData(\"sa\", TsData.class));\n        table.insert(-1, stm.getData(\"t\", TsData.class));\n        table.insert(-1, stm.getData(\"s\", TsData.class));\n        table.insert(-1, stm.getData(\"i\", TsData.class));\n        System.out.println(table);\n    }", "signature": "void demoProcessing()", "full_signature": "@Test @Ignore public void demoProcessing()", "class_method_signature": "StmProcessingFactoryTest.demoProcessing()", "testcase": true, "constructor": false, "invocations": ["process", "insert", "getData", "insert", "getData", "insert", "getData", "insert", "getData", "insert", "getData", "println"]}, "focal_class": {"identifier": "StmProcessingFactory", "superclass": "extends GenericSaProcessingFactory", "interfaces": "implements IProcessingFactory<StmSpecification, TsData, CompositeResults>", "fields": [{"original_string": "public static final AlgorithmDescriptor DESCRIPTOR = new AlgorithmDescriptor(FAMILY, \"Structural model\", null);", "modifier": "public static final", "type": "AlgorithmDescriptor", "declarator": "DESCRIPTOR = new AlgorithmDescriptor(FAMILY, \"Structural model\", null)", "var_name": "DESCRIPTOR"}, {"original_string": "public static final String ESTIMATION = \"estimation\", DETERMINISTIC = \"deterministic\";", "modifier": "public static final", "type": "String", "declarator": "ESTIMATION = \"estimation\"", "var_name": "ESTIMATION"}, {"original_string": "public static final StmProcessingFactory instance = new StmProcessingFactory();", "modifier": "public static final", "type": "StmProcessingFactory", "declarator": "instance = new StmProcessingFactory()", "var_name": "instance"}], "methods": [{"identifier": "create", "parameters": "(StmSpecification xspec, ProcessingContext context)", "modifiers": "private static", "return": "SequentialProcessing<TsData>", "signature": "SequentialProcessing<TsData> create(StmSpecification xspec, ProcessingContext context)", "full_signature": "private static SequentialProcessing<TsData> create(StmSpecification xspec, ProcessingContext context)", "class_method_signature": "StmProcessingFactory.create(StmSpecification xspec, ProcessingContext context)", "testcase": false, "constructor": false}, {"identifier": "addPreprocessingStep", "parameters": "(IPreprocessor preprocessor, SequentialProcessing sproc)", "modifiers": "protected static", "return": "void", "signature": "void addPreprocessingStep(IPreprocessor preprocessor, SequentialProcessing sproc)", "full_signature": "protected static void addPreprocessingStep(IPreprocessor preprocessor, SequentialProcessing sproc)", "class_method_signature": "StmProcessingFactory.addPreprocessingStep(IPreprocessor preprocessor, SequentialProcessing sproc)", "testcase": false, "constructor": false}, {"identifier": "StmProcessingFactory", "parameters": "()", "modifiers": "protected", "return": "", "signature": " StmProcessingFactory()", "full_signature": "protected  StmProcessingFactory()", "class_method_signature": "StmProcessingFactory.StmProcessingFactory()", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(TsData s, StmSpecification xspec)", "modifiers": "public static", "return": "CompositeResults", "signature": "CompositeResults process(TsData s, StmSpecification xspec)", "full_signature": "public static CompositeResults process(TsData s, StmSpecification xspec)", "class_method_signature": "StmProcessingFactory.process(TsData s, StmSpecification xspec)", "testcase": false, "constructor": false}, {"identifier": "generateProcessing", "parameters": "(StmSpecification xspec, ProcessingContext context)", "modifiers": "@Override public", "return": "SequentialProcessing<TsData>", "signature": "SequentialProcessing<TsData> generateProcessing(StmSpecification xspec, ProcessingContext context)", "full_signature": "@Override public SequentialProcessing<TsData> generateProcessing(StmSpecification xspec, ProcessingContext context)", "class_method_signature": "StmProcessingFactory.generateProcessing(StmSpecification xspec, ProcessingContext context)", "testcase": false, "constructor": false}, {"identifier": "generateProcessing", "parameters": "(StmSpecification xspec)", "modifiers": "public", "return": "SequentialProcessing<TsData>", "signature": "SequentialProcessing<TsData> generateProcessing(StmSpecification xspec)", "full_signature": "public SequentialProcessing<TsData> generateProcessing(StmSpecification xspec)", "class_method_signature": "StmProcessingFactory.generateProcessing(StmSpecification xspec)", "testcase": false, "constructor": false}, {"identifier": "getInformation", "parameters": "()", "modifiers": "@Override public", "return": "AlgorithmDescriptor", "signature": "AlgorithmDescriptor getInformation()", "full_signature": "@Override public AlgorithmDescriptor getInformation()", "class_method_signature": "StmProcessingFactory.getInformation()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "StmProcessingFactory.dispose()", "testcase": false, "constructor": false}, {"identifier": "canHandle", "parameters": "(IProcSpecification spec)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canHandle(IProcSpecification spec)", "full_signature": "@Override public boolean canHandle(IProcSpecification spec)", "class_method_signature": "StmProcessingFactory.canHandle(IProcSpecification spec)", "testcase": false, "constructor": false}, {"identifier": "getSpecificationDictionary", "parameters": "(Class<StmSpecification> specClass)", "modifiers": "@Override public", "return": "Map<String, Class>", "signature": "Map<String, Class> getSpecificationDictionary(Class<StmSpecification> specClass)", "full_signature": "@Override public Map<String, Class> getSpecificationDictionary(Class<StmSpecification> specClass)", "class_method_signature": "StmProcessingFactory.getSpecificationDictionary(Class<StmSpecification> specClass)", "testcase": false, "constructor": false}, {"identifier": "getOutputDictionary", "parameters": "(boolean compact)", "modifiers": "@Override public", "return": "Map<String, Class>", "signature": "Map<String, Class> getOutputDictionary(boolean compact)", "full_signature": "@Override public Map<String, Class> getOutputDictionary(boolean compact)", "class_method_signature": "StmProcessingFactory.getOutputDictionary(boolean compact)", "testcase": false, "constructor": false}, {"identifier": "addEstimationStep", "parameters": "(BsmSpecification decompositionSpec, SequentialProcessing processing)", "modifiers": "private static", "return": "void", "signature": "void addEstimationStep(BsmSpecification decompositionSpec, SequentialProcessing processing)", "full_signature": "private static void addEstimationStep(BsmSpecification decompositionSpec, SequentialProcessing processing)", "class_method_signature": "StmProcessingFactory.addEstimationStep(BsmSpecification decompositionSpec, SequentialProcessing processing)", "testcase": false, "constructor": false}, {"identifier": "createEstimationStep", "parameters": "(final BsmSpecification decompositionSpec)", "modifiers": "protected static", "return": "IProcessingNode<TsData>", "signature": "IProcessingNode<TsData> createEstimationStep(final BsmSpecification decompositionSpec)", "full_signature": "protected static IProcessingNode<TsData> createEstimationStep(final BsmSpecification decompositionSpec)", "class_method_signature": "StmProcessingFactory.createEstimationStep(final BsmSpecification decompositionSpec)", "testcase": false, "constructor": false}, {"identifier": "addDeterministicStep", "parameters": "(SequentialProcessing processing)", "modifiers": "private static", "return": "void", "signature": "void addDeterministicStep(SequentialProcessing processing)", "full_signature": "private static void addDeterministicStep(SequentialProcessing processing)", "class_method_signature": "StmProcessingFactory.addDeterministicStep(SequentialProcessing processing)", "testcase": false, "constructor": false}, {"identifier": "createDeterministicStep", "parameters": "()", "modifiers": "protected static", "return": "IProcessingNode<TsData>", "signature": "IProcessingNode<TsData> createDeterministicStep()", "full_signature": "protected static IProcessingNode<TsData> createDeterministicStep()", "class_method_signature": "StmProcessingFactory.createDeterministicStep()", "testcase": false, "constructor": false}, {"identifier": "addDecompositionStep", "parameters": "(SequentialProcessing processing)", "modifiers": "private static", "return": "void", "signature": "void addDecompositionStep(SequentialProcessing processing)", "full_signature": "private static void addDecompositionStep(SequentialProcessing processing)", "class_method_signature": "StmProcessingFactory.addDecompositionStep(SequentialProcessing processing)", "testcase": false, "constructor": false}, {"identifier": "createDecompositionStep", "parameters": "()", "modifiers": "protected static", "return": "IProcessingNode<TsData>", "signature": "IProcessingNode<TsData> createDecompositionStep()", "full_signature": "protected static IProcessingNode<TsData> createDecompositionStep()", "class_method_signature": "StmProcessingFactory.createDecompositionStep()", "testcase": false, "constructor": false}, {"identifier": "addFinalStep", "parameters": "(SequentialProcessing processing)", "modifiers": "private static", "return": "void", "signature": "void addFinalStep(SequentialProcessing processing)", "full_signature": "private static void addFinalStep(SequentialProcessing processing)", "class_method_signature": "StmProcessingFactory.addFinalStep(SequentialProcessing processing)", "testcase": false, "constructor": false}, {"identifier": "createFinalStep", "parameters": "()", "modifiers": "protected static", "return": "IProcessingNode<TsData>", "signature": "IProcessingNode<TsData> createFinalStep()", "full_signature": "protected static IProcessingNode<TsData> createFinalStep()", "class_method_signature": "StmProcessingFactory.createFinalStep()", "testcase": false, "constructor": false}, {"identifier": "estimation", "parameters": "(Map<String, IProcResults> results)", "modifiers": "protected static", "return": "StmEstimation", "signature": "StmEstimation estimation(Map<String, IProcResults> results)", "full_signature": "protected static StmEstimation estimation(Map<String, IProcResults> results)", "class_method_signature": "StmProcessingFactory.estimation(Map<String, IProcResults> results)", "testcase": false, "constructor": false}, {"identifier": "deterministic", "parameters": "(Map<String, IProcResults> results)", "modifiers": "protected static", "return": "DeterministicComponent", "signature": "DeterministicComponent deterministic(Map<String, IProcResults> results)", "full_signature": "protected static DeterministicComponent deterministic(Map<String, IProcResults> results)", "class_method_signature": "StmProcessingFactory.deterministic(Map<String, IProcResults> results)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/satoolkit/algorithm/implementation/StmProcessingFactory.java"}, "focal_method": {"identifier": "process", "parameters": "(TsData s, StmSpecification xspec)", "modifiers": "public static", "return": "CompositeResults", "body": "public static CompositeResults process(TsData s, StmSpecification xspec) {\n        SequentialProcessing<TsData> processing = create(xspec, null);\n        return processing.process(s);\n    }", "signature": "CompositeResults process(TsData s, StmSpecification xspec)", "full_signature": "public static CompositeResults process(TsData s, StmSpecification xspec)", "class_method_signature": "StmProcessingFactory.process(TsData s, StmSpecification xspec)", "testcase": false, "constructor": false, "invocations": ["create", "process"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}