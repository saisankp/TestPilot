{"test_class": {"identifier": "DataSourcePreconditionsTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtss/src/test/java/ec/tss/tsproviders/utils/DataSourcePreconditionsTest.java"}, "test_case": {"identifier": "testDataSource", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"null\") public", "return": "void", "body": "@Test\n    @SuppressWarnings(\"null\")\n    public void testDataSource() {\n        DataSource input = DataSource.of(\"myprovider\", \"1234\");\n        assertThat(checkProvider(\"myprovider\", input))\n                .isSameAs(input);\n        assertThatThrownBy(() -> checkProvider(\"xxx\", input))\n                .isInstanceOf(IllegalArgumentException.class);\n        assertThatThrownBy(() -> checkProvider(null, input))\n                .isInstanceOf(NullPointerException.class);\n        assertThatThrownBy(() -> checkProvider(\"myprovider\", (DataSource) null))\n                .isInstanceOf(NullPointerException.class);\n    }", "signature": "void testDataSource()", "full_signature": "@Test @SuppressWarnings(\"null\") public void testDataSource()", "class_method_signature": "DataSourcePreconditionsTest.testDataSource()", "testcase": true, "constructor": false, "invocations": ["of", "isSameAs", "assertThat", "checkProvider", "isInstanceOf", "assertThatThrownBy", "checkProvider", "isInstanceOf", "assertThatThrownBy", "checkProvider", "isInstanceOf", "assertThatThrownBy", "checkProvider"]}, "focal_class": {"identifier": "DataSourcePreconditions", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "DataSourcePreconditions", "parameters": "()", "modifiers": "private", "return": "", "signature": " DataSourcePreconditions()", "full_signature": "private  DataSourcePreconditions()", "class_method_signature": "DataSourcePreconditions.DataSourcePreconditions()", "testcase": false, "constructor": true}, {"identifier": "checkProvider", "parameters": "(@NonNull String providerName, @NonNull DataSource dataSource)", "modifiers": "@NonNull public static", "return": "DataSource", "signature": "DataSource checkProvider(@NonNull String providerName, @NonNull DataSource dataSource)", "full_signature": "@NonNull public static DataSource checkProvider(@NonNull String providerName, @NonNull DataSource dataSource)", "class_method_signature": "DataSourcePreconditions.checkProvider(@NonNull String providerName, @NonNull DataSource dataSource)", "testcase": false, "constructor": false}, {"identifier": "checkProvider", "parameters": "(@NonNull String providerName, @NonNull DataSet dataSet)", "modifiers": "@NonNull public static", "return": "DataSet", "signature": "DataSet checkProvider(@NonNull String providerName, @NonNull DataSet dataSet)", "full_signature": "@NonNull public static DataSet checkProvider(@NonNull String providerName, @NonNull DataSet dataSet)", "class_method_signature": "DataSourcePreconditions.checkProvider(@NonNull String providerName, @NonNull DataSet dataSet)", "testcase": false, "constructor": false}, {"identifier": "checkProvider", "parameters": "(@NonNull String providerName, @NonNull TsMoniker moniker)", "modifiers": "@NonNull public static", "return": "TsMoniker", "signature": "TsMoniker checkProvider(@NonNull String providerName, @NonNull TsMoniker moniker)", "full_signature": "@NonNull public static TsMoniker checkProvider(@NonNull String providerName, @NonNull TsMoniker moniker)", "class_method_signature": "DataSourcePreconditions.checkProvider(@NonNull String providerName, @NonNull TsMoniker moniker)", "testcase": false, "constructor": false}, {"identifier": "checkProvider", "parameters": "(@NonNull String expected, @Nullable String found)", "modifiers": "private static", "return": "void", "signature": "void checkProvider(@NonNull String expected, @Nullable String found)", "full_signature": "private static void checkProvider(@NonNull String expected, @Nullable String found)", "class_method_signature": "DataSourcePreconditions.checkProvider(@NonNull String expected, @Nullable String found)", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/tss/tsproviders/utils/DataSourcePreconditions.java"}, "focal_method": {"identifier": "checkProvider", "parameters": "(@NonNull String providerName, @NonNull DataSource dataSource)", "modifiers": "@NonNull public static", "return": "DataSource", "body": "@NonNull\n    public static DataSource checkProvider(@NonNull String providerName, @NonNull DataSource dataSource) throws IllegalArgumentException {\n        checkProvider(providerName, dataSource.getProviderName());\n        return dataSource;\n    }", "signature": "DataSource checkProvider(@NonNull String providerName, @NonNull DataSource dataSource)", "full_signature": "@NonNull public static DataSource checkProvider(@NonNull String providerName, @NonNull DataSource dataSource)", "class_method_signature": "DataSourcePreconditions.checkProvider(@NonNull String providerName, @NonNull DataSource dataSource)", "testcase": false, "constructor": false, "invocations": ["checkProvider", "getProviderName"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}