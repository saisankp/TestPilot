{"test_class": {"identifier": "RangeIteratorFacadeTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/jcrfacade/RangeIteratorFacadeTest.java"}, "test_case": {"identifier": "testHasNext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHasNext() {\n        RangeIterator delegate = mock(RangeIterator.class);\n        RangeIteratorFacade<RangeIterator> facade = getFacade(delegate);\n        when(delegate.hasNext()).thenReturn(true);\n        assertTrue(\"should be true\", facade.hasNext());\n    }", "signature": "void testHasNext()", "full_signature": "@Test public void testHasNext()", "class_method_signature": "RangeIteratorFacadeTest.testHasNext()", "testcase": true, "constructor": false, "invocations": ["mock", "getFacade", "thenReturn", "when", "hasNext", "assertTrue", "hasNext"]}, "focal_class": {"identifier": "RangeIteratorFacade", "superclass": "", "interfaces": "implements RangeIterator", "fields": [{"original_string": "protected final @NotNull R delegate;", "modifier": "protected final @NotNull", "type": "R", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "RangeIteratorFacade", "parameters": "(final @NotNull R delegate)", "modifiers": "public", "return": "", "signature": " RangeIteratorFacade(final @NotNull R delegate)", "full_signature": "public  RangeIteratorFacade(final @NotNull R delegate)", "class_method_signature": "RangeIteratorFacade.RangeIteratorFacade(final @NotNull R delegate)", "testcase": false, "constructor": true}, {"identifier": "skip", "parameters": "(long skipNum)", "modifiers": "@Override public final", "return": "void", "signature": "void skip(long skipNum)", "full_signature": "@Override public final void skip(long skipNum)", "class_method_signature": "RangeIteratorFacade.skip(long skipNum)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "@Override public final", "return": "long", "signature": "long getSize()", "full_signature": "@Override public final long getSize()", "class_method_signature": "RangeIteratorFacade.getSize()", "testcase": false, "constructor": false}, {"identifier": "getPosition", "parameters": "()", "modifiers": "@Override public final", "return": "long", "signature": "long getPosition()", "full_signature": "@Override public final long getPosition()", "class_method_signature": "RangeIteratorFacade.getPosition()", "testcase": false, "constructor": false}, {"identifier": "hasNext", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean hasNext()", "full_signature": "@Override public final boolean hasNext()", "class_method_signature": "RangeIteratorFacade.hasNext()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object next()", "full_signature": "@Override public Object next()", "class_method_signature": "RangeIteratorFacade.next()", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/jcrfacade/RangeIteratorFacade.java"}, "focal_method": {"identifier": "hasNext", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "body": "@Override\n    public final boolean hasNext() {\n        return delegate.hasNext();\n    }", "signature": "boolean hasNext()", "full_signature": "@Override public final boolean hasNext()", "class_method_signature": "RangeIteratorFacade.hasNext()", "testcase": false, "constructor": false, "invocations": ["hasNext"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}