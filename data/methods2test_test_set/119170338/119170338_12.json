{"test_class": {"identifier": "OntologyAlgorithmTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ImmutableOntology ontology;", "modifier": "private final", "type": "ImmutableOntology", "declarator": "ontology", "var_name": "ontology"}, {"original_string": "private final TermId id1;", "modifier": "private final", "type": "TermId", "declarator": "id1", "var_name": "id1"}, {"original_string": "private final TermId id2;", "modifier": "private final", "type": "TermId", "declarator": "id2", "var_name": "id2"}, {"original_string": "private final TermId id3;", "modifier": "private final", "type": "TermId", "declarator": "id3", "var_name": "id3"}, {"original_string": "private final TermId id4;", "modifier": "private final", "type": "TermId", "declarator": "id4", "var_name": "id4"}, {"original_string": "private final TermId id5;", "modifier": "private final", "type": "TermId", "declarator": "id5", "var_name": "id5"}], "file": "phenol-core/src/test/java/org/monarchinitiative/phenol/ontology/algo/OntologyAlgorithmTest.java"}, "test_case": {"identifier": "testReturnParentWithoutOriginalTerm", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testReturnParentWithoutOriginalTerm() {\n    // id1 has three parents. Since id5 is a parent of both id2 ans id1, id1 has three ancestors (four including id1)\n    //id1->id2, id1->id3, id1 -> id4; id2->id5, id3-> id5,\n    // id5 is not a parent of id1, though!\n    Set<TermId> expected = ImmutableSet.of(id2, id3, id4);\n    assertEquals(expected, getParentTerms(ontology, id1, false));\n    // The root has no parent, we expect the empty set\n    expected = new HashSet<>();\n    assertEquals(expected, getParentTerms(ontology, id5, false));\n  }", "signature": "void testReturnParentWithoutOriginalTerm()", "full_signature": "@Test public void testReturnParentWithoutOriginalTerm()", "class_method_signature": "OntologyAlgorithmTest.testReturnParentWithoutOriginalTerm()", "testcase": true, "constructor": false, "invocations": ["of", "assertEquals", "getParentTerms", "assertEquals", "getParentTerms"]}, "focal_class": {"identifier": "OntologyAlgorithm", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(OntologyAlgorithm.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(OntologyAlgorithm.class)", "var_name": "logger"}], "methods": [{"identifier": "OntologyAlgorithm", "parameters": "()", "modifiers": "private", "return": "", "signature": " OntologyAlgorithm()", "full_signature": "private  OntologyAlgorithm()", "class_method_signature": "OntologyAlgorithm.OntologyAlgorithm()", "testcase": false, "constructor": true}, {"identifier": "existsPath", "parameters": "(\n      Ontology ontology,\n      final TermId sourceID,\n      TermId destID)", "modifiers": "public static", "return": "boolean", "signature": "boolean existsPath(\n      Ontology ontology,\n      final TermId sourceID,\n      TermId destID)", "full_signature": "public static boolean existsPath(\n      Ontology ontology,\n      final TermId sourceID,\n      TermId destID)", "class_method_signature": "OntologyAlgorithm.existsPath(\n      Ontology ontology,\n      final TermId sourceID,\n      TermId destID)", "testcase": false, "constructor": false}, {"identifier": "getChildTerms", "parameters": "(\n    Ontology ontology, TermId parentTermId)", "modifiers": "public static", "return": "Set<TermId>", "signature": "Set<TermId> getChildTerms(\n    Ontology ontology, TermId parentTermId)", "full_signature": "public static Set<TermId> getChildTerms(\n    Ontology ontology, TermId parentTermId)", "class_method_signature": "OntologyAlgorithm.getChildTerms(\n    Ontology ontology, TermId parentTermId)", "testcase": false, "constructor": false}, {"identifier": "getChildTerms", "parameters": "(\n      Ontology ontology,\n      TermId parentTermId,\n      boolean includeOriginalTerm)", "modifiers": "public static", "return": "Set<TermId>", "signature": "Set<TermId> getChildTerms(\n      Ontology ontology,\n      TermId parentTermId,\n      boolean includeOriginalTerm)", "full_signature": "public static Set<TermId> getChildTerms(\n      Ontology ontology,\n      TermId parentTermId,\n      boolean includeOriginalTerm)", "class_method_signature": "OntologyAlgorithm.getChildTerms(\n      Ontology ontology,\n      TermId parentTermId,\n      boolean includeOriginalTerm)", "testcase": false, "constructor": false}, {"identifier": "getChildTerms", "parameters": "(\n    Ontology ontology, Set<TermId> parentTermIdSet)", "modifiers": "public static", "return": "Set<TermId>", "signature": "Set<TermId> getChildTerms(\n    Ontology ontology, Set<TermId> parentTermIdSet)", "full_signature": "public static Set<TermId> getChildTerms(\n    Ontology ontology, Set<TermId> parentTermIdSet)", "class_method_signature": "OntologyAlgorithm.getChildTerms(\n    Ontology ontology, Set<TermId> parentTermIdSet)", "testcase": false, "constructor": false}, {"identifier": "getParentTerms", "parameters": "(\n    Ontology ontology, Set<TermId> childTermIdSet)", "modifiers": "public static", "return": "Set<TermId>", "signature": "Set<TermId> getParentTerms(\n    Ontology ontology, Set<TermId> childTermIdSet)", "full_signature": "public static Set<TermId> getParentTerms(\n    Ontology ontology, Set<TermId> childTermIdSet)", "class_method_signature": "OntologyAlgorithm.getParentTerms(\n    Ontology ontology, Set<TermId> childTermIdSet)", "testcase": false, "constructor": false}, {"identifier": "getParentTerms", "parameters": "(\n      Ontology ontology,\n      Set<TermId> childTermIdSet,\n      boolean includeOriginalTerm)", "modifiers": "public static", "return": "Set<TermId>", "signature": "Set<TermId> getParentTerms(\n      Ontology ontology,\n      Set<TermId> childTermIdSet,\n      boolean includeOriginalTerm)", "full_signature": "public static Set<TermId> getParentTerms(\n      Ontology ontology,\n      Set<TermId> childTermIdSet,\n      boolean includeOriginalTerm)", "class_method_signature": "OntologyAlgorithm.getParentTerms(\n      Ontology ontology,\n      Set<TermId> childTermIdSet,\n      boolean includeOriginalTerm)", "testcase": false, "constructor": false}, {"identifier": "getDescendents", "parameters": "(\n    Ontology ontology, TermId parentTermId)", "modifiers": "public static", "return": "Set<TermId>", "signature": "Set<TermId> getDescendents(\n    Ontology ontology, TermId parentTermId)", "full_signature": "public static Set<TermId> getDescendents(\n    Ontology ontology, TermId parentTermId)", "class_method_signature": "OntologyAlgorithm.getDescendents(\n    Ontology ontology, TermId parentTermId)", "testcase": false, "constructor": false}, {"identifier": "getParentTerms", "parameters": "(\n      Ontology ontology,\n      TermId childTermId,\n      boolean includeOriginalTerm)", "modifiers": "public static", "return": "Set<TermId>", "signature": "Set<TermId> getParentTerms(\n      Ontology ontology,\n      TermId childTermId,\n      boolean includeOriginalTerm)", "full_signature": "public static Set<TermId> getParentTerms(\n      Ontology ontology,\n      TermId childTermId,\n      boolean includeOriginalTerm)", "class_method_signature": "OntologyAlgorithm.getParentTerms(\n      Ontology ontology,\n      TermId childTermId,\n      boolean includeOriginalTerm)", "testcase": false, "constructor": false}, {"identifier": "getAncestorTerms", "parameters": "(\n      Ontology ontology,\n      TermId rootTerm,\n      Set<TermId> children,\n      boolean includeOriginalTerm)", "modifiers": "public static", "return": "Set<TermId>", "signature": "Set<TermId> getAncestorTerms(\n      Ontology ontology,\n      TermId rootTerm,\n      Set<TermId> children,\n      boolean includeOriginalTerm)", "full_signature": "public static Set<TermId> getAncestorTerms(\n      Ontology ontology,\n      TermId rootTerm,\n      Set<TermId> children,\n      boolean includeOriginalTerm)", "class_method_signature": "OntologyAlgorithm.getAncestorTerms(\n      Ontology ontology,\n      TermId rootTerm,\n      Set<TermId> children,\n      boolean includeOriginalTerm)", "testcase": false, "constructor": false}, {"identifier": "getAncestorTerms", "parameters": "(\n      Ontology ontology,\n      TermId rootTerm,\n      TermId child,\n      boolean includeOriginalTerm)", "modifiers": "public static", "return": "Set<TermId>", "signature": "Set<TermId> getAncestorTerms(\n      Ontology ontology,\n      TermId rootTerm,\n      TermId child,\n      boolean includeOriginalTerm)", "full_signature": "public static Set<TermId> getAncestorTerms(\n      Ontology ontology,\n      TermId rootTerm,\n      TermId child,\n      boolean includeOriginalTerm)", "class_method_signature": "OntologyAlgorithm.getAncestorTerms(\n      Ontology ontology,\n      TermId rootTerm,\n      TermId child,\n      boolean includeOriginalTerm)", "testcase": false, "constructor": false}, {"identifier": "getAncestorTerms", "parameters": "(\n      Ontology ontology,\n      Set<TermId> children,\n      boolean includeOriginalTerm)", "modifiers": "public static", "return": "Set<TermId>", "signature": "Set<TermId> getAncestorTerms(\n      Ontology ontology,\n      Set<TermId> children,\n      boolean includeOriginalTerm)", "full_signature": "public static Set<TermId> getAncestorTerms(\n      Ontology ontology,\n      Set<TermId> children,\n      boolean includeOriginalTerm)", "class_method_signature": "OntologyAlgorithm.getAncestorTerms(\n      Ontology ontology,\n      Set<TermId> children,\n      boolean includeOriginalTerm)", "testcase": false, "constructor": false}, {"identifier": "getAncestorTerms", "parameters": "(\n      Ontology ontology,\n      TermId child,\n      boolean includeOriginalTerm)", "modifiers": "public static", "return": "Set<TermId>", "signature": "Set<TermId> getAncestorTerms(\n      Ontology ontology,\n      TermId child,\n      boolean includeOriginalTerm)", "full_signature": "public static Set<TermId> getAncestorTerms(\n      Ontology ontology,\n      TermId child,\n      boolean includeOriginalTerm)", "class_method_signature": "OntologyAlgorithm.getAncestorTerms(\n      Ontology ontology,\n      TermId child,\n      boolean includeOriginalTerm)", "testcase": false, "constructor": false}, {"identifier": "getParentTerms", "parameters": "(\n    Ontology ontology, TermId childTermId)", "modifiers": "public static", "return": "Set<TermId>", "signature": "Set<TermId> getParentTerms(\n    Ontology ontology, TermId childTermId)", "full_signature": "public static Set<TermId> getParentTerms(\n    Ontology ontology, TermId childTermId)", "class_method_signature": "OntologyAlgorithm.getParentTerms(\n    Ontology ontology, TermId childTermId)", "testcase": false, "constructor": false}, {"identifier": "getAncestorTerms", "parameters": "(\n    Ontology ontology, TermId childTermId)", "modifiers": "public static", "return": "Set<TermId>", "signature": "Set<TermId> getAncestorTerms(\n    Ontology ontology, TermId childTermId)", "full_signature": "public static Set<TermId> getAncestorTerms(\n    Ontology ontology, TermId childTermId)", "class_method_signature": "OntologyAlgorithm.getAncestorTerms(\n    Ontology ontology, TermId childTermId)", "testcase": false, "constructor": false}, {"identifier": "isSubclass", "parameters": "(\n    Ontology ontology, TermId source, TermId dest)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSubclass(\n    Ontology ontology, TermId source, TermId dest)", "full_signature": "public static boolean isSubclass(\n    Ontology ontology, TermId source, TermId dest)", "class_method_signature": "OntologyAlgorithm.isSubclass(\n    Ontology ontology, TermId source, TermId dest)", "testcase": false, "constructor": false}, {"identifier": "termsAreSiblings", "parameters": "(\n    Ontology ontology, TermId t1, TermId t2)", "modifiers": "public static", "return": "boolean", "signature": "boolean termsAreSiblings(\n    Ontology ontology, TermId t1, TermId t2)", "full_signature": "public static boolean termsAreSiblings(\n    Ontology ontology, TermId t1, TermId t2)", "class_method_signature": "OntologyAlgorithm.termsAreSiblings(\n    Ontology ontology, TermId t1, TermId t2)", "testcase": false, "constructor": false}, {"identifier": "termsAreRelated", "parameters": "(\n    Ontology ontology, TermId t1, TermId t2)", "modifiers": "public static", "return": "boolean", "signature": "boolean termsAreRelated(\n    Ontology ontology, TermId t1, TermId t2)", "full_signature": "public static boolean termsAreRelated(\n    Ontology ontology, TermId t1, TermId t2)", "class_method_signature": "OntologyAlgorithm.termsAreRelated(\n    Ontology ontology, TermId t1, TermId t2)", "testcase": false, "constructor": false}, {"identifier": "termsAreUnrelated", "parameters": "(\n    Ontology ontology, TermId t1, TermId t2)", "modifiers": "public static", "return": "boolean", "signature": "boolean termsAreUnrelated(\n    Ontology ontology, TermId t1, TermId t2)", "full_signature": "public static boolean termsAreUnrelated(\n    Ontology ontology, TermId t1, TermId t2)", "class_method_signature": "OntologyAlgorithm.termsAreUnrelated(\n    Ontology ontology, TermId t1, TermId t2)", "testcase": false, "constructor": false}], "file": "phenol-core/src/main/java/org/monarchinitiative/phenol/ontology/algo/OntologyAlgorithm.java"}, "focal_method": {"identifier": "getParentTerms", "parameters": "(\n    Ontology ontology, Set<TermId> childTermIdSet)", "modifiers": "public static", "return": "Set<TermId>", "body": "public static Set<TermId> getParentTerms(\n    Ontology ontology, Set<TermId> childTermIdSet) {\n    ImmutableSet.Builder<TermId> parents = new ImmutableSet.Builder<>();\n    for (TermId tid : childTermIdSet) {\n      parents.addAll(getParentTerms(ontology, tid));\n    }\n    return parents.build();\n  }", "signature": "Set<TermId> getParentTerms(\n    Ontology ontology, Set<TermId> childTermIdSet)", "full_signature": "public static Set<TermId> getParentTerms(\n    Ontology ontology, Set<TermId> childTermIdSet)", "class_method_signature": "OntologyAlgorithm.getParentTerms(\n    Ontology ontology, Set<TermId> childTermIdSet)", "testcase": false, "constructor": false, "invocations": ["addAll", "getParentTerms", "build"]}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}