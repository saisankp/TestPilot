{"test_class": {"identifier": "FailbackRegistryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static String service;", "modifier": "static", "type": "String", "declarator": "service", "var_name": "service"}, {"original_string": "static URL serviceUrl;", "modifier": "static", "type": "URL", "declarator": "serviceUrl", "var_name": "serviceUrl"}, {"original_string": "static URL registryUrl;", "modifier": "static", "type": "URL", "declarator": "registryUrl", "var_name": "registryUrl"}, {"original_string": "MockRegistry registry;", "modifier": "", "type": "MockRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private int FAILED_PERIOD = 200;", "modifier": "private", "type": "int", "declarator": "FAILED_PERIOD = 200", "var_name": "FAILED_PERIOD"}, {"original_string": "private int sleeptime = 100;", "modifier": "private", "type": "int", "declarator": "sleeptime = 100", "var_name": "sleeptime"}, {"original_string": "private int trytimes = 5;", "modifier": "private", "type": "int", "declarator": "trytimes = 5", "var_name": "trytimes"}], "file": "dubbo-registry/dubbo-registry-api/src/test/java/org/apache/dubbo/registry/support/FailbackRegistryTest.java"}, "test_case": {"identifier": "testRecover", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRecover() throws Exception {\n        CountDownLatch countDownLatch = new CountDownLatch(4);\n        final AtomicReference<Boolean> notified = new AtomicReference<Boolean>(false);\n        NotifyListener listener = new NotifyListener() {\n            @Override\n            public void notify(List<URL> urls) {\n                notified.set(Boolean.TRUE);\n            }\n        };\n\n        MockRegistry mockRegistry = new MockRegistry(registryUrl, countDownLatch);\n        mockRegistry.register(serviceUrl);\n        mockRegistry.subscribe(serviceUrl, listener);\n        Assertions.assertEquals(1, mockRegistry.getRegistered().size());\n        Assertions.assertEquals(1, mockRegistry.getSubscribed().size());\n        mockRegistry.recover();\n        countDownLatch.await();\n        Assertions.assertEquals(0, mockRegistry.getFailedRegistered().size());\n        FailbackRegistry.Holder h = new FailbackRegistry.Holder(registryUrl, listener);\n        Assertions.assertNull(mockRegistry.getFailedSubscribed().get(h));\n        Assertions.assertEquals(countDownLatch.getCount(), 0);\n    }", "signature": "void testRecover()", "full_signature": "@Test public void testRecover()", "class_method_signature": "FailbackRegistryTest.testRecover()", "testcase": true, "constructor": false, "invocations": ["set", "register", "subscribe", "assertEquals", "size", "getRegistered", "assertEquals", "size", "getSubscribed", "recover", "await", "assertEquals", "size", "getFailedRegistered", "assertNull", "get", "getFailedSubscribed", "assertEquals", "getCount"]}, "focal_class": {"identifier": "FailbackRegistry", "superclass": "extends AbstractRegistry", "interfaces": "", "fields": [{"original_string": "private final ConcurrentMap<URL, FailedRegisteredTask> failedRegistered = new ConcurrentHashMap<URL, FailedRegisteredTask>();", "modifier": "private final", "type": "ConcurrentMap<URL, FailedRegisteredTask>", "declarator": "failedRegistered = new ConcurrentHashMap<URL, FailedRegisteredTask>()", "var_name": "failedRegistered"}, {"original_string": "private final ConcurrentMap<URL, FailedUnregisteredTask> failedUnregistered = new ConcurrentHashMap<URL, FailedUnregisteredTask>();", "modifier": "private final", "type": "ConcurrentMap<URL, FailedUnregisteredTask>", "declarator": "failedUnregistered = new ConcurrentHashMap<URL, FailedUnregisteredTask>()", "var_name": "failedUnregistered"}, {"original_string": "private final ConcurrentMap<Holder, FailedSubscribedTask> failedSubscribed = new ConcurrentHashMap<Holder, FailedSubscribedTask>();", "modifier": "private final", "type": "ConcurrentMap<Holder, FailedSubscribedTask>", "declarator": "failedSubscribed = new ConcurrentHashMap<Holder, FailedSubscribedTask>()", "var_name": "failedSubscribed"}, {"original_string": "private final ConcurrentMap<Holder, FailedUnsubscribedTask> failedUnsubscribed = new ConcurrentHashMap<Holder, FailedUnsubscribedTask>();", "modifier": "private final", "type": "ConcurrentMap<Holder, FailedUnsubscribedTask>", "declarator": "failedUnsubscribed = new ConcurrentHashMap<Holder, FailedUnsubscribedTask>()", "var_name": "failedUnsubscribed"}, {"original_string": "private final int retryPeriod;", "modifier": "private final", "type": "int", "declarator": "retryPeriod", "var_name": "retryPeriod"}, {"original_string": "private final HashedWheelTimer retryTimer;", "modifier": "private final", "type": "HashedWheelTimer", "declarator": "retryTimer", "var_name": "retryTimer"}], "methods": [{"identifier": "FailbackRegistry", "parameters": "(URL url)", "modifiers": "public", "return": "", "signature": " FailbackRegistry(URL url)", "full_signature": "public  FailbackRegistry(URL url)", "class_method_signature": "FailbackRegistry.FailbackRegistry(URL url)", "testcase": false, "constructor": true}, {"identifier": "removeFailedRegisteredTask", "parameters": "(URL url)", "modifiers": "public", "return": "void", "signature": "void removeFailedRegisteredTask(URL url)", "full_signature": "public void removeFailedRegisteredTask(URL url)", "class_method_signature": "FailbackRegistry.removeFailedRegisteredTask(URL url)", "testcase": false, "constructor": false}, {"identifier": "removeFailedUnregisteredTask", "parameters": "(URL url)", "modifiers": "public", "return": "void", "signature": "void removeFailedUnregisteredTask(URL url)", "full_signature": "public void removeFailedUnregisteredTask(URL url)", "class_method_signature": "FailbackRegistry.removeFailedUnregisteredTask(URL url)", "testcase": false, "constructor": false}, {"identifier": "removeFailedSubscribedTask", "parameters": "(URL url, NotifyListener listener)", "modifiers": "public", "return": "void", "signature": "void removeFailedSubscribedTask(URL url, NotifyListener listener)", "full_signature": "public void removeFailedSubscribedTask(URL url, NotifyListener listener)", "class_method_signature": "FailbackRegistry.removeFailedSubscribedTask(URL url, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeFailedUnsubscribedTask", "parameters": "(URL url, NotifyListener listener)", "modifiers": "public", "return": "void", "signature": "void removeFailedUnsubscribedTask(URL url, NotifyListener listener)", "full_signature": "public void removeFailedUnsubscribedTask(URL url, NotifyListener listener)", "class_method_signature": "FailbackRegistry.removeFailedUnsubscribedTask(URL url, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "addFailedRegistered", "parameters": "(URL url)", "modifiers": "private", "return": "void", "signature": "void addFailedRegistered(URL url)", "full_signature": "private void addFailedRegistered(URL url)", "class_method_signature": "FailbackRegistry.addFailedRegistered(URL url)", "testcase": false, "constructor": false}, {"identifier": "removeFailedRegistered", "parameters": "(URL url)", "modifiers": "private", "return": "void", "signature": "void removeFailedRegistered(URL url)", "full_signature": "private void removeFailedRegistered(URL url)", "class_method_signature": "FailbackRegistry.removeFailedRegistered(URL url)", "testcase": false, "constructor": false}, {"identifier": "addFailedUnregistered", "parameters": "(URL url)", "modifiers": "private", "return": "void", "signature": "void addFailedUnregistered(URL url)", "full_signature": "private void addFailedUnregistered(URL url)", "class_method_signature": "FailbackRegistry.addFailedUnregistered(URL url)", "testcase": false, "constructor": false}, {"identifier": "removeFailedUnregistered", "parameters": "(URL url)", "modifiers": "private", "return": "void", "signature": "void removeFailedUnregistered(URL url)", "full_signature": "private void removeFailedUnregistered(URL url)", "class_method_signature": "FailbackRegistry.removeFailedUnregistered(URL url)", "testcase": false, "constructor": false}, {"identifier": "addFailedSubscribed", "parameters": "(URL url, NotifyListener listener)", "modifiers": "protected", "return": "void", "signature": "void addFailedSubscribed(URL url, NotifyListener listener)", "full_signature": "protected void addFailedSubscribed(URL url, NotifyListener listener)", "class_method_signature": "FailbackRegistry.addFailedSubscribed(URL url, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeFailedSubscribed", "parameters": "(URL url, NotifyListener listener)", "modifiers": "private", "return": "void", "signature": "void removeFailedSubscribed(URL url, NotifyListener listener)", "full_signature": "private void removeFailedSubscribed(URL url, NotifyListener listener)", "class_method_signature": "FailbackRegistry.removeFailedSubscribed(URL url, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "addFailedUnsubscribed", "parameters": "(URL url, NotifyListener listener)", "modifiers": "private", "return": "void", "signature": "void addFailedUnsubscribed(URL url, NotifyListener listener)", "full_signature": "private void addFailedUnsubscribed(URL url, NotifyListener listener)", "class_method_signature": "FailbackRegistry.addFailedUnsubscribed(URL url, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeFailedUnsubscribed", "parameters": "(URL url, NotifyListener listener)", "modifiers": "private", "return": "void", "signature": "void removeFailedUnsubscribed(URL url, NotifyListener listener)", "full_signature": "private void removeFailedUnsubscribed(URL url, NotifyListener listener)", "class_method_signature": "FailbackRegistry.removeFailedUnsubscribed(URL url, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "getFailedRegistered", "parameters": "()", "modifiers": "", "return": "ConcurrentMap<URL, FailedRegisteredTask>", "signature": "ConcurrentMap<URL, FailedRegisteredTask> getFailedRegistered()", "full_signature": " ConcurrentMap<URL, FailedRegisteredTask> getFailedRegistered()", "class_method_signature": "FailbackRegistry.getFailedRegistered()", "testcase": false, "constructor": false}, {"identifier": "getFailedUnregistered", "parameters": "()", "modifiers": "", "return": "ConcurrentMap<URL, FailedUnregisteredTask>", "signature": "ConcurrentMap<URL, FailedUnregisteredTask> getFailedUnregistered()", "full_signature": " ConcurrentMap<URL, FailedUnregisteredTask> getFailedUnregistered()", "class_method_signature": "FailbackRegistry.getFailedUnregistered()", "testcase": false, "constructor": false}, {"identifier": "getFailedSubscribed", "parameters": "()", "modifiers": "", "return": "ConcurrentMap<Holder, FailedSubscribedTask>", "signature": "ConcurrentMap<Holder, FailedSubscribedTask> getFailedSubscribed()", "full_signature": " ConcurrentMap<Holder, FailedSubscribedTask> getFailedSubscribed()", "class_method_signature": "FailbackRegistry.getFailedSubscribed()", "testcase": false, "constructor": false}, {"identifier": "getFailedUnsubscribed", "parameters": "()", "modifiers": "", "return": "ConcurrentMap<Holder, FailedUnsubscribedTask>", "signature": "ConcurrentMap<Holder, FailedUnsubscribedTask> getFailedUnsubscribed()", "full_signature": " ConcurrentMap<Holder, FailedUnsubscribedTask> getFailedUnsubscribed()", "class_method_signature": "FailbackRegistry.getFailedUnsubscribed()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(URL url)", "modifiers": "@Override public", "return": "void", "signature": "void register(URL url)", "full_signature": "@Override public void register(URL url)", "class_method_signature": "FailbackRegistry.register(URL url)", "testcase": false, "constructor": false}, {"identifier": "reExportRegister", "parameters": "(URL url)", "modifiers": "@Override public", "return": "void", "signature": "void reExportRegister(URL url)", "full_signature": "@Override public void reExportRegister(URL url)", "class_method_signature": "FailbackRegistry.reExportRegister(URL url)", "testcase": false, "constructor": false}, {"identifier": "unregister", "parameters": "(URL url)", "modifiers": "@Override public", "return": "void", "signature": "void unregister(URL url)", "full_signature": "@Override public void unregister(URL url)", "class_method_signature": "FailbackRegistry.unregister(URL url)", "testcase": false, "constructor": false}, {"identifier": "reExportUnregister", "parameters": "(URL url)", "modifiers": "@Override public", "return": "void", "signature": "void reExportUnregister(URL url)", "full_signature": "@Override public void reExportUnregister(URL url)", "class_method_signature": "FailbackRegistry.reExportUnregister(URL url)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(URL url, NotifyListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void subscribe(URL url, NotifyListener listener)", "full_signature": "@Override public void subscribe(URL url, NotifyListener listener)", "class_method_signature": "FailbackRegistry.subscribe(URL url, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "unsubscribe", "parameters": "(URL url, NotifyListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void unsubscribe(URL url, NotifyListener listener)", "full_signature": "@Override public void unsubscribe(URL url, NotifyListener listener)", "class_method_signature": "FailbackRegistry.unsubscribe(URL url, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "notify", "parameters": "(URL url, NotifyListener listener, List<URL> urls)", "modifiers": "@Override protected", "return": "void", "signature": "void notify(URL url, NotifyListener listener, List<URL> urls)", "full_signature": "@Override protected void notify(URL url, NotifyListener listener, List<URL> urls)", "class_method_signature": "FailbackRegistry.notify(URL url, NotifyListener listener, List<URL> urls)", "testcase": false, "constructor": false}, {"identifier": "doNotify", "parameters": "(URL url, NotifyListener listener, List<URL> urls)", "modifiers": "protected", "return": "void", "signature": "void doNotify(URL url, NotifyListener listener, List<URL> urls)", "full_signature": "protected void doNotify(URL url, NotifyListener listener, List<URL> urls)", "class_method_signature": "FailbackRegistry.doNotify(URL url, NotifyListener listener, List<URL> urls)", "testcase": false, "constructor": false}, {"identifier": "recover", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void recover()", "full_signature": "@Override protected void recover()", "class_method_signature": "FailbackRegistry.recover()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "FailbackRegistry.destroy()", "testcase": false, "constructor": false}, {"identifier": "doRegister", "parameters": "(URL url)", "modifiers": "public abstract", "return": "void", "signature": "void doRegister(URL url)", "full_signature": "public abstract void doRegister(URL url)", "class_method_signature": "FailbackRegistry.doRegister(URL url)", "testcase": false, "constructor": false}, {"identifier": "doUnregister", "parameters": "(URL url)", "modifiers": "public abstract", "return": "void", "signature": "void doUnregister(URL url)", "full_signature": "public abstract void doUnregister(URL url)", "class_method_signature": "FailbackRegistry.doUnregister(URL url)", "testcase": false, "constructor": false}, {"identifier": "doSubscribe", "parameters": "(URL url, NotifyListener listener)", "modifiers": "public abstract", "return": "void", "signature": "void doSubscribe(URL url, NotifyListener listener)", "full_signature": "public abstract void doSubscribe(URL url, NotifyListener listener)", "class_method_signature": "FailbackRegistry.doSubscribe(URL url, NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "doUnsubscribe", "parameters": "(URL url, NotifyListener listener)", "modifiers": "public abstract", "return": "void", "signature": "void doUnsubscribe(URL url, NotifyListener listener)", "full_signature": "public abstract void doUnsubscribe(URL url, NotifyListener listener)", "class_method_signature": "FailbackRegistry.doUnsubscribe(URL url, NotifyListener listener)", "testcase": false, "constructor": false}], "file": "dubbo-registry/dubbo-registry-api/src/main/java/org/apache/dubbo/registry/support/FailbackRegistry.java"}, "focal_method": {"identifier": "recover", "parameters": "()", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void recover() throws Exception {\n        // register\n        Set<URL> recoverRegistered = new HashSet<URL>(getRegistered());\n        if (!recoverRegistered.isEmpty()) {\n            if (logger.isInfoEnabled()) {\n                logger.info(\"Recover register url \" + recoverRegistered);\n            }\n            for (URL url : recoverRegistered) {\n                addFailedRegistered(url);\n            }\n        }\n        // subscribe\n        Map<URL, Set<NotifyListener>> recoverSubscribed = new HashMap<URL, Set<NotifyListener>>(getSubscribed());\n        if (!recoverSubscribed.isEmpty()) {\n            if (logger.isInfoEnabled()) {\n                logger.info(\"Recover subscribe url \" + recoverSubscribed.keySet());\n            }\n            for (Map.Entry<URL, Set<NotifyListener>> entry : recoverSubscribed.entrySet()) {\n                URL url = entry.getKey();\n                for (NotifyListener listener : entry.getValue()) {\n                    addFailedSubscribed(url, listener);\n                }\n            }\n        }\n    }", "signature": "void recover()", "full_signature": "@Override protected void recover()", "class_method_signature": "FailbackRegistry.recover()", "testcase": false, "constructor": false, "invocations": ["getRegistered", "isEmpty", "isInfoEnabled", "info", "addFailedRegistered", "getSubscribed", "isEmpty", "isInfoEnabled", "info", "keySet", "entrySet", "getKey", "getValue", "addFailedSubscribed"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}