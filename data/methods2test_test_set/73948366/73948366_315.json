{"test_class": {"identifier": "RoleTokenTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String rolVersion = \"Z1\";", "modifier": "private final", "type": "String", "declarator": "rolVersion = \"Z1\"", "var_name": "rolVersion"}, {"original_string": "private final String svcDomain = \"sports\";", "modifier": "private final", "type": "String", "declarator": "svcDomain = \"sports\"", "var_name": "svcDomain"}, {"original_string": "private final String salt = \"aAkjbbDMhnLX\";", "modifier": "private final", "type": "String", "declarator": "salt = \"aAkjbbDMhnLX\"", "var_name": "salt"}, {"original_string": "private final long expirationTime = 10;", "modifier": "private final", "type": "long", "declarator": "expirationTime = 10", "var_name": "expirationTime"}, {"original_string": "private String ztsPublicKeyStringK0 = null;", "modifier": "private", "type": "String", "declarator": "ztsPublicKeyStringK0 = null", "var_name": "ztsPublicKeyStringK0"}, {"original_string": "private String ztsPrivateKeyStringK0 = null;", "modifier": "private", "type": "String", "declarator": "ztsPrivateKeyStringK0 = null", "var_name": "ztsPrivateKeyStringK0"}, {"original_string": "private String ztsPublicKeyStringK1 = null;", "modifier": "private", "type": "String", "declarator": "ztsPublicKeyStringK1 = null", "var_name": "ztsPublicKeyStringK1"}, {"original_string": "private String ztsPrivateKeyStringK1 = null;", "modifier": "private", "type": "String", "declarator": "ztsPrivateKeyStringK1 = null", "var_name": "ztsPrivateKeyStringK1"}], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/token/RoleTokenTest.java"}, "test_case": {"identifier": "testRoleToken", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRoleToken() throws CryptoException {\n        // Add some roles\n        List<String> roles = new ArrayList<>();\n        roles.add(\"storage.tenant.weather.updater\");\n        roles.add(\"fantasy.tenant.sports.admin\");\n        roles.add(\"fantasy.tenant.sports.reader\");\n        roles.add(\"fantasy.tenant.sports.writer\");\n        roles.add(\"fantasy.tenant.sports.scanner\");\n\n        // Create a token for validation using the signed data\n        String testKeyVersionK1 = \"1\";\n        RoleToken rollTokenToValidate = createRoleTokenToValidate(roles, testKeyVersionK1);\n        assertNotNull(rollTokenToValidate.getSignedToken());\n\n        // Validate all input data\n        assertEquals(rollTokenToValidate.getVersion(), rolVersion);\n        assertEquals(rollTokenToValidate.getDomain(), svcDomain);\n        List<String> rolesToValidate = rollTokenToValidate.getRoles();\n        assertEquals(rolesToValidate.size(), roles.size());\n        assertEquals(rolesToValidate, roles);\n        assertEquals(rollTokenToValidate.getKeyId(), testKeyVersionK1);\n\n        // Validate the signature and that expiration time had not elapsed\n        assertTrue(rollTokenToValidate.validate(ztsPublicKeyStringK1, 300, false));\n        \n        // Create ServiceToken with null keyVersion which should default to 0\n        rollTokenToValidate = createRoleTokenToValidate(roles);\n        assertEquals(rollTokenToValidate.getKeyId(), \"0\");\n        \n        // Validate the signature using key(k0) and that expiration time had not elapsed\n        assertTrue(rollTokenToValidate.validate(ztsPublicKeyStringK0, 300, false));\n    }", "signature": "void testRoleToken()", "full_signature": "@Test public void testRoleToken()", "class_method_signature": "RoleTokenTest.testRoleToken()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "createRoleTokenToValidate", "assertNotNull", "getSignedToken", "assertEquals", "getVersion", "assertEquals", "getDomain", "getRoles", "assertEquals", "size", "size", "assertEquals", "assertEquals", "getKeyId", "assertTrue", "validate", "createRoleTokenToValidate", "assertEquals", "getKeyId", "assertTrue", "validate"]}, "focal_class": {"identifier": "RoleToken", "superclass": "extends Token", "interfaces": "", "fields": [{"original_string": "protected List<String> roles;", "modifier": "protected", "type": "List<String>", "declarator": "roles", "var_name": "roles"}, {"original_string": "private String principal = null;", "modifier": "private", "type": "String", "declarator": "principal = null", "var_name": "principal"}, {"original_string": "private String proxyUser = null;", "modifier": "private", "type": "String", "declarator": "proxyUser = null", "var_name": "proxyUser"}, {"original_string": "private boolean domainCompleteRoleSet = false;", "modifier": "private", "type": "boolean", "declarator": "domainCompleteRoleSet = false", "var_name": "domainCompleteRoleSet"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RoleToken.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RoleToken.class)", "var_name": "LOG"}], "methods": [{"identifier": "RoleToken", "parameters": "(Builder builder)", "modifiers": "private", "return": "", "signature": " RoleToken(Builder builder)", "full_signature": "private  RoleToken(Builder builder)", "class_method_signature": "RoleToken.RoleToken(Builder builder)", "testcase": false, "constructor": true}, {"identifier": "RoleToken", "parameters": "(String signedToken)", "modifiers": "public", "return": "", "signature": " RoleToken(String signedToken)", "full_signature": "public  RoleToken(String signedToken)", "class_method_signature": "RoleToken.RoleToken(String signedToken)", "testcase": false, "constructor": true}, {"identifier": "getPrincipal", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPrincipal()", "full_signature": "public String getPrincipal()", "class_method_signature": "RoleToken.getPrincipal()", "testcase": false, "constructor": false}, {"identifier": "getRoles", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getRoles()", "full_signature": "public List<String> getRoles()", "class_method_signature": "RoleToken.getRoles()", "testcase": false, "constructor": false}, {"identifier": "getProxyUser", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getProxyUser()", "full_signature": "public String getProxyUser()", "class_method_signature": "RoleToken.getProxyUser()", "testcase": false, "constructor": false}, {"identifier": "getDomainCompleteRoleSet", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getDomainCompleteRoleSet()", "full_signature": "public boolean getDomainCompleteRoleSet()", "class_method_signature": "RoleToken.getDomainCompleteRoleSet()", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/token/RoleToken.java"}, "focal_method": {"identifier": "RoleToken", "parameters": "(Builder builder)", "modifiers": "private", "return": "", "body": "private RoleToken(Builder builder) {\n\n        this.version = builder.version;\n        this.domain = builder.domain;\n        this.roles = builder.roles;\n        this.host = builder.host;\n        this.salt = builder.salt;\n        this.keyId = builder.keyId;\n        this.ip = builder.ip;\n        this.principal = builder.principal;\n        this.proxyUser = builder.proxyUser;\n        this.domainCompleteRoleSet = builder.domainCompleteRoleSet;\n        \n        super.setTimeStamp(builder.issueTime, builder.expirationWindow);\n        \n        StringBuilder strBuilder = new StringBuilder(defaultBuilderBufSize);\n        \n        strBuilder.append(\"v=\");\n        strBuilder.append(version);\n        strBuilder.append(\";d=\");\n        strBuilder.append(domain);\n        strBuilder.append(\";r=\");\n\n        int i = 0;\n        for (String role : roles) {\n            strBuilder.append(role);\n            if (++i != roles.size()) {\n                strBuilder.append(\",\");\n            }\n        }\n        \n        if (domainCompleteRoleSet) {\n            strBuilder.append(\";c=1\");\n        }\n        \n        if (principal != null && !principal.isEmpty()) {\n            strBuilder.append(\";p=\");\n            strBuilder.append(principal);\n        }\n        \n        if (host != null && !host.isEmpty()) {\n            strBuilder.append(\";h=\");\n            strBuilder.append(host);\n        }\n        \n        if (proxyUser != null && !proxyUser.isEmpty()) {\n            strBuilder.append(\";proxy=\");\n            strBuilder.append(proxyUser);\n        }\n        \n        strBuilder.append(\";a=\");\n        strBuilder.append(salt);\n        strBuilder.append(\";t=\");\n        strBuilder.append(timestamp);\n        strBuilder.append(\";e=\");\n        strBuilder.append(expiryTime);\n        strBuilder.append(\";k=\");\n        strBuilder.append(keyId);\n        if (ip != null && !ip.isEmpty()) {\n            strBuilder.append(\";i=\");\n            strBuilder.append(ip);\n        }\n        \n        unsignedToken = strBuilder.toString();\n        \n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"RoleToken created: \" + unsignedToken);\n        }\n    }", "signature": " RoleToken(Builder builder)", "full_signature": "private  RoleToken(Builder builder)", "class_method_signature": "RoleToken.RoleToken(Builder builder)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}