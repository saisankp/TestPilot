{"test_class": {"identifier": "DenseDoubleVectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DOUBLE_COMPARISON_DELTA = 0.0001;", "modifier": "private static final", "type": "double", "declarator": "DOUBLE_COMPARISON_DELTA = 0.0001", "var_name": "DOUBLE_COMPARISON_DELTA"}], "file": "JAICore/jaicore-math/src/test/java/ai/libs/jaicore/math/linearalgebra/DenseDoubleVectorTest.java"}, "test_case": {"identifier": "testSetValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testSetValue() {\n\t\tdouble[] expectedVectorData = { 4, 2 };\n\t\tIVector expectedVector = new DenseDoubleVector(expectedVectorData);\n\t\tdouble[] data = { 2, 2 };\n\t\tIVector vector = new DenseDoubleVector(data);\n\t\tvector.setValue(0, 4);\n\t\tassertEquals(expectedVector, vector);\n\t}", "signature": "void testSetValue()", "full_signature": "@Test public void testSetValue()", "class_method_signature": "DenseDoubleVectorTest.testSetValue()", "testcase": true, "constructor": false, "invocations": ["setValue", "assertEquals"]}, "focal_class": {"identifier": "DenseDoubleVector", "superclass": "extends AbstractVector", "interfaces": "", "fields": [{"original_string": "private no.uib.cipr.matrix.Vector internalVector;", "modifier": "private", "type": "no.uib.cipr.matrix.Vector", "declarator": "internalVector", "var_name": "internalVector"}], "methods": [{"identifier": "DenseDoubleVector", "parameters": "(final int numberOfDimensions)", "modifiers": "public", "return": "", "signature": " DenseDoubleVector(final int numberOfDimensions)", "full_signature": "public  DenseDoubleVector(final int numberOfDimensions)", "class_method_signature": "DenseDoubleVector.DenseDoubleVector(final int numberOfDimensions)", "testcase": false, "constructor": true}, {"identifier": "DenseDoubleVector", "parameters": "(final double[] data)", "modifiers": "public", "return": "", "signature": " DenseDoubleVector(final double[] data)", "full_signature": "public  DenseDoubleVector(final double[] data)", "class_method_signature": "DenseDoubleVector.DenseDoubleVector(final double[] data)", "testcase": false, "constructor": true}, {"identifier": "DenseDoubleVector", "parameters": "(final no.uib.cipr.matrix.Vector vector)", "modifiers": "public", "return": "", "signature": " DenseDoubleVector(final no.uib.cipr.matrix.Vector vector)", "full_signature": "public  DenseDoubleVector(final no.uib.cipr.matrix.Vector vector)", "class_method_signature": "DenseDoubleVector.DenseDoubleVector(final no.uib.cipr.matrix.Vector vector)", "testcase": false, "constructor": true}, {"identifier": "DenseDoubleVector", "parameters": "(final int size, final double value)", "modifiers": "public", "return": "", "signature": " DenseDoubleVector(final int size, final double value)", "full_signature": "public  DenseDoubleVector(final int size, final double value)", "class_method_signature": "DenseDoubleVector.DenseDoubleVector(final int size, final double value)", "testcase": false, "constructor": true}, {"identifier": "length", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int length()", "full_signature": "@Override public int length()", "class_method_signature": "DenseDoubleVector.length()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(final int index)", "modifiers": "@Override public", "return": "double", "signature": "double getValue(final int index)", "full_signature": "@Override public double getValue(final int index)", "class_method_signature": "DenseDoubleVector.getValue(final int index)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(final int index, final double value)", "modifiers": "@Override public", "return": "void", "signature": "void setValue(final int index, final double value)", "full_signature": "@Override public void setValue(final int index, final double value)", "class_method_signature": "DenseDoubleVector.setValue(final int index, final double value)", "testcase": false, "constructor": false}, {"identifier": "addConstant", "parameters": "(final double constant)", "modifiers": "@Override public", "return": "void", "signature": "void addConstant(final double constant)", "full_signature": "@Override public void addConstant(final double constant)", "class_method_signature": "DenseDoubleVector.addConstant(final double constant)", "testcase": false, "constructor": false}, {"identifier": "addVector", "parameters": "(final IVector vector)", "modifiers": "@Override public", "return": "void", "signature": "void addVector(final IVector vector)", "full_signature": "@Override public void addVector(final IVector vector)", "class_method_signature": "DenseDoubleVector.addVector(final IVector vector)", "testcase": false, "constructor": false}, {"identifier": "subtractConstant", "parameters": "(final double constant)", "modifiers": "@Override public", "return": "void", "signature": "void subtractConstant(final double constant)", "full_signature": "@Override public void subtractConstant(final double constant)", "class_method_signature": "DenseDoubleVector.subtractConstant(final double constant)", "testcase": false, "constructor": false}, {"identifier": "subtractVector", "parameters": "(final IVector vector)", "modifiers": "@Override public", "return": "void", "signature": "void subtractVector(final IVector vector)", "full_signature": "@Override public void subtractVector(final IVector vector)", "class_method_signature": "DenseDoubleVector.subtractVector(final IVector vector)", "testcase": false, "constructor": false}, {"identifier": "multiplyByVectorPairwise", "parameters": "(final IVector secondVector)", "modifiers": "@Override public", "return": "void", "signature": "void multiplyByVectorPairwise(final IVector secondVector)", "full_signature": "@Override public void multiplyByVectorPairwise(final IVector secondVector)", "class_method_signature": "DenseDoubleVector.multiplyByVectorPairwise(final IVector secondVector)", "testcase": false, "constructor": false}, {"identifier": "multiplyByConstant", "parameters": "(final double constant)", "modifiers": "@Override public", "return": "void", "signature": "void multiplyByConstant(final double constant)", "full_signature": "@Override public void multiplyByConstant(final double constant)", "class_method_signature": "DenseDoubleVector.multiplyByConstant(final double constant)", "testcase": false, "constructor": false}, {"identifier": "divideByVectorPairwise", "parameters": "(final IVector secondVector)", "modifiers": "@Override public", "return": "void", "signature": "void divideByVectorPairwise(final IVector secondVector)", "full_signature": "@Override public void divideByVectorPairwise(final IVector secondVector)", "class_method_signature": "DenseDoubleVector.divideByVectorPairwise(final IVector secondVector)", "testcase": false, "constructor": false}, {"identifier": "divideByConstant", "parameters": "(final double constant)", "modifiers": "@Override public", "return": "void", "signature": "void divideByConstant(final double constant)", "full_signature": "@Override public void divideByConstant(final double constant)", "class_method_signature": "DenseDoubleVector.divideByConstant(final double constant)", "testcase": false, "constructor": false}, {"identifier": "dotProduct", "parameters": "(final IVector vector)", "modifiers": "@Override public", "return": "double", "signature": "double dotProduct(final IVector vector)", "full_signature": "@Override public double dotProduct(final IVector vector)", "class_method_signature": "DenseDoubleVector.dotProduct(final IVector vector)", "testcase": false, "constructor": false}, {"identifier": "isSparse", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSparse()", "full_signature": "@Override public boolean isSparse()", "class_method_signature": "DenseDoubleVector.isSparse()", "testcase": false, "constructor": false}, {"identifier": "asArray", "parameters": "()", "modifiers": "@Override public", "return": "double[]", "signature": "double[] asArray()", "full_signature": "@Override public double[] asArray()", "class_method_signature": "DenseDoubleVector.asArray()", "testcase": false, "constructor": false}, {"identifier": "addVector", "parameters": "(final double[] vectorAsArray)", "modifiers": "@Override public", "return": "void", "signature": "void addVector(final double[] vectorAsArray)", "full_signature": "@Override public void addVector(final double[] vectorAsArray)", "class_method_signature": "DenseDoubleVector.addVector(final double[] vectorAsArray)", "testcase": false, "constructor": false}, {"identifier": "subtractVector", "parameters": "(final double[] vectorAsArray)", "modifiers": "@Override public", "return": "void", "signature": "void subtractVector(final double[] vectorAsArray)", "full_signature": "@Override public void subtractVector(final double[] vectorAsArray)", "class_method_signature": "DenseDoubleVector.subtractVector(final double[] vectorAsArray)", "testcase": false, "constructor": false}, {"identifier": "multiplyByVectorPairwise", "parameters": "(final double[] vectorAsArray)", "modifiers": "@Override public", "return": "void", "signature": "void multiplyByVectorPairwise(final double[] vectorAsArray)", "full_signature": "@Override public void multiplyByVectorPairwise(final double[] vectorAsArray)", "class_method_signature": "DenseDoubleVector.multiplyByVectorPairwise(final double[] vectorAsArray)", "testcase": false, "constructor": false}, {"identifier": "divideByVectorPairwise", "parameters": "(final double[] vectorAsArray)", "modifiers": "@Override public", "return": "void", "signature": "void divideByVectorPairwise(final double[] vectorAsArray)", "full_signature": "@Override public void divideByVectorPairwise(final double[] vectorAsArray)", "class_method_signature": "DenseDoubleVector.divideByVectorPairwise(final double[] vectorAsArray)", "testcase": false, "constructor": false}, {"identifier": "dotProduct", "parameters": "(final double[] vectorAsArray)", "modifiers": "@Override public", "return": "double", "signature": "double dotProduct(final double[] vectorAsArray)", "full_signature": "@Override public double dotProduct(final double[] vectorAsArray)", "class_method_signature": "DenseDoubleVector.dotProduct(final double[] vectorAsArray)", "testcase": false, "constructor": false}, {"identifier": "duplicate", "parameters": "()", "modifiers": "@Override public", "return": "IVector", "signature": "IVector duplicate()", "full_signature": "@Override public IVector duplicate()", "class_method_signature": "DenseDoubleVector.duplicate()", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void normalize()", "full_signature": "@Override public void normalize()", "class_method_signature": "DenseDoubleVector.normalize()", "testcase": false, "constructor": false}, {"identifier": "fillRandomly", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void fillRandomly()", "full_signature": "@Override public void fillRandomly()", "class_method_signature": "DenseDoubleVector.fillRandomly()", "testcase": false, "constructor": false}, {"identifier": "toDenseVector", "parameters": "()", "modifiers": "@Override public", "return": "DenseDoubleVector", "signature": "DenseDoubleVector toDenseVector()", "full_signature": "@Override public DenseDoubleVector toDenseVector()", "class_method_signature": "DenseDoubleVector.toDenseVector()", "testcase": false, "constructor": false}, {"identifier": "toSparseVector", "parameters": "()", "modifiers": "@Override public", "return": "SparseDoubleVector", "signature": "SparseDoubleVector toSparseVector()", "full_signature": "@Override public SparseDoubleVector toSparseVector()", "class_method_signature": "DenseDoubleVector.toSparseVector()", "testcase": false, "constructor": false}, {"identifier": "kroneckerProduct", "parameters": "(final double[] vectorAsArray)", "modifiers": "@Override public", "return": "IVector", "signature": "IVector kroneckerProduct(final double[] vectorAsArray)", "full_signature": "@Override public IVector kroneckerProduct(final double[] vectorAsArray)", "class_method_signature": "DenseDoubleVector.kroneckerProduct(final double[] vectorAsArray)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-math/src/main/java/ai/libs/jaicore/math/linearalgebra/DenseDoubleVector.java"}, "focal_method": {"identifier": "setValue", "parameters": "(final int index, final double value)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void setValue(final int index, final double value) {\n\t\tthis.internalVector.set(index, value);\n\t}", "signature": "void setValue(final int index, final double value)", "full_signature": "@Override public void setValue(final int index, final double value)", "class_method_signature": "DenseDoubleVector.setValue(final int index, final double value)", "testcase": false, "constructor": false, "invocations": ["set"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}