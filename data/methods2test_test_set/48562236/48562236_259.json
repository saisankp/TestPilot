{"test_class": {"identifier": "JdbcTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "base/lang/src/test/java/leap/lang/jdbc/JdbcTest.java"}, "test_case": {"identifier": "testExtractServerString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExtractServerString() {\n        /*\n            jdbc:microsoft:sqlserver://<server_name>:<port> -> port is optional\n            jdbc:sqlserver://<server_name>:<port>\n            jdbc:oracle:thin:@//<host>:<port>/ServiceName\n            jdbc:oracle:thin:@<host>:<port>:<SID>\n            jdbc:db2://<host>[:<port>]/<database_name>\n            jdbc:mysql://<host>:<port>/<database_name>\n            jdbc:postgresql://<host>:<port>/<database_name>\n            jdbc:h2:tcp://<server>[:<port>]/[<path>]<databaseName>\n            jdbc:h2:[file:][<path>]<databaseName>\n            jdbc:h2:<url>[;USER=<username>][;PASSWORD=<value>]\n\n         */\n        assertEquals(\"127.0.0.1\",      JDBC.tryExtractServerString(\"jdbc:microsoft:sqlserver://127.0.0.1\"));\n        assertEquals(\"127.0.0.1:1234\", JDBC.tryExtractServerString(\"jdbc:microsoft:sqlserver://127.0.0.1:1234\"));\n        assertEquals(\"127.0.0.1\",      JDBC.tryExtractServerString(\"jdbc:sqlserver://127.0.0.1\"));\n        assertEquals(\"127.0.0.1:1234\", JDBC.tryExtractServerString(\"jdbc:sqlserver://127.0.0.1:1234\"));\n        assertEquals(\"127.0.0.1:1234\", JDBC.tryExtractServerString(\"jdbc:oracle:thin:@127.0.0.1:1234:db\"));\n        assertEquals(\"127.0.0.1:1234\", JDBC.tryExtractServerString(\"jdbc:oracle:thin:@//127.0.0.1:1234/db\"));\n        assertEquals(\"127.0.0.1:1234\", JDBC.tryExtractServerString(\"jdbc:db2://127.0.0.1:1234/db\"));\n        assertEquals(\"127.0.0.1\",      JDBC.tryExtractServerString(\"jdbc:mysql://127.0.0.1\"));\n        assertEquals(\"127.0.0.1:1234\", JDBC.tryExtractServerString(\"jdbc:mysql://127.0.0.1:1234\"));\n        assertEquals(\"127.0.0.1:1234\", JDBC.tryExtractServerString(\"jdbc:mysql://127.0.0.1:1234?a=b&c=d\"));\n        assertEquals(\"127.0.0.1\",      JDBC.tryExtractServerString(\"jdbc:h2:tcp://127.0.0.1/path/db\"));\n        assertEquals(\"127.0.0.1\",      JDBC.tryExtractServerString(\"jdbc:h2:tcp://127.0.0.1/path/db;a=b;c=d\"));\n        assertEquals(\"127.0.0.1:1234\", JDBC.tryExtractServerString(\"jdbc:h2:tcp://127.0.0.1:1234/path/db\"));\n        assertEquals(\"file:a.db\",      JDBC.tryExtractServerString(\"jdbc:h2:file:a.db\"));\n\n        assertNull(JDBC.tryExtractServerString(\"jdbc:h2:./target/test\"));\n        assertNull(JDBC.tryExtractServerString(\"abcd\"));\n    }", "signature": "void testExtractServerString()", "full_signature": "@Test public void testExtractServerString()", "class_method_signature": "JdbcTest.testExtractServerString()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "tryExtractServerString", "assertEquals", "tryExtractServerString", "assertEquals", "tryExtractServerString", "assertEquals", "tryExtractServerString", "assertEquals", "tryExtractServerString", "assertEquals", "tryExtractServerString", "assertEquals", "tryExtractServerString", "assertEquals", "tryExtractServerString", "assertEquals", "tryExtractServerString", "assertEquals", "tryExtractServerString", "assertEquals", "tryExtractServerString", "assertEquals", "tryExtractServerString", "assertEquals", "tryExtractServerString", "assertEquals", "tryExtractServerString", "assertNull", "tryExtractServerString", "assertNull", "tryExtractServerString"]}, "focal_class": {"identifier": "JDBC", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log log = LogFactory.get(JDBC.class);", "modifier": "private static final", "type": "Log", "declarator": "log = LogFactory.get(JDBC.class)", "var_name": "log"}, {"original_string": "public static final char   PARAMETER_PLACEHOLDER_CHAR   = '?';", "modifier": "public static final", "type": "char", "declarator": "PARAMETER_PLACEHOLDER_CHAR   = '?'", "var_name": "PARAMETER_PLACEHOLDER_CHAR"}, {"original_string": "public static final String PARAMETER_PLACEHOLDER_STRING = \"?\";", "modifier": "public static final", "type": "String", "declarator": "PARAMETER_PLACEHOLDER_STRING = \"?\"", "var_name": "PARAMETER_PLACEHOLDER_STRING"}], "methods": [{"identifier": "closeConnection", "parameters": "(Connection connection)", "modifiers": "public static", "return": "void", "signature": "void closeConnection(Connection connection)", "full_signature": "public static void closeConnection(Connection connection)", "class_method_signature": "JDBC.closeConnection(Connection connection)", "testcase": false, "constructor": false}, {"identifier": "closeStatementOnly", "parameters": "(Statement statement)", "modifiers": "public static", "return": "void", "signature": "void closeStatementOnly(Statement statement)", "full_signature": "public static void closeStatementOnly(Statement statement)", "class_method_signature": "JDBC.closeStatementOnly(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "closeStatementAndConnection", "parameters": "(Statement statement)", "modifiers": "public static", "return": "void", "signature": "void closeStatementAndConnection(Statement statement)", "full_signature": "public static void closeStatementAndConnection(Statement statement)", "class_method_signature": "JDBC.closeStatementAndConnection(Statement statement)", "testcase": false, "constructor": false}, {"identifier": "closeResultSetOnly", "parameters": "(ResultSet rs)", "modifiers": "public static", "return": "void", "signature": "void closeResultSetOnly(ResultSet rs)", "full_signature": "public static void closeResultSetOnly(ResultSet rs)", "class_method_signature": "JDBC.closeResultSetOnly(ResultSet rs)", "testcase": false, "constructor": false}, {"identifier": "closeResultSetAndConnection", "parameters": "(ResultSet rs)", "modifiers": "public static", "return": "void", "signature": "void closeResultSetAndConnection(ResultSet rs)", "full_signature": "public static void closeResultSetAndConnection(ResultSet rs)", "class_method_signature": "JDBC.closeResultSetAndConnection(ResultSet rs)", "testcase": false, "constructor": false}, {"identifier": "closeResultSetAndStatement", "parameters": "(ResultSet rs)", "modifiers": "public static", "return": "void", "signature": "void closeResultSetAndStatement(ResultSet rs)", "full_signature": "public static void closeResultSetAndStatement(ResultSet rs)", "class_method_signature": "JDBC.closeResultSetAndStatement(ResultSet rs)", "testcase": false, "constructor": false}, {"identifier": "tryExtractServerString", "parameters": "(String url)", "modifiers": "public static", "return": "String", "signature": "String tryExtractServerString(String url)", "full_signature": "public static String tryExtractServerString(String url)", "class_method_signature": "JDBC.tryExtractServerString(String url)", "testcase": false, "constructor": false}, {"identifier": "JDBC", "parameters": "()", "modifiers": "protected", "return": "", "signature": " JDBC()", "full_signature": "protected  JDBC()", "class_method_signature": "JDBC.JDBC()", "testcase": false, "constructor": true}], "file": "base/lang/src/main/java/leap/lang/jdbc/JDBC.java"}, "focal_method": {"identifier": "tryExtractServerString", "parameters": "(String url)", "modifiers": "public static", "return": "String", "body": "public static String tryExtractServerString(String url) {\n        /*\n            jdbc:microsoft:sqlserver://<server_name>:<port> -> port is optional\n            jdbc:sqlserver://<server_name>:<port>\n            jdbc:oracle:thin:@//<host>:<port>/ServiceName\n            jdbc:oracle:thin:@<host>:<port>:<SID>\n            jdbc:db2://<host>[:<port>]/<database_name>\n            jdbc:mysql://<host>:<port>/<database_name>\n            jdbc:postgresql://<host>:<port>/<database_name>\n            jdbc:h2:tcp://<server>[:<port>]/[<path>]<databaseName>\n            jdbc:h2:[file:][<path>]<databaseName>\n            jdbc:h2:<url>[;USER=<username>][;PASSWORD=<value>]\n\n         */\n        if(!Strings.startsWith(url, \"jdbc:\", true)) {\n            return null;\n        }\n\n        url = Urls.removeQueryString(url);\n\n        //removes jdbc:dbtype:\n        int index = url.indexOf(':',5);\n        if(index < 0) {\n            //unknown url\n            return null;\n        }else{\n            url = url.substring(index+1);\n        }\n\n        //remove parameters like jdbc url : jdbc:h2:<url>[;USER=<username>][;PASSWORD=<value>]\n        index = url.indexOf(';');\n        if(index > 0) {\n            url = url.substring(0, index);\n        }\n\n        index = url.indexOf(\"//\");\n        if(index >= 0) {\n            url = url.substring(index + 2);\n        }else {\n            index = url.indexOf('@');\n            if(index >= 0) {\n                url = url.substring(index + 1);\n            }\n        }\n\n        index = url.indexOf('/');\n        if(index > 0) {\n            url = url.substring(0, index);\n        }\n\n        String[] parts = Strings.split(url, ':');\n        if(parts.length >= 2) {\n            return parts[0] + \":\" + parts[1];\n        }else{\n            //hostname or ip address only\n            if(url.length() <= 5){\n                return null;\n            }\n            return url;\n        }\n    }", "signature": "String tryExtractServerString(String url)", "full_signature": "public static String tryExtractServerString(String url)", "class_method_signature": "JDBC.tryExtractServerString(String url)", "testcase": false, "constructor": false, "invocations": ["startsWith", "removeQueryString", "indexOf", "substring", "indexOf", "substring", "indexOf", "substring", "indexOf", "substring", "indexOf", "substring", "split", "length"]}, "repository": {"repo_id": 48562236, "url": "https://github.com/leapframework/framework", "stars": 42, "created": "12/25/2015 1:54:52 AM +00:00", "updates": "2020-01-20T03:04:15+00:00", "fork": "False", "license": "licensed"}}