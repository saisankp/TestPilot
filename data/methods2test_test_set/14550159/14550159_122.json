{"test_class": {"identifier": "UriComponentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/uri/UriComponentTest.java"}, "test_case": {"identifier": "parsesAndDecodeQueryString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parsesAndDecodeQueryString() {\n        String queryString = \"q1=to%20be%20or%20not%20to%20be&q2=foo&q2=%D0%9F%D1%80%D0%B8%D0%B2%D1%96%D1%82\";\n        MultivaluedMapImpl expected = new MultivaluedMapImpl();\n        expected.add(\"q1\", \"to be or not to be\");\n        expected.addAll(\"q2\", \"foo\", \"\\u041f\\u0440\\u0438\\u0432\\u0456\\u0442\");\n\n        MultivaluedMap<String, String> result = parseQueryString(queryString, true);\n        assertEquals(expected, result);\n    }", "signature": "void parsesAndDecodeQueryString()", "full_signature": "@Test public void parsesAndDecodeQueryString()", "class_method_signature": "UriComponentTest.parsesAndDecodeQueryString()", "testcase": true, "constructor": false, "invocations": ["add", "addAll", "parseQueryString", "assertEquals"]}, "focal_class": {"identifier": "UriComponent", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int SCHEME = 0;", "modifier": "public static final", "type": "int", "declarator": "SCHEME = 0", "var_name": "SCHEME"}, {"original_string": "public static final int USER_INFO = 1;", "modifier": "public static final", "type": "int", "declarator": "USER_INFO = 1", "var_name": "USER_INFO"}, {"original_string": "public static final int HOST = 2;", "modifier": "public static final", "type": "int", "declarator": "HOST = 2", "var_name": "HOST"}, {"original_string": "public static final int PORT = 3;", "modifier": "public static final", "type": "int", "declarator": "PORT = 3", "var_name": "PORT"}, {"original_string": "public static final int PATH_SEGMENT = 4;", "modifier": "public static final", "type": "int", "declarator": "PATH_SEGMENT = 4", "var_name": "PATH_SEGMENT"}, {"original_string": "public static final int PATH = 5;", "modifier": "public static final", "type": "int", "declarator": "PATH = 5", "var_name": "PATH"}, {"original_string": "public static final int QUERY = 6;", "modifier": "public static final", "type": "int", "declarator": "QUERY = 6", "var_name": "QUERY"}, {"original_string": "public static final int FRAGMENT = 7;", "modifier": "public static final", "type": "int", "declarator": "FRAGMENT = 7", "var_name": "FRAGMENT"}, {"original_string": "public static final int SSP = 8;", "modifier": "public static final", "type": "int", "declarator": "SSP = 8", "var_name": "SSP"}, {"original_string": "public static final int MATRIX_PARAM = 9;", "modifier": "public static final", "type": "int", "declarator": "MATRIX_PARAM = 9", "var_name": "MATRIX_PARAM"}, {"original_string": "public static final int QUERY_STRING = 10;", "modifier": "public static final", "type": "int", "declarator": "QUERY_STRING = 10", "var_name": "QUERY_STRING"}, {"original_string": "public static final String PERCENT = \"%25\";", "modifier": "public static final", "type": "String", "declarator": "PERCENT = \"%25\"", "var_name": "PERCENT"}, {"original_string": "private static final char[] HEX_DIGITS = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};", "modifier": "private static final", "type": "char[]", "declarator": "HEX_DIGITS = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}", "var_name": "HEX_DIGITS"}, {"original_string": "private static final char[][][] ENCODED = new char[11][128][3];", "modifier": "private static final", "type": "char[][][]", "declarator": "ENCODED = new char[11][128][3]", "var_name": "ENCODED"}, {"original_string": "private static final int[][] LEGAL = new int[11][128];", "modifier": "private static final", "type": "int[][]", "declarator": "LEGAL = new int[11][128]", "var_name": "LEGAL"}, {"original_string": "private static final Charset UTF8 = Charset.forName(\"UTF-8\");", "modifier": "private static final", "type": "Charset", "declarator": "UTF8 = Charset.forName(\"UTF-8\")", "var_name": "UTF8"}], "methods": [{"identifier": "fillTable", "parameters": "(int[] array, char begin, char end)", "modifiers": "private static", "return": "void", "signature": "void fillTable(int[] array, char begin, char end)", "full_signature": "private static void fillTable(int[] array, char begin, char end)", "class_method_signature": "UriComponent.fillTable(int[] array, char begin, char end)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(int[] src, int[] dest)", "modifiers": "private static", "return": "void", "signature": "void set(int[] src, int[] dest)", "full_signature": "private static void set(int[] src, int[] dest)", "class_method_signature": "UriComponent.set(int[] src, int[] dest)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(URI uri)", "modifiers": "public static", "return": "URI", "signature": "URI normalize(URI uri)", "full_signature": "public static URI normalize(URI uri)", "class_method_signature": "UriComponent.normalize(URI uri)", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "(String path)", "modifiers": "private static", "return": "String", "signature": "String normalize(String path)", "full_signature": "private static String normalize(String path)", "class_method_signature": "UriComponent.normalize(String path)", "testcase": false, "constructor": false}, {"identifier": "isCompletePathSeg", "parameters": "(String segment, String path)", "modifiers": "private static", "return": "boolean", "signature": "boolean isCompletePathSeg(String segment, String path)", "full_signature": "private static boolean isCompletePathSeg(String segment, String path)", "class_method_signature": "UriComponent.isCompletePathSeg(String segment, String path)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(String str, int component, boolean containsUriParams)", "modifiers": "public static", "return": "String", "signature": "String encode(String str, int component, boolean containsUriParams)", "full_signature": "public static String encode(String str, int component, boolean containsUriParams)", "class_method_signature": "UriComponent.encode(String str, int component, boolean containsUriParams)", "testcase": false, "constructor": false}, {"identifier": "validateUriComponent", "parameters": "(String str, int component, boolean containsUriParams)", "modifiers": "public static", "return": "String", "signature": "String validateUriComponent(String str, int component, boolean containsUriParams)", "full_signature": "public static String validateUriComponent(String str, int component, boolean containsUriParams)", "class_method_signature": "UriComponent.validateUriComponent(String str, int component, boolean containsUriParams)", "testcase": false, "constructor": false}, {"identifier": "isUriComponentContainsValidCharacters", "parameters": "(int component, String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isUriComponentContainsValidCharacters(int component, String str)", "full_signature": "public static boolean isUriComponentContainsValidCharacters(int component, String str)", "class_method_signature": "UriComponent.isUriComponentContainsValidCharacters(int component, String str)", "testcase": false, "constructor": false}, {"identifier": "recognizeEncode", "parameters": "(String str, int component, boolean containsUriParams)", "modifiers": "public static", "return": "String", "signature": "String recognizeEncode(String str, int component, boolean containsUriParams)", "full_signature": "public static String recognizeEncode(String str, int component, boolean containsUriParams)", "class_method_signature": "UriComponent.recognizeEncode(String str, int component, boolean containsUriParams)", "testcase": false, "constructor": false}, {"identifier": "_encode", "parameters": "(String str, int component, boolean containsUriParams, boolean recognizeEncoded)", "modifiers": "private static", "return": "String", "signature": "String _encode(String str, int component, boolean containsUriParams, boolean recognizeEncoded)", "full_signature": "private static String _encode(String str, int component, boolean containsUriParams, boolean recognizeEncoded)", "class_method_signature": "UriComponent._encode(String str, int component, boolean containsUriParams, boolean recognizeEncoded)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(String chars, int begin, int end, char stopChar)", "modifiers": "private static", "return": "int", "signature": "int find(String chars, int begin, int end, char stopChar)", "full_signature": "private static int find(String chars, int begin, int end, char stopChar)", "class_method_signature": "UriComponent.find(String chars, int begin, int end, char stopChar)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String str, int component)", "modifiers": "public static", "return": "String", "signature": "String decode(String str, int component)", "full_signature": "public static String decode(String str, int component)", "class_method_signature": "UriComponent.decode(String str, int component)", "testcase": false, "constructor": false}, {"identifier": "needEncode", "parameters": "(char ch, int component)", "modifiers": "private static", "return": "boolean", "signature": "boolean needEncode(char ch, int component)", "full_signature": "private static boolean needEncode(char ch, int component)", "class_method_signature": "UriComponent.needEncode(char ch, int component)", "testcase": false, "constructor": false}, {"identifier": "addUTF8Encoded", "parameters": "(char c, StringBuilder sb)", "modifiers": "private static", "return": "void", "signature": "void addUTF8Encoded(char c, StringBuilder sb)", "full_signature": "private static void addUTF8Encoded(char c, StringBuilder sb)", "class_method_signature": "UriComponent.addUTF8Encoded(char c, StringBuilder sb)", "testcase": false, "constructor": false}, {"identifier": "percentDecode", "parameters": "(String str, int p, ByteArrayOutputStream out)", "modifiers": "private static", "return": "int", "signature": "int percentDecode(String str, int p, ByteArrayOutputStream out)", "full_signature": "private static int percentDecode(String str, int p, ByteArrayOutputStream out)", "class_method_signature": "UriComponent.percentDecode(String str, int p, ByteArrayOutputStream out)", "testcase": false, "constructor": false}, {"identifier": "checkHexCharacters", "parameters": "(String s, int p)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkHexCharacters(String s, int p)", "full_signature": "public static boolean checkHexCharacters(String s, int p)", "class_method_signature": "UriComponent.checkHexCharacters(String s, int p)", "testcase": false, "constructor": false}, {"identifier": "getHexCharacter", "parameters": "(String str, int p)", "modifiers": "private static", "return": "char", "signature": "char getHexCharacter(String str, int p)", "full_signature": "private static char getHexCharacter(String str, int p)", "class_method_signature": "UriComponent.getHexCharacter(String str, int p)", "testcase": false, "constructor": false}, {"identifier": "parsePathSegments", "parameters": "(String path, boolean decode)", "modifiers": "public static", "return": "List<PathSegment>", "signature": "List<PathSegment> parsePathSegments(String path, boolean decode)", "full_signature": "public static List<PathSegment> parsePathSegments(String path, boolean decode)", "class_method_signature": "UriComponent.parsePathSegments(String path, boolean decode)", "testcase": false, "constructor": false}, {"identifier": "parseQueryString", "parameters": "(String rawQuery, boolean decode)", "modifiers": "public static", "return": "MultivaluedMap<String, String>", "signature": "MultivaluedMap<String, String> parseQueryString(String rawQuery, boolean decode)", "full_signature": "public static MultivaluedMap<String, String> parseQueryString(String rawQuery, boolean decode)", "class_method_signature": "UriComponent.parseQueryString(String rawQuery, boolean decode)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(URI baseUri, URI resolvingUri)", "modifiers": "public static", "return": "URI", "signature": "URI resolve(URI baseUri, URI resolvingUri)", "full_signature": "public static URI resolve(URI baseUri, URI resolvingUri)", "class_method_signature": "UriComponent.resolve(URI baseUri, URI resolvingUri)", "testcase": false, "constructor": false}, {"identifier": "UriComponent", "parameters": "()", "modifiers": "private", "return": "", "signature": " UriComponent()", "full_signature": "private  UriComponent()", "class_method_signature": "UriComponent.UriComponent()", "testcase": false, "constructor": true}], "file": "everrest-core/src/main/java/org/everrest/core/impl/uri/UriComponent.java"}, "focal_method": {"identifier": "parseQueryString", "parameters": "(String rawQuery, boolean decode)", "modifiers": "public static", "return": "MultivaluedMap<String, String>", "body": "public static MultivaluedMap<String, String> parseQueryString(String rawQuery, boolean decode) {\n        MultivaluedMap<String, String> result = new MultivaluedMapImpl();\n        if (!(rawQuery == null || rawQuery.isEmpty())) {\n            int p = 0;\n            int n = 0;\n            while (n < rawQuery.length()) {\n                n = rawQuery.indexOf('&', p);\n                if (n < 0) {\n                    n = rawQuery.length();\n                }\n\n                String pair = rawQuery.substring(p, n);\n                if (!pair.isEmpty()) {\n                    String name;\n                    String value;\n                    int eq = pair.indexOf('=');\n                    if (eq < 0) {\n                        // no value\n                        name = pair;\n                        value = \"\";\n                    } else {\n                        name = pair.substring(0, eq);\n                        value = pair.substring(eq + 1);\n                    }\n\n                    result.add(decode ? decode(name, QUERY) : name, decode ? decode(value, QUERY) : value);\n                }\n                p = n + 1;\n            }\n        }\n        return result;\n    }", "signature": "MultivaluedMap<String, String> parseQueryString(String rawQuery, boolean decode)", "full_signature": "public static MultivaluedMap<String, String> parseQueryString(String rawQuery, boolean decode)", "class_method_signature": "UriComponent.parseQueryString(String rawQuery, boolean decode)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "length", "indexOf", "length", "substring", "isEmpty", "indexOf", "substring", "substring", "add", "decode", "decode"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}