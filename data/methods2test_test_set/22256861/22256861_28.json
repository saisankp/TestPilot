{"test_class": {"identifier": "RayleighAuxTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RayleighAux rayleighAux;", "modifier": "private", "type": "RayleighAux", "declarator": "rayleighAux", "var_name": "rayleighAux"}, {"original_string": "private double[] angleOne = {1, 2, 3};", "modifier": "private", "type": "double[]", "declarator": "angleOne = {1, 2, 3}", "var_name": "angleOne"}, {"original_string": "private double[] angleTwo = {4, 5, 6};", "modifier": "private", "type": "double[]", "declarator": "angleTwo = {4, 5, 6}", "var_name": "angleTwo"}], "file": "s3tbx-olci-radiometry/src/test/java/org/esa/s3tbx/olci/radiometry/rayleigh/RayleighAuxTest.java"}, "test_case": {"identifier": "testAziDiff", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAziDiff() throws Exception {\n        assertArrayEquals(new double[]{0.0, 0.0, 0.0}, rayleighAux.getAziDifferent(), 1e-8);\n    }", "signature": "void testAziDiff()", "full_signature": "@Test public void testAziDiff()", "class_method_signature": "RayleighAuxTest.testAziDiff()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "getAziDifferent"]}, "focal_class": {"identifier": "RayleighAux", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String GETASSE_30 = \"GETASSE30\";", "modifier": "private static final", "type": "String", "declarator": "GETASSE_30 = \"GETASSE30\"", "var_name": "GETASSE_30"}, {"original_string": "private static final String COEFF_MATRIX_TXT = \"coeffMatrix.txt\";", "modifier": "private static final", "type": "String", "declarator": "COEFF_MATRIX_TXT = \"coeffMatrix.txt\"", "var_name": "COEFF_MATRIX_TXT"}, {"original_string": "private static final String TAU_RAY = \"tau_ray\";", "modifier": "private static final", "type": "String", "declarator": "TAU_RAY = \"tau_ray\"", "var_name": "TAU_RAY"}, {"original_string": "private static final String THETA = \"theta\";", "modifier": "private static final", "type": "String", "declarator": "THETA = \"theta\"", "var_name": "THETA"}, {"original_string": "private static final String RAY_COEFF_MATRIX = \"ray_coeff_matrix\";", "modifier": "private static final", "type": "String", "declarator": "RAY_COEFF_MATRIX = \"ray_coeff_matrix\"", "var_name": "RAY_COEFF_MATRIX"}, {"original_string": "private static final String RAY_ALBEDO_LUT = \"ray_albedo_lut\";", "modifier": "private static final", "type": "String", "declarator": "RAY_ALBEDO_LUT = \"ray_albedo_lut\"", "var_name": "RAY_ALBEDO_LUT"}, {"original_string": "private static ElevationModel elevationModel;", "modifier": "private static", "type": "ElevationModel", "declarator": "elevationModel", "var_name": "elevationModel"}, {"original_string": "private static double[] thetas;", "modifier": "private static", "type": "double[]", "declarator": "thetas", "var_name": "thetas"}, {"original_string": "private static double[][][] rayCoeffMatrixA;", "modifier": "private static", "type": "double[][][]", "declarator": "rayCoeffMatrixA", "var_name": "rayCoeffMatrixA"}, {"original_string": "private static double[][][] rayCoeffMatrixB;", "modifier": "private static", "type": "double[][][]", "declarator": "rayCoeffMatrixB", "var_name": "rayCoeffMatrixB"}, {"original_string": "private static double[][][] rayCoeffMatrixC;", "modifier": "private static", "type": "double[][][]", "declarator": "rayCoeffMatrixC", "var_name": "rayCoeffMatrixC"}, {"original_string": "private static double[][][] rayCoeffMatrixD;", "modifier": "private static", "type": "double[][][]", "declarator": "rayCoeffMatrixD", "var_name": "rayCoeffMatrixD"}, {"original_string": "private double[] sunZenithAngles;", "modifier": "private", "type": "double[]", "declarator": "sunZenithAngles", "var_name": "sunZenithAngles"}, {"original_string": "private double[] viewZenithAngles;", "modifier": "private", "type": "double[]", "declarator": "viewZenithAngles", "var_name": "viewZenithAngles"}, {"original_string": "private double[] sunAzimuthAngles;", "modifier": "private", "type": "double[]", "declarator": "sunAzimuthAngles", "var_name": "sunAzimuthAngles"}, {"original_string": "private double[] viewAzimuthAngles;", "modifier": "private", "type": "double[]", "declarator": "viewAzimuthAngles", "var_name": "viewAzimuthAngles"}, {"original_string": "private double[] seaLevels;", "modifier": "private", "type": "double[]", "declarator": "seaLevels", "var_name": "seaLevels"}, {"original_string": "private double[] totalOzones;", "modifier": "private", "type": "double[]", "declarator": "totalOzones", "var_name": "totalOzones"}, {"original_string": "private double[] latitudes;", "modifier": "private", "type": "double[]", "declarator": "latitudes", "var_name": "latitudes"}, {"original_string": "private double[] solarFluxs;", "modifier": "private", "type": "double[]", "declarator": "solarFluxs", "var_name": "solarFluxs"}, {"original_string": "private double[] sourceSampleRad;", "modifier": "private", "type": "double[]", "declarator": "sourceSampleRad", "var_name": "sourceSampleRad"}, {"original_string": "private float waveLength;", "modifier": "private", "type": "float", "declarator": "waveLength", "var_name": "waveLength"}, {"original_string": "private double[] longitudes;", "modifier": "private", "type": "double[]", "declarator": "longitudes", "var_name": "longitudes"}, {"original_string": "private double[] altitudes;", "modifier": "private", "type": "double[]", "declarator": "altitudes", "var_name": "altitudes"}, {"original_string": "private Map<Integer, double[]> fourierPoly;", "modifier": "private", "type": "Map<Integer, double[]>", "declarator": "fourierPoly", "var_name": "fourierPoly"}, {"original_string": "private Map<Integer, List<double[]>> interpolateMap;", "modifier": "private", "type": "Map<Integer, List<double[]>>", "declarator": "interpolateMap", "var_name": "interpolateMap"}, {"original_string": "private double[] viewAzimuthAnglesRad;", "modifier": "private", "type": "double[]", "declarator": "viewAzimuthAnglesRad", "var_name": "viewAzimuthAnglesRad"}, {"original_string": "private double[] sunZenithAnglesRad;", "modifier": "private", "type": "double[]", "declarator": "sunZenithAnglesRad", "var_name": "sunZenithAnglesRad"}, {"original_string": "private double[] sunAzimuthAnglesRad;", "modifier": "private", "type": "double[]", "declarator": "sunAzimuthAnglesRad", "var_name": "sunAzimuthAnglesRad"}, {"original_string": "private double[] viewZenithAnglesRad;", "modifier": "private", "type": "double[]", "declarator": "viewZenithAnglesRad", "var_name": "viewZenithAnglesRad"}, {"original_string": "private double[] aziDiff;", "modifier": "private", "type": "double[]", "declarator": "aziDiff", "var_name": "aziDiff"}, {"original_string": "private double[] cosSZARads;", "modifier": "private", "type": "double[]", "declarator": "cosSZARads", "var_name": "cosSZARads"}, {"original_string": "private double[] sinOZARads;", "modifier": "private", "type": "double[]", "declarator": "sinOZARads", "var_name": "sinOZARads"}, {"original_string": "private double[] sinSZARads;", "modifier": "private", "type": "double[]", "declarator": "sinSZARads", "var_name": "sinSZARads"}, {"original_string": "private double[] cosOZARads;", "modifier": "private", "type": "double[]", "declarator": "cosOZARads", "var_name": "cosOZARads"}, {"original_string": "private double[] airMass;", "modifier": "private", "type": "double[]", "declarator": "airMass", "var_name": "airMass"}, {"original_string": "static PolynomialSplineFunction linearInterpolate;", "modifier": "static", "type": "PolynomialSplineFunction", "declarator": "linearInterpolate", "var_name": "linearInterpolate"}, {"original_string": "static double[] tau_ray;", "modifier": "static", "type": "double[]", "declarator": "tau_ray", "var_name": "tau_ray"}], "methods": [{"identifier": "parseJSON1DimArray", "parameters": "(JSONObject parse, String ray_coeff_matrix)", "modifiers": "public static", "return": "double[]", "signature": "double[] parseJSON1DimArray(JSONObject parse, String ray_coeff_matrix)", "full_signature": "public static double[] parseJSON1DimArray(JSONObject parse, String ray_coeff_matrix)", "class_method_signature": "RayleighAux.parseJSON1DimArray(JSONObject parse, String ray_coeff_matrix)", "testcase": false, "constructor": false}, {"identifier": "initDefaultAuxiliary", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void initDefaultAuxiliary()", "full_signature": "public static void initDefaultAuxiliary()", "class_method_signature": "RayleighAux.initDefaultAuxiliary()", "testcase": false, "constructor": false}, {"identifier": "setSolarFluxs", "parameters": "(double[] solarFluxs)", "modifiers": "public", "return": "void", "signature": "void setSolarFluxs(double[] solarFluxs)", "full_signature": "public void setSolarFluxs(double[] solarFluxs)", "class_method_signature": "RayleighAux.setSolarFluxs(double[] solarFluxs)", "testcase": false, "constructor": false}, {"identifier": "setAltitudes", "parameters": "(Tile altitude)", "modifiers": "public", "return": "void", "signature": "void setAltitudes(Tile altitude)", "full_signature": "public void setAltitudes(Tile altitude)", "class_method_signature": "RayleighAux.setAltitudes(Tile altitude)", "testcase": false, "constructor": false}, {"identifier": "getTaur", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getTaur()", "full_signature": "public double[] getTaur()", "class_method_signature": "RayleighAux.getTaur()", "testcase": false, "constructor": false}, {"identifier": "getAltitudes", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getAltitudes()", "full_signature": "public double[] getAltitudes()", "class_method_signature": "RayleighAux.getAltitudes()", "testcase": false, "constructor": false}, {"identifier": "setAltitudes", "parameters": "(double... alt)", "modifiers": "public", "return": "void", "signature": "void setAltitudes(double... alt)", "full_signature": "public void setAltitudes(double... alt)", "class_method_signature": "RayleighAux.setAltitudes(double... alt)", "testcase": false, "constructor": false}, {"identifier": "getInterpolation", "parameters": "()", "modifiers": "public", "return": "Map<Integer, List<double[]>>", "signature": "Map<Integer, List<double[]>> getInterpolation()", "full_signature": "public Map<Integer, List<double[]>> getInterpolation()", "class_method_signature": "RayleighAux.getInterpolation()", "testcase": false, "constructor": false}, {"identifier": "setInterpolation", "parameters": "(HashMap<Integer, List<double[]>> integerHashMap)", "modifiers": "", "return": "void", "signature": "void setInterpolation(HashMap<Integer, List<double[]>> integerHashMap)", "full_signature": " void setInterpolation(HashMap<Integer, List<double[]>> integerHashMap)", "class_method_signature": "RayleighAux.setInterpolation(HashMap<Integer, List<double[]>> integerHashMap)", "testcase": false, "constructor": false}, {"identifier": "getSpikeInterpolation", "parameters": "()", "modifiers": "private", "return": "Map<Integer, List<double[]>>", "signature": "Map<Integer, List<double[]>> getSpikeInterpolation()", "full_signature": "private Map<Integer, List<double[]>> getSpikeInterpolation()", "class_method_signature": "RayleighAux.getSpikeInterpolation()", "testcase": false, "constructor": false}, {"identifier": "getFourier", "parameters": "()", "modifiers": "", "return": "Map<Integer, double[]>", "signature": "Map<Integer, double[]> getFourier()", "full_signature": " Map<Integer, double[]> getFourier()", "class_method_signature": "RayleighAux.getFourier()", "testcase": false, "constructor": false}, {"identifier": "setWavelength", "parameters": "(float waveLength)", "modifiers": "public", "return": "void", "signature": "void setWavelength(float waveLength)", "full_signature": "public void setWavelength(float waveLength)", "class_method_signature": "RayleighAux.setWavelength(float waveLength)", "testcase": false, "constructor": false}, {"identifier": "getWaveLength", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getWaveLength()", "full_signature": "public double getWaveLength()", "class_method_signature": "RayleighAux.getWaveLength()", "testcase": false, "constructor": false}, {"identifier": "getSunAzimuthAnglesRad", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getSunAzimuthAnglesRad()", "full_signature": "public double[] getSunAzimuthAnglesRad()", "class_method_signature": "RayleighAux.getSunAzimuthAnglesRad()", "testcase": false, "constructor": false}, {"identifier": "setSunAzimuthAnglesRad", "parameters": "(double[] sunAzimuthAngles)", "modifiers": "public", "return": "void", "signature": "void setSunAzimuthAnglesRad(double[] sunAzimuthAngles)", "full_signature": "public void setSunAzimuthAnglesRad(double[] sunAzimuthAngles)", "class_method_signature": "RayleighAux.setSunAzimuthAnglesRad(double[] sunAzimuthAngles)", "testcase": false, "constructor": false}, {"identifier": "getViewAzimuthAnglesRad", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getViewAzimuthAnglesRad()", "full_signature": "public double[] getViewAzimuthAnglesRad()", "class_method_signature": "RayleighAux.getViewAzimuthAnglesRad()", "testcase": false, "constructor": false}, {"identifier": "setViewAzimuthAnglesRad", "parameters": "(double[] viewAzimuthAngles)", "modifiers": "public", "return": "void", "signature": "void setViewAzimuthAnglesRad(double[] viewAzimuthAngles)", "full_signature": "public void setViewAzimuthAnglesRad(double[] viewAzimuthAngles)", "class_method_signature": "RayleighAux.setViewAzimuthAnglesRad(double[] viewAzimuthAngles)", "testcase": false, "constructor": false}, {"identifier": "getSunZenithAnglesRad", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getSunZenithAnglesRad()", "full_signature": "public double[] getSunZenithAnglesRad()", "class_method_signature": "RayleighAux.getSunZenithAnglesRad()", "testcase": false, "constructor": false}, {"identifier": "setSunZenithAnglesRad", "parameters": "(double[] sunZenithAngles)", "modifiers": "public", "return": "void", "signature": "void setSunZenithAnglesRad(double[] sunZenithAngles)", "full_signature": "public void setSunZenithAnglesRad(double[] sunZenithAngles)", "class_method_signature": "RayleighAux.setSunZenithAnglesRad(double[] sunZenithAngles)", "testcase": false, "constructor": false}, {"identifier": "getViewZenithAnglesRad", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getViewZenithAnglesRad()", "full_signature": "public double[] getViewZenithAnglesRad()", "class_method_signature": "RayleighAux.getViewZenithAnglesRad()", "testcase": false, "constructor": false}, {"identifier": "setViewZenithAnglesRad", "parameters": "(double[] viewZenithAngles)", "modifiers": "public", "return": "void", "signature": "void setViewZenithAnglesRad(double[] viewZenithAngles)", "full_signature": "public void setViewZenithAnglesRad(double[] viewZenithAngles)", "class_method_signature": "RayleighAux.setViewZenithAnglesRad(double[] viewZenithAngles)", "testcase": false, "constructor": false}, {"identifier": "getAirMass", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getAirMass()", "full_signature": "public double[] getAirMass()", "class_method_signature": "RayleighAux.getAirMass()", "testcase": false, "constructor": false}, {"identifier": "getAziDifferent", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getAziDifferent()", "full_signature": "public double[] getAziDifferent()", "class_method_signature": "RayleighAux.getAziDifferent()", "testcase": false, "constructor": false}, {"identifier": "getCosSZARads", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getCosSZARads()", "full_signature": "public double[] getCosSZARads()", "class_method_signature": "RayleighAux.getCosSZARads()", "testcase": false, "constructor": false}, {"identifier": "setCosSZARads", "parameters": "(double[] sunZenithAnglesRad)", "modifiers": "public", "return": "void", "signature": "void setCosSZARads(double[] sunZenithAnglesRad)", "full_signature": "public void setCosSZARads(double[] sunZenithAnglesRad)", "class_method_signature": "RayleighAux.setCosSZARads(double[] sunZenithAnglesRad)", "testcase": false, "constructor": false}, {"identifier": "getCosOZARads", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getCosOZARads()", "full_signature": "public double[] getCosOZARads()", "class_method_signature": "RayleighAux.getCosOZARads()", "testcase": false, "constructor": false}, {"identifier": "setCosOZARads", "parameters": "(double[] zenithAnglesRad)", "modifiers": "public", "return": "void", "signature": "void setCosOZARads(double[] zenithAnglesRad)", "full_signature": "public void setCosOZARads(double[] zenithAnglesRad)", "class_method_signature": "RayleighAux.setCosOZARads(double[] zenithAnglesRad)", "testcase": false, "constructor": false}, {"identifier": "getSinSZARads", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getSinSZARads()", "full_signature": "public double[] getSinSZARads()", "class_method_signature": "RayleighAux.getSinSZARads()", "testcase": false, "constructor": false}, {"identifier": "setSinSZARads", "parameters": "(double[] sunZenithAnglesRad)", "modifiers": "public", "return": "void", "signature": "void setSinSZARads(double[] sunZenithAnglesRad)", "full_signature": "public void setSinSZARads(double[] sunZenithAnglesRad)", "class_method_signature": "RayleighAux.setSinSZARads(double[] sunZenithAnglesRad)", "testcase": false, "constructor": false}, {"identifier": "getSinOZARads", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getSinOZARads()", "full_signature": "public double[] getSinOZARads()", "class_method_signature": "RayleighAux.getSinOZARads()", "testcase": false, "constructor": false}, {"identifier": "setSinOZARads", "parameters": "(double[] zenithAnglesRad)", "modifiers": "public", "return": "void", "signature": "void setSinOZARads(double[] zenithAnglesRad)", "full_signature": "public void setSinOZARads(double[] zenithAnglesRad)", "class_method_signature": "RayleighAux.setSinOZARads(double[] zenithAnglesRad)", "testcase": false, "constructor": false}, {"identifier": "getSunZenithAngles", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getSunZenithAngles()", "full_signature": "public double[] getSunZenithAngles()", "class_method_signature": "RayleighAux.getSunZenithAngles()", "testcase": false, "constructor": false}, {"identifier": "setSunZenithAngles", "parameters": "(Tile sourceTile)", "modifiers": "public", "return": "void", "signature": "void setSunZenithAngles(Tile sourceTile)", "full_signature": "public void setSunZenithAngles(Tile sourceTile)", "class_method_signature": "RayleighAux.setSunZenithAngles(Tile sourceTile)", "testcase": false, "constructor": false}, {"identifier": "setSunZenithAngles", "parameters": "(double... sunZenithAngles)", "modifiers": "public", "return": "void", "signature": "void setSunZenithAngles(double... sunZenithAngles)", "full_signature": "public void setSunZenithAngles(double... sunZenithAngles)", "class_method_signature": "RayleighAux.setSunZenithAngles(double... sunZenithAngles)", "testcase": false, "constructor": false}, {"identifier": "getViewZenithAngles", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getViewZenithAngles()", "full_signature": "public double[] getViewZenithAngles()", "class_method_signature": "RayleighAux.getViewZenithAngles()", "testcase": false, "constructor": false}, {"identifier": "setViewZenithAngles", "parameters": "(double... viewZenithAngles)", "modifiers": "public", "return": "void", "signature": "void setViewZenithAngles(double... viewZenithAngles)", "full_signature": "public void setViewZenithAngles(double... viewZenithAngles)", "class_method_signature": "RayleighAux.setViewZenithAngles(double... viewZenithAngles)", "testcase": false, "constructor": false}, {"identifier": "setViewZenithAngles", "parameters": "(Tile sourceTile)", "modifiers": "public", "return": "void", "signature": "void setViewZenithAngles(Tile sourceTile)", "full_signature": "public void setViewZenithAngles(Tile sourceTile)", "class_method_signature": "RayleighAux.setViewZenithAngles(Tile sourceTile)", "testcase": false, "constructor": false}, {"identifier": "setSunAzimuthAngles", "parameters": "(double... sunAzimuthAngles)", "modifiers": "public", "return": "void", "signature": "void setSunAzimuthAngles(double... sunAzimuthAngles)", "full_signature": "public void setSunAzimuthAngles(double... sunAzimuthAngles)", "class_method_signature": "RayleighAux.setSunAzimuthAngles(double... sunAzimuthAngles)", "testcase": false, "constructor": false}, {"identifier": "setSunAzimuthAngles", "parameters": "(Tile sourceTile)", "modifiers": "public", "return": "void", "signature": "void setSunAzimuthAngles(Tile sourceTile)", "full_signature": "public void setSunAzimuthAngles(Tile sourceTile)", "class_method_signature": "RayleighAux.setSunAzimuthAngles(Tile sourceTile)", "testcase": false, "constructor": false}, {"identifier": "getLatitudes", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getLatitudes()", "full_signature": "public double[] getLatitudes()", "class_method_signature": "RayleighAux.getLatitudes()", "testcase": false, "constructor": false}, {"identifier": "setLatitudes", "parameters": "(double... lat)", "modifiers": "public", "return": "void", "signature": "void setLatitudes(double... lat)", "full_signature": "public void setLatitudes(double... lat)", "class_method_signature": "RayleighAux.setLatitudes(double... lat)", "testcase": false, "constructor": false}, {"identifier": "setLatitudes", "parameters": "(Tile sourceTile)", "modifiers": "public", "return": "void", "signature": "void setLatitudes(Tile sourceTile)", "full_signature": "public void setLatitudes(Tile sourceTile)", "class_method_signature": "RayleighAux.setLatitudes(Tile sourceTile)", "testcase": false, "constructor": false}, {"identifier": "setViewAzimuthAngles", "parameters": "(double... viewAzimuthAngles)", "modifiers": "public", "return": "void", "signature": "void setViewAzimuthAngles(double... viewAzimuthAngles)", "full_signature": "public void setViewAzimuthAngles(double... viewAzimuthAngles)", "class_method_signature": "RayleighAux.setViewAzimuthAngles(double... viewAzimuthAngles)", "testcase": false, "constructor": false}, {"identifier": "setViewAzimuthAngles", "parameters": "(Tile sourceTile)", "modifiers": "public", "return": "void", "signature": "void setViewAzimuthAngles(Tile sourceTile)", "full_signature": "public void setViewAzimuthAngles(Tile sourceTile)", "class_method_signature": "RayleighAux.setViewAzimuthAngles(Tile sourceTile)", "testcase": false, "constructor": false}, {"identifier": "getSeaLevels", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getSeaLevels()", "full_signature": "public double[] getSeaLevels()", "class_method_signature": "RayleighAux.getSeaLevels()", "testcase": false, "constructor": false}, {"identifier": "setSeaLevels", "parameters": "(double... seaLevels)", "modifiers": "public", "return": "void", "signature": "void setSeaLevels(double... seaLevels)", "full_signature": "public void setSeaLevels(double... seaLevels)", "class_method_signature": "RayleighAux.setSeaLevels(double... seaLevels)", "testcase": false, "constructor": false}, {"identifier": "setS2MsiSeaLevelsPressures", "parameters": "(double seaLevel, Rectangle rectangle)", "modifiers": "public", "return": "void", "signature": "void setS2MsiSeaLevelsPressures(double seaLevel, Rectangle rectangle)", "full_signature": "public void setS2MsiSeaLevelsPressures(double seaLevel, Rectangle rectangle)", "class_method_signature": "RayleighAux.setS2MsiSeaLevelsPressures(double seaLevel, Rectangle rectangle)", "testcase": false, "constructor": false}, {"identifier": "setS2MsiTotalOzones", "parameters": "(double ozone, Rectangle rectangle)", "modifiers": "public", "return": "void", "signature": "void setS2MsiTotalOzones(double ozone, Rectangle rectangle)", "full_signature": "public void setS2MsiTotalOzones(double ozone, Rectangle rectangle)", "class_method_signature": "RayleighAux.setS2MsiTotalOzones(double ozone, Rectangle rectangle)", "testcase": false, "constructor": false}, {"identifier": "setS2MsiAngles", "parameters": "(GeoCoding geoCoding, Tile szaTile, Tile vzaTile, Tile saaTile, Tile vaaTile, Rectangle rectangle)", "modifiers": "public", "return": "void", "signature": "void setS2MsiAngles(GeoCoding geoCoding, Tile szaTile, Tile vzaTile, Tile saaTile, Tile vaaTile, Rectangle rectangle)", "full_signature": "public void setS2MsiAngles(GeoCoding geoCoding, Tile szaTile, Tile vzaTile, Tile saaTile, Tile vaaTile, Rectangle rectangle)", "class_method_signature": "RayleighAux.setS2MsiAngles(GeoCoding geoCoding, Tile szaTile, Tile vzaTile, Tile saaTile, Tile vaaTile, Rectangle rectangle)", "testcase": false, "constructor": false}, {"identifier": "setSeaLevels", "parameters": "(Tile sourceTile)", "modifiers": "public", "return": "void", "signature": "void setSeaLevels(Tile sourceTile)", "full_signature": "public void setSeaLevels(Tile sourceTile)", "class_method_signature": "RayleighAux.setSeaLevels(Tile sourceTile)", "testcase": false, "constructor": false}, {"identifier": "getTotalOzones", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getTotalOzones()", "full_signature": "public double[] getTotalOzones()", "class_method_signature": "RayleighAux.getTotalOzones()", "testcase": false, "constructor": false}, {"identifier": "setTotalOzones", "parameters": "(double... totalO)", "modifiers": "public", "return": "void", "signature": "void setTotalOzones(double... totalO)", "full_signature": "public void setTotalOzones(double... totalO)", "class_method_signature": "RayleighAux.setTotalOzones(double... totalO)", "testcase": false, "constructor": false}, {"identifier": "setTotalOzones", "parameters": "(Tile sourceTile)", "modifiers": "public", "return": "void", "signature": "void setTotalOzones(Tile sourceTile)", "full_signature": "public void setTotalOzones(Tile sourceTile)", "class_method_signature": "RayleighAux.setTotalOzones(Tile sourceTile)", "testcase": false, "constructor": false}, {"identifier": "setOlciTotalOzones", "parameters": "(Tile sourceTile)", "modifiers": "public", "return": "void", "signature": "void setOlciTotalOzones(Tile sourceTile)", "full_signature": "public void setOlciTotalOzones(Tile sourceTile)", "class_method_signature": "RayleighAux.setOlciTotalOzones(Tile sourceTile)", "testcase": false, "constructor": false}, {"identifier": "getSolarFluxs", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getSolarFluxs()", "full_signature": "public double[] getSolarFluxs()", "class_method_signature": "RayleighAux.getSolarFluxs()", "testcase": false, "constructor": false}, {"identifier": "setSolarFluxs", "parameters": "(Tile sourceTile)", "modifiers": "public", "return": "void", "signature": "void setSolarFluxs(Tile sourceTile)", "full_signature": "public void setSolarFluxs(Tile sourceTile)", "class_method_signature": "RayleighAux.setSolarFluxs(Tile sourceTile)", "testcase": false, "constructor": false}, {"identifier": "getSourceSampleRad", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getSourceSampleRad()", "full_signature": "public double[] getSourceSampleRad()", "class_method_signature": "RayleighAux.getSourceSampleRad()", "testcase": false, "constructor": false}, {"identifier": "setSourceSampleRad", "parameters": "(Tile sourceTile)", "modifiers": "public", "return": "void", "signature": "void setSourceSampleRad(Tile sourceTile)", "full_signature": "public void setSourceSampleRad(Tile sourceTile)", "class_method_signature": "RayleighAux.setSourceSampleRad(Tile sourceTile)", "testcase": false, "constructor": false}, {"identifier": "getLongitudes", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getLongitudes()", "full_signature": "public double[] getLongitudes()", "class_method_signature": "RayleighAux.getLongitudes()", "testcase": false, "constructor": false}, {"identifier": "setLongitudes", "parameters": "(double... longitudes)", "modifiers": "public", "return": "void", "signature": "void setLongitudes(double... longitudes)", "full_signature": "public void setLongitudes(double... longitudes)", "class_method_signature": "RayleighAux.setLongitudes(double... longitudes)", "testcase": false, "constructor": false}, {"identifier": "setLongitude", "parameters": "(Tile sourceTile)", "modifiers": "public", "return": "void", "signature": "void setLongitude(Tile sourceTile)", "full_signature": "public void setLongitude(Tile sourceTile)", "class_method_signature": "RayleighAux.setLongitude(Tile sourceTile)", "testcase": false, "constructor": false}, {"identifier": "getInterpolateRayleighThickness", "parameters": "(double... taur)", "modifiers": "public", "return": "double[]", "signature": "double[] getInterpolateRayleighThickness(double... taur)", "full_signature": "public double[] getInterpolateRayleighThickness(double... taur)", "class_method_signature": "RayleighAux.getInterpolateRayleighThickness(double... taur)", "testcase": false, "constructor": false}, {"identifier": "getSquarePower", "parameters": "(double[] sinOZARads)", "modifiers": "public", "return": "double[]", "signature": "double[] getSquarePower(double[] sinOZARads)", "full_signature": "public double[] getSquarePower(double[] sinOZARads)", "class_method_signature": "RayleighAux.getSquarePower(double[] sinOZARads)", "testcase": false, "constructor": false}, {"identifier": "getGridValueAt", "parameters": "(int x, int y)", "modifiers": "private", "return": "double[]", "signature": "double[] getGridValueAt(int x, int y)", "full_signature": "private double[] getGridValueAt(int x, int y)", "class_method_signature": "RayleighAux.getGridValueAt(int x, int y)", "testcase": false, "constructor": false}, {"identifier": "getFourierMap", "parameters": "()", "modifiers": "private", "return": "Map<Integer, double[]>", "signature": "Map<Integer, double[]> getFourierMap()", "full_signature": "private Map<Integer, double[]> getFourierMap()", "class_method_signature": "RayleighAux.getFourierMap()", "testcase": false, "constructor": false}, {"identifier": "installAuxdata", "parameters": "()", "modifiers": "static", "return": "Path", "signature": "Path installAuxdata()", "full_signature": "static Path installAuxdata()", "class_method_signature": "RayleighAux.installAuxdata()", "testcase": false, "constructor": false}, {"identifier": "parseJSON3DimArray", "parameters": "(JSONObject parse, String ray_coeff_matrix)", "modifiers": "static", "return": "ArrayList<double[][][]>", "signature": "ArrayList<double[][][]> parseJSON3DimArray(JSONObject parse, String ray_coeff_matrix)", "full_signature": "static ArrayList<double[][][]> parseJSON3DimArray(JSONObject parse, String ray_coeff_matrix)", "class_method_signature": "RayleighAux.parseJSON3DimArray(JSONObject parse, String ray_coeff_matrix)", "testcase": false, "constructor": false}, {"identifier": "getLineSpace", "parameters": "(double start, double end, int interval)", "modifiers": "static", "return": "double[]", "signature": "double[] getLineSpace(double start, double end, int interval)", "full_signature": "static double[] getLineSpace(double start, double end, int interval)", "class_method_signature": "RayleighAux.getLineSpace(double start, double end, int interval)", "testcase": false, "constructor": false}], "file": "s3tbx-olci-radiometry/src/main/java/org/esa/s3tbx/olci/radiometry/rayleigh/RayleighAux.java"}, "focal_method": {"identifier": "getAziDifferent", "parameters": "()", "modifiers": "public", "return": "double[]", "body": "public double[] getAziDifferent() {\n        if (Objects.isNull(aziDiff)) {\n            aziDiff = SmileCorrectionUtils.getAziDiff(this.getSunAzimuthAnglesRad(), this.getViewAzimuthAnglesRad());\n        }\n        return aziDiff;\n    }", "signature": "double[] getAziDifferent()", "full_signature": "public double[] getAziDifferent()", "class_method_signature": "RayleighAux.getAziDifferent()", "testcase": false, "constructor": false, "invocations": ["isNull", "getAziDiff", "getSunAzimuthAnglesRad", "getViewAzimuthAnglesRad"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}