{"test_class": {"identifier": "IonizationPotentialToolTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "LonePairElectronChecker lpcheck = new LonePairElectronChecker();", "modifier": "", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}], "file": "legacy/src/test/java/org/openscience/cdk/tools/IonizationPotentialToolTest.java"}, "test_case": {"identifier": "testBenzene", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBenzene() throws Exception {\n        String smiles = \"c1ccccc1\";\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer molecule = sp.parseSmiles(smiles);\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(molecule);\n        addExplicitHydrogens(molecule);\n        Aromaticity.cdkLegacy().apply(molecule);\n        lpcheck.saturate(molecule);\n\n        List<Double> carbonIPs = new ArrayList<Double>();\n        Iterator<IAtom> atoms = molecule.atoms().iterator();\n        while (atoms.hasNext()) {\n            IAtom atom = atoms.next();\n            if (atom.getSymbol().equals(\"H\")) continue;\n            carbonIPs.add(IonizationPotentialTool.predictIP(molecule, atom));\n        }\n\n        double firstIP = carbonIPs.get(0);\n        for (double ip : carbonIPs) {\n            Assert.assertEquals(firstIP, ip, 0.0001);\n        }\n    }", "signature": "void testBenzene()", "full_signature": "@Test public void testBenzene()", "class_method_signature": "IonizationPotentialToolTest.testBenzene()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "percieveAtomTypesAndConfigureAtoms", "addExplicitHydrogens", "apply", "cdkLegacy", "saturate", "iterator", "atoms", "hasNext", "next", "equals", "getSymbol", "add", "predictIP", "get", "assertEquals"]}, "focal_class": {"identifier": "IonizationPotentialTool", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "predictIP", "parameters": "(IAtomContainer container, IAtom atom)", "modifiers": "public static", "return": "double", "signature": "double predictIP(IAtomContainer container, IAtom atom)", "full_signature": "public static double predictIP(IAtomContainer container, IAtom atom)", "class_method_signature": "IonizationPotentialTool.predictIP(IAtomContainer container, IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "predictIP", "parameters": "(IAtomContainer container, IBond bond)", "modifiers": "public static", "return": "double", "signature": "double predictIP(IAtomContainer container, IBond bond)", "full_signature": "public static double predictIP(IAtomContainer container, IBond bond)", "class_method_signature": "IonizationPotentialTool.predictIP(IAtomContainer container, IBond bond)", "testcase": false, "constructor": false}, {"identifier": "familyHalogen", "parameters": "(IAtom atom)", "modifiers": "private static", "return": "boolean", "signature": "boolean familyHalogen(IAtom atom)", "full_signature": "private static boolean familyHalogen(IAtom atom)", "class_method_signature": "IonizationPotentialTool.familyHalogen(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "familyOxygen", "parameters": "(IAtom atom)", "modifiers": "private static", "return": "boolean", "signature": "boolean familyOxygen(IAtom atom)", "full_signature": "private static boolean familyOxygen(IAtom atom)", "class_method_signature": "IonizationPotentialTool.familyOxygen(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "familyNitrogen", "parameters": "(IAtom atom)", "modifiers": "private static", "return": "boolean", "signature": "boolean familyNitrogen(IAtom atom)", "full_signature": "private static boolean familyNitrogen(IAtom atom)", "class_method_signature": "IonizationPotentialTool.familyNitrogen(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "familyBond", "parameters": "(IAtomContainer container, IBond bond)", "modifiers": "private static", "return": "boolean", "signature": "boolean familyBond(IAtomContainer container, IBond bond)", "full_signature": "private static boolean familyBond(IAtomContainer container, IBond bond)", "class_method_signature": "IonizationPotentialTool.familyBond(IAtomContainer container, IBond bond)", "testcase": false, "constructor": false}, {"identifier": "getDoubleBondNumber", "parameters": "(IAtomContainer container)", "modifiers": "private static", "return": "int", "signature": "int getDoubleBondNumber(IAtomContainer container)", "full_signature": "private static int getDoubleBondNumber(IAtomContainer container)", "class_method_signature": "IonizationPotentialTool.getDoubleBondNumber(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getQSARs", "parameters": "(IAtomContainer container, IAtom atom)", "modifiers": "public static", "return": "double[]", "signature": "double[] getQSARs(IAtomContainer container, IAtom atom)", "full_signature": "public static double[] getQSARs(IAtomContainer container, IAtom atom)", "class_method_signature": "IonizationPotentialTool.getQSARs(IAtomContainer container, IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "getQSARs", "parameters": "(IAtomContainer container, IBond bond)", "modifiers": "public static", "return": "double[]", "signature": "double[] getQSARs(IAtomContainer container, IBond bond)", "full_signature": "public static double[] getQSARs(IAtomContainer container, IBond bond)", "class_method_signature": "IonizationPotentialTool.getQSARs(IAtomContainer container, IBond bond)", "testcase": false, "constructor": false}, {"identifier": "getDTHalogenF", "parameters": "(double[] resultsH)", "modifiers": "private static", "return": "double", "signature": "double getDTHalogenF(double[] resultsH)", "full_signature": "private static double getDTHalogenF(double[] resultsH)", "class_method_signature": "IonizationPotentialTool.getDTHalogenF(double[] resultsH)", "testcase": false, "constructor": false}, {"identifier": "getDTOxygenF", "parameters": "(double[] resultsH)", "modifiers": "private static", "return": "double", "signature": "double getDTOxygenF(double[] resultsH)", "full_signature": "private static double getDTOxygenF(double[] resultsH)", "class_method_signature": "IonizationPotentialTool.getDTOxygenF(double[] resultsH)", "testcase": false, "constructor": false}, {"identifier": "getDTNitrogenF", "parameters": "(double[] resultsH)", "modifiers": "private static", "return": "double", "signature": "double getDTNitrogenF(double[] resultsH)", "full_signature": "private static double getDTNitrogenF(double[] resultsH)", "class_method_signature": "IonizationPotentialTool.getDTNitrogenF(double[] resultsH)", "testcase": false, "constructor": false}, {"identifier": "getDTBondF", "parameters": "(double[] resultsH)", "modifiers": "private static", "return": "double", "signature": "double getDTBondF(double[] resultsH)", "full_signature": "private static double getDTBondF(double[] resultsH)", "class_method_signature": "IonizationPotentialTool.getDTBondF(double[] resultsH)", "testcase": false, "constructor": false}, {"identifier": "initiateIonization", "parameters": "(IAtomContainer container, IAtom atom)", "modifiers": "private static", "return": "IAtomContainer", "signature": "IAtomContainer initiateIonization(IAtomContainer container, IAtom atom)", "full_signature": "private static IAtomContainer initiateIonization(IAtomContainer container, IAtom atom)", "class_method_signature": "IonizationPotentialTool.initiateIonization(IAtomContainer container, IAtom atom)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/tools/IonizationPotentialTool.java"}, "focal_method": {"identifier": "predictIP", "parameters": "(IAtomContainer container, IAtom atom)", "modifiers": "public static", "return": "double", "body": "public static double predictIP(IAtomContainer container, IAtom atom) throws CDKException {\n        double value = 0;\n\n        // at least one lone pair orbital is necessary to ionize\n        if (container.getConnectedLonePairsCount(atom) == 0) return value;\n\n        // control if the IAtom belongs in some family\n        if (familyHalogen(atom))\n            value = getDTHalogenF(getQSARs(container, atom));\n        else if (familyOxygen(atom))\n            value = getDTOxygenF(getQSARs(container, atom));\n        else if (familyNitrogen(atom)) value = getDTNitrogenF(getQSARs(container, atom));\n\n        return value;\n    }", "signature": "double predictIP(IAtomContainer container, IAtom atom)", "full_signature": "public static double predictIP(IAtomContainer container, IAtom atom)", "class_method_signature": "IonizationPotentialTool.predictIP(IAtomContainer container, IAtom atom)", "testcase": false, "constructor": false, "invocations": ["getConnectedLonePairsCount", "familyHalogen", "getDTHalogenF", "getQSARs", "familyOxygen", "getDTOxygenF", "getQSARs", "familyNitrogen", "getDTNitrogenF", "getQSARs"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}