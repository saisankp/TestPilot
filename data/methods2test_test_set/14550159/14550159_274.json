{"test_class": {"identifier": "XSLTTemplatesContextResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private TemplatesParser templatesParser;", "modifier": "private", "type": "TemplatesParser", "declarator": "templatesParser", "var_name": "templatesParser"}, {"original_string": "private XSLTTemplatesContextResolver xsltTemplatesContextResolver;", "modifier": "private", "type": "XSLTTemplatesContextResolver", "declarator": "xsltTemplatesContextResolver", "var_name": "xsltTemplatesContextResolver"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/provider/XSLTTemplatesContextResolverTest.java"}, "test_case": {"identifier": "throwsIllegalArgumentExceptionIfTemplatesWithTheSameNameAlreadyRegistered", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void throwsIllegalArgumentExceptionIfTemplatesWithTheSameNameAlreadyRegistered() {\n        xsltTemplatesContextResolver.addTemplates(\"templates 1\", mock(Templates.class));\n\n        thrown.expect(IllegalArgumentException.class);\n        xsltTemplatesContextResolver.addTemplates(\"templates 1\", mock(Templates.class));\n    }", "signature": "void throwsIllegalArgumentExceptionIfTemplatesWithTheSameNameAlreadyRegistered()", "full_signature": "@Test public void throwsIllegalArgumentExceptionIfTemplatesWithTheSameNameAlreadyRegistered()", "class_method_signature": "XSLTTemplatesContextResolverTest.throwsIllegalArgumentExceptionIfTemplatesWithTheSameNameAlreadyRegistered()", "testcase": true, "constructor": false, "invocations": ["addTemplates", "mock", "expect", "addTemplates", "mock"]}, "focal_class": {"identifier": "XSLTTemplatesContextResolver", "superclass": "", "interfaces": "implements ContextResolver<XSLTTemplatesContextResolver>", "fields": [{"original_string": "private final ConcurrentMap<String, Templates> templatesMap = new ConcurrentHashMap<String, Templates>();", "modifier": "private final", "type": "ConcurrentMap<String, Templates>", "declarator": "templatesMap = new ConcurrentHashMap<String, Templates>()", "var_name": "templatesMap"}, {"original_string": "private final TemplatesParser templatesParser;", "modifier": "private final", "type": "TemplatesParser", "declarator": "templatesParser", "var_name": "templatesParser"}], "methods": [{"identifier": "XSLTTemplatesContextResolver", "parameters": "(TemplatesParser templatesParser)", "modifiers": "public", "return": "", "signature": " XSLTTemplatesContextResolver(TemplatesParser templatesParser)", "full_signature": "public  XSLTTemplatesContextResolver(TemplatesParser templatesParser)", "class_method_signature": "XSLTTemplatesContextResolver.XSLTTemplatesContextResolver(TemplatesParser templatesParser)", "testcase": false, "constructor": true}, {"identifier": "getContext", "parameters": "(Class<?> type)", "modifiers": "@Override public", "return": "XSLTTemplatesContextResolver", "signature": "XSLTTemplatesContextResolver getContext(Class<?> type)", "full_signature": "@Override public XSLTTemplatesContextResolver getContext(Class<?> type)", "class_method_signature": "XSLTTemplatesContextResolver.getContext(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "addAsTemplate", "parameters": "(String name, Source source)", "modifiers": "public", "return": "void", "signature": "void addAsTemplate(String name, Source source)", "full_signature": "public void addAsTemplate(String name, Source source)", "class_method_signature": "XSLTTemplatesContextResolver.addAsTemplate(String name, Source source)", "testcase": false, "constructor": false}, {"identifier": "addTemplates", "parameters": "(String name, Templates templates)", "modifiers": "public", "return": "void", "signature": "void addTemplates(String name, Templates templates)", "full_signature": "public void addTemplates(String name, Templates templates)", "class_method_signature": "XSLTTemplatesContextResolver.addTemplates(String name, Templates templates)", "testcase": false, "constructor": false}, {"identifier": "removeTemplates", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void removeTemplates(String name)", "full_signature": "public void removeTemplates(String name)", "class_method_signature": "XSLTTemplatesContextResolver.removeTemplates(String name)", "testcase": false, "constructor": false}, {"identifier": "getTemplates", "parameters": "(String name)", "modifiers": "public", "return": "Templates", "signature": "Templates getTemplates(String name)", "full_signature": "public Templates getTemplates(String name)", "class_method_signature": "XSLTTemplatesContextResolver.getTemplates(String name)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/provider/XSLTTemplatesContextResolver.java"}, "focal_method": {"identifier": "addTemplates", "parameters": "(String name, Templates templates)", "modifiers": "public", "return": "void", "body": "public void addTemplates(String name, Templates templates) {\n        if (templatesMap.putIfAbsent(name, templates) != null) {\n            throw new IllegalArgumentException(String.format(\"Template with name '%s' already registered\", name));\n        }\n    }", "signature": "void addTemplates(String name, Templates templates)", "full_signature": "public void addTemplates(String name, Templates templates)", "class_method_signature": "XSLTTemplatesContextResolver.addTemplates(String name, Templates templates)", "testcase": false, "constructor": false, "invocations": ["putIfAbsent", "format"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}