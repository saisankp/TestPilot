{"test_class": {"identifier": "DefaultGroovyScriptServiceTest", "superclass": "extends AbstractVerifiableUnitTest", "interfaces": "", "fields": [{"original_string": "private static final String TEST_ONE = \"testOne\";", "modifier": "private static final", "type": "String", "declarator": "TEST_ONE = \"testOne\"", "var_name": "TEST_ONE"}, {"original_string": "@Mock\n\tIdmCacheManager cacheManager;", "modifier": "@Mock", "type": "IdmCacheManager", "declarator": "cacheManager", "var_name": "cacheManager"}, {"original_string": "@InjectMocks\n\tprivate DefaultGroovyScriptService groovyScriptService;", "modifier": "@InjectMocks\n\tprivate", "type": "DefaultGroovyScriptService", "declarator": "groovyScriptService", "var_name": "groovyScriptService"}], "file": "Realization/backend/core/core-impl/src/test/java/eu/bcvsolutions/idm/core/model/service/impl/DefaultGroovyScriptServiceTest.java"}, "test_case": {"identifier": "testUnvalidScript", "parameters": "()", "modifiers": "@Test(expected = ResultCodeException.class) public", "return": "void", "body": "@Test(expected = ResultCodeException.class)\n\tpublic void testUnvalidScript() {\n\t\tString script = \"if(true) return \\\"testOne\\\"}\";\n\t\tgroovyScriptService.validateScript(script);\n\t}", "signature": "void testUnvalidScript()", "full_signature": "@Test(expected = ResultCodeException.class) public void testUnvalidScript()", "class_method_signature": "DefaultGroovyScriptServiceTest.testUnvalidScript()", "testcase": true, "constructor": false, "invocations": ["validateScript"]}, "focal_class": {"identifier": "DefaultGroovyScriptService", "superclass": "", "interfaces": "implements GroovyScriptService", "fields": [{"original_string": "public static final String CACHE_NAME = CoreModuleDescriptor.MODULE_ID + \":default-groovy-script-service-script-cache\";", "modifier": "public static final", "type": "String", "declarator": "CACHE_NAME = CoreModuleDescriptor.MODULE_ID + \":default-groovy-script-service-script-cache\"", "var_name": "CACHE_NAME"}, {"original_string": "@Autowired\n\tIdmCacheManager cacheManager;", "modifier": "@Autowired", "type": "IdmCacheManager", "declarator": "cacheManager", "var_name": "cacheManager"}, {"original_string": "private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory\n\t\t\t.getLogger(DefaultGroovyScriptService.class);", "modifier": "private static final", "type": "org.slf4j.Logger", "declarator": "LOG = org.slf4j.LoggerFactory\n\t\t\t.getLogger(DefaultGroovyScriptService.class)", "var_name": "LOG"}], "methods": [{"identifier": "evaluate", "parameters": "(String script, Map<String, Object> variables)", "modifiers": "@Override public", "return": "Object", "signature": "Object evaluate(String script, Map<String, Object> variables)", "full_signature": "@Override public Object evaluate(String script, Map<String, Object> variables)", "class_method_signature": "DefaultGroovyScriptService.evaluate(String script, Map<String, Object> variables)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(String script, Map<String, Object> variables, List<Class<?>> extraAllowedClasses)", "modifiers": "@Override public", "return": "Object", "signature": "Object evaluate(String script, Map<String, Object> variables, List<Class<?>> extraAllowedClasses)", "full_signature": "@Override public Object evaluate(String script, Map<String, Object> variables, List<Class<?>> extraAllowedClasses)", "class_method_signature": "DefaultGroovyScriptService.evaluate(String script, Map<String, Object> variables, List<Class<?>> extraAllowedClasses)", "testcase": false, "constructor": false}, {"identifier": "resolveCustomAllowTypes", "parameters": "(Map<String, Object> variables)", "modifiers": "private", "return": "Set<Class<?>>", "signature": "Set<Class<?>> resolveCustomAllowTypes(Map<String, Object> variables)", "full_signature": "private Set<Class<?>> resolveCustomAllowTypes(Map<String, Object> variables)", "class_method_signature": "DefaultGroovyScriptService.resolveCustomAllowTypes(Map<String, Object> variables)", "testcase": false, "constructor": false}, {"identifier": "validateScript", "parameters": "(String script)", "modifiers": "@Override public", "return": "Object", "signature": "Object validateScript(String script)", "full_signature": "@Override public Object validateScript(String script)", "class_method_signature": "DefaultGroovyScriptService.validateScript(String script)", "testcase": false, "constructor": false}, {"identifier": "getScript", "parameters": "(String source)", "modifiers": "private", "return": "Script", "signature": "Script getScript(String source)", "full_signature": "private Script getScript(String source)", "class_method_signature": "DefaultGroovyScriptService.getScript(String source)", "testcase": false, "constructor": false}, {"identifier": "buildScript", "parameters": "(String source)", "modifiers": "private", "return": "Script", "signature": "Script buildScript(String source)", "full_signature": "private Script buildScript(String source)", "class_method_signature": "DefaultGroovyScriptService.buildScript(String source)", "testcase": false, "constructor": false}], "file": "Realization/backend/core/core-impl/src/main/java/eu/bcvsolutions/idm/core/model/service/impl/DefaultGroovyScriptService.java"}, "focal_method": {"identifier": "validateScript", "parameters": "(String script)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n\tpublic Object validateScript(String script) throws ResultCodeException {\n\t\tAssert.notNull(script, \"Script is required.\");\n\t\ttry {\n\t\t\tGroovyShell shell = new GroovyShell();\n\t\t\treturn shell.parse(script);\n\t\t} catch (MultipleCompilationErrorsException e) {\n\t\t\t// get last error, it is possible add all errors\n\t\t\tObject error = e.getErrorCollector().getLastError();\n\t\t\tif (error instanceof SyntaxErrorMessage) {\n\t\t\t\tSyntaxErrorMessage syntaxErrorMessage = (SyntaxErrorMessage)error;\n\t\t\t\tSyntaxException cause = syntaxErrorMessage.getCause();\n\t\t\t\t//\n\t\t\t\tthrow new ResultCodeException(CoreResultCode.GROOVY_SCRIPT_SYNTAX_VALIDATION,\n\t\t\t\t\t\tImmutableMap.of(\"message\", cause.getOriginalMessage(), \"line\", cause.getLine()), e);\n\t\t\t}\n\t\t\t//\n\t\t\tthrow new ResultCodeException(CoreResultCode.GROOVY_SCRIPT_VALIDATION, e);\n\t\t} catch (CompilationFailedException ex) {\n\t\t\tthrow new ResultCodeException(CoreResultCode.GROOVY_SCRIPT_VALIDATION, ex);\n\t\t}\n\t}", "signature": "Object validateScript(String script)", "full_signature": "@Override public Object validateScript(String script)", "class_method_signature": "DefaultGroovyScriptService.validateScript(String script)", "testcase": false, "constructor": false, "invocations": ["notNull", "parse", "getLastError", "getErrorCollector", "getCause", "of", "getOriginalMessage", "getLine"]}, "repository": {"repo_id": 61879415, "url": "https://github.com/bcvsolutions/CzechIdMng", "stars": 25, "created": "6/24/2016 11:18:23 AM +00:00", "updates": "2020-01-27T15:14:40+00:00", "fork": "False", "license": "licensed"}}