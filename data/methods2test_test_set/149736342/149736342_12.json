{"test_class": {"identifier": "SignTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final byte[] TEST_MESSAGE = \"A test message\".getBytes();", "modifier": "private static final", "type": "byte[]", "declarator": "TEST_MESSAGE = \"A test message\".getBytes()", "var_name": "TEST_MESSAGE"}], "file": "crypto/src/test/java/org/web3j/crypto/SignTest.java"}, "test_case": {"identifier": "testInvalidSignature", "parameters": "()", "modifiers": "@Test(expected = RuntimeException.class) public", "return": "void", "body": "@Test(expected = RuntimeException.class)\n    public void testInvalidSignature() throws SignatureException {\n        Sign.signedMessageToKey(\n                TEST_MESSAGE, new Sign.SignatureData((byte) 27, new byte[]{1}, new byte[]{0}));\n    }", "signature": "void testInvalidSignature()", "full_signature": "@Test(expected = RuntimeException.class) public void testInvalidSignature()", "class_method_signature": "SignTest.testInvalidSignature()", "testcase": true, "constructor": false, "invocations": ["signedMessageToKey"]}, "focal_class": {"identifier": "Sign", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final X9ECParameters CURVE_PARAMS = CustomNamedCurves.getByName(\"secp256k1\");", "modifier": "private static final", "type": "X9ECParameters", "declarator": "CURVE_PARAMS = CustomNamedCurves.getByName(\"secp256k1\")", "var_name": "CURVE_PARAMS"}, {"original_string": "static final ECDomainParameters CURVE = new ECDomainParameters(\n            CURVE_PARAMS.getCurve(), CURVE_PARAMS.getG(), CURVE_PARAMS.getN(), CURVE_PARAMS.getH());", "modifier": "static final", "type": "ECDomainParameters", "declarator": "CURVE = new ECDomainParameters(\n            CURVE_PARAMS.getCurve(), CURVE_PARAMS.getG(), CURVE_PARAMS.getN(), CURVE_PARAMS.getH())", "var_name": "CURVE"}, {"original_string": "static final BigInteger HALF_CURVE_ORDER = CURVE_PARAMS.getN().shiftRight(1);", "modifier": "static final", "type": "BigInteger", "declarator": "HALF_CURVE_ORDER = CURVE_PARAMS.getN().shiftRight(1)", "var_name": "HALF_CURVE_ORDER"}], "methods": [{"identifier": "signMessage", "parameters": "(byte[] message, ECKeyPair keyPair)", "modifiers": "public static", "return": "SignatureData", "signature": "SignatureData signMessage(byte[] message, ECKeyPair keyPair)", "full_signature": "public static SignatureData signMessage(byte[] message, ECKeyPair keyPair)", "class_method_signature": "Sign.signMessage(byte[] message, ECKeyPair keyPair)", "testcase": false, "constructor": false}, {"identifier": "signMessage", "parameters": "(byte[] message, ECKeyPair keyPair, boolean isHashed)", "modifiers": "public static", "return": "SignatureData", "signature": "SignatureData signMessage(byte[] message, ECKeyPair keyPair, boolean isHashed)", "full_signature": "public static SignatureData signMessage(byte[] message, ECKeyPair keyPair, boolean isHashed)", "class_method_signature": "Sign.signMessage(byte[] message, ECKeyPair keyPair, boolean isHashed)", "testcase": false, "constructor": false}, {"identifier": "recoverFromSignature", "parameters": "(int recId, ECDSASignature sig, byte[] message)", "modifiers": "private static", "return": "BigInteger", "signature": "BigInteger recoverFromSignature(int recId, ECDSASignature sig, byte[] message)", "full_signature": "private static BigInteger recoverFromSignature(int recId, ECDSASignature sig, byte[] message)", "class_method_signature": "Sign.recoverFromSignature(int recId, ECDSASignature sig, byte[] message)", "testcase": false, "constructor": false}, {"identifier": "decompressKey", "parameters": "(BigInteger xBN, boolean yBit)", "modifiers": "private static", "return": "ECPoint", "signature": "ECPoint decompressKey(BigInteger xBN, boolean yBit)", "full_signature": "private static ECPoint decompressKey(BigInteger xBN, boolean yBit)", "class_method_signature": "Sign.decompressKey(BigInteger xBN, boolean yBit)", "testcase": false, "constructor": false}, {"identifier": "signedMessageToKey", "parameters": "(\n            byte[] message, SignatureData signatureData)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger signedMessageToKey(\n            byte[] message, SignatureData signatureData)", "full_signature": "public static BigInteger signedMessageToKey(\n            byte[] message, SignatureData signatureData)", "class_method_signature": "Sign.signedMessageToKey(\n            byte[] message, SignatureData signatureData)", "testcase": false, "constructor": false}, {"identifier": "publicKeyFromPrivate", "parameters": "(BigInteger privKey)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger publicKeyFromPrivate(BigInteger privKey)", "full_signature": "public static BigInteger publicKeyFromPrivate(BigInteger privKey)", "class_method_signature": "Sign.publicKeyFromPrivate(BigInteger privKey)", "testcase": false, "constructor": false}, {"identifier": "publicPointFromPrivate", "parameters": "(BigInteger privKey)", "modifiers": "private static", "return": "ECPoint", "signature": "ECPoint publicPointFromPrivate(BigInteger privKey)", "full_signature": "private static ECPoint publicPointFromPrivate(BigInteger privKey)", "class_method_signature": "Sign.publicPointFromPrivate(BigInteger privKey)", "testcase": false, "constructor": false}], "file": "crypto/src/main/java/org/web3j/crypto/Sign.java"}, "focal_method": {"identifier": "signedMessageToKey", "parameters": "(\n            byte[] message, SignatureData signatureData)", "modifiers": "public static", "return": "BigInteger", "body": "public static BigInteger signedMessageToKey(\n            byte[] message, SignatureData signatureData) throws SignatureException {\n\n        byte[] r = signatureData.getR();\n        byte[] s = signatureData.getS();\n        verifyPrecondition(r != null && r.length == 32, \"r must be 32 bytes\");\n        verifyPrecondition(s != null && s.length == 32, \"s must be 32 bytes\");\n\n        int header = signatureData.getV() & 0xFF;\n        // The header byte: 0x1B = first key with even y, 0x1C = first key with odd y,\n        //                  0x1D = second key with even y, 0x1E = second key with odd y\n        if (header < 27 || header > 34) {\n            throw new SignatureException(\"Header byte out of range: \" + header);\n        }\n\n        ECDSASignature sig = new ECDSASignature(\n                new BigInteger(1, signatureData.getR()),\n                new BigInteger(1, signatureData.getS()));\n\n        byte[] messageHash = Hash.sha3(message);\n        int recId = header - 27;\n        BigInteger key = recoverFromSignature(recId, sig, messageHash);\n        if (key == null) {\n            throw new SignatureException(\"Could not recover public key from signature\");\n        }\n        return key;\n    }", "signature": "BigInteger signedMessageToKey(\n            byte[] message, SignatureData signatureData)", "full_signature": "public static BigInteger signedMessageToKey(\n            byte[] message, SignatureData signatureData)", "class_method_signature": "Sign.signedMessageToKey(\n            byte[] message, SignatureData signatureData)", "testcase": false, "constructor": false, "invocations": ["getR", "getS", "verifyPrecondition", "verifyPrecondition", "getV", "getR", "getS", "sha3", "recoverFromSignature"]}, "repository": {"repo_id": 149736342, "url": "https://github.com/BrahmaOS/brahmaos-web3j", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 1779, "license": "licensed"}}