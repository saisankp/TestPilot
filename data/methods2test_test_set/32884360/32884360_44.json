{"test_class": {"identifier": "DefaultNameGeneratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DefaultNameGenerator generator = new DefaultNameGenerator();", "modifier": "private", "type": "DefaultNameGenerator", "declarator": "generator = new DefaultNameGenerator()", "var_name": "generator"}], "file": "fdb-sql-layer-core/src/test/java/com/foundationdb/ais/model/DefaultNameGeneratorTest.java"}, "test_case": {"identifier": "identitySequenceTruncate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void identitySequenceTruncate() {\n        AkibanInformationSchema ais = new AkibanInformationSchema();\n        char[] chars = new char[DefaultNameGenerator.MAX_IDENT];\n        Arrays.fill(chars, 'a');\n        String maxIdent = new String(chars);\n        // Table too long\n        assertEquals(new TableName(\"test\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$1\"),\n                     generator.generateIdentitySequenceName(ais, new TableName(\"test\", maxIdent), \"s\"));\n        // Serial long\n        assertEquals(new TableName(\"test\", \"t_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$1\"),\n                     generator.generateIdentitySequenceName(ais, new TableName(\"test\", \"t\"), maxIdent));\n        // Both long\n        assertEquals(new TableName(\"test\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$1\"),\n                     generator.generateIdentitySequenceName(ais, new TableName(\"test\", maxIdent), maxIdent));\n\n        // Long with conflict\n        Sequence.create(ais, \"test\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$1\", 1, 1, 1, 10, false);\n        assertEquals(new TableName(\"test\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa$2\"),\n                     generator.generateIdentitySequenceName(ais, new TableName(\"test\", maxIdent), \"s\"));\n    }", "signature": "void identitySequenceTruncate()", "full_signature": "@Test public void identitySequenceTruncate()", "class_method_signature": "DefaultNameGeneratorTest.identitySequenceTruncate()", "testcase": true, "constructor": false, "invocations": ["fill", "assertEquals", "generateIdentitySequenceName", "assertEquals", "generateIdentitySequenceName", "assertEquals", "generateIdentitySequenceName", "create", "assertEquals", "generateIdentitySequenceName"]}, "focal_class": {"identifier": "DefaultNameGenerator", "superclass": "", "interfaces": "implements NameGenerator", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DefaultNameGenerator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DefaultNameGenerator.class)", "var_name": "LOG"}, {"original_string": "public static final int MAX_IDENT = 64;", "modifier": "public static final", "type": "int", "declarator": "MAX_IDENT = 64", "var_name": "MAX_IDENT"}, {"original_string": "static final String IDENTITY_SEQUENCE_FORMAT = \"%s_%s_seq\";", "modifier": "static final", "type": "String", "declarator": "IDENTITY_SEQUENCE_FORMAT = \"%s_%s_seq\"", "var_name": "IDENTITY_SEQUENCE_FORMAT"}, {"original_string": "static final int USER_TABLE_ID_OFFSET = 1;", "modifier": "static final", "type": "int", "declarator": "USER_TABLE_ID_OFFSET = 1", "var_name": "USER_TABLE_ID_OFFSET"}, {"original_string": "static final int IS_TABLE_ID_OFFSET = 1000000000;", "modifier": "static final", "type": "int", "declarator": "IS_TABLE_ID_OFFSET = 1000000000", "var_name": "IS_TABLE_ID_OFFSET"}, {"original_string": "private final Set<String> fullTextPaths;", "modifier": "private final", "type": "Set<String>", "declarator": "fullTextPaths", "var_name": "fullTextPaths"}, {"original_string": "private final SortedSet<Integer> tableIDSet;", "modifier": "private final", "type": "SortedSet<Integer>", "declarator": "tableIDSet", "var_name": "tableIDSet"}, {"original_string": "private final SortedSet<Integer> isTableIDSet;", "modifier": "private final", "type": "SortedSet<Integer>", "declarator": "isTableIDSet", "var_name": "isTableIDSet"}, {"original_string": "private final Map<Integer,Integer> indexIDMap;", "modifier": "private final", "type": "Map<Integer,Integer>", "declarator": "indexIDMap", "var_name": "indexIDMap"}, {"original_string": "private final Set<TableName> constraintNameSet;", "modifier": "private final", "type": "Set<TableName>", "declarator": "constraintNameSet", "var_name": "constraintNameSet"}], "methods": [{"identifier": "DefaultNameGenerator", "parameters": "()", "modifiers": "public", "return": "", "signature": " DefaultNameGenerator()", "full_signature": "public  DefaultNameGenerator()", "class_method_signature": "DefaultNameGenerator.DefaultNameGenerator()", "testcase": false, "constructor": true}, {"identifier": "DefaultNameGenerator", "parameters": "(AkibanInformationSchema ais)", "modifiers": "public", "return": "", "signature": " DefaultNameGenerator(AkibanInformationSchema ais)", "full_signature": "public  DefaultNameGenerator(AkibanInformationSchema ais)", "class_method_signature": "DefaultNameGenerator.DefaultNameGenerator(AkibanInformationSchema ais)", "testcase": false, "constructor": true}, {"identifier": "getMaxIndexID", "parameters": "()", "modifiers": "protected synchronized", "return": "int", "signature": "int getMaxIndexID()", "full_signature": "protected synchronized int getMaxIndexID()", "class_method_signature": "DefaultNameGenerator.getMaxIndexID()", "testcase": false, "constructor": false}, {"identifier": "generateTableID", "parameters": "(TableName name)", "modifiers": "@Override public synchronized", "return": "int", "signature": "int generateTableID(TableName name)", "full_signature": "@Override public synchronized int generateTableID(TableName name)", "class_method_signature": "DefaultNameGenerator.generateTableID(TableName name)", "testcase": false, "constructor": false}, {"identifier": "generateIndexID", "parameters": "(int rootTableID)", "modifiers": "@Override public synchronized", "return": "int", "signature": "int generateIndexID(int rootTableID)", "full_signature": "@Override public synchronized int generateIndexID(int rootTableID)", "class_method_signature": "DefaultNameGenerator.generateIndexID(int rootTableID)", "testcase": false, "constructor": false}, {"identifier": "generateIdentitySequenceName", "parameters": "(AkibanInformationSchema ais, TableName table, String column)", "modifiers": "@Override public synchronized", "return": "TableName", "signature": "TableName generateIdentitySequenceName(AkibanInformationSchema ais, TableName table, String column)", "full_signature": "@Override public synchronized TableName generateIdentitySequenceName(AkibanInformationSchema ais, TableName table, String column)", "class_method_signature": "DefaultNameGenerator.generateIdentitySequenceName(AkibanInformationSchema ais, TableName table, String column)", "testcase": false, "constructor": false}, {"identifier": "generateJoinName", "parameters": "(TableName parentTable, TableName childTable, String[] pkColNames, String [] fkColNames)", "modifiers": "@Override public synchronized", "return": "String", "signature": "String generateJoinName(TableName parentTable, TableName childTable, String[] pkColNames, String [] fkColNames)", "full_signature": "@Override public synchronized String generateJoinName(TableName parentTable, TableName childTable, String[] pkColNames, String [] fkColNames)", "class_method_signature": "DefaultNameGenerator.generateJoinName(TableName parentTable, TableName childTable, String[] pkColNames, String [] fkColNames)", "testcase": false, "constructor": false}, {"identifier": "generateJoinName", "parameters": "(TableName parentTable, TableName childTable, List<JoinColumn> columns)", "modifiers": "@Override public synchronized", "return": "String", "signature": "String generateJoinName(TableName parentTable, TableName childTable, List<JoinColumn> columns)", "full_signature": "@Override public synchronized String generateJoinName(TableName parentTable, TableName childTable, List<JoinColumn> columns)", "class_method_signature": "DefaultNameGenerator.generateJoinName(TableName parentTable, TableName childTable, List<JoinColumn> columns)", "testcase": false, "constructor": false}, {"identifier": "generateJoinName", "parameters": "(TableName parentTable, TableName childTable, List<String> pkColNames, List<String> fkColNames)", "modifiers": "@Override public synchronized", "return": "String", "signature": "String generateJoinName(TableName parentTable, TableName childTable, List<String> pkColNames, List<String> fkColNames)", "full_signature": "@Override public synchronized String generateJoinName(TableName parentTable, TableName childTable, List<String> pkColNames, List<String> fkColNames)", "class_method_signature": "DefaultNameGenerator.generateJoinName(TableName parentTable, TableName childTable, List<String> pkColNames, List<String> fkColNames)", "testcase": false, "constructor": false}, {"identifier": "generateFullTextIndexPath", "parameters": "(FullTextIndex index)", "modifiers": "@Override public synchronized", "return": "String", "signature": "String generateFullTextIndexPath(FullTextIndex index)", "full_signature": "@Override public synchronized String generateFullTextIndexPath(FullTextIndex index)", "class_method_signature": "DefaultNameGenerator.generateFullTextIndexPath(FullTextIndex index)", "testcase": false, "constructor": false}, {"identifier": "generateFKConstraintName", "parameters": "(String schemaName, String tableName)", "modifiers": "@Override public synchronized", "return": "TableName", "signature": "TableName generateFKConstraintName(String schemaName, String tableName)", "full_signature": "@Override public synchronized TableName generateFKConstraintName(String schemaName, String tableName)", "class_method_signature": "DefaultNameGenerator.generateFKConstraintName(String schemaName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "generatePKConstraintName", "parameters": "( String schemaName, String tableName)", "modifiers": "@Override public synchronized", "return": "TableName", "signature": "TableName generatePKConstraintName( String schemaName, String tableName)", "full_signature": "@Override public synchronized TableName generatePKConstraintName( String schemaName, String tableName)", "class_method_signature": "DefaultNameGenerator.generatePKConstraintName( String schemaName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "generateUniqueConstraintName", "parameters": "( String schemaName, String tableName)", "modifiers": "@Override public synchronized", "return": "TableName", "signature": "TableName generateUniqueConstraintName( String schemaName, String tableName)", "full_signature": "@Override public synchronized TableName generateUniqueConstraintName( String schemaName, String tableName)", "class_method_signature": "DefaultNameGenerator.generateUniqueConstraintName( String schemaName, String tableName)", "testcase": false, "constructor": false}, {"identifier": "generateConstraintName", "parameters": "(String schemaName, String tableName, String postfix)", "modifiers": "private", "return": "TableName", "signature": "TableName generateConstraintName(String schemaName, String tableName, String postfix)", "full_signature": "private TableName generateConstraintName(String schemaName, String tableName, String postfix)", "class_method_signature": "DefaultNameGenerator.generateConstraintName(String schemaName, String tableName, String postfix)", "testcase": false, "constructor": false}, {"identifier": "mergeAIS", "parameters": "(AkibanInformationSchema ais)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void mergeAIS(AkibanInformationSchema ais)", "full_signature": "@Override public synchronized void mergeAIS(AkibanInformationSchema ais)", "class_method_signature": "DefaultNameGenerator.mergeAIS(AkibanInformationSchema ais)", "testcase": false, "constructor": false}, {"identifier": "removeTableID", "parameters": "(int tableID)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void removeTableID(int tableID)", "full_signature": "@Override public synchronized void removeTableID(int tableID)", "class_method_signature": "DefaultNameGenerator.removeTableID(int tableID)", "testcase": false, "constructor": false}, {"identifier": "getStorageNames", "parameters": "()", "modifiers": "@Override public synchronized", "return": "Set<String>", "signature": "Set<String> getStorageNames()", "full_signature": "@Override public synchronized Set<String> getStorageNames()", "class_method_signature": "DefaultNameGenerator.getStorageNames()", "testcase": false, "constructor": false}, {"identifier": "getNextTableID", "parameters": "(boolean isISTable)", "modifiers": "private", "return": "int", "signature": "int getNextTableID(boolean isISTable)", "full_signature": "private int getNextTableID(boolean isISTable)", "class_method_signature": "DefaultNameGenerator.getNextTableID(boolean isISTable)", "testcase": false, "constructor": false}, {"identifier": "collectTableIDs", "parameters": "(AkibanInformationSchema ais, boolean onlyISTables)", "modifiers": "private static", "return": "SortedSet<Integer>", "signature": "SortedSet<Integer> collectTableIDs(AkibanInformationSchema ais, boolean onlyISTables)", "full_signature": "private static SortedSet<Integer> collectTableIDs(AkibanInformationSchema ais, boolean onlyISTables)", "class_method_signature": "DefaultNameGenerator.collectTableIDs(AkibanInformationSchema ais, boolean onlyISTables)", "testcase": false, "constructor": false}, {"identifier": "collectMaxIndexIDs", "parameters": "(AkibanInformationSchema ais)", "modifiers": "public static", "return": "Map<Integer,Integer>", "signature": "Map<Integer,Integer> collectMaxIndexIDs(AkibanInformationSchema ais)", "full_signature": "public static Map<Integer,Integer> collectMaxIndexIDs(AkibanInformationSchema ais)", "class_method_signature": "DefaultNameGenerator.collectMaxIndexIDs(AkibanInformationSchema ais)", "testcase": false, "constructor": false}, {"identifier": "findUnique", "parameters": "(Collection<TableName> set, TableName original)", "modifiers": "private static", "return": "TableName", "signature": "TableName findUnique(Collection<TableName> set, TableName original)", "full_signature": "private static TableName findUnique(Collection<TableName> set, TableName original)", "class_method_signature": "DefaultNameGenerator.findUnique(Collection<TableName> set, TableName original)", "testcase": false, "constructor": false}, {"identifier": "findUnique", "parameters": "(Collection<String> set, String original, int maxLength)", "modifiers": "public static", "return": "String", "signature": "String findUnique(Collection<String> set, String original, int maxLength)", "full_signature": "public static String findUnique(Collection<String> set, String original, int maxLength)", "class_method_signature": "DefaultNameGenerator.findUnique(Collection<String> set, String original, int maxLength)", "testcase": false, "constructor": false}, {"identifier": "makeUnique", "parameters": "(Collection<String> treeNames, String proposed, int maxLength)", "modifiers": "public static", "return": "String", "signature": "String makeUnique(Collection<String> treeNames, String proposed, int maxLength)", "full_signature": "public static String makeUnique(Collection<String> treeNames, String proposed, int maxLength)", "class_method_signature": "DefaultNameGenerator.makeUnique(Collection<String> treeNames, String proposed, int maxLength)", "testcase": false, "constructor": false}, {"identifier": "schemaNameForIndex", "parameters": "(Index index)", "modifiers": "public static", "return": "String", "signature": "String schemaNameForIndex(Index index)", "full_signature": "public static String schemaNameForIndex(Index index)", "class_method_signature": "DefaultNameGenerator.schemaNameForIndex(Index index)", "testcase": false, "constructor": false}, {"identifier": "truncate", "parameters": "(String s, int maxLen)", "modifiers": "private static", "return": "String", "signature": "String truncate(String s, int maxLen)", "full_signature": "private static String truncate(String s, int maxLen)", "class_method_signature": "DefaultNameGenerator.truncate(String s, int maxLen)", "testcase": false, "constructor": false}], "file": "fdb-sql-layer-core/src/main/java/com/foundationdb/ais/model/DefaultNameGenerator.java"}, "focal_method": {"identifier": "generateIdentitySequenceName", "parameters": "(AkibanInformationSchema ais, TableName table, String column)", "modifiers": "@Override public synchronized", "return": "TableName", "body": "@Override\n    public synchronized TableName generateIdentitySequenceName(AkibanInformationSchema ais, TableName table, String column) {\n        String proposed = String.format(IDENTITY_SEQUENCE_FORMAT, table.getTableName(), column);\n        return findUnique(ais.getSequences().keySet(), new TableName(table.getSchemaName(), proposed));\n    }", "signature": "TableName generateIdentitySequenceName(AkibanInformationSchema ais, TableName table, String column)", "full_signature": "@Override public synchronized TableName generateIdentitySequenceName(AkibanInformationSchema ais, TableName table, String column)", "class_method_signature": "DefaultNameGenerator.generateIdentitySequenceName(AkibanInformationSchema ais, TableName table, String column)", "testcase": false, "constructor": false, "invocations": ["format", "getTableName", "findUnique", "keySet", "getSequences", "getSchemaName"]}, "repository": {"repo_id": 32884360, "url": "https://github.com/jaytaylor/sql-layer", "language": "Java", "is_fork": false, "fork_count": 120, "stargazer_count": 77, "size": 138665, "license": "licensed"}}