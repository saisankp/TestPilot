{"test_class": {"identifier": "JavaExecutionCachedEngineTest", "superclass": "extends AbsExecutionCachedEngineTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private JavaExecutionEngine javaExecutionEngine;", "modifier": "@Autowired\n    private", "type": "JavaExecutionEngine", "declarator": "javaExecutionEngine", "var_name": "javaExecutionEngine"}], "file": "runtime-management/runtime-management-impl/src/test/java/io/cloudslang/runtime/impl/java/JavaExecutionCachedEngineTest.java"}, "test_case": {"identifier": "testJavaExecutorReleasedAfterSuccessExecution", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testJavaExecutorReleasedAfterSuccessExecution() {\n        final JavaExecutor javaExecutor = mock(JavaExecutor.class);\n        JavaExecutionCachedEngine engine = new JavaExecutionCachedEngine() {\n            public JavaExecutor allocateExecutor(Set<String> dependencies) {\n                return javaExecutor;\n            }\n        };\n        engine.execute(\"\", \"\", \"\", null);\n        verify(javaExecutor).release();\n    }", "signature": "void testJavaExecutorReleasedAfterSuccessExecution()", "full_signature": "@Test public void testJavaExecutorReleasedAfterSuccessExecution()", "class_method_signature": "JavaExecutionCachedEngineTest.testJavaExecutorReleasedAfterSuccessExecution()", "testcase": true, "constructor": false, "invocations": ["mock", "execute", "release", "verify"]}, "focal_class": {"identifier": "JavaExecutionCachedEngine", "superclass": "extends ExecutionCachedEngine<JavaExecutor>", "interfaces": "implements JavaExecutionEngine", "fields": [{"original_string": "@Autowired\n    private DependencyService dependencyService;", "modifier": "@Autowired\n    private", "type": "DependencyService", "declarator": "dependencyService", "var_name": "dependencyService"}, {"original_string": "@Value(\"#{systemProperties['\" + JavaExecutionConfigurationConsts.JAVA_EXECUTOR_CACHE_SIZE + \"'] != null ? systemProperties['\" + JavaExecutionConfigurationConsts.JAVA_EXECUTOR_CACHE_SIZE + \"'] : \" + JavaExecutionConfigurationConsts.JAVA_EXECUTOR_CACHE_DEFAULT_SIZE + \"}\")\n    private int cacheSize;", "modifier": "@Value(\"#{systemProperties['\" + JavaExecutionConfigurationConsts.JAVA_EXECUTOR_CACHE_SIZE + \"'] != null ? systemProperties['\" + JavaExecutionConfigurationConsts.JAVA_EXECUTOR_CACHE_SIZE + \"'] : \" + JavaExecutionConfigurationConsts.JAVA_EXECUTOR_CACHE_DEFAULT_SIZE + \"}\")\n    private", "type": "int", "declarator": "cacheSize", "var_name": "cacheSize"}], "methods": [{"identifier": "execute", "parameters": "(String dependency, String className, String methodName, JavaExecutionParametersProvider parametersProvider)", "modifiers": "@Override public", "return": "Object", "signature": "Object execute(String dependency, String className, String methodName, JavaExecutionParametersProvider parametersProvider)", "full_signature": "@Override public Object execute(String dependency, String className, String methodName, JavaExecutionParametersProvider parametersProvider)", "class_method_signature": "JavaExecutionCachedEngine.execute(String dependency, String className, String methodName, JavaExecutionParametersProvider parametersProvider)", "testcase": false, "constructor": false}, {"identifier": "getDependencyService", "parameters": "()", "modifiers": "@Override protected", "return": "DependencyService", "signature": "DependencyService getDependencyService()", "full_signature": "@Override protected DependencyService getDependencyService()", "class_method_signature": "JavaExecutionCachedEngine.getDependencyService()", "testcase": false, "constructor": false}, {"identifier": "getCacheSize", "parameters": "()", "modifiers": "@Override protected", "return": "int", "signature": "int getCacheSize()", "full_signature": "@Override protected int getCacheSize()", "class_method_signature": "JavaExecutionCachedEngine.getCacheSize()", "testcase": false, "constructor": false}, {"identifier": "createNewExecutor", "parameters": "(Set<String> filePaths)", "modifiers": "@Override protected", "return": "JavaExecutor", "signature": "JavaExecutor createNewExecutor(Set<String> filePaths)", "full_signature": "@Override protected JavaExecutor createNewExecutor(Set<String> filePaths)", "class_method_signature": "JavaExecutionCachedEngine.createNewExecutor(Set<String> filePaths)", "testcase": false, "constructor": false}], "file": "runtime-management/runtime-management-impl/src/main/java/io/cloudslang/runtime/impl/java/JavaExecutionCachedEngine.java"}, "focal_method": {"identifier": "execute", "parameters": "(String dependency, String className, String methodName, JavaExecutionParametersProvider parametersProvider)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object execute(String dependency, String className, String methodName, JavaExecutionParametersProvider parametersProvider) {\n        JavaExecutor executor = allocateExecutor((dependency == null || dependency.isEmpty()) ? Sets.<String>newHashSet() :\n                Sets.newHashSet(dependency));\n        try {\n            return executor.execute(className, methodName, parametersProvider);\n        } finally {\n            releaseExecutor(executor);\n        }\n    }", "signature": "Object execute(String dependency, String className, String methodName, JavaExecutionParametersProvider parametersProvider)", "full_signature": "@Override public Object execute(String dependency, String className, String methodName, JavaExecutionParametersProvider parametersProvider)", "class_method_signature": "JavaExecutionCachedEngine.execute(String dependency, String className, String methodName, JavaExecutionParametersProvider parametersProvider)", "testcase": false, "constructor": false, "invocations": ["allocateExecutor", "isEmpty", "newHashSet", "newHashSet", "execute", "releaseExecutor"]}, "repository": {"repo_id": 28394156, "url": "https://github.com/CloudSlang/score", "stars": 76, "created": "12/23/2014 11:19:26 AM +00:00", "updates": "2020-01-27T14:36:32+00:00", "fork": "False", "license": "licensed"}}