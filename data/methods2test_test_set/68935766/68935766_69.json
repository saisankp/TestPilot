{"test_class": {"identifier": "ExceptionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final CommandListenerWrapper LISTENER = mock(CommandListenerWrapper.class);", "modifier": "static final", "type": "CommandListenerWrapper", "declarator": "LISTENER = mock(CommandListenerWrapper.class)", "var_name": "LISTENER"}, {"original_string": "CommandListenerWrapper listener = mock(CommandListenerWrapper.class);", "modifier": "", "type": "CommandListenerWrapper", "declarator": "listener = mock(CommandListenerWrapper.class)", "var_name": "listener"}, {"original_string": "EntityPlayer player = when(mock(EntityPlayer.class).getCommandListener()).thenReturn(listener).getMock();", "modifier": "", "type": "EntityPlayer", "declarator": "player = when(mock(EntityPlayer.class).getCommandListener()).thenReturn(listener).getMock()", "var_name": "player"}, {"original_string": "CommandSender sender = when(mock(CraftPlayer.class).getHandle()).thenReturn(player).getMock();", "modifier": "", "type": "CommandSender", "declarator": "sender = when(mock(CraftPlayer.class).getHandle()).thenReturn(player).getMock()", "var_name": "sender"}], "file": "commons/src/test/java/com/karuslabs/commons/command/dispatcher/ExceptionsTest.java"}, "test_case": {"identifier": "report_exception", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void report_exception() {\n        Exceptions.report(sender, new IllegalArgumentException());\n        verify(listener).sendFailureMessage(any(ChatMessage.class));\n    }", "signature": "void report_exception()", "full_signature": "@Test void report_exception()", "class_method_signature": "ExceptionsTest.report_exception()", "testcase": true, "constructor": false, "invocations": ["report", "sendFailureMessage", "verify", "any"]}, "focal_class": {"identifier": "Exceptions", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Object[] EMPTY = new Object[0];", "modifier": "private static final", "type": "Object[]", "declarator": "EMPTY = new Object[0]", "var_name": "EMPTY"}], "methods": [{"identifier": "report", "parameters": "(CommandSender sender, CommandSyntaxException exception)", "modifiers": "static", "return": "void", "signature": "void report(CommandSender sender, CommandSyntaxException exception)", "full_signature": "static void report(CommandSender sender, CommandSyntaxException exception)", "class_method_signature": "Exceptions.report(CommandSender sender, CommandSyntaxException exception)", "testcase": false, "constructor": false}, {"identifier": "report", "parameters": "(CommandSender sender, Exception exception)", "modifiers": "static", "return": "void", "signature": "void report(CommandSender sender, Exception exception)", "full_signature": "static void report(CommandSender sender, Exception exception)", "class_method_signature": "Exceptions.report(CommandSender sender, Exception exception)", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(CommandSender sender)", "modifiers": "static", "return": "CommandListenerWrapper", "signature": "CommandListenerWrapper from(CommandSender sender)", "full_signature": "static CommandListenerWrapper from(CommandSender sender)", "class_method_signature": "Exceptions.from(CommandSender sender)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/command/dispatcher/Exceptions.java"}, "focal_method": {"identifier": "report", "parameters": "(CommandSender sender, CommandSyntaxException exception)", "modifiers": "static", "return": "void", "body": "static void report(CommandSender sender, CommandSyntaxException exception) {\n        var listener = from(sender);\n        \n        listener.sendFailureMessage(ChatComponentUtils.a(exception.getRawMessage()));\n        \n        var input = exception.getInput();\n        if (input != null && exception.getCursor() >= 0) {\n            var index = Math.min(input.length(), exception.getCursor());\n\n            var text = (new ChatComponentText(\"\")).a(EnumChatFormat.GRAY).format(modifier -> \n                modifier.setChatClickable(new ChatClickable(ChatClickable.EnumClickAction.SUGGEST_COMMAND, input))\n            );\n            \n            if (index > 10) {\n                text.c(\"...\");\n            }\n\n            text.c(input.substring(Math.max(0, index - 10), index));\n            \n            if (index < input.length()) {\n                var error = new ChatComponentText(input.substring(index)).a(new EnumChatFormat[]{EnumChatFormat.RED, EnumChatFormat.UNDERLINE});\n                text.addSibling(error);\n            }\n            \n            var context = new ChatMessage(\"command.context.here\").a(new EnumChatFormat[]{EnumChatFormat.RED, EnumChatFormat.ITALIC});\n            text.addSibling(context);\n            \n            listener.sendFailureMessage(text);\n        }\n    }", "signature": "void report(CommandSender sender, CommandSyntaxException exception)", "full_signature": "static void report(CommandSender sender, CommandSyntaxException exception)", "class_method_signature": "Exceptions.report(CommandSender sender, CommandSyntaxException exception)", "testcase": false, "constructor": false, "invocations": ["from", "sendFailureMessage", "a", "getRawMessage", "getInput", "getCursor", "min", "length", "getCursor", "format", "a", "setChatClickable", "c", "c", "substring", "max", "length", "a", "substring", "addSibling", "a", "addSibling", "sendFailureMessage"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}