{"test_class": {"identifier": "LimitViolationFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FileSystem fileSystem;", "modifier": "private", "type": "FileSystem", "declarator": "fileSystem", "var_name": "fileSystem"}, {"original_string": "private InMemoryPlatformConfig platformConfig;", "modifier": "private", "type": "InMemoryPlatformConfig", "declarator": "platformConfig", "var_name": "platformConfig"}], "file": "security-analysis-api/src/test/java/com/powsybl/security/LimitViolationFilterTest.java"}, "test_case": {"identifier": "load", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void load() throws Exception {\n        LimitViolationFilter filter = LimitViolationFilter.load(platformConfig);\n        assertEquals(EnumSet.of(LimitViolationType.CURRENT, LimitViolationType.LOW_VOLTAGE), filter.getViolationTypes());\n        assertEquals(150.0, filter.getMinBaseVoltage(), 0.0);\n        assertEquals(EnumSet.of(Country.FR, Country.BE), filter.getCountries());\n        filter.setViolationTypes(EnumSet.of(LimitViolationType.HIGH_VOLTAGE));\n        assertEquals(EnumSet.of(LimitViolationType.HIGH_VOLTAGE), filter.getViolationTypes());\n        filter.setMinBaseVoltage(225.0);\n        filter.setCountries(EnumSet.of(Country.FR));\n        assertEquals(EnumSet.of(Country.FR), filter.getCountries());\n        assertEquals(225.0, filter.getMinBaseVoltage(), 0.0);\n        filter.setViolationTypes(null);\n        assertEquals(LimitViolationType.values().length, filter.getViolationTypes().size());\n        filter.setCountries(null);\n        assertEquals(Country.values().length, filter.getCountries().size());\n        try {\n            filter.setViolationTypes(EnumSet.noneOf(LimitViolationType.class));\n            fail();\n        } catch (Exception ignored) {\n        }\n        try {\n            filter.setMinBaseVoltage(-3.0);\n            fail();\n        } catch (Exception ignored) {\n        }\n    }", "signature": "void load()", "full_signature": "@Test public void load()", "class_method_signature": "LimitViolationFilterTest.load()", "testcase": true, "constructor": false, "invocations": ["load", "assertEquals", "of", "getViolationTypes", "assertEquals", "getMinBaseVoltage", "assertEquals", "of", "getCountries", "setViolationTypes", "of", "assertEquals", "of", "getViolationTypes", "setMinBaseVoltage", "setCountries", "of", "assertEquals", "of", "getCountries", "assertEquals", "getMinBaseVoltage", "setViolationTypes", "assertEquals", "values", "size", "getViolationTypes", "setCountries", "assertEquals", "values", "size", "getCountries", "setViolationTypes", "noneOf", "fail", "setMinBaseVoltage", "fail"]}, "focal_class": {"identifier": "LimitViolationFilter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<LimitViolationType> DEFAULT_VIOLATION_TYPES = EnumSet.allOf(LimitViolationType.class);", "modifier": "private static final", "type": "Set<LimitViolationType>", "declarator": "DEFAULT_VIOLATION_TYPES = EnumSet.allOf(LimitViolationType.class)", "var_name": "DEFAULT_VIOLATION_TYPES"}, {"original_string": "private static final double DEFAULT_MIN_BASE_VOLTAGE = 0.0;", "modifier": "private static final", "type": "double", "declarator": "DEFAULT_MIN_BASE_VOLTAGE = 0.0", "var_name": "DEFAULT_MIN_BASE_VOLTAGE"}, {"original_string": "private static final Set<Country> DEFAULT_COUNTRIES = null;", "modifier": "private static final", "type": "Set<Country>", "declarator": "DEFAULT_COUNTRIES = null", "var_name": "DEFAULT_COUNTRIES"}, {"original_string": "private Set<LimitViolationType> violationTypes;", "modifier": "private", "type": "Set<LimitViolationType>", "declarator": "violationTypes", "var_name": "violationTypes"}, {"original_string": "private double minBaseVoltage;", "modifier": "private", "type": "double", "declarator": "minBaseVoltage", "var_name": "minBaseVoltage"}, {"original_string": "private Set<Country> countries;", "modifier": "private", "type": "Set<Country>", "declarator": "countries", "var_name": "countries"}], "methods": [{"identifier": "checkViolationTypes", "parameters": "(Set<LimitViolationType> violationTypes)", "modifiers": "private static", "return": "Set<LimitViolationType>", "signature": "Set<LimitViolationType> checkViolationTypes(Set<LimitViolationType> violationTypes)", "full_signature": "private static Set<LimitViolationType> checkViolationTypes(Set<LimitViolationType> violationTypes)", "class_method_signature": "LimitViolationFilter.checkViolationTypes(Set<LimitViolationType> violationTypes)", "testcase": false, "constructor": false}, {"identifier": "checkMinBaseVoltage", "parameters": "(double minBaseVoltage)", "modifiers": "private static", "return": "double", "signature": "double checkMinBaseVoltage(double minBaseVoltage)", "full_signature": "private static double checkMinBaseVoltage(double minBaseVoltage)", "class_method_signature": "LimitViolationFilter.checkMinBaseVoltage(double minBaseVoltage)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "()", "modifiers": "public static", "return": "LimitViolationFilter", "signature": "LimitViolationFilter load()", "full_signature": "public static LimitViolationFilter load()", "class_method_signature": "LimitViolationFilter.load()", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(PlatformConfig platformConfig)", "modifiers": "public static", "return": "LimitViolationFilter", "signature": "LimitViolationFilter load(PlatformConfig platformConfig)", "full_signature": "public static LimitViolationFilter load(PlatformConfig platformConfig)", "class_method_signature": "LimitViolationFilter.load(PlatformConfig platformConfig)", "testcase": false, "constructor": false}, {"identifier": "LimitViolationFilter", "parameters": "(Set<LimitViolationType> violationTypes)", "modifiers": "public", "return": "", "signature": " LimitViolationFilter(Set<LimitViolationType> violationTypes)", "full_signature": "public  LimitViolationFilter(Set<LimitViolationType> violationTypes)", "class_method_signature": "LimitViolationFilter.LimitViolationFilter(Set<LimitViolationType> violationTypes)", "testcase": false, "constructor": true}, {"identifier": "LimitViolationFilter", "parameters": "()", "modifiers": "public", "return": "", "signature": " LimitViolationFilter()", "full_signature": "public  LimitViolationFilter()", "class_method_signature": "LimitViolationFilter.LimitViolationFilter()", "testcase": false, "constructor": true}, {"identifier": "LimitViolationFilter", "parameters": "(Set<LimitViolationType> violationTypes, double minBaseVoltage)", "modifiers": "public", "return": "", "signature": " LimitViolationFilter(Set<LimitViolationType> violationTypes, double minBaseVoltage)", "full_signature": "public  LimitViolationFilter(Set<LimitViolationType> violationTypes, double minBaseVoltage)", "class_method_signature": "LimitViolationFilter.LimitViolationFilter(Set<LimitViolationType> violationTypes, double minBaseVoltage)", "testcase": false, "constructor": true}, {"identifier": "LimitViolationFilter", "parameters": "(Set<LimitViolationType> violationTypes, double minBaseVoltage, Set<Country> countries)", "modifiers": "public", "return": "", "signature": " LimitViolationFilter(Set<LimitViolationType> violationTypes, double minBaseVoltage, Set<Country> countries)", "full_signature": "public  LimitViolationFilter(Set<LimitViolationType> violationTypes, double minBaseVoltage, Set<Country> countries)", "class_method_signature": "LimitViolationFilter.LimitViolationFilter(Set<LimitViolationType> violationTypes, double minBaseVoltage, Set<Country> countries)", "testcase": false, "constructor": true}, {"identifier": "getViolationTypes", "parameters": "()", "modifiers": "public", "return": "Set<LimitViolationType>", "signature": "Set<LimitViolationType> getViolationTypes()", "full_signature": "public Set<LimitViolationType> getViolationTypes()", "class_method_signature": "LimitViolationFilter.getViolationTypes()", "testcase": false, "constructor": false}, {"identifier": "setViolationTypes", "parameters": "(Set<LimitViolationType> violationTypes)", "modifiers": "public", "return": "LimitViolationFilter", "signature": "LimitViolationFilter setViolationTypes(Set<LimitViolationType> violationTypes)", "full_signature": "public LimitViolationFilter setViolationTypes(Set<LimitViolationType> violationTypes)", "class_method_signature": "LimitViolationFilter.setViolationTypes(Set<LimitViolationType> violationTypes)", "testcase": false, "constructor": false}, {"identifier": "getMinBaseVoltage", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMinBaseVoltage()", "full_signature": "public double getMinBaseVoltage()", "class_method_signature": "LimitViolationFilter.getMinBaseVoltage()", "testcase": false, "constructor": false}, {"identifier": "setMinBaseVoltage", "parameters": "(double minBaseVoltage)", "modifiers": "public", "return": "LimitViolationFilter", "signature": "LimitViolationFilter setMinBaseVoltage(double minBaseVoltage)", "full_signature": "public LimitViolationFilter setMinBaseVoltage(double minBaseVoltage)", "class_method_signature": "LimitViolationFilter.setMinBaseVoltage(double minBaseVoltage)", "testcase": false, "constructor": false}, {"identifier": "getCountries", "parameters": "()", "modifiers": "public", "return": "Set<Country>", "signature": "Set<Country> getCountries()", "full_signature": "public Set<Country> getCountries()", "class_method_signature": "LimitViolationFilter.getCountries()", "testcase": false, "constructor": false}, {"identifier": "setCountries", "parameters": "(Set<Country> countries)", "modifiers": "public", "return": "LimitViolationFilter", "signature": "LimitViolationFilter setCountries(Set<Country> countries)", "full_signature": "public LimitViolationFilter setCountries(Set<Country> countries)", "class_method_signature": "LimitViolationFilter.setCountries(Set<Country> countries)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(List<LimitViolation> violations, Network network)", "modifiers": "public", "return": "List<LimitViolation>", "signature": "List<LimitViolation> apply(List<LimitViolation> violations, Network network)", "full_signature": "public List<LimitViolation> apply(List<LimitViolation> violations, Network network)", "class_method_signature": "LimitViolationFilter.apply(List<LimitViolation> violations, Network network)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(Country country)", "modifiers": "private", "return": "boolean", "signature": "boolean accept(Country country)", "full_signature": "private boolean accept(Country country)", "class_method_signature": "LimitViolationFilter.accept(Country country)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(double baseVoltage)", "modifiers": "private", "return": "boolean", "signature": "boolean accept(double baseVoltage)", "full_signature": "private boolean accept(double baseVoltage)", "class_method_signature": "LimitViolationFilter.accept(double baseVoltage)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(LimitViolationType limitViolationType)", "modifiers": "private", "return": "boolean", "signature": "boolean accept(LimitViolationType limitViolationType)", "full_signature": "private boolean accept(LimitViolationType limitViolationType)", "class_method_signature": "LimitViolationFilter.accept(LimitViolationType limitViolationType)", "testcase": false, "constructor": false}], "file": "security-analysis-api/src/main/java/com/powsybl/security/LimitViolationFilter.java"}, "focal_method": {"identifier": "load", "parameters": "()", "modifiers": "public static", "return": "LimitViolationFilter", "body": "public static LimitViolationFilter load() {\n        return load(PlatformConfig.defaultConfig());\n    }", "signature": "LimitViolationFilter load()", "full_signature": "public static LimitViolationFilter load()", "class_method_signature": "LimitViolationFilter.load()", "testcase": false, "constructor": false, "invocations": ["load", "defaultConfig"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}