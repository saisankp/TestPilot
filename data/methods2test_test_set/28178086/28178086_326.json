{"test_class": {"identifier": "RationalFunctionTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/maths/polynomials/RationalFunctionTest.java"}, "test_case": {"identifier": "testDrop", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDrop() {\n        Polynomial n=Polynomial.valueOf(1,-.2,-.3), d=Polynomial.valueOf(1,-1.8,1);\n        RationalFunction fn=new RationalFunction(n, d);\n        RationalFunction fn2=fn.drop(10);\n        for (int i=0; i<50; ++i){\n            assertTrue(Math.abs(fn.get(i+10)-fn2.get(i))<1e-9);\n        }\n        \n    }", "signature": "void testDrop()", "full_signature": "@Test public void testDrop()", "class_method_signature": "RationalFunctionTest.testDrop()", "testcase": true, "constructor": false, "invocations": ["valueOf", "valueOf", "drop", "assertTrue", "abs", "get", "get"]}, "focal_class": {"identifier": "RationalFunction", "superclass": "", "interfaces": "", "fields": [{"original_string": "private double[] m_c;", "modifier": "private", "type": "double[]", "declarator": "m_c", "var_name": "m_c"}, {"original_string": "private final Polynomial m_pn;", "modifier": "private final", "type": "Polynomial", "declarator": "m_pn", "var_name": "m_pn"}, {"original_string": "private final Polynomial m_pd;", "modifier": "private final", "type": "Polynomial", "declarator": "m_pd", "var_name": "m_pd"}, {"original_string": "public static final double EPSILON = 1.0e-12;", "modifier": "public static final", "type": "double", "declarator": "EPSILON = 1.0e-12", "var_name": "EPSILON"}, {"original_string": "private final static int g_atom = 32;", "modifier": "private final static", "type": "int", "declarator": "g_atom = 32", "var_name": "g_atom"}], "methods": [{"identifier": "RationalFunction", "parameters": "()", "modifiers": "public", "return": "", "signature": " RationalFunction()", "full_signature": "public  RationalFunction()", "class_method_signature": "RationalFunction.RationalFunction()", "testcase": false, "constructor": true}, {"identifier": "RationalFunction", "parameters": "(final Polynomial pn, final Polynomial pd)", "modifiers": "public", "return": "", "signature": " RationalFunction(final Polynomial pn, final Polynomial pd)", "full_signature": "public  RationalFunction(final Polynomial pn, final Polynomial pd)", "class_method_signature": "RationalFunction.RationalFunction(final Polynomial pn, final Polynomial pd)", "testcase": false, "constructor": true}, {"identifier": "coefficients", "parameters": "(final int n)", "modifiers": "public", "return": "double[]", "signature": "double[] coefficients(final int n)", "full_signature": "public double[] coefficients(final int n)", "class_method_signature": "RationalFunction.coefficients(final int n)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(final RationalFunction r2)", "modifiers": "public", "return": "RationalFunction", "signature": "RationalFunction divide(final RationalFunction r2)", "full_signature": "public RationalFunction divide(final RationalFunction r2)", "class_method_signature": "RationalFunction.divide(final RationalFunction r2)", "testcase": false, "constructor": false}, {"identifier": "drop", "parameters": "(final int n)", "modifiers": "public", "return": "RationalFunction", "signature": "RationalFunction drop(final int n)", "full_signature": "public RationalFunction drop(final int n)", "class_method_signature": "RationalFunction.drop(final int n)", "testcase": false, "constructor": false}, {"identifier": "evaluateAt", "parameters": "(final Complex c)", "modifiers": "public", "return": "Complex", "signature": "Complex evaluateAt(final Complex c)", "full_signature": "public Complex evaluateAt(final Complex c)", "class_method_signature": "RationalFunction.evaluateAt(final Complex c)", "testcase": false, "constructor": false}, {"identifier": "evaluateAt", "parameters": "(final double x)", "modifiers": "public", "return": "double", "signature": "double evaluateAt(final double x)", "full_signature": "public double evaluateAt(final double x)", "class_method_signature": "RationalFunction.evaluateAt(final double x)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final int k)", "modifiers": "public", "return": "double", "signature": "double get(final int k)", "full_signature": "public double get(final int k)", "class_method_signature": "RationalFunction.get(final int k)", "testcase": false, "constructor": false}, {"identifier": "getDenominator", "parameters": "()", "modifiers": "public", "return": "Polynomial", "signature": "Polynomial getDenominator()", "full_signature": "public Polynomial getDenominator()", "class_method_signature": "RationalFunction.getDenominator()", "testcase": false, "constructor": false}, {"identifier": "getNumerator", "parameters": "()", "modifiers": "public", "return": "Polynomial", "signature": "Polynomial getNumerator()", "full_signature": "public Polynomial getNumerator()", "class_method_signature": "RationalFunction.getNumerator()", "testcase": false, "constructor": false}, {"identifier": "isFinite", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFinite()", "full_signature": "public boolean isFinite()", "class_method_signature": "RationalFunction.isFinite()", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(final RationalFunction r2)", "modifiers": "public", "return": "RationalFunction", "signature": "RationalFunction minus(final RationalFunction r2)", "full_signature": "public RationalFunction minus(final RationalFunction r2)", "class_method_signature": "RationalFunction.minus(final RationalFunction r2)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(final RationalFunction r2)", "modifiers": "public", "return": "RationalFunction", "signature": "RationalFunction plus(final RationalFunction r2)", "full_signature": "public RationalFunction plus(final RationalFunction r2)", "class_method_signature": "RationalFunction.plus(final RationalFunction r2)", "testcase": false, "constructor": false}, {"identifier": "poles", "parameters": "()", "modifiers": "public", "return": "Complex[]", "signature": "Complex[] poles()", "full_signature": "public Complex[] poles()", "class_method_signature": "RationalFunction.poles()", "testcase": false, "constructor": false}, {"identifier": "poles", "parameters": "(final IRootsSolver searcher)", "modifiers": "public", "return": "Complex[]", "signature": "Complex[] poles(final IRootsSolver searcher)", "full_signature": "public Complex[] poles(final IRootsSolver searcher)", "class_method_signature": "RationalFunction.poles(final IRootsSolver searcher)", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "(int degree)", "modifiers": "public", "return": "void", "signature": "void prepare(int degree)", "full_signature": "public void prepare(int degree)", "class_method_signature": "RationalFunction.prepare(int degree)", "testcase": false, "constructor": false}, {"identifier": "roots", "parameters": "()", "modifiers": "public", "return": "Complex[]", "signature": "Complex[] roots()", "full_signature": "public Complex[] roots()", "class_method_signature": "RationalFunction.roots()", "testcase": false, "constructor": false}, {"identifier": "roots", "parameters": "(final IRootsSolver searcher)", "modifiers": "public", "return": "Complex[]", "signature": "Complex[] roots(final IRootsSolver searcher)", "full_signature": "public Complex[] roots(final IRootsSolver searcher)", "class_method_signature": "RationalFunction.roots(final IRootsSolver searcher)", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(final RationalFunction r2)", "modifiers": "public", "return": "RationalFunction", "signature": "RationalFunction times(final RationalFunction r2)", "full_signature": "public RationalFunction times(final RationalFunction r2)", "class_method_signature": "RationalFunction.times(final RationalFunction r2)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RationalFunction.toString()", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/maths/polynomials/RationalFunction.java"}, "focal_method": {"identifier": "drop", "parameters": "(final int n)", "modifiers": "public", "return": "RationalFunction", "body": "public RationalFunction drop(final int n) {\n        Polynomial cn = m_pn, cd = m_pd;\n\n        // size of the numerator:\n        int p = cd.getDegree() + 1;\n        int q = p;// -1;\n        if (cn.getDegree() + 1 - n > q) {\n            q = cn.getDegree() + 1 - n;\n        }\n        if (q == 0) {\n            return new RationalFunction();\n        }\n        double[] phi = new double[q];\n        double[] ntmp = new double[q];\n        for (int i = 0; i < q; ++i) {\n            phi[i] = get(i + n);\n        }\n\n        ntmp[0] = phi[0] * cd.get(0);\n        for (int i = 1; i < q; ++i) {\n            double s = 0;\n            int imax = i < q ? i : q - 1;\n            for (int j = 0; j <= imax; ++j) {\n                int k = i - j;\n                if (k < p) {\n                    s += cd.get(k) * phi[j];\n                }\n            }\n            if (Math.abs(s) < EPSILON) {\n                s = 0;\n            }\n            ntmp[i] = s;\n        }\n        // simplifiy ntmp\n        int qc = q;\n        while ((qc > 0) && (ntmp[qc - 1] == 0)) {\n            --qc;\n        }\n        if (qc == 0)\n            return new RationalFunction();\n        if (qc != q) {\n            double[] ntmp2 = new double[qc];\n            for (int i = 0; i < qc; ++i) {\n                ntmp2[i] = ntmp[i];\n            }\n            ntmp = ntmp2;\n        }\n        return new RationalFunction(Polynomial.of(ntmp), cd);\n\n    }", "signature": "RationalFunction drop(final int n)", "full_signature": "public RationalFunction drop(final int n)", "class_method_signature": "RationalFunction.drop(final int n)", "testcase": false, "constructor": false, "invocations": ["getDegree", "getDegree", "getDegree", "get", "get", "get", "abs", "of"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}