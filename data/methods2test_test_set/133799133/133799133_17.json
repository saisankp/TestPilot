{"test_class": {"identifier": "CoreConfigurationDtoTest", "superclass": "", "interfaces": "", "fields": [], "file": "poseidas/src/test/java/de/governikus/eumw/poseidas/server/idprovider/config/CoreConfigurationDtoTest.java"}, "test_case": {"identifier": "validateConfigThrowsExceptionWhenDuplicatedEntityPresent", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void validateConfigThrowsExceptionWhenDuplicatedEntityPresent() throws Exception\n  {\n    InputStream resourceAsStream = CoreConfigurationDtoTest.class.getResourceAsStream(\"/POSeIDAS-duplicated-SP.xml\");\n    byte[] bytes = ByteStreams.toByteArray(resourceAsStream);\n    Reader reader = CharSource.wrap(new String(bytes)).openStream();\n\n    Assertions.assertThrows(InvalidConfigurationException.class, () -> CoreConfigurationDto.readFrom(reader));\n  }", "signature": "void validateConfigThrowsExceptionWhenDuplicatedEntityPresent()", "full_signature": "@Test void validateConfigThrowsExceptionWhenDuplicatedEntityPresent()", "class_method_signature": "CoreConfigurationDtoTest.validateConfigThrowsExceptionWhenDuplicatedEntityPresent()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "toByteArray", "openStream", "wrap", "assertThrows", "readFrom"]}, "focal_class": {"identifier": "CoreConfigurationDto", "superclass": "extends AbstractConfigDto<CoreConfigurationType>", "interfaces": "", "fields": [{"original_string": "private Map<String, ServiceProviderDto> serviceProviders;", "modifier": "private", "type": "Map<String, ServiceProviderDto>", "declarator": "serviceProviders", "var_name": "serviceProviders"}], "methods": [{"identifier": "CoreConfigurationDto", "parameters": "(CoreConfigurationType jaxBConfig)", "modifiers": "", "return": "", "signature": " CoreConfigurationDto(CoreConfigurationType jaxBConfig)", "full_signature": "  CoreConfigurationDto(CoreConfigurationType jaxBConfig)", "class_method_signature": "CoreConfigurationDto.CoreConfigurationDto(CoreConfigurationType jaxBConfig)", "testcase": false, "constructor": true}, {"identifier": "setJaxbConfig", "parameters": "(CoreConfigurationType jaxBConfig)", "modifiers": "@Override protected", "return": "void", "signature": "void setJaxbConfig(CoreConfigurationType jaxBConfig)", "full_signature": "@Override protected void setJaxbConfig(CoreConfigurationType jaxBConfig)", "class_method_signature": "CoreConfigurationDto.setJaxbConfig(CoreConfigurationType jaxBConfig)", "testcase": false, "constructor": false}, {"identifier": "readFrom", "parameters": "(Reader reader)", "modifiers": "@SuppressWarnings(\"unchecked\") static", "return": "CoreConfigurationDto", "signature": "CoreConfigurationDto readFrom(Reader reader)", "full_signature": "@SuppressWarnings(\"unchecked\") static CoreConfigurationDto readFrom(Reader reader)", "class_method_signature": "CoreConfigurationDto.readFrom(Reader reader)", "testcase": false, "constructor": false}, {"identifier": "getJaxbConfig", "parameters": "()", "modifiers": "@Override public", "return": "CoreConfigurationType", "signature": "CoreConfigurationType getJaxbConfig()", "full_signature": "@Override public CoreConfigurationType getJaxbConfig()", "class_method_signature": "CoreConfigurationDto.getJaxbConfig()", "testcase": false, "constructor": false}, {"identifier": "getServerUrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getServerUrl()", "full_signature": "public String getServerUrl()", "class_method_signature": "CoreConfigurationDto.getServerUrl()", "testcase": false, "constructor": false}, {"identifier": "setServerUrl", "parameters": "(String serverUrl)", "modifiers": "public", "return": "void", "signature": "void setServerUrl(String serverUrl)", "full_signature": "public void setServerUrl(String serverUrl)", "class_method_signature": "CoreConfigurationDto.setServerUrl(String serverUrl)", "testcase": false, "constructor": false}, {"identifier": "getServiceProvider", "parameters": "()", "modifiers": "public", "return": "Map<String, ServiceProviderDto>", "signature": "Map<String, ServiceProviderDto> getServiceProvider()", "full_signature": "public Map<String, ServiceProviderDto> getServiceProvider()", "class_method_signature": "CoreConfigurationDto.getServiceProvider()", "testcase": false, "constructor": false}, {"identifier": "isSessionManagerUsesDatabase", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSessionManagerUsesDatabase()", "full_signature": "public boolean isSessionManagerUsesDatabase()", "class_method_signature": "CoreConfigurationDto.isSessionManagerUsesDatabase()", "testcase": false, "constructor": false}, {"identifier": "setSessionManagerUsesDatabase", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setSessionManagerUsesDatabase(boolean value)", "full_signature": "public void setSessionManagerUsesDatabase(boolean value)", "class_method_signature": "CoreConfigurationDto.setSessionManagerUsesDatabase(boolean value)", "testcase": false, "constructor": false}, {"identifier": "getSessionMaxPendingRequests", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSessionMaxPendingRequests()", "full_signature": "public int getSessionMaxPendingRequests()", "class_method_signature": "CoreConfigurationDto.getSessionMaxPendingRequests()", "testcase": false, "constructor": false}, {"identifier": "setSessionMaxPendingRequests", "parameters": "(int value)", "modifiers": "public", "return": "void", "signature": "void setSessionMaxPendingRequests(int value)", "full_signature": "public void setSessionMaxPendingRequests(int value)", "class_method_signature": "CoreConfigurationDto.setSessionMaxPendingRequests(int value)", "testcase": false, "constructor": false}, {"identifier": "getTimerConfiguration", "parameters": "()", "modifiers": "public", "return": "TimerConfigurationType", "signature": "TimerConfigurationType getTimerConfiguration()", "full_signature": "public TimerConfigurationType getTimerConfiguration()", "class_method_signature": "CoreConfigurationDto.getTimerConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getAllowedDocumentTypes", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getAllowedDocumentTypes()", "full_signature": "public Set<String> getAllowedDocumentTypes()", "class_method_signature": "CoreConfigurationDto.getAllowedDocumentTypes()", "testcase": false, "constructor": false}, {"identifier": "validateConfig", "parameters": "(CoreConfigurationType config)", "modifiers": "private static", "return": "void", "signature": "void validateConfig(CoreConfigurationType config)", "full_signature": "private static void validateConfig(CoreConfigurationType config)", "class_method_signature": "CoreConfigurationDto.validateConfig(CoreConfigurationType config)", "testcase": false, "constructor": false}], "file": "poseidas/src/main/java/de/governikus/eumw/poseidas/server/idprovider/config/CoreConfigurationDto.java"}, "focal_method": {"identifier": "readFrom", "parameters": "(Reader reader)", "modifiers": "@SuppressWarnings(\"unchecked\") static", "return": "CoreConfigurationDto", "body": "@SuppressWarnings(\"unchecked\") static CoreConfigurationDto readFrom(Reader reader)\n    throws JAXBException, InvalidConfigurationException\n  {\n    JAXBContext context = JAXBContext.newInstance(ObjectFactory.class);\n    Object po = context.createUnmarshaller().unmarshal(reader);\n    CoreConfigurationType parsed = null;\n    if (po instanceof CoreConfigurationType)\n    {\n      parsed = (CoreConfigurationType)po;\n    }\n    else\n    {\n      parsed = ((JAXBElement<CoreConfigurationType>)po).getValue();\n    }\n    validateConfig(parsed);\n    return new CoreConfigurationDto(parsed);\n  }", "signature": "CoreConfigurationDto readFrom(Reader reader)", "full_signature": "@SuppressWarnings(\"unchecked\") static CoreConfigurationDto readFrom(Reader reader)", "class_method_signature": "CoreConfigurationDto.readFrom(Reader reader)", "testcase": false, "constructor": false, "invocations": ["newInstance", "unmarshal", "createUnmarshaller", "getValue", "validateConfig"]}, "repository": {"repo_id": 133799133, "url": "https://github.com/Governikus/eidas-middleware", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 15, "size": 2286, "license": "licensed"}}