{"test_class": {"identifier": "MembershipResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ApiDate NOW = ApiDate.now();", "modifier": "private static final", "type": "ApiDate", "declarator": "NOW = ApiDate.now()", "var_name": "NOW"}, {"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock AclDAO aclDAO;", "modifier": "@Mock", "type": "AclDAO", "declarator": "aclDAO", "var_name": "aclDAO"}, {"original_string": "User user = User.named(\"user\");", "modifier": "", "type": "User", "declarator": "user = User.named(\"user\")", "var_name": "user"}, {"original_string": "Client client = new Client(44, \"client\", \"desc\", null, NOW, \"creator\", NOW, \"updater\", null, null,\n      true, false);", "modifier": "", "type": "Client", "declarator": "client = new Client(44, \"client\", \"desc\", null, NOW, \"creator\", NOW, \"updater\", null, null,\n      true, false)", "var_name": "client"}, {"original_string": "Group group = new Group(55, \"group\", null, null, null, null, null, null);", "modifier": "", "type": "Group", "declarator": "group = new Group(55, \"group\", null, null, null, null, null, null)", "var_name": "group"}, {"original_string": "Secret secret = new Secret(66, \"secret\", null, () -> \"shush\", \"checksum\", NOW, null, NOW, null, null, null, null, 0, 1L, NOW, null);", "modifier": "", "type": "Secret", "declarator": "secret = new Secret(66, \"secret\", null, () -> \"shush\", \"checksum\", NOW, null, NOW, null, null, null, null, 0, 1L, NOW, null)", "var_name": "secret"}, {"original_string": "AuditLog auditLog = new SimpleLogger();", "modifier": "", "type": "AuditLog", "declarator": "auditLog = new SimpleLogger()", "var_name": "auditLog"}, {"original_string": "MembershipResource resource;", "modifier": "", "type": "MembershipResource", "declarator": "resource", "var_name": "resource"}], "file": "server/src/test/java/keywhiz/service/resources/admin/MembershipResourceTest.java"}, "test_case": {"identifier": "enrollThrowsWhenClientIdNotFound", "parameters": "()", "modifiers": "@Test(expected = NotFoundException.class) public", "return": "void", "body": "@Test(expected = NotFoundException.class)\n  public void enrollThrowsWhenClientIdNotFound() {\n    doThrow(IllegalStateException.class).when(aclDAO).findAndEnrollClient(6092384, group.getId(), auditLog, \"user\",new HashMap<>());\n    resource.enrollClient(user, new LongParam(\"6092384\"), new LongParam(Long.toString(group.getId())));\n  }", "signature": "void enrollThrowsWhenClientIdNotFound()", "full_signature": "@Test(expected = NotFoundException.class) public void enrollThrowsWhenClientIdNotFound()", "class_method_signature": "MembershipResourceTest.enrollThrowsWhenClientIdNotFound()", "testcase": true, "constructor": false, "invocations": ["findAndEnrollClient", "when", "doThrow", "getId", "enrollClient", "toString", "getId"]}, "focal_class": {"identifier": "MembershipResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(MembershipResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(MembershipResource.class)", "var_name": "logger"}, {"original_string": "private final AclDAO aclDAO;", "modifier": "private final", "type": "AclDAO", "declarator": "aclDAO", "var_name": "aclDAO"}, {"original_string": "private final AuditLog auditLog;", "modifier": "private final", "type": "AuditLog", "declarator": "auditLog", "var_name": "auditLog"}], "methods": [{"identifier": "MembershipResource", "parameters": "(AclDAOFactory aclDAOFactory, AuditLog auditLog)", "modifiers": "@Inject public", "return": "", "signature": " MembershipResource(AclDAOFactory aclDAOFactory, AuditLog auditLog)", "full_signature": "@Inject public  MembershipResource(AclDAOFactory aclDAOFactory, AuditLog auditLog)", "class_method_signature": "MembershipResource.MembershipResource(AclDAOFactory aclDAOFactory, AuditLog auditLog)", "testcase": false, "constructor": true}, {"identifier": "MembershipResource", "parameters": "(AclDAO aclDAO, AuditLog auditLog)", "modifiers": "@VisibleForTesting", "return": "", "signature": " MembershipResource(AclDAO aclDAO, AuditLog auditLog)", "full_signature": "@VisibleForTesting  MembershipResource(AclDAO aclDAO, AuditLog auditLog)", "class_method_signature": "MembershipResource.MembershipResource(AclDAO aclDAO, AuditLog auditLog)", "testcase": false, "constructor": true}, {"identifier": "allowAccess", "parameters": "(\n      @Auth User user,\n      @PathParam(\"secretId\") LongParam secretId,\n      @PathParam(\"groupId\") LongParam groupId)", "modifiers": "@Path(\"/secrets/{secretId}/groups/{groupId}\") @Timed @ExceptionMetered @PUT public", "return": "Response", "signature": "Response allowAccess(\n      @Auth User user,\n      @PathParam(\"secretId\") LongParam secretId,\n      @PathParam(\"groupId\") LongParam groupId)", "full_signature": "@Path(\"/secrets/{secretId}/groups/{groupId}\") @Timed @ExceptionMetered @PUT public Response allowAccess(\n      @Auth User user,\n      @PathParam(\"secretId\") LongParam secretId,\n      @PathParam(\"groupId\") LongParam groupId)", "class_method_signature": "MembershipResource.allowAccess(\n      @Auth User user,\n      @PathParam(\"secretId\") LongParam secretId,\n      @PathParam(\"groupId\") LongParam groupId)", "testcase": false, "constructor": false}, {"identifier": "disallowAccess", "parameters": "(\n      @Auth User user,\n      @PathParam(\"secretId\") LongParam secretId,\n      @PathParam(\"groupId\") LongParam groupId)", "modifiers": "@Path(\"/secrets/{secretId}/groups/{groupId}\") @Timed @ExceptionMetered @DELETE public", "return": "Response", "signature": "Response disallowAccess(\n      @Auth User user,\n      @PathParam(\"secretId\") LongParam secretId,\n      @PathParam(\"groupId\") LongParam groupId)", "full_signature": "@Path(\"/secrets/{secretId}/groups/{groupId}\") @Timed @ExceptionMetered @DELETE public Response disallowAccess(\n      @Auth User user,\n      @PathParam(\"secretId\") LongParam secretId,\n      @PathParam(\"groupId\") LongParam groupId)", "class_method_signature": "MembershipResource.disallowAccess(\n      @Auth User user,\n      @PathParam(\"secretId\") LongParam secretId,\n      @PathParam(\"groupId\") LongParam groupId)", "testcase": false, "constructor": false}, {"identifier": "enrollClient", "parameters": "(\n    @Auth User user,\n    @PathParam(\"clientId\") LongParam clientId,\n    @PathParam(\"groupId\") LongParam groupId)", "modifiers": "@Path(\"/clients/{clientId}/groups/{groupId}\") @Timed @ExceptionMetered @PUT public", "return": "Response", "signature": "Response enrollClient(\n    @Auth User user,\n    @PathParam(\"clientId\") LongParam clientId,\n    @PathParam(\"groupId\") LongParam groupId)", "full_signature": "@Path(\"/clients/{clientId}/groups/{groupId}\") @Timed @ExceptionMetered @PUT public Response enrollClient(\n    @Auth User user,\n    @PathParam(\"clientId\") LongParam clientId,\n    @PathParam(\"groupId\") LongParam groupId)", "class_method_signature": "MembershipResource.enrollClient(\n    @Auth User user,\n    @PathParam(\"clientId\") LongParam clientId,\n    @PathParam(\"groupId\") LongParam groupId)", "testcase": false, "constructor": false}, {"identifier": "evictClient", "parameters": "(\n      @Auth User user,\n      @PathParam(\"clientId\") LongParam clientId,\n      @PathParam(\"groupId\") LongParam groupId)", "modifiers": "@Path(\"/clients/{clientId}/groups/{groupId}\") @Timed @ExceptionMetered @DELETE public", "return": "Response", "signature": "Response evictClient(\n      @Auth User user,\n      @PathParam(\"clientId\") LongParam clientId,\n      @PathParam(\"groupId\") LongParam groupId)", "full_signature": "@Path(\"/clients/{clientId}/groups/{groupId}\") @Timed @ExceptionMetered @DELETE public Response evictClient(\n      @Auth User user,\n      @PathParam(\"clientId\") LongParam clientId,\n      @PathParam(\"groupId\") LongParam groupId)", "class_method_signature": "MembershipResource.evictClient(\n      @Auth User user,\n      @PathParam(\"clientId\") LongParam clientId,\n      @PathParam(\"groupId\") LongParam groupId)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/resources/admin/MembershipResource.java"}, "focal_method": {"identifier": "enrollClient", "parameters": "(\n    @Auth User user,\n    @PathParam(\"clientId\") LongParam clientId,\n    @PathParam(\"groupId\") LongParam groupId)", "modifiers": "@Path(\"/clients/{clientId}/groups/{groupId}\") @Timed @ExceptionMetered @PUT public", "return": "Response", "body": "@Path(\"/clients/{clientId}/groups/{groupId}\")\n  @Timed @ExceptionMetered\n  @PUT\n  public Response enrollClient(\n    @Auth User user,\n    @PathParam(\"clientId\") LongParam clientId,\n    @PathParam(\"groupId\") LongParam groupId) {\n\n    logger.info(\"User {} enrolling clientId {} in groupId {}.\", user.getName(), clientId, groupId);\n\n    try {\n      aclDAO.findAndEnrollClient(clientId.get(), groupId.get(), auditLog, user.getName(), new HashMap<>());\n    } catch (IllegalStateException e) {\n      throw new NotFoundException();\n    }\n\n    return Response.ok().build();\n  }", "signature": "Response enrollClient(\n    @Auth User user,\n    @PathParam(\"clientId\") LongParam clientId,\n    @PathParam(\"groupId\") LongParam groupId)", "full_signature": "@Path(\"/clients/{clientId}/groups/{groupId}\") @Timed @ExceptionMetered @PUT public Response enrollClient(\n    @Auth User user,\n    @PathParam(\"clientId\") LongParam clientId,\n    @PathParam(\"groupId\") LongParam groupId)", "class_method_signature": "MembershipResource.enrollClient(\n    @Auth User user,\n    @PathParam(\"clientId\") LongParam clientId,\n    @PathParam(\"groupId\") LongParam groupId)", "testcase": false, "constructor": false, "invocations": ["info", "getName", "findAndEnrollClient", "get", "get", "getName", "build", "ok"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}