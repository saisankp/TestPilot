{"test_class": {"identifier": "ValidationExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private DocumentViewXmlValidator docViewXmlValidator;", "modifier": "@Mock\n    private", "type": "DocumentViewXmlValidator", "declarator": "docViewXmlValidator", "var_name": "docViewXmlValidator"}, {"original_string": "@Mock\n    private PropertiesValidator propertiesValidator;", "modifier": "@Mock\n    private", "type": "PropertiesValidator", "declarator": "propertiesValidator", "var_name": "propertiesValidator"}, {"original_string": "@Mock\n    private NodePathValidator nodePathValidator;", "modifier": "@Mock\n    private", "type": "NodePathValidator", "declarator": "nodePathValidator", "var_name": "nodePathValidator"}, {"original_string": "@Mock\n    private GenericJcrDataValidator genericJcrDataValidator;", "modifier": "@Mock\n    private", "type": "GenericJcrDataValidator", "declarator": "genericJcrDataValidator", "var_name": "genericJcrDataValidator"}, {"original_string": "@Mock\n    private GenericJcrDataValidator genericJcrDataValidator2;", "modifier": "@Mock\n    private", "type": "GenericJcrDataValidator", "declarator": "genericJcrDataValidator2", "var_name": "genericJcrDataValidator2"}, {"original_string": "@Mock\n    private GenericMetaInfDataValidator genericMetaInfDataValidator;", "modifier": "@Mock\n    private", "type": "GenericMetaInfDataValidator", "declarator": "genericMetaInfDataValidator", "var_name": "genericMetaInfDataValidator"}, {"original_string": "@Mock\n    private GenericMetaInfDataValidator genericMetaInfDataValidator2;", "modifier": "@Mock\n    private", "type": "GenericMetaInfDataValidator", "declarator": "genericMetaInfDataValidator2", "var_name": "genericMetaInfDataValidator2"}, {"original_string": "@Mock\n    private JcrPathValidator jcrPathValidator;", "modifier": "@Mock\n    private", "type": "JcrPathValidator", "declarator": "jcrPathValidator", "var_name": "jcrPathValidator"}, {"original_string": "@Mock\n    private MetaInfPathValidator metaInfPathValidator;", "modifier": "@Mock\n    private", "type": "MetaInfPathValidator", "declarator": "metaInfPathValidator", "var_name": "metaInfPathValidator"}, {"original_string": "@Mock\n    private Validator unusedValidator;", "modifier": "@Mock\n    private", "type": "Validator", "declarator": "unusedValidator", "var_name": "unusedValidator"}, {"original_string": "@Mock\n    private ValidationContext context;", "modifier": "@Mock\n    private", "type": "ValidationContext", "declarator": "context", "var_name": "context"}, {"original_string": "private ValidationExecutor executor;", "modifier": "private", "type": "ValidationExecutor", "declarator": "executor", "var_name": "executor"}], "file": "vault-validation/src/test/java/org/apache/jackrabbit/vault/validation/ValidationExecutorTest.java"}, "test_case": {"identifier": "testDone", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDone() {\n        Mockito.when(genericJcrDataValidator.done()).thenReturn(Collections.singleton(new ValidationMessage(ValidationMessageSeverity.ERROR, \"test1\")));\n        Mockito.when(genericJcrDataValidator2.done()).thenReturn(Collections.singleton(new ValidationMessage(ValidationMessageSeverity.WARN, \"test2\")));\n        \n        assertViolation(executor.done(), new ValidationViolation(\"genericjcrdataid\", ValidationMessageSeverity.ERROR, \"test1\"), new ValidationViolation(\"genericjcrdataid2\", ValidationMessageSeverity.WARN, \"test2\")); \n    }", "signature": "void testDone()", "full_signature": "@Test public void testDone()", "class_method_signature": "ValidationExecutorTest.testDone()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "done", "singleton", "thenReturn", "when", "done", "singleton", "assertViolation", "done"]}, "focal_class": {"identifier": "ValidationExecutor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<String, DocumentViewXmlValidator> documentViewXmlValidators;", "modifier": "private final", "type": "Map<String, DocumentViewXmlValidator>", "declarator": "documentViewXmlValidators", "var_name": "documentViewXmlValidators"}, {"original_string": "private final Map<String, NodePathValidator> nodePathValidators;", "modifier": "private final", "type": "Map<String, NodePathValidator>", "declarator": "nodePathValidators", "var_name": "nodePathValidators"}, {"original_string": "private final Map<String, GenericJcrDataValidator> genericJcrDataValidators;", "modifier": "private final", "type": "Map<String, GenericJcrDataValidator>", "declarator": "genericJcrDataValidators", "var_name": "genericJcrDataValidators"}, {"original_string": "private final Map<String, GenericMetaInfDataValidator> genericMetaInfDataValidators;", "modifier": "private final", "type": "Map<String, GenericMetaInfDataValidator>", "declarator": "genericMetaInfDataValidators", "var_name": "genericMetaInfDataValidators"}, {"original_string": "private final Map<String, MetaInfPathValidator> metaInfPathValidators;", "modifier": "private final", "type": "Map<String, MetaInfPathValidator>", "declarator": "metaInfPathValidators", "var_name": "metaInfPathValidators"}, {"original_string": "private final Map<String, JcrPathValidator> jcrPathValidators;", "modifier": "private final", "type": "Map<String, JcrPathValidator>", "declarator": "jcrPathValidators", "var_name": "jcrPathValidators"}, {"original_string": "private final Map<String, FilterValidator> filterValidators;", "modifier": "private final", "type": "Map<String, FilterValidator>", "declarator": "filterValidators", "var_name": "filterValidators"}, {"original_string": "private final Map<String, PropertiesValidator> propertiesValidators;", "modifier": "private final", "type": "Map<String, PropertiesValidator>", "declarator": "propertiesValidators", "var_name": "propertiesValidators"}, {"original_string": "private final @NotNull Map<String, Validator> validatorsById;", "modifier": "private final @NotNull", "type": "Map<String, Validator>", "declarator": "validatorsById", "var_name": "validatorsById"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(ValidationExecutor.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ValidationExecutor.class)", "var_name": "log"}], "methods": [{"identifier": "ValidationExecutor", "parameters": "(@NotNull Map<String, Validator> validatorsById)", "modifiers": "public", "return": "", "signature": " ValidationExecutor(@NotNull Map<String, Validator> validatorsById)", "full_signature": "public  ValidationExecutor(@NotNull Map<String, Validator> validatorsById)", "class_method_signature": "ValidationExecutor.ValidationExecutor(@NotNull Map<String, Validator> validatorsById)", "testcase": false, "constructor": true}, {"identifier": "getAllValidatorsById", "parameters": "()", "modifiers": "public @NotNull", "return": "Map<String, Validator>", "signature": "Map<String, Validator> getAllValidatorsById()", "full_signature": "public @NotNull Map<String, Validator> getAllValidatorsById()", "class_method_signature": "ValidationExecutor.getAllValidatorsById()", "testcase": false, "constructor": false}, {"identifier": "getUnusedValidatorsById", "parameters": "()", "modifiers": "public @NotNull", "return": "Map<String, Validator>", "signature": "Map<String, Validator> getUnusedValidatorsById()", "full_signature": "public @NotNull Map<String, Validator> getUnusedValidatorsById()", "class_method_signature": "ValidationExecutor.getUnusedValidatorsById()", "testcase": false, "constructor": false}, {"identifier": "validateMetaInf", "parameters": "(@Nullable InputStream input, @NotNull Path filePath, @NotNull Path basePath)", "modifiers": "public @NotNull", "return": "Collection<ValidationViolation>", "signature": "Collection<ValidationViolation> validateMetaInf(@Nullable InputStream input, @NotNull Path filePath, @NotNull Path basePath)", "full_signature": "public @NotNull Collection<ValidationViolation> validateMetaInf(@Nullable InputStream input, @NotNull Path filePath, @NotNull Path basePath)", "class_method_signature": "ValidationExecutor.validateMetaInf(@Nullable InputStream input, @NotNull Path filePath, @NotNull Path basePath)", "testcase": false, "constructor": false}, {"identifier": "validateJcrRoot", "parameters": "(@Nullable InputStream input, @NotNull Path filePath, @NotNull Path basePath)", "modifiers": "public @NotNull", "return": "Collection<ValidationViolation>", "signature": "Collection<ValidationViolation> validateJcrRoot(@Nullable InputStream input, @NotNull Path filePath, @NotNull Path basePath)", "full_signature": "public @NotNull Collection<ValidationViolation> validateJcrRoot(@Nullable InputStream input, @NotNull Path filePath, @NotNull Path basePath)", "class_method_signature": "ValidationExecutor.validateJcrRoot(@Nullable InputStream input, @NotNull Path filePath, @NotNull Path basePath)", "testcase": false, "constructor": false}, {"identifier": "done", "parameters": "()", "modifiers": "public @NotNull", "return": "Collection<ValidationViolation>", "signature": "Collection<ValidationViolation> done()", "full_signature": "public @NotNull Collection<ValidationViolation> done()", "class_method_signature": "ValidationExecutor.done()", "testcase": false, "constructor": false}, {"identifier": "validateNodePaths", "parameters": "(Path filePath, Path basePath, Map<String, Integer> nodePathsAndLineNumbers)", "modifiers": "private", "return": "Collection<ValidationViolation>", "signature": "Collection<ValidationViolation> validateNodePaths(Path filePath, Path basePath, Map<String, Integer> nodePathsAndLineNumbers)", "full_signature": "private Collection<ValidationViolation> validateNodePaths(Path filePath, Path basePath, Map<String, Integer> nodePathsAndLineNumbers)", "class_method_signature": "ValidationExecutor.validateNodePaths(Path filePath, Path basePath, Map<String, Integer> nodePathsAndLineNumbers)", "testcase": false, "constructor": false}, {"identifier": "validateGenericMetaInfData", "parameters": "(@Nullable InputStream input, @NotNull Path filePath, @NotNull Path basePath)", "modifiers": "private", "return": "Collection<ValidationViolation>", "signature": "Collection<ValidationViolation> validateGenericMetaInfData(@Nullable InputStream input, @NotNull Path filePath, @NotNull Path basePath)", "full_signature": "private Collection<ValidationViolation> validateGenericMetaInfData(@Nullable InputStream input, @NotNull Path filePath, @NotNull Path basePath)", "class_method_signature": "ValidationExecutor.validateGenericMetaInfData(@Nullable InputStream input, @NotNull Path filePath, @NotNull Path basePath)", "testcase": false, "constructor": false}, {"identifier": "validateGenericJcrData", "parameters": "(@Nullable InputStream input, @NotNull Path filePath, @NotNull Path basePath)", "modifiers": "private", "return": "Collection<ValidationViolation>", "signature": "Collection<ValidationViolation> validateGenericJcrData(@Nullable InputStream input, @NotNull Path filePath, @NotNull Path basePath)", "full_signature": "private Collection<ValidationViolation> validateGenericJcrData(@Nullable InputStream input, @NotNull Path filePath, @NotNull Path basePath)", "class_method_signature": "ValidationExecutor.validateGenericJcrData(@Nullable InputStream input, @NotNull Path filePath, @NotNull Path basePath)", "testcase": false, "constructor": false}, {"identifier": "filePathToNodePath", "parameters": "(@NotNull Path filePath)", "modifiers": "public static @NotNull", "return": "String", "signature": "String filePathToNodePath(@NotNull Path filePath)", "full_signature": "public static @NotNull String filePathToNodePath(@NotNull Path filePath)", "class_method_signature": "ValidationExecutor.filePathToNodePath(@NotNull Path filePath)", "testcase": false, "constructor": false}, {"identifier": "filterValidatorsByClass", "parameters": "(Map<String, Validator> allValidators, Class<T> type)", "modifiers": "static", "return": "Map<String, T>", "signature": "Map<String, T> filterValidatorsByClass(Map<String, Validator> allValidators, Class<T> type)", "full_signature": "static Map<String, T> filterValidatorsByClass(Map<String, Validator> allValidators, Class<T> type)", "class_method_signature": "ValidationExecutor.filterValidatorsByClass(Map<String, Validator> allValidators, Class<T> type)", "testcase": false, "constructor": false}], "file": "vault-validation/src/main/java/org/apache/jackrabbit/vault/validation/ValidationExecutor.java"}, "focal_method": {"identifier": "done", "parameters": "()", "modifiers": "public @NotNull", "return": "Collection<ValidationViolation>", "body": "public @NotNull Collection<ValidationViolation> done() {\n        Collection<ValidationViolation> allViolations = new LinkedList<>();\n        // go through all validators (even the nested ones)\n        for (Map.Entry<String, Validator>entry : validatorsById.entrySet()) {\n            try {\n                Collection<ValidationMessage> violations = entry.getValue().done();\n                if (violations != null && !violations.isEmpty()) {\n                    allViolations.addAll(ValidationViolation.wrapMessages(entry.getKey(), violations, null, null, null, 0, 0));\n                }\n            } catch (RuntimeException e) {\n                throw new ValidatorException(entry.getKey(), e);\n            }\n        }\n        return allViolations;\n    }", "signature": "Collection<ValidationViolation> done()", "full_signature": "public @NotNull Collection<ValidationViolation> done()", "class_method_signature": "ValidationExecutor.done()", "testcase": false, "constructor": false, "invocations": ["entrySet", "done", "getValue", "isEmpty", "addAll", "wrapMessages", "getKey", "getKey"]}, "repository": {"repo_id": 16021499, "url": "https://github.com/apache/jackrabbit-filevault", "stars": 24, "created": "1/18/2014 8:00:07 AM +00:00", "updates": "2020-01-22T11:47:21+00:00", "fork": "False", "license": "licensed"}}