{"test_class": {"identifier": "CodecUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger LOGGER = LoggerFactory.getLogger(CodecUtilsTest.class);", "modifier": "private final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CodecUtilsTest.class)", "var_name": "LOGGER"}], "file": "core/common/src/test/java/com/alipay/sofa/rpc/common/utils/CodecUtilsTest.java"}, "test_case": {"identifier": "intToBytes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void intToBytes() {\n        int i = 1000;\n        byte[] bs = CodecUtils.intToBytes(i);\n        Assert.assertArrayEquals(bs, new byte[] { 0, 0, 3, -24 });\n\n        i = 0;\n        bs = CodecUtils.intToBytes(i);\n        Assert.assertArrayEquals(bs, new byte[] { 0, 0, 0, 0 });\n\n        int s = 16777218; // =1*256*256*256+ 0*256*256 +  0*256 + 2\n        bs = CodecUtils.intToBytes(s);\n        Assert.assertEquals(bs[0], 1);\n        Assert.assertEquals(bs[1], 0);\n        Assert.assertEquals(bs[2], 0);\n        Assert.assertEquals(bs[3], 2);\n    }", "signature": "void intToBytes()", "full_signature": "@Test public void intToBytes()", "class_method_signature": "CodecUtilsTest.intToBytes()", "testcase": true, "constructor": false, "invocations": ["intToBytes", "assertArrayEquals", "intToBytes", "assertArrayEquals", "intToBytes", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "CodecUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Object[]   EMPTY_OBJECT_ARRAY = new Object[0];", "modifier": "public static final", "type": "Object[]", "declarator": "EMPTY_OBJECT_ARRAY = new Object[0]", "var_name": "EMPTY_OBJECT_ARRAY"}, {"original_string": "public static final Class<?>[] EMPTY_CLASS_ARRAY  = new Class<?>[0];", "modifier": "public static final", "type": "Class<?>[]", "declarator": "EMPTY_CLASS_ARRAY  = new Class<?>[0]", "var_name": "EMPTY_CLASS_ARRAY"}], "methods": [{"identifier": "intToBytes", "parameters": "(int num)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] intToBytes(int num)", "full_signature": "public static byte[] intToBytes(int num)", "class_method_signature": "CodecUtils.intToBytes(int num)", "testcase": false, "constructor": false}, {"identifier": "bytesToInt", "parameters": "(byte[] ary)", "modifiers": "public static", "return": "int", "signature": "int bytesToInt(byte[] ary)", "full_signature": "public static int bytesToInt(byte[] ary)", "class_method_signature": "CodecUtils.bytesToInt(byte[] ary)", "testcase": false, "constructor": false}, {"identifier": "short2bytes", "parameters": "(short num)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] short2bytes(short num)", "full_signature": "public static byte[] short2bytes(short num)", "class_method_signature": "CodecUtils.short2bytes(short num)", "testcase": false, "constructor": false}, {"identifier": "copyOf", "parameters": "(byte[] src, int length)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] copyOf(byte[] src, int length)", "full_signature": "public static byte[] copyOf(byte[] src, int length)", "class_method_signature": "CodecUtils.copyOf(byte[] src, int length)", "testcase": false, "constructor": false}, {"identifier": "parseHigh4Low4Bytes", "parameters": "(byte b)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] parseHigh4Low4Bytes(byte b)", "full_signature": "public static byte[] parseHigh4Low4Bytes(byte b)", "class_method_signature": "CodecUtils.parseHigh4Low4Bytes(byte b)", "testcase": false, "constructor": false}, {"identifier": "buildHigh4Low4Bytes", "parameters": "(byte high4, byte low4)", "modifiers": "public static", "return": "byte", "signature": "byte buildHigh4Low4Bytes(byte high4, byte low4)", "full_signature": "public static byte buildHigh4Low4Bytes(byte high4, byte low4)", "class_method_signature": "CodecUtils.buildHigh4Low4Bytes(byte high4, byte low4)", "testcase": false, "constructor": false}, {"identifier": "parseHigh2Low6Bytes", "parameters": "(byte b)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] parseHigh2Low6Bytes(byte b)", "full_signature": "public static byte[] parseHigh2Low6Bytes(byte b)", "class_method_signature": "CodecUtils.parseHigh2Low6Bytes(byte b)", "testcase": false, "constructor": false}, {"identifier": "buildHigh2Low6Bytes", "parameters": "(byte high2, byte low6)", "modifiers": "public static", "return": "byte", "signature": "byte buildHigh2Low6Bytes(byte high2, byte low6)", "full_signature": "public static byte buildHigh2Low6Bytes(byte high2, byte low6)", "class_method_signature": "CodecUtils.buildHigh2Low6Bytes(byte high2, byte low6)", "testcase": false, "constructor": false}, {"identifier": "byteToBits", "parameters": "(byte b)", "modifiers": "public static", "return": "String", "signature": "String byteToBits(byte b)", "full_signature": "public static String byteToBits(byte b)", "class_method_signature": "CodecUtils.byteToBits(byte b)", "testcase": false, "constructor": false}, {"identifier": "bitsToByte", "parameters": "(String bits)", "modifiers": "public static", "return": "byte", "signature": "byte bitsToByte(String bits)", "full_signature": "public static byte bitsToByte(String bits)", "class_method_signature": "CodecUtils.bitsToByte(String bits)", "testcase": false, "constructor": false}, {"identifier": "startsWith", "parameters": "(byte[] bs, byte[] head)", "modifiers": "public static", "return": "boolean", "signature": "boolean startsWith(byte[] bs, byte[] head)", "full_signature": "public static boolean startsWith(byte[] bs, byte[] head)", "class_method_signature": "CodecUtils.startsWith(byte[] bs, byte[] head)", "testcase": false, "constructor": false}, {"identifier": "byte2Booleans", "parameters": "(byte b)", "modifiers": "public static", "return": "boolean[]", "signature": "boolean[] byte2Booleans(byte b)", "full_signature": "public static boolean[] byte2Booleans(byte b)", "class_method_signature": "CodecUtils.byte2Booleans(byte b)", "testcase": false, "constructor": false}, {"identifier": "booleansToByte", "parameters": "(boolean[] array)", "modifiers": "public static", "return": "byte", "signature": "byte booleansToByte(boolean[] array)", "full_signature": "public static byte booleansToByte(boolean[] array)", "class_method_signature": "CodecUtils.booleansToByte(boolean[] array)", "testcase": false, "constructor": false}, {"identifier": "byte2hex", "parameters": "(byte[] bytes)", "modifiers": "public static", "return": "String", "signature": "String byte2hex(byte[] bytes)", "full_signature": "public static String byte2hex(byte[] bytes)", "class_method_signature": "CodecUtils.byte2hex(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "hex2byte", "parameters": "(String str)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] hex2byte(String str)", "full_signature": "public static byte[] hex2byte(String str)", "class_method_signature": "CodecUtils.hex2byte(String str)", "testcase": false, "constructor": false}, {"identifier": "getBooleanFromByte", "parameters": "(byte modifiers, int i)", "modifiers": "public static", "return": "boolean", "signature": "boolean getBooleanFromByte(byte modifiers, int i)", "full_signature": "public static boolean getBooleanFromByte(byte modifiers, int i)", "class_method_signature": "CodecUtils.getBooleanFromByte(byte modifiers, int i)", "testcase": false, "constructor": false}, {"identifier": "setBooleanToByte", "parameters": "(byte modifiers, int i, boolean bool)", "modifiers": "public static", "return": "byte", "signature": "byte setBooleanToByte(byte modifiers, int i, boolean bool)", "full_signature": "public static byte setBooleanToByte(byte modifiers, int i, boolean bool)", "class_method_signature": "CodecUtils.setBooleanToByte(byte modifiers, int i, boolean bool)", "testcase": false, "constructor": false}, {"identifier": "flatCopyTo", "parameters": "(String prefix, Map<String, Object> sourceMap,\n                                  Map<String, String> dstMap)", "modifiers": "public static", "return": "void", "signature": "void flatCopyTo(String prefix, Map<String, Object> sourceMap,\n                                  Map<String, String> dstMap)", "full_signature": "public static void flatCopyTo(String prefix, Map<String, Object> sourceMap,\n                                  Map<String, String> dstMap)", "class_method_signature": "CodecUtils.flatCopyTo(String prefix, Map<String, Object> sourceMap,\n                                  Map<String, String> dstMap)", "testcase": false, "constructor": false}, {"identifier": "treeCopyTo", "parameters": "(String prefix, Map<String, String> sourceMap,\n                                  Map<String, String> dstMap, boolean remove)", "modifiers": "public static", "return": "void", "signature": "void treeCopyTo(String prefix, Map<String, String> sourceMap,\n                                  Map<String, String> dstMap, boolean remove)", "full_signature": "public static void treeCopyTo(String prefix, Map<String, String> sourceMap,\n                                  Map<String, String> dstMap, boolean remove)", "class_method_signature": "CodecUtils.treeCopyTo(String prefix, Map<String, String> sourceMap,\n                                  Map<String, String> dstMap, boolean remove)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/com/alipay/sofa/rpc/common/utils/CodecUtils.java"}, "focal_method": {"identifier": "intToBytes", "parameters": "(int num)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] intToBytes(int num) {\n        byte[] result = new byte[4];\n        result[0] = (byte) (num >>> 24);//\u53d6\u6700\u9ad88\u4f4d\u653e\u52300\u4e0b\u6807\n        result[1] = (byte) (num >>> 16);//\u53d6\u6b21\u9ad88\u4e3a\u653e\u52301\u4e0b\u6807\n        result[2] = (byte) (num >>> 8); //\u53d6\u6b21\u4f4e8\u4f4d\u653e\u52302\u4e0b\u6807\n        result[3] = (byte) (num); //\u53d6\u6700\u4f4e8\u4f4d\u653e\u52303\u4e0b\u6807\n        return result;\n    }", "signature": "byte[] intToBytes(int num)", "full_signature": "public static byte[] intToBytes(int num)", "class_method_signature": "CodecUtils.intToBytes(int num)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}