{"test_class": {"identifier": "UserGoodsOrderServiceTest", "superclass": "extends BaseSpringJunitUtil", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate UserGoodsOrderService userGoodsOrderService;", "modifier": "@Autowired\n\tprivate", "type": "UserGoodsOrderService", "declarator": "userGoodsOrderService", "var_name": "userGoodsOrderService"}, {"original_string": "private Set<UserGoodsOrderPo> userGoodsOrders = new LinkedHashSet<UserGoodsOrderPo>();", "modifier": "private", "type": "Set<UserGoodsOrderPo>", "declarator": "userGoodsOrders = new LinkedHashSet<UserGoodsOrderPo>()", "var_name": "userGoodsOrders"}], "file": "xa-collector/src/test/java/com/xinnet/xa/collector/saletrack/service/impl/UserGoodsOrderServiceTest.java"}, "test_case": {"identifier": "testBatchUpdate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testBatchUpdate() throws Exception{\n\t\tuserGoodsOrders = new LinkedHashSet<UserGoodsOrderPo>();\n\t\tfor(int i=0; i<=1;i++){\n\t\t\tUserGoodsOrderPo userGoodsOrderPo = new UserGoodsOrderPo();\n\t\t\tuserGoodsOrderPo.setBusinessOperationType(\"3\");\n\t\t\tuserGoodsOrderPo.setShopCartCookieId(\"28bccde8-ce2c-490f-a06a-7158654dfc8f\");\n\t\t\tuserGoodsOrderPo.setShopCartGoodsCookieId(\"2C72B63CFC804B259DF83B4C927CF1F1\");\n\t\t\tuserGoodsOrderPo.setGoodsName(\"\u5c0a\u4eabI\u578b\");\n\t\t\tuserGoodsOrderPo.setHyCode(\"hy439009\");\n\t\t\tuserGoodsOrders.add(userGoodsOrderPo);\n\t\t}\n\t\tuserGoodsOrderService.batchUpdate(userGoodsOrders);\n\t}", "signature": "void testBatchUpdate()", "full_signature": "@Test public void testBatchUpdate()", "class_method_signature": "UserGoodsOrderServiceTest.testBatchUpdate()", "testcase": true, "constructor": false, "invocations": ["setBusinessOperationType", "setShopCartCookieId", "setShopCartGoodsCookieId", "setGoodsName", "setHyCode", "add", "batchUpdate"]}, "focal_class": {"identifier": "UserGoodsOrderService", "superclass": "", "interfaces": "implements IUserGoodsOrderService", "fields": [{"original_string": "private final static Logger logger = Logger.getLogger(UserGoodsOrderService.class);", "modifier": "private final static", "type": "Logger", "declarator": "logger = Logger.getLogger(UserGoodsOrderService.class)", "var_name": "logger"}, {"original_string": "@Autowired\n\tprivate UserGoodsOrderDao userGoodsOrderDao;", "modifier": "@Autowired\n\tprivate", "type": "UserGoodsOrderDao", "declarator": "userGoodsOrderDao", "var_name": "userGoodsOrderDao"}], "methods": [{"identifier": "batchInsert", "parameters": "(Set<UserGoodsOrderPo> set)", "modifiers": "@Override public", "return": "void", "signature": "void batchInsert(Set<UserGoodsOrderPo> set)", "full_signature": "@Override public void batchInsert(Set<UserGoodsOrderPo> set)", "class_method_signature": "UserGoodsOrderService.batchInsert(Set<UserGoodsOrderPo> set)", "testcase": false, "constructor": false}, {"identifier": "batchUpdate", "parameters": "(Set<UserGoodsOrderPo> set)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void batchUpdate(Set<UserGoodsOrderPo> set)", "full_signature": "@Override public synchronized void batchUpdate(Set<UserGoodsOrderPo> set)", "class_method_signature": "UserGoodsOrderService.batchUpdate(Set<UserGoodsOrderPo> set)", "testcase": false, "constructor": false}, {"identifier": "convertUpdateUserGoodsOrder", "parameters": "(UserGoodsOrderPo userGoodsOrder, UserGoodsOrderPo userGoodsOrderPo)", "modifiers": "private synchronized", "return": "void", "signature": "void convertUpdateUserGoodsOrder(UserGoodsOrderPo userGoodsOrder, UserGoodsOrderPo userGoodsOrderPo)", "full_signature": "private synchronized void convertUpdateUserGoodsOrder(UserGoodsOrderPo userGoodsOrder, UserGoodsOrderPo userGoodsOrderPo)", "class_method_signature": "UserGoodsOrderService.convertUpdateUserGoodsOrder(UserGoodsOrderPo userGoodsOrder, UserGoodsOrderPo userGoodsOrderPo)", "testcase": false, "constructor": false}, {"identifier": "processingData", "parameters": "(Set<UserGoodsOrderDetailVo> userGoodsOrderDetailVos)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void processingData(Set<UserGoodsOrderDetailVo> userGoodsOrderDetailVos)", "full_signature": "@Override public synchronized void processingData(Set<UserGoodsOrderDetailVo> userGoodsOrderDetailVos)", "class_method_signature": "UserGoodsOrderService.processingData(Set<UserGoodsOrderDetailVo> userGoodsOrderDetailVos)", "testcase": false, "constructor": false}, {"identifier": "getUserGoodsOrderPoMap", "parameters": "(Set<UserGoodsOrderDetailVo> userGoodsOrderDetailVos )", "modifiers": "private", "return": "Map<String,LinkedHashSet<UserGoodsOrderPo>>", "signature": "Map<String,LinkedHashSet<UserGoodsOrderPo>> getUserGoodsOrderPoMap(Set<UserGoodsOrderDetailVo> userGoodsOrderDetailVos )", "full_signature": "private Map<String,LinkedHashSet<UserGoodsOrderPo>> getUserGoodsOrderPoMap(Set<UserGoodsOrderDetailVo> userGoodsOrderDetailVos )", "class_method_signature": "UserGoodsOrderService.getUserGoodsOrderPoMap(Set<UserGoodsOrderDetailVo> userGoodsOrderDetailVos )", "testcase": false, "constructor": false}, {"identifier": "convertUserGoodsOrderDetailVoTo", "parameters": "(UserGoodsOrderDetailVo userGoodsOrderDetailVo)", "modifiers": "private", "return": "UserGoodsOrderPo", "signature": "UserGoodsOrderPo convertUserGoodsOrderDetailVoTo(UserGoodsOrderDetailVo userGoodsOrderDetailVo)", "full_signature": "private UserGoodsOrderPo convertUserGoodsOrderDetailVoTo(UserGoodsOrderDetailVo userGoodsOrderDetailVo)", "class_method_signature": "UserGoodsOrderService.convertUserGoodsOrderDetailVoTo(UserGoodsOrderDetailVo userGoodsOrderDetailVo)", "testcase": false, "constructor": false}], "file": "xa-collector/src/main/java/com/xinnet/xa/collector/saletrack/service/impl/UserGoodsOrderService.java"}, "focal_method": {"identifier": "batchUpdate", "parameters": "(Set<UserGoodsOrderPo> set)", "modifiers": "@Override public synchronized", "return": "void", "body": "@Override\n\tpublic synchronized void batchUpdate(Set<UserGoodsOrderPo> set) throws Exception{\n\t\tif(null != set){\n\t\t\tList<UserGoodsOrderPo> UserGoodsOrderPos = new ArrayList<UserGoodsOrderPo>();\n\t\t\tfor (UserGoodsOrderPo userGoodsOrder : set) {\n\t\t\t\tif(StringUtils.isNotBlank(userGoodsOrder.getShopCartGoodsCookieId())){\n\t\t\t\t   logger.info(\"Update action\uff0cBusinessOperationType\"+ userGoodsOrder.getBusinessOperationType());\t\n\t\t\t\t   UserGoodsOrderPo po = userGoodsOrderDao.findBy(userGoodsOrder.getShopCartGoodsCookieId());   \n\t\t\t\t   if(null != po){\n\t\t\t\t\t   logger.info(\"Update before UserGoodsOrderPo:\"+po);\n\t\t\t\t\t   convertUpdateUserGoodsOrder(userGoodsOrder, po);\t\n\t\t\t\t\t   logger.info(\"Updata UserGoodsOrderPo:\"+po);\n\t\t\t\t\t   UserGoodsOrderPos.add(po);\t\t   \n\t\t\t\t   }\n\t\t\t\t   else{\n\t\t\t\t\t   logger.warn(\"WARN...! \" + userGoodsOrder);\n\t\t\t\t\t   userGoodsOrderDao.save(userGoodsOrder);\n\t\t\t\t   }\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tlogger.warn(\"Update UserGoodsOrderPo Entity then GoodsCookieId and ShopCartCookieId is not null.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tlogger.info(\"\u6b63\u5728 Update \"+ UserGoodsOrderPos.size() +\" UserGoodsOrderPo\");\n\t\t\ttry {\n\t\t\t\t userGoodsOrderDao.save(UserGoodsOrderPos);\n\t\t\t} catch (IllegalArgumentException e) {\n\t\t\t\tlogger.error(\"\u6279\u91cf\u66f4\u65b0\u5931\u8d25\uff0c\u5931\u8d25\u539f\u56e0\uff1a\"+e.getMessage(),e);\n\t\t\t}\n\t\t}\n\t}", "signature": "void batchUpdate(Set<UserGoodsOrderPo> set)", "full_signature": "@Override public synchronized void batchUpdate(Set<UserGoodsOrderPo> set)", "class_method_signature": "UserGoodsOrderService.batchUpdate(Set<UserGoodsOrderPo> set)", "testcase": false, "constructor": false, "invocations": ["isNotBlank", "getShopCartGoodsCookieId", "info", "tBusinessOperationType()", "findBy", "getShopCartGoodsCookieId", "info", "convertUpdateUserGoodsOrder", "info", "add", "warn", "save", "warn", "info", "() +", "save", "error", ""]}, "repository": {"repo_id": 47752557, "url": "https://github.com/yanweiqi/xinnet-analysis", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 13, "size": 187, "license": "licensed"}}