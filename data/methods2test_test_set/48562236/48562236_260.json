{"test_class": {"identifier": "BeansTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "base/lang/src/test/java/leap/lang/BeansTest.java"}, "test_case": {"identifier": "testBeanPropertyWithoutField", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testBeanPropertyWithoutField() {\n\t\tBeanType bt = BeanType.of(TestedBean.class);\n\t\t\n\t\tBeanProperty ok = bt.getProperty(\"ok\");\n\t\tassertEquals(Boolean.TRUE,ok.getValue(new TestedBean()));\n\t\t\n\t\tBeanProperty intValue = bt.getProperty(\"intValue\");\n\t\tassertEquals(new Integer(100), intValue.getValue(new TestedBean()));\n\t}", "signature": "void testBeanPropertyWithoutField()", "full_signature": "@Test public void testBeanPropertyWithoutField()", "class_method_signature": "BeansTest.testBeanPropertyWithoutField()", "testcase": true, "constructor": false, "invocations": ["of", "getProperty", "assertEquals", "getValue", "getProperty", "assertEquals", "getValue"]}, "focal_class": {"identifier": "Beans", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String SETTER_PREFIX = \"set\";", "modifier": "public static final", "type": "String", "declarator": "SETTER_PREFIX = \"set\"", "var_name": "SETTER_PREFIX"}, {"original_string": "public static final String GETTER_PREFIX = \"get\";", "modifier": "public static final", "type": "String", "declarator": "GETTER_PREFIX = \"get\"", "var_name": "GETTER_PREFIX"}, {"original_string": "public static final String IS_PREFIX     = \"is\";", "modifier": "public static final", "type": "String", "declarator": "IS_PREFIX     = \"is\"", "var_name": "IS_PREFIX"}], "methods": [{"identifier": "isSimpleProperty", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSimpleProperty(Class<?> clazz)", "full_signature": "public static boolean isSimpleProperty(Class<?> clazz)", "class_method_signature": "Beans.isSimpleProperty(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isSetterMethod", "parameters": "(String methodName)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSetterMethod(String methodName)", "full_signature": "public static boolean isSetterMethod(String methodName)", "class_method_signature": "Beans.isSetterMethod(String methodName)", "testcase": false, "constructor": false}, {"identifier": "isGetterMethod", "parameters": "(String methodName)", "modifiers": "public static", "return": "boolean", "signature": "boolean isGetterMethod(String methodName)", "full_signature": "public static boolean isGetterMethod(String methodName)", "class_method_signature": "Beans.isGetterMethod(String methodName)", "testcase": false, "constructor": false}, {"identifier": "extractPropertyFromSetter", "parameters": "(String methodName)", "modifiers": "public static", "return": "String", "signature": "String extractPropertyFromSetter(String methodName)", "full_signature": "public static String extractPropertyFromSetter(String methodName)", "class_method_signature": "Beans.extractPropertyFromSetter(String methodName)", "testcase": false, "constructor": false}, {"identifier": "extraPropertyFromGetter", "parameters": "(String methodName)", "modifiers": "public static", "return": "String", "signature": "String extraPropertyFromGetter(String methodName)", "full_signature": "public static String extraPropertyFromGetter(String methodName)", "class_method_signature": "Beans.extraPropertyFromGetter(String methodName)", "testcase": false, "constructor": false}, {"identifier": "toMap", "parameters": "(Object bean)", "modifiers": "public static", "return": "Map<String,Object>", "signature": "Map<String,Object> toMap(Object bean)", "full_signature": "public static Map<String,Object> toMap(Object bean)", "class_method_signature": "Beans.toMap(Object bean)", "testcase": false, "constructor": false}, {"identifier": "copyNew", "parameters": "(T from)", "modifiers": "public static", "return": "T", "signature": "T copyNew(T from)", "full_signature": "public static T copyNew(T from)", "class_method_signature": "Beans.copyNew(T from)", "testcase": false, "constructor": false}, {"identifier": "copyProperties", "parameters": "(Object from,Object to)", "modifiers": "public static", "return": "void", "signature": "void copyProperties(Object from,Object to)", "full_signature": "public static void copyProperties(Object from,Object to)", "class_method_signature": "Beans.copyProperties(Object from,Object to)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(BeanType beanType,Object bean,String property)", "modifiers": "public static", "return": "Object", "signature": "Object getProperty(BeanType beanType,Object bean,String property)", "full_signature": "public static Object getProperty(BeanType beanType,Object bean,String property)", "class_method_signature": "Beans.getProperty(BeanType beanType,Object bean,String property)", "testcase": false, "constructor": false}, {"identifier": "getNestableProperty", "parameters": "(Object bean,String property)", "modifiers": "public static", "return": "Object", "signature": "Object getNestableProperty(Object bean,String property)", "full_signature": "public static Object getNestableProperty(Object bean,String property)", "class_method_signature": "Beans.getNestableProperty(Object bean,String property)", "testcase": false, "constructor": false}, {"identifier": "getNestableProperty", "parameters": "(Map map, String property)", "modifiers": "public static", "return": "Object", "signature": "Object getNestableProperty(Map map, String property)", "full_signature": "public static Object getNestableProperty(Map map, String property)", "class_method_signature": "Beans.getNestableProperty(Map map, String property)", "testcase": false, "constructor": false}, {"identifier": "getNestableProperty", "parameters": "(BeanType beanType, Object bean, String property)", "modifiers": "public static", "return": "Object", "signature": "Object getNestableProperty(BeanType beanType, Object bean, String property)", "full_signature": "public static Object getNestableProperty(BeanType beanType, Object bean, String property)", "class_method_signature": "Beans.getNestableProperty(BeanType beanType, Object bean, String property)", "testcase": false, "constructor": false}, {"identifier": "fromMapNestable", "parameters": "(BeanType beanType, Map<String, Object> map)", "modifiers": "public static", "return": "T", "signature": "T fromMapNestable(BeanType beanType, Map<String, Object> map)", "full_signature": "public static T fromMapNestable(BeanType beanType, Map<String, Object> map)", "class_method_signature": "Beans.fromMapNestable(BeanType beanType, Map<String, Object> map)", "testcase": false, "constructor": false}, {"identifier": "getNestedProperty", "parameters": "(BeanType beanType,Object bean,BeanProperty bp,String nestedProperty)", "modifiers": "protected static", "return": "Object", "signature": "Object getNestedProperty(BeanType beanType,Object bean,BeanProperty bp,String nestedProperty)", "full_signature": "protected static Object getNestedProperty(BeanType beanType,Object bean,BeanProperty bp,String nestedProperty)", "class_method_signature": "Beans.getNestedProperty(BeanType beanType,Object bean,BeanProperty bp,String nestedProperty)", "testcase": false, "constructor": false}, {"identifier": "getNestedMapProperty", "parameters": "(BeanType beanType,Object bean,BeanProperty bp,String nestedProperty)", "modifiers": "protected static", "return": "Object", "signature": "Object getNestedMapProperty(BeanType beanType,Object bean,BeanProperty bp,String nestedProperty)", "full_signature": "protected static Object getNestedMapProperty(BeanType beanType,Object bean,BeanProperty bp,String nestedProperty)", "class_method_signature": "Beans.getNestedMapProperty(BeanType beanType,Object bean,BeanProperty bp,String nestedProperty)", "testcase": false, "constructor": false}, {"identifier": "setProperties", "parameters": "(BeanType beanType,Object bean,Map<String, Object> map)", "modifiers": "public static", "return": "void", "signature": "void setProperties(BeanType beanType,Object bean,Map<String, Object> map)", "full_signature": "public static void setProperties(BeanType beanType,Object bean,Map<String, Object> map)", "class_method_signature": "Beans.setProperties(BeanType beanType,Object bean,Map<String, Object> map)", "testcase": false, "constructor": false}, {"identifier": "setPropertiesNestable", "parameters": "(BeanType beanType, Object bean, Map<String, Object> map)", "modifiers": "public static", "return": "void", "signature": "void setPropertiesNestable(BeanType beanType, Object bean, Map<String, Object> map)", "full_signature": "public static void setPropertiesNestable(BeanType beanType, Object bean, Map<String, Object> map)", "class_method_signature": "Beans.setPropertiesNestable(BeanType beanType, Object bean, Map<String, Object> map)", "testcase": false, "constructor": false}, {"identifier": "setPropertiesNestableInternal", "parameters": "(BeanType beanType, T bean, Map<String, Object> map)", "modifiers": "private static", "return": "T", "signature": "T setPropertiesNestableInternal(BeanType beanType, T bean, Map<String, Object> map)", "full_signature": "private static T setPropertiesNestableInternal(BeanType beanType, T bean, Map<String, Object> map)", "class_method_signature": "Beans.setPropertiesNestableInternal(BeanType beanType, T bean, Map<String, Object> map)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(BeanType beanType,Object bean,String property,Object value)", "modifiers": "public static", "return": "void", "signature": "void setProperty(BeanType beanType,Object bean,String property,Object value)", "full_signature": "public static void setProperty(BeanType beanType,Object bean,String property,Object value)", "class_method_signature": "Beans.setProperty(BeanType beanType,Object bean,String property,Object value)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(BeanType beanType,Object bean,String property,Object value, boolean ignoreCase)", "modifiers": "public static", "return": "void", "signature": "void setProperty(BeanType beanType,Object bean,String property,Object value, boolean ignoreCase)", "full_signature": "public static void setProperty(BeanType beanType,Object bean,String property,Object value, boolean ignoreCase)", "class_method_signature": "Beans.setProperty(BeanType beanType,Object bean,String property,Object value, boolean ignoreCase)", "testcase": false, "constructor": false}, {"identifier": "setNestedProperty", "parameters": "(BeanType beanType,Object bean,BeanProperty bp,String nestedPropertyName,Object value)", "modifiers": "protected static", "return": "void", "signature": "void setNestedProperty(BeanType beanType,Object bean,BeanProperty bp,String nestedPropertyName,Object value)", "full_signature": "protected static void setNestedProperty(BeanType beanType,Object bean,BeanProperty bp,String nestedPropertyName,Object value)", "class_method_signature": "Beans.setNestedProperty(BeanType beanType,Object bean,BeanProperty bp,String nestedPropertyName,Object value)", "testcase": false, "constructor": false}, {"identifier": "setNestedMapProperty", "parameters": "(BeanType beanType,Object bean,BeanProperty bp,String nestedPropertyName,Object value)", "modifiers": "protected static", "return": "void", "signature": "void setNestedMapProperty(BeanType beanType,Object bean,BeanProperty bp,String nestedPropertyName,Object value)", "full_signature": "protected static void setNestedMapProperty(BeanType beanType,Object bean,BeanProperty bp,String nestedPropertyName,Object value)", "class_method_signature": "Beans.setNestedMapProperty(BeanType beanType,Object bean,BeanProperty bp,String nestedPropertyName,Object value)", "testcase": false, "constructor": false}, {"identifier": "getArrayProperty", "parameters": "(Object object,int index)", "modifiers": "protected static", "return": "Object", "signature": "Object getArrayProperty(Object object,int index)", "full_signature": "protected static Object getArrayProperty(Object object,int index)", "class_method_signature": "Beans.getArrayProperty(Object object,int index)", "testcase": false, "constructor": false}, {"identifier": "setArrayProperty", "parameters": "(BeanType beanType,Object bean,BeanProperty bp,int index,Object value)", "modifiers": "protected static", "return": "void", "signature": "void setArrayProperty(BeanType beanType,Object bean,BeanProperty bp,int index,Object value)", "full_signature": "protected static void setArrayProperty(BeanType beanType,Object bean,BeanProperty bp,int index,Object value)", "class_method_signature": "Beans.setArrayProperty(BeanType beanType,Object bean,BeanProperty bp,int index,Object value)", "testcase": false, "constructor": false}, {"identifier": "tryIncreaseSize", "parameters": "(List list, int maxIndex)", "modifiers": "protected static", "return": "void", "signature": "void tryIncreaseSize(List list, int maxIndex)", "full_signature": "protected static void tryIncreaseSize(List list, int maxIndex)", "class_method_signature": "Beans.tryIncreaseSize(List list, int maxIndex)", "testcase": false, "constructor": false}, {"identifier": "Beans", "parameters": "()", "modifiers": "protected", "return": "", "signature": " Beans()", "full_signature": "protected  Beans()", "class_method_signature": "Beans.Beans()", "testcase": false, "constructor": true}], "file": "base/lang/src/main/java/leap/lang/Beans.java"}, "focal_method": {"identifier": "getProperty", "parameters": "(BeanType beanType,Object bean,String property)", "modifiers": "public static", "return": "Object", "body": "public static Object getProperty(BeanType beanType,Object bean,String property) throws ObjectNotFoundException{\n    \tif(bean instanceof DynaBean){\n    \t\treturn ((DynaBean) bean).getProperty(property);\n    \t}\n    \t\n    \tBeanProperty bp = beanType.tryGetProperty(property);\n    \tif(null != bp){\n    \t\treturn bp.getValue(bean);\n    \t}\n    \t\n    \tthrow new ObjectNotFoundException(\"Property '\" + property + \"' not found in bean class '\" + bean.getClass().getName());\n    }", "signature": "Object getProperty(BeanType beanType,Object bean,String property)", "full_signature": "public static Object getProperty(BeanType beanType,Object bean,String property)", "class_method_signature": "Beans.getProperty(BeanType beanType,Object bean,String property)", "testcase": false, "constructor": false, "invocations": ["getProperty", "tryGetProperty", "getValue", "getName", "getClass"]}, "repository": {"repo_id": 48562236, "url": "https://github.com/leapframework/framework", "stars": 42, "created": "12/25/2015 1:54:52 AM +00:00", "updates": "2020-01-20T03:04:15+00:00", "fork": "False", "license": "licensed"}}