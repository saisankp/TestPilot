{"test_class": {"identifier": "ReactionTest", "superclass": "extends AbstractReactionTest", "interfaces": "", "fields": [], "file": "base/silent/src/test/java/org/openscience/cdk/silent/ReactionTest.java"}, "test_case": {"identifier": "testReaction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReaction() {\n        IReaction polymer = new Reaction();\n        Assert.assertTrue(polymer instanceof Reaction);\n    }", "signature": "void testReaction()", "full_signature": "@Test public void testReaction()", "class_method_signature": "ReactionTest.testReaction()", "testcase": true, "constructor": false, "invocations": ["assertTrue"]}, "focal_class": {"identifier": "Reaction", "superclass": "extends ChemObject", "interfaces": "implements Serializable, IReaction, Cloneable", "fields": [{"original_string": "private static final long   serialVersionUID = -554752558363533678L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -554752558363533678L", "var_name": "serialVersionUID"}, {"original_string": "protected int               growArraySize    = 3;", "modifier": "protected", "type": "int", "declarator": "growArraySize    = 3", "var_name": "growArraySize"}, {"original_string": "protected IAtomContainerSet reactants;", "modifier": "protected", "type": "IAtomContainerSet", "declarator": "reactants", "var_name": "reactants"}, {"original_string": "protected IAtomContainerSet products;", "modifier": "protected", "type": "IAtomContainerSet", "declarator": "products", "var_name": "products"}, {"original_string": "protected IAtomContainerSet agents;", "modifier": "protected", "type": "IAtomContainerSet", "declarator": "agents", "var_name": "agents"}, {"original_string": "protected IMapping[]        map;", "modifier": "protected", "type": "IMapping[]", "declarator": "map", "var_name": "map"}, {"original_string": "protected int               mappingCount;", "modifier": "protected", "type": "int", "declarator": "mappingCount", "var_name": "mappingCount"}, {"original_string": "private IReaction.Direction reactionDirection;", "modifier": "private", "type": "IReaction.Direction", "declarator": "reactionDirection", "var_name": "reactionDirection"}], "methods": [{"identifier": "Reaction", "parameters": "()", "modifiers": "public", "return": "", "signature": " Reaction()", "full_signature": "public  Reaction()", "class_method_signature": "Reaction.Reaction()", "testcase": false, "constructor": true}, {"identifier": "getReactantCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getReactantCount()", "full_signature": "@Override public int getReactantCount()", "class_method_signature": "Reaction.getReactantCount()", "testcase": false, "constructor": false}, {"identifier": "getProductCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getProductCount()", "full_signature": "@Override public int getProductCount()", "class_method_signature": "Reaction.getProductCount()", "testcase": false, "constructor": false}, {"identifier": "getReactants", "parameters": "()", "modifiers": "@Override public", "return": "IAtomContainerSet", "signature": "IAtomContainerSet getReactants()", "full_signature": "@Override public IAtomContainerSet getReactants()", "class_method_signature": "Reaction.getReactants()", "testcase": false, "constructor": false}, {"identifier": "setReactants", "parameters": "(IAtomContainerSet setOfMolecules)", "modifiers": "@Override public", "return": "void", "signature": "void setReactants(IAtomContainerSet setOfMolecules)", "full_signature": "@Override public void setReactants(IAtomContainerSet setOfMolecules)", "class_method_signature": "Reaction.setReactants(IAtomContainerSet setOfMolecules)", "testcase": false, "constructor": false}, {"identifier": "getProducts", "parameters": "()", "modifiers": "@Override public", "return": "IAtomContainerSet", "signature": "IAtomContainerSet getProducts()", "full_signature": "@Override public IAtomContainerSet getProducts()", "class_method_signature": "Reaction.getProducts()", "testcase": false, "constructor": false}, {"identifier": "setProducts", "parameters": "(IAtomContainerSet setOfMolecules)", "modifiers": "@Override public", "return": "void", "signature": "void setProducts(IAtomContainerSet setOfMolecules)", "full_signature": "@Override public void setProducts(IAtomContainerSet setOfMolecules)", "class_method_signature": "Reaction.setProducts(IAtomContainerSet setOfMolecules)", "testcase": false, "constructor": false}, {"identifier": "getAgents", "parameters": "()", "modifiers": "@Override public", "return": "IAtomContainerSet", "signature": "IAtomContainerSet getAgents()", "full_signature": "@Override public IAtomContainerSet getAgents()", "class_method_signature": "Reaction.getAgents()", "testcase": false, "constructor": false}, {"identifier": "mappings", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<IMapping>", "signature": "Iterable<IMapping> mappings()", "full_signature": "@Override public Iterable<IMapping> mappings()", "class_method_signature": "Reaction.mappings()", "testcase": false, "constructor": false}, {"identifier": "addReactant", "parameters": "(IAtomContainer reactant)", "modifiers": "@Override public", "return": "void", "signature": "void addReactant(IAtomContainer reactant)", "full_signature": "@Override public void addReactant(IAtomContainer reactant)", "class_method_signature": "Reaction.addReactant(IAtomContainer reactant)", "testcase": false, "constructor": false}, {"identifier": "addAgent", "parameters": "(IAtomContainer agent)", "modifiers": "@Override public", "return": "void", "signature": "void addAgent(IAtomContainer agent)", "full_signature": "@Override public void addAgent(IAtomContainer agent)", "class_method_signature": "Reaction.addAgent(IAtomContainer agent)", "testcase": false, "constructor": false}, {"identifier": "addReactant", "parameters": "(IAtomContainer reactant, Double coefficient)", "modifiers": "@Override public", "return": "void", "signature": "void addReactant(IAtomContainer reactant, Double coefficient)", "full_signature": "@Override public void addReactant(IAtomContainer reactant, Double coefficient)", "class_method_signature": "Reaction.addReactant(IAtomContainer reactant, Double coefficient)", "testcase": false, "constructor": false}, {"identifier": "addProduct", "parameters": "(IAtomContainer product)", "modifiers": "@Override public", "return": "void", "signature": "void addProduct(IAtomContainer product)", "full_signature": "@Override public void addProduct(IAtomContainer product)", "class_method_signature": "Reaction.addProduct(IAtomContainer product)", "testcase": false, "constructor": false}, {"identifier": "addProduct", "parameters": "(IAtomContainer product, Double coefficient)", "modifiers": "@Override public", "return": "void", "signature": "void addProduct(IAtomContainer product, Double coefficient)", "full_signature": "@Override public void addProduct(IAtomContainer product, Double coefficient)", "class_method_signature": "Reaction.addProduct(IAtomContainer product, Double coefficient)", "testcase": false, "constructor": false}, {"identifier": "getReactantCoefficient", "parameters": "(IAtomContainer reactant)", "modifiers": "@Override public", "return": "Double", "signature": "Double getReactantCoefficient(IAtomContainer reactant)", "full_signature": "@Override public Double getReactantCoefficient(IAtomContainer reactant)", "class_method_signature": "Reaction.getReactantCoefficient(IAtomContainer reactant)", "testcase": false, "constructor": false}, {"identifier": "getProductCoefficient", "parameters": "(IAtomContainer product)", "modifiers": "@Override public", "return": "Double", "signature": "Double getProductCoefficient(IAtomContainer product)", "full_signature": "@Override public Double getProductCoefficient(IAtomContainer product)", "class_method_signature": "Reaction.getProductCoefficient(IAtomContainer product)", "testcase": false, "constructor": false}, {"identifier": "setReactantCoefficient", "parameters": "(IAtomContainer reactant, Double coefficient)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean setReactantCoefficient(IAtomContainer reactant, Double coefficient)", "full_signature": "@Override public boolean setReactantCoefficient(IAtomContainer reactant, Double coefficient)", "class_method_signature": "Reaction.setReactantCoefficient(IAtomContainer reactant, Double coefficient)", "testcase": false, "constructor": false}, {"identifier": "setProductCoefficient", "parameters": "(IAtomContainer product, Double coefficient)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean setProductCoefficient(IAtomContainer product, Double coefficient)", "full_signature": "@Override public boolean setProductCoefficient(IAtomContainer product, Double coefficient)", "class_method_signature": "Reaction.setProductCoefficient(IAtomContainer product, Double coefficient)", "testcase": false, "constructor": false}, {"identifier": "getReactantCoefficients", "parameters": "()", "modifiers": "@Override public", "return": "Double[]", "signature": "Double[] getReactantCoefficients()", "full_signature": "@Override public Double[] getReactantCoefficients()", "class_method_signature": "Reaction.getReactantCoefficients()", "testcase": false, "constructor": false}, {"identifier": "getProductCoefficients", "parameters": "()", "modifiers": "@Override public", "return": "Double[]", "signature": "Double[] getProductCoefficients()", "full_signature": "@Override public Double[] getProductCoefficients()", "class_method_signature": "Reaction.getProductCoefficients()", "testcase": false, "constructor": false}, {"identifier": "setReactantCoefficients", "parameters": "(Double[] coefficients)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean setReactantCoefficients(Double[] coefficients)", "full_signature": "@Override public boolean setReactantCoefficients(Double[] coefficients)", "class_method_signature": "Reaction.setReactantCoefficients(Double[] coefficients)", "testcase": false, "constructor": false}, {"identifier": "setProductCoefficients", "parameters": "(Double[] coefficients)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean setProductCoefficients(Double[] coefficients)", "full_signature": "@Override public boolean setProductCoefficients(Double[] coefficients)", "class_method_signature": "Reaction.setProductCoefficients(Double[] coefficients)", "testcase": false, "constructor": false}, {"identifier": "setDirection", "parameters": "(IReaction.Direction direction)", "modifiers": "@Override public", "return": "void", "signature": "void setDirection(IReaction.Direction direction)", "full_signature": "@Override public void setDirection(IReaction.Direction direction)", "class_method_signature": "Reaction.setDirection(IReaction.Direction direction)", "testcase": false, "constructor": false}, {"identifier": "getDirection", "parameters": "()", "modifiers": "@Override public", "return": "IReaction.Direction", "signature": "IReaction.Direction getDirection()", "full_signature": "@Override public IReaction.Direction getDirection()", "class_method_signature": "Reaction.getDirection()", "testcase": false, "constructor": false}, {"identifier": "addMapping", "parameters": "(IMapping mapping)", "modifiers": "@Override public", "return": "void", "signature": "void addMapping(IMapping mapping)", "full_signature": "@Override public void addMapping(IMapping mapping)", "class_method_signature": "Reaction.addMapping(IMapping mapping)", "testcase": false, "constructor": false}, {"identifier": "removeMapping", "parameters": "(int pos)", "modifiers": "@Override public", "return": "void", "signature": "void removeMapping(int pos)", "full_signature": "@Override public void removeMapping(int pos)", "class_method_signature": "Reaction.removeMapping(int pos)", "testcase": false, "constructor": false}, {"identifier": "getMapping", "parameters": "(int pos)", "modifiers": "@Override public", "return": "IMapping", "signature": "IMapping getMapping(int pos)", "full_signature": "@Override public IMapping getMapping(int pos)", "class_method_signature": "Reaction.getMapping(int pos)", "testcase": false, "constructor": false}, {"identifier": "getMappingCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getMappingCount()", "full_signature": "@Override public int getMappingCount()", "class_method_signature": "Reaction.getMappingCount()", "testcase": false, "constructor": false}, {"identifier": "growMappingArray", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void growMappingArray()", "full_signature": "private void growMappingArray()", "class_method_signature": "Reaction.growMappingArray()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Reaction.toString()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object clone()", "full_signature": "@Override public Object clone()", "class_method_signature": "Reaction.clone()", "testcase": false, "constructor": false}], "file": "base/silent/src/main/java/org/openscience/cdk/silent/Reaction.java"}, "focal_method": {"identifier": "Reaction", "parameters": "()", "modifiers": "public", "return": "", "body": "public Reaction() {\n        this.reactants = getBuilder().newInstance(IAtomContainerSet.class);\n        this.products = getBuilder().newInstance(IAtomContainerSet.class);\n        this.agents = getBuilder().newInstance(IAtomContainerSet.class);\n        this.map = new Mapping[growArraySize];\n        mappingCount = 0;\n        reactionDirection = IReaction.Direction.FORWARD;\n    }", "signature": " Reaction()", "full_signature": "public  Reaction()", "class_method_signature": "Reaction.Reaction()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}