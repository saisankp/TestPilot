{"test_class": {"identifier": "AbstractDataProviderInvocationContextProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AbstractDataProviderInvocationContextProvider<Annotation> underTest;", "modifier": "private", "type": "AbstractDataProviderInvocationContextProvider<Annotation>", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "private final Annotation testAnnotation = () -> Annotation.class;", "modifier": "private final", "type": "Annotation", "declarator": "testAnnotation = () -> Annotation.class", "var_name": "testAnnotation"}, {"original_string": "@SuppressWarnings(\"unchecked\")\n    private final Class<Annotation> testAnnotationClass = (Class<Annotation>) testAnnotation.getClass();", "modifier": "@SuppressWarnings(\"unchecked\")\n    private final", "type": "Class<Annotation>", "declarator": "testAnnotationClass = (Class<Annotation>) testAnnotation.getClass()", "var_name": "testAnnotationClass"}, {"original_string": "@Mock\n    private DataConverter dataConverter;", "modifier": "@Mock\n    private", "type": "DataConverter", "declarator": "dataConverter", "var_name": "dataConverter"}, {"original_string": "@Mock\n    private ExtensionContext extensionContext;", "modifier": "@Mock\n    private", "type": "ExtensionContext", "declarator": "extensionContext", "var_name": "extensionContext"}, {"original_string": "private Method testMethod;", "modifier": "private", "type": "Method", "declarator": "testMethod", "var_name": "testMethod"}], "file": "junit-jupiter/src/test/java/com/tngtech/junit/dataprovider/AbstractDataProviderInvocationContextProviderTest.java"}, "test_case": {"identifier": "testProvideTestTemplateInvocationContextsShouldThrowProperExceptionIfAnnotationIsNotPresent", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testProvideTestTemplateInvocationContextsShouldThrowProperExceptionIfAnnotationIsNotPresent() {\n        // Given:\n        when(extensionContext.getRequiredTestMethod()).thenReturn(testMethod);\n\n        // When:\n        Exception result = assertThrows(ExtensionConfigurationException.class,\n                () -> underTest.provideTestTemplateInvocationContexts(extensionContext));\n\n        // Then:\n        assertThat(result).hasMessageMatching(\"Could not find annotation '.*' on test method '.*'\\\\.\");\n    }", "signature": "void testProvideTestTemplateInvocationContextsShouldThrowProperExceptionIfAnnotationIsNotPresent()", "full_signature": "@Test void testProvideTestTemplateInvocationContextsShouldThrowProperExceptionIfAnnotationIsNotPresent()", "class_method_signature": "AbstractDataProviderInvocationContextProviderTest.testProvideTestTemplateInvocationContextsShouldThrowProperExceptionIfAnnotationIsNotPresent()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getRequiredTestMethod", "assertThrows", "provideTestTemplateInvocationContexts", "hasMessageMatching", "assertThat"]}, "focal_class": {"identifier": "AbstractDataProviderInvocationContextProvider", "superclass": "", "interfaces": "implements TestTemplateInvocationContextProvider", "fields": [{"original_string": "private final DataConverter dataConverter;", "modifier": "private final", "type": "DataConverter", "declarator": "dataConverter", "var_name": "dataConverter"}, {"original_string": "private final Class<TEST_ANNOTATION> testAnnotationClass;", "modifier": "private final", "type": "Class<TEST_ANNOTATION>", "declarator": "testAnnotationClass", "var_name": "testAnnotationClass"}], "methods": [{"identifier": "AbstractDataProviderInvocationContextProvider", "parameters": "(Class<TEST_ANNOTATION> testAnnotationClass,\n            DataConverter dataConverter)", "modifiers": "protected", "return": "", "signature": " AbstractDataProviderInvocationContextProvider(Class<TEST_ANNOTATION> testAnnotationClass,\n            DataConverter dataConverter)", "full_signature": "protected  AbstractDataProviderInvocationContextProvider(Class<TEST_ANNOTATION> testAnnotationClass,\n            DataConverter dataConverter)", "class_method_signature": "AbstractDataProviderInvocationContextProvider.AbstractDataProviderInvocationContextProvider(Class<TEST_ANNOTATION> testAnnotationClass,\n            DataConverter dataConverter)", "testcase": false, "constructor": true}, {"identifier": "AbstractDataProviderInvocationContextProvider", "parameters": "(Class<TEST_ANNOTATION> testAnnotationClass)", "modifiers": "protected", "return": "", "signature": " AbstractDataProviderInvocationContextProvider(Class<TEST_ANNOTATION> testAnnotationClass)", "full_signature": "protected  AbstractDataProviderInvocationContextProvider(Class<TEST_ANNOTATION> testAnnotationClass)", "class_method_signature": "AbstractDataProviderInvocationContextProvider.AbstractDataProviderInvocationContextProvider(Class<TEST_ANNOTATION> testAnnotationClass)", "testcase": false, "constructor": true}, {"identifier": "supportsTestTemplate", "parameters": "(ExtensionContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supportsTestTemplate(ExtensionContext context)", "full_signature": "@Override public boolean supportsTestTemplate(ExtensionContext context)", "class_method_signature": "AbstractDataProviderInvocationContextProvider.supportsTestTemplate(ExtensionContext context)", "testcase": false, "constructor": false}, {"identifier": "provideTestTemplateInvocationContexts", "parameters": "(ExtensionContext context)", "modifiers": "@Override public", "return": "Stream<TestTemplateInvocationContext>", "signature": "Stream<TestTemplateInvocationContext> provideTestTemplateInvocationContexts(ExtensionContext context)", "full_signature": "@Override public Stream<TestTemplateInvocationContext> provideTestTemplateInvocationContexts(ExtensionContext context)", "class_method_signature": "AbstractDataProviderInvocationContextProvider.provideTestTemplateInvocationContexts(ExtensionContext context)", "testcase": false, "constructor": false}, {"identifier": "provideInvocationContexts", "parameters": "(ExtensionContext extensionContext,\n            TEST_ANNOTATION testAnnotation)", "modifiers": "protected abstract", "return": "Stream<TestTemplateInvocationContext>", "signature": "Stream<TestTemplateInvocationContext> provideInvocationContexts(ExtensionContext extensionContext,\n            TEST_ANNOTATION testAnnotation)", "full_signature": "protected abstract Stream<TestTemplateInvocationContext> provideInvocationContexts(ExtensionContext extensionContext,\n            TEST_ANNOTATION testAnnotation)", "class_method_signature": "AbstractDataProviderInvocationContextProvider.provideInvocationContexts(ExtensionContext extensionContext,\n            TEST_ANNOTATION testAnnotation)", "testcase": false, "constructor": false}, {"identifier": "getDefaultPlaceholders", "parameters": "()", "modifiers": "protected", "return": "List<? extends BasePlaceholder>", "signature": "List<? extends BasePlaceholder> getDefaultPlaceholders()", "full_signature": "protected List<? extends BasePlaceholder> getDefaultPlaceholders()", "class_method_signature": "AbstractDataProviderInvocationContextProvider.getDefaultPlaceholders()", "testcase": false, "constructor": false}, {"identifier": "convertData", "parameters": "(Method testMethod, Object data, ConverterContext context)", "modifiers": "protected", "return": "Stream<List<Object>>", "signature": "Stream<List<Object>> convertData(Method testMethod, Object data, ConverterContext context)", "full_signature": "protected Stream<List<Object>> convertData(Method testMethod, Object data, ConverterContext context)", "class_method_signature": "AbstractDataProviderInvocationContextProvider.convertData(Method testMethod, Object data, ConverterContext context)", "testcase": false, "constructor": false}], "file": "junit-jupiter/src/main/java/com/tngtech/junit/dataprovider/AbstractDataProviderInvocationContextProvider.java"}, "focal_method": {"identifier": "provideTestTemplateInvocationContexts", "parameters": "(ExtensionContext context)", "modifiers": "@Override public", "return": "Stream<TestTemplateInvocationContext>", "body": "@Override\n    public Stream<TestTemplateInvocationContext> provideTestTemplateInvocationContexts(ExtensionContext context) {\n        Method testMethod = context.getRequiredTestMethod();\n\n        return AnnotationUtils.findAnnotation(testMethod, testAnnotationClass)\n                .map(annotation -> provideInvocationContexts(context, annotation))\n                .orElseThrow(() -> new ExtensionConfigurationException(String.format(\n                        \"Could not find annotation '%s' on test method '%s'.\", testAnnotationClass, testMethod)));\n    }", "signature": "Stream<TestTemplateInvocationContext> provideTestTemplateInvocationContexts(ExtensionContext context)", "full_signature": "@Override public Stream<TestTemplateInvocationContext> provideTestTemplateInvocationContexts(ExtensionContext context)", "class_method_signature": "AbstractDataProviderInvocationContextProvider.provideTestTemplateInvocationContexts(ExtensionContext context)", "testcase": false, "constructor": false, "invocations": ["getRequiredTestMethod", "orElseThrow", "map", "findAnnotation", "provideInvocationContexts", "format"]}, "repository": {"repo_id": 8175611, "url": "https://github.com/TNG/junit-dataprovider", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 215, "size": 1383, "license": "licensed"}}