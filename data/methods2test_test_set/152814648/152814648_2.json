{"test_class": {"identifier": "GroovyExpressionMatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TRUE_SCRIPT = \"return Boolean.TRUE\";", "modifier": "private static final", "type": "String", "declarator": "TRUE_SCRIPT = \"return Boolean.TRUE\"", "var_name": "TRUE_SCRIPT"}, {"original_string": "private static final String FALSE_SCRIPT = \"return Boolean.FALSE\";", "modifier": "private static final", "type": "String", "declarator": "FALSE_SCRIPT = \"return Boolean.FALSE\"", "var_name": "FALSE_SCRIPT"}, {"original_string": "private static final String EXCEPTION_PARSER_SCRIPT = \"throw new IllegalArgumentException()\";", "modifier": "private static final", "type": "String", "declarator": "EXCEPTION_PARSER_SCRIPT = \"throw new IllegalArgumentException()\"", "var_name": "EXCEPTION_PARSER_SCRIPT"}, {"original_string": "private static final String ILLEGAL_PARSER_SCRIPT = \"0:0\";", "modifier": "private static final", "type": "String", "declarator": "ILLEGAL_PARSER_SCRIPT = \"0:0\"", "var_name": "ILLEGAL_PARSER_SCRIPT"}, {"original_string": "private static final String FILE_NAME = \"File.txt\";", "modifier": "private static final", "type": "String", "declarator": "FILE_NAME = \"File.txt\"", "var_name": "FILE_NAME"}], "file": "plugin/src/test/java/io/jenkins/plugins/analysis/warnings/groovy/GroovyExpressionMatcherTest.java"}, "test_case": {"identifier": "shouldReturnFalsePositiveIfScriptIsNotValid", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldReturnFalsePositiveIfScriptIsNotValid() {\n        IssueBuilder builder = new IssueBuilder();\n        GroovyExpressionMatcher matcher = new GroovyExpressionMatcher(ILLEGAL_PARSER_SCRIPT);\n        assertThat(matcher.createIssue(null, builder, 0, FILE_NAME)).isEmpty();\n    }", "signature": "void shouldReturnFalsePositiveIfScriptIsNotValid()", "full_signature": "@Test void shouldReturnFalsePositiveIfScriptIsNotValid()", "class_method_signature": "GroovyExpressionMatcherTest.shouldReturnFalsePositiveIfScriptIsNotValid()", "testcase": true, "constructor": false, "invocations": ["isEmpty", "assertThat", "createIssue"]}, "focal_class": {"identifier": "GroovyExpressionMatcher", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -2218299240520838315L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -2218299240520838315L", "var_name": "serialVersionUID"}, {"original_string": "private static final Logger LOGGER = Logger.getLogger(GroovyExpressionMatcher.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(GroovyExpressionMatcher.class.getName())", "var_name": "LOGGER"}, {"original_string": "private final String script;", "modifier": "private final", "type": "String", "declarator": "script", "var_name": "script"}, {"original_string": "private transient Script compiled;", "modifier": "private transient", "type": "Script", "declarator": "compiled", "var_name": "compiled"}], "methods": [{"identifier": "GroovyExpressionMatcher", "parameters": "(final String script)", "modifiers": "", "return": "", "signature": " GroovyExpressionMatcher(final String script)", "full_signature": "  GroovyExpressionMatcher(final String script)", "class_method_signature": "GroovyExpressionMatcher.GroovyExpressionMatcher(final String script)", "testcase": false, "constructor": true}, {"identifier": "compileScriptIfNotYetDone", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean compileScriptIfNotYetDone()", "full_signature": "private boolean compileScriptIfNotYetDone()", "class_method_signature": "GroovyExpressionMatcher.compileScriptIfNotYetDone()", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "()", "modifiers": "public", "return": "Script", "signature": "Script compile()", "full_signature": "public Script compile()", "class_method_signature": "GroovyExpressionMatcher.compile()", "testcase": false, "constructor": false}, {"identifier": "createIssue", "parameters": "(final Matcher matcher, final IssueBuilder builder, final int lineNumber,\n            final String fileName)", "modifiers": "@SuppressWarnings(\"all\") public", "return": "Optional<Issue>", "signature": "Optional<Issue> createIssue(final Matcher matcher, final IssueBuilder builder, final int lineNumber,\n            final String fileName)", "full_signature": "@SuppressWarnings(\"all\") public Optional<Issue> createIssue(final Matcher matcher, final IssueBuilder builder, final int lineNumber,\n            final String fileName)", "class_method_signature": "GroovyExpressionMatcher.createIssue(final Matcher matcher, final IssueBuilder builder, final int lineNumber,\n            final String fileName)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "(final Matcher matcher, final IssueBuilder builder, final int lineNumber, final String fileName)", "modifiers": "public", "return": "Object", "signature": "Object run(final Matcher matcher, final IssueBuilder builder, final int lineNumber, final String fileName)", "full_signature": "public Object run(final Matcher matcher, final IssueBuilder builder, final int lineNumber, final String fileName)", "class_method_signature": "GroovyExpressionMatcher.run(final Matcher matcher, final IssueBuilder builder, final int lineNumber, final String fileName)", "testcase": false, "constructor": false}, {"identifier": "runScript", "parameters": "()", "modifiers": "@SuppressWarnings({\"illegalcatch\", \"OverlyBroadCatchBlock\"}) private", "return": "Object", "signature": "Object runScript()", "full_signature": "@SuppressWarnings({\"illegalcatch\", \"OverlyBroadCatchBlock\"}) private Object runScript()", "class_method_signature": "GroovyExpressionMatcher.runScript()", "testcase": false, "constructor": false}], "file": "plugin/src/main/java/io/jenkins/plugins/analysis/warnings/groovy/GroovyExpressionMatcher.java"}, "focal_method": {"identifier": "createIssue", "parameters": "(final Matcher matcher, final IssueBuilder builder, final int lineNumber,\n            final String fileName)", "modifiers": "@SuppressWarnings(\"all\") public", "return": "Optional<Issue>", "body": "@SuppressWarnings(\"all\")\n    public Optional<Issue> createIssue(final Matcher matcher, final IssueBuilder builder, final int lineNumber,\n            final String fileName) {\n        Object result = run(matcher, builder, lineNumber, fileName);\n        if (result instanceof Optional) {\n            Optional<?> optional = (Optional) result;\n            if (optional.isPresent()) {\n                Object wrappedIssue = optional.get();\n                if (wrappedIssue instanceof Issue) {\n                    return Optional.of((Issue)wrappedIssue);\n                }\n            }\n        }\n        return Optional.empty();\n    }", "signature": "Optional<Issue> createIssue(final Matcher matcher, final IssueBuilder builder, final int lineNumber,\n            final String fileName)", "full_signature": "@SuppressWarnings(\"all\") public Optional<Issue> createIssue(final Matcher matcher, final IssueBuilder builder, final int lineNumber,\n            final String fileName)", "class_method_signature": "GroovyExpressionMatcher.createIssue(final Matcher matcher, final IssueBuilder builder, final int lineNumber,\n            final String fileName)", "testcase": false, "constructor": false, "invocations": ["run", "isPresent", "get", "of", "empty"]}, "repository": {"repo_id": 152814648, "url": "https://github.com/jenkinsci/warnings-ng-plugin", "stars": 158, "created": "10/12/2018 10:41:36 PM +00:00", "updates": "2020-01-27T14:00:03+00:00", "fork": "False", "license": "licensed"}}