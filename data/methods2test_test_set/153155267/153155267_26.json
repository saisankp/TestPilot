{"test_class": {"identifier": "AmqpMessageTest", "superclass": "", "interfaces": "", "fields": [], "file": "smallrye-reactive-messaging-amqp/src/test/java/io/smallrye/reactive/messaging/amqp/AmqpMessageTest.java"}, "test_case": {"identifier": "testBuilder", "parameters": "()", "modifiers": "@SuppressWarnings(\"deprecation\") @Test public", "return": "void", "body": "@SuppressWarnings(\"deprecation\")\n    @Test\n    public void testBuilder() {\n        AmqpMessageBuilder<String> builder = AmqpMessage.builder();\n        JsonObject json = new JsonObject();\n        json.put(\"hello\", \"world\");\n        json.put(\"some\", \"content\");\n\n        builder.withSubject(\"subject\")\n                .withTtl(1)\n                .withDurable(true)\n                .withReplyTo(\"reply\")\n                .withApplicationProperties(json)\n                .withContentType(\"text/plain\")\n                .withContentEncoding(\"utf-8\")\n                .withCorrelationId(\"1234\")\n                .withGroupId(\"some-group\")\n                .withAddress(\"address\")\n                .withPriority((short) 2)\n                .withBody(\"hello\")\n                .withId(\"4321\");\n\n        AmqpMessage<String> msg = builder.build();\n        assertThat(msg.getAddress()).isEqualTo(\"address\");\n        assertThat(msg.getApplicationProperties()).contains(entry(\"hello\", \"world\"), entry(\"some\", \"content\"));\n        assertThat(msg.getContentType()).isEqualTo(\"text/plain\");\n        assertThat(msg.getCreationTime()).isZero();\n        assertThat(msg.getDeliveryCount()).isZero();\n        assertThat(msg.getExpiryTime()).isZero();\n        assertThat(msg.getGroupId()).isEqualTo(\"some-group\");\n        assertThat(msg.getTtl()).isEqualTo(1);\n        assertThat(msg.getSubject()).isEqualTo(\"subject\");\n        assertThat(msg.getPriority()).isEqualTo((short) 2);\n        assertThat(((AmqpValue) msg.getBody()).getValue()).isEqualTo(\"hello\");\n        assertThat(msg.getCorrelationId()).isEqualTo(\"1234\");\n        assertThat(msg.getMessageId()).isEqualTo(\"4321\");\n        assertThat(msg.isDurable()).isTrue();\n        assertThat(msg.getError().name()).isEqualTo(\"OK\");\n        assertThat(msg.getGroupSequence()).isZero();\n\n        assertThat(AmqpMessage.<Boolean> builder().withBooleanAsBody(true).build().getPayload().booleanValue()).isTrue();\n        assertThat(AmqpMessage.<Integer> builder().withIntegerAsBody(23).build().getPayload()).isEqualTo(23);\n        assertThat(AmqpMessage.<Long> builder().withLongAsBody(23L).build().getPayload()).isEqualTo(23L);\n    }", "signature": "void testBuilder()", "full_signature": "@SuppressWarnings(\"deprecation\") @Test public void testBuilder()", "class_method_signature": "AmqpMessageTest.testBuilder()", "testcase": true, "constructor": false, "invocations": ["builder", "put", "put", "withId", "withBody", "withPriority", "withAddress", "withGroupId", "withCorrelationId", "withContentEncoding", "withContentType", "withApplicationProperties", "withReplyTo", "withDurable", "withTtl", "withSubject", "build", "isEqualTo", "assertThat", "getAddress", "contains", "assertThat", "getApplicationProperties", "entry", "entry", "isEqualTo", "assertThat", "getContentType", "isZero", "assertThat", "getCreationTime", "isZero", "assertThat", "getDeliveryCount", "isZero", "assertThat", "getExpiryTime", "isEqualTo", "assertThat", "getGroupId", "isEqualTo", "assertThat", "getTtl", "isEqualTo", "assertThat", "getSubject", "isEqualTo", "assertThat", "getPriority", "isEqualTo", "assertThat", "getValue", "getBody", "isEqualTo", "assertThat", "getCorrelationId", "isEqualTo", "assertThat", "getMessageId", "isTrue", "assertThat", "isDurable", "isEqualTo", "assertThat", "name", "getError", "isZero", "assertThat", "getGroupSequence", "isTrue", "assertThat", "booleanValue", "getPayload", "build", "withBooleanAsBody", "builder", "isEqualTo", "assertThat", "getPayload", "build", "withIntegerAsBody", "builder", "isEqualTo", "assertThat", "getPayload", "build", "withLongAsBody", "builder"]}, "focal_class": {"identifier": "AmqpMessage", "superclass": "", "interfaces": "implements org.eclipse.microprofile.reactive.messaging.Message<T>", "fields": [{"original_string": "protected static final String APPLICATION_JSON = \"application/json\";", "modifier": "protected static final", "type": "String", "declarator": "APPLICATION_JSON = \"application/json\"", "var_name": "APPLICATION_JSON"}, {"original_string": "protected final io.vertx.amqp.AmqpMessage message;", "modifier": "protected final", "type": "io.vertx.amqp.AmqpMessage", "declarator": "message", "var_name": "message"}, {"original_string": "protected final Metadata metadata;", "modifier": "protected final", "type": "Metadata", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "protected final IncomingAmqpMetadata amqpMetadata;", "modifier": "protected final", "type": "IncomingAmqpMetadata", "declarator": "amqpMetadata", "var_name": "amqpMetadata"}, {"original_string": "private final Context context;", "modifier": "private final", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "protected final AmqpFailureHandler onNack;", "modifier": "protected final", "type": "AmqpFailureHandler", "declarator": "onNack", "var_name": "onNack"}], "methods": [{"identifier": "builder", "parameters": "()", "modifiers": "@Deprecated public static", "return": "AmqpMessageBuilder<T>", "signature": "AmqpMessageBuilder<T> builder()", "full_signature": "@Deprecated public static AmqpMessageBuilder<T> builder()", "class_method_signature": "AmqpMessage.builder()", "testcase": false, "constructor": false}, {"identifier": "AmqpMessage", "parameters": "(io.vertx.mutiny.amqp.AmqpMessage delegate, Context context, AmqpFailureHandler onNack)", "modifiers": "public", "return": "", "signature": " AmqpMessage(io.vertx.mutiny.amqp.AmqpMessage delegate, Context context, AmqpFailureHandler onNack)", "full_signature": "public  AmqpMessage(io.vertx.mutiny.amqp.AmqpMessage delegate, Context context, AmqpFailureHandler onNack)", "class_method_signature": "AmqpMessage.AmqpMessage(io.vertx.mutiny.amqp.AmqpMessage delegate, Context context, AmqpFailureHandler onNack)", "testcase": false, "constructor": true}, {"identifier": "AmqpMessage", "parameters": "(io.vertx.amqp.AmqpMessage msg, Context context, AmqpFailureHandler onNack)", "modifiers": "public", "return": "", "signature": " AmqpMessage(io.vertx.amqp.AmqpMessage msg, Context context, AmqpFailureHandler onNack)", "full_signature": "public  AmqpMessage(io.vertx.amqp.AmqpMessage msg, Context context, AmqpFailureHandler onNack)", "class_method_signature": "AmqpMessage.AmqpMessage(io.vertx.amqp.AmqpMessage msg, Context context, AmqpFailureHandler onNack)", "testcase": false, "constructor": true}, {"identifier": "ack", "parameters": "()", "modifiers": "@Override public", "return": "CompletionStage<Void>", "signature": "CompletionStage<Void> ack()", "full_signature": "@Override public CompletionStage<Void> ack()", "class_method_signature": "AmqpMessage.ack()", "testcase": false, "constructor": false}, {"identifier": "nack", "parameters": "(Throwable reason)", "modifiers": "@Override public", "return": "CompletionStage<Void>", "signature": "CompletionStage<Void> nack(Throwable reason)", "full_signature": "@Override public CompletionStage<Void> nack(Throwable reason)", "class_method_signature": "AmqpMessage.nack(Throwable reason)", "testcase": false, "constructor": false}, {"identifier": "getPayload", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "T", "signature": "T getPayload()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public T getPayload()", "class_method_signature": "AmqpMessage.getPayload()", "testcase": false, "constructor": false}, {"identifier": "getMetadata", "parameters": "()", "modifiers": "@Override public", "return": "Metadata", "signature": "Metadata getMetadata()", "full_signature": "@Override public Metadata getMetadata()", "class_method_signature": "AmqpMessage.getMetadata()", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(io.vertx.amqp.AmqpMessage msg)", "modifiers": "private", "return": "Object", "signature": "Object convert(io.vertx.amqp.AmqpMessage msg)", "full_signature": "private Object convert(io.vertx.amqp.AmqpMessage msg)", "class_method_signature": "AmqpMessage.convert(io.vertx.amqp.AmqpMessage msg)", "testcase": false, "constructor": false}, {"identifier": "unwrap", "parameters": "()", "modifiers": "public", "return": "Message", "signature": "Message unwrap()", "full_signature": "public Message unwrap()", "class_method_signature": "AmqpMessage.unwrap()", "testcase": false, "constructor": false}, {"identifier": "isDurable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDurable()", "full_signature": "public boolean isDurable()", "class_method_signature": "AmqpMessage.isDurable()", "testcase": false, "constructor": false}, {"identifier": "getDeliveryCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getDeliveryCount()", "full_signature": "public long getDeliveryCount()", "class_method_signature": "AmqpMessage.getDeliveryCount()", "testcase": false, "constructor": false}, {"identifier": "getPriority", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPriority()", "full_signature": "public int getPriority()", "class_method_signature": "AmqpMessage.getPriority()", "testcase": false, "constructor": false}, {"identifier": "getTtl", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getTtl()", "full_signature": "public long getTtl()", "class_method_signature": "AmqpMessage.getTtl()", "testcase": false, "constructor": false}, {"identifier": "getMessageId", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getMessageId()", "full_signature": "public Object getMessageId()", "class_method_signature": "AmqpMessage.getMessageId()", "testcase": false, "constructor": false}, {"identifier": "getGroupSequence", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getGroupSequence()", "full_signature": "public long getGroupSequence()", "class_method_signature": "AmqpMessage.getGroupSequence()", "testcase": false, "constructor": false}, {"identifier": "getCreationTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCreationTime()", "full_signature": "public long getCreationTime()", "class_method_signature": "AmqpMessage.getCreationTime()", "testcase": false, "constructor": false}, {"identifier": "getAddress", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAddress()", "full_signature": "public String getAddress()", "class_method_signature": "AmqpMessage.getAddress()", "testcase": false, "constructor": false}, {"identifier": "getGroupId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getGroupId()", "full_signature": "public String getGroupId()", "class_method_signature": "AmqpMessage.getGroupId()", "testcase": false, "constructor": false}, {"identifier": "getContentType", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getContentType()", "full_signature": "public String getContentType()", "class_method_signature": "AmqpMessage.getContentType()", "testcase": false, "constructor": false}, {"identifier": "getExpiryTime", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getExpiryTime()", "full_signature": "public long getExpiryTime()", "class_method_signature": "AmqpMessage.getExpiryTime()", "testcase": false, "constructor": false}, {"identifier": "getCorrelationId", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getCorrelationId()", "full_signature": "public Object getCorrelationId()", "class_method_signature": "AmqpMessage.getCorrelationId()", "testcase": false, "constructor": false}, {"identifier": "getContentEncoding", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getContentEncoding()", "full_signature": "public String getContentEncoding()", "class_method_signature": "AmqpMessage.getContentEncoding()", "testcase": false, "constructor": false}, {"identifier": "getSubject", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSubject()", "full_signature": "public String getSubject()", "class_method_signature": "AmqpMessage.getSubject()", "testcase": false, "constructor": false}, {"identifier": "getApplicationProperties", "parameters": "()", "modifiers": "public", "return": "JsonObject", "signature": "JsonObject getApplicationProperties()", "full_signature": "public JsonObject getApplicationProperties()", "class_method_signature": "AmqpMessage.getApplicationProperties()", "testcase": false, "constructor": false}, {"identifier": "getBody", "parameters": "()", "modifiers": "public", "return": "Section", "signature": "Section getBody()", "full_signature": "public Section getBody()", "class_method_signature": "AmqpMessage.getBody()", "testcase": false, "constructor": false}, {"identifier": "getError", "parameters": "()", "modifiers": "public", "return": "MessageError", "signature": "MessageError getError()", "full_signature": "public MessageError getError()", "class_method_signature": "AmqpMessage.getError()", "testcase": false, "constructor": false}, {"identifier": "getAmqpMessage", "parameters": "()", "modifiers": "public", "return": "io.vertx.mutiny.amqp.AmqpMessage", "signature": "io.vertx.mutiny.amqp.AmqpMessage getAmqpMessage()", "full_signature": "public io.vertx.mutiny.amqp.AmqpMessage getAmqpMessage()", "class_method_signature": "AmqpMessage.getAmqpMessage()", "testcase": false, "constructor": false}], "file": "smallrye-reactive-messaging-amqp/src/main/java/io/smallrye/reactive/messaging/amqp/AmqpMessage.java"}, "focal_method": {"identifier": "builder", "parameters": "()", "modifiers": "@Deprecated public static", "return": "AmqpMessageBuilder<T>", "body": "@Deprecated\n    public static <T> AmqpMessageBuilder<T> builder() {\n        return new AmqpMessageBuilder<>();\n    }", "signature": "AmqpMessageBuilder<T> builder()", "full_signature": "@Deprecated public static AmqpMessageBuilder<T> builder()", "class_method_signature": "AmqpMessage.builder()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 153155267, "url": "https://github.com/smallrye/smallrye-reactive-messaging", "stars": 45, "created": "10/15/2018 5:36:05 PM +00:00", "updates": "2020-01-26T16:55:44+00:00", "fork": "False", "license": "licensed"}}