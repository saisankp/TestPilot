{"test_class": {"identifier": "IsotopePatternSimilarityTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private final static IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "private final static", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}], "file": "tool/formula/src/test/java/org/openscience/cdk/formula/IsotopePatternSimilarityTest.java"}, "test_case": {"identifier": "testSelectingMF", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSelectingMF() {\n        IsotopePatternSimilarity is = new IsotopePatternSimilarity();\n\n        IsotopePattern spExp = new IsotopePattern();\n        spExp.setCharge(1);\n        spExp.setMonoIsotope(new IsotopeContainer(156.07770, 1));\n        spExp.addIsotope(new IsotopeContainer(157.07503, 0.0101));\n        spExp.addIsotope(new IsotopeContainer(157.08059, 0.074));\n        spExp.addIsotope(new IsotopeContainer(158.08135, 0.0024));\n\n        double score = 0;\n        String mfString = \"\";\n        String[] listMF = {\"C4H8N6O\", \"C2H12N4O4\", \"C3H12N2O5\", \"C6H10N3O2\", \"CH10N5O4\", \"C4H14NO5\"};\n\n        for (int i = 0; i < listMF.length; i++) {\n            IMolecularFormula formula = MolecularFormulaManipulator.getMajorIsotopeMolecularFormula(listMF[i], builder);\n            IsotopePatternGenerator isotopeGe = new IsotopePatternGenerator(0.01);\n            IsotopePattern patternIsoPredicted = isotopeGe.getIsotopes(formula);\n\n            IsotopePattern patternIsoNormalize = IsotopePatternManipulator.normalize(patternIsoPredicted);\n            double tempScore = is.compare(spExp, patternIsoNormalize);\n            if (score < tempScore) {\n                mfString = MolecularFormulaManipulator.getString(formula);\n                score = tempScore;\n            }\n        }\n        Assert.assertEquals(\"C6H10N3O2\", mfString);\n    }", "signature": "void testSelectingMF()", "full_signature": "@Test public void testSelectingMF()", "class_method_signature": "IsotopePatternSimilarityTest.testSelectingMF()", "testcase": true, "constructor": false, "invocations": ["setCharge", "setMonoIsotope", "addIsotope", "addIsotope", "addIsotope", "getMajorIsotopeMolecularFormula", "getIsotopes", "normalize", "compare", "getString", "assertEquals"]}, "focal_class": {"identifier": "IsotopePatternSimilarity", "superclass": "", "interfaces": "", "fields": [{"original_string": "private double        chargeToAdd;", "modifier": "private", "type": "double", "declarator": "chargeToAdd", "var_name": "chargeToAdd"}, {"original_string": "private double        tolerance_ppm = 1;", "modifier": "private", "type": "double", "declarator": "tolerance_ppm = 1", "var_name": "tolerance_ppm"}, {"original_string": "private static double massE         = 0.0005485;", "modifier": "private static", "type": "double", "declarator": "massE         = 0.0005485", "var_name": "massE"}], "methods": [{"identifier": "IsotopePatternSimilarity", "parameters": "()", "modifiers": "public", "return": "", "signature": " IsotopePatternSimilarity()", "full_signature": "public  IsotopePatternSimilarity()", "class_method_signature": "IsotopePatternSimilarity.IsotopePatternSimilarity()", "testcase": false, "constructor": true}, {"identifier": "seTolerance", "parameters": "(double tolerance)", "modifiers": "public", "return": "void", "signature": "void seTolerance(double tolerance)", "full_signature": "public void seTolerance(double tolerance)", "class_method_signature": "IsotopePatternSimilarity.seTolerance(double tolerance)", "testcase": false, "constructor": false}, {"identifier": "getTolerance", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTolerance()", "full_signature": "public double getTolerance()", "class_method_signature": "IsotopePatternSimilarity.getTolerance()", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(IsotopePattern isoto1, IsotopePattern isoto2)", "modifiers": "public", "return": "double", "signature": "double compare(IsotopePattern isoto1, IsotopePattern isoto2)", "full_signature": "public double compare(IsotopePattern isoto1, IsotopePattern isoto2)", "class_method_signature": "IsotopePatternSimilarity.compare(IsotopePattern isoto1, IsotopePattern isoto2)", "testcase": false, "constructor": false}, {"identifier": "getClosestDataDiff", "parameters": "(IsotopeContainer isoContainer, IsotopePattern pattern)", "modifiers": "private", "return": "int", "signature": "int getClosestDataDiff(IsotopeContainer isoContainer, IsotopePattern pattern)", "full_signature": "private int getClosestDataDiff(IsotopeContainer isoContainer, IsotopePattern pattern)", "class_method_signature": "IsotopePatternSimilarity.getClosestDataDiff(IsotopeContainer isoContainer, IsotopePattern pattern)", "testcase": false, "constructor": false}], "file": "tool/formula/src/main/java/org/openscience/cdk/formula/IsotopePatternSimilarity.java"}, "focal_method": {"identifier": "compare", "parameters": "(IsotopePattern isoto1, IsotopePattern isoto2)", "modifiers": "public", "return": "double", "body": "public double compare(IsotopePattern isoto1, IsotopePattern isoto2) {\n\n        IsotopePattern iso1 = IsotopePatternManipulator.sortAndNormalizedByIntensity(isoto1);\n        IsotopePattern iso2 = IsotopePatternManipulator.sortAndNormalizedByIntensity(isoto2);\n\n        /* charge to add */\n        if (isoto1.getCharge() == 1)\n            chargeToAdd = massE;\n        else if (isoto1.getCharge() == -1)\n            chargeToAdd = -massE;\n        else\n            chargeToAdd = 0;\n\n        for (IsotopeContainer isoC : iso1.getIsotopes()) {\n            double mass = isoC.getMass();\n            isoC.setMass(mass + chargeToAdd);\n        }\n\n        double diffMass, diffAbun, factor, totalFactor = 0d;\n        double score = 0d, tempScore;\n        // Maximum number of isotopes to be compared according predicted isotope\n        // pattern. It is assumed that this will have always more isotopeContainers\n        int length = iso1.getNumberOfIsotopes();\n\n        for (int i = 0; i < length; i++) {\n            IsotopeContainer isoContainer = iso1.getIsotopes().get(i);\n            factor = isoContainer.getIntensity();\n            totalFactor += factor;\n\n            // Search for the closest isotope in the second pattern (detected) to the\n            // current isotope (predicted pattern)\n            int closestDp = getClosestDataDiff(isoContainer, iso2);\n            if (closestDp == -1) continue;\n\n            diffMass = isoContainer.getMass() - iso2.getIsotopes().get(closestDp).getMass();\n            diffMass = Math.abs(diffMass);\n\n            diffAbun = 1.0d - (isoContainer.getIntensity() / iso2.getIsotopes().get(closestDp).getIntensity());\n            diffAbun = Math.abs(diffAbun);\n\n            tempScore = 1 - (diffMass + diffAbun);\n\n            if (tempScore < 0) tempScore = 0;\n\n            score += (tempScore * factor);\n\n        }\n\n        return score / totalFactor;\n    }", "signature": "double compare(IsotopePattern isoto1, IsotopePattern isoto2)", "full_signature": "public double compare(IsotopePattern isoto1, IsotopePattern isoto2)", "class_method_signature": "IsotopePatternSimilarity.compare(IsotopePattern isoto1, IsotopePattern isoto2)", "testcase": false, "constructor": false, "invocations": ["sortAndNormalizedByIntensity", "sortAndNormalizedByIntensity", "getCharge", "getCharge", "getIsotopes", "getMass", "setMass", "getNumberOfIsotopes", "get", "getIsotopes", "getIntensity", "getClosestDataDiff", "getMass", "getMass", "get", "getIsotopes", "abs", "getIntensity", "getIntensity", "get", "getIsotopes", "abs"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}