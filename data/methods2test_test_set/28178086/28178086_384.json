{"test_class": {"identifier": "OneStepAheadPredictionErrorsTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/arima/estimation/OneStepAheadPredictionErrorsTest.java"}, "test_case": {"identifier": "testSomeMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSomeMethod() {\n        PreprocessingModel process = TramoSpecification.TRfull.build().process(Data.X, null);\n        RegArimaModel<SarimaModel> regArima = process.estimation.getRegArima();\n        DataBlock errors = OneStepAheadPredictionErrors.errors(regArima);\n//        System.out.println(errors);\n        DataBlock cerrors = DataBlock.select(errors, x->Double.isFinite(x));\n//        System.out.println(cerrors);\n        assertEquals(cerrors.ssq(), process.estimation.getStatistics().SsqErr, 1e-6);\n    }", "signature": "void testSomeMethod()", "full_signature": "@Test public void testSomeMethod()", "class_method_signature": "OneStepAheadPredictionErrorsTest.testSomeMethod()", "testcase": true, "constructor": false, "invocations": ["process", "build", "getRegArima", "errors", "select", "isFinite", "assertEquals", "ssq", "getStatistics"]}, "focal_class": {"identifier": "OneStepAheadPredictionErrors", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "errors", "parameters": "(RegArimaModel regarima)", "modifiers": "public static", "return": "DataBlock", "signature": "DataBlock errors(RegArimaModel regarima)", "full_signature": "public static DataBlock errors(RegArimaModel regarima)", "class_method_signature": "OneStepAheadPredictionErrors.errors(RegArimaModel regarima)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/arima/estimation/OneStepAheadPredictionErrors.java"}, "focal_method": {"identifier": "errors", "parameters": "(RegArimaModel regarima)", "modifiers": "public static", "return": "DataBlock", "body": "public static DataBlock errors(RegArimaModel regarima) {\n        IArimaModel arima = regarima.getArima();\n        if (regarima.isMeanCorrection()) {\n            // increase differencing order and ma polynomial\n            arima = new ArimaModel(arima.getStationaryAR(), arima.getNonStationaryAR().times(BackFilter.D1),\n                    arima.getMA().times(BackFilter.D1), arima.getInnovationVariance());\n        }\n        ISsf ssf;\n        SsfArima ssfarima = new SsfArima(arima);\n        DataBlock y = regarima.getY().deepClone();\n        int nx = regarima.getXCount();\n        if (nx > 0) {\n            Matrix x = new Matrix(y.getLength(), nx);\n            for (int i = 0; i < nx; ++i) {\n                x.column(i).copy(regarima.X(i));\n            }\n            ssf = new RegSsf(ssfarima, x.all());\n        } else {\n            ssf = ssfarima;\n        }\n        Filter filter = new Filter();\n        filter.setSsf(ssf);\n        filter.setInitializer(new DiffuseSquareRootInitializer());\n\n        int[] missings = regarima.getMissings();\n        if (missings != null) {\n            for (int i = 0; i < missings.length; ++i) {\n                y.set(missings[i], Double.NaN);\n            }\n        }\n        DiffusePredictionErrorDecomposition ped=new DiffusePredictionErrorDecomposition(true);\n        \n        filter.process(new SsfData(y, null), ped);\n        return new DataBlock(ped.residuals(false));\n    }", "signature": "DataBlock errors(RegArimaModel regarima)", "full_signature": "public static DataBlock errors(RegArimaModel regarima)", "class_method_signature": "OneStepAheadPredictionErrors.errors(RegArimaModel regarima)", "testcase": false, "constructor": false, "invocations": ["getArima", "isMeanCorrection", "getStationaryAR", "times", "getNonStationaryAR", "times", "getMA", "getInnovationVariance", "deepClone", "getY", "getXCount", "getLength", "copy", "column", "X", "all", "setSsf", "setInitializer", "getMissings", "set", "process", "residuals"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}