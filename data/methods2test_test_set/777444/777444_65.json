{"test_class": {"identifier": "HttpRequestHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BackendManager backend;", "modifier": "private", "type": "BackendManager", "declarator": "backend", "var_name": "backend"}, {"original_string": "private HttpRequestHandler handler;", "modifier": "private", "type": "HttpRequestHandler", "declarator": "handler", "var_name": "handler"}], "file": "agent/core/src/test/java/org/jolokia/http/HttpRequestHandlerTest.java"}, "test_case": {"identifier": "preflightCheckNegative", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void preflightCheckNegative() {\n        String origin = \"http://bla.com\";\n        String headers =\"X-Data: Test\";\n        expect(backend.isOriginAllowed(origin,false)).andReturn(false);\n        replay(backend);\n\n        Map<String,String> ret =  handler.handleCorsPreflightRequest(origin, headers);\n        assertNull(ret.get(\"Access-Control-Allow-Origin\"));\n    }", "signature": "void preflightCheckNegative()", "full_signature": "@Test public void preflightCheckNegative()", "class_method_signature": "HttpRequestHandlerTest.preflightCheckNegative()", "testcase": true, "constructor": false, "invocations": ["andReturn", "expect", "isOriginAllowed", "replay", "handleCorsPreflightRequest", "assertNull", "get"]}, "focal_class": {"identifier": "HttpRequestHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BackendManager backendManager;", "modifier": "private", "type": "BackendManager", "declarator": "backendManager", "var_name": "backendManager"}, {"original_string": "private LogHandler logHandler;", "modifier": "private", "type": "LogHandler", "declarator": "logHandler", "var_name": "logHandler"}, {"original_string": "private Configuration config;", "modifier": "private", "type": "Configuration", "declarator": "config", "var_name": "config"}, {"original_string": "private static final Pattern PATH_PREFIX_PATTERN = Pattern.compile(\"^/?[^/]+/\");", "modifier": "private static final", "type": "Pattern", "declarator": "PATH_PREFIX_PATTERN = Pattern.compile(\"^/?[^/]+/\")", "var_name": "PATH_PREFIX_PATTERN"}], "methods": [{"identifier": "HttpRequestHandler", "parameters": "(Configuration pConfig, BackendManager pBackendManager, LogHandler pLogHandler)", "modifiers": "public", "return": "", "signature": " HttpRequestHandler(Configuration pConfig, BackendManager pBackendManager, LogHandler pLogHandler)", "full_signature": "public  HttpRequestHandler(Configuration pConfig, BackendManager pBackendManager, LogHandler pLogHandler)", "class_method_signature": "HttpRequestHandler.HttpRequestHandler(Configuration pConfig, BackendManager pBackendManager, LogHandler pLogHandler)", "testcase": false, "constructor": true}, {"identifier": "handleGetRequest", "parameters": "(String pUri, String pPathInfo, Map<String, String[]> pParameterMap)", "modifiers": "public", "return": "JSONAware", "signature": "JSONAware handleGetRequest(String pUri, String pPathInfo, Map<String, String[]> pParameterMap)", "full_signature": "public JSONAware handleGetRequest(String pUri, String pPathInfo, Map<String, String[]> pParameterMap)", "class_method_signature": "HttpRequestHandler.handleGetRequest(String pUri, String pPathInfo, Map<String, String[]> pParameterMap)", "testcase": false, "constructor": false}, {"identifier": "getProcessingParameter", "parameters": "(Map<String, String[]> pParameterMap)", "modifiers": "private", "return": "ProcessingParameters", "signature": "ProcessingParameters getProcessingParameter(Map<String, String[]> pParameterMap)", "full_signature": "private ProcessingParameters getProcessingParameter(Map<String, String[]> pParameterMap)", "class_method_signature": "HttpRequestHandler.getProcessingParameter(Map<String, String[]> pParameterMap)", "testcase": false, "constructor": false}, {"identifier": "handlePostRequest", "parameters": "(String pUri, InputStream pInputStream, String pEncoding, Map<String, String[]>  pParameterMap)", "modifiers": "public", "return": "JSONAware", "signature": "JSONAware handlePostRequest(String pUri, InputStream pInputStream, String pEncoding, Map<String, String[]>  pParameterMap)", "full_signature": "public JSONAware handlePostRequest(String pUri, InputStream pInputStream, String pEncoding, Map<String, String[]>  pParameterMap)", "class_method_signature": "HttpRequestHandler.handlePostRequest(String pUri, InputStream pInputStream, String pEncoding, Map<String, String[]>  pParameterMap)", "testcase": false, "constructor": false}, {"identifier": "handleCorsPreflightRequest", "parameters": "(String pOrigin, String pRequestHeaders)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> handleCorsPreflightRequest(String pOrigin, String pRequestHeaders)", "full_signature": "public Map<String, String> handleCorsPreflightRequest(String pOrigin, String pRequestHeaders)", "class_method_signature": "HttpRequestHandler.handleCorsPreflightRequest(String pOrigin, String pRequestHeaders)", "testcase": false, "constructor": false}, {"identifier": "extractJsonRequest", "parameters": "(InputStream pInputStream, String pEncoding)", "modifiers": "private", "return": "Object", "signature": "Object extractJsonRequest(InputStream pInputStream, String pEncoding)", "full_signature": "private Object extractJsonRequest(InputStream pInputStream, String pEncoding)", "class_method_signature": "HttpRequestHandler.extractJsonRequest(InputStream pInputStream, String pEncoding)", "testcase": false, "constructor": false}, {"identifier": "executeRequest", "parameters": "(JmxRequest pJmxReq)", "modifiers": "private", "return": "JSONObject", "signature": "JSONObject executeRequest(JmxRequest pJmxReq)", "full_signature": "private JSONObject executeRequest(JmxRequest pJmxReq)", "class_method_signature": "HttpRequestHandler.executeRequest(JmxRequest pJmxReq)", "testcase": false, "constructor": false}, {"identifier": "handleThrowable", "parameters": "(Throwable pThrowable)", "modifiers": "public", "return": "JSONObject", "signature": "JSONObject handleThrowable(Throwable pThrowable)", "full_signature": "public JSONObject handleThrowable(Throwable pThrowable)", "class_method_signature": "HttpRequestHandler.handleThrowable(Throwable pThrowable)", "testcase": false, "constructor": false}, {"identifier": "getErrorJSON", "parameters": "(int pErrorCode, Throwable pExp, JmxRequest pJmxReq)", "modifiers": "public", "return": "JSONObject", "signature": "JSONObject getErrorJSON(int pErrorCode, Throwable pExp, JmxRequest pJmxReq)", "full_signature": "public JSONObject getErrorJSON(int pErrorCode, Throwable pExp, JmxRequest pJmxReq)", "class_method_signature": "HttpRequestHandler.getErrorJSON(int pErrorCode, Throwable pExp, JmxRequest pJmxReq)", "testcase": false, "constructor": false}, {"identifier": "checkAccess", "parameters": "(String pHost, String pAddress, String pOrigin)", "modifiers": "public", "return": "void", "signature": "void checkAccess(String pHost, String pAddress, String pOrigin)", "full_signature": "public void checkAccess(String pHost, String pAddress, String pOrigin)", "class_method_signature": "HttpRequestHandler.checkAccess(String pHost, String pAddress, String pOrigin)", "testcase": false, "constructor": false}, {"identifier": "extractCorsOrigin", "parameters": "(String pOrigin)", "modifiers": "public", "return": "String", "signature": "String extractCorsOrigin(String pOrigin)", "full_signature": "public String extractCorsOrigin(String pOrigin)", "class_method_signature": "HttpRequestHandler.extractCorsOrigin(String pOrigin)", "testcase": false, "constructor": false}, {"identifier": "addErrorInfo", "parameters": "(JSONObject pErrorResp, Throwable pExp, JmxRequest pJmxReq)", "modifiers": "private", "return": "void", "signature": "void addErrorInfo(JSONObject pErrorResp, Throwable pExp, JmxRequest pJmxReq)", "full_signature": "private void addErrorInfo(JSONObject pErrorResp, Throwable pExp, JmxRequest pJmxReq)", "class_method_signature": "HttpRequestHandler.addErrorInfo(JSONObject pErrorResp, Throwable pExp, JmxRequest pJmxReq)", "testcase": false, "constructor": false}, {"identifier": "getExceptionMessage", "parameters": "(Throwable pException)", "modifiers": "private", "return": "String", "signature": "String getExceptionMessage(Throwable pException)", "full_signature": "private String getExceptionMessage(Throwable pException)", "class_method_signature": "HttpRequestHandler.getExceptionMessage(Throwable pException)", "testcase": false, "constructor": false}, {"identifier": "errorForUnwrappedException", "parameters": "(Exception e, JmxRequest pJmxReq)", "modifiers": "private", "return": "JSONObject", "signature": "JSONObject errorForUnwrappedException(Exception e, JmxRequest pJmxReq)", "full_signature": "private JSONObject errorForUnwrappedException(Exception e, JmxRequest pJmxReq)", "class_method_signature": "HttpRequestHandler.errorForUnwrappedException(Exception e, JmxRequest pJmxReq)", "testcase": false, "constructor": false}, {"identifier": "extractPathInfo", "parameters": "(String pUri, String pPathInfo)", "modifiers": "private", "return": "String", "signature": "String extractPathInfo(String pUri, String pPathInfo)", "full_signature": "private String extractPathInfo(String pUri, String pPathInfo)", "class_method_signature": "HttpRequestHandler.extractPathInfo(String pUri, String pPathInfo)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/http/HttpRequestHandler.java"}, "focal_method": {"identifier": "handleCorsPreflightRequest", "parameters": "(String pOrigin, String pRequestHeaders)", "modifiers": "public", "return": "Map<String, String>", "body": "public Map<String, String> handleCorsPreflightRequest(String pOrigin, String pRequestHeaders) {\n        Map<String,String> ret = new HashMap<String, String>();\n        if (backendManager.isOriginAllowed(pOrigin,false)) {\n            // CORS is allowed, we set exactly the origin in the header, so there are no problems with authentication\n            ret.put(\"Access-Control-Allow-Origin\",pOrigin == null || \"null\".equals(pOrigin) ? \"*\" : pOrigin);\n            if (pRequestHeaders != null) {\n                ret.put(\"Access-Control-Allow-Headers\",pRequestHeaders);\n            }\n            // Fix for CORS with authentication (#104)\n            ret.put(\"Access-Control-Allow-Credentials\",\"true\");\n            // Allow for one year. Changes in access.xml are reflected directly in the CORS request itself\n            ret.put(\"Access-Control-Max-Age\",\"\" + 3600 * 24 * 365);\n        }\n        return ret;\n    }", "signature": "Map<String, String> handleCorsPreflightRequest(String pOrigin, String pRequestHeaders)", "full_signature": "public Map<String, String> handleCorsPreflightRequest(String pOrigin, String pRequestHeaders)", "class_method_signature": "HttpRequestHandler.handleCorsPreflightRequest(String pOrigin, String pRequestHeaders)", "testcase": false, "constructor": false, "invocations": ["isOriginAllowed", "put", "equals", "put", "put", "put"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}