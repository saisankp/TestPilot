{"test_class": {"identifier": "MraidActivityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String EXPECTED_SOURCE = \"expected source\";", "modifier": "static final", "type": "String", "declarator": "EXPECTED_SOURCE = \"expected source\"", "var_name": "EXPECTED_SOURCE"}, {"original_string": "@Mock MraidWebView mraidWebView;", "modifier": "@Mock", "type": "MraidWebView", "declarator": "mraidWebView", "var_name": "mraidWebView"}, {"original_string": "@Mock MraidBridge mraidBridge;", "modifier": "@Mock", "type": "MraidBridge", "declarator": "mraidBridge", "var_name": "mraidBridge"}, {"original_string": "@Mock MraidController mraidController;", "modifier": "@Mock", "type": "MraidController", "declarator": "mraidController", "var_name": "mraidController"}, {"original_string": "@Mock CustomEventInterstitial.CustomEventInterstitialListener\n            customEventInterstitialListener;", "modifier": "@Mock", "type": "CustomEventInterstitial.CustomEventInterstitialListener", "declarator": "customEventInterstitialListener", "var_name": "customEventInterstitialListener"}, {"original_string": "@Mock AdConfiguration adConfiguration;", "modifier": "@Mock", "type": "AdConfiguration", "declarator": "adConfiguration", "var_name": "adConfiguration"}, {"original_string": "@Mock BroadcastReceiver broadcastReceiver;", "modifier": "@Mock", "type": "BroadcastReceiver", "declarator": "broadcastReceiver", "var_name": "broadcastReceiver"}, {"original_string": "long testBroadcastIdentifier = 2222;", "modifier": "", "type": "long", "declarator": "testBroadcastIdentifier = 2222", "var_name": "testBroadcastIdentifier"}, {"original_string": "TestMraidActivity subject;", "modifier": "", "type": "TestMraidActivity", "declarator": "subject", "var_name": "subject"}], "file": "MoPubAd/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java"}, "test_case": {"identifier": "baseMraidListenerOnClose_shouldFireJavascriptWebViewDidClose", "parameters": "()", "modifiers": "@Ignore(\"Mraid 2.0\") @Test public", "return": "void", "body": "@Ignore(\"Mraid 2.0\")\n    @Test\n    public void baseMraidListenerOnClose_shouldFireJavascriptWebViewDidClose() throws Exception {\n        reset(mraidWebView);\n        ArgumentCaptor<MraidListener> captor = ArgumentCaptor.forClass(MraidListener.class);\n        View actualAdView = subject.getAdView();\n\n        assertThat(actualAdView).isSameAs(mraidWebView);\n        verify(mraidController).setMraidListener(captor.capture());\n\n        MraidListener baseMraidListener = captor.getValue();\n        baseMraidListener.onClose();\n\n        verify(mraidWebView).loadUrl(eq(\"javascript:webviewDidClose();\"));\n    }", "signature": "void baseMraidListenerOnClose_shouldFireJavascriptWebViewDidClose()", "full_signature": "@Ignore(\"Mraid 2.0\") @Test public void baseMraidListenerOnClose_shouldFireJavascriptWebViewDidClose()", "class_method_signature": "MraidActivityTest.baseMraidListenerOnClose_shouldFireJavascriptWebViewDidClose()", "testcase": true, "constructor": false, "invocations": ["reset", "forClass", "getAdView", "isSameAs", "assertThat", "setMraidListener", "verify", "capture", "getValue", "onClose", "loadUrl", "verify", "eq"]}, "focal_class": {"identifier": "MraidActivity", "superclass": "extends BaseInterstitialActivity", "interfaces": "", "fields": [{"original_string": "@Nullable private MraidController mMraidController;", "modifier": "@Nullable private", "type": "MraidController", "declarator": "mMraidController", "var_name": "mMraidController"}, {"original_string": "@Nullable private MraidWebViewDebugListener mDebugListener;", "modifier": "@Nullable private", "type": "MraidWebViewDebugListener", "declarator": "mDebugListener", "var_name": "mDebugListener"}], "methods": [{"identifier": "preRenderHtml", "parameters": "(@NonNull final Context context,\n            @NonNull final CustomEventInterstitialListener customEventInterstitialListener,\n            @NonNull final String htmlData)", "modifiers": "public static", "return": "void", "signature": "void preRenderHtml(@NonNull final Context context,\n            @NonNull final CustomEventInterstitialListener customEventInterstitialListener,\n            @NonNull final String htmlData)", "full_signature": "public static void preRenderHtml(@NonNull final Context context,\n            @NonNull final CustomEventInterstitialListener customEventInterstitialListener,\n            @NonNull final String htmlData)", "class_method_signature": "MraidActivity.preRenderHtml(@NonNull final Context context,\n            @NonNull final CustomEventInterstitialListener customEventInterstitialListener,\n            @NonNull final String htmlData)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "(@NonNull Context context, @NonNull String htmlData,\n            @NonNull AdConfiguration adConfiguration)", "modifiers": "public static", "return": "void", "signature": "void start(@NonNull Context context, @NonNull String htmlData,\n            @NonNull AdConfiguration adConfiguration)", "full_signature": "public static void start(@NonNull Context context, @NonNull String htmlData,\n            @NonNull AdConfiguration adConfiguration)", "class_method_signature": "MraidActivity.start(@NonNull Context context, @NonNull String htmlData,\n            @NonNull AdConfiguration adConfiguration)", "testcase": false, "constructor": false}, {"identifier": "createIntent", "parameters": "(@NonNull Context context, @NonNull String htmlData,\n            @NonNull AdConfiguration adConfiguration)", "modifiers": "@VisibleForTesting protected static", "return": "Intent", "signature": "Intent createIntent(@NonNull Context context, @NonNull String htmlData,\n            @NonNull AdConfiguration adConfiguration)", "full_signature": "@VisibleForTesting protected static Intent createIntent(@NonNull Context context, @NonNull String htmlData,\n            @NonNull AdConfiguration adConfiguration)", "class_method_signature": "MraidActivity.createIntent(@NonNull Context context, @NonNull String htmlData,\n            @NonNull AdConfiguration adConfiguration)", "testcase": false, "constructor": false}, {"identifier": "getAdView", "parameters": "()", "modifiers": "@Override public", "return": "View", "signature": "View getAdView()", "full_signature": "@Override public View getAdView()", "class_method_signature": "MraidActivity.getAdView()", "testcase": false, "constructor": false}, {"identifier": "onCreate", "parameters": "(@Nullable Bundle savedInstanceState)", "modifiers": "@Override public", "return": "void", "signature": "void onCreate(@Nullable Bundle savedInstanceState)", "full_signature": "@Override public void onCreate(@Nullable Bundle savedInstanceState)", "class_method_signature": "MraidActivity.onCreate(@Nullable Bundle savedInstanceState)", "testcase": false, "constructor": false}, {"identifier": "onPause", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onPause()", "full_signature": "@Override protected void onPause()", "class_method_signature": "MraidActivity.onPause()", "testcase": false, "constructor": false}, {"identifier": "onResume", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onResume()", "full_signature": "@Override protected void onResume()", "class_method_signature": "MraidActivity.onResume()", "testcase": false, "constructor": false}, {"identifier": "onDestroy", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onDestroy()", "full_signature": "@Override protected void onDestroy()", "class_method_signature": "MraidActivity.onDestroy()", "testcase": false, "constructor": false}, {"identifier": "setDebugListener", "parameters": "(@Nullable MraidWebViewDebugListener debugListener)", "modifiers": "@VisibleForTesting public", "return": "void", "signature": "void setDebugListener(@Nullable MraidWebViewDebugListener debugListener)", "full_signature": "@VisibleForTesting public void setDebugListener(@Nullable MraidWebViewDebugListener debugListener)", "class_method_signature": "MraidActivity.setDebugListener(@Nullable MraidWebViewDebugListener debugListener)", "testcase": false, "constructor": false}], "file": "MoPubAd/mopub-sdk/src/main/java/com/mopub/mobileads/MraidActivity.java"}, "focal_method": {"identifier": "getAdView", "parameters": "()", "modifiers": "@Override public", "return": "View", "body": "@Override\n    public View getAdView() {\n        String htmlData = getIntent().getStringExtra(HTML_RESPONSE_BODY_KEY);\n        if (htmlData == null) {\n            MoPubLog.w(\"MraidActivity received a null HTML body. Finishing the activity.\");\n            finish();\n            return new View(this);\n        }\n        AdConfiguration adConfiguration = getAdConfiguration();\n        if (adConfiguration == null) {\n            MoPubLog.w(\"MraidActivity received a null ad configuration. Finishing the activity.\");\n            finish();\n            return new View(this);\n        }\n\n        mMraidController = new MraidController(\n                this, adConfiguration, PlacementType.INTERSTITIAL);\n\n        mMraidController.setDebugListener(mDebugListener);\n        mMraidController.setMraidListener(new MraidListener() {\n            @Override\n            public void onLoaded(View view) {\n                // This is only done for the interstitial. Banners have a different mechanism\n                // for tracking third party impressions.\n                mMraidController.loadJavascript(WEB_VIEW_DID_APPEAR.getJavascript());\n            }\n\n            @Override\n            public void onFailedToLoad() {\n            }\n\n            public void onClose() {\n                mMraidController.loadJavascript(WEB_VIEW_DID_CLOSE.getJavascript());\n                finish();\n            }\n\n            @Override\n            public void onExpand() {\n                // No-op. The interstitial is always expanded.\n            }\n\n            @Override\n            public void onOpen() {\n                broadcastAction(MraidActivity.this, getBroadcastIdentifier(),\n                        ACTION_INTERSTITIAL_CLICK);\n            }\n        });\n\n        // Needed because the Activity provides the close button, not the controller. This\n        // gets called if the creative calls mraid.useCustomClose.\n        mMraidController.setUseCustomCloseListener(new UseCustomCloseListener() {\n            public void useCustomCloseChanged(boolean useCustomClose) {\n                if (useCustomClose) {\n                    hideInterstitialCloseButton();\n                } else {\n                    showInterstitialCloseButton();\n                }\n            }\n        });\n\n        mMraidController.loadContent(htmlData);\n        return mMraidController.getAdContainer();\n    }", "signature": "View getAdView()", "full_signature": "@Override public View getAdView()", "class_method_signature": "MraidActivity.getAdView()", "testcase": false, "constructor": false, "invocations": ["getStringExtra", "getIntent", "w", "finish", "getAdConfiguration", "w", "finish", "setDebugListener", "setMraidListener", "loadJavascript", "getJavascript", "loadJavascript", "getJavascript", "finish", "broadcastAction", "getBroadcastIdentifier", "setUseCustomCloseListener", "hideInterstitialCloseButton", "showInterstitialCloseButton", "loadContent", "getAdContainer"]}, "repository": {"repo_id": 38092182, "url": "https://github.com/harshalbenake/hbworkspace2-100", "language": "Java", "is_fork": false, "fork_count": 160, "stargazer_count": 191, "size": 307516, "license": "licensed"}}