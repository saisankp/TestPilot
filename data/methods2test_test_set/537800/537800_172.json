{"test_class": {"identifier": "CsvReporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public final TemporaryFolder folder = new TemporaryFolder();", "modifier": "@Rule\n    public final", "type": "TemporaryFolder", "declarator": "folder = new TemporaryFolder()", "var_name": "folder"}, {"original_string": "private final MetricRegistry registry = mock(MetricRegistry.class);", "modifier": "private final", "type": "MetricRegistry", "declarator": "registry = mock(MetricRegistry.class)", "var_name": "registry"}, {"original_string": "private final Clock clock = mock(Clock.class);", "modifier": "private final", "type": "Clock", "declarator": "clock = mock(Clock.class)", "var_name": "clock"}, {"original_string": "private File dataDirectory;", "modifier": "private", "type": "File", "declarator": "dataDirectory", "var_name": "dataDirectory"}, {"original_string": "private CsvReporter reporter;", "modifier": "private", "type": "CsvReporter", "declarator": "reporter", "var_name": "reporter"}], "file": "metrics-core/src/test/java/com/codahale/metrics/CsvReporterTest.java"}, "test_case": {"identifier": "reportsCounterValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void reportsCounterValues() throws Exception {\n        final Counter counter = mock(Counter.class);\n        when(counter.getCount()).thenReturn(100L);\n\n        reporter.report(map(),\n                map(\"test.counter\", counter),\n                map(),\n                map(),\n                map());\n\n        assertThat(fileContents(\"test.counter.csv\"))\n                .isEqualTo(csv(\n                        \"t,count\",\n                        \"19910191,100\"\n                ));\n    }", "signature": "void reportsCounterValues()", "full_signature": "@Test public void reportsCounterValues()", "class_method_signature": "CsvReporterTest.reportsCounterValues()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getCount", "report", "map", "map", "map", "map", "map", "isEqualTo", "assertThat", "fileContents", "csv"]}, "focal_class": {"identifier": "CsvReporter", "superclass": "extends ScheduledReporter", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_SEPARATOR = \",\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_SEPARATOR = \",\"", "var_name": "DEFAULT_SEPARATOR"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CsvReporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CsvReporter.class)", "var_name": "LOGGER"}, {"original_string": "private final File directory;", "modifier": "private final", "type": "File", "declarator": "directory", "var_name": "directory"}, {"original_string": "private final Locale locale;", "modifier": "private final", "type": "Locale", "declarator": "locale", "var_name": "locale"}, {"original_string": "private final String separator;", "modifier": "private final", "type": "String", "declarator": "separator", "var_name": "separator"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private final CsvFileProvider csvFileProvider;", "modifier": "private final", "type": "CsvFileProvider", "declarator": "csvFileProvider", "var_name": "csvFileProvider"}, {"original_string": "private final String histogramFormat;", "modifier": "private final", "type": "String", "declarator": "histogramFormat", "var_name": "histogramFormat"}, {"original_string": "private final String meterFormat;", "modifier": "private final", "type": "String", "declarator": "meterFormat", "var_name": "meterFormat"}, {"original_string": "private final String timerFormat;", "modifier": "private final", "type": "String", "declarator": "timerFormat", "var_name": "timerFormat"}], "methods": [{"identifier": "forRegistry", "parameters": "(MetricRegistry registry)", "modifiers": "public static", "return": "Builder", "signature": "Builder forRegistry(MetricRegistry registry)", "full_signature": "public static Builder forRegistry(MetricRegistry registry)", "class_method_signature": "CsvReporter.forRegistry(MetricRegistry registry)", "testcase": false, "constructor": false}, {"identifier": "CsvReporter", "parameters": "(MetricRegistry registry,\n                        File directory,\n                        Locale locale,\n                        String separator,\n                        TimeUnit rateUnit,\n                        TimeUnit durationUnit,\n                        Clock clock,\n                        MetricFilter filter,\n                        ScheduledExecutorService executor,\n                        boolean shutdownExecutorOnStop,\n                        CsvFileProvider csvFileProvider)", "modifiers": "private", "return": "", "signature": " CsvReporter(MetricRegistry registry,\n                        File directory,\n                        Locale locale,\n                        String separator,\n                        TimeUnit rateUnit,\n                        TimeUnit durationUnit,\n                        Clock clock,\n                        MetricFilter filter,\n                        ScheduledExecutorService executor,\n                        boolean shutdownExecutorOnStop,\n                        CsvFileProvider csvFileProvider)", "full_signature": "private  CsvReporter(MetricRegistry registry,\n                        File directory,\n                        Locale locale,\n                        String separator,\n                        TimeUnit rateUnit,\n                        TimeUnit durationUnit,\n                        Clock clock,\n                        MetricFilter filter,\n                        ScheduledExecutorService executor,\n                        boolean shutdownExecutorOnStop,\n                        CsvFileProvider csvFileProvider)", "class_method_signature": "CsvReporter.CsvReporter(MetricRegistry registry,\n                        File directory,\n                        Locale locale,\n                        String separator,\n                        TimeUnit rateUnit,\n                        TimeUnit durationUnit,\n                        Clock clock,\n                        MetricFilter filter,\n                        ScheduledExecutorService executor,\n                        boolean shutdownExecutorOnStop,\n                        CsvFileProvider csvFileProvider)", "testcase": false, "constructor": true}, {"identifier": "report", "parameters": "(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "modifiers": "@Override @SuppressWarnings(\"rawtypes\") public", "return": "void", "signature": "void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "full_signature": "@Override @SuppressWarnings(\"rawtypes\") public void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "class_method_signature": "CsvReporter.report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "testcase": false, "constructor": false}, {"identifier": "reportTimer", "parameters": "(long timestamp, String name, Timer timer)", "modifiers": "private", "return": "void", "signature": "void reportTimer(long timestamp, String name, Timer timer)", "full_signature": "private void reportTimer(long timestamp, String name, Timer timer)", "class_method_signature": "CsvReporter.reportTimer(long timestamp, String name, Timer timer)", "testcase": false, "constructor": false}, {"identifier": "reportMeter", "parameters": "(long timestamp, String name, Meter meter)", "modifiers": "private", "return": "void", "signature": "void reportMeter(long timestamp, String name, Meter meter)", "full_signature": "private void reportMeter(long timestamp, String name, Meter meter)", "class_method_signature": "CsvReporter.reportMeter(long timestamp, String name, Meter meter)", "testcase": false, "constructor": false}, {"identifier": "reportHistogram", "parameters": "(long timestamp, String name, Histogram histogram)", "modifiers": "private", "return": "void", "signature": "void reportHistogram(long timestamp, String name, Histogram histogram)", "full_signature": "private void reportHistogram(long timestamp, String name, Histogram histogram)", "class_method_signature": "CsvReporter.reportHistogram(long timestamp, String name, Histogram histogram)", "testcase": false, "constructor": false}, {"identifier": "reportCounter", "parameters": "(long timestamp, String name, Counter counter)", "modifiers": "private", "return": "void", "signature": "void reportCounter(long timestamp, String name, Counter counter)", "full_signature": "private void reportCounter(long timestamp, String name, Counter counter)", "class_method_signature": "CsvReporter.reportCounter(long timestamp, String name, Counter counter)", "testcase": false, "constructor": false}, {"identifier": "reportGauge", "parameters": "(long timestamp, String name, Gauge<?> gauge)", "modifiers": "private", "return": "void", "signature": "void reportGauge(long timestamp, String name, Gauge<?> gauge)", "full_signature": "private void reportGauge(long timestamp, String name, Gauge<?> gauge)", "class_method_signature": "CsvReporter.reportGauge(long timestamp, String name, Gauge<?> gauge)", "testcase": false, "constructor": false}, {"identifier": "report", "parameters": "(long timestamp, String name, String header, String line, Object... values)", "modifiers": "private", "return": "void", "signature": "void report(long timestamp, String name, String header, String line, Object... values)", "full_signature": "private void report(long timestamp, String name, String header, String line, Object... values)", "class_method_signature": "CsvReporter.report(long timestamp, String name, String header, String line, Object... values)", "testcase": false, "constructor": false}, {"identifier": "sanitize", "parameters": "(String name)", "modifiers": "protected", "return": "String", "signature": "String sanitize(String name)", "full_signature": "protected String sanitize(String name)", "class_method_signature": "CsvReporter.sanitize(String name)", "testcase": false, "constructor": false}], "file": "metrics-core/src/main/java/com/codahale/metrics/CsvReporter.java"}, "focal_method": {"identifier": "report", "parameters": "(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "modifiers": "@Override @SuppressWarnings(\"rawtypes\") public", "return": "void", "body": "@Override\n    @SuppressWarnings(\"rawtypes\")\n    public void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers) {\n        final long timestamp = TimeUnit.MILLISECONDS.toSeconds(clock.getTime());\n\n        for (Map.Entry<String, Gauge> entry : gauges.entrySet()) {\n            reportGauge(timestamp, entry.getKey(), entry.getValue());\n        }\n\n        for (Map.Entry<String, Counter> entry : counters.entrySet()) {\n            reportCounter(timestamp, entry.getKey(), entry.getValue());\n        }\n\n        for (Map.Entry<String, Histogram> entry : histograms.entrySet()) {\n            reportHistogram(timestamp, entry.getKey(), entry.getValue());\n        }\n\n        for (Map.Entry<String, Meter> entry : meters.entrySet()) {\n            reportMeter(timestamp, entry.getKey(), entry.getValue());\n        }\n\n        for (Map.Entry<String, Timer> entry : timers.entrySet()) {\n            reportTimer(timestamp, entry.getKey(), entry.getValue());\n        }\n    }", "signature": "void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "full_signature": "@Override @SuppressWarnings(\"rawtypes\") public void report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "class_method_signature": "CsvReporter.report(SortedMap<String, Gauge> gauges,\n                       SortedMap<String, Counter> counters,\n                       SortedMap<String, Histogram> histograms,\n                       SortedMap<String, Meter> meters,\n                       SortedMap<String, Timer> timers)", "testcase": false, "constructor": false, "invocations": ["toSeconds", "getTime", "entrySet", "reportGauge", "getKey", "getValue", "entrySet", "reportCounter", "getKey", "getValue", "entrySet", "reportHistogram", "getKey", "getValue", "entrySet", "reportMeter", "getKey", "getValue", "entrySet", "reportTimer", "getKey", "getValue"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}