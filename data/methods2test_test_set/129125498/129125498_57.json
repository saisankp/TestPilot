{"test_class": {"identifier": "SeasonalNaivePointForecasterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int CYCLE_LENGTH = 5;", "modifier": "private static final", "type": "int", "declarator": "CYCLE_LENGTH = 5", "var_name": "CYCLE_LENGTH"}, {"original_string": "private static final int INTERVAL_LENGTH = 10;", "modifier": "private static final", "type": "int", "declarator": "INTERVAL_LENGTH = 10", "var_name": "INTERVAL_LENGTH"}, {"original_string": "private static final long FIRST_CYCLE_FIRST_SLOT = 1563428100L;", "modifier": "private static final", "type": "long", "declarator": "FIRST_CYCLE_FIRST_SLOT = 1563428100L", "var_name": "FIRST_CYCLE_FIRST_SLOT"}, {"original_string": "private static final long FIRST_CYCLE_SECOND_SLOT = FIRST_CYCLE_FIRST_SLOT + INTERVAL_LENGTH;", "modifier": "private static final", "type": "long", "declarator": "FIRST_CYCLE_SECOND_SLOT = FIRST_CYCLE_FIRST_SLOT + INTERVAL_LENGTH", "var_name": "FIRST_CYCLE_SECOND_SLOT"}, {"original_string": "private static final long FIRST_CYCLE_THIRD_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 2);", "modifier": "private static final", "type": "long", "declarator": "FIRST_CYCLE_THIRD_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 2)", "var_name": "FIRST_CYCLE_THIRD_SLOT"}, {"original_string": "private static final long FIRST_CYCLE_FOURTH_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 3);", "modifier": "private static final", "type": "long", "declarator": "FIRST_CYCLE_FOURTH_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 3)", "var_name": "FIRST_CYCLE_FOURTH_SLOT"}, {"original_string": "private static final long FIRST_CYCLE_FIFTH_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 4);", "modifier": "private static final", "type": "long", "declarator": "FIRST_CYCLE_FIFTH_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 4)", "var_name": "FIRST_CYCLE_FIFTH_SLOT"}, {"original_string": "private static final long SECOND_CYCLE_FIRST_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 5);", "modifier": "private static final", "type": "long", "declarator": "SECOND_CYCLE_FIRST_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 5)", "var_name": "SECOND_CYCLE_FIRST_SLOT"}, {"original_string": "private static final long SECOND_CYCLE_SECOND_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 6);", "modifier": "private static final", "type": "long", "declarator": "SECOND_CYCLE_SECOND_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 6)", "var_name": "SECOND_CYCLE_SECOND_SLOT"}, {"original_string": "private static final long SECOND_CYCLE_THIRD_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 7);", "modifier": "private static final", "type": "long", "declarator": "SECOND_CYCLE_THIRD_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 7)", "var_name": "SECOND_CYCLE_THIRD_SLOT"}, {"original_string": "private static final long SECOND_CYCLE_FOURTH_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 8);", "modifier": "private static final", "type": "long", "declarator": "SECOND_CYCLE_FOURTH_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 8)", "var_name": "SECOND_CYCLE_FOURTH_SLOT"}, {"original_string": "private static final long SECOND_CYCLE_FIFTH_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 9);", "modifier": "private static final", "type": "long", "declarator": "SECOND_CYCLE_FIFTH_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 9)", "var_name": "SECOND_CYCLE_FIFTH_SLOT"}, {"original_string": "private static final long THIRD_CYCLE_FIRST_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 10);", "modifier": "private static final", "type": "long", "declarator": "THIRD_CYCLE_FIRST_SLOT = FIRST_CYCLE_FIRST_SLOT + (INTERVAL_LENGTH * 10)", "var_name": "THIRD_CYCLE_FIRST_SLOT"}, {"original_string": "private static final double FIRST_CYCLE_FIRST_SLOT_VALUE = 10.0;", "modifier": "private static final", "type": "double", "declarator": "FIRST_CYCLE_FIRST_SLOT_VALUE = 10.0", "var_name": "FIRST_CYCLE_FIRST_SLOT_VALUE"}, {"original_string": "private static final double FIRST_CYCLE_SECOND_SLOT_VALUE = 20.0;", "modifier": "private static final", "type": "double", "declarator": "FIRST_CYCLE_SECOND_SLOT_VALUE = 20.0", "var_name": "FIRST_CYCLE_SECOND_SLOT_VALUE"}, {"original_string": "private static final double FIRST_CYCLE_THIRD_SLOT_VALUE = 30.0;", "modifier": "private static final", "type": "double", "declarator": "FIRST_CYCLE_THIRD_SLOT_VALUE = 30.0", "var_name": "FIRST_CYCLE_THIRD_SLOT_VALUE"}, {"original_string": "private static final double FIRST_CYCLE_FOURTH_SLOT_VALUE = 40.0;", "modifier": "private static final", "type": "double", "declarator": "FIRST_CYCLE_FOURTH_SLOT_VALUE = 40.0", "var_name": "FIRST_CYCLE_FOURTH_SLOT_VALUE"}, {"original_string": "private static final double FIRST_CYCLE_FIFTH_SLOT_VALUE = 50.0;", "modifier": "private static final", "type": "double", "declarator": "FIRST_CYCLE_FIFTH_SLOT_VALUE = 50.0", "var_name": "FIRST_CYCLE_FIFTH_SLOT_VALUE"}, {"original_string": "private static final double SECOND_CYCLE_FIRST_SLOT_VALUE = 60.0;", "modifier": "private static final", "type": "double", "declarator": "SECOND_CYCLE_FIRST_SLOT_VALUE = 60.0", "var_name": "SECOND_CYCLE_FIRST_SLOT_VALUE"}, {"original_string": "private static final double SECOND_CYCLE_SECOND_SLOT_VALUE = 70.0;", "modifier": "private static final", "type": "double", "declarator": "SECOND_CYCLE_SECOND_SLOT_VALUE = 70.0", "var_name": "SECOND_CYCLE_SECOND_SLOT_VALUE"}, {"original_string": "private static final double SECOND_CYCLE_THIRD_SLOT_VALUE = 80.0;", "modifier": "private static final", "type": "double", "declarator": "SECOND_CYCLE_THIRD_SLOT_VALUE = 80.0", "var_name": "SECOND_CYCLE_THIRD_SLOT_VALUE"}, {"original_string": "private static final double SECOND_CYCLE_FOURTH_SLOT_VALUE = 90.0;", "modifier": "private static final", "type": "double", "declarator": "SECOND_CYCLE_FOURTH_SLOT_VALUE = 90.0", "var_name": "SECOND_CYCLE_FOURTH_SLOT_VALUE"}, {"original_string": "private static final double SECOND_CYCLE_FIFTH_SLOT_VALUE = 100.0;", "modifier": "private static final", "type": "double", "declarator": "SECOND_CYCLE_FIFTH_SLOT_VALUE = 100.0", "var_name": "SECOND_CYCLE_FIFTH_SLOT_VALUE"}, {"original_string": "private static final double THIRD_CYCLE_THIRD_SLOT_VALUE = 110.0;", "modifier": "private static final", "type": "double", "declarator": "THIRD_CYCLE_THIRD_SLOT_VALUE = 110.0", "var_name": "THIRD_CYCLE_THIRD_SLOT_VALUE"}, {"original_string": "private static final double VALID_PLACEHOLDER = Double.POSITIVE_INFINITY;", "modifier": "private static final", "type": "double", "declarator": "VALID_PLACEHOLDER = Double.POSITIVE_INFINITY", "var_name": "VALID_PLACEHOLDER"}, {"original_string": "private static final SeasonalNaivePointForecasterParams PARAMS =\n            new SeasonalNaivePointForecasterParams().setCycleLength(CYCLE_LENGTH).setIntervalLength(INTERVAL_LENGTH);", "modifier": "private static final", "type": "SeasonalNaivePointForecasterParams", "declarator": "PARAMS =\n            new SeasonalNaivePointForecasterParams().setCycleLength(CYCLE_LENGTH).setIntervalLength(INTERVAL_LENGTH)", "var_name": "PARAMS"}, {"original_string": "private static final MetricDefinition METRIC_DEF = new MetricDefinition(\"some-key\");", "modifier": "private static final", "type": "MetricDefinition", "declarator": "METRIC_DEF = new MetricDefinition(\"some-key\")", "var_name": "METRIC_DEF"}, {"original_string": "private SeasonalNaivePointForecaster subject = new SeasonalNaivePointForecaster(PARAMS);", "modifier": "private", "type": "SeasonalNaivePointForecaster", "declarator": "subject = new SeasonalNaivePointForecaster(PARAMS)", "var_name": "subject"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/forecast/point/algo/seasonalnaive/SeasonalNaivePointForecasterTest.java"}, "test_case": {"identifier": "testForecast_nullMetricData", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void testForecast_nullMetricData() {\n        subject.forecast(null);\n    }", "signature": "void testForecast_nullMetricData()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testForecast_nullMetricData()", "class_method_signature": "SeasonalNaivePointForecasterTest.testForecast_nullMetricData()", "testcase": true, "constructor": false, "invocations": ["forecast"]}, "focal_class": {"identifier": "SeasonalNaivePointForecaster", "superclass": "", "interfaces": "implements SeasonalPointForecaster", "fields": [{"original_string": "@NonNull\n    @Getter\n    private UUID uuid;", "modifier": "@NonNull\n    @Getter\n    private", "type": "UUID", "declarator": "uuid", "var_name": "uuid"}, {"original_string": "@NonNull\n    @Getter\n    private SeasonalNaivePointForecasterParams params;", "modifier": "@NonNull\n    @Getter\n    private", "type": "SeasonalNaivePointForecasterParams", "declarator": "params", "var_name": "params"}, {"original_string": "@NonNull\n    @Getter\n    private SeasonalBuffer buffer;", "modifier": "@NonNull\n    @Getter\n    private", "type": "SeasonalBuffer", "declarator": "buffer", "var_name": "buffer"}], "methods": [{"identifier": "SeasonalNaivePointForecaster", "parameters": "(SeasonalNaivePointForecasterParams params)", "modifiers": "public", "return": "", "signature": " SeasonalNaivePointForecaster(SeasonalNaivePointForecasterParams params)", "full_signature": "public  SeasonalNaivePointForecaster(SeasonalNaivePointForecasterParams params)", "class_method_signature": "SeasonalNaivePointForecaster.SeasonalNaivePointForecaster(SeasonalNaivePointForecasterParams params)", "testcase": false, "constructor": true}, {"identifier": "forecast", "parameters": "(MetricData metricData)", "modifiers": "@Override public", "return": "PointForecast", "signature": "PointForecast forecast(MetricData metricData)", "full_signature": "@Override public PointForecast forecast(MetricData metricData)", "class_method_signature": "SeasonalNaivePointForecaster.forecast(MetricData metricData)", "testcase": false, "constructor": false}, {"identifier": "getCycleLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getCycleLength()", "full_signature": "@Override public int getCycleLength()", "class_method_signature": "SeasonalNaivePointForecaster.getCycleLength()", "testcase": false, "constructor": false}, {"identifier": "getIntervalLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getIntervalLength()", "full_signature": "@Override public int getIntervalLength()", "class_method_signature": "SeasonalNaivePointForecaster.getIntervalLength()", "testcase": false, "constructor": false}, {"identifier": "getPreviousValueOrNull", "parameters": "(double oldValue)", "modifiers": "private", "return": "PointForecast", "signature": "PointForecast getPreviousValueOrNull(double oldValue)", "full_signature": "private PointForecast getPreviousValueOrNull(double oldValue)", "class_method_signature": "SeasonalNaivePointForecaster.getPreviousValueOrNull(double oldValue)", "testcase": false, "constructor": false}, {"identifier": "isWarmingUp", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isWarmingUp()", "full_signature": "private boolean isWarmingUp()", "class_method_signature": "SeasonalNaivePointForecaster.isWarmingUp()", "testcase": false, "constructor": false}, {"identifier": "bufferContainedMissingValue", "parameters": "(double oldValue)", "modifiers": "private", "return": "boolean", "signature": "boolean bufferContainedMissingValue(double oldValue)", "full_signature": "private boolean bufferContainedMissingValue(double oldValue)", "class_method_signature": "SeasonalNaivePointForecaster.bufferContainedMissingValue(double oldValue)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/forecast/point/algo/seasonalnaive/SeasonalNaivePointForecaster.java"}, "focal_method": {"identifier": "forecast", "parameters": "(MetricData metricData)", "modifiers": "@Override public", "return": "PointForecast", "body": "@Override\n    public PointForecast forecast(MetricData metricData) {\n        notNull(metricData, \"metricData can't be null\");\n        val oldValue = this.buffer.updateWhilePadding(metricData);\n        return getPreviousValueOrNull(oldValue);\n    }", "signature": "PointForecast forecast(MetricData metricData)", "full_signature": "@Override public PointForecast forecast(MetricData metricData)", "class_method_signature": "SeasonalNaivePointForecaster.forecast(MetricData metricData)", "testcase": false, "constructor": false, "invocations": ["notNull", "updateWhilePadding", "getPreviousValueOrNull"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}