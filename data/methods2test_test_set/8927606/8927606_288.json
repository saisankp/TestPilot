{"test_class": {"identifier": "EtagHandlerPipeTest", "superclass": "extends PipeTestBase<EtagHandlerPipe>", "interfaces": "", "fields": [{"original_string": "private IPipeLineSession session = new PipeLineSessionBase();", "modifier": "private", "type": "IPipeLineSession", "declarator": "session = new PipeLineSessionBase()", "var_name": "session"}], "file": "core/src/test/java/nl/nn/adapterframework/pipes/EtagHandlerPipeTest.java"}, "test_case": {"identifier": "testFailedToLocateCache", "parameters": "()", "modifiers": "@Test(expected = PipeRunException.class) public", "return": "void", "body": "@Test(expected = PipeRunException.class)\n    public void testFailedToLocateCache() throws PipeRunException {\n        doPipe(pipe, \"dummyString\", session);\n    }", "signature": "void testFailedToLocateCache()", "full_signature": "@Test(expected = PipeRunException.class) public void testFailedToLocateCache()", "class_method_signature": "EtagHandlerPipeTest.testFailedToLocateCache()", "testcase": true, "constructor": false, "invocations": ["doPipe"]}, "focal_class": {"identifier": "EtagHandlerPipe", "superclass": "extends FixedForwardPipe", "interfaces": "", "fields": [{"original_string": "private String action = null;", "modifier": "private", "type": "String", "declarator": "action = null", "var_name": "action"}, {"original_string": "List<String> actions = Arrays.asList(\"generate\", \"get\", \"set\", \"delete\", \"flush\", \"clear\");", "modifier": "", "type": "List<String>", "declarator": "actions = Arrays.asList(\"generate\", \"get\", \"set\", \"delete\", \"flush\", \"clear\")", "var_name": "actions"}, {"original_string": "private String restPath = \"/rest\";", "modifier": "private", "type": "String", "declarator": "restPath = \"/rest\"", "var_name": "restPath"}, {"original_string": "private String uriPattern = null;", "modifier": "private", "type": "String", "declarator": "uriPattern = null", "var_name": "uriPattern"}, {"original_string": "private IApiCache cache = null;", "modifier": "private", "type": "IApiCache", "declarator": "cache = null", "var_name": "cache"}], "methods": [{"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "EtagHandlerPipe.configure()", "testcase": false, "constructor": false}, {"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "EtagHandlerPipe.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "setAction", "parameters": "(String string)", "modifiers": "public", "return": "void", "signature": "void setAction(String string)", "full_signature": "public void setAction(String string)", "class_method_signature": "EtagHandlerPipe.setAction(String string)", "testcase": false, "constructor": false}, {"identifier": "getAction", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAction()", "full_signature": "public String getAction()", "class_method_signature": "EtagHandlerPipe.getAction()", "testcase": false, "constructor": false}, {"identifier": "setUriPattern", "parameters": "(String string)", "modifiers": "public", "return": "void", "signature": "void setUriPattern(String string)", "full_signature": "public void setUriPattern(String string)", "class_method_signature": "EtagHandlerPipe.setUriPattern(String string)", "testcase": false, "constructor": false}, {"identifier": "getUriPattern", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUriPattern()", "full_signature": "public String getUriPattern()", "class_method_signature": "EtagHandlerPipe.getUriPattern()", "testcase": false, "constructor": false}, {"identifier": "getRestPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRestPath()", "full_signature": "public String getRestPath()", "class_method_signature": "EtagHandlerPipe.getRestPath()", "testcase": false, "constructor": false}, {"identifier": "setRestPath", "parameters": "(String string)", "modifiers": "public", "return": "void", "signature": "void setRestPath(String string)", "full_signature": "public void setRestPath(String string)", "class_method_signature": "EtagHandlerPipe.setRestPath(String string)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/pipes/EtagHandlerPipe.java"}, "focal_method": {"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "body": "@Override\n\tpublic PipeRunResult doPipe(Message message, IPipeLineSession session) throws PipeRunException {\n\t\tif (message==null) {\n\t\t\tthrow new PipeRunException(this, getLogPrefix(session)+\"got null input\");\n\t\t}\n\n\t\tString uriPatternSessionKey = null;\n\t\tParameterValueList pvl = null;\n\t\tParameterList parameterList = getParameterList();\n\t\tif (parameterList != null) {\n\t\t\ttry {\n\t\t\t\tpvl = parameterList.getValues(message, session);\n\t\t\t\tif (pvl != null) {\n\t\t\t\t\tString uriPattern = (String)pvl.getValue(\"uriPattern\");\n\t\t\t\t\tif (uriPattern!=null) {\n\t\t\t\t\t\turiPatternSessionKey = uriPattern;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (ParameterException e) {\n\t\t\t\tthrow new PipeRunException(this, getLogPrefix(session) + \"exception extracting parameters\", e);\n\t\t\t}\n\t\t}\n\n\t\t//hash over data genereren, uit cache lezen en teruggeven, in cache updaten, verwijderen uit cache, cache naar disk wegschrijven, cache legen\n\t\tString cacheKey = null;\n\t\tif(uriPatternSessionKey != null && !uriPatternSessionKey.isEmpty())\n\t\t\tcacheKey = getRestPath()+\"_\"+uriPatternSessionKey.toLowerCase();\n\t\telse\n\t\t\tcacheKey = getRestPath()+\"_\"+getUriPattern();\n\t\tif(cache != null && cache.containsKey(cacheKey)) {\n\t\t\tObject returnCode = false;\n\n\t\t\tif(getAction().equalsIgnoreCase(\"generate\")) {\n\t\t\t\ttry {\n\t\t\t\t\tcache.put(cacheKey, RestListenerUtils.formatEtag(getRestPath(), getUriPattern(), message.asString().hashCode()));\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new PipeRunException(this, getLogPrefix(session)+\"cannot open stream\", e);\n\t\t\t\t}\n\t\t\t\treturnCode = true;\n\t\t\t}\n\t\t\telse if(getAction().equalsIgnoreCase(\"get\")) {\n\t\t\t\treturnCode = cache.get(cacheKey);\n\t\t\t}\n\t\t\telse if(getAction().equalsIgnoreCase(\"set\")) {\n\t\t\t\ttry {\n\t\t\t\t\tcache.put(cacheKey, message.asString());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new PipeRunException(this, getLogPrefix(session)+\"cannot open stream\", e);\n\t\t\t\t}\n\t\t\t\treturnCode = true;\n\t\t\t}\n\t\t\telse if(getAction().equalsIgnoreCase(\"delete\")) {\n\t\t\t\treturnCode = cache.remove(cacheKey);\n\t\t\t}\n\t\t\telse if(getAction().equalsIgnoreCase(\"flush\")) {\n\t\t\t\tif(cache instanceof ApiEhcache) {\n\t\t\t\t\t((ApiEhcache) cache).flush();\n\t\t\t\t\treturnCode = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(getAction().equalsIgnoreCase(\"clear\")) {\n\t\t\t\tcache.clear();\n\t\t\t\treturnCode = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new PipeRunException(this, getLogPrefix(session)+\"action not found [\"+getAction()+\"]\"); \n\t\t\t}\n\t\t\tif(log.isDebugEnabled()) log.debug(\"found eTag cacheKey [\"+cacheKey+\"] with action [\"+getAction()+\"]\");\n\n\t\t\treturn new PipeRunResult(getForward(), returnCode);\n\t\t}\n\t\telse {\n\t\t\tPipeForward pipeForward = findForward(\"exception\");\n\t\t\tString msg;\n\n\t\t\tif(cache == null)\n\t\t\t\tmsg = \"failed to locate cache\";\n\t\t\telse\n\t\t\t\tmsg = \"failed to locate eTag [\"+cacheKey+\"] in cache\";\n\n\t\t\tif (pipeForward==null) {\n\t\t\t\tthrow new PipeRunException (this, getLogPrefix(session)+msg);\n\t\t\t}\n\n\t\t\treturn new PipeRunResult(pipeForward, \"\");\n\t\t}\n\t}", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "EtagHandlerPipe.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false, "invocations": ["getLogPrefix", "getParameterList", "getValues", "getValue", "getLogPrefix", "isEmpty", "getRestPath", "toLowerCase", "getRestPath", "getUriPattern", "containsKey", "equalsIgnoreCase", "getAction", "put", "formatEtag", "getRestPath", "getUriPattern", "hashCode", "asString", "getLogPrefix", "equalsIgnoreCase", "getAction", "get", "equalsIgnoreCase", "getAction", "put", "asString", "getLogPrefix", "equalsIgnoreCase", "getAction", "remove", "equalsIgnoreCase", "getAction", "flush", "equalsIgnoreCase", "getAction", "clear", "getLogPrefix", "getAction", "isDebugEnabled", "debug", "getAction", "getForward", "findForward", "getLogPrefix"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}