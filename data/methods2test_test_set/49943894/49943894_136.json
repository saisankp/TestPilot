{"test_class": {"identifier": "NetworkOrchestratorTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "static final Logger s_logger = LoggerFactory.getLogger(NetworkOrchestratorTest.class);", "modifier": "static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(NetworkOrchestratorTest.class)", "var_name": "s_logger"}, {"original_string": "NetworkOrchestrator testOrchastrator = new NetworkOrchestrator();", "modifier": "", "type": "NetworkOrchestrator", "declarator": "testOrchastrator = new NetworkOrchestrator()", "var_name": "testOrchastrator"}, {"original_string": "String guruName = \"GuestNetworkGuru\";", "modifier": "", "type": "String", "declarator": "guruName = \"GuestNetworkGuru\"", "var_name": "guruName"}, {"original_string": "String dhcpProvider = \"VirtualRouter\";", "modifier": "", "type": "String", "declarator": "dhcpProvider = \"VirtualRouter\"", "var_name": "dhcpProvider"}, {"original_string": "NetworkGuru guru = mock(NetworkGuru.class);", "modifier": "", "type": "NetworkGuru", "declarator": "guru = mock(NetworkGuru.class)", "var_name": "guru"}], "file": "engine/orchestration/src/test/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestratorTest.java"}, "test_case": {"identifier": "testRemoveDhcpServiceWithNic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemoveDhcpServiceWithNic() {\n        // make local mocks\n        VirtualMachineProfile vm =  mock(VirtualMachineProfile.class);\n        NicVO nic = mock(NicVO.class);\n        NetworkVO network = mock(NetworkVO.class);\n\n        // make sure that release dhcp will be called\n        when(vm.getType()).thenReturn(Type.User);\n        when(testOrchastrator._networkModel.areServicesSupportedInNetwork(network.getId(), Service.Dhcp)).thenReturn(true);\n        when(network.getTrafficType()).thenReturn(TrafficType.Guest);\n        when(network.getGuestType()).thenReturn(GuestType.Shared);\n        when(testOrchastrator._nicDao.listByNetworkIdTypeAndGatewayAndBroadcastUri(nic.getNetworkId(), VirtualMachine.Type.User, nic.getIPv4Gateway(), nic.getBroadcastUri())).thenReturn(new ArrayList<NicVO>());\n\n\n\n        when(network.getGuruName()).thenReturn(guruName);\n        when(testOrchastrator._networksDao.findById(nic.getNetworkId())).thenReturn(network);\n\n        testOrchastrator.removeNic(vm, nic);\n\n        verify(nic, times(1)).setState(Nic.State.Deallocating);\n        verify(testOrchastrator._networkModel, times(2)).getElementImplementingProvider(dhcpProvider);\n        verify(testOrchastrator._ntwkSrvcDao, times(2)).getProviderForServiceInNetwork(network.getId(), Service.Dhcp);\n        verify(testOrchastrator._networksDao, times(2)).findById(nic.getNetworkId());\n    }", "signature": "void testRemoveDhcpServiceWithNic()", "full_signature": "@Test public void testRemoveDhcpServiceWithNic()", "class_method_signature": "NetworkOrchestratorTest.testRemoveDhcpServiceWithNic()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "thenReturn", "when", "getType", "thenReturn", "when", "areServicesSupportedInNetwork", "getId", "thenReturn", "when", "getTrafficType", "thenReturn", "when", "getGuestType", "thenReturn", "when", "listByNetworkIdTypeAndGatewayAndBroadcastUri", "getNetworkId", "getIPv4Gateway", "getBroadcastUri", "thenReturn", "when", "getGuruName", "thenReturn", "when", "findById", "getNetworkId", "removeNic", "setState", "verify", "times", "getElementImplementingProvider", "verify", "times", "getProviderForServiceInNetwork", "verify", "times", "getId", "findById", "verify", "times", "getNetworkId"]}, "focal_class": {"identifier": "NetworkOrchestrator", "superclass": "extends ManagerBase", "interfaces": "implements NetworkOrchestrationService, Listener, Configurable", "fields": [{"original_string": "static final Logger s_logger = LoggerFactory.getLogger(NetworkOrchestrator.class);", "modifier": "static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(NetworkOrchestrator.class)", "var_name": "s_logger"}, {"original_string": "@Inject\n    EntityManager _entityMgr;", "modifier": "@Inject", "type": "EntityManager", "declarator": "_entityMgr", "var_name": "_entityMgr"}, {"original_string": "@Inject\n    DataCenterDao _dcDao = null;", "modifier": "@Inject", "type": "DataCenterDao", "declarator": "_dcDao = null", "var_name": "_dcDao"}, {"original_string": "@Inject\n    VlanDao _vlanDao = null;", "modifier": "@Inject", "type": "VlanDao", "declarator": "_vlanDao = null", "var_name": "_vlanDao"}, {"original_string": "@Inject\n    IPAddressDao _ipAddressDao = null;", "modifier": "@Inject", "type": "IPAddressDao", "declarator": "_ipAddressDao = null", "var_name": "_ipAddressDao"}, {"original_string": "@Inject\n    AccountDao _accountDao = null;", "modifier": "@Inject", "type": "AccountDao", "declarator": "_accountDao = null", "var_name": "_accountDao"}, {"original_string": "@Inject\n    ConfigurationDao _configDao;", "modifier": "@Inject", "type": "ConfigurationDao", "declarator": "_configDao", "var_name": "_configDao"}, {"original_string": "@Inject\n    UserVmDao _userVmDao = null;", "modifier": "@Inject", "type": "UserVmDao", "declarator": "_userVmDao = null", "var_name": "_userVmDao"}, {"original_string": "@Inject\n    AlertManager _alertMgr;", "modifier": "@Inject", "type": "AlertManager", "declarator": "_alertMgr", "var_name": "_alertMgr"}, {"original_string": "@Inject\n    ConfigurationManager _configMgr;", "modifier": "@Inject", "type": "ConfigurationManager", "declarator": "_configMgr", "var_name": "_configMgr"}, {"original_string": "@Inject\n    NetworkOfferingDao _networkOfferingDao = null;", "modifier": "@Inject", "type": "NetworkOfferingDao", "declarator": "_networkOfferingDao = null", "var_name": "_networkOfferingDao"}, {"original_string": "@Inject\n    NetworkDao _networksDao = null;", "modifier": "@Inject", "type": "NetworkDao", "declarator": "_networksDao = null", "var_name": "_networksDao"}, {"original_string": "@Inject\n    NicDao _nicDao = null;", "modifier": "@Inject", "type": "NicDao", "declarator": "_nicDao = null", "var_name": "_nicDao"}, {"original_string": "@Inject\n    RulesManager _rulesMgr;", "modifier": "@Inject", "type": "RulesManager", "declarator": "_rulesMgr", "var_name": "_rulesMgr"}, {"original_string": "@Inject\n    LoadBalancingRulesManager _lbMgr;", "modifier": "@Inject", "type": "LoadBalancingRulesManager", "declarator": "_lbMgr", "var_name": "_lbMgr"}, {"original_string": "@Inject\n    RemoteAccessVpnService _vpnMgr;", "modifier": "@Inject", "type": "RemoteAccessVpnService", "declarator": "_vpnMgr", "var_name": "_vpnMgr"}, {"original_string": "@Inject\n    PodVlanMapDao _podVlanMapDao;", "modifier": "@Inject", "type": "PodVlanMapDao", "declarator": "_podVlanMapDao", "var_name": "_podVlanMapDao"}, {"original_string": "@Inject\n    NetworkOfferingDetailsDao _ntwkOffDetailsDao;", "modifier": "@Inject", "type": "NetworkOfferingDetailsDao", "declarator": "_ntwkOffDetailsDao", "var_name": "_ntwkOffDetailsDao"}, {"original_string": "@Inject\n    AccountGuestVlanMapDao _accountGuestVlanMapDao;", "modifier": "@Inject", "type": "AccountGuestVlanMapDao", "declarator": "_accountGuestVlanMapDao", "var_name": "_accountGuestVlanMapDao"}, {"original_string": "@Inject\n    DataCenterVnetDao _datacenterVnetDao;", "modifier": "@Inject", "type": "DataCenterVnetDao", "declarator": "_datacenterVnetDao", "var_name": "_datacenterVnetDao"}, {"original_string": "@Inject\n    NetworkAccountDao _networkAccountDao;", "modifier": "@Inject", "type": "NetworkAccountDao", "declarator": "_networkAccountDao", "var_name": "_networkAccountDao"}, {"original_string": "@Inject\n    protected NicIpAliasDao _nicIpAliasDao;", "modifier": "@Inject\n    protected", "type": "NicIpAliasDao", "declarator": "_nicIpAliasDao", "var_name": "_nicIpAliasDao"}, {"original_string": "@Inject\n    protected IPAddressDao _publicIpAddressDao;", "modifier": "@Inject\n    protected", "type": "IPAddressDao", "declarator": "_publicIpAddressDao", "var_name": "_publicIpAddressDao"}, {"original_string": "@Inject\n    protected IpAddressManager _ipAddrMgr;", "modifier": "@Inject\n    protected", "type": "IpAddressManager", "declarator": "_ipAddrMgr", "var_name": "_ipAddrMgr"}, {"original_string": "@Inject\n    MessageBus _messageBus;", "modifier": "@Inject", "type": "MessageBus", "declarator": "_messageBus", "var_name": "_messageBus"}, {"original_string": "@Inject\n    VMNetworkMapDao _vmNetworkMapDao;", "modifier": "@Inject", "type": "VMNetworkMapDao", "declarator": "_vmNetworkMapDao", "var_name": "_vmNetworkMapDao"}, {"original_string": "List<NetworkGuru> networkGurus;", "modifier": "", "type": "List<NetworkGuru>", "declarator": "networkGurus", "var_name": "networkGurus"}, {"original_string": "List<NetworkElement> networkElements;", "modifier": "", "type": "List<NetworkElement>", "declarator": "networkElements", "var_name": "networkElements"}, {"original_string": "@Inject\n    NetworkDomainDao _networkDomainDao;", "modifier": "@Inject", "type": "NetworkDomainDao", "declarator": "_networkDomainDao", "var_name": "_networkDomainDao"}, {"original_string": "List<IpDeployer> ipDeployers;", "modifier": "", "type": "List<IpDeployer>", "declarator": "ipDeployers", "var_name": "ipDeployers"}, {"original_string": "List<DhcpServiceProvider> _dhcpProviders;", "modifier": "", "type": "List<DhcpServiceProvider>", "declarator": "_dhcpProviders", "var_name": "_dhcpProviders"}, {"original_string": "@Inject\n    VMInstanceDao _vmDao;", "modifier": "@Inject", "type": "VMInstanceDao", "declarator": "_vmDao", "var_name": "_vmDao"}, {"original_string": "@Inject\n    FirewallManager _firewallMgr;", "modifier": "@Inject", "type": "FirewallManager", "declarator": "_firewallMgr", "var_name": "_firewallMgr"}, {"original_string": "@Inject\n    FirewallRulesDao _firewallDao;", "modifier": "@Inject", "type": "FirewallRulesDao", "declarator": "_firewallDao", "var_name": "_firewallDao"}, {"original_string": "@Inject\n    ResourceLimitService _resourceLimitMgr;", "modifier": "@Inject", "type": "ResourceLimitService", "declarator": "_resourceLimitMgr", "var_name": "_resourceLimitMgr"}, {"original_string": "@Inject\n    NetworkOfferingServiceMapDao _ntwkOfferingSrvcDao;", "modifier": "@Inject", "type": "NetworkOfferingServiceMapDao", "declarator": "_ntwkOfferingSrvcDao", "var_name": "_ntwkOfferingSrvcDao"}, {"original_string": "@Inject\n    PhysicalNetworkDao _physicalNetworkDao;", "modifier": "@Inject", "type": "PhysicalNetworkDao", "declarator": "_physicalNetworkDao", "var_name": "_physicalNetworkDao"}, {"original_string": "@Inject\n    PhysicalNetworkServiceProviderDao _pNSPDao;", "modifier": "@Inject", "type": "PhysicalNetworkServiceProviderDao", "declarator": "_pNSPDao", "var_name": "_pNSPDao"}, {"original_string": "@Inject\n    PortForwardingRulesDao _portForwardingRulesDao;", "modifier": "@Inject", "type": "PortForwardingRulesDao", "declarator": "_portForwardingRulesDao", "var_name": "_portForwardingRulesDao"}, {"original_string": "@Inject\n    PhysicalNetworkTrafficTypeDao _pNTrafficTypeDao;", "modifier": "@Inject", "type": "PhysicalNetworkTrafficTypeDao", "declarator": "_pNTrafficTypeDao", "var_name": "_pNTrafficTypeDao"}, {"original_string": "@Inject\n    AgentManager _agentMgr;", "modifier": "@Inject", "type": "AgentManager", "declarator": "_agentMgr", "var_name": "_agentMgr"}, {"original_string": "@Inject\n    HostDao _hostDao;", "modifier": "@Inject", "type": "HostDao", "declarator": "_hostDao", "var_name": "_hostDao"}, {"original_string": "@Inject\n    NetworkServiceMapDao _ntwkSrvcDao;", "modifier": "@Inject", "type": "NetworkServiceMapDao", "declarator": "_ntwkSrvcDao", "var_name": "_ntwkSrvcDao"}, {"original_string": "@Inject\n    VpcManager _vpcMgr;", "modifier": "@Inject", "type": "VpcManager", "declarator": "_vpcMgr", "var_name": "_vpcMgr"}, {"original_string": "@Inject\n    PrivateIpDao _privateIpDao;", "modifier": "@Inject", "type": "PrivateIpDao", "declarator": "_privateIpDao", "var_name": "_privateIpDao"}, {"original_string": "@Inject\n    NetworkACLManager _networkACLMgr;", "modifier": "@Inject", "type": "NetworkACLManager", "declarator": "_networkACLMgr", "var_name": "_networkACLMgr"}, {"original_string": "@Inject\n    UsageEventDao _usageEventDao;", "modifier": "@Inject", "type": "UsageEventDao", "declarator": "_usageEventDao", "var_name": "_usageEventDao"}, {"original_string": "@Inject\n    NetworkModel _networkModel;", "modifier": "@Inject", "type": "NetworkModel", "declarator": "_networkModel", "var_name": "_networkModel"}, {"original_string": "@Inject\n    NicSecondaryIpDao _nicSecondaryIpDao;", "modifier": "@Inject", "type": "NicSecondaryIpDao", "declarator": "_nicSecondaryIpDao", "var_name": "_nicSecondaryIpDao"}, {"original_string": "@Inject\n    PortableIpDao _portableIpDao;", "modifier": "@Inject", "type": "PortableIpDao", "declarator": "_portableIpDao", "var_name": "_portableIpDao"}, {"original_string": "@Inject\n    ConfigDepot _configDepot;", "modifier": "@Inject", "type": "ConfigDepot", "declarator": "_configDepot", "var_name": "_configDepot"}, {"original_string": "protected StateMachine2<Network.State, Network.Event, Network> _stateMachine;", "modifier": "protected", "type": "StateMachine2<Network.State, Network.Event, Network>", "declarator": "_stateMachine", "var_name": "_stateMachine"}, {"original_string": "ScheduledExecutorService _executor;", "modifier": "", "type": "ScheduledExecutorService", "declarator": "_executor", "var_name": "_executor"}, {"original_string": "SearchBuilder<IPAddressVO> AssignIpAddressSearch;", "modifier": "", "type": "SearchBuilder<IPAddressVO>", "declarator": "AssignIpAddressSearch", "var_name": "AssignIpAddressSearch"}, {"original_string": "SearchBuilder<IPAddressVO> AssignIpAddressFromPodVlanSearch;", "modifier": "", "type": "SearchBuilder<IPAddressVO>", "declarator": "AssignIpAddressFromPodVlanSearch", "var_name": "AssignIpAddressFromPodVlanSearch"}, {"original_string": "HashMap<Long, Long> _lastNetworkIdsToFree = new HashMap<>();", "modifier": "", "type": "HashMap<Long, Long>", "declarator": "_lastNetworkIdsToFree = new HashMap<>()", "var_name": "_lastNetworkIdsToFree"}, {"original_string": "public static final ConfigKey<Integer> NetworkGcWait = new ConfigKey<>(Integer.class, \"network.gc.wait\", \"Advanced\", \"600\",\n            \"Time (in seconds) to wait before shutting down a network that's not in used\", false, Scope.Global, null);", "modifier": "public static final", "type": "ConfigKey<Integer>", "declarator": "NetworkGcWait = new ConfigKey<>(Integer.class, \"network.gc.wait\", \"Advanced\", \"600\",\n            \"Time (in seconds) to wait before shutting down a network that's not in used\", false, Scope.Global, null)", "var_name": "NetworkGcWait"}, {"original_string": "public static final ConfigKey<Integer> NetworkGcInterval = new ConfigKey<>(Integer.class, \"network.gc.interval\", \"Advanced\", \"600\",\n            \"Seconds to wait before checking for networks to shutdown\", true, Scope.Global, null);", "modifier": "public static final", "type": "ConfigKey<Integer>", "declarator": "NetworkGcInterval = new ConfigKey<>(Integer.class, \"network.gc.interval\", \"Advanced\", \"600\",\n            \"Seconds to wait before checking for networks to shutdown\", true, Scope.Global, null)", "var_name": "NetworkGcInterval"}], "methods": [{"identifier": "getNetworkGurus", "parameters": "()", "modifiers": "public", "return": "List<NetworkGuru>", "signature": "List<NetworkGuru> getNetworkGurus()", "full_signature": "public List<NetworkGuru> getNetworkGurus()", "class_method_signature": "NetworkOrchestrator.getNetworkGurus()", "testcase": false, "constructor": false}, {"identifier": "setNetworkGurus", "parameters": "(final List<NetworkGuru> networkGurus)", "modifiers": "public", "return": "void", "signature": "void setNetworkGurus(final List<NetworkGuru> networkGurus)", "full_signature": "public void setNetworkGurus(final List<NetworkGuru> networkGurus)", "class_method_signature": "NetworkOrchestrator.setNetworkGurus(final List<NetworkGuru> networkGurus)", "testcase": false, "constructor": false}, {"identifier": "getNetworkElements", "parameters": "()", "modifiers": "public", "return": "List<NetworkElement>", "signature": "List<NetworkElement> getNetworkElements()", "full_signature": "public List<NetworkElement> getNetworkElements()", "class_method_signature": "NetworkOrchestrator.getNetworkElements()", "testcase": false, "constructor": false}, {"identifier": "setNetworkElements", "parameters": "(final List<NetworkElement> networkElements)", "modifiers": "public", "return": "void", "signature": "void setNetworkElements(final List<NetworkElement> networkElements)", "full_signature": "public void setNetworkElements(final List<NetworkElement> networkElements)", "class_method_signature": "NetworkOrchestrator.setNetworkElements(final List<NetworkElement> networkElements)", "testcase": false, "constructor": false}, {"identifier": "getIpDeployers", "parameters": "()", "modifiers": "public", "return": "List<IpDeployer>", "signature": "List<IpDeployer> getIpDeployers()", "full_signature": "public List<IpDeployer> getIpDeployers()", "class_method_signature": "NetworkOrchestrator.getIpDeployers()", "testcase": false, "constructor": false}, {"identifier": "setIpDeployers", "parameters": "(final List<IpDeployer> ipDeployers)", "modifiers": "public", "return": "void", "signature": "void setIpDeployers(final List<IpDeployer> ipDeployers)", "full_signature": "public void setIpDeployers(final List<IpDeployer> ipDeployers)", "class_method_signature": "NetworkOrchestrator.setIpDeployers(final List<IpDeployer> ipDeployers)", "testcase": false, "constructor": false}, {"identifier": "getDhcpProviders", "parameters": "()", "modifiers": "public", "return": "List<DhcpServiceProvider>", "signature": "List<DhcpServiceProvider> getDhcpProviders()", "full_signature": "public List<DhcpServiceProvider> getDhcpProviders()", "class_method_signature": "NetworkOrchestrator.getDhcpProviders()", "testcase": false, "constructor": false}, {"identifier": "setDhcpProviders", "parameters": "(final List<DhcpServiceProvider> dhcpProviders)", "modifiers": "public", "return": "void", "signature": "void setDhcpProviders(final List<DhcpServiceProvider> dhcpProviders)", "full_signature": "public void setDhcpProviders(final List<DhcpServiceProvider> dhcpProviders)", "class_method_signature": "NetworkOrchestrator.setDhcpProviders(final List<DhcpServiceProvider> dhcpProviders)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(final String name, final Map<String, Object> params)", "modifiers": "@Override @DB public", "return": "boolean", "signature": "boolean configure(final String name, final Map<String, Object> params)", "full_signature": "@Override @DB public boolean configure(final String name, final Map<String, Object> params)", "class_method_signature": "NetworkOrchestrator.configure(final String name, final Map<String, Object> params)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean start()", "full_signature": "@Override public boolean start()", "class_method_signature": "NetworkOrchestrator.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean stop()", "full_signature": "@Override public boolean stop()", "class_method_signature": "NetworkOrchestrator.stop()", "testcase": false, "constructor": false}, {"identifier": "NetworkOrchestrator", "parameters": "()", "modifiers": "protected", "return": "", "signature": " NetworkOrchestrator()", "full_signature": "protected  NetworkOrchestrator()", "class_method_signature": "NetworkOrchestrator.NetworkOrchestrator()", "testcase": false, "constructor": true}, {"identifier": "setupNetwork", "parameters": "(final Account owner, final NetworkOffering offering, final DeploymentPlan plan, final String name, final String displayText, final boolean isDefault)", "modifiers": "@Override public", "return": "List<? extends Network>", "signature": "List<? extends Network> setupNetwork(final Account owner, final NetworkOffering offering, final DeploymentPlan plan, final String name, final String displayText, final boolean isDefault)", "full_signature": "@Override public List<? extends Network> setupNetwork(final Account owner, final NetworkOffering offering, final DeploymentPlan plan, final String name, final String displayText, final boolean isDefault)", "class_method_signature": "NetworkOrchestrator.setupNetwork(final Account owner, final NetworkOffering offering, final DeploymentPlan plan, final String name, final String displayText, final boolean isDefault)", "testcase": false, "constructor": false}, {"identifier": "setupNetwork", "parameters": "(final Account owner, final NetworkOffering offering, final Network predefined, final DeploymentPlan plan, final String name,\n                                                final String displayText, final boolean errorIfAlreadySetup, final Long domainId, final ACLType aclType, final Boolean subdomainAccess, final Long vpcId,\n                                                final Boolean isDisplayNetworkEnabled)", "modifiers": "@Override @DB public", "return": "List<? extends Network>", "signature": "List<? extends Network> setupNetwork(final Account owner, final NetworkOffering offering, final Network predefined, final DeploymentPlan plan, final String name,\n                                                final String displayText, final boolean errorIfAlreadySetup, final Long domainId, final ACLType aclType, final Boolean subdomainAccess, final Long vpcId,\n                                                final Boolean isDisplayNetworkEnabled)", "full_signature": "@Override @DB public List<? extends Network> setupNetwork(final Account owner, final NetworkOffering offering, final Network predefined, final DeploymentPlan plan, final String name,\n                                                final String displayText, final boolean errorIfAlreadySetup, final Long domainId, final ACLType aclType, final Boolean subdomainAccess, final Long vpcId,\n                                                final Boolean isDisplayNetworkEnabled)", "class_method_signature": "NetworkOrchestrator.setupNetwork(final Account owner, final NetworkOffering offering, final Network predefined, final DeploymentPlan plan, final String name,\n                                                final String displayText, final boolean errorIfAlreadySetup, final Long domainId, final ACLType aclType, final Boolean subdomainAccess, final Long vpcId,\n                                                final Boolean isDisplayNetworkEnabled)", "testcase": false, "constructor": false}, {"identifier": "allocate", "parameters": "(final VirtualMachineProfile vm, final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks)", "modifiers": "@Override @DB public", "return": "void", "signature": "void allocate(final VirtualMachineProfile vm, final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks)", "full_signature": "@Override @DB public void allocate(final VirtualMachineProfile vm, final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks)", "class_method_signature": "NetworkOrchestrator.allocate(final VirtualMachineProfile vm, final LinkedHashMap<? extends Network, List<? extends NicProfile>> networks)", "testcase": false, "constructor": false}, {"identifier": "allocateNic", "parameters": "(final NicProfile requested, final Network network, final Boolean isDefaultNic, int deviceId, final VirtualMachineProfile vm)", "modifiers": "@DB @Override public", "return": "Pair<NicProfile, Integer>", "signature": "Pair<NicProfile, Integer> allocateNic(final NicProfile requested, final Network network, final Boolean isDefaultNic, int deviceId, final VirtualMachineProfile vm)", "full_signature": "@DB @Override public Pair<NicProfile, Integer> allocateNic(final NicProfile requested, final Network network, final Boolean isDefaultNic, int deviceId, final VirtualMachineProfile vm)", "class_method_signature": "NetworkOrchestrator.allocateNic(final NicProfile requested, final Network network, final Boolean isDefaultNic, int deviceId, final VirtualMachineProfile vm)", "testcase": false, "constructor": false}, {"identifier": "applyProfileToNic", "parameters": "(final NicVO vo, final NicProfile profile, Integer deviceId)", "modifiers": "protected", "return": "Integer", "signature": "Integer applyProfileToNic(final NicVO vo, final NicProfile profile, Integer deviceId)", "full_signature": "protected Integer applyProfileToNic(final NicVO vo, final NicProfile profile, Integer deviceId)", "class_method_signature": "NetworkOrchestrator.applyProfileToNic(final NicVO vo, final NicProfile profile, Integer deviceId)", "testcase": false, "constructor": false}, {"identifier": "applyProfileToNicForRelease", "parameters": "(final NicVO vo, final NicProfile profile)", "modifiers": "protected", "return": "void", "signature": "void applyProfileToNicForRelease(final NicVO vo, final NicProfile profile)", "full_signature": "protected void applyProfileToNicForRelease(final NicVO vo, final NicProfile profile)", "class_method_signature": "NetworkOrchestrator.applyProfileToNicForRelease(final NicVO vo, final NicProfile profile)", "testcase": false, "constructor": false}, {"identifier": "applyProfileToNetwork", "parameters": "(final NetworkVO network, final NetworkProfile profile)", "modifiers": "protected", "return": "void", "signature": "void applyProfileToNetwork(final NetworkVO network, final NetworkProfile profile)", "full_signature": "protected void applyProfileToNetwork(final NetworkVO network, final NetworkProfile profile)", "class_method_signature": "NetworkOrchestrator.applyProfileToNetwork(final NetworkVO network, final NetworkProfile profile)", "testcase": false, "constructor": false}, {"identifier": "toNicTO", "parameters": "(final NicVO nic, final NicProfile profile, final NetworkVO config)", "modifiers": "protected", "return": "NicTO", "signature": "NicTO toNicTO(final NicVO nic, final NicProfile profile, final NetworkVO config)", "full_signature": "protected NicTO toNicTO(final NicVO nic, final NicProfile profile, final NetworkVO config)", "class_method_signature": "NetworkOrchestrator.toNicTO(final NicVO nic, final NicProfile profile, final NetworkVO config)", "testcase": false, "constructor": false}, {"identifier": "isNetworkImplemented", "parameters": "(final NetworkVO network)", "modifiers": "", "return": "boolean", "signature": "boolean isNetworkImplemented(final NetworkVO network)", "full_signature": " boolean isNetworkImplemented(final NetworkVO network)", "class_method_signature": "NetworkOrchestrator.isNetworkImplemented(final NetworkVO network)", "testcase": false, "constructor": false}, {"identifier": "implementNetwork", "parameters": "(final long networkId, final DeployDestination dest, final ReservationContext context, final boolean isRouter)", "modifiers": "", "return": "Pair<NetworkGuru, NetworkVO>", "signature": "Pair<NetworkGuru, NetworkVO> implementNetwork(final long networkId, final DeployDestination dest, final ReservationContext context, final boolean isRouter)", "full_signature": " Pair<NetworkGuru, NetworkVO> implementNetwork(final long networkId, final DeployDestination dest, final ReservationContext context, final boolean isRouter)", "class_method_signature": "NetworkOrchestrator.implementNetwork(final long networkId, final DeployDestination dest, final ReservationContext context, final boolean isRouter)", "testcase": false, "constructor": false}, {"identifier": "implementNetwork", "parameters": "(final long networkId, final DeployDestination dest, final ReservationContext context)", "modifiers": "@Override @DB public", "return": "Pair<NetworkGuru, NetworkVO>", "signature": "Pair<NetworkGuru, NetworkVO> implementNetwork(final long networkId, final DeployDestination dest, final ReservationContext context)", "full_signature": "@Override @DB public Pair<NetworkGuru, NetworkVO> implementNetwork(final long networkId, final DeployDestination dest, final ReservationContext context)", "class_method_signature": "NetworkOrchestrator.implementNetwork(final long networkId, final DeployDestination dest, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "implementNetworkElementsAndResources", "parameters": "(final DeployDestination dest, final ReservationContext context, final Network network, final NetworkOffering offering)", "modifiers": "@Override public", "return": "void", "signature": "void implementNetworkElementsAndResources(final DeployDestination dest, final ReservationContext context, final Network network, final NetworkOffering offering)", "full_signature": "@Override public void implementNetworkElementsAndResources(final DeployDestination dest, final ReservationContext context, final Network network, final NetworkOffering offering)", "class_method_signature": "NetworkOrchestrator.implementNetworkElementsAndResources(final DeployDestination dest, final ReservationContext context, final Network network, final NetworkOffering offering)", "testcase": false, "constructor": false}, {"identifier": "reprogramNetworkRules", "parameters": "(final long networkId, final Account caller, final Network network)", "modifiers": "protected", "return": "boolean", "signature": "boolean reprogramNetworkRules(final long networkId, final Account caller, final Network network)", "full_signature": "protected boolean reprogramNetworkRules(final long networkId, final Account caller, final Network network)", "class_method_signature": "NetworkOrchestrator.reprogramNetworkRules(final long networkId, final Account caller, final Network network)", "testcase": false, "constructor": false}, {"identifier": "prepareElement", "parameters": "(final NetworkElement element, final Network network, final NicProfile profile, final VirtualMachineProfile vmProfile, final DeployDestination dest,\n                                     final ReservationContext context)", "modifiers": "protected", "return": "boolean", "signature": "boolean prepareElement(final NetworkElement element, final Network network, final NicProfile profile, final VirtualMachineProfile vmProfile, final DeployDestination dest,\n                                     final ReservationContext context)", "full_signature": "protected boolean prepareElement(final NetworkElement element, final Network network, final NicProfile profile, final VirtualMachineProfile vmProfile, final DeployDestination dest,\n                                     final ReservationContext context)", "class_method_signature": "NetworkOrchestrator.prepareElement(final NetworkElement element, final Network network, final NicProfile profile, final VirtualMachineProfile vmProfile, final DeployDestination dest,\n                                     final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "updateNic", "parameters": "(final NicVO nic, final long networkId, final int count)", "modifiers": "@DB protected", "return": "void", "signature": "void updateNic(final NicVO nic, final long networkId, final int count)", "full_signature": "@DB protected void updateNic(final NicVO nic, final long networkId, final int count)", "class_method_signature": "NetworkOrchestrator.updateNic(final NicVO nic, final long networkId, final int count)", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "(final VirtualMachineProfile vmProfile, final DeployDestination dest, final ReservationContext context)", "modifiers": "@Override public", "return": "void", "signature": "void prepare(final VirtualMachineProfile vmProfile, final DeployDestination dest, final ReservationContext context)", "full_signature": "@Override public void prepare(final VirtualMachineProfile vmProfile, final DeployDestination dest, final ReservationContext context)", "class_method_signature": "NetworkOrchestrator.prepare(final VirtualMachineProfile vmProfile, final DeployDestination dest, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "prepareNic", "parameters": "(final VirtualMachineProfile vmProfile, final DeployDestination dest, final ReservationContext context, final long nicId, final Network network)", "modifiers": "@Override public", "return": "NicProfile", "signature": "NicProfile prepareNic(final VirtualMachineProfile vmProfile, final DeployDestination dest, final ReservationContext context, final long nicId, final Network network)", "full_signature": "@Override public NicProfile prepareNic(final VirtualMachineProfile vmProfile, final DeployDestination dest, final ReservationContext context, final long nicId, final Network network)", "class_method_signature": "NetworkOrchestrator.prepareNic(final VirtualMachineProfile vmProfile, final DeployDestination dest, final ReservationContext context, final long nicId, final Network network)", "testcase": false, "constructor": false}, {"identifier": "prepareNicForMigration", "parameters": "(final VirtualMachineProfile vm, final DeployDestination dest)", "modifiers": "@Override public", "return": "void", "signature": "void prepareNicForMigration(final VirtualMachineProfile vm, final DeployDestination dest)", "full_signature": "@Override public void prepareNicForMigration(final VirtualMachineProfile vm, final DeployDestination dest)", "class_method_signature": "NetworkOrchestrator.prepareNicForMigration(final VirtualMachineProfile vm, final DeployDestination dest)", "testcase": false, "constructor": false}, {"identifier": "prepareAllNicsForMigration", "parameters": "(final VirtualMachineProfile vm, final DeployDestination dest)", "modifiers": "@Override public", "return": "void", "signature": "void prepareAllNicsForMigration(final VirtualMachineProfile vm, final DeployDestination dest)", "full_signature": "@Override public void prepareAllNicsForMigration(final VirtualMachineProfile vm, final DeployDestination dest)", "class_method_signature": "NetworkOrchestrator.prepareAllNicsForMigration(final VirtualMachineProfile vm, final DeployDestination dest)", "testcase": false, "constructor": false}, {"identifier": "findNicProfileById", "parameters": "(final VirtualMachineProfile vm, final long id)", "modifiers": "private", "return": "NicProfile", "signature": "NicProfile findNicProfileById(final VirtualMachineProfile vm, final long id)", "full_signature": "private NicProfile findNicProfileById(final VirtualMachineProfile vm, final long id)", "class_method_signature": "NetworkOrchestrator.findNicProfileById(final VirtualMachineProfile vm, final long id)", "testcase": false, "constructor": false}, {"identifier": "commitNicForMigration", "parameters": "(final VirtualMachineProfile src, final VirtualMachineProfile dst)", "modifiers": "@Override public", "return": "void", "signature": "void commitNicForMigration(final VirtualMachineProfile src, final VirtualMachineProfile dst)", "full_signature": "@Override public void commitNicForMigration(final VirtualMachineProfile src, final VirtualMachineProfile dst)", "class_method_signature": "NetworkOrchestrator.commitNicForMigration(final VirtualMachineProfile src, final VirtualMachineProfile dst)", "testcase": false, "constructor": false}, {"identifier": "rollbackNicForMigration", "parameters": "(final VirtualMachineProfile src, final VirtualMachineProfile dst)", "modifiers": "@Override public", "return": "void", "signature": "void rollbackNicForMigration(final VirtualMachineProfile src, final VirtualMachineProfile dst)", "full_signature": "@Override public void rollbackNicForMigration(final VirtualMachineProfile src, final VirtualMachineProfile dst)", "class_method_signature": "NetworkOrchestrator.rollbackNicForMigration(final VirtualMachineProfile src, final VirtualMachineProfile dst)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "(final VirtualMachineProfile vmProfile, final boolean forced)", "modifiers": "@Override @DB public", "return": "void", "signature": "void release(final VirtualMachineProfile vmProfile, final boolean forced)", "full_signature": "@Override @DB public void release(final VirtualMachineProfile vmProfile, final boolean forced)", "class_method_signature": "NetworkOrchestrator.release(final VirtualMachineProfile vmProfile, final boolean forced)", "testcase": false, "constructor": false}, {"identifier": "releaseNic", "parameters": "(final VirtualMachineProfile vmProfile, final Nic nic)", "modifiers": "@Override @DB public", "return": "void", "signature": "void releaseNic(final VirtualMachineProfile vmProfile, final Nic nic)", "full_signature": "@Override @DB public void releaseNic(final VirtualMachineProfile vmProfile, final Nic nic)", "class_method_signature": "NetworkOrchestrator.releaseNic(final VirtualMachineProfile vmProfile, final Nic nic)", "testcase": false, "constructor": false}, {"identifier": "releaseNic", "parameters": "(final VirtualMachineProfile vmProfile, final long nicId)", "modifiers": "@DB protected", "return": "void", "signature": "void releaseNic(final VirtualMachineProfile vmProfile, final long nicId)", "full_signature": "@DB protected void releaseNic(final VirtualMachineProfile vmProfile, final long nicId)", "class_method_signature": "NetworkOrchestrator.releaseNic(final VirtualMachineProfile vmProfile, final long nicId)", "testcase": false, "constructor": false}, {"identifier": "cleanupNics", "parameters": "(final VirtualMachineProfile vm)", "modifiers": "@Override public", "return": "void", "signature": "void cleanupNics(final VirtualMachineProfile vm)", "full_signature": "@Override public void cleanupNics(final VirtualMachineProfile vm)", "class_method_signature": "NetworkOrchestrator.cleanupNics(final VirtualMachineProfile vm)", "testcase": false, "constructor": false}, {"identifier": "removeNic", "parameters": "(final VirtualMachineProfile vm, final Nic nic)", "modifiers": "@Override public", "return": "void", "signature": "void removeNic(final VirtualMachineProfile vm, final Nic nic)", "full_signature": "@Override public void removeNic(final VirtualMachineProfile vm, final Nic nic)", "class_method_signature": "NetworkOrchestrator.removeNic(final VirtualMachineProfile vm, final Nic nic)", "testcase": false, "constructor": false}, {"identifier": "removeNic", "parameters": "(final VirtualMachineProfile vm, final NicVO nic)", "modifiers": "protected", "return": "void", "signature": "void removeNic(final VirtualMachineProfile vm, final NicVO nic)", "full_signature": "protected void removeNic(final VirtualMachineProfile vm, final NicVO nic)", "class_method_signature": "NetworkOrchestrator.removeNic(final VirtualMachineProfile vm, final NicVO nic)", "testcase": false, "constructor": false}, {"identifier": "isDhcpAccrossMultipleSubnetsSupported", "parameters": "(final DhcpServiceProvider dhcpServiceProvider)", "modifiers": "public", "return": "boolean", "signature": "boolean isDhcpAccrossMultipleSubnetsSupported(final DhcpServiceProvider dhcpServiceProvider)", "full_signature": "public boolean isDhcpAccrossMultipleSubnetsSupported(final DhcpServiceProvider dhcpServiceProvider)", "class_method_signature": "NetworkOrchestrator.isDhcpAccrossMultipleSubnetsSupported(final DhcpServiceProvider dhcpServiceProvider)", "testcase": false, "constructor": false}, {"identifier": "isLastNicInSubnet", "parameters": "(final NicVO nic)", "modifiers": "private", "return": "boolean", "signature": "boolean isLastNicInSubnet(final NicVO nic)", "full_signature": "private boolean isLastNicInSubnet(final NicVO nic)", "class_method_signature": "NetworkOrchestrator.isLastNicInSubnet(final NicVO nic)", "testcase": false, "constructor": false}, {"identifier": "removeDhcpServiceInSubnet", "parameters": "(final Nic nic)", "modifiers": "@DB @Override public", "return": "void", "signature": "void removeDhcpServiceInSubnet(final Nic nic)", "full_signature": "@DB @Override public void removeDhcpServiceInSubnet(final Nic nic)", "class_method_signature": "NetworkOrchestrator.removeDhcpServiceInSubnet(final Nic nic)", "testcase": false, "constructor": false}, {"identifier": "expungeNics", "parameters": "(final VirtualMachineProfile vm)", "modifiers": "@Override public", "return": "void", "signature": "void expungeNics(final VirtualMachineProfile vm)", "full_signature": "@Override public void expungeNics(final VirtualMachineProfile vm)", "class_method_signature": "NetworkOrchestrator.expungeNics(final VirtualMachineProfile vm)", "testcase": false, "constructor": false}, {"identifier": "createGuestNetwork", "parameters": "(final long networkOfferingId, final String name, final String displayText, final String gateway, final String cidr, String vlanId,\n                                      String networkDomain, final Account owner, final Long domainId, final PhysicalNetwork pNtwk, final long zoneId, final ACLType aclType, Boolean subdomainAccess,\n                                      final Long vpcId, final String ip6Gateway, final String ip6Cidr, final Boolean isDisplayNetworkEnabled, final String isolatedPvlan)", "modifiers": "@Override @DB public", "return": "Network", "signature": "Network createGuestNetwork(final long networkOfferingId, final String name, final String displayText, final String gateway, final String cidr, String vlanId,\n                                      String networkDomain, final Account owner, final Long domainId, final PhysicalNetwork pNtwk, final long zoneId, final ACLType aclType, Boolean subdomainAccess,\n                                      final Long vpcId, final String ip6Gateway, final String ip6Cidr, final Boolean isDisplayNetworkEnabled, final String isolatedPvlan)", "full_signature": "@Override @DB public Network createGuestNetwork(final long networkOfferingId, final String name, final String displayText, final String gateway, final String cidr, String vlanId,\n                                      String networkDomain, final Account owner, final Long domainId, final PhysicalNetwork pNtwk, final long zoneId, final ACLType aclType, Boolean subdomainAccess,\n                                      final Long vpcId, final String ip6Gateway, final String ip6Cidr, final Boolean isDisplayNetworkEnabled, final String isolatedPvlan)", "class_method_signature": "NetworkOrchestrator.createGuestNetwork(final long networkOfferingId, final String name, final String displayText, final String gateway, final String cidr, String vlanId,\n                                      String networkDomain, final Account owner, final Long domainId, final PhysicalNetwork pNtwk, final long zoneId, final ACLType aclType, Boolean subdomainAccess,\n                                      final Long vpcId, final String ip6Gateway, final String ip6Cidr, final Boolean isDisplayNetworkEnabled, final String isolatedPvlan)", "testcase": false, "constructor": false}, {"identifier": "shutdownNetwork", "parameters": "(final long networkId, final ReservationContext context, final boolean cleanupElements)", "modifiers": "@Override @DB public", "return": "boolean", "signature": "boolean shutdownNetwork(final long networkId, final ReservationContext context, final boolean cleanupElements)", "full_signature": "@Override @DB public boolean shutdownNetwork(final long networkId, final ReservationContext context, final boolean cleanupElements)", "class_method_signature": "NetworkOrchestrator.shutdownNetwork(final long networkId, final ReservationContext context, final boolean cleanupElements)", "testcase": false, "constructor": false}, {"identifier": "shutdownNetworkElementsAndResources", "parameters": "(final ReservationContext context, final boolean cleanupElements, final Network network)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean shutdownNetworkElementsAndResources(final ReservationContext context, final boolean cleanupElements, final Network network)", "full_signature": "@Override public boolean shutdownNetworkElementsAndResources(final ReservationContext context, final boolean cleanupElements, final Network network)", "class_method_signature": "NetworkOrchestrator.shutdownNetworkElementsAndResources(final ReservationContext context, final boolean cleanupElements, final Network network)", "testcase": false, "constructor": false}, {"identifier": "destroyNetwork", "parameters": "(final long networkId, final ReservationContext context, final boolean forced)", "modifiers": "@Override @DB public", "return": "boolean", "signature": "boolean destroyNetwork(final long networkId, final ReservationContext context, final boolean forced)", "full_signature": "@Override @DB public boolean destroyNetwork(final long networkId, final ReservationContext context, final boolean forced)", "class_method_signature": "NetworkOrchestrator.destroyNetwork(final long networkId, final ReservationContext context, final boolean forced)", "testcase": false, "constructor": false}, {"identifier": "resourceCountNeedsUpdate", "parameters": "(final NetworkOffering ntwkOff, final ACLType aclType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean resourceCountNeedsUpdate(final NetworkOffering ntwkOff, final ACLType aclType)", "full_signature": "@Override public boolean resourceCountNeedsUpdate(final NetworkOffering ntwkOff, final ACLType aclType)", "class_method_signature": "NetworkOrchestrator.resourceCountNeedsUpdate(final NetworkOffering ntwkOff, final ACLType aclType)", "testcase": false, "constructor": false}, {"identifier": "deleteVlansInNetwork", "parameters": "(final long networkId, final long userId, final Account callerAccount)", "modifiers": "protected", "return": "boolean", "signature": "boolean deleteVlansInNetwork(final long networkId, final long userId, final Account callerAccount)", "full_signature": "protected boolean deleteVlansInNetwork(final long networkId, final long userId, final Account callerAccount)", "class_method_signature": "NetworkOrchestrator.deleteVlansInNetwork(final long networkId, final long userId, final Account callerAccount)", "testcase": false, "constructor": false}, {"identifier": "startNetwork", "parameters": "(final long networkId, final DeployDestination dest, final ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean startNetwork(final long networkId, final DeployDestination dest, final ReservationContext context)", "full_signature": "@Override public boolean startNetwork(final long networkId, final DeployDestination dest, final ReservationContext context)", "class_method_signature": "NetworkOrchestrator.startNetwork(final long networkId, final DeployDestination dest, final ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "restartNetwork", "parameters": "(final Long networkId, final Account callerAccount, final User callerUser, final boolean cleanup)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean restartNetwork(final Long networkId, final Account callerAccount, final User callerUser, final boolean cleanup)", "full_signature": "@Override public boolean restartNetwork(final Long networkId, final Account callerAccount, final User callerUser, final boolean cleanup)", "class_method_signature": "NetworkOrchestrator.restartNetwork(final Long networkId, final Account callerAccount, final User callerUser, final boolean cleanup)", "testcase": false, "constructor": false}, {"identifier": "setRestartRequired", "parameters": "(final NetworkVO network, final boolean restartRequired)", "modifiers": "private", "return": "void", "signature": "void setRestartRequired(final NetworkVO network, final boolean restartRequired)", "full_signature": "private void setRestartRequired(final NetworkVO network, final boolean restartRequired)", "class_method_signature": "NetworkOrchestrator.setRestartRequired(final NetworkVO network, final boolean restartRequired)", "testcase": false, "constructor": false}, {"identifier": "getActiveNicsInNetwork", "parameters": "(final long networkId)", "modifiers": "protected", "return": "int", "signature": "int getActiveNicsInNetwork(final long networkId)", "full_signature": "protected int getActiveNicsInNetwork(final long networkId)", "class_method_signature": "NetworkOrchestrator.getActiveNicsInNetwork(final long networkId)", "testcase": false, "constructor": false}, {"identifier": "convertNetworkToNetworkProfile", "parameters": "(final long networkId)", "modifiers": "@Override public", "return": "NetworkProfile", "signature": "NetworkProfile convertNetworkToNetworkProfile(final long networkId)", "full_signature": "@Override public NetworkProfile convertNetworkToNetworkProfile(final long networkId)", "class_method_signature": "NetworkOrchestrator.convertNetworkToNetworkProfile(final long networkId)", "testcase": false, "constructor": false}, {"identifier": "getPasswordResetProvider", "parameters": "(final Network network)", "modifiers": "@Override public", "return": "UserDataServiceProvider", "signature": "UserDataServiceProvider getPasswordResetProvider(final Network network)", "full_signature": "@Override public UserDataServiceProvider getPasswordResetProvider(final Network network)", "class_method_signature": "NetworkOrchestrator.getPasswordResetProvider(final Network network)", "testcase": false, "constructor": false}, {"identifier": "getSSHKeyResetProvider", "parameters": "(final Network network)", "modifiers": "@Override public", "return": "UserDataServiceProvider", "signature": "UserDataServiceProvider getSSHKeyResetProvider(final Network network)", "full_signature": "@Override public UserDataServiceProvider getSSHKeyResetProvider(final Network network)", "class_method_signature": "NetworkOrchestrator.getSSHKeyResetProvider(final Network network)", "testcase": false, "constructor": false}, {"identifier": "getDhcpServiceProvider", "parameters": "(final Network network)", "modifiers": "@Override public", "return": "DhcpServiceProvider", "signature": "DhcpServiceProvider getDhcpServiceProvider(final Network network)", "full_signature": "@Override public DhcpServiceProvider getDhcpServiceProvider(final Network network)", "class_method_signature": "NetworkOrchestrator.getDhcpServiceProvider(final Network network)", "testcase": false, "constructor": false}, {"identifier": "isSharedNetworkWithServices", "parameters": "(final Network network)", "modifiers": "protected", "return": "boolean", "signature": "boolean isSharedNetworkWithServices(final Network network)", "full_signature": "protected boolean isSharedNetworkWithServices(final Network network)", "class_method_signature": "NetworkOrchestrator.isSharedNetworkWithServices(final Network network)", "testcase": false, "constructor": false}, {"identifier": "isSharedNetworkOfferingWithServices", "parameters": "(final long networkOfferingId)", "modifiers": "protected", "return": "boolean", "signature": "boolean isSharedNetworkOfferingWithServices(final long networkOfferingId)", "full_signature": "protected boolean isSharedNetworkOfferingWithServices(final long networkOfferingId)", "class_method_signature": "NetworkOrchestrator.isSharedNetworkOfferingWithServices(final long networkOfferingId)", "testcase": false, "constructor": false}, {"identifier": "listVmNics", "parameters": "(final long vmId, final Long nicId, final Long networkId)", "modifiers": "@Override public", "return": "List<? extends Nic>", "signature": "List<? extends Nic> listVmNics(final long vmId, final Long nicId, final Long networkId)", "full_signature": "@Override public List<? extends Nic> listVmNics(final long vmId, final Long nicId, final Long networkId)", "class_method_signature": "NetworkOrchestrator.listVmNics(final long vmId, final Long nicId, final Long networkId)", "testcase": false, "constructor": false}, {"identifier": "reallocate", "parameters": "(final VirtualMachineProfile vm, final DataCenterDeployment dest)", "modifiers": "@DB @Override public", "return": "boolean", "signature": "boolean reallocate(final VirtualMachineProfile vm, final DataCenterDeployment dest)", "full_signature": "@DB @Override public boolean reallocate(final VirtualMachineProfile vm, final DataCenterDeployment dest)", "class_method_signature": "NetworkOrchestrator.reallocate(final VirtualMachineProfile vm, final DataCenterDeployment dest)", "testcase": false, "constructor": false}, {"identifier": "cleanupNetworkResources", "parameters": "(final long networkId, final Account caller, final long callerUserId)", "modifiers": "private", "return": "boolean", "signature": "boolean cleanupNetworkResources(final long networkId, final Account caller, final long callerUserId)", "full_signature": "private boolean cleanupNetworkResources(final long networkId, final Account caller, final long callerUserId)", "class_method_signature": "NetworkOrchestrator.cleanupNetworkResources(final long networkId, final Account caller, final long callerUserId)", "testcase": false, "constructor": false}, {"identifier": "shutdownNetworkResources", "parameters": "(final long networkId, final Account caller, final long callerUserId)", "modifiers": "private", "return": "boolean", "signature": "boolean shutdownNetworkResources(final long networkId, final Account caller, final long callerUserId)", "full_signature": "private boolean shutdownNetworkResources(final long networkId, final Account caller, final long callerUserId)", "class_method_signature": "NetworkOrchestrator.shutdownNetworkResources(final long networkId, final Account caller, final long callerUserId)", "testcase": false, "constructor": false}, {"identifier": "processAnswers", "parameters": "(final long agentId, final long seq, final Answer[] answers)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean processAnswers(final long agentId, final long seq, final Answer[] answers)", "full_signature": "@Override public boolean processAnswers(final long agentId, final long seq, final Answer[] answers)", "class_method_signature": "NetworkOrchestrator.processAnswers(final long agentId, final long seq, final Answer[] answers)", "testcase": false, "constructor": false}, {"identifier": "processCommands", "parameters": "(final long agentId, final long seq, final Command[] commands)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean processCommands(final long agentId, final long seq, final Command[] commands)", "full_signature": "@Override public boolean processCommands(final long agentId, final long seq, final Command[] commands)", "class_method_signature": "NetworkOrchestrator.processCommands(final long agentId, final long seq, final Command[] commands)", "testcase": false, "constructor": false}, {"identifier": "processControlCommand", "parameters": "(final long agentId, final AgentControlCommand cmd)", "modifiers": "@Override public", "return": "AgentControlAnswer", "signature": "AgentControlAnswer processControlCommand(final long agentId, final AgentControlCommand cmd)", "full_signature": "@Override public AgentControlAnswer processControlCommand(final long agentId, final AgentControlCommand cmd)", "class_method_signature": "NetworkOrchestrator.processControlCommand(final long agentId, final AgentControlCommand cmd)", "testcase": false, "constructor": false}, {"identifier": "processConnect", "parameters": "(final Host host, final StartupCommand cmd, final boolean forRebalance)", "modifiers": "@Override public", "return": "void", "signature": "void processConnect(final Host host, final StartupCommand cmd, final boolean forRebalance)", "full_signature": "@Override public void processConnect(final Host host, final StartupCommand cmd, final boolean forRebalance)", "class_method_signature": "NetworkOrchestrator.processConnect(final Host host, final StartupCommand cmd, final boolean forRebalance)", "testcase": false, "constructor": false}, {"identifier": "processDisconnect", "parameters": "(final long agentId, final Status state)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean processDisconnect(final long agentId, final Status state)", "full_signature": "@Override public boolean processDisconnect(final long agentId, final Status state)", "class_method_signature": "NetworkOrchestrator.processDisconnect(final long agentId, final Status state)", "testcase": false, "constructor": false}, {"identifier": "isRecurring", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRecurring()", "full_signature": "@Override public boolean isRecurring()", "class_method_signature": "NetworkOrchestrator.isRecurring()", "testcase": false, "constructor": false}, {"identifier": "getTimeout", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getTimeout()", "full_signature": "@Override public int getTimeout()", "class_method_signature": "NetworkOrchestrator.getTimeout()", "testcase": false, "constructor": false}, {"identifier": "processTimeout", "parameters": "(final long agentId, final long seq)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean processTimeout(final long agentId, final long seq)", "full_signature": "@Override public boolean processTimeout(final long agentId, final long seq)", "class_method_signature": "NetworkOrchestrator.processTimeout(final long agentId, final long seq)", "testcase": false, "constructor": false}, {"identifier": "finalizeServicesAndProvidersForNetwork", "parameters": "(final NetworkOffering offering, final Long physicalNetworkId)", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> finalizeServicesAndProvidersForNetwork(final NetworkOffering offering, final Long physicalNetworkId)", "full_signature": "@Override public Map<String, String> finalizeServicesAndProvidersForNetwork(final NetworkOffering offering, final Long physicalNetworkId)", "class_method_signature": "NetworkOrchestrator.finalizeServicesAndProvidersForNetwork(final NetworkOffering offering, final Long physicalNetworkId)", "testcase": false, "constructor": false}, {"identifier": "getNetworkProviders", "parameters": "(final long networkId)", "modifiers": "private", "return": "List<Provider>", "signature": "List<Provider> getNetworkProviders(final long networkId)", "full_signature": "private List<Provider> getNetworkProviders(final long networkId)", "class_method_signature": "NetworkOrchestrator.getNetworkProviders(final long networkId)", "testcase": false, "constructor": false}, {"identifier": "setupDns", "parameters": "(final Network network, final Provider provider)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean setupDns(final Network network, final Provider provider)", "full_signature": "@Override public boolean setupDns(final Network network, final Provider provider)", "class_method_signature": "NetworkOrchestrator.setupDns(final Network network, final Provider provider)", "testcase": false, "constructor": false}, {"identifier": "getNicProfileForVm", "parameters": "(final Network network, final NicProfile requested, final VirtualMachine vm)", "modifiers": "protected", "return": "NicProfile", "signature": "NicProfile getNicProfileForVm(final Network network, final NicProfile requested, final VirtualMachine vm)", "full_signature": "protected NicProfile getNicProfileForVm(final Network network, final NicProfile requested, final VirtualMachine vm)", "class_method_signature": "NetworkOrchestrator.getNicProfileForVm(final Network network, final NicProfile requested, final VirtualMachine vm)", "testcase": false, "constructor": false}, {"identifier": "createNicForVm", "parameters": "(final Network network, final NicProfile requested, final ReservationContext context, final VirtualMachineProfile vmProfile, final boolean prepare)", "modifiers": "@Override public", "return": "NicProfile", "signature": "NicProfile createNicForVm(final Network network, final NicProfile requested, final ReservationContext context, final VirtualMachineProfile vmProfile, final boolean prepare)", "full_signature": "@Override public NicProfile createNicForVm(final Network network, final NicProfile requested, final ReservationContext context, final VirtualMachineProfile vmProfile, final boolean prepare)", "class_method_signature": "NetworkOrchestrator.createNicForVm(final Network network, final NicProfile requested, final ReservationContext context, final VirtualMachineProfile vmProfile, final boolean prepare)", "testcase": false, "constructor": false}, {"identifier": "getNicProfiles", "parameters": "(final VirtualMachine vm)", "modifiers": "@Override public", "return": "List<NicProfile>", "signature": "List<NicProfile> getNicProfiles(final VirtualMachine vm)", "full_signature": "@Override public List<NicProfile> getNicProfiles(final VirtualMachine vm)", "class_method_signature": "NetworkOrchestrator.getNicProfiles(final VirtualMachine vm)", "testcase": false, "constructor": false}, {"identifier": "stateTransitTo", "parameters": "(final NetworkVO network, final Network.Event e)", "modifiers": "protected", "return": "boolean", "signature": "boolean stateTransitTo(final NetworkVO network, final Network.Event e)", "full_signature": "protected boolean stateTransitTo(final NetworkVO network, final Network.Event e)", "class_method_signature": "NetworkOrchestrator.stateTransitTo(final NetworkVO network, final Network.Event e)", "testcase": false, "constructor": false}, {"identifier": "setStateMachine", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setStateMachine()", "full_signature": "private void setStateMachine()", "class_method_signature": "NetworkOrchestrator.setStateMachine()", "testcase": false, "constructor": false}, {"identifier": "getServiceProvidersMap", "parameters": "(final long networkId)", "modifiers": "private", "return": "Map<Service, Set<Provider>>", "signature": "Map<Service, Set<Provider>> getServiceProvidersMap(final long networkId)", "full_signature": "private Map<Service, Set<Provider>> getServiceProvidersMap(final long networkId)", "class_method_signature": "NetworkOrchestrator.getServiceProvidersMap(final long networkId)", "testcase": false, "constructor": false}, {"identifier": "getProvidersForServiceInNetwork", "parameters": "(final Network network, final Service service)", "modifiers": "@Override public", "return": "List<Provider>", "signature": "List<Provider> getProvidersForServiceInNetwork(final Network network, final Service service)", "full_signature": "@Override public List<Provider> getProvidersForServiceInNetwork(final Network network, final Service service)", "class_method_signature": "NetworkOrchestrator.getProvidersForServiceInNetwork(final Network network, final Service service)", "testcase": false, "constructor": false}, {"identifier": "getElementForServiceInNetwork", "parameters": "(final Network network, final Service service)", "modifiers": "protected", "return": "List<NetworkElement>", "signature": "List<NetworkElement> getElementForServiceInNetwork(final Network network, final Service service)", "full_signature": "protected List<NetworkElement> getElementForServiceInNetwork(final Network network, final Service service)", "class_method_signature": "NetworkOrchestrator.getElementForServiceInNetwork(final Network network, final Service service)", "testcase": false, "constructor": false}, {"identifier": "getStaticNatProviderForNetwork", "parameters": "(final Network network)", "modifiers": "@Override public", "return": "StaticNatServiceProvider", "signature": "StaticNatServiceProvider getStaticNatProviderForNetwork(final Network network)", "full_signature": "@Override public StaticNatServiceProvider getStaticNatProviderForNetwork(final Network network)", "class_method_signature": "NetworkOrchestrator.getStaticNatProviderForNetwork(final Network network)", "testcase": false, "constructor": false}, {"identifier": "getLoadBalancingProviderForNetwork", "parameters": "(final Network network, final Scheme lbScheme)", "modifiers": "@Override public", "return": "LoadBalancingServiceProvider", "signature": "LoadBalancingServiceProvider getLoadBalancingProviderForNetwork(final Network network, final Scheme lbScheme)", "full_signature": "@Override public LoadBalancingServiceProvider getLoadBalancingProviderForNetwork(final Network network, final Scheme lbScheme)", "class_method_signature": "NetworkOrchestrator.getLoadBalancingProviderForNetwork(final Network network, final Scheme lbScheme)", "testcase": false, "constructor": false}, {"identifier": "isNetworkInlineMode", "parameters": "(final Network network)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isNetworkInlineMode(final Network network)", "full_signature": "@Override public boolean isNetworkInlineMode(final Network network)", "class_method_signature": "NetworkOrchestrator.isNetworkInlineMode(final Network network)", "testcase": false, "constructor": false}, {"identifier": "isSecondaryIpSetForNic", "parameters": "(final long nicId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSecondaryIpSetForNic(final long nicId)", "full_signature": "@Override public boolean isSecondaryIpSetForNic(final long nicId)", "class_method_signature": "NetworkOrchestrator.isSecondaryIpSetForNic(final long nicId)", "testcase": false, "constructor": false}, {"identifier": "removeVmSecondaryIpsOfNic", "parameters": "(final long nicId)", "modifiers": "private", "return": "boolean", "signature": "boolean removeVmSecondaryIpsOfNic(final long nicId)", "full_signature": "private boolean removeVmSecondaryIpsOfNic(final long nicId)", "class_method_signature": "NetworkOrchestrator.removeVmSecondaryIpsOfNic(final long nicId)", "testcase": false, "constructor": false}, {"identifier": "savePlaceholderNic", "parameters": "(final Network network, final String ip4Address, final String ip6Address, final Type vmType)", "modifiers": "@Override public", "return": "NicVO", "signature": "NicVO savePlaceholderNic(final Network network, final String ip4Address, final String ip6Address, final Type vmType)", "full_signature": "@Override public NicVO savePlaceholderNic(final Network network, final String ip4Address, final String ip6Address, final Type vmType)", "class_method_signature": "NetworkOrchestrator.savePlaceholderNic(final Network network, final String ip4Address, final String ip6Address, final Type vmType)", "testcase": false, "constructor": false}, {"identifier": "getConfigComponentName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getConfigComponentName()", "full_signature": "@Override public String getConfigComponentName()", "class_method_signature": "NetworkOrchestrator.getConfigComponentName()", "testcase": false, "constructor": false}, {"identifier": "getConfigKeys", "parameters": "()", "modifiers": "@Override public", "return": "ConfigKey<?>[]", "signature": "ConfigKey<?>[] getConfigKeys()", "full_signature": "@Override public ConfigKey<?>[] getConfigKeys()", "class_method_signature": "NetworkOrchestrator.getConfigKeys()", "testcase": false, "constructor": false}], "file": "engine/orchestration/src/main/java/org/apache/cloudstack/engine/orchestration/NetworkOrchestrator.java"}, "focal_method": {"identifier": "removeNic", "parameters": "(final VirtualMachineProfile vm, final Nic nic)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void removeNic(final VirtualMachineProfile vm, final Nic nic) {\n        removeNic(vm, _nicDao.findById(nic.getId()));\n    }", "signature": "void removeNic(final VirtualMachineProfile vm, final Nic nic)", "full_signature": "@Override public void removeNic(final VirtualMachineProfile vm, final Nic nic)", "class_method_signature": "NetworkOrchestrator.removeNic(final VirtualMachineProfile vm, final Nic nic)", "testcase": false, "constructor": false, "invocations": ["removeNic", "findById", "getId"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}