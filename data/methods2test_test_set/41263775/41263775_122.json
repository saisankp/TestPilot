{"test_class": {"identifier": "AttributeSourceGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/codegen/AttributeSourceGeneratorTest.java"}, "test_case": {"identifier": "testGenerateSeparateAttributesClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGenerateSeparateAttributesClass() {\n        String expected = \"\" +\n                \"package com.googlecode.cqengine.codegen;\\n\" +\n                \"\\n\" +\n                \"import com.googlecode.cqengine.attribute.*;\\n\" +\n                \"import com.googlecode.cqengine.query.option.QueryOptions;\\n\" +\n                \"import java.util.*;\\n\" +\n                \"import com.googlecode.cqengine.codegen.AttributeSourceGeneratorTest.Car;\\n\" +\n                \"\\n\" +\n                \"/**\\n\" +\n                \" * CQEngine attributes for accessing the members of class {@code com.googlecode.cqengine.codegen.AttributeSourceGeneratorTest.Car}.\\n\" +\n                \" * <p/>.\\n\" +\n                \" * Auto-generated by CQEngine's {@code AttributeSourceGenerator}.\\n\" +\n                \" */\\n\" +\n                \"public class CQCar {\\n\" +\n                \"\\n\" +\n                \"    /**\\n\" +\n                \"     * CQEngine attribute for accessing field {@code Car.name}.\\n\" +\n                \"     */\\n\" +\n                \"    // Note: For best performance:\\n\" +\n                \"    // - if this field cannot be null, replace this SimpleNullableAttribute with a SimpleAttribute\\n\" +\n                \"    public static final Attribute<Car, String> NAME = new SimpleNullableAttribute<Car, String>(\\\"NAME\\\") {\\n\" +\n                \"        public String getValue(Car car, QueryOptions queryOptions) { return car.name; }\\n\" +\n                \"    };\\n\" +\n                \"\\n\" +\n                \"    /**\\n\" +\n                \"     * CQEngine attribute for accessing field {@code Car.features}.\\n\" +\n                \"     */\\n\" +\n                \"    // Note: For best performance:\\n\" +\n                \"    // - if the collection cannot contain null elements change true to false in the following constructor, or\\n\" +\n                \"    // - if the collection cannot contain null elements AND the field itself cannot be null, replace this\\n\" +\n                \"    //   MultiValueNullableAttribute with a MultiValueAttribute (and change getNullableValues() to getValues())\\n\" +\n                \"    public static final Attribute<Car, String> FEATURES = new MultiValueNullableAttribute<Car, String>(\\\"FEATURES\\\", true) {\\n\" +\n                \"        public Iterable<String> getNullableValues(Car car, QueryOptions queryOptions) { return car.features; }\\n\" +\n                \"    };\\n\" +\n                \"\\n\" +\n                \"    /**\\n\" +\n                \"     * CQEngine attribute for accessing field {@code Car.prices}.\\n\" +\n                \"     */\\n\" +\n                \"    // Note: For best performance:\\n\" +\n                \"    // - if this field cannot be null, replace this\\n\" +\n                \"    //   MultiValueNullableAttribute with a MultiValueAttribute (and change getNullableValues() to getValues())\\n\" +\n                \"    public static final Attribute<Car, Double> PRICES = new MultiValueNullableAttribute<Car, Double>(\\\"PRICES\\\", false) {\\n\" +\n                \"        public Iterable<Double> getNullableValues(final Car car, QueryOptions queryOptions) {\\n\" +\n                \"            return new AbstractList<Double>() {\\n\" +\n                \"                public Double get(int i) { return car.prices[i]; }\\n\" +\n                \"                public int size() { return car.prices.length; }\\n\" +\n                \"            };\\n\" +\n                \"        }\\n\" +\n                \"    };\\n\" +\n                \"\\n\" +\n                \"    /**\\n\" +\n                \"     * CQEngine attribute for accessing field {@code Car.extras}.\\n\" +\n                \"     */\\n\" +\n                \"    // Note: For best performance:\\n\" +\n                \"    // - if the array cannot contain null elements change true to false in the following constructor, or\\n\" +\n                \"    // - if the array cannot contain null elements AND the field itself cannot be null, replace this\\n\" +\n                \"    //   MultiValueNullableAttribute with a MultiValueAttribute (and change getNullableValues() to getValues())\\n\" +\n                \"    public static final Attribute<Car, String> EXTRAS = new MultiValueNullableAttribute<Car, String>(\\\"EXTRAS\\\", true) {\\n\" +\n                \"        public Iterable<String> getNullableValues(Car car, QueryOptions queryOptions) { return Arrays.asList(car.extras); }\\n\" +\n                \"    };\\n\" +\n                \"\\n\" +\n                \"    /**\\n\" +\n                \"     * CQEngine attribute for accessing method {@code Car.getPrices()}.\\n\" +\n                \"     */\\n\" +\n                \"    // Note: For best performance:\\n\" +\n                \"    // - if this method cannot return null, replace this\\n\" +\n                \"    //   MultiValueNullableAttribute with a MultiValueAttribute (and change getNullableValues() to getValues())\\n\" +\n                \"    public static final Attribute<Car, Double> GET_PRICES = new MultiValueNullableAttribute<Car, Double>(\\\"GET_PRICES\\\", false) {\\n\" +\n                \"        public Iterable<Double> getNullableValues(final Car car, QueryOptions queryOptions) {\\n\" +\n                \"            return new AbstractList<Double>() {\\n\" +\n                \"                public Double get(int i) { return car.getPrices()[i]; }\\n\" +\n                \"                public int size() { return car.getPrices().length; }\\n\" +\n                \"            };\\n\" +\n                \"        }\\n\" +\n                \"    };\\n\" +\n                \"\\n\" +\n                \"    /**\\n\" +\n                \"     * CQEngine attribute for accessing field {@code Car.inheritedCarId}.\\n\" +\n                \"     */\\n\" +\n                \"    public static final Attribute<Car, Integer> INHERITED_CAR_ID = new SimpleAttribute<Car, Integer>(\\\"INHERITED_CAR_ID\\\") {\\n\" +\n                \"        public Integer getValue(Car car, QueryOptions queryOptions) { return car.inheritedCarId; }\\n\" +\n                \"    };\\n\" +\n                \"}\\n\";\n        assertEquals(expected, generateSeparateAttributesClass(Car.class, Car.class.getPackage()));\n    }", "signature": "void testGenerateSeparateAttributesClass()", "full_signature": "@Test public void testGenerateSeparateAttributesClass()", "class_method_signature": "AttributeSourceGeneratorTest.testGenerateSeparateAttributesClass()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "generateSeparateAttributesClass", "getPackage"]}, "focal_class": {"identifier": "AttributeSourceGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Map<Class<?>, Class<?>> PRIMITIVES_TO_WRAPPERS = new HashMap<Class<?>, Class<?>>(){{\n        put(boolean.class, Boolean.class);\n        put(byte.class, Byte.class);\n        put(short.class, Short.class);\n        put(char.class, Character.class);\n        put(int.class, Integer.class);\n        put(long.class, Long.class);\n        put(float.class, Float.class);\n        put(double.class, Double.class);\n    }};", "modifier": "static final", "type": "Map<Class<?>, Class<?>>", "declarator": "PRIMITIVES_TO_WRAPPERS = new HashMap<Class<?>, Class<?>>(){{\n        put(boolean.class, Boolean.class);\n        put(byte.class, Byte.class);\n        put(short.class, Short.class);\n        put(char.class, Character.class);\n        put(int.class, Integer.class);\n        put(long.class, Long.class);\n        put(float.class, Float.class);\n        put(double.class, Double.class);\n    }}", "var_name": "PRIMITIVES_TO_WRAPPERS"}], "methods": [{"identifier": "generateAttributesForPastingIntoTargetClass", "parameters": "(final Class<?> targetClass)", "modifiers": "public static", "return": "String", "signature": "String generateAttributesForPastingIntoTargetClass(final Class<?> targetClass)", "full_signature": "public static String generateAttributesForPastingIntoTargetClass(final Class<?> targetClass)", "class_method_signature": "AttributeSourceGenerator.generateAttributesForPastingIntoTargetClass(final Class<?> targetClass)", "testcase": false, "constructor": false}, {"identifier": "generateAttributesForPastingIntoTargetClass", "parameters": "(final Class<?> targetClass, MemberFilter memberFilter)", "modifiers": "public static", "return": "String", "signature": "String generateAttributesForPastingIntoTargetClass(final Class<?> targetClass, MemberFilter memberFilter)", "full_signature": "public static String generateAttributesForPastingIntoTargetClass(final Class<?> targetClass, MemberFilter memberFilter)", "class_method_signature": "AttributeSourceGenerator.generateAttributesForPastingIntoTargetClass(final Class<?> targetClass, MemberFilter memberFilter)", "testcase": false, "constructor": false}, {"identifier": "generateSeparateAttributesClass", "parameters": "(final Class<?> targetClass, String packageOfAttributesClass)", "modifiers": "public static", "return": "String", "signature": "String generateSeparateAttributesClass(final Class<?> targetClass, String packageOfAttributesClass)", "full_signature": "public static String generateSeparateAttributesClass(final Class<?> targetClass, String packageOfAttributesClass)", "class_method_signature": "AttributeSourceGenerator.generateSeparateAttributesClass(final Class<?> targetClass, String packageOfAttributesClass)", "testcase": false, "constructor": false}, {"identifier": "generateSeparateAttributesClass", "parameters": "(final Class<?> targetClass, String packageOfAttributesClass, MemberFilter memberFilter)", "modifiers": "public static", "return": "String", "signature": "String generateSeparateAttributesClass(final Class<?> targetClass, String packageOfAttributesClass, MemberFilter memberFilter)", "full_signature": "public static String generateSeparateAttributesClass(final Class<?> targetClass, String packageOfAttributesClass, MemberFilter memberFilter)", "class_method_signature": "AttributeSourceGenerator.generateSeparateAttributesClass(final Class<?> targetClass, String packageOfAttributesClass, MemberFilter memberFilter)", "testcase": false, "constructor": false}, {"identifier": "generateSeparateAttributesClass", "parameters": "(final Class<?> targetClass, Package packageOfAttributesClass)", "modifiers": "public static", "return": "String", "signature": "String generateSeparateAttributesClass(final Class<?> targetClass, Package packageOfAttributesClass)", "full_signature": "public static String generateSeparateAttributesClass(final Class<?> targetClass, Package packageOfAttributesClass)", "class_method_signature": "AttributeSourceGenerator.generateSeparateAttributesClass(final Class<?> targetClass, Package packageOfAttributesClass)", "testcase": false, "constructor": false}, {"identifier": "generateSeparateAttributesClass", "parameters": "(final Class<?> targetClass, Package packageOfAttributesClass, MemberFilter memberFilter)", "modifiers": "public static", "return": "String", "signature": "String generateSeparateAttributesClass(final Class<?> targetClass, Package packageOfAttributesClass, MemberFilter memberFilter)", "full_signature": "public static String generateSeparateAttributesClass(final Class<?> targetClass, Package packageOfAttributesClass, MemberFilter memberFilter)", "class_method_signature": "AttributeSourceGenerator.generateSeparateAttributesClass(final Class<?> targetClass, Package packageOfAttributesClass, MemberFilter memberFilter)", "testcase": false, "constructor": false}, {"identifier": "generateAttributesForClass", "parameters": "(final Class<?> targetClass, boolean separateAttributesClass, String packageOfAttributesClass, MemberFilter memberFilter)", "modifiers": "static", "return": "String", "signature": "String generateAttributesForClass(final Class<?> targetClass, boolean separateAttributesClass, String packageOfAttributesClass, MemberFilter memberFilter)", "full_signature": "static String generateAttributesForClass(final Class<?> targetClass, boolean separateAttributesClass, String packageOfAttributesClass, MemberFilter memberFilter)", "class_method_signature": "AttributeSourceGenerator.generateAttributesForClass(final Class<?> targetClass, boolean separateAttributesClass, String packageOfAttributesClass, MemberFilter memberFilter)", "testcase": false, "constructor": false}, {"identifier": "generateAttributeForMember", "parameters": "(Class<?> enclosingClass, Member member)", "modifiers": "static", "return": "String", "signature": "String generateAttributeForMember(Class<?> enclosingClass, Member member)", "full_signature": "static String generateAttributeForMember(Class<?> enclosingClass, Member member)", "class_method_signature": "AttributeSourceGenerator.generateAttributeForMember(Class<?> enclosingClass, Member member)", "testcase": false, "constructor": false}, {"identifier": "generateSimpleAttribute", "parameters": "(String objectType, String attributeType, String memberName, MemberType memberType)", "modifiers": "static", "return": "String", "signature": "String generateSimpleAttribute(String objectType, String attributeType, String memberName, MemberType memberType)", "full_signature": "static String generateSimpleAttribute(String objectType, String attributeType, String memberName, MemberType memberType)", "class_method_signature": "AttributeSourceGenerator.generateSimpleAttribute(String objectType, String attributeType, String memberName, MemberType memberType)", "testcase": false, "constructor": false}, {"identifier": "generateSimpleNullableAttribute", "parameters": "(String objectType, String attributeType, String memberName, MemberType memberType)", "modifiers": "static", "return": "String", "signature": "String generateSimpleNullableAttribute(String objectType, String attributeType, String memberName, MemberType memberType)", "full_signature": "static String generateSimpleNullableAttribute(String objectType, String attributeType, String memberName, MemberType memberType)", "class_method_signature": "AttributeSourceGenerator.generateSimpleNullableAttribute(String objectType, String attributeType, String memberName, MemberType memberType)", "testcase": false, "constructor": false}, {"identifier": "generateMultiValueNullableAttributeForIterable", "parameters": "(String objectType, String attributeType, String memberName, MemberType memberType)", "modifiers": "static", "return": "String", "signature": "String generateMultiValueNullableAttributeForIterable(String objectType, String attributeType, String memberName, MemberType memberType)", "full_signature": "static String generateMultiValueNullableAttributeForIterable(String objectType, String attributeType, String memberName, MemberType memberType)", "class_method_signature": "AttributeSourceGenerator.generateMultiValueNullableAttributeForIterable(String objectType, String attributeType, String memberName, MemberType memberType)", "testcase": false, "constructor": false}, {"identifier": "generateMultiValueNullableAttributeForObjectArray", "parameters": "(String objectType, String attributeType, String memberName, MemberType memberType)", "modifiers": "static", "return": "String", "signature": "String generateMultiValueNullableAttributeForObjectArray(String objectType, String attributeType, String memberName, MemberType memberType)", "full_signature": "static String generateMultiValueNullableAttributeForObjectArray(String objectType, String attributeType, String memberName, MemberType memberType)", "class_method_signature": "AttributeSourceGenerator.generateMultiValueNullableAttributeForObjectArray(String objectType, String attributeType, String memberName, MemberType memberType)", "testcase": false, "constructor": false}, {"identifier": "generateMultiValueNullableAttributeForPrimitiveArray", "parameters": "(String objectType, String attributeType, String primitiveType, String memberName, MemberType memberType)", "modifiers": "static", "return": "String", "signature": "String generateMultiValueNullableAttributeForPrimitiveArray(String objectType, String attributeType, String primitiveType, String memberName, MemberType memberType)", "full_signature": "static String generateMultiValueNullableAttributeForPrimitiveArray(String objectType, String attributeType, String primitiveType, String memberName, MemberType memberType)", "class_method_signature": "AttributeSourceGenerator.generateMultiValueNullableAttributeForPrimitiveArray(String objectType, String attributeType, String primitiveType, String memberName, MemberType memberType)", "testcase": false, "constructor": false}, {"identifier": "toUpperCaseWithUnderscores", "parameters": "(String camelCase)", "modifiers": "static", "return": "String", "signature": "String toUpperCaseWithUnderscores(String camelCase)", "full_signature": "static String toUpperCaseWithUnderscores(String camelCase)", "class_method_signature": "AttributeSourceGenerator.toUpperCaseWithUnderscores(String camelCase)", "testcase": false, "constructor": false}, {"identifier": "getMembers", "parameters": "(Class currentClass)", "modifiers": "static", "return": "List<Member>", "signature": "List<Member> getMembers(Class currentClass)", "full_signature": "static List<Member> getMembers(Class currentClass)", "class_method_signature": "AttributeSourceGenerator.getMembers(Class currentClass)", "testcase": false, "constructor": false}, {"identifier": "getMemberType", "parameters": "(Member member)", "modifiers": "static", "return": "MemberType", "signature": "MemberType getMemberType(Member member)", "full_signature": "static MemberType getMemberType(Member member)", "class_method_signature": "AttributeSourceGenerator.getMemberType(Member member)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(Member member)", "modifiers": "static", "return": "Class<?>", "signature": "Class<?> getType(Member member)", "full_signature": "static Class<?> getType(Member member)", "class_method_signature": "AttributeSourceGenerator.getType(Member member)", "testcase": false, "constructor": false}, {"identifier": "getGenericType", "parameters": "(Member member)", "modifiers": "static", "return": "ParameterizedType", "signature": "ParameterizedType getGenericType(Member member)", "full_signature": "static ParameterizedType getGenericType(Member member)", "class_method_signature": "AttributeSourceGenerator.getGenericType(Member member)", "testcase": false, "constructor": false}, {"identifier": "AttributeSourceGenerator", "parameters": "()", "modifiers": "", "return": "", "signature": " AttributeSourceGenerator()", "full_signature": "  AttributeSourceGenerator()", "class_method_signature": "AttributeSourceGenerator.AttributeSourceGenerator()", "testcase": false, "constructor": true}], "file": "code/src/main/java/com/googlecode/cqengine/codegen/AttributeSourceGenerator.java"}, "focal_method": {"identifier": "generateSeparateAttributesClass", "parameters": "(final Class<?> targetClass, String packageOfAttributesClass)", "modifiers": "public static", "return": "String", "body": "public static String generateSeparateAttributesClass(final Class<?> targetClass, String packageOfAttributesClass) {\n        return generateAttributesForClass(targetClass, true, packageOfAttributesClass, ALL_MEMBERS);\n    }", "signature": "String generateSeparateAttributesClass(final Class<?> targetClass, String packageOfAttributesClass)", "full_signature": "public static String generateSeparateAttributesClass(final Class<?> targetClass, String packageOfAttributesClass)", "class_method_signature": "AttributeSourceGenerator.generateSeparateAttributesClass(final Class<?> targetClass, String packageOfAttributesClass)", "testcase": false, "constructor": false, "invocations": ["generateAttributesForClass"]}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}