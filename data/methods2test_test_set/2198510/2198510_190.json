{"test_class": {"identifier": "TestAvroEventDeserializer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger =\n      LoggerFactory.getLogger(TestAvroEventDeserializer.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger =\n      LoggerFactory.getLogger(TestAvroEventDeserializer.class)", "var_name": "logger"}, {"original_string": "private static final Schema schema;", "modifier": "private static final", "type": "Schema", "declarator": "schema", "var_name": "schema"}], "file": "flume-ng-core/src/test/java/org/apache/flume/serialization/TestAvroEventDeserializer.java"}, "test_case": {"identifier": "testSchemaHash", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSchemaHash() throws IOException, NoSuchAlgorithmException {\n    File tempFile = newTestFile(true);\n\n    String target = tempFile.getAbsolutePath();\n    logger.info(\"Target: {}\", target);\n    TransientPositionTracker tracker = new TransientPositionTracker(target);\n\n    Context context = new Context();\n    context.put(AvroEventDeserializer.CONFIG_SCHEMA_TYPE_KEY,\n        AvroEventDeserializer.AvroSchemaType.HASH.toString());\n\n    ResettableInputStream in =\n        new ResettableFileInputStream(tempFile, tracker);\n    EventDeserializer des =\n        new AvroEventDeserializer.Builder().build(context, in);\n\n    Event event = des.readEvent();\n    String eventSchemaHash =\n        event.getHeaders().get(AvroEventDeserializer.AVRO_SCHEMA_HEADER_HASH);\n    String expectedSchemaHash = Hex.encodeHexString(\n        SchemaNormalization.parsingFingerprint(\"CRC-64-AVRO\", schema));\n\n    Assert.assertEquals(expectedSchemaHash, eventSchemaHash);\n  }", "signature": "void testSchemaHash()", "full_signature": "@Test public void testSchemaHash()", "class_method_signature": "TestAvroEventDeserializer.testSchemaHash()", "testcase": true, "constructor": false, "invocations": ["newTestFile", "getAbsolutePath", "info", "put", "toString", "build", "readEvent", "get", "getHeaders", "encodeHexString", "parsingFingerprint", "assertEquals"]}, "focal_class": {"identifier": "AvroEventDeserializer", "superclass": "", "interfaces": "implements EventDeserializer", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AvroEventDeserializer.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AvroEventDeserializer.class)", "var_name": "logger"}, {"original_string": "private final AvroSchemaType schemaType;", "modifier": "private final", "type": "AvroSchemaType", "declarator": "schemaType", "var_name": "schemaType"}, {"original_string": "private final ResettableInputStream ris;", "modifier": "private final", "type": "ResettableInputStream", "declarator": "ris", "var_name": "ris"}, {"original_string": "private Schema schema;", "modifier": "private", "type": "Schema", "declarator": "schema", "var_name": "schema"}, {"original_string": "private byte[] schemaHash;", "modifier": "private", "type": "byte[]", "declarator": "schemaHash", "var_name": "schemaHash"}, {"original_string": "private String schemaHashString;", "modifier": "private", "type": "String", "declarator": "schemaHashString", "var_name": "schemaHashString"}, {"original_string": "private DataFileReader<GenericRecord> fileReader;", "modifier": "private", "type": "DataFileReader<GenericRecord>", "declarator": "fileReader", "var_name": "fileReader"}, {"original_string": "private GenericDatumWriter datumWriter;", "modifier": "private", "type": "GenericDatumWriter", "declarator": "datumWriter", "var_name": "datumWriter"}, {"original_string": "private GenericRecord record;", "modifier": "private", "type": "GenericRecord", "declarator": "record", "var_name": "record"}, {"original_string": "private ByteArrayOutputStream out;", "modifier": "private", "type": "ByteArrayOutputStream", "declarator": "out", "var_name": "out"}, {"original_string": "private BinaryEncoder encoder;", "modifier": "private", "type": "BinaryEncoder", "declarator": "encoder", "var_name": "encoder"}, {"original_string": "public static final String CONFIG_SCHEMA_TYPE_KEY = \"schemaType\";", "modifier": "public static final", "type": "String", "declarator": "CONFIG_SCHEMA_TYPE_KEY = \"schemaType\"", "var_name": "CONFIG_SCHEMA_TYPE_KEY"}, {"original_string": "public static final String AVRO_SCHEMA_HEADER_HASH\n      = \"flume.avro.schema.hash\";", "modifier": "public static final", "type": "String", "declarator": "AVRO_SCHEMA_HEADER_HASH\n      = \"flume.avro.schema.hash\"", "var_name": "AVRO_SCHEMA_HEADER_HASH"}, {"original_string": "public static final String AVRO_SCHEMA_HEADER_LITERAL\n      = \"flume.avro.schema.literal\";", "modifier": "public static final", "type": "String", "declarator": "AVRO_SCHEMA_HEADER_LITERAL\n      = \"flume.avro.schema.literal\"", "var_name": "AVRO_SCHEMA_HEADER_LITERAL"}], "methods": [{"identifier": "AvroEventDeserializer", "parameters": "(Context context, ResettableInputStream ris)", "modifiers": "private", "return": "", "signature": " AvroEventDeserializer(Context context, ResettableInputStream ris)", "full_signature": "private  AvroEventDeserializer(Context context, ResettableInputStream ris)", "class_method_signature": "AvroEventDeserializer.AvroEventDeserializer(Context context, ResettableInputStream ris)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initialize()", "full_signature": "private void initialize()", "class_method_signature": "AvroEventDeserializer.initialize()", "testcase": false, "constructor": false}, {"identifier": "readEvent", "parameters": "()", "modifiers": "@Override public", "return": "Event", "signature": "Event readEvent()", "full_signature": "@Override public Event readEvent()", "class_method_signature": "AvroEventDeserializer.readEvent()", "testcase": false, "constructor": false}, {"identifier": "readEvents", "parameters": "(int numEvents)", "modifiers": "@Override public", "return": "List<Event>", "signature": "List<Event> readEvents(int numEvents)", "full_signature": "@Override public List<Event> readEvents(int numEvents)", "class_method_signature": "AvroEventDeserializer.readEvents(int numEvents)", "testcase": false, "constructor": false}, {"identifier": "mark", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void mark()", "full_signature": "@Override public void mark()", "class_method_signature": "AvroEventDeserializer.mark()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "AvroEventDeserializer.reset()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "AvroEventDeserializer.close()", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/serialization/AvroEventDeserializer.java"}, "focal_method": {"identifier": "readEvent", "parameters": "()", "modifiers": "@Override public", "return": "Event", "body": "@Override\n  public Event readEvent() throws IOException {\n    if (fileReader.hasNext()) {\n      record = fileReader.next(record);\n      out.reset();\n      datumWriter.write(record, encoder);\n      encoder.flush();\n      // annotate header with 64-bit schema CRC hash in hex\n      Event event = EventBuilder.withBody(out.toByteArray());\n      if (schemaType == AvroSchemaType.HASH) {\n        event.getHeaders().put(AVRO_SCHEMA_HEADER_HASH, schemaHashString);\n      } else {\n        event.getHeaders().put(AVRO_SCHEMA_HEADER_LITERAL, schema.toString());\n      }\n      return event;\n    }\n    return null;\n  }", "signature": "Event readEvent()", "full_signature": "@Override public Event readEvent()", "class_method_signature": "AvroEventDeserializer.readEvent()", "testcase": false, "constructor": false, "invocations": ["hasNext", "next", "reset", "write", "flush", "withBody", "toByteArray", "put", "getHeaders", "put", "getHeaders", "toString"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}