{"test_class": {"identifier": "StreamingAeadFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int KDF_KEY_SIZE = 16;", "modifier": "private static final", "type": "int", "declarator": "KDF_KEY_SIZE = 16", "var_name": "KDF_KEY_SIZE"}, {"original_string": "private static final int AES_KEY_SIZE = 16;", "modifier": "private static final", "type": "int", "declarator": "AES_KEY_SIZE = 16", "var_name": "AES_KEY_SIZE"}], "file": "java_src/src/test/java/com/google/crypto/tink/streamingaead/StreamingAeadFactoryTest.java"}, "test_case": {"identifier": "testMultipleKeys", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMultipleKeys() throws Exception {\n    byte[] primaryKeyValue = Random.randBytes(KDF_KEY_SIZE);\n    byte[] otherKeyValue = Random.randBytes(KDF_KEY_SIZE);\n    byte[] anotherKeyValue = Random.randBytes(KDF_KEY_SIZE);\n    int derivedKeySize = AES_KEY_SIZE;\n\n    Key primaryKey = TestUtil.createKey(\n        TestUtil.createAesGcmHkdfStreamingKeyData(\n            primaryKeyValue, derivedKeySize, 512),\n        42,\n        KeyStatusType.ENABLED,\n        OutputPrefixType.RAW);\n    // Another key with a smaller segment size than the primary key\n    Key otherKey = TestUtil.createKey(\n        TestUtil.createAesCtrHmacStreamingKeyData(\n            otherKeyValue, derivedKeySize, 256),\n        43,\n        KeyStatusType.ENABLED,\n        OutputPrefixType.RAW);\n    // Another key with a larger segment size than the primary key\n    Key anotherKey = TestUtil.createKey(\n        TestUtil.createAesGcmHkdfStreamingKeyData(\n            anotherKeyValue, derivedKeySize, 1024),\n        72,\n        KeyStatusType.ENABLED,\n        OutputPrefixType.RAW);\n\n    KeysetHandle keysetHandle =\n        TestUtil.createKeysetHandle(TestUtil.createKeyset(primaryKey, otherKey, anotherKey));\n    StreamingAead streamingAead = StreamingAeadFactory.getPrimitive(keysetHandle);\n\n    StreamingAead primaryAead = StreamingAeadFactory.getPrimitive(\n        TestUtil.createKeysetHandle(TestUtil.createKeyset(primaryKey)));\n    StreamingAead otherAead = StreamingAeadFactory.getPrimitive(\n        TestUtil.createKeysetHandle(TestUtil.createKeyset(otherKey)));\n    StreamingAead anotherAead = StreamingAeadFactory.getPrimitive(\n        TestUtil.createKeysetHandle(TestUtil.createKeyset(anotherKey)));\n\n    StreamingTestUtil.testEncryptionAndDecryption(streamingAead, streamingAead);\n    StreamingTestUtil.testEncryptionAndDecryption(streamingAead, primaryAead);\n    StreamingTestUtil.testEncryptionAndDecryption(primaryAead, streamingAead);\n    StreamingTestUtil.testEncryptionAndDecryption(otherAead, streamingAead);\n    StreamingTestUtil.testEncryptionAndDecryption(anotherAead, streamingAead);\n    StreamingTestUtil.testEncryptionAndDecryption(primaryAead, primaryAead);\n    StreamingTestUtil.testEncryptionAndDecryption(otherAead, otherAead);\n    StreamingTestUtil.testEncryptionAndDecryption(anotherAead, anotherAead);\n    try {\n      StreamingTestUtil.testEncryptionAndDecryption(otherAead, primaryAead);\n      fail(\"No matching key, should have thrown an exception\");\n    } catch (IOException expected) {\n      assertExceptionContains(expected, \"No matching key\");\n    }\n    try {\n      StreamingTestUtil.testEncryptionAndDecryption(anotherAead, primaryAead);\n      fail(\"No matching key, should have thrown an exception\");\n    } catch (IOException expected) {\n      assertExceptionContains(expected, \"No matching key\");\n    }\n  }", "signature": "void testMultipleKeys()", "full_signature": "@Test public void testMultipleKeys()", "class_method_signature": "StreamingAeadFactoryTest.testMultipleKeys()", "testcase": true, "constructor": false, "invocations": ["randBytes", "randBytes", "randBytes", "createKey", "createAesGcmHkdfStreamingKeyData", "createKey", "createAesCtrHmacStreamingKeyData", "createKey", "createAesGcmHkdfStreamingKeyData", "createKeysetHandle", "createKeyset", "getPrimitive", "getPrimitive", "createKeysetHandle", "createKeyset", "getPrimitive", "createKeysetHandle", "createKeyset", "getPrimitive", "createKeysetHandle", "createKeyset", "testEncryptionAndDecryption", "testEncryptionAndDecryption", "testEncryptionAndDecryption", "testEncryptionAndDecryption", "testEncryptionAndDecryption", "testEncryptionAndDecryption", "testEncryptionAndDecryption", "testEncryptionAndDecryption", "testEncryptionAndDecryption", "fail", "assertExceptionContains", "testEncryptionAndDecryption", "fail", "assertExceptionContains"]}, "focal_class": {"identifier": "StreamingAeadFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getPrimitive", "parameters": "(KeysetHandle keysetHandle)", "modifiers": "public static", "return": "StreamingAead", "signature": "StreamingAead getPrimitive(KeysetHandle keysetHandle)", "full_signature": "public static StreamingAead getPrimitive(KeysetHandle keysetHandle)", "class_method_signature": "StreamingAeadFactory.getPrimitive(KeysetHandle keysetHandle)", "testcase": false, "constructor": false}, {"identifier": "getPrimitive", "parameters": "(\n      KeysetHandle keysetHandle,\n      final KeyManager<StreamingAead> keyManager)", "modifiers": "public static", "return": "StreamingAead", "signature": "StreamingAead getPrimitive(\n      KeysetHandle keysetHandle,\n      final KeyManager<StreamingAead> keyManager)", "full_signature": "public static StreamingAead getPrimitive(\n      KeysetHandle keysetHandle,\n      final KeyManager<StreamingAead> keyManager)", "class_method_signature": "StreamingAeadFactory.getPrimitive(\n      KeysetHandle keysetHandle,\n      final KeyManager<StreamingAead> keyManager)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/streamingaead/StreamingAeadFactory.java"}, "focal_method": {"identifier": "getPrimitive", "parameters": "(KeysetHandle keysetHandle)", "modifiers": "public static", "return": "StreamingAead", "body": "public static StreamingAead getPrimitive(KeysetHandle keysetHandle)\n      throws GeneralSecurityException {\n    return getPrimitive(keysetHandle, /* keyManager= */ null);\n  }", "signature": "StreamingAead getPrimitive(KeysetHandle keysetHandle)", "full_signature": "public static StreamingAead getPrimitive(KeysetHandle keysetHandle)", "class_method_signature": "StreamingAeadFactory.getPrimitive(KeysetHandle keysetHandle)", "testcase": false, "constructor": false, "invocations": ["getPrimitive"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}