{"test_class": {"identifier": "TestResourceRetriever", "superclass": "", "interfaces": "", "fields": [{"original_string": "ResourceRetriever resourceRetriever = new ResourceRetriever();", "modifier": "", "type": "ResourceRetriever", "declarator": "resourceRetriever = new ResourceRetriever()", "var_name": "resourceRetriever"}], "file": "rusheye-impl/src/test/java/org/arquillian/rusheye/retriever/TestResourceRetriever.java"}, "test_case": {"identifier": "testResourceRetriever", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResourceRetriever() throws RetrieverException, IOException {\n        final String imageResource = \"parser-input/masks/green.png\";\n\n        BufferedImage retrievedImage = resourceRetriever.retrieve(imageResource, new Properties());\n\n        BufferedImage loadedImage = ImageIO.read(this.getClass().getClassLoader().getResourceAsStream(imageResource));\n\n        ConfigurationCompiler configurationCompiler = new ConfigurationCompiler();\n\n        ImageComparator imageComparator = new DefaultImageComparator();\n        ComparisonResult comparisonResult = imageComparator.compare(retrievedImage, loadedImage,\n            configurationCompiler.getPerception(), new HashSet<Mask>());\n\n        Assert.assertTrue(comparisonResult.isEqualsImages());\n\n    }", "signature": "void testResourceRetriever()", "full_signature": "@Test public void testResourceRetriever()", "class_method_signature": "TestResourceRetriever.testResourceRetriever()", "testcase": true, "constructor": false, "invocations": ["retrieve", "read", "getResourceAsStream", "getClassLoader", "getClass", "compare", "getPerception", "assertTrue", "isEqualsImages"]}, "focal_class": {"identifier": "ResourceRetriever", "superclass": "extends AbstractRetriever", "interfaces": "implements PatternRetriever, MaskRetriever", "fields": [], "methods": [{"identifier": "retrieve", "parameters": "(String source, Properties localProperties)", "modifiers": "@Override public", "return": "BufferedImage", "signature": "BufferedImage retrieve(String source, Properties localProperties)", "full_signature": "@Override public BufferedImage retrieve(String source, Properties localProperties)", "class_method_signature": "ResourceRetriever.retrieve(String source, Properties localProperties)", "testcase": false, "constructor": false}], "file": "rusheye-impl/src/main/java/org/arquillian/rusheye/retriever/ResourceRetriever.java"}, "focal_method": {"identifier": "retrieve", "parameters": "(String source, Properties localProperties)", "modifiers": "@Override public", "return": "BufferedImage", "body": "@Override\n    public BufferedImage retrieve(String source, Properties localProperties) throws RetrieverException {\n        URL resourceURL = this.getClass().getClassLoader().getResource(source);\n\n        if (resourceURL == null) {\n            throw new RetrieverException(this.getClass().getSimpleName() + \" wasn't able to retrieve image source '\"\n                + source + \"' - given source doesn't exist\");\n        }\n\n        BufferedImage bufferedImage;\n\n        try {\n            bufferedImage = ImageIO.read(resourceURL);\n        } catch (IOException e) {\n            throw new RetrieverException(this.getClass().getSimpleName() + \" wasn't able to retrieve image source '\"\n                + source + \"' from resourceURL '\" + resourceURL + \"'\", e);\n        }\n\n        return bufferedImage;\n    }", "signature": "BufferedImage retrieve(String source, Properties localProperties)", "full_signature": "@Override public BufferedImage retrieve(String source, Properties localProperties)", "class_method_signature": "ResourceRetriever.retrieve(String source, Properties localProperties)", "testcase": false, "constructor": false, "invocations": ["getResource", "getClassLoader", "getClass", "getSimpleName", "getClass", "read", "getSimpleName", "getClass"]}, "repository": {"repo_id": 1337797, "url": "https://github.com/arquillian/arquillian-rusheye", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 14, "size": 2425, "license": "licensed"}}