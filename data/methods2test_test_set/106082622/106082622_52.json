{"test_class": {"identifier": "SensitiveConfigScrubberTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SensitiveConfigScrubber scrubber;", "modifier": "private", "type": "SensitiveConfigScrubber", "declarator": "scrubber", "var_name": "scrubber"}, {"original_string": "private SaslUtility saslUtility;", "modifier": "private", "type": "SaslUtility", "declarator": "saslUtility", "var_name": "saslUtility"}], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/manager/SensitiveConfigScrubberTest.java"}, "test_case": {"identifier": "smokeTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void smokeTest() {\n        final String secretPhrase = \"secret\";\n\n        final SaslProperties saslProperties = new SaslProperties(\"Username\", secretPhrase, \"Anything\", \"Something\");\n\n        // Create cluster\n        final Cluster cluster = new Cluster();\n        cluster.setName(\"My Test Cluster\");\n        cluster.setSaslConfig(saslUtility.encryptProperties(saslProperties));\n        cluster.setSaslEnabled(true);\n        \n        // Create a mock config\n        final Map<String, Object> mockConfig = new HashMap<>();\n        mockConfig.put(\"Key1\", \"Value1\");\n        mockConfig.put(\"Key2\", \"Value2\");\n\n        // Add \"sensitive\" fields\n        mockConfig.put(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, secretPhrase);\n        mockConfig.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, secretPhrase);\n        mockConfig.put(SaslConfigs.SASL_JAAS_CONFIG, \"Anything anything \" + secretPhrase + \" something\");\n\n        // Call method under test\n        final Map<String, Object> scrubbed = scrubber.filterSensitiveOptions(mockConfig, cluster);\n\n        // Verify we have a new instance.\n        assertNotSame(\"Should be different instances\", scrubbed, mockConfig);\n\n        // Verify keys\n        assertEquals(scrubbed.get(\"Key1\"), mockConfig.get(\"Key1\"));\n        assertEquals(scrubbed.get(\"Key2\"), mockConfig.get(\"Key2\"));\n\n        // Sensitive fields no longer match\n        assertNotEquals(scrubbed.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG), mockConfig.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG));\n        assertEquals(\"**HIDDEN**\", scrubbed.get(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG));\n        assertNotEquals(scrubbed.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG), mockConfig.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG));\n        assertEquals(\"**HIDDEN**\", scrubbed.get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG));\n\n        assertNotEquals(scrubbed.get(SaslConfigs.SASL_JAAS_CONFIG), mockConfig.get(SaslConfigs.SASL_JAAS_CONFIG));\n        assertFalse(\n            ((String)scrubbed.get(SaslConfigs.SASL_JAAS_CONFIG)).contains(secretPhrase)\n        );\n    }", "signature": "void smokeTest()", "full_signature": "@Test public void smokeTest()", "class_method_signature": "SensitiveConfigScrubberTest.smokeTest()", "testcase": true, "constructor": false, "invocations": ["setName", "setSaslConfig", "encryptProperties", "setSaslEnabled", "put", "put", "put", "put", "put", "filterSensitiveOptions", "assertNotSame", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertNotEquals", "get", "get", "assertEquals", "get", "assertNotEquals", "get", "get", "assertEquals", "get", "assertNotEquals", "get", "get", "assertFalse", "contains", "get"]}, "focal_class": {"identifier": "SensitiveConfigScrubber", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SaslUtility saslUtility;", "modifier": "private final", "type": "SaslUtility", "declarator": "saslUtility", "var_name": "saslUtility"}], "methods": [{"identifier": "SensitiveConfigScrubber", "parameters": "(final SaslUtility saslUtility)", "modifiers": "@Autowired public", "return": "", "signature": " SensitiveConfigScrubber(final SaslUtility saslUtility)", "full_signature": "@Autowired public  SensitiveConfigScrubber(final SaslUtility saslUtility)", "class_method_signature": "SensitiveConfigScrubber.SensitiveConfigScrubber(final SaslUtility saslUtility)", "testcase": false, "constructor": true}, {"identifier": "filterSensitiveOptions", "parameters": "(final Map<String, Object> config, final Cluster cluster)", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> filterSensitiveOptions(final Map<String, Object> config, final Cluster cluster)", "full_signature": "public Map<String, Object> filterSensitiveOptions(final Map<String, Object> config, final Cluster cluster)", "class_method_signature": "SensitiveConfigScrubber.filterSensitiveOptions(final Map<String, Object> config, final Cluster cluster)", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/manager/SensitiveConfigScrubber.java"}, "focal_method": {"identifier": "filterSensitiveOptions", "parameters": "(final Map<String, Object> config, final Cluster cluster)", "modifiers": "public", "return": "Map<String, Object>", "body": "public Map<String, Object> filterSensitiveOptions(final Map<String, Object> config, final Cluster cluster) {\n        Objects.requireNonNull(config);\n\n        // Create a copy of the map\n        final Map<String, Object> copy = new HashMap<>(config);\n\n        // Filter sensitive fields\n        final String[] sensitiveKeys = new String[] {\n            SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG,\n        };\n        Arrays.stream(sensitiveKeys)\n            .filter(copy::containsKey)\n            .forEach((key) -> copy.put(key, \"**HIDDEN**\"));\n\n        // Filter JAAS Config\n        if (copy.containsKey(SaslConfigs.SASL_JAAS_CONFIG) && cluster != null) {\n            final SaslProperties saslProperties = saslUtility.decodeProperties(cluster);\n\n            // Only replace if plainPassword field set and non-empty.\n            if (saslProperties.getPlainPassword() != null && !saslProperties.getPlainPassword().isEmpty()) {\n                String jaasConfig = (String) copy.get(SaslConfigs.SASL_JAAS_CONFIG);\n                jaasConfig = jaasConfig.replaceAll(saslProperties.getPlainPassword(), \"**HIDDEN**\");\n                copy.put(SaslConfigs.SASL_JAAS_CONFIG, jaasConfig);\n            }\n        }\n\n        // Return copy of the map.\n        return copy;\n    }", "signature": "Map<String, Object> filterSensitiveOptions(final Map<String, Object> config, final Cluster cluster)", "full_signature": "public Map<String, Object> filterSensitiveOptions(final Map<String, Object> config, final Cluster cluster)", "class_method_signature": "SensitiveConfigScrubber.filterSensitiveOptions(final Map<String, Object> config, final Cluster cluster)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "forEach", "filter", "stream", "put", "containsKey", "decodeProperties", "getPlainPassword", "isEmpty", "getPlainPassword", "get", "replaceAll", "getPlainPassword", "put"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}