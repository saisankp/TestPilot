{"test_class": {"identifier": "MapEntryTest", "superclass": "", "interfaces": "", "fields": [], "file": "smartparam-engine/src/test/java/org/smartparam/engine/core/output/entry/MapEntryTest.java"}, "test_case": {"identifier": "shouldKeepKeyInSpecialMapEntry", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldKeepKeyInSpecialMapEntry() {\n        // given\n        MapEntry map = new MapEntry(new TestParameterEntryKey(\"key\"));\n\n        // when\n        ParameterEntryKey key = map.get(MapEntry.KEY);\n\n        // then\n        assertThat(key.value()).isEqualTo(\"key\");\n    }", "signature": "void shouldKeepKeyInSpecialMapEntry()", "full_signature": "@Test public void shouldKeepKeyInSpecialMapEntry()", "class_method_signature": "MapEntryTest.shouldKeepKeyInSpecialMapEntry()", "testcase": true, "constructor": false, "invocations": ["get", "isEqualTo", "assertThat", "value"]}, "focal_class": {"identifier": "MapEntry", "superclass": "", "interfaces": "implements Iterable<Entry<String, Object>>", "fields": [{"original_string": "public static final String KEY = \"_key\";", "modifier": "public static final", "type": "String", "declarator": "KEY = \"_key\"", "var_name": "KEY"}, {"original_string": "private final Map<String, Object> values = new HashMap<String, Object>();", "modifier": "private final", "type": "Map<String, Object>", "declarator": "values = new HashMap<String, Object>()", "var_name": "values"}], "methods": [{"identifier": "MapEntry", "parameters": "()", "modifiers": "public", "return": "", "signature": " MapEntry()", "full_signature": "public  MapEntry()", "class_method_signature": "MapEntry.MapEntry()", "testcase": false, "constructor": true}, {"identifier": "MapEntry", "parameters": "(ParameterEntryKey key)", "modifiers": "public", "return": "", "signature": " MapEntry(ParameterEntryKey key)", "full_signature": "public  MapEntry(ParameterEntryKey key)", "class_method_signature": "MapEntry.MapEntry(ParameterEntryKey key)", "testcase": false, "constructor": true}, {"identifier": "MapEntry", "parameters": "(Map<String, Object> initialValues)", "modifiers": "public", "return": "", "signature": " MapEntry(Map<String, Object> initialValues)", "full_signature": "public  MapEntry(Map<String, Object> initialValues)", "class_method_signature": "MapEntry.MapEntry(Map<String, Object> initialValues)", "testcase": false, "constructor": true}, {"identifier": "merge", "parameters": "(MapEntry other)", "modifiers": "public", "return": "MapEntry", "signature": "MapEntry merge(MapEntry other)", "full_signature": "public MapEntry merge(MapEntry other)", "class_method_signature": "MapEntry.merge(MapEntry other)", "testcase": false, "constructor": false}, {"identifier": "key", "parameters": "()", "modifiers": "public", "return": "ParameterEntryKey", "signature": "ParameterEntryKey key()", "full_signature": "public ParameterEntryKey key()", "class_method_signature": "MapEntry.key()", "testcase": false, "constructor": false}, {"identifier": "hasKey", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasKey()", "full_signature": "public boolean hasKey()", "class_method_signature": "MapEntry.hasKey()", "testcase": false, "constructor": false}, {"identifier": "has", "parameters": "(String levelName)", "modifiers": "public", "return": "boolean", "signature": "boolean has(String levelName)", "full_signature": "public boolean has(String levelName)", "class_method_signature": "MapEntry.has(String levelName)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String levelName, Object value)", "modifiers": "public", "return": "MapEntry", "signature": "MapEntry put(String levelName, Object value)", "full_signature": "public MapEntry put(String levelName, Object value)", "class_method_signature": "MapEntry.put(String levelName, Object value)", "testcase": false, "constructor": false}, {"identifier": "isStar", "parameters": "(String levelName)", "modifiers": "public", "return": "boolean", "signature": "boolean isStar(String levelName)", "full_signature": "public boolean isStar(String levelName)", "class_method_signature": "MapEntry.isStar(String levelName)", "testcase": false, "constructor": false}, {"identifier": "getRaw", "parameters": "(String levelName)", "modifiers": "public", "return": "Object", "signature": "Object getRaw(String levelName)", "full_signature": "public Object getRaw(String levelName)", "class_method_signature": "MapEntry.getRaw(String levelName)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String levelName)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T get(String levelName)", "full_signature": "@SuppressWarnings(\"unchecked\") public T get(String levelName)", "class_method_signature": "MapEntry.get(String levelName)", "testcase": false, "constructor": false}, {"identifier": "getAs", "parameters": "(String levelName, Class<T> clazz)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "signature": "T getAs(String levelName, Class<T> clazz)", "full_signature": "@SuppressWarnings(\"unchecked\") public T getAs(String levelName, Class<T> clazz)", "class_method_signature": "MapEntry.getAs(String levelName, Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(String levelName)", "modifiers": "public", "return": "String", "signature": "String getString(String levelName)", "full_signature": "public String getString(String levelName)", "class_method_signature": "MapEntry.getString(String levelName)", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "(String levelName)", "modifiers": "public", "return": "Long", "signature": "Long getLong(String levelName)", "full_signature": "public Long getLong(String levelName)", "class_method_signature": "MapEntry.getLong(String levelName)", "testcase": false, "constructor": false}, {"identifier": "getBigDecimal", "parameters": "(String levelName)", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal getBigDecimal(String levelName)", "full_signature": "public BigDecimal getBigDecimal(String levelName)", "class_method_signature": "MapEntry.getBigDecimal(String levelName)", "testcase": false, "constructor": false}, {"identifier": "getEnum", "parameters": "(String levelName, Class<T> enumClass)", "modifiers": "public", "return": "T", "signature": "T getEnum(String levelName, Class<T> enumClass)", "full_signature": "public T getEnum(String levelName, Class<T> enumClass)", "class_method_signature": "MapEntry.getEnum(String levelName, Class<T> enumClass)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Entry<String, Object>>", "signature": "Iterator<Entry<String, Object>> iterator()", "full_signature": "@Override public Iterator<Entry<String, Object>> iterator()", "class_method_signature": "MapEntry.iterator()", "testcase": false, "constructor": false}, {"identifier": "rawValues", "parameters": "()", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> rawValues()", "full_signature": "public Map<String, Object> rawValues()", "class_method_signature": "MapEntry.rawValues()", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/core/output/entry/MapEntry.java"}, "focal_method": {"identifier": "get", "parameters": "(String levelName)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "T", "body": "@SuppressWarnings(\"unchecked\")\n    public <T> T get(String levelName) {\n        return (T) this.values.get(levelName);\n    }", "signature": "T get(String levelName)", "full_signature": "@SuppressWarnings(\"unchecked\") public T get(String levelName)", "class_method_signature": "MapEntry.get(String levelName)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}