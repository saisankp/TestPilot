{"test_class": {"identifier": "ObservableReplayTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/observable/ObservableReplayTest.java"}, "test_case": {"identifier": "testAsync", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAsync() {\n        Observable<Integer> source = Observable.range(1, 10000);\n        for (int i = 0; i < 100; i++) {\n            TestObserver<Integer> to1 = new TestObserver<Integer>();\n\n            Observable<Integer> cached = source.replay().autoConnect();\n\n            cached.observeOn(Schedulers.computation()).subscribe(to1);\n\n            to1.awaitTerminalEvent(2, TimeUnit.SECONDS);\n            to1.assertNoErrors();\n            to1.assertTerminated();\n            assertEquals(10000, to1.values().size());\n\n            TestObserver<Integer> to2 = new TestObserver<Integer>();\n            cached.observeOn(Schedulers.computation()).subscribe(to2);\n\n            to2.awaitTerminalEvent(2, TimeUnit.SECONDS);\n            to2.assertNoErrors();\n            to2.assertTerminated();\n            assertEquals(10000, to2.values().size());\n        }\n    }", "signature": "void testAsync()", "full_signature": "@Test public void testAsync()", "class_method_signature": "ObservableReplayTest.testAsync()", "testcase": true, "constructor": false, "invocations": ["range", "autoConnect", "replay", "subscribe", "observeOn", "computation", "awaitTerminalEvent", "assertNoErrors", "assertTerminated", "assertEquals", "size", "values", "subscribe", "observeOn", "computation", "awaitTerminalEvent", "assertNoErrors", "assertTerminated", "assertEquals", "size", "values"]}, "focal_class": {"identifier": "ObservableReplay", "superclass": "extends ConnectableObservable<T>", "interfaces": "implements HasUpstreamObservableSource<T>, Disposable", "fields": [{"original_string": "final ObservableSource<T> source;", "modifier": "final", "type": "ObservableSource<T>", "declarator": "source", "var_name": "source"}, {"original_string": "final AtomicReference<ReplayObserver<T>> current;", "modifier": "final", "type": "AtomicReference<ReplayObserver<T>>", "declarator": "current", "var_name": "current"}, {"original_string": "final BufferSupplier<T> bufferFactory;", "modifier": "final", "type": "BufferSupplier<T>", "declarator": "bufferFactory", "var_name": "bufferFactory"}, {"original_string": "final ObservableSource<T> onSubscribe;", "modifier": "final", "type": "ObservableSource<T>", "declarator": "onSubscribe", "var_name": "onSubscribe"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    static final BufferSupplier DEFAULT_UNBOUNDED_FACTORY = new UnBoundedFactory();", "modifier": "@SuppressWarnings(\"rawtypes\")\n    static final", "type": "BufferSupplier", "declarator": "DEFAULT_UNBOUNDED_FACTORY = new UnBoundedFactory()", "var_name": "DEFAULT_UNBOUNDED_FACTORY"}], "methods": [{"identifier": "multicastSelector", "parameters": "(\n            final Callable<? extends ConnectableObservable<U>> connectableFactory,\n            final Function<? super Observable<U>, ? extends ObservableSource<R>> selector)", "modifiers": "public static", "return": "Observable<R>", "signature": "Observable<R> multicastSelector(\n            final Callable<? extends ConnectableObservable<U>> connectableFactory,\n            final Function<? super Observable<U>, ? extends ObservableSource<R>> selector)", "full_signature": "public static Observable<R> multicastSelector(\n            final Callable<? extends ConnectableObservable<U>> connectableFactory,\n            final Function<? super Observable<U>, ? extends ObservableSource<R>> selector)", "class_method_signature": "ObservableReplay.multicastSelector(\n            final Callable<? extends ConnectableObservable<U>> connectableFactory,\n            final Function<? super Observable<U>, ? extends ObservableSource<R>> selector)", "testcase": false, "constructor": false}, {"identifier": "observeOn", "parameters": "(final ConnectableObservable<T> co, final Scheduler scheduler)", "modifiers": "public static", "return": "ConnectableObservable<T>", "signature": "ConnectableObservable<T> observeOn(final ConnectableObservable<T> co, final Scheduler scheduler)", "full_signature": "public static ConnectableObservable<T> observeOn(final ConnectableObservable<T> co, final Scheduler scheduler)", "class_method_signature": "ObservableReplay.observeOn(final ConnectableObservable<T> co, final Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "createFrom", "parameters": "(ObservableSource<? extends T> source)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "ConnectableObservable<T>", "signature": "ConnectableObservable<T> createFrom(ObservableSource<? extends T> source)", "full_signature": "@SuppressWarnings(\"unchecked\") public static ConnectableObservable<T> createFrom(ObservableSource<? extends T> source)", "class_method_signature": "ObservableReplay.createFrom(ObservableSource<? extends T> source)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(ObservableSource<T> source,\n            final int bufferSize)", "modifiers": "public static", "return": "ConnectableObservable<T>", "signature": "ConnectableObservable<T> create(ObservableSource<T> source,\n            final int bufferSize)", "full_signature": "public static ConnectableObservable<T> create(ObservableSource<T> source,\n            final int bufferSize)", "class_method_signature": "ObservableReplay.create(ObservableSource<T> source,\n            final int bufferSize)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(ObservableSource<T> source,\n            long maxAge, TimeUnit unit, Scheduler scheduler)", "modifiers": "public static", "return": "ConnectableObservable<T>", "signature": "ConnectableObservable<T> create(ObservableSource<T> source,\n            long maxAge, TimeUnit unit, Scheduler scheduler)", "full_signature": "public static ConnectableObservable<T> create(ObservableSource<T> source,\n            long maxAge, TimeUnit unit, Scheduler scheduler)", "class_method_signature": "ObservableReplay.create(ObservableSource<T> source,\n            long maxAge, TimeUnit unit, Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(ObservableSource<T> source,\n            final long maxAge, final TimeUnit unit, final Scheduler scheduler, final int bufferSize)", "modifiers": "public static", "return": "ConnectableObservable<T>", "signature": "ConnectableObservable<T> create(ObservableSource<T> source,\n            final long maxAge, final TimeUnit unit, final Scheduler scheduler, final int bufferSize)", "full_signature": "public static ConnectableObservable<T> create(ObservableSource<T> source,\n            final long maxAge, final TimeUnit unit, final Scheduler scheduler, final int bufferSize)", "class_method_signature": "ObservableReplay.create(ObservableSource<T> source,\n            final long maxAge, final TimeUnit unit, final Scheduler scheduler, final int bufferSize)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(ObservableSource<T> source,\n            final BufferSupplier<T> bufferFactory)", "modifiers": "static", "return": "ConnectableObservable<T>", "signature": "ConnectableObservable<T> create(ObservableSource<T> source,\n            final BufferSupplier<T> bufferFactory)", "full_signature": "static ConnectableObservable<T> create(ObservableSource<T> source,\n            final BufferSupplier<T> bufferFactory)", "class_method_signature": "ObservableReplay.create(ObservableSource<T> source,\n            final BufferSupplier<T> bufferFactory)", "testcase": false, "constructor": false}, {"identifier": "ObservableReplay", "parameters": "(ObservableSource<T> onSubscribe, ObservableSource<T> source,\n                             final AtomicReference<ReplayObserver<T>> current,\n                             final BufferSupplier<T> bufferFactory)", "modifiers": "private", "return": "", "signature": " ObservableReplay(ObservableSource<T> onSubscribe, ObservableSource<T> source,\n                             final AtomicReference<ReplayObserver<T>> current,\n                             final BufferSupplier<T> bufferFactory)", "full_signature": "private  ObservableReplay(ObservableSource<T> onSubscribe, ObservableSource<T> source,\n                             final AtomicReference<ReplayObserver<T>> current,\n                             final BufferSupplier<T> bufferFactory)", "class_method_signature": "ObservableReplay.ObservableReplay(ObservableSource<T> onSubscribe, ObservableSource<T> source,\n                             final AtomicReference<ReplayObserver<T>> current,\n                             final BufferSupplier<T> bufferFactory)", "testcase": false, "constructor": true}, {"identifier": "source", "parameters": "()", "modifiers": "@Override public", "return": "ObservableSource<T>", "signature": "ObservableSource<T> source()", "full_signature": "@Override public ObservableSource<T> source()", "class_method_signature": "ObservableReplay.source()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "ObservableReplay.dispose()", "testcase": false, "constructor": false}, {"identifier": "isDisposed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDisposed()", "full_signature": "@Override public boolean isDisposed()", "class_method_signature": "ObservableReplay.isDisposed()", "testcase": false, "constructor": false}, {"identifier": "subscribeActual", "parameters": "(Observer<? super T> observer)", "modifiers": "@Override protected", "return": "void", "signature": "void subscribeActual(Observer<? super T> observer)", "full_signature": "@Override protected void subscribeActual(Observer<? super T> observer)", "class_method_signature": "ObservableReplay.subscribeActual(Observer<? super T> observer)", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(Consumer<? super Disposable> connection)", "modifiers": "@Override public", "return": "void", "signature": "void connect(Consumer<? super Disposable> connection)", "full_signature": "@Override public void connect(Consumer<? super Disposable> connection)", "class_method_signature": "ObservableReplay.connect(Consumer<? super Disposable> connection)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java"}, "focal_method": {"identifier": "observeOn", "parameters": "(final ConnectableObservable<T> co, final Scheduler scheduler)", "modifiers": "public static", "return": "ConnectableObservable<T>", "body": "public static <T> ConnectableObservable<T> observeOn(final ConnectableObservable<T> co, final Scheduler scheduler) {\n        final Observable<T> observable = co.observeOn(scheduler);\n        return RxJavaPlugins.onAssembly(new Replay<T>(co, observable));\n    }", "signature": "ConnectableObservable<T> observeOn(final ConnectableObservable<T> co, final Scheduler scheduler)", "full_signature": "public static ConnectableObservable<T> observeOn(final ConnectableObservable<T> co, final Scheduler scheduler)", "class_method_signature": "ObservableReplay.observeOn(final ConnectableObservable<T> co, final Scheduler scheduler)", "testcase": false, "constructor": false, "invocations": ["observeOn", "onAssembly"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}