{"test_class": {"identifier": "RunEntityServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    RunEntityService service;", "modifier": "@InjectMocks", "type": "RunEntityService", "declarator": "service", "var_name": "service"}, {"original_string": "@Mock\n    RunGateway gateway;", "modifier": "@Mock", "type": "RunGateway", "declarator": "gateway", "var_name": "gateway"}, {"original_string": "@Mock\n    RunAddPayload addPayload;", "modifier": "@Mock", "type": "RunAddPayload", "declarator": "addPayload", "var_name": "addPayload"}, {"original_string": "@Mock\n    Event addPayloadEvent;", "modifier": "@Mock", "type": "Event", "declarator": "addPayloadEvent", "var_name": "addPayloadEvent"}, {"original_string": "@Mock\n    Run addedRun;", "modifier": "@Mock", "type": "Run", "declarator": "addedRun", "var_name": "addedRun"}, {"original_string": "@Mock\n    RunAddTimePayload runAddRawTimePayload;", "modifier": "@Mock", "type": "RunAddTimePayload", "declarator": "runAddRawTimePayload", "var_name": "runAddRawTimePayload"}, {"original_string": "@Mock\n    Event runAddRawTimePayloadEvent;", "modifier": "@Mock", "type": "Event", "declarator": "runAddRawTimePayloadEvent", "var_name": "runAddRawTimePayloadEvent"}, {"original_string": "@Mock\n    BigDecimal runAddRawTimePayloadRawTime;", "modifier": "@Mock", "type": "BigDecimal", "declarator": "runAddRawTimePayloadRawTime", "var_name": "runAddRawTimePayloadRawTime"}], "file": "service/src/test/java/org/coner/core/domain/service/RunEntityServiceTest.java"}, "test_case": {"identifier": "whenAddToFirstRunInSequenceWithoutRawTimeWithRunLackingTime", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void whenAddToFirstRunInSequenceWithoutRawTimeWithRunLackingTime()\n            throws AddEntityException, EntityNotFoundException {\n        Run firstRunInSequenceWithoutRawTime = mock(Run.class);\n        when(firstRunInSequenceWithoutRawTime.getId()).thenReturn(TestConstants.RUN_ID);\n        when(gateway.findFirstInSequenceWithoutTime(runAddRawTimePayloadEvent))\n                .thenReturn(firstRunInSequenceWithoutRawTime);\n        Run runWithRawTimeAssigned = mock(Run.class);\n        when(gateway.save(TestConstants.RUN_ID, firstRunInSequenceWithoutRawTime)).thenReturn(runWithRawTimeAssigned);\n\n        RunTimeAddedPayload actual = service.addTimeToFirstRunInSequenceWithoutRawTime(runAddRawTimePayload);\n\n        verify(firstRunInSequenceWithoutRawTime).setRawTime(runAddRawTimePayloadRawTime);\n        verify(gateway).save(TestConstants.RUN_ID, firstRunInSequenceWithoutRawTime);\n        assertThat(actual.getOutcome()).isEqualTo(RunTimeAddedPayload.Outcome.RUN_RAWTIME_ASSIGNED_TO_EXISTING);\n        assertThat(actual.getRun()).isSameAs(runWithRawTimeAssigned);\n    }", "signature": "void whenAddToFirstRunInSequenceWithoutRawTimeWithRunLackingTime()", "full_signature": "@Test public void whenAddToFirstRunInSequenceWithoutRawTimeWithRunLackingTime()", "class_method_signature": "RunEntityServiceTest.whenAddToFirstRunInSequenceWithoutRawTimeWithRunLackingTime()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getId", "thenReturn", "when", "findFirstInSequenceWithoutTime", "mock", "thenReturn", "when", "save", "addTimeToFirstRunInSequenceWithoutRawTime", "setRawTime", "verify", "save", "verify", "isEqualTo", "assertThat", "getOutcome", "isSameAs", "assertThat", "getRun"]}, "focal_class": {"identifier": "RunEntityService", "superclass": "extends AbstractEntityService<\n        Run,\n        RunAddPayload,\n        RunGateway>", "interfaces": "", "fields": [{"original_string": "private final EventEntityService eventEntityService;", "modifier": "private final", "type": "EventEntityService", "declarator": "eventEntityService", "var_name": "eventEntityService"}], "methods": [{"identifier": "RunEntityService", "parameters": "(RunGateway gateway, EventEntityService eventEntityService)", "modifiers": "@Inject public", "return": "", "signature": " RunEntityService(RunGateway gateway, EventEntityService eventEntityService)", "full_signature": "@Inject public  RunEntityService(RunGateway gateway, EventEntityService eventEntityService)", "class_method_signature": "RunEntityService.RunEntityService(RunGateway gateway, EventEntityService eventEntityService)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(RunAddPayload addPayload)", "modifiers": "@Override public", "return": "Run", "signature": "Run add(RunAddPayload addPayload)", "full_signature": "@Override public Run add(RunAddPayload addPayload)", "class_method_signature": "RunEntityService.add(RunAddPayload addPayload)", "testcase": false, "constructor": false}, {"identifier": "getByEventIdAndRunId", "parameters": "(String eventId, String runId)", "modifiers": "public", "return": "Run", "signature": "Run getByEventIdAndRunId(String eventId, String runId)", "full_signature": "public Run getByEventIdAndRunId(String eventId, String runId)", "class_method_signature": "RunEntityService.getByEventIdAndRunId(String eventId, String runId)", "testcase": false, "constructor": false}, {"identifier": "getAllWithEventId", "parameters": "(String eventId)", "modifiers": "public", "return": "List<Run>", "signature": "List<Run> getAllWithEventId(String eventId)", "full_signature": "public List<Run> getAllWithEventId(String eventId)", "class_method_signature": "RunEntityService.getAllWithEventId(String eventId)", "testcase": false, "constructor": false}, {"identifier": "addTimeToFirstRunInSequenceWithoutRawTime", "parameters": "(RunAddTimePayload addTimePayload)", "modifiers": "public", "return": "RunTimeAddedPayload", "signature": "RunTimeAddedPayload addTimeToFirstRunInSequenceWithoutRawTime(RunAddTimePayload addTimePayload)", "full_signature": "public RunTimeAddedPayload addTimeToFirstRunInSequenceWithoutRawTime(RunAddTimePayload addTimePayload)", "class_method_signature": "RunEntityService.addTimeToFirstRunInSequenceWithoutRawTime(RunAddTimePayload addTimePayload)", "testcase": false, "constructor": false}, {"identifier": "getAllWithRegistration", "parameters": "(Registration registration)", "modifiers": "public", "return": "List<Run>", "signature": "List<Run> getAllWithRegistration(Registration registration)", "full_signature": "public List<Run> getAllWithRegistration(Registration registration)", "class_method_signature": "RunEntityService.getAllWithRegistration(Registration registration)", "testcase": false, "constructor": false}], "file": "service/src/main/java/org/coner/core/domain/service/RunEntityService.java"}, "focal_method": {"identifier": "addTimeToFirstRunInSequenceWithoutRawTime", "parameters": "(RunAddTimePayload addTimePayload)", "modifiers": "public", "return": "RunTimeAddedPayload", "body": "public RunTimeAddedPayload addTimeToFirstRunInSequenceWithoutRawTime(RunAddTimePayload addTimePayload)\n            throws EntityNotFoundException, AddEntityException {\n        RunTimeAddedPayload runTimeAddedPayload = new RunTimeAddedPayload();\n        Run firstRunInSequenceWithoutTime = gateway.findFirstInSequenceWithoutTime(addTimePayload.getEvent());\n        if (firstRunInSequenceWithoutTime != null) {\n            firstRunInSequenceWithoutTime.setRawTime(addTimePayload.getRawTime());\n            Run runWithRawTimeAssigned = gateway.save(\n                    firstRunInSequenceWithoutTime.getId(),\n                    firstRunInSequenceWithoutTime\n            );\n            runTimeAddedPayload.setRun(runWithRawTimeAssigned);\n            runTimeAddedPayload.setOutcome(RunTimeAddedPayload.Outcome.RUN_RAWTIME_ASSIGNED_TO_EXISTING);\n        } else {\n            // Consider error reporting for this scenario.\n            // There has possibly been a false finish trip, or perhaps a car managed to stage and launch without\n            // being noticed by Timing workers. Recommend to hold start while resolving situation.\n            RunAddPayload addPayload = new RunAddPayload();\n            addPayload.setEvent(addTimePayload.getEvent());\n            addPayload.setTimestamp(Instant.now());\n            addPayload.setRawTime(addTimePayload.getRawTime());\n            Run addedRun = add(addPayload);\n            runTimeAddedPayload.setRun(addedRun);\n            runTimeAddedPayload.setOutcome(RunTimeAddedPayload.Outcome.RUN_ADDED_WITH_RAWTIME);\n        }\n        return runTimeAddedPayload;\n    }", "signature": "RunTimeAddedPayload addTimeToFirstRunInSequenceWithoutRawTime(RunAddTimePayload addTimePayload)", "full_signature": "public RunTimeAddedPayload addTimeToFirstRunInSequenceWithoutRawTime(RunAddTimePayload addTimePayload)", "class_method_signature": "RunEntityService.addTimeToFirstRunInSequenceWithoutRawTime(RunAddTimePayload addTimePayload)", "testcase": false, "constructor": false, "invocations": ["findFirstInSequenceWithoutTime", "getEvent", "setRawTime", "getRawTime", "save", "getId", "setRun", "setOutcome", "setEvent", "getEvent", "setTimestamp", "now", "setRawTime", "getRawTime", "add", "setRun", "setOutcome"]}, "repository": {"repo_id": 28649714, "url": "https://github.com/caeos/coner-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 1027, "license": "licensed"}}