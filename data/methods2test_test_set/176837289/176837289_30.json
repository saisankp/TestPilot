{"test_class": {"identifier": "ServiceAccountProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<String> SCOPES = List.of(\"https://www.googleapis.com/auth/devstorage.read_write\");", "modifier": "private static final", "type": "List<String>", "declarator": "SCOPES = List.of(\"https://www.googleapis.com/auth/devstorage.read_write\")", "var_name": "SCOPES"}, {"original_string": "private static final String projectId = AppSettings.getInstance().getString(AppSettings.GCP_PROJECT);", "modifier": "private static final", "type": "String", "declarator": "projectId = AppSettings.getInstance().getString(AppSettings.GCP_PROJECT)", "var_name": "projectId"}, {"original_string": "private static final Object rules = ConfigFactory.parseString(\n    \"rules=[\" +\n            \"{\" +\n                \"if: \\\"true\\\",\" +\n                \"then: \\\"primary + '-shadow@\" + projectId + \".iam.gserviceaccount.com'\\\"\" +\n            \"},\" +\n        \"]\"\n        ).getAnyRef(\"rules\");", "modifier": "private static final", "type": "Object", "declarator": "rules = ConfigFactory.parseString(\n    \"rules=[\" +\n            \"{\" +\n                \"if: \\\"true\\\",\" +\n                \"then: \\\"primary + '-shadow@\" + projectId + \".iam.gserviceaccount.com'\\\"\" +\n            \"},\" +\n        \"]\"\n        ).getAnyRef(\"rules\")", "var_name": "rules"}, {"original_string": "@ClassRule\n    public static SettingsOverride settingsOverride = new SettingsOverride(Map.of(\n        AppSettings.USER_MAPPING_RULES, rules\n    ));", "modifier": "@ClassRule\n    public static", "type": "SettingsOverride", "declarator": "settingsOverride = new SettingsOverride(Map.of(\n        AppSettings.USER_MAPPING_RULES, rules\n    ))", "var_name": "settingsOverride"}], "file": "code/broker-server/src/test/java/com/google/cloud/broker/apps/brokerserver/accesstokens/providers/ServiceAccountProviderTest.java"}, "test_case": {"identifier": "testUnauthorized", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnauthorized() {\n        ServiceAccountProvider provider = new ServiceAccountProvider();\n        KerberosUserMapper mapper = new KerberosUserMapper();\n        try {\n            provider.getAccessToken(mapper.map(\"bob@EXAMPLE.COM\"), SCOPES);\n            fail(\"StatusRuntimeException not thrown\");\n        } catch (StatusRuntimeException e) {\n            assertEquals(Status.PERMISSION_DENIED.getCode(), e.getStatus().getCode());\n        }\n    }", "signature": "void testUnauthorized()", "full_signature": "@Test public void testUnauthorized()", "class_method_signature": "ServiceAccountProviderTest.testUnauthorized()", "testcase": true, "constructor": false, "invocations": ["getAccessToken", "map", "fail", "assertEquals", "getCode", "getCode", "getStatus"]}, "focal_class": {"identifier": "ServiceAccountProvider", "superclass": "extends AbstractProvider", "interfaces": "", "fields": [], "methods": [{"identifier": "getAccessToken", "parameters": "(String googleIdentity, List<String> scopes)", "modifiers": "@Override public", "return": "AccessToken", "signature": "AccessToken getAccessToken(String googleIdentity, List<String> scopes)", "full_signature": "@Override public AccessToken getAccessToken(String googleIdentity, List<String> scopes)", "class_method_signature": "ServiceAccountProvider.getAccessToken(String googleIdentity, List<String> scopes)", "testcase": false, "constructor": false}], "file": "code/broker-server/src/main/java/com/google/cloud/broker/apps/brokerserver/accesstokens/providers/ServiceAccountProvider.java"}, "focal_method": {"identifier": "getAccessToken", "parameters": "(String googleIdentity, List<String> scopes)", "modifiers": "@Override public", "return": "AccessToken", "body": "@Override\n    public AccessToken getAccessToken(String googleIdentity, List<String> scopes) {\n        if (! googleIdentity.endsWith(\".iam.gserviceaccount.com\")) {\n            throw new IllegalArgumentException(\"Google identity `\" + googleIdentity + \"` is not a service account\");\n        }\n        try {\n            GoogleCredentials credentials = GoogleCredentials.getApplicationDefault();\n            ImpersonatedCredentials impersonatedCredentials = ImpersonatedCredentials.create(credentials, googleIdentity, null, scopes, 3600);\n            com.google.auth.oauth2.AccessToken token = impersonatedCredentials.refreshAccessToken();\n            return new AccessToken(token.getTokenValue(), token.getExpirationTime().getTime());\n        } catch (IOException e) {\n            throw Status.PERMISSION_DENIED.asRuntimeException();\n        }\n    }", "signature": "AccessToken getAccessToken(String googleIdentity, List<String> scopes)", "full_signature": "@Override public AccessToken getAccessToken(String googleIdentity, List<String> scopes)", "class_method_signature": "ServiceAccountProvider.getAccessToken(String googleIdentity, List<String> scopes)", "testcase": false, "constructor": false, "invocations": ["endsWith", "getApplicationDefault", "create", "refreshAccessToken", "getTokenValue", "getTime", "getExpirationTime", "asRuntimeException"]}, "repository": {"repo_id": 176837289, "url": "https://github.com/GoogleCloudPlatform/gcp-token-broker", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 27, "size": 1700, "license": "licensed"}}