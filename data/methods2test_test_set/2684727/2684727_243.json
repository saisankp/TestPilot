{"test_class": {"identifier": "ReceiptTableActionAlterationsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Date DATE = new Date(1512778546145L);", "modifier": "private static final", "type": "Date", "declarator": "DATE = new Date(1512778546145L)", "var_name": "DATE"}, {"original_string": "private static final long CUSTOM_ORDER_ID = 17509000L;", "modifier": "private static final", "type": "long", "declarator": "CUSTOM_ORDER_ID = 17509000L", "var_name": "CUSTOM_ORDER_ID"}, {"original_string": "private static final TimeZone TIMEZONE = TimeZone.getTimeZone(\"America/New_York\");", "modifier": "private static final", "type": "TimeZone", "declarator": "TIMEZONE = TimeZone.getTimeZone(\"America/New_York\")", "var_name": "TIMEZONE"}, {"original_string": "ReceiptTableActionAlterations receiptTableActionAlterations;", "modifier": "", "type": "ReceiptTableActionAlterations", "declarator": "receiptTableActionAlterations", "var_name": "receiptTableActionAlterations"}, {"original_string": "File file1;", "modifier": "", "type": "File", "declarator": "file1", "var_name": "file1"}, {"original_string": "File file2;", "modifier": "", "type": "File", "declarator": "file2", "var_name": "file2"}, {"original_string": "@Mock\n    ReceiptsTable receiptsTable;", "modifier": "@Mock", "type": "ReceiptsTable", "declarator": "receiptsTable", "var_name": "receiptsTable"}, {"original_string": "@Mock\n    StorageManager storageManager;", "modifier": "@Mock", "type": "StorageManager", "declarator": "storageManager", "var_name": "storageManager"}, {"original_string": "@Mock\n    BuilderFactory1<Receipt, ReceiptBuilderFactory> receiptBuilderFactoryFactory;", "modifier": "@Mock", "type": "BuilderFactory1<Receipt, ReceiptBuilderFactory>", "declarator": "receiptBuilderFactoryFactory", "var_name": "receiptBuilderFactoryFactory"}, {"original_string": "@Mock\n    ReceiptBuilderFactory receiptBuilderFactory;", "modifier": "@Mock", "type": "ReceiptBuilderFactory", "declarator": "receiptBuilderFactory", "var_name": "receiptBuilderFactory"}, {"original_string": "@Mock\n    Lazy<Picasso> picassoLazy;", "modifier": "@Mock", "type": "Lazy<Picasso>", "declarator": "picassoLazy", "var_name": "picassoLazy"}, {"original_string": "@Mock\n    Picasso picasso;", "modifier": "@Mock", "type": "Picasso", "declarator": "picasso", "var_name": "picasso"}, {"original_string": "@Mock\n    Receipt receipt;", "modifier": "@Mock", "type": "Receipt", "declarator": "receipt", "var_name": "receipt"}, {"original_string": "@Mock\n    Trip trip;", "modifier": "@Mock", "type": "Trip", "declarator": "trip", "var_name": "trip"}], "file": "app/src/test/java/co/smartreceipts/android/persistence/database/controllers/alterations/ReceiptTableActionAlterationsTest.java"}, "test_case": {"identifier": "postUpdateNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void postUpdateNull() throws Exception {\n        receiptTableActionAlterations.postUpdate(receipt, null)\n                .test()\n                .assertNoValues()\n                .assertNotComplete()\n                .assertError(Exception.class);\n\n        verifyZeroInteractions(storageManager);\n    }", "signature": "void postUpdateNull()", "full_signature": "@Test public void postUpdateNull()", "class_method_signature": "ReceiptTableActionAlterationsTest.postUpdateNull()", "testcase": true, "constructor": false, "invocations": ["assertError", "assertNotComplete", "assertNoValues", "test", "postUpdate", "verifyZeroInteractions"]}, "focal_class": {"identifier": "ReceiptTableActionAlterations", "superclass": "extends StubTableActionAlterations<Receipt>", "interfaces": "", "fields": [{"original_string": "private final Context context;", "modifier": "private final", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private final ReceiptsTable receiptsTable;", "modifier": "private final", "type": "ReceiptsTable", "declarator": "receiptsTable", "var_name": "receiptsTable"}, {"original_string": "private final StorageManager storageManager;", "modifier": "private final", "type": "StorageManager", "declarator": "storageManager", "var_name": "storageManager"}, {"original_string": "private final BuilderFactory1<Receipt, ReceiptBuilderFactory> receiptBuilderFactoryFactory;", "modifier": "private final", "type": "BuilderFactory1<Receipt, ReceiptBuilderFactory>", "declarator": "receiptBuilderFactoryFactory", "var_name": "receiptBuilderFactoryFactory"}, {"original_string": "private final Lazy<Picasso> picasso;", "modifier": "private final", "type": "Lazy<Picasso>", "declarator": "picasso", "var_name": "picasso"}], "methods": [{"identifier": "ReceiptTableActionAlterations", "parameters": "(@NonNull Context context,\n                                         @NonNull ReceiptsTable receiptsTable,\n                                         @NonNull StorageManager storageManager,\n                                         @NonNull Lazy<Picasso> picasso)", "modifiers": "public", "return": "", "signature": " ReceiptTableActionAlterations(@NonNull Context context,\n                                         @NonNull ReceiptsTable receiptsTable,\n                                         @NonNull StorageManager storageManager,\n                                         @NonNull Lazy<Picasso> picasso)", "full_signature": "public  ReceiptTableActionAlterations(@NonNull Context context,\n                                         @NonNull ReceiptsTable receiptsTable,\n                                         @NonNull StorageManager storageManager,\n                                         @NonNull Lazy<Picasso> picasso)", "class_method_signature": "ReceiptTableActionAlterations.ReceiptTableActionAlterations(@NonNull Context context,\n                                         @NonNull ReceiptsTable receiptsTable,\n                                         @NonNull StorageManager storageManager,\n                                         @NonNull Lazy<Picasso> picasso)", "testcase": false, "constructor": true}, {"identifier": "ReceiptTableActionAlterations", "parameters": "(@NonNull Context context,\n                                  @NonNull ReceiptsTable receiptsTable,\n                                  @NonNull StorageManager storageManager,\n                                  @NonNull BuilderFactory1<Receipt, ReceiptBuilderFactory> receiptBuilderFactoryFactory,\n                                  @NonNull Lazy<Picasso> picasso)", "modifiers": "", "return": "", "signature": " ReceiptTableActionAlterations(@NonNull Context context,\n                                  @NonNull ReceiptsTable receiptsTable,\n                                  @NonNull StorageManager storageManager,\n                                  @NonNull BuilderFactory1<Receipt, ReceiptBuilderFactory> receiptBuilderFactoryFactory,\n                                  @NonNull Lazy<Picasso> picasso)", "full_signature": "  ReceiptTableActionAlterations(@NonNull Context context,\n                                  @NonNull ReceiptsTable receiptsTable,\n                                  @NonNull StorageManager storageManager,\n                                  @NonNull BuilderFactory1<Receipt, ReceiptBuilderFactory> receiptBuilderFactoryFactory,\n                                  @NonNull Lazy<Picasso> picasso)", "class_method_signature": "ReceiptTableActionAlterations.ReceiptTableActionAlterations(@NonNull Context context,\n                                  @NonNull ReceiptsTable receiptsTable,\n                                  @NonNull StorageManager storageManager,\n                                  @NonNull BuilderFactory1<Receipt, ReceiptBuilderFactory> receiptBuilderFactoryFactory,\n                                  @NonNull Lazy<Picasso> picasso)", "testcase": false, "constructor": true}, {"identifier": "preInsert", "parameters": "(@NonNull final Receipt receipt)", "modifiers": "@NonNull @Override public", "return": "Single<Receipt>", "signature": "Single<Receipt> preInsert(@NonNull final Receipt receipt)", "full_signature": "@NonNull @Override public Single<Receipt> preInsert(@NonNull final Receipt receipt)", "class_method_signature": "ReceiptTableActionAlterations.preInsert(@NonNull final Receipt receipt)", "testcase": false, "constructor": false}, {"identifier": "preUpdate", "parameters": "(@NonNull final Receipt oldReceipt, @NonNull final Receipt newReceipt)", "modifiers": "@NonNull @Override public", "return": "Single<Receipt>", "signature": "Single<Receipt> preUpdate(@NonNull final Receipt oldReceipt, @NonNull final Receipt newReceipt)", "full_signature": "@NonNull @Override public Single<Receipt> preUpdate(@NonNull final Receipt oldReceipt, @NonNull final Receipt newReceipt)", "class_method_signature": "ReceiptTableActionAlterations.preUpdate(@NonNull final Receipt oldReceipt, @NonNull final Receipt newReceipt)", "testcase": false, "constructor": false}, {"identifier": "postUpdate", "parameters": "(@NonNull final Receipt oldReceipt, @Nullable final Receipt newReceipt)", "modifiers": "@NonNull @Override public", "return": "Single<Receipt>", "signature": "Single<Receipt> postUpdate(@NonNull final Receipt oldReceipt, @Nullable final Receipt newReceipt)", "full_signature": "@NonNull @Override public Single<Receipt> postUpdate(@NonNull final Receipt oldReceipt, @Nullable final Receipt newReceipt)", "class_method_signature": "ReceiptTableActionAlterations.postUpdate(@NonNull final Receipt oldReceipt, @Nullable final Receipt newReceipt)", "testcase": false, "constructor": false}, {"identifier": "postDelete", "parameters": "(@Nullable final Receipt receipt)", "modifiers": "@NonNull @Override public", "return": "Single<Receipt>", "signature": "Single<Receipt> postDelete(@Nullable final Receipt receipt)", "full_signature": "@NonNull @Override public Single<Receipt> postDelete(@Nullable final Receipt receipt)", "class_method_signature": "ReceiptTableActionAlterations.postDelete(@Nullable final Receipt receipt)", "testcase": false, "constructor": false}, {"identifier": "preCopy", "parameters": "(@NonNull final Receipt receipt, @NonNull final Trip toTrip)", "modifiers": "@NonNull public", "return": "Single<Receipt>", "signature": "Single<Receipt> preCopy(@NonNull final Receipt receipt, @NonNull final Trip toTrip)", "full_signature": "@NonNull public Single<Receipt> preCopy(@NonNull final Receipt receipt, @NonNull final Trip toTrip)", "class_method_signature": "ReceiptTableActionAlterations.preCopy(@NonNull final Receipt receipt, @NonNull final Trip toTrip)", "testcase": false, "constructor": false}, {"identifier": "postCopy", "parameters": "(@NonNull Receipt oldReceipt, @Nullable Receipt newReceipt)", "modifiers": "public", "return": "void", "signature": "void postCopy(@NonNull Receipt oldReceipt, @Nullable Receipt newReceipt)", "full_signature": "public void postCopy(@NonNull Receipt oldReceipt, @Nullable Receipt newReceipt)", "class_method_signature": "ReceiptTableActionAlterations.postCopy(@NonNull Receipt oldReceipt, @Nullable Receipt newReceipt)", "testcase": false, "constructor": false}, {"identifier": "preMove", "parameters": "(@NonNull final Receipt receipt, @NonNull final Trip toTrip)", "modifiers": "@NonNull public", "return": "Single<Receipt>", "signature": "Single<Receipt> preMove(@NonNull final Receipt receipt, @NonNull final Trip toTrip)", "full_signature": "@NonNull public Single<Receipt> preMove(@NonNull final Receipt receipt, @NonNull final Trip toTrip)", "class_method_signature": "ReceiptTableActionAlterations.preMove(@NonNull final Receipt receipt, @NonNull final Trip toTrip)", "testcase": false, "constructor": false}, {"identifier": "postMove", "parameters": "(@NonNull Receipt oldReceipt, @Nullable Receipt newReceipt)", "modifiers": "public", "return": "void", "signature": "void postMove(@NonNull Receipt oldReceipt, @Nullable Receipt newReceipt)", "full_signature": "public void postMove(@NonNull Receipt oldReceipt, @Nullable Receipt newReceipt)", "class_method_signature": "ReceiptTableActionAlterations.postMove(@NonNull Receipt oldReceipt, @Nullable Receipt newReceipt)", "testcase": false, "constructor": false}, {"identifier": "updateReceiptFileNameBlocking", "parameters": "(@NonNull Receipt receipt)", "modifiers": "@NonNull private", "return": "Receipt", "signature": "Receipt updateReceiptFileNameBlocking(@NonNull Receipt receipt)", "full_signature": "@NonNull private Receipt updateReceiptFileNameBlocking(@NonNull Receipt receipt)", "class_method_signature": "ReceiptTableActionAlterations.updateReceiptFileNameBlocking(@NonNull Receipt receipt)", "testcase": false, "constructor": false}, {"identifier": "copyReceiptFileBlocking", "parameters": "(@NonNull Receipt receipt, @NonNull Trip toTrip, @NonNull List<Receipt> receiptsInTrip)", "modifiers": "@NonNull private", "return": "Receipt", "signature": "Receipt copyReceiptFileBlocking(@NonNull Receipt receipt, @NonNull Trip toTrip, @NonNull List<Receipt> receiptsInTrip)", "full_signature": "@NonNull private Receipt copyReceiptFileBlocking(@NonNull Receipt receipt, @NonNull Trip toTrip, @NonNull List<Receipt> receiptsInTrip)", "class_method_signature": "ReceiptTableActionAlterations.copyReceiptFileBlocking(@NonNull Receipt receipt, @NonNull Trip toTrip, @NonNull List<Receipt> receiptsInTrip)", "testcase": false, "constructor": false}, {"identifier": "swapDates", "parameters": "(@NonNull Receipt receipt1, @NonNull Receipt receipt2, boolean isSwappingUp)", "modifiers": "@NonNull private", "return": "List<? extends Map.Entry<Receipt, Receipt>>", "signature": "List<? extends Map.Entry<Receipt, Receipt>> swapDates(@NonNull Receipt receipt1, @NonNull Receipt receipt2, boolean isSwappingUp)", "full_signature": "@NonNull private List<? extends Map.Entry<Receipt, Receipt>> swapDates(@NonNull Receipt receipt1, @NonNull Receipt receipt2, boolean isSwappingUp)", "class_method_signature": "ReceiptTableActionAlterations.swapDates(@NonNull Receipt receipt1, @NonNull Receipt receipt2, boolean isSwappingUp)", "testcase": false, "constructor": false}, {"identifier": "getNextReceiptIndex", "parameters": "(@NonNull Receipt receipt)", "modifiers": "private", "return": "int", "signature": "int getNextReceiptIndex(@NonNull Receipt receipt)", "full_signature": "private int getNextReceiptIndex(@NonNull Receipt receipt)", "class_method_signature": "ReceiptTableActionAlterations.getNextReceiptIndex(@NonNull Receipt receipt)", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/persistence/database/controllers/alterations/ReceiptTableActionAlterations.java"}, "focal_method": {"identifier": "postUpdate", "parameters": "(@NonNull final Receipt oldReceipt, @Nullable final Receipt newReceipt)", "modifiers": "@NonNull @Override public", "return": "Single<Receipt>", "body": "@NonNull\n    @Override\n    public Single<Receipt> postUpdate(@NonNull final Receipt oldReceipt, @Nullable final Receipt newReceipt) {\n        return Single.fromCallable(() -> {\n            if (newReceipt == null) {\n                throw new Exception(\"Post update failed due to a null receipt\");\n            }\n\n            if (oldReceipt.getFile() != null) {\n                // Delete old file if user removed or changed it\n                if (newReceipt.getFile() == null  || !newReceipt.getFile().equals(oldReceipt.getFile())) {\n                    picasso.get().invalidate(oldReceipt.getFile());\n                    storageManager.delete(oldReceipt.getFile());\n                }\n            }\n\n            return newReceipt;\n        });\n    }", "signature": "Single<Receipt> postUpdate(@NonNull final Receipt oldReceipt, @Nullable final Receipt newReceipt)", "full_signature": "@NonNull @Override public Single<Receipt> postUpdate(@NonNull final Receipt oldReceipt, @Nullable final Receipt newReceipt)", "class_method_signature": "ReceiptTableActionAlterations.postUpdate(@NonNull final Receipt oldReceipt, @Nullable final Receipt newReceipt)", "testcase": false, "constructor": false, "invocations": ["fromCallable", "getFile", "getFile", "equals", "getFile", "getFile", "invalidate", "get", "getFile", "delete", "getFile"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}