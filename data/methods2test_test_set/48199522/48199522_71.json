{"test_class": {"identifier": "APLCountMeanShiftSummarizerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DataFrame df;", "modifier": "private", "type": "DataFrame", "declarator": "df", "var_name": "df"}], "file": "lib/src/test/java/edu/stanford/futuredata/macrobase/analysis/summary/aplinear/APLCountMeanShiftSummarizerTest.java"}, "test_case": {"identifier": "testSummarize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSummarize() throws Exception {\n        assertEquals(9, df.getNumRows());\n        CountMeanShiftCubedClassifier pc = new CountMeanShiftCubedClassifier(\"count\", \"time\", \"meanLatency\", \"==\", \"1\");\n        pc.process(df);\n        DataFrame output = pc.getResults();\n        assertEquals(df.getNumRows(), output.getNumRows());\n\n        List<String> explanationAttributes = Arrays.asList(\n                \"location\",\n                \"version\",\n                \"language\"\n        );\n\n        APLCountMeanShiftSummarizer summ = new APLCountMeanShiftSummarizer();\n        summ.setMinSupport(.05);\n        summ.setMinMeanShift(1.1);\n        summ.setAttributes(explanationAttributes);\n        summ.process(output);\n        APLExplanation e = summ.getResults();\n        TestCase.assertEquals(3, e.getResults().size());\n        assertTrue(e.prettyPrint().contains(\"location=AUS\"));\n        assertTrue(e.prettyPrint().contains(\"version=v2\"));\n        assertTrue(e.prettyPrint().contains(\"language=ENG\"));\n    }", "signature": "void testSummarize()", "full_signature": "@Test public void testSummarize()", "class_method_signature": "APLCountMeanShiftSummarizerTest.testSummarize()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getNumRows", "process", "getResults", "assertEquals", "getNumRows", "getNumRows", "asList", "setMinSupport", "setMinMeanShift", "setAttributes", "process", "getResults", "assertEquals", "size", "getResults", "assertTrue", "contains", "prettyPrint", "assertTrue", "contains", "prettyPrint", "assertTrue", "contains", "prettyPrint"]}, "focal_class": {"identifier": "APLCountMeanShiftSummarizer", "superclass": "extends APLSummarizer", "interfaces": "", "fields": [{"original_string": "private Logger log = LoggerFactory.getLogger(\"APLMeanSummarizer\");", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(\"APLMeanSummarizer\")", "var_name": "log"}, {"original_string": "private double minMeanShift = 1.0;", "modifier": "private", "type": "double", "declarator": "minMeanShift = 1.0", "var_name": "minMeanShift"}], "methods": [{"identifier": "getAggregateNames", "parameters": "()", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getAggregateNames()", "full_signature": "@Override public List<String> getAggregateNames()", "class_method_signature": "APLCountMeanShiftSummarizer.getAggregateNames()", "testcase": false, "constructor": false}, {"identifier": "getAggregationOps", "parameters": "()", "modifiers": "@Override public", "return": "AggregationOp[]", "signature": "AggregationOp[] getAggregationOps()", "full_signature": "@Override public AggregationOp[] getAggregationOps()", "class_method_signature": "APLCountMeanShiftSummarizer.getAggregationOps()", "testcase": false, "constructor": false}, {"identifier": "getEncoded", "parameters": "(List<String[]> columns, DataFrame input)", "modifiers": "@Override public", "return": "int[][]", "signature": "int[][] getEncoded(List<String[]> columns, DataFrame input)", "full_signature": "@Override public int[][] getEncoded(List<String[]> columns, DataFrame input)", "class_method_signature": "APLCountMeanShiftSummarizer.getEncoded(List<String[]> columns, DataFrame input)", "testcase": false, "constructor": false}, {"identifier": "getAggregateColumns", "parameters": "(DataFrame input)", "modifiers": "@Override public", "return": "double[][]", "signature": "double[][] getAggregateColumns(DataFrame input)", "full_signature": "@Override public double[][] getAggregateColumns(DataFrame input)", "class_method_signature": "APLCountMeanShiftSummarizer.getAggregateColumns(DataFrame input)", "testcase": false, "constructor": false}, {"identifier": "getQualityMetricList", "parameters": "()", "modifiers": "@Override public", "return": "List<QualityMetric>", "signature": "List<QualityMetric> getQualityMetricList()", "full_signature": "@Override public List<QualityMetric> getQualityMetricList()", "class_method_signature": "APLCountMeanShiftSummarizer.getQualityMetricList()", "testcase": false, "constructor": false}, {"identifier": "getThresholds", "parameters": "()", "modifiers": "@Override public", "return": "List<Double>", "signature": "List<Double> getThresholds()", "full_signature": "@Override public List<Double> getThresholds()", "class_method_signature": "APLCountMeanShiftSummarizer.getThresholds()", "testcase": false, "constructor": false}, {"identifier": "getNumberOutliers", "parameters": "(double[][] aggregates)", "modifiers": "@Override public", "return": "double", "signature": "double getNumberOutliers(double[][] aggregates)", "full_signature": "@Override public double getNumberOutliers(double[][] aggregates)", "class_method_signature": "APLCountMeanShiftSummarizer.getNumberOutliers(double[][] aggregates)", "testcase": false, "constructor": false}, {"identifier": "setMinMeanShift", "parameters": "(double minMeanShift)", "modifiers": "public", "return": "void", "signature": "void setMinMeanShift(double minMeanShift)", "full_signature": "public void setMinMeanShift(double minMeanShift)", "class_method_signature": "APLCountMeanShiftSummarizer.setMinMeanShift(double minMeanShift)", "testcase": false, "constructor": false}], "file": "lib/src/main/java/edu/stanford/futuredata/macrobase/analysis/summary/aplinear/APLCountMeanShiftSummarizer.java"}, "focal_method": {"identifier": "setMinMeanShift", "parameters": "(double minMeanShift)", "modifiers": "public", "return": "void", "body": "public void setMinMeanShift(double minMeanShift) {\n        this.minMeanShift = minMeanShift;\n    }", "signature": "void setMinMeanShift(double minMeanShift)", "full_signature": "public void setMinMeanShift(double minMeanShift)", "class_method_signature": "APLCountMeanShiftSummarizer.setMinMeanShift(double minMeanShift)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}