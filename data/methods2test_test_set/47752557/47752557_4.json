{"test_class": {"identifier": "OrderByTimeAnalysisServiceTest", "superclass": "extends BaseSpringJunitUtil", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate IAnalysisService orderByTimeAnalysisService;", "modifier": "@Autowired\n\tprivate", "type": "IAnalysisService", "declarator": "orderByTimeAnalysisService", "var_name": "orderByTimeAnalysisService"}], "file": "xa-analyzer/src/test/java/com/xinnet/xa/analyzer/service/roi/OrderByTimeAnalysisServiceTest.java"}, "test_case": {"identifier": "testAnalysis", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAnalysis(){\n\t\tAnalysisParam ap = new AnalysisParam(\"2014112001\", TimeType.HOUR);\n\t\torderByTimeAnalysisService.analysis(ap);\n\t}", "signature": "void testAnalysis()", "full_signature": "@Test public void testAnalysis()", "class_method_signature": "OrderByTimeAnalysisServiceTest.testAnalysis()", "testcase": true, "constructor": false, "invocations": ["analysis"]}, "focal_class": {"identifier": "OrderByTimeAnalysisService", "superclass": "", "interfaces": "implements IAnalysisService", "fields": [{"original_string": "private Logger logger = Logger.getLogger(getClass());", "modifier": "private", "type": "Logger", "declarator": "logger = Logger.getLogger(getClass())", "var_name": "logger"}, {"original_string": "@Autowired\n\tprivate OrderDataDao orderDataDao;", "modifier": "@Autowired\n\tprivate", "type": "OrderDataDao", "declarator": "orderDataDao", "var_name": "orderDataDao"}, {"original_string": "@Autowired\n\tprivate AnalysisDataUtil analysisDataUtil;", "modifier": "@Autowired\n\tprivate", "type": "AnalysisDataUtil", "declarator": "analysisDataUtil", "var_name": "analysisDataUtil"}, {"original_string": "@Autowired\n\tprivate ExceptionMessageService exceptionMessageService;", "modifier": "@Autowired\n\tprivate", "type": "ExceptionMessageService", "declarator": "exceptionMessageService", "var_name": "exceptionMessageService"}], "methods": [{"identifier": "analysis", "parameters": "(AnalysisParam analysisParam)", "modifiers": "@Override public", "return": "void", "signature": "void analysis(AnalysisParam analysisParam)", "full_signature": "@Override public void analysis(AnalysisParam analysisParam)", "class_method_signature": "OrderByTimeAnalysisService.analysis(AnalysisParam analysisParam)", "testcase": false, "constructor": false}, {"identifier": "analysisGoodsOrder", "parameters": "(AnalysisParam analysisParam)", "modifiers": "private", "return": "void", "signature": "void analysisGoodsOrder(AnalysisParam analysisParam)", "full_signature": "private void analysisGoodsOrder(AnalysisParam analysisParam)", "class_method_signature": "OrderByTimeAnalysisService.analysisGoodsOrder(AnalysisParam analysisParam)", "testcase": false, "constructor": false}, {"identifier": "insertDbData", "parameters": "(AnalysisParam analysisParam)", "modifiers": "private", "return": "boolean", "signature": "boolean insertDbData(AnalysisParam analysisParam)", "full_signature": "private boolean insertDbData(AnalysisParam analysisParam)", "class_method_signature": "OrderByTimeAnalysisService.insertDbData(AnalysisParam analysisParam)", "testcase": false, "constructor": false}, {"identifier": "analysisDetailData", "parameters": "(AnalysisParam analysisParam)", "modifiers": "private", "return": "void", "signature": "void analysisDetailData(AnalysisParam analysisParam)", "full_signature": "private void analysisDetailData(AnalysisParam analysisParam)", "class_method_signature": "OrderByTimeAnalysisService.analysisDetailData(AnalysisParam analysisParam)", "testcase": false, "constructor": false}, {"identifier": "analysisAreadId", "parameters": "(AnalysisParam analysisParam)", "modifiers": "private", "return": "void", "signature": "void analysisAreadId(AnalysisParam analysisParam)", "full_signature": "private void analysisAreadId(AnalysisParam analysisParam)", "class_method_signature": "OrderByTimeAnalysisService.analysisAreadId(AnalysisParam analysisParam)", "testcase": false, "constructor": false}, {"identifier": "analysisOrderCountByProuctLine", "parameters": "(AnalysisParam analysisParam)", "modifiers": "private", "return": "void", "signature": "void analysisOrderCountByProuctLine(AnalysisParam analysisParam)", "full_signature": "private void analysisOrderCountByProuctLine(AnalysisParam analysisParam)", "class_method_signature": "OrderByTimeAnalysisService.analysisOrderCountByProuctLine(AnalysisParam analysisParam)", "testcase": false, "constructor": false}, {"identifier": "analysisOrderDetailPayType", "parameters": "(AnalysisParam analysisParam)", "modifiers": "private", "return": "void", "signature": "void analysisOrderDetailPayType(AnalysisParam analysisParam)", "full_signature": "private void analysisOrderDetailPayType(AnalysisParam analysisParam)", "class_method_signature": "OrderByTimeAnalysisService.analysisOrderDetailPayType(AnalysisParam analysisParam)", "testcase": false, "constructor": false}, {"identifier": "analysisOrderDetailBuyType", "parameters": "(AnalysisParam analysisParam)", "modifiers": "private", "return": "void", "signature": "void analysisOrderDetailBuyType(AnalysisParam analysisParam)", "full_signature": "private void analysisOrderDetailBuyType(AnalysisParam analysisParam)", "class_method_signature": "OrderByTimeAnalysisService.analysisOrderDetailBuyType(AnalysisParam analysisParam)", "testcase": false, "constructor": false}, {"identifier": "analysisOrderCountByUrl", "parameters": "(AnalysisParam analysisParam)", "modifiers": "private", "return": "void", "signature": "void analysisOrderCountByUrl(AnalysisParam analysisParam)", "full_signature": "private void analysisOrderCountByUrl(AnalysisParam analysisParam)", "class_method_signature": "OrderByTimeAnalysisService.analysisOrderCountByUrl(AnalysisParam analysisParam)", "testcase": false, "constructor": false}, {"identifier": "analysisOrderDetailNAProductLineAndUrl", "parameters": "(AnalysisParam analysisParam)", "modifiers": "private", "return": "void", "signature": "void analysisOrderDetailNAProductLineAndUrl(AnalysisParam analysisParam)", "full_signature": "private void analysisOrderDetailNAProductLineAndUrl(AnalysisParam analysisParam)", "class_method_signature": "OrderByTimeAnalysisService.analysisOrderDetailNAProductLineAndUrl(AnalysisParam analysisParam)", "testcase": false, "constructor": false}, {"identifier": "batchInser", "parameters": "(List<OrderDetail> list)", "modifiers": "private", "return": "void", "signature": "void batchInser(List<OrderDetail> list)", "full_signature": "private void batchInser(List<OrderDetail> list)", "class_method_signature": "OrderByTimeAnalysisService.batchInser(List<OrderDetail> list)", "testcase": false, "constructor": false}, {"identifier": "getOrderDataByTime", "parameters": "(String startTime,String endTime)", "modifiers": "private", "return": "List<OrderDetail>", "signature": "List<OrderDetail> getOrderDataByTime(String startTime,String endTime)", "full_signature": "private List<OrderDetail> getOrderDataByTime(String startTime,String endTime)", "class_method_signature": "OrderByTimeAnalysisService.getOrderDataByTime(String startTime,String endTime)", "testcase": false, "constructor": false}], "file": "xa-analyzer/src/main/java/com/xinnet/xa/analyzer/service/roi/OrderByTimeAnalysisService.java"}, "focal_method": {"identifier": "analysis", "parameters": "(AnalysisParam analysisParam)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void analysis(AnalysisParam analysisParam) {\n\t\t\n\t\tboolean state = this.insertDbData(analysisParam);\n\t\tif(state){\n\t\t   this.analysisGoodsOrder(analysisParam);\n\t\t   this.analysisDetailData(analysisParam);\n           this.analysisOrderCountByProuctLine(analysisParam);\n           analysisOrderCountByUrl(analysisParam);\n\t\t}\n\t}", "signature": "void analysis(AnalysisParam analysisParam)", "full_signature": "@Override public void analysis(AnalysisParam analysisParam)", "class_method_signature": "OrderByTimeAnalysisService.analysis(AnalysisParam analysisParam)", "testcase": false, "constructor": false, "invocations": ["insertDbData", "analysisGoodsOrder", "analysisDetailData", "analysisOrderCountByProuctLine", "analysisOrderCountByUrl"]}, "repository": {"repo_id": 47752557, "url": "https://github.com/yanweiqi/xinnet-analysis", "language": "Java", "is_fork": false, "fork_count": 16, "stargazer_count": 13, "size": 187, "license": "licensed"}}