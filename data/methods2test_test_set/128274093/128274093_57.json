{"test_class": {"identifier": "ResourceSubscriberTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/subscribers/ResourceSubscriberTest.java"}, "test_case": {"identifier": "request", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void request() {\n        TestResourceSubscriber<Integer> tc = new TestResourceSubscriber<Integer>() {\n            @Override\n            protected void onStart() {\n                start++;\n            }\n        };\n\n        Flowable.just(1).subscribe(tc);\n\n        assertEquals(1, tc.start);\n        assertEquals(Collections.emptyList(), tc.values);\n        assertTrue(tc.errors.isEmpty());\n        assertEquals(0, tc.complete);\n\n        tc.requestMore(1);\n\n        assertEquals(1, tc.start);\n        assertEquals(1, tc.values.get(0).intValue());\n        assertTrue(tc.errors.isEmpty());\n        assertEquals(1, tc.complete);\n    }", "signature": "void request()", "full_signature": "@Test public void request()", "class_method_signature": "ResourceSubscriberTest.request()", "testcase": true, "constructor": false, "invocations": ["subscribe", "just", "assertEquals", "assertEquals", "emptyList", "assertTrue", "isEmpty", "assertEquals", "requestMore", "assertEquals", "assertEquals", "intValue", "get", "assertTrue", "isEmpty", "assertEquals"]}, "focal_class": {"identifier": "ResourceSubscriber", "superclass": "", "interfaces": "implements FlowableSubscriber<T>, Disposable", "fields": [{"original_string": "private final AtomicReference<Subscription> s = new AtomicReference<Subscription>();", "modifier": "private final", "type": "AtomicReference<Subscription>", "declarator": "s = new AtomicReference<Subscription>()", "var_name": "s"}, {"original_string": "private final ListCompositeDisposable resources = new ListCompositeDisposable();", "modifier": "private final", "type": "ListCompositeDisposable", "declarator": "resources = new ListCompositeDisposable()", "var_name": "resources"}, {"original_string": "private final AtomicLong missedRequested = new AtomicLong();", "modifier": "private final", "type": "AtomicLong", "declarator": "missedRequested = new AtomicLong()", "var_name": "missedRequested"}], "methods": [{"identifier": "add", "parameters": "(Disposable resource)", "modifiers": "public final", "return": "void", "signature": "void add(Disposable resource)", "full_signature": "public final void add(Disposable resource)", "class_method_signature": "ResourceSubscriber.add(Disposable resource)", "testcase": false, "constructor": false}, {"identifier": "onSubscribe", "parameters": "(Subscription s)", "modifiers": "@Override public final", "return": "void", "signature": "void onSubscribe(Subscription s)", "full_signature": "@Override public final void onSubscribe(Subscription s)", "class_method_signature": "ResourceSubscriber.onSubscribe(Subscription s)", "testcase": false, "constructor": false}, {"identifier": "onStart", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void onStart()", "full_signature": "protected void onStart()", "class_method_signature": "ResourceSubscriber.onStart()", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(long n)", "modifiers": "protected final", "return": "void", "signature": "void request(long n)", "full_signature": "protected final void request(long n)", "class_method_signature": "ResourceSubscriber.request(long n)", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public final", "return": "void", "signature": "void dispose()", "full_signature": "@Override public final void dispose()", "class_method_signature": "ResourceSubscriber.dispose()", "testcase": false, "constructor": false}, {"identifier": "isDisposed", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean isDisposed()", "full_signature": "@Override public final boolean isDisposed()", "class_method_signature": "ResourceSubscriber.isDisposed()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/subscribers/ResourceSubscriber.java"}, "focal_method": {"identifier": "request", "parameters": "(long n)", "modifiers": "protected final", "return": "void", "body": "protected final void request(long n) {\n        SubscriptionHelper.deferredRequest(s, missedRequested, n);\n    }", "signature": "void request(long n)", "full_signature": "protected final void request(long n)", "class_method_signature": "ResourceSubscriber.request(long n)", "testcase": false, "constructor": false, "invocations": ["deferredRequest"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}