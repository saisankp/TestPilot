{"test_class": {"identifier": "UnbindOperationRecorderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LdapOperations ldapOperationsMock;", "modifier": "private", "type": "LdapOperations", "declarator": "ldapOperationsMock", "var_name": "ldapOperationsMock"}, {"original_string": "private TempEntryRenamingStrategy renamingStrategyMock;", "modifier": "private", "type": "TempEntryRenamingStrategy", "declarator": "renamingStrategyMock", "var_name": "renamingStrategyMock"}], "file": "core/src/test/java/org/springframework/ldap/transaction/compensating/UnbindOperationRecorderTest.java"}, "test_case": {"identifier": "testRecordOperation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRecordOperation() {\n        final LdapName expectedTempName = LdapUtils.newLdapName(\n                \"cn=john doe_temp\");\n        final LdapName expectedDn = LdapUtils.newLdapName(\n                \"cn=john doe\");\n        UnbindOperationRecorder tested = new UnbindOperationRecorder(\n                ldapOperationsMock, renamingStrategyMock);\n\n        when(renamingStrategyMock.getTemporaryName(expectedDn))\n                .thenReturn(expectedTempName);\n\n        // Perform test\n        CompensatingTransactionOperationExecutor operation = tested\n                .recordOperation(new Object[] { expectedDn });\n\n        // Verify result\n        assertThat(operation instanceof UnbindOperationExecutor).isTrue();\n        UnbindOperationExecutor rollbackOperation = (UnbindOperationExecutor) operation;\n        assertThat(rollbackOperation.getLdapOperations()).isSameAs(ldapOperationsMock);\n        assertThat(rollbackOperation.getOriginalDn()).isSameAs(expectedDn);\n        assertThat(rollbackOperation.getTemporaryDn()).isSameAs(expectedTempName);\n    }", "signature": "void testRecordOperation()", "full_signature": "@Test public void testRecordOperation()", "class_method_signature": "UnbindOperationRecorderTest.testRecordOperation()", "testcase": true, "constructor": false, "invocations": ["newLdapName", "newLdapName", "thenReturn", "when", "getTemporaryName", "recordOperation", "isTrue", "assertThat", "isSameAs", "assertThat", "getLdapOperations", "isSameAs", "assertThat", "getOriginalDn", "isSameAs", "assertThat", "getTemporaryDn"]}, "focal_class": {"identifier": "UnbindOperationRecorder", "superclass": "", "interfaces": "implements\n        CompensatingTransactionOperationRecorder", "fields": [{"original_string": "private LdapOperations ldapOperations;", "modifier": "private", "type": "LdapOperations", "declarator": "ldapOperations", "var_name": "ldapOperations"}, {"original_string": "private TempEntryRenamingStrategy renamingStrategy;", "modifier": "private", "type": "TempEntryRenamingStrategy", "declarator": "renamingStrategy", "var_name": "renamingStrategy"}], "methods": [{"identifier": "UnbindOperationRecorder", "parameters": "(LdapOperations ldapOperations,\n            TempEntryRenamingStrategy renamingStrategy)", "modifiers": "public", "return": "", "signature": " UnbindOperationRecorder(LdapOperations ldapOperations,\n            TempEntryRenamingStrategy renamingStrategy)", "full_signature": "public  UnbindOperationRecorder(LdapOperations ldapOperations,\n            TempEntryRenamingStrategy renamingStrategy)", "class_method_signature": "UnbindOperationRecorder.UnbindOperationRecorder(LdapOperations ldapOperations,\n            TempEntryRenamingStrategy renamingStrategy)", "testcase": false, "constructor": true}, {"identifier": "recordOperation", "parameters": "(\n            Object[] args)", "modifiers": "public", "return": "CompensatingTransactionOperationExecutor", "signature": "CompensatingTransactionOperationExecutor recordOperation(\n            Object[] args)", "full_signature": "public CompensatingTransactionOperationExecutor recordOperation(\n            Object[] args)", "class_method_signature": "UnbindOperationRecorder.recordOperation(\n            Object[] args)", "testcase": false, "constructor": false}, {"identifier": "getLdapOperations", "parameters": "()", "modifiers": "", "return": "LdapOperations", "signature": "LdapOperations getLdapOperations()", "full_signature": " LdapOperations getLdapOperations()", "class_method_signature": "UnbindOperationRecorder.getLdapOperations()", "testcase": false, "constructor": false}, {"identifier": "getRenamingStrategy", "parameters": "()", "modifiers": "public", "return": "TempEntryRenamingStrategy", "signature": "TempEntryRenamingStrategy getRenamingStrategy()", "full_signature": "public TempEntryRenamingStrategy getRenamingStrategy()", "class_method_signature": "UnbindOperationRecorder.getRenamingStrategy()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/transaction/compensating/UnbindOperationRecorder.java"}, "focal_method": {"identifier": "recordOperation", "parameters": "(\n            Object[] args)", "modifiers": "public", "return": "CompensatingTransactionOperationExecutor", "body": "public CompensatingTransactionOperationExecutor recordOperation(\n            Object[] args) {\n        Name dn = LdapTransactionUtils.getFirstArgumentAsName(args);\n        Name temporaryDn = renamingStrategy.getTemporaryName(dn);\n\n        return new UnbindOperationExecutor(ldapOperations, dn, temporaryDn);\n    }", "signature": "CompensatingTransactionOperationExecutor recordOperation(\n            Object[] args)", "full_signature": "public CompensatingTransactionOperationExecutor recordOperation(\n            Object[] args)", "class_method_signature": "UnbindOperationRecorder.recordOperation(\n            Object[] args)", "testcase": false, "constructor": false, "invocations": ["getFirstArgumentAsName", "getTemporaryName"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}