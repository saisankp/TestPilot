{"test_class": {"identifier": "SampleDataJmsMessageListenerTest", "superclass": "extends AbstractServiceTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private SampleDataJmsMessageListener sampleDataJmsMessageListener;", "modifier": "@Autowired\n    private", "type": "SampleDataJmsMessageListener", "declarator": "sampleDataJmsMessageListener", "var_name": "sampleDataJmsMessageListener"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/helper/SampleDataJmsMessageListenerTest.java"}, "test_case": {"identifier": "testS3MessageWithWrongFormat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testS3MessageWithWrongFormat() throws Exception\n    {\n        // Create and persist database entities required for testing.\n        businessObjectDefinitionServiceTestHelper.createDatabaseEntitiesForBusinessObjectDefinitionTesting();\n\n        storageDaoTestHelper.createStorageEntity(StorageEntity.SAMPLE_DATA_FILE_STORAGE,\n            Arrays.asList(new Attribute(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME), S3_BUCKET_NAME)));\n\n        // Create a business object definition.\n        BusinessObjectDefinitionCreateRequest request =\n            new BusinessObjectDefinitionCreateRequest(NAMESPACE, BDEF_NAME, DATA_PROVIDER_NAME, BDEF_DESCRIPTION, BDEF_DISPLAY_NAME,\n                businessObjectDefinitionServiceTestHelper.getNewAttributes());\n        businessObjectDefinitionService.createBusinessObjectDefinition(request);\n        String fileName = \"test1.csv\";\n        String filePath = NAMESPACE + \"/\" + BDEF_NAME + fileName;\n        long fileSize = 1024L;\n        S3Entity s3Entity = new S3Entity(null, null, new S3ObjectEntity(filePath, fileSize, null, null), null);\n\n        List<S3EventNotificationRecord> records = new ArrayList<>();\n        records.add(new S3EventNotificationRecord(null, null, null, null, null, null, null, s3Entity, null));\n\n        S3EventNotification s3EventNotification = new S3EventNotification(records);\n\n        try\n        {\n            sampleDataJmsMessageListener.processMessage(jsonHelper.objectToJson(s3EventNotification), null);\n        }\n        catch (IllegalArgumentException ex)\n        {\n            //this exception should be caught inside the processMessage method\n            fail();\n        }\n    }", "signature": "void testS3MessageWithWrongFormat()", "full_signature": "@Test public void testS3MessageWithWrongFormat()", "class_method_signature": "SampleDataJmsMessageListenerTest.testS3MessageWithWrongFormat()", "testcase": true, "constructor": false, "invocations": ["createDatabaseEntitiesForBusinessObjectDefinitionTesting", "createStorageEntity", "asList", "getProperty", "getNewAttributes", "createBusinessObjectDefinition", "add", "processMessage", "objectToJson", "fail"]}, "focal_class": {"identifier": "SampleDataJmsMessageListener", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SampleDataJmsMessageListener.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SampleDataJmsMessageListener.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}, {"original_string": "@Autowired\n    private BusinessObjectDefinitionService businessObjectDefinitionService;", "modifier": "@Autowired\n    private", "type": "BusinessObjectDefinitionService", "declarator": "businessObjectDefinitionService", "var_name": "businessObjectDefinitionService"}], "methods": [{"identifier": "controlSampleDataJmsMessageListener", "parameters": "()", "modifiers": "@Scheduled(fixedDelay = 60000) public", "return": "void", "signature": "void controlSampleDataJmsMessageListener()", "full_signature": "@Scheduled(fixedDelay = 60000) public void controlSampleDataJmsMessageListener()", "class_method_signature": "SampleDataJmsMessageListener.controlSampleDataJmsMessageListener()", "testcase": false, "constructor": false}, {"identifier": "processMessage", "parameters": "(String payload, @Headers Map<Object, Object> allHeaders)", "modifiers": "@JmsListener(id = HerdJmsDestinationResolver.SQS_DESTINATION_SAMPLE_DATA_QUEUE, containerFactory = \"jmsListenerContainerFactory\", destination = HerdJmsDestinationResolver.SQS_DESTINATION_SAMPLE_DATA_QUEUE) public", "return": "void", "signature": "void processMessage(String payload, @Headers Map<Object, Object> allHeaders)", "full_signature": "@JmsListener(id = HerdJmsDestinationResolver.SQS_DESTINATION_SAMPLE_DATA_QUEUE, containerFactory = \"jmsListenerContainerFactory\", destination = HerdJmsDestinationResolver.SQS_DESTINATION_SAMPLE_DATA_QUEUE) public void processMessage(String payload, @Headers Map<Object, Object> allHeaders)", "class_method_signature": "SampleDataJmsMessageListener.processMessage(String payload, @Headers Map<Object, Object> allHeaders)", "testcase": false, "constructor": false}, {"identifier": "convertS3KeyFormat", "parameters": "(String string)", "modifiers": "private", "return": "String", "signature": "String convertS3KeyFormat(String string)", "full_signature": "private String convertS3KeyFormat(String string)", "class_method_signature": "SampleDataJmsMessageListener.convertS3KeyFormat(String string)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/helper/SampleDataJmsMessageListener.java"}, "focal_method": {"identifier": "processMessage", "parameters": "(String payload, @Headers Map<Object, Object> allHeaders)", "modifiers": "@JmsListener(id = HerdJmsDestinationResolver.SQS_DESTINATION_SAMPLE_DATA_QUEUE, containerFactory = \"jmsListenerContainerFactory\", destination = HerdJmsDestinationResolver.SQS_DESTINATION_SAMPLE_DATA_QUEUE) public", "return": "void", "body": "@JmsListener(id = HerdJmsDestinationResolver.SQS_DESTINATION_SAMPLE_DATA_QUEUE,\n        containerFactory = \"jmsListenerContainerFactory\",\n        destination = HerdJmsDestinationResolver.SQS_DESTINATION_SAMPLE_DATA_QUEUE)\n    public void processMessage(String payload, @Headers Map<Object, Object> allHeaders)\n    {\n        LOGGER.info(\"Message received from the JMS queue. jmsQueueName=\\\"{}\\\" jmsMessageHeaders=\\\"{}\\\" jmsMessagePayload={}\",\n            HerdJmsDestinationResolver.SQS_DESTINATION_SAMPLE_DATA_QUEUE, allHeaders, payload);\n\n        try\n        {\n            // Process messages coming from S3 bucket.\n            S3EventNotification s3EventNotification = S3EventNotification.parseJson(payload);\n            String objectKey = URLDecoder.decode(s3EventNotification.getRecords().get(0).getS3().getObject().getKey(), CharEncoding.UTF_8);\n            long fileSize = s3EventNotification.getRecords().get(0).getS3().getObject().getSizeAsLong();\n            // parse the objectKey, it should be in the format of namespace/businessObjectDefinitionName/fileName\n            String[] objectKeyArrays = objectKey.split(\"/\");\n            Assert.isTrue(objectKeyArrays.length == 3, String.format(\"S3 notification message %s is not in expected format\", objectKey));\n\n            String namespace = objectKeyArrays[0];\n            String businessObjectDefinitionName = objectKeyArrays[1];\n            String fileName = objectKeyArrays[2];\n            String path = namespace + \"/\" + businessObjectDefinitionName + \"/\";\n            BusinessObjectDefinitionSampleFileUpdateDto businessObjectDefinitionSampleFileUpdateDto =\n                    new BusinessObjectDefinitionSampleFileUpdateDto(path, fileName, fileSize);\n\n            String convertedNamespaece = convertS3KeyFormat(namespace);\n            String convertedBusinessObjectDefinitionName = convertS3KeyFormat(businessObjectDefinitionName);\n\n            BusinessObjectDefinitionKey businessObjectDefinitionKey =\n                    new BusinessObjectDefinitionKey(convertedNamespaece, convertedBusinessObjectDefinitionName);\n            try\n            {\n                businessObjectDefinitionService.updateBusinessObjectDefinitionEntitySampleFile(businessObjectDefinitionKey,\n                        businessObjectDefinitionSampleFileUpdateDto);\n            }\n            catch (ObjectNotFoundException ex)\n            {\n                LOGGER.info(\"Failed to find the business object definition, next try the original namespace and business oject defination name \" + ex);\n                // if Business object definition is not found, use the original name space and bdef name\n                businessObjectDefinitionKey = new BusinessObjectDefinitionKey(namespace, businessObjectDefinitionName);\n                businessObjectDefinitionService.updateBusinessObjectDefinitionEntitySampleFile(businessObjectDefinitionKey,\n                        businessObjectDefinitionSampleFileUpdateDto);\n            }\n        }\n        catch (RuntimeException | IOException e)\n        {\n            LOGGER.error(\"Failed to process message from the JMS queue. jmsQueueName=\\\"{}\\\" jmsMessagePayload={}\",\n                    HerdJmsDestinationResolver.SQS_DESTINATION_SAMPLE_DATA_QUEUE, payload, e);\n        }\n    }", "signature": "void processMessage(String payload, @Headers Map<Object, Object> allHeaders)", "full_signature": "@JmsListener(id = HerdJmsDestinationResolver.SQS_DESTINATION_SAMPLE_DATA_QUEUE, containerFactory = \"jmsListenerContainerFactory\", destination = HerdJmsDestinationResolver.SQS_DESTINATION_SAMPLE_DATA_QUEUE) public void processMessage(String payload, @Headers Map<Object, Object> allHeaders)", "class_method_signature": "SampleDataJmsMessageListener.processMessage(String payload, @Headers Map<Object, Object> allHeaders)", "testcase": false, "constructor": false, "invocations": ["info", "parseJson", "decode", "getKey", "getObject", "getS3", "get", "getRecords", "getSizeAsLong", "getObject", "getS3", "get", "getRecords", "split", "isTrue", "format", "convertS3KeyFormat", "convertS3KeyFormat", "updateBusinessObjectDefinitionEntitySampleFile", "info", "updateBusinessObjectDefinitionEntitySampleFile", "error"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}