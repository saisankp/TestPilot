{"test_class": {"identifier": "SplitBatchOpTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/batch/dataproc/SplitBatchOpTest.java"}, "test_case": {"identifier": "split", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void split() throws Exception {\n        BatchOperator data = Iris.getBatchData();\n        data = new AppendIdBatchOp().linkFrom(data);\n        BatchOperator spliter = new SplitBatchOp().setFraction(0.1);\n        BatchOperator left = spliter.linkFrom(data);\n        BatchOperator right = spliter.getSideOutput(0);\n        Assert.assertEquals(left.count(), 15);\n        Assert.assertEquals(right.count(), 150 - 15);\n        Assert.assertEquals(new UnionBatchOp().linkFrom(left, right).count(), 150);\n    }", "signature": "void split()", "full_signature": "@Test public void split()", "class_method_signature": "SplitBatchOpTest.split()", "testcase": true, "constructor": false, "invocations": ["getBatchData", "linkFrom", "setFraction", "linkFrom", "getSideOutput", "assertEquals", "count", "assertEquals", "count", "assertEquals", "count", "linkFrom"]}, "focal_class": {"identifier": "SplitBatchOp", "superclass": "extends BatchOperator<SplitBatchOp>", "interfaces": "implements SplitParams<SplitBatchOp>", "fields": [], "methods": [{"identifier": "SplitBatchOp", "parameters": "()", "modifiers": "public", "return": "", "signature": " SplitBatchOp()", "full_signature": "public  SplitBatchOp()", "class_method_signature": "SplitBatchOp.SplitBatchOp()", "testcase": false, "constructor": true}, {"identifier": "SplitBatchOp", "parameters": "(Params params)", "modifiers": "public", "return": "", "signature": " SplitBatchOp(Params params)", "full_signature": "public  SplitBatchOp(Params params)", "class_method_signature": "SplitBatchOp.SplitBatchOp(Params params)", "testcase": false, "constructor": true}, {"identifier": "SplitBatchOp", "parameters": "(double fraction)", "modifiers": "public", "return": "", "signature": " SplitBatchOp(double fraction)", "full_signature": "public  SplitBatchOp(double fraction)", "class_method_signature": "SplitBatchOp.SplitBatchOp(double fraction)", "testcase": false, "constructor": true}, {"identifier": "linkFrom", "parameters": "(BatchOperator<?>... inputs)", "modifiers": "@Override public", "return": "SplitBatchOp", "signature": "SplitBatchOp linkFrom(BatchOperator<?>... inputs)", "full_signature": "@Override public SplitBatchOp linkFrom(BatchOperator<?>... inputs)", "class_method_signature": "SplitBatchOp.linkFrom(BatchOperator<?>... inputs)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/batch/dataproc/SplitBatchOp.java"}, "focal_method": {"identifier": "linkFrom", "parameters": "(BatchOperator<?>... inputs)", "modifiers": "@Override public", "return": "SplitBatchOp", "body": "@Override\n    public SplitBatchOp linkFrom(BatchOperator<?>... inputs) {\n        BatchOperator<?> in = checkAndGetFirst(inputs);\n        final double fraction = getFraction();\n        if (fraction < 0. || fraction > 1.0) {\n            throw new RuntimeException(\"invalid fraction \" + fraction);\n        }\n\n        DataSet<Row> rows = in.getDataSet();\n\n        DataSet<Tuple2<Integer, Long>> countsPerPartition = DataSetUtils.countElementsPerPartition(rows);\n        DataSet<long[]> numPickedPerPartition = countsPerPartition\n            .mapPartition(new CountInPartition(fraction))\n            .setParallelism(1)\n            .name(\"decide_count_of_each_partition\");\n\n        DataSet<Row> out = rows\n            .mapPartition(new PickInPartition())\n            .withBroadcastSet(numPickedPerPartition, \"counts\")\n            .name(\"pick_in_each_partition\");\n\n        this.setOutput(out, in.getSchema());\n        this.setSideOutputTables(new Table[]{in.getOutputTable().minusAll(this.getOutputTable())});\n        return this;\n    }", "signature": "SplitBatchOp linkFrom(BatchOperator<?>... inputs)", "full_signature": "@Override public SplitBatchOp linkFrom(BatchOperator<?>... inputs)", "class_method_signature": "SplitBatchOp.linkFrom(BatchOperator<?>... inputs)", "testcase": false, "constructor": false, "invocations": ["checkAndGetFirst", "getFraction", "getDataSet", "countElementsPerPartition", "name", "setParallelism", "mapPartition", "name", "withBroadcastSet", "mapPartition", "setOutput", "getSchema", "setSideOutputTables", "minusAll", "getOutputTable", "getOutputTable"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}