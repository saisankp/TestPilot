{"test_class": {"identifier": "OpearPackageMojoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File testOutBaseDir = new File(\"target/test-out/OpearPackageMojoTest\");", "modifier": "private final", "type": "File", "declarator": "testOutBaseDir = new File(\"target/test-out/OpearPackageMojoTest\")", "var_name": "testOutBaseDir"}, {"original_string": "private final File srcDir = new File(\"src/test/resources/OpearPackageMojoTest\");", "modifier": "private final", "type": "File", "declarator": "srcDir = new File(\"src/test/resources/OpearPackageMojoTest\")", "var_name": "srcDir"}], "file": "maven/src/test/java/net/adamcin/oakpal/maven/mojo/OpearPackageMojoTest.java"}, "test_case": {"identifier": "testAttachArtifact", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAttachArtifact() throws Exception {\n        final File testOutDir = new File(testOutBaseDir, \"testAttachArtifact\");\n        FileUtils.deleteDirectory(testOutDir);\n        testOutDir.mkdirs();\n        final OpearPackageMojo mojo = newMojo();\n        final MavenProject project = mock(MavenProject.class);\n        mojo.project = project;\n        final String expectGroupId = \"com.example.artifacts\";\n        when(project.getGroupId()).thenReturn(expectGroupId);\n        final String expectArtifactId = \"sample-project\";\n        when(project.getArtifactId()).thenReturn(expectArtifactId);\n        final String expectVersion = \"0.314159\";\n        when(project.getVersion()).thenReturn(expectVersion);\n        when(project.getPackaging()).thenReturn(\"jar\");\n\n        final ArtifactHandlerManager artifactHandlerManager = mock(ArtifactHandlerManager.class);\n        mojo.artifactHandlerManager = artifactHandlerManager;\n        final ArtifactHandler opearHandler = mock(ArtifactHandler.class);\n        when(artifactHandlerManager.getArtifactHandler(OPEAR)).thenReturn(opearHandler);\n\n        final CompletableFuture<Artifact> attachSlot = new CompletableFuture<>();\n        doAnswer(call -> attachSlot.complete(call.getArgument(0, Artifact.class)))\n                .when(project).addAttachedArtifact(any(Artifact.class));\n\n        final File finalFile = new File(testOutDir, \"finalFile.opear\");\n        final Artifact jarAttached = mojo.attachArtifact(finalFile);\n        assertSame(\"same attachment\", jarAttached, attachSlot.getNow(null));\n        assertSame(\"same file\", finalFile, jarAttached.getFile());\n        assertSame(\"same handler\", opearHandler, jarAttached.getArtifactHandler());\n        assertEquals(\"same groupId\", project.getGroupId(), jarAttached.getGroupId());\n        assertEquals(\"same artifactId\", project.getArtifactId(), jarAttached.getArtifactId());\n        assertEquals(\"same version\", project.getVersion(), jarAttached.getVersion());\n        assertEquals(\"same type\", OPEAR, jarAttached.getType());\n\n        final Artifact projectArtifact = mock(Artifact.class);\n        when(project.getArtifact()).thenReturn(projectArtifact);\n        final CompletableFuture<File> fileSlot = new CompletableFuture<>();\n        doAnswer(call -> fileSlot.complete(call.getArgument(0, File.class)))\n                .when(projectArtifact).setFile(any(File.class));\n        final CompletableFuture<ArtifactHandler> handlerSlot = new CompletableFuture<>();\n        doAnswer(call -> handlerSlot.complete(call.getArgument(0, ArtifactHandler.class)))\n                .when(projectArtifact).setArtifactHandler(any(ArtifactHandler.class));\n\n        when(project.getPackaging()).thenReturn(OPEAR);\n        final Artifact opearAttached = mojo.attachArtifact(finalFile);\n        assertSame(\"same project artifact\", projectArtifact, opearAttached);\n        assertSame(\"same artifact handler\", opearHandler, handlerSlot.getNow(null));\n    }", "signature": "void testAttachArtifact()", "full_signature": "@Test public void testAttachArtifact()", "class_method_signature": "OpearPackageMojoTest.testAttachArtifact()", "testcase": true, "constructor": false, "invocations": ["deleteDirectory", "mkdirs", "newMojo", "mock", "thenReturn", "when", "getGroupId", "thenReturn", "when", "getArtifactId", "thenReturn", "when", "getVersion", "thenReturn", "when", "getPackaging", "mock", "mock", "thenReturn", "when", "getArtifactHandler", "addAttachedArtifact", "when", "doAnswer", "complete", "getArgument", "any", "attachArtifact", "assertSame", "getNow", "assertSame", "getFile", "assertSame", "getArtifactHandler", "assertEquals", "getGroupId", "getGroupId", "assertEquals", "getArtifactId", "getArtifactId", "assertEquals", "getVersion", "getVersion", "assertEquals", "getType", "mock", "thenReturn", "when", "getArtifact", "setFile", "when", "doAnswer", "complete", "getArgument", "any", "setArtifactHandler", "when", "doAnswer", "complete", "getArgument", "any", "thenReturn", "when", "getPackaging", "attachArtifact", "assertSame", "assertSame", "getNow"]}, "focal_class": {"identifier": "OpearPackageMojo", "superclass": "extends AbstractCommonMojo", "interfaces": "", "fields": [{"original_string": "public static final String OPEAR = \"opear\";", "modifier": "public static final", "type": "String", "declarator": "OPEAR = \"opear\"", "var_name": "OPEAR"}, {"original_string": "static final String OAKPAL_GROUP_ID = \"net.adamcin.oakpal\";", "modifier": "static final", "type": "String", "declarator": "OAKPAL_GROUP_ID = \"net.adamcin.oakpal\"", "var_name": "OAKPAL_GROUP_ID"}, {"original_string": "static final String OAKPAL_API_ARTIFACT_ID = \"oakpal-api\";", "modifier": "static final", "type": "String", "declarator": "OAKPAL_API_ARTIFACT_ID = \"oakpal-api\"", "var_name": "OAKPAL_API_ARTIFACT_ID"}, {"original_string": "static final String OAKPAL_CORE_ARTIFACT_ID = \"oakpal-core\";", "modifier": "static final", "type": "String", "declarator": "OAKPAL_CORE_ARTIFACT_ID = \"oakpal-core\"", "var_name": "OAKPAL_CORE_ARTIFACT_ID"}, {"original_string": "private static final Predicate<Artifact> TEST_IS_OAKPAL_API =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_API_ARTIFACT_ID::equals));", "modifier": "private static final", "type": "Predicate<Artifact>", "declarator": "TEST_IS_OAKPAL_API =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_API_ARTIFACT_ID::equals))", "var_name": "TEST_IS_OAKPAL_API"}, {"original_string": "private static final Predicate<Artifact> TEST_IS_OAKPAL_CORE =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_CORE_ARTIFACT_ID::equals));", "modifier": "private static final", "type": "Predicate<Artifact>", "declarator": "TEST_IS_OAKPAL_CORE =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_CORE_ARTIFACT_ID::equals))", "var_name": "TEST_IS_OAKPAL_CORE"}, {"original_string": "@Component\n    ArtifactHandlerManager artifactHandlerManager;", "modifier": "@Component", "type": "ArtifactHandlerManager", "declarator": "artifactHandlerManager", "var_name": "artifactHandlerManager"}, {"original_string": "@Parameter(defaultValue = \"${project.build.finalName}\", required = true)\n    String finalName;", "modifier": "@Parameter(defaultValue = \"${project.build.finalName}\", required = true)", "type": "String", "declarator": "finalName", "var_name": "finalName"}, {"original_string": "@Parameter(defaultValue = \"${project.build.directory}/oakpal-plugin/opear-plans/plan.json\", required = true)\n    File planFile;", "modifier": "@Parameter(defaultValue = \"${project.build.directory}/oakpal-plugin/opear-plans/plan.json\", required = true)", "type": "File", "declarator": "planFile", "var_name": "planFile"}, {"original_string": "@Parameter\n    List<File> additionalPlans = new ArrayList<>();", "modifier": "@Parameter", "type": "List<File>", "declarator": "additionalPlans = new ArrayList<>()", "var_name": "additionalPlans"}, {"original_string": "@Parameter(defaultValue = \"${project.build.directory}\", required = true)\n    File outputDirectory;", "modifier": "@Parameter(defaultValue = \"${project.build.directory}\", required = true)", "type": "File", "declarator": "outputDirectory", "var_name": "outputDirectory"}], "methods": [{"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "OpearPackageMojo.execute()", "testcase": false, "constructor": false}, {"identifier": "attachArtifact", "parameters": "(final @NotNull File finalFile)", "modifiers": "", "return": "Artifact", "signature": "Artifact attachArtifact(final @NotNull File finalFile)", "full_signature": " Artifact attachArtifact(final @NotNull File finalFile)", "class_method_signature": "OpearPackageMojo.attachArtifact(final @NotNull File finalFile)", "testcase": false, "constructor": false}, {"identifier": "getOwnVersion", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getOwnVersion()", "full_signature": " String getOwnVersion()", "class_method_signature": "OpearPackageMojo.getOwnVersion()", "testcase": false, "constructor": false}, {"identifier": "getBundleSymbolicName", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getBundleSymbolicName()", "full_signature": " String getBundleSymbolicName()", "class_method_signature": "OpearPackageMojo.getBundleSymbolicName()", "testcase": false, "constructor": false}, {"identifier": "getOakpalCoreVersion", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getOakpalCoreVersion()", "full_signature": " String getOakpalCoreVersion()", "class_method_signature": "OpearPackageMojo.getOakpalCoreVersion()", "testcase": false, "constructor": false}, {"identifier": "getEmbeddedLibraries", "parameters": "()", "modifiers": "", "return": "List<File>", "signature": "List<File> getEmbeddedLibraries()", "full_signature": " List<File> getEmbeddedLibraries()", "class_method_signature": "OpearPackageMojo.getEmbeddedLibraries()", "testcase": false, "constructor": false}, {"identifier": "assembleOpear", "parameters": "()", "modifiers": "", "return": "File", "signature": "File assembleOpear()", "full_signature": " File assembleOpear()", "class_method_signature": "OpearPackageMojo.assembleOpear()", "testcase": false, "constructor": false}, {"identifier": "mapDestFileNames", "parameters": "(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "modifiers": "static", "return": "Map<String, T>", "signature": "Map<String, T> mapDestFileNames(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "full_signature": "static Map<String, T> mapDestFileNames(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "class_method_signature": "OpearPackageMojo.mapDestFileNames(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "testcase": false, "constructor": false}, {"identifier": "shrinkWrapPlans", "parameters": "(final @NotNull File toDir)", "modifiers": "", "return": "Result<List<String>>", "signature": "Result<List<String>> shrinkWrapPlans(final @NotNull File toDir)", "full_signature": " Result<List<String>> shrinkWrapPlans(final @NotNull File toDir)", "class_method_signature": "OpearPackageMojo.shrinkWrapPlans(final @NotNull File toDir)", "testcase": false, "constructor": false}, {"identifier": "rewritePlan", "parameters": "(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "modifiers": "static", "return": "OakpalPlan", "signature": "OakpalPlan rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "full_signature": "static OakpalPlan rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "class_method_signature": "OpearPackageMojo.rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "testcase": false, "constructor": false}, {"identifier": "copyPlans", "parameters": "(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "modifiers": "static", "return": "Result<Map<String, OakpalPlan>>", "signature": "Result<Map<String, OakpalPlan>> copyPlans(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "full_signature": "static Result<Map<String, OakpalPlan>> copyPlans(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "class_method_signature": "OpearPackageMojo.copyPlans(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "testcase": false, "constructor": false}, {"identifier": "copyUrlStreams", "parameters": "(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "modifiers": "static", "return": "Result<Map<URL, String>>", "signature": "Result<Map<URL, String>> copyUrlStreams(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "full_signature": "static Result<Map<URL, String>> copyUrlStreams(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "class_method_signature": "OpearPackageMojo.copyUrlStreams(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "testcase": false, "constructor": false}], "file": "maven/src/main/java/net/adamcin/oakpal/maven/mojo/OpearPackageMojo.java"}, "focal_method": {"identifier": "attachArtifact", "parameters": "(final @NotNull File finalFile)", "modifiers": "", "return": "Artifact", "body": "Artifact attachArtifact(final @NotNull File finalFile) {\n        final Artifact projectArtifact = this.project.getArtifact();\n        final ArtifactHandler opearHandler = this.artifactHandlerManager.getArtifactHandler(OPEAR);\n        if (OPEAR.equals(project.getPackaging())) {\n            // set project artifact\n            projectArtifact.setFile(finalFile);\n            projectArtifact.setArtifactHandler(opearHandler);\n            return projectArtifact;\n        } else {\n            // attach artifact\n            Artifact attachment = new DefaultArtifact(\n                    project.getGroupId(),\n                    project.getArtifactId(),\n                    project.getVersion(),\n                    null,\n                    OPEAR,\n                    null,\n                    opearHandler);\n            attachment.setFile(finalFile);\n            project.addAttachedArtifact(attachment);\n            return attachment;\n        }\n    }", "signature": "Artifact attachArtifact(final @NotNull File finalFile)", "full_signature": " Artifact attachArtifact(final @NotNull File finalFile)", "class_method_signature": "OpearPackageMojo.attachArtifact(final @NotNull File finalFile)", "testcase": false, "constructor": false, "invocations": ["getArtifact", "getArtifactHandler", "equals", "getPackaging", "setFile", "setArtifactHandler", "getGroupId", "getArtifactId", "getVersion", "setFile", "addAttachedArtifact"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}