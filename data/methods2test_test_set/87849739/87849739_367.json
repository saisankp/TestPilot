{"test_class": {"identifier": "DroppedTest", "superclass": "", "interfaces": "", "fields": [], "file": "services/connectivity/messaging/src/test/java/org/eclipse/ditto/services/connectivity/messaging/DroppedTest.java"}, "test_case": {"identifier": "monitorAndAcknowledge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void monitorAndAcknowledge() {\n        final ConnectionMonitor droppedMonitor = Mockito.mock(ConnectionMonitor.class);\n        final OutboundSignal.Mapped mappedOutboundSignal = Mockito.mock(OutboundSignal.Mapped.class);\n        final Signal source = Mockito.mock(Signal.class);\n        Mockito.when(mappedOutboundSignal.getSource()).thenReturn(source);\n        final GenericTarget genericTarget = Mockito.mock(GenericTarget.class);\n        final String address = \"742 Evergreen Terrace\";\n        Mockito.when(genericTarget.getAddress()).thenReturn(address);\n        final SendingContext sendingContext = SendingContext.newBuilder()\n                .mappedOutboundSignal(mappedOutboundSignal)\n                .externalMessage(Mockito.mock(ExternalMessage.class))\n                .genericTarget(genericTarget)\n                .publishedMonitor(Mockito.mock(ConnectionMonitor.class))\n                .acknowledgedMonitor(Mockito.mock(ConnectionMonitor.class))\n                .droppedMonitor(droppedMonitor)\n                .autoAckTarget(Mockito.mock(Target.class))\n                .build();\n\n        final Dropped underTest = new Dropped(sendingContext);\n\n        final Optional<CompletionStage<CommandResponse>> result = underTest.monitorAndAcknowledge(null);\n\n        assertThat(result).isEmpty();\n        Mockito.verify(droppedMonitor).success(source, \"Signal dropped, target address unresolved: {0}\", address);\n    }", "signature": "void monitorAndAcknowledge()", "full_signature": "@Test public void monitorAndAcknowledge()", "class_method_signature": "DroppedTest.monitorAndAcknowledge()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "thenReturn", "when", "getSource", "mock", "thenReturn", "when", "getAddress", "build", "autoAckTarget", "droppedMonitor", "acknowledgedMonitor", "publishedMonitor", "genericTarget", "externalMessage", "mappedOutboundSignal", "newBuilder", "mock", "mock", "mock", "mock", "monitorAndAcknowledge", "isEmpty", "assertThat", "success", "verify"]}, "focal_class": {"identifier": "Dropped", "superclass": "", "interfaces": "implements SendingOrDropped", "fields": [{"original_string": "private final SendingContext sendingContext;", "modifier": "private final", "type": "SendingContext", "declarator": "sendingContext", "var_name": "sendingContext"}], "methods": [{"identifier": "Dropped", "parameters": "(final SendingContext sendingContext)", "modifiers": "", "return": "", "signature": " Dropped(final SendingContext sendingContext)", "full_signature": "  Dropped(final SendingContext sendingContext)", "class_method_signature": "Dropped.Dropped(final SendingContext sendingContext)", "testcase": false, "constructor": true}, {"identifier": "monitorAndAcknowledge", "parameters": "(\n            final ExceptionToAcknowledgementConverter exceptionToAcknowledgementConverter)", "modifiers": "@SuppressWarnings({\"rawtypes\", \"java:S3740\"}) @Override public", "return": "Optional<CompletionStage<CommandResponse>>", "signature": "Optional<CompletionStage<CommandResponse>> monitorAndAcknowledge(\n            final ExceptionToAcknowledgementConverter exceptionToAcknowledgementConverter)", "full_signature": "@SuppressWarnings({\"rawtypes\", \"java:S3740\"}) @Override public Optional<CompletionStage<CommandResponse>> monitorAndAcknowledge(\n            final ExceptionToAcknowledgementConverter exceptionToAcknowledgementConverter)", "class_method_signature": "Dropped.monitorAndAcknowledge(\n            final ExceptionToAcknowledgementConverter exceptionToAcknowledgementConverter)", "testcase": false, "constructor": false}], "file": "services/connectivity/messaging/src/main/java/org/eclipse/ditto/services/connectivity/messaging/Dropped.java"}, "focal_method": {"identifier": "monitorAndAcknowledge", "parameters": "(\n            final ExceptionToAcknowledgementConverter exceptionToAcknowledgementConverter)", "modifiers": "@SuppressWarnings({\"rawtypes\", \"java:S3740\"}) @Override public", "return": "Optional<CompletionStage<CommandResponse>>", "body": "@SuppressWarnings({\"rawtypes\", \"java:S3740\"})\n    @Override\n    public Optional<CompletionStage<CommandResponse>> monitorAndAcknowledge(\n            final ExceptionToAcknowledgementConverter exceptionToAcknowledgementConverter) {\n\n        final ConnectionMonitor droppedMonitor = sendingContext.getDroppedMonitor();\n        final OutboundSignal.Mapped outboundSignal = sendingContext.getMappedOutboundSignal();\n        final GenericTarget genericTarget = sendingContext.getGenericTarget();\n        droppedMonitor.success(outboundSignal.getSource(), \"Signal dropped, target address unresolved: {0}\",\n                genericTarget.getAddress());\n\n        return Optional.empty();\n    }", "signature": "Optional<CompletionStage<CommandResponse>> monitorAndAcknowledge(\n            final ExceptionToAcknowledgementConverter exceptionToAcknowledgementConverter)", "full_signature": "@SuppressWarnings({\"rawtypes\", \"java:S3740\"}) @Override public Optional<CompletionStage<CommandResponse>> monitorAndAcknowledge(\n            final ExceptionToAcknowledgementConverter exceptionToAcknowledgementConverter)", "class_method_signature": "Dropped.monitorAndAcknowledge(\n            final ExceptionToAcknowledgementConverter exceptionToAcknowledgementConverter)", "testcase": false, "constructor": false, "invocations": ["getDroppedMonitor", "getMappedOutboundSignal", "getGenericTarget", "success", "getSource", "getAddress", "empty"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}