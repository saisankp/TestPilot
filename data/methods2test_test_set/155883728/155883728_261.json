{"test_class": {"identifier": "LocatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/LocatorTest.java"}, "test_case": {"identifier": "testLoadProgressCheck", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadProgressCheck() throws Exception {\n\n        assertNotNull(\"echo should load by class name\",\n                Locator.loadProgressCheck(Echo.class.getName()));\n        assertNotNull(\"echo should load by class name, with config\",\n                Locator.loadProgressCheck(Echo.class.getName(), obj().get()));\n        assertNotNull(\"echo should load by class name, with config, with cl\",\n                Locator.loadProgressCheck(Echo.class.getName(), obj().get(), getClass().getClassLoader()));\n\n        assertNotNull(\"paths should load by factory class name, with config, with cl\",\n                Locator.loadProgressCheck(Paths.class.getName(), obj().get(), getClass().getClassLoader()));\n\n        assertNotNull(\"simpleHandler.js should load by resource name, with config, with cl\",\n                Locator.loadProgressCheck(\"simpleHandler.js\", obj().get(), getClass().getClassLoader()));\n\n        assertNotNull(\"META-INF/../simpleHandler.js should load by resource name, with config, with cl\",\n                Locator.loadProgressCheck(\"META-INF/../simpleHandler.js\", obj().get(), getClass().getClassLoader()));\n\n        boolean notACheckThrew = false;\n        try {\n            Locator.loadProgressCheck(NotACheck.class.getName());\n        } catch (final Exception e) {\n            notACheckThrew = true;\n        }\n\n        assertTrue(\"locator should throw when attempting to load NotACheck\", notACheckThrew);\n\n        boolean notAClassThrew = false;\n        try {\n            Locator.loadProgressCheck(\"com.example.NotARealClassName\");\n        } catch (final Exception e) {\n            notAClassThrew = true;\n            assertTrue(\"locator should throw ClassNotFoundException when impl is not a real class name and not a script resource.\",\n                    e instanceof ClassNotFoundException);\n        }\n\n        assertTrue(\"locator should throw when attempting to load NotARealClass\", notAClassThrew);\n\n        boolean notAScriptThrew = false;\n        try {\n            Locator.loadProgressCheck(\"scripts/notAScript.js\");\n        } catch (final Exception e) {\n            notAScriptThrew = true;\n        }\n\n        assertTrue(\"locator should throw when attempting to load a non-existent script\", notAScriptThrew);\n    }", "signature": "void testLoadProgressCheck()", "full_signature": "@Test public void testLoadProgressCheck()", "class_method_signature": "LocatorTest.testLoadProgressCheck()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "loadProgressCheck", "getName", "assertNotNull", "loadProgressCheck", "getName", "get", "obj", "assertNotNull", "loadProgressCheck", "getName", "get", "obj", "getClassLoader", "getClass", "assertNotNull", "loadProgressCheck", "getName", "get", "obj", "getClassLoader", "getClass", "assertNotNull", "loadProgressCheck", "get", "obj", "getClassLoader", "getClass", "assertNotNull", "loadProgressCheck", "get", "obj", "getClassLoader", "getClass", "loadProgressCheck", "getName", "assertTrue", "loadProgressCheck", "assertTrue", "assertTrue", "loadProgressCheck", "assertTrue"]}, "focal_class": {"identifier": "Locator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "Locator", "parameters": "()", "modifiers": "private", "return": "", "signature": " Locator()", "full_signature": "private  Locator()", "class_method_signature": "Locator.Locator()", "testcase": false, "constructor": true}, {"identifier": "loadProgressCheck", "parameters": "(final String impl)", "modifiers": "public static", "return": "ProgressCheck", "signature": "ProgressCheck loadProgressCheck(final String impl)", "full_signature": "public static ProgressCheck loadProgressCheck(final String impl)", "class_method_signature": "Locator.loadProgressCheck(final String impl)", "testcase": false, "constructor": false}, {"identifier": "loadProgressCheck", "parameters": "(final String impl, final JsonObject config)", "modifiers": "public static", "return": "ProgressCheck", "signature": "ProgressCheck loadProgressCheck(final String impl, final JsonObject config)", "full_signature": "public static ProgressCheck loadProgressCheck(final String impl, final JsonObject config)", "class_method_signature": "Locator.loadProgressCheck(final String impl, final JsonObject config)", "testcase": false, "constructor": false}, {"identifier": "loadProgressCheck", "parameters": "(final String impl, final JsonObject config,\n                                                  final ClassLoader classLoader)", "modifiers": "public static", "return": "ProgressCheck", "signature": "ProgressCheck loadProgressCheck(final String impl, final JsonObject config,\n                                                  final ClassLoader classLoader)", "full_signature": "public static ProgressCheck loadProgressCheck(final String impl, final JsonObject config,\n                                                  final ClassLoader classLoader)", "class_method_signature": "Locator.loadProgressCheck(final String impl, final JsonObject config,\n                                                  final ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "wrapWithAlias", "parameters": "(final ProgressCheck progressCheck, final String alias)", "modifiers": "public static", "return": "ProgressCheck", "signature": "ProgressCheck wrapWithAlias(final ProgressCheck progressCheck, final String alias)", "full_signature": "public static ProgressCheck wrapWithAlias(final ProgressCheck progressCheck, final String alias)", "class_method_signature": "Locator.wrapWithAlias(final ProgressCheck progressCheck, final String alias)", "testcase": false, "constructor": false}, {"identifier": "loadFromCheckSpecs", "parameters": "(final List<CheckSpec> checkSpecs)", "modifiers": "public static", "return": "List<ProgressCheck>", "signature": "List<ProgressCheck> loadFromCheckSpecs(final List<CheckSpec> checkSpecs)", "full_signature": "public static List<ProgressCheck> loadFromCheckSpecs(final List<CheckSpec> checkSpecs)", "class_method_signature": "Locator.loadFromCheckSpecs(final List<CheckSpec> checkSpecs)", "testcase": false, "constructor": false}, {"identifier": "loadFromCheckSpecs", "parameters": "(final List<CheckSpec> checkSpecs,\n                                                         final ClassLoader checkLoader)", "modifiers": "public static", "return": "List<ProgressCheck>", "signature": "List<ProgressCheck> loadFromCheckSpecs(final List<CheckSpec> checkSpecs,\n                                                         final ClassLoader checkLoader)", "full_signature": "public static List<ProgressCheck> loadFromCheckSpecs(final List<CheckSpec> checkSpecs,\n                                                         final ClassLoader checkLoader)", "class_method_signature": "Locator.loadFromCheckSpecs(final List<CheckSpec> checkSpecs,\n                                                         final ClassLoader checkLoader)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/Locator.java"}, "focal_method": {"identifier": "loadProgressCheck", "parameters": "(final String impl)", "modifiers": "public static", "return": "ProgressCheck", "body": "public static ProgressCheck loadProgressCheck(final String impl) throws Exception {\n        return loadProgressCheck(impl, null);\n    }", "signature": "ProgressCheck loadProgressCheck(final String impl)", "full_signature": "public static ProgressCheck loadProgressCheck(final String impl)", "class_method_signature": "Locator.loadProgressCheck(final String impl)", "testcase": false, "constructor": false, "invocations": ["loadProgressCheck"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}