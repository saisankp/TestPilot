{"test_class": {"identifier": "TDigestTest", "superclass": "extends AbstractTest", "interfaces": "", "fields": [{"original_string": "private static final Integer lock = 3;", "modifier": "private static final", "type": "Integer", "declarator": "lock = 3", "var_name": "lock"}, {"original_string": "private static PrintWriter sizeDump = null;", "modifier": "private static", "type": "PrintWriter", "declarator": "sizeDump = null", "var_name": "sizeDump"}, {"original_string": "private static PrintWriter errorDump = null;", "modifier": "private static", "type": "PrintWriter", "declarator": "errorDump = null", "var_name": "errorDump"}, {"original_string": "private static PrintWriter deviationDump = null;", "modifier": "private static", "type": "PrintWriter", "declarator": "deviationDump = null", "var_name": "deviationDump"}, {"original_string": "private static String digestName;", "modifier": "private static", "type": "String", "declarator": "digestName", "var_name": "digestName"}], "file": "core/src/test/java/com/tdunning/math/stats/TDigestTest.java"}, "test_case": {"identifier": "testNaN", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNaN() {\n        final TDigest digest = factory().create();\n        Random gen = getRandom();\n        final int iters = gen.nextInt(100);\n        for (int i = 0; i < iters; ++i) {\n            digest.add(gen.nextDouble(), 1 + gen.nextInt(10));\n        }\n        try {\n            // both versions should fail\n            if (gen.nextBoolean()) {\n                digest.add(Double.NaN);\n            } else {\n                digest.add(Double.NaN, 1);\n            }\n            fail(\"NaN should be an illegal argument\");\n        } catch (IllegalArgumentException e) {\n            // expected\n        }\n    }", "signature": "void testNaN()", "full_signature": "@Test public void testNaN()", "class_method_signature": "TDigestTest.testNaN()", "testcase": true, "constructor": false, "invocations": ["create", "factory", "getRandom", "nextInt", "add", "nextDouble", "nextInt", "nextBoolean", "add", "add", "fail"]}, "focal_class": {"identifier": "TDigest", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "protected ScaleFunction scale = ScaleFunction.K_2;", "modifier": "protected", "type": "ScaleFunction", "declarator": "scale = ScaleFunction.K_2", "var_name": "scale"}, {"original_string": "double min = Double.POSITIVE_INFINITY;", "modifier": "", "type": "double", "declarator": "min = Double.POSITIVE_INFINITY", "var_name": "min"}, {"original_string": "double max = Double.NEGATIVE_INFINITY;", "modifier": "", "type": "double", "declarator": "max = Double.NEGATIVE_INFINITY", "var_name": "max"}], "methods": [{"identifier": "createMergingDigest", "parameters": "(double compression)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "TDigest", "signature": "TDigest createMergingDigest(double compression)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static TDigest createMergingDigest(double compression)", "class_method_signature": "TDigest.createMergingDigest(double compression)", "testcase": false, "constructor": false}, {"identifier": "createAvlTreeDigest", "parameters": "(double compression)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public static", "return": "TDigest", "signature": "TDigest createAvlTreeDigest(double compression)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public static TDigest createAvlTreeDigest(double compression)", "class_method_signature": "TDigest.createAvlTreeDigest(double compression)", "testcase": false, "constructor": false}, {"identifier": "createDigest", "parameters": "(double compression)", "modifiers": "@SuppressWarnings({\"unused\", \"WeakerAccess\", \"SameParameterValue\"}) public static", "return": "TDigest", "signature": "TDigest createDigest(double compression)", "full_signature": "@SuppressWarnings({\"unused\", \"WeakerAccess\", \"SameParameterValue\"}) public static TDigest createDigest(double compression)", "class_method_signature": "TDigest.createDigest(double compression)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(double x, int w)", "modifiers": "public abstract", "return": "void", "signature": "void add(double x, int w)", "full_signature": "public abstract void add(double x, int w)", "class_method_signature": "TDigest.add(double x, int w)", "testcase": false, "constructor": false}, {"identifier": "checkValue", "parameters": "(double x)", "modifiers": "final", "return": "void", "signature": "void checkValue(double x)", "full_signature": "final void checkValue(double x)", "class_method_signature": "TDigest.checkValue(double x)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(List<? extends TDigest> others)", "modifiers": "public abstract", "return": "void", "signature": "void add(List<? extends TDigest> others)", "full_signature": "public abstract void add(List<? extends TDigest> others)", "class_method_signature": "TDigest.add(List<? extends TDigest> others)", "testcase": false, "constructor": false}, {"identifier": "compress", "parameters": "()", "modifiers": "public abstract", "return": "void", "signature": "void compress()", "full_signature": "public abstract void compress()", "class_method_signature": "TDigest.compress()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public abstract", "return": "long", "signature": "long size()", "full_signature": "public abstract long size()", "class_method_signature": "TDigest.size()", "testcase": false, "constructor": false}, {"identifier": "cdf", "parameters": "(double x)", "modifiers": "public abstract", "return": "double", "signature": "double cdf(double x)", "full_signature": "public abstract double cdf(double x)", "class_method_signature": "TDigest.cdf(double x)", "testcase": false, "constructor": false}, {"identifier": "quantile", "parameters": "(double q)", "modifiers": "public abstract", "return": "double", "signature": "double quantile(double q)", "full_signature": "public abstract double quantile(double q)", "class_method_signature": "TDigest.quantile(double q)", "testcase": false, "constructor": false}, {"identifier": "centroids", "parameters": "()", "modifiers": "public abstract", "return": "Collection<Centroid>", "signature": "Collection<Centroid> centroids()", "full_signature": "public abstract Collection<Centroid> centroids()", "class_method_signature": "TDigest.centroids()", "testcase": false, "constructor": false}, {"identifier": "compression", "parameters": "()", "modifiers": "public abstract", "return": "double", "signature": "double compression()", "full_signature": "public abstract double compression()", "class_method_signature": "TDigest.compression()", "testcase": false, "constructor": false}, {"identifier": "byteSize", "parameters": "()", "modifiers": "public abstract", "return": "int", "signature": "int byteSize()", "full_signature": "public abstract int byteSize()", "class_method_signature": "TDigest.byteSize()", "testcase": false, "constructor": false}, {"identifier": "smallByteSize", "parameters": "()", "modifiers": "public abstract", "return": "int", "signature": "int smallByteSize()", "full_signature": "public abstract int smallByteSize()", "class_method_signature": "TDigest.smallByteSize()", "testcase": false, "constructor": false}, {"identifier": "setScaleFunction", "parameters": "(ScaleFunction scaleFunction)", "modifiers": "public", "return": "void", "signature": "void setScaleFunction(ScaleFunction scaleFunction)", "full_signature": "public void setScaleFunction(ScaleFunction scaleFunction)", "class_method_signature": "TDigest.setScaleFunction(ScaleFunction scaleFunction)", "testcase": false, "constructor": false}, {"identifier": "asBytes", "parameters": "(ByteBuffer buf)", "modifiers": "public abstract", "return": "void", "signature": "void asBytes(ByteBuffer buf)", "full_signature": "public abstract void asBytes(ByteBuffer buf)", "class_method_signature": "TDigest.asBytes(ByteBuffer buf)", "testcase": false, "constructor": false}, {"identifier": "asSmallBytes", "parameters": "(ByteBuffer buf)", "modifiers": "public abstract", "return": "void", "signature": "void asSmallBytes(ByteBuffer buf)", "full_signature": "public abstract void asSmallBytes(ByteBuffer buf)", "class_method_signature": "TDigest.asSmallBytes(ByteBuffer buf)", "testcase": false, "constructor": false}, {"identifier": "recordAllData", "parameters": "()", "modifiers": "public abstract", "return": "TDigest", "signature": "TDigest recordAllData()", "full_signature": "public abstract TDigest recordAllData()", "class_method_signature": "TDigest.recordAllData()", "testcase": false, "constructor": false}, {"identifier": "isRecording", "parameters": "()", "modifiers": "public abstract", "return": "boolean", "signature": "boolean isRecording()", "full_signature": "public abstract boolean isRecording()", "class_method_signature": "TDigest.isRecording()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(double x)", "modifiers": "public abstract", "return": "void", "signature": "void add(double x)", "full_signature": "public abstract void add(double x)", "class_method_signature": "TDigest.add(double x)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(TDigest other)", "modifiers": "public abstract", "return": "void", "signature": "void add(TDigest other)", "full_signature": "public abstract void add(TDigest other)", "class_method_signature": "TDigest.add(TDigest other)", "testcase": false, "constructor": false}, {"identifier": "centroidCount", "parameters": "()", "modifiers": "public abstract", "return": "int", "signature": "int centroidCount()", "full_signature": "public abstract int centroidCount()", "class_method_signature": "TDigest.centroidCount()", "testcase": false, "constructor": false}, {"identifier": "getMin", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMin()", "full_signature": "public double getMin()", "class_method_signature": "TDigest.getMin()", "testcase": false, "constructor": false}, {"identifier": "getMax", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getMax()", "full_signature": "public double getMax()", "class_method_signature": "TDigest.getMax()", "testcase": false, "constructor": false}, {"identifier": "setMinMax", "parameters": "(double min, double max)", "modifiers": "@SuppressWarnings(\"SameParameterValue\")", "return": "void", "signature": "void setMinMax(double min, double max)", "full_signature": "@SuppressWarnings(\"SameParameterValue\") void setMinMax(double min, double max)", "class_method_signature": "TDigest.setMinMax(double min, double max)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/tdunning/math/stats/TDigest.java"}, "focal_method": {"identifier": "add", "parameters": "(double x, int w)", "modifiers": "public abstract", "return": "void", "body": "public abstract void add(double x, int w);", "signature": "void add(double x, int w)", "full_signature": "public abstract void add(double x, int w)", "class_method_signature": "TDigest.add(double x, int w)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 14509169, "url": "https://github.com/tdunning/t-digest", "language": "Java", "is_fork": false, "fork_count": 170, "stargazer_count": 1212, "size": 41644, "license": "licensed"}}