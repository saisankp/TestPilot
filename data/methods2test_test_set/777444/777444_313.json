{"test_class": {"identifier": "ServiceAuthenticationHttpContextTest", "superclass": "", "interfaces": "", "fields": [], "file": "agent/osgi/src/test/java/org/jolokia/osgi/security/ServiceAuthenticationHttpContextTest.java"}, "test_case": {"identifier": "anyAuthenticator", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void anyAuthenticator() throws Exception {\n        Object[] testData = new Object[]{\n            \"service-any\", new boolean[]{true, false}, true,\n            \"service-all\", new boolean[]{true, false}, false,\n            \"service-any\", new boolean[]{true, true}, true,\n            \"service-all\", new boolean[]{true, true}, true,\n            \"service-any\", new boolean[]{false, false}, false,\n            \"service-all\", new boolean[]{false, false}, false,\n            \"service-any\", new boolean[]{false, true}, true,\n            \"service-all\", new boolean[]{false, true}, false,\n            \"service-all\", new boolean[]{true, true, true, true, false, true}, false,\n            \"service-any\", new boolean[]{false, false, false, false, false, true}, true\n        };\n\n        for (int i = 0; i < testData.length; i += 3) {\n            BundleContext bundleContext = createBundleContext();\n            ServiceReference[] serviceRefs = createServiceReferences(bundleContext, (boolean[]) testData[i + 1]);\n\n            expect(bundleContext.getServiceReferences(eq(Authenticator.class.getName()), (String) isNull())).andReturn(serviceRefs);\n            replay(bundleContext);\n\n            ServiceAuthenticationHttpContext ctx = createContext(bundleContext, (String) testData[i]);\n            HttpServletResponse resp = prepareResponse();\n            assertEquals(ctx.handleSecurity(null, resp), testData[i + 2],\n                         String.format(\"%s: %s --> %s\", testData[i], printBooleanList((boolean[]) testData[i + 1]), testData[i + 2]));\n        }\n    }", "signature": "void anyAuthenticator()", "full_signature": "@Test public void anyAuthenticator()", "class_method_signature": "ServiceAuthenticationHttpContextTest.anyAuthenticator()", "testcase": true, "constructor": false, "invocations": ["createBundleContext", "createServiceReferences", "andReturn", "expect", "getServiceReferences", "eq", "getName", "isNull", "replay", "createContext", "prepareResponse", "assertEquals", "handleSecurity", "format", "printBooleanList"]}, "focal_class": {"identifier": "ServiceAuthenticationHttpContext", "superclass": "extends DefaultHttpContext", "interfaces": "", "fields": [{"original_string": "static final String AUTHMODE_SERVICE_ALL = \"service-all\";", "modifier": "static final", "type": "String", "declarator": "AUTHMODE_SERVICE_ALL = \"service-all\"", "var_name": "AUTHMODE_SERVICE_ALL"}, {"original_string": "static final String AUTHMODE_SERVICE_ANY = \"service-any\";", "modifier": "static final", "type": "String", "declarator": "AUTHMODE_SERVICE_ANY = \"service-any\"", "var_name": "AUTHMODE_SERVICE_ANY"}, {"original_string": "private final Set<Authenticator> authenticators = new HashSet<Authenticator>();", "modifier": "private final", "type": "Set<Authenticator>", "declarator": "authenticators = new HashSet<Authenticator>()", "var_name": "authenticators"}, {"original_string": "private ServiceTracker authenticatorServiceTracker;", "modifier": "private", "type": "ServiceTracker", "declarator": "authenticatorServiceTracker", "var_name": "authenticatorServiceTracker"}, {"original_string": "private final boolean checkModeAny;", "modifier": "private final", "type": "boolean", "declarator": "checkModeAny", "var_name": "checkModeAny"}], "methods": [{"identifier": "ServiceAuthenticationHttpContext", "parameters": "(final BundleContext bundleContext, final String authMode)", "modifiers": "public", "return": "", "signature": " ServiceAuthenticationHttpContext(final BundleContext bundleContext, final String authMode)", "full_signature": "public  ServiceAuthenticationHttpContext(final BundleContext bundleContext, final String authMode)", "class_method_signature": "ServiceAuthenticationHttpContext.ServiceAuthenticationHttpContext(final BundleContext bundleContext, final String authMode)", "testcase": false, "constructor": true}, {"identifier": "handleSecurity", "parameters": "(final HttpServletRequest request, final HttpServletResponse response)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean handleSecurity(final HttpServletRequest request, final HttpServletResponse response)", "full_signature": "@Override public boolean handleSecurity(final HttpServletRequest request, final HttpServletResponse response)", "class_method_signature": "ServiceAuthenticationHttpContext.handleSecurity(final HttpServletRequest request, final HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ServiceAuthenticationHttpContext.close()", "testcase": false, "constructor": false}, {"identifier": "shouldBeUsed", "parameters": "(String authMode)", "modifiers": "public static", "return": "boolean", "signature": "boolean shouldBeUsed(String authMode)", "full_signature": "public static boolean shouldBeUsed(String authMode)", "class_method_signature": "ServiceAuthenticationHttpContext.shouldBeUsed(String authMode)", "testcase": false, "constructor": false}], "file": "agent/osgi/src/main/java/org/jolokia/osgi/security/ServiceAuthenticationHttpContext.java"}, "focal_method": {"identifier": "handleSecurity", "parameters": "(final HttpServletRequest request, final HttpServletResponse response)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean handleSecurity(final HttpServletRequest request, final HttpServletResponse response)\n            throws IOException {\n\n        synchronized(authenticators) {\n            // deny access if authMode is set to service but a service is not provided\n            if (authenticators.isEmpty()) {\n                response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n                return false;\n            }\n            for (final Authenticator authenticator : authenticators) {\n                boolean authenticated = authenticator.authenticate(request);\n                if (checkModeAny && authenticated) {\n                    // One successful authenticator is good enough\n                    return true;\n                }\n                else if (!checkModeAny && !authenticated) {\n                    // All must succeed, so any negative respond will kill the authentication\n                    response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n                    return false;\n                }\n            }\n            // if checkModeAny: Not a single succeeded, if checkModeAll: All have succeeded\n            return !checkModeAny;\n        }\n    }", "signature": "boolean handleSecurity(final HttpServletRequest request, final HttpServletResponse response)", "full_signature": "@Override public boolean handleSecurity(final HttpServletRequest request, final HttpServletResponse response)", "class_method_signature": "ServiceAuthenticationHttpContext.handleSecurity(final HttpServletRequest request, final HttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "sendError", "authenticate", "sendError"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}