{"test_class": {"identifier": "ClassUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/utils/ClassUtilsTest.java"}, "test_case": {"identifier": "tetForNameWithCallerClassLoader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void tetForNameWithCallerClassLoader() throws Exception {\n        Class c = ClassUtils.forNameWithCallerClassLoader(ClassUtils.class.getName(), ClassUtilsTest.class);\n        assertThat(c == ClassUtils.class, is(true));\n    }", "signature": "void tetForNameWithCallerClassLoader()", "full_signature": "@Test public void tetForNameWithCallerClassLoader()", "class_method_signature": "ClassUtilsTest.tetForNameWithCallerClassLoader()", "testcase": true, "constructor": false, "invocations": ["forNameWithCallerClassLoader", "getName", "assertThat", "is"]}, "focal_class": {"identifier": "ClassUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String ARRAY_SUFFIX = \"[]\";", "modifier": "public static final", "type": "String", "declarator": "ARRAY_SUFFIX = \"[]\"", "var_name": "ARRAY_SUFFIX"}, {"original_string": "public static final Set<Class<?>> SIMPLE_TYPES = ofSet(\n            Void.class,\n            Boolean.class,\n            Character.class,\n            Byte.class,\n            Short.class,\n            Integer.class,\n            Long.class,\n            Float.class,\n            Double.class,\n            String.class,\n            BigDecimal.class,\n            BigInteger.class,\n            Date.class,\n            Object.class\n    );", "modifier": "public static final", "type": "Set<Class<?>>", "declarator": "SIMPLE_TYPES = ofSet(\n            Void.class,\n            Boolean.class,\n            Character.class,\n            Byte.class,\n            Short.class,\n            Integer.class,\n            Long.class,\n            Float.class,\n            Double.class,\n            String.class,\n            BigDecimal.class,\n            BigInteger.class,\n            Date.class,\n            Object.class\n    )", "var_name": "SIMPLE_TYPES"}, {"original_string": "private static final String INTERNAL_ARRAY_PREFIX = \"[L\";", "modifier": "private static final", "type": "String", "declarator": "INTERNAL_ARRAY_PREFIX = \"[L\"", "var_name": "INTERNAL_ARRAY_PREFIX"}, {"original_string": "private static final Map<String, Class<?>> PRIMITIVE_TYPE_NAME_MAP = new HashMap<String, Class<?>>(32);", "modifier": "private static final", "type": "Map<String, Class<?>>", "declarator": "PRIMITIVE_TYPE_NAME_MAP = new HashMap<String, Class<?>>(32)", "var_name": "PRIMITIVE_TYPE_NAME_MAP"}, {"original_string": "private static final Map<Class<?>, Class<?>> PRIMITIVE_WRAPPER_TYPE_MAP = new HashMap<Class<?>, Class<?>>(16);", "modifier": "private static final", "type": "Map<Class<?>, Class<?>>", "declarator": "PRIMITIVE_WRAPPER_TYPE_MAP = new HashMap<Class<?>, Class<?>>(16)", "var_name": "PRIMITIVE_WRAPPER_TYPE_MAP"}, {"original_string": "private static final char PACKAGE_SEPARATOR_CHAR = '.';", "modifier": "private static final", "type": "char", "declarator": "PACKAGE_SEPARATOR_CHAR = '.'", "var_name": "PACKAGE_SEPARATOR_CHAR"}], "methods": [{"identifier": "forNameWithThreadContextClassLoader", "parameters": "(String name)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> forNameWithThreadContextClassLoader(String name)", "full_signature": "public static Class<?> forNameWithThreadContextClassLoader(String name)", "class_method_signature": "ClassUtils.forNameWithThreadContextClassLoader(String name)", "testcase": false, "constructor": false}, {"identifier": "forNameWithCallerClassLoader", "parameters": "(String name, Class<?> caller)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> forNameWithCallerClassLoader(String name, Class<?> caller)", "full_signature": "public static Class<?> forNameWithCallerClassLoader(String name, Class<?> caller)", "class_method_signature": "ClassUtils.forNameWithCallerClassLoader(String name, Class<?> caller)", "testcase": false, "constructor": false}, {"identifier": "getCallerClassLoader", "parameters": "(Class<?> caller)", "modifiers": "public static", "return": "ClassLoader", "signature": "ClassLoader getCallerClassLoader(Class<?> caller)", "full_signature": "public static ClassLoader getCallerClassLoader(Class<?> caller)", "class_method_signature": "ClassUtils.getCallerClassLoader(Class<?> caller)", "testcase": false, "constructor": false}, {"identifier": "getClassLoader", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "ClassLoader", "signature": "ClassLoader getClassLoader(Class<?> clazz)", "full_signature": "public static ClassLoader getClassLoader(Class<?> clazz)", "class_method_signature": "ClassUtils.getClassLoader(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "getClassLoader", "parameters": "()", "modifiers": "public static", "return": "ClassLoader", "signature": "ClassLoader getClassLoader()", "full_signature": "public static ClassLoader getClassLoader()", "class_method_signature": "ClassUtils.getClassLoader()", "testcase": false, "constructor": false}, {"identifier": "forName", "parameters": "(String name)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> forName(String name)", "full_signature": "public static Class<?> forName(String name)", "class_method_signature": "ClassUtils.forName(String name)", "testcase": false, "constructor": false}, {"identifier": "forName", "parameters": "(String name, ClassLoader classLoader)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> forName(String name, ClassLoader classLoader)", "full_signature": "public static Class<?> forName(String name, ClassLoader classLoader)", "class_method_signature": "ClassUtils.forName(String name, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "resolvePrimitiveClassName", "parameters": "(String name)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> resolvePrimitiveClassName(String name)", "full_signature": "public static Class<?> resolvePrimitiveClassName(String name)", "class_method_signature": "ClassUtils.resolvePrimitiveClassName(String name)", "testcase": false, "constructor": false}, {"identifier": "toShortString", "parameters": "(Object obj)", "modifiers": "public static", "return": "String", "signature": "String toShortString(Object obj)", "full_signature": "public static String toShortString(Object obj)", "class_method_signature": "ClassUtils.toShortString(Object obj)", "testcase": false, "constructor": false}, {"identifier": "simpleClassName", "parameters": "(Class<?> clazz)", "modifiers": "public static", "return": "String", "signature": "String simpleClassName(Class<?> clazz)", "full_signature": "public static String simpleClassName(Class<?> clazz)", "class_method_signature": "ClassUtils.simpleClassName(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "isPrimitive", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPrimitive(Class<?> type)", "full_signature": "public static boolean isPrimitive(Class<?> type)", "class_method_signature": "ClassUtils.isPrimitive(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "isSimpleType", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isSimpleType(Class<?> type)", "full_signature": "public static boolean isSimpleType(Class<?> type)", "class_method_signature": "ClassUtils.isSimpleType(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "convertPrimitive", "parameters": "(Class<?> type, String value)", "modifiers": "public static", "return": "Object", "signature": "Object convertPrimitive(Class<?> type, String value)", "full_signature": "public static Object convertPrimitive(Class<?> type, String value)", "class_method_signature": "ClassUtils.convertPrimitive(Class<?> type, String value)", "testcase": false, "constructor": false}, {"identifier": "isTypeMatch", "parameters": "(Class<?> type, String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isTypeMatch(Class<?> type, String value)", "full_signature": "public static boolean isTypeMatch(Class<?> type, String value)", "class_method_signature": "ClassUtils.isTypeMatch(Class<?> type, String value)", "testcase": false, "constructor": false}, {"identifier": "getAllSuperClasses", "parameters": "(Class<?> type, Predicate<Class<?>>... classFilters)", "modifiers": "public static", "return": "Set<Class<?>>", "signature": "Set<Class<?>> getAllSuperClasses(Class<?> type, Predicate<Class<?>>... classFilters)", "full_signature": "public static Set<Class<?>> getAllSuperClasses(Class<?> type, Predicate<Class<?>>... classFilters)", "class_method_signature": "ClassUtils.getAllSuperClasses(Class<?> type, Predicate<Class<?>>... classFilters)", "testcase": false, "constructor": false}, {"identifier": "getAllInterfaces", "parameters": "(Class<?> type, Predicate<Class<?>>... interfaceFilters)", "modifiers": "public static", "return": "Set<Class<?>>", "signature": "Set<Class<?>> getAllInterfaces(Class<?> type, Predicate<Class<?>>... interfaceFilters)", "full_signature": "public static Set<Class<?>> getAllInterfaces(Class<?> type, Predicate<Class<?>>... interfaceFilters)", "class_method_signature": "ClassUtils.getAllInterfaces(Class<?> type, Predicate<Class<?>>... interfaceFilters)", "testcase": false, "constructor": false}, {"identifier": "getAllInheritedTypes", "parameters": "(Class<?> type, Predicate<Class<?>>... typeFilters)", "modifiers": "public static", "return": "Set<Class<?>>", "signature": "Set<Class<?>> getAllInheritedTypes(Class<?> type, Predicate<Class<?>>... typeFilters)", "full_signature": "public static Set<Class<?>> getAllInheritedTypes(Class<?> type, Predicate<Class<?>>... typeFilters)", "class_method_signature": "ClassUtils.getAllInheritedTypes(Class<?> type, Predicate<Class<?>>... typeFilters)", "testcase": false, "constructor": false}, {"identifier": "isAssignableFrom", "parameters": "(Class<?> superType, Class<?> targetType)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAssignableFrom(Class<?> superType, Class<?> targetType)", "full_signature": "public static boolean isAssignableFrom(Class<?> superType, Class<?> targetType)", "class_method_signature": "ClassUtils.isAssignableFrom(Class<?> superType, Class<?> targetType)", "testcase": false, "constructor": false}, {"identifier": "isPresent", "parameters": "(String className, ClassLoader classLoader)", "modifiers": "public static", "return": "boolean", "signature": "boolean isPresent(String className, ClassLoader classLoader)", "full_signature": "public static boolean isPresent(String className, ClassLoader classLoader)", "class_method_signature": "ClassUtils.isPresent(String className, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "resolveClass", "parameters": "(String className, ClassLoader classLoader)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> resolveClass(String className, ClassLoader classLoader)", "full_signature": "public static Class<?> resolveClass(String className, ClassLoader classLoader)", "class_method_signature": "ClassUtils.resolveClass(String className, ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "isGenericClass", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "boolean", "signature": "boolean isGenericClass(Class<?> type)", "full_signature": "public static boolean isGenericClass(Class<?> type)", "class_method_signature": "ClassUtils.isGenericClass(Class<?> type)", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/utils/ClassUtils.java"}, "focal_method": {"identifier": "forNameWithCallerClassLoader", "parameters": "(String name, Class<?> caller)", "modifiers": "public static", "return": "Class<?>", "body": "public static Class<?> forNameWithCallerClassLoader(String name, Class<?> caller)\n            throws ClassNotFoundException {\n        return forName(name, caller.getClassLoader());\n    }", "signature": "Class<?> forNameWithCallerClassLoader(String name, Class<?> caller)", "full_signature": "public static Class<?> forNameWithCallerClassLoader(String name, Class<?> caller)", "class_method_signature": "ClassUtils.forNameWithCallerClassLoader(String name, Class<?> caller)", "testcase": false, "constructor": false, "invocations": ["forName", "getClassLoader"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}