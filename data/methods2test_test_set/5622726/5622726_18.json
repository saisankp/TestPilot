{"test_class": {"identifier": "UrlStripHtmlSanitizerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final UrlStripHtmlSanitizer _sanitizer = new UrlStripHtmlSanitizer();", "modifier": "private final", "type": "UrlStripHtmlSanitizer", "declarator": "_sanitizer = new UrlStripHtmlSanitizer()", "var_name": "_sanitizer"}], "file": "inputvalidation/src/test/java/com/switchfly/inputvalidation/sanitizer/UrlStripHtmlSanitizerTest.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute() throws Exception {\n        assertEquals(\"http://www.foo.com/\", _sanitizer.execute(\"http://www.foo.com\"));\n\n        assertEquals(\"http://www.foo.com/path/page.cfm\", _sanitizer.execute(\"http://www.foo.com/path/page.cfm\"));\n\n        assertEquals(\"http://www.foo.com/path/page.cfm?a=1&num_rooms=1&children=0&int=VA&b=2#foo\",\n            _sanitizer.execute(\"http://www.foo.com/path/page.cfm?a=1&num_rooms=1&children=0&int=VA&b=2#foo\"));\n\n        assertEquals(\"/path/page.cfm?a=1&num_rooms=1&children=0&int=VA&b=2\",\n            _sanitizer.execute(\"/path/page.cfm?a=1&num_rooms=1&children=0&int=VA&b=2\"));\n\n        assertEquals(\"/?a=1&num_rooms=1&children=0&int=VA&b=2\", _sanitizer.execute(\"?a=1&num_rooms=1&children=0&int=VA&b=2\"));\n\n        assertEquals(\"/foo\", _sanitizer.execute(\"foo\"));\n\n        assertEquals(\n            \"https://travel.americanexpress.co.uk/travel/itinerary_clear_process.cfm?redirect_url=%2Ftravel%2Farc.cfm%3Ftab%3Dact&nav=default\",\n            _sanitizer\n                .execute(\"https://travel.americanexpress.co.uk/travel/itinerary_clear_process.cfm?redirect_url=/travel/arc.cfm?tab=act&nav=default\"));\n\n        try {\n            _sanitizer.execute(\"<script>alert('hacked!');</script>\");\n            fail(\"Should throw URISyntaxException\");\n        } catch (Exception e) {\n            assertEquals(\"java.net.URISyntaxException: Illegal character in path at index 0: <script>alert('hacked!');</script>\", e.getMessage());\n        }\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "UrlStripHtmlSanitizerTest.testExecute()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "execute", "assertEquals", "execute", "assertEquals", "execute", "assertEquals", "execute", "assertEquals", "execute", "assertEquals", "execute", "assertEquals", "execute", "execute", "fail", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "UrlStripHtmlSanitizer", "superclass": "", "interfaces": "implements Sanitizer<String>", "fields": [{"original_string": "private static final String ENCODING = \"UTF-8\";", "modifier": "private static final", "type": "String", "declarator": "ENCODING = \"UTF-8\"", "var_name": "ENCODING"}, {"original_string": "private static final String PARAMETER_SEPARATOR = \"&\";", "modifier": "private static final", "type": "String", "declarator": "PARAMETER_SEPARATOR = \"&\"", "var_name": "PARAMETER_SEPARATOR"}, {"original_string": "private static final String NAME_VALUE_SEPARATOR = \"=\";", "modifier": "private static final", "type": "String", "declarator": "NAME_VALUE_SEPARATOR = \"=\"", "var_name": "NAME_VALUE_SEPARATOR"}], "methods": [{"identifier": "execute", "parameters": "(String content)", "modifiers": "@Override public", "return": "String", "signature": "String execute(String content)", "full_signature": "@Override public String execute(String content)", "class_method_signature": "UrlStripHtmlSanitizer.execute(String content)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(URI uri)", "modifiers": "public static", "return": "List<NameValuePair>", "signature": "List<NameValuePair> parse(URI uri)", "full_signature": "public static List<NameValuePair> parse(URI uri)", "class_method_signature": "UrlStripHtmlSanitizer.parse(URI uri)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String queryString)", "modifiers": "public static", "return": "List<NameValuePair>", "signature": "List<NameValuePair> parse(String queryString)", "full_signature": "public static List<NameValuePair> parse(String queryString)", "class_method_signature": "UrlStripHtmlSanitizer.parse(String queryString)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(List<NameValuePair> parameters, Scanner scanner)", "modifiers": "private static", "return": "void", "signature": "void parse(List<NameValuePair> parameters, Scanner scanner)", "full_signature": "private static void parse(List<NameValuePair> parameters, Scanner scanner)", "class_method_signature": "UrlStripHtmlSanitizer.parse(List<NameValuePair> parameters, Scanner scanner)", "testcase": false, "constructor": false}], "file": "inputvalidation/src/main/java/com/switchfly/inputvalidation/sanitizer/UrlStripHtmlSanitizer.java"}, "focal_method": {"identifier": "execute", "parameters": "(String content)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String execute(String content) {\n        if (StringUtils.isBlank(content)) {\n            return content;\n        }\n\n        URI uri;\n        try {\n            uri = new URI(content);\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n\n        List<NameValuePair> cleanedPairs = parse(uri);\n\n        String queryString = cleanedPairs.isEmpty() ? null : URLEncodedUtils.format(cleanedPairs, ENCODING);\n\n        try {\n            return URIUtils.createURI(uri.getScheme(), uri.getHost(), uri.getPort(), uri.getPath(), queryString, uri.getFragment()).toString();\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n    }", "signature": "String execute(String content)", "full_signature": "@Override public String execute(String content)", "class_method_signature": "UrlStripHtmlSanitizer.execute(String content)", "testcase": false, "constructor": false, "invocations": ["isBlank", "parse", "isEmpty", "format", "toString", "createURI", "getScheme", "getHost", "getPort", "getPath", "getFragment"]}, "repository": {"repo_id": 5622726, "url": "https://github.com/switchfly/switchfly-java", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 752, "license": "licensed"}}