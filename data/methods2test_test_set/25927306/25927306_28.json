{"test_class": {"identifier": "DNTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ldaptive/asn1/DNTest.java"}, "test_case": {"identifier": "decode", "parameters": "(final byte[] bytes, final DN expected)", "modifiers": "@Test(groups = \"asn1\", dataProvider = \"dns\") public", "return": "void", "body": "@Test(groups = \"asn1\", dataProvider = \"dns\")\n  public void decode(final byte[] bytes, final DN expected)\n    throws Exception\n  {\n    Assert.assertEquals(DN.decode(new DefaultDERBuffer(bytes)), expected);\n  }", "signature": "void decode(final byte[] bytes, final DN expected)", "full_signature": "@Test(groups = \"asn1\", dataProvider = \"dns\") public void decode(final byte[] bytes, final DN expected)", "class_method_signature": "DNTest.decode(final byte[] bytes, final DN expected)", "testcase": true, "constructor": false, "invocations": ["assertEquals", "decode"]}, "focal_class": {"identifier": "DN", "superclass": "", "interfaces": "implements DEREncoder", "fields": [{"original_string": "private static final int HASH_CODE_SEED = 631;", "modifier": "private static final", "type": "int", "declarator": "HASH_CODE_SEED = 631", "var_name": "HASH_CODE_SEED"}, {"original_string": "private final RDN[] rdns;", "modifier": "private final", "type": "RDN[]", "declarator": "rdns", "var_name": "rdns"}], "methods": [{"identifier": "DN", "parameters": "(final Collection<RDN> names)", "modifiers": "public", "return": "", "signature": " DN(final Collection<RDN> names)", "full_signature": "public  DN(final Collection<RDN> names)", "class_method_signature": "DN.DN(final Collection<RDN> names)", "testcase": false, "constructor": true}, {"identifier": "DN", "parameters": "(final RDN... names)", "modifiers": "public", "return": "", "signature": " DN(final RDN... names)", "full_signature": "public  DN(final RDN... names)", "class_method_signature": "DN.DN(final RDN... names)", "testcase": false, "constructor": true}, {"identifier": "getRDNs", "parameters": "()", "modifiers": "public", "return": "RDN[]", "signature": "RDN[] getRDNs()", "full_signature": "public RDN[] getRDNs()", "class_method_signature": "DN.getRDNs()", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] encode()", "full_signature": "@Override public byte[] encode()", "class_method_signature": "DN.encode()", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(final DERBuffer encoded)", "modifiers": "public static", "return": "DN", "signature": "DN decode(final DERBuffer encoded)", "full_signature": "public static DN decode(final DERBuffer encoded)", "class_method_signature": "DN.decode(final DERBuffer encoded)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "DN.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DN.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DN.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/asn1/DN.java"}, "focal_method": {"identifier": "decode", "parameters": "(final DERBuffer encoded)", "modifiers": "public static", "return": "DN", "body": "public static DN decode(final DERBuffer encoded)\n  {\n    return new DN(RDN.decode(encoded));\n  }", "signature": "DN decode(final DERBuffer encoded)", "full_signature": "public static DN decode(final DERBuffer encoded)", "class_method_signature": "DN.decode(final DERBuffer encoded)", "testcase": false, "constructor": false, "invocations": ["decode"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}