{"test_class": {"identifier": "QueryParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "base/lang/src/test/java/leap/lang/jsoup/select/QueryParserTest.java"}, "test_case": {"identifier": "testParsesMultiCorrectly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testParsesMultiCorrectly() {\n        Evaluator eval = QueryParser.parse(\".foo > ol, ol > li + li\");\n        assertTrue(eval instanceof CombiningEvaluator.Or);\n        CombiningEvaluator.Or or = (CombiningEvaluator.Or) eval;\n        assertEquals(2, or.evaluators.size());\n\n        CombiningEvaluator.And andLeft = (CombiningEvaluator.And) or.evaluators.get(0);\n        CombiningEvaluator.And andRight = (CombiningEvaluator.And) or.evaluators.get(1);\n\n        assertEquals(\"ol :ImmediateParent.foo\", andLeft.toString());\n        assertEquals(2, andLeft.evaluators.size());\n        assertEquals(\"li :prevli :ImmediateParentol\", andRight.toString());\n        assertEquals(2, andLeft.evaluators.size());\n    }", "signature": "void testParsesMultiCorrectly()", "full_signature": "@Test public void testParsesMultiCorrectly()", "class_method_signature": "QueryParserTest.testParsesMultiCorrectly()", "testcase": true, "constructor": false, "invocations": ["parse", "assertTrue", "assertEquals", "size", "get", "get", "assertEquals", "toString", "assertEquals", "size", "assertEquals", "toString", "assertEquals", "size"]}, "focal_class": {"identifier": "QueryParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static String[] combinators = {\",\", \">\", \"+\", \"~\", \" \"};", "modifier": "private final static", "type": "String[]", "declarator": "combinators = {\",\", \">\", \"+\", \"~\", \" \"}", "var_name": "combinators"}, {"original_string": "private static final String[] AttributeEvals = new String[]{\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\"};", "modifier": "private static final", "type": "String[]", "declarator": "AttributeEvals = new String[]{\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\"}", "var_name": "AttributeEvals"}, {"original_string": "private TokenQueue tq;", "modifier": "private", "type": "TokenQueue", "declarator": "tq", "var_name": "tq"}, {"original_string": "private String query;", "modifier": "private", "type": "String", "declarator": "query", "var_name": "query"}, {"original_string": "private List<Evaluator> evals = new ArrayList<Evaluator>();", "modifier": "private", "type": "List<Evaluator>", "declarator": "evals = new ArrayList<Evaluator>()", "var_name": "evals"}, {"original_string": "private static final Pattern NTH_AB = Pattern.compile(\"((\\\\+|-)?(\\\\d+)?)n(\\\\s*(\\\\+|-)?\\\\s*\\\\d+)?\", Pattern.CASE_INSENSITIVE);", "modifier": "private static final", "type": "Pattern", "declarator": "NTH_AB = Pattern.compile(\"((\\\\+|-)?(\\\\d+)?)n(\\\\s*(\\\\+|-)?\\\\s*\\\\d+)?\", Pattern.CASE_INSENSITIVE)", "var_name": "NTH_AB"}, {"original_string": "private static final Pattern NTH_B  = Pattern.compile(\"(\\\\+|-)?(\\\\d+)\");", "modifier": "private static final", "type": "Pattern", "declarator": "NTH_B  = Pattern.compile(\"(\\\\+|-)?(\\\\d+)\")", "var_name": "NTH_B"}], "methods": [{"identifier": "QueryParser", "parameters": "(String query)", "modifiers": "private", "return": "", "signature": " QueryParser(String query)", "full_signature": "private  QueryParser(String query)", "class_method_signature": "QueryParser.QueryParser(String query)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(String query)", "modifiers": "public static", "return": "Evaluator", "signature": "Evaluator parse(String query)", "full_signature": "public static Evaluator parse(String query)", "class_method_signature": "QueryParser.parse(String query)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "()", "modifiers": "", "return": "Evaluator", "signature": "Evaluator parse()", "full_signature": " Evaluator parse()", "class_method_signature": "QueryParser.parse()", "testcase": false, "constructor": false}, {"identifier": "combinator", "parameters": "(char combinator)", "modifiers": "private", "return": "void", "signature": "void combinator(char combinator)", "full_signature": "private void combinator(char combinator)", "class_method_signature": "QueryParser.combinator(char combinator)", "testcase": false, "constructor": false}, {"identifier": "consumeSubQuery", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String consumeSubQuery()", "full_signature": "private String consumeSubQuery()", "class_method_signature": "QueryParser.consumeSubQuery()", "testcase": false, "constructor": false}, {"identifier": "findElements", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void findElements()", "full_signature": "private void findElements()", "class_method_signature": "QueryParser.findElements()", "testcase": false, "constructor": false}, {"identifier": "byId", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void byId()", "full_signature": "private void byId()", "class_method_signature": "QueryParser.byId()", "testcase": false, "constructor": false}, {"identifier": "byClass", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void byClass()", "full_signature": "private void byClass()", "class_method_signature": "QueryParser.byClass()", "testcase": false, "constructor": false}, {"identifier": "byTag", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void byTag()", "full_signature": "private void byTag()", "class_method_signature": "QueryParser.byTag()", "testcase": false, "constructor": false}, {"identifier": "byAttribute", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void byAttribute()", "full_signature": "private void byAttribute()", "class_method_signature": "QueryParser.byAttribute()", "testcase": false, "constructor": false}, {"identifier": "allElements", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void allElements()", "full_signature": "private void allElements()", "class_method_signature": "QueryParser.allElements()", "testcase": false, "constructor": false}, {"identifier": "indexLessThan", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void indexLessThan()", "full_signature": "private void indexLessThan()", "class_method_signature": "QueryParser.indexLessThan()", "testcase": false, "constructor": false}, {"identifier": "indexGreaterThan", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void indexGreaterThan()", "full_signature": "private void indexGreaterThan()", "class_method_signature": "QueryParser.indexGreaterThan()", "testcase": false, "constructor": false}, {"identifier": "indexEquals", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void indexEquals()", "full_signature": "private void indexEquals()", "class_method_signature": "QueryParser.indexEquals()", "testcase": false, "constructor": false}, {"identifier": "cssNthChild", "parameters": "(boolean backwards, boolean ofType)", "modifiers": "private", "return": "void", "signature": "void cssNthChild(boolean backwards, boolean ofType)", "full_signature": "private void cssNthChild(boolean backwards, boolean ofType)", "class_method_signature": "QueryParser.cssNthChild(boolean backwards, boolean ofType)", "testcase": false, "constructor": false}, {"identifier": "consumeIndex", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int consumeIndex()", "full_signature": "private int consumeIndex()", "class_method_signature": "QueryParser.consumeIndex()", "testcase": false, "constructor": false}, {"identifier": "has", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void has()", "full_signature": "private void has()", "class_method_signature": "QueryParser.has()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(boolean own)", "modifiers": "private", "return": "void", "signature": "void contains(boolean own)", "full_signature": "private void contains(boolean own)", "class_method_signature": "QueryParser.contains(boolean own)", "testcase": false, "constructor": false}, {"identifier": "matches", "parameters": "(boolean own)", "modifiers": "private", "return": "void", "signature": "void matches(boolean own)", "full_signature": "private void matches(boolean own)", "class_method_signature": "QueryParser.matches(boolean own)", "testcase": false, "constructor": false}, {"identifier": "not", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void not()", "full_signature": "private void not()", "class_method_signature": "QueryParser.not()", "testcase": false, "constructor": false}], "file": "base/lang/src/main/java/leap/lang/jsoup/select/QueryParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String query)", "modifiers": "public static", "return": "Evaluator", "body": "public static Evaluator parse(String query) {\n        QueryParser p = new QueryParser(query);\n        return p.parse();\n    }", "signature": "Evaluator parse(String query)", "full_signature": "public static Evaluator parse(String query)", "class_method_signature": "QueryParser.parse(String query)", "testcase": false, "constructor": false, "invocations": ["parse"]}, "repository": {"repo_id": 48562236, "url": "https://github.com/leapframework/framework", "stars": 42, "created": "12/25/2015 1:54:52 AM +00:00", "updates": "2020-01-20T03:04:15+00:00", "fork": "False", "license": "licensed"}}