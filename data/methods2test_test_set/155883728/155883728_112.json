{"test_class": {"identifier": "WebsterChecklistTargetTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final File testOutDir = new File(\"target/test-out/WebsterChecklistTargetTest\");", "modifier": "final", "type": "File", "declarator": "testOutDir = new File(\"target/test-out/WebsterChecklistTargetTest\")", "var_name": "testOutDir"}], "file": "webster/src/test/java/net/adamcin/oakpal/webster/targets/WebsterChecklistTargetTest.java"}, "test_case": {"identifier": "testSelectorsFromConfigCompactForm", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSelectorsFromConfigCompactForm() {\n        List<WebsterChecklistTarget.Selector> pathSelector =\n                selectorsFromConfigCompactForm(key(\"selectPaths\", arr(\"/foo1\", \"/foo2\")).get());\n        assertEquals(\"expect type\", PATH, pathSelector.get(0).getType());\n        assertEquals(\"expect args\", Arrays.asList(\"/foo1\", \"/foo2\"), pathSelector.get(0).getArgs());\n\n        List<WebsterChecklistTarget.Selector> ntSelector =\n                selectorsFromConfigCompactForm(key(\"selectNodeTypes\", arr(\"foo:nt1\", \"foo:mix1\")).get());\n        assertEquals(\"expect type\", NODETYPE, ntSelector.get(0).getType());\n        assertEquals(\"expect args\", Arrays.asList(\"foo:nt1\", \"foo:mix1\"), ntSelector.get(0).getArgs());\n\n        List<WebsterChecklistTarget.Selector> querySelector =\n                selectorsFromConfigCompactForm(key(\"selectQuery\", \"select * from [nt:base]\").get());\n        assertEquals(\"expect type\", QUERY, querySelector.get(0).getType());\n        assertEquals(\"expect args\", Collections.singletonList(\"select * from [nt:base]\"),\n                querySelector.get(0).getArgs());\n    }", "signature": "void testSelectorsFromConfigCompactForm()", "full_signature": "@Test public void testSelectorsFromConfigCompactForm()", "class_method_signature": "WebsterChecklistTargetTest.testSelectorsFromConfigCompactForm()", "testcase": true, "constructor": false, "invocations": ["selectorsFromConfigCompactForm", "get", "key", "arr", "assertEquals", "getType", "get", "assertEquals", "asList", "getArgs", "get", "selectorsFromConfigCompactForm", "get", "key", "arr", "assertEquals", "getType", "get", "assertEquals", "asList", "getArgs", "get", "selectorsFromConfigCompactForm", "get", "key", "assertEquals", "getType", "get", "assertEquals", "singletonList", "getArgs", "get"]}, "focal_class": {"identifier": "WebsterChecklistTarget", "superclass": "", "interfaces": "implements WebsterTarget", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(WebsterChecklistTarget.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(WebsterChecklistTarget.class)", "var_name": "LOGGER"}, {"original_string": "static final String KEY_TYPE = \"type\";", "modifier": "static final", "type": "String", "declarator": "KEY_TYPE = \"type\"", "var_name": "KEY_TYPE"}, {"original_string": "static final String KEY_ARGS = \"args\";", "modifier": "static final", "type": "String", "declarator": "KEY_ARGS = \"args\"", "var_name": "KEY_ARGS"}, {"original_string": "static final String COMPACT_KEY_BY_NODETYPES = \"selectNodeTypes\";", "modifier": "static final", "type": "String", "declarator": "COMPACT_KEY_BY_NODETYPES = \"selectNodeTypes\"", "var_name": "COMPACT_KEY_BY_NODETYPES"}, {"original_string": "static final String COMPACT_KEY_BY_PATHS = \"selectPaths\";", "modifier": "static final", "type": "String", "declarator": "COMPACT_KEY_BY_PATHS = \"selectPaths\"", "var_name": "COMPACT_KEY_BY_PATHS"}, {"original_string": "static final String COMPACT_KEY_BY_QUERY = \"selectQuery\";", "modifier": "static final", "type": "String", "declarator": "COMPACT_KEY_BY_QUERY = \"selectQuery\"", "var_name": "COMPACT_KEY_BY_QUERY"}, {"original_string": "static final String KEY_SELECTORS = \"selectors\";", "modifier": "static final", "type": "String", "declarator": "KEY_SELECTORS = \"selectors\"", "var_name": "KEY_SELECTORS"}, {"original_string": "static final String KEY_SCOPE_PATHS = \"scopePaths\";", "modifier": "static final", "type": "String", "declarator": "KEY_SCOPE_PATHS = \"scopePaths\"", "var_name": "KEY_SCOPE_PATHS"}, {"original_string": "static final String KEY_NODE_TYPE_FILTERS = \"nodeTypeFilters\";", "modifier": "static final", "type": "String", "declarator": "KEY_NODE_TYPE_FILTERS = \"nodeTypeFilters\"", "var_name": "KEY_NODE_TYPE_FILTERS"}, {"original_string": "static final String KEY_JCR_NAMESPACES = \"jcrNamespaces\";", "modifier": "static final", "type": "String", "declarator": "KEY_JCR_NAMESPACES = \"jcrNamespaces\"", "var_name": "KEY_JCR_NAMESPACES"}, {"original_string": "static final String KEY_UPDATE_POLICY = \"updatePolicy\";", "modifier": "static final", "type": "String", "declarator": "KEY_UPDATE_POLICY = \"updatePolicy\"", "var_name": "KEY_UPDATE_POLICY"}, {"original_string": "static final String KEY_EXPORT_NODETYPES = \"exportNodeTypes\";", "modifier": "static final", "type": "String", "declarator": "KEY_EXPORT_NODETYPES = \"exportNodeTypes\"", "var_name": "KEY_EXPORT_NODETYPES"}, {"original_string": "private final File checklist;", "modifier": "private final", "type": "File", "declarator": "checklist", "var_name": "checklist"}, {"original_string": "private final ChecklistExporter exporter;", "modifier": "private final", "type": "ChecklistExporter", "declarator": "exporter", "var_name": "exporter"}, {"original_string": "private final ChecklistExporter.ForcedRootUpdatePolicy updatePolicy;", "modifier": "private final", "type": "ChecklistExporter.ForcedRootUpdatePolicy", "declarator": "updatePolicy", "var_name": "updatePolicy"}], "methods": [{"identifier": "selectorFromJson", "parameters": "(final JsonObject json)", "modifiers": "static", "return": "Selector", "signature": "Selector selectorFromJson(final JsonObject json)", "full_signature": "static Selector selectorFromJson(final JsonObject json)", "class_method_signature": "WebsterChecklistTarget.selectorFromJson(final JsonObject json)", "testcase": false, "constructor": false}, {"identifier": "selectorsFromConfigCompactForm", "parameters": "(final JsonObject json)", "modifiers": "static", "return": "List<Selector>", "signature": "List<Selector> selectorsFromConfigCompactForm(final JsonObject json)", "full_signature": "static List<Selector> selectorsFromConfigCompactForm(final JsonObject json)", "class_method_signature": "WebsterChecklistTarget.selectorsFromConfigCompactForm(final JsonObject json)", "testcase": false, "constructor": false}, {"identifier": "WebsterChecklistTarget", "parameters": "(final File checklist,\n                                   final ChecklistExporter exporter,\n                                   final ChecklistExporter.ForcedRootUpdatePolicy updatePolicy)", "modifiers": "private", "return": "", "signature": " WebsterChecklistTarget(final File checklist,\n                                   final ChecklistExporter exporter,\n                                   final ChecklistExporter.ForcedRootUpdatePolicy updatePolicy)", "full_signature": "private  WebsterChecklistTarget(final File checklist,\n                                   final ChecklistExporter exporter,\n                                   final ChecklistExporter.ForcedRootUpdatePolicy updatePolicy)", "class_method_signature": "WebsterChecklistTarget.WebsterChecklistTarget(final File checklist,\n                                   final ChecklistExporter exporter,\n                                   final ChecklistExporter.ForcedRootUpdatePolicy updatePolicy)", "testcase": false, "constructor": true}, {"identifier": "perform", "parameters": "(final Session session)", "modifiers": "@Override public", "return": "void", "signature": "void perform(final Session session)", "full_signature": "@Override public void perform(final Session session)", "class_method_signature": "WebsterChecklistTarget.perform(final Session session)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final File target, final JsonObject config)", "modifiers": "static", "return": "WebsterChecklistTarget", "signature": "WebsterChecklistTarget fromJson(final File target, final JsonObject config)", "full_signature": "static WebsterChecklistTarget fromJson(final File target, final JsonObject config)", "class_method_signature": "WebsterChecklistTarget.fromJson(final File target, final JsonObject config)", "testcase": false, "constructor": false}], "file": "webster/src/main/java/net/adamcin/oakpal/webster/targets/WebsterChecklistTarget.java"}, "focal_method": {"identifier": "selectorsFromConfigCompactForm", "parameters": "(final JsonObject json)", "modifiers": "static", "return": "List<Selector>", "body": "static List<Selector> selectorsFromConfigCompactForm(final JsonObject json) {\n        final List<Selector> selectors = new ArrayList<>();\n        if (json.containsKey(COMPACT_KEY_BY_NODETYPES)) {\n            final List<String> args = JavaxJson.mapArrayOfStrings(json.getJsonArray(COMPACT_KEY_BY_NODETYPES));\n            selectors.add(new Selector(ChecklistExporter.SelectorType.NODETYPE, args.toArray(new String[0])));\n        }\n        if (json.containsKey(COMPACT_KEY_BY_PATHS)) {\n            final List<String> args = JavaxJson.mapArrayOfStrings(json.getJsonArray(COMPACT_KEY_BY_PATHS));\n            selectors.add(new Selector(ChecklistExporter.SelectorType.PATH, args.toArray(new String[0])));\n        }\n        if (json.containsKey(COMPACT_KEY_BY_QUERY)) {\n            selectors.add(new Selector(ChecklistExporter.SelectorType.QUERY,\n                    new String[]{json.getString(COMPACT_KEY_BY_QUERY)}));\n        }\n        return selectors;\n    }", "signature": "List<Selector> selectorsFromConfigCompactForm(final JsonObject json)", "full_signature": "static List<Selector> selectorsFromConfigCompactForm(final JsonObject json)", "class_method_signature": "WebsterChecklistTarget.selectorsFromConfigCompactForm(final JsonObject json)", "testcase": false, "constructor": false, "invocations": ["containsKey", "mapArrayOfStrings", "getJsonArray", "add", "toArray", "containsKey", "mapArrayOfStrings", "getJsonArray", "add", "toArray", "containsKey", "add", "getString"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}