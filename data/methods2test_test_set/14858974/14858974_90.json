{"test_class": {"identifier": "DataFetchingUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String SAMPLE_NAME = \"Axway Enterprise\";", "modifier": "private final", "type": "String", "declarator": "SAMPLE_NAME = \"Axway Enterprise\"", "var_name": "SAMPLE_NAME"}, {"original_string": "private final String SAMPLE_VERSION = \"4.5.9\";", "modifier": "private final", "type": "String", "declarator": "SAMPLE_VERSION = \"4.5.9\"", "var_name": "SAMPLE_VERSION"}], "file": "server/src/test/java/org/axway/grapes/server/reports/utils/DataFetchingUtilsTest.java"}, "test_case": {"identifier": "getCDTooManyCommercialDeliveries", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getCDTooManyCommercialDeliveries() throws NoSuchFieldException, IllegalAccessException {\n\n        final DbProduct fakeProduct = mock(DbProduct.class);\n        when(fakeProduct.getDeliveries()).thenReturn(Arrays.asList(\n                DataModelFactory.createDelivery(SAMPLE_NAME, SAMPLE_VERSION, LocalDate.now().toString(), Arrays.asList(\"one\")),\n                DataModelFactory.createDelivery(SAMPLE_NAME, SAMPLE_VERSION, \"does-not-matter\", Collections.emptyList())\n        ));\n\n        final RepositoryHandler repoHandler = mock(RepositoryHandler.class);\n        when(repoHandler.getOneByQuery(anyString(), anyString(), any(Class.class))).thenReturn(Optional.of(fakeProduct));\n\n        final DataFetchingUtils sut = new DataFetchingUtils();\n\n        final Logger fakeLogger = mock(Logger.class);\n        when(fakeLogger.isWarnEnabled()).thenReturn(true);\n\n        InjectionUtils.injectField(sut, DataFetchingUtils.class, \"LOG\", fakeLogger);\n\n        final Optional<Delivery> result = sut.getCommercialDelivery(repoHandler, SAMPLE_NAME, SAMPLE_VERSION);\n\n        // An entry is selected\n        assertTrue(result.isPresent());\n\n        // A warning message is printed to log file\n        ArgumentCaptor<String> msgCaptor = ArgumentCaptor.forClass(String.class);\n        verify(fakeLogger, times(1)).warn(msgCaptor.capture());\n\n        assertEquals(String.format(\"Multiple commercial version entries found for [%s] [%s]\", SAMPLE_NAME, SAMPLE_VERSION), msgCaptor.getValue());\n\n        // The first matching entry is picked\n        assertEquals(1, result.get().getDependencies().size());\n    }", "signature": "void getCDTooManyCommercialDeliveries()", "full_signature": "@Test public void getCDTooManyCommercialDeliveries()", "class_method_signature": "DataFetchingUtilsTest.getCDTooManyCommercialDeliveries()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getDeliveries", "asList", "createDelivery", "toString", "now", "asList", "createDelivery", "emptyList", "mock", "thenReturn", "when", "getOneByQuery", "anyString", "anyString", "any", "of", "mock", "thenReturn", "when", "isWarnEnabled", "injectField", "getCommercialDelivery", "assertTrue", "isPresent", "forClass", "warn", "verify", "times", "capture", "assertEquals", "format", "getValue", "assertEquals", "size", "getDependencies", "get"]}, "focal_class": {"identifier": "DataFetchingUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DataFetchingUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DataFetchingUtils.class)", "var_name": "LOG"}, {"original_string": "private final List<String> corporateIds = new ArrayList<>();", "modifier": "private final", "type": "List<String>", "declarator": "corporateIds = new ArrayList<>()", "var_name": "corporateIds"}], "methods": [{"identifier": "getProductWithCommercialDeliveries", "parameters": "(final RepositoryHandler repoHandler)", "modifiers": "public", "return": "List<DbProduct>", "signature": "List<DbProduct> getProductWithCommercialDeliveries(final RepositoryHandler repoHandler)", "full_signature": "public List<DbProduct> getProductWithCommercialDeliveries(final RepositoryHandler repoHandler)", "class_method_signature": "DataFetchingUtils.getProductWithCommercialDeliveries(final RepositoryHandler repoHandler)", "testcase": false, "constructor": false}, {"identifier": "getCommercialDelivery", "parameters": "(final RepositoryHandler repoHandler,\n                                                    final String name,\n                                                    final String version)", "modifiers": "public", "return": "Optional<Delivery>", "signature": "Optional<Delivery> getCommercialDelivery(final RepositoryHandler repoHandler,\n                                                    final String name,\n                                                    final String version)", "full_signature": "public Optional<Delivery> getCommercialDelivery(final RepositoryHandler repoHandler,\n                                                    final String name,\n                                                    final String version)", "class_method_signature": "DataFetchingUtils.getCommercialDelivery(final RepositoryHandler repoHandler,\n                                                    final String name,\n                                                    final String version)", "testcase": false, "constructor": false}, {"identifier": "getDeliveryDependencies", "parameters": "(final RepositoryHandler repoHandler,\n                                               final DependencyHandler depHandler,\n                                               final Delivery delivery)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getDeliveryDependencies(final RepositoryHandler repoHandler,\n                                               final DependencyHandler depHandler,\n                                               final Delivery delivery)", "full_signature": "public Set<String> getDeliveryDependencies(final RepositoryHandler repoHandler,\n                                               final DependencyHandler depHandler,\n                                               final Delivery delivery)", "class_method_signature": "DataFetchingUtils.getDeliveryDependencies(final RepositoryHandler repoHandler,\n                                               final DependencyHandler depHandler,\n                                               final Delivery delivery)", "testcase": false, "constructor": false}, {"identifier": "initCorporateIDs", "parameters": "(final RepositoryHandler repoHandler,\n                                 final String orgName)", "modifiers": "public", "return": "void", "signature": "void initCorporateIDs(final RepositoryHandler repoHandler,\n                                 final String orgName)", "full_signature": "public void initCorporateIDs(final RepositoryHandler repoHandler,\n                                 final String orgName)", "class_method_signature": "DataFetchingUtils.initCorporateIDs(final RepositoryHandler repoHandler,\n                                 final String orgName)", "testcase": false, "constructor": false}, {"identifier": "isThirdParty", "parameters": "(final DbArtifact artifact)", "modifiers": "public", "return": "boolean", "signature": "boolean isThirdParty(final DbArtifact artifact)", "full_signature": "public boolean isThirdParty(final DbArtifact artifact)", "class_method_signature": "DataFetchingUtils.isThirdParty(final DbArtifact artifact)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/axway/grapes/server/reports/utils/DataFetchingUtils.java"}, "focal_method": {"identifier": "getCommercialDelivery", "parameters": "(final RepositoryHandler repoHandler,\n                                                    final String name,\n                                                    final String version)", "modifiers": "public", "return": "Optional<Delivery>", "body": "public Optional<Delivery> getCommercialDelivery(final RepositoryHandler repoHandler,\n                                                    final String name,\n                                                    final String version) {\n\n        final Optional<DbProduct> productOptional = repoHandler.getOneByQuery(DbCollections.DB_PRODUCT,\n                makeQuery(name, version),\n                DbProduct.class);\n\n        if(!productOptional.isPresent()) {\n            return Optional.empty();\n        }\n\n        final DbProduct dbProduct = productOptional.get();\n\n        final List<Delivery> filtered = dbProduct.getDeliveries()\n                .stream()\n                .filter(d -> d.getCommercialName().equals(name) &&\n                        d.getCommercialVersion().equals(version)\n\n                )\n                .collect(Collectors.toList());\n\n        if(filtered.isEmpty()) {\n            return Optional.empty();\n        }\n\n        if (filtered.size() > 1 && LOG.isWarnEnabled()) {\n            LOG.warn(String.format(\"Multiple commercial version entries found for [%s] [%s]\", name, version));\n        }\n\n        return Optional.of(filtered.get(0));\n    }", "signature": "Optional<Delivery> getCommercialDelivery(final RepositoryHandler repoHandler,\n                                                    final String name,\n                                                    final String version)", "full_signature": "public Optional<Delivery> getCommercialDelivery(final RepositoryHandler repoHandler,\n                                                    final String name,\n                                                    final String version)", "class_method_signature": "DataFetchingUtils.getCommercialDelivery(final RepositoryHandler repoHandler,\n                                                    final String name,\n                                                    final String version)", "testcase": false, "constructor": false, "invocations": ["getOneByQuery", "makeQuery", "isPresent", "empty", "get", "collect", "filter", "stream", "getDeliveries", "equals", "getCommercialName", "equals", "getCommercialVersion", "toList", "isEmpty", "empty", "size", "isWarnEnabled", "warn", "format", "of", "get"]}, "repository": {"repo_id": 14858974, "url": "https://github.com/Axway/Grapes", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 8, "size": 3620, "license": "licensed"}}