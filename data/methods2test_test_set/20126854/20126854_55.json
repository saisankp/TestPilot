{"test_class": {"identifier": "FileByFileV1DeltaApplierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final JreDeflateParameters PARAMS1 = JreDeflateParameters.of(6, 0, true);", "modifier": "private static final", "type": "JreDeflateParameters", "declarator": "PARAMS1 = JreDeflateParameters.of(6, 0, true)", "var_name": "PARAMS1"}, {"original_string": "private static final String OLD_CONTENT = \"This is Content the Old\";", "modifier": "private static final", "type": "String", "declarator": "OLD_CONTENT = \"This is Content the Old\"", "var_name": "OLD_CONTENT"}, {"original_string": "private static final UnitTestZipEntry OLD_ENTRY =\n      new UnitTestZipEntry(\"/foo\", PARAMS1.level, PARAMS1.nowrap, OLD_CONTENT, null);", "modifier": "private static final", "type": "UnitTestZipEntry", "declarator": "OLD_ENTRY =\n      new UnitTestZipEntry(\"/foo\", PARAMS1.level, PARAMS1.nowrap, OLD_CONTENT, null)", "var_name": "OLD_ENTRY"}, {"original_string": "private static final String NEW_CONTENT = \"Rambunctious Absinthe-Loving Stegosaurus\";", "modifier": "private static final", "type": "String", "declarator": "NEW_CONTENT = \"Rambunctious Absinthe-Loving Stegosaurus\"", "var_name": "NEW_CONTENT"}, {"original_string": "private static final UnitTestZipEntry NEW_ENTRY =\n      new UnitTestZipEntry(\"/foo\", PARAMS1.level, PARAMS1.nowrap, NEW_CONTENT, null);", "modifier": "private static final", "type": "UnitTestZipEntry", "declarator": "NEW_ENTRY =\n      new UnitTestZipEntry(\"/foo\", PARAMS1.level, PARAMS1.nowrap, NEW_CONTENT, null)", "var_name": "NEW_ENTRY"}, {"original_string": "private static final byte[] UNCOMPRESSED_HEADER = new byte[] {0, 1, 2, 3, 4};", "modifier": "private static final", "type": "byte[]", "declarator": "UNCOMPRESSED_HEADER = new byte[] {0, 1, 2, 3, 4}", "var_name": "UNCOMPRESSED_HEADER"}, {"original_string": "private static final byte[] UNCOMPRESSED_OLD_CONTENT = OLD_ENTRY.getUncompressedBinaryContent();", "modifier": "private static final", "type": "byte[]", "declarator": "UNCOMPRESSED_OLD_CONTENT = OLD_ENTRY.getUncompressedBinaryContent()", "var_name": "UNCOMPRESSED_OLD_CONTENT"}, {"original_string": "private static final byte[] COMPRESSED_OLD_CONTENT = OLD_ENTRY.getCompressedBinaryContent();", "modifier": "private static final", "type": "byte[]", "declarator": "COMPRESSED_OLD_CONTENT = OLD_ENTRY.getCompressedBinaryContent()", "var_name": "COMPRESSED_OLD_CONTENT"}, {"original_string": "private static final byte[] UNCOMPRESSED_NEW_CONTENT = NEW_ENTRY.getUncompressedBinaryContent();", "modifier": "private static final", "type": "byte[]", "declarator": "UNCOMPRESSED_NEW_CONTENT = NEW_ENTRY.getUncompressedBinaryContent()", "var_name": "UNCOMPRESSED_NEW_CONTENT"}, {"original_string": "private static final byte[] COMPRESSED_NEW_CONTENT = NEW_ENTRY.getCompressedBinaryContent();", "modifier": "private static final", "type": "byte[]", "declarator": "COMPRESSED_NEW_CONTENT = NEW_ENTRY.getCompressedBinaryContent()", "var_name": "COMPRESSED_NEW_CONTENT"}, {"original_string": "private static final byte[] UNCOMPRESSED_TRAILER = new byte[] {5, 6, 7, 8, 9};", "modifier": "private static final", "type": "byte[]", "declarator": "UNCOMPRESSED_TRAILER = new byte[] {5, 6, 7, 8, 9}", "var_name": "UNCOMPRESSED_TRAILER"}, {"original_string": "private static final String BSDIFF_DELTA = \"1337 h4x0r\";", "modifier": "private static final", "type": "String", "declarator": "BSDIFF_DELTA = \"1337 h4x0r\"", "var_name": "BSDIFF_DELTA"}, {"original_string": "private File tempDir;", "modifier": "private", "type": "File", "declarator": "tempDir", "var_name": "tempDir"}, {"original_string": "private File oldFile;", "modifier": "private", "type": "File", "declarator": "oldFile", "var_name": "oldFile"}, {"original_string": "private byte[] patchBytes;", "modifier": "private", "type": "byte[]", "declarator": "patchBytes", "var_name": "patchBytes"}, {"original_string": "private byte[] expectedNewBytes;", "modifier": "private", "type": "byte[]", "declarator": "expectedNewBytes", "var_name": "expectedNewBytes"}, {"original_string": "private byte[] oldFileBytes;", "modifier": "private", "type": "byte[]", "declarator": "oldFileBytes", "var_name": "oldFileBytes"}, {"original_string": "private byte[] expectedDeltaFriendlyOldFileBytes;", "modifier": "private", "type": "byte[]", "declarator": "expectedDeltaFriendlyOldFileBytes", "var_name": "expectedDeltaFriendlyOldFileBytes"}, {"original_string": "private FileByFileV1DeltaApplier fakeApplier;", "modifier": "private", "type": "FileByFileV1DeltaApplier", "declarator": "fakeApplier", "var_name": "fakeApplier"}], "file": "feya/libraries/archive_diff/diff.applier/src/test/java/com/google/archivepatcher/applier/FileByFileV1DeltaApplierTest.java"}, "test_case": {"identifier": "testApplyDelta_DoesntCloseStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testApplyDelta_DoesntCloseStream() throws IOException {\n    // Test for https://github.com/andrewhayden/archive-patcher/issues/6\n    final AtomicBoolean closed = new AtomicBoolean(false);\n    ByteArrayOutputStream actualNewBlobOut = new ByteArrayOutputStream() {\n      @Override\n      public void close() throws IOException {\n        closed.set(true);\n      }\n    };\n    fakeApplier.applyDelta(oldFile, new ByteArrayInputStream(patchBytes), actualNewBlobOut);\n    Assert.assertArrayEquals(expectedNewBytes, actualNewBlobOut.toByteArray());\n    Assert.assertFalse(closed.get());\n  }", "signature": "void testApplyDelta_DoesntCloseStream()", "full_signature": "@Test public void testApplyDelta_DoesntCloseStream()", "class_method_signature": "FileByFileV1DeltaApplierTest.testApplyDelta_DoesntCloseStream()", "testcase": true, "constructor": false, "invocations": ["set", "applyDelta", "assertArrayEquals", "toByteArray", "assertFalse", "get"]}, "focal_class": {"identifier": "FileByFileV1DeltaApplier", "superclass": "", "interfaces": "implements DeltaApplier", "fields": [{"original_string": "private static final int DEFAULT_COPY_BUFFER_SIZE = 32768;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_COPY_BUFFER_SIZE = 32768", "var_name": "DEFAULT_COPY_BUFFER_SIZE"}, {"original_string": "private final File tempDir;", "modifier": "private final", "type": "File", "declarator": "tempDir", "var_name": "tempDir"}], "methods": [{"identifier": "FileByFileV1DeltaApplier", "parameters": "()", "modifiers": "public", "return": "", "signature": " FileByFileV1DeltaApplier()", "full_signature": "public  FileByFileV1DeltaApplier()", "class_method_signature": "FileByFileV1DeltaApplier.FileByFileV1DeltaApplier()", "testcase": false, "constructor": true}, {"identifier": "FileByFileV1DeltaApplier", "parameters": "(File tempDir)", "modifiers": "public", "return": "", "signature": " FileByFileV1DeltaApplier(File tempDir)", "full_signature": "public  FileByFileV1DeltaApplier(File tempDir)", "class_method_signature": "FileByFileV1DeltaApplier.FileByFileV1DeltaApplier(File tempDir)", "testcase": false, "constructor": true}, {"identifier": "applyDelta", "parameters": "(File oldBlob, InputStream deltaIn, OutputStream newBlobOut)", "modifiers": "@Override public", "return": "void", "signature": "void applyDelta(File oldBlob, InputStream deltaIn, OutputStream newBlobOut)", "full_signature": "@Override public void applyDelta(File oldBlob, InputStream deltaIn, OutputStream newBlobOut)", "class_method_signature": "FileByFileV1DeltaApplier.applyDelta(File oldBlob, InputStream deltaIn, OutputStream newBlobOut)", "testcase": false, "constructor": false}, {"identifier": "applyDeltaInternal", "parameters": "(\n      File oldBlob, File deltaFriendlyOldBlob, InputStream deltaIn, OutputStream newBlobOut)", "modifiers": "private", "return": "void", "signature": "void applyDeltaInternal(\n      File oldBlob, File deltaFriendlyOldBlob, InputStream deltaIn, OutputStream newBlobOut)", "full_signature": "private void applyDeltaInternal(\n      File oldBlob, File deltaFriendlyOldBlob, InputStream deltaIn, OutputStream newBlobOut)", "class_method_signature": "FileByFileV1DeltaApplier.applyDeltaInternal(\n      File oldBlob, File deltaFriendlyOldBlob, InputStream deltaIn, OutputStream newBlobOut)", "testcase": false, "constructor": false}, {"identifier": "writeDeltaFriendlyOldBlob", "parameters": "(\n      PatchApplyPlan plan, File oldBlob, File deltaFriendlyOldBlob)", "modifiers": "private", "return": "void", "signature": "void writeDeltaFriendlyOldBlob(\n      PatchApplyPlan plan, File oldBlob, File deltaFriendlyOldBlob)", "full_signature": "private void writeDeltaFriendlyOldBlob(\n      PatchApplyPlan plan, File oldBlob, File deltaFriendlyOldBlob)", "class_method_signature": "FileByFileV1DeltaApplier.writeDeltaFriendlyOldBlob(\n      PatchApplyPlan plan, File oldBlob, File deltaFriendlyOldBlob)", "testcase": false, "constructor": false}, {"identifier": "getDeltaApplier", "parameters": "()", "modifiers": "protected", "return": "DeltaApplier", "signature": "DeltaApplier getDeltaApplier()", "full_signature": "protected DeltaApplier getDeltaApplier()", "class_method_signature": "FileByFileV1DeltaApplier.getDeltaApplier()", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.applier/src/main/java/com/google/archivepatcher/applier/FileByFileV1DeltaApplier.java"}, "focal_method": {"identifier": "applyDelta", "parameters": "(File oldBlob, InputStream deltaIn, OutputStream newBlobOut)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void applyDelta(File oldBlob, InputStream deltaIn, OutputStream newBlobOut)\n      throws IOException {\n    if (!tempDir.exists()) {\n      // Be nice, try to create the temp directory. Don't bother to check return value as the code\n      // will fail when it tries to create the file in a few more lines anyways.\n      tempDir.mkdirs();\n    }\n    File tempFile = File.createTempFile(\"gfbfv1\", \"old\", tempDir);\n    try {\n      applyDeltaInternal(oldBlob, tempFile, deltaIn, newBlobOut);\n    } finally {\n      tempFile.delete();\n    }\n  }", "signature": "void applyDelta(File oldBlob, InputStream deltaIn, OutputStream newBlobOut)", "full_signature": "@Override public void applyDelta(File oldBlob, InputStream deltaIn, OutputStream newBlobOut)", "class_method_signature": "FileByFileV1DeltaApplier.applyDelta(File oldBlob, InputStream deltaIn, OutputStream newBlobOut)", "testcase": false, "constructor": false, "invocations": ["exists", "mkdirs", "createTempFile", "applyDeltaInternal", "delete"]}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}