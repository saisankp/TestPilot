{"test_class": {"identifier": "ResourceFileNameHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String HTML = \"text/html\";", "modifier": "private static final", "type": "String", "declarator": "HTML = \"text/html\"", "var_name": "HTML"}, {"original_string": "private static final String TEXT = \"text/plain\";", "modifier": "private static final", "type": "String", "declarator": "TEXT = \"text/plain\"", "var_name": "TEXT"}, {"original_string": "private static final String CONTENT_DISPOSITION = \"Content-Disposition\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_DISPOSITION = \"Content-Disposition\"", "var_name": "CONTENT_DISPOSITION"}, {"original_string": "private static final String FILE_NOT_FOUND_MSG = \"Requested file not found.\";", "modifier": "private static final", "type": "String", "declarator": "FILE_NOT_FOUND_MSG = \"Requested file not found.\"", "var_name": "FILE_NOT_FOUND_MSG"}, {"original_string": "private static final String PATH_INFO = \"/filename\";", "modifier": "private static final", "type": "String", "declarator": "PATH_INFO = \"/filename\"", "var_name": "PATH_INFO"}, {"original_string": "private static final String FILE_NAME = \"filename\";", "modifier": "private static final", "type": "String", "declarator": "FILE_NAME = \"filename\"", "var_name": "FILE_NAME"}, {"original_string": "@Mock\n    private FileReader fileReader;", "modifier": "@Mock\n    private", "type": "FileReader", "declarator": "fileReader", "var_name": "fileReader"}, {"original_string": "@Mock\n    private HttpServletRequest request;", "modifier": "@Mock\n    private", "type": "HttpServletRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock\n    private HttpServletResponse response;", "modifier": "@Mock\n    private", "type": "HttpServletResponse", "declarator": "response", "var_name": "response"}, {"original_string": "@Mock\n    private InputStream inputStream;", "modifier": "@Mock\n    private", "type": "InputStream", "declarator": "inputStream", "var_name": "inputStream"}, {"original_string": "@Mock\n    private PrintWriter writer;", "modifier": "@Mock\n    private", "type": "PrintWriter", "declarator": "writer", "var_name": "writer"}, {"original_string": "@Mock\n    private ServletOutputStream outputStream;", "modifier": "@Mock\n    private", "type": "ServletOutputStream", "declarator": "outputStream", "var_name": "outputStream"}, {"original_string": "@Mock\n    private Path path;", "modifier": "@Mock\n    private", "type": "Path", "declarator": "path", "var_name": "path"}, {"original_string": "@InjectMocks\n    private ResourceFileNameHandler underTest;", "modifier": "@InjectMocks\n    private", "type": "ResourceFileNameHandler", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/config/servlet/stub/helper/ResourceFileNameHandlerTest.java"}, "test_case": {"identifier": "testWriteResourceFileShouldWriteInputStreamToOutputStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWriteResourceFileShouldWriteInputStreamToOutputStream() throws IOException {\n        //GIVEN\n        given(fileReader.readFile(FILE_NAME, path)).willReturn(inputStream);\n        given(response.getOutputStream()).willReturn(outputStream);\n        given(inputStream.read(Mockito.any(byte[].class))).willReturn(1, -1);\n        //WHEN\n        underTest.writeResourceFile(response, PATH_INFO, path);\n        //THEN\n        verify(outputStream).write(Mockito.any(byte[].class), Mockito.eq(0), Mockito.eq(1));\n    }", "signature": "void testWriteResourceFileShouldWriteInputStreamToOutputStream()", "full_signature": "@Test public void testWriteResourceFileShouldWriteInputStreamToOutputStream()", "class_method_signature": "ResourceFileNameHandlerTest.testWriteResourceFileShouldWriteInputStreamToOutputStream()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "readFile", "willReturn", "given", "getOutputStream", "willReturn", "given", "read", "any", "writeResourceFile", "write", "verify", "any", "eq", "eq"]}, "focal_class": {"identifier": "ResourceFileNameHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEXT_HTML = \"text/html\";", "modifier": "private static final", "type": "String", "declarator": "TEXT_HTML = \"text/html\"", "var_name": "TEXT_HTML"}, {"original_string": "private static final String TEXT_PLAIN = \"text/plain\";", "modifier": "private static final", "type": "String", "declarator": "TEXT_PLAIN = \"text/plain\"", "var_name": "TEXT_PLAIN"}, {"original_string": "private static final String CONTENT_DISPOSITION = \"Content-Disposition\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_DISPOSITION = \"Content-Disposition\"", "var_name": "CONTENT_DISPOSITION"}, {"original_string": "private static final String FILE_NOT_FOUND_MSG = \"Requested file not found.\";", "modifier": "private static final", "type": "String", "declarator": "FILE_NOT_FOUND_MSG = \"Requested file not found.\"", "var_name": "FILE_NOT_FOUND_MSG"}, {"original_string": "private static final int BYTES_TO_READ = 1024;", "modifier": "private static final", "type": "int", "declarator": "BYTES_TO_READ = 1024", "var_name": "BYTES_TO_READ"}, {"original_string": "@Autowired\n    private FileReader fileReader;", "modifier": "@Autowired\n    private", "type": "FileReader", "declarator": "fileReader", "var_name": "fileReader"}], "methods": [{"identifier": "writeResourceFile", "parameters": "(final HttpServletResponse resp, final String path, final Path filePath)", "modifiers": "public", "return": "void", "signature": "void writeResourceFile(final HttpServletResponse resp, final String path, final Path filePath)", "full_signature": "public void writeResourceFile(final HttpServletResponse resp, final String path, final Path filePath)", "class_method_signature": "ResourceFileNameHandler.writeResourceFile(final HttpServletResponse resp, final String path, final Path filePath)", "testcase": false, "constructor": false}, {"identifier": "messageFileExists", "parameters": "(final InputStream inputStream)", "modifiers": "private", "return": "boolean", "signature": "boolean messageFileExists(final InputStream inputStream)", "full_signature": "private boolean messageFileExists(final InputStream inputStream)", "class_method_signature": "ResourceFileNameHandler.messageFileExists(final InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "writeResourceFileInResponse", "parameters": "(final HttpServletResponse resp, final String requestedFilename, final InputStream messageFileInputStream)", "modifiers": "private", "return": "void", "signature": "void writeResourceFileInResponse(final HttpServletResponse resp, final String requestedFilename, final InputStream messageFileInputStream)", "full_signature": "private void writeResourceFileInResponse(final HttpServletResponse resp, final String requestedFilename, final InputStream messageFileInputStream)", "class_method_signature": "ResourceFileNameHandler.writeResourceFileInResponse(final HttpServletResponse resp, final String requestedFilename, final InputStream messageFileInputStream)", "testcase": false, "constructor": false}, {"identifier": "setHeaders", "parameters": "(final HttpServletResponse resp, final String requestedFilename)", "modifiers": "private", "return": "void", "signature": "void setHeaders(final HttpServletResponse resp, final String requestedFilename)", "full_signature": "private void setHeaders(final HttpServletResponse resp, final String requestedFilename)", "class_method_signature": "ResourceFileNameHandler.setHeaders(final HttpServletResponse resp, final String requestedFilename)", "testcase": false, "constructor": false}, {"identifier": "writeFileToOutputStream", "parameters": "(final InputStream messageFileInputStream, final ServletOutputStream out)", "modifiers": "private", "return": "void", "signature": "void writeFileToOutputStream(final InputStream messageFileInputStream, final ServletOutputStream out)", "full_signature": "private void writeFileToOutputStream(final InputStream messageFileInputStream, final ServletOutputStream out)", "class_method_signature": "ResourceFileNameHandler.writeFileToOutputStream(final InputStream messageFileInputStream, final ServletOutputStream out)", "testcase": false, "constructor": false}, {"identifier": "writeErrorToResponse", "parameters": "(final HttpServletResponse resp)", "modifiers": "private", "return": "void", "signature": "void writeErrorToResponse(final HttpServletResponse resp)", "full_signature": "private void writeErrorToResponse(final HttpServletResponse resp)", "class_method_signature": "ResourceFileNameHandler.writeErrorToResponse(final HttpServletResponse resp)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/config/servlet/stub/helper/ResourceFileNameHandler.java"}, "focal_method": {"identifier": "writeResourceFile", "parameters": "(final HttpServletResponse resp, final String path, final Path filePath)", "modifiers": "public", "return": "void", "body": "public void writeResourceFile(final HttpServletResponse resp, final String path, final Path filePath) throws IOException {\n        String requestedFilename = path.substring(1);\n        InputStream messageFileInputStream = fileReader.readFile(requestedFilename, filePath);\n        if (messageFileExists(messageFileInputStream)) {\n            writeResourceFileInResponse(resp, requestedFilename, messageFileInputStream);\n        } else {\n            writeErrorToResponse(resp);\n        }\n    }", "signature": "void writeResourceFile(final HttpServletResponse resp, final String path, final Path filePath)", "full_signature": "public void writeResourceFile(final HttpServletResponse resp, final String path, final Path filePath)", "class_method_signature": "ResourceFileNameHandler.writeResourceFile(final HttpServletResponse resp, final String path, final Path filePath)", "testcase": false, "constructor": false, "invocations": ["substring", "readFile", "messageFileExists", "writeResourceFileInResponse", "writeErrorToResponse"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}