{"test_class": {"identifier": "Ecc25519HelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "ECC-25519-Java/src/test/java/net/vrallev/java/ecc/Ecc25519HelperTest.java"}, "test_case": {"identifier": "ecc25519HelperSignIsSideEffectFreeOnPrivateKeyParameter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void ecc25519HelperSignIsSideEffectFreeOnPrivateKeyParameter() {\n        // ensure that clamping of pk2 is side-effect free.\n        // the .clone() calls are to make sure no other side effects affect the outcome.\n        final byte[] pk1 = KeyHolder.createPrivateKey(\"hello\".getBytes());\n        final byte[] pk2 = pk1.clone();\n\n        byte[] sig = new Ecc25519Helper().sign(\"message\".getBytes(), pk2, new KeyHolder(pk1.clone()).getPublicKeySignature());\n\n        assertArrayEquals(pk1, pk2);\n    }", "signature": "void ecc25519HelperSignIsSideEffectFreeOnPrivateKeyParameter()", "full_signature": "@Test public void ecc25519HelperSignIsSideEffectFreeOnPrivateKeyParameter()", "class_method_signature": "Ecc25519HelperTest.ecc25519HelperSignIsSideEffectFreeOnPrivateKeyParameter()", "testcase": true, "constructor": false, "invocations": ["createPrivateKey", "getBytes", "clone", "sign", "getBytes", "getPublicKeySignature", "clone", "assertArrayEquals"]}, "focal_class": {"identifier": "Ecc25519Helper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final KeyHolder mKeyHolder;", "modifier": "private final", "type": "KeyHolder", "declarator": "mKeyHolder", "var_name": "mKeyHolder"}, {"original_string": "private final EdDSAEngine mEdDSAEngine;", "modifier": "private final", "type": "EdDSAEngine", "declarator": "mEdDSAEngine", "var_name": "mEdDSAEngine"}], "methods": [{"identifier": "getSha256Digest", "parameters": "()", "modifiers": "static", "return": "MessageDigest", "signature": "MessageDigest getSha256Digest()", "full_signature": "static MessageDigest getSha256Digest()", "class_method_signature": "Ecc25519Helper.getSha256Digest()", "testcase": false, "constructor": false}, {"identifier": "getSha512Digest", "parameters": "()", "modifiers": "static", "return": "MessageDigest", "signature": "MessageDigest getSha512Digest()", "full_signature": "static MessageDigest getSha512Digest()", "class_method_signature": "Ecc25519Helper.getSha512Digest()", "testcase": false, "constructor": false}, {"identifier": "Ecc25519Helper", "parameters": "()", "modifiers": "public", "return": "", "signature": " Ecc25519Helper()", "full_signature": "public  Ecc25519Helper()", "class_method_signature": "Ecc25519Helper.Ecc25519Helper()", "testcase": false, "constructor": true}, {"identifier": "Ecc25519Helper", "parameters": "(byte[] privateKey)", "modifiers": "public", "return": "", "signature": " Ecc25519Helper(byte[] privateKey)", "full_signature": "public  Ecc25519Helper(byte[] privateKey)", "class_method_signature": "Ecc25519Helper.Ecc25519Helper(byte[] privateKey)", "testcase": false, "constructor": true}, {"identifier": "Ecc25519Helper", "parameters": "(KeyHolder keyHolder)", "modifiers": "public", "return": "", "signature": " Ecc25519Helper(KeyHolder keyHolder)", "full_signature": "public  Ecc25519Helper(KeyHolder keyHolder)", "class_method_signature": "Ecc25519Helper.Ecc25519Helper(KeyHolder keyHolder)", "testcase": false, "constructor": true}, {"identifier": "diffieHellman", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] diffieHellman()", "full_signature": "public byte[] diffieHellman()", "class_method_signature": "Ecc25519Helper.diffieHellman()", "testcase": false, "constructor": false}, {"identifier": "diffieHellman", "parameters": "(byte[] privateKey, byte[] publicKey)", "modifiers": "public", "return": "byte[]", "signature": "byte[] diffieHellman(byte[] privateKey, byte[] publicKey)", "full_signature": "public byte[] diffieHellman(byte[] privateKey, byte[] publicKey)", "class_method_signature": "Ecc25519Helper.diffieHellman(byte[] privateKey, byte[] publicKey)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(byte[] message)", "modifiers": "public", "return": "byte[]", "signature": "byte[] sign(byte[] message)", "full_signature": "public byte[] sign(byte[] message)", "class_method_signature": "Ecc25519Helper.sign(byte[] message)", "testcase": false, "constructor": false}, {"identifier": "sign", "parameters": "(byte[] message, byte[] privateKey, byte[] publicKey)", "modifiers": "public", "return": "byte[]", "signature": "byte[] sign(byte[] message, byte[] privateKey, byte[] publicKey)", "full_signature": "public byte[] sign(byte[] message, byte[] privateKey, byte[] publicKey)", "class_method_signature": "Ecc25519Helper.sign(byte[] message, byte[] privateKey, byte[] publicKey)", "testcase": false, "constructor": false}, {"identifier": "signWithoutClamp", "parameters": "(byte[] message, byte[] privateKey, byte[] publicKey)", "modifiers": "protected", "return": "byte[]", "signature": "byte[] signWithoutClamp(byte[] message, byte[] privateKey, byte[] publicKey)", "full_signature": "protected byte[] signWithoutClamp(byte[] message, byte[] privateKey, byte[] publicKey)", "class_method_signature": "Ecc25519Helper.signWithoutClamp(byte[] message, byte[] privateKey, byte[] publicKey)", "testcase": false, "constructor": false}, {"identifier": "isValidSignature", "parameters": "(byte[] message, byte[] signature)", "modifiers": "public", "return": "boolean", "signature": "boolean isValidSignature(byte[] message, byte[] signature)", "full_signature": "public boolean isValidSignature(byte[] message, byte[] signature)", "class_method_signature": "Ecc25519Helper.isValidSignature(byte[] message, byte[] signature)", "testcase": false, "constructor": false}, {"identifier": "isValidSignature", "parameters": "(byte[] message, byte[] signature, byte[] publicKey)", "modifiers": "public", "return": "boolean", "signature": "boolean isValidSignature(byte[] message, byte[] signature, byte[] publicKey)", "full_signature": "public boolean isValidSignature(byte[] message, byte[] signature, byte[] publicKey)", "class_method_signature": "Ecc25519Helper.isValidSignature(byte[] message, byte[] signature, byte[] publicKey)", "testcase": false, "constructor": false}, {"identifier": "getKeyHolder", "parameters": "()", "modifiers": "public", "return": "KeyHolder", "signature": "KeyHolder getKeyHolder()", "full_signature": "public KeyHolder getKeyHolder()", "class_method_signature": "Ecc25519Helper.getKeyHolder()", "testcase": false, "constructor": false}], "file": "ECC-25519-Java/src/main/java/net/vrallev/java/ecc/Ecc25519Helper.java"}, "focal_method": {"identifier": "sign", "parameters": "(byte[] message)", "modifiers": "public", "return": "byte[]", "body": "public byte[] sign(byte[] message) {\n        return signWithoutClamp(message, mKeyHolder.getPrivateKey(), mKeyHolder.getPublicKeySignature());\n    }", "signature": "byte[] sign(byte[] message)", "full_signature": "public byte[] sign(byte[] message)", "class_method_signature": "Ecc25519Helper.sign(byte[] message)", "testcase": false, "constructor": false, "invocations": ["signWithoutClamp", "getPrivateKey", "getPublicKeySignature"]}, "repository": {"repo_id": 20129608, "url": "https://github.com/vRallev/ECC-25519", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 20, "size": 269, "license": "licensed"}}