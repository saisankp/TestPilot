{"test_class": {"identifier": "GenericAttributeContentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ATTRIB1_CONTENT = \"    <boringAttribute>\" +\n                                                  \"      <field>\" +\n                                                  \"        <name>color</name>\" +\n                                                  \"        <value>green</value>\" +\n                                                  \"      </field>\" +\n                                                  \"      <field>\" +\n                                                  \"        <name>shape</name>\" +\n                                                  \"        <value>circle</value>\" +\n                                                  \"      </field>\" +\n                                                  \"    </boringAttribute>\";", "modifier": "private static final", "type": "String", "declarator": "ATTRIB1_CONTENT = \"    <boringAttribute>\" +\n                                                  \"      <field>\" +\n                                                  \"        <name>color</name>\" +\n                                                  \"        <value>green</value>\" +\n                                                  \"      </field>\" +\n                                                  \"      <field>\" +\n                                                  \"        <name>shape</name>\" +\n                                                  \"        <value>circle</value>\" +\n                                                  \"      </field>\" +\n                                                  \"    </boringAttribute>\"", "var_name": "ATTRIB1_CONTENT"}, {"original_string": "private static final String ATTRIB2_CONTENT = \"    <coolAttribute>\" +\n                                                  \"      <field>\" +\n                                                  \"        <name>car</name>\" +\n                                                  \"        <value>KIT</value>\" +\n                                                  \"      </field>\" +\n                                                  \"      <field>\" +\n                                                  \"        <name>driver</name>\" +\n                                                  \"        <value>hasselhof</value>\" +\n                                                  \"      </field>\" +\n                                                  \"    </coolAttribute>\";", "modifier": "private static final", "type": "String", "declarator": "ATTRIB2_CONTENT = \"    <coolAttribute>\" +\n                                                  \"      <field>\" +\n                                                  \"        <name>car</name>\" +\n                                                  \"        <value>KIT</value>\" +\n                                                  \"      </field>\" +\n                                                  \"      <field>\" +\n                                                  \"        <name>driver</name>\" +\n                                                  \"        <value>hasselhof</value>\" +\n                                                  \"      </field>\" +\n                                                  \"    </coolAttribute>\"", "var_name": "ATTRIB2_CONTENT"}, {"original_string": "private static final String ATTRIB2_CONTENT_REVERSED = \"    <coolAttribute>\" +\n                                                           \"      <field>\" +\n                                                            \"        <name>driver</name>\" +\n                                                            \"        <value>hasselhof</value>\" +\n                                                            \"      </field>\" +\n                                                            \"      <field>\" +\n                                                            \"        <name>car</name>\" +\n                                                            \"        <value>KIT</value>\" +\n                                                            \"      </field>\" +\n                                                            \"    </coolAttribute>\";", "modifier": "private static final", "type": "String", "declarator": "ATTRIB2_CONTENT_REVERSED = \"    <coolAttribute>\" +\n                                                           \"      <field>\" +\n                                                            \"        <name>driver</name>\" +\n                                                            \"        <value>hasselhof</value>\" +\n                                                            \"      </field>\" +\n                                                            \"      <field>\" +\n                                                            \"        <name>car</name>\" +\n                                                            \"        <value>KIT</value>\" +\n                                                            \"      </field>\" +\n                                                            \"    </coolAttribute>\"", "var_name": "ATTRIB2_CONTENT_REVERSED"}, {"original_string": "private static final String TEST_CONTENT = \"<documentContent>\" +\n                                               \"  <attributeContent>\" +\n                                               ATTRIB1_CONTENT +\n                                               ATTRIB2_CONTENT +\n                                               \"  </attributeContent>\" +\n                                               \"</documentContent>\";", "modifier": "private static final", "type": "String", "declarator": "TEST_CONTENT = \"<documentContent>\" +\n                                               \"  <attributeContent>\" +\n                                               ATTRIB1_CONTENT +\n                                               ATTRIB2_CONTENT +\n                                               \"  </attributeContent>\" +\n                                               \"</documentContent>\"", "var_name": "TEST_CONTENT"}], "file": "rice-middleware/impl/src/test/java/org/kuali/rice/kew/rule/GenericAttributeContentTest.java"}, "test_case": {"identifier": "testGenerateContent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testGenerateContent() throws Exception {\n        DocumentContent dc = new StandardDocumentContent(TEST_CONTENT);\n        GenericAttributeContent gac = new GenericAttributeContent(\"boringAttribute\");\n        List<Map<String, String>> attrs = gac.parseContent(dc.getAttributeContent());\n        assertEquals(1, attrs.size());\n        Map<String, String> properties = attrs.get(0);\n        assertEquals(2, properties.size());\n        assertEquals(\"green\", properties.get(\"color\"));\n        assertEquals(\"circle\", properties.get(\"shape\"));\n        String content = gac.generateContent(properties);\n        assertEquals(content.replaceAll(\"\\\\s+\", \"\"), ATTRIB1_CONTENT.replaceAll(\"\\\\s+\", \"\"));\n\n        gac = new GenericAttributeContent(\"coolAttribute\");\n        attrs = gac.parseContent(dc.getAttributeContent());\n        assertEquals(1, attrs.size());\n        properties = attrs.get(0);\n        assertEquals(2, properties.size());\n        assertEquals(\"hasselhof\", properties.get(\"driver\"));\n        assertEquals(\"KIT\", properties.get(\"car\"));\n        content = gac.generateContent(properties);\n\n        // order is not guaranteed\n        List<String> validValues = Arrays.asList(ATTRIB2_CONTENT.replaceAll(\"\\\\s+\", \"\"), ATTRIB2_CONTENT_REVERSED.replaceAll(\n                \"\\\\s+\", \"\"));\n        content = content.replaceAll(\"\\\\s+\", \"\");\n        assertTrue(validValues.contains(content));\n    }", "signature": "void testGenerateContent()", "full_signature": "@Test public void testGenerateContent()", "class_method_signature": "GenericAttributeContentTest.testGenerateContent()", "testcase": true, "constructor": false, "invocations": ["parseContent", "getAttributeContent", "assertEquals", "size", "get", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "generateContent", "assertEquals", "replaceAll", "replaceAll", "parseContent", "getAttributeContent", "assertEquals", "size", "get", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "generateContent", "asList", "replaceAll", "replaceAll", "replaceAll", "assertTrue", "contains"]}, "focal_class": {"identifier": "GenericAttributeContent", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final XPathExpression NAME_EXPR;", "modifier": "private static final", "type": "XPathExpression", "declarator": "NAME_EXPR", "var_name": "NAME_EXPR"}, {"original_string": "private static final XPathExpression VALUE_EXPR;", "modifier": "private static final", "type": "XPathExpression", "declarator": "VALUE_EXPR", "var_name": "VALUE_EXPR"}, {"original_string": "private static final XPathExpression FIELD_EXPR;", "modifier": "private static final", "type": "XPathExpression", "declarator": "FIELD_EXPR", "var_name": "FIELD_EXPR"}, {"original_string": "private final Logger log;", "modifier": "private final", "type": "Logger", "declarator": "log", "var_name": "log"}, {"original_string": "private final String elementName;", "modifier": "private final", "type": "String", "declarator": "elementName", "var_name": "elementName"}, {"original_string": "private final XPathExpression attr_expr;", "modifier": "private final", "type": "XPathExpression", "declarator": "attr_expr", "var_name": "attr_expr"}], "methods": [{"identifier": "GenericAttributeContent", "parameters": "(Class clazz)", "modifiers": "public", "return": "", "signature": " GenericAttributeContent(Class clazz)", "full_signature": "public  GenericAttributeContent(Class clazz)", "class_method_signature": "GenericAttributeContent.GenericAttributeContent(Class clazz)", "testcase": false, "constructor": true}, {"identifier": "GenericAttributeContent", "parameters": "(String elementName)", "modifiers": "public", "return": "", "signature": " GenericAttributeContent(String elementName)", "full_signature": "public  GenericAttributeContent(String elementName)", "class_method_signature": "GenericAttributeContent.GenericAttributeContent(String elementName)", "testcase": false, "constructor": true}, {"identifier": "generateContent", "parameters": "(Map<String, String> properties)", "modifiers": "public", "return": "String", "signature": "String generateContent(Map<String, String> properties)", "full_signature": "public String generateContent(Map<String, String> properties)", "class_method_signature": "GenericAttributeContent.generateContent(Map<String, String> properties)", "testcase": false, "constructor": false}, {"identifier": "parseContent", "parameters": "(Element attributeContent)", "modifiers": "public", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> parseContent(Element attributeContent)", "full_signature": "public List<Map<String, String>> parseContent(Element attributeContent)", "class_method_signature": "GenericAttributeContent.parseContent(Element attributeContent)", "testcase": false, "constructor": false}], "file": "rice-middleware/impl/src/main/java/org/kuali/rice/kew/rule/GenericAttributeContent.java"}, "focal_method": {"identifier": "generateContent", "parameters": "(Map<String, String> properties)", "modifiers": "public", "return": "String", "body": "public String generateContent(Map<String, String> properties) {\n        if (properties.size() == 0) return \"<\" + elementName + \"/>\";\n\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"<\" + elementName + \">\\r\\n\");\n        for (Map.Entry<String, String> entry: properties.entrySet()) {\n            String key = entry.getKey();\n            sb.append(\"  <field>\\r\\n\");\n            if (key != null) {\n                sb.append(\"    <name>\" + key + \"</name>\\r\\n\");\n            } else {\n                log.warn(\"null key encountered\");\n            }\n            String value = entry.getValue();\n            if (value != null) {\n                sb.append(\"    <value>\" + entry.getValue() + \"</value>\\r\\n\");\n            } else {\n                log.warn(\"null value encountered for key: \" + key);\n            }\n            sb.append(\"  </field>\\r\\n\");\n        }\n        sb.append(\"</\" + elementName + \">\\r\\n\");\n\n        return sb.toString();\n    }", "signature": "String generateContent(Map<String, String> properties)", "full_signature": "public String generateContent(Map<String, String> properties)", "class_method_signature": "GenericAttributeContent.generateContent(Map<String, String> properties)", "testcase": false, "constructor": false, "invocations": ["size", "append", "entrySet", "getKey", "append", "append", "warn", "getValue", "append", "getValue", "warn", "append", "append", "toString"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}