{"test_class": {"identifier": "RollingColumnTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/tech/tablesaw/table/RollingColumnTest.java"}, "test_case": {"identifier": "testRollingCountTrue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRollingCountTrue() {\n    Boolean[] data = new Boolean[] {true, false, false, true, true};\n\n    BooleanColumn booleanColumn = BooleanColumn.create(\"data\", data);\n    DoubleColumn result = (DoubleColumn) booleanColumn.rolling(2).calc(countTrue);\n\n    assertEquals(Double.NaN, result.getDouble(0), 0.0);\n    assertEquals(1, result.getDouble(1), 0.0);\n    assertEquals(0, result.getDouble(2), 0.0);\n    assertEquals(1, result.getDouble(3), 0.0);\n    assertEquals(2, result.getDouble(4), 0.0);\n  }", "signature": "void testRollingCountTrue()", "full_signature": "@Test public void testRollingCountTrue()", "class_method_signature": "RollingColumnTest.testRollingCountTrue()", "testcase": true, "constructor": false, "invocations": ["create", "calc", "rolling", "assertEquals", "getDouble", "assertEquals", "getDouble", "assertEquals", "getDouble", "assertEquals", "getDouble", "assertEquals", "getDouble"]}, "focal_class": {"identifier": "RollingColumn", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final Column<?> column;", "modifier": "protected final", "type": "Column<?>", "declarator": "column", "var_name": "column"}, {"original_string": "protected final int window;", "modifier": "protected final", "type": "int", "declarator": "window", "var_name": "window"}], "methods": [{"identifier": "RollingColumn", "parameters": "(Column<?> column, int window)", "modifiers": "public", "return": "", "signature": " RollingColumn(Column<?> column, int window)", "full_signature": "public  RollingColumn(Column<?> column, int window)", "class_method_signature": "RollingColumn.RollingColumn(Column<?> column, int window)", "testcase": false, "constructor": true}, {"identifier": "generateNewColumnName", "parameters": "(AggregateFunction<?, ?> function)", "modifiers": "protected", "return": "String", "signature": "String generateNewColumnName(AggregateFunction<?, ?> function)", "full_signature": "protected String generateNewColumnName(AggregateFunction<?, ?> function)", "class_method_signature": "RollingColumn.generateNewColumnName(AggregateFunction<?, ?> function)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(AggregateFunction<INCOL, OUT> function)", "modifiers": "@SuppressWarnings({\"unchecked\"}) public", "return": "Column<?>", "signature": "Column<?> calc(AggregateFunction<INCOL, OUT> function)", "full_signature": "@SuppressWarnings({\"unchecked\"}) public Column<?> calc(AggregateFunction<INCOL, OUT> function)", "class_method_signature": "RollingColumn.calc(AggregateFunction<INCOL, OUT> function)", "testcase": false, "constructor": false}], "file": "core/src/main/java/tech/tablesaw/table/RollingColumn.java"}, "focal_method": {"identifier": "calc", "parameters": "(AggregateFunction<INCOL, OUT> function)", "modifiers": "@SuppressWarnings({\"unchecked\"}) public", "return": "Column<?>", "body": "@SuppressWarnings({\"unchecked\"})\n  public <INCOL extends Column<?>, OUT> Column<?> calc(AggregateFunction<INCOL, OUT> function) {\n    // TODO: the subset operation copies the array. creating a view would likely be more efficient\n    Column<?> result = function.returnType().create(generateNewColumnName(function));\n    for (int i = 0; i < window - 1; i++) {\n      result.appendMissing();\n    }\n    for (int origColIndex = 0; origColIndex < column.size() - window + 1; origColIndex++) {\n      Selection selection = new BitmapBackedSelection();\n      selection.addRange(origColIndex, origColIndex + window);\n      INCOL subsetCol = (INCOL) column.subset(selection.toArray());\n      OUT answer = function.summarize(subsetCol);\n      if (answer instanceof Number) {\n        Number number = (Number) answer;\n        ((DoubleColumn) result).append(number.doubleValue());\n      } else {\n        result.appendObj(answer);\n      }\n    }\n    return result;\n  }", "signature": "Column<?> calc(AggregateFunction<INCOL, OUT> function)", "full_signature": "@SuppressWarnings({\"unchecked\"}) public Column<?> calc(AggregateFunction<INCOL, OUT> function)", "class_method_signature": "RollingColumn.calc(AggregateFunction<INCOL, OUT> function)", "testcase": false, "constructor": false, "invocations": ["create", "returnType", "generateNewColumnName", "appendMissing", "size", "addRange", "subset", "toArray", "summarize", "append", "doubleValue", "appendObj"]}, "repository": {"repo_id": 48880766, "url": "https://github.com/jtablesaw/tablesaw", "stars": 2021, "created": "1/1/2016 2:58:28 PM +00:00", "updates": "2020-01-24T23:26:07+00:00", "fork": "False", "license": "licensed"}}