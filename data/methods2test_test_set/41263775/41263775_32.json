{"test_class": {"identifier": "QueryFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/src/test/java/com/googlecode/cqengine/query/QueryFactoryTest.java"}, "test_case": {"identifier": "testValidateSimpleFunctionGenericTypes_Success", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateSimpleFunctionGenericTypes_Success() {\n        Class<?>[] typeArgs = new Class<?>[] {Car.class, Integer.class};\n        validateSimpleFunctionGenericTypes(typeArgs, SimpleFunction.class);\n    }", "signature": "void testValidateSimpleFunctionGenericTypes_Success()", "full_signature": "@Test public void testValidateSimpleFunctionGenericTypes_Success()", "class_method_signature": "QueryFactoryTest.testValidateSimpleFunctionGenericTypes_Success()", "testcase": true, "constructor": false, "invocations": ["validateSimpleFunctionGenericTypes"]}, "focal_class": {"identifier": "QueryFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String GENERIC_TYPE_RESOLUTION_FAILURE_MESSAGE =\n            \"If the function you supplied was created from a lambda expression, then it's likely \" +\n                    \"that the host JVM does not allow the generic type information to be read from lambda expressions. \" +\n                    \"Alternatively, if you supplied a class-based implementation of the function, then you must ensure \" +\n                    \"that you specified the generic types of the function when it was compiled. \" +\n                    \"As a workaround, you can use the counterpart methods in QueryFactory \" +\n                    \"which allow the generic types to be specified explicitly.\";", "modifier": "static final", "type": "String", "declarator": "GENERIC_TYPE_RESOLUTION_FAILURE_MESSAGE =\n            \"If the function you supplied was created from a lambda expression, then it's likely \" +\n                    \"that the host JVM does not allow the generic type information to be read from lambda expressions. \" +\n                    \"Alternatively, if you supplied a class-based implementation of the function, then you must ensure \" +\n                    \"that you specified the generic types of the function when it was compiled. \" +\n                    \"As a workaround, you can use the counterpart methods in QueryFactory \" +\n                    \"which allow the generic types to be specified explicitly.\"", "var_name": "GENERIC_TYPE_RESOLUTION_FAILURE_MESSAGE"}], "methods": [{"identifier": "QueryFactory", "parameters": "()", "modifiers": "", "return": "", "signature": " QueryFactory()", "full_signature": "  QueryFactory()", "class_method_signature": "QueryFactory.QueryFactory()", "testcase": false, "constructor": true}, {"identifier": "equal", "parameters": "(Attribute<O, A> attribute, A attributeValue)", "modifiers": "public static", "return": "Equal<O, A>", "signature": "Equal<O, A> equal(Attribute<O, A> attribute, A attributeValue)", "full_signature": "public static Equal<O, A> equal(Attribute<O, A> attribute, A attributeValue)", "class_method_signature": "QueryFactory.equal(Attribute<O, A> attribute, A attributeValue)", "testcase": false, "constructor": false}, {"identifier": "lessThanOrEqualTo", "parameters": "(Attribute<O, A> attribute, A attributeValue)", "modifiers": "public static", "return": "LessThan<O, A>", "signature": "LessThan<O, A> lessThanOrEqualTo(Attribute<O, A> attribute, A attributeValue)", "full_signature": "public static LessThan<O, A> lessThanOrEqualTo(Attribute<O, A> attribute, A attributeValue)", "class_method_signature": "QueryFactory.lessThanOrEqualTo(Attribute<O, A> attribute, A attributeValue)", "testcase": false, "constructor": false}, {"identifier": "lessThan", "parameters": "(Attribute<O, A> attribute, A attributeValue)", "modifiers": "public static", "return": "LessThan<O, A>", "signature": "LessThan<O, A> lessThan(Attribute<O, A> attribute, A attributeValue)", "full_signature": "public static LessThan<O, A> lessThan(Attribute<O, A> attribute, A attributeValue)", "class_method_signature": "QueryFactory.lessThan(Attribute<O, A> attribute, A attributeValue)", "testcase": false, "constructor": false}, {"identifier": "greaterThanOrEqualTo", "parameters": "(Attribute<O, A> attribute, A attributeValue)", "modifiers": "public static", "return": "GreaterThan<O, A>", "signature": "GreaterThan<O, A> greaterThanOrEqualTo(Attribute<O, A> attribute, A attributeValue)", "full_signature": "public static GreaterThan<O, A> greaterThanOrEqualTo(Attribute<O, A> attribute, A attributeValue)", "class_method_signature": "QueryFactory.greaterThanOrEqualTo(Attribute<O, A> attribute, A attributeValue)", "testcase": false, "constructor": false}, {"identifier": "greaterThan", "parameters": "(Attribute<O, A> attribute, A attributeValue)", "modifiers": "public static", "return": "GreaterThan<O, A>", "signature": "GreaterThan<O, A> greaterThan(Attribute<O, A> attribute, A attributeValue)", "full_signature": "public static GreaterThan<O, A> greaterThan(Attribute<O, A> attribute, A attributeValue)", "class_method_signature": "QueryFactory.greaterThan(Attribute<O, A> attribute, A attributeValue)", "testcase": false, "constructor": false}, {"identifier": "between", "parameters": "(Attribute<O, A> attribute, A lowerValue, boolean lowerInclusive, A upperValue, boolean upperInclusive)", "modifiers": "public static", "return": "Between<O, A>", "signature": "Between<O, A> between(Attribute<O, A> attribute, A lowerValue, boolean lowerInclusive, A upperValue, boolean upperInclusive)", "full_signature": "public static Between<O, A> between(Attribute<O, A> attribute, A lowerValue, boolean lowerInclusive, A upperValue, boolean upperInclusive)", "class_method_signature": "QueryFactory.between(Attribute<O, A> attribute, A lowerValue, boolean lowerInclusive, A upperValue, boolean upperInclusive)", "testcase": false, "constructor": false}, {"identifier": "between", "parameters": "(Attribute<O, A> attribute, A lowerValue, A upperValue)", "modifiers": "public static", "return": "Between<O, A>", "signature": "Between<O, A> between(Attribute<O, A> attribute, A lowerValue, A upperValue)", "full_signature": "public static Between<O, A> between(Attribute<O, A> attribute, A lowerValue, A upperValue)", "class_method_signature": "QueryFactory.between(Attribute<O, A> attribute, A lowerValue, A upperValue)", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "(Attribute<O, A> attribute, A... attributeValues)", "modifiers": "public static", "return": "Query<O>", "signature": "Query<O> in(Attribute<O, A> attribute, A... attributeValues)", "full_signature": "public static Query<O> in(Attribute<O, A> attribute, A... attributeValues)", "class_method_signature": "QueryFactory.in(Attribute<O, A> attribute, A... attributeValues)", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "(Attribute<O, A> attribute, Collection<A> attributeValues)", "modifiers": "public static", "return": "Query<O>", "signature": "Query<O> in(Attribute<O, A> attribute, Collection<A> attributeValues)", "full_signature": "public static Query<O> in(Attribute<O, A> attribute, Collection<A> attributeValues)", "class_method_signature": "QueryFactory.in(Attribute<O, A> attribute, Collection<A> attributeValues)", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "(Attribute<O, A> attribute, boolean disjoint, Collection<A> attributeValues)", "modifiers": "public static", "return": "Query<O>", "signature": "Query<O> in(Attribute<O, A> attribute, boolean disjoint, Collection<A> attributeValues)", "full_signature": "public static Query<O> in(Attribute<O, A> attribute, boolean disjoint, Collection<A> attributeValues)", "class_method_signature": "QueryFactory.in(Attribute<O, A> attribute, boolean disjoint, Collection<A> attributeValues)", "testcase": false, "constructor": false}, {"identifier": "startsWith", "parameters": "(Attribute<O, A> attribute, A attributeValue)", "modifiers": "public static", "return": "StringStartsWith<O, A>", "signature": "StringStartsWith<O, A> startsWith(Attribute<O, A> attribute, A attributeValue)", "full_signature": "public static StringStartsWith<O, A> startsWith(Attribute<O, A> attribute, A attributeValue)", "class_method_signature": "QueryFactory.startsWith(Attribute<O, A> attribute, A attributeValue)", "testcase": false, "constructor": false}, {"identifier": "longestPrefix", "parameters": "(Attribute<O, A> attribute, A attributeValue)", "modifiers": "public static", "return": "LongestPrefix<O, A>", "signature": "LongestPrefix<O, A> longestPrefix(Attribute<O, A> attribute, A attributeValue)", "full_signature": "public static LongestPrefix<O, A> longestPrefix(Attribute<O, A> attribute, A attributeValue)", "class_method_signature": "QueryFactory.longestPrefix(Attribute<O, A> attribute, A attributeValue)", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "(Attribute<O, A> attribute)", "modifiers": "public static", "return": "Min<O, A>", "signature": "Min<O, A> min(Attribute<O, A> attribute)", "full_signature": "public static Min<O, A> min(Attribute<O, A> attribute)", "class_method_signature": "QueryFactory.min(Attribute<O, A> attribute)", "testcase": false, "constructor": false}, {"identifier": "max", "parameters": "(Attribute<O, A> attribute)", "modifiers": "public static", "return": "Max<O, A>", "signature": "Max<O, A> max(Attribute<O, A> attribute)", "full_signature": "public static Max<O, A> max(Attribute<O, A> attribute)", "class_method_signature": "QueryFactory.max(Attribute<O, A> attribute)", "testcase": false, "constructor": false}, {"identifier": "isPrefixOf", "parameters": "(Attribute<O, A> attribute, A attributeValue)", "modifiers": "public static", "return": "StringIsPrefixOf<O, A>", "signature": "StringIsPrefixOf<O, A> isPrefixOf(Attribute<O, A> attribute, A attributeValue)", "full_signature": "public static StringIsPrefixOf<O, A> isPrefixOf(Attribute<O, A> attribute, A attributeValue)", "class_method_signature": "QueryFactory.isPrefixOf(Attribute<O, A> attribute, A attributeValue)", "testcase": false, "constructor": false}, {"identifier": "endsWith", "parameters": "(Attribute<O, A> attribute, A attributeValue)", "modifiers": "public static", "return": "StringEndsWith<O, A>", "signature": "StringEndsWith<O, A> endsWith(Attribute<O, A> attribute, A attributeValue)", "full_signature": "public static StringEndsWith<O, A> endsWith(Attribute<O, A> attribute, A attributeValue)", "class_method_signature": "QueryFactory.endsWith(Attribute<O, A> attribute, A attributeValue)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Attribute<O, A> attribute, A attributeValue)", "modifiers": "public static", "return": "StringContains<O, A>", "signature": "StringContains<O, A> contains(Attribute<O, A> attribute, A attributeValue)", "full_signature": "public static StringContains<O, A> contains(Attribute<O, A> attribute, A attributeValue)", "class_method_signature": "QueryFactory.contains(Attribute<O, A> attribute, A attributeValue)", "testcase": false, "constructor": false}, {"identifier": "isContainedIn", "parameters": "(Attribute<O, A> attribute, A attributeValue)", "modifiers": "public static", "return": "StringIsContainedIn<O, A>", "signature": "StringIsContainedIn<O, A> isContainedIn(Attribute<O, A> attribute, A attributeValue)", "full_signature": "public static StringIsContainedIn<O, A> isContainedIn(Attribute<O, A> attribute, A attributeValue)", "class_method_signature": "QueryFactory.isContainedIn(Attribute<O, A> attribute, A attributeValue)", "testcase": false, "constructor": false}, {"identifier": "matchesRegex", "parameters": "(Attribute<O, A> attribute, Pattern regexPattern)", "modifiers": "public static", "return": "StringMatchesRegex<O, A>", "signature": "StringMatchesRegex<O, A> matchesRegex(Attribute<O, A> attribute, Pattern regexPattern)", "full_signature": "public static StringMatchesRegex<O, A> matchesRegex(Attribute<O, A> attribute, Pattern regexPattern)", "class_method_signature": "QueryFactory.matchesRegex(Attribute<O, A> attribute, Pattern regexPattern)", "testcase": false, "constructor": false}, {"identifier": "matchesRegex", "parameters": "(Attribute<O, A> attribute, String regex)", "modifiers": "public static", "return": "StringMatchesRegex<O, A>", "signature": "StringMatchesRegex<O, A> matchesRegex(Attribute<O, A> attribute, String regex)", "full_signature": "public static StringMatchesRegex<O, A> matchesRegex(Attribute<O, A> attribute, String regex)", "class_method_signature": "QueryFactory.matchesRegex(Attribute<O, A> attribute, String regex)", "testcase": false, "constructor": false}, {"identifier": "has", "parameters": "(Attribute<O, A> attribute)", "modifiers": "public static", "return": "Has<O, A>", "signature": "Has<O, A> has(Attribute<O, A> attribute)", "full_signature": "public static Has<O, A> has(Attribute<O, A> attribute)", "class_method_signature": "QueryFactory.has(Attribute<O, A> attribute)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(Query<O> query1, Query<O> query2)", "modifiers": "public static", "return": "And<O>", "signature": "And<O> and(Query<O> query1, Query<O> query2)", "full_signature": "public static And<O> and(Query<O> query1, Query<O> query2)", "class_method_signature": "QueryFactory.and(Query<O> query1, Query<O> query2)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(Query<O> query1, Query<O> query2, Query<O>... additionalQueries)", "modifiers": "public static", "return": "And<O>", "signature": "And<O> and(Query<O> query1, Query<O> query2, Query<O>... additionalQueries)", "full_signature": "public static And<O> and(Query<O> query1, Query<O> query2, Query<O>... additionalQueries)", "class_method_signature": "QueryFactory.and(Query<O> query1, Query<O> query2, Query<O>... additionalQueries)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(Query<O> query1, Query<O> query2, Collection<Query<O>> additionalQueries)", "modifiers": "public static", "return": "And<O>", "signature": "And<O> and(Query<O> query1, Query<O> query2, Collection<Query<O>> additionalQueries)", "full_signature": "public static And<O> and(Query<O> query1, Query<O> query2, Collection<Query<O>> additionalQueries)", "class_method_signature": "QueryFactory.and(Query<O> query1, Query<O> query2, Collection<Query<O>> additionalQueries)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(Query<O> query1, Query<O> query2)", "modifiers": "public static", "return": "Or<O>", "signature": "Or<O> or(Query<O> query1, Query<O> query2)", "full_signature": "public static Or<O> or(Query<O> query1, Query<O> query2)", "class_method_signature": "QueryFactory.or(Query<O> query1, Query<O> query2)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(Query<O> query1, Query<O> query2, Query<O>... additionalQueries)", "modifiers": "public static", "return": "Or<O>", "signature": "Or<O> or(Query<O> query1, Query<O> query2, Query<O>... additionalQueries)", "full_signature": "public static Or<O> or(Query<O> query1, Query<O> query2, Query<O>... additionalQueries)", "class_method_signature": "QueryFactory.or(Query<O> query1, Query<O> query2, Query<O>... additionalQueries)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(Query<O> query1, Query<O> query2, Collection<Query<O>> additionalQueries)", "modifiers": "public static", "return": "Or<O>", "signature": "Or<O> or(Query<O> query1, Query<O> query2, Collection<Query<O>> additionalQueries)", "full_signature": "public static Or<O> or(Query<O> query1, Query<O> query2, Collection<Query<O>> additionalQueries)", "class_method_signature": "QueryFactory.or(Query<O> query1, Query<O> query2, Collection<Query<O>> additionalQueries)", "testcase": false, "constructor": false}, {"identifier": "not", "parameters": "(Query<O> query)", "modifiers": "public static", "return": "Not<O>", "signature": "Not<O> not(Query<O> query)", "full_signature": "public static Not<O> not(Query<O> query)", "class_method_signature": "QueryFactory.not(Query<O> query)", "testcase": false, "constructor": false}, {"identifier": "existsIn", "parameters": "(final IndexedCollection<F> foreignCollection, final Attribute<O, A> localKeyAttribute, final Attribute<F, A> foreignKeyAttribute)", "modifiers": "public static", "return": "Query<O>", "signature": "Query<O> existsIn(final IndexedCollection<F> foreignCollection, final Attribute<O, A> localKeyAttribute, final Attribute<F, A> foreignKeyAttribute)", "full_signature": "public static Query<O> existsIn(final IndexedCollection<F> foreignCollection, final Attribute<O, A> localKeyAttribute, final Attribute<F, A> foreignKeyAttribute)", "class_method_signature": "QueryFactory.existsIn(final IndexedCollection<F> foreignCollection, final Attribute<O, A> localKeyAttribute, final Attribute<F, A> foreignKeyAttribute)", "testcase": false, "constructor": false}, {"identifier": "existsIn", "parameters": "(final IndexedCollection<F> foreignCollection, final Attribute<O, A> localKeyAttribute, final Attribute<F, A> foreignKeyAttribute, final Query<F> foreignRestrictions)", "modifiers": "public static", "return": "Query<O>", "signature": "Query<O> existsIn(final IndexedCollection<F> foreignCollection, final Attribute<O, A> localKeyAttribute, final Attribute<F, A> foreignKeyAttribute, final Query<F> foreignRestrictions)", "full_signature": "public static Query<O> existsIn(final IndexedCollection<F> foreignCollection, final Attribute<O, A> localKeyAttribute, final Attribute<F, A> foreignKeyAttribute, final Query<F> foreignRestrictions)", "class_method_signature": "QueryFactory.existsIn(final IndexedCollection<F> foreignCollection, final Attribute<O, A> localKeyAttribute, final Attribute<F, A> foreignKeyAttribute, final Query<F> foreignRestrictions)", "testcase": false, "constructor": false}, {"identifier": "all", "parameters": "(Class<O> objectType)", "modifiers": "public static", "return": "Query<O>", "signature": "Query<O> all(Class<O> objectType)", "full_signature": "public static Query<O> all(Class<O> objectType)", "class_method_signature": "QueryFactory.all(Class<O> objectType)", "testcase": false, "constructor": false}, {"identifier": "none", "parameters": "(Class<O> objectType)", "modifiers": "public static", "return": "Query<O>", "signature": "Query<O> none(Class<O> objectType)", "full_signature": "public static Query<O> none(Class<O> objectType)", "class_method_signature": "QueryFactory.none(Class<O> objectType)", "testcase": false, "constructor": false}, {"identifier": "orderBy", "parameters": "(List<AttributeOrder<O>> attributeOrders)", "modifiers": "public static", "return": "OrderByOption<O>", "signature": "OrderByOption<O> orderBy(List<AttributeOrder<O>> attributeOrders)", "full_signature": "public static OrderByOption<O> orderBy(List<AttributeOrder<O>> attributeOrders)", "class_method_signature": "QueryFactory.orderBy(List<AttributeOrder<O>> attributeOrders)", "testcase": false, "constructor": false}, {"identifier": "orderBy", "parameters": "(AttributeOrder<O>... attributeOrders)", "modifiers": "public static", "return": "OrderByOption<O>", "signature": "OrderByOption<O> orderBy(AttributeOrder<O>... attributeOrders)", "full_signature": "public static OrderByOption<O> orderBy(AttributeOrder<O>... attributeOrders)", "class_method_signature": "QueryFactory.orderBy(AttributeOrder<O>... attributeOrders)", "testcase": false, "constructor": false}, {"identifier": "ascending", "parameters": "(Attribute<O, ? extends Comparable> attribute)", "modifiers": "public static", "return": "AttributeOrder<O>", "signature": "AttributeOrder<O> ascending(Attribute<O, ? extends Comparable> attribute)", "full_signature": "public static AttributeOrder<O> ascending(Attribute<O, ? extends Comparable> attribute)", "class_method_signature": "QueryFactory.ascending(Attribute<O, ? extends Comparable> attribute)", "testcase": false, "constructor": false}, {"identifier": "descending", "parameters": "(Attribute<O, ? extends Comparable> attribute)", "modifiers": "public static", "return": "AttributeOrder<O>", "signature": "AttributeOrder<O> descending(Attribute<O, ? extends Comparable> attribute)", "full_signature": "public static AttributeOrder<O> descending(Attribute<O, ? extends Comparable> attribute)", "class_method_signature": "QueryFactory.descending(Attribute<O, ? extends Comparable> attribute)", "testcase": false, "constructor": false}, {"identifier": "deduplicate", "parameters": "(DeduplicationStrategy deduplicationStrategy)", "modifiers": "public static", "return": "DeduplicationOption", "signature": "DeduplicationOption deduplicate(DeduplicationStrategy deduplicationStrategy)", "full_signature": "public static DeduplicationOption deduplicate(DeduplicationStrategy deduplicationStrategy)", "class_method_signature": "QueryFactory.deduplicate(DeduplicationStrategy deduplicationStrategy)", "testcase": false, "constructor": false}, {"identifier": "isolationLevel", "parameters": "(IsolationLevel isolationLevel)", "modifiers": "public static", "return": "IsolationOption", "signature": "IsolationOption isolationLevel(IsolationLevel isolationLevel)", "full_signature": "public static IsolationOption isolationLevel(IsolationLevel isolationLevel)", "class_method_signature": "QueryFactory.isolationLevel(IsolationLevel isolationLevel)", "testcase": false, "constructor": false}, {"identifier": "argumentValidation", "parameters": "(ArgumentValidationStrategy strategy)", "modifiers": "public static", "return": "ArgumentValidationOption", "signature": "ArgumentValidationOption argumentValidation(ArgumentValidationStrategy strategy)", "full_signature": "public static ArgumentValidationOption argumentValidation(ArgumentValidationStrategy strategy)", "class_method_signature": "QueryFactory.argumentValidation(ArgumentValidationStrategy strategy)", "testcase": false, "constructor": false}, {"identifier": "queryOptions", "parameters": "(Object... queryOptions)", "modifiers": "public static", "return": "QueryOptions", "signature": "QueryOptions queryOptions(Object... queryOptions)", "full_signature": "public static QueryOptions queryOptions(Object... queryOptions)", "class_method_signature": "QueryFactory.queryOptions(Object... queryOptions)", "testcase": false, "constructor": false}, {"identifier": "queryOptions", "parameters": "(Collection<Object> queryOptions)", "modifiers": "public static", "return": "QueryOptions", "signature": "QueryOptions queryOptions(Collection<Object> queryOptions)", "full_signature": "public static QueryOptions queryOptions(Collection<Object> queryOptions)", "class_method_signature": "QueryFactory.queryOptions(Collection<Object> queryOptions)", "testcase": false, "constructor": false}, {"identifier": "noQueryOptions", "parameters": "()", "modifiers": "public static", "return": "QueryOptions", "signature": "QueryOptions noQueryOptions()", "full_signature": "public static QueryOptions noQueryOptions()", "class_method_signature": "QueryFactory.noQueryOptions()", "testcase": false, "constructor": false}, {"identifier": "enableFlags", "parameters": "(Object... flags)", "modifiers": "public static", "return": "FlagsEnabled", "signature": "FlagsEnabled enableFlags(Object... flags)", "full_signature": "public static FlagsEnabled enableFlags(Object... flags)", "class_method_signature": "QueryFactory.enableFlags(Object... flags)", "testcase": false, "constructor": false}, {"identifier": "disableFlags", "parameters": "(Object... flags)", "modifiers": "public static", "return": "FlagsDisabled", "signature": "FlagsDisabled disableFlags(Object... flags)", "full_signature": "public static FlagsDisabled disableFlags(Object... flags)", "class_method_signature": "QueryFactory.disableFlags(Object... flags)", "testcase": false, "constructor": false}, {"identifier": "applyThresholds", "parameters": "(Threshold... thresholds)", "modifiers": "public static", "return": "Thresholds", "signature": "Thresholds applyThresholds(Threshold... thresholds)", "full_signature": "public static Thresholds applyThresholds(Threshold... thresholds)", "class_method_signature": "QueryFactory.applyThresholds(Threshold... thresholds)", "testcase": false, "constructor": false}, {"identifier": "threshold", "parameters": "(Object key, Double value)", "modifiers": "public static", "return": "Threshold", "signature": "Threshold threshold(Object key, Double value)", "full_signature": "public static Threshold threshold(Object key, Double value)", "class_method_signature": "QueryFactory.threshold(Object key, Double value)", "testcase": false, "constructor": false}, {"identifier": "selfAttribute", "parameters": "(Class<O> objectType)", "modifiers": "public static", "return": "SelfAttribute<O>", "signature": "SelfAttribute<O> selfAttribute(Class<O> objectType)", "full_signature": "public static SelfAttribute<O> selfAttribute(Class<O> objectType)", "class_method_signature": "QueryFactory.selfAttribute(Class<O> objectType)", "testcase": false, "constructor": false}, {"identifier": "mapAttribute", "parameters": "(K mapKey, Class<A> mapValueType)", "modifiers": "public static", "return": "Attribute<Map, A>", "signature": "Attribute<Map, A> mapAttribute(K mapKey, Class<A> mapValueType)", "full_signature": "public static Attribute<Map, A> mapAttribute(K mapKey, Class<A> mapValueType)", "class_method_signature": "QueryFactory.mapAttribute(K mapKey, Class<A> mapValueType)", "testcase": false, "constructor": false}, {"identifier": "mapEntity", "parameters": "(Map map)", "modifiers": "public static", "return": "Map", "signature": "Map mapEntity(Map map)", "full_signature": "public static Map mapEntity(Map map)", "class_method_signature": "QueryFactory.mapEntity(Map map)", "testcase": false, "constructor": false}, {"identifier": "primaryKeyedMapEntity", "parameters": "(Map map, Object primaryKey)", "modifiers": "public static", "return": "Map", "signature": "Map primaryKeyedMapEntity(Map map, Object primaryKey)", "full_signature": "public static Map primaryKeyedMapEntity(Map map, Object primaryKey)", "class_method_signature": "QueryFactory.primaryKeyedMapEntity(Map map, Object primaryKey)", "testcase": false, "constructor": false}, {"identifier": "missingLast", "parameters": "(Attribute<O, ? extends Comparable> delegateAttribute)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "OrderMissingLastAttribute<O>", "signature": "OrderMissingLastAttribute<O> missingLast(Attribute<O, ? extends Comparable> delegateAttribute)", "full_signature": "@SuppressWarnings(\"unchecked\") public static OrderMissingLastAttribute<O> missingLast(Attribute<O, ? extends Comparable> delegateAttribute)", "class_method_signature": "QueryFactory.missingLast(Attribute<O, ? extends Comparable> delegateAttribute)", "testcase": false, "constructor": false}, {"identifier": "missingFirst", "parameters": "(Attribute<O, ? extends Comparable> delegateAttribute)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "OrderMissingFirstAttribute<O>", "signature": "OrderMissingFirstAttribute<O> missingFirst(Attribute<O, ? extends Comparable> delegateAttribute)", "full_signature": "@SuppressWarnings(\"unchecked\") public static OrderMissingFirstAttribute<O> missingFirst(Attribute<O, ? extends Comparable> delegateAttribute)", "class_method_signature": "QueryFactory.missingFirst(Attribute<O, ? extends Comparable> delegateAttribute)", "testcase": false, "constructor": false}, {"identifier": "forStandingQuery", "parameters": "(Query<O> standingQuery)", "modifiers": "public static", "return": "StandingQueryAttribute<O>", "signature": "StandingQueryAttribute<O> forStandingQuery(Query<O> standingQuery)", "full_signature": "public static StandingQueryAttribute<O> forStandingQuery(Query<O> standingQuery)", "class_method_signature": "QueryFactory.forStandingQuery(Query<O> standingQuery)", "testcase": false, "constructor": false}, {"identifier": "forObjectsMissing", "parameters": "(Attribute<O, A> attribute)", "modifiers": "public static", "return": "StandingQueryAttribute<O>", "signature": "StandingQueryAttribute<O> forObjectsMissing(Attribute<O, A> attribute)", "full_signature": "public static StandingQueryAttribute<O> forObjectsMissing(Attribute<O, A> attribute)", "class_method_signature": "QueryFactory.forObjectsMissing(Attribute<O, A> attribute)", "testcase": false, "constructor": false}, {"identifier": "attribute", "parameters": "(SimpleFunction<O, A> function)", "modifiers": "public static", "return": "SimpleAttribute<O, A>", "signature": "SimpleAttribute<O, A> attribute(SimpleFunction<O, A> function)", "full_signature": "public static SimpleAttribute<O, A> attribute(SimpleFunction<O, A> function)", "class_method_signature": "QueryFactory.attribute(SimpleFunction<O, A> function)", "testcase": false, "constructor": false}, {"identifier": "attribute", "parameters": "(String attributeName, SimpleFunction<O, A> function)", "modifiers": "public static", "return": "SimpleAttribute<O, A>", "signature": "SimpleAttribute<O, A> attribute(String attributeName, SimpleFunction<O, A> function)", "full_signature": "public static SimpleAttribute<O, A> attribute(String attributeName, SimpleFunction<O, A> function)", "class_method_signature": "QueryFactory.attribute(String attributeName, SimpleFunction<O, A> function)", "testcase": false, "constructor": false}, {"identifier": "attribute", "parameters": "(Class<O> objectType, Class<A> attributeType, String attributeName, SimpleFunction<O, A> function)", "modifiers": "public static", "return": "SimpleAttribute<O, A>", "signature": "SimpleAttribute<O, A> attribute(Class<O> objectType, Class<A> attributeType, String attributeName, SimpleFunction<O, A> function)", "full_signature": "public static SimpleAttribute<O, A> attribute(Class<O> objectType, Class<A> attributeType, String attributeName, SimpleFunction<O, A> function)", "class_method_signature": "QueryFactory.attribute(Class<O> objectType, Class<A> attributeType, String attributeName, SimpleFunction<O, A> function)", "testcase": false, "constructor": false}, {"identifier": "nullableAttribute", "parameters": "(SimpleFunction<O, A> function)", "modifiers": "public static", "return": "SimpleNullableAttribute<O, A>", "signature": "SimpleNullableAttribute<O, A> nullableAttribute(SimpleFunction<O, A> function)", "full_signature": "public static SimpleNullableAttribute<O, A> nullableAttribute(SimpleFunction<O, A> function)", "class_method_signature": "QueryFactory.nullableAttribute(SimpleFunction<O, A> function)", "testcase": false, "constructor": false}, {"identifier": "nullableAttribute", "parameters": "(String attributeName, SimpleFunction<O, A> function)", "modifiers": "public static", "return": "SimpleNullableAttribute<O, A>", "signature": "SimpleNullableAttribute<O, A> nullableAttribute(String attributeName, SimpleFunction<O, A> function)", "full_signature": "public static SimpleNullableAttribute<O, A> nullableAttribute(String attributeName, SimpleFunction<O, A> function)", "class_method_signature": "QueryFactory.nullableAttribute(String attributeName, SimpleFunction<O, A> function)", "testcase": false, "constructor": false}, {"identifier": "nullableAttribute", "parameters": "(Class<O> objectType, Class<A> attributeType, String attributeName, SimpleFunction<O, A> function)", "modifiers": "public static", "return": "SimpleNullableAttribute<O, A>", "signature": "SimpleNullableAttribute<O, A> nullableAttribute(Class<O> objectType, Class<A> attributeType, String attributeName, SimpleFunction<O, A> function)", "full_signature": "public static SimpleNullableAttribute<O, A> nullableAttribute(Class<O> objectType, Class<A> attributeType, String attributeName, SimpleFunction<O, A> function)", "class_method_signature": "QueryFactory.nullableAttribute(Class<O> objectType, Class<A> attributeType, String attributeName, SimpleFunction<O, A> function)", "testcase": false, "constructor": false}, {"identifier": "attribute", "parameters": "(Class<A> attributeType, MultiValueFunction<O, A, I> function)", "modifiers": "public static", "return": "MultiValueAttribute<O, A>", "signature": "MultiValueAttribute<O, A> attribute(Class<A> attributeType, MultiValueFunction<O, A, I> function)", "full_signature": "public static MultiValueAttribute<O, A> attribute(Class<A> attributeType, MultiValueFunction<O, A, I> function)", "class_method_signature": "QueryFactory.attribute(Class<A> attributeType, MultiValueFunction<O, A, I> function)", "testcase": false, "constructor": false}, {"identifier": "attribute", "parameters": "(Class<A> attributeType, String attributeName, MultiValueFunction<O, A, I> function)", "modifiers": "public static", "return": "MultiValueAttribute<O, A>", "signature": "MultiValueAttribute<O, A> attribute(Class<A> attributeType, String attributeName, MultiValueFunction<O, A, I> function)", "full_signature": "public static MultiValueAttribute<O, A> attribute(Class<A> attributeType, String attributeName, MultiValueFunction<O, A, I> function)", "class_method_signature": "QueryFactory.attribute(Class<A> attributeType, String attributeName, MultiValueFunction<O, A, I> function)", "testcase": false, "constructor": false}, {"identifier": "attribute", "parameters": "(Class<O> objectType, Class<A> attributeType, String attributeName, MultiValueFunction<O, A, I> function)", "modifiers": "public static", "return": "MultiValueAttribute<O, A>", "signature": "MultiValueAttribute<O, A> attribute(Class<O> objectType, Class<A> attributeType, String attributeName, MultiValueFunction<O, A, I> function)", "full_signature": "public static MultiValueAttribute<O, A> attribute(Class<O> objectType, Class<A> attributeType, String attributeName, MultiValueFunction<O, A, I> function)", "class_method_signature": "QueryFactory.attribute(Class<O> objectType, Class<A> attributeType, String attributeName, MultiValueFunction<O, A, I> function)", "testcase": false, "constructor": false}, {"identifier": "nullableAttribute", "parameters": "(Class<A> attributeType, MultiValueFunction<O, A, I> function)", "modifiers": "public static", "return": "MultiValueNullableAttribute<O, A>", "signature": "MultiValueNullableAttribute<O, A> nullableAttribute(Class<A> attributeType, MultiValueFunction<O, A, I> function)", "full_signature": "public static MultiValueNullableAttribute<O, A> nullableAttribute(Class<A> attributeType, MultiValueFunction<O, A, I> function)", "class_method_signature": "QueryFactory.nullableAttribute(Class<A> attributeType, MultiValueFunction<O, A, I> function)", "testcase": false, "constructor": false}, {"identifier": "nullableAttribute", "parameters": "(Class<A> attributeType, String attributeName, MultiValueFunction<O, A, I> function)", "modifiers": "public static", "return": "MultiValueNullableAttribute<O, A>", "signature": "MultiValueNullableAttribute<O, A> nullableAttribute(Class<A> attributeType, String attributeName, MultiValueFunction<O, A, I> function)", "full_signature": "public static MultiValueNullableAttribute<O, A> nullableAttribute(Class<A> attributeType, String attributeName, MultiValueFunction<O, A, I> function)", "class_method_signature": "QueryFactory.nullableAttribute(Class<A> attributeType, String attributeName, MultiValueFunction<O, A, I> function)", "testcase": false, "constructor": false}, {"identifier": "nullableAttribute", "parameters": "(Class<O> objectType, Class<A> attributeType, String attributeName, MultiValueFunction<O, A, I> function)", "modifiers": "public static", "return": "MultiValueNullableAttribute<O, A>", "signature": "MultiValueNullableAttribute<O, A> nullableAttribute(Class<O> objectType, Class<A> attributeType, String attributeName, MultiValueFunction<O, A, I> function)", "full_signature": "public static MultiValueNullableAttribute<O, A> nullableAttribute(Class<O> objectType, Class<A> attributeType, String attributeName, MultiValueFunction<O, A, I> function)", "class_method_signature": "QueryFactory.nullableAttribute(Class<O> objectType, Class<A> attributeType, String attributeName, MultiValueFunction<O, A, I> function)", "testcase": false, "constructor": false}, {"identifier": "resolveSimpleFunctionGenericTypes", "parameters": "(Class<?> subType)", "modifiers": "static", "return": "FunctionGenericTypes<O, A>", "signature": "FunctionGenericTypes<O, A> resolveSimpleFunctionGenericTypes(Class<?> subType)", "full_signature": "static FunctionGenericTypes<O, A> resolveSimpleFunctionGenericTypes(Class<?> subType)", "class_method_signature": "QueryFactory.resolveSimpleFunctionGenericTypes(Class<?> subType)", "testcase": false, "constructor": false}, {"identifier": "validateSimpleFunctionGenericTypes", "parameters": "(Class<?>[] typeArgs, Class<?> subType)", "modifiers": "static", "return": "void", "signature": "void validateSimpleFunctionGenericTypes(Class<?>[] typeArgs, Class<?> subType)", "full_signature": "static void validateSimpleFunctionGenericTypes(Class<?>[] typeArgs, Class<?> subType)", "class_method_signature": "QueryFactory.validateSimpleFunctionGenericTypes(Class<?>[] typeArgs, Class<?> subType)", "testcase": false, "constructor": false}, {"identifier": "resolveMultiValueFunctionGenericObjectType", "parameters": "(Class<?> subType)", "modifiers": "static", "return": "Class<O>", "signature": "Class<O> resolveMultiValueFunctionGenericObjectType(Class<?> subType)", "full_signature": "static Class<O> resolveMultiValueFunctionGenericObjectType(Class<?> subType)", "class_method_signature": "QueryFactory.resolveMultiValueFunctionGenericObjectType(Class<?> subType)", "testcase": false, "constructor": false}, {"identifier": "validateMultiValueFunctionGenericTypes", "parameters": "(Class<?>[] typeArgs, Class<?> subType)", "modifiers": "static", "return": "void", "signature": "void validateMultiValueFunctionGenericTypes(Class<?>[] typeArgs, Class<?> subType)", "full_signature": "static void validateMultiValueFunctionGenericTypes(Class<?>[] typeArgs, Class<?> subType)", "class_method_signature": "QueryFactory.validateMultiValueFunctionGenericTypes(Class<?>[] typeArgs, Class<?> subType)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(Query<O> query1, Query<O> query2, Query<O> query3)", "modifiers": "@SuppressWarnings({\"JavaDoc\"}) public static", "return": "And<O>", "signature": "And<O> and(Query<O> query1, Query<O> query2, Query<O> query3)", "full_signature": "@SuppressWarnings({\"JavaDoc\"}) public static And<O> and(Query<O> query1, Query<O> query2, Query<O> query3)", "class_method_signature": "QueryFactory.and(Query<O> query1, Query<O> query2, Query<O> query3)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(Query<O> query1, Query<O> query2, Query<O> query3, Query<O> query4)", "modifiers": "@SuppressWarnings({\"JavaDoc\"}) public static", "return": "And<O>", "signature": "And<O> and(Query<O> query1, Query<O> query2, Query<O> query3, Query<O> query4)", "full_signature": "@SuppressWarnings({\"JavaDoc\"}) public static And<O> and(Query<O> query1, Query<O> query2, Query<O> query3, Query<O> query4)", "class_method_signature": "QueryFactory.and(Query<O> query1, Query<O> query2, Query<O> query3, Query<O> query4)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(Query<O> query1, Query<O> query2, Query<O> query3, Query<O> query4, Query<O> query5)", "modifiers": "@SuppressWarnings({\"JavaDoc\"}) public static", "return": "And<O>", "signature": "And<O> and(Query<O> query1, Query<O> query2, Query<O> query3, Query<O> query4, Query<O> query5)", "full_signature": "@SuppressWarnings({\"JavaDoc\"}) public static And<O> and(Query<O> query1, Query<O> query2, Query<O> query3, Query<O> query4, Query<O> query5)", "class_method_signature": "QueryFactory.and(Query<O> query1, Query<O> query2, Query<O> query3, Query<O> query4, Query<O> query5)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(Query<O> query1, Query<O> query2, Query<O> query3)", "modifiers": "@SuppressWarnings({\"JavaDoc\"}) public static", "return": "Or<O>", "signature": "Or<O> or(Query<O> query1, Query<O> query2, Query<O> query3)", "full_signature": "@SuppressWarnings({\"JavaDoc\"}) public static Or<O> or(Query<O> query1, Query<O> query2, Query<O> query3)", "class_method_signature": "QueryFactory.or(Query<O> query1, Query<O> query2, Query<O> query3)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(Query<O> query1, Query<O> query2, Query<O> query3, Query<O> query4)", "modifiers": "@SuppressWarnings({\"JavaDoc\"}) public static", "return": "Or<O>", "signature": "Or<O> or(Query<O> query1, Query<O> query2, Query<O> query3, Query<O> query4)", "full_signature": "@SuppressWarnings({\"JavaDoc\"}) public static Or<O> or(Query<O> query1, Query<O> query2, Query<O> query3, Query<O> query4)", "class_method_signature": "QueryFactory.or(Query<O> query1, Query<O> query2, Query<O> query3, Query<O> query4)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(Query<O> query1, Query<O> query2, Query<O> query3, Query<O> query4, Query<O> query5)", "modifiers": "@SuppressWarnings({\"JavaDoc\"}) public static", "return": "Or<O>", "signature": "Or<O> or(Query<O> query1, Query<O> query2, Query<O> query3, Query<O> query4, Query<O> query5)", "full_signature": "@SuppressWarnings({\"JavaDoc\"}) public static Or<O> or(Query<O> query1, Query<O> query2, Query<O> query3, Query<O> query4, Query<O> query5)", "class_method_signature": "QueryFactory.or(Query<O> query1, Query<O> query2, Query<O> query3, Query<O> query4, Query<O> query5)", "testcase": false, "constructor": false}, {"identifier": "orderBy", "parameters": "(AttributeOrder<O> attributeOrder)", "modifiers": "@SuppressWarnings({\"JavaDoc\"}) public static", "return": "OrderByOption<O>", "signature": "OrderByOption<O> orderBy(AttributeOrder<O> attributeOrder)", "full_signature": "@SuppressWarnings({\"JavaDoc\"}) public static OrderByOption<O> orderBy(AttributeOrder<O> attributeOrder)", "class_method_signature": "QueryFactory.orderBy(AttributeOrder<O> attributeOrder)", "testcase": false, "constructor": false}, {"identifier": "orderBy", "parameters": "(AttributeOrder<O> attributeOrder1, AttributeOrder<O> attributeOrder2)", "modifiers": "@SuppressWarnings({\"JavaDoc\"}) public static", "return": "OrderByOption<O>", "signature": "OrderByOption<O> orderBy(AttributeOrder<O> attributeOrder1, AttributeOrder<O> attributeOrder2)", "full_signature": "@SuppressWarnings({\"JavaDoc\"}) public static OrderByOption<O> orderBy(AttributeOrder<O> attributeOrder1, AttributeOrder<O> attributeOrder2)", "class_method_signature": "QueryFactory.orderBy(AttributeOrder<O> attributeOrder1, AttributeOrder<O> attributeOrder2)", "testcase": false, "constructor": false}, {"identifier": "orderBy", "parameters": "(AttributeOrder<O> attributeOrder1, AttributeOrder<O> attributeOrder2,\n                                             AttributeOrder<O> attributeOrder3)", "modifiers": "@SuppressWarnings({\"JavaDoc\"}) public static", "return": "OrderByOption<O>", "signature": "OrderByOption<O> orderBy(AttributeOrder<O> attributeOrder1, AttributeOrder<O> attributeOrder2,\n                                             AttributeOrder<O> attributeOrder3)", "full_signature": "@SuppressWarnings({\"JavaDoc\"}) public static OrderByOption<O> orderBy(AttributeOrder<O> attributeOrder1, AttributeOrder<O> attributeOrder2,\n                                             AttributeOrder<O> attributeOrder3)", "class_method_signature": "QueryFactory.orderBy(AttributeOrder<O> attributeOrder1, AttributeOrder<O> attributeOrder2,\n                                             AttributeOrder<O> attributeOrder3)", "testcase": false, "constructor": false}, {"identifier": "orderBy", "parameters": "(AttributeOrder<O> attributeOrder1, AttributeOrder<O> attributeOrder2,\n                                             AttributeOrder<O> attributeOrder3, AttributeOrder<O> attributeOrder4)", "modifiers": "@SuppressWarnings({\"JavaDoc\"}) public static", "return": "OrderByOption<O>", "signature": "OrderByOption<O> orderBy(AttributeOrder<O> attributeOrder1, AttributeOrder<O> attributeOrder2,\n                                             AttributeOrder<O> attributeOrder3, AttributeOrder<O> attributeOrder4)", "full_signature": "@SuppressWarnings({\"JavaDoc\"}) public static OrderByOption<O> orderBy(AttributeOrder<O> attributeOrder1, AttributeOrder<O> attributeOrder2,\n                                             AttributeOrder<O> attributeOrder3, AttributeOrder<O> attributeOrder4)", "class_method_signature": "QueryFactory.orderBy(AttributeOrder<O> attributeOrder1, AttributeOrder<O> attributeOrder2,\n                                             AttributeOrder<O> attributeOrder3, AttributeOrder<O> attributeOrder4)", "testcase": false, "constructor": false}, {"identifier": "orderBy", "parameters": "(AttributeOrder<O> attributeOrder1, AttributeOrder<O> attributeOrder2,\n                                             AttributeOrder<O> attributeOrder3, AttributeOrder<O> attributeOrder4,\n                                             AttributeOrder<O> attributeOrder5)", "modifiers": "@SuppressWarnings({\"JavaDoc\"}) public static", "return": "OrderByOption<O>", "signature": "OrderByOption<O> orderBy(AttributeOrder<O> attributeOrder1, AttributeOrder<O> attributeOrder2,\n                                             AttributeOrder<O> attributeOrder3, AttributeOrder<O> attributeOrder4,\n                                             AttributeOrder<O> attributeOrder5)", "full_signature": "@SuppressWarnings({\"JavaDoc\"}) public static OrderByOption<O> orderBy(AttributeOrder<O> attributeOrder1, AttributeOrder<O> attributeOrder2,\n                                             AttributeOrder<O> attributeOrder3, AttributeOrder<O> attributeOrder4,\n                                             AttributeOrder<O> attributeOrder5)", "class_method_signature": "QueryFactory.orderBy(AttributeOrder<O> attributeOrder1, AttributeOrder<O> attributeOrder2,\n                                             AttributeOrder<O> attributeOrder3, AttributeOrder<O> attributeOrder4,\n                                             AttributeOrder<O> attributeOrder5)", "testcase": false, "constructor": false}, {"identifier": "predicate", "parameters": "(Query<O> query)", "modifiers": "public static", "return": "Predicate<O>", "signature": "Predicate<O> predicate(Query<O> query)", "full_signature": "public static Predicate<O> predicate(Query<O> query)", "class_method_signature": "QueryFactory.predicate(Query<O> query)", "testcase": false, "constructor": false}, {"identifier": "predicate", "parameters": "(Query<O> query, QueryOptions queryOptions)", "modifiers": "public static", "return": "Predicate<O>", "signature": "Predicate<O> predicate(Query<O> query, QueryOptions queryOptions)", "full_signature": "public static Predicate<O> predicate(Query<O> query, QueryOptions queryOptions)", "class_method_signature": "QueryFactory.predicate(Query<O> query, QueryOptions queryOptions)", "testcase": false, "constructor": false}, {"identifier": "queryOptions", "parameters": "(Object queryOption)", "modifiers": "@SuppressWarnings({\"JavaDoc\"}) public static", "return": "QueryOptions", "signature": "QueryOptions queryOptions(Object queryOption)", "full_signature": "@SuppressWarnings({\"JavaDoc\"}) public static QueryOptions queryOptions(Object queryOption)", "class_method_signature": "QueryFactory.queryOptions(Object queryOption)", "testcase": false, "constructor": false}, {"identifier": "queryOptions", "parameters": "(Object queryOption1, Object queryOption2)", "modifiers": "@SuppressWarnings({\"JavaDoc\"}) public static", "return": "QueryOptions", "signature": "QueryOptions queryOptions(Object queryOption1, Object queryOption2)", "full_signature": "@SuppressWarnings({\"JavaDoc\"}) public static QueryOptions queryOptions(Object queryOption1, Object queryOption2)", "class_method_signature": "QueryFactory.queryOptions(Object queryOption1, Object queryOption2)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/query/QueryFactory.java"}, "focal_method": {"identifier": "validateSimpleFunctionGenericTypes", "parameters": "(Class<?>[] typeArgs, Class<?> subType)", "modifiers": "static", "return": "void", "body": "static void validateSimpleFunctionGenericTypes(Class<?>[] typeArgs, Class<?> subType) {\n        if (typeArgs == null) {\n            throw new IllegalStateException(\"Could not resolve any generic type information from the given \" +\n                    \"function of type: \" + subType.getName() + \". \" + GENERIC_TYPE_RESOLUTION_FAILURE_MESSAGE);\n        }\n        if (typeArgs.length != 2 || typeArgs[0] == TypeResolver.Unknown.class || typeArgs[1] == TypeResolver.Unknown.class) {\n            throw new IllegalStateException(\"Could not resolve sufficient generic type information from the given \" +\n                    \"function of type: \" + subType.getName() + \", resolved: \" + Arrays.toString(typeArgs) + \". \" +\n                    GENERIC_TYPE_RESOLUTION_FAILURE_MESSAGE);\n        }\n    }", "signature": "void validateSimpleFunctionGenericTypes(Class<?>[] typeArgs, Class<?> subType)", "full_signature": "static void validateSimpleFunctionGenericTypes(Class<?>[] typeArgs, Class<?> subType)", "class_method_signature": "QueryFactory.validateSimpleFunctionGenericTypes(Class<?>[] typeArgs, Class<?> subType)", "testcase": false, "constructor": false, "invocations": ["getName", "getName", "toString"]}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}