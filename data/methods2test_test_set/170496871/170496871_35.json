{"test_class": {"identifier": "BitSetIntSetTest", "superclass": "extends GridCommonAbstractTest", "interfaces": "", "fields": [], "file": "modules/core/src/test/java/org/apache/ignite/internal/util/collection/BitSetIntSetTest.java"}, "test_case": {"identifier": "testToArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToArray() {\n        IntSet intSet = new BitSetIntSet();\n\n        assertEquals(0, intSet.toArray().length);\n\n        intSet.add(1);\n        intSet.add(10);\n        intSet.add(10);\n        intSet.add(11);\n        intSet.add(1025);\n\n        Object[] arr = intSet.toArray();\n\n        assertEquals(4, arr.length);\n\n        assertEquals(1, (int)arr[0]);\n        assertEquals(10, (int)arr[1]);\n        assertEquals(11, (int)arr[2]);\n        assertEquals(1025, (int)arr[3]);\n\n        Integer[] input = new Integer[1];\n\n        Integer[] output = intSet.toArray(input);\n\n        assertNotSame(input, output);\n\n        assertEquals(4, arr.length);\n\n        assertEquals(1, arr[0]);\n        assertEquals(10, arr[1]);\n        assertEquals(11, arr[2]);\n        assertEquals(1025, arr[3]);\n\n        input = new Integer[6];\n\n        output = intSet.toArray(input);\n\n        assertSame(input, output);\n\n        assertEquals(6, output.length);\n\n        assertEquals(1, (int)output[0]);\n        assertEquals(10, (int)output[1]);\n        assertEquals(11, (int)output[2]);\n        assertEquals(1025, (int)output[3]);\n        assertNull(output[4]);\n        assertNull(output[5]);\n    }", "signature": "void testToArray()", "full_signature": "@Test public void testToArray()", "class_method_signature": "BitSetIntSetTest.testToArray()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toArray", "add", "add", "add", "add", "add", "toArray", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "toArray", "assertNotSame", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "toArray", "assertSame", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertNull", "assertNull"]}, "focal_class": {"identifier": "BitSetIntSet", "superclass": "extends GridSerializableCollection<Integer>", "interfaces": "implements IntSet", "fields": [{"original_string": "private static final long serialVersionUID = 0L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 0L", "var_name": "serialVersionUID"}, {"original_string": "private final BitSet bitSet;", "modifier": "private final", "type": "BitSet", "declarator": "bitSet", "var_name": "bitSet"}, {"original_string": "private int size;", "modifier": "private", "type": "int", "declarator": "size", "var_name": "size"}], "methods": [{"identifier": "BitSetIntSet", "parameters": "()", "modifiers": "public", "return": "", "signature": " BitSetIntSet()", "full_signature": "public  BitSetIntSet()", "class_method_signature": "BitSetIntSet.BitSetIntSet()", "testcase": false, "constructor": true}, {"identifier": "BitSetIntSet", "parameters": "(int initCap)", "modifiers": "public", "return": "", "signature": " BitSetIntSet(int initCap)", "full_signature": "public  BitSetIntSet(int initCap)", "class_method_signature": "BitSetIntSet.BitSetIntSet(int initCap)", "testcase": false, "constructor": true}, {"identifier": "BitSetIntSet", "parameters": "(int initCap, Collection<Integer> coll)", "modifiers": "public", "return": "", "signature": " BitSetIntSet(int initCap, Collection<Integer> coll)", "full_signature": "public  BitSetIntSet(int initCap, Collection<Integer> coll)", "class_method_signature": "BitSetIntSet.BitSetIntSet(int initCap, Collection<Integer> coll)", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "BitSetIntSet.size()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(Object o)", "full_signature": "@Override public boolean contains(Object o)", "class_method_signature": "BitSetIntSet.contains(Object o)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(int element)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(int element)", "full_signature": "@Override public boolean contains(int element)", "class_method_signature": "BitSetIntSet.contains(int element)", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Iterator<Integer>", "signature": "Iterator<Integer> iterator()", "full_signature": "@NotNull @Override public Iterator<Integer> iterator()", "class_method_signature": "BitSetIntSet.iterator()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Integer integer)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(Integer integer)", "full_signature": "@Override public boolean add(Integer integer)", "class_method_signature": "BitSetIntSet.add(Integer integer)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(int element)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean add(int element)", "full_signature": "@Override public boolean add(int element)", "class_method_signature": "BitSetIntSet.add(int element)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(Object o)", "full_signature": "@Override public boolean remove(Object o)", "class_method_signature": "BitSetIntSet.remove(Object o)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(int element)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean remove(int element)", "full_signature": "@Override public boolean remove(int element)", "class_method_signature": "BitSetIntSet.remove(int element)", "testcase": false, "constructor": false}, {"identifier": "toIntArray", "parameters": "()", "modifiers": "@Override public", "return": "int[]", "signature": "int[] toIntArray()", "full_signature": "@Override public int[] toIntArray()", "class_method_signature": "BitSetIntSet.toIntArray()", "testcase": false, "constructor": false}, {"identifier": "containsAll", "parameters": "(@NotNull Collection<?> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsAll(@NotNull Collection<?> c)", "full_signature": "@Override public boolean containsAll(@NotNull Collection<?> c)", "class_method_signature": "BitSetIntSet.containsAll(@NotNull Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "addAll", "parameters": "(@NotNull Collection<? extends Integer> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean addAll(@NotNull Collection<? extends Integer> c)", "full_signature": "@Override public boolean addAll(@NotNull Collection<? extends Integer> c)", "class_method_signature": "BitSetIntSet.addAll(@NotNull Collection<? extends Integer> c)", "testcase": false, "constructor": false}, {"identifier": "retainAll", "parameters": "(@NotNull Collection<?> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean retainAll(@NotNull Collection<?> c)", "full_signature": "@Override public boolean retainAll(@NotNull Collection<?> c)", "class_method_signature": "BitSetIntSet.retainAll(@NotNull Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "removeAll", "parameters": "(@NotNull Collection<?> c)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeAll(@NotNull Collection<?> c)", "full_signature": "@Override public boolean removeAll(@NotNull Collection<?> c)", "class_method_signature": "BitSetIntSet.removeAll(@NotNull Collection<?> c)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "BitSetIntSet.clear()", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/apache/ignite/internal/util/collection/BitSetIntSet.java"}, "focal_method": {"identifier": "add", "parameters": "(Integer integer)", "modifiers": "@Override public", "return": "boolean", "body": "@Override public boolean add(Integer integer) {\n        if (integer == null)\n            throw new IllegalArgumentException(\"Negative or null values are not supported!\");\n\n        return add((int)integer);\n    }", "signature": "boolean add(Integer integer)", "full_signature": "@Override public boolean add(Integer integer)", "class_method_signature": "BitSetIntSet.add(Integer integer)", "testcase": false, "constructor": false, "invocations": ["add"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}