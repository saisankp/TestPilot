{"test_class": {"identifier": "DataTableUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-sambox/src/test/java/org/sejda/impl/sambox/component/excel/DataTableUtilsTest.java"}, "test_case": {"identifier": "mergeWithAccountingBlankHeaders_scenario1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mergeWithAccountingBlankHeaders_scenario1() {\n        DataTable dt = new DataTable(1)\n                .addRow(\"H1\", \"H2\", \"H3\")\n                .addRow(\"A1\", \"A2\", \"A3\");\n\n        DataTable dt2 = new DataTable(3)\n                .addRow(\"H1\", \" \", \"\", \"H2\", \"H3\")\n                .addRow(\"C1\", \"CX\", \"CY\", \"C2\", \"C3\");\n\n        List<DataTable> mergedList = DataTableUtils.mergeTablesSpanningMultiplePages(Arrays.asList(dt, dt2));\n        assertThat(mergedList.size(), is(1));\n        DataTable merged = mergedList.get(0);\n        \n        assertThat(merged.toString(), is(\"\\n\" +\n                \"+--------------+\\n\" +\n                \"|H1|  |  |H2|H3|\\n\" +\n                \"+--------------+\\n\" +\n                \"|A1|  |  |A2|A3|\\n\" +\n                \"+--------------+\\n\" +\n                \"|C1|CX|CY|C2|C3|\\n\" +\n                \"+--------------+\\n\"));\n\n    }", "signature": "void mergeWithAccountingBlankHeaders_scenario1()", "full_signature": "@Test public void mergeWithAccountingBlankHeaders_scenario1()", "class_method_signature": "DataTableUtilsTest.mergeWithAccountingBlankHeaders_scenario1()", "testcase": true, "constructor": false, "invocations": ["addRow", "addRow", "addRow", "addRow", "mergeTablesSpanningMultiplePages", "asList", "assertThat", "size", "is", "get", "assertThat", "toString", "is"]}, "focal_class": {"identifier": "DataTableUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DataTableUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DataTableUtils.class)", "var_name": "LOG"}], "methods": [{"identifier": "DataTableUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " DataTableUtils()", "full_signature": "private  DataTableUtils()", "class_method_signature": "DataTableUtils.DataTableUtils()", "testcase": false, "constructor": true}, {"identifier": "mergeTablesSpanningMultiplePages", "parameters": "(List<DataTable> dataTables)", "modifiers": "public static", "return": "List<DataTable>", "signature": "List<DataTable> mergeTablesSpanningMultiplePages(List<DataTable> dataTables)", "full_signature": "public static List<DataTable> mergeTablesSpanningMultiplePages(List<DataTable> dataTables)", "class_method_signature": "DataTableUtils.mergeTablesSpanningMultiplePages(List<DataTable> dataTables)", "testcase": false, "constructor": false}, {"identifier": "mergeComplementaryColumns", "parameters": "(List<DataTable> dataTables)", "modifiers": "public static", "return": "List<DataTable>", "signature": "List<DataTable> mergeComplementaryColumns(List<DataTable> dataTables)", "full_signature": "public static List<DataTable> mergeComplementaryColumns(List<DataTable> dataTables)", "class_method_signature": "DataTableUtils.mergeComplementaryColumns(List<DataTable> dataTables)", "testcase": false, "constructor": false}, {"identifier": "addBlankColumnsToMatchHeaders", "parameters": "(DataTable a, DataTable b)", "modifiers": "public static", "return": "void", "signature": "void addBlankColumnsToMatchHeaders(DataTable a, DataTable b)", "full_signature": "public static void addBlankColumnsToMatchHeaders(DataTable a, DataTable b)", "class_method_signature": "DataTableUtils.addBlankColumnsToMatchHeaders(DataTable a, DataTable b)", "testcase": false, "constructor": false}, {"identifier": "mergeComplementaryColumns", "parameters": "(DataTable dataTable)", "modifiers": "static", "return": "DataTable", "signature": "DataTable mergeComplementaryColumns(DataTable dataTable)", "full_signature": "static DataTable mergeComplementaryColumns(DataTable dataTable)", "class_method_signature": "DataTableUtils.mergeComplementaryColumns(DataTable dataTable)", "testcase": false, "constructor": false}, {"identifier": "areComplementary", "parameters": "(List<String> column1, List<String> column2)", "modifiers": "public static", "return": "boolean", "signature": "boolean areComplementary(List<String> column1, List<String> column2)", "full_signature": "public static boolean areComplementary(List<String> column1, List<String> column2)", "class_method_signature": "DataTableUtils.areComplementary(List<String> column1, List<String> column2)", "testcase": false, "constructor": false}], "file": "sejda-sambox/src/main/java/org/sejda/impl/sambox/component/excel/DataTableUtils.java"}, "focal_method": {"identifier": "mergeTablesSpanningMultiplePages", "parameters": "(List<DataTable> dataTables)", "modifiers": "public static", "return": "List<DataTable>", "body": "public static List<DataTable> mergeTablesSpanningMultiplePages(List<DataTable> dataTables) {\n        List<DataTable> results = new ArrayList<>();\n        DataTable current = null;\n\n        for (DataTable dt : dataTables) {\n            if (current != null) {\n                if (current.hasSameHeaderBlanksIgnoredAs(dt)) {\n                    addBlankColumnsToMatchHeaders(current, dt);\n                }\n                \n                if (current.hasSameColumnCountAs(dt)) {\n                    current = current.mergeWith(dt);\n                } else {\n                    results.add(current);\n                    current = dt;\n                }\n            } else {\n                current = dt;\n            }\n        }\n\n        if (current != null) {\n            results.add(current);\n        }\n\n        return results;\n    }", "signature": "List<DataTable> mergeTablesSpanningMultiplePages(List<DataTable> dataTables)", "full_signature": "public static List<DataTable> mergeTablesSpanningMultiplePages(List<DataTable> dataTables)", "class_method_signature": "DataTableUtils.mergeTablesSpanningMultiplePages(List<DataTable> dataTables)", "testcase": false, "constructor": false, "invocations": ["hasSameHeaderBlanksIgnoredAs", "addBlankColumnsToMatchHeaders", "hasSameColumnCountAs", "mergeWith", "add", "add"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}