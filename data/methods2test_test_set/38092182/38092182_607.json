{"test_class": {"identifier": "CustomEventNativeAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Activity context;", "modifier": "private", "type": "Activity", "declarator": "context", "var_name": "context"}, {"original_string": "private DownloadResponse downloadResponse;", "modifier": "private", "type": "DownloadResponse", "declarator": "downloadResponse", "var_name": "downloadResponse"}, {"original_string": "private HashMap<String, Object> localExtras;", "modifier": "private", "type": "HashMap<String, Object>", "declarator": "localExtras", "var_name": "localExtras"}, {"original_string": "private CustomEventNative.CustomEventNativeListener mCustomEventNativeListener;", "modifier": "private", "type": "CustomEventNative.CustomEventNativeListener", "declarator": "mCustomEventNativeListener", "var_name": "mCustomEventNativeListener"}, {"original_string": "private CustomEventNative mCustomEventNative;", "modifier": "private", "type": "CustomEventNative", "declarator": "mCustomEventNative", "var_name": "mCustomEventNative"}, {"original_string": "private HashMap<String, String> serverExtras;", "modifier": "private", "type": "HashMap<String, String>", "declarator": "serverExtras", "var_name": "serverExtras"}, {"original_string": "private TestHttpResponseWithHeaders testHttpResponseWithHeaders;", "modifier": "private", "type": "TestHttpResponseWithHeaders", "declarator": "testHttpResponseWithHeaders", "var_name": "testHttpResponseWithHeaders"}], "file": "MoPubAd/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java"}, "test_case": {"identifier": "loadNativeAd_withValidInput_shouldCallLoadNativeAdOnTheCustomEvent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void loadNativeAd_withValidInput_shouldCallLoadNativeAdOnTheCustomEvent() throws Exception {\n        CustomEventNativeAdapter.loadNativeAd(context, localExtras, downloadResponse, mCustomEventNativeListener);\n        verify(mCustomEventNative).loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);\n        verify(mCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));\n        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(NativeAdInterface.class));\n    }", "signature": "void loadNativeAd_withValidInput_shouldCallLoadNativeAdOnTheCustomEvent()", "full_signature": "@Test public void loadNativeAd_withValidInput_shouldCallLoadNativeAdOnTheCustomEvent()", "class_method_signature": "CustomEventNativeAdapterTest.loadNativeAd_withValidInput_shouldCallLoadNativeAdOnTheCustomEvent()", "testcase": true, "constructor": false, "invocations": ["loadNativeAd", "loadNativeAd", "verify", "onNativeAdFailed", "verify", "never", "any", "onNativeAdLoaded", "verify", "never", "any"]}, "focal_class": {"identifier": "CustomEventNativeAdapter", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String RESPONSE_BODY_KEY = \"response_body_key\";", "modifier": "static final", "type": "String", "declarator": "RESPONSE_BODY_KEY = \"response_body_key\"", "var_name": "RESPONSE_BODY_KEY"}], "methods": [{"identifier": "CustomEventNativeAdapter", "parameters": "()", "modifiers": "private", "return": "", "signature": " CustomEventNativeAdapter()", "full_signature": "private  CustomEventNativeAdapter()", "class_method_signature": "CustomEventNativeAdapter.CustomEventNativeAdapter()", "testcase": false, "constructor": true}, {"identifier": "loadNativeAd", "parameters": "(@NonNull final Context context,\n            @NonNull final Map<String, Object> localExtras,\n            @NonNull final DownloadResponse downloadResponse,\n            @NonNull final CustomEventNative.CustomEventNativeListener customEventNativeListener)", "modifiers": "public static", "return": "void", "signature": "void loadNativeAd(@NonNull final Context context,\n            @NonNull final Map<String, Object> localExtras,\n            @NonNull final DownloadResponse downloadResponse,\n            @NonNull final CustomEventNative.CustomEventNativeListener customEventNativeListener)", "full_signature": "public static void loadNativeAd(@NonNull final Context context,\n            @NonNull final Map<String, Object> localExtras,\n            @NonNull final DownloadResponse downloadResponse,\n            @NonNull final CustomEventNative.CustomEventNativeListener customEventNativeListener)", "class_method_signature": "CustomEventNativeAdapter.loadNativeAd(@NonNull final Context context,\n            @NonNull final Map<String, Object> localExtras,\n            @NonNull final DownloadResponse downloadResponse,\n            @NonNull final CustomEventNative.CustomEventNativeListener customEventNativeListener)", "testcase": false, "constructor": false}], "file": "MoPubAd/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java"}, "focal_method": {"identifier": "loadNativeAd", "parameters": "(@NonNull final Context context,\n            @NonNull final Map<String, Object> localExtras,\n            @NonNull final DownloadResponse downloadResponse,\n            @NonNull final CustomEventNative.CustomEventNativeListener customEventNativeListener)", "modifiers": "public static", "return": "void", "body": "public static void loadNativeAd(@NonNull final Context context,\n            @NonNull final Map<String, Object> localExtras,\n            @NonNull final DownloadResponse downloadResponse,\n            @NonNull final CustomEventNative.CustomEventNativeListener customEventNativeListener) {\n\n        final String customEventNativeData = downloadResponse.getFirstHeader(ResponseHeader.CUSTOM_EVENT_DATA);\n        final String customEventNativeClassName = downloadResponse.getFirstHeader(ResponseHeader.CUSTOM_EVENT_NAME);\n\n        final CustomEventNative customEventNative;\n        try {\n            customEventNative = CustomEventNativeFactory.create(customEventNativeClassName);\n        } catch (Exception e) {\n            MoPubLog.w(\"Failed to load Custom Event Native class: \" + customEventNativeClassName);\n            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);\n            return;\n        }\n\n        Map<String, String> serverExtras = new HashMap<String, String>();\n        // Attempt to load the JSON extras into mServerExtras.\n        try {\n            serverExtras = Json.jsonStringToMap(customEventNativeData);\n        } catch (Exception e) {\n            MoPubLog.w(\"Failed to create Map from JSON: \" + customEventNativeData, e);\n        }\n\n        serverExtras.put(RESPONSE_BODY_KEY, HttpResponses.asResponseString(downloadResponse));\n\n        customEventNative.loadNativeAd(\n                context,\n                customEventNativeListener,\n                localExtras,\n                serverExtras\n        );\n    }", "signature": "void loadNativeAd(@NonNull final Context context,\n            @NonNull final Map<String, Object> localExtras,\n            @NonNull final DownloadResponse downloadResponse,\n            @NonNull final CustomEventNative.CustomEventNativeListener customEventNativeListener)", "full_signature": "public static void loadNativeAd(@NonNull final Context context,\n            @NonNull final Map<String, Object> localExtras,\n            @NonNull final DownloadResponse downloadResponse,\n            @NonNull final CustomEventNative.CustomEventNativeListener customEventNativeListener)", "class_method_signature": "CustomEventNativeAdapter.loadNativeAd(@NonNull final Context context,\n            @NonNull final Map<String, Object> localExtras,\n            @NonNull final DownloadResponse downloadResponse,\n            @NonNull final CustomEventNative.CustomEventNativeListener customEventNativeListener)", "testcase": false, "constructor": false, "invocations": ["getFirstHeader", "getFirstHeader", "create", "w", "onNativeAdFailed", "jsonStringToMap", "w", "put", "asResponseString", "loadNativeAd"]}, "repository": {"repo_id": 38092182, "url": "https://github.com/harshalbenake/hbworkspace2-100", "language": "Java", "is_fork": false, "fork_count": 160, "stargazer_count": 191, "size": 307516, "license": "licensed"}}