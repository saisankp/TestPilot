{"test_class": {"identifier": "AtomContainerSetTest", "superclass": "extends AbstractAtomContainerSetTest", "interfaces": "", "fields": [], "file": "base/silent/src/test/java/org/openscience/cdk/silent/AtomContainerSetTest.java"}, "test_case": {"identifier": "testAtomContainerSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAtomContainerSet() {\n        IAtomContainerSet som = new AtomContainerSet();\n        Assert.assertNotNull(som);\n        Assert.assertEquals(0, som.getAtomContainerCount());\n    }", "signature": "void testAtomContainerSet()", "full_signature": "@Test public void testAtomContainerSet()", "class_method_signature": "AtomContainerSetTest.testAtomContainerSet()", "testcase": true, "constructor": false, "invocations": ["assertNotNull", "assertEquals", "getAtomContainerCount"]}, "focal_class": {"identifier": "AtomContainerSet", "superclass": "extends ChemObject", "interfaces": "implements Serializable, IAtomContainerSet, IChemObjectListener,\n        Cloneable", "fields": [{"original_string": "private static final long  serialVersionUID = -521290255592768395L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -521290255592768395L", "var_name": "serialVersionUID"}, {"original_string": "protected IAtomContainer[] atomContainers;", "modifier": "protected", "type": "IAtomContainer[]", "declarator": "atomContainers", "var_name": "atomContainers"}, {"original_string": "protected int              atomContainerCount;", "modifier": "protected", "type": "int", "declarator": "atomContainerCount", "var_name": "atomContainerCount"}, {"original_string": "protected Double[]         multipliers;", "modifier": "protected", "type": "Double[]", "declarator": "multipliers", "var_name": "multipliers"}, {"original_string": "protected int              growArraySize    = 5;", "modifier": "protected", "type": "int", "declarator": "growArraySize    = 5", "var_name": "growArraySize"}], "methods": [{"identifier": "AtomContainerSet", "parameters": "()", "modifiers": "public", "return": "", "signature": " AtomContainerSet()", "full_signature": "public  AtomContainerSet()", "class_method_signature": "AtomContainerSet.AtomContainerSet()", "testcase": false, "constructor": true}, {"identifier": "addAtomContainer", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "void", "signature": "void addAtomContainer(IAtomContainer atomContainer)", "full_signature": "@Override public void addAtomContainer(IAtomContainer atomContainer)", "class_method_signature": "AtomContainerSet.addAtomContainer(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "removeAtomContainer", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "void", "signature": "void removeAtomContainer(IAtomContainer atomContainer)", "full_signature": "@Override public void removeAtomContainer(IAtomContainer atomContainer)", "class_method_signature": "AtomContainerSet.removeAtomContainer(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "removeAllAtomContainers", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void removeAllAtomContainers()", "full_signature": "@Override public void removeAllAtomContainers()", "class_method_signature": "AtomContainerSet.removeAllAtomContainers()", "testcase": false, "constructor": false}, {"identifier": "removeAtomContainer", "parameters": "(int pos)", "modifiers": "@Override public", "return": "void", "signature": "void removeAtomContainer(int pos)", "full_signature": "@Override public void removeAtomContainer(int pos)", "class_method_signature": "AtomContainerSet.removeAtomContainer(int pos)", "testcase": false, "constructor": false}, {"identifier": "replaceAtomContainer", "parameters": "(int position, IAtomContainer container)", "modifiers": "@Override public", "return": "void", "signature": "void replaceAtomContainer(int position, IAtomContainer container)", "full_signature": "@Override public void replaceAtomContainer(int position, IAtomContainer container)", "class_method_signature": "AtomContainerSet.replaceAtomContainer(int position, IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "setMultiplier", "parameters": "(IAtomContainer container, Double multiplier)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean setMultiplier(IAtomContainer container, Double multiplier)", "full_signature": "@Override public boolean setMultiplier(IAtomContainer container, Double multiplier)", "class_method_signature": "AtomContainerSet.setMultiplier(IAtomContainer container, Double multiplier)", "testcase": false, "constructor": false}, {"identifier": "setMultiplier", "parameters": "(int position, Double multiplier)", "modifiers": "@Override public", "return": "void", "signature": "void setMultiplier(int position, Double multiplier)", "full_signature": "@Override public void setMultiplier(int position, Double multiplier)", "class_method_signature": "AtomContainerSet.setMultiplier(int position, Double multiplier)", "testcase": false, "constructor": false}, {"identifier": "getMultipliers", "parameters": "()", "modifiers": "@Override public", "return": "Double[]", "signature": "Double[] getMultipliers()", "full_signature": "@Override public Double[] getMultipliers()", "class_method_signature": "AtomContainerSet.getMultipliers()", "testcase": false, "constructor": false}, {"identifier": "setMultipliers", "parameters": "(Double[] newMultipliers)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean setMultipliers(Double[] newMultipliers)", "full_signature": "@Override public boolean setMultipliers(Double[] newMultipliers)", "class_method_signature": "AtomContainerSet.setMultipliers(Double[] newMultipliers)", "testcase": false, "constructor": false}, {"identifier": "addAtomContainer", "parameters": "(IAtomContainer atomContainer, double multiplier)", "modifiers": "@Override public", "return": "void", "signature": "void addAtomContainer(IAtomContainer atomContainer, double multiplier)", "full_signature": "@Override public void addAtomContainer(IAtomContainer atomContainer, double multiplier)", "class_method_signature": "AtomContainerSet.addAtomContainer(IAtomContainer atomContainer, double multiplier)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(IAtomContainerSet atomContainerSet)", "modifiers": "@Override public", "return": "void", "signature": "void add(IAtomContainerSet atomContainerSet)", "full_signature": "@Override public void add(IAtomContainerSet atomContainerSet)", "class_method_signature": "AtomContainerSet.add(IAtomContainerSet atomContainerSet)", "testcase": false, "constructor": false}, {"identifier": "atomContainers", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<IAtomContainer>", "signature": "Iterable<IAtomContainer> atomContainers()", "full_signature": "@Override public Iterable<IAtomContainer> atomContainers()", "class_method_signature": "AtomContainerSet.atomContainers()", "testcase": false, "constructor": false}, {"identifier": "getAtomContainer", "parameters": "(int number)", "modifiers": "@Override public", "return": "IAtomContainer", "signature": "IAtomContainer getAtomContainer(int number)", "full_signature": "@Override public IAtomContainer getAtomContainer(int number)", "class_method_signature": "AtomContainerSet.getAtomContainer(int number)", "testcase": false, "constructor": false}, {"identifier": "getMultiplier", "parameters": "(int number)", "modifiers": "@Override public", "return": "Double", "signature": "Double getMultiplier(int number)", "full_signature": "@Override public Double getMultiplier(int number)", "class_method_signature": "AtomContainerSet.getMultiplier(int number)", "testcase": false, "constructor": false}, {"identifier": "getMultiplier", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "Double", "signature": "Double getMultiplier(IAtomContainer container)", "full_signature": "@Override public Double getMultiplier(IAtomContainer container)", "class_method_signature": "AtomContainerSet.getMultiplier(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "growAtomContainerArray", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void growAtomContainerArray()", "full_signature": "protected void growAtomContainerArray()", "class_method_signature": "AtomContainerSet.growAtomContainerArray()", "testcase": false, "constructor": false}, {"identifier": "getAtomContainerCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getAtomContainerCount()", "full_signature": "@Override public int getAtomContainerCount()", "class_method_signature": "AtomContainerSet.getAtomContainerCount()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AtomContainerSet.toString()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object clone()", "full_signature": "@Override public Object clone()", "class_method_signature": "AtomContainerSet.clone()", "testcase": false, "constructor": false}, {"identifier": "stateChanged", "parameters": "(IChemObjectChangeEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void stateChanged(IChemObjectChangeEvent event)", "full_signature": "@Override public void stateChanged(IChemObjectChangeEvent event)", "class_method_signature": "AtomContainerSet.stateChanged(IChemObjectChangeEvent event)", "testcase": false, "constructor": false}, {"identifier": "sortAtomContainers", "parameters": "(final Comparator<IAtomContainer> comparator)", "modifiers": "@Override public", "return": "void", "signature": "void sortAtomContainers(final Comparator<IAtomContainer> comparator)", "full_signature": "@Override public void sortAtomContainers(final Comparator<IAtomContainer> comparator)", "class_method_signature": "AtomContainerSet.sortAtomContainers(final Comparator<IAtomContainer> comparator)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "AtomContainerSet.isEmpty()", "testcase": false, "constructor": false}], "file": "base/silent/src/main/java/org/openscience/cdk/silent/AtomContainerSet.java"}, "focal_method": {"identifier": "AtomContainerSet", "parameters": "()", "modifiers": "public", "return": "", "body": "public AtomContainerSet() {\n        atomContainerCount = 0;\n        atomContainers = new IAtomContainer[growArraySize];\n        multipliers = new Double[growArraySize];\n    }", "signature": " AtomContainerSet()", "full_signature": "public  AtomContainerSet()", "class_method_signature": "AtomContainerSet.AtomContainerSet()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}