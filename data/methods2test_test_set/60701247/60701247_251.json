{"test_class": {"identifier": "VirtualDevicesTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FileSystem myFileSystem;", "modifier": "private", "type": "FileSystem", "declarator": "myFileSystem", "var_name": "myFileSystem"}, {"original_string": "private VirtualDevicesTask myTask;", "modifier": "private", "type": "VirtualDevicesTask", "declarator": "myTask", "var_name": "myTask"}], "file": "android/testSrc/com/android/tools/idea/run/deployment/VirtualDevicesTaskTest.java"}, "test_case": {"identifier": "getSnapshot", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getSnapshot() {\n    // Arrange\n    SnapshotOuterClass.Snapshot protocolBufferSnapshot = SnapshotOuterClass.Snapshot.newBuilder()\n      .addImages(Image.getDefaultInstance())\n      .setLogicalName(\"My Snapshot\")\n      .build();\n\n    Path directory = myFileSystem.getPath(\"\");\n\n    // Act\n    Object snapshot = myTask.getSnapshot(protocolBufferSnapshot, directory);\n\n    // Assert\n    assertEquals(new Snapshot(directory, \"My Snapshot\"), snapshot);\n  }", "signature": "void getSnapshot()", "full_signature": "@Test public void getSnapshot()", "class_method_signature": "VirtualDevicesTaskTest.getSnapshot()", "testcase": true, "constructor": false, "invocations": ["build", "setLogicalName", "addImages", "newBuilder", "getDefaultInstance", "getPath", "getSnapshot", "assertEquals"]}, "focal_class": {"identifier": "VirtualDevicesTask", "superclass": "", "interfaces": "implements AsyncSupplier<Collection<VirtualDevice>>", "fields": [{"original_string": "private final boolean mySelectDeviceSnapshotComboBoxSnapshotsEnabled;", "modifier": "private final", "type": "boolean", "declarator": "mySelectDeviceSnapshotComboBoxSnapshotsEnabled", "var_name": "mySelectDeviceSnapshotComboBoxSnapshotsEnabled"}, {"original_string": "@NotNull\n  private final FileSystem myFileSystem;", "modifier": "@NotNull\n  private final", "type": "FileSystem", "declarator": "myFileSystem", "var_name": "myFileSystem"}, {"original_string": "@Nullable\n  private final LaunchCompatibilityChecker myChecker;", "modifier": "@Nullable\n  private final", "type": "LaunchCompatibilityChecker", "declarator": "myChecker", "var_name": "myChecker"}], "methods": [{"identifier": "VirtualDevicesTask", "parameters": "(boolean selectDeviceSnapshotComboBoxSnapshotsEnabled,\n                     @NotNull FileSystem fileSystem,\n                     @Nullable LaunchCompatibilityChecker checker)", "modifiers": "", "return": "", "signature": " VirtualDevicesTask(boolean selectDeviceSnapshotComboBoxSnapshotsEnabled,\n                     @NotNull FileSystem fileSystem,\n                     @Nullable LaunchCompatibilityChecker checker)", "full_signature": "  VirtualDevicesTask(boolean selectDeviceSnapshotComboBoxSnapshotsEnabled,\n                     @NotNull FileSystem fileSystem,\n                     @Nullable LaunchCompatibilityChecker checker)", "class_method_signature": "VirtualDevicesTask.VirtualDevicesTask(boolean selectDeviceSnapshotComboBoxSnapshotsEnabled,\n                     @NotNull FileSystem fileSystem,\n                     @Nullable LaunchCompatibilityChecker checker)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "ListenableFuture<Collection<VirtualDevice>>", "signature": "ListenableFuture<Collection<VirtualDevice>> get()", "full_signature": "@NotNull @Override public ListenableFuture<Collection<VirtualDevice>> get()", "class_method_signature": "VirtualDevicesTask.get()", "testcase": false, "constructor": false}, {"identifier": "getVirtualDevices", "parameters": "()", "modifiers": "@NotNull private", "return": "Collection<VirtualDevice>", "signature": "Collection<VirtualDevice> getVirtualDevices()", "full_signature": "@NotNull private Collection<VirtualDevice> getVirtualDevices()", "class_method_signature": "VirtualDevicesTask.getVirtualDevices()", "testcase": false, "constructor": false}, {"identifier": "newDisconnectedDevices", "parameters": "(@NotNull AvdInfo device)", "modifiers": "@NotNull private", "return": "Stream<VirtualDevice>", "signature": "Stream<VirtualDevice> newDisconnectedDevices(@NotNull AvdInfo device)", "full_signature": "@NotNull private Stream<VirtualDevice> newDisconnectedDevices(@NotNull AvdInfo device)", "class_method_signature": "VirtualDevicesTask.newDisconnectedDevices(@NotNull AvdInfo device)", "testcase": false, "constructor": false}, {"identifier": "getSnapshots", "parameters": "(@NotNull AvdInfo device)", "modifiers": "@NotNull private", "return": "Collection<Snapshot>", "signature": "Collection<Snapshot> getSnapshots(@NotNull AvdInfo device)", "full_signature": "@NotNull private Collection<Snapshot> getSnapshots(@NotNull AvdInfo device)", "class_method_signature": "VirtualDevicesTask.getSnapshots(@NotNull AvdInfo device)", "testcase": false, "constructor": false}, {"identifier": "getSnapshot", "parameters": "(@NotNull Path snapshotDirectory)", "modifiers": "@Nullable @VisibleForTesting", "return": "Snapshot", "signature": "Snapshot getSnapshot(@NotNull Path snapshotDirectory)", "full_signature": "@Nullable @VisibleForTesting Snapshot getSnapshot(@NotNull Path snapshotDirectory)", "class_method_signature": "VirtualDevicesTask.getSnapshot(@NotNull Path snapshotDirectory)", "testcase": false, "constructor": false}, {"identifier": "getSnapshot", "parameters": "(@NotNull SnapshotOuterClass.Snapshot snapshot, @NotNull Path snapshotDirectory)", "modifiers": "@Nullable @VisibleForTesting", "return": "Snapshot", "signature": "Snapshot getSnapshot(@NotNull SnapshotOuterClass.Snapshot snapshot, @NotNull Path snapshotDirectory)", "full_signature": "@Nullable @VisibleForTesting Snapshot getSnapshot(@NotNull SnapshotOuterClass.Snapshot snapshot, @NotNull Path snapshotDirectory)", "class_method_signature": "VirtualDevicesTask.getSnapshot(@NotNull SnapshotOuterClass.Snapshot snapshot, @NotNull Path snapshotDirectory)", "testcase": false, "constructor": false}, {"identifier": "newDisconnectedDevice", "parameters": "(@NotNull AvdInfo avd, @Nullable Snapshot snapshot)", "modifiers": "@NotNull private", "return": "VirtualDevice", "signature": "VirtualDevice newDisconnectedDevice(@NotNull AvdInfo avd, @Nullable Snapshot snapshot)", "full_signature": "@NotNull private VirtualDevice newDisconnectedDevice(@NotNull AvdInfo avd, @Nullable Snapshot snapshot)", "class_method_signature": "VirtualDevicesTask.newDisconnectedDevice(@NotNull AvdInfo avd, @Nullable Snapshot snapshot)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/run/deployment/VirtualDevicesTask.java"}, "focal_method": {"identifier": "getSnapshot", "parameters": "(@NotNull Path snapshotDirectory)", "modifiers": "@Nullable @VisibleForTesting", "return": "Snapshot", "body": "@Nullable\n  @VisibleForTesting\n  Snapshot getSnapshot(@NotNull Path snapshotDirectory) {\n    Path snapshotProtocolBuffer = snapshotDirectory.resolve(\"snapshot.pb\");\n    Path snapshotDirectoryName = snapshotDirectory.getFileName();\n\n    if (!Files.exists(snapshotProtocolBuffer)) {\n      return new Snapshot(snapshotDirectoryName, myFileSystem);\n    }\n\n    try (InputStream in = Files.newInputStream(snapshotProtocolBuffer)) {\n      return getSnapshot(SnapshotOuterClass.Snapshot.parseFrom(in), snapshotDirectoryName);\n    }\n    catch (IOException exception) {\n      Logger.getInstance(VirtualDevicesTask.class).warn(snapshotDirectory.toString(), exception);\n      return null;\n    }\n  }", "signature": "Snapshot getSnapshot(@NotNull Path snapshotDirectory)", "full_signature": "@Nullable @VisibleForTesting Snapshot getSnapshot(@NotNull Path snapshotDirectory)", "class_method_signature": "VirtualDevicesTask.getSnapshot(@NotNull Path snapshotDirectory)", "testcase": false, "constructor": false, "invocations": ["resolve", "getFileName", "exists", "newInputStream", "getSnapshot", "parseFrom", "warn", "getInstance", "toString"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}