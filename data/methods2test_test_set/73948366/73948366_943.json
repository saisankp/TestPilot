{"test_class": {"identifier": "X509CertUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(X509CertUtilsTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(X509CertUtilsTest.class)", "var_name": "LOGGER"}], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/X509CertUtilsTest.java"}, "test_case": {"identifier": "testExtractRequestInstanceId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExtractRequestInstanceId() throws CertificateParsingException {\n\n        assertNull(X509CertUtils.extractRequestInstanceId(null));\n\n        X509Certificate cert = Mockito.mock(X509Certificate.class);\n        Collection<List<?>> dnsNames = new ArrayList<>();\n        ArrayList<Object> item1 = new ArrayList<>();\n        item1.add(2);\n        item1.add(\"host1.domain.athenz\");\n        dnsNames.add(item1);\n        Mockito.when(cert.getSubjectAlternativeNames()).thenReturn(dnsNames);\n\n        assertNull(X509CertUtils.extractRequestInstanceId(cert));\n\n        ArrayList<Object> item2 = new ArrayList<>();\n        item2.add(2);\n        item2.add(\"instanceid1.instanceid.athenz.test\");\n        dnsNames.add(item2);\n\n        assertEquals(\"instanceid1\", X509CertUtils.extractRequestInstanceId(cert));\n    }", "signature": "void testExtractRequestInstanceId()", "full_signature": "@Test public void testExtractRequestInstanceId()", "class_method_signature": "X509CertUtilsTest.testExtractRequestInstanceId()", "testcase": true, "constructor": false, "invocations": ["assertNull", "extractRequestInstanceId", "mock", "add", "add", "add", "thenReturn", "when", "getSubjectAlternativeNames", "assertNull", "extractRequestInstanceId", "add", "add", "add", "assertEquals", "extractRequestInstanceId"]}, "focal_class": {"identifier": "X509CertUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(X509RoleCertRequest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(X509RoleCertRequest.class)", "var_name": "LOGGER"}, {"original_string": "private static final ThreadLocal<StringBuilder> TLS_BUILDER = ThreadLocal.withInitial(() -> new StringBuilder(256));", "modifier": "private static final", "type": "ThreadLocal<StringBuilder>", "declarator": "TLS_BUILDER = ThreadLocal.withInitial(() -> new StringBuilder(256))", "var_name": "TLS_BUILDER"}], "methods": [{"identifier": "extractRequestInstanceIdFromURI", "parameters": "(final List<String> uriList)", "modifiers": "public static", "return": "String", "signature": "String extractRequestInstanceIdFromURI(final List<String> uriList)", "full_signature": "public static String extractRequestInstanceIdFromURI(final List<String> uriList)", "class_method_signature": "X509CertUtils.extractRequestInstanceIdFromURI(final List<String> uriList)", "testcase": false, "constructor": false}, {"identifier": "extractItemFromURI", "parameters": "(final List<String> uriList, final String item)", "modifiers": "public static", "return": "String", "signature": "String extractItemFromURI(final List<String> uriList, final String item)", "full_signature": "public static String extractItemFromURI(final List<String> uriList, final String item)", "class_method_signature": "X509CertUtils.extractItemFromURI(final List<String> uriList, final String item)", "testcase": false, "constructor": false}, {"identifier": "extractRequestInstanceIdFromDnsNames", "parameters": "(final List<String> dnsNames)", "modifiers": "public static", "return": "String", "signature": "String extractRequestInstanceIdFromDnsNames(final List<String> dnsNames)", "full_signature": "public static String extractRequestInstanceIdFromDnsNames(final List<String> dnsNames)", "class_method_signature": "X509CertUtils.extractRequestInstanceIdFromDnsNames(final List<String> dnsNames)", "testcase": false, "constructor": false}, {"identifier": "extractRequestInstanceId", "parameters": "(X509Certificate cert)", "modifiers": "public static", "return": "String", "signature": "String extractRequestInstanceId(X509Certificate cert)", "full_signature": "public static String extractRequestInstanceId(X509Certificate cert)", "class_method_signature": "X509CertUtils.extractRequestInstanceId(X509Certificate cert)", "testcase": false, "constructor": false}, {"identifier": "logCert", "parameters": "(final Logger certLogger, final Principal principal,\n                final String ip, final String provider, final String instanceId,\n                final X509Certificate x509Cert)", "modifiers": "public static", "return": "void", "signature": "void logCert(final Logger certLogger, final Principal principal,\n                final String ip, final String provider, final String instanceId,\n                final X509Certificate x509Cert)", "full_signature": "public static void logCert(final Logger certLogger, final Principal principal,\n                final String ip, final String provider, final String instanceId,\n                final X509Certificate x509Cert)", "class_method_signature": "X509CertUtils.logCert(final Logger certLogger, final Principal principal,\n                final String ip, final String provider, final String instanceId,\n                final X509Certificate x509Cert)", "testcase": false, "constructor": false}, {"identifier": "logSSH", "parameters": "(final Logger certLogger, final Principal principal, final String ip,\n            final String service, final String instanceId)", "modifiers": "public static", "return": "void", "signature": "void logSSH(final Logger certLogger, final Principal principal, final String ip,\n            final String service, final String instanceId)", "full_signature": "public static void logSSH(final Logger certLogger, final Principal principal, final String ip,\n            final String service, final String instanceId)", "class_method_signature": "X509CertUtils.logSSH(final Logger certLogger, final Principal principal, final String ip,\n            final String service, final String instanceId)", "testcase": false, "constructor": false}, {"identifier": "logRecord", "parameters": "(final Principal principal, final String ip, final String provider,\n            final String instanceId, final X509Certificate x509Cert)", "modifiers": "public static", "return": "String", "signature": "String logRecord(final Principal principal, final String ip, final String provider,\n            final String instanceId, final X509Certificate x509Cert)", "full_signature": "public static String logRecord(final Principal principal, final String ip, final String provider,\n            final String instanceId, final X509Certificate x509Cert)", "class_method_signature": "X509CertUtils.logRecord(final Principal principal, final String ip, final String provider,\n            final String instanceId, final X509Certificate x509Cert)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/X509CertUtils.java"}, "focal_method": {"identifier": "extractRequestInstanceId", "parameters": "(X509Certificate cert)", "modifiers": "public static", "return": "String", "body": "public static String extractRequestInstanceId(X509Certificate cert) {\n\n        if (cert == null) {\n            return null;\n        }\n\n        // first we're going to look for our uri field to see\n        // if we have an instance id uri available. the format is:\n        // athenz://instanceid/<provider>/<instance-id>\n\n        final List<String> uriList = Crypto.extractX509CertURIs(cert);\n        final String instanceId = extractRequestInstanceIdFromURI(uriList);\n        if (instanceId != null) {\n            return instanceId;\n        }\n\n        // if no uri, then we'll fall back to our old dnsName field\n\n        final List<String> dnsNames = Crypto.extractX509CertDnsNames(cert);\n        return extractRequestInstanceIdFromDnsNames(dnsNames);\n    }", "signature": "String extractRequestInstanceId(X509Certificate cert)", "full_signature": "public static String extractRequestInstanceId(X509Certificate cert)", "class_method_signature": "X509CertUtils.extractRequestInstanceId(X509Certificate cert)", "testcase": false, "constructor": false, "invocations": ["extractX509CertURIs", "extractRequestInstanceIdFromURI", "extractX509CertDnsNames", "extractRequestInstanceIdFromDnsNames"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}