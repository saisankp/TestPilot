{"test_class": {"identifier": "ListenableFutureTaskTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/com/alibaba/dubbo/common/concurrent/ListenableFutureTaskTest.java"}, "test_case": {"identifier": "testRunnableResponse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRunnableResponse() throws ExecutionException, InterruptedException {\n        ListenableFutureTask<Boolean> futureTask = ListenableFutureTask.create(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Thread.sleep(500);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }, true);\n        futureTask.run();\n\n        Boolean result = futureTask.get();\n        assertThat(result, is(true));\n    }", "signature": "void testRunnableResponse()", "full_signature": "@Test public void testRunnableResponse()", "class_method_signature": "ListenableFutureTaskTest.testRunnableResponse()", "testcase": true, "constructor": false, "invocations": ["create", "sleep", "printStackTrace", "run", "get", "assertThat", "is"]}, "focal_class": {"identifier": "ListenableFutureTask", "superclass": "extends FutureTask<V>", "interfaces": "implements ListenableFuture<V>", "fields": [{"original_string": "private final ExecutionList executionList = new ExecutionList();", "modifier": "private final", "type": "ExecutionList", "declarator": "executionList = new ExecutionList()", "var_name": "executionList"}], "methods": [{"identifier": "create", "parameters": "(Callable<V> callable)", "modifiers": "public static", "return": "ListenableFutureTask<V>", "signature": "ListenableFutureTask<V> create(Callable<V> callable)", "full_signature": "public static ListenableFutureTask<V> create(Callable<V> callable)", "class_method_signature": "ListenableFutureTask.create(Callable<V> callable)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(\n            Runnable runnable, V result)", "modifiers": "public static", "return": "ListenableFutureTask<V>", "signature": "ListenableFutureTask<V> create(\n            Runnable runnable, V result)", "full_signature": "public static ListenableFutureTask<V> create(\n            Runnable runnable, V result)", "class_method_signature": "ListenableFutureTask.create(\n            Runnable runnable, V result)", "testcase": false, "constructor": false}, {"identifier": "ListenableFutureTask", "parameters": "(Callable<V> callable)", "modifiers": "", "return": "", "signature": " ListenableFutureTask(Callable<V> callable)", "full_signature": "  ListenableFutureTask(Callable<V> callable)", "class_method_signature": "ListenableFutureTask.ListenableFutureTask(Callable<V> callable)", "testcase": false, "constructor": true}, {"identifier": "ListenableFutureTask", "parameters": "(Runnable runnable, V result)", "modifiers": "", "return": "", "signature": " ListenableFutureTask(Runnable runnable, V result)", "full_signature": "  ListenableFutureTask(Runnable runnable, V result)", "class_method_signature": "ListenableFutureTask.ListenableFutureTask(Runnable runnable, V result)", "testcase": false, "constructor": true}, {"identifier": "addListener", "parameters": "(Runnable listener, Executor exec)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(Runnable listener, Executor exec)", "full_signature": "@Override public void addListener(Runnable listener, Executor exec)", "class_method_signature": "ListenableFutureTask.addListener(Runnable listener, Executor exec)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(Runnable listener)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(Runnable listener)", "full_signature": "@Override public void addListener(Runnable listener)", "class_method_signature": "ListenableFutureTask.addListener(Runnable listener)", "testcase": false, "constructor": false}, {"identifier": "done", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void done()", "full_signature": "@Override protected void done()", "class_method_signature": "ListenableFutureTask.done()", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/com/alibaba/dubbo/common/concurrent/ListenableFutureTask.java"}, "focal_method": {"identifier": "create", "parameters": "(Callable<V> callable)", "modifiers": "public static", "return": "ListenableFutureTask<V>", "body": "public static <V> ListenableFutureTask<V> create(Callable<V> callable) {\n        return new ListenableFutureTask<V>(callable);\n    }", "signature": "ListenableFutureTask<V> create(Callable<V> callable)", "full_signature": "public static ListenableFutureTask<V> create(Callable<V> callable)", "class_method_signature": "ListenableFutureTask.create(Callable<V> callable)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}