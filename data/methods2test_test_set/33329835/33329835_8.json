{"test_class": {"identifier": "EbtsBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(EbtsBuilderTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(EbtsBuilderTest.class)", "var_name": "log"}], "file": "Jet/src/test/java/org/mitre/jet/ebts/EbtsBuilderTest.java"}, "test_case": {"identifier": "type7asType4TestSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void type7asType4TestSuccess() throws Exception {\n        Ebts ebts = new Ebts();\n        GenericRecord type1 = new GenericRecord(1);\n        type1.setField(3, new Field(\"0400\"));\n        type1.setField(8, new Field(\"WVMEDS001\"));\n\n        GenericRecord type2 = new GenericRecord(2);\n        type2.setField(2, new Field(\"04\"));\n        type2.setField(19, new Field(\"Smith,John\"));\n        type2.getField(19).getOccurrences().add(new Occurrence(\"Smith,Johnny\"));\n        type2.setField(18, new Field(\"Smith,Jo\"));\n        type2.setField(41, new Field(\"B\"));\n        type2.setField(40, new Field(\"A\"));\n\n        List<String> strings = new ArrayList<String>();\n        strings.add(\"Test1\");\n        strings.add(\"Test2\");\n        strings.add(\"Test3\");\n        List<Occurrence> occs = EbtsUtils.convertStringList(strings);\n        occs.add(new Occurrence(\"HI\"));\n        occs.remove(new Occurrence(\"HI\"));\n\n        type2.setField(50,new Field(occs));\n\n        int[] header = new int[]{4, 1, 1, 6, 1, 2, 2, 1};\n        BinaryHeaderImageRecord type7 = new BinaryHeaderImageRecord(7,header);\n        type7.setImageData(new byte[]{});\n        type7.setField(3,new Field(\"1\"));\n        type7.setField(4,new Field(\"1\"));\n        type7.setField(5,new Field(\"1\"));\n        type7.setField(6,new Field(\"1\"));\n        type7.setField(7,new Field(\"1\"));\n        type7.setField(8,new Field(\"1\"));\n\n        ebts.addRecord(type1);\n        ebts.addRecord(type2);\n        ebts.addRecord(type7);\n\n        EbtsBuilder ebtsBuilder = new EbtsBuilder();\n        byte[] binaryData = ebtsBuilder.build(ebts);\n\n        Ebts parsedEbts = EbtsParser.parse(binaryData,Type7Handling.TREAT_AS_TYPE4);\n        log.info(\"{}\",parsedEbts);\n\n    }", "signature": "void type7asType4TestSuccess()", "full_signature": "@Test public void type7asType4TestSuccess()", "class_method_signature": "EbtsBuilderTest.type7asType4TestSuccess()", "testcase": true, "constructor": false, "invocations": ["setField", "setField", "setField", "setField", "add", "getOccurrences", "getField", "setField", "setField", "setField", "add", "add", "add", "convertStringList", "add", "remove", "setField", "setImageData", "setField", "setField", "setField", "setField", "setField", "setField", "addRecord", "addRecord", "addRecord", "build", "parse", "info"]}, "focal_class": {"identifier": "EbtsBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private int minLength = 2;", "modifier": "private", "type": "int", "declarator": "minLength = 2", "var_name": "minLength"}, {"original_string": "private static final Set<Integer> binaryHeaderTypes = EbtsUtils.getBinaryHeaderTypes();", "modifier": "private static final", "type": "Set<Integer>", "declarator": "binaryHeaderTypes = EbtsUtils.getBinaryHeaderTypes()", "var_name": "binaryHeaderTypes"}, {"original_string": "private static final Set<Integer> genericTypes = EbtsUtils.getGenericRecordTypes();", "modifier": "private static final", "type": "Set<Integer>", "declarator": "genericTypes = EbtsUtils.getGenericRecordTypes()", "var_name": "genericTypes"}, {"original_string": "private Ebts ebts;", "modifier": "private", "type": "Ebts", "declarator": "ebts", "var_name": "ebts"}], "methods": [{"identifier": "EbtsBuilder", "parameters": "()", "modifiers": "public", "return": "", "signature": " EbtsBuilder()", "full_signature": "public  EbtsBuilder()", "class_method_signature": "EbtsBuilder.EbtsBuilder()", "testcase": false, "constructor": true}, {"identifier": "EbtsBuilder", "parameters": "(final int precedingZeros)", "modifiers": "public", "return": "", "signature": " EbtsBuilder(final int precedingZeros)", "full_signature": "public  EbtsBuilder(final int precedingZeros)", "class_method_signature": "EbtsBuilder.EbtsBuilder(final int precedingZeros)", "testcase": false, "constructor": true}, {"identifier": "fixCountField", "parameters": "(final GenericRecord record)", "modifiers": "private", "return": "void", "signature": "void fixCountField(final GenericRecord record)", "full_signature": "private void fixCountField(final GenericRecord record)", "class_method_signature": "EbtsBuilder.fixCountField(final GenericRecord record)", "testcase": false, "constructor": false}, {"identifier": "getNextAvailableIDC", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getNextAvailableIDC()", "full_signature": "private int getNextAvailableIDC()", "class_method_signature": "EbtsBuilder.getNextAvailableIDC()", "testcase": false, "constructor": false}, {"identifier": "genericBuilder", "parameters": "(final GenericRecord record, final ByteArrayOutputStream baos)", "modifiers": "private", "return": "void", "signature": "void genericBuilder(final GenericRecord record, final ByteArrayOutputStream baos)", "full_signature": "private void genericBuilder(final GenericRecord record, final ByteArrayOutputStream baos)", "class_method_signature": "EbtsBuilder.genericBuilder(final GenericRecord record, final ByteArrayOutputStream baos)", "testcase": false, "constructor": false}, {"identifier": "binaryHeaderBuilder", "parameters": "(final BinaryHeaderImageRecord record, final ByteArrayOutputStream baos)", "modifiers": "private static", "return": "void", "signature": "void binaryHeaderBuilder(final BinaryHeaderImageRecord record, final ByteArrayOutputStream baos)", "full_signature": "private static void binaryHeaderBuilder(final BinaryHeaderImageRecord record, final ByteArrayOutputStream baos)", "class_method_signature": "EbtsBuilder.binaryHeaderBuilder(final BinaryHeaderImageRecord record, final ByteArrayOutputStream baos)", "testcase": false, "constructor": false}, {"identifier": "setPrecedingZeros", "parameters": "(final int precedingZeros)", "modifiers": "public", "return": "void", "signature": "void setPrecedingZeros(final int precedingZeros)", "full_signature": "public void setPrecedingZeros(final int precedingZeros)", "class_method_signature": "EbtsBuilder.setPrecedingZeros(final int precedingZeros)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(final Ebts ebts)", "modifiers": "public", "return": "byte[]", "signature": "byte[] build(final Ebts ebts)", "full_signature": "public byte[] build(final Ebts ebts)", "class_method_signature": "EbtsBuilder.build(final Ebts ebts)", "testcase": false, "constructor": false}], "file": "Jet/src/main/java/org/mitre/jet/ebts/EbtsBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "(final Ebts ebts)", "modifiers": "public", "return": "byte[]", "body": "public byte[] build(final Ebts ebts) throws EbtsBuildingException {\n        this.ebts = ebts;\n        //Create the auto-expanding output stream\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        //Get list of all records\n        //Overwrite CNT field(1.03)\n        final List<LogicalRecord> records = ebts.getAllRecords();\n        for (final LogicalRecord record : records) {\n\n            if (genericTypes.contains(record.getRecordType())) {\n                genericBuilder((GenericRecord)record,baos);\n            } else if (binaryHeaderTypes.contains(record.getRecordType())) {\n                binaryHeaderBuilder((BinaryHeaderImageRecord)record,baos);\n            }\n        }\n        return baos.toByteArray();\n    }", "signature": "byte[] build(final Ebts ebts)", "full_signature": "public byte[] build(final Ebts ebts)", "class_method_signature": "EbtsBuilder.build(final Ebts ebts)", "testcase": false, "constructor": false, "invocations": ["getAllRecords", "contains", "getRecordType", "genericBuilder", "contains", "getRecordType", "binaryHeaderBuilder", "toByteArray"]}, "repository": {"repo_id": 33329835, "url": "https://github.com/ebts/jet", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 13, "size": 4035, "license": "licensed"}}