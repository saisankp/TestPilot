{"test_class": {"identifier": "ACompositeIteratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none ();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none ()", "var_name": "expectedException"}], "file": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACompositeIteratorTest.java"}, "test_case": {"identifier": "testPureNext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPureNext() {\n        final ACompositeIterator<Integer> iter = new ACompositeIterator<> (Arrays.asList (\n                Arrays.asList (1,2,3,4).iterator (),\n                Arrays.asList (5,6,7,8).iterator (),\n                Arrays.asList (9,10).iterator ()\n        ));\n\n        int expected = 1;\n        while (expected <= 10) {\n            int elem = iter.next ();\n            assertEquals (expected, elem);\n            expected++;\n        }\n\n        expectedException.expect (NoSuchElementException.class);\n        iter.next ();\n    }", "signature": "void testPureNext()", "full_signature": "@Test public void testPureNext()", "class_method_signature": "ACompositeIteratorTest.testPureNext()", "testcase": true, "constructor": false, "invocations": ["asList", "iterator", "asList", "iterator", "asList", "iterator", "asList", "next", "assertEquals", "expect", "next"]}, "focal_class": {"identifier": "ACompositeIterator", "superclass": "", "interfaces": "implements Iterator<T>", "fields": [{"original_string": "private final Iterator<Iterator<T>> itit;", "modifier": "private final", "type": "Iterator<Iterator<T>>", "declarator": "itit", "var_name": "itit"}, {"original_string": "@SuppressWarnings(\"unchecked\")\n    private Iterator<T> curIterator = (Iterator<T>) EMPTY;", "modifier": "@SuppressWarnings(\"unchecked\")\n    private", "type": "Iterator<T>", "declarator": "curIterator = (Iterator<T>) EMPTY", "var_name": "curIterator"}, {"original_string": "private static final Iterator<Object> EMPTY = new Iterator<Object>() {\n        @Override\n        public boolean hasNext() {\n            return false;\n        }\n\n        @Override\n        public Object next() {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void remove() {\n            throw new UnsupportedOperationException();\n        }\n    };", "modifier": "private static final", "type": "Iterator<Object>", "declarator": "EMPTY = new Iterator<Object>() {\n        @Override\n        public boolean hasNext() {\n            return false;\n        }\n\n        @Override\n        public Object next() {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void remove() {\n            throw new UnsupportedOperationException();\n        }\n    }", "var_name": "EMPTY"}], "methods": [{"identifier": "ACompositeIterator", "parameters": "(Iterator<Iterator<T>> itit)", "modifiers": "public", "return": "", "signature": " ACompositeIterator(Iterator<Iterator<T>> itit)", "full_signature": "public  ACompositeIterator(Iterator<Iterator<T>> itit)", "class_method_signature": "ACompositeIterator.ACompositeIterator(Iterator<Iterator<T>> itit)", "testcase": false, "constructor": true}, {"identifier": "ACompositeIterator", "parameters": "(Iterable<Iterator<T>> itit)", "modifiers": "public", "return": "", "signature": " ACompositeIterator(Iterable<Iterator<T>> itit)", "full_signature": "public  ACompositeIterator(Iterable<Iterator<T>> itit)", "class_method_signature": "ACompositeIterator.ACompositeIterator(Iterable<Iterator<T>> itit)", "testcase": false, "constructor": true}, {"identifier": "hasNext", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasNext()", "full_signature": "@Override public boolean hasNext()", "class_method_signature": "ACompositeIterator.hasNext()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T next()", "full_signature": "@Override public T next()", "class_method_signature": "ACompositeIterator.next()", "testcase": false, "constructor": false}, {"identifier": "refreshCurrent", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshCurrent()", "full_signature": "private void refreshCurrent()", "class_method_signature": "ACompositeIterator.refreshCurrent()", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void remove()", "full_signature": "@Override public void remove()", "class_method_signature": "ACompositeIterator.remove()", "testcase": false, "constructor": false}], "file": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACompositeIterator.java"}, "focal_method": {"identifier": "next", "parameters": "()", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public T next() {\n        refreshCurrent ();\n        return curIterator.next();\n    }", "signature": "T next()", "full_signature": "@Override public T next()", "class_method_signature": "ACompositeIterator.next()", "testcase": false, "constructor": false, "invocations": ["refreshCurrent", "next"]}, "repository": {"repo_id": 17586846, "url": "https://github.com/arnohaase/a-foundation", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 30, "size": 2940, "license": "licensed"}}