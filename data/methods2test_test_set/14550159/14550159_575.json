{"test_class": {"identifier": "VariantsHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private VariantsHandler variantsHandler;", "modifier": "private", "type": "VariantsHandler", "declarator": "variantsHandler", "var_name": "variantsHandler"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/VariantsHandlerTest.java"}, "test_case": {"identifier": "selectsVariant", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void selectsVariant() throws Exception {\n        List<Variant> variantList = Variant.mediaTypes(MediaType.valueOf(\"image/jpeg\")).add()\n                                           .mediaTypes(MediaType.valueOf(\"text/xml\")).languages(new Locale(\"en\", \"gb\")).add()\n                                           .mediaTypes(MediaType.valueOf(\"text/xml;charset=utf-8\")).languages(new Locale(\"en\", \"us\")).add()\n                                           .mediaTypes(MediaType.valueOf(\"text/xml;charset=utf-8\")).languages(new Locale(\"en\", \"us\")).encodings(\"gzip\").add()\n                                           .build();\n\n        MultivaluedMap<String, String> headers = new MultivaluedMapImpl();\n        headers.putSingle(ACCEPT, Joiner.on(',').join(\"text/xml\", \"image/png\", \"text/html;q=0.9\", \"text/plain;q=0.8\", \"application/xml\", \"*/*;q=0.5\"));\n        headers.putSingle(ACCEPT_LANGUAGE, \"en-us,en;q=0.5\");\n        headers.putSingle(ACCEPT_CHARSET, \"utf-8,koi8;q=0.7\");\n        headers.putSingle(ACCEPT_ENCODING, \"gzip\");\n\n        ContainerRequest request = new ContainerRequest(\"GET\", null, null, null, headers, null);\n\n        Variant variant = variantsHandler.handleVariants(request, variantList);\n        assertNotNull(variant);\n        assertEquals(new MediaType(\"text\", \"xml\", ImmutableMap.of(\"charset\", \"utf-8\")), variant.getMediaType());\n        assertEquals(new Locale(\"en\", \"us\"), variant.getLanguage());\n        assertEquals(\"gzip\", variant.getEncoding());\n    }", "signature": "void selectsVariant()", "full_signature": "@Test public void selectsVariant()", "class_method_signature": "VariantsHandlerTest.selectsVariant()", "testcase": true, "constructor": false, "invocations": ["build", "add", "encodings", "languages", "mediaTypes", "add", "languages", "mediaTypes", "add", "languages", "mediaTypes", "add", "mediaTypes", "valueOf", "valueOf", "valueOf", "valueOf", "putSingle", "join", "on", "putSingle", "putSingle", "putSingle", "handleVariants", "assertNotNull", "assertEquals", "of", "getMediaType", "assertEquals", "getLanguage", "assertEquals", "getEncoding"]}, "focal_class": {"identifier": "VariantsHandler", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "handleVariants", "parameters": "(ContainerRequest request, List<Variant> variants)", "modifiers": "public", "return": "Variant", "signature": "Variant handleVariants(ContainerRequest request, List<Variant> variants)", "full_signature": "public Variant handleVariants(ContainerRequest request, List<Variant> variants)", "class_method_signature": "VariantsHandler.handleVariants(ContainerRequest request, List<Variant> variants)", "testcase": false, "constructor": false}, {"identifier": "filterByMediaType", "parameters": "(List<AcceptMediaType> acceptMediaTypes, List<Variant> variants)", "modifiers": "private", "return": "List<Variant>", "signature": "List<Variant> filterByMediaType(List<AcceptMediaType> acceptMediaTypes, List<Variant> variants)", "full_signature": "private List<Variant> filterByMediaType(List<AcceptMediaType> acceptMediaTypes, List<Variant> variants)", "class_method_signature": "VariantsHandler.filterByMediaType(List<AcceptMediaType> acceptMediaTypes, List<Variant> variants)", "testcase": false, "constructor": false}, {"identifier": "filterByLanguage", "parameters": "(List<AcceptLanguage> acceptLanguages, List<Variant> variants)", "modifiers": "private", "return": "List<Variant>", "signature": "List<Variant> filterByLanguage(List<AcceptLanguage> acceptLanguages, List<Variant> variants)", "full_signature": "private List<Variant> filterByLanguage(List<AcceptLanguage> acceptLanguages, List<Variant> variants)", "class_method_signature": "VariantsHandler.filterByLanguage(List<AcceptLanguage> acceptLanguages, List<Variant> variants)", "testcase": false, "constructor": false}, {"identifier": "filterByCharset", "parameters": "(List<AcceptToken> acceptCharsets, List<Variant> variants)", "modifiers": "private", "return": "List<Variant>", "signature": "List<Variant> filterByCharset(List<AcceptToken> acceptCharsets, List<Variant> variants)", "full_signature": "private List<Variant> filterByCharset(List<AcceptToken> acceptCharsets, List<Variant> variants)", "class_method_signature": "VariantsHandler.filterByCharset(List<AcceptToken> acceptCharsets, List<Variant> variants)", "testcase": false, "constructor": false}, {"identifier": "getCharset", "parameters": "(MediaType mediaType)", "modifiers": "private", "return": "String", "signature": "String getCharset(MediaType mediaType)", "full_signature": "private String getCharset(MediaType mediaType)", "class_method_signature": "VariantsHandler.getCharset(MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "filterByEncoding", "parameters": "(List<AcceptToken> acceptEncodings, List<Variant> variants)", "modifiers": "private", "return": "List<Variant>", "signature": "List<Variant> filterByEncoding(List<AcceptToken> acceptEncodings, List<Variant> variants)", "full_signature": "private List<Variant> filterByEncoding(List<AcceptToken> acceptEncodings, List<Variant> variants)", "class_method_signature": "VariantsHandler.filterByEncoding(List<AcceptToken> acceptEncodings, List<Variant> variants)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/VariantsHandler.java"}, "focal_method": {"identifier": "handleVariants", "parameters": "(ContainerRequest request, List<Variant> variants)", "modifiers": "public", "return": "Variant", "body": "public Variant handleVariants(ContainerRequest request, List<Variant> variants) {\n        List<AcceptMediaType> acceptMediaTypes = createAcceptMediaTypeList(convertToString(request.getRequestHeader(ACCEPT)));\n        List<AcceptLanguage> acceptLanguages = createAcceptedLanguageList(convertToString(request.getRequestHeader(ACCEPT_LANGUAGE)));\n        List<AcceptToken> acceptCharset = createAcceptedCharsetList(convertToString(request.getRequestHeader(ACCEPT_CHARSET)));\n        List<AcceptToken> acceptEncoding = createAcceptedEncodingList(convertToString(request.getRequestHeader(ACCEPT_ENCODING)));\n\n        List<Variant> filteredVariants = new ArrayList<>(variants);\n\n        filteredVariants = filterByMediaType(acceptMediaTypes, filteredVariants);\n        filteredVariants = filterByLanguage(acceptLanguages, filteredVariants);\n        filteredVariants = filterByCharset(acceptCharset, filteredVariants);\n        filteredVariants = filterByEncoding(acceptEncoding, filteredVariants);\n\n        return filteredVariants.isEmpty() ? null : filteredVariants.get(0);\n    }", "signature": "Variant handleVariants(ContainerRequest request, List<Variant> variants)", "full_signature": "public Variant handleVariants(ContainerRequest request, List<Variant> variants)", "class_method_signature": "VariantsHandler.handleVariants(ContainerRequest request, List<Variant> variants)", "testcase": false, "constructor": false, "invocations": ["createAcceptMediaTypeList", "convertToString", "getRequestHeader", "createAcceptedLanguageList", "convertToString", "getRequestHeader", "createAcceptedCharsetList", "convertToString", "getRequestHeader", "createAcceptedEncodingList", "convertToString", "getRequestHeader", "filterByMediaType", "filterByLanguage", "filterByCharset", "filterByEncoding", "isEmpty", "get"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}