{"test_class": {"identifier": "ProgressCheckAliasFacadeTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/ProgressCheckAliasFacadeTest.java"}, "test_case": {"identifier": "testDeletedPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDeletedPath() throws Exception {\n        final PackageId arg0 = PackageId.fromString(\"my_packages:example:1.0\");\n        final String arg1 = \"/correct/path\";\n        final Session arg2 = mock(Session.class);\n\n        final CompletableFuture<PackageId> slot0 = new CompletableFuture<>();\n        final CompletableFuture<String> slot1 = new CompletableFuture<>();\n        final CompletableFuture<Session> slot2 = new CompletableFuture<>();\n\n        final ProgressCheck delegate = mock(ProgressCheck.class);\n\n        doAnswer(call -> {\n            slot0.complete(call.getArgument(0, PackageId.class));\n            slot1.complete(call.getArgument(1, String.class));\n            slot2.complete(call.getArgument(2, Session.class));\n            return true;\n        }).when(delegate).deletedPath(\n                any(PackageId.class),\n                any(String.class),\n                any(Session.class));\n\n        final ProgressCheckAliasFacade alias = new ProgressCheckAliasFacade(delegate, null);\n        alias.deletedPath(arg0, arg1, arg2);\n\n        assertSame(\"same arg0\", arg0, slot0.getNow(null));\n        assertSame(\"same arg1\", arg1, slot1.getNow(null));\n        assertSame(\"same arg2\", arg2, slot2.getNow(null));\n    }", "signature": "void testDeletedPath()", "full_signature": "@Test public void testDeletedPath()", "class_method_signature": "ProgressCheckAliasFacadeTest.testDeletedPath()", "testcase": true, "constructor": false, "invocations": ["fromString", "mock", "mock", "deletedPath", "when", "doAnswer", "complete", "getArgument", "complete", "getArgument", "complete", "getArgument", "any", "any", "any", "deletedPath", "assertSame", "getNow", "assertSame", "getNow", "assertSame", "getNow"]}, "focal_class": {"identifier": "ProgressCheckAliasFacade", "superclass": "", "interfaces": "implements SilenceableCheck", "fields": [{"original_string": "private final SilenceableCheck wrapped;", "modifier": "private final", "type": "SilenceableCheck", "declarator": "wrapped", "var_name": "wrapped"}, {"original_string": "private final String alias;", "modifier": "private final", "type": "String", "declarator": "alias", "var_name": "alias"}], "methods": [{"identifier": "ProgressCheckAliasFacade", "parameters": "(final @NotNull ProgressCheck wrapped,\n                             final @Nullable String alias)", "modifiers": "", "return": "", "signature": " ProgressCheckAliasFacade(final @NotNull ProgressCheck wrapped,\n                             final @Nullable String alias)", "full_signature": "  ProgressCheckAliasFacade(final @NotNull ProgressCheck wrapped,\n                             final @Nullable String alias)", "class_method_signature": "ProgressCheckAliasFacade.ProgressCheckAliasFacade(final @NotNull ProgressCheck wrapped,\n                             final @Nullable String alias)", "testcase": false, "constructor": true}, {"identifier": "getCheckName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getCheckName()", "full_signature": "@Override public String getCheckName()", "class_method_signature": "ProgressCheckAliasFacade.getCheckName()", "testcase": false, "constructor": false}, {"identifier": "getResourceBundleBaseName", "parameters": "()", "modifiers": "@Override public @Nullable", "return": "String", "signature": "String getResourceBundleBaseName()", "full_signature": "@Override public @Nullable String getResourceBundleBaseName()", "class_method_signature": "ProgressCheckAliasFacade.getResourceBundleBaseName()", "testcase": false, "constructor": false}, {"identifier": "setResourceBundle", "parameters": "(final ResourceBundle resourceBundle)", "modifiers": "@Override public", "return": "void", "signature": "void setResourceBundle(final ResourceBundle resourceBundle)", "full_signature": "@Override public void setResourceBundle(final ResourceBundle resourceBundle)", "class_method_signature": "ProgressCheckAliasFacade.setResourceBundle(final ResourceBundle resourceBundle)", "testcase": false, "constructor": false}, {"identifier": "getReportedViolations", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Violation>", "signature": "Collection<Violation> getReportedViolations()", "full_signature": "@Override public Collection<Violation> getReportedViolations()", "class_method_signature": "ProgressCheckAliasFacade.getReportedViolations()", "testcase": false, "constructor": false}, {"identifier": "startedScan", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void startedScan()", "full_signature": "@Override public void startedScan()", "class_method_signature": "ProgressCheckAliasFacade.startedScan()", "testcase": false, "constructor": false}, {"identifier": "setSilenced", "parameters": "(final boolean silenced)", "modifiers": "@Override public", "return": "void", "signature": "void setSilenced(final boolean silenced)", "full_signature": "@Override public void setSilenced(final boolean silenced)", "class_method_signature": "ProgressCheckAliasFacade.setSilenced(final boolean silenced)", "testcase": false, "constructor": false}, {"identifier": "simulateSling", "parameters": "(final SlingSimulator slingSimulator, final Set<String> runModes)", "modifiers": "@Override public", "return": "void", "signature": "void simulateSling(final SlingSimulator slingSimulator, final Set<String> runModes)", "full_signature": "@Override public void simulateSling(final SlingSimulator slingSimulator, final Set<String> runModes)", "class_method_signature": "ProgressCheckAliasFacade.simulateSling(final SlingSimulator slingSimulator, final Set<String> runModes)", "testcase": false, "constructor": false}, {"identifier": "identifyPackage", "parameters": "(final PackageId packageId, final File file)", "modifiers": "@Override public", "return": "void", "signature": "void identifyPackage(final PackageId packageId, final File file)", "full_signature": "@Override public void identifyPackage(final PackageId packageId, final File file)", "class_method_signature": "ProgressCheckAliasFacade.identifyPackage(final PackageId packageId, final File file)", "testcase": false, "constructor": false}, {"identifier": "readManifest", "parameters": "(final PackageId packageId, final Manifest manifest)", "modifiers": "@Override public", "return": "void", "signature": "void readManifest(final PackageId packageId, final Manifest manifest)", "full_signature": "@Override public void readManifest(final PackageId packageId, final Manifest manifest)", "class_method_signature": "ProgressCheckAliasFacade.readManifest(final PackageId packageId, final Manifest manifest)", "testcase": false, "constructor": false}, {"identifier": "beforeExtract", "parameters": "(final PackageId packageId, final Session inspectSession,\n                              final PackageProperties packageProperties, final MetaInf metaInf,\n                              final List<PackageId> subpackages)", "modifiers": "@Override public", "return": "void", "signature": "void beforeExtract(final PackageId packageId, final Session inspectSession,\n                              final PackageProperties packageProperties, final MetaInf metaInf,\n                              final List<PackageId> subpackages)", "full_signature": "@Override public void beforeExtract(final PackageId packageId, final Session inspectSession,\n                              final PackageProperties packageProperties, final MetaInf metaInf,\n                              final List<PackageId> subpackages)", "class_method_signature": "ProgressCheckAliasFacade.beforeExtract(final PackageId packageId, final Session inspectSession,\n                              final PackageProperties packageProperties, final MetaInf metaInf,\n                              final List<PackageId> subpackages)", "testcase": false, "constructor": false}, {"identifier": "importedPath", "parameters": "(final PackageId packageId, final String path, final Node node,\n                             final PathAction action)", "modifiers": "@Override public", "return": "void", "signature": "void importedPath(final PackageId packageId, final String path, final Node node,\n                             final PathAction action)", "full_signature": "@Override public void importedPath(final PackageId packageId, final String path, final Node node,\n                             final PathAction action)", "class_method_signature": "ProgressCheckAliasFacade.importedPath(final PackageId packageId, final String path, final Node node,\n                             final PathAction action)", "testcase": false, "constructor": false}, {"identifier": "deletedPath", "parameters": "(final PackageId packageId, final String path, final Session inspectSession)", "modifiers": "@Override public", "return": "void", "signature": "void deletedPath(final PackageId packageId, final String path, final Session inspectSession)", "full_signature": "@Override public void deletedPath(final PackageId packageId, final String path, final Session inspectSession)", "class_method_signature": "ProgressCheckAliasFacade.deletedPath(final PackageId packageId, final String path, final Session inspectSession)", "testcase": false, "constructor": false}, {"identifier": "afterExtract", "parameters": "(final PackageId packageId, final Session inspectSession)", "modifiers": "@Override public", "return": "void", "signature": "void afterExtract(final PackageId packageId, final Session inspectSession)", "full_signature": "@Override public void afterExtract(final PackageId packageId, final Session inspectSession)", "class_method_signature": "ProgressCheckAliasFacade.afterExtract(final PackageId packageId, final Session inspectSession)", "testcase": false, "constructor": false}, {"identifier": "identifySubpackage", "parameters": "(final PackageId packageId, final PackageId parentId)", "modifiers": "@Override public", "return": "void", "signature": "void identifySubpackage(final PackageId packageId, final PackageId parentId)", "full_signature": "@Override public void identifySubpackage(final PackageId packageId, final PackageId parentId)", "class_method_signature": "ProgressCheckAliasFacade.identifySubpackage(final PackageId packageId, final PackageId parentId)", "testcase": false, "constructor": false}, {"identifier": "beforeSlingInstall", "parameters": "(final PackageId scanPackageId,\n                                   final SlingInstallable slingInstallable,\n                                   final Session inspectSession)", "modifiers": "@Override public", "return": "void", "signature": "void beforeSlingInstall(final PackageId scanPackageId,\n                                   final SlingInstallable slingInstallable,\n                                   final Session inspectSession)", "full_signature": "@Override public void beforeSlingInstall(final PackageId scanPackageId,\n                                   final SlingInstallable slingInstallable,\n                                   final Session inspectSession)", "class_method_signature": "ProgressCheckAliasFacade.beforeSlingInstall(final PackageId scanPackageId,\n                                   final SlingInstallable slingInstallable,\n                                   final Session inspectSession)", "testcase": false, "constructor": false}, {"identifier": "identifyEmbeddedPackage", "parameters": "(final PackageId packageId,\n                                        final PackageId parentId,\n                                        final EmbeddedPackageInstallable slingInstallable)", "modifiers": "@Override public", "return": "void", "signature": "void identifyEmbeddedPackage(final PackageId packageId,\n                                        final PackageId parentId,\n                                        final EmbeddedPackageInstallable slingInstallable)", "full_signature": "@Override public void identifyEmbeddedPackage(final PackageId packageId,\n                                        final PackageId parentId,\n                                        final EmbeddedPackageInstallable slingInstallable)", "class_method_signature": "ProgressCheckAliasFacade.identifyEmbeddedPackage(final PackageId packageId,\n                                        final PackageId parentId,\n                                        final EmbeddedPackageInstallable slingInstallable)", "testcase": false, "constructor": false}, {"identifier": "appliedRepoInitScripts", "parameters": "(final PackageId scanPackageId,\n                                       final List<String> scripts,\n                                       final SlingInstallable slingInstallable,\n                                       final Session inspectSession)", "modifiers": "@Override public", "return": "void", "signature": "void appliedRepoInitScripts(final PackageId scanPackageId,\n                                       final List<String> scripts,\n                                       final SlingInstallable slingInstallable,\n                                       final Session inspectSession)", "full_signature": "@Override public void appliedRepoInitScripts(final PackageId scanPackageId,\n                                       final List<String> scripts,\n                                       final SlingInstallable slingInstallable,\n                                       final Session inspectSession)", "class_method_signature": "ProgressCheckAliasFacade.appliedRepoInitScripts(final PackageId scanPackageId,\n                                       final List<String> scripts,\n                                       final SlingInstallable slingInstallable,\n                                       final Session inspectSession)", "testcase": false, "constructor": false}, {"identifier": "afterScanPackage", "parameters": "(final PackageId scanPackageId, final Session inspectSession)", "modifiers": "@Override public", "return": "void", "signature": "void afterScanPackage(final PackageId scanPackageId, final Session inspectSession)", "full_signature": "@Override public void afterScanPackage(final PackageId scanPackageId, final Session inspectSession)", "class_method_signature": "ProgressCheckAliasFacade.afterScanPackage(final PackageId scanPackageId, final Session inspectSession)", "testcase": false, "constructor": false}, {"identifier": "finishedScan", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void finishedScan()", "full_signature": "@Override public void finishedScan()", "class_method_signature": "ProgressCheckAliasFacade.finishedScan()", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/ProgressCheckAliasFacade.java"}, "focal_method": {"identifier": "deletedPath", "parameters": "(final PackageId packageId, final String path, final Session inspectSession)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void deletedPath(final PackageId packageId, final String path, final Session inspectSession)\n            throws RepositoryException {\n        wrapped.deletedPath(packageId, path, inspectSession);\n    }", "signature": "void deletedPath(final PackageId packageId, final String path, final Session inspectSession)", "full_signature": "@Override public void deletedPath(final PackageId packageId, final String path, final Session inspectSession)", "class_method_signature": "ProgressCheckAliasFacade.deletedPath(final PackageId packageId, final String path, final Session inspectSession)", "testcase": false, "constructor": false, "invocations": ["deletedPath"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}