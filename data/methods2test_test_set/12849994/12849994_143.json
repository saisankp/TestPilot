{"test_class": {"identifier": "DefaultIndexHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  Query query;", "modifier": "@Mock", "type": "Query", "declarator": "query", "var_name": "query"}, {"original_string": "@Mock\n  AndCriteria andCriteria;", "modifier": "@Mock", "type": "AndCriteria", "declarator": "andCriteria", "var_name": "andCriteria"}, {"original_string": "@Mock\n  OrCriteria orCriteria;", "modifier": "@Mock", "type": "OrCriteria", "declarator": "orCriteria", "var_name": "orCriteria"}, {"original_string": "@Mock\n  DiffCriteria diffCriteria;", "modifier": "@Mock", "type": "DiffCriteria", "declarator": "diffCriteria", "var_name": "diffCriteria"}, {"original_string": "@Mock\n  ArithmeticCriteria arithmeticCriteria;", "modifier": "@Mock", "type": "ArithmeticCriteria", "declarator": "arithmeticCriteria", "var_name": "arithmeticCriteria"}, {"original_string": "@Mock\n  Criteria criteria;", "modifier": "@Mock", "type": "Criteria", "declarator": "criteria", "var_name": "criteria"}, {"original_string": "@Mock\n  Map<String, CacheIndex> indexes;", "modifier": "@Mock", "type": "Map<String, CacheIndex>", "declarator": "indexes", "var_name": "indexes"}, {"original_string": "@Mock\n  CacheIndex cacheIndex;", "modifier": "@Mock", "type": "CacheIndex", "declarator": "cacheIndex", "var_name": "cacheIndex"}, {"original_string": "DefaultIndexHandler<Object, Object> handler;", "modifier": "", "type": "DefaultIndexHandler<Object, Object>", "declarator": "handler", "var_name": "handler"}], "file": "imcache-core/src/test/java/com/cetsoft/imcache/cache/search/DefaultIndexHandlerTest.java"}, "test_case": {"identifier": "executeArithmetic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void executeArithmetic() {\n    String attributeName = \"name\";\n    List<Object> objects = new ArrayList<Object>();\n    doReturn(attributeName).when(arithmeticCriteria).getAttributeName();\n    doReturn(cacheIndex).when(indexes).get(attributeName);\n    doReturn(objects).when(arithmeticCriteria).meets(cacheIndex);\n    List<Object> actualObjects = handler.executeArithmetic(arithmeticCriteria);\n    assertEquals(objects, actualObjects);\n  }", "signature": "void executeArithmetic()", "full_signature": "@Test public void executeArithmetic()", "class_method_signature": "DefaultIndexHandlerTest.executeArithmetic()", "testcase": true, "constructor": false, "invocations": ["getAttributeName", "when", "doReturn", "get", "when", "doReturn", "meets", "when", "doReturn", "executeArithmetic", "assertEquals"]}, "focal_class": {"identifier": "DefaultIndexHandler", "superclass": "", "interfaces": "implements IndexHandler<K, V>", "fields": [{"original_string": "private final Map<String, Field> fields = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, Field>", "declarator": "fields = new ConcurrentHashMap<>()", "var_name": "fields"}, {"original_string": "protected Map<String, CacheIndex> indexes;", "modifier": "protected", "type": "Map<String, CacheIndex>", "declarator": "indexes", "var_name": "indexes"}], "methods": [{"identifier": "DefaultIndexHandler", "parameters": "()", "modifiers": "public", "return": "", "signature": " DefaultIndexHandler()", "full_signature": "public  DefaultIndexHandler()", "class_method_signature": "DefaultIndexHandler.DefaultIndexHandler()", "testcase": false, "constructor": true}, {"identifier": "addIndex", "parameters": "(final String attributeName, final IndexType type)", "modifiers": "public", "return": "void", "signature": "void addIndex(final String attributeName, final IndexType type)", "full_signature": "public void addIndex(final String attributeName, final IndexType type)", "class_method_signature": "DefaultIndexHandler.addIndex(final String attributeName, final IndexType type)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final K key, final V value)", "modifiers": "public", "return": "void", "signature": "void add(final K key, final V value)", "full_signature": "public void add(final K key, final V value)", "class_method_signature": "DefaultIndexHandler.add(final K key, final V value)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(final K key, final V value)", "modifiers": "public", "return": "void", "signature": "void remove(final K key, final V value)", "full_signature": "public void remove(final K key, final V value)", "class_method_signature": "DefaultIndexHandler.remove(final K key, final V value)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "DefaultIndexHandler.clear()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final Query query)", "modifiers": "@SuppressWarnings(\"unchecked\") public", "return": "List<K>", "signature": "List<K> execute(final Query query)", "full_signature": "@SuppressWarnings(\"unchecked\") public List<K> execute(final Query query)", "class_method_signature": "DefaultIndexHandler.execute(final Query query)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final Criteria criteria)", "modifiers": "protected", "return": "List<Object>", "signature": "List<Object> execute(final Criteria criteria)", "full_signature": "protected List<Object> execute(final Criteria criteria)", "class_method_signature": "DefaultIndexHandler.execute(final Criteria criteria)", "testcase": false, "constructor": false}, {"identifier": "executeArithmetic", "parameters": "(final ArithmeticCriteria arithmeticCriteria)", "modifiers": "protected", "return": "List<Object>", "signature": "List<Object> executeArithmetic(final ArithmeticCriteria arithmeticCriteria)", "full_signature": "protected List<Object> executeArithmetic(final ArithmeticCriteria arithmeticCriteria)", "class_method_signature": "DefaultIndexHandler.executeArithmetic(final ArithmeticCriteria arithmeticCriteria)", "testcase": false, "constructor": false}, {"identifier": "executeAnd", "parameters": "(final AndCriteria andCriteria)", "modifiers": "protected", "return": "List<Object>", "signature": "List<Object> executeAnd(final AndCriteria andCriteria)", "full_signature": "protected List<Object> executeAnd(final AndCriteria andCriteria)", "class_method_signature": "DefaultIndexHandler.executeAnd(final AndCriteria andCriteria)", "testcase": false, "constructor": false}, {"identifier": "getObjects", "parameters": "(List<Object> results, List<Object> result)", "modifiers": "private", "return": "List<Object>", "signature": "List<Object> getObjects(List<Object> results, List<Object> result)", "full_signature": "private List<Object> getObjects(List<Object> results, List<Object> result)", "class_method_signature": "DefaultIndexHandler.getObjects(List<Object> results, List<Object> result)", "testcase": false, "constructor": false}, {"identifier": "executeDiff", "parameters": "(final DiffCriteria diffCriteria)", "modifiers": "protected", "return": "List<Object>", "signature": "List<Object> executeDiff(final DiffCriteria diffCriteria)", "full_signature": "protected List<Object> executeDiff(final DiffCriteria diffCriteria)", "class_method_signature": "DefaultIndexHandler.executeDiff(final DiffCriteria diffCriteria)", "testcase": false, "constructor": false}, {"identifier": "executeOr", "parameters": "(final OrCriteria orCriteria)", "modifiers": "protected", "return": "List<Object>", "signature": "List<Object> executeOr(final OrCriteria orCriteria)", "full_signature": "protected List<Object> executeOr(final OrCriteria orCriteria)", "class_method_signature": "DefaultIndexHandler.executeOr(final OrCriteria orCriteria)", "testcase": false, "constructor": false}], "file": "imcache-core/src/main/java/com/cetsoft/imcache/cache/search/DefaultIndexHandler.java"}, "focal_method": {"identifier": "executeArithmetic", "parameters": "(final ArithmeticCriteria arithmeticCriteria)", "modifiers": "protected", "return": "List<Object>", "body": "protected List<Object> executeArithmetic(final ArithmeticCriteria arithmeticCriteria) {\n    final CacheIndex cacheIndex = indexes.get(arithmeticCriteria.getAttributeName());\n    if (cacheIndex == null) {\n      throw new IndexNotFoundException();\n    }\n    return arithmeticCriteria.meets(cacheIndex);\n  }", "signature": "List<Object> executeArithmetic(final ArithmeticCriteria arithmeticCriteria)", "full_signature": "protected List<Object> executeArithmetic(final ArithmeticCriteria arithmeticCriteria)", "class_method_signature": "DefaultIndexHandler.executeArithmetic(final ArithmeticCriteria arithmeticCriteria)", "testcase": false, "constructor": false, "invocations": ["get", "getAttributeName", "meets"]}, "repository": {"repo_id": 12849994, "url": "https://github.com/Cetsoft/imcache", "language": "Java", "is_fork": false, "fork_count": 38, "stargazer_count": 121, "size": 1599, "license": "licensed"}}