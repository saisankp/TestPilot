{"test_class": {"identifier": "XmlExtensionNotificationDataConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "org.jvoicexml.callmanager.mmi/src/test/java/org/jvoicexml/callmanager/mmi/xml/XmlExtensionNotificationDataConverterTest.java"}, "test_case": {"identifier": "testQueueEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testQueueEmpty() throws Exception {\n        final XmlExtensionNotificationDataConverter converter = new XmlExtensionNotificationDataConverter();\n        final QueueEmptyEvent empty = new QueueEmptyEvent(null, null);\n        Element element = (Element) converter\n                .convertSynthesizedOutputEvent(empty);\n        System.out.println(toString(element));\n    }", "signature": "void testQueueEmpty()", "full_signature": "@Test public void testQueueEmpty()", "class_method_signature": "XmlExtensionNotificationDataConverterTest.testQueueEmpty()", "testcase": true, "constructor": false, "invocations": ["convertSynthesizedOutputEvent", "println", "toString"]}, "focal_class": {"identifier": "XmlExtensionNotificationDataConverter", "superclass": "", "interfaces": "implements ExtensionNotificationDataConverter", "fields": [{"original_string": "public static final String JVXML_MMI_NAMESPACE = \"http://www.nowhere.org/jvxmlmmi\";", "modifier": "public static final", "type": "String", "declarator": "JVXML_MMI_NAMESPACE = \"http://www.nowhere.org/jvxmlmmi\"", "var_name": "JVXML_MMI_NAMESPACE"}, {"original_string": "private static final String EMMA_NAMESPACE = \"http://www.w3.org/2003/04/emma\";", "modifier": "private static final", "type": "String", "declarator": "EMMA_NAMESPACE = \"http://www.w3.org/2003/04/emma\"", "var_name": "EMMA_NAMESPACE"}], "methods": [{"identifier": "convertApplicationLastResult", "parameters": "(\n            final List<LastResult> lastresults)", "modifiers": "@Override public", "return": "Object", "signature": "Object convertApplicationLastResult(\n            final List<LastResult> lastresults)", "full_signature": "@Override public Object convertApplicationLastResult(\n            final List<LastResult> lastresults)", "class_method_signature": "XmlExtensionNotificationDataConverter.convertApplicationLastResult(\n            final List<LastResult> lastresults)", "testcase": false, "constructor": false}, {"identifier": "createEmma", "parameters": "(final String id, final String utterance,\n            final String mode, final float confidence,\n            final Object semanticInterpretation)", "modifiers": "private", "return": "Element", "signature": "Element createEmma(final String id, final String utterance,\n            final String mode, final float confidence,\n            final Object semanticInterpretation)", "full_signature": "private Element createEmma(final String id, final String utterance,\n            final String mode, final float confidence,\n            final Object semanticInterpretation)", "class_method_signature": "XmlExtensionNotificationDataConverter.createEmma(final String id, final String utterance,\n            final String mode, final float confidence,\n            final Object semanticInterpretation)", "testcase": false, "constructor": false}, {"identifier": "addSemanticInterpretation", "parameters": "(final Document document,\n            final Element parent, final Object object)", "modifiers": "private", "return": "void", "signature": "void addSemanticInterpretation(final Document document,\n            final Element parent, final Object object)", "full_signature": "private void addSemanticInterpretation(final Document document,\n            final Element parent, final Object object)", "class_method_signature": "XmlExtensionNotificationDataConverter.addSemanticInterpretation(final Document document,\n            final Element parent, final Object object)", "testcase": false, "constructor": false}, {"identifier": "addSemanticInterpretation", "parameters": "(final Document document,\n            final Element parent, final ScriptableObject object)", "modifiers": "private", "return": "void", "signature": "void addSemanticInterpretation(final Document document,\n            final Element parent, final ScriptableObject object)", "full_signature": "private void addSemanticInterpretation(final Document document,\n            final Element parent, final ScriptableObject object)", "class_method_signature": "XmlExtensionNotificationDataConverter.addSemanticInterpretation(final Document document,\n            final Element parent, final ScriptableObject object)", "testcase": false, "constructor": false}, {"identifier": "convertSynthesizedOutputEvent", "parameters": "(SynthesizedOutputEvent output)", "modifiers": "@Override public", "return": "Object", "signature": "Object convertSynthesizedOutputEvent(SynthesizedOutputEvent output)", "full_signature": "@Override public Object convertSynthesizedOutputEvent(SynthesizedOutputEvent output)", "class_method_signature": "XmlExtensionNotificationDataConverter.convertSynthesizedOutputEvent(SynthesizedOutputEvent output)", "testcase": false, "constructor": false}, {"identifier": "getSpeakable", "parameters": "(final SynthesizedOutputEvent output)", "modifiers": "private", "return": "SpeakableText", "signature": "SpeakableText getSpeakable(final SynthesizedOutputEvent output)", "full_signature": "private SpeakableText getSpeakable(final SynthesizedOutputEvent output)", "class_method_signature": "XmlExtensionNotificationDataConverter.getSpeakable(final SynthesizedOutputEvent output)", "testcase": false, "constructor": false}, {"identifier": "toDocument", "parameters": "(final SpeakableText speakable)", "modifiers": "private", "return": "Document", "signature": "Document toDocument(final SpeakableText speakable)", "full_signature": "private Document toDocument(final SpeakableText speakable)", "class_method_signature": "XmlExtensionNotificationDataConverter.toDocument(final SpeakableText speakable)", "testcase": false, "constructor": false}, {"identifier": "convertSpokenInputEvent", "parameters": "(final SpokenInputEvent input)", "modifiers": "@Override public", "return": "Object", "signature": "Object convertSpokenInputEvent(final SpokenInputEvent input)", "full_signature": "@Override public Object convertSpokenInputEvent(final SpokenInputEvent input)", "class_method_signature": "XmlExtensionNotificationDataConverter.convertSpokenInputEvent(final SpokenInputEvent input)", "testcase": false, "constructor": false}, {"identifier": "convertRecognitionEvent", "parameters": "(final DataModel model,\n            final RecognitionEvent event)", "modifiers": "@Override public", "return": "Object", "signature": "Object convertRecognitionEvent(final DataModel model,\n            final RecognitionEvent event)", "full_signature": "@Override public Object convertRecognitionEvent(final DataModel model,\n            final RecognitionEvent event)", "class_method_signature": "XmlExtensionNotificationDataConverter.convertRecognitionEvent(final DataModel model,\n            final RecognitionEvent event)", "testcase": false, "constructor": false}], "file": "org.jvoicexml.callmanager.mmi/src/main/java/org/jvoicexml/callmanager/mmi/xml/XmlExtensionNotificationDataConverter.java"}, "focal_method": {"identifier": "convertSynthesizedOutputEvent", "parameters": "(SynthesizedOutputEvent output)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object convertSynthesizedOutputEvent(SynthesizedOutputEvent output)\n            throws ConversionException {\n\n        final DocumentBuilderFactory factory = DocumentBuilderFactory\n                .newInstance();\n        factory.setNamespaceAware(true);\n        try {\n            final DocumentBuilder builder = factory.newDocumentBuilder();\n            final Document document = builder.newDocument();\n            final Element data = document.createElementNS(JVXML_MMI_NAMESPACE,\n                    \"jvxmlmmi:data\");\n            document.appendChild(data);\n            final SpeakableText speakable = getSpeakable(output);\n            if (speakable != null) {\n                final Document ssml = toDocument(speakable);\n                final Node speak = ssml.getFirstChild();\n                if (speak != null) {\n                    document.adoptNode(speak);\n                    data.appendChild(speak);\n                }\n            }\n            return data;\n        } catch (ParserConfigurationException e) {\n            throw new ConversionException(e.getMessage(), e);\n        } catch (SAXException e) {\n            throw new ConversionException(e.getMessage(), e);\n        } catch (IOException e) {\n            throw new ConversionException(e.getMessage(), e);\n        }\n    }", "signature": "Object convertSynthesizedOutputEvent(SynthesizedOutputEvent output)", "full_signature": "@Override public Object convertSynthesizedOutputEvent(SynthesizedOutputEvent output)", "class_method_signature": "XmlExtensionNotificationDataConverter.convertSynthesizedOutputEvent(SynthesizedOutputEvent output)", "testcase": false, "constructor": false, "invocations": ["newInstance", "setNamespaceAware", "newDocumentBuilder", "newDocument", "createElementNS", "appendChild", "getSpeakable", "toDocument", "getFirstChild", "adoptNode", "appendChild", "getMessage", "getMessage", "getMessage"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}