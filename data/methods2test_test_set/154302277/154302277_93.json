{"test_class": {"identifier": "PushNotificationAlarmMessageProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEVICE_IDENTIFICATION = \"dvc-1\";", "modifier": "private static final", "type": "String", "declarator": "DEVICE_IDENTIFICATION = \"dvc-1\"", "var_name": "DEVICE_IDENTIFICATION"}, {"original_string": "@Mock\n    private PushNotificationAlarmDto pushNotificationAlarm;", "modifier": "@Mock\n    private", "type": "PushNotificationAlarmDto", "declarator": "pushNotificationAlarm", "var_name": "pushNotificationAlarm"}, {"original_string": "@Mock\n    private DeviceRepository deviceRepository;", "modifier": "@Mock\n    private", "type": "DeviceRepository", "declarator": "deviceRepository", "var_name": "deviceRepository"}, {"original_string": "@Mock\n    private EventNotificationMessageService eventNotificationMessageService;", "modifier": "@Mock\n    private", "type": "EventNotificationMessageService", "declarator": "eventNotificationMessageService", "var_name": "eventNotificationMessageService"}, {"original_string": "@Mock\n    private DeviceAuthorizationRepository deviceAuthorizationRepository;", "modifier": "@Mock\n    private", "type": "DeviceAuthorizationRepository", "declarator": "deviceAuthorizationRepository", "var_name": "deviceAuthorizationRepository"}, {"original_string": "@Mock\n    private DeviceAuthorization deviceAuthorization;", "modifier": "@Mock\n    private", "type": "DeviceAuthorization", "declarator": "deviceAuthorization", "var_name": "deviceAuthorization"}, {"original_string": "@Mock\n    private Organisation organisation;", "modifier": "@Mock\n    private", "type": "Organisation", "declarator": "organisation", "var_name": "organisation"}, {"original_string": "@Mock\n    private DomainInfoRepository domainInfoRepository;", "modifier": "@Mock\n    private", "type": "DomainInfoRepository", "declarator": "domainInfoRepository", "var_name": "domainInfoRepository"}, {"original_string": "@Mock\n    private DomainInfo domainInfo;", "modifier": "@Mock\n    private", "type": "DomainInfo", "declarator": "domainInfo", "var_name": "domainInfo"}, {"original_string": "@Mock\n    private DomainRequestService domainRequestService;", "modifier": "@Mock\n    private", "type": "DomainRequestService", "declarator": "domainRequestService", "var_name": "domainRequestService"}, {"original_string": "@InjectMocks\n    private PushNotificationAlarmMessageProcessor pushNotificationAlarmMessageProcessor;", "modifier": "@InjectMocks\n    private", "type": "PushNotificationAlarmMessageProcessor", "declarator": "pushNotificationAlarmMessageProcessor", "var_name": "pushNotificationAlarmMessageProcessor"}, {"original_string": "private ObjectMessage message;", "modifier": "private", "type": "ObjectMessage", "declarator": "message", "var_name": "message"}, {"original_string": "private Device device;", "modifier": "private", "type": "Device", "declarator": "device", "var_name": "device"}], "file": "osgp/platform/osgp-core/src/test/java/org/opensmartgridplatform/core/infra/jms/protocol/inbound/messageprocessors/PushNotificationAlarmMessageProcessorTest.java"}, "test_case": {"identifier": "testUnknownDeviceAuthorization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnknownDeviceAuthorization() {\n        when(this.deviceAuthorizationRepository.findByDeviceAndFunctionGroup(this.device, DeviceFunctionGroup.OWNER))\n                .thenReturn(null);\n        assertThatExceptionOfType(JMSException.class).isThrownBy(() -> {\n            this.pushNotificationAlarmMessageProcessor.processMessage(this.message);\n        });\n    }", "signature": "void testUnknownDeviceAuthorization()", "full_signature": "@Test public void testUnknownDeviceAuthorization()", "class_method_signature": "PushNotificationAlarmMessageProcessorTest.testUnknownDeviceAuthorization()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findByDeviceAndFunctionGroup", "isThrownBy", "assertThatExceptionOfType", "processMessage"]}, "focal_class": {"identifier": "PushNotificationAlarmMessageProcessor", "superclass": "extends AbstractProtocolRequestMessageProcessor", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(PushNotificationAlarmMessageProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PushNotificationAlarmMessageProcessor.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private EventNotificationMessageService eventNotificationMessageService;", "modifier": "@Autowired\n    private", "type": "EventNotificationMessageService", "declarator": "eventNotificationMessageService", "var_name": "eventNotificationMessageService"}, {"original_string": "@Autowired\n    private DomainRequestService domainRequestService;", "modifier": "@Autowired\n    private", "type": "DomainRequestService", "declarator": "domainRequestService", "var_name": "domainRequestService"}, {"original_string": "@Autowired\n    private DomainInfoRepository domainInfoRepository;", "modifier": "@Autowired\n    private", "type": "DomainInfoRepository", "declarator": "domainInfoRepository", "var_name": "domainInfoRepository"}, {"original_string": "@Autowired\n    private DeviceAuthorizationRepository deviceAuthorizationRepository;", "modifier": "@Autowired\n    private", "type": "DeviceAuthorizationRepository", "declarator": "deviceAuthorizationRepository", "var_name": "deviceAuthorizationRepository"}, {"original_string": "@Autowired\n    private DeviceRepository deviceRepository;", "modifier": "@Autowired\n    private", "type": "DeviceRepository", "declarator": "deviceRepository", "var_name": "deviceRepository"}], "methods": [{"identifier": "PushNotificationAlarmMessageProcessor", "parameters": "()", "modifiers": "protected", "return": "", "signature": " PushNotificationAlarmMessageProcessor()", "full_signature": "protected  PushNotificationAlarmMessageProcessor()", "class_method_signature": "PushNotificationAlarmMessageProcessor.PushNotificationAlarmMessageProcessor()", "testcase": false, "constructor": true}, {"identifier": "processMessage", "parameters": "(final ObjectMessage message)", "modifiers": "@Override public", "return": "void", "signature": "void processMessage(final ObjectMessage message)", "full_signature": "@Override public void processMessage(final ObjectMessage message)", "class_method_signature": "PushNotificationAlarmMessageProcessor.processMessage(final ObjectMessage message)", "testcase": false, "constructor": false}, {"identifier": "getDevice", "parameters": "(String deviceIdentification)", "modifiers": "private", "return": "Device", "signature": "Device getDevice(String deviceIdentification)", "full_signature": "private Device getDevice(String deviceIdentification)", "class_method_signature": "PushNotificationAlarmMessageProcessor.getDevice(String deviceIdentification)", "testcase": false, "constructor": false}, {"identifier": "getDomainInfo", "parameters": "()", "modifiers": "private", "return": "Optional<DomainInfo>", "signature": "Optional<DomainInfo> getDomainInfo()", "full_signature": "private Optional<DomainInfo> getDomainInfo()", "class_method_signature": "PushNotificationAlarmMessageProcessor.getDomainInfo()", "testcase": false, "constructor": false}, {"identifier": "storeAlarmAsEvent", "parameters": "(final PushNotificationAlarmDto pushNotificationAlarm)", "modifiers": "private", "return": "void", "signature": "void storeAlarmAsEvent(final PushNotificationAlarmDto pushNotificationAlarm)", "full_signature": "private void storeAlarmAsEvent(final PushNotificationAlarmDto pushNotificationAlarm)", "class_method_signature": "PushNotificationAlarmMessageProcessor.storeAlarmAsEvent(final PushNotificationAlarmDto pushNotificationAlarm)", "testcase": false, "constructor": false}, {"identifier": "getOrganisationIdentificationOfOwner", "parameters": "(final Device device)", "modifiers": "private", "return": "String", "signature": "String getOrganisationIdentificationOfOwner(final Device device)", "full_signature": "private String getOrganisationIdentificationOfOwner(final Device device)", "class_method_signature": "PushNotificationAlarmMessageProcessor.getOrganisationIdentificationOfOwner(final Device device)", "testcase": false, "constructor": false}], "file": "osgp/platform/osgp-core/src/main/java/org/opensmartgridplatform/core/infra/jms/protocol/inbound/messageprocessors/PushNotificationAlarmMessageProcessor.java"}, "focal_method": {"identifier": "processMessage", "parameters": "(final ObjectMessage message)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void processMessage(final ObjectMessage message) throws JMSException {\n\n        final MessageMetadata metadata = MessageMetadata.fromMessage(message);\n\n        LOGGER.info(\"Received message of messageType: {} organisationIdentification: {} deviceIdentification: {}\",\n                messageType, metadata.getOrganisationIdentification(), metadata.getDeviceIdentification());\n\n        final RequestMessage requestMessage = (RequestMessage) message.getObject();\n        final Object dataObject = requestMessage.getRequest();\n\n        try {\n\n            final Device device = getDevice(metadata.getDeviceIdentification());\n\n            final PushNotificationAlarmDto pushNotificationAlarm = (PushNotificationAlarmDto) dataObject;\n\n            this.storeAlarmAsEvent(pushNotificationAlarm);\n\n            final String ownerIdentification = this.getOrganisationIdentificationOfOwner(device);\n\n            LOGGER.info(\"Matching owner {} with device {} handling {} from {}\", ownerIdentification,\n                    metadata.getDeviceIdentification(), messageType, requestMessage.getIpAddress());\n            final RequestMessage requestWithUpdatedOrganization = new RequestMessage(requestMessage.getCorrelationUid(),\n                    ownerIdentification, requestMessage.getDeviceIdentification(), requestMessage.getIpAddress(),\n                    pushNotificationAlarm);\n\n            Optional<DomainInfo> smartMeteringDomain = getDomainInfo();\n\n            if (smartMeteringDomain.isPresent()) {\n                this.domainRequestService.send(requestWithUpdatedOrganization,\n                        DeviceFunction.PUSH_NOTIFICATION_ALARM.name(), smartMeteringDomain.get());\n\n                device.updateConnectionDetailsToSuccess();\n                deviceRepository.save(device);\n            } else {\n                LOGGER.error(\n                        \"No DomainInfo found for SMART_METERING 1.0, unable to send message of message type: {} to \"\n                                + \"domain adapter. RequestMessage for {} dropped.\", messageType, pushNotificationAlarm);\n            }\n\n        } catch (OsgpException e) {\n            String errorMessage = String.format(\"%s occurred, reason: %s\", e.getClass().getName(), e.getMessage());\n            LOGGER.error(errorMessage, e);\n\n            throw new JMSException(errorMessage);\n        }\n    }", "signature": "void processMessage(final ObjectMessage message)", "full_signature": "@Override public void processMessage(final ObjectMessage message)", "class_method_signature": "PushNotificationAlarmMessageProcessor.processMessage(final ObjectMessage message)", "testcase": false, "constructor": false, "invocations": ["fromMessage", "info", "getOrganisationIdentification", "getDeviceIdentification", "getObject", "getRequest", "getDevice", "getDeviceIdentification", "storeAlarmAsEvent", "getOrganisationIdentificationOfOwner", "info", "getDeviceIdentification", "getIpAddress", "getCorrelationUid", "getDeviceIdentification", "getIpAddress", "getDomainInfo", "isPresent", "send", "name", "get", "updateConnectionDetailsToSuccess", "save", "error", "format", "getName", "getClass", "getMessage", "error"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}