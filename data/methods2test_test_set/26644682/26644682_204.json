{"test_class": {"identifier": "PreparationAPITest", "superclass": "extends ApiServiceTestBase", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private Security security;", "modifier": "@Autowired\n    private", "type": "Security", "declarator": "security", "var_name": "security"}, {"original_string": "@Autowired\n    private ContentCache contentCache;", "modifier": "@Autowired\n    private", "type": "ContentCache", "declarator": "contentCache", "var_name": "contentCache"}, {"original_string": "@Autowired\n    private CacheKeyGenerator cacheKeyGenerator;", "modifier": "@Autowired\n    private", "type": "CacheKeyGenerator", "declarator": "cacheKeyGenerator", "var_name": "cacheKeyGenerator"}], "file": "dataprep-api/src/test/java/org/talend/dataprep/api/service/PreparationAPITest.java"}, "test_case": {"identifier": "testMoveStep", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMoveStep() throws Exception {\n        final String datasetId = testClient.createDataset(\"preview/preview_dataset.csv\", \"testPreview\");\n\n        String testPrepId = testClient.createPreparationFromDataset(datasetId, \"testPrep\", home.getId());\n\n        AppendStep appendStep = new AppendStep();\n        final Action actionToBeMoved = buildAction(\"uppercase\",\n                buildParametersMap(\"column_id\", \"0001\", \"column_name\", \"firstname\", \"scope\", \"column\"));\n        appendStep.setActions(Arrays.asList(\n                buildAction(\"uppercase\",\n                        buildParametersMap(\"column_id\", \"0002\", \"column_name\", \"lastname\", \"scope\", \"column\")),\n                actionToBeMoved));\n        appendStepsToPrep(testPrepId, appendStep);\n\n        // Adding steps\n        PreparationDTO testPrepDetails = getPreparationDetails(testPrepId);\n\n        List<String> stepsCreated = testPrepDetails.getSteps();\n\n        String rootStep = stepsCreated.get(0);\n        String secondStep = stepsCreated.get(2);\n\n        // changing steps order\n        changePreparationStepsOrder(testPrepId, rootStep, secondStep);\n\n        PreparationDTO testPrepDetailsAfter = getPreparationDetails(testPrepId);\n\n        final Action initialUpperCaseAction = getActions(testPrepDetails.getSteps().get(2)).get(1);\n        assertEquals(actionToBeMoved, initialUpperCaseAction);\n        final Action movedAction = getActions(testPrepDetailsAfter.getSteps().get(1)).get(0);\n        assertEquals(initialUpperCaseAction, movedAction);\n    }", "signature": "void testMoveStep()", "full_signature": "@Test public void testMoveStep()", "class_method_signature": "PreparationAPITest.testMoveStep()", "testcase": true, "constructor": false, "invocations": ["createDataset", "createPreparationFromDataset", "getId", "buildAction", "buildParametersMap", "setActions", "asList", "buildAction", "buildParametersMap", "appendStepsToPrep", "getPreparationDetails", "getSteps", "get", "get", "changePreparationStepsOrder", "getPreparationDetails", "get", "getActions", "get", "getSteps", "assertEquals", "get", "getActions", "get", "getSteps", "assertEquals"]}, "focal_class": {"identifier": "PreparationAPI", "superclass": "extends APIService", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private DataSetAPI dataSetAPI;", "modifier": "@Autowired\n    private", "type": "DataSetAPI", "declarator": "dataSetAPI", "var_name": "dataSetAPI"}, {"original_string": "@Autowired\n    private DatasetClient datasetClient;", "modifier": "@Autowired\n    private", "type": "DatasetClient", "declarator": "datasetClient", "var_name": "datasetClient"}, {"original_string": "@Autowired\n    private ActionRegistry registry;", "modifier": "@Autowired\n    private", "type": "ActionRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "@Autowired\n    private InjectorUtil injectorUtil;", "modifier": "@Autowired\n    private", "type": "InjectorUtil", "declarator": "injectorUtil", "var_name": "injectorUtil"}], "methods": [{"identifier": "listPreparations", "parameters": "(\n            @ApiParam(name = \"name\",\n                    value = \"Filter preparations by name.\") @RequestParam(required = false) String name,\n            @ApiParam(name = \"folder_path\", value = \"Filter preparations by its folder path.\") @RequestParam(\n                    required = false, name = \"folder_path\") String folderPath,\n            @ApiParam(name = \"path\",\n                    value = \"Filter preparations by full path. Should always return one preparation\") @RequestParam(\n                            required = false, name = \"path\") String path,\n            @ApiParam(value = \"Sort key, defaults to 'modification'.\") @RequestParam(\n                    defaultValue = \"lastModificationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc), defaults to 'desc'.\") @RequestParam(\n                    defaultValue = \"desc\") Order order)", "modifiers": "@RequestMapping(value = \"/api/preparations\", method = RequestMethod.GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get all preparations.\", notes = \"Returns the list of preparations the current user is allowed to see.\") @Timed public", "return": "Stream<PreparationListItemDTO>", "signature": "Stream<PreparationListItemDTO> listPreparations(\n            @ApiParam(name = \"name\",\n                    value = \"Filter preparations by name.\") @RequestParam(required = false) String name,\n            @ApiParam(name = \"folder_path\", value = \"Filter preparations by its folder path.\") @RequestParam(\n                    required = false, name = \"folder_path\") String folderPath,\n            @ApiParam(name = \"path\",\n                    value = \"Filter preparations by full path. Should always return one preparation\") @RequestParam(\n                            required = false, name = \"path\") String path,\n            @ApiParam(value = \"Sort key, defaults to 'modification'.\") @RequestParam(\n                    defaultValue = \"lastModificationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc), defaults to 'desc'.\") @RequestParam(\n                    defaultValue = \"desc\") Order order)", "full_signature": "@RequestMapping(value = \"/api/preparations\", method = RequestMethod.GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get all preparations.\", notes = \"Returns the list of preparations the current user is allowed to see.\") @Timed public Stream<PreparationListItemDTO> listPreparations(\n            @ApiParam(name = \"name\",\n                    value = \"Filter preparations by name.\") @RequestParam(required = false) String name,\n            @ApiParam(name = \"folder_path\", value = \"Filter preparations by its folder path.\") @RequestParam(\n                    required = false, name = \"folder_path\") String folderPath,\n            @ApiParam(name = \"path\",\n                    value = \"Filter preparations by full path. Should always return one preparation\") @RequestParam(\n                            required = false, name = \"path\") String path,\n            @ApiParam(value = \"Sort key, defaults to 'modification'.\") @RequestParam(\n                    defaultValue = \"lastModificationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc), defaults to 'desc'.\") @RequestParam(\n                    defaultValue = \"desc\") Order order)", "class_method_signature": "PreparationAPI.listPreparations(\n            @ApiParam(name = \"name\",\n                    value = \"Filter preparations by name.\") @RequestParam(required = false) String name,\n            @ApiParam(name = \"folder_path\", value = \"Filter preparations by its folder path.\") @RequestParam(\n                    required = false, name = \"folder_path\") String folderPath,\n            @ApiParam(name = \"path\",\n                    value = \"Filter preparations by full path. Should always return one preparation\") @RequestParam(\n                            required = false, name = \"path\") String path,\n            @ApiParam(value = \"Sort key, defaults to 'modification'.\") @RequestParam(\n                    defaultValue = \"lastModificationDate\") Sort sort,\n            @ApiParam(value = \"Order for sort key (desc or asc), defaults to 'desc'.\") @RequestParam(\n                    defaultValue = \"desc\") Order order)", "testcase": false, "constructor": false}, {"identifier": "createPreparation", "parameters": "(\n            @ApiParam(name = \"folder\", value = \"Where to store the preparation.\") @RequestParam(value = \"folder\") String folder,\n            @ApiParam(name = \"body\", value = \"The original preparation. You may set all values, service will override values you can't write to.\") @RequestBody Preparation preparation)", "modifiers": "@RequestMapping(value = \"/api/preparations\", method = POST, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Create a new preparation for preparation content in body.\", notes = \"Returns the created preparation id.\") @Timed public", "return": "String", "signature": "String createPreparation(\n            @ApiParam(name = \"folder\", value = \"Where to store the preparation.\") @RequestParam(value = \"folder\") String folder,\n            @ApiParam(name = \"body\", value = \"The original preparation. You may set all values, service will override values you can't write to.\") @RequestBody Preparation preparation)", "full_signature": "@RequestMapping(value = \"/api/preparations\", method = POST, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Create a new preparation for preparation content in body.\", notes = \"Returns the created preparation id.\") @Timed public String createPreparation(\n            @ApiParam(name = \"folder\", value = \"Where to store the preparation.\") @RequestParam(value = \"folder\") String folder,\n            @ApiParam(name = \"body\", value = \"The original preparation. You may set all values, service will override values you can't write to.\") @RequestBody Preparation preparation)", "class_method_signature": "PreparationAPI.createPreparation(\n            @ApiParam(name = \"folder\", value = \"Where to store the preparation.\") @RequestParam(value = \"folder\") String folder,\n            @ApiParam(name = \"body\", value = \"The original preparation. You may set all values, service will override values you can't write to.\") @RequestBody Preparation preparation)", "testcase": false, "constructor": false}, {"identifier": "updatePreparation", "parameters": "(\n            @ApiParam(name = \"id\", value = \"The id of the preparation to update.\") @PathVariable(\"id\") String id,\n            @ApiParam(name = \"body\",\n                    value = \"The updated preparation. Null values are ignored during update. You may set all values, service will override values you can't write to.\") @RequestBody PreparationDTO preparation)", "modifiers": "@RequestMapping(value = \"/api/preparations/{id}\", method = PUT, consumes = APPLICATION_JSON_VALUE, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Update a preparation with content in body.\", notes = \"Returns the updated preparation id.\") @Timed public", "return": "String", "signature": "String updatePreparation(\n            @ApiParam(name = \"id\", value = \"The id of the preparation to update.\") @PathVariable(\"id\") String id,\n            @ApiParam(name = \"body\",\n                    value = \"The updated preparation. Null values are ignored during update. You may set all values, service will override values you can't write to.\") @RequestBody PreparationDTO preparation)", "full_signature": "@RequestMapping(value = \"/api/preparations/{id}\", method = PUT, consumes = APPLICATION_JSON_VALUE, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Update a preparation with content in body.\", notes = \"Returns the updated preparation id.\") @Timed public String updatePreparation(\n            @ApiParam(name = \"id\", value = \"The id of the preparation to update.\") @PathVariable(\"id\") String id,\n            @ApiParam(name = \"body\",\n                    value = \"The updated preparation. Null values are ignored during update. You may set all values, service will override values you can't write to.\") @RequestBody PreparationDTO preparation)", "class_method_signature": "PreparationAPI.updatePreparation(\n            @ApiParam(name = \"id\", value = \"The id of the preparation to update.\") @PathVariable(\"id\") String id,\n            @ApiParam(name = \"body\",\n                    value = \"The updated preparation. Null values are ignored during update. You may set all values, service will override values you can't write to.\") @RequestBody PreparationDTO preparation)", "testcase": false, "constructor": false}, {"identifier": "deletePreparation", "parameters": "(\n            @ApiParam(name = \"id\", value = \"The id of the preparation to delete.\") @PathVariable(\"id\") String id)", "modifiers": "@RequestMapping(value = \"/api/preparations/{id}\", method = DELETE, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Delete a preparation by id\", notes = \"Delete a preparation content based on provided id. Id should be a UUID returned by the list operation. Not valid or non existing preparation id returns empty content.\") @Timed public", "return": "String", "signature": "String deletePreparation(\n            @ApiParam(name = \"id\", value = \"The id of the preparation to delete.\") @PathVariable(\"id\") String id)", "full_signature": "@RequestMapping(value = \"/api/preparations/{id}\", method = DELETE, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Delete a preparation by id\", notes = \"Delete a preparation content based on provided id. Id should be a UUID returned by the list operation. Not valid or non existing preparation id returns empty content.\") @Timed public String deletePreparation(\n            @ApiParam(name = \"id\", value = \"The id of the preparation to delete.\") @PathVariable(\"id\") String id)", "class_method_signature": "PreparationAPI.deletePreparation(\n            @ApiParam(name = \"id\", value = \"The id of the preparation to delete.\") @PathVariable(\"id\") String id)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(\n            @ApiParam(value = \"Id of the preparation to copy\") @PathVariable(value = \"id\") String id,\n            @ApiParam(value = \"Optional new name of the copied preparation, if not set the copy will get the original name.\") @RequestParam(required = false) String newName,\n            @ApiParam(value = \"The destination path to create the entry.\") @RequestParam(required = false) String destination)", "modifiers": "@RequestMapping(value = \"/api/preparations/{id}/copy\", method = POST, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Copy a preparation\", produces = TEXT_PLAIN_VALUE, notes = \"Copy a preparation based the provided id.\") public", "return": "String", "signature": "String copy(\n            @ApiParam(value = \"Id of the preparation to copy\") @PathVariable(value = \"id\") String id,\n            @ApiParam(value = \"Optional new name of the copied preparation, if not set the copy will get the original name.\") @RequestParam(required = false) String newName,\n            @ApiParam(value = \"The destination path to create the entry.\") @RequestParam(required = false) String destination)", "full_signature": "@RequestMapping(value = \"/api/preparations/{id}/copy\", method = POST, produces = TEXT_PLAIN_VALUE) @ApiOperation(value = \"Copy a preparation\", produces = TEXT_PLAIN_VALUE, notes = \"Copy a preparation based the provided id.\") public String copy(\n            @ApiParam(value = \"Id of the preparation to copy\") @PathVariable(value = \"id\") String id,\n            @ApiParam(value = \"Optional new name of the copied preparation, if not set the copy will get the original name.\") @RequestParam(required = false) String newName,\n            @ApiParam(value = \"The destination path to create the entry.\") @RequestParam(required = false) String destination)", "class_method_signature": "PreparationAPI.copy(\n            @ApiParam(value = \"Id of the preparation to copy\") @PathVariable(value = \"id\") String id,\n            @ApiParam(value = \"Optional new name of the copied preparation, if not set the copy will get the original name.\") @RequestParam(required = false) String newName,\n            @ApiParam(value = \"The destination path to create the entry.\") @RequestParam(required = false) String destination)", "testcase": false, "constructor": false}, {"identifier": "move", "parameters": "(@PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the preparation to move\") String id,\n                     @ApiParam(value = \"The original folder path of the preparation.\") @RequestParam(defaultValue = \"\", required = false) String folder,\n                     @ApiParam(value = \"The new folder path of the preparation.\") @RequestParam() String destination,\n                     @ApiParam(value = \"The new name of the moved dataset.\") @RequestParam(defaultValue = \"\", required = false) String newName)", "modifiers": "@RequestMapping(value = \"/api/preparations/{id}/move\", method = PUT) @ApiOperation(value = \"Move a Preparation\", notes = \"Move a preparation to another folder.\") @Timed public", "return": "void", "signature": "void move(@PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the preparation to move\") String id,\n                     @ApiParam(value = \"The original folder path of the preparation.\") @RequestParam(defaultValue = \"\", required = false) String folder,\n                     @ApiParam(value = \"The new folder path of the preparation.\") @RequestParam() String destination,\n                     @ApiParam(value = \"The new name of the moved dataset.\") @RequestParam(defaultValue = \"\", required = false) String newName)", "full_signature": "@RequestMapping(value = \"/api/preparations/{id}/move\", method = PUT) @ApiOperation(value = \"Move a Preparation\", notes = \"Move a preparation to another folder.\") @Timed public void move(@PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the preparation to move\") String id,\n                     @ApiParam(value = \"The original folder path of the preparation.\") @RequestParam(defaultValue = \"\", required = false) String folder,\n                     @ApiParam(value = \"The new folder path of the preparation.\") @RequestParam() String destination,\n                     @ApiParam(value = \"The new name of the moved dataset.\") @RequestParam(defaultValue = \"\", required = false) String newName)", "class_method_signature": "PreparationAPI.move(@PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Id of the preparation to move\") String id,\n                     @ApiParam(value = \"The original folder path of the preparation.\") @RequestParam(defaultValue = \"\", required = false) String folder,\n                     @ApiParam(value = \"The new folder path of the preparation.\") @RequestParam() String destination,\n                     @ApiParam(value = \"The new name of the moved dataset.\") @RequestParam(defaultValue = \"\", required = false) String newName)", "testcase": false, "constructor": false}, {"identifier": "getPreparation", "parameters": "(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") String preparationId, //\n            @RequestParam(value = \"stepId\", defaultValue = \"head\") @ApiParam(name = \"stepId\",\n                    value = \"optional step id\", defaultValue = \"head\") String stepId)", "modifiers": "@RequestMapping(value = \"/api/preparations/{id}/details\", method = RequestMethod.GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get a preparation by id and details.\", notes = \"Returns the preparation details.\") @Timed public", "return": "PreparationDetailsDTO", "signature": "PreparationDetailsDTO getPreparation(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") String preparationId, //\n            @RequestParam(value = \"stepId\", defaultValue = \"head\") @ApiParam(name = \"stepId\",\n                    value = \"optional step id\", defaultValue = \"head\") String stepId)", "full_signature": "@RequestMapping(value = \"/api/preparations/{id}/details\", method = RequestMethod.GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get a preparation by id and details.\", notes = \"Returns the preparation details.\") @Timed public PreparationDetailsDTO getPreparation(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") String preparationId, //\n            @RequestParam(value = \"stepId\", defaultValue = \"head\") @ApiParam(name = \"stepId\",\n                    value = \"optional step id\", defaultValue = \"head\") String stepId)", "class_method_signature": "PreparationAPI.getPreparation(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") String preparationId, //\n            @RequestParam(value = \"stepId\", defaultValue = \"head\") @ApiParam(name = \"stepId\",\n                    value = \"optional step id\", defaultValue = \"head\") String stepId)", "testcase": false, "constructor": false}, {"identifier": "getPreparationSummary", "parameters": "(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") String preparationId, //\n            @RequestParam(value = \"stepId\", defaultValue = \"head\") @ApiParam(name = \"stepId\",\n                    value = \"optional step id\", defaultValue = \"head\") String stepId)", "modifiers": "@RequestMapping(value = \"/api/preparations/{id}/summary\", method = RequestMethod.GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get a preparation by id and details.\", notes = \"Returns the preparation details.\") @Timed public", "return": "PreparationDTO", "signature": "PreparationDTO getPreparationSummary(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") String preparationId, //\n            @RequestParam(value = \"stepId\", defaultValue = \"head\") @ApiParam(name = \"stepId\",\n                    value = \"optional step id\", defaultValue = \"head\") String stepId)", "full_signature": "@RequestMapping(value = \"/api/preparations/{id}/summary\", method = RequestMethod.GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get a preparation by id and details.\", notes = \"Returns the preparation details.\") @Timed public PreparationDTO getPreparationSummary(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") String preparationId, //\n            @RequestParam(value = \"stepId\", defaultValue = \"head\") @ApiParam(name = \"stepId\",\n                    value = \"optional step id\", defaultValue = \"head\") String stepId)", "class_method_signature": "PreparationAPI.getPreparationSummary(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") String preparationId, //\n            @RequestParam(value = \"stepId\", defaultValue = \"head\") @ApiParam(name = \"stepId\",\n                    value = \"optional step id\", defaultValue = \"head\") String stepId)", "testcase": false, "constructor": false}, {"identifier": "getPreparation", "parameters": "( //\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") String preparationId, //\n            @RequestParam(value = \"version\", defaultValue = \"head\") @ApiParam(name = \"version\",\n                    value = \"Version of the preparation (can be 'origin', 'head' or the version id). Defaults to 'head'.\") String version,\n            @RequestParam(value = \"from\", defaultValue = \"HEAD\") @ApiParam(name = \"from\",\n                    value = \"Where to get the data from\") ExportParameters.SourceType from,\n            @RequestParam(value = \"filter\", required = false) @ApiParam(name = \"filter\",\n                    value = \"A filter apply on the content\") String filter)", "modifiers": "@RequestMapping(value = \"/api/preparations/{id}/content\", method = RequestMethod.GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get preparation content by id and at a given version.\", notes = \"Returns the preparation content at version.\") @Timed public", "return": "ResponseEntity<StreamingResponseBody>", "signature": "ResponseEntity<StreamingResponseBody> getPreparation( //\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") String preparationId, //\n            @RequestParam(value = \"version\", defaultValue = \"head\") @ApiParam(name = \"version\",\n                    value = \"Version of the preparation (can be 'origin', 'head' or the version id). Defaults to 'head'.\") String version,\n            @RequestParam(value = \"from\", defaultValue = \"HEAD\") @ApiParam(name = \"from\",\n                    value = \"Where to get the data from\") ExportParameters.SourceType from,\n            @RequestParam(value = \"filter\", required = false) @ApiParam(name = \"filter\",\n                    value = \"A filter apply on the content\") String filter)", "full_signature": "@RequestMapping(value = \"/api/preparations/{id}/content\", method = RequestMethod.GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get preparation content by id and at a given version.\", notes = \"Returns the preparation content at version.\") @Timed public ResponseEntity<StreamingResponseBody> getPreparation( //\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") String preparationId, //\n            @RequestParam(value = \"version\", defaultValue = \"head\") @ApiParam(name = \"version\",\n                    value = \"Version of the preparation (can be 'origin', 'head' or the version id). Defaults to 'head'.\") String version,\n            @RequestParam(value = \"from\", defaultValue = \"HEAD\") @ApiParam(name = \"from\",\n                    value = \"Where to get the data from\") ExportParameters.SourceType from,\n            @RequestParam(value = \"filter\", required = false) @ApiParam(name = \"filter\",\n                    value = \"A filter apply on the content\") String filter)", "class_method_signature": "PreparationAPI.getPreparation( //\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") String preparationId, //\n            @RequestParam(value = \"version\", defaultValue = \"head\") @ApiParam(name = \"version\",\n                    value = \"Version of the preparation (can be 'origin', 'head' or the version id). Defaults to 'head'.\") String version,\n            @RequestParam(value = \"from\", defaultValue = \"HEAD\") @ApiParam(name = \"from\",\n                    value = \"Where to get the data from\") ExportParameters.SourceType from,\n            @RequestParam(value = \"filter\", required = false) @ApiParam(name = \"filter\",\n                    value = \"A filter apply on the content\") String filter)", "testcase": false, "constructor": false}, {"identifier": "getPreparationMetadata", "parameters": "( //\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") String preparationId, //\n            @RequestParam(value = \"version\", defaultValue = \"head\") @ApiParam(name = \"version\",\n                    value = \"Version of the preparation (can be 'origin', 'head' or the version id). Defaults to 'head'.\") String version)", "modifiers": "@RequestMapping(value = \"/api/preparations/{id}/metadata\", method = RequestMethod.GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get preparation metadata by id and at a given version.\", notes = \"Returns the preparation metadata at version.\") @Timed public", "return": "ResponseEntity<DataSetMetadata>", "signature": "ResponseEntity<DataSetMetadata> getPreparationMetadata( //\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") String preparationId, //\n            @RequestParam(value = \"version\", defaultValue = \"head\") @ApiParam(name = \"version\",\n                    value = \"Version of the preparation (can be 'origin', 'head' or the version id). Defaults to 'head'.\") String version)", "full_signature": "@RequestMapping(value = \"/api/preparations/{id}/metadata\", method = RequestMethod.GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get preparation metadata by id and at a given version.\", notes = \"Returns the preparation metadata at version.\") @Timed public ResponseEntity<DataSetMetadata> getPreparationMetadata( //\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") String preparationId, //\n            @RequestParam(value = \"version\", defaultValue = \"head\") @ApiParam(name = \"version\",\n                    value = \"Version of the preparation (can be 'origin', 'head' or the version id). Defaults to 'head'.\") String version)", "class_method_signature": "PreparationAPI.getPreparationMetadata( //\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") String preparationId, //\n            @RequestParam(value = \"version\", defaultValue = \"head\") @ApiParam(name = \"version\",\n                    value = \"Version of the preparation (can be 'origin', 'head' or the version id). Defaults to 'head'.\") String version)", "testcase": false, "constructor": false}, {"identifier": "addPreparationAction", "parameters": "(\n            @ApiParam(name = \"id\", value = \"Preparation id.\") @PathVariable(value = \"id\") final String preparationId,\n            @ApiParam(\"Action to add at end of the preparation.\") @RequestBody final AppendStep actionsContainer)", "modifiers": "@RequestMapping(value = \"/api/preparations/{id}/actions\", method = POST, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Adds an action at the end of preparation.\", notes = \"Does not return any value, client may expect successful operation based on HTTP status code.\") @Timed public", "return": "void", "signature": "void addPreparationAction(\n            @ApiParam(name = \"id\", value = \"Preparation id.\") @PathVariable(value = \"id\") final String preparationId,\n            @ApiParam(\"Action to add at end of the preparation.\") @RequestBody final AppendStep actionsContainer)", "full_signature": "@RequestMapping(value = \"/api/preparations/{id}/actions\", method = POST, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Adds an action at the end of preparation.\", notes = \"Does not return any value, client may expect successful operation based on HTTP status code.\") @Timed public void addPreparationAction(\n            @ApiParam(name = \"id\", value = \"Preparation id.\") @PathVariable(value = \"id\") final String preparationId,\n            @ApiParam(\"Action to add at end of the preparation.\") @RequestBody final AppendStep actionsContainer)", "class_method_signature": "PreparationAPI.addPreparationAction(\n            @ApiParam(name = \"id\", value = \"Preparation id.\") @PathVariable(value = \"id\") final String preparationId,\n            @ApiParam(\"Action to add at end of the preparation.\") @RequestBody final AppendStep actionsContainer)", "testcase": false, "constructor": false}, {"identifier": "updatePreparationAction", "parameters": "(@ApiParam(name = \"preparationId\", value = \"Preparation id.\") @PathVariable(value = \"preparationId\") final String preparationId,\n                                        @ApiParam(name = \"stepId\", value = \"Step id in the preparation.\") @PathVariable(value = \"stepId\") final String stepId,\n                                        @ApiParam(\"New content for the action.\") @RequestBody final AppendStep step)", "modifiers": "@RequestMapping(value = \"/api/preparations/{preparationId}/actions/{stepId}\", method = PUT, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Updates an action in the preparation.\", notes = \"Does not return any value, client may expect successful operation based on HTTP status code.\") @Timed public", "return": "void", "signature": "void updatePreparationAction(@ApiParam(name = \"preparationId\", value = \"Preparation id.\") @PathVariable(value = \"preparationId\") final String preparationId,\n                                        @ApiParam(name = \"stepId\", value = \"Step id in the preparation.\") @PathVariable(value = \"stepId\") final String stepId,\n                                        @ApiParam(\"New content for the action.\") @RequestBody final AppendStep step)", "full_signature": "@RequestMapping(value = \"/api/preparations/{preparationId}/actions/{stepId}\", method = PUT, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Updates an action in the preparation.\", notes = \"Does not return any value, client may expect successful operation based on HTTP status code.\") @Timed public void updatePreparationAction(@ApiParam(name = \"preparationId\", value = \"Preparation id.\") @PathVariable(value = \"preparationId\") final String preparationId,\n                                        @ApiParam(name = \"stepId\", value = \"Step id in the preparation.\") @PathVariable(value = \"stepId\") final String stepId,\n                                        @ApiParam(\"New content for the action.\") @RequestBody final AppendStep step)", "class_method_signature": "PreparationAPI.updatePreparationAction(@ApiParam(name = \"preparationId\", value = \"Preparation id.\") @PathVariable(value = \"preparationId\") final String preparationId,\n                                        @ApiParam(name = \"stepId\", value = \"Step id in the preparation.\") @PathVariable(value = \"stepId\") final String stepId,\n                                        @ApiParam(\"New content for the action.\") @RequestBody final AppendStep step)", "testcase": false, "constructor": false}, {"identifier": "deletePreparationAction", "parameters": "(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") final String preparationId,\n            @PathVariable(value = \"stepId\") @ApiParam(name = \"stepId\",\n                    value = \"Step id to delete.\") final String stepId)", "modifiers": "@RequestMapping(value = \"/api/preparations/{id}/actions/{stepId}\", method = DELETE, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Delete an action in the preparation.\", notes = \"Does not return any value, client may expect successful operation based on HTTP status code.\") @Timed public", "return": "void", "signature": "void deletePreparationAction(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") final String preparationId,\n            @PathVariable(value = \"stepId\") @ApiParam(name = \"stepId\",\n                    value = \"Step id to delete.\") final String stepId)", "full_signature": "@RequestMapping(value = \"/api/preparations/{id}/actions/{stepId}\", method = DELETE, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Delete an action in the preparation.\", notes = \"Does not return any value, client may expect successful operation based on HTTP status code.\") @Timed public void deletePreparationAction(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") final String preparationId,\n            @PathVariable(value = \"stepId\") @ApiParam(name = \"stepId\",\n                    value = \"Step id to delete.\") final String stepId)", "class_method_signature": "PreparationAPI.deletePreparationAction(\n            @PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") final String preparationId,\n            @PathVariable(value = \"stepId\") @ApiParam(name = \"stepId\",\n                    value = \"Step id to delete.\") final String stepId)", "testcase": false, "constructor": false}, {"identifier": "setPreparationHead", "parameters": "(@PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") final String preparationId,\n                                   @PathVariable(value = \"headId\") @ApiParam(name = \"headId\", value = \"New head step id\") final String headId)", "modifiers": "@RequestMapping(value = \"/api/preparations/{id}/head/{headId}\", method = PUT) @ApiOperation(value = \"Changes the head of the preparation.\", notes = \"Does not return any value, client may expect successful operation based on HTTP status code.\") @Timed public", "return": "void", "signature": "void setPreparationHead(@PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") final String preparationId,\n                                   @PathVariable(value = \"headId\") @ApiParam(name = \"headId\", value = \"New head step id\") final String headId)", "full_signature": "@RequestMapping(value = \"/api/preparations/{id}/head/{headId}\", method = PUT) @ApiOperation(value = \"Changes the head of the preparation.\", notes = \"Does not return any value, client may expect successful operation based on HTTP status code.\") @Timed public void setPreparationHead(@PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") final String preparationId,\n                                   @PathVariable(value = \"headId\") @ApiParam(name = \"headId\", value = \"New head step id\") final String headId)", "class_method_signature": "PreparationAPI.setPreparationHead(@PathVariable(value = \"id\") @ApiParam(name = \"id\", value = \"Preparation id.\") final String preparationId,\n                                   @PathVariable(value = \"headId\") @ApiParam(name = \"headId\", value = \"New head step id\") final String headId)", "testcase": false, "constructor": false}, {"identifier": "lockPreparation", "parameters": "(@PathVariable(value = \"preparationId\") @ApiParam(name = \"preparationId\",\n            value = \"Preparation id.\") final String preparationId)", "modifiers": "@RequestMapping(value = \"/api/preparations/{preparationId}/lock\", method = PUT, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Mark a preparation as locked by a user.\", notes = \"Does not return any value, client may expect successful operation based on HTTP status code.\") @Timed public", "return": "void", "signature": "void lockPreparation(@PathVariable(value = \"preparationId\") @ApiParam(name = \"preparationId\",\n            value = \"Preparation id.\") final String preparationId)", "full_signature": "@RequestMapping(value = \"/api/preparations/{preparationId}/lock\", method = PUT, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Mark a preparation as locked by a user.\", notes = \"Does not return any value, client may expect successful operation based on HTTP status code.\") @Timed public void lockPreparation(@PathVariable(value = \"preparationId\") @ApiParam(name = \"preparationId\",\n            value = \"Preparation id.\") final String preparationId)", "class_method_signature": "PreparationAPI.lockPreparation(@PathVariable(value = \"preparationId\") @ApiParam(name = \"preparationId\",\n            value = \"Preparation id.\") final String preparationId)", "testcase": false, "constructor": false}, {"identifier": "unlockPreparation", "parameters": "(@PathVariable(value = \"preparationId\") @ApiParam(name = \"preparationId\",\n            value = \"Preparation id.\") final String preparationId)", "modifiers": "@RequestMapping(value = \"/api/preparations/{preparationId}/unlock\", method = PUT, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Mark a preparation as unlocked by a user.\", notes = \"Does not return any value, client may expect successful operation based on HTTP status code.\") @Timed public", "return": "void", "signature": "void unlockPreparation(@PathVariable(value = \"preparationId\") @ApiParam(name = \"preparationId\",\n            value = \"Preparation id.\") final String preparationId)", "full_signature": "@RequestMapping(value = \"/api/preparations/{preparationId}/unlock\", method = PUT, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Mark a preparation as unlocked by a user.\", notes = \"Does not return any value, client may expect successful operation based on HTTP status code.\") @Timed public void unlockPreparation(@PathVariable(value = \"preparationId\") @ApiParam(name = \"preparationId\",\n            value = \"Preparation id.\") final String preparationId)", "class_method_signature": "PreparationAPI.unlockPreparation(@PathVariable(value = \"preparationId\") @ApiParam(name = \"preparationId\",\n            value = \"Preparation id.\") final String preparationId)", "testcase": false, "constructor": false}, {"identifier": "copyStepsFrom", "parameters": "(@ApiParam(value=\"the preparation id to update\") @PathVariable(\"id\")String id,\n                              @ApiParam(value = \"the preparation to copy the steps from.\") @RequestParam String from)", "modifiers": "@RequestMapping(value = \"/api/preparations/{id}/steps/copy\", method = PUT) @ApiOperation(value = \"Copy the steps from another preparation\", notes = \"Copy the steps from another preparation if this one has no steps.\") @Timed public", "return": "void", "signature": "void copyStepsFrom(@ApiParam(value=\"the preparation id to update\") @PathVariable(\"id\")String id,\n                              @ApiParam(value = \"the preparation to copy the steps from.\") @RequestParam String from)", "full_signature": "@RequestMapping(value = \"/api/preparations/{id}/steps/copy\", method = PUT) @ApiOperation(value = \"Copy the steps from another preparation\", notes = \"Copy the steps from another preparation if this one has no steps.\") @Timed public void copyStepsFrom(@ApiParam(value=\"the preparation id to update\") @PathVariable(\"id\")String id,\n                              @ApiParam(value = \"the preparation to copy the steps from.\") @RequestParam String from)", "class_method_signature": "PreparationAPI.copyStepsFrom(@ApiParam(value=\"the preparation id to update\") @PathVariable(\"id\")String id,\n                              @ApiParam(value = \"the preparation to copy the steps from.\") @RequestParam String from)", "testcase": false, "constructor": false}, {"identifier": "moveStep", "parameters": "(@PathVariable(\"preparationId\") final String preparationId,\n            @ApiParam(value = \"The current index of the action we want to move.\") @PathVariable(\"stepId\") String stepId,\n            @ApiParam(value = \"The current index of the action we want to move.\") @RequestParam String parentStepId)", "modifiers": "@RequestMapping(value = \"/api/preparations/{preparationId}/steps/{stepId}/order\", method = POST, consumes = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Moves a step within a preparation just after the specified <i>parentStepId</i>\", notes = \"Moves a step within a preparation.\") @Timed public", "return": "void", "signature": "void moveStep(@PathVariable(\"preparationId\") final String preparationId,\n            @ApiParam(value = \"The current index of the action we want to move.\") @PathVariable(\"stepId\") String stepId,\n            @ApiParam(value = \"The current index of the action we want to move.\") @RequestParam String parentStepId)", "full_signature": "@RequestMapping(value = \"/api/preparations/{preparationId}/steps/{stepId}/order\", method = POST, consumes = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Moves a step within a preparation just after the specified <i>parentStepId</i>\", notes = \"Moves a step within a preparation.\") @Timed public void moveStep(@PathVariable(\"preparationId\") final String preparationId,\n            @ApiParam(value = \"The current index of the action we want to move.\") @PathVariable(\"stepId\") String stepId,\n            @ApiParam(value = \"The current index of the action we want to move.\") @RequestParam String parentStepId)", "class_method_signature": "PreparationAPI.moveStep(@PathVariable(\"preparationId\") final String preparationId,\n            @ApiParam(value = \"The current index of the action we want to move.\") @PathVariable(\"stepId\") String stepId,\n            @ApiParam(value = \"The current index of the action we want to move.\") @RequestParam String parentStepId)", "testcase": false, "constructor": false}, {"identifier": "previewDiff", "parameters": "(@RequestBody final PreviewDiffParameters input)", "modifiers": "@RequestMapping(value = \"/api/preparations/preview/diff\", method = POST, consumes = APPLICATION_JSON_VALUE, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get a preview diff between 2 steps of the same preparation.\") @Timed public", "return": "StreamingResponseBody", "signature": "StreamingResponseBody previewDiff(@RequestBody final PreviewDiffParameters input)", "full_signature": "@RequestMapping(value = \"/api/preparations/preview/diff\", method = POST, consumes = APPLICATION_JSON_VALUE, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get a preview diff between 2 steps of the same preparation.\") @Timed public StreamingResponseBody previewDiff(@RequestBody final PreviewDiffParameters input)", "class_method_signature": "PreparationAPI.previewDiff(@RequestBody final PreviewDiffParameters input)", "testcase": false, "constructor": false}, {"identifier": "previewUpdate", "parameters": "(@RequestBody final PreviewUpdateParameters input)", "modifiers": "@RequestMapping(value = \"/api/preparations/preview/update\", method = POST, consumes = APPLICATION_JSON_VALUE, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get a preview diff between the same step of the same preparation but with one step update.\") public", "return": "StreamingResponseBody", "signature": "StreamingResponseBody previewUpdate(@RequestBody final PreviewUpdateParameters input)", "full_signature": "@RequestMapping(value = \"/api/preparations/preview/update\", method = POST, consumes = APPLICATION_JSON_VALUE, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get a preview diff between the same step of the same preparation but with one step update.\") public StreamingResponseBody previewUpdate(@RequestBody final PreviewUpdateParameters input)", "class_method_signature": "PreparationAPI.previewUpdate(@RequestBody final PreviewUpdateParameters input)", "testcase": false, "constructor": false}, {"identifier": "previewAdd", "parameters": "(@RequestBody @Valid final PreviewAddParameters input)", "modifiers": "@RequestMapping(value = \"/api/preparations/preview/add\", method = POST, consumes = APPLICATION_JSON_VALUE, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get a preview between the head step and a new appended transformation\") public", "return": "StreamingResponseBody", "signature": "StreamingResponseBody previewAdd(@RequestBody @Valid final PreviewAddParameters input)", "full_signature": "@RequestMapping(value = \"/api/preparations/preview/add\", method = POST, consumes = APPLICATION_JSON_VALUE, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Get a preview between the head step and a new appended transformation\") public StreamingResponseBody previewAdd(@RequestBody @Valid final PreviewAddParameters input)", "class_method_signature": "PreparationAPI.previewAdd(@RequestBody @Valid final PreviewAddParameters input)", "testcase": false, "constructor": false}, {"identifier": "executePreviewCommand", "parameters": "(HystrixCommand<InputStream> transformation)", "modifiers": "private", "return": "StreamingResponseBody", "signature": "StreamingResponseBody executePreviewCommand(HystrixCommand<InputStream> transformation)", "full_signature": "private StreamingResponseBody executePreviewCommand(HystrixCommand<InputStream> transformation)", "class_method_signature": "PreparationAPI.executePreviewCommand(HystrixCommand<InputStream> transformation)", "testcase": false, "constructor": false}, {"identifier": "getPreparationColumnSemanticCategories", "parameters": "(\n            @ApiParam(value = \"The preparation id\") @PathVariable String preparationId,\n            @ApiParam(value = \"The column id\") @PathVariable String columnId,\n            @ApiParam(value = \"The preparation version\") @RequestParam(defaultValue = \"head\") String stepId)", "modifiers": "@RequestMapping(value = \"/api/preparations/{preparationId}/columns/{columnId}/types\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"list the types of the wanted column\", notes = \"This list can be used by user to change the column type.\") @Timed @PublicAPI public", "return": "ResponseEntity<StreamingResponseBody>", "signature": "ResponseEntity<StreamingResponseBody> getPreparationColumnSemanticCategories(\n            @ApiParam(value = \"The preparation id\") @PathVariable String preparationId,\n            @ApiParam(value = \"The column id\") @PathVariable String columnId,\n            @ApiParam(value = \"The preparation version\") @RequestParam(defaultValue = \"head\") String stepId)", "full_signature": "@RequestMapping(value = \"/api/preparations/{preparationId}/columns/{columnId}/types\", method = GET, produces = APPLICATION_JSON_VALUE) @ApiOperation(value = \"list the types of the wanted column\", notes = \"This list can be used by user to change the column type.\") @Timed @PublicAPI public ResponseEntity<StreamingResponseBody> getPreparationColumnSemanticCategories(\n            @ApiParam(value = \"The preparation id\") @PathVariable String preparationId,\n            @ApiParam(value = \"The column id\") @PathVariable String columnId,\n            @ApiParam(value = \"The preparation version\") @RequestParam(defaultValue = \"head\") String stepId)", "class_method_signature": "PreparationAPI.getPreparationColumnSemanticCategories(\n            @ApiParam(value = \"The preparation id\") @PathVariable String preparationId,\n            @ApiParam(value = \"The column id\") @PathVariable String columnId,\n            @ApiParam(value = \"The preparation version\") @RequestParam(defaultValue = \"head\") String stepId)", "testcase": false, "constructor": false}, {"identifier": "internalGetActions", "parameters": "(String preparationId)", "modifiers": "private", "return": "List<Action>", "signature": "List<Action> internalGetActions(String preparationId)", "full_signature": "private List<Action> internalGetActions(String preparationId)", "class_method_signature": "PreparationAPI.internalGetActions(String preparationId)", "testcase": false, "constructor": false}, {"identifier": "internalGetActions", "parameters": "(String preparationId, String stepId)", "modifiers": "private", "return": "List<Action>", "signature": "List<Action> internalGetActions(String preparationId, String stepId)", "full_signature": "private List<Action> internalGetActions(String preparationId, String stepId)", "class_method_signature": "PreparationAPI.internalGetActions(String preparationId, String stepId)", "testcase": false, "constructor": false}, {"identifier": "internalGetPreparation", "parameters": "(String preparationId)", "modifiers": "private", "return": "PreparationDTO", "signature": "PreparationDTO internalGetPreparation(String preparationId)", "full_signature": "private PreparationDTO internalGetPreparation(String preparationId)", "class_method_signature": "PreparationAPI.internalGetPreparation(String preparationId)", "testcase": false, "constructor": false}, {"identifier": "isHeadStepDependingOnDeletedDataSet", "parameters": "(String preparationId, String stepId)", "modifiers": "private", "return": "boolean", "signature": "boolean isHeadStepDependingOnDeletedDataSet(String preparationId, String stepId)", "full_signature": "private boolean isHeadStepDependingOnDeletedDataSet(String preparationId, String stepId)", "class_method_signature": "PreparationAPI.isHeadStepDependingOnDeletedDataSet(String preparationId, String stepId)", "testcase": false, "constructor": false}], "file": "dataprep-api/src/main/java/org/talend/dataprep/api/service/PreparationAPI.java"}, "focal_method": {"identifier": "moveStep", "parameters": "(@PathVariable(\"preparationId\") final String preparationId,\n            @ApiParam(value = \"The current index of the action we want to move.\") @PathVariable(\"stepId\") String stepId,\n            @ApiParam(value = \"The current index of the action we want to move.\") @RequestParam String parentStepId)", "modifiers": "@RequestMapping(value = \"/api/preparations/{preparationId}/steps/{stepId}/order\", method = POST, consumes = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Moves a step within a preparation just after the specified <i>parentStepId</i>\", notes = \"Moves a step within a preparation.\") @Timed public", "return": "void", "body": "@RequestMapping(value = \"/api/preparations/{preparationId}/steps/{stepId}/order\", method = POST,\n            consumes = APPLICATION_JSON_VALUE)\n    @ApiOperation(value = \"Moves a step within a preparation just after the specified <i>parentStepId</i>\",\n            notes = \"Moves a step within a preparation.\")\n    @Timed\n    public void moveStep(@PathVariable(\"preparationId\") final String preparationId,\n            @ApiParam(value = \"The current index of the action we want to move.\") @PathVariable(\"stepId\") String stepId,\n            @ApiParam(value = \"The current index of the action we want to move.\") @RequestParam String parentStepId) {\n        //@formatter:on\n\n        LOG.info(\"Moving step {} after step {}, within preparation {}\", stepId, parentStepId, preparationId);\n\n        final HystrixCommand<String> command =\n                getCommand(PreparationReorderStep.class, preparationId, stepId, parentStepId);\n        command.execute();\n\n        LOG.debug(\"Step {} moved after step {}, within preparation {}\", stepId, parentStepId, preparationId);\n\n    }", "signature": "void moveStep(@PathVariable(\"preparationId\") final String preparationId,\n            @ApiParam(value = \"The current index of the action we want to move.\") @PathVariable(\"stepId\") String stepId,\n            @ApiParam(value = \"The current index of the action we want to move.\") @RequestParam String parentStepId)", "full_signature": "@RequestMapping(value = \"/api/preparations/{preparationId}/steps/{stepId}/order\", method = POST, consumes = APPLICATION_JSON_VALUE) @ApiOperation(value = \"Moves a step within a preparation just after the specified <i>parentStepId</i>\", notes = \"Moves a step within a preparation.\") @Timed public void moveStep(@PathVariable(\"preparationId\") final String preparationId,\n            @ApiParam(value = \"The current index of the action we want to move.\") @PathVariable(\"stepId\") String stepId,\n            @ApiParam(value = \"The current index of the action we want to move.\") @RequestParam String parentStepId)", "class_method_signature": "PreparationAPI.moveStep(@PathVariable(\"preparationId\") final String preparationId,\n            @ApiParam(value = \"The current index of the action we want to move.\") @PathVariable(\"stepId\") String stepId,\n            @ApiParam(value = \"The current index of the action we want to move.\") @RequestParam String parentStepId)", "testcase": false, "constructor": false, "invocations": ["info", "getCommand", "execute", "debug"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}