{"test_class": {"identifier": "SenderIntermediateCertFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String GOOGLE_SIGNING_EC_V2_PRIVATE_KEY_PKCS8_BASE64 =\n      \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgKvEdSS8f0mjTCNKev\"\n          + \"aKXIzfNC5b4A104gJWI9TsLIMqhRANCAAT/X7ccFVJt2/6Ps1oCt2AzKhIAz\"\n          + \"jfJHJ3Op2DVPGh1LMD3oOPgxzUSIqujHG6dq9Ui93Eacl4VWJPMW/MVHHIL\";", "modifier": "private static final", "type": "String", "declarator": "GOOGLE_SIGNING_EC_V2_PRIVATE_KEY_PKCS8_BASE64 =\n      \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgKvEdSS8f0mjTCNKev\"\n          + \"aKXIzfNC5b4A104gJWI9TsLIMqhRANCAAT/X7ccFVJt2/6Ps1oCt2AzKhIAz\"\n          + \"jfJHJ3Op2DVPGh1LMD3oOPgxzUSIqujHG6dq9Ui93Eacl4VWJPMW/MVHHIL\"", "var_name": "GOOGLE_SIGNING_EC_V2_PRIVATE_KEY_PKCS8_BASE64"}, {"original_string": "private static final String GOOGLE_SIGNING_EC_V2_INTERMEDIATE_PUBLIC_KEY_X509_BASE64 =\n      \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE/1+3HBVSbdv+j7NaArdgMyoSAM43yR\"\n          + \"ydzqdg1TxodSzA96Dj4Mc1EiKroxxunavVIvdxGnJeFViTzFvzFRxyCw==\";", "modifier": "private static final", "type": "String", "declarator": "GOOGLE_SIGNING_EC_V2_INTERMEDIATE_PUBLIC_KEY_X509_BASE64 =\n      \"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE/1+3HBVSbdv+j7NaArdgMyoSAM43yR\"\n          + \"ydzqdg1TxodSzA96Dj4Mc1EiKroxxunavVIvdxGnJeFViTzFvzFRxyCw==\"", "var_name": "GOOGLE_SIGNING_EC_V2_INTERMEDIATE_PUBLIC_KEY_X509_BASE64"}], "file": "apps/paymentmethodtoken/src/test/java/com/google/crypto/tink/apps/paymentmethodtoken/SenderIntermediateCertFactoryTest.java"}, "test_case": {"identifier": "shouldProduceSenderIntermediateCertJson", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldProduceSenderIntermediateCertJson() throws Exception {\n    String encoded =\n        new SenderIntermediateCertFactory.Builder()\n            .protocolVersion(PaymentMethodTokenConstants.PROTOCOL_VERSION_EC_V2)\n            .senderIntermediateSigningKey(GOOGLE_SIGNING_EC_V2_INTERMEDIATE_PUBLIC_KEY_X509_BASE64)\n            .addSenderSigningKey(GOOGLE_SIGNING_EC_V2_PRIVATE_KEY_PKCS8_BASE64)\n            .expiration(123456)\n            .build()\n            .create();\n\n    JSONObject decodedSignedIntermediateSigningKey = new JSONObject(encoded);\n    assertTrue(decodedSignedIntermediateSigningKey.get(\"signedKey\") instanceof String);\n    assertTrue(decodedSignedIntermediateSigningKey.get(\"signatures\") instanceof JSONArray);\n    assertEquals(2, decodedSignedIntermediateSigningKey.length());\n    JSONObject signedKey =\n        new JSONObject(decodedSignedIntermediateSigningKey.getString(\"signedKey\"));\n    assertTrue(signedKey.get(\"keyValue\") instanceof String);\n    assertTrue(signedKey.get(\"keyExpiration\") instanceof String);\n    assertEquals(2, signedKey.length());\n    assertEquals(\n        GOOGLE_SIGNING_EC_V2_INTERMEDIATE_PUBLIC_KEY_X509_BASE64, signedKey.getString(\"keyValue\"));\n    assertEquals(\"123456\", signedKey.getString(\"keyExpiration\"));\n    assertEquals(1, decodedSignedIntermediateSigningKey.getJSONArray(\"signatures\").length());\n    assertNotEquals(\n        0, decodedSignedIntermediateSigningKey.getJSONArray(\"signatures\").getString(0).length());\n  }", "signature": "void shouldProduceSenderIntermediateCertJson()", "full_signature": "@Test public void shouldProduceSenderIntermediateCertJson()", "class_method_signature": "SenderIntermediateCertFactoryTest.shouldProduceSenderIntermediateCertJson()", "testcase": true, "constructor": false, "invocations": ["create", "build", "expiration", "addSenderSigningKey", "senderIntermediateSigningKey", "protocolVersion", "assertTrue", "get", "assertTrue", "get", "assertEquals", "length", "getString", "assertTrue", "get", "assertTrue", "get", "assertEquals", "length", "assertEquals", "getString", "assertEquals", "getString", "assertEquals", "length", "getJSONArray", "assertNotEquals", "length", "getString", "getJSONArray"]}, "focal_class": {"identifier": "SenderIntermediateCertFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final List<PublicKeySign> signers;", "modifier": "private final", "type": "List<PublicKeySign>", "declarator": "signers", "var_name": "signers"}, {"original_string": "private final String intermediateSigningKey;", "modifier": "private final", "type": "String", "declarator": "intermediateSigningKey", "var_name": "intermediateSigningKey"}, {"original_string": "private final String protocolVersion;", "modifier": "private final", "type": "String", "declarator": "protocolVersion", "var_name": "protocolVersion"}, {"original_string": "private final String senderId;", "modifier": "private final", "type": "String", "declarator": "senderId", "var_name": "senderId"}, {"original_string": "private final long expiration;", "modifier": "private final", "type": "long", "declarator": "expiration", "var_name": "expiration"}], "methods": [{"identifier": "SenderIntermediateCertFactory", "parameters": "(\n      String protocolVersion,\n      String senderId,\n      List<ECPrivateKey> senderSigningKeys,\n      String intermediateSigningKey,\n      long expiration)", "modifiers": "private", "return": "", "signature": " SenderIntermediateCertFactory(\n      String protocolVersion,\n      String senderId,\n      List<ECPrivateKey> senderSigningKeys,\n      String intermediateSigningKey,\n      long expiration)", "full_signature": "private  SenderIntermediateCertFactory(\n      String protocolVersion,\n      String senderId,\n      List<ECPrivateKey> senderSigningKeys,\n      String intermediateSigningKey,\n      long expiration)", "class_method_signature": "SenderIntermediateCertFactory.SenderIntermediateCertFactory(\n      String protocolVersion,\n      String senderId,\n      List<ECPrivateKey> senderSigningKeys,\n      String intermediateSigningKey,\n      long expiration)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String create()", "full_signature": "public String create()", "class_method_signature": "SenderIntermediateCertFactory.create()", "testcase": false, "constructor": false}], "file": "apps/paymentmethodtoken/src/main/java/com/google/crypto/tink/apps/paymentmethodtoken/SenderIntermediateCertFactory.java"}, "focal_method": {"identifier": "create", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String create() throws GeneralSecurityException {\n    try {\n      String signedKey =\n          new JSONObject()\n              .put(PaymentMethodTokenConstants.JSON_KEY_VALUE_KEY, intermediateSigningKey)\n              .put(PaymentMethodTokenConstants.JSON_KEY_EXPIRATION_KEY, Long.toString(expiration))\n              .toString();\n      byte[] toSignBytes =\n          PaymentMethodTokenUtil.toLengthValue(\n              // The order of the parameters matters.\n              senderId, protocolVersion, signedKey);\n      JSONArray signatures = new JSONArray();\n      for (PublicKeySign signer : signers) {\n        byte[] signature = signer.sign(toSignBytes);\n        signatures.put(Base64.encode(signature));\n      }\n      return new JSONObject()\n          .put(PaymentMethodTokenConstants.JSON_SIGNED_KEY_KEY, signedKey)\n          .put(PaymentMethodTokenConstants.JSON_SIGNATURES_KEY, signatures)\n          .toString();\n    } catch (JSONException e) {\n      throw new RuntimeException(\"Failed to perform JSON encoding\", e);\n    }\n  }", "signature": "String create()", "full_signature": "public String create()", "class_method_signature": "SenderIntermediateCertFactory.create()", "testcase": false, "constructor": false, "invocations": ["toString", "put", "put", "toString", "toLengthValue", "sign", "put", "encode", "toString", "put", "put"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}