{"test_class": {"identifier": "OpenLRDatex2EncoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final OpenLRDatex2Encoder XML_ENCODER = new OpenLRDatex2Encoder();", "modifier": "private static final", "type": "OpenLRDatex2Encoder", "declarator": "XML_ENCODER = new OpenLRDatex2Encoder()", "var_name": "XML_ENCODER"}, {"original_string": "private static final File TEST_DATA = new File(\"src/test/resources/line.txt\");", "modifier": "private static final", "type": "File", "declarator": "TEST_DATA = new File(\"src/test/resources/line.txt\")", "var_name": "TEST_DATA"}, {"original_string": "private List<LocationReferencePoint> points;", "modifier": "private", "type": "List<LocationReferencePoint>", "declarator": "points", "var_name": "points"}, {"original_string": "private Offsets off1;", "modifier": "private", "type": "Offsets", "declarator": "off1", "var_name": "off1"}, {"original_string": "private Offsets off2;", "modifier": "private", "type": "Offsets", "declarator": "off2", "var_name": "off2"}], "file": "datex2/src/test/java/openlr/datex2/OpenLRDatex2EncoderTest.java"}, "test_case": {"identifier": "testBinaryEncoder05", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testBinaryEncoder05() {\n        LocationReference ref = null;\n        RawLocationReference rawLocRef = new RawLineLocRef(\"\", points, off2);\n        try {\n            ref = XML_ENCODER.encodeData(rawLocRef, 11);\n            XmlWriter writer = new XmlWriter();\n            StringWriter sw = new StringWriter();\n            writer.saveDatex2Location((Datex2Location) ref.getLocationReferenceData(), sw);\n            BufferedReader br = new BufferedReader(new FileReader(TEST_DATA));\n            String[] lines = sw.toString().split(\"\\n\");\n            int nrLines = lines.length;\n            String current = null;\n            for (int i = 0; i < nrLines; i++) {\n                current = br.readLine();\n                if (current == null) {\n                    fail(\"data not complete\");\n                }\n                if (!current.trim().equals(lines[i].trim())) {\n                    fail(\"data invalid\");\n                }\n            }\n            if (br.readLine() != null) {\n                fail(\"data not complete\");\n            }\n        } catch (PhysicalFormatException e) {\n            fail(\"cannot encode data\", e);\n        } catch (JAXBException e) {\n            e.printStackTrace();\n            fail(\"cannot encode data\");\n        } catch (SAXException e) {\n            e.printStackTrace();\n            fail(\"cannot encode data\");\n        } catch (FileNotFoundException e) {\n            fail(\"\", e);\n        } catch (IOException e) {\n            fail(\"\", e);\n        }\n        if (!\"datex2\".equals(ref.getDataIdentifier())) {\n            fail(\"Invalid data identifier\");\n        }\n\n    }", "signature": "void testBinaryEncoder05()", "full_signature": "@Test public final void testBinaryEncoder05()", "class_method_signature": "OpenLRDatex2EncoderTest.testBinaryEncoder05()", "testcase": true, "constructor": false, "invocations": ["encodeData", "saveDatex2Location", "getLocationReferenceData", "split", "toString", "readLine", "fail", "equals", "trim", "trim", "fail", "readLine", "fail", "fail", "printStackTrace", "fail", "printStackTrace", "fail", "fail", "fail", "equals", "getDataIdentifier", "fail"]}, "focal_class": {"identifier": "OpenLRDatex2Encoder", "superclass": "", "interfaces": "implements PhysicalEncoder", "fields": [{"original_string": "private static final int[] VERSIONS = {11};", "modifier": "private static final", "type": "int[]", "declarator": "VERSIONS = {11}", "var_name": "VERSIONS"}], "methods": [{"identifier": "checkVersion", "parameters": "(final int ver)", "modifiers": "private", "return": "boolean", "signature": "boolean checkVersion(final int ver)", "full_signature": "private boolean checkVersion(final int ver)", "class_method_signature": "OpenLRDatex2Encoder.checkVersion(final int ver)", "testcase": false, "constructor": false}, {"identifier": "getDataClass", "parameters": "()", "modifiers": "@Override public final", "return": "Class<?>", "signature": "Class<?> getDataClass()", "full_signature": "@Override public final Class<?> getDataClass()", "class_method_signature": "OpenLRDatex2Encoder.getDataClass()", "testcase": false, "constructor": false}, {"identifier": "getDataFormatIdentifier", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String getDataFormatIdentifier()", "full_signature": "@Override public final String getDataFormatIdentifier()", "class_method_signature": "OpenLRDatex2Encoder.getDataFormatIdentifier()", "testcase": false, "constructor": false}, {"identifier": "getSupportedVersions", "parameters": "()", "modifiers": "@Override public final", "return": "int[]", "signature": "int[] getSupportedVersions()", "full_signature": "@Override public final int[] getSupportedVersions()", "class_method_signature": "OpenLRDatex2Encoder.getSupportedVersions()", "testcase": false, "constructor": false}, {"identifier": "encodeData", "parameters": "(\n            final RawLocationReference rawLocRef)", "modifiers": "@Override public final", "return": "LocationReference", "signature": "LocationReference encodeData(\n            final RawLocationReference rawLocRef)", "full_signature": "@Override public final LocationReference encodeData(\n            final RawLocationReference rawLocRef)", "class_method_signature": "OpenLRDatex2Encoder.encodeData(\n            final RawLocationReference rawLocRef)", "testcase": false, "constructor": false}, {"identifier": "encodeData", "parameters": "(\n            final RawLocationReference rawLocRef, final int version)", "modifiers": "@Override public final", "return": "LocationReference", "signature": "LocationReference encodeData(\n            final RawLocationReference rawLocRef, final int version)", "full_signature": "@Override public final LocationReference encodeData(\n            final RawLocationReference rawLocRef, final int version)", "class_method_signature": "OpenLRDatex2Encoder.encodeData(\n            final RawLocationReference rawLocRef, final int version)", "testcase": false, "constructor": false}], "file": "datex2/src/main/java/openlr/datex2/OpenLRDatex2Encoder.java"}, "focal_method": {"identifier": "encodeData", "parameters": "(\n            final RawLocationReference rawLocRef)", "modifiers": "@Override public final", "return": "LocationReference", "body": "@Override\n    public final LocationReference encodeData(\n            final RawLocationReference rawLocRef) {\n        return encodeData(rawLocRef, VERSIONS[VERSIONS.length - 1]);\n    }", "signature": "LocationReference encodeData(\n            final RawLocationReference rawLocRef)", "full_signature": "@Override public final LocationReference encodeData(\n            final RawLocationReference rawLocRef)", "class_method_signature": "OpenLRDatex2Encoder.encodeData(\n            final RawLocationReference rawLocRef)", "testcase": false, "constructor": false, "invocations": ["encodeData"]}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}