{"test_class": {"identifier": "EmrPricingHelperTest", "superclass": "extends AbstractDaoTest", "interfaces": "", "fields": [{"original_string": "private static final BigDecimal ONE_POINT_ONE = new BigDecimal(\"1.1\");", "modifier": "private static final", "type": "BigDecimal", "declarator": "ONE_POINT_ONE = new BigDecimal(\"1.1\")", "var_name": "ONE_POINT_ONE"}, {"original_string": "private static final BigDecimal ONE_POINT_ONE_ONE = new BigDecimal(\"1.11\");", "modifier": "private static final", "type": "BigDecimal", "declarator": "ONE_POINT_ONE_ONE = new BigDecimal(\"1.11\")", "var_name": "ONE_POINT_ONE_ONE"}, {"original_string": "private static final BigDecimal ONE_UNIT = new BigDecimal(\"0.00001\");", "modifier": "private static final", "type": "BigDecimal", "declarator": "ONE_UNIT = new BigDecimal(\"0.00001\")", "var_name": "ONE_UNIT"}, {"original_string": "private static final BigDecimal FIVE_UNIT = new BigDecimal(\"0.00005\");", "modifier": "private static final", "type": "BigDecimal", "declarator": "FIVE_UNIT = new BigDecimal(\"0.00005\")", "var_name": "FIVE_UNIT"}, {"original_string": "private static final BigDecimal TEN_PERCENT = new BigDecimal(\"0.1\");", "modifier": "private static final", "type": "BigDecimal", "declarator": "TEN_PERCENT = new BigDecimal(\"0.1\")", "var_name": "TEN_PERCENT"}, {"original_string": "private static final BigDecimal ON_DEMAND = new BigDecimal(\"1.00\");", "modifier": "private static final", "type": "BigDecimal", "declarator": "ON_DEMAND = new BigDecimal(\"1.00\")", "var_name": "ON_DEMAND"}, {"original_string": "private static final BigDecimal ON_DEMAND_LESS_ONE = ON_DEMAND.subtract(ONE_UNIT);", "modifier": "private static final", "type": "BigDecimal", "declarator": "ON_DEMAND_LESS_ONE = ON_DEMAND.subtract(ONE_UNIT)", "var_name": "ON_DEMAND_LESS_ONE"}, {"original_string": "private static final BigDecimal SPOT_PRICE_LOW = new BigDecimal(MockEc2OperationsImpl.SPOT_PRICE_LOW);", "modifier": "private static final", "type": "BigDecimal", "declarator": "SPOT_PRICE_LOW = new BigDecimal(MockEc2OperationsImpl.SPOT_PRICE_LOW)", "var_name": "SPOT_PRICE_LOW"}, {"original_string": "private static final BigDecimal SPOT_PRICE_LOW_LESS_ONE = SPOT_PRICE_LOW.subtract(ONE_UNIT);", "modifier": "private static final", "type": "BigDecimal", "declarator": "SPOT_PRICE_LOW_LESS_ONE = SPOT_PRICE_LOW.subtract(ONE_UNIT)", "var_name": "SPOT_PRICE_LOW_LESS_ONE"}, {"original_string": "private static final BigDecimal SPOT_PRICE_LOW_PLUS_ONE = SPOT_PRICE_LOW.add(ONE_UNIT);", "modifier": "private static final", "type": "BigDecimal", "declarator": "SPOT_PRICE_LOW_PLUS_ONE = SPOT_PRICE_LOW.add(ONE_UNIT)", "var_name": "SPOT_PRICE_LOW_PLUS_ONE"}, {"original_string": "private static final BigDecimal SPOT_PRICE_VERY_HIGH = new BigDecimal(MockEc2OperationsImpl.SPOT_PRICE_VERY_HIGH);", "modifier": "private static final", "type": "BigDecimal", "declarator": "SPOT_PRICE_VERY_HIGH = new BigDecimal(MockEc2OperationsImpl.SPOT_PRICE_VERY_HIGH)", "var_name": "SPOT_PRICE_VERY_HIGH"}, {"original_string": "@Autowired\n    private EmrPricingHelper emrPricingHelper;", "modifier": "@Autowired\n    private", "type": "EmrPricingHelper", "declarator": "emrPricingHelper", "var_name": "emrPricingHelper"}], "file": "herd-code/herd-dao/src/test/java/org/finra/herd/dao/helper/EmrPricingHelperTest.java"}, "test_case": {"identifier": "testGetEmrClusterPricesWithinLowestCoreInstancePriceZeroThresholdMultiplePricings", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetEmrClusterPricesWithinLowestCoreInstancePriceZeroThresholdMultiplePricings() throws Exception\n    {\n        List<EmrClusterPriceDto> pricingList = Arrays\n            .asList(createSimpleEmrClusterPrice(AVAILABILITY_ZONE_1, BigDecimal.ONE), createSimpleEmrClusterPrice(AVAILABILITY_ZONE_2, BigDecimal.TEN),\n                createSimpleEmrClusterPrice(AVAILABILITY_ZONE_3, BigDecimal.ONE.add(FIVE_UNIT)),\n                createSimpleEmrClusterPrice(AVAILABILITY_ZONE_4, BigDecimal.ONE));\n\n        List<EmrClusterPriceDto> lowestCoreInstancePriceClusters =\n            emrPricingHelper.getEmrClusterPricesWithinLowestCoreInstancePriceThreshold(pricingList, BigDecimal.ZERO);\n        assertEquals(2, lowestCoreInstancePriceClusters.size());\n        for (EmrClusterPriceDto emrClusterPriceDto : lowestCoreInstancePriceClusters)\n        {\n            assertTrue(Arrays.asList(AVAILABILITY_ZONE_1, AVAILABILITY_ZONE_4).contains(emrClusterPriceDto.getAvailabilityZone()));\n        }\n    }", "signature": "void testGetEmrClusterPricesWithinLowestCoreInstancePriceZeroThresholdMultiplePricings()", "full_signature": "@Test public void testGetEmrClusterPricesWithinLowestCoreInstancePriceZeroThresholdMultiplePricings()", "class_method_signature": "EmrPricingHelperTest.testGetEmrClusterPricesWithinLowestCoreInstancePriceZeroThresholdMultiplePricings()", "testcase": true, "constructor": false, "invocations": ["asList", "createSimpleEmrClusterPrice", "createSimpleEmrClusterPrice", "createSimpleEmrClusterPrice", "add", "createSimpleEmrClusterPrice", "getEmrClusterPricesWithinLowestCoreInstancePriceThreshold", "assertEquals", "size", "assertTrue", "contains", "asList", "getAvailabilityZone"]}, "focal_class": {"identifier": "EmrPricingHelper", "superclass": "extends AwsHelper", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(EmrPricingHelper.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(EmrPricingHelper.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private Ec2Dao ec2Dao;", "modifier": "@Autowired\n    private", "type": "Ec2Dao", "declarator": "ec2Dao", "var_name": "ec2Dao"}, {"original_string": "@Autowired\n    private EmrVpcPricingStateFormatter emrVpcPricingStateFormatter;", "modifier": "@Autowired\n    private", "type": "EmrVpcPricingStateFormatter", "declarator": "emrVpcPricingStateFormatter", "var_name": "emrVpcPricingStateFormatter"}, {"original_string": "@Autowired\n    private HerdStringHelper herdStringHelper;", "modifier": "@Autowired\n    private", "type": "HerdStringHelper", "declarator": "herdStringHelper", "var_name": "herdStringHelper"}, {"original_string": "@Autowired\n    private JsonHelper jsonHelper;", "modifier": "@Autowired\n    private", "type": "JsonHelper", "declarator": "jsonHelper", "var_name": "jsonHelper"}, {"original_string": "@Autowired\n    private ConfigurationHelper configurationHelper;", "modifier": "@Autowired\n    private", "type": "ConfigurationHelper", "declarator": "configurationHelper", "var_name": "configurationHelper"}], "methods": [{"identifier": "updateEmrClusterDefinitionWithBestPrice", "parameters": "(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterDefinition emrClusterDefinition,\n        AwsParamsDto awsParamsDto)", "modifiers": "public", "return": "void", "signature": "void updateEmrClusterDefinitionWithBestPrice(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterDefinition emrClusterDefinition,\n        AwsParamsDto awsParamsDto)", "full_signature": "public void updateEmrClusterDefinitionWithBestPrice(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterDefinition emrClusterDefinition,\n        AwsParamsDto awsParamsDto)", "class_method_signature": "EmrPricingHelper.updateEmrClusterDefinitionWithBestPrice(EmrClusterAlternateKeyDto emrClusterAlternateKeyDto, EmrClusterDefinition emrClusterDefinition,\n        AwsParamsDto awsParamsDto)", "testcase": false, "constructor": false}, {"identifier": "getTotalInstanceCount", "parameters": "(EmrClusterDefinition emrClusterDefinition)", "modifiers": "private", "return": "int", "signature": "int getTotalInstanceCount(EmrClusterDefinition emrClusterDefinition)", "full_signature": "private int getTotalInstanceCount(EmrClusterDefinition emrClusterDefinition)", "class_method_signature": "EmrPricingHelper.getTotalInstanceCount(EmrClusterDefinition emrClusterDefinition)", "testcase": false, "constructor": false}, {"identifier": "updateInstanceDefinitionsWithBestPrice", "parameters": "(EmrClusterDefinition emrClusterDefinition, Subnet bestEmrClusterSubnet,\n        EmrClusterPriceDto bestEmrClusterPrice)", "modifiers": "private", "return": "void", "signature": "void updateInstanceDefinitionsWithBestPrice(EmrClusterDefinition emrClusterDefinition, Subnet bestEmrClusterSubnet,\n        EmrClusterPriceDto bestEmrClusterPrice)", "full_signature": "private void updateInstanceDefinitionsWithBestPrice(EmrClusterDefinition emrClusterDefinition, Subnet bestEmrClusterSubnet,\n        EmrClusterPriceDto bestEmrClusterPrice)", "class_method_signature": "EmrPricingHelper.updateInstanceDefinitionsWithBestPrice(EmrClusterDefinition emrClusterDefinition, Subnet bestEmrClusterSubnet,\n        EmrClusterPriceDto bestEmrClusterPrice)", "testcase": false, "constructor": false}, {"identifier": "getSpotBidPrice", "parameters": "(Ec2PriceDto ec2Price)", "modifiers": "private", "return": "BigDecimal", "signature": "BigDecimal getSpotBidPrice(Ec2PriceDto ec2Price)", "full_signature": "private BigDecimal getSpotBidPrice(Ec2PriceDto ec2Price)", "class_method_signature": "EmrPricingHelper.getSpotBidPrice(Ec2PriceDto ec2Price)", "testcase": false, "constructor": false}, {"identifier": "getBestSubnetForAvailabilityZone", "parameters": "(String availabilityZone, List<Subnet> subnets)", "modifiers": "private", "return": "Subnet", "signature": "Subnet getBestSubnetForAvailabilityZone(String availabilityZone, List<Subnet> subnets)", "full_signature": "private Subnet getBestSubnetForAvailabilityZone(String availabilityZone, List<Subnet> subnets)", "class_method_signature": "EmrPricingHelper.getBestSubnetForAvailabilityZone(String availabilityZone, List<Subnet> subnets)", "testcase": false, "constructor": false}, {"identifier": "getTop", "parameters": "(List<T> list, Comparator<T> comparator)", "modifiers": "private", "return": "T", "signature": "T getTop(List<T> list, Comparator<T> comparator)", "full_signature": "private T getTop(List<T> list, Comparator<T> comparator)", "class_method_signature": "EmrPricingHelper.getTop(List<T> list, Comparator<T> comparator)", "testcase": false, "constructor": false}, {"identifier": "getEmrClusterPriceWithLowestCoreInstancePrice", "parameters": "(final List<EmrClusterPriceDto> emrClusterPrices)", "modifiers": "", "return": "EmrClusterPriceDto", "signature": "EmrClusterPriceDto getEmrClusterPriceWithLowestCoreInstancePrice(final List<EmrClusterPriceDto> emrClusterPrices)", "full_signature": " EmrClusterPriceDto getEmrClusterPriceWithLowestCoreInstancePrice(final List<EmrClusterPriceDto> emrClusterPrices)", "class_method_signature": "EmrPricingHelper.getEmrClusterPriceWithLowestCoreInstancePrice(final List<EmrClusterPriceDto> emrClusterPrices)", "testcase": false, "constructor": false}, {"identifier": "getEmrClusterPricesWithinLowestCoreInstancePriceThreshold", "parameters": "(final List<EmrClusterPriceDto> emrClusterPrices,\n        final BigDecimal lowestCoreInstancePriceThresholdPercentage)", "modifiers": "", "return": "List<EmrClusterPriceDto>", "signature": "List<EmrClusterPriceDto> getEmrClusterPricesWithinLowestCoreInstancePriceThreshold(final List<EmrClusterPriceDto> emrClusterPrices,\n        final BigDecimal lowestCoreInstancePriceThresholdPercentage)", "full_signature": " List<EmrClusterPriceDto> getEmrClusterPricesWithinLowestCoreInstancePriceThreshold(final List<EmrClusterPriceDto> emrClusterPrices,\n        final BigDecimal lowestCoreInstancePriceThresholdPercentage)", "class_method_signature": "EmrPricingHelper.getEmrClusterPricesWithinLowestCoreInstancePriceThreshold(final List<EmrClusterPriceDto> emrClusterPrices,\n        final BigDecimal lowestCoreInstancePriceThresholdPercentage)", "testcase": false, "constructor": false}, {"identifier": "getEmrClusterCoreInstancePrice", "parameters": "(EmrClusterPriceDto emrClusterPrice)", "modifiers": "private", "return": "BigDecimal", "signature": "BigDecimal getEmrClusterCoreInstancePrice(EmrClusterPriceDto emrClusterPrice)", "full_signature": "private BigDecimal getEmrClusterCoreInstancePrice(EmrClusterPriceDto emrClusterPrice)", "class_method_signature": "EmrPricingHelper.getEmrClusterCoreInstancePrice(EmrClusterPriceDto emrClusterPrice)", "testcase": false, "constructor": false}, {"identifier": "removeSubnetsWithAvailableIpsLessThan", "parameters": "(List<Subnet> subnets, int availableIps)", "modifiers": "private", "return": "void", "signature": "void removeSubnetsWithAvailableIpsLessThan(List<Subnet> subnets, int availableIps)", "full_signature": "private void removeSubnetsWithAvailableIpsLessThan(List<Subnet> subnets, int availableIps)", "class_method_signature": "EmrPricingHelper.removeSubnetsWithAvailableIpsLessThan(List<Subnet> subnets, int availableIps)", "testcase": false, "constructor": false}, {"identifier": "createEmrClusterPrice", "parameters": "(AvailabilityZone availabilityZone, Ec2PriceDto masterPrice, Ec2PriceDto corePrice, Ec2PriceDto taskPrice)", "modifiers": "private", "return": "EmrClusterPriceDto", "signature": "EmrClusterPriceDto createEmrClusterPrice(AvailabilityZone availabilityZone, Ec2PriceDto masterPrice, Ec2PriceDto corePrice, Ec2PriceDto taskPrice)", "full_signature": "private EmrClusterPriceDto createEmrClusterPrice(AvailabilityZone availabilityZone, Ec2PriceDto masterPrice, Ec2PriceDto corePrice, Ec2PriceDto taskPrice)", "class_method_signature": "EmrPricingHelper.createEmrClusterPrice(AvailabilityZone availabilityZone, Ec2PriceDto masterPrice, Ec2PriceDto corePrice, Ec2PriceDto taskPrice)", "testcase": false, "constructor": false}, {"identifier": "getBestInstancePrice", "parameters": "(BigDecimal spotPrice, InstanceDefinition instanceDefinition)", "modifiers": "private", "return": "Ec2PriceDto", "signature": "Ec2PriceDto getBestInstancePrice(BigDecimal spotPrice, InstanceDefinition instanceDefinition)", "full_signature": "private Ec2PriceDto getBestInstancePrice(BigDecimal spotPrice, InstanceDefinition instanceDefinition)", "class_method_signature": "EmrPricingHelper.getBestInstancePrice(BigDecimal spotPrice, InstanceDefinition instanceDefinition)", "testcase": false, "constructor": false}, {"identifier": "setBestPriceToSpotPricing", "parameters": "(BigDecimal spotPrice, BigDecimal bidPrice, int instanceCount)", "modifiers": "private", "return": "Ec2PriceDto", "signature": "Ec2PriceDto setBestPriceToSpotPricing(BigDecimal spotPrice, BigDecimal bidPrice, int instanceCount)", "full_signature": "private Ec2PriceDto setBestPriceToSpotPricing(BigDecimal spotPrice, BigDecimal bidPrice, int instanceCount)", "class_method_signature": "EmrPricingHelper.setBestPriceToSpotPricing(BigDecimal spotPrice, BigDecimal bidPrice, int instanceCount)", "testcase": false, "constructor": false}, {"identifier": "getCoreInstanceDefinition", "parameters": "(EmrClusterDefinition emrClusterDefinition)", "modifiers": "private", "return": "InstanceDefinition", "signature": "InstanceDefinition getCoreInstanceDefinition(EmrClusterDefinition emrClusterDefinition)", "full_signature": "private InstanceDefinition getCoreInstanceDefinition(EmrClusterDefinition emrClusterDefinition)", "class_method_signature": "EmrPricingHelper.getCoreInstanceDefinition(EmrClusterDefinition emrClusterDefinition)", "testcase": false, "constructor": false}, {"identifier": "getTaskInstanceDefinition", "parameters": "(EmrClusterDefinition emrClusterDefinition)", "modifiers": "private", "return": "InstanceDefinition", "signature": "InstanceDefinition getTaskInstanceDefinition(EmrClusterDefinition emrClusterDefinition)", "full_signature": "private InstanceDefinition getTaskInstanceDefinition(EmrClusterDefinition emrClusterDefinition)", "class_method_signature": "EmrPricingHelper.getTaskInstanceDefinition(EmrClusterDefinition emrClusterDefinition)", "testcase": false, "constructor": false}, {"identifier": "getMasterInstanceDefinition", "parameters": "(EmrClusterDefinition emrClusterDefinition)", "modifiers": "private", "return": "InstanceDefinition", "signature": "InstanceDefinition getMasterInstanceDefinition(EmrClusterDefinition emrClusterDefinition)", "full_signature": "private InstanceDefinition getMasterInstanceDefinition(EmrClusterDefinition emrClusterDefinition)", "class_method_signature": "EmrPricingHelper.getMasterInstanceDefinition(EmrClusterDefinition emrClusterDefinition)", "testcase": false, "constructor": false}, {"identifier": "getInstanceTypeSpotPrices", "parameters": "(AvailabilityZone availabilityZone, Set<String> instanceTypes, AwsParamsDto awsParamsDto)", "modifiers": "private", "return": "Map<String, BigDecimal>", "signature": "Map<String, BigDecimal> getInstanceTypeSpotPrices(AvailabilityZone availabilityZone, Set<String> instanceTypes, AwsParamsDto awsParamsDto)", "full_signature": "private Map<String, BigDecimal> getInstanceTypeSpotPrices(AvailabilityZone availabilityZone, Set<String> instanceTypes, AwsParamsDto awsParamsDto)", "class_method_signature": "EmrPricingHelper.getInstanceTypeSpotPrices(AvailabilityZone availabilityZone, Set<String> instanceTypes, AwsParamsDto awsParamsDto)", "testcase": false, "constructor": false}, {"identifier": "getAvailabilityZones", "parameters": "(List<Subnet> subnets, AwsParamsDto awsParamsDto)", "modifiers": "private", "return": "List<AvailabilityZone>", "signature": "List<AvailabilityZone> getAvailabilityZones(List<Subnet> subnets, AwsParamsDto awsParamsDto)", "full_signature": "private List<AvailabilityZone> getAvailabilityZones(List<Subnet> subnets, AwsParamsDto awsParamsDto)", "class_method_signature": "EmrPricingHelper.getAvailabilityZones(List<Subnet> subnets, AwsParamsDto awsParamsDto)", "testcase": false, "constructor": false}, {"identifier": "getSubnets", "parameters": "(EmrClusterDefinition emrClusterDefinition, AwsParamsDto awsParamsDto)", "modifiers": "public", "return": "List<Subnet>", "signature": "List<Subnet> getSubnets(EmrClusterDefinition emrClusterDefinition, AwsParamsDto awsParamsDto)", "full_signature": "public List<Subnet> getSubnets(EmrClusterDefinition emrClusterDefinition, AwsParamsDto awsParamsDto)", "class_method_signature": "EmrPricingHelper.getSubnets(EmrClusterDefinition emrClusterDefinition, AwsParamsDto awsParamsDto)", "testcase": false, "constructor": false}], "file": "herd-code/herd-dao/src/main/java/org/finra/herd/dao/helper/EmrPricingHelper.java"}, "focal_method": {"identifier": "getEmrClusterPricesWithinLowestCoreInstancePriceThreshold", "parameters": "(final List<EmrClusterPriceDto> emrClusterPrices,\n        final BigDecimal lowestCoreInstancePriceThresholdPercentage)", "modifiers": "", "return": "List<EmrClusterPriceDto>", "body": "List<EmrClusterPriceDto> getEmrClusterPricesWithinLowestCoreInstancePriceThreshold(final List<EmrClusterPriceDto> emrClusterPrices,\n        final BigDecimal lowestCoreInstancePriceThresholdPercentage)\n    {\n        // Builds a tree map that has the core instance price as the key, and the list of pricing with the same core instance price as the value. The tree map\n        // is automatically sorted, so it is easy to find the lowest core instance price range.\n        TreeMap<BigDecimal, List<EmrClusterPriceDto>> emrClusterPriceMapKeyedByCoreInstancePrice = new TreeMap<>();\n        for (final EmrClusterPriceDto emrClusterPriceDto : emrClusterPrices)\n        {\n            final BigDecimal coreInstancePrice = getEmrClusterCoreInstancePrice(emrClusterPriceDto);\n            if (coreInstancePrice != null)\n            {\n                if (emrClusterPriceMapKeyedByCoreInstancePrice.containsKey(coreInstancePrice))\n                {\n                    emrClusterPriceMapKeyedByCoreInstancePrice.get(coreInstancePrice).add(emrClusterPriceDto);\n                }\n                else\n                {\n                    List<EmrClusterPriceDto> emrClusterPriceList = new ArrayList<>();\n                    emrClusterPriceList.add(emrClusterPriceDto);\n                    emrClusterPriceMapKeyedByCoreInstancePrice.put(coreInstancePrice, emrClusterPriceList);\n                }\n            }\n        }\n\n        // Log all the information in the tree map\n        LOGGER.info(\"All available EMR clusters keyed by core instance price: availableEmrClusters={}\",\n            jsonHelper.objectToJson(emrClusterPriceMapKeyedByCoreInstancePrice));\n\n        // Finds the list of pricing in the range of the lowest core instance price\n        List<EmrClusterPriceDto> lowestCoreInstancePriceEmrClusters = new ArrayList<>();\n        if (!emrClusterPriceMapKeyedByCoreInstancePrice.isEmpty())\n        {\n            // calculate the lowest core instance price range\n            final BigDecimal lowestCoreInstancePriceLowerBound = emrClusterPriceMapKeyedByCoreInstancePrice.firstEntry().getKey();\n            final BigDecimal lowestCoreInstancePriceUpperBound =\n                lowestCoreInstancePriceLowerBound.multiply(BigDecimal.ONE.add(lowestCoreInstancePriceThresholdPercentage));\n\n            LOGGER.info(\"emrClusterLowestCoreInstancePriceRange={}\",\n                jsonHelper.objectToJson(Arrays.asList(lowestCoreInstancePriceLowerBound, lowestCoreInstancePriceUpperBound)));\n\n            for (final Map.Entry<BigDecimal, List<EmrClusterPriceDto>> entry : emrClusterPriceMapKeyedByCoreInstancePrice.entrySet())\n            {\n                final BigDecimal coreInstancePrice = entry.getKey();\n                // Fall into the lowest price range? add it to the list.\n                // There is no need to check the lower bound here, since the tree map is sorted, and lower bound is the lowest core price in the tree map.\n                if (coreInstancePrice.compareTo(lowestCoreInstancePriceUpperBound) <= 0)\n                {\n                    lowestCoreInstancePriceEmrClusters.addAll(entry.getValue());\n                }\n                else\n                {\n                    // since the tree map is sorted in ascending order, we do not need to check the rest of entries in the map\n                    break;\n                }\n            }\n        }\n        return lowestCoreInstancePriceEmrClusters;\n    }", "signature": "List<EmrClusterPriceDto> getEmrClusterPricesWithinLowestCoreInstancePriceThreshold(final List<EmrClusterPriceDto> emrClusterPrices,\n        final BigDecimal lowestCoreInstancePriceThresholdPercentage)", "full_signature": " List<EmrClusterPriceDto> getEmrClusterPricesWithinLowestCoreInstancePriceThreshold(final List<EmrClusterPriceDto> emrClusterPrices,\n        final BigDecimal lowestCoreInstancePriceThresholdPercentage)", "class_method_signature": "EmrPricingHelper.getEmrClusterPricesWithinLowestCoreInstancePriceThreshold(final List<EmrClusterPriceDto> emrClusterPrices,\n        final BigDecimal lowestCoreInstancePriceThresholdPercentage)", "testcase": false, "constructor": false, "invocations": ["getEmrClusterCoreInstancePrice", "containsKey", "add", "get", "add", "put", "info", "objectToJson", "isEmpty", "getKey", "firstEntry", "multiply", "add", "info", "objectToJson", "asList", "entrySet", "getKey", "compareTo", "addAll", "getValue"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}