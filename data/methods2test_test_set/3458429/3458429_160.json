{"test_class": {"identifier": "TestAtomics", "superclass": "", "interfaces": "", "fields": [], "file": "firefly-common/src/test/java/com/fireflysource/common/concurrent/TestAtomics.java"}, "test_case": {"identifier": "testGetAndDecrement", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testGetAndDecrement() {\n        int init = 10;\n        int min = 5;\n        AtomicInteger integer = new AtomicInteger(init);\n\n        for (int i = init; i > 0; i--) {\n            Atomics.getAndDecrement(integer, min);\n        }\n        assertEquals(min, integer.get());\n    }", "signature": "void testGetAndDecrement()", "full_signature": "@Test void testGetAndDecrement()", "class_method_signature": "TestAtomics.testGetAndDecrement()", "testcase": true, "constructor": false, "invocations": ["getAndDecrement", "assertEquals", "get"]}, "focal_class": {"identifier": "Atomics", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getAndDecrement", "parameters": "(AtomicInteger i, int minValue)", "modifiers": "public static", "return": "int", "signature": "int getAndDecrement(AtomicInteger i, int minValue)", "full_signature": "public static int getAndDecrement(AtomicInteger i, int minValue)", "class_method_signature": "Atomics.getAndDecrement(AtomicInteger i, int minValue)", "testcase": false, "constructor": false}, {"identifier": "getAndIncrement", "parameters": "(AtomicInteger i, int maxValue)", "modifiers": "public static", "return": "int", "signature": "int getAndIncrement(AtomicInteger i, int maxValue)", "full_signature": "public static int getAndIncrement(AtomicInteger i, int maxValue)", "class_method_signature": "Atomics.getAndIncrement(AtomicInteger i, int maxValue)", "testcase": false, "constructor": false}, {"identifier": "updateMin", "parameters": "(AtomicInteger currentMin, int newValue)", "modifiers": "public static", "return": "boolean", "signature": "boolean updateMin(AtomicInteger currentMin, int newValue)", "full_signature": "public static boolean updateMin(AtomicInteger currentMin, int newValue)", "class_method_signature": "Atomics.updateMin(AtomicInteger currentMin, int newValue)", "testcase": false, "constructor": false}, {"identifier": "updateMax", "parameters": "(AtomicInteger currentMax, int newValue)", "modifiers": "public static", "return": "boolean", "signature": "boolean updateMax(AtomicInteger currentMax, int newValue)", "full_signature": "public static boolean updateMax(AtomicInteger currentMax, int newValue)", "class_method_signature": "Atomics.updateMax(AtomicInteger currentMax, int newValue)", "testcase": false, "constructor": false}], "file": "firefly-common/src/main/java/com/fireflysource/common/concurrent/Atomics.java"}, "focal_method": {"identifier": "getAndDecrement", "parameters": "(AtomicInteger i, int minValue)", "modifiers": "public static", "return": "int", "body": "public static int getAndDecrement(AtomicInteger i, int minValue) {\n        return i.getAndUpdate(prev -> {\n            if (prev > minValue) {\n                return prev - 1;\n            } else {\n                return minValue;\n            }\n        });\n    }", "signature": "int getAndDecrement(AtomicInteger i, int minValue)", "full_signature": "public static int getAndDecrement(AtomicInteger i, int minValue)", "class_method_signature": "Atomics.getAndDecrement(AtomicInteger i, int minValue)", "testcase": false, "constructor": false, "invocations": ["getAndUpdate"]}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}