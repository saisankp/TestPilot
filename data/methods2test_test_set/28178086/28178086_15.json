{"test_class": {"identifier": "WorkspaceFamilyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final WorkspaceFamily empty = WorkspaceFamily.parse(\"\");", "modifier": "private final", "type": "WorkspaceFamily", "declarator": "empty = WorkspaceFamily.parse(\"\")", "var_name": "empty"}, {"original_string": "private final WorkspaceFamily single = WorkspaceFamily.parse(\"single\");", "modifier": "private final", "type": "WorkspaceFamily", "declarator": "single = WorkspaceFamily.parse(\"single\")", "var_name": "single"}, {"original_string": "private final WorkspaceFamily dual = WorkspaceFamily.parse(\"hello@world\");", "modifier": "private final", "type": "WorkspaceFamily", "declarator": "dual = WorkspaceFamily.parse(\"hello@world\")", "var_name": "dual"}], "file": "demetra-workspace/src/test/java/ec/demetra/workspace/WorkspaceFamilyTest.java"}, "test_case": {"identifier": "testHashcode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHashcode() {\n        assertThat(empty.hashCode())\n                .isEqualTo(WorkspaceFamily.parse(\"\").hashCode())\n                .isNotEqualTo(single.hashCode())\n                .isNotEqualTo(dual.hashCode());\n        assertThat(single.hashCode())\n                .isEqualTo(WorkspaceFamily.parse(\"single\").hashCode())\n                .isNotEqualTo(empty.hashCode())\n                .isNotEqualTo(dual.hashCode());\n        assertThat(dual.hashCode())\n                .isEqualTo(WorkspaceFamily.parse(\"hello@world\").hashCode())\n                .isNotEqualTo(empty.hashCode())\n                .isNotEqualTo(single.hashCode());\n    }", "signature": "void testHashcode()", "full_signature": "@Test public void testHashcode()", "class_method_signature": "WorkspaceFamilyTest.testHashcode()", "testcase": true, "constructor": false, "invocations": ["isNotEqualTo", "isNotEqualTo", "isEqualTo", "assertThat", "hashCode", "hashCode", "parse", "hashCode", "hashCode", "isNotEqualTo", "isNotEqualTo", "isEqualTo", "assertThat", "hashCode", "hashCode", "parse", "hashCode", "hashCode", "isNotEqualTo", "isNotEqualTo", "isEqualTo", "assertThat", "hashCode", "hashCode", "parse", "hashCode", "hashCode"]}, "focal_class": {"identifier": "WorkspaceFamily", "superclass": "", "interfaces": "implements Id", "fields": [{"original_string": "private static final WorkspaceFamily EMPTY = new WorkspaceFamily(new String[0]);", "modifier": "private static final", "type": "WorkspaceFamily", "declarator": "EMPTY = new WorkspaceFamily(new String[0])", "var_name": "EMPTY"}, {"original_string": "private final String[] data;", "modifier": "private final", "type": "String[]", "declarator": "data", "var_name": "data"}, {"original_string": "public static final WorkspaceFamily SA_MULTI = parse(\"Seasonal adjustment@multi-documents\");", "modifier": "public static final", "type": "WorkspaceFamily", "declarator": "SA_MULTI = parse(\"Seasonal adjustment@multi-documents\")", "var_name": "SA_MULTI"}, {"original_string": "public static final WorkspaceFamily SA_DOC_X13 = parse(\"Seasonal adjustment@documents@x13\");", "modifier": "public static final", "type": "WorkspaceFamily", "declarator": "SA_DOC_X13 = parse(\"Seasonal adjustment@documents@x13\")", "var_name": "SA_DOC_X13"}, {"original_string": "public static final WorkspaceFamily SA_DOC_TRAMOSEATS = parse(\"Seasonal adjustment@documents@tramoseats\");", "modifier": "public static final", "type": "WorkspaceFamily", "declarator": "SA_DOC_TRAMOSEATS = parse(\"Seasonal adjustment@documents@tramoseats\")", "var_name": "SA_DOC_TRAMOSEATS"}, {"original_string": "public static final WorkspaceFamily SA_SPEC_X13 = parse(\"Seasonal adjustment@specifications@x13\");", "modifier": "public static final", "type": "WorkspaceFamily", "declarator": "SA_SPEC_X13 = parse(\"Seasonal adjustment@specifications@x13\")", "var_name": "SA_SPEC_X13"}, {"original_string": "public static final WorkspaceFamily SA_SPEC_TRAMOSEATS = parse(\"Seasonal adjustment@specifications@tramoseats\");", "modifier": "public static final", "type": "WorkspaceFamily", "declarator": "SA_SPEC_TRAMOSEATS = parse(\"Seasonal adjustment@specifications@tramoseats\")", "var_name": "SA_SPEC_TRAMOSEATS"}, {"original_string": "public static final WorkspaceFamily MOD_DOC_REGARIMA = parse(\"Modelling@documents@regarima\");", "modifier": "public static final", "type": "WorkspaceFamily", "declarator": "MOD_DOC_REGARIMA = parse(\"Modelling@documents@regarima\")", "var_name": "MOD_DOC_REGARIMA"}, {"original_string": "public static final WorkspaceFamily MOD_DOC_TRAMO = parse(\"Modelling@documents@tramo\");", "modifier": "public static final", "type": "WorkspaceFamily", "declarator": "MOD_DOC_TRAMO = parse(\"Modelling@documents@tramo\")", "var_name": "MOD_DOC_TRAMO"}, {"original_string": "public static final WorkspaceFamily MOD_SPEC_REGARIMA = parse(\"Modelling@specifications@regarima\");", "modifier": "public static final", "type": "WorkspaceFamily", "declarator": "MOD_SPEC_REGARIMA = parse(\"Modelling@specifications@regarima\")", "var_name": "MOD_SPEC_REGARIMA"}, {"original_string": "public static final WorkspaceFamily MOD_SPEC_TRAMO = parse(\"Modelling@specifications@tramo\");", "modifier": "public static final", "type": "WorkspaceFamily", "declarator": "MOD_SPEC_TRAMO = parse(\"Modelling@specifications@tramo\")", "var_name": "MOD_SPEC_TRAMO"}, {"original_string": "public static final WorkspaceFamily UTIL_CAL = parse(\"Utilities@Calendars\");", "modifier": "public static final", "type": "WorkspaceFamily", "declarator": "UTIL_CAL = parse(\"Utilities@Calendars\")", "var_name": "UTIL_CAL"}, {"original_string": "public static final WorkspaceFamily UTIL_VAR = parse(\"Utilities@Variables\");", "modifier": "public static final", "type": "WorkspaceFamily", "declarator": "UTIL_VAR = parse(\"Utilities@Variables\")", "var_name": "UTIL_VAR"}], "methods": [{"identifier": "of", "parameters": "(@NonNull Id id)", "modifiers": "@NonNull public static", "return": "WorkspaceFamily", "signature": "WorkspaceFamily of(@NonNull Id id)", "full_signature": "@NonNull public static WorkspaceFamily of(@NonNull Id id)", "class_method_signature": "WorkspaceFamily.of(@NonNull Id id)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(@NonNull String input)", "modifiers": "@NonNull public static", "return": "WorkspaceFamily", "signature": "WorkspaceFamily parse(@NonNull String input)", "full_signature": "@NonNull public static WorkspaceFamily parse(@NonNull String input)", "class_method_signature": "WorkspaceFamily.parse(@NonNull String input)", "testcase": false, "constructor": false}, {"identifier": "WorkspaceFamily", "parameters": "(String[] data)", "modifiers": "private", "return": "", "signature": " WorkspaceFamily(String[] data)", "full_signature": "private  WorkspaceFamily(String[] data)", "class_method_signature": "WorkspaceFamily.WorkspaceFamily(String[] data)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(int index)", "modifiers": "@Override public", "return": "String", "signature": "String get(int index)", "full_signature": "@Override public String get(int index)", "class_method_signature": "WorkspaceFamily.get(int index)", "testcase": false, "constructor": false}, {"identifier": "extend", "parameters": "(String tail)", "modifiers": "@Override public", "return": "WorkspaceFamily", "signature": "WorkspaceFamily extend(String tail)", "full_signature": "@Override public WorkspaceFamily extend(String tail)", "class_method_signature": "WorkspaceFamily.extend(String tail)", "testcase": false, "constructor": false}, {"identifier": "parent", "parameters": "()", "modifiers": "@Override public", "return": "WorkspaceFamily", "signature": "WorkspaceFamily parent()", "full_signature": "@Override public WorkspaceFamily parent()", "class_method_signature": "WorkspaceFamily.parent()", "testcase": false, "constructor": false}, {"identifier": "getCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getCount()", "full_signature": "@Override public int getCount()", "class_method_signature": "WorkspaceFamily.getCount()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "WorkspaceFamily.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(WorkspaceFamily that)", "modifiers": "private", "return": "boolean", "signature": "boolean equals(WorkspaceFamily that)", "full_signature": "private boolean equals(WorkspaceFamily that)", "class_method_signature": "WorkspaceFamily.equals(WorkspaceFamily that)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "WorkspaceFamily.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "WorkspaceFamily.toString()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] toArray()", "full_signature": "@Override public String[] toArray()", "class_method_signature": "WorkspaceFamily.toArray()", "testcase": false, "constructor": false}], "file": "demetra-workspace/src/main/java/ec/demetra/workspace/WorkspaceFamily.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int hashCode() {\n        return Arrays.hashCode(data);\n    }", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "WorkspaceFamily.hashCode()", "testcase": false, "constructor": false, "invocations": ["hashCode"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}