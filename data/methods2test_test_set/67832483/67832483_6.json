{"test_class": {"identifier": "DriverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Validator validator;", "modifier": "private static", "type": "Validator", "declarator": "validator", "var_name": "validator"}, {"original_string": "private CurrencyUnit usd = Monetary.getCurrency(Locale.US);", "modifier": "private", "type": "CurrencyUnit", "declarator": "usd = Monetary.getCurrency(Locale.US)", "var_name": "usd"}, {"original_string": "private Car ferrari;", "modifier": "private", "type": "Car", "declarator": "ferrari", "var_name": "ferrari"}], "file": "artemis-demo-java-se/bean-validation/src/test/java/org/jnosql/artemis/demo/se/parking/DriverTest.java"}, "test_case": {"identifier": "shouldReturnErrorWhenDriverEmailIsInvalid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnErrorWhenDriverEmailIsInvalid() {\n\n        Driver driver = Driver.builder().withAge(25)\n                .withCars(Arrays.asList(ferrari))\n                .withEmail(\"emailemail\")\n                .withLicense(true)\n                .withName(\"Speed Racer\").build();\n\n        Set<ConstraintViolation<Driver>> validate = validator.validate(driver);\n        assertFalse(validate.isEmpty());\n        String message = validate.stream().findFirst()\n                .map(ConstraintViolation::getMessageTemplate)\n                .orElse(null);\n        assertEquals(\"Email should be valid\", message);\n    }", "signature": "void shouldReturnErrorWhenDriverEmailIsInvalid()", "full_signature": "@Test public void shouldReturnErrorWhenDriverEmailIsInvalid()", "class_method_signature": "DriverTest.shouldReturnErrorWhenDriverEmailIsInvalid()", "testcase": true, "constructor": false, "invocations": ["build", "withName", "withLicense", "withEmail", "withCars", "withAge", "builder", "asList", "validate", "assertFalse", "isEmpty", "orElse", "map", "findFirst", "stream", "assertEquals"]}, "focal_class": {"identifier": "Driver", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Id\n    @Convert(ObjectIdConverter.class)\n    private String id;", "modifier": "@Id\n    @Convert(ObjectIdConverter.class)\n    private", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "@NotBlank(message = \"Name cannot be null\")\n    @Column\n    private String name;", "modifier": "@NotBlank(message = \"Name cannot be null\")\n    @Column\n    private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "@AssertTrue(message = \"A driver must have a license\")\n    @Column\n    private boolean license;", "modifier": "@AssertTrue(message = \"A driver must have a license\")\n    @Column\n    private", "type": "boolean", "declarator": "license", "var_name": "license"}, {"original_string": "@Min(value = 18, message = \"Age should not be less than 18\")\n    @Max(value = 150, message = \"Age should not be greater than 150\")\n    @Column\n    private int age;", "modifier": "@Min(value = 18, message = \"Age should not be less than 18\")\n    @Max(value = 150, message = \"Age should not be greater than 150\")\n    @Column\n    private", "type": "int", "declarator": "age", "var_name": "age"}, {"original_string": "@Email(message = \"Email should be valid\")\n    @NotNull\n    @Column\n    private String email;", "modifier": "@Email(message = \"Email should be valid\")\n    @NotNull\n    @Column\n    private", "type": "String", "declarator": "email", "var_name": "email"}, {"original_string": "@Size(min = 1, max = 5, message = \"It must have one car at least\")\n    @NotNull\n    @Column\n    private List<Car> cars;", "modifier": "@Size(min = 1, max = 5, message = \"It must have one car at least\")\n    @NotNull\n    @Column\n    private", "type": "List<Car>", "declarator": "cars", "var_name": "cars"}], "methods": [{"identifier": "Driver", "parameters": "()", "modifiers": "@Deprecated", "return": "", "signature": " Driver()", "full_signature": "@Deprecated  Driver()", "class_method_signature": "Driver.Driver()", "testcase": false, "constructor": true}, {"identifier": "Driver", "parameters": "(String name, boolean license, int age, String email, List<Car> cars)", "modifiers": "private", "return": "", "signature": " Driver(String name, boolean license, int age, String email, List<Car> cars)", "full_signature": "private  Driver(String name, boolean license, int age, String email, List<Car> cars)", "class_method_signature": "Driver.Driver(String name, boolean license, int age, String email, List<Car> cars)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(Car car)", "modifiers": "public", "return": "void", "signature": "void add(Car car)", "full_signature": "public void add(Car car)", "class_method_signature": "Driver.add(Car car)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Driver.toString()", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "DriverBuilder", "signature": "DriverBuilder builder()", "full_signature": "public static DriverBuilder builder()", "class_method_signature": "Driver.builder()", "testcase": false, "constructor": false}], "file": "artemis-demo-java-se/bean-validation/src/main/java/org/jnosql/artemis/demo/se/parking/Driver.java"}, "focal_method": {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "DriverBuilder", "body": "public static DriverBuilder builder() {\n        return new DriverBuilder();\n    }", "signature": "DriverBuilder builder()", "full_signature": "public static DriverBuilder builder()", "class_method_signature": "Driver.builder()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 67832483, "url": "https://github.com/JNOSQL/artemis-demo", "stars": 21, "created": "9/9/2016 9:01:24 PM +00:00", "updates": "2020-01-06T09:37:32+00:00", "fork": "False", "license": "licensed"}}