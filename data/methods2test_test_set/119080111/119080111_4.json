{"test_class": {"identifier": "EpsilonMappingAdditiveTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Objective first = new Objective(\"first\", Sign.MAX);", "modifier": "protected static final", "type": "Objective", "declarator": "first = new Objective(\"first\", Sign.MAX)", "var_name": "first"}, {"original_string": "protected static final Objective second = new Objective(\"second\", Sign.MIN);", "modifier": "protected static final", "type": "Objective", "declarator": "second = new Objective(\"second\", Sign.MIN)", "var_name": "second"}], "file": "opt4j-optimizers/src/test/java/org/opt4j/optimizers/ea/aeseh/EpsilonMappingAdditiveTest.java"}, "test_case": {"identifier": "testFindAmplitudes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFindAmplitudes() {\n\t\tSet<Individual> indis = getIndividualSet();\n\t\tEpsilonMappingAdditive epsilonMapping = new EpsilonMappingAdditive();\n\t\tMap<Objective, Double> amplitudeMap = epsilonMapping.findObjectiveAmplitudes(indis);\n\t\tassertTrue(amplitudeMap.containsKey(first));\n\t\tassertTrue(amplitudeMap.containsKey(second));\n\t\tassertEquals(3.0, amplitudeMap.get(first), 0.0);\n\t\tassertEquals(2.0, amplitudeMap.get(second), 0.0);\n\t}", "signature": "void testFindAmplitudes()", "full_signature": "@Test public void testFindAmplitudes()", "class_method_signature": "EpsilonMappingAdditiveTest.testFindAmplitudes()", "testcase": true, "constructor": false, "invocations": ["getIndividualSet", "findObjectiveAmplitudes", "assertTrue", "containsKey", "assertTrue", "containsKey", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "EpsilonMappingAdditive", "superclass": "", "interfaces": "implements EpsilonMapping", "fields": [], "methods": [{"identifier": "mapObjectives", "parameters": "(Objectives original, double epsilon, Map<Objective, Double> objectiveAmplitudes)", "modifiers": "@Override public", "return": "Objectives", "signature": "Objectives mapObjectives(Objectives original, double epsilon, Map<Objective, Double> objectiveAmplitudes)", "full_signature": "@Override public Objectives mapObjectives(Objectives original, double epsilon, Map<Objective, Double> objectiveAmplitudes)", "class_method_signature": "EpsilonMappingAdditive.mapObjectives(Objectives original, double epsilon, Map<Objective, Double> objectiveAmplitudes)", "testcase": false, "constructor": false}, {"identifier": "findObjectiveAmplitudes", "parameters": "(Set<Individual> individuals)", "modifiers": "@Override public", "return": "Map<Objective, Double>", "signature": "Map<Objective, Double> findObjectiveAmplitudes(Set<Individual> individuals)", "full_signature": "@Override public Map<Objective, Double> findObjectiveAmplitudes(Set<Individual> individuals)", "class_method_signature": "EpsilonMappingAdditive.findObjectiveAmplitudes(Set<Individual> individuals)", "testcase": false, "constructor": false}], "file": "opt4j-optimizers/src/main/java/org/opt4j/optimizers/ea/aeseh/EpsilonMappingAdditive.java"}, "focal_method": {"identifier": "findObjectiveAmplitudes", "parameters": "(Set<Individual> individuals)", "modifiers": "@Override public", "return": "Map<Objective, Double>", "body": "@Override\n\tpublic Map<Objective, Double> findObjectiveAmplitudes(Set<Individual> individuals) {\n\t\tMap<Objective, Double> maximumMap = new HashMap<>();\n\t\tMap<Objective, Double> minimumMap = new HashMap<>();\n\t\tMap<Objective, Double> amplitudeMap = new HashMap<>();\n\t\tfor (Individual indi : individuals) {\n\t\t\tObjectives objectives = indi.getObjectives();\n\t\t\tIterator<Objective> iterator = objectives.getKeys().iterator();\n\t\t\tdouble[] values = objectives.array();\n\t\t\tfor (int i = 0; i < objectives.size(); i++) {\n\t\t\t\tObjective obj = iterator.next();\n\t\t\t\tif (objectives.get(obj).getValue() == Objective.INFEASIBLE) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tdouble value = values[i];\n\t\t\t\tif (!maximumMap.containsKey(obj) || maximumMap.get(obj) < value) {\n\t\t\t\t\tmaximumMap.put(obj, value);\n\t\t\t\t}\n\t\t\t\tif (!minimumMap.containsKey(obj) || minimumMap.get(obj) > value) {\n\t\t\t\t\tminimumMap.put(obj, value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (Entry<Objective, Double> maxEntry : maximumMap.entrySet()) {\n\t\t\tObjective obj = maxEntry.getKey();\n\t\t\tDouble maximum = maxEntry.getValue();\n\t\t\tDouble minimum = minimumMap.get(obj);\n\t\t\tamplitudeMap.put(obj, maximum - minimum);\n\t\t}\n\t\treturn amplitudeMap;\n\t}", "signature": "Map<Objective, Double> findObjectiveAmplitudes(Set<Individual> individuals)", "full_signature": "@Override public Map<Objective, Double> findObjectiveAmplitudes(Set<Individual> individuals)", "class_method_signature": "EpsilonMappingAdditive.findObjectiveAmplitudes(Set<Individual> individuals)", "testcase": false, "constructor": false, "invocations": ["getObjectives", "iterator", "getKeys", "array", "size", "next", "getValue", "get", "containsKey", "get", "put", "containsKey", "get", "put", "entrySet", "getKey", "getValue", "get", "put"]}, "repository": {"repo_id": 119080111, "url": "https://github.com/felixreimann/opt4j", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 11, "size": 8771, "license": "licensed"}}