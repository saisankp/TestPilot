{"test_class": {"identifier": "SignatureFingerprinterTest", "superclass": "extends AbstractFingerprinterTest", "interfaces": "", "fields": [], "file": "descriptor/signature/src/test/java/org/openscience/cdk/fingerprint/SignatureFingerprinterTest.java"}, "test_case": {"identifier": "testGetRawFingerprint", "parameters": "()", "modifiers": "@Test @Override public", "return": "void", "body": "@Test\n    @Override\n    public void testGetRawFingerprint() throws Exception {\n        SignatureFingerprinter fingerprinter = new SignatureFingerprinter(0);\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(\"O(NC)CC\");\n        Map<String, Integer> map = fingerprinter.getRawFingerprint(mol);\n        Assert.assertEquals(3, map.size());\n        String[] expectedPrints = {\"[O]\", \"[C]\", \"[N]\"};\n        for (String print : expectedPrints) {\n            Assert.assertTrue(map.containsKey(print));\n        }\n    }", "signature": "void testGetRawFingerprint()", "full_signature": "@Test @Override public void testGetRawFingerprint()", "class_method_signature": "SignatureFingerprinterTest.testGetRawFingerprint()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "getRawFingerprint", "assertEquals", "size", "assertTrue", "containsKey"]}, "focal_class": {"identifier": "SignatureFingerprinter", "superclass": "extends AbstractFingerprinter", "interfaces": "implements IFingerprinter", "fields": [{"original_string": "private int signatureDepth;", "modifier": "private", "type": "int", "declarator": "signatureDepth", "var_name": "signatureDepth"}], "methods": [{"identifier": "SignatureFingerprinter", "parameters": "()", "modifiers": "public", "return": "", "signature": " SignatureFingerprinter()", "full_signature": "public  SignatureFingerprinter()", "class_method_signature": "SignatureFingerprinter.SignatureFingerprinter()", "testcase": false, "constructor": true}, {"identifier": "SignatureFingerprinter", "parameters": "(int depth)", "modifiers": "public", "return": "", "signature": " SignatureFingerprinter(int depth)", "full_signature": "public  SignatureFingerprinter(int depth)", "class_method_signature": "SignatureFingerprinter.SignatureFingerprinter(int depth)", "testcase": false, "constructor": true}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override protected", "return": "List<Map.Entry<String, String>>", "signature": "List<Map.Entry<String, String>> getParameters()", "full_signature": "@Override protected List<Map.Entry<String, String>> getParameters()", "class_method_signature": "SignatureFingerprinter.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getBitFingerprint", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "IBitFingerprint", "signature": "IBitFingerprint getBitFingerprint(IAtomContainer atomContainer)", "full_signature": "@Override public IBitFingerprint getBitFingerprint(IAtomContainer atomContainer)", "class_method_signature": "SignatureFingerprinter.getBitFingerprint(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getRawFingerprint", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "Map<String, Integer>", "signature": "Map<String, Integer> getRawFingerprint(IAtomContainer atomContainer)", "full_signature": "@Override public Map<String, Integer> getRawFingerprint(IAtomContainer atomContainer)", "class_method_signature": "SignatureFingerprinter.getRawFingerprint(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSize()", "full_signature": "@Override public int getSize()", "class_method_signature": "SignatureFingerprinter.getSize()", "testcase": false, "constructor": false}, {"identifier": "getCountFingerprint", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "ICountFingerprint", "signature": "ICountFingerprint getCountFingerprint(IAtomContainer container)", "full_signature": "@Override public ICountFingerprint getCountFingerprint(IAtomContainer container)", "class_method_signature": "SignatureFingerprinter.getCountFingerprint(IAtomContainer container)", "testcase": false, "constructor": false}], "file": "descriptor/signature/src/main/java/org/openscience/cdk/fingerprint/SignatureFingerprinter.java"}, "focal_method": {"identifier": "getRawFingerprint", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "Map<String, Integer>", "body": "@Override\n    public Map<String, Integer> getRawFingerprint(IAtomContainer atomContainer) throws CDKException {\n        Map<String, Integer> map = new HashMap<String, Integer>();\n        for (IAtom atom : atomContainer.atoms()) {\n            String signature = new AtomSignature(atom, signatureDepth, atomContainer).toCanonicalString();\n            if (map.containsKey(signature)) {\n                map.put(signature, map.get(signature) + 1);\n            } else {\n                map.put(signature, 1);\n            }\n        }\n        return map;\n    }", "signature": "Map<String, Integer> getRawFingerprint(IAtomContainer atomContainer)", "full_signature": "@Override public Map<String, Integer> getRawFingerprint(IAtomContainer atomContainer)", "class_method_signature": "SignatureFingerprinter.getRawFingerprint(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["atoms", "toCanonicalString", "containsKey", "put", "get", "put"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}