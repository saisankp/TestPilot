{"test_class": {"identifier": "ClassUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CodecUtilsTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CodecUtilsTest.class)", "var_name": "LOGGER"}, {"original_string": "private static ClassLoader loader;", "modifier": "private static", "type": "ClassLoader", "declarator": "loader", "var_name": "loader"}], "file": "core/common/src/test/java/com/alipay/sofa/rpc/common/utils/ClassUtilsTest.java"}, "test_case": {"identifier": "getAllFields", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getAllFields() throws Exception {\n        List<Field> fields = ClassUtils.getAllFields(TestBean.class);\n        Assert.assertEquals(fields.size(), 4);\n    }", "signature": "void getAllFields()", "full_signature": "@Test public void getAllFields()", "class_method_signature": "ClassUtilsTest.getAllFields()", "testcase": true, "constructor": false, "invocations": ["getAllFields", "assertEquals", "size"]}, "focal_class": {"identifier": "ClassUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "forName", "parameters": "(String className)", "modifiers": "public static", "return": "Class", "signature": "Class forName(String className)", "full_signature": "public static Class forName(String className)", "class_method_signature": "ClassUtils.forName(String className)", "testcase": false, "constructor": false}, {"identifier": "forName", "parameters": "(String className, boolean initialize)", "modifiers": "public static", "return": "Class", "signature": "Class forName(String className, boolean initialize)", "full_signature": "public static Class forName(String className, boolean initialize)", "class_method_signature": "ClassUtils.forName(String className, boolean initialize)", "testcase": false, "constructor": false}, {"identifier": "forName", "parameters": "(String className, ClassLoader cl)", "modifiers": "public static", "return": "Class", "signature": "Class forName(String className, ClassLoader cl)", "full_signature": "public static Class forName(String className, ClassLoader cl)", "class_method_signature": "ClassUtils.forName(String className, ClassLoader cl)", "testcase": false, "constructor": false}, {"identifier": "getAllMethods", "parameters": "(Class clazz)", "modifiers": "public static", "return": "List<Method>", "signature": "List<Method> getAllMethods(Class clazz)", "full_signature": "public static List<Method> getAllMethods(Class clazz)", "class_method_signature": "ClassUtils.getAllMethods(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "getAllFields", "parameters": "(Class clazz)", "modifiers": "public static", "return": "List<Field>", "signature": "List<Field> getAllFields(Class clazz)", "full_signature": "public static List<Field> getAllFields(Class clazz)", "class_method_signature": "ClassUtils.getAllFields(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T newInstance(Class<T> clazz)", "full_signature": "public static T newInstance(Class<T> clazz)", "class_method_signature": "ClassUtils.newInstance(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "newInstanceWithArgs", "parameters": "(Class<T> clazz, Class<?>[] argTypes, Object[] args)", "modifiers": "public static", "return": "T", "signature": "T newInstanceWithArgs(Class<T> clazz, Class<?>[] argTypes, Object[] args)", "full_signature": "public static T newInstanceWithArgs(Class<T> clazz, Class<?>[] argTypes, Object[] args)", "class_method_signature": "ClassUtils.newInstanceWithArgs(Class<T> clazz, Class<?>[] argTypes, Object[] args)", "testcase": false, "constructor": false}, {"identifier": "getDefaultPrimitiveValue", "parameters": "(Class clazz)", "modifiers": "public static", "return": "Object", "signature": "Object getDefaultPrimitiveValue(Class clazz)", "full_signature": "public static Object getDefaultPrimitiveValue(Class clazz)", "class_method_signature": "ClassUtils.getDefaultPrimitiveValue(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "getDefaultWrapperValue", "parameters": "(Class<T> clazz)", "modifiers": "public static", "return": "T", "signature": "T getDefaultWrapperValue(Class<T> clazz)", "full_signature": "public static T getDefaultWrapperValue(Class<T> clazz)", "class_method_signature": "ClassUtils.getDefaultWrapperValue(Class<T> clazz)", "testcase": false, "constructor": false}, {"identifier": "getMethodKey", "parameters": "(String interfaceName, String methodName)", "modifiers": "public static", "return": "String", "signature": "String getMethodKey(String interfaceName, String methodName)", "full_signature": "public static String getMethodKey(String interfaceName, String methodName)", "class_method_signature": "ClassUtils.getMethodKey(String interfaceName, String methodName)", "testcase": false, "constructor": false}, {"identifier": "isAssignableFrom", "parameters": "(Class<?> interfaceClass, Class<?> implementClass)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAssignableFrom(Class<?> interfaceClass, Class<?> implementClass)", "full_signature": "public static boolean isAssignableFrom(Class<?> interfaceClass, Class<?> implementClass)", "class_method_signature": "ClassUtils.isAssignableFrom(Class<?> interfaceClass, Class<?> implementClass)", "testcase": false, "constructor": false}, {"identifier": "isImplementOrSubclass", "parameters": "(String interfaceName, Class<?> implementClass)", "modifiers": "private static", "return": "boolean", "signature": "boolean isImplementOrSubclass(String interfaceName, Class<?> implementClass)", "full_signature": "private static boolean isImplementOrSubclass(String interfaceName, Class<?> implementClass)", "class_method_signature": "ClassUtils.isImplementOrSubclass(String interfaceName, Class<?> implementClass)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/com/alipay/sofa/rpc/common/utils/ClassUtils.java"}, "focal_method": {"identifier": "getAllFields", "parameters": "(Class clazz)", "modifiers": "public static", "return": "List<Field>", "body": "public static List<Field> getAllFields(Class clazz) {\n        List<Field> all = new ArrayList<Field>();\n        for (Class<?> c = clazz; c != Object.class && c != null; c = c.getSuperclass()) {\n            Field[] fields = c.getDeclaredFields(); // \u6240\u6709\u65b9\u6cd5\uff0c\u4e0d\u5305\u542b\u7236\u7c7b\n            for (Field field : fields) {\n                int mod = field.getModifiers();\n                // \u8fc7\u6ee4static \u548c transient\uff0c\u652f\u6301final\n                if (Modifier.isStatic(mod) || Modifier.isTransient(mod)) {\n                    continue;\n                }\n                field.setAccessible(true); // \u4e0d\u7ba1private\u8fd8\u662fprotect\u90fd\u53ef\u4ee5\n                all.add(field);\n            }\n        }\n        return all;\n    }", "signature": "List<Field> getAllFields(Class clazz)", "full_signature": "public static List<Field> getAllFields(Class clazz)", "class_method_signature": "ClassUtils.getAllFields(Class clazz)", "testcase": false, "constructor": false, "invocations": ["getSuperclass", "getDeclaredFields", "getModifiers", "isStatic", "isTransient", "setAccessible", "add"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}