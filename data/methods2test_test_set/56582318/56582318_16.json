{"test_class": {"identifier": "ColorimetricColorTest", "superclass": "extends ColorimetryAssert", "interfaces": "", "fields": [{"original_string": "private Logger logger = Logger.getLogger(ColorimetricColorTest.class);", "modifier": "private", "type": "Logger", "declarator": "logger = Logger.getLogger(ColorimetricColorTest.class)", "var_name": "logger"}, {"original_string": "private ColorimetricColor defaultColorimetric;", "modifier": "private", "type": "ColorimetricColor", "declarator": "defaultColorimetric", "var_name": "defaultColorimetric"}], "file": "geoxygene-style/src/test/java/fr/ign/cogit/geoxygene/style/colorimetry/ColorimetricColorTest.java"}, "test_case": {"identifier": "testColorimetricColorStringInt", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n  public final void testColorimetricColorStringInt() {\n    logger.info(\"--------------------------------------------------------------------------------------------------------------\");\n    logger.info(\"Test method ColorimetricColor(String, int)\");\n    \n    // =====================================================\n    logger.info(\"  Test 1 : setting of all the attributes\");\n    \n    //\n    ColorimetricColor cResult = new ColorimetricColor(\"Rouge\", 0); //$NON-NLS-1$\n    \n    ColorimetricColor cExpected = new ColorimetricColor();\n    cExpected.idColor = 57;\n    cExpected.hue = \"ROUGE\";\n    cExpected.lightness = 1;\n    cExpected.usualName = \"ROUGE TRES CLAIR\";\n    cExpected.cleCoul = \"R1\";\n    cExpected.redRGB = 254;\n    cExpected.greenRGB = 230;\n    cExpected.blueRGB = 219;\n    cExpected.xScreen = 164;\n    cExpected.yScreen = 164;\n    \n    compareColorimetricColor(cResult, cExpected);\n    \n    // =====================================================\n    logger.info(\"  Test 2 :  with a non existing color : abcdef \");\n    cResult = new ColorimetricColor(\"abcdef\", 1); //$NON-NLS-1$\n    cExpected = defaultColorimetric;\n    compareColorimetricColor(cResult, cExpected);\n    \n    // =====================================================\n    logger.info(\"  Test 3 :  with a non existing lightness : 2012841\");\n    cResult = new ColorimetricColor(\"Rouge\", 2012841); //$NON-NLS-1$\n    cExpected = defaultColorimetric;\n    compareColorimetricColor(cResult, cExpected);\n    \n    // =====================================================\n    logger.info(\"  Test 4 : different existing combination of hue and lightness\");\n    \n    // Then, Test of the different combination of hue and lightness\n    // In the three first wheels where lightness range from 1 to 7\n    // 0 and 8 are allowed and setted respectively as 1 and 7\n    logger.info(\"  Test 4.1 :  Rouge, Lightness = 0 => R1\");\n    cResult = new ColorimetricColor(\"Rouge\", 0); //$NON-NLS-1$\n    assertEquals(\"R1\", cResult.getCleCoul()); //$NON-NLS-1$\n    \n    logger.info(\"  Test 4.2 :  Rouge, Lightness = 1 => R1\");\n    cResult = new ColorimetricColor(\"Rouge\", 1); //$NON-NLS-1$\n    assertEquals(\"R1\", cResult.getCleCoul()); //$NON-NLS-1$\n    \n    logger.info(\"  Test 4.3 :  Rouge, Lightness = 5 => R5\");\n    cResult = new ColorimetricColor(\"Rouge\", 5); //$NON-NLS-1$\n    assertEquals(\"R5\", cResult.getCleCoul()); //$NON-NLS-1$\n    \n    logger.info(\"  Test 4.4 :  Rouge, Lightness = 7 => R7\");\n    cResult = new ColorimetricColor(\"Rouge\", 7); //$NON-NLS-1$\n    assertEquals(\"R7\", cResult.getCleCoul()); //$NON-NLS-1$\n    \n    logger.info(\"  Test 4.5 :  Rouge, Lightness = 8 => R8\");\n    cResult = new ColorimetricColor(\"Rouge\", 8); //$NON-NLS-1$\n    assertEquals(\"R7\", cResult.getCleCoul()); //$NON-NLS-1$\n    \n    // Finally, test of the different allowed hue for white, grey and black.\n    logger.info(\"  Test 4.6 :  Gris, Lightness = 0 => Bl0\");\n    cResult = new ColorimetricColor(\"Gris\", 0); //$NON-NLS-1$\n    assertEquals(\"Bl0\", cResult.getCleCoul()); //$NON-NLS-1$\n    compareColorimetricColor(cResult, new ColorimetricColor(85));\n    \n    logger.info(\"  Test 4.7 :  Gris, Lightness = 1 => G1\");\n    cResult = new ColorimetricColor(\"Gris\", 1); //$NON-NLS-1$\n    assertEquals(\"G1\", cResult.getCleCoul()); //$NON-NLS-1$\n    \n    logger.info(\"  Test 4.8 :  Gris, Lightness = 5 => G5\");\n    cResult = new ColorimetricColor(\"Gris\", 5); //$NON-NLS-1$\n    assertEquals(\"G5\", cResult.getCleCoul()); //$NON-NLS-1$\n    \n    logger.info(\"  Test 4.9 :  Gris, Lightness = 7 => G7\");\n    cResult = new ColorimetricColor(\"Gris\", 7); //$NON-NLS-1$\n    assertEquals(\"G7\", cResult.getCleCoul()); //$NON-NLS-1$\n    \n    logger.info(\"  Test 4.10 :  Gris, Lightness = 8 => N8\");\n    cResult = new ColorimetricColor(\"Gris\", 8); //$NON-NLS-1$\n    assertEquals(\"N8\", cResult.getCleCoul()); //$NON-NLS-1$\n    compareColorimetricColor(cResult, new ColorimetricColor(86));\n    \n    logger.info(\"  Test 4.11 :  Noir, Lightness = 0 => Bl0\");\n    cResult = new ColorimetricColor(\"Noir\", 0); //$NON-NLS-1$\n    assertEquals(\"Bl0\", cResult.getCleCoul()); //$NON-NLS-1$\n    compareColorimetricColor(cResult, new ColorimetricColor(85));\n    \n    logger.info(\"  Test 4.12 :  Noir, Lightness = 1 => G1\");\n    cResult = new ColorimetricColor(\"Noir\", 1); //$NON-NLS-1$\n    assertEquals(\"G1\", cResult.getCleCoul()); //$NON-NLS-1$\n    \n    logger.info(\"  Test 4.13 :  Noir, Lightness = 7 => G7\");\n    cResult = new ColorimetricColor(\"Noir\", 7); //$NON-NLS-1$\n    assertEquals(\"G7\", cResult.getCleCoul()); //$NON-NLS-1$\n    \n    logger.info(\"  Test 4.14 :  Noir, Lightness = 8 => N8\");\n    cResult = new ColorimetricColor(\"Noir\", 8); //$NON-NLS-1$\n    assertEquals(\"N8\", cResult.getCleCoul()); //$NON-NLS-1$\n    \n    logger.info(\"  Test 4.15 :  Blanc, Lightness = 0 => Bl0\");\n    cResult = new ColorimetricColor(\"Blanc\", 0); //$NON-NLS-1$\n    assertEquals(\"Bl0\", cResult.getCleCoul()); //$NON-NLS-1$\n    \n    logger.info(\"  Test 4.16 :  Blanc, Lightness = 1 => G1\");\n    cResult = new ColorimetricColor(\"Blanc\", 1); //$NON-NLS-1$\n    assertEquals(\"G1\", cResult.getCleCoul()); //$NON-NLS-1$\n    \n    logger.info(\"  Test 4.17 :  Blanc, Lightness = 7 => G7\");\n    cResult = new ColorimetricColor(\"Blanc\", 7); //$NON-NLS-1$\n    assertEquals(\"G7\", cResult.getCleCoul()); //$NON-NLS-1$\n    \n    logger.info(\"  Test 4.18 :  Blanc, Lightness = 8 => N8\");\n    cResult = new ColorimetricColor(\"Blanc\", 8); //$NON-NLS-1$\n    assertEquals(\"N8\", cResult.getCleCoul()); //$NON-NLS-1$\n    compareColorimetricColor(cResult, new ColorimetricColor(86));\n    \n    // =====================================================\n    logger.info(\"  Test 5 : different non existing combination of hue and lightness\");\n    \n    logger.info(\"  Test 5.1 :  Rouge, Lightness = 9 => Default ColorimetricColor\");\n    cResult = new ColorimetricColor(\"Rouge\", 9); //$NON-NLS-1$\n    compareColorimetricColor(cResult, defaultColorimetric);\n    \n    logger.info(\"  Test 5.2 :  Gris, Lightness = 9 => Default ColorimetricColor\");\n    cResult = new ColorimetricColor(\"Gris\", 9); //$NON-NLS-1$\n    compareColorimetricColor(cResult, defaultColorimetric);\n    \n    logger.info(\"  Test 5.3 :  Noir, Lightness = 88888 => Default ColorimetricColor\");\n    cResult = new ColorimetricColor(\"Noir\", 88888); //$NON-NLS-1$\n    compareColorimetricColor(cResult, defaultColorimetric);\n    \n    logger.info(\"  Test 5.5 :  Blanc, Lightness = 9 => Default ColorimetricColor\");\n    cResult = new ColorimetricColor(\"Blanc\", 9); //$NON-NLS-1$\n    compareColorimetricColor(cResult, defaultColorimetric);\n    \n    logger.info(\"  Test 5.6 :  Mauve, Lightness = 5 => Default ColorimetricColor\");\n    cResult = new ColorimetricColor(\"Mauve\", 5); //$NON-NLS-1$\n    compareColorimetricColor(cResult, defaultColorimetric);\n    \n    // =====================================================\n    logger.info(\"  Test 6 : 2 particular combination of hue and lightness (calling constructor twice)\");\n    \n    logger.info(\"  Test 6.1 :  Noir, Lightness = 8 => Default ColorimetricColor\");\n    cResult = new ColorimetricColor(\"Noir\", 8); //$NON-NLS-1$\n    cExpected = new ColorimetricColor(\"Gris\", 8); //$NON-NLS-1$\n    compareColorimetricColor(cResult, cExpected);\n    compareColorimetricColor(cResult, new ColorimetricColor(86));\n    \n    logger.info(\"  Test 6.2 :  Blanc, Lightness = 0 => Default ColorimetricColor\");\n    cResult = new ColorimetricColor(\"Blanc\", 0); //$NON-NLS-1$\n    cExpected = new ColorimetricColor(\"Gris\", 0); //$NON-NLS-1$\n    compareColorimetricColor(cResult, cExpected);\n    compareColorimetricColor(cResult, new ColorimetricColor(85));\n    \n    // =====================================================\n    logger.info(\"  Test 7 :  with a non existing lightness : null\");\n    cResult = new ColorimetricColor(null, 2012841); //$NON-NLS-1$\n    cExpected = defaultColorimetric;\n    compareColorimetricColor(cResult, cExpected);\n  }", "signature": "void testColorimetricColorStringInt()", "full_signature": "@Test public final void testColorimetricColorStringInt()", "class_method_signature": "ColorimetricColorTest.testColorimetricColorStringInt()", "testcase": true, "constructor": false, "invocations": ["info", "info", "info", "compareColorimetricColor", "info", "compareColorimetricColor", "info", "compareColorimetricColor", "info", "info", "assertEquals", "getCleCoul", "info", "assertEquals", "getCleCoul", "info", "assertEquals", "getCleCoul", "info", "assertEquals", "getCleCoul", "info", "assertEquals", "getCleCoul", "info", "assertEquals", "getCleCoul", "compareColorimetricColor", "info", "assertEquals", "getCleCoul", "info", "assertEquals", "getCleCoul", "info", "assertEquals", "getCleCoul", "info", "assertEquals", "getCleCoul", "compareColorimetricColor", "info", "assertEquals", "getCleCoul", "compareColorimetricColor", "info", "assertEquals", "getCleCoul", "info", "assertEquals", "getCleCoul", "info", "assertEquals", "getCleCoul", "info", "assertEquals", "getCleCoul", "info", "assertEquals", "getCleCoul", "info", "assertEquals", "getCleCoul", "info", "assertEquals", "getCleCoul", "compareColorimetricColor", "info", "info", "compareColorimetricColor", "info", "compareColorimetricColor", "info", "compareColorimetricColor", "info", "compareColorimetricColor", "info", "compareColorimetricColor", "info", "info", "compareColorimetricColor", "compareColorimetricColor", "info", "compareColorimetricColor", "compareColorimetricColor", "info", "compareColorimetricColor"]}, "focal_class": {"identifier": "ColorimetricColor", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Logger logger = Logger.getLogger(ColorimetricColor.class);", "modifier": "static", "type": "Logger", "declarator": "logger = Logger.getLogger(ColorimetricColor.class)", "var_name": "logger"}, {"original_string": "@XmlElement(name = \"IdColor\")\n  protected int idColor;", "modifier": "@XmlElement(name = \"IdColor\")\n  protected", "type": "int", "declarator": "idColor", "var_name": "idColor"}, {"original_string": "@XmlElement(name = \"Hue\")\n  protected String hue;", "modifier": "@XmlElement(name = \"Hue\")\n  protected", "type": "String", "declarator": "hue", "var_name": "hue"}, {"original_string": "@XmlElement(name = \"Lightness\")\n  protected int lightness;", "modifier": "@XmlElement(name = \"Lightness\")\n  protected", "type": "int", "declarator": "lightness", "var_name": "lightness"}, {"original_string": "@XmlElement(name = \"UsualName\")\n  protected String usualName;", "modifier": "@XmlElement(name = \"UsualName\")\n  protected", "type": "String", "declarator": "usualName", "var_name": "usualName"}, {"original_string": "@XmlElement(name = \"CleCoul\")\n  protected String cleCoul;", "modifier": "@XmlElement(name = \"CleCoul\")\n  protected", "type": "String", "declarator": "cleCoul", "var_name": "cleCoul"}, {"original_string": "@XmlElement(name = \"redRGB\")\n  protected int redRGB;", "modifier": "@XmlElement(name = \"redRGB\")\n  protected", "type": "int", "declarator": "redRGB", "var_name": "redRGB"}, {"original_string": "@XmlElement(name = \"greenRGB\")\n  protected int greenRGB;", "modifier": "@XmlElement(name = \"greenRGB\")\n  protected", "type": "int", "declarator": "greenRGB", "var_name": "greenRGB"}, {"original_string": "@XmlElement(name = \"blueRGB\")\n  protected int blueRGB;", "modifier": "@XmlElement(name = \"blueRGB\")\n  protected", "type": "int", "declarator": "blueRGB", "var_name": "blueRGB"}, {"original_string": "@XmlElement(name = \"xScreen\")\n  protected int xScreen;", "modifier": "@XmlElement(name = \"xScreen\")\n  protected", "type": "int", "declarator": "xScreen", "var_name": "xScreen"}, {"original_string": "@XmlElement(name = \"yScreen\")\n  protected int yScreen;", "modifier": "@XmlElement(name = \"yScreen\")\n  protected", "type": "int", "declarator": "yScreen", "var_name": "yScreen"}], "methods": [{"identifier": "getIdColor", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getIdColor()", "full_signature": "public int getIdColor()", "class_method_signature": "ColorimetricColor.getIdColor()", "testcase": false, "constructor": false}, {"identifier": "setIdColor", "parameters": "(int id)", "modifiers": "public", "return": "void", "signature": "void setIdColor(int id)", "full_signature": "public void setIdColor(int id)", "class_method_signature": "ColorimetricColor.setIdColor(int id)", "testcase": false, "constructor": false}, {"identifier": "getHue", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHue()", "full_signature": "public String getHue()", "class_method_signature": "ColorimetricColor.getHue()", "testcase": false, "constructor": false}, {"identifier": "setHue", "parameters": "(String hue)", "modifiers": "public", "return": "void", "signature": "void setHue(String hue)", "full_signature": "public void setHue(String hue)", "class_method_signature": "ColorimetricColor.setHue(String hue)", "testcase": false, "constructor": false}, {"identifier": "getSlice", "parameters": "(ColorReferenceSystem crs)", "modifiers": "public", "return": "ColorSlice", "signature": "ColorSlice getSlice(ColorReferenceSystem crs)", "full_signature": "public ColorSlice getSlice(ColorReferenceSystem crs)", "class_method_signature": "ColorimetricColor.getSlice(ColorReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "getWheel", "parameters": "(ColorReferenceSystem crs)", "modifiers": "public", "return": "ColorWheel", "signature": "ColorWheel getWheel(ColorReferenceSystem crs)", "full_signature": "public ColorWheel getWheel(ColorReferenceSystem crs)", "class_method_signature": "ColorimetricColor.getWheel(ColorReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "getLightness", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLightness()", "full_signature": "public int getLightness()", "class_method_signature": "ColorimetricColor.getLightness()", "testcase": false, "constructor": false}, {"identifier": "setLightness", "parameters": "(int lightness)", "modifiers": "public", "return": "void", "signature": "void setLightness(int lightness)", "full_signature": "public void setLightness(int lightness)", "class_method_signature": "ColorimetricColor.setLightness(int lightness)", "testcase": false, "constructor": false}, {"identifier": "setSaturation", "parameters": "(int saturation)", "modifiers": "public", "return": "void", "signature": "void setSaturation(int saturation)", "full_signature": "public void setSaturation(int saturation)", "class_method_signature": "ColorimetricColor.setSaturation(int saturation)", "testcase": false, "constructor": false}, {"identifier": "getUsualName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUsualName()", "full_signature": "public String getUsualName()", "class_method_signature": "ColorimetricColor.getUsualName()", "testcase": false, "constructor": false}, {"identifier": "setUsualName", "parameters": "(String usualName)", "modifiers": "public", "return": "void", "signature": "void setUsualName(String usualName)", "full_signature": "public void setUsualName(String usualName)", "class_method_signature": "ColorimetricColor.setUsualName(String usualName)", "testcase": false, "constructor": false}, {"identifier": "getCleCoul", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCleCoul()", "full_signature": "public String getCleCoul()", "class_method_signature": "ColorimetricColor.getCleCoul()", "testcase": false, "constructor": false}, {"identifier": "setCleCoul", "parameters": "(String cleCoul)", "modifiers": "public", "return": "void", "signature": "void setCleCoul(String cleCoul)", "full_signature": "public void setCleCoul(String cleCoul)", "class_method_signature": "ColorimetricColor.setCleCoul(String cleCoul)", "testcase": false, "constructor": false}, {"identifier": "getRedRGB", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRedRGB()", "full_signature": "public int getRedRGB()", "class_method_signature": "ColorimetricColor.getRedRGB()", "testcase": false, "constructor": false}, {"identifier": "setRedRGB", "parameters": "(int redRGB)", "modifiers": "public", "return": "void", "signature": "void setRedRGB(int redRGB)", "full_signature": "public void setRedRGB(int redRGB)", "class_method_signature": "ColorimetricColor.setRedRGB(int redRGB)", "testcase": false, "constructor": false}, {"identifier": "getGreenRGB", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getGreenRGB()", "full_signature": "public int getGreenRGB()", "class_method_signature": "ColorimetricColor.getGreenRGB()", "testcase": false, "constructor": false}, {"identifier": "setGreenRGB", "parameters": "(int greenRGB)", "modifiers": "public", "return": "void", "signature": "void setGreenRGB(int greenRGB)", "full_signature": "public void setGreenRGB(int greenRGB)", "class_method_signature": "ColorimetricColor.setGreenRGB(int greenRGB)", "testcase": false, "constructor": false}, {"identifier": "getBlueRGB", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBlueRGB()", "full_signature": "public int getBlueRGB()", "class_method_signature": "ColorimetricColor.getBlueRGB()", "testcase": false, "constructor": false}, {"identifier": "setBlueRGB", "parameters": "(int blueRGB)", "modifiers": "public", "return": "void", "signature": "void setBlueRGB(int blueRGB)", "full_signature": "public void setBlueRGB(int blueRGB)", "class_method_signature": "ColorimetricColor.setBlueRGB(int blueRGB)", "testcase": false, "constructor": false}, {"identifier": "getXScreen", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getXScreen()", "full_signature": "public int getXScreen()", "class_method_signature": "ColorimetricColor.getXScreen()", "testcase": false, "constructor": false}, {"identifier": "setXScreen", "parameters": "(int x)", "modifiers": "public", "return": "void", "signature": "void setXScreen(int x)", "full_signature": "public void setXScreen(int x)", "class_method_signature": "ColorimetricColor.setXScreen(int x)", "testcase": false, "constructor": false}, {"identifier": "getYScreen", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getYScreen()", "full_signature": "public int getYScreen()", "class_method_signature": "ColorimetricColor.getYScreen()", "testcase": false, "constructor": false}, {"identifier": "setYScreen", "parameters": "(int y)", "modifiers": "public", "return": "void", "signature": "void setYScreen(int y)", "full_signature": "public void setYScreen(int y)", "class_method_signature": "ColorimetricColor.setYScreen(int y)", "testcase": false, "constructor": false}, {"identifier": "ColorimetricColor", "parameters": "()", "modifiers": "public", "return": "", "signature": " ColorimetricColor()", "full_signature": "public  ColorimetricColor()", "class_method_signature": "ColorimetricColor.ColorimetricColor()", "testcase": false, "constructor": true}, {"identifier": "ColorimetricColor", "parameters": "(int idColor)", "modifiers": "public", "return": "", "signature": " ColorimetricColor(int idColor)", "full_signature": "public  ColorimetricColor(int idColor)", "class_method_signature": "ColorimetricColor.ColorimetricColor(int idColor)", "testcase": false, "constructor": true}, {"identifier": "ColorimetricColor", "parameters": "(String hue, int lightness)", "modifiers": "public", "return": "", "signature": " ColorimetricColor(String hue, int lightness)", "full_signature": "public  ColorimetricColor(String hue, int lightness)", "class_method_signature": "ColorimetricColor.ColorimetricColor(String hue, int lightness)", "testcase": false, "constructor": true}, {"identifier": "ColorimetricColor", "parameters": "(String usualName)", "modifiers": "public", "return": "", "signature": " ColorimetricColor(String usualName)", "full_signature": "public  ColorimetricColor(String usualName)", "class_method_signature": "ColorimetricColor.ColorimetricColor(String usualName)", "testcase": false, "constructor": true}, {"identifier": "ColorimetricColor", "parameters": "(int r, int g, int b)", "modifiers": "public", "return": "", "signature": " ColorimetricColor(int r, int g, int b)", "full_signature": "public  ColorimetricColor(int r, int g, int b)", "class_method_signature": "ColorimetricColor.ColorimetricColor(int r, int g, int b)", "testcase": false, "constructor": true}, {"identifier": "ColorimetricColor", "parameters": "(int r, int g, int b, boolean reference)", "modifiers": "public", "return": "", "signature": " ColorimetricColor(int r, int g, int b, boolean reference)", "full_signature": "public  ColorimetricColor(int r, int g, int b, boolean reference)", "class_method_signature": "ColorimetricColor.ColorimetricColor(int r, int g, int b, boolean reference)", "testcase": false, "constructor": true}, {"identifier": "ColorimetricColor", "parameters": "(Color c)", "modifiers": "public", "return": "", "signature": " ColorimetricColor(Color c)", "full_signature": "public  ColorimetricColor(Color c)", "class_method_signature": "ColorimetricColor.ColorimetricColor(Color c)", "testcase": false, "constructor": true}, {"identifier": "ColorimetricColor", "parameters": "(Color c, boolean reference)", "modifiers": "public", "return": "", "signature": " ColorimetricColor(Color c, boolean reference)", "full_signature": "public  ColorimetricColor(Color c, boolean reference)", "class_method_signature": "ColorimetricColor.ColorimetricColor(Color c, boolean reference)", "testcase": false, "constructor": true}, {"identifier": "toColor", "parameters": "()", "modifiers": "public", "return": "Color", "signature": "Color toColor()", "full_signature": "public Color toColor()", "class_method_signature": "ColorimetricColor.toColor()", "testcase": false, "constructor": false}, {"identifier": "toXYZ", "parameters": "()", "modifiers": "public", "return": "float[]", "signature": "float[] toXYZ()", "full_signature": "public float[] toXYZ()", "class_method_signature": "ColorimetricColor.toXYZ()", "testcase": false, "constructor": false}, {"identifier": "toXYZ", "parameters": "(float[] lab)", "modifiers": "public static", "return": "float[]", "signature": "float[] toXYZ(float[] lab)", "full_signature": "public static float[] toXYZ(float[] lab)", "class_method_signature": "ColorimetricColor.toXYZ(float[] lab)", "testcase": false, "constructor": false}, {"identifier": "getLab", "parameters": "()", "modifiers": "public", "return": "float[]", "signature": "float[] getLab()", "full_signature": "public float[] getLab()", "class_method_signature": "ColorimetricColor.getLab()", "testcase": false, "constructor": false}, {"identifier": "f", "parameters": "(float t)", "modifiers": "public static", "return": "float", "signature": "float f(float t)", "full_signature": "public static float f(float t)", "class_method_signature": "ColorimetricColor.f(float t)", "testcase": false, "constructor": false}, {"identifier": "getCIELabL", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getCIELabL()", "full_signature": "public float getCIELabL()", "class_method_signature": "ColorimetricColor.getCIELabL()", "testcase": false, "constructor": false}, {"identifier": "getCIELabA", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getCIELabA()", "full_signature": "public float getCIELabA()", "class_method_signature": "ColorimetricColor.getCIELabA()", "testcase": false, "constructor": false}, {"identifier": "getCIELabB", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getCIELabB()", "full_signature": "public float getCIELabB()", "class_method_signature": "ColorimetricColor.getCIELabB()", "testcase": false, "constructor": false}, {"identifier": "getCIEChroma", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCIEChroma()", "full_signature": "public double getCIEChroma()", "class_method_signature": "ColorimetricColor.getCIEChroma()", "testcase": false, "constructor": false}, {"identifier": "getCIEHue", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCIEHue()", "full_signature": "public double getCIEHue()", "class_method_signature": "ColorimetricColor.getCIEHue()", "testcase": false, "constructor": false}, {"identifier": "ColorimetricColor", "parameters": "(float l, float a, float b)", "modifiers": "public", "return": "", "signature": " ColorimetricColor(float l, float a, float b)", "full_signature": "public  ColorimetricColor(float l, float a, float b)", "class_method_signature": "ColorimetricColor.ColorimetricColor(float l, float a, float b)", "testcase": false, "constructor": true}, {"identifier": "ColorimetricColor", "parameters": "(float[] lab)", "modifiers": "public", "return": "", "signature": " ColorimetricColor(float[] lab)", "full_signature": "public  ColorimetricColor(float[] lab)", "class_method_signature": "ColorimetricColor.ColorimetricColor(float[] lab)", "testcase": false, "constructor": true}, {"identifier": "labExistance", "parameters": "(float l, float a, float b)", "modifiers": "public static", "return": "boolean", "signature": "boolean labExistance(float l, float a, float b)", "full_signature": "public static boolean labExistance(float l, float a, float b)", "class_method_signature": "ColorimetricColor.labExistance(float l, float a, float b)", "testcase": false, "constructor": false}, {"identifier": "setL", "parameters": "(float l)", "modifiers": "public", "return": "void", "signature": "void setL(float l)", "full_signature": "public void setL(float l)", "class_method_signature": "ColorimetricColor.setL(float l)", "testcase": false, "constructor": false}, {"identifier": "setA", "parameters": "(float a)", "modifiers": "public", "return": "void", "signature": "void setA(float a)", "full_signature": "public void setA(float a)", "class_method_signature": "ColorimetricColor.setA(float a)", "testcase": false, "constructor": false}, {"identifier": "setB", "parameters": "(float b)", "modifiers": "public", "return": "void", "signature": "void setB(float b)", "full_signature": "public void setB(float b)", "class_method_signature": "ColorimetricColor.setB(float b)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(ColorimetricColor c)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(ColorimetricColor c)", "full_signature": "public boolean equals(ColorimetricColor c)", "class_method_signature": "ColorimetricColor.equals(ColorimetricColor c)", "testcase": false, "constructor": false}, {"identifier": "maxRGB", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float maxRGB()", "full_signature": "public float maxRGB()", "class_method_signature": "ColorimetricColor.maxRGB()", "testcase": false, "constructor": false}, {"identifier": "distanceCIElab", "parameters": "(ColorimetricColor c1, ColorimetricColor c2)", "modifiers": "public static", "return": "float", "signature": "float distanceCIElab(ColorimetricColor c1, ColorimetricColor c2)", "full_signature": "public static float distanceCIElab(ColorimetricColor c1, ColorimetricColor c2)", "class_method_signature": "ColorimetricColor.distanceCIElab(ColorimetricColor c1, ColorimetricColor c2)", "testcase": false, "constructor": false}, {"identifier": "distanceRVB", "parameters": "(ColorimetricColor c1, ColorimetricColor c2)", "modifiers": "public static", "return": "float", "signature": "float distanceRVB(ColorimetricColor c1, ColorimetricColor c2)", "full_signature": "public static float distanceRVB(ColorimetricColor c1, ColorimetricColor c2)", "class_method_signature": "ColorimetricColor.distanceRVB(ColorimetricColor c1, ColorimetricColor c2)", "testcase": false, "constructor": false}, {"identifier": "CIELab_Lightness_Difference", "parameters": "(ColorimetricColor c1,\n      ColorimetricColor c2)", "modifiers": "public static", "return": "float", "signature": "float CIELab_Lightness_Difference(ColorimetricColor c1,\n      ColorimetricColor c2)", "full_signature": "public static float CIELab_Lightness_Difference(ColorimetricColor c1,\n      ColorimetricColor c2)", "class_method_signature": "ColorimetricColor.CIELab_Lightness_Difference(ColorimetricColor c1,\n      ColorimetricColor c2)", "testcase": false, "constructor": false}, {"identifier": "CIELCh_Chroma_Difference", "parameters": "(ColorimetricColor c1,\n      ColorimetricColor c2)", "modifiers": "public static", "return": "double", "signature": "double CIELCh_Chroma_Difference(ColorimetricColor c1,\n      ColorimetricColor c2)", "full_signature": "public static double CIELCh_Chroma_Difference(ColorimetricColor c1,\n      ColorimetricColor c2)", "class_method_signature": "ColorimetricColor.CIELCh_Chroma_Difference(ColorimetricColor c1,\n      ColorimetricColor c2)", "testcase": false, "constructor": false}, {"identifier": "CIELCh_Hue_Difference", "parameters": "(ColorimetricColor c1,\n      ColorimetricColor c2)", "modifiers": "public static", "return": "double", "signature": "double CIELCh_Hue_Difference(ColorimetricColor c1,\n      ColorimetricColor c2)", "full_signature": "public static double CIELCh_Hue_Difference(ColorimetricColor c1,\n      ColorimetricColor c2)", "class_method_signature": "ColorimetricColor.CIELCh_Hue_Difference(ColorimetricColor c1,\n      ColorimetricColor c2)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ColorimetricColor.toString()", "testcase": false, "constructor": false}, {"identifier": "basicColorsComponents", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void basicColorsComponents()", "full_signature": "public static void basicColorsComponents()", "class_method_signature": "ColorimetricColor.basicColorsComponents()", "testcase": false, "constructor": false}], "file": "geoxygene-style/src/main/java/fr/ign/cogit/geoxygene/style/colorimetry/ColorimetricColor.java"}, "focal_method": {"identifier": "getCleCoul", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String getCleCoul() {\n    return this.cleCoul;\n  }", "signature": "String getCleCoul()", "full_signature": "public String getCleCoul()", "class_method_signature": "ColorimetricColor.getCleCoul()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 56582318, "url": "https://github.com/IGNF/geoxygene", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 22, "size": 323511, "license": "licensed"}}