{"test_class": {"identifier": "ScriptRouterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private URL SCRIPT_URL = URL.valueOf(\"script://javascript?type=javascript\");", "modifier": "private", "type": "URL", "declarator": "SCRIPT_URL = URL.valueOf(\"script://javascript?type=javascript\")", "var_name": "SCRIPT_URL"}], "file": "dubbo-cluster/src/test/java/com/alibaba/dubbo/rpc/cluster/router/script/ScriptRouterTest.java"}, "test_case": {"identifier": "testRoute_ReturnAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRoute_ReturnAll() {\n        Router router = new ScriptRouterFactory().getRouter(getRouteUrl(\"function route(op1,op2){return op1} route(invokers)\"));\n        List<Invoker<String>> invokers = new ArrayList<Invoker<String>>();\n        invokers.add(new MockInvoker<String>());\n        invokers.add(new MockInvoker<String>());\n        invokers.add(new MockInvoker<String>());\n        List<Invoker<String>> fileredInvokers = router.route(invokers, invokers.get(0).getUrl(), new RpcInvocation());\n        Assert.assertEquals(invokers, fileredInvokers);\n    }", "signature": "void testRoute_ReturnAll()", "full_signature": "@Test public void testRoute_ReturnAll()", "class_method_signature": "ScriptRouterTest.testRoute_ReturnAll()", "testcase": true, "constructor": false, "invocations": ["getRouter", "getRouteUrl", "add", "add", "add", "route", "getUrl", "get", "assertEquals"]}, "focal_class": {"identifier": "ScriptRouter", "superclass": "extends AbstractRouter", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ScriptRouter.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ScriptRouter.class)", "var_name": "logger"}, {"original_string": "private static final int DEFAULT_PRIORITY = 1;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_PRIORITY = 1", "var_name": "DEFAULT_PRIORITY"}, {"original_string": "private static final Map<String, ScriptEngine> engines = new ConcurrentHashMap<String, ScriptEngine>();", "modifier": "private static final", "type": "Map<String, ScriptEngine>", "declarator": "engines = new ConcurrentHashMap<String, ScriptEngine>()", "var_name": "engines"}, {"original_string": "private final ScriptEngine engine;", "modifier": "private final", "type": "ScriptEngine", "declarator": "engine", "var_name": "engine"}, {"original_string": "private final String rule;", "modifier": "private final", "type": "String", "declarator": "rule", "var_name": "rule"}], "methods": [{"identifier": "ScriptRouter", "parameters": "(URL url)", "modifiers": "public", "return": "", "signature": " ScriptRouter(URL url)", "full_signature": "public  ScriptRouter(URL url)", "class_method_signature": "ScriptRouter.ScriptRouter(URL url)", "testcase": false, "constructor": true}, {"identifier": "route", "parameters": "(List<Invoker<T>> invokers, URL url, Invocation invocation)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "List<Invoker<T>>", "signature": "List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation)", "class_method_signature": "ScriptRouter.route(List<Invoker<T>> invokers, URL url, Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-cluster/src/main/java/com/alibaba/dubbo/rpc/cluster/router/script/ScriptRouter.java"}, "focal_method": {"identifier": "route", "parameters": "(List<Invoker<T>> invokers, URL url, Invocation invocation)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "List<Invoker<T>>", "body": "@Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation) throws RpcException {\n        try {\n            List<Invoker<T>> invokersCopy = new ArrayList<Invoker<T>>(invokers);\n            Compilable compilable = (Compilable) engine;\n            Bindings bindings = engine.createBindings();\n            bindings.put(\"invokers\", invokersCopy);\n            bindings.put(\"invocation\", invocation);\n            bindings.put(\"context\", RpcContext.getContext());\n            CompiledScript function = compilable.compile(rule);\n            Object obj = function.eval(bindings);\n            if (obj instanceof Invoker[]) {\n                invokersCopy = Arrays.asList((Invoker<T>[]) obj);\n            } else if (obj instanceof Object[]) {\n                invokersCopy = new ArrayList<Invoker<T>>();\n                for (Object inv : (Object[]) obj) {\n                    invokersCopy.add((Invoker<T>) inv);\n                }\n            } else {\n                invokersCopy = (List<Invoker<T>>) obj;\n            }\n            return invokersCopy;\n        } catch (ScriptException e) {\n            //fail then ignore rule .invokers.\n            logger.error(\"route error , rule has been ignored. rule: \" + rule + \", method:\" + invocation.getMethodName() + \", url: \" + RpcContext.getContext().getUrl(), e);\n            return invokers;\n        }\n    }", "signature": "List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public List<Invoker<T>> route(List<Invoker<T>> invokers, URL url, Invocation invocation)", "class_method_signature": "ScriptRouter.route(List<Invoker<T>> invokers, URL url, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["createBindings", "put", "put", "put", "getContext", "compile", "eval", "asList", "add", "error", "getMethodName", "getUrl", "getContext"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}