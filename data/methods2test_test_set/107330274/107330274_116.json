{"test_class": {"identifier": "GraphExtTest", "superclass": "", "interfaces": "", "fields": [], "file": "titus-common/src/test/java/com/netflix/titus/common/util/GraphExtTest.java"}, "test_case": {"identifier": "testOrdering", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOrdering() throws Exception {\n        // Already in order\n        List<Character> ordered = GraphExt.order(Arrays.asList('A', 'B', 'C'), (s1, s2) -> s1 == 'A' && s2 == 'C');\n        assertThat(ordered).containsExactlyInAnyOrder('A', 'B', 'C');\n\n        // Out of order\n        List<Character> notOrdered = GraphExt.order(Arrays.asList('A', 'B', 'C'), (s1, s2) -> s1 == 'C' && s2 == 'A');\n        assertThat(notOrdered).containsExactlyInAnyOrder('B', 'C', 'A');\n    }", "signature": "void testOrdering()", "full_signature": "@Test public void testOrdering()", "class_method_signature": "GraphExtTest.testOrdering()", "testcase": true, "constructor": false, "invocations": ["order", "asList", "containsExactlyInAnyOrder", "assertThat", "order", "asList", "containsExactlyInAnyOrder", "assertThat"]}, "focal_class": {"identifier": "GraphExt", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "order", "parameters": "(List<T> nodes, BiFunction<T, T, Boolean> hasEdge)", "modifiers": "public static", "return": "List<T>", "signature": "List<T> order(List<T> nodes, BiFunction<T, T, Boolean> hasEdge)", "full_signature": "public static List<T> order(List<T> nodes, BiFunction<T, T, Boolean> hasEdge)", "class_method_signature": "GraphExt.order(List<T> nodes, BiFunction<T, T, Boolean> hasEdge)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/GraphExt.java"}, "focal_method": {"identifier": "order", "parameters": "(List<T> nodes, BiFunction<T, T, Boolean> hasEdge)", "modifiers": "public static", "return": "List<T>", "body": "public static <T> List<T> order(List<T> nodes, BiFunction<T, T, Boolean> hasEdge) {\n        List<T> result = new ArrayList<>(nodes);\n\n        for (int i = 0; i < nodes.size(); i++) {\n            for (int j = 0; j < nodes.size(); j++) {\n                if (i != j) {\n                    T from = nodes.get(i);\n                    T to = nodes.get(j);\n                    // There is an edge from right to left, so we need to move left element after right\n                    if (hasEdge.apply(from, to) && i > j) {\n                        result.remove(j);\n                        result.add(i, to);\n                        return result;\n                    }\n                }\n            }\n        }\n        return result;\n    }", "signature": "List<T> order(List<T> nodes, BiFunction<T, T, Boolean> hasEdge)", "full_signature": "public static List<T> order(List<T> nodes, BiFunction<T, T, Boolean> hasEdge)", "class_method_signature": "GraphExt.order(List<T> nodes, BiFunction<T, T, Boolean> hasEdge)", "testcase": false, "constructor": false, "invocations": ["size", "size", "get", "get", "apply", "remove", "add"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}