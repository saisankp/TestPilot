{"test_class": {"identifier": "ObjectArrayTypeInfoTest", "superclass": "extends TestLogger", "interfaces": "", "fields": [], "file": "flink-core/src/test/java/org/apache/flink/api/java/typeutils/ObjectArrayTypeInfoTest.java"}, "test_case": {"identifier": "testObjectArrayTypeInfoInequality", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testObjectArrayTypeInfoInequality() {\n\t\tObjectArrayTypeInfo<TestClass[], TestClass> tpeInfo1 = ObjectArrayTypeInfo.getInfoFor(\n\t\t\tTestClass[].class,\n\t\t\tnew GenericTypeInfo<TestClass>(TestClass.class));\n\n\t\tObjectArrayTypeInfo<TestClass[], TestClass> tpeInfo2 = ObjectArrayTypeInfo.getInfoFor(\n\t\t\tTestClass[].class,\n\t\t\tnew PojoTypeInfo<TestClass>(TestClass.class, new ArrayList<PojoField>()));\n\n\t\tassertNotEquals(tpeInfo1, tpeInfo2);\n\t}", "signature": "void testObjectArrayTypeInfoInequality()", "full_signature": "@Test public void testObjectArrayTypeInfoInequality()", "class_method_signature": "ObjectArrayTypeInfoTest.testObjectArrayTypeInfoInequality()", "testcase": true, "constructor": false, "invocations": ["getInfoFor", "getInfoFor", "assertNotEquals"]}, "focal_class": {"identifier": "ObjectArrayTypeInfo", "superclass": "extends TypeInformation<T>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final Class<T> arrayType;", "modifier": "private final", "type": "Class<T>", "declarator": "arrayType", "var_name": "arrayType"}, {"original_string": "private final TypeInformation<C> componentInfo;", "modifier": "private final", "type": "TypeInformation<C>", "declarator": "componentInfo", "var_name": "componentInfo"}], "methods": [{"identifier": "ObjectArrayTypeInfo", "parameters": "(Class<T> arrayType, TypeInformation<C> componentInfo)", "modifiers": "private", "return": "", "signature": " ObjectArrayTypeInfo(Class<T> arrayType, TypeInformation<C> componentInfo)", "full_signature": "private  ObjectArrayTypeInfo(Class<T> arrayType, TypeInformation<C> componentInfo)", "class_method_signature": "ObjectArrayTypeInfo.ObjectArrayTypeInfo(Class<T> arrayType, TypeInformation<C> componentInfo)", "testcase": false, "constructor": true}, {"identifier": "isBasicType", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "boolean", "signature": "boolean isBasicType()", "full_signature": "@Override @PublicEvolving public boolean isBasicType()", "class_method_signature": "ObjectArrayTypeInfo.isBasicType()", "testcase": false, "constructor": false}, {"identifier": "isTupleType", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "boolean", "signature": "boolean isTupleType()", "full_signature": "@Override @PublicEvolving public boolean isTupleType()", "class_method_signature": "ObjectArrayTypeInfo.isTupleType()", "testcase": false, "constructor": false}, {"identifier": "getArity", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "int", "signature": "int getArity()", "full_signature": "@Override @PublicEvolving public int getArity()", "class_method_signature": "ObjectArrayTypeInfo.getArity()", "testcase": false, "constructor": false}, {"identifier": "getTotalFields", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "int", "signature": "int getTotalFields()", "full_signature": "@Override @PublicEvolving public int getTotalFields()", "class_method_signature": "ObjectArrayTypeInfo.getTotalFields()", "testcase": false, "constructor": false}, {"identifier": "getTypeClass", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Override @PublicEvolving public", "return": "Class<T>", "signature": "Class<T> getTypeClass()", "full_signature": "@SuppressWarnings(\"unchecked\") @Override @PublicEvolving public Class<T> getTypeClass()", "class_method_signature": "ObjectArrayTypeInfo.getTypeClass()", "testcase": false, "constructor": false}, {"identifier": "getComponentInfo", "parameters": "()", "modifiers": "@PublicEvolving public", "return": "TypeInformation<C>", "signature": "TypeInformation<C> getComponentInfo()", "full_signature": "@PublicEvolving public TypeInformation<C> getComponentInfo()", "class_method_signature": "ObjectArrayTypeInfo.getComponentInfo()", "testcase": false, "constructor": false}, {"identifier": "isKeyType", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "boolean", "signature": "boolean isKeyType()", "full_signature": "@Override @PublicEvolving public boolean isKeyType()", "class_method_signature": "ObjectArrayTypeInfo.isKeyType()", "testcase": false, "constructor": false}, {"identifier": "createSerializer", "parameters": "(ExecutionConfig executionConfig)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override @PublicEvolving public", "return": "TypeSerializer<T>", "signature": "TypeSerializer<T> createSerializer(ExecutionConfig executionConfig)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override @PublicEvolving public TypeSerializer<T> createSerializer(ExecutionConfig executionConfig)", "class_method_signature": "ObjectArrayTypeInfo.createSerializer(ExecutionConfig executionConfig)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ObjectArrayTypeInfo.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ObjectArrayTypeInfo.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "canEqual", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canEqual(Object obj)", "full_signature": "@Override public boolean canEqual(Object obj)", "class_method_signature": "ObjectArrayTypeInfo.canEqual(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ObjectArrayTypeInfo.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getInfoFor", "parameters": "(Class<T> arrayClass, TypeInformation<C> componentInfo)", "modifiers": "@PublicEvolving public static", "return": "ObjectArrayTypeInfo<T, C>", "signature": "ObjectArrayTypeInfo<T, C> getInfoFor(Class<T> arrayClass, TypeInformation<C> componentInfo)", "full_signature": "@PublicEvolving public static ObjectArrayTypeInfo<T, C> getInfoFor(Class<T> arrayClass, TypeInformation<C> componentInfo)", "class_method_signature": "ObjectArrayTypeInfo.getInfoFor(Class<T> arrayClass, TypeInformation<C> componentInfo)", "testcase": false, "constructor": false}, {"identifier": "getInfoFor", "parameters": "(TypeInformation<C> componentInfo)", "modifiers": "@SuppressWarnings(\"unchecked\") @PublicEvolving public static", "return": "ObjectArrayTypeInfo<T, C>", "signature": "ObjectArrayTypeInfo<T, C> getInfoFor(TypeInformation<C> componentInfo)", "full_signature": "@SuppressWarnings(\"unchecked\") @PublicEvolving public static ObjectArrayTypeInfo<T, C> getInfoFor(TypeInformation<C> componentInfo)", "class_method_signature": "ObjectArrayTypeInfo.getInfoFor(TypeInformation<C> componentInfo)", "testcase": false, "constructor": false}], "file": "flink-core/src/main/java/org/apache/flink/api/java/typeutils/ObjectArrayTypeInfo.java"}, "focal_method": {"identifier": "getInfoFor", "parameters": "(Class<T> arrayClass, TypeInformation<C> componentInfo)", "modifiers": "@PublicEvolving public static", "return": "ObjectArrayTypeInfo<T, C>", "body": "@PublicEvolving\n\tpublic static <T, C> ObjectArrayTypeInfo<T, C> getInfoFor(Class<T> arrayClass, TypeInformation<C> componentInfo) {\n\t\tPreconditions.checkNotNull(arrayClass);\n\t\tPreconditions.checkNotNull(componentInfo);\n\t\tPreconditions.checkArgument(arrayClass.isArray(), \"Class \" + arrayClass + \" must be an array.\");\n\n\t\treturn new ObjectArrayTypeInfo<T, C>(arrayClass, componentInfo);\n\t}", "signature": "ObjectArrayTypeInfo<T, C> getInfoFor(Class<T> arrayClass, TypeInformation<C> componentInfo)", "full_signature": "@PublicEvolving public static ObjectArrayTypeInfo<T, C> getInfoFor(Class<T> arrayClass, TypeInformation<C> componentInfo)", "class_method_signature": "ObjectArrayTypeInfo.getInfoFor(Class<T> arrayClass, TypeInformation<C> componentInfo)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkNotNull", "checkArgument", "isArray"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}