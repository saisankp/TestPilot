{"test_class": {"identifier": "JsonMergerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ObjectMapper mapper = JsonUtils.getMapper();", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper = JsonUtils.getMapper()", "var_name": "mapper"}, {"original_string": "private JsonMerger.MergeStrategy mergeStrategy = mergeStrategy().mergeEncodedObjects(\"fieldFormatMap\").encodedArrayWithKey(\"fields\", \"name\");", "modifier": "private", "type": "JsonMerger.MergeStrategy", "declarator": "mergeStrategy = mergeStrategy().mergeEncodedObjects(\"fieldFormatMap\").encodedArrayWithKey(\"fields\", \"name\")", "var_name": "mergeStrategy"}], "file": "stagemonitor-core/src/test/java/org/stagemonitor/core/util/JsonMergerTest.java"}, "test_case": {"identifier": "mergeDefinitions_AddsFieldsDefinedInReplacement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void mergeDefinitions_AddsFieldsDefinedInReplacement() throws Exception {\n\t\t// Given\n\t\tJsonNode sourceDefinitions = mapper.readTree(\"{\\\"fields\\\": \\\"[{\\\\\\\"name\\\\\\\": \\\\\\\"sourceField\\\\\\\"}]\\\", \\\"fieldFormatMap\\\": \\\"{\\\\\\\"foo\\\\\\\": {\\\\\\\"name\\\\\\\": \\\\\\\"sourceFieldFormatMap\\\\\\\"}}\\\"}\");\n\t\tJsonNode stagemonitorDefinitions = mapper.readTree(\"{\\\"fields\\\": \\\"[{\\\\\\\"name\\\\\\\": \\\\\\\"stagemonitorField\\\\\\\"}]\\\", \\\"fieldFormatMap\\\": \\\"{\\\\\\\"stagemonitor\\\\\\\": {\\\\\\\"name\\\\\\\": \\\\\\\"stagemonitorFieldFormatMap\\\\\\\"}}\\\"}\");\n\n\t\t// When\n\t\tJsonNode resultDefinitions = JsonMerger.merge(sourceDefinitions, stagemonitorDefinitions, mergeStrategy);\n\n\t\t// Then\n\t\tJsonNode resultFields = mapper.readTree(resultDefinitions.get(\"fields\").textValue());\n\t\tassertThat(resultFields).containsExactlyInAnyOrder(\n\t\t\t\tmapper.createObjectNode().put(\"name\", \"sourceField\"),\n\t\t\t\tmapper.createObjectNode().put(\"name\", \"stagemonitorField\"));\n\n\t\tJsonNode resultFieldFormat = mapper.readTree(resultDefinitions.get(\"fieldFormatMap\").textValue());\n\t\tassertThat(resultFieldFormat).hasSize(2);\n\t\tassertThat(resultFieldFormat.get(\"foo\")).isEqualTo(mapper.createObjectNode().put(\"name\", \"sourceFieldFormatMap\"));\n\t\tassertThat(resultFieldFormat.get(\"stagemonitor\")).isEqualTo(mapper.createObjectNode().put(\"name\", \"stagemonitorFieldFormatMap\"));\n\t}", "signature": "void mergeDefinitions_AddsFieldsDefinedInReplacement()", "full_signature": "@Test public void mergeDefinitions_AddsFieldsDefinedInReplacement()", "class_method_signature": "JsonMergerTest.mergeDefinitions_AddsFieldsDefinedInReplacement()", "testcase": true, "constructor": false, "invocations": ["readTree", "readTree", "merge", "readTree", "textValue", "get", "containsExactlyInAnyOrder", "assertThat", "put", "createObjectNode", "put", "createObjectNode", "readTree", "textValue", "get", "hasSize", "assertThat", "isEqualTo", "assertThat", "get", "put", "createObjectNode", "isEqualTo", "assertThat", "get", "put", "createObjectNode"]}, "focal_class": {"identifier": "JsonMerger", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ObjectMapper mapper = JsonUtils.getMapper();", "modifier": "private static final", "type": "ObjectMapper", "declarator": "mapper = JsonUtils.getMapper()", "var_name": "mapper"}, {"original_string": "private static final Merger defaultMerger = new SimpleMerger();", "modifier": "private static final", "type": "Merger", "declarator": "defaultMerger = new SimpleMerger()", "var_name": "defaultMerger"}], "methods": [{"identifier": "merge", "parameters": "(JsonNode source, JsonNode replacement)", "modifiers": "public static", "return": "JsonNode", "signature": "JsonNode merge(JsonNode source, JsonNode replacement)", "full_signature": "public static JsonNode merge(JsonNode source, JsonNode replacement)", "class_method_signature": "JsonMerger.merge(JsonNode source, JsonNode replacement)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(JsonNode source, JsonNode replacement, MergeStrategy mergeStrategy)", "modifiers": "public static", "return": "JsonNode", "signature": "JsonNode merge(JsonNode source, JsonNode replacement, MergeStrategy mergeStrategy)", "full_signature": "public static JsonNode merge(JsonNode source, JsonNode replacement, MergeStrategy mergeStrategy)", "class_method_signature": "JsonMerger.merge(JsonNode source, JsonNode replacement, MergeStrategy mergeStrategy)", "testcase": false, "constructor": false}, {"identifier": "groupArrayElementsByKey", "parameters": "(ArrayNode fields, String key)", "modifiers": "private static", "return": "Map<String, JsonNode>", "signature": "Map<String, JsonNode> groupArrayElementsByKey(ArrayNode fields, String key)", "full_signature": "private static Map<String, JsonNode> groupArrayElementsByKey(ArrayNode fields, String key)", "class_method_signature": "JsonMerger.groupArrayElementsByKey(ArrayNode fields, String key)", "testcase": false, "constructor": false}, {"identifier": "collectIteratorToSet", "parameters": "(Iterator<T> iterator)", "modifiers": "private static", "return": "Set<T>", "signature": "Set<T> collectIteratorToSet(Iterator<T> iterator)", "full_signature": "private static Set<T> collectIteratorToSet(Iterator<T> iterator)", "class_method_signature": "JsonMerger.collectIteratorToSet(Iterator<T> iterator)", "testcase": false, "constructor": false}, {"identifier": "tryDecode", "parameters": "(JsonNode encodedNode, T defaultValue, String fieldName)", "modifiers": "private static", "return": "T", "signature": "T tryDecode(JsonNode encodedNode, T defaultValue, String fieldName)", "full_signature": "private static T tryDecode(JsonNode encodedNode, T defaultValue, String fieldName)", "class_method_signature": "JsonMerger.tryDecode(JsonNode encodedNode, T defaultValue, String fieldName)", "testcase": false, "constructor": false}, {"identifier": "mergeStrategy", "parameters": "()", "modifiers": "public static", "return": "MergeStrategy", "signature": "MergeStrategy mergeStrategy()", "full_signature": "public static MergeStrategy mergeStrategy()", "class_method_signature": "JsonMerger.mergeStrategy()", "testcase": false, "constructor": false}], "file": "stagemonitor-core/src/main/java/org/stagemonitor/core/util/JsonMerger.java"}, "focal_method": {"identifier": "merge", "parameters": "(JsonNode source, JsonNode replacement)", "modifiers": "public static", "return": "JsonNode", "body": "public static JsonNode merge(JsonNode source, JsonNode replacement) throws IOException {\n\t\treturn new MergeStrategy().execute(source, replacement);\n\t}", "signature": "JsonNode merge(JsonNode source, JsonNode replacement)", "full_signature": "public static JsonNode merge(JsonNode source, JsonNode replacement)", "class_method_signature": "JsonMerger.merge(JsonNode source, JsonNode replacement)", "testcase": false, "constructor": false, "invocations": ["execute"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}