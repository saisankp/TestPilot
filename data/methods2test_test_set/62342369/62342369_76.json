{"test_class": {"identifier": "ExcelFunctionsTest", "superclass": "", "interfaces": "", "fields": [], "file": "step-plans/step-plans-base-artefacts/src/test/java/step/datapool/excel/ExcelFunctionsTest.java"}, "test_case": {"identifier": "testTEXT", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testTEXT() {\n\t\tAssert.assertEquals(\"01.01.2016\",ExcelFunctions.getCell(getResourceFile(\"Excel1.xlsx\"), \"TEXT\", \"B1\"));\n\t\tAssert.assertEquals(\"01/01/2016\",ExcelFunctions.getCell(getResourceFile(\"Excel1.xlsx\"), \"TEXT\", \"B2\"));\n\t\tAssert.assertEquals(\"2016-01-01\",ExcelFunctions.getCell(getResourceFile(\"Excel1.xlsx\"), \"TEXT\", \"B3\"));\n\t\tAssert.assertEquals(\"20160101\",ExcelFunctions.getCell(getResourceFile(\"Excel1.xlsx\"), \"TEXT\", \"B4\"));\n\t\tAssert.assertEquals(\"01/01/2016\",ExcelFunctions.getCell(getResourceFile(\"Excel1.xlsx\"), \"TEXT\", \"B5\"));\n\n\t\tAssert.assertEquals(\"8 Februar 2016\",ExcelFunctions.getCell(getResourceFile(\"Excel1.xlsx\"), \"TEXT\", \"B6\"));\n\n\t}", "signature": "void testTEXT()", "full_signature": "@Test public void testTEXT()", "class_method_signature": "ExcelFunctionsTest.testTEXT()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getCell", "getResourceFile", "assertEquals", "getCell", "getResourceFile", "assertEquals", "getCell", "getResourceFile", "assertEquals", "getCell", "getResourceFile", "assertEquals", "getCell", "getResourceFile", "assertEquals", "getCell", "getResourceFile"]}, "focal_class": {"identifier": "ExcelFunctions", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = LoggerFactory.getLogger(ExcelFunctions.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ExcelFunctions.class)", "var_name": "logger"}, {"original_string": "private static DecimalFormat customDecimalFormat = null;", "modifier": "private static", "type": "DecimalFormat", "declarator": "customDecimalFormat = null", "var_name": "customDecimalFormat"}, {"original_string": "private static Configuration configuration = new Configuration();", "modifier": "private static", "type": "Configuration", "declarator": "configuration = new Configuration()", "var_name": "configuration"}], "methods": [{"identifier": "getCell", "parameters": "(String workbookPath, String sheetName, String cellIndex)", "modifiers": "public static", "return": "String", "signature": "String getCell(String workbookPath, String sheetName, String cellIndex)", "full_signature": "public static String getCell(String workbookPath, String sheetName, String cellIndex)", "class_method_signature": "ExcelFunctions.getCell(String workbookPath, String sheetName, String cellIndex)", "testcase": false, "constructor": false}, {"identifier": "getCell", "parameters": "(File workBookFile, String sheetName, String cellIndex)", "modifiers": "public static", "return": "String", "signature": "String getCell(File workBookFile, String sheetName, String cellIndex)", "full_signature": "public static String getCell(File workBookFile, String sheetName, String cellIndex)", "class_method_signature": "ExcelFunctions.getCell(File workBookFile, String sheetName, String cellIndex)", "testcase": false, "constructor": false}, {"identifier": "getSheet", "parameters": "(WorkbookSet workbookSet, String sheetName, boolean createIfNotExists)", "modifiers": "protected static", "return": "Sheet", "signature": "Sheet getSheet(WorkbookSet workbookSet, String sheetName, boolean createIfNotExists)", "full_signature": "protected static Sheet getSheet(WorkbookSet workbookSet, String sheetName, boolean createIfNotExists)", "class_method_signature": "ExcelFunctions.getSheet(WorkbookSet workbookSet, String sheetName, boolean createIfNotExists)", "testcase": false, "constructor": false}, {"identifier": "getCell", "parameters": "(Sheet sheet, String cellIndex, boolean createIfNotExists)", "modifiers": "private static", "return": "Cell", "signature": "Cell getCell(Sheet sheet, String cellIndex, boolean createIfNotExists)", "full_signature": "private static Cell getCell(Sheet sheet, String cellIndex, boolean createIfNotExists)", "class_method_signature": "ExcelFunctions.getCell(Sheet sheet, String cellIndex, boolean createIfNotExists)", "testcase": false, "constructor": false}, {"identifier": "putCell", "parameters": "(String workbookPath, String sheetName, String cellIndex, String cellValue, String style)", "modifiers": "public static", "return": "void", "signature": "void putCell(String workbookPath, String sheetName, String cellIndex, String cellValue, String style)", "full_signature": "public static void putCell(String workbookPath, String sheetName, String cellIndex, String cellValue, String style)", "class_method_signature": "ExcelFunctions.putCell(String workbookPath, String sheetName, String cellIndex, String cellValue, String style)", "testcase": false, "constructor": false}, {"identifier": "getCellValueAsString", "parameters": "(Cell cell, FormulaEvaluator evaluator)", "modifiers": "public static", "return": "String", "signature": "String getCellValueAsString(Cell cell, FormulaEvaluator evaluator)", "full_signature": "public static String getCellValueAsString(Cell cell, FormulaEvaluator evaluator)", "class_method_signature": "ExcelFunctions.getCellValueAsString(Cell cell, FormulaEvaluator evaluator)", "testcase": false, "constructor": false}, {"identifier": "evaluateFormulaCell", "parameters": "(Cell cell, FormulaEvaluator evaluator)", "modifiers": "private static", "return": "int", "signature": "int evaluateFormulaCell(Cell cell, FormulaEvaluator evaluator)", "full_signature": "private static int evaluateFormulaCell(Cell cell, FormulaEvaluator evaluator)", "class_method_signature": "ExcelFunctions.evaluateFormulaCell(Cell cell, FormulaEvaluator evaluator)", "testcase": false, "constructor": false}, {"identifier": "getCustomDecimalFormat", "parameters": "()", "modifiers": "private static", "return": "DecimalFormat", "signature": "DecimalFormat getCustomDecimalFormat()", "full_signature": "private static DecimalFormat getCustomDecimalFormat()", "class_method_signature": "ExcelFunctions.getCustomDecimalFormat()", "testcase": false, "constructor": false}, {"identifier": "getMaxExcelSize", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int getMaxExcelSize()", "full_signature": "public static int getMaxExcelSize()", "class_method_signature": "ExcelFunctions.getMaxExcelSize()", "testcase": false, "constructor": false}, {"identifier": "setConfiguration", "parameters": "(Configuration configuration)", "modifiers": "public static", "return": "void", "signature": "void setConfiguration(Configuration configuration)", "full_signature": "public static void setConfiguration(Configuration configuration)", "class_method_signature": "ExcelFunctions.setConfiguration(Configuration configuration)", "testcase": false, "constructor": false}], "file": "step-plans/step-plans-base-artefacts/src/main/java/step/datapool/excel/ExcelFunctions.java"}, "focal_method": {"identifier": "getCell", "parameters": "(String workbookPath, String sheetName, String cellIndex)", "modifiers": "public static", "return": "String", "body": "public static String getCell(String workbookPath, String sheetName, String cellIndex) {\n\t\tExcelFileLookup excelFileLookup = new ExcelFileLookup(null);\n\t\tFile workBookFile = excelFileLookup.lookup(workbookPath);\n\t\treturn getCell(workBookFile, sheetName, cellIndex);\n\t}", "signature": "String getCell(String workbookPath, String sheetName, String cellIndex)", "full_signature": "public static String getCell(String workbookPath, String sheetName, String cellIndex)", "class_method_signature": "ExcelFunctions.getCell(String workbookPath, String sheetName, String cellIndex)", "testcase": false, "constructor": false, "invocations": ["lookup", "getCell"]}, "repository": {"repo_id": 62342369, "url": "https://github.com/exense/step", "stars": 12, "created": "6/30/2016 9:08:29 PM +00:00", "updates": "2020-01-24T17:13:24+00:00", "fork": "False", "license": "licensed"}}