{"test_class": {"identifier": "ParallelProtocolProducerTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/dk/alexandra/fresco/lib/helper/ParallelProtocolProducerTest.java"}, "test_case": {"identifier": "iterate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void iterate() {\n    Iterator<ProtocolProducer> iterator = mock(Iterator.class);\n    ProtocolCollection protocolCollection = mock(ProtocolCollection.class);\n    ProtocolProducer protocolProducer = mock(ProtocolProducer.class);\n\n    when(iterator.hasNext()).thenReturn(true, false);\n    when(protocolCollection.hasFreeCapacity()).thenReturn(true);\n    when(protocolProducer.hasNextProtocols()).thenReturn(false);\n    when(iterator.next()).thenReturn(protocolProducer);\n\n    List<ProtocolProducer> list = Arrays.asList(protocolProducer);\n    ParallelProtocolProducer parallelProtocolProducer =\n        new ParallelProtocolProducer(list);\n    parallelProtocolProducer.iterate(iterator, protocolCollection);\n\n    verify(iterator, times(1)).remove();\n  }", "signature": "void iterate()", "full_signature": "@Test public void iterate()", "class_method_signature": "ParallelProtocolProducerTest.iterate()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "thenReturn", "when", "hasNext", "thenReturn", "when", "hasFreeCapacity", "thenReturn", "when", "hasNextProtocols", "thenReturn", "when", "next", "asList", "iterate", "remove", "verify", "times"]}, "focal_class": {"identifier": "ParallelProtocolProducer", "superclass": "", "interfaces": "implements ProtocolProducer", "fields": [{"original_string": "private final Deque<ProtocolProducer> subProducers;", "modifier": "private final", "type": "Deque<ProtocolProducer>", "declarator": "subProducers", "var_name": "subProducers"}], "methods": [{"identifier": "ParallelProtocolProducer", "parameters": "(List<ProtocolProducer> protocols)", "modifiers": "public", "return": "", "signature": " ParallelProtocolProducer(List<ProtocolProducer> protocols)", "full_signature": "public  ParallelProtocolProducer(List<ProtocolProducer> protocols)", "class_method_signature": "ParallelProtocolProducer.ParallelProtocolProducer(List<ProtocolProducer> protocols)", "testcase": false, "constructor": true}, {"identifier": "hasNextProtocols", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasNextProtocols()", "full_signature": "@Override public boolean hasNextProtocols()", "class_method_signature": "ParallelProtocolProducer.hasNextProtocols()", "testcase": false, "constructor": false}, {"identifier": "getNextProtocols", "parameters": "(\n      ProtocolCollection<ResourcePoolT> protocolCollection)", "modifiers": "@Override public", "return": "void", "signature": "void getNextProtocols(\n      ProtocolCollection<ResourcePoolT> protocolCollection)", "full_signature": "@Override public void getNextProtocols(\n      ProtocolCollection<ResourcePoolT> protocolCollection)", "class_method_signature": "ParallelProtocolProducer.getNextProtocols(\n      ProtocolCollection<ResourcePoolT> protocolCollection)", "testcase": false, "constructor": false}, {"identifier": "iterate", "parameters": "(\n      Iterator<ProtocolProducer> iterator, ProtocolCollection<ResourcePoolT> protocolCollection)", "modifiers": "protected", "return": "void", "signature": "void iterate(\n      Iterator<ProtocolProducer> iterator, ProtocolCollection<ResourcePoolT> protocolCollection)", "full_signature": "protected void iterate(\n      Iterator<ProtocolProducer> iterator, ProtocolCollection<ResourcePoolT> protocolCollection)", "class_method_signature": "ParallelProtocolProducer.iterate(\n      Iterator<ProtocolProducer> iterator, ProtocolCollection<ResourcePoolT> protocolCollection)", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/lib/helper/ParallelProtocolProducer.java"}, "focal_method": {"identifier": "iterate", "parameters": "(\n      Iterator<ProtocolProducer> iterator, ProtocolCollection<ResourcePoolT> protocolCollection)", "modifiers": "protected", "return": "void", "body": "protected <ResourcePoolT extends ResourcePool> void iterate(\n      Iterator<ProtocolProducer> iterator, ProtocolCollection<ResourcePoolT> protocolCollection) {\n    while (iterator.hasNext() && protocolCollection.hasFreeCapacity()) {\n      ProtocolProducer producer = iterator.next();\n      if (producer.hasNextProtocols()) {\n        producer.getNextProtocols(protocolCollection);\n      } else {\n        iterator.remove();\n      }\n    }\n  }", "signature": "void iterate(\n      Iterator<ProtocolProducer> iterator, ProtocolCollection<ResourcePoolT> protocolCollection)", "full_signature": "protected void iterate(\n      Iterator<ProtocolProducer> iterator, ProtocolCollection<ResourcePoolT> protocolCollection)", "class_method_signature": "ParallelProtocolProducer.iterate(\n      Iterator<ProtocolProducer> iterator, ProtocolCollection<ResourcePoolT> protocolCollection)", "testcase": false, "constructor": false, "invocations": ["hasNext", "hasFreeCapacity", "next", "hasNextProtocols", "getNextProtocols", "remove"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}