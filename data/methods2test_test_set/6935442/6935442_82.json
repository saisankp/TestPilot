{"test_class": {"identifier": "MoneyTest", "superclass": "", "interfaces": "", "fields": [], "file": "legacy/extensions/core/applib/src/test/java/org/apache/isis/legacy/applib/value/MoneyTest.java"}, "test_case": {"identifier": "testIsEqualTo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsEqualTo() {\n        final Money m1 = new Money(100, \"pds\");\n        final Money m2 = new Money(100, \"pds\");\n        assertTrue(m1.isEqualTo(m2));\n    }", "signature": "void testIsEqualTo()", "full_signature": "@Test public void testIsEqualTo()", "class_method_signature": "MoneyTest.testIsEqualTo()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isEqualTo"]}, "focal_class": {"identifier": "Money", "superclass": "extends Magnitude<Money>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private static final int[] cents = new int[] { 1, 10, 100, 100 };", "modifier": "private static final", "type": "int[]", "declarator": "cents = new int[] { 1, 10, 100, 100 }", "var_name": "cents"}, {"original_string": "private final long amount;", "modifier": "private final", "type": "long", "declarator": "amount", "var_name": "amount"}, {"original_string": "private final String currency;", "modifier": "private final", "type": "String", "declarator": "currency", "var_name": "currency"}], "methods": [{"identifier": "Money", "parameters": "(final double amount, final String currency)", "modifiers": "public", "return": "", "signature": " Money(final double amount, final String currency)", "full_signature": "public  Money(final double amount, final String currency)", "class_method_signature": "Money.Money(final double amount, final String currency)", "testcase": false, "constructor": true}, {"identifier": "Money", "parameters": "(final long amount, final String currency)", "modifiers": "public", "return": "", "signature": " Money(final long amount, final String currency)", "full_signature": "public  Money(final long amount, final String currency)", "class_method_signature": "Money.Money(final long amount, final String currency)", "testcase": false, "constructor": true}, {"identifier": "assertCurrencySet", "parameters": "(final String currency)", "modifiers": "private", "return": "void", "signature": "void assertCurrencySet(final String currency)", "full_signature": "private void assertCurrencySet(final String currency)", "class_method_signature": "Money.assertCurrencySet(final String currency)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final Money money)", "modifiers": "public", "return": "Money", "signature": "Money add(final Money money)", "full_signature": "public Money add(final Money money)", "class_method_signature": "Money.add(final Money money)", "testcase": false, "constructor": false}, {"identifier": "assertSameCurrency", "parameters": "(final Money money)", "modifiers": "private", "return": "void", "signature": "void assertSameCurrency(final Money money)", "full_signature": "private void assertSameCurrency(final Money money)", "class_method_signature": "Money.assertSameCurrency(final Money money)", "testcase": false, "constructor": false}, {"identifier": "centFactor", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int centFactor()", "full_signature": "private int centFactor()", "class_method_signature": "Money.centFactor()", "testcase": false, "constructor": false}, {"identifier": "doubleValue", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double doubleValue()", "full_signature": "public double doubleValue()", "class_method_signature": "Money.doubleValue()", "testcase": false, "constructor": false}, {"identifier": "floatValue", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float floatValue()", "full_signature": "public float floatValue()", "class_method_signature": "Money.floatValue()", "testcase": false, "constructor": false}, {"identifier": "getAmount", "parameters": "()", "modifiers": "public", "return": "BigDecimal", "signature": "BigDecimal getAmount()", "full_signature": "public BigDecimal getAmount()", "class_method_signature": "Money.getAmount()", "testcase": false, "constructor": false}, {"identifier": "getCurrency", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCurrency()", "full_signature": "public String getCurrency()", "class_method_signature": "Money.getCurrency()", "testcase": false, "constructor": false}, {"identifier": "getFractionalDigits", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getFractionalDigits()", "full_signature": "private int getFractionalDigits()", "class_method_signature": "Money.getFractionalDigits()", "testcase": false, "constructor": false}, {"identifier": "hasSameCurrency", "parameters": "(final Money money)", "modifiers": "public", "return": "boolean", "signature": "boolean hasSameCurrency(final Money money)", "full_signature": "public boolean hasSameCurrency(final Money money)", "class_method_signature": "Money.hasSameCurrency(final Money money)", "testcase": false, "constructor": false}, {"identifier": "intValue", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int intValue()", "full_signature": "public int intValue()", "class_method_signature": "Money.intValue()", "testcase": false, "constructor": false}, {"identifier": "isEqualTo", "parameters": "(final Money magnitude)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEqualTo(final Money magnitude)", "full_signature": "@Override public boolean isEqualTo(final Money magnitude)", "class_method_signature": "Money.isEqualTo(final Money magnitude)", "testcase": false, "constructor": false}, {"identifier": "isGreaterThanZero", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isGreaterThanZero()", "full_signature": "public boolean isGreaterThanZero()", "class_method_signature": "Money.isGreaterThanZero()", "testcase": false, "constructor": false}, {"identifier": "isLessThan", "parameters": "(final Money magnitude)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isLessThan(final Money magnitude)", "full_signature": "@Override public boolean isLessThan(final Money magnitude)", "class_method_signature": "Money.isLessThan(final Money magnitude)", "testcase": false, "constructor": false}, {"identifier": "isLessThanZero", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLessThanZero()", "full_signature": "public boolean isLessThanZero()", "class_method_signature": "Money.isLessThanZero()", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isZero()", "full_signature": "public boolean isZero()", "class_method_signature": "Money.isZero()", "testcase": false, "constructor": false}, {"identifier": "longValue", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long longValue()", "full_signature": "public long longValue()", "class_method_signature": "Money.longValue()", "testcase": false, "constructor": false}, {"identifier": "newMoney", "parameters": "(final long amount)", "modifiers": "private", "return": "Money", "signature": "Money newMoney(final long amount)", "full_signature": "private Money newMoney(final long amount)", "class_method_signature": "Money.newMoney(final long amount)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(final Money money)", "modifiers": "public", "return": "Money", "signature": "Money subtract(final Money money)", "full_signature": "public Money subtract(final Money money)", "class_method_signature": "Money.subtract(final Money money)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object other)", "full_signature": "@Override public boolean equals(final Object other)", "class_method_signature": "Money.equals(final Object other)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Money other)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(final Money other)", "full_signature": "public boolean equals(final Money other)", "class_method_signature": "Money.equals(final Money other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Money.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Money.toString()", "testcase": false, "constructor": false}], "file": "legacy/extensions/core/applib/src/main/java/org/apache/isis/legacy/applib/value/Money.java"}, "focal_method": {"identifier": "isEqualTo", "parameters": "(final Money magnitude)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isEqualTo(final Money magnitude) {\n        if (!hasSameCurrency(magnitude)) {\n            throw new IllegalArgumentException(\"Parameter must be of type Money and have the same currency\");\n        }\n        return (magnitude).amount == amount;\n    }", "signature": "boolean isEqualTo(final Money magnitude)", "full_signature": "@Override public boolean isEqualTo(final Money magnitude)", "class_method_signature": "Money.isEqualTo(final Money magnitude)", "testcase": false, "constructor": false, "invocations": ["hasSameCurrency"]}, "repository": {"repo_id": 6935442, "url": "https://github.com/apache/isis", "stars": 516, "created": "11/30/2012 8:00:24 AM +00:00", "updates": "2020-01-27T13:28:09+00:00", "fork": "False", "license": "licensed"}}