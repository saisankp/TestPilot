{"test_class": {"identifier": "JVMUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "collections/src/test/java/com/turbospaces/core/JVMUtilTest.java"}, "test_case": {"identifier": "canGetExceptionsConcurenly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void canGetExceptionsConcurenly() {\n        assertThat( JVMUtil.repeatConcurrently( Runtime.getRuntime().availableProcessors(), 100, new Runnable() {\n            AtomicInteger counter = new AtomicInteger();\n\n            @Override\n            public void run() {\n                if ( counter.incrementAndGet() % 2 == 0 )\n                    throw new IllegalStateException( \"exception\" );\n            }\n        } ).size(), is( greaterThan( 0 ) ) );\n    }", "signature": "void canGetExceptionsConcurenly()", "full_signature": "@Test public void canGetExceptionsConcurenly()", "class_method_signature": "JVMUtilTest.canGetExceptionsConcurenly()", "testcase": true, "constructor": false, "invocations": ["assertThat", "size", "repeatConcurrently", "availableProcessors", "getRuntime", "incrementAndGet", "is", "greaterThan"]}, "focal_class": {"identifier": "JVMUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "gc", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void gc()", "full_signature": "public static void gc()", "class_method_signature": "JVMUtil.gc()", "testcase": false, "constructor": false}, {"identifier": "gcOnExit", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void gcOnExit()", "full_signature": "public static void gcOnExit()", "class_method_signature": "JVMUtil.gcOnExit()", "testcase": false, "constructor": false}, {"identifier": "fieldFor", "parameters": "(final Class<?> clazz,\n                                 final String name)", "modifiers": "public static", "return": "Field", "signature": "Field fieldFor(final Class<?> clazz,\n                                 final String name)", "full_signature": "public static Field fieldFor(final Class<?> clazz,\n                                 final String name)", "class_method_signature": "JVMUtil.fieldFor(final Class<?> clazz,\n                                 final String name)", "testcase": false, "constructor": false}, {"identifier": "getPropertyValueUnsafe", "parameters": "(final Object source,\n                                               final Class<T> valueType,\n                                               final long fieldOffset)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T getPropertyValueUnsafe(final Object source,\n                                               final Class<T> valueType,\n                                               final long fieldOffset)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T getPropertyValueUnsafe(final Object source,\n                                               final Class<T> valueType,\n                                               final long fieldOffset)", "class_method_signature": "JVMUtil.getPropertyValueUnsafe(final Object source,\n                                               final Class<T> valueType,\n                                               final long fieldOffset)", "testcase": false, "constructor": false}, {"identifier": "setPropertyValueUnsafe", "parameters": "(final Object source,\n                                                  final T value,\n                                                  final Class<T> valueType,\n                                                  final long fieldOffset)", "modifiers": "public static", "return": "void", "signature": "void setPropertyValueUnsafe(final Object source,\n                                                  final T value,\n                                                  final Class<T> valueType,\n                                                  final long fieldOffset)", "full_signature": "public static void setPropertyValueUnsafe(final Object source,\n                                                  final T value,\n                                                  final Class<T> valueType,\n                                                  final long fieldOffset)", "class_method_signature": "JVMUtil.setPropertyValueUnsafe(final Object source,\n                                                  final T value,\n                                                  final Class<T> valueType,\n                                                  final long fieldOffset)", "testcase": false, "constructor": false}, {"identifier": "runAndGetExecutionException", "parameters": "(final Runnable runnable)", "modifiers": "public static", "return": "Exception", "signature": "Exception runAndGetExecutionException(final Runnable runnable)", "full_signature": "public static Exception runAndGetExecutionException(final Runnable runnable)", "class_method_signature": "JVMUtil.runAndGetExecutionException(final Runnable runnable)", "testcase": false, "constructor": false}, {"identifier": "repeatConcurrently", "parameters": "(final int threads,\n                                                         final int totalIterationsCount,\n                                                         final Function<Integer, Object> task)", "modifiers": "public static", "return": "List<Throwable>", "signature": "List<Throwable> repeatConcurrently(final int threads,\n                                                         final int totalIterationsCount,\n                                                         final Function<Integer, Object> task)", "full_signature": "public static List<Throwable> repeatConcurrently(final int threads,\n                                                         final int totalIterationsCount,\n                                                         final Function<Integer, Object> task)", "class_method_signature": "JVMUtil.repeatConcurrently(final int threads,\n                                                         final int totalIterationsCount,\n                                                         final Function<Integer, Object> task)", "testcase": false, "constructor": false}, {"identifier": "repeatConcurrently", "parameters": "(final int threads,\n                                                         final int totalIterationsCount,\n                                                         final Runnable task)", "modifiers": "public static", "return": "List<Throwable>", "signature": "List<Throwable> repeatConcurrently(final int threads,\n                                                         final int totalIterationsCount,\n                                                         final Runnable task)", "full_signature": "public static List<Throwable> repeatConcurrently(final int threads,\n                                                         final int totalIterationsCount,\n                                                         final Runnable task)", "class_method_signature": "JVMUtil.repeatConcurrently(final int threads,\n                                                         final int totalIterationsCount,\n                                                         final Runnable task)", "testcase": false, "constructor": false}, {"identifier": "murmurRehash", "parameters": "(final int hash)", "modifiers": "public static", "return": "int", "signature": "int murmurRehash(final int hash)", "full_signature": "public static int murmurRehash(final int hash)", "class_method_signature": "JVMUtil.murmurRehash(final int hash)", "testcase": false, "constructor": false}, {"identifier": "jdkRehash", "parameters": "(final int hash)", "modifiers": "public static", "return": "int", "signature": "int jdkRehash(final int hash)", "full_signature": "public static int jdkRehash(final int hash)", "class_method_signature": "JVMUtil.jdkRehash(final int hash)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o1,\n                                 final Object o2)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(final Object o1,\n                                 final Object o2)", "full_signature": "public static boolean equals(final Object o1,\n                                 final Object o2)", "class_method_signature": "JVMUtil.equals(final Object o1,\n                                 final Object o2)", "testcase": false, "constructor": false}, {"identifier": "ensureEnoughMemoryCapacity", "parameters": "(final ByteArrayPointer pointer,\n                                                  final CapacityRestriction capacityRestriction,\n                                                  final Sequence memoryUsed)", "modifiers": "public static", "return": "void", "signature": "void ensureEnoughMemoryCapacity(final ByteArrayPointer pointer,\n                                                  final CapacityRestriction capacityRestriction,\n                                                  final Sequence memoryUsed)", "full_signature": "public static void ensureEnoughMemoryCapacity(final ByteArrayPointer pointer,\n                                                  final CapacityRestriction capacityRestriction,\n                                                  final Sequence memoryUsed)", "class_method_signature": "JVMUtil.ensureEnoughMemoryCapacity(final ByteArrayPointer pointer,\n                                                  final CapacityRestriction capacityRestriction,\n                                                  final Sequence memoryUsed)", "testcase": false, "constructor": false}, {"identifier": "ensureEnoughCapacity", "parameters": "(final Object obj,\n                                            final CapacityRestriction capacityRestriction,\n                                            final Sequence itemsCount)", "modifiers": "public static", "return": "void", "signature": "void ensureEnoughCapacity(final Object obj,\n                                            final CapacityRestriction capacityRestriction,\n                                            final Sequence itemsCount)", "full_signature": "public static void ensureEnoughCapacity(final Object obj,\n                                            final CapacityRestriction capacityRestriction,\n                                            final Sequence itemsCount)", "class_method_signature": "JVMUtil.ensureEnoughCapacity(final Object obj,\n                                            final CapacityRestriction capacityRestriction,\n                                            final Sequence itemsCount)", "testcase": false, "constructor": false}, {"identifier": "JVMUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " JVMUtil()", "full_signature": "private  JVMUtil()", "class_method_signature": "JVMUtil.JVMUtil()", "testcase": false, "constructor": true}], "file": "collections/src/main/java/com/turbospaces/core/JVMUtil.java"}, "focal_method": {"identifier": "repeatConcurrently", "parameters": "(final int threads,\n                                                         final int totalIterationsCount,\n                                                         final Function<Integer, Object> task)", "modifiers": "public static", "return": "List<Throwable>", "body": "public static <T> List<Throwable> repeatConcurrently(final int threads,\n                                                         final int totalIterationsCount,\n                                                         final Function<Integer, Object> task) {\n        final AtomicInteger atomicLong = new AtomicInteger( totalIterationsCount );\n        final CountDownLatch countDownLatch = new CountDownLatch( threads );\n        final LinkedList<Throwable> errors = Lists.newLinkedList();\n        for ( int j = 0; j < threads; j++ ) {\n            Thread thread = new Thread( new Runnable() {\n\n                @Override\n                public void run() {\n                    try {\n                        int l;\n                        while ( ( l = atomicLong.decrementAndGet() ) >= 0 )\n                            try {\n                                task.apply( l );\n                            }\n                            catch ( Throwable e ) {\n                                Log.error( e.getMessage(), e );\n                                errors.add( e );\n                                Throwables.propagate( e );\n                            }\n                    }\n                    finally {\n                        countDownLatch.countDown();\n                    }\n                }\n            } );\n            thread.setName( String.format( \"RepeateConcurrentlyThread-%s:{%s}\", j, task.toString() ) );\n            thread.start();\n        }\n        Uninterruptibles.awaitUninterruptibly( countDownLatch );\n        return errors;\n    }", "signature": "List<Throwable> repeatConcurrently(final int threads,\n                                                         final int totalIterationsCount,\n                                                         final Function<Integer, Object> task)", "full_signature": "public static List<Throwable> repeatConcurrently(final int threads,\n                                                         final int totalIterationsCount,\n                                                         final Function<Integer, Object> task)", "class_method_signature": "JVMUtil.repeatConcurrently(final int threads,\n                                                         final int totalIterationsCount,\n                                                         final Function<Integer, Object> task)", "testcase": false, "constructor": false, "invocations": ["newLinkedList", "decrementAndGet", "apply", "error", "getMessage", "add", "propagate", "countDown", "setName", "format", "toString", "start", "awaitUninterruptibly"]}, "repository": {"repo_id": 4242398, "url": "https://github.com/turbospaces/turbospaces", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 915, "license": "licensed"}}