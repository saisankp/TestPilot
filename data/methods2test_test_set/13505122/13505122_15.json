{"test_class": {"identifier": "ThreadsEngineTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mocked ThreadsTopology topology;", "modifier": "@Mocked", "type": "ThreadsTopology", "declarator": "topology", "var_name": "topology"}, {"original_string": "private final int numThreads = 4;", "modifier": "private final", "type": "int", "declarator": "numThreads = 4", "var_name": "numThreads"}, {"original_string": "private final int numThreadsSmaller = 3;", "modifier": "private final", "type": "int", "declarator": "numThreadsSmaller = 3", "var_name": "numThreadsSmaller"}, {"original_string": "private final int numThreadsLarger = 5;", "modifier": "private final", "type": "int", "declarator": "numThreadsLarger = 5", "var_name": "numThreadsLarger"}], "file": "samoa-threads/src/test/java/com/yahoo/labs/samoa/topology/impl/ThreadsEngineTest.java"}, "test_case": {"identifier": "testSetNumberOfThreadsZero", "parameters": "()", "modifiers": "@Test(expected=IllegalStateException.class) public", "return": "void", "body": "@Test(expected=IllegalStateException.class)\n\tpublic void testSetNumberOfThreadsZero() {\n\t\tThreadsEngine.setNumberOfThreads(0);\n\t\t// Exception expected\n\t}", "signature": "void testSetNumberOfThreadsZero()", "full_signature": "@Test(expected=IllegalStateException.class) public void testSetNumberOfThreadsZero()", "class_method_signature": "ThreadsEngineTest.testSetNumberOfThreadsZero()", "testcase": true, "constructor": false, "invocations": ["setNumberOfThreads"]}, "focal_class": {"identifier": "ThreadsEngine", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<ExecutorService> threadPool = new ArrayList<ExecutorService>();", "modifier": "private static final", "type": "List<ExecutorService>", "declarator": "threadPool = new ArrayList<ExecutorService>()", "var_name": "threadPool"}], "methods": [{"identifier": "setNumberOfThreads", "parameters": "(int numThreads)", "modifiers": "public static", "return": "void", "signature": "void setNumberOfThreads(int numThreads)", "full_signature": "public static void setNumberOfThreads(int numThreads)", "class_method_signature": "ThreadsEngine.setNumberOfThreads(int numThreads)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfThreads", "parameters": "()", "modifiers": "public static", "return": "int", "signature": "int getNumberOfThreads()", "full_signature": "public static int getNumberOfThreads()", "class_method_signature": "ThreadsEngine.getNumberOfThreads()", "testcase": false, "constructor": false}, {"identifier": "getThreadWithIndex", "parameters": "(int index)", "modifiers": "public static", "return": "ExecutorService", "signature": "ExecutorService getThreadWithIndex(int index)", "full_signature": "public static ExecutorService getThreadWithIndex(int index)", "class_method_signature": "ThreadsEngine.getThreadWithIndex(int index)", "testcase": false, "constructor": false}, {"identifier": "submitTopology", "parameters": "(Topology topology)", "modifiers": "private static", "return": "void", "signature": "void submitTopology(Topology topology)", "full_signature": "private static void submitTopology(Topology topology)", "class_method_signature": "ThreadsEngine.submitTopology(Topology topology)", "testcase": false, "constructor": false}, {"identifier": "submitTopology", "parameters": "(Topology topology, int numThreads)", "modifiers": "public static", "return": "void", "signature": "void submitTopology(Topology topology, int numThreads)", "full_signature": "public static void submitTopology(Topology topology, int numThreads)", "class_method_signature": "ThreadsEngine.submitTopology(Topology topology, int numThreads)", "testcase": false, "constructor": false}, {"identifier": "clearThreadPool", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void clearThreadPool()", "full_signature": "public static void clearThreadPool()", "class_method_signature": "ThreadsEngine.clearThreadPool()", "testcase": false, "constructor": false}], "file": "samoa-threads/src/main/java/com/yahoo/labs/samoa/topology/impl/ThreadsEngine.java"}, "focal_method": {"identifier": "setNumberOfThreads", "parameters": "(int numThreads)", "modifiers": "public static", "return": "void", "body": "public static void setNumberOfThreads(int numThreads) {\n\t\tif (numThreads < 1)\n\t\t\tthrow new IllegalStateException(\"Number of threads must be a positive integer.\");\n\t\t\n\t\tif (threadPool.size() > numThreads)\n\t\t\tthrow new IllegalStateException(\"You cannot set a numThreads smaller than the current size of the threads pool.\");\n\t\t\n\t\tif (threadPool.size() < numThreads) {\n\t\t\tfor (int i=threadPool.size(); i<numThreads; i++) {\n\t\t\t\tthreadPool.add(Executors.newSingleThreadExecutor());\n\t\t\t}\n\t\t}\n\t}", "signature": "void setNumberOfThreads(int numThreads)", "full_signature": "public static void setNumberOfThreads(int numThreads)", "class_method_signature": "ThreadsEngine.setNumberOfThreads(int numThreads)", "testcase": false, "constructor": false, "invocations": ["size", "size", "size", "add", "newSingleThreadExecutor"]}, "repository": {"repo_id": 13505122, "url": "https://github.com/YahooArchive/samoa", "language": "Java", "is_fork": false, "fork_count": 82, "stargazer_count": 424, "size": 6642, "license": "licensed"}}