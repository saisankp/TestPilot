{"test_class": {"identifier": "RateServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String BRE = \"BRE\";", "modifier": "private static final", "type": "String", "declarator": "BRE = \"BRE\"", "var_name": "BRE"}, {"original_string": "@Autowired\n\tprivate HistoricalRateRepository histoRepo;", "modifier": "@Autowired\n\tprivate", "type": "HistoricalRateRepository", "declarator": "histoRepo", "var_name": "histoRepo"}, {"original_string": "@Autowired\n\tprivate RateService rateService;", "modifier": "@Autowired\n\tprivate", "type": "RateService", "declarator": "rateService", "var_name": "rateService"}], "file": "trading-common/src/test/java/fr/ymanvieu/trading/common/rate/RateServiceTest.java"}, "test_case": {"identifier": "testAddHistoricalRates", "parameters": "()", "modifiers": "@Sql(\"/sql/insert_histo.sql\") @Test public", "return": "void", "body": "@Sql(\"/sql/insert_histo.sql\")\n\t@Test\n\tpublic void testAddHistoricalRates() {\n\t\t// given\n\t\tList<Quote> quotes = new ArrayList<>();\n\t\tquotes.add(new Quote(BRE, USD, new BigDecimal(\"58.3\"), parse(\"2015-04-09T02:00:00\")));\n\t\tquotes.add(new Quote(BRE, USD, new BigDecimal(\"57.8\"), parse(\"2015-04-08T02:00:00\")));\n\t\tquotes.add(new Quote(BRE, USD, new BigDecimal(\"55.18\"), parse(\"2015-04-07T02:00:00\")));\n\t\tquotes.add(new Quote(BRE, USD, new BigDecimal(\"56.72\"), parse(\"2015-04-03T02:00:00\")));\n\t\tquotes.add(new Quote(BRE, USD, new BigDecimal(\"55.18\"), parse(\"2015-04-02T02:00:00\")));\n\n\t\t// when\n\t\trateService.addHistoricalRates(quotes);\n\n\t\t// then\n\t\tassertThat(histoRepo.findAll()).hasSize(5);\n\t}", "signature": "void testAddHistoricalRates()", "full_signature": "@Sql(\"/sql/insert_histo.sql\") @Test public void testAddHistoricalRates()", "class_method_signature": "RateServiceTest.testAddHistoricalRates()", "testcase": true, "constructor": false, "invocations": ["add", "parse", "add", "parse", "add", "parse", "add", "parse", "add", "parse", "addHistoricalRates", "hasSize", "assertThat", "findAll"]}, "focal_class": {"identifier": "RateService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String BASE_CURRENCY = CurrencyUtils.USD;", "modifier": "private static final", "type": "String", "declarator": "BASE_CURRENCY = CurrencyUtils.USD", "var_name": "BASE_CURRENCY"}, {"original_string": "private static final Sort SORT_ASC_DATE = Sort.by(Direction.ASC, \"date\");", "modifier": "private static final", "type": "Sort", "declarator": "SORT_ASC_DATE = Sort.by(Direction.ASC, \"date\")", "var_name": "SORT_ASC_DATE"}, {"original_string": "private static final Sort SORT_DESC_DATE = Sort.by(Direction.DESC, \"date\");", "modifier": "private static final", "type": "Sort", "declarator": "SORT_DESC_DATE = Sort.by(Direction.DESC, \"date\")", "var_name": "SORT_DESC_DATE"}, {"original_string": "@Autowired\n\tprivate HistoricalRateRepository historicalRateRepository;", "modifier": "@Autowired\n\tprivate", "type": "HistoricalRateRepository", "declarator": "historicalRateRepository", "var_name": "historicalRateRepository"}, {"original_string": "@Autowired\n\tprivate LatestRateRepository latestRateRepository;", "modifier": "@Autowired\n\tprivate", "type": "LatestRateRepository", "declarator": "latestRateRepository", "var_name": "latestRateRepository"}, {"original_string": "@Autowired\n\tprivate SymbolRepository symbolRepository;", "modifier": "@Autowired\n\tprivate", "type": "SymbolRepository", "declarator": "symbolRepository", "var_name": "symbolRepository"}, {"original_string": "@Autowired\n\tprivate RateMapper rateMapper;", "modifier": "@Autowired\n\tprivate", "type": "RateMapper", "declarator": "rateMapper", "var_name": "rateMapper"}], "methods": [{"identifier": "getAllLatestWithFavorites", "parameters": "(String username)", "modifiers": "public", "return": "List<FavoriteRate>", "signature": "List<FavoriteRate> getAllLatestWithFavorites(String username)", "full_signature": "public List<FavoriteRate> getAllLatestWithFavorites(String username)", "class_method_signature": "RateService.getAllLatestWithFavorites(String username)", "testcase": false, "constructor": false}, {"identifier": "getOldestRateDate", "parameters": "(String fromcur, String tocur)", "modifiers": "public", "return": "Instant", "signature": "Instant getOldestRateDate(String fromcur, String tocur)", "full_signature": "public Instant getOldestRateDate(String fromcur, String tocur)", "class_method_signature": "RateService.getOldestRateDate(String fromcur, String tocur)", "testcase": false, "constructor": false}, {"identifier": "getNewestRateDate", "parameters": "(String fromcur, String tocur)", "modifiers": "public", "return": "Instant", "signature": "Instant getNewestRateDate(String fromcur, String tocur)", "full_signature": "public Instant getNewestRateDate(String fromcur, String tocur)", "class_method_signature": "RateService.getNewestRateDate(String fromcur, String tocur)", "testcase": false, "constructor": false}, {"identifier": "getLatest", "parameters": "(String fromcur, String tocur)", "modifiers": "public", "return": "Rate", "signature": "Rate getLatest(String fromcur, String tocur)", "full_signature": "public Rate getLatest(String fromcur, String tocur)", "class_method_signature": "RateService.getLatest(String fromcur, String tocur)", "testcase": false, "constructor": false}, {"identifier": "addLatestRate", "parameters": "(Quote quote)", "modifiers": "public", "return": "void", "signature": "void addLatestRate(Quote quote)", "full_signature": "public void addLatestRate(Quote quote)", "class_method_signature": "RateService.addLatestRate(Quote quote)", "testcase": false, "constructor": false}, {"identifier": "getHistoricalValues", "parameters": "(String fromcur, String tocur, Instant startDate, Instant endDate)", "modifiers": "public", "return": "List<DateValue>", "signature": "List<DateValue> getHistoricalValues(String fromcur, String tocur, Instant startDate, Instant endDate)", "full_signature": "public List<DateValue> getHistoricalValues(String fromcur, String tocur, Instant startDate, Instant endDate)", "class_method_signature": "RateService.getHistoricalValues(String fromcur, String tocur, Instant startDate, Instant endDate)", "testcase": false, "constructor": false}, {"identifier": "addHistoricalRates", "parameters": "(List<Quote> quotes)", "modifiers": "@Transactional public", "return": "void", "signature": "void addHistoricalRates(List<Quote> quotes)", "full_signature": "@Transactional public void addHistoricalRates(List<Quote> quotes)", "class_method_signature": "RateService.addHistoricalRates(List<Quote> quotes)", "testcase": false, "constructor": false}], "file": "trading-common/src/main/java/fr/ymanvieu/trading/common/rate/RateService.java"}, "focal_method": {"identifier": "addHistoricalRates", "parameters": "(List<Quote> quotes)", "modifiers": "@Transactional public", "return": "void", "body": "@Transactional\n\tpublic void addHistoricalRates(List<Quote> quotes) {\n\n\t\tList<HistoricalRate> ratesToAdd = new ArrayList<>();\n\n\t\tfor (Quote quote : quotes) {\n\n\t\t\tBooleanExpression exp = historicalRate.fromcur.code.eq(quote.getCode())\n\t\t\t\t\t.and(historicalRate.tocur.code.eq(quote.getCurrency()))\n\t\t\t\t\t.and(historicalRate.date.eq(quote.getTime()));\n\n\t\t\tif (!historicalRateRepository.exists(exp)) {\n\t\t\t\tSymbolEntity symbolCode = symbolRepository.findById(quote.getCode()).get();\n\t\t\t\tSymbolEntity symbolCurrency = symbolRepository.findById(quote.getCurrency()).get();\n\n\t\t\t\tratesToAdd.add(new HistoricalRate(symbolCode, symbolCurrency, quote.getPrice(), quote.getTime()));\n\t\t\t}\n\t\t}\n\n\t\thistoricalRateRepository.saveAll(ratesToAdd);\n\n\t\tlog.debug(\"{} saved\", ratesToAdd.size());\n\t}", "signature": "void addHistoricalRates(List<Quote> quotes)", "full_signature": "@Transactional public void addHistoricalRates(List<Quote> quotes)", "class_method_signature": "RateService.addHistoricalRates(List<Quote> quotes)", "testcase": false, "constructor": false, "invocations": ["and", "and", "eq", "getCode", "eq", "getCurrency", "eq", "getTime", "exists", "get", "findById", "getCode", "get", "findById", "getCurrency", "add", "getPrice", "getTime", "saveAll", "debug", "size"]}, "repository": {"repo_id": 51700398, "url": "https://github.com/ymanvieu/trading", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 988, "license": "licensed"}}