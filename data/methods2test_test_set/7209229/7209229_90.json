{"test_class": {"identifier": "TestBootstrapCheckpointHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String[] ONE_SOURCE = {\"source1\"};", "modifier": "private static final", "type": "String[]", "declarator": "ONE_SOURCE = {\"source1\"}", "var_name": "ONE_SOURCE"}, {"original_string": "private static final List<String> TWO_SOURCES = Arrays.asList(\"source1\", \"source2\");", "modifier": "private static final", "type": "List<String>", "declarator": "TWO_SOURCES = Arrays.asList(\"source1\", \"source2\")", "var_name": "TWO_SOURCES"}, {"original_string": "private static final String[] THREE_SOURCES = {\"Source1\", \"Source2\", \"Source3\"};", "modifier": "private static final", "type": "String[]", "declarator": "THREE_SOURCES = {\"Source1\", \"Source2\", \"Source3\"}", "var_name": "THREE_SOURCES"}, {"original_string": "private static final String[] MANY_SOURCES = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"};", "modifier": "private static final", "type": "String[]", "declarator": "MANY_SOURCES = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"}", "var_name": "MANY_SOURCES"}], "file": "databus-core/databus-core-impl/src/test/java/com/linkedin/databus/core/TestBootstrapCheckpointHandler.java"}, "test_case": {"identifier": "testBootstrapResetNewServers", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBootstrapResetNewServers()  // borrowed from similar V3 test\n  throws Exception\n  {\n    List<String> sourceNames = new ArrayList<String>();\n    final String firstSourceName = \"com.linkedin.events.example.Person\";\n    final int firstSourceIndex = 0;\n    sourceNames.add(firstSourceName);\n    final String catchupSourceName = \"com.linkedin.events.example.Place\";\n    final int catchupSourceIndex = 1;\n    sourceNames.add(catchupSourceName);\n    final String snapshotSourceName = \"com.linkedin.events.example.Thing\";\n    final int snapshotSourceIndex = 2;\n    sourceNames.add(snapshotSourceName);\n    BootstrapCheckpointHandler ckptHandler = new BootstrapCheckpointHandler(sourceNames);\n\n    final long targetScn = 129971;\n    final long sinceScn = 0;\n    final long windowOffset = 0;\n    final long prevScn = -1;\n    final long windowScn = 123456;\n    final long startScn = 123456;\n    final long snapshotOffset = -1;\n\n    Checkpoint ckpt = new Checkpoint();\n    ckpt.setConsumptionMode(DbusClientMode.BOOTSTRAP_SNAPSHOT);\n    ckpt.setBootstrapStartScn(startScn);\n    ckpt.setConsumptionMode(DbusClientMode.BOOTSTRAP_CATCHUP);\n    ckpt.setBootstrapTargetScn(targetScn);\n    ckpt.setBootstrapSinceScn(sinceScn);\n    ckpt.setWindowOffset(windowOffset);  // must set after targetScn if CATCHUP\n    ckpt.setPrevScn(prevScn);\n    ckpt.setWindowScn(windowScn);\n    ckpt.setSnapshotOffset(snapshotOffset);\n\n    // no public setter for source names, so use introspection instead\n    Class[] params = new Class[2];\n    params[0] = Integer.TYPE;\n    params[1] = String.class;\n    Method setSnapshotSourceMethod = Checkpoint.class.getDeclaredMethod(\"setSnapshotSource\", params);\n    Method setCatchupSourceMethod  = Checkpoint.class.getDeclaredMethod(\"setCatchupSource\", params);\n    setSnapshotSourceMethod.setAccessible(true);\n    setCatchupSourceMethod.setAccessible(true);\n    setSnapshotSourceMethod.invoke(ckpt, snapshotSourceIndex, snapshotSourceName);\n    setCatchupSourceMethod.invoke(ckpt, catchupSourceIndex, catchupSourceName);\n\n    ckptHandler.resetForServerChange(ckpt);\n\n    Assert.assertEquals(ckpt.getConsumptionMode(), DbusClientMode.BOOTSTRAP_SNAPSHOT);\n    Assert.assertEquals(ckpt.getBootstrapSinceScn().longValue(), sinceScn);\n    // TODO/FIXME:  for next three, check for exact values or just assertNotEquals against original values?\n    Assert.assertEquals(ckpt.getBootstrapStartScn().longValue(), -1);\n    Assert.assertEquals(ckpt.getBootstrapTargetScn().longValue(), -1);\n    Assert.assertEquals(ckpt.getSnapshotOffset().longValue(), 0);\n    // expect indices both reset to 0, and therefore, for consistency, names both reset to corresponding source name:\n    Assert.assertEquals(ckpt.getBootstrapSnapshotSourceIndex().intValue(), firstSourceIndex);\n    Assert.assertEquals(ckpt.getBootstrapCatchupSourceIndex().intValue(), firstSourceIndex);\n    Assert.assertEquals(ckpt.getSnapshotSource(), firstSourceName);\n    Assert.assertEquals(ckpt.getCatchupSource(), firstSourceName);\n  }", "signature": "void testBootstrapResetNewServers()", "full_signature": "@Test public void testBootstrapResetNewServers()", "class_method_signature": "TestBootstrapCheckpointHandler.testBootstrapResetNewServers()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "setConsumptionMode", "setBootstrapStartScn", "setConsumptionMode", "setBootstrapTargetScn", "setBootstrapSinceScn", "setWindowOffset", "setPrevScn", "setWindowScn", "setSnapshotOffset", "getDeclaredMethod", "getDeclaredMethod", "setAccessible", "setAccessible", "invoke", "invoke", "resetForServerChange", "assertEquals", "getConsumptionMode", "assertEquals", "longValue", "getBootstrapSinceScn", "assertEquals", "longValue", "getBootstrapStartScn", "assertEquals", "longValue", "getBootstrapTargetScn", "assertEquals", "longValue", "getSnapshotOffset", "assertEquals", "intValue", "getBootstrapSnapshotSourceIndex", "assertEquals", "intValue", "getBootstrapCatchupSourceIndex", "assertEquals", "getSnapshotSource", "assertEquals", "getCatchupSource"]}, "focal_class": {"identifier": "BootstrapCheckpointHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String[] _sourceNames;", "modifier": "private", "type": "String[]", "declarator": "_sourceNames", "var_name": "_sourceNames"}], "methods": [{"identifier": "BootstrapCheckpointHandler", "parameters": "(List<String> sourceNames)", "modifiers": "public", "return": "", "signature": " BootstrapCheckpointHandler(List<String> sourceNames)", "full_signature": "public  BootstrapCheckpointHandler(List<String> sourceNames)", "class_method_signature": "BootstrapCheckpointHandler.BootstrapCheckpointHandler(List<String> sourceNames)", "testcase": false, "constructor": true}, {"identifier": "BootstrapCheckpointHandler", "parameters": "(String... sourceNames)", "modifiers": "public", "return": "", "signature": " BootstrapCheckpointHandler(String... sourceNames)", "full_signature": "public  BootstrapCheckpointHandler(String... sourceNames)", "class_method_signature": "BootstrapCheckpointHandler.BootstrapCheckpointHandler(String... sourceNames)", "testcase": false, "constructor": true}, {"identifier": "setSourceNames", "parameters": "(List<String> sourceNames)", "modifiers": "public", "return": "void", "signature": "void setSourceNames(List<String> sourceNames)", "full_signature": "public void setSourceNames(List<String> sourceNames)", "class_method_signature": "BootstrapCheckpointHandler.setSourceNames(List<String> sourceNames)", "testcase": false, "constructor": false}, {"identifier": "needsMoreCatchup", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "boolean", "signature": "boolean needsMoreCatchup(Checkpoint ckpt)", "full_signature": "public boolean needsMoreCatchup(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.needsMoreCatchup(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "needsMoreSnapshot", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "boolean", "signature": "boolean needsMoreSnapshot(Checkpoint ckpt)", "full_signature": "public boolean needsMoreSnapshot(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.needsMoreSnapshot(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "createInitialBootstrapCheckpoint", "parameters": "(Checkpoint ckpt, Long sinceScn)", "modifiers": "public", "return": "Checkpoint", "signature": "Checkpoint createInitialBootstrapCheckpoint(Checkpoint ckpt, Long sinceScn)", "full_signature": "public Checkpoint createInitialBootstrapCheckpoint(Checkpoint ckpt, Long sinceScn)", "class_method_signature": "BootstrapCheckpointHandler.createInitialBootstrapCheckpoint(Checkpoint ckpt, Long sinceScn)", "testcase": false, "constructor": false}, {"identifier": "needsMoreCowbell", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "boolean", "signature": "boolean needsMoreCowbell(Checkpoint ckpt)", "full_signature": "public boolean needsMoreCowbell(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.needsMoreCowbell(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "finalizeSnapshotPhase", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "void", "signature": "void finalizeSnapshotPhase(Checkpoint ckpt)", "full_signature": "public void finalizeSnapshotPhase(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.finalizeSnapshotPhase(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "finalizeCatchupPhase", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "void", "signature": "void finalizeCatchupPhase(Checkpoint ckpt)", "full_signature": "public void finalizeCatchupPhase(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.finalizeCatchupPhase(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "advanceAfterSnapshotPhase", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "void", "signature": "void advanceAfterSnapshotPhase(Checkpoint ckpt)", "full_signature": "public void advanceAfterSnapshotPhase(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.advanceAfterSnapshotPhase(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "advanceAfterCatchupPhase", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "void", "signature": "void advanceAfterCatchupPhase(Checkpoint ckpt)", "full_signature": "public void advanceAfterCatchupPhase(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.advanceAfterCatchupPhase(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "advanceAfterTargetScn", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "void", "signature": "void advanceAfterTargetScn(Checkpoint ckpt)", "full_signature": "public void advanceAfterTargetScn(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.advanceAfterTargetScn(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "assertBootstrapCheckpoint", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "boolean", "signature": "boolean assertBootstrapCheckpoint(Checkpoint ckpt)", "full_signature": "public boolean assertBootstrapCheckpoint(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.assertBootstrapCheckpoint(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "resetForServerChange", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "void", "signature": "void resetForServerChange(Checkpoint ckpt)", "full_signature": "public void resetForServerChange(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.resetForServerChange(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "startCatchupSource", "parameters": "(Checkpoint ckpt)", "modifiers": "private", "return": "void", "signature": "void startCatchupSource(Checkpoint ckpt)", "full_signature": "private void startCatchupSource(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.startCatchupSource(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "startNextSnapshotSource", "parameters": "(Checkpoint ckpt)", "modifiers": "private", "return": "void", "signature": "void startNextSnapshotSource(Checkpoint ckpt)", "full_signature": "private void startNextSnapshotSource(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.startNextSnapshotSource(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "assertSnapshotCheckpoint", "parameters": "(Checkpoint ckpt)", "modifiers": "private", "return": "boolean", "signature": "boolean assertSnapshotCheckpoint(Checkpoint ckpt)", "full_signature": "private boolean assertSnapshotCheckpoint(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.assertSnapshotCheckpoint(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "validateSnapshotSourceIndex", "parameters": "(int snapshotSourceIndex, Checkpoint ckpt)", "modifiers": "private", "return": "void", "signature": "void validateSnapshotSourceIndex(int snapshotSourceIndex, Checkpoint ckpt)", "full_signature": "private void validateSnapshotSourceIndex(int snapshotSourceIndex, Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.validateSnapshotSourceIndex(int snapshotSourceIndex, Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "assertSnapshotSourceIndex", "parameters": "(Checkpoint ckpt)", "modifiers": "private", "return": "void", "signature": "void assertSnapshotSourceIndex(Checkpoint ckpt)", "full_signature": "private void assertSnapshotSourceIndex(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.assertSnapshotSourceIndex(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "assertCatchupCheckpoint", "parameters": "(Checkpoint ckpt)", "modifiers": "private", "return": "boolean", "signature": "boolean assertCatchupCheckpoint(Checkpoint ckpt)", "full_signature": "private boolean assertCatchupCheckpoint(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.assertCatchupCheckpoint(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "assertCatchupSourceIndex", "parameters": "(Checkpoint ckpt)", "modifiers": "private", "return": "void", "signature": "void assertCatchupSourceIndex(Checkpoint ckpt)", "full_signature": "private void assertCatchupSourceIndex(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.assertCatchupSourceIndex(Checkpoint ckpt)", "testcase": false, "constructor": false}, {"identifier": "setCatchupSource", "parameters": "(Checkpoint ckpt, int catchupSourceIndex)", "modifiers": "private", "return": "void", "signature": "void setCatchupSource(Checkpoint ckpt, int catchupSourceIndex)", "full_signature": "private void setCatchupSource(Checkpoint ckpt, int catchupSourceIndex)", "class_method_signature": "BootstrapCheckpointHandler.setCatchupSource(Checkpoint ckpt, int catchupSourceIndex)", "testcase": false, "constructor": false}, {"identifier": "setSnapshotSource", "parameters": "(Checkpoint ckpt, int snapshotSourceIndex)", "modifiers": "private", "return": "void", "signature": "void setSnapshotSource(Checkpoint ckpt, int snapshotSourceIndex)", "full_signature": "private void setSnapshotSource(Checkpoint ckpt, int snapshotSourceIndex)", "class_method_signature": "BootstrapCheckpointHandler.setSnapshotSource(Checkpoint ckpt, int snapshotSourceIndex)", "testcase": false, "constructor": false}, {"identifier": "getSourcesNamesListLength", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int getSourcesNamesListLength()", "full_signature": "private int getSourcesNamesListLength()", "class_method_signature": "BootstrapCheckpointHandler.getSourcesNamesListLength()", "testcase": false, "constructor": false}, {"identifier": "setStartScnAfterServerChange", "parameters": "(Checkpoint ckpt, Long startScn)", "modifiers": "public", "return": "void", "signature": "void setStartScnAfterServerChange(Checkpoint ckpt, Long startScn)", "full_signature": "public void setStartScnAfterServerChange(Checkpoint ckpt, Long startScn)", "class_method_signature": "BootstrapCheckpointHandler.setStartScnAfterServerChange(Checkpoint ckpt, Long startScn)", "testcase": false, "constructor": false}], "file": "databus-core/databus-core-impl/src/main/java/com/linkedin/databus/core/BootstrapCheckpointHandler.java"}, "focal_method": {"identifier": "resetForServerChange", "parameters": "(Checkpoint ckpt)", "modifiers": "public", "return": "void", "body": "public void resetForServerChange(Checkpoint ckpt)\n  {\n    ckpt.resetForServerChange();\n\n    // The Checkpoint class doesn't know about _sourceNames, so it may have set SNAPSHOT_SOURCE\n    // and BOOTSTRAP_SNAPSHOT_SOURCE_INDEX (and/or the CATCHUP equivalents) inconsistently with\n    // _sourceNames[].  We're authoritative, so fix that by fixing the checkpoint's source names.\n    // (Also see TODO near the top of this class.)\n    final int snapshotSourceIndex = ckpt.getBootstrapSnapshotSourceIndex();\n    final int catchupSourceIndex = ckpt.getBootstrapCatchupSourceIndex();\n    setSnapshotSource(ckpt, snapshotSourceIndex);\n    setCatchupSource(ckpt, catchupSourceIndex);\n  }", "signature": "void resetForServerChange(Checkpoint ckpt)", "full_signature": "public void resetForServerChange(Checkpoint ckpt)", "class_method_signature": "BootstrapCheckpointHandler.resetForServerChange(Checkpoint ckpt)", "testcase": false, "constructor": false, "invocations": ["resetForServerChange", "getBootstrapSnapshotSourceIndex", "getBootstrapCatchupSourceIndex", "setSnapshotSource", "setCatchupSource"]}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}