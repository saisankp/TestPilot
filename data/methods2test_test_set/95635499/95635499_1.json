{"test_class": {"identifier": "LearnPatternSimilarityClassifierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LearnPatternSimilarityClassifier classifier;", "modifier": "private", "type": "LearnPatternSimilarityClassifier", "declarator": "classifier", "var_name": "classifier"}, {"original_string": "private static final int NUM_SEGMENTS = 1;", "modifier": "private static final", "type": "int", "declarator": "NUM_SEGMENTS = 1", "var_name": "NUM_SEGMENTS"}, {"original_string": "private static final int NUM_TREES = 2;", "modifier": "private static final", "type": "int", "declarator": "NUM_TREES = 2", "var_name": "NUM_TREES"}, {"original_string": "private static final int MAX_TREE_DEPTH = 10;", "modifier": "private static final", "type": "int", "declarator": "MAX_TREE_DEPTH = 10", "var_name": "MAX_TREE_DEPTH"}], "file": "JAICore/jaicore-ml-weka/src/test/java/ai/libs/jaicore/ml/classification/singlelabel/timeseries/learner/trees/LearnPatternSimilarityClassifierTest.java"}, "test_case": {"identifier": "findNearestInstanceIndexTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void findNearestInstanceIndexTest() {\n\t\t// Prepare test data with 2 instances, NUM_TREES trees with NUM_SEGMENTS segments\n\t\tfinal int[][][] trainLeafNodes = new int[][][] {{{5}, {3}}, {{4}, {5}}};\n\t\tclassifier.setTrainLeafNodes(trainLeafNodes);\n\t\t\n\t\tfinal int[][] testLeafNodes = new int[][] { { 4 }, { 4 } };\n\t\t\n\t\tAssert.assertEquals(\"The nearest neighbor instance test selected the wrong instance.\", 1,\n\t\t\t\tclassifier.findNearestInstanceIndex(testLeafNodes));\n\t}", "signature": "void findNearestInstanceIndexTest()", "full_signature": "@Test public void findNearestInstanceIndexTest()", "class_method_signature": "LearnPatternSimilarityClassifierTest.findNearestInstanceIndexTest()", "testcase": true, "constructor": false, "invocations": ["setTrainLeafNodes", "assertEquals", "findNearestInstanceIndex"]}, "focal_class": {"identifier": "LearnPatternSimilarityClassifier", "superclass": "extends ASimplifiedTSClassifier<Integer>", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(LearnPatternSimilarityClassifier.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(LearnPatternSimilarityClassifier.class)", "var_name": "LOGGER"}, {"original_string": "private int[][] segments;", "modifier": "private", "type": "int[][]", "declarator": "segments", "var_name": "segments"}, {"original_string": "private int[][] segmentsDifference;", "modifier": "private", "type": "int[][]", "declarator": "segmentsDifference", "var_name": "segmentsDifference"}, {"original_string": "private int[] lengthPerTree;", "modifier": "private", "type": "int[]", "declarator": "lengthPerTree", "var_name": "lengthPerTree"}, {"original_string": "private int[] classAttIndexPerTree;", "modifier": "private", "type": "int[]", "declarator": "classAttIndexPerTree", "var_name": "classAttIndexPerTree"}, {"original_string": "private AccessibleRandomTree[] trees;", "modifier": "private", "type": "AccessibleRandomTree[]", "declarator": "trees", "var_name": "trees"}, {"original_string": "private int[][][] trainLeafNodes;", "modifier": "private", "type": "int[][][]", "declarator": "trainLeafNodes", "var_name": "trainLeafNodes"}, {"original_string": "private int[] trainTargets;", "modifier": "private", "type": "int[]", "declarator": "trainTargets", "var_name": "trainTargets"}, {"original_string": "private List<Attribute> attributes;", "modifier": "private", "type": "List<Attribute>", "declarator": "attributes", "var_name": "attributes"}, {"original_string": "private final IPatternSimilarityConfig config;", "modifier": "private final", "type": "IPatternSimilarityConfig", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "LearnPatternSimilarityClassifier", "parameters": "(final int seed, final int numTrees, final int maxTreeDepth, final int numSegments)", "modifiers": "public", "return": "", "signature": " LearnPatternSimilarityClassifier(final int seed, final int numTrees, final int maxTreeDepth, final int numSegments)", "full_signature": "public  LearnPatternSimilarityClassifier(final int seed, final int numTrees, final int maxTreeDepth, final int numSegments)", "class_method_signature": "LearnPatternSimilarityClassifier.LearnPatternSimilarityClassifier(final int seed, final int numTrees, final int maxTreeDepth, final int numSegments)", "testcase": false, "constructor": true}, {"identifier": "predict", "parameters": "(final double[] univInstance)", "modifiers": "@Override public", "return": "Integer", "signature": "Integer predict(final double[] univInstance)", "full_signature": "@Override public Integer predict(final double[] univInstance)", "class_method_signature": "LearnPatternSimilarityClassifier.predict(final double[] univInstance)", "testcase": false, "constructor": false}, {"identifier": "findNearestInstanceIndex", "parameters": "(final int[][] leafNodeCounts)", "modifiers": "public", "return": "int", "signature": "int findNearestInstanceIndex(final int[][] leafNodeCounts)", "full_signature": "public int findNearestInstanceIndex(final int[][] leafNodeCounts)", "class_method_signature": "LearnPatternSimilarityClassifier.findNearestInstanceIndex(final int[][] leafNodeCounts)", "testcase": false, "constructor": false}, {"identifier": "predict", "parameters": "(final List<double[]> multivInstance)", "modifiers": "@Override public", "return": "Integer", "signature": "Integer predict(final List<double[]> multivInstance)", "full_signature": "@Override public Integer predict(final List<double[]> multivInstance)", "class_method_signature": "LearnPatternSimilarityClassifier.predict(final List<double[]> multivInstance)", "testcase": false, "constructor": false}, {"identifier": "predict", "parameters": "(final TimeSeriesDataset2 dataset)", "modifiers": "@Override public", "return": "List<Integer>", "signature": "List<Integer> predict(final TimeSeriesDataset2 dataset)", "full_signature": "@Override public List<Integer> predict(final TimeSeriesDataset2 dataset)", "class_method_signature": "LearnPatternSimilarityClassifier.predict(final TimeSeriesDataset2 dataset)", "testcase": false, "constructor": false}, {"identifier": "getSegments", "parameters": "()", "modifiers": "public", "return": "int[][]", "signature": "int[][] getSegments()", "full_signature": "public int[][] getSegments()", "class_method_signature": "LearnPatternSimilarityClassifier.getSegments()", "testcase": false, "constructor": false}, {"identifier": "setSegments", "parameters": "(final int[][] segments)", "modifiers": "public", "return": "void", "signature": "void setSegments(final int[][] segments)", "full_signature": "public void setSegments(final int[][] segments)", "class_method_signature": "LearnPatternSimilarityClassifier.setSegments(final int[][] segments)", "testcase": false, "constructor": false}, {"identifier": "getSegmentsDifference", "parameters": "()", "modifiers": "public", "return": "int[][]", "signature": "int[][] getSegmentsDifference()", "full_signature": "public int[][] getSegmentsDifference()", "class_method_signature": "LearnPatternSimilarityClassifier.getSegmentsDifference()", "testcase": false, "constructor": false}, {"identifier": "setSegmentsDifference", "parameters": "(final int[][] segmentsDifference)", "modifiers": "public", "return": "void", "signature": "void setSegmentsDifference(final int[][] segmentsDifference)", "full_signature": "public void setSegmentsDifference(final int[][] segmentsDifference)", "class_method_signature": "LearnPatternSimilarityClassifier.setSegmentsDifference(final int[][] segmentsDifference)", "testcase": false, "constructor": false}, {"identifier": "getLengthPerTree", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] getLengthPerTree()", "full_signature": "public int[] getLengthPerTree()", "class_method_signature": "LearnPatternSimilarityClassifier.getLengthPerTree()", "testcase": false, "constructor": false}, {"identifier": "setLengthPerTree", "parameters": "(final int[] lengthPerTree)", "modifiers": "public", "return": "void", "signature": "void setLengthPerTree(final int[] lengthPerTree)", "full_signature": "public void setLengthPerTree(final int[] lengthPerTree)", "class_method_signature": "LearnPatternSimilarityClassifier.setLengthPerTree(final int[] lengthPerTree)", "testcase": false, "constructor": false}, {"identifier": "getClassAttIndexPerTree", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] getClassAttIndexPerTree()", "full_signature": "public int[] getClassAttIndexPerTree()", "class_method_signature": "LearnPatternSimilarityClassifier.getClassAttIndexPerTree()", "testcase": false, "constructor": false}, {"identifier": "setClassAttIndexPerTree", "parameters": "(final int[] classAttIndexPerTree)", "modifiers": "public", "return": "void", "signature": "void setClassAttIndexPerTree(final int[] classAttIndexPerTree)", "full_signature": "public void setClassAttIndexPerTree(final int[] classAttIndexPerTree)", "class_method_signature": "LearnPatternSimilarityClassifier.setClassAttIndexPerTree(final int[] classAttIndexPerTree)", "testcase": false, "constructor": false}, {"identifier": "getTrees", "parameters": "()", "modifiers": "public", "return": "AccessibleRandomTree[]", "signature": "AccessibleRandomTree[] getTrees()", "full_signature": "public AccessibleRandomTree[] getTrees()", "class_method_signature": "LearnPatternSimilarityClassifier.getTrees()", "testcase": false, "constructor": false}, {"identifier": "setTrees", "parameters": "(final AccessibleRandomTree[] trees)", "modifiers": "public", "return": "void", "signature": "void setTrees(final AccessibleRandomTree[] trees)", "full_signature": "public void setTrees(final AccessibleRandomTree[] trees)", "class_method_signature": "LearnPatternSimilarityClassifier.setTrees(final AccessibleRandomTree[] trees)", "testcase": false, "constructor": false}, {"identifier": "getTrainLeafNodes", "parameters": "()", "modifiers": "public", "return": "int[][][]", "signature": "int[][][] getTrainLeafNodes()", "full_signature": "public int[][][] getTrainLeafNodes()", "class_method_signature": "LearnPatternSimilarityClassifier.getTrainLeafNodes()", "testcase": false, "constructor": false}, {"identifier": "setTrainLeafNodes", "parameters": "(final int[][][] trainLeafNodes)", "modifiers": "public", "return": "void", "signature": "void setTrainLeafNodes(final int[][][] trainLeafNodes)", "full_signature": "public void setTrainLeafNodes(final int[][][] trainLeafNodes)", "class_method_signature": "LearnPatternSimilarityClassifier.setTrainLeafNodes(final int[][][] trainLeafNodes)", "testcase": false, "constructor": false}, {"identifier": "getTrainTargets", "parameters": "()", "modifiers": "public", "return": "int[]", "signature": "int[] getTrainTargets()", "full_signature": "public int[] getTrainTargets()", "class_method_signature": "LearnPatternSimilarityClassifier.getTrainTargets()", "testcase": false, "constructor": false}, {"identifier": "setTrainTargets", "parameters": "(final int[] trainTargets)", "modifiers": "public", "return": "void", "signature": "void setTrainTargets(final int[] trainTargets)", "full_signature": "public void setTrainTargets(final int[] trainTargets)", "class_method_signature": "LearnPatternSimilarityClassifier.setTrainTargets(final int[] trainTargets)", "testcase": false, "constructor": false}, {"identifier": "getAttributes", "parameters": "()", "modifiers": "public", "return": "List<Attribute>", "signature": "List<Attribute> getAttributes()", "full_signature": "public List<Attribute> getAttributes()", "class_method_signature": "LearnPatternSimilarityClassifier.getAttributes()", "testcase": false, "constructor": false}, {"identifier": "setAttributes", "parameters": "(final List<Attribute> attributes)", "modifiers": "public", "return": "void", "signature": "void setAttributes(final List<Attribute> attributes)", "full_signature": "public void setAttributes(final List<Attribute> attributes)", "class_method_signature": "LearnPatternSimilarityClassifier.setAttributes(final List<Attribute> attributes)", "testcase": false, "constructor": false}, {"identifier": "getLearningAlgorithm", "parameters": "(final TimeSeriesDataset2 dataset)", "modifiers": "@Override public", "return": "LearnPatternSimilarityLearningAlgorithm", "signature": "LearnPatternSimilarityLearningAlgorithm getLearningAlgorithm(final TimeSeriesDataset2 dataset)", "full_signature": "@Override public LearnPatternSimilarityLearningAlgorithm getLearningAlgorithm(final TimeSeriesDataset2 dataset)", "class_method_signature": "LearnPatternSimilarityClassifier.getLearningAlgorithm(final TimeSeriesDataset2 dataset)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-ml-weka/src/main/java/ai/libs/jaicore/ml/classification/singlelabel/timeseries/learner/trees/LearnPatternSimilarityClassifier.java"}, "focal_method": {"identifier": "findNearestInstanceIndex", "parameters": "(final int[][] leafNodeCounts)", "modifiers": "public", "return": "int", "body": "public int findNearestInstanceIndex(final int[][] leafNodeCounts) {\n\t\tdouble minDistance = Double.MAX_VALUE;\n\t\tint nearestInstIdx = 0;\n\t\tfor (int inst = 0; inst < this.trainLeafNodes.length; inst++) {\n\t\t\tdouble tmpDist = 0;\n\t\t\tfor (int i = 0; i < this.trainLeafNodes[inst].length; i++) {\n\t\t\t\ttmpDist += MathUtil.intManhattanDistance(this.trainLeafNodes[inst][i], leafNodeCounts[i]);\n\t\t\t}\n\n\t\t\tif (tmpDist < minDistance) {\n\t\t\t\tminDistance = tmpDist;\n\t\t\t\tnearestInstIdx = inst;\n\t\t\t}\n\t\t}\n\t\treturn nearestInstIdx;\n\t}", "signature": "int findNearestInstanceIndex(final int[][] leafNodeCounts)", "full_signature": "public int findNearestInstanceIndex(final int[][] leafNodeCounts)", "class_method_signature": "LearnPatternSimilarityClassifier.findNearestInstanceIndex(final int[][] leafNodeCounts)", "testcase": false, "constructor": false, "invocations": ["intManhattanDistance"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}