{"test_class": {"identifier": "StatsServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private StatsService statsService;", "modifier": "private", "type": "StatsService", "declarator": "statsService", "var_name": "statsService"}, {"original_string": "@Mock private FeatureStatisticsRepository featureStatisticsRepository;", "modifier": "@Mock private", "type": "FeatureStatisticsRepository", "declarator": "featureStatisticsRepository", "var_name": "featureStatisticsRepository"}, {"original_string": "@Mock private StoreRepository storeRepository;", "modifier": "@Mock private", "type": "StoreRepository", "declarator": "storeRepository", "var_name": "storeRepository"}, {"original_string": "@Mock private FeatureSetRepository featureSetRepository;", "modifier": "@Mock private", "type": "FeatureSetRepository", "declarator": "featureSetRepository", "var_name": "featureSetRepository"}, {"original_string": "@Rule public final ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule public final", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "core/src/test/java/feast/core/service/StatsServiceTest.java"}, "test_case": {"identifier": "shouldAggregateBytesStatistics", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldAggregateBytesStatistics() {\n    FeatureNameStatistics stat1 =\n        FeatureNameStatistics.newBuilder()\n            .setBytesStats(\n                BytesStatistics.newBuilder()\n                    .setCommonStats(\n                        CommonStatistics.newBuilder()\n                            .setTotNumValues(5)\n                            .setNumNonMissing(5)\n                            .setAvgNumValues(1)\n                            .setMaxNumValues(1)\n                            .setMinNumValues(1)\n                            .setNumMissing(0))\n                    .setUnique(4)\n                    .setAvgNumBytes(6)\n                    .setMaxNumBytes(10)\n                    .setMinNumBytes(0))\n            .setType(Type.BYTES)\n            .setPath(Path.newBuilder().addStep(\"feature\").build())\n            .build();\n    FeatureNameStatistics stat2 =\n        FeatureNameStatistics.newBuilder()\n            .setBytesStats(\n                BytesStatistics.newBuilder()\n                    .setCommonStats(\n                        CommonStatistics.newBuilder()\n                            .setTotNumValues(5)\n                            .setNumNonMissing(5)\n                            .setAvgNumValues(1)\n                            .setMaxNumValues(1)\n                            .setMinNumValues(1)\n                            .setNumMissing(1))\n                    .setUnique(4)\n                    .setAvgNumBytes(4)\n                    .setMaxNumBytes(20)\n                    .setMinNumBytes(1))\n            .setType(Type.BYTES)\n            .setPath(Path.newBuilder().addStep(\"feature\").build())\n            .build();\n\n    FeatureNameStatistics expected =\n        FeatureNameStatistics.newBuilder()\n            .setBytesStats(\n                BytesStatistics.newBuilder()\n                    .setCommonStats(\n                        CommonStatistics.newBuilder()\n                            .setTotNumValues(10)\n                            .setNumNonMissing(10)\n                            .setAvgNumValues(1)\n                            .setMaxNumValues(1)\n                            .setMinNumValues(1)\n                            .setNumMissing(1))\n                    .setAvgNumBytes(5)\n                    .setMaxNumBytes(20)\n                    .setMinNumBytes(0))\n            .setType(Type.BYTES)\n            .setPath(Path.newBuilder().addStep(\"feature\").build())\n            .build();\n    assertThat(\n        statsService.mergeStatistics(Arrays.asList(Arrays.asList(stat1, stat2))),\n        equalTo(Arrays.asList(expected)));\n  }", "signature": "void shouldAggregateBytesStatistics()", "full_signature": "@Test public void shouldAggregateBytesStatistics()", "class_method_signature": "StatsServiceTest.shouldAggregateBytesStatistics()", "testcase": true, "constructor": false, "invocations": ["build", "setPath", "setType", "setBytesStats", "newBuilder", "setMinNumBytes", "setMaxNumBytes", "setAvgNumBytes", "setUnique", "setCommonStats", "newBuilder", "setNumMissing", "setMinNumValues", "setMaxNumValues", "setAvgNumValues", "setNumNonMissing", "setTotNumValues", "newBuilder", "build", "addStep", "newBuilder", "build", "setPath", "setType", "setBytesStats", "newBuilder", "setMinNumBytes", "setMaxNumBytes", "setAvgNumBytes", "setUnique", "setCommonStats", "newBuilder", "setNumMissing", "setMinNumValues", "setMaxNumValues", "setAvgNumValues", "setNumNonMissing", "setTotNumValues", "newBuilder", "build", "addStep", "newBuilder", "build", "setPath", "setType", "setBytesStats", "newBuilder", "setMinNumBytes", "setMaxNumBytes", "setAvgNumBytes", "setCommonStats", "newBuilder", "setNumMissing", "setMinNumValues", "setMaxNumValues", "setAvgNumValues", "setNumNonMissing", "setTotNumValues", "newBuilder", "build", "addStep", "newBuilder", "assertThat", "mergeStatistics", "asList", "asList", "equalTo", "asList"]}, "focal_class": {"identifier": "StatsService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private StoreRepository storeRepository;", "modifier": "private", "type": "StoreRepository", "declarator": "storeRepository", "var_name": "storeRepository"}, {"original_string": "private FeatureStatisticsRepository featureStatisticsRepository;", "modifier": "private", "type": "FeatureStatisticsRepository", "declarator": "featureStatisticsRepository", "var_name": "featureStatisticsRepository"}, {"original_string": "private FeatureSetRepository featureSetRepository;", "modifier": "private", "type": "FeatureSetRepository", "declarator": "featureSetRepository", "var_name": "featureSetRepository"}], "methods": [{"identifier": "StatsService", "parameters": "(\n      StoreRepository storeRepository,\n      FeatureStatisticsRepository featureStatisticsRepository,\n      FeatureSetRepository featureSetRepository)", "modifiers": "@Autowired public", "return": "", "signature": " StatsService(\n      StoreRepository storeRepository,\n      FeatureStatisticsRepository featureStatisticsRepository,\n      FeatureSetRepository featureSetRepository)", "full_signature": "@Autowired public  StatsService(\n      StoreRepository storeRepository,\n      FeatureStatisticsRepository featureStatisticsRepository,\n      FeatureSetRepository featureSetRepository)", "class_method_signature": "StatsService.StatsService(\n      StoreRepository storeRepository,\n      FeatureStatisticsRepository featureStatisticsRepository,\n      FeatureSetRepository featureSetRepository)", "testcase": false, "constructor": true}, {"identifier": "getFeatureStatistics", "parameters": "(GetFeatureStatisticsRequest request)", "modifiers": "@Transactional public", "return": "GetFeatureStatisticsResponse", "signature": "GetFeatureStatisticsResponse getFeatureStatistics(GetFeatureStatisticsRequest request)", "full_signature": "@Transactional public GetFeatureStatisticsResponse getFeatureStatistics(GetFeatureStatisticsRequest request)", "class_method_signature": "StatsService.getFeatureStatistics(GetFeatureStatisticsRequest request)", "testcase": false, "constructor": false}, {"identifier": "getFeatureNameStatisticsByDataset", "parameters": "(\n      StatisticsRetriever statisticsRetriever,\n      FeatureSet featureSet,\n      List<String> features,\n      String datasetId,\n      boolean forceRefresh)", "modifiers": "private", "return": "List<FeatureNameStatistics>", "signature": "List<FeatureNameStatistics> getFeatureNameStatisticsByDataset(\n      StatisticsRetriever statisticsRetriever,\n      FeatureSet featureSet,\n      List<String> features,\n      String datasetId,\n      boolean forceRefresh)", "full_signature": "private List<FeatureNameStatistics> getFeatureNameStatisticsByDataset(\n      StatisticsRetriever statisticsRetriever,\n      FeatureSet featureSet,\n      List<String> features,\n      String datasetId,\n      boolean forceRefresh)", "class_method_signature": "StatsService.getFeatureNameStatisticsByDataset(\n      StatisticsRetriever statisticsRetriever,\n      FeatureSet featureSet,\n      List<String> features,\n      String datasetId,\n      boolean forceRefresh)", "testcase": false, "constructor": false}, {"identifier": "getFeatureNameStatisticsByDate", "parameters": "(\n      StatisticsRetriever statisticsRetriever,\n      FeatureSet featureSet,\n      List<String> features,\n      long timestamp,\n      boolean forceRefresh)", "modifiers": "private", "return": "List<FeatureNameStatistics>", "signature": "List<FeatureNameStatistics> getFeatureNameStatisticsByDate(\n      StatisticsRetriever statisticsRetriever,\n      FeatureSet featureSet,\n      List<String> features,\n      long timestamp,\n      boolean forceRefresh)", "full_signature": "private List<FeatureNameStatistics> getFeatureNameStatisticsByDate(\n      StatisticsRetriever statisticsRetriever,\n      FeatureSet featureSet,\n      List<String> features,\n      long timestamp,\n      boolean forceRefresh)", "class_method_signature": "StatsService.getFeatureNameStatisticsByDate(\n      StatisticsRetriever statisticsRetriever,\n      FeatureSet featureSet,\n      List<String> features,\n      long timestamp,\n      boolean forceRefresh)", "testcase": false, "constructor": false}, {"identifier": "getStatisticsRetriever", "parameters": "(String storeName)", "modifiers": "", "return": "StatisticsRetriever", "signature": "StatisticsRetriever getStatisticsRetriever(String storeName)", "full_signature": " StatisticsRetriever getStatisticsRetriever(String storeName)", "class_method_signature": "StatsService.getStatisticsRetriever(String storeName)", "testcase": false, "constructor": false}, {"identifier": "getFeatureSet", "parameters": "(String featureSetId)", "modifiers": "private", "return": "FeatureSet", "signature": "FeatureSet getFeatureSet(String featureSetId)", "full_signature": "private FeatureSet getFeatureSet(String featureSetId)", "class_method_signature": "StatsService.getFeatureSet(String featureSetId)", "testcase": false, "constructor": false}, {"identifier": "mergeStatistics", "parameters": "(\n      List<List<FeatureNameStatistics>> featureNameStatistics)", "modifiers": "@VisibleForTesting public", "return": "List<FeatureNameStatistics>", "signature": "List<FeatureNameStatistics> mergeStatistics(\n      List<List<FeatureNameStatistics>> featureNameStatistics)", "full_signature": "@VisibleForTesting public List<FeatureNameStatistics> mergeStatistics(\n      List<List<FeatureNameStatistics>> featureNameStatistics)", "class_method_signature": "StatsService.mergeStatistics(\n      List<List<FeatureNameStatistics>> featureNameStatistics)", "testcase": false, "constructor": false}, {"identifier": "mergeStructStats", "parameters": "(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "modifiers": "private", "return": "FeatureNameStatistics", "signature": "FeatureNameStatistics mergeStructStats(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "full_signature": "private FeatureNameStatistics mergeStructStats(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "class_method_signature": "StatsService.mergeStructStats(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "testcase": false, "constructor": false}, {"identifier": "mergeNumStatistics", "parameters": "(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "modifiers": "private", "return": "FeatureNameStatistics", "signature": "FeatureNameStatistics mergeNumStatistics(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "full_signature": "private FeatureNameStatistics mergeNumStatistics(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "class_method_signature": "StatsService.mergeNumStatistics(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "testcase": false, "constructor": false}, {"identifier": "getVar", "parameters": "(\n      double s1Var, long s1Count, double s1Mean, double s2Var, long s2Count, double s2Mean)", "modifiers": "private", "return": "double", "signature": "double getVar(\n      double s1Var, long s1Count, double s1Mean, double s2Var, long s2Count, double s2Mean)", "full_signature": "private double getVar(\n      double s1Var, long s1Count, double s1Mean, double s2Var, long s2Count, double s2Mean)", "class_method_signature": "StatsService.getVar(\n      double s1Var, long s1Count, double s1Mean, double s2Var, long s2Count, double s2Mean)", "testcase": false, "constructor": false}, {"identifier": "mergeCategoricalStatistics", "parameters": "(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "modifiers": "private", "return": "FeatureNameStatistics", "signature": "FeatureNameStatistics mergeCategoricalStatistics(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "full_signature": "private FeatureNameStatistics mergeCategoricalStatistics(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "class_method_signature": "StatsService.mergeCategoricalStatistics(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "testcase": false, "constructor": false}, {"identifier": "mergeByteStatistics", "parameters": "(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "modifiers": "private", "return": "FeatureNameStatistics", "signature": "FeatureNameStatistics mergeByteStatistics(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "full_signature": "private FeatureNameStatistics mergeByteStatistics(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "class_method_signature": "StatsService.mergeByteStatistics(\n      List<FeatureNameStatistics> featureNameStatisticsList)", "testcase": false, "constructor": false}, {"identifier": "getTotalCount", "parameters": "(FeatureNameStatistics featureNameStatistics)", "modifiers": "private", "return": "long", "signature": "long getTotalCount(FeatureNameStatistics featureNameStatistics)", "full_signature": "private long getTotalCount(FeatureNameStatistics featureNameStatistics)", "class_method_signature": "StatsService.getTotalCount(FeatureNameStatistics featureNameStatistics)", "testcase": false, "constructor": false}, {"identifier": "validateRequest", "parameters": "(GetFeatureStatisticsRequest request)", "modifiers": "private", "return": "void", "signature": "void validateRequest(GetFeatureStatisticsRequest request)", "full_signature": "private void validateRequest(GetFeatureStatisticsRequest request)", "class_method_signature": "StatsService.validateRequest(GetFeatureStatisticsRequest request)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(FeatureNameStatistics featureNameStatistics)", "modifiers": "private", "return": "boolean", "signature": "boolean isEmpty(FeatureNameStatistics featureNameStatistics)", "full_signature": "private boolean isEmpty(FeatureNameStatistics featureNameStatistics)", "class_method_signature": "StatsService.isEmpty(FeatureNameStatistics featureNameStatistics)", "testcase": false, "constructor": false}], "file": "core/src/main/java/feast/core/service/StatsService.java"}, "focal_method": {"identifier": "mergeStatistics", "parameters": "(\n      List<List<FeatureNameStatistics>> featureNameStatistics)", "modifiers": "@VisibleForTesting public", "return": "List<FeatureNameStatistics>", "body": "@VisibleForTesting\n  public List<FeatureNameStatistics> mergeStatistics(\n      List<List<FeatureNameStatistics>> featureNameStatistics) {\n    List<FeatureNameStatistics> unnestedList = new ArrayList<>();\n\n    featureNameStatistics.forEach(unnestedList::addAll);\n    Map<Path, List<FeatureNameStatistics>> groupByPath =\n        unnestedList.stream()\n            .collect(Collectors.groupingBy(FeatureNameStatistics::getPath, Collectors.toList()));\n\n    List<FeatureNameStatistics> merged = new ArrayList<>();\n    for (Path key : groupByPath.keySet()) {\n      List<FeatureNameStatistics> featureNameStatisticsForKey = groupByPath.get(key);\n      if (featureNameStatisticsForKey.size() == 1) {\n        merged.add(featureNameStatisticsForKey.get(0));\n      } else {\n        switch (featureNameStatisticsForKey.get(0).getType()) {\n          case INT:\n          case FLOAT:\n            merged.add(mergeNumStatistics(featureNameStatisticsForKey));\n            break;\n          case STRING:\n            merged.add(mergeCategoricalStatistics(groupByPath.get(key)));\n            break;\n          case BYTES:\n            merged.add(mergeByteStatistics(groupByPath.get(key)));\n            break;\n          case STRUCT:\n            merged.add(mergeStructStats(groupByPath.get(key)));\n            break;\n          default:\n            throw new IllegalArgumentException(\n                \"Statistics are only supported for string, boolean, bytes and numeric features\");\n        }\n      }\n    }\n    return merged;\n  }", "signature": "List<FeatureNameStatistics> mergeStatistics(\n      List<List<FeatureNameStatistics>> featureNameStatistics)", "full_signature": "@VisibleForTesting public List<FeatureNameStatistics> mergeStatistics(\n      List<List<FeatureNameStatistics>> featureNameStatistics)", "class_method_signature": "StatsService.mergeStatistics(\n      List<List<FeatureNameStatistics>> featureNameStatistics)", "testcase": false, "constructor": false, "invocations": ["forEach", "collect", "stream", "groupingBy", "toList", "keySet", "get", "size", "add", "get", "getType", "get", "add", "mergeNumStatistics", "add", "mergeCategoricalStatistics", "get", "add", "mergeByteStatistics", "get", "add", "mergeStructStats", "get"]}, "repository": {"repo_id": 161133770, "url": "https://github.com/gojek/feast", "stars": 633, "created": "12/10/2018 7:20:15 AM +00:00", "updates": "2020-01-27T12:39:33+00:00", "fork": "False", "license": "licensed"}}