{"test_class": {"identifier": "MemoryCardTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)\n    IGameContext mockGameContext;", "modifier": "@Mock(answer = Answers.RETURNS_DEEP_STUBS)", "type": "IGameContext", "declarator": "mockGameContext", "var_name": "mockGameContext"}, {"original_string": "@Mock\n    Stats mockStats;", "modifier": "@Mock", "type": "Stats", "declarator": "mockStats", "var_name": "mockStats"}, {"original_string": "@Mock\n    Memory mockMemory;", "modifier": "@Mock", "type": "Memory", "declarator": "mockMemory", "var_name": "mockMemory"}, {"original_string": "@Mock\n    Configuration mockConfig;", "modifier": "@Mock", "type": "Configuration", "declarator": "mockConfig", "var_name": "mockConfig"}], "file": "gazeplay-games/src/test/java/net/gazeplay/games/memory/MemoryCardTest.java"}, "test_case": {"identifier": "shouldCreateCardFromResourceInNotOpenModeAndFillWithBackCardImage", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldCreateCardFromResourceInNotOpenModeAndFillWithBackCardImage() {\n        String resource = \"images/blue/blue.jpg\";\n        Image img = new Image(resource);\n        MemoryCard memoryCard = new MemoryCard(2, 2, 2, 2, img, 2,\n            mockGameContext, mockStats, mockMemory, mockConfig.getFixationLength(), false);\n        Image image = ((ImagePattern) memoryCard.getImageRectangle().getFill()).getImage();\n        assert image.getUrl().contains(\"data/magiccards/images/red-card-game.png\");\n    }", "signature": "void shouldCreateCardFromResourceInNotOpenModeAndFillWithBackCardImage()", "full_signature": "@Test void shouldCreateCardFromResourceInNotOpenModeAndFillWithBackCardImage()", "class_method_signature": "MemoryCardTest.shouldCreateCardFromResourceInNotOpenModeAndFillWithBackCardImage()", "testcase": true, "constructor": false, "invocations": ["getFixationLength", "getImage", "getFill", "getImageRectangle", "contains", "getUrl"]}, "focal_class": {"identifier": "MemoryCard", "superclass": "extends Parent", "interfaces": "", "fields": [{"original_string": "private final double fixationlength;", "modifier": "private final", "type": "double", "declarator": "fixationlength", "var_name": "fixationlength"}, {"original_string": "private final Rectangle card;", "modifier": "private final", "type": "Rectangle", "declarator": "card", "var_name": "card"}, {"original_string": "private final Image image;", "modifier": "private final", "type": "Image", "declarator": "image", "var_name": "image"}, {"original_string": "private final int id;", "modifier": "private final", "type": "int", "declarator": "id", "var_name": "id"}, {"original_string": "private final IGameContext gameContext;", "modifier": "private final", "type": "IGameContext", "declarator": "gameContext", "var_name": "gameContext"}, {"original_string": "private final Memory gameInstance;", "modifier": "private final", "type": "Memory", "declarator": "gameInstance", "var_name": "gameInstance"}, {"original_string": "private boolean turned;", "modifier": "private", "type": "boolean", "declarator": "turned", "var_name": "turned"}, {"original_string": "private int cardAlreadyTurned;", "modifier": "private", "type": "int", "declarator": "cardAlreadyTurned", "var_name": "cardAlreadyTurned"}, {"original_string": "private final ProgressIndicator progressIndicator;", "modifier": "private final", "type": "ProgressIndicator", "declarator": "progressIndicator", "var_name": "progressIndicator"}, {"original_string": "private Timeline timelineProgressBar;", "modifier": "private", "type": "Timeline", "declarator": "timelineProgressBar", "var_name": "timelineProgressBar"}, {"original_string": "final Stats stats;", "modifier": "final", "type": "Stats", "declarator": "stats", "var_name": "stats"}, {"original_string": "final EventHandler<Event> enterEvent;", "modifier": "final", "type": "EventHandler<Event>", "declarator": "enterEvent", "var_name": "enterEvent"}, {"original_string": "final boolean isOpen;", "modifier": "final", "type": "boolean", "declarator": "isOpen", "var_name": "isOpen"}], "methods": [{"identifier": "MemoryCard", "parameters": "(final double positionX, final double positionY, final double width, final double height, final Image image, final int idc,\n                      final IGameContext gameContext, final Stats stats, final Memory gameInstance, final int fixationlength, final boolean isOpen)", "modifiers": "public", "return": "", "signature": " MemoryCard(final double positionX, final double positionY, final double width, final double height, final Image image, final int idc,\n                      final IGameContext gameContext, final Stats stats, final Memory gameInstance, final int fixationlength, final boolean isOpen)", "full_signature": "public  MemoryCard(final double positionX, final double positionY, final double width, final double height, final Image image, final int idc,\n                      final IGameContext gameContext, final Stats stats, final Memory gameInstance, final int fixationlength, final boolean isOpen)", "class_method_signature": "MemoryCard.MemoryCard(final double positionX, final double positionY, final double width, final double height, final Image image, final int idc,\n                      final IGameContext gameContext, final Stats stats, final Memory gameInstance, final int fixationlength, final boolean isOpen)", "testcase": false, "constructor": true}, {"identifier": "createProgressIndicator", "parameters": "(final double width, final double height)", "modifiers": "private", "return": "ProgressIndicator", "signature": "ProgressIndicator createProgressIndicator(final double width, final double height)", "full_signature": "private ProgressIndicator createProgressIndicator(final double width, final double height)", "class_method_signature": "MemoryCard.createProgressIndicator(final double width, final double height)", "testcase": false, "constructor": false}, {"identifier": "onCorrectCardSelected", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void onCorrectCardSelected()", "full_signature": "private void onCorrectCardSelected()", "class_method_signature": "MemoryCard.onCorrectCardSelected()", "testcase": false, "constructor": false}, {"identifier": "onWrongCardSelected", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void onWrongCardSelected()", "full_signature": "private void onWrongCardSelected()", "class_method_signature": "MemoryCard.onWrongCardSelected()", "testcase": false, "constructor": false}, {"identifier": "buildEvent", "parameters": "()", "modifiers": "private", "return": "EventHandler<Event>", "signature": "EventHandler<Event> buildEvent()", "full_signature": "private EventHandler<Event> buildEvent()", "class_method_signature": "MemoryCard.buildEvent()", "testcase": false, "constructor": false}, {"identifier": "isTurned", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTurned()", "full_signature": "public boolean isTurned()", "class_method_signature": "MemoryCard.isTurned()", "testcase": false, "constructor": false}, {"identifier": "getImageRectangle", "parameters": "()", "modifiers": "public", "return": "Rectangle", "signature": "Rectangle getImageRectangle()", "full_signature": "public Rectangle getImageRectangle()", "class_method_signature": "MemoryCard.getImageRectangle()", "testcase": false, "constructor": false}], "file": "gazeplay-games/src/main/java/net/gazeplay/games/memory/MemoryCard.java"}, "focal_method": {"identifier": "getImageRectangle", "parameters": "()", "modifiers": "public", "return": "Rectangle", "body": "public Rectangle getImageRectangle() {\n        return this.card;\n    }", "signature": "Rectangle getImageRectangle()", "full_signature": "public Rectangle getImageRectangle()", "class_method_signature": "MemoryCard.getImageRectangle()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 81368488, "url": "https://github.com/GazePlay/GazePlay", "stars": 15, "created": "2/8/2017 7:39:08 PM +00:00", "updates": "2020-01-26T16:45:47+00:00", "fork": "False", "license": "licensed"}}