{"test_class": {"identifier": "HttpErrorHandlerResolverImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "http/src/test/java/ro/polak/http/errorhandler/impl/HttpErrorHandlerResolverImplTest.java"}, "test_case": {"identifier": "shouldCaptureIntermediateExceptions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCaptureIntermediateExceptions() {\n        ServerConfig serverConfig = null; // WIll throw NPE\n        HttpErrorHandlerResolver httpErrorHandlerResolver = new HttpErrorHandlerResolverImpl(serverConfig);\n        HttpErrorHandler handler = httpErrorHandlerResolver.getHandler(new NotFoundException());\n        assertThat(handler, is(instanceOf(HttpError500Handler.class)));\n    }", "signature": "void shouldCaptureIntermediateExceptions()", "full_signature": "@Test public void shouldCaptureIntermediateExceptions()", "class_method_signature": "HttpErrorHandlerResolverImplTest.shouldCaptureIntermediateExceptions()", "testcase": true, "constructor": false, "invocations": ["getHandler", "assertThat", "is", "instanceOf"]}, "focal_class": {"identifier": "HttpErrorHandlerResolverImpl", "superclass": "", "interfaces": "implements HttpErrorHandlerResolver", "fields": [{"original_string": "private ServerConfig serverConfig;", "modifier": "private", "type": "ServerConfig", "declarator": "serverConfig", "var_name": "serverConfig"}], "methods": [{"identifier": "HttpErrorHandlerResolverImpl", "parameters": "(final ServerConfig serverConfig)", "modifiers": "public", "return": "", "signature": " HttpErrorHandlerResolverImpl(final ServerConfig serverConfig)", "full_signature": "public  HttpErrorHandlerResolverImpl(final ServerConfig serverConfig)", "class_method_signature": "HttpErrorHandlerResolverImpl.HttpErrorHandlerResolverImpl(final ServerConfig serverConfig)", "testcase": false, "constructor": true}, {"identifier": "getHandler", "parameters": "(final RuntimeException e)", "modifiers": "@Override public", "return": "HttpErrorHandler", "signature": "HttpErrorHandler getHandler(final RuntimeException e)", "full_signature": "@Override public HttpErrorHandler getHandler(final RuntimeException e)", "class_method_signature": "HttpErrorHandlerResolverImpl.getHandler(final RuntimeException e)", "testcase": false, "constructor": false}, {"identifier": "getAllowedMethods", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getAllowedMethods()", "full_signature": "private String getAllowedMethods()", "class_method_signature": "HttpErrorHandlerResolverImpl.getAllowedMethods()", "testcase": false, "constructor": false}, {"identifier": "getProtocolExceptionHandler", "parameters": "(final ProtocolException e)", "modifiers": "private", "return": "HttpErrorHandler", "signature": "HttpErrorHandler getProtocolExceptionHandler(final ProtocolException e)", "full_signature": "private HttpErrorHandler getProtocolExceptionHandler(final ProtocolException e)", "class_method_signature": "HttpErrorHandlerResolverImpl.getProtocolExceptionHandler(final ProtocolException e)", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/errorhandler/impl/HttpErrorHandlerResolverImpl.java"}, "focal_method": {"identifier": "getHandler", "parameters": "(final RuntimeException e)", "modifiers": "@Override public", "return": "HttpErrorHandler", "body": "@Override\n    public HttpErrorHandler getHandler(final RuntimeException e) {\n        Throwable fallbackException;\n\n        try {\n            if (e instanceof ProtocolException) {\n                return getProtocolExceptionHandler((ProtocolException) e);\n            } else if (e instanceof AccessDeniedException) {\n                return new HttpError403Handler(serverConfig.getErrorDocument403Path());\n            } else if (e instanceof NotFoundException) {\n                Statistics.incrementError404();\n                return new HttpError404Handler(serverConfig.getErrorDocument404Path());\n            } else if (e instanceof MethodNotAllowedException) {\n                return new HttpError405Handler(getAllowedMethods());\n            } else {\n                fallbackException = e;\n            }\n        } catch (Throwable handlingException) {\n            fallbackException = handlingException;\n        }\n\n        Statistics.incrementError500();\n        return new HttpError500Handler().setReason(fallbackException);\n    }", "signature": "HttpErrorHandler getHandler(final RuntimeException e)", "full_signature": "@Override public HttpErrorHandler getHandler(final RuntimeException e)", "class_method_signature": "HttpErrorHandlerResolverImpl.getHandler(final RuntimeException e)", "testcase": false, "constructor": false, "invocations": ["getProtocolExceptionHandler", "getErrorDocument403Path", "incrementError404", "getErrorDocument404Path", "getAllowedMethods", "incrementError500", "setReason"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}