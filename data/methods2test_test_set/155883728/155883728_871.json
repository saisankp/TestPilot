{"test_class": {"identifier": "ExpectPathsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/checks/ExpectPathsTest.java"}, "test_case": {"identifier": "testSuppressAfterExtractViolationIfExpectationSatisfiedAfterSlingInstall_multipleViolators", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSuppressAfterExtractViolationIfExpectationSatisfiedAfterSlingInstall_multipleViolators()\n            throws Exception {\n        final String foo1 = \"/foo1\";\n        final String foo2 = \"/foo2\";\n\n        final PackageId container = PackageId.fromString(\"container\");\n        final PackageId embed1 = PackageId.fromString(\"embed1\");\n        SlingInstallable installable1 = mock(SlingInstallable.class);\n        when(installable1.getParentId()).thenReturn(embed1);\n        EmbeddedPackageInstallable epInstallable1 = new EmbeddedPackageInstallable(container, \"\", embed1);\n        final PackageId embed2 = PackageId.fromString(\"embed2\");\n        SlingInstallable installable2 = mock(SlingInstallable.class);\n        when(installable2.getParentId()).thenReturn(embed2);\n        EmbeddedPackageInstallable epInstallable2 = new EmbeddedPackageInstallable(container, \"\", embed2);\n        final PackageId embed3 = PackageId.fromString(\"embed3\");\n        SlingInstallable installable3 = mock(SlingInstallable.class);\n        when(installable3.getParentId()).thenReturn(embed3);\n        EmbeddedPackageInstallable epInstallable3 = new EmbeddedPackageInstallable(container, \"\", embed3);\n\n        final ExpectPaths.Check check1 = checkFor(obj()\n                .key(\"expectedPaths\", arr(foo1, foo2))\n                .key(ExpectPaths.keys().afterPackageIdRules(), arr()\n                        .val(new Rule(RuleType.EXCLUDE, Pattern.compile(\":container\"))))\n                .get());\n        new OakpalPlan.Builder(null, null)\n                .withRepoInits(Collections.singletonList(String.format(\"create path %s\", foo1)))\n                .build().toOakMachineBuilder(null, getClass().getClassLoader()).build()\n                .adminInitAndInspect(session -> {\n                    check1.startedScan();\n                    check1.identifyPackage(container, null);\n                    check1.afterExtract(container, session);\n                    check1.beforeSlingInstall(container, epInstallable1, session);\n                    check1.identifyEmbeddedPackage(embed1, container, epInstallable1);\n                    check1.afterExtract(embed1, session);\n                    check1.beforeSlingInstall(container, epInstallable2, session);\n                    check1.identifyEmbeddedPackage(embed2, container, epInstallable2);\n                    check1.afterExtract(embed2, session);\n                    check1.beforeSlingInstall(container, epInstallable3, session);\n                    check1.identifyEmbeddedPackage(embed3, container, epInstallable3);\n                    check1.afterExtract(embed3, session);\n                    check1.beforeSlingInstall(container, installable1, session);\n                    check1.beforeSlingInstall(container, installable2, session);\n                    check1.beforeSlingInstall(container, installable3, session);\n                    check1.afterScanPackage(container, session);\n                    check1.finishedScan();\n                });\n\n        assertEquals(\"expect 1 expected violation\", 1, check1.getReportedViolations().stream().count());\n        final Violation exViolation1 = check1.getReportedViolations().stream().findFirst().get();\n        assertTrue(\"starts with expected: \" + exViolation1.getDescription(), exViolation1.getDescription().startsWith(\"expected\"));\n        assertTrue(\"ends with /foo2: \" + exViolation1.getDescription(), exViolation1.getDescription().endsWith(foo2));\n        assertEquals(\"expected violators\",\n                Stream.of(embed1, container).collect(Collectors.toSet()),\n                new HashSet<>(exViolation1.getPackages()));\n\n        new OakpalPlan.Builder(null, null)\n                .withRepoInits(Collections.singletonList(String.format(\"create path %s\", foo1)))\n                .build().toOakMachineBuilder(null, getClass().getClassLoader()).build()\n                .adminInitAndInspect(session -> {\n                    check1.startedScan();\n                    check1.identifyPackage(container, null);\n                    check1.afterExtract(container, session);\n                    check1.beforeSlingInstall(container, epInstallable1, session);\n                    check1.identifyEmbeddedPackage(embed1, container, epInstallable1);\n                    JcrUtils.getOrCreateByPath(foo2, \"nt:folder\", session);\n                    check1.afterExtract(embed1, session);\n                    check1.beforeSlingInstall(container, epInstallable2, session);\n                    check1.identifyEmbeddedPackage(embed2, container, epInstallable2);\n                    check1.afterExtract(embed2, session);\n                    check1.beforeSlingInstall(container, epInstallable3, session);\n                    check1.identifyEmbeddedPackage(embed3, container, epInstallable3);\n                    session.getNode(foo2).remove();\n                    check1.afterExtract(embed3, session);\n                    check1.beforeSlingInstall(container, installable1, session);\n                    check1.beforeSlingInstall(container, installable2, session);\n                    check1.beforeSlingInstall(container, installable3, session);\n                    check1.afterScanPackage(container, session);\n                    check1.finishedScan();\n                });\n\n        assertEquals(\"expect 1 expected violation\", 1, check1.getReportedViolations().stream().count());\n        final Violation exViolation2 = check1.getReportedViolations().stream().findFirst().get();\n        assertTrue(\"starts with expected: \" + exViolation2.getDescription(), exViolation2.getDescription().startsWith(\"expected\"));\n        assertTrue(\"ends with /foo2: \" + exViolation2.getDescription(), exViolation2.getDescription().endsWith(foo2));\n        assertEquals(\"expected violators\",\n                Stream.of(container, embed3).collect(Collectors.toSet()),\n                new HashSet<>(exViolation2.getPackages()));\n\n        final ExpectPaths.Check check2 = checkFor(obj()\n                .key(\"notExpectedPaths\", arr(foo1, foo2))\n                //.key(ExpectPaths.keys().afterPackageIdRules(), arr()\n                //        .val(new Rule(RuleType.EXCLUDE, Pattern.compile(\":container\"))))\n                .get());\n        new OakpalPlan.Builder(null, null)\n                .withRepoInits(Collections.singletonList(String.format(\"create path %s\", foo1)))\n                .build().toOakMachineBuilder(null, getClass().getClassLoader()).build()\n                .adminInitAndInspect(session -> {\n                    check2.startedScan();\n                    check2.identifyPackage(container, null);\n                    check2.afterExtract(container, session);\n                    check2.beforeSlingInstall(embed1, epInstallable1, session);\n                    check2.identifyEmbeddedPackage(embed1, container, epInstallable1);\n                    check2.afterExtract(embed1, session);\n                    check2.beforeSlingInstall(embed2, epInstallable2, session);\n                    check2.identifyEmbeddedPackage(embed2, container, epInstallable2);\n                    check2.afterExtract(embed2, session);\n                    check2.beforeSlingInstall(embed3, epInstallable3, session);\n                    check2.identifyEmbeddedPackage(embed3, container, epInstallable3);\n                    check2.afterExtract(embed3, session);\n                    check2.beforeSlingInstall(container, installable1, session);\n                    check2.beforeSlingInstall(container, installable2, session);\n                    check2.beforeSlingInstall(container, installable3, session);\n                    check2.afterScanPackage(container, session);\n                    check2.finishedScan();\n                });\n\n        assertEquals(\"expect 1 unexpected violation\", 1, check2.getReportedViolations().stream().count());\n        final Violation unViolation1 = check2.getReportedViolations().stream().findFirst().get();\n        assertTrue(\"starts with unexpected: \" + unViolation1.getDescription(), unViolation1.getDescription().startsWith(\"unexpected\"));\n        assertTrue(\"ends with /foo1: \" + unViolation1.getDescription(), unViolation1.getDescription().endsWith(foo1));\n        assertEquals(\"expected violators\",\n                Stream.of(container).collect(Collectors.toSet()),\n                new HashSet<>(unViolation1.getPackages()));\n\n        new OakpalPlan.Builder(null, null)\n                .withRepoInits(Collections.singletonList(String.format(\"create path %s\", foo1)))\n                .build().toOakMachineBuilder(null, getClass().getClassLoader()).build()\n                .adminInitAndInspect(session -> {\n                    check2.startedScan();\n                    check2.identifyPackage(container, null);\n                    session.getNode(foo1).remove();\n                    check2.afterExtract(container, session);\n                    check2.beforeSlingInstall(embed1, epInstallable1, session);\n                    check2.identifyEmbeddedPackage(embed1, container, epInstallable1);\n                    JcrUtils.getOrCreateByPath(foo1, \"nt:folder\", session);\n                    check2.afterExtract(embed1, session);\n                    check2.beforeSlingInstall(embed2, epInstallable2, session);\n                    check2.identifyEmbeddedPackage(embed2, container, epInstallable2);\n                    check2.afterExtract(embed2, session);\n                    check2.beforeSlingInstall(embed3, epInstallable3, session);\n                    check2.identifyEmbeddedPackage(embed3, container, epInstallable3);\n                    session.getNode(foo1).remove();\n                    check2.afterExtract(embed3, session);\n                    check2.beforeSlingInstall(container, installable1, session);\n                    check2.beforeSlingInstall(container, installable2, session);\n                    JcrUtils.getOrCreateByPath(foo2, \"nt:folder\", session);\n                    check2.appliedRepoInitScripts(container, Collections.emptyList(), installable2, session);\n                    check2.beforeSlingInstall(container, installable3, session);\n                    check2.afterScanPackage(container, session);\n                    check2.finishedScan();\n                });\n        assertEquals(\"expect 2 unexpected violations\", 2, check2.getReportedViolations().size());\n        final Collection<Violation> unViolations = check2.getReportedViolations();\n        assertTrue(\"all start with unexpected \" + unViolations, unViolations.stream()\n                .allMatch(vio -> vio.getDescription().startsWith(\"unexpected\")));\n        assertEquals(\"one ends with /foo1: \" + unViolations, 1, unViolations.stream()\n                .filter(vio -> vio.getDescription().endsWith(\"/foo1\")).count());\n        assertEquals(\"one ends with /foo2: \" + unViolations, 1, unViolations.stream()\n                .filter(vio -> vio.getDescription().endsWith(\"/foo2\")).count());\n        assertEquals(\"expected violators of /foo1\",\n                Stream.of(embed1).collect(Collectors.toSet()), unViolations.stream()\n                        .filter(vio -> vio.getDescription().endsWith(\"/foo1\"))\n                        .flatMap(Fun.compose1(Violation::getPackages, Collection::stream))\n                        .collect(Collectors.toSet()));\n        assertEquals(\"expected violators of /foo2\",\n                Stream.of(embed2, container).collect(Collectors.toSet()), unViolations.stream()\n                        .filter(vio -> vio.getDescription().endsWith(\"/foo2\"))\n                        .flatMap(Fun.compose1(Violation::getPackages, Collection::stream))\n                        .collect(Collectors.toSet()));\n\n    }", "signature": "void testSuppressAfterExtractViolationIfExpectationSatisfiedAfterSlingInstall_multipleViolators()", "full_signature": "@Test public void testSuppressAfterExtractViolationIfExpectationSatisfiedAfterSlingInstall_multipleViolators()", "class_method_signature": "ExpectPathsTest.testSuppressAfterExtractViolationIfExpectationSatisfiedAfterSlingInstall_multipleViolators()", "testcase": true, "constructor": false, "invocations": ["fromString", "fromString", "mock", "thenReturn", "when", "getParentId", "fromString", "mock", "thenReturn", "when", "getParentId", "fromString", "mock", "thenReturn", "when", "getParentId", "checkFor", "get", "key", "key", "obj", "arr", "afterPackageIdRules", "keys", "val", "arr", "compile", "adminInitAndInspect", "build", "toOakMachineBuilder", "build", "withRepoInits", "singletonList", "format", "getClassLoader", "getClass", "startedScan", "identifyPackage", "afterExtract", "beforeSlingInstall", "identifyEmbeddedPackage", "afterExtract", "beforeSlingInstall", "identifyEmbeddedPackage", "afterExtract", "beforeSlingInstall", "identifyEmbeddedPackage", "afterExtract", "beforeSlingInstall", "beforeSlingInstall", "beforeSlingInstall", "afterScanPackage", "finishedScan", "assertEquals", "count", "stream", "getReportedViolations", "get", "findFirst", "stream", "getReportedViolations", "assertTrue", "getDescription", "startsWith", "getDescription", "assertTrue", "getDescription", "endsWith", "getDescription", "assertEquals", "collect", "of", "toSet", "getPackages", "adminInitAndInspect", "build", "toOakMachineBuilder", "build", "withRepoInits", "singletonList", "format", "getClassLoader", "getClass", "startedScan", "identifyPackage", "afterExtract", "beforeSlingInstall", "identifyEmbeddedPackage", "getOrCreateByPath", "afterExtract", "beforeSlingInstall", "identifyEmbeddedPackage", "afterExtract", "beforeSlingInstall", "identifyEmbeddedPackage", "remove", "getNode", "afterExtract", "beforeSlingInstall", "beforeSlingInstall", "beforeSlingInstall", "afterScanPackage", "finishedScan", "assertEquals", "count", "stream", "getReportedViolations", "get", "findFirst", "stream", "getReportedViolations", "assertTrue", "getDescription", "startsWith", "getDescription", "assertTrue", "getDescription", "endsWith", "getDescription", "assertEquals", "collect", "of", "toSet", "getPackages", "checkFor", "get", "key", "obj", "arr", "adminInitAndInspect", "build", "toOakMachineBuilder", "build", "withRepoInits", "singletonList", "format", "getClassLoader", "getClass", "startedScan", "identifyPackage", "afterExtract", "beforeSlingInstall", "identifyEmbeddedPackage", "afterExtract", "beforeSlingInstall", "identifyEmbeddedPackage", "afterExtract", "beforeSlingInstall", "identifyEmbeddedPackage", "afterExtract", "beforeSlingInstall", "beforeSlingInstall", "beforeSlingInstall", "afterScanPackage", "finishedScan", "assertEquals", "count", "stream", "getReportedViolations", "get", "findFirst", "stream", "getReportedViolations", "assertTrue", "getDescription", "startsWith", "getDescription", "assertTrue", "getDescription", "endsWith", "getDescription", "assertEquals", "collect", "of", "toSet", "getPackages", "adminInitAndInspect", "build", "toOakMachineBuilder", "build", "withRepoInits", "singletonList", "format", "getClassLoader", "getClass", "startedScan", "identifyPackage", "remove", "getNode", "afterExtract", "beforeSlingInstall", "identifyEmbeddedPackage", "getOrCreateByPath", "afterExtract", "beforeSlingInstall", "identifyEmbeddedPackage", "afterExtract", "beforeSlingInstall", "identifyEmbeddedPackage", "remove", "getNode", "afterExtract", "beforeSlingInstall", "beforeSlingInstall", "getOrCreateByPath", "appliedRepoInitScripts", "emptyList", "beforeSlingInstall", "afterScanPackage", "finishedScan", "assertEquals", "size", "getReportedViolations", "getReportedViolations", "assertTrue", "allMatch", "stream", "startsWith", "getDescription", "assertEquals", "count", "filter", "stream", "endsWith", "getDescription", "assertEquals", "count", "filter", "stream", "endsWith", "getDescription", "assertEquals", "collect", "of", "toSet", "collect", "flatMap", "filter", "stream", "endsWith", "getDescription", "compose1", "toSet", "assertEquals", "collect", "of", "toSet", "collect", "flatMap", "filter", "stream", "endsWith", "getDescription", "compose1", "toSet"]}, "focal_class": {"identifier": "ExpectPaths", "superclass": "", "interfaces": "implements ProgressCheckFactory", "fields": [{"original_string": "private static final JsonKeys KEYS = new JsonKeys() {\n        @Override\n        public String expectedPaths() {\n            return \"expectedPaths\";\n        }\n\n        @Override\n        public String notExpectedPaths() {\n            return \"notExpectedPaths\";\n        }\n\n        @Override\n        public String afterPackageIdRules() {\n            return \"afterPackageIdRules\";\n        }\n\n        @Override\n        public String severity() {\n            return \"severity\";\n        }\n    };", "modifier": "private static final", "type": "JsonKeys", "declarator": "KEYS = new JsonKeys() {\n        @Override\n        public String expectedPaths() {\n            return \"expectedPaths\";\n        }\n\n        @Override\n        public String notExpectedPaths() {\n            return \"notExpectedPaths\";\n        }\n\n        @Override\n        public String afterPackageIdRules() {\n            return \"afterPackageIdRules\";\n        }\n\n        @Override\n        public String severity() {\n            return \"severity\";\n        }\n    }", "var_name": "KEYS"}, {"original_string": "@Deprecated\n    public static final String CONFIG_EXPECTED_PATHS = keys().expectedPaths();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_EXPECTED_PATHS = keys().expectedPaths()", "var_name": "CONFIG_EXPECTED_PATHS"}, {"original_string": "@Deprecated\n    public static final String CONFIG_NOT_EXPECTED_PATHS = keys().notExpectedPaths();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_NOT_EXPECTED_PATHS = keys().notExpectedPaths()", "var_name": "CONFIG_NOT_EXPECTED_PATHS"}, {"original_string": "@Deprecated\n    public static final String CONFIG_AFTER_PACKAGE_ID_RULES = keys().afterPackageIdRules();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_AFTER_PACKAGE_ID_RULES = keys().afterPackageIdRules()", "var_name": "CONFIG_AFTER_PACKAGE_ID_RULES"}, {"original_string": "@Deprecated\n    public static final String CONFIG_SEVERITY = keys().severity();", "modifier": "@Deprecated\n    public static final", "type": "String", "declarator": "CONFIG_SEVERITY = keys().severity()", "var_name": "CONFIG_SEVERITY"}, {"original_string": "static final Severity DEFAULT_SEVERITY = Severity.MAJOR;", "modifier": "static final", "type": "Severity", "declarator": "DEFAULT_SEVERITY = Severity.MAJOR", "var_name": "DEFAULT_SEVERITY"}], "methods": [{"identifier": "keys", "parameters": "()", "modifiers": "@NotNull public static", "return": "JsonKeys", "signature": "JsonKeys keys()", "full_signature": "@NotNull public static JsonKeys keys()", "class_method_signature": "ExpectPaths.keys()", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(final JsonObject config)", "modifiers": "@Override public", "return": "ProgressCheck", "signature": "ProgressCheck newInstance(final JsonObject config)", "full_signature": "@Override public ProgressCheck newInstance(final JsonObject config)", "class_method_signature": "ExpectPaths.newInstance(final JsonObject config)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/checks/ExpectPaths.java"}, "focal_method": {"identifier": "keys", "parameters": "()", "modifiers": "@NotNull public static", "return": "JsonKeys", "body": "@NotNull\n    public static JsonKeys keys() {\n        return KEYS;\n    }", "signature": "JsonKeys keys()", "full_signature": "@NotNull public static JsonKeys keys()", "class_method_signature": "ExpectPaths.keys()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}