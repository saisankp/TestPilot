{"test_class": {"identifier": "RateLimitingSamplerTest", "superclass": "", "interfaces": "", "fields": [], "file": "brave/src/test/java/brave/sampler/RateLimitingSamplerTest.java"}, "test_case": {"identifier": "zeroMeansDropAllTraces", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void zeroMeansDropAllTraces() {\n    assertThat(RateLimitingSampler.create(0)).isSameAs(Sampler.NEVER_SAMPLE);\n  }", "signature": "void zeroMeansDropAllTraces()", "full_signature": "@Test public void zeroMeansDropAllTraces()", "class_method_signature": "RateLimitingSamplerTest.zeroMeansDropAllTraces()", "testcase": true, "constructor": false, "invocations": ["isSameAs", "assertThat", "create"]}, "focal_class": {"identifier": "RateLimitingSampler", "superclass": "extends Sampler", "interfaces": "", "fields": [{"original_string": "static final long NANOS_PER_SECOND = TimeUnit.SECONDS.toNanos(1);", "modifier": "static final", "type": "long", "declarator": "NANOS_PER_SECOND = TimeUnit.SECONDS.toNanos(1)", "var_name": "NANOS_PER_SECOND"}, {"original_string": "static final long NANOS_PER_DECISECOND = NANOS_PER_SECOND / 10;", "modifier": "static final", "type": "long", "declarator": "NANOS_PER_DECISECOND = NANOS_PER_SECOND / 10", "var_name": "NANOS_PER_DECISECOND"}, {"original_string": "final MaxFunction maxFunction;", "modifier": "final", "type": "MaxFunction", "declarator": "maxFunction", "var_name": "maxFunction"}, {"original_string": "final AtomicInteger usage = new AtomicInteger(0);", "modifier": "final", "type": "AtomicInteger", "declarator": "usage = new AtomicInteger(0)", "var_name": "usage"}, {"original_string": "final AtomicLong nextReset;", "modifier": "final", "type": "AtomicLong", "declarator": "nextReset", "var_name": "nextReset"}], "methods": [{"identifier": "create", "parameters": "(int tracesPerSecond)", "modifiers": "public static", "return": "Sampler", "signature": "Sampler create(int tracesPerSecond)", "full_signature": "public static Sampler create(int tracesPerSecond)", "class_method_signature": "RateLimitingSampler.create(int tracesPerSecond)", "testcase": false, "constructor": false}, {"identifier": "RateLimitingSampler", "parameters": "(int tracesPerSecond)", "modifiers": "", "return": "", "signature": " RateLimitingSampler(int tracesPerSecond)", "full_signature": "  RateLimitingSampler(int tracesPerSecond)", "class_method_signature": "RateLimitingSampler.RateLimitingSampler(int tracesPerSecond)", "testcase": false, "constructor": true}, {"identifier": "isSampled", "parameters": "(long ignoredTraceId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSampled(long ignoredTraceId)", "full_signature": "@Override public boolean isSampled(long ignoredTraceId)", "class_method_signature": "RateLimitingSampler.isSampled(long ignoredTraceId)", "testcase": false, "constructor": false}], "file": "brave/src/main/java/brave/sampler/RateLimitingSampler.java"}, "focal_method": {"identifier": "create", "parameters": "(int tracesPerSecond)", "modifiers": "public static", "return": "Sampler", "body": "public static Sampler create(int tracesPerSecond) {\n    if (tracesPerSecond < 0) throw new IllegalArgumentException(\"tracesPerSecond < 0\");\n    if (tracesPerSecond == 0) return Sampler.NEVER_SAMPLE;\n    return new RateLimitingSampler(tracesPerSecond);\n  }", "signature": "Sampler create(int tracesPerSecond)", "full_signature": "public static Sampler create(int tracesPerSecond)", "class_method_signature": "RateLimitingSampler.create(int tracesPerSecond)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}