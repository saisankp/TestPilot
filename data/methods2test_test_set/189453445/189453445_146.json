{"test_class": {"identifier": "AvailabilityZoneStepDefinitionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private AvailabilityZoneStepDefinitions availabilityZoneStepDefinitions;", "modifier": "@Autowired\n    private", "type": "AvailabilityZoneStepDefinitions", "declarator": "availabilityZoneStepDefinitions", "var_name": "availabilityZoneStepDefinitions"}, {"original_string": "@Autowired\n    private EC2Raider ec2Raider;", "modifier": "@Autowired\n    private", "type": "EC2Raider", "declarator": "ec2Raider", "var_name": "ec2Raider"}, {"original_string": "@Autowired\n    private ExecutionStateCache executionStateCache;", "modifier": "@Autowired\n    private", "type": "ExecutionStateCache", "declarator": "executionStateCache", "var_name": "executionStateCache"}], "file": "cloudraider-core/src/test/java/com/intuit/cloudraider/cucumber/steps/AvailabilityZoneStepDefinitionsTest.java"}, "test_case": {"identifier": "testGivenAzWithCompulsoryTags", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGivenAzWithCompulsoryTags() {\n      //  availabilityZoneStepDefinitions.setExecutionStateCache(executionStateCache);\n\n        List<Tag> tags = new ArrayList<>();\n        Tag tag = new Tag();\n        tag.setKey(\"testkey\");\n        tag.setValue(\"testvalue\");\n        tags.add(tag);\n\n        List<Tag> ignoreTags = new ArrayList<>();\n        tag = new Tag();\n        tag.setKey(\"ignorekey\");\n        tag.setValue(\"ignorevalue\");\n        ignoreTags.add(tag);\n\n        PowerMockito.when(ec2Raider.getEc2InstanceIdsWithCompulsoryTagsForAvailabilityZone(\"us-west-2a\", ignoreTags, tags)).thenReturn(emptyList());\n        PowerMockito.when(ec2Raider.getEc2InstanceIdsWithCompulsoryTagsForAvailabilityZone(\"us-west-2b\", ignoreTags, tags)).thenReturn(createSpecificInstance1());\n\n        availabilityZoneStepDefinitions.givenAzWithCompulsoryTags(\"us-west-2a, us-west-2b\", \"testkey:testvalue\", \"ignorekey:ignorevalue\");\n        Assert.assertEquals(1, executionStateCache.getInstances().size());\n    }", "signature": "void testGivenAzWithCompulsoryTags()", "full_signature": "@Test public void testGivenAzWithCompulsoryTags()", "class_method_signature": "AvailabilityZoneStepDefinitionsTest.testGivenAzWithCompulsoryTags()", "testcase": true, "constructor": false, "invocations": ["setKey", "setValue", "add", "setKey", "setValue", "add", "thenReturn", "when", "getEc2InstanceIdsWithCompulsoryTagsForAvailabilityZone", "emptyList", "thenReturn", "when", "getEc2InstanceIdsWithCompulsoryTagsForAvailabilityZone", "createSpecificInstance1", "givenAzWithCompulsoryTags", "assertEquals", "size", "getInstances"]}, "focal_class": {"identifier": "AvailabilityZoneStepDefinitions", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    @Qualifier(\"ec2raiderBean\")\n    private EC2Raider ec2Raider;", "modifier": "@Autowired\n    @Qualifier(\"ec2raiderBean\")\n    private", "type": "EC2Raider", "declarator": "ec2Raider", "var_name": "ec2Raider"}, {"original_string": "Logger logger = LoggerFactory.getLogger(this.getClass());", "modifier": "", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(this.getClass())", "var_name": "logger"}, {"original_string": "@Autowired\n    private ExecutionStateCache executionStateCache;", "modifier": "@Autowired\n    private", "type": "ExecutionStateCache", "declarator": "executionStateCache", "var_name": "executionStateCache"}], "methods": [{"identifier": "getExecutionStateCache", "parameters": "()", "modifiers": "public", "return": "ExecutionStateCache", "signature": "ExecutionStateCache getExecutionStateCache()", "full_signature": "public ExecutionStateCache getExecutionStateCache()", "class_method_signature": "AvailabilityZoneStepDefinitions.getExecutionStateCache()", "testcase": false, "constructor": false}, {"identifier": "setExecutionStateCache", "parameters": "(ExecutionStateCache executionStateCache)", "modifiers": "public", "return": "void", "signature": "void setExecutionStateCache(ExecutionStateCache executionStateCache)", "full_signature": "public void setExecutionStateCache(ExecutionStateCache executionStateCache)", "class_method_signature": "AvailabilityZoneStepDefinitions.setExecutionStateCache(ExecutionStateCache executionStateCache)", "testcase": false, "constructor": false}, {"identifier": "AvailabilityZoneStepDefinitions", "parameters": "()", "modifiers": "public", "return": "", "signature": " AvailabilityZoneStepDefinitions()", "full_signature": "public  AvailabilityZoneStepDefinitions()", "class_method_signature": "AvailabilityZoneStepDefinitions.AvailabilityZoneStepDefinitions()", "testcase": false, "constructor": true}, {"identifier": "givenAzWithIgnoreTags", "parameters": "(String azs, String instanceIgnoreTags)", "modifiers": "@Given(\"^AZs \\\"([^\\\"]*)\\\" ignore instances with tags \\\"([^\\\"]*)\\\"$\") public", "return": "AvailabilityZoneStepDefinitions", "signature": "AvailabilityZoneStepDefinitions givenAzWithIgnoreTags(String azs, String instanceIgnoreTags)", "full_signature": "@Given(\"^AZs \\\"([^\\\"]*)\\\" ignore instances with tags \\\"([^\\\"]*)\\\"$\") public AvailabilityZoneStepDefinitions givenAzWithIgnoreTags(String azs, String instanceIgnoreTags)", "class_method_signature": "AvailabilityZoneStepDefinitions.givenAzWithIgnoreTags(String azs, String instanceIgnoreTags)", "testcase": false, "constructor": false}, {"identifier": "givenAzWithCompulsoryTags", "parameters": "(String azs, String compulsoryTagsString, String ignoreTagsString)", "modifiers": "@Given(\"^AZs \\\"([^\\\"]*)\\\" instance only with tags \\\"([^\\\"]*)\\\" ignore instances with tags \\\"([^\\\"]*)\\\"$\") public", "return": "void", "signature": "void givenAzWithCompulsoryTags(String azs, String compulsoryTagsString, String ignoreTagsString)", "full_signature": "@Given(\"^AZs \\\"([^\\\"]*)\\\" instance only with tags \\\"([^\\\"]*)\\\" ignore instances with tags \\\"([^\\\"]*)\\\"$\") public void givenAzWithCompulsoryTags(String azs, String compulsoryTagsString, String ignoreTagsString)", "class_method_signature": "AvailabilityZoneStepDefinitions.givenAzWithCompulsoryTags(String azs, String compulsoryTagsString, String ignoreTagsString)", "testcase": false, "constructor": false}, {"identifier": "terminateInstanceOnNumInstances", "parameters": "(int numInstances )", "modifiers": "@When(\"^terminate (\\\\d+) instance in AZ$\") public", "return": "AvailabilityZoneStepDefinitions", "signature": "AvailabilityZoneStepDefinitions terminateInstanceOnNumInstances(int numInstances )", "full_signature": "@When(\"^terminate (\\\\d+) instance in AZ$\") public AvailabilityZoneStepDefinitions terminateInstanceOnNumInstances(int numInstances )", "class_method_signature": "AvailabilityZoneStepDefinitions.terminateInstanceOnNumInstances(int numInstances )", "testcase": false, "constructor": false}, {"identifier": "terminateInstanceOnNumInstancesWithTags", "parameters": "(int numInstances, String compulsoryTagsString)", "modifiers": "@When(\"^terminate (\\\\d+) instance in AZ only with tags \\\\\\\"([^\\\\\\\"]*)\\\\\\\"$\") public", "return": "AvailabilityZoneStepDefinitions", "signature": "AvailabilityZoneStepDefinitions terminateInstanceOnNumInstancesWithTags(int numInstances, String compulsoryTagsString)", "full_signature": "@When(\"^terminate (\\\\d+) instance in AZ only with tags \\\\\\\"([^\\\\\\\"]*)\\\\\\\"$\") public AvailabilityZoneStepDefinitions terminateInstanceOnNumInstancesWithTags(int numInstances, String compulsoryTagsString)", "class_method_signature": "AvailabilityZoneStepDefinitions.terminateInstanceOnNumInstancesWithTags(int numInstances, String compulsoryTagsString)", "testcase": false, "constructor": false}, {"identifier": "tagStringToList", "parameters": "(String tagString)", "modifiers": "", "return": "List<Tag>", "signature": "List<Tag> tagStringToList(String tagString)", "full_signature": " List<Tag> tagStringToList(String tagString)", "class_method_signature": "AvailabilityZoneStepDefinitions.tagStringToList(String tagString)", "testcase": false, "constructor": false}, {"identifier": "confirmHealthyHostCount", "parameters": "()", "modifiers": "@Then(\"^assertEC2 healthy host count in AZ$\") public", "return": "void", "signature": "void confirmHealthyHostCount()", "full_signature": "@Then(\"^assertEC2 healthy host count in AZ$\") public void confirmHealthyHostCount()", "class_method_signature": "AvailabilityZoneStepDefinitions.confirmHealthyHostCount()", "testcase": false, "constructor": false}, {"identifier": "confirmHealthyHostCount", "parameters": "(int expected)", "modifiers": "public", "return": "boolean", "signature": "boolean confirmHealthyHostCount(int expected)", "full_signature": "public boolean confirmHealthyHostCount(int expected)", "class_method_signature": "AvailabilityZoneStepDefinitions.confirmHealthyHostCount(int expected)", "testcase": false, "constructor": false}], "file": "cloudraider-core/src/main/java/com/intuit/cloudraider/cucumber/steps/AvailabilityZoneStepDefinitions.java"}, "focal_method": {"identifier": "givenAzWithCompulsoryTags", "parameters": "(String azs, String compulsoryTagsString, String ignoreTagsString)", "modifiers": "@Given(\"^AZs \\\"([^\\\"]*)\\\" instance only with tags \\\"([^\\\"]*)\\\" ignore instances with tags \\\"([^\\\"]*)\\\"$\") public", "return": "void", "body": "@Given(\"^AZs \\\"([^\\\"]*)\\\" instance only with tags \\\"([^\\\"]*)\\\" ignore instances with tags \\\"([^\\\"]*)\\\"$\")\n    public void givenAzWithCompulsoryTags(String azs, String compulsoryTagsString, String ignoreTagsString) {\n        String[] availabilityZones = azs.split(\",\\\\s*\");\n\n        List<Tag> compulsoryTags = CucumberHelperFunctions.tagStringToList(compulsoryTagsString);\n        List<Tag> ignoreTags = CucumberHelperFunctions.tagStringToList(ignoreTagsString);\n\n        List<EC2InstanceTO> instances = new ArrayList<>();\n\n        for (String availabilityZone : availabilityZones) {\n            instances.addAll(ec2Raider.getEc2InstanceIdsWithCompulsoryTagsForAvailabilityZone(availabilityZone, ignoreTags, compulsoryTags));\n        }\n\n        if (instances.isEmpty()) {\n            throw new RuntimeException(\"No instances available\");\n        }\n        executionStateCache.setInstances(instances);\n    }", "signature": "void givenAzWithCompulsoryTags(String azs, String compulsoryTagsString, String ignoreTagsString)", "full_signature": "@Given(\"^AZs \\\"([^\\\"]*)\\\" instance only with tags \\\"([^\\\"]*)\\\" ignore instances with tags \\\"([^\\\"]*)\\\"$\") public void givenAzWithCompulsoryTags(String azs, String compulsoryTagsString, String ignoreTagsString)", "class_method_signature": "AvailabilityZoneStepDefinitions.givenAzWithCompulsoryTags(String azs, String compulsoryTagsString, String ignoreTagsString)", "testcase": false, "constructor": false, "invocations": ["split", "tagStringToList", "tagStringToList", "addAll", "getEc2InstanceIdsWithCompulsoryTagsForAvailabilityZone", "isEmpty", "setInstances"]}, "repository": {"repo_id": 189453445, "url": "https://github.com/intuit/CloudRaider", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 16, "size": 730, "license": "licensed"}}