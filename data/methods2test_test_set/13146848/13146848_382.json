{"test_class": {"identifier": "PdfMixFragmentTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-sambox/src/test/java/org/sejda/impl/sambox/component/PdfMixFragmentTest.java"}, "test_case": {"identifier": "nextPage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void nextPage() throws TaskIOException, TaskPermissionsException, IOException {\n        try (PdfMixFragment victim = PdfMixFragment.newInstance(new PdfMixInput(PdfStreamSource.newInstanceNoPassword(\n                getClass().getClassLoader().getResourceAsStream(\"pdf/2_pages.pdf\"), \"test.pdf\")))) {\n            assertTrue(victim.hasNextPage());\n            assertThat(new PdfTextExtractorByArea()\n                    .extractTextFromArea(victim.nextPage(), new Rectangle(54, 56, 60, 21)).trim(), is(\"First page\"));\n            assertTrue(victim.hasNextPage());\n            assertThat(new PdfTextExtractorByArea()\n                    .extractTextFromArea(victim.nextPage(), new Rectangle(54, 56, 60, 21)).trim(), is(\"Second page\"));\n            assertFalse(victim.hasNextPage());\n        }\n    }", "signature": "void nextPage()", "full_signature": "@Test public void nextPage()", "class_method_signature": "PdfMixFragmentTest.nextPage()", "testcase": true, "constructor": false, "invocations": ["newInstance", "newInstanceNoPassword", "getResourceAsStream", "getClassLoader", "getClass", "assertTrue", "hasNextPage", "assertThat", "trim", "extractTextFromArea", "nextPage", "is", "assertTrue", "hasNextPage", "assertThat", "trim", "extractTextFromArea", "nextPage", "is", "assertFalse", "hasNextPage"]}, "focal_class": {"identifier": "PdfMixFragment", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PdfAlternateMixer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PdfAlternateMixer.class)", "var_name": "LOG"}, {"original_string": "private LookupTable<PDPage> lookups = new LookupTable<>();", "modifier": "private", "type": "LookupTable<PDPage>", "declarator": "lookups = new LookupTable<>()", "var_name": "lookups"}, {"original_string": "private PDDocumentHandler handler;", "modifier": "private", "type": "PDDocumentHandler", "declarator": "handler", "var_name": "handler"}, {"original_string": "private PdfMixInput input;", "modifier": "private", "type": "PdfMixInput", "declarator": "input", "var_name": "input"}, {"original_string": "private LinkedList<Integer> pages;", "modifier": "private", "type": "LinkedList<Integer>", "declarator": "pages", "var_name": "pages"}], "methods": [{"identifier": "PdfMixFragment", "parameters": "(PdfMixInput input, PDDocumentHandler handler)", "modifiers": "private", "return": "", "signature": " PdfMixFragment(PdfMixInput input, PDDocumentHandler handler)", "full_signature": "private  PdfMixFragment(PdfMixInput input, PDDocumentHandler handler)", "class_method_signature": "PdfMixFragment.PdfMixFragment(PdfMixInput input, PDDocumentHandler handler)", "testcase": false, "constructor": true}, {"identifier": "nextPage", "parameters": "()", "modifiers": "public", "return": "PDPage", "signature": "PDPage nextPage()", "full_signature": "public PDPage nextPage()", "class_method_signature": "PdfMixFragment.nextPage()", "testcase": false, "constructor": false}, {"identifier": "hasNextPage", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasNextPage()", "full_signature": "public boolean hasNextPage()", "class_method_signature": "PdfMixFragment.hasNextPage()", "testcase": false, "constructor": false}, {"identifier": "getNumberOfPages", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumberOfPages()", "full_signature": "public int getNumberOfPages()", "class_method_signature": "PdfMixFragment.getNumberOfPages()", "testcase": false, "constructor": false}, {"identifier": "getStep", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getStep()", "full_signature": "public int getStep()", "class_method_signature": "PdfMixFragment.getStep()", "testcase": false, "constructor": false}, {"identifier": "addLookupEntry", "parameters": "(PDPage current, PDPage importPage)", "modifiers": "public", "return": "void", "signature": "void addLookupEntry(PDPage current, PDPage importPage)", "full_signature": "public void addLookupEntry(PDPage current, PDPage importPage)", "class_method_signature": "PdfMixFragment.addLookupEntry(PDPage current, PDPage importPage)", "testcase": false, "constructor": false}, {"identifier": "saintizeAnnotations", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void saintizeAnnotations()", "full_signature": "public void saintizeAnnotations()", "class_method_signature": "PdfMixFragment.saintizeAnnotations()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "PdfMixFragment.close()", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(PdfMixInput input)", "modifiers": "public static", "return": "PdfMixFragment", "signature": "PdfMixFragment newInstance(PdfMixInput input)", "full_signature": "public static PdfMixFragment newInstance(PdfMixInput input)", "class_method_signature": "PdfMixFragment.newInstance(PdfMixInput input)", "testcase": false, "constructor": false}], "file": "sejda-sambox/src/main/java/org/sejda/impl/sambox/component/PdfMixFragment.java"}, "focal_method": {"identifier": "nextPage", "parameters": "()", "modifiers": "public", "return": "PDPage", "body": "public PDPage nextPage() {\n        if (input.isReverse()) {\n            return handler.getPage(pages.removeLast());\n        }\n        return handler.getPage(pages.removeFirst());\n    }", "signature": "PDPage nextPage()", "full_signature": "public PDPage nextPage()", "class_method_signature": "PdfMixFragment.nextPage()", "testcase": false, "constructor": false, "invocations": ["isReverse", "getPage", "removeLast", "getPage", "removeFirst"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}