{"test_class": {"identifier": "MultiQueryActionTest", "superclass": "extends ActionTest", "interfaces": "", "fields": [], "file": "foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/actions/MultiQueryActionTest.java"}, "test_case": {"identifier": "testMultiQuery", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMultiQuery() throws FoxtrotException, JsonProcessingException {\n\n        HashMap<String, ActionRequest> requests = Maps.newHashMap();\n        Query query = new Query();\n        query.setTable(TestUtils.TEST_TABLE_NAME);\n        ResultSort resultSort = new ResultSort();\n        resultSort.setOrder(ResultSort.Order.asc);\n        resultSort.setField(\"_timestamp\");\n        query.setSort(resultSort);\n        requests.put(\"1\", query);\n\n        CountRequest countRequest = new CountRequest();\n        countRequest.setTable(TestUtils.TEST_TABLE_NAME);\n        countRequest.setField(\"os\");\n        countRequest.setDistinct(false);\n        requests.put(\"2\", countRequest);\n\n        MultiQueryRequest multiQueryRequest = new MultiQueryRequest(requests);\n        ActionResponse actionResponse = getQueryExecutor().execute(multiQueryRequest);\n        MultiQueryResponse multiQueryResponse = null;\n        if(actionResponse instanceof MultiQueryResponse) {\n            multiQueryResponse = (MultiQueryResponse)actionResponse;\n        }\n        assertNotNull(multiQueryResponse);\n\n        QueryResponse queryResponse = (QueryResponse)multiQueryResponse.getResponses()\n                .get(\"1\");\n        CountResponse countResponse = (CountResponse)multiQueryResponse.getResponses()\n                .get(\"2\");\n\n        assertEquals(9, countResponse.getCount());\n    }", "signature": "void testMultiQuery()", "full_signature": "@Test public void testMultiQuery()", "class_method_signature": "MultiQueryActionTest.testMultiQuery()", "testcase": true, "constructor": false, "invocations": ["newHashMap", "setTable", "setOrder", "setField", "setSort", "put", "setTable", "setField", "setDistinct", "put", "execute", "getQueryExecutor", "assertNotNull", "get", "getResponses", "get", "getResponses", "assertEquals", "getCount"]}, "focal_class": {"identifier": "MultiQueryAction", "superclass": "extends Action<MultiQueryRequest>", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(MultiQueryAction.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(MultiQueryAction.class)", "var_name": "LOGGER"}, {"original_string": "private AnalyticsLoader analyticsLoader;", "modifier": "private", "type": "AnalyticsLoader", "declarator": "analyticsLoader", "var_name": "analyticsLoader"}, {"original_string": "private Map<ActionRequest, Action> requestActionMap = Maps.newHashMap();", "modifier": "private", "type": "Map<ActionRequest, Action>", "declarator": "requestActionMap = Maps.newHashMap()", "var_name": "requestActionMap"}], "methods": [{"identifier": "MultiQueryAction", "parameters": "(MultiQueryRequest parameter, AnalyticsLoader analyticsLoader)", "modifiers": "public", "return": "", "signature": " MultiQueryAction(MultiQueryRequest parameter, AnalyticsLoader analyticsLoader)", "full_signature": "public  MultiQueryAction(MultiQueryRequest parameter, AnalyticsLoader analyticsLoader)", "class_method_signature": "MultiQueryAction.MultiQueryAction(MultiQueryRequest parameter, AnalyticsLoader analyticsLoader)", "testcase": false, "constructor": true}, {"identifier": "preprocess", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void preprocess()", "full_signature": "@Override public void preprocess()", "class_method_signature": "MultiQueryAction.preprocess()", "testcase": false, "constructor": false}, {"identifier": "getMetricKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMetricKey()", "full_signature": "@Override public String getMetricKey()", "class_method_signature": "MultiQueryAction.getMetricKey()", "testcase": false, "constructor": false}, {"identifier": "getRequestCacheKey", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getRequestCacheKey()", "full_signature": "@Override public String getRequestCacheKey()", "class_method_signature": "MultiQueryAction.getRequestCacheKey()", "testcase": false, "constructor": false}, {"identifier": "validateImpl", "parameters": "(MultiQueryRequest parameter)", "modifiers": "@Override public", "return": "void", "signature": "void validateImpl(MultiQueryRequest parameter)", "full_signature": "@Override public void validateImpl(MultiQueryRequest parameter)", "class_method_signature": "MultiQueryAction.validateImpl(MultiQueryRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(MultiQueryRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse execute(MultiQueryRequest parameter)", "full_signature": "@Override public ActionResponse execute(MultiQueryRequest parameter)", "class_method_signature": "MultiQueryAction.execute(MultiQueryRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "getRequestBuilder", "parameters": "(MultiQueryRequest parameter)", "modifiers": "@Override public", "return": "MultiSearchRequestBuilder", "signature": "MultiSearchRequestBuilder getRequestBuilder(MultiQueryRequest parameter)", "full_signature": "@Override public MultiSearchRequestBuilder getRequestBuilder(MultiQueryRequest parameter)", "class_method_signature": "MultiQueryAction.getRequestBuilder(MultiQueryRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "getResponse", "parameters": "(org.elasticsearch.action.ActionResponse multiSearchResponse, MultiQueryRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse getResponse(org.elasticsearch.action.ActionResponse multiSearchResponse, MultiQueryRequest parameter)", "full_signature": "@Override public ActionResponse getResponse(org.elasticsearch.action.ActionResponse multiSearchResponse, MultiQueryRequest parameter)", "class_method_signature": "MultiQueryAction.getResponse(org.elasticsearch.action.ActionResponse multiSearchResponse, MultiQueryRequest parameter)", "testcase": false, "constructor": false}, {"identifier": "createActions", "parameters": "(final MultiQueryRequest multiQueryRequest)", "modifiers": "private", "return": "void", "signature": "void createActions(final MultiQueryRequest multiQueryRequest)", "full_signature": "private void createActions(final MultiQueryRequest multiQueryRequest)", "class_method_signature": "MultiQueryAction.createActions(final MultiQueryRequest multiQueryRequest)", "testcase": false, "constructor": false}, {"identifier": "processForSubQueries", "parameters": "(MultiQueryRequest multiQueryRequest, ActionInterface actionInterface)", "modifiers": "private", "return": "String", "signature": "String processForSubQueries(MultiQueryRequest multiQueryRequest, ActionInterface actionInterface)", "full_signature": "private String processForSubQueries(MultiQueryRequest multiQueryRequest, ActionInterface actionInterface)", "class_method_signature": "MultiQueryAction.processForSubQueries(MultiQueryRequest multiQueryRequest, ActionInterface actionInterface)", "testcase": false, "constructor": false}], "file": "foxtrot-core/src/main/java/com/flipkart/foxtrot/core/querystore/actions/MultiQueryAction.java"}, "focal_method": {"identifier": "execute", "parameters": "(MultiQueryRequest parameter)", "modifiers": "@Override public", "return": "ActionResponse", "body": "@Override\n    public ActionResponse execute(MultiQueryRequest parameter) {\n        MultiSearchRequestBuilder multiSearchRequestBuilder = getRequestBuilder(parameter);\n        try {\n            LOGGER.info(\"Search: {}\", multiSearchRequestBuilder);\n            MultiSearchResponse multiSearchResponse = multiSearchRequestBuilder.execute()\n                    .actionGet();\n            return getResponse(multiSearchResponse, parameter);\n        } catch (ElasticsearchException e) {\n            throw FoxtrotExceptions.createQueryExecutionException(parameter, e);\n        }\n    }", "signature": "ActionResponse execute(MultiQueryRequest parameter)", "full_signature": "@Override public ActionResponse execute(MultiQueryRequest parameter)", "class_method_signature": "MultiQueryAction.execute(MultiQueryRequest parameter)", "testcase": false, "constructor": false, "invocations": ["getRequestBuilder", "info", "actionGet", "execute", "getResponse", "createQueryExecutionException"]}, "repository": {"repo_id": 19980663, "url": "https://github.com/Flipkart/foxtrot", "stars": 22, "created": "5/20/2014 12:52:55 PM +00:00", "updates": "2020-01-07T07:05:03+00:00", "fork": "False", "license": "licensed"}}