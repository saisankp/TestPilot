{"test_class": {"identifier": "NumberUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "algs/src/test/java/com/github/kowshik/bigo/common/NumberUtilsTest.java"}, "test_case": {"identifier": "testAtoi_MalformedNumberWithSign", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testAtoi_MalformedNumberWithSign() {\n\t\tboolean thrown = false;\n\n\t\ttry {\n\t\t\tcom.github.kowshik.bigo.common.NumberUtils.atoi(\"+12.3\");\n\t\t} catch (NumberFormatException e) {\n\t\t\t// This is expected.\n\t\t\tthrown = true;\n\t\t}\n\n\t\tassertTrue(thrown);\n\t}", "signature": "void testAtoi_MalformedNumberWithSign()", "full_signature": "@Test public void testAtoi_MalformedNumberWithSign()", "class_method_signature": "NumberUtilsTest.testAtoi_MalformedNumberWithSign()", "testcase": true, "constructor": false, "invocations": ["atoi", "assertTrue"]}, "focal_class": {"identifier": "NumberUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "atoi", "parameters": "(String s)", "modifiers": "public static", "return": "int", "signature": "int atoi(String s)", "full_signature": "public static int atoi(String s)", "class_method_signature": "NumberUtils.atoi(String s)", "testcase": false, "constructor": false}, {"identifier": "itoa", "parameters": "(int number)", "modifiers": "public static", "return": "String", "signature": "String itoa(int number)", "full_signature": "public static String itoa(int number)", "class_method_signature": "NumberUtils.itoa(int number)", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "(int number)", "modifiers": "public static", "return": "int", "signature": "int length(int number)", "full_signature": "public static int length(int number)", "class_method_signature": "NumberUtils.length(int number)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(int x)", "modifiers": "public static", "return": "int", "signature": "int reverse(int x)", "full_signature": "public static int reverse(int x)", "class_method_signature": "NumberUtils.reverse(int x)", "testcase": false, "constructor": false}, {"identifier": "isValidInteger", "parameters": "(String str)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidInteger(String str)", "full_signature": "public static boolean isValidInteger(String str)", "class_method_signature": "NumberUtils.isValidInteger(String str)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/kowshik/bigo/common/NumberUtils.java"}, "focal_method": {"identifier": "atoi", "parameters": "(String s)", "modifiers": "public static", "return": "int", "body": "public static int atoi(String s) {\n\t\tif (s == null) {\n\t\t\tthrow new NullPointerException(\"You passed a null string.\");\n\t\t}\n\n\t\tif (s.length() == 0) {\n\t\t\tthrow new NumberFormatException(\"The number string is empty.\");\n\t\t}\n\n\t\tboolean isNegative = false;\n\t\tint startIndex = 0;\n\t\tif (s.charAt(0) == '+' || s.charAt(0) == '-') {\n\t\t\tstartIndex = 1;\n\t\t\tif (s.charAt(0) == '-') {\n\t\t\t\tisNegative = true;\n\t\t\t}\n\n\t\t\tif (s.length() == 1) {\n\t\t\t\tthrow new NumberFormatException(String.format(\n\t\t\t\t\t\t\"The input string: %s is not a valid integer.\", s));\n\t\t\t}\n\t\t}\n\n\t\tlong num = 0L;\n\t\tfor (int index = startIndex; index < s.length(); index++) {\n\t\t\tchar c = s.charAt(index);\n\t\t\tif (c < '0' || c > '9') {\n\t\t\t\tthrow new NumberFormatException(String.format(\n\t\t\t\t\t\t\"The input string: %s is not a valid integer.\", s));\n\t\t\t}\n\n\t\t\tnum = num * 10 + (c - '0');\n\t\t\tif (num > Integer.MAX_VALUE\n\t\t\t\t\t&& !(isNegative && num == Integer.MAX_VALUE + 1)) {\n\t\t\t\tthrow new NumberFormatException(\n\t\t\t\t\t\tString.format(\n\t\t\t\t\t\t\t\t\"The input string: %s is not a valid integer as it overflows the integer range.\",\n\t\t\t\t\t\t\t\ts));\n\t\t\t}\n\t\t}\n\n\t\tint intNum = (int) num;\n\t\treturn isNegative ? intNum * -1 : intNum;\n\t}", "signature": "int atoi(String s)", "full_signature": "public static int atoi(String s)", "class_method_signature": "NumberUtils.atoi(String s)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "charAt", "charAt", "length", "format", "length", "charAt", "format", "format"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}