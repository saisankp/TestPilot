{"test_class": {"identifier": "GroupValidatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "outland-feature-server/src/test/java/outland/feature/server/groups/GroupValidatorTest.java"}, "test_case": {"identifier": "validateRegistrationThrowingOk", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void validateRegistrationThrowingOk() {\n    Group.Builder builder = Group.newBuilder();\n\n    OwnerCollection.Builder oc = OwnerCollection.newBuilder()\n        .addItems(Owner.newBuilder().setName(\"Bob\").setUsername(\"bob\"));\n\n    builder.setOwners(oc)\n        .setKey(\"key1\")\n        .setName(\"ns 1\");\n\n    try {\n      new GroupValidator().validateRegistrationThrowing(builder.build());\n    } catch (ServiceException e) {\n      fail();\n    }\n  }", "signature": "void validateRegistrationThrowingOk()", "full_signature": "@Test public void validateRegistrationThrowingOk()", "class_method_signature": "GroupValidatorTest.validateRegistrationThrowingOk()", "testcase": true, "constructor": false, "invocations": ["newBuilder", "addItems", "newBuilder", "setUsername", "setName", "newBuilder", "setName", "setKey", "setOwners", "validateRegistrationThrowing", "build", "fail"]}, "focal_class": {"identifier": "GroupValidator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "validateRegistrationThrowing", "parameters": "(Group group)", "modifiers": "", "return": "void", "signature": "void validateRegistrationThrowing(Group group)", "full_signature": " void validateRegistrationThrowing(Group group)", "class_method_signature": "GroupValidator.validateRegistrationThrowing(Group group)", "testcase": false, "constructor": false}], "file": "outland-feature-server/src/main/java/outland/feature/server/groups/GroupValidator.java"}, "focal_method": {"identifier": "validateRegistrationThrowing", "parameters": "(Group group)", "modifiers": "", "return": "void", "body": "void validateRegistrationThrowing(Group group) throws ServiceException {\n    if (group.getOwners().getItemsCount() == 0) {\n      throw new ServiceException(Problem.clientProblem(\"no_owner_for_group\",\n          \"A group must have at least one one owner\", 422));\n    }\n\n    group.getOwners().getItemsList().forEach(owner -> {\n      if (Strings.isNullOrEmpty(owner.getEmail()) && Strings.isNullOrEmpty(owner.getUsername())) {\n        throw new ServiceException(Problem.clientProblem(\"incomplete_owner_for_group\",\n            \"A group owner must have an email or a username\", 422));\n      }\n    });\n\n    if (Strings.isNullOrEmpty(group.getKey())) {\n      throw new ServiceException(Problem.clientProblem(\"missing_key_for_group\",\n          \"A group must have a key\", 422));\n    }\n\n    if (Strings.isNullOrEmpty(group.getName())) {\n      throw new ServiceException(Problem.clientProblem(\"missing_name_for_group\",\n          \"A group must have a name\", 422));\n    }\n  }", "signature": "void validateRegistrationThrowing(Group group)", "full_signature": " void validateRegistrationThrowing(Group group)", "class_method_signature": "GroupValidator.validateRegistrationThrowing(Group group)", "testcase": false, "constructor": false, "invocations": ["getItemsCount", "getOwners", "clientProblem", "forEach", "getItemsList", "getOwners", "isNullOrEmpty", "getEmail", "isNullOrEmpty", "getUsername", "clientProblem", "isNullOrEmpty", "getKey", "clientProblem", "isNullOrEmpty", "getName", "clientProblem"]}, "repository": {"repo_id": 83838306, "url": "https://github.com/dehora/outland", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 944, "license": "licensed"}}