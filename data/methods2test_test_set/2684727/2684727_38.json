{"test_class": {"identifier": "ReceiptCurrencyCodeSupplierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    Trip trip;", "modifier": "@Mock", "type": "Trip", "declarator": "trip", "var_name": "trip"}, {"original_string": "@Mock\n    ReceiptInputCache receiptInputCache;", "modifier": "@Mock", "type": "ReceiptInputCache", "declarator": "receiptInputCache", "var_name": "receiptInputCache"}, {"original_string": "@Mock\n    Receipt receipt;", "modifier": "@Mock", "type": "Receipt", "declarator": "receipt", "var_name": "receipt"}, {"original_string": "@Mock\n    Price price;", "modifier": "@Mock", "type": "Price", "declarator": "price", "var_name": "price"}], "file": "app/src/test/java/co/smartreceipts/android/receipts/editor/currency/ReceiptCurrencyCodeSupplierTest.java"}, "test_case": {"identifier": "get", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void get() throws Exception {\n        when(trip.getDefaultCurrencyCode()).thenReturn(\"trip\");\n        when(price.getCurrencyCode()).thenReturn(\"receipt\");\n        final ReceiptCurrencyCodeSupplier nullReceiptSupplier = new ReceiptCurrencyCodeSupplier(trip, receiptInputCache, null);\n        final ReceiptCurrencyCodeSupplier validReceiptSupplier = new ReceiptCurrencyCodeSupplier(trip, receiptInputCache, receipt);\n        assertEquals(nullReceiptSupplier.get(), \"trip\");\n        assertEquals(validReceiptSupplier.get(), \"receipt\");\n\n        when(receiptInputCache.getCachedCurrency()).thenReturn(\"cache\");\n        final ReceiptCurrencyCodeSupplier nullReceiptSupplierWithCachedCurrency = new ReceiptCurrencyCodeSupplier(trip, receiptInputCache, null);\n        assertEquals(nullReceiptSupplierWithCachedCurrency.get(), \"cache\");\n    }", "signature": "void get()", "full_signature": "@Test public void get()", "class_method_signature": "ReceiptCurrencyCodeSupplierTest.get()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getDefaultCurrencyCode", "thenReturn", "when", "getCurrencyCode", "assertEquals", "get", "assertEquals", "get", "thenReturn", "when", "getCachedCurrency", "assertEquals", "get"]}, "focal_class": {"identifier": "ReceiptCurrencyCodeSupplier", "superclass": "", "interfaces": "implements CurrencyCodeSupplier", "fields": [{"original_string": "private final Trip trip;", "modifier": "private final", "type": "Trip", "declarator": "trip", "var_name": "trip"}, {"original_string": "private final ReceiptInputCache receiptInputCache;", "modifier": "private final", "type": "ReceiptInputCache", "declarator": "receiptInputCache", "var_name": "receiptInputCache"}, {"original_string": "private final Receipt receipt;", "modifier": "private final", "type": "Receipt", "declarator": "receipt", "var_name": "receipt"}], "methods": [{"identifier": "ReceiptCurrencyCodeSupplier", "parameters": "(@NonNull Trip trip, @NonNull ReceiptInputCache receiptInputCache, @Nullable Receipt receipt)", "modifiers": "public", "return": "", "signature": " ReceiptCurrencyCodeSupplier(@NonNull Trip trip, @NonNull ReceiptInputCache receiptInputCache, @Nullable Receipt receipt)", "full_signature": "public  ReceiptCurrencyCodeSupplier(@NonNull Trip trip, @NonNull ReceiptInputCache receiptInputCache, @Nullable Receipt receipt)", "class_method_signature": "ReceiptCurrencyCodeSupplier.ReceiptCurrencyCodeSupplier(@NonNull Trip trip, @NonNull ReceiptInputCache receiptInputCache, @Nullable Receipt receipt)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@NonNull @Override public", "return": "String", "signature": "String get()", "full_signature": "@NonNull @Override public String get()", "class_method_signature": "ReceiptCurrencyCodeSupplier.get()", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/receipts/editor/currency/ReceiptCurrencyCodeSupplier.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@NonNull @Override public", "return": "String", "body": "@NonNull\n    @Override\n    public String get() {\n        if (receipt != null) {\n            return receipt.getPrice().getCurrencyCode();\n        } else if (receiptInputCache.getCachedCurrency() != null) {\n            return receiptInputCache.getCachedCurrency();\n        } else {\n            return trip.getDefaultCurrencyCode();\n        }\n    }", "signature": "String get()", "full_signature": "@NonNull @Override public String get()", "class_method_signature": "ReceiptCurrencyCodeSupplier.get()", "testcase": false, "constructor": false, "invocations": ["getCurrencyCode", "getPrice", "getCachedCurrency", "getCachedCurrency", "getDefaultCurrencyCode"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}