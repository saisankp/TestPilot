{"test_class": {"identifier": "PEMFileLoaderTest", "superclass": "extends BaseX509ParameterizedTestCase", "interfaces": "", "fields": [], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/common/PEMFileLoaderTest.java"}, "test_case": {"identifier": "testLoadKeyStoreWithWrongPassword", "parameters": "()", "modifiers": "@Test(expected = Exception.class) public", "return": "void", "body": "@Test(expected = Exception.class)\n    public void testLoadKeyStoreWithWrongPassword() throws Exception {\n        String path = x509TestContext.getKeyStoreFile(KeyStoreFileType.PEM)\n                .getAbsolutePath();\n        new PEMFileLoader.Builder()\n                .setKeyStorePath(path)\n                .setKeyStorePassword(\"wrong password\")\n                .build()\n                .loadKeyStore();\n    }", "signature": "void testLoadKeyStoreWithWrongPassword()", "full_signature": "@Test(expected = Exception.class) public void testLoadKeyStoreWithWrongPassword()", "class_method_signature": "PEMFileLoaderTest.testLoadKeyStoreWithWrongPassword()", "testcase": true, "constructor": false, "invocations": ["getAbsolutePath", "getKeyStoreFile", "loadKeyStore", "build", "setKeyStorePassword", "setKeyStorePath"]}, "focal_class": {"identifier": "PEMFileLoader", "superclass": "extends FileKeyStoreLoader", "interfaces": "", "fields": [], "methods": [{"identifier": "PEMFileLoader", "parameters": "(String keyStorePath,\n                          String trustStorePath,\n                          String keyStorePassword,\n                          String trustStorePassword)", "modifiers": "private", "return": "", "signature": " PEMFileLoader(String keyStorePath,\n                          String trustStorePath,\n                          String keyStorePassword,\n                          String trustStorePassword)", "full_signature": "private  PEMFileLoader(String keyStorePath,\n                          String trustStorePath,\n                          String keyStorePassword,\n                          String trustStorePassword)", "class_method_signature": "PEMFileLoader.PEMFileLoader(String keyStorePath,\n                          String trustStorePath,\n                          String keyStorePassword,\n                          String trustStorePassword)", "testcase": false, "constructor": true}, {"identifier": "loadKeyStore", "parameters": "()", "modifiers": "@Override public", "return": "KeyStore", "signature": "KeyStore loadKeyStore()", "full_signature": "@Override public KeyStore loadKeyStore()", "class_method_signature": "PEMFileLoader.loadKeyStore()", "testcase": false, "constructor": false}, {"identifier": "loadTrustStore", "parameters": "()", "modifiers": "@Override public", "return": "KeyStore", "signature": "KeyStore loadTrustStore()", "full_signature": "@Override public KeyStore loadTrustStore()", "class_method_signature": "PEMFileLoader.loadTrustStore()", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/common/PEMFileLoader.java"}, "focal_method": {"identifier": "loadKeyStore", "parameters": "()", "modifiers": "@Override public", "return": "KeyStore", "body": "@Override\n    public KeyStore loadKeyStore() throws IOException, GeneralSecurityException {\n        Optional<String> passwordOption;\n        if (keyStorePassword == null || keyStorePassword.length() == 0) {\n            passwordOption = Optional.empty();\n        } else {\n            passwordOption = Optional.of(keyStorePassword);\n        }\n        File file = new File(keyStorePath);\n        return PemReader.loadKeyStore(file, file, passwordOption);\n    }", "signature": "KeyStore loadKeyStore()", "full_signature": "@Override public KeyStore loadKeyStore()", "class_method_signature": "PEMFileLoader.loadKeyStore()", "testcase": false, "constructor": false, "invocations": ["length", "empty", "of", "loadKeyStore"]}, "repository": {"repo_id": 230430206, "url": "https://github.com/boomblog/zookeeper-vip2", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 10, "size": 3105, "license": "licensed"}}