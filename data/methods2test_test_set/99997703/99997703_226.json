{"test_class": {"identifier": "NonNegativeIntegerSplitterByWeightsTest", "superclass": "", "interfaces": "", "fields": [], "file": "OcavaCore/src/test/java/com/ocadotechnology/utils/NonNegativeIntegerSplitterByWeightsTest.java"}, "test_case": {"identifier": "testTableSplitting", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testTableSplitting() {\n        ImmutableTable<String, String, Double> tableWeights = ImmutableTableFactory.createWithRows(\n                ImmutableMap.of(\n                        \"Column1\", 1d,\n                        \"Column2\", 2d),\n                ImmutableList.of(\"Row1\", \"Row2\"));\n\n        ImmutableTable<String, String, Integer> splitInts = NonNegativeIntegerSplitterByWeights.splitByTableWeights(tableWeights, 2);\n\n        Assertions.assertEquals(0, (int) splitInts.get(\"Row1\", \"Column1\"));\n        Assertions.assertEquals(1, (int) splitInts.get(\"Row1\", \"Column2\"));\n        Assertions.assertEquals(0, (int) splitInts.get(\"Row2\", \"Column1\"));\n        Assertions.assertEquals(1, (int) splitInts.get(\"Row2\", \"Column2\"));\n    }", "signature": "void testTableSplitting()", "full_signature": "@Test void testTableSplitting()", "class_method_signature": "NonNegativeIntegerSplitterByWeightsTest.testTableSplitting()", "testcase": true, "constructor": false, "invocations": ["createWithRows", "of", "of", "splitByTableWeights", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "NonNegativeIntegerSplitterByWeights", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Comparator<Entry<E, Double>> valueComparator = Entry.comparingByValue();", "modifier": "private final", "type": "Comparator<Entry<E, Double>>", "declarator": "valueComparator = Entry.comparingByValue()", "var_name": "valueComparator"}, {"original_string": "private ImmutableMap<E, Double> proportions;", "modifier": "private", "type": "ImmutableMap<E, Double>", "declarator": "proportions", "var_name": "proportions"}], "methods": [{"identifier": "NonNegativeIntegerSplitterByWeights", "parameters": "(ImmutableMap<E, Double> weights)", "modifiers": "public", "return": "", "signature": " NonNegativeIntegerSplitterByWeights(ImmutableMap<E, Double> weights)", "full_signature": "public  NonNegativeIntegerSplitterByWeights(ImmutableMap<E, Double> weights)", "class_method_signature": "NonNegativeIntegerSplitterByWeights.NonNegativeIntegerSplitterByWeights(ImmutableMap<E, Double> weights)", "testcase": false, "constructor": true}, {"identifier": "createWithSorting", "parameters": "(\n            ImmutableMap<E, Double> weights)", "modifiers": "public static", "return": "NonNegativeIntegerSplitterByWeights<E>", "signature": "NonNegativeIntegerSplitterByWeights<E> createWithSorting(\n            ImmutableMap<E, Double> weights)", "full_signature": "public static NonNegativeIntegerSplitterByWeights<E> createWithSorting(\n            ImmutableMap<E, Double> weights)", "class_method_signature": "NonNegativeIntegerSplitterByWeights.createWithSorting(\n            ImmutableMap<E, Double> weights)", "testcase": false, "constructor": false}, {"identifier": "createFromInts", "parameters": "(ImmutableMap<E, Integer> weights)", "modifiers": "public static", "return": "NonNegativeIntegerSplitterByWeights<E>", "signature": "NonNegativeIntegerSplitterByWeights<E> createFromInts(ImmutableMap<E, Integer> weights)", "full_signature": "public static NonNegativeIntegerSplitterByWeights<E> createFromInts(ImmutableMap<E, Integer> weights)", "class_method_signature": "NonNegativeIntegerSplitterByWeights.createFromInts(ImmutableMap<E, Integer> weights)", "testcase": false, "constructor": false}, {"identifier": "createFromIntsWithSorting", "parameters": "(\n            ImmutableMap<E, Integer> weights)", "modifiers": "public static", "return": "NonNegativeIntegerSplitterByWeights<E>", "signature": "NonNegativeIntegerSplitterByWeights<E> createFromIntsWithSorting(\n            ImmutableMap<E, Integer> weights)", "full_signature": "public static NonNegativeIntegerSplitterByWeights<E> createFromIntsWithSorting(\n            ImmutableMap<E, Integer> weights)", "class_method_signature": "NonNegativeIntegerSplitterByWeights.createFromIntsWithSorting(\n            ImmutableMap<E, Integer> weights)", "testcase": false, "constructor": false}, {"identifier": "splitByTableWeights", "parameters": "(\n            ImmutableTable<R, C, Double> weights,\n            int numberToSplit)", "modifiers": "public static", "return": "ImmutableTable<R, C, Integer>", "signature": "ImmutableTable<R, C, Integer> splitByTableWeights(\n            ImmutableTable<R, C, Double> weights,\n            int numberToSplit)", "full_signature": "public static ImmutableTable<R, C, Integer> splitByTableWeights(\n            ImmutableTable<R, C, Double> weights,\n            int numberToSplit)", "class_method_signature": "NonNegativeIntegerSplitterByWeights.splitByTableWeights(\n            ImmutableTable<R, C, Double> weights,\n            int numberToSplit)", "testcase": false, "constructor": false}, {"identifier": "splitByIntegerTableWeights", "parameters": "(\n            ImmutableTable<R, C, Integer> weights,\n            int numberToSplit)", "modifiers": "public static", "return": "ImmutableTable<R, C, Integer>", "signature": "ImmutableTable<R, C, Integer> splitByIntegerTableWeights(\n            ImmutableTable<R, C, Integer> weights,\n            int numberToSplit)", "full_signature": "public static ImmutableTable<R, C, Integer> splitByIntegerTableWeights(\n            ImmutableTable<R, C, Integer> weights,\n            int numberToSplit)", "class_method_signature": "NonNegativeIntegerSplitterByWeights.splitByIntegerTableWeights(\n            ImmutableTable<R, C, Integer> weights,\n            int numberToSplit)", "testcase": false, "constructor": false}, {"identifier": "split", "parameters": "(int numberToSplit)", "modifiers": "public", "return": "ImmutableMap<E, Integer>", "signature": "ImmutableMap<E, Integer> split(int numberToSplit)", "full_signature": "public ImmutableMap<E, Integer> split(int numberToSplit)", "class_method_signature": "NonNegativeIntegerSplitterByWeights.split(int numberToSplit)", "testcase": false, "constructor": false}, {"identifier": "assignRemainder", "parameters": "(\n            int totalToBeAssigned,\n            ImmutableMap<E, Double> idealAmounts,\n            ImmutableMap<E, Integer> roundedDownAmounts)", "modifiers": "private", "return": "ImmutableMap<E, Integer>", "signature": "ImmutableMap<E, Integer> assignRemainder(\n            int totalToBeAssigned,\n            ImmutableMap<E, Double> idealAmounts,\n            ImmutableMap<E, Integer> roundedDownAmounts)", "full_signature": "private ImmutableMap<E, Integer> assignRemainder(\n            int totalToBeAssigned,\n            ImmutableMap<E, Double> idealAmounts,\n            ImmutableMap<E, Integer> roundedDownAmounts)", "class_method_signature": "NonNegativeIntegerSplitterByWeights.assignRemainder(\n            int totalToBeAssigned,\n            ImmutableMap<E, Double> idealAmounts,\n            ImmutableMap<E, Integer> roundedDownAmounts)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/utils/NonNegativeIntegerSplitterByWeights.java"}, "focal_method": {"identifier": "splitByTableWeights", "parameters": "(\n            ImmutableTable<R, C, Double> weights,\n            int numberToSplit)", "modifiers": "public static", "return": "ImmutableTable<R, C, Integer>", "body": "public static <R, C> ImmutableTable<R, C, Integer> splitByTableWeights(\n            ImmutableTable<R, C, Double> weights,\n            int numberToSplit) {\n\n        ImmutableMap<Cell<R, C, Double>, Double> weightMap = weights.cellSet().stream()\n                .collect(ImmutableMap.toImmutableMap(\n                        Function.identity(),\n                        Cell::getValue));\n\n        ImmutableMap<Cell<R, C, Double>, Integer> split =\n                new NonNegativeIntegerSplitterByWeights<>(weightMap).split(numberToSplit);\n\n        return split.keySet().stream()\n                .collect(ImmutableTable.toImmutableTable(\n                        Cell::getRowKey,\n                        Cell::getColumnKey,\n                        split::get));\n    }", "signature": "ImmutableTable<R, C, Integer> splitByTableWeights(\n            ImmutableTable<R, C, Double> weights,\n            int numberToSplit)", "full_signature": "public static ImmutableTable<R, C, Integer> splitByTableWeights(\n            ImmutableTable<R, C, Double> weights,\n            int numberToSplit)", "class_method_signature": "NonNegativeIntegerSplitterByWeights.splitByTableWeights(\n            ImmutableTable<R, C, Double> weights,\n            int numberToSplit)", "testcase": false, "constructor": false, "invocations": ["collect", "stream", "cellSet", "toImmutableMap", "identity", "split", "collect", "stream", "keySet", "toImmutableTable"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}