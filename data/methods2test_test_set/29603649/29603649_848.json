{"test_class": {"identifier": "MultiPartFileParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private MultiPartFileProcessor multiPartFileProcessor;", "modifier": "@Mock\n    private", "type": "MultiPartFileProcessor", "declarator": "multiPartFileProcessor", "var_name": "multiPartFileProcessor"}, {"original_string": "@Mock\n    private FileItem fileItem;", "modifier": "@Mock\n    private", "type": "FileItem", "declarator": "fileItem", "var_name": "fileItem"}, {"original_string": "@Mock\n    private InputStream uploadedFileStream;", "modifier": "@Mock\n    private", "type": "InputStream", "declarator": "uploadedFileStream", "var_name": "uploadedFileStream"}, {"original_string": "private MultiPartFileParser underTest;", "modifier": "private", "type": "MultiPartFileParser", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "private List<FileItem> uploadedFiles;", "modifier": "private", "type": "List<FileItem>", "declarator": "uploadedFiles", "var_name": "uploadedFiles"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/config/servlet/stub/upload/MultiPartFileParserTest.java"}, "test_case": {"identifier": "testParseMultiPartFilesShouldThrowExceptionWhenFileCanNotBeParsed", "parameters": "()", "modifiers": "@Test(expectedExceptions = IOException.class) public", "return": "void", "body": "@Test(expectedExceptions = IOException.class)\n    public void testParseMultiPartFilesShouldThrowExceptionWhenFileCanNotBeParsed() throws IOException {\n        //GIVEN\n        given(fileItem.isFormField()).willReturn(false);\n        given(fileItem.getInputStream()).willThrow(new IOException());\n        uploadedFiles.add(fileItem);\n        //WHEN\n        underTest.parseMultiPartFiles(uploadedFiles);\n        //THEN exception is thrown\n    }", "signature": "void testParseMultiPartFilesShouldThrowExceptionWhenFileCanNotBeParsed()", "full_signature": "@Test(expectedExceptions = IOException.class) public void testParseMultiPartFilesShouldThrowExceptionWhenFileCanNotBeParsed()", "class_method_signature": "MultiPartFileParserTest.testParseMultiPartFilesShouldThrowExceptionWhenFileCanNotBeParsed()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "isFormField", "willThrow", "given", "getInputStream", "add", "parseMultiPartFiles"]}, "focal_class": {"identifier": "MultiPartFileParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MultiPartFileProcessor multiPartFileProcessor;", "modifier": "private final", "type": "MultiPartFileProcessor", "declarator": "multiPartFileProcessor", "var_name": "multiPartFileProcessor"}], "methods": [{"identifier": "MultiPartFileParser", "parameters": "(final MultiPartFileProcessor multiPartFileProcessor)", "modifiers": "@Autowired public", "return": "", "signature": " MultiPartFileParser(final MultiPartFileProcessor multiPartFileProcessor)", "full_signature": "@Autowired public  MultiPartFileParser(final MultiPartFileProcessor multiPartFileProcessor)", "class_method_signature": "MultiPartFileParser.MultiPartFileParser(final MultiPartFileProcessor multiPartFileProcessor)", "testcase": false, "constructor": true}, {"identifier": "parseMultiPartFiles", "parameters": "(final List<FileItem> fields)", "modifiers": "public", "return": "String", "signature": "String parseMultiPartFiles(final List<FileItem> fields)", "full_signature": "public String parseMultiPartFiles(final List<FileItem> fields)", "class_method_signature": "MultiPartFileParser.parseMultiPartFiles(final List<FileItem> fields)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/config/servlet/stub/upload/MultiPartFileParser.java"}, "focal_method": {"identifier": "parseMultiPartFiles", "parameters": "(final List<FileItem> fields)", "modifiers": "public", "return": "String", "body": "public String parseMultiPartFiles(final List<FileItem> fields) throws IOException {\n        String msg = \"\";\n        Iterator<FileItem> it = fields.iterator();\n        if (!fields.isEmpty() && it.hasNext()) {\n            while (it.hasNext()) {\n                FileItem fileItem = it.next();\n                if (!fileItem.isFormField()) {\n                    String uploadedFileName = fileItem.getName();\n                    InputStream uploadedResource = fileItem.getInputStream();\n                    String contentType = fileItem.getContentType();\n                    String fieldName = fileItem.getFieldName();\n                    msg += multiPartFileProcessor.processUploadedFile(uploadedResource, contentType, fieldName, uploadedFileName);\n                }\n            }\n        } else {\n            msg = \"No file uploaded\";\n        }\n\n        return msg;\n    }", "signature": "String parseMultiPartFiles(final List<FileItem> fields)", "full_signature": "public String parseMultiPartFiles(final List<FileItem> fields)", "class_method_signature": "MultiPartFileParser.parseMultiPartFiles(final List<FileItem> fields)", "testcase": false, "constructor": false, "invocations": ["iterator", "isEmpty", "hasNext", "hasNext", "next", "isFormField", "getName", "getInputStream", "getContentType", "getFieldName", "processUploadedFile"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}