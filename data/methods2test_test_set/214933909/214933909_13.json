{"test_class": {"identifier": "ModShardLocatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String M = \"m\";", "modifier": "private static", "type": "String", "declarator": "M = \"m\"", "var_name": "M"}, {"original_string": "private static String N = \"n\";", "modifier": "private static", "type": "String", "declarator": "N = \"n\"", "var_name": "N"}, {"original_string": "private final int mod = 3;", "modifier": "private final", "type": "int", "declarator": "mod = 3", "var_name": "mod"}, {"original_string": "private ModShardLocator<ConditionContext> test = new ModShardLocator(mod);", "modifier": "private", "type": "ModShardLocator<ConditionContext>", "declarator": "test = new ModShardLocator(mod)", "var_name": "test"}, {"original_string": "private final Set<String> all = set(0,1,2);", "modifier": "private final", "type": "Set<String>", "declarator": "all = set(0,1,2)", "var_name": "all"}], "file": "das-client/src/test/java/com/ppdai/das/strategy/ModShardLocatorTest.java"}, "test_case": {"identifier": "testLocateForBetweenSame", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLocateForBetweenSame() {\n        //For same value\n        assertEquals(set(1),  test.locateForBetween((exp(M, 1, 1))));\n    }", "signature": "void testLocateForBetweenSame()", "full_signature": "@Test public void testLocateForBetweenSame()", "class_method_signature": "ModShardLocatorTest.testLocateForBetweenSame()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "set", "locateForBetween", "exp"]}, "focal_class": {"identifier": "ModShardLocator", "superclass": "extends AbstractCommonShardLocator<CTX>", "interfaces": "", "fields": [{"original_string": "private Integer mod;", "modifier": "private", "type": "Integer", "declarator": "mod", "var_name": "mod"}, {"original_string": "protected String zeroPaddingFormat = \"%01d\";", "modifier": "protected", "type": "String", "declarator": "zeroPaddingFormat = \"%01d\"", "var_name": "zeroPaddingFormat"}], "methods": [{"identifier": "ModShardLocator", "parameters": "(Integer mod)", "modifiers": "public", "return": "", "signature": " ModShardLocator(Integer mod)", "full_signature": "public  ModShardLocator(Integer mod)", "class_method_signature": "ModShardLocator.ModShardLocator(Integer mod)", "testcase": false, "constructor": true}, {"identifier": "ModShardLocator", "parameters": "(Integer mod, String zeroPaddingFormat)", "modifiers": "public", "return": "", "signature": " ModShardLocator(Integer mod, String zeroPaddingFormat)", "full_signature": "public  ModShardLocator(Integer mod, String zeroPaddingFormat)", "class_method_signature": "ModShardLocator.ModShardLocator(Integer mod, String zeroPaddingFormat)", "testcase": false, "constructor": true}, {"identifier": "locateByValue", "parameters": "(Object value)", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> locateByValue(Object value)", "full_signature": "public Set<String> locateByValue(Object value)", "class_method_signature": "ModShardLocator.locateByValue(Object value)", "testcase": false, "constructor": false}, {"identifier": "locateForEqual", "parameters": "(ConditionContext ctx)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> locateForEqual(ConditionContext ctx)", "full_signature": "@Override public Set<String> locateForEqual(ConditionContext ctx)", "class_method_signature": "ModShardLocator.locateForEqual(ConditionContext ctx)", "testcase": false, "constructor": false}, {"identifier": "locateForGreaterThan", "parameters": "(CTX ctx)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> locateForGreaterThan(CTX ctx)", "full_signature": "@Override public Set<String> locateForGreaterThan(CTX ctx)", "class_method_signature": "ModShardLocator.locateForGreaterThan(CTX ctx)", "testcase": false, "constructor": false}, {"identifier": "locateForLessThan", "parameters": "(CTX ctx)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> locateForLessThan(CTX ctx)", "full_signature": "@Override public Set<String> locateForLessThan(CTX ctx)", "class_method_signature": "ModShardLocator.locateForLessThan(CTX ctx)", "testcase": false, "constructor": false}, {"identifier": "locateForBetween", "parameters": "(ConditionContext ctx)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> locateForBetween(ConditionContext ctx)", "full_signature": "@Override public Set<String> locateForBetween(ConditionContext ctx)", "class_method_signature": "ModShardLocator.locateForBetween(ConditionContext ctx)", "testcase": false, "constructor": false}, {"identifier": "mod", "parameters": "(int mod, Object value)", "modifiers": "protected", "return": "String", "signature": "String mod(int mod, Object value)", "full_signature": "protected String mod(int mod, Object value)", "class_method_signature": "ModShardLocator.mod(int mod, Object value)", "testcase": false, "constructor": false}, {"identifier": "getNumberValue", "parameters": "(Object value)", "modifiers": "protected", "return": "Number", "signature": "Number getNumberValue(Object value)", "full_signature": "protected Number getNumberValue(Object value)", "class_method_signature": "ModShardLocator.getNumberValue(Object value)", "testcase": false, "constructor": false}, {"identifier": "string2Long", "parameters": "(String s)", "modifiers": "protected", "return": "Number", "signature": "Number string2Long(String s)", "full_signature": "protected Number string2Long(String s)", "class_method_signature": "ModShardLocator.string2Long(String s)", "testcase": false, "constructor": false}, {"identifier": "applySuffix", "parameters": "(Set<String> original)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> applySuffix(Set<String> original)", "full_signature": "private Set<String> applySuffix(Set<String> original)", "class_method_signature": "ModShardLocator.applySuffix(Set<String> original)", "testcase": false, "constructor": false}], "file": "das-client/src/main/java/com/ppdai/das/strategy/ModShardLocator.java"}, "focal_method": {"identifier": "locateForBetween", "parameters": "(ConditionContext ctx)", "modifiers": "@Override public", "return": "Set<String>", "body": "@Override\n    public Set<String> locateForBetween(ConditionContext ctx) {\n        long lowerValue = (long) getNumberValue(ctx.getValue());\n        long upperValue = (long) getNumberValue(ctx.getSecondValue());\n        \n        Set<String> shards = new HashSet<>();\n        // Illegal case for between\n        if(lowerValue > upperValue) {\n            return shards;\n        }\n        \n        // Cross all shards case\n        if(upperValue - lowerValue >= (mod -1)) {\n            return ctx.getAllShards();\n        }\n        \n        //For same value\n        if(upperValue == lowerValue) {\n            int shard = Integer.parseInt(mod(mod, ctx.getValue()));\n            shards.add(String.valueOf(shard));\n            return applySuffix(shards);\n        }\n\n        int lowerShard = Integer.parseInt(mod(mod, ctx.getValue()));\n        int upperShard = Integer.parseInt(mod(mod, ctx.getSecondValue()));\n        \n        if(lowerShard < upperShard) {\n            while(lowerShard <= upperShard) {\n                shards.add(String.valueOf(lowerShard++));\n            }\n        } else {\n            while(lowerShard < mod) {\n                shards.add(String.valueOf(lowerShard++));\n            }\n            \n            int shard = 0;\n            while(shard <= upperShard) {\n                shards.add(String.valueOf(shard++));\n            }\n        }\n\n        return applySuffix(shards);\n    }", "signature": "Set<String> locateForBetween(ConditionContext ctx)", "full_signature": "@Override public Set<String> locateForBetween(ConditionContext ctx)", "class_method_signature": "ModShardLocator.locateForBetween(ConditionContext ctx)", "testcase": false, "constructor": false, "invocations": ["getNumberValue", "getValue", "getNumberValue", "getSecondValue", "getAllShards", "parseInt", "mod", "getValue", "add", "valueOf", "applySuffix", "parseInt", "mod", "getValue", "parseInt", "mod", "getSecondValue", "add", "valueOf", "add", "valueOf", "add", "valueOf", "applySuffix"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}