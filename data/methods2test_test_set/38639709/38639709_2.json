{"test_class": {"identifier": "LaunchingRepositoryBuildVisitorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final BranchService branchService = mock(BranchService.class);", "modifier": "private static final", "type": "BranchService", "declarator": "branchService = mock(BranchService.class)", "var_name": "branchService"}, {"original_string": "private static final BuildConfigUtils buildConfigUtils = mock(BuildConfigUtils.class);", "modifier": "private static final", "type": "BuildConfigUtils", "declarator": "buildConfigUtils = mock(BuildConfigUtils.class)", "var_name": "buildConfigUtils"}, {"original_string": "private static final RepositoryBuildService repositoryBuildService = mock(RepositoryBuildService.class);", "modifier": "private static final", "type": "RepositoryBuildService", "declarator": "repositoryBuildService = mock(RepositoryBuildService.class)", "var_name": "repositoryBuildService"}, {"original_string": "private static final ModuleBuildService moduleBuildService = mock(ModuleBuildService.class);", "modifier": "private static final", "type": "ModuleBuildService", "declarator": "moduleBuildService = mock(ModuleBuildService.class)", "var_name": "moduleBuildService"}, {"original_string": "private static final MalformedFileService malformedFileService = mock(MalformedFileService.class);", "modifier": "private static final", "type": "MalformedFileService", "declarator": "malformedFileService = mock(MalformedFileService.class)", "var_name": "malformedFileService"}, {"original_string": "private static final InterProjectBuildService interProjectBuildService = mock(InterProjectBuildService.class);", "modifier": "private static final", "type": "InterProjectBuildService", "declarator": "interProjectBuildService = mock(InterProjectBuildService.class)", "var_name": "interProjectBuildService"}, {"original_string": "private static final InterProjectBuildMappingService interProjectBuildMappingService = mock(InterProjectBuildMappingService.class);", "modifier": "private static final", "type": "InterProjectBuildMappingService", "declarator": "interProjectBuildMappingService = mock(InterProjectBuildMappingService.class)", "var_name": "interProjectBuildMappingService"}, {"original_string": "private static final ModuleService moduleService = mock(ModuleService.class);", "modifier": "private static final", "type": "ModuleService", "declarator": "moduleService = mock(ModuleService.class)", "var_name": "moduleService"}, {"original_string": "private static final DependenciesService dependenciesService = mock(DependenciesService.class);", "modifier": "private static final", "type": "DependenciesService", "declarator": "dependenciesService = mock(DependenciesService.class)", "var_name": "dependenciesService"}, {"original_string": "private static final GitHubHelper gitHubHelper = mock(GitHubHelper.class);", "modifier": "private static final", "type": "GitHubHelper", "declarator": "gitHubHelper = mock(GitHubHelper.class)", "var_name": "gitHubHelper"}, {"original_string": "private static final GitInfo branch = new GitInfo(Optional.of(1), \"git.example.com\", \"example\", \"test\", 1337, \"master\", true, 100L, 100L);", "modifier": "private static final", "type": "GitInfo", "declarator": "branch = new GitInfo(Optional.of(1), \"git.example.com\", \"example\", \"test\", 1337, \"master\", true, 100L, 100L)", "var_name": "branch"}, {"original_string": "private static final BuildConfig defaultBuildConfig = BuildConfig.makeDefaultBuildConfig();", "modifier": "private static final", "type": "BuildConfig", "declarator": "defaultBuildConfig = BuildConfig.makeDefaultBuildConfig()", "var_name": "defaultBuildConfig"}, {"original_string": "private static final Module activeModule = new Module(Optional.of(1),\n      \"activeModule\",\n      \"config\",\n      \"/activeModule\",\n      \"/activeModule/*\",\n      true,\n      100L,\n      100L,\n      Optional.absent(),\n      Optional.of(defaultBuildConfig),\n      Optional.of(defaultBuildConfig));", "modifier": "private static final", "type": "Module", "declarator": "activeModule = new Module(Optional.of(1),\n      \"activeModule\",\n      \"config\",\n      \"/activeModule\",\n      \"/activeModule/*\",\n      true,\n      100L,\n      100L,\n      Optional.absent(),\n      Optional.of(defaultBuildConfig),\n      Optional.of(defaultBuildConfig))", "var_name": "activeModule"}, {"original_string": "private static final Module inactiveModule = new Module(Optional.of(2),\n      \"inactiveModule\",\n      \"config\",\n      \"/inactiveModule\",\n      \"/inactiveModule/*\",\n      false,\n      100L,\n      100L,\n      Optional.absent(),\n      Optional.of(defaultBuildConfig),\n      Optional.of(defaultBuildConfig));", "modifier": "private static final", "type": "Module", "declarator": "inactiveModule = new Module(Optional.of(2),\n      \"inactiveModule\",\n      \"config\",\n      \"/inactiveModule\",\n      \"/inactiveModule/*\",\n      false,\n      100L,\n      100L,\n      Optional.absent(),\n      Optional.of(defaultBuildConfig),\n      Optional.of(defaultBuildConfig))", "var_name": "inactiveModule"}, {"original_string": "private static final Map<Integer, Set<Integer>> dependencyMap = ImmutableMap.of(\n      1, ImmutableSet.of(),\n      2, ImmutableSet.of());", "modifier": "private static final", "type": "Map<Integer, Set<Integer>>", "declarator": "dependencyMap = ImmutableMap.of(\n      1, ImmutableSet.of(),\n      2, ImmutableSet.of())", "var_name": "dependencyMap"}, {"original_string": "private static final CommitInfo commitInfo = new CommitInfo(GitHubProtos.Commit.newBuilder().setId(\"0000000000000000000000000000000000000000\").build(), Optional.absent(), Collections.emptyList(), false);", "modifier": "private static final", "type": "CommitInfo", "declarator": "commitInfo = new CommitInfo(GitHubProtos.Commit.newBuilder().setId(\"0000000000000000000000000000000000000000\").build(), Optional.absent(), Collections.emptyList(), false)", "var_name": "commitInfo"}, {"original_string": "private static final RepositoryBuild launchingBuild =\n        RepositoryBuild.newBuilder(1, 1, RepositoryBuild.State.LAUNCHING, BuildTrigger.forUser(\"example\"), new BuildOptions(ImmutableSet.of(1), BuildOptions.BuildDownstreams.WITHIN_REPOSITORY, false))\n            .setId(Optional.of(1L))\n            .setDependencyGraph(Optional.of(new DependencyGraph(dependencyMap, ImmutableList.of(1, 2))))\n            .setCommitInfo(Optional.of(commitInfo))\n        .build();", "modifier": "private static final", "type": "RepositoryBuild", "declarator": "launchingBuild =\n        RepositoryBuild.newBuilder(1, 1, RepositoryBuild.State.LAUNCHING, BuildTrigger.forUser(\"example\"), new BuildOptions(ImmutableSet.of(1), BuildOptions.BuildDownstreams.WITHIN_REPOSITORY, false))\n            .setId(Optional.of(1L))\n            .setDependencyGraph(Optional.of(new DependencyGraph(dependencyMap, ImmutableList.of(1, 2))))\n            .setCommitInfo(Optional.of(commitInfo))\n        .build()", "var_name": "launchingBuild"}, {"original_string": "private static final LaunchingRepositoryBuildVisitor buildVisitor = new LaunchingRepositoryBuildVisitor(\n      repositoryBuildService,\n      moduleBuildService,\n      malformedFileService,\n      interProjectBuildService,\n      interProjectBuildMappingService,\n      moduleService,\n      dependenciesService,\n      gitHubHelper);", "modifier": "private static final", "type": "LaunchingRepositoryBuildVisitor", "declarator": "buildVisitor = new LaunchingRepositoryBuildVisitor(\n      repositoryBuildService,\n      moduleBuildService,\n      malformedFileService,\n      interProjectBuildService,\n      interProjectBuildMappingService,\n      moduleService,\n      dependenciesService,\n      gitHubHelper)", "var_name": "buildVisitor"}], "file": "BlazarService/src/test/java/com/hubspot/blazar/visitor/repositorybuild/LaunchingRepositoryBuildVisitorTest.java"}, "test_case": {"identifier": "itFailsBuildOfBranchWhenItHasMalformedFiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void itFailsBuildOfBranchWhenItHasMalformedFiles() throws Exception {\n    when(malformedFileService.getMalformedFiles(anyInt()))\n        .thenReturn(ImmutableSet.of(new MalformedFile(1, \"config\", \"/.blazar.yaml\", \"this is a test malformed file\")));\n    when(moduleService.getByBranch(1)).thenReturn(ImmutableSet.of(activeModule, inactiveModule));\n\n    boolean[] moduleBuildFailed = {false};\n    doAnswer(invocation ->  {\n      RepositoryBuild build = (RepositoryBuild) invocation.getArguments()[0];\n      Module module = (Module) invocation.getArguments()[1];\n\n      assertThat(module.equals(activeModule));\n      assertThat(build.equals(launchingBuild));\n      moduleBuildFailed[0] = true;\n      return null;\n    }).when(moduleBuildService).createFailedBuild(any(), any());\n\n    boolean[] repoBuildFailed = {false};\n    doAnswer(invocation -> {\n      RepositoryBuild build = (RepositoryBuild) invocation.getArguments()[0];\n      assertThat(build).isEqualTo(launchingBuild);\n      repoBuildFailed[0] = true;\n\n      return null;\n    }).when(repositoryBuildService).fail(any());\n\n    buildVisitor.visitLaunching(launchingBuild);\n    assertThat(repoBuildFailed[0]).isTrue();\n    assertThat(moduleBuildFailed[0]).isTrue();\n  }", "signature": "void itFailsBuildOfBranchWhenItHasMalformedFiles()", "full_signature": "@Test public void itFailsBuildOfBranchWhenItHasMalformedFiles()", "class_method_signature": "LaunchingRepositoryBuildVisitorTest.itFailsBuildOfBranchWhenItHasMalformedFiles()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getMalformedFiles", "anyInt", "of", "thenReturn", "when", "getByBranch", "of", "createFailedBuild", "when", "doAnswer", "getArguments", "getArguments", "assertThat", "equals", "assertThat", "equals", "any", "any", "fail", "when", "doAnswer", "getArguments", "isEqualTo", "assertThat", "any", "visitLaunching", "isTrue", "assertThat", "isTrue", "assertThat"]}, "focal_class": {"identifier": "LaunchingRepositoryBuildVisitor", "superclass": "extends AbstractRepositoryBuildVisitor", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(LaunchingRepositoryBuildVisitor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(LaunchingRepositoryBuildVisitor.class)", "var_name": "LOG"}, {"original_string": "private final RepositoryBuildService repositoryBuildService;", "modifier": "private final", "type": "RepositoryBuildService", "declarator": "repositoryBuildService", "var_name": "repositoryBuildService"}, {"original_string": "private final ModuleBuildService moduleBuildService;", "modifier": "private final", "type": "ModuleBuildService", "declarator": "moduleBuildService", "var_name": "moduleBuildService"}, {"original_string": "private MalformedFileService malformedFileService;", "modifier": "private", "type": "MalformedFileService", "declarator": "malformedFileService", "var_name": "malformedFileService"}, {"original_string": "private InterProjectBuildService interProjectBuildService;", "modifier": "private", "type": "InterProjectBuildService", "declarator": "interProjectBuildService", "var_name": "interProjectBuildService"}, {"original_string": "private InterProjectBuildMappingService interProjectBuildMappingService;", "modifier": "private", "type": "InterProjectBuildMappingService", "declarator": "interProjectBuildMappingService", "var_name": "interProjectBuildMappingService"}, {"original_string": "private final ModuleService moduleService;", "modifier": "private final", "type": "ModuleService", "declarator": "moduleService", "var_name": "moduleService"}, {"original_string": "private final DependenciesService dependenciesService;", "modifier": "private final", "type": "DependenciesService", "declarator": "dependenciesService", "var_name": "dependenciesService"}, {"original_string": "private final GitHubHelper gitHubHelper;", "modifier": "private final", "type": "GitHubHelper", "declarator": "gitHubHelper", "var_name": "gitHubHelper"}], "methods": [{"identifier": "LaunchingRepositoryBuildVisitor", "parameters": "(RepositoryBuildService repositoryBuildService,\n                                         ModuleBuildService moduleBuildService,\n                                         MalformedFileService malformedFileService,\n                                         InterProjectBuildService interProjectBuildService,\n                                         InterProjectBuildMappingService interProjectBuildMappingService,\n                                         ModuleService moduleService,\n                                         DependenciesService dependenciesService,\n                                         GitHubHelper gitHubHelper)", "modifiers": "@Inject public", "return": "", "signature": " LaunchingRepositoryBuildVisitor(RepositoryBuildService repositoryBuildService,\n                                         ModuleBuildService moduleBuildService,\n                                         MalformedFileService malformedFileService,\n                                         InterProjectBuildService interProjectBuildService,\n                                         InterProjectBuildMappingService interProjectBuildMappingService,\n                                         ModuleService moduleService,\n                                         DependenciesService dependenciesService,\n                                         GitHubHelper gitHubHelper)", "full_signature": "@Inject public  LaunchingRepositoryBuildVisitor(RepositoryBuildService repositoryBuildService,\n                                         ModuleBuildService moduleBuildService,\n                                         MalformedFileService malformedFileService,\n                                         InterProjectBuildService interProjectBuildService,\n                                         InterProjectBuildMappingService interProjectBuildMappingService,\n                                         ModuleService moduleService,\n                                         DependenciesService dependenciesService,\n                                         GitHubHelper gitHubHelper)", "class_method_signature": "LaunchingRepositoryBuildVisitor.LaunchingRepositoryBuildVisitor(RepositoryBuildService repositoryBuildService,\n                                         ModuleBuildService moduleBuildService,\n                                         MalformedFileService malformedFileService,\n                                         InterProjectBuildService interProjectBuildService,\n                                         InterProjectBuildMappingService interProjectBuildMappingService,\n                                         ModuleService moduleService,\n                                         DependenciesService dependenciesService,\n                                         GitHubHelper gitHubHelper)", "testcase": false, "constructor": true}, {"identifier": "visitLaunching", "parameters": "(RepositoryBuild build)", "modifiers": "@Override protected", "return": "void", "signature": "void visitLaunching(RepositoryBuild build)", "full_signature": "@Override protected void visitLaunching(RepositoryBuild build)", "class_method_signature": "LaunchingRepositoryBuildVisitor.visitLaunching(RepositoryBuild build)", "testcase": false, "constructor": false}, {"identifier": "failBranchAndModuleBuilds", "parameters": "(RepositoryBuild build, Set<Module> activeModules)", "modifiers": "private", "return": "void", "signature": "void failBranchAndModuleBuilds(RepositoryBuild build, Set<Module> activeModules)", "full_signature": "private void failBranchAndModuleBuilds(RepositoryBuild build, Set<Module> activeModules)", "class_method_signature": "LaunchingRepositoryBuildVisitor.failBranchAndModuleBuilds(RepositoryBuild build, Set<Module> activeModules)", "testcase": false, "constructor": false}, {"identifier": "determineModulesToBuildUsingInterProjectBuildGraph", "parameters": "(RepositoryBuild build, Set<Module> activeModules)", "modifiers": "private", "return": "Set<Module>", "signature": "Set<Module> determineModulesToBuildUsingInterProjectBuildGraph(RepositoryBuild build, Set<Module> activeModules)", "full_signature": "private Set<Module> determineModulesToBuildUsingInterProjectBuildGraph(RepositoryBuild build, Set<Module> activeModules)", "class_method_signature": "LaunchingRepositoryBuildVisitor.determineModulesToBuildUsingInterProjectBuildGraph(RepositoryBuild build, Set<Module> activeModules)", "testcase": false, "constructor": false}, {"identifier": "findModulesToBuild", "parameters": "(RepositoryBuild build, Set<Module> buildableModules)", "modifiers": "private", "return": "Set<Module>", "signature": "Set<Module> findModulesToBuild(RepositoryBuild build, Set<Module> buildableModules)", "full_signature": "private Set<Module> findModulesToBuild(RepositoryBuild build, Set<Module> buildableModules)", "class_method_signature": "LaunchingRepositoryBuildVisitor.findModulesToBuild(RepositoryBuild build, Set<Module> buildableModules)", "testcase": false, "constructor": false}, {"identifier": "addDownstreamModules", "parameters": "(RepositoryBuild build, Set<Module> allModules, Set<Module> toBuild)", "modifiers": "private", "return": "void", "signature": "void addDownstreamModules(RepositoryBuild build, Set<Module> allModules, Set<Module> toBuild)", "full_signature": "private void addDownstreamModules(RepositoryBuild build, Set<Module> allModules, Set<Module> toBuild)", "class_method_signature": "LaunchingRepositoryBuildVisitor.addDownstreamModules(RepositoryBuild build, Set<Module> allModules, Set<Module> toBuild)", "testcase": false, "constructor": false}, {"identifier": "lastBuildSucceeded", "parameters": "(Module module)", "modifiers": "private", "return": "boolean", "signature": "boolean lastBuildSucceeded(Module module)", "full_signature": "private boolean lastBuildSucceeded(Module module)", "class_method_signature": "LaunchingRepositoryBuildVisitor.lastBuildSucceeded(Module module)", "testcase": false, "constructor": false}, {"identifier": "getIds", "parameters": "(Set<Module> modules)", "modifiers": "private static", "return": "Set<Integer>", "signature": "Set<Integer> getIds(Set<Module> modules)", "full_signature": "private static Set<Integer> getIds(Set<Module> modules)", "class_method_signature": "LaunchingRepositoryBuildVisitor.getIds(Set<Module> modules)", "testcase": false, "constructor": false}, {"identifier": "filterActive", "parameters": "(Set<Module> modules)", "modifiers": "private static", "return": "Set<Module>", "signature": "Set<Module> filterActive(Set<Module> modules)", "full_signature": "private static Set<Module> filterActive(Set<Module> modules)", "class_method_signature": "LaunchingRepositoryBuildVisitor.filterActive(Set<Module> modules)", "testcase": false, "constructor": false}, {"identifier": "mapByModuleId", "parameters": "(Set<Module> modules)", "modifiers": "private static", "return": "Map<Integer, Module>", "signature": "Map<Integer, Module> mapByModuleId(Set<Module> modules)", "full_signature": "private static Map<Integer, Module> mapByModuleId(Set<Module> modules)", "class_method_signature": "LaunchingRepositoryBuildVisitor.mapByModuleId(Set<Module> modules)", "testcase": false, "constructor": false}, {"identifier": "enqueueModuleBuild", "parameters": "(RepositoryBuild branchBuild, Module module)", "modifiers": "private", "return": "void", "signature": "void enqueueModuleBuild(RepositoryBuild branchBuild, Module module)", "full_signature": "private void enqueueModuleBuild(RepositoryBuild branchBuild, Module module)", "class_method_signature": "LaunchingRepositoryBuildVisitor.enqueueModuleBuild(RepositoryBuild branchBuild, Module module)", "testcase": false, "constructor": false}], "file": "BlazarService/src/main/java/com/hubspot/blazar/visitor/repositorybuild/LaunchingRepositoryBuildVisitor.java"}, "focal_method": {"identifier": "visitLaunching", "parameters": "(RepositoryBuild build)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n  protected void visitLaunching(RepositoryBuild build) throws Exception {\n    LOG.info(\"Going to enqueue module builds for repository build {}\", build.getId().get());\n\n    final Set<Module> activeModules = filterActive(moduleService.getByBranch(build.getBranchId()));\n\n    // 1. Check for malformed files\n    if (!malformedFileService.getMalformedFiles(build.getBranchId()).isEmpty()) {\n      failBranchAndModuleBuilds(build, activeModules);\n      return;\n    }\n\n    // 2. Check for buildable modules\n    if (activeModules.isEmpty()) {\n      LOG.info(\"No active modules to build in branch {} - failing build\", build.getId().get());\n      repositoryBuildService.fail(build);\n      return;\n    }\n\n    final Optional<Long> interProjectBuildId;\n    final Set<Module> toBuild;\n\n    // 3. The modules we choose to build depends on if this is an InterProject build or not\n    //    If this is an InterProject build we enqueue one of those as well.\n    if (build.getBuildOptions().getBuildDownstreams() == BuildDownstreams.INTER_PROJECT) {\n      toBuild = determineModulesToBuildUsingInterProjectBuildGraph(build, activeModules);\n      InterProjectBuild ipb = InterProjectBuild.getQueuedBuild(ImmutableSet.copyOf(getIds(toBuild)), build.getBuildTrigger());\n      interProjectBuildId = Optional.of(interProjectBuildService.enqueue(ipb));\n    } else {\n      interProjectBuildId = Optional.absent();\n      toBuild = findModulesToBuild(build, activeModules);\n    }\n\n    // 4. Launch the modules we want to build\n    for (Module module : build.getDependencyGraph().get().orderByTopologicalSort(toBuild)) {\n\n      enqueueModuleBuild(build, module);\n      if (build.getBuildOptions().getBuildDownstreams() == BuildDownstreams.INTER_PROJECT) {\n        interProjectBuildMappingService.insert(InterProjectBuildMapping.makeNewMapping(interProjectBuildId.get(), build.getBranchId(), build.getId(), module.getId().get()));\n      }\n    }\n\n    // 5. Only calculate skipped modules after we know what modules will build\n    Set<Module> skipped = Sets.difference(activeModules, toBuild);\n    for (Module module : skipped) {\n      moduleBuildService.skip(build, module);\n    }\n\n    // 6. Update the state of this branch build.\n    repositoryBuildService.update(build.toBuilder().setState(State.IN_PROGRESS).build());\n  }", "signature": "void visitLaunching(RepositoryBuild build)", "full_signature": "@Override protected void visitLaunching(RepositoryBuild build)", "class_method_signature": "LaunchingRepositoryBuildVisitor.visitLaunching(RepositoryBuild build)", "testcase": false, "constructor": false, "invocations": ["info", "get", "getId", "filterActive", "getByBranch", "getBranchId", "isEmpty", "getMalformedFiles", "getBranchId", "failBranchAndModuleBuilds", "isEmpty", "info", "get", "getId", "fail", "getBuildDownstreams", "getBuildOptions", "determineModulesToBuildUsingInterProjectBuildGraph", "getQueuedBuild", "copyOf", "getIds", "getBuildTrigger", "of", "enqueue", "absent", "findModulesToBuild", "orderByTopologicalSort", "get", "getDependencyGraph", "enqueueModuleBuild", "getBuildDownstreams", "getBuildOptions", "insert", "makeNewMapping", "get", "getBranchId", "getId", "get", "getId", "difference", "skip", "update", "build", "setState", "toBuilder"]}, "repository": {"repo_id": 38639709, "url": "https://github.com/HubSpot/Blazar-Archive", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 66, "size": 4209, "license": "licensed"}}