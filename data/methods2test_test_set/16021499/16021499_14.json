{"test_class": {"identifier": "DocViewNodeTest", "superclass": "", "interfaces": "", "fields": [], "file": "vault-core/src/test/java/org/apache/jackrabbit/vault/util/DocViewNodeTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() throws NamespaceException {\n        Map<String, DocViewProperty> properties1 = new HashMap<>();\n        properties1.put(\"property1\", new DocViewProperty(\"property1\", new String[] {\"value1\"}, false, PropertyType.STRING));\n        DocViewNode node1 = new DocViewNode(\"name\", \"label\", \"uuid1\", properties1, new String[] { \"mixin1\", \"mixin2\" }, \"primary\");\n        DocViewNode node2 = new DocViewNode(\"name\", \"label\", \"uuid1\", properties1, new String[] { \"mixin1\", \"mixin2\" }, \"primary\");\n        Assert.assertEquals(node1, node2);\n        DocViewNode node3 = new DocViewNode(\"name\", \"label\", \"uuid1\", properties1, new String[] { \"mixin1\", \"mixin3\" }, \"primary\");\n        Assert.assertNotEquals(node1, node3);\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "DocViewNodeTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["put", "assertEquals", "assertNotEquals"]}, "focal_class": {"identifier": "DocViewNode", "superclass": "", "interfaces": "", "fields": [{"original_string": "public final String name;", "modifier": "public final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "public final String label;", "modifier": "public final", "type": "String", "declarator": "label", "var_name": "label"}, {"original_string": "public final Map<String, DocViewProperty> props = new HashMap<String, DocViewProperty>();", "modifier": "public final", "type": "Map<String, DocViewProperty>", "declarator": "props = new HashMap<String, DocViewProperty>()", "var_name": "props"}, {"original_string": "public String uuid;", "modifier": "public", "type": "String", "declarator": "uuid", "var_name": "uuid"}, {"original_string": "public final String[] mixins;", "modifier": "public final", "type": "String[]", "declarator": "mixins", "var_name": "mixins"}, {"original_string": "public final String primary;", "modifier": "public final", "type": "String", "declarator": "primary", "var_name": "primary"}], "methods": [{"identifier": "DocViewNode", "parameters": "(String name, String label, String uuid, Map<String, DocViewProperty> props, String[] mixins, String primary)", "modifiers": "public", "return": "", "signature": " DocViewNode(String name, String label, String uuid, Map<String, DocViewProperty> props, String[] mixins, String primary)", "full_signature": "public  DocViewNode(String name, String label, String uuid, Map<String, DocViewProperty> props, String[] mixins, String primary)", "class_method_signature": "DocViewNode.DocViewNode(String name, String label, String uuid, Map<String, DocViewProperty> props, String[] mixins, String primary)", "testcase": false, "constructor": true}, {"identifier": "DocViewNode", "parameters": "(String name, String label, Attributes attributes, NamePathResolver npResolver)", "modifiers": "public", "return": "", "signature": " DocViewNode(String name, String label, Attributes attributes, NamePathResolver npResolver)", "full_signature": "public  DocViewNode(String name, String label, Attributes attributes, NamePathResolver npResolver)", "class_method_signature": "DocViewNode.DocViewNode(String name, String label, Attributes attributes, NamePathResolver npResolver)", "testcase": false, "constructor": true}, {"identifier": "getValues", "parameters": "(String name)", "modifiers": "public", "return": "String[]", "signature": "String[] getValues(String name)", "full_signature": "public String[] getValues(String name)", "class_method_signature": "DocViewNode.getValues(String name)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(String name)", "modifiers": "public", "return": "String", "signature": "String getValue(String name)", "full_signature": "public String getValue(String name)", "class_method_signature": "DocViewNode.getValue(String name)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DocViewNode.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "DocViewNode.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DocViewNode.toString()", "testcase": false, "constructor": false}], "file": "vault-core/src/main/java/org/apache/jackrabbit/vault/util/DocViewNode.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        DocViewNode other = (DocViewNode) obj;\n        if (label == null) {\n            if (other.label != null)\n                return false;\n        } else if (!label.equals(other.label))\n            return false;\n        if (!Arrays.equals(mixins, other.mixins))\n            return false;\n        if (name == null) {\n            if (other.name != null)\n                return false;\n        } else if (!name.equals(other.name))\n            return false;\n        if (primary == null) {\n            if (other.primary != null)\n                return false;\n        } else if (!primary.equals(other.primary))\n            return false;\n        if (props == null) {\n            if (other.props != null)\n                return false;\n        } else if (!props.equals(other.props))\n            return false;\n        if (uuid == null) {\n            if (other.uuid != null)\n                return false;\n        } else if (!uuid.equals(other.uuid))\n            return false;\n        return true;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "DocViewNode.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "equals", "equals", "equals", "equals", "equals", "equals"]}, "repository": {"repo_id": 16021499, "url": "https://github.com/apache/jackrabbit-filevault", "stars": 24, "created": "1/18/2014 8:00:07 AM +00:00", "updates": "2020-01-22T11:47:21+00:00", "fork": "False", "license": "licensed"}}