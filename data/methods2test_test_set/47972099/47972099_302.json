{"test_class": {"identifier": "ArrayFromTupleTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String[] testStrings;", "modifier": "private", "type": "String[]", "declarator": "testStrings", "var_name": "testStrings"}, {"original_string": "private static final Class<?>[] CLASSES = new Class<?>[] { Tuple1.class, Tuple2.class,\n\t\t\tTuple3.class, Tuple4.class, Tuple5.class, Tuple6.class, Tuple7.class, Tuple8.class,\n\t\t\tTuple9.class, Tuple10.class, Tuple11.class, Tuple12.class, Tuple13.class,\n\t\t\tTuple14.class, Tuple15.class, Tuple16.class, Tuple17.class, Tuple18.class,\n\t\t\tTuple19.class, Tuple20.class, Tuple21.class, Tuple22.class, Tuple23.class,\n\t\t\tTuple24.class, Tuple25.class };", "modifier": "private static final", "type": "Class<?>[]", "declarator": "CLASSES = new Class<?>[] { Tuple1.class, Tuple2.class,\n\t\t\tTuple3.class, Tuple4.class, Tuple5.class, Tuple6.class, Tuple7.class, Tuple8.class,\n\t\t\tTuple9.class, Tuple10.class, Tuple11.class, Tuple12.class, Tuple13.class,\n\t\t\tTuple14.class, Tuple15.class, Tuple16.class, Tuple17.class, Tuple18.class,\n\t\t\tTuple19.class, Tuple20.class, Tuple21.class, Tuple22.class, Tuple23.class,\n\t\t\tTuple24.class, Tuple25.class }", "var_name": "CLASSES"}], "file": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/windowing/delta/extractor/ArrayFromTupleTest.java"}, "test_case": {"identifier": "testUserSpecifiedOrder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testUserSpecifiedOrder() throws InstantiationException, IllegalAccessException {\n\t\tTuple currentTuple = (Tuple) CLASSES[Tuple.MAX_ARITY - 1].newInstance();\n\t\tfor (int i = 0; i < Tuple.MAX_ARITY; i++) {\n\t\t\tcurrentTuple.setField(testStrings[i], i);\n\t\t}\n\n\t\tString[] expected = { testStrings[5], testStrings[3], testStrings[6], testStrings[7],\n\t\t\t\ttestStrings[0] };\n\t\tarrayEqualityCheck(expected, new ArrayFromTuple(5, 3, 6, 7, 0).extract(currentTuple));\n\n\t\tString[] expected2 = { testStrings[0], testStrings[Tuple.MAX_ARITY - 1] };\n\t\tarrayEqualityCheck(expected2,\n\t\t\t\tnew ArrayFromTuple(0, Tuple.MAX_ARITY - 1).extract(currentTuple));\n\n\t\tString[] expected3 = { testStrings[Tuple.MAX_ARITY - 1], testStrings[0] };\n\t\tarrayEqualityCheck(expected3,\n\t\t\t\tnew ArrayFromTuple(Tuple.MAX_ARITY - 1, 0).extract(currentTuple));\n\n\t\tString[] expected4 = { testStrings[13], testStrings[4], testStrings[5], testStrings[4],\n\t\t\t\ttestStrings[2], testStrings[8], testStrings[6], testStrings[2], testStrings[8],\n\t\t\t\ttestStrings[3], testStrings[5], testStrings[2], testStrings[16], testStrings[4],\n\t\t\t\ttestStrings[3], testStrings[2], testStrings[6], testStrings[4], testStrings[7],\n\t\t\t\ttestStrings[4], testStrings[2], testStrings[8], testStrings[7], testStrings[2] };\n\t\tarrayEqualityCheck(expected4, new ArrayFromTuple(13, 4, 5, 4, 2, 8, 6, 2, 8, 3, 5, 2, 16,\n\t\t\t\t4, 3, 2, 6, 4, 7, 4, 2, 8, 7, 2).extract(currentTuple));\n\t}", "signature": "void testUserSpecifiedOrder()", "full_signature": "@Test public void testUserSpecifiedOrder()", "class_method_signature": "ArrayFromTupleTest.testUserSpecifiedOrder()", "testcase": true, "constructor": false, "invocations": ["newInstance", "setField", "arrayEqualityCheck", "extract", "arrayEqualityCheck", "extract", "arrayEqualityCheck", "extract", "arrayEqualityCheck", "extract"]}, "focal_class": {"identifier": "ArrayFromTuple", "superclass": "", "interfaces": "implements Extractor<Tuple, Object[]>", "fields": [{"original_string": "private static final long serialVersionUID = -6076121226427616818L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -6076121226427616818L", "var_name": "serialVersionUID"}, {"original_string": "int[] order = null;", "modifier": "", "type": "int[]", "declarator": "order = null", "var_name": "order"}], "methods": [{"identifier": "ArrayFromTuple", "parameters": "()", "modifiers": "public", "return": "", "signature": " ArrayFromTuple()", "full_signature": "public  ArrayFromTuple()", "class_method_signature": "ArrayFromTuple.ArrayFromTuple()", "testcase": false, "constructor": true}, {"identifier": "ArrayFromTuple", "parameters": "(int... indexes)", "modifiers": "public", "return": "", "signature": " ArrayFromTuple(int... indexes)", "full_signature": "public  ArrayFromTuple(int... indexes)", "class_method_signature": "ArrayFromTuple.ArrayFromTuple(int... indexes)", "testcase": false, "constructor": true}, {"identifier": "extract", "parameters": "(Tuple in)", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] extract(Tuple in)", "full_signature": "@Override public Object[] extract(Tuple in)", "class_method_signature": "ArrayFromTuple.extract(Tuple in)", "testcase": false, "constructor": false}], "file": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/windowing/delta/extractor/ArrayFromTuple.java"}, "focal_method": {"identifier": "extract", "parameters": "(Tuple in)", "modifiers": "@Override public", "return": "Object[]", "body": "@Override\n\tpublic Object[] extract(Tuple in) {\n\t\tObject[] output;\n\n\t\tif (order == null) {\n\t\t\t// copy the whole tuple\n\t\t\toutput = new Object[in.getArity()];\n\t\t\tfor (int i = 0; i < in.getArity(); i++) {\n\t\t\t\toutput[i] = in.getField(i);\n\t\t\t}\n\t\t} else {\n\t\t\t// copy user specified order\n\t\t\toutput = new Object[order.length];\n\t\t\tfor (int i = 0; i < order.length; i++) {\n\t\t\t\toutput[i] = in.getField(order[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn output;\n\t}", "signature": "Object[] extract(Tuple in)", "full_signature": "@Override public Object[] extract(Tuple in)", "class_method_signature": "ArrayFromTuple.extract(Tuple in)", "testcase": false, "constructor": false, "invocations": ["getArity", "getArity", "getField", "getField"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}