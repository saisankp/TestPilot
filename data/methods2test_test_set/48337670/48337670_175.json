{"test_class": {"identifier": "HttpUtilTest", "superclass": "extends BaseHttpUtilTest", "interfaces": "", "fields": [], "file": "bundles/org.openhab.core.io.net/src/test/java/org/openhab/core/io/net/http/HttpUtilTest.java"}, "test_case": {"identifier": "baseTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void baseTest() throws Exception {\n        mockResponse(HttpStatus.OK_200);\n\n        String result = HttpUtil.executeUrl(\"GET\", URL, 500);\n\n        assertEquals(\"Some content\", result);\n\n        verify(httpClientMock).newRequest(URL);\n        verify(requestMock).method(HttpMethod.GET);\n        verify(requestMock).timeout(500, TimeUnit.MILLISECONDS);\n        verify(requestMock).send();\n    }", "signature": "void baseTest()", "full_signature": "@Test public void baseTest()", "class_method_signature": "HttpUtilTest.baseTest()", "testcase": true, "constructor": false, "invocations": ["mockResponse", "executeUrl", "assertEquals", "newRequest", "verify", "method", "verify", "timeout", "verify", "send", "verify"]}, "focal_class": {"identifier": "HttpUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(HttpUtil.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(HttpUtil.class)", "var_name": "LOGGER"}, {"original_string": "private static final int DEFAULT_TIMEOUT_MS = 5000;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_TIMEOUT_MS = 5000", "var_name": "DEFAULT_TIMEOUT_MS"}, {"original_string": "private static HttpClientFactory httpClientFactory;", "modifier": "private static", "type": "HttpClientFactory", "declarator": "httpClientFactory", "var_name": "httpClientFactory"}], "methods": [{"identifier": "executeUrl", "parameters": "(String httpMethod, String url, int timeout)", "modifiers": "public static", "return": "String", "signature": "String executeUrl(String httpMethod, String url, int timeout)", "full_signature": "public static String executeUrl(String httpMethod, String url, int timeout)", "class_method_signature": "HttpUtil.executeUrl(String httpMethod, String url, int timeout)", "testcase": false, "constructor": false}, {"identifier": "executeUrl", "parameters": "(String httpMethod, String url, InputStream content, String contentType, int timeout)", "modifiers": "public static", "return": "String", "signature": "String executeUrl(String httpMethod, String url, InputStream content, String contentType, int timeout)", "full_signature": "public static String executeUrl(String httpMethod, String url, InputStream content, String contentType, int timeout)", "class_method_signature": "HttpUtil.executeUrl(String httpMethod, String url, InputStream content, String contentType, int timeout)", "testcase": false, "constructor": false}, {"identifier": "executeUrl", "parameters": "(String httpMethod, String url, Properties httpHeaders, InputStream content,\n            String contentType, int timeout)", "modifiers": "public static", "return": "String", "signature": "String executeUrl(String httpMethod, String url, Properties httpHeaders, InputStream content,\n            String contentType, int timeout)", "full_signature": "public static String executeUrl(String httpMethod, String url, Properties httpHeaders, InputStream content,\n            String contentType, int timeout)", "class_method_signature": "HttpUtil.executeUrl(String httpMethod, String url, Properties httpHeaders, InputStream content,\n            String contentType, int timeout)", "testcase": false, "constructor": false}, {"identifier": "executeUrl", "parameters": "(String httpMethod, String url, Properties httpHeaders, InputStream content,\n            String contentType, int timeout, String proxyHost, Integer proxyPort, String proxyUser,\n            String proxyPassword, String nonProxyHosts)", "modifiers": "public static", "return": "String", "signature": "String executeUrl(String httpMethod, String url, Properties httpHeaders, InputStream content,\n            String contentType, int timeout, String proxyHost, Integer proxyPort, String proxyUser,\n            String proxyPassword, String nonProxyHosts)", "full_signature": "public static String executeUrl(String httpMethod, String url, Properties httpHeaders, InputStream content,\n            String contentType, int timeout, String proxyHost, Integer proxyPort, String proxyUser,\n            String proxyPassword, String nonProxyHosts)", "class_method_signature": "HttpUtil.executeUrl(String httpMethod, String url, Properties httpHeaders, InputStream content,\n            String contentType, int timeout, String proxyHost, Integer proxyPort, String proxyUser,\n            String proxyPassword, String nonProxyHosts)", "testcase": false, "constructor": false}, {"identifier": "executeUrlAndGetReponse", "parameters": "(String httpMethod, String url, Properties httpHeaders,\n            InputStream content, String contentType, int timeout, String proxyHost, Integer proxyPort, String proxyUser,\n            String proxyPassword, String nonProxyHosts)", "modifiers": "private static", "return": "ContentResponse", "signature": "ContentResponse executeUrlAndGetReponse(String httpMethod, String url, Properties httpHeaders,\n            InputStream content, String contentType, int timeout, String proxyHost, Integer proxyPort, String proxyUser,\n            String proxyPassword, String nonProxyHosts)", "full_signature": "private static ContentResponse executeUrlAndGetReponse(String httpMethod, String url, Properties httpHeaders,\n            InputStream content, String contentType, int timeout, String proxyHost, Integer proxyPort, String proxyUser,\n            String proxyPassword, String nonProxyHosts)", "class_method_signature": "HttpUtil.executeUrlAndGetReponse(String httpMethod, String url, Properties httpHeaders,\n            InputStream content, String contentType, int timeout, String proxyHost, Integer proxyPort, String proxyUser,\n            String proxyPassword, String nonProxyHosts)", "testcase": false, "constructor": false}, {"identifier": "prepareProxyParams", "parameters": "()", "modifiers": "private static", "return": "ProxyParams", "signature": "ProxyParams prepareProxyParams()", "full_signature": "private static ProxyParams prepareProxyParams()", "class_method_signature": "HttpUtil.prepareProxyParams()", "testcase": false, "constructor": false}, {"identifier": "shouldUseProxy", "parameters": "(String urlString, String nonProxyHosts)", "modifiers": "private static", "return": "boolean", "signature": "boolean shouldUseProxy(String urlString, String nonProxyHosts)", "full_signature": "private static boolean shouldUseProxy(String urlString, String nonProxyHosts)", "class_method_signature": "HttpUtil.shouldUseProxy(String urlString, String nonProxyHosts)", "testcase": false, "constructor": false}, {"identifier": "createHttpMethod", "parameters": "(String httpMethodString)", "modifiers": "public static", "return": "HttpMethod", "signature": "HttpMethod createHttpMethod(String httpMethodString)", "full_signature": "public static HttpMethod createHttpMethod(String httpMethodString)", "class_method_signature": "HttpUtil.createHttpMethod(String httpMethodString)", "testcase": false, "constructor": false}, {"identifier": "downloadImage", "parameters": "(String url)", "modifiers": "public static", "return": "RawType", "signature": "RawType downloadImage(String url)", "full_signature": "public static RawType downloadImage(String url)", "class_method_signature": "HttpUtil.downloadImage(String url)", "testcase": false, "constructor": false}, {"identifier": "downloadImage", "parameters": "(String url, int timeout)", "modifiers": "public static", "return": "RawType", "signature": "RawType downloadImage(String url, int timeout)", "full_signature": "public static RawType downloadImage(String url, int timeout)", "class_method_signature": "HttpUtil.downloadImage(String url, int timeout)", "testcase": false, "constructor": false}, {"identifier": "downloadImage", "parameters": "(String url, boolean scanTypeInContent, long maxContentLength)", "modifiers": "public static", "return": "RawType", "signature": "RawType downloadImage(String url, boolean scanTypeInContent, long maxContentLength)", "full_signature": "public static RawType downloadImage(String url, boolean scanTypeInContent, long maxContentLength)", "class_method_signature": "HttpUtil.downloadImage(String url, boolean scanTypeInContent, long maxContentLength)", "testcase": false, "constructor": false}, {"identifier": "downloadImage", "parameters": "(String url, boolean scanTypeInContent, long maxContentLength, int timeout)", "modifiers": "public static", "return": "RawType", "signature": "RawType downloadImage(String url, boolean scanTypeInContent, long maxContentLength, int timeout)", "full_signature": "public static RawType downloadImage(String url, boolean scanTypeInContent, long maxContentLength, int timeout)", "class_method_signature": "HttpUtil.downloadImage(String url, boolean scanTypeInContent, long maxContentLength, int timeout)", "testcase": false, "constructor": false}, {"identifier": "downloadData", "parameters": "(String url, String contentTypeRegex, boolean scanTypeInContent,\n            long maxContentLength)", "modifiers": "public static", "return": "RawType", "signature": "RawType downloadData(String url, String contentTypeRegex, boolean scanTypeInContent,\n            long maxContentLength)", "full_signature": "public static RawType downloadData(String url, String contentTypeRegex, boolean scanTypeInContent,\n            long maxContentLength)", "class_method_signature": "HttpUtil.downloadData(String url, String contentTypeRegex, boolean scanTypeInContent,\n            long maxContentLength)", "testcase": false, "constructor": false}, {"identifier": "downloadData", "parameters": "(String url, String contentTypeRegex, boolean scanTypeInContent,\n            long maxContentLength, int timeout)", "modifiers": "public static", "return": "RawType", "signature": "RawType downloadData(String url, String contentTypeRegex, boolean scanTypeInContent,\n            long maxContentLength, int timeout)", "full_signature": "public static RawType downloadData(String url, String contentTypeRegex, boolean scanTypeInContent,\n            long maxContentLength, int timeout)", "class_method_signature": "HttpUtil.downloadData(String url, String contentTypeRegex, boolean scanTypeInContent,\n            long maxContentLength, int timeout)", "testcase": false, "constructor": false}, {"identifier": "guessContentTypeFromData", "parameters": "(byte[] data)", "modifiers": "public static", "return": "String", "signature": "String guessContentTypeFromData(byte[] data)", "full_signature": "public static String guessContentTypeFromData(byte[] data)", "class_method_signature": "HttpUtil.guessContentTypeFromData(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "isJpeg", "parameters": "(byte[] data)", "modifiers": "private static", "return": "boolean", "signature": "boolean isJpeg(byte[] data)", "full_signature": "private static boolean isJpeg(byte[] data)", "class_method_signature": "HttpUtil.isJpeg(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "setHttpClientFactory", "parameters": "(final HttpClientFactory httpClientFactory)", "modifiers": "@Reference protected", "return": "void", "signature": "void setHttpClientFactory(final HttpClientFactory httpClientFactory)", "full_signature": "@Reference protected void setHttpClientFactory(final HttpClientFactory httpClientFactory)", "class_method_signature": "HttpUtil.setHttpClientFactory(final HttpClientFactory httpClientFactory)", "testcase": false, "constructor": false}, {"identifier": "unsetHttpClientFactory", "parameters": "(final HttpClientFactory httpClientFactory)", "modifiers": "protected", "return": "void", "signature": "void unsetHttpClientFactory(final HttpClientFactory httpClientFactory)", "full_signature": "protected void unsetHttpClientFactory(final HttpClientFactory httpClientFactory)", "class_method_signature": "HttpUtil.unsetHttpClientFactory(final HttpClientFactory httpClientFactory)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/http/HttpUtil.java"}, "focal_method": {"identifier": "executeUrl", "parameters": "(String httpMethod, String url, int timeout)", "modifiers": "public static", "return": "String", "body": "public static String executeUrl(String httpMethod, String url, int timeout) throws IOException {\n        return executeUrl(httpMethod, url, null, null, timeout);\n    }", "signature": "String executeUrl(String httpMethod, String url, int timeout)", "full_signature": "public static String executeUrl(String httpMethod, String url, int timeout)", "class_method_signature": "HttpUtil.executeUrl(String httpMethod, String url, int timeout)", "testcase": false, "constructor": false, "invocations": ["executeUrl"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}