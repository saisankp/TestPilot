{"test_class": {"identifier": "NMEATest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/com/platypii/baseline/location/NMEATest.java"}, "test_case": {"identifier": "parseTime", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseTime() {\n        // Parse HHMMSS.SS UTC time into milliseconds since midnight\n        assertEquals(72258990L, NMEA.parseTime(\"200418.99\"));\n        assertEquals(0L, NMEA.parseTime(null));\n        assertEquals(0L, NMEA.parseTime(\"\"));\n        assertEquals(0L, NMEA.parseTime(\"X\"));\n    }", "signature": "void parseTime()", "full_signature": "@Test public void parseTime()", "class_method_signature": "NMEATest.parseTime()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "parseTime", "assertEquals", "parseTime", "assertEquals", "parseTime", "assertEquals", "parseTime"]}, "focal_class": {"identifier": "NMEA", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"NMEA\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"NMEA\"", "var_name": "TAG"}, {"original_string": "private static final Calendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"));", "modifier": "private static final", "type": "Calendar", "declarator": "cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT\"))", "var_name": "cal"}], "methods": [{"identifier": "parseDegreesMinutes", "parameters": "(@NonNull String dm, @NonNull String nsew)", "modifiers": "static", "return": "double", "signature": "double parseDegreesMinutes(@NonNull String dm, @NonNull String nsew)", "full_signature": "static double parseDegreesMinutes(@NonNull String dm, @NonNull String nsew)", "class_method_signature": "NMEA.parseDegreesMinutes(@NonNull String dm, @NonNull String nsew)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(@Nullable String date)", "modifiers": "static", "return": "long", "signature": "long parseDate(@Nullable String date)", "full_signature": "static long parseDate(@Nullable String date)", "class_method_signature": "NMEA.parseDate(@Nullable String date)", "testcase": false, "constructor": false}, {"identifier": "parseTime", "parameters": "(@Nullable String time)", "modifiers": "static", "return": "long", "signature": "long parseTime(@Nullable String time)", "full_signature": "static long parseTime(@Nullable String time)", "class_method_signature": "NMEA.parseTime(@Nullable String time)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(@NonNull String nmea)", "modifiers": "static", "return": "boolean", "signature": "boolean validate(@NonNull String nmea)", "full_signature": "static boolean validate(@NonNull String nmea)", "class_method_signature": "NMEA.validate(@NonNull String nmea)", "testcase": false, "constructor": false}, {"identifier": "parsePowerLevel", "parameters": "(@NonNull String[] split)", "modifiers": "static", "return": "float", "signature": "float parsePowerLevel(@NonNull String[] split)", "full_signature": "static float parsePowerLevel(@NonNull String[] split)", "class_method_signature": "NMEA.parsePowerLevel(@NonNull String[] split)", "testcase": false, "constructor": false}, {"identifier": "cleanNmea", "parameters": "(@NonNull String nmea)", "modifiers": "@NonNull static", "return": "String", "signature": "String cleanNmea(@NonNull String nmea)", "full_signature": "@NonNull static String cleanNmea(@NonNull String nmea)", "class_method_signature": "NMEA.cleanNmea(@NonNull String nmea)", "testcase": false, "constructor": false}, {"identifier": "splitNmea", "parameters": "(@NonNull String nmea)", "modifiers": "@NonNull static", "return": "String[]", "signature": "String[] splitNmea(@NonNull String nmea)", "full_signature": "@NonNull static String[] splitNmea(@NonNull String nmea)", "class_method_signature": "NMEA.splitNmea(@NonNull String nmea)", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/platypii/baseline/location/NMEA.java"}, "focal_method": {"identifier": "parseTime", "parameters": "(@Nullable String time)", "modifiers": "static", "return": "long", "body": "static long parseTime(@Nullable String time) {\n        if (time == null || time.isEmpty()) {\n            return 0;\n        } else {\n            try {\n                if (time.indexOf('.') != 6) {\n                    Log.e(TAG, \"Time format error \" + time);\n                }\n                final long hour = Integer.parseInt(time.substring(0, 2));\n                final long min = Integer.parseInt(time.substring(2, 4));\n                // double sec = Double.parseDouble(utc.substring(4));\n                final long sec = Integer.parseInt(time.substring(4, 6));\n                final long ms = time.length() <= 6 ? 0 : (long) (1000 * Double.parseDouble(time.substring(6)));\n                return hour * 3600000 + min * 60000 + sec * 1000 + ms;\n            } catch (Exception e) {\n                return 0;\n            }\n        }\n    }", "signature": "long parseTime(@Nullable String time)", "full_signature": "static long parseTime(@Nullable String time)", "class_method_signature": "NMEA.parseTime(@Nullable String time)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "indexOf", "e", "parseInt", "substring", "parseInt", "substring", "parseInt", "substring", "length", "parseDouble", "substring"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}