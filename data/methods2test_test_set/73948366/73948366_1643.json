{"test_class": {"identifier": "GroupMemberExpiryNotificationTaskTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zms/src/test/java/com/yahoo/athenz/zms/notification/GroupMemberExpiryNotificationTaskTest.java"}, "test_case": {"identifier": "testSendGroupMemberExpiryRemindersEmptySet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSendGroupMemberExpiryRemindersEmptySet() {\n\n        DBService dbsvc = Mockito.mock(DBService.class);\n        NotificationService mockNotificationService =  Mockito.mock(NotificationService.class);\n        NotificationServiceFactory testfact = () -> mockNotificationService;\n        NotificationManager notificationManager = getNotificationManager(dbsvc, testfact);\n\n        // to make sure we're not creating any notifications, we're going\n        // to configure our mock to throw an exception\n\n        Mockito.when(mockNotificationService.notify(any())).thenThrow(new IllegalArgumentException());\n\n        GroupMemberExpiryNotificationTask groupMemberExpiryNotificationTask = new GroupMemberExpiryNotificationTask(dbsvc, USER_DOMAIN_PREFIX);\n        assertEquals(groupMemberExpiryNotificationTask.getNotifications(), new ArrayList<>());\n\n        notificationManager.shutdown();\n    }", "signature": "void testSendGroupMemberExpiryRemindersEmptySet()", "full_signature": "@Test public void testSendGroupMemberExpiryRemindersEmptySet()", "class_method_signature": "GroupMemberExpiryNotificationTaskTest.testSendGroupMemberExpiryRemindersEmptySet()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "getNotificationManager", "thenThrow", "when", "notify", "any", "assertEquals", "getNotifications", "shutdown"]}, "focal_class": {"identifier": "GroupMemberExpiryNotificationTask", "superclass": "", "interfaces": "implements NotificationTask", "fields": [{"original_string": "private final DBService dbService;", "modifier": "private final", "type": "DBService", "declarator": "dbService", "var_name": "dbService"}, {"original_string": "private final NotificationCommon notificationCommon;", "modifier": "private final", "type": "NotificationCommon", "declarator": "notificationCommon", "var_name": "notificationCommon"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(GroupMemberExpiryNotificationTask.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(GroupMemberExpiryNotificationTask.class)", "var_name": "LOGGER"}, {"original_string": "private final static String DESCRIPTION = \"group membership expiration reminders\";", "modifier": "private final static", "type": "String", "declarator": "DESCRIPTION = \"group membership expiration reminders\"", "var_name": "DESCRIPTION"}, {"original_string": "private final static String NOTIFICATION_TYPE = \"group_membership_expiry\";", "modifier": "private final static", "type": "String", "declarator": "NOTIFICATION_TYPE = \"group_membership_expiry\"", "var_name": "NOTIFICATION_TYPE"}, {"original_string": "private final GroupExpiryDomainNotificationToEmailConverter groupExpiryDomainNotificationToEmailConverter;", "modifier": "private final", "type": "GroupExpiryDomainNotificationToEmailConverter", "declarator": "groupExpiryDomainNotificationToEmailConverter", "var_name": "groupExpiryDomainNotificationToEmailConverter"}, {"original_string": "private final GroupExpiryPrincipalNotificationToEmailConverter groupExpiryPrincipalNotificationToEmailConverter;", "modifier": "private final", "type": "GroupExpiryPrincipalNotificationToEmailConverter", "declarator": "groupExpiryPrincipalNotificationToEmailConverter", "var_name": "groupExpiryPrincipalNotificationToEmailConverter"}], "methods": [{"identifier": "GroupMemberExpiryNotificationTask", "parameters": "(DBService dbService, String userDomainPrefix)", "modifiers": "public", "return": "", "signature": " GroupMemberExpiryNotificationTask(DBService dbService, String userDomainPrefix)", "full_signature": "public  GroupMemberExpiryNotificationTask(DBService dbService, String userDomainPrefix)", "class_method_signature": "GroupMemberExpiryNotificationTask.GroupMemberExpiryNotificationTask(DBService dbService, String userDomainPrefix)", "testcase": false, "constructor": true}, {"identifier": "getNotifications", "parameters": "()", "modifiers": "@Override public", "return": "List<Notification>", "signature": "List<Notification> getNotifications()", "full_signature": "@Override public List<Notification> getNotifications()", "class_method_signature": "GroupMemberExpiryNotificationTask.getNotifications()", "testcase": false, "constructor": false}, {"identifier": "getDetailString", "parameters": "(GroupMember memberGroup)", "modifiers": "public", "return": "StringBuilder", "signature": "StringBuilder getDetailString(GroupMember memberGroup)", "full_signature": "public StringBuilder getDetailString(GroupMember memberGroup)", "class_method_signature": "GroupMemberExpiryNotificationTask.getDetailString(GroupMember memberGroup)", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "GroupMemberExpiryNotificationTask.getDescription()", "testcase": false, "constructor": false}, {"identifier": "processGroupReminder", "parameters": "(Map<String, List<GroupMember>> domainAdminMap,\n                                                     DomainGroupMember member)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> processGroupReminder(Map<String, List<GroupMember>> domainAdminMap,\n                                                     DomainGroupMember member)", "full_signature": "private Map<String, String> processGroupReminder(Map<String, List<GroupMember>> domainAdminMap,\n                                                     DomainGroupMember member)", "class_method_signature": "GroupMemberExpiryNotificationTask.processGroupReminder(Map<String, List<GroupMember>> domainAdminMap,\n                                                     DomainGroupMember member)", "testcase": false, "constructor": false}, {"identifier": "processMemberReminder", "parameters": "(final String domainName, List<GroupMember> memberGroups)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> processMemberReminder(final String domainName, List<GroupMember> memberGroups)", "full_signature": "private Map<String, String> processMemberReminder(final String domainName, List<GroupMember> memberGroups)", "class_method_signature": "GroupMemberExpiryNotificationTask.processMemberReminder(final String domainName, List<GroupMember> memberGroups)", "testcase": false, "constructor": false}, {"identifier": "getNotificationDetails", "parameters": "(Map<String, DomainGroupMember> members,\n                                              NotificationToEmailConverter principalNotificationToEmailConverter,\n                                              NotificationToEmailConverter domainAdminNotificationToEmailConverter)", "modifiers": "", "return": "List<Notification>", "signature": "List<Notification> getNotificationDetails(Map<String, DomainGroupMember> members,\n                                              NotificationToEmailConverter principalNotificationToEmailConverter,\n                                              NotificationToEmailConverter domainAdminNotificationToEmailConverter)", "full_signature": " List<Notification> getNotificationDetails(Map<String, DomainGroupMember> members,\n                                              NotificationToEmailConverter principalNotificationToEmailConverter,\n                                              NotificationToEmailConverter domainAdminNotificationToEmailConverter)", "class_method_signature": "GroupMemberExpiryNotificationTask.getNotificationDetails(Map<String, DomainGroupMember> members,\n                                              NotificationToEmailConverter principalNotificationToEmailConverter,\n                                              NotificationToEmailConverter domainAdminNotificationToEmailConverter)", "testcase": false, "constructor": false}], "file": "servers/zms/src/main/java/com/yahoo/athenz/zms/notification/GroupMemberExpiryNotificationTask.java"}, "focal_method": {"identifier": "getNotifications", "parameters": "()", "modifiers": "@Override public", "return": "List<Notification>", "body": "@Override\n    public List<Notification> getNotifications() {\n        Map<String, DomainGroupMember> expiryMembers = dbService.getGroupExpiryMembers(1);\n        if (expiryMembers == null || expiryMembers.isEmpty()) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"No expiry group members available to send notifications\");\n            }\n            return new ArrayList<>();\n        }\n\n        return getNotificationDetails(expiryMembers, groupExpiryPrincipalNotificationToEmailConverter,\n                groupExpiryDomainNotificationToEmailConverter);\n    }", "signature": "List<Notification> getNotifications()", "full_signature": "@Override public List<Notification> getNotifications()", "class_method_signature": "GroupMemberExpiryNotificationTask.getNotifications()", "testcase": false, "constructor": false, "invocations": ["getGroupExpiryMembers", "isEmpty", "isDebugEnabled", "debug", "getNotificationDetails"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}