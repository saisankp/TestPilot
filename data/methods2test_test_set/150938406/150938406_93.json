{"test_class": {"identifier": "FastDistanceTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/distance/FastDistanceTest.java"}, "test_case": {"identifier": "testDenseIterableTupleInput", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDenseIterableTupleInput(){\n        int len = 10000;\n        int size = 100;\n        List<Vector> vectorList = initDenseData(len, size);\n        List<Tuple2<Vector, Row>> rows = new ArrayList<>();\n        for(int i = 0; i < vectorList.size(); i++){\n            rows.add(Tuple2.of(vectorList.get(i), Row.of(i)));\n        }\n\n        EuclideanDistance distance = new EuclideanDistance();\n        List<FastDistanceData> list = distance.prepareMatrixData(rows);\n\n        assertIterableDenseInput(list, len, size, vectorList);\n    }", "signature": "void testDenseIterableTupleInput()", "full_signature": "@Test public void testDenseIterableTupleInput()", "class_method_signature": "FastDistanceTest.testDenseIterableTupleInput()", "testcase": true, "constructor": false, "invocations": ["initDenseData", "size", "add", "of", "get", "of", "prepareMatrixData", "assertIterableDenseInput"]}, "focal_class": {"identifier": "FastDistance", "superclass": "", "interfaces": "implements ContinuousDistance", "fields": [{"original_string": "private static int SIZE = 5 * 1024 * 1024;", "modifier": "private static", "type": "int", "declarator": "SIZE = 5 * 1024 * 1024", "var_name": "SIZE"}, {"original_string": "private static int MAX_ROW_NUMBER = (int)Math.sqrt(200 * 1024 * 1024 / 8.0);", "modifier": "private static", "type": "int", "declarator": "MAX_ROW_NUMBER = (int)Math.sqrt(200 * 1024 * 1024 / 8.0)", "var_name": "MAX_ROW_NUMBER"}], "methods": [{"identifier": "prepareMatrixData", "parameters": "(Iterable<Row> rows, int vectorIdx, int... keepIdxs)", "modifiers": "public", "return": "List<FastDistanceData>", "signature": "List<FastDistanceData> prepareMatrixData(Iterable<Row> rows, int vectorIdx, int... keepIdxs)", "full_signature": "public List<FastDistanceData> prepareMatrixData(Iterable<Row> rows, int vectorIdx, int... keepIdxs)", "class_method_signature": "FastDistance.prepareMatrixData(Iterable<Row> rows, int vectorIdx, int... keepIdxs)", "testcase": false, "constructor": false}, {"identifier": "prepareVectorData", "parameters": "(Row row, int vectorIdx, int... keepIdxs)", "modifiers": "public", "return": "FastDistanceVectorData", "signature": "FastDistanceVectorData prepareVectorData(Row row, int vectorIdx, int... keepIdxs)", "full_signature": "public FastDistanceVectorData prepareVectorData(Row row, int vectorIdx, int... keepIdxs)", "class_method_signature": "FastDistance.prepareVectorData(Row row, int vectorIdx, int... keepIdxs)", "testcase": false, "constructor": false}, {"identifier": "prepareMatrixData", "parameters": "(Iterable<Tuple2<Vector, Row>> tuples)", "modifiers": "public", "return": "List<FastDistanceData>", "signature": "List<FastDistanceData> prepareMatrixData(Iterable<Tuple2<Vector, Row>> tuples)", "full_signature": "public List<FastDistanceData> prepareMatrixData(Iterable<Tuple2<Vector, Row>> tuples)", "class_method_signature": "FastDistance.prepareMatrixData(Iterable<Tuple2<Vector, Row>> tuples)", "testcase": false, "constructor": false}, {"identifier": "prepareSparseMatrixData", "parameters": "(Tuple2<Vector, Row> tuple,\n                                                           Iterator<Tuple2<Vector, Row>> iterator)", "modifiers": "private", "return": "List<FastDistanceData>", "signature": "List<FastDistanceData> prepareSparseMatrixData(Tuple2<Vector, Row> tuple,\n                                                           Iterator<Tuple2<Vector, Row>> iterator)", "full_signature": "private List<FastDistanceData> prepareSparseMatrixData(Tuple2<Vector, Row> tuple,\n                                                           Iterator<Tuple2<Vector, Row>> iterator)", "class_method_signature": "FastDistance.prepareSparseMatrixData(Tuple2<Vector, Row> tuple,\n                                                           Iterator<Tuple2<Vector, Row>> iterator)", "testcase": false, "constructor": false}, {"identifier": "prepareDenseMatrixData", "parameters": "(Tuple2<Vector, Row> tuple,\n                                                          Iterator<Tuple2<Vector, Row>> iterator,\n                                                          int vectorSize)", "modifiers": "private", "return": "List<FastDistanceData>", "signature": "List<FastDistanceData> prepareDenseMatrixData(Tuple2<Vector, Row> tuple,\n                                                          Iterator<Tuple2<Vector, Row>> iterator,\n                                                          int vectorSize)", "full_signature": "private List<FastDistanceData> prepareDenseMatrixData(Tuple2<Vector, Row> tuple,\n                                                          Iterator<Tuple2<Vector, Row>> iterator,\n                                                          int vectorSize)", "class_method_signature": "FastDistance.prepareDenseMatrixData(Tuple2<Vector, Row> tuple,\n                                                          Iterator<Tuple2<Vector, Row>> iterator,\n                                                          int vectorSize)", "testcase": false, "constructor": false}, {"identifier": "prepareVectorData", "parameters": "(Tuple2<Vector, Row> tuple)", "modifiers": "public", "return": "FastDistanceVectorData", "signature": "FastDistanceVectorData prepareVectorData(Tuple2<Vector, Row> tuple)", "full_signature": "public FastDistanceVectorData prepareVectorData(Tuple2<Vector, Row> tuple)", "class_method_signature": "FastDistance.prepareVectorData(Tuple2<Vector, Row> tuple)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(FastDistanceData left, FastDistanceData right)", "modifiers": "public", "return": "DenseMatrix", "signature": "DenseMatrix calc(FastDistanceData left, FastDistanceData right)", "full_signature": "public DenseMatrix calc(FastDistanceData left, FastDistanceData right)", "class_method_signature": "FastDistance.calc(FastDistanceData left, FastDistanceData right)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(FastDistanceData left, FastDistanceData right, DenseMatrix res)", "modifiers": "public", "return": "DenseMatrix", "signature": "DenseMatrix calc(FastDistanceData left, FastDistanceData right, DenseMatrix res)", "full_signature": "public DenseMatrix calc(FastDistanceData left, FastDistanceData right, DenseMatrix res)", "class_method_signature": "FastDistance.calc(FastDistanceData left, FastDistanceData right, DenseMatrix res)", "testcase": false, "constructor": false}, {"identifier": "updateLabel", "parameters": "(FastDistanceData data)", "modifiers": "public abstract", "return": "void", "signature": "void updateLabel(FastDistanceData data)", "full_signature": "public abstract void updateLabel(FastDistanceData data)", "class_method_signature": "FastDistance.updateLabel(FastDistanceData data)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(FastDistanceVectorData left, FastDistanceVectorData right)", "modifiers": "abstract", "return": "double", "signature": "double calc(FastDistanceVectorData left, FastDistanceVectorData right)", "full_signature": "abstract double calc(FastDistanceVectorData left, FastDistanceVectorData right)", "class_method_signature": "FastDistance.calc(FastDistanceVectorData left, FastDistanceVectorData right)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(FastDistanceVectorData vector, FastDistanceMatrixData matrix, double[] res)", "modifiers": "abstract", "return": "void", "signature": "void calc(FastDistanceVectorData vector, FastDistanceMatrixData matrix, double[] res)", "full_signature": "abstract void calc(FastDistanceVectorData vector, FastDistanceMatrixData matrix, double[] res)", "class_method_signature": "FastDistance.calc(FastDistanceVectorData vector, FastDistanceMatrixData matrix, double[] res)", "testcase": false, "constructor": false}, {"identifier": "calc", "parameters": "(FastDistanceMatrixData left, FastDistanceMatrixData right, DenseMatrix res)", "modifiers": "abstract", "return": "void", "signature": "void calc(FastDistanceMatrixData left, FastDistanceMatrixData right, DenseMatrix res)", "full_signature": "abstract void calc(FastDistanceMatrixData left, FastDistanceMatrixData right, DenseMatrix res)", "class_method_signature": "FastDistance.calc(FastDistanceMatrixData left, FastDistanceMatrixData right, DenseMatrix res)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/distance/FastDistance.java"}, "focal_method": {"identifier": "prepareMatrixData", "parameters": "(Iterable<Row> rows, int vectorIdx, int... keepIdxs)", "modifiers": "public", "return": "List<FastDistanceData>", "body": "public List<FastDistanceData> prepareMatrixData(Iterable<Row> rows, int vectorIdx, int... keepIdxs) {\n        Iterable<Tuple2<Vector, Row>> newItearble = Iterables.transform(rows, (row) -> {\n            Vector vec = VectorUtil.getVector(row.getField(vectorIdx));\n            row = TableUtil.getRow(row, keepIdxs);\n            return Tuple2.of(vec, row);\n        });\n        return prepareMatrixData(newItearble);\n    }", "signature": "List<FastDistanceData> prepareMatrixData(Iterable<Row> rows, int vectorIdx, int... keepIdxs)", "full_signature": "public List<FastDistanceData> prepareMatrixData(Iterable<Row> rows, int vectorIdx, int... keepIdxs)", "class_method_signature": "FastDistance.prepareMatrixData(Iterable<Row> rows, int vectorIdx, int... keepIdxs)", "testcase": false, "constructor": false, "invocations": ["transform", "getVector", "getField", "getRow", "of", "prepareMatrixData"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}