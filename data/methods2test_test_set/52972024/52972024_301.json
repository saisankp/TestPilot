{"test_class": {"identifier": "RouterRegistrationObjectListenerTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private IRouter routerMock;", "modifier": "private", "type": "IRouter", "declarator": "routerMock", "var_name": "routerMock"}, {"original_string": "private IMessageReceiver[] receiverMocks;", "modifier": "private", "type": "IMessageReceiver[]", "declarator": "receiverMocks", "var_name": "receiverMocks"}, {"original_string": "private IResolveDependencyStrategy routerStrategy;", "modifier": "private", "type": "IResolveDependencyStrategy", "declarator": "routerStrategy", "var_name": "routerStrategy"}], "file": "CoreFeatures/MessageProcessing/ObjectCreationStrategies/src/test/java/info/smart_tools/smartactors/message_processing/object_creation_strategies/RouterRegistrationObjectListenerTest.java"}, "test_case": {"identifier": "Should_throwWhenItemIdentifierIsUndefined", "parameters": "()", "modifiers": "@Test(expected = InvalidReceiverPipelineException.class) public", "return": "void", "body": "@Test(expected = InvalidReceiverPipelineException.class)\n    public void Should_throwWhenItemIdentifierIsUndefined()\n            throws Exception {\n        new RouterRegistrationObjectListener().acceptItem(null, receiverMocks[0]);\n    }", "signature": "void Should_throwWhenItemIdentifierIsUndefined()", "full_signature": "@Test(expected = InvalidReceiverPipelineException.class) public void Should_throwWhenItemIdentifierIsUndefined()", "class_method_signature": "RouterRegistrationObjectListenerTest.Should_throwWhenItemIdentifierIsUndefined()", "testcase": true, "constructor": false, "invocations": ["acceptItem"]}, "focal_class": {"identifier": "RouterRegistrationObjectListener", "superclass": "", "interfaces": "implements IReceiverObjectListener", "fields": [], "methods": [{"identifier": "acceptItem", "parameters": "(Object itemId, Object item)", "modifiers": "@Override public", "return": "void", "signature": "void acceptItem(Object itemId, Object item)", "full_signature": "@Override public void acceptItem(Object itemId, Object item)", "class_method_signature": "RouterRegistrationObjectListener.acceptItem(Object itemId, Object item)", "testcase": false, "constructor": false}, {"identifier": "endItems", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void endItems()", "full_signature": "@Override public void endItems()", "class_method_signature": "RouterRegistrationObjectListener.endItems()", "testcase": false, "constructor": false}], "file": "CoreFeatures/MessageProcessing/ObjectCreationStrategies/src/main/java/info/smart_tools/smartactors/message_processing/object_creation_strategies/RouterRegistrationObjectListener.java"}, "focal_method": {"identifier": "acceptItem", "parameters": "(Object itemId, Object item)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void acceptItem(Object itemId, Object item)\n            throws ReceiverObjectListenerException, InvalidReceiverPipelineException, InvalidArgumentException {\n        if (null == item) {\n            throw new InvalidArgumentException(\"Item is null.\");\n        }\n\n        if (null == itemId) {\n            throw new InvalidReceiverPipelineException(\n                    \"Item identifier is null. The filter defining object address is missing or does not work correct.\");\n        }\n\n        IMessageReceiver receiver;\n\n        try {\n            receiver = (IMessageReceiver) item;\n        } catch (ClassCastException e) {\n            throw new InvalidReceiverPipelineException(\n                    \"Item is not a message receiver.\");\n        }\n\n        try {\n            IRouter router = IOC.resolve(Keys.getOrAdd(IRouter.class.getCanonicalName()));\n\n            router.register(itemId, receiver);\n        } catch (ResolutionException e) {\n            throw new ReceiverObjectListenerException(e);\n        }\n    }", "signature": "void acceptItem(Object itemId, Object item)", "full_signature": "@Override public void acceptItem(Object itemId, Object item)", "class_method_signature": "RouterRegistrationObjectListener.acceptItem(Object itemId, Object item)", "testcase": false, "constructor": false, "invocations": ["resolve", "getOrAdd", "getCanonicalName", "register"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}