{"test_class": {"identifier": "StringConditionTest", "superclass": "", "interfaces": "", "fields": [], "file": "lib/src/test/java/com/busybusy/dbc/conditions/StringConditionTest.java"}, "test_case": {"identifier": "isValidUUID", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void isValidUUID() throws Exception\n\t{\n\t\tStringCondition condition = new StringCondition(UUID.randomUUID().toString());\n\t\tcondition.isValidUUID();\n\n\t\tStringCondition upperCasedCondition = new StringCondition(UUID.randomUUID().toString().toUpperCase());\n\t\tupperCasedCondition.isValidUUID();\n\n\t\tStringCondition badCondition = new StringCondition(\"\");\n\t\tAssertions.assertThatThrownBy(badCondition::isValidUUID)\n\t\t          .isInstanceOf(DbcAssertionError.class)\n\t\t          .hasCauseInstanceOf(IllegalArgumentException.class);\n\t}", "signature": "void isValidUUID()", "full_signature": "@Test public void isValidUUID()", "class_method_signature": "StringConditionTest.isValidUUID()", "testcase": true, "constructor": false, "invocations": ["toString", "randomUUID", "isValidUUID", "toUpperCase", "toString", "randomUUID", "isValidUUID", "hasCauseInstanceOf", "isInstanceOf", "assertThatThrownBy"]}, "focal_class": {"identifier": "StringCondition", "superclass": "extends BasicCondition<CharSequence, StringCondition>", "interfaces": "implements StringChecks<StringCondition>", "fields": [], "methods": [{"identifier": "StringCondition", "parameters": "(CharSequence subject)", "modifiers": "public", "return": "", "signature": " StringCondition(CharSequence subject)", "full_signature": "public  StringCondition(CharSequence subject)", "class_method_signature": "StringCondition.StringCondition(CharSequence subject)", "testcase": false, "constructor": true}, {"identifier": "isValid", "parameters": "()", "modifiers": "@Override public", "return": "StringCondition", "signature": "StringCondition isValid()", "full_signature": "@Override public StringCondition isValid()", "class_method_signature": "StringCondition.isValid()", "testcase": false, "constructor": false}, {"identifier": "isValidUUID", "parameters": "()", "modifiers": "@Override public", "return": "StringCondition", "signature": "StringCondition isValidUUID()", "full_signature": "@Override public StringCondition isValidUUID()", "class_method_signature": "StringCondition.isValidUUID()", "testcase": false, "constructor": false}], "file": "lib/src/main/java/com/busybusy/dbc/conditions/StringCondition.java"}, "focal_method": {"identifier": "isValidUUID", "parameters": "()", "modifiers": "@Override public", "return": "StringCondition", "body": "@Override\n\tpublic StringCondition isValidUUID()\n\t{\n\t\trequire(this.subject).isNotNull();\n\n\t\tif (!this.subject.toString().matches(StringChecks.UUID_PATTERN))\n\t\t{\n\t\t\tDbcAssertionError.throwNew(new IllegalArgumentException(\"The provided String is not a valid UUID: \" + this.subject), this.message);\n\t\t}\n\n\t\treturn result();\n\t}", "signature": "StringCondition isValidUUID()", "full_signature": "@Override public StringCondition isValidUUID()", "class_method_signature": "StringCondition.isValidUUID()", "testcase": false, "constructor": false, "invocations": ["isNotNull", "require", "matches", "toString", "throwNew", "result"]}, "repository": {"repo_id": 61247013, "url": "https://github.com/busybusy/DBC-Android", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 203, "license": "licensed"}}