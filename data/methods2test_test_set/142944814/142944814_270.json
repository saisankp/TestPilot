{"test_class": {"identifier": "NumberUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/util/src/test/java/hera/util/NumberUtilsTest.java"}, "test_case": {"identifier": "testPositiveToByteArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPositiveToByteArray() {\n    final Object[][] testParameters = new Object[][] {\n        {null, new byte[0]},\n        {BigInteger.valueOf(0L), new byte[] {(byte) 0x00}},\n        {BigInteger.valueOf(127L), new byte[] {(byte) 0x7F}},\n        {BigInteger.valueOf(255L), new byte[] {(byte) 0xFF}}\n    };\n\n    for (final Object[] testParameter : testParameters) {\n      final BigInteger value = (BigInteger) testParameter[0];\n      final byte[] expected = (byte[]) testParameter[1];\n      final byte[] actual = NumberUtils.positiveToByteArray(value);\n      assertTrue(Arrays.equals(expected, actual));\n    }\n  }", "signature": "void testPositiveToByteArray()", "full_signature": "@Test public void testPositiveToByteArray()", "class_method_signature": "NumberUtilsTest.testPositiveToByteArray()", "testcase": true, "constructor": false, "invocations": ["valueOf", "valueOf", "valueOf", "positiveToByteArray", "assertTrue", "equals"]}, "focal_class": {"identifier": "NumberUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "convert", "parameters": "(final Number number, final Class<T> targetClass)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T convert(final Number number, final Class<T> targetClass)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T convert(final Number number, final Class<T> targetClass)", "class_method_signature": "NumberUtils.convert(final Number number, final Class<T> targetClass)", "testcase": false, "constructor": false}, {"identifier": "throwOverflowException", "parameters": "(final Number number, final Class<?> targetClass)", "modifiers": "private static", "return": "void", "signature": "void throwOverflowException(final Number number, final Class<?> targetClass)", "full_signature": "private static void throwOverflowException(final Number number, final Class<?> targetClass)", "class_method_signature": "NumberUtils.throwOverflowException(final Number number, final Class<?> targetClass)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final String text, final Class<?> clazz)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T parse(final String text, final Class<?> clazz)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T parse(final String text, final Class<?> clazz)", "class_method_signature": "NumberUtils.parse(final String text, final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(final String text, final Class<T> targetClass,\n      final NumberFormat numberFormat)", "modifiers": "public static", "return": "T", "signature": "T parse(final String text, final Class<T> targetClass,\n      final NumberFormat numberFormat)", "full_signature": "public static T parse(final String text, final Class<T> targetClass,\n      final NumberFormat numberFormat)", "class_method_signature": "NumberUtils.parse(final String text, final Class<T> targetClass,\n      final NumberFormat numberFormat)", "testcase": false, "constructor": false}, {"identifier": "decodeBigInteger", "parameters": "(final String value)", "modifiers": "private static", "return": "BigInteger", "signature": "BigInteger decodeBigInteger(final String value)", "full_signature": "private static BigInteger decodeBigInteger(final String value)", "class_method_signature": "NumberUtils.decodeBigInteger(final String value)", "testcase": false, "constructor": false}, {"identifier": "positiveToByteArray", "parameters": "(final BigInteger positiveNumber)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] positiveToByteArray(final BigInteger positiveNumber)", "full_signature": "public static byte[] positiveToByteArray(final BigInteger positiveNumber)", "class_method_signature": "NumberUtils.positiveToByteArray(final BigInteger positiveNumber)", "testcase": false, "constructor": false}, {"identifier": "byteArrayToPositive", "parameters": "(final byte[] rawBytes)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger byteArrayToPositive(final byte[] rawBytes)", "full_signature": "public static BigInteger byteArrayToPositive(final byte[] rawBytes)", "class_method_signature": "NumberUtils.byteArrayToPositive(final byte[] rawBytes)", "testcase": false, "constructor": false}], "file": "core/util/src/main/java/hera/util/NumberUtils.java"}, "focal_method": {"identifier": "positiveToByteArray", "parameters": "(final BigInteger positiveNumber)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] positiveToByteArray(final BigInteger positiveNumber) {\n    if (null == positiveNumber) {\n      return new byte[0];\n    }\n    assertTrue(positiveNumber.compareTo(BigInteger.ZERO) >= 0,\n        \"Argument must greater than or equals to 0\");\n\n    final byte[] raw = positiveNumber.toByteArray();\n    final int positiveByteCapacity =\n        positiveNumber.equals(BigInteger.ZERO) ? 1 : (positiveNumber.bitLength() + 7) >>> 3;\n    if (raw.length > positiveByteCapacity) {\n      return Arrays.copyOfRange(raw, 1, raw.length);\n    }\n    return raw;\n  }", "signature": "byte[] positiveToByteArray(final BigInteger positiveNumber)", "full_signature": "public static byte[] positiveToByteArray(final BigInteger positiveNumber)", "class_method_signature": "NumberUtils.positiveToByteArray(final BigInteger positiveNumber)", "testcase": false, "constructor": false, "invocations": ["assertTrue", "compareTo", "toByteArray", "equals", "bitLength", "copyOfRange"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}