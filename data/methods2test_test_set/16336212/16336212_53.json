{"test_class": {"identifier": "LiveJvmServiceImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "agent/core/src/test/java/org/glowroot/agent/live/LiveJvmServiceImplTest.java"}, "test_case": {"identifier": "testNonParseable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNonParseable() {\n        assertThat(LiveJvmServiceImpl.parseProcessId(\"\")).isNull();\n        assertThat(LiveJvmServiceImpl.parseProcessId(\"x\")).isNull();\n        assertThat(LiveJvmServiceImpl.parseProcessId(\"x:y\")).isNull();\n        assertThat(LiveJvmServiceImpl.parseProcessId(\"@y\")).isNull();\n        assertThat(LiveJvmServiceImpl.parseProcessId(\"x@y\")).isNull();\n    }", "signature": "void testNonParseable()", "full_signature": "@Test public void testNonParseable()", "class_method_signature": "LiveJvmServiceImplTest.testNonParseable()", "testcase": true, "constructor": false, "invocations": ["isNull", "assertThat", "parseProcessId", "isNull", "assertThat", "parseProcessId", "isNull", "assertThat", "parseProcessId", "isNull", "assertThat", "parseProcessId", "isNull", "assertThat", "parseProcessId"]}, "focal_class": {"identifier": "LiveJvmServiceImpl", "superclass": "", "interfaces": "implements LiveJvmService", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(LiveJvmServiceImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(LiveJvmServiceImpl.class)", "var_name": "logger"}, {"original_string": "private static final String HOT_SPOT_DIAGNOSTIC_MBEAN_NAME =\n            \"com.sun.management:type=HotSpotDiagnostic\";", "modifier": "private static final", "type": "String", "declarator": "HOT_SPOT_DIAGNOSTIC_MBEAN_NAME =\n            \"com.sun.management:type=HotSpotDiagnostic\"", "var_name": "HOT_SPOT_DIAGNOSTIC_MBEAN_NAME"}, {"original_string": "private static final @Nullable Long PROCESS_ID =\n            parseProcessId(ManagementFactory.getRuntimeMXBean().getName());", "modifier": "private static final @Nullable", "type": "Long", "declarator": "PROCESS_ID =\n            parseProcessId(ManagementFactory.getRuntimeMXBean().getName())", "var_name": "PROCESS_ID"}, {"original_string": "private static final ImmutableSet<String> numericAttributeTypes =\n            ImmutableSet.of(\"long\", \"int\", \"double\", \"float\", \"java.lang.Long\", \"java.lang.Integer\",\n                    \"java.lang.Double\", \"java.lang.Float\");", "modifier": "private static final", "type": "ImmutableSet<String>", "declarator": "numericAttributeTypes =\n            ImmutableSet.of(\"long\", \"int\", \"double\", \"float\", \"java.lang.Long\", \"java.lang.Integer\",\n                    \"java.lang.Double\", \"java.lang.Float\")", "var_name": "numericAttributeTypes"}, {"original_string": "private final LazyPlatformMBeanServer lazyPlatformMBeanServer;", "modifier": "private final", "type": "LazyPlatformMBeanServer", "declarator": "lazyPlatformMBeanServer", "var_name": "lazyPlatformMBeanServer"}, {"original_string": "private final ThreadDumpService threadDumpService;", "modifier": "private final", "type": "ThreadDumpService", "declarator": "threadDumpService", "var_name": "threadDumpService"}, {"original_string": "private final Availability threadAllocatedBytesAvailability;", "modifier": "private final", "type": "Availability", "declarator": "threadAllocatedBytesAvailability", "var_name": "threadAllocatedBytesAvailability"}, {"original_string": "private final ConfigService configService;", "modifier": "private final", "type": "ConfigService", "declarator": "configService", "var_name": "configService"}, {"original_string": "private final @Nullable File glowrootJarFile;", "modifier": "private final @Nullable", "type": "File", "declarator": "glowrootJarFile", "var_name": "glowrootJarFile"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "methods": [{"identifier": "LiveJvmServiceImpl", "parameters": "(LazyPlatformMBeanServer lazyPlatformMBeanServer,\n            TransactionRegistry transactionRegistry, TraceCollector traceCollector,\n            Availability threadAllocatedBytesAvailability, ConfigService configService,\n            @Nullable File glowrootJarFile, Clock clock)", "modifiers": "public", "return": "", "signature": " LiveJvmServiceImpl(LazyPlatformMBeanServer lazyPlatformMBeanServer,\n            TransactionRegistry transactionRegistry, TraceCollector traceCollector,\n            Availability threadAllocatedBytesAvailability, ConfigService configService,\n            @Nullable File glowrootJarFile, Clock clock)", "full_signature": "public  LiveJvmServiceImpl(LazyPlatformMBeanServer lazyPlatformMBeanServer,\n            TransactionRegistry transactionRegistry, TraceCollector traceCollector,\n            Availability threadAllocatedBytesAvailability, ConfigService configService,\n            @Nullable File glowrootJarFile, Clock clock)", "class_method_signature": "LiveJvmServiceImpl.LiveJvmServiceImpl(LazyPlatformMBeanServer lazyPlatformMBeanServer,\n            TransactionRegistry transactionRegistry, TraceCollector traceCollector,\n            Availability threadAllocatedBytesAvailability, ConfigService configService,\n            @Nullable File glowrootJarFile, Clock clock)", "testcase": false, "constructor": true}, {"identifier": "isAvailable", "parameters": "(String agentId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAvailable(String agentId)", "full_signature": "@Override public boolean isAvailable(String agentId)", "class_method_signature": "LiveJvmServiceImpl.isAvailable(String agentId)", "testcase": false, "constructor": false}, {"identifier": "getThreadDump", "parameters": "(String agentId)", "modifiers": "@Override public", "return": "ThreadDump", "signature": "ThreadDump getThreadDump(String agentId)", "full_signature": "@Override public ThreadDump getThreadDump(String agentId)", "class_method_signature": "LiveJvmServiceImpl.getThreadDump(String agentId)", "testcase": false, "constructor": false}, {"identifier": "getJstack", "parameters": "(String agentId)", "modifiers": "@Override public", "return": "String", "signature": "String getJstack(String agentId)", "full_signature": "@Override public String getJstack(String agentId)", "class_method_signature": "LiveJvmServiceImpl.getJstack(String agentId)", "testcase": false, "constructor": false}, {"identifier": "getAvailableDiskSpace", "parameters": "(String agentId, String directory)", "modifiers": "@Override public", "return": "long", "signature": "long getAvailableDiskSpace(String agentId, String directory)", "full_signature": "@Override public long getAvailableDiskSpace(String agentId, String directory)", "class_method_signature": "LiveJvmServiceImpl.getAvailableDiskSpace(String agentId, String directory)", "testcase": false, "constructor": false}, {"identifier": "heapDump", "parameters": "(String agentId, String directory)", "modifiers": "@Override public", "return": "HeapDumpFileInfo", "signature": "HeapDumpFileInfo heapDump(String agentId, String directory)", "full_signature": "@Override public HeapDumpFileInfo heapDump(String agentId, String directory)", "class_method_signature": "LiveJvmServiceImpl.heapDump(String agentId, String directory)", "testcase": false, "constructor": false}, {"identifier": "heapHistogram", "parameters": "(String agentId)", "modifiers": "@Override public", "return": "HeapHistogram", "signature": "HeapHistogram heapHistogram(String agentId)", "full_signature": "@Override public HeapHistogram heapHistogram(String agentId)", "class_method_signature": "LiveJvmServiceImpl.heapHistogram(String agentId)", "testcase": false, "constructor": false}, {"identifier": "isExplicitGcDisabled", "parameters": "(String agentId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isExplicitGcDisabled(String agentId)", "full_signature": "@Override public boolean isExplicitGcDisabled(String agentId)", "class_method_signature": "LiveJvmServiceImpl.isExplicitGcDisabled(String agentId)", "testcase": false, "constructor": false}, {"identifier": "forceGC", "parameters": "(String agentId)", "modifiers": "@Override public", "return": "void", "signature": "void forceGC(String agentId)", "full_signature": "@Override public void forceGC(String agentId)", "class_method_signature": "LiveJvmServiceImpl.forceGC(String agentId)", "testcase": false, "constructor": false}, {"identifier": "getMBeanDump", "parameters": "(String agentId, MBeanDumpKind mbeanDumpKind,\n            List<String> objectNames)", "modifiers": "@Override public", "return": "MBeanDump", "signature": "MBeanDump getMBeanDump(String agentId, MBeanDumpKind mbeanDumpKind,\n            List<String> objectNames)", "full_signature": "@Override public MBeanDump getMBeanDump(String agentId, MBeanDumpKind mbeanDumpKind,\n            List<String> objectNames)", "class_method_signature": "LiveJvmServiceImpl.getMBeanDump(String agentId, MBeanDumpKind mbeanDumpKind,\n            List<String> objectNames)", "testcase": false, "constructor": false}, {"identifier": "heapDump", "parameters": "(File directory)", "modifiers": "private", "return": "File", "signature": "File heapDump(File directory)", "full_signature": "private File heapDump(File directory)", "class_method_signature": "LiveJvmServiceImpl.heapDump(File directory)", "testcase": false, "constructor": false}, {"identifier": "getAllMBeanInfos", "parameters": "(List<String> includeAttrsForObjectNames)", "modifiers": "private", "return": "List<MBeanDump.MBeanInfo>", "signature": "List<MBeanDump.MBeanInfo> getAllMBeanInfos(List<String> includeAttrsForObjectNames)", "full_signature": "private List<MBeanDump.MBeanInfo> getAllMBeanInfos(List<String> includeAttrsForObjectNames)", "class_method_signature": "LiveJvmServiceImpl.getAllMBeanInfos(List<String> includeAttrsForObjectNames)", "testcase": false, "constructor": false}, {"identifier": "getSomeMBeanInfos", "parameters": "(List<String> includeObjectNames)", "modifiers": "private", "return": "List<MBeanDump.MBeanInfo>", "signature": "List<MBeanDump.MBeanInfo> getSomeMBeanInfos(List<String> includeObjectNames)", "full_signature": "private List<MBeanDump.MBeanInfo> getSomeMBeanInfos(List<String> includeObjectNames)", "class_method_signature": "LiveJvmServiceImpl.getSomeMBeanInfos(List<String> includeObjectNames)", "testcase": false, "constructor": false}, {"identifier": "getMatchingMBeanObjectNames", "parameters": "(String agentId, String partialObjectName,\n            int limit)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getMatchingMBeanObjectNames(String agentId, String partialObjectName,\n            int limit)", "full_signature": "@Override public List<String> getMatchingMBeanObjectNames(String agentId, String partialObjectName,\n            int limit)", "class_method_signature": "LiveJvmServiceImpl.getMatchingMBeanObjectNames(String agentId, String partialObjectName,\n            int limit)", "testcase": false, "constructor": false}, {"identifier": "getMBeanMeta", "parameters": "(String agentId, String mbeanObjectName)", "modifiers": "@Override public", "return": "MBeanMeta", "signature": "MBeanMeta getMBeanMeta(String agentId, String mbeanObjectName)", "full_signature": "@Override public MBeanMeta getMBeanMeta(String agentId, String mbeanObjectName)", "class_method_signature": "LiveJvmServiceImpl.getMBeanMeta(String agentId, String mbeanObjectName)", "testcase": false, "constructor": false}, {"identifier": "getSystemProperties", "parameters": "(String agentId)", "modifiers": "@Override public", "return": "Map<String, String>", "signature": "Map<String, String> getSystemProperties(String agentId)", "full_signature": "@Override public Map<String, String> getSystemProperties(String agentId)", "class_method_signature": "LiveJvmServiceImpl.getSystemProperties(String agentId)", "testcase": false, "constructor": false}, {"identifier": "getCurrentTime", "parameters": "(String agentId)", "modifiers": "@Override public", "return": "long", "signature": "long getCurrentTime(String agentId)", "full_signature": "@Override public long getCurrentTime(String agentId)", "class_method_signature": "LiveJvmServiceImpl.getCurrentTime(String agentId)", "testcase": false, "constructor": false}, {"identifier": "getCapabilities", "parameters": "(String agentId)", "modifiers": "@Override public", "return": "Capabilities", "signature": "Capabilities getCapabilities(String agentId)", "full_signature": "@Override public Capabilities getCapabilities(String agentId)", "class_method_signature": "LiveJvmServiceImpl.getCapabilities(String agentId)", "testcase": false, "constructor": false}, {"identifier": "getMBeanAttributes", "parameters": "(ObjectName objectName)", "modifiers": "private", "return": "List<MBeanDump.MBeanAttribute>", "signature": "List<MBeanDump.MBeanAttribute> getMBeanAttributes(ObjectName objectName)", "full_signature": "private List<MBeanDump.MBeanAttribute> getMBeanAttributes(ObjectName objectName)", "class_method_signature": "LiveJvmServiceImpl.getMBeanAttributes(ObjectName objectName)", "testcase": false, "constructor": false}, {"identifier": "getProcessId", "parameters": "()", "modifiers": "public static @Nullable", "return": "Long", "signature": "Long getProcessId()", "full_signature": "public static @Nullable Long getProcessId()", "class_method_signature": "LiveJvmServiceImpl.getProcessId()", "testcase": false, "constructor": false}, {"identifier": "parseProcessId", "parameters": "(String runtimeName)", "modifiers": "@VisibleForTesting static @Nullable", "return": "Long", "signature": "Long parseProcessId(String runtimeName)", "full_signature": "@VisibleForTesting static @Nullable Long parseProcessId(String runtimeName)", "class_method_signature": "LiveJvmServiceImpl.parseProcessId(String runtimeName)", "testcase": false, "constructor": false}, {"identifier": "allowAttachSelf", "parameters": "()", "modifiers": "private static", "return": "boolean", "signature": "boolean allowAttachSelf()", "full_signature": "private static boolean allowAttachSelf()", "class_method_signature": "LiveJvmServiceImpl.allowAttachSelf()", "testcase": false, "constructor": false}, {"identifier": "j9HeapDump", "parameters": "(File directory)", "modifiers": "private static", "return": "File", "signature": "File j9HeapDump(File directory)", "full_signature": "private static File j9HeapDump(File directory)", "class_method_signature": "LiveJvmServiceImpl.j9HeapDump(File directory)", "testcase": false, "constructor": false}, {"identifier": "generateHeapDumpFileName", "parameters": "(File dir, String extension)", "modifiers": "private static", "return": "File", "signature": "File generateHeapDumpFileName(File dir, String extension)", "full_signature": "private static File generateHeapDumpFileName(File dir, String extension)", "class_method_signature": "LiveJvmServiceImpl.generateHeapDumpFileName(File dir, String extension)", "testcase": false, "constructor": false}, {"identifier": "getMBeanAttributeValue", "parameters": "(@Nullable Object value)", "modifiers": "private static", "return": "MBeanDump.MBeanValue", "signature": "MBeanDump.MBeanValue getMBeanAttributeValue(@Nullable Object value)", "full_signature": "private static MBeanDump.MBeanValue getMBeanAttributeValue(@Nullable Object value)", "class_method_signature": "LiveJvmServiceImpl.getMBeanAttributeValue(@Nullable Object value)", "testcase": false, "constructor": false}, {"identifier": "getCompositeDataValue", "parameters": "(CompositeData compositeData)", "modifiers": "private static", "return": "MBeanDump.MBeanValue", "signature": "MBeanDump.MBeanValue getCompositeDataValue(CompositeData compositeData)", "full_signature": "private static MBeanDump.MBeanValue getCompositeDataValue(CompositeData compositeData)", "class_method_signature": "LiveJvmServiceImpl.getCompositeDataValue(CompositeData compositeData)", "testcase": false, "constructor": false}, {"identifier": "getTabularDataValue", "parameters": "(TabularData tabularData)", "modifiers": "private static", "return": "MBeanDump.MBeanValue", "signature": "MBeanDump.MBeanValue getTabularDataValue(TabularData tabularData)", "full_signature": "private static MBeanDump.MBeanValue getTabularDataValue(TabularData tabularData)", "class_method_signature": "LiveJvmServiceImpl.getTabularDataValue(TabularData tabularData)", "testcase": false, "constructor": false}, {"identifier": "getArrayValue", "parameters": "(Object value)", "modifiers": "private static", "return": "MBeanDump.MBeanValue", "signature": "MBeanDump.MBeanValue getArrayValue(Object value)", "full_signature": "private static MBeanDump.MBeanValue getArrayValue(Object value)", "class_method_signature": "LiveJvmServiceImpl.getArrayValue(Object value)", "testcase": false, "constructor": false}, {"identifier": "getObjectNames", "parameters": "(String mbeanObjectName)", "modifiers": "private", "return": "Set<ObjectName>", "signature": "Set<ObjectName> getObjectNames(String mbeanObjectName)", "full_signature": "private Set<ObjectName> getObjectNames(String mbeanObjectName)", "class_method_signature": "LiveJvmServiceImpl.getObjectNames(String mbeanObjectName)", "testcase": false, "constructor": false}, {"identifier": "getAttributeNames", "parameters": "(Set<ObjectName> objectNames)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getAttributeNames(Set<ObjectName> objectNames)", "full_signature": "private Set<String> getAttributeNames(Set<ObjectName> objectNames)", "class_method_signature": "LiveJvmServiceImpl.getAttributeNames(Set<ObjectName> objectNames)", "testcase": false, "constructor": false}, {"identifier": "getAttributeNames", "parameters": "(MBeanInfo mbeanInfo, ObjectName objectName)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getAttributeNames(MBeanInfo mbeanInfo, ObjectName objectName)", "full_signature": "private Set<String> getAttributeNames(MBeanInfo mbeanInfo, ObjectName objectName)", "class_method_signature": "LiveJvmServiceImpl.getAttributeNames(MBeanInfo mbeanInfo, ObjectName objectName)", "testcase": false, "constructor": false}, {"identifier": "addNumericAttributes", "parameters": "(MBeanAttributeInfo attribute, Object value,\n            Set<String> attributeNames)", "modifiers": "private static", "return": "void", "signature": "void addNumericAttributes(MBeanAttributeInfo attribute, Object value,\n            Set<String> attributeNames)", "full_signature": "private static void addNumericAttributes(MBeanAttributeInfo attribute, Object value,\n            Set<String> attributeNames)", "class_method_signature": "LiveJvmServiceImpl.addNumericAttributes(MBeanAttributeInfo attribute, Object value,\n            Set<String> attributeNames)", "testcase": false, "constructor": false}, {"identifier": "getCompositeTypeAttributeNames", "parameters": "(MBeanAttributeInfo attribute,\n            Object compositeData, CompositeType compositeType)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> getCompositeTypeAttributeNames(MBeanAttributeInfo attribute,\n            Object compositeData, CompositeType compositeType)", "full_signature": "private static List<String> getCompositeTypeAttributeNames(MBeanAttributeInfo attribute,\n            Object compositeData, CompositeType compositeType)", "class_method_signature": "LiveJvmServiceImpl.getCompositeTypeAttributeNames(MBeanAttributeInfo attribute,\n            Object compositeData, CompositeType compositeType)", "testcase": false, "constructor": false}, {"identifier": "getThreadCpuTimeAvailability", "parameters": "()", "modifiers": "private static", "return": "Availability", "signature": "Availability getThreadCpuTimeAvailability()", "full_signature": "private static Availability getThreadCpuTimeAvailability()", "class_method_signature": "LiveJvmServiceImpl.getThreadCpuTimeAvailability()", "testcase": false, "constructor": false}, {"identifier": "getThreadContentionAvailability", "parameters": "()", "modifiers": "private static", "return": "Availability", "signature": "Availability getThreadContentionAvailability()", "full_signature": "private static Availability getThreadContentionAvailability()", "class_method_signature": "LiveJvmServiceImpl.getThreadContentionAvailability()", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/glowroot/agent/live/LiveJvmServiceImpl.java"}, "focal_method": {"identifier": "parseProcessId", "parameters": "(String runtimeName)", "modifiers": "@VisibleForTesting static @Nullable", "return": "Long", "body": "@VisibleForTesting\n    static @Nullable Long parseProcessId(String runtimeName) {\n        int index = runtimeName.indexOf('@');\n        if (index > 0) {\n            String pid = runtimeName.substring(0, index);\n            try {\n                return Long.parseLong(pid);\n            } catch (NumberFormatException e) {\n                logger.debug(e.getMessage(), e);\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }", "signature": "Long parseProcessId(String runtimeName)", "full_signature": "@VisibleForTesting static @Nullable Long parseProcessId(String runtimeName)", "class_method_signature": "LiveJvmServiceImpl.parseProcessId(String runtimeName)", "testcase": false, "constructor": false, "invocations": ["indexOf", "substring", "parseLong", "debug", "getMessage"]}, "repository": {"repo_id": 16336212, "url": "https://github.com/glowroot/glowroot", "stars": 736, "created": "1/29/2014 5:25:58 AM +00:00", "updates": "2020-01-24T11:13:42+00:00", "fork": "False", "license": "licensed"}}