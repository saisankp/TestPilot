{"test_class": {"identifier": "GeoBoxMakerTest", "superclass": "", "interfaces": "", "fields": [], "file": "seeking-core/src/test/java/com/eharmony/matching/seeking/query/geometry/GeoBoxMakerTest.java"}, "test_case": {"identifier": "make_Degrees_here", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void make_Degrees_here() {\n        GeoBoxMaker b = new GeoBoxMaker(DistanceUnits.DEGREES);\n        Point<Double> p = new Point<Double>(34.02886,-118.473993);\n        Box<Double> box = b.make(p, 1.0D);\n        assertEquals(Box.create(33.02886, -119.68064899173066, 35.02886, -117.26733700826932), box);\n    }", "signature": "void make_Degrees_here()", "full_signature": "@Test public void make_Degrees_here()", "class_method_signature": "GeoBoxMakerTest.make_Degrees_here()", "testcase": true, "constructor": false, "invocations": ["make", "assertEquals", "create"]}, "focal_class": {"identifier": "GeoBoxMaker", "superclass": "", "interfaces": "implements BoxMaker", "fields": [{"original_string": "protected static final int EARTH_RADIUS_KILOMETERS = 6371;", "modifier": "protected static final", "type": "int", "declarator": "EARTH_RADIUS_KILOMETERS = 6371", "var_name": "EARTH_RADIUS_KILOMETERS"}, {"original_string": "protected static final int EARTH_RADIUS_MILES = 3959;", "modifier": "protected static final", "type": "int", "declarator": "EARTH_RADIUS_MILES = 3959", "var_name": "EARTH_RADIUS_MILES"}, {"original_string": "protected static final double MIN_LAT = -Math.PI / 2;", "modifier": "protected static final", "type": "double", "declarator": "MIN_LAT = -Math.PI / 2", "var_name": "MIN_LAT"}, {"original_string": "protected static final double MAX_LAT = Math.PI / 2;", "modifier": "protected static final", "type": "double", "declarator": "MAX_LAT = Math.PI / 2", "var_name": "MAX_LAT"}, {"original_string": "protected static final double MIN_LON = -Math.PI;", "modifier": "protected static final", "type": "double", "declarator": "MIN_LON = -Math.PI", "var_name": "MIN_LON"}, {"original_string": "protected static final double MAX_LON = Math.PI;", "modifier": "protected static final", "type": "double", "declarator": "MAX_LON = Math.PI", "var_name": "MAX_LON"}, {"original_string": "protected static final double TWO_PI = 2D * Math.PI;", "modifier": "protected static final", "type": "double", "declarator": "TWO_PI = 2D * Math.PI", "var_name": "TWO_PI"}, {"original_string": "private final DistanceUnits units;", "modifier": "private final", "type": "DistanceUnits", "declarator": "units", "var_name": "units"}], "methods": [{"identifier": "GeoBoxMaker", "parameters": "(DistanceUnits units)", "modifiers": "public", "return": "", "signature": " GeoBoxMaker(DistanceUnits units)", "full_signature": "public  GeoBoxMaker(DistanceUnits units)", "class_method_signature": "GeoBoxMaker.GeoBoxMaker(DistanceUnits units)", "testcase": false, "constructor": true}, {"identifier": "make", "parameters": "(Point<N> center,\n            N radius)", "modifiers": "@Override // http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates public", "return": "Box<N>", "signature": "Box<N> make(Point<N> center,\n            N radius)", "full_signature": "@Override // http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates public Box<N> make(Point<N> center,\n            N radius)", "class_method_signature": "GeoBoxMaker.make(Point<N> center,\n            N radius)", "testcase": false, "constructor": false}, {"identifier": "radiansFromUnits", "parameters": "(double magnitude)", "modifiers": "private", "return": "double", "signature": "double radiansFromUnits(double magnitude)", "full_signature": "private double radiansFromUnits(double magnitude)", "class_method_signature": "GeoBoxMaker.radiansFromUnits(double magnitude)", "testcase": false, "constructor": false}, {"identifier": "degreesToRadians", "parameters": "(double degrees)", "modifiers": "public static", "return": "double", "signature": "double degreesToRadians(double degrees)", "full_signature": "public static double degreesToRadians(double degrees)", "class_method_signature": "GeoBoxMaker.degreesToRadians(double degrees)", "testcase": false, "constructor": false}, {"identifier": "radiansToDegrees", "parameters": "(double radians)", "modifiers": "public static", "return": "double", "signature": "double radiansToDegrees(double radians)", "full_signature": "public static double radiansToDegrees(double radians)", "class_method_signature": "GeoBoxMaker.radiansToDegrees(double radians)", "testcase": false, "constructor": false}, {"identifier": "kilometersToRadians", "parameters": "(double kilometers)", "modifiers": "public static", "return": "double", "signature": "double kilometersToRadians(double kilometers)", "full_signature": "public static double kilometersToRadians(double kilometers)", "class_method_signature": "GeoBoxMaker.kilometersToRadians(double kilometers)", "testcase": false, "constructor": false}, {"identifier": "milesToRadians", "parameters": "(double miles)", "modifiers": "public static", "return": "double", "signature": "double milesToRadians(double miles)", "full_signature": "public static double milesToRadians(double miles)", "class_method_signature": "GeoBoxMaker.milesToRadians(double miles)", "testcase": false, "constructor": false}], "file": "seeking-core/src/main/java/com/eharmony/matching/seeking/query/geometry/GeoBoxMaker.java"}, "focal_method": {"identifier": "make", "parameters": "(Point<N> center,\n            N radius)", "modifiers": "@Override // http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates public", "return": "Box<N>", "body": "@Override\n    // http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates\n    public <N extends Number & Comparable<N>> Box<N> make(Point<N> center,\n            N radius) {\n        // angular distance in radians on a great circle\n        double radDist = radiansFromUnits(radius.doubleValue());\n\n        double radLat = degreesToRadians(center.getX().doubleValue());\n        double radLon = degreesToRadians(center.getY().doubleValue());\n        double minLat = radLat - radDist;\n        double maxLat = radLat + radDist;\n\n        double minLon, maxLon;\n        if (minLat > MIN_LAT && maxLat < MAX_LAT) {\n            double deltaLon = Math.asin(Math.sin(radDist) / Math.cos(radLat));\n            minLon = radLon - deltaLon;\n            maxLon = radLon + deltaLon;\n            if (minLon < MIN_LON) {\n                minLon += TWO_PI;\n            }\n            if (maxLon > MAX_LON) {\n                maxLon -= TWO_PI;\n            }\n        } else {\n            // a pole is within the distance\n            minLat = Math.max(minLat, MIN_LAT);\n            maxLat = Math.min(maxLat, MAX_LAT);\n            minLon = MIN_LON;\n            maxLon = MAX_LON;\n        }\n        \n        // hack for the generic numbers\n        N zero = subtract(radius, radius);\n        N minLatN = add(zero, radiansToDegrees(minLat));\n        N maxLatN = add(zero, radiansToDegrees(maxLat));\n        N minLonN = add(zero, radiansToDegrees(minLon));\n        N maxLonN = add(zero, radiansToDegrees(maxLon));\n\n        return new Box<N>(\n                new Point<N>(minLatN,minLonN),\n                new Point<N>(maxLatN,maxLonN));\n    }", "signature": "Box<N> make(Point<N> center,\n            N radius)", "full_signature": "@Override // http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates public Box<N> make(Point<N> center,\n            N radius)", "class_method_signature": "GeoBoxMaker.make(Point<N> center,\n            N radius)", "testcase": false, "constructor": false, "invocations": ["radiansFromUnits", "doubleValue", "degreesToRadians", "doubleValue", "getX", "degreesToRadians", "doubleValue", "getY", "asin", "sin", "cos", "max", "min", "subtract", "add", "radiansToDegrees", "add", "radiansToDegrees", "add", "radiansToDegrees", "add", "radiansToDegrees"]}, "repository": {"repo_id": 9248683, "url": "https://github.com/eHarmony/seeking", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 194, "license": "licensed"}}