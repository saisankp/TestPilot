{"test_class": {"identifier": "SyncQueueImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "byte[] peer0 = new byte[32];", "modifier": "", "type": "byte[]", "declarator": "peer0 = new byte[32]", "var_name": "peer0"}, {"original_string": "private static final int DEFAULT_REQUEST_LEN = 192;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_REQUEST_LEN = 192", "var_name": "DEFAULT_REQUEST_LEN"}, {"original_string": "static final DependentBlockHeaderRule RedRule = new DependentBlockHeaderRule() {\n        @Override\n        public boolean validate(BlockHeader header, BlockHeader dependency) {\n            return false;\n        }\n    };", "modifier": "static final", "type": "DependentBlockHeaderRule", "declarator": "RedRule = new DependentBlockHeaderRule() {\n        @Override\n        public boolean validate(BlockHeader header, BlockHeader dependency) {\n            return false;\n        }\n    }", "var_name": "RedRule"}, {"original_string": "static final DependentBlockHeaderRule GreenRule = new DependentBlockHeaderRule() {\n        @Override\n        public boolean validate(BlockHeader header, BlockHeader dependency) {\n            return true;\n        }\n    };", "modifier": "static final", "type": "DependentBlockHeaderRule", "declarator": "GreenRule = new DependentBlockHeaderRule() {\n        @Override\n        public boolean validate(BlockHeader header, BlockHeader dependency) {\n            return true;\n        }\n    }", "var_name": "GreenRule"}], "file": "ethereumj-core/src/test/java/org/ethereum/sync/SyncQueueImplTest.java"}, "test_case": {"identifier": "testEraseChain", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEraseChain() {\n        List<Block> randomChain = TestUtils.getRandomChain(new byte[32], 0, 1024);\n        SyncQueueImpl queue = new SyncQueueImpl(randomChain);\n\n        List<Block> chain1 = TestUtils.getRandomChain(randomChain.get(randomChain.size() - 1).getHash(),\n                1024, SyncQueueImpl.MAX_CHAIN_LEN / 2);\n        queue.addHeaders(createHeadersFromBlocks(chain1, randomPeerId()));\n\n        List<Block> chain2 = TestUtils.getRandomChain(randomChain.get(randomChain.size() - 1).getHash(),\n                1024, SyncQueueImpl.MAX_CHAIN_LEN / 2 - 1);\n        queue.addHeaders(createHeadersFromBlocks(chain2, randomPeerId()));\n\n        List<SyncQueueImpl.HeaderElement> longestChain = queue.getLongestChain();\n        long maxNum = longestChain.get(longestChain.size() - 1).header.getNumber();\n        assertEquals(1024 + SyncQueueImpl.MAX_CHAIN_LEN / 2 - 1, maxNum);\n        assertEquals(1024 + SyncQueueImpl.MAX_CHAIN_LEN / 2 - 1, queue.getHeadersCount());\n\n        List<Block> chain3 = TestUtils.getRandomChain(chain1.get(chain1.size() - 1).getHash(),\n                1024 + SyncQueueImpl.MAX_CHAIN_LEN / 2, SyncQueueImpl.MAX_CHAIN_LEN / 10);\n        // the chain is invalid and must be erased\n        queue.withParentHeaderValidator(new DependentBlockHeaderRule() {\n            @Override\n            public boolean validate(BlockHeader header, BlockHeader dependency) {\n                // chain2 should become best after erasing\n                return header.getNumber() < chain2.get(chain2.size() - 2).getNumber();\n            }\n        });\n        queue.addHeadersAndValidate(createHeadersFromBlocks(chain3, randomPeerId()));\n\n        longestChain = queue.getLongestChain();\n        assertEquals(maxNum - 1, queue.getHeadersCount());\n        assertEquals(chain2.get(chain2.size() - 1).getHeader(),\n                longestChain.get(longestChain.size() - 1).header.getHeader());\n    }", "signature": "void testEraseChain()", "full_signature": "@Test public void testEraseChain()", "class_method_signature": "SyncQueueImplTest.testEraseChain()", "testcase": true, "constructor": false, "invocations": ["getRandomChain", "getRandomChain", "getHash", "get", "size", "addHeaders", "createHeadersFromBlocks", "randomPeerId", "getRandomChain", "getHash", "get", "size", "addHeaders", "createHeadersFromBlocks", "randomPeerId", "getLongestChain", "getNumber", "get", "size", "assertEquals", "assertEquals", "getHeadersCount", "getRandomChain", "getHash", "get", "size", "withParentHeaderValidator", "getNumber", "getNumber", "get", "size", "addHeadersAndValidate", "createHeadersFromBlocks", "randomPeerId", "getLongestChain", "assertEquals", "getHeadersCount", "assertEquals", "getHeader", "get", "size", "getHeader", "get", "size"]}, "focal_class": {"identifier": "SyncQueueImpl", "superclass": "", "interfaces": "implements SyncQueueIfc", "fields": [{"original_string": "static int MAX_CHAIN_LEN = MAX_IN_REQUEST;", "modifier": "static", "type": "int", "declarator": "MAX_CHAIN_LEN = MAX_IN_REQUEST", "var_name": "MAX_CHAIN_LEN"}, {"original_string": "Map<Long, Map<ByteArrayWrapper, HeaderElement>> headers = new HashMap<>();", "modifier": "", "type": "Map<Long, Map<ByteArrayWrapper, HeaderElement>>", "declarator": "headers = new HashMap<>()", "var_name": "headers"}, {"original_string": "long minNum = Integer.MAX_VALUE;", "modifier": "", "type": "long", "declarator": "minNum = Integer.MAX_VALUE", "var_name": "minNum"}, {"original_string": "long maxNum = 0;", "modifier": "", "type": "long", "declarator": "maxNum = 0", "var_name": "maxNum"}, {"original_string": "long darkZoneNum = 0;", "modifier": "", "type": "long", "declarator": "darkZoneNum = 0", "var_name": "darkZoneNum"}, {"original_string": "Long endBlockNumber = null;", "modifier": "", "type": "Long", "declarator": "endBlockNumber = null", "var_name": "endBlockNumber"}, {"original_string": "Random rnd = new Random();", "modifier": "", "type": "Random", "declarator": "rnd = new Random()", "var_name": "rnd"}, {"original_string": "DependentBlockHeaderRule parentHeaderValidator = null;", "modifier": "", "type": "DependentBlockHeaderRule", "declarator": "parentHeaderValidator = null", "var_name": "parentHeaderValidator"}], "methods": [{"identifier": "SyncQueueImpl", "parameters": "(List<Block> initBlocks)", "modifiers": "public", "return": "", "signature": " SyncQueueImpl(List<Block> initBlocks)", "full_signature": "public  SyncQueueImpl(List<Block> initBlocks)", "class_method_signature": "SyncQueueImpl.SyncQueueImpl(List<Block> initBlocks)", "testcase": false, "constructor": true}, {"identifier": "SyncQueueImpl", "parameters": "(Blockchain bc)", "modifiers": "public", "return": "", "signature": " SyncQueueImpl(Blockchain bc)", "full_signature": "public  SyncQueueImpl(Blockchain bc)", "class_method_signature": "SyncQueueImpl.SyncQueueImpl(Blockchain bc)", "testcase": false, "constructor": true}, {"identifier": "SyncQueueImpl", "parameters": "(Blockchain bc, Long endBlockNumber)", "modifiers": "public", "return": "", "signature": " SyncQueueImpl(Blockchain bc, Long endBlockNumber)", "full_signature": "public  SyncQueueImpl(Blockchain bc, Long endBlockNumber)", "class_method_signature": "SyncQueueImpl.SyncQueueImpl(Blockchain bc, Long endBlockNumber)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(List<Block> initBlocks)", "modifiers": "private", "return": "void", "signature": "void init(List<Block> initBlocks)", "full_signature": "private void init(List<Block> initBlocks)", "class_method_signature": "SyncQueueImpl.init(List<Block> initBlocks)", "testcase": false, "constructor": false}, {"identifier": "putGenHeaders", "parameters": "(long num, Map<ByteArrayWrapper, HeaderElement> genHeaders)", "modifiers": "private", "return": "void", "signature": "void putGenHeaders(long num, Map<ByteArrayWrapper, HeaderElement> genHeaders)", "full_signature": "private void putGenHeaders(long num, Map<ByteArrayWrapper, HeaderElement> genHeaders)", "class_method_signature": "SyncQueueImpl.putGenHeaders(long num, Map<ByteArrayWrapper, HeaderElement> genHeaders)", "testcase": false, "constructor": false}, {"identifier": "getLongestChain", "parameters": "()", "modifiers": "", "return": "List<HeaderElement>", "signature": "List<HeaderElement> getLongestChain()", "full_signature": " List<HeaderElement> getLongestChain()", "class_method_signature": "SyncQueueImpl.getLongestChain()", "testcase": false, "constructor": false}, {"identifier": "hasGaps", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean hasGaps()", "full_signature": "private boolean hasGaps()", "class_method_signature": "SyncQueueImpl.hasGaps()", "testcase": false, "constructor": false}, {"identifier": "trimChain", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void trimChain()", "full_signature": "private void trimChain()", "class_method_signature": "SyncQueueImpl.trimChain()", "testcase": false, "constructor": false}, {"identifier": "trimChainImpl", "parameters": "(List<HeaderElement> longestChain)", "modifiers": "private", "return": "void", "signature": "void trimChainImpl(List<HeaderElement> longestChain)", "full_signature": "private void trimChainImpl(List<HeaderElement> longestChain)", "class_method_signature": "SyncQueueImpl.trimChainImpl(List<HeaderElement> longestChain)", "testcase": false, "constructor": false}, {"identifier": "trimExported", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void trimExported()", "full_signature": "private void trimExported()", "class_method_signature": "SyncQueueImpl.trimExported()", "testcase": false, "constructor": false}, {"identifier": "addHeader", "parameters": "(BlockHeaderWrapper header)", "modifiers": "private", "return": "boolean", "signature": "boolean addHeader(BlockHeaderWrapper header)", "full_signature": "private boolean addHeader(BlockHeaderWrapper header)", "class_method_signature": "SyncQueueImpl.addHeader(BlockHeaderWrapper header)", "testcase": false, "constructor": false}, {"identifier": "addHeaderPriv", "parameters": "(BlockHeaderWrapper header)", "modifiers": "private", "return": "boolean", "signature": "boolean addHeaderPriv(BlockHeaderWrapper header)", "full_signature": "private boolean addHeaderPriv(BlockHeaderWrapper header)", "class_method_signature": "SyncQueueImpl.addHeaderPriv(BlockHeaderWrapper header)", "testcase": false, "constructor": false}, {"identifier": "requestHeaders", "parameters": "(int maxSize, int maxRequests, int maxTotalHeaders)", "modifiers": "@Override public synchronized", "return": "List<HeadersRequest>", "signature": "List<HeadersRequest> requestHeaders(int maxSize, int maxRequests, int maxTotalHeaders)", "full_signature": "@Override public synchronized List<HeadersRequest> requestHeaders(int maxSize, int maxRequests, int maxTotalHeaders)", "class_method_signature": "SyncQueueImpl.requestHeaders(int maxSize, int maxRequests, int maxTotalHeaders)", "testcase": false, "constructor": false}, {"identifier": "requestHeadersImpl", "parameters": "(int count, int maxRequests, int maxTotHeaderCount)", "modifiers": "private", "return": "List<HeadersRequest>", "signature": "List<HeadersRequest> requestHeadersImpl(int count, int maxRequests, int maxTotHeaderCount)", "full_signature": "private List<HeadersRequest> requestHeadersImpl(int count, int maxRequests, int maxTotHeaderCount)", "class_method_signature": "SyncQueueImpl.requestHeadersImpl(int count, int maxRequests, int maxTotHeaderCount)", "testcase": false, "constructor": false}, {"identifier": "getNextReq", "parameters": "(long startFrom, int maxCount)", "modifiers": "private", "return": "HeadersRequestImpl", "signature": "HeadersRequestImpl getNextReq(long startFrom, int maxCount)", "full_signature": "private HeadersRequestImpl getNextReq(long startFrom, int maxCount)", "class_method_signature": "SyncQueueImpl.getNextReq(long startFrom, int maxCount)", "testcase": false, "constructor": false}, {"identifier": "addHeaders", "parameters": "(Collection<BlockHeaderWrapper> headers)", "modifiers": "@Override public synchronized", "return": "List<BlockHeaderWrapper>", "signature": "List<BlockHeaderWrapper> addHeaders(Collection<BlockHeaderWrapper> headers)", "full_signature": "@Override public synchronized List<BlockHeaderWrapper> addHeaders(Collection<BlockHeaderWrapper> headers)", "class_method_signature": "SyncQueueImpl.addHeaders(Collection<BlockHeaderWrapper> headers)", "testcase": false, "constructor": false}, {"identifier": "addHeadersAndValidate", "parameters": "(Collection<BlockHeaderWrapper> headers)", "modifiers": "@Override public synchronized", "return": "ValidatedHeaders", "signature": "ValidatedHeaders addHeadersAndValidate(Collection<BlockHeaderWrapper> headers)", "full_signature": "@Override public synchronized ValidatedHeaders addHeadersAndValidate(Collection<BlockHeaderWrapper> headers)", "class_method_signature": "SyncQueueImpl.addHeadersAndValidate(Collection<BlockHeaderWrapper> headers)", "testcase": false, "constructor": false}, {"identifier": "validateChain", "parameters": "(List<HeaderElement> chain)", "modifiers": "", "return": "ValidatedHeaders", "signature": "ValidatedHeaders validateChain(List<HeaderElement> chain)", "full_signature": " ValidatedHeaders validateChain(List<HeaderElement> chain)", "class_method_signature": "SyncQueueImpl.validateChain(List<HeaderElement> chain)", "testcase": false, "constructor": false}, {"identifier": "eraseChain", "parameters": "(List<HeaderElement> chain, long startFrom)", "modifiers": "", "return": "void", "signature": "void eraseChain(List<HeaderElement> chain, long startFrom)", "full_signature": " void eraseChain(List<HeaderElement> chain, long startFrom)", "class_method_signature": "SyncQueueImpl.eraseChain(List<HeaderElement> chain, long startFrom)", "testcase": false, "constructor": false}, {"identifier": "getHeadersCount", "parameters": "()", "modifiers": "@Override public synchronized", "return": "int", "signature": "int getHeadersCount()", "full_signature": "@Override public synchronized int getHeadersCount()", "class_method_signature": "SyncQueueImpl.getHeadersCount()", "testcase": false, "constructor": false}, {"identifier": "requestBlocks", "parameters": "(int maxSize)", "modifiers": "@Override public synchronized", "return": "BlocksRequest", "signature": "BlocksRequest requestBlocks(int maxSize)", "full_signature": "@Override public synchronized BlocksRequest requestBlocks(int maxSize)", "class_method_signature": "SyncQueueImpl.requestBlocks(int maxSize)", "testcase": false, "constructor": false}, {"identifier": "findHeaderElement", "parameters": "(BlockHeader bh)", "modifiers": "", "return": "HeaderElement", "signature": "HeaderElement findHeaderElement(BlockHeader bh)", "full_signature": " HeaderElement findHeaderElement(BlockHeader bh)", "class_method_signature": "SyncQueueImpl.findHeaderElement(BlockHeader bh)", "testcase": false, "constructor": false}, {"identifier": "addBlock", "parameters": "(Block block)", "modifiers": "private", "return": "HeaderElement", "signature": "HeaderElement addBlock(Block block)", "full_signature": "private HeaderElement addBlock(Block block)", "class_method_signature": "SyncQueueImpl.addBlock(Block block)", "testcase": false, "constructor": false}, {"identifier": "addBlocks", "parameters": "(Collection<Block> blocks)", "modifiers": "@Override public synchronized", "return": "List<Block>", "signature": "List<Block> addBlocks(Collection<Block> blocks)", "full_signature": "@Override public synchronized List<Block> addBlocks(Collection<Block> blocks)", "class_method_signature": "SyncQueueImpl.addBlocks(Collection<Block> blocks)", "testcase": false, "constructor": false}, {"identifier": "exportBlocks", "parameters": "()", "modifiers": "private", "return": "List<Block>", "signature": "List<Block> exportBlocks()", "full_signature": "private List<Block> exportBlocks()", "class_method_signature": "SyncQueueImpl.exportBlocks()", "testcase": false, "constructor": false}, {"identifier": "exportNewBlock", "parameters": "(Block block)", "modifiers": "protected", "return": "void", "signature": "void exportNewBlock(Block block)", "full_signature": "protected void exportNewBlock(Block block)", "class_method_signature": "SyncQueueImpl.exportNewBlock(Block block)", "testcase": false, "constructor": false}, {"identifier": "pollBlocks", "parameters": "()", "modifiers": "public synchronized", "return": "List<Block>", "signature": "List<Block> pollBlocks()", "full_signature": "public synchronized List<Block> pollBlocks()", "class_method_signature": "SyncQueueImpl.pollBlocks()", "testcase": false, "constructor": false}, {"identifier": "withParentHeaderValidator", "parameters": "(DependentBlockHeaderRule validator)", "modifiers": "public", "return": "SyncQueueImpl", "signature": "SyncQueueImpl withParentHeaderValidator(DependentBlockHeaderRule validator)", "full_signature": "public SyncQueueImpl withParentHeaderValidator(DependentBlockHeaderRule validator)", "class_method_signature": "SyncQueueImpl.withParentHeaderValidator(DependentBlockHeaderRule validator)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/sync/SyncQueueImpl.java"}, "focal_method": {"identifier": "eraseChain", "parameters": "(List<HeaderElement> chain, long startFrom)", "modifiers": "", "return": "void", "body": "void eraseChain(List<HeaderElement> chain, long startFrom) {\n        if (chain.isEmpty())\n            return;\n\n        // prevent from going beyond dark zone\n        startFrom = Math.max(darkZoneNum + 1, startFrom);\n\n        HeaderElement head = chain.get(chain.size() - 1);\n        for (int i = chain.size() - 1; i >= 0; i--) {\n            HeaderElement el = chain.get(i);\n            if (el.header.getNumber() < startFrom) break; // erase up to startFrom number\n            Map<ByteArrayWrapper, HeaderElement> gen = headers.get(el.header.getNumber());\n            gen.remove(new ByteArrayWrapper(el.header.getHash()));\n            // clean empty gens\n            if (gen.isEmpty()) {\n                headers.remove(el.header.getNumber());\n            }\n        }\n\n        // adjust maxNum\n        if (head.header.getNumber() == maxNum) {\n            Map<ByteArrayWrapper, HeaderElement> lastValidatedGen = headers.get(darkZoneNum);\n            assert lastValidatedGen.size() == 1;\n            long maxNotEmptyGen = lastValidatedGen.values().iterator().next().header.getNumber();\n\n            // find new maxNum after chain has been erased\n            for (long num = head.header.getNumber(); num >= darkZoneNum; num--) {\n                Map<ByteArrayWrapper, HeaderElement> gen = headers.get(num);\n                if (gen != null && !gen.isEmpty() && num > maxNotEmptyGen) {\n                    maxNotEmptyGen = num;\n                    break;\n                }\n            }\n            maxNum = maxNotEmptyGen;\n        }\n    }", "signature": "void eraseChain(List<HeaderElement> chain, long startFrom)", "full_signature": " void eraseChain(List<HeaderElement> chain, long startFrom)", "class_method_signature": "SyncQueueImpl.eraseChain(List<HeaderElement> chain, long startFrom)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "max", "get", "size", "size", "get", "getNumber", "get", "getNumber", "remove", "getHash", "isEmpty", "remove", "getNumber", "getNumber", "get", "size", "getNumber", "next", "iterator", "values", "getNumber", "get", "isEmpty"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}