{"test_class": {"identifier": "JavaPropertyScannerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JavaPropertyScanner fixture;", "modifier": "private", "type": "JavaPropertyScanner", "declarator": "fixture", "var_name": "fixture"}], "file": "org.jabylon.properties/src/test/java/org/jabylon/properties/types/impl/JavaPropertyScannerTest.java"}, "test_case": {"identifier": "testFindTemplate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFindTemplate() {\n\t\tScanConfiguration configuration = mock(ScanConfiguration.class);\n\t\tassertEquals(\"test.properties\", getFixture().findTemplate(new File(\"test_de_DE.properties\"), configuration).getName());\n\t\tassertEquals(\"test.properties\", getFixture().findTemplate(new File(\"test_de.properties\"), configuration).getName());\n\t}", "signature": "void testFindTemplate()", "full_signature": "@Test public void testFindTemplate()", "class_method_signature": "JavaPropertyScannerTest.testFindTemplate()", "testcase": true, "constructor": false, "invocations": ["mock", "assertEquals", "getName", "findTemplate", "getFixture", "assertEquals", "getName", "findTemplate", "getFixture"]}, "focal_class": {"identifier": "JavaPropertyScanner", "superclass": "extends AbstractPropertyScanner", "interfaces": "implements PropertyScanner", "fields": [{"original_string": "@Property(name=PropertyScanner.TYPE, value=\"PROPERTIES_ENCODED\")\n\tpublic  static final String TYPE = \"PROPERTIES_ENCODED\";", "modifier": "@Property(name=PropertyScanner.TYPE, value=\"PROPERTIES_ENCODED\")\n\tpublic  static final", "type": "String", "declarator": "TYPE = \"PROPERTIES_ENCODED\"", "var_name": "TYPE"}, {"original_string": "static final Pattern LOCALE_PATTERN = Pattern.compile(\"(.+?)((?:_\\\\w\\\\w){0,3})(\\\\..+)\");", "modifier": "static final", "type": "Pattern", "declarator": "LOCALE_PATTERN = Pattern.compile(\"(.+?)((?:_\\\\w\\\\w){0,3})(\\\\..+)\")", "var_name": "LOCALE_PATTERN"}, {"original_string": "private static final String[] DEFAULT_EXCLUDES = {\"**/build.properties\"};", "modifier": "private static final", "type": "String[]", "declarator": "DEFAULT_EXCLUDES = {\"**/build.properties\"}", "var_name": "DEFAULT_EXCLUDES"}, {"original_string": "private static final String[] DEFAULT_INCLUDES = {\"**/*.properties\"};", "modifier": "private static final", "type": "String[]", "declarator": "DEFAULT_INCLUDES = {\"**/*.properties\"}", "var_name": "DEFAULT_INCLUDES"}], "methods": [{"identifier": "findTemplate", "parameters": "(File propertyFile, ScanConfiguration config)", "modifiers": "@Override public", "return": "File", "signature": "File findTemplate(File propertyFile, ScanConfiguration config)", "full_signature": "@Override public File findTemplate(File propertyFile, ScanConfiguration config)", "class_method_signature": "JavaPropertyScanner.findTemplate(File propertyFile, ScanConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "getLocale", "parameters": "(File propertyFile)", "modifiers": "@Override public", "return": "Locale", "signature": "Locale getLocale(File propertyFile)", "full_signature": "@Override public Locale getLocale(File propertyFile)", "class_method_signature": "JavaPropertyScanner.getLocale(File propertyFile)", "testcase": false, "constructor": false}, {"identifier": "buildPatternFrom", "parameters": "(String fileName)", "modifiers": "private", "return": "Pattern", "signature": "Pattern buildPatternFrom(String fileName)", "full_signature": "private Pattern buildPatternFrom(String fileName)", "class_method_signature": "JavaPropertyScanner.buildPatternFrom(String fileName)", "testcase": false, "constructor": false}, {"identifier": "findTranslations", "parameters": "(File template, ScanConfiguration config)", "modifiers": "@Override public", "return": "Map<Locale, File>", "signature": "Map<Locale, File> findTranslations(File template, ScanConfiguration config)", "full_signature": "@Override public Map<Locale, File> findTranslations(File template, ScanConfiguration config)", "class_method_signature": "JavaPropertyScanner.findTranslations(File template, ScanConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "computeTranslationPath", "parameters": "(File template, Locale templateLocale, Locale translationLocale)", "modifiers": "@Override public", "return": "File", "signature": "File computeTranslationPath(File template, Locale templateLocale, Locale translationLocale)", "full_signature": "@Override public File computeTranslationPath(File template, Locale templateLocale, Locale translationLocale)", "class_method_signature": "JavaPropertyScanner.computeTranslationPath(File template, Locale templateLocale, Locale translationLocale)", "testcase": false, "constructor": false}, {"identifier": "isBilingual", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isBilingual()", "full_signature": "@Override public boolean isBilingual()", "class_method_signature": "JavaPropertyScanner.isBilingual()", "testcase": false, "constructor": false}, {"identifier": "createConverter", "parameters": "(URI resource)", "modifiers": "@Override public", "return": "PropertyConverter", "signature": "PropertyConverter createConverter(URI resource)", "full_signature": "@Override public PropertyConverter createConverter(URI resource)", "class_method_signature": "JavaPropertyScanner.createConverter(URI resource)", "testcase": false, "constructor": false}, {"identifier": "getDefaultIncludes", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDefaultIncludes()", "full_signature": "@Override public String[] getDefaultIncludes()", "class_method_signature": "JavaPropertyScanner.getDefaultIncludes()", "testcase": false, "constructor": false}, {"identifier": "getDefaultExcludes", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDefaultExcludes()", "full_signature": "@Override public String[] getDefaultExcludes()", "class_method_signature": "JavaPropertyScanner.getDefaultExcludes()", "testcase": false, "constructor": false}, {"identifier": "getEncoding", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getEncoding()", "full_signature": "@Override public String getEncoding()", "class_method_signature": "JavaPropertyScanner.getEncoding()", "testcase": false, "constructor": false}], "file": "org.jabylon.properties/src/main/java/org/jabylon/properties/types/impl/JavaPropertyScanner.java"}, "focal_method": {"identifier": "findTemplate", "parameters": "(File propertyFile, ScanConfiguration config)", "modifiers": "@Override public", "return": "File", "body": "@Override\n    public File findTemplate(File propertyFile, ScanConfiguration config) {\n        Matcher matcher = LOCALE_PATTERN.matcher(propertyFile.getName());\n        if(!matcher.matches())\n            return null;\n        String prefix = matcher.group(1);\n        String suffix = matcher.group(3);\n        StringBuilder filename = new StringBuilder(prefix);\n        if(config.getMasterLocale()!=null)\n        {\n            filename.append(\"_\");\n            filename.append(config.getMasterLocale());\n        }\n        filename.append(suffix);\n        return new File(propertyFile.getParentFile(),filename.toString());\n    }", "signature": "File findTemplate(File propertyFile, ScanConfiguration config)", "full_signature": "@Override public File findTemplate(File propertyFile, ScanConfiguration config)", "class_method_signature": "JavaPropertyScanner.findTemplate(File propertyFile, ScanConfiguration config)", "testcase": false, "constructor": false, "invocations": ["matcher", "getName", "matches", "group", "group", "getMasterLocale", "append", "append", "getMasterLocale", "append", "getParentFile", "toString"]}, "repository": {"repo_id": 3986627, "url": "https://github.com/jutzig/jabylon", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 51, "size": 13400, "license": "licensed"}}