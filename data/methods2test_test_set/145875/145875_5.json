{"test_class": {"identifier": "TemplateBasedApplierTest", "superclass": "", "interfaces": "", "fields": [], "file": "dbdeploy-core/src/test/java/com/dbdeploy/appliers/TemplateBasedApplierTest.java"}, "test_case": {"identifier": "shouldThrowUsageExceptionWhenTemplateNotFound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void shouldThrowUsageExceptionWhenTemplateNotFound() throws Exception {\n\t\tTemplateBasedApplier applier = new TemplateBasedApplier(new NullWriter(), \"some_complete_rubbish\", null, \";\", DelimiterType.normal, null);\n\t\ttry {\n\t\t\tapplier.apply(null);\n\t\t\tAssert.fail(\"expected exception\");\n\t\t} catch (UsageException e) {\n\t\t\tassertThat(e.getMessage(), is(\"Could not find template named some_complete_rubbish_apply.ftl\\n\" +\n\t\t\t\t\t\"Check that you have got the name of the database syntax correct.\"));\n\t\t}\n\t}", "signature": "void shouldThrowUsageExceptionWhenTemplateNotFound()", "full_signature": "@Test public void shouldThrowUsageExceptionWhenTemplateNotFound()", "class_method_signature": "TemplateBasedApplierTest.shouldThrowUsageExceptionWhenTemplateNotFound()", "testcase": true, "constructor": false, "invocations": ["apply", "fail", "assertThat", "getMessage", "is"]}, "focal_class": {"identifier": "TemplateBasedApplier", "superclass": "", "interfaces": "implements ChangeScriptApplier", "fields": [{"original_string": "private Configuration configuration;", "modifier": "private", "type": "Configuration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private Writer writer;", "modifier": "private", "type": "Writer", "declarator": "writer", "var_name": "writer"}, {"original_string": "private String syntax;", "modifier": "private", "type": "String", "declarator": "syntax", "var_name": "syntax"}, {"original_string": "private String changeLogTableName;", "modifier": "private", "type": "String", "declarator": "changeLogTableName", "var_name": "changeLogTableName"}, {"original_string": "private String delimiter;", "modifier": "private", "type": "String", "declarator": "delimiter", "var_name": "delimiter"}, {"original_string": "private DelimiterType delimiterType;", "modifier": "private", "type": "DelimiterType", "declarator": "delimiterType", "var_name": "delimiterType"}], "methods": [{"identifier": "TemplateBasedApplier", "parameters": "(Writer writer, String syntax, String changeLogTableName, String delimiter, DelimiterType delimiterType, File templateDirectory)", "modifiers": "public", "return": "", "signature": " TemplateBasedApplier(Writer writer, String syntax, String changeLogTableName, String delimiter, DelimiterType delimiterType, File templateDirectory)", "full_signature": "public  TemplateBasedApplier(Writer writer, String syntax, String changeLogTableName, String delimiter, DelimiterType delimiterType, File templateDirectory)", "class_method_signature": "TemplateBasedApplier.TemplateBasedApplier(Writer writer, String syntax, String changeLogTableName, String delimiter, DelimiterType delimiterType, File templateDirectory)", "testcase": false, "constructor": true}, {"identifier": "createFileTemplateLoader", "parameters": "(File templateDirectory)", "modifiers": "private", "return": "FileTemplateLoader", "signature": "FileTemplateLoader createFileTemplateLoader(File templateDirectory)", "full_signature": "private FileTemplateLoader createFileTemplateLoader(File templateDirectory)", "class_method_signature": "TemplateBasedApplier.createFileTemplateLoader(File templateDirectory)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(List<ChangeScript> changeScripts)", "modifiers": "public", "return": "void", "signature": "void apply(List<ChangeScript> changeScripts)", "full_signature": "public void apply(List<ChangeScript> changeScripts)", "class_method_signature": "TemplateBasedApplier.apply(List<ChangeScript> changeScripts)", "testcase": false, "constructor": false}, {"identifier": "getTemplateQualifier", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getTemplateQualifier()", "full_signature": "protected String getTemplateQualifier()", "class_method_signature": "TemplateBasedApplier.getTemplateQualifier()", "testcase": false, "constructor": false}], "file": "dbdeploy-core/src/main/java/com/dbdeploy/appliers/TemplateBasedApplier.java"}, "focal_method": {"identifier": "apply", "parameters": "(List<ChangeScript> changeScripts)", "modifiers": "public", "return": "void", "body": "public void apply(List<ChangeScript> changeScripts) {\n\t\tString filename = syntax + \"_\" + getTemplateQualifier() + \".ftl\";\n\n\t\ttry {\n\t\t\tMap<String, Object> model = new HashMap<String, Object>();\n\t\t\tmodel.put(\"scripts\", changeScripts);\n\t\t\tmodel.put(\"changeLogTableName\", changeLogTableName);\n\t\t\tmodel.put(\"delimiter\", delimiter);\n\t\t\tmodel.put(\"separator\", delimiterType == DelimiterType.row ? \"\\n\" : \"\");\n\n\t\t\ttry {\n\t\t\t\tTemplate template = configuration.getTemplate(filename);\n\t\t\t\ttemplate.process(model, writer);\n\t\t\t} finally {\n\t\t\t\twriter.close();\n\t\t\t}\n\t\t} catch (FileNotFoundException ex) {\n\t\t\tthrow new UsageException(\"Could not find template named \" + filename + \"\\n\" +\n\t\t\t\t\t\"Check that you have got the name of the database syntax correct.\", ex);\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}", "signature": "void apply(List<ChangeScript> changeScripts)", "full_signature": "public void apply(List<ChangeScript> changeScripts)", "class_method_signature": "TemplateBasedApplier.apply(List<ChangeScript> changeScripts)", "testcase": false, "constructor": false, "invocations": ["getTemplateQualifier", "put", "put", "put", "put", "getTemplate", "process", "close"]}, "repository": {"repo_id": 145875, "url": "https://github.com/tackley/dbdeploy", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 64, "size": 7295, "license": "licensed"}}