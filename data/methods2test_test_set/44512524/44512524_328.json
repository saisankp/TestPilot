{"test_class": {"identifier": "RollingCountTest", "superclass": "", "interfaces": "", "fields": [], "file": "storm/storm-benchmark/src/test/java/storm/benchmark/benchmarks/RollingCountTest.java"}, "test_case": {"identifier": "componentParallelismCouldBeSetThroughConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void componentParallelismCouldBeSetThroughConfig() {\n    StormBenchmark benchmark = new RollingCount();\n    Config config = new Config();\n    config.put(RollingCount.SPOUT_NUM, 4);\n    config.put(RollingCount.SPLIT_NUM, 5);\n    config.put(RollingCount.COUNTER_NUM, 3);\n\n    StormTopology topology = benchmark.getTopology(config);\n    assertThat(topology).isNotNull();\n    TestUtils.verifyParallelism(Utils.getComponentCommon(topology, RollingCount.SPOUT_ID), 4);\n    TestUtils.verifyParallelism(Utils.getComponentCommon(topology, RollingCount.SPLIT_ID), 5);\n    TestUtils.verifyParallelism(Utils.getComponentCommon(topology, RollingCount.COUNTER_ID), 3);\n  }", "signature": "void componentParallelismCouldBeSetThroughConfig()", "full_signature": "@Test public void componentParallelismCouldBeSetThroughConfig()", "class_method_signature": "RollingCountTest.componentParallelismCouldBeSetThroughConfig()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "getTopology", "isNotNull", "assertThat", "verifyParallelism", "getComponentCommon", "verifyParallelism", "getComponentCommon", "verifyParallelism", "getComponentCommon"]}, "focal_class": {"identifier": "RollingCount", "superclass": "extends StormBenchmark", "interfaces": "", "fields": [{"original_string": "private static final String WINDOW_LENGTH = \"window.length\";", "modifier": "private static final", "type": "String", "declarator": "WINDOW_LENGTH = \"window.length\"", "var_name": "WINDOW_LENGTH"}, {"original_string": "private static final String EMIT_FREQ = \"emit.frequency\";", "modifier": "private static final", "type": "String", "declarator": "EMIT_FREQ = \"emit.frequency\"", "var_name": "EMIT_FREQ"}, {"original_string": "public static final String SPOUT_ID = \"spout\";", "modifier": "public static final", "type": "String", "declarator": "SPOUT_ID = \"spout\"", "var_name": "SPOUT_ID"}, {"original_string": "public static final String SPOUT_NUM = \"component.spout_num\";", "modifier": "public static final", "type": "String", "declarator": "SPOUT_NUM = \"component.spout_num\"", "var_name": "SPOUT_NUM"}, {"original_string": "public static final String SPLIT_ID = \"split\";", "modifier": "public static final", "type": "String", "declarator": "SPLIT_ID = \"split\"", "var_name": "SPLIT_ID"}, {"original_string": "public static final String SPLIT_NUM = \"component.split_bolt_num\";", "modifier": "public static final", "type": "String", "declarator": "SPLIT_NUM = \"component.split_bolt_num\"", "var_name": "SPLIT_NUM"}, {"original_string": "public static final String COUNTER_ID = \"rolling_count\";", "modifier": "public static final", "type": "String", "declarator": "COUNTER_ID = \"rolling_count\"", "var_name": "COUNTER_ID"}, {"original_string": "public static final String COUNTER_NUM = \"component.rolling_count_bolt_num\";", "modifier": "public static final", "type": "String", "declarator": "COUNTER_NUM = \"component.rolling_count_bolt_num\"", "var_name": "COUNTER_NUM"}, {"original_string": "public static final int DEFAULT_SPOUT_NUM = 4;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_SPOUT_NUM = 4", "var_name": "DEFAULT_SPOUT_NUM"}, {"original_string": "public static final int DEFAULT_SP_BOLT_NUM = 8;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_SP_BOLT_NUM = 8", "var_name": "DEFAULT_SP_BOLT_NUM"}, {"original_string": "public static final int DEFAULT_RC_BOLT_NUM = 8;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_RC_BOLT_NUM = 8", "var_name": "DEFAULT_RC_BOLT_NUM"}, {"original_string": "private IRichSpout spout;", "modifier": "private", "type": "IRichSpout", "declarator": "spout", "var_name": "spout"}], "methods": [{"identifier": "getTopology", "parameters": "(Config config)", "modifiers": "@Override public", "return": "StormTopology", "signature": "StormTopology getTopology(Config config)", "full_signature": "@Override public StormTopology getTopology(Config config)", "class_method_signature": "RollingCount.getTopology(Config config)", "testcase": false, "constructor": false}], "file": "storm/storm-benchmark/src/main/java/storm/benchmark/benchmarks/RollingCount.java"}, "focal_method": {"identifier": "getTopology", "parameters": "(Config config)", "modifiers": "@Override public", "return": "StormTopology", "body": "@Override\n  public StormTopology getTopology(Config config) {\n\n    final int spoutNum = BenchmarkUtils.getInt(config, SPOUT_NUM, DEFAULT_SPOUT_NUM);\n    final int spBoltNum = BenchmarkUtils.getInt(config, SPLIT_NUM, DEFAULT_SP_BOLT_NUM);\n    final int rcBoltNum = BenchmarkUtils.getInt(config, COUNTER_NUM, DEFAULT_RC_BOLT_NUM);\n    final int windowLength = BenchmarkUtils.getInt(config, WINDOW_LENGTH,\n            RollingBolt.DEFAULT_SLIDING_WINDOW_IN_SECONDS);\n    final int emitFreq = BenchmarkUtils.getInt(config, EMIT_FREQ,\n            RollingBolt.DEFAULT_EMIT_FREQUENCY_IN_SECONDS);\n\n    spout = new FileReadSpout(BenchmarkUtils.ifAckEnabled(config));\n\n    TopologyBuilder builder = new TopologyBuilder();\n\n    builder.setSpout(SPOUT_ID, spout, spoutNum);\n    builder.setBolt(SPLIT_ID, new WordCount.SplitSentence(), spBoltNum)\n            .localOrShuffleGrouping(SPOUT_ID);\n    builder.setBolt(COUNTER_ID, new RollingCountBolt(windowLength, emitFreq), rcBoltNum)\n            .fieldsGrouping(SPLIT_ID, new Fields(WordCount.SplitSentence.FIELDS));\n    return builder.createTopology();\n  }", "signature": "StormTopology getTopology(Config config)", "full_signature": "@Override public StormTopology getTopology(Config config)", "class_method_signature": "RollingCount.getTopology(Config config)", "testcase": false, "constructor": false, "invocations": ["getInt", "getInt", "getInt", "getInt", "getInt", "ifAckEnabled", "setSpout", "localOrShuffleGrouping", "setBolt", "fieldsGrouping", "setBolt", "createTopology"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}