{"test_class": {"identifier": "NormalizationTrainerTest", "superclass": "extends TrainerTest", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/preprocessing/normalization/NormalizationTrainerTest.java"}, "test_case": {"identifier": "testFit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFit() {\n        Map<Integer, Vector> data = new HashMap<>();\n        data.put(1, VectorUtils.of(2, 4, 1));\n        data.put(2, VectorUtils.of(1, 8, 22));\n        data.put(3, VectorUtils.of(4, 10, 100));\n        data.put(4, VectorUtils.of(0, 22, 300));\n\n        DatasetBuilder<Integer, Vector> datasetBuilder = new LocalDatasetBuilder<>(data, parts);\n\n        final Vectorizer<Integer, Vector, Integer, Double> vectorizer = new DummyVectorizer<>(0, 1, 2);\n\n        NormalizationTrainer<Integer, Vector> normalizationTrainer = new NormalizationTrainer<Integer, Vector>()\n            .withP(3);\n\n        assertEquals(3., normalizationTrainer.p(), 0);\n\n        NormalizationPreprocessor<Integer, Vector> preprocessor = normalizationTrainer.fit(\n            TestUtils.testEnvBuilder(),\n            datasetBuilder,\n            vectorizer\n        );\n\n        assertEquals(normalizationTrainer.p(), preprocessor.p(), 0);\n\n        assertArrayEquals(new double[] {0.125, 0.99, 0.125}, preprocessor.apply(5, VectorUtils.of(1., 8., 1.)).features().asArray(), 1e-2);\n    }", "signature": "void testFit()", "full_signature": "@Test public void testFit()", "class_method_signature": "NormalizationTrainerTest.testFit()", "testcase": true, "constructor": false, "invocations": ["put", "of", "put", "of", "put", "of", "put", "of", "withP", "assertEquals", "p", "fit", "testEnvBuilder", "assertEquals", "p", "p", "assertArrayEquals", "asArray", "features", "apply", "of"]}, "focal_class": {"identifier": "NormalizationTrainer", "superclass": "", "interfaces": "implements PreprocessingTrainer<K, V>", "fields": [{"original_string": "private int p = 2;", "modifier": "private", "type": "int", "declarator": "p = 2", "var_name": "p"}], "methods": [{"identifier": "fit", "parameters": "(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "modifiers": "@Override public", "return": "NormalizationPreprocessor<K, V>", "signature": "NormalizationPreprocessor<K, V> fit(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "full_signature": "@Override public NormalizationPreprocessor<K, V> fit(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "class_method_signature": "NormalizationTrainer.fit(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "testcase": false, "constructor": false}, {"identifier": "p", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double p()", "full_signature": "public double p()", "class_method_signature": "NormalizationTrainer.p()", "testcase": false, "constructor": false}, {"identifier": "withP", "parameters": "(double p)", "modifiers": "public", "return": "NormalizationTrainer<K, V>", "signature": "NormalizationTrainer<K, V> withP(double p)", "full_signature": "public NormalizationTrainer<K, V> withP(double p)", "class_method_signature": "NormalizationTrainer.withP(double p)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/preprocessing/normalization/NormalizationTrainer.java"}, "focal_method": {"identifier": "fit", "parameters": "(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "modifiers": "@Override public", "return": "NormalizationPreprocessor<K, V>", "body": "@Override public NormalizationPreprocessor<K, V> fit(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor) {\n        return new NormalizationPreprocessor<>(p, basePreprocessor);\n    }", "signature": "NormalizationPreprocessor<K, V> fit(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "full_signature": "@Override public NormalizationPreprocessor<K, V> fit(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "class_method_signature": "NormalizationTrainer.fit(\n        LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}