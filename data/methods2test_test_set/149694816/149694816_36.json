{"test_class": {"identifier": "CallStackTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final ProjectFile projectFile = new ProjectFile();", "modifier": "protected final", "type": "ProjectFile", "declarator": "projectFile = new ProjectFile()", "var_name": "projectFile"}, {"original_string": "protected final Project project = new Project(randomUUID().toString(), projectFile);", "modifier": "protected final", "type": "Project", "declarator": "project = new Project(randomUUID().toString(), projectFile)", "var_name": "project"}, {"original_string": "protected final Resource resource1 = new Resource(project, randomUUID().toString());", "modifier": "protected final", "type": "Resource", "declarator": "resource1 = new Resource(project, randomUUID().toString())", "var_name": "resource1"}, {"original_string": "protected final Resource resource2 = new Resource(project, randomUUID().toString());", "modifier": "protected final", "type": "Resource", "declarator": "resource2 = new Resource(project, randomUUID().toString())", "var_name": "resource2"}], "file": "core/src/test/java/ship/build/CallStackTest.java"}, "test_case": {"identifier": "testEnter", "parameters": "()", "modifiers": "@Test(expected = CyclicDependencyException.class) public", "return": "void", "body": "@Test(expected = CyclicDependencyException.class)\n  public void testEnter() {\n    final CallStack callStack = new CallStack();\n    callStack.enter(resource1);\n    callStack.enter(resource2);\n    callStack.enter(resource2);\n  }", "signature": "void testEnter()", "full_signature": "@Test(expected = CyclicDependencyException.class) public void testEnter()", "class_method_signature": "CallStackTest.testEnter()", "testcase": true, "constructor": false, "invocations": ["enter", "enter", "enter"]}, "focal_class": {"identifier": "CallStack", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected final transient Logger logger = getLogger(getClass());", "modifier": "protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}, {"original_string": "protected final Stack<Resource> stack = new Stack<>();", "modifier": "protected final", "type": "Stack<Resource>", "declarator": "stack = new Stack<>()", "var_name": "stack"}], "methods": [{"identifier": "enter", "parameters": "(final Resource resource)", "modifiers": "public", "return": "void", "signature": "void enter(final Resource resource)", "full_signature": "public void enter(final Resource resource)", "class_method_signature": "CallStack.enter(final Resource resource)", "testcase": false, "constructor": false}, {"identifier": "exit", "parameters": "(final Resource resource)", "modifiers": "public", "return": "void", "signature": "void exit(final Resource resource)", "full_signature": "public void exit(final Resource resource)", "class_method_signature": "CallStack.exit(final Resource resource)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "CallStack.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/ship/build/CallStack.java"}, "focal_method": {"identifier": "enter", "parameters": "(final Resource resource)", "modifiers": "public", "return": "void", "body": "public void enter(final Resource resource) {\n    if (stack.contains(resource)) {\n      throw new CyclicDependencyException(resource.toString() + \" duplicated in \" + this);\n    }\n    stack.push(resource);\n  }", "signature": "void enter(final Resource resource)", "full_signature": "public void enter(final Resource resource)", "class_method_signature": "CallStack.enter(final Resource resource)", "testcase": false, "constructor": false, "invocations": ["contains", "toString", "push"]}, "repository": {"repo_id": 149694816, "url": "https://github.com/aergoio/ship", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 11, "size": 1743, "license": "licensed"}}