{"test_class": {"identifier": "ReverseLinkedListTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ReverseLinkedList reverseLinkedList;", "modifier": "private", "type": "ReverseLinkedList", "declarator": "reverseLinkedList", "var_name": "reverseLinkedList"}], "file": "algs/src/test/java/com/github/pedrovgs/problem22/ReverseLinkedListTest.java"}, "test_case": {"identifier": "shouldAcceptLinkedListWithJustOneElementIterative", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldAcceptLinkedListWithJustOneElementIterative() {\n    ListNode<Integer> head = new ListNode<Integer>(1);\n\n    assertEquals(head, reverseLinkedList.reverseIterative(head));\n  }", "signature": "void shouldAcceptLinkedListWithJustOneElementIterative()", "full_signature": "@Test public void shouldAcceptLinkedListWithJustOneElementIterative()", "class_method_signature": "ReverseLinkedListTest.shouldAcceptLinkedListWithJustOneElementIterative()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "reverseIterative"]}, "focal_class": {"identifier": "ReverseLinkedList", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "reverseIterative", "parameters": "(ListNode list)", "modifiers": "public", "return": "ListNode", "signature": "ListNode reverseIterative(ListNode list)", "full_signature": "public ListNode reverseIterative(ListNode list)", "class_method_signature": "ReverseLinkedList.reverseIterative(ListNode list)", "testcase": false, "constructor": false}, {"identifier": "reverseRecursive", "parameters": "(ListNode list)", "modifiers": "public", "return": "ListNode<Integer>", "signature": "ListNode<Integer> reverseRecursive(ListNode list)", "full_signature": "public ListNode<Integer> reverseRecursive(ListNode list)", "class_method_signature": "ReverseLinkedList.reverseRecursive(ListNode list)", "testcase": false, "constructor": false}, {"identifier": "reverseRecursiveInner", "parameters": "(ListNode head)", "modifiers": "private", "return": "ListNode<Integer>", "signature": "ListNode<Integer> reverseRecursiveInner(ListNode head)", "full_signature": "private ListNode<Integer> reverseRecursiveInner(ListNode head)", "class_method_signature": "ReverseLinkedList.reverseRecursiveInner(ListNode head)", "testcase": false, "constructor": false}, {"identifier": "validateInput", "parameters": "(ListNode list)", "modifiers": "private", "return": "void", "signature": "void validateInput(ListNode list)", "full_signature": "private void validateInput(ListNode list)", "class_method_signature": "ReverseLinkedList.validateInput(ListNode list)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem22/ReverseLinkedList.java"}, "focal_method": {"identifier": "reverseIterative", "parameters": "(ListNode list)", "modifiers": "public", "return": "ListNode", "body": "public ListNode reverseIterative(ListNode list) {\n    validateInput(list);\n\n    if (list.getNext() == null) {\n      return list;\n    }\n\n    ListNode head = null;\n    ListNode current = list;\n    while (current != null) {\n      ListNode save = current;\n      current = current.getNext();\n      save.setNext(head);\n      head = save;\n    }\n    return head;\n  }", "signature": "ListNode reverseIterative(ListNode list)", "full_signature": "public ListNode reverseIterative(ListNode list)", "class_method_signature": "ReverseLinkedList.reverseIterative(ListNode list)", "testcase": false, "constructor": false, "invocations": ["validateInput", "getNext", "getNext", "setNext"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}