{"test_class": {"identifier": "Ed25519VerifyTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/subtle/Ed25519VerifyTest.java"}, "test_case": {"identifier": "testVerificationWithWycheproofVectors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testVerificationWithWycheproofVectors() throws Exception {\n    JSONObject json =\n        WycheproofTestUtil.readJson(\"../wycheproof/testvectors/eddsa_test.json\");\n    int errors = 0;\n    JSONArray testGroups = json.getJSONArray(\"testGroups\");\n    for (int i = 0; i < testGroups.length(); i++) {\n      JSONObject group = testGroups.getJSONObject(i);\n      JSONObject key = group.getJSONObject(\"key\");\n      byte[] publicKey = Hex.decode(key.getString(\"pk\"));\n      JSONArray tests = group.getJSONArray(\"tests\");\n      for (int j = 0; j < tests.length(); j++) {\n        JSONObject testcase = tests.getJSONObject(j);\n        String tcId =\n            String.format(\n                \"testcase %d (%s)\", testcase.getInt(\"tcId\"), testcase.getString(\"comment\"));\n        byte[] msg = getMessage(testcase);\n        byte[] sig = Hex.decode(testcase.getString(\"sig\"));\n        String result = testcase.getString(\"result\");\n        Ed25519Verify verifier = new Ed25519Verify(publicKey);\n        try {\n          verifier.verify(sig, msg);\n          if (result.equals(\"invalid\")) {\n            System.out.printf(\"FAIL %s: accepting invalid signature%n\", tcId);\n            errors++;\n          }\n        } catch (GeneralSecurityException ex) {\n          if (result.equals(\"valid\")) {\n            System.out.printf(\"FAIL %s: rejecting valid signature, exception: %s%n\", tcId, ex);\n            errors++;\n          }\n        }\n      }\n    }\n    assertEquals(0, errors);\n  }", "signature": "void testVerificationWithWycheproofVectors()", "full_signature": "@Test public void testVerificationWithWycheproofVectors()", "class_method_signature": "Ed25519VerifyTest.testVerificationWithWycheproofVectors()", "testcase": true, "constructor": false, "invocations": ["readJson", "getJSONArray", "length", "getJSONObject", "getJSONObject", "decode", "getString", "getJSONArray", "length", "getJSONObject", "format", "getInt", "getString", "getMessage", "decode", "getString", "getString", "verify", "equals", "printf", "equals", "printf", "assertEquals"]}, "focal_class": {"identifier": "Ed25519Verify", "superclass": "", "interfaces": "implements PublicKeyVerify", "fields": [{"original_string": "public static final int PUBLIC_KEY_LEN = Field25519.FIELD_LEN;", "modifier": "public static final", "type": "int", "declarator": "PUBLIC_KEY_LEN = Field25519.FIELD_LEN", "var_name": "PUBLIC_KEY_LEN"}, {"original_string": "public static final int SIGNATURE_LEN = Field25519.FIELD_LEN * 2;", "modifier": "public static final", "type": "int", "declarator": "SIGNATURE_LEN = Field25519.FIELD_LEN * 2", "var_name": "SIGNATURE_LEN"}, {"original_string": "private final ImmutableByteArray publicKey;", "modifier": "private final", "type": "ImmutableByteArray", "declarator": "publicKey", "var_name": "publicKey"}], "methods": [{"identifier": "Ed25519Verify", "parameters": "(final byte[] publicKey)", "modifiers": "public", "return": "", "signature": " Ed25519Verify(final byte[] publicKey)", "full_signature": "public  Ed25519Verify(final byte[] publicKey)", "class_method_signature": "Ed25519Verify.Ed25519Verify(final byte[] publicKey)", "testcase": false, "constructor": true}, {"identifier": "verify", "parameters": "(byte[] signature, byte[] data)", "modifiers": "@Override public", "return": "void", "signature": "void verify(byte[] signature, byte[] data)", "full_signature": "@Override public void verify(byte[] signature, byte[] data)", "class_method_signature": "Ed25519Verify.verify(byte[] signature, byte[] data)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/subtle/Ed25519Verify.java"}, "focal_method": {"identifier": "verify", "parameters": "(byte[] signature, byte[] data)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void verify(byte[] signature, byte[] data) throws GeneralSecurityException {\n    if (signature.length != SIGNATURE_LEN) {\n      throw new GeneralSecurityException(\n          String.format(\"The length of the signature is not %s.\", SIGNATURE_LEN));\n    }\n    if (!Ed25519.verify(data, signature, publicKey.getBytes())) {\n      throw new GeneralSecurityException(\"Signature check failed.\");\n    }\n  }", "signature": "void verify(byte[] signature, byte[] data)", "full_signature": "@Override public void verify(byte[] signature, byte[] data)", "class_method_signature": "Ed25519Verify.verify(byte[] signature, byte[] data)", "testcase": false, "constructor": false, "invocations": ["format", "verify", "getBytes"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}