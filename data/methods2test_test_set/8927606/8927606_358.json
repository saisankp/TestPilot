{"test_class": {"identifier": "SqlTranslatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String source;", "modifier": "private", "type": "String", "declarator": "source", "var_name": "source"}, {"original_string": "private String target;", "modifier": "private", "type": "String", "declarator": "target", "var_name": "target"}, {"original_string": "private String query;", "modifier": "private", "type": "String", "declarator": "query", "var_name": "query"}, {"original_string": "private String expected;", "modifier": "private", "type": "String", "declarator": "expected", "var_name": "expected"}], "file": "core/src/test/java/nl/nn/adapterframework/jdbc/dbms/SqlTranslatorTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void test() throws Throwable {\n\t\ttry {\n\t\t\tSqlTranslator translator = new SqlTranslator(source, target);\n\t\t\tString out = translator.translate(query);\n\n\t\t\tSystem.out.println(\"IN : \" + query);\n\t\t\tSystem.out.println(\"OUT: \" + out);\n\t\t\tassertEquals(query, expected, out);\n\t\t} catch (Throwable t) {\n\t\t\tif (checkExceptionClass(t, expected)) {\n\t\t\t\tAssert.assertTrue(true);\n\t\t\t} else {\n\t\t\t\tthrow t;\n\t\t\t}\n\t\t}\n\t}", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "SqlTranslatorTest.test()", "testcase": true, "constructor": false, "invocations": ["translate", "println", "println", "assertEquals", "checkExceptionClass", "assertTrue"]}, "focal_class": {"identifier": "SqlTranslator", "superclass": "", "interfaces": "implements ISqlTranslator", "fields": [{"original_string": "private final Logger log = LogUtil.getLogger(this);", "modifier": "private final", "type": "Logger", "declarator": "log = LogUtil.getLogger(this)", "var_name": "log"}, {"original_string": "private static final String PATTERN_FILE = \"SqlTranslationPatterns.properties\";", "modifier": "private static final", "type": "String", "declarator": "PATTERN_FILE = \"SqlTranslationPatterns.properties\"", "var_name": "PATTERN_FILE"}, {"original_string": "private Map<String,Pattern> sources;", "modifier": "private", "type": "Map<String,Pattern>", "declarator": "sources", "var_name": "sources"}, {"original_string": "private Map<String,String>  targets;", "modifier": "private", "type": "Map<String,String>", "declarator": "targets", "var_name": "targets"}, {"original_string": "private String target;", "modifier": "private", "type": "String", "declarator": "target", "var_name": "target"}, {"original_string": "private boolean configured=false;", "modifier": "private", "type": "boolean", "declarator": "configured=false", "var_name": "configured"}], "methods": [{"identifier": "SqlTranslator", "parameters": "(String source, String target)", "modifiers": "public", "return": "", "signature": " SqlTranslator(String source, String target)", "full_signature": "public  SqlTranslator(String source, String target)", "class_method_signature": "SqlTranslator.SqlTranslator(String source, String target)", "testcase": false, "constructor": true}, {"identifier": "canConvert", "parameters": "(String from, String to)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canConvert(String from, String to)", "full_signature": "@Override public boolean canConvert(String from, String to)", "class_method_signature": "SqlTranslator.canConvert(String from, String to)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(String original)", "modifiers": "@Override public", "return": "String", "signature": "String translate(String original)", "full_signature": "@Override public String translate(String original)", "class_method_signature": "SqlTranslator.translate(String original)", "testcase": false, "constructor": false}, {"identifier": "toPattern", "parameters": "(String str)", "modifiers": "protected", "return": "Pattern", "signature": "Pattern toPattern(String str)", "full_signature": "protected Pattern toPattern(String str)", "class_method_signature": "SqlTranslator.toPattern(String str)", "testcase": false, "constructor": false}, {"identifier": "readPatterns", "parameters": "(String sourceDialect, String targetDialect)", "modifiers": "private", "return": "boolean", "signature": "boolean readPatterns(String sourceDialect, String targetDialect)", "full_signature": "private boolean readPatterns(String sourceDialect, String targetDialect)", "class_method_signature": "SqlTranslator.readPatterns(String sourceDialect, String targetDialect)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/jdbc/dbms/SqlTranslator.java"}, "focal_method": {"identifier": "translate", "parameters": "(String original)", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String translate(String original) {\n\t\tString query = original;\n\t\tif (sources!=null) {\n\t\t\tfor (String label:sources.keySet()) {\n\t\t\t\tMatcher matcher = sources.get(label).matcher(query);\n\t\t\t\tif (matcher.find()) {\n\t\t\t\t\tif (log.isTraceEnabled()) log.trace(String.format(\"Found a match for label [%s] pattern [%s]\",label, sources.get(label)));\n\t\t\t\t\tString replacement = targets.get(label);\n\t\t\t\t\tif (StringUtils.isNotEmpty(replacement)) {\n\t\t\t\t\t\tquery = matcher.replaceAll(replacement);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tquery = matcher.replaceAll(\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (StringUtils.isEmpty(query)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn query;\n\t}", "signature": "String translate(String original)", "full_signature": "@Override public String translate(String original)", "class_method_signature": "SqlTranslator.translate(String original)", "testcase": false, "constructor": false, "invocations": ["keySet", "matcher", "get", "find", "isTraceEnabled", "trace", "format", "get", "get", "isNotEmpty", "replaceAll", "replaceAll", "isEmpty"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}