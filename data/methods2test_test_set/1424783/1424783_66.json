{"test_class": {"identifier": "CatmullRomInterpolatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "androidplot-core/src/test/java/com/androidplot/xy/CatmullRomInterpolatorTest.java"}, "test_case": {"identifier": "interpolate_invalidPointsPerSegment_throwsIllegalArgumentException", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void interpolate_invalidPointsPerSegment_throwsIllegalArgumentException() {\n        final XYSeries series = mock(XYSeries.class);\n        final CatmullRomInterpolator.Params params =\n                new CatmullRomInterpolator.Params(1, CatmullRomInterpolator.Type.Centripetal);\n\n        new CatmullRomInterpolator().interpolate(series, params);\n    }", "signature": "void interpolate_invalidPointsPerSegment_throwsIllegalArgumentException()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void interpolate_invalidPointsPerSegment_throwsIllegalArgumentException()", "class_method_signature": "CatmullRomInterpolatorTest.interpolate_invalidPointsPerSegment_throwsIllegalArgumentException()", "testcase": true, "constructor": false, "invocations": ["mock", "interpolate"]}, "focal_class": {"identifier": "CatmullRomInterpolator", "superclass": "", "interfaces": "implements Interpolator<CatmullRomInterpolator.Params>", "fields": [], "methods": [{"identifier": "interpolate", "parameters": "(XYSeries series, Params params)", "modifiers": "@Override public", "return": "List<XYCoords>", "signature": "List<XYCoords> interpolate(XYSeries series, Params params)", "full_signature": "@Override public List<XYCoords> interpolate(XYSeries series, Params params)", "class_method_signature": "CatmullRomInterpolator.interpolate(XYSeries series, Params params)", "testcase": false, "constructor": false}, {"identifier": "interpolate", "parameters": "(XYSeries series, int index, Params params)", "modifiers": "protected", "return": "List<XYCoords>", "signature": "List<XYCoords> interpolate(XYSeries series, int index, Params params)", "full_signature": "protected List<XYCoords> interpolate(XYSeries series, int index, Params params)", "class_method_signature": "CatmullRomInterpolator.interpolate(XYSeries series, int index, Params params)", "testcase": false, "constructor": false}, {"identifier": "interpolate", "parameters": "(double[] p, double[] time, double t)", "modifiers": "protected static", "return": "double", "signature": "double interpolate(double[] p, double[] time, double t)", "full_signature": "protected static double interpolate(double[] p, double[] time, double t)", "class_method_signature": "CatmullRomInterpolator.interpolate(double[] p, double[] time, double t)", "testcase": false, "constructor": false}], "file": "androidplot-core/src/main/java/com/androidplot/xy/CatmullRomInterpolator.java"}, "focal_method": {"identifier": "interpolate", "parameters": "(XYSeries series, Params params)", "modifiers": "@Override public", "return": "List<XYCoords>", "body": "@Override\n    public List<XYCoords> interpolate(XYSeries series, Params params) {\n        if (params.getPointPerSegment() < 2) {\n            throw new IllegalArgumentException(\n                    \"pointsPerSegment must be greater than 2, since 2 points is just the linear segment.\");\n        }\n\n        // Cannot interpolate curves given only two points.  Two points\n        // is best represented as a simple line segment.\n        if (series.size() < 3) {\n            throw new IllegalArgumentException(\"Cannot interpolate a series with fewer than 3 vertices.\");\n        }\n\n        // Get the change in x and y between the first and second coordinates.\n        double dx = series.getX(1).doubleValue() - series.getX(0).doubleValue();\n        double dy = series.getY(1).doubleValue() - series.getY(0).doubleValue();\n\n        // Then using the change, extrapolate backwards to find a control point.\n        double x1 = series.getX(0).doubleValue() - dx;\n        double y1 = series.getY(0).doubleValue() - dy;\n\n        // Actually create the start point from the extrapolated values.\n        XYCoords start = new XYCoords(x1, y1);\n\n        // Repeat for the end control point.\n        int n = series.size() -1;\n        dx = series.getX(n).doubleValue() - series.getX(n-1).doubleValue();\n        dy = series.getY(n).doubleValue() - series.getY(n - 1).doubleValue();\n        double xn = series.getX(n).doubleValue() + dx;\n        double yn = series.getY(n).doubleValue() + dy;\n        XYCoords end = new XYCoords(xn, yn);\n\n        // TODO: figure out whether this extra control-point synthesis is\n        // TODO: really necessary and either remove the above or fix the below.\n        // insert the start control point at the start of the vertices list.\n        // TODO vertices.add(0, start);\n\n        // append the end control ponit to the end of the vertices list.\n        // TODO vertices.add(end);\n        //}\n\n        ExtrapolatedXYSeries extrapolatedXYSeries = new ExtrapolatedXYSeries(series, start, end);\n\n        // Dimension a result list of coordinates.\n        List<XYCoords> result = new ArrayList<>();\n\n        // When looping, remember that each cycle requires 4 points, starting\n        // with i and ending with i+3.  So we don't loop through all the points.\n        for (int i = 0; i < extrapolatedXYSeries.size() - 3; i++) {\n\n            // Actually calculate the Catmull-Rom curve for one segment.\n            List<XYCoords> points = interpolate(extrapolatedXYSeries, i, params);\n\n            // Since the middle points are added twice, once for each bordering\n            // segment, we only add the 0 index result point for the first\n            // segment.  Otherwise we will have duplicate points.\n            if (result.size() > 0) {\n                points.remove(0);\n            }\n\n            // Add the coordinates for the segment to the result list.\n            result.addAll(points);\n        }\n        return result;\n\n    }", "signature": "List<XYCoords> interpolate(XYSeries series, Params params)", "full_signature": "@Override public List<XYCoords> interpolate(XYSeries series, Params params)", "class_method_signature": "CatmullRomInterpolator.interpolate(XYSeries series, Params params)", "testcase": false, "constructor": false, "invocations": ["getPointPerSegment", "size", "doubleValue", "getX", "doubleValue", "getX", "doubleValue", "getY", "doubleValue", "getY", "doubleValue", "getX", "doubleValue", "getY", "size", "doubleValue", "getX", "doubleValue", "getX", "doubleValue", "getY", "doubleValue", "getY", "doubleValue", "getX", "doubleValue", "getY", "size", "interpolate", "size", "remove", "addAll"]}, "repository": {"repo_id": 1424783, "url": "https://github.com/halfhp/androidplot", "language": "Java", "is_fork": false, "fork_count": 129, "stargazer_count": 369, "size": 7178, "license": "licensed"}}