{"test_class": {"identifier": "JsonUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(JsonUtilsTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JsonUtilsTest.class)", "var_name": "LOG"}, {"original_string": "@Rule\n    public TestRule watcher = new TestWatcher() {\n        @Override\n        protected void starting(Description description) {\n            LOG.info(\"executing test {}\", description.toString());\n        }\n    };", "modifier": "@Rule\n    public", "type": "TestRule", "declarator": "watcher = new TestWatcher() {\n        @Override\n        protected void starting(Description description) {\n            LOG.info(\"executing test {}\", description.toString());\n        }\n    }", "var_name": "watcher"}], "file": "commons/src/test/java/org/restheart/utils/JsonUtilsTest.java"}, "test_case": {"identifier": "testParseEmptyString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseEmptyString() {\n        BsonValue parsed = JsonUtils.parse(\"''\");\n\n        Assert.assertTrue(parsed.isString());\n        Assert.assertEquals(parsed.asString(), new BsonString(\"\"));\n    }", "signature": "void testParseEmptyString()", "full_signature": "@Test public void testParseEmptyString()", "class_method_signature": "JsonUtilsTest.testParseEmptyString()", "testcase": true, "constructor": false, "invocations": ["parse", "assertTrue", "isString", "assertEquals", "asString"]}, "focal_class": {"identifier": "JsonUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Logger LOGGER = LoggerFactory.getLogger(JsonUtils.class);", "modifier": "static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(JsonUtils.class)", "var_name": "LOGGER"}, {"original_string": "private static final BsonArrayCodec BSON_ARRAY_CODEC = new BsonArrayCodec(\n            CodecRegistries.fromProviders(\n                    new BsonValueCodecProvider()));", "modifier": "private static final", "type": "BsonArrayCodec", "declarator": "BSON_ARRAY_CODEC = new BsonArrayCodec(\n            CodecRegistries.fromProviders(\n                    new BsonValueCodecProvider()))", "var_name": "BSON_ARRAY_CODEC"}, {"original_string": "private static final String ESCAPED_DOLLAR = \"_$\";", "modifier": "private static final", "type": "String", "declarator": "ESCAPED_DOLLAR = \"_$\"", "var_name": "ESCAPED_DOLLAR"}, {"original_string": "private static final String ESCAPED_DOT = \"::\";", "modifier": "private static final", "type": "String", "declarator": "ESCAPED_DOT = \"::\"", "var_name": "ESCAPED_DOT"}, {"original_string": "private static final String DOLLAR = \"$\";", "modifier": "private static final", "type": "String", "declarator": "DOLLAR = \"$\"", "var_name": "DOLLAR"}, {"original_string": "private static final String _UPDATE_OPERATORS[] = {\n        \"$inc\", \"$mul\", \"$rename\", // Field Update Operators\n        \"$setOnInsert\", \"$set\", \"$unset\",\n        \"$min\", \"$max\", \"$currentDate\",\n        \"$\", \"$[]\", \"$addToSet\", \"$pop\", \"$pullAll\", // Array Update Operators\n        \"$pull\", \"$pushAll\", \"$push\",\n        \"$each\", \"$position\", \"$slice\", \"$sort\",\n        \"$bit\", // Bitwise Update Operator\n        \"$isolated\" // Isolation Update Operator\n    };", "modifier": "private static final", "type": "String", "declarator": "_UPDATE_OPERATORS[] = {\n        \"$inc\", \"$mul\", \"$rename\", // Field Update Operators\n        \"$setOnInsert\", \"$set\", \"$unset\",\n        \"$min\", \"$max\", \"$currentDate\",\n        \"$\", \"$[]\", \"$addToSet\", \"$pop\", \"$pullAll\", // Array Update Operators\n        \"$pull\", \"$pushAll\", \"$push\",\n        \"$each\", \"$position\", \"$slice\", \"$sort\",\n        \"$bit\", // Bitwise Update Operator\n        \"$isolated\" // Isolation Update Operator\n    }", "var_name": "_UPDATE_OPERATORS"}, {"original_string": "private static final List<String> UPDATE_OPERATORS\n            = Collections.unmodifiableList(Arrays.asList(_UPDATE_OPERATORS));", "modifier": "private static final", "type": "List<String>", "declarator": "UPDATE_OPERATORS\n            = Collections.unmodifiableList(Arrays.asList(_UPDATE_OPERATORS))", "var_name": "UPDATE_OPERATORS"}], "methods": [{"identifier": "unescapeKeys", "parameters": "(BsonValue json)", "modifiers": "public static", "return": "BsonValue", "signature": "BsonValue unescapeKeys(BsonValue json)", "full_signature": "public static BsonValue unescapeKeys(BsonValue json)", "class_method_signature": "JsonUtils.unescapeKeys(BsonValue json)", "testcase": false, "constructor": false}, {"identifier": "escapeKeys", "parameters": "(BsonValue json, boolean escapeDots)", "modifiers": "public static", "return": "BsonValue", "signature": "BsonValue escapeKeys(BsonValue json, boolean escapeDots)", "full_signature": "public static BsonValue escapeKeys(BsonValue json, boolean escapeDots)", "class_method_signature": "JsonUtils.escapeKeys(BsonValue json, boolean escapeDots)", "testcase": false, "constructor": false}, {"identifier": "getPropsFromPath", "parameters": "(\n            BsonValue root,\n            String path)", "modifiers": "public static", "return": "List<Optional<BsonValue>>", "signature": "List<Optional<BsonValue>> getPropsFromPath(\n            BsonValue root,\n            String path)", "full_signature": "public static List<Optional<BsonValue>> getPropsFromPath(\n            BsonValue root,\n            String path)", "class_method_signature": "JsonUtils.getPropsFromPath(\n            BsonValue root,\n            String path)", "testcase": false, "constructor": false}, {"identifier": "_getPropsFromPath", "parameters": "(\n            BsonValue json,\n            String[] pathTokens,\n            int totalTokensLength)", "modifiers": "private static", "return": "List<Optional<BsonValue>>", "signature": "List<Optional<BsonValue>> _getPropsFromPath(\n            BsonValue json,\n            String[] pathTokens,\n            int totalTokensLength)", "full_signature": "private static List<Optional<BsonValue>> _getPropsFromPath(\n            BsonValue json,\n            String[] pathTokens,\n            int totalTokensLength)", "class_method_signature": "JsonUtils._getPropsFromPath(\n            BsonValue json,\n            String[] pathTokens,\n            int totalTokensLength)", "testcase": false, "constructor": false}, {"identifier": "isAncestorPath", "parameters": "(final String left, final String right)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAncestorPath(final String left, final String right)", "full_signature": "public static boolean isAncestorPath(final String left, final String right)", "class_method_signature": "JsonUtils.isAncestorPath(final String left, final String right)", "testcase": false, "constructor": false}, {"identifier": "countPropsFromPath", "parameters": "(BsonValue root, String path)", "modifiers": "public static", "return": "Integer", "signature": "Integer countPropsFromPath(BsonValue root, String path)", "full_signature": "public static Integer countPropsFromPath(BsonValue root, String path)", "class_method_signature": "JsonUtils.countPropsFromPath(BsonValue root, String path)", "testcase": false, "constructor": false}, {"identifier": "pathFromTokens", "parameters": "(String[] pathTokens)", "modifiers": "private static", "return": "String", "signature": "String pathFromTokens(String[] pathTokens)", "full_signature": "private static String pathFromTokens(String[] pathTokens)", "class_method_signature": "JsonUtils.pathFromTokens(String[] pathTokens)", "testcase": false, "constructor": false}, {"identifier": "subpath", "parameters": "(String[] pathTokens)", "modifiers": "private static", "return": "String[]", "signature": "String[] subpath(String[] pathTokens)", "full_signature": "private static String[] subpath(String[] pathTokens)", "class_method_signature": "JsonUtils.subpath(String[] pathTokens)", "testcase": false, "constructor": false}, {"identifier": "checkType", "parameters": "(Optional<BsonValue> o, String type)", "modifiers": "public static", "return": "boolean", "signature": "boolean checkType(Optional<BsonValue> o, String type)", "full_signature": "public static boolean checkType(Optional<BsonValue> o, String type)", "class_method_signature": "JsonUtils.checkType(Optional<BsonValue> o, String type)", "testcase": false, "constructor": false}, {"identifier": "minify", "parameters": "(String jsonString)", "modifiers": "public static", "return": "String", "signature": "String minify(String jsonString)", "full_signature": "public static String minify(String jsonString)", "class_method_signature": "JsonUtils.minify(String jsonString)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String json)", "modifiers": "public static", "return": "BsonValue", "signature": "BsonValue parse(String json)", "full_signature": "public static BsonValue parse(String json)", "class_method_signature": "JsonUtils.parse(String json)", "testcase": false, "constructor": false}, {"identifier": "getBsonValue", "parameters": "(String json)", "modifiers": "private static", "return": "BsonValue", "signature": "BsonValue getBsonValue(String json)", "full_signature": "private static BsonValue getBsonValue(String json)", "class_method_signature": "JsonUtils.getBsonValue(String json)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(BsonValue bson)", "modifiers": "public static", "return": "String", "signature": "String toJson(BsonValue bson)", "full_signature": "public static String toJson(BsonValue bson)", "class_method_signature": "JsonUtils.toJson(BsonValue bson)", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(BsonValue bson, JsonMode mode)", "modifiers": "public static", "return": "String", "signature": "String toJson(BsonValue bson, JsonMode mode)", "full_signature": "public static String toJson(BsonValue bson, JsonMode mode)", "class_method_signature": "JsonUtils.toJson(BsonValue bson, JsonMode mode)", "testcase": false, "constructor": false}, {"identifier": "getIdAsString", "parameters": "(BsonValue id, boolean quote)", "modifiers": "public static", "return": "String", "signature": "String getIdAsString(BsonValue id, boolean quote)", "full_signature": "public static String getIdAsString(BsonValue id, boolean quote)", "class_method_signature": "JsonUtils.getIdAsString(BsonValue id, boolean quote)", "testcase": false, "constructor": false}, {"identifier": "toBsonDocument", "parameters": "(Map<String, Object> map)", "modifiers": "public static", "return": "BsonDocument", "signature": "BsonDocument toBsonDocument(Map<String, Object> map)", "full_signature": "public static BsonDocument toBsonDocument(Map<String, Object> map)", "class_method_signature": "JsonUtils.toBsonDocument(Map<String, Object> map)", "testcase": false, "constructor": false}, {"identifier": "isUpdateOperator", "parameters": "(String key)", "modifiers": "public static", "return": "boolean", "signature": "boolean isUpdateOperator(String key)", "full_signature": "public static boolean isUpdateOperator(String key)", "class_method_signature": "JsonUtils.isUpdateOperator(String key)", "testcase": false, "constructor": false}, {"identifier": "containsUpdateOperators", "parameters": "(BsonValue json)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsUpdateOperators(BsonValue json)", "full_signature": "public static boolean containsUpdateOperators(BsonValue json)", "class_method_signature": "JsonUtils.containsUpdateOperators(BsonValue json)", "testcase": false, "constructor": false}, {"identifier": "containsUpdateOperators", "parameters": "(BsonValue json,\n            boolean ignoreCurrentDate)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsUpdateOperators(BsonValue json,\n            boolean ignoreCurrentDate)", "full_signature": "public static boolean containsUpdateOperators(BsonValue json,\n            boolean ignoreCurrentDate)", "class_method_signature": "JsonUtils.containsUpdateOperators(BsonValue json,\n            boolean ignoreCurrentDate)", "testcase": false, "constructor": false}, {"identifier": "_containsUpdateOperators", "parameters": "(BsonDocument json,\n            boolean ignoreCurrentDate)", "modifiers": "private static", "return": "boolean", "signature": "boolean _containsUpdateOperators(BsonDocument json,\n            boolean ignoreCurrentDate)", "full_signature": "private static boolean _containsUpdateOperators(BsonDocument json,\n            boolean ignoreCurrentDate)", "class_method_signature": "JsonUtils._containsUpdateOperators(BsonDocument json,\n            boolean ignoreCurrentDate)", "testcase": false, "constructor": false}, {"identifier": "unflatten", "parameters": "(BsonValue json)", "modifiers": "public static", "return": "BsonValue", "signature": "BsonValue unflatten(BsonValue json)", "full_signature": "public static BsonValue unflatten(BsonValue json)", "class_method_signature": "JsonUtils.unflatten(BsonValue json)", "testcase": false, "constructor": false}, {"identifier": "flatten", "parameters": "(BsonDocument json, boolean ignoreUpdateOperators)", "modifiers": "public static", "return": "BsonDocument", "signature": "BsonDocument flatten(BsonDocument json, boolean ignoreUpdateOperators)", "full_signature": "public static BsonDocument flatten(BsonDocument json, boolean ignoreUpdateOperators)", "class_method_signature": "JsonUtils.flatten(BsonDocument json, boolean ignoreUpdateOperators)", "testcase": false, "constructor": false}, {"identifier": "flatten", "parameters": "(String prefix, String key, BsonDocument data, BsonDocument set)", "modifiers": "private static", "return": "void", "signature": "void flatten(String prefix, String key, BsonDocument data, BsonDocument set)", "full_signature": "private static void flatten(String prefix, String key, BsonDocument data, BsonDocument set)", "class_method_signature": "JsonUtils.flatten(String prefix, String key, BsonDocument data, BsonDocument set)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/org/restheart/utils/JsonUtils.java"}, "focal_method": {"identifier": "parse", "parameters": "(String json)", "modifiers": "public static", "return": "BsonValue", "body": "public static BsonValue parse(String json)\n            throws JsonParseException {\n        if (json == null) {\n            return null;\n        }\n\n        String trimmed = json.trim();\n        \n        if (trimmed.isEmpty()) {\n            return null;\n        } else if (trimmed.startsWith(\"{\")) {\n            try {\n                return BsonDocument.parse(json);\n            } catch (BsonInvalidOperationException ex) {\n                // this can happen parsing a bson type, e.g.\n                // {\"$oid\": \"xxxxxxxx\" }\n                // the string starts with { but is not a document\n                return getBsonValue(json);\n            }\n        } else if (trimmed.startsWith(\"[\")) {\n            return BSON_ARRAY_CODEC.decode(\n                    new JsonReader(json),\n                    DecoderContext.builder().build());\n        } else {\n            return getBsonValue(json);\n        }\n    }", "signature": "BsonValue parse(String json)", "full_signature": "public static BsonValue parse(String json)", "class_method_signature": "JsonUtils.parse(String json)", "testcase": false, "constructor": false, "invocations": ["trim", "isEmpty", "startsWith", "parse", "getBsonValue", "startsWith", "decode", "build", "builder", "getBsonValue"]}, "repository": {"repo_id": 26722690, "url": "https://github.com/SoftInstigate/restheart", "stars": 582, "created": "11/16/2014 6:01:01 PM +00:00", "updates": "2020-01-18T15:31:59+00:00", "fork": "False", "license": "licensed"}}