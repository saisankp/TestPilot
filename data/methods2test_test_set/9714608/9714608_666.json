{"test_class": {"identifier": "XMLRoadUtilTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "advanced/gis/gisroadinputoutput/src/test/java/org/arakhne/afc/gis/road/io/XMLRoadUtilTest.java"}, "test_case": {"identifier": "readRoadNetworkElementPathBuilderXMLResources", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void readRoadNetworkElementPathBuilderXMLResources() throws Exception {\n\t\tURL xmlFile = Resources.getResource(XMLRoadUtilTest.class, \"network.xml\"); //$NON-NLS-1$\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\tDocument doc;\n\t\ttry (InputStream is = xmlFile.openStream()) {\n\t\t\tdoc = builder.parse(is);\n\t\t}\n\t\tPathBuilder pathBuilder = new SimplePathBuilder();\n\t\tXMLResources res = new XMLResources(pathBuilder);\n\n\t\tPoint2d p;\n\t\tRoadSegment polyline;\n\n\t\tStandardRoadNetwork network = XMLRoadUtil.readRoadNetwork(doc.getDocumentElement(), pathBuilder, res);\n\n\t\tCollection<? extends RoadSegment> list = network.getRoadSegments();\n\t\tassertEquals(2, list.size());\n\t\tIterator<? extends RoadSegment> segmentIterator = list.iterator();\n\t\tpolyline = segmentIterator.next();\n\n\t\tIterator<Point2d> pts = polyline.pointIterator();\n\t\tp = pts.next();\n\t\tassertEpsilonEquals(1., p.getX());\n\t\tassertEpsilonEquals(2., p.getY());\n\t\tp = pts.next();\n\t\tassertEpsilonEquals(-3., p.getX());\n\t\tassertEpsilonEquals(4., p.getY());\n\t\tp = pts.next();\n\t\tassertEpsilonEquals(5., p.getX());\n\t\tassertEpsilonEquals(-6., p.getY());\n\t\tassertFalse(pts.hasNext());\n\n\t\tassertEquals(\"name1\", polyline.getName()); //$NON-NLS-1$\n\t\tassertEquals(ColorNames.getColorFromName(\"orange\").intValue(), polyline.getAttribute(\"color\", 0xFFFFFF)); //$NON-NLS-1$ //$NON-NLS-2$\n\t\tassertEquals(\"Text\", polyline.getAttribute(\"attr1\", (String) null)); //$NON-NLS-1$ //$NON-NLS-2$\n\n\t\tpolyline = segmentIterator.next();\n\n\t\tpts = polyline.pointIterator();\n\t\tp = pts.next();\n\t\tassertEpsilonEquals(1., p.getX());\n\t\tassertEpsilonEquals(2., p.getY());\n\t\tp = pts.next();\n\t\tassertEpsilonEquals(-1., p.getX());\n\t\tassertEpsilonEquals(-2., p.getY());\n\t\tp = pts.next();\n\t\tassertEpsilonEquals(1., p.getX());\n\t\tassertEpsilonEquals(-2., p.getY());\n\t\tassertFalse(pts.hasNext());\n\n\t\tassertEquals(\"name2\", polyline.getName()); //$NON-NLS-1$\n\t\tassertEquals(ColorNames.getColorFromName(\"red\").intValue(), polyline.getAttribute(\"color\", 0xFFFFFF)); //$NON-NLS-1$ //$NON-NLS-2$\n\t\tassertEquals(\"Text2\", polyline.getAttribute(\"attr2\", (String) null)); //$NON-NLS-1$ //$NON-NLS-2$\n\t}", "signature": "void readRoadNetworkElementPathBuilderXMLResources()", "full_signature": "@Test public void readRoadNetworkElementPathBuilderXMLResources()", "class_method_signature": "XMLRoadUtilTest.readRoadNetworkElementPathBuilderXMLResources()", "testcase": true, "constructor": false, "invocations": ["getResource", "newInstance", "newDocumentBuilder", "openStream", "parse", "readRoadNetwork", "getDocumentElement", "getRoadSegments", "assertEquals", "size", "iterator", "next", "pointIterator", "next", "assertEpsilonEquals", "getX", "assertEpsilonEquals", "getY", "next", "assertEpsilonEquals", "getX", "assertEpsilonEquals", "getY", "next", "assertEpsilonEquals", "getX", "assertEpsilonEquals", "getY", "assertFalse", "hasNext", "assertEquals", "getName", "assertEquals", "intValue", "getColorFromName", "getAttribute", "assertEquals", "getAttribute", "next", "pointIterator", "next", "assertEpsilonEquals", "getX", "assertEpsilonEquals", "getY", "next", "assertEpsilonEquals", "getX", "assertEpsilonEquals", "getY", "next", "assertEpsilonEquals", "getX", "assertEpsilonEquals", "getY", "assertFalse", "hasNext", "assertEquals", "getName", "assertEquals", "intValue", "getColorFromName", "getAttribute", "assertEquals", "getAttribute"]}, "focal_class": {"identifier": "XMLRoadUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String NODE_ROAD = \"road\";", "modifier": "public static final", "type": "String", "declarator": "NODE_ROAD = \"road\"", "var_name": "NODE_ROAD"}, {"original_string": "public static final String ATTR_HEIGHT = \"height\";", "modifier": "public static final", "type": "String", "declarator": "ATTR_HEIGHT = \"height\"", "var_name": "ATTR_HEIGHT"}], "methods": [{"identifier": "XMLRoadUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " XMLRoadUtil()", "full_signature": "private  XMLRoadUtil()", "class_method_signature": "XMLRoadUtil.XMLRoadUtil()", "testcase": false, "constructor": true}, {"identifier": "writeRoadPolyline", "parameters": "(RoadPolyline primitive, XMLBuilder builder,\n\t\t\tXMLResources resources)", "modifiers": "public static", "return": "Element", "signature": "Element writeRoadPolyline(RoadPolyline primitive, XMLBuilder builder,\n\t\t\tXMLResources resources)", "full_signature": "public static Element writeRoadPolyline(RoadPolyline primitive, XMLBuilder builder,\n\t\t\tXMLResources resources)", "class_method_signature": "XMLRoadUtil.writeRoadPolyline(RoadPolyline primitive, XMLBuilder builder,\n\t\t\tXMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "readRoadPolyline", "parameters": "(Element element, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "modifiers": "public static", "return": "RoadPolyline", "signature": "RoadPolyline readRoadPolyline(Element element, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "full_signature": "public static RoadPolyline readRoadPolyline(Element element, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "class_method_signature": "XMLRoadUtil.readRoadPolyline(Element element, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "writeRoadSegment", "parameters": "(RoadSegment primitive, XMLBuilder builder, XMLResources resources)", "modifiers": "public static", "return": "Element", "signature": "Element writeRoadSegment(RoadSegment primitive, XMLBuilder builder, XMLResources resources)", "full_signature": "public static Element writeRoadSegment(RoadSegment primitive, XMLBuilder builder, XMLResources resources)", "class_method_signature": "XMLRoadUtil.writeRoadSegment(RoadSegment primitive, XMLBuilder builder, XMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "readRoadSegment", "parameters": "(Element element, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "modifiers": "public static", "return": "RoadSegment", "signature": "RoadSegment readRoadSegment(Element element, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "full_signature": "public static RoadSegment readRoadSegment(Element element, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "class_method_signature": "XMLRoadUtil.readRoadSegment(Element element, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "writeRoadNetwork", "parameters": "(Element xmlNode, RoadNetwork primitive, URL geometryURL,\n\t\t\tMapMetricProjection mapProjection, URL attributeURL, XMLBuilder builder,\n\t\t\tPathBuilder pathBuilder, XMLResources resources)", "modifiers": "public static", "return": "void", "signature": "void writeRoadNetwork(Element xmlNode, RoadNetwork primitive, URL geometryURL,\n\t\t\tMapMetricProjection mapProjection, URL attributeURL, XMLBuilder builder,\n\t\t\tPathBuilder pathBuilder, XMLResources resources)", "full_signature": "public static void writeRoadNetwork(Element xmlNode, RoadNetwork primitive, URL geometryURL,\n\t\t\tMapMetricProjection mapProjection, URL attributeURL, XMLBuilder builder,\n\t\t\tPathBuilder pathBuilder, XMLResources resources)", "class_method_signature": "XMLRoadUtil.writeRoadNetwork(Element xmlNode, RoadNetwork primitive, URL geometryURL,\n\t\t\tMapMetricProjection mapProjection, URL attributeURL, XMLBuilder builder,\n\t\t\tPathBuilder pathBuilder, XMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "readRoadNetwork", "parameters": "(Element xmlNode, RoadNetwork primitive, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "modifiers": "public static", "return": "void", "signature": "void readRoadNetwork(Element xmlNode, RoadNetwork primitive, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "full_signature": "public static void readRoadNetwork(Element xmlNode, RoadNetwork primitive, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "class_method_signature": "XMLRoadUtil.readRoadNetwork(Element xmlNode, RoadNetwork primitive, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "testcase": false, "constructor": false}, {"identifier": "readRoadNetwork", "parameters": "(Element xmlNode, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "modifiers": "public static", "return": "StandardRoadNetwork", "signature": "StandardRoadNetwork readRoadNetwork(Element xmlNode, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "full_signature": "public static StandardRoadNetwork readRoadNetwork(Element xmlNode, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "class_method_signature": "XMLRoadUtil.readRoadNetwork(Element xmlNode, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "testcase": false, "constructor": false}], "file": "advanced/gis/gisroadinputoutput/src/main/java/org/arakhne/afc/gis/road/io/XMLRoadUtil.java"}, "focal_method": {"identifier": "readRoadNetwork", "parameters": "(Element xmlNode, RoadNetwork primitive, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "modifiers": "public static", "return": "void", "body": "public static void readRoadNetwork(Element xmlNode, RoadNetwork primitive, PathBuilder pathBuilder,\n\t\t\tXMLResources resources) throws IOException {\n\t\tfinal ContainerWrapper w = new ContainerWrapper(primitive);\n\t\treadGISElementContainer(xmlNode,\n\t\t\t\tw, NODE_ROAD, pathBuilder, resources);\n\t\tURL u;\n\n\t\t// Force the primitive to have the pointer to the Shape and dBase files\n\n\t\tu = w.getElementGeometrySourceURL();\n\t\tif (u != null) {\n\t\t\tprimitive.setAttribute(MapElementLayer.ATTR_ELEMENT_GEOMETRY_URL, u);\n\t\t} else {\n\t\t\tprimitive.removeAttribute(MapElementLayer.ATTR_ELEMENT_GEOMETRY_URL);\n\t\t}\n\n\t\tu = w.getElementAttributeSourceURL();\n\t\tif (u != null) {\n\t\t\tprimitive.setAttribute(MapElementLayer.ATTR_ELEMENT_ATTRIBUTES_URL, u);\n\t\t} else {\n\t\t\tprimitive.removeAttribute(MapElementLayer.ATTR_ELEMENT_ATTRIBUTES_URL);\n\t\t}\n\n\t\tfinal MapMetricProjection projection = w.getElementGeometrySourceProjection();\n\t\tif (projection != null) {\n\t\t\tprimitive.setAttribute(MapElementLayer.ATTR_ELEMENT_GEOMETRY_PROJECTION, projection);\n\t\t} else {\n\t\t\tprimitive.removeAttribute(MapElementLayer.ATTR_ELEMENT_GEOMETRY_PROJECTION);\n\t\t}\n\t}", "signature": "void readRoadNetwork(Element xmlNode, RoadNetwork primitive, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "full_signature": "public static void readRoadNetwork(Element xmlNode, RoadNetwork primitive, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "class_method_signature": "XMLRoadUtil.readRoadNetwork(Element xmlNode, RoadNetwork primitive, PathBuilder pathBuilder,\n\t\t\tXMLResources resources)", "testcase": false, "constructor": false, "invocations": ["readGISElementContainer", "getElementGeometrySourceURL", "setAttribute", "removeAttribute", "getElementAttributeSourceURL", "setAttribute", "removeAttribute", "getElementGeometrySourceProjection", "setAttribute", "removeAttribute"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}