{"test_class": {"identifier": "EasterRelatedDayTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/timeseries/calendars/EasterRelatedDayTest.java"}, "test_case": {"identifier": "testprobEaster", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testprobEaster() {\n        double p = 0;\n        for (int i = 0; i < 35; ++i) {\n            double q = Utilities.probEaster(i);\n            p += q;\n        }\n        org.junit.Assert.assertTrue(Math.abs(p - 1) < 1e-9);\n    }", "signature": "void testprobEaster()", "full_signature": "@Test public void testprobEaster()", "class_method_signature": "EasterRelatedDayTest.testprobEaster()", "testcase": true, "constructor": false, "invocations": ["probEaster", "assertTrue", "abs"]}, "focal_class": {"identifier": "EasterRelatedDay", "superclass": "", "interfaces": "implements ISpecialDay", "fields": [{"original_string": "private static final Map<Integer, Day> dic = new HashMap<>();", "modifier": "private static final", "type": "Map<Integer, Day>", "declarator": "dic = new HashMap<>()", "var_name": "dic"}, {"original_string": "private static final Map<Integer, Day> jdic = new HashMap<>();", "modifier": "private static final", "type": "Map<Integer, Day>", "declarator": "jdic = new HashMap<>()", "var_name": "jdic"}, {"original_string": "private static final int[] g_days = new int[]{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};", "modifier": "private static final", "type": "int[]", "declarator": "g_days = new int[]{31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}", "var_name": "g_days"}, {"original_string": "public final int offset;", "modifier": "public final", "type": "int", "declarator": "offset", "var_name": "offset"}, {"original_string": "private final double weight;", "modifier": "private final", "type": "double", "declarator": "weight", "var_name": "weight"}, {"original_string": "private final boolean julian;", "modifier": "private final", "type": "boolean", "declarator": "julian", "var_name": "julian"}, {"original_string": "public static final EasterRelatedDay ShroveMonday = new EasterRelatedDay(-48),\n            ShroveTuesday = new EasterRelatedDay(-47),\n            AshWednesday = new EasterRelatedDay(-46),\n            Easter = new EasterRelatedDay(0),\n            EasterMonday = new EasterRelatedDay(1),\n            EasterFriday = new EasterRelatedDay(-2),\n            EasterThursday = new EasterRelatedDay(-3),\n            Ascension = new EasterRelatedDay(39),\n            Pentecost = new EasterRelatedDay(49),\n            PentecostMonday = new EasterRelatedDay(50),\n            CorpusChristi = new EasterRelatedDay(60),\n            JulianShroveMonday = new EasterRelatedDay(-48, true),\n            JulianShroveTuesday = new EasterRelatedDay(-47, true),\n            JulianAshWednesday = new EasterRelatedDay(-46, true),\n            JulianEaster = new EasterRelatedDay(0, true),\n            JulianEasterMonday = new EasterRelatedDay(1, true),\n            JulianEasterFriday = new EasterRelatedDay(-2, true),\n            JulianEasterThursday = new EasterRelatedDay(-3, true),\n            JulianAscension = new EasterRelatedDay(39, true),\n            JulianPentecost = new EasterRelatedDay(49, true),\n            JulianPentecostMonday = new EasterRelatedDay(50, true),\n            JulianCorpusChristi = new EasterRelatedDay(60, true);", "modifier": "public static final", "type": "EasterRelatedDay", "declarator": "ShroveMonday = new EasterRelatedDay(-48)", "var_name": "ShroveMonday"}, {"original_string": "private static int START = 80, JSTART = 90, DEL = 35, JDEL = 43;", "modifier": "private static", "type": "int", "declarator": "START = 80", "var_name": "START"}], "methods": [{"identifier": "EasterRelatedDay", "parameters": "()", "modifiers": "public", "return": "", "signature": " EasterRelatedDay()", "full_signature": "public  EasterRelatedDay()", "class_method_signature": "EasterRelatedDay.EasterRelatedDay()", "testcase": false, "constructor": true}, {"identifier": "EasterRelatedDay", "parameters": "(int offset)", "modifiers": "public", "return": "", "signature": " EasterRelatedDay(int offset)", "full_signature": "public  EasterRelatedDay(int offset)", "class_method_signature": "EasterRelatedDay.EasterRelatedDay(int offset)", "testcase": false, "constructor": true}, {"identifier": "EasterRelatedDay", "parameters": "(int offset, boolean julian)", "modifiers": "public", "return": "", "signature": " EasterRelatedDay(int offset, boolean julian)", "full_signature": "public  EasterRelatedDay(int offset, boolean julian)", "class_method_signature": "EasterRelatedDay.EasterRelatedDay(int offset, boolean julian)", "testcase": false, "constructor": true}, {"identifier": "EasterRelatedDay", "parameters": "(int offset, double weight)", "modifiers": "public", "return": "", "signature": " EasterRelatedDay(int offset, double weight)", "full_signature": "public  EasterRelatedDay(int offset, double weight)", "class_method_signature": "EasterRelatedDay.EasterRelatedDay(int offset, double weight)", "testcase": false, "constructor": true}, {"identifier": "EasterRelatedDay", "parameters": "(int offset, double weight, boolean julian)", "modifiers": "public", "return": "", "signature": " EasterRelatedDay(int offset, double weight, boolean julian)", "full_signature": "public  EasterRelatedDay(int offset, double weight, boolean julian)", "class_method_signature": "EasterRelatedDay.EasterRelatedDay(int offset, double weight, boolean julian)", "testcase": false, "constructor": true}, {"identifier": "reweight", "parameters": "(double nweight)", "modifiers": "public", "return": "EasterRelatedDay", "signature": "EasterRelatedDay reweight(double nweight)", "full_signature": "public EasterRelatedDay reweight(double nweight)", "class_method_signature": "EasterRelatedDay.reweight(double nweight)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(int ndays)", "modifiers": "public", "return": "EasterRelatedDay", "signature": "EasterRelatedDay plus(int ndays)", "full_signature": "public EasterRelatedDay plus(int ndays)", "class_method_signature": "EasterRelatedDay.plus(int ndays)", "testcase": false, "constructor": false}, {"identifier": "isJulian", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isJulian()", "full_signature": "public boolean isJulian()", "class_method_signature": "EasterRelatedDay.isJulian()", "testcase": false, "constructor": false}, {"identifier": "getWeight", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getWeight()", "full_signature": "@Override public double getWeight()", "class_method_signature": "EasterRelatedDay.getWeight()", "testcase": false, "constructor": false}, {"identifier": "match", "parameters": "(Context context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean match(Context context)", "full_signature": "@Override public boolean match(Context context)", "class_method_signature": "EasterRelatedDay.match(Context context)", "testcase": false, "constructor": false}, {"identifier": "calcDay", "parameters": "(int year)", "modifiers": "public", "return": "Day", "signature": "Day calcDay(int year)", "full_signature": "public Day calcDay(int year)", "class_method_signature": "EasterRelatedDay.calcDay(int year)", "testcase": false, "constructor": false}, {"identifier": "easter", "parameters": "(int year)", "modifiers": "private", "return": "Day", "signature": "Day easter(int year)", "full_signature": "private Day easter(int year)", "class_method_signature": "EasterRelatedDay.easter(int year)", "testcase": false, "constructor": false}, {"identifier": "easter", "parameters": "(int year, boolean jul)", "modifiers": "private static", "return": "Day", "signature": "Day easter(int year, boolean jul)", "full_signature": "private static Day easter(int year, boolean jul)", "class_method_signature": "EasterRelatedDay.easter(int year, boolean jul)", "testcase": false, "constructor": false}, {"identifier": "probEaster", "parameters": "(int del)", "modifiers": "private", "return": "double", "signature": "double probEaster(int del)", "full_signature": "private double probEaster(int del)", "class_method_signature": "EasterRelatedDay.probEaster(int del)", "testcase": false, "constructor": false}, {"identifier": "getIterable", "parameters": "(TsFrequency freq, Day start, Day end)", "modifiers": "@Override public", "return": "Iterable<IDayInfo>", "signature": "Iterable<IDayInfo> getIterable(TsFrequency freq, Day start, Day end)", "full_signature": "@Override public Iterable<IDayInfo> getIterable(TsFrequency freq, Day start, Day end)", "class_method_signature": "EasterRelatedDay.getIterable(TsFrequency freq, Day start, Day end)", "testcase": false, "constructor": false}, {"identifier": "getLongTermMeanEffect", "parameters": "(int freq)", "modifiers": "@Override public", "return": "double[][]", "signature": "double[][] getLongTermMeanEffect(int freq)", "full_signature": "@Override public double[][] getLongTermMeanEffect(int freq)", "class_method_signature": "EasterRelatedDay.getLongTermMeanEffect(int freq)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "EasterRelatedDay.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(EasterRelatedDay other)", "modifiers": "private", "return": "boolean", "signature": "boolean equals(EasterRelatedDay other)", "full_signature": "private boolean equals(EasterRelatedDay other)", "class_method_signature": "EasterRelatedDay.equals(EasterRelatedDay other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "EasterRelatedDay.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getSignificantDomain", "parameters": "(TsFrequency freq, Day start, Day end)", "modifiers": "@Override public", "return": "TsDomain", "signature": "TsDomain getSignificantDomain(TsFrequency freq, Day start, Day end)", "full_signature": "@Override public TsDomain getSignificantDomain(TsFrequency freq, Day start, Day end)", "class_method_signature": "EasterRelatedDay.getSignificantDomain(TsFrequency freq, Day start, Day end)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/timeseries/calendars/EasterRelatedDay.java"}, "focal_method": {"identifier": "probEaster", "parameters": "(int del)", "modifiers": "private", "return": "double", "body": "private double probEaster(int del) {\n        return julian ? Utilities.probJulianEaster(del)\n                : Utilities.probEaster(del);\n    }", "signature": "double probEaster(int del)", "full_signature": "private double probEaster(int del)", "class_method_signature": "EasterRelatedDay.probEaster(int del)", "testcase": false, "constructor": false, "invocations": ["probJulianEaster", "probEaster"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}