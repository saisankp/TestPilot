{"test_class": {"identifier": "DefaultMetadataHeaderKeyTest", "superclass": "", "interfaces": "", "fields": [], "file": "model/base/src/test/java/org/eclipse/ditto/model/base/headers/metadata/DefaultMetadataHeaderKeyTest.java"}, "test_case": {"identifier": "tryToParseEmptyString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void tryToParseEmptyString() {\n        assertThatIllegalArgumentException()\n                .isThrownBy(() -> DefaultMetadataHeaderKey.parse(\"\"))\n                .withMessage(\"The argument 'key' must not be empty!\")\n                .withNoCause();\n    }", "signature": "void tryToParseEmptyString()", "full_signature": "@Test public void tryToParseEmptyString()", "class_method_signature": "DefaultMetadataHeaderKeyTest.tryToParseEmptyString()", "testcase": true, "constructor": false, "invocations": ["withNoCause", "withMessage", "isThrownBy", "assertThatIllegalArgumentException", "parse"]}, "focal_class": {"identifier": "DefaultMetadataHeaderKey", "superclass": "", "interfaces": "implements MetadataHeaderKey", "fields": [{"original_string": "static final JsonKey HIERARCHY_WILDCARD = JsonKey.of(\"*\");", "modifier": "static final", "type": "JsonKey", "declarator": "HIERARCHY_WILDCARD = JsonKey.of(\"*\")", "var_name": "HIERARCHY_WILDCARD"}, {"original_string": "private final JsonPointer path;", "modifier": "private final", "type": "JsonPointer", "declarator": "path", "var_name": "path"}], "methods": [{"identifier": "DefaultMetadataHeaderKey", "parameters": "(final JsonPointer path)", "modifiers": "private", "return": "", "signature": " DefaultMetadataHeaderKey(final JsonPointer path)", "full_signature": "private  DefaultMetadataHeaderKey(final JsonPointer path)", "class_method_signature": "DefaultMetadataHeaderKey.DefaultMetadataHeaderKey(final JsonPointer path)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(final CharSequence key)", "modifiers": "public static", "return": "DefaultMetadataHeaderKey", "signature": "DefaultMetadataHeaderKey parse(final CharSequence key)", "full_signature": "public static DefaultMetadataHeaderKey parse(final CharSequence key)", "class_method_signature": "DefaultMetadataHeaderKey.parse(final CharSequence key)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final JsonPointer path)", "modifiers": "public static", "return": "DefaultMetadataHeaderKey", "signature": "DefaultMetadataHeaderKey of(final JsonPointer path)", "full_signature": "public static DefaultMetadataHeaderKey of(final JsonPointer path)", "class_method_signature": "DefaultMetadataHeaderKey.of(final JsonPointer path)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void validate()", "full_signature": "private void validate()", "class_method_signature": "DefaultMetadataHeaderKey.validate()", "testcase": false, "constructor": false}, {"identifier": "appliesToAllLeaves", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean appliesToAllLeaves()", "full_signature": "@Override public boolean appliesToAllLeaves()", "class_method_signature": "DefaultMetadataHeaderKey.appliesToAllLeaves()", "testcase": false, "constructor": false}, {"identifier": "getPath", "parameters": "()", "modifiers": "@Override public", "return": "JsonPointer", "signature": "JsonPointer getPath()", "full_signature": "@Override public JsonPointer getPath()", "class_method_signature": "DefaultMetadataHeaderKey.getPath()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(final MetadataHeaderKey other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(final MetadataHeaderKey other)", "full_signature": "@Override public int compareTo(final MetadataHeaderKey other)", "class_method_signature": "DefaultMetadataHeaderKey.compareTo(final MetadataHeaderKey other)", "testcase": false, "constructor": false}, {"identifier": "comparePaths", "parameters": "(final JsonPointer otherPath)", "modifiers": "private", "return": "int", "signature": "int comparePaths(final JsonPointer otherPath)", "full_signature": "private int comparePaths(final JsonPointer otherPath)", "class_method_signature": "DefaultMetadataHeaderKey.comparePaths(final JsonPointer otherPath)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(@Nullable final Object o)", "full_signature": "@Override public boolean equals(@Nullable final Object o)", "class_method_signature": "DefaultMetadataHeaderKey.equals(@Nullable final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DefaultMetadataHeaderKey.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DefaultMetadataHeaderKey.toString()", "testcase": false, "constructor": false}], "file": "model/base/src/main/java/org/eclipse/ditto/model/base/headers/metadata/DefaultMetadataHeaderKey.java"}, "focal_method": {"identifier": "parse", "parameters": "(final CharSequence key)", "modifiers": "public static", "return": "DefaultMetadataHeaderKey", "body": "public static DefaultMetadataHeaderKey parse(final CharSequence key) {\n        return of(JsonPointer.of(argumentNotEmpty(key, \"key\")));\n    }", "signature": "DefaultMetadataHeaderKey parse(final CharSequence key)", "full_signature": "public static DefaultMetadataHeaderKey parse(final CharSequence key)", "class_method_signature": "DefaultMetadataHeaderKey.parse(final CharSequence key)", "testcase": false, "constructor": false, "invocations": ["of", "of", "argumentNotEmpty"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}