{"test_class": {"identifier": "TableSummarizerTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/statistics/basicstatistic/TableSummarizerTest.java"}, "test_case": {"identifier": "testMerge", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMerge() {\n        TableSummarizer summarizer = testWithMerge(false);\n\n        Assert.assertEquals(4, summarizer.count);\n        Assert.assertArrayEquals(new double[]{3.0, 3.0, 1.0}, summarizer.sum.getData(), 10e-4);\n        Assert.assertArrayEquals(new double[]{5.0, 5.0, 17.0}, summarizer.squareSum.getData(), 10e-4);\n        Assert.assertArrayEquals(new double[]{0.0, 0.0, -3.0}, summarizer.min.getData(), 10e-4);\n        Assert.assertArrayEquals(new double[]{2.0, 2.0, 2.0}, summarizer.max.getData(), 10e-4);\n\n    }", "signature": "void testMerge()", "full_signature": "@Test public void testMerge()", "class_method_signature": "TableSummarizerTest.testMerge()", "testcase": true, "constructor": false, "invocations": ["testWithMerge", "assertEquals", "assertArrayEquals", "getData", "assertArrayEquals", "getData", "assertArrayEquals", "getData", "assertArrayEquals", "getData"]}, "focal_class": {"identifier": "TableSummarizer", "superclass": "extends BaseSummarizer", "interfaces": "", "fields": [{"original_string": "public String[] colNames;", "modifier": "public", "type": "String[]", "declarator": "colNames", "var_name": "colNames"}, {"original_string": "DenseMatrix xSum;", "modifier": "", "type": "DenseMatrix", "declarator": "xSum", "var_name": "xSum"}, {"original_string": "DenseMatrix xSquareSum;", "modifier": "", "type": "DenseMatrix", "declarator": "xSquareSum", "var_name": "xSquareSum"}, {"original_string": "DenseMatrix xyCount;", "modifier": "", "type": "DenseMatrix", "declarator": "xyCount", "var_name": "xyCount"}, {"original_string": "private int[] numericalColIndices;", "modifier": "private", "type": "int[]", "declarator": "numericalColIndices", "var_name": "numericalColIndices"}, {"original_string": "private DenseVector numMissingValue;", "modifier": "private", "type": "DenseVector", "declarator": "numMissingValue", "var_name": "numMissingValue"}, {"original_string": "protected DenseVector sum;", "modifier": "protected", "type": "DenseVector", "declarator": "sum", "var_name": "sum"}, {"original_string": "protected DenseVector squareSum;", "modifier": "protected", "type": "DenseVector", "declarator": "squareSum", "var_name": "squareSum"}, {"original_string": "protected DenseVector min;", "modifier": "protected", "type": "DenseVector", "declarator": "min", "var_name": "min"}, {"original_string": "protected DenseVector max;", "modifier": "protected", "type": "DenseVector", "declarator": "max", "var_name": "max"}, {"original_string": "protected DenseVector normL1;", "modifier": "protected", "type": "DenseVector", "declarator": "normL1", "var_name": "normL1"}, {"original_string": "private Double[] vals;", "modifier": "private", "type": "Double[]", "declarator": "vals", "var_name": "vals"}], "methods": [{"identifier": "TableSummarizer", "parameters": "()", "modifiers": "private", "return": "", "signature": " TableSummarizer()", "full_signature": "private  TableSummarizer()", "class_method_signature": "TableSummarizer.TableSummarizer()", "testcase": false, "constructor": true}, {"identifier": "TableSummarizer", "parameters": "(String[] selectedColNames, int[] numericalColIndices, boolean calculateOuterProduct)", "modifiers": "public", "return": "", "signature": " TableSummarizer(String[] selectedColNames, int[] numericalColIndices, boolean calculateOuterProduct)", "full_signature": "public  TableSummarizer(String[] selectedColNames, int[] numericalColIndices, boolean calculateOuterProduct)", "class_method_signature": "TableSummarizer.TableSummarizer(String[] selectedColNames, int[] numericalColIndices, boolean calculateOuterProduct)", "testcase": false, "constructor": true}, {"identifier": "visit", "parameters": "(Row row)", "modifiers": "public", "return": "BaseSummarizer", "signature": "BaseSummarizer visit(Row row)", "full_signature": "public BaseSummarizer visit(Row row)", "class_method_signature": "TableSummarizer.visit(Row row)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "TableSummarizer.init()", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(TableSummarizer left, TableSummarizer right)", "modifiers": "public static", "return": "TableSummarizer", "signature": "TableSummarizer merge(TableSummarizer left, TableSummarizer right)", "full_signature": "public static TableSummarizer merge(TableSummarizer left, TableSummarizer right)", "class_method_signature": "TableSummarizer.merge(TableSummarizer left, TableSummarizer right)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TableSummarizer.toString()", "testcase": false, "constructor": false}, {"identifier": "toSummary", "parameters": "()", "modifiers": "public", "return": "TableSummary", "signature": "TableSummary toSummary()", "full_signature": "public TableSummary toSummary()", "class_method_signature": "TableSummarizer.toSummary()", "testcase": false, "constructor": false}, {"identifier": "correlation", "parameters": "()", "modifiers": "@Override public", "return": "CorrelationResult", "signature": "CorrelationResult correlation()", "full_signature": "@Override public CorrelationResult correlation()", "class_method_signature": "TableSummarizer.correlation()", "testcase": false, "constructor": false}, {"identifier": "covariance", "parameters": "()", "modifiers": "@Override public", "return": "DenseMatrix", "signature": "DenseMatrix covariance()", "full_signature": "@Override public DenseMatrix covariance()", "class_method_signature": "TableSummarizer.covariance()", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "private", "return": "TableSummarizer", "signature": "TableSummarizer copy()", "full_signature": "private TableSummarizer copy()", "class_method_signature": "TableSummarizer.copy()", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/statistics/basicstatistic/TableSummarizer.java"}, "focal_method": {"identifier": "merge", "parameters": "(TableSummarizer left, TableSummarizer right)", "modifiers": "public static", "return": "TableSummarizer", "body": "public static TableSummarizer merge(TableSummarizer left, TableSummarizer right) {\n        if (right.count == 0) {\n            return left;\n        }\n\n        if (left.count == 0) {\n            return right.copy();\n        }\n\n        left.count += right.count;\n        left.numMissingValue.plusEqual(right.numMissingValue);\n        left.sum.plusEqual(right.sum);\n        left.squareSum.plusEqual(right.squareSum);\n        left.normL1.plusEqual(right.normL1);\n        MatVecOp.apply(left.min, right.min, left.min, Math::min);\n        MatVecOp.apply(left.max, right.max, left.max, Math::max);\n\n        if (left.outerProduct != null && right.outerProduct != null) {\n            left.outerProduct.plusEquals(right.outerProduct);\n            left.xSum.plusEquals(right.xSum);\n            left.xSquareSum.plusEquals(right.xSquareSum);\n            left.xyCount.plusEquals(right.xyCount);\n        } else if (left.outerProduct == null && right.outerProduct != null) {\n            left.outerProduct = right.outerProduct.clone();\n            left.xSum = right.xSum.clone();\n            left.xSquareSum = right.xSquareSum.clone();\n            left.xyCount = right.xyCount.clone();\n        }\n\n        return left;\n    }", "signature": "TableSummarizer merge(TableSummarizer left, TableSummarizer right)", "full_signature": "public static TableSummarizer merge(TableSummarizer left, TableSummarizer right)", "class_method_signature": "TableSummarizer.merge(TableSummarizer left, TableSummarizer right)", "testcase": false, "constructor": false, "invocations": ["copy", "plusEqual", "plusEqual", "plusEqual", "plusEqual", "apply", "apply", "plusEquals", "plusEquals", "plusEquals", "plusEquals", "clone", "clone", "clone", "clone"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}