{"test_class": {"identifier": "CSVDataStoreFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CSVDataStoreFactory csvDataStoreFactory;", "modifier": "private", "type": "CSVDataStoreFactory", "declarator": "csvDataStoreFactory", "var_name": "csvDataStoreFactory"}, {"original_string": "private File file;", "modifier": "private", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private URL locationsResource;", "modifier": "private", "type": "URL", "declarator": "locationsResource", "var_name": "locationsResource"}], "file": "modules/unsupported/csv/src/test/java/org/geotools/data/csv/CSVDataStoreFactoryTest.java"}, "test_case": {"identifier": "testFileDoesNotExist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFileDoesNotExist() throws Exception {\n        try {\n            csvDataStoreFactory.createDataStoreFromFile(new File(\"/tmp/does-not-exist.csv\"));\n        } catch (IllegalArgumentException e) {\n            assertTrue(true);\n            return;\n        } catch (Exception e) {\n        }\n        assertTrue(\"Did not throw illegal argument exception for non-existent file\", false);\n    }", "signature": "void testFileDoesNotExist()", "full_signature": "@Test public void testFileDoesNotExist()", "class_method_signature": "CSVDataStoreFactoryTest.testFileDoesNotExist()", "testcase": true, "constructor": false, "invocations": ["createDataStoreFromFile", "assertTrue", "assertTrue"]}, "focal_class": {"identifier": "CSVDataStoreFactory", "superclass": "", "interfaces": "implements FileDataStoreFactorySpi", "fields": [{"original_string": "private static final String FILE_TYPE = \"csv\";", "modifier": "private static final", "type": "String", "declarator": "FILE_TYPE = \"csv\"", "var_name": "FILE_TYPE"}, {"original_string": "public static final String[] EXTENSIONS = new String[] { \".\" + FILE_TYPE };", "modifier": "public static final", "type": "String[]", "declarator": "EXTENSIONS = new String[] { \".\" + FILE_TYPE }", "var_name": "EXTENSIONS"}, {"original_string": "public static final Param FILE_PARAM = new Param(\"file\", File.class, FILE_TYPE + \" file\", false);", "modifier": "public static final", "type": "Param", "declarator": "FILE_PARAM = new Param(\"file\", File.class, FILE_TYPE + \" file\", false)", "var_name": "FILE_PARAM"}, {"original_string": "public static final Param URL_PARAM = new Param(\"url\", URL.class, FILE_TYPE + \" file\", false);", "modifier": "public static final", "type": "Param", "declarator": "URL_PARAM = new Param(\"url\", URL.class, FILE_TYPE + \" file\", false)", "var_name": "URL_PARAM"}, {"original_string": "public static final Param NAMESPACEP = new Param(\"namespace\", URI.class,\n            \"uri to the namespace\", false, null, new KVP(Param.LEVEL, \"advanced\"));", "modifier": "public static final", "type": "Param", "declarator": "NAMESPACEP = new Param(\"namespace\", URI.class,\n            \"uri to the namespace\", false, null, new KVP(Param.LEVEL, \"advanced\"))", "var_name": "NAMESPACEP"}, {"original_string": "public static final Param STRATEGYP = new Param(\"strategy\", String.class, \"strategy\", false);", "modifier": "public static final", "type": "Param", "declarator": "STRATEGYP = new Param(\"strategy\", String.class, \"strategy\", false)", "var_name": "STRATEGYP"}, {"original_string": "public static final Param LATFIELDP = new Param(\"latField\", String.class,\n            \"Latitude field. Assumes a CSVSpecifiedLatLngStrategy\", false);", "modifier": "public static final", "type": "Param", "declarator": "LATFIELDP = new Param(\"latField\", String.class,\n            \"Latitude field. Assumes a CSVSpecifiedLatLngStrategy\", false)", "var_name": "LATFIELDP"}, {"original_string": "public static final Param LnGFIELDP = new Param(\"lngField\", String.class,\n            \"Longitude field. Assumes a CSVSpecifiedLatLngStrategy\", false);", "modifier": "public static final", "type": "Param", "declarator": "LnGFIELDP = new Param(\"lngField\", String.class,\n            \"Longitude field. Assumes a CSVSpecifiedLatLngStrategy\", false)", "var_name": "LnGFIELDP"}, {"original_string": "public static final Param WKTP = new Param(\"wktField\", String.class,\n            \"WKT field. Assumes a CSVSpecifiedWKTStrategy\", false);", "modifier": "public static final", "type": "Param", "declarator": "WKTP = new Param(\"wktField\", String.class,\n            \"WKT field. Assumes a CSVSpecifiedWKTStrategy\", false)", "var_name": "WKTP"}, {"original_string": "public static final Param[] parametersInfo = new Param[] { FILE_PARAM };", "modifier": "public static final", "type": "Param[]", "declarator": "parametersInfo = new Param[] { FILE_PARAM }", "var_name": "parametersInfo"}], "methods": [{"identifier": "getDisplayName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDisplayName()", "full_signature": "@Override public String getDisplayName()", "class_method_signature": "CSVDataStoreFactory.getDisplayName()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "CSVDataStoreFactory.getDescription()", "testcase": false, "constructor": false}, {"identifier": "getParametersInfo", "parameters": "()", "modifiers": "@Override public", "return": "Param[]", "signature": "Param[] getParametersInfo()", "full_signature": "@Override public Param[] getParametersInfo()", "class_method_signature": "CSVDataStoreFactory.getParametersInfo()", "testcase": false, "constructor": false}, {"identifier": "canProcessExtension", "parameters": "(String filename)", "modifiers": "private", "return": "boolean", "signature": "boolean canProcessExtension(String filename)", "full_signature": "private boolean canProcessExtension(String filename)", "class_method_signature": "CSVDataStoreFactory.canProcessExtension(String filename)", "testcase": false, "constructor": false}, {"identifier": "fileFromParams", "parameters": "(Map<String, Serializable> params)", "modifiers": "private", "return": "File", "signature": "File fileFromParams(Map<String, Serializable> params)", "full_signature": "private File fileFromParams(Map<String, Serializable> params)", "class_method_signature": "CSVDataStoreFactory.fileFromParams(Map<String, Serializable> params)", "testcase": false, "constructor": false}, {"identifier": "canProcess", "parameters": "(Map<String, Serializable> params)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canProcess(Map<String, Serializable> params)", "full_signature": "@Override public boolean canProcess(Map<String, Serializable> params)", "class_method_signature": "CSVDataStoreFactory.canProcess(Map<String, Serializable> params)", "testcase": false, "constructor": false}, {"identifier": "isAvailable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAvailable()", "full_signature": "@Override public boolean isAvailable()", "class_method_signature": "CSVDataStoreFactory.isAvailable()", "testcase": false, "constructor": false}, {"identifier": "getImplementationHints", "parameters": "()", "modifiers": "@Override public", "return": "Map<Key, ?>", "signature": "Map<Key, ?> getImplementationHints()", "full_signature": "@Override public Map<Key, ?> getImplementationHints()", "class_method_signature": "CSVDataStoreFactory.getImplementationHints()", "testcase": false, "constructor": false}, {"identifier": "createDataStoreFromFile", "parameters": "(File file)", "modifiers": "public", "return": "FileDataStore", "signature": "FileDataStore createDataStoreFromFile(File file)", "full_signature": "public FileDataStore createDataStoreFromFile(File file)", "class_method_signature": "CSVDataStoreFactory.createDataStoreFromFile(File file)", "testcase": false, "constructor": false}, {"identifier": "createDataStoreFromFile", "parameters": "(File file, URI namespace)", "modifiers": "public", "return": "FileDataStore", "signature": "FileDataStore createDataStoreFromFile(File file, URI namespace)", "full_signature": "public FileDataStore createDataStoreFromFile(File file, URI namespace)", "class_method_signature": "CSVDataStoreFactory.createDataStoreFromFile(File file, URI namespace)", "testcase": false, "constructor": false}, {"identifier": "createDataStore", "parameters": "(Map<String, Serializable> params)", "modifiers": "@Override public", "return": "FileDataStore", "signature": "FileDataStore createDataStore(Map<String, Serializable> params)", "full_signature": "@Override public FileDataStore createDataStore(Map<String, Serializable> params)", "class_method_signature": "CSVDataStoreFactory.createDataStore(Map<String, Serializable> params)", "testcase": false, "constructor": false}, {"identifier": "createDataStoreFromFile", "parameters": "(File file, URI namespace,\n            Map<String, Serializable> params)", "modifiers": "private", "return": "FileDataStore", "signature": "FileDataStore createDataStoreFromFile(File file, URI namespace,\n            Map<String, Serializable> params)", "full_signature": "private FileDataStore createDataStoreFromFile(File file, URI namespace,\n            Map<String, Serializable> params)", "class_method_signature": "CSVDataStoreFactory.createDataStoreFromFile(File file, URI namespace,\n            Map<String, Serializable> params)", "testcase": false, "constructor": false}, {"identifier": "createNewDataStore", "parameters": "(Map<String, Serializable> params)", "modifiers": "@Override public", "return": "DataStore", "signature": "DataStore createNewDataStore(Map<String, Serializable> params)", "full_signature": "@Override public DataStore createNewDataStore(Map<String, Serializable> params)", "class_method_signature": "CSVDataStoreFactory.createNewDataStore(Map<String, Serializable> params)", "testcase": false, "constructor": false}, {"identifier": "createDataStore", "parameters": "(URL url)", "modifiers": "@Override public", "return": "FileDataStore", "signature": "FileDataStore createDataStore(URL url)", "full_signature": "@Override public FileDataStore createDataStore(URL url)", "class_method_signature": "CSVDataStoreFactory.createDataStore(URL url)", "testcase": false, "constructor": false}, {"identifier": "getFileExtensions", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getFileExtensions()", "full_signature": "@Override public String[] getFileExtensions()", "class_method_signature": "CSVDataStoreFactory.getFileExtensions()", "testcase": false, "constructor": false}, {"identifier": "canProcess", "parameters": "(URL url)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canProcess(URL url)", "full_signature": "@Override public boolean canProcess(URL url)", "class_method_signature": "CSVDataStoreFactory.canProcess(URL url)", "testcase": false, "constructor": false}, {"identifier": "getTypeName", "parameters": "(URL url)", "modifiers": "@Override public", "return": "String", "signature": "String getTypeName(URL url)", "full_signature": "@Override public String getTypeName(URL url)", "class_method_signature": "CSVDataStoreFactory.getTypeName(URL url)", "testcase": false, "constructor": false}], "file": "modules/unsupported/csv/src/main/java/org/geotools/data/csv/CSVDataStoreFactory.java"}, "focal_method": {"identifier": "createDataStoreFromFile", "parameters": "(File file)", "modifiers": "public", "return": "FileDataStore", "body": "public FileDataStore createDataStoreFromFile(File file) throws IOException {\n        return createDataStoreFromFile(file, null);\n    }", "signature": "FileDataStore createDataStoreFromFile(File file)", "full_signature": "public FileDataStore createDataStoreFromFile(File file)", "class_method_signature": "CSVDataStoreFactory.createDataStoreFromFile(File file)", "testcase": false, "constructor": false, "invocations": ["createDataStoreFromFile"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}