{"test_class": {"identifier": "TensorBoardComponentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "private ComponentTestCommons testCommons =\n      new ComponentTestCommons(TensorFlowRole.TENSORBOARD);", "modifier": "private", "type": "ComponentTestCommons", "declarator": "testCommons =\n      new ComponentTestCommons(TensorFlowRole.TENSORBOARD)", "var_name": "testCommons"}], "file": "submarine-server/server-submitter/submitter-yarnservice/src/test/java/org/apache/submarine/server/submitter/yarnservice/tensorflow/component/TensorBoardComponentTest.java"}, "test_case": {"identifier": "testTensorBoardComponent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTensorBoardComponent() throws IOException {\n    testCommons.yarnConfig.set(\"hadoop.registry.dns.domain-name\", \"testDomain\");\n\n    TensorFlowRunJobParameters parameters = new TensorFlowRunJobParameters();\n    parameters.setTensorboardResource(testCommons.resource);\n    parameters.setName(\"testJobName\");\n    parameters.setTensorboardDockerImage(\"testTBDockerImage\");\n\n    TensorBoardComponent tensorBoardComponent =\n        createTensorBoardComponent(parameters);\n\n    Component component = tensorBoardComponent.createComponent();\n\n    assertEquals(testCommons.role.getComponentName(), component.getName());\n    testCommons.verifyCommonConfigEnvs(component);\n\n    assertEquals(1L, (long) component.getNumberOfContainers());\n    assertEquals(RestartPolicyEnum.NEVER, component.getRestartPolicy());\n    testCommons.verifyResources(component);\n    assertEquals(\n        new Artifact().type(Artifact.TypeEnum.DOCKER).id(\"testTBDockerImage\"),\n        component.getArtifact());\n\n    assertEquals(String.format(\n        \"http://tensorboard-0.testJobName.%s\" + \".testDomain:6006\",\n        testCommons.userName),\n        tensorBoardComponent.getTensorboardLink());\n\n    assertEquals(\"./run-TENSORBOARD.sh\", component.getLaunchCommand());\n    verify(testCommons.fsOperations)\n        .uploadToRemoteFileAndLocalizeToContainerWorkDir(\n        any(Path.class), eq(\"mockScript\"), eq(\"run-TENSORBOARD.sh\"),\n        eq(component));\n  }", "signature": "void testTensorBoardComponent()", "full_signature": "@Test public void testTensorBoardComponent()", "class_method_signature": "TensorBoardComponentTest.testTensorBoardComponent()", "testcase": true, "constructor": false, "invocations": ["set", "setTensorboardResource", "setName", "setTensorboardDockerImage", "createTensorBoardComponent", "createComponent", "assertEquals", "getComponentName", "getName", "verifyCommonConfigEnvs", "assertEquals", "getNumberOfContainers", "assertEquals", "getRestartPolicy", "verifyResources", "assertEquals", "id", "type", "getArtifact", "assertEquals", "format", "getTensorboardLink", "assertEquals", "getLaunchCommand", "uploadToRemoteFileAndLocalizeToContainerWorkDir", "verify", "any", "eq", "eq", "eq"]}, "focal_class": {"identifier": "TensorBoardComponent", "superclass": "extends AbstractComponent", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG =\n      LoggerFactory.getLogger(TensorBoardComponent.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG =\n      LoggerFactory.getLogger(TensorBoardComponent.class)", "var_name": "LOG"}, {"original_string": "public static final String TENSORBOARD_QUICKLINK_LABEL = \"Tensorboard\";", "modifier": "public static final", "type": "String", "declarator": "TENSORBOARD_QUICKLINK_LABEL = \"Tensorboard\"", "var_name": "TENSORBOARD_QUICKLINK_LABEL"}, {"original_string": "private static final int DEFAULT_PORT = 6006;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_PORT = 6006", "var_name": "DEFAULT_PORT"}, {"original_string": "private String tensorboardLink;", "modifier": "private", "type": "String", "declarator": "tensorboardLink", "var_name": "tensorboardLink"}], "methods": [{"identifier": "TensorBoardComponent", "parameters": "(FileSystemOperations fsOperations,\n                              RemoteDirectoryManager remoteDirectoryManager,\n                              RunJobParameters parameters,\n                              TensorFlowLaunchCommandFactory launchCommandFactory,\n                              Configuration yarnConfig)", "modifiers": "public", "return": "", "signature": " TensorBoardComponent(FileSystemOperations fsOperations,\n                              RemoteDirectoryManager remoteDirectoryManager,\n                              RunJobParameters parameters,\n                              TensorFlowLaunchCommandFactory launchCommandFactory,\n                              Configuration yarnConfig)", "full_signature": "public  TensorBoardComponent(FileSystemOperations fsOperations,\n                              RemoteDirectoryManager remoteDirectoryManager,\n                              RunJobParameters parameters,\n                              TensorFlowLaunchCommandFactory launchCommandFactory,\n                              Configuration yarnConfig)", "class_method_signature": "TensorBoardComponent.TensorBoardComponent(FileSystemOperations fsOperations,\n                              RemoteDirectoryManager remoteDirectoryManager,\n                              RunJobParameters parameters,\n                              TensorFlowLaunchCommandFactory launchCommandFactory,\n                              Configuration yarnConfig)", "testcase": false, "constructor": true}, {"identifier": "createComponent", "parameters": "()", "modifiers": "@Override public", "return": "Component", "signature": "Component createComponent()", "full_signature": "@Override public Component createComponent()", "class_method_signature": "TensorBoardComponent.createComponent()", "testcase": false, "constructor": false}, {"identifier": "getTensorboardLink", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTensorboardLink()", "full_signature": "public String getTensorboardLink()", "class_method_signature": "TensorBoardComponent.getTensorboardLink()", "testcase": false, "constructor": false}], "file": "submarine-server/server-submitter/submitter-yarnservice/src/main/java/org/apache/submarine/server/submitter/yarnservice/tensorflow/component/TensorBoardComponent.java"}, "focal_method": {"identifier": "TensorBoardComponent", "parameters": "(FileSystemOperations fsOperations,\n                              RemoteDirectoryManager remoteDirectoryManager,\n                              RunJobParameters parameters,\n                              TensorFlowLaunchCommandFactory launchCommandFactory,\n                              Configuration yarnConfig)", "modifiers": "public", "return": "", "body": "public TensorBoardComponent(FileSystemOperations fsOperations,\n                              RemoteDirectoryManager remoteDirectoryManager,\n                              RunJobParameters parameters,\n                              TensorFlowLaunchCommandFactory launchCommandFactory,\n                              Configuration yarnConfig) {\n    super(fsOperations, remoteDirectoryManager, parameters,\n        TensorFlowRole.TENSORBOARD, yarnConfig, launchCommandFactory);\n  }", "signature": " TensorBoardComponent(FileSystemOperations fsOperations,\n                              RemoteDirectoryManager remoteDirectoryManager,\n                              RunJobParameters parameters,\n                              TensorFlowLaunchCommandFactory launchCommandFactory,\n                              Configuration yarnConfig)", "full_signature": "public  TensorBoardComponent(FileSystemOperations fsOperations,\n                              RemoteDirectoryManager remoteDirectoryManager,\n                              RunJobParameters parameters,\n                              TensorFlowLaunchCommandFactory launchCommandFactory,\n                              Configuration yarnConfig)", "class_method_signature": "TensorBoardComponent.TensorBoardComponent(FileSystemOperations fsOperations,\n                              RemoteDirectoryManager remoteDirectoryManager,\n                              RunJobParameters parameters,\n                              TensorFlowLaunchCommandFactory launchCommandFactory,\n                              Configuration yarnConfig)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}