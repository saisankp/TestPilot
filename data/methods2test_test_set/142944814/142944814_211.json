{"test_class": {"identifier": "ECDSAKeyGeneratorTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/util/src/test/java/hera/util/pki/ECDSAKeyGeneratorTest.java"}, "test_case": {"identifier": "testCreatePublicKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCreatePublicKey() throws Exception {\n    final ECDSAKeyGenerator generator = new ECDSAKeyGenerator();\n    final ECDSAKey key = generator.create();\n\n    final org.bouncycastle.jce.interfaces.ECPublicKey ecPublicKey =\n        (org.bouncycastle.jce.interfaces.ECPublicKey) key.getPublicKey();\n    final PublicKey recovered =\n        generator.createPublicKey(ecPublicKey.getQ().getXCoord().toBigInteger(),\n            ecPublicKey.getQ().getYCoord().toBigInteger());\n    assertEquals(ecPublicKey.getQ(),\n        ((org.bouncycastle.jce.interfaces.ECPublicKey) recovered).getQ());\n  }", "signature": "void testCreatePublicKey()", "full_signature": "@Test public void testCreatePublicKey()", "class_method_signature": "ECDSAKeyGeneratorTest.testCreatePublicKey()", "testcase": true, "constructor": false, "invocations": ["create", "getPublicKey", "createPublicKey", "toBigInteger", "getXCoord", "getQ", "toBigInteger", "getYCoord", "getQ", "assertEquals", "getQ", "getQ"]}, "focal_class": {"identifier": "ECDSAKeyGenerator", "superclass": "", "interfaces": "implements KeyGenerator<ECDSAKey>", "fields": [{"original_string": "protected static final String KEY_ALGORITHM = \"ECDSA\";", "modifier": "protected static final", "type": "String", "declarator": "KEY_ALGORITHM = \"ECDSA\"", "var_name": "KEY_ALGORITHM"}, {"original_string": "protected static final String CURVE_NAME = \"secp256k1\";", "modifier": "protected static final", "type": "String", "declarator": "CURVE_NAME = \"secp256k1\"", "var_name": "CURVE_NAME"}, {"original_string": "protected static final ECNamedCurveParameterSpec ecSpec;", "modifier": "protected static final", "type": "ECNamedCurveParameterSpec", "declarator": "ecSpec", "var_name": "ecSpec"}, {"original_string": "public static final ECDomainParameters ecParams;", "modifier": "public static final", "type": "ECDomainParameters", "declarator": "ecParams", "var_name": "ecParams"}, {"original_string": "protected final transient Logger logger = getLogger(getClass());", "modifier": "protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}], "methods": [{"identifier": "generateKey", "parameters": "(final SecureRandom secureRandom)", "modifiers": "protected", "return": "ECDSAKey", "signature": "ECDSAKey generateKey(final SecureRandom secureRandom)", "full_signature": "protected ECDSAKey generateKey(final SecureRandom secureRandom)", "class_method_signature": "ECDSAKeyGenerator.generateKey(final SecureRandom secureRandom)", "testcase": false, "constructor": false}, {"identifier": "getKeyPairGenerator", "parameters": "(final SecureRandom secureRandom)", "modifiers": "protected", "return": "KeyPairGenerator", "signature": "KeyPairGenerator getKeyPairGenerator(final SecureRandom secureRandom)", "full_signature": "protected KeyPairGenerator getKeyPairGenerator(final SecureRandom secureRandom)", "class_method_signature": "ECDSAKeyGenerator.getKeyPairGenerator(final SecureRandom secureRandom)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "()", "modifiers": "@Override public", "return": "ECDSAKey", "signature": "ECDSAKey create()", "full_signature": "@Override public ECDSAKey create()", "class_method_signature": "ECDSAKeyGenerator.create()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final String seed)", "modifiers": "public", "return": "ECDSAKey", "signature": "ECDSAKey create(final String seed)", "full_signature": "public ECDSAKey create(final String seed)", "class_method_signature": "ECDSAKeyGenerator.create(final String seed)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final byte[] encodedPrivateKey)", "modifiers": "public", "return": "ECDSAKey", "signature": "ECDSAKey create(final byte[] encodedPrivateKey)", "full_signature": "public ECDSAKey create(final byte[] encodedPrivateKey)", "class_method_signature": "ECDSAKeyGenerator.create(final byte[] encodedPrivateKey)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final BigInteger d)", "modifiers": "public", "return": "ECDSAKey", "signature": "ECDSAKey create(final BigInteger d)", "full_signature": "public ECDSAKey create(final BigInteger d)", "class_method_signature": "ECDSAKeyGenerator.create(final BigInteger d)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(final PrivateKey privateKey)", "modifiers": "public", "return": "ECDSAKey", "signature": "ECDSAKey create(final PrivateKey privateKey)", "full_signature": "public ECDSAKey create(final PrivateKey privateKey)", "class_method_signature": "ECDSAKeyGenerator.create(final PrivateKey privateKey)", "testcase": false, "constructor": false}, {"identifier": "createPrivateKey", "parameters": "(final BigInteger d)", "modifiers": "public", "return": "PrivateKey", "signature": "PrivateKey createPrivateKey(final BigInteger d)", "full_signature": "public PrivateKey createPrivateKey(final BigInteger d)", "class_method_signature": "ECDSAKeyGenerator.createPrivateKey(final BigInteger d)", "testcase": false, "constructor": false}, {"identifier": "createPublicKey", "parameters": "(final byte[] compressed)", "modifiers": "public", "return": "PublicKey", "signature": "PublicKey createPublicKey(final byte[] compressed)", "full_signature": "public PublicKey createPublicKey(final byte[] compressed)", "class_method_signature": "ECDSAKeyGenerator.createPublicKey(final byte[] compressed)", "testcase": false, "constructor": false}, {"identifier": "createPublicKey", "parameters": "(final BigInteger x, final BigInteger y)", "modifiers": "public", "return": "PublicKey", "signature": "PublicKey createPublicKey(final BigInteger x, final BigInteger y)", "full_signature": "public PublicKey createPublicKey(final BigInteger x, final BigInteger y)", "class_method_signature": "ECDSAKeyGenerator.createPublicKey(final BigInteger x, final BigInteger y)", "testcase": false, "constructor": false}, {"identifier": "createPublicKey", "parameters": "(final ECPoint ecPoint)", "modifiers": "protected", "return": "PublicKey", "signature": "PublicKey createPublicKey(final ECPoint ecPoint)", "full_signature": "protected PublicKey createPublicKey(final ECPoint ecPoint)", "class_method_signature": "ECDSAKeyGenerator.createPublicKey(final ECPoint ecPoint)", "testcase": false, "constructor": false}], "file": "core/util/src/main/java/hera/util/pki/ECDSAKeyGenerator.java"}, "focal_method": {"identifier": "createPublicKey", "parameters": "(final byte[] compressed)", "modifiers": "public", "return": "PublicKey", "body": "public PublicKey createPublicKey(final byte[] compressed) throws Exception {\n    return createPublicKey(ecParams.getCurve().decodePoint(compressed));\n  }", "signature": "PublicKey createPublicKey(final byte[] compressed)", "full_signature": "public PublicKey createPublicKey(final byte[] compressed)", "class_method_signature": "ECDSAKeyGenerator.createPublicKey(final byte[] compressed)", "testcase": false, "constructor": false, "invocations": ["createPublicKey", "decodePoint", "getCurve"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}