{"test_class": {"identifier": "DatamodelFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/helpers/DatamodelFilterTest.java"}, "test_case": {"identifier": "testPropertyFilterForLexeme", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPropertyFilterForLexeme() {\n\t\tLexemeIdValue l = Datamodel.makeWikidataLexemeIdValue(\"L42\");\n\t\tFormIdValue f = Datamodel.makeWikidataFormIdValue(\"L42-F1\");\n\t\tSenseIdValue s = Datamodel.makeWikidataSenseIdValue(\"L42-S1\");\n\t\tPropertyIdValue p1 = Datamodel.makeWikidataPropertyIdValue(\"P1\");\n\t\tPropertyIdValue p2 = Datamodel.makeWikidataPropertyIdValue(\"P2\");\n\t\tPropertyIdValue p3 = Datamodel.makeWikidataPropertyIdValue(\"P3\");\n\t\tPropertyIdValue p4 = Datamodel.makeWikidataPropertyIdValue(\"P4\");\n\n\t\tSet<PropertyIdValue> propertyFilter = new HashSet<>();\n\t\tpropertyFilter.add(p1);\n\t\tpropertyFilter.add(p3);\n\t\tDocumentDataFilter documentDataFilter = new DocumentDataFilter();\n\t\tdocumentDataFilter.setPropertyFilter(propertyFilter);\n\t\tDatamodelFilter filter = new DatamodelFilter(new DataObjectFactoryImpl(), documentDataFilter);\n\n\t\tLexemeDocument lexemeDocument = Datamodel.makeLexemeDocument(\n\t\t\t\tl,\n\t\t\t\tDatamodel.makeWikidataItemIdValue(\"Q1\"),\n\t\t\t\tDatamodel.makeWikidataItemIdValue(\"Q1\"),\n\t\t\t\tCollections.singletonList(Datamodel.makeMonolingualTextValue(\"foo\", \"en\")),\n\t\t\t\tArrays.asList(\n\t\t\t\t\t\tmakeTestStatementGroup(p1, l),\n\t\t\t\t\t\tmakeTestStatementGroup(p2, l),\n\t\t\t\t\t\tmakeTestStatementGroup(p3, l),\n\t\t\t\t\t\tmakeTestStatementGroup(p4, l)\n\t\t\t\t),\n\t\t\t\tCollections.singletonList(Datamodel.makeFormDocument(\n\t\t\t\t\t\tf,\n\t\t\t\t\t\tCollections.singletonList(Datamodel.makeMonolingualTextValue(\"foo\", \"en\")),\n\t\t\t\t\t\tCollections.emptyList(),\n\t\t\t\t\t\tArrays.asList(\n\t\t\t\t\t\t\t\tmakeTestStatementGroup(p1, f),\n\t\t\t\t\t\t\t\tmakeTestStatementGroup(p2, f),\n\t\t\t\t\t\t\t\tmakeTestStatementGroup(p3, f)\n\t\t\t\t\t\t)\n\t\t\t\t)),\n\t\t\t\tCollections.singletonList(Datamodel.makeSenseDocument(\n\t\t\t\t\t\ts,\n\t\t\t\t\t\tCollections.singletonList(Datamodel.makeMonolingualTextValue(\"foo\", \"en\")),\n\t\t\t\t\t\tArrays.asList(\n\t\t\t\t\t\t\t\tmakeTestStatementGroup(p1, s),\n\t\t\t\t\t\t\t\tmakeTestStatementGroup(p2, s),\n\t\t\t\t\t\t\t\tmakeTestStatementGroup(p3, s)\n\t\t\t\t\t\t)\n\t\t\t\t))\n\t\t);\n\n\t\tLexemeDocument lexemeDocumentFiltered = Datamodel.makeLexemeDocument(\n\t\t\t\tl,\n\t\t\t\tDatamodel.makeWikidataItemIdValue(\"Q1\"),\n\t\t\t\tDatamodel.makeWikidataItemIdValue(\"Q1\"),\n\t\t\t\tCollections.singletonList(Datamodel.makeMonolingualTextValue(\"foo\", \"en\")),\n\t\t\t\tArrays.asList(\n\t\t\t\t\t\tmakeTestStatementGroup(p1, l),\n\t\t\t\t\t\tmakeTestStatementGroup(p3, l)\n\t\t\t\t),\n\t\t\t\tCollections.singletonList(Datamodel.makeFormDocument(\n\t\t\t\t\t\tf,\n\t\t\t\t\t\tCollections.singletonList(Datamodel.makeMonolingualTextValue(\"foo\", \"en\")),\n\t\t\t\t\t\tCollections.emptyList(),\n\t\t\t\t\t\tArrays.asList(\n\t\t\t\t\t\t\t\tmakeTestStatementGroup(p1, f),\n\t\t\t\t\t\t\t\tmakeTestStatementGroup(p3, f)\n\t\t\t\t\t\t)\n\t\t\t\t)),\n\t\t\t\tCollections.singletonList(Datamodel.makeSenseDocument(\n\t\t\t\t\t\ts,\n\t\t\t\t\t\tCollections.singletonList(Datamodel.makeMonolingualTextValue(\"foo\", \"en\")),\n\t\t\t\t\t\tArrays.asList(\n\t\t\t\t\t\t\t\tmakeTestStatementGroup(p1, s),\n\t\t\t\t\t\t\t\tmakeTestStatementGroup(p3, s)\n\t\t\t\t\t\t)\n\t\t\t\t))\n\t\t);\n\n\t\tassertEquals(lexemeDocumentFiltered, filter.filter(lexemeDocument));\n\t}", "signature": "void testPropertyFilterForLexeme()", "full_signature": "@Test public void testPropertyFilterForLexeme()", "class_method_signature": "DatamodelFilterTest.testPropertyFilterForLexeme()", "testcase": true, "constructor": false, "invocations": ["makeWikidataLexemeIdValue", "makeWikidataFormIdValue", "makeWikidataSenseIdValue", "makeWikidataPropertyIdValue", "makeWikidataPropertyIdValue", "makeWikidataPropertyIdValue", "makeWikidataPropertyIdValue", "add", "add", "setPropertyFilter", "makeLexemeDocument", "makeWikidataItemIdValue", "makeWikidataItemIdValue", "singletonList", "makeMonolingualTextValue", "asList", "makeTestStatementGroup", "makeTestStatementGroup", "makeTestStatementGroup", "makeTestStatementGroup", "singletonList", "makeFormDocument", "singletonList", "makeMonolingualTextValue", "emptyList", "asList", "makeTestStatementGroup", "makeTestStatementGroup", "makeTestStatementGroup", "singletonList", "makeSenseDocument", "singletonList", "makeMonolingualTextValue", "asList", "makeTestStatementGroup", "makeTestStatementGroup", "makeTestStatementGroup", "makeLexemeDocument", "makeWikidataItemIdValue", "makeWikidataItemIdValue", "singletonList", "makeMonolingualTextValue", "asList", "makeTestStatementGroup", "makeTestStatementGroup", "singletonList", "makeFormDocument", "singletonList", "makeMonolingualTextValue", "emptyList", "asList", "makeTestStatementGroup", "makeTestStatementGroup", "singletonList", "makeSenseDocument", "singletonList", "makeMonolingualTextValue", "asList", "makeTestStatementGroup", "makeTestStatementGroup", "assertEquals", "filter"]}, "focal_class": {"identifier": "DatamodelFilter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final DataObjectFactory dataObjectFactory;", "modifier": "private final", "type": "DataObjectFactory", "declarator": "dataObjectFactory", "var_name": "dataObjectFactory"}, {"original_string": "private final DocumentDataFilter filter;", "modifier": "private final", "type": "DocumentDataFilter", "declarator": "filter", "var_name": "filter"}], "methods": [{"identifier": "DatamodelFilter", "parameters": "(DataObjectFactory dataObjectFactory, DocumentDataFilter filter)", "modifiers": "public", "return": "", "signature": " DatamodelFilter(DataObjectFactory dataObjectFactory, DocumentDataFilter filter)", "full_signature": "public  DatamodelFilter(DataObjectFactory dataObjectFactory, DocumentDataFilter filter)", "class_method_signature": "DatamodelFilter.DatamodelFilter(DataObjectFactory dataObjectFactory, DocumentDataFilter filter)", "testcase": false, "constructor": true}, {"identifier": "filter", "parameters": "(ItemDocument item)", "modifiers": "public", "return": "ItemDocument", "signature": "ItemDocument filter(ItemDocument item)", "full_signature": "public ItemDocument filter(ItemDocument item)", "class_method_signature": "DatamodelFilter.filter(ItemDocument item)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(PropertyDocument property)", "modifiers": "public", "return": "PropertyDocument", "signature": "PropertyDocument filter(PropertyDocument property)", "full_signature": "public PropertyDocument filter(PropertyDocument property)", "class_method_signature": "DatamodelFilter.filter(PropertyDocument property)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(MediaInfoDocument mediaInfo)", "modifiers": "public", "return": "MediaInfoDocument", "signature": "MediaInfoDocument filter(MediaInfoDocument mediaInfo)", "full_signature": "public MediaInfoDocument filter(MediaInfoDocument mediaInfo)", "class_method_signature": "DatamodelFilter.filter(MediaInfoDocument mediaInfo)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(LexemeDocument lexeme)", "modifiers": "public", "return": "LexemeDocument", "signature": "LexemeDocument filter(LexemeDocument lexeme)", "full_signature": "public LexemeDocument filter(LexemeDocument lexeme)", "class_method_signature": "DatamodelFilter.filter(LexemeDocument lexeme)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(FormDocument form)", "modifiers": "public", "return": "FormDocument", "signature": "FormDocument filter(FormDocument form)", "full_signature": "public FormDocument filter(FormDocument form)", "class_method_signature": "DatamodelFilter.filter(FormDocument form)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(SenseDocument sense)", "modifiers": "public", "return": "SenseDocument", "signature": "SenseDocument filter(SenseDocument sense)", "full_signature": "public SenseDocument filter(SenseDocument sense)", "class_method_signature": "DatamodelFilter.filter(SenseDocument sense)", "testcase": false, "constructor": false}, {"identifier": "filterForms", "parameters": "(List<FormDocument> forms)", "modifiers": "private", "return": "List<FormDocument>", "signature": "List<FormDocument> filterForms(List<FormDocument> forms)", "full_signature": "private List<FormDocument> filterForms(List<FormDocument> forms)", "class_method_signature": "DatamodelFilter.filterForms(List<FormDocument> forms)", "testcase": false, "constructor": false}, {"identifier": "filterSenses", "parameters": "(List<SenseDocument> senses)", "modifiers": "private", "return": "List<SenseDocument>", "signature": "List<SenseDocument> filterSenses(List<SenseDocument> senses)", "full_signature": "private List<SenseDocument> filterSenses(List<SenseDocument> senses)", "class_method_signature": "DatamodelFilter.filterSenses(List<SenseDocument> senses)", "testcase": false, "constructor": false}, {"identifier": "flatten", "parameters": "(Collection<List<T>> values)", "modifiers": "private", "return": "List<T>", "signature": "List<T> flatten(Collection<List<T>> values)", "full_signature": "private List<T> flatten(Collection<List<T>> values)", "class_method_signature": "DatamodelFilter.flatten(Collection<List<T>> values)", "testcase": false, "constructor": false}, {"identifier": "filterMonoLingualTextValues", "parameters": "(Collection<MonolingualTextValue> values)", "modifiers": "private", "return": "List<MonolingualTextValue>", "signature": "List<MonolingualTextValue> filterMonoLingualTextValues(Collection<MonolingualTextValue> values)", "full_signature": "private List<MonolingualTextValue> filterMonoLingualTextValues(Collection<MonolingualTextValue> values)", "class_method_signature": "DatamodelFilter.filterMonoLingualTextValues(Collection<MonolingualTextValue> values)", "testcase": false, "constructor": false}, {"identifier": "filterStatementGroups", "parameters": "(List<StatementGroup> statementGroups)", "modifiers": "private", "return": "List<StatementGroup>", "signature": "List<StatementGroup> filterStatementGroups(List<StatementGroup> statementGroups)", "full_signature": "private List<StatementGroup> filterStatementGroups(List<StatementGroup> statementGroups)", "class_method_signature": "DatamodelFilter.filterStatementGroups(List<StatementGroup> statementGroups)", "testcase": false, "constructor": false}, {"identifier": "filterSiteLinks", "parameters": "(Map<String, SiteLink> siteLinks)", "modifiers": "private", "return": "Map<String, SiteLink>", "signature": "Map<String, SiteLink> filterSiteLinks(Map<String, SiteLink> siteLinks)", "full_signature": "private Map<String, SiteLink> filterSiteLinks(Map<String, SiteLink> siteLinks)", "class_method_signature": "DatamodelFilter.filterSiteLinks(Map<String, SiteLink> siteLinks)", "testcase": false, "constructor": false}], "file": "wdtk-datamodel/src/main/java/org/wikidata/wdtk/datamodel/helpers/DatamodelFilter.java"}, "focal_method": {"identifier": "filter", "parameters": "(ItemDocument item)", "modifiers": "public", "return": "ItemDocument", "body": "public ItemDocument filter(ItemDocument item) {\n\t\treturn dataObjectFactory.getItemDocument(\n\t\t\t\titem.getEntityId(),\n\t\t\t\tfilterMonoLingualTextValues(item.getLabels().values()),\n\t\t\t\tfilterMonoLingualTextValues(item.getDescriptions().values()),\n\t\t\t\tfilterMonoLingualTextValues(flatten(item.getAliases().values())),\n\t\t\t\tfilterStatementGroups(item.getStatementGroups()),\n\t\t\t\tfilterSiteLinks(item.getSiteLinks()),\n\t\t\t\titem.getRevisionId()\n\t\t);\n\t}", "signature": "ItemDocument filter(ItemDocument item)", "full_signature": "public ItemDocument filter(ItemDocument item)", "class_method_signature": "DatamodelFilter.filter(ItemDocument item)", "testcase": false, "constructor": false, "invocations": ["getItemDocument", "getEntityId", "filterMonoLingualTextValues", "values", "getLabels", "filterMonoLingualTextValues", "values", "getDescriptions", "filterMonoLingualTextValues", "flatten", "values", "getAliases", "filterStatementGroups", "getStatementGroups", "filterSiteLinks", "getSiteLinks", "getRevisionId"]}, "repository": {"repo_id": 16144428, "url": "https://github.com/Wikidata/Wikidata-Toolkit", "language": "Java", "is_fork": false, "fork_count": 80, "stargazer_count": 264, "size": 11241, "license": "licensed"}}