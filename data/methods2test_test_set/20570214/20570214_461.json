{"test_class": {"identifier": "RegistryTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/RegistryTest.java"}, "test_case": {"identifier": "testGetInputPrimitive_encryptOnly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetInputPrimitive_encryptOnly() throws Exception {\n    assertThat(Registry.getInputPrimitive(EncryptOnly.class)).isEqualTo(Aead.class);\n    assertThat(Registry.getInputPrimitive(Aead.class)).isEqualTo(Aead.class);\n  }", "signature": "void testGetInputPrimitive_encryptOnly()", "full_signature": "@Test public void testGetInputPrimitive_encryptOnly()", "class_method_signature": "RegistryTest.testGetInputPrimitive_encryptOnly()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "getInputPrimitive", "isEqualTo", "assertThat", "getInputPrimitive"]}, "focal_class": {"identifier": "Registry", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(Registry.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(Registry.class.getName())", "var_name": "logger"}, {"original_string": "private static final ConcurrentMap<String, KeyManagerContainer> keyManagerMap =\n      new ConcurrentHashMap<>();", "modifier": "private static final", "type": "ConcurrentMap<String, KeyManagerContainer>", "declarator": "keyManagerMap =\n      new ConcurrentHashMap<>()", "var_name": "keyManagerMap"}, {"original_string": "private static final ConcurrentMap<String, KeyDeriverContainer> keyDeriverMap =\n      new ConcurrentHashMap<>();", "modifier": "private static final", "type": "ConcurrentMap<String, KeyDeriverContainer>", "declarator": "keyDeriverMap =\n      new ConcurrentHashMap<>()", "var_name": "keyDeriverMap"}, {"original_string": "private static final ConcurrentMap<String, Boolean> newKeyAllowedMap =\n      new ConcurrentHashMap<>();", "modifier": "private static final", "type": "ConcurrentMap<String, Boolean>", "declarator": "newKeyAllowedMap =\n      new ConcurrentHashMap<>()", "var_name": "newKeyAllowedMap"}, {"original_string": "private static final ConcurrentMap<String, Catalogue<?>> catalogueMap =\n      new ConcurrentHashMap<>();", "modifier": "private static final", "type": "ConcurrentMap<String, Catalogue<?>>", "declarator": "catalogueMap =\n      new ConcurrentHashMap<>()", "var_name": "catalogueMap"}, {"original_string": "private static final ConcurrentMap<Class<?>, PrimitiveWrapper<?, ?>> primitiveWrapperMap =\n      new ConcurrentHashMap<>();", "modifier": "private static final", "type": "ConcurrentMap<Class<?>, PrimitiveWrapper<?, ?>>", "declarator": "primitiveWrapperMap =\n      new ConcurrentHashMap<>()", "var_name": "primitiveWrapperMap"}], "methods": [{"identifier": "createContainerFor", "parameters": "(KeyManager<P> keyManager)", "modifiers": "private static", "return": "KeyManagerContainer", "signature": "KeyManagerContainer createContainerFor(KeyManager<P> keyManager)", "full_signature": "private static KeyManagerContainer createContainerFor(KeyManager<P> keyManager)", "class_method_signature": "Registry.createContainerFor(KeyManager<P> keyManager)", "testcase": false, "constructor": false}, {"identifier": "createContainerFor", "parameters": "(\n      KeyTypeManager<KeyProtoT> keyManager)", "modifiers": "private static", "return": "KeyManagerContainer", "signature": "KeyManagerContainer createContainerFor(\n      KeyTypeManager<KeyProtoT> keyManager)", "full_signature": "private static KeyManagerContainer createContainerFor(\n      KeyTypeManager<KeyProtoT> keyManager)", "class_method_signature": "Registry.createContainerFor(\n      KeyTypeManager<KeyProtoT> keyManager)", "testcase": false, "constructor": false}, {"identifier": "createPrivateKeyContainerFor", "parameters": "(\n          final PrivateKeyTypeManager<KeyProtoT, PublicKeyProtoT> privateKeyTypeManager,\n          final KeyTypeManager<PublicKeyProtoT> publicKeyTypeManager)", "modifiers": "private static", "return": "KeyManagerContainer", "signature": "KeyManagerContainer createPrivateKeyContainerFor(\n          final PrivateKeyTypeManager<KeyProtoT, PublicKeyProtoT> privateKeyTypeManager,\n          final KeyTypeManager<PublicKeyProtoT> publicKeyTypeManager)", "full_signature": "private static KeyManagerContainer createPrivateKeyContainerFor(\n          final PrivateKeyTypeManager<KeyProtoT, PublicKeyProtoT> privateKeyTypeManager,\n          final KeyTypeManager<PublicKeyProtoT> publicKeyTypeManager)", "class_method_signature": "Registry.createPrivateKeyContainerFor(\n          final PrivateKeyTypeManager<KeyProtoT, PublicKeyProtoT> privateKeyTypeManager,\n          final KeyTypeManager<PublicKeyProtoT> publicKeyTypeManager)", "testcase": false, "constructor": false}, {"identifier": "createDeriverFor", "parameters": "(\n      final KeyTypeManager<KeyProtoT> keyManager)", "modifiers": "private static", "return": "KeyDeriverContainer", "signature": "KeyDeriverContainer createDeriverFor(\n      final KeyTypeManager<KeyProtoT> keyManager)", "full_signature": "private static KeyDeriverContainer createDeriverFor(\n      final KeyTypeManager<KeyProtoT> keyManager)", "class_method_signature": "Registry.createDeriverFor(\n      final KeyTypeManager<KeyProtoT> keyManager)", "testcase": false, "constructor": false}, {"identifier": "getKeyManagerContainerOrThrow", "parameters": "(String typeUrl)", "modifiers": "private static synchronized", "return": "KeyManagerContainer", "signature": "KeyManagerContainer getKeyManagerContainerOrThrow(String typeUrl)", "full_signature": "private static synchronized KeyManagerContainer getKeyManagerContainerOrThrow(String typeUrl)", "class_method_signature": "Registry.getKeyManagerContainerOrThrow(String typeUrl)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "static synchronized", "return": "void", "signature": "void reset()", "full_signature": "static synchronized void reset()", "class_method_signature": "Registry.reset()", "testcase": false, "constructor": false}, {"identifier": "addCatalogue", "parameters": "(String catalogueName, Catalogue<?> catalogue)", "modifiers": "@Deprecated public static synchronized", "return": "void", "signature": "void addCatalogue(String catalogueName, Catalogue<?> catalogue)", "full_signature": "@Deprecated public static synchronized void addCatalogue(String catalogueName, Catalogue<?> catalogue)", "class_method_signature": "Registry.addCatalogue(String catalogueName, Catalogue<?> catalogue)", "testcase": false, "constructor": false}, {"identifier": "getCatalogue", "parameters": "(String catalogueName)", "modifiers": "@Deprecated public static", "return": "Catalogue<?>", "signature": "Catalogue<?> getCatalogue(String catalogueName)", "full_signature": "@Deprecated public static Catalogue<?> getCatalogue(String catalogueName)", "class_method_signature": "Registry.getCatalogue(String catalogueName)", "testcase": false, "constructor": false}, {"identifier": "checkNotNull", "parameters": "(T reference)", "modifiers": "private static", "return": "T", "signature": "T checkNotNull(T reference)", "full_signature": "private static T checkNotNull(T reference)", "class_method_signature": "Registry.checkNotNull(T reference)", "testcase": false, "constructor": false}, {"identifier": "registerKeyManager", "parameters": "(final KeyManager<P> manager)", "modifiers": "public static synchronized", "return": "void", "signature": "void registerKeyManager(final KeyManager<P> manager)", "full_signature": "public static synchronized void registerKeyManager(final KeyManager<P> manager)", "class_method_signature": "Registry.registerKeyManager(final KeyManager<P> manager)", "testcase": false, "constructor": false}, {"identifier": "ensureKeyManagerInsertable", "parameters": "(\n      String typeUrl, Class<?> implementingClass, boolean newKeyAllowed)", "modifiers": "private static synchronized", "return": "void", "signature": "void ensureKeyManagerInsertable(\n      String typeUrl, Class<?> implementingClass, boolean newKeyAllowed)", "full_signature": "private static synchronized void ensureKeyManagerInsertable(\n      String typeUrl, Class<?> implementingClass, boolean newKeyAllowed)", "class_method_signature": "Registry.ensureKeyManagerInsertable(\n      String typeUrl, Class<?> implementingClass, boolean newKeyAllowed)", "testcase": false, "constructor": false}, {"identifier": "registerKeyManager", "parameters": "(\n      final KeyManager<P> manager, boolean newKeyAllowed)", "modifiers": "public static synchronized", "return": "void", "signature": "void registerKeyManager(\n      final KeyManager<P> manager, boolean newKeyAllowed)", "full_signature": "public static synchronized void registerKeyManager(\n      final KeyManager<P> manager, boolean newKeyAllowed)", "class_method_signature": "Registry.registerKeyManager(\n      final KeyManager<P> manager, boolean newKeyAllowed)", "testcase": false, "constructor": false}, {"identifier": "registerKeyManager", "parameters": "(\n      final KeyTypeManager<KeyProtoT> manager, boolean newKeyAllowed)", "modifiers": "public static synchronized", "return": "void", "signature": "void registerKeyManager(\n      final KeyTypeManager<KeyProtoT> manager, boolean newKeyAllowed)", "full_signature": "public static synchronized void registerKeyManager(\n      final KeyTypeManager<KeyProtoT> manager, boolean newKeyAllowed)", "class_method_signature": "Registry.registerKeyManager(\n      final KeyTypeManager<KeyProtoT> manager, boolean newKeyAllowed)", "testcase": false, "constructor": false}, {"identifier": "registerAsymmetricKeyManagers", "parameters": "(\n          final PrivateKeyTypeManager<KeyProtoT, PublicKeyProtoT> privateKeyTypeManager,\n          final KeyTypeManager<PublicKeyProtoT> publicKeyTypeManager,\n          boolean newKeyAllowed)", "modifiers": "public static synchronized", "return": "void", "signature": "void registerAsymmetricKeyManagers(\n          final PrivateKeyTypeManager<KeyProtoT, PublicKeyProtoT> privateKeyTypeManager,\n          final KeyTypeManager<PublicKeyProtoT> publicKeyTypeManager,\n          boolean newKeyAllowed)", "full_signature": "public static synchronized void registerAsymmetricKeyManagers(\n          final PrivateKeyTypeManager<KeyProtoT, PublicKeyProtoT> privateKeyTypeManager,\n          final KeyTypeManager<PublicKeyProtoT> publicKeyTypeManager,\n          boolean newKeyAllowed)", "class_method_signature": "Registry.registerAsymmetricKeyManagers(\n          final PrivateKeyTypeManager<KeyProtoT, PublicKeyProtoT> privateKeyTypeManager,\n          final KeyTypeManager<PublicKeyProtoT> publicKeyTypeManager,\n          boolean newKeyAllowed)", "testcase": false, "constructor": false}, {"identifier": "registerKeyManager", "parameters": "(\n      String typeUrl, final KeyManager<P> manager)", "modifiers": "@Deprecated public static synchronized", "return": "void", "signature": "void registerKeyManager(\n      String typeUrl, final KeyManager<P> manager)", "full_signature": "@Deprecated public static synchronized void registerKeyManager(\n      String typeUrl, final KeyManager<P> manager)", "class_method_signature": "Registry.registerKeyManager(\n      String typeUrl, final KeyManager<P> manager)", "testcase": false, "constructor": false}, {"identifier": "registerKeyManager", "parameters": "(\n      String typeUrl, final KeyManager<P> manager, boolean newKeyAllowed)", "modifiers": "@Deprecated public static synchronized", "return": "void", "signature": "void registerKeyManager(\n      String typeUrl, final KeyManager<P> manager, boolean newKeyAllowed)", "full_signature": "@Deprecated public static synchronized void registerKeyManager(\n      String typeUrl, final KeyManager<P> manager, boolean newKeyAllowed)", "class_method_signature": "Registry.registerKeyManager(\n      String typeUrl, final KeyManager<P> manager, boolean newKeyAllowed)", "testcase": false, "constructor": false}, {"identifier": "registerPrimitiveWrapper", "parameters": "(\n      final PrimitiveWrapper<B, P> wrapper)", "modifiers": "public static synchronized", "return": "void", "signature": "void registerPrimitiveWrapper(\n      final PrimitiveWrapper<B, P> wrapper)", "full_signature": "public static synchronized void registerPrimitiveWrapper(\n      final PrimitiveWrapper<B, P> wrapper)", "class_method_signature": "Registry.registerPrimitiveWrapper(\n      final PrimitiveWrapper<B, P> wrapper)", "testcase": false, "constructor": false}, {"identifier": "getKeyManager", "parameters": "(String typeUrl)", "modifiers": "@Deprecated public static", "return": "KeyManager<P>", "signature": "KeyManager<P> getKeyManager(String typeUrl)", "full_signature": "@Deprecated public static KeyManager<P> getKeyManager(String typeUrl)", "class_method_signature": "Registry.getKeyManager(String typeUrl)", "testcase": false, "constructor": false}, {"identifier": "getUntypedKeyManager", "parameters": "(String typeUrl)", "modifiers": "public static", "return": "KeyManager<?>", "signature": "KeyManager<?> getUntypedKeyManager(String typeUrl)", "full_signature": "public static KeyManager<?> getUntypedKeyManager(String typeUrl)", "class_method_signature": "Registry.getUntypedKeyManager(String typeUrl)", "testcase": false, "constructor": false}, {"identifier": "getKeyManager", "parameters": "(String typeUrl, Class<P> primitiveClass)", "modifiers": "public static", "return": "KeyManager<P>", "signature": "KeyManager<P> getKeyManager(String typeUrl, Class<P> primitiveClass)", "full_signature": "public static KeyManager<P> getKeyManager(String typeUrl, Class<P> primitiveClass)", "class_method_signature": "Registry.getKeyManager(String typeUrl, Class<P> primitiveClass)", "testcase": false, "constructor": false}, {"identifier": "toCommaSeparatedString", "parameters": "(Set<Class<?>> setOfClasses)", "modifiers": "private static", "return": "String", "signature": "String toCommaSeparatedString(Set<Class<?>> setOfClasses)", "full_signature": "private static String toCommaSeparatedString(Set<Class<?>> setOfClasses)", "class_method_signature": "Registry.toCommaSeparatedString(Set<Class<?>> setOfClasses)", "testcase": false, "constructor": false}, {"identifier": "getKeyManagerInternal", "parameters": "(String typeUrl, Class<P> primitiveClass)", "modifiers": "private static", "return": "KeyManager<P>", "signature": "KeyManager<P> getKeyManagerInternal(String typeUrl, Class<P> primitiveClass)", "full_signature": "private static KeyManager<P> getKeyManagerInternal(String typeUrl, Class<P> primitiveClass)", "class_method_signature": "Registry.getKeyManagerInternal(String typeUrl, Class<P> primitiveClass)", "testcase": false, "constructor": false}, {"identifier": "newKeyData", "parameters": "(KeyTemplate keyTemplate)", "modifiers": "public static synchronized", "return": "KeyData", "signature": "KeyData newKeyData(KeyTemplate keyTemplate)", "full_signature": "public static synchronized KeyData newKeyData(KeyTemplate keyTemplate)", "class_method_signature": "Registry.newKeyData(KeyTemplate keyTemplate)", "testcase": false, "constructor": false}, {"identifier": "newKey", "parameters": "(KeyTemplate keyTemplate)", "modifiers": "public static synchronized", "return": "MessageLite", "signature": "MessageLite newKey(KeyTemplate keyTemplate)", "full_signature": "public static synchronized MessageLite newKey(KeyTemplate keyTemplate)", "class_method_signature": "Registry.newKey(KeyTemplate keyTemplate)", "testcase": false, "constructor": false}, {"identifier": "newKey", "parameters": "(String typeUrl, MessageLite format)", "modifiers": "public static synchronized", "return": "MessageLite", "signature": "MessageLite newKey(String typeUrl, MessageLite format)", "full_signature": "public static synchronized MessageLite newKey(String typeUrl, MessageLite format)", "class_method_signature": "Registry.newKey(String typeUrl, MessageLite format)", "testcase": false, "constructor": false}, {"identifier": "deriveKey", "parameters": "(KeyTemplate keyTemplate, InputStream randomStream)", "modifiers": "static synchronized", "return": "KeyData", "signature": "KeyData deriveKey(KeyTemplate keyTemplate, InputStream randomStream)", "full_signature": "static synchronized KeyData deriveKey(KeyTemplate keyTemplate, InputStream randomStream)", "class_method_signature": "Registry.deriveKey(KeyTemplate keyTemplate, InputStream randomStream)", "testcase": false, "constructor": false}, {"identifier": "getPublicKeyData", "parameters": "(String typeUrl, ByteString serializedPrivateKey)", "modifiers": "public static", "return": "KeyData", "signature": "KeyData getPublicKeyData(String typeUrl, ByteString serializedPrivateKey)", "full_signature": "public static KeyData getPublicKeyData(String typeUrl, ByteString serializedPrivateKey)", "class_method_signature": "Registry.getPublicKeyData(String typeUrl, ByteString serializedPrivateKey)", "testcase": false, "constructor": false}, {"identifier": "getPrimitive", "parameters": "(String typeUrl, MessageLite key)", "modifiers": "@Deprecated @SuppressWarnings(\"TypeParameterUnusedInFormals\") public static", "return": "P", "signature": "P getPrimitive(String typeUrl, MessageLite key)", "full_signature": "@Deprecated @SuppressWarnings(\"TypeParameterUnusedInFormals\") public static P getPrimitive(String typeUrl, MessageLite key)", "class_method_signature": "Registry.getPrimitive(String typeUrl, MessageLite key)", "testcase": false, "constructor": false}, {"identifier": "getPrimitive", "parameters": "(String typeUrl, MessageLite key, Class<P> primitiveClass)", "modifiers": "public static", "return": "P", "signature": "P getPrimitive(String typeUrl, MessageLite key, Class<P> primitiveClass)", "full_signature": "public static P getPrimitive(String typeUrl, MessageLite key, Class<P> primitiveClass)", "class_method_signature": "Registry.getPrimitive(String typeUrl, MessageLite key, Class<P> primitiveClass)", "testcase": false, "constructor": false}, {"identifier": "getPrimitiveInternal", "parameters": "(\n      String typeUrl, MessageLite key, Class<P> primitiveClass)", "modifiers": "private static", "return": "P", "signature": "P getPrimitiveInternal(\n      String typeUrl, MessageLite key, Class<P> primitiveClass)", "full_signature": "private static P getPrimitiveInternal(\n      String typeUrl, MessageLite key, Class<P> primitiveClass)", "class_method_signature": "Registry.getPrimitiveInternal(\n      String typeUrl, MessageLite key, Class<P> primitiveClass)", "testcase": false, "constructor": false}, {"identifier": "getPrimitive", "parameters": "(String typeUrl, ByteString serializedKey)", "modifiers": "@Deprecated @SuppressWarnings(\"TypeParameterUnusedInFormals\") public static", "return": "P", "signature": "P getPrimitive(String typeUrl, ByteString serializedKey)", "full_signature": "@Deprecated @SuppressWarnings(\"TypeParameterUnusedInFormals\") public static P getPrimitive(String typeUrl, ByteString serializedKey)", "class_method_signature": "Registry.getPrimitive(String typeUrl, ByteString serializedKey)", "testcase": false, "constructor": false}, {"identifier": "getPrimitive", "parameters": "(\n      String typeUrl, ByteString serializedKey, Class<P> primitiveClass)", "modifiers": "public static", "return": "P", "signature": "P getPrimitive(\n      String typeUrl, ByteString serializedKey, Class<P> primitiveClass)", "full_signature": "public static P getPrimitive(\n      String typeUrl, ByteString serializedKey, Class<P> primitiveClass)", "class_method_signature": "Registry.getPrimitive(\n      String typeUrl, ByteString serializedKey, Class<P> primitiveClass)", "testcase": false, "constructor": false}, {"identifier": "getPrimitiveInternal", "parameters": "(\n      String typeUrl, ByteString serializedKey, Class<P> primitiveClass)", "modifiers": "private static", "return": "P", "signature": "P getPrimitiveInternal(\n      String typeUrl, ByteString serializedKey, Class<P> primitiveClass)", "full_signature": "private static P getPrimitiveInternal(\n      String typeUrl, ByteString serializedKey, Class<P> primitiveClass)", "class_method_signature": "Registry.getPrimitiveInternal(\n      String typeUrl, ByteString serializedKey, Class<P> primitiveClass)", "testcase": false, "constructor": false}, {"identifier": "getPrimitive", "parameters": "(String typeUrl, byte[] serializedKey)", "modifiers": "@Deprecated @SuppressWarnings(\"TypeParameterUnusedInFormals\") public static", "return": "P", "signature": "P getPrimitive(String typeUrl, byte[] serializedKey)", "full_signature": "@Deprecated @SuppressWarnings(\"TypeParameterUnusedInFormals\") public static P getPrimitive(String typeUrl, byte[] serializedKey)", "class_method_signature": "Registry.getPrimitive(String typeUrl, byte[] serializedKey)", "testcase": false, "constructor": false}, {"identifier": "getPrimitive", "parameters": "(String typeUrl, byte[] serializedKey, Class<P> primitiveClass)", "modifiers": "public static", "return": "P", "signature": "P getPrimitive(String typeUrl, byte[] serializedKey, Class<P> primitiveClass)", "full_signature": "public static P getPrimitive(String typeUrl, byte[] serializedKey, Class<P> primitiveClass)", "class_method_signature": "Registry.getPrimitive(String typeUrl, byte[] serializedKey, Class<P> primitiveClass)", "testcase": false, "constructor": false}, {"identifier": "getPrimitive", "parameters": "(KeyData keyData)", "modifiers": "@Deprecated @SuppressWarnings(\"TypeParameterUnusedInFormals\") public static", "return": "P", "signature": "P getPrimitive(KeyData keyData)", "full_signature": "@Deprecated @SuppressWarnings(\"TypeParameterUnusedInFormals\") public static P getPrimitive(KeyData keyData)", "class_method_signature": "Registry.getPrimitive(KeyData keyData)", "testcase": false, "constructor": false}, {"identifier": "getPrimitive", "parameters": "(KeyData keyData, Class<P> primitiveClass)", "modifiers": "public static", "return": "P", "signature": "P getPrimitive(KeyData keyData, Class<P> primitiveClass)", "full_signature": "public static P getPrimitive(KeyData keyData, Class<P> primitiveClass)", "class_method_signature": "Registry.getPrimitive(KeyData keyData, Class<P> primitiveClass)", "testcase": false, "constructor": false}, {"identifier": "getPrimitives", "parameters": "(KeysetHandle keysetHandle)", "modifiers": "@Deprecated public static", "return": "PrimitiveSet<P>", "signature": "PrimitiveSet<P> getPrimitives(KeysetHandle keysetHandle)", "full_signature": "@Deprecated public static PrimitiveSet<P> getPrimitives(KeysetHandle keysetHandle)", "class_method_signature": "Registry.getPrimitives(KeysetHandle keysetHandle)", "testcase": false, "constructor": false}, {"identifier": "getPrimitives", "parameters": "(\n      KeysetHandle keysetHandle, Class<P> primitiveClass)", "modifiers": "public static", "return": "PrimitiveSet<P>", "signature": "PrimitiveSet<P> getPrimitives(\n      KeysetHandle keysetHandle, Class<P> primitiveClass)", "full_signature": "public static PrimitiveSet<P> getPrimitives(\n      KeysetHandle keysetHandle, Class<P> primitiveClass)", "class_method_signature": "Registry.getPrimitives(\n      KeysetHandle keysetHandle, Class<P> primitiveClass)", "testcase": false, "constructor": false}, {"identifier": "getPrimitives", "parameters": "(\n      KeysetHandle keysetHandle, final KeyManager<P> customManager)", "modifiers": "@Deprecated public static", "return": "PrimitiveSet<P>", "signature": "PrimitiveSet<P> getPrimitives(\n      KeysetHandle keysetHandle, final KeyManager<P> customManager)", "full_signature": "@Deprecated public static PrimitiveSet<P> getPrimitives(\n      KeysetHandle keysetHandle, final KeyManager<P> customManager)", "class_method_signature": "Registry.getPrimitives(\n      KeysetHandle keysetHandle, final KeyManager<P> customManager)", "testcase": false, "constructor": false}, {"identifier": "getPrimitives", "parameters": "(\n      KeysetHandle keysetHandle, final KeyManager<P> customManager, Class<P> primitiveClass)", "modifiers": "public static", "return": "PrimitiveSet<P>", "signature": "PrimitiveSet<P> getPrimitives(\n      KeysetHandle keysetHandle, final KeyManager<P> customManager, Class<P> primitiveClass)", "full_signature": "public static PrimitiveSet<P> getPrimitives(\n      KeysetHandle keysetHandle, final KeyManager<P> customManager, Class<P> primitiveClass)", "class_method_signature": "Registry.getPrimitives(\n      KeysetHandle keysetHandle, final KeyManager<P> customManager, Class<P> primitiveClass)", "testcase": false, "constructor": false}, {"identifier": "getPrimitivesInternal", "parameters": "(\n      KeysetHandle keysetHandle, final KeyManager<P> customManager, Class<P> primitiveClass)", "modifiers": "private static", "return": "PrimitiveSet<P>", "signature": "PrimitiveSet<P> getPrimitivesInternal(\n      KeysetHandle keysetHandle, final KeyManager<P> customManager, Class<P> primitiveClass)", "full_signature": "private static PrimitiveSet<P> getPrimitivesInternal(\n      KeysetHandle keysetHandle, final KeyManager<P> customManager, Class<P> primitiveClass)", "class_method_signature": "Registry.getPrimitivesInternal(\n      KeysetHandle keysetHandle, final KeyManager<P> customManager, Class<P> primitiveClass)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(PrimitiveSet<B> primitiveSet, Class<P> clazz)", "modifiers": "public static", "return": "P", "signature": "P wrap(PrimitiveSet<B> primitiveSet, Class<P> clazz)", "full_signature": "public static P wrap(PrimitiveSet<B> primitiveSet, Class<P> clazz)", "class_method_signature": "Registry.wrap(PrimitiveSet<B> primitiveSet, Class<P> clazz)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(PrimitiveSet<P> primitiveSet)", "modifiers": "public static", "return": "P", "signature": "P wrap(PrimitiveSet<P> primitiveSet)", "full_signature": "public static P wrap(PrimitiveSet<P> primitiveSet)", "class_method_signature": "Registry.wrap(PrimitiveSet<P> primitiveSet)", "testcase": false, "constructor": false}, {"identifier": "getInputPrimitive", "parameters": "(Class<?> wrappedPrimitive)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getInputPrimitive(Class<?> wrappedPrimitive)", "full_signature": "public static Class<?> getInputPrimitive(Class<?> wrappedPrimitive)", "class_method_signature": "Registry.getInputPrimitive(Class<?> wrappedPrimitive)", "testcase": false, "constructor": false}, {"identifier": "parseKeyData", "parameters": "(KeyData keyData)", "modifiers": "static", "return": "MessageLite", "signature": "MessageLite parseKeyData(KeyData keyData)", "full_signature": "static MessageLite parseKeyData(KeyData keyData)", "class_method_signature": "Registry.parseKeyData(KeyData keyData)", "testcase": false, "constructor": false}, {"identifier": "Registry", "parameters": "()", "modifiers": "private", "return": "", "signature": " Registry()", "full_signature": "private  Registry()", "class_method_signature": "Registry.Registry()", "testcase": false, "constructor": true}], "file": "java_src/src/main/java/com/google/crypto/tink/Registry.java"}, "focal_method": {"identifier": "getInputPrimitive", "parameters": "(Class<?> wrappedPrimitive)", "modifiers": "public static", "return": "Class<?>", "body": "public static Class<?> getInputPrimitive(Class<?> wrappedPrimitive) {\n    PrimitiveWrapper<?, ?> wrapper = primitiveWrapperMap.get(wrappedPrimitive);\n    if (wrapper == null) {\n      return null;\n    }\n    return wrapper.getInputPrimitiveClass();\n  }", "signature": "Class<?> getInputPrimitive(Class<?> wrappedPrimitive)", "full_signature": "public static Class<?> getInputPrimitive(Class<?> wrappedPrimitive)", "class_method_signature": "Registry.getInputPrimitive(Class<?> wrappedPrimitive)", "testcase": false, "constructor": false, "invocations": ["get", "getInputPrimitiveClass"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}