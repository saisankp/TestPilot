{"test_class": {"identifier": "TestMassConvertController", "superclass": "", "interfaces": "", "fields": [], "file": "webapp/src/test/java/net/flibusta/servlet/TestMassConvertController.java"}, "test_case": {"identifier": "testZipFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testZipFile() throws Exception {\n        MassConvertController controller = new MassConvertController();\n        BatchDao batchDao = mock(BatchDao.class);\n//        when(batchDao.findBatchPath(anyString(), anyString())).thenAnswer(new Answer<String>() {\n//            @Override\n//            public String answer(InvocationOnMock invocation) throws Throwable {\n//                return createTestFile((String) invocation.getArguments()[0], (String) invocation.getArguments()[1]);\n//            }\n//        });\n        when(batchDao.findBatchPath(anyString(), anyString())).thenReturn(null);\n\n        controller.batchDao = batchDao;\n\n        UrlDao urlDao = mock(UrlDao.class);\n        when(urlDao.findUrlInfo(\"http://flibusta.net/b/123/fb2\")).thenAnswer(new Answer<UrlInfo>() {\n            @Override\n            public UrlInfo answer(InvocationOnMock invocation) throws Throwable {\n                UrlInfo info = new UrlInfo();\n                info.setBookId(\"123\");\n                info.setSourceFormat(\"epub\");\n                return info;\n            }\n        });\n        when(urlDao.findUrlInfo(\"http://flibusta.net/b/345/fb2?t=def\")).thenAnswer(new Answer<UrlInfo>() {\n            @Override\n            public UrlInfo answer(InvocationOnMock invocation) throws Throwable {\n                UrlInfo info = new UrlInfo();\n                info.setBookId(\"345\");\n                info.setSourceFormat(\"epub\");\n                return info;\n            }\n        });\n\n        controller.urlDao = urlDao;\n\n\n        BookDao bookDao = mock(BookDao.class);\n        when(bookDao.findBook(\"123\", \"epub\")).thenReturn(null);\n        File testFile = createTestFile(\"345\", \"epub\");\n        when(bookDao.findBook(\"345\", \"epub\")).thenReturn(testFile);\n\n        controller.bookDao = bookDao;\n\n        controller.singleConverterController = new SingleUrlConverter() {\n            @Override\n            public void convert(String sourceUrl, String sourceMd5, String outputFormat, String sourceFormat, HttpServletResponse response) throws Exception {\n\n            }\n        };\n\n        controller.convert(\"123;abc;dd_345;def\", \"http://flibusta.net/b/{0}/fb2?t={1}\", \"epub\",\n                new HttpServletResponse() {\n            @Override\n            public void addCookie(Cookie cookie) {\n\n            }\n\n            @Override\n            public boolean containsHeader(String name) {\n                return false;\n            }\n\n            @Override\n            public String encodeURL(String url) {\n                return null;\n            }\n\n            @Override\n            public String encodeRedirectURL(String url) {\n                return null;\n            }\n\n            @Override\n            public String encodeUrl(String url) {\n                return null;\n            }\n\n            @Override\n            public String encodeRedirectUrl(String url) {\n                return null;\n            }\n\n            @Override\n            public void sendError(int sc, String msg) throws IOException {\n\n            }\n\n            @Override\n            public void sendError(int sc) throws IOException {\n\n            }\n\n            @Override\n            public void sendRedirect(String location) throws IOException {\n                System.out.println(\"location = \" + location);\n            }\n\n            @Override\n            public void setDateHeader(String name, long date) {\n\n            }\n\n            @Override\n            public void addDateHeader(String name, long date) {\n\n            }\n\n            @Override\n            public void setHeader(String name, String value) {\n\n            }\n\n            @Override\n            public void addHeader(String name, String value) {\n\n            }\n\n            @Override\n            public void setIntHeader(String name, int value) {\n\n            }\n\n            @Override\n            public void addIntHeader(String name, int value) {\n\n            }\n\n            @Override\n            public void setStatus(int sc) {\n\n            }\n\n            @Override\n            public void setStatus(int sc, String sm) {\n\n            }\n\n            @Override\n            public String getCharacterEncoding() {\n                return null;\n            }\n\n            @Override\n            public String getContentType() {\n                return null;\n            }\n\n            @Override\n            public ServletOutputStream getOutputStream() throws IOException {\n                return null;\n            }\n\n            @Override\n            public PrintWriter getWriter() throws IOException {\n                return null;\n            }\n\n            @Override\n            public void setCharacterEncoding(String charset) {\n\n            }\n\n            @Override\n            public void setContentLength(int len) {\n\n            }\n\n            @Override\n            public void setContentType(String type) {\n\n            }\n\n            @Override\n            public void setBufferSize(int size) {\n\n            }\n\n            @Override\n            public int getBufferSize() {\n                return 0;\n            }\n\n            @Override\n            public void flushBuffer() throws IOException {\n\n            }\n\n            @Override\n            public void resetBuffer() {\n\n            }\n\n            @Override\n            public boolean isCommitted() {\n                return false;\n            }\n\n            @Override\n            public void reset() {\n\n            }\n\n            @Override\n            public void setLocale(Locale loc) {\n\n            }\n\n            @Override\n            public Locale getLocale() {\n                return null;\n            }\n        });\n\n\n    }", "signature": "void testZipFile()", "full_signature": "@Test public void testZipFile()", "class_method_signature": "TestMassConvertController.testZipFile()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "findBatchPath", "anyString", "anyString", "mock", "thenAnswer", "when", "findUrlInfo", "setBookId", "setSourceFormat", "thenAnswer", "when", "findUrlInfo", "setBookId", "setSourceFormat", "mock", "thenReturn", "when", "findBook", "createTestFile", "thenReturn", "when", "findBook", "convert", "println"]}, "focal_class": {"identifier": "MassConvertController", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String PARAM_URL = \"url\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_URL = \"url\"", "var_name": "PARAM_URL"}, {"original_string": "public static final String PARAM_URL_TEMPLATE = \"urltemplate\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_URL_TEMPLATE = \"urltemplate\"", "var_name": "PARAM_URL_TEMPLATE"}, {"original_string": "public static final String PARAM_OUT_FORMAT = \"out\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_OUT_FORMAT = \"out\"", "var_name": "PARAM_OUT_FORMAT"}, {"original_string": "public static final String PARAM_SOURCE_FORMAT = \"src\";", "modifier": "public static final", "type": "String", "declarator": "PARAM_SOURCE_FORMAT = \"src\"", "var_name": "PARAM_SOURCE_FORMAT"}, {"original_string": "public static final String DEFAULT_OUT_FORMAT = \"mobi\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_OUT_FORMAT = \"mobi\"", "var_name": "DEFAULT_OUT_FORMAT"}, {"original_string": "public static final String DEFAULT_URL_TEMPLATE = \"http://flibusta.net/b/{0}/download\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_URL_TEMPLATE = \"http://flibusta.net/b/{0}/download\"", "var_name": "DEFAULT_URL_TEMPLATE"}, {"original_string": "private String staticRedirectUrlPrefix = null;", "modifier": "private", "type": "String", "declarator": "staticRedirectUrlPrefix = null", "var_name": "staticRedirectUrlPrefix"}, {"original_string": "private Boolean useXAccelRerirect = false;", "modifier": "private", "type": "Boolean", "declarator": "useXAccelRerirect = false", "var_name": "useXAccelRerirect"}, {"original_string": "private int convertersPoolSize = 10;", "modifier": "private", "type": "int", "declarator": "convertersPoolSize = 10", "var_name": "convertersPoolSize"}, {"original_string": "ExecutorService converterExecutor = Executors.newFixedThreadPool(convertersPoolSize);", "modifier": "", "type": "ExecutorService", "declarator": "converterExecutor = Executors.newFixedThreadPool(convertersPoolSize)", "var_name": "converterExecutor"}, {"original_string": "@Autowired\n    SingleUrlConverter  singleConverterController;", "modifier": "@Autowired", "type": "SingleUrlConverter", "declarator": "singleConverterController", "var_name": "singleConverterController"}, {"original_string": "@Autowired\n    BatchDao batchDao;", "modifier": "@Autowired", "type": "BatchDao", "declarator": "batchDao", "var_name": "batchDao"}, {"original_string": "@Autowired\n    UrlDao urlDao;", "modifier": "@Autowired", "type": "UrlDao", "declarator": "urlDao", "var_name": "urlDao"}, {"original_string": "@Autowired\n    BookDao bookDao;", "modifier": "@Autowired", "type": "BookDao", "declarator": "bookDao", "var_name": "bookDao"}], "methods": [{"identifier": "convert", "parameters": "(@RequestParam(PARAM_URL) String sourceUrlParams,\n                        @RequestParam(value = PARAM_URL_TEMPLATE, required = false, defaultValue = DEFAULT_URL_TEMPLATE) String sourceUrlTemplate,\n                        @RequestParam(value = PARAM_OUT_FORMAT, required = false, defaultValue = DEFAULT_OUT_FORMAT) String outputFormat,\n                        HttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/batch\", method = RequestMethod.GET) public", "return": "void", "signature": "void convert(@RequestParam(PARAM_URL) String sourceUrlParams,\n                        @RequestParam(value = PARAM_URL_TEMPLATE, required = false, defaultValue = DEFAULT_URL_TEMPLATE) String sourceUrlTemplate,\n                        @RequestParam(value = PARAM_OUT_FORMAT, required = false, defaultValue = DEFAULT_OUT_FORMAT) String outputFormat,\n                        HttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/batch\", method = RequestMethod.GET) public void convert(@RequestParam(PARAM_URL) String sourceUrlParams,\n                        @RequestParam(value = PARAM_URL_TEMPLATE, required = false, defaultValue = DEFAULT_URL_TEMPLATE) String sourceUrlTemplate,\n                        @RequestParam(value = PARAM_OUT_FORMAT, required = false, defaultValue = DEFAULT_OUT_FORMAT) String outputFormat,\n                        HttpServletResponse response)", "class_method_signature": "MassConvertController.convert(@RequestParam(PARAM_URL) String sourceUrlParams,\n                        @RequestParam(value = PARAM_URL_TEMPLATE, required = false, defaultValue = DEFAULT_URL_TEMPLATE) String sourceUrlTemplate,\n                        @RequestParam(value = PARAM_OUT_FORMAT, required = false, defaultValue = DEFAULT_OUT_FORMAT) String outputFormat,\n                        HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "sendRedirect", "parameters": "(HttpServletResponse response, String batchFilePath)", "modifiers": "private", "return": "void", "signature": "void sendRedirect(HttpServletResponse response, String batchFilePath)", "full_signature": "private void sendRedirect(HttpServletResponse response, String batchFilePath)", "class_method_signature": "MassConvertController.sendRedirect(HttpServletResponse response, String batchFilePath)", "testcase": false, "constructor": false}, {"identifier": "getSourceUrls", "parameters": "(String sourceUrlTemplate, String sourceUrlParams)", "modifiers": "private", "return": "String[]", "signature": "String[] getSourceUrls(String sourceUrlTemplate, String sourceUrlParams)", "full_signature": "private String[] getSourceUrls(String sourceUrlTemplate, String sourceUrlParams)", "class_method_signature": "MassConvertController.getSourceUrls(String sourceUrlTemplate, String sourceUrlParams)", "testcase": false, "constructor": false}, {"identifier": "zipFiles", "parameters": "(String[] sourceUrls, String outputFormat, String batchSignature)", "modifiers": "private", "return": "File", "signature": "File zipFiles(String[] sourceUrls, String outputFormat, String batchSignature)", "full_signature": "private File zipFiles(String[] sourceUrls, String outputFormat, String batchSignature)", "class_method_signature": "MassConvertController.zipFiles(String[] sourceUrls, String outputFormat, String batchSignature)", "testcase": false, "constructor": false}, {"identifier": "calculateBatchSignature", "parameters": "(String[] sourceUrls)", "modifiers": "private", "return": "String", "signature": "String calculateBatchSignature(String[] sourceUrls)", "full_signature": "private String calculateBatchSignature(String[] sourceUrls)", "class_method_signature": "MassConvertController.calculateBatchSignature(String[] sourceUrls)", "testcase": false, "constructor": false}, {"identifier": "createSingleConversionTask", "parameters": "(final String sourceUrl, final String outputFormat)", "modifiers": "private", "return": "Callable<Object>", "signature": "Callable<Object> createSingleConversionTask(final String sourceUrl, final String outputFormat)", "full_signature": "private Callable<Object> createSingleConversionTask(final String sourceUrl, final String outputFormat)", "class_method_signature": "MassConvertController.createSingleConversionTask(final String sourceUrl, final String outputFormat)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "MassConvertController.shutdown()", "testcase": false, "constructor": false}, {"identifier": "setStaticRedirectUrlPrefix", "parameters": "(String staticRedirectUrlPrefix)", "modifiers": "public", "return": "void", "signature": "void setStaticRedirectUrlPrefix(String staticRedirectUrlPrefix)", "full_signature": "public void setStaticRedirectUrlPrefix(String staticRedirectUrlPrefix)", "class_method_signature": "MassConvertController.setStaticRedirectUrlPrefix(String staticRedirectUrlPrefix)", "testcase": false, "constructor": false}, {"identifier": "setConvertersPoolSize", "parameters": "(int convertersPoolSize)", "modifiers": "public", "return": "void", "signature": "void setConvertersPoolSize(int convertersPoolSize)", "full_signature": "public void setConvertersPoolSize(int convertersPoolSize)", "class_method_signature": "MassConvertController.setConvertersPoolSize(int convertersPoolSize)", "testcase": false, "constructor": false}, {"identifier": "setUseXAccelRerirect", "parameters": "(Boolean useXAccelRerirect)", "modifiers": "public", "return": "void", "signature": "void setUseXAccelRerirect(Boolean useXAccelRerirect)", "full_signature": "public void setUseXAccelRerirect(Boolean useXAccelRerirect)", "class_method_signature": "MassConvertController.setUseXAccelRerirect(Boolean useXAccelRerirect)", "testcase": false, "constructor": false}], "file": "webapp/src/main/java/net/flibusta/servlet/MassConvertController.java"}, "focal_method": {"identifier": "convert", "parameters": "(@RequestParam(PARAM_URL) String sourceUrlParams,\n                        @RequestParam(value = PARAM_URL_TEMPLATE, required = false, defaultValue = DEFAULT_URL_TEMPLATE) String sourceUrlTemplate,\n                        @RequestParam(value = PARAM_OUT_FORMAT, required = false, defaultValue = DEFAULT_OUT_FORMAT) String outputFormat,\n                        HttpServletResponse response)", "modifiers": "@RequestMapping(value = \"/batch\", method = RequestMethod.GET) public", "return": "void", "body": "@RequestMapping(value = \"/batch\", method = RequestMethod.GET)\n    public void convert(@RequestParam(PARAM_URL) String sourceUrlParams,\n                        @RequestParam(value = PARAM_URL_TEMPLATE, required = false, defaultValue = DEFAULT_URL_TEMPLATE) String sourceUrlTemplate,\n                        @RequestParam(value = PARAM_OUT_FORMAT, required = false, defaultValue = DEFAULT_OUT_FORMAT) String outputFormat,\n                        HttpServletResponse response) throws Exception {\n\n        if (sourceUrlParams == null || sourceUrlParams.length() == 0) {\n            throw new Exception(\"Required parameter missing: \" + PARAM_URL);\n        }\n\n\n        String[] sourceUrls = getSourceUrls(sourceUrlTemplate, sourceUrlParams);\n        Arrays.sort(sourceUrls);\n\n        String batchSignature = calculateBatchSignature(sourceUrls);\n\n        String batchFilePath = batchDao.findBatchPath(batchSignature, outputFormat);\n\n        if (batchFilePath != null) { // already packed\n            sendRedirect(response, batchFilePath);\n            return;\n        }\n\n\n        List<Callable<Object>> tasks = new ArrayList<Callable<Object>>(sourceUrls.length);\n\n        for (final String sourceUrl : sourceUrls) {\n            tasks.add(createSingleConversionTask(sourceUrl, outputFormat));\n        }\n\n        converterExecutor.invokeAll(tasks); // make sure all files are converted\n\n\n        File batchFile = zipFiles(sourceUrls, outputFormat, batchSignature);\n\n        batchDao.addBatch(batchSignature, outputFormat, batchFile);\n        batchFilePath = batchDao.findBatchPath(batchSignature, outputFormat);\n        sendRedirect(response, batchFilePath);\n    }", "signature": "void convert(@RequestParam(PARAM_URL) String sourceUrlParams,\n                        @RequestParam(value = PARAM_URL_TEMPLATE, required = false, defaultValue = DEFAULT_URL_TEMPLATE) String sourceUrlTemplate,\n                        @RequestParam(value = PARAM_OUT_FORMAT, required = false, defaultValue = DEFAULT_OUT_FORMAT) String outputFormat,\n                        HttpServletResponse response)", "full_signature": "@RequestMapping(value = \"/batch\", method = RequestMethod.GET) public void convert(@RequestParam(PARAM_URL) String sourceUrlParams,\n                        @RequestParam(value = PARAM_URL_TEMPLATE, required = false, defaultValue = DEFAULT_URL_TEMPLATE) String sourceUrlTemplate,\n                        @RequestParam(value = PARAM_OUT_FORMAT, required = false, defaultValue = DEFAULT_OUT_FORMAT) String outputFormat,\n                        HttpServletResponse response)", "class_method_signature": "MassConvertController.convert(@RequestParam(PARAM_URL) String sourceUrlParams,\n                        @RequestParam(value = PARAM_URL_TEMPLATE, required = false, defaultValue = DEFAULT_URL_TEMPLATE) String sourceUrlTemplate,\n                        @RequestParam(value = PARAM_OUT_FORMAT, required = false, defaultValue = DEFAULT_OUT_FORMAT) String outputFormat,\n                        HttpServletResponse response)", "testcase": false, "constructor": false, "invocations": ["length", "getSourceUrls", "sort", "calculateBatchSignature", "findBatchPath", "sendRedirect", "add", "createSingleConversionTask", "invokeAll", "zipFiles", "addBatch", "findBatchPath", "sendRedirect"]}, "repository": {"repo_id": 8849911, "url": "https://github.com/EdvardEakins/FB2OnlineConverter", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 9, "size": 9119, "license": "licensed"}}