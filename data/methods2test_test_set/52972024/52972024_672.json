{"test_class": {"identifier": "CreateCollectionActorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CreateCollectionActor actor = new CreateCollectionActor();", "modifier": "private", "type": "CreateCollectionActor", "declarator": "actor = new CreateCollectionActor()", "var_name": "actor"}, {"original_string": "private IStrategyContainer container = new StrategyContainer();", "modifier": "private", "type": "IStrategyContainer", "declarator": "container = new StrategyContainer()", "var_name": "container"}], "file": "CommonFeatures/DatabasePostgresqlCreateCollectionIfNotExists/CreateCollectionActor/src/test/java/info/smart_tools/smartactors/database_postgresql_create_collection_if_not_exists/create_collection_actor/CreateCollectionActorTest.java"}, "test_case": {"identifier": "Should_CreateCollection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_CreateCollection() throws Exception {\n        CreateCollectionWrapper wrapper = mock(CreateCollectionWrapper.class);\n        when(wrapper.getCollectionName()).thenReturn(\"test\");\n        when(wrapper.getConnectionOptionsRegistrationName()).thenReturn(\"connectionOptions\");\n        when(wrapper.getOptions()).thenReturn(null);\n\n        ITask task = mock(ITask.class);\n        IOC.register(Keys.getOrAdd(\"db.collection.create-if-not-exists\"),\n                new ApplyFunctionToArgumentsStrategy(args -> task)\n        );\n        actor.createTable(wrapper);\n\n        verify(task, VerificationModeFactory.times(1)).execute();\n    }", "signature": "void Should_CreateCollection()", "full_signature": "@Test public void Should_CreateCollection()", "class_method_signature": "CreateCollectionActorTest.Should_CreateCollection()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getCollectionName", "thenReturn", "when", "getConnectionOptionsRegistrationName", "thenReturn", "when", "getOptions", "mock", "register", "getOrAdd", "createTable", "execute", "verify", "times"]}, "focal_class": {"identifier": "CreateCollectionActor", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createTable", "parameters": "(CreateCollectionWrapper message)", "modifiers": "public", "return": "void", "signature": "void createTable(CreateCollectionWrapper message)", "full_signature": "public void createTable(CreateCollectionWrapper message)", "class_method_signature": "CreateCollectionActor.createTable(CreateCollectionWrapper message)", "testcase": false, "constructor": false}], "file": "CommonFeatures/DatabasePostgresqlCreateCollectionIfNotExists/CreateCollectionActor/src/main/java/info/smart_tools/smartactors/database_postgresql_create_collection_if_not_exists/create_collection_actor/CreateCollectionActor.java"}, "focal_method": {"identifier": "createTable", "parameters": "(CreateCollectionWrapper message)", "modifiers": "public", "return": "void", "body": "public void createTable(CreateCollectionWrapper message) throws CreateCollectionActorException {\n        try {\n            final ConnectionOptions options = IOC.resolve(Keys.getOrAdd(message.getConnectionOptionsRegistrationName()));\n            final IPool pool = IOC.resolve(Keys.getOrAdd(\"PostgresConnectionPool\"), options);\n\n            String collectionName = message.getCollectionName();\n            try (PoolGuard guard = new PoolGuard(pool)) {\n                ITask task = IOC.resolve(\n                        Keys.getOrAdd(\"db.collection.create-if-not-exists\"),\n                        guard.getObject(),\n                        collectionName,\n                        message.getOptions()\n                );\n                task.execute();\n            } catch (TaskExecutionException | ResolutionException | PoolGuardException e) {\n                throw new CreateCollectionActorException(e);\n            }\n        } catch (ReadValueException | ResolutionException e) {\n            throw new CreateCollectionActorException(e);\n        }\n    }", "signature": "void createTable(CreateCollectionWrapper message)", "full_signature": "public void createTable(CreateCollectionWrapper message)", "class_method_signature": "CreateCollectionActor.createTable(CreateCollectionWrapper message)", "testcase": false, "constructor": false, "invocations": ["resolve", "getOrAdd", "getConnectionOptionsRegistrationName", "resolve", "getOrAdd", "getCollectionName", "resolve", "getOrAdd", "getObject", "getOptions", "execute"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}