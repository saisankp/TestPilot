{"test_class": {"identifier": "ScopeELResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ScopeELResolver resolver;", "modifier": "private", "type": "ScopeELResolver", "declarator": "resolver", "var_name": "resolver"}], "file": "tiles-el/src/test/java/org/apache/tiles/el/ScopeELResolverTest.java"}, "test_case": {"identifier": "testGetFeatureDescriptors", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetFeatureDescriptors() {\n        ELContext elContext = createMock(ELContext.class);\n        Request request = createMock(Request.class);\n\n        expect(elContext.getContext(Request.class)).andReturn(request);\n        expect(request.getAvailableScopes()).andReturn(Arrays.asList(new String[] {\"one\", \"two\"}));\n\n        replay(elContext, request);\n        assertFalse(resolver.getFeatureDescriptors(elContext, new Integer(1)).hasNext());\n        Iterator<FeatureDescriptor> descriptors = resolver.getFeatureDescriptors(elContext, null);\n        FeatureDescriptor descriptor = descriptors.next();\n        assertEquals(\"oneScope\", descriptor.getName());\n        descriptor = descriptors.next();\n        assertEquals(\"twoScope\", descriptor.getName());\n        assertFalse(descriptors.hasNext());\n        verify(elContext, request);\n    }", "signature": "void testGetFeatureDescriptors()", "full_signature": "@Test public void testGetFeatureDescriptors()", "class_method_signature": "ScopeELResolverTest.testGetFeatureDescriptors()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "andReturn", "expect", "getContext", "andReturn", "expect", "getAvailableScopes", "asList", "replay", "assertFalse", "hasNext", "getFeatureDescriptors", "getFeatureDescriptors", "next", "assertEquals", "getName", "next", "assertEquals", "getName", "assertFalse", "hasNext", "verify"]}, "focal_class": {"identifier": "ScopeELResolver", "superclass": "extends ELResolver", "interfaces": "", "fields": [{"original_string": "private static final int SUFFIX_LENGTH = 5;", "modifier": "private static final", "type": "int", "declarator": "SUFFIX_LENGTH = 5", "var_name": "SUFFIX_LENGTH"}], "methods": [{"identifier": "getCommonPropertyType", "parameters": "(ELContext context, Object base)", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> getCommonPropertyType(ELContext context, Object base)", "full_signature": "@Override public Class<?> getCommonPropertyType(ELContext context, Object base)", "class_method_signature": "ScopeELResolver.getCommonPropertyType(ELContext context, Object base)", "testcase": false, "constructor": false}, {"identifier": "getFeatureDescriptors", "parameters": "(ELContext context,\n            Object base)", "modifiers": "@Override public", "return": "Iterator<FeatureDescriptor>", "signature": "Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context,\n            Object base)", "full_signature": "@Override public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context,\n            Object base)", "class_method_signature": "ScopeELResolver.getFeatureDescriptors(ELContext context,\n            Object base)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(ELContext context, Object base, Object property)", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> getType(ELContext context, Object base, Object property)", "full_signature": "@Override public Class<?> getType(ELContext context, Object base, Object property)", "class_method_signature": "ScopeELResolver.getType(ELContext context, Object base, Object property)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(ELContext context, Object base, Object property)", "modifiers": "@Override public", "return": "Object", "signature": "Object getValue(ELContext context, Object base, Object property)", "full_signature": "@Override public Object getValue(ELContext context, Object base, Object property)", "class_method_signature": "ScopeELResolver.getValue(ELContext context, Object base, Object property)", "testcase": false, "constructor": false}, {"identifier": "isReadOnly", "parameters": "(ELContext context, Object base, Object property)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadOnly(ELContext context, Object base, Object property)", "full_signature": "@Override public boolean isReadOnly(ELContext context, Object base, Object property)", "class_method_signature": "ScopeELResolver.isReadOnly(ELContext context, Object base, Object property)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(ELContext context, Object base, Object property,\n            Object value)", "modifiers": "@Override public", "return": "void", "signature": "void setValue(ELContext context, Object base, Object property,\n            Object value)", "full_signature": "@Override public void setValue(ELContext context, Object base, Object property,\n            Object value)", "class_method_signature": "ScopeELResolver.setValue(ELContext context, Object base, Object property,\n            Object value)", "testcase": false, "constructor": false}], "file": "tiles-el/src/main/java/org/apache/tiles/el/ScopeELResolver.java"}, "focal_method": {"identifier": "getFeatureDescriptors", "parameters": "(ELContext context,\n            Object base)", "modifiers": "@Override public", "return": "Iterator<FeatureDescriptor>", "body": "@Override\n    public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context,\n            Object base) {\n        if (base != null) {\n            List<FeatureDescriptor> retValue = Collections.emptyList();\n            return retValue.iterator();\n        }\n\n        List<FeatureDescriptor> list = new ArrayList<FeatureDescriptor>();\n\n        Request request = (Request) context\n                .getContext(Request.class);\n        for (String scope : request.getAvailableScopes()) {\n            FeatureDescriptor descriptor = new FeatureDescriptor();\n            descriptor.setDisplayName(scope + \"Scope\");\n            descriptor.setExpert(false);\n            descriptor.setHidden(false);\n            descriptor.setName(scope + \"Scope\");\n            descriptor.setPreferred(true);\n            descriptor.setShortDescription(\"\");\n            descriptor.setValue(\"type\", Map.class);\n            descriptor.setValue(\"resolvableAtDesignTime\", Boolean.FALSE);\n            list.add(descriptor);\n        }\n\n        return list.iterator();\n    }", "signature": "Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context,\n            Object base)", "full_signature": "@Override public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context,\n            Object base)", "class_method_signature": "ScopeELResolver.getFeatureDescriptors(ELContext context,\n            Object base)", "testcase": false, "constructor": false, "invocations": ["emptyList", "iterator", "getContext", "getAvailableScopes", "setDisplayName", "setExpert", "setHidden", "setName", "setPreferred", "setShortDescription", "setValue", "setValue", "add", "iterator"]}, "repository": {"repo_id": 2641714, "url": "https://github.com/apache/tiles", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 99, "size": 12554, "license": "licensed"}}