{"test_class": {"identifier": "ProgramInstanceCheckTest", "superclass": "extends BaseValidationTest", "interfaces": "", "fields": [{"original_string": "private ProgramInstanceCheck rule;", "modifier": "private", "type": "ProgramInstanceCheck", "declarator": "rule", "var_name": "rule"}, {"original_string": "private Program program;", "modifier": "private", "type": "Program", "declarator": "program", "var_name": "program"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheckTest.java"}, "test_case": {"identifier": "failOnMultipleProgramInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void failOnMultipleProgramInstance()\n    {\n        // Data preparation\n\n        Program programNoReg = createProgram( 'P' );\n        programNoReg.setProgramType( ProgramType.WITHOUT_REGISTRATION );\n        Map<String, Program> programMap = new HashMap<>();\n        programMap.put( programNoReg.getUid(), programNoReg );\n\n        when( workContext.getProgramsMap() ).thenReturn( programMap );\n\n        //\n        // Program Instance\n        //\n        when( workContext.getProgramInstanceMap() ).thenReturn( new HashMap<>() );\n\n        //\n        // Tracked Entity Instance\n        //\n        TrackedEntityInstance tei = createTrackedEntityInstance( createOrganisationUnit( 'A' ) );\n        Map<String, Pair<TrackedEntityInstance, Boolean>> teiMap = new HashMap<>();\n        teiMap.put( event.getUid(), Pair.of( tei, true ) );\n        when( workContext.getTrackedEntityInstanceMap() ).thenReturn( teiMap );\n\n        ProgramInstance programInstance1 = new ProgramInstance();\n        ProgramInstance programInstance2 = new ProgramInstance();\n        when( this.programInstanceStore.get( programNoReg, ProgramStatus.ACTIVE ) )\n                .thenReturn( Lists.newArrayList( programInstance1, programInstance2 ) );\n\n        event.setProgram( programNoReg.getUid() );\n\n        //\n        // Method under test\n        //\n        ImportSummary summary = rule.check( new ImmutableEvent( event ), workContext );\n        assertHasError( summary, event,\n                \"Multiple active program instances exists for program: \" + programNoReg.getUid() );\n    }", "signature": "void failOnMultipleProgramInstance()", "full_signature": "@Test public void failOnMultipleProgramInstance()", "class_method_signature": "ProgramInstanceCheckTest.failOnMultipleProgramInstance()", "testcase": true, "constructor": false, "invocations": ["createProgram", "setProgramType", "put", "getUid", "thenReturn", "when", "getProgramsMap", "thenReturn", "when", "getProgramInstanceMap", "createTrackedEntityInstance", "createOrganisationUnit", "put", "getUid", "of", "thenReturn", "when", "getTrackedEntityInstanceMap", "thenReturn", "when", "get", "newArrayList", "setProgram", "getUid", "check", "assertHasError", "getUid"]}, "focal_class": {"identifier": "ProgramInstanceCheck", "superclass": "", "interfaces": "implements Checker", "fields": [], "methods": [{"identifier": "check", "parameters": "( ImmutableEvent event, WorkContext ctx )", "modifiers": "@Override public", "return": "ImportSummary", "signature": "ImportSummary check( ImmutableEvent event, WorkContext ctx )", "full_signature": "@Override public ImportSummary check( ImmutableEvent event, WorkContext ctx )", "class_method_signature": "ProgramInstanceCheck.check( ImmutableEvent event, WorkContext ctx )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/events/importer/shared/validation/ProgramInstanceCheck.java"}, "focal_method": {"identifier": "check", "parameters": "( ImmutableEvent event, WorkContext ctx )", "modifiers": "@Override public", "return": "ImportSummary", "body": "@Override\n    public ImportSummary check( ImmutableEvent event, WorkContext ctx )\n    {\n        Program program = ctx.getProgramsMap().get( event.getProgram() );\n        ProgramInstance programInstance = ctx.getProgramInstanceMap().get( event.getUid() );\n        final Optional<TrackedEntityInstance> trackedEntityInstance = ctx.getTrackedEntityInstance( event.getUid() );\n\n        String teiUid = \"\";\n        if ( trackedEntityInstance.isPresent() )\n        {\n            teiUid = trackedEntityInstance.get().getUid();\n        }\n        \n        List<ProgramInstance> programInstances;\n\n        if ( programInstance == null ) // Program Instance should be NOT null, after the pre-processing stage\n        {\n            if ( program.isRegistration() )\n            {\n                programInstances = new ArrayList<>( ctx.getServiceDelegator().getProgramInstanceStore()\n                    .get( trackedEntityInstance.orElse( null ), program, ProgramStatus.ACTIVE ) );\n\n                if ( programInstances.isEmpty() )\n                {\n                    return error( \"Tracked entity instance: \"\n                        + teiUid + \" is not enrolled in program: \" + program.getUid(),\n                        event.getEvent() );\n                }\n                else if ( programInstances.size() > 1 )\n                {\n                    return error( \"Tracked entity instance: \" + teiUid\n                        + \" has multiple active enrollments in program: \" + program.getUid(),\n                        event.getEvent() );\n                }\n            }\n            else\n            {\n                programInstances = ctx.getServiceDelegator().getProgramInstanceStore().get( program,\n                    ProgramStatus.ACTIVE );\n\n                if ( programInstances.size() > 1 )\n                {\n                    return error( \"Multiple active program instances exists for program: \" + program.getUid(),\n                        event.getEvent() );\n                }\n            }\n        }\n\n        return success();\n    }", "signature": "ImportSummary check( ImmutableEvent event, WorkContext ctx )", "full_signature": "@Override public ImportSummary check( ImmutableEvent event, WorkContext ctx )", "class_method_signature": "ProgramInstanceCheck.check( ImmutableEvent event, WorkContext ctx )", "testcase": false, "constructor": false, "invocations": ["get", "getProgramsMap", "getProgram", "get", "getProgramInstanceMap", "getUid", "getTrackedEntityInstance", "getUid", "isPresent", "getUid", "get", "isRegistration", "get", "getProgramInstanceStore", "getServiceDelegator", "orElse", "isEmpty", "error", "getUid", "getEvent", "size", "error", "getUid", "getEvent", "get", "getProgramInstanceStore", "getServiceDelegator", "size", "error", "getUid", "getEvent", "success"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}