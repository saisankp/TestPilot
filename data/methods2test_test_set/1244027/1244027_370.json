{"test_class": {"identifier": "IntegerOperationsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IntegerOperations ops = new IntegerOperations();", "modifier": "private", "type": "IntegerOperations", "declarator": "ops = new IntegerOperations()", "var_name": "ops"}], "file": "modeshape-common/src/test/java/org/modeshape/common/math/IntegerOperationsTest.java"}, "test_case": {"identifier": "shouldReturnProperExponenentInScientificNotation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnProperExponenentInScientificNotation() {\n        assertEquals(0, ops.getExponentInScientificNotation(0));\n        assertEquals(0, ops.getExponentInScientificNotation(1));\n        assertEquals(0, ops.getExponentInScientificNotation(2));\n        assertEquals(0, ops.getExponentInScientificNotation(9));\n        assertEquals(1, ops.getExponentInScientificNotation(10));\n        assertEquals(1, ops.getExponentInScientificNotation(20));\n        assertEquals(1, ops.getExponentInScientificNotation(99));\n        assertEquals(2, ops.getExponentInScientificNotation(100));\n        assertEquals(2, ops.getExponentInScientificNotation(200));\n        assertEquals(2, ops.getExponentInScientificNotation(999));\n        assertEquals(3, ops.getExponentInScientificNotation(1000));\n        assertEquals(3, ops.getExponentInScientificNotation(2000));\n        assertEquals(3, ops.getExponentInScientificNotation(9999));\n    }", "signature": "void shouldReturnProperExponenentInScientificNotation()", "full_signature": "@Test public void shouldReturnProperExponenentInScientificNotation()", "class_method_signature": "IntegerOperationsTest.shouldReturnProperExponenentInScientificNotation()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getExponentInScientificNotation", "assertEquals", "getExponentInScientificNotation", "assertEquals", "getExponentInScientificNotation", "assertEquals", "getExponentInScientificNotation", "assertEquals", "getExponentInScientificNotation", "assertEquals", "getExponentInScientificNotation", "assertEquals", "getExponentInScientificNotation", "assertEquals", "getExponentInScientificNotation", "assertEquals", "getExponentInScientificNotation", "assertEquals", "getExponentInScientificNotation", "assertEquals", "getExponentInScientificNotation", "assertEquals", "getExponentInScientificNotation", "assertEquals", "getExponentInScientificNotation"]}, "focal_class": {"identifier": "IntegerOperations", "superclass": "", "interfaces": "implements MathOperations<Integer>, Comparator<Integer>", "fields": [], "methods": [{"identifier": "getOperandClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<Integer>", "signature": "Class<Integer> getOperandClass()", "full_signature": "@Override public Class<Integer> getOperandClass()", "class_method_signature": "IntegerOperations.getOperandClass()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( Integer value1,\n                        Integer value2 )", "modifiers": "@Override public", "return": "Integer", "signature": "Integer add( Integer value1,\n                        Integer value2 )", "full_signature": "@Override public Integer add( Integer value1,\n                        Integer value2 )", "class_method_signature": "IntegerOperations.add( Integer value1,\n                        Integer value2 )", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "( Integer value1,\n                             Integer value2 )", "modifiers": "@Override public", "return": "Integer", "signature": "Integer subtract( Integer value1,\n                             Integer value2 )", "full_signature": "@Override public Integer subtract( Integer value1,\n                             Integer value2 )", "class_method_signature": "IntegerOperations.subtract( Integer value1,\n                             Integer value2 )", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "( Integer value1,\n                             Integer value2 )", "modifiers": "@Override public", "return": "Integer", "signature": "Integer multiply( Integer value1,\n                             Integer value2 )", "full_signature": "@Override public Integer multiply( Integer value1,\n                             Integer value2 )", "class_method_signature": "IntegerOperations.multiply( Integer value1,\n                             Integer value2 )", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "( Integer value1,\n                          Integer value2 )", "modifiers": "@Override public", "return": "double", "signature": "double divide( Integer value1,\n                          Integer value2 )", "full_signature": "@Override public double divide( Integer value1,\n                          Integer value2 )", "class_method_signature": "IntegerOperations.divide( Integer value1,\n                          Integer value2 )", "testcase": false, "constructor": false}, {"identifier": "negate", "parameters": "( Integer value )", "modifiers": "@Override public", "return": "Integer", "signature": "Integer negate( Integer value )", "full_signature": "@Override public Integer negate( Integer value )", "class_method_signature": "IntegerOperations.negate( Integer value )", "testcase": false, "constructor": false}, {"identifier": "increment", "parameters": "( Integer value )", "modifiers": "@Override public", "return": "Integer", "signature": "Integer increment( Integer value )", "full_signature": "@Override public Integer increment( Integer value )", "class_method_signature": "IntegerOperations.increment( Integer value )", "testcase": false, "constructor": false}, {"identifier": "maximum", "parameters": "( Integer value1,\n                            Integer value2 )", "modifiers": "@Override public", "return": "Integer", "signature": "Integer maximum( Integer value1,\n                            Integer value2 )", "full_signature": "@Override public Integer maximum( Integer value1,\n                            Integer value2 )", "class_method_signature": "IntegerOperations.maximum( Integer value1,\n                            Integer value2 )", "testcase": false, "constructor": false}, {"identifier": "minimum", "parameters": "( Integer value1,\n                            Integer value2 )", "modifiers": "@Override public", "return": "Integer", "signature": "Integer minimum( Integer value1,\n                            Integer value2 )", "full_signature": "@Override public Integer minimum( Integer value1,\n                            Integer value2 )", "class_method_signature": "IntegerOperations.minimum( Integer value1,\n                            Integer value2 )", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "( Integer value1,\n                        Integer value2 )", "modifiers": "@Override public", "return": "int", "signature": "int compare( Integer value1,\n                        Integer value2 )", "full_signature": "@Override public int compare( Integer value1,\n                        Integer value2 )", "class_method_signature": "IntegerOperations.compare( Integer value1,\n                        Integer value2 )", "testcase": false, "constructor": false}, {"identifier": "asBigDecimal", "parameters": "( Integer value )", "modifiers": "@Override public", "return": "BigDecimal", "signature": "BigDecimal asBigDecimal( Integer value )", "full_signature": "@Override public BigDecimal asBigDecimal( Integer value )", "class_method_signature": "IntegerOperations.asBigDecimal( Integer value )", "testcase": false, "constructor": false}, {"identifier": "fromBigDecimal", "parameters": "( BigDecimal value )", "modifiers": "@Override public", "return": "Integer", "signature": "Integer fromBigDecimal( BigDecimal value )", "full_signature": "@Override public Integer fromBigDecimal( BigDecimal value )", "class_method_signature": "IntegerOperations.fromBigDecimal( BigDecimal value )", "testcase": false, "constructor": false}, {"identifier": "createZeroValue", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer createZeroValue()", "full_signature": "@Override public Integer createZeroValue()", "class_method_signature": "IntegerOperations.createZeroValue()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( int value )", "modifiers": "@Override public", "return": "Integer", "signature": "Integer create( int value )", "full_signature": "@Override public Integer create( int value )", "class_method_signature": "IntegerOperations.create( int value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( long value )", "modifiers": "@Override public", "return": "Integer", "signature": "Integer create( long value )", "full_signature": "@Override public Integer create( long value )", "class_method_signature": "IntegerOperations.create( long value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( double value )", "modifiers": "@Override public", "return": "Integer", "signature": "Integer create( double value )", "full_signature": "@Override public Integer create( double value )", "class_method_signature": "IntegerOperations.create( double value )", "testcase": false, "constructor": false}, {"identifier": "sqrt", "parameters": "( Integer value )", "modifiers": "@Override public", "return": "double", "signature": "double sqrt( Integer value )", "full_signature": "@Override public double sqrt( Integer value )", "class_method_signature": "IntegerOperations.sqrt( Integer value )", "testcase": false, "constructor": false}, {"identifier": "getComparator", "parameters": "()", "modifiers": "@Override public", "return": "Comparator<Integer>", "signature": "Comparator<Integer> getComparator()", "full_signature": "@Override public Comparator<Integer> getComparator()", "class_method_signature": "IntegerOperations.getComparator()", "testcase": false, "constructor": false}, {"identifier": "random", "parameters": "( Integer minimum,\n                           Integer maximum,\n                           Random rng )", "modifiers": "@Override public", "return": "Integer", "signature": "Integer random( Integer minimum,\n                           Integer maximum,\n                           Random rng )", "full_signature": "@Override public Integer random( Integer minimum,\n                           Integer maximum,\n                           Random rng )", "class_method_signature": "IntegerOperations.random( Integer minimum,\n                           Integer maximum,\n                           Random rng )", "testcase": false, "constructor": false}, {"identifier": "doubleValue", "parameters": "( Integer value )", "modifiers": "@Override public", "return": "double", "signature": "double doubleValue( Integer value )", "full_signature": "@Override public double doubleValue( Integer value )", "class_method_signature": "IntegerOperations.doubleValue( Integer value )", "testcase": false, "constructor": false}, {"identifier": "floatValue", "parameters": "( Integer value )", "modifiers": "@Override public", "return": "float", "signature": "float floatValue( Integer value )", "full_signature": "@Override public float floatValue( Integer value )", "class_method_signature": "IntegerOperations.floatValue( Integer value )", "testcase": false, "constructor": false}, {"identifier": "intValue", "parameters": "( Integer value )", "modifiers": "@Override public", "return": "int", "signature": "int intValue( Integer value )", "full_signature": "@Override public int intValue( Integer value )", "class_method_signature": "IntegerOperations.intValue( Integer value )", "testcase": false, "constructor": false}, {"identifier": "longValue", "parameters": "( Integer value )", "modifiers": "@Override public", "return": "long", "signature": "long longValue( Integer value )", "full_signature": "@Override public long longValue( Integer value )", "class_method_signature": "IntegerOperations.longValue( Integer value )", "testcase": false, "constructor": false}, {"identifier": "shortValue", "parameters": "( Integer value )", "modifiers": "@Override public", "return": "short", "signature": "short shortValue( Integer value )", "full_signature": "@Override public short shortValue( Integer value )", "class_method_signature": "IntegerOperations.shortValue( Integer value )", "testcase": false, "constructor": false}, {"identifier": "getExponentInScientificNotation", "parameters": "( Integer value )", "modifiers": "@Override public", "return": "int", "signature": "int getExponentInScientificNotation( Integer value )", "full_signature": "@Override public int getExponentInScientificNotation( Integer value )", "class_method_signature": "IntegerOperations.getExponentInScientificNotation( Integer value )", "testcase": false, "constructor": false}, {"identifier": "roundUp", "parameters": "( Integer value,\n                            int decimalShift )", "modifiers": "@Override public", "return": "Integer", "signature": "Integer roundUp( Integer value,\n                            int decimalShift )", "full_signature": "@Override public Integer roundUp( Integer value,\n                            int decimalShift )", "class_method_signature": "IntegerOperations.roundUp( Integer value,\n                            int decimalShift )", "testcase": false, "constructor": false}, {"identifier": "roundDown", "parameters": "( Integer value,\n                              int decimalShift )", "modifiers": "@Override public", "return": "Integer", "signature": "Integer roundDown( Integer value,\n                              int decimalShift )", "full_signature": "@Override public Integer roundDown( Integer value,\n                              int decimalShift )", "class_method_signature": "IntegerOperations.roundDown( Integer value,\n                              int decimalShift )", "testcase": false, "constructor": false}, {"identifier": "keepSignificantFigures", "parameters": "( Integer value,\n                                           int numSigFigs )", "modifiers": "@Override public", "return": "Integer", "signature": "Integer keepSignificantFigures( Integer value,\n                                           int numSigFigs )", "full_signature": "@Override public Integer keepSignificantFigures( Integer value,\n                                           int numSigFigs )", "class_method_signature": "IntegerOperations.keepSignificantFigures( Integer value,\n                                           int numSigFigs )", "testcase": false, "constructor": false}], "file": "modeshape-common/src/main/java/org/modeshape/common/math/IntegerOperations.java"}, "focal_method": {"identifier": "getExponentInScientificNotation", "parameters": "( Integer value )", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int getExponentInScientificNotation( Integer value ) {\n        int v = Math.abs(value);\n        int exp = 0;\n        if (v > 1) {\n            while (v >= 10) {\n                v /= 10;\n                ++exp;\n            }\n        }\n        return exp;\n    }", "signature": "int getExponentInScientificNotation( Integer value )", "full_signature": "@Override public int getExponentInScientificNotation( Integer value )", "class_method_signature": "IntegerOperations.getExponentInScientificNotation( Integer value )", "testcase": false, "constructor": false, "invocations": ["abs"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}