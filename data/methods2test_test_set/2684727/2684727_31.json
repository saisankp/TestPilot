{"test_class": {"identifier": "CurrencyExchangeRateEditorPresenterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<CharSequence> CURRENCIES = Arrays.asList(\"USD\", \"EUR\", \"GBP\");", "modifier": "private static final", "type": "List<CharSequence>", "declarator": "CURRENCIES = Arrays.asList(\"USD\", \"EUR\", \"GBP\")", "var_name": "CURRENCIES"}, {"original_string": "private static final String TRIP_CURRENCY = \"USD\";", "modifier": "private static final", "type": "String", "declarator": "TRIP_CURRENCY = \"USD\"", "var_name": "TRIP_CURRENCY"}, {"original_string": "private static final String RECEIPT_CURRENCY = \"EUR\";", "modifier": "private static final", "type": "String", "declarator": "RECEIPT_CURRENCY = \"EUR\"", "var_name": "RECEIPT_CURRENCY"}, {"original_string": "private static final ExchangeRate EXCHANGE_RATE = new ExchangeRateBuilderFactory().setBaseCurrency(RECEIPT_CURRENCY).setRate(TRIP_CURRENCY, new BigDecimal(\"0.5\")).build();", "modifier": "private static final", "type": "ExchangeRate", "declarator": "EXCHANGE_RATE = new ExchangeRateBuilderFactory().setBaseCurrency(RECEIPT_CURRENCY).setRate(TRIP_CURRENCY, new BigDecimal(\"0.5\")).build()", "var_name": "EXCHANGE_RATE"}, {"original_string": "CurrencyExchangeRateEditorPresenter presenter;", "modifier": "", "type": "CurrencyExchangeRateEditorPresenter", "declarator": "presenter", "var_name": "presenter"}, {"original_string": "@Mock\n    CurrencyExchangeRateEditorView currencyExchangeRateEditorView;", "modifier": "@Mock", "type": "CurrencyExchangeRateEditorView", "declarator": "currencyExchangeRateEditorView", "var_name": "currencyExchangeRateEditorView"}, {"original_string": "@Mock\n    EditableReceiptPricingView receiptPricingView;", "modifier": "@Mock", "type": "EditableReceiptPricingView", "declarator": "receiptPricingView", "var_name": "receiptPricingView"}, {"original_string": "@Mock\n    CurrencyListEditorView currencyListEditorView;", "modifier": "@Mock", "type": "CurrencyListEditorView", "declarator": "currencyListEditorView", "var_name": "currencyListEditorView"}, {"original_string": "@Mock\n    ReceiptDateView receiptDateView;", "modifier": "@Mock", "type": "ReceiptDateView", "declarator": "receiptDateView", "var_name": "receiptDateView"}, {"original_string": "@Mock\n    ExchangeRateServiceManager exchangeRateServiceManager;", "modifier": "@Mock", "type": "ExchangeRateServiceManager", "declarator": "exchangeRateServiceManager", "var_name": "exchangeRateServiceManager"}, {"original_string": "@Mock\n    DatabaseHelper databaseHelper;", "modifier": "@Mock", "type": "DatabaseHelper", "declarator": "databaseHelper", "var_name": "databaseHelper"}, {"original_string": "@Mock\n    Trip trip;", "modifier": "@Mock", "type": "Trip", "declarator": "trip", "var_name": "trip"}, {"original_string": "@Mock\n    Receipt editableReceipt;", "modifier": "@Mock", "type": "Receipt", "declarator": "editableReceipt", "var_name": "editableReceipt"}, {"original_string": "@Mock\n    Price price;", "modifier": "@Mock", "type": "Price", "declarator": "price", "var_name": "price"}, {"original_string": "Bundle savedInstanceState = new Bundle();", "modifier": "", "type": "Bundle", "declarator": "savedInstanceState = new Bundle()", "var_name": "savedInstanceState"}, {"original_string": "@Mock\n    Consumer<Boolean> toggleExchangeRateFieldVisibilityConsumer;", "modifier": "@Mock", "type": "Consumer<Boolean>", "declarator": "toggleExchangeRateFieldVisibilityConsumer", "var_name": "toggleExchangeRateFieldVisibilityConsumer"}, {"original_string": "@Mock\n    Consumer<UiIndicator<ExchangeRate>> displayExchangeRateConsumer;", "modifier": "@Mock", "type": "Consumer<UiIndicator<ExchangeRate>>", "declarator": "displayExchangeRateConsumer", "var_name": "displayExchangeRateConsumer"}, {"original_string": "@Mock\n    Consumer<CurrencyUnit> displayBaseCurrencyConsumer;", "modifier": "@Mock", "type": "Consumer<CurrencyUnit>", "declarator": "displayBaseCurrencyConsumer", "var_name": "displayBaseCurrencyConsumer"}, {"original_string": "@Mock\n    Consumer<Optional<Price>> displayExchangedPriceInBaseCurrencyConsumer;", "modifier": "@Mock", "type": "Consumer<Optional<Price>>", "declarator": "displayExchangedPriceInBaseCurrencyConsumer", "var_name": "displayExchangedPriceInBaseCurrencyConsumer"}, {"original_string": "BehaviorSubject<CharSequence> exchangeRateChanges = BehaviorSubject.create();", "modifier": "", "type": "BehaviorSubject<CharSequence>", "declarator": "exchangeRateChanges = BehaviorSubject.create()", "var_name": "exchangeRateChanges"}, {"original_string": "BehaviorSubject<CharSequence> exchangedPriceInBaseCurrencyChanges = BehaviorSubject.create();", "modifier": "", "type": "BehaviorSubject<CharSequence>", "declarator": "exchangedPriceInBaseCurrencyChanges = BehaviorSubject.create()", "var_name": "exchangedPriceInBaseCurrencyChanges"}, {"original_string": "BehaviorSubject<Boolean> exchangedPriceInBaseCurrencyFocusChanges = BehaviorSubject.create();", "modifier": "", "type": "BehaviorSubject<Boolean>", "declarator": "exchangedPriceInBaseCurrencyFocusChanges = BehaviorSubject.create()", "var_name": "exchangedPriceInBaseCurrencyFocusChanges"}, {"original_string": "PublishSubject<Object> userInitiatedExchangeRateRetries = PublishSubject.create();", "modifier": "", "type": "PublishSubject<Object>", "declarator": "userInitiatedExchangeRateRetries = PublishSubject.create()", "var_name": "userInitiatedExchangeRateRetries"}, {"original_string": "BehaviorSubject<CharSequence> receiptPriceChanges = BehaviorSubject.create();", "modifier": "", "type": "BehaviorSubject<CharSequence>", "declarator": "receiptPriceChanges = BehaviorSubject.create()", "var_name": "receiptPriceChanges"}, {"original_string": "BehaviorSubject<Integer> currencyClicks = BehaviorSubject.create();", "modifier": "", "type": "BehaviorSubject<Integer>", "declarator": "currencyClicks = BehaviorSubject.create()", "var_name": "currencyClicks"}, {"original_string": "BehaviorSubject<Date> receiptDateChanges = BehaviorSubject.create();", "modifier": "", "type": "BehaviorSubject<Date>", "declarator": "receiptDateChanges = BehaviorSubject.create()", "var_name": "receiptDateChanges"}], "file": "app/src/test/java/co/smartreceipts/android/receipts/editor/exchange/CurrencyExchangeRateEditorPresenterTest.java"}, "test_case": {"identifier": "userMultipleRetriesGetsExchangeRateOrPurchase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void userMultipleRetriesGetsExchangeRateOrPurchase() throws Exception {\n        presenter = new CurrencyExchangeRateEditorPresenter(currencyExchangeRateEditorView, receiptPricingView, currencyListEditorView, receiptDateView, exchangeRateServiceManager, databaseHelper, trip, null, null, Schedulers.trampoline(), Schedulers.trampoline(), Schedulers.trampoline());\n        presenter.subscribe();\n        currencyClicks.onNext(1);\n        receiptDateChanges.onNext(new Date(200L));\n        currencyClicks.onNext(2);\n        userInitiatedExchangeRateRetries.onNext(new Object());\n        userInitiatedExchangeRateRetries.onNext(new Object());\n        userInitiatedExchangeRateRetries.onNext(new Object());\n        verify(displayExchangeRateConsumer, atLeastOnce()).accept(UiIndicator.success(EXCHANGE_RATE));\n        verify(exchangeRateServiceManager, times(3)).getExchangeRateOrInitiatePurchase(any(Date.class), anyString(), anyString());\n    }", "signature": "void userMultipleRetriesGetsExchangeRateOrPurchase()", "full_signature": "@Test public void userMultipleRetriesGetsExchangeRateOrPurchase()", "class_method_signature": "CurrencyExchangeRateEditorPresenterTest.userMultipleRetriesGetsExchangeRateOrPurchase()", "testcase": true, "constructor": false, "invocations": ["trampoline", "trampoline", "trampoline", "subscribe", "onNext", "onNext", "onNext", "onNext", "onNext", "onNext", "accept", "verify", "atLeastOnce", "success", "getExchangeRateOrInitiatePurchase", "verify", "times", "any", "anyString", "anyString"]}, "focal_class": {"identifier": "CurrencyExchangeRateEditorPresenter", "superclass": "extends BasePresenter<CurrencyExchangeRateEditorView>", "interfaces": "", "fields": [{"original_string": "private final EditableReceiptPricingView receiptPricingView;", "modifier": "private final", "type": "EditableReceiptPricingView", "declarator": "receiptPricingView", "var_name": "receiptPricingView"}, {"original_string": "private final CurrencyListEditorView currencyListEditorView;", "modifier": "private final", "type": "CurrencyListEditorView", "declarator": "currencyListEditorView", "var_name": "currencyListEditorView"}, {"original_string": "private final ReceiptDateView receiptDateView;", "modifier": "private final", "type": "ReceiptDateView", "declarator": "receiptDateView", "var_name": "receiptDateView"}, {"original_string": "private final ExchangeRateServiceManager exchangeRateServiceManager;", "modifier": "private final", "type": "ExchangeRateServiceManager", "declarator": "exchangeRateServiceManager", "var_name": "exchangeRateServiceManager"}, {"original_string": "private final DatabaseHelper databaseHelper;", "modifier": "private final", "type": "DatabaseHelper", "declarator": "databaseHelper", "var_name": "databaseHelper"}, {"original_string": "private final Trip trip;", "modifier": "private final", "type": "Trip", "declarator": "trip", "var_name": "trip"}, {"original_string": "private final Receipt editableReceipt;", "modifier": "private final", "type": "Receipt", "declarator": "editableReceipt", "var_name": "editableReceipt"}, {"original_string": "private final Bundle savedInstanceState;", "modifier": "private final", "type": "Bundle", "declarator": "savedInstanceState", "var_name": "savedInstanceState"}, {"original_string": "private final Scheduler ioScheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "ioScheduler", "var_name": "ioScheduler"}, {"original_string": "private final Scheduler computationScheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "computationScheduler", "var_name": "computationScheduler"}, {"original_string": "private final Scheduler mainThreadScheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "mainThreadScheduler", "var_name": "mainThreadScheduler"}, {"original_string": "private int skipCount = 0;", "modifier": "private", "type": "int", "declarator": "skipCount = 0", "var_name": "skipCount"}], "methods": [{"identifier": "CurrencyExchangeRateEditorPresenter", "parameters": "(@NonNull CurrencyExchangeRateEditorView view,\n                                               @NonNull EditableReceiptPricingView receiptPricingView,\n                                               @NonNull CurrencyListEditorView currencyListEditorView,\n                                               @NonNull ReceiptDateView receiptDateView,\n                                               @NonNull ExchangeRateServiceManager exchangeRateServiceManager,\n                                               @NonNull DatabaseHelper databaseHelper,\n                                               @NonNull Trip trip,\n                                               @Nullable Receipt editableReceipt,\n                                               @Nullable Bundle savedInstanceState)", "modifiers": "public", "return": "", "signature": " CurrencyExchangeRateEditorPresenter(@NonNull CurrencyExchangeRateEditorView view,\n                                               @NonNull EditableReceiptPricingView receiptPricingView,\n                                               @NonNull CurrencyListEditorView currencyListEditorView,\n                                               @NonNull ReceiptDateView receiptDateView,\n                                               @NonNull ExchangeRateServiceManager exchangeRateServiceManager,\n                                               @NonNull DatabaseHelper databaseHelper,\n                                               @NonNull Trip trip,\n                                               @Nullable Receipt editableReceipt,\n                                               @Nullable Bundle savedInstanceState)", "full_signature": "public  CurrencyExchangeRateEditorPresenter(@NonNull CurrencyExchangeRateEditorView view,\n                                               @NonNull EditableReceiptPricingView receiptPricingView,\n                                               @NonNull CurrencyListEditorView currencyListEditorView,\n                                               @NonNull ReceiptDateView receiptDateView,\n                                               @NonNull ExchangeRateServiceManager exchangeRateServiceManager,\n                                               @NonNull DatabaseHelper databaseHelper,\n                                               @NonNull Trip trip,\n                                               @Nullable Receipt editableReceipt,\n                                               @Nullable Bundle savedInstanceState)", "class_method_signature": "CurrencyExchangeRateEditorPresenter.CurrencyExchangeRateEditorPresenter(@NonNull CurrencyExchangeRateEditorView view,\n                                               @NonNull EditableReceiptPricingView receiptPricingView,\n                                               @NonNull CurrencyListEditorView currencyListEditorView,\n                                               @NonNull ReceiptDateView receiptDateView,\n                                               @NonNull ExchangeRateServiceManager exchangeRateServiceManager,\n                                               @NonNull DatabaseHelper databaseHelper,\n                                               @NonNull Trip trip,\n                                               @Nullable Receipt editableReceipt,\n                                               @Nullable Bundle savedInstanceState)", "testcase": false, "constructor": true}, {"identifier": "CurrencyExchangeRateEditorPresenter", "parameters": "(@NonNull CurrencyExchangeRateEditorView view,\n                                               @NonNull EditableReceiptPricingView receiptPricingView,\n                                               @NonNull CurrencyListEditorView currencyListEditorView,\n                                               @NonNull ReceiptDateView receiptDateView,\n                                               @NonNull ExchangeRateServiceManager exchangeRateServiceManager,\n                                               @NonNull DatabaseHelper databaseHelper,\n                                               @NonNull Trip trip,\n                                               @Nullable Receipt editableReceipt,\n                                               @Nullable Bundle savedInstanceState,\n                                               @NonNull Scheduler ioScheduler,\n                                               @NonNull Scheduler computationScheduler,\n                                               @NonNull Scheduler mainThreadScheduler)", "modifiers": "public", "return": "", "signature": " CurrencyExchangeRateEditorPresenter(@NonNull CurrencyExchangeRateEditorView view,\n                                               @NonNull EditableReceiptPricingView receiptPricingView,\n                                               @NonNull CurrencyListEditorView currencyListEditorView,\n                                               @NonNull ReceiptDateView receiptDateView,\n                                               @NonNull ExchangeRateServiceManager exchangeRateServiceManager,\n                                               @NonNull DatabaseHelper databaseHelper,\n                                               @NonNull Trip trip,\n                                               @Nullable Receipt editableReceipt,\n                                               @Nullable Bundle savedInstanceState,\n                                               @NonNull Scheduler ioScheduler,\n                                               @NonNull Scheduler computationScheduler,\n                                               @NonNull Scheduler mainThreadScheduler)", "full_signature": "public  CurrencyExchangeRateEditorPresenter(@NonNull CurrencyExchangeRateEditorView view,\n                                               @NonNull EditableReceiptPricingView receiptPricingView,\n                                               @NonNull CurrencyListEditorView currencyListEditorView,\n                                               @NonNull ReceiptDateView receiptDateView,\n                                               @NonNull ExchangeRateServiceManager exchangeRateServiceManager,\n                                               @NonNull DatabaseHelper databaseHelper,\n                                               @NonNull Trip trip,\n                                               @Nullable Receipt editableReceipt,\n                                               @Nullable Bundle savedInstanceState,\n                                               @NonNull Scheduler ioScheduler,\n                                               @NonNull Scheduler computationScheduler,\n                                               @NonNull Scheduler mainThreadScheduler)", "class_method_signature": "CurrencyExchangeRateEditorPresenter.CurrencyExchangeRateEditorPresenter(@NonNull CurrencyExchangeRateEditorView view,\n                                               @NonNull EditableReceiptPricingView receiptPricingView,\n                                               @NonNull CurrencyListEditorView currencyListEditorView,\n                                               @NonNull ReceiptDateView receiptDateView,\n                                               @NonNull ExchangeRateServiceManager exchangeRateServiceManager,\n                                               @NonNull DatabaseHelper databaseHelper,\n                                               @NonNull Trip trip,\n                                               @Nullable Receipt editableReceipt,\n                                               @Nullable Bundle savedInstanceState,\n                                               @NonNull Scheduler ioScheduler,\n                                               @NonNull Scheduler computationScheduler,\n                                               @NonNull Scheduler mainThreadScheduler)", "testcase": false, "constructor": true}, {"identifier": "subscribe", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void subscribe()", "full_signature": "@Override public void subscribe()", "class_method_signature": "CurrencyExchangeRateEditorPresenter.subscribe()", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/receipts/editor/exchange/CurrencyExchangeRateEditorPresenter.java"}, "focal_method": {"identifier": "subscribe", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void subscribe() {\n        // Reset our previous skip count. We use this to handle situations in which we've cached a currency that != trip when savedState == null\n        skipCount = 0;\n\n        // This will emit a value whenever a currency is selected from our list\n        final ConnectableObservable<String> selectedCurrencyConnectableObservable = Observable.fromCallable(this.databaseHelper::getCurrenciesList)\n                .subscribeOn(ioScheduler)\n                .observeOn(mainThreadScheduler)\n                .flatMap(currenciesList -> {\n                    //noinspection ConstantConditions\n                    return currencyListEditorView.currencyClicks()\n                            .filter(currencyIndex -> currencyIndex >= 0)\n                            .map(currenciesList::get);\n                })\n                .map(CharSequence::toString)\n                .publish();\n\n        // This will emit a value when either the selected currency or selected date changes\n        final ConnectableObservable<Pair<String, Date>> currencyDatePairConnectableObservable = Observable.combineLatest(selectedCurrencyConnectableObservable, receiptDateView.getReceiptDateChanges(), Pair::new)\n                .publish();\n\n        // edit == NULL => savedInstanceState != null && skipCount++ > 0\n        // edit != NULL => saved == null && skipCount > 0\n        // edit != NULL => saved != null && skipCount > 0\n\n        // Fetch the exchange rate whenever the user changes the currency or date\n        this.compositeDisposable.add(currencyDatePairConnectableObservable\n                .skipWhile(currencyDatePair -> {\n                    if (editableReceipt != null) {\n                        // Note: Don't initiate the auto refresh if we're editing a receipt with the same currency\n                        return editableReceipt.getPrice().getCurrencyCode().equals(currencyDatePair.first);\n                    } else {\n                        // Note: We want to skip the initial value unless it's our first time launching this\n                        return savedInstanceState != null && skipCount++ > 0;\n                    }\n                })\n                .switchMap(currencyDatePair -> {\n                    if (!trip.getDefaultCurrencyCode().equals(currencyDatePair.first)) {\n                        //noinspection ConstantConditions\n                        return exchangeRateServiceManager.getExchangeRate(currencyDatePair.second, currencyDatePair.first, trip.getDefaultCurrencyCode());\n                    } else {\n                        // When the currency is the same as the trip currency, let's clear out the current value (ie set to empty)\n                        return Observable.just(UiIndicator.<ExchangeRate>success());\n                    }\n                })\n                .observeOn(mainThreadScheduler)\n                .subscribe(view.displayExchangeRate()));\n\n        // Fetch the exchange rate whenever the user clicks the \"retry\" button. Note: This variant can also attempt a purchase\n        this.compositeDisposable.add(currencyDatePairConnectableObservable\n                .switchMap(currencyDatePair -> view.getUserInitiatedExchangeRateRetries().map(userRetry -> currencyDatePair))\n                .doOnNext(currencyDatePair -> Logger.info(CurrencyExchangeRateEditorPresenter.this, \"User clicked to initiate exchange rate retry\"))\n                .flatMap(currencyDatePair -> {\n                    //noinspection ConstantConditions\n                    return exchangeRateServiceManager.getExchangeRateOrInitiatePurchase(currencyDatePair.second, currencyDatePair.first, trip.getDefaultCurrencyCode());\n                })\n                .doOnError(exception -> Logger.error(CurrencyExchangeRateEditorPresenter.this, \"Failed to initiate user retry\", exception))\n                .observeOn(mainThreadScheduler)\n                .subscribe(view.displayExchangeRate()));\n\n        // This will emit a char sequence whenever the user changes the exchange rate\n        final ConnectableObservable<CharSequence> exchangeRateChangesConnectableObservable = view.getExchangeRateChanges()\n                .publish();\n\n        // This will emit a char sequence whenever the user changes the exchanged price in base currency\n        final ConnectableObservable<CharSequence> exchangedPriceInBaseCurrencyChanges = view.getExchangedPriceInBaseCurrencyChanges()\n                .publish();\n\n        // This will emit a decimal value whenever the user changes the exchange rate\n        final ConnectableObservable<Optional<BigDecimal>> exchangeRateChangesAsDecimalConnectableObservable = exchangeRateChangesConnectableObservable\n                .compose(new PriceCharSequenceToBigDecimalObservableTransformer())\n                .publish();\n\n        // This will emit a decimal value whenever the user changes the receipt price\n        final ConnectableObservable<Optional<BigDecimal>> receiptPriceChangesAsDecimalConnectableObservable = receiptPricingView.getReceiptPriceChanges()\n                .compose(new PriceCharSequenceToBigDecimalObservableTransformer())\n                .publish();\n\n        // This will emit a decimal value whenever the user changes the exchanged price in base currency\n        final ConnectableObservable<Optional<BigDecimal>> exchangedPriceInBaseCurrencyAsDecimalChanges = exchangedPriceInBaseCurrencyChanges\n                .compose(new PriceCharSequenceToBigDecimalObservableTransformer())\n                .publish();\n\n        // For the selected currency, multiple the exchange rate by receipt price (whenever either changes) to get the base currency total\n        this.compositeDisposable.add(Observable.combineLatest(\n                    receiptPriceChangesAsDecimalConnectableObservable,\n                    exchangeRateChangesAsDecimalConnectableObservable,\n                    selectedCurrencyConnectableObservable,\n                    (priceDecimal, exchangeRateDecimal, selectedReceiptCurrencyCode) -> {\n                        if (priceDecimal.isPresent() && exchangeRateDecimal.isPresent()) {\n                            final Price price = new PriceBuilderFactory()\n                                    .setCurrency(trip.getDefaultCurrencyCode())\n                                    .setPrice(priceDecimal.get().multiply(exchangeRateDecimal.get()))\n                                    .build();\n                            return Optional.of(price);\n                        } else {\n                            return Optional.<Price>absent();\n                        }\n                    }\n                )\n                .filter(Optional::isPresent)\n                .map(Optional::get)\n                .doOnNext(exchangedPriceInBaseCurrency -> Logger.debug(CurrencyExchangeRateEditorPresenter.this, \"Updating the exchanged price in base currency: {}\", exchangedPriceInBaseCurrency))\n                .flatMapSingle(exchangedPriceInBaseCurrency ->\n                        // Note: we use this to ensure we don't mess things up while the user is typing\n                        view.getExchangedPriceInBaseCurrencyFocusChanges()\n                        .firstOrError()\n                        .map(isFocused -> {\n                            if (!isFocused) {\n                                return Optional.of(exchangedPriceInBaseCurrency);\n                            } else {\n                                return Optional.<Price>absent();\n                            }\n                        })\n                        .doOnSuccess(ignored -> Logger.debug(CurrencyExchangeRateEditorPresenter.this, \"Allowing base rate changes as the field is not currently focuses\"))\n                )\n                .filter(Optional::isPresent)\n                .doOnError(exception -> Logger.error(CurrencyExchangeRateEditorPresenter.this, \"Failed to exchanged price in base currency\", exception))\n                .subscribeOn(computationScheduler)\n                .observeOn(mainThreadScheduler)\n                .subscribe(view.displayExchangedPriceInBaseCurrency()));\n\n        // For the selected currency, divide the base currency total by the exchange rate (whenever either changes) to get the receipt price\n        this.compositeDisposable.add(exchangedPriceInBaseCurrencyAsDecimalChanges\n                .withLatestFrom(receiptPriceChangesAsDecimalConnectableObservable, selectedCurrencyConnectableObservable, (exchangedPriceInBaseCurrency, receiptPrice, selectedReceiptCurrencyCode) -> {\n                    if (exchangedPriceInBaseCurrency.isPresent() && receiptPrice.isPresent()) {\n                        if (receiptPrice.get().compareTo(BigDecimal.ZERO) == 0) {\n                            return Optional.<ExchangeRate>absent();\n                        } else {\n                            final ExchangeRateBuilderFactory factory = new ExchangeRateBuilderFactory();\n                            final BigDecimal rate = exchangedPriceInBaseCurrency.get().divide(receiptPrice.get(), ExchangeRate.PRECISION, BigDecimal.ROUND_HALF_UP);\n                            factory.setBaseCurrency(selectedReceiptCurrencyCode);\n                            factory.setRate(trip.getDefaultCurrencyCode(), rate); // ie from receipt currency to trip currency\n                            return Optional.of(factory.build());\n                        }\n                    } else {\n                        return Optional.<ExchangeRate>absent();\n                    }\n                })\n                .doOnNext(exchangeRateOptional -> {\n                    if (!exchangeRateOptional.isPresent()) {\n                        Logger.debug(CurrencyExchangeRateEditorPresenter.this, \"Ignoring divide by zero condition...\");\n                    }\n                })\n                .filter(Optional::isPresent)\n                .map(Optional::get)\n                .doOnNext(exchangeRate -> Logger.debug(CurrencyExchangeRateEditorPresenter.this, \"Updating exchange rate from user input: {}\", exchangeRate))\n                .map(UiIndicator::success)\n                .doOnError(exception -> Logger.error(CurrencyExchangeRateEditorPresenter.this, \"Failed to exchanged rate update from base\", exception))\n                .subscribeOn(computationScheduler)\n                .observeOn(mainThreadScheduler)\n                .subscribe(view.displayExchangeRate()));\n\n        // If the user ever clears the exchange rate, we should also clear the exchanged price\n        this.compositeDisposable.add(exchangeRateChangesConnectableObservable\n                .filter(exchangeRateText -> exchangeRateText.length() == 0)\n                .map(ignored -> Optional.<Price>absent())\n                .doOnNext(ignored -> Logger.debug(CurrencyExchangeRateEditorPresenter.this, \"Clearing exchanged price now that exchange rate is empty\"))\n                .subscribe(view.displayExchangedPriceInBaseCurrency()));\n\n        // If the user ever clears the exchanged price, we should also clear the exchanged rate\n        this.compositeDisposable.add(exchangedPriceInBaseCurrencyChanges\n                .skip(1) // We ignore the initial value setter\n                .filter(exchangedPriceInBaseCurrencyText -> exchangedPriceInBaseCurrencyText.length() == 0)\n                .map(ignored -> Optional.<Price>absent())\n                .doOnNext(ignored -> Logger.debug(CurrencyExchangeRateEditorPresenter.this, \"Clearing exchange rate now that exchanged price is empty\"))\n                .map(exchangedPriceInBaseCurrencyText -> UiIndicator.<ExchangeRate>success())\n                .subscribe(view.displayExchangeRate()));\n\n        // Toggle the exchange rate field any time the user changes it\n        compositeDisposable.add(selectedCurrencyConnectableObservable\n                .map(selectedCurrencyCode -> !trip.getDefaultCurrencyCode().equals(selectedCurrencyCode))\n                .doOnNext(exchangeFieldsAreVisible -> Logger.debug(CurrencyExchangeRateEditorPresenter.this, \"Exchange rate field visibility -> {}\", exchangeFieldsAreVisible))\n                .subscribe(view.toggleExchangeRateFieldVisibility()));\n\n        // Display the base currency of the price\n        compositeDisposable.add(Observable.just(trip)\n                .map(Trip::getDefaultCurrencyCode)\n                .map(CurrencyUnit::of)\n                .subscribe(view.displayBaseCurrency()));\n\n        // And start our ConnectableObservables\n        compositeDisposable.add(exchangeRateChangesConnectableObservable.connect());\n        compositeDisposable.add(exchangedPriceInBaseCurrencyChanges.connect());\n        compositeDisposable.add(currencyDatePairConnectableObservable.connect());\n        compositeDisposable.add(selectedCurrencyConnectableObservable.connect());\n        compositeDisposable.add(exchangeRateChangesAsDecimalConnectableObservable.connect());\n        compositeDisposable.add(receiptPriceChangesAsDecimalConnectableObservable.connect());\n        compositeDisposable.add(exchangedPriceInBaseCurrencyAsDecimalChanges.connect());\n\n        // Display the exchange rate for the receipt that we're currently editing\n        compositeDisposable.add(Observable.just(Optional.ofNullable(editableReceipt))\n                .filter(Optional::isPresent)\n                .filter(ignored -> savedInstanceState == null)\n                .map(Optional::get)\n                .map(receipt -> receipt.getPrice().getExchangeRate())\n                .filter(exchangeRate -> exchangeRate.supportsExchangeRateFor(trip.getDefaultCurrencyCode()))\n                .map(UiIndicator::success)\n                .subscribe(view.displayExchangeRate()));\n\n        // Since we may navigate back to this screen, let's add a simple check to hide the exchange rates if the currency = trip currency\n        compositeDisposable.add(Observable.just(view.getCurrencySelectionText())\n                .map(editorCurrency -> !trip.getDefaultCurrencyCode().equals(editorCurrency))\n                .subscribe(view.toggleExchangeRateFieldVisibility()));\n    }", "signature": "void subscribe()", "full_signature": "@Override public void subscribe()", "class_method_signature": "CurrencyExchangeRateEditorPresenter.subscribe()", "testcase": false, "constructor": false, "invocations": ["publish", "map", "flatMap", "observeOn", "subscribeOn", "fromCallable", "map", "filter", "currencyClicks", "publish", "combineLatest", "getReceiptDateChanges", "add", "subscribe", "observeOn", "switchMap", "skipWhile", "equals", "getCurrencyCode", "getPrice", "equals", "getDefaultCurrencyCode", "getExchangeRate", "getDefaultCurrencyCode", "just", "success", "displayExchangeRate", "add", "subscribe", "observeOn", "doOnError", "flatMap", "doOnNext", "switchMap", "map", "getUserInitiatedExchangeRateRetries", "info", "getExchangeRateOrInitiatePurchase", "getDefaultCurrencyCode", "error", "displayExchangeRate", "publish", "getExchangeRateChanges", "publish", "getExchangedPriceInBaseCurrencyChanges", "publish", "compose", "publish", "compose", "getReceiptPriceChanges", "publish", "compose", "add", "subscribe", "observeOn", "subscribeOn", "doOnError", "filter", "flatMapSingle", "doOnNext", "map", "filter", "combineLatest", "isPresent", "isPresent", "build", "setPrice", "setCurrency", "getDefaultCurrencyCode", "multiply", "get", "get", "of", "absent", "debug", "doOnSuccess", "map", "firstOrError", "getExchangedPriceInBaseCurrencyFocusChanges", "of", "absent", "debug", "error", "displayExchangedPriceInBaseCurrency", "add", "subscribe", "observeOn", "subscribeOn", "doOnError", "map", "doOnNext", "map", "filter", "doOnNext", "withLatestFrom", "isPresent", "isPresent", "compareTo", "get", "absent", "divide", "get", "get", "setBaseCurrency", "setRate", "getDefaultCurrencyCode", "of", "build", "absent", "isPresent", "debug", "debug", "error", "displayExchangeRate", "add", "subscribe", "doOnNext", "map", "filter", "length", "absent", "debug", "displayExchangedPriceInBaseCurrency", "add", "subscribe", "map", "doOnNext", "map", "filter", "skip", "length", "absent", "debug", "success", "displayExchangeRate", "add", "subscribe", "doOnNext", "map", "equals", "getDefaultCurrencyCode", "debug", "toggleExchangeRateFieldVisibility", "add", "subscribe", "map", "map", "just", "displayBaseCurrency", "add", "connect", "add", "connect", "add", "connect", "add", "connect", "add", "connect", "add", "connect", "add", "connect", "add", "subscribe", "map", "filter", "map", "map", "filter", "filter", "just", "ofNullable", "getExchangeRate", "getPrice", "supportsExchangeRateFor", "getDefaultCurrencyCode", "displayExchangeRate", "add", "subscribe", "map", "just", "getCurrencySelectionText", "equals", "getDefaultCurrencyCode", "toggleExchangeRateFieldVisibility"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}