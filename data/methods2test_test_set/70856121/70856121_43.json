{"test_class": {"identifier": "JmxConnectionFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/server/src/test/java/io/cassandrareaper/jmx/JmxConnectionFactoryTest.java"}, "test_case": {"identifier": "fetchingJmxCredentialsIsntPresentWhenNotDefinedAnywhere", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void fetchingJmxCredentialsIsntPresentWhenNotDefinedAnywhere() {\n    Cluster cluster = Cluster.builder().withName(\"FooCluster\")\n            .withSeedHosts(ImmutableSet.of(\"127.0.0.1\")).build();\n\n    JmxConnectionFactory connectionFactory = new JmxConnectionFactory(mock(AppContext.class), mock(Cryptograph.class));\n\n    Optional<JmxCredentials> jmxCredentials = connectionFactory.getJmxCredentialsForCluster(Optional.of(cluster));\n\n    assertFalse(jmxCredentials.isPresent());\n  }", "signature": "void fetchingJmxCredentialsIsntPresentWhenNotDefinedAnywhere()", "full_signature": "@Test public void fetchingJmxCredentialsIsntPresentWhenNotDefinedAnywhere()", "class_method_signature": "JmxConnectionFactoryTest.fetchingJmxCredentialsIsntPresentWhenNotDefinedAnywhere()", "testcase": true, "constructor": false, "invocations": ["build", "withSeedHosts", "withName", "builder", "of", "mock", "mock", "getJmxCredentialsForCluster", "of", "assertFalse", "isPresent"]}, "focal_class": {"identifier": "JmxConnectionFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(JmxConnectionFactory.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JmxConnectionFactory.class)", "var_name": "LOG"}, {"original_string": "private static final ConcurrentMap<String, JmxProxy> JMX_CONNECTIONS = Maps.newConcurrentMap();", "modifier": "private static final", "type": "ConcurrentMap<String, JmxProxy>", "declarator": "JMX_CONNECTIONS = Maps.newConcurrentMap()", "var_name": "JMX_CONNECTIONS"}, {"original_string": "private final MetricRegistry metricRegistry;", "modifier": "private final", "type": "MetricRegistry", "declarator": "metricRegistry", "var_name": "metricRegistry"}, {"original_string": "private final HostConnectionCounters hostConnectionCounters;", "modifier": "private final", "type": "HostConnectionCounters", "declarator": "hostConnectionCounters", "var_name": "hostConnectionCounters"}, {"original_string": "private final AppContext context;", "modifier": "private final", "type": "AppContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final Cryptograph cryptograph;", "modifier": "private final", "type": "Cryptograph", "declarator": "cryptograph", "var_name": "cryptograph"}, {"original_string": "private Map<String, Integer> jmxPorts;", "modifier": "private", "type": "Map<String, Integer>", "declarator": "jmxPorts", "var_name": "jmxPorts"}, {"original_string": "private JmxCredentials jmxAuth;", "modifier": "private", "type": "JmxCredentials", "declarator": "jmxAuth", "var_name": "jmxAuth"}, {"original_string": "private Jmxmp jmxmp;", "modifier": "private", "type": "Jmxmp", "declarator": "jmxmp", "var_name": "jmxmp"}, {"original_string": "private Map<String, JmxCredentials> jmxCredentials;", "modifier": "private", "type": "Map<String, JmxCredentials>", "declarator": "jmxCredentials", "var_name": "jmxCredentials"}, {"original_string": "private AddressTranslator addressTranslator;", "modifier": "private", "type": "AddressTranslator", "declarator": "addressTranslator", "var_name": "addressTranslator"}, {"original_string": "private final Set<String> accessibleDatacenters = Sets.newHashSet();", "modifier": "private final", "type": "Set<String>", "declarator": "accessibleDatacenters = Sets.newHashSet()", "var_name": "accessibleDatacenters"}], "methods": [{"identifier": "JmxConnectionFactory", "parameters": "(AppContext context, Cryptograph cryptograph)", "modifiers": "public", "return": "", "signature": " JmxConnectionFactory(AppContext context, Cryptograph cryptograph)", "full_signature": "public  JmxConnectionFactory(AppContext context, Cryptograph cryptograph)", "class_method_signature": "JmxConnectionFactory.JmxConnectionFactory(AppContext context, Cryptograph cryptograph)", "testcase": false, "constructor": true}, {"identifier": "registerConnectionsGauge", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void registerConnectionsGauge()", "full_signature": "private void registerConnectionsGauge()", "class_method_signature": "JmxConnectionFactory.registerConnectionsGauge()", "testcase": false, "constructor": false}, {"identifier": "connectImpl", "parameters": "(Node node)", "modifiers": "protected", "return": "JmxProxy", "signature": "JmxProxy connectImpl(Node node)", "full_signature": "protected JmxProxy connectImpl(Node node)", "class_method_signature": "JmxConnectionFactory.connectImpl(Node node)", "testcase": false, "constructor": false}, {"identifier": "connectAny", "parameters": "(Collection<Node> nodes)", "modifiers": "@VisibleForTesting public final", "return": "JmxProxy", "signature": "JmxProxy connectAny(Collection<Node> nodes)", "full_signature": "@VisibleForTesting public final JmxProxy connectAny(Collection<Node> nodes)", "class_method_signature": "JmxConnectionFactory.connectAny(Collection<Node> nodes)", "testcase": false, "constructor": false}, {"identifier": "setJmxAuth", "parameters": "(JmxCredentials jmxAuth)", "modifiers": "public final", "return": "void", "signature": "void setJmxAuth(JmxCredentials jmxAuth)", "full_signature": "public final void setJmxAuth(JmxCredentials jmxAuth)", "class_method_signature": "JmxConnectionFactory.setJmxAuth(JmxCredentials jmxAuth)", "testcase": false, "constructor": false}, {"identifier": "setJmxCredentials", "parameters": "(Map<String, JmxCredentials> jmxCredentials)", "modifiers": "public final", "return": "void", "signature": "void setJmxCredentials(Map<String, JmxCredentials> jmxCredentials)", "full_signature": "public final void setJmxCredentials(Map<String, JmxCredentials> jmxCredentials)", "class_method_signature": "JmxConnectionFactory.setJmxCredentials(Map<String, JmxCredentials> jmxCredentials)", "testcase": false, "constructor": false}, {"identifier": "setJmxPorts", "parameters": "(Map<String, Integer> jmxPorts)", "modifiers": "public final", "return": "void", "signature": "void setJmxPorts(Map<String, Integer> jmxPorts)", "full_signature": "public final void setJmxPorts(Map<String, Integer> jmxPorts)", "class_method_signature": "JmxConnectionFactory.setJmxPorts(Map<String, Integer> jmxPorts)", "testcase": false, "constructor": false}, {"identifier": "setAddressTranslator", "parameters": "(AddressTranslator addressTranslator)", "modifiers": "public final", "return": "void", "signature": "void setAddressTranslator(AddressTranslator addressTranslator)", "full_signature": "public final void setAddressTranslator(AddressTranslator addressTranslator)", "class_method_signature": "JmxConnectionFactory.setAddressTranslator(AddressTranslator addressTranslator)", "testcase": false, "constructor": false}, {"identifier": "getJmxmp", "parameters": "()", "modifiers": "public", "return": "Jmxmp", "signature": "Jmxmp getJmxmp()", "full_signature": "public Jmxmp getJmxmp()", "class_method_signature": "JmxConnectionFactory.getJmxmp()", "testcase": false, "constructor": false}, {"identifier": "setJmxmp", "parameters": "(Jmxmp jmxmp)", "modifiers": "public", "return": "void", "signature": "void setJmxmp(Jmxmp jmxmp)", "full_signature": "public void setJmxmp(Jmxmp jmxmp)", "class_method_signature": "JmxConnectionFactory.setJmxmp(Jmxmp jmxmp)", "testcase": false, "constructor": false}, {"identifier": "getHostConnectionCounters", "parameters": "()", "modifiers": "public final", "return": "HostConnectionCounters", "signature": "HostConnectionCounters getHostConnectionCounters()", "full_signature": "public final HostConnectionCounters getHostConnectionCounters()", "class_method_signature": "JmxConnectionFactory.getHostConnectionCounters()", "testcase": false, "constructor": false}, {"identifier": "getAccessibleDatacenters", "parameters": "()", "modifiers": "public final", "return": "Set<String>", "signature": "Set<String> getAccessibleDatacenters()", "full_signature": "public final Set<String> getAccessibleDatacenters()", "class_method_signature": "JmxConnectionFactory.getAccessibleDatacenters()", "testcase": false, "constructor": false}, {"identifier": "getJmxCredentialsForCluster", "parameters": "(Optional<Cluster> cluster)", "modifiers": "public", "return": "Optional<JmxCredentials>", "signature": "Optional<JmxCredentials> getJmxCredentialsForCluster(Optional<Cluster> cluster)", "full_signature": "public Optional<JmxCredentials> getJmxCredentialsForCluster(Optional<Cluster> cluster)", "class_method_signature": "JmxConnectionFactory.getJmxCredentialsForCluster(Optional<Cluster> cluster)", "testcase": false, "constructor": false}], "file": "src/server/src/main/java/io/cassandrareaper/jmx/JmxConnectionFactory.java"}, "focal_method": {"identifier": "getJmxCredentialsForCluster", "parameters": "(Optional<Cluster> cluster)", "modifiers": "public", "return": "Optional<JmxCredentials>", "body": "public Optional<JmxCredentials> getJmxCredentialsForCluster(Optional<Cluster> cluster) {\n    JmxCredentials credentials = cluster.flatMap(Cluster::getJmxCredentials).orElse(null);\n    String clusterName = cluster.map(Cluster::getName).orElse(\"\");\n\n    if (credentials == null && jmxCredentials != null) {\n      if (jmxCredentials.containsKey(clusterName)) {\n        credentials = jmxCredentials.get(clusterName);\n      } else if (jmxCredentials.containsKey(Cluster.toSymbolicName(clusterName))) {\n        // As clusters get stored in the database with their \"symbolic name\" we have to look for that too\n        credentials = jmxCredentials.get(Cluster.toSymbolicName(clusterName));\n      }\n    }\n\n    if (credentials == null && jmxAuth != null) {\n      credentials = jmxAuth;\n    }\n\n    return Optional.ofNullable(credentials);\n  }", "signature": "Optional<JmxCredentials> getJmxCredentialsForCluster(Optional<Cluster> cluster)", "full_signature": "public Optional<JmxCredentials> getJmxCredentialsForCluster(Optional<Cluster> cluster)", "class_method_signature": "JmxConnectionFactory.getJmxCredentialsForCluster(Optional<Cluster> cluster)", "testcase": false, "constructor": false, "invocations": ["orElse", "flatMap", "orElse", "map", "containsKey", "get", "containsKey", "toSymbolicName", "get", "toSymbolicName", "ofNullable"]}, "repository": {"repo_id": 70856121, "url": "https://github.com/thelastpickle/cassandra-reaper", "language": "Java", "is_fork": false, "fork_count": 156, "stargazer_count": 353, "size": 43662, "license": "licensed"}}