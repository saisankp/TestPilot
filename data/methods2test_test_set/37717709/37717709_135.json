{"test_class": {"identifier": "DocumentStorageTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DocumentStorage storage;", "modifier": "private", "type": "DocumentStorage", "declarator": "storage", "var_name": "storage"}], "file": "org.jvoicexml/src/test/java/org/jvoicexml/documentserver/jetty/DocumentStorageTest.java"}, "test_case": {"identifier": "testAddGrammarDocument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddGrammarDocument() throws Exception {\n        final SrgsXmlDocument srgsdocument = new SrgsXmlDocument();\n        final Grammar grammar = srgsdocument.getGrammar();\n        final GrammarDocument document = new InternalGrammarDocument(grammar);\n        storage.addGrammarDocument(\"12345\", document);\n        final URI uri = document.getURI();\n        Assert.assertNotNull(uri);\n        final URI path = new URI(uri.getPath());\n        Assert.assertEquals(document, storage.getDocument(path));\n    }", "signature": "void testAddGrammarDocument()", "full_signature": "@Test public void testAddGrammarDocument()", "class_method_signature": "DocumentStorageTest.testAddGrammarDocument()", "testcase": true, "constructor": false, "invocations": ["getGrammar", "addGrammarDocument", "getURI", "assertNotNull", "getPath", "assertEquals", "getDocument"]}, "focal_class": {"identifier": "DocumentStorage", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LogManager\n            .getLogger(DocumentStorage.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager\n            .getLogger(DocumentStorage.class)", "var_name": "LOGGER"}, {"original_string": "private final Map<String, Collection<GrammarDocument>> sessionDocuments;", "modifier": "private final", "type": "Map<String, Collection<GrammarDocument>>", "declarator": "sessionDocuments", "var_name": "sessionDocuments"}, {"original_string": "private final Map<URI, GrammarDocument> documents;", "modifier": "private final", "type": "Map<URI, GrammarDocument>", "declarator": "documents", "var_name": "documents"}, {"original_string": "private Server server;", "modifier": "private", "type": "Server", "declarator": "server", "var_name": "server"}, {"original_string": "private int storagePort;", "modifier": "private", "type": "int", "declarator": "storagePort", "var_name": "storagePort"}, {"original_string": "private final Handler internalGrammarHandler;", "modifier": "private final", "type": "Handler", "declarator": "internalGrammarHandler", "var_name": "internalGrammarHandler"}, {"original_string": "private final BuiltinGrammarHandler builtinGrammarHandler;", "modifier": "private final", "type": "BuiltinGrammarHandler", "declarator": "builtinGrammarHandler", "var_name": "builtinGrammarHandler"}], "methods": [{"identifier": "DocumentStorage", "parameters": "()", "modifiers": "public", "return": "", "signature": " DocumentStorage()", "full_signature": "public  DocumentStorage()", "class_method_signature": "DocumentStorage.DocumentStorage()", "testcase": false, "constructor": true}, {"identifier": "setStoragePort", "parameters": "(final int port)", "modifiers": "public", "return": "void", "signature": "void setStoragePort(final int port)", "full_signature": "public void setStoragePort(final int port)", "class_method_signature": "DocumentStorage.setStoragePort(final int port)", "testcase": false, "constructor": false}, {"identifier": "setGrammarCreators", "parameters": "(final Collection<GrammarCreator> col)", "modifiers": "public", "return": "void", "signature": "void setGrammarCreators(final Collection<GrammarCreator> col)", "full_signature": "public void setGrammarCreators(final Collection<GrammarCreator> col)", "class_method_signature": "DocumentStorage.setGrammarCreators(final Collection<GrammarCreator> col)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "DocumentStorage.start()", "testcase": false, "constructor": false}, {"identifier": "resolveBuiltinUri", "parameters": "(final URI uri)", "modifiers": "public", "return": "URI", "signature": "URI resolveBuiltinUri(final URI uri)", "full_signature": "public URI resolveBuiltinUri(final URI uri)", "class_method_signature": "DocumentStorage.resolveBuiltinUri(final URI uri)", "testcase": false, "constructor": false}, {"identifier": "addGrammarDocument", "parameters": "(final String sessionId,\n            final GrammarDocument document)", "modifiers": "public", "return": "URI", "signature": "URI addGrammarDocument(final String sessionId,\n            final GrammarDocument document)", "full_signature": "public URI addGrammarDocument(final String sessionId,\n            final GrammarDocument document)", "class_method_signature": "DocumentStorage.addGrammarDocument(final String sessionId,\n            final GrammarDocument document)", "testcase": false, "constructor": false}, {"identifier": "getCurrentSessionDocuments", "parameters": "(\n            final String sessionId)", "modifiers": "private", "return": "Collection<GrammarDocument>", "signature": "Collection<GrammarDocument> getCurrentSessionDocuments(\n            final String sessionId)", "full_signature": "private Collection<GrammarDocument> getCurrentSessionDocuments(\n            final String sessionId)", "class_method_signature": "DocumentStorage.getCurrentSessionDocuments(\n            final String sessionId)", "testcase": false, "constructor": false}, {"identifier": "getDocument", "parameters": "(final URI uri)", "modifiers": "public", "return": "GrammarDocument", "signature": "GrammarDocument getDocument(final URI uri)", "full_signature": "public GrammarDocument getDocument(final URI uri)", "class_method_signature": "DocumentStorage.getDocument(final URI uri)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "(final String sessionId)", "modifiers": "public", "return": "void", "signature": "void clear(final String sessionId)", "full_signature": "public void clear(final String sessionId)", "class_method_signature": "DocumentStorage.clear(final String sessionId)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "DocumentStorage.stop()", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/documentserver/jetty/DocumentStorage.java"}, "focal_method": {"identifier": "addGrammarDocument", "parameters": "(final String sessionId,\n            final GrammarDocument document)", "modifiers": "public", "return": "URI", "body": "public URI addGrammarDocument(final String sessionId,\n            final GrammarDocument document) throws URISyntaxException {\n        Collection<GrammarDocument> currentDocuments = getCurrentSessionDocuments(sessionId);\n        currentDocuments.add(document);\n        final URI localUri = new URI(\n                InternalGrammarDocumentHandler.CONTEXT_PATH + \"/\" + sessionId\n                        + \"/\" + document.hashCode());\n        documents.put(localUri, document);\n        final URI serverUri = server.getURI();\n        final URI uri = new URI(serverUri\n                + InternalGrammarDocumentHandler.CONTEXT_PATH.substring(1)\n                + \"/\" + sessionId + \"/\" + document.hashCode());\n        document.setURI(uri);\n        LOGGER.info(\"added grammar document at '\" + uri + \"'\");\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"added document \" + document);\n        }\n        return null;\n    }", "signature": "URI addGrammarDocument(final String sessionId,\n            final GrammarDocument document)", "full_signature": "public URI addGrammarDocument(final String sessionId,\n            final GrammarDocument document)", "class_method_signature": "DocumentStorage.addGrammarDocument(final String sessionId,\n            final GrammarDocument document)", "testcase": false, "constructor": false, "invocations": ["getCurrentSessionDocuments", "add", "hashCode", "put", "getURI", "substring", "hashCode", "setURI", "info", "isDebugEnabled", "debug"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}