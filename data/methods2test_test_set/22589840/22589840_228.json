{"test_class": {"identifier": "ForumServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Long THREAD_ID_WITH_ONE_MESSAGE = 1672l;", "modifier": "private static final", "type": "Long", "declarator": "THREAD_ID_WITH_ONE_MESSAGE = 1672l", "var_name": "THREAD_ID_WITH_ONE_MESSAGE"}, {"original_string": "private static final Long MESSAGE_ID = (long) 456;", "modifier": "private static final", "type": "Long", "declarator": "MESSAGE_ID = (long) 456", "var_name": "MESSAGE_ID"}, {"original_string": "private ForumDao forumManagerMock;", "modifier": "private", "type": "ForumDao", "declarator": "forumManagerMock", "var_name": "forumManagerMock"}, {"original_string": "private ForumServiceImpl forumService;", "modifier": "private", "type": "ForumServiceImpl", "declarator": "forumService", "var_name": "forumService"}, {"original_string": "private List<Message> emptyList;", "modifier": "private", "type": "List<Message>", "declarator": "emptyList", "var_name": "emptyList"}, {"original_string": "private ArrayList<Message> threadWithOneMessageList;", "modifier": "private", "type": "ArrayList<Message>", "declarator": "threadWithOneMessageList", "var_name": "threadWithOneMessageList"}, {"original_string": "private Message oneTopMessage;", "modifier": "private", "type": "Message", "declarator": "oneTopMessage", "var_name": "oneTopMessage"}, {"original_string": "private Message oneMessage;", "modifier": "private", "type": "Message", "declarator": "oneMessage", "var_name": "oneMessage"}, {"original_string": "private Message moveTargetMessage;", "modifier": "private", "type": "Message", "declarator": "moveTargetMessage", "var_name": "moveTargetMessage"}, {"original_string": "private Message parentOfMovable;", "modifier": "private", "type": "Message", "declarator": "parentOfMovable", "var_name": "parentOfMovable"}, {"original_string": "private Message movableMessage;", "modifier": "private", "type": "Message", "declarator": "movableMessage", "var_name": "movableMessage"}, {"original_string": "private Message movableMessageChild1;", "modifier": "private", "type": "Message", "declarator": "movableMessageChild1", "var_name": "movableMessageChild1"}, {"original_string": "private Message movableMessageChild2;", "modifier": "private", "type": "Message", "declarator": "movableMessageChild2", "var_name": "movableMessageChild2"}, {"original_string": "private Identity updaterIdentity;", "modifier": "private", "type": "Identity", "declarator": "updaterIdentity", "var_name": "updaterIdentity"}, {"original_string": "private PublishEventTO publishEventTO;", "modifier": "private", "type": "PublishEventTO", "declarator": "publishEventTO", "var_name": "publishEventTO"}], "file": "olat7.8/src/test/java/org/olat/lms/forum/ForumServiceImplTest.java"}, "test_case": {"identifier": "splitThread", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void splitThread() {\n        Message topMessage = new MessageImpl();\n        Message message2 = new MessageImpl();\n        message2.setParent(topMessage);\n\n        Message message3 = new MessageImpl();\n        message3.setParent(message2);\n\n        Message message4 = new MessageImpl();\n        message4.setParent(message3);\n\n        Message newTopMessage = forumService.splitThread(updaterIdentity, message3);\n        assertEquals(message3, newTopMessage);\n\n    }", "signature": "void splitThread()", "full_signature": "@Test public void splitThread()", "class_method_signature": "ForumServiceImplTest.splitThread()", "testcase": true, "constructor": false, "invocations": ["setParent", "setParent", "setParent", "splitThread", "assertEquals"]}, "focal_class": {"identifier": "ForumServiceImpl", "superclass": "", "interfaces": "implements ForumService", "fields": [{"original_string": "private static final Logger log = LoggerHelper.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerHelper.getLogger()", "var_name": "log"}, {"original_string": "@Autowired\n    private ForumDao forumDao;", "modifier": "@Autowired\n    private", "type": "ForumDao", "declarator": "forumDao", "var_name": "forumDao"}, {"original_string": "@Autowired\n    private TextService txtService;", "modifier": "@Autowired\n    private", "type": "TextService", "declarator": "txtService", "var_name": "txtService"}, {"original_string": "@Autowired\n    private MarkDAO markingDao;", "modifier": "@Autowired\n    private", "type": "MarkDAO", "declarator": "markingDao", "var_name": "markingDao"}, {"original_string": "@Autowired\n    protected NotificationService notificationService;", "modifier": "@Autowired\n    protected", "type": "NotificationService", "declarator": "notificationService", "var_name": "notificationService"}], "methods": [{"identifier": "ForumServiceImpl", "parameters": "()", "modifiers": "", "return": "", "signature": " ForumServiceImpl()", "full_signature": "  ForumServiceImpl()", "class_method_signature": "ForumServiceImpl.ForumServiceImpl()", "testcase": false, "constructor": true}, {"identifier": "ForumServiceImpl", "parameters": "(ForumDao forumManagerMock)", "modifiers": "", "return": "", "signature": " ForumServiceImpl(ForumDao forumManagerMock)", "full_signature": "  ForumServiceImpl(ForumDao forumManagerMock)", "class_method_signature": "ForumServiceImpl.ForumServiceImpl(ForumDao forumManagerMock)", "testcase": false, "constructor": true}, {"identifier": "getThread", "parameters": "(Long msgid)", "modifiers": "@Override public", "return": "List<Message>", "signature": "List<Message> getThread(Long msgid)", "full_signature": "@Override public List<Message> getThread(Long msgid)", "class_method_signature": "ForumServiceImpl.getThread(Long msgid)", "testcase": false, "constructor": false}, {"identifier": "getAllForumKeys", "parameters": "()", "modifiers": "@Override public", "return": "List<Long>", "signature": "List<Long> getAllForumKeys()", "full_signature": "@Override public List<Long> getAllForumKeys()", "class_method_signature": "ForumServiceImpl.getAllForumKeys()", "testcase": false, "constructor": false}, {"identifier": "getMessagesByForum", "parameters": "(final Forum forum)", "modifiers": "@Override public", "return": "List<Message>", "signature": "List<Message> getMessagesByForum(final Forum forum)", "full_signature": "@Override public List<Message> getMessagesByForum(final Forum forum)", "class_method_signature": "ForumServiceImpl.getMessagesByForum(final Forum forum)", "testcase": false, "constructor": false}, {"identifier": "getMessagesByForumID", "parameters": "(Long forum_id)", "modifiers": "@Override public", "return": "List<Message>", "signature": "List<Message> getMessagesByForumID(Long forum_id)", "full_signature": "@Override public List<Message> getMessagesByForumID(Long forum_id)", "class_method_signature": "ForumServiceImpl.getMessagesByForumID(Long forum_id)", "testcase": false, "constructor": false}, {"identifier": "countMessagesByForumID", "parameters": "(Long forumkey)", "modifiers": "@Override public", "return": "Integer", "signature": "Integer countMessagesByForumID(Long forumkey)", "full_signature": "@Override public Integer countMessagesByForumID(Long forumkey)", "class_method_signature": "ForumServiceImpl.countMessagesByForumID(Long forumkey)", "testcase": false, "constructor": false}, {"identifier": "countReadMessagesByUserAndForum", "parameters": "(Identity identity, Long forumkey)", "modifiers": "@Override public", "return": "int", "signature": "int countReadMessagesByUserAndForum(Identity identity, Long forumkey)", "full_signature": "@Override public int countReadMessagesByUserAndForum(Identity identity, Long forumkey)", "class_method_signature": "ForumServiceImpl.countReadMessagesByUserAndForum(Identity identity, Long forumkey)", "testcase": false, "constructor": false}, {"identifier": "getNewMessageInfo", "parameters": "(Long forumKey, Date latestRead)", "modifiers": "@Override public", "return": "List<Message>", "signature": "List<Message> getNewMessageInfo(Long forumKey, Date latestRead)", "full_signature": "@Override public List<Message> getNewMessageInfo(Long forumKey, Date latestRead)", "class_method_signature": "ForumServiceImpl.getNewMessageInfo(Long forumKey, Date latestRead)", "testcase": false, "constructor": false}, {"identifier": "addAForum", "parameters": "()", "modifiers": "@Override public", "return": "Forum", "signature": "Forum addAForum()", "full_signature": "@Override public Forum addAForum()", "class_method_signature": "ForumServiceImpl.addAForum()", "testcase": false, "constructor": false}, {"identifier": "createForum", "parameters": "()", "modifiers": "private", "return": "ForumImpl", "signature": "ForumImpl createForum()", "full_signature": "private ForumImpl createForum()", "class_method_signature": "ForumServiceImpl.createForum()", "testcase": false, "constructor": false}, {"identifier": "loadForum", "parameters": "(Long forumKey)", "modifiers": "@Override public", "return": "Forum", "signature": "Forum loadForum(Long forumKey)", "full_signature": "@Override public Forum loadForum(Long forumKey)", "class_method_signature": "ForumServiceImpl.loadForum(Long forumKey)", "testcase": false, "constructor": false}, {"identifier": "deleteForum", "parameters": "(Long forumKey)", "modifiers": "@Override public", "return": "void", "signature": "void deleteForum(Long forumKey)", "full_signature": "@Override public void deleteForum(Long forumKey)", "class_method_signature": "ForumServiceImpl.deleteForum(Long forumKey)", "testcase": false, "constructor": false}, {"identifier": "replyToMessage", "parameters": "(Identity creator, Message replyToMessage, Message newMessage, PublishEventTO publishEventTO)", "modifiers": "@Override public", "return": "void", "signature": "void replyToMessage(Identity creator, Message replyToMessage, Message newMessage, PublishEventTO publishEventTO)", "full_signature": "@Override public void replyToMessage(Identity creator, Message replyToMessage, Message newMessage, PublishEventTO publishEventTO)", "class_method_signature": "ForumServiceImpl.replyToMessage(Identity creator, Message replyToMessage, Message newMessage, PublishEventTO publishEventTO)", "testcase": false, "constructor": false}, {"identifier": "publishEvent", "parameters": "(PublishEventTO publishEventTO)", "modifiers": "private", "return": "void", "signature": "void publishEvent(PublishEventTO publishEventTO)", "full_signature": "private void publishEvent(PublishEventTO publishEventTO)", "class_method_signature": "ForumServiceImpl.publishEvent(PublishEventTO publishEventTO)", "testcase": false, "constructor": false}, {"identifier": "addTopMessage", "parameters": "(Forum forum, Message topMessage, Identity creator, PublishEventTO publishEventTO)", "modifiers": "@Override public", "return": "void", "signature": "void addTopMessage(Forum forum, Message topMessage, Identity creator, PublishEventTO publishEventTO)", "full_signature": "@Override public void addTopMessage(Forum forum, Message topMessage, Identity creator, PublishEventTO publishEventTO)", "class_method_signature": "ForumServiceImpl.addTopMessage(Forum forum, Message topMessage, Identity creator, PublishEventTO publishEventTO)", "testcase": false, "constructor": false}, {"identifier": "loadMessage", "parameters": "(Long messageKey)", "modifiers": "@Override public", "return": "Message", "signature": "Message loadMessage(Long messageKey)", "full_signature": "@Override public Message loadMessage(Long messageKey)", "class_method_signature": "ForumServiceImpl.loadMessage(Long messageKey)", "testcase": false, "constructor": false}, {"identifier": "createMessage", "parameters": "()", "modifiers": "@Override public", "return": "Message", "signature": "Message createMessage()", "full_signature": "@Override public Message createMessage()", "class_method_signature": "ForumServiceImpl.createMessage()", "testcase": false, "constructor": false}, {"identifier": "saveMessage", "parameters": "(final Message m)", "modifiers": "public", "return": "void", "signature": "void saveMessage(final Message m)", "full_signature": "public void saveMessage(final Message m)", "class_method_signature": "ForumServiceImpl.saveMessage(final Message m)", "testcase": false, "constructor": false}, {"identifier": "updateMessage", "parameters": "(Identity updater, Message updatedMessage, boolean updateLastModifiedDate, ForumChangedEvent event, PublishEventTO publishEventTO)", "modifiers": "@Override public", "return": "void", "signature": "void updateMessage(Identity updater, Message updatedMessage, boolean updateLastModifiedDate, ForumChangedEvent event, PublishEventTO publishEventTO)", "full_signature": "@Override public void updateMessage(Identity updater, Message updatedMessage, boolean updateLastModifiedDate, ForumChangedEvent event, PublishEventTO publishEventTO)", "class_method_signature": "ForumServiceImpl.updateMessage(Identity updater, Message updatedMessage, boolean updateLastModifiedDate, ForumChangedEvent event, PublishEventTO publishEventTO)", "testcase": false, "constructor": false}, {"identifier": "updateCounters", "parameters": "(final Message m)", "modifiers": "public", "return": "void", "signature": "void updateCounters(final Message m)", "full_signature": "public void updateCounters(final Message m)", "class_method_signature": "ForumServiceImpl.updateCounters(final Message m)", "testcase": false, "constructor": false}, {"identifier": "deleteMessageTree", "parameters": "(Long forumKey, Message m)", "modifiers": "@Override public", "return": "void", "signature": "void deleteMessageTree(Long forumKey, Message m)", "full_signature": "@Override public void deleteMessageTree(Long forumKey, Message m)", "class_method_signature": "ForumServiceImpl.deleteMessageTree(Long forumKey, Message m)", "testcase": false, "constructor": false}, {"identifier": "deleteMessageRecursion", "parameters": "(final Long forumKey, Message m)", "modifiers": "private", "return": "void", "signature": "void deleteMessageRecursion(final Long forumKey, Message m)", "full_signature": "private void deleteMessageRecursion(final Long forumKey, Message m)", "class_method_signature": "ForumServiceImpl.deleteMessageRecursion(final Long forumKey, Message m)", "testcase": false, "constructor": false}, {"identifier": "hasChildren", "parameters": "(Message m)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasChildren(Message m)", "full_signature": "@Override public boolean hasChildren(Message m)", "class_method_signature": "ForumServiceImpl.hasChildren(Message m)", "testcase": false, "constructor": false}, {"identifier": "findMessage", "parameters": "(Long messageId)", "modifiers": "@Override public", "return": "Message", "signature": "Message findMessage(Long messageId)", "full_signature": "@Override public Message findMessage(Long messageId)", "class_method_signature": "ForumServiceImpl.findMessage(Long messageId)", "testcase": false, "constructor": false}, {"identifier": "splitThread", "parameters": "(Identity updater, final Message msg)", "modifiers": "@Override public", "return": "Message", "signature": "Message splitThread(Identity updater, final Message msg)", "full_signature": "@Override public Message splitThread(Identity updater, final Message msg)", "class_method_signature": "ForumServiceImpl.splitThread(Identity updater, final Message msg)", "testcase": false, "constructor": false}, {"identifier": "getSubthread", "parameters": "(final Message msg, final List<Message> threadList, final List<Message> subthreadList)", "modifiers": "private", "return": "void", "signature": "void getSubthread(final Message msg, final List<Message> threadList, final List<Message> subthreadList)", "full_signature": "private void getSubthread(final Message msg, final List<Message> threadList, final List<Message> subthreadList)", "class_method_signature": "ForumServiceImpl.getSubthread(final Message msg, final List<Message> threadList, final List<Message> subthreadList)", "testcase": false, "constructor": false}, {"identifier": "moveMessage", "parameters": "(Identity updater, final Message msg, final Message topMsg)", "modifiers": "@Override public", "return": "Message", "signature": "Message moveMessage(Identity updater, final Message msg, final Message topMsg)", "full_signature": "@Override public Message moveMessage(Identity updater, final Message msg, final Message topMsg)", "class_method_signature": "ForumServiceImpl.moveMessage(Identity updater, final Message msg, final Message topMsg)", "testcase": false, "constructor": false}, {"identifier": "cloneMessageAndAssignNewParent", "parameters": "(Identity updater, final Message msg, final Message topMsg)", "modifiers": "protected", "return": "Message", "signature": "Message cloneMessageAndAssignNewParent(Identity updater, final Message msg, final Message topMsg)", "full_signature": "protected Message cloneMessageAndAssignNewParent(Identity updater, final Message msg, final Message topMsg)", "class_method_signature": "ForumServiceImpl.cloneMessageAndAssignNewParent(Identity updater, final Message msg, final Message topMsg)", "testcase": false, "constructor": false}, {"identifier": "moveMarks", "parameters": "(Message oldMessage, Message newMessage)", "modifiers": "private", "return": "void", "signature": "void moveMarks(Message oldMessage, Message newMessage)", "full_signature": "private void moveMarks(Message oldMessage, Message newMessage)", "class_method_signature": "ForumServiceImpl.moveMarks(Message oldMessage, Message newMessage)", "testcase": false, "constructor": false}, {"identifier": "moveMessageContainer", "parameters": "(final Long fromForumKey, final Long fromMessageKey, final Long toForumKey, final Long toMessageKey)", "modifiers": "private", "return": "void", "signature": "void moveMessageContainer(final Long fromForumKey, final Long fromMessageKey, final Long toForumKey, final Long toMessageKey)", "full_signature": "private void moveMessageContainer(final Long fromForumKey, final Long fromMessageKey, final Long toForumKey, final Long toMessageKey)", "class_method_signature": "ForumServiceImpl.moveMessageContainer(final Long fromForumKey, final Long fromMessageKey, final Long toForumKey, final Long toMessageKey)", "testcase": false, "constructor": false}, {"identifier": "getReadSet", "parameters": "(Identity identity, Forum forum)", "modifiers": "@Override public", "return": "Set<Long>", "signature": "Set<Long> getReadSet(Identity identity, Forum forum)", "full_signature": "@Override public Set<Long> getReadSet(Identity identity, Forum forum)", "class_method_signature": "ForumServiceImpl.getReadSet(Identity identity, Forum forum)", "testcase": false, "constructor": false}, {"identifier": "markAsRead", "parameters": "(Identity identity, Message msg)", "modifiers": "@Override public", "return": "void", "signature": "void markAsRead(Identity identity, Message msg)", "full_signature": "@Override public void markAsRead(Identity identity, Message msg)", "class_method_signature": "ForumServiceImpl.markAsRead(Identity identity, Message msg)", "testcase": false, "constructor": false}, {"identifier": "getForumContainer", "parameters": "(final Long forumKey)", "modifiers": "@Override public", "return": "VFSContainer", "signature": "VFSContainer getForumContainer(final Long forumKey)", "full_signature": "@Override public VFSContainer getForumContainer(final Long forumKey)", "class_method_signature": "ForumServiceImpl.getForumContainer(final Long forumKey)", "testcase": false, "constructor": false}, {"identifier": "getForumContainerSize", "parameters": "(final Long forumKey)", "modifiers": "@Override public", "return": "String", "signature": "String getForumContainerSize(final Long forumKey)", "full_signature": "@Override public String getForumContainerSize(final Long forumKey)", "class_method_signature": "ForumServiceImpl.getForumContainerSize(final Long forumKey)", "testcase": false, "constructor": false}, {"identifier": "getMessageContainer", "parameters": "(Long forumKey, Long messageKey)", "modifiers": "@Override public", "return": "VFSContainer", "signature": "VFSContainer getMessageContainer(Long forumKey, Long messageKey)", "full_signature": "@Override public VFSContainer getMessageContainer(Long forumKey, Long messageKey)", "class_method_signature": "ForumServiceImpl.getMessageContainer(Long forumKey, Long messageKey)", "testcase": false, "constructor": false}, {"identifier": "getForumArchiveContainer", "parameters": "(final Identity identity, final Long forumKey)", "modifiers": "@Override public", "return": "VFSContainer", "signature": "VFSContainer getForumArchiveContainer(final Identity identity, final Long forumKey)", "full_signature": "@Override public VFSContainer getForumArchiveContainer(final Identity identity, final Long forumKey)", "class_method_signature": "ForumServiceImpl.getForumArchiveContainer(final Identity identity, final Long forumKey)", "testcase": false, "constructor": false}, {"identifier": "getTempUploadFolder", "parameters": "()", "modifiers": "@Override public", "return": "VFSContainer", "signature": "VFSContainer getTempUploadFolder()", "full_signature": "@Override public VFSContainer getTempUploadFolder()", "class_method_signature": "ForumServiceImpl.getTempUploadFolder()", "testcase": false, "constructor": false}], "file": "olat7.8/src/main/java/org/olat/lms/forum/ForumServiceImpl.java"}, "focal_method": {"identifier": "splitThread", "parameters": "(Identity updater, final Message msg)", "modifiers": "@Override public", "return": "Message", "body": "@Override\n    public Message splitThread(Identity updater, final Message msg) {\n        Message newTopMessage = null;\n        if (msg.getThreadtop() == null) {\n            newTopMessage = msg;\n        } else {\n            // it only make sense to split a thread if the current message is not a threadtop message.\n            final List<Message> threadList = this.getThread(msg.getThreadtop().getKey());\n            final List<Message> subthreadList = new ArrayList<Message>();\n            subthreadList.add(msg);\n            getSubthread(msg, threadList, subthreadList);\n\n            final Iterator<Message> messageIterator = subthreadList.iterator();\n            Message firstMessage = null;\n\n            if (messageIterator.hasNext()) {\n                firstMessage = messageIterator.next();\n                firstMessage = forumDao.loadMessage(firstMessage);\n                firstMessage.setParent(null);\n                firstMessage.setThreadtop(null);\n                this.updateMessage(updater, firstMessage, false, new ForumChangedEvent(\"split\"), PublishEventTO.getNoPublishInstance());\n                newTopMessage = firstMessage;\n            }\n            while (firstMessage != null && messageIterator.hasNext()) {\n                Message message = messageIterator.next();\n                message = forumDao.loadMessage(message);\n                message.setThreadtop(firstMessage);\n                this.updateMessage(updater, message, false, null, PublishEventTO.getNoPublishInstance());\n            }\n        }\n        return newTopMessage;\n    }", "signature": "Message splitThread(Identity updater, final Message msg)", "full_signature": "@Override public Message splitThread(Identity updater, final Message msg)", "class_method_signature": "ForumServiceImpl.splitThread(Identity updater, final Message msg)", "testcase": false, "constructor": false, "invocations": ["getThreadtop", "getThread", "getKey", "getThreadtop", "add", "getSubthread", "iterator", "hasNext", "next", "loadMessage", "setParent", "setThreadtop", "updateMessage", "getNoPublishInstance", "hasNext", "next", "loadMessage", "setThreadtop", "updateMessage", "getNoPublishInstance"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}