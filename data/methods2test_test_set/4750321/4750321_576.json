{"test_class": {"identifier": "DefaultTemporalPrimitiveTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TemporalPrimitive temporalPrimitive1;", "modifier": "private", "type": "TemporalPrimitive", "declarator": "temporalPrimitive1", "var_name": "temporalPrimitive1"}, {"original_string": "private TemporalPrimitive temporalPrimitive2;", "modifier": "private", "type": "TemporalPrimitive", "declarator": "temporalPrimitive2", "var_name": "temporalPrimitive2"}, {"original_string": "private Position position1;", "modifier": "private", "type": "Position", "declarator": "position1", "var_name": "position1"}, {"original_string": "private Position position2;", "modifier": "private", "type": "Position", "declarator": "position2", "var_name": "position2"}, {"original_string": "private Calendar cal = Calendar.getInstance();", "modifier": "private", "type": "Calendar", "declarator": "cal = Calendar.getInstance()", "var_name": "cal"}], "file": "modules/library/main/src/test/java/org/geotools/temporal/object/DefaultTemporalPrimitiveTest.java"}, "test_case": {"identifier": "testRelativePosition", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRelativePosition() {\n        TemporalPrimitive other;\n\n        //relative position between Instant objects\n        cal.set(2000, 0, 1);\n        Position position = new DefaultPosition(cal.getTime());\n        other = new DefaultInstant(position);\n        RelativePosition result = temporalPrimitive1.relativePosition(other);\n        assertFalse(temporalPrimitive2.relativePosition(other).equals(result));\n\n        //relative position between Instant and Period\n        Instant instant1 = new DefaultInstant(new DefaultPosition(cal.getTime()));\n        Instant instant2 = (DefaultInstant) temporalPrimitive2;\n\n        other = new DefaultPeriod(instant1, instant2);\n        result = temporalPrimitive1.relativePosition(other);\n        assertFalse(temporalPrimitive2.relativePosition(other).equals(result));\n\n        //relative position between Period onbjects\n        temporalPrimitive1 = new DefaultPeriod(new DefaultInstant(position1), instant1);\n        cal.set(2020, 9, 1);\n        temporalPrimitive2 = new DefaultPeriod(instant2, new DefaultInstant(new DefaultPosition(cal.getTime())));\n        result = temporalPrimitive1.relativePosition(other);\n        assertFalse(temporalPrimitive2.relativePosition(other).equals(result));\n\n    }", "signature": "void testRelativePosition()", "full_signature": "@Test public void testRelativePosition()", "class_method_signature": "DefaultTemporalPrimitiveTest.testRelativePosition()", "testcase": true, "constructor": false, "invocations": ["set", "getTime", "relativePosition", "assertFalse", "equals", "relativePosition", "getTime", "relativePosition", "assertFalse", "equals", "relativePosition", "set", "getTime", "relativePosition", "assertFalse", "equals", "relativePosition"]}, "focal_class": {"identifier": "DefaultTemporalPrimitive", "superclass": "extends DefaultTemporalObject", "interfaces": "implements TemporalPrimitive, TemporalOrder, Comparable<TemporalPrimitive>", "fields": [], "methods": [{"identifier": "compareTo", "parameters": "(TemporalPrimitive that)", "modifiers": "public", "return": "int", "signature": "int compareTo(TemporalPrimitive that)", "full_signature": "public int compareTo(TemporalPrimitive that)", "class_method_signature": "DefaultTemporalPrimitive.compareTo(TemporalPrimitive that)", "testcase": false, "constructor": false}, {"identifier": "relativePosition", "parameters": "(TemporalPrimitive other)", "modifiers": "public", "return": "RelativePosition", "signature": "RelativePosition relativePosition(TemporalPrimitive other)", "full_signature": "public RelativePosition relativePosition(TemporalPrimitive other)", "class_method_signature": "DefaultTemporalPrimitive.relativePosition(TemporalPrimitive other)", "testcase": false, "constructor": false}], "file": "modules/library/main/src/main/java/org/geotools/temporal/object/DefaultTemporalPrimitive.java"}, "focal_method": {"identifier": "relativePosition", "parameters": "(TemporalPrimitive other)", "modifiers": "public", "return": "RelativePosition", "body": "public RelativePosition relativePosition(TemporalPrimitive other) {\n        if (this instanceof Instant && other instanceof Instant) {\n            Instant timeobject = (Instant) this;\n            Instant instantOther = (Instant) other;\n\n            if (timeobject.getPosition().getDate().before(instantOther.getPosition().getDate())) {\n                return RelativePosition.BEFORE;\n            } else {\n                return (timeobject.getPosition().getDate().compareTo(instantOther.getPosition().getDate()) == 0) ? RelativePosition.EQUALS : RelativePosition.AFTER;\n            }\n\n        } else {\n            if (this instanceof Period && other instanceof Instant) {\n                Period timeobject = (Period) this;\n                Instant instantarg = (Instant) other;\n\n                if (timeobject.getEnding().getPosition().getDate().before(instantarg.getPosition().getDate())) {\n                    return RelativePosition.BEFORE;\n                } else {\n                    if (timeobject.getEnding().getPosition().getDate().compareTo(instantarg.getPosition().getDate()) == 0) {\n                        return RelativePosition.ENDED_BY;\n                    } else {\n                        if (timeobject.getBeginning().getPosition().getDate().before(instantarg.getPosition().getDate()) &&\n                                timeobject.getEnding().getPosition().getDate().after(instantarg.getPosition().getDate())) {\n                            return RelativePosition.CONTAINS;\n                        } else {\n                            return (timeobject.getBeginning().getPosition().getDate().compareTo(instantarg.getPosition().getDate()) == 0) ? RelativePosition.BEGUN_BY : RelativePosition.AFTER;\n                        }\n                    }\n                }\n            } else {\n                if (this instanceof Instant && other instanceof Period) {\n                    Instant timeobject = (Instant) this;\n                    Period instantarg = (Period) other;\n\n                    if (instantarg.getEnding().getPosition().getDate().before(timeobject.getPosition().getDate())) {\n                        return RelativePosition.AFTER;\n                    } else {\n                        if (instantarg.getEnding().getPosition().getDate().compareTo(timeobject.getPosition().getDate()) == 0) {\n                            return RelativePosition.ENDS;\n                        } else {\n                            if (instantarg.getBeginning().getPosition().getDate().before(timeobject.getPosition().getDate()) &&\n                                    instantarg.getEnding().getPosition().getDate().after(timeobject.getPosition().getDate())) {\n                                return RelativePosition.DURING;\n                            } else {\n                                return (instantarg.getBeginning().getPosition().getDate().compareTo(timeobject.getPosition().getDate()) == 0) ? RelativePosition.BEGINS : RelativePosition.BEFORE;\n                            }\n                        }\n                    }\n                } else {\n                    if (this instanceof Period && other instanceof Period) {\n                        Period timeobject = (Period) this;\n                        Period instantarg = (Period) other;\n\n                        if (timeobject.getEnding().getPosition().getDate().before(instantarg.getBeginning().getPosition().getDate())) {\n                            return RelativePosition.BEFORE;\n                        } else {\n                            if (timeobject.getEnding().getPosition().getDate().compareTo(instantarg.getBeginning().getPosition().getDate()) == 0) {\n                                return RelativePosition.MEETS;\n                            } else {\n                                if (timeobject.getBeginning().getPosition().getDate().before(instantarg.getBeginning().getPosition().getDate()) &&\n                                        timeobject.getEnding().getPosition().getDate().after(instantarg.getBeginning().getPosition().getDate()) &&\n                                        timeobject.getEnding().getPosition().getDate().before(instantarg.getEnding().getPosition().getDate())) {\n                                    return RelativePosition.OVERLAPS;\n                                } else {\n                                    if (timeobject.getBeginning().getPosition().getDate().compareTo(instantarg.getBeginning().getPosition().getDate()) == 0 &&\n                                            timeobject.getEnding().getPosition().getDate().before(instantarg.getEnding().getPosition().getDate())) {\n                                        return RelativePosition.BEGINS;\n                                    } else {\n                                        if (timeobject.getBeginning().getPosition().getDate().compareTo(instantarg.getBeginning().getPosition().getDate()) == 0 &&\n                                                timeobject.getEnding().getPosition().getDate().after(instantarg.getEnding().getPosition().getDate())) {\n                                            return RelativePosition.BEGUN_BY;\n                                        } else {\n                                            if (timeobject.getBeginning().getPosition().getDate().after(instantarg.getBeginning().getPosition().getDate()) &&\n                                                    timeobject.getEnding().getPosition().getDate().before(instantarg.getEnding().getPosition().getDate())) {\n                                                return RelativePosition.DURING;\n                                            } else {\n                                                if (timeobject.getBeginning().getPosition().getDate().before(instantarg.getBeginning().getPosition().getDate()) &&\n                                                        timeobject.getEnding().getPosition().getDate().after(instantarg.getEnding().getPosition().getDate())) {\n                                                    return RelativePosition.CONTAINS;\n                                                } else {\n                                                    if (timeobject.getBeginning().getPosition().getDate().compareTo(instantarg.getBeginning().getPosition().getDate()) == 0 &&\n                                                            timeobject.getEnding().getPosition().getDate().compareTo(instantarg.getEnding().getPosition().getDate()) == 0) {\n                                                        return RelativePosition.EQUALS;\n                                                    } else {\n                                                        if (timeobject.getBeginning().getPosition().getDate().after(instantarg.getBeginning().getPosition().getDate()) &&\n                                                                timeobject.getBeginning().getPosition().getDate().before(instantarg.getEnding().getPosition().getDate()) &&\n                                                                timeobject.getEnding().getPosition().getDate().after(instantarg.getEnding().getPosition().getDate())) {\n                                                            return RelativePosition.OVERLAPPED_BY;\n                                                        } else {\n                                                            if (timeobject.getBeginning().getPosition().getDate().after(instantarg.getBeginning().getPosition().getDate()) &&\n                                                                    timeobject.getEnding().getPosition().getDate().compareTo(instantarg.getEnding().getPosition().getDate()) == 0) {\n                                                                return RelativePosition.ENDS;\n                                                            } else {\n                                                                if (timeobject.getBeginning().getPosition().getDate().before(instantarg.getBeginning().getPosition().getDate()) &&\n                                                                        timeobject.getEnding().getPosition().getDate().compareTo(instantarg.getEnding().getPosition().getDate()) == 0) {\n                                                                    return RelativePosition.ENDED_BY;\n                                                                } else {\n                                                                    return (timeobject.getBeginning().getPosition().getDate().compareTo(instantarg.getEnding().getPosition().getDate()) == 0) ? RelativePosition.MET_BY : RelativePosition.AFTER;\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        return null;\n                    }\n                }\n            }\n        }\n    }", "signature": "RelativePosition relativePosition(TemporalPrimitive other)", "full_signature": "public RelativePosition relativePosition(TemporalPrimitive other)", "class_method_signature": "DefaultTemporalPrimitive.relativePosition(TemporalPrimitive other)", "testcase": false, "constructor": false, "invocations": ["before", "getDate", "getPosition", "getDate", "getPosition", "compareTo", "getDate", "getPosition", "getDate", "getPosition", "before", "getDate", "getPosition", "getEnding", "getDate", "getPosition", "compareTo", "getDate", "getPosition", "getEnding", "getDate", "getPosition", "before", "getDate", "getPosition", "getBeginning", "getDate", "getPosition", "after", "getDate", "getPosition", "getEnding", "getDate", "getPosition", "compareTo", "getDate", "getPosition", "getBeginning", "getDate", "getPosition", "before", "getDate", "getPosition", "getEnding", "getDate", "getPosition", "compareTo", "getDate", "getPosition", "getEnding", "getDate", "getPosition", "before", "getDate", "getPosition", "getBeginning", "getDate", "getPosition", "after", "getDate", "getPosition", "getEnding", "getDate", "getPosition", "compareTo", "getDate", "getPosition", "getBeginning", "getDate", "getPosition", "before", "getDate", "getPosition", "getEnding", "getDate", "getPosition", "getBeginning", "compareTo", "getDate", "getPosition", "getEnding", "getDate", "getPosition", "getBeginning", "before", "getDate", "getPosition", "getBeginning", "getDate", "getPosition", "getBeginning", "after", "getDate", "getPosition", "getEnding", "getDate", "getPosition", "getBeginning", "before", "getDate", "getPosition", "getEnding", "getDate", "getPosition", "getEnding", "compareTo", "getDate", "getPosition", "getBeginning", "getDate", "getPosition", "getBeginning", "before", "getDate", "getPosition", "getEnding", "getDate", "getPosition", "getEnding", "compareTo", "getDate", "getPosition", "getBeginning", "getDate", "getPosition", "getBeginning", "after", "getDate", "getPosition", "getEnding", "getDate", "getPosition", "getEnding", "after", "getDate", "getPosition", "getBeginning", "getDate", "getPosition", "getBeginning", "before", "getDate", "getPosition", "getEnding", "getDate", "getPosition", "getEnding", "before", "getDate", "getPosition", "getBeginning", "getDate", "getPosition", "getBeginning", "after", "getDate", "getPosition", "getEnding", "getDate", "getPosition", "getEnding", "compareTo", "getDate", "getPosition", "getBeginning", "getDate", "getPosition", "getBeginning", "compareTo", "getDate", "getPosition", "getEnding", "getDate", "getPosition", "getEnding", "after", "getDate", "getPosition", "getBeginning", "getDate", "getPosition", "getBeginning", "before", "getDate", "getPosition", "getBeginning", "getDate", "getPosition", "getEnding", "after", "getDate", "getPosition", "getEnding", "getDate", "getPosition", "getEnding", "after", "getDate", "getPosition", "getBeginning", "getDate", "getPosition", "getBeginning", "compareTo", "getDate", "getPosition", "getEnding", "getDate", "getPosition", "getEnding", "before", "getDate", "getPosition", "getBeginning", "getDate", "getPosition", "getBeginning", "compareTo", "getDate", "getPosition", "getEnding", "getDate", "getPosition", "getEnding", "compareTo", "getDate", "getPosition", "getBeginning", "getDate", "getPosition", "getEnding"]}, "repository": {"repo_id": 4750321, "url": "https://github.com/HGitMaster/geotools-osgi", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 114107, "license": "licensed"}}