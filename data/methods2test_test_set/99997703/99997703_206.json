{"test_class": {"identifier": "BinarySearchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ImmutableList<Pair<Integer, Integer>> ranges = IntStream.range(0, 1000)\n            .mapToObj(i -> Pair.of(i, i + 1))\n            .collect(ImmutableList.toImmutableList());", "modifier": "private static final", "type": "ImmutableList<Pair<Integer, Integer>>", "declarator": "ranges = IntStream.range(0, 1000)\n            .mapToObj(i -> Pair.of(i, i + 1))\n            .collect(ImmutableList.toImmutableList())", "var_name": "ranges"}, {"original_string": "private int counter = 0;", "modifier": "private", "type": "int", "declarator": "counter = 0", "var_name": "counter"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/physics/utils/BinarySearchTest.java"}, "test_case": {"identifier": "find_whenLowerBoundIsGreaterThanUpperBound_thenThrowsException", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void find_whenLowerBoundIsGreaterThanUpperBound_thenThrowsException() {\n        assertThatThrownBy(() -> BinarySearch.find(BinarySearchTest::getRangeForValue, r -> 0, 10, 5))\n                .isInstanceOf(IllegalArgumentException.class);\n    }", "signature": "void find_whenLowerBoundIsGreaterThanUpperBound_thenThrowsException()", "full_signature": "@Test void find_whenLowerBoundIsGreaterThanUpperBound_thenThrowsException()", "class_method_signature": "BinarySearchTest.find_whenLowerBoundIsGreaterThanUpperBound_thenThrowsException()", "testcase": true, "constructor": false, "invocations": ["isInstanceOf", "assertThatThrownBy", "find"]}, "focal_class": {"identifier": "BinarySearch", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "BinarySearch", "parameters": "()", "modifiers": "private", "return": "", "signature": " BinarySearch()", "full_signature": "private  BinarySearch()", "class_method_signature": "BinarySearch.BinarySearch()", "testcase": false, "constructor": true}, {"identifier": "find", "parameters": "(DoubleFunction<T> pointAtValue, ToDoubleFunction<T> comparator, double lowerBound, double upperBound)", "modifiers": "public static", "return": "T", "signature": "T find(DoubleFunction<T> pointAtValue, ToDoubleFunction<T> comparator, double lowerBound, double upperBound)", "full_signature": "public static T find(DoubleFunction<T> pointAtValue, ToDoubleFunction<T> comparator, double lowerBound, double upperBound)", "class_method_signature": "BinarySearch.find(DoubleFunction<T> pointAtValue, ToDoubleFunction<T> comparator, double lowerBound, double upperBound)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/physics/utils/BinarySearch.java"}, "focal_method": {"identifier": "find", "parameters": "(DoubleFunction<T> pointAtValue, ToDoubleFunction<T> comparator, double lowerBound, double upperBound)", "modifiers": "public static", "return": "T", "body": "public static <T> T find(DoubleFunction<T> pointAtValue, ToDoubleFunction<T> comparator, double lowerBound, double upperBound) {\n        Preconditions.checkArgument(lowerBound <= upperBound, \"lower bound \" + lowerBound + \" must not be greater than upper bound \" + upperBound);\n        \n        T lowerBoundPoint = pointAtValue.apply(lowerBound);\n        double lowerBoundComp = comparator.applyAsDouble(lowerBoundPoint);\n        if (lowerBoundComp == 0) {\n            return lowerBoundPoint;\n        }\n        Preconditions.checkArgument(lowerBoundComp < 0, \"Invalid search parameter\");\n\n        T upperBoundPoint = pointAtValue.apply(upperBound);\n        double upperBoundComp = comparator.applyAsDouble(upperBoundPoint);\n        if (upperBoundComp == 0) {\n            return upperBoundPoint;\n        }\n        Preconditions.checkArgument(upperBoundComp > 0, \"Invalid search parameter\");\n\n        while (true) {\n            double mid = (lowerBound + upperBound) / 2.0;\n            T newPoint = pointAtValue.apply(mid);\n            double comp = comparator.applyAsDouble(newPoint);\n            Preconditions.checkState(mid > lowerBound && mid < upperBound);\n\n            if (comp == 0) {\n                return newPoint;\n            } else if (comp < 0) {\n                lowerBound = mid;\n            } else {\n                upperBound = mid;\n            }\n        }\n    }", "signature": "T find(DoubleFunction<T> pointAtValue, ToDoubleFunction<T> comparator, double lowerBound, double upperBound)", "full_signature": "public static T find(DoubleFunction<T> pointAtValue, ToDoubleFunction<T> comparator, double lowerBound, double upperBound)", "class_method_signature": "BinarySearch.find(DoubleFunction<T> pointAtValue, ToDoubleFunction<T> comparator, double lowerBound, double upperBound)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "apply", "applyAsDouble", "checkArgument", "apply", "applyAsDouble", "checkArgument", "apply", "applyAsDouble", "checkState"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}