{"test_class": {"identifier": "BasePropertySourceTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/core/src/test/java/org/apache/tamaya/core/propertysource/BasePropertySourceTest.java"}, "test_case": {"identifier": "testGetOrdinal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetOrdinal() {\n\n        PropertySource defaultPropertySource = new BasePropertySource(56) {\n\n            @Override\n            public String getName() {\n                return \"testWithDefault\";\n            }\n\n            @Override\n            public PropertyValue get(String key) {\n                return null;\n            }\n\n            @Override\n            public Map<String, PropertyValue> getProperties() {\n                return Collections.emptyMap();\n            }\n        };\n\n        assertThat(PropertySourceComparator.getOrdinal(defaultPropertySource)).isEqualTo(56);\n        assertThat(new OverriddenOrdinalPropertySource().getOrdinal()).isEqualTo(1000);\n\n        // propertySource with invalid ordinal\n        assertThat(new OverriddenInvalidOrdinalPropertySource().getOrdinal()).isEqualTo(1);\n    }", "signature": "void testGetOrdinal()", "full_signature": "@Test public void testGetOrdinal()", "class_method_signature": "BasePropertySourceTest.testGetOrdinal()", "testcase": true, "constructor": false, "invocations": ["emptyMap", "isEqualTo", "assertThat", "getOrdinal", "isEqualTo", "assertThat", "getOrdinal", "isEqualTo", "assertThat", "getOrdinal"]}, "focal_class": {"identifier": "BasePropertySource", "superclass": "", "interfaces": "implements PropertySource", "fields": [{"original_string": "private int defaultOrdinal;", "modifier": "private", "type": "int", "declarator": "defaultOrdinal", "var_name": "defaultOrdinal"}, {"original_string": "private Integer ordinal;", "modifier": "private", "type": "Integer", "declarator": "ordinal", "var_name": "ordinal"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}], "methods": [{"identifier": "BasePropertySource", "parameters": "(String name)", "modifiers": "protected", "return": "", "signature": " BasePropertySource(String name)", "full_signature": "protected  BasePropertySource(String name)", "class_method_signature": "BasePropertySource.BasePropertySource(String name)", "testcase": false, "constructor": true}, {"identifier": "BasePropertySource", "parameters": "(int defaultOrdinal)", "modifiers": "protected", "return": "", "signature": " BasePropertySource(int defaultOrdinal)", "full_signature": "protected  BasePropertySource(int defaultOrdinal)", "class_method_signature": "BasePropertySource.BasePropertySource(int defaultOrdinal)", "testcase": false, "constructor": true}, {"identifier": "BasePropertySource", "parameters": "(String name, int defaultOrdinal)", "modifiers": "protected", "return": "", "signature": " BasePropertySource(String name, int defaultOrdinal)", "full_signature": "protected  BasePropertySource(String name, int defaultOrdinal)", "class_method_signature": "BasePropertySource.BasePropertySource(String name, int defaultOrdinal)", "testcase": false, "constructor": true}, {"identifier": "BasePropertySource", "parameters": "()", "modifiers": "protected", "return": "", "signature": " BasePropertySource()", "full_signature": "protected  BasePropertySource()", "class_method_signature": "BasePropertySource.BasePropertySource()", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "BasePropertySource.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setName(String name)", "full_signature": "public void setName(String name)", "class_method_signature": "BasePropertySource.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "setOrdinal", "parameters": "(Integer ordinal)", "modifiers": "public", "return": "void", "signature": "void setOrdinal(Integer ordinal)", "full_signature": "public void setOrdinal(Integer ordinal)", "class_method_signature": "BasePropertySource.setOrdinal(Integer ordinal)", "testcase": false, "constructor": false}, {"identifier": "setDefaultOrdinal", "parameters": "(Integer defaultOrdinal)", "modifiers": "public", "return": "void", "signature": "void setDefaultOrdinal(Integer defaultOrdinal)", "full_signature": "public void setDefaultOrdinal(Integer defaultOrdinal)", "class_method_signature": "BasePropertySource.setDefaultOrdinal(Integer defaultOrdinal)", "testcase": false, "constructor": false}, {"identifier": "getOrdinal", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getOrdinal()", "full_signature": "public int getOrdinal()", "class_method_signature": "BasePropertySource.getOrdinal()", "testcase": false, "constructor": false}, {"identifier": "getDefaultOrdinal", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getDefaultOrdinal()", "full_signature": "public int getDefaultOrdinal()", "class_method_signature": "BasePropertySource.getDefaultOrdinal()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String key)", "modifiers": "@Override public", "return": "PropertyValue", "signature": "PropertyValue get(String key)", "full_signature": "@Override public PropertyValue get(String key)", "class_method_signature": "BasePropertySource.get(String key)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "BasePropertySource.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "BasePropertySource.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BasePropertySource.toString()", "testcase": false, "constructor": false}, {"identifier": "toStringValues", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String toStringValues()", "full_signature": "protected String toStringValues()", "class_method_signature": "BasePropertySource.toStringValues()", "testcase": false, "constructor": false}], "file": "code/core/src/main/java/org/apache/tamaya/core/propertysource/BasePropertySource.java"}, "focal_method": {"identifier": "getOrdinal", "parameters": "()", "modifiers": "public", "return": "int", "body": "public int getOrdinal() {\n        Integer ordinal = this.ordinal;\n        if(ordinal!=null){\n            Logger.getLogger(getClass().getName()).finest(\n                    \"Using explicit ordinal '\"+ordinal+\"' for property source: \" + getName());\n            return ordinal;\n        }\n        PropertyValue configuredOrdinal = get(TAMAYA_ORDINAL);\n        if(configuredOrdinal!=null){\n            try {\n                return Integer.parseInt(configuredOrdinal.getValue());\n            } catch (Exception e) {\n                Logger.getLogger(getClass().getName()).log(Level.WARNING,\n                        \"Configured ordinal is not an int number: \" + configuredOrdinal, e);\n            }\n        }\n        return getDefaultOrdinal();\n    }", "signature": "int getOrdinal()", "full_signature": "public int getOrdinal()", "class_method_signature": "BasePropertySource.getOrdinal()", "testcase": false, "constructor": false, "invocations": ["finest", "getLogger", "getName", "getClass", "getName", "get", "parseInt", "getValue", "log", "getLogger", "getName", "getClass", "getDefaultOrdinal"]}, "repository": {"repo_id": 26951044, "url": "https://github.com/apache/incubator-tamaya", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 44, "size": 7630, "license": "licensed"}}