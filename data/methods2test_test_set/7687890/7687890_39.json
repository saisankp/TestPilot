{"test_class": {"identifier": "RevocationHelperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static ObjectFactory of = new ObjectFactory();", "modifier": "static", "type": "ObjectFactory", "declarator": "of = new ObjectFactory()", "var_name": "of"}, {"original_string": "public static final URI patrasRevocationAuthority = URI\n      .create(\"urn:patras:revocationauthority:default\");", "modifier": "public static final", "type": "URI", "declarator": "patrasRevocationAuthority = URI\n      .create(\"urn:patras:revocationauthority:default\")", "var_name": "patrasRevocationAuthority"}, {"original_string": "public static final String UNIVERSITY_IDEMIX = \"UNIVERSITY_IDEMIX\";", "modifier": "public static final", "type": "String", "declarator": "UNIVERSITY_IDEMIX = \"UNIVERSITY_IDEMIX\"", "var_name": "UNIVERSITY_IDEMIX"}, {"original_string": "public static final SpecAndPolicy universityIdemix = new SpecAndPolicy(UNIVERSITY_IDEMIX,\n      CryptoTechnology.IDEMIX, null, 42, 0,\n      \"/eu/abc4trust/sampleXml/patras/credentialSpecificationPatrasUniversityWithRevocation.xml\",\n      \"/eu/abc4trust/sampleXml/patras/issuancePolicyPatrasUniversity.xml\",\n      patrasRevocationAuthority.toString());", "modifier": "public static final", "type": "SpecAndPolicy", "declarator": "universityIdemix = new SpecAndPolicy(UNIVERSITY_IDEMIX,\n      CryptoTechnology.IDEMIX, null, 42, 0,\n      \"/eu/abc4trust/sampleXml/patras/credentialSpecificationPatrasUniversityWithRevocation.xml\",\n      \"/eu/abc4trust/sampleXml/patras/issuancePolicyPatrasUniversity.xml\",\n      patrasRevocationAuthority.toString())", "var_name": "universityIdemix"}], "file": "Code/core-abce/service-helper/src/test/java/eu/abc4trust/ri/servicehelper/revocation/RevocationHelperTest.java"}, "test_case": {"identifier": "testRevocationHelper", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRevocationHelper() throws Exception {\n    String fileStoragePrefix = null;\n    if (new File(\"target\").exists()) {\n      fileStoragePrefix = \"target/revocation-test/\";\n    } else {\n      fileStoragePrefix = \"service-helper/target/revocation-test/\";\n    }\n\n    //\n    IssuanceHelper.initInstance(1024, fileStoragePrefix, fileStoragePrefix,\n        new SpecAndPolicy[] {universityIdemix}, new ArrayList<RevocationAuthorityParameters>());\n\n    //\n    URI revocationInfoReference =\n        URI.create(\"http://localhost:9094/integration-test-revocation/revocation/getrevocationinformation\");\n    URI nonRevocationEvidenceReference =\n        URI.create(\"http://localhost:9094/integration-test-revocation/revocation/generatenonrevocationevidence\");\n    URI nonRevocationUpdateReference =\n        URI.create(\"http://localhost:9094/integration-test-revocation/revocation/generatenonrevocationevidenceupdate\");;\n    RevocationReferences revocationReferences =\n        new RevocationReferences(patrasRevocationAuthority, revocationInfoReference,\n            nonRevocationEvidenceReference, nonRevocationUpdateReference);\n\n\n    String systemParametersResource = fileStoragePrefix + RevocationHelper.SYSTEM_PARAMS_XML_NAME;\n    SystemParameters systemParameters = FileSystem.loadXmlFromResource(systemParametersResource);\n    List<IssuerParameters> issuerParamsList =\n        FileSystem.findAndLoadXmlResourcesInDir(fileStoragePrefix, \"issuer_params\");\n    String[] credSpecResourceList =\n        {\"/eu/abc4trust/sampleXml/patras/credentialSpecificationPatrasUniversityWithRevocation.xml\"};\n    List<CredentialSpecification> credSpecList =\n        FileSystem.loadXmlListFromResources(credSpecResourceList);\n\n    System.out.println(\"=============================================\");\n\n    RevocationHelper.initInstance(fileStoragePrefix, fileStoragePrefix, systemParameters,\n        issuerParamsList, credSpecList, revocationReferences);\n\n    String[] revocationAuthorityParameters_resources =\n        FileSystem.findFilesInDir(fileStoragePrefix, \"revocation_authority\");\n\n    System.out.println(\"revocationAuthorityParameters_resources : \"\n        + revocationAuthorityParameters_resources);\n    System.out.println(\"revocationAuthorityParameters_resources : \"\n        + revocationAuthorityParameters_resources[0]);\n\n    RevocationAuthorityParameters revocationAuthorityParameters =\n        (RevocationAuthorityParameters) FileSystem\n            .loadXmlFromResource(revocationAuthorityParameters_resources[0]);\n    // Assert.assertNotNull(\"Version should be specified\",\n    // revocationAuthorityParameters.getVersion());\n    // Assert.assertNotSame(\"Version cannot be empty\", revocationAuthorityParameters.getVersion(),\n    // \"\");\n    Assert.assertNotNull(\"RevocationInfoReference - should have been assigned\",\n        revocationAuthorityParameters.getRevocationInfoReference());\n    Assert.assertNotNull(\"NonRevocationEvidenceReference - should have been  assigned\",\n        revocationAuthorityParameters.getNonRevocationEvidenceReference());\n    Assert.assertNotNull(\"RevocationEvidenceUpdateReference - should have been  assigned\",\n        revocationAuthorityParameters.getNonRevocationEvidenceUpdateReference());\n    System.out.println(\"revocationAuthorityParameters_resources : \"\n        + XmlUtils.toXml(of.createRevocationAuthorityParameters(revocationAuthorityParameters),\n            false));\n    System.out.println(\"revocationAuthorityParameters_resources : \"\n        + XmlUtils.toXml(of.createRevocationAuthorityParameters(revocationAuthorityParameters),\n            true));\n  }", "signature": "void testRevocationHelper()", "full_signature": "@Test public void testRevocationHelper()", "class_method_signature": "RevocationHelperTest.testRevocationHelper()", "testcase": true, "constructor": false, "invocations": ["exists", "initInstance", "create", "create", "create", "loadXmlFromResource", "findAndLoadXmlResourcesInDir", "loadXmlListFromResources", "println", "initInstance", "findFilesInDir", "println", "println", "loadXmlFromResource", "assertNotNull", "getRevocationInfoReference", "assertNotNull", "getNonRevocationEvidenceReference", "assertNotNull", "getNonRevocationEvidenceUpdateReference", "println", "toXml", "createRevocationAuthorityParameters", "println", "toXml", "createRevocationAuthorityParameters"]}, "focal_class": {"identifier": "RevocationHelper", "superclass": "extends AbstractHelper", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(RevocationHelper.class.toString());", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(RevocationHelper.class.toString())", "var_name": "log"}, {"original_string": "private static RevocationHelper instance;", "modifier": "private static", "type": "RevocationHelper", "declarator": "instance", "var_name": "instance"}, {"original_string": "public RevocationAbcEngine engine;", "modifier": "public", "type": "RevocationAbcEngine", "declarator": "engine", "var_name": "engine"}, {"original_string": "public RevocationProxyAuthority revocationProxyAuthority;", "modifier": "public", "type": "RevocationProxyAuthority", "declarator": "revocationProxyAuthority", "var_name": "revocationProxyAuthority"}], "methods": [{"identifier": "isInit", "parameters": "()", "modifiers": "public static synchronized", "return": "boolean", "signature": "boolean isInit()", "full_signature": "public static synchronized boolean isInit()", "class_method_signature": "RevocationHelper.isInit()", "testcase": false, "constructor": false}, {"identifier": "resetInstance", "parameters": "()", "modifiers": "public static synchronized", "return": "void", "signature": "void resetInstance()", "full_signature": "public static synchronized void resetInstance()", "class_method_signature": "RevocationHelper.resetInstance()", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static synchronized", "return": "RevocationHelper", "signature": "RevocationHelper getInstance()", "full_signature": "public static synchronized RevocationHelper getInstance()", "class_method_signature": "RevocationHelper.getInstance()", "testcase": false, "constructor": false}, {"identifier": "initInstance", "parameters": "(String revocationStoragePrefix,\n      String revocationResourcesPrefix, SystemParameters systemParameters,\n      RevocationReferences... revocationReferences)", "modifiers": "public static synchronized", "return": "RevocationHelper", "signature": "RevocationHelper initInstance(String revocationStoragePrefix,\n      String revocationResourcesPrefix, SystemParameters systemParameters,\n      RevocationReferences... revocationReferences)", "full_signature": "public static synchronized RevocationHelper initInstance(String revocationStoragePrefix,\n      String revocationResourcesPrefix, SystemParameters systemParameters,\n      RevocationReferences... revocationReferences)", "class_method_signature": "RevocationHelper.initInstance(String revocationStoragePrefix,\n      String revocationResourcesPrefix, SystemParameters systemParameters,\n      RevocationReferences... revocationReferences)", "testcase": false, "constructor": false}, {"identifier": "initInstance", "parameters": "(String revocationStoragePrefix,\n      String revocationResourcesPrefix, SystemParameters systemParameters,\n      List<IssuerParameters> issuerParamsList, List<CredentialSpecification> credSpecList,\n      RevocationReferences... revocationReferences)", "modifiers": "public static synchronized", "return": "RevocationHelper", "signature": "RevocationHelper initInstance(String revocationStoragePrefix,\n      String revocationResourcesPrefix, SystemParameters systemParameters,\n      List<IssuerParameters> issuerParamsList, List<CredentialSpecification> credSpecList,\n      RevocationReferences... revocationReferences)", "full_signature": "public static synchronized RevocationHelper initInstance(String revocationStoragePrefix,\n      String revocationResourcesPrefix, SystemParameters systemParameters,\n      List<IssuerParameters> issuerParamsList, List<CredentialSpecification> credSpecList,\n      RevocationReferences... revocationReferences)", "class_method_signature": "RevocationHelper.initInstance(String revocationStoragePrefix,\n      String revocationResourcesPrefix, SystemParameters systemParameters,\n      List<IssuerParameters> issuerParamsList, List<CredentialSpecification> credSpecList,\n      RevocationReferences... revocationReferences)", "testcase": false, "constructor": false}, {"identifier": "XXXinitInstancXe", "parameters": "(String revocationStoragePrefix,\n      String[] issuerParamsResourceList, String[] credSpecResourceList,\n      String systemParametersResource, String[] revocationAuthorityResourceList)", "modifiers": "public static synchronized", "return": "RevocationHelper", "signature": "RevocationHelper XXXinitInstancXe(String revocationStoragePrefix,\n      String[] issuerParamsResourceList, String[] credSpecResourceList,\n      String systemParametersResource, String[] revocationAuthorityResourceList)", "full_signature": "public static synchronized RevocationHelper XXXinitInstancXe(String revocationStoragePrefix,\n      String[] issuerParamsResourceList, String[] credSpecResourceList,\n      String systemParametersResource, String[] revocationAuthorityResourceList)", "class_method_signature": "RevocationHelper.XXXinitInstancXe(String revocationStoragePrefix,\n      String[] issuerParamsResourceList, String[] credSpecResourceList,\n      String systemParametersResource, String[] revocationAuthorityResourceList)", "testcase": false, "constructor": false}, {"identifier": "RevocationHelper", "parameters": "(String revocationStoragePrefix, String revocationResourcesPrefix)", "modifiers": "private", "return": "", "signature": " RevocationHelper(String revocationStoragePrefix, String revocationResourcesPrefix)", "full_signature": "private  RevocationHelper(String revocationStoragePrefix, String revocationResourcesPrefix)", "class_method_signature": "RevocationHelper.RevocationHelper(String revocationStoragePrefix, String revocationResourcesPrefix)", "testcase": false, "constructor": true}, {"identifier": "setupParameters", "parameters": "(\n      URI revocationTechnology, int keyLength, URI uid, Reference revocationInfoReference,\n      Reference nonRevocationEvidenceReference, Reference nonRevocationUpdateReference,\n      String revocationResourcesPrefix)", "modifiers": "public static synchronized", "return": "RevocationAuthorityParameters", "signature": "RevocationAuthorityParameters setupParameters(\n      URI revocationTechnology, int keyLength, URI uid, Reference revocationInfoReference,\n      Reference nonRevocationEvidenceReference, Reference nonRevocationUpdateReference,\n      String revocationResourcesPrefix)", "full_signature": "public static synchronized RevocationAuthorityParameters setupParameters(\n      URI revocationTechnology, int keyLength, URI uid, Reference revocationInfoReference,\n      Reference nonRevocationEvidenceReference, Reference nonRevocationUpdateReference,\n      String revocationResourcesPrefix)", "class_method_signature": "RevocationHelper.setupParameters(\n      URI revocationTechnology, int keyLength, URI uid, Reference revocationInfoReference,\n      Reference nonRevocationEvidenceReference, Reference nonRevocationUpdateReference,\n      String revocationResourcesPrefix)", "testcase": false, "constructor": false}, {"identifier": "setupRevocationReferences", "parameters": "(RevocationReferences[] revocationReferences,\n      String revocationResourcesPrefix)", "modifiers": "private", "return": "void", "signature": "void setupRevocationReferences(RevocationReferences[] revocationReferences,\n      String revocationResourcesPrefix)", "full_signature": "private void setupRevocationReferences(RevocationReferences[] revocationReferences,\n      String revocationResourcesPrefix)", "class_method_signature": "RevocationHelper.setupRevocationReferences(RevocationReferences[] revocationReferences,\n      String revocationResourcesPrefix)", "testcase": false, "constructor": false}], "file": "Code/core-abce/service-helper/src/main/java/eu/abc4trust/ri/servicehelper/revocation/RevocationHelper.java"}, "focal_method": {"identifier": "RevocationHelper", "parameters": "(String revocationStoragePrefix, String revocationResourcesPrefix)", "modifiers": "private", "return": "", "body": "private RevocationHelper(String revocationStoragePrefix, String revocationResourcesPrefix)\n      throws URISyntaxException {\n    log.info(\"RevocationHelper : create instance - storage prefix : \" + revocationStoragePrefix\n        + \" - resouces prefix : \" + revocationResourcesPrefix);\n    try {\n      // this.cryptoEngine = cryptoEngine;\n\n      AbceConfigurationImpl configuration =\n          this.setupStorageFilesForConfiguration(revocationStoragePrefix, CryptoEngine.IDEMIX);\n\n\n      Injector injector =\n          Guice.createInjector(ProductionModuleFactory\n              .newModule(configuration, CryptoEngine.IDEMIX));\n\n      this.engine = injector.getInstance(RevocationAbcEngine.class);\n\n      this.revocationProxyAuthority = injector.getInstance(RevocationProxyAuthority.class);\n\n      this.keyManager = injector.getInstance(KeyManager.class);\n      // this.credentialManager = injector.getInstance(CredentialManager.class);\n      log.fine(\"keymanager : \" + this.keyManager);\n    } catch (Exception e) {\n      log.log(Level.SEVERE, \"Init Failed\", e);\n      throw new IllegalStateException(\"Could not setup issuer !\", e);\n    }\n  }", "signature": " RevocationHelper(String revocationStoragePrefix, String revocationResourcesPrefix)", "full_signature": "private  RevocationHelper(String revocationStoragePrefix, String revocationResourcesPrefix)", "class_method_signature": "RevocationHelper.RevocationHelper(String revocationStoragePrefix, String revocationResourcesPrefix)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 7687890, "url": "https://github.com/p2abcengine/p2abcengine", "language": "Java", "is_fork": false, "fork_count": 25, "stargazer_count": 71, "size": 11790, "license": "licensed"}}