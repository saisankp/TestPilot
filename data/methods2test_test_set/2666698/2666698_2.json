{"test_class": {"identifier": "JdkLibraryInfoProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "tycho-compiler-jdt/src/test/java/org/eclipse/tycho/compiler/jdt/JdkLibraryInfoProviderTest.java"}, "test_case": {"identifier": "testGetLibraryInfoForFakeJDKWithoutJavaExecutable", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetLibraryInfoForFakeJDKWithoutJavaExecutable() throws Exception {\n        JdkLibraryInfoProviderStub libInfoProvider = new JdkLibraryInfoProviderStub(\n                new File(\"../tycho-lib-detector/target/classes/\"), new SilentLog());\n        LibraryInfo libInfo = libInfoProvider\n                .getLibraryInfo(new File(\"src/test/resources/testJavaHome\").getAbsolutePath());\n        assertEquals(\"unknown\", libInfo.getVersion());\n        String[] bootpath = libInfo.getBootpath();\n        assertEquals(2, bootpath.length);\n        assertTrue(bootpath[0].endsWith(\"lib\" + File.separator + \"some.jar\"));\n        assertTrue(bootpath[1].endsWith(\"lib\" + File.separator + \"ext\" + File.separator + \"another.jar\"));\n        assertArrayEquals(new String[0], libInfo.getEndorsedDirs());\n        assertArrayEquals(new String[0], libInfo.getExtensionDirs());\n    }", "signature": "void testGetLibraryInfoForFakeJDKWithoutJavaExecutable()", "full_signature": "@Test public void testGetLibraryInfoForFakeJDKWithoutJavaExecutable()", "class_method_signature": "JdkLibraryInfoProviderTest.testGetLibraryInfoForFakeJDKWithoutJavaExecutable()", "testcase": true, "constructor": false, "invocations": ["getLibraryInfo", "getAbsolutePath", "assertEquals", "getVersion", "getBootpath", "assertEquals", "assertTrue", "endsWith", "assertTrue", "endsWith", "assertArrayEquals", "getEndorsedDirs", "assertArrayEquals", "getExtensionDirs"]}, "focal_class": {"identifier": "JdkLibraryInfoProvider", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Requirement\n    private RepositorySystem repositorySystem;", "modifier": "@Requirement\n    private", "type": "RepositorySystem", "declarator": "repositorySystem", "var_name": "repositorySystem"}, {"original_string": "@Requirement\n    private LegacySupport legacySupport;", "modifier": "@Requirement\n    private", "type": "LegacySupport", "declarator": "legacySupport", "var_name": "legacySupport"}, {"original_string": "@Requirement\n    private Logger log;", "modifier": "@Requirement\n    private", "type": "Logger", "declarator": "log", "var_name": "log"}, {"original_string": "private Map<String, LibraryInfo> libraryInfoCache = new HashMap<>();", "modifier": "private", "type": "Map<String, LibraryInfo>", "declarator": "libraryInfoCache = new HashMap<>()", "var_name": "libraryInfoCache"}, {"original_string": "private File libDetectorJar;", "modifier": "private", "type": "File", "declarator": "libDetectorJar", "var_name": "libDetectorJar"}, {"original_string": "private Boolean isRunningOnJava9orLater;", "modifier": "private", "type": "Boolean", "declarator": "isRunningOnJava9orLater", "var_name": "isRunningOnJava9orLater"}], "methods": [{"identifier": "getLibraryInfo", "parameters": "(String javaHome)", "modifiers": "public", "return": "LibraryInfo", "signature": "LibraryInfo getLibraryInfo(String javaHome)", "full_signature": "public LibraryInfo getLibraryInfo(String javaHome)", "class_method_signature": "JdkLibraryInfoProvider.getLibraryInfo(String javaHome)", "testcase": false, "constructor": false}, {"identifier": "generateLibraryInfo", "parameters": "(String javaHome)", "modifiers": "private", "return": "LibraryInfo", "signature": "LibraryInfo generateLibraryInfo(String javaHome)", "full_signature": "private LibraryInfo generateLibraryInfo(String javaHome)", "class_method_signature": "JdkLibraryInfoProvider.generateLibraryInfo(String javaHome)", "testcase": false, "constructor": false}, {"identifier": "scanLibFolders", "parameters": "(String javaHome)", "modifiers": "private static", "return": "String[]", "signature": "String[] scanLibFolders(String javaHome)", "full_signature": "private static String[] scanLibFolders(String javaHome)", "class_method_signature": "JdkLibraryInfoProvider.scanLibFolders(String javaHome)", "testcase": false, "constructor": false}, {"identifier": "addJarsToList", "parameters": "(File[] jars, List<String> fileList)", "modifiers": "private static", "return": "void", "signature": "void addJarsToList(File[] jars, List<String> fileList)", "full_signature": "private static void addJarsToList(File[] jars, List<String> fileList)", "class_method_signature": "JdkLibraryInfoProvider.addJarsToList(File[] jars, List<String> fileList)", "testcase": false, "constructor": false}, {"identifier": "scanForJars", "parameters": "(File libDir)", "modifiers": "private static", "return": "File[]", "signature": "File[] scanForJars(File libDir)", "full_signature": "private static File[] scanForJars(File libDir)", "class_method_signature": "JdkLibraryInfoProvider.scanForJars(File libDir)", "testcase": false, "constructor": false}, {"identifier": "parseLibraryInfo", "parameters": "(String output, String javaHome)", "modifiers": "private", "return": "LibraryInfo", "signature": "LibraryInfo parseLibraryInfo(String output, String javaHome)", "full_signature": "private LibraryInfo parseLibraryInfo(String output, String javaHome)", "class_method_signature": "JdkLibraryInfoProvider.parseLibraryInfo(String output, String javaHome)", "testcase": false, "constructor": false}, {"identifier": "isRunningOnJava9orLater", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isRunningOnJava9orLater()", "full_signature": "private boolean isRunningOnJava9orLater()", "class_method_signature": "JdkLibraryInfoProvider.isRunningOnJava9orLater()", "testcase": false, "constructor": false}, {"identifier": "splitPath", "parameters": "(String path)", "modifiers": "private static", "return": "String[]", "signature": "String[] splitPath(String path)", "full_signature": "private static String[] splitPath(String path)", "class_method_signature": "JdkLibraryInfoProvider.splitPath(String path)", "testcase": false, "constructor": false}, {"identifier": "getLog", "parameters": "()", "modifiers": "protected", "return": "Logger", "signature": "Logger getLog()", "full_signature": "protected Logger getLog()", "class_method_signature": "JdkLibraryInfoProvider.getLog()", "testcase": false, "constructor": false}, {"identifier": "getLibDetectorJar", "parameters": "()", "modifiers": "protected", "return": "File", "signature": "File getLibDetectorJar()", "full_signature": "protected File getLibDetectorJar()", "class_method_signature": "JdkLibraryInfoProvider.getLibDetectorJar()", "testcase": false, "constructor": false}], "file": "tycho-compiler-jdt/src/main/java/org/eclipse/tycho/compiler/jdt/JdkLibraryInfoProvider.java"}, "focal_method": {"identifier": "getLibraryInfo", "parameters": "(String javaHome)", "modifiers": "public", "return": "LibraryInfo", "body": "public LibraryInfo getLibraryInfo(String javaHome) {\n        LibraryInfo libInfo = libraryInfoCache.get(javaHome);\n        if (libInfo == null) {\n            libInfo = generateLibraryInfo(javaHome);\n            libraryInfoCache.put(javaHome, libInfo);\n        }\n        return libInfo;\n    }", "signature": "LibraryInfo getLibraryInfo(String javaHome)", "full_signature": "public LibraryInfo getLibraryInfo(String javaHome)", "class_method_signature": "JdkLibraryInfoProvider.getLibraryInfo(String javaHome)", "testcase": false, "constructor": false, "invocations": ["get", "generateLibraryInfo", "put"]}, "repository": {"repo_id": 2666698, "url": "https://github.com/eclipse/tycho", "language": "Java", "is_fork": false, "fork_count": 67, "stargazer_count": 61, "size": 22429, "license": "licensed"}}