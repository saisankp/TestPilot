{"test_class": {"identifier": "TestCollectorController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File tmpDir = new File(System.getProperty(\"java.io.tmpdir\"), \"collector\");", "modifier": "private final", "type": "File", "declarator": "tmpDir = new File(System.getProperty(\"java.io.tmpdir\"), \"collector\")", "var_name": "tmpDir"}, {"original_string": "private Event event;", "modifier": "private", "type": "Event", "declarator": "event", "var_name": "event"}, {"original_string": "@Inject\n    private CollectorController controller;", "modifier": "@Inject\n    private", "type": "CollectorController", "declarator": "controller", "var_name": "controller"}, {"original_string": "@Inject\n    private DiskSpoolEventWriter diskWriter;", "modifier": "@Inject\n    private", "type": "DiskSpoolEventWriter", "declarator": "diskWriter", "var_name": "diskWriter"}], "file": "common/src/test/java/com/ning/metrics/eventtracker/TestCollectorController.java"}, "test_case": {"identifier": "testOfferEvent", "parameters": "()", "modifiers": "@Test(groups = \"fast\") public", "return": "void", "body": "@Test(groups = \"fast\")\n    public void testOfferEvent() throws Exception\n    {\n        controller.offerEvent(event);\n        Assert.assertEquals(controller.getEventsReceived().get(), 1);\n        diskWriter.commit();\n        Assert.assertEquals(controller.getEventsLost().get(), 0);\n    }", "signature": "void testOfferEvent()", "full_signature": "@Test(groups = \"fast\") public void testOfferEvent()", "class_method_signature": "TestCollectorController.testOfferEvent()", "testcase": true, "constructor": false, "invocations": ["offerEvent", "assertEquals", "get", "getEventsReceived", "commit", "assertEquals", "get", "getEventsLost"]}, "focal_class": {"identifier": "CollectorController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(CollectorController.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(CollectorController.class)", "var_name": "log"}, {"original_string": "private final EventWriter eventWriter;", "modifier": "private final", "type": "EventWriter", "declarator": "eventWriter", "var_name": "eventWriter"}, {"original_string": "private final AtomicLong eventsReceived = new AtomicLong(0);", "modifier": "private final", "type": "AtomicLong", "declarator": "eventsReceived = new AtomicLong(0)", "var_name": "eventsReceived"}, {"original_string": "private final AtomicLong eventsLost = new AtomicLong(0);", "modifier": "private final", "type": "AtomicLong", "declarator": "eventsLost = new AtomicLong(0)", "var_name": "eventsLost"}, {"original_string": "private final AtomicBoolean acceptEvents = new AtomicBoolean(true);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "acceptEvents = new AtomicBoolean(true)", "var_name": "acceptEvents"}], "methods": [{"identifier": "CollectorController", "parameters": "(final EventWriter eventWriter)", "modifiers": "public", "return": "", "signature": " CollectorController(final EventWriter eventWriter)", "full_signature": "public  CollectorController(final EventWriter eventWriter)", "class_method_signature": "CollectorController.CollectorController(final EventWriter eventWriter)", "testcase": false, "constructor": true}, {"identifier": "offerEvent", "parameters": "(final Event event)", "modifiers": "public", "return": "void", "signature": "void offerEvent(final Event event)", "full_signature": "public void offerEvent(final Event event)", "class_method_signature": "CollectorController.offerEvent(final Event event)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "CollectorController.close()", "testcase": false, "constructor": false}, {"identifier": "setAcceptEvents", "parameters": "(final boolean accept)", "modifiers": "public", "return": "void", "signature": "void setAcceptEvents(final boolean accept)", "full_signature": "public void setAcceptEvents(final boolean accept)", "class_method_signature": "CollectorController.setAcceptEvents(final boolean accept)", "testcase": false, "constructor": false}, {"identifier": "isAcceptEvents", "parameters": "()", "modifiers": "@Managed(description = \"Whether the eventtracker library accepts events\") public", "return": "boolean", "signature": "boolean isAcceptEvents()", "full_signature": "@Managed(description = \"Whether the eventtracker library accepts events\") public boolean isAcceptEvents()", "class_method_signature": "CollectorController.isAcceptEvents()", "testcase": false, "constructor": false}, {"identifier": "getEventsReceived", "parameters": "()", "modifiers": "@Managed(description = \"Number of events received\") public", "return": "AtomicLong", "signature": "AtomicLong getEventsReceived()", "full_signature": "@Managed(description = \"Number of events received\") public AtomicLong getEventsReceived()", "class_method_signature": "CollectorController.getEventsReceived()", "testcase": false, "constructor": false}, {"identifier": "getEventsLost", "parameters": "()", "modifiers": "@Managed(description = \"Number of events lost (unable to serialize them to disk)\") public", "return": "AtomicLong", "signature": "AtomicLong getEventsLost()", "full_signature": "@Managed(description = \"Number of events lost (unable to serialize them to disk)\") public AtomicLong getEventsLost()", "class_method_signature": "CollectorController.getEventsLost()", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "()", "modifiers": "@Managed(description = \"Promote events to final spool area\") public", "return": "void", "signature": "void commit()", "full_signature": "@Managed(description = \"Promote events to final spool area\") public void commit()", "class_method_signature": "CollectorController.commit()", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "@Managed(description = \"Flush events to remote agent\") public", "return": "void", "signature": "void flush()", "full_signature": "@Managed(description = \"Flush events to remote agent\") public void flush()", "class_method_signature": "CollectorController.flush()", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/ning/metrics/eventtracker/CollectorController.java"}, "focal_method": {"identifier": "offerEvent", "parameters": "(final Event event)", "modifiers": "public", "return": "void", "body": "public void offerEvent(final Event event) throws IOException\n    {\n        if (!acceptEvents.get()) {\n            // TODO shouldn't we increment eventsLost here?\n            return;\n        }\n\n        eventsReceived.incrementAndGet();\n\n        try {\n            log.debug(\"Writing event: {}\", event);\n            eventWriter.write(event);\n        }\n        catch (IOException e) {\n            log.error(String.format(\"Failed to write event: %s\", event), e);\n            eventsLost.incrementAndGet();\n\n            throw e;\n        }\n    }", "signature": "void offerEvent(final Event event)", "full_signature": "public void offerEvent(final Event event)", "class_method_signature": "CollectorController.offerEvent(final Event event)", "testcase": false, "constructor": false, "invocations": ["get", "incrementAndGet", "debug", "write", "error", "format", "incrementAndGet"]}, "repository": {"repo_id": 1027501, "url": "https://github.com/pierre/eventtracker", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 10, "size": 509, "license": "licensed"}}