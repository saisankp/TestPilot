{"test_class": {"identifier": "ClassTypeUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Object anonymous = new Comparable<String>() {\n                         @Override\n                         public int compareTo(String o) {\n                             return 0;\n                         }\n                     };", "modifier": "", "type": "Object", "declarator": "anonymous = new Comparable<String>() {\n                         @Override\n                         public int compareTo(String o) {\n                             return 0;\n                         }\n                     }", "var_name": "anonymous"}], "file": "core/common/src/test/java/com/alipay/sofa/rpc/common/utils/ClassTypeUtilsTest.java"}, "test_case": {"identifier": "testGetClass", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetClass() {\n        Assert.assertEquals(String.class, ClassTypeUtils.getClass(\"java.lang.String\"));\n        Assert.assertEquals(int.class, ClassTypeUtils.getClass(\"int\"));\n\n        Assert.assertEquals(boolean.class, ClassTypeUtils.getClass(\"boolean\"));\n        Assert.assertEquals(byte.class, ClassTypeUtils.getClass(\"byte\"));\n        Assert.assertEquals(char.class, ClassTypeUtils.getClass(\"char\"));\n        Assert.assertEquals(double.class, ClassTypeUtils.getClass(\"double\"));\n        Assert.assertEquals(float.class, ClassTypeUtils.getClass(\"float\"));\n        Assert.assertEquals(int.class, ClassTypeUtils.getClass(\"int\"));\n        Assert.assertEquals(long.class, ClassTypeUtils.getClass(\"long\"));\n        Assert.assertEquals(short.class, ClassTypeUtils.getClass(\"short\"));\n        Assert.assertEquals(void.class, ClassTypeUtils.getClass(\"void\"));\n\n        // \u672c\u5730\u7c7b\n        class LocalType {\n\n        }\n        Assert.assertEquals(anonymous.getClass(),\n            ClassTypeUtils.getClass(\"com.alipay.sofa.rpc.common.utils.ClassTypeUtilsTest$1\"));\n        Assert.assertEquals(LocalType.class,\n            ClassTypeUtils.getClass(\"com.alipay.sofa.rpc.common.utils.ClassTypeUtilsTest$1LocalType\"));\n        Assert.assertEquals(MemberClass.class,\n            ClassTypeUtils.getClass(\"com.alipay.sofa.rpc.common.utils.ClassTypeUtilsTest$MemberClass\"));\n        Assert.assertEquals(StaticClass.class, ClassTypeUtils.getClass(\"com.alipay.sofa.rpc.common.utils.StaticClass\"));\n\n        Assert.assertEquals(String[].class, ClassTypeUtils.getClass(\"java.lang.String[]\"));\n        Assert.assertEquals(boolean[].class, ClassTypeUtils.getClass(\"boolean[]\"));\n        Assert.assertEquals(byte[].class, ClassTypeUtils.getClass(\"byte[]\"));\n        Assert.assertEquals(char[].class, ClassTypeUtils.getClass(\"char[]\"));\n        Assert.assertEquals(double[].class, ClassTypeUtils.getClass(\"double[]\"));\n        Assert.assertEquals(float[].class, ClassTypeUtils.getClass(\"float[]\"));\n        Assert.assertEquals(int[].class, ClassTypeUtils.getClass(\"int[]\"));\n        Assert.assertEquals(long[].class, ClassTypeUtils.getClass(\"long[]\"));\n        Assert.assertEquals(short[].class, ClassTypeUtils.getClass(\"short[]\"));\n        Assert.assertEquals(Array.newInstance(anonymous.getClass(), 2, 3).getClass(),\n            ClassTypeUtils.getClass(\"com.alipay.sofa.rpc.common.utils.ClassTypeUtilsTest$1[][]\"));\n        Assert.assertEquals(LocalType[][].class,\n            ClassTypeUtils.getClass(\"com.alipay.sofa.rpc.common.utils.ClassTypeUtilsTest$1LocalType[][]\"));\n        Assert.assertEquals(MemberClass[].class,\n            ClassTypeUtils.getClass(\"com.alipay.sofa.rpc.common.utils.ClassTypeUtilsTest$MemberClass[]\"));\n        Assert.assertEquals(StaticClass[].class,\n            ClassTypeUtils.getClass(\"com.alipay.sofa.rpc.common.utils.StaticClass[]\"));\n        Assert.assertEquals(int[][].class, ClassTypeUtils.getClass(\"int[][]\"));\n\n        Assert.assertEquals(String[].class, ClassTypeUtils.getClass(String[].class.getName()));\n        Assert.assertEquals(boolean[].class, ClassTypeUtils.getClass(boolean[].class.getName()));\n        Assert.assertEquals(byte[].class, ClassTypeUtils.getClass(byte[].class.getName()));\n        Assert.assertEquals(char[].class, ClassTypeUtils.getClass(char[].class.getName()));\n        Assert.assertEquals(double[].class, ClassTypeUtils.getClass(double[].class.getName()));\n        Assert.assertEquals(float[].class, ClassTypeUtils.getClass(float[].class.getName()));\n        Assert.assertEquals(int[].class, ClassTypeUtils.getClass(int[].class.getName()));\n        Assert.assertEquals(long[].class, ClassTypeUtils.getClass(long[].class.getName()));\n        Assert.assertEquals(short[].class, ClassTypeUtils.getClass(short[].class.getName()));\n        Assert.assertEquals(int[][].class, ClassTypeUtils.getClass(int[][].class.getName()));\n    }", "signature": "void testGetClass()", "full_signature": "@Test public void testGetClass()", "class_method_signature": "ClassTypeUtilsTest.testGetClass()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "newInstance", "getClass", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "assertEquals", "getClass", "getName", "assertEquals", "getClass", "getName", "assertEquals", "getClass", "getName", "assertEquals", "getClass", "getName", "assertEquals", "getClass", "getName", "assertEquals", "getClass", "getName", "assertEquals", "getClass", "getName", "assertEquals", "getClass", "getName", "assertEquals", "getClass", "getName", "assertEquals", "getClass", "getName"]}, "focal_class": {"identifier": "ClassTypeUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getClasses", "parameters": "(String[] typeStrs)", "modifiers": "public static", "return": "Class[]", "signature": "Class[] getClasses(String[] typeStrs)", "full_signature": "public static Class[] getClasses(String[] typeStrs)", "class_method_signature": "ClassTypeUtils.getClasses(String[] typeStrs)", "testcase": false, "constructor": false}, {"identifier": "getClass", "parameters": "(String typeStr)", "modifiers": "public static", "return": "Class", "signature": "Class getClass(String typeStr)", "full_signature": "public static Class getClass(String typeStr)", "class_method_signature": "ClassTypeUtils.getClass(String typeStr)", "testcase": false, "constructor": false}, {"identifier": "canonicalNameToJvmName", "parameters": "(String canonicalName)", "modifiers": "public static", "return": "String", "signature": "String canonicalNameToJvmName(String canonicalName)", "full_signature": "public static String canonicalNameToJvmName(String canonicalName)", "class_method_signature": "ClassTypeUtils.canonicalNameToJvmName(String canonicalName)", "testcase": false, "constructor": false}, {"identifier": "getTypeStrs", "parameters": "(Class[] types)", "modifiers": "public static", "return": "String[]", "signature": "String[] getTypeStrs(Class[] types)", "full_signature": "public static String[] getTypeStrs(Class[] types)", "class_method_signature": "ClassTypeUtils.getTypeStrs(Class[] types)", "testcase": false, "constructor": false}, {"identifier": "getTypeStrs", "parameters": "(Class[] types, boolean javaStyle)", "modifiers": "public static", "return": "String[]", "signature": "String[] getTypeStrs(Class[] types, boolean javaStyle)", "full_signature": "public static String[] getTypeStrs(Class[] types, boolean javaStyle)", "class_method_signature": "ClassTypeUtils.getTypeStrs(Class[] types, boolean javaStyle)", "testcase": false, "constructor": false}, {"identifier": "getTypeStr", "parameters": "(Class clazz)", "modifiers": "public static", "return": "String", "signature": "String getTypeStr(Class clazz)", "full_signature": "public static String getTypeStr(Class clazz)", "class_method_signature": "ClassTypeUtils.getTypeStr(Class clazz)", "testcase": false, "constructor": false}, {"identifier": "jvmNameToCanonicalName", "parameters": "(String jvmName)", "modifiers": "public static", "return": "String", "signature": "String jvmNameToCanonicalName(String jvmName)", "full_signature": "public static String jvmNameToCanonicalName(String jvmName)", "class_method_signature": "ClassTypeUtils.jvmNameToCanonicalName(String jvmName)", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/com/alipay/sofa/rpc/common/utils/ClassTypeUtils.java"}, "focal_method": {"identifier": "getClass", "parameters": "(String typeStr)", "modifiers": "public static", "return": "Class", "body": "public static Class getClass(String typeStr) {\n        Class clazz = ReflectCache.getClassCache(typeStr);\n        if (clazz == null) {\n            if (\"void\".equals(typeStr)) {\n                clazz = void.class;\n            } else if (\"boolean\".equals(typeStr)) {\n                clazz = boolean.class;\n            } else if (\"byte\".equals(typeStr)) {\n                clazz = byte.class;\n            } else if (\"char\".equals(typeStr)) {\n                clazz = char.class;\n            } else if (\"double\".equals(typeStr)) {\n                clazz = double.class;\n            } else if (\"float\".equals(typeStr)) {\n                clazz = float.class;\n            } else if (\"int\".equals(typeStr)) {\n                clazz = int.class;\n            } else if (\"long\".equals(typeStr)) {\n                clazz = long.class;\n            } else if (\"short\".equals(typeStr)) {\n                clazz = short.class;\n            } else {\n                String jvmName = canonicalNameToJvmName(typeStr);\n                clazz = ClassUtils.forName(jvmName);\n            }\n            ReflectCache.putClassCache(typeStr, clazz);\n        }\n        return clazz;\n    }", "signature": "Class getClass(String typeStr)", "full_signature": "public static Class getClass(String typeStr)", "class_method_signature": "ClassTypeUtils.getClass(String typeStr)", "testcase": false, "constructor": false, "invocations": ["getClassCache", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "canonicalNameToJvmName", "forName", "putClassCache"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}