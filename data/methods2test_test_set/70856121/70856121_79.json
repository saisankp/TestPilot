{"test_class": {"identifier": "MetricsServiceTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/server/src/test/java/io/cassandrareaper/service/MetricsServiceTest.java"}, "test_case": {"identifier": "testGetDroppedMessages", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetDroppedMessages()\n      throws InterruptedException, ReaperException, JMException, IOException, ClassNotFoundException {\n\n    AppContext cxt = new AppContext();\n    ClusterFacade clusterFacade = Mockito.mock(ClusterFacade.class);\n    Mockito.doReturn(Collections.singletonList(\"\")).when(clusterFacade).getDroppedMessages(any());\n    cxt.config = new ReaperApplicationConfiguration();\n    cxt.config.setJmxConnectionTimeoutInSeconds(10);\n    cxt.jmxConnectionFactory = mock(JmxConnectionFactory.class);\n    JmxProxy jmx = (JmxProxy) mock(Class.forName(\"io.cassandrareaper.jmx.JmxProxyImpl\"));\n    when(cxt.jmxConnectionFactory.connectAny(any(Collection.class))).thenReturn(jmx);\n    MBeanServerConnection serverConn = mock(MBeanServerConnection.class);\n    JmxProxyTest.mockGetMBeanServerConnection(jmx, serverConn);\n\n    // @todo capture objectName and return valid set of objectNames,\n    // to properly test MetricsProxy.collectMetrics(..) and MetricsService.convertToDroppedMessages(..)\n    when(serverConn.queryNames(Mockito.any(ObjectName.class), Mockito.isNull())).thenReturn(Collections.emptySet());\n\n    Node node = Node.builder().withHostname(\"127.0.0.1\").build();\n    MetricsService.create(cxt, () -> clusterFacade).getDroppedMessages(node);\n    Mockito.verify(clusterFacade, Mockito.times(1)).getDroppedMessages(Mockito.any());\n  }", "signature": "void testGetDroppedMessages()", "full_signature": "@Test public void testGetDroppedMessages()", "class_method_signature": "MetricsServiceTest.testGetDroppedMessages()", "testcase": true, "constructor": false, "invocations": ["mock", "getDroppedMessages", "when", "doReturn", "singletonList", "any", "setJmxConnectionTimeoutInSeconds", "mock", "mock", "forName", "thenReturn", "when", "connectAny", "any", "mock", "mockGetMBeanServerConnection", "thenReturn", "when", "queryNames", "any", "isNull", "emptySet", "build", "withHostname", "builder", "getDroppedMessages", "create", "getDroppedMessages", "verify", "times", "any"]}, "focal_class": {"identifier": "MetricsService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(MetricsService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(MetricsService.class)", "var_name": "LOG"}, {"original_string": "private static final String[] COLLECTED_METRICS = {\n    \"org.apache.cassandra.metrics:type=ThreadPools,path=request,*\",\n    \"org.apache.cassandra.metrics:type=ThreadPools,path=internal,*\",\n    \"org.apache.cassandra.metrics:type=ClientRequest,*\",\n    \"org.apache.cassandra.metrics:type=DroppedMessage,*\"\n  };", "modifier": "private static final", "type": "String[]", "declarator": "COLLECTED_METRICS = {\n    \"org.apache.cassandra.metrics:type=ThreadPools,path=request,*\",\n    \"org.apache.cassandra.metrics:type=ThreadPools,path=internal,*\",\n    \"org.apache.cassandra.metrics:type=ClientRequest,*\",\n    \"org.apache.cassandra.metrics:type=DroppedMessage,*\"\n  }", "var_name": "COLLECTED_METRICS"}, {"original_string": "private final AppContext context;", "modifier": "private final", "type": "AppContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final ClusterFacade clusterFacade;", "modifier": "private final", "type": "ClusterFacade", "declarator": "clusterFacade", "var_name": "clusterFacade"}, {"original_string": "private final ObjectMapper objectMapper = new ObjectMapper();", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper = new ObjectMapper()", "var_name": "objectMapper"}, {"original_string": "private final String localClusterName;", "modifier": "private final", "type": "String", "declarator": "localClusterName", "var_name": "localClusterName"}], "methods": [{"identifier": "MetricsService", "parameters": "(AppContext context, Supplier<ClusterFacade> clusterFacadeSupplier)", "modifiers": "private", "return": "", "signature": " MetricsService(AppContext context, Supplier<ClusterFacade> clusterFacadeSupplier)", "full_signature": "private  MetricsService(AppContext context, Supplier<ClusterFacade> clusterFacadeSupplier)", "class_method_signature": "MetricsService.MetricsService(AppContext context, Supplier<ClusterFacade> clusterFacadeSupplier)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(AppContext context, Supplier<ClusterFacade> supplier)", "modifiers": "@VisibleForTesting static", "return": "MetricsService", "signature": "MetricsService create(AppContext context, Supplier<ClusterFacade> supplier)", "full_signature": "@VisibleForTesting static MetricsService create(AppContext context, Supplier<ClusterFacade> supplier)", "class_method_signature": "MetricsService.create(AppContext context, Supplier<ClusterFacade> supplier)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(AppContext context)", "modifiers": "public static", "return": "MetricsService", "signature": "MetricsService create(AppContext context)", "full_signature": "public static MetricsService create(AppContext context)", "class_method_signature": "MetricsService.create(AppContext context)", "testcase": false, "constructor": false}, {"identifier": "getTpStats", "parameters": "(Node host)", "modifiers": "public", "return": "List<ThreadPoolStat>", "signature": "List<ThreadPoolStat> getTpStats(Node host)", "full_signature": "public List<ThreadPoolStat> getTpStats(Node host)", "class_method_signature": "MetricsService.getTpStats(Node host)", "testcase": false, "constructor": false}, {"identifier": "getDroppedMessages", "parameters": "(Node host)", "modifiers": "public", "return": "List<DroppedMessages>", "signature": "List<DroppedMessages> getDroppedMessages(Node host)", "full_signature": "public List<DroppedMessages> getDroppedMessages(Node host)", "class_method_signature": "MetricsService.getDroppedMessages(Node host)", "testcase": false, "constructor": false}, {"identifier": "getClientRequestLatencies", "parameters": "(Node host)", "modifiers": "public", "return": "List<MetricsHistogram>", "signature": "List<MetricsHistogram> getClientRequestLatencies(Node host)", "full_signature": "public List<MetricsHistogram> getClientRequestLatencies(Node host)", "class_method_signature": "MetricsService.getClientRequestLatencies(Node host)", "testcase": false, "constructor": false}, {"identifier": "convertToGenericMetrics", "parameters": "(Map<String, List<JmxStat>> jmxStats, Node node)", "modifiers": "public", "return": "List<GenericMetric>", "signature": "List<GenericMetric> convertToGenericMetrics(Map<String, List<JmxStat>> jmxStats, Node node)", "full_signature": "public List<GenericMetric> convertToGenericMetrics(Map<String, List<JmxStat>> jmxStats, Node node)", "class_method_signature": "MetricsService.convertToGenericMetrics(Map<String, List<JmxStat>> jmxStats, Node node)", "testcase": false, "constructor": false}, {"identifier": "grabAndStoreGenericMetrics", "parameters": "()", "modifiers": "", "return": "void", "signature": "void grabAndStoreGenericMetrics()", "full_signature": " void grabAndStoreGenericMetrics()", "class_method_signature": "MetricsService.grabAndStoreGenericMetrics()", "testcase": false, "constructor": false}, {"identifier": "grabAndStoreCompactionStats", "parameters": "()", "modifiers": "", "return": "void", "signature": "void grabAndStoreCompactionStats()", "full_signature": " void grabAndStoreCompactionStats()", "class_method_signature": "MetricsService.grabAndStoreCompactionStats()", "testcase": false, "constructor": false}, {"identifier": "grabAndStoreActiveStreams", "parameters": "()", "modifiers": "", "return": "void", "signature": "void grabAndStoreActiveStreams()", "full_signature": " void grabAndStoreActiveStreams()", "class_method_signature": "MetricsService.grabAndStoreActiveStreams()", "testcase": false, "constructor": false}], "file": "src/server/src/main/java/io/cassandrareaper/service/MetricsService.java"}, "focal_method": {"identifier": "getDroppedMessages", "parameters": "(Node host)", "modifiers": "public", "return": "List<DroppedMessages>", "body": "public List<DroppedMessages> getDroppedMessages(Node host) throws ReaperException {\n    return clusterFacade.getDroppedMessages(host);\n  }", "signature": "List<DroppedMessages> getDroppedMessages(Node host)", "full_signature": "public List<DroppedMessages> getDroppedMessages(Node host)", "class_method_signature": "MetricsService.getDroppedMessages(Node host)", "testcase": false, "constructor": false, "invocations": ["getDroppedMessages"]}, "repository": {"repo_id": 70856121, "url": "https://github.com/thelastpickle/cassandra-reaper", "language": "Java", "is_fork": false, "fork_count": 156, "stargazer_count": 353, "size": 43662, "license": "licensed"}}