{"test_class": {"identifier": "PluginRegistryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PluginRegistry underTest = new PluginRegistry();", "modifier": "private", "type": "PluginRegistry", "declarator": "underTest = new PluginRegistry()", "var_name": "underTest"}], "file": "core/src/test/java/io/nuun/kernel/core/internal/PluginRegistryTest.java"}, "test_case": {"identifier": "test_get_plugins_cant_be_null", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_get_plugins_cant_be_null()\n    {\n        assertThat(underTest.getPlugins()).isNotNull();\n    }", "signature": "void test_get_plugins_cant_be_null()", "full_signature": "@Test public void test_get_plugins_cant_be_null()", "class_method_signature": "PluginRegistryTest.test_get_plugins_cant_be_null()", "testcase": true, "constructor": false, "invocations": ["isNotNull", "assertThat", "getPlugins"]}, "focal_class": {"identifier": "PluginRegistry", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NAME_UNIQUENESS_ERROR = \"The kernel contains two plugins with the same name (%s): %s, %s\";", "modifier": "private static final", "type": "String", "declarator": "NAME_UNIQUENESS_ERROR = \"The kernel contains two plugins with the same name (%s): %s, %s\"", "var_name": "NAME_UNIQUENESS_ERROR"}, {"original_string": "private static final String TYPE_UNIQUENESS_ERROR = \"The kernel contains two plugins of type \";", "modifier": "private static final", "type": "String", "declarator": "TYPE_UNIQUENESS_ERROR = \"The kernel contains two plugins of type \"", "var_name": "TYPE_UNIQUENESS_ERROR"}, {"original_string": "private static final String NAME_VALIDATION_ERROR = \"The plugin %s doesn't have a correct name. It should not be null or empty.\";", "modifier": "private static final", "type": "String", "declarator": "NAME_VALIDATION_ERROR = \"The plugin %s doesn't have a correct name. It should not be null or empty.\"", "var_name": "NAME_VALIDATION_ERROR"}, {"original_string": "private final Map<Class<? extends Plugin>, Plugin> pluginsByClass = new HashMap<>();", "modifier": "private final", "type": "Map<Class<? extends Plugin>, Plugin>", "declarator": "pluginsByClass = new HashMap<>()", "var_name": "pluginsByClass"}, {"original_string": "private final Map<String, Plugin> pluginsByName = new HashMap<>();", "modifier": "private final", "type": "Map<String, Plugin>", "declarator": "pluginsByName = new HashMap<>()", "var_name": "pluginsByName"}], "methods": [{"identifier": "add", "parameters": "(Class<? extends Plugin> pluginClass)", "modifiers": "", "return": "void", "signature": "void add(Class<? extends Plugin> pluginClass)", "full_signature": " void add(Class<? extends Plugin> pluginClass)", "class_method_signature": "PluginRegistry.add(Class<? extends Plugin> pluginClass)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(Plugin plugin)", "modifiers": "", "return": "void", "signature": "void add(Plugin plugin)", "full_signature": " void add(Plugin plugin)", "class_method_signature": "PluginRegistry.add(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "assertNameNotBlank", "parameters": "(Plugin plugin)", "modifiers": "private", "return": "void", "signature": "void assertNameNotBlank(Plugin plugin)", "full_signature": "private void assertNameNotBlank(Plugin plugin)", "class_method_signature": "PluginRegistry.assertNameNotBlank(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "indexPluginByName", "parameters": "(Plugin plugin)", "modifiers": "private", "return": "void", "signature": "void indexPluginByName(Plugin plugin)", "full_signature": "private void indexPluginByName(Plugin plugin)", "class_method_signature": "PluginRegistry.indexPluginByName(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "indexPluginByClass", "parameters": "(Plugin plugin)", "modifiers": "private", "return": "void", "signature": "void indexPluginByClass(Plugin plugin)", "full_signature": "private void indexPluginByClass(Plugin plugin)", "class_method_signature": "PluginRegistry.indexPluginByClass(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Class<? extends Plugin> pluginClass)", "modifiers": "", "return": "Plugin", "signature": "Plugin get(Class<? extends Plugin> pluginClass)", "full_signature": " Plugin get(Class<? extends Plugin> pluginClass)", "class_method_signature": "PluginRegistry.get(Class<? extends Plugin> pluginClass)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String name)", "modifiers": "", "return": "Plugin", "signature": "Plugin get(String name)", "full_signature": " Plugin get(String name)", "class_method_signature": "PluginRegistry.get(String name)", "testcase": false, "constructor": false}, {"identifier": "getPlugins", "parameters": "()", "modifiers": "", "return": "Collection<Plugin>", "signature": "Collection<Plugin> getPlugins()", "full_signature": " Collection<Plugin> getPlugins()", "class_method_signature": "PluginRegistry.getPlugins()", "testcase": false, "constructor": false}, {"identifier": "getPluginClasses", "parameters": "()", "modifiers": "", "return": "Collection<Class<? extends Plugin>>", "signature": "Collection<Class<? extends Plugin>> getPluginClasses()", "full_signature": " Collection<Class<? extends Plugin>> getPluginClasses()", "class_method_signature": "PluginRegistry.getPluginClasses()", "testcase": false, "constructor": false}, {"identifier": "getPluginsByName", "parameters": "()", "modifiers": "public", "return": "Map<String, Plugin>", "signature": "Map<String, Plugin> getPluginsByName()", "full_signature": "public Map<String, Plugin> getPluginsByName()", "class_method_signature": "PluginRegistry.getPluginsByName()", "testcase": false, "constructor": false}], "file": "core/src/main/java/io/nuun/kernel/core/internal/PluginRegistry.java"}, "focal_method": {"identifier": "getPlugins", "parameters": "()", "modifiers": "", "return": "Collection<Plugin>", "body": "Collection<Plugin> getPlugins()\n    {\n        return pluginsByClass.values();\n    }", "signature": "Collection<Plugin> getPlugins()", "full_signature": " Collection<Plugin> getPlugins()", "class_method_signature": "PluginRegistry.getPlugins()", "testcase": false, "constructor": false, "invocations": ["values"]}, "repository": {"repo_id": 23086156, "url": "https://github.com/nuun-io/kernel", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 7, "size": 1114, "license": "licensed"}}