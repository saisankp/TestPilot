{"test_class": {"identifier": "CuratorZookeeperClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TestingServer zkServer;", "modifier": "private", "type": "TestingServer", "declarator": "zkServer", "var_name": "zkServer"}, {"original_string": "private int zkServerPort;", "modifier": "private", "type": "int", "declarator": "zkServerPort", "var_name": "zkServerPort"}], "file": "dubbo-remoting/dubbo-remoting-zookeeper/src/test/java/com/alibaba/dubbo/remoting/zookeeper/curator/CuratorZookeeperClientTest.java"}, "test_case": {"identifier": "testCheckExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckExists() {\n        CuratorZookeeperClient curatorClient = new CuratorZookeeperClient(URL.valueOf(\"zookeeper://127.0.0.1:\" + this.zkServerPort + \"/com.alibaba.dubbo.registry.RegistryService\"));\n        String path = \"/dubbo/com.alibaba.dubbo.demo.DemoService/providers\";\n        curatorClient.create(path, false);\n        Assert.assertThat(curatorClient.checkExists(path), is(true));\n        Assert.assertThat(curatorClient.checkExists(path + \"/noneexits\"), is(false));\n    }", "signature": "void testCheckExists()", "full_signature": "@Test public void testCheckExists()", "class_method_signature": "CuratorZookeeperClientTest.testCheckExists()", "testcase": true, "constructor": false, "invocations": ["valueOf", "create", "assertThat", "checkExists", "is", "assertThat", "checkExists", "is"]}, "focal_class": {"identifier": "CuratorZookeeperClient", "superclass": "extends AbstractZookeeperClient<CuratorWatcher>", "interfaces": "", "fields": [{"original_string": "private final CuratorFramework client;", "modifier": "private final", "type": "CuratorFramework", "declarator": "client", "var_name": "client"}], "methods": [{"identifier": "CuratorZookeeperClient", "parameters": "(URL url)", "modifiers": "public", "return": "", "signature": " CuratorZookeeperClient(URL url)", "full_signature": "public  CuratorZookeeperClient(URL url)", "class_method_signature": "CuratorZookeeperClient.CuratorZookeeperClient(URL url)", "testcase": false, "constructor": true}, {"identifier": "createPersistent", "parameters": "(String path)", "modifiers": "@Override public", "return": "void", "signature": "void createPersistent(String path)", "full_signature": "@Override public void createPersistent(String path)", "class_method_signature": "CuratorZookeeperClient.createPersistent(String path)", "testcase": false, "constructor": false}, {"identifier": "createEphemeral", "parameters": "(String path)", "modifiers": "@Override public", "return": "void", "signature": "void createEphemeral(String path)", "full_signature": "@Override public void createEphemeral(String path)", "class_method_signature": "CuratorZookeeperClient.createEphemeral(String path)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(String path)", "modifiers": "@Override public", "return": "void", "signature": "void delete(String path)", "full_signature": "@Override public void delete(String path)", "class_method_signature": "CuratorZookeeperClient.delete(String path)", "testcase": false, "constructor": false}, {"identifier": "getChildren", "parameters": "(String path)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getChildren(String path)", "full_signature": "@Override public List<String> getChildren(String path)", "class_method_signature": "CuratorZookeeperClient.getChildren(String path)", "testcase": false, "constructor": false}, {"identifier": "checkExists", "parameters": "(String path)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkExists(String path)", "full_signature": "@Override public boolean checkExists(String path)", "class_method_signature": "CuratorZookeeperClient.checkExists(String path)", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isConnected()", "full_signature": "@Override public boolean isConnected()", "class_method_signature": "CuratorZookeeperClient.isConnected()", "testcase": false, "constructor": false}, {"identifier": "doClose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void doClose()", "full_signature": "@Override public void doClose()", "class_method_signature": "CuratorZookeeperClient.doClose()", "testcase": false, "constructor": false}, {"identifier": "createTargetChildListener", "parameters": "(String path, ChildListener listener)", "modifiers": "@Override public", "return": "CuratorWatcher", "signature": "CuratorWatcher createTargetChildListener(String path, ChildListener listener)", "full_signature": "@Override public CuratorWatcher createTargetChildListener(String path, ChildListener listener)", "class_method_signature": "CuratorZookeeperClient.createTargetChildListener(String path, ChildListener listener)", "testcase": false, "constructor": false}, {"identifier": "addTargetChildListener", "parameters": "(String path, CuratorWatcher listener)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> addTargetChildListener(String path, CuratorWatcher listener)", "full_signature": "@Override public List<String> addTargetChildListener(String path, CuratorWatcher listener)", "class_method_signature": "CuratorZookeeperClient.addTargetChildListener(String path, CuratorWatcher listener)", "testcase": false, "constructor": false}, {"identifier": "removeTargetChildListener", "parameters": "(String path, CuratorWatcher listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeTargetChildListener(String path, CuratorWatcher listener)", "full_signature": "@Override public void removeTargetChildListener(String path, CuratorWatcher listener)", "class_method_signature": "CuratorZookeeperClient.removeTargetChildListener(String path, CuratorWatcher listener)", "testcase": false, "constructor": false}], "file": "dubbo-remoting/dubbo-remoting-zookeeper/src/main/java/com/alibaba/dubbo/remoting/zookeeper/curator/CuratorZookeeperClient.java"}, "focal_method": {"identifier": "checkExists", "parameters": "(String path)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean checkExists(String path) {\n        try {\n            if (client.checkExists().forPath(path) != null) {\n                return true;\n            }\n        } catch (Exception e) {\n        }\n        return false;\n    }", "signature": "boolean checkExists(String path)", "full_signature": "@Override public boolean checkExists(String path)", "class_method_signature": "CuratorZookeeperClient.checkExists(String path)", "testcase": false, "constructor": false, "invocations": ["forPath", "checkExists"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}