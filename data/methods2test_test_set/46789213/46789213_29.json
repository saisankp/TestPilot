{"test_class": {"identifier": "TestSpdz2kSInt", "superclass": "", "interfaces": "", "fields": [], "file": "suite/spdz2k/src/test/java/dk/alexandra/fresco/suite/spdz2k/datatypes/TestSpdz2kSInt.java"}, "test_case": {"identifier": "testToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testToString() {\n    Spdz2kSInt<CompUInt128> sint = new Spdz2kSInt<>(\n        new CompUInt128(BigInteger.ONE),\n        new CompUInt128(BigInteger.ONE)\n    );\n    Assert.assertEquals(\"Spdz2kSInt{share=1, macShare=1}\", sint.toString());\n  }", "signature": "void testToString()", "full_signature": "@Test public void testToString()", "class_method_signature": "TestSpdz2kSInt.testToString()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString"]}, "focal_class": {"identifier": "Spdz2kSInt", "superclass": "", "interfaces": "implements SInt", "fields": [{"original_string": "private final PlainT share;", "modifier": "private final", "type": "PlainT", "declarator": "share", "var_name": "share"}, {"original_string": "private final PlainT macShare;", "modifier": "private final", "type": "PlainT", "declarator": "macShare", "var_name": "macShare"}], "methods": [{"identifier": "Spdz2kSInt", "parameters": "(PlainT share, PlainT macShare)", "modifiers": "public", "return": "", "signature": " Spdz2kSInt(PlainT share, PlainT macShare)", "full_signature": "public  Spdz2kSInt(PlainT share, PlainT macShare)", "class_method_signature": "Spdz2kSInt.Spdz2kSInt(PlainT share, PlainT macShare)", "testcase": false, "constructor": true}, {"identifier": "Spdz2kSInt", "parameters": "(PlainT share, PlainT macKeyShare, PlainT zero, boolean isPartyOne)", "modifiers": "public", "return": "", "signature": " Spdz2kSInt(PlainT share, PlainT macKeyShare, PlainT zero, boolean isPartyOne)", "full_signature": "public  Spdz2kSInt(PlainT share, PlainT macKeyShare, PlainT zero, boolean isPartyOne)", "class_method_signature": "Spdz2kSInt.Spdz2kSInt(PlainT share, PlainT macKeyShare, PlainT zero, boolean isPartyOne)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(Spdz2kSInt<PlainT> other)", "modifiers": "public", "return": "Spdz2kSInt<PlainT>", "signature": "Spdz2kSInt<PlainT> add(Spdz2kSInt<PlainT> other)", "full_signature": "public Spdz2kSInt<PlainT> add(Spdz2kSInt<PlainT> other)", "class_method_signature": "Spdz2kSInt.add(Spdz2kSInt<PlainT> other)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(Spdz2kSInt<PlainT> other)", "modifiers": "public", "return": "Spdz2kSInt<PlainT>", "signature": "Spdz2kSInt<PlainT> subtract(Spdz2kSInt<PlainT> other)", "full_signature": "public Spdz2kSInt<PlainT> subtract(Spdz2kSInt<PlainT> other)", "class_method_signature": "Spdz2kSInt.subtract(Spdz2kSInt<PlainT> other)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(PlainT other)", "modifiers": "public", "return": "Spdz2kSInt<PlainT>", "signature": "Spdz2kSInt<PlainT> multiply(PlainT other)", "full_signature": "public Spdz2kSInt<PlainT> multiply(PlainT other)", "class_method_signature": "Spdz2kSInt.multiply(PlainT other)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Spdz2kSInt.toString()", "testcase": false, "constructor": false}, {"identifier": "addConstant", "parameters": "(\n      PlainT other, PlainT macKeyShare, PlainT zero, boolean isPartyOne)", "modifiers": "public", "return": "Spdz2kSInt<PlainT>", "signature": "Spdz2kSInt<PlainT> addConstant(\n      PlainT other, PlainT macKeyShare, PlainT zero, boolean isPartyOne)", "full_signature": "public Spdz2kSInt<PlainT> addConstant(\n      PlainT other, PlainT macKeyShare, PlainT zero, boolean isPartyOne)", "class_method_signature": "Spdz2kSInt.addConstant(\n      PlainT other, PlainT macKeyShare, PlainT zero, boolean isPartyOne)", "testcase": false, "constructor": false}, {"identifier": "getShare", "parameters": "()", "modifiers": "public", "return": "PlainT", "signature": "PlainT getShare()", "full_signature": "public PlainT getShare()", "class_method_signature": "Spdz2kSInt.getShare()", "testcase": false, "constructor": false}, {"identifier": "getMacShare", "parameters": "()", "modifiers": "public", "return": "PlainT", "signature": "PlainT getMacShare()", "full_signature": "public PlainT getMacShare()", "class_method_signature": "Spdz2kSInt.getMacShare()", "testcase": false, "constructor": false}, {"identifier": "out", "parameters": "()", "modifiers": "@Override public", "return": "SInt", "signature": "SInt out()", "full_signature": "@Override public SInt out()", "class_method_signature": "Spdz2kSInt.out()", "testcase": false, "constructor": false}], "file": "suite/spdz2k/src/main/java/dk/alexandra/fresco/suite/spdz2k/datatypes/Spdz2kSInt.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String toString() {\n    return \"Spdz2kSInt{\" +\n        \"share=\" + share +\n        \", macShare=\" + macShare +\n        '}';\n  }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Spdz2kSInt.toString()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}