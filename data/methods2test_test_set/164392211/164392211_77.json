{"test_class": {"identifier": "DataFrameTabularPrintWorkerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DataFrame df;", "modifier": "private", "type": "DataFrame", "declarator": "df", "var_name": "df"}], "file": "dflib/src/test/java/com/nhl/dflib/print/DataFrameTabularPrintWorkerTest.java"}, "test_case": {"identifier": "testPrint_TruncateColumns", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPrint_TruncateColumns() {\n        DataFrameTabularPrintWorker w = new DataFrameTabularPrintWorker(new StringBuilder(), 5, 4);\n\n        assertEquals(System.lineSeparator() +\n                \"col1 c..2\" + System.lineSeparator() +\n                \"---- ----\" + System.lineSeparator() +\n                \"one     1\" + System.lineSeparator() +\n                \"two     2\" + System.lineSeparator() +\n                \"t..e    3\" + System.lineSeparator() +\n                \"four    4\" + System.lineSeparator() +\n                \"4 rows x 2 columns\", w.print(df).toString());\n    }", "signature": "void testPrint_TruncateColumns()", "full_signature": "@Test public void testPrint_TruncateColumns()", "class_method_signature": "DataFrameTabularPrintWorkerTest.testPrint_TruncateColumns()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "lineSeparator", "lineSeparator", "lineSeparator", "lineSeparator", "lineSeparator", "lineSeparator", "lineSeparator", "toString", "print"]}, "focal_class": {"identifier": "DataFrameTabularPrintWorker", "superclass": "extends BasePrintWorker", "interfaces": "", "fields": [], "methods": [{"identifier": "DataFrameTabularPrintWorker", "parameters": "(StringBuilder out, int maxDisplayRows, int maxDisplayColumnWith)", "modifiers": "public", "return": "", "signature": " DataFrameTabularPrintWorker(StringBuilder out, int maxDisplayRows, int maxDisplayColumnWith)", "full_signature": "public  DataFrameTabularPrintWorker(StringBuilder out, int maxDisplayRows, int maxDisplayColumnWith)", "class_method_signature": "DataFrameTabularPrintWorker.DataFrameTabularPrintWorker(StringBuilder out, int maxDisplayRows, int maxDisplayColumnWith)", "testcase": false, "constructor": true}, {"identifier": "print", "parameters": "(DataFrame df)", "modifiers": "public", "return": "StringBuilder", "signature": "StringBuilder print(DataFrame df)", "full_signature": "public StringBuilder print(DataFrame df)", "class_method_signature": "DataFrameTabularPrintWorker.print(DataFrame df)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(String string)", "modifiers": "", "return": "StringBuilder", "signature": "StringBuilder append(String string)", "full_signature": " StringBuilder append(String string)", "class_method_signature": "DataFrameTabularPrintWorker.append(String string)", "testcase": false, "constructor": false}], "file": "dflib/src/main/java/com/nhl/dflib/print/DataFrameTabularPrintWorker.java"}, "focal_method": {"identifier": "print", "parameters": "(DataFrame df)", "modifiers": "public", "return": "StringBuilder", "body": "public StringBuilder print(DataFrame df) {\n\n        if (df == null) {\n            out.append(\"null\");\n            return out;\n        }\n\n        Index columns = df.getColumnsIndex();\n\n        int w = columns.size();\n        if (w == 0) {\n            return out;\n        }\n\n        String[] labels = columns.getLabels();\n        int[] columnWidth = new int[w];\n        String[] columnFormat = new String[w];\n\n        DataFrameTruncator truncator = DataFrameTruncator.create(df, maxDisplayRows);\n\n        for (int i = 0; i < w; i++) {\n            columnWidth[i] = labels[i].length();\n        }\n\n        DataFrame head = truncator.head();\n        List<String[]> headData = new ArrayList<>(head.height());\n        for (RowProxy p : head) {\n\n            String[] rValue = new String[w];\n\n            for (int i = 0; i < w; i++) {\n                rValue[i] = String.valueOf(p.get(i));\n                columnWidth[i] = Math.max(columnWidth[i], rValue[i].length());\n            }\n\n            headData.add(rValue);\n        }\n\n        List<String[]> tailData = null;\n        if (truncator.isTruncated()) {\n\n            DataFrame tail = truncator.tail();\n            tailData = new ArrayList<>(tail.height());\n            for (RowProxy p : tail) {\n\n                String[] rValue = new String[w];\n\n                for (int i = 0; i < w; i++) {\n                    rValue[i] = String.valueOf(p.get(i));\n                    columnWidth[i] = Math.max(columnWidth[i], rValue[i].length());\n                }\n\n                tailData.add(rValue);\n            }\n        }\n\n        // since tabular printer is multiline, start with a line break to ensure logger-induced prefixes don't break\n        // table alignment\n        appendNewLine();\n\n        // constrain column width and calculate formatters\n        for (int i = 0; i < w; i++) {\n            columnWidth[i] = Math.min(columnWidth[i], maxDisplayColumnWidth);\n            columnFormat[i] = columnFormat(columnWidth[i], df.getColumn(i).getInferredType());\n        }\n\n        // print header\n        for (int i = 0; i < w; i++) {\n            if (i > 0) {\n                append(\" \");\n            }\n            appendFixedWidth(labels[i], columnWidth[i], columnFormat[i]);\n        }\n\n        // print header separator\n        appendNewLine();\n        for (int i = 0; i < w; i++) {\n            if (i > 0) {\n                append(\" \");\n            }\n\n            for (int j = 0; j < columnWidth[i]; j++) {\n                append(\"-\");\n            }\n        }\n\n        // print data\n        for (String[] row : headData) {\n            appendNewLine();\n            for (int i = 0; i < w; i++) {\n                if (i > 0) {\n                    append(\" \");\n                }\n                appendFixedWidth(row[i], columnWidth[i], columnFormat[i]);\n            }\n        }\n\n        if (truncator.isTruncated()) {\n            appendNewLine().append(\"...\");\n\n            for (String[] row : tailData) {\n                appendNewLine();\n                for (int i = 0; i < w; i++) {\n                    if (i > 0) {\n                        append(\" \");\n                    }\n                    appendFixedWidth(row[i], columnWidth[i], columnFormat[i]);\n                }\n            }\n        }\n\n        int h = df.height();\n\n        String rowsLabel = h == 1 ? \" row x \" : \" rows x \";\n        String columnsLabel = w == 1 ? \" column\" : \" columns\";\n        appendNewLine().append(h).append(rowsLabel).append(w).append(columnsLabel);\n\n        return out;\n    }", "signature": "StringBuilder print(DataFrame df)", "full_signature": "public StringBuilder print(DataFrame df)", "class_method_signature": "DataFrameTabularPrintWorker.print(DataFrame df)", "testcase": false, "constructor": false, "invocations": ["append", "getColumnsIndex", "size", "getLabels", "create", "length", "head", "height", "valueOf", "get", "max", "length", "add", "isTruncated", "tail", "height", "valueOf", "get", "max", "length", "add", "appendNewLine", "min", "columnFormat", "getInferredType", "getColumn", "append", "appendFixedWidth", "appendNewLine", "append", "append", "appendNewLine", "append", "appendFixedWidth", "isTruncated", "append", "appendNewLine", "appendNewLine", "append", "appendFixedWidth", "height", "append", "append", "append", "append", "appendNewLine"]}, "repository": {"repo_id": 164392211, "url": "https://github.com/nhl/dflib", "stars": 13, "created": "1/7/2019 7:07:58 AM +00:00", "updates": "2019-12-23T13:26:53+00:00", "fork": "False", "license": "licensed"}}