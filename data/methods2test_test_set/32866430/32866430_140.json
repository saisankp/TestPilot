{"test_class": {"identifier": "CookieRenewingFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SESSION_COOKIE = \"session\";", "modifier": "private static final", "type": "String", "declarator": "SESSION_COOKIE = \"session\"", "var_name": "SESSION_COOKIE"}, {"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock CookieAuthenticator authenticator;", "modifier": "@Mock", "type": "CookieAuthenticator", "declarator": "authenticator", "var_name": "authenticator"}, {"original_string": "@Mock SessionLoginResource sessionLoginResource;", "modifier": "@Mock", "type": "SessionLoginResource", "declarator": "sessionLoginResource", "var_name": "sessionLoginResource"}, {"original_string": "@Mock ContainerRequestContext request;", "modifier": "@Mock", "type": "ContainerRequestContext", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock ContainerResponseContext response;", "modifier": "@Mock", "type": "ContainerResponseContext", "declarator": "response", "var_name": "response"}, {"original_string": "private CookieRenewingFilter filter;", "modifier": "private", "type": "CookieRenewingFilter", "declarator": "filter", "var_name": "filter"}, {"original_string": "private final Cookie cookie = new Cookie(SESSION_COOKIE, \"some cookie\");", "modifier": "private final", "type": "Cookie", "declarator": "cookie = new Cookie(SESSION_COOKIE, \"some cookie\")", "var_name": "cookie"}], "file": "server/src/test/java/keywhiz/service/filters/CookieRenewingFilterTest.java"}, "test_case": {"identifier": "doesNothingWhenResponseSetsSessionCookie", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void doesNothingWhenResponseSetsSessionCookie() throws Exception {\n    ImmutableMap<String, NewCookie> immutableResponseCookies =\n        ImmutableMap.of(SESSION_COOKIE, NewCookie.valueOf(cookie.getValue()));\n    when(response.getCookies()).thenReturn(immutableResponseCookies);\n\n    filter.filter(request, response);\n\n    assertThat(response.getCookies()).isSameAs(immutableResponseCookies);\n    assertThat(response.getHeaders()).doesNotContainKey(SET_COOKIE);\n  }", "signature": "void doesNothingWhenResponseSetsSessionCookie()", "full_signature": "@Test public void doesNothingWhenResponseSetsSessionCookie()", "class_method_signature": "CookieRenewingFilterTest.doesNothingWhenResponseSetsSessionCookie()", "testcase": true, "constructor": false, "invocations": ["of", "valueOf", "getValue", "thenReturn", "when", "getCookies", "filter", "isSameAs", "assertThat", "getCookies", "doesNotContainKey", "assertThat", "getHeaders"]}, "focal_class": {"identifier": "CookieRenewingFilter", "superclass": "", "interfaces": "implements ContainerResponseFilter", "fields": [{"original_string": "private final CookieConfig sessionCookieConfig;", "modifier": "private final", "type": "CookieConfig", "declarator": "sessionCookieConfig", "var_name": "sessionCookieConfig"}, {"original_string": "private final CookieAuthenticator authenticator;", "modifier": "private final", "type": "CookieAuthenticator", "declarator": "authenticator", "var_name": "authenticator"}, {"original_string": "private final SessionLoginResource sessionLoginResource;", "modifier": "private final", "type": "SessionLoginResource", "declarator": "sessionLoginResource", "var_name": "sessionLoginResource"}], "methods": [{"identifier": "CookieRenewingFilter", "parameters": "(@SessionCookie CookieConfig sessionCookieConfig,\n      CookieAuthenticator authenticator, SessionLoginResource sessionLoginResource)", "modifiers": "@Inject public", "return": "", "signature": " CookieRenewingFilter(@SessionCookie CookieConfig sessionCookieConfig,\n      CookieAuthenticator authenticator, SessionLoginResource sessionLoginResource)", "full_signature": "@Inject public  CookieRenewingFilter(@SessionCookie CookieConfig sessionCookieConfig,\n      CookieAuthenticator authenticator, SessionLoginResource sessionLoginResource)", "class_method_signature": "CookieRenewingFilter.CookieRenewingFilter(@SessionCookie CookieConfig sessionCookieConfig,\n      CookieAuthenticator authenticator, SessionLoginResource sessionLoginResource)", "testcase": false, "constructor": true}, {"identifier": "filter", "parameters": "(ContainerRequestContext request, ContainerResponseContext response)", "modifiers": "@Override public", "return": "void", "signature": "void filter(ContainerRequestContext request, ContainerResponseContext response)", "full_signature": "@Override public void filter(ContainerRequestContext request, ContainerResponseContext response)", "class_method_signature": "CookieRenewingFilter.filter(ContainerRequestContext request, ContainerResponseContext response)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/filters/CookieRenewingFilter.java"}, "focal_method": {"identifier": "filter", "parameters": "(ContainerRequestContext request, ContainerResponseContext response)", "modifiers": "@Override public", "return": "void", "body": "@Override public void filter(ContainerRequestContext request, ContainerResponseContext response)\n      throws IOException {\n    String sessionCookieName = sessionCookieConfig.getName();\n    // If the response will be setting a session cookie, don't overwrite it; just let it go.\n    if (response.getCookies().containsKey(sessionCookieName)) {\n      return;\n    }\n\n    // If the request doesn't have a session cookie, we're not going to renew one.\n    if (!request.getCookies().containsKey(sessionCookieName)) {\n      return;\n    }\n\n    Cookie requestCookie = request.getCookies().get(sessionCookieName);\n    Optional<User> optionalUser = authenticator.authenticate(requestCookie);\n    if (optionalUser.isPresent()) {\n      sessionLoginResource.cookiesForUser(optionalUser.get())\n          .forEach(c -> response.getHeaders().add(HttpHeaders.SET_COOKIE, c));\n    }\n  }", "signature": "void filter(ContainerRequestContext request, ContainerResponseContext response)", "full_signature": "@Override public void filter(ContainerRequestContext request, ContainerResponseContext response)", "class_method_signature": "CookieRenewingFilter.filter(ContainerRequestContext request, ContainerResponseContext response)", "testcase": false, "constructor": false, "invocations": ["getName", "containsKey", "getCookies", "containsKey", "getCookies", "get", "getCookies", "authenticate", "isPresent", "forEach", "cookiesForUser", "get", "add", "getHeaders"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}