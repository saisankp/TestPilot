{"test_class": {"identifier": "LayoutlibClassLoaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "layoutlib-loader/testSrc/com/android/tools/idea/layoutlib/LayoutlibClassLoaderTest.java"}, "test_case": {"identifier": "generateBuildFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void generateBuildFile() throws Exception {\n    Map<String, String> definedClasses = new HashMap<>();\n    LayoutlibClassLoader.generate(TestBuild.class, (name, classBytes) -> {\n      StringWriter writer = new StringWriter();\n      ClassReader reader = new ClassReader(classBytes);\n      TraceClassVisitor visitor = new TraceClassVisitor(new PrintWriter(writer));\n      reader.accept(visitor, 0);\n\n      definedClasses.put(name, simplify(writer.toString()));\n    });\n\n    assertEquals(3, definedClasses.size()); // Outer class + 2 inner classes\n    assertEquals(\"public class android/os/Build {\\n\" +\n                 \"  public static INNERCLASS android/os/Build$InnerClass2 android/os/Build InnerClass2\\n\" +\n                 \"  public static INNERCLASS android/os/Build$InnerClass android/os/Build InnerClass\\n\" +\n                 \"  public final static Ljava/lang/String; TEST_FIELD = \\\"TestValue\\\"\\n\" +\n                 \"  public <init>()V\\n\" +\n                 \"  private static privateMethod()Ljava/lang/String;\\n\" +\n                 \"  public static getSerial()Ljava/lang/String;\\n\" +\n                 \"}\",\n                 definedClasses.get(\"android.os.Build\"));\n\n    assertEquals(\"public class android/os/Build$InnerClass {\\n\" +\n                 \"  public static INNERCLASS android/os/Build$InnerClass android/os/Build InnerClass\\n\" +\n                 \"  public final static Ljava/lang/String; TEST_INNER_FIELD = \\\"TestInnerValue\\\"\\n\" +\n                 \"  public final static I INNER_VALUE = 1\\n\" +\n                 \"  public <init>()V\\n\" +\n                 \"}\",\n                 definedClasses.get(\"android.os.Build$InnerClass\"));\n\n    assertEquals(\"public class android/os/Build$InnerClass2 {\\n\" +\n                 \"  public static INNERCLASS android/os/Build$InnerClass2 android/os/Build InnerClass2\\n\" +\n                 \"  public final static Ljava/lang/String; TEST_INNER_FIELD2\\n\" +\n                 \"  public <init>()V\\n\" +\n                 \"  static <clinit>()V\\n\" +\n                 \"}\",\n                 definedClasses.get(\"android.os.Build$InnerClass2\"));\n  }", "signature": "void generateBuildFile()", "full_signature": "@Test public void generateBuildFile()", "class_method_signature": "LayoutlibClassLoaderTest.generateBuildFile()", "testcase": true, "constructor": false, "invocations": ["generate", "accept", "put", "simplify", "toString", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "LayoutlibClassLoader", "superclass": "extends ClassLoader", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = Logger.getInstance(LayoutlibClassLoader.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getInstance(LayoutlibClassLoader.class)", "var_name": "LOG"}], "methods": [{"identifier": "LayoutlibClassLoader", "parameters": "(@NotNull ClassLoader parent)", "modifiers": "", "return": "", "signature": " LayoutlibClassLoader(@NotNull ClassLoader parent)", "full_signature": "  LayoutlibClassLoader(@NotNull ClassLoader parent)", "class_method_signature": "LayoutlibClassLoader.LayoutlibClassLoader(@NotNull ClassLoader parent)", "testcase": false, "constructor": true}, {"identifier": "toBinaryClassName", "parameters": "(@NotNull String name)", "modifiers": "@NotNull private static", "return": "String", "signature": "String toBinaryClassName(@NotNull String name)", "full_signature": "@NotNull private static String toBinaryClassName(@NotNull String name)", "class_method_signature": "LayoutlibClassLoader.toBinaryClassName(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "toClassName", "parameters": "(@NotNull String name)", "modifiers": "@NotNull private static", "return": "String", "signature": "String toClassName(@NotNull String name)", "full_signature": "@NotNull private static String toClassName(@NotNull String name)", "class_method_signature": "LayoutlibClassLoader.toClassName(@NotNull String name)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(@NotNull Class<?> originalBuildClass, @NotNull BiConsumer<String, byte[]> defineClass)", "modifiers": "@VisibleForTesting static", "return": "void", "signature": "void generate(@NotNull Class<?> originalBuildClass, @NotNull BiConsumer<String, byte[]> defineClass)", "full_signature": "@VisibleForTesting static void generate(@NotNull Class<?> originalBuildClass, @NotNull BiConsumer<String, byte[]> defineClass)", "class_method_signature": "LayoutlibClassLoader.generate(@NotNull Class<?> originalBuildClass, @NotNull BiConsumer<String, byte[]> defineClass)", "testcase": false, "constructor": false}], "file": "layoutlib-loader/src/com/android/tools/idea/layoutlib/LayoutlibClassLoader.java"}, "focal_method": {"identifier": "generate", "parameters": "(@NotNull Class<?> originalBuildClass, @NotNull BiConsumer<String, byte[]> defineClass)", "modifiers": "@VisibleForTesting static", "return": "void", "body": "@VisibleForTesting\n  static void generate(@NotNull Class<?> originalBuildClass, @NotNull BiConsumer<String, byte[]> defineClass) {\n    ClassLoader loader = originalBuildClass.getClassLoader();\n    String originalBuildClassName = originalBuildClass.getName();\n    String originalBuildBinaryClassName = toBinaryClassName(originalBuildClassName);\n    Deque<String> pendingClasses = new LinkedList<>();\n    pendingClasses.push(originalBuildClassName);\n\n    Remapper remapper = new Remapper() {\n      @Override\n      public String map(String typeName) {\n        if (typeName.startsWith(originalBuildBinaryClassName)) {\n          return \"android/os/Build\" + StringUtil.trimStart(typeName, originalBuildBinaryClassName);\n        }\n\n        return typeName;\n      }\n    };\n\n    while (!pendingClasses.isEmpty()) {\n      String name = pendingClasses.pop();\n\n      String newName = \"android.os.Build\" + StringUtil.trimStart(name, originalBuildClassName);\n      String binaryName = toBinaryClassName(name);\n\n      try (InputStream is = loader.getResourceAsStream(binaryName + \".class\")) {\n        ClassWriter writer = new ClassWriter(0);\n        ClassReader reader = new ClassReader(is);\n        ClassRemapper classRemapper = new ClassRemapper(writer, remapper) {\n          @Override\n          public void visitInnerClass(String name, String outerName, String innerName, int access) {\n            if (outerName != null && outerName.startsWith(binaryName)) {\n              pendingClasses.push(toClassName(name));\n            }\n            super.visitInnerClass(name, outerName, innerName, access);\n          }\n        };\n        reader.accept(classRemapper, 0);\n        defineClass.accept(newName, writer.toByteArray());\n      }\n      catch (IOException e) {\n        LOG.warn(\"Unable to define android.os.Build\", e);\n      }\n    }\n  }", "signature": "void generate(@NotNull Class<?> originalBuildClass, @NotNull BiConsumer<String, byte[]> defineClass)", "full_signature": "@VisibleForTesting static void generate(@NotNull Class<?> originalBuildClass, @NotNull BiConsumer<String, byte[]> defineClass)", "class_method_signature": "LayoutlibClassLoader.generate(@NotNull Class<?> originalBuildClass, @NotNull BiConsumer<String, byte[]> defineClass)", "testcase": false, "constructor": false, "invocations": ["getClassLoader", "getName", "toBinaryClassName", "push", "startsWith", "trimStart", "isEmpty", "pop", "trimStart", "toBinaryClassName", "getResourceAsStream", "startsWith", "push", "toClassName", "visitInnerClass", "accept", "accept", "toByteArray", "warn"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}