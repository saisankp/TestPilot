{"test_class": {"identifier": "SyncReceiverLogAnalyzerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(FileLoaderTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(FileLoaderTest.class)", "var_name": "LOGGER"}, {"original_string": "private static final String SG_NAME = \"root.sg\";", "modifier": "private static final", "type": "String", "declarator": "SG_NAME = \"root.sg\"", "var_name": "SG_NAME"}, {"original_string": "private String dataDir;", "modifier": "private", "type": "String", "declarator": "dataDir", "var_name": "dataDir"}, {"original_string": "private IFileLoader fileLoader;", "modifier": "private", "type": "IFileLoader", "declarator": "fileLoader", "var_name": "fileLoader"}, {"original_string": "private ISyncReceiverLogAnalyzer logAnalyze;", "modifier": "private", "type": "ISyncReceiverLogAnalyzer", "declarator": "logAnalyze", "var_name": "logAnalyze"}, {"original_string": "private ISyncReceiverLogger receiverLogger;", "modifier": "private", "type": "ISyncReceiverLogger", "declarator": "receiverLogger", "var_name": "receiverLogger"}], "file": "server/src/test/java/org/apache/iotdb/db/sync/receiver/recover/SyncReceiverLogAnalyzerTest.java"}, "test_case": {"identifier": "recover", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void recover()\n      throws IOException, StorageEngineException, InterruptedException, IllegalPathException {\n    receiverLogger = new SyncReceiverLogger(\n        new File(getReceiverFolderFile(), SyncConstant.SYNC_LOG_NAME));\n    fileLoader = FileLoader.createFileLoader(getReceiverFolderFile());\n    Map<String, Set<File>> allFileList = new HashMap<>();\n    Map<String, Set<File>> correctSequenceLoadedFileMap = new HashMap<>();\n\n    // add some new tsfiles\n    Random r = new Random(0);\n    receiverLogger.startSyncTsFiles();\n    Set<String> toBeSyncedFiles = new HashSet<>();\n    for (int i = 0; i < 3; i++) {\n      for (int j = 0; j < 10; j++) {\n        allFileList.putIfAbsent(SG_NAME + i, new HashSet<>());\n        correctSequenceLoadedFileMap.putIfAbsent(SG_NAME + i, new HashSet<>());\n        String rand = String.valueOf(r.nextInt(10000) + i * j);\n        String fileName =\n            getSnapshotFolder() + File.separator + SG_NAME + i + File.separator + System\n                .currentTimeMillis() + IoTDBConstant.FILE_NAME_SEPARATOR + rand\n                + IoTDBConstant.FILE_NAME_SEPARATOR + \"0.tsfile\";\n        Thread.sleep(1);\n        File syncFile = new File(fileName);\n        receiverLogger\n            .finishSyncTsfile(syncFile);\n        toBeSyncedFiles.add(syncFile.getAbsolutePath());\n        File dataFile = new File(\n            DirectoryManager.getInstance().getNextFolderForSequenceFile(),\n            syncFile.getParentFile().getName() + File.separatorChar\n                + syncFile.getName());\n        correctSequenceLoadedFileMap.get(SG_NAME + i).add(dataFile);\n        allFileList.get(SG_NAME + i).add(syncFile);\n        if (!syncFile.getParentFile().exists()) {\n          syncFile.getParentFile().mkdirs();\n        }\n        if (!syncFile.exists() && !syncFile.createNewFile()) {\n          LOGGER.error(\"Can not create new file {}\", syncFile.getPath());\n        }\n        if (!new File(syncFile.getAbsolutePath() + TsFileResource.RESOURCE_SUFFIX).exists()\n            && !new File(syncFile.getAbsolutePath() + TsFileResource.RESOURCE_SUFFIX)\n            .createNewFile()) {\n          LOGGER.error(\"Can not create new file {}\", syncFile.getPath());\n        }\n        TsFileResource tsFileResource = new TsFileResource(syncFile);\n        tsFileResource.putStartTime(String.valueOf(i), (long) j * 10);\n        tsFileResource.putEndTime(String.valueOf(i), (long) j * 10 + 5);\n        tsFileResource.serialize();\n      }\n    }\n\n    for (int i = 0; i < 3; i++) {\n      StorageGroupProcessor processor = StorageEngine.getInstance().getProcessor(new PartialPath(SG_NAME + i));\n      assertTrue(processor.getSequenceFileTreeSet().isEmpty());\n      assertTrue(processor.getUnSequenceFileList().isEmpty());\n    }\n\n    assertTrue(getReceiverFolderFile().exists());\n    for (Set<File> set : allFileList.values()) {\n      for (File newTsFile : set) {\n        if (!newTsFile.getName().endsWith(TsFileResource.RESOURCE_SUFFIX)) {\n          fileLoader.addTsfile(newTsFile);\n        }\n      }\n    }\n\n    receiverLogger.close();\n    assertTrue(new File(getReceiverFolderFile(), SyncConstant.LOAD_LOG_NAME).exists());\n    assertTrue(new File(getReceiverFolderFile(), SyncConstant.SYNC_LOG_NAME).exists());\n    assertTrue(\n        FileLoaderManager.getInstance().containsFileLoader(getReceiverFolderFile().getName()));\n    int mode = 0;\n    Set<String> toBeSyncedFilesTest = new HashSet<>();\n    try (BufferedReader br = new BufferedReader(\n        new FileReader(new File(getReceiverFolderFile(), SyncConstant.SYNC_LOG_NAME)))) {\n      String line;\n      while ((line = br.readLine()) != null) {\n        if (line.equals(SyncReceiverLogger.SYNC_DELETED_FILE_NAME_START)) {\n          mode = -1;\n        } else if (line.equals(SyncReceiverLogger.SYNC_TSFILE_START)) {\n          mode = 1;\n        } else {\n          if (mode == 1) {\n            toBeSyncedFilesTest.add(line);\n          }\n        }\n      }\n    }\n    assertEquals(toBeSyncedFilesTest.size(), toBeSyncedFiles.size());\n    assertTrue(toBeSyncedFilesTest.containsAll(toBeSyncedFiles));\n\n    logAnalyze.recover(getReceiverFolderFile().getName());\n\n    try {\n      long waitTime = 0;\n      while (FileLoaderManager.getInstance()\n          .containsFileLoader(getReceiverFolderFile().getName())) {\n        Thread.sleep(100);\n        waitTime += 100;\n        LOGGER.info(\"Has waited for loading new tsfiles {}ms\", waitTime);\n      }\n    } catch (InterruptedException e) {\n      LOGGER.error(\"Fail to wait for loading new tsfiles\", e);\n      Thread.currentThread().interrupt();\n      throw e;\n    }\n\n    assertFalse(new File(getReceiverFolderFile(), SyncConstant.LOAD_LOG_NAME).exists());\n    assertFalse(new File(getReceiverFolderFile(), SyncConstant.SYNC_LOG_NAME).exists());\n  }", "signature": "void recover()", "full_signature": "@Test public void recover()", "class_method_signature": "SyncReceiverLogAnalyzerTest.recover()", "testcase": true, "constructor": false, "invocations": ["getReceiverFolderFile", "createFileLoader", "getReceiverFolderFile", "startSyncTsFiles", "putIfAbsent", "putIfAbsent", "valueOf", "nextInt", "getSnapshotFolder", "currentTimeMillis", "sleep", "finishSyncTsfile", "add", "getAbsolutePath", "getNextFolderForSequenceFile", "getInstance", "getName", "getParentFile", "getName", "add", "get", "add", "get", "exists", "getParentFile", "mkdirs", "getParentFile", "exists", "createNewFile", "error", "getPath", "exists", "getAbsolutePath", "createNewFile", "getAbsolutePath", "error", "getPath", "putStartTime", "valueOf", "putEndTime", "valueOf", "serialize", "getProcessor", "getInstance", "assertTrue", "isEmpty", "getSequenceFileTreeSet", "assertTrue", "isEmpty", "getUnSequenceFileList", "assertTrue", "exists", "getReceiverFolderFile", "values", "endsWith", "getName", "addTsfile", "close", "assertTrue", "exists", "getReceiverFolderFile", "assertTrue", "exists", "getReceiverFolderFile", "assertTrue", "containsFileLoader", "getInstance", "getName", "getReceiverFolderFile", "getReceiverFolderFile", "readLine", "equals", "equals", "add", "assertEquals", "size", "size", "assertTrue", "containsAll", "recover", "getName", "getReceiverFolderFile", "containsFileLoader", "getInstance", "getName", "getReceiverFolderFile", "sleep", "info", "error", "interrupt", "currentThread", "assertFalse", "exists", "getReceiverFolderFile", "assertFalse", "exists", "getReceiverFolderFile"]}, "focal_class": {"identifier": "SyncReceiverLogAnalyzer", "superclass": "", "interfaces": "implements ISyncReceiverLogAnalyzer", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SyncReceiverLogAnalyzer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SyncReceiverLogAnalyzer.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "SyncReceiverLogAnalyzer", "parameters": "()", "modifiers": "private", "return": "", "signature": " SyncReceiverLogAnalyzer()", "full_signature": "private  SyncReceiverLogAnalyzer()", "class_method_signature": "SyncReceiverLogAnalyzer.SyncReceiverLogAnalyzer()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "SyncReceiverLogAnalyzer", "signature": "SyncReceiverLogAnalyzer getInstance()", "full_signature": "public static SyncReceiverLogAnalyzer getInstance()", "class_method_signature": "SyncReceiverLogAnalyzer.getInstance()", "testcase": false, "constructor": false}, {"identifier": "recoverAll", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void recoverAll()", "full_signature": "@Override public void recoverAll()", "class_method_signature": "SyncReceiverLogAnalyzer.recoverAll()", "testcase": false, "constructor": false}, {"identifier": "recover", "parameters": "(File senderFolder)", "modifiers": "private", "return": "boolean", "signature": "boolean recover(File senderFolder)", "full_signature": "private boolean recover(File senderFolder)", "class_method_signature": "SyncReceiverLogAnalyzer.recover(File senderFolder)", "testcase": false, "constructor": false}, {"identifier": "recover", "parameters": "(String senderName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean recover(String senderName)", "full_signature": "@Override public boolean recover(String senderName)", "class_method_signature": "SyncReceiverLogAnalyzer.recover(String senderName)", "testcase": false, "constructor": false}, {"identifier": "scanLogger", "parameters": "(IFileLoader loader, File syncLog, File loadLog)", "modifiers": "@Override public", "return": "void", "signature": "void scanLogger(IFileLoader loader, File syncLog, File loadLog)", "full_signature": "@Override public void scanLogger(IFileLoader loader, File syncLog, File loadLog)", "class_method_signature": "SyncReceiverLogAnalyzer.scanLogger(IFileLoader loader, File syncLog, File loadLog)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/iotdb/db/sync/receiver/recover/SyncReceiverLogAnalyzer.java"}, "focal_method": {"identifier": "recover", "parameters": "(File senderFolder)", "modifiers": "private", "return": "boolean", "body": "private boolean recover(File senderFolder) throws IOException {\n    // check the state\n    if (!new File(senderFolder, SyncConstant.SYNC_LOG_NAME).exists()) {\n      new File(senderFolder, SyncConstant.LOAD_LOG_NAME).delete();\n      FileUtils.deleteDirectory(new File(senderFolder, SyncConstant.RECEIVER_DATA_FOLDER_NAME));\n      return true;\n    }\n    if (FileLoaderManager.getInstance().containsFileLoader(senderFolder.getName())) {\n      FileLoaderManager.getInstance().getFileLoader(senderFolder.getName()).endSync();\n      try {\n        Thread.sleep(FileLoader.WAIT_TIME << 1);\n      } catch (InterruptedException e) {\n        LOGGER.error(\"Thread is interrupted from waiting for ending sync in recovery.\");\n        Thread.currentThread().interrupt();\n      }\n    } else {\n      scanLogger(FileLoader.createFileLoader(senderFolder),\n          new File(senderFolder, SyncConstant.SYNC_LOG_NAME),\n          new File(senderFolder, SyncConstant.LOAD_LOG_NAME));\n    }\n    return !FileLoaderManager.getInstance().containsFileLoader(senderFolder.getName());\n  }", "signature": "boolean recover(File senderFolder)", "full_signature": "private boolean recover(File senderFolder)", "class_method_signature": "SyncReceiverLogAnalyzer.recover(File senderFolder)", "testcase": false, "constructor": false, "invocations": ["exists", "delete", "deleteDirectory", "containsFileLoader", "getInstance", "getName", "endSync", "getFileLoader", "getInstance", "getName", "sleep", "error", "interrupt", "currentThread", "scanLogger", "createFileLoader", "containsFileLoader", "getInstance", "getName"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}