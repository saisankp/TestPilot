{"test_class": {"identifier": "SchemaAnalysisTest", "superclass": "extends DataSetBaseTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    FormatAnalysis formatAnalysis;", "modifier": "@Autowired", "type": "FormatAnalysis", "declarator": "formatAnalysis", "var_name": "formatAnalysis"}, {"original_string": "@Autowired\n    SchemaAnalysis schemaAnalysis;", "modifier": "@Autowired", "type": "SchemaAnalysis", "declarator": "schemaAnalysis", "var_name": "schemaAnalysis"}, {"original_string": "@Autowired\n    ContentAnalysis contentAnalysis;", "modifier": "@Autowired", "type": "ContentAnalysis", "declarator": "contentAnalysis", "var_name": "contentAnalysis"}, {"original_string": "private Random random = new Random();", "modifier": "private", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}], "file": "dataprep-dataset/src/test/java/org/talend/dataprep/dataset/service/analysis/synchronous/SchemaAnalysisTest.java"}, "test_case": {"identifier": "testNoDataSetFound", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoDataSetFound() {\n        schemaAnalysis.analyze(\"1234\");\n        assertThat(dataSetMetadataRepository.get(\"1234\"), nullValue());\n    }", "signature": "void testNoDataSetFound()", "full_signature": "@Test public void testNoDataSetFound()", "class_method_signature": "SchemaAnalysisTest.testNoDataSetFound()", "testcase": true, "constructor": false, "invocations": ["analyze", "assertThat", "get", "nullValue"]}, "focal_class": {"identifier": "SchemaAnalysis", "superclass": "", "interfaces": "implements SynchronousDataSetAnalyzer", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SchemaAnalysis.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SchemaAnalysis.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    DataSetMetadataRepository repository;", "modifier": "@Autowired", "type": "DataSetMetadataRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Autowired\n    ContentStoreRouter store;", "modifier": "@Autowired", "type": "ContentStoreRouter", "declarator": "store", "var_name": "store"}, {"original_string": "@Autowired\n    StatisticsAdapter adapter;", "modifier": "@Autowired", "type": "StatisticsAdapter", "declarator": "adapter", "var_name": "adapter"}, {"original_string": "@Autowired\n    AnalyzerService analyzerService;", "modifier": "@Autowired", "type": "AnalyzerService", "declarator": "analyzerService", "var_name": "analyzerService"}], "methods": [{"identifier": "analyze", "parameters": "(String dataSetId)", "modifiers": "@Override public", "return": "void", "signature": "void analyze(String dataSetId)", "full_signature": "@Override public void analyze(String dataSetId)", "class_method_signature": "SchemaAnalysis.analyze(String dataSetId)", "testcase": false, "constructor": false}, {"identifier": "order", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int order()", "full_signature": "@Override public int order()", "class_method_signature": "SchemaAnalysis.order()", "testcase": false, "constructor": false}], "file": "dataprep-dataset/src/main/java/org/talend/dataprep/dataset/service/analysis/synchronous/SchemaAnalysis.java"}, "focal_method": {"identifier": "analyze", "parameters": "(String dataSetId)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void analyze(String dataSetId) {\n        if (StringUtils.isEmpty(dataSetId)) {\n            throw new IllegalArgumentException(\"Data set id cannot be null or empty.\");\n        }\n        DistributedLock datasetLock = repository.createDatasetMetadataLock(dataSetId);\n        datasetLock.lock();\n        try {\n            DataSetMetadata metadata = repository.get(dataSetId);\n            if (metadata == null) {\n                LOGGER.info(\"Unable to analyze schema of data set #{}: seems to be removed.\", dataSetId);\n                return;\n            }\n            // Schema analysis\n            try (Stream<DataSetRow> stream = store.stream(metadata)) {\n                LOGGER.info(\"Analyzing schema in dataset #{}...\", dataSetId);\n                // Configure analyzers\n                final List<ColumnMetadata> columns = metadata.getRowMetadata().getColumns();\n                try (Analyzer<Analyzers.Result> analyzer = analyzerService.schemaAnalysis(columns)) {\n                    // Determine schema for the content.\n                    stream.limit(100).map(row -> row.toArray(DataSetRow.SKIP_TDP_ID)).forEach(analyzer::analyze);\n\n                    // Find the best suitable type\n                    adapter.adapt(columns, analyzer.getResult());\n                    LOGGER.info(\"Analyzed schema in dataset #{}.\", dataSetId);\n                    metadata.getLifecycle().schemaAnalyzed(true);\n\n                    DataSetMetadata savedDataSetMetadata = repository.get(dataSetId);\n                    // in order to check that the dataset was not deleted during analysis\n                    if (savedDataSetMetadata != null) {\n                        repository.save(metadata);\n                    } else {\n                        LOGGER.info(\"Data set #{} no longer exists.\", dataSetId); //$NON-NLS-1$\n                    }\n                }\n            } catch (Exception e) {\n                LOGGER.error(\"Unable to analyse schema for dataset \" + dataSetId + \".\", e);\n                TDPException.rethrowOrWrap(e, UNABLE_TO_ANALYZE_COLUMN_TYPES);\n            }\n        } finally {\n            datasetLock.unlock();\n        }\n    }", "signature": "void analyze(String dataSetId)", "full_signature": "@Override public void analyze(String dataSetId)", "class_method_signature": "SchemaAnalysis.analyze(String dataSetId)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "createDatasetMetadataLock", "lock", "get", "info", "stream", "info", "getColumns", "getRowMetadata", "schemaAnalysis", "forEach", "map", "limit", "toArray", "adapt", "getResult", "info", "schemaAnalyzed", "getLifecycle", "get", "save", "info", "error", "rethrowOrWrap", "unlock"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}