{"test_class": {"identifier": "JobExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private JobExecutor jobExecutor;", "modifier": "private", "type": "JobExecutor", "declarator": "jobExecutor", "var_name": "jobExecutor"}], "file": "data/src/test/java/com/remotecraft/app/data/executor/JobExecutorTest.java"}, "test_case": {"identifier": "shouldThrowExceptionWhenGivenNullRunnable", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void shouldThrowExceptionWhenGivenNullRunnable() throws Exception {\n    jobExecutor.execute(null);\n  }", "signature": "void shouldThrowExceptionWhenGivenNullRunnable()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void shouldThrowExceptionWhenGivenNullRunnable()", "class_method_signature": "JobExecutorTest.shouldThrowExceptionWhenGivenNullRunnable()", "testcase": true, "constructor": false, "invocations": ["execute"]}, "focal_class": {"identifier": "JobExecutor", "superclass": "", "interfaces": "implements ThreadExecutor", "fields": [{"original_string": "private static final int INITIAL_POOL_SIZE = 3;", "modifier": "private static final", "type": "int", "declarator": "INITIAL_POOL_SIZE = 3", "var_name": "INITIAL_POOL_SIZE"}, {"original_string": "private static final int MAX_POOL_SIZE = 5;", "modifier": "private static final", "type": "int", "declarator": "MAX_POOL_SIZE = 5", "var_name": "MAX_POOL_SIZE"}, {"original_string": "private static final int KEEP_ALIVE_TIME = 10;", "modifier": "private static final", "type": "int", "declarator": "KEEP_ALIVE_TIME = 10", "var_name": "KEEP_ALIVE_TIME"}, {"original_string": "private static final TimeUnit KEEP_ALIVE_TIME_UNIT = TimeUnit.SECONDS;", "modifier": "private static final", "type": "TimeUnit", "declarator": "KEEP_ALIVE_TIME_UNIT = TimeUnit.SECONDS", "var_name": "KEEP_ALIVE_TIME_UNIT"}, {"original_string": "private final BlockingQueue<Runnable> workQueue;", "modifier": "private final", "type": "BlockingQueue<Runnable>", "declarator": "workQueue", "var_name": "workQueue"}, {"original_string": "private final ThreadPoolExecutor threadPoolExecutor;", "modifier": "private final", "type": "ThreadPoolExecutor", "declarator": "threadPoolExecutor", "var_name": "threadPoolExecutor"}, {"original_string": "private final ThreadFactory threadFactory;", "modifier": "private final", "type": "ThreadFactory", "declarator": "threadFactory", "var_name": "threadFactory"}], "methods": [{"identifier": "JobExecutor", "parameters": "()", "modifiers": "@Inject public", "return": "", "signature": " JobExecutor()", "full_signature": "@Inject public  JobExecutor()", "class_method_signature": "JobExecutor.JobExecutor()", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(Runnable runnable)", "modifiers": "@Override public", "return": "void", "signature": "void execute(Runnable runnable)", "full_signature": "@Override public void execute(Runnable runnable)", "class_method_signature": "JobExecutor.execute(Runnable runnable)", "testcase": false, "constructor": false}], "file": "data/src/main/java/com/remotecraft/app/data/executor/JobExecutor.java"}, "focal_method": {"identifier": "execute", "parameters": "(Runnable runnable)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void execute(Runnable runnable) {\n    if (runnable == null) {\n      throw new IllegalArgumentException(\"Runnable to execute cannot be null.\");\n    }\n\n    this.threadPoolExecutor.execute(runnable);\n  }", "signature": "void execute(Runnable runnable)", "full_signature": "@Override public void execute(Runnable runnable)", "class_method_signature": "JobExecutor.execute(Runnable runnable)", "testcase": false, "constructor": false, "invocations": ["execute"]}, "repository": {"repo_id": 66076162, "url": "https://github.com/RemotecraftProject/RemotecraftApp", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 2502, "license": "licensed"}}