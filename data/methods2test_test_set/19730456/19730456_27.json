{"test_class": {"identifier": "MinerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Map<ByteArrayWrapper, Pair<Transaction, Long>> submittedTxs = Collections.synchronizedMap(\n            new HashMap<ByteArrayWrapper, Pair<Transaction, Long>>());", "modifier": "", "type": "Map<ByteArrayWrapper, Pair<Transaction, Long>>", "declarator": "submittedTxs = Collections.synchronizedMap(\n            new HashMap<ByteArrayWrapper, Pair<Transaction, Long>>())", "var_name": "submittedTxs"}], "file": "ethereumj-core/src/test/java/org/ethereum/mine/MinerTest.java"}, "test_case": {"identifier": "startMiningTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void startMiningTest() throws FileNotFoundException, InterruptedException {\n        SysPropConfig1.props.overrideParams(ConfigFactory.parseString(\n                \"peer.listen.port = 30335 \\n\" +\n                        \"peer.privateKey = 6ef8da380c27cea8fdf7448340ea99e8e2268fc2950d79ed47cbf6f85dc977ec \\n\" +\n                        \"peer.networkId = 555 \\n\" +\n                        \"peer.active = [{ url = \\\"enode://b23b3b9f38f1d314b27e63c63f3e45a6ea5f82c83f282e2d38f2f01c22165e897656fe2e5f9f18616b81f41cbcf2e9100fc9f8dad099574f3d84cf9623de2fc9@localhost:20301\\\" }] \\n\" +\n                        \"sync.enabled = true \\n\" +\n                        \"genesis = genesis-harder.json \\n\" +\n//                        \"genesis = frontier.json \\n\" +\n                        \"database.dir = testDB-2 \\n\" +\n                        \"mine.extraDataHex = cccccccccccccccccccc \\n\" +\n                        \"mine.cpuMineThreads = 2\"));\n\n//        SysPropConfig2.props.overrideParams(ConfigFactory.parseString(\n//                \"peer.listen.port = 30336 \\n\" +\n//                        \"peer.privateKey = 3ec771c31cac8c0dba77a69e503765701d3c2bb62435888d4ffa38fed60c445c \\n\" +\n//                        \"peer.networkId = 555 \\n\" +\n//                        \"peer.active = [{ url = \\\"enode://b23b3b9f38f1d314b27e63c63f3e45a6ea5f82c83f282e2d38f2f01c22165e897656fe2e5f9f18616b81f41cbcf2e9100fc9f8dad099574f3d84cf9623de2fc9@localhost:20301\\\" }] \\n\" +\n//                        \"sync.enabled = true \\n\" +\n//                        \"genesis = genesis-light.json \\n\" +\n////                        \"genesis = frontier.json \\n\" +\n//                        \"database.dir = testDB-1 \\n\"));\n\n        Ethereum ethereum1 = EthereumFactory.createEthereum(SysPropConfig1.props, SysPropConfig1.class);\n//        Ethereum ethereum2 = EthereumFactory.createEthereum(SysPropConfig2.props, SysPropConfig2.class);\n\n        final CountDownLatch semaphore = new CountDownLatch(1);\n        ethereum1.addListener(new EthereumListenerAdapter() {\n            @Override\n            public void onBlock(Block block, List<TransactionReceipt> receipts) {\n                System.out.println(\"=== New block: \" + blockInfo(block));\n            }\n\n            @Override\n            public void onSyncDone(SyncState state) {\n                semaphore.countDown();\n            }\n        });\n\n//        ethereum2.addListener(new EthereumListenerAdapter() {\n//            @Override\n//            public void onBlock(Block block, List<TransactionReceipt> receipts) {\n//                System.err.println(\"=== New block: \" + block);\n//            }\n//\n//            @Override\n//            public void onPendingStateChanged(List<Transaction> transactions) {\n//                System.err.println(\"=== Tx: \" + transactions);\n//            }\n//        });\n\n        System.out.println(\"=== Waiting for sync ...\");\n        semaphore.await(600, TimeUnit.SECONDS);\n        System.out.println(\"=== Sync done.\");\n\n\n        BlockMiner blockMiner = ethereum1.getBlockMiner();\n        blockMiner.addListener(new MinerListener() {\n            @Override\n            public void miningStarted() {\n                System.out.println(\"=== MinerTest.miningStarted\");\n            }\n\n            @Override\n            public void miningStopped() {\n                System.out.println(\"=== MinerTest.miningStopped\");\n            }\n\n            @Override\n            public void blockMiningStarted(Block block) {\n                System.out.println(\"=== MinerTest.blockMiningStarted \" + blockInfo(block));\n            }\n\n            @Override\n            public void blockMined(Block block) {\n//                boolean validate = Ethash.getForBlock(block.getNumber()).validate(block.getHeader());\n                System.out.println(\"=== MinerTest.blockMined \" + blockInfo(block));\n//                System.out.println(\"=== MinerTest.blockMined: \" + validate);\n            }\n\n            @Override\n            public void blockMiningCanceled(Block block) {\n                System.out.println(\"=== MinerTest.blockMiningCanceled \" + blockInfo(block));\n            }\n        });\n        Ethash.fileCacheEnabled = true;\n        blockMiner.setFullMining(true);\n        blockMiner.startMining();\n\n//        System.out.println(\"======= Waiting for block #4\");\n//        semaphore.await(60, TimeUnit.SECONDS);\n//        if(semaphore.getCount() > 0) {\n//            throw new RuntimeException(\"4 blocks were not imported.\");\n//        }\n//\n//        System.out.println(\"======= Sending forked block without parent...\");\n\n\n        ECKey senderKey = ECKey.fromPrivate(Hex.decode(\"3ec771c31cac8c0dba77a69e503765701d3c2bb62435888d4ffa38fed60c445c\"));\n        byte[] receiverAddr = Hex.decode(\"31e2e1ed11951c7091dfba62cd4b7145e947219c\");\n\n        for (int i = ethereum1.getRepository().getNonce(senderKey.getAddress()).intValue(), j = 0; j < 20000; i++, j++) {\n            {\n                Transaction tx = new Transaction(ByteUtil.intToBytesNoLeadZeroes(i),\n                        ByteUtil.longToBytesNoLeadZeroes(50_000_000_000L), ByteUtil.longToBytesNoLeadZeroes(0xfffff),\n                        receiverAddr, new byte[]{77}, new byte[0]);\n                tx.sign(senderKey);\n                System.out.println(\"=== Submitting tx: \" + tx);\n                ethereum1.submitTransaction(tx);\n\n                submittedTxs.put(new ByteArrayWrapper(tx.getHash()), Pair.of(tx, System.currentTimeMillis()));\n            }\n            Thread.sleep(5000);\n        }\n\n        Thread.sleep(1000000000);\n\n        ethereum1.close();\n\n        System.out.println(\"Passed.\");\n\n    }", "signature": "void startMiningTest()", "full_signature": "@Test public void startMiningTest()", "class_method_signature": "MinerTest.startMiningTest()", "testcase": true, "constructor": false, "invocations": ["overrideParams", "parseString", "createEthereum", "addListener", "println", "blockInfo", "countDown", "println", "await", "println", "getBlockMiner", "addListener", "println", "println", "println", "blockInfo", "println", "blockInfo", "println", "blockInfo", "setFullMining", "startMining", "fromPrivate", "decode", "decode", "intValue", "getNonce", "getRepository", "getAddress", "intToBytesNoLeadZeroes", "longToBytesNoLeadZeroes", "longToBytesNoLeadZeroes", "sign", "println", "submitTransaction", "put", "getHash", "of", "currentTimeMillis", "sleep", "sleep", "close", "println"]}, "focal_class": {"identifier": "Miner", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(\"miner\");", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(\"miner\")", "var_name": "logger"}, {"original_string": "private boolean stop = false;", "modifier": "private", "type": "boolean", "declarator": "stop = false", "var_name": "stop"}], "methods": [{"identifier": "mine", "parameters": "(Block newBlock, byte[] difficulty)", "modifiers": "public", "return": "boolean", "signature": "boolean mine(Block newBlock, byte[] difficulty)", "full_signature": "public boolean mine(Block newBlock, byte[] difficulty)", "class_method_signature": "Miner.mine(Block newBlock, byte[] difficulty)", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "Miner.stop()", "testcase": false, "constructor": false}, {"identifier": "sleep", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void sleep()", "full_signature": "private void sleep()", "class_method_signature": "Miner.sleep()", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/mine/Miner.java"}, "focal_method": {"identifier": "sleep", "parameters": "()", "modifiers": "private", "return": "void", "body": "private void sleep() {\n        try {\n//            Thread.sleep(1);\n            Thread.sleep(10);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }", "signature": "void sleep()", "full_signature": "private void sleep()", "class_method_signature": "Miner.sleep()", "testcase": false, "constructor": false, "invocations": ["sleep", "printStackTrace"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}