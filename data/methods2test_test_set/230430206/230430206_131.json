{"test_class": {"identifier": "TxnLogToolkitTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File testData = new File(\n            System.getProperty(\"test.data.dir\", \"src/test/resources/data\"));", "modifier": "private static final", "type": "File", "declarator": "testData = new File(\n            System.getProperty(\"test.data.dir\", \"src/test/resources/data\"))", "var_name": "testData"}, {"original_string": "private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();", "modifier": "private final", "type": "ByteArrayOutputStream", "declarator": "outContent = new ByteArrayOutputStream()", "var_name": "outContent"}, {"original_string": "private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();", "modifier": "private final", "type": "ByteArrayOutputStream", "declarator": "errContent = new ByteArrayOutputStream()", "var_name": "errContent"}, {"original_string": "private File mySnapDir;", "modifier": "private", "type": "File", "declarator": "mySnapDir", "var_name": "mySnapDir"}], "file": "zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java"}, "test_case": {"identifier": "testDumpWithCrcError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDumpWithCrcError() throws Exception {\n        // Arrange\n        File logfile = new File(new File(mySnapDir, \"version-2\"), \"log.42\");\n        TxnLogToolkit lt = new TxnLogToolkit(false, false, logfile.toString(), true);\n\n        // Act\n        lt.dump(null);\n\n        // Assert\n        String output = outContent.toString();\n        Pattern p = Pattern.compile(\"^CRC ERROR.*session 0x8061fac5ddeb0000 cxid 0x0 zxid 0x8800000002 createSession 30000$\", Pattern.MULTILINE);\n        Matcher m = p.matcher(output);\n        assertTrue(\"Output doesn't indicate CRC error for the broken session id: \" + output, m.find());\n    }", "signature": "void testDumpWithCrcError()", "full_signature": "@Test public void testDumpWithCrcError()", "class_method_signature": "TxnLogToolkitTest.testDumpWithCrcError()", "testcase": true, "constructor": false, "invocations": ["toString", "dump", "toString", "compile", "matcher", "assertTrue", "find"]}, "focal_class": {"identifier": "TxnLogToolkit", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private File txnLogFile;", "modifier": "private", "type": "File", "declarator": "txnLogFile", "var_name": "txnLogFile"}, {"original_string": "private boolean recoveryMode = false;", "modifier": "private", "type": "boolean", "declarator": "recoveryMode = false", "var_name": "recoveryMode"}, {"original_string": "private boolean verbose = false;", "modifier": "private", "type": "boolean", "declarator": "verbose = false", "var_name": "verbose"}, {"original_string": "private FileInputStream txnFis;", "modifier": "private", "type": "FileInputStream", "declarator": "txnFis", "var_name": "txnFis"}, {"original_string": "private BinaryInputArchive logStream;", "modifier": "private", "type": "BinaryInputArchive", "declarator": "logStream", "var_name": "logStream"}, {"original_string": "private int crcFixed = 0;", "modifier": "private", "type": "int", "declarator": "crcFixed = 0", "var_name": "crcFixed"}, {"original_string": "private FileOutputStream recoveryFos;", "modifier": "private", "type": "FileOutputStream", "declarator": "recoveryFos", "var_name": "recoveryFos"}, {"original_string": "private BinaryOutputArchive recoveryOa;", "modifier": "private", "type": "BinaryOutputArchive", "declarator": "recoveryOa", "var_name": "recoveryOa"}, {"original_string": "private File recoveryLogFile;", "modifier": "private", "type": "File", "declarator": "recoveryLogFile", "var_name": "recoveryLogFile"}, {"original_string": "private FilePadding filePadding = new FilePadding();", "modifier": "private", "type": "FilePadding", "declarator": "filePadding = new FilePadding()", "var_name": "filePadding"}, {"original_string": "private boolean force = false;", "modifier": "private", "type": "boolean", "declarator": "force = false", "var_name": "force"}], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "TxnLogToolkit.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "TxnLogToolkit", "parameters": "(boolean recoveryMode, boolean verbose, String txnLogFileName, boolean force)", "modifiers": "public", "return": "", "signature": " TxnLogToolkit(boolean recoveryMode, boolean verbose, String txnLogFileName, boolean force)", "full_signature": "public  TxnLogToolkit(boolean recoveryMode, boolean verbose, String txnLogFileName, boolean force)", "class_method_signature": "TxnLogToolkit.TxnLogToolkit(boolean recoveryMode, boolean verbose, String txnLogFileName, boolean force)", "testcase": false, "constructor": true}, {"identifier": "dump", "parameters": "(Scanner scanner)", "modifiers": "public", "return": "void", "signature": "void dump(Scanner scanner)", "full_signature": "public void dump(Scanner scanner)", "class_method_signature": "TxnLogToolkit.dump(Scanner scanner)", "testcase": false, "constructor": false}, {"identifier": "askForFix", "parameters": "(Scanner scanner)", "modifiers": "private", "return": "boolean", "signature": "boolean askForFix(Scanner scanner)", "full_signature": "private boolean askForFix(Scanner scanner)", "class_method_signature": "TxnLogToolkit.askForFix(Scanner scanner)", "testcase": false, "constructor": false}, {"identifier": "printTxn", "parameters": "(byte[] bytes)", "modifiers": "private", "return": "void", "signature": "void printTxn(byte[] bytes)", "full_signature": "private void printTxn(byte[] bytes)", "class_method_signature": "TxnLogToolkit.printTxn(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "printTxn", "parameters": "(byte[] bytes, String prefix)", "modifiers": "private", "return": "void", "signature": "void printTxn(byte[] bytes, String prefix)", "full_signature": "private void printTxn(byte[] bytes, String prefix)", "class_method_signature": "TxnLogToolkit.printTxn(byte[] bytes, String prefix)", "testcase": false, "constructor": false}, {"identifier": "getDataStrFromTxn", "parameters": "(Record txn)", "modifiers": "private static", "return": "String", "signature": "String getDataStrFromTxn(Record txn)", "full_signature": "private static String getDataStrFromTxn(Record txn)", "class_method_signature": "TxnLogToolkit.getDataStrFromTxn(Record txn)", "testcase": false, "constructor": false}, {"identifier": "openTxnLogFile", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void openTxnLogFile()", "full_signature": "private void openTxnLogFile()", "class_method_signature": "TxnLogToolkit.openTxnLogFile()", "testcase": false, "constructor": false}, {"identifier": "closeTxnLogFile", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void closeTxnLogFile()", "full_signature": "private void closeTxnLogFile()", "class_method_signature": "TxnLogToolkit.closeTxnLogFile()", "testcase": false, "constructor": false}, {"identifier": "openRecoveryFile", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void openRecoveryFile()", "full_signature": "private void openRecoveryFile()", "class_method_signature": "TxnLogToolkit.openRecoveryFile()", "testcase": false, "constructor": false}, {"identifier": "closeRecoveryFile", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void closeRecoveryFile()", "full_signature": "private void closeRecoveryFile()", "class_method_signature": "TxnLogToolkit.closeRecoveryFile()", "testcase": false, "constructor": false}, {"identifier": "parseCommandLine", "parameters": "(String[] args)", "modifiers": "private static", "return": "TxnLogToolkit", "signature": "TxnLogToolkit parseCommandLine(String[] args)", "full_signature": "private static TxnLogToolkit parseCommandLine(String[] args)", "class_method_signature": "TxnLogToolkit.parseCommandLine(String[] args)", "testcase": false, "constructor": false}, {"identifier": "printHelpAndExit", "parameters": "(int exitCode, Options options)", "modifiers": "private static", "return": "void", "signature": "void printHelpAndExit(int exitCode, Options options)", "full_signature": "private static void printHelpAndExit(int exitCode, Options options)", "class_method_signature": "TxnLogToolkit.printHelpAndExit(int exitCode, Options options)", "testcase": false, "constructor": false}, {"identifier": "printStat", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void printStat()", "full_signature": "private void printStat()", "class_method_signature": "TxnLogToolkit.printStat()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "TxnLogToolkit.close()", "testcase": false, "constructor": false}], "file": "zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java"}, "focal_method": {"identifier": "dump", "parameters": "(Scanner scanner)", "modifiers": "public", "return": "void", "body": "public void dump(Scanner scanner) throws Exception {\n        crcFixed = 0;\n\n        FileHeader fhdr = new FileHeader();\n        fhdr.deserialize(logStream, \"fileheader\");\n        if (fhdr.getMagic() != TXNLOG_MAGIC) {\n            throw new TxnLogToolkitException(2, \"Invalid magic number for %s\", txnLogFile.getName());\n        }\n        System.out.println(\"ZooKeeper Transactional Log File with dbid \"\n                + fhdr.getDbid() + \" txnlog format version \"\n                + fhdr.getVersion());\n\n        if (recoveryMode) {\n            fhdr.serialize(recoveryOa, \"fileheader\");\n            recoveryFos.flush();\n            filePadding.setCurrentSize(recoveryFos.getChannel().position());\n        }\n\n        int count = 0;\n        while (true) {\n            long crcValue;\n            byte[] bytes;\n            try {\n                crcValue = logStream.readLong(\"crcvalue\");\n                bytes = logStream.readBuffer(\"txnEntry\");\n            } catch (EOFException e) {\n                System.out.println(\"EOF reached after \" + count + \" txns.\");\n                return;\n            }\n            if (bytes.length == 0) {\n                // Since we preallocate, we define EOF to be an\n                // empty transaction\n                System.out.println(\"EOF reached after \" + count + \" txns.\");\n                return;\n            }\n            Checksum crc = new Adler32();\n            crc.update(bytes, 0, bytes.length);\n            if (crcValue != crc.getValue()) {\n                if (recoveryMode) {\n                    if (!force) {\n                        printTxn(bytes, \"CRC ERROR\");\n                        if (askForFix(scanner)) {\n                            crcValue = crc.getValue();\n                            ++crcFixed;\n                        }\n                    } else {\n                        crcValue = crc.getValue();\n                        printTxn(bytes, \"CRC FIXED\");\n                        ++crcFixed;\n                    }\n                } else {\n                    printTxn(bytes, \"CRC ERROR\");\n                }\n            }\n            if (!recoveryMode || verbose) {\n                printTxn(bytes);\n            }\n            if (logStream.readByte(\"EOR\") != 'B') {\n                throw new TxnLogToolkitException(1, \"Last transaction was partial.\");\n            }\n            if (recoveryMode) {\n                filePadding.padFile(recoveryFos.getChannel());\n                recoveryOa.writeLong(crcValue, \"crcvalue\");\n                recoveryOa.writeBuffer(bytes, \"txnEntry\");\n                recoveryOa.writeByte((byte)'B', \"EOR\");\n            }\n            count++;\n        }\n    }", "signature": "void dump(Scanner scanner)", "full_signature": "public void dump(Scanner scanner)", "class_method_signature": "TxnLogToolkit.dump(Scanner scanner)", "testcase": false, "constructor": false, "invocations": ["deserialize", "getMagic", "getName", "println", "getDbid", "getVersion", "serialize", "flush", "setCurrentSize", "position", "getChannel", "readLong", "readBuffer", "println", "println", "update", "getValue", "printTxn", "askForFix", "getValue", "getValue", "printTxn", "printTxn", "printTxn", "readByte", "padFile", "getChannel", "writeLong", "writeBuffer", "writeByte"]}, "repository": {"repo_id": 230430206, "url": "https://github.com/boomblog/zookeeper-vip2", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 10, "size": 3105, "license": "licensed"}}