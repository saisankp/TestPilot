{"test_class": {"identifier": "OdfValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static String WSDL = \"/pserv-pc-odfvalidator/OdfValidator?wsdl\";", "modifier": "private static", "type": "String", "declarator": "WSDL = \"/pserv-pc-odfvalidator/OdfValidator?wsdl\"", "var_name": "WSDL"}, {"original_string": "private static Validate validator = null;", "modifier": "private static", "type": "Validate", "declarator": "validator = null", "var_name": "validator"}, {"original_string": "File v10TestIn = new File(\"tests/test-files/documents/test_pdf/2274192346_4a0a03c5d6.pdf\");", "modifier": "", "type": "File", "declarator": "v10TestIn = new File(\"tests/test-files/documents/test_pdf/2274192346_4a0a03c5d6.pdf\")", "var_name": "v10TestIn"}, {"original_string": "static File v10UserDocSchema = new File(\"tests/test-files/documents/test_odt/v10/schemas/OpenDocument-schema-v1.0-os.rng\");", "modifier": "static", "type": "File", "declarator": "v10UserDocSchema = new File(\"tests/test-files/documents/test_odt/v10/schemas/OpenDocument-schema-v1.0-os.rng\")", "var_name": "v10UserDocSchema"}, {"original_string": "static File v10UserDocStrictSchema = new File(\"tests/test-files/documents/test_odt/v10/schemas/OpenDocument-strict-schema-v1.0-os.rng\");", "modifier": "static", "type": "File", "declarator": "v10UserDocStrictSchema = new File(\"tests/test-files/documents/test_odt/v10/schemas/OpenDocument-strict-schema-v1.0-os.rng\")", "var_name": "v10UserDocStrictSchema"}, {"original_string": "static File v10UserManifestSchema = new File(\"tests/test-files/documents/test_odt/v10/schemas/OpenDocument-manifest-schema-v1.0-os.rng\");", "modifier": "static", "type": "File", "declarator": "v10UserManifestSchema = new File(\"tests/test-files/documents/test_odt/v10/schemas/OpenDocument-manifest-schema-v1.0-os.rng\")", "var_name": "v10UserManifestSchema"}, {"original_string": "File v11_text = new File(\"tests/test-files/documents/test_odt/v11/test_file_v11.odt\");", "modifier": "", "type": "File", "declarator": "v11_text = new File(\"tests/test-files/documents/test_odt/v11/test_file_v11.odt\")", "var_name": "v11_text"}, {"original_string": "File v11_presentation = new File(\"tests/test-files/documents/test_odt/v11/test_presentation_v11.odp\");", "modifier": "", "type": "File", "declarator": "v11_presentation = new File(\"tests/test-files/documents/test_odt/v11/test_presentation_v11.odp\")", "var_name": "v11_presentation"}, {"original_string": "File v11_database = new File(\"tests/test-files/documents/test_odt/v11/test_database_v11.odb\");", "modifier": "", "type": "File", "declarator": "v11_database = new File(\"tests/test-files/documents/test_odt/v11/test_database_v11.odb\")", "var_name": "v11_database"}, {"original_string": "File v11_drawing = new File(\"tests/test-files/documents/test_odt/v11/drawing_v11.odg\");", "modifier": "", "type": "File", "declarator": "v11_drawing = new File(\"tests/test-files/documents/test_odt/v11/drawing_v11.odg\")", "var_name": "v11_drawing"}, {"original_string": "File v11_table = new File(\"tests/test-files/documents/test_odt/v11/table_v11.ods\");", "modifier": "", "type": "File", "declarator": "v11_table = new File(\"tests/test-files/documents/test_odt/v11/table_v11.ods\")", "var_name": "v11_table"}, {"original_string": "File v11_formula = new File(\"tests/test-files/documents/test_odt/v11/formula_v11.odf\");", "modifier": "", "type": "File", "declarator": "v11_formula = new File(\"tests/test-files/documents/test_odt/v11/formula_v11.odf\")", "var_name": "v11_formula"}, {"original_string": "static File v11UserDocSchema = new File(\"tests/test-files/documents/test_odt/v11/schemas/OpenDocument-schema-v1.1.rng\");", "modifier": "static", "type": "File", "declarator": "v11UserDocSchema = new File(\"tests/test-files/documents/test_odt/v11/schemas/OpenDocument-schema-v1.1.rng\")", "var_name": "v11UserDocSchema"}, {"original_string": "static File v11UserDocStrictSchema = new File(\"tests/test-files/documents/test_odt/v11/schemas/OpenDocument-strict-schema-v1.1.rng\");", "modifier": "static", "type": "File", "declarator": "v11UserDocStrictSchema = new File(\"tests/test-files/documents/test_odt/v11/schemas/OpenDocument-strict-schema-v1.1.rng\")", "var_name": "v11UserDocStrictSchema"}, {"original_string": "static File v11UserManifestSchema = new File(\"tests/test-files/documents/test_odt/v11/schemas/OpenDocument-manifest-schema-v1.1.rng\");", "modifier": "static", "type": "File", "declarator": "v11UserManifestSchema = new File(\"tests/test-files/documents/test_odt/v11/schemas/OpenDocument-manifest-schema-v1.1.rng\")", "var_name": "v11UserManifestSchema"}, {"original_string": "File v12TestIn = new File(\"tests/test-files/documents/test_odt/v12/test_presentation_v12.odp\");", "modifier": "", "type": "File", "declarator": "v12TestIn = new File(\"tests/test-files/documents/test_odt/v12/test_presentation_v12.odp\")", "var_name": "v12TestIn"}, {"original_string": "static File v12UserDocSchema = new File(\"tests/test-files/documents/test_odt/v12/schemas/OpenDocument-schema-v1.2-cd03.rng\");", "modifier": "static", "type": "File", "declarator": "v12UserDocSchema = new File(\"tests/test-files/documents/test_odt/v12/schemas/OpenDocument-schema-v1.2-cd03.rng\")", "var_name": "v12UserDocSchema"}, {"original_string": "static File v12UserManifestSchema = new File(\"tests/test-files/documents/test_odt/v12/schemas/OpenDocument-manifest-schema-v1.2-draft7.rng\");", "modifier": "static", "type": "File", "declarator": "v12UserManifestSchema = new File(\"tests/test-files/documents/test_odt/v12/schemas/OpenDocument-manifest-schema-v1.2-draft7.rng\")", "var_name": "v12UserManifestSchema"}, {"original_string": "FormatRegistry techReg = FormatRegistryFactory.getFormatRegistry();", "modifier": "", "type": "FormatRegistry", "declarator": "techReg = FormatRegistryFactory.getFormatRegistry()", "var_name": "techReg"}, {"original_string": "static List<Parameter> params = new ArrayList<Parameter>();", "modifier": "static", "type": "List<Parameter>", "declarator": "params = new ArrayList<Parameter>()", "var_name": "params"}, {"original_string": "static List<Parameter> v12_params = new ArrayList<Parameter>();", "modifier": "static", "type": "List<Parameter>", "declarator": "v12_params = new ArrayList<Parameter>()", "var_name": "v12_params"}, {"original_string": "static File[] testFiles = null;", "modifier": "static", "type": "File[]", "declarator": "testFiles = null", "var_name": "testFiles"}], "file": "services/odfvalidator/src/test/java/eu/planets_project/services/validation/odfvalidator/OdfValidatorTest.java"}, "test_case": {"identifier": "testDescribe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDescribe() {\n\t\tSystem.out.println(\"running Service at: \" + validator.QNAME);\n        ServiceDescription desc = validator.describe();\n        System.out.println(\"Recieved service description: \" + desc.toXmlFormatted());\n        assertTrue(\"The ServiceDescription should not be NULL.\", desc != null );\n\t}", "signature": "void testDescribe()", "full_signature": "@Test public void testDescribe()", "class_method_signature": "OdfValidatorTest.testDescribe()", "testcase": true, "constructor": false, "invocations": ["println", "describe", "println", "toXmlFormatted", "assertTrue"]}, "focal_class": {"identifier": "OdfValidator", "superclass": "", "interfaces": "implements Validate", "fields": [{"original_string": "public static final String NAME = \"OdfValidator\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"OdfValidator\"", "var_name": "NAME"}, {"original_string": "private static Logger log = Logger.getLogger(OdfValidator.class.getName());", "modifier": "private static", "type": "Logger", "declarator": "log = Logger.getLogger(OdfValidator.class.getName())", "var_name": "log"}, {"original_string": "private static FormatRegistry techReg = FormatRegistryFactory.getFormatRegistry();", "modifier": "private static", "type": "FormatRegistry", "declarator": "techReg = FormatRegistryFactory.getFormatRegistry()", "var_name": "techReg"}, {"original_string": "private static String NEWLINE = System.getProperty(\"line.separator\");", "modifier": "private static", "type": "String", "declarator": "NEWLINE = System.getProperty(\"line.separator\")", "var_name": "NEWLINE"}, {"original_string": "private String usedSchemas = loadSchemas();", "modifier": "private", "type": "String", "declarator": "usedSchemas = loadSchemas()", "var_name": "usedSchemas"}], "methods": [{"identifier": "describe", "parameters": "()", "modifiers": "public", "return": "ServiceDescription", "signature": "ServiceDescription describe()", "full_signature": "public ServiceDescription describe()", "class_method_signature": "OdfValidator.describe()", "testcase": false, "constructor": false}, {"identifier": "loadSchemas", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String loadSchemas()", "full_signature": "private String loadSchemas()", "class_method_signature": "OdfValidator.loadSchemas()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(DigitalObject digitalObject, URI format,\n\t\t\tList<Parameter> parameters)", "modifiers": "public", "return": "ValidateResult", "signature": "ValidateResult validate(DigitalObject digitalObject, URI format,\n\t\t\tList<Parameter> parameters)", "full_signature": "public ValidateResult validate(DigitalObject digitalObject, URI format,\n\t\t\tList<Parameter> parameters)", "class_method_signature": "OdfValidator.validate(DigitalObject digitalObject, URI format,\n\t\t\tList<Parameter> parameters)", "testcase": false, "constructor": false}, {"identifier": "returnWithErrorMessage", "parameters": "(final URI format, final String message,\n            final Exception e)", "modifiers": "private", "return": "ValidateResult", "signature": "ValidateResult returnWithErrorMessage(final URI format, final String message,\n            final Exception e)", "full_signature": "private ValidateResult returnWithErrorMessage(final URI format, final String message,\n            final Exception e)", "class_method_signature": "OdfValidator.returnWithErrorMessage(final URI format, final String message,\n            final Exception e)", "testcase": false, "constructor": false}], "file": "services/odfvalidator/src/main/java/eu/planets_project/services/validation/odfvalidator/OdfValidator.java"}, "focal_method": {"identifier": "describe", "parameters": "()", "modifiers": "public", "return": "ServiceDescription", "body": "public ServiceDescription describe() {\n\t\tServiceDescription.Builder sd = new ServiceDescription.Builder(NAME,Validate.class.getCanonicalName());\n\t    sd.author(\"Peter Melms, mailto:peter.melms@uni-koeln.de\");\n\t    sd.description(\"This is an ODF Validator service. It uses the tool 'jing' to check all components of a ODF file for their validity.\" +\n\t    \t\t\"It supports ODF 1.0, ODF 1.1 fully and ODF 1.2 in a preliminary state.\" + NEWLINE + \n\t    \t\t\"'OpenOffice Math' files that contain MathML syntax are supported and validated against the MathML 2 schema file.\" + NEWLINE + \n\t    \t\t\"You can pass custom RelaxNG schema files to validate the regarding ODF subfiles against. \" + NEWLINE +\n\t    \t\t\"You have two ways of providing the custom RelaxNG schema: 1) You can pass the schema as a String or \" +\n\t    \t\t\"\t\t\t\t\t\t\t\t\t\t\t\t   2) pass a URL where the schema can be retrieved.\" + NEWLINE + \n\t    \t\t\"If you don't pass a custom schema, the official ODF schemas are used for validation: \" + NEWLINE +\n\t    \t\t\"---------------------------------------------------------\" + NEWLINE + \n\t    \t\tusedSchemas + NEWLINE + \n\t    \t\t\"---------------------------------------------------------\" + NEWLINE +\n\t    \t\t\"The schemas are retrieved automatically, depending on the version of the ODF input file.\");\n\t    sd.classname(this.getClass().getCanonicalName());\n\t    sd.version(\"2.0\");\n\t    sd.name(NAME);\n\t    sd.type(Validate.class.getCanonicalName());\n\t    List<Parameter> parameterList = new ArrayList<Parameter>();\n\t    \n\t    Parameter user_doc_schema_param = \n\t    \t\n\t    \tnew Parameter.Builder(\"user-doc-schema\", \"[1) The RelaxNG-Schema read to a String / 2) a URL where the schema can be retrieved from.]\")\n\t    \t\t\t\t\t\t\t\t\t.type(\"String\")\n\t            \t\t\t\t\t\t\t.description(\"1) You can pass a custom doc-schema file to validate against, read into a String.\" + NEWLINE + \n\t            \t\t\t\t\t\t\t\t\t\t \"2) You can also pass a URL to load the schema. \" + NEWLINE + \n\t            \t\t\t\t\t\t\t\t\t\t \"To indicate this, please use 'doc-schema-url=' marker. Please see the following example:\" + NEWLINE +\n\t            \t\t\t\t\t\t\t\t\t\t \"EXAMPLE:\" + NEWLINE +  \n\t            \t\t\t\t\t\t\t\t\t\t \"--------\" + NEWLINE +\n\t            \t\t\t\t\t\t\t\t\t\t \"user-doc-schema=doc-schema-url=http://docs.oasis-open.org/office/v1.1/OS/OpenDocument-schema-v1.1.rng\")\n\t            \t\t\t\t\t\t\t.build();\n\t    parameterList.add(user_doc_schema_param);\n\t    \n\t    Parameter user_doc_strict_schema_param = \n\t    \t\n\t    \tnew Parameter.Builder(\"user-doc-strict-schema\", \"[1) The RelaxNG-Schema read to a String / 2) a URL where the schema can be retrieved from.]\")\n\t\t\t\t\t\t\t\t\t\t\t.type(\"String\")\n\t\t\t\t\t\t\t\t\t\t\t.description(\"1) You can pass a custom doc-strict-schema file to validate against, read into a String.\" + NEWLINE + \n\t            \t\t\t\t\t\t\t\t\t\t \"2) You can also pass a URL to load the schema. \" + NEWLINE + \n\t            \t\t\t\t\t\t\t\t\t\t \"To indicate this, please use 'doc-strict-schema-url=' marker. Please see the following example:\" + NEWLINE +\n\t            \t\t\t\t\t\t\t\t\t\t \"EXAMPLE:\" + NEWLINE +  \n\t            \t\t\t\t\t\t\t\t\t\t \"--------\" + NEWLINE +\n\t            \t\t\t\t\t\t\t\t\t\t \"user-doc-strict-schema=doc-strict-schema-url=http://docs.oasis-open.org/office/v1.1/OS/OpenDocument-strict-schema-v1.1.rng\" + NEWLINE + \n\t            \t\t\t\t\t\t\t\t\t\t \"PLEASE NOTE: If you pass a [user-doc-strict-schema] file, you have to pass a [user-doc-schema] as well, as the strict schema usually references the doc-schema, \" +\n\t            \t\t\t\t\t\t\t\t\t\t \"obviously this won't work, if you haven't passed any ;-).\")\n\t\t\t\t\t\t\t\t\t\t\t.build();\n\t    parameterList.add(user_doc_strict_schema_param);\n\t    \n\t    Parameter user_manifest_schema_param = \n\t    \t\n\t    \tnew Parameter.Builder(\"user-manifest-schema\", \"[1) The RelaxNG-Schema read to a String / 2) a URL where the schema can be retrieved from.]\")\n\t\t\t\t\t\t\t\t\t\t\t.type(\"String\")\n\t\t\t\t\t\t\t\t\t\t\t.description(\"1) You can pass a custom manifest-schema file to validate against, read into a String.\" + NEWLINE + \n\t            \t\t\t\t\t\t\t\t\t\t \"2) You can also pass a URL to load the schema. \" + NEWLINE + \n\t            \t\t\t\t\t\t\t\t\t\t \"To indicate this, please use 'manifest-schema-url=' marker. Please see the following example:\" + NEWLINE +\n\t            \t\t\t\t\t\t\t\t\t\t \"EXAMPLE:\" + NEWLINE +  \n\t            \t\t\t\t\t\t\t\t\t\t \"--------\" + NEWLINE +\n\t            \t\t\t\t\t\t\t\t\t\t \"user-manifest-schema=manifest-schema-url=http://docs.oasis-open.org/office/v1.1/OS/OpenDocument-manifest-schema-v1.1.rng\")\n\t\t\t\t\t\t\t\t\t\t\t.build();\n\t    parameterList.add(user_manifest_schema_param);\n\t    \n\t    Parameter user_dsig_schema_param = \n\t    \t\n\t    \tnew Parameter.Builder(\"user-dsig-schema\", \"[1) The RelaxNG-Schema read to a String / 2) a URL where the schema can be retrieved from.]\")\n\t\t\t\t\t\t\t\t\t\t\t.type(\"String\")\n\t\t\t\t\t\t\t\t\t\t\t.description(\"1) You can pass a custom RNG dsig-schema file to validate against, read into a String.\" + NEWLINE + \n\t            \t\t\t\t\t\t\t\t\t\t \"2) You can also pass a URL to load the schema. \" + NEWLINE + \n\t            \t\t\t\t\t\t\t\t\t\t \"To indicate this, please use 'dsig-schema-url=' marker. Please see the following example:\" + NEWLINE +\n\t            \t\t\t\t\t\t\t\t\t\t \"EXAMPLE:\" + NEWLINE +  \n\t            \t\t\t\t\t\t\t\t\t\t \"--------\" + NEWLINE +\n\t            \t\t\t\t\t\t\t\t\t\t \"user-dsig-schema=dsig-schema-url=http://docs.oasis-open.org/office/v1.2/part3/cd01/OpenDocument-dsig-schema-v1.2-cd1.rng\" + NEWLINE + \n\t            \t\t\t\t\t\t\t\t\t\t \"The dsig-schema is used to validate all signatures attached to a document. Signing documents is possible since v1.2, so for all \" +\n\t            \t\t\t\t\t\t\t\t\t\t \"files with a lower version this feature is not applicable!\")\n\t\t\t\t\t\t\t\t\t\t\t.build();\n\t    parameterList.add(user_dsig_schema_param);\n\t    \n\t    Parameter strict_validation_param = new Parameter.Builder(\"strict-validation\", \"true/false\")\n\t    \t\t\t\t\t\t\t\t\t.type(\"boolean\")\n\t    \t\t\t\t\t\t\t\t\t.description(\"Enable STRICT Validation (i.e. validate against the strict-schema. Default is false/disabled.\" + NEWLINE + \n\t    \t\t\t\t\t\t\t\t\t\t\t\"PLEASE NOTE: 1) If you enable STRICT validation and pass a [user-doc-schema] without passing a [user-doc-strict-schema], STRICT validation will be disabled.\" + NEWLINE + \n\t    \t\t\t\t\t\t\t\t\t\t\t\"             2) Enabling STRICT validation for a ODF v1.2 file will have no effect and thus this parameter is ignored for ODF v1.2 files!\")\n\t    \t\t\t\t\t\t\t\t\t.build();\n\t    parameterList.add(strict_validation_param);\n\t    \n\t    sd.parameters(parameterList);\n\t\n\t    sd.tool(Tool.create(null, \"Jing\", CoreOdfValidator.getToolVersion(), null, \"http://www.thaiopensource.com/relaxng/jing.html\"));\n\t    List<URI> inputList = new ArrayList<URI>();\n\t    inputList.add(techReg.createExtensionUri(\"odt\"));\n\t    inputList.add(techReg.createExtensionUri(\"ods\"));\n\t    inputList.add(techReg.createExtensionUri(\"odp\"));\n\t    inputList.add(techReg.createExtensionUri(\"odg\"));\n\t    inputList.add(techReg.createExtensionUri(\"odm\"));\n\t    inputList.add(techReg.createExtensionUri(\"odb\"));\n\t    inputList.add(techReg.createExtensionUri(\"odf\"));\n\t\tsd.inputFormats(inputList.toArray(new URI[]{}));\n\t\treturn sd.build();\n\t}", "signature": "ServiceDescription describe()", "full_signature": "public ServiceDescription describe()", "class_method_signature": "OdfValidator.describe()", "testcase": false, "constructor": false, "invocations": ["getCanonicalName", "author", "description", "classname", "getCanonicalName", "getClass", "version", "name", "type", "getCanonicalName", "build", "description", "type", "add", "build", "description", "type", "add", "build", "description", "type", "add", "build", "description", "type", "add", "build", "description", "type", "add", "parameters", "tool", "create", "getToolVersion", "add", "createExtensionUri", "add", "createExtensionUri", "add", "createExtensionUri", "add", "createExtensionUri", "add", "createExtensionUri", "add", "createExtensionUri", "add", "createExtensionUri", "inputFormats", "toArray", "build"]}, "repository": {"repo_id": 1025030, "url": "https://github.com/opf-labs/planets-suite", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 198462, "license": "licensed"}}