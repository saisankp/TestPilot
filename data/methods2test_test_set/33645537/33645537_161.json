{"test_class": {"identifier": "SimpleRegularExpressionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SimpleRegularExpression simpleRegularExpression;", "modifier": "private", "type": "SimpleRegularExpression", "declarator": "simpleRegularExpression", "var_name": "simpleRegularExpression"}], "file": "algs/src/test/java/com/github/pedrovgs/problem33/SimpleRegularExpressionTest.java"}, "test_case": {"identifier": "shouldReturnTrueIfMatchesUsingAsterisk", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void shouldReturnTrueIfMatchesUsingAsterisk() {\n    String input = \"aaa\";\n    String regularExpression = \"a*\";\n\n    boolean result = simpleRegularExpression.evaluate(input, regularExpression);\n\n    assertTrue(result);\n  }", "signature": "void shouldReturnTrueIfMatchesUsingAsterisk()", "full_signature": "@Test public void shouldReturnTrueIfMatchesUsingAsterisk()", "class_method_signature": "SimpleRegularExpressionTest.shouldReturnTrueIfMatchesUsingAsterisk()", "testcase": true, "constructor": false, "invocations": ["evaluate", "assertTrue"]}, "focal_class": {"identifier": "SimpleRegularExpression", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "evaluate", "parameters": "(String source, String pattern)", "modifiers": "public", "return": "boolean", "signature": "boolean evaluate(String source, String pattern)", "full_signature": "public boolean evaluate(String source, String pattern)", "class_method_signature": "SimpleRegularExpression.evaluate(String source, String pattern)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem33/SimpleRegularExpression.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(String source, String pattern)", "modifiers": "public", "return": "boolean", "body": "public boolean evaluate(String source, String pattern) {\n    if (source == null || pattern == null) {\n      throw new IllegalArgumentException(\"You can't pass a null strings as input\");\n    }\n    if (pattern.length() == 0) return source.length() == 0;\n    // Length 1 is special case\n    if (pattern.length() == 1 || pattern.charAt(1) != '*') {\n      if (source.length() < 1 || (pattern.charAt(0) != '.' && source.charAt(0) != pattern.charAt(\n          0))) {\n        return false;\n      }\n      return evaluate(source.substring(1), pattern.substring(1));\n    } else {\n      int len = source.length();\n\n      int i = -1;\n      while (i < len && (i < 0 || pattern.charAt(0) == '.' || pattern.charAt(0) == source.charAt(\n          i))) {\n        if (evaluate(source.substring(i + 1), pattern.substring(2))) return true;\n        i++;\n      }\n      return false;\n    }\n  }", "signature": "boolean evaluate(String source, String pattern)", "full_signature": "public boolean evaluate(String source, String pattern)", "class_method_signature": "SimpleRegularExpression.evaluate(String source, String pattern)", "testcase": false, "constructor": false, "invocations": ["length", "length", "length", "charAt", "length", "charAt", "charAt", "charAt", "evaluate", "substring", "substring", "length", "charAt", "charAt", "charAt", "evaluate", "substring", "substring"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}