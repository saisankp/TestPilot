{"test_class": {"identifier": "PermutationGroupTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "private final static int[] lookup = {1, 1, 2, 6, 24, 120, 720, 5040};", "modifier": "private final static", "type": "int[]", "declarator": "lookup = {1, 1, 2, 6, 24, 120, 720, 5040}", "var_name": "lookup"}], "file": "tool/group/src/test/java/org/openscience/cdk/group/PermutationGroupTest.java"}, "test_case": {"identifier": "makeSymNTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void makeSymNTest() {\n        int size = 4;\n        PermutationGroup sym = PermutationGroup.makeSymN(size);\n        Assert.assertEquals(size, sym.getSize());\n        Assert.assertEquals(factorial(size), sym.order());\n    }", "signature": "void makeSymNTest()", "full_signature": "@Test public void makeSymNTest()", "class_method_signature": "PermutationGroupTest.makeSymNTest()", "testcase": true, "constructor": false, "invocations": ["makeSymN", "assertEquals", "getSize", "assertEquals", "factorial", "order"]}, "focal_class": {"identifier": "PermutationGroup", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Permutation[][] permutations;", "modifier": "private", "type": "Permutation[][]", "declarator": "permutations", "var_name": "permutations"}, {"original_string": "private final int       size;", "modifier": "private final", "type": "int", "declarator": "size", "var_name": "size"}, {"original_string": "private Permutation     base;", "modifier": "private", "type": "Permutation", "declarator": "base", "var_name": "base"}], "methods": [{"identifier": "PermutationGroup", "parameters": "(int size)", "modifiers": "public", "return": "", "signature": " PermutationGroup(int size)", "full_signature": "public  PermutationGroup(int size)", "class_method_signature": "PermutationGroup.PermutationGroup(int size)", "testcase": false, "constructor": true}, {"identifier": "PermutationGroup", "parameters": "(Permutation base)", "modifiers": "public", "return": "", "signature": " PermutationGroup(Permutation base)", "full_signature": "public  PermutationGroup(Permutation base)", "class_method_signature": "PermutationGroup.PermutationGroup(Permutation base)", "testcase": false, "constructor": true}, {"identifier": "PermutationGroup", "parameters": "(int size, List<Permutation> generators)", "modifiers": "public", "return": "", "signature": " PermutationGroup(int size, List<Permutation> generators)", "full_signature": "public  PermutationGroup(int size, List<Permutation> generators)", "class_method_signature": "PermutationGroup.PermutationGroup(int size, List<Permutation> generators)", "testcase": false, "constructor": true}, {"identifier": "makeSymN", "parameters": "(int size)", "modifiers": "public static", "return": "PermutationGroup", "signature": "PermutationGroup makeSymN(int size)", "full_signature": "public static PermutationGroup makeSymN(int size)", "class_method_signature": "PermutationGroup.makeSymN(int size)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSize()", "full_signature": "public int getSize()", "class_method_signature": "PermutationGroup.getSize()", "testcase": false, "constructor": false}, {"identifier": "order", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long order()", "full_signature": "public long order()", "class_method_signature": "PermutationGroup.order()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int uIndex, int uSubIndex)", "modifiers": "public", "return": "Permutation", "signature": "Permutation get(int uIndex, int uSubIndex)", "full_signature": "public Permutation get(int uIndex, int uSubIndex)", "class_method_signature": "PermutationGroup.get(int uIndex, int uSubIndex)", "testcase": false, "constructor": false}, {"identifier": "getLeftTransversal", "parameters": "(int index)", "modifiers": "public", "return": "List<Permutation>", "signature": "List<Permutation> getLeftTransversal(int index)", "full_signature": "public List<Permutation> getLeftTransversal(int index)", "class_method_signature": "PermutationGroup.getLeftTransversal(int index)", "testcase": false, "constructor": false}, {"identifier": "transversal", "parameters": "(final PermutationGroup subgroup)", "modifiers": "public", "return": "List<Permutation>", "signature": "List<Permutation> transversal(final PermutationGroup subgroup)", "full_signature": "public List<Permutation> transversal(final PermutationGroup subgroup)", "class_method_signature": "PermutationGroup.transversal(final PermutationGroup subgroup)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(Backtracker backtracker)", "modifiers": "public", "return": "void", "signature": "void apply(Backtracker backtracker)", "full_signature": "public void apply(Backtracker backtracker)", "class_method_signature": "PermutationGroup.apply(Backtracker backtracker)", "testcase": false, "constructor": false}, {"identifier": "backtrack", "parameters": "(int l, Permutation g, Backtracker backtracker)", "modifiers": "private", "return": "void", "signature": "void backtrack(int l, Permutation g, Backtracker backtracker)", "full_signature": "private void backtrack(int l, Permutation g, Backtracker backtracker)", "class_method_signature": "PermutationGroup.backtrack(int l, Permutation g, Backtracker backtracker)", "testcase": false, "constructor": false}, {"identifier": "all", "parameters": "()", "modifiers": "public", "return": "List<Permutation>", "signature": "List<Permutation> all()", "full_signature": "public List<Permutation> all()", "class_method_signature": "PermutationGroup.all()", "testcase": false, "constructor": false}, {"identifier": "changeBase", "parameters": "(Permutation newBase)", "modifiers": "public", "return": "void", "signature": "void changeBase(Permutation newBase)", "full_signature": "public void changeBase(Permutation newBase)", "class_method_signature": "PermutationGroup.changeBase(Permutation newBase)", "testcase": false, "constructor": false}, {"identifier": "enter", "parameters": "(Permutation g)", "modifiers": "public", "return": "void", "signature": "void enter(Permutation g)", "full_signature": "public void enter(Permutation g)", "class_method_signature": "PermutationGroup.enter(Permutation g)", "testcase": false, "constructor": false}, {"identifier": "test", "parameters": "(Permutation permutation)", "modifiers": "public", "return": "int", "signature": "int test(Permutation permutation)", "full_signature": "public int test(Permutation permutation)", "class_method_signature": "PermutationGroup.test(Permutation permutation)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PermutationGroup.toString()", "testcase": false, "constructor": false}], "file": "tool/group/src/main/java/org/openscience/cdk/group/PermutationGroup.java"}, "focal_method": {"identifier": "makeSymN", "parameters": "(int size)", "modifiers": "public static", "return": "PermutationGroup", "body": "public static PermutationGroup makeSymN(int size) {\n        List<Permutation> generators = new ArrayList<Permutation>();\n\n        // p1 is (0, 1)\n        int[] p1 = new int[size];\n        p1[0] = 1;\n        p1[1] = 0;\n        for (int i = 2; i < size; i++) {\n            p1[i] = i;\n        }\n\n        // p2 is (1, 2, ...., n, 0)\n        int[] p2 = new int[size];\n        p2[0] = 1;\n        for (int i = 1; i < size - 1; i++) {\n            p2[i] = i + 1;\n        }\n        p2[size - 1] = 0;\n\n        generators.add(new Permutation(p1));\n        generators.add(new Permutation(p2));\n\n        return new PermutationGroup(size, generators);\n    }", "signature": "PermutationGroup makeSymN(int size)", "full_signature": "public static PermutationGroup makeSymN(int size)", "class_method_signature": "PermutationGroup.makeSymN(int size)", "testcase": false, "constructor": false, "invocations": ["add", "add"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}