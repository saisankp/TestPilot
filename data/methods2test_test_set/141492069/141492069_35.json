{"test_class": {"identifier": "TestUDPConfigHandler", "superclass": "extends UDPTestBase", "interfaces": "", "fields": [{"original_string": "UDPConfigHandler udpConfig;", "modifier": "", "type": "UDPConfigHandler", "declarator": "udpConfig", "var_name": "udpConfig"}, {"original_string": "String sourceName;", "modifier": "", "type": "String", "declarator": "sourceName", "var_name": "sourceName"}, {"original_string": "FalseClient client;", "modifier": "", "type": "FalseClient", "declarator": "client", "var_name": "client"}, {"original_string": "ExtensionServiceMessage msg;", "modifier": "", "type": "ExtensionServiceMessage", "declarator": "msg", "var_name": "msg"}], "file": "udpSource/src/test/java/io/vantiq/extsrc/udp/TestUDPConfigHandler.java"}, "test_case": {"identifier": "testIsConfiguredToSend", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsConfiguredToSend() {\n        Map<String,Object> outgoing = new LinkedHashMap<>();\n        \n        outgoing.put(\"passPureMapOut\", true);\n        outgoing.put(\"targetAddress\",\"notValidAddress\");\n        outgoing.put(\"targetPort\", -100);\n        \n        assert !udpConfig.isConfiguredToSend(outgoing);\n        \n        outgoing.put(\"targetPort\", 100);\n        \n        assert !udpConfig.isConfiguredToSend(outgoing); // targetAddress still invalid\n        \n        outgoing.put(\"targetAddress\",\"localhost\");\n        \n        assert udpConfig.isConfiguredToSend(outgoing);\n        \n        outgoing.put(\"passPureMapOut\", \"not a bool\");\n        \n        assert udpConfig.isConfiguredToSend(outgoing); // other options don't matter\n        \n        outgoing.put(\"targetPort\", -100);\n        \n        assert !udpConfig.isConfiguredToSend(outgoing);\n    }", "signature": "void testIsConfiguredToSend()", "full_signature": "@Test public void testIsConfiguredToSend()", "class_method_signature": "TestUDPConfigHandler.testIsConfiguredToSend()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "isConfiguredToSend", "put", "isConfiguredToSend", "put", "isConfiguredToSend", "put", "isConfiguredToSend", "put", "isConfiguredToSend"]}, "focal_class": {"identifier": "UDPConfigHandler", "superclass": "extends Handler<ExtensionServiceMessage>", "interfaces": "", "fields": [], "methods": [{"identifier": "handleMessage", "parameters": "(ExtensionServiceMessage message)", "modifiers": "@Override public", "return": "void", "signature": "void handleMessage(ExtensionServiceMessage message)", "full_signature": "@Override public void handleMessage(ExtensionServiceMessage message)", "class_method_signature": "UDPConfigHandler.handleMessage(ExtensionServiceMessage message)", "testcase": false, "constructor": false}, {"identifier": "getListeningPort", "parameters": "(Map general,String sourceName)", "modifiers": "", "return": "int", "signature": "int getListeningPort(Map general,String sourceName)", "full_signature": " int getListeningPort(Map general,String sourceName)", "class_method_signature": "UDPConfigHandler.getListeningPort(Map general,String sourceName)", "testcase": false, "constructor": false}, {"identifier": "getListeningAddress", "parameters": "(Map general, String sourceName)", "modifiers": "", "return": "InetAddress", "signature": "InetAddress getListeningAddress(Map general, String sourceName)", "full_signature": " InetAddress getListeningAddress(Map general, String sourceName)", "class_method_signature": "UDPConfigHandler.getListeningAddress(Map general, String sourceName)", "testcase": false, "constructor": false}, {"identifier": "isConfiguredToSend", "parameters": "(Map outgoing)", "modifiers": "", "return": "boolean", "signature": "boolean isConfiguredToSend(Map outgoing)", "full_signature": " boolean isConfiguredToSend(Map outgoing)", "class_method_signature": "UDPConfigHandler.isConfiguredToSend(Map outgoing)", "testcase": false, "constructor": false}, {"identifier": "isConfiguredToReceive", "parameters": "(Map incoming)", "modifiers": "", "return": "boolean", "signature": "boolean isConfiguredToReceive(Map incoming)", "full_signature": " boolean isConfiguredToReceive(Map incoming)", "class_method_signature": "UDPConfigHandler.isConfiguredToReceive(Map incoming)", "testcase": false, "constructor": false}, {"identifier": "hasValidAddress", "parameters": "(List potentialAddresses)", "modifiers": "", "return": "boolean", "signature": "boolean hasValidAddress(List potentialAddresses)", "full_signature": " boolean hasValidAddress(List potentialAddresses)", "class_method_signature": "UDPConfigHandler.hasValidAddress(List potentialAddresses)", "testcase": false, "constructor": false}, {"identifier": "hasValidPort", "parameters": "(List potentialPorts)", "modifiers": "", "return": "boolean", "signature": "boolean hasValidPort(List potentialPorts)", "full_signature": " boolean hasValidPort(List potentialPorts)", "class_method_signature": "UDPConfigHandler.hasValidPort(List potentialPorts)", "testcase": false, "constructor": false}, {"identifier": "hasValidServer", "parameters": "(List potentialServers)", "modifiers": "", "return": "boolean", "signature": "boolean hasValidServer(List potentialServers)", "full_signature": " boolean hasValidServer(List potentialServers)", "class_method_signature": "UDPConfigHandler.hasValidServer(List potentialServers)", "testcase": false, "constructor": false}, {"identifier": "hasValidTransform", "parameters": "(List potentialTransformations)", "modifiers": "", "return": "boolean", "signature": "boolean hasValidTransform(List potentialTransformations)", "full_signature": " boolean hasValidTransform(List potentialTransformations)", "class_method_signature": "UDPConfigHandler.hasValidTransform(List potentialTransformations)", "testcase": false, "constructor": false}, {"identifier": "isValidRegexParser", "parameters": "(Map potentialParser)", "modifiers": "", "return": "boolean", "signature": "boolean isValidRegexParser(Map potentialParser)", "full_signature": " boolean isValidRegexParser(Map potentialParser)", "class_method_signature": "UDPConfigHandler.isValidRegexParser(Map potentialParser)", "testcase": false, "constructor": false}], "file": "udpSource/src/main/java/io/vantiq/extsrc/udp/UDPConfigHandler.java"}, "focal_method": {"identifier": "isConfiguredToSend", "parameters": "(Map outgoing)", "modifiers": "", "return": "boolean", "body": "boolean isConfiguredToSend(Map outgoing) {\n        if (outgoing == null || !(outgoing.get(\"targetAddress\") instanceof String) ||\n                !(outgoing.get(\"targetPort\") instanceof Integer)) {\n            return false;\n        }\n        int port = (Integer) outgoing.get(\"targetPort\");\n        String addr = (String) outgoing.get(\"targetAddress\");\n        if (port < 0 || port > 65535) {\n            return false;\n        }\n        try {\n            InetAddress.getByName(addr);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }", "signature": "boolean isConfiguredToSend(Map outgoing)", "full_signature": " boolean isConfiguredToSend(Map outgoing)", "class_method_signature": "UDPConfigHandler.isConfiguredToSend(Map outgoing)", "testcase": false, "constructor": false, "invocations": ["get", "get", "get", "get", "getByName"]}, "repository": {"repo_id": 141492069, "url": "https://github.com/Vantiq/vantiq-extension-sources", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 9, "size": 16261, "license": "licensed"}}