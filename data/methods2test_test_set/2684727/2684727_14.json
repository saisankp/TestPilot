{"test_class": {"identifier": "LoginPresenterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String EMAIL = \"email@email.com\";", "modifier": "private static final", "type": "String", "declarator": "EMAIL = \"email@email.com\"", "var_name": "EMAIL"}, {"original_string": "private static final String PASSWORD = \"password\";", "modifier": "private static final", "type": "String", "declarator": "PASSWORD = \"password\"", "var_name": "PASSWORD"}, {"original_string": "LoginPresenter presenter;", "modifier": "", "type": "LoginPresenter", "declarator": "presenter", "var_name": "presenter"}, {"original_string": "Context context = ApplicationProvider.getApplicationContext();", "modifier": "", "type": "Context", "declarator": "context = ApplicationProvider.getApplicationContext()", "var_name": "context"}, {"original_string": "@Mock\n    LoginView view;", "modifier": "@Mock", "type": "LoginView", "declarator": "view", "var_name": "view"}, {"original_string": "@Mock\n    LoginInteractor interactor;", "modifier": "@Mock", "type": "LoginInteractor", "declarator": "interactor", "var_name": "interactor"}, {"original_string": "@Mock\n    UiIndicator uiIndicator;", "modifier": "@Mock", "type": "UiIndicator", "declarator": "uiIndicator", "var_name": "uiIndicator"}, {"original_string": "@Mock\n    UserCredentialsPayload userCredentialsPayload;", "modifier": "@Mock", "type": "UserCredentialsPayload", "declarator": "userCredentialsPayload", "var_name": "userCredentialsPayload"}, {"original_string": "@Captor\n    ArgumentCaptor<UserCredentialsPayload> userCredentialsPayloadCaptor;", "modifier": "@Captor", "type": "ArgumentCaptor<UserCredentialsPayload>", "declarator": "userCredentialsPayloadCaptor", "var_name": "userCredentialsPayloadCaptor"}], "file": "app/src/test/java/co/smartreceipts/android/identity/widget/login/LoginPresenterTest.java"}, "test_case": {"identifier": "signUpClickStartsSignUp", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void signUpClickStartsSignUp() {\n        when(view.getSignUpButtonClicks()).thenReturn(Observable.just(Unit.INSTANCE));\n        presenter.subscribe();\n\n        verify(interactor).loginOrSignUp(userCredentialsPayloadCaptor.capture());\n        verify(view).present(UiIndicator.idle());\n        verify(view).present(uiIndicator);\n        verify(interactor, never()).onLoginResultsConsumed();\n        assertEquals(userCredentialsPayloadCaptor.getValue(), new SmartReceiptsUserSignUp(EMAIL, PASSWORD));\n    }", "signature": "void signUpClickStartsSignUp()", "full_signature": "@Test public void signUpClickStartsSignUp()", "class_method_signature": "LoginPresenterTest.signUpClickStartsSignUp()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getSignUpButtonClicks", "just", "subscribe", "loginOrSignUp", "verify", "capture", "present", "verify", "idle", "present", "verify", "onLoginResultsConsumed", "verify", "never", "assertEquals", "getValue"]}, "focal_class": {"identifier": "LoginPresenter", "superclass": "extends BaseViperPresenter<LoginView, LoginInteractor>", "interfaces": "", "fields": [{"original_string": "private static final int MINIMUM_EMAIL_LENGTH = 6;", "modifier": "private static final", "type": "int", "declarator": "MINIMUM_EMAIL_LENGTH = 6", "var_name": "MINIMUM_EMAIL_LENGTH"}, {"original_string": "private static final int MINIMUM_PASSWORD_LENGTH = 8;", "modifier": "private static final", "type": "int", "declarator": "MINIMUM_PASSWORD_LENGTH = 8", "var_name": "MINIMUM_PASSWORD_LENGTH"}, {"original_string": "private final Context context;", "modifier": "private final", "type": "Context", "declarator": "context", "var_name": "context"}], "methods": [{"identifier": "LoginPresenter", "parameters": "(@NonNull Context context, @NonNull LoginView view, @NonNull LoginInteractor interactor)", "modifiers": "@Inject public", "return": "", "signature": " LoginPresenter(@NonNull Context context, @NonNull LoginView view, @NonNull LoginInteractor interactor)", "full_signature": "@Inject public  LoginPresenter(@NonNull Context context, @NonNull LoginView view, @NonNull LoginInteractor interactor)", "class_method_signature": "LoginPresenter.LoginPresenter(@NonNull Context context, @NonNull LoginView view, @NonNull LoginInteractor interactor)", "testcase": false, "constructor": true}, {"identifier": "subscribe", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void subscribe()", "full_signature": "@Override public void subscribe()", "class_method_signature": "LoginPresenter.subscribe()", "testcase": false, "constructor": false}, {"identifier": "simpleEmailFieldValidator", "parameters": "()", "modifiers": "@NonNull private", "return": "Observable<Boolean>", "signature": "Observable<Boolean> simpleEmailFieldValidator()", "full_signature": "@NonNull private Observable<Boolean> simpleEmailFieldValidator()", "class_method_signature": "LoginPresenter.simpleEmailFieldValidator()", "testcase": false, "constructor": false}, {"identifier": "simplePasswordFieldValidator", "parameters": "()", "modifiers": "@NonNull private", "return": "Observable<Boolean>", "signature": "Observable<Boolean> simplePasswordFieldValidator()", "full_signature": "@NonNull private Observable<Boolean> simplePasswordFieldValidator()", "class_method_signature": "LoginPresenter.simplePasswordFieldValidator()", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/identity/widget/login/LoginPresenter.java"}, "focal_method": {"identifier": "subscribe", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void subscribe() {\n        compositeDisposable.add(Observable.concat(\n                interactor.getLastUserCredentialsPayload().toObservable(), // Start by emitting our previous request\n                Observable.merge( // Next, get the stream of clicks as payloads for the ongoing stream\n                        Observable.combineLatest(\n                                view.getEmailTextChanges(),\n                                view.getPasswordTextChanges(),\n                                (BiFunction<CharSequence, CharSequence, UserCredentialsPayload>) SmartReceiptsUserLogin::new)\n                                .flatMap(userCredentialsPayload -> view.getLoginButtonClicks().map(ignored -> userCredentialsPayload)),\n\n                        Observable.combineLatest(\n                                view.getEmailTextChanges(),\n                                view.getPasswordTextChanges(),\n                                (BiFunction<CharSequence, CharSequence, UserCredentialsPayload>) SmartReceiptsUserSignUp::new)\n                                .flatMap(userCredentialsPayload -> view.getSignUpButtonClicks().map(ignored -> userCredentialsPayload)))\n        )\n                .flatMap(interactor::loginOrSignUp)\n                .startWith(UiIndicator.idle())\n                .subscribe(uiIndicator -> {\n                    view.present(uiIndicator);\n                    if (uiIndicator.getState() == UiIndicator.State.Success || uiIndicator.getState() == UiIndicator.State.Error) {\n                        interactor.onLoginResultsConsumed();\n                    }\n                }));\n\n        compositeDisposable.add(Observable.combineLatest(simpleEmailFieldValidator(), simplePasswordFieldValidator(),\n                (isEmailValid, isPasswordValid) -> {\n                    final String message;\n                    if (!isEmailValid) {\n                        message = context.getString(R.string.login_fields_hint_email);\n                    } else if (!isPasswordValid) {\n                        message = context.getString(R.string.login_fields_hint_password);\n                    } else {\n                        message = context.getString(R.string.login_fields_hint_valid);\n                    }\n                    return new UiInputValidationIndicator(message, isEmailValid, isPasswordValid);\n                })\n                .distinctUntilChanged()\n                .subscribe(view::present));\n    }", "signature": "void subscribe()", "full_signature": "@Override public void subscribe()", "class_method_signature": "LoginPresenter.subscribe()", "testcase": false, "constructor": false, "invocations": ["add", "subscribe", "startWith", "flatMap", "concat", "toObservable", "getLastUserCredentialsPayload", "merge", "flatMap", "combineLatest", "getEmailTextChanges", "getPasswordTextChanges", "map", "getLoginButtonClicks", "flatMap", "combineLatest", "getEmailTextChanges", "getPasswordTextChanges", "map", "getSignUpButtonClicks", "idle", "present", "getState", "getState", "onLoginResultsConsumed", "add", "subscribe", "distinctUntilChanged", "combineLatest", "simpleEmailFieldValidator", "simplePasswordFieldValidator", "getString", "getString", "getString"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}