{"test_class": {"identifier": "IntegralConditionTest", "superclass": "", "interfaces": "", "fields": [], "file": "lib/src/test/java/com/busybusy/dbc/conditions/IntegralConditionTest.java"}, "test_case": {"identifier": "isGreaterThanOrEqual", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void isGreaterThanOrEqual() throws Exception\n\t{\n\t\tIntegralCondition<Integer> condition = new IntegralCondition<>(2);\n\t\tcondition.isGreaterThanOrEqual(2);\n\n\t\tassertThatThrownBy(() -> condition.isGreaterThanOrEqual(7))\n\t\t\t\t.isInstanceOf(DbcAssertionError.class)\n\t\t\t\t.hasCauseInstanceOf(IllegalArgumentException.class);\n\t}", "signature": "void isGreaterThanOrEqual()", "full_signature": "@Test public void isGreaterThanOrEqual()", "class_method_signature": "IntegralConditionTest.isGreaterThanOrEqual()", "testcase": true, "constructor": false, "invocations": ["isGreaterThanOrEqual", "hasCauseInstanceOf", "isInstanceOf", "assertThatThrownBy", "isGreaterThanOrEqual"]}, "focal_class": {"identifier": "IntegralCondition", "superclass": "extends BasicCondition<T, IntegralCondition<T>>", "interfaces": "implements NumberChecks<T, IntegralCondition<T>>", "fields": [], "methods": [{"identifier": "IntegralCondition", "parameters": "(T subject)", "modifiers": "public", "return": "", "signature": " IntegralCondition(T subject)", "full_signature": "public  IntegralCondition(T subject)", "class_method_signature": "IntegralCondition.IntegralCondition(T subject)", "testcase": false, "constructor": true}, {"identifier": "isGreaterThan", "parameters": "(T number)", "modifiers": "@Override public", "return": "IntegralCondition<T>", "signature": "IntegralCondition<T> isGreaterThan(T number)", "full_signature": "@Override public IntegralCondition<T> isGreaterThan(T number)", "class_method_signature": "IntegralCondition.isGreaterThan(T number)", "testcase": false, "constructor": false}, {"identifier": "isGreaterThanOrEqual", "parameters": "(T number)", "modifiers": "@Override public", "return": "IntegralCondition<T>", "signature": "IntegralCondition<T> isGreaterThanOrEqual(T number)", "full_signature": "@Override public IntegralCondition<T> isGreaterThanOrEqual(T number)", "class_method_signature": "IntegralCondition.isGreaterThanOrEqual(T number)", "testcase": false, "constructor": false}, {"identifier": "isLessThan", "parameters": "(T number)", "modifiers": "@Override public", "return": "IntegralCondition<T>", "signature": "IntegralCondition<T> isLessThan(T number)", "full_signature": "@Override public IntegralCondition<T> isLessThan(T number)", "class_method_signature": "IntegralCondition.isLessThan(T number)", "testcase": false, "constructor": false}, {"identifier": "isLessThanOrEqual", "parameters": "(T number)", "modifiers": "@Override public", "return": "IntegralCondition<T>", "signature": "IntegralCondition<T> isLessThanOrEqual(T number)", "full_signature": "@Override public IntegralCondition<T> isLessThanOrEqual(T number)", "class_method_signature": "IntegralCondition.isLessThanOrEqual(T number)", "testcase": false, "constructor": false}], "file": "lib/src/main/java/com/busybusy/dbc/conditions/IntegralCondition.java"}, "focal_method": {"identifier": "isGreaterThanOrEqual", "parameters": "(T number)", "modifiers": "@Override public", "return": "IntegralCondition<T>", "body": "@Override\n\tpublic IntegralCondition<T> isGreaterThanOrEqual(T number)\n\t{\n\t\trequire(this.subject).isNotNull();\n\t\trequire(number).isNotNull();\n\n\t\tif (!(this.subject.longValue() >= number.longValue()))\n\t\t{\n\t\t\tDbcAssertionError.throwNew(new IllegalArgumentException(\"Expected integer <\" + this.subject + \"> to be greater than or equal to <\" + number + \">\"), this.message);\n\t\t}\n\n\t\treturn result();\n\t}", "signature": "IntegralCondition<T> isGreaterThanOrEqual(T number)", "full_signature": "@Override public IntegralCondition<T> isGreaterThanOrEqual(T number)", "class_method_signature": "IntegralCondition.isGreaterThanOrEqual(T number)", "testcase": false, "constructor": false, "invocations": ["isNotNull", "require", "isNotNull", "require", "longValue", "longValue", "throwNew", "result"]}, "repository": {"repo_id": 61247013, "url": "https://github.com/busybusy/DBC-Android", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 203, "license": "licensed"}}