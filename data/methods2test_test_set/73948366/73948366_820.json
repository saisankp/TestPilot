{"test_class": {"identifier": "X509RoleCertRequestTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/zts/src/test/java/com/yahoo/athenz/zts/cert/X509RoleCertRequestTest.java"}, "test_case": {"identifier": "testValidateSpiffeRoleCert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateSpiffeRoleCert() throws IOException {\n\n        Path path = Paths.get(\"src/test/resources/spiffe_role.csr\");\n        String csr = new String(Files.readAllBytes(path));\n\n        X509RoleCertRequest certReq = new X509RoleCertRequest(csr);\n\n        Set<String> roles = new HashSet<>();\n        roles.add(\"api\");\n\n        Set<String> orgValues = new HashSet<>();\n        orgValues.add(\"Athenz\");\n\n        assertTrue(certReq.validate(roles, \"coretech\", \"sports.api\", null, orgValues));\n    }", "signature": "void testValidateSpiffeRoleCert()", "full_signature": "@Test public void testValidateSpiffeRoleCert()", "class_method_signature": "X509RoleCertRequestTest.testValidateSpiffeRoleCert()", "testcase": true, "constructor": false, "invocations": ["get", "readAllBytes", "add", "add", "assertTrue", "validate"]}, "focal_class": {"identifier": "X509RoleCertRequest", "superclass": "extends X509CertRequest", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(X509RoleCertRequest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(X509RoleCertRequest.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "X509RoleCertRequest", "parameters": "(String csr)", "modifiers": "public", "return": "", "signature": " X509RoleCertRequest(String csr)", "full_signature": "public  X509RoleCertRequest(String csr)", "class_method_signature": "X509RoleCertRequest.X509RoleCertRequest(String csr)", "testcase": false, "constructor": true}, {"identifier": "getRequestedRoleList", "parameters": "()", "modifiers": "public", "return": "Map<String, String[]>", "signature": "Map<String, String[]> getRequestedRoleList()", "full_signature": "public Map<String, String[]> getRequestedRoleList()", "class_method_signature": "X509RoleCertRequest.getRequestedRoleList()", "testcase": false, "constructor": false}, {"identifier": "validateAndExtractRoleName", "parameters": "(Set<String> roles, final String domainName)", "modifiers": "", "return": "String", "signature": "String validateAndExtractRoleName(Set<String> roles, final String domainName)", "full_signature": " String validateAndExtractRoleName(Set<String> roles, final String domainName)", "class_method_signature": "X509RoleCertRequest.validateAndExtractRoleName(Set<String> roles, final String domainName)", "testcase": false, "constructor": false}, {"identifier": "validateProxyUserUri", "parameters": "(final String proxyUser)", "modifiers": "", "return": "boolean", "signature": "boolean validateProxyUserUri(final String proxyUser)", "full_signature": " boolean validateProxyUserUri(final String proxyUser)", "class_method_signature": "X509RoleCertRequest.validateProxyUserUri(final String proxyUser)", "testcase": false, "constructor": false}, {"identifier": "validateEmail", "parameters": "(final String principal)", "modifiers": "", "return": "boolean", "signature": "boolean validateEmail(final String principal)", "full_signature": " boolean validateEmail(final String principal)", "class_method_signature": "X509RoleCertRequest.validateEmail(final String principal)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Set<String> roles, final String domainName, final String principal,\n            final String proxyUser, Set<String> validCertSubjectOrgValues)", "modifiers": "public", "return": "boolean", "signature": "boolean validate(Set<String> roles, final String domainName, final String principal,\n            final String proxyUser, Set<String> validCertSubjectOrgValues)", "full_signature": "public boolean validate(Set<String> roles, final String domainName, final String principal,\n            final String proxyUser, Set<String> validCertSubjectOrgValues)", "class_method_signature": "X509RoleCertRequest.validate(Set<String> roles, final String domainName, final String principal,\n            final String proxyUser, Set<String> validCertSubjectOrgValues)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(final String principal, final String proxyUser,\n            Set<String> validCertSubjectOrgValues)", "modifiers": "public", "return": "boolean", "signature": "boolean validate(final String principal, final String proxyUser,\n            Set<String> validCertSubjectOrgValues)", "full_signature": "public boolean validate(final String principal, final String proxyUser,\n            Set<String> validCertSubjectOrgValues)", "class_method_signature": "X509RoleCertRequest.validate(final String principal, final String proxyUser,\n            Set<String> validCertSubjectOrgValues)", "testcase": false, "constructor": false}, {"identifier": "validateIPAddress", "parameters": "(X509Certificate cert, final String ip)", "modifiers": "public", "return": "boolean", "signature": "boolean validateIPAddress(X509Certificate cert, final String ip)", "full_signature": "public boolean validateIPAddress(X509Certificate cert, final String ip)", "class_method_signature": "X509RoleCertRequest.validateIPAddress(X509Certificate cert, final String ip)", "testcase": false, "constructor": false}], "file": "servers/zts/src/main/java/com/yahoo/athenz/zts/cert/X509RoleCertRequest.java"}, "focal_method": {"identifier": "validate", "parameters": "(Set<String> roles, final String domainName, final String principal,\n            final String proxyUser, Set<String> validCertSubjectOrgValues)", "modifiers": "public", "return": "boolean", "body": "public boolean validate(Set<String> roles, final String domainName, final String principal,\n            final String proxyUser, Set<String> validCertSubjectOrgValues) {\n\n        // validate that the common name matches to the role name\n        // that is being returned in the response\n\n        final String roleName = validateAndExtractRoleName(roles, domainName);\n        if (roleName == null) {\n            LOGGER.error(\"validateRoleCertificateRequest: unable to validate role name\");\n            return false;\n        }\n\n        // now let's check if we have an rfc822 field for the principal\n\n        if (!validateEmail(principal)) {\n            return false;\n        }\n\n        // let's check if we have a uri for the proxy user\n\n        if (proxyUser != null && !validateProxyUserUri(proxyUser)) {\n            return false;\n        }\n\n        // validate the o field value is specified\n\n        if (!validateSubjectOField(validCertSubjectOrgValues)) {\n            return false;\n        }\n\n        // validate spiffe uri if one is provided\n\n        return validateSpiffeURI(domainName, \"ra\", roleName);\n    }", "signature": "boolean validate(Set<String> roles, final String domainName, final String principal,\n            final String proxyUser, Set<String> validCertSubjectOrgValues)", "full_signature": "public boolean validate(Set<String> roles, final String domainName, final String principal,\n            final String proxyUser, Set<String> validCertSubjectOrgValues)", "class_method_signature": "X509RoleCertRequest.validate(Set<String> roles, final String domainName, final String principal,\n            final String proxyUser, Set<String> validCertSubjectOrgValues)", "testcase": false, "constructor": false, "invocations": ["validateAndExtractRoleName", "error", "validateEmail", "validateProxyUserUri", "validateSubjectOField", "validateSpiffeURI"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}