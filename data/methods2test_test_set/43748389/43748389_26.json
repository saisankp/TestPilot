{"test_class": {"identifier": "InfluxDbReporterFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private InfluxDbReporterFactory factory = new InfluxDbReporterFactory();", "modifier": "private", "type": "InfluxDbReporterFactory", "declarator": "factory = new InfluxDbReporterFactory()", "var_name": "factory"}, {"original_string": "private final Validator validator = BaseValidator.newValidator();", "modifier": "private final", "type": "Validator", "declarator": "validator = BaseValidator.newValidator()", "var_name": "validator"}], "file": "dropwizard-metrics-influxdb/src/test/java/com/izettle/metrics/dw/InfluxDbReporterFactoryTest.java"}, "test_case": {"identifier": "testNoAddressResolutionForInfluxDb", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNoAddressResolutionForInfluxDb() throws Exception {\n        final InfluxDbReporter.Builder builderSpy = mock(InfluxDbReporter.Builder.class);\n        new InfluxDbReporterFactory() {\n            @Override\n            protected InfluxDbReporter.Builder builder(MetricRegistry registry) {\n                return builderSpy;\n            }\n        }.build(new MetricRegistry());\n\n        final ArgumentCaptor<InfluxDbHttpSender> argument = ArgumentCaptor.forClass(InfluxDbHttpSender.class);\n        verify(builderSpy).build(argument.capture());\n\n        final InfluxDbHttpSender influxDb = argument.getValue();\n\n        String url = new URL(\"http\", \"localhost\", 8086, \"/write\").toString() + \"?db=&precision=m\";\n        assertThat(getField(influxDb, InfluxDbHttpSender.class, \"url\")).isEqualTo(new URL(url));\n        assertThat(getField(influxDb, InfluxDbHttpSender.class, \"connectTimeout\")).isEqualTo(1500);\n        assertThat(getField(influxDb, InfluxDbHttpSender.class, \"readTimeout\")).isEqualTo(1500);\n        assertThat(\n            getField(\n                influxDb,\n                InfluxDbHttpSender.class,\n                \"authStringEncoded\")).isEqualTo(Base64.encodeBase64String(\"\".getBytes(UTF_8)));\n    }", "signature": "void testNoAddressResolutionForInfluxDb()", "full_signature": "@Test public void testNoAddressResolutionForInfluxDb()", "class_method_signature": "InfluxDbReporterFactoryTest.testNoAddressResolutionForInfluxDb()", "testcase": true, "constructor": false, "invocations": ["mock", "build", "forClass", "build", "verify", "capture", "getValue", "toString", "isEqualTo", "assertThat", "getField", "isEqualTo", "assertThat", "getField", "isEqualTo", "assertThat", "getField", "isEqualTo", "assertThat", "getField", "encodeBase64String", "getBytes"]}, "focal_class": {"identifier": "InfluxDbReporterFactory", "superclass": "extends BaseReporterFactory", "interfaces": "", "fields": [{"original_string": "@NotEmpty\n    private String protocol = \"http\";", "modifier": "@NotEmpty\n    private", "type": "String", "declarator": "protocol = \"http\"", "var_name": "protocol"}, {"original_string": "@NotEmpty\n    private String host = \"localhost\";", "modifier": "@NotEmpty\n    private", "type": "String", "declarator": "host = \"localhost\"", "var_name": "host"}, {"original_string": "@Range(min = 0, max = 49151)\n    private int port = 8086;", "modifier": "@Range(min = 0, max = 49151)\n    private", "type": "int", "declarator": "port = 8086", "var_name": "port"}, {"original_string": "@NotNull\n    private String prefix = \"\";", "modifier": "@NotNull\n    private", "type": "String", "declarator": "prefix = \"\"", "var_name": "prefix"}, {"original_string": "@NotNull\n    private Map<String, String> tags = new HashMap<>();", "modifier": "@NotNull\n    private", "type": "Map<String, String>", "declarator": "tags = new HashMap<>()", "var_name": "tags"}, {"original_string": "@NotEmpty\n    private ImmutableMap<String, ImmutableSet<String>> fields = ImmutableMap.of(\n        \"timers\",\n        ImmutableSet.of(\"p50\", \"p75\", \"p95\", \"p99\", \"p999\", \"m1_rate\"),\n        \"meters\",\n        ImmutableSet.of(\"m1_rate\"));", "modifier": "@NotEmpty\n    private", "type": "ImmutableMap<String, ImmutableSet<String>>", "declarator": "fields = ImmutableMap.of(\n        \"timers\",\n        ImmutableSet.of(\"p50\", \"p75\", \"p95\", \"p99\", \"p999\", \"m1_rate\"),\n        \"meters\",\n        ImmutableSet.of(\"m1_rate\"))", "var_name": "fields"}, {"original_string": "@NotNull\n    private String database = \"\";", "modifier": "@NotNull\n    private", "type": "String", "declarator": "database = \"\"", "var_name": "database"}, {"original_string": "@NotNull\n    private String auth = \"\";", "modifier": "@NotNull\n    private", "type": "String", "declarator": "auth = \"\"", "var_name": "auth"}, {"original_string": "@Range(min = 500, max = 30000)\n    private int connectTimeout = 1500;", "modifier": "@Range(min = 500, max = 30000)\n    private", "type": "int", "declarator": "connectTimeout = 1500", "var_name": "connectTimeout"}, {"original_string": "@Range(min = 500, max = 30000)\n    private int readTimeout = 1500;", "modifier": "@Range(min = 500, max = 30000)\n    private", "type": "int", "declarator": "readTimeout = 1500", "var_name": "readTimeout"}, {"original_string": "@NotNull\n    private Duration precision = Duration.minutes(1);", "modifier": "@NotNull\n    private", "type": "Duration", "declarator": "precision = Duration.minutes(1)", "var_name": "precision"}, {"original_string": "@NotNull\n    private SenderType senderType = SenderType.HTTP;", "modifier": "@NotNull\n    private", "type": "SenderType", "declarator": "senderType = SenderType.HTTP", "var_name": "senderType"}, {"original_string": "private boolean groupGauges = true;", "modifier": "private", "type": "boolean", "declarator": "groupGauges = true", "var_name": "groupGauges"}, {"original_string": "private ImmutableMap<String, String> measurementMappings = ImmutableMap.of();", "modifier": "private", "type": "ImmutableMap<String, String>", "declarator": "measurementMappings = ImmutableMap.of()", "var_name": "measurementMappings"}, {"original_string": "private ImmutableMap<String, String> defaultMeasurementMappings = ImmutableMap.<String, String>builder()\n        .put(\"health\", \".*\\\\.health(\\\\..*)?$\")\n        .put(\"auth\", \".*\\\\.auth\\\\..*\")\n        .put(\"dao\", \".*\\\\.(jdbi|dao)\\\\..*\")\n        .put(\"resources\", \".*\\\\.resources?\\\\..*\")\n        .put(\"event_handlers\", \".*\\\\.messaging\\\\..*\")\n        .put(\"datasources\", \"io\\\\.dropwizard\\\\.db\\\\.ManagedPooledDataSource.*\")\n        .put(\"clients\", \"org\\\\.apache\\\\.http\\\\.client\\\\.HttpClient.*\")\n        .put(\"client_connections\", \"org\\\\.apache\\\\.http\\\\.conn\\\\.HttpClientConnectionManager.*\")\n        .put(\"connections\", \"org\\\\.eclipse\\\\.jetty\\\\.server\\\\.HttpConnectionFactory.*\")\n        .put(\"thread_pools\", \"org\\\\.eclipse\\\\.jetty\\\\.util\\\\.thread\\\\.QueuedThreadPool.*\")\n        .put(\"logs\", \"ch\\\\.qos\\\\.logback\\\\.core\\\\.Appender.*\")\n        .put(\"http_server\", \"io\\\\.dropwizard\\\\.jetty\\\\.MutableServletContextHandler.*\")\n        .put(\"raw_sql\", \"org\\\\.skife\\\\.jdbi\\\\.v2\\\\.DBI\\\\.raw-sql\")\n        .put(\"jvm\", \"^jvm$\")\n        .put(\"jvm_attribute\", \"jvm\\\\.attribute.*?\")\n        .put(\"jvm_buffers\", \"jvm\\\\.buffers\\\\..*\")\n        .put(\"jvm_classloader\", \"jvm\\\\.classloader.*\")\n        .put(\"jvm_gc\", \"jvm\\\\.gc\\\\..*\")\n        .put(\"jvm_memory\", \"jvm\\\\.memory\\\\..*\")\n        .put(\"jvm_threads\", \"jvm\\\\.threads.*\")\n        .build();", "modifier": "private", "type": "ImmutableMap<String, String>", "declarator": "defaultMeasurementMappings = ImmutableMap.<String, String>builder()\n        .put(\"health\", \".*\\\\.health(\\\\..*)?$\")\n        .put(\"auth\", \".*\\\\.auth\\\\..*\")\n        .put(\"dao\", \".*\\\\.(jdbi|dao)\\\\..*\")\n        .put(\"resources\", \".*\\\\.resources?\\\\..*\")\n        .put(\"event_handlers\", \".*\\\\.messaging\\\\..*\")\n        .put(\"datasources\", \"io\\\\.dropwizard\\\\.db\\\\.ManagedPooledDataSource.*\")\n        .put(\"clients\", \"org\\\\.apache\\\\.http\\\\.client\\\\.HttpClient.*\")\n        .put(\"client_connections\", \"org\\\\.apache\\\\.http\\\\.conn\\\\.HttpClientConnectionManager.*\")\n        .put(\"connections\", \"org\\\\.eclipse\\\\.jetty\\\\.server\\\\.HttpConnectionFactory.*\")\n        .put(\"thread_pools\", \"org\\\\.eclipse\\\\.jetty\\\\.util\\\\.thread\\\\.QueuedThreadPool.*\")\n        .put(\"logs\", \"ch\\\\.qos\\\\.logback\\\\.core\\\\.Appender.*\")\n        .put(\"http_server\", \"io\\\\.dropwizard\\\\.jetty\\\\.MutableServletContextHandler.*\")\n        .put(\"raw_sql\", \"org\\\\.skife\\\\.jdbi\\\\.v2\\\\.DBI\\\\.raw-sql\")\n        .put(\"jvm\", \"^jvm$\")\n        .put(\"jvm_attribute\", \"jvm\\\\.attribute.*?\")\n        .put(\"jvm_buffers\", \"jvm\\\\.buffers\\\\..*\")\n        .put(\"jvm_classloader\", \"jvm\\\\.classloader.*\")\n        .put(\"jvm_gc\", \"jvm\\\\.gc\\\\..*\")\n        .put(\"jvm_memory\", \"jvm\\\\.memory\\\\..*\")\n        .put(\"jvm_threads\", \"jvm\\\\.threads.*\")\n        .build()", "var_name": "defaultMeasurementMappings"}, {"original_string": "private ImmutableSet<String> excludes = ImmutableSet.<String>builder()\n        .add(\"ch.qos.logback.core.Appender.debug\")\n        .add(\"ch.qos.logback.core.Appender.trace\")\n        .add(\"io.dropwizard.jetty.MutableServletContextHandler.percent-4xx-15m\")\n        .add(\"io.dropwizard.jetty.MutableServletContextHandler.percent-4xx-1m\")\n        .add(\"io.dropwizard.jetty.MutableServletContextHandler.percent-4xx-5m\")\n        .add(\"io.dropwizard.jetty.MutableServletContextHandler.percent-5xx-15m\")\n        .add(\"io.dropwizard.jetty.MutableServletContextHandler.percent-5xx-1m\")\n        .add(\"io.dropwizard.jetty.MutableServletContextHandler.percent-5xx-5m\")\n        .add(\"jvm.attribute.name\")\n        .add(\"jvm.attribute.vendor\")\n        .add(\"jvm.memory.heap.usage\")\n        .add(\"jvm.memory.non-heap.usage\")\n        .add(\"jvm.memory.pools.Code-Cache.usage\")\n        .add(\"jvm.memory.pools.Compressed-Class-Space.usage\")\n        .add(\"jvm.memory.pools.Metaspace.usage\")\n        .add(\"jvm.memory.pools.PS-Eden-Space.usage\")\n        .add(\"jvm.memory.pools.PS-Old-Gen.usage\")\n        .add(\"jvm.memory.pools.PS-Survivor-Space.usage\")\n        .build();", "modifier": "private", "type": "ImmutableSet<String>", "declarator": "excludes = ImmutableSet.<String>builder()\n        .add(\"ch.qos.logback.core.Appender.debug\")\n        .add(\"ch.qos.logback.core.Appender.trace\")\n        .add(\"io.dropwizard.jetty.MutableServletContextHandler.percent-4xx-15m\")\n        .add(\"io.dropwizard.jetty.MutableServletContextHandler.percent-4xx-1m\")\n        .add(\"io.dropwizard.jetty.MutableServletContextHandler.percent-4xx-5m\")\n        .add(\"io.dropwizard.jetty.MutableServletContextHandler.percent-5xx-15m\")\n        .add(\"io.dropwizard.jetty.MutableServletContextHandler.percent-5xx-1m\")\n        .add(\"io.dropwizard.jetty.MutableServletContextHandler.percent-5xx-5m\")\n        .add(\"jvm.attribute.name\")\n        .add(\"jvm.attribute.vendor\")\n        .add(\"jvm.memory.heap.usage\")\n        .add(\"jvm.memory.non-heap.usage\")\n        .add(\"jvm.memory.pools.Code-Cache.usage\")\n        .add(\"jvm.memory.pools.Compressed-Class-Space.usage\")\n        .add(\"jvm.memory.pools.Metaspace.usage\")\n        .add(\"jvm.memory.pools.PS-Eden-Space.usage\")\n        .add(\"jvm.memory.pools.PS-Old-Gen.usage\")\n        .add(\"jvm.memory.pools.PS-Survivor-Space.usage\")\n        .build()", "var_name": "excludes"}, {"original_string": "@NotNull\n    private Transformer tagsTransformer = new ClassBasedTransformer();", "modifier": "@NotNull\n    private", "type": "Transformer", "declarator": "tagsTransformer = new ClassBasedTransformer()", "var_name": "tagsTransformer"}], "methods": [{"identifier": "getProtocol", "parameters": "()", "modifiers": "@JsonProperty public", "return": "String", "signature": "String getProtocol()", "full_signature": "@JsonProperty public String getProtocol()", "class_method_signature": "InfluxDbReporterFactory.getProtocol()", "testcase": false, "constructor": false}, {"identifier": "setProtocol", "parameters": "(String protocol)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setProtocol(String protocol)", "full_signature": "@JsonProperty public void setProtocol(String protocol)", "class_method_signature": "InfluxDbReporterFactory.setProtocol(String protocol)", "testcase": false, "constructor": false}, {"identifier": "getHost", "parameters": "()", "modifiers": "@JsonProperty public", "return": "String", "signature": "String getHost()", "full_signature": "@JsonProperty public String getHost()", "class_method_signature": "InfluxDbReporterFactory.getHost()", "testcase": false, "constructor": false}, {"identifier": "setHost", "parameters": "(String host)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setHost(String host)", "full_signature": "@JsonProperty public void setHost(String host)", "class_method_signature": "InfluxDbReporterFactory.setHost(String host)", "testcase": false, "constructor": false}, {"identifier": "getPort", "parameters": "()", "modifiers": "@JsonProperty public", "return": "int", "signature": "int getPort()", "full_signature": "@JsonProperty public int getPort()", "class_method_signature": "InfluxDbReporterFactory.getPort()", "testcase": false, "constructor": false}, {"identifier": "setPort", "parameters": "(int port)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setPort(int port)", "full_signature": "@JsonProperty public void setPort(int port)", "class_method_signature": "InfluxDbReporterFactory.setPort(int port)", "testcase": false, "constructor": false}, {"identifier": "getPrefix", "parameters": "()", "modifiers": "@JsonProperty public", "return": "String", "signature": "String getPrefix()", "full_signature": "@JsonProperty public String getPrefix()", "class_method_signature": "InfluxDbReporterFactory.getPrefix()", "testcase": false, "constructor": false}, {"identifier": "setPrefix", "parameters": "(String prefix)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setPrefix(String prefix)", "full_signature": "@JsonProperty public void setPrefix(String prefix)", "class_method_signature": "InfluxDbReporterFactory.setPrefix(String prefix)", "testcase": false, "constructor": false}, {"identifier": "getTags", "parameters": "()", "modifiers": "@JsonProperty private", "return": "Map<String, String>", "signature": "Map<String, String> getTags()", "full_signature": "@JsonProperty private Map<String, String> getTags()", "class_method_signature": "InfluxDbReporterFactory.getTags()", "testcase": false, "constructor": false}, {"identifier": "setTags", "parameters": "(Map<String, String> tags)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setTags(Map<String, String> tags)", "full_signature": "@JsonProperty public void setTags(Map<String, String> tags)", "class_method_signature": "InfluxDbReporterFactory.setTags(Map<String, String> tags)", "testcase": false, "constructor": false}, {"identifier": "getFields", "parameters": "()", "modifiers": "@JsonProperty public", "return": "ImmutableMap<String, ImmutableSet<String>>", "signature": "ImmutableMap<String, ImmutableSet<String>> getFields()", "full_signature": "@JsonProperty public ImmutableMap<String, ImmutableSet<String>> getFields()", "class_method_signature": "InfluxDbReporterFactory.getFields()", "testcase": false, "constructor": false}, {"identifier": "setFields", "parameters": "(ImmutableMap<String, ImmutableSet<String>> fields)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setFields(ImmutableMap<String, ImmutableSet<String>> fields)", "full_signature": "@JsonProperty public void setFields(ImmutableMap<String, ImmutableSet<String>> fields)", "class_method_signature": "InfluxDbReporterFactory.setFields(ImmutableMap<String, ImmutableSet<String>> fields)", "testcase": false, "constructor": false}, {"identifier": "getDatabase", "parameters": "()", "modifiers": "@JsonProperty public", "return": "String", "signature": "String getDatabase()", "full_signature": "@JsonProperty public String getDatabase()", "class_method_signature": "InfluxDbReporterFactory.getDatabase()", "testcase": false, "constructor": false}, {"identifier": "setDatabase", "parameters": "(String database)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setDatabase(String database)", "full_signature": "@JsonProperty public void setDatabase(String database)", "class_method_signature": "InfluxDbReporterFactory.setDatabase(String database)", "testcase": false, "constructor": false}, {"identifier": "getAuth", "parameters": "()", "modifiers": "@JsonProperty public", "return": "String", "signature": "String getAuth()", "full_signature": "@JsonProperty public String getAuth()", "class_method_signature": "InfluxDbReporterFactory.getAuth()", "testcase": false, "constructor": false}, {"identifier": "setAuth", "parameters": "(String auth)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setAuth(String auth)", "full_signature": "@JsonProperty public void setAuth(String auth)", "class_method_signature": "InfluxDbReporterFactory.setAuth(String auth)", "testcase": false, "constructor": false}, {"identifier": "getConnectTimeout", "parameters": "()", "modifiers": "@JsonProperty public", "return": "int", "signature": "int getConnectTimeout()", "full_signature": "@JsonProperty public int getConnectTimeout()", "class_method_signature": "InfluxDbReporterFactory.getConnectTimeout()", "testcase": false, "constructor": false}, {"identifier": "setConnectTimeout", "parameters": "(int connectTimeout)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setConnectTimeout(int connectTimeout)", "full_signature": "@JsonProperty public void setConnectTimeout(int connectTimeout)", "class_method_signature": "InfluxDbReporterFactory.setConnectTimeout(int connectTimeout)", "testcase": false, "constructor": false}, {"identifier": "getReadTimeout", "parameters": "()", "modifiers": "@JsonProperty public", "return": "int", "signature": "int getReadTimeout()", "full_signature": "@JsonProperty public int getReadTimeout()", "class_method_signature": "InfluxDbReporterFactory.getReadTimeout()", "testcase": false, "constructor": false}, {"identifier": "setReadTimeout", "parameters": "(int readTimeout)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setReadTimeout(int readTimeout)", "full_signature": "@JsonProperty public void setReadTimeout(int readTimeout)", "class_method_signature": "InfluxDbReporterFactory.setReadTimeout(int readTimeout)", "testcase": false, "constructor": false}, {"identifier": "getGroupGauges", "parameters": "()", "modifiers": "@JsonProperty public", "return": "boolean", "signature": "boolean getGroupGauges()", "full_signature": "@JsonProperty public boolean getGroupGauges()", "class_method_signature": "InfluxDbReporterFactory.getGroupGauges()", "testcase": false, "constructor": false}, {"identifier": "setGroupGauges", "parameters": "(boolean groupGauges)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setGroupGauges(boolean groupGauges)", "full_signature": "@JsonProperty public void setGroupGauges(boolean groupGauges)", "class_method_signature": "InfluxDbReporterFactory.setGroupGauges(boolean groupGauges)", "testcase": false, "constructor": false}, {"identifier": "getPrecision", "parameters": "()", "modifiers": "@JsonProperty public", "return": "Duration", "signature": "Duration getPrecision()", "full_signature": "@JsonProperty public Duration getPrecision()", "class_method_signature": "InfluxDbReporterFactory.getPrecision()", "testcase": false, "constructor": false}, {"identifier": "setPrecision", "parameters": "(Duration precision)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setPrecision(Duration precision)", "full_signature": "@JsonProperty public void setPrecision(Duration precision)", "class_method_signature": "InfluxDbReporterFactory.setPrecision(Duration precision)", "testcase": false, "constructor": false}, {"identifier": "getMeasurementMappings", "parameters": "()", "modifiers": "@JsonProperty public", "return": "Map<String, String>", "signature": "Map<String, String> getMeasurementMappings()", "full_signature": "@JsonProperty public Map<String, String> getMeasurementMappings()", "class_method_signature": "InfluxDbReporterFactory.getMeasurementMappings()", "testcase": false, "constructor": false}, {"identifier": "setMeasurementMappings", "parameters": "(ImmutableMap<String, String> measurementMappings)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setMeasurementMappings(ImmutableMap<String, String> measurementMappings)", "full_signature": "@JsonProperty public void setMeasurementMappings(ImmutableMap<String, String> measurementMappings)", "class_method_signature": "InfluxDbReporterFactory.setMeasurementMappings(ImmutableMap<String, String> measurementMappings)", "testcase": false, "constructor": false}, {"identifier": "getDefaultMeasurementMappings", "parameters": "()", "modifiers": "@JsonProperty public", "return": "Map<String, String>", "signature": "Map<String, String> getDefaultMeasurementMappings()", "full_signature": "@JsonProperty public Map<String, String> getDefaultMeasurementMappings()", "class_method_signature": "InfluxDbReporterFactory.getDefaultMeasurementMappings()", "testcase": false, "constructor": false}, {"identifier": "getExcludes", "parameters": "()", "modifiers": "@JsonProperty @Override public", "return": "ImmutableSet<String>", "signature": "ImmutableSet<String> getExcludes()", "full_signature": "@JsonProperty @Override public ImmutableSet<String> getExcludes()", "class_method_signature": "InfluxDbReporterFactory.getExcludes()", "testcase": false, "constructor": false}, {"identifier": "setExcludes", "parameters": "(Set<String> excludes)", "modifiers": "@JsonProperty @Override public", "return": "void", "signature": "void setExcludes(Set<String> excludes)", "full_signature": "@JsonProperty @Override public void setExcludes(Set<String> excludes)", "class_method_signature": "InfluxDbReporterFactory.setExcludes(Set<String> excludes)", "testcase": false, "constructor": false}, {"identifier": "setDefaultMeasurementMappings", "parameters": "(ImmutableMap<String, String> defaultMeasurementMappings)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setDefaultMeasurementMappings(ImmutableMap<String, String> defaultMeasurementMappings)", "full_signature": "@JsonProperty public void setDefaultMeasurementMappings(ImmutableMap<String, String> defaultMeasurementMappings)", "class_method_signature": "InfluxDbReporterFactory.setDefaultMeasurementMappings(ImmutableMap<String, String> defaultMeasurementMappings)", "testcase": false, "constructor": false}, {"identifier": "setSenderType", "parameters": "(SenderType senderType)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setSenderType(SenderType senderType)", "full_signature": "@JsonProperty public void setSenderType(SenderType senderType)", "class_method_signature": "InfluxDbReporterFactory.setSenderType(SenderType senderType)", "testcase": false, "constructor": false}, {"identifier": "getSenderType", "parameters": "()", "modifiers": "@JsonProperty public", "return": "SenderType", "signature": "SenderType getSenderType()", "full_signature": "@JsonProperty public SenderType getSenderType()", "class_method_signature": "InfluxDbReporterFactory.getSenderType()", "testcase": false, "constructor": false}, {"identifier": "setTagsTransformer", "parameters": "(Transformer tagsTransformer)", "modifiers": "@JsonProperty public", "return": "void", "signature": "void setTagsTransformer(Transformer tagsTransformer)", "full_signature": "@JsonProperty public void setTagsTransformer(Transformer tagsTransformer)", "class_method_signature": "InfluxDbReporterFactory.setTagsTransformer(Transformer tagsTransformer)", "testcase": false, "constructor": false}, {"identifier": "getTagsTransformer", "parameters": "()", "modifiers": "@JsonProperty public", "return": "Transformer", "signature": "Transformer getTagsTransformer()", "full_signature": "@JsonProperty public Transformer getTagsTransformer()", "class_method_signature": "InfluxDbReporterFactory.getTagsTransformer()", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(MetricRegistry registry)", "modifiers": "@Override public", "return": "ScheduledReporter", "signature": "ScheduledReporter build(MetricRegistry registry)", "full_signature": "@Override public ScheduledReporter build(MetricRegistry registry)", "class_method_signature": "InfluxDbReporterFactory.build(MetricRegistry registry)", "testcase": false, "constructor": false}, {"identifier": "buildMeasurementMappings", "parameters": "()", "modifiers": "protected", "return": "Map<String, String>", "signature": "Map<String, String> buildMeasurementMappings()", "full_signature": "protected Map<String, String> buildMeasurementMappings()", "class_method_signature": "InfluxDbReporterFactory.buildMeasurementMappings()", "testcase": false, "constructor": false}, {"identifier": "isMeasurementMappingRegularExpressions", "parameters": "()", "modifiers": "@ValidationMethod(message = \"measurementMappings must be regular expressions\") public", "return": "boolean", "signature": "boolean isMeasurementMappingRegularExpressions()", "full_signature": "@ValidationMethod(message = \"measurementMappings must be regular expressions\") public boolean isMeasurementMappingRegularExpressions()", "class_method_signature": "InfluxDbReporterFactory.isMeasurementMappingRegularExpressions()", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "(MetricRegistry registry)", "modifiers": "@VisibleForTesting protected", "return": "InfluxDbReporter.Builder", "signature": "InfluxDbReporter.Builder builder(MetricRegistry registry)", "full_signature": "@VisibleForTesting protected InfluxDbReporter.Builder builder(MetricRegistry registry)", "class_method_signature": "InfluxDbReporterFactory.builder(MetricRegistry registry)", "testcase": false, "constructor": false}], "file": "dropwizard-metrics-influxdb/src/main/java/com/izettle/metrics/dw/InfluxDbReporterFactory.java"}, "focal_method": {"identifier": "build", "parameters": "(MetricRegistry registry)", "modifiers": "@Override public", "return": "ScheduledReporter", "body": "@Override\n    public ScheduledReporter build(MetricRegistry registry) {\n        try {\n            InfluxDbReporter.Builder builder = builder(registry);\n\n            switch (senderType) {\n                case HTTP:\n                    return builder.build(\n                        new InfluxDbHttpSender(\n                            protocol,\n                            host,\n                            port,\n                            database,\n                            auth,\n                            precision.getUnit(),\n                            connectTimeout,\n                            readTimeout,\n                            prefix\n                        )\n                    );\n                case TCP:\n                    return builder.build(\n                        new InfluxDbTcpSender(\n                            host,\n                            port,\n                            readTimeout,\n                            database,\n                            prefix\n                        )\n                    );\n                case UDP:\n                    return builder.build(\n                        new InfluxDbUdpSender(\n                            host,\n                            port,\n                            readTimeout,\n                            database,\n                            prefix\n                        )\n                    );\n                case LOGGER:\n                    return builder.build(\n                        new InfluxDbLoggerSender(\n                            database,\n                            TimeUnit.MILLISECONDS,\n                            prefix\n                        )\n                    );\n                case KAFKA:\n                        return builder.build(\n                        new InfluxDBKafkaSender(\n                            database,\n                            TimeUnit.MILLISECONDS,\n                            prefix\n                        )\n                     );\n                default:\n                    throw new UnsupportedDataTypeException(\"The Sender Type is not supported. \");\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }", "signature": "ScheduledReporter build(MetricRegistry registry)", "full_signature": "@Override public ScheduledReporter build(MetricRegistry registry)", "class_method_signature": "InfluxDbReporterFactory.build(MetricRegistry registry)", "testcase": false, "constructor": false, "invocations": ["builder", "build", "getUnit", "build", "build", "build", "build"]}, "repository": {"repo_id": 43748389, "url": "https://github.com/iZettle/dropwizard-metrics-influxdb", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 82, "size": 272, "license": "licensed"}}