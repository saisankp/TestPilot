{"test_class": {"identifier": "ErrorLoggerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static ErrorLogger UNDER_TEST;", "modifier": "private static", "type": "ErrorLogger", "declarator": "UNDER_TEST", "var_name": "UNDER_TEST"}, {"original_string": "private static Path LOGS_DIR;", "modifier": "private static", "type": "Path", "declarator": "LOGS_DIR", "var_name": "LOGS_DIR"}, {"original_string": "private static PlanSystem SYSTEM;", "modifier": "private static", "type": "PlanSystem", "declarator": "SYSTEM", "var_name": "SYSTEM"}], "file": "Plan/common/src/test/java/com/djrapitops/plan/utilities/logging/ErrorLoggerTest.java"}, "test_case": {"identifier": "errorWithSuppressedIsLogged", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void errorWithSuppressedIsLogged() throws IOException {\n        IllegalStateException error = new IllegalStateException();\n        error.addSuppressed(new IllegalArgumentException());\n        error.addSuppressed(new NullPointerException());\n\n        assertTimeoutPreemptively(Duration.ofMillis(500), () ->\n                UNDER_TEST.log(L.WARN, error, ErrorContext.builder()\n                        .whatToDo(\"Succeed the test\")\n                        .related(\"Test object\")\n                        .build())\n        );\n\n        List<String> lines = getLines(error.getClass().getSimpleName());\n        assertTrue(lines.contains(\"java.lang.IllegalStateException\"), () -> \"Did not contain 'java.lang.IllegalStateException', \" + lines);\n        assertTrue(lines.contains(\"   Suppressed:\"), () -> \"Did not contain '   Suppressed:', \" + lines);\n        assertTrue(lines.contains(\"   java.lang.IllegalArgumentException\"), () -> \"Did not contain '   java.lang.IllegalArgumentException', \" + lines);\n        assertTrue(lines.contains(\"   java.lang.NullPointerException\"), () -> \"Did not contain '   java.lang.NullPointerException', \" + lines);\n    }", "signature": "void errorWithSuppressedIsLogged()", "full_signature": "@Test void errorWithSuppressedIsLogged()", "class_method_signature": "ErrorLoggerTest.errorWithSuppressedIsLogged()", "testcase": true, "constructor": false, "invocations": ["addSuppressed", "addSuppressed", "assertTimeoutPreemptively", "ofMillis", "log", "build", "related", "whatToDo", "builder", "getLines", "getSimpleName", "getClass", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "ErrorLogger", "superclass": "", "interfaces": "implements ErrorHandler", "fields": [{"original_string": "private final PlanPlugin plugin;", "modifier": "private final", "type": "PlanPlugin", "declarator": "plugin", "var_name": "plugin"}, {"original_string": "private final PluginLogger logger;", "modifier": "private final", "type": "PluginLogger", "declarator": "logger", "var_name": "logger"}, {"original_string": "private final PlanFiles files;", "modifier": "private final", "type": "PlanFiles", "declarator": "files", "var_name": "files"}, {"original_string": "private final Lazy<ServerProperties> serverProperties;", "modifier": "private final", "type": "Lazy<ServerProperties>", "declarator": "serverProperties", "var_name": "serverProperties"}, {"original_string": "private final Lazy<VersionChecker> versionChecker;", "modifier": "private final", "type": "Lazy<VersionChecker>", "declarator": "versionChecker", "var_name": "versionChecker"}, {"original_string": "private final Lazy<Formatters> formatters;", "modifier": "private final", "type": "Lazy<Formatters>", "declarator": "formatters", "var_name": "formatters"}], "methods": [{"identifier": "ErrorLogger", "parameters": "(\n            PlanPlugin plugin,\n            PluginLogger logger,\n            PlanFiles files,\n            Lazy<ServerProperties> serverProperties,\n            Lazy<VersionChecker> versionChecker,\n            Lazy<Formatters> formatters\n    )", "modifiers": "@Inject public", "return": "", "signature": " ErrorLogger(\n            PlanPlugin plugin,\n            PluginLogger logger,\n            PlanFiles files,\n            Lazy<ServerProperties> serverProperties,\n            Lazy<VersionChecker> versionChecker,\n            Lazy<Formatters> formatters\n    )", "full_signature": "@Inject public  ErrorLogger(\n            PlanPlugin plugin,\n            PluginLogger logger,\n            PlanFiles files,\n            Lazy<ServerProperties> serverProperties,\n            Lazy<VersionChecker> versionChecker,\n            Lazy<Formatters> formatters\n    )", "class_method_signature": "ErrorLogger.ErrorLogger(\n            PlanPlugin plugin,\n            PluginLogger logger,\n            PlanFiles files,\n            Lazy<ServerProperties> serverProperties,\n            Lazy<VersionChecker> versionChecker,\n            Lazy<Formatters> formatters\n    )", "testcase": false, "constructor": true}, {"identifier": "log", "parameters": "(L level, T throwable)", "modifiers": "public", "return": "void", "signature": "void log(L level, T throwable)", "full_signature": "public void log(L level, T throwable)", "class_method_signature": "ErrorLogger.log(L level, T throwable)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(L level, Throwable throwable, ErrorContext context)", "modifiers": "public", "return": "void", "signature": "void log(L level, Throwable throwable, ErrorContext context)", "full_signature": "public void log(L level, Throwable throwable, ErrorContext context)", "class_method_signature": "ErrorLogger.log(L level, Throwable throwable, ErrorContext context)", "testcase": false, "constructor": false}, {"identifier": "mergeAdditionalContext", "parameters": "(Throwable throwable, ErrorContext context)", "modifiers": "public", "return": "void", "signature": "void mergeAdditionalContext(Throwable throwable, ErrorContext context)", "full_signature": "public void mergeAdditionalContext(Throwable throwable, ErrorContext context)", "class_method_signature": "ErrorLogger.mergeAdditionalContext(Throwable throwable, ErrorContext context)", "testcase": false, "constructor": false}, {"identifier": "logExisting", "parameters": "(Path errorLog, Throwable throwable, ErrorContext context, String hash)", "modifiers": "private", "return": "void", "signature": "void logExisting(Path errorLog, Throwable throwable, ErrorContext context, String hash)", "full_signature": "private void logExisting(Path errorLog, Throwable throwable, ErrorContext context, String hash)", "class_method_signature": "ErrorLogger.logExisting(Path errorLog, Throwable throwable, ErrorContext context, String hash)", "testcase": false, "constructor": false}, {"identifier": "overwrite", "parameters": "(Path errorLog, Throwable throwable, List<String> newLines)", "modifiers": "private", "return": "void", "signature": "void overwrite(Path errorLog, Throwable throwable, List<String> newLines)", "full_signature": "private void overwrite(Path errorLog, Throwable throwable, List<String> newLines)", "class_method_signature": "ErrorLogger.overwrite(Path errorLog, Throwable throwable, List<String> newLines)", "testcase": false, "constructor": false}, {"identifier": "buildNewLines", "parameters": "(ErrorContext context, List<String> lines, int occurrences, String hash)", "modifiers": "private", "return": "List<String>", "signature": "List<String> buildNewLines(ErrorContext context, List<String> lines, int occurrences, String hash)", "full_signature": "private List<String> buildNewLines(ErrorContext context, List<String> lines, int occurrences, String hash)", "class_method_signature": "ErrorLogger.buildNewLines(ErrorContext context, List<String> lines, int occurrences, String hash)", "testcase": false, "constructor": false}, {"identifier": "getTimeStamp", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getTimeStamp()", "full_signature": "private String getTimeStamp()", "class_method_signature": "ErrorLogger.getTimeStamp()", "testcase": false, "constructor": false}, {"identifier": "buildContext", "parameters": "(ErrorContext context, int occurrences, Lists.Builder<String> builder)", "modifiers": "private", "return": "Lists.Builder<String>", "signature": "Lists.Builder<String> buildContext(ErrorContext context, int occurrences, Lists.Builder<String> builder)", "full_signature": "private Lists.Builder<String> buildContext(ErrorContext context, int occurrences, Lists.Builder<String> builder)", "class_method_signature": "ErrorLogger.buildContext(ErrorContext context, int occurrences, Lists.Builder<String> builder)", "testcase": false, "constructor": false}, {"identifier": "logAfterReadError", "parameters": "(Path errorLog, Throwable throwable, ErrorContext context, String hash)", "modifiers": "private", "return": "void", "signature": "void logAfterReadError(Path errorLog, Throwable throwable, ErrorContext context, String hash)", "full_signature": "private void logAfterReadError(Path errorLog, Throwable throwable, ErrorContext context, String hash)", "class_method_signature": "ErrorLogger.logAfterReadError(Path errorLog, Throwable throwable, ErrorContext context, String hash)", "testcase": false, "constructor": false}, {"identifier": "getOccurrences", "parameters": "(List<String> lines)", "modifiers": "private", "return": "int", "signature": "int getOccurrences(List<String> lines)", "full_signature": "private int getOccurrences(List<String> lines)", "class_method_signature": "ErrorLogger.getOccurrences(List<String> lines)", "testcase": false, "constructor": false}, {"identifier": "findFirstContextLine", "parameters": "(List<String> lines, int lineCount)", "modifiers": "private", "return": "int", "signature": "int findFirstContextLine(List<String> lines, int lineCount)", "full_signature": "private int findFirstContextLine(List<String> lines, int lineCount)", "class_method_signature": "ErrorLogger.findFirstContextLine(List<String> lines, int lineCount)", "testcase": false, "constructor": false}, {"identifier": "logToConsole", "parameters": "(L level, Path errorLog, Throwable throwable, ErrorContext context)", "modifiers": "private", "return": "void", "signature": "void logToConsole(L level, Path errorLog, Throwable throwable, ErrorContext context)", "full_signature": "private void logToConsole(L level, Path errorLog, Throwable throwable, ErrorContext context)", "class_method_signature": "ErrorLogger.logToConsole(L level, Path errorLog, Throwable throwable, ErrorContext context)", "testcase": false, "constructor": false}, {"identifier": "logNew", "parameters": "(Path errorLog, Throwable throwable, ErrorContext context, String hash)", "modifiers": "private", "return": "void", "signature": "void logNew(Path errorLog, Throwable throwable, ErrorContext context, String hash)", "full_signature": "private void logNew(Path errorLog, Throwable throwable, ErrorContext context, String hash)", "class_method_signature": "ErrorLogger.logNew(Path errorLog, Throwable throwable, ErrorContext context, String hash)", "testcase": false, "constructor": false}, {"identifier": "writeNew", "parameters": "(Path errorLog, Throwable throwable, List<String> lines)", "modifiers": "private", "return": "void", "signature": "void writeNew(Path errorLog, Throwable throwable, List<String> lines)", "full_signature": "private void writeNew(Path errorLog, Throwable throwable, List<String> lines)", "class_method_signature": "ErrorLogger.writeNew(Path errorLog, Throwable throwable, List<String> lines)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(L level, Class caughtBy, Throwable throwable)", "modifiers": "@Override @Deprecated public", "return": "void", "signature": "void log(L level, Class caughtBy, Throwable throwable)", "full_signature": "@Override @Deprecated public void log(L level, Class caughtBy, Throwable throwable)", "class_method_signature": "ErrorLogger.log(L level, Class caughtBy, Throwable throwable)", "testcase": false, "constructor": false}, {"identifier": "hash", "parameters": "(Throwable e)", "modifiers": "private", "return": "String", "signature": "String hash(Throwable e)", "full_signature": "private String hash(Throwable e)", "class_method_signature": "ErrorLogger.hash(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "buildReadableStacktrace", "parameters": "(List<String> trace, Throwable e)", "modifiers": "private", "return": "List<String>", "signature": "List<String> buildReadableStacktrace(List<String> trace, Throwable e)", "full_signature": "private List<String> buildReadableStacktrace(List<String> trace, Throwable e)", "class_method_signature": "ErrorLogger.buildReadableStacktrace(List<String> trace, Throwable e)", "testcase": false, "constructor": false}], "file": "Plan/common/src/main/java/com/djrapitops/plan/utilities/logging/ErrorLogger.java"}, "focal_method": {"identifier": "log", "parameters": "(L level, T throwable)", "modifiers": "public", "return": "void", "body": "public <T extends ExceptionWithContext> void log(L level, T throwable) {\n        log(level, (Throwable) throwable, throwable.getContext().orElse(ErrorContext.builder().related(\"Missing Context\").build()));\n    }", "signature": "void log(L level, T throwable)", "full_signature": "public void log(L level, T throwable)", "class_method_signature": "ErrorLogger.log(L level, T throwable)", "testcase": false, "constructor": false, "invocations": ["log", "orElse", "getContext", "build", "related", "builder"]}, "repository": {"repo_id": 75960287, "url": "https://github.com/plan-player-analytics/Plan", "stars": 172, "created": "12/8/2016 5:34:11 PM +00:00", "updates": "2020-01-27T14:34:49+00:00", "fork": "False", "license": "licensed"}}