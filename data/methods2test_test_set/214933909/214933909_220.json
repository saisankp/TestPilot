{"test_class": {"identifier": "SelectEntityControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private WebApplicationContext webApplicationContext;", "modifier": "@Autowired\n    private", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}, {"original_string": "@MockBean\n    private UserLoginInterceptor userLoginInterceptor;", "modifier": "@MockBean\n    private", "type": "UserLoginInterceptor", "declarator": "userLoginInterceptor", "var_name": "userLoginInterceptor"}, {"original_string": "@MockBean\n    private CommStatusInterceptor commStatusInterceptor;", "modifier": "@MockBean\n    private", "type": "CommStatusInterceptor", "declarator": "commStatusInterceptor", "var_name": "commStatusInterceptor"}, {"original_string": "@MockBean\n    private PermissionService permissionService;", "modifier": "@MockBean\n    private", "type": "PermissionService", "declarator": "permissionService", "var_name": "permissionService"}, {"original_string": "@MockBean\n    private Message message;", "modifier": "@MockBean\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@MockBean\n    private SelectEntityDao selectEntityDao;", "modifier": "@MockBean\n    private", "type": "SelectEntityDao", "declarator": "selectEntityDao", "var_name": "selectEntityDao"}, {"original_string": "@MockBean\n    private SelectEntityService selectEntityService;", "modifier": "@MockBean\n    private", "type": "SelectEntityService", "declarator": "selectEntityService", "var_name": "selectEntityService"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "private String requestJson;", "modifier": "private", "type": "String", "declarator": "requestJson", "var_name": "requestJson"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/controller/SelectEntityControllerTest.java"}, "test_case": {"identifier": "list", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void list() throws Exception {\n        Paging<TaskSql> paging = new Paging<>();\n        paging.setData(new TaskSql());\n        String requestJson = JSONObject.toJSONString(paging);\n        mockMvc.perform(MockMvcRequestBuilders.post(\"/selectEntity/list\")\n                .contentType(MediaType.APPLICATION_JSON_UTF8)\n                .content(requestJson)\n                .accept(MediaType.APPLICATION_JSON_UTF8))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andDo(MockMvcResultHandlers.print());\n    }", "signature": "void list()", "full_signature": "@Test public void list()", "class_method_signature": "SelectEntityControllerTest.list()", "testcase": true, "constructor": false, "invocations": ["setData", "toJSONString", "andDo", "andExpect", "perform", "accept", "content", "contentType", "post", "isOk", "status", "print"]}, "focal_class": {"identifier": "SelectEntityController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private Message message;", "modifier": "@Autowired\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@Autowired\n    private SelectEntityDao selectEntityDao;", "modifier": "@Autowired\n    private", "type": "SelectEntityDao", "declarator": "selectEntityDao", "var_name": "selectEntityDao"}, {"original_string": "@Autowired\n    private SelectEntityService selectEntityService;", "modifier": "@Autowired\n    private", "type": "SelectEntityService", "declarator": "selectEntityService", "var_name": "selectEntityService"}], "methods": [{"identifier": "list", "parameters": "(@RequestBody Paging<TaskSql> paging)", "modifiers": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public", "return": "ServiceResult<ListResult<TaskSqlView>>", "signature": "ServiceResult<ListResult<TaskSqlView>> list(@RequestBody Paging<TaskSql> paging)", "full_signature": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public ServiceResult<ListResult<TaskSqlView>> list(@RequestBody Paging<TaskSql> paging)", "class_method_signature": "SelectEntityController.list(@RequestBody Paging<TaskSql> paging)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(@Validated(AddSelectEntity.class) @RequestBody TaskSql taskSql, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> add(@Validated(AddSelectEntity.class) @RequestBody TaskSql taskSql, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public ServiceResult<String> add(@Validated(AddSelectEntity.class) @RequestBody TaskSql taskSql, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "SelectEntityController.add(@Validated(AddSelectEntity.class) @RequestBody TaskSql taskSql, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@Validated(UpdateSelectEntity.class) @RequestBody TaskSql taskSql, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> update(@Validated(UpdateSelectEntity.class) @RequestBody TaskSql taskSql, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public ServiceResult<String> update(@Validated(UpdateSelectEntity.class) @RequestBody TaskSql taskSql, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "SelectEntityController.update(@Validated(UpdateSelectEntity.class) @RequestBody TaskSql taskSql, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@Validated(DeleteSelectEntity.class) @RequestBody TaskSql taskSql, @CurrentUser LoginUser user, Errors errors)", "modifiers": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> delete(@Validated(DeleteSelectEntity.class) @RequestBody TaskSql taskSql, @CurrentUser LoginUser user, Errors errors)", "full_signature": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public ServiceResult<String> delete(@Validated(DeleteSelectEntity.class) @RequestBody TaskSql taskSql, @CurrentUser LoginUser user, Errors errors)", "class_method_signature": "SelectEntityController.delete(@Validated(DeleteSelectEntity.class) @RequestBody TaskSql taskSql, @CurrentUser LoginUser user, Errors errors)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/controller/SelectEntityController.java"}, "focal_method": {"identifier": "list", "parameters": "(@RequestBody Paging<TaskSql> paging)", "modifiers": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public", "return": "ServiceResult<ListResult<TaskSqlView>>", "body": "@RequestMapping(value = \"/list\", method = RequestMethod.POST)\n    public ServiceResult<ListResult<TaskSqlView>> list(@RequestBody Paging<TaskSql> paging) throws SQLException {\n        return ServiceResult.success(selectEntityService.findSelectEntityPageList(paging));\n    }", "signature": "ServiceResult<ListResult<TaskSqlView>> list(@RequestBody Paging<TaskSql> paging)", "full_signature": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public ServiceResult<ListResult<TaskSqlView>> list(@RequestBody Paging<TaskSql> paging)", "class_method_signature": "SelectEntityController.list(@RequestBody Paging<TaskSql> paging)", "testcase": false, "constructor": false, "invocations": ["success", "findSelectEntityPageList"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}