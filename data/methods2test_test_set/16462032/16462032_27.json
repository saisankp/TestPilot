{"test_class": {"identifier": "LocalFileTest", "superclass": "extends AbstractFileTest", "interfaces": "", "fields": [], "file": "mucommander-commons-file/src/test/java/com/mucommander/commons/file/protocol/local/LocalFileTest.java"}, "test_case": {"identifier": "testVolumes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVolumes() throws IOException {\n        AbstractFile[] volumes = LocalFile.getVolumes();\n\n        assert volumes != null;\n        assert volumes.length>0;\n\n        for (AbstractFile volume : volumes)\n            testVolume(volume);\n    }", "signature": "void testVolumes()", "full_signature": "@Test public void testVolumes()", "class_method_signature": "LocalFileTest.testVolumes()", "testcase": true, "constructor": false, "invocations": ["getVolumes", "testVolume"]}, "focal_class": {"identifier": "LocalFile", "superclass": "extends ProtocolFile", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(LocalFile.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(LocalFile.class)", "var_name": "LOGGER"}, {"original_string": "protected File file;", "modifier": "protected", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private FilePermissions permissions;", "modifier": "private", "type": "FilePermissions", "declarator": "permissions", "var_name": "permissions"}, {"original_string": "protected String absPath;", "modifier": "protected", "type": "String", "declarator": "absPath", "var_name": "absPath"}, {"original_string": "protected AbstractFile parent;", "modifier": "protected", "type": "AbstractFile", "declarator": "parent", "var_name": "parent"}, {"original_string": "protected boolean parentValueSet;", "modifier": "protected", "type": "boolean", "declarator": "parentValueSet", "var_name": "parentValueSet"}, {"original_string": "public final static String SEPARATOR = File.separator;", "modifier": "public final static", "type": "String", "declarator": "SEPARATOR = File.separator", "var_name": "SEPARATOR"}, {"original_string": "private final static boolean IS_WINDOWS =  OsFamily.WINDOWS.isCurrent();", "modifier": "private final static", "type": "boolean", "declarator": "IS_WINDOWS =  OsFamily.WINDOWS.isCurrent()", "var_name": "IS_WINDOWS"}, {"original_string": "public final static boolean USES_ROOT_DRIVES = IS_WINDOWS || OsFamily.OS_2.isCurrent();", "modifier": "public final static", "type": "boolean", "declarator": "USES_ROOT_DRIVES = IS_WINDOWS || OsFamily.OS_2.isCurrent()", "var_name": "USES_ROOT_DRIVES"}, {"original_string": "public final static String SCHEMA = \"file\";", "modifier": "public final static", "type": "String", "declarator": "SCHEMA = \"file\"", "var_name": "SCHEMA"}, {"original_string": "final static Pattern DRIVE_ROOT_PATTERN = Pattern.compile(\"^[a-zA-Z]{1}[:]{1}[\\\\\\\\]{1}\");", "modifier": "final static", "type": "Pattern", "declarator": "DRIVE_ROOT_PATTERN = Pattern.compile(\"^[a-zA-Z]{1}[:]{1}[\\\\\\\\]{1}\")", "var_name": "DRIVE_ROOT_PATTERN"}, {"original_string": "private static PermissionBits CHANGEABLE_PERMISSIONS_JAVA_1_6_NON_WINDOWS = new GroupedPermissionBits(448);", "modifier": "private static", "type": "PermissionBits", "declarator": "CHANGEABLE_PERMISSIONS_JAVA_1_6_NON_WINDOWS = new GroupedPermissionBits(448)", "var_name": "CHANGEABLE_PERMISSIONS_JAVA_1_6_NON_WINDOWS"}, {"original_string": "private static PermissionBits CHANGEABLE_PERMISSIONS_JAVA_1_6_WINDOWS = new GroupedPermissionBits(128);", "modifier": "private static", "type": "PermissionBits", "declarator": "CHANGEABLE_PERMISSIONS_JAVA_1_6_WINDOWS = new GroupedPermissionBits(128)", "var_name": "CHANGEABLE_PERMISSIONS_JAVA_1_6_WINDOWS"}, {"original_string": "private static PermissionBits CHANGEABLE_PERMISSIONS_JAVA_1_5 = PermissionBits.EMPTY_PERMISSION_BITS;", "modifier": "private static", "type": "PermissionBits", "declarator": "CHANGEABLE_PERMISSIONS_JAVA_1_5 = PermissionBits.EMPTY_PERMISSION_BITS", "var_name": "CHANGEABLE_PERMISSIONS_JAVA_1_5"}, {"original_string": "private final static PermissionBits CHANGEABLE_PERMISSIONS = JavaVersion.JAVA_1_6.isCurrentOrHigher()\n            ?(IS_WINDOWS?CHANGEABLE_PERMISSIONS_JAVA_1_6_WINDOWS:CHANGEABLE_PERMISSIONS_JAVA_1_6_NON_WINDOWS)\n            : CHANGEABLE_PERMISSIONS_JAVA_1_5;", "modifier": "private final static", "type": "PermissionBits", "declarator": "CHANGEABLE_PERMISSIONS = JavaVersion.JAVA_1_6.isCurrentOrHigher()\n            ?(IS_WINDOWS?CHANGEABLE_PERMISSIONS_JAVA_1_6_WINDOWS:CHANGEABLE_PERMISSIONS_JAVA_1_6_NON_WINDOWS)\n            : CHANGEABLE_PERMISSIONS_JAVA_1_5", "var_name": "CHANGEABLE_PERMISSIONS"}, {"original_string": "public static final String[] KNOWN_UNIX_FS = { \"adfs\", \"affs\", \"autofs\", \"cifs\", \"coda\", \"cramfs\",\n                                                   \"debugfs\", \"efs\", \"ext2\", \"ext3\", \"fuseblk\", \"hfs\", \"hfsplus\", \"hpfs\",\n                                                   \"iso9660\", \"jfs\", \"minix\", \"msdos\", \"ncpfs\", \"nfs\", \"nfs4\", \"ntfs\",\n                                                   \"qnx4\", \"reiserfs\", \"smbfs\", \"udf\", \"ufs\", \"usbfs\", \"vfat\", \"xfs\" };", "modifier": "public static final", "type": "String[]", "declarator": "KNOWN_UNIX_FS = { \"adfs\", \"affs\", \"autofs\", \"cifs\", \"coda\", \"cramfs\",\n                                                   \"debugfs\", \"efs\", \"ext2\", \"ext3\", \"fuseblk\", \"hfs\", \"hfsplus\", \"hpfs\",\n                                                   \"iso9660\", \"jfs\", \"minix\", \"msdos\", \"ncpfs\", \"nfs\", \"nfs4\", \"ntfs\",\n                                                   \"qnx4\", \"reiserfs\", \"smbfs\", \"udf\", \"ufs\", \"usbfs\", \"vfat\", \"xfs\" }", "var_name": "KNOWN_UNIX_FS"}], "methods": [{"identifier": "LocalFile", "parameters": "(FileURL fileURL)", "modifiers": "protected", "return": "", "signature": " LocalFile(FileURL fileURL)", "full_signature": "protected  LocalFile(FileURL fileURL)", "class_method_signature": "LocalFile.LocalFile(FileURL fileURL)", "testcase": false, "constructor": true}, {"identifier": "LocalFile", "parameters": "(FileURL fileURL, File file)", "modifiers": "protected", "return": "", "signature": " LocalFile(FileURL fileURL, File file)", "full_signature": "protected  LocalFile(FileURL fileURL, File file)", "class_method_signature": "LocalFile.LocalFile(FileURL fileURL, File file)", "testcase": false, "constructor": true}, {"identifier": "getUserHome", "parameters": "()", "modifiers": "public static", "return": "AbstractFile", "signature": "AbstractFile getUserHome()", "full_signature": "public static AbstractFile getUserHome()", "class_method_signature": "LocalFile.getUserHome()", "testcase": false, "constructor": false}, {"identifier": "guessRemovableDrive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean guessRemovableDrive()", "full_signature": "public boolean guessRemovableDrive()", "class_method_signature": "LocalFile.guessRemovableDrive()", "testcase": false, "constructor": false}, {"identifier": "hasRootDrives", "parameters": "()", "modifiers": "public static", "return": "boolean", "signature": "boolean hasRootDrives()", "full_signature": "public static boolean hasRootDrives()", "class_method_signature": "LocalFile.hasRootDrives()", "testcase": false, "constructor": false}, {"identifier": "getVolumes", "parameters": "()", "modifiers": "public static", "return": "AbstractFile[]", "signature": "AbstractFile[] getVolumes()", "full_signature": "public static AbstractFile[] getVolumes()", "class_method_signature": "LocalFile.getVolumes()", "testcase": false, "constructor": false}, {"identifier": "addJavaIoFileRoots", "parameters": "(Vector<AbstractFile> v)", "modifiers": "private static", "return": "void", "signature": "void addJavaIoFileRoots(Vector<AbstractFile> v)", "full_signature": "private static void addJavaIoFileRoots(Vector<AbstractFile> v)", "class_method_signature": "LocalFile.addJavaIoFileRoots(Vector<AbstractFile> v)", "testcase": false, "constructor": false}, {"identifier": "addMountEntries", "parameters": "(Vector<AbstractFile> v)", "modifiers": "private static", "return": "void", "signature": "void addMountEntries(Vector<AbstractFile> v)", "full_signature": "private static void addMountEntries(Vector<AbstractFile> v)", "class_method_signature": "LocalFile.addMountEntries(Vector<AbstractFile> v)", "testcase": false, "constructor": false}, {"identifier": "addMacOSXVolumes", "parameters": "(Vector<AbstractFile> v)", "modifiers": "private static", "return": "void", "signature": "void addMacOSXVolumes(Vector<AbstractFile> v)", "full_signature": "private static void addMacOSXVolumes(Vector<AbstractFile> v)", "class_method_signature": "LocalFile.addMacOSXVolumes(Vector<AbstractFile> v)", "testcase": false, "constructor": false}, {"identifier": "getUnderlyingFileObject", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object getUnderlyingFileObject()", "full_signature": "@Override public Object getUnderlyingFileObject()", "class_method_signature": "LocalFile.getUnderlyingFileObject()", "testcase": false, "constructor": false}, {"identifier": "isSymlink", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSymlink()", "full_signature": "@Override public boolean isSymlink()", "class_method_signature": "LocalFile.isSymlink()", "testcase": false, "constructor": false}, {"identifier": "isSystem", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSystem()", "full_signature": "@Override public boolean isSystem()", "class_method_signature": "LocalFile.isSystem()", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getDate()", "full_signature": "@Override public long getDate()", "class_method_signature": "LocalFile.getDate()", "testcase": false, "constructor": false}, {"identifier": "changeDate", "parameters": "(long lastModified)", "modifiers": "@Override public", "return": "void", "signature": "void changeDate(long lastModified)", "full_signature": "@Override public void changeDate(long lastModified)", "class_method_signature": "LocalFile.changeDate(long lastModified)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getSize()", "full_signature": "@Override public long getSize()", "class_method_signature": "LocalFile.getSize()", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "()", "modifiers": "@Override public", "return": "AbstractFile", "signature": "AbstractFile getParent()", "full_signature": "@Override public AbstractFile getParent()", "class_method_signature": "LocalFile.getParent()", "testcase": false, "constructor": false}, {"identifier": "setParent", "parameters": "(AbstractFile parent)", "modifiers": "@Override public", "return": "void", "signature": "void setParent(AbstractFile parent)", "full_signature": "@Override public void setParent(AbstractFile parent)", "class_method_signature": "LocalFile.setParent(AbstractFile parent)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exists()", "full_signature": "@Override public boolean exists()", "class_method_signature": "LocalFile.exists()", "testcase": false, "constructor": false}, {"identifier": "getPermissions", "parameters": "()", "modifiers": "@Override public", "return": "FilePermissions", "signature": "FilePermissions getPermissions()", "full_signature": "@Override public FilePermissions getPermissions()", "class_method_signature": "LocalFile.getPermissions()", "testcase": false, "constructor": false}, {"identifier": "getChangeablePermissions", "parameters": "()", "modifiers": "@Override public", "return": "PermissionBits", "signature": "PermissionBits getChangeablePermissions()", "full_signature": "@Override public PermissionBits getChangeablePermissions()", "class_method_signature": "LocalFile.getChangeablePermissions()", "testcase": false, "constructor": false}, {"identifier": "changePermission", "parameters": "(PermissionAccess access, PermissionType permission, boolean enabled)", "modifiers": "@Override public", "return": "void", "signature": "void changePermission(PermissionAccess access, PermissionType permission, boolean enabled)", "full_signature": "@Override public void changePermission(PermissionAccess access, PermissionType permission, boolean enabled)", "class_method_signature": "LocalFile.changePermission(PermissionAccess access, PermissionType permission, boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "getOwner", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getOwner()", "full_signature": "@Override public String getOwner()", "class_method_signature": "LocalFile.getOwner()", "testcase": false, "constructor": false}, {"identifier": "canGetOwner", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canGetOwner()", "full_signature": "@Override public boolean canGetOwner()", "class_method_signature": "LocalFile.canGetOwner()", "testcase": false, "constructor": false}, {"identifier": "getGroup", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getGroup()", "full_signature": "@Override public String getGroup()", "class_method_signature": "LocalFile.getGroup()", "testcase": false, "constructor": false}, {"identifier": "canGetGroup", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canGetGroup()", "full_signature": "@Override public boolean canGetGroup()", "class_method_signature": "LocalFile.canGetGroup()", "testcase": false, "constructor": false}, {"identifier": "isDirectory", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDirectory()", "full_signature": "@Override public boolean isDirectory()", "class_method_signature": "LocalFile.isDirectory()", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "()", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getInputStream()", "full_signature": "@Override public InputStream getInputStream()", "class_method_signature": "LocalFile.getInputStream()", "testcase": false, "constructor": false}, {"identifier": "getOutputStream", "parameters": "()", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream getOutputStream()", "full_signature": "@Override public OutputStream getOutputStream()", "class_method_signature": "LocalFile.getOutputStream()", "testcase": false, "constructor": false}, {"identifier": "getAppendOutputStream", "parameters": "()", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream getAppendOutputStream()", "full_signature": "@Override public OutputStream getAppendOutputStream()", "class_method_signature": "LocalFile.getAppendOutputStream()", "testcase": false, "constructor": false}, {"identifier": "getRandomAccessInputStream", "parameters": "()", "modifiers": "@Override public", "return": "RandomAccessInputStream", "signature": "RandomAccessInputStream getRandomAccessInputStream()", "full_signature": "@Override public RandomAccessInputStream getRandomAccessInputStream()", "class_method_signature": "LocalFile.getRandomAccessInputStream()", "testcase": false, "constructor": false}, {"identifier": "getRandomAccessOutputStream", "parameters": "()", "modifiers": "@Override public", "return": "RandomAccessOutputStream", "signature": "RandomAccessOutputStream getRandomAccessOutputStream()", "full_signature": "@Override public RandomAccessOutputStream getRandomAccessOutputStream()", "class_method_signature": "LocalFile.getRandomAccessOutputStream()", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void delete()", "full_signature": "@Override public void delete()", "class_method_signature": "LocalFile.delete()", "testcase": false, "constructor": false}, {"identifier": "ls", "parameters": "()", "modifiers": "@Override public", "return": "AbstractFile[]", "signature": "AbstractFile[] ls()", "full_signature": "@Override public AbstractFile[] ls()", "class_method_signature": "LocalFile.ls()", "testcase": false, "constructor": false}, {"identifier": "mkdir", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void mkdir()", "full_signature": "@Override public void mkdir()", "class_method_signature": "LocalFile.mkdir()", "testcase": false, "constructor": false}, {"identifier": "renameTo", "parameters": "(AbstractFile destFile)", "modifiers": "@Override public", "return": "void", "signature": "void renameTo(AbstractFile destFile)", "full_signature": "@Override public void renameTo(AbstractFile destFile)", "class_method_signature": "LocalFile.renameTo(AbstractFile destFile)", "testcase": false, "constructor": false}, {"identifier": "getFreeSpace", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getFreeSpace()", "full_signature": "@Override public long getFreeSpace()", "class_method_signature": "LocalFile.getFreeSpace()", "testcase": false, "constructor": false}, {"identifier": "getTotalSpace", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getTotalSpace()", "full_signature": "@Override public long getTotalSpace()", "class_method_signature": "LocalFile.getTotalSpace()", "testcase": false, "constructor": false}, {"identifier": "copyRemotelyTo", "parameters": "(AbstractFile destFile)", "modifiers": "@Override @UnsupportedFileOperation public", "return": "void", "signature": "void copyRemotelyTo(AbstractFile destFile)", "full_signature": "@Override @UnsupportedFileOperation public void copyRemotelyTo(AbstractFile destFile)", "class_method_signature": "LocalFile.copyRemotelyTo(AbstractFile destFile)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "LocalFile.getName()", "testcase": false, "constructor": false}, {"identifier": "getAbsolutePath", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getAbsolutePath()", "full_signature": "@Override public String getAbsolutePath()", "class_method_signature": "LocalFile.getAbsolutePath()", "testcase": false, "constructor": false}, {"identifier": "getCanonicalPath", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getCanonicalPath()", "full_signature": "@Override public String getCanonicalPath()", "class_method_signature": "LocalFile.getCanonicalPath()", "testcase": false, "constructor": false}, {"identifier": "getSeparator", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSeparator()", "full_signature": "@Override public String getSeparator()", "class_method_signature": "LocalFile.getSeparator()", "testcase": false, "constructor": false}, {"identifier": "ls", "parameters": "(FilenameFilter filenameFilter)", "modifiers": "@Override public", "return": "AbstractFile[]", "signature": "AbstractFile[] ls(FilenameFilter filenameFilter)", "full_signature": "@Override public AbstractFile[] ls(FilenameFilter filenameFilter)", "class_method_signature": "LocalFile.ls(FilenameFilter filenameFilter)", "testcase": false, "constructor": false}, {"identifier": "isHidden", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isHidden()", "full_signature": "@Override public boolean isHidden()", "class_method_signature": "LocalFile.isHidden()", "testcase": false, "constructor": false}, {"identifier": "canRead", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canRead()", "full_signature": "@Override public boolean canRead()", "class_method_signature": "LocalFile.canRead()", "testcase": false, "constructor": false}, {"identifier": "getRoot", "parameters": "()", "modifiers": "@Override public", "return": "AbstractFile", "signature": "AbstractFile getRoot()", "full_signature": "@Override public AbstractFile getRoot()", "class_method_signature": "LocalFile.getRoot()", "testcase": false, "constructor": false}, {"identifier": "isRoot", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRoot()", "full_signature": "@Override public boolean isRoot()", "class_method_signature": "LocalFile.isRoot()", "testcase": false, "constructor": false}, {"identifier": "getVolume", "parameters": "()", "modifiers": "@Override public", "return": "AbstractFile", "signature": "AbstractFile getVolume()", "full_signature": "@Override public AbstractFile getVolume()", "class_method_signature": "LocalFile.getVolume()", "testcase": false, "constructor": false}], "file": "mucommander-commons-file/src/main/java/com/mucommander/commons/file/protocol/local/LocalFile.java"}, "focal_method": {"identifier": "getVolumes", "parameters": "()", "modifiers": "public static", "return": "AbstractFile[]", "body": "public static AbstractFile[] getVolumes() {\n        Vector<AbstractFile> volumesV = new Vector<AbstractFile>();\n\n        // Add Mac OS X's /Volumes subfolders and not file roots ('/') since Volumes already contains a named link\n        // (like 'Hard drive' or whatever silly name the user gave his primary hard disk) to /\n        if(OsFamily.MAC_OS_X.isCurrent()) {\n            addMacOSXVolumes(volumesV);\n        }\n        else {\n            // Add java.io.File's root folders\n            addJavaIoFileRoots(volumesV);\n\n            // Add /proc/mounts folders under UNIX-based systems.\n            if(OsFamily.getCurrent().isUnixBased())\n                addMountEntries(volumesV);\n        }\n\n        // Add home folder, if it is not already present in the list\n        AbstractFile homeFolder = getUserHome();\n        if(!(homeFolder==null || volumesV.contains(homeFolder)))\n            volumesV.add(homeFolder);\n\n        AbstractFile volumes[] = new AbstractFile[volumesV.size()];\n        volumesV.toArray(volumes);\n\n        return volumes;\n    }", "signature": "AbstractFile[] getVolumes()", "full_signature": "public static AbstractFile[] getVolumes()", "class_method_signature": "LocalFile.getVolumes()", "testcase": false, "constructor": false, "invocations": ["isCurrent", "addMacOSXVolumes", "addJavaIoFileRoots", "isUnixBased", "getCurrent", "addMountEntries", "getUserHome", "contains", "add", "size", "toArray"]}, "repository": {"repo_id": 16462032, "url": "https://github.com/mucommander/mucommander", "language": "Java", "is_fork": false, "fork_count": 124, "stargazer_count": 448, "size": 47123, "license": "licensed"}}