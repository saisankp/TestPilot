{"test_class": {"identifier": "AllTest", "superclass": "", "interfaces": "", "fields": [], "file": "dockerfile-image-update/src/test/java/com/salesforce/dockerfileimageupdate/subcommands/impl/AllTest.java"}, "test_case": {"identifier": "testParseStoreToImagesMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseStoreToImagesMap() throws Exception {\n        DockerfileGitHubUtil dockerfileGitHubUtil = mock(DockerfileGitHubUtil.class);\n        when(dockerfileGitHubUtil.getMyself()).thenReturn(mock(GHMyself.class));\n        when(dockerfileGitHubUtil.getRepo(anyString())).thenReturn(mock(GHRepository.class));\n        GHContent mockContent = mock(GHContent.class);\n        ClassLoader classloader = Thread.currentThread().getContextClassLoader();\n        when(mockContent.read()).thenReturn(classloader.getResourceAsStream(\"image-store-sample.json\"));\n        when(dockerfileGitHubUtil.tryRetrievingContent(any(GHRepository.class), anyString(), anyString())).thenReturn(mockContent);\n\n        All all = new All();\n        all.loadDockerfileGithubUtil(dockerfileGitHubUtil);\n        Set<Map.Entry<String, JsonElement>> imageSet = all.parseStoreToImagesMap(\"testStore\");\n        assertNotNull(imageSet);\n    }", "signature": "void testParseStoreToImagesMap()", "full_signature": "@Test public void testParseStoreToImagesMap()", "class_method_signature": "AllTest.testParseStoreToImagesMap()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getMyself", "mock", "thenReturn", "when", "getRepo", "anyString", "mock", "mock", "getContextClassLoader", "currentThread", "thenReturn", "when", "read", "getResourceAsStream", "thenReturn", "when", "tryRetrievingContent", "any", "anyString", "anyString", "loadDockerfileGithubUtil", "parseStoreToImagesMap", "assertNotNull"]}, "focal_class": {"identifier": "All", "superclass": "", "interfaces": "implements ExecutableWithNamespace", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(All.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(All.class)", "var_name": "log"}, {"original_string": "private DockerfileGitHubUtil dockerfileGitHubUtil;", "modifier": "private", "type": "DockerfileGitHubUtil", "declarator": "dockerfileGitHubUtil", "var_name": "dockerfileGitHubUtil"}], "methods": [{"identifier": "execute", "parameters": "(final Namespace ns, final DockerfileGitHubUtil dockerfileGitHubUtil)", "modifiers": "@Override public", "return": "void", "signature": "void execute(final Namespace ns, final DockerfileGitHubUtil dockerfileGitHubUtil)", "full_signature": "@Override public void execute(final Namespace ns, final DockerfileGitHubUtil dockerfileGitHubUtil)", "class_method_signature": "All.execute(final Namespace ns, final DockerfileGitHubUtil dockerfileGitHubUtil)", "testcase": false, "constructor": false}, {"identifier": "loadDockerfileGithubUtil", "parameters": "(DockerfileGitHubUtil _dockerfileGitHubUtil)", "modifiers": "protected", "return": "void", "signature": "void loadDockerfileGithubUtil(DockerfileGitHubUtil _dockerfileGitHubUtil)", "full_signature": "protected void loadDockerfileGithubUtil(DockerfileGitHubUtil _dockerfileGitHubUtil)", "class_method_signature": "All.loadDockerfileGithubUtil(DockerfileGitHubUtil _dockerfileGitHubUtil)", "testcase": false, "constructor": false}, {"identifier": "forkRepositoriesFound", "parameters": "(Multimap<String, String> pathToDockerfilesInParentRepo,\n                                         Multimap<String, String> imagesFoundInParentRepo,\n                                         PagedSearchIterable<GHContent> contentsWithImage,\n                                         String image)", "modifiers": "protected", "return": "void", "signature": "void forkRepositoriesFound(Multimap<String, String> pathToDockerfilesInParentRepo,\n                                         Multimap<String, String> imagesFoundInParentRepo,\n                                         PagedSearchIterable<GHContent> contentsWithImage,\n                                         String image)", "full_signature": "protected void forkRepositoriesFound(Multimap<String, String> pathToDockerfilesInParentRepo,\n                                         Multimap<String, String> imagesFoundInParentRepo,\n                                         PagedSearchIterable<GHContent> contentsWithImage,\n                                         String image)", "class_method_signature": "All.forkRepositoriesFound(Multimap<String, String> pathToDockerfilesInParentRepo,\n                                         Multimap<String, String> imagesFoundInParentRepo,\n                                         PagedSearchIterable<GHContent> contentsWithImage,\n                                         String image)", "testcase": false, "constructor": false}, {"identifier": "parseStoreToImagesMap", "parameters": "(String storeName)", "modifiers": "protected", "return": "Set<Map.Entry<String, JsonElement>>", "signature": "Set<Map.Entry<String, JsonElement>> parseStoreToImagesMap(String storeName)", "full_signature": "protected Set<Map.Entry<String, JsonElement>> parseStoreToImagesMap(String storeName)", "class_method_signature": "All.parseStoreToImagesMap(String storeName)", "testcase": false, "constructor": false}, {"identifier": "changeDockerfiles", "parameters": "(Namespace ns,\n                                     Multimap<String, String> pathToDockerfilesInParentRepo,\n                                     Multimap<String, String> imagesFoundInParentRepo,\n                                     Map<String, String> imageToTagMap,\n                                     GHRepository currUserRepo,\n                                     List<String> skippedRepos)", "modifiers": "protected", "return": "void", "signature": "void changeDockerfiles(Namespace ns,\n                                     Multimap<String, String> pathToDockerfilesInParentRepo,\n                                     Multimap<String, String> imagesFoundInParentRepo,\n                                     Map<String, String> imageToTagMap,\n                                     GHRepository currUserRepo,\n                                     List<String> skippedRepos)", "full_signature": "protected void changeDockerfiles(Namespace ns,\n                                     Multimap<String, String> pathToDockerfilesInParentRepo,\n                                     Multimap<String, String> imagesFoundInParentRepo,\n                                     Map<String, String> imageToTagMap,\n                                     GHRepository currUserRepo,\n                                     List<String> skippedRepos)", "class_method_signature": "All.changeDockerfiles(Namespace ns,\n                                     Multimap<String, String> pathToDockerfilesInParentRepo,\n                                     Multimap<String, String> imagesFoundInParentRepo,\n                                     Map<String, String> imageToTagMap,\n                                     GHRepository currUserRepo,\n                                     List<String> skippedRepos)", "testcase": false, "constructor": false}, {"identifier": "getPullRequestWithPullReqIdentifier", "parameters": "(GHRepository parent)", "modifiers": "private", "return": "GHPullRequest", "signature": "GHPullRequest getPullRequestWithPullReqIdentifier(GHRepository parent)", "full_signature": "private GHPullRequest getPullRequestWithPullReqIdentifier(GHRepository parent)", "class_method_signature": "All.getPullRequestWithPullReqIdentifier(GHRepository parent)", "testcase": false, "constructor": false}], "file": "dockerfile-image-update/src/main/java/com/salesforce/dockerfileimageupdate/subcommands/impl/All.java"}, "focal_method": {"identifier": "parseStoreToImagesMap", "parameters": "(String storeName)", "modifiers": "protected", "return": "Set<Map.Entry<String, JsonElement>>", "body": "protected Set<Map.Entry<String, JsonElement>> parseStoreToImagesMap(String storeName)\n            throws IOException, InterruptedException {\n        GHMyself myself = dockerfileGitHubUtil.getMyself();\n        String login = myself.getLogin();\n        GHRepository store = dockerfileGitHubUtil.getRepo(Paths.get(login, storeName).toString());\n\n        GHContent storeContent = dockerfileGitHubUtil.tryRetrievingContent(store, Constants.STORE_JSON_FILE,\n                store.getDefaultBranch());\n\n        if (storeContent == null) {\n            return Collections.emptySet();\n        }\n\n        JsonElement json;\n        try (InputStream stream = storeContent.read(); InputStreamReader streamR = new InputStreamReader(stream)) {\n            try {\n                json = JsonParser.parseReader(streamR);\n            } catch (JsonParseException e) {\n                log.warn(\"Not a JSON format store.\");\n                return Collections.emptySet();\n            }\n        }\n\n        JsonElement imagesJson = json.getAsJsonObject().get(\"images\");\n        return imagesJson.getAsJsonObject().entrySet();\n    }", "signature": "Set<Map.Entry<String, JsonElement>> parseStoreToImagesMap(String storeName)", "full_signature": "protected Set<Map.Entry<String, JsonElement>> parseStoreToImagesMap(String storeName)", "class_method_signature": "All.parseStoreToImagesMap(String storeName)", "testcase": false, "constructor": false, "invocations": ["getMyself", "getLogin", "getRepo", "toString", "get", "tryRetrievingContent", "getDefaultBranch", "emptySet", "read", "parseReader", "warn", "emptySet", "get", "getAsJsonObject", "entrySet", "getAsJsonObject"]}, "repository": {"repo_id": 104787715, "url": "https://github.com/salesforce/dockerfile-image-update", "stars": 62, "created": "9/25/2017 6:38:13 PM +00:00", "updates": "2020-01-23T07:15:59+00:00", "fork": "False", "license": "licensed"}}