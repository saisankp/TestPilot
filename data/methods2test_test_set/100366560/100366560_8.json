{"test_class": {"identifier": "DateToJodaTimeBaseLocalConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DateToJodaTimeBaseLocalConverter converter = new DateToJodaTimeBaseLocalConverter();", "modifier": "", "type": "DateToJodaTimeBaseLocalConverter", "declarator": "converter = new DateToJodaTimeBaseLocalConverter()", "var_name": "converter"}], "file": "beanmother-joda-time-converter/src/test/java/io/beanmother/joda/converter/DateToJodaTimeBaseLocalConverterTest.java"}, "test_case": {"identifier": "convert", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convert() throws Exception {\n        String dateString = \"06/27/2017 12:30\";\n        DateFormat df = new SimpleDateFormat(\"MM/dd/yyyy HH:mm\");\n        Date date = df.parse(dateString);\n\n        LocalTime localTime = (LocalTime) converter.convert(date, TypeToken.of(LocalTime.class));\n        assertEquals(12, localTime.getHourOfDay());\n        assertEquals(30, localTime.getMinuteOfHour());\n\n        LocalDate localDate = (LocalDate) converter.convert(date, TypeToken.of(LocalDate.class));\n        assertEquals(2017, localDate.getYear());\n        assertEquals(6, localDate.getMonthOfYear());\n        assertEquals(27, localDate.getDayOfMonth());\n\n        LocalDateTime localDateTime = (LocalDateTime) converter.convert(date, TypeToken.of(LocalDateTime.class));\n        assertEquals(12, localDateTime.getHourOfDay());\n        assertEquals(30, localDateTime.getMinuteOfHour());\n        assertEquals(2017, localDateTime.getYear());\n        assertEquals(6, localDateTime.getMonthOfYear());\n        assertEquals(27, localDateTime.getDayOfMonth());\n    }", "signature": "void convert()", "full_signature": "@Test public void convert()", "class_method_signature": "DateToJodaTimeBaseLocalConverterTest.convert()", "testcase": true, "constructor": false, "invocations": ["parse", "convert", "of", "assertEquals", "getHourOfDay", "assertEquals", "getMinuteOfHour", "convert", "of", "assertEquals", "getYear", "assertEquals", "getMonthOfYear", "assertEquals", "getDayOfMonth", "convert", "of", "assertEquals", "getHourOfDay", "assertEquals", "getMinuteOfHour", "assertEquals", "getYear", "assertEquals", "getMonthOfYear", "assertEquals", "getDayOfMonth"]}, "focal_class": {"identifier": "DateToJodaTimeBaseLocalConverter", "superclass": "extends AbstractConverter", "interfaces": "", "fields": [], "methods": [{"identifier": "convert", "parameters": "(Object source, TypeToken<?> targetTypeToken)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "Object", "signature": "Object convert(Object source, TypeToken<?> targetTypeToken)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public Object convert(Object source, TypeToken<?> targetTypeToken)", "class_method_signature": "DateToJodaTimeBaseLocalConverter.convert(Object source, TypeToken<?> targetTypeToken)", "testcase": false, "constructor": false}, {"identifier": "canHandle", "parameters": "(Object source, TypeToken<?> targetTypeToken)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canHandle(Object source, TypeToken<?> targetTypeToken)", "full_signature": "@Override public boolean canHandle(Object source, TypeToken<?> targetTypeToken)", "class_method_signature": "DateToJodaTimeBaseLocalConverter.canHandle(Object source, TypeToken<?> targetTypeToken)", "testcase": false, "constructor": false}], "file": "beanmother-joda-time-converter/src/main/java/io/beanmother/joda/converter/DateToJodaTimeBaseLocalConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(Object source, TypeToken<?> targetTypeToken)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "Object", "body": "@SuppressWarnings(\"unchecked\")\n    @Override\n    public Object convert(Object source, TypeToken<?> targetTypeToken) {\n        if (!canHandle(source, targetTypeToken)) {\n            throw new ConverterException(source, targetTypeToken.getRawType());\n        }\n\n        Constructor constructor;\n        try {\n            constructor = ((Class) targetTypeToken.getType()).getConstructor(Object.class);\n        } catch (NoSuchMethodException e) {\n            throw new ConverterException(source, targetTypeToken.getRawType(), e);\n        }\n        try {\n            return constructor.newInstance(source);\n        } catch (Exception e) {\n            throw new ConverterException(source, targetTypeToken.getRawType(), e);\n        }\n    }", "signature": "Object convert(Object source, TypeToken<?> targetTypeToken)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public Object convert(Object source, TypeToken<?> targetTypeToken)", "class_method_signature": "DateToJodaTimeBaseLocalConverter.convert(Object source, TypeToken<?> targetTypeToken)", "testcase": false, "constructor": false, "invocations": ["canHandle", "getRawType", "getConstructor", "getType", "getRawType", "newInstance", "getRawType"]}, "repository": {"repo_id": 100366560, "url": "https://github.com/keepcosmos/beanmother", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 95, "size": 688, "license": "licensed"}}