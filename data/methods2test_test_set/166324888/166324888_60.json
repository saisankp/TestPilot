{"test_class": {"identifier": "GZipUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "@Rule\n    public RxJavaTestSchedulerRule rule = new RxJavaTestSchedulerRule();", "modifier": "@Rule\n    public", "type": "RxJavaTestSchedulerRule", "declarator": "rule = new RxJavaTestSchedulerRule()", "var_name": "rule"}, {"original_string": "@Mock\n    public GZipUtil g;", "modifier": "@Mock\n    public", "type": "GZipUtil", "declarator": "g", "var_name": "g"}, {"original_string": "@Mock\n    public NodeManager nodeManager;", "modifier": "@Mock\n    public", "type": "NodeManager", "declarator": "nodeManager", "var_name": "nodeManager"}, {"original_string": "@Mock\n    public Node node;", "modifier": "@Mock\n    public", "type": "Node", "declarator": "node", "var_name": "node"}], "file": "wallet/src/test/java/com/platon/aton/utils/GZipUtilTest.java"}, "test_case": {"identifier": "unCompress", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void unCompress() {\n        String str = \"{\\\"qrCodeData\\\":[{\\\"amount\\\":\\\"100004999975506010000000000\\\",\\\"chainId\\\":\\\"101\\\",\\\"from\\\":\\\"0xca4b151b0b100ae53c9d78dd136905e681622ee7\\\",\\\"functionType\\\":1004,\\\"gasLimit\\\":\\\"48988\\\",\\\"gasPrice\\\":\\\"499999750000\\\",\\\"nodeId\\\":\\\"0x411a6c3640b6cd13799e7d4ed286c95104e3a31fbb05d7ae0004463db648f26e93f7f5848ee9795fb4bbb5f83985afd63f750dc4cf48f53b0e84d26d6834c20c\\\",\\\"nodeName\\\":\\\"\u8282\u70b902\\\",\\\"nonce\\\":\\\"0\\\",\\\"stakingBlockNum\\\":\\\"\\\",\\\"to\\\":\\\"0x1000000000000000000000000000000000000002\\\",\\\"typ\\\":0}],\\\"qrCodeType\\\":0,\\\"timestamp\\\":1572590948}\";\n        String zipStr = GZipUtil.compress(str);\n        Log.d(\"GzipUtilsTest\", \"\u538b\u7f29\u540e=========\" + \"\u957f\u5ea6\" + zipStr.length() + \"==========>\" + \"\u5b57\u8282\u6570\u7ec4======\" + zipStr.getBytes() + \"----------->\" +zipStr);\n        String unzipStr = GZipUtil.unCompress(zipStr);\n        Log.d(\"GzipUtilsTest\", \"\u89e3\u538b\u7f29=========\" + \"\u957f\u5ea6\" + unzipStr.length() + \"==========>\" + \"\u5b57\u8282\u6570\u7ec4======\" + unzipStr.getBytes() +\"-------------->\" +unzipStr);\n\n    }", "signature": "void unCompress()", "full_signature": "@Test public void unCompress()", "class_method_signature": "GZipUtilTest.unCompress()", "testcase": true, "constructor": false, "invocations": ["compress", "d", " \"====", "------->", "unCompress", "d", " \"====", "--------"]}, "focal_class": {"identifier": "GZipUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "compress", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String compress(String str)", "full_signature": "public static String compress(String str)", "class_method_signature": "GZipUtil.compress(String str)", "testcase": false, "constructor": false}, {"identifier": "unCompress", "parameters": "(String str)", "modifiers": "public static", "return": "String", "signature": "String unCompress(String str)", "full_signature": "public static String unCompress(String str)", "class_method_signature": "GZipUtil.unCompress(String str)", "testcase": false, "constructor": false}], "file": "wallet/src/main/java/com/platon/aton/utils/GZipUtil.java"}, "focal_method": {"identifier": "unCompress", "parameters": "(String str)", "modifiers": "public static", "return": "String", "body": "public static String unCompress(String str) {\n        if (null == str || str.length() <= 0) {\n            return str;\n        }\n        // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8f93\u51fa\u6d41\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        // \u521b\u5efa\u4e00\u4e2a ByteArrayInputStream\uff0c\u4f7f\u7528 buf \u4f5c\u4e3a\u5176\u7f13\u51b2\u533a\u6570\u7ec4\n        ByteArrayInputStream in = null;\n        // \u4f7f\u7528\u9ed8\u8ba4\u7f13\u51b2\u533a\u5927\u5c0f\u521b\u5efa\u65b0\u7684\u8f93\u5165\u6d41\n        GZIPInputStream gzip = null;\n        try {\n            in = new ByteArrayInputStream(str.getBytes(\"ISO-8859-1\"));\n            gzip = new GZIPInputStream(in);\n            byte[] buffer = new byte[512];\n            int n = 0;\n            // \u5c06\u672a\u538b\u7f29\u6570\u636e\u8bfb\u5165\u5b57\u8282\u6570\u7ec4\n            while ((n = gzip.read(buffer)) >= 0) {\n                out.write(buffer, 0, n);\n            }\n            // \u4f7f\u7528\u6307\u5b9a\u7684 charsetName\uff0c\u901a\u8fc7\u89e3\u7801\u5b57\u8282\u5c06\u7f13\u51b2\u533a\u5185\u5bb9\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n            return out.toString(\"utf-8\");\n        } catch (Exception e) {\n            LogUtils.e(e.getMessage(),e.fillInStackTrace());\n        }\n\n        return null;\n    }", "signature": "String unCompress(String str)", "full_signature": "public static String unCompress(String str)", "class_method_signature": "GZipUtil.unCompress(String str)", "testcase": false, "constructor": false, "invocations": ["length", "getBytes", "read", "write", "toString", "e", "getMessage", "fillInStackTrace"]}, "repository": {"repo_id": 166324888, "url": "https://github.com/PlatONnetwork/ATON-Android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 118901, "license": "licensed"}}