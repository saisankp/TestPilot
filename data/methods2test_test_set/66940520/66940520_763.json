{"test_class": {"identifier": "AuditMatrixConfigurerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private DhisConfigurationProvider config;", "modifier": "@Mock\n    private", "type": "DhisConfigurationProvider", "declarator": "config", "var_name": "config"}, {"original_string": "@Rule\n    public MockitoRule rule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "rule = MockitoJUnit.rule()", "var_name": "rule"}, {"original_string": "private AuditMatrixConfigurer subject;", "modifier": "private", "type": "AuditMatrixConfigurer", "declarator": "subject", "var_name": "subject"}, {"original_string": "private Map<AuditScope, Map<AuditType, Boolean>> matrix;", "modifier": "private", "type": "Map<AuditScope, Map<AuditType, Boolean>>", "declarator": "matrix", "var_name": "matrix"}], "file": "dhis-2/dhis-support/dhis-support-artemis/src/test/java/org/hisp/dhis/artemis/audit/configuration/AuditMatrixConfigurerTest.java"}, "test_case": {"identifier": "verifyDefaultAuditingConfiguration", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void verifyDefaultAuditingConfiguration()\n    {\n        matrix = this.subject.configure();\n        assertMatrixDisabled( METADATA, READ );\n        assertMatrixEnabled( METADATA, CREATE );\n        assertMatrixEnabled( METADATA, UPDATE );\n        assertMatrixEnabled( METADATA, DELETE );\n\n        assertMatrixDisabled( TRACKER, READ );\n        assertMatrixEnabled( TRACKER, CREATE );\n        assertMatrixEnabled( TRACKER, UPDATE );\n        assertMatrixEnabled( TRACKER, DELETE );\n\n        assertMatrixDisabled( AGGREGATE, READ );\n        assertMatrixEnabled( AGGREGATE, CREATE );\n        assertMatrixEnabled( AGGREGATE, UPDATE );\n        assertMatrixEnabled( AGGREGATE, DELETE );\n    }", "signature": "void verifyDefaultAuditingConfiguration()", "full_signature": "@Test public void verifyDefaultAuditingConfiguration()", "class_method_signature": "AuditMatrixConfigurerTest.verifyDefaultAuditingConfiguration()", "testcase": true, "constructor": false, "invocations": ["configure", "assertMatrixDisabled", "assertMatrixEnabled", "assertMatrixEnabled", "assertMatrixEnabled", "assertMatrixDisabled", "assertMatrixEnabled", "assertMatrixEnabled", "assertMatrixEnabled", "assertMatrixDisabled", "assertMatrixEnabled", "assertMatrixEnabled", "assertMatrixEnabled"]}, "focal_class": {"identifier": "AuditMatrixConfigurer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final DhisConfigurationProvider config;", "modifier": "private final", "type": "DhisConfigurationProvider", "declarator": "config", "var_name": "config"}, {"original_string": "private final static String PROPERTY_PREFIX = \"audit.\";", "modifier": "private final static", "type": "String", "declarator": "PROPERTY_PREFIX = \"audit.\"", "var_name": "PROPERTY_PREFIX"}, {"original_string": "private final static String AUDIT_TYPE_STRING_SEPAR = \";\";", "modifier": "private final static", "type": "String", "declarator": "AUDIT_TYPE_STRING_SEPAR = \";\"", "var_name": "AUDIT_TYPE_STRING_SEPAR"}, {"original_string": "private static final Map<AuditType, Boolean> DEFAULT_AUDIT_CONFIGURATION = ImmutableMap.<AuditType, Boolean>builder()\n        .put( AuditType.CREATE, true )\n        .put( AuditType.UPDATE, true )\n        .put( AuditType.DELETE, true )\n        .put( AuditType.READ, false )\n        .put( AuditType.SEARCH, false )\n        .put( AuditType.SECURITY, false )\n        .build();", "modifier": "private static final", "type": "Map<AuditType, Boolean>", "declarator": "DEFAULT_AUDIT_CONFIGURATION = ImmutableMap.<AuditType, Boolean>builder()\n        .put( AuditType.CREATE, true )\n        .put( AuditType.UPDATE, true )\n        .put( AuditType.DELETE, true )\n        .put( AuditType.READ, false )\n        .put( AuditType.SEARCH, false )\n        .put( AuditType.SECURITY, false )\n        .build()", "var_name": "DEFAULT_AUDIT_CONFIGURATION"}], "methods": [{"identifier": "AuditMatrixConfigurer", "parameters": "( DhisConfigurationProvider dhisConfigurationProvider )", "modifiers": "public", "return": "", "signature": " AuditMatrixConfigurer( DhisConfigurationProvider dhisConfigurationProvider )", "full_signature": "public  AuditMatrixConfigurer( DhisConfigurationProvider dhisConfigurationProvider )", "class_method_signature": "AuditMatrixConfigurer.AuditMatrixConfigurer( DhisConfigurationProvider dhisConfigurationProvider )", "testcase": false, "constructor": true}, {"identifier": "configure", "parameters": "()", "modifiers": "public", "return": "Map<AuditScope, Map<AuditType, Boolean>>", "signature": "Map<AuditScope, Map<AuditType, Boolean>> configure()", "full_signature": "public Map<AuditScope, Map<AuditType, Boolean>> configure()", "class_method_signature": "AuditMatrixConfigurer.configure()", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-support/dhis-support-artemis/src/main/java/org/hisp/dhis/artemis/audit/configuration/AuditMatrixConfigurer.java"}, "focal_method": {"identifier": "configure", "parameters": "()", "modifiers": "public", "return": "Map<AuditScope, Map<AuditType, Boolean>>", "body": "public Map<AuditScope, Map<AuditType, Boolean>> configure()\n    {\n        Map<AuditScope, Map<AuditType, Boolean>> matrix = new HashMap<>();\n\n        for ( AuditScope value : AuditScope.values() )\n        {\n            Optional<ConfigurationKey> confKey = ConfigurationKey.getByKey( PROPERTY_PREFIX + value.name().toLowerCase() );\n\n            if ( confKey.isPresent() && !StringUtils.isEmpty( config.getProperty( confKey.get() ) ) )\n            {\n                String[] configuredTypes = config.getProperty( confKey.get() ).split( AUDIT_TYPE_STRING_SEPAR );\n\n                Map<AuditType, Boolean> matrixAuditTypes = new HashMap<>();\n\n                for ( AuditType auditType : AuditType.values() )\n                {\n                    matrixAuditTypes.put( auditType, ArrayUtils.contains( configuredTypes, auditType.name() ) );\n                }\n\n                matrix.put( value, matrixAuditTypes );\n\n            }\n            else\n            {\n                matrix.put( value, DEFAULT_AUDIT_CONFIGURATION );\n            }\n        }\n\n        return matrix;\n    }", "signature": "Map<AuditScope, Map<AuditType, Boolean>> configure()", "full_signature": "public Map<AuditScope, Map<AuditType, Boolean>> configure()", "class_method_signature": "AuditMatrixConfigurer.configure()", "testcase": false, "constructor": false, "invocations": ["values", "getByKey", "toLowerCase", "name", "isPresent", "isEmpty", "getProperty", "get", "split", "getProperty", "get", "values", "put", "contains", "name", "put", "put"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}