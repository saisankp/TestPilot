{"test_class": {"identifier": "DomainParameterParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "spring-batch-lightmin-domain/src/test/java/org/tuxdevelop/spring/batch/lightmin/util/DomainParameterParserTest.java"}, "test_case": {"identifier": "generateParameterDateEntryTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void generateParameterDateEntryTest() {\n        final SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\n                DomainParameterParser.DATE_FORMAT_WITH_TIMESTAMP);\n        final String parameter = \"test(date)=2015/03/27 23:19:24:120\";\n        final Entry<String, Object> entry = DomainParameterParser\n                .generateParameterEntry(parameter);\n        assertThat(entry.getKey()).isEqualTo(\"test\");\n        assertThat(simpleDateFormat.format(entry.getValue())).isEqualTo(\n                \"2015/03/27 23:19:24:120\");\n    }", "signature": "void generateParameterDateEntryTest()", "full_signature": "@Test public void generateParameterDateEntryTest()", "class_method_signature": "DomainParameterParserTest.generateParameterDateEntryTest()", "testcase": true, "constructor": false, "invocations": ["generateParameterEntry", "isEqualTo", "assertThat", "getKey", "isEqualTo", "assertThat", "format", "getValue"]}, "focal_class": {"identifier": "DomainParameterParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String DATE_FORMAT_WITH_TIMESTAMP = \"yyyy/MM/dd HH:mm:ss:SSS\";", "modifier": "public static final", "type": "String", "declarator": "DATE_FORMAT_WITH_TIMESTAMP = \"yyyy/MM/dd HH:mm:ss:SSS\"", "var_name": "DATE_FORMAT_WITH_TIMESTAMP"}, {"original_string": "public static final String DATE_FORMAT = \"yyyy/MM/dd\";", "modifier": "public static final", "type": "String", "declarator": "DATE_FORMAT = \"yyyy/MM/dd\"", "var_name": "DATE_FORMAT"}, {"original_string": "private static final SimpleDateFormat simpleDateFormatTimeStamp = new SimpleDateFormat(DATE_FORMAT_WITH_TIMESTAMP);", "modifier": "private static final", "type": "SimpleDateFormat", "declarator": "simpleDateFormatTimeStamp = new SimpleDateFormat(DATE_FORMAT_WITH_TIMESTAMP)", "var_name": "simpleDateFormatTimeStamp"}, {"original_string": "private static final SimpleDateFormat simpleDateFormat = new SimpleDateFormat(DATE_FORMAT);", "modifier": "private static final", "type": "SimpleDateFormat", "declarator": "simpleDateFormat = new SimpleDateFormat(DATE_FORMAT)", "var_name": "simpleDateFormat"}], "methods": [{"identifier": "DomainParameterParser", "parameters": "()", "modifiers": "private", "return": "", "signature": " DomainParameterParser()", "full_signature": "private  DomainParameterParser()", "class_method_signature": "DomainParameterParser.DomainParameterParser()", "testcase": false, "constructor": true}, {"identifier": "parseParameterMapToString", "parameters": "(final Map<String, Object> parametersMap)", "modifiers": "public static", "return": "String", "signature": "String parseParameterMapToString(final Map<String, Object> parametersMap)", "full_signature": "public static String parseParameterMapToString(final Map<String, Object> parametersMap)", "class_method_signature": "DomainParameterParser.parseParameterMapToString(final Map<String, Object> parametersMap)", "testcase": false, "constructor": false}, {"identifier": "parseParameterEntryToString", "parameters": "(final StringBuilder stringBuilder, final Entry<String, Object> entry)", "modifiers": "public static", "return": "void", "signature": "void parseParameterEntryToString(final StringBuilder stringBuilder, final Entry<String, Object> entry)", "full_signature": "public static void parseParameterEntryToString(final StringBuilder stringBuilder, final Entry<String, Object> entry)", "class_method_signature": "DomainParameterParser.parseParameterEntryToString(final StringBuilder stringBuilder, final Entry<String, Object> entry)", "testcase": false, "constructor": false}, {"identifier": "parseParametersToJobParameters", "parameters": "(final String parameters)", "modifiers": "public static", "return": "JobParameters", "signature": "JobParameters parseParametersToJobParameters(final String parameters)", "full_signature": "public static JobParameters parseParametersToJobParameters(final String parameters)", "class_method_signature": "DomainParameterParser.parseParametersToJobParameters(final String parameters)", "testcase": false, "constructor": false}, {"identifier": "parseParameters", "parameters": "(final String parameters)", "modifiers": "public static", "return": "Map<String, Object>", "signature": "Map<String, Object> parseParameters(final String parameters)", "full_signature": "public static Map<String, Object> parseParameters(final String parameters)", "class_method_signature": "DomainParameterParser.parseParameters(final String parameters)", "testcase": false, "constructor": false}, {"identifier": "parseJobParametersToString", "parameters": "(final JobParameters jobParameters)", "modifiers": "public static", "return": "String", "signature": "String parseJobParametersToString(final JobParameters jobParameters)", "full_signature": "public static String parseJobParametersToString(final JobParameters jobParameters)", "class_method_signature": "DomainParameterParser.parseJobParametersToString(final JobParameters jobParameters)", "testcase": false, "constructor": false}, {"identifier": "splitParameters", "parameters": "(final String parameters)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> splitParameters(final String parameters)", "full_signature": "private static List<String> splitParameters(final String parameters)", "class_method_signature": "DomainParameterParser.splitParameters(final String parameters)", "testcase": false, "constructor": false}, {"identifier": "evaluateParameters", "parameters": "(final List<String> parameterList)", "modifiers": "private static", "return": "Map<String, Object>", "signature": "Map<String, Object> evaluateParameters(final List<String> parameterList)", "full_signature": "private static Map<String, Object> evaluateParameters(final List<String> parameterList)", "class_method_signature": "DomainParameterParser.evaluateParameters(final List<String> parameterList)", "testcase": false, "constructor": false}, {"identifier": "generateParameterEntry", "parameters": "(final String parameter)", "modifiers": "public static", "return": "Entry<String, Object>", "signature": "Entry<String, Object> generateParameterEntry(final String parameter)", "full_signature": "public static Entry<String, Object> generateParameterEntry(final String parameter)", "class_method_signature": "DomainParameterParser.generateParameterEntry(final String parameter)", "testcase": false, "constructor": false}, {"identifier": "createValueInstance", "parameters": "(final String type, final String valueString)", "modifiers": "public static", "return": "Object", "signature": "Object createValueInstance(final String type, final String valueString)", "full_signature": "public static Object createValueInstance(final String type, final String valueString)", "class_method_signature": "DomainParameterParser.createValueInstance(final String type, final String valueString)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(final String dateString)", "modifiers": "public static", "return": "Date", "signature": "Date parseDate(final String dateString)", "full_signature": "public static Date parseDate(final String dateString)", "class_method_signature": "DomainParameterParser.parseDate(final String dateString)", "testcase": false, "constructor": false}, {"identifier": "parseDate", "parameters": "(final Date date)", "modifiers": "public static", "return": "String", "signature": "String parseDate(final Date date)", "full_signature": "public static String parseDate(final Date date)", "class_method_signature": "DomainParameterParser.parseDate(final Date date)", "testcase": false, "constructor": false}], "file": "spring-batch-lightmin-domain/src/main/java/org/tuxdevelop/spring/batch/lightmin/util/DomainParameterParser.java"}, "focal_method": {"identifier": "generateParameterEntry", "parameters": "(final String parameter)", "modifiers": "public static", "return": "Entry<String, Object>", "body": "public static Entry<String, Object> generateParameterEntry(final String parameter) {\n        final String key;\n        final Object value;\n        log.debug(\"parsing: \" + parameter);\n        final String[] firstSplit = parameter.split(Pattern.quote(\"(\"), 2);\n        key = firstSplit[0].trim();\n        log.debug(\"got key: \" + key);\n        final String tempString = firstSplit[1];\n        log.debug(\"parsing second part: \" + tempString);\n        final String[] secondSplit = tempString.split(Pattern.quote(\")\"), 2);\n        final String type = secondSplit[0].trim();\n        log.debug(\"got type: \" + type);\n        final String tempSecondString = secondSplit[1];\n        log.debug(\"parsing third part:\" + tempSecondString);\n        final String[] thirdSplit = tempSecondString.split(\"=\", 2);\n        final String valueString = thirdSplit[1];\n        log.debug(\"got value: \" + valueString);\n        value = createValueInstance(type, valueString);\n        return new AbstractMap.SimpleEntry<>(key, value);\n    }", "signature": "Entry<String, Object> generateParameterEntry(final String parameter)", "full_signature": "public static Entry<String, Object> generateParameterEntry(final String parameter)", "class_method_signature": "DomainParameterParser.generateParameterEntry(final String parameter)", "testcase": false, "constructor": false, "invocations": ["debug", "split", "quote", "trim", "debug", "debug", "split", "quote", "trim", "debug", "debug", "split", "debug", "createValueInstance"]}, "repository": {"repo_id": 29479059, "url": "https://github.com/tuxdevelop/spring-batch-lightmin", "language": "Java", "is_fork": false, "fork_count": 34, "stargazer_count": 109, "size": 12355, "license": "licensed"}}