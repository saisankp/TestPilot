{"test_class": {"identifier": "ProjectServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private ProjectRepository projectRepository;", "modifier": "@Mock private", "type": "ProjectRepository", "declarator": "projectRepository", "var_name": "projectRepository"}, {"original_string": "@Rule public final ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule public final", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "private ProjectService projectService;", "modifier": "private", "type": "ProjectService", "declarator": "projectService", "var_name": "projectService"}], "file": "core/src/test/java/feast/core/service/ProjectServiceTest.java"}, "test_case": {"identifier": "shouldNotArchiveProjectIfItIsAlreadyArchived", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void shouldNotArchiveProjectIfItIsAlreadyArchived() {\n    String projectName = \"project1\";\n    when(projectRepository.findById(projectName)).thenReturn(Optional.empty());\n    projectService.archiveProject(projectName);\n  }", "signature": "void shouldNotArchiveProjectIfItIsAlreadyArchived()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void shouldNotArchiveProjectIfItIsAlreadyArchived()", "class_method_signature": "ProjectServiceTest.shouldNotArchiveProjectIfItIsAlreadyArchived()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findById", "empty", "archiveProject"]}, "focal_class": {"identifier": "ProjectService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ProjectRepository projectRepository;", "modifier": "private", "type": "ProjectRepository", "declarator": "projectRepository", "var_name": "projectRepository"}], "methods": [{"identifier": "ProjectService", "parameters": "(ProjectRepository projectRepository)", "modifiers": "@Autowired public", "return": "", "signature": " ProjectService(ProjectRepository projectRepository)", "full_signature": "@Autowired public  ProjectService(ProjectRepository projectRepository)", "class_method_signature": "ProjectService.ProjectService(ProjectRepository projectRepository)", "testcase": false, "constructor": true}, {"identifier": "createProject", "parameters": "(String name)", "modifiers": "@Transactional public", "return": "void", "signature": "void createProject(String name)", "full_signature": "@Transactional public void createProject(String name)", "class_method_signature": "ProjectService.createProject(String name)", "testcase": false, "constructor": false}, {"identifier": "archiveProject", "parameters": "(String name)", "modifiers": "@Transactional public", "return": "void", "signature": "void archiveProject(String name)", "full_signature": "@Transactional public void archiveProject(String name)", "class_method_signature": "ProjectService.archiveProject(String name)", "testcase": false, "constructor": false}, {"identifier": "listProjects", "parameters": "()", "modifiers": "@Transactional public", "return": "List<Project>", "signature": "List<Project> listProjects()", "full_signature": "@Transactional public List<Project> listProjects()", "class_method_signature": "ProjectService.listProjects()", "testcase": false, "constructor": false}], "file": "core/src/main/java/feast/core/service/ProjectService.java"}, "focal_method": {"identifier": "archiveProject", "parameters": "(String name)", "modifiers": "@Transactional public", "return": "void", "body": "@Transactional\n  public void archiveProject(String name) {\n    Optional<Project> project = projectRepository.findById(name);\n    if (!project.isPresent()) {\n      throw new IllegalArgumentException(String.format(\"Could not find project: \\\"%s\\\"\", name));\n    }\n    if (name.equals(Project.DEFAULT_NAME)) {\n      throw new UnsupportedOperationException(\"Archiving the default project is not allowed.\");\n    }\n    Project p = project.get();\n    p.setArchived(true);\n    projectRepository.saveAndFlush(p);\n  }", "signature": "void archiveProject(String name)", "full_signature": "@Transactional public void archiveProject(String name)", "class_method_signature": "ProjectService.archiveProject(String name)", "testcase": false, "constructor": false, "invocations": ["findById", "isPresent", "format", "equals", "get", "setArchived", "saveAndFlush"]}, "repository": {"repo_id": 161133770, "url": "https://github.com/gojek/feast", "stars": 633, "created": "12/10/2018 7:20:15 AM +00:00", "updates": "2020-01-27T12:39:33+00:00", "fork": "False", "license": "licensed"}}