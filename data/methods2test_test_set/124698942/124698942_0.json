{"test_class": {"identifier": "ExpressionTest", "superclass": "", "interfaces": "", "fields": [], "file": "lib/src/test/java/com/maltaisn/calcdialog/ExpressionTest.java"}, "test_case": {"identifier": "twoSum", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void twoSum() {\n        Expression expr = new Expression();\n        expr.numbers.add(new BigDecimal(\"12.1\"));\n        expr.operators.add(Expression.Operator.ADD);\n        expr.numbers.add(new BigDecimal(\"-24.8\"));\n\n        BigDecimal result = expr.evaluate(false, 8, RoundingMode.HALF_UP);\n        assertEquals(result, new BigDecimal(\"-12.7\"));\n    }", "signature": "void twoSum()", "full_signature": "@Test public void twoSum()", "class_method_signature": "ExpressionTest.twoSum()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "evaluate", "assertEquals"]}, "focal_class": {"identifier": "Expression", "superclass": "", "interfaces": "implements Parcelable", "fields": [{"original_string": "final List<BigDecimal> numbers = new ArrayList<>();", "modifier": "final", "type": "List<BigDecimal>", "declarator": "numbers = new ArrayList<>()", "var_name": "numbers"}, {"original_string": "final List<Operator> operators = new ArrayList<>();", "modifier": "final", "type": "List<Operator>", "declarator": "operators = new ArrayList<>()", "var_name": "operators"}, {"original_string": "public static final Creator<Expression> CREATOR = new Creator<Expression>() {\n        @Override\n        public Expression createFromParcel(Parcel in) {\n            return new Expression(in);\n        }\n\n        @Override\n        public Expression[] newArray(int size) {\n            return new Expression[size];\n        }\n    };", "modifier": "public static final", "type": "Creator<Expression>", "declarator": "CREATOR = new Creator<Expression>() {\n        @Override\n        public Expression createFromParcel(Parcel in) {\n            return new Expression(in);\n        }\n\n        @Override\n        public Expression[] newArray(int size) {\n            return new Expression[size];\n        }\n    }", "var_name": "CREATOR"}], "methods": [{"identifier": "Expression", "parameters": "()", "modifiers": "", "return": "", "signature": " Expression()", "full_signature": "  Expression()", "class_method_signature": "Expression.Expression()", "testcase": false, "constructor": true}, {"identifier": "clear", "parameters": "()", "modifiers": "", "return": "void", "signature": "void clear()", "full_signature": " void clear()", "class_method_signature": "Expression.clear()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": " boolean isEmpty()", "class_method_signature": "Expression.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(boolean priority, int scale, RoundingMode roundingMode)", "modifiers": "@NonNull", "return": "BigDecimal", "signature": "BigDecimal evaluate(boolean priority, int scale, RoundingMode roundingMode)", "full_signature": "@NonNull BigDecimal evaluate(boolean priority, int scale, RoundingMode roundingMode)", "class_method_signature": "Expression.evaluate(boolean priority, int scale, RoundingMode roundingMode)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(NumberFormat nbFormat)", "modifiers": "", "return": "String", "signature": "String format(NumberFormat nbFormat)", "full_signature": " String format(NumberFormat nbFormat)", "class_method_signature": "Expression.format(NumberFormat nbFormat)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@NonNull @Override public", "return": "String", "signature": "String toString()", "full_signature": "@NonNull @Override public String toString()", "class_method_signature": "Expression.toString()", "testcase": false, "constructor": false}, {"identifier": "Expression", "parameters": "(Parcel in)", "modifiers": "private", "return": "", "signature": " Expression(Parcel in)", "full_signature": "private  Expression(Parcel in)", "class_method_signature": "Expression.Expression(Parcel in)", "testcase": false, "constructor": true}, {"identifier": "writeToParcel", "parameters": "(@NonNull Parcel out, int flags)", "modifiers": "@Override public", "return": "void", "signature": "void writeToParcel(@NonNull Parcel out, int flags)", "full_signature": "@Override public void writeToParcel(@NonNull Parcel out, int flags)", "class_method_signature": "Expression.writeToParcel(@NonNull Parcel out, int flags)", "testcase": false, "constructor": false}, {"identifier": "describeContents", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int describeContents()", "full_signature": "@Override public int describeContents()", "class_method_signature": "Expression.describeContents()", "testcase": false, "constructor": false}], "file": "lib/src/main/java/com/maltaisn/calcdialog/Expression.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(boolean priority, int scale, RoundingMode roundingMode)", "modifiers": "@NonNull", "return": "BigDecimal", "body": "@NonNull\n    BigDecimal evaluate(boolean priority, int scale, RoundingMode roundingMode) {\n        if (numbers.size() != operators.size() + 1) {\n            throw new IllegalStateException(\"Numbers and operators aren't balanced.\");\n        }\n\n        if (numbers.size() == 1) return numbers.get(0);\n\n        List<BigDecimal> nbs = new ArrayList<>(numbers);\n        List<Operator> ops = new ArrayList<>(operators);\n\n        if (priority) {\n            // Evaluate products and quotients\n            int i = 0;\n            while (i < ops.size()) {\n                Operator op = ops.get(i);\n                if (op == Operator.MULTIPLY) {\n                    ops.remove(i);\n                    BigDecimal n1 = nbs.get(i);\n                    BigDecimal n2 = nbs.remove(i + 1);\n                    nbs.set(i, n1.multiply(n2));\n                } else if (op == Operator.DIVIDE) {\n                    ops.remove(i);\n                    BigDecimal n1 = nbs.get(i);\n                    BigDecimal n2 = nbs.remove(i + 1);\n                    nbs.set(i, n1.divide(n2, scale, roundingMode));\n                } else {\n                    i++;\n                }\n            }\n        }\n\n        // Evaluate the rest\n        while (!ops.isEmpty()) {\n            Operator op = ops.remove(0);\n            BigDecimal n1 = nbs.get(0);\n            BigDecimal n2 = nbs.remove(1);\n            if (op == Operator.ADD) {\n                nbs.set(0, n1.add(n2));\n            } else if (op == Operator.SUBTRACT) {\n                nbs.set(0, n1.subtract(n2));\n            } else if (op == Operator.MULTIPLY) {\n                nbs.set(0, n1.multiply(n2));\n            } else {\n                nbs.set(0, n1.divide(n2, scale, roundingMode));\n            }\n        }\n\n        return nbs.remove(0).stripTrailingZeros();\n    }", "signature": "BigDecimal evaluate(boolean priority, int scale, RoundingMode roundingMode)", "full_signature": "@NonNull BigDecimal evaluate(boolean priority, int scale, RoundingMode roundingMode)", "class_method_signature": "Expression.evaluate(boolean priority, int scale, RoundingMode roundingMode)", "testcase": false, "constructor": false, "invocations": ["size", "size", "size", "get", "size", "get", "remove", "get", "remove", "set", "multiply", "remove", "get", "remove", "set", "divide", "isEmpty", "remove", "get", "remove", "set", "add", "set", "subtract", "set", "multiply", "set", "divide", "stripTrailingZeros", "remove"]}, "repository": {"repo_id": 124698942, "url": "https://github.com/maltaisn/calcdialoglib", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 97, "size": 20189, "license": "licensed"}}