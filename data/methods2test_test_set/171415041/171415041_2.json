{"test_class": {"identifier": "ShellUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "jcodes-core/src/test/java/com/czarea/jcodes/util/ShellUtilTest.java"}, "test_case": {"identifier": "cmd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void cmd() throws IOException, InterruptedException {\n        String initCmd = \"E:\\\\gradle\\\\gradle-4.6\\\\bin\\\\gradle.bat propertiesInit\";\n        String str = ShellUtil.cmd(initCmd, null, \"E:/codes/test\");\n        System.out.println(str);\n    }", "signature": "void cmd()", "full_signature": "@Test public void cmd()", "class_method_signature": "ShellUtilTest.cmd()", "testcase": true, "constructor": false, "invocations": ["cmd", "println"]}, "focal_class": {"identifier": "ShellUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "cmd", "parameters": "(String cmd, String[] envp, String dir)", "modifiers": "public static", "return": "String", "signature": "String cmd(String cmd, String[] envp, String dir)", "full_signature": "public static String cmd(String cmd, String[] envp, String dir)", "class_method_signature": "ShellUtil.cmd(String cmd, String[] envp, String dir)", "testcase": false, "constructor": false}], "file": "jcodes-core/src/main/java/com/czarea/jcodes/util/ShellUtil.java"}, "focal_method": {"identifier": "cmd", "parameters": "(String cmd, String[] envp, String dir)", "modifiers": "public static", "return": "String", "body": "public static String cmd(String cmd, String[] envp, String dir) throws IOException, InterruptedException {\n        Path path = Paths.get(dir);\n        if (!Files.exists(path)) {\n            Files.createDirectories(path);\n        }\n        Process process = Runtime.getRuntime().exec(cmd, envp, new File(dir));\n        InputStream is = process.getInputStream();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n        process.waitFor();\n        StringBuffer stringBuffer = new StringBuffer();\n        String str;\n        while ((str = reader.readLine()) != null) {\n            stringBuffer.append(str).append(\"\\r\\n\");\n        }\n        return stringBuffer.toString();\n    }", "signature": "String cmd(String cmd, String[] envp, String dir)", "full_signature": "public static String cmd(String cmd, String[] envp, String dir)", "class_method_signature": "ShellUtil.cmd(String cmd, String[] envp, String dir)", "testcase": false, "constructor": false, "invocations": ["get", "exists", "createDirectories", "exec", "getRuntime", "getInputStream", "waitFor", "readLine", "append", "append", "toString"]}, "repository": {"repo_id": 171415041, "url": "https://github.com/czarea/jcodes", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 10225, "license": "licensed"}}