{"test_class": {"identifier": "DBQueriesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NAME = \"features\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"features\"", "var_name": "NAME"}, {"original_string": "private static final String TABLE_NAME = \"cqtbl_\" + NAME;", "modifier": "private static final", "type": "String", "declarator": "TABLE_NAME = \"cqtbl_\" + NAME", "var_name": "TABLE_NAME"}, {"original_string": "private static final String INDEX_NAME = \"cqidx_\" + NAME + \"_value\";", "modifier": "private static final", "type": "String", "declarator": "INDEX_NAME = \"cqidx_\" + NAME + \"_value\"", "var_name": "INDEX_NAME"}, {"original_string": "@Rule\n    public TemporaryFileDatabase temporaryFileDatabase = new TemporaryFileDatabase();", "modifier": "@Rule\n    public", "type": "TemporaryFileDatabase", "declarator": "temporaryFileDatabase = new TemporaryFileDatabase()", "var_name": "temporaryFileDatabase"}], "file": "code/src/test/java/com/googlecode/cqengine/index/sqlite/support/DBQueriesTest.java"}, "test_case": {"identifier": "testBulkRemove", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBulkRemove() throws SQLException {\n\n        Connection connection = null;\n        try {\n            ConnectionManager connectionManager = temporaryFileDatabase.getConnectionManager(true);\n            initWithTestData(connectionManager);\n\n            List<DBQueries.Row<Integer, String>> expectedRows = new ArrayList<DBQueries.Row<Integer, String>>(2);\n            expectedRows.add(new DBQueries.Row<Integer, String>(2, \"airbags\"));\n            expectedRows.add(new DBQueries.Row<Integer, String>(3, \"abs\"));\n\n            connection = connectionManager.getConnection(null, noQueryOptions());\n            DBQueries.bulkRemove(Collections.singletonList(1), NAME, connection);\n            assertQueryResultSet(\"SELECT * FROM \" + TABLE_NAME, expectedRows, connectionManager);\n\n        }finally {\n            DBUtils.closeQuietly(connection);\n        }\n    }", "signature": "void testBulkRemove()", "full_signature": "@Test public void testBulkRemove()", "class_method_signature": "DBQueriesTest.testBulkRemove()", "testcase": true, "constructor": false, "invocations": ["getConnectionManager", "initWithTestData", "add", "add", "getConnection", "noQueryOptions", "bulkRemove", "singletonList", "assertQueryResultSet", "closeQuietly"]}, "focal_class": {"identifier": "DBQueries", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createIndexTable", "parameters": "(final String tableName, final Class<K> objectKeyClass, final Class<A> valueClass, final Connection connection)", "modifiers": "public static", "return": "void", "signature": "void createIndexTable(final String tableName, final Class<K> objectKeyClass, final Class<A> valueClass, final Connection connection)", "full_signature": "public static void createIndexTable(final String tableName, final Class<K> objectKeyClass, final Class<A> valueClass, final Connection connection)", "class_method_signature": "DBQueries.createIndexTable(final String tableName, final Class<K> objectKeyClass, final Class<A> valueClass, final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "indexTableExists", "parameters": "(final String tableName, final Connection connection)", "modifiers": "public static", "return": "boolean", "signature": "boolean indexTableExists(final String tableName, final Connection connection)", "full_signature": "public static boolean indexTableExists(final String tableName, final Connection connection)", "class_method_signature": "DBQueries.indexTableExists(final String tableName, final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "createIndexOnTable", "parameters": "(final String tableName, final Connection connection)", "modifiers": "public static", "return": "void", "signature": "void createIndexOnTable(final String tableName, final Connection connection)", "full_signature": "public static void createIndexOnTable(final String tableName, final Connection connection)", "class_method_signature": "DBQueries.createIndexOnTable(final String tableName, final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "suspendSyncAndJournaling", "parameters": "(final Connection connection)", "modifiers": "public static", "return": "void", "signature": "void suspendSyncAndJournaling(final Connection connection)", "full_signature": "public static void suspendSyncAndJournaling(final Connection connection)", "class_method_signature": "DBQueries.suspendSyncAndJournaling(final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "setSyncAndJournaling", "parameters": "(final Connection connection, final SQLiteConfig.SynchronousMode pragmaSynchronous, final SQLiteConfig.JournalMode pragmaJournalMode)", "modifiers": "public static", "return": "void", "signature": "void setSyncAndJournaling(final Connection connection, final SQLiteConfig.SynchronousMode pragmaSynchronous, final SQLiteConfig.JournalMode pragmaJournalMode)", "full_signature": "public static void setSyncAndJournaling(final Connection connection, final SQLiteConfig.SynchronousMode pragmaSynchronous, final SQLiteConfig.JournalMode pragmaJournalMode)", "class_method_signature": "DBQueries.setSyncAndJournaling(final Connection connection, final SQLiteConfig.SynchronousMode pragmaSynchronous, final SQLiteConfig.JournalMode pragmaJournalMode)", "testcase": false, "constructor": false}, {"identifier": "getPragmaSynchronousOrNull", "parameters": "(final Connection connection)", "modifiers": "public static", "return": "SQLiteConfig.SynchronousMode", "signature": "SQLiteConfig.SynchronousMode getPragmaSynchronousOrNull(final Connection connection)", "full_signature": "public static SQLiteConfig.SynchronousMode getPragmaSynchronousOrNull(final Connection connection)", "class_method_signature": "DBQueries.getPragmaSynchronousOrNull(final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "getPragmaJournalModeOrNull", "parameters": "(final Connection connection)", "modifiers": "public static", "return": "SQLiteConfig.JournalMode", "signature": "SQLiteConfig.JournalMode getPragmaJournalModeOrNull(final Connection connection)", "full_signature": "public static SQLiteConfig.JournalMode getPragmaJournalModeOrNull(final Connection connection)", "class_method_signature": "DBQueries.getPragmaJournalModeOrNull(final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "dropIndexOnTable", "parameters": "(final String tableName, final Connection connection)", "modifiers": "public static", "return": "void", "signature": "void dropIndexOnTable(final String tableName, final Connection connection)", "full_signature": "public static void dropIndexOnTable(final String tableName, final Connection connection)", "class_method_signature": "DBQueries.dropIndexOnTable(final String tableName, final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "dropIndexTable", "parameters": "(final String tableName, final Connection connection)", "modifiers": "public static", "return": "void", "signature": "void dropIndexTable(final String tableName, final Connection connection)", "full_signature": "public static void dropIndexTable(final String tableName, final Connection connection)", "class_method_signature": "DBQueries.dropIndexTable(final String tableName, final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "clearIndexTable", "parameters": "(final String tableName, final Connection connection)", "modifiers": "public static", "return": "void", "signature": "void clearIndexTable(final String tableName, final Connection connection)", "full_signature": "public static void clearIndexTable(final String tableName, final Connection connection)", "class_method_signature": "DBQueries.clearIndexTable(final String tableName, final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "compactDatabase", "parameters": "(final Connection connection)", "modifiers": "public static", "return": "void", "signature": "void compactDatabase(final Connection connection)", "full_signature": "public static void compactDatabase(final Connection connection)", "class_method_signature": "DBQueries.compactDatabase(final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "expandDatabase", "parameters": "(final Connection connection, long numBytes)", "modifiers": "public static", "return": "void", "signature": "void expandDatabase(final Connection connection, long numBytes)", "full_signature": "public static void expandDatabase(final Connection connection, long numBytes)", "class_method_signature": "DBQueries.expandDatabase(final Connection connection, long numBytes)", "testcase": false, "constructor": false}, {"identifier": "getDatabaseSize", "parameters": "(final Connection connection)", "modifiers": "public static", "return": "long", "signature": "long getDatabaseSize(final Connection connection)", "full_signature": "public static long getDatabaseSize(final Connection connection)", "class_method_signature": "DBQueries.getDatabaseSize(final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "readPragmaLong", "parameters": "(final Connection connection, String query)", "modifiers": "static", "return": "long", "signature": "long readPragmaLong(final Connection connection, String query)", "full_signature": "static long readPragmaLong(final Connection connection, String query)", "class_method_signature": "DBQueries.readPragmaLong(final Connection connection, String query)", "testcase": false, "constructor": false}, {"identifier": "bulkAdd", "parameters": "(Iterable<Row<K, A>> rows, final String tableName, final Connection connection)", "modifiers": "public static", "return": "int", "signature": "int bulkAdd(Iterable<Row<K, A>> rows, final String tableName, final Connection connection)", "full_signature": "public static int bulkAdd(Iterable<Row<K, A>> rows, final String tableName, final Connection connection)", "class_method_signature": "DBQueries.bulkAdd(Iterable<Row<K, A>> rows, final String tableName, final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "bulkRemove", "parameters": "(Iterable<K> objectKeys, final String tableName, final Connection connection)", "modifiers": "public static", "return": "int", "signature": "int bulkRemove(Iterable<K> objectKeys, final String tableName, final Connection connection)", "full_signature": "public static int bulkRemove(Iterable<K> objectKeys, final String tableName, final Connection connection)", "class_method_signature": "DBQueries.bulkRemove(Iterable<K> objectKeys, final String tableName, final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "createAndBindSelectPreparedStatement", "parameters": "(final String selectPrefix,\n                                                                         final String groupingAndSorting,\n                                                                         final List<WhereClause> additionalWhereClauses,\n                                                                         final Query<O> query,\n                                                                         final Connection connection)", "modifiers": "static", "return": "PreparedStatement", "signature": "PreparedStatement createAndBindSelectPreparedStatement(final String selectPrefix,\n                                                                         final String groupingAndSorting,\n                                                                         final List<WhereClause> additionalWhereClauses,\n                                                                         final Query<O> query,\n                                                                         final Connection connection)", "full_signature": "static PreparedStatement createAndBindSelectPreparedStatement(final String selectPrefix,\n                                                                         final String groupingAndSorting,\n                                                                         final List<WhereClause> additionalWhereClauses,\n                                                                         final Query<O> query,\n                                                                         final Connection connection)", "class_method_signature": "DBQueries.createAndBindSelectPreparedStatement(final String selectPrefix,\n                                                                         final String groupingAndSorting,\n                                                                         final List<WhereClause> additionalWhereClauses,\n                                                                         final Query<O> query,\n                                                                         final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(final Query<O> query, final String tableName, final Connection connection)", "modifiers": "public static", "return": "int", "signature": "int count(final Query<O> query, final String tableName, final Connection connection)", "full_signature": "public static int count(final Query<O> query, final String tableName, final Connection connection)", "class_method_signature": "DBQueries.count(final Query<O> query, final String tableName, final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "countDistinct", "parameters": "(final Query<O> query, final String tableName, final Connection connection)", "modifiers": "public static", "return": "int", "signature": "int countDistinct(final Query<O> query, final String tableName, final Connection connection)", "full_signature": "public static int countDistinct(final Query<O> query, final String tableName, final Connection connection)", "class_method_signature": "DBQueries.countDistinct(final Query<O> query, final String tableName, final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(final Query<O> query, final String tableName, final Connection connection)", "modifiers": "public static", "return": "java.sql.ResultSet", "signature": "java.sql.ResultSet search(final Query<O> query, final String tableName, final Connection connection)", "full_signature": "public static java.sql.ResultSet search(final Query<O> query, final String tableName, final Connection connection)", "class_method_signature": "DBQueries.search(final Query<O> query, final String tableName, final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "getDistinctKeys", "parameters": "(final Query<O> query, boolean descending, final String tableName, final Connection connection)", "modifiers": "public static", "return": "java.sql.ResultSet", "signature": "java.sql.ResultSet getDistinctKeys(final Query<O> query, boolean descending, final String tableName, final Connection connection)", "full_signature": "public static java.sql.ResultSet getDistinctKeys(final Query<O> query, boolean descending, final String tableName, final Connection connection)", "class_method_signature": "DBQueries.getDistinctKeys(final Query<O> query, boolean descending, final String tableName, final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "getKeysAndValues", "parameters": "(final Query<O> query, boolean descending, final String tableName, final Connection connection)", "modifiers": "public static", "return": "java.sql.ResultSet", "signature": "java.sql.ResultSet getKeysAndValues(final Query<O> query, boolean descending, final String tableName, final Connection connection)", "full_signature": "public static java.sql.ResultSet getKeysAndValues(final Query<O> query, boolean descending, final String tableName, final Connection connection)", "class_method_signature": "DBQueries.getKeysAndValues(final Query<O> query, boolean descending, final String tableName, final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "getCountOfDistinctKeys", "parameters": "(final String tableName, final Connection connection)", "modifiers": "public static", "return": "int", "signature": "int getCountOfDistinctKeys(final String tableName, final Connection connection)", "full_signature": "public static int getCountOfDistinctKeys(final String tableName, final Connection connection)", "class_method_signature": "DBQueries.getCountOfDistinctKeys(final String tableName, final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "getDistinctKeysAndCounts", "parameters": "(boolean sortByKeyDescending, final String tableName, final Connection connection)", "modifiers": "public static", "return": "java.sql.ResultSet", "signature": "java.sql.ResultSet getDistinctKeysAndCounts(boolean sortByKeyDescending, final String tableName, final Connection connection)", "full_signature": "public static java.sql.ResultSet getDistinctKeysAndCounts(boolean sortByKeyDescending, final String tableName, final Connection connection)", "class_method_signature": "DBQueries.getDistinctKeysAndCounts(boolean sortByKeyDescending, final String tableName, final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "getAllIndexEntries", "parameters": "(final String tableName, final Connection connection)", "modifiers": "public static", "return": "java.sql.ResultSet", "signature": "java.sql.ResultSet getAllIndexEntries(final String tableName, final Connection connection)", "full_signature": "public static java.sql.ResultSet getAllIndexEntries(final String tableName, final Connection connection)", "class_method_signature": "DBQueries.getAllIndexEntries(final String tableName, final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "getIndexEntryByObjectKey", "parameters": "(final K key , final String tableName, final Connection connection)", "modifiers": "public static", "return": "java.sql.ResultSet", "signature": "java.sql.ResultSet getIndexEntryByObjectKey(final K key , final String tableName, final Connection connection)", "full_signature": "public static java.sql.ResultSet getIndexEntryByObjectKey(final K key , final String tableName, final Connection connection)", "class_method_signature": "DBQueries.getIndexEntryByObjectKey(final K key , final String tableName, final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(final K objectKey, final Query<O> query, final String tableName, final Connection connection)", "modifiers": "public static", "return": "boolean", "signature": "boolean contains(final K objectKey, final Query<O> query, final String tableName, final Connection connection)", "full_signature": "public static boolean contains(final K objectKey, final Query<O> query, final String tableName, final Connection connection)", "class_method_signature": "DBQueries.contains(final K objectKey, final Query<O> query, final String tableName, final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "ensureNotNegative", "parameters": "(int value)", "modifiers": "static", "return": "void", "signature": "void ensureNotNegative(int value)", "full_signature": "static void ensureNotNegative(int value)", "class_method_signature": "DBQueries.ensureNotNegative(int value)", "testcase": false, "constructor": false}], "file": "code/src/main/java/com/googlecode/cqengine/index/sqlite/support/DBQueries.java"}, "focal_method": {"identifier": "bulkRemove", "parameters": "(Iterable<K> objectKeys, final String tableName, final Connection connection)", "modifiers": "public static", "return": "int", "body": "public static <K> int bulkRemove(Iterable<K> objectKeys, final String tableName, final Connection connection){\n        final String sql = String.format(\"DELETE FROM cqtbl_%s WHERE objectKey = ?;\", tableName);\n        PreparedStatement statement = null;\n        Boolean previousAutocommit = null;\n        int totalRowsModified = 0;\n        try{\n            previousAutocommit = DBUtils.setAutoCommit(connection, false);\n            statement = connection.prepareStatement(sql);\n            for(K objectKey: objectKeys) {\n                statement.setObject(1, objectKey);\n                statement.addBatch();\n            }\n            int[] rowsModified = statement.executeBatch();\n            for (int m : rowsModified) {\n                ensureNotNegative(m);\n                totalRowsModified += m;\n            }\n            DBUtils.commit(connection);\n            return totalRowsModified;\n        }\n        catch (NullPointerException e) {\n            // Note: here we catch a and rethrow NullPointerException,\n            // to allow compatibility with Java Collections Framework,\n            // which requires NPE to be thrown for null arguments...\n            boolean rolledBack = DBUtils.rollback(connection);\n            NullPointerException npe = new NullPointerException(\"Unable to bulk remove rows containing a null object from the index table: \"+ tableName + \". Rolled back: \" + rolledBack);\n            npe.initCause(e);\n            throw npe;\n        }\n        catch (Exception e){\n            boolean rolledBack = DBUtils.rollback(connection);\n            throw new IllegalStateException(\"Unable to remove rows from the index table: \" + tableName + \". Rolled back: \" + rolledBack, e);\n        }finally{\n            DBUtils.closeQuietly(statement);\n            if (previousAutocommit != null)\n                DBUtils.setAutoCommit(connection, previousAutocommit);\n        }\n    }", "signature": "int bulkRemove(Iterable<K> objectKeys, final String tableName, final Connection connection)", "full_signature": "public static int bulkRemove(Iterable<K> objectKeys, final String tableName, final Connection connection)", "class_method_signature": "DBQueries.bulkRemove(Iterable<K> objectKeys, final String tableName, final Connection connection)", "testcase": false, "constructor": false, "invocations": ["format", "setAutoCommit", "prepareStatement", "setObject", "addBatch", "executeBatch", "ensureNotNegative", "commit", "rollback", "initCause", "rollback", "closeQuietly", "setAutoCommit"]}, "repository": {"repo_id": 41263775, "url": "https://github.com/npgall/cqengine", "language": "Java", "is_fork": false, "fork_count": 180, "stargazer_count": 1194, "size": 11701, "license": "licensed"}}