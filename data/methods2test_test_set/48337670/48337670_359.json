{"test_class": {"identifier": "DateTimeTypeTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/org.openhab.core/src/test/java/org/openhab/core/library/types/DateTimeTypeTest.java"}, "test_case": {"identifier": "parsingTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parsingTest() {\n        DateTimeType dt1 = new DateTimeType(\"2019-06-12T17:30:00Z\");\n        DateTimeType dt2 = new DateTimeType(\"2019-06-12T17:30:00+0000\");\n        DateTimeType dt3 = new DateTimeType(\"2019-06-12T19:30:00+0200\");\n        assertThat(dt1, is(dt2));\n\n        ZonedDateTime zdt1 = dt1.getZonedDateTime();\n        ZonedDateTime zdt2 = dt2.getZonedDateTime();\n        ZonedDateTime zdt3 = dt3.getZonedDateTime();\n        assertThat(zdt1.getZone(), is(zdt2.getZone()));\n        assertThat(zdt1, is(zdt2));\n        assertThat(zdt1, is(zdt3.withZoneSameInstant(zdt1.getZone())));\n        assertThat(zdt2, is(zdt3.withZoneSameInstant(zdt2.getZone())));\n    }", "signature": "void parsingTest()", "full_signature": "@Test public void parsingTest()", "class_method_signature": "DateTimeTypeTest.parsingTest()", "testcase": true, "constructor": false, "invocations": ["assertThat", "is", "getZonedDateTime", "getZonedDateTime", "getZonedDateTime", "assertThat", "getZone", "is", "getZone", "assertThat", "is", "assertThat", "is", "withZoneSameInstant", "getZone", "assertThat", "is", "withZoneSameInstant", "getZone"]}, "focal_class": {"identifier": "DateTimeType", "superclass": "", "interfaces": "implements PrimitiveType, State, Command", "fields": [{"original_string": "public static final String DATE_PATTERN = \"yyyy-MM-dd'T'HH:mm:ss\";", "modifier": "public static final", "type": "String", "declarator": "DATE_PATTERN = \"yyyy-MM-dd'T'HH:mm:ss\"", "var_name": "DATE_PATTERN"}, {"original_string": "public static final String DATE_PATTERN_WITH_TZ = \"yyyy-MM-dd'T'HH:mm:ssz\";", "modifier": "public static final", "type": "String", "declarator": "DATE_PATTERN_WITH_TZ = \"yyyy-MM-dd'T'HH:mm:ssz\"", "var_name": "DATE_PATTERN_WITH_TZ"}, {"original_string": "public static final String DATE_PATTERN_WITH_TZ_AND_MS = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\";", "modifier": "public static final", "type": "String", "declarator": "DATE_PATTERN_WITH_TZ_AND_MS = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"", "var_name": "DATE_PATTERN_WITH_TZ_AND_MS"}, {"original_string": "public static final String DATE_PATTERN_WITH_TZ_AND_MS_GENERAL = \"yyyy-MM-dd'T'HH:mm:ss.SSSz\";", "modifier": "public static final", "type": "String", "declarator": "DATE_PATTERN_WITH_TZ_AND_MS_GENERAL = \"yyyy-MM-dd'T'HH:mm:ss.SSSz\"", "var_name": "DATE_PATTERN_WITH_TZ_AND_MS_GENERAL"}, {"original_string": "public static final String DATE_PATTERN_WITH_TZ_AND_MS_ISO = \"yyyy-MM-dd'T'HH:mm:ss.SSSX\";", "modifier": "public static final", "type": "String", "declarator": "DATE_PATTERN_WITH_TZ_AND_MS_ISO = \"yyyy-MM-dd'T'HH:mm:ss.SSSX\"", "var_name": "DATE_PATTERN_WITH_TZ_AND_MS_ISO"}, {"original_string": "private static final String DATE_PARSE_PATTERN_WITHOUT_TZ = \"yyyy-MM-dd'T'HH:mm\"\n            + \"[:ss[.SSSSSSSSS][.SSSSSSSS][.SSSSSSS][.SSSSSS][.SSSSS][.SSSS][.SSS][.SS][.S]]\";", "modifier": "private static final", "type": "String", "declarator": "DATE_PARSE_PATTERN_WITHOUT_TZ = \"yyyy-MM-dd'T'HH:mm\"\n            + \"[:ss[.SSSSSSSSS][.SSSSSSSS][.SSSSSSS][.SSSSSS][.SSSSS][.SSSS][.SSS][.SS][.S]]\"", "var_name": "DATE_PARSE_PATTERN_WITHOUT_TZ"}, {"original_string": "private static final String DATE_PARSE_PATTERN_WITH_TZ = DATE_PARSE_PATTERN_WITHOUT_TZ + \"z\";", "modifier": "private static final", "type": "String", "declarator": "DATE_PARSE_PATTERN_WITH_TZ = DATE_PARSE_PATTERN_WITHOUT_TZ + \"z\"", "var_name": "DATE_PARSE_PATTERN_WITH_TZ"}, {"original_string": "private static final String DATE_PARSE_PATTERN_WITH_TZ_RFC = DATE_PARSE_PATTERN_WITHOUT_TZ + \"Z\";", "modifier": "private static final", "type": "String", "declarator": "DATE_PARSE_PATTERN_WITH_TZ_RFC = DATE_PARSE_PATTERN_WITHOUT_TZ + \"Z\"", "var_name": "DATE_PARSE_PATTERN_WITH_TZ_RFC"}, {"original_string": "private static final String DATE_PARSE_PATTERN_WITH_TZ_ISO = DATE_PARSE_PATTERN_WITHOUT_TZ + \"X\";", "modifier": "private static final", "type": "String", "declarator": "DATE_PARSE_PATTERN_WITH_TZ_ISO = DATE_PARSE_PATTERN_WITHOUT_TZ + \"X\"", "var_name": "DATE_PARSE_PATTERN_WITH_TZ_ISO"}, {"original_string": "private static final DateTimeFormatter PARSER = DateTimeFormatter.ofPattern(DATE_PARSE_PATTERN_WITHOUT_TZ);", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "PARSER = DateTimeFormatter.ofPattern(DATE_PARSE_PATTERN_WITHOUT_TZ)", "var_name": "PARSER"}, {"original_string": "private static final DateTimeFormatter PARSER_TZ = DateTimeFormatter.ofPattern(DATE_PARSE_PATTERN_WITH_TZ);", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "PARSER_TZ = DateTimeFormatter.ofPattern(DATE_PARSE_PATTERN_WITH_TZ)", "var_name": "PARSER_TZ"}, {"original_string": "private static final DateTimeFormatter PARSER_TZ_RFC = DateTimeFormatter.ofPattern(DATE_PARSE_PATTERN_WITH_TZ_RFC);", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "PARSER_TZ_RFC = DateTimeFormatter.ofPattern(DATE_PARSE_PATTERN_WITH_TZ_RFC)", "var_name": "PARSER_TZ_RFC"}, {"original_string": "private static final DateTimeFormatter PARSER_TZ_ISO = DateTimeFormatter.ofPattern(DATE_PARSE_PATTERN_WITH_TZ_ISO);", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "PARSER_TZ_ISO = DateTimeFormatter.ofPattern(DATE_PARSE_PATTERN_WITH_TZ_ISO)", "var_name": "PARSER_TZ_ISO"}, {"original_string": "private static final String DATE_FORMAT_PATTERN_WITH_TZ_RFC = \"yyyy-MM-dd'T'HH:mm[:ss[.SSSSSSSSS]]Z\";", "modifier": "private static final", "type": "String", "declarator": "DATE_FORMAT_PATTERN_WITH_TZ_RFC = \"yyyy-MM-dd'T'HH:mm[:ss[.SSSSSSSSS]]Z\"", "var_name": "DATE_FORMAT_PATTERN_WITH_TZ_RFC"}, {"original_string": "private static final DateTimeFormatter FORMATTER_TZ_RFC = DateTimeFormatter\n            .ofPattern(DATE_FORMAT_PATTERN_WITH_TZ_RFC);", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "FORMATTER_TZ_RFC = DateTimeFormatter\n            .ofPattern(DATE_FORMAT_PATTERN_WITH_TZ_RFC)", "var_name": "FORMATTER_TZ_RFC"}, {"original_string": "private ZonedDateTime zonedDateTime;", "modifier": "private", "type": "ZonedDateTime", "declarator": "zonedDateTime", "var_name": "zonedDateTime"}], "methods": [{"identifier": "DateTimeType", "parameters": "()", "modifiers": "public", "return": "", "signature": " DateTimeType()", "full_signature": "public  DateTimeType()", "class_method_signature": "DateTimeType.DateTimeType()", "testcase": false, "constructor": true}, {"identifier": "DateTimeType", "parameters": "(ZonedDateTime zoned)", "modifiers": "public", "return": "", "signature": " DateTimeType(ZonedDateTime zoned)", "full_signature": "public  DateTimeType(ZonedDateTime zoned)", "class_method_signature": "DateTimeType.DateTimeType(ZonedDateTime zoned)", "testcase": false, "constructor": true}, {"identifier": "DateTimeType", "parameters": "(String zonedValue)", "modifiers": "public", "return": "", "signature": " DateTimeType(String zonedValue)", "full_signature": "public  DateTimeType(String zonedValue)", "class_method_signature": "DateTimeType.DateTimeType(String zonedValue)", "testcase": false, "constructor": true}, {"identifier": "getZonedDateTime", "parameters": "()", "modifiers": "public", "return": "ZonedDateTime", "signature": "ZonedDateTime getZonedDateTime()", "full_signature": "public ZonedDateTime getZonedDateTime()", "class_method_signature": "DateTimeType.getZonedDateTime()", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(String value)", "modifiers": "public static", "return": "DateTimeType", "signature": "DateTimeType valueOf(String value)", "full_signature": "public static DateTimeType valueOf(String value)", "class_method_signature": "DateTimeType.valueOf(String value)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(@Nullable String pattern)", "modifiers": "@Override public", "return": "String", "signature": "String format(@Nullable String pattern)", "full_signature": "@Override public String format(@Nullable String pattern)", "class_method_signature": "DateTimeType.format(@Nullable String pattern)", "testcase": false, "constructor": false}, {"identifier": "format", "parameters": "(Locale locale, String pattern)", "modifiers": "public", "return": "String", "signature": "String format(Locale locale, String pattern)", "full_signature": "public String format(Locale locale, String pattern)", "class_method_signature": "DateTimeType.format(Locale locale, String pattern)", "testcase": false, "constructor": false}, {"identifier": "toLocaleZone", "parameters": "()", "modifiers": "public", "return": "DateTimeType", "signature": "DateTimeType toLocaleZone()", "full_signature": "public DateTimeType toLocaleZone()", "class_method_signature": "DateTimeType.toLocaleZone()", "testcase": false, "constructor": false}, {"identifier": "toZone", "parameters": "(String zone)", "modifiers": "public", "return": "DateTimeType", "signature": "DateTimeType toZone(String zone)", "full_signature": "public DateTimeType toZone(String zone)", "class_method_signature": "DateTimeType.toZone(String zone)", "testcase": false, "constructor": false}, {"identifier": "toZone", "parameters": "(ZoneId zoneId)", "modifiers": "public", "return": "DateTimeType", "signature": "DateTimeType toZone(ZoneId zoneId)", "full_signature": "public DateTimeType toZone(ZoneId zoneId)", "class_method_signature": "DateTimeType.toZone(ZoneId zoneId)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "DateTimeType.toString()", "testcase": false, "constructor": false}, {"identifier": "toFullString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toFullString()", "full_signature": "@Override public String toFullString()", "class_method_signature": "DateTimeType.toFullString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "DateTimeType.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(@Nullable Object obj)", "full_signature": "@Override public boolean equals(@Nullable Object obj)", "class_method_signature": "DateTimeType.equals(@Nullable Object obj)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String value)", "modifiers": "private", "return": "ZonedDateTime", "signature": "ZonedDateTime parse(String value)", "full_signature": "private ZonedDateTime parse(String value)", "class_method_signature": "DateTimeType.parse(String value)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core/src/main/java/org/openhab/core/library/types/DateTimeType.java"}, "focal_method": {"identifier": "getZonedDateTime", "parameters": "()", "modifiers": "public", "return": "ZonedDateTime", "body": "public ZonedDateTime getZonedDateTime() {\n        return zonedDateTime;\n    }", "signature": "ZonedDateTime getZonedDateTime()", "full_signature": "public ZonedDateTime getZonedDateTime()", "class_method_signature": "DateTimeType.getZonedDateTime()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}