{"test_class": {"identifier": "NameParserGbifV1Test", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final boolean DEBUG = ManagementFactory.getRuntimeMXBean()\n      .getInputArguments().toString().indexOf(\"-agentlib:jdwp\") > 0;", "modifier": "private static final", "type": "boolean", "declarator": "DEBUG = ManagementFactory.getRuntimeMXBean()\n      .getInputArguments().toString().indexOf(\"-agentlib:jdwp\") > 0", "var_name": "DEBUG"}, {"original_string": "NameParserGbifV1 parser = new NameParserGbifV1(DEBUG ? 99999999 : 1000);", "modifier": "", "type": "NameParserGbifV1", "declarator": "parser = new NameParserGbifV1(DEBUG ? 99999999 : 1000)", "var_name": "parser"}], "file": "name-parser-v1/src/test/java/org/gbif/nameparser/NameParserGbifV1Test.java"}, "test_case": {"identifier": "assertScientificName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void assertScientificName() throws Exception {\n    ParsedName pn = parser.parseQuietly(\"Abies sp.\");\n    assertEquals(\"Abies sp.\", pn.getScientificName());\n    assertEquals(\"Abies spec.\", pn.canonicalName());\n    assertEquals(\"Abies\", pn.getGenusOrAbove());\n    assertEquals(Rank.SPECIES, pn.getRank());\n    assertNull(pn.getSpecificEpithet());\n\n    pn = parser.parseQuietly(\"\u00d7Abies Mill.\");\n    assertEquals(\"\u00d7Abies Mill.\", pn.getScientificName());\n    assertEquals(\"Abies\", pn.canonicalName());\n    assertEquals(\"Abies\", pn.getGenusOrAbove());\n    assertNull(pn.getRank());\n    assertNull(pn.getSpecificEpithet());\n    assertEquals(NamePart.GENERIC, pn.getNotho());\n\n    pn = parser.parseQuietly(\"? hostilis Gravenhorst, 1829\");\n    assertEquals(\"? hostilis Gravenhorst, 1829\", pn.getScientificName());\n    assertEquals(\"? hostilis\", pn.canonicalName());\n    assertEquals(\"?\", pn.getGenusOrAbove());\n    assertEquals(Rank.SPECIES, pn.getRank());\n    assertEquals(\"hostilis\", pn.getSpecificEpithet());\n\n    pn = parser.parseQuietly(\"unassigned Asteraceae\");\n    assertEquals(\"unassigned Asteraceae\", pn.getScientificName());\n    assertNull(pn.canonicalName());\n    assertNull(pn.getGenusOrAbove());\n    assertNull(pn.getRank());\n    assertNull(pn.getSpecificEpithet());\n    \n    // https://github.com/gbif/name-parser/issues/45\n    pn = parser.parseQuietly(\"OdontellidaeGEN\");\n    assertEquals(NameType.PLACEHOLDER, pn.getType());\n    assertEquals(\"OdontellidaeGEN\", pn.getScientificName());\n    assertEquals(\"Odontellidae\", pn.canonicalName());\n    assertEquals(\"Odontellidae\", pn.getGenusOrAbove());\n    assertEquals(\"GEN\", pn.getStrain());\n    assertNull(pn.getRank());\n    assertNull(pn.getSpecificEpithet());\n    assertNull(pn.getAuthorship());\n  }", "signature": "void assertScientificName()", "full_signature": "@Test public void assertScientificName()", "class_method_signature": "NameParserGbifV1Test.assertScientificName()", "testcase": true, "constructor": false, "invocations": ["parseQuietly", "assertEquals", "getScientificName", "assertEquals", "canonicalName", "assertEquals", "getGenusOrAbove", "assertEquals", "getRank", "assertNull", "getSpecificEpithet", "parseQuietly", "assertEquals", "etScientificName(", "assertEquals", "canonicalName", "assertEquals", "getGenusOrAbove", "assertNull", "getRank", "assertNull", "getSpecificEpithet", "assertEquals", "getNotho", "parseQuietly", "assertEquals", "getScientificName", "assertEquals", "canonicalName", "assertEquals", "getGenusOrAbove", "assertEquals", "getRank", "assertEquals", "getSpecificEpithet", "parseQuietly", "assertEquals", "getScientificName", "assertNull", "canonicalName", "assertNull", "getGenusOrAbove", "assertNull", "getRank", "assertNull", "getSpecificEpithet", "parseQuietly", "assertEquals", "getType", "assertEquals", "getScientificName", "assertEquals", "canonicalName", "assertEquals", "getGenusOrAbove", "assertEquals", "getStrain", "assertNull", "getRank", "assertNull", "getSpecificEpithet", "assertNull", "getAuthorship"]}, "focal_class": {"identifier": "NameParserGbifV1", "superclass": "", "interfaces": "implements NameParser", "fields": [{"original_string": "private static Logger LOG = LoggerFactory.getLogger(NameParserGbifV1.class);", "modifier": "private static", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(NameParserGbifV1.class)", "var_name": "LOG"}, {"original_string": "private static final Map<org.gbif.nameparser.api.NameType, NameType> NAME_TYPE_MAP = ImmutableMap.<org.gbif.nameparser.api.NameType, NameType>builder()\n      .put(org.gbif.nameparser.api.NameType.SCIENTIFIC, NameType.SCIENTIFIC)\n      .put(org.gbif.nameparser.api.NameType.VIRUS, NameType.VIRUS)\n      .put(org.gbif.nameparser.api.NameType.HYBRID_FORMULA, NameType.HYBRID)\n      .put(org.gbif.nameparser.api.NameType.INFORMAL, NameType.INFORMAL)\n      .put(org.gbif.nameparser.api.NameType.OTU, NameType.OTU)\n      .put(org.gbif.nameparser.api.NameType.PLACEHOLDER, NameType.PLACEHOLDER)\n      .put(org.gbif.nameparser.api.NameType.NO_NAME, NameType.NO_NAME)\n      .build();", "modifier": "private static final", "type": "Map<org.gbif.nameparser.api.NameType, NameType>", "declarator": "NAME_TYPE_MAP = ImmutableMap.<org.gbif.nameparser.api.NameType, NameType>builder()\n      .put(org.gbif.nameparser.api.NameType.SCIENTIFIC, NameType.SCIENTIFIC)\n      .put(org.gbif.nameparser.api.NameType.VIRUS, NameType.VIRUS)\n      .put(org.gbif.nameparser.api.NameType.HYBRID_FORMULA, NameType.HYBRID)\n      .put(org.gbif.nameparser.api.NameType.INFORMAL, NameType.INFORMAL)\n      .put(org.gbif.nameparser.api.NameType.OTU, NameType.OTU)\n      .put(org.gbif.nameparser.api.NameType.PLACEHOLDER, NameType.PLACEHOLDER)\n      .put(org.gbif.nameparser.api.NameType.NO_NAME, NameType.NO_NAME)\n      .build()", "var_name": "NAME_TYPE_MAP"}, {"original_string": "private final org.gbif.nameparser.api.NameParser parser;", "modifier": "private final", "type": "org.gbif.nameparser.api.NameParser", "declarator": "parser", "var_name": "parser"}], "methods": [{"identifier": "NameParserGbifV1", "parameters": "()", "modifiers": "public", "return": "", "signature": " NameParserGbifV1()", "full_signature": "public  NameParserGbifV1()", "class_method_signature": "NameParserGbifV1.NameParserGbifV1()", "testcase": false, "constructor": true}, {"identifier": "NameParserGbifV1", "parameters": "(long timeout)", "modifiers": "public", "return": "", "signature": " NameParserGbifV1(long timeout)", "full_signature": "public  NameParserGbifV1(long timeout)", "class_method_signature": "NameParserGbifV1.NameParserGbifV1(long timeout)", "testcase": false, "constructor": true}, {"identifier": "NameParserGbifV1", "parameters": "(org.gbif.nameparser.api.NameParser parser)", "modifiers": "public", "return": "", "signature": " NameParserGbifV1(org.gbif.nameparser.api.NameParser parser)", "full_signature": "public  NameParserGbifV1(org.gbif.nameparser.api.NameParser parser)", "class_method_signature": "NameParserGbifV1.NameParserGbifV1(org.gbif.nameparser.api.NameParser parser)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(String s, @Nullable Rank rank)", "modifiers": "@Override public", "return": "ParsedName", "signature": "ParsedName parse(String s, @Nullable Rank rank)", "full_signature": "@Override public ParsedName parse(String s, @Nullable Rank rank)", "class_method_signature": "NameParserGbifV1.parse(String s, @Nullable Rank rank)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(String scientificName)", "modifiers": "@Override public", "return": "ParsedName", "signature": "ParsedName parse(String scientificName)", "full_signature": "@Override public ParsedName parse(String scientificName)", "class_method_signature": "NameParserGbifV1.parse(String scientificName)", "testcase": false, "constructor": false}, {"identifier": "parseQuietly", "parameters": "(String scientificName, @Nullable Rank rank)", "modifiers": "@Override public", "return": "ParsedName", "signature": "ParsedName parseQuietly(String scientificName, @Nullable Rank rank)", "full_signature": "@Override public ParsedName parseQuietly(String scientificName, @Nullable Rank rank)", "class_method_signature": "NameParserGbifV1.parseQuietly(String scientificName, @Nullable Rank rank)", "testcase": false, "constructor": false}, {"identifier": "parseQuietly", "parameters": "(String scientificName)", "modifiers": "@Override public", "return": "ParsedName", "signature": "ParsedName parseQuietly(String scientificName)", "full_signature": "@Override public ParsedName parseQuietly(String scientificName)", "class_method_signature": "NameParserGbifV1.parseQuietly(String scientificName)", "testcase": false, "constructor": false}, {"identifier": "parseToCanonical", "parameters": "(String scientificName, @Nullable Rank rank)", "modifiers": "@Override // parses the name without authorship and returns the ParsedName.canonicalName() string public", "return": "String", "signature": "String parseToCanonical(String scientificName, @Nullable Rank rank)", "full_signature": "@Override // parses the name without authorship and returns the ParsedName.canonicalName() string public String parseToCanonical(String scientificName, @Nullable Rank rank)", "class_method_signature": "NameParserGbifV1.parseToCanonical(String scientificName, @Nullable Rank rank)", "testcase": false, "constructor": false}, {"identifier": "logUnparsable", "parameters": "(UnparsableException e)", "modifiers": "private static", "return": "void", "signature": "void logUnparsable(UnparsableException e)", "full_signature": "private static void logUnparsable(UnparsableException e)", "class_method_signature": "NameParserGbifV1.logUnparsable(UnparsableException e)", "testcase": false, "constructor": false}, {"identifier": "parseToCanonical", "parameters": "(String scientificName)", "modifiers": "@Override public", "return": "String", "signature": "String parseToCanonical(String scientificName)", "full_signature": "@Override public String parseToCanonical(String scientificName)", "class_method_signature": "NameParserGbifV1.parseToCanonical(String scientificName)", "testcase": false, "constructor": false}, {"identifier": "parseToCanonicalOrScientificName", "parameters": "(String scientificName)", "modifiers": "public", "return": "String", "signature": "String parseToCanonicalOrScientificName(String scientificName)", "full_signature": "public String parseToCanonicalOrScientificName(String scientificName)", "class_method_signature": "NameParserGbifV1.parseToCanonicalOrScientificName(String scientificName)", "testcase": false, "constructor": false}, {"identifier": "parseToCanonicalOrScientificName", "parameters": "(String scientificName, @Nullable Rank rank)", "modifiers": "public", "return": "String", "signature": "String parseToCanonicalOrScientificName(String scientificName, @Nullable Rank rank)", "full_signature": "public String parseToCanonicalOrScientificName(String scientificName, @Nullable Rank rank)", "class_method_signature": "NameParserGbifV1.parseToCanonicalOrScientificName(String scientificName, @Nullable Rank rank)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(String scientificName, Rank rank, org.gbif.nameparser.api.ParsedName pn)", "modifiers": "private", "return": "ParsedName", "signature": "ParsedName convert(String scientificName, Rank rank, org.gbif.nameparser.api.ParsedName pn)", "full_signature": "private ParsedName convert(String scientificName, Rank rank, org.gbif.nameparser.api.ParsedName pn)", "class_method_signature": "NameParserGbifV1.convert(String scientificName, Rank rank, org.gbif.nameparser.api.ParsedName pn)", "testcase": false, "constructor": false}, {"identifier": "gbifNameType", "parameters": "(org.gbif.nameparser.api.ParsedName pn)", "modifiers": "@VisibleForTesting static", "return": "NameType", "signature": "NameType gbifNameType(org.gbif.nameparser.api.ParsedName pn)", "full_signature": "@VisibleForTesting static NameType gbifNameType(org.gbif.nameparser.api.ParsedName pn)", "class_method_signature": "NameParserGbifV1.gbifNameType(org.gbif.nameparser.api.ParsedName pn)", "testcase": false, "constructor": false}, {"identifier": "toGbif", "parameters": "(NamePart notho)", "modifiers": "@VisibleForTesting static", "return": "org.gbif.api.vocabulary.NamePart", "signature": "org.gbif.api.vocabulary.NamePart toGbif(NamePart notho)", "full_signature": "@VisibleForTesting static org.gbif.api.vocabulary.NamePart toGbif(NamePart notho)", "class_method_signature": "NameParserGbifV1.toGbif(NamePart notho)", "testcase": false, "constructor": false}, {"identifier": "toGbif", "parameters": "(org.gbif.nameparser.api.Rank rank)", "modifiers": "@VisibleForTesting static", "return": "Rank", "signature": "Rank toGbif(org.gbif.nameparser.api.Rank rank)", "full_signature": "@VisibleForTesting static Rank toGbif(org.gbif.nameparser.api.Rank rank)", "class_method_signature": "NameParserGbifV1.toGbif(org.gbif.nameparser.api.Rank rank)", "testcase": false, "constructor": false}, {"identifier": "fromGbif", "parameters": "(Rank rank)", "modifiers": "@VisibleForTesting static", "return": "org.gbif.nameparser.api.Rank", "signature": "org.gbif.nameparser.api.Rank fromGbif(Rank rank)", "full_signature": "@VisibleForTesting static org.gbif.nameparser.api.Rank fromGbif(Rank rank)", "class_method_signature": "NameParserGbifV1.fromGbif(Rank rank)", "testcase": false, "constructor": false}, {"identifier": "convertEnum", "parameters": "(Class<G> targetClass, Enum<?> value)", "modifiers": "private static", "return": "G", "signature": "G convertEnum(Class<G> targetClass, Enum<?> value)", "full_signature": "private static G convertEnum(Class<G> targetClass, Enum<?> value)", "class_method_signature": "NameParserGbifV1.convertEnum(Class<G> targetClass, Enum<?> value)", "testcase": false, "constructor": false}], "file": "name-parser-v1/src/main/java/org/gbif/nameparser/NameParserGbifV1.java"}, "focal_method": {"identifier": "parseQuietly", "parameters": "(String scientificName, @Nullable Rank rank)", "modifiers": "@Override public", "return": "ParsedName", "body": "@Override\n  public ParsedName parseQuietly(String scientificName, @Nullable Rank rank) {\n    ParsedName p;\n    try {\n      p = parse(scientificName, rank);\n\n    } catch (UnparsableException e) {\n      p = new ParsedName();\n      p.setScientificName(scientificName);\n      p.setRank(rank);\n      p.setType(e.type);\n      p.setParsed(false);\n      p.setParsedPartially(false);\n    }\n\n    return p;\n  }", "signature": "ParsedName parseQuietly(String scientificName, @Nullable Rank rank)", "full_signature": "@Override public ParsedName parseQuietly(String scientificName, @Nullable Rank rank)", "class_method_signature": "NameParserGbifV1.parseQuietly(String scientificName, @Nullable Rank rank)", "testcase": false, "constructor": false, "invocations": ["parse", "setScientificName", "setRank", "setType", "setParsed", "setParsedPartially"]}, "repository": {"repo_id": 16201889, "url": "https://github.com/gbif/name-parser", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 11, "size": 1978, "license": "licensed"}}