{"test_class": {"identifier": "ObservableScalarXMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/observable/ObservableScalarXMapTest.java"}, "test_case": {"identifier": "mapperToJust", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void mapperToJust() {\n        TestObserver<Integer> to = new TestObserver<Integer>();\n\n        assertTrue(ObservableScalarXMap.tryScalarXMapSubscribe(new OneCallablePublisher(), to, new Function<Integer, ObservableSource<Integer>>() {\n            @Override\n            public ObservableSource<Integer> apply(Integer f) throws Exception {\n                return Observable.just(1);\n            }\n        }));\n\n        to.assertResult(1);\n    }", "signature": "void mapperToJust()", "full_signature": "@Test public void mapperToJust()", "class_method_signature": "ObservableScalarXMapTest.mapperToJust()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "tryScalarXMapSubscribe", "just", "assertResult"]}, "focal_class": {"identifier": "ObservableScalarXMap", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ObservableScalarXMap", "parameters": "()", "modifiers": "private", "return": "", "signature": " ObservableScalarXMap()", "full_signature": "private  ObservableScalarXMap()", "class_method_signature": "ObservableScalarXMap.ObservableScalarXMap()", "testcase": false, "constructor": true}, {"identifier": "tryScalarXMapSubscribe", "parameters": "(ObservableSource<T> source,\n            Observer<? super R> observer,\n            Function<? super T, ? extends ObservableSource<? extends R>> mapper)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "boolean", "signature": "boolean tryScalarXMapSubscribe(ObservableSource<T> source,\n            Observer<? super R> observer,\n            Function<? super T, ? extends ObservableSource<? extends R>> mapper)", "full_signature": "@SuppressWarnings(\"unchecked\") public static boolean tryScalarXMapSubscribe(ObservableSource<T> source,\n            Observer<? super R> observer,\n            Function<? super T, ? extends ObservableSource<? extends R>> mapper)", "class_method_signature": "ObservableScalarXMap.tryScalarXMapSubscribe(ObservableSource<T> source,\n            Observer<? super R> observer,\n            Function<? super T, ? extends ObservableSource<? extends R>> mapper)", "testcase": false, "constructor": false}, {"identifier": "scalarXMap", "parameters": "(T value,\n            Function<? super T, ? extends ObservableSource<? extends U>> mapper)", "modifiers": "public static", "return": "Observable<U>", "signature": "Observable<U> scalarXMap(T value,\n            Function<? super T, ? extends ObservableSource<? extends U>> mapper)", "full_signature": "public static Observable<U> scalarXMap(T value,\n            Function<? super T, ? extends ObservableSource<? extends U>> mapper)", "class_method_signature": "ObservableScalarXMap.scalarXMap(T value,\n            Function<? super T, ? extends ObservableSource<? extends U>> mapper)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableScalarXMap.java"}, "focal_method": {"identifier": "tryScalarXMapSubscribe", "parameters": "(ObservableSource<T> source,\n            Observer<? super R> observer,\n            Function<? super T, ? extends ObservableSource<? extends R>> mapper)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "boolean", "body": "@SuppressWarnings(\"unchecked\")\n    public static <T, R> boolean tryScalarXMapSubscribe(ObservableSource<T> source,\n            Observer<? super R> observer,\n            Function<? super T, ? extends ObservableSource<? extends R>> mapper) {\n        if (source instanceof Callable) {\n            T t;\n\n            try {\n                t = ((Callable<T>)source).call();\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                EmptyDisposable.error(ex, observer);\n                return true;\n            }\n\n            if (t == null) {\n                EmptyDisposable.complete(observer);\n                return true;\n            }\n\n            ObservableSource<? extends R> r;\n\n            try {\n                r = ObjectHelper.requireNonNull(mapper.apply(t), \"The mapper returned a null ObservableSource\");\n            } catch (Throwable ex) {\n                Exceptions.throwIfFatal(ex);\n                EmptyDisposable.error(ex, observer);\n                return true;\n            }\n\n            if (r instanceof Callable) {\n                R u;\n\n                try {\n                    u = ((Callable<R>)r).call();\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    EmptyDisposable.error(ex, observer);\n                    return true;\n                }\n\n                if (u == null) {\n                    EmptyDisposable.complete(observer);\n                    return true;\n                }\n                ScalarDisposable<R> sd = new ScalarDisposable<R>(observer, u);\n                observer.onSubscribe(sd);\n                sd.run();\n            } else {\n                r.subscribe(observer);\n            }\n\n            return true;\n        }\n        return false;\n    }", "signature": "boolean tryScalarXMapSubscribe(ObservableSource<T> source,\n            Observer<? super R> observer,\n            Function<? super T, ? extends ObservableSource<? extends R>> mapper)", "full_signature": "@SuppressWarnings(\"unchecked\") public static boolean tryScalarXMapSubscribe(ObservableSource<T> source,\n            Observer<? super R> observer,\n            Function<? super T, ? extends ObservableSource<? extends R>> mapper)", "class_method_signature": "ObservableScalarXMap.tryScalarXMapSubscribe(ObservableSource<T> source,\n            Observer<? super R> observer,\n            Function<? super T, ? extends ObservableSource<? extends R>> mapper)", "testcase": false, "constructor": false, "invocations": ["call", "throwIfFatal", "error", "complete", "requireNonNull", "apply", "throwIfFatal", "error", "call", "throwIfFatal", "error", "complete", "onSubscribe", "run", "subscribe"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}