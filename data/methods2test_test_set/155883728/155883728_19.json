{"test_class": {"identifier": "ScanManyArtifactsMojoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File testOutBaseDir = new File(\"target/test-out/ScanManyArtifactsMojoTest\");", "modifier": "private final", "type": "File", "declarator": "testOutBaseDir = new File(\"target/test-out/ScanManyArtifactsMojoTest\")", "var_name": "testOutBaseDir"}], "file": "maven/src/test/java/net/adamcin/oakpal/maven/mojo/ScanManyArtifactsMojoTest.java"}, "test_case": {"identifier": "testListScanFiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testListScanFiles() throws Exception {\n        final File testOutDir = new File(testOutBaseDir, \"testListScanFiles\");\n        FileUtils.deleteDirectory(testOutDir);\n        testOutDir.mkdirs();\n        ScanManyArtifactsMojo mojo = newMojo();\n        assertTrue(\"empty by default\", mojo.listScanFiles().isEmpty());\n\n        final File artifactFile = new File(testOutDir, \"scan-artifact-file.zip\");\n        FileUtils.touch(artifactFile);\n        final File fileFile = new File(testOutDir, \"scan-file-file.zip\");\n        FileUtils.touch(fileFile);\n\n        final Dependency dependency = new DependencyFilter()\n                .withGroupId(\"com.example\")\n                .withArtifactId(\"scan-artifact-file\")\n                .withVersion(\"1.0-SNAPSHOT\")\n                .withType(\"zip\")\n                .toDependency();\n        mojo.scanArtifacts = Collections.singletonList(dependency);\n\n        mojo.scanFiles = Collections.singletonList(fileFile);\n\n        final MavenSession session = mock(MavenSession.class);\n        mojo.session = session;\n        final MavenExecutionRequest executionRequest = mock(MavenExecutionRequest.class);\n        when(session.getRequest()).thenReturn(executionRequest);\n        final RepositorySystem repositorySystem = mock(RepositorySystem.class);\n        mojo.repositorySystem = repositorySystem;\n\n        final Artifact scanArtifact = mock(Artifact.class);\n        when(scanArtifact.getFile()).thenReturn(artifactFile);\n        when(repositorySystem.createDependencyArtifact(dependency)).thenReturn(scanArtifact);\n\n        final List<File> scanFiles = mojo.listScanFiles();\n        assertEquals(\"expect files\", Arrays.asList(artifactFile, fileFile), scanFiles);\n    }", "signature": "void testListScanFiles()", "full_signature": "@Test public void testListScanFiles()", "class_method_signature": "ScanManyArtifactsMojoTest.testListScanFiles()", "testcase": true, "constructor": false, "invocations": ["deleteDirectory", "mkdirs", "newMojo", "assertTrue", "isEmpty", "listScanFiles", "touch", "touch", "toDependency", "withType", "withVersion", "withArtifactId", "withGroupId", "singletonList", "singletonList", "mock", "mock", "thenReturn", "when", "getRequest", "mock", "mock", "thenReturn", "when", "getFile", "thenReturn", "when", "createDependencyArtifact", "listScanFiles", "assertEquals", "asList"]}, "focal_class": {"identifier": "ScanManyArtifactsMojo", "superclass": "extends AbstractITestWithPlanMojo", "interfaces": "", "fields": [{"original_string": "@Parameter(property = \"oakpal.scan-many.skip\")\n    boolean skip;", "modifier": "@Parameter(property = \"oakpal.scan-many.skip\")", "type": "boolean", "declarator": "skip", "var_name": "skip"}, {"original_string": "@Parameter(name = \"scanArtifacts\")\n    List<Dependency> scanArtifacts = new ArrayList<>();", "modifier": "@Parameter(name = \"scanArtifacts\")", "type": "List<Dependency>", "declarator": "scanArtifacts = new ArrayList<>()", "var_name": "scanArtifacts"}, {"original_string": "@Parameter(name = \"scanFiles\")\n    List<File> scanFiles = new ArrayList<>();", "modifier": "@Parameter(name = \"scanFiles\")", "type": "List<File>", "declarator": "scanFiles = new ArrayList<>()", "var_name": "scanFiles"}], "methods": [{"identifier": "isIndividuallySkipped", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isIndividuallySkipped()", "full_signature": "@Override protected boolean isIndividuallySkipped()", "class_method_signature": "ScanManyArtifactsMojo.isIndividuallySkipped()", "testcase": false, "constructor": false}, {"identifier": "listScanFiles", "parameters": "()", "modifiers": "final", "return": "List<File>", "signature": "List<File> listScanFiles()", "full_signature": "final List<File> listScanFiles()", "class_method_signature": "ScanManyArtifactsMojo.listScanFiles()", "testcase": false, "constructor": false}, {"identifier": "executeGuardedIntegrationTest", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void executeGuardedIntegrationTest()", "full_signature": "@Override protected void executeGuardedIntegrationTest()", "class_method_signature": "ScanManyArtifactsMojo.executeGuardedIntegrationTest()", "testcase": false, "constructor": false}], "file": "maven/src/main/java/net/adamcin/oakpal/maven/mojo/ScanManyArtifactsMojo.java"}, "focal_method": {"identifier": "listScanFiles", "parameters": "()", "modifiers": "final", "return": "List<File>", "body": "final List<File> listScanFiles() throws MojoFailureException {\n        List<File> resolvedArtifacts = new ArrayList<>();\n\n        if (scanArtifacts != null && !scanArtifacts.isEmpty()) {\n            resolvedArtifacts.addAll(resolveDependencies(scanArtifacts, false));\n        }\n\n        if (scanFiles != null && !scanFiles.isEmpty()) {\n            resolvedArtifacts.addAll(scanFiles);\n        }\n\n        return resolvedArtifacts;\n    }", "signature": "List<File> listScanFiles()", "full_signature": "final List<File> listScanFiles()", "class_method_signature": "ScanManyArtifactsMojo.listScanFiles()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "addAll", "resolveDependencies", "isEmpty", "addAll"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}