{"test_class": {"identifier": "WordCountTest", "superclass": "", "interfaces": "", "fields": [], "file": "storm/trident-examples/src/test/java/storm/trident/topology/WordCountTest.java"}, "test_case": {"identifier": "testRunTopology", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRunTopology() throws InterruptedException {\n        Configuration conf = new Configuration();\n        WordCount topology = new WordCount(\"wordcount\", conf);\n        \n        StormRunner.runTopologyLocally(topology.buildTopology(), \"wordcount\", conf, 100);\n    }", "signature": "void testRunTopology()", "full_signature": "@Test public void testRunTopology()", "class_method_signature": "WordCountTest.testRunTopology()", "testcase": true, "constructor": false, "invocations": ["runTopologyLocally", "buildTopology"]}, "focal_class": {"identifier": "WordCount", "superclass": "extends AbstractTopology", "interfaces": "", "fields": [{"original_string": "private String spoutType;", "modifier": "private", "type": "String", "declarator": "spoutType", "var_name": "spoutType"}, {"original_string": "private String sinkType;", "modifier": "private", "type": "String", "declarator": "sinkType", "var_name": "sinkType"}, {"original_string": "private int spoutThreads;", "modifier": "private", "type": "int", "declarator": "spoutThreads", "var_name": "spoutThreads"}, {"original_string": "private int splitterThreads;", "modifier": "private", "type": "int", "declarator": "splitterThreads", "var_name": "splitterThreads"}, {"original_string": "private int counterThreads;", "modifier": "private", "type": "int", "declarator": "counterThreads", "var_name": "counterThreads"}, {"original_string": "private int sinkThreads;", "modifier": "private", "type": "int", "declarator": "sinkThreads", "var_name": "sinkThreads"}], "methods": [{"identifier": "WordCount", "parameters": "(String topologyName, Configuration config)", "modifiers": "public", "return": "", "signature": " WordCount(String topologyName, Configuration config)", "full_signature": "public  WordCount(String topologyName, Configuration config)", "class_method_signature": "WordCount.WordCount(String topologyName, Configuration config)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "WordCount.initialize()", "testcase": false, "constructor": false}, {"identifier": "buildTopology", "parameters": "()", "modifiers": "@Override public", "return": "StormTopology", "signature": "StormTopology buildTopology()", "full_signature": "@Override public StormTopology buildTopology()", "class_method_signature": "WordCount.buildTopology()", "testcase": false, "constructor": false}], "file": "storm/trident-examples/src/main/java/storm/trident/topology/WordCount.java"}, "focal_method": {"identifier": "buildTopology", "parameters": "()", "modifiers": "@Override public", "return": "StormTopology", "body": "@Override\n    public StormTopology buildTopology() {\n        TridentTopology topology = new TridentTopology();\n        \n        Stream sentences = null;\n        \n        switch (spoutType) {\n            case BaseConstants.SourceType.FILE:\n                int maxBatchSize = config.getInt(Config.SPOUT_MAX_BATCH_SIZE, 100);\n                String spoutPath = config.getString(Config.SPOUT_PATH);\n                sentences = topology.newStream(\"spout\", new FileSpout(maxBatchSize, spoutPath));\n                break;\n            case BaseConstants.SourceType.KAFKA:\n                createKafkaSpout(spoutType, spoutType);\n                break;\n            default:\n                throw new IllegalArgumentException(\"Must inform a spout type\");\n        }\n        \n        sentences = sentences.parallelismHint(spoutThreads);\n                \n        GroupedStream words = sentences.each(new Fields(\"sentence\"), new Split(), new Fields(\"word\"))\n                .parallelismHint(splitterThreads)\n                .groupBy(new Fields(\"word\"));\n                \n        Stream counts = words.persistentAggregate(new MemoryMapState.Factory(), new Count(), new Fields(\"count\"))\n                .parallelismHint(counterThreads)\n                .newValuesStream();\n        \n        if (sinkType.equals(SinkType.CONSOLE)) {\n            counts.each(new Fields(\"word\", \"count\"), new Debug())\n                    .parallelismHint(sinkThreads);\n        }\n\n        return topology.build();\n    }", "signature": "StormTopology buildTopology()", "full_signature": "@Override public StormTopology buildTopology()", "class_method_signature": "WordCount.buildTopology()", "testcase": false, "constructor": false, "invocations": ["getInt", "getString", "newStream", "createKafkaSpout", "parallelismHint", "groupBy", "parallelismHint", "each", "newValuesStream", "parallelismHint", "persistentAggregate", "equals", "parallelismHint", "each", "build"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}