{"test_class": {"identifier": "EncryptUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(EncryptUtilTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(EncryptUtilTest.class)", "var_name": "logger"}, {"original_string": "private static final String KEY = \"$%!*?t12\";", "modifier": "private static final", "type": "String", "declarator": "KEY = \"$%!*?t12\"", "var_name": "KEY"}, {"original_string": "private static final String SAMPLE1 = \"test\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE1 = \"test\"", "var_name": "SAMPLE1"}, {"original_string": "private static final String SAMPLE2 = \"hello world\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE2 = \"hello world\"", "var_name": "SAMPLE2"}, {"original_string": "private static final String SAMPLE3 = \"this is going to be a super long string that has spaces, etc. and ! I'm really happy that I'll be testing the MD5 hash to its fullest!!!!\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE3 = \"this is going to be a super long string that has spaces, etc. and ! I'm really happy that I'll be testing the MD5 hash to its fullest!!!!\"", "var_name": "SAMPLE3"}, {"original_string": "private static final String SAMPLE1_ENC = \"K5Ygd3D1N+8=\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE1_ENC = \"K5Ygd3D1N+8=\"", "var_name": "SAMPLE1_ENC"}, {"original_string": "private static final String SAMPLE2_ENC = \"TtJn7HMA9ww4xeJC7HCZhQ==\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE2_ENC = \"TtJn7HMA9ww4xeJC7HCZhQ==\"", "var_name": "SAMPLE2_ENC"}, {"original_string": "private static final String SAMPLE3_ENC = \"weXM56gYEglEtqRI/oOnhtawCRZG00aEfGxTgjysBZ08SZTRXhwhA7LrCklQ3WXGFi0oYlz0ACI7xneN4/P35JKCxMj+MNJS4spazdWFuIrryRqaUk/87KY39ve56nxqN31jC058guUPk4BglDpLIq9uyywv9vAlKnuXCMmDMjuyjBAuPqEoJYTzP7ObGhAJ\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE3_ENC = \"weXM56gYEglEtqRI/oOnhtawCRZG00aEfGxTgjysBZ08SZTRXhwhA7LrCklQ3WXGFi0oYlz0ACI7xneN4/P35JKCxMj+MNJS4spazdWFuIrryRqaUk/87KY39ve56nxqN31jC058guUPk4BglDpLIq9uyywv9vAlKnuXCMmDMjuyjBAuPqEoJYTzP7ObGhAJ\"", "var_name": "SAMPLE3_ENC"}], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/EncryptUtilTest.java"}, "test_case": {"identifier": "decrypt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void decrypt() throws Exception {\n        String string0 = EncryptUtil.decrypt(KEY, SAMPLE1_ENC);\n        Assert.assertEquals(SAMPLE1, string0);\n        string0 = EncryptUtil.decrypt(KEY, SAMPLE2_ENC);\n        Assert.assertEquals(SAMPLE2, string0);\n        string0 = EncryptUtil.decrypt(KEY, SAMPLE3_ENC);\n        Assert.assertEquals(SAMPLE3, string0);\n    }", "signature": "void decrypt()", "full_signature": "@Test public void decrypt()", "class_method_signature": "EncryptUtilTest.decrypt()", "testcase": true, "constructor": false, "invocations": ["decrypt", "assertEquals", "decrypt", "assertEquals", "decrypt", "assertEquals"]}, "focal_class": {"identifier": "EncryptUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "generateKey", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String generateKey()", "full_signature": "public static String generateKey()", "class_method_signature": "EncryptUtil.generateKey()", "testcase": false, "constructor": false}, {"identifier": "encrypt", "parameters": "(String key, String source)", "modifiers": "public static", "return": "String", "signature": "String encrypt(String key, String source)", "full_signature": "public static String encrypt(String key, String source)", "class_method_signature": "EncryptUtil.encrypt(String key, String source)", "testcase": false, "constructor": false}, {"identifier": "decrypt", "parameters": "(String key, String source)", "modifiers": "public static", "return": "String", "signature": "String decrypt(String key, String source)", "full_signature": "public static String decrypt(String key, String source)", "class_method_signature": "EncryptUtil.decrypt(String key, String source)", "testcase": false, "constructor": false}, {"identifier": "getKey", "parameters": "(String key)", "modifiers": "private static", "return": "Key", "signature": "Key getKey(String key)", "full_signature": "private static Key getKey(String key)", "class_method_signature": "EncryptUtil.getKey(String key)", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/EncryptUtil.java"}, "focal_method": {"identifier": "decrypt", "parameters": "(String key, String source)", "modifiers": "public static", "return": "String", "body": "public static String decrypt(String key, String source) {\n        try {\n            // Get our secret key\n            Key key0 = getKey(key);\n            // Create the cipher\n            Cipher desCipher = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");\n\n            //byte[] b64cipherText = StringUtil.getAsciiBytes(source);\n            // convert source string into base 64 bytes\n            //byte[] ciphertext = Base64.decodeBase64(b64cipherText);\n            // replaced Jakarta Base64 with custom one\n            byte[] ciphertext = Base64Codec.decode(source);\n\n            // Initialize the same cipher for decryption\n            desCipher.init(Cipher.DECRYPT_MODE, key0);\n            // Decrypt the ciphertext\n            byte[] cleartext = desCipher.doFinal(ciphertext);\n            // Return the clear text\n            return new String(cleartext);\n        } catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n        }\n    }", "signature": "String decrypt(String key, String source)", "full_signature": "public static String decrypt(String key, String source)", "class_method_signature": "EncryptUtil.decrypt(String key, String source)", "testcase": false, "constructor": false, "invocations": ["getKey", "getInstance", "decode", "init", "doFinal", "getMessage"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}