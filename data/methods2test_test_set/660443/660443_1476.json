{"test_class": {"identifier": "FragmentComplexityDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/FragmentComplexityDescriptorTest.java"}, "test_case": {"identifier": "test1FragmentComplexityDescriptor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test1FragmentComplexityDescriptor() throws Exception {\n        IMolecularDescriptor descriptor = new FragmentComplexityDescriptor();\n        String filename = \"data/mdl/murckoTest1.mol\";\n        //System.out.println(\"\\nFragmentComplexityTest: \" + filename);\n        InputStream ins = this.getClass().getClassLoader().getResourceAsStream(filename);\n        MurckoFragmenter gf = new MurckoFragmenter();\n        double Complexity = 0;\n        MDLV2000Reader reader = new MDLV2000Reader(ins, Mode.STRICT);\n        IAtomContainer mol = reader.read(new AtomContainer());\n        gf.generateFragments(mol);\n        IAtomContainer[] setOfFragments = gf.getFrameworksAsContainers();\n        for (int i = 0; i < setOfFragments.length; i++) {\n            addExplicitHydrogens(setOfFragments[i]);\n            Complexity = ((DoubleResult) descriptor.calculate(setOfFragments[i]).getValue()).doubleValue();\n            //System.out.println(\"Complexity:\"+Complexity);\n        }\n        Assert.assertEquals(659.00, Complexity, 0.01);\n    }", "signature": "void test1FragmentComplexityDescriptor()", "full_signature": "@Test public void test1FragmentComplexityDescriptor()", "class_method_signature": "FragmentComplexityDescriptorTest.test1FragmentComplexityDescriptor()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClassLoader", "getClass", "read", "generateFragments", "getFrameworksAsContainers", "addExplicitHydrogens", "doubleValue", "getValue", "calculate", "assertEquals"]}, "focal_class": {"identifier": "FragmentComplexityDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private static final String[] NAMES = {\"fragC\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES = {\"fragC\"}", "var_name": "NAMES"}], "methods": [{"identifier": "FragmentComplexityDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " FragmentComplexityDescriptor()", "full_signature": "public  FragmentComplexityDescriptor()", "class_method_signature": "FragmentComplexityDescriptor.FragmentComplexityDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "FragmentComplexityDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "FragmentComplexityDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "FragmentComplexityDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "FragmentComplexityDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "FragmentComplexityDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "FragmentComplexityDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "FragmentComplexityDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "FragmentComplexityDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/FragmentComplexityDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer container) {\n        //System.out.println(\"FragmentComplexityDescriptor\");\n        int a = 0;\n        double h = 0;\n        for (int i = 0; i < container.getAtomCount(); i++) {\n            if (container.getAtom(i).getAtomicNumber() != IElement.H) {\n                a++;\n            }\n            if (container.getAtom(i).getAtomicNumber() != IElement.H && container.getAtom(i).getAtomicNumber() != IElement.C) {\n                h++;\n            }\n        }\n        int b = container.getBondCount() + AtomContainerManipulator.getImplicitHydrogenCount(container);\n        double c = Math.abs(b * b - a * a + a) + (h / 100);\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(c),\n                getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "FragmentComplexityDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["getAtomCount", "getAtomicNumber", "getAtom", "getAtomicNumber", "getAtom", "getAtomicNumber", "getAtom", "getBondCount", "getImplicitHydrogenCount", "abs", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}