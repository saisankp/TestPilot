{"test_class": {"identifier": "HKXWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String TEST_BASE_OUTPUT_NAME = \"test-base.hkx\";", "modifier": "public static final", "type": "String", "declarator": "TEST_BASE_OUTPUT_NAME = \"test-base.hkx\"", "var_name": "TEST_BASE_OUTPUT_NAME"}, {"original_string": "public static final String TEST_BASE_REXOURCE_TARGET = \"/test-base.hkx\";", "modifier": "public static final", "type": "String", "declarator": "TEST_BASE_REXOURCE_TARGET = \"/test-base.hkx\"", "var_name": "TEST_BASE_REXOURCE_TARGET"}, {"original_string": "private static HKXEnumResolver enumResolver;", "modifier": "private static", "type": "HKXEnumResolver", "declarator": "enumResolver", "var_name": "enumResolver"}, {"original_string": "private static HKXFile file;", "modifier": "private static", "type": "HKXFile", "declarator": "file", "var_name": "file"}], "file": "core/src/test/java/com/dexesttp/hkxpack/hkxwriter/HKXWriterTest.java"}, "test_case": {"identifier": "testWriteDefaultFileToPhysicalFile", "parameters": "()", "modifiers": "@Test /** * Writes a default file to a test file, and compare its contents to the target. */ public", "return": "void", "body": "@Test\n\t/**\n\t * Writes a default file to a test file, and compare its contents to the target.\n\t */\n\tpublic void testWriteDefaultFileToPhysicalFile() throws Exception {\n\t\tFile outputFile = File.createTempFile(TEST_BASE_OUTPUT_NAME, \"\");\n\t\tHKXWriter writer = new HKXWriter(outputFile, enumResolver);\n\t\twriter.write(file);\n\t\tassertArrayEquals(\n\t\t\t\tFiles.toByteArray(outputFile),\n\t\t\t\tFileUtils.resourceToByteArray(TEST_BASE_REXOURCE_TARGET));\n\t}", "signature": "void testWriteDefaultFileToPhysicalFile()", "full_signature": "@Test /** * Writes a default file to a test file, and compare its contents to the target. */ public void testWriteDefaultFileToPhysicalFile()", "class_method_signature": "HKXWriterTest.testWriteDefaultFileToPhysicalFile()", "testcase": true, "constructor": false, "invocations": ["createTempFile", "write", "assertArrayEquals", "toByteArray", "resourceToByteArray"]}, "focal_class": {"identifier": "HKXWriter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int DEFAULT_BUFFER_CAPACITY = 10000000;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_BUFFER_CAPACITY = 10000000", "var_name": "DEFAULT_BUFFER_CAPACITY"}, {"original_string": "private final transient HKXEnumResolver enumResolver;", "modifier": "private final transient", "type": "HKXEnumResolver", "declarator": "enumResolver", "var_name": "enumResolver"}, {"original_string": "private final transient Optional<File> outputFile;", "modifier": "private final transient", "type": "Optional<File>", "declarator": "outputFile", "var_name": "outputFile"}, {"original_string": "private final transient ByteBuffer outputBB;", "modifier": "private final transient", "type": "ByteBuffer", "declarator": "outputBB", "var_name": "outputBB"}], "methods": [{"identifier": "HKXWriter", "parameters": "(final File outputFile, final HKXEnumResolver enumResolver)", "modifiers": "public", "return": "", "signature": " HKXWriter(final File outputFile, final HKXEnumResolver enumResolver)", "full_signature": "public  HKXWriter(final File outputFile, final HKXEnumResolver enumResolver)", "class_method_signature": "HKXWriter.HKXWriter(final File outputFile, final HKXEnumResolver enumResolver)", "testcase": false, "constructor": true}, {"identifier": "HKXWriter", "parameters": "(final File outputFile, final HKXEnumResolver enumResolver, final int bufferCapacity)", "modifiers": "public", "return": "", "signature": " HKXWriter(final File outputFile, final HKXEnumResolver enumResolver, final int bufferCapacity)", "full_signature": "public  HKXWriter(final File outputFile, final HKXEnumResolver enumResolver, final int bufferCapacity)", "class_method_signature": "HKXWriter.HKXWriter(final File outputFile, final HKXEnumResolver enumResolver, final int bufferCapacity)", "testcase": false, "constructor": true}, {"identifier": "HKXWriter", "parameters": "(final ByteBuffer outputBB, final HKXEnumResolver enumResolver)", "modifiers": "public", "return": "", "signature": " HKXWriter(final ByteBuffer outputBB, final HKXEnumResolver enumResolver)", "full_signature": "public  HKXWriter(final ByteBuffer outputBB, final HKXEnumResolver enumResolver)", "class_method_signature": "HKXWriter.HKXWriter(final ByteBuffer outputBB, final HKXEnumResolver enumResolver)", "testcase": false, "constructor": true}, {"identifier": "write", "parameters": "(final HKXFile file)", "modifiers": "public", "return": "void", "signature": "void write(final HKXFile file)", "full_signature": "public void write(final HKXFile file)", "class_method_signature": "HKXWriter.write(final HKXFile file)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/dexesttp/hkxpack/hkxwriter/HKXWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(final HKXFile file)", "modifiers": "public", "return": "void", "body": "public void write(final HKXFile file) throws IOException, UnsupportedVersionError\n\t{\n\t\t// Connect to the file.\n\t\tHKXWriterConnector connector = new HKXWriterConnector(outputBB);\n\n\t\t// Create the header.\n\t\tHeaderData header = new HKXHeaderFactory().create(file);\n\n\t\t// Create the file's section data.\n\t\tHKXSectionHandler sectionHandler = new HKXSectionHandler(header);\n\t\tSectionData classnames = new SectionData();\n\t\tSectionData types = new SectionData();\n\t\tSectionData data = new SectionData();\n\t\tsectionHandler.init(HKXSectionHandler.CLASSNAME, classnames);\n\n\t\t// Create the ClassNames data.\n\t\tHKXClassnamesHandler cnameHandler = new HKXClassnamesHandler();\n\t\tClassnamesData cnameData = cnameHandler.getClassnames(file);\n\n\t\t// Write ClassNames data to the file.\n\t\tlong classnamesEnd = connector.writeClassnames(classnames, cnameData);\n\t\tsectionHandler.fillCName(classnames, classnamesEnd);\n\t\tconnector.writeHeader(header);\n\t\tconnector.writeSection(header, HKXSectionHandler.CLASSNAME, classnames);\n\n\t\t// Update things to prepare for Data writing.\n\t\tsectionHandler.init(HKXSectionHandler.TYPES, types);\n\t\tconnector.writeSection(header, HKXSectionHandler.TYPES, types);\n\t\tsectionHandler.init(HKXSectionHandler.DATA, data);\n\n\t\t// Write data in the file and store data1/data2/data3 values.\n\t\tPointerResolver resolver = new PointerResolver();\n\t\tHKXDataHandler dataHandler = new HKXDataHandler(outputBB, cnameData, enumResolver);\n\t\ttry\n\t\t{\n\t\t\tlong endData = dataHandler.fillFile(data, file, resolver) - data.offset;\n\t\t\tdata.data1 = endData % 0x10 == 0 ? endData : (1 + endData / 0x10) * 0x10;\n\t\t\tdataHandler.fillPointers(data, resolver);\n\t\t\t\n\t\t\t// Flips the ByteBuffer now, to set its limit to the end of the file.\n\t\t\toutputBB.flip();\n\t\t\t\n\t\t\t// Write the data section to the file.\n\t\t\tconnector.writeSection(header, HKXSectionHandler.DATA, data);\n\t\t}\n\t\tcatch (ClassCastException e)\n\t\t{\n\t\t\tLoggerUtil.add(new WrongInputCastException(String.format(SBundle.getString(\"error.hkx.write.cast\")), e));\n\t\t}\n\t\t\n\t\t// Prepare the output ByteBuffer for use.\n\t\toutputBB.position(0);\n\t\t\n\t\t// If needed, write the output ByteBuffer back to the file.\n\t\tif (outputFile.isPresent())\n\t\t{\n\t\t\ttry (RandomAccessFile out = new RandomAccessFile(outputFile.get(), \"rw\"))\n\t\t\t{\n\t\t\t\tbyte[] bytes = new byte[outputBB.limit()];\n\t\t\t\toutputBB.get(bytes);\n\t\t\t\tout.write(bytes);\n\t\t\t\tout.close();\n\t\t\t}\n\t\t}\n\t}", "signature": "void write(final HKXFile file)", "full_signature": "public void write(final HKXFile file)", "class_method_signature": "HKXWriter.write(final HKXFile file)", "testcase": false, "constructor": false, "invocations": ["create", "init", "getClassnames", "writeClassnames", "fillCName", "writeHeader", "writeSection", "init", "writeSection", "init", "fillFile", "fillPointers", "flip", "writeSection", "add", "format", "getString", "position", "isPresent", "get", "limit", "get", "write", "close"]}, "repository": {"repo_id": 49679586, "url": "https://github.com/Dexesttp/hkxpack", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 31, "size": 1129, "license": "licensed"}}