{"test_class": {"identifier": "LgrfSuggesterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CoordinateSystem coords;", "modifier": "private", "type": "CoordinateSystem", "declarator": "coords", "var_name": "coords"}, {"original_string": "private Board board;", "modifier": "private", "type": "Board", "declarator": "board", "var_name": "board"}, {"original_string": "private LgrfTable lgrfTable;", "modifier": "private", "type": "LgrfTable", "declarator": "lgrfTable", "var_name": "lgrfTable"}, {"original_string": "private LgrfSuggester suggester;", "modifier": "private", "type": "LgrfSuggester", "declarator": "suggester", "var_name": "suggester"}, {"original_string": "private HistoryObserver history;", "modifier": "private", "type": "HistoryObserver", "declarator": "history", "var_name": "history"}], "file": "src/edu/lclark/orego/feature/LgrfSuggesterTest.java"}, "test_case": {"identifier": "testOccupiedPoint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testOccupiedPoint() {\n\t\tlgrfTable.update(BLACK, true, coords.at(\"a1\"), coords.at(\"b1\"),\n\t\t\t\tcoords.at(\"c1\"));\n\t\tboard.play(coords.at(\"c1\"));\n\t\tboard.play(coords.at(\"b1\"));\n\t\t// The tables say c1, but it's occupied\n\t\tassertEquals(NO_POINT, suggester.getMoves().get(0));\n\t}", "signature": "void testOccupiedPoint()", "full_signature": "@Test public void testOccupiedPoint()", "class_method_signature": "LgrfSuggesterTest.testOccupiedPoint()", "testcase": true, "constructor": false, "invocations": ["update", "at", "at", "at", "play", "at", "play", "at", "assertEquals", "get", "getMoves"]}, "focal_class": {"identifier": "LgrfSuggester", "superclass": "", "interfaces": "implements Suggester", "fields": [{"original_string": "private final int bias;", "modifier": "private final", "type": "int", "declarator": "bias", "var_name": "bias"}, {"original_string": "private final Board board;", "modifier": "private final", "type": "Board", "declarator": "board", "var_name": "board"}, {"original_string": "private final HistoryObserver history;", "modifier": "private final", "type": "HistoryObserver", "declarator": "history", "var_name": "history"}, {"original_string": "private final ShortSet moves;", "modifier": "private final", "type": "ShortSet", "declarator": "moves", "var_name": "moves"}, {"original_string": "private final Predicate filter;", "modifier": "private final", "type": "Predicate", "declarator": "filter", "var_name": "filter"}, {"original_string": "private transient LgrfTable table;", "modifier": "private transient", "type": "LgrfTable", "declarator": "table", "var_name": "table"}], "methods": [{"identifier": "LgrfSuggester", "parameters": "(Board board, HistoryObserver history, LgrfTable table, Predicate filter)", "modifiers": "public", "return": "", "signature": " LgrfSuggester(Board board, HistoryObserver history, LgrfTable table, Predicate filter)", "full_signature": "public  LgrfSuggester(Board board, HistoryObserver history, LgrfTable table, Predicate filter)", "class_method_signature": "LgrfSuggester.LgrfSuggester(Board board, HistoryObserver history, LgrfTable table, Predicate filter)", "testcase": false, "constructor": true}, {"identifier": "LgrfSuggester", "parameters": "(Board board, HistoryObserver history, LgrfTable table, int bias, Predicate filter)", "modifiers": "public", "return": "", "signature": " LgrfSuggester(Board board, HistoryObserver history, LgrfTable table, int bias, Predicate filter)", "full_signature": "public  LgrfSuggester(Board board, HistoryObserver history, LgrfTable table, int bias, Predicate filter)", "class_method_signature": "LgrfSuggester.LgrfSuggester(Board board, HistoryObserver history, LgrfTable table, int bias, Predicate filter)", "testcase": false, "constructor": true}, {"identifier": "getBias", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getBias()", "full_signature": "@Override public int getBias()", "class_method_signature": "LgrfSuggester.getBias()", "testcase": false, "constructor": false}, {"identifier": "getMoves", "parameters": "()", "modifiers": "@Override public", "return": "ShortSet", "signature": "ShortSet getMoves()", "full_signature": "@Override public ShortSet getMoves()", "class_method_signature": "LgrfSuggester.getMoves()", "testcase": false, "constructor": false}, {"identifier": "setTable", "parameters": "(LgrfTable table)", "modifiers": "public", "return": "void", "signature": "void setTable(LgrfTable table)", "full_signature": "public void setTable(LgrfTable table)", "class_method_signature": "LgrfSuggester.setTable(LgrfTable table)", "testcase": false, "constructor": false}], "file": "src/edu/lclark/orego/feature/LgrfSuggester.java"}, "focal_method": {"identifier": "getMoves", "parameters": "()", "modifiers": "@Override public", "return": "ShortSet", "body": "@Override\n\tpublic ShortSet getMoves() {\n\t\tmoves.clear();\n\t\tfinal short previousMove = history.get(board.getTurn() - 1);\n\t\tshort reply = table.getSecondLevelReply(board.getColorToPlay(),\n\t\t\t\thistory.get(board.getTurn() - 2), previousMove);\n\t\tif (reply != NO_POINT && board.getColorAt(reply) == VACANT && filter.at(reply)) {\n\t\t\tmoves.add(reply);\n\t\t} else {\n\t\t\treply = table.getFirstLevelReply(board.getColorToPlay(), previousMove);\n\t\t\tif (reply != NO_POINT && board.getColorAt(reply) == VACANT && filter.at(reply)) {\n\t\t\t\tmoves.add(reply);\n\t\t\t}\n\t\t}\n\t\treturn moves;\n\t}", "signature": "ShortSet getMoves()", "full_signature": "@Override public ShortSet getMoves()", "class_method_signature": "LgrfSuggester.getMoves()", "testcase": false, "constructor": false, "invocations": ["clear", "get", "getTurn", "getSecondLevelReply", "getColorToPlay", "get", "getTurn", "getColorAt", "at", "add", "getFirstLevelReply", "getColorToPlay", "getColorAt", "at", "add"]}, "repository": {"repo_id": 7859424, "url": "https://github.com/Orego/Orego", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 1341444, "license": "licensed"}}