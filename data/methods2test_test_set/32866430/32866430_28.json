{"test_class": {"identifier": "SecretDeliveryResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ApiDate NOW = ApiDate.now();", "modifier": "private static final", "type": "ApiDate", "declarator": "NOW = ApiDate.now()", "var_name": "NOW"}, {"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock SecretController secretController;", "modifier": "@Mock", "type": "SecretController", "declarator": "secretController", "var_name": "secretController"}, {"original_string": "@Mock AclDAO aclDAO;", "modifier": "@Mock", "type": "AclDAO", "declarator": "aclDAO", "var_name": "aclDAO"}, {"original_string": "@Mock ClientDAO clientDAO;", "modifier": "@Mock", "type": "ClientDAO", "declarator": "clientDAO", "var_name": "clientDAO"}, {"original_string": "SecretDeliveryResource secretDeliveryResource;", "modifier": "", "type": "SecretDeliveryResource", "declarator": "secretDeliveryResource", "var_name": "secretDeliveryResource"}, {"original_string": "final Client client = new Client(0, \"principal\", null, null, null, null, null, null, null, null, false,\n      false);", "modifier": "final", "type": "Client", "declarator": "client = new Client(0, \"principal\", null, null, null, null, null, null, null, null, false,\n      false)", "var_name": "client"}, {"original_string": "final Secret secret = new Secret(0, \"secret_name\", null, () -> \"secret_value\", \"checksum\", NOW, null, NOW, null,\n      null, null, null, 0, 1L, NOW, null);", "modifier": "final", "type": "Secret", "declarator": "secret = new Secret(0, \"secret_name\", null, () -> \"secret_value\", \"checksum\", NOW, null, NOW, null,\n      null, null, null, 0, 1L, NOW, null)", "var_name": "secret"}, {"original_string": "final Secret secretBase64 = new Secret(1, \"Base64With=\", null, () -> \"SGVsbG8=\", \"checksum\", NOW, null, NOW,\n      null, null, null, null, 0, 1L, NOW, null);", "modifier": "final", "type": "Secret", "declarator": "secretBase64 = new Secret(1, \"Base64With=\", null, () -> \"SGVsbG8=\", \"checksum\", NOW, null, NOW,\n      null, null, null, null, 0, 1L, NOW, null)", "var_name": "secretBase64"}], "file": "server/src/test/java/keywhiz/service/resources/SecretDeliveryResourceTest.java"}, "test_case": {"identifier": "returnsVersionedSecretWhenAllowed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void returnsVersionedSecretWhenAllowed() throws Exception {\n    String name = \"secret_name\";\n    Secret versionedSecret = new Secret(2, name, null, () -> \"U3BpZGVybWFu\", \"checksum\", NOW, null, NOW,\n        null, null, null, null, 0, 1L, NOW, null);\n\n    when(aclDAO.getSanitizedSecretFor(client, name))\n        .thenReturn(Optional.of(SanitizedSecret.fromSecret(versionedSecret)));\n    when(secretController.getSecretByName(name))\n        .thenReturn(Optional.of(versionedSecret));\n\n    String displayName = versionedSecret.getDisplayName();\n    SecretDeliveryResponse response = secretDeliveryResource.getSecret(displayName, client);\n    assertThat(response).isEqualTo(SecretDeliveryResponse.fromSecret(versionedSecret));\n  }", "signature": "void returnsVersionedSecretWhenAllowed()", "full_signature": "@Test public void returnsVersionedSecretWhenAllowed()", "class_method_signature": "SecretDeliveryResourceTest.returnsVersionedSecretWhenAllowed()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getSanitizedSecretFor", "of", "fromSecret", "thenReturn", "when", "getSecretByName", "of", "getDisplayName", "getSecret", "isEqualTo", "assertThat", "fromSecret"]}, "focal_class": {"identifier": "SecretDeliveryResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SecretDeliveryResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SecretDeliveryResource.class)", "var_name": "logger"}, {"original_string": "private final SecretController secretController;", "modifier": "private final", "type": "SecretController", "declarator": "secretController", "var_name": "secretController"}, {"original_string": "private final AclDAO aclDAO;", "modifier": "private final", "type": "AclDAO", "declarator": "aclDAO", "var_name": "aclDAO"}, {"original_string": "private final ClientDAO clientDAO;", "modifier": "private final", "type": "ClientDAO", "declarator": "clientDAO", "var_name": "clientDAO"}], "methods": [{"identifier": "SecretDeliveryResource", "parameters": "(@Readonly SecretController secretController,\n      AclDAOFactory aclDAOFactory, ClientDAOFactory clientDAOFactory)", "modifiers": "@Inject public", "return": "", "signature": " SecretDeliveryResource(@Readonly SecretController secretController,\n      AclDAOFactory aclDAOFactory, ClientDAOFactory clientDAOFactory)", "full_signature": "@Inject public  SecretDeliveryResource(@Readonly SecretController secretController,\n      AclDAOFactory aclDAOFactory, ClientDAOFactory clientDAOFactory)", "class_method_signature": "SecretDeliveryResource.SecretDeliveryResource(@Readonly SecretController secretController,\n      AclDAOFactory aclDAOFactory, ClientDAOFactory clientDAOFactory)", "testcase": false, "constructor": true}, {"identifier": "SecretDeliveryResource", "parameters": "(SecretController secretController, AclDAO aclDAO,\n      ClientDAO clientDAO)", "modifiers": "@VisibleForTesting", "return": "", "signature": " SecretDeliveryResource(SecretController secretController, AclDAO aclDAO,\n      ClientDAO clientDAO)", "full_signature": "@VisibleForTesting  SecretDeliveryResource(SecretController secretController, AclDAO aclDAO,\n      ClientDAO clientDAO)", "class_method_signature": "SecretDeliveryResource.SecretDeliveryResource(SecretController secretController, AclDAO aclDAO,\n      ClientDAO clientDAO)", "testcase": false, "constructor": true}, {"identifier": "getSecret", "parameters": "(@NotEmpty @PathParam(\"secretName\") String secretName,\n                                          @Auth Client client)", "modifiers": "@Timed @ExceptionMetered @GET public", "return": "SecretDeliveryResponse", "signature": "SecretDeliveryResponse getSecret(@NotEmpty @PathParam(\"secretName\") String secretName,\n                                          @Auth Client client)", "full_signature": "@Timed @ExceptionMetered @GET public SecretDeliveryResponse getSecret(@NotEmpty @PathParam(\"secretName\") String secretName,\n                                          @Auth Client client)", "class_method_signature": "SecretDeliveryResource.getSecret(@NotEmpty @PathParam(\"secretName\") String secretName,\n                                          @Auth Client client)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/resources/SecretDeliveryResource.java"}, "focal_method": {"identifier": "getSecret", "parameters": "(@NotEmpty @PathParam(\"secretName\") String secretName,\n                                          @Auth Client client)", "modifiers": "@Timed @ExceptionMetered @GET public", "return": "SecretDeliveryResponse", "body": "@Timed @ExceptionMetered\n  @GET\n  public SecretDeliveryResponse getSecret(@NotEmpty @PathParam(\"secretName\") String secretName,\n                                          @Auth Client client) {\n    Optional<SanitizedSecret> sanitizedSecret = aclDAO.getSanitizedSecretFor(client, secretName);\n    Optional<Secret> secret = secretController.getSecretByName(secretName);\n\n    if (!sanitizedSecret.isPresent()) {\n      boolean clientExists = clientDAO.getClientByName(client.getName()).isPresent();\n      boolean secretExists = secret.isPresent();\n\n      if (clientExists && secretExists) {\n        throw new ForbiddenException(format(\"Access denied: %s at '%s' by '%s'\", client.getName(),\n                \"/secret/\" + secretName, client));\n      } else {\n        if (clientExists) {\n          logger.info(\"Client {} requested unknown secret {}\", client.getName(), secretName);\n        }\n        throw new NotFoundException();\n      }\n    }\n\n    logger.info(\"Client {} granted access to {}.\", client.getName(), secretName);\n    try {\n      return SecretDeliveryResponse.fromSecret(secret.get());\n    } catch (IllegalArgumentException e) {\n      logger.error(format(\"Failed creating response for secret %s\", secretName), e);\n      throw new InternalServerErrorException();\n    }\n  }", "signature": "SecretDeliveryResponse getSecret(@NotEmpty @PathParam(\"secretName\") String secretName,\n                                          @Auth Client client)", "full_signature": "@Timed @ExceptionMetered @GET public SecretDeliveryResponse getSecret(@NotEmpty @PathParam(\"secretName\") String secretName,\n                                          @Auth Client client)", "class_method_signature": "SecretDeliveryResource.getSecret(@NotEmpty @PathParam(\"secretName\") String secretName,\n                                          @Auth Client client)", "testcase": false, "constructor": false, "invocations": ["getSanitizedSecretFor", "getSecretByName", "isPresent", "isPresent", "getClientByName", "getName", "isPresent", "format", "getName", "info", "getName", "info", "getName", "fromSecret", "get", "error", "format"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}