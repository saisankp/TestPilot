{"test_class": {"identifier": "TestPointOfFocusProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ASTQueryContainer ast;", "modifier": "private", "type": "ASTQueryContainer", "declarator": "ast", "var_name": "ast"}], "file": "recommendation-servlet/src/test/java/org/sindice/analytics/queryProcessor/TestPointOfFocusProcessor.java"}, "test_case": {"identifier": "testConstructQueryPOFWithSolutionsMod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testConstructQueryPOFWithSolutionsMod()\n  throws Exception {\n    final String q = \"CONSTRUCT { ?s a ?o } WHERE { ?s < ?o } GROUP BY(?s)\";\n    final String expectedAst = \"QueryContainer\\n\" +\n                                \" SelectQuery\\n\" +\n                                \"  Select\\n\" +\n                                \"   ProjectionElem\\n\" +\n                                \"    Var (POF)\\n\" +\n                                \"  WhereClause\\n\" +\n                                \"   GraphPatternGroup\\n\" +\n                                \"    BasicGraphPattern\\n\" +\n                                \"     TriplesSameSubjectPath\\n\" +\n                                \"      Var (s)\\n\" +\n                                \"      PropertyListPath\\n\" +\n                                \"       Var (POF)\\n\" +\n                                \"       ObjectList\\n\" +\n                                \"        Var (o)\\n\" +\n                                \"  GroupClause\\n\" +\n                                \"   GroupCondition\\n\" +\n                                \"    Var (s)\";\n\n    ast = SyntaxTreeBuilder.parseQuery(q);\n    PointOfFocusProcessor.process(ast);\n    assertEquals(expectedAst, ast.dump(\"\"));\n  }", "signature": "void testConstructQueryPOFWithSolutionsMod()", "full_signature": "@Test public void testConstructQueryPOFWithSolutionsMod()", "class_method_signature": "TestPointOfFocusProcessor.testConstructQueryPOFWithSolutionsMod()", "testcase": true, "constructor": false, "invocations": ["parseQuery", "process", "assertEquals", "dump"]}, "focal_class": {"identifier": "PointOfFocusProcessor", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "PointOfFocusProcessor", "parameters": "()", "modifiers": "private", "return": "", "signature": " PointOfFocusProcessor()", "full_signature": "private  PointOfFocusProcessor()", "class_method_signature": "PointOfFocusProcessor.PointOfFocusProcessor()", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(ASTQueryContainer ast)", "modifiers": "public static", "return": "RecommendationType", "signature": "RecommendationType process(ASTQueryContainer ast)", "full_signature": "public static RecommendationType process(ASTQueryContainer ast)", "class_method_signature": "PointOfFocusProcessor.process(ASTQueryContainer ast)", "testcase": false, "constructor": false}], "file": "recommendation-servlet/src/main/java/org/sindice/analytics/queryProcessor/PointOfFocusProcessor.java"}, "focal_method": {"identifier": "process", "parameters": "(ASTQueryContainer ast)", "modifiers": "public static", "return": "RecommendationType", "body": "public static RecommendationType process(ASTQueryContainer ast)\n  throws VisitorException {\n    final List<String> v = new ArrayList<String>();\n\n    if (!(ast.getQuery() instanceof ASTSelectQuery)) { // Change to a SelectQuery\n      final ASTSelectQuery selectQuery = new ASTSelectQuery(SyntaxTreeBuilderTreeConstants.JJTSELECTQUERY);\n      final ASTSelect select = new ASTSelect(SyntaxTreeBuilderTreeConstants.JJTSELECT);\n\n      selectQuery.jjtAppendChild(select);\n      for (ASTDatasetClause d : ast.getQuery().getDatasetClauseList()) {\n        selectQuery.jjtAppendChild(d);\n      }\n      selectQuery.jjtAppendChild(ast.getQuery().getWhereClause());\n      if (!(ast.getQuery() instanceof ASTAskQuery)) {\n        if (ast.getQuery().getGroupClause() != null) {\n          selectQuery.jjtAppendChild(ast.getQuery().getGroupClause());\n        }\n        if (ast.getQuery().getHavingClause() != null) {\n          selectQuery.jjtAppendChild(ast.getQuery().getHavingClause());\n        }\n        if (ast.getQuery().getOrderClause() != null) {\n          selectQuery.jjtAppendChild(ast.getQuery().getOrderClause());\n        }\n        if (ast.getQuery().getLimit() != null) {\n          selectQuery.jjtAppendChild(ast.getQuery().getLimit());\n        }\n        if (ast.getQuery().getOffset() != null) {\n          selectQuery.jjtAppendChild(ast.getQuery().getOffset());\n        }\n      }\n      if (ast.getQuery().getBindingsClause() != null) {\n        selectQuery.jjtAppendChild(ast.getQuery().getBindingsClause());\n      }\n      ast.getQuery().jjtReplaceWith(selectQuery);\n    }\n    final ASTMaterializePointOfFocus matPOF = new ASTMaterializePointOfFocus();\n    matPOF.visit(ast, v);\n    final POFRecType type = new POFRecType();\n    return (RecommendationType) type.visit(ast, RecommendationType.NONE);\n  }", "signature": "RecommendationType process(ASTQueryContainer ast)", "full_signature": "public static RecommendationType process(ASTQueryContainer ast)", "class_method_signature": "PointOfFocusProcessor.process(ASTQueryContainer ast)", "testcase": false, "constructor": false, "invocations": ["getQuery", "jjtAppendChild", "getDatasetClauseList", "getQuery", "jjtAppendChild", "jjtAppendChild", "getWhereClause", "getQuery", "getQuery", "getGroupClause", "getQuery", "jjtAppendChild", "getGroupClause", "getQuery", "getHavingClause", "getQuery", "jjtAppendChild", "getHavingClause", "getQuery", "getOrderClause", "getQuery", "jjtAppendChild", "getOrderClause", "getQuery", "getLimit", "getQuery", "jjtAppendChild", "getLimit", "getQuery", "getOffset", "getQuery", "jjtAppendChild", "getOffset", "getQuery", "getBindingsClause", "getQuery", "jjtAppendChild", "getBindingsClause", "getQuery", "jjtReplaceWith", "getQuery", "visit", "visit"]}, "repository": {"repo_id": 4797319, "url": "https://github.com/sindice/sparqled", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 33, "size": 12885, "license": "licensed"}}