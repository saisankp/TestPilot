{"test_class": {"identifier": "MatrixTest", "superclass": "", "interfaces": "", "fields": [], "file": "itext/src/test/java/com/itextpdf/text/pdf/parser/MatrixTest.java"}, "test_case": {"identifier": "testMultiply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMultiply() throws Exception{\n        Matrix m1 = new Matrix(2, 3, 4, 5, 6, 7);\n        Matrix m2 = new Matrix(8, 9, 10, 11, 12, 13);\n        Matrix shouldBe = new Matrix(46, 51, 82, 91, 130, 144);\n        \n        Matrix rslt = m1.multiply(m2);\n        Assert.assertEquals(shouldBe, rslt);\n    }", "signature": "void testMultiply()", "full_signature": "@Test public void testMultiply()", "class_method_signature": "MatrixTest.testMultiply()", "testcase": true, "constructor": false, "invocations": ["multiply", "assertEquals"]}, "focal_class": {"identifier": "Matrix", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int I11 = 0;", "modifier": "public static final", "type": "int", "declarator": "I11 = 0", "var_name": "I11"}, {"original_string": "public static final int I12 = 1;", "modifier": "public static final", "type": "int", "declarator": "I12 = 1", "var_name": "I12"}, {"original_string": "public static final int I13 = 2;", "modifier": "public static final", "type": "int", "declarator": "I13 = 2", "var_name": "I13"}, {"original_string": "public static final int I21 = 3;", "modifier": "public static final", "type": "int", "declarator": "I21 = 3", "var_name": "I21"}, {"original_string": "public static final int I22 = 4;", "modifier": "public static final", "type": "int", "declarator": "I22 = 4", "var_name": "I22"}, {"original_string": "public static final int I23 = 5;", "modifier": "public static final", "type": "int", "declarator": "I23 = 5", "var_name": "I23"}, {"original_string": "public static final int I31 = 6;", "modifier": "public static final", "type": "int", "declarator": "I31 = 6", "var_name": "I31"}, {"original_string": "public static final int I32 = 7;", "modifier": "public static final", "type": "int", "declarator": "I32 = 7", "var_name": "I32"}, {"original_string": "public static final int I33 = 8;", "modifier": "public static final", "type": "int", "declarator": "I33 = 8", "var_name": "I33"}, {"original_string": "private final float[] vals = new float[]{\n            1,0,0,\n            0,1,0,\n            0,0,1\n    };", "modifier": "private final", "type": "float[]", "declarator": "vals = new float[]{\n            1,0,0,\n            0,1,0,\n            0,0,1\n    }", "var_name": "vals"}], "methods": [{"identifier": "Matrix", "parameters": "()", "modifiers": "public", "return": "", "signature": " Matrix()", "full_signature": "public  Matrix()", "class_method_signature": "Matrix.Matrix()", "testcase": false, "constructor": true}, {"identifier": "Matrix", "parameters": "(float tx, float ty)", "modifiers": "public", "return": "", "signature": " Matrix(float tx, float ty)", "full_signature": "public  Matrix(float tx, float ty)", "class_method_signature": "Matrix.Matrix(float tx, float ty)", "testcase": false, "constructor": true}, {"identifier": "Matrix", "parameters": "(float a, float b, float c, float d, float e, float f)", "modifiers": "public", "return": "", "signature": " Matrix(float a, float b, float c, float d, float e, float f)", "full_signature": "public  Matrix(float a, float b, float c, float d, float e, float f)", "class_method_signature": "Matrix.Matrix(float a, float b, float c, float d, float e, float f)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(int index)", "modifiers": "public", "return": "float", "signature": "float get(int index)", "full_signature": "public float get(int index)", "class_method_signature": "Matrix.get(int index)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(Matrix by)", "modifiers": "public", "return": "Matrix", "signature": "Matrix multiply(Matrix by)", "full_signature": "public Matrix multiply(Matrix by)", "class_method_signature": "Matrix.multiply(Matrix by)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(Matrix arg)", "modifiers": "public", "return": "Matrix", "signature": "Matrix subtract(Matrix arg)", "full_signature": "public Matrix subtract(Matrix arg)", "class_method_signature": "Matrix.subtract(Matrix arg)", "testcase": false, "constructor": false}, {"identifier": "getDeterminant", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getDeterminant()", "full_signature": "public float getDeterminant()", "class_method_signature": "Matrix.getDeterminant()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "Matrix.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int hashCode()", "full_signature": "public int hashCode()", "class_method_signature": "Matrix.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "Matrix.toString()", "testcase": false, "constructor": false}], "file": "itext/src/main/java/com/itextpdf/text/pdf/parser/Matrix.java"}, "focal_method": {"identifier": "multiply", "parameters": "(Matrix by)", "modifiers": "public", "return": "Matrix", "body": "public Matrix multiply(Matrix by){\n        Matrix rslt = new Matrix();\n        \n        float[] a = vals;\n        float[] b = by.vals;\n        float[] c = rslt.vals;\n        \n        c[I11] = a[I11]*b[I11] + a[I12]*b[I21] + a[I13]*b[I31];  \n        c[I12] = a[I11]*b[I12] + a[I12]*b[I22] + a[I13]*b[I32]; \n        c[I13] = a[I11]*b[I13] + a[I12]*b[I23] + a[I13]*b[I33]; \n        c[I21] = a[I21]*b[I11] + a[I22]*b[I21] + a[I23]*b[I31];  \n        c[I22] = a[I21]*b[I12] + a[I22]*b[I22] + a[I23]*b[I32]; \n        c[I23] = a[I21]*b[I13] + a[I22]*b[I23] + a[I23]*b[I33]; \n        c[I31] = a[I31]*b[I11] + a[I32]*b[I21] + a[I33]*b[I31];  \n        c[I32] = a[I31]*b[I12] + a[I32]*b[I22] + a[I33]*b[I32]; \n        c[I33] = a[I31]*b[I13] + a[I32]*b[I23] + a[I33]*b[I33]; \n        \n        return rslt;\n    }", "signature": "Matrix multiply(Matrix by)", "full_signature": "public Matrix multiply(Matrix by)", "class_method_signature": "Matrix.multiply(Matrix by)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}