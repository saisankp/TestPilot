{"test_class": {"identifier": "TransactionsMXBeanImplTest", "superclass": "extends GridCommonAbstractTest", "interfaces": "", "fields": [{"original_string": "private static ListeningTestLogger testLog;", "modifier": "private static", "type": "ListeningTestLogger", "declarator": "testLog", "var_name": "testLog"}, {"original_string": "private boolean clientNode;", "modifier": "private", "type": "boolean", "declarator": "clientNode", "var_name": "clientNode"}], "file": "modules/core/src/test/java/org/apache/ignite/internal/TransactionsMXBeanImplTest.java"}, "test_case": {"identifier": "testBasic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBasic() throws Exception {\n        IgniteEx ignite = startGrid(0);\n\n        TransactionsMXBean bean = txMXBean(0);\n\n        ignite.transactions().txStart();\n\n        ignite.cache(DEFAULT_CACHE_NAME).put(0, 0);\n\n        String res = bean.getActiveTransactions(null, null, null, null, null, null, null, null, false, false);\n\n        assertEquals(\"1\", res);\n\n        res = bean.getActiveTransactions(null, null, null, null, null, null, null, null, true, false);\n\n        assertTrue(res.indexOf(\"Tx:\") > 0);\n\n        res = bean.getActiveTransactions(null, null, null, null, null, null, null, null, false, true);\n\n        assertEquals(\"1\", res);\n\n        doSleep(500);\n\n        res = bean.getActiveTransactions(null, null, null, null, null, null, null, null, false, false);\n\n        assertEquals(\"0\", res);\n    }", "signature": "void testBasic()", "full_signature": "@Test public void testBasic()", "class_method_signature": "TransactionsMXBeanImplTest.testBasic()", "testcase": true, "constructor": false, "invocations": ["startGrid", "txMXBean", "txStart", "transactions", "put", "cache", "getActiveTransactions", "assertEquals", "getActiveTransactions", "assertTrue", "indexOf", "getActiveTransactions", "assertEquals", "doSleep", "getActiveTransactions", "assertEquals"]}, "focal_class": {"identifier": "TransactionsMXBeanImpl", "superclass": "", "interfaces": "implements TransactionsMXBean", "fields": [{"original_string": "private final GridKernalContextImpl ctx;", "modifier": "private final", "type": "GridKernalContextImpl", "declarator": "ctx", "var_name": "ctx"}], "methods": [{"identifier": "TransactionsMXBeanImpl", "parameters": "(GridKernalContextImpl ctx)", "modifiers": "public", "return": "", "signature": " TransactionsMXBeanImpl(GridKernalContextImpl ctx)", "full_signature": "public  TransactionsMXBeanImpl(GridKernalContextImpl ctx)", "class_method_signature": "TransactionsMXBeanImpl.TransactionsMXBeanImpl(GridKernalContextImpl ctx)", "testcase": false, "constructor": true}, {"identifier": "getActiveTransactions", "parameters": "(Long minDuration, Integer minSize, String prj, String consistentIds,\n        String xid, String lbRegex, Integer limit, String order, boolean detailed, boolean kill)", "modifiers": "@Override public", "return": "String", "signature": "String getActiveTransactions(Long minDuration, Integer minSize, String prj, String consistentIds,\n        String xid, String lbRegex, Integer limit, String order, boolean detailed, boolean kill)", "full_signature": "@Override public String getActiveTransactions(Long minDuration, Integer minSize, String prj, String consistentIds,\n        String xid, String lbRegex, Integer limit, String order, boolean detailed, boolean kill)", "class_method_signature": "TransactionsMXBeanImpl.getActiveTransactions(Long minDuration, Integer minSize, String prj, String consistentIds,\n        String xid, String lbRegex, Integer limit, String order, boolean detailed, boolean kill)", "testcase": false, "constructor": false}, {"identifier": "getTxTimeoutOnPartitionMapExchange", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getTxTimeoutOnPartitionMapExchange()", "full_signature": "@Override public long getTxTimeoutOnPartitionMapExchange()", "class_method_signature": "TransactionsMXBeanImpl.getTxTimeoutOnPartitionMapExchange()", "testcase": false, "constructor": false}, {"identifier": "setTxTimeoutOnPartitionMapExchange", "parameters": "(long timeout)", "modifiers": "@Override public", "return": "void", "signature": "void setTxTimeoutOnPartitionMapExchange(long timeout)", "full_signature": "@Override public void setTxTimeoutOnPartitionMapExchange(long timeout)", "class_method_signature": "TransactionsMXBeanImpl.setTxTimeoutOnPartitionMapExchange(long timeout)", "testcase": false, "constructor": false}, {"identifier": "getTxOwnerDumpRequestsAllowed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean getTxOwnerDumpRequestsAllowed()", "full_signature": "@Override public boolean getTxOwnerDumpRequestsAllowed()", "class_method_signature": "TransactionsMXBeanImpl.getTxOwnerDumpRequestsAllowed()", "testcase": false, "constructor": false}, {"identifier": "setTxOwnerDumpRequestsAllowed", "parameters": "(boolean allowed)", "modifiers": "@Override public", "return": "void", "signature": "void setTxOwnerDumpRequestsAllowed(boolean allowed)", "full_signature": "@Override public void setTxOwnerDumpRequestsAllowed(boolean allowed)", "class_method_signature": "TransactionsMXBeanImpl.setTxOwnerDumpRequestsAllowed(boolean allowed)", "testcase": false, "constructor": false}, {"identifier": "getLongTransactionTimeDumpThreshold", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getLongTransactionTimeDumpThreshold()", "full_signature": "@Override public long getLongTransactionTimeDumpThreshold()", "class_method_signature": "TransactionsMXBeanImpl.getLongTransactionTimeDumpThreshold()", "testcase": false, "constructor": false}, {"identifier": "setLongTransactionTimeDumpThreshold", "parameters": "(long threshold)", "modifiers": "@Override public", "return": "void", "signature": "void setLongTransactionTimeDumpThreshold(long threshold)", "full_signature": "@Override public void setLongTransactionTimeDumpThreshold(long threshold)", "class_method_signature": "TransactionsMXBeanImpl.setLongTransactionTimeDumpThreshold(long threshold)", "testcase": false, "constructor": false}, {"identifier": "getTransactionTimeDumpSamplesCoefficient", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getTransactionTimeDumpSamplesCoefficient()", "full_signature": "@Override public double getTransactionTimeDumpSamplesCoefficient()", "class_method_signature": "TransactionsMXBeanImpl.getTransactionTimeDumpSamplesCoefficient()", "testcase": false, "constructor": false}, {"identifier": "setTransactionTimeDumpSamplesCoefficient", "parameters": "(double coefficient)", "modifiers": "@Override public", "return": "void", "signature": "void setTransactionTimeDumpSamplesCoefficient(double coefficient)", "full_signature": "@Override public void setTransactionTimeDumpSamplesCoefficient(double coefficient)", "class_method_signature": "TransactionsMXBeanImpl.setTransactionTimeDumpSamplesCoefficient(double coefficient)", "testcase": false, "constructor": false}, {"identifier": "getTransactionTimeDumpSamplesPerSecondLimit", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getTransactionTimeDumpSamplesPerSecondLimit()", "full_signature": "@Override public int getTransactionTimeDumpSamplesPerSecondLimit()", "class_method_signature": "TransactionsMXBeanImpl.getTransactionTimeDumpSamplesPerSecondLimit()", "testcase": false, "constructor": false}, {"identifier": "setTransactionTimeDumpSamplesPerSecondLimit", "parameters": "(int limit)", "modifiers": "@Override public", "return": "void", "signature": "void setTransactionTimeDumpSamplesPerSecondLimit(int limit)", "full_signature": "@Override public void setTransactionTimeDumpSamplesPerSecondLimit(int limit)", "class_method_signature": "TransactionsMXBeanImpl.setTransactionTimeDumpSamplesPerSecondLimit(int limit)", "testcase": false, "constructor": false}, {"identifier": "setLongOperationsDumpTimeout", "parameters": "(long timeout)", "modifiers": "@Override public", "return": "void", "signature": "void setLongOperationsDumpTimeout(long timeout)", "full_signature": "@Override public void setLongOperationsDumpTimeout(long timeout)", "class_method_signature": "TransactionsMXBeanImpl.setLongOperationsDumpTimeout(long timeout)", "testcase": false, "constructor": false}, {"identifier": "getLongOperationsDumpTimeout", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getLongOperationsDumpTimeout()", "full_signature": "@Override public long getLongOperationsDumpTimeout()", "class_method_signature": "TransactionsMXBeanImpl.getLongOperationsDumpTimeout()", "testcase": false, "constructor": false}, {"identifier": "setTxKeyCollisionsInterval", "parameters": "(int timeout)", "modifiers": "@Override public", "return": "void", "signature": "void setTxKeyCollisionsInterval(int timeout)", "full_signature": "@Override public void setTxKeyCollisionsInterval(int timeout)", "class_method_signature": "TransactionsMXBeanImpl.setTxKeyCollisionsInterval(int timeout)", "testcase": false, "constructor": false}, {"identifier": "getTxKeyCollisionsInterval", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getTxKeyCollisionsInterval()", "full_signature": "@Override public int getTxKeyCollisionsInterval()", "class_method_signature": "TransactionsMXBeanImpl.getTxKeyCollisionsInterval()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TransactionsMXBeanImpl.toString()", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/apache/ignite/internal/TransactionsMXBeanImpl.java"}, "focal_method": {"identifier": "getActiveTransactions", "parameters": "(Long minDuration, Integer minSize, String prj, String consistentIds,\n        String xid, String lbRegex, Integer limit, String order, boolean detailed, boolean kill)", "modifiers": "@Override public", "return": "String", "body": "@Override public String getActiveTransactions(Long minDuration, Integer minSize, String prj, String consistentIds,\n        String xid, String lbRegex, Integer limit, String order, boolean detailed, boolean kill) {\n        try {\n            IgniteCompute compute = ctx.cluster().get().compute();\n\n            VisorTxProjection proj = null;\n\n            if (prj != null) {\n                if (\"clients\".equals(prj))\n                    proj = VisorTxProjection.CLIENT;\n                else if (\"servers\".equals(prj))\n                    proj = VisorTxProjection.SERVER;\n            }\n\n            List<String> consIds = null;\n\n            if (consistentIds != null)\n                consIds = Arrays.stream(consistentIds.split(\",\")).collect(Collectors.toList());\n\n            VisorTxSortOrder sortOrder = null;\n\n            if (order != null)\n                sortOrder = VisorTxSortOrder.valueOf(order.toUpperCase());\n\n            VisorTxTaskArg arg = new VisorTxTaskArg(kill ? VisorTxOperation.KILL : VisorTxOperation.LIST,\n                limit, minDuration == null ? null : minDuration * 1000, minSize, null, proj, consIds, xid, lbRegex, sortOrder, null);\n\n            Map<ClusterNode, VisorTxTaskResult> res = compute.execute(new VisorTxTask(),\n                new VisorTaskArgument<>(ctx.cluster().get().localNode().id(), arg, false));\n\n            if (detailed) {\n                StringWriter sw = new StringWriter();\n\n                PrintWriter w = new PrintWriter(sw);\n\n                for (Map.Entry<ClusterNode, VisorTxTaskResult> entry : res.entrySet()) {\n                    if (entry.getValue().getInfos().isEmpty())\n                        continue;\n\n                    ClusterNode key = entry.getKey();\n\n                    w.println(key.toString());\n\n                    for (VisorTxInfo info : entry.getValue().getInfos())\n                        w.println(info.toUserString());\n                }\n\n                w.flush();\n\n                return sw.toString();\n            }\n            else {\n                int cnt = 0;\n\n                for (VisorTxTaskResult result : res.values())\n                    cnt += result.getInfos().size();\n\n                return Integer.toString(cnt);\n            }\n        }\n        catch (Exception e) {\n            throw new RuntimeException(e.getMessage());\n        }\n    }", "signature": "String getActiveTransactions(Long minDuration, Integer minSize, String prj, String consistentIds,\n        String xid, String lbRegex, Integer limit, String order, boolean detailed, boolean kill)", "full_signature": "@Override public String getActiveTransactions(Long minDuration, Integer minSize, String prj, String consistentIds,\n        String xid, String lbRegex, Integer limit, String order, boolean detailed, boolean kill)", "class_method_signature": "TransactionsMXBeanImpl.getActiveTransactions(Long minDuration, Integer minSize, String prj, String consistentIds,\n        String xid, String lbRegex, Integer limit, String order, boolean detailed, boolean kill)", "testcase": false, "constructor": false, "invocations": ["compute", "get", "cluster", "equals", "equals", "collect", "stream", "split", "toList", "valueOf", "toUpperCase", "execute", "id", "localNode", "get", "cluster", "entrySet", "isEmpty", "getInfos", "getValue", "getKey", "println", "toString", "getInfos", "getValue", "println", "toUserString", "flush", "toString", "values", "size", "getInfos", "toString", "getMessage"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}