{"test_class": {"identifier": "HystrixContextSchedulerTest", "superclass": "", "interfaces": "", "fields": [], "file": "hystrix-core/src/test/java/com/netflix/hystrix/strategy/concurrency/HystrixContextSchedulerTest.java"}, "test_case": {"identifier": "testUnsubscribeWrappedScheduler", "parameters": "()", "modifiers": "@Test(timeout = 2500) public", "return": "void", "body": "@Test(timeout = 2500)\n    public void testUnsubscribeWrappedScheduler() throws InterruptedException {\n        Scheduler s = Schedulers.newThread();\n        final AtomicBoolean interrupted = new AtomicBoolean();\n        final CountDownLatch start = new CountDownLatch(1);\n        final CountDownLatch end = new CountDownLatch(1);\n\n        HystrixContextScheduler hcs = new HystrixContextScheduler(s);\n\n        Scheduler.Worker w = hcs.createWorker();\n        try {\n            w.schedule(new Action0() {\n                @Override\n                public void call() {\n                    start.countDown();\n                    try {\n                        try {\n                            Thread.sleep(5000);\n                        } catch (InterruptedException ex) {\n                            interrupted.set(true);\n                        }\n                    } finally {\n                        end.countDown();\n                    }\n                }\n            });\n            \n            start.await();\n            \n            w.unsubscribe();\n            \n            end.await();\n            \n            assertTrue(interrupted.get());\n        } finally {\n            w.unsubscribe();\n        }\n    }", "signature": "void testUnsubscribeWrappedScheduler()", "full_signature": "@Test(timeout = 2500) public void testUnsubscribeWrappedScheduler()", "class_method_signature": "HystrixContextSchedulerTest.testUnsubscribeWrappedScheduler()", "testcase": true, "constructor": false, "invocations": ["newThread", "createWorker", "schedule", "countDown", "sleep", "set", "countDown", "await", "unsubscribe", "await", "assertTrue", "get", "unsubscribe"]}, "focal_class": {"identifier": "HystrixContextScheduler", "superclass": "extends Scheduler", "interfaces": "", "fields": [{"original_string": "private final HystrixConcurrencyStrategy concurrencyStrategy;", "modifier": "private final", "type": "HystrixConcurrencyStrategy", "declarator": "concurrencyStrategy", "var_name": "concurrencyStrategy"}, {"original_string": "private final Scheduler actualScheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "actualScheduler", "var_name": "actualScheduler"}, {"original_string": "private final HystrixThreadPool threadPool;", "modifier": "private final", "type": "HystrixThreadPool", "declarator": "threadPool", "var_name": "threadPool"}], "methods": [{"identifier": "HystrixContextScheduler", "parameters": "(Scheduler scheduler)", "modifiers": "public", "return": "", "signature": " HystrixContextScheduler(Scheduler scheduler)", "full_signature": "public  HystrixContextScheduler(Scheduler scheduler)", "class_method_signature": "HystrixContextScheduler.HystrixContextScheduler(Scheduler scheduler)", "testcase": false, "constructor": true}, {"identifier": "HystrixContextScheduler", "parameters": "(HystrixConcurrencyStrategy concurrencyStrategy, Scheduler scheduler)", "modifiers": "public", "return": "", "signature": " HystrixContextScheduler(HystrixConcurrencyStrategy concurrencyStrategy, Scheduler scheduler)", "full_signature": "public  HystrixContextScheduler(HystrixConcurrencyStrategy concurrencyStrategy, Scheduler scheduler)", "class_method_signature": "HystrixContextScheduler.HystrixContextScheduler(HystrixConcurrencyStrategy concurrencyStrategy, Scheduler scheduler)", "testcase": false, "constructor": true}, {"identifier": "HystrixContextScheduler", "parameters": "(HystrixConcurrencyStrategy concurrencyStrategy, HystrixThreadPool threadPool)", "modifiers": "public", "return": "", "signature": " HystrixContextScheduler(HystrixConcurrencyStrategy concurrencyStrategy, HystrixThreadPool threadPool)", "full_signature": "public  HystrixContextScheduler(HystrixConcurrencyStrategy concurrencyStrategy, HystrixThreadPool threadPool)", "class_method_signature": "HystrixContextScheduler.HystrixContextScheduler(HystrixConcurrencyStrategy concurrencyStrategy, HystrixThreadPool threadPool)", "testcase": false, "constructor": true}, {"identifier": "HystrixContextScheduler", "parameters": "(HystrixConcurrencyStrategy concurrencyStrategy, HystrixThreadPool threadPool, Func0<Boolean> shouldInterruptThread)", "modifiers": "public", "return": "", "signature": " HystrixContextScheduler(HystrixConcurrencyStrategy concurrencyStrategy, HystrixThreadPool threadPool, Func0<Boolean> shouldInterruptThread)", "full_signature": "public  HystrixContextScheduler(HystrixConcurrencyStrategy concurrencyStrategy, HystrixThreadPool threadPool, Func0<Boolean> shouldInterruptThread)", "class_method_signature": "HystrixContextScheduler.HystrixContextScheduler(HystrixConcurrencyStrategy concurrencyStrategy, HystrixThreadPool threadPool, Func0<Boolean> shouldInterruptThread)", "testcase": false, "constructor": true}, {"identifier": "createWorker", "parameters": "()", "modifiers": "@Override public", "return": "Worker", "signature": "Worker createWorker()", "full_signature": "@Override public Worker createWorker()", "class_method_signature": "HystrixContextScheduler.createWorker()", "testcase": false, "constructor": false}], "file": "hystrix-core/src/main/java/com/netflix/hystrix/strategy/concurrency/HystrixContextScheduler.java"}, "focal_method": {"identifier": "createWorker", "parameters": "()", "modifiers": "@Override public", "return": "Worker", "body": "@Override\n    public Worker createWorker() {\n        return new HystrixContextSchedulerWorker(actualScheduler.createWorker());\n    }", "signature": "Worker createWorker()", "full_signature": "@Override public Worker createWorker()", "class_method_signature": "HystrixContextScheduler.createWorker()", "testcase": false, "constructor": false, "invocations": ["createWorker"]}, "repository": {"repo_id": 6766558, "url": "https://github.com/Netflix/Hystrix", "stars": 19028, "created": "11/19/2012 8:14:46 PM +00:00", "updates": "2020-01-27T17:55:28+00:00", "fork": "False", "license": "licensed"}}