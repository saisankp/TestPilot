{"test_class": {"identifier": "EC2RaiderImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private EC2RaiderImpl ec2RaiderImplUnderTest;", "modifier": "@Autowired\n    private", "type": "EC2RaiderImpl", "declarator": "ec2RaiderImplUnderTest", "var_name": "ec2RaiderImplUnderTest"}, {"original_string": "@Autowired\n    private  EC2Delegator ec2Delegator;", "modifier": "@Autowired\n    private", "type": "EC2Delegator", "declarator": "ec2Delegator", "var_name": "ec2Delegator"}, {"original_string": "private  Instance instance;", "modifier": "private", "type": "Instance", "declarator": "instance", "var_name": "instance"}], "file": "cloudraider-core/src/test/java/com/intuit/cloudraider/core/impl/EC2RaiderImplTest.java"}, "test_case": {"identifier": "testDetachSecurityGroups", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDetachSecurityGroups() throws Exception{\n\n        ec2RaiderImplUnderTest.detachSecurityGroups(\"1234\",\"sg-123\");\n\n    }", "signature": "void testDetachSecurityGroups()", "full_signature": "@Test public void testDetachSecurityGroups()", "class_method_signature": "EC2RaiderImplTest.testDetachSecurityGroups()", "testcase": true, "constructor": false, "invocations": ["detachSecurityGroups"]}, "focal_class": {"identifier": "EC2RaiderImpl", "superclass": "", "interfaces": "implements EC2Raider", "fields": [{"original_string": "public static final String AVAILABILITY_ZONE_FILTER_KEY = \"availability-zone\";", "modifier": "public static final", "type": "String", "declarator": "AVAILABILITY_ZONE_FILTER_KEY = \"availability-zone\"", "var_name": "AVAILABILITY_ZONE_FILTER_KEY"}, {"original_string": "Logger logger = LoggerFactory.getLogger(this.getClass());", "modifier": "", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(this.getClass())", "var_name": "logger"}, {"original_string": "@Autowired\n    private EC2Delegator ec2Delegator;", "modifier": "@Autowired\n    private", "type": "EC2Delegator", "declarator": "ec2Delegator", "var_name": "ec2Delegator"}], "methods": [{"identifier": "EC2RaiderImpl", "parameters": "()", "modifiers": "public", "return": "", "signature": " EC2RaiderImpl()", "full_signature": "public  EC2RaiderImpl()", "class_method_signature": "EC2RaiderImpl.EC2RaiderImpl()", "testcase": false, "constructor": true}, {"identifier": "getEc2InstanceIdsWithCompulsoryTagsForAvailabilityZone", "parameters": "(String availabilityZone, List<Tag> ignoreTags, List<Tag> compulsoryTags)", "modifiers": "@Override public", "return": "List<EC2InstanceTO>", "signature": "List<EC2InstanceTO> getEc2InstanceIdsWithCompulsoryTagsForAvailabilityZone(String availabilityZone, List<Tag> ignoreTags, List<Tag> compulsoryTags)", "full_signature": "@Override public List<EC2InstanceTO> getEc2InstanceIdsWithCompulsoryTagsForAvailabilityZone(String availabilityZone, List<Tag> ignoreTags, List<Tag> compulsoryTags)", "class_method_signature": "EC2RaiderImpl.getEc2InstanceIdsWithCompulsoryTagsForAvailabilityZone(String availabilityZone, List<Tag> ignoreTags, List<Tag> compulsoryTags)", "testcase": false, "constructor": false}, {"identifier": "getEc2InstancesForAvailabilityZone", "parameters": "(String availabilityZone, List<String> instanceIdsToIgnore)", "modifiers": "@Override public", "return": "List<EC2InstanceTO>", "signature": "List<EC2InstanceTO> getEc2InstancesForAvailabilityZone(String availabilityZone, List<String> instanceIdsToIgnore)", "full_signature": "@Override public List<EC2InstanceTO> getEc2InstancesForAvailabilityZone(String availabilityZone, List<String> instanceIdsToIgnore)", "class_method_signature": "EC2RaiderImpl.getEc2InstancesForAvailabilityZone(String availabilityZone, List<String> instanceIdsToIgnore)", "testcase": false, "constructor": false}, {"identifier": "getEc2InstanceIPsForAvailabilityZone", "parameters": "(String availabilityZone, List<String> instanceIdsToIgnore)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getEc2InstanceIPsForAvailabilityZone(String availabilityZone, List<String> instanceIdsToIgnore)", "full_signature": "@Override public List<String> getEc2InstanceIPsForAvailabilityZone(String availabilityZone, List<String> instanceIdsToIgnore)", "class_method_signature": "EC2RaiderImpl.getEc2InstanceIPsForAvailabilityZone(String availabilityZone, List<String> instanceIdsToIgnore)", "testcase": false, "constructor": false}, {"identifier": "getInstancesIPsForAZWithName", "parameters": "(String name, String availabilityZone)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getInstancesIPsForAZWithName(String name, String availabilityZone)", "full_signature": "@Override public List<String> getInstancesIPsForAZWithName(String name, String availabilityZone)", "class_method_signature": "EC2RaiderImpl.getInstancesIPsForAZWithName(String name, String availabilityZone)", "testcase": false, "constructor": false}, {"identifier": "getReservationsByAvailabilityZone", "parameters": "(String availabilityZone)", "modifiers": "private", "return": "List<Reservation>", "signature": "List<Reservation> getReservationsByAvailabilityZone(String availabilityZone)", "full_signature": "private List<Reservation> getReservationsByAvailabilityZone(String availabilityZone)", "class_method_signature": "EC2RaiderImpl.getReservationsByAvailabilityZone(String availabilityZone)", "testcase": false, "constructor": false}, {"identifier": "getInstanceIdsForTags", "parameters": "(List<Tag> tags)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getInstanceIdsForTags(List<Tag> tags)", "full_signature": "@Override public List<String> getInstanceIdsForTags(List<Tag> tags)", "class_method_signature": "EC2RaiderImpl.getInstanceIdsForTags(List<Tag> tags)", "testcase": false, "constructor": false}, {"identifier": "getInstancesByName", "parameters": "(String name)", "modifiers": "@Override public", "return": "List<EC2InstanceTO>", "signature": "List<EC2InstanceTO> getInstancesByName(String name)", "full_signature": "@Override public List<EC2InstanceTO> getInstancesByName(String name)", "class_method_signature": "EC2RaiderImpl.getInstancesByName(String name)", "testcase": false, "constructor": false}, {"identifier": "terminateEc2InstancesById", "parameters": "(String... instanceIds)", "modifiers": "@Override public", "return": "void", "signature": "void terminateEc2InstancesById(String... instanceIds)", "full_signature": "@Override public void terminateEc2InstancesById(String... instanceIds)", "class_method_signature": "EC2RaiderImpl.terminateEc2InstancesById(String... instanceIds)", "testcase": false, "constructor": false}, {"identifier": "terminateEc2InstancesById", "parameters": "(String instanceId)", "modifiers": "@Override public", "return": "void", "signature": "void terminateEc2InstancesById(String instanceId)", "full_signature": "@Override public void terminateEc2InstancesById(String instanceId)", "class_method_signature": "EC2RaiderImpl.terminateEc2InstancesById(String instanceId)", "testcase": false, "constructor": false}, {"identifier": "terminateEc2InstancesById", "parameters": "(List<String> instanceIds)", "modifiers": "@Override public", "return": "void", "signature": "void terminateEc2InstancesById(List<String> instanceIds)", "full_signature": "@Override public void terminateEc2InstancesById(List<String> instanceIds)", "class_method_signature": "EC2RaiderImpl.terminateEc2InstancesById(List<String> instanceIds)", "testcase": false, "constructor": false}, {"identifier": "terminateEC2InstancesByName", "parameters": "(String... names)", "modifiers": "@Override public", "return": "void", "signature": "void terminateEC2InstancesByName(String... names)", "full_signature": "@Override public void terminateEC2InstancesByName(String... names)", "class_method_signature": "EC2RaiderImpl.terminateEC2InstancesByName(String... names)", "testcase": false, "constructor": false}, {"identifier": "terminateEC2InstancesByName", "parameters": "(String name, int numberOfInstances)", "modifiers": "@Override public", "return": "void", "signature": "void terminateEC2InstancesByName(String name, int numberOfInstances)", "full_signature": "@Override public void terminateEC2InstancesByName(String name, int numberOfInstances)", "class_method_signature": "EC2RaiderImpl.terminateEC2InstancesByName(String name, int numberOfInstances)", "testcase": false, "constructor": false}, {"identifier": "terminateEC2InstancesByNameHelper", "parameters": "(String... names)", "modifiers": "private", "return": "List<String>", "signature": "List<String> terminateEC2InstancesByNameHelper(String... names)", "full_signature": "private List<String> terminateEC2InstancesByNameHelper(String... names)", "class_method_signature": "EC2RaiderImpl.terminateEC2InstancesByNameHelper(String... names)", "testcase": false, "constructor": false}, {"identifier": "getInstancesFromAnyTags", "parameters": "(List<Tag> tags)", "modifiers": "@Override public", "return": "List<EC2InstanceTO>", "signature": "List<EC2InstanceTO> getInstancesFromAnyTags(List<Tag> tags)", "full_signature": "@Override public List<EC2InstanceTO> getInstancesFromAnyTags(List<Tag> tags)", "class_method_signature": "EC2RaiderImpl.getInstancesFromAnyTags(List<Tag> tags)", "testcase": false, "constructor": false}, {"identifier": "getEC2InstanceById", "parameters": "(String instanceId)", "modifiers": "@Override public", "return": "EC2InstanceTO", "signature": "EC2InstanceTO getEC2InstanceById(String instanceId)", "full_signature": "@Override public EC2InstanceTO getEC2InstanceById(String instanceId)", "class_method_signature": "EC2RaiderImpl.getEC2InstanceById(String instanceId)", "testcase": false, "constructor": false}, {"identifier": "getEC2InstancesByIds", "parameters": "(List<String> instanceIds)", "modifiers": "@Override public", "return": "List<EC2InstanceTO>", "signature": "List<EC2InstanceTO> getEC2InstancesByIds(List<String> instanceIds)", "full_signature": "@Override public List<EC2InstanceTO> getEC2InstancesByIds(List<String> instanceIds)", "class_method_signature": "EC2RaiderImpl.getEC2InstancesByIds(List<String> instanceIds)", "testcase": false, "constructor": false}, {"identifier": "getFilteredActiveInstances", "parameters": "(List<String> filteredWords)", "modifiers": "@Override public", "return": "List<EC2InstanceTO>", "signature": "List<EC2InstanceTO> getFilteredActiveInstances(List<String> filteredWords)", "full_signature": "@Override public List<EC2InstanceTO> getFilteredActiveInstances(List<String> filteredWords)", "class_method_signature": "EC2RaiderImpl.getFilteredActiveInstances(List<String> filteredWords)", "testcase": false, "constructor": false}, {"identifier": "createEc2Instance", "parameters": "(Instance i)", "modifiers": "private", "return": "EC2InstanceTO", "signature": "EC2InstanceTO createEc2Instance(Instance i)", "full_signature": "private EC2InstanceTO createEc2Instance(Instance i)", "class_method_signature": "EC2RaiderImpl.createEc2Instance(Instance i)", "testcase": false, "constructor": false}, {"identifier": "stopEc2Instances", "parameters": "(String instanceId)", "modifiers": "@Override public", "return": "void", "signature": "void stopEc2Instances(String instanceId)", "full_signature": "@Override public void stopEc2Instances(String instanceId)", "class_method_signature": "EC2RaiderImpl.stopEc2Instances(String instanceId)", "testcase": false, "constructor": false}, {"identifier": "restartEc2Instances", "parameters": "(String instanceId)", "modifiers": "@Override public", "return": "void", "signature": "void restartEc2Instances(String instanceId)", "full_signature": "@Override public void restartEc2Instances(String instanceId)", "class_method_signature": "EC2RaiderImpl.restartEc2Instances(String instanceId)", "testcase": false, "constructor": false}, {"identifier": "getInstanceStatusById", "parameters": "(String instanceId)", "modifiers": "@Override public", "return": "String", "signature": "String getInstanceStatusById(String instanceId)", "full_signature": "@Override public String getInstanceStatusById(String instanceId)", "class_method_signature": "EC2RaiderImpl.getInstanceStatusById(String instanceId)", "testcase": false, "constructor": false}, {"identifier": "detachSecurityGroup", "parameters": "(String instanceId, String securityGroup)", "modifiers": "@Override public", "return": "void", "signature": "void detachSecurityGroup(String instanceId, String securityGroup)", "full_signature": "@Override public void detachSecurityGroup(String instanceId, String securityGroup)", "class_method_signature": "EC2RaiderImpl.detachSecurityGroup(String instanceId, String securityGroup)", "testcase": false, "constructor": false}, {"identifier": "attachSecurityGroup", "parameters": "(String instanceId, String securityGroup)", "modifiers": "@Override public", "return": "void", "signature": "void attachSecurityGroup(String instanceId, String securityGroup)", "full_signature": "@Override public void attachSecurityGroup(String instanceId, String securityGroup)", "class_method_signature": "EC2RaiderImpl.attachSecurityGroup(String instanceId, String securityGroup)", "testcase": false, "constructor": false}, {"identifier": "getSecurityGroups", "parameters": "(String instanceId)", "modifiers": "@Override public", "return": "List<String>", "signature": "List<String> getSecurityGroups(String instanceId)", "full_signature": "@Override public List<String> getSecurityGroups(String instanceId)", "class_method_signature": "EC2RaiderImpl.getSecurityGroups(String instanceId)", "testcase": false, "constructor": false}, {"identifier": "detachSecurityGroups", "parameters": "(String instanceId, String... securityGroups)", "modifiers": "@Override public", "return": "void", "signature": "void detachSecurityGroups(String instanceId, String... securityGroups)", "full_signature": "@Override public void detachSecurityGroups(String instanceId, String... securityGroups)", "class_method_signature": "EC2RaiderImpl.detachSecurityGroups(String instanceId, String... securityGroups)", "testcase": false, "constructor": false}, {"identifier": "attachSecurityGroups", "parameters": "(String instanceId, String... securityGroups)", "modifiers": "@Override public", "return": "void", "signature": "void attachSecurityGroups(String instanceId, String... securityGroups)", "full_signature": "@Override public void attachSecurityGroups(String instanceId, String... securityGroups)", "class_method_signature": "EC2RaiderImpl.attachSecurityGroups(String instanceId, String... securityGroups)", "testcase": false, "constructor": false}, {"identifier": "getInstanceDetailsById", "parameters": "(String instanceId)", "modifiers": "@Override public", "return": "Instance", "signature": "Instance getInstanceDetailsById(String instanceId)", "full_signature": "@Override public Instance getInstanceDetailsById(String instanceId)", "class_method_signature": "EC2RaiderImpl.getInstanceDetailsById(String instanceId)", "testcase": false, "constructor": false}, {"identifier": "getInstanceStatus", "parameters": "(String name)", "modifiers": "@Override public", "return": "EC2Status", "signature": "EC2Status getInstanceStatus(String name)", "full_signature": "@Override public EC2Status getInstanceStatus(String name)", "class_method_signature": "EC2RaiderImpl.getInstanceStatus(String name)", "testcase": false, "constructor": false}, {"identifier": "getEC2InstanceState", "parameters": "(String name)", "modifiers": "@Override public", "return": "Map", "signature": "Map getEC2InstanceState(String name)", "full_signature": "@Override public Map getEC2InstanceState(String name)", "class_method_signature": "EC2RaiderImpl.getEC2InstanceState(String name)", "testcase": false, "constructor": false}, {"identifier": "getInstancesIpsForAZ", "parameters": "(String tag, String availabilityZoneName)", "modifiers": "@Deprecated public", "return": "List", "signature": "List getInstancesIpsForAZ(String tag, String availabilityZoneName)", "full_signature": "@Deprecated public List getInstancesIpsForAZ(String tag, String availabilityZoneName)", "class_method_signature": "EC2RaiderImpl.getInstancesIpsForAZ(String tag, String availabilityZoneName)", "testcase": false, "constructor": false}, {"identifier": "getInstancesIdsForOneTag", "parameters": "(String tagName)", "modifiers": "@Deprecated public", "return": "List<EC2InstanceTO>", "signature": "List<EC2InstanceTO> getInstancesIdsForOneTag(String tagName)", "full_signature": "@Deprecated public List<EC2InstanceTO> getInstancesIdsForOneTag(String tagName)", "class_method_signature": "EC2RaiderImpl.getInstancesIdsForOneTag(String tagName)", "testcase": false, "constructor": false}, {"identifier": "terminateEc2InstancesByTags", "parameters": "(String... tagName)", "modifiers": "@Deprecated public", "return": "void", "signature": "void terminateEc2InstancesByTags(String... tagName)", "full_signature": "@Deprecated public void terminateEc2InstancesByTags(String... tagName)", "class_method_signature": "EC2RaiderImpl.terminateEc2InstancesByTags(String... tagName)", "testcase": false, "constructor": false}, {"identifier": "terminateEc2InstancesByTags", "parameters": "(String tagName, int numberOfInstances)", "modifiers": "@Deprecated public", "return": "void", "signature": "void terminateEc2InstancesByTags(String tagName, int numberOfInstances)", "full_signature": "@Deprecated public void terminateEc2InstancesByTags(String tagName, int numberOfInstances)", "class_method_signature": "EC2RaiderImpl.terminateEc2InstancesByTags(String tagName, int numberOfInstances)", "testcase": false, "constructor": false}, {"identifier": "getInstancesForAZ", "parameters": "(String tag, String availabilityZoneName)", "modifiers": "@Deprecated public", "return": "List<EC2InstanceTO>", "signature": "List<EC2InstanceTO> getInstancesForAZ(String tag, String availabilityZoneName)", "full_signature": "@Deprecated public List<EC2InstanceTO> getInstancesForAZ(String tag, String availabilityZoneName)", "class_method_signature": "EC2RaiderImpl.getInstancesForAZ(String tag, String availabilityZoneName)", "testcase": false, "constructor": false}, {"identifier": "getEC2StatusByTag", "parameters": "(String tag)", "modifiers": "@Deprecated public", "return": "EC2InstanceTO", "signature": "EC2InstanceTO getEC2StatusByTag(String tag)", "full_signature": "@Deprecated public EC2InstanceTO getEC2StatusByTag(String tag)", "class_method_signature": "EC2RaiderImpl.getEC2StatusByTag(String tag)", "testcase": false, "constructor": false}], "file": "cloudraider-core/src/main/java/com/intuit/cloudraider/core/impl/EC2RaiderImpl.java"}, "focal_method": {"identifier": "detachSecurityGroups", "parameters": "(String instanceId, String... securityGroups)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void detachSecurityGroups(String instanceId, String... securityGroups) {\n\n        if (instanceId.isEmpty() || instanceId == null) {\n            throw new InvalidInputDataException(\"Empty/Null instanceId provided in request\");\n        } else if (securityGroups.length <= 0 || securityGroups == null) {\n            throw new InvalidInputDataException(\"Empty/Null securityGroups provided in request\");\n        }\n\n\n        List<String> existingSecurityGroups = this.getSecurityGroups(instanceId);\n\n        if (existingSecurityGroups != null && existingSecurityGroups.containsAll(Arrays.asList(securityGroups))) {\n            existingSecurityGroups.removeAll(Arrays.asList(securityGroups));\n            ec2Delegator.getEc2().modifyInstanceAttribute(new ModifyInstanceAttributeRequest().withInstanceId(instanceId).withGroups(existingSecurityGroups));\n        } else {\n            throw new InvalidInputDataException(\"Invalid SecurityGroups: \" + securityGroups + \" provided in request\");\n        }\n    }", "signature": "void detachSecurityGroups(String instanceId, String... securityGroups)", "full_signature": "@Override public void detachSecurityGroups(String instanceId, String... securityGroups)", "class_method_signature": "EC2RaiderImpl.detachSecurityGroups(String instanceId, String... securityGroups)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getSecurityGroups", "containsAll", "asList", "removeAll", "asList", "modifyInstanceAttribute", "getEc2", "withGroups", "withInstanceId"]}, "repository": {"repo_id": 189453445, "url": "https://github.com/intuit/CloudRaider", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 16, "size": 730, "license": "licensed"}}