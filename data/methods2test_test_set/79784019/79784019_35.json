{"test_class": {"identifier": "AbstractMongoDaoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TestUserDao dao;", "modifier": "private", "type": "TestUserDao", "declarator": "dao", "var_name": "dao"}], "file": "stardao-mongodb/src/test/java/io/stardog/stardao/mongodb/AbstractMongoDaoTest.java"}, "test_case": {"identifier": "testExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExists() throws Exception {\n        TestUser created = dao.create(TestUser.builder().name(\"Ian\").build());\n\n        assertFalse(dao.exists(new Document(\"name\", \"Bob\"), null));\n        assertTrue(dao.exists(new Document(\"name\", \"Ian\"), null));\n        assertFalse(dao.exists(new Document(\"name\", \"Bob\"), created.getId()));\n    }", "signature": "void testExists()", "full_signature": "@Test public void testExists()", "class_method_signature": "AbstractMongoDaoTest.testExists()", "testcase": true, "constructor": false, "invocations": ["create", "build", "name", "builder", "assertFalse", "exists", "assertTrue", "exists", "assertFalse", "exists", "getId"]}, "focal_class": {"identifier": "AbstractMongoDao", "superclass": "extends AbstractDao<M,P,K,I>", "interfaces": "", "fields": [{"original_string": "private final MongoCollection<Document> collection;", "modifier": "private final", "type": "MongoCollection<Document>", "declarator": "collection", "var_name": "collection"}, {"original_string": "private final DocumentMapper<M> modelMapper;", "modifier": "private final", "type": "DocumentMapper<M>", "declarator": "modelMapper", "var_name": "modelMapper"}, {"original_string": "private final DocumentMapper<P> partialMapper;", "modifier": "private final", "type": "DocumentMapper<P>", "declarator": "partialMapper", "var_name": "partialMapper"}, {"original_string": "public static final String ID_FIELD = \"_id\";", "modifier": "public static final", "type": "String", "declarator": "ID_FIELD = \"_id\"", "var_name": "ID_FIELD"}], "methods": [{"identifier": "AbstractMongoDao", "parameters": "(Class<M> modelClass, Class<P> partialClass, MongoCollection<Document> collection)", "modifiers": "public", "return": "", "signature": " AbstractMongoDao(Class<M> modelClass, Class<P> partialClass, MongoCollection<Document> collection)", "full_signature": "public  AbstractMongoDao(Class<M> modelClass, Class<P> partialClass, MongoCollection<Document> collection)", "class_method_signature": "AbstractMongoDao.AbstractMongoDao(Class<M> modelClass, Class<P> partialClass, MongoCollection<Document> collection)", "testcase": false, "constructor": true}, {"identifier": "AbstractMongoDao", "parameters": "(Class<M> modelClass, Class<P> partialClass, MongoCollection<Document> collection, ObjectMapper objectMapper, ObjectMapper extendedJsonMapper)", "modifiers": "public", "return": "", "signature": " AbstractMongoDao(Class<M> modelClass, Class<P> partialClass, MongoCollection<Document> collection, ObjectMapper objectMapper, ObjectMapper extendedJsonMapper)", "full_signature": "public  AbstractMongoDao(Class<M> modelClass, Class<P> partialClass, MongoCollection<Document> collection, ObjectMapper objectMapper, ObjectMapper extendedJsonMapper)", "class_method_signature": "AbstractMongoDao.AbstractMongoDao(Class<M> modelClass, Class<P> partialClass, MongoCollection<Document> collection, ObjectMapper objectMapper, ObjectMapper extendedJsonMapper)", "testcase": false, "constructor": true}, {"identifier": "AbstractMongoDao", "parameters": "(Class<M> modelClass, Class<P> partialClass, MongoCollection<Document> collection,\n                            DocumentMapper<M> modelMapper, DocumentMapper<P> partialMapper)", "modifiers": "public", "return": "", "signature": " AbstractMongoDao(Class<M> modelClass, Class<P> partialClass, MongoCollection<Document> collection,\n                            DocumentMapper<M> modelMapper, DocumentMapper<P> partialMapper)", "full_signature": "public  AbstractMongoDao(Class<M> modelClass, Class<P> partialClass, MongoCollection<Document> collection,\n                            DocumentMapper<M> modelMapper, DocumentMapper<P> partialMapper)", "class_method_signature": "AbstractMongoDao.AbstractMongoDao(Class<M> modelClass, Class<P> partialClass, MongoCollection<Document> collection,\n                            DocumentMapper<M> modelMapper, DocumentMapper<P> partialMapper)", "testcase": false, "constructor": true}, {"identifier": "generateFieldData", "parameters": "()", "modifiers": "@Override protected", "return": "FieldData", "signature": "FieldData generateFieldData()", "full_signature": "@Override protected FieldData generateFieldData()", "class_method_signature": "AbstractMongoDao.generateFieldData()", "testcase": false, "constructor": false}, {"identifier": "getCollection", "parameters": "()", "modifiers": "public", "return": "MongoCollection<Document>", "signature": "MongoCollection<Document> getCollection()", "full_signature": "public MongoCollection<Document> getCollection()", "class_method_signature": "AbstractMongoDao.getCollection()", "testcase": false, "constructor": false}, {"identifier": "getCollectionName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCollectionName()", "full_signature": "public String getCollectionName()", "class_method_signature": "AbstractMongoDao.getCollectionName()", "testcase": false, "constructor": false}, {"identifier": "getModelMapper", "parameters": "()", "modifiers": "public", "return": "DocumentMapper<M>", "signature": "DocumentMapper<M> getModelMapper()", "full_signature": "public DocumentMapper<M> getModelMapper()", "class_method_signature": "AbstractMongoDao.getModelMapper()", "testcase": false, "constructor": false}, {"identifier": "getPartialMapper", "parameters": "()", "modifiers": "public", "return": "DocumentMapper<P>", "signature": "DocumentMapper<P> getPartialMapper()", "full_signature": "public DocumentMapper<P> getPartialMapper()", "class_method_signature": "AbstractMongoDao.getPartialMapper()", "testcase": false, "constructor": false}, {"identifier": "generateId", "parameters": "()", "modifiers": "protected", "return": "Object", "signature": "Object generateId()", "full_signature": "protected Object generateId()", "class_method_signature": "AbstractMongoDao.generateId()", "testcase": false, "constructor": false}, {"identifier": "loadOpt", "parameters": "(K id)", "modifiers": "@Override public", "return": "Optional<M>", "signature": "Optional<M> loadOpt(K id)", "full_signature": "@Override public Optional<M> loadOpt(K id)", "class_method_signature": "AbstractMongoDao.loadOpt(K id)", "testcase": false, "constructor": false}, {"identifier": "loadOpt", "parameters": "(K id, Iterable<String> fields)", "modifiers": "public", "return": "Optional<P>", "signature": "Optional<P> loadOpt(K id, Iterable<String> fields)", "full_signature": "public Optional<P> loadOpt(K id, Iterable<String> fields)", "class_method_signature": "AbstractMongoDao.loadOpt(K id, Iterable<String> fields)", "testcase": false, "constructor": false}, {"identifier": "loadByQuery", "parameters": "(Bson query)", "modifiers": "protected", "return": "M", "signature": "M loadByQuery(Bson query)", "full_signature": "protected M loadByQuery(Bson query)", "class_method_signature": "AbstractMongoDao.loadByQuery(Bson query)", "testcase": false, "constructor": false}, {"identifier": "loadByQuery", "parameters": "(Bson query, Bson sort)", "modifiers": "protected", "return": "M", "signature": "M loadByQuery(Bson query, Bson sort)", "full_signature": "protected M loadByQuery(Bson query, Bson sort)", "class_method_signature": "AbstractMongoDao.loadByQuery(Bson query, Bson sort)", "testcase": false, "constructor": false}, {"identifier": "loadByQueryOpt", "parameters": "(Bson query)", "modifiers": "protected", "return": "Optional<M>", "signature": "Optional<M> loadByQueryOpt(Bson query)", "full_signature": "protected Optional<M> loadByQueryOpt(Bson query)", "class_method_signature": "AbstractMongoDao.loadByQueryOpt(Bson query)", "testcase": false, "constructor": false}, {"identifier": "loadByQueryOpt", "parameters": "(Bson query, Bson sort)", "modifiers": "protected", "return": "Optional<M>", "signature": "Optional<M> loadByQueryOpt(Bson query, Bson sort)", "full_signature": "protected Optional<M> loadByQueryOpt(Bson query, Bson sort)", "class_method_signature": "AbstractMongoDao.loadByQueryOpt(Bson query, Bson sort)", "testcase": false, "constructor": false}, {"identifier": "findByQuery", "parameters": "(Bson query, Bson sort)", "modifiers": "protected", "return": "Results<M,K>", "signature": "Results<M,K> findByQuery(Bson query, Bson sort)", "full_signature": "protected Results<M,K> findByQuery(Bson query, Bson sort)", "class_method_signature": "AbstractMongoDao.findByQuery(Bson query, Bson sort)", "testcase": false, "constructor": false}, {"identifier": "iterateByQuery", "parameters": "(Bson query, Bson sort)", "modifiers": "protected", "return": "Iterable<M>", "signature": "Iterable<M> iterateByQuery(Bson query, Bson sort)", "full_signature": "protected Iterable<M> iterateByQuery(Bson query, Bson sort)", "class_method_signature": "AbstractMongoDao.iterateByQuery(Bson query, Bson sort)", "testcase": false, "constructor": false}, {"identifier": "findByQuery", "parameters": "(Bson query, Bson sort, Bson projection)", "modifiers": "protected", "return": "Results<P,K>", "signature": "Results<P,K> findByQuery(Bson query, Bson sort, Bson projection)", "full_signature": "protected Results<P,K> findByQuery(Bson query, Bson sort, Bson projection)", "class_method_signature": "AbstractMongoDao.findByQuery(Bson query, Bson sort, Bson projection)", "testcase": false, "constructor": false}, {"identifier": "iterateByQuery", "parameters": "(Bson query, Bson sort, Bson projection)", "modifiers": "protected", "return": "Iterable<P>", "signature": "Iterable<P> iterateByQuery(Bson query, Bson sort, Bson projection)", "full_signature": "protected Iterable<P> iterateByQuery(Bson query, Bson sort, Bson projection)", "class_method_signature": "AbstractMongoDao.iterateByQuery(Bson query, Bson sort, Bson projection)", "testcase": false, "constructor": false}, {"identifier": "iterateAll", "parameters": "()", "modifiers": "@Override public", "return": "Iterable<M>", "signature": "Iterable<M> iterateAll()", "full_signature": "@Override public Iterable<M> iterateAll()", "class_method_signature": "AbstractMongoDao.iterateAll()", "testcase": false, "constructor": false}, {"identifier": "findWithSkipLimitPagination", "parameters": "(FindIterable<Document> iterable, int skip, int limit)", "modifiers": "protected", "return": "Results<M, Integer>", "signature": "Results<M, Integer> findWithSkipLimitPagination(FindIterable<Document> iterable, int skip, int limit)", "full_signature": "protected Results<M, Integer> findWithSkipLimitPagination(FindIterable<Document> iterable, int skip, int limit)", "class_method_signature": "AbstractMongoDao.findWithSkipLimitPagination(FindIterable<Document> iterable, int skip, int limit)", "testcase": false, "constructor": false}, {"identifier": "findWithRangedPagination", "parameters": "(FindIterable<Document> iterable, String nextField, Class<N> nextFieldType, int limit)", "modifiers": "protected", "return": "Results<M, N>", "signature": "Results<M, N> findWithRangedPagination(FindIterable<Document> iterable, String nextField, Class<N> nextFieldType, int limit)", "full_signature": "protected Results<M, N> findWithRangedPagination(FindIterable<Document> iterable, String nextField, Class<N> nextFieldType, int limit)", "class_method_signature": "AbstractMongoDao.findWithRangedPagination(FindIterable<Document> iterable, String nextField, Class<N> nextFieldType, int limit)", "testcase": false, "constructor": false}, {"identifier": "getFieldValue", "parameters": "(Document doc, String field, Class<T> type)", "modifiers": "protected", "return": "T", "signature": "T getFieldValue(Document doc, String field, Class<T> type)", "full_signature": "protected T getFieldValue(Document doc, String field, Class<T> type)", "class_method_signature": "AbstractMongoDao.getFieldValue(Document doc, String field, Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(Document query, K excludeId)", "modifiers": "protected", "return": "boolean", "signature": "boolean exists(Document query, K excludeId)", "full_signature": "protected boolean exists(Document query, K excludeId)", "class_method_signature": "AbstractMongoDao.exists(Document query, K excludeId)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(P partial, Instant createAt, I createBy)", "modifiers": "@Override public", "return": "M", "signature": "M create(P partial, Instant createAt, I createBy)", "full_signature": "@Override public M create(P partial, Instant createAt, I createBy)", "class_method_signature": "AbstractMongoDao.create(P partial, Instant createAt, I createBy)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(K id, Update<P> update, Instant updateAt, I updateBy)", "modifiers": "@Override public", "return": "void", "signature": "void update(K id, Update<P> update, Instant updateAt, I updateBy)", "full_signature": "@Override public void update(K id, Update<P> update, Instant updateAt, I updateBy)", "class_method_signature": "AbstractMongoDao.update(K id, Update<P> update, Instant updateAt, I updateBy)", "testcase": false, "constructor": false}, {"identifier": "updateAndReturn", "parameters": "(K id, Update<P> update, Instant updateAt, I updateBy)", "modifiers": "@Override public", "return": "M", "signature": "M updateAndReturn(K id, Update<P> update, Instant updateAt, I updateBy)", "full_signature": "@Override public M updateAndReturn(K id, Update<P> update, Instant updateAt, I updateBy)", "class_method_signature": "AbstractMongoDao.updateAndReturn(K id, Update<P> update, Instant updateAt, I updateBy)", "testcase": false, "constructor": false}, {"identifier": "toUpdateDocument", "parameters": "(Update<P> update, Instant updateAt, I updateBy)", "modifiers": "protected", "return": "Document", "signature": "Document toUpdateDocument(Update<P> update, Instant updateAt, I updateBy)", "full_signature": "protected Document toUpdateDocument(Update<P> update, Instant updateAt, I updateBy)", "class_method_signature": "AbstractMongoDao.toUpdateDocument(Update<P> update, Instant updateAt, I updateBy)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(K id)", "modifiers": "@Override public", "return": "void", "signature": "void delete(K id)", "full_signature": "@Override public void delete(K id)", "class_method_signature": "AbstractMongoDao.delete(K id)", "testcase": false, "constructor": false}, {"identifier": "initTable", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initTable()", "full_signature": "@Override public void initTable()", "class_method_signature": "AbstractMongoDao.initTable()", "testcase": false, "constructor": false}, {"identifier": "dropTable", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dropTable()", "full_signature": "@Override public void dropTable()", "class_method_signature": "AbstractMongoDao.dropTable()", "testcase": false, "constructor": false}, {"identifier": "getIndexes", "parameters": "()", "modifiers": "public", "return": "List<IndexModel>", "signature": "List<IndexModel> getIndexes()", "full_signature": "public List<IndexModel> getIndexes()", "class_method_signature": "AbstractMongoDao.getIndexes()", "testcase": false, "constructor": false}, {"identifier": "updateOf", "parameters": "(P object)", "modifiers": "public", "return": "Update<P>", "signature": "Update<P> updateOf(P object)", "full_signature": "public Update<P> updateOf(P object)", "class_method_signature": "AbstractMongoDao.updateOf(P object)", "testcase": false, "constructor": false}, {"identifier": "updateOf", "parameters": "(P object, Iterable<String> removeFields)", "modifiers": "public", "return": "Update<P>", "signature": "Update<P> updateOf(P object, Iterable<String> removeFields)", "full_signature": "public Update<P> updateOf(P object, Iterable<String> removeFields)", "class_method_signature": "AbstractMongoDao.updateOf(P object, Iterable<String> removeFields)", "testcase": false, "constructor": false}], "file": "stardao-mongodb/src/main/java/io/stardog/stardao/mongodb/AbstractMongoDao.java"}, "focal_method": {"identifier": "exists", "parameters": "(Document query, K excludeId)", "modifiers": "protected", "return": "boolean", "body": "protected boolean exists(Document query, K excludeId) {\n        FindIterable<Document> find = getCollection().find(query).projection(new Document(\"_id\", 1)).limit(2);\n        for (Document doc : find) {\n            if (!doc.get(\"_id\").equals(excludeId)) {\n                return true;\n            }\n        }\n        return false;\n    }", "signature": "boolean exists(Document query, K excludeId)", "full_signature": "protected boolean exists(Document query, K excludeId)", "class_method_signature": "AbstractMongoDao.exists(Document query, K excludeId)", "testcase": false, "constructor": false, "invocations": ["limit", "projection", "find", "getCollection", "equals", "get"]}, "repository": {"repo_id": 79784019, "url": "https://github.com/stardogventures/stardao", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 8, "size": 219, "license": "licensed"}}