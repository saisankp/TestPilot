{"test_class": {"identifier": "MetricsFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Invoker<DemoService> serviceInvoker;", "modifier": "private", "type": "Invoker<DemoService>", "declarator": "serviceInvoker", "var_name": "serviceInvoker"}, {"original_string": "private final Invoker<DemoService> timeoutInvoker = new Invoker<DemoService>() {\n        @Override\n        public Class<DemoService> getInterface() {\n            return DemoService.class;\n        }\n\n        public URL getUrl() {\n            return URL.valueOf(\"dubbo://\" + NetUtils.getLocalHost() + \":20880/org.apache.dubbo.monitor.dubbo.service.DemoService\");\n        }\n\n        @Override\n        public boolean isAvailable() {\n            return false;\n        }\n\n        @Override\n        public Result invoke(Invocation invocation) throws RpcException {\n            throw new RpcException(RpcException.TIMEOUT_EXCEPTION);\n        }\n\n        @Override\n        public void destroy() {\n        }\n    };", "modifier": "private final", "type": "Invoker<DemoService>", "declarator": "timeoutInvoker = new Invoker<DemoService>() {\n        @Override\n        public Class<DemoService> getInterface() {\n            return DemoService.class;\n        }\n\n        public URL getUrl() {\n            return URL.valueOf(\"dubbo://\" + NetUtils.getLocalHost() + \":20880/org.apache.dubbo.monitor.dubbo.service.DemoService\");\n        }\n\n        @Override\n        public boolean isAvailable() {\n            return false;\n        }\n\n        @Override\n        public Result invoke(Invocation invocation) throws RpcException {\n            throw new RpcException(RpcException.TIMEOUT_EXCEPTION);\n        }\n\n        @Override\n        public void destroy() {\n        }\n    }", "var_name": "timeoutInvoker"}], "file": "dubbo-monitor/dubbo-monitor-default/src/test/java/org/apache/dubbo/monitor/dubbo/MetricsFilterTest.java"}, "test_case": {"identifier": "testInvokeMetricsMethodService", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInvokeMetricsMethodService() {\n        IMetricManager metricManager = MetricManager.getIMetricManager();\n        metricManager.clear();\n        MetricsFilter metricsFilter = new MetricsFilter();\n        Invocation sayNameInvocation = new RpcInvocation(\"sayName\", DemoService.class.getName(), \"\", new Class<?>[0], new Object[0]);\n        Invocation echoInvocation = new RpcInvocation(\"echo\", DemoService.class.getName(), \"\", new Class<?>[]{Integer.class}, new Integer[]{1});\n        RpcContext.getContext().setRemoteAddress(NetUtils.getLocalHost(), 20880).setLocalAddress(NetUtils.getLocalHost(), 2345);\n        RpcContext.getContext().setUrl(serviceInvoker.getUrl().addParameter(SIDE_KEY, PROVIDER_SIDE)\n                .addParameter(TIMEOUT_KEY, 300));\n        AppResponse response = AppResponseBuilder.create()\n                .build();\n        onInvokeReturns(response);\n        for (int i = 0; i < 50; i++) {\n            metricsFilter.invoke(serviceInvoker, sayNameInvocation);\n            metricsFilter.invoke(serviceInvoker, echoInvocation);\n            try {\n                metricsFilter.invoke(timeoutInvoker, sayNameInvocation);\n            } catch (RpcException e) {\n                // ignore\n            }\n            try {\n                metricsFilter.invoke(timeoutInvoker, echoInvocation);\n            } catch (RpcException e) {\n                // ignore\n            }\n        }\n\n        Protocol protocol = new DubboProtocol();\n        URL url = URL.valueOf(\"dubbo://\" + NetUtils.getLocalAddress().getHostName() + \":20880/\" + MetricsService.class.getName());\n        Invoker<MetricsService> invoker = protocol.refer(MetricsService.class, url);\n        Invocation invocation = new RpcInvocation(\"getMetricsByGroup\", DemoService.class.getName(), \"\", new Class<?>[]{String.class}, new Object[]{DUBBO_GROUP});\n        try {\n            Thread.sleep(15000);\n        } catch (Exception e) {\n            // ignore\n        }\n        String resStr = invoker.invoke(invocation).getValue().toString();\n        List<MetricObject> metricObjectList = new Gson().fromJson(resStr, new TypeToken<List<MetricObject>>() {\n        }.getType());\n        Map<String, Map<String, Object>> methodMetricMap = new HashMap<>();\n        for (int i = 0; i < metricObjectList.size(); i++) {\n            MetricObject object = metricObjectList.get(i);\n            String service = object.getTags().get(\"service\");\n            String method = service + \".\" + object.getTags().get(\"method\");\n            String metric = object.getMetric().substring(object.getMetric().lastIndexOf(\".\") + 1);\n            Map map = methodMetricMap.get(method);\n            if (map == null) {\n                map = new HashMap();\n                methodMetricMap.put(method, map);\n            }\n            map.put(metric, object.getValue());\n        }\n\n        Assertions.assertEquals(50.0,\n            methodMetricMap.get(\"org.apache.dubbo.monitor.dubbo.service.DemoService.void sayName()\").get(\"success_bucket_count\"));\n        Assertions.assertEquals(50.0,\n            methodMetricMap.get(\"org.apache.dubbo.monitor.dubbo.service.DemoService.void echo(Integer)\").get(\"success_bucket_count\"));\n\n        Assertions.assertEquals(50.0,\n            methodMetricMap.get(\"org.apache.dubbo.monitor.dubbo.service.DemoService.void sayName()\").get(\"timeoutError_bucket_count\"));\n        Assertions.assertEquals(50.0,\n            methodMetricMap.get(\"org.apache.dubbo.monitor.dubbo.service.DemoService.void echo(Integer)\").get(\"timeoutError_bucket_count\"));\n\n        Assertions.assertEquals(100.0 / 15,\n            methodMetricMap.get(\"org.apache.dubbo.monitor.dubbo.service.DemoService.void sayName()\").get(\"qps\"));\n        Assertions.assertEquals(100.0 / 15,\n            methodMetricMap.get(\"org.apache.dubbo.monitor.dubbo.service.DemoService.void echo(Integer)\").get(\"qps\"));\n\n        Assertions.assertEquals(50.0 / 100.0,\n            methodMetricMap.get(\"org.apache.dubbo.monitor.dubbo.service.DemoService.void sayName()\").get(\"success_rate\"));\n        Assertions.assertEquals(50.0 / 100.0,\n            methodMetricMap.get(\"org.apache.dubbo.monitor.dubbo.service.DemoService.void echo(Integer)\").get(\"success_rate\"));\n    }", "signature": "void testInvokeMetricsMethodService()", "full_signature": "@Test public void testInvokeMetricsMethodService()", "class_method_signature": "MetricsFilterTest.testInvokeMetricsMethodService()", "testcase": true, "constructor": false, "invocations": ["getIMetricManager", "clear", "getName", "getName", "setLocalAddress", "setRemoteAddress", "getContext", "getLocalHost", "getLocalHost", "setUrl", "getContext", "addParameter", "addParameter", "getUrl", "build", "create", "onInvokeReturns", "invoke", "invoke", "invoke", "invoke", "valueOf", "getHostName", "getLocalAddress", "getName", "refer", "getName", "sleep", "toString", "getValue", "invoke", "fromJson", "getType", "size", "get", "get", "getTags", "get", "getTags", "substring", "getMetric", "lastIndexOf", "getMetric", "get", "put", "put", "getValue", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get"]}, "focal_class": {"identifier": "MetricsFilter", "superclass": "", "interfaces": "implements Filter", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(MetricsFilter.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(MetricsFilter.class)", "var_name": "logger"}, {"original_string": "private static volatile AtomicBoolean exported = new AtomicBoolean(false);", "modifier": "private static volatile", "type": "AtomicBoolean", "declarator": "exported = new AtomicBoolean(false)", "var_name": "exported"}, {"original_string": "private Integer port;", "modifier": "private", "type": "Integer", "declarator": "port", "var_name": "port"}, {"original_string": "private String protocolName;", "modifier": "private", "type": "String", "declarator": "protocolName", "var_name": "protocolName"}], "methods": [{"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "MetricsFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "buildMethodName", "parameters": "(Invocation invocation)", "modifiers": "private", "return": "String", "signature": "String buildMethodName(Invocation invocation)", "full_signature": "private String buildMethodName(Invocation invocation)", "class_method_signature": "MetricsFilter.buildMethodName(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "reportMetrics", "parameters": "(Invoker<?> invoker, Invocation invocation, long duration, String result, boolean isProvider)", "modifiers": "private", "return": "void", "signature": "void reportMetrics(Invoker<?> invoker, Invocation invocation, long duration, String result, boolean isProvider)", "full_signature": "private void reportMetrics(Invoker<?> invoker, Invocation invocation, long duration, String result, boolean isProvider)", "class_method_signature": "MetricsFilter.reportMetrics(Invoker<?> invoker, Invocation invocation, long duration, String result, boolean isProvider)", "testcase": false, "constructor": false}, {"identifier": "setCompassQuantity", "parameters": "(String groupName, String result, long duration, MetricName... metricNames)", "modifiers": "private", "return": "void", "signature": "void setCompassQuantity(String groupName, String result, long duration, MetricName... metricNames)", "full_signature": "private void setCompassQuantity(String groupName, String result, long duration, MetricName... metricNames)", "class_method_signature": "MetricsFilter.setCompassQuantity(String groupName, String result, long duration, MetricName... metricNames)", "testcase": false, "constructor": false}, {"identifier": "getThreadPoolMessage", "parameters": "()", "modifiers": "private", "return": "List<MetricObject>", "signature": "List<MetricObject> getThreadPoolMessage()", "full_signature": "private List<MetricObject> getThreadPoolMessage()", "class_method_signature": "MetricsFilter.getThreadPoolMessage()", "testcase": false, "constructor": false}, {"identifier": "value2MetricObject", "parameters": "(String metric, Integer value, MetricLevel level)", "modifiers": "private", "return": "MetricObject", "signature": "MetricObject value2MetricObject(String metric, Integer value, MetricLevel level)", "full_signature": "private MetricObject value2MetricObject(String metric, Integer value, MetricLevel level)", "class_method_signature": "MetricsFilter.value2MetricObject(String metric, Integer value, MetricLevel level)", "testcase": false, "constructor": false}, {"identifier": "initMetricsInvoker", "parameters": "()", "modifiers": "private", "return": "Invoker<MetricsService>", "signature": "Invoker<MetricsService> initMetricsInvoker()", "full_signature": "private Invoker<MetricsService> initMetricsInvoker()", "class_method_signature": "MetricsFilter.initMetricsInvoker()", "testcase": false, "constructor": false}], "file": "dubbo-monitor/dubbo-monitor-default/src/main/java/org/apache/dubbo/monitor/dubbo/MetricsFilter.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Invoker<?> invoker, Invocation invocation)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        if (exported.compareAndSet(false, true)) {\n            this.protocolName = invoker.getUrl().getParameter(METRICS_PROTOCOL) == null ?\n                    DEFAULT_PROTOCOL : invoker.getUrl().getParameter(METRICS_PROTOCOL);\n\n            Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getExtension(protocolName);\n\n            this.port = invoker.getUrl().getParameter(METRICS_PORT) == null ?\n                    protocol.getDefaultPort() : Integer.valueOf(invoker.getUrl().getParameter(METRICS_PORT));\n\n            Invoker<MetricsService> metricsInvoker = initMetricsInvoker();\n\n            try {\n                protocol.export(metricsInvoker);\n            } catch (RuntimeException e) {\n                logger.error(\"Metrics Service need to be configured\" +\n                        \" when multiple processes are running on a host\" + e.getMessage());\n            }\n        }\n\n        RpcContext context = RpcContext.getContext();\n        boolean isProvider = context.isProviderSide();\n        long start = System.currentTimeMillis();\n        try {\n            Result result = invoker.invoke(invocation); // proceed invocation chain\n            long duration = System.currentTimeMillis() - start;\n            reportMetrics(invoker, invocation, duration, \"success\", isProvider);\n            return result;\n        } catch (RpcException e) {\n            long duration = System.currentTimeMillis() - start;\n            String result = \"error\";\n            if (e.isTimeout()) {\n                result = \"timeoutError\";\n            }\n            if (e.isBiz()) {\n                result = \"bisError\";\n            }\n            if (e.isNetwork()) {\n                result = \"networkError\";\n            }\n            if (e.isSerialization()) {\n                result = \"serializationError\";\n            }\n            reportMetrics(invoker, invocation, duration, result, isProvider);\n            throw e;\n        }\n    }", "signature": "Result invoke(Invoker<?> invoker, Invocation invocation)", "full_signature": "@Override public Result invoke(Invoker<?> invoker, Invocation invocation)", "class_method_signature": "MetricsFilter.invoke(Invoker<?> invoker, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["compareAndSet", "getParameter", "getUrl", "getParameter", "getUrl", "getExtension", "getExtensionLoader", "getParameter", "getUrl", "getDefaultPort", "valueOf", "getParameter", "getUrl", "initMetricsInvoker", "export", "error", "getMessage", "getContext", "isProviderSide", "currentTimeMillis", "invoke", "currentTimeMillis", "reportMetrics", "currentTimeMillis", "isTimeout", "isBiz", "isNetwork", "isSerialization", "reportMetrics"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}