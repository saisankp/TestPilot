{"test_class": {"identifier": "TestMarketDisplayBaseImpl", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ValueFactory factory = new ValueFactoryImpl();", "modifier": "private static final", "type": "ValueFactory", "declarator": "factory = new ValueFactoryImpl()", "var_name": "factory"}, {"original_string": "public static MarketDisplay display = new MarketDisplayBaseImpl();", "modifier": "public static", "type": "MarketDisplay", "declarator": "display = new MarketDisplayBaseImpl()", "var_name": "display"}, {"original_string": "public static Fraction BIN_Z00 = factory.newFraction(2, 0);", "modifier": "public static", "type": "Fraction", "declarator": "BIN_Z00 = factory.newFraction(2, 0)", "var_name": "BIN_Z00"}, {"original_string": "public static Fraction BIN_N01 = factory.newFraction(2, -1);", "modifier": "public static", "type": "Fraction", "declarator": "BIN_N01 = factory.newFraction(2, -1)", "var_name": "BIN_N01"}, {"original_string": "public static Fraction BIN_N02 = factory.newFraction(2, -2);", "modifier": "public static", "type": "Fraction", "declarator": "BIN_N02 = factory.newFraction(2, -2)", "var_name": "BIN_N02"}, {"original_string": "public static Fraction BIN_N03 = factory.newFraction(2, -3);", "modifier": "public static", "type": "Fraction", "declarator": "BIN_N03 = factory.newFraction(2, -3)", "var_name": "BIN_N03"}, {"original_string": "public static Fraction BIN_N04 = factory.newFraction(2, -4);", "modifier": "public static", "type": "Fraction", "declarator": "BIN_N04 = factory.newFraction(2, -4)", "var_name": "BIN_N04"}, {"original_string": "public static Fraction BIN_N07 = factory.newFraction(2, -7);", "modifier": "public static", "type": "Fraction", "declarator": "BIN_N07 = factory.newFraction(2, -7)", "var_name": "BIN_N07"}, {"original_string": "public static Fraction DEC_Z00 = factory.newFraction(10, 0);", "modifier": "public static", "type": "Fraction", "declarator": "DEC_Z00 = factory.newFraction(10, 0)", "var_name": "DEC_Z00"}, {"original_string": "public static Fraction DEC_N01 = factory.newFraction(10, -1);", "modifier": "public static", "type": "Fraction", "declarator": "DEC_N01 = factory.newFraction(10, -1)", "var_name": "DEC_N01"}, {"original_string": "public static Fraction DEC_N02 = factory.newFraction(10, -2);", "modifier": "public static", "type": "Fraction", "declarator": "DEC_N02 = factory.newFraction(10, -2)", "var_name": "DEC_N02"}, {"original_string": "public static Fraction DEC_N03 = factory.newFraction(10, -3);", "modifier": "public static", "type": "Fraction", "declarator": "DEC_N03 = factory.newFraction(10, -3)", "var_name": "DEC_N03"}, {"original_string": "public static Fraction DEC_N04 = factory.newFraction(10, -4);", "modifier": "public static", "type": "Fraction", "declarator": "DEC_N04 = factory.newFraction(10, -4)", "var_name": "DEC_N04"}, {"original_string": "public static Fraction DEC_N05 = factory.newFraction(10, -5);", "modifier": "public static", "type": "Fraction", "declarator": "DEC_N05 = factory.newFraction(10, -5)", "var_name": "DEC_N05"}, {"original_string": "public static Fraction DEC_N06 = factory.newFraction(10, -6);", "modifier": "public static", "type": "Fraction", "declarator": "DEC_N06 = factory.newFraction(10, -6)", "var_name": "DEC_N06"}, {"original_string": "public static Fraction DEC_N07 = factory.newFraction(10, -7);", "modifier": "public static", "type": "Fraction", "declarator": "DEC_N07 = factory.newFraction(10, -7)", "var_name": "DEC_N07"}], "file": "base/src/test/java/com/barchart/feed/base/provider/TestMarketDisplayBaseImpl.java"}, "test_case": {"identifier": "testPriceText", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPriceText() {\n\t\t\n\t\tPriceValue price;\n\t\tString text;\n\t\t\n\t\t//\n\t\tprice = newPrice(181925, -2);\n\t\ttext = display.priceText(price, DEC_N02);\n\t\tSystem.out.println(\"price : \" + text);\n\t\tassertEquals(\"1819.25\", text);\n\n\t\t//\n\t\tprice = newPrice(181900, -2);\n\t\ttext = display.priceText(price, DEC_N02);\n\t\tSystem.out.println(\"price : \" + text);\n\t\tassertEquals(\"1819.00\", text);\n\n\t\t// 1819 1/4\n\t\tprice = newPrice(181925, -2);\n\t\ttext = display.priceText(price, BIN_N02);\n\t\tSystem.out.println(\"price : \" + text);\n\t\tassertEquals(\"1819-1\", text);\n\n\t\t// 1819 3/4\n\t\tprice = newPrice(181975, -2);\n\t\ttext = display.priceText(price, BIN_N02);\n\t\tSystem.out.println(\"price : \" + text);\n\t\tassertEquals(\"1819-3\", text);\n\n\t\t// 1819 1/8\n\t\tprice = newPrice(1819125, -3);\n\t\ttext = display.priceText(price, BIN_N03);\n\t\tSystem.out.println(\"price : \" + text);\n\t\tassertEquals(\"1819-1\", text);\n\n\t\t// 1819 2/8\n\t\tprice = newPrice(1819250, -3);\n\t\ttext = display.priceText(price, BIN_N03);\n\t\tSystem.out.println(\"price : \" + text);\n\t\tassertEquals(\"1819-2\", text);\n\n\t\t// 1819 2/16\n\t\tprice = newPrice(18191250, -4);\n\t\ttext = display.priceText(price, BIN_N04);\n\t\tSystem.out.println(\"price : \" + text);\n\t\tassertEquals(\"1819-02\", text);\n\n\t\t// 2 3/128\n\t\tprice = newPrice(20234375, -7);\n\t\ttext = display.priceText(price, BIN_N07);\n\t\tSystem.out.println(\"price : \" + text);\n\t\tassertEquals(\"2-003\", text);\n\n\t\tprice = newPrice(181925, -3);\n\t\ttext = display.priceText(price, DEC_N04);\n\t\tSystem.out.println(\"price : \" + text);\n\t\tassertEquals(\"181.9250\", text);\n\n\t\tprice = newPrice(181925, -2);\n\t\ttext = display.priceText(price, DEC_N04);\n\t\tSystem.out.println(\"price : \" + text);\n\t\tassertEquals(\"1819.2500\", text);\n\n\t\tprice = newPrice(1819, 0);\n\t\ttext = display.priceText(price, DEC_N03);\n\t\tSystem.out.println(\"price : \" + text);\n\t\tassertEquals(\"1819.000\", text);\n\n\t\tprice = newPrice(-1819, 0);\n\t\ttext = display.priceText(price, DEC_N03);\n\t\tSystem.out.println(\"price : \" + text);\n\t\tassertEquals(\"-1819.000\", text);\n\n\t\tprice = newPrice(18195, -1);\n\t\ttext = display.priceText(price, DEC_N02);\n\t\tSystem.out.println(\"price : \" + text);\n\t\tassertEquals(\"1819.50\", text);\n\n\t\tprice = newPrice(-1, 0);\n\t\ttext = display.priceText(price, DEC_Z00);\n\t\tSystem.out.println(\"price : \" + text);\n\t\tassertEquals(\"-1\", text);\n\n\t\tprice = newPrice(-1, 0);\n\t\ttext = display.priceText(price, DEC_N02);\n\t\tSystem.out.println(\"price : \" + text);\n\t\tassertEquals(\"-1.00\", text);\n\n\t\tprice = newPrice(-125, -2);\n\t\ttext = display.priceText(price, DEC_N02);\n\t\tSystem.out.println(\"price : \" + text);\n\t\tassertEquals(\"-1.25\", text);\n\n\t\t// 1 3/4\n\t\tprice = newPrice(175, -2);\n\t\ttext = display.priceText(price, BIN_N02);\n\t\tSystem.out.println(\"price : \" + text);\n\t\tassertEquals(\"1-3\", text);\n\n\t\t// -1 3/4\n\t\tprice = newPrice(-175, -2);\n\t\ttext = display.priceText(price, BIN_N02);\n\t\tSystem.out.println(\"price : \" + text);\n\t\tassertEquals(\"-1-3\", text);\n\t\t\n\t}", "signature": "void testPriceText()", "full_signature": "@Test public void testPriceText()", "class_method_signature": "TestMarketDisplayBaseImpl.testPriceText()", "testcase": true, "constructor": false, "invocations": ["newPrice", "priceText", "println", "assertEquals", "newPrice", "priceText", "println", "assertEquals", "newPrice", "priceText", "println", "assertEquals", "newPrice", "priceText", "println", "assertEquals", "newPrice", "priceText", "println", "assertEquals", "newPrice", "priceText", "println", "assertEquals", "newPrice", "priceText", "println", "assertEquals", "newPrice", "priceText", "println", "assertEquals", "newPrice", "priceText", "println", "assertEquals", "newPrice", "priceText", "println", "assertEquals", "newPrice", "priceText", "println", "assertEquals", "newPrice", "priceText", "println", "assertEquals", "newPrice", "priceText", "println", "assertEquals", "newPrice", "priceText", "println", "assertEquals", "newPrice", "priceText", "println", "assertEquals", "newPrice", "priceText", "println", "assertEquals", "newPrice", "priceText", "println", "assertEquals", "newPrice", "priceText", "println", "assertEquals"]}, "focal_class": {"identifier": "MarketDisplayBaseImpl", "superclass": "", "interfaces": "implements MarketDisplay", "fields": [{"original_string": "private final static DateTimeFormatter YEAR_FULL = DateTimeFormat\n\t\t\t.forPattern(\"yyyy\");", "modifier": "private final static", "type": "DateTimeFormatter", "declarator": "YEAR_FULL = DateTimeFormat\n\t\t\t.forPattern(\"yyyy\")", "var_name": "YEAR_FULL"}, {"original_string": "private final static DateTimeFormatter YEAR_SHORT = DateTimeFormat\n\t\t\t.forPattern(\"yy\");", "modifier": "private final static", "type": "DateTimeFormatter", "declarator": "YEAR_SHORT = DateTimeFormat\n\t\t\t.forPattern(\"yy\")", "var_name": "YEAR_SHORT"}, {"original_string": "private final static DateTimeFormatter MONTH_FULL = DateTimeFormat\n\t\t\t.forPattern(\"MMMMMMMMMMMM\");", "modifier": "private final static", "type": "DateTimeFormatter", "declarator": "MONTH_FULL = DateTimeFormat\n\t\t\t.forPattern(\"MMMMMMMMMMMM\")", "var_name": "MONTH_FULL"}, {"original_string": "private final static DateTimeFormatter MONTH_SHORT = DateTimeFormat\n\t\t\t.forPattern(\"MMM\");", "modifier": "private final static", "type": "DateTimeFormatter", "declarator": "MONTH_SHORT = DateTimeFormat\n\t\t\t.forPattern(\"MMM\")", "var_name": "MONTH_SHORT"}, {"original_string": "private final static DateTimeFormatter TIME_SHORT = DateTimeFormat\n\t\t\t.forPattern(\"HH:mm:ss\");", "modifier": "private final static", "type": "DateTimeFormatter", "declarator": "TIME_SHORT = DateTimeFormat\n\t\t\t.forPattern(\"HH:mm:ss\")", "var_name": "TIME_SHORT"}, {"original_string": "private final static DateTimeFormatter DATE_SHORT = DateTimeFormat\n\t\t\t.forPattern(\"MM/dd/yyyy\");", "modifier": "private final static", "type": "DateTimeFormatter", "declarator": "DATE_SHORT = DateTimeFormat\n\t\t\t.forPattern(\"MM/dd/yyyy\")", "var_name": "DATE_SHORT"}, {"original_string": "private final static DateTimeFormatter TIME_WITH_DATE = DateTimeFormat\n\t\t\t.forPattern(\"MM/dd/yyyy HH:mm:ss\");", "modifier": "private final static", "type": "DateTimeFormatter", "declarator": "TIME_WITH_DATE = DateTimeFormat\n\t\t\t.forPattern(\"MM/dd/yyyy HH:mm:ss\")", "var_name": "TIME_WITH_DATE"}], "methods": [{"identifier": "filter", "parameters": "(final TimeValue time)", "modifiers": "private static", "return": "TimeValue", "signature": "TimeValue filter(final TimeValue time)", "full_signature": "private static TimeValue filter(final TimeValue time)", "class_method_signature": "MarketDisplayBaseImpl.filter(final TimeValue time)", "testcase": false, "constructor": false}, {"identifier": "timeYearFull", "parameters": "(TimeValue time)", "modifiers": "@Override public", "return": "String", "signature": "String timeYearFull(TimeValue time)", "full_signature": "@Override public String timeYearFull(TimeValue time)", "class_method_signature": "MarketDisplayBaseImpl.timeYearFull(TimeValue time)", "testcase": false, "constructor": false}, {"identifier": "timeYearShort", "parameters": "(TimeValue time)", "modifiers": "@Override public", "return": "String", "signature": "String timeYearShort(TimeValue time)", "full_signature": "@Override public String timeYearShort(TimeValue time)", "class_method_signature": "MarketDisplayBaseImpl.timeYearShort(TimeValue time)", "testcase": false, "constructor": false}, {"identifier": "timeMonthFull", "parameters": "(TimeValue time)", "modifiers": "@Override public", "return": "String", "signature": "String timeMonthFull(TimeValue time)", "full_signature": "@Override public String timeMonthFull(TimeValue time)", "class_method_signature": "MarketDisplayBaseImpl.timeMonthFull(TimeValue time)", "testcase": false, "constructor": false}, {"identifier": "timeMonthShort", "parameters": "(TimeValue time)", "modifiers": "@Override public", "return": "String", "signature": "String timeMonthShort(TimeValue time)", "full_signature": "@Override public String timeMonthShort(TimeValue time)", "class_method_signature": "MarketDisplayBaseImpl.timeMonthShort(TimeValue time)", "testcase": false, "constructor": false}, {"identifier": "timeMonthCode", "parameters": "(TimeValue time)", "modifiers": "@Override public", "return": "String", "signature": "String timeMonthCode(TimeValue time)", "full_signature": "@Override public String timeMonthCode(TimeValue time)", "class_method_signature": "MarketDisplayBaseImpl.timeMonthCode(TimeValue time)", "testcase": false, "constructor": false}, {"identifier": "priceFractionText", "parameters": "(PriceValue price, Fraction frac)", "modifiers": "@Override public", "return": "String", "signature": "String priceFractionText(PriceValue price, Fraction frac)", "full_signature": "@Override public String priceFractionText(PriceValue price, Fraction frac)", "class_method_signature": "MarketDisplayBaseImpl.priceFractionText(PriceValue price, Fraction frac)", "testcase": false, "constructor": false}, {"identifier": "priceText", "parameters": "(PriceValue price, Fraction frac)", "modifiers": "@Override public", "return": "String", "signature": "String priceText(PriceValue price, Fraction frac)", "full_signature": "@Override public String priceText(PriceValue price, Fraction frac)", "class_method_signature": "MarketDisplayBaseImpl.priceText(PriceValue price, Fraction frac)", "testcase": false, "constructor": false}, {"identifier": "priceText", "parameters": "(PriceValue price, long base, long exponent)", "modifiers": "@Override public", "return": "String", "signature": "String priceText(PriceValue price, long base, long exponent)", "full_signature": "@Override public String priceText(PriceValue price, long base, long exponent)", "class_method_signature": "MarketDisplayBaseImpl.priceText(PriceValue price, long base, long exponent)", "testcase": false, "constructor": false}, {"identifier": "priceText", "parameters": "(long mantissa, int exponent, long base, long baseExp)", "modifiers": "@Override public", "return": "String", "signature": "String priceText(long mantissa, int exponent, long base, long baseExp)", "full_signature": "@Override public String priceText(long mantissa, int exponent, long base, long baseExp)", "class_method_signature": "MarketDisplayBaseImpl.priceText(long mantissa, int exponent, long base, long baseExp)", "testcase": false, "constructor": false}, {"identifier": "sizeText", "parameters": "(SizeValue size)", "modifiers": "@Override public", "return": "String", "signature": "String sizeText(SizeValue size)", "full_signature": "@Override public String sizeText(SizeValue size)", "class_method_signature": "MarketDisplayBaseImpl.sizeText(SizeValue size)", "testcase": false, "constructor": false}, {"identifier": "sizeText", "parameters": "(long size)", "modifiers": "@Override public", "return": "String", "signature": "String sizeText(long size)", "full_signature": "@Override public String sizeText(long size)", "class_method_signature": "MarketDisplayBaseImpl.sizeText(long size)", "testcase": false, "constructor": false}, {"identifier": "timeTextISO", "parameters": "(TimeValue value)", "modifiers": "@Override public", "return": "String", "signature": "String timeTextISO(TimeValue value)", "full_signature": "@Override public String timeTextISO(TimeValue value)", "class_method_signature": "MarketDisplayBaseImpl.timeTextISO(TimeValue value)", "testcase": false, "constructor": false}, {"identifier": "timeTextShort", "parameters": "(TimeValue value)", "modifiers": "@Override public", "return": "String", "signature": "String timeTextShort(TimeValue value)", "full_signature": "@Override public String timeTextShort(TimeValue value)", "class_method_signature": "MarketDisplayBaseImpl.timeTextShort(TimeValue value)", "testcase": false, "constructor": false}, {"identifier": "dateTimeText", "parameters": "(TimeValue value)", "modifiers": "@Override public", "return": "String", "signature": "String dateTimeText(TimeValue value)", "full_signature": "@Override public String dateTimeText(TimeValue value)", "class_method_signature": "MarketDisplayBaseImpl.dateTimeText(TimeValue value)", "testcase": false, "constructor": false}, {"identifier": "dateTextShort", "parameters": "(TimeValue value)", "modifiers": "@Override public", "return": "String", "signature": "String dateTextShort(TimeValue value)", "full_signature": "@Override public String dateTextShort(TimeValue value)", "class_method_signature": "MarketDisplayBaseImpl.dateTextShort(TimeValue value)", "testcase": false, "constructor": false}, {"identifier": "timeTextShort", "parameters": "(TimeValue value, DateTimeZone zone)", "modifiers": "@Override public", "return": "String", "signature": "String timeTextShort(TimeValue value, DateTimeZone zone)", "full_signature": "@Override public String timeTextShort(TimeValue value, DateTimeZone zone)", "class_method_signature": "MarketDisplayBaseImpl.timeTextShort(TimeValue value, DateTimeZone zone)", "testcase": false, "constructor": false}], "file": "base/src/main/java/com/barchart/feed/base/provider/MarketDisplayBaseImpl.java"}, "focal_method": {"identifier": "priceText", "parameters": "(PriceValue price, Fraction frac)", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String priceText(PriceValue price, Fraction frac) {\n\t\tif(price == null) {\n\t\t\tprice = ValueConst.NULL_PRICE;\n\t\t}\n\t\tif(frac == null) {\n\t\t\t//TODO\n\t\t}\n\t\t\n\t\tlong mantissa = price.mantissa();\n\t\tint exponent = price.exponent();\n\t\tboolean isMinus;\n\t\t\n\t\tif (mantissa < 0) {\n\t\t\tmantissa = -mantissa;\n\t\t\tisMinus = true;\n\t\t} else {\n\t\t\tisMinus = false;\n\t\t}\n\t\t\n\t\tfinal long scale = frac.exponent();\n\n\t\twhile (exponent > scale) {\n\t\t\tmantissa *= 10;\n\t\t\texponent--;\n\t\t}\n\n\t\twhile (exponent < scale) {\n\t\t\tmantissa /= 10;\n\t\t\texponent++;\n\t\t}\n\t\t\n\t\tlong whole = frac.priceWhole(mantissa, exponent);\n\t\t\n\t\tfinal char separator;\n\t\tif(frac.base() == 10) {\n\t\t\tmantissa %= frac.denominator();\n\t\t\tseparator = ASCII.DOT;\n\t\t} else {\n\t\t\tmantissa %= frac.decimalDenominator();\n\t\t\tmantissa *= frac.denominator();\n\t\t\tmantissa /= frac.decimalDenominator();\n\t\t\tseparator = ASCII.DASH;\t\t\t\n\t\t} \n\t\t\n\t\tlong part = mantissa;\n\t\t\n\t\tfinal int size = 64;\n\n\t\tfinal char[] array = new char[size];\n\n\t\tint index = size - 1;\n\n\t\tlong places = frac.places();\n\t\tif(frac.base() == 10) {\n\t\t\tplaces--;\n\t\t}\n\n\t\t/* part */if (places > 0) {\n\n\t\t\tfor (int k = 0; k < places; k++) {\n\t\t\t\tfinal char alpha = (char) (part % 10 + ASCII._0_);\n\t\t\t\tarray[index--] = alpha;\n\t\t\t\tpart /= 10;\n\t\t\t}\n\n\t\t\tarray[index--] = separator;\n\n\t\t}\n\n\t\t/* whole */if (whole == 0) {\n\t\t\tarray[index--] = ASCII._0_;\n\t\t} else {\n\n\t\t\twhile (whole != 0) {\n\t\t\t\tfinal char alpha = (char) (whole % 10 + ASCII._0_);\n\t\t\t\tarray[index--] = alpha;\n\t\t\t\twhole /= 10;\n\t\t\t}\n\n\t\t\tif (isMinus) {\n\t\t\t\tarray[index--] = ASCII.MINUS;\n\t\t\t}\n\n\t\t}\n\n\t\tfinal int offset = index + 1;\n\n\t\tfinal int length = size - offset;\n\n\t\treturn new String(array, offset, length);\n\t}", "signature": "String priceText(PriceValue price, Fraction frac)", "full_signature": "@Override public String priceText(PriceValue price, Fraction frac)", "class_method_signature": "MarketDisplayBaseImpl.priceText(PriceValue price, Fraction frac)", "testcase": false, "constructor": false, "invocations": ["mantissa", "exponent", "exponent", "priceWhole", "base", "denominator", "decimalDenominator", "denominator", "decimalDenominator", "places", "base"]}, "repository": {"repo_id": 7243760, "url": "https://github.com/barchart/barchart-feed", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 64172, "license": "licensed"}}