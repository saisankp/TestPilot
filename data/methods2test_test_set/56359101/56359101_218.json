{"test_class": {"identifier": "HostServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Spy\n    @InjectMocks\n    private HostService spy;", "modifier": "@Spy\n    @InjectMocks\n    private", "type": "HostService", "declarator": "spy", "var_name": "spy"}, {"original_string": "@Mock\n    private HostJdbcDao hostDaoJdbc;", "modifier": "@Mock\n    private", "type": "HostJdbcDao", "declarator": "hostDaoJdbc", "var_name": "hostDaoJdbc"}, {"original_string": "@Mock\n    private HostDao hostDao;", "modifier": "@Mock\n    private", "type": "HostDao", "declarator": "hostDao", "var_name": "hostDao"}, {"original_string": "@Mock\n    private VMInstanceDao vmInstanceDao;", "modifier": "@Mock\n    private", "type": "VMInstanceDao", "declarator": "vmInstanceDao", "var_name": "vmInstanceDao"}], "file": "autonomic-plugin-common/src/test/java/br/com/autonomiccs/autonomic/plugin/common/services/HostServiceTest.java"}, "test_case": {"identifier": "listAllHostsInClusterTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void listAllHostsInClusterTest() {\n        String str = null;\n        List<HostVO> hosts = new ArrayList<>();\n        HostVO host1 = Mockito.mock(HostVO.class);\n        hosts.add(host1);\n        HostVO host2 = Mockito.mock(HostVO.class);\n        hosts.add(host2);\n        Cluster cluster = Mockito.mock(Cluster.class);\n        Mockito.when(cluster.getId()).thenReturn(0l);\n        Mockito.when(cluster.getPodId()).thenReturn(0l);\n        Mockito.when(cluster.getDataCenterId()).thenReturn(0l);\n        Mockito.doReturn(hosts).when(hostDao).listAllUpAndEnabledNonHAHosts(Mockito.eq(Type.Routing), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyLong(),\n                Mockito.eq(str));\n\n        spy.listAllHostsInCluster(cluster);\n\n        Mockito.verify(cluster).getId();\n        Mockito.verify(cluster).getPodId();\n        Mockito.verify(cluster).getDataCenterId();\n        Mockito.verify(hostDao).listAllUpAndEnabledNonHAHosts(Mockito.eq(Type.Routing), Mockito.anyLong(), Mockito.anyLong(), Mockito.anyLong(), Mockito.eq(str));\n    }", "signature": "void listAllHostsInClusterTest()", "full_signature": "@Test public void listAllHostsInClusterTest()", "class_method_signature": "HostServiceTest.listAllHostsInClusterTest()", "testcase": true, "constructor": false, "invocations": ["mock", "add", "mock", "add", "mock", "thenReturn", "when", "getId", "thenReturn", "when", "getPodId", "thenReturn", "when", "getDataCenterId", "listAllUpAndEnabledNonHAHosts", "when", "doReturn", "eq", "anyLong", "anyLong", "anyLong", "eq", "listAllHostsInCluster", "getId", "verify", "getPodId", "verify", "getDataCenterId", "verify", "listAllUpAndEnabledNonHAHosts", "verify", "eq", "anyLong", "anyLong", "anyLong", "eq"]}, "focal_class": {"identifier": "HostService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject\n    private HostJdbcDao hostDaoJdbc;", "modifier": "@Inject\n    private", "type": "HostJdbcDao", "declarator": "hostDaoJdbc", "var_name": "hostDaoJdbc"}, {"original_string": "@Inject\n    private HostDao hostDao;", "modifier": "@Inject\n    private", "type": "HostDao", "declarator": "hostDao", "var_name": "hostDao"}, {"original_string": "@Inject\n    private VMInstanceDao vmInstanceDao;", "modifier": "@Inject\n    private", "type": "VMInstanceDao", "declarator": "vmInstanceDao", "var_name": "vmInstanceDao"}], "methods": [{"identifier": "isHostUpAndEnabled", "parameters": "(long hostId)", "modifiers": "public", "return": "boolean", "signature": "boolean isHostUpAndEnabled(long hostId)", "full_signature": "public boolean isHostUpAndEnabled(long hostId)", "class_method_signature": "HostService.isHostUpAndEnabled(long hostId)", "testcase": false, "constructor": false}, {"identifier": "isHostInMaintenanceError", "parameters": "(long hostId)", "modifiers": "public", "return": "boolean", "signature": "boolean isHostInMaintenanceError(long hostId)", "full_signature": "public boolean isHostInMaintenanceError(long hostId)", "class_method_signature": "HostService.isHostInMaintenanceError(long hostId)", "testcase": false, "constructor": false}, {"identifier": "isHostInPreparedForMaintenance", "parameters": "(long hostId)", "modifiers": "public", "return": "boolean", "signature": "boolean isHostInPreparedForMaintenance(long hostId)", "full_signature": "public boolean isHostInPreparedForMaintenance(long hostId)", "class_method_signature": "HostService.isHostInPreparedForMaintenance(long hostId)", "testcase": false, "constructor": false}, {"identifier": "markHostAsShutdownByAdministrationAgent", "parameters": "(long id)", "modifiers": "@Transactional(readOnly = false) public", "return": "void", "signature": "void markHostAsShutdownByAdministrationAgent(long id)", "full_signature": "@Transactional(readOnly = false) public void markHostAsShutdownByAdministrationAgent(long id)", "class_method_signature": "HostService.markHostAsShutdownByAdministrationAgent(long id)", "testcase": false, "constructor": false}, {"identifier": "loadHostDetails", "parameters": "(HostVO host)", "modifiers": "public", "return": "void", "signature": "void loadHostDetails(HostVO host)", "full_signature": "public void loadHostDetails(HostVO host)", "class_method_signature": "HostService.loadHostDetails(HostVO host)", "testcase": false, "constructor": false}, {"identifier": "getAllHypervisorsTypeInCloud", "parameters": "()", "modifiers": "public", "return": "List<HypervisorType>", "signature": "List<HypervisorType> getAllHypervisorsTypeInCloud()", "full_signature": "public List<HypervisorType> getAllHypervisorsTypeInCloud()", "class_method_signature": "HostService.getAllHypervisorsTypeInCloud()", "testcase": false, "constructor": false}, {"identifier": "findHostById", "parameters": "(Long hostId)", "modifiers": "public", "return": "HostVO", "signature": "HostVO findHostById(Long hostId)", "full_signature": "public HostVO findHostById(Long hostId)", "class_method_signature": "HostService.findHostById(Long hostId)", "testcase": false, "constructor": false}, {"identifier": "listAllHostsInCluster", "parameters": "(Cluster cluster)", "modifiers": "public", "return": "List<HostVO>", "signature": "List<HostVO> listAllHostsInCluster(Cluster cluster)", "full_signature": "public List<HostVO> listAllHostsInCluster(Cluster cluster)", "class_method_signature": "HostService.listAllHostsInCluster(Cluster cluster)", "testcase": false, "constructor": false}, {"identifier": "listAllVmsFromHost", "parameters": "(long hostId)", "modifiers": "public", "return": "List<VMInstanceVO>", "signature": "List<VMInstanceVO> listAllVmsFromHost(long hostId)", "full_signature": "public List<VMInstanceVO> listAllVmsFromHost(long hostId)", "class_method_signature": "HostService.listAllVmsFromHost(long hostId)", "testcase": false, "constructor": false}, {"identifier": "updateHostPrivaceMacAddress", "parameters": "(HostVO hostVo, String privateMacAddress)", "modifiers": "@Transactional(readOnly = false) public", "return": "void", "signature": "void updateHostPrivaceMacAddress(HostVO hostVo, String privateMacAddress)", "full_signature": "@Transactional(readOnly = false) public void updateHostPrivaceMacAddress(HostVO hostVo, String privateMacAddress)", "class_method_signature": "HostService.updateHostPrivaceMacAddress(HostVO hostVo, String privateMacAddress)", "testcase": false, "constructor": false}, {"identifier": "isHostDown", "parameters": "(long id)", "modifiers": "public", "return": "boolean", "signature": "boolean isHostDown(long id)", "full_signature": "public boolean isHostDown(long id)", "class_method_signature": "HostService.isHostDown(long id)", "testcase": false, "constructor": false}, {"identifier": "isThereAnyHostOnCloudDeactivatedByOurManager", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isThereAnyHostOnCloudDeactivatedByOurManager()", "full_signature": "public boolean isThereAnyHostOnCloudDeactivatedByOurManager()", "class_method_signature": "HostService.isThereAnyHostOnCloudDeactivatedByOurManager()", "testcase": false, "constructor": false}], "file": "autonomic-plugin-common/src/main/java/br/com/autonomiccs/autonomic/plugin/common/services/HostService.java"}, "focal_method": {"identifier": "listAllHostsInCluster", "parameters": "(Cluster cluster)", "modifiers": "public", "return": "List<HostVO>", "body": "public List<HostVO> listAllHostsInCluster(Cluster cluster) {\n        return hostDao.listAllUpAndEnabledNonHAHosts(Type.Routing, cluster.getId(), cluster.getPodId(), cluster.getDataCenterId(), null);\n    }", "signature": "List<HostVO> listAllHostsInCluster(Cluster cluster)", "full_signature": "public List<HostVO> listAllHostsInCluster(Cluster cluster)", "class_method_signature": "HostService.listAllHostsInCluster(Cluster cluster)", "testcase": false, "constructor": false, "invocations": ["listAllUpAndEnabledNonHAHosts", "getId", "getPodId", "getDataCenterId"]}, "repository": {"repo_id": 56359101, "url": "https://github.com/Autonomiccs/autonomiccs-platform", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 944, "license": "licensed"}}