{"test_class": {"identifier": "MultiLabelClassificationPredictionBatchTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DOUBLE_DELTA = 1E-8;", "modifier": "private static final", "type": "double", "declarator": "DOUBLE_DELTA = 1E-8", "var_name": "DOUBLE_DELTA"}, {"original_string": "private static final double[][] GT_MATRIX = { { 0.231232, 0.84354239, 0.1234782394, 0.3423489 }, { 0.3, 0.4, 0.5, 0.6 } };", "modifier": "private static final", "type": "double[][]", "declarator": "GT_MATRIX = { { 0.231232, 0.84354239, 0.1234782394, 0.3423489 }, { 0.3, 0.4, 0.5, 0.6 } }", "var_name": "GT_MATRIX"}, {"original_string": "private static final double THRESHOLD_SINGLE = 0.3;", "modifier": "private static final", "type": "double", "declarator": "THRESHOLD_SINGLE = 0.3", "var_name": "THRESHOLD_SINGLE"}, {"original_string": "private static final double[] THRESHOLD_VECTOR = { 0.2, 0.9, 0.1, 0.4 };", "modifier": "private static final", "type": "double[]", "declarator": "THRESHOLD_VECTOR = { 0.2, 0.9, 0.1, 0.4 }", "var_name": "THRESHOLD_VECTOR"}, {"original_string": "private static final int[][] EXPECTED_THRESHOLDED_SINGLE = { { 0, 1, 0, 1 }, { 1, 1, 1, 1 } };", "modifier": "private static final", "type": "int[][]", "declarator": "EXPECTED_THRESHOLDED_SINGLE = { { 0, 1, 0, 1 }, { 1, 1, 1, 1 } }", "var_name": "EXPECTED_THRESHOLDED_SINGLE"}, {"original_string": "private static final int[][] EXPECTED_THRESHOLDED_VECTOR = { { 1, 0, 1, 0 }, { 1, 0, 1, 1 } };", "modifier": "private static final", "type": "int[][]", "declarator": "EXPECTED_THRESHOLDED_VECTOR = { { 1, 0, 1, 0 }, { 1, 0, 1, 1 } }", "var_name": "EXPECTED_THRESHOLDED_VECTOR"}, {"original_string": "private static final double RELEVANCE_THRESHOLD = 0.5;", "modifier": "private static final", "type": "double", "declarator": "RELEVANCE_THRESHOLD = 0.5", "var_name": "RELEVANCE_THRESHOLD"}, {"original_string": "private static final int[] RELEVANT_LABELS = { 1 };", "modifier": "private static final", "type": "int[]", "declarator": "RELEVANT_LABELS = { 1 }", "var_name": "RELEVANT_LABELS"}, {"original_string": "private static final int[] IRRELEVANT_LABELS = { 0, 2, 3 };", "modifier": "private static final", "type": "int[]", "declarator": "IRRELEVANT_LABELS = { 0, 2, 3 }", "var_name": "IRRELEVANT_LABELS"}, {"original_string": "private static IMultiLabelClassificationPredictionBatch classification;", "modifier": "private static", "type": "IMultiLabelClassificationPredictionBatch", "declarator": "classification", "var_name": "classification"}], "file": "JAICore/jaicore-ml/src/test/java/ai/libs/jaicore/ml/classification/multilabel/MultiLabelClassificationPredictionBatchTest.java"}, "test_case": {"identifier": "testGetPrediction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetPrediction() {\n\t\tdouble[][] pred = classification.getPredictionMatrix();\n\t\tassertEquals(\"Prediction vector and ground truth value vector are not of the same length\", GT_MATRIX.length, pred.length);\n\t\tfor (int i = 0; i < GT_MATRIX.length; i++) {\n\t\t\tfor (int j = 0; j < GT_MATRIX[i].length; j++) {\n\t\t\t\tassertEquals(\"Prediction vector is not as expected for index \" + i + \".\", GT_MATRIX[i][j], pred[i][j], DOUBLE_DELTA);\n\t\t\t}\n\t\t}\n\t}", "signature": "void testGetPrediction()", "full_signature": "@Test public void testGetPrediction()", "class_method_signature": "MultiLabelClassificationPredictionBatchTest.testGetPrediction()", "testcase": true, "constructor": false, "invocations": ["getPredictionMatrix", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "MultiLabelClassificationPredictionBatch", "superclass": "", "interfaces": "implements IMultiLabelClassificationPredictionBatch", "fields": [{"original_string": "private List<? extends IMultiLabelClassification> batch;", "modifier": "private", "type": "List<? extends IMultiLabelClassification>", "declarator": "batch", "var_name": "batch"}], "methods": [{"identifier": "MultiLabelClassificationPredictionBatch", "parameters": "(final List<? extends IMultiLabelClassification> batch)", "modifiers": "public", "return": "", "signature": " MultiLabelClassificationPredictionBatch(final List<? extends IMultiLabelClassification> batch)", "full_signature": "public  MultiLabelClassificationPredictionBatch(final List<? extends IMultiLabelClassification> batch)", "class_method_signature": "MultiLabelClassificationPredictionBatch.MultiLabelClassificationPredictionBatch(final List<? extends IMultiLabelClassification> batch)", "testcase": false, "constructor": true}, {"identifier": "MultiLabelClassificationPredictionBatch", "parameters": "(final IMultiLabelClassification[] batch)", "modifiers": "public", "return": "", "signature": " MultiLabelClassificationPredictionBatch(final IMultiLabelClassification[] batch)", "full_signature": "public  MultiLabelClassificationPredictionBatch(final IMultiLabelClassification[] batch)", "class_method_signature": "MultiLabelClassificationPredictionBatch.MultiLabelClassificationPredictionBatch(final IMultiLabelClassification[] batch)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(final int index)", "modifiers": "@Override public", "return": "IMultiLabelClassification", "signature": "IMultiLabelClassification get(final int index)", "full_signature": "@Override public IMultiLabelClassification get(final int index)", "class_method_signature": "MultiLabelClassificationPredictionBatch.get(final int index)", "testcase": false, "constructor": false}, {"identifier": "getNumPredictions", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNumPredictions()", "full_signature": "@Override public int getNumPredictions()", "class_method_signature": "MultiLabelClassificationPredictionBatch.getNumPredictions()", "testcase": false, "constructor": false}, {"identifier": "getPredictions", "parameters": "()", "modifiers": "@Override public", "return": "List<? extends IMultiLabelClassification>", "signature": "List<? extends IMultiLabelClassification> getPredictions()", "full_signature": "@Override public List<? extends IMultiLabelClassification> getPredictions()", "class_method_signature": "MultiLabelClassificationPredictionBatch.getPredictions()", "testcase": false, "constructor": false}, {"identifier": "getPredictionMatrix", "parameters": "()", "modifiers": "@Override public", "return": "double[][]", "signature": "double[][] getPredictionMatrix()", "full_signature": "@Override public double[][] getPredictionMatrix()", "class_method_signature": "MultiLabelClassificationPredictionBatch.getPredictionMatrix()", "testcase": false, "constructor": false}, {"identifier": "getThresholdedPredictionMatrix", "parameters": "(final double threshold)", "modifiers": "@Override public", "return": "int[][]", "signature": "int[][] getThresholdedPredictionMatrix(final double threshold)", "full_signature": "@Override public int[][] getThresholdedPredictionMatrix(final double threshold)", "class_method_signature": "MultiLabelClassificationPredictionBatch.getThresholdedPredictionMatrix(final double threshold)", "testcase": false, "constructor": false}, {"identifier": "getThresholdedPredictionMatrix", "parameters": "(final double[] threshold)", "modifiers": "@Override public", "return": "int[][]", "signature": "int[][] getThresholdedPredictionMatrix(final double[] threshold)", "full_signature": "@Override public int[][] getThresholdedPredictionMatrix(final double[] threshold)", "class_method_signature": "MultiLabelClassificationPredictionBatch.getThresholdedPredictionMatrix(final double[] threshold)", "testcase": false, "constructor": false}], "file": "JAICore/jaicore-ml/src/main/java/ai/libs/jaicore/ml/classification/multilabel/MultiLabelClassificationPredictionBatch.java"}, "focal_method": {"identifier": "getPredictionMatrix", "parameters": "()", "modifiers": "@Override public", "return": "double[][]", "body": "@Override\n\tpublic double[][] getPredictionMatrix() {\n\t\tdouble[][] predictionMatrix = new double[this.batch.size()][];\n\t\tIntStream.range(0, this.batch.size()).forEach(x -> predictionMatrix[x] = this.batch.get(x).getPrediction());\n\t\treturn predictionMatrix;\n\t}", "signature": "double[][] getPredictionMatrix()", "full_signature": "@Override public double[][] getPredictionMatrix()", "class_method_signature": "MultiLabelClassificationPredictionBatch.getPredictionMatrix()", "testcase": false, "constructor": false, "invocations": ["size", "forEach", "range", "size", "getPrediction", "get"]}, "repository": {"repo_id": 95635499, "url": "https://github.com/fmohr/AILibs", "language": "Java", "is_fork": false, "fork_count": 26, "stargazer_count": 25, "size": 155873, "license": "licensed"}}