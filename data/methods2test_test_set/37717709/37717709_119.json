{"test_class": {"identifier": "TestMappedDocumentStrategy", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DocumentMap map;", "modifier": "private", "type": "DocumentMap", "declarator": "map", "var_name": "map"}], "file": "org.jvoicexml/src/test/java/org/jvoicexml/documentserver/schemestrategy/TestMappedDocumentStrategy.java"}, "test_case": {"identifier": "testGetInputStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetInputStream() throws Exception, BadFetchError {\n        final MappedDocumentStrategy strategy = new MappedDocumentStrategy();\n        JVoiceXMLEvent error = null;\n        try {\n            strategy.getInputStream(null, null, null, 0, null);\n        } catch (BadFetchError e) {\n            error = e;\n        }\n        Assert.assertNotNull(\"BadFetchError expected\", error);\n\n        URI uri1 = map.getUri(\"/doc\");\n        final InputStream stream1 = strategy.getInputStream(null, uri1, null,\n                0, null);\n        Assert.assertNotNull(stream1);\n        final InputSource inputSource = new InputSource(stream1);\n        final VoiceXmlDocument doc1 = new VoiceXmlDocument(inputSource);\n        final Vxml vxml1 = doc1.getVxml();\n        Assert.assertTrue(vxml1.hasChildNodes());\n\n        URI uri2 =  map.getUri(\"/test\");\n        final InputStream stream2 = strategy.getInputStream(null, uri2, null,\n                0, null);\n        Assert.assertNotNull(stream2);\n        final String test = readString(stream2);\n        Assert.assertEquals(\"test\", test);\n    }", "signature": "void testGetInputStream()", "full_signature": "@Test public void testGetInputStream()", "class_method_signature": "TestMappedDocumentStrategy.testGetInputStream()", "testcase": true, "constructor": false, "invocations": ["getInputStream", "assertNotNull", "getUri", "getInputStream", "assertNotNull", "getVxml", "assertTrue", "hasChildNodes", "getUri", "getInputStream", "assertNotNull", "readString", "assertEquals"]}, "focal_class": {"identifier": "MappedDocumentStrategy", "superclass": "", "interfaces": "implements SchemeStrategy", "fields": [{"original_string": "public static final String SCHEME_NAME = \"jvxmlmap\";", "modifier": "public static final", "type": "String", "declarator": "SCHEME_NAME = \"jvxmlmap\"", "var_name": "SCHEME_NAME"}], "methods": [{"identifier": "MappedDocumentStrategy", "parameters": "()", "modifiers": "public", "return": "", "signature": " MappedDocumentStrategy()", "full_signature": "public  MappedDocumentStrategy()", "class_method_signature": "MappedDocumentStrategy.MappedDocumentStrategy()", "testcase": false, "constructor": true}, {"identifier": "getScheme", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getScheme()", "full_signature": "@Override public String getScheme()", "class_method_signature": "MappedDocumentStrategy.getScheme()", "testcase": false, "constructor": false}, {"identifier": "getInputStream", "parameters": "(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "modifiers": "@Override public", "return": "InputStream", "signature": "InputStream getInputStream(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "full_signature": "@Override public InputStream getInputStream(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "class_method_signature": "MappedDocumentStrategy.getInputStream(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "testcase": false, "constructor": false}, {"identifier": "getEncoding", "parameters": "(final String document)", "modifiers": "private", "return": "String", "signature": "String getEncoding(final String document)", "full_signature": "private String getEncoding(final String document)", "class_method_signature": "MappedDocumentStrategy.getEncoding(final String document)", "testcase": false, "constructor": false}, {"identifier": "sessionClosed", "parameters": "(final String sessionId)", "modifiers": "@Override public", "return": "void", "signature": "void sessionClosed(final String sessionId)", "full_signature": "@Override public void sessionClosed(final String sessionId)", "class_method_signature": "MappedDocumentStrategy.sessionClosed(final String sessionId)", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/documentserver/schemestrategy/MappedDocumentStrategy.java"}, "focal_method": {"identifier": "getInputStream", "parameters": "(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "modifiers": "@Override public", "return": "InputStream", "body": "@Override\n    public InputStream getInputStream(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)\n            throws BadFetchError {\n        if (uri == null) {\n            throw new BadFetchError(\"Unable to retrieve a document for null!\");\n        }\n        final DocumentMap repository = DocumentMap.getInstance();\n\n        // A jvxmlmap based URI may only have a scheme and a path.\n        final String scheme = uri.getScheme();\n        final String path = uri.getPath();\n        final URI fragmentLessUri;\n        try {\n            fragmentLessUri = new URI(scheme, null, path, null);\n        } catch (URISyntaxException e) {\n            throw new BadFetchError(e.getMessage(), e);\n        }\n        final String document = repository.getDocument(fragmentLessUri);\n        if (document == null) {\n            return null;\n        }\n\n        String encoding = getEncoding(document);\n        if (encoding == null) {\n            encoding = System.getProperty(\"jvoicexml.xml.encoding\", \"UTF-8\");\n        }\n        try {\n            return new ByteArrayInputStream(document.getBytes(encoding));\n        } catch (java.io.IOException ioe) {\n            throw new BadFetchError(ioe);\n        }\n    }", "signature": "InputStream getInputStream(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "full_signature": "@Override public InputStream getInputStream(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "class_method_signature": "MappedDocumentStrategy.getInputStream(final String sessionId, final URI uri,\n            final RequestMethod method, final long timeout,\n            final Collection<KeyValuePair> parameters)", "testcase": false, "constructor": false, "invocations": ["getInstance", "getScheme", "getPath", "getMessage", "getDocument", "getEncoding", "getProperty", "getBytes"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}