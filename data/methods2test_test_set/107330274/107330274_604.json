{"test_class": {"identifier": "LogStorageInfosTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final S3LogLocation DEFAULT_LOG_LOCATION = new S3LogLocation(\n            \"defaultAccountName\",\n            \"defaultAccountId\",\n            \"defaultRegion\",\n            \"defaultBucket\",\n            \"defaultKey\"\n    );", "modifier": "private static final", "type": "S3LogLocation", "declarator": "DEFAULT_LOG_LOCATION = new S3LogLocation(\n            \"defaultAccountName\",\n            \"defaultAccountId\",\n            \"defaultRegion\",\n            \"defaultBucket\",\n            \"defaultKey\"\n    )", "var_name": "DEFAULT_LOG_LOCATION"}], "file": "titus-api/src/test/java/com/netflix/titus/api/jobmanager/model/job/LogStorageInfosTest.java"}, "test_case": {"identifier": "testToS3LogLocationTaskContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToS3LogLocationTaskContext() {\n        // Empty context\n        assertS3LogLocationInTaskContextNotSet(LogStorageInfos.toS3LogLocationTaskContext(JobGenerator.oneBatchJob()));\n\n        // Non empty context\n        assertS3LogLocationInTaskContext(\n                LogStorageInfos.toS3LogLocationTaskContext(newJob(\"bucketA\", \"pathB\")),\n                \"bucketA\",\n                \"pathB\"\n        );\n    }", "signature": "void testToS3LogLocationTaskContext()", "full_signature": "@Test public void testToS3LogLocationTaskContext()", "class_method_signature": "LogStorageInfosTest.testToS3LogLocationTaskContext()", "testcase": true, "constructor": false, "invocations": ["assertS3LogLocationInTaskContextNotSet", "toS3LogLocationTaskContext", "oneBatchJob", "assertS3LogLocationInTaskContext", "toS3LogLocationTaskContext", "newJob"]}, "focal_class": {"identifier": "LogStorageInfos", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Pattern S3_ACCESS_POINT_ARN_RE = Pattern.compile(\n            \"arn:aws:s3:([^:]+):([^:]+):accesspoint/.*\"\n    );", "modifier": "private static final", "type": "Pattern", "declarator": "S3_ACCESS_POINT_ARN_RE = Pattern.compile(\n            \"arn:aws:s3:([^:]+):([^:]+):accesspoint/.*\"\n    )", "var_name": "S3_ACCESS_POINT_ARN_RE"}], "methods": [{"identifier": "toS3LogLocationTaskContext", "parameters": "(Job<E> job)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> toS3LogLocationTaskContext(Job<E> job)", "full_signature": "public static Map<String, String> toS3LogLocationTaskContext(Job<E> job)", "class_method_signature": "LogStorageInfos.toS3LogLocationTaskContext(Job<E> job)", "testcase": false, "constructor": false}, {"identifier": "buildLogLocation", "parameters": "(Task task, S3LogLocation defaultLogLocation)", "modifiers": "public static", "return": "S3LogLocation", "signature": "S3LogLocation buildLogLocation(Task task, S3LogLocation defaultLogLocation)", "full_signature": "public static S3LogLocation buildLogLocation(Task task, S3LogLocation defaultLogLocation)", "class_method_signature": "LogStorageInfos.buildLogLocation(Task task, S3LogLocation defaultLogLocation)", "testcase": false, "constructor": false}, {"identifier": "findCustomS3Bucket", "parameters": "(Job<?> job)", "modifiers": "public static", "return": "Optional<S3Bucket>", "signature": "Optional<S3Bucket> findCustomS3Bucket(Job<?> job)", "full_signature": "public static Optional<S3Bucket> findCustomS3Bucket(Job<?> job)", "class_method_signature": "LogStorageInfos.findCustomS3Bucket(Job<?> job)", "testcase": false, "constructor": false}, {"identifier": "findCustomS3Bucket", "parameters": "(JobDescriptor<?> jobDescriptor)", "modifiers": "public static", "return": "Optional<S3Bucket>", "signature": "Optional<S3Bucket> findCustomS3Bucket(JobDescriptor<?> jobDescriptor)", "full_signature": "public static Optional<S3Bucket> findCustomS3Bucket(JobDescriptor<?> jobDescriptor)", "class_method_signature": "LogStorageInfos.findCustomS3Bucket(JobDescriptor<?> jobDescriptor)", "testcase": false, "constructor": false}, {"identifier": "findCustomS3Bucket", "parameters": "(Task task)", "modifiers": "public static", "return": "Optional<S3Bucket>", "signature": "Optional<S3Bucket> findCustomS3Bucket(Task task)", "full_signature": "public static Optional<S3Bucket> findCustomS3Bucket(Task task)", "class_method_signature": "LogStorageInfos.findCustomS3Bucket(Task task)", "testcase": false, "constructor": false}, {"identifier": "findCustomPathPrefix", "parameters": "(JobDescriptor<?> jobDescriptor)", "modifiers": "public static", "return": "Optional<String>", "signature": "Optional<String> findCustomPathPrefix(JobDescriptor<?> jobDescriptor)", "full_signature": "public static Optional<String> findCustomPathPrefix(JobDescriptor<?> jobDescriptor)", "class_method_signature": "LogStorageInfos.findCustomPathPrefix(JobDescriptor<?> jobDescriptor)", "testcase": false, "constructor": false}, {"identifier": "findCustomPathPrefix", "parameters": "(Task task)", "modifiers": "public static", "return": "Optional<String>", "signature": "Optional<String> findCustomPathPrefix(Task task)", "full_signature": "public static Optional<String> findCustomPathPrefix(Task task)", "class_method_signature": "LogStorageInfos.findCustomPathPrefix(Task task)", "testcase": false, "constructor": false}, {"identifier": "buildPathPrefix", "parameters": "(String first, String second)", "modifiers": "public static", "return": "String", "signature": "String buildPathPrefix(String first, String second)", "full_signature": "public static String buildPathPrefix(String first, String second)", "class_method_signature": "LogStorageInfos.buildPathPrefix(String first, String second)", "testcase": false, "constructor": false}, {"identifier": "parseS3AccessPointArn", "parameters": "(String s3AccessPointArn)", "modifiers": "@VisibleForTesting static", "return": "Optional<S3Account>", "signature": "Optional<S3Account> parseS3AccessPointArn(String s3AccessPointArn)", "full_signature": "@VisibleForTesting static Optional<S3Account> parseS3AccessPointArn(String s3AccessPointArn)", "class_method_signature": "LogStorageInfos.parseS3AccessPointArn(String s3AccessPointArn)", "testcase": false, "constructor": false}], "file": "titus-api/src/main/java/com/netflix/titus/api/jobmanager/model/job/LogStorageInfos.java"}, "focal_method": {"identifier": "toS3LogLocationTaskContext", "parameters": "(Job<E> job)", "modifiers": "public static", "return": "Map<String, String>", "body": "public static <E extends JobDescriptor.JobDescriptorExt> Map<String, String> toS3LogLocationTaskContext(Job<E> job) {\n        Map<String, String> context = new HashMap<>();\n\n        Map<String, String> attributes = job.getJobDescriptor().getContainer().getAttributes();\n        Evaluators.applyNotNull(\n                attributes.get(JobAttributes.JOB_CONTAINER_ATTRIBUTE_S3_BUCKET_NAME),\n                value -> context.put(TaskAttributes.TASK_ATTRIBUTE_S3_BUCKET_NAME, value)\n        );\n        Evaluators.applyNotNull(\n                attributes.get(JobAttributes.JOB_CONTAINER_ATTRIBUTE_S3_PATH_PREFIX),\n                value -> context.put(TaskAttributes.TASK_ATTRIBUTE_S3_PATH_PREFIX, value)\n        );\n\n        return context;\n    }", "signature": "Map<String, String> toS3LogLocationTaskContext(Job<E> job)", "full_signature": "public static Map<String, String> toS3LogLocationTaskContext(Job<E> job)", "class_method_signature": "LogStorageInfos.toS3LogLocationTaskContext(Job<E> job)", "testcase": false, "constructor": false, "invocations": ["getAttributes", "getContainer", "getJobDescriptor", "applyNotNull", "get", "put", "applyNotNull", "get", "put"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}