{"test_class": {"identifier": "SSMStepDefinitionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private SSMStepDefinitions ssmStepDefinitions;", "modifier": "@Autowired\n    private", "type": "SSMStepDefinitions", "declarator": "ssmStepDefinitions", "var_name": "ssmStepDefinitions"}, {"original_string": "@Autowired\n    private   EC2RaiderImpl ec2Raider;", "modifier": "@Autowired\n    private", "type": "EC2RaiderImpl", "declarator": "ec2Raider", "var_name": "ec2Raider"}, {"original_string": "@Autowired\n    private   SSMRaiderImpl ssmRaider;", "modifier": "@Autowired\n    private", "type": "SSMRaiderImpl", "declarator": "ssmRaider", "var_name": "ssmRaider"}, {"original_string": "@Autowired\n    private ExecutionStateCache executionStateCache;", "modifier": "@Autowired\n    private", "type": "ExecutionStateCache", "declarator": "executionStateCache", "var_name": "executionStateCache"}], "file": "cloudraider-core/src/test/java/com/intuit/cloudraider/cucumber/steps/SSMStepDefinitionsTest.java"}, "test_case": {"identifier": "testBlockDynamoDB", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBlockDynamoDB() throws Exception\n    {\n        executionStateCache.setInstances(createInstances());\n        try {\n            ssmStepDefinitions.blockDynamoDB(1);\n        }\n        catch (Throwable t)\n        {\n          //  t.printStackTrace();\n        }\n        Assert.assertEquals(executionStateCache.getCommandId(), \"1234\");\n        Assert.assertTrue(executionStateCache.getInstances().size()>0);\n        Assert.assertTrue(executionStateCache.isBlockDynamoDB());\n        Assert.assertTrue(executionStateCache.getSsmCommandInvocationInstances().size() > 0);\n\n    }", "signature": "void testBlockDynamoDB()", "full_signature": "@Test public void testBlockDynamoDB()", "class_method_signature": "SSMStepDefinitionsTest.testBlockDynamoDB()", "testcase": true, "constructor": false, "invocations": ["setInstances", "createInstances", "blockDynamoDB", "assertEquals", "getCommandId", "assertTrue", "size", "getInstances", "assertTrue", "isBlockDynamoDB", "assertTrue", "size", "getSsmCommandInvocationInstances"]}, "focal_class": {"identifier": "SSMStepDefinitions", "superclass": "", "interfaces": "implements EC2StepFunctions", "fields": [{"original_string": "@Autowired\n    @Qualifier(\"ssmRaiderBean\")\n    private SSMRaider ssmRaider;", "modifier": "@Autowired\n    @Qualifier(\"ssmRaiderBean\")\n    private", "type": "SSMRaider", "declarator": "ssmRaider", "var_name": "ssmRaider"}, {"original_string": "Logger logger = LoggerFactory.getLogger(this.getClass());", "modifier": "", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(this.getClass())", "var_name": "logger"}, {"original_string": "@Autowired\n    private ExecutionStateCache executionStateCache;", "modifier": "@Autowired\n    private", "type": "ExecutionStateCache", "declarator": "executionStateCache", "var_name": "executionStateCache"}], "methods": [{"identifier": "SSMStepDefinitions", "parameters": "()", "modifiers": "public", "return": "", "signature": " SSMStepDefinitions()", "full_signature": "public  SSMStepDefinitions()", "class_method_signature": "SSMStepDefinitions.SSMStepDefinitions()", "testcase": false, "constructor": true}, {"identifier": "getExecutionStateCache", "parameters": "()", "modifiers": "public", "return": "ExecutionStateCache", "signature": "ExecutionStateCache getExecutionStateCache()", "full_signature": "public ExecutionStateCache getExecutionStateCache()", "class_method_signature": "SSMStepDefinitions.getExecutionStateCache()", "testcase": false, "constructor": false}, {"identifier": "setExecutionStateCache", "parameters": "(ExecutionStateCache executionStateCache)", "modifiers": "public", "return": "void", "signature": "void setExecutionStateCache(ExecutionStateCache executionStateCache)", "full_signature": "public void setExecutionStateCache(ExecutionStateCache executionStateCache)", "class_method_signature": "SSMStepDefinitions.setExecutionStateCache(ExecutionStateCache executionStateCache)", "testcase": false, "constructor": false}, {"identifier": "executeCommandOnHealthyInstances", "parameters": "(String command, int numHosts)", "modifiers": "@When(\"^executeCommand \\\"([^\\\"]*)\\\" on (\\\\d+) instance$\") public", "return": "SSMStepDefinitions", "signature": "SSMStepDefinitions executeCommandOnHealthyInstances(String command, int numHosts)", "full_signature": "@When(\"^executeCommand \\\"([^\\\"]*)\\\" on (\\\\d+) instance$\") public SSMStepDefinitions executeCommandOnHealthyInstances(String command, int numHosts)", "class_method_signature": "SSMStepDefinitions.executeCommandOnHealthyInstances(String command, int numHosts)", "testcase": false, "constructor": false}, {"identifier": "terminateProcessGivenInstance", "parameters": "(String processName, String instanceID, String instanceIP)", "modifiers": "@Override public", "return": "void", "signature": "void terminateProcessGivenInstance(String processName, String instanceID, String instanceIP)", "full_signature": "@Override public void terminateProcessGivenInstance(String processName, String instanceID, String instanceIP)", "class_method_signature": "SSMStepDefinitions.terminateProcessGivenInstance(String processName, String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "terminateCommandOnHealthyInstances", "parameters": "(String processName, int numHosts)", "modifiers": "@When(\"^SSM terminate process \\\"([^\\\"]*)\\\" on (\\\\d+) instance$\") public", "return": "SSMStepDefinitions", "signature": "SSMStepDefinitions terminateCommandOnHealthyInstances(String processName, int numHosts)", "full_signature": "@When(\"^SSM terminate process \\\"([^\\\"]*)\\\" on (\\\\d+) instance$\") public SSMStepDefinitions terminateCommandOnHealthyInstances(String processName, int numHosts)", "class_method_signature": "SSMStepDefinitions.terminateCommandOnHealthyInstances(String processName, int numHosts)", "testcase": false, "constructor": false}, {"identifier": "assertCommandExecutionStatus", "parameters": "(final String expectedCommandStatus)", "modifiers": "@When(\"^assertCommand execution status = \\\"([^\\\"]*)\\\"$\") public", "return": "void", "signature": "void assertCommandExecutionStatus(final String expectedCommandStatus)", "full_signature": "@When(\"^assertCommand execution status = \\\"([^\\\"]*)\\\"$\") public void assertCommandExecutionStatus(final String expectedCommandStatus)", "class_method_signature": "SSMStepDefinitions.assertCommandExecutionStatus(final String expectedCommandStatus)", "testcase": false, "constructor": false}, {"identifier": "terminateProcessInAvailabilityZone", "parameters": "(String processName, int numHosts, String zoneId)", "modifiers": "@When(\"^SSM terminate process \\\"([^\\\"]*)\\\" on (\\\\d+) instance in zone \\\"([^\\\"]*)\\\"$\") public", "return": "SSMStepDefinitions", "signature": "SSMStepDefinitions terminateProcessInAvailabilityZone(String processName, int numHosts, String zoneId)", "full_signature": "@When(\"^SSM terminate process \\\"([^\\\"]*)\\\" on (\\\\d+) instance in zone \\\"([^\\\"]*)\\\"$\") public SSMStepDefinitions terminateProcessInAvailabilityZone(String processName, int numHosts, String zoneId)", "class_method_signature": "SSMStepDefinitions.terminateProcessInAvailabilityZone(String processName, int numHosts, String zoneId)", "testcase": false, "constructor": false}, {"identifier": "spikeCPUGivenInstance", "parameters": "(int cores, String instanceID, String instanceIP)", "modifiers": "@Override public", "return": "void", "signature": "void spikeCPUGivenInstance(int cores, String instanceID, String instanceIP)", "full_signature": "@Override public void spikeCPUGivenInstance(int cores, String instanceID, String instanceIP)", "class_method_signature": "SSMStepDefinitions.spikeCPUGivenInstance(int cores, String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "spikeCPUOnHealthyInstances", "parameters": "(int numHosts, int cores)", "modifiers": "@When(\"^SSM CPU spike on (\\\\d+) instances for (\\\\d+) cores$\") public", "return": "SSMStepDefinitions", "signature": "SSMStepDefinitions spikeCPUOnHealthyInstances(int numHosts, int cores)", "full_signature": "@When(\"^SSM CPU spike on (\\\\d+) instances for (\\\\d+) cores$\") public SSMStepDefinitions spikeCPUOnHealthyInstances(int numHosts, int cores)", "class_method_signature": "SSMStepDefinitions.spikeCPUOnHealthyInstances(int numHosts, int cores)", "testcase": false, "constructor": false}, {"identifier": "terminateProcessOnAllHealthyInstances", "parameters": "(String processName)", "modifiers": "@When(\"^SSM terminate process \\\"([^\\\"]*)\\\"$\") public", "return": "SSMStepDefinitions", "signature": "SSMStepDefinitions terminateProcessOnAllHealthyInstances(String processName)", "full_signature": "@When(\"^SSM terminate process \\\"([^\\\"]*)\\\"$\") public SSMStepDefinitions terminateProcessOnAllHealthyInstances(String processName)", "class_method_signature": "SSMStepDefinitions.terminateProcessOnAllHealthyInstances(String processName)", "testcase": false, "constructor": false}, {"identifier": "diskFullGivenInstance", "parameters": "(String volumeType, int size, String instanceID, String instanceIP)", "modifiers": "@Override public", "return": "void", "signature": "void diskFullGivenInstance(String volumeType, int size, String instanceID, String instanceIP)", "full_signature": "@Override public void diskFullGivenInstance(String volumeType, int size, String instanceID, String instanceIP)", "class_method_signature": "SSMStepDefinitions.diskFullGivenInstance(String volumeType, int size, String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "diskFullOnInstance", "parameters": "(String volumeType, int size, int numHosts)", "modifiers": "@When(\"^SSM \\\"([^\\\"]*)\\\" disk full with (\\\\d+) GB on (\\\\d+) instance$\") public", "return": "SSMStepDefinitions", "signature": "SSMStepDefinitions diskFullOnInstance(String volumeType, int size, int numHosts)", "full_signature": "@When(\"^SSM \\\"([^\\\"]*)\\\" disk full with (\\\\d+) GB on (\\\\d+) instance$\") public SSMStepDefinitions diskFullOnInstance(String volumeType, int size, int numHosts)", "class_method_signature": "SSMStepDefinitions.diskFullOnInstance(String volumeType, int size, int numHosts)", "testcase": false, "constructor": false}, {"identifier": "ramDiskFullOnInstance", "parameters": "(int size, int numHosts)", "modifiers": "@When(\"^SSM RAM disk full with (\\\\d+) GB on (\\\\d+) instance$\") public", "return": "SSMStepDefinitions", "signature": "SSMStepDefinitions ramDiskFullOnInstance(int size, int numHosts)", "full_signature": "@When(\"^SSM RAM disk full with (\\\\d+) GB on (\\\\d+) instance$\") public SSMStepDefinitions ramDiskFullOnInstance(int size, int numHosts)", "class_method_signature": "SSMStepDefinitions.ramDiskFullOnInstance(int size, int numHosts)", "testcase": false, "constructor": false}, {"identifier": "blockDomain", "parameters": "(String domainName, int numHosts)", "modifiers": "@When(\"^SSM block domain \\\"([^\\\"]*)\\\" on (\\\\d+) instances$\") public", "return": "SSMStepDefinitions", "signature": "SSMStepDefinitions blockDomain(String domainName, int numHosts)", "full_signature": "@When(\"^SSM block domain \\\"([^\\\"]*)\\\" on (\\\\d+) instances$\") public SSMStepDefinitions blockDomain(String domainName, int numHosts)", "class_method_signature": "SSMStepDefinitions.blockDomain(String domainName, int numHosts)", "testcase": false, "constructor": false}, {"identifier": "blockDynamoDB", "parameters": "( int numHosts)", "modifiers": "@When(\"^SSM block DynamoDB on (\\\\d+) instances$\") public", "return": "SSMStepDefinitions", "signature": "SSMStepDefinitions blockDynamoDB( int numHosts)", "full_signature": "@When(\"^SSM block DynamoDB on (\\\\d+) instances$\") public SSMStepDefinitions blockDynamoDB( int numHosts)", "class_method_signature": "SSMStepDefinitions.blockDynamoDB( int numHosts)", "testcase": false, "constructor": false}, {"identifier": "blockS3", "parameters": "(int numHosts)", "modifiers": "@When(\"^SSM block S3 on (\\\\d+) instances$\") public", "return": "SSMStepDefinitions", "signature": "SSMStepDefinitions blockS3(int numHosts)", "full_signature": "@When(\"^SSM block S3 on (\\\\d+) instances$\") public SSMStepDefinitions blockS3(int numHosts)", "class_method_signature": "SSMStepDefinitions.blockS3(int numHosts)", "testcase": false, "constructor": false}, {"identifier": "stopProcessOnHealthyInstances", "parameters": "(String serviceOrProcessType, String processName, int numHosts)", "modifiers": "@When(\"^SSM stop (service|process) \\\"([^\\\"]*)\\\" on (\\\\d+) instance$\") public", "return": "SSMStepDefinitions", "signature": "SSMStepDefinitions stopProcessOnHealthyInstances(String serviceOrProcessType, String processName, int numHosts)", "full_signature": "@When(\"^SSM stop (service|process) \\\"([^\\\"]*)\\\" on (\\\\d+) instance$\") public SSMStepDefinitions stopProcessOnHealthyInstances(String serviceOrProcessType, String processName, int numHosts)", "class_method_signature": "SSMStepDefinitions.stopProcessOnHealthyInstances(String serviceOrProcessType, String processName, int numHosts)", "testcase": false, "constructor": false}, {"identifier": "startProcessOnHealthyInstances", "parameters": "(String serviceOrProcessType, String processName, int numHosts)", "modifiers": "@When(\"^SSM start (service|process) \\\"([^\\\"]*)\\\" on (\\\\d+) instance$\") public", "return": "SSMStepDefinitions", "signature": "SSMStepDefinitions startProcessOnHealthyInstances(String serviceOrProcessType, String processName, int numHosts)", "full_signature": "@When(\"^SSM start (service|process) \\\"([^\\\"]*)\\\" on (\\\\d+) instance$\") public SSMStepDefinitions startProcessOnHealthyInstances(String serviceOrProcessType, String processName, int numHosts)", "class_method_signature": "SSMStepDefinitions.startProcessOnHealthyInstances(String serviceOrProcessType, String processName, int numHosts)", "testcase": false, "constructor": false}, {"identifier": "corruptNetwork", "parameters": "(int corruptPercent, int numHosts)", "modifiers": "@When(\"^SSM corrupt network (\\\\d+) percent on (\\\\d+) instances$\") public", "return": "SSMStepDefinitions", "signature": "SSMStepDefinitions corruptNetwork(int corruptPercent, int numHosts)", "full_signature": "@When(\"^SSM corrupt network (\\\\d+) percent on (\\\\d+) instances$\") public SSMStepDefinitions corruptNetwork(int corruptPercent, int numHosts)", "class_method_signature": "SSMStepDefinitions.corruptNetwork(int corruptPercent, int numHosts)", "testcase": false, "constructor": false}, {"identifier": "injectNetworkLatencyGivenInstance", "parameters": "(int lowerBound, int upperBound, String instanceID, String instanceIP)", "modifiers": "@Override public", "return": "void", "signature": "void injectNetworkLatencyGivenInstance(int lowerBound, int upperBound, String instanceID, String instanceIP)", "full_signature": "@Override public void injectNetworkLatencyGivenInstance(int lowerBound, int upperBound, String instanceID, String instanceIP)", "class_method_signature": "SSMStepDefinitions.injectNetworkLatencyGivenInstance(int lowerBound, int upperBound, String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "injectNetworkLatency", "parameters": "(int lowerBound, int upperBound, int numHosts)", "modifiers": "@When(\"^SSM inject network latency (\\\\d+) ms to (\\\\d+) ms on (\\\\d+) instances$\") public", "return": "SSMStepDefinitions", "signature": "SSMStepDefinitions injectNetworkLatency(int lowerBound, int upperBound, int numHosts)", "full_signature": "@When(\"^SSM inject network latency (\\\\d+) ms to (\\\\d+) ms on (\\\\d+) instances$\") public SSMStepDefinitions injectNetworkLatency(int lowerBound, int upperBound, int numHosts)", "class_method_signature": "SSMStepDefinitions.injectNetworkLatency(int lowerBound, int upperBound, int numHosts)", "testcase": false, "constructor": false}, {"identifier": "injectPacketLoss", "parameters": "(int percentLoss, int numHosts)", "modifiers": "@When(\"^SSM inject network packet loss (\\\\d+) percent on (\\\\d+) instances$\") public", "return": "SSMStepDefinitions", "signature": "SSMStepDefinitions injectPacketLoss(int percentLoss, int numHosts)", "full_signature": "@When(\"^SSM inject network packet loss (\\\\d+) percent on (\\\\d+) instances$\") public SSMStepDefinitions injectPacketLoss(int percentLoss, int numHosts)", "class_method_signature": "SSMStepDefinitions.injectPacketLoss(int percentLoss, int numHosts)", "testcase": false, "constructor": false}, {"identifier": "blockPortGivenInstance", "parameters": "(int portNum, String instanceID, String instanceIP)", "modifiers": "@Override public", "return": "void", "signature": "void blockPortGivenInstance(int portNum, String instanceID, String instanceIP)", "full_signature": "@Override public void blockPortGivenInstance(int portNum, String instanceID, String instanceIP)", "class_method_signature": "SSMStepDefinitions.blockPortGivenInstance(int portNum, String instanceID, String instanceIP)", "testcase": false, "constructor": false}, {"identifier": "blockPort", "parameters": "(int portNum, int numHosts)", "modifiers": "@When(\"^SSM block network port (\\\\d+) on (\\\\d+) instances$\") public", "return": "SSMStepDefinitions", "signature": "SSMStepDefinitions blockPort(int portNum, int numHosts)", "full_signature": "@When(\"^SSM block network port (\\\\d+) on (\\\\d+) instances$\") public SSMStepDefinitions blockPort(int portNum, int numHosts)", "class_method_signature": "SSMStepDefinitions.blockPort(int portNum, int numHosts)", "testcase": false, "constructor": false}, {"identifier": "blockOutboundPort", "parameters": "(int portNum, int numHosts)", "modifiers": "@When(\"^SSM block outbound network port (\\\\d+) on (\\\\d+) instances$\") public", "return": "SSMStepDefinitions", "signature": "SSMStepDefinitions blockOutboundPort(int portNum, int numHosts)", "full_signature": "@When(\"^SSM block outbound network port (\\\\d+) on (\\\\d+) instances$\") public SSMStepDefinitions blockOutboundPort(int portNum, int numHosts)", "class_method_signature": "SSMStepDefinitions.blockOutboundPort(int portNum, int numHosts)", "testcase": false, "constructor": false}, {"identifier": "executeCommand", "parameters": "(int numHosts, Command command, String... params)", "modifiers": "private", "return": "void", "signature": "void executeCommand(int numHosts, Command command, String... params)", "full_signature": "private void executeCommand(int numHosts, Command command, String... params)", "class_method_signature": "SSMStepDefinitions.executeCommand(int numHosts, Command command, String... params)", "testcase": false, "constructor": false}, {"identifier": "getInstancesForExecution", "parameters": "(int numHosts)", "modifiers": "private", "return": "List<EC2InstanceTO>", "signature": "List<EC2InstanceTO> getInstancesForExecution(int numHosts)", "full_signature": "private List<EC2InstanceTO> getInstancesForExecution(int numHosts)", "class_method_signature": "SSMStepDefinitions.getInstancesForExecution(int numHosts)", "testcase": false, "constructor": false}], "file": "cloudraider-core/src/main/java/com/intuit/cloudraider/cucumber/steps/SSMStepDefinitions.java"}, "focal_method": {"identifier": "blockDynamoDB", "parameters": "( int numHosts)", "modifiers": "@When(\"^SSM block DynamoDB on (\\\\d+) instances$\") public", "return": "SSMStepDefinitions", "body": "@When(\"^SSM block DynamoDB on (\\\\d+) instances$\")\n    public SSMStepDefinitions blockDynamoDB( int numHosts)\n    {\n        this.executeCommand(numHosts, Command.BLOCKDYNAMODB,null);\n        executionStateCache.setBlockDynamoDB(true);\n        return this;\n    }", "signature": "SSMStepDefinitions blockDynamoDB( int numHosts)", "full_signature": "@When(\"^SSM block DynamoDB on (\\\\d+) instances$\") public SSMStepDefinitions blockDynamoDB( int numHosts)", "class_method_signature": "SSMStepDefinitions.blockDynamoDB( int numHosts)", "testcase": false, "constructor": false, "invocations": ["executeCommand", "setBlockDynamoDB"]}, "repository": {"repo_id": 189453445, "url": "https://github.com/intuit/CloudRaider", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 16, "size": 730, "license": "licensed"}}