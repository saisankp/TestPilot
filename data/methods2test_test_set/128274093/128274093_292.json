{"test_class": {"identifier": "MergerBiFunctionTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/util/MergerBiFunctionTest.java"}, "test_case": {"identifier": "firstEmpty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void firstEmpty() throws Exception {\n        MergerBiFunction<Integer> merger = new MergerBiFunction<Integer>(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1.compareTo(o2);\n            }\n        });\n        List<Integer> list = merger.apply(Collections.<Integer>emptyList(), Arrays.asList(3, 5));\n\n        assertEquals(Arrays.asList(3, 5), list);\n    }", "signature": "void firstEmpty()", "full_signature": "@Test public void firstEmpty()", "class_method_signature": "MergerBiFunctionTest.firstEmpty()", "testcase": true, "constructor": false, "invocations": ["compareTo", "apply", "emptyList", "asList", "assertEquals", "asList"]}, "focal_class": {"identifier": "MergerBiFunction", "superclass": "", "interfaces": "implements BiFunction<List<T>, List<T>, List<T>>", "fields": [{"original_string": "final Comparator<? super T> comparator;", "modifier": "final", "type": "Comparator<? super T>", "declarator": "comparator", "var_name": "comparator"}], "methods": [{"identifier": "MergerBiFunction", "parameters": "(Comparator<? super T> comparator)", "modifiers": "public", "return": "", "signature": " MergerBiFunction(Comparator<? super T> comparator)", "full_signature": "public  MergerBiFunction(Comparator<? super T> comparator)", "class_method_signature": "MergerBiFunction.MergerBiFunction(Comparator<? super T> comparator)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(List<T> a, List<T> b)", "modifiers": "@Override public", "return": "List<T>", "signature": "List<T> apply(List<T> a, List<T> b)", "full_signature": "@Override public List<T> apply(List<T> a, List<T> b)", "class_method_signature": "MergerBiFunction.apply(List<T> a, List<T> b)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/util/MergerBiFunction.java"}, "focal_method": {"identifier": "apply", "parameters": "(List<T> a, List<T> b)", "modifiers": "@Override public", "return": "List<T>", "body": "@Override\n    public List<T> apply(List<T> a, List<T> b) throws Exception {\n        int n = a.size() + b.size();\n        if (n == 0) {\n            return new ArrayList<T>();\n        }\n        List<T> both = new ArrayList<T>(n);\n\n        Iterator<T> at = a.iterator();\n        Iterator<T> bt = b.iterator();\n\n        T s1 = at.hasNext() ? at.next() : null;\n        T s2 = bt.hasNext() ? bt.next() : null;\n\n        while (s1 != null && s2 != null) {\n            if (comparator.compare(s1, s2) < 0) { // s1 comes before s2\n                both.add(s1);\n                s1 = at.hasNext() ? at.next() : null;\n            } else {\n                both.add(s2);\n                s2 = bt.hasNext() ? bt.next() : null;\n            }\n        }\n\n        if (s1 != null) {\n            both.add(s1);\n            while (at.hasNext()) {\n                both.add(at.next());\n            }\n        } else {\n            both.add(s2);\n            while (bt.hasNext()) {\n                both.add(bt.next());\n            }\n        }\n\n        return both;\n    }", "signature": "List<T> apply(List<T> a, List<T> b)", "full_signature": "@Override public List<T> apply(List<T> a, List<T> b)", "class_method_signature": "MergerBiFunction.apply(List<T> a, List<T> b)", "testcase": false, "constructor": false, "invocations": ["size", "size", "iterator", "iterator", "hasNext", "next", "hasNext", "next", "compare", "add", "hasNext", "next", "add", "hasNext", "next", "add", "hasNext", "add", "next", "add", "hasNext", "add", "next"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}