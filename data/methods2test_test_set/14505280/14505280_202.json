{"test_class": {"identifier": "ThreadScopeTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String VALUE_FIRST = \"first\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_FIRST = \"first\"", "var_name": "VALUE_FIRST"}, {"original_string": "private static final String VALUE_OTHER = \"other\";", "modifier": "private static final", "type": "String", "declarator": "VALUE_OTHER = \"other\"", "var_name": "VALUE_OTHER"}, {"original_string": "private static final String BEAN_NAME = \"spring.ThreadedService\";", "modifier": "private static final", "type": "String", "declarator": "BEAN_NAME = \"spring.ThreadedService\"", "var_name": "BEAN_NAME"}, {"original_string": "@Autowired\n\tprivate ApplicationContext applicationContext;", "modifier": "@Autowired\n\tprivate", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "@Autowired\n\tprivate ThreadedService threadedService;", "modifier": "@Autowired\n\tprivate", "type": "ThreadedService", "declarator": "threadedService", "var_name": "threadedService"}], "file": "impl/src/test/java/org/geomajas/spring/ThreadScopeTest.java"}, "test_case": {"identifier": "testThreadScope", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testThreadScope() throws Exception {\n\t\t// verify that set/get works in normal case\n\t\tthreadedService.setValue(VALUE_FIRST);\n\t\tAssert.assertEquals(VALUE_FIRST, threadedService.getValue());\n\n\t\t// assure bean is not treated as prototype\n\t\tThreadedService ts = applicationContext.getBean(BEAN_NAME, ThreadedService.class);\n\t\tAssert.assertEquals(VALUE_FIRST, ts.getValue());\n\n\t\tThread thread = new Thread(new Runnable() {\n\n\t\t\tpublic void run() {\n\t\t\t\t// we are in the thread, now create the autowired class and test:\n\t\t\t\ttestInOtherThread();\n\t\t\t}\n\t\t});\n\t\tthread.start();\n\t\tthread.join();\n\n\t\t// now verify that we can clear the thread data\n\t\tAssert.assertEquals(VALUE_FIRST, threadedService.getValue());\n\t\t((ScopedObject)threadedService).removeFromScope();\n\t\tAssert.assertNull(threadedService.getValue());\n\t}", "signature": "void testThreadScope()", "full_signature": "@Test public void testThreadScope()", "class_method_signature": "ThreadScopeTest.testThreadScope()", "testcase": true, "constructor": false, "invocations": ["setValue", "assertEquals", "getValue", "getBean", "assertEquals", "getValue", "testInOtherThread", "start", "join", "assertEquals", "getValue", "removeFromScope", "assertNull", "getValue"]}, "focal_class": {"identifier": "ThreadScope", "superclass": "", "interfaces": "implements Scope, DisposableBean", "fields": [], "methods": [{"identifier": "ThreadScope", "parameters": "()", "modifiers": "public", "return": "", "signature": " ThreadScope()", "full_signature": "public  ThreadScope()", "class_method_signature": "ThreadScope.ThreadScope()", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "(String name, ObjectFactory<?> factory)", "modifiers": "public", "return": "Object", "signature": "Object get(String name, ObjectFactory<?> factory)", "full_signature": "public Object get(String name, ObjectFactory<?> factory)", "class_method_signature": "ThreadScope.get(String name, ObjectFactory<?> factory)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String name)", "modifiers": "public", "return": "Object", "signature": "Object remove(String name)", "full_signature": "public Object remove(String name)", "class_method_signature": "ThreadScope.remove(String name)", "testcase": false, "constructor": false}, {"identifier": "registerDestructionCallback", "parameters": "(String name, Runnable callback)", "modifiers": "public", "return": "void", "signature": "void registerDestructionCallback(String name, Runnable callback)", "full_signature": "public void registerDestructionCallback(String name, Runnable callback)", "class_method_signature": "ThreadScope.registerDestructionCallback(String name, Runnable callback)", "testcase": false, "constructor": false}, {"identifier": "resolveContextualObject", "parameters": "(String key)", "modifiers": "public", "return": "Object", "signature": "Object resolveContextualObject(String key)", "full_signature": "public Object resolveContextualObject(String key)", "class_method_signature": "ThreadScope.resolveContextualObject(String key)", "testcase": false, "constructor": false}, {"identifier": "getConversationId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getConversationId()", "full_signature": "public String getConversationId()", "class_method_signature": "ThreadScope.getConversationId()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void destroy()", "full_signature": "public void destroy()", "class_method_signature": "ThreadScope.destroy()", "testcase": false, "constructor": false}], "file": "impl/src/main/java/org/geomajas/spring/ThreadScope.java"}, "focal_method": {"identifier": "ThreadScope", "parameters": "()", "modifiers": "public", "return": "", "body": "public ThreadScope() {\n\t\tThreadScopeContextHolder.clear();\n\t}", "signature": " ThreadScope()", "full_signature": "public  ThreadScope()", "class_method_signature": "ThreadScope.ThreadScope()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}