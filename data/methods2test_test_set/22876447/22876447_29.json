{"test_class": {"identifier": "ExtractorModelParser_v2Test", "superclass": "extends BaseParserTest", "interfaces": "", "fields": [{"original_string": "final ExtractorModelParser_v2 parser = new ExtractorModelParser_v2();", "modifier": "final", "type": "ExtractorModelParser_v2", "declarator": "parser = new ExtractorModelParser_v2()", "var_name": "parser"}], "file": "link-move/src/test/java/com/nhl/link/move/extractor/parser/ExtractorModelParser_v2Test.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testParse() {\n\n\t\tElement xmlRoot = getXmlRoot(\"extractor_v2.xml\");\n\n\t\tlong t0 = System.currentTimeMillis() - 1;\n\n\t\tExtractorModelContainer container = parser.parse(\"alocation\", xmlRoot);\n\n\t\tlong t1 = System.currentTimeMillis() + 1;\n\n\t\tassertNotNull(container);\n\t\tassertEquals(\"alocation\", container.getLocation());\n\t\tassertEquals(\"atype\", container.getType());\n\t\tassertTrue(container.getConnectorIds().contains(\"aconnector\"));\n\n\t\tassertTrue(container.getLoadedOn() > t0);\n\t\tassertTrue(container.getLoadedOn() < t1);\n\n\t\tCollection<String> extractorNames = container.getExtractorNames();\n\t\tassertEquals(3, extractorNames.size());\n\t\tassertTrue(extractorNames.contains(\"e1\"));\n\t\tassertTrue(extractorNames.contains(\"e2\"));\n\t\tassertTrue(extractorNames.contains(ExtractorModel.DEFAULT_NAME));\n\n\t\tExtractorModel m1 = container.getExtractor(\"e1\");\n\n\t\tassertEquals(\"atype\", m1.getType());\n        assertTrue(m1.getConnectorIds().contains(\"aconnector\"));\n\n\t\tassertEquals(3, m1.getAttributes().length);\n\n\t\tassertEquals(0, m1.getAttributes()[0].getOrdinal());\n\t\tassertEquals(String.class, m1.getAttributes()[0].type());\n\t\tassertEquals(\"a1\", m1.getAttributes()[0].getSourceName());\n\t\tassertEquals(\"a_1\", m1.getAttributes()[0].getTargetPath());\n\n\t\tassertEquals(1, m1.getAttributes()[1].getOrdinal());\n\t\tassertEquals(Integer.class, m1.getAttributes()[1].type());\n\t\tassertEquals(\"a2\", m1.getAttributes()[1].getSourceName());\n\t\tassertEquals(\"a_2\", m1.getAttributes()[1].getTargetPath());\n\n\t\tassertEquals(2, m1.getAttributes()[2].getOrdinal());\n\t\tassertEquals(Integer.class, m1.getAttributes()[2].type());\n\t\tassertEquals(\"a2\", m1.getAttributes()[2].getSourceName());\n\t\tassertNull(m1.getAttributes()[2].getTargetPath());\n\n\t\tassertEquals(\"AB1\", m1.getPropertyValue(\"a.b\"));\n\t\tassertEquals(\"XY1\", m1.getPropertyValue(\"x.y\"));\n\t\t\n\t\tExtractorModel m2 = container.getExtractor(\"e2\");\n\t\tassertEquals(\"atype2\", m2.getType());\n        assertTrue(m2.getConnectorIds().contains(\"aconnector2\"));\n        assertNull(m2.getAttributes());\n\n\t\tassertEquals(\"AB2\", m2.getPropertyValue(\"a.b\"));\n\t\tassertEquals(\"XY2\", m2.getPropertyValue(\"x.y\"));\n\t\t\n\t\tExtractorModel m3 = container.getExtractor(ExtractorModel.DEFAULT_NAME);\n\t\tassertNotNull(m3);\n\t\tassertEquals(ExtractorModel.DEFAULT_NAME, m3.getName());\n\t}", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "ExtractorModelParser_v2Test.testParse()", "testcase": true, "constructor": false, "invocations": ["getXmlRoot", "currentTimeMillis", "parse", "currentTimeMillis", "assertNotNull", "assertEquals", "getLocation", "assertEquals", "getType", "assertTrue", "contains", "getConnectorIds", "assertTrue", "getLoadedOn", "assertTrue", "getLoadedOn", "getExtractorNames", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "getExtractor", "assertEquals", "getType", "assertTrue", "contains", "getConnectorIds", "assertEquals", "getAttributes", "assertEquals", "getOrdinal", "getAttributes", "assertEquals", "type", "getAttributes", "assertEquals", "getSourceName", "getAttributes", "assertEquals", "getTargetPath", "getAttributes", "assertEquals", "getOrdinal", "getAttributes", "assertEquals", "type", "getAttributes", "assertEquals", "getSourceName", "getAttributes", "assertEquals", "getTargetPath", "getAttributes", "assertEquals", "getOrdinal", "getAttributes", "assertEquals", "type", "getAttributes", "assertEquals", "getSourceName", "getAttributes", "assertNull", "getTargetPath", "getAttributes", "assertEquals", "getPropertyValue", "assertEquals", "getPropertyValue", "getExtractor", "assertEquals", "getType", "assertTrue", "contains", "getConnectorIds", "assertNull", "getAttributes", "assertEquals", "getPropertyValue", "assertEquals", "getPropertyValue", "getExtractor", "assertNotNull", "assertEquals", "getName"]}, "focal_class": {"identifier": "ExtractorModelParser_v2", "superclass": "", "interfaces": "implements DOMExtractorModelParser", "fields": [{"original_string": "public static final String NS = \"http://linkmove.io/xsd/extractor_config_2.xsd\";", "modifier": "public static final", "type": "String", "declarator": "NS = \"http://linkmove.io/xsd/extractor_config_2.xsd\"", "var_name": "NS"}], "methods": [{"identifier": "parse", "parameters": "(String location, Element xmlRoot)", "modifiers": "@Override public", "return": "ExtractorModelContainer", "signature": "ExtractorModelContainer parse(String location, Element xmlRoot)", "full_signature": "@Override public ExtractorModelContainer parse(String location, Element xmlRoot)", "class_method_signature": "ExtractorModelParser_v2.parse(String location, Element xmlRoot)", "testcase": false, "constructor": false}, {"identifier": "parseConfig", "parameters": "(MutableExtractorModelContainer container, Element configElement)", "modifiers": "protected", "return": "void", "signature": "void parseConfig(MutableExtractorModelContainer container, Element configElement)", "full_signature": "protected void parseConfig(MutableExtractorModelContainer container, Element configElement)", "class_method_signature": "ExtractorModelParser_v2.parseConfig(MutableExtractorModelContainer container, Element configElement)", "testcase": false, "constructor": false}, {"identifier": "parseContainer", "parameters": "(MutableExtractorModelContainer container, NodeList configChildren)", "modifiers": "protected", "return": "void", "signature": "void parseContainer(MutableExtractorModelContainer container, NodeList configChildren)", "full_signature": "protected void parseContainer(MutableExtractorModelContainer container, NodeList configChildren)", "class_method_signature": "ExtractorModelParser_v2.parseContainer(MutableExtractorModelContainer container, NodeList configChildren)", "testcase": false, "constructor": false}, {"identifier": "parseExtractor", "parameters": "(MutableExtractorModelContainer container, Element extractorElement)", "modifiers": "protected", "return": "void", "signature": "void parseExtractor(MutableExtractorModelContainer container, Element extractorElement)", "full_signature": "protected void parseExtractor(MutableExtractorModelContainer container, Element extractorElement)", "class_method_signature": "ExtractorModelParser_v2.parseExtractor(MutableExtractorModelContainer container, Element extractorElement)", "testcase": false, "constructor": false}, {"identifier": "processConnectorIds", "parameters": "(Element connectorIds, MutableExtractorModel extractor)", "modifiers": "private", "return": "void", "signature": "void processConnectorIds(Element connectorIds, MutableExtractorModel extractor)", "full_signature": "private void processConnectorIds(Element connectorIds, MutableExtractorModel extractor)", "class_method_signature": "ExtractorModelParser_v2.processConnectorIds(Element connectorIds, MutableExtractorModel extractor)", "testcase": false, "constructor": false}, {"identifier": "processConnectorIds", "parameters": "(Element connectorIds, MutableExtractorModelContainer container)", "modifiers": "private", "return": "void", "signature": "void processConnectorIds(Element connectorIds, MutableExtractorModelContainer container)", "full_signature": "private void processConnectorIds(Element connectorIds, MutableExtractorModelContainer container)", "class_method_signature": "ExtractorModelParser_v2.processConnectorIds(Element connectorIds, MutableExtractorModelContainer container)", "testcase": false, "constructor": false}, {"identifier": "processAttributes", "parameters": "(Element attributesNode, MutableExtractorModel extractor)", "modifiers": "protected", "return": "void", "signature": "void processAttributes(Element attributesNode, MutableExtractorModel extractor)", "full_signature": "protected void processAttributes(Element attributesNode, MutableExtractorModel extractor)", "class_method_signature": "ExtractorModelParser_v2.processAttributes(Element attributesNode, MutableExtractorModel extractor)", "testcase": false, "constructor": false}, {"identifier": "processProperties", "parameters": "(Element propertiesNode, MutableExtractorModel extractor)", "modifiers": "protected", "return": "void", "signature": "void processProperties(Element propertiesNode, MutableExtractorModel extractor)", "full_signature": "protected void processProperties(Element propertiesNode, MutableExtractorModel extractor)", "class_method_signature": "ExtractorModelParser_v2.processProperties(Element propertiesNode, MutableExtractorModel extractor)", "testcase": false, "constructor": false}, {"identifier": "processAttribute", "parameters": "(Element attributeNode, List<RowAttribute> attributes)", "modifiers": "protected", "return": "void", "signature": "void processAttribute(Element attributeNode, List<RowAttribute> attributes)", "full_signature": "protected void processAttribute(Element attributeNode, List<RowAttribute> attributes)", "class_method_signature": "ExtractorModelParser_v2.processAttribute(Element attributeNode, List<RowAttribute> attributes)", "testcase": false, "constructor": false}], "file": "link-move/src/main/java/com/nhl/link/move/extractor/parser/ExtractorModelParser_v2.java"}, "focal_method": {"identifier": "parse", "parameters": "(String location, Element xmlRoot)", "modifiers": "@Override public", "return": "ExtractorModelContainer", "body": "@Override\n    public ExtractorModelContainer parse(String location, Element xmlRoot) {\n\n        MutableExtractorModelContainer extractors = new MutableExtractorModelContainer(location);\n\n        try {\n            parseConfig(extractors, xmlRoot);\n        } catch (DOMException e) {\n            throw new LmRuntimeException(\"Error merging config from DOM\", e);\n        }\n\n        extractors.setLoadedOn(System.currentTimeMillis());\n        return extractors;\n    }", "signature": "ExtractorModelContainer parse(String location, Element xmlRoot)", "full_signature": "@Override public ExtractorModelContainer parse(String location, Element xmlRoot)", "class_method_signature": "ExtractorModelParser_v2.parse(String location, Element xmlRoot)", "testcase": false, "constructor": false, "invocations": ["parseConfig", "setLoadedOn", "currentTimeMillis"]}, "repository": {"repo_id": 22876447, "url": "https://github.com/nhl/link-move", "stars": 25, "created": "8/12/2014 12:27:10 PM +00:00", "updates": "2019-12-01T17:30:35+00:00", "fork": "False", "license": "licensed"}}