{"test_class": {"identifier": "GrpcStreamSubscriptionTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/transport/src/test/java/hera/client/GrpcStreamSubscriptionTest.java"}, "test_case": {"identifier": "testUnsubscribe", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testUnsubscribe() {\n    final io.grpc.Context.CancellableContext context = io.grpc.Context.current().withCancellation();\n    context.run(new Runnable() {\n      @Override\n      public void run() {\n      }\n    });\n    final GrpcStreamSubscription<Object> subscription = new GrpcStreamSubscription<>(context);\n    subscription.unsubscribe();\n    assertTrue(subscription.isUnsubscribed());\n  }", "signature": "void testUnsubscribe()", "full_signature": "@Test public void testUnsubscribe()", "class_method_signature": "GrpcStreamSubscriptionTest.testUnsubscribe()", "testcase": true, "constructor": false, "invocations": ["withCancellation", "current", "run", "unsubscribe", "assertTrue", "isUnsubscribed"]}, "focal_class": {"identifier": "GrpcStreamSubscription", "superclass": "", "interfaces": "implements hera.api.model.Subscription<T>", "fields": [{"original_string": "protected final transient Logger logger = getLogger(getClass());", "modifier": "protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}, {"original_string": "protected final Object lock = new Object();", "modifier": "protected final", "type": "Object", "declarator": "lock = new Object()", "var_name": "lock"}, {"original_string": "@NonNull\n  protected final io.grpc.Context.CancellableContext context;", "modifier": "@NonNull\n  protected final", "type": "io.grpc.Context.CancellableContext", "declarator": "context", "var_name": "context"}], "methods": [{"identifier": "unsubscribe", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void unsubscribe()", "full_signature": "@Override public void unsubscribe()", "class_method_signature": "GrpcStreamSubscription.unsubscribe()", "testcase": false, "constructor": false}, {"identifier": "isUnsubscribed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isUnsubscribed()", "full_signature": "@Override public boolean isUnsubscribed()", "class_method_signature": "GrpcStreamSubscription.isUnsubscribed()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "GrpcStreamSubscription.toString()", "testcase": false, "constructor": false}], "file": "core/transport/src/main/java/hera/client/GrpcStreamSubscription.java"}, "focal_method": {"identifier": "unsubscribe", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void unsubscribe() {\n    if (!context.isCancelled()) {\n      synchronized (lock) {\n        if (!context.isCancelled()) {\n          logger.debug(\"Unsubscribe subscription\");\n          context.close();\n        } else {\n          logger.debug(\"Subscription is already cancelled\");\n        }\n      }\n    } else {\n      logger.debug(\"Subscription is already cancelled\");\n    }\n  }", "signature": "void unsubscribe()", "full_signature": "@Override public void unsubscribe()", "class_method_signature": "GrpcStreamSubscription.unsubscribe()", "testcase": false, "constructor": false, "invocations": ["isCancelled", "isCancelled", "debug", "close", "debug", "debug"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}