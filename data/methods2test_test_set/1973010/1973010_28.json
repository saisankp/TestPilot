{"test_class": {"identifier": "KeyOnlyFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "culvert-main/src/test/java/com/bah/culvert/constraints/filter/KeyOnlyFilterTest.java"}, "test_case": {"identifier": "testWithColumnsSelected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testWithColumnsSelected() {\n\n    TableAdapter table = new InMemoryTable();\n    List<CKeyValue> values = new ArrayList<CKeyValue>();\n    values.add(new CKeyValue(new byte[] { 1 }));\n    values.add(new CKeyValue(new byte[] { 2 }, new byte[] { 3 },\n        new byte[] { 4 }));\n    values.add(new CKeyValue(new byte[] { 3 }, new byte[] { 4 },\n        new byte[] { 5 }, 0, new byte[] { 6 }));\n\n    table.put(new Put(values));\n\n    KeyOnlyFilter rows = new KeyOnlyFilter(table, new CColumn(new byte[] { 3 }));\n    Iterator<Result> results = rows.getResultIterator();\n    int count = 0;\n    while (results.hasNext()) {\n      count++;\n      results.next();\n    }\n    assertEquals(1, count);\n\n    rows = new KeyOnlyFilter(table, new CColumn(new byte[] { 3 }), new CColumn(\n        new byte[] { 4 }));\n    results = rows.getResultIterator();\n    count = 0;\n    while (results.hasNext()) {\n      count++;\n      results.next();\n    }\n    assertEquals(2, count);\n  }", "signature": "void testWithColumnsSelected()", "full_signature": "@Test public void testWithColumnsSelected()", "class_method_signature": "KeyOnlyFilterTest.testWithColumnsSelected()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "put", "getResultIterator", "hasNext", "next", "assertEquals", "getResultIterator", "hasNext", "next", "assertEquals"]}, "focal_class": {"identifier": "KeyOnlyFilter", "superclass": "extends ResultFilter", "interfaces": "", "fields": [], "methods": [{"identifier": "KeyOnlyFilter", "parameters": "()", "modifiers": "public", "return": "", "signature": " KeyOnlyFilter()", "full_signature": "public  KeyOnlyFilter()", "class_method_signature": "KeyOnlyFilter.KeyOnlyFilter()", "testcase": false, "constructor": true}, {"identifier": "KeyOnlyFilter", "parameters": "(Constraint subconstraint, CRange range,\n      CColumn... column)", "modifiers": "public", "return": "", "signature": " KeyOnlyFilter(Constraint subconstraint, CRange range,\n      CColumn... column)", "full_signature": "public  KeyOnlyFilter(Constraint subconstraint, CRange range,\n      CColumn... column)", "class_method_signature": "KeyOnlyFilter.KeyOnlyFilter(Constraint subconstraint, CRange range,\n      CColumn... column)", "testcase": false, "constructor": true}, {"identifier": "KeyOnlyFilter", "parameters": "(TableAdapter primaryTable, CRange range,\n      CColumn... columns)", "modifiers": "public", "return": "", "signature": " KeyOnlyFilter(TableAdapter primaryTable, CRange range,\n      CColumn... columns)", "full_signature": "public  KeyOnlyFilter(TableAdapter primaryTable, CRange range,\n      CColumn... columns)", "class_method_signature": "KeyOnlyFilter.KeyOnlyFilter(TableAdapter primaryTable, CRange range,\n      CColumn... columns)", "testcase": false, "constructor": true}, {"identifier": "KeyOnlyFilter", "parameters": "(Constraint subConstraint, CRange range)", "modifiers": "public", "return": "", "signature": " KeyOnlyFilter(Constraint subConstraint, CRange range)", "full_signature": "public  KeyOnlyFilter(Constraint subConstraint, CRange range)", "class_method_signature": "KeyOnlyFilter.KeyOnlyFilter(Constraint subConstraint, CRange range)", "testcase": false, "constructor": true}, {"identifier": "KeyOnlyFilter", "parameters": "(Constraint subConstraint, CColumn... columns)", "modifiers": "public", "return": "", "signature": " KeyOnlyFilter(Constraint subConstraint, CColumn... columns)", "full_signature": "public  KeyOnlyFilter(Constraint subConstraint, CColumn... columns)", "class_method_signature": "KeyOnlyFilter.KeyOnlyFilter(Constraint subConstraint, CColumn... columns)", "testcase": false, "constructor": true}, {"identifier": "KeyOnlyFilter", "parameters": "(TableAdapter primaryTable, CColumn... columns)", "modifiers": "public", "return": "", "signature": " KeyOnlyFilter(TableAdapter primaryTable, CColumn... columns)", "full_signature": "public  KeyOnlyFilter(TableAdapter primaryTable, CColumn... columns)", "class_method_signature": "KeyOnlyFilter.KeyOnlyFilter(TableAdapter primaryTable, CColumn... columns)", "testcase": false, "constructor": true}, {"identifier": "KeyOnlyFilter", "parameters": "(TableAdapter primaryTable, CRange range)", "modifiers": "public", "return": "", "signature": " KeyOnlyFilter(TableAdapter primaryTable, CRange range)", "full_signature": "public  KeyOnlyFilter(TableAdapter primaryTable, CRange range)", "class_method_signature": "KeyOnlyFilter.KeyOnlyFilter(TableAdapter primaryTable, CRange range)", "testcase": false, "constructor": true}, {"identifier": "KeyOnlyFilter", "parameters": "(TableAdapter primaryTable)", "modifiers": "public", "return": "", "signature": " KeyOnlyFilter(TableAdapter primaryTable)", "full_signature": "public  KeyOnlyFilter(TableAdapter primaryTable)", "class_method_signature": "KeyOnlyFilter.KeyOnlyFilter(TableAdapter primaryTable)", "testcase": false, "constructor": true}, {"identifier": "getResultIterator", "parameters": "()", "modifiers": "@Override public", "return": "SeekingCurrentIterator", "signature": "SeekingCurrentIterator getResultIterator()", "full_signature": "@Override public SeekingCurrentIterator getResultIterator()", "class_method_signature": "KeyOnlyFilter.getResultIterator()", "testcase": false, "constructor": false}], "file": "culvert-main/src/main/java/com/bah/culvert/constraints/filter/KeyOnlyFilter.java"}, "focal_method": {"identifier": "getResultIterator", "parameters": "()", "modifiers": "@Override public", "return": "SeekingCurrentIterator", "body": "@Override\n  public SeekingCurrentIterator getResultIterator() {\n    SeekingCurrentIterator iter = super.getResultIterator();\n    return new RowIdIterator(iter);\n  }", "signature": "SeekingCurrentIterator getResultIterator()", "full_signature": "@Override public SeekingCurrentIterator getResultIterator()", "class_method_signature": "KeyOnlyFilter.getResultIterator()", "testcase": false, "constructor": false, "invocations": ["getResultIterator"]}, "repository": {"repo_id": 1973010, "url": "https://github.com/booz-allen-hamilton/culvert", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 43, "size": 373, "license": "licensed"}}