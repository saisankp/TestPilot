{"test_class": {"identifier": "SegmentProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AsListConsumer consumer;", "modifier": "private", "type": "AsListConsumer", "declarator": "consumer", "var_name": "consumer"}], "file": "meta/src/test/java/org/jboss/hal/meta/description/SegmentProcessorTest.java"}, "test_case": {"identifier": "host2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void host2() throws Exception {\n        Fixture fixture = new Fixture.Builder(\"host2\")\n                .segments(\"host\", \"master\", \"subsystem\", \"jmx\")\n                .expected(\"host\", \"*\", \"subsystem\", \"jmx\")\n                .build();\n        SegmentProcessor.process(fixture.segments, consumer);\n        assertFixture(fixture, consumer.result);\n    }", "signature": "void host2()", "full_signature": "@Test public void host2()", "class_method_signature": "SegmentProcessorTest.host2()", "testcase": true, "constructor": false, "invocations": ["build", "expected", "segments", "process", "assertFixture"]}, "focal_class": {"identifier": "SegmentProcessor", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "process", "parameters": "(List<String[]> segments, Consumer<String[]> consumer)", "modifiers": "static", "return": "void", "signature": "void process(List<String[]> segments, Consumer<String[]> consumer)", "full_signature": "static void process(List<String[]> segments, Consumer<String[]> consumer)", "class_method_signature": "SegmentProcessor.process(List<String[]> segments, Consumer<String[]> consumer)", "testcase": false, "constructor": false}, {"identifier": "SegmentProcessor", "parameters": "()", "modifiers": "private", "return": "", "signature": " SegmentProcessor()", "full_signature": "private  SegmentProcessor()", "class_method_signature": "SegmentProcessor.SegmentProcessor()", "testcase": false, "constructor": true}], "file": "meta/src/main/java/org/jboss/hal/meta/description/SegmentProcessor.java"}, "focal_method": {"identifier": "process", "parameters": "(List<String[]> segments, Consumer<String[]> consumer)", "modifiers": "static", "return": "void", "body": "static void process(List<String[]> segments, Consumer<String[]> consumer) {\n        if (segments != null) {\n            int index = 0;\n            int length = segments.size();\n            for (String[] segment : segments) {\n                String key = segment[0];\n                String value = segment[1];\n                if (key != null && value != null) {\n                    switch (key) {\n                        case HOST:\n                            if (length > 1 && index == 0) {\n                                value = \"*\";\n                            }\n                            break;\n\n                        case PROFILE:\n                        case SERVER_GROUP:\n                            if (index == 0) {\n                                value = \"*\";\n                            }\n                            break;\n\n                        case SERVER:\n                        case SERVER_CONFIG:\n                            if (index == 1) {\n                                value = \"*\";\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n                }\n                consumer.accept(new String[]{key, value});\n                index++;\n            }\n        }\n    }", "signature": "void process(List<String[]> segments, Consumer<String[]> consumer)", "full_signature": "static void process(List<String[]> segments, Consumer<String[]> consumer)", "class_method_signature": "SegmentProcessor.process(List<String[]> segments, Consumer<String[]> consumer)", "testcase": false, "constructor": false, "invocations": ["size", "accept"]}, "repository": {"repo_id": 38317187, "url": "https://github.com/hal/console", "stars": 34, "created": "6/30/2015 3:26:19 PM +00:00", "updates": "2020-01-26T16:25:43+00:00", "fork": "False", "license": "licensed"}}