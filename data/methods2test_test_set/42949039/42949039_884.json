{"test_class": {"identifier": "S3DaoImplTest", "superclass": "extends AbstractDaoTest", "interfaces": "", "fields": [{"original_string": "private static final String OTHER_EXCEPTION_MESSAGE = \"OtherExceptionMessage\";", "modifier": "private static final", "type": "String", "declarator": "OTHER_EXCEPTION_MESSAGE = \"OtherExceptionMessage\"", "var_name": "OTHER_EXCEPTION_MESSAGE"}, {"original_string": "private static final String RESTORE_ALREADY_IN_PROGRESS_EXCEPTION_MESSAGE = \"RestoreAlreadyInProgress\";", "modifier": "private static final", "type": "String", "declarator": "RESTORE_ALREADY_IN_PROGRESS_EXCEPTION_MESSAGE = \"RestoreAlreadyInProgress\"", "var_name": "RESTORE_ALREADY_IN_PROGRESS_EXCEPTION_MESSAGE"}, {"original_string": "private static final String TEST_FILE = \"UT_S3DaoImplTest_Test_File\";", "modifier": "private static final", "type": "String", "declarator": "TEST_FILE = \"UT_S3DaoImplTest_Test_File\"", "var_name": "TEST_FILE"}, {"original_string": "@Mock\n    private AwsHelper awsHelper;", "modifier": "@Mock\n    private", "type": "AwsHelper", "declarator": "awsHelper", "var_name": "awsHelper"}, {"original_string": "@Mock\n    private JavaPropertiesHelper javaPropertiesHelper;", "modifier": "@Mock\n    private", "type": "JavaPropertiesHelper", "declarator": "javaPropertiesHelper", "var_name": "javaPropertiesHelper"}, {"original_string": "@Mock\n    private RetryPolicyFactory retryPolicyFactory;", "modifier": "@Mock\n    private", "type": "RetryPolicyFactory", "declarator": "retryPolicyFactory", "var_name": "retryPolicyFactory"}, {"original_string": "@InjectMocks\n    private S3DaoImpl s3DaoImpl;", "modifier": "@InjectMocks\n    private", "type": "S3DaoImpl", "declarator": "s3DaoImpl", "var_name": "s3DaoImpl"}, {"original_string": "@Mock\n    private S3Operations s3Operations;", "modifier": "@Mock\n    private", "type": "S3Operations", "declarator": "s3Operations", "var_name": "s3Operations"}], "file": "herd-code/herd-dao/src/test/java/org/finra/herd/dao/impl/S3DaoImplTest.java"}, "test_case": {"identifier": "testTagVersions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTagVersions()\n    {\n        runTagVersionsTest();\n    }", "signature": "void testTagVersions()", "full_signature": "@Test public void testTagVersions()", "class_method_signature": "S3DaoImplTest.testTagVersions()", "testcase": true, "constructor": false, "invocations": ["runTagVersionsTest"]}, "focal_class": {"identifier": "S3DaoImpl", "superclass": "", "interfaces": "implements S3Dao", "fields": [{"original_string": "private static final long DEFAULT_SLEEP_INTERVAL_MILLIS = 100;", "modifier": "private static final", "type": "long", "declarator": "DEFAULT_SLEEP_INTERVAL_MILLIS = 100", "var_name": "DEFAULT_SLEEP_INTERVAL_MILLIS"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(S3DaoImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(S3DaoImpl.class)", "var_name": "LOGGER"}, {"original_string": "private static final int MAX_KEYS_PER_DELETE_REQUEST = 1000;", "modifier": "private static final", "type": "int", "declarator": "MAX_KEYS_PER_DELETE_REQUEST = 1000", "var_name": "MAX_KEYS_PER_DELETE_REQUEST"}, {"original_string": "@Autowired\n    private AwsHelper awsHelper;", "modifier": "@Autowired\n    private", "type": "AwsHelper", "declarator": "awsHelper", "var_name": "awsHelper"}, {"original_string": "@Autowired\n    private JavaPropertiesHelper javaPropertiesHelper;", "modifier": "@Autowired\n    private", "type": "JavaPropertiesHelper", "declarator": "javaPropertiesHelper", "var_name": "javaPropertiesHelper"}, {"original_string": "@Autowired\n    private RetryPolicyFactory retryPolicyFactory;", "modifier": "@Autowired\n    private", "type": "RetryPolicyFactory", "declarator": "retryPolicyFactory", "var_name": "retryPolicyFactory"}, {"original_string": "@Autowired\n    private S3Operations s3Operations;", "modifier": "@Autowired\n    private", "type": "S3Operations", "declarator": "s3Operations", "var_name": "s3Operations"}, {"original_string": "private long sleepIntervalsMillis = DEFAULT_SLEEP_INTERVAL_MILLIS;", "modifier": "private", "type": "long", "declarator": "sleepIntervalsMillis = DEFAULT_SLEEP_INTERVAL_MILLIS", "var_name": "sleepIntervalsMillis"}], "methods": [{"identifier": "abortMultipartUploads", "parameters": "(S3FileTransferRequestParamsDto params, Date thresholdDate)", "modifiers": "@Override public", "return": "int", "signature": "int abortMultipartUploads(S3FileTransferRequestParamsDto params, Date thresholdDate)", "full_signature": "@Override public int abortMultipartUploads(S3FileTransferRequestParamsDto params, Date thresholdDate)", "class_method_signature": "S3DaoImpl.abortMultipartUploads(S3FileTransferRequestParamsDto params, Date thresholdDate)", "testcase": false, "constructor": false}, {"identifier": "copyFile", "parameters": "(final S3FileCopyRequestParamsDto params)", "modifiers": "@Override public", "return": "S3FileTransferResultsDto", "signature": "S3FileTransferResultsDto copyFile(final S3FileCopyRequestParamsDto params)", "full_signature": "@Override public S3FileTransferResultsDto copyFile(final S3FileCopyRequestParamsDto params)", "class_method_signature": "S3DaoImpl.copyFile(final S3FileCopyRequestParamsDto params)", "testcase": false, "constructor": false}, {"identifier": "createDirectory", "parameters": "(final S3FileTransferRequestParamsDto params)", "modifiers": "@Override public", "return": "void", "signature": "void createDirectory(final S3FileTransferRequestParamsDto params)", "full_signature": "@Override public void createDirectory(final S3FileTransferRequestParamsDto params)", "class_method_signature": "S3DaoImpl.createDirectory(final S3FileTransferRequestParamsDto params)", "testcase": false, "constructor": false}, {"identifier": "createEmptyDirectory", "parameters": "(final S3FileTransferRequestParamsDto params)", "modifiers": "@Override public", "return": "void", "signature": "void createEmptyDirectory(final S3FileTransferRequestParamsDto params)", "full_signature": "@Override public void createEmptyDirectory(final S3FileTransferRequestParamsDto params)", "class_method_signature": "S3DaoImpl.createEmptyDirectory(final S3FileTransferRequestParamsDto params)", "testcase": false, "constructor": false}, {"identifier": "deleteDirectory", "parameters": "(final S3FileTransferRequestParamsDto params)", "modifiers": "@Override public", "return": "void", "signature": "void deleteDirectory(final S3FileTransferRequestParamsDto params)", "full_signature": "@Override public void deleteDirectory(final S3FileTransferRequestParamsDto params)", "class_method_signature": "S3DaoImpl.deleteDirectory(final S3FileTransferRequestParamsDto params)", "testcase": false, "constructor": false}, {"identifier": "deleteFileList", "parameters": "(final S3FileTransferRequestParamsDto params)", "modifiers": "@Override public", "return": "void", "signature": "void deleteFileList(final S3FileTransferRequestParamsDto params)", "full_signature": "@Override public void deleteFileList(final S3FileTransferRequestParamsDto params)", "class_method_signature": "S3DaoImpl.deleteFileList(final S3FileTransferRequestParamsDto params)", "testcase": false, "constructor": false}, {"identifier": "downloadDirectory", "parameters": "(final S3FileTransferRequestParamsDto params)", "modifiers": "@Override public", "return": "S3FileTransferResultsDto", "signature": "S3FileTransferResultsDto downloadDirectory(final S3FileTransferRequestParamsDto params)", "full_signature": "@Override public S3FileTransferResultsDto downloadDirectory(final S3FileTransferRequestParamsDto params)", "class_method_signature": "S3DaoImpl.downloadDirectory(final S3FileTransferRequestParamsDto params)", "testcase": false, "constructor": false}, {"identifier": "downloadFile", "parameters": "(final S3FileTransferRequestParamsDto params)", "modifiers": "@Override public", "return": "S3FileTransferResultsDto", "signature": "S3FileTransferResultsDto downloadFile(final S3FileTransferRequestParamsDto params)", "full_signature": "@Override public S3FileTransferResultsDto downloadFile(final S3FileTransferRequestParamsDto params)", "class_method_signature": "S3DaoImpl.downloadFile(final S3FileTransferRequestParamsDto params)", "testcase": false, "constructor": false}, {"identifier": "generateGetObjectPresignedUrl", "parameters": "(String bucketName, String key, Date expiration, S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto)", "modifiers": "@Override public", "return": "String", "signature": "String generateGetObjectPresignedUrl(String bucketName, String key, Date expiration, S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto)", "full_signature": "@Override public String generateGetObjectPresignedUrl(String bucketName, String key, Date expiration, S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto)", "class_method_signature": "S3DaoImpl.generateGetObjectPresignedUrl(String bucketName, String key, Date expiration, S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto)", "testcase": false, "constructor": false}, {"identifier": "getObjectMetadata", "parameters": "(final S3FileTransferRequestParamsDto params)", "modifiers": "@Override public", "return": "ObjectMetadata", "signature": "ObjectMetadata getObjectMetadata(final S3FileTransferRequestParamsDto params)", "full_signature": "@Override public ObjectMetadata getObjectMetadata(final S3FileTransferRequestParamsDto params)", "class_method_signature": "S3DaoImpl.getObjectMetadata(final S3FileTransferRequestParamsDto params)", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "(String bucketName, String key, S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto)", "modifiers": "@Override public", "return": "Properties", "signature": "Properties getProperties(String bucketName, String key, S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto)", "full_signature": "@Override public Properties getProperties(String bucketName, String key, S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto)", "class_method_signature": "S3DaoImpl.getProperties(String bucketName, String key, S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto)", "testcase": false, "constructor": false}, {"identifier": "listDirectory", "parameters": "(final S3FileTransferRequestParamsDto params)", "modifiers": "@Override public", "return": "List<S3ObjectSummary>", "signature": "List<S3ObjectSummary> listDirectory(final S3FileTransferRequestParamsDto params)", "full_signature": "@Override public List<S3ObjectSummary> listDirectory(final S3FileTransferRequestParamsDto params)", "class_method_signature": "S3DaoImpl.listDirectory(final S3FileTransferRequestParamsDto params)", "testcase": false, "constructor": false}, {"identifier": "listDirectory", "parameters": "(final S3FileTransferRequestParamsDto params, boolean ignoreZeroByteDirectoryMarkers)", "modifiers": "@Override public", "return": "List<S3ObjectSummary>", "signature": "List<S3ObjectSummary> listDirectory(final S3FileTransferRequestParamsDto params, boolean ignoreZeroByteDirectoryMarkers)", "full_signature": "@Override public List<S3ObjectSummary> listDirectory(final S3FileTransferRequestParamsDto params, boolean ignoreZeroByteDirectoryMarkers)", "class_method_signature": "S3DaoImpl.listDirectory(final S3FileTransferRequestParamsDto params, boolean ignoreZeroByteDirectoryMarkers)", "testcase": false, "constructor": false}, {"identifier": "listVersions", "parameters": "(final S3FileTransferRequestParamsDto params)", "modifiers": "@Override public", "return": "List<S3VersionSummary>", "signature": "List<S3VersionSummary> listVersions(final S3FileTransferRequestParamsDto params)", "full_signature": "@Override public List<S3VersionSummary> listVersions(final S3FileTransferRequestParamsDto params)", "class_method_signature": "S3DaoImpl.listVersions(final S3FileTransferRequestParamsDto params)", "testcase": false, "constructor": false}, {"identifier": "restoreObjects", "parameters": "(final S3FileTransferRequestParamsDto params, int expirationInDays, String archiveRetrievalOption)", "modifiers": "@Override public", "return": "void", "signature": "void restoreObjects(final S3FileTransferRequestParamsDto params, int expirationInDays, String archiveRetrievalOption)", "full_signature": "@Override public void restoreObjects(final S3FileTransferRequestParamsDto params, int expirationInDays, String archiveRetrievalOption)", "class_method_signature": "S3DaoImpl.restoreObjects(final S3FileTransferRequestParamsDto params, int expirationInDays, String archiveRetrievalOption)", "testcase": false, "constructor": false}, {"identifier": "s3FileExists", "parameters": "(S3FileTransferRequestParamsDto params)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean s3FileExists(S3FileTransferRequestParamsDto params)", "full_signature": "@Override public boolean s3FileExists(S3FileTransferRequestParamsDto params)", "class_method_signature": "S3DaoImpl.s3FileExists(S3FileTransferRequestParamsDto params)", "testcase": false, "constructor": false}, {"identifier": "tagObjects", "parameters": "(final S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto, final S3FileTransferRequestParamsDto s3ObjectTaggerParamsDto,\n        final List<S3ObjectSummary> s3ObjectSummaries, final Tag tag)", "modifiers": "@Override public", "return": "void", "signature": "void tagObjects(final S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto, final S3FileTransferRequestParamsDto s3ObjectTaggerParamsDto,\n        final List<S3ObjectSummary> s3ObjectSummaries, final Tag tag)", "full_signature": "@Override public void tagObjects(final S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto, final S3FileTransferRequestParamsDto s3ObjectTaggerParamsDto,\n        final List<S3ObjectSummary> s3ObjectSummaries, final Tag tag)", "class_method_signature": "S3DaoImpl.tagObjects(final S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto, final S3FileTransferRequestParamsDto s3ObjectTaggerParamsDto,\n        final List<S3ObjectSummary> s3ObjectSummaries, final Tag tag)", "testcase": false, "constructor": false}, {"identifier": "tagVersions", "parameters": "(final S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto, final S3FileTransferRequestParamsDto s3ObjectTaggerParamsDto,\n        final List<S3VersionSummary> s3VersionSummaries, final Tag tag)", "modifiers": "@Override public", "return": "void", "signature": "void tagVersions(final S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto, final S3FileTransferRequestParamsDto s3ObjectTaggerParamsDto,\n        final List<S3VersionSummary> s3VersionSummaries, final Tag tag)", "full_signature": "@Override public void tagVersions(final S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto, final S3FileTransferRequestParamsDto s3ObjectTaggerParamsDto,\n        final List<S3VersionSummary> s3VersionSummaries, final Tag tag)", "class_method_signature": "S3DaoImpl.tagVersions(final S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto, final S3FileTransferRequestParamsDto s3ObjectTaggerParamsDto,\n        final List<S3VersionSummary> s3VersionSummaries, final Tag tag)", "testcase": false, "constructor": false}, {"identifier": "uploadDirectory", "parameters": "(final S3FileTransferRequestParamsDto params)", "modifiers": "@Override public", "return": "S3FileTransferResultsDto", "signature": "S3FileTransferResultsDto uploadDirectory(final S3FileTransferRequestParamsDto params)", "full_signature": "@Override public S3FileTransferResultsDto uploadDirectory(final S3FileTransferRequestParamsDto params)", "class_method_signature": "S3DaoImpl.uploadDirectory(final S3FileTransferRequestParamsDto params)", "testcase": false, "constructor": false}, {"identifier": "uploadFile", "parameters": "(final S3FileTransferRequestParamsDto params)", "modifiers": "@Override public", "return": "S3FileTransferResultsDto", "signature": "S3FileTransferResultsDto uploadFile(final S3FileTransferRequestParamsDto params)", "full_signature": "@Override public S3FileTransferResultsDto uploadFile(final S3FileTransferRequestParamsDto params)", "class_method_signature": "S3DaoImpl.uploadFile(final S3FileTransferRequestParamsDto params)", "testcase": false, "constructor": false}, {"identifier": "uploadFileList", "parameters": "(final S3FileTransferRequestParamsDto params)", "modifiers": "@Override public", "return": "S3FileTransferResultsDto", "signature": "S3FileTransferResultsDto uploadFileList(final S3FileTransferRequestParamsDto params)", "full_signature": "@Override public S3FileTransferResultsDto uploadFileList(final S3FileTransferRequestParamsDto params)", "class_method_signature": "S3DaoImpl.uploadFileList(final S3FileTransferRequestParamsDto params)", "testcase": false, "constructor": false}, {"identifier": "validateGlacierS3FilesRestored", "parameters": "(S3FileTransferRequestParamsDto params)", "modifiers": "@Override public", "return": "void", "signature": "void validateGlacierS3FilesRestored(S3FileTransferRequestParamsDto params)", "full_signature": "@Override public void validateGlacierS3FilesRestored(S3FileTransferRequestParamsDto params)", "class_method_signature": "S3DaoImpl.validateGlacierS3FilesRestored(S3FileTransferRequestParamsDto params)", "testcase": false, "constructor": false}, {"identifier": "validateS3File", "parameters": "(S3FileTransferRequestParamsDto params, Long fileSizeInBytes)", "modifiers": "@Override public", "return": "void", "signature": "void validateS3File(S3FileTransferRequestParamsDto params, Long fileSizeInBytes)", "full_signature": "@Override public void validateS3File(S3FileTransferRequestParamsDto params, Long fileSizeInBytes)", "class_method_signature": "S3DaoImpl.validateS3File(S3FileTransferRequestParamsDto params, Long fileSizeInBytes)", "testcase": false, "constructor": false}, {"identifier": "isRootKeyPrefix", "parameters": "(String s3KeyPrefix)", "modifiers": "protected", "return": "boolean", "signature": "boolean isRootKeyPrefix(String s3KeyPrefix)", "full_signature": "protected boolean isRootKeyPrefix(String s3KeyPrefix)", "class_method_signature": "S3DaoImpl.isRootKeyPrefix(String s3KeyPrefix)", "testcase": false, "constructor": false}, {"identifier": "createDirectory", "parameters": "(final S3FileTransferRequestParamsDto params, final boolean isEmptyDirectory)", "modifiers": "private", "return": "void", "signature": "void createDirectory(final S3FileTransferRequestParamsDto params, final boolean isEmptyDirectory)", "full_signature": "private void createDirectory(final S3FileTransferRequestParamsDto params, final boolean isEmptyDirectory)", "class_method_signature": "S3DaoImpl.createDirectory(final S3FileTransferRequestParamsDto params, final boolean isEmptyDirectory)", "testcase": false, "constructor": false}, {"identifier": "deleteKeyVersions", "parameters": "(AmazonS3Client s3Client, String s3BucketName, List<DeleteObjectsRequest.KeyVersion> keyVersions)", "modifiers": "private", "return": "void", "signature": "void deleteKeyVersions(AmazonS3Client s3Client, String s3BucketName, List<DeleteObjectsRequest.KeyVersion> keyVersions)", "full_signature": "private void deleteKeyVersions(AmazonS3Client s3Client, String s3BucketName, List<DeleteObjectsRequest.KeyVersion> keyVersions)", "class_method_signature": "S3DaoImpl.deleteKeyVersions(AmazonS3Client s3Client, String s3BucketName, List<DeleteObjectsRequest.KeyVersion> keyVersions)", "testcase": false, "constructor": false}, {"identifier": "getAWSCredentialsProvider", "parameters": "(S3FileTransferRequestParamsDto params)", "modifiers": "private", "return": "AWSCredentialsProvider", "signature": "AWSCredentialsProvider getAWSCredentialsProvider(S3FileTransferRequestParamsDto params)", "full_signature": "private AWSCredentialsProvider getAWSCredentialsProvider(S3FileTransferRequestParamsDto params)", "class_method_signature": "S3DaoImpl.getAWSCredentialsProvider(S3FileTransferRequestParamsDto params)", "testcase": false, "constructor": false}, {"identifier": "getAmazonS3", "parameters": "(S3FileTransferRequestParamsDto params)", "modifiers": "private", "return": "AmazonS3Client", "signature": "AmazonS3Client getAmazonS3(S3FileTransferRequestParamsDto params)", "full_signature": "private AmazonS3Client getAmazonS3(S3FileTransferRequestParamsDto params)", "class_method_signature": "S3DaoImpl.getAmazonS3(S3FileTransferRequestParamsDto params)", "testcase": false, "constructor": false}, {"identifier": "getS3Object", "parameters": "(AmazonS3Client s3Client, String bucketName, String key, boolean errorOnNoSuchKey)", "modifiers": "private", "return": "S3Object", "signature": "S3Object getS3Object(AmazonS3Client s3Client, String bucketName, String key, boolean errorOnNoSuchKey)", "full_signature": "private S3Object getS3Object(AmazonS3Client s3Client, String bucketName, String key, boolean errorOnNoSuchKey)", "class_method_signature": "S3DaoImpl.getS3Object(AmazonS3Client s3Client, String bucketName, String key, boolean errorOnNoSuchKey)", "testcase": false, "constructor": false}, {"identifier": "getTransferManager", "parameters": "(final S3FileTransferRequestParamsDto params)", "modifiers": "private", "return": "TransferManager", "signature": "TransferManager getTransferManager(final S3FileTransferRequestParamsDto params)", "full_signature": "private TransferManager getTransferManager(final S3FileTransferRequestParamsDto params)", "class_method_signature": "S3DaoImpl.getTransferManager(final S3FileTransferRequestParamsDto params)", "testcase": false, "constructor": false}, {"identifier": "logMultiObjectDeleteException", "parameters": "(MultiObjectDeleteException multiObjectDeleteException)", "modifiers": "private", "return": "void", "signature": "void logMultiObjectDeleteException(MultiObjectDeleteException multiObjectDeleteException)", "full_signature": "private void logMultiObjectDeleteException(MultiObjectDeleteException multiObjectDeleteException)", "class_method_signature": "S3DaoImpl.logMultiObjectDeleteException(MultiObjectDeleteException multiObjectDeleteException)", "testcase": false, "constructor": false}, {"identifier": "logOverallTransferRate", "parameters": "(S3FileTransferResultsDto s3FileTransferResultsDto)", "modifiers": "private", "return": "void", "signature": "void logOverallTransferRate(S3FileTransferResultsDto s3FileTransferResultsDto)", "full_signature": "private void logOverallTransferRate(S3FileTransferResultsDto s3FileTransferResultsDto)", "class_method_signature": "S3DaoImpl.logOverallTransferRate(S3FileTransferResultsDto s3FileTransferResultsDto)", "testcase": false, "constructor": false}, {"identifier": "logTransferProgress", "parameters": "(TransferProgress transferProgress)", "modifiers": "private", "return": "void", "signature": "void logTransferProgress(TransferProgress transferProgress)", "full_signature": "private void logTransferProgress(TransferProgress transferProgress)", "class_method_signature": "S3DaoImpl.logTransferProgress(TransferProgress transferProgress)", "testcase": false, "constructor": false}, {"identifier": "performTransfer", "parameters": "(final S3FileTransferRequestParamsDto params, Transferer transferer)", "modifiers": "private", "return": "S3FileTransferResultsDto", "signature": "S3FileTransferResultsDto performTransfer(final S3FileTransferRequestParamsDto params, Transferer transferer)", "full_signature": "private S3FileTransferResultsDto performTransfer(final S3FileTransferRequestParamsDto params, Transferer transferer)", "class_method_signature": "S3DaoImpl.performTransfer(final S3FileTransferRequestParamsDto params, Transferer transferer)", "testcase": false, "constructor": false}, {"identifier": "prepareMetadata", "parameters": "(final S3FileTransferRequestParamsDto params, ObjectMetadata metadata)", "modifiers": "private", "return": "void", "signature": "void prepareMetadata(final S3FileTransferRequestParamsDto params, ObjectMetadata metadata)", "full_signature": "private void prepareMetadata(final S3FileTransferRequestParamsDto params, ObjectMetadata metadata)", "class_method_signature": "S3DaoImpl.prepareMetadata(final S3FileTransferRequestParamsDto params, ObjectMetadata metadata)", "testcase": false, "constructor": false}, {"identifier": "tagVersionsHelper", "parameters": "(final S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto,\n        final S3FileTransferRequestParamsDto s3ObjectTaggerParamsDto, final List<S3VersionSummary> s3VersionSummaries, final Tag tag)", "modifiers": "private", "return": "void", "signature": "void tagVersionsHelper(final S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto,\n        final S3FileTransferRequestParamsDto s3ObjectTaggerParamsDto, final List<S3VersionSummary> s3VersionSummaries, final Tag tag)", "full_signature": "private void tagVersionsHelper(final S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto,\n        final S3FileTransferRequestParamsDto s3ObjectTaggerParamsDto, final List<S3VersionSummary> s3VersionSummaries, final Tag tag)", "class_method_signature": "S3DaoImpl.tagVersionsHelper(final S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto,\n        final S3FileTransferRequestParamsDto s3ObjectTaggerParamsDto, final List<S3VersionSummary> s3VersionSummaries, final Tag tag)", "testcase": false, "constructor": false}], "file": "herd-code/herd-dao/src/main/java/org/finra/herd/dao/impl/S3DaoImpl.java"}, "focal_method": {"identifier": "tagVersions", "parameters": "(final S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto, final S3FileTransferRequestParamsDto s3ObjectTaggerParamsDto,\n        final List<S3VersionSummary> s3VersionSummaries, final Tag tag)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void tagVersions(final S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto, final S3FileTransferRequestParamsDto s3ObjectTaggerParamsDto,\n        final List<S3VersionSummary> s3VersionSummaries, final Tag tag)\n    {\n        // Eliminate delete markers from the list of version summaries to be tagged.\n        List<S3VersionSummary> s3VersionSummariesWithoutDeleteMarkers = null;\n        if (CollectionUtils.isNotEmpty(s3VersionSummaries))\n        {\n            s3VersionSummariesWithoutDeleteMarkers = s3VersionSummaries.stream().\n                filter(s3VersionSummary -> !s3VersionSummary.isDeleteMarker()).collect(Collectors.toList());\n        }\n\n        LOGGER.info(\"Tagging versions in S3... s3BucketName=\\\"{}\\\" s3KeyPrefix=\\\"{}\\\" s3VersionCount={} s3ObjectTagKey=\\\"{}\\\" s3ObjectTagValue=\\\"{}\\\" \" +\n                \"Excluding from tagging S3 delete markers... s3DeleteMarkerCount={}\", s3FileTransferRequestParamsDto.getS3BucketName(),\n            s3FileTransferRequestParamsDto.getS3KeyPrefix(), CollectionUtils.size(s3VersionSummariesWithoutDeleteMarkers), tag.getKey(), tag.getValue(),\n            CollectionUtils.size(s3VersionSummaries) - CollectionUtils.size(s3VersionSummariesWithoutDeleteMarkers));\n\n        if (CollectionUtils.isNotEmpty(s3VersionSummariesWithoutDeleteMarkers))\n        {\n            // Tag S3 versions.\n            tagVersionsHelper(s3FileTransferRequestParamsDto, s3ObjectTaggerParamsDto, s3VersionSummariesWithoutDeleteMarkers, tag);\n\n            // Log a list of S3 versions that got tagged.\n            if (LOGGER.isInfoEnabled())\n            {\n                LOGGER.info(\"Successfully tagged versions in S3 bucket. \" +\n                        \"s3BucketName=\\\"{}\\\" s3KeyPrefix=\\\"{}\\\" s3VersionCount={} s3ObjectTagKey=\\\"{}\\\" s3ObjectTagValue=\\\"{}\\\"\",\n                    s3FileTransferRequestParamsDto.getS3BucketName(), s3FileTransferRequestParamsDto.getS3KeyPrefix(),\n                    s3VersionSummariesWithoutDeleteMarkers.size(), tag.getKey(), tag.getValue());\n\n                for (S3VersionSummary s3VersionSummary : s3VersionSummariesWithoutDeleteMarkers)\n                {\n                    LOGGER.info(\"s3Key=\\\"{}\\\" s3VersionId=\\\"{}\\\"\", s3VersionSummary.getKey(), s3VersionSummary.getVersionId());\n                }\n            }\n        }\n    }", "signature": "void tagVersions(final S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto, final S3FileTransferRequestParamsDto s3ObjectTaggerParamsDto,\n        final List<S3VersionSummary> s3VersionSummaries, final Tag tag)", "full_signature": "@Override public void tagVersions(final S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto, final S3FileTransferRequestParamsDto s3ObjectTaggerParamsDto,\n        final List<S3VersionSummary> s3VersionSummaries, final Tag tag)", "class_method_signature": "S3DaoImpl.tagVersions(final S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto, final S3FileTransferRequestParamsDto s3ObjectTaggerParamsDto,\n        final List<S3VersionSummary> s3VersionSummaries, final Tag tag)", "testcase": false, "constructor": false, "invocations": ["isNotEmpty", "collect", "filter", "stream", "isDeleteMarker", "toList", "info", "getS3BucketName", "getS3KeyPrefix", "size", "getKey", "getValue", "size", "size", "isNotEmpty", "tagVersionsHelper", "isInfoEnabled", "info", "getS3BucketName", "getS3KeyPrefix", "size", "getKey", "getValue", "info", "getKey", "getVersionId"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}