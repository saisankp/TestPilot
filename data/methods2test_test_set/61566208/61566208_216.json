{"test_class": {"identifier": "SwitchNodeConnectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger( SwitchNodeConnectorTest.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger( SwitchNodeConnectorTest.class )", "var_name": "logger"}], "file": "modules/hms-core/src/test/java/com/vmware/vrack/hms/node/switches/SwitchNodeConnectorTest.java"}, "test_case": {"identifier": "testGetSwitchNodes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSwitchNodes()\n    {\n        logger.info( \"[TS] : testGetSwitchNodes\" );\n        GetSwitchesResponse result = SwitchNodeConnector.getInstance().getSwitchNodes();\n        logger.info( \"[TS] : Expected result : Result(String Array) length = 1 or more than 1, actual result : Result(String Array) length = \"\n            + result.getSwitchList().size() );\n        assertNotNull( result.getSwitchList() );\n    }", "signature": "void testGetSwitchNodes()", "full_signature": "@Test public void testGetSwitchNodes()", "class_method_signature": "SwitchNodeConnectorTest.testGetSwitchNodes()", "testcase": true, "constructor": false, "invocations": ["info", "getSwitchNodes", "getInstance", "info", "size", "getSwitchList", "assertNotNull", "getSwitchList"]}, "focal_class": {"identifier": "SwitchNodeConnector", "superclass": "extends NodeConnector", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger( SwitchNodeConnector.class );", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger( SwitchNodeConnector.class )", "var_name": "logger"}, {"original_string": "private static volatile SwitchNodeConnector instance;", "modifier": "private static volatile", "type": "SwitchNodeConnector", "declarator": "instance", "var_name": "instance"}, {"original_string": "public Map<String, SwitchNode> switchNodeMap = new TreeMap<String, SwitchNode>();", "modifier": "public", "type": "Map<String, SwitchNode>", "declarator": "switchNodeMap = new TreeMap<String, SwitchNode>()", "var_name": "switchNodeMap"}, {"original_string": "private SwitchIpv4RouteManager ipv4RouteManager = new SwitchIpv4RouteManager();", "modifier": "private", "type": "SwitchIpv4RouteManager", "declarator": "ipv4RouteManager = new SwitchIpv4RouteManager()", "var_name": "ipv4RouteManager"}, {"original_string": "private Map<String, ISwitchService> switchServiceMap = new TreeMap<String, ISwitchService>();", "modifier": "private", "type": "Map<String, ISwitchService>", "declarator": "switchServiceMap = new TreeMap<String, ISwitchService>()", "var_name": "switchServiceMap"}, {"original_string": "private boolean enableMonitoring =\n        Boolean.parseBoolean( HmsConfigHolder.getProperty( HmsConfigHolder.HMS_CONFIG_PROPS, \"enable_monitoring\" ) );", "modifier": "private", "type": "boolean", "declarator": "enableMonitoring =\n        Boolean.parseBoolean( HmsConfigHolder.getProperty( HmsConfigHolder.HMS_CONFIG_PROPS, \"enable_monitoring\" ) )", "var_name": "enableMonitoring"}], "methods": [{"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "SwitchNodeConnector", "signature": "SwitchNodeConnector getInstance()", "full_signature": "public static SwitchNodeConnector getInstance()", "class_method_signature": "SwitchNodeConnector.getInstance()", "testcase": false, "constructor": false}, {"identifier": "SwitchNodeConnector", "parameters": "()", "modifiers": "private", "return": "", "signature": " SwitchNodeConnector()", "full_signature": "private  SwitchNodeConnector()", "class_method_signature": "SwitchNodeConnector.SwitchNodeConnector()", "testcase": false, "constructor": true}, {"identifier": "getSwitchNodes", "parameters": "()", "modifiers": "public", "return": "GetSwitchesResponse", "signature": "GetSwitchesResponse getSwitchNodes()", "full_signature": "public GetSwitchesResponse getSwitchNodes()", "class_method_signature": "SwitchNodeConnector.getSwitchNodes()", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "( String switchId )", "modifiers": "public", "return": "boolean", "signature": "boolean contains( String switchId )", "full_signature": "public boolean contains( String switchId )", "class_method_signature": "SwitchNodeConnector.contains( String switchId )", "testcase": false, "constructor": false}, {"identifier": "getSwitchNode", "parameters": "( String switchId )", "modifiers": "public", "return": "SwitchNode", "signature": "SwitchNode getSwitchNode( String switchId )", "full_signature": "public SwitchNode getSwitchNode( String switchId )", "class_method_signature": "SwitchNodeConnector.getSwitchNode( String switchId )", "testcase": false, "constructor": false}, {"identifier": "setSwitchNode", "parameters": "( String switchId, SwitchNode switchNode )", "modifiers": "public", "return": "void", "signature": "void setSwitchNode( String switchId, SwitchNode switchNode )", "full_signature": "public void setSwitchNode( String switchId, SwitchNode switchNode )", "class_method_signature": "SwitchNodeConnector.setSwitchNode( String switchId, SwitchNode switchNode )", "testcase": false, "constructor": false}, {"identifier": "getSwitchService", "parameters": "( String switchId )", "modifiers": "public", "return": "ISwitchService", "signature": "ISwitchService getSwitchService( String switchId )", "full_signature": "public ISwitchService getSwitchService( String switchId )", "class_method_signature": "SwitchNodeConnector.getSwitchService( String switchId )", "testcase": false, "constructor": false}, {"identifier": "getSwitchNodeInfo", "parameters": "( String switchId, boolean refresh )", "modifiers": "public", "return": "GetSwitchResponse", "signature": "GetSwitchResponse getSwitchNodeInfo( String switchId, boolean refresh )", "full_signature": "public GetSwitchResponse getSwitchNodeInfo( String switchId, boolean refresh )", "class_method_signature": "SwitchNodeConnector.getSwitchNodeInfo( String switchId, boolean refresh )", "testcase": false, "constructor": false}, {"identifier": "getSwitchInfo", "parameters": "( String switchId, boolean refresh )", "modifiers": "public", "return": "SwitchInfo", "signature": "SwitchInfo getSwitchInfo( String switchId, boolean refresh )", "full_signature": "public SwitchInfo getSwitchInfo( String switchId, boolean refresh )", "class_method_signature": "SwitchNodeConnector.getSwitchInfo( String switchId, boolean refresh )", "testcase": false, "constructor": false}, {"identifier": "updateSwitchNodeInfo", "parameters": "( String switchId, SwitchUpdateInfo switchUpdateInfo )", "modifiers": "public", "return": "void", "signature": "void updateSwitchNodeInfo( String switchId, SwitchUpdateInfo switchUpdateInfo )", "full_signature": "public void updateSwitchNodeInfo( String switchId, SwitchUpdateInfo switchUpdateInfo )", "class_method_signature": "SwitchNodeConnector.updateSwitchNodeInfo( String switchId, SwitchUpdateInfo switchUpdateInfo )", "testcase": false, "constructor": false}, {"identifier": "getSwitchPorts", "parameters": "( String switchId )", "modifiers": "public", "return": "List<String>", "signature": "List<String> getSwitchPorts( String switchId )", "full_signature": "public List<String> getSwitchPorts( String switchId )", "class_method_signature": "SwitchNodeConnector.getSwitchPorts( String switchId )", "testcase": false, "constructor": false}, {"identifier": "getSwitchPortsBulk", "parameters": "( String switchId )", "modifiers": "public", "return": "List<SwitchPort>", "signature": "List<SwitchPort> getSwitchPortsBulk( String switchId )", "full_signature": "public List<SwitchPort> getSwitchPortsBulk( String switchId )", "class_method_signature": "SwitchNodeConnector.getSwitchPortsBulk( String switchId )", "testcase": false, "constructor": false}, {"identifier": "getSwitchPort", "parameters": "( String switchId, String portName )", "modifiers": "public", "return": "SwitchPort", "signature": "SwitchPort getSwitchPort( String switchId, String portName )", "full_signature": "public SwitchPort getSwitchPort( String switchId, String portName )", "class_method_signature": "SwitchNodeConnector.getSwitchPort( String switchId, String portName )", "testcase": false, "constructor": false}, {"identifier": "getSnmp", "parameters": "( String switchId )", "modifiers": "public", "return": "SwitchSnmpConfig", "signature": "SwitchSnmpConfig getSnmp( String switchId )", "full_signature": "public SwitchSnmpConfig getSnmp( String switchId )", "class_method_signature": "SwitchNodeConnector.getSnmp( String switchId )", "testcase": false, "constructor": false}, {"identifier": "changeSwitchPortStatus", "parameters": "( String switchId, String portName, SwitchPort.PortStatus portStatus )", "modifiers": "public", "return": "void", "signature": "void changeSwitchPortStatus( String switchId, String portName, SwitchPort.PortStatus portStatus )", "full_signature": "public void changeSwitchPortStatus( String switchId, String portName, SwitchPort.PortStatus portStatus )", "class_method_signature": "SwitchNodeConnector.changeSwitchPortStatus( String switchId, String portName, SwitchPort.PortStatus portStatus )", "testcase": false, "constructor": false}, {"identifier": "updateSwitchPort", "parameters": "( String switchId, String portName, SwitchPort portInfo )", "modifiers": "public", "return": "void", "signature": "void updateSwitchPort( String switchId, String portName, SwitchPort portInfo )", "full_signature": "public void updateSwitchPort( String switchId, String portName, SwitchPort portInfo )", "class_method_signature": "SwitchNodeConnector.updateSwitchPort( String switchId, String portName, SwitchPort portInfo )", "testcase": false, "constructor": false}, {"identifier": "switchPortEnable", "parameters": "( String switchId, String portName, boolean isEnabled )", "modifiers": "public", "return": "void", "signature": "void switchPortEnable( String switchId, String portName, boolean isEnabled )", "full_signature": "public void switchPortEnable( String switchId, String portName, boolean isEnabled )", "class_method_signature": "SwitchNodeConnector.switchPortEnable( String switchId, String portName, boolean isEnabled )", "testcase": false, "constructor": false}, {"identifier": "rebootSwitch", "parameters": "( String switchId )", "modifiers": "public", "return": "void", "signature": "void rebootSwitch( String switchId )", "full_signature": "public void rebootSwitch( String switchId )", "class_method_signature": "SwitchNodeConnector.rebootSwitch( String switchId )", "testcase": false, "constructor": false}, {"identifier": "setPassword", "parameters": "( String switchId, SetNodePassword nodePassword )", "modifiers": "public", "return": "void", "signature": "void setPassword( String switchId, SetNodePassword nodePassword )", "full_signature": "public void setPassword( String switchId, SetNodePassword nodePassword )", "class_method_signature": "SwitchNodeConnector.setPassword( String switchId, SetNodePassword nodePassword )", "testcase": false, "constructor": false}, {"identifier": "upgradeSwitch", "parameters": "( String switchId, SwitchUpgradeInfo upgradeInfo )", "modifiers": "public", "return": "void", "signature": "void upgradeSwitch( String switchId, SwitchUpgradeInfo upgradeInfo )", "full_signature": "public void upgradeSwitch( String switchId, SwitchUpgradeInfo upgradeInfo )", "class_method_signature": "SwitchNodeConnector.upgradeSwitch( String switchId, SwitchUpgradeInfo upgradeInfo )", "testcase": false, "constructor": false}, {"identifier": "getSwitchLacpGroups", "parameters": "( String switchId )", "modifiers": "public", "return": "List<String>", "signature": "List<String> getSwitchLacpGroups( String switchId )", "full_signature": "public List<String> getSwitchLacpGroups( String switchId )", "class_method_signature": "SwitchNodeConnector.getSwitchLacpGroups( String switchId )", "testcase": false, "constructor": false}, {"identifier": "getSwitchLacpGroup", "parameters": "( String switchId, String lacpGroupName )", "modifiers": "public", "return": "SwitchLacpGroup", "signature": "SwitchLacpGroup getSwitchLacpGroup( String switchId, String lacpGroupName )", "full_signature": "public SwitchLacpGroup getSwitchLacpGroup( String switchId, String lacpGroupName )", "class_method_signature": "SwitchNodeConnector.getSwitchLacpGroup( String switchId, String lacpGroupName )", "testcase": false, "constructor": false}, {"identifier": "createLacpGroup", "parameters": "( String switchId, SwitchLacpGroup lacpGroup )", "modifiers": "public", "return": "void", "signature": "void createLacpGroup( String switchId, SwitchLacpGroup lacpGroup )", "full_signature": "public void createLacpGroup( String switchId, SwitchLacpGroup lacpGroup )", "class_method_signature": "SwitchNodeConnector.createLacpGroup( String switchId, SwitchLacpGroup lacpGroup )", "testcase": false, "constructor": false}, {"identifier": "deleteLacpGroup", "parameters": "( String switchId, String lacpGroupName )", "modifiers": "public", "return": "void", "signature": "void deleteLacpGroup( String switchId, String lacpGroupName )", "full_signature": "public void deleteLacpGroup( String switchId, String lacpGroupName )", "class_method_signature": "SwitchNodeConnector.deleteLacpGroup( String switchId, String lacpGroupName )", "testcase": false, "constructor": false}, {"identifier": "getSwitchVlans", "parameters": "( String switchId )", "modifiers": "public", "return": "List<String>", "signature": "List<String> getSwitchVlans( String switchId )", "full_signature": "public List<String> getSwitchVlans( String switchId )", "class_method_signature": "SwitchNodeConnector.getSwitchVlans( String switchId )", "testcase": false, "constructor": false}, {"identifier": "getSwitchVlansBulk", "parameters": "( String switchId )", "modifiers": "public", "return": "List<SwitchVlan>", "signature": "List<SwitchVlan> getSwitchVlansBulk( String switchId )", "full_signature": "public List<SwitchVlan> getSwitchVlansBulk( String switchId )", "class_method_signature": "SwitchNodeConnector.getSwitchVlansBulk( String switchId )", "testcase": false, "constructor": false}, {"identifier": "getSwitchVlan", "parameters": "( String switchId, String vlanName )", "modifiers": "public", "return": "SwitchVlan", "signature": "SwitchVlan getSwitchVlan( String switchId, String vlanName )", "full_signature": "public SwitchVlan getSwitchVlan( String switchId, String vlanName )", "class_method_signature": "SwitchNodeConnector.getSwitchVlan( String switchId, String vlanName )", "testcase": false, "constructor": false}, {"identifier": "createVlan", "parameters": "( String switchId, SwitchVlan vlan )", "modifiers": "public", "return": "void", "signature": "void createVlan( String switchId, SwitchVlan vlan )", "full_signature": "public void createVlan( String switchId, SwitchVlan vlan )", "class_method_signature": "SwitchNodeConnector.createVlan( String switchId, SwitchVlan vlan )", "testcase": false, "constructor": false}, {"identifier": "updateVlan", "parameters": "( String switchId, String vlanName, SwitchVlan vlan )", "modifiers": "public", "return": "void", "signature": "void updateVlan( String switchId, String vlanName, SwitchVlan vlan )", "full_signature": "public void updateVlan( String switchId, String vlanName, SwitchVlan vlan )", "class_method_signature": "SwitchNodeConnector.updateVlan( String switchId, String vlanName, SwitchVlan vlan )", "testcase": false, "constructor": false}, {"identifier": "deleteVlan", "parameters": "( String switchId, String vlanName )", "modifiers": "public", "return": "void", "signature": "void deleteVlan( String switchId, String vlanName )", "full_signature": "public void deleteVlan( String switchId, String vlanName )", "class_method_signature": "SwitchNodeConnector.deleteVlan( String switchId, String vlanName )", "testcase": false, "constructor": false}, {"identifier": "getSwitchVxlans", "parameters": "( String switchId )", "modifiers": "public", "return": "List<SwitchVxlan>", "signature": "List<SwitchVxlan> getSwitchVxlans( String switchId )", "full_signature": "public List<SwitchVxlan> getSwitchVxlans( String switchId )", "class_method_signature": "SwitchNodeConnector.getSwitchVxlans( String switchId )", "testcase": false, "constructor": false}, {"identifier": "getSwitchVxlansMatchingVlan", "parameters": "( String switchId, String vlanName )", "modifiers": "public", "return": "List<SwitchVxlan>", "signature": "List<SwitchVxlan> getSwitchVxlansMatchingVlan( String switchId, String vlanName )", "full_signature": "public List<SwitchVxlan> getSwitchVxlansMatchingVlan( String switchId, String vlanName )", "class_method_signature": "SwitchNodeConnector.getSwitchVxlansMatchingVlan( String switchId, String vlanName )", "testcase": false, "constructor": false}, {"identifier": "createVxlan", "parameters": "( String switchId, SwitchVxlan vxlan )", "modifiers": "public", "return": "void", "signature": "void createVxlan( String switchId, SwitchVxlan vxlan )", "full_signature": "public void createVxlan( String switchId, SwitchVxlan vxlan )", "class_method_signature": "SwitchNodeConnector.createVxlan( String switchId, SwitchVxlan vxlan )", "testcase": false, "constructor": false}, {"identifier": "deleteVxlan", "parameters": "( String switchId, String vxlanName, String vlanName )", "modifiers": "public", "return": "void", "signature": "void deleteVxlan( String switchId, String vxlanName, String vlanName )", "full_signature": "public void deleteVxlan( String switchId, String vxlanName, String vlanName )", "class_method_signature": "SwitchNodeConnector.deleteVxlan( String switchId, String vxlanName, String vlanName )", "testcase": false, "constructor": false}, {"identifier": "configureOspf", "parameters": "( String switchId, SwitchOspfConfig ospf )", "modifiers": "public", "return": "void", "signature": "void configureOspf( String switchId, SwitchOspfConfig ospf )", "full_signature": "public void configureOspf( String switchId, SwitchOspfConfig ospf )", "class_method_signature": "SwitchNodeConnector.configureOspf( String switchId, SwitchOspfConfig ospf )", "testcase": false, "constructor": false}, {"identifier": "getOspf", "parameters": "( String switchId )", "modifiers": "public", "return": "SwitchOspfConfig", "signature": "SwitchOspfConfig getOspf( String switchId )", "full_signature": "public SwitchOspfConfig getOspf( String switchId )", "class_method_signature": "SwitchNodeConnector.getOspf( String switchId )", "testcase": false, "constructor": false}, {"identifier": "configureBgp", "parameters": "( String switchId, SwitchBgpConfig bgp )", "modifiers": "public", "return": "void", "signature": "void configureBgp( String switchId, SwitchBgpConfig bgp )", "full_signature": "public void configureBgp( String switchId, SwitchBgpConfig bgp )", "class_method_signature": "SwitchNodeConnector.configureBgp( String switchId, SwitchBgpConfig bgp )", "testcase": false, "constructor": false}, {"identifier": "configureMclag", "parameters": "( String switchId, SwitchMclagInfo mclag )", "modifiers": "public", "return": "void", "signature": "void configureMclag( String switchId, SwitchMclagInfo mclag )", "full_signature": "public void configureMclag( String switchId, SwitchMclagInfo mclag )", "class_method_signature": "SwitchNodeConnector.configureMclag( String switchId, SwitchMclagInfo mclag )", "testcase": false, "constructor": false}, {"identifier": "applyNetworkConfiguration", "parameters": "( String switchId, String configName )", "modifiers": "public", "return": "void", "signature": "void applyNetworkConfiguration( String switchId, String configName )", "full_signature": "public void applyNetworkConfiguration( String switchId, String configName )", "class_method_signature": "SwitchNodeConnector.applyNetworkConfiguration( String switchId, String configName )", "testcase": false, "constructor": false}, {"identifier": "applySwitchBulkConfigs", "parameters": "( String switchId, List<PluginSwitchBulkConfig> configs )", "modifiers": "public", "return": "void", "signature": "void applySwitchBulkConfigs( String switchId, List<PluginSwitchBulkConfig> configs )", "full_signature": "public void applySwitchBulkConfigs( String switchId, List<PluginSwitchBulkConfig> configs )", "class_method_signature": "SwitchNodeConnector.applySwitchBulkConfigs( String switchId, List<PluginSwitchBulkConfig> configs )", "testcase": false, "constructor": false}, {"identifier": "configureIpv4DefaultRoute", "parameters": "( String switchId, String gateway, String portId )", "modifiers": "public", "return": "void", "signature": "void configureIpv4DefaultRoute( String switchId, String gateway, String portId )", "full_signature": "public void configureIpv4DefaultRoute( String switchId, String gateway, String portId )", "class_method_signature": "SwitchNodeConnector.configureIpv4DefaultRoute( String switchId, String gateway, String portId )", "testcase": false, "constructor": false}, {"identifier": "deleteIpv4DefaultRoute", "parameters": "( String switchId )", "modifiers": "public", "return": "void", "signature": "void deleteIpv4DefaultRoute( String switchId )", "full_signature": "public void deleteIpv4DefaultRoute( String switchId )", "class_method_signature": "SwitchNodeConnector.deleteIpv4DefaultRoute( String switchId )", "testcase": false, "constructor": false}, {"identifier": "deletePortOrBondFromVlan", "parameters": "( String switchId, String vlanId, String portOrBondName )", "modifiers": "public", "return": "void", "signature": "void deletePortOrBondFromVlan( String switchId, String vlanId, String portOrBondName )", "full_signature": "public void deletePortOrBondFromVlan( String switchId, String vlanId, String portOrBondName )", "class_method_signature": "SwitchNodeConnector.deletePortOrBondFromVlan( String switchId, String vlanId, String portOrBondName )", "testcase": false, "constructor": false}, {"identifier": "deletePortFromLacpGroup", "parameters": "( String switchId, String lacpGroupId, String portName )", "modifiers": "public", "return": "void", "signature": "void deletePortFromLacpGroup( String switchId, String lacpGroupId, String portName )", "full_signature": "public void deletePortFromLacpGroup( String switchId, String lacpGroupId, String portName )", "class_method_signature": "SwitchNodeConnector.deletePortFromLacpGroup( String switchId, String lacpGroupId, String portName )", "testcase": false, "constructor": false}, {"identifier": "setSwitchTime", "parameters": "( String switchId, long time )", "modifiers": "public", "return": "void", "signature": "void setSwitchTime( String switchId, long time )", "full_signature": "public void setSwitchTime( String switchId, long time )", "class_method_signature": "SwitchNodeConnector.setSwitchTime( String switchId, long time )", "testcase": false, "constructor": false}, {"identifier": "configureSnmp", "parameters": "( String switchId, SwitchSnmpConfig config )", "modifiers": "public", "return": "void", "signature": "void configureSnmp( String switchId, SwitchSnmpConfig config )", "full_signature": "public void configureSnmp( String switchId, SwitchSnmpConfig config )", "class_method_signature": "SwitchNodeConnector.configureSnmp( String switchId, SwitchSnmpConfig config )", "testcase": false, "constructor": false}, {"identifier": "configureSwitchNtp", "parameters": "( NBSwitchNtpConfig ntpConfig )", "modifiers": "public", "return": "void", "signature": "void configureSwitchNtp( NBSwitchNtpConfig ntpConfig )", "full_signature": "public void configureSwitchNtp( NBSwitchNtpConfig ntpConfig )", "class_method_signature": "SwitchNodeConnector.configureSwitchNtp( NBSwitchNtpConfig ntpConfig )", "testcase": false, "constructor": false}, {"identifier": "reloadRackInventoryConfig", "parameters": "( HmsInventoryConfiguration hic )", "modifiers": "public", "return": "void", "signature": "void reloadRackInventoryConfig( HmsInventoryConfiguration hic )", "full_signature": "public void reloadRackInventoryConfig( HmsInventoryConfiguration hic )", "class_method_signature": "SwitchNodeConnector.reloadRackInventoryConfig( HmsInventoryConfiguration hic )", "testcase": false, "constructor": false}, {"identifier": "parseRackInventoryConfig", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void parseRackInventoryConfig()", "full_signature": "public void parseRackInventoryConfig()", "class_method_signature": "SwitchNodeConnector.parseRackInventoryConfig()", "testcase": false, "constructor": false}, {"identifier": "executeSwitchNodeRefresh", "parameters": "( List<SwitchNode> switchNodes )", "modifiers": "public", "return": "void", "signature": "void executeSwitchNodeRefresh( List<SwitchNode> switchNodes )", "full_signature": "public void executeSwitchNodeRefresh( List<SwitchNode> switchNodes )", "class_method_signature": "SwitchNodeConnector.executeSwitchNodeRefresh( List<SwitchNode> switchNodes )", "testcase": false, "constructor": false}, {"identifier": "discoverSwitch", "parameters": "( SwitchNode switchNode )", "modifiers": "private", "return": "void", "signature": "void discoverSwitch( SwitchNode switchNode )", "full_signature": "private void discoverSwitch( SwitchNode switchNode )", "class_method_signature": "SwitchNodeConnector.discoverSwitch( SwitchNode switchNode )", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "( String switchId, SwitchNode switchNode, ISwitchService switchService )", "modifiers": "private", "return": "void", "signature": "void validate( String switchId, SwitchNode switchNode, ISwitchService switchService )", "full_signature": "private void validate( String switchId, SwitchNode switchNode, ISwitchService switchService )", "class_method_signature": "SwitchNodeConnector.validate( String switchId, SwitchNode switchNode, ISwitchService switchService )", "testcase": false, "constructor": false}, {"identifier": "getMonitoredSwitchComponents", "parameters": "()", "modifiers": "public static", "return": "List<SwitchComponentEnum>", "signature": "List<SwitchComponentEnum> getMonitoredSwitchComponents()", "full_signature": "public static List<SwitchComponentEnum> getMonitoredSwitchComponents()", "class_method_signature": "SwitchNodeConnector.getMonitoredSwitchComponents()", "testcase": false, "constructor": false}, {"identifier": "initSwitchMonitoring", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initSwitchMonitoring()", "full_signature": "public void initSwitchMonitoring()", "class_method_signature": "SwitchNodeConnector.initSwitchMonitoring()", "testcase": false, "constructor": false}], "file": "modules/hms-core/src/main/java/com/vmware/vrack/hms/node/switches/SwitchNodeConnector.java"}, "focal_method": {"identifier": "getSwitchNodes", "parameters": "()", "modifiers": "public", "return": "GetSwitchesResponse", "body": "public GetSwitchesResponse getSwitchNodes()\n    {\n        GetSwitchesResponse switchesResponse = new GetSwitchesResponse();\n        for ( String s : switchNodeMap.keySet() )\n        {\n            SwitchNode val = switchNodeMap.get( s );\n            ISwitchService switchService = switchServiceMap.get( s );\n            /*\n             * Class<ISwitchService> switchServiceClass = switchServiceClassMap.get(s); ISwitchService switchService =\n             * null; if(switchServiceClass != null) { try { switchService =\n             * (ISwitchService)switchServiceClass.newInstance(); } catch (InstantiationException e) { logger.error(\n             * \"Exception during creating new Instance of class:\" + switchServiceClass, e); } catch\n             * (IllegalAccessException e) { logger.error(\"Exception during creating new Instance of class:\" +\n             * switchServiceClass, e); } } else { logger.error(\"Unable to get Switch Service for Switch node \" + s); }\n             */\n            GetSwitchesResponseItem item = new GetSwitchesResponseItem( s, val.getIpAddress() );\n            item.setType( switchService != null ? switchService.getSwitchType() : null );\n            switchesResponse.add( item );\n        }\n        return switchesResponse;\n    }", "signature": "GetSwitchesResponse getSwitchNodes()", "full_signature": "public GetSwitchesResponse getSwitchNodes()", "class_method_signature": "SwitchNodeConnector.getSwitchNodes()", "testcase": false, "constructor": false, "invocations": ["keySet", "get", "get", "getIpAddress", "setType", "getSwitchType", "add"]}, "repository": {"repo_id": 61566208, "url": "https://github.com/vmware-archive/OHMS", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 16092, "license": "licensed"}}