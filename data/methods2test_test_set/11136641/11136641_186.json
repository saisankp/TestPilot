{"test_class": {"identifier": "AbstractContextSourceTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/springframework/ldap/core/support/AbstractContextSourceTest.java"}, "test_case": {"identifier": "testFormatForUrlNormal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFormatForUrlNormal() throws InvalidNameException {\n        LdapName ldapName = new LdapName(\"dc=261consulting, dc=com\");\n\n        String result = AbstractContextSource.formatForUrl(ldapName);\n        assertThat(result).isEqualTo(\"dc=261consulting,dc=com\");\n    }", "signature": "void testFormatForUrlNormal()", "full_signature": "@Test public void testFormatForUrlNormal()", "class_method_signature": "AbstractContextSourceTest.testFormatForUrlNormal()", "testcase": true, "constructor": false, "invocations": ["formatForUrl", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "AbstractContextSource", "superclass": "", "interfaces": "implements BaseLdapPathContextSource, InitializingBean", "fields": [{"original_string": "private static final Class<com.sun.jndi.ldap.LdapCtxFactory> DEFAULT_CONTEXT_FACTORY\n            = com.sun.jndi.ldap.LdapCtxFactory.class;", "modifier": "private static final", "type": "Class<com.sun.jndi.ldap.LdapCtxFactory>", "declarator": "DEFAULT_CONTEXT_FACTORY\n            = com.sun.jndi.ldap.LdapCtxFactory.class", "var_name": "DEFAULT_CONTEXT_FACTORY"}, {"original_string": "private static final Class<DefaultDirObjectFactory> DEFAULT_DIR_OBJECT_FACTORY = DefaultDirObjectFactory.class;", "modifier": "private static final", "type": "Class<DefaultDirObjectFactory>", "declarator": "DEFAULT_DIR_OBJECT_FACTORY = DefaultDirObjectFactory.class", "var_name": "DEFAULT_DIR_OBJECT_FACTORY"}, {"original_string": "private static final boolean DONT_DISABLE_POOLING = false;", "modifier": "private static final", "type": "boolean", "declarator": "DONT_DISABLE_POOLING = false", "var_name": "DONT_DISABLE_POOLING"}, {"original_string": "private static final boolean EXPLICITLY_DISABLE_POOLING = true;", "modifier": "private static final", "type": "boolean", "declarator": "EXPLICITLY_DISABLE_POOLING = true", "var_name": "EXPLICITLY_DISABLE_POOLING"}, {"original_string": "private static final int DEFAULT_BUFFER_SIZE = 1024;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_BUFFER_SIZE = 1024", "var_name": "DEFAULT_BUFFER_SIZE"}, {"original_string": "private Class<?> dirObjectFactory = DEFAULT_DIR_OBJECT_FACTORY;", "modifier": "private", "type": "Class<?>", "declarator": "dirObjectFactory = DEFAULT_DIR_OBJECT_FACTORY", "var_name": "dirObjectFactory"}, {"original_string": "private Class<?> contextFactory = DEFAULT_CONTEXT_FACTORY;", "modifier": "private", "type": "Class<?>", "declarator": "contextFactory = DEFAULT_CONTEXT_FACTORY", "var_name": "contextFactory"}, {"original_string": "private LdapName base = LdapUtils.emptyLdapName();", "modifier": "private", "type": "LdapName", "declarator": "base = LdapUtils.emptyLdapName()", "var_name": "base"}, {"original_string": "@Deprecated\n\tprotected String userDn = \"\";", "modifier": "@Deprecated\n\tprotected", "type": "String", "declarator": "userDn = \"\"", "var_name": "userDn"}, {"original_string": "@Deprecated\n\tprotected String password = \"\";", "modifier": "@Deprecated\n\tprotected", "type": "String", "declarator": "password = \"\"", "var_name": "password"}, {"original_string": "private String[] urls;", "modifier": "private", "type": "String[]", "declarator": "urls", "var_name": "urls"}, {"original_string": "private boolean pooled = false;", "modifier": "private", "type": "boolean", "declarator": "pooled = false", "var_name": "pooled"}, {"original_string": "private Hashtable<String, Object> baseEnv = new Hashtable<String, Object>();", "modifier": "private", "type": "Hashtable<String, Object>", "declarator": "baseEnv = new Hashtable<String, Object>()", "var_name": "baseEnv"}, {"original_string": "private Hashtable<String, Object> anonymousEnv;", "modifier": "private", "type": "Hashtable<String, Object>", "declarator": "anonymousEnv", "var_name": "anonymousEnv"}, {"original_string": "private AuthenticationSource authenticationSource;", "modifier": "private", "type": "AuthenticationSource", "declarator": "authenticationSource", "var_name": "authenticationSource"}, {"original_string": "private boolean cacheEnvironmentProperties = true;", "modifier": "private", "type": "boolean", "declarator": "cacheEnvironmentProperties = true", "var_name": "cacheEnvironmentProperties"}, {"original_string": "private boolean anonymousReadOnly = false;", "modifier": "private", "type": "boolean", "declarator": "anonymousReadOnly = false", "var_name": "anonymousReadOnly"}, {"original_string": "private String referral = null;", "modifier": "private", "type": "String", "declarator": "referral = null", "var_name": "referral"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(AbstractContextSource.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(AbstractContextSource.class)", "var_name": "LOG"}, {"original_string": "public static final String SUN_LDAP_POOLING_FLAG = \"com.sun.jndi.ldap.connect.pool\";", "modifier": "public static final", "type": "String", "declarator": "SUN_LDAP_POOLING_FLAG = \"com.sun.jndi.ldap.connect.pool\"", "var_name": "SUN_LDAP_POOLING_FLAG"}, {"original_string": "private static final String JDK_142 = \"1.4.2\";", "modifier": "private static final", "type": "String", "declarator": "JDK_142 = \"1.4.2\"", "var_name": "JDK_142"}, {"original_string": "private DirContextAuthenticationStrategy authenticationStrategy = new SimpleDirContextAuthenticationStrategy();", "modifier": "private", "type": "DirContextAuthenticationStrategy", "declarator": "authenticationStrategy = new SimpleDirContextAuthenticationStrategy()", "var_name": "authenticationStrategy"}], "methods": [{"identifier": "getContext", "parameters": "(String principal, String credentials)", "modifiers": "public", "return": "DirContext", "signature": "DirContext getContext(String principal, String credentials)", "full_signature": "public DirContext getContext(String principal, String credentials)", "class_method_signature": "AbstractContextSource.getContext(String principal, String credentials)", "testcase": false, "constructor": false}, {"identifier": "doGetContext", "parameters": "(String principal, String credentials, boolean explicitlyDisablePooling)", "modifiers": "private", "return": "DirContext", "signature": "DirContext doGetContext(String principal, String credentials, boolean explicitlyDisablePooling)", "full_signature": "private DirContext doGetContext(String principal, String credentials, boolean explicitlyDisablePooling)", "class_method_signature": "AbstractContextSource.doGetContext(String principal, String credentials, boolean explicitlyDisablePooling)", "testcase": false, "constructor": false}, {"identifier": "getReadOnlyContext", "parameters": "()", "modifiers": "public", "return": "DirContext", "signature": "DirContext getReadOnlyContext()", "full_signature": "public DirContext getReadOnlyContext()", "class_method_signature": "AbstractContextSource.getReadOnlyContext()", "testcase": false, "constructor": false}, {"identifier": "getReadWriteContext", "parameters": "()", "modifiers": "public", "return": "DirContext", "signature": "DirContext getReadWriteContext()", "full_signature": "public DirContext getReadWriteContext()", "class_method_signature": "AbstractContextSource.getReadWriteContext()", "testcase": false, "constructor": false}, {"identifier": "setupAuthenticatedEnvironment", "parameters": "(Hashtable<String, Object> env, String principal, String credentials)", "modifiers": "protected", "return": "void", "signature": "void setupAuthenticatedEnvironment(Hashtable<String, Object> env, String principal, String credentials)", "full_signature": "protected void setupAuthenticatedEnvironment(Hashtable<String, Object> env, String principal, String credentials)", "class_method_signature": "AbstractContextSource.setupAuthenticatedEnvironment(Hashtable<String, Object> env, String principal, String credentials)", "testcase": false, "constructor": false}, {"identifier": "closeContext", "parameters": "(DirContext ctx)", "modifiers": "private", "return": "void", "signature": "void closeContext(DirContext ctx)", "full_signature": "private void closeContext(DirContext ctx)", "class_method_signature": "AbstractContextSource.closeContext(DirContext ctx)", "testcase": false, "constructor": false}, {"identifier": "assembleProviderUrlString", "parameters": "(String[] ldapUrls)", "modifiers": "public", "return": "String", "signature": "String assembleProviderUrlString(String[] ldapUrls)", "full_signature": "public String assembleProviderUrlString(String[] ldapUrls)", "class_method_signature": "AbstractContextSource.assembleProviderUrlString(String[] ldapUrls)", "testcase": false, "constructor": false}, {"identifier": "formatForUrl", "parameters": "(LdapName ldapName)", "modifiers": "static", "return": "String", "signature": "String formatForUrl(LdapName ldapName)", "full_signature": "static String formatForUrl(LdapName ldapName)", "class_method_signature": "AbstractContextSource.formatForUrl(LdapName ldapName)", "testcase": false, "constructor": false}, {"identifier": "nameEncodeForUrl", "parameters": "(String value)", "modifiers": "static", "return": "String", "signature": "String nameEncodeForUrl(String value)", "full_signature": "static String nameEncodeForUrl(String value)", "class_method_signature": "AbstractContextSource.nameEncodeForUrl(String value)", "testcase": false, "constructor": false}, {"identifier": "setBase", "parameters": "(String base)", "modifiers": "public", "return": "void", "signature": "void setBase(String base)", "full_signature": "public void setBase(String base)", "class_method_signature": "AbstractContextSource.setBase(String base)", "testcase": false, "constructor": false}, {"identifier": "getBaseLdapPath", "parameters": "()", "modifiers": "@Override public", "return": "DistinguishedName", "signature": "DistinguishedName getBaseLdapPath()", "full_signature": "@Override public DistinguishedName getBaseLdapPath()", "class_method_signature": "AbstractContextSource.getBaseLdapPath()", "testcase": false, "constructor": false}, {"identifier": "getBaseLdapName", "parameters": "()", "modifiers": "@Override public", "return": "LdapName", "signature": "LdapName getBaseLdapName()", "full_signature": "@Override public LdapName getBaseLdapName()", "class_method_signature": "AbstractContextSource.getBaseLdapName()", "testcase": false, "constructor": false}, {"identifier": "getBaseLdapPathAsString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getBaseLdapPathAsString()", "full_signature": "@Override public String getBaseLdapPathAsString()", "class_method_signature": "AbstractContextSource.getBaseLdapPathAsString()", "testcase": false, "constructor": false}, {"identifier": "createContext", "parameters": "(Hashtable<String, Object> environment)", "modifiers": "protected", "return": "DirContext", "signature": "DirContext createContext(Hashtable<String, Object> environment)", "full_signature": "protected DirContext createContext(Hashtable<String, Object> environment)", "class_method_signature": "AbstractContextSource.createContext(Hashtable<String, Object> environment)", "testcase": false, "constructor": false}, {"identifier": "setContextFactory", "parameters": "(Class<?> contextFactory)", "modifiers": "public", "return": "void", "signature": "void setContextFactory(Class<?> contextFactory)", "full_signature": "public void setContextFactory(Class<?> contextFactory)", "class_method_signature": "AbstractContextSource.setContextFactory(Class<?> contextFactory)", "testcase": false, "constructor": false}, {"identifier": "getContextFactory", "parameters": "()", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getContextFactory()", "full_signature": "public Class<?> getContextFactory()", "class_method_signature": "AbstractContextSource.getContextFactory()", "testcase": false, "constructor": false}, {"identifier": "setDirObjectFactory", "parameters": "(Class<?> dirObjectFactory)", "modifiers": "public", "return": "void", "signature": "void setDirObjectFactory(Class<?> dirObjectFactory)", "full_signature": "public void setDirObjectFactory(Class<?> dirObjectFactory)", "class_method_signature": "AbstractContextSource.setDirObjectFactory(Class<?> dirObjectFactory)", "testcase": false, "constructor": false}, {"identifier": "getDirObjectFactory", "parameters": "()", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getDirObjectFactory()", "full_signature": "public Class<?> getDirObjectFactory()", "class_method_signature": "AbstractContextSource.getDirObjectFactory()", "testcase": false, "constructor": false}, {"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "public void afterPropertiesSet()", "class_method_signature": "AbstractContextSource.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "setupAnonymousEnv", "parameters": "()", "modifiers": "@SuppressWarnings(\"deprecation\") private", "return": "Hashtable<String, Object>", "signature": "Hashtable<String, Object> setupAnonymousEnv()", "full_signature": "@SuppressWarnings(\"deprecation\") private Hashtable<String, Object> setupAnonymousEnv()", "class_method_signature": "AbstractContextSource.setupAnonymousEnv()", "testcase": false, "constructor": false}, {"identifier": "setPassword", "parameters": "(String password)", "modifiers": "public", "return": "void", "signature": "void setPassword(String password)", "full_signature": "public void setPassword(String password)", "class_method_signature": "AbstractContextSource.setPassword(String password)", "testcase": false, "constructor": false}, {"identifier": "getPassword", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPassword()", "full_signature": "public String getPassword()", "class_method_signature": "AbstractContextSource.getPassword()", "testcase": false, "constructor": false}, {"identifier": "setUserDn", "parameters": "(String userDn)", "modifiers": "public", "return": "void", "signature": "void setUserDn(String userDn)", "full_signature": "public void setUserDn(String userDn)", "class_method_signature": "AbstractContextSource.setUserDn(String userDn)", "testcase": false, "constructor": false}, {"identifier": "getUserDn", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUserDn()", "full_signature": "public String getUserDn()", "class_method_signature": "AbstractContextSource.getUserDn()", "testcase": false, "constructor": false}, {"identifier": "setUrls", "parameters": "(String[] urls)", "modifiers": "public", "return": "void", "signature": "void setUrls(String[] urls)", "full_signature": "public void setUrls(String[] urls)", "class_method_signature": "AbstractContextSource.setUrls(String[] urls)", "testcase": false, "constructor": false}, {"identifier": "getUrls", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getUrls()", "full_signature": "public String[] getUrls()", "class_method_signature": "AbstractContextSource.getUrls()", "testcase": false, "constructor": false}, {"identifier": "setUrl", "parameters": "(String url)", "modifiers": "public", "return": "void", "signature": "void setUrl(String url)", "full_signature": "public void setUrl(String url)", "class_method_signature": "AbstractContextSource.setUrl(String url)", "testcase": false, "constructor": false}, {"identifier": "setPooled", "parameters": "(boolean pooled)", "modifiers": "public", "return": "void", "signature": "void setPooled(boolean pooled)", "full_signature": "public void setPooled(boolean pooled)", "class_method_signature": "AbstractContextSource.setPooled(boolean pooled)", "testcase": false, "constructor": false}, {"identifier": "isPooled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPooled()", "full_signature": "public boolean isPooled()", "class_method_signature": "AbstractContextSource.isPooled()", "testcase": false, "constructor": false}, {"identifier": "setBaseEnvironmentProperties", "parameters": "(Map<String, Object> baseEnvironmentProperties)", "modifiers": "public", "return": "void", "signature": "void setBaseEnvironmentProperties(Map<String, Object> baseEnvironmentProperties)", "full_signature": "public void setBaseEnvironmentProperties(Map<String, Object> baseEnvironmentProperties)", "class_method_signature": "AbstractContextSource.setBaseEnvironmentProperties(Map<String, Object> baseEnvironmentProperties)", "testcase": false, "constructor": false}, {"identifier": "getAnonymousEnv", "parameters": "()", "modifiers": "protected", "return": "Hashtable<String, Object>", "signature": "Hashtable<String, Object> getAnonymousEnv()", "full_signature": "protected Hashtable<String, Object> getAnonymousEnv()", "class_method_signature": "AbstractContextSource.getAnonymousEnv()", "testcase": false, "constructor": false}, {"identifier": "getAuthenticatedEnv", "parameters": "(String principal, String credentials)", "modifiers": "protected", "return": "Hashtable<String, Object>", "signature": "Hashtable<String, Object> getAuthenticatedEnv(String principal, String credentials)", "full_signature": "protected Hashtable<String, Object> getAuthenticatedEnv(String principal, String credentials)", "class_method_signature": "AbstractContextSource.getAuthenticatedEnv(String principal, String credentials)", "testcase": false, "constructor": false}, {"identifier": "setAuthenticationSource", "parameters": "(AuthenticationSource authenticationSource)", "modifiers": "public", "return": "void", "signature": "void setAuthenticationSource(AuthenticationSource authenticationSource)", "full_signature": "public void setAuthenticationSource(AuthenticationSource authenticationSource)", "class_method_signature": "AbstractContextSource.setAuthenticationSource(AuthenticationSource authenticationSource)", "testcase": false, "constructor": false}, {"identifier": "getAuthenticationSource", "parameters": "()", "modifiers": "public", "return": "AuthenticationSource", "signature": "AuthenticationSource getAuthenticationSource()", "full_signature": "public AuthenticationSource getAuthenticationSource()", "class_method_signature": "AbstractContextSource.getAuthenticationSource()", "testcase": false, "constructor": false}, {"identifier": "setCacheEnvironmentProperties", "parameters": "(boolean cacheEnvironmentProperties)", "modifiers": "public", "return": "void", "signature": "void setCacheEnvironmentProperties(boolean cacheEnvironmentProperties)", "full_signature": "public void setCacheEnvironmentProperties(boolean cacheEnvironmentProperties)", "class_method_signature": "AbstractContextSource.setCacheEnvironmentProperties(boolean cacheEnvironmentProperties)", "testcase": false, "constructor": false}, {"identifier": "setAnonymousReadOnly", "parameters": "(boolean anonymousReadOnly)", "modifiers": "public", "return": "void", "signature": "void setAnonymousReadOnly(boolean anonymousReadOnly)", "full_signature": "public void setAnonymousReadOnly(boolean anonymousReadOnly)", "class_method_signature": "AbstractContextSource.setAnonymousReadOnly(boolean anonymousReadOnly)", "testcase": false, "constructor": false}, {"identifier": "isAnonymousReadOnly", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAnonymousReadOnly()", "full_signature": "public boolean isAnonymousReadOnly()", "class_method_signature": "AbstractContextSource.isAnonymousReadOnly()", "testcase": false, "constructor": false}, {"identifier": "setAuthenticationStrategy", "parameters": "(DirContextAuthenticationStrategy authenticationStrategy)", "modifiers": "public", "return": "void", "signature": "void setAuthenticationStrategy(DirContextAuthenticationStrategy authenticationStrategy)", "full_signature": "public void setAuthenticationStrategy(DirContextAuthenticationStrategy authenticationStrategy)", "class_method_signature": "AbstractContextSource.setAuthenticationStrategy(DirContextAuthenticationStrategy authenticationStrategy)", "testcase": false, "constructor": false}, {"identifier": "setReferral", "parameters": "(String referral)", "modifiers": "public", "return": "void", "signature": "void setReferral(String referral)", "full_signature": "public void setReferral(String referral)", "class_method_signature": "AbstractContextSource.setReferral(String referral)", "testcase": false, "constructor": false}, {"identifier": "getDirContextInstance", "parameters": "(Hashtable<String, Object> environment)", "modifiers": "protected abstract", "return": "DirContext", "signature": "DirContext getDirContextInstance(Hashtable<String, Object> environment)", "full_signature": "protected abstract DirContext getDirContextInstance(Hashtable<String, Object> environment)", "class_method_signature": "AbstractContextSource.getDirContextInstance(Hashtable<String, Object> environment)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/springframework/ldap/core/support/AbstractContextSource.java"}, "focal_method": {"identifier": "formatForUrl", "parameters": "(LdapName ldapName)", "modifiers": "static", "return": "String", "body": "static String formatForUrl(LdapName ldapName) {\n        StringBuilder sb = new StringBuilder();\n        ListIterator<Rdn> it = ldapName.getRdns().listIterator(ldapName.size());\n        while (it.hasPrevious()) {\n            Rdn component = it.previous();\n\n            Attributes attributes = component.toAttributes();\n\n            // Loop through all attribute of the rdn (usually just one, but more are supported by RFC)\n            NamingEnumeration<? extends Attribute> allAttributes = attributes.getAll();\n            while(allAttributes.hasMoreElements()) {\n                Attribute oneAttribute = allAttributes.nextElement();\n                String encodedAttributeName = nameEncodeForUrl(oneAttribute.getID());\n\n                // Loop through all values of the attribute (usually just one, but more are supported by RFC)\n                NamingEnumeration <?> allValues;\n                try {\n                    allValues = oneAttribute.getAll();\n                } catch (NamingException e) {\n                    throw new UncategorizedLdapException(\"Unexpected error occurred formatting base URL\", e);\n                }\n\n                while(allValues.hasMoreElements()) {\n                    sb.append(encodedAttributeName).append('=');\n\n                    Object oneValue = allValues.nextElement();\n                    if (oneValue instanceof String) {\n                        String oneString = (String) oneValue;\n                        sb.append(nameEncodeForUrl(oneString));\n                    } else {\n                        throw new IllegalArgumentException(\"Binary attributes not supported for base URL\");\n                    }\n\n                    if(allValues.hasMoreElements()) {\n                        sb.append('+');\n                    }\n                }\n                if(allAttributes.hasMoreElements()) {\n                    sb.append('+');\n                }\n            }\n\n            if(it.hasPrevious()) {\n                sb.append(',');\n            }\n        }\n        return sb.toString();\n    }", "signature": "String formatForUrl(LdapName ldapName)", "full_signature": "static String formatForUrl(LdapName ldapName)", "class_method_signature": "AbstractContextSource.formatForUrl(LdapName ldapName)", "testcase": false, "constructor": false, "invocations": ["listIterator", "getRdns", "size", "hasPrevious", "previous", "toAttributes", "getAll", "hasMoreElements", "nextElement", "nameEncodeForUrl", "getID", "getAll", "hasMoreElements", "append", "append", "nextElement", "append", "nameEncodeForUrl", "hasMoreElements", "append", "hasMoreElements", "append", "hasPrevious", "append", "toString"]}, "repository": {"repo_id": 11136641, "url": "https://github.com/spring-projects/spring-ldap", "language": "Java", "is_fork": false, "fork_count": 433, "stargazer_count": 240, "size": 24447, "license": "licensed"}}