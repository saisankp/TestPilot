{"test_class": {"identifier": "DataSourceCfgUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mocked\n    private OperateProperties operateProperties;", "modifier": "@Mocked\n    private", "type": "OperateProperties", "declarator": "operateProperties", "var_name": "operateProperties"}], "file": "zebra/zebra-database/src/test/java/com/guosen/zebra/database/mybatis/conf/DataSourceCfgUtilTest.java"}, "test_case": {"identifier": "testDataSourceNameBlank", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDataSourceNameBlank() {\n\n        final String ds0Url = \"www.baidu.com\";\n        final String ds0BasePackage = \"com.guosen.zebra.ping\";\n\n        new Expectations() {\n            {\n                OperateProperties.getStrValue(\"zebra.database.url[0]\", StringUtils.EMPTY);\n                result = ds0Url;\n            }\n            {\n                OperateProperties.getStrValue(\"zebra.database.basePackage[0]\", StringUtils.EMPTY);\n                result = ds0BasePackage;\n            }\n            {\n                OperateProperties.getStrValue(\"zebra.database.dataSourceName[0]\", StringUtils.EMPTY);\n                result = StringUtils.EMPTY;\n            }\n        };\n\n        try {\n            DataSourceCfgUtil.getDataSourceCfgList();\n            fail(\"Must have exception.\");\n        }\n        catch (IllegalArgumentException e) {\n            assertThat(e.getMessage(), equalTo(\"zebra.database.dataSourceName[0] must be config.\"));\n        }\n    }", "signature": "void testDataSourceNameBlank()", "full_signature": "@Test public void testDataSourceNameBlank()", "class_method_signature": "DataSourceCfgUtilTest.testDataSourceNameBlank()", "testcase": true, "constructor": false, "invocations": ["getStrValue", "getStrValue", "getStrValue", "getDataSourceCfgList", "fail", "assertThat", "getMessage", "equalTo"]}, "focal_class": {"identifier": "DataSourceCfgUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int MAX_DATA_SOURCE_COUNT = 10;", "modifier": "private static final", "type": "int", "declarator": "MAX_DATA_SOURCE_COUNT = 10", "var_name": "MAX_DATA_SOURCE_COUNT"}, {"original_string": "private static final String URL_KEY_FORMAT = \"zebra.database.url[%d]\";", "modifier": "private static final", "type": "String", "declarator": "URL_KEY_FORMAT = \"zebra.database.url[%d]\"", "var_name": "URL_KEY_FORMAT"}, {"original_string": "private static final String BASE_PACKAGE_FORMAT = \"zebra.database.basePackage[%d]\";", "modifier": "private static final", "type": "String", "declarator": "BASE_PACKAGE_FORMAT = \"zebra.database.basePackage[%d]\"", "var_name": "BASE_PACKAGE_FORMAT"}, {"original_string": "private static final String DATA_SOURCE_NAME_KEY_FORMAT = \"zebra.database.dataSourceName[%d]\";", "modifier": "private static final", "type": "String", "declarator": "DATA_SOURCE_NAME_KEY_FORMAT = \"zebra.database.dataSourceName[%d]\"", "var_name": "DATA_SOURCE_NAME_KEY_FORMAT"}, {"original_string": "private static final String USER_NAME_KEY_FORMAT = \"zebra.database.username[%d]\";", "modifier": "private static final", "type": "String", "declarator": "USER_NAME_KEY_FORMAT = \"zebra.database.username[%d]\"", "var_name": "USER_NAME_KEY_FORMAT"}, {"original_string": "private static final String PASSWORD_KEY_FORMAT = \"zebra.database.pwd[%d]\";", "modifier": "private static final", "type": "String", "declarator": "PASSWORD_KEY_FORMAT = \"zebra.database.pwd[%d]\"", "var_name": "PASSWORD_KEY_FORMAT"}, {"original_string": "private static final String DRIVER_CLASS_KEY_FORMAT = \"zebra.database.driverClass[%d]\";", "modifier": "private static final", "type": "String", "declarator": "DRIVER_CLASS_KEY_FORMAT = \"zebra.database.driverClass[%d]\"", "var_name": "DRIVER_CLASS_KEY_FORMAT"}, {"original_string": "private static final Set<String> BLANK_ABLE_CONF_FORMAT = Sets.newHashSet(\n            URL_KEY_FORMAT,           // URL\u4f5c\u4e3a\u5224\u65ad\u89e3\u6790\u662f\u5426\u7ec8\u6b62\u7684\u5b57\u6bb5\n            BASE_PACKAGE_FORMAT,      // \u88absharding\u5f15\u7528\u7684\u6570\u636e\u6e90base package\u53ef\u4ee5\u4e3a\u7a7a\n            PASSWORD_KEY_FORMAT,      // \u6709\u65f6\u5019\u5bc6\u7801\u4e3a\u7a7a\uff08\u6bd4\u5982\u5f00\u53d1\u73af\u5883\uff09\n            DRIVER_CLASS_KEY_FORMAT   // driver\u53ea\u5728druid\u4e0d\u80fd\u81ea\u52a8\u8bc6\u522b\u65f6\u624d\u8981\u914d\u7f6e\n    );", "modifier": "private static final", "type": "Set<String>", "declarator": "BLANK_ABLE_CONF_FORMAT = Sets.newHashSet(\n            URL_KEY_FORMAT,           // URL\u4f5c\u4e3a\u5224\u65ad\u89e3\u6790\u662f\u5426\u7ec8\u6b62\u7684\u5b57\u6bb5\n            BASE_PACKAGE_FORMAT,      // \u88absharding\u5f15\u7528\u7684\u6570\u636e\u6e90base package\u53ef\u4ee5\u4e3a\u7a7a\n            PASSWORD_KEY_FORMAT,      // \u6709\u65f6\u5019\u5bc6\u7801\u4e3a\u7a7a\uff08\u6bd4\u5982\u5f00\u53d1\u73af\u5883\uff09\n            DRIVER_CLASS_KEY_FORMAT   // driver\u53ea\u5728druid\u4e0d\u80fd\u81ea\u52a8\u8bc6\u522b\u65f6\u624d\u8981\u914d\u7f6e\n    )", "var_name": "BLANK_ABLE_CONF_FORMAT"}], "methods": [{"identifier": "DataSourceCfgUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " DataSourceCfgUtil()", "full_signature": "private  DataSourceCfgUtil()", "class_method_signature": "DataSourceCfgUtil.DataSourceCfgUtil()", "testcase": false, "constructor": true}, {"identifier": "getDataSourceCfgList", "parameters": "()", "modifiers": "public static", "return": "List<DataSourceCfg>", "signature": "List<DataSourceCfg> getDataSourceCfgList()", "full_signature": "public static List<DataSourceCfg> getDataSourceCfgList()", "class_method_signature": "DataSourceCfgUtil.getDataSourceCfgList()", "testcase": false, "constructor": false}, {"identifier": "getDataSourceCfg", "parameters": "(int index)", "modifiers": "private static", "return": "DataSourceCfg", "signature": "DataSourceCfg getDataSourceCfg(int index)", "full_signature": "private static DataSourceCfg getDataSourceCfg(int index)", "class_method_signature": "DataSourceCfgUtil.getDataSourceCfg(int index)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(String keyFormat, int index)", "modifiers": "private static", "return": "String", "signature": "String getValue(String keyFormat, int index)", "full_signature": "private static String getValue(String keyFormat, int index)", "class_method_signature": "DataSourceCfgUtil.getValue(String keyFormat, int index)", "testcase": false, "constructor": false}], "file": "zebra/zebra-database/src/main/java/com/guosen/zebra/database/mybatis/conf/DataSourceCfgUtil.java"}, "focal_method": {"identifier": "getDataSourceCfgList", "parameters": "()", "modifiers": "public static", "return": "List<DataSourceCfg>", "body": "public static List<DataSourceCfg> getDataSourceCfgList() {\n        List<DataSourceCfg> dataSourceCfgList = new ArrayList<>(MAX_DATA_SOURCE_COUNT);\n        for (int i = 0; i < MAX_DATA_SOURCE_COUNT; i++) {\n            DataSourceCfg dataSourceCfg = getDataSourceCfg(i);\n            if (dataSourceCfg == null) {\n                break;\n            }\n\n            dataSourceCfgList.add(dataSourceCfg);\n        }\n\n        return dataSourceCfgList;\n    }", "signature": "List<DataSourceCfg> getDataSourceCfgList()", "full_signature": "public static List<DataSourceCfg> getDataSourceCfgList()", "class_method_signature": "DataSourceCfgUtil.getDataSourceCfgList()", "testcase": false, "constructor": false, "invocations": ["getDataSourceCfg", "add"]}, "repository": {"repo_id": 227543326, "url": "https://github.com/gszebra/zebra", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 15, "size": 2223, "license": "licensed"}}