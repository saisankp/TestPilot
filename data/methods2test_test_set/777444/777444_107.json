{"test_class": {"identifier": "AuthorizationHeaderParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "agent/core/src/test/java/org/jolokia/util/AuthorizationHeaderParserTest.java"}, "test_case": {"identifier": "testParseAuthorizationWrongMethod", "parameters": "()", "modifiers": "@Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \".*BasicAuthentication.*\") public", "return": "void", "body": "@Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \".*BasicAuthentication.*\")\n    public void testParseAuthorizationWrongMethod() throws Exception {\n        AuthorizationHeaderParser.parse(\"Digest cm9sYW5kOnMhY3IhdA==\");\n    }", "signature": "void testParseAuthorizationWrongMethod()", "full_signature": "@Test(expectedExceptions = IllegalArgumentException.class, expectedExceptionsMessageRegExp = \".*BasicAuthentication.*\") public void testParseAuthorizationWrongMethod()", "class_method_signature": "AuthorizationHeaderParserTest.testParseAuthorizationWrongMethod()", "testcase": true, "constructor": false, "invocations": ["parse"]}, "focal_class": {"identifier": "AuthorizationHeaderParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String JOLOKIA_ALTERNATE_AUTHORIZATION_HEADER=\"X-jolokia-authorization\";", "modifier": "public static final", "type": "String", "declarator": "JOLOKIA_ALTERNATE_AUTHORIZATION_HEADER=\"X-jolokia-authorization\"", "var_name": "JOLOKIA_ALTERNATE_AUTHORIZATION_HEADER"}], "methods": [{"identifier": "AuthorizationHeaderParser", "parameters": "()", "modifiers": "private", "return": "", "signature": " AuthorizationHeaderParser()", "full_signature": "private  AuthorizationHeaderParser()", "class_method_signature": "AuthorizationHeaderParser.AuthorizationHeaderParser()", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(String pAuthInfo)", "modifiers": "public static", "return": "Result", "signature": "Result parse(String pAuthInfo)", "full_signature": "public static Result parse(String pAuthInfo)", "class_method_signature": "AuthorizationHeaderParser.parse(String pAuthInfo)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/util/AuthorizationHeaderParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String pAuthInfo)", "modifiers": "public static", "return": "Result", "body": "public static Result parse(String pAuthInfo) {\n        StringTokenizer stok = new StringTokenizer(pAuthInfo);\n        String method = stok.nextToken();\n        if (!HttpServletRequest.BASIC_AUTH.equalsIgnoreCase(method)) {\n            throw new IllegalArgumentException(\"Only BasicAuthentication is supported\");\n        }\n\n        String b64Auth = stok.nextToken();\n        String auth = new String(Base64Util.decode(b64Auth));\n\n        int p = auth.indexOf(':');\n        String user;\n        String password;\n        boolean valid;\n        if (p != -1) {\n            user = auth.substring(0, p);\n            password = auth.substring(p+1);\n            valid = true;\n        } else {\n            valid = false;\n            user = null;\n            password = null;\n        }\n        return new Result(method,user,password,valid);\n    }", "signature": "Result parse(String pAuthInfo)", "full_signature": "public static Result parse(String pAuthInfo)", "class_method_signature": "AuthorizationHeaderParser.parse(String pAuthInfo)", "testcase": false, "constructor": false, "invocations": ["nextToken", "equalsIgnoreCase", "nextToken", "decode", "indexOf", "substring", "substring"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}