{"test_class": {"identifier": "FileOrDirectoryTaskOutputTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private File file;", "modifier": "private", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private File directory;", "modifier": "private", "type": "File", "declarator": "directory", "var_name": "directory"}], "file": "sejda-model/src/test/java/org/sejda/model/output/FileOrDirectoryTaskOutputTest.java"}, "test_case": {"identifier": "fileFactoryValidFile_doesntExist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void fileFactoryValidFile_doesntExist() {\n        when(file.isFile()).thenReturn(Boolean.FALSE);\n        when(file.exists()).thenReturn(Boolean.FALSE);\n\n        FileOrDirectoryTaskOutput instance = FileOrDirectoryTaskOutput.file(file);\n        assertNotNull(instance);\n    }", "signature": "void fileFactoryValidFile_doesntExist()", "full_signature": "@Test public void fileFactoryValidFile_doesntExist()", "class_method_signature": "FileOrDirectoryTaskOutputTest.fileFactoryValidFile_doesntExist()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "isFile", "thenReturn", "when", "exists", "file", "assertNotNull"]}, "focal_class": {"identifier": "FileOrDirectoryTaskOutput", "superclass": "extends AbstractTaskOutput", "interfaces": "implements SingleOrMultipleTaskOutput", "fields": [{"original_string": "private File file;", "modifier": "private", "type": "File", "declarator": "file", "var_name": "file"}], "methods": [{"identifier": "FileOrDirectoryTaskOutput", "parameters": "(File file)", "modifiers": "public", "return": "", "signature": " FileOrDirectoryTaskOutput(File file)", "full_signature": "public  FileOrDirectoryTaskOutput(File file)", "class_method_signature": "FileOrDirectoryTaskOutput.FileOrDirectoryTaskOutput(File file)", "testcase": false, "constructor": true}, {"identifier": "getDestination", "parameters": "()", "modifiers": "@Override public", "return": "File", "signature": "File getDestination()", "full_signature": "@Override public File getDestination()", "class_method_signature": "FileOrDirectoryTaskOutput.getDestination()", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(TaskOutputDispatcher writer)", "modifiers": "@Override public", "return": "void", "signature": "void accept(TaskOutputDispatcher writer)", "full_signature": "@Override public void accept(TaskOutputDispatcher writer)", "class_method_signature": "FileOrDirectoryTaskOutput.accept(TaskOutputDispatcher writer)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "FileOrDirectoryTaskOutput.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "FileOrDirectoryTaskOutput.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "FileOrDirectoryTaskOutput.equals(Object other)", "testcase": false, "constructor": false}, {"identifier": "file", "parameters": "(File file)", "modifiers": "public static", "return": "FileOrDirectoryTaskOutput", "signature": "FileOrDirectoryTaskOutput file(File file)", "full_signature": "public static FileOrDirectoryTaskOutput file(File file)", "class_method_signature": "FileOrDirectoryTaskOutput.file(File file)", "testcase": false, "constructor": false}, {"identifier": "directory", "parameters": "(File directory)", "modifiers": "public static", "return": "FileOrDirectoryTaskOutput", "signature": "FileOrDirectoryTaskOutput directory(File directory)", "full_signature": "public static FileOrDirectoryTaskOutput directory(File directory)", "class_method_signature": "FileOrDirectoryTaskOutput.directory(File directory)", "testcase": false, "constructor": false}], "file": "sejda-model/src/main/java/org/sejda/model/output/FileOrDirectoryTaskOutput.java"}, "focal_method": {"identifier": "file", "parameters": "(File file)", "modifiers": "public static", "return": "FileOrDirectoryTaskOutput", "body": "public static FileOrDirectoryTaskOutput file(File file) {\n        if (file == null || (file.exists() && !file.isFile())) {\n            throw new IllegalArgumentException(\"A valid instance is expected (not null or existing file).\");\n        }\n        return new FileOrDirectoryTaskOutput(file);\n    }", "signature": "FileOrDirectoryTaskOutput file(File file)", "full_signature": "public static FileOrDirectoryTaskOutput file(File file)", "class_method_signature": "FileOrDirectoryTaskOutput.file(File file)", "testcase": false, "constructor": false, "invocations": ["exists", "isFile"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}