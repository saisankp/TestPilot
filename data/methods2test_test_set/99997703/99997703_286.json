{"test_class": {"identifier": "RandomWeightedChooserTest", "superclass": "", "interfaces": "", "fields": [], "file": "OcavaCore/src/test/java/com/ocadotechnology/random/RandomWeightedChooserTest.java"}, "test_case": {"identifier": "whenRepeatableRandomReturnsSpecificValue_thenReturnsAppropriateItem", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void whenRepeatableRandomReturnsSpecificValue_thenReturnsAppropriateItem() {\n        ImmutableMap<String, Double> weightedMap = ImmutableMap.of(\"A\", 1d, \"B\", 2d, \"C\", 3d);\n        RandomWeightedChooser chooser = new RandomWeightedChooser<>(weightedMap);\n        double sum = weightedMap.values().stream().mapToDouble(w -> w).sum();\n\n        RepeatableRandom.initialiseWithFixedValue(0 / sum);\n        Assertions.assertEquals(chooser.choose(), \"A\");\n        RepeatableRandom.initialiseWithFixedValue(0.9 / sum);\n        Assertions.assertEquals(chooser.choose(), \"A\");\n        RepeatableRandom.initialiseWithFixedValue(1.1 / sum);\n        Assertions.assertEquals(chooser.choose(), \"B\");\n        RepeatableRandom.initialiseWithFixedValue(2.9 / sum);\n        Assertions.assertEquals(chooser.choose(), \"B\");\n        RepeatableRandom.initialiseWithFixedValue(3.1 / sum);\n        Assertions.assertEquals(chooser.choose(), \"C\");\n        RepeatableRandom.initialiseWithFixedValue(5.9 / sum);\n        Assertions.assertEquals(chooser.choose(), \"C\");\n    }", "signature": "void whenRepeatableRandomReturnsSpecificValue_thenReturnsAppropriateItem()", "full_signature": "@Test public void whenRepeatableRandomReturnsSpecificValue_thenReturnsAppropriateItem()", "class_method_signature": "RandomWeightedChooserTest.whenRepeatableRandomReturnsSpecificValue_thenReturnsAppropriateItem()", "testcase": true, "constructor": false, "invocations": ["of", "sum", "mapToDouble", "stream", "values", "initialiseWithFixedValue", "assertEquals", "choose", "initialiseWithFixedValue", "assertEquals", "choose", "initialiseWithFixedValue", "assertEquals", "choose", "initialiseWithFixedValue", "assertEquals", "choose", "initialiseWithFixedValue", "assertEquals", "choose", "initialiseWithFixedValue", "assertEquals", "choose"]}, "focal_class": {"identifier": "RandomWeightedChooser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ImmutableMap<E, Double> itemsByWeight;", "modifier": "private final", "type": "ImmutableMap<E, Double>", "declarator": "itemsByWeight", "var_name": "itemsByWeight"}, {"original_string": "private final double sumOfWeights;", "modifier": "private final", "type": "double", "declarator": "sumOfWeights", "var_name": "sumOfWeights"}], "methods": [{"identifier": "RandomWeightedChooser", "parameters": "(ImmutableMap<E, Double> itemsByWeight)", "modifiers": "public", "return": "", "signature": " RandomWeightedChooser(ImmutableMap<E, Double> itemsByWeight)", "full_signature": "public  RandomWeightedChooser(ImmutableMap<E, Double> itemsByWeight)", "class_method_signature": "RandomWeightedChooser.RandomWeightedChooser(ImmutableMap<E, Double> itemsByWeight)", "testcase": false, "constructor": true}, {"identifier": "choose", "parameters": "()", "modifiers": "public", "return": "E", "signature": "E choose()", "full_signature": "public E choose()", "class_method_signature": "RandomWeightedChooser.choose()", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/random/RandomWeightedChooser.java"}, "focal_method": {"identifier": "choose", "parameters": "()", "modifiers": "public", "return": "E", "body": "public E choose() {\n        double rand = RepeatableRandom.nextDouble() * sumOfWeights;\n        double cumulativeSum = 0;\n        for (Entry<E, Double> entry : itemsByWeight.entrySet()) {\n            cumulativeSum += entry.getValue();\n            if (cumulativeSum > rand) { // Not \">=\" to avoid choosing zero weight items when rand is 0!\n                return entry.getKey();\n            }\n        }\n        throw Failer.fail(\"Failed to make a random choice between specified elements\");\n    }", "signature": "E choose()", "full_signature": "public E choose()", "class_method_signature": "RandomWeightedChooser.choose()", "testcase": false, "constructor": false, "invocations": ["nextDouble", "entrySet", "getValue", "getKey", "fail"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}