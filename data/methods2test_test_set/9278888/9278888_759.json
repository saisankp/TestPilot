{"test_class": {"identifier": "BaggagePropagationTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "BaggageField vcapRequestId = BaggageField.create(\"x-vcap-request-id\");", "modifier": "", "type": "BaggageField", "declarator": "vcapRequestId = BaggageField.create(\"x-vcap-request-id\")", "var_name": "vcapRequestId"}, {"original_string": "BaggageField amznTraceId = BaggageField.create(\"x-amzn-trace-id\");", "modifier": "", "type": "BaggageField", "declarator": "amznTraceId = BaggageField.create(\"x-amzn-trace-id\")", "var_name": "amznTraceId"}, {"original_string": "String awsTraceId =\n    \"Root=1-67891233-abcdef012345678912345678;Parent=463ac35c9f6413ad;Sampled=1\";", "modifier": "", "type": "String", "declarator": "awsTraceId =\n    \"Root=1-67891233-abcdef012345678912345678;Parent=463ac35c9f6413ad;Sampled=1\"", "var_name": "awsTraceId"}, {"original_string": "String uuid = \"f4308d05-2228-4468-80f6-92a8377ba193\";", "modifier": "", "type": "String", "declarator": "uuid = \"f4308d05-2228-4468-80f6-92a8377ba193\"", "var_name": "uuid"}, {"original_string": "Propagation.Factory factory = newFactoryBuilder(B3Propagation.FACTORY)\n    .add(SingleBaggageField.remote(vcapRequestId))\n    .add(SingleBaggageField.remote(amznTraceId)).build();", "modifier": "", "type": "Propagation.Factory", "declarator": "factory = newFactoryBuilder(B3Propagation.FACTORY)\n    .add(SingleBaggageField.remote(vcapRequestId))\n    .add(SingleBaggageField.remote(amznTraceId)).build()", "var_name": "factory"}, {"original_string": "Map<String, String> request = new LinkedHashMap<>();", "modifier": "", "type": "Map<String, String>", "declarator": "request = new LinkedHashMap<>()", "var_name": "request"}, {"original_string": "Injector<Map<String, String>> injector;", "modifier": "", "type": "Injector<Map<String, String>>", "declarator": "injector", "var_name": "injector"}, {"original_string": "Extractor<Map<String, String>> extractor;", "modifier": "", "type": "Extractor<Map<String, String>>", "declarator": "extractor", "var_name": "extractor"}, {"original_string": "TraceContext context;", "modifier": "", "type": "TraceContext", "declarator": "context", "var_name": "context"}], "file": "brave/src/test/java/brave/baggage/BaggagePropagationTest.java"}, "test_case": {"identifier": "extract_field_multiple_key_names", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void extract_field_multiple_key_names() {\n    // switch to case insensitive as this example is about http :P\n    request = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n\n    BaggageField userId = BaggageField.create(\"userId\");\n    BaggageField sessionId = BaggageField.create(\"sessionId\");\n\n    SingleBaggageField userIdConfig = SingleBaggageField.newBuilder(userId)\n      .addKeyName(\"baggage-userId\")\n      .addKeyName(\"baggage_userId\")\n      .build();\n\n    SingleBaggageField sessionIdConfig = SingleBaggageField.newBuilder(sessionId)\n      .addKeyName(\"baggage-sessionId\")\n      .addKeyName(\"baggage_sessionId\")\n      .build();\n\n    factory = newFactoryBuilder(B3Propagation.FACTORY)\n      .add(userIdConfig)\n      .add(sessionIdConfig)\n      .build();\n    initialize();\n\n    injector.inject(context, request);\n    request.put(\"baggage-userId\", \"bob\");\n    request.put(\"baggage-sessionId\", \"12345\");\n\n    context = extractor.extract(request).context();\n\n    assertThat(userId.getValue(context)).isEqualTo(\"bob\");\n    assertThat(sessionId.getValue(context)).isEqualTo(\"12345\");\n  }", "signature": "void extract_field_multiple_key_names()", "full_signature": "@Test public void extract_field_multiple_key_names()", "class_method_signature": "BaggagePropagationTest.extract_field_multiple_key_names()", "testcase": true, "constructor": false, "invocations": ["create", "create", "build", "addKeyName", "addKeyName", "newBuilder", "build", "addKeyName", "addKeyName", "newBuilder", "build", "add", "add", "newFactoryBuilder", "initialize", "inject", "put", "put", "context", "extract", "isEqualTo", "assertThat", "getValue", "isEqualTo", "assertThat", "getValue"]}, "focal_class": {"identifier": "BaggagePropagation", "superclass": "", "interfaces": "implements Propagation<K>", "fields": [{"original_string": "final Propagation<K> delegate;", "modifier": "final", "type": "Propagation<K>", "declarator": "delegate", "var_name": "delegate"}], "methods": [{"identifier": "newFactoryBuilder", "parameters": "(Propagation.Factory delegate)", "modifiers": "public static", "return": "FactoryBuilder", "signature": "FactoryBuilder newFactoryBuilder(Propagation.Factory delegate)", "full_signature": "public static FactoryBuilder newFactoryBuilder(Propagation.Factory delegate)", "class_method_signature": "BaggagePropagation.newFactoryBuilder(Propagation.Factory delegate)", "testcase": false, "constructor": false}, {"identifier": "BaggagePropagation", "parameters": "(Propagation<K> delegate)", "modifiers": "", "return": "", "signature": " BaggagePropagation(Propagation<K> delegate)", "full_signature": "  BaggagePropagation(Propagation<K> delegate)", "class_method_signature": "BaggagePropagation.BaggagePropagation(Propagation<K> delegate)", "testcase": false, "constructor": true}, {"identifier": "keys", "parameters": "()", "modifiers": "@Override public", "return": "List<K>", "signature": "List<K> keys()", "full_signature": "@Override public List<K> keys()", "class_method_signature": "BaggagePropagation.keys()", "testcase": false, "constructor": false}, {"identifier": "allKeyNames", "parameters": "(Propagation<String> propagation)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> allKeyNames(Propagation<String> propagation)", "full_signature": "public static List<String> allKeyNames(Propagation<String> propagation)", "class_method_signature": "BaggagePropagation.allKeyNames(Propagation<String> propagation)", "testcase": false, "constructor": false}, {"identifier": "getAllKeyNames", "parameters": "(TraceContextOrSamplingFlags extracted)", "modifiers": "static", "return": "List<String>", "signature": "List<String> getAllKeyNames(TraceContextOrSamplingFlags extracted)", "full_signature": "static List<String> getAllKeyNames(TraceContextOrSamplingFlags extracted)", "class_method_signature": "BaggagePropagation.getAllKeyNames(TraceContextOrSamplingFlags extracted)", "testcase": false, "constructor": false}, {"identifier": "injector", "parameters": "(Setter<R, K> setter)", "modifiers": "@Override public", "return": "Injector<R>", "signature": "Injector<R> injector(Setter<R, K> setter)", "full_signature": "@Override public Injector<R> injector(Setter<R, K> setter)", "class_method_signature": "BaggagePropagation.injector(Setter<R, K> setter)", "testcase": false, "constructor": false}, {"identifier": "extractor", "parameters": "(Getter<R, K> getter)", "modifiers": "@Override public", "return": "Extractor<R>", "signature": "Extractor<R> extractor(Getter<R, K> getter)", "full_signature": "@Override public Extractor<R> extractor(Getter<R, K> getter)", "class_method_signature": "BaggagePropagation.extractor(Getter<R, K> getter)", "testcase": false, "constructor": false}], "file": "brave/src/main/java/brave/baggage/BaggagePropagation.java"}, "focal_method": {"identifier": "newFactoryBuilder", "parameters": "(Propagation.Factory delegate)", "modifiers": "public static", "return": "FactoryBuilder", "body": "public static FactoryBuilder newFactoryBuilder(Propagation.Factory delegate) {\n    return new FactoryBuilder(delegate);\n  }", "signature": "FactoryBuilder newFactoryBuilder(Propagation.Factory delegate)", "full_signature": "public static FactoryBuilder newFactoryBuilder(Propagation.Factory delegate)", "class_method_signature": "BaggagePropagation.newFactoryBuilder(Propagation.Factory delegate)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}