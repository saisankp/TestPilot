{"test_class": {"identifier": "BsonRequestTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(BsonRequestTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(BsonRequestTest.class)", "var_name": "LOG"}, {"original_string": "@Rule\n    public TestRule watcher = new TestWatcher() {\n        @Override\n        protected void starting(Description description) {\n            LOG.info(\"executing test {}\", description.toString());\n        }\n    };", "modifier": "@Rule\n    public", "type": "TestRule", "declarator": "watcher = new TestWatcher() {\n        @Override\n        protected void starting(Description description) {\n            LOG.info(\"executing test {}\", description.toString());\n        }\n    }", "var_name": "watcher"}], "file": "commons/src/test/java/org/restheart/exchange/BsonRequestTest.java"}, "test_case": {"identifier": "testGetMappedRequestUri", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"deprecation\") public", "return": "void", "body": "@Test\n    @SuppressWarnings(\"deprecation\")\n    public void testGetMappedRequestUri() {\n        HttpServerExchange ex = mock(HttpServerExchange.class);\n        when(ex.getRequestPath()).thenReturn(\"/\");\n        when(ex.getRequestMethod()).thenReturn(HttpString.EMPTY);\n\n        String whatUri = \"/db/mycollection\";\n        String whereUri = \"/\";\n\n        MongoRequest request = MongoRequest.init(ex, whereUri, whatUri);\n        assertEquals(\"/db/mycollection\", request.getUnmappedRequestUri());\n\n        whatUri = \"*\";\n        whereUri = \"/\";\n\n        request = MongoRequest.init(ex, whereUri, whatUri);\n        assertEquals(\"/\", request.getUnmappedRequestUri());\n\n        whatUri = \"*\";\n        whereUri = \"/data\";\n\n        request = MongoRequest.init(ex, whereUri, whatUri);\n        assertEquals(\"/\", request.getUnmappedRequestUri());\n\n        whatUri = \"/data\";\n        whereUri = \"/\";\n\n        request = MongoRequest.init(ex, whereUri, whatUri);\n        assertEquals(\"/data\", request.getUnmappedRequestUri());\n\n        whatUri = \"/db/coll\";\n        whereUri = \"/\";\n\n        request = MongoRequest.init(ex, whereUri, whatUri);\n        assertEquals(\"/db/coll\", request.getUnmappedRequestUri());\n\n        whatUri = \"/db/coll/doc\";\n        whereUri = \"/\";\n\n        request = MongoRequest.init(ex, whereUri, whatUri);\n        assertEquals(\"/db/coll/doc\", request.getUnmappedRequestUri());\n\n        whatUri = \"/db/coll/\";\n        whereUri = \"/\";\n\n        request = MongoRequest.init(ex, whereUri, whatUri);\n        assertEquals(\"/db/coll\", request.getUnmappedRequestUri());\n\n        whatUri = \"/db/coll////\";\n        whereUri = \"/\";\n\n        request = MongoRequest.init(ex, whereUri, whatUri);\n        assertEquals(\"/db/coll\", request.getUnmappedRequestUri());\n    }", "signature": "void testGetMappedRequestUri()", "full_signature": "@Test @SuppressWarnings(\"deprecation\") public void testGetMappedRequestUri()", "class_method_signature": "BsonRequestTest.testGetMappedRequestUri()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getRequestPath", "thenReturn", "when", "getRequestMethod", "init", "assertEquals", "getUnmappedRequestUri", "init", "assertEquals", "getUnmappedRequestUri", "init", "assertEquals", "getUnmappedRequestUri", "init", "assertEquals", "getUnmappedRequestUri", "init", "assertEquals", "getUnmappedRequestUri", "init", "assertEquals", "getUnmappedRequestUri", "init", "assertEquals", "getUnmappedRequestUri", "init", "assertEquals", "getUnmappedRequestUri"]}, "focal_class": {"identifier": "BsonRequest", "superclass": "extends ServiceRequest<BsonValue>", "interfaces": "", "fields": [], "methods": [{"identifier": "BsonRequest", "parameters": "(HttpServerExchange exchange)", "modifiers": "protected", "return": "", "signature": " BsonRequest(HttpServerExchange exchange)", "full_signature": "protected  BsonRequest(HttpServerExchange exchange)", "class_method_signature": "BsonRequest.BsonRequest(HttpServerExchange exchange)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(HttpServerExchange exchange)", "modifiers": "public static", "return": "BsonRequest", "signature": "BsonRequest init(HttpServerExchange exchange)", "full_signature": "public static BsonRequest init(HttpServerExchange exchange)", "class_method_signature": "BsonRequest.init(HttpServerExchange exchange)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(HttpServerExchange exchange)", "modifiers": "public static", "return": "BsonRequest", "signature": "BsonRequest of(HttpServerExchange exchange)", "full_signature": "public static BsonRequest of(HttpServerExchange exchange)", "class_method_signature": "BsonRequest.of(HttpServerExchange exchange)", "testcase": false, "constructor": false}, {"identifier": "injectContent", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void injectContent()", "full_signature": "public void injectContent()", "class_method_signature": "BsonRequest.injectContent()", "testcase": false, "constructor": false}], "file": "commons/src/main/java/org/restheart/exchange/BsonRequest.java"}, "focal_method": {"identifier": "init", "parameters": "(HttpServerExchange exchange)", "modifiers": "public static", "return": "BsonRequest", "body": "public static BsonRequest init(HttpServerExchange exchange) {\n        var ret = new BsonRequest(exchange);\n\n        try {\n            ret.injectContent();\n        } catch (Throwable ieo) {\n            ret.setInError(true);\n        }\n\n        return ret;\n    }", "signature": "BsonRequest init(HttpServerExchange exchange)", "full_signature": "public static BsonRequest init(HttpServerExchange exchange)", "class_method_signature": "BsonRequest.init(HttpServerExchange exchange)", "testcase": false, "constructor": false, "invocations": ["injectContent", "setInError"]}, "repository": {"repo_id": 26722690, "url": "https://github.com/SoftInstigate/restheart", "stars": 582, "created": "11/16/2014 6:01:01 PM +00:00", "updates": "2020-01-18T15:31:59+00:00", "fork": "False", "license": "licensed"}}