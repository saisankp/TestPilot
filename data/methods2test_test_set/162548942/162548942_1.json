{"test_class": {"identifier": "ZookeeperNamingServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TestingServer zkServer;", "modifier": "private", "type": "TestingServer", "declarator": "zkServer", "var_name": "zkServer"}, {"original_string": "private BrpcURL namingUrl;", "modifier": "private", "type": "BrpcURL", "declarator": "namingUrl", "var_name": "namingUrl"}, {"original_string": "private ZookeeperNamingService namingService;", "modifier": "private", "type": "ZookeeperNamingService", "declarator": "namingService", "var_name": "namingService"}], "file": "brpc-java-naming-zookeeper/src/test/java/com/baidu/brpc/naming/zookeeper/ZookeeperNamingServiceTest.java"}, "test_case": {"identifier": "testSubscribeWhenZookeeperDownAndUp", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n    @Ignore\n    public void testSubscribeWhenZookeeperDownAndUp() throws Exception {\n        namingUrl = new BrpcURL(\"zookeeper://127.0.0.1:2181\");\n        namingService = new ZookeeperNamingService(namingUrl);\n\n        final List<ServiceInstance> adds = new ArrayList<ServiceInstance>();\n        final List<ServiceInstance> deletes = new ArrayList<ServiceInstance>();\n        SubscribeInfo subscribeInfo = createSubscribeInfo(false);\n        namingService.subscribe(subscribeInfo, new NotifyListener() {\n            @Override\n            public void notify(Collection<ServiceInstance> addList, Collection<ServiceInstance> deleteList) {\n                System.out.println(\"receive new subscribe info time:\" + System.currentTimeMillis());\n                System.out.println(\"add size:\" + addList.size());\n                for (ServiceInstance instance : addList) {\n                    System.out.println(instance);\n                }\n                adds.addAll(addList);\n\n                System.out.println(\"delete size:\" + deleteList.size());\n                for (ServiceInstance instance : deleteList) {\n                    System.out.println(instance);\n                }\n                deletes.addAll(deleteList);\n            }\n        });\n        RegisterInfo registerInfo = createRegisterInfo(\"127.0.0.1\", 8014);\n        namingService.register(registerInfo);\n        System.out.println(\"register time=\" + System.currentTimeMillis());\n        Thread.sleep(1000);\n        Assert.assertTrue(adds.size() == 1);\n        Assert.assertTrue(deletes.size() == 0);\n        Assert.assertTrue(adds.get(0).getIp().equals(\"127.0.0.1\"));\n        Assert.assertTrue(adds.get(0).getPort() == 8014);\n        adds.clear();\n        deletes.clear();\n\n        // sleep for restarting zookeeper\n        Thread.sleep(30 * 1000);\n\n        List<ServiceInstance> instances = namingService.lookup(subscribeInfo);\n        Assert.assertTrue(instances.size() == 1);\n        Assert.assertTrue(instances.get(0).getIp().equals(\"127.0.0.1\"));\n        Assert.assertTrue(instances.get(0).getPort() == 8014);\n\n        namingService.unregister(registerInfo);\n        System.out.println(\"unregister time=\" + System.currentTimeMillis());\n        Thread.sleep(1000);\n        Assert.assertTrue(adds.size() == 0);\n        Assert.assertTrue(deletes.size() == 1);\n        Assert.assertTrue(deletes.get(0).getIp().equals(\"127.0.0.1\"));\n        Assert.assertTrue(deletes.get(0).getPort() == 8014);\n\n        namingService.unsubscribe(subscribeInfo);\n    }", "signature": "void testSubscribeWhenZookeeperDownAndUp()", "full_signature": "@Test @Ignore public void testSubscribeWhenZookeeperDownAndUp()", "class_method_signature": "ZookeeperNamingServiceTest.testSubscribeWhenZookeeperDownAndUp()", "testcase": true, "constructor": false, "invocations": ["createSubscribeInfo", "subscribe", "println", "currentTimeMillis", "println", "size", "println", "addAll", "println", "size", "println", "addAll", "createRegisterInfo", "register", "println", "currentTimeMillis", "sleep", "assertTrue", "size", "assertTrue", "size", "assertTrue", "equals", "getIp", "get", "assertTrue", "getPort", "get", "clear", "clear", "sleep", "lookup", "assertTrue", "size", "assertTrue", "equals", "getIp", "get", "assertTrue", "getPort", "get", "unregister", "println", "currentTimeMillis", "sleep", "assertTrue", "size", "assertTrue", "size", "assertTrue", "equals", "getIp", "get", "assertTrue", "getPort", "get", "unsubscribe"]}, "focal_class": {"identifier": "ZookeeperNamingService", "superclass": "extends FailbackNamingService", "interfaces": "implements NamingService", "fields": [{"original_string": "protected BrpcURL url;", "modifier": "protected", "type": "BrpcURL", "declarator": "url", "var_name": "url"}, {"original_string": "protected CuratorFramework client;", "modifier": "protected", "type": "CuratorFramework", "declarator": "client", "var_name": "client"}, {"original_string": "protected ConcurrentMap<SubscribeInfo, PathChildrenCache> subscribeCacheMap =\n            new ConcurrentHashMap<SubscribeInfo, PathChildrenCache>();", "modifier": "protected", "type": "ConcurrentMap<SubscribeInfo, PathChildrenCache>", "declarator": "subscribeCacheMap =\n            new ConcurrentHashMap<SubscribeInfo, PathChildrenCache>()", "var_name": "subscribeCacheMap"}], "methods": [{"identifier": "ZookeeperNamingService", "parameters": "(BrpcURL url)", "modifiers": "public", "return": "", "signature": " ZookeeperNamingService(BrpcURL url)", "full_signature": "public  ZookeeperNamingService(BrpcURL url)", "class_method_signature": "ZookeeperNamingService.ZookeeperNamingService(BrpcURL url)", "testcase": false, "constructor": true}, {"identifier": "lookup", "parameters": "(SubscribeInfo subscribeInfo)", "modifiers": "@Override public", "return": "List<ServiceInstance>", "signature": "List<ServiceInstance> lookup(SubscribeInfo subscribeInfo)", "full_signature": "@Override public List<ServiceInstance> lookup(SubscribeInfo subscribeInfo)", "class_method_signature": "ZookeeperNamingService.lookup(SubscribeInfo subscribeInfo)", "testcase": false, "constructor": false}, {"identifier": "doSubscribe", "parameters": "(SubscribeInfo subscribeInfo, final NotifyListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void doSubscribe(SubscribeInfo subscribeInfo, final NotifyListener listener)", "full_signature": "@Override public void doSubscribe(SubscribeInfo subscribeInfo, final NotifyListener listener)", "class_method_signature": "ZookeeperNamingService.doSubscribe(SubscribeInfo subscribeInfo, final NotifyListener listener)", "testcase": false, "constructor": false}, {"identifier": "doUnsubscribe", "parameters": "(SubscribeInfo subscribeInfo)", "modifiers": "@Override public", "return": "void", "signature": "void doUnsubscribe(SubscribeInfo subscribeInfo)", "full_signature": "@Override public void doUnsubscribe(SubscribeInfo subscribeInfo)", "class_method_signature": "ZookeeperNamingService.doUnsubscribe(SubscribeInfo subscribeInfo)", "testcase": false, "constructor": false}, {"identifier": "doRegister", "parameters": "(RegisterInfo registerInfo)", "modifiers": "@Override public", "return": "void", "signature": "void doRegister(RegisterInfo registerInfo)", "full_signature": "@Override public void doRegister(RegisterInfo registerInfo)", "class_method_signature": "ZookeeperNamingService.doRegister(RegisterInfo registerInfo)", "testcase": false, "constructor": false}, {"identifier": "doUnregister", "parameters": "(RegisterInfo registerInfo)", "modifiers": "@Override public", "return": "void", "signature": "void doUnregister(RegisterInfo registerInfo)", "full_signature": "@Override public void doUnregister(RegisterInfo registerInfo)", "class_method_signature": "ZookeeperNamingService.doUnregister(RegisterInfo registerInfo)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "ZookeeperNamingService.destroy()", "testcase": false, "constructor": false}, {"identifier": "getSubscribePath", "parameters": "(SubscribeInfo subscribeInfo)", "modifiers": "public", "return": "String", "signature": "String getSubscribePath(SubscribeInfo subscribeInfo)", "full_signature": "public String getSubscribePath(SubscribeInfo subscribeInfo)", "class_method_signature": "ZookeeperNamingService.getSubscribePath(SubscribeInfo subscribeInfo)", "testcase": false, "constructor": false}, {"identifier": "getParentRegisterPath", "parameters": "(RegisterInfo registerInfo)", "modifiers": "public", "return": "String", "signature": "String getParentRegisterPath(RegisterInfo registerInfo)", "full_signature": "public String getParentRegisterPath(RegisterInfo registerInfo)", "class_method_signature": "ZookeeperNamingService.getParentRegisterPath(RegisterInfo registerInfo)", "testcase": false, "constructor": false}, {"identifier": "getRegisterPath", "parameters": "(RegisterInfo registerInfo)", "modifiers": "public", "return": "String", "signature": "String getRegisterPath(RegisterInfo registerInfo)", "full_signature": "public String getRegisterPath(RegisterInfo registerInfo)", "class_method_signature": "ZookeeperNamingService.getRegisterPath(RegisterInfo registerInfo)", "testcase": false, "constructor": false}, {"identifier": "getRegisterPathData", "parameters": "(RegisterInfo registerInfo)", "modifiers": "public", "return": "String", "signature": "String getRegisterPathData(RegisterInfo registerInfo)", "full_signature": "public String getRegisterPathData(RegisterInfo registerInfo)", "class_method_signature": "ZookeeperNamingService.getRegisterPathData(RegisterInfo registerInfo)", "testcase": false, "constructor": false}], "file": "brpc-java-naming-zookeeper/src/main/java/com/baidu/brpc/naming/zookeeper/ZookeeperNamingService.java"}, "focal_method": {"identifier": "lookup", "parameters": "(SubscribeInfo subscribeInfo)", "modifiers": "@Override public", "return": "List<ServiceInstance>", "body": "@Override\n    public List<ServiceInstance> lookup(SubscribeInfo subscribeInfo) {\n        String path = getSubscribePath(subscribeInfo);\n        List<ServiceInstance> instances = new ArrayList<ServiceInstance>();\n        try {\n            List<String> childList = client.getChildren().forPath(path);\n            for (String child : childList) {\n                String childPath = path + \"/\" + child;\n                try {\n                    String childData = new String(client.getData().forPath(childPath));\n                    Endpoint endpoint = GsonUtils.fromJson(childData, Endpoint.class);\n                    ServiceInstance instance = new ServiceInstance(endpoint);\n                    if (subscribeInfo != null && StringUtils.isNoneBlank(subscribeInfo.getServiceId())) {\n                        instance.setServiceName(subscribeInfo.getServiceId());\n                    }\n                    instances.add(instance);\n                } catch (Exception getDataFailedException) {\n                    log.warn(\"get child data failed, path:{}, ex:\", childPath, getDataFailedException);\n                }\n            }\n            log.info(\"lookup {} instances from {}\", instances.size(), url);\n        } catch (Exception ex) {\n            log.warn(\"lookup end point list failed from {}, msg={}\",\n                    url, ex.getMessage());\n            if (!subscribeInfo.isIgnoreFailOfNamingService()) {\n                throw new RpcException(\"lookup end point list failed from zookeeper failed\", ex);\n            }\n        }\n        return instances;\n    }", "signature": "List<ServiceInstance> lookup(SubscribeInfo subscribeInfo)", "full_signature": "@Override public List<ServiceInstance> lookup(SubscribeInfo subscribeInfo)", "class_method_signature": "ZookeeperNamingService.lookup(SubscribeInfo subscribeInfo)", "testcase": false, "constructor": false, "invocations": ["getSubscribePath", "forPath", "getChildren", "forPath", "getData", "fromJson", "isNoneBlank", "getServiceId", "setServiceName", "getServiceId", "add", "warn", "info", "size", "warn", "getMessage", "isIgnoreFailOfNamingService"]}, "repository": {"repo_id": 162548942, "url": "https://github.com/baidu/brpc-java", "language": "Java", "is_fork": false, "fork_count": 175, "stargazer_count": 551, "size": 3271, "license": "licensed"}}