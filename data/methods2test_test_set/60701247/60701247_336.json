{"test_class": {"identifier": "WizardUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Result ERROR = new Result(Severity.ERROR, \"Some error message\");", "modifier": "private final", "type": "Result", "declarator": "ERROR = new Result(Severity.ERROR, \"Some error message\")", "var_name": "ERROR"}, {"original_string": "private final Result WARNING = new Result(Severity.WARNING, \"Some warning message\");", "modifier": "private final", "type": "Result", "declarator": "WARNING = new Result(Severity.WARNING, \"Some warning message\")", "var_name": "WARNING"}, {"original_string": "private final Result INFO = new Result(Severity.INFO, \"Some info message\");", "modifier": "private final", "type": "Result", "declarator": "INFO = new Result(Severity.INFO, \"Some info message\")", "var_name": "INFO"}, {"original_string": "@Rule\n  public AndroidProjectRule projectRule = AndroidProjectRule.onDisk();", "modifier": "@Rule\n  public", "type": "AndroidProjectRule", "declarator": "projectRule = AndroidProjectRule.onDisk()", "var_name": "projectRule"}], "file": "android/testSrc/com/android/tools/idea/ui/wizard/WizardUtilsTest.java"}, "test_case": {"identifier": "getUniqueNameForAlwaysInfoResult", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void getUniqueNameForAlwaysInfoResult() {\n    assertThat(getUniqueName(\"test\", value -> INFO)).isEqualTo(\"test\");\n  }", "signature": "void getUniqueNameForAlwaysInfoResult()", "full_signature": "@Test public void getUniqueNameForAlwaysInfoResult()", "class_method_signature": "WizardUtilsTest.getUniqueNameForAlwaysInfoResult()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "getUniqueName"]}, "focal_class": {"identifier": "WizardUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String COMPOSE_MIN_AGP_VERSION = \"4.0.0-alpha02\";", "modifier": "public static final", "type": "String", "declarator": "COMPOSE_MIN_AGP_VERSION = \"4.0.0-alpha02\"", "var_name": "COMPOSE_MIN_AGP_VERSION"}, {"original_string": "private static final int PACKAGE_LENGTH_LIMIT = 100;", "modifier": "private static final", "type": "int", "declarator": "PACKAGE_LENGTH_LIMIT = 100", "var_name": "PACKAGE_LENGTH_LIMIT"}], "methods": [{"identifier": "getProjectLocationParent", "parameters": "()", "modifiers": "@NotNull public static", "return": "File", "signature": "File getProjectLocationParent()", "full_signature": "@NotNull public static File getProjectLocationParent()", "class_method_signature": "WizardUtils.getProjectLocationParent()", "testcase": false, "constructor": false}, {"identifier": "validatePackageName", "parameters": "(@Nullable String packageName)", "modifiers": "@Nullable public static", "return": "String", "signature": "String validatePackageName(@Nullable String packageName)", "full_signature": "@Nullable public static String validatePackageName(@Nullable String packageName)", "class_method_signature": "WizardUtils.validatePackageName(@Nullable String packageName)", "testcase": false, "constructor": false}, {"identifier": "toHtmlString", "parameters": "(@NotNull String text)", "modifiers": "@NotNull public static", "return": "String", "signature": "String toHtmlString(@NotNull String text)", "full_signature": "@NotNull public static String toHtmlString(@NotNull String text)", "class_method_signature": "WizardUtils.toHtmlString(@NotNull String text)", "testcase": false, "constructor": false}, {"identifier": "toUrl", "parameters": "(@NotNull String urlAsString)", "modifiers": "@NotNull public static", "return": "URL", "signature": "URL toUrl(@NotNull String urlAsString)", "full_signature": "@NotNull public static URL toUrl(@NotNull String urlAsString)", "class_method_signature": "WizardUtils.toUrl(@NotNull String urlAsString)", "testcase": false, "constructor": false}, {"identifier": "getUniqueName", "parameters": "(String initialValue, Validator<String> validator)", "modifiers": "public static", "return": "String", "signature": "String getUniqueName(String initialValue, Validator<String> validator)", "full_signature": "public static String getUniqueName(String initialValue, Validator<String> validator)", "class_method_signature": "WizardUtils.getUniqueName(String initialValue, Validator<String> validator)", "testcase": false, "constructor": false}, {"identifier": "hasComposeMinAgpVersion", "parameters": "(@Nullable Project project, @Nullable String templateCategory)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasComposeMinAgpVersion(@Nullable Project project, @Nullable String templateCategory)", "full_signature": "public static boolean hasComposeMinAgpVersion(@Nullable Project project, @Nullable String templateCategory)", "class_method_signature": "WizardUtils.hasComposeMinAgpVersion(@Nullable Project project, @Nullable String templateCategory)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/ui/wizard/WizardUtils.java"}, "focal_method": {"identifier": "getUniqueName", "parameters": "(String initialValue, Validator<String> validator)", "modifiers": "public static", "return": "String", "body": "public static String getUniqueName(String initialValue, Validator<String> validator) {\n    int i = 2;\n    String uniqueName = initialValue;\n    while (i <= 100 && validator.validate(uniqueName).getSeverity() == Validator.Severity.ERROR) {\n      uniqueName = initialValue + Integer.toString(i);\n      i++;\n    }\n\n    return uniqueName;\n  }", "signature": "String getUniqueName(String initialValue, Validator<String> validator)", "full_signature": "public static String getUniqueName(String initialValue, Validator<String> validator)", "class_method_signature": "WizardUtils.getUniqueName(String initialValue, Validator<String> validator)", "testcase": false, "constructor": false, "invocations": ["getSeverity", "validate", "toString"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}