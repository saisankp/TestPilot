{"test_class": {"identifier": "LicenseTextCollectorTest", "superclass": "", "interfaces": "", "fields": [], "file": "android/testSrc/com/android/tools/idea/actions/license/LicenseTextCollectorTest.java"}, "test_case": {"identifier": "collectAllLicenses", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void collectAllLicenses() throws Exception {\n    Path testRoot = Paths.get(AndroidTestBase.getTestDataPath(), \"licenseLocator\");\n    Path ideHome = testRoot.resolve(\"linux\");\n\n    CompletableFuture<String> cf =\n      new LicenseTextCollector(ideHome, new LicensesLocator(ideHome, false).getLicenseFiles()).getLicenseText();\n\n    String expected =\n      \"------------ License file: NOTICE.txt------------<br><br>main notice<br><br>\" +\n      \"------------ License file: LICENSE.txt------------<br><br>main license<br><br>\" +\n      \"------------ License file: license/ant_license.txt------------<br><br>ant<br><br>\" +\n      \"------------ License file: plugins/android/lib/licenses/antlr4-runtime-4.5.3.jar-NOTICE------------<br><br>antlr4<br><br>\" +\n      \"------------ License file: plugins/android/lib/licenses/asm-5.0.3-NOTICE------------<br><br>asm5<br><br>\";\n\n    if (SystemInfo.isWindows) {\n      expected = expected.replace('/', '\\\\');\n    }\n\n    assertThat(cf.get(20, TimeUnit.SECONDS)).isEqualTo(expected);\n  }", "signature": "void collectAllLicenses()", "full_signature": "@Test public void collectAllLicenses()", "class_method_signature": "LicenseTextCollectorTest.collectAllLicenses()", "testcase": true, "constructor": false, "invocations": ["get", "getTestDataPath", "resolve", "getLicenseText", "getLicenseFiles", "replace", "isEqualTo", "assertThat", "get"]}, "focal_class": {"identifier": "LicenseTextCollector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Path myHome;", "modifier": "private final", "type": "Path", "declarator": "myHome", "var_name": "myHome"}, {"original_string": "private final List<Path> myLicenses;", "modifier": "private final", "type": "List<Path>", "declarator": "myLicenses", "var_name": "myLicenses"}], "methods": [{"identifier": "LicenseTextCollector", "parameters": "(@NotNull Path ideHome, @NotNull List<Path> licenses)", "modifiers": "public", "return": "", "signature": " LicenseTextCollector(@NotNull Path ideHome, @NotNull List<Path> licenses)", "full_signature": "public  LicenseTextCollector(@NotNull Path ideHome, @NotNull List<Path> licenses)", "class_method_signature": "LicenseTextCollector.LicenseTextCollector(@NotNull Path ideHome, @NotNull List<Path> licenses)", "testcase": false, "constructor": true}, {"identifier": "getLicenseText", "parameters": "()", "modifiers": "@NotNull public", "return": "CompletableFuture<String>", "signature": "CompletableFuture<String> getLicenseText()", "full_signature": "@NotNull public CompletableFuture<String> getLicenseText()", "class_method_signature": "LicenseTextCollector.getLicenseText()", "testcase": false, "constructor": false}, {"identifier": "getLicenseTextSync", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getLicenseTextSync()", "full_signature": "private String getLicenseTextSync()", "class_method_signature": "LicenseTextCollector.getLicenseTextSync()", "testcase": false, "constructor": false}, {"identifier": "getLicenseText", "parameters": "(@NotNull File f)", "modifiers": "@NotNull private static", "return": "String", "signature": "String getLicenseText(@NotNull File f)", "full_signature": "@NotNull private static String getLicenseText(@NotNull File f)", "class_method_signature": "LicenseTextCollector.getLicenseText(@NotNull File f)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/actions/license/LicenseTextCollector.java"}, "focal_method": {"identifier": "getLicenseText", "parameters": "()", "modifiers": "@NotNull public", "return": "CompletableFuture<String>", "body": "@NotNull\n  public CompletableFuture<String> getLicenseText() {\n    return CompletableFuture.supplyAsync(this::getLicenseTextSync);\n  }", "signature": "CompletableFuture<String> getLicenseText()", "full_signature": "@NotNull public CompletableFuture<String> getLicenseText()", "class_method_signature": "LicenseTextCollector.getLicenseText()", "testcase": false, "constructor": false, "invocations": ["supplyAsync"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}