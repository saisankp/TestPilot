{"test_class": {"identifier": "GrafanaClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GrafanaClient grafanaClient;", "modifier": "private", "type": "GrafanaClient", "declarator": "grafanaClient", "var_name": "grafanaClient"}], "file": "stagemonitor-core/src/test/java/org/stagemonitor/core/grafana/GrafanaClientTest.java"}, "test_case": {"identifier": "sendGrafanaDashboardAsync", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void sendGrafanaDashboardAsync() throws Exception {\n\t\tfinal JsonNode dashboard = grafanaClient.getGrafanaDashboard(\"grafana/ElasticsearchCustomMetricsDashboard.json\");\n\t\tboolean intervalFound = false;\n\t\tfor (JsonNode template : dashboard.get(\"templating\").get(\"list\")) {\n\t\t\tif (\"Interval\".equals(template.get(\"name\").textValue())) {\n\t\t\t\tintervalFound = true;\n\t\t\t\tassertEquals(\"60s\", template.get(\"auto_min\").textValue());\n\t\t\t}\n\t\t}\n\t\tassertTrue(intervalFound);\n\t}", "signature": "void sendGrafanaDashboardAsync()", "full_signature": "@Test public void sendGrafanaDashboardAsync()", "class_method_signature": "GrafanaClientTest.sendGrafanaDashboardAsync()", "testcase": true, "constructor": false, "invocations": ["getGrafanaDashboard", "get", "get", "equals", "textValue", "get", "assertEquals", "textValue", "get", "assertTrue"]}, "focal_class": {"identifier": "GrafanaClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String ES_STAGEMONITOR_DS_NAME = \"ES stagemonitor\";", "modifier": "private static final", "type": "String", "declarator": "ES_STAGEMONITOR_DS_NAME = \"ES stagemonitor\"", "var_name": "ES_STAGEMONITOR_DS_NAME"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private final ThreadPoolExecutor asyncRestPool;", "modifier": "private final", "type": "ThreadPoolExecutor", "declarator": "asyncRestPool", "var_name": "asyncRestPool"}, {"original_string": "private final CorePlugin corePlugin;", "modifier": "private final", "type": "CorePlugin", "declarator": "corePlugin", "var_name": "corePlugin"}, {"original_string": "private final HttpClient httpClient;", "modifier": "private final", "type": "HttpClient", "declarator": "httpClient", "var_name": "httpClient"}], "methods": [{"identifier": "GrafanaClient", "parameters": "(CorePlugin corePlugin)", "modifiers": "public", "return": "", "signature": " GrafanaClient(CorePlugin corePlugin)", "full_signature": "public  GrafanaClient(CorePlugin corePlugin)", "class_method_signature": "GrafanaClient.GrafanaClient(CorePlugin corePlugin)", "testcase": false, "constructor": true}, {"identifier": "GrafanaClient", "parameters": "(CorePlugin corePlugin, HttpClient httpClient)", "modifiers": "public", "return": "", "signature": " GrafanaClient(CorePlugin corePlugin, HttpClient httpClient)", "full_signature": "public  GrafanaClient(CorePlugin corePlugin, HttpClient httpClient)", "class_method_signature": "GrafanaClient.GrafanaClient(CorePlugin corePlugin, HttpClient httpClient)", "testcase": false, "constructor": true}, {"identifier": "createElasticsearchDatasource", "parameters": "(final URL elasticsearchUrl)", "modifiers": "public", "return": "void", "signature": "void createElasticsearchDatasource(final URL elasticsearchUrl)", "full_signature": "public void createElasticsearchDatasource(final URL elasticsearchUrl)", "class_method_signature": "GrafanaClient.createElasticsearchDatasource(final URL elasticsearchUrl)", "testcase": false, "constructor": false}, {"identifier": "sendGrafanaDashboardAsync", "parameters": "(final String classPathLocation)", "modifiers": "public", "return": "void", "signature": "void sendGrafanaDashboardAsync(final String classPathLocation)", "full_signature": "public void sendGrafanaDashboardAsync(final String classPathLocation)", "class_method_signature": "GrafanaClient.sendGrafanaDashboardAsync(final String classPathLocation)", "testcase": false, "constructor": false}, {"identifier": "getGrafanaDashboard", "parameters": "(String classPathLocation)", "modifiers": "", "return": "ObjectNode", "signature": "ObjectNode getGrafanaDashboard(String classPathLocation)", "full_signature": " ObjectNode getGrafanaDashboard(String classPathLocation)", "class_method_signature": "GrafanaClient.getGrafanaDashboard(String classPathLocation)", "testcase": false, "constructor": false}, {"identifier": "addMinIntervalToPanels", "parameters": "(ObjectNode dashboard, String interval)", "modifiers": "private", "return": "void", "signature": "void addMinIntervalToPanels(ObjectNode dashboard, String interval)", "full_signature": "private void addMinIntervalToPanels(ObjectNode dashboard, String interval)", "class_method_signature": "GrafanaClient.addMinIntervalToPanels(ObjectNode dashboard, String interval)", "testcase": false, "constructor": false}, {"identifier": "asyncGrafanaRequest", "parameters": "(final String method, final String path, final Object requestBody)", "modifiers": "private", "return": "void", "signature": "void asyncGrafanaRequest(final String method, final String path, final Object requestBody)", "full_signature": "private void asyncGrafanaRequest(final String method, final String path, final Object requestBody)", "class_method_signature": "GrafanaClient.asyncGrafanaRequest(final String method, final String path, final Object requestBody)", "testcase": false, "constructor": false}, {"identifier": "isGrafanaConfigured", "parameters": "(String grafanaUrl, String apiToken)", "modifiers": "private", "return": "boolean", "signature": "boolean isGrafanaConfigured(String grafanaUrl, String apiToken)", "full_signature": "private boolean isGrafanaConfigured(String grafanaUrl, String apiToken)", "class_method_signature": "GrafanaClient.isGrafanaConfigured(String grafanaUrl, String apiToken)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "GrafanaClient.close()", "testcase": false, "constructor": false}, {"identifier": "waitForCompletion", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void waitForCompletion()", "full_signature": "public void waitForCompletion()", "class_method_signature": "GrafanaClient.waitForCompletion()", "testcase": false, "constructor": false}], "file": "stagemonitor-core/src/main/java/org/stagemonitor/core/grafana/GrafanaClient.java"}, "focal_method": {"identifier": "sendGrafanaDashboardAsync", "parameters": "(final String classPathLocation)", "modifiers": "public", "return": "void", "body": "public void sendGrafanaDashboardAsync(final String classPathLocation) {\n\t\tif (!corePlugin.isReportToElasticsearch()) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tfinal ObjectNode dashboard = getGrafanaDashboard(classPathLocation);\n\t\t\tMap<String, Object> body = new HashMap<String, Object>();\n\t\t\tbody.put(\"dashboard\", dashboard);\n\t\t\tbody.put(\"overwrite\", true);\n\t\t\tasyncGrafanaRequest(\"POST\", \"/api/dashboards/db\", body);\n\t\t} catch (IOException e) {\n\t\t\tlogger.warn(e.getMessage(), e);\n\t\t}\n\t}", "signature": "void sendGrafanaDashboardAsync(final String classPathLocation)", "full_signature": "public void sendGrafanaDashboardAsync(final String classPathLocation)", "class_method_signature": "GrafanaClient.sendGrafanaDashboardAsync(final String classPathLocation)", "testcase": false, "constructor": false, "invocations": ["isReportToElasticsearch", "getGrafanaDashboard", "put", "put", "asyncGrafanaRequest", "warn", "getMessage"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}