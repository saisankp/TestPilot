{"test_class": {"identifier": "BooleanMapGenotypeTest", "superclass": "", "interfaces": "", "fields": [], "file": "opt4j-core/src/test/java/org/opt4j/core/genotype/BooleanMapGenotypeTest.java"}, "test_case": {"identifier": "testInvalidKeySetValue", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n\tpublic void testInvalidKeySetValue() {\n\t\tBooleanMapGenotype<Integer> geno = new BooleanMapGenotype<>(new MockList());\n\t\tgeno.setValue(3, true);\n\t}", "signature": "void testInvalidKeySetValue()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testInvalidKeySetValue()", "class_method_signature": "BooleanMapGenotypeTest.testInvalidKeySetValue()", "testcase": true, "constructor": false, "invocations": ["setValue"]}, "focal_class": {"identifier": "BooleanMapGenotype", "superclass": "extends BooleanGenotype", "interfaces": "implements MapGenotype<K, Boolean>", "fields": [{"original_string": "protected final List<K> list;", "modifier": "protected final", "type": "List<K>", "declarator": "list", "var_name": "list"}, {"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "BooleanMapGenotype", "parameters": "(List<K> list)", "modifiers": "public", "return": "", "signature": " BooleanMapGenotype(List<K> list)", "full_signature": "public  BooleanMapGenotype(List<K> list)", "class_method_signature": "BooleanMapGenotype.BooleanMapGenotype(List<K> list)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(Random random)", "modifiers": "public", "return": "void", "signature": "void init(Random random)", "full_signature": "public void init(Random random)", "class_method_signature": "BooleanMapGenotype.init(Random random)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Random random, int n)", "modifiers": "@Override public", "return": "void", "signature": "void init(Random random, int n)", "full_signature": "@Override public void init(Random random, int n)", "class_method_signature": "BooleanMapGenotype.init(Random random, int n)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(K key)", "modifiers": "@Override public", "return": "Boolean", "signature": "Boolean getValue(K key)", "full_signature": "@Override public Boolean getValue(K key)", "class_method_signature": "BooleanMapGenotype.getValue(K key)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(K key, Boolean value)", "modifiers": "@Override public", "return": "void", "signature": "void setValue(K key, Boolean value)", "full_signature": "@Override public void setValue(K key, Boolean value)", "class_method_signature": "BooleanMapGenotype.setValue(K key, Boolean value)", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(K key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsKey(K key)", "full_signature": "@Override public boolean containsKey(K key)", "class_method_signature": "BooleanMapGenotype.containsKey(K key)", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "()", "modifiers": "@Override @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public", "return": "G", "signature": "G newInstance()", "full_signature": "@Override @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public G newInstance()", "class_method_signature": "BooleanMapGenotype.newInstance()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "BooleanMapGenotype.toString()", "testcase": false, "constructor": false}, {"identifier": "getIndexOf", "parameters": "(K key)", "modifiers": "@Override public", "return": "int", "signature": "int getIndexOf(K key)", "full_signature": "@Override public int getIndexOf(K key)", "class_method_signature": "BooleanMapGenotype.getIndexOf(K key)", "testcase": false, "constructor": false}, {"identifier": "getKeys", "parameters": "()", "modifiers": "@Override public", "return": "Collection<K>", "signature": "Collection<K> getKeys()", "full_signature": "@Override public Collection<K> getKeys()", "class_method_signature": "BooleanMapGenotype.getKeys()", "testcase": false, "constructor": false}], "file": "opt4j-core/src/main/java/org/opt4j/core/genotype/BooleanMapGenotype.java"}, "focal_method": {"identifier": "setValue", "parameters": "(K key, Boolean value)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void setValue(K key, Boolean value) {\n\t\tif (!containsKey(key)) {\n\t\t\tthrow new IllegalArgumentException(MapGenotype.ERROR_MESSAGE_INVALID_KEY);\n\t\t}\n\t\tint i = list.indexOf(key);\n\t\twhile (size() <= i) {\n\t\t\tadd(false);\n\t\t}\n\t\tset(i, value);\n\t}", "signature": "void setValue(K key, Boolean value)", "full_signature": "@Override public void setValue(K key, Boolean value)", "class_method_signature": "BooleanMapGenotype.setValue(K key, Boolean value)", "testcase": false, "constructor": false, "invocations": ["containsKey", "indexOf", "size", "add", "set"]}, "repository": {"repo_id": 119080111, "url": "https://github.com/felixreimann/opt4j", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 11, "size": 8771, "license": "licensed"}}