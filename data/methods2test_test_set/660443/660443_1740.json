{"test_class": {"identifier": "ExtendedFingerprinterTest", "superclass": "extends AbstractFixedLengthFingerprinterTest", "interfaces": "", "fields": [], "file": "descriptor/fingerprint/src/test/java/org/openscience/cdk/fingerprint/ExtendedFingerprinterTest.java"}, "test_case": {"identifier": "testChebi", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testChebi() throws Exception {\n        IAtomContainer searchmol = null;\n        IAtomContainer findmol = null;\n        String filename = \"data/mdl/chebisearch.mol\";\n        InputStream ins = this.getClass().getClassLoader().getResourceAsStream(filename);\n        MDLV2000Reader reader = new MDLV2000Reader(ins);\n        searchmol = reader.read(new AtomContainer());\n        reader.close();\n        filename = \"data/mdl/chebifind.mol\";\n        ins = this.getClass().getClassLoader().getResourceAsStream(filename);\n        reader = new MDLV2000Reader(ins);\n        findmol = reader.read(new AtomContainer());\n        reader.close();\n        IFingerprinter fingerprinter = new ExtendedFingerprinter();\n        BitSet superBS = fingerprinter.getBitFingerprint(findmol).asBitSet();\n        BitSet subBS = fingerprinter.getBitFingerprint(searchmol).asBitSet();\n        boolean isSubset = FingerprinterTool.isSubset(superBS, subBS);\n        boolean isSubset2 = FingerprinterTool.isSubset(subBS, superBS);\n        Assert.assertFalse(isSubset);\n        Assert.assertFalse(isSubset2);\n    }", "signature": "void testChebi()", "full_signature": "@Test public void testChebi()", "class_method_signature": "ExtendedFingerprinterTest.testChebi()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClassLoader", "getClass", "read", "close", "getResourceAsStream", "getClassLoader", "getClass", "read", "close", "asBitSet", "getBitFingerprint", "asBitSet", "getBitFingerprint", "isSubset", "isSubset", "assertFalse", "assertFalse"]}, "focal_class": {"identifier": "ExtendedFingerprinter", "superclass": "extends Fingerprinter", "interfaces": "implements IFingerprinter", "fields": [{"original_string": "private final int     RESERVED_BITS = 25;", "modifier": "private final", "type": "int", "declarator": "RESERVED_BITS = 25", "var_name": "RESERVED_BITS"}, {"original_string": "private Fingerprinter fingerprinter = null;", "modifier": "private", "type": "Fingerprinter", "declarator": "fingerprinter = null", "var_name": "fingerprinter"}], "methods": [{"identifier": "ExtendedFingerprinter", "parameters": "()", "modifiers": "public", "return": "", "signature": " ExtendedFingerprinter()", "full_signature": "public  ExtendedFingerprinter()", "class_method_signature": "ExtendedFingerprinter.ExtendedFingerprinter()", "testcase": false, "constructor": true}, {"identifier": "ExtendedFingerprinter", "parameters": "(int size)", "modifiers": "public", "return": "", "signature": " ExtendedFingerprinter(int size)", "full_signature": "public  ExtendedFingerprinter(int size)", "class_method_signature": "ExtendedFingerprinter.ExtendedFingerprinter(int size)", "testcase": false, "constructor": true}, {"identifier": "ExtendedFingerprinter", "parameters": "(int size, int searchDepth)", "modifiers": "public", "return": "", "signature": " ExtendedFingerprinter(int size, int searchDepth)", "full_signature": "public  ExtendedFingerprinter(int size, int searchDepth)", "class_method_signature": "ExtendedFingerprinter.ExtendedFingerprinter(int size, int searchDepth)", "testcase": false, "constructor": true}, {"identifier": "getBitFingerprint", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "IBitFingerprint", "signature": "IBitFingerprint getBitFingerprint(IAtomContainer container)", "full_signature": "@Override public IBitFingerprint getBitFingerprint(IAtomContainer container)", "class_method_signature": "ExtendedFingerprinter.getBitFingerprint(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getRawFingerprint", "parameters": "(IAtomContainer iAtomContainer)", "modifiers": "@Override public", "return": "Map<String, Integer>", "signature": "Map<String, Integer> getRawFingerprint(IAtomContainer iAtomContainer)", "full_signature": "@Override public Map<String, Integer> getRawFingerprint(IAtomContainer iAtomContainer)", "class_method_signature": "ExtendedFingerprinter.getRawFingerprint(IAtomContainer iAtomContainer)", "testcase": false, "constructor": false}, {"identifier": "getBitFingerprint", "parameters": "(IAtomContainer atomContainer, IRingSet ringSet, List<IRingSet> rslist)", "modifiers": "public", "return": "IBitFingerprint", "signature": "IBitFingerprint getBitFingerprint(IAtomContainer atomContainer, IRingSet ringSet, List<IRingSet> rslist)", "full_signature": "public IBitFingerprint getBitFingerprint(IAtomContainer atomContainer, IRingSet ringSet, List<IRingSet> rslist)", "class_method_signature": "ExtendedFingerprinter.getBitFingerprint(IAtomContainer atomContainer, IRingSet ringSet, List<IRingSet> rslist)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSize()", "full_signature": "@Override public int getSize()", "class_method_signature": "ExtendedFingerprinter.getSize()", "testcase": false, "constructor": false}, {"identifier": "getCountFingerprint", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "ICountFingerprint", "signature": "ICountFingerprint getCountFingerprint(IAtomContainer container)", "full_signature": "@Override public ICountFingerprint getCountFingerprint(IAtomContainer container)", "class_method_signature": "ExtendedFingerprinter.getCountFingerprint(IAtomContainer container)", "testcase": false, "constructor": false}], "file": "descriptor/fingerprint/src/main/java/org/openscience/cdk/fingerprint/ExtendedFingerprinter.java"}, "focal_method": {"identifier": "getBitFingerprint", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "IBitFingerprint", "body": "@Override\n    public IBitFingerprint getBitFingerprint(IAtomContainer container) throws CDKException {\n        return this.getBitFingerprint(container, null, null);\n    }", "signature": "IBitFingerprint getBitFingerprint(IAtomContainer container)", "full_signature": "@Override public IBitFingerprint getBitFingerprint(IAtomContainer container)", "class_method_signature": "ExtendedFingerprinter.getBitFingerprint(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["getBitFingerprint"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}