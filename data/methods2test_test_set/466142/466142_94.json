{"test_class": {"identifier": "TestConnectionHandle", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ConnectionHandle testClass;", "modifier": "private", "type": "ConnectionHandle", "declarator": "testClass", "var_name": "testClass"}, {"original_string": "private ConnectionHandle mockConnection = createNiceMock(ConnectionHandle.class);", "modifier": "private", "type": "ConnectionHandle", "declarator": "mockConnection = createNiceMock(ConnectionHandle.class)", "var_name": "mockConnection"}, {"original_string": "private IStatementCache mockPreparedStatementCache = createNiceMock(IStatementCache.class);", "modifier": "private", "type": "IStatementCache", "declarator": "mockPreparedStatementCache = createNiceMock(IStatementCache.class)", "var_name": "mockPreparedStatementCache"}, {"original_string": "private IStatementCache mockCallableStatementCache = createNiceMock(IStatementCache.class);", "modifier": "private", "type": "IStatementCache", "declarator": "mockCallableStatementCache = createNiceMock(IStatementCache.class)", "var_name": "mockCallableStatementCache"}, {"original_string": "private BoneCP mockPool = createNiceMock(BoneCP.class);", "modifier": "private", "type": "BoneCP", "declarator": "mockPool = createNiceMock(BoneCP.class)", "var_name": "mockPool"}, {"original_string": "private Logger mockLogger;", "modifier": "private", "type": "Logger", "declarator": "mockLogger", "var_name": "mockLogger"}, {"original_string": "private StatementCache testStatementCache = new StatementCache(100, false, new Statistics(this.mockPool));", "modifier": "private", "type": "StatementCache", "declarator": "testStatementCache = new StatementCache(100, false, new Statistics(this.mockPool))", "var_name": "testStatementCache"}, {"original_string": "private BoneCPConfig config;", "modifier": "private", "type": "BoneCPConfig", "declarator": "config", "var_name": "config"}, {"original_string": "static int count=1;", "modifier": "static", "type": "int", "declarator": "count=1", "var_name": "count"}, {"original_string": "boolean interrupted = false;", "modifier": "", "type": "boolean", "declarator": "interrupted = false", "var_name": "interrupted"}, {"original_string": "boolean started = false;", "modifier": "", "type": "boolean", "declarator": "started = false", "var_name": "started"}], "file": "bonecp/src/test/java/com/jolbox/bonecp/TestConnectionHandle.java"}, "test_case": {"identifier": "testPrepareStatement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPrepareStatement() throws SecurityException, IllegalArgumentException,  NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InvocationTargetException{\n\t\texpect(this.mockPool.captureStackTrace((String)anyObject())).andReturn(\"\").anyTimes();\n\t\texpect(this.mockPool.getConfig()).andReturn(this.config).anyTimes();\n\t\treplay(this.mockPool);\n\t\tthis.config.setStatementsCacheSize(1);\n\t\tprepareStatementTest(String.class);\n\t\tprepareStatementTest(String.class, int.class);\n\t\tprepareStatementTest(String.class, int[].class);\n\t\tprepareStatementTest(String.class, String[].class);\n\t\tprepareStatementTest(String.class, int.class, int.class);\n\t\tprepareStatementTest(String.class, int.class, int.class, int.class);\n\t}", "signature": "void testPrepareStatement()", "full_signature": "@Test public void testPrepareStatement()", "class_method_signature": "TestConnectionHandle.testPrepareStatement()", "testcase": true, "constructor": false, "invocations": ["anyTimes", "andReturn", "expect", "captureStackTrace", "anyObject", "anyTimes", "andReturn", "expect", "getConfig", "replay", "setStatementsCacheSize", "prepareStatementTest", "prepareStatementTest", "prepareStatementTest", "prepareStatementTest", "prepareStatementTest", "prepareStatementTest"]}, "focal_class": {"identifier": "ConnectionHandle", "superclass": "", "interfaces": "implements Connection,Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 5969210523116801522L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 5969210523116801522L", "var_name": "serialVersionUID"}, {"original_string": "private static final String SET_AUTO_COMMIT_FALSE_WAS_CALLED_MESSAGE = \"setAutoCommit(false) was called but transaction was not COMMITted or ROLLBACKed properly before it was closed.\\n\";", "modifier": "private static final", "type": "String", "declarator": "SET_AUTO_COMMIT_FALSE_WAS_CALLED_MESSAGE = \"setAutoCommit(false) was called but transaction was not COMMITted or ROLLBACKed properly before it was closed.\\n\"", "var_name": "SET_AUTO_COMMIT_FALSE_WAS_CALLED_MESSAGE"}, {"original_string": "private static final String STATEMENT_NOT_CLOSED = \"Stack trace of location where statement was opened follows:\\n%s\";", "modifier": "private static final", "type": "String", "declarator": "STATEMENT_NOT_CLOSED = \"Stack trace of location where statement was opened follows:\\n%s\"", "var_name": "STATEMENT_NOT_CLOSED"}, {"original_string": "private static final String LOG_ERROR_MESSAGE = \"Connection closed twice exception detected.\\n%s\\n%s\\n\";", "modifier": "private static final", "type": "String", "declarator": "LOG_ERROR_MESSAGE = \"Connection closed twice exception detected.\\n%s\\n%s\\n\"", "var_name": "LOG_ERROR_MESSAGE"}, {"original_string": "private static final String UNCLOSED_LOG_ERROR_MESSAGE= \"Statement was not properly closed off before this connection was closed.\\n%s\";", "modifier": "private static final", "type": "String", "declarator": "UNCLOSED_LOG_ERROR_MESSAGE= \"Statement was not properly closed off before this connection was closed.\\n%s\"", "var_name": "UNCLOSED_LOG_ERROR_MESSAGE"}, {"original_string": "private static final String CLOSED_TWICE_EXCEPTION_MESSAGE = \"Connection closed from thread [%s] was closed again.\\nStack trace of location where connection was first closed follows:\\n\";", "modifier": "private static final", "type": "String", "declarator": "CLOSED_TWICE_EXCEPTION_MESSAGE = \"Connection closed from thread [%s] was closed again.\\nStack trace of location where connection was first closed follows:\\n\"", "var_name": "CLOSED_TWICE_EXCEPTION_MESSAGE"}, {"original_string": "protected static boolean testSupport;", "modifier": "protected static", "type": "boolean", "declarator": "testSupport", "var_name": "testSupport"}, {"original_string": "protected Connection connection = null;", "modifier": "protected", "type": "Connection", "declarator": "connection = null", "var_name": "connection"}, {"original_string": "private long connectionLastUsedInMs;", "modifier": "private", "type": "long", "declarator": "connectionLastUsedInMs", "var_name": "connectionLastUsedInMs"}, {"original_string": "private long connectionLastResetInMs;", "modifier": "private", "type": "long", "declarator": "connectionLastResetInMs", "var_name": "connectionLastResetInMs"}, {"original_string": "protected long connectionCreationTimeInMs;", "modifier": "protected", "type": "long", "declarator": "connectionCreationTimeInMs", "var_name": "connectionCreationTimeInMs"}, {"original_string": "private BoneCP pool;", "modifier": "private", "type": "BoneCP", "declarator": "pool", "var_name": "pool"}, {"original_string": "private Boolean defaultReadOnly;", "modifier": "private", "type": "Boolean", "declarator": "defaultReadOnly", "var_name": "defaultReadOnly"}, {"original_string": "private String defaultCatalog;", "modifier": "private", "type": "String", "declarator": "defaultCatalog", "var_name": "defaultCatalog"}, {"original_string": "private int defaultTransactionIsolationValue = -1;", "modifier": "private", "type": "int", "declarator": "defaultTransactionIsolationValue = -1", "var_name": "defaultTransactionIsolationValue"}, {"original_string": "private Boolean defaultAutoCommit;", "modifier": "private", "type": "Boolean", "declarator": "defaultAutoCommit", "var_name": "defaultAutoCommit"}, {"original_string": "protected boolean resetConnectionOnClose;", "modifier": "protected", "type": "boolean", "declarator": "resetConnectionOnClose", "var_name": "resetConnectionOnClose"}, {"original_string": "protected boolean possiblyBroken;", "modifier": "protected", "type": "boolean", "declarator": "possiblyBroken", "var_name": "possiblyBroken"}, {"original_string": "protected AtomicBoolean logicallyClosed = new AtomicBoolean();", "modifier": "protected", "type": "AtomicBoolean", "declarator": "logicallyClosed = new AtomicBoolean()", "var_name": "logicallyClosed"}, {"original_string": "private ConnectionPartition originatingPartition = null;", "modifier": "private", "type": "ConnectionPartition", "declarator": "originatingPartition = null", "var_name": "originatingPartition"}, {"original_string": "private IStatementCache preparedStatementCache = null;", "modifier": "private", "type": "IStatementCache", "declarator": "preparedStatementCache = null", "var_name": "preparedStatementCache"}, {"original_string": "private IStatementCache callableStatementCache = null;", "modifier": "private", "type": "IStatementCache", "declarator": "callableStatementCache = null", "var_name": "callableStatementCache"}, {"original_string": "protected static Logger logger = LoggerFactory.getLogger(ConnectionHandle.class);", "modifier": "protected static", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ConnectionHandle.class)", "var_name": "logger"}, {"original_string": "private Object debugHandle;", "modifier": "private", "type": "Object", "declarator": "debugHandle", "var_name": "debugHandle"}, {"original_string": "private ConnectionHook connectionHook;", "modifier": "private", "type": "ConnectionHook", "declarator": "connectionHook", "var_name": "connectionHook"}, {"original_string": "protected boolean doubleCloseCheck;", "modifier": "protected", "type": "boolean", "declarator": "doubleCloseCheck", "var_name": "doubleCloseCheck"}, {"original_string": "protected volatile String doubleCloseException = null;", "modifier": "protected volatile", "type": "String", "declarator": "doubleCloseException = null", "var_name": "doubleCloseException"}, {"original_string": "private boolean logStatementsEnabled;", "modifier": "private", "type": "boolean", "declarator": "logStatementsEnabled", "var_name": "logStatementsEnabled"}, {"original_string": "protected boolean statementCachingEnabled;", "modifier": "protected", "type": "boolean", "declarator": "statementCachingEnabled", "var_name": "statementCachingEnabled"}, {"original_string": "private List<ReplayLog> replayLog;", "modifier": "private", "type": "List<ReplayLog>", "declarator": "replayLog", "var_name": "replayLog"}, {"original_string": "private boolean inReplayMode;", "modifier": "private", "type": "boolean", "declarator": "inReplayMode", "var_name": "inReplayMode"}, {"original_string": "protected TransactionRecoveryResult recoveryResult;", "modifier": "protected", "type": "TransactionRecoveryResult", "declarator": "recoveryResult", "var_name": "recoveryResult"}, {"original_string": "protected String url;", "modifier": "protected", "type": "String", "declarator": "url", "var_name": "url"}, {"original_string": "protected Thread threadUsingConnection;", "modifier": "protected", "type": "Thread", "declarator": "threadUsingConnection", "var_name": "threadUsingConnection"}, {"original_string": "@VisibleForTesting protected long maxConnectionAgeInMs;", "modifier": "@VisibleForTesting protected", "type": "long", "declarator": "maxConnectionAgeInMs", "var_name": "maxConnectionAgeInMs"}, {"original_string": "private boolean statisticsEnabled;", "modifier": "private", "type": "boolean", "declarator": "statisticsEnabled", "var_name": "statisticsEnabled"}, {"original_string": "private Statistics statistics;", "modifier": "private", "type": "Statistics", "declarator": "statistics", "var_name": "statistics"}, {"original_string": "private volatile Thread threadWatch;", "modifier": "private volatile", "type": "Thread", "declarator": "threadWatch", "var_name": "threadWatch"}, {"original_string": "protected Map<Connection, Reference<ConnectionHandle>> finalizableRefs;", "modifier": "protected", "type": "Map<Connection, Reference<ConnectionHandle>>", "declarator": "finalizableRefs", "var_name": "finalizableRefs"}, {"original_string": "protected boolean connectionTrackingDisabled;", "modifier": "protected", "type": "boolean", "declarator": "connectionTrackingDisabled", "var_name": "connectionTrackingDisabled"}, {"original_string": "@VisibleForTesting protected boolean txResolved = true;", "modifier": "@VisibleForTesting protected", "type": "boolean", "declarator": "txResolved = true", "var_name": "txResolved"}, {"original_string": "@VisibleForTesting protected boolean detectUnresolvedTransactions;", "modifier": "@VisibleForTesting protected", "type": "boolean", "declarator": "detectUnresolvedTransactions", "var_name": "detectUnresolvedTransactions"}, {"original_string": "protected String autoCommitStackTrace;", "modifier": "protected", "type": "String", "declarator": "autoCommitStackTrace", "var_name": "autoCommitStackTrace"}, {"original_string": "protected boolean detectUnclosedStatements;", "modifier": "protected", "type": "boolean", "declarator": "detectUnclosedStatements", "var_name": "detectUnclosedStatements"}, {"original_string": "protected boolean closeOpenStatements;", "modifier": "protected", "type": "boolean", "declarator": "closeOpenStatements", "var_name": "closeOpenStatements"}, {"original_string": "private static final ImmutableSet<String> sqlStateDBFailureCodes = ImmutableSet.of(\"08001\", \"08006\", \"08007\", \"08S01\", \"57P01\");", "modifier": "private static final", "type": "ImmutableSet<String>", "declarator": "sqlStateDBFailureCodes = ImmutableSet.of(\"08001\", \"08006\", \"08007\", \"08S01\", \"57P01\")", "var_name": "sqlStateDBFailureCodes"}, {"original_string": "protected ConcurrentMap<Statement, String> trackedStatement;", "modifier": "protected", "type": "ConcurrentMap<Statement, String>", "declarator": "trackedStatement", "var_name": "trackedStatement"}, {"original_string": "private final String noStackTrace = \"\";", "modifier": "private final", "type": "String", "declarator": "noStackTrace = \"\"", "var_name": "noStackTrace"}], "methods": [{"identifier": "ConnectionHandle", "parameters": "(Connection connection, ConnectionPartition partition, BoneCP pool, boolean recreating)", "modifiers": "protected", "return": "", "signature": " ConnectionHandle(Connection connection, ConnectionPartition partition, BoneCP pool, boolean recreating)", "full_signature": "protected  ConnectionHandle(Connection connection, ConnectionPartition partition, BoneCP pool, boolean recreating)", "class_method_signature": "ConnectionHandle.ConnectionHandle(Connection connection, ConnectionPartition partition, BoneCP pool, boolean recreating)", "testcase": false, "constructor": true}, {"identifier": "recreateConnectionHandle", "parameters": "()", "modifiers": "public", "return": "ConnectionHandle", "signature": "ConnectionHandle recreateConnectionHandle()", "full_signature": "public ConnectionHandle recreateConnectionHandle()", "class_method_signature": "ConnectionHandle.recreateConnectionHandle()", "testcase": false, "constructor": false}, {"identifier": "createTestConnectionHandle", "parameters": "(Connection connection, IStatementCache preparedStatementCache, IStatementCache callableStatementCache, BoneCP pool)", "modifiers": "protected static", "return": "ConnectionHandle", "signature": "ConnectionHandle createTestConnectionHandle(Connection connection, IStatementCache preparedStatementCache, IStatementCache callableStatementCache, BoneCP pool)", "full_signature": "protected static ConnectionHandle createTestConnectionHandle(Connection connection, IStatementCache preparedStatementCache, IStatementCache callableStatementCache, BoneCP pool)", "class_method_signature": "ConnectionHandle.createTestConnectionHandle(Connection connection, IStatementCache preparedStatementCache, IStatementCache callableStatementCache, BoneCP pool)", "testcase": false, "constructor": false}, {"identifier": "ConnectionHandle", "parameters": "()", "modifiers": "private", "return": "", "signature": " ConnectionHandle()", "full_signature": "private  ConnectionHandle()", "class_method_signature": "ConnectionHandle.ConnectionHandle()", "testcase": false, "constructor": true}, {"identifier": "sendInitSQL", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void sendInitSQL()", "full_signature": "public void sendInitSQL()", "class_method_signature": "ConnectionHandle.sendInitSQL()", "testcase": false, "constructor": false}, {"identifier": "sendInitSQL", "parameters": "(Connection connection, String initSQL)", "modifiers": "protected static", "return": "void", "signature": "void sendInitSQL(Connection connection, String initSQL)", "full_signature": "protected static void sendInitSQL(Connection connection, String initSQL)", "class_method_signature": "ConnectionHandle.sendInitSQL(Connection connection, String initSQL)", "testcase": false, "constructor": false}, {"identifier": "markPossiblyBroken", "parameters": "(SQLException e)", "modifiers": "protected", "return": "SQLException", "signature": "SQLException markPossiblyBroken(SQLException e)", "full_signature": "protected SQLException markPossiblyBroken(SQLException e)", "class_method_signature": "ConnectionHandle.markPossiblyBroken(SQLException e)", "testcase": false, "constructor": false}, {"identifier": "clearWarnings", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearWarnings()", "full_signature": "public void clearWarnings()", "class_method_signature": "ConnectionHandle.clearWarnings()", "testcase": false, "constructor": false}, {"identifier": "checkClosed", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkClosed()", "full_signature": "private void checkClosed()", "class_method_signature": "ConnectionHandle.checkClosed()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "ConnectionHandle.close()", "testcase": false, "constructor": false}, {"identifier": "internalClose", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void internalClose()", "full_signature": "protected void internalClose()", "class_method_signature": "ConnectionHandle.internalClose()", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void commit()", "full_signature": "public void commit()", "class_method_signature": "ConnectionHandle.commit()", "testcase": false, "constructor": false}, {"identifier": "getClientInfo", "parameters": "()", "modifiers": "public", "return": "Properties", "signature": "Properties getClientInfo()", "full_signature": "public Properties getClientInfo()", "class_method_signature": "ConnectionHandle.getClientInfo()", "testcase": false, "constructor": false}, {"identifier": "getClientInfo", "parameters": "(String name)", "modifiers": "public", "return": "String", "signature": "String getClientInfo(String name)", "full_signature": "public String getClientInfo(String name)", "class_method_signature": "ConnectionHandle.getClientInfo(String name)", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "(int timeout)", "modifiers": "public", "return": "boolean", "signature": "boolean isValid(int timeout)", "full_signature": "public boolean isValid(int timeout)", "class_method_signature": "ConnectionHandle.isValid(int timeout)", "testcase": false, "constructor": false}, {"identifier": "isWrapperFor", "parameters": "(Class<?> iface)", "modifiers": "public", "return": "boolean", "signature": "boolean isWrapperFor(Class<?> iface)", "full_signature": "public boolean isWrapperFor(Class<?> iface)", "class_method_signature": "ConnectionHandle.isWrapperFor(Class<?> iface)", "testcase": false, "constructor": false}, {"identifier": "unwrap", "parameters": "(Class<T> iface)", "modifiers": "public", "return": "T", "signature": "T unwrap(Class<T> iface)", "full_signature": "public T unwrap(Class<T> iface)", "class_method_signature": "ConnectionHandle.unwrap(Class<T> iface)", "testcase": false, "constructor": false}, {"identifier": "setClientInfo", "parameters": "(Properties properties)", "modifiers": "public", "return": "void", "signature": "void setClientInfo(Properties properties)", "full_signature": "public void setClientInfo(Properties properties)", "class_method_signature": "ConnectionHandle.setClientInfo(Properties properties)", "testcase": false, "constructor": false}, {"identifier": "setClientInfo", "parameters": "(String name, String value)", "modifiers": "public", "return": "void", "signature": "void setClientInfo(String name, String value)", "full_signature": "public void setClientInfo(String name, String value)", "class_method_signature": "ConnectionHandle.setClientInfo(String name, String value)", "testcase": false, "constructor": false}, {"identifier": "createStruct", "parameters": "(String typeName, Object[] attributes)", "modifiers": "public", "return": "Struct", "signature": "Struct createStruct(String typeName, Object[] attributes)", "full_signature": "public Struct createStruct(String typeName, Object[] attributes)", "class_method_signature": "ConnectionHandle.createStruct(String typeName, Object[] attributes)", "testcase": false, "constructor": false}, {"identifier": "createArrayOf", "parameters": "(String typeName, Object[] elements)", "modifiers": "public", "return": "Array", "signature": "Array createArrayOf(String typeName, Object[] elements)", "full_signature": "public Array createArrayOf(String typeName, Object[] elements)", "class_method_signature": "ConnectionHandle.createArrayOf(String typeName, Object[] elements)", "testcase": false, "constructor": false}, {"identifier": "createBlob", "parameters": "()", "modifiers": "public", "return": "Blob", "signature": "Blob createBlob()", "full_signature": "public Blob createBlob()", "class_method_signature": "ConnectionHandle.createBlob()", "testcase": false, "constructor": false}, {"identifier": "createClob", "parameters": "()", "modifiers": "public", "return": "Clob", "signature": "Clob createClob()", "full_signature": "public Clob createClob()", "class_method_signature": "ConnectionHandle.createClob()", "testcase": false, "constructor": false}, {"identifier": "createNClob", "parameters": "()", "modifiers": "public", "return": "NClob", "signature": "NClob createNClob()", "full_signature": "public NClob createNClob()", "class_method_signature": "ConnectionHandle.createNClob()", "testcase": false, "constructor": false}, {"identifier": "createSQLXML", "parameters": "()", "modifiers": "public", "return": "SQLXML", "signature": "SQLXML createSQLXML()", "full_signature": "public SQLXML createSQLXML()", "class_method_signature": "ConnectionHandle.createSQLXML()", "testcase": false, "constructor": false}, {"identifier": "setSchema", "parameters": "(String schema)", "modifiers": "public", "return": "void", "signature": "void setSchema(String schema)", "full_signature": "public void setSchema(String schema)", "class_method_signature": "ConnectionHandle.setSchema(String schema)", "testcase": false, "constructor": false}, {"identifier": "getSchema", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSchema()", "full_signature": "public String getSchema()", "class_method_signature": "ConnectionHandle.getSchema()", "testcase": false, "constructor": false}, {"identifier": "abort", "parameters": "(Executor executor)", "modifiers": "public", "return": "void", "signature": "void abort(Executor executor)", "full_signature": "public void abort(Executor executor)", "class_method_signature": "ConnectionHandle.abort(Executor executor)", "testcase": false, "constructor": false}, {"identifier": "setNetworkTimeout", "parameters": "(Executor executor, int milliseconds)", "modifiers": "public", "return": "void", "signature": "void setNetworkTimeout(Executor executor, int milliseconds)", "full_signature": "public void setNetworkTimeout(Executor executor, int milliseconds)", "class_method_signature": "ConnectionHandle.setNetworkTimeout(Executor executor, int milliseconds)", "testcase": false, "constructor": false}, {"identifier": "getNetworkTimeout", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNetworkTimeout()", "full_signature": "public int getNetworkTimeout()", "class_method_signature": "ConnectionHandle.getNetworkTimeout()", "testcase": false, "constructor": false}, {"identifier": "createStatement", "parameters": "()", "modifiers": "public", "return": "Statement", "signature": "Statement createStatement()", "full_signature": "public Statement createStatement()", "class_method_signature": "ConnectionHandle.createStatement()", "testcase": false, "constructor": false}, {"identifier": "createStatement", "parameters": "(int resultSetType, int resultSetConcurrency)", "modifiers": "public", "return": "Statement", "signature": "Statement createStatement(int resultSetType, int resultSetConcurrency)", "full_signature": "public Statement createStatement(int resultSetType, int resultSetConcurrency)", "class_method_signature": "ConnectionHandle.createStatement(int resultSetType, int resultSetConcurrency)", "testcase": false, "constructor": false}, {"identifier": "createStatement", "parameters": "(int resultSetType,\n\t\t\tint resultSetConcurrency, int resultSetHoldability)", "modifiers": "public", "return": "Statement", "signature": "Statement createStatement(int resultSetType,\n\t\t\tint resultSetConcurrency, int resultSetHoldability)", "full_signature": "public Statement createStatement(int resultSetType,\n\t\t\tint resultSetConcurrency, int resultSetHoldability)", "class_method_signature": "ConnectionHandle.createStatement(int resultSetType,\n\t\t\tint resultSetConcurrency, int resultSetHoldability)", "testcase": false, "constructor": false}, {"identifier": "maybeCaptureStackTrace", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String maybeCaptureStackTrace()", "full_signature": "protected String maybeCaptureStackTrace()", "class_method_signature": "ConnectionHandle.maybeCaptureStackTrace()", "testcase": false, "constructor": false}, {"identifier": "getAutoCommit", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean getAutoCommit()", "full_signature": "public boolean getAutoCommit()", "class_method_signature": "ConnectionHandle.getAutoCommit()", "testcase": false, "constructor": false}, {"identifier": "getCatalog", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCatalog()", "full_signature": "public String getCatalog()", "class_method_signature": "ConnectionHandle.getCatalog()", "testcase": false, "constructor": false}, {"identifier": "getHoldability", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getHoldability()", "full_signature": "public int getHoldability()", "class_method_signature": "ConnectionHandle.getHoldability()", "testcase": false, "constructor": false}, {"identifier": "getMetaData", "parameters": "()", "modifiers": "public", "return": "DatabaseMetaData", "signature": "DatabaseMetaData getMetaData()", "full_signature": "public DatabaseMetaData getMetaData()", "class_method_signature": "ConnectionHandle.getMetaData()", "testcase": false, "constructor": false}, {"identifier": "getTransactionIsolation", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTransactionIsolation()", "full_signature": "public int getTransactionIsolation()", "class_method_signature": "ConnectionHandle.getTransactionIsolation()", "testcase": false, "constructor": false}, {"identifier": "getTypeMap", "parameters": "()", "modifiers": "public", "return": "Map<String, Class<?>>", "signature": "Map<String, Class<?>> getTypeMap()", "full_signature": "public Map<String, Class<?>> getTypeMap()", "class_method_signature": "ConnectionHandle.getTypeMap()", "testcase": false, "constructor": false}, {"identifier": "getWarnings", "parameters": "()", "modifiers": "public", "return": "SQLWarning", "signature": "SQLWarning getWarnings()", "full_signature": "public SQLWarning getWarnings()", "class_method_signature": "ConnectionHandle.getWarnings()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "public boolean isClosed()", "class_method_signature": "ConnectionHandle.isClosed()", "testcase": false, "constructor": false}, {"identifier": "isReadOnly", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isReadOnly()", "full_signature": "public boolean isReadOnly()", "class_method_signature": "ConnectionHandle.isReadOnly()", "testcase": false, "constructor": false}, {"identifier": "nativeSQL", "parameters": "(String sql)", "modifiers": "public", "return": "String", "signature": "String nativeSQL(String sql)", "full_signature": "public String nativeSQL(String sql)", "class_method_signature": "ConnectionHandle.nativeSQL(String sql)", "testcase": false, "constructor": false}, {"identifier": "prepareCall", "parameters": "(String sql)", "modifiers": "public", "return": "CallableStatement", "signature": "CallableStatement prepareCall(String sql)", "full_signature": "public CallableStatement prepareCall(String sql)", "class_method_signature": "ConnectionHandle.prepareCall(String sql)", "testcase": false, "constructor": false}, {"identifier": "prepareCall", "parameters": "(String sql, int resultSetType,\tint resultSetConcurrency)", "modifiers": "public", "return": "CallableStatement", "signature": "CallableStatement prepareCall(String sql, int resultSetType,\tint resultSetConcurrency)", "full_signature": "public CallableStatement prepareCall(String sql, int resultSetType,\tint resultSetConcurrency)", "class_method_signature": "ConnectionHandle.prepareCall(String sql, int resultSetType,\tint resultSetConcurrency)", "testcase": false, "constructor": false}, {"identifier": "prepareCall", "parameters": "(String sql, int resultSetType,\n\t\t\tint resultSetConcurrency, int resultSetHoldability)", "modifiers": "public", "return": "CallableStatement", "signature": "CallableStatement prepareCall(String sql, int resultSetType,\n\t\t\tint resultSetConcurrency, int resultSetHoldability)", "full_signature": "public CallableStatement prepareCall(String sql, int resultSetType,\n\t\t\tint resultSetConcurrency, int resultSetHoldability)", "class_method_signature": "ConnectionHandle.prepareCall(String sql, int resultSetType,\n\t\t\tint resultSetConcurrency, int resultSetHoldability)", "testcase": false, "constructor": false}, {"identifier": "prepareStatement", "parameters": "(String sql)", "modifiers": "public", "return": "PreparedStatement", "signature": "PreparedStatement prepareStatement(String sql)", "full_signature": "public PreparedStatement prepareStatement(String sql)", "class_method_signature": "ConnectionHandle.prepareStatement(String sql)", "testcase": false, "constructor": false}, {"identifier": "prepareStatement", "parameters": "(String sql, int autoGeneratedKeys)", "modifiers": "public", "return": "PreparedStatement", "signature": "PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)", "full_signature": "public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)", "class_method_signature": "ConnectionHandle.prepareStatement(String sql, int autoGeneratedKeys)", "testcase": false, "constructor": false}, {"identifier": "prepareStatement", "parameters": "(String sql, int[] columnIndexes)", "modifiers": "public", "return": "PreparedStatement", "signature": "PreparedStatement prepareStatement(String sql, int[] columnIndexes)", "full_signature": "public PreparedStatement prepareStatement(String sql, int[] columnIndexes)", "class_method_signature": "ConnectionHandle.prepareStatement(String sql, int[] columnIndexes)", "testcase": false, "constructor": false}, {"identifier": "prepareStatement", "parameters": "(String sql, String[] columnNames)", "modifiers": "public", "return": "PreparedStatement", "signature": "PreparedStatement prepareStatement(String sql, String[] columnNames)", "full_signature": "public PreparedStatement prepareStatement(String sql, String[] columnNames)", "class_method_signature": "ConnectionHandle.prepareStatement(String sql, String[] columnNames)", "testcase": false, "constructor": false}, {"identifier": "prepareStatement", "parameters": "(String sql, int resultSetType,  int resultSetConcurrency)", "modifiers": "public", "return": "PreparedStatement", "signature": "PreparedStatement prepareStatement(String sql, int resultSetType,  int resultSetConcurrency)", "full_signature": "public PreparedStatement prepareStatement(String sql, int resultSetType,  int resultSetConcurrency)", "class_method_signature": "ConnectionHandle.prepareStatement(String sql, int resultSetType,  int resultSetConcurrency)", "testcase": false, "constructor": false}, {"identifier": "prepareStatement", "parameters": "(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)", "modifiers": "public", "return": "PreparedStatement", "signature": "PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)", "full_signature": "public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)", "class_method_signature": "ConnectionHandle.prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)", "testcase": false, "constructor": false}, {"identifier": "releaseSavepoint", "parameters": "(Savepoint savepoint)", "modifiers": "public", "return": "void", "signature": "void releaseSavepoint(Savepoint savepoint)", "full_signature": "public void releaseSavepoint(Savepoint savepoint)", "class_method_signature": "ConnectionHandle.releaseSavepoint(Savepoint savepoint)", "testcase": false, "constructor": false}, {"identifier": "rollback", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void rollback()", "full_signature": "public void rollback()", "class_method_signature": "ConnectionHandle.rollback()", "testcase": false, "constructor": false}, {"identifier": "rollback", "parameters": "(Savepoint savepoint)", "modifiers": "public", "return": "void", "signature": "void rollback(Savepoint savepoint)", "full_signature": "public void rollback(Savepoint savepoint)", "class_method_signature": "ConnectionHandle.rollback(Savepoint savepoint)", "testcase": false, "constructor": false}, {"identifier": "setAutoCommit", "parameters": "(boolean autoCommit)", "modifiers": "public", "return": "void", "signature": "void setAutoCommit(boolean autoCommit)", "full_signature": "public void setAutoCommit(boolean autoCommit)", "class_method_signature": "ConnectionHandle.setAutoCommit(boolean autoCommit)", "testcase": false, "constructor": false}, {"identifier": "setCatalog", "parameters": "(String catalog)", "modifiers": "public", "return": "void", "signature": "void setCatalog(String catalog)", "full_signature": "public void setCatalog(String catalog)", "class_method_signature": "ConnectionHandle.setCatalog(String catalog)", "testcase": false, "constructor": false}, {"identifier": "setHoldability", "parameters": "(int holdability)", "modifiers": "public", "return": "void", "signature": "void setHoldability(int holdability)", "full_signature": "public void setHoldability(int holdability)", "class_method_signature": "ConnectionHandle.setHoldability(int holdability)", "testcase": false, "constructor": false}, {"identifier": "setReadOnly", "parameters": "(boolean readOnly)", "modifiers": "public", "return": "void", "signature": "void setReadOnly(boolean readOnly)", "full_signature": "public void setReadOnly(boolean readOnly)", "class_method_signature": "ConnectionHandle.setReadOnly(boolean readOnly)", "testcase": false, "constructor": false}, {"identifier": "setSavepoint", "parameters": "()", "modifiers": "public", "return": "Savepoint", "signature": "Savepoint setSavepoint()", "full_signature": "public Savepoint setSavepoint()", "class_method_signature": "ConnectionHandle.setSavepoint()", "testcase": false, "constructor": false}, {"identifier": "setSavepoint", "parameters": "(String name)", "modifiers": "public", "return": "Savepoint", "signature": "Savepoint setSavepoint(String name)", "full_signature": "public Savepoint setSavepoint(String name)", "class_method_signature": "ConnectionHandle.setSavepoint(String name)", "testcase": false, "constructor": false}, {"identifier": "setTransactionIsolation", "parameters": "(int level)", "modifiers": "public", "return": "void", "signature": "void setTransactionIsolation(int level)", "full_signature": "public void setTransactionIsolation(int level)", "class_method_signature": "ConnectionHandle.setTransactionIsolation(int level)", "testcase": false, "constructor": false}, {"identifier": "setTypeMap", "parameters": "(Map<String, Class<?>> map)", "modifiers": "public", "return": "void", "signature": "void setTypeMap(Map<String, Class<?>> map)", "full_signature": "public void setTypeMap(Map<String, Class<?>> map)", "class_method_signature": "ConnectionHandle.setTypeMap(Map<String, Class<?>> map)", "testcase": false, "constructor": false}, {"identifier": "getConnectionLastUsedInMs", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getConnectionLastUsedInMs()", "full_signature": "public long getConnectionLastUsedInMs()", "class_method_signature": "ConnectionHandle.getConnectionLastUsedInMs()", "testcase": false, "constructor": false}, {"identifier": "getConnectionLastUsed", "parameters": "()", "modifiers": "@Deprecated public", "return": "long", "signature": "long getConnectionLastUsed()", "full_signature": "@Deprecated public long getConnectionLastUsed()", "class_method_signature": "ConnectionHandle.getConnectionLastUsed()", "testcase": false, "constructor": false}, {"identifier": "setConnectionLastUsedInMs", "parameters": "(long connectionLastUsed)", "modifiers": "protected", "return": "void", "signature": "void setConnectionLastUsedInMs(long connectionLastUsed)", "full_signature": "protected void setConnectionLastUsedInMs(long connectionLastUsed)", "class_method_signature": "ConnectionHandle.setConnectionLastUsedInMs(long connectionLastUsed)", "testcase": false, "constructor": false}, {"identifier": "getConnectionLastResetInMs", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getConnectionLastResetInMs()", "full_signature": "public long getConnectionLastResetInMs()", "class_method_signature": "ConnectionHandle.getConnectionLastResetInMs()", "testcase": false, "constructor": false}, {"identifier": "getConnectionLastReset", "parameters": "()", "modifiers": "@Deprecated public", "return": "long", "signature": "long getConnectionLastReset()", "full_signature": "@Deprecated public long getConnectionLastReset()", "class_method_signature": "ConnectionHandle.getConnectionLastReset()", "testcase": false, "constructor": false}, {"identifier": "setConnectionLastResetInMs", "parameters": "(long connectionLastReset)", "modifiers": "protected", "return": "void", "signature": "void setConnectionLastResetInMs(long connectionLastReset)", "full_signature": "protected void setConnectionLastResetInMs(long connectionLastReset)", "class_method_signature": "ConnectionHandle.setConnectionLastResetInMs(long connectionLastReset)", "testcase": false, "constructor": false}, {"identifier": "isPossiblyBroken", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPossiblyBroken()", "full_signature": "public boolean isPossiblyBroken()", "class_method_signature": "ConnectionHandle.isPossiblyBroken()", "testcase": false, "constructor": false}, {"identifier": "getOriginatingPartition", "parameters": "()", "modifiers": "public", "return": "ConnectionPartition", "signature": "ConnectionPartition getOriginatingPartition()", "full_signature": "public ConnectionPartition getOriginatingPartition()", "class_method_signature": "ConnectionHandle.getOriginatingPartition()", "testcase": false, "constructor": false}, {"identifier": "setOriginatingPartition", "parameters": "(ConnectionPartition originatingPartition)", "modifiers": "protected", "return": "void", "signature": "void setOriginatingPartition(ConnectionPartition originatingPartition)", "full_signature": "protected void setOriginatingPartition(ConnectionPartition originatingPartition)", "class_method_signature": "ConnectionHandle.setOriginatingPartition(ConnectionPartition originatingPartition)", "testcase": false, "constructor": false}, {"identifier": "renewConnection", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void renewConnection()", "full_signature": "protected void renewConnection()", "class_method_signature": "ConnectionHandle.renewConnection()", "testcase": false, "constructor": false}, {"identifier": "clearStatementCaches", "parameters": "(boolean internalClose)", "modifiers": "protected", "return": "void", "signature": "void clearStatementCaches(boolean internalClose)", "full_signature": "protected void clearStatementCaches(boolean internalClose)", "class_method_signature": "ConnectionHandle.clearStatementCaches(boolean internalClose)", "testcase": false, "constructor": false}, {"identifier": "getDebugHandle", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getDebugHandle()", "full_signature": "public Object getDebugHandle()", "class_method_signature": "ConnectionHandle.getDebugHandle()", "testcase": false, "constructor": false}, {"identifier": "setDebugHandle", "parameters": "(Object debugHandle)", "modifiers": "public", "return": "void", "signature": "void setDebugHandle(Object debugHandle)", "full_signature": "public void setDebugHandle(Object debugHandle)", "class_method_signature": "ConnectionHandle.setDebugHandle(Object debugHandle)", "testcase": false, "constructor": false}, {"identifier": "getRawConnection", "parameters": "()", "modifiers": "@Deprecated public", "return": "Connection", "signature": "Connection getRawConnection()", "full_signature": "@Deprecated public Connection getRawConnection()", "class_method_signature": "ConnectionHandle.getRawConnection()", "testcase": false, "constructor": false}, {"identifier": "getInternalConnection", "parameters": "()", "modifiers": "public", "return": "Connection", "signature": "Connection getInternalConnection()", "full_signature": "public Connection getInternalConnection()", "class_method_signature": "ConnectionHandle.getInternalConnection()", "testcase": false, "constructor": false}, {"identifier": "getConnectionHook", "parameters": "()", "modifiers": "public", "return": "ConnectionHook", "signature": "ConnectionHook getConnectionHook()", "full_signature": "public ConnectionHook getConnectionHook()", "class_method_signature": "ConnectionHandle.getConnectionHook()", "testcase": false, "constructor": false}, {"identifier": "isLogStatementsEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLogStatementsEnabled()", "full_signature": "public boolean isLogStatementsEnabled()", "class_method_signature": "ConnectionHandle.isLogStatementsEnabled()", "testcase": false, "constructor": false}, {"identifier": "setLogStatementsEnabled", "parameters": "(boolean logStatementsEnabled)", "modifiers": "public", "return": "void", "signature": "void setLogStatementsEnabled(boolean logStatementsEnabled)", "full_signature": "public void setLogStatementsEnabled(boolean logStatementsEnabled)", "class_method_signature": "ConnectionHandle.setLogStatementsEnabled(boolean logStatementsEnabled)", "testcase": false, "constructor": false}, {"identifier": "isInReplayMode", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isInReplayMode()", "full_signature": "protected boolean isInReplayMode()", "class_method_signature": "ConnectionHandle.isInReplayMode()", "testcase": false, "constructor": false}, {"identifier": "setInReplayMode", "parameters": "(boolean inReplayMode)", "modifiers": "protected", "return": "void", "signature": "void setInReplayMode(boolean inReplayMode)", "full_signature": "protected void setInReplayMode(boolean inReplayMode)", "class_method_signature": "ConnectionHandle.setInReplayMode(boolean inReplayMode)", "testcase": false, "constructor": false}, {"identifier": "isConnectionAlive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isConnectionAlive()", "full_signature": "public boolean isConnectionAlive()", "class_method_signature": "ConnectionHandle.isConnectionAlive()", "testcase": false, "constructor": false}, {"identifier": "setInternalConnection", "parameters": "(Connection rawConnection)", "modifiers": "public", "return": "void", "signature": "void setInternalConnection(Connection rawConnection)", "full_signature": "public void setInternalConnection(Connection rawConnection)", "class_method_signature": "ConnectionHandle.setInternalConnection(Connection rawConnection)", "testcase": false, "constructor": false}, {"identifier": "getPool", "parameters": "()", "modifiers": "public", "return": "BoneCP", "signature": "BoneCP getPool()", "full_signature": "public BoneCP getPool()", "class_method_signature": "ConnectionHandle.getPool()", "testcase": false, "constructor": false}, {"identifier": "getReplayLog", "parameters": "()", "modifiers": "public", "return": "List<ReplayLog>", "signature": "List<ReplayLog> getReplayLog()", "full_signature": "public List<ReplayLog> getReplayLog()", "class_method_signature": "ConnectionHandle.getReplayLog()", "testcase": false, "constructor": false}, {"identifier": "setReplayLog", "parameters": "(List<ReplayLog> replayLog)", "modifiers": "protected", "return": "void", "signature": "void setReplayLog(List<ReplayLog> replayLog)", "full_signature": "protected void setReplayLog(List<ReplayLog> replayLog)", "class_method_signature": "ConnectionHandle.setReplayLog(List<ReplayLog> replayLog)", "testcase": false, "constructor": false}, {"identifier": "getProxyTarget", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getProxyTarget()", "full_signature": "public Object getProxyTarget()", "class_method_signature": "ConnectionHandle.getProxyTarget()", "testcase": false, "constructor": false}, {"identifier": "getThreadUsingConnection", "parameters": "()", "modifiers": "public", "return": "Thread", "signature": "Thread getThreadUsingConnection()", "full_signature": "public Thread getThreadUsingConnection()", "class_method_signature": "ConnectionHandle.getThreadUsingConnection()", "testcase": false, "constructor": false}, {"identifier": "getConnectionCreationTime", "parameters": "()", "modifiers": "@Deprecated public", "return": "long", "signature": "long getConnectionCreationTime()", "full_signature": "@Deprecated public long getConnectionCreationTime()", "class_method_signature": "ConnectionHandle.getConnectionCreationTime()", "testcase": false, "constructor": false}, {"identifier": "getConnectionCreationTimeInMs", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getConnectionCreationTimeInMs()", "full_signature": "public long getConnectionCreationTimeInMs()", "class_method_signature": "ConnectionHandle.getConnectionCreationTimeInMs()", "testcase": false, "constructor": false}, {"identifier": "isExpired", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isExpired()", "full_signature": "public boolean isExpired()", "class_method_signature": "ConnectionHandle.isExpired()", "testcase": false, "constructor": false}, {"identifier": "isExpired", "parameters": "(long currentTime)", "modifiers": "protected", "return": "boolean", "signature": "boolean isExpired(long currentTime)", "full_signature": "protected boolean isExpired(long currentTime)", "class_method_signature": "ConnectionHandle.isExpired(long currentTime)", "testcase": false, "constructor": false}, {"identifier": "setThreadWatch", "parameters": "(Thread threadWatch)", "modifiers": "protected", "return": "void", "signature": "void setThreadWatch(Thread threadWatch)", "full_signature": "protected void setThreadWatch(Thread threadWatch)", "class_method_signature": "ConnectionHandle.setThreadWatch(Thread threadWatch)", "testcase": false, "constructor": false}, {"identifier": "getThreadWatch", "parameters": "()", "modifiers": "public", "return": "Thread", "signature": "Thread getThreadWatch()", "full_signature": "public Thread getThreadWatch()", "class_method_signature": "ConnectionHandle.getThreadWatch()", "testcase": false, "constructor": false}, {"identifier": "isTxResolved", "parameters": "()", "modifiers": "protected", "return": "boolean", "signature": "boolean isTxResolved()", "full_signature": "protected boolean isTxResolved()", "class_method_signature": "ConnectionHandle.isTxResolved()", "testcase": false, "constructor": false}, {"identifier": "getAutoCommitStackTrace", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getAutoCommitStackTrace()", "full_signature": "protected String getAutoCommitStackTrace()", "class_method_signature": "ConnectionHandle.getAutoCommitStackTrace()", "testcase": false, "constructor": false}, {"identifier": "setAutoCommitStackTrace", "parameters": "(String autoCommitStackTrace)", "modifiers": "protected", "return": "void", "signature": "void setAutoCommitStackTrace(String autoCommitStackTrace)", "full_signature": "protected void setAutoCommitStackTrace(String autoCommitStackTrace)", "class_method_signature": "ConnectionHandle.setAutoCommitStackTrace(String autoCommitStackTrace)", "testcase": false, "constructor": false}, {"identifier": "refreshConnection", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void refreshConnection()", "full_signature": "public void refreshConnection()", "class_method_signature": "ConnectionHandle.refreshConnection()", "testcase": false, "constructor": false}, {"identifier": "untrackStatement", "parameters": "(StatementHandle statement)", "modifiers": "protected", "return": "void", "signature": "void untrackStatement(StatementHandle statement)", "full_signature": "protected void untrackStatement(StatementHandle statement)", "class_method_signature": "ConnectionHandle.untrackStatement(StatementHandle statement)", "testcase": false, "constructor": false}, {"identifier": "getUrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUrl()", "full_signature": "public String getUrl()", "class_method_signature": "ConnectionHandle.getUrl()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toString()", "full_signature": "public String toString()", "class_method_signature": "ConnectionHandle.toString()", "testcase": false, "constructor": false}], "file": "bonecp/src/main/java/com/jolbox/bonecp/ConnectionHandle.java"}, "focal_method": {"identifier": "prepareStatement", "parameters": "(String sql)", "modifiers": "public", "return": "PreparedStatement", "body": "public PreparedStatement prepareStatement(String sql) throws SQLException {\n\t\tPreparedStatementHandle result = null;\n\t\tString cacheKey = null;\n\n\t\tcheckClosed();\n\n\t\ttry {\n\t\t\tlong statStart=0;\n\t\t\tif (this.statisticsEnabled){\n\t\t\t\tstatStart = System.nanoTime();\n\t\t\t}\n\t\t\tif (this.statementCachingEnabled) {\n\t\t\t\tcacheKey = sql;\n\t\t\t\tresult = (PreparedStatementHandle) this.preparedStatementCache.get(cacheKey);\n\t\t\t}\n\n\t\t\tif (result == null){\n\t\t\t\tresult =  new PreparedStatementHandle(this.connection.prepareStatement(sql), sql, this, cacheKey, this.preparedStatementCache);\n\t\t\t} else {\n\t\t\t\tresult = new PreparedStatementHandle(result.getInternalPreparedStatement(), result.sql, this, cacheKey, this.preparedStatementCache);\n\t\t\t}\n\t\t\tresult.setLogicallyOpen();\n\n\t\t\tif (this.pool.closeConnectionWatch && this.statementCachingEnabled){ // debugging mode enabled?\n\t\t\t\tresult.setOpenStackTrace(this.pool.captureStackTrace(STATEMENT_NOT_CLOSED));\n\t\t\t}\n\t\t\tif (this.closeOpenStatements){\n\t\t\t\tthis.trackedStatement.put(result, maybeCaptureStackTrace());\n\t\t\t}\n\n\t\t\tif (this.statisticsEnabled){\n\t\t\t\tthis.statistics.addStatementPrepareTime(System.nanoTime()-statStart);\n\t\t\t\tthis.statistics.incrementStatementsPrepared();\n\t\t\t}\n\n\t\t} catch (SQLException e) {\n\t\t\tthrow markPossiblyBroken(e);\n\t\t}\n\t\treturn result;\n\t}", "signature": "PreparedStatement prepareStatement(String sql)", "full_signature": "public PreparedStatement prepareStatement(String sql)", "class_method_signature": "ConnectionHandle.prepareStatement(String sql)", "testcase": false, "constructor": false, "invocations": ["checkClosed", "nanoTime", "get", "prepareStatement", "getInternalPreparedStatement", "setLogicallyOpen", "setOpenStackTrace", "captureStackTrace", "put", "maybeCaptureStackTrace", "addStatementPrepareTime", "nanoTime", "incrementStatementsPrepared", "markPossiblyBroken"]}, "repository": {"repo_id": 466142, "url": "https://github.com/wwadge/bonecp", "language": "Java", "is_fork": false, "fork_count": 161, "stargazer_count": 544, "size": 3833, "license": "licensed"}}