{"test_class": {"identifier": "GmmPartitionDataTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GmmPartitionData data;", "modifier": "private", "type": "GmmPartitionData", "declarator": "data", "var_name": "data"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/clustering/gmm/GmmPartitionDataTest.java"}, "test_case": {"identifier": "testUpdatePcxi", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUpdatePcxi() {\n        GmmPartitionData.updatePcxi(\n            data,\n            VectorUtils.of(0.3, 0.7),\n            Arrays.asList(\n                new MultivariateGaussianDistribution(VectorUtils.of(1.0, 0.5), new DenseMatrix(new double[] {0.5, 0., 0., 1.}, 2)),\n                new MultivariateGaussianDistribution(VectorUtils.of(0.0, 0.5), new DenseMatrix(new double[] {1.0, 0., 0., 1.}, 2))\n            )\n        );\n\n        assertEquals(0.49, data.pcxi(0, 0), 1e-2);\n        assertEquals(0.50, data.pcxi(1, 0), 1e-2);\n\n        assertEquals(0.18, data.pcxi(0, 1), 1e-2);\n        assertEquals(0.81, data.pcxi(1, 1), 1e-2);\n\n        assertEquals(0.49, data.pcxi(0, 2), 1e-2);\n        assertEquals(0.50, data.pcxi(1, 2), 1e-2);\n    }", "signature": "void testUpdatePcxi()", "full_signature": "@Test public void testUpdatePcxi()", "class_method_signature": "GmmPartitionDataTest.testUpdatePcxi()", "testcase": true, "constructor": false, "invocations": ["updatePcxi", "of", "asList", "of", "of", "assertEquals", "pcxi", "assertEquals", "pcxi", "assertEquals", "pcxi", "assertEquals", "pcxi", "assertEquals", "pcxi", "assertEquals", "pcxi"]}, "focal_class": {"identifier": "GmmPartitionData", "superclass": "", "interfaces": "implements AutoCloseable", "fields": [{"original_string": "private List<LabeledVector<Double>> xs;", "modifier": "private", "type": "List<LabeledVector<Double>>", "declarator": "xs", "var_name": "xs"}, {"original_string": "private double[][] pcxi;", "modifier": "private", "type": "double[][]", "declarator": "pcxi", "var_name": "pcxi"}], "methods": [{"identifier": "GmmPartitionData", "parameters": "(List<LabeledVector<Double>> xs, double[][] pcxi)", "modifiers": "", "return": "", "signature": " GmmPartitionData(List<LabeledVector<Double>> xs, double[][] pcxi)", "full_signature": "  GmmPartitionData(List<LabeledVector<Double>> xs, double[][] pcxi)", "class_method_signature": "GmmPartitionData.GmmPartitionData(List<LabeledVector<Double>> xs, double[][] pcxi)", "testcase": false, "constructor": true}, {"identifier": "getX", "parameters": "(int i)", "modifiers": "public", "return": "Vector", "signature": "Vector getX(int i)", "full_signature": "public Vector getX(int i)", "class_method_signature": "GmmPartitionData.getX(int i)", "testcase": false, "constructor": false}, {"identifier": "updatePcxiAndComputeLikelihood", "parameters": "(Dataset<EmptyContext, GmmPartitionData> dataset, Vector clusterProbs,\n        List<MultivariateGaussianDistribution> components)", "modifiers": "static", "return": "double", "signature": "double updatePcxiAndComputeLikelihood(Dataset<EmptyContext, GmmPartitionData> dataset, Vector clusterProbs,\n        List<MultivariateGaussianDistribution> components)", "full_signature": "static double updatePcxiAndComputeLikelihood(Dataset<EmptyContext, GmmPartitionData> dataset, Vector clusterProbs,\n        List<MultivariateGaussianDistribution> components)", "class_method_signature": "GmmPartitionData.updatePcxiAndComputeLikelihood(Dataset<EmptyContext, GmmPartitionData> dataset, Vector clusterProbs,\n        List<MultivariateGaussianDistribution> components)", "testcase": false, "constructor": false}, {"identifier": "pcxi", "parameters": "(int cluster, int i)", "modifiers": "public", "return": "double", "signature": "double pcxi(int cluster, int i)", "full_signature": "public double pcxi(int cluster, int i)", "class_method_signature": "GmmPartitionData.pcxi(int cluster, int i)", "testcase": false, "constructor": false}, {"identifier": "setPcxi", "parameters": "(int cluster, int i, double value)", "modifiers": "public", "return": "void", "signature": "void setPcxi(int cluster, int i, double value)", "full_signature": "public void setPcxi(int cluster, int i, double value)", "class_method_signature": "GmmPartitionData.setPcxi(int cluster, int i, double value)", "testcase": false, "constructor": false}, {"identifier": "getAllXs", "parameters": "()", "modifiers": "public", "return": "List<LabeledVector<Double>>", "signature": "List<LabeledVector<Double>> getAllXs()", "full_signature": "public List<LabeledVector<Double>> getAllXs()", "class_method_signature": "GmmPartitionData.getAllXs()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "GmmPartitionData.close()", "testcase": false, "constructor": false}, {"identifier": "estimateLikelihoodClusters", "parameters": "(GmmPartitionData data, Vector[] initMeans)", "modifiers": "static", "return": "void", "signature": "void estimateLikelihoodClusters(GmmPartitionData data, Vector[] initMeans)", "full_signature": "static void estimateLikelihoodClusters(GmmPartitionData data, Vector[] initMeans)", "class_method_signature": "GmmPartitionData.estimateLikelihoodClusters(GmmPartitionData data, Vector[] initMeans)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "GmmPartitionData.size()", "testcase": false, "constructor": false}, {"identifier": "updatePcxi", "parameters": "(GmmPartitionData data, Vector clusterProbs,\n        List<MultivariateGaussianDistribution> components)", "modifiers": "static", "return": "double", "signature": "double updatePcxi(GmmPartitionData data, Vector clusterProbs,\n        List<MultivariateGaussianDistribution> components)", "full_signature": "static double updatePcxi(GmmPartitionData data, Vector clusterProbs,\n        List<MultivariateGaussianDistribution> components)", "class_method_signature": "GmmPartitionData.updatePcxi(GmmPartitionData data, Vector clusterProbs,\n        List<MultivariateGaussianDistribution> components)", "testcase": false, "constructor": false}, {"identifier": "asPrimitive", "parameters": "(Double val)", "modifiers": "private static", "return": "double", "signature": "double asPrimitive(Double val)", "full_signature": "private static double asPrimitive(Double val)", "class_method_signature": "GmmPartitionData.asPrimitive(Double val)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/clustering/gmm/GmmPartitionData.java"}, "focal_method": {"identifier": "updatePcxi", "parameters": "(GmmPartitionData data, Vector clusterProbs,\n        List<MultivariateGaussianDistribution> components)", "modifiers": "static", "return": "double", "body": "static double updatePcxi(GmmPartitionData data, Vector clusterProbs,\n        List<MultivariateGaussianDistribution> components) {\n\n        GmmModel model = new GmmModel(clusterProbs, components);\n        double maxProb = Double.NEGATIVE_INFINITY;\n\n        for (int i = 0; i < data.size(); i++) {\n            Vector x = data.getX(i);\n            double xProb = model.prob(x);\n            if (xProb > maxProb)\n                maxProb = xProb;\n\n            double normalizer = 0.0;\n            for (int c = 0; c < clusterProbs.size(); c++)\n                normalizer += components.get(c).prob(x) * clusterProbs.get(c);\n\n            for (int c = 0; c < clusterProbs.size(); c++)\n                data.pcxi[i][c] = (components.get(c).prob(x) * clusterProbs.get(c)) / normalizer;\n        }\n\n        return maxProb;\n    }", "signature": "double updatePcxi(GmmPartitionData data, Vector clusterProbs,\n        List<MultivariateGaussianDistribution> components)", "full_signature": "static double updatePcxi(GmmPartitionData data, Vector clusterProbs,\n        List<MultivariateGaussianDistribution> components)", "class_method_signature": "GmmPartitionData.updatePcxi(GmmPartitionData data, Vector clusterProbs,\n        List<MultivariateGaussianDistribution> components)", "testcase": false, "constructor": false, "invocations": ["size", "getX", "prob", "size", "prob", "get", "get", "size", "prob", "get", "get"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}