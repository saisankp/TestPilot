{"test_class": {"identifier": "DataSetDefPreviewTableTest", "superclass": "extends AbstractDisplayerTest", "interfaces": "", "fields": [{"original_string": "@Mock DataSetDefPreviewTable.View view;", "modifier": "@Mock", "type": "DataSetDefPreviewTable.View", "declarator": "view", "var_name": "view"}, {"original_string": "@Mock DataSetDef dataSetDef;", "modifier": "@Mock", "type": "DataSetDef", "declarator": "dataSetDef", "var_name": "dataSetDef"}, {"original_string": "private DataSetDefPreviewTable tested;", "modifier": "private", "type": "DataSetDefPreviewTable", "declarator": "tested", "var_name": "tested"}, {"original_string": "final List<DataColumnDef> columnDefList = mock(List.class);", "modifier": "final", "type": "List<DataColumnDef>", "declarator": "columnDefList = mock(List.class)", "var_name": "columnDefList"}, {"original_string": "final Displayer displayer = mock(Displayer.class);", "modifier": "final", "type": "Displayer", "declarator": "displayer = mock(Displayer.class)", "var_name": "displayer"}, {"original_string": "final DisplayerListener displayerListener = mock(DisplayerListener.class);", "modifier": "final", "type": "DisplayerListener", "declarator": "displayerListener = mock(DisplayerListener.class)", "var_name": "displayerListener"}, {"original_string": "final DisplayerSettings displayerSettings = mock(DisplayerSettings.class);", "modifier": "final", "type": "DisplayerSettings", "declarator": "displayerSettings = mock(DisplayerSettings.class)", "var_name": "displayerSettings"}], "file": "dashbuilder-client/dashbuilder-widgets/src/test/java/org/dashbuilder/client/widgets/dataset/editor/DataSetDefPreviewTableTest.java"}, "test_case": {"identifier": "testCSVConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCSVConfig() throws Exception {\n        DataSetDef dataSetDef = DataSetDefFactory.newCSVDataSetDef()\n                .datePattern(\"dd/MM/yyyy\")\n                .numberPattern(\"#,###\")\n                .allColumns(true)\n                .buildDef();\n\n        DataSet dataSet = DataSetFactory.newDataSetBuilder()\n                .date(\"date\")\n                .number(\"number\")\n                .row(new Date(), 1d)\n                .buildDataSet();\n\n        when(dataSetLookupServices.lookupDataSet(any(), any())).thenReturn(dataSet);\n        tested.show(dataSetDef, null, displayerListener);\n\n        ArgumentCaptor<Displayer> argumentCaptor = ArgumentCaptor.forClass(Displayer.class);\n        verify(displayerListener).onDataLoaded(argumentCaptor.capture());\n        Displayer displayer = argumentCaptor.getValue();\n        DisplayerSettings settings = displayer.getDisplayerSettings();\n        assertEquals(settings.getColumnSettings(\"date\").getValuePattern(), \"dd/MM/yyyy\");\n        assertEquals(settings.getColumnSettings(\"number\").getValuePattern(), \"#,###\");\n    }", "signature": "void testCSVConfig()", "full_signature": "@Test public void testCSVConfig()", "class_method_signature": "DataSetDefPreviewTableTest.testCSVConfig()", "testcase": true, "constructor": false, "invocations": ["buildDef", "allColumns", "numberPattern", "datePattern", "newCSVDataSetDef", "buildDataSet", "row", "number", "date", "newDataSetBuilder", "thenReturn", "when", "lookupDataSet", "any", "any", "show", "forClass", "onDataLoaded", "verify", "capture", "getValue", "getDisplayerSettings", "assertEquals", "getValuePattern", "getColumnSettings", "assertEquals", "getValuePattern", "getColumnSettings"]}, "focal_class": {"identifier": "DataSetDefPreviewTable", "superclass": "", "interfaces": "implements IsWidget", "fields": [{"original_string": "DataSetClientServices clientServices;", "modifier": "", "type": "DataSetClientServices", "declarator": "clientServices", "var_name": "clientServices"}, {"original_string": "DisplayerLocator displayerLocator;", "modifier": "", "type": "DisplayerLocator", "declarator": "displayerLocator", "var_name": "displayerLocator"}, {"original_string": "public View view;", "modifier": "public", "type": "View", "declarator": "view", "var_name": "view"}, {"original_string": "Displayer tableDisplayer;", "modifier": "", "type": "Displayer", "declarator": "tableDisplayer", "var_name": "tableDisplayer"}], "methods": [{"identifier": "DataSetDefPreviewTable", "parameters": "(final DisplayerLocator displayerLocator,\n                                  final DataSetClientServices clientServices,\n                                  final View view)", "modifiers": "@Inject public", "return": "", "signature": " DataSetDefPreviewTable(final DisplayerLocator displayerLocator,\n                                  final DataSetClientServices clientServices,\n                                  final View view)", "full_signature": "@Inject public  DataSetDefPreviewTable(final DisplayerLocator displayerLocator,\n                                  final DataSetClientServices clientServices,\n                                  final View view)", "class_method_signature": "DataSetDefPreviewTable.DataSetDefPreviewTable(final DisplayerLocator displayerLocator,\n                                  final DataSetClientServices clientServices,\n                                  final View view)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct public void init()", "class_method_signature": "DataSetDefPreviewTable.init()", "testcase": false, "constructor": false}, {"identifier": "asWidget", "parameters": "()", "modifiers": "@Override public", "return": "Widget", "signature": "Widget asWidget()", "full_signature": "@Override public Widget asWidget()", "class_method_signature": "DataSetDefPreviewTable.asWidget()", "testcase": false, "constructor": false}, {"identifier": "show", "parameters": "(final DataSetDef dataSetDef, final Collection<DataColumnDef> columns,\n                     final DisplayerListener displayerListener)", "modifiers": "public", "return": "void", "signature": "void show(final DataSetDef dataSetDef, final Collection<DataColumnDef> columns,\n                     final DisplayerListener displayerListener)", "full_signature": "public void show(final DataSetDef dataSetDef, final Collection<DataColumnDef> columns,\n                     final DisplayerListener displayerListener)", "class_method_signature": "DataSetDefPreviewTable.show(final DataSetDef dataSetDef, final Collection<DataColumnDef> columns,\n                     final DisplayerListener displayerListener)", "testcase": false, "constructor": false}, {"identifier": "configureColumnSettings", "parameters": "(Displayer displayer, CSVDataSetDef csvDataSetDef)", "modifiers": "protected", "return": "void", "signature": "void configureColumnSettings(Displayer displayer, CSVDataSetDef csvDataSetDef)", "full_signature": "protected void configureColumnSettings(Displayer displayer, CSVDataSetDef csvDataSetDef)", "class_method_signature": "DataSetDefPreviewTable.configureColumnSettings(Displayer displayer, CSVDataSetDef csvDataSetDef)", "testcase": false, "constructor": false}, {"identifier": "draw", "parameters": "(final DisplayerListener displayerListener)", "modifiers": "", "return": "void", "signature": "void draw(final DisplayerListener displayerListener)", "full_signature": " void draw(final DisplayerListener displayerListener)", "class_method_signature": "DataSetDefPreviewTable.draw(final DisplayerListener displayerListener)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "DataSetDefPreviewTable.clear()", "testcase": false, "constructor": false}], "file": "dashbuilder-client/dashbuilder-widgets/src/main/java/org/dashbuilder/client/widgets/dataset/editor/DataSetDefPreviewTable.java"}, "focal_method": {"identifier": "show", "parameters": "(final DataSetDef dataSetDef, final Collection<DataColumnDef> columns,\n                     final DisplayerListener displayerListener)", "modifiers": "public", "return": "void", "body": "public void show(final DataSetDef dataSetDef, final Collection<DataColumnDef> columns,\n                     final DisplayerListener displayerListener) {\n        clear();\n        \n        if (dataSetDef != null) {\n            \n            // Build the table displayer settings.\n            final TableDisplayerSettingsBuilder settingsBuilder = DisplayerSettingsFactory.newTableSettings()\n                    .dataset(dataSetDef.getUUID())\n                    .renderer(DefaultRenderer.UUID)\n                    .titleVisible(false)\n                    .tablePageSize(6)\n                    .tableOrderEnabled(true)\n                    .filterOn(true, false, false);\n\n            // Make only the specified columns visible (if null then show all)\n            if (columns != null && !columns.isEmpty()) {\n                for (final DataColumnDef column : columns) {\n                    settingsBuilder.column(column.getId());\n                }\n            }\n\n            // Disable backend cache for preview.\n            DataSetDef editCloneWithoutCacheSettings = dataSetDef.clone();\n            editCloneWithoutCacheSettings.setCacheEnabled(false);\n\n            // Close the current displayer (if any)\n            if (tableDisplayer != null) {\n                tableDisplayer.close();\n            }\n\n            // Configure the table displayer and the data set handler for edition.\n            DisplayerSettings settings = settingsBuilder.buildSettings();\n            tableDisplayer = displayerLocator.lookupDisplayer(settings);\n            tableDisplayer.setDataSetHandler(new DataSetEditHandler(clientServices, settings.getDataSetLookup(), editCloneWithoutCacheSettings));\n\n            // For CSV datasets, make sure dates & numbers are displayed as defined in the CSV configuration\n            if (dataSetDef instanceof CSVDataSetDef) {\n                CSVDataSetDef csvDataSetDef = (CSVDataSetDef) dataSetDef;\n                tableDisplayer.addListener(new AbstractDisplayerListener() {\n\n                    // The column settings are set right after the data set load, once the dataset columns are known\n                    @Override\n                    public void onDataLoaded(Displayer displayer) {\n                        configureColumnSettings(displayer, csvDataSetDef);\n                    }\n                });\n            }\n\n            // Draw the table\n            draw(displayerListener);\n        }\n    }", "signature": "void show(final DataSetDef dataSetDef, final Collection<DataColumnDef> columns,\n                     final DisplayerListener displayerListener)", "full_signature": "public void show(final DataSetDef dataSetDef, final Collection<DataColumnDef> columns,\n                     final DisplayerListener displayerListener)", "class_method_signature": "DataSetDefPreviewTable.show(final DataSetDef dataSetDef, final Collection<DataColumnDef> columns,\n                     final DisplayerListener displayerListener)", "testcase": false, "constructor": false, "invocations": ["clear", "filterOn", "tableOrderEnabled", "tablePageSize", "titleVisible", "renderer", "dataset", "newTableSettings", "getUUID", "isEmpty", "column", "getId", "clone", "setCacheEnabled", "close", "buildSettings", "lookupDisplayer", "setDataSetHandler", "getDataSetLookup", "addListener", "configureColumnSettings", "draw"]}, "repository": {"repo_id": 17898911, "url": "https://github.com/dashbuilder/dashbuilder", "language": "Java", "is_fork": false, "fork_count": 119, "stargazer_count": 160, "size": 10456, "license": "licensed"}}