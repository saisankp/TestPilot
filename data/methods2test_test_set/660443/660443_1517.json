{"test_class": {"identifier": "AutocorrelationDescriptorChargeTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/AutocorrelationDescriptorChargeTest.java"}, "test_case": {"identifier": "test1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test1() throws Exception {\n        String filename = \"data/mdl/clorobenzene.mol\";\n        InputStream ins = this.getClass().getClassLoader().getResourceAsStream(filename);\n        MDLV2000Reader reader = new MDLV2000Reader(ins);\n        IAtomContainer container = reader.read(new AtomContainer());\n        DescriptorValue count = descriptor.calculate(container);\n        Assert.assertEquals(5, count.getValue().length());\n        Assert.assertTrue(count.getValue() instanceof DoubleArrayResult);\n        DoubleArrayResult result = (DoubleArrayResult) count.getValue();\n        for (int i = 0; i < 5; i++) {\n            Assert.assertFalse(Double.isNaN(result.get(i)));\n            Assert.assertTrue(0.0 != result.get(i));\n        }\n    }", "signature": "void test1()", "full_signature": "@Test public void test1()", "class_method_signature": "AutocorrelationDescriptorChargeTest.test1()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClassLoader", "getClass", "read", "calculate", "assertEquals", "length", "getValue", "assertTrue", "getValue", "getValue", "assertFalse", "isNaN", "get", "assertTrue", "get"]}, "focal_class": {"identifier": "AutocorrelationDescriptorCharge", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private static final String[] NAMES = {\"ATSc1\", \"ATSc2\", \"ATSc3\", \"ATSc4\", \"ATSc5\"};", "modifier": "private static final", "type": "String[]", "declarator": "NAMES = {\"ATSc1\", \"ATSc2\", \"ATSc3\", \"ATSc4\", \"ATSc5\"}", "var_name": "NAMES"}], "methods": [{"identifier": "listcharges", "parameters": "(IAtomContainer container)", "modifiers": "private static", "return": "double[]", "signature": "double[] listcharges(IAtomContainer container)", "full_signature": "private static double[] listcharges(IAtomContainer container)", "class_method_signature": "AutocorrelationDescriptorCharge.listcharges(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "AutocorrelationDescriptorCharge.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "AutocorrelationDescriptorCharge.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "AutocorrelationDescriptorCharge.getParameterType(String name)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "AutocorrelationDescriptorCharge.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "AutocorrelationDescriptorCharge.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "AutocorrelationDescriptorCharge.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "AutocorrelationDescriptorCharge.getDescriptorResultType()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "AutocorrelationDescriptorCharge.setParameters(Object[] params)", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/AutocorrelationDescriptorCharge.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer atomContainer) {\n        IAtomContainer container;\n        try {\n            container = (IAtomContainer) atomContainer.clone();\n            container = AtomContainerManipulator.removeHydrogens(container);\n        } catch (CloneNotSupportedException e) {\n            DoubleArrayResult result = new DoubleArrayResult(5);\n            for (int i = 0; i < 5; i++)\n                result.add(Double.NaN);\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), result,\n                    getDescriptorNames(), new CDKException(\"Error during cloner: \" + e.getMessage(), e));\n        }\n\n        try {\n            double[] w = listcharges(container);\n            int natom = container.getAtomCount();\n            int[][] distancematrix = TopologicalMatrix.getMatrix(container);\n\n            double[] chargeSum = new double[5];\n\n            for (int k = 0; k < 5; k++) {\n                for (int i = 0; i < natom; i++) {\n                    for (int j = 0; j < natom; j++) {\n                        if (distancematrix[i][j] == k) {\n                            chargeSum[k] += w[i] * w[j];\n                        } else\n                            chargeSum[k] += 0.0;\n                    }\n                }\n                if (k > 0) chargeSum[k] = chargeSum[k] / 2;\n\n            }\n            DoubleArrayResult result = new DoubleArrayResult(5);\n            for (double aChargeSum : chargeSum) {\n                result.add(aChargeSum);\n            }\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), result, NAMES);\n\n        } catch (Exception ex) {\n            DoubleArrayResult result = new DoubleArrayResult(5);\n            for (int i = 0; i < 5; i++)\n                result.add(Double.NaN);\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), result, NAMES,\n                    new CDKException(\"Error while calculating the ATS_charge descriptor: \" + ex.getMessage(), ex));\n        }\n    }", "signature": "DescriptorValue calculate(IAtomContainer atomContainer)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer atomContainer)", "class_method_signature": "AutocorrelationDescriptorCharge.calculate(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["clone", "removeHydrogens", "add", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames", "getMessage", "listcharges", "getAtomCount", "getMatrix", "add", "getSpecification", "getParameterNames", "getParameters", "add", "getSpecification", "getParameterNames", "getParameters", "getMessage"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}