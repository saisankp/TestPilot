{"test_class": {"identifier": "EnumCodecTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Expression<Integer, Resolver> size;", "modifier": "@Mock\n    private", "type": "Expression<Integer, Resolver>", "declarator": "size", "var_name": "size"}, {"original_string": "private final Map<Long, Direction> map;", "modifier": "private final", "type": "Map<Long, Direction>", "declarator": "map", "var_name": "map"}, {"original_string": "@Mock\n    private BitChannel channel;", "modifier": "@Mock\n    private", "type": "BitChannel", "declarator": "channel", "var_name": "channel"}, {"original_string": "@Mock\n    private Resolver resolver;", "modifier": "@Mock\n    private", "type": "Resolver", "declarator": "resolver", "var_name": "resolver"}], "file": "preon-binding/src/test/java/org/codehaus/preon/codec/EnumCodecTest.java"}, "test_case": {"identifier": "shouldEncodeCorrectly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldEncodeCorrectly() throws IOException {\n        int nrbits = 2;\n        EnumCodec<Direction> codec = new EnumCodec<Direction>(Direction.class, map, size, BigEndian);\n        when(size.eval(org.mockito.Matchers.any(Resolver.class))).thenReturn(nrbits);\n        codec.encode(Direction.Backward, channel, resolver);\n        verify(channel).write(nrbits, 2L, BigEndian);\n        verifyNoMoreInteractions(channel);\n        verifyNoMoreInteractions(resolver);\n    }", "signature": "void shouldEncodeCorrectly()", "full_signature": "@Test public void shouldEncodeCorrectly()", "class_method_signature": "EnumCodecTest.shouldEncodeCorrectly()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "eval", "any", "encode", "write", "verify", "verifyNoMoreInteractions", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "EnumCodec", "superclass": "", "interfaces": "implements Codec<T>", "fields": [{"original_string": "private final Class<T> type;", "modifier": "private final", "type": "Class<T>", "declarator": "type", "var_name": "type"}, {"original_string": "private final Map<Long, T> mapping;", "modifier": "private final", "type": "Map<Long, T>", "declarator": "mapping", "var_name": "mapping"}, {"original_string": "private final Map<T, Long> inverseMapping;", "modifier": "private final", "type": "Map<T, Long>", "declarator": "inverseMapping", "var_name": "inverseMapping"}, {"original_string": "private final Expression<Integer, Resolver> size;", "modifier": "private final", "type": "Expression<Integer, Resolver>", "declarator": "size", "var_name": "size"}, {"original_string": "private final ByteOrder byteOrder;", "modifier": "private final", "type": "ByteOrder", "declarator": "byteOrder", "var_name": "byteOrder"}], "methods": [{"identifier": "EnumCodec", "parameters": "(Class<T> type, Map<Long, T> mapping,\n                     Expression<Integer, Resolver> sizeExpr, ByteOrder endian)", "modifiers": "public", "return": "", "signature": " EnumCodec(Class<T> type, Map<Long, T> mapping,\n                     Expression<Integer, Resolver> sizeExpr, ByteOrder endian)", "full_signature": "public  EnumCodec(Class<T> type, Map<Long, T> mapping,\n                     Expression<Integer, Resolver> sizeExpr, ByteOrder endian)", "class_method_signature": "EnumCodec.EnumCodec(Class<T> type, Map<Long, T> mapping,\n                     Expression<Integer, Resolver> sizeExpr, ByteOrder endian)", "testcase": false, "constructor": true}, {"identifier": "decode", "parameters": "(BitBuffer buffer, Resolver resolver, Builder builder)", "modifiers": "public", "return": "T", "signature": "T decode(BitBuffer buffer, Resolver resolver, Builder builder)", "full_signature": "public T decode(BitBuffer buffer, Resolver resolver, Builder builder)", "class_method_signature": "EnumCodec.decode(BitBuffer buffer, Resolver resolver, Builder builder)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(T object, BitChannel channel, Resolver resolver)", "modifiers": "public", "return": "void", "signature": "void encode(T object, BitChannel channel, Resolver resolver)", "full_signature": "public void encode(T object, BitChannel channel, Resolver resolver)", "class_method_signature": "EnumCodec.encode(T object, BitChannel channel, Resolver resolver)", "testcase": false, "constructor": false}, {"identifier": "getTypes", "parameters": "()", "modifiers": "public", "return": "Class<?>[]", "signature": "Class<?>[] getTypes()", "full_signature": "public Class<?>[] getTypes()", "class_method_signature": "EnumCodec.getTypes()", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "public", "return": "Expression<Integer, Resolver>", "signature": "Expression<Integer, Resolver> getSize()", "full_signature": "public Expression<Integer, Resolver> getSize()", "class_method_signature": "EnumCodec.getSize()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> getType()", "full_signature": "public Class<?> getType()", "class_method_signature": "EnumCodec.getType()", "testcase": false, "constructor": false}, {"identifier": "getCodecDescriptor", "parameters": "()", "modifiers": "public", "return": "CodecDescriptor", "signature": "CodecDescriptor getCodecDescriptor()", "full_signature": "public CodecDescriptor getCodecDescriptor()", "class_method_signature": "EnumCodec.getCodecDescriptor()", "testcase": false, "constructor": false}], "file": "preon-binding/src/main/java/org/codehaus/preon/codec/EnumCodec.java"}, "focal_method": {"identifier": "encode", "parameters": "(T object, BitChannel channel, Resolver resolver)", "modifiers": "public", "return": "void", "body": "public void encode(T object, BitChannel channel, Resolver resolver) throws IOException {\n        channel.write(size.eval(resolver), inverseMapping.get(object), byteOrder);\n    }", "signature": "void encode(T object, BitChannel channel, Resolver resolver)", "full_signature": "public void encode(T object, BitChannel channel, Resolver resolver)", "class_method_signature": "EnumCodec.encode(T object, BitChannel channel, Resolver resolver)", "testcase": false, "constructor": false, "invocations": ["write", "eval", "get"]}, "repository": {"repo_id": 854893, "url": "https://github.com/preon/preon", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 155, "size": 2459, "license": "licensed"}}