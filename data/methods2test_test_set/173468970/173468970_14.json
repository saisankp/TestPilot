{"test_class": {"identifier": "BluetoothCentralTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BluetoothCentral central;", "modifier": "private", "type": "BluetoothCentral", "declarator": "central", "var_name": "central"}, {"original_string": "private ShadowApplication application;", "modifier": "private", "type": "ShadowApplication", "declarator": "application", "var_name": "application"}, {"original_string": "private ShadowBluetoothLEAdapter bluetoothAdapter;", "modifier": "private", "type": "ShadowBluetoothLEAdapter", "declarator": "bluetoothAdapter", "var_name": "bluetoothAdapter"}, {"original_string": "private Context context;", "modifier": "private", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock\n    private BluetoothLeScanner scanner;", "modifier": "@Mock\n    private", "type": "BluetoothLeScanner", "declarator": "scanner", "var_name": "scanner"}, {"original_string": "@Mock\n    private BluetoothCentralCallback callback;", "modifier": "@Mock\n    private", "type": "BluetoothCentralCallback", "declarator": "callback", "var_name": "callback"}, {"original_string": "@Mock\n    private BluetoothPeripheralCallback peripheralCallback;", "modifier": "@Mock\n    private", "type": "BluetoothPeripheralCallback", "declarator": "peripheralCallback", "var_name": "peripheralCallback"}, {"original_string": "private Handler handler = new Handler();", "modifier": "private", "type": "Handler", "declarator": "handler = new Handler()", "var_name": "handler"}], "file": "blessed/src/test/java/com/welie/blessed/BluetoothCentralTest.java"}, "test_case": {"identifier": "stopScanTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void stopScanTest() throws Exception {\n        application.grantPermissions(Manifest.permission.ACCESS_COARSE_LOCATION);\n        central.scanForPeripherals();\n        verify(scanner).startScan(anyList(), any(ScanSettings.class), any(ScanCallback.class));\n\n        // Grab the scan callback that is used\n        Field field = BluetoothCentral.class.getDeclaredField(\"defaultScanCallback\");\n        field.setAccessible(true);\n        ScanCallback scanCallback = (ScanCallback) field.get(central);\n\n        // Stop scan\n        central.stopScan();\n\n        // Check if scan is correctly stopped\n        verify(scanner).stopScan(scanCallback);\n\n        // Stop scan again\n        central.stopScan();\n\n        // Verify that stopScan is not called again\n        verify(scanner, times(1)).stopScan(any(ScanCallback.class));\n    }", "signature": "void stopScanTest()", "full_signature": "@Test public void stopScanTest()", "class_method_signature": "BluetoothCentralTest.stopScanTest()", "testcase": true, "constructor": false, "invocations": ["grantPermissions", "scanForPeripherals", "startScan", "verify", "anyList", "any", "any", "getDeclaredField", "setAccessible", "get", "stopScan", "stopScan", "verify", "stopScan", "stopScan", "verify", "times", "any"]}, "focal_class": {"identifier": "BluetoothCentral", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long SCAN_TIMEOUT = 180_000L;", "modifier": "private static final", "type": "long", "declarator": "SCAN_TIMEOUT = 180_000L", "var_name": "SCAN_TIMEOUT"}, {"original_string": "private static final int SCAN_RESTART_DELAY = 1000;", "modifier": "private static final", "type": "int", "declarator": "SCAN_RESTART_DELAY = 1000", "var_name": "SCAN_RESTART_DELAY"}, {"original_string": "private static final int MAX_CONNECTION_RETRIES = 1;", "modifier": "private static final", "type": "int", "declarator": "MAX_CONNECTION_RETRIES = 1", "var_name": "MAX_CONNECTION_RETRIES"}, {"original_string": "private static final int MAX_CONNECTED_PERIPHERALS = 7;", "modifier": "private static final", "type": "int", "declarator": "MAX_CONNECTED_PERIPHERALS = 7", "var_name": "MAX_CONNECTED_PERIPHERALS"}, {"original_string": "public static final int SCAN_FAILED_ALREADY_STARTED = 1;", "modifier": "public static final", "type": "int", "declarator": "SCAN_FAILED_ALREADY_STARTED = 1", "var_name": "SCAN_FAILED_ALREADY_STARTED"}, {"original_string": "public static final int SCAN_FAILED_APPLICATION_REGISTRATION_FAILED = 2;", "modifier": "public static final", "type": "int", "declarator": "SCAN_FAILED_APPLICATION_REGISTRATION_FAILED = 2", "var_name": "SCAN_FAILED_APPLICATION_REGISTRATION_FAILED"}, {"original_string": "public static final int SCAN_FAILED_INTERNAL_ERROR = 3;", "modifier": "public static final", "type": "int", "declarator": "SCAN_FAILED_INTERNAL_ERROR = 3", "var_name": "SCAN_FAILED_INTERNAL_ERROR"}, {"original_string": "public static final int SCAN_FAILED_FEATURE_UNSUPPORTED = 4;", "modifier": "public static final", "type": "int", "declarator": "SCAN_FAILED_FEATURE_UNSUPPORTED = 4", "var_name": "SCAN_FAILED_FEATURE_UNSUPPORTED"}, {"original_string": "public static final int SCAN_FAILED_OUT_OF_HARDWARE_RESOURCES = 5;", "modifier": "public static final", "type": "int", "declarator": "SCAN_FAILED_OUT_OF_HARDWARE_RESOURCES = 5", "var_name": "SCAN_FAILED_OUT_OF_HARDWARE_RESOURCES"}, {"original_string": "public static final int SCAN_FAILED_SCANNING_TOO_FREQUENTLY = 6;", "modifier": "public static final", "type": "int", "declarator": "SCAN_FAILED_SCANNING_TOO_FREQUENTLY = 6", "var_name": "SCAN_FAILED_SCANNING_TOO_FREQUENTLY"}, {"original_string": "private final Context context;", "modifier": "private final", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private final Handler callBackHandler;", "modifier": "private final", "type": "Handler", "declarator": "callBackHandler", "var_name": "callBackHandler"}, {"original_string": "private final BluetoothAdapter bluetoothAdapter;", "modifier": "private final", "type": "BluetoothAdapter", "declarator": "bluetoothAdapter", "var_name": "bluetoothAdapter"}, {"original_string": "private BluetoothLeScanner bluetoothScanner;", "modifier": "private", "type": "BluetoothLeScanner", "declarator": "bluetoothScanner", "var_name": "bluetoothScanner"}, {"original_string": "private BluetoothLeScanner autoConnectScanner;", "modifier": "private", "type": "BluetoothLeScanner", "declarator": "autoConnectScanner", "var_name": "autoConnectScanner"}, {"original_string": "private final BluetoothCentralCallback bluetoothCentralCallback;", "modifier": "private final", "type": "BluetoothCentralCallback", "declarator": "bluetoothCentralCallback", "var_name": "bluetoothCentralCallback"}, {"original_string": "private final Map<String, BluetoothPeripheral> connectedPeripherals = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, BluetoothPeripheral>", "declarator": "connectedPeripherals = new ConcurrentHashMap<>()", "var_name": "connectedPeripherals"}, {"original_string": "private final Map<String, BluetoothPeripheral> unconnectedPeripherals = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, BluetoothPeripheral>", "declarator": "unconnectedPeripherals = new ConcurrentHashMap<>()", "var_name": "unconnectedPeripherals"}, {"original_string": "private final Map<String, BluetoothPeripheral> scannedPeripherals = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, BluetoothPeripheral>", "declarator": "scannedPeripherals = new ConcurrentHashMap<>()", "var_name": "scannedPeripherals"}, {"original_string": "private final List<String> reconnectPeripheralAddresses = new ArrayList<>();", "modifier": "private final", "type": "List<String>", "declarator": "reconnectPeripheralAddresses = new ArrayList<>()", "var_name": "reconnectPeripheralAddresses"}, {"original_string": "private final Map<String, BluetoothPeripheralCallback> reconnectCallbacks = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, BluetoothPeripheralCallback>", "declarator": "reconnectCallbacks = new ConcurrentHashMap<>()", "var_name": "reconnectCallbacks"}, {"original_string": "private String[] scanPeripheralNames;", "modifier": "private", "type": "String[]", "declarator": "scanPeripheralNames", "var_name": "scanPeripheralNames"}, {"original_string": "private final Handler mainHandler = new Handler(Looper.getMainLooper());", "modifier": "private final", "type": "Handler", "declarator": "mainHandler = new Handler(Looper.getMainLooper())", "var_name": "mainHandler"}, {"original_string": "private Runnable timeoutRunnable;", "modifier": "private", "type": "Runnable", "declarator": "timeoutRunnable", "var_name": "timeoutRunnable"}, {"original_string": "private Runnable autoConnectRunnable;", "modifier": "private", "type": "Runnable", "declarator": "autoConnectRunnable", "var_name": "autoConnectRunnable"}, {"original_string": "private final Object connectLock = new Object();", "modifier": "private final", "type": "Object", "declarator": "connectLock = new Object()", "var_name": "connectLock"}, {"original_string": "private ScanCallback currentCallback;", "modifier": "private", "type": "ScanCallback", "declarator": "currentCallback", "var_name": "currentCallback"}, {"original_string": "private List<ScanFilter> currentFilters;", "modifier": "private", "type": "List<ScanFilter>", "declarator": "currentFilters", "var_name": "currentFilters"}, {"original_string": "private ScanSettings scanSettings;", "modifier": "private", "type": "ScanSettings", "declarator": "scanSettings", "var_name": "scanSettings"}, {"original_string": "private final ScanSettings autoConnectScanSettings;", "modifier": "private final", "type": "ScanSettings", "declarator": "autoConnectScanSettings", "var_name": "autoConnectScanSettings"}, {"original_string": "private final Map<String, Integer> connectionRetries = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, Integer>", "declarator": "connectionRetries = new ConcurrentHashMap<>()", "var_name": "connectionRetries"}, {"original_string": "private boolean expectingBluetoothOffDisconnects = false;", "modifier": "private", "type": "boolean", "declarator": "expectingBluetoothOffDisconnects = false", "var_name": "expectingBluetoothOffDisconnects"}, {"original_string": "private Runnable disconnectRunnable;", "modifier": "private", "type": "Runnable", "declarator": "disconnectRunnable", "var_name": "disconnectRunnable"}, {"original_string": "private final Map<String, String> pinCodes = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, String>", "declarator": "pinCodes = new ConcurrentHashMap<>()", "var_name": "pinCodes"}, {"original_string": "private final ScanCallback scanByNameCallback = new ScanCallback() {\n        @Override\n        public void onScanResult(int callbackType, final ScanResult result) {\n            synchronized (this) {\n                String deviceName = result.getDevice().getName();\n                if (deviceName == null) return;\n                if (scanPeripheralNames == null) return;\n\n                for (String name : scanPeripheralNames) {\n                    if (deviceName.contains(name)) {\n                        callBackHandler.post(new Runnable() {\n                            @Override\n                            public void run() {\n                                if (isScanning()) {\n                                    BluetoothPeripheral peripheral = getPeripheral(result.getDevice().getAddress());\n                                    peripheral.setDevice(result.getDevice());\n                                    bluetoothCentralCallback.onDiscoveredPeripheral(peripheral, result);\n                                }\n                            }\n                        });\n                        return;\n                    }\n                }\n            }\n        }\n\n        @Override\n        public void onScanFailed(final int errorCode) {\n            Timber.e(\"scan failed with error code %d (%s)\", errorCode, scanErrorToString(errorCode));\n            callBackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    bluetoothCentralCallback.onScanFailed(errorCode);\n                }\n            });\n        }\n    };", "modifier": "private final", "type": "ScanCallback", "declarator": "scanByNameCallback = new ScanCallback() {\n        @Override\n        public void onScanResult(int callbackType, final ScanResult result) {\n            synchronized (this) {\n                String deviceName = result.getDevice().getName();\n                if (deviceName == null) return;\n                if (scanPeripheralNames == null) return;\n\n                for (String name : scanPeripheralNames) {\n                    if (deviceName.contains(name)) {\n                        callBackHandler.post(new Runnable() {\n                            @Override\n                            public void run() {\n                                if (isScanning()) {\n                                    BluetoothPeripheral peripheral = getPeripheral(result.getDevice().getAddress());\n                                    peripheral.setDevice(result.getDevice());\n                                    bluetoothCentralCallback.onDiscoveredPeripheral(peripheral, result);\n                                }\n                            }\n                        });\n                        return;\n                    }\n                }\n            }\n        }\n\n        @Override\n        public void onScanFailed(final int errorCode) {\n            Timber.e(\"scan failed with error code %d (%s)\", errorCode, scanErrorToString(errorCode));\n            callBackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    bluetoothCentralCallback.onScanFailed(errorCode);\n                }\n            });\n        }\n    }", "var_name": "scanByNameCallback"}, {"original_string": "private final ScanCallback defaultScanCallback = new ScanCallback() {\n        @Override\n        public void onScanResult(int callbackType, final ScanResult result) {\n            synchronized (this) {\n                callBackHandler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        if (isScanning()) {\n                            BluetoothPeripheral peripheral = getPeripheral(result.getDevice().getAddress());\n                            peripheral.setDevice(result.getDevice());\n                            bluetoothCentralCallback.onDiscoveredPeripheral(peripheral, result);\n                        }\n                    }\n                });\n            }\n        }\n\n        @Override\n        public void onScanFailed(final int errorCode) {\n            Timber.e(\"scan failed with error code %d (%s)\", errorCode, scanErrorToString(errorCode));\n            callBackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    bluetoothCentralCallback.onScanFailed(errorCode);\n                }\n            });\n        }\n    };", "modifier": "private final", "type": "ScanCallback", "declarator": "defaultScanCallback = new ScanCallback() {\n        @Override\n        public void onScanResult(int callbackType, final ScanResult result) {\n            synchronized (this) {\n                callBackHandler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        if (isScanning()) {\n                            BluetoothPeripheral peripheral = getPeripheral(result.getDevice().getAddress());\n                            peripheral.setDevice(result.getDevice());\n                            bluetoothCentralCallback.onDiscoveredPeripheral(peripheral, result);\n                        }\n                    }\n                });\n            }\n        }\n\n        @Override\n        public void onScanFailed(final int errorCode) {\n            Timber.e(\"scan failed with error code %d (%s)\", errorCode, scanErrorToString(errorCode));\n            callBackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    bluetoothCentralCallback.onScanFailed(errorCode);\n                }\n            });\n        }\n    }", "var_name": "defaultScanCallback"}, {"original_string": "private final ScanCallback autoConnectScanCallback = new ScanCallback() {\n        @Override\n        public void onScanResult(int callbackType, ScanResult result) {\n            synchronized (this) {\n                if (!isAutoScanning()) return;\n\n                Timber.d(\"peripheral with address '%s' found\", result.getDevice().getAddress());\n                stopAutoconnectScan();\n\n                String deviceAddress = result.getDevice().getAddress();\n                BluetoothPeripheral peripheral = unconnectedPeripherals.get(deviceAddress);\n                BluetoothPeripheralCallback callback = reconnectCallbacks.get(deviceAddress);\n\n                reconnectPeripheralAddresses.remove(deviceAddress);\n                reconnectCallbacks.remove(deviceAddress);\n                unconnectedPeripherals.remove(deviceAddress);\n                scannedPeripherals.remove(deviceAddress);\n\n                if (peripheral != null && callback != null) {\n                    connectPeripheral(peripheral, callback);\n                }\n\n                if (reconnectPeripheralAddresses.size() > 0) {\n                    scanForAutoConnectPeripherals();\n                }\n            }\n        }\n\n        @Override\n        public void onScanFailed(final int errorCode) {\n            Timber.e(\"scan failed with error code %d (%s)\", errorCode, scanErrorToString(errorCode));\n            callBackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    bluetoothCentralCallback.onScanFailed(errorCode);\n                }\n            });\n        }\n    };", "modifier": "private final", "type": "ScanCallback", "declarator": "autoConnectScanCallback = new ScanCallback() {\n        @Override\n        public void onScanResult(int callbackType, ScanResult result) {\n            synchronized (this) {\n                if (!isAutoScanning()) return;\n\n                Timber.d(\"peripheral with address '%s' found\", result.getDevice().getAddress());\n                stopAutoconnectScan();\n\n                String deviceAddress = result.getDevice().getAddress();\n                BluetoothPeripheral peripheral = unconnectedPeripherals.get(deviceAddress);\n                BluetoothPeripheralCallback callback = reconnectCallbacks.get(deviceAddress);\n\n                reconnectPeripheralAddresses.remove(deviceAddress);\n                reconnectCallbacks.remove(deviceAddress);\n                unconnectedPeripherals.remove(deviceAddress);\n                scannedPeripherals.remove(deviceAddress);\n\n                if (peripheral != null && callback != null) {\n                    connectPeripheral(peripheral, callback);\n                }\n\n                if (reconnectPeripheralAddresses.size() > 0) {\n                    scanForAutoConnectPeripherals();\n                }\n            }\n        }\n\n        @Override\n        public void onScanFailed(final int errorCode) {\n            Timber.e(\"scan failed with error code %d (%s)\", errorCode, scanErrorToString(errorCode));\n            callBackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    bluetoothCentralCallback.onScanFailed(errorCode);\n                }\n            });\n        }\n    }", "var_name": "autoConnectScanCallback"}, {"original_string": "private final BluetoothPeripheral.InternalCallback internalCallback = new BluetoothPeripheral.InternalCallback() {\n\n        @Override\n        public void connected(final BluetoothPeripheral peripheral) {\n            connectionRetries.remove(peripheral.getAddress());\n            unconnectedPeripherals.remove(peripheral.getAddress());\n            scannedPeripherals.remove((peripheral.getAddress()));\n            connectedPeripherals.put(peripheral.getAddress(), peripheral);\n\n            if (connectedPeripherals.size() == MAX_CONNECTED_PERIPHERALS) {\n                Timber.w(\"maximum amount (%d) of connected peripherals reached\", MAX_CONNECTED_PERIPHERALS);\n            }\n\n            callBackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    bluetoothCentralCallback.onConnectedPeripheral(peripheral);\n                }\n            });\n        }\n\n        @Override\n        public void connectFailed(final BluetoothPeripheral peripheral, final int status) {\n            unconnectedPeripherals.remove(peripheral.getAddress());\n            scannedPeripherals.remove((peripheral.getAddress()));\n\n            // Get the number of retries for this peripheral\n            int nrRetries = 0;\n            if (connectionRetries.get(peripheral.getAddress()) != null) {\n                Integer retries = connectionRetries.get(peripheral.getAddress());\n                if (retries != null) nrRetries = retries;\n            }\n\n            // Retry connection or conclude the connection has failed\n            if (nrRetries < MAX_CONNECTION_RETRIES && status != BluetoothPeripheral.GATT_CONN_TIMEOUT) {\n                Timber.i(\"retrying connection to '%s' (%s)\", peripheral.getName(), peripheral.getAddress());\n                nrRetries++;\n                connectionRetries.put(peripheral.getAddress(), nrRetries);\n                unconnectedPeripherals.put(peripheral.getAddress(), peripheral);\n                peripheral.connect();\n            } else {\n                Timber.i(\"connection to '%s' (%s) failed\", peripheral.getName(), peripheral.getAddress());\n                connectionRetries.remove(peripheral.getAddress());\n                callBackHandler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        bluetoothCentralCallback.onConnectionFailed(peripheral, status);\n                    }\n                });\n            }\n        }\n\n        @Override\n        public void disconnected(final BluetoothPeripheral peripheral, final int status) {\n            if (expectingBluetoothOffDisconnects) {\n                cancelDisconnectionTimer();\n                expectingBluetoothOffDisconnects = false;\n            }\n\n            connectedPeripherals.remove(peripheral.getAddress());\n            unconnectedPeripherals.remove(peripheral.getAddress());\n            scannedPeripherals.remove((peripheral.getAddress()));\n            connectionRetries.remove(peripheral.getAddress());\n\n            callBackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    bluetoothCentralCallback.onDisconnectedPeripheral(peripheral, status);\n                }\n            });\n        }\n\n        @Override\n        public String getPincode(BluetoothPeripheral device) {\n            return pinCodes.get(device.getAddress());\n        }\n    };", "modifier": "private final", "type": "BluetoothPeripheral.InternalCallback", "declarator": "internalCallback = new BluetoothPeripheral.InternalCallback() {\n\n        @Override\n        public void connected(final BluetoothPeripheral peripheral) {\n            connectionRetries.remove(peripheral.getAddress());\n            unconnectedPeripherals.remove(peripheral.getAddress());\n            scannedPeripherals.remove((peripheral.getAddress()));\n            connectedPeripherals.put(peripheral.getAddress(), peripheral);\n\n            if (connectedPeripherals.size() == MAX_CONNECTED_PERIPHERALS) {\n                Timber.w(\"maximum amount (%d) of connected peripherals reached\", MAX_CONNECTED_PERIPHERALS);\n            }\n\n            callBackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    bluetoothCentralCallback.onConnectedPeripheral(peripheral);\n                }\n            });\n        }\n\n        @Override\n        public void connectFailed(final BluetoothPeripheral peripheral, final int status) {\n            unconnectedPeripherals.remove(peripheral.getAddress());\n            scannedPeripherals.remove((peripheral.getAddress()));\n\n            // Get the number of retries for this peripheral\n            int nrRetries = 0;\n            if (connectionRetries.get(peripheral.getAddress()) != null) {\n                Integer retries = connectionRetries.get(peripheral.getAddress());\n                if (retries != null) nrRetries = retries;\n            }\n\n            // Retry connection or conclude the connection has failed\n            if (nrRetries < MAX_CONNECTION_RETRIES && status != BluetoothPeripheral.GATT_CONN_TIMEOUT) {\n                Timber.i(\"retrying connection to '%s' (%s)\", peripheral.getName(), peripheral.getAddress());\n                nrRetries++;\n                connectionRetries.put(peripheral.getAddress(), nrRetries);\n                unconnectedPeripherals.put(peripheral.getAddress(), peripheral);\n                peripheral.connect();\n            } else {\n                Timber.i(\"connection to '%s' (%s) failed\", peripheral.getName(), peripheral.getAddress());\n                connectionRetries.remove(peripheral.getAddress());\n                callBackHandler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        bluetoothCentralCallback.onConnectionFailed(peripheral, status);\n                    }\n                });\n            }\n        }\n\n        @Override\n        public void disconnected(final BluetoothPeripheral peripheral, final int status) {\n            if (expectingBluetoothOffDisconnects) {\n                cancelDisconnectionTimer();\n                expectingBluetoothOffDisconnects = false;\n            }\n\n            connectedPeripherals.remove(peripheral.getAddress());\n            unconnectedPeripherals.remove(peripheral.getAddress());\n            scannedPeripherals.remove((peripheral.getAddress()));\n            connectionRetries.remove(peripheral.getAddress());\n\n            callBackHandler.post(new Runnable() {\n                @Override\n                public void run() {\n                    bluetoothCentralCallback.onDisconnectedPeripheral(peripheral, status);\n                }\n            });\n        }\n\n        @Override\n        public String getPincode(BluetoothPeripheral device) {\n            return pinCodes.get(device.getAddress());\n        }\n    }", "var_name": "internalCallback"}, {"original_string": "private final BroadcastReceiver adapterStateReceiver = new BroadcastReceiver() {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            final String action = intent.getAction();\n            if (action == null) return;\n\n            if (action.equals(BluetoothAdapter.ACTION_STATE_CHANGED)) {\n                final int state = intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.ERROR);\n                callBackHandler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        bluetoothCentralCallback.onBluetoothAdapterStateChanged(state);\n                    }\n                });\n\n                handleAdapterState(state);\n            }\n        }\n    };", "modifier": "private final", "type": "BroadcastReceiver", "declarator": "adapterStateReceiver = new BroadcastReceiver() {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            final String action = intent.getAction();\n            if (action == null) return;\n\n            if (action.equals(BluetoothAdapter.ACTION_STATE_CHANGED)) {\n                final int state = intent.getIntExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.ERROR);\n                callBackHandler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        bluetoothCentralCallback.onBluetoothAdapterStateChanged(state);\n                    }\n                });\n\n                handleAdapterState(state);\n            }\n        }\n    }", "var_name": "adapterStateReceiver"}], "methods": [{"identifier": "BluetoothCentral", "parameters": "(@NotNull Context context, @NotNull BluetoothCentralCallback bluetoothCentralCallback, @NotNull Handler handler)", "modifiers": "public", "return": "", "signature": " BluetoothCentral(@NotNull Context context, @NotNull BluetoothCentralCallback bluetoothCentralCallback, @NotNull Handler handler)", "full_signature": "public  BluetoothCentral(@NotNull Context context, @NotNull BluetoothCentralCallback bluetoothCentralCallback, @NotNull Handler handler)", "class_method_signature": "BluetoothCentral.BluetoothCentral(@NotNull Context context, @NotNull BluetoothCentralCallback bluetoothCentralCallback, @NotNull Handler handler)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "BluetoothCentral.close()", "testcase": false, "constructor": false}, {"identifier": "setScanMode", "parameters": "(int scanMode)", "modifiers": "public", "return": "boolean", "signature": "boolean setScanMode(int scanMode)", "full_signature": "public boolean setScanMode(int scanMode)", "class_method_signature": "BluetoothCentral.setScanMode(int scanMode)", "testcase": false, "constructor": false}, {"identifier": "startScan", "parameters": "(List<ScanFilter> filters, ScanSettings scanSettings, ScanCallback scanCallback)", "modifiers": "private", "return": "void", "signature": "void startScan(List<ScanFilter> filters, ScanSettings scanSettings, ScanCallback scanCallback)", "full_signature": "private void startScan(List<ScanFilter> filters, ScanSettings scanSettings, ScanCallback scanCallback)", "class_method_signature": "BluetoothCentral.startScan(List<ScanFilter> filters, ScanSettings scanSettings, ScanCallback scanCallback)", "testcase": false, "constructor": false}, {"identifier": "scanForPeripheralsWithServices", "parameters": "(@NotNull final UUID[] serviceUUIDs)", "modifiers": "public", "return": "void", "signature": "void scanForPeripheralsWithServices(@NotNull final UUID[] serviceUUIDs)", "full_signature": "public void scanForPeripheralsWithServices(@NotNull final UUID[] serviceUUIDs)", "class_method_signature": "BluetoothCentral.scanForPeripheralsWithServices(@NotNull final UUID[] serviceUUIDs)", "testcase": false, "constructor": false}, {"identifier": "scanForPeripheralsWithNames", "parameters": "(@NotNull final String[] peripheralNames)", "modifiers": "public", "return": "void", "signature": "void scanForPeripheralsWithNames(@NotNull final String[] peripheralNames)", "full_signature": "public void scanForPeripheralsWithNames(@NotNull final String[] peripheralNames)", "class_method_signature": "BluetoothCentral.scanForPeripheralsWithNames(@NotNull final String[] peripheralNames)", "testcase": false, "constructor": false}, {"identifier": "scanForPeripheralsWithAddresses", "parameters": "(@NotNull final String[] peripheralAddresses)", "modifiers": "public", "return": "void", "signature": "void scanForPeripheralsWithAddresses(@NotNull final String[] peripheralAddresses)", "full_signature": "public void scanForPeripheralsWithAddresses(@NotNull final String[] peripheralAddresses)", "class_method_signature": "BluetoothCentral.scanForPeripheralsWithAddresses(@NotNull final String[] peripheralAddresses)", "testcase": false, "constructor": false}, {"identifier": "scanForPeripheralsUsingFilters", "parameters": "(@NotNull List<ScanFilter> filters)", "modifiers": "public", "return": "void", "signature": "void scanForPeripheralsUsingFilters(@NotNull List<ScanFilter> filters)", "full_signature": "public void scanForPeripheralsUsingFilters(@NotNull List<ScanFilter> filters)", "class_method_signature": "BluetoothCentral.scanForPeripheralsUsingFilters(@NotNull List<ScanFilter> filters)", "testcase": false, "constructor": false}, {"identifier": "scanForPeripherals", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void scanForPeripherals()", "full_signature": "public void scanForPeripherals()", "class_method_signature": "BluetoothCentral.scanForPeripherals()", "testcase": false, "constructor": false}, {"identifier": "scanForAutoConnectPeripherals", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void scanForAutoConnectPeripherals()", "full_signature": "private void scanForAutoConnectPeripherals()", "class_method_signature": "BluetoothCentral.scanForAutoConnectPeripherals()", "testcase": false, "constructor": false}, {"identifier": "stopAutoconnectScan", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void stopAutoconnectScan()", "full_signature": "private void stopAutoconnectScan()", "class_method_signature": "BluetoothCentral.stopAutoconnectScan()", "testcase": false, "constructor": false}, {"identifier": "isAutoScanning", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isAutoScanning()", "full_signature": "private boolean isAutoScanning()", "class_method_signature": "BluetoothCentral.isAutoScanning()", "testcase": false, "constructor": false}, {"identifier": "stopScan", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stopScan()", "full_signature": "public void stopScan()", "class_method_signature": "BluetoothCentral.stopScan()", "testcase": false, "constructor": false}, {"identifier": "isScanning", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isScanning()", "full_signature": "public boolean isScanning()", "class_method_signature": "BluetoothCentral.isScanning()", "testcase": false, "constructor": false}, {"identifier": "connectPeripheral", "parameters": "(@NotNull BluetoothPeripheral peripheral, @NotNull BluetoothPeripheralCallback peripheralCallback)", "modifiers": "public", "return": "void", "signature": "void connectPeripheral(@NotNull BluetoothPeripheral peripheral, @NotNull BluetoothPeripheralCallback peripheralCallback)", "full_signature": "public void connectPeripheral(@NotNull BluetoothPeripheral peripheral, @NotNull BluetoothPeripheralCallback peripheralCallback)", "class_method_signature": "BluetoothCentral.connectPeripheral(@NotNull BluetoothPeripheral peripheral, @NotNull BluetoothPeripheralCallback peripheralCallback)", "testcase": false, "constructor": false}, {"identifier": "autoConnectPeripheral", "parameters": "(@NotNull BluetoothPeripheral peripheral, @NotNull BluetoothPeripheralCallback peripheralCallback)", "modifiers": "public", "return": "void", "signature": "void autoConnectPeripheral(@NotNull BluetoothPeripheral peripheral, @NotNull BluetoothPeripheralCallback peripheralCallback)", "full_signature": "public void autoConnectPeripheral(@NotNull BluetoothPeripheral peripheral, @NotNull BluetoothPeripheralCallback peripheralCallback)", "class_method_signature": "BluetoothCentral.autoConnectPeripheral(@NotNull BluetoothPeripheral peripheral, @NotNull BluetoothPeripheralCallback peripheralCallback)", "testcase": false, "constructor": false}, {"identifier": "autoConnectPeripheralByScan", "parameters": "(String peripheralAddress, BluetoothPeripheralCallback peripheralCallback)", "modifiers": "private", "return": "void", "signature": "void autoConnectPeripheralByScan(String peripheralAddress, BluetoothPeripheralCallback peripheralCallback)", "full_signature": "private void autoConnectPeripheralByScan(String peripheralAddress, BluetoothPeripheralCallback peripheralCallback)", "class_method_signature": "BluetoothCentral.autoConnectPeripheralByScan(String peripheralAddress, BluetoothPeripheralCallback peripheralCallback)", "testcase": false, "constructor": false}, {"identifier": "cancelConnection", "parameters": "(@NotNull final BluetoothPeripheral peripheral)", "modifiers": "public", "return": "void", "signature": "void cancelConnection(@NotNull final BluetoothPeripheral peripheral)", "full_signature": "public void cancelConnection(@NotNull final BluetoothPeripheral peripheral)", "class_method_signature": "BluetoothCentral.cancelConnection(@NotNull final BluetoothPeripheral peripheral)", "testcase": false, "constructor": false}, {"identifier": "autoConnectPeripheralsBatch", "parameters": "(@NotNull Map<BluetoothPeripheral, BluetoothPeripheralCallback> batch)", "modifiers": "public", "return": "void", "signature": "void autoConnectPeripheralsBatch(@NotNull Map<BluetoothPeripheral, BluetoothPeripheralCallback> batch)", "full_signature": "public void autoConnectPeripheralsBatch(@NotNull Map<BluetoothPeripheral, BluetoothPeripheralCallback> batch)", "class_method_signature": "BluetoothCentral.autoConnectPeripheralsBatch(@NotNull Map<BluetoothPeripheral, BluetoothPeripheralCallback> batch)", "testcase": false, "constructor": false}, {"identifier": "getPeripheral", "parameters": "(@NotNull String peripheralAddress)", "modifiers": "public @NotNull", "return": "BluetoothPeripheral", "signature": "BluetoothPeripheral getPeripheral(@NotNull String peripheralAddress)", "full_signature": "public @NotNull BluetoothPeripheral getPeripheral(@NotNull String peripheralAddress)", "class_method_signature": "BluetoothCentral.getPeripheral(@NotNull String peripheralAddress)", "testcase": false, "constructor": false}, {"identifier": "getConnectedPeripherals", "parameters": "()", "modifiers": "public @NotNull", "return": "List<BluetoothPeripheral>", "signature": "List<BluetoothPeripheral> getConnectedPeripherals()", "full_signature": "public @NotNull List<BluetoothPeripheral> getConnectedPeripherals()", "class_method_signature": "BluetoothCentral.getConnectedPeripherals()", "testcase": false, "constructor": false}, {"identifier": "isBleReady", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isBleReady()", "full_signature": "private boolean isBleReady()", "class_method_signature": "BluetoothCentral.isBleReady()", "testcase": false, "constructor": false}, {"identifier": "isBleSupported", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isBleSupported()", "full_signature": "private boolean isBleSupported()", "class_method_signature": "BluetoothCentral.isBleSupported()", "testcase": false, "constructor": false}, {"identifier": "isBluetoothEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isBluetoothEnabled()", "full_signature": "public boolean isBluetoothEnabled()", "class_method_signature": "BluetoothCentral.isBluetoothEnabled()", "testcase": false, "constructor": false}, {"identifier": "permissionsGranted", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean permissionsGranted()", "full_signature": "private boolean permissionsGranted()", "class_method_signature": "BluetoothCentral.permissionsGranted()", "testcase": false, "constructor": false}, {"identifier": "setScanTimer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setScanTimer()", "full_signature": "private void setScanTimer()", "class_method_signature": "BluetoothCentral.setScanTimer()", "testcase": false, "constructor": false}, {"identifier": "cancelTimeoutTimer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void cancelTimeoutTimer()", "full_signature": "private void cancelTimeoutTimer()", "class_method_signature": "BluetoothCentral.cancelTimeoutTimer()", "testcase": false, "constructor": false}, {"identifier": "setAutoConnectTimer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setAutoConnectTimer()", "full_signature": "private void setAutoConnectTimer()", "class_method_signature": "BluetoothCentral.setAutoConnectTimer()", "testcase": false, "constructor": false}, {"identifier": "cancelAutoConnectTimer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void cancelAutoConnectTimer()", "full_signature": "private void cancelAutoConnectTimer()", "class_method_signature": "BluetoothCentral.cancelAutoConnectTimer()", "testcase": false, "constructor": false}, {"identifier": "setPinCodeForPeripheral", "parameters": "(@NotNull String peripheralAddress, @NotNull String pin)", "modifiers": "public", "return": "boolean", "signature": "boolean setPinCodeForPeripheral(@NotNull String peripheralAddress, @NotNull String pin)", "full_signature": "public boolean setPinCodeForPeripheral(@NotNull String peripheralAddress, @NotNull String pin)", "class_method_signature": "BluetoothCentral.setPinCodeForPeripheral(@NotNull String peripheralAddress, @NotNull String pin)", "testcase": false, "constructor": false}, {"identifier": "removeBond", "parameters": "(@NotNull String peripheralAddress)", "modifiers": "public", "return": "boolean", "signature": "boolean removeBond(@NotNull String peripheralAddress)", "full_signature": "public boolean removeBond(@NotNull String peripheralAddress)", "class_method_signature": "BluetoothCentral.removeBond(@NotNull String peripheralAddress)", "testcase": false, "constructor": false}, {"identifier": "startPairingPopupHack", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startPairingPopupHack()", "full_signature": "public void startPairingPopupHack()", "class_method_signature": "BluetoothCentral.startPairingPopupHack()", "testcase": false, "constructor": false}, {"identifier": "cancelAllConnectionsWhenBluetoothOff", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void cancelAllConnectionsWhenBluetoothOff()", "full_signature": "private void cancelAllConnectionsWhenBluetoothOff()", "class_method_signature": "BluetoothCentral.cancelAllConnectionsWhenBluetoothOff()", "testcase": false, "constructor": false}, {"identifier": "startDisconnectionTimer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void startDisconnectionTimer()", "full_signature": "private void startDisconnectionTimer()", "class_method_signature": "BluetoothCentral.startDisconnectionTimer()", "testcase": false, "constructor": false}, {"identifier": "cancelDisconnectionTimer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void cancelDisconnectionTimer()", "full_signature": "private void cancelDisconnectionTimer()", "class_method_signature": "BluetoothCentral.cancelDisconnectionTimer()", "testcase": false, "constructor": false}, {"identifier": "handleAdapterState", "parameters": "(int state)", "modifiers": "private", "return": "void", "signature": "void handleAdapterState(int state)", "full_signature": "private void handleAdapterState(int state)", "class_method_signature": "BluetoothCentral.handleAdapterState(int state)", "testcase": false, "constructor": false}, {"identifier": "scanErrorToString", "parameters": "(final int errorCode)", "modifiers": "private", "return": "String", "signature": "String scanErrorToString(final int errorCode)", "full_signature": "private String scanErrorToString(final int errorCode)", "class_method_signature": "BluetoothCentral.scanErrorToString(final int errorCode)", "testcase": false, "constructor": false}], "file": "blessed/src/main/java/com/welie/blessed/BluetoothCentral.java"}, "focal_method": {"identifier": "stopScan", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void stopScan() {\n        cancelTimeoutTimer();\n        if (isScanning()) {\n            bluetoothScanner.stopScan(currentCallback);\n            Timber.i(\"scan stopped\");\n        } else {\n            Timber.i(\"no scan to stop because no scan is running\");\n        }\n        currentCallback = null;\n        currentFilters = null;\n        scannedPeripherals.clear();\n    }", "signature": "void stopScan()", "full_signature": "public void stopScan()", "class_method_signature": "BluetoothCentral.stopScan()", "testcase": false, "constructor": false, "invocations": ["cancelTimeoutTimer", "isScanning", "stopScan", "i", "i", "clear"]}, "repository": {"repo_id": 173468970, "url": "https://github.com/weliem/blessed-android", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 92, "size": 578, "license": "licensed"}}