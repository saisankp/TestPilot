{"test_class": {"identifier": "CQLTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/library/cql/src/test/java/org/geotools/filter/text/cql2/CQLTest.java"}, "test_case": {"identifier": "dwithinGeometry", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void dwithinGeometry() throws Exception{\n        Filter resultFilter;\n\n        // DWITHIN\n        resultFilter = CQL.toFilter(\"DWITHIN(the_geom, POINT(1 2), 10, kilometers)\");\n\n        Assert.assertTrue(resultFilter instanceof DistanceBufferOperator);\n    }", "signature": "void dwithinGeometry()", "full_signature": "@Test public void dwithinGeometry()", "class_method_signature": "CQLTest.dwithinGeometry()", "testcase": true, "constructor": false, "invocations": ["toFilter", "assertTrue"]}, "focal_class": {"identifier": "CQL", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "CQL", "parameters": "()", "modifiers": "private", "return": "", "signature": " CQL()", "full_signature": "private  CQL()", "class_method_signature": "CQL.CQL()", "testcase": false, "constructor": true}, {"identifier": "toFilter", "parameters": "(final String cqlPredicate)", "modifiers": "public static", "return": "Filter", "signature": "Filter toFilter(final String cqlPredicate)", "full_signature": "public static Filter toFilter(final String cqlPredicate)", "class_method_signature": "CQL.toFilter(final String cqlPredicate)", "testcase": false, "constructor": false}, {"identifier": "toFilter", "parameters": "(final String cqlPredicate, final FilterFactory filterFactory)", "modifiers": "public static", "return": "Filter", "signature": "Filter toFilter(final String cqlPredicate, final FilterFactory filterFactory)", "full_signature": "public static Filter toFilter(final String cqlPredicate, final FilterFactory filterFactory)", "class_method_signature": "CQL.toFilter(final String cqlPredicate, final FilterFactory filterFactory)", "testcase": false, "constructor": false}, {"identifier": "toExpression", "parameters": "(String cqlExpression)", "modifiers": "public static", "return": "Expression", "signature": "Expression toExpression(String cqlExpression)", "full_signature": "public static Expression toExpression(String cqlExpression)", "class_method_signature": "CQL.toExpression(String cqlExpression)", "testcase": false, "constructor": false}, {"identifier": "toExpression", "parameters": "(final String cqlExpression,\n                                          final FilterFactory filterFactory)", "modifiers": "public static", "return": "Expression", "signature": "Expression toExpression(final String cqlExpression,\n                                          final FilterFactory filterFactory)", "full_signature": "public static Expression toExpression(final String cqlExpression,\n                                          final FilterFactory filterFactory)", "class_method_signature": "CQL.toExpression(final String cqlExpression,\n                                          final FilterFactory filterFactory)", "testcase": false, "constructor": false}, {"identifier": "toFilterList", "parameters": "(final String cqlFilterList)", "modifiers": "public static", "return": "List<Filter>", "signature": "List<Filter> toFilterList(final String cqlFilterList)", "full_signature": "public static List<Filter> toFilterList(final String cqlFilterList)", "class_method_signature": "CQL.toFilterList(final String cqlFilterList)", "testcase": false, "constructor": false}, {"identifier": "toCQL", "parameters": "( List<Filter> filterList )", "modifiers": "public static", "return": "String", "signature": "String toCQL( List<Filter> filterList )", "full_signature": "public static String toCQL( List<Filter> filterList )", "class_method_signature": "CQL.toCQL( List<Filter> filterList )", "testcase": false, "constructor": false}, {"identifier": "toCQL", "parameters": "( Filter filter )", "modifiers": "public static", "return": "String", "signature": "String toCQL( Filter filter )", "full_signature": "public static String toCQL( Filter filter )", "class_method_signature": "CQL.toCQL( Filter filter )", "testcase": false, "constructor": false}, {"identifier": "toCQL", "parameters": "( Expression expression )", "modifiers": "public static", "return": "String", "signature": "String toCQL( Expression expression )", "full_signature": "public static String toCQL( Expression expression )", "class_method_signature": "CQL.toCQL( Expression expression )", "testcase": false, "constructor": false}, {"identifier": "toFilterList", "parameters": "(final String cqlSequencePredicate, final FilterFactory filterFactory)", "modifiers": "public static", "return": "List<Filter>", "signature": "List<Filter> toFilterList(final String cqlSequencePredicate, final FilterFactory filterFactory)", "full_signature": "public static List<Filter> toFilterList(final String cqlSequencePredicate, final FilterFactory filterFactory)", "class_method_signature": "CQL.toFilterList(final String cqlSequencePredicate, final FilterFactory filterFactory)", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static final", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static final void main(String[] args)", "class_method_signature": "CQL.main(String[] args)", "testcase": false, "constructor": false}], "file": "modules/library/cql/src/main/java/org/geotools/filter/text/cql2/CQL.java"}, "focal_method": {"identifier": "toFilter", "parameters": "(final String cqlPredicate)", "modifiers": "public static", "return": "Filter", "body": "public static Filter toFilter(final String cqlPredicate)\n        throws CQLException {\n        Filter filter = CQL.toFilter(cqlPredicate, null);\n\n        return filter;\n    }", "signature": "Filter toFilter(final String cqlPredicate)", "full_signature": "public static Filter toFilter(final String cqlPredicate)", "class_method_signature": "CQL.toFilter(final String cqlPredicate)", "testcase": false, "constructor": false, "invocations": ["toFilter"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}