{"test_class": {"identifier": "PercentageTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Percentage p1;", "modifier": "", "type": "Percentage", "declarator": "p1", "var_name": "p1"}, {"original_string": "Percentage p2;", "modifier": "", "type": "Percentage", "declarator": "p2", "var_name": "p2"}, {"original_string": "Percentage p3;", "modifier": "", "type": "Percentage", "declarator": "p3", "var_name": "p3"}], "file": "legacy/extensions/core/applib/src/test/java/org/apache/isis/legacy/applib/value/PercentageTest.java"}, "test_case": {"identifier": "testIsEqualTo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsEqualTo() {\n        assertTrue(p1.isEqualTo(p2));\n        assertFalse(p1.isEqualTo(p3));\n    }", "signature": "void testIsEqualTo()", "full_signature": "@Test public void testIsEqualTo()", "class_method_signature": "PercentageTest.testIsEqualTo()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isEqualTo", "assertFalse", "isEqualTo"]}, "focal_class": {"identifier": "Percentage", "superclass": "extends Magnitude<Percentage>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final float value;", "modifier": "private final", "type": "float", "declarator": "value", "var_name": "value"}], "methods": [{"identifier": "Percentage", "parameters": "(final float value)", "modifiers": "public", "return": "", "signature": " Percentage(final float value)", "full_signature": "public  Percentage(final float value)", "class_method_signature": "Percentage.Percentage(final float value)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(final float value)", "modifiers": "public", "return": "Percentage", "signature": "Percentage add(final float value)", "full_signature": "public Percentage add(final float value)", "class_method_signature": "Percentage.add(final float value)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final Percentage value)", "modifiers": "public", "return": "Percentage", "signature": "Percentage add(final Percentage value)", "full_signature": "public Percentage add(final Percentage value)", "class_method_signature": "Percentage.add(final Percentage value)", "testcase": false, "constructor": false}, {"identifier": "doubleValue", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double doubleValue()", "full_signature": "public double doubleValue()", "class_method_signature": "Percentage.doubleValue()", "testcase": false, "constructor": false}, {"identifier": "floatValue", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float floatValue()", "full_signature": "public float floatValue()", "class_method_signature": "Percentage.floatValue()", "testcase": false, "constructor": false}, {"identifier": "intValue", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int intValue()", "full_signature": "public int intValue()", "class_method_signature": "Percentage.intValue()", "testcase": false, "constructor": false}, {"identifier": "isEqualTo", "parameters": "(final Percentage magnitude)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEqualTo(final Percentage magnitude)", "full_signature": "@Override public boolean isEqualTo(final Percentage magnitude)", "class_method_signature": "Percentage.isEqualTo(final Percentage magnitude)", "testcase": false, "constructor": false}, {"identifier": "isLessThan", "parameters": "(final Percentage magnitude)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isLessThan(final Percentage magnitude)", "full_signature": "@Override public boolean isLessThan(final Percentage magnitude)", "class_method_signature": "Percentage.isLessThan(final Percentage magnitude)", "testcase": false, "constructor": false}, {"identifier": "longValue", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long longValue()", "full_signature": "public long longValue()", "class_method_signature": "Percentage.longValue()", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(final float value)", "modifiers": "public", "return": "Percentage", "signature": "Percentage multiply(final float value)", "full_signature": "public Percentage multiply(final float value)", "class_method_signature": "Percentage.multiply(final float value)", "testcase": false, "constructor": false}, {"identifier": "shortValue", "parameters": "()", "modifiers": "public", "return": "short", "signature": "short shortValue()", "full_signature": "public short shortValue()", "class_method_signature": "Percentage.shortValue()", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(final float value)", "modifiers": "public", "return": "Percentage", "signature": "Percentage subtract(final float value)", "full_signature": "public Percentage subtract(final float value)", "class_method_signature": "Percentage.subtract(final float value)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(final Percentage value)", "modifiers": "public", "return": "Percentage", "signature": "Percentage subtract(final Percentage value)", "full_signature": "public Percentage subtract(final Percentage value)", "class_method_signature": "Percentage.subtract(final Percentage value)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object other)", "full_signature": "@Override public boolean equals(final Object other)", "class_method_signature": "Percentage.equals(final Object other)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Percentage other)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(final Percentage other)", "full_signature": "public boolean equals(final Percentage other)", "class_method_signature": "Percentage.equals(final Percentage other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Percentage.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Percentage.toString()", "testcase": false, "constructor": false}], "file": "legacy/extensions/core/applib/src/main/java/org/apache/isis/legacy/applib/value/Percentage.java"}, "focal_method": {"identifier": "isEqualTo", "parameters": "(final Percentage magnitude)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isEqualTo(final Percentage magnitude) {\n        return (magnitude).value == value;\n    }", "signature": "boolean isEqualTo(final Percentage magnitude)", "full_signature": "@Override public boolean isEqualTo(final Percentage magnitude)", "class_method_signature": "Percentage.isEqualTo(final Percentage magnitude)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 6935442, "url": "https://github.com/apache/isis", "stars": 516, "created": "11/30/2012 8:00:24 AM +00:00", "updates": "2020-01-27T13:28:09+00:00", "fork": "False", "license": "licensed"}}