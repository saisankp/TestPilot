{"test_class": {"identifier": "TableInfoTest", "superclass": "", "interfaces": "", "fields": [], "file": "mybatis-plus-generator/src/test/java/com/baomidou/mybatisplus/generator/config/po/TableInfoTest.java"}, "test_case": {"identifier": "importPackageTest", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void importPackageTest() {\n        TableInfo tableInfo;\n        StrategyConfig strategyConfig;\n\n        tableInfo = new TableInfo().setName(\"user\");\n        tableInfo.importPackage(new StrategyConfig(), new GlobalConfig());\n        Assertions.assertEquals(1, tableInfo.getImportPackages().size());\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(Serializable.class.getName()));\n\n        tableInfo = new TableInfo().setName(\"user\").setConvert(true);\n        tableInfo.importPackage(new StrategyConfig(), new GlobalConfig());\n        Assertions.assertEquals(2, tableInfo.getImportPackages().size());\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(Serializable.class.getName()));\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(TableName.class.getName()));\n\n        tableInfo = new TableInfo().setName(\"user\");\n        strategyConfig = new StrategyConfig();\n        tableInfo.importPackage(strategyConfig.setSuperEntityClass(\"con.baomihua.demo.SuperEntity\"), new GlobalConfig());\n        Assertions.assertEquals(1, tableInfo.getImportPackages().size());\n        Assertions.assertFalse(tableInfo.getImportPackages().contains(Serializable.class.getName()));\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(\"con.baomihua.demo.SuperEntity\"));\n\n        tableInfo = new TableInfo().setName(\"user\");\n        strategyConfig = new StrategyConfig();\n        tableInfo.importPackage(strategyConfig, new GlobalConfig().setActiveRecord(true));\n        Assertions.assertEquals(1, tableInfo.getImportPackages().size());\n        Assertions.assertFalse(tableInfo.getImportPackages().contains(Serializable.class.getName()));\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(Model.class.getName()));\n\n        strategyConfig = new StrategyConfig();\n        tableInfo = new TableInfo().setName(\"user\");\n        tableInfo.addFields(new TableField().setName(\"u_id\").setPropertyName(strategyConfig, \"uid\").setColumnType(DbColumnType.LONG).setKeyFlag(true));\n        tableInfo.importPackage(strategyConfig, new GlobalConfig());\n        Assertions.assertEquals(2, tableInfo.getImportPackages().size());\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(Serializable.class.getName()));\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(TableId.class.getName()));\n\n        strategyConfig = new StrategyConfig();\n        tableInfo = new TableInfo().setName(\"user\");\n        tableInfo.addFields(new TableField().setName(\"u_id\").setPropertyName(strategyConfig, \"uid\").setColumnType(DbColumnType.LONG).setKeyFlag(true).setKeyIdentityFlag(true));\n        tableInfo.importPackage(strategyConfig, new GlobalConfig());\n        Assertions.assertEquals(3, tableInfo.getImportPackages().size());\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(Serializable.class.getName()));\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(TableId.class.getName()));\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(IdType.class.getName()));\n\n        strategyConfig = new StrategyConfig().setLogicDeleteFieldName(\"delete_flag\");\n        tableInfo = new TableInfo().setName(\"user\");\n        tableInfo.addFields(new TableField().setName(\"u_id\").setPropertyName(strategyConfig, \"uid\").setColumnType(DbColumnType.LONG).setKeyFlag(true));\n        tableInfo.addFields(new TableField().setName(\"delete_flag\").setPropertyName(strategyConfig, \"deleteFlag\").setColumnType(DbColumnType.BOOLEAN));\n        tableInfo.importPackage(strategyConfig, new GlobalConfig());\n        Assertions.assertEquals(4, tableInfo.getImportPackages().size());\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(Serializable.class.getName()));\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(com.baomidou.mybatisplus.annotation.TableField.class.getName()));\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(TableLogic.class.getName()));\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(TableId.class.getName()));\n\n        tableInfo = new TableInfo().setName(\"user\");\n        tableInfo.addFields(new TableField().setName(\"name\").setPropertyName(strategyConfig, \"name\").setColumnType(DbColumnType.STRING));\n        tableInfo.importPackage(new StrategyConfig(), new GlobalConfig().setIdType(IdType.ASSIGN_ID));\n        Assertions.assertEquals(1, tableInfo.getImportPackages().size());\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(Serializable.class.getName()));\n\n        tableInfo = new TableInfo().setName(\"user\").setHavePrimaryKey(true);\n        tableInfo.addFields(new TableField().setName(\"u_id\").setPropertyName(strategyConfig, \"uid\").setColumnType(DbColumnType.LONG).setKeyFlag(true));\n        tableInfo.importPackage(new StrategyConfig(), new GlobalConfig().setIdType(IdType.ASSIGN_ID));\n        Assertions.assertEquals(3, tableInfo.getImportPackages().size());\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(Serializable.class.getName()));\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(TableId.class.getName()));\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(IdType.class.getName()));\n\n        tableInfo = new TableInfo().setName(\"user\").setHavePrimaryKey(true);\n        tableInfo.addFields(new TableField().setName(\"u_id\").setPropertyName(strategyConfig, \"uid\").setColumnType(DbColumnType.LONG).setKeyFlag(true));\n        tableInfo.addFields(new TableField().setName(\"create_time\").setPropertyName(strategyConfig, \"createTime\").setColumnType(DbColumnType.DATE).setFill(FieldFill.DEFAULT.name()));\n        tableInfo.importPackage(new StrategyConfig().addTableFills(new TableFill(\"createTime\", FieldFill.DEFAULT)), new GlobalConfig());\n        Assertions.assertEquals(5, tableInfo.getImportPackages().size());\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(Date.class.getName()));\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(Serializable.class.getName()));\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(TableId.class.getName()));\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(com.baomidou.mybatisplus.annotation.TableField.class.getName()));\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(FieldFill.class.getName()));\n\n        tableInfo = new TableInfo().setName(\"user\").setHavePrimaryKey(true);\n        tableInfo.addFields(new TableField().setName(\"u_id\").setPropertyName(strategyConfig, \"uid\").setColumnType(DbColumnType.LONG).setKeyFlag(true));\n        tableInfo.addFields(new TableField().setName(\"version\").setPropertyName(strategyConfig, \"version\").setColumnType(DbColumnType.LONG));\n        tableInfo.importPackage(new StrategyConfig().setVersionFieldName(\"version\"), new GlobalConfig());\n        Assertions.assertEquals(3, tableInfo.getImportPackages().size());\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(Serializable.class.getName()));\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(TableId.class.getName()));\n        Assertions.assertTrue(tableInfo.getImportPackages().contains(Version.class.getName()));\n    }", "signature": "void importPackageTest()", "full_signature": "@Test void importPackageTest()", "class_method_signature": "TableInfoTest.importPackageTest()", "testcase": true, "constructor": false, "invocations": ["setName", "importPackage", "assertEquals", "size", "getImportPackages", "assertTrue", "contains", "getImportPackages", "getName", "setConvert", "setName", "importPackage", "assertEquals", "size", "getImportPackages", "assertTrue", "contains", "getImportPackages", "getName", "assertTrue", "contains", "getImportPackages", "getName", "setName", "importPackage", "setSuperEntityClass", "assertEquals", "size", "getImportPackages", "assertFalse", "contains", "getImportPackages", "getName", "assertTrue", "contains", "getImportPackages", "setName", "importPackage", "setActiveRecord", "assertEquals", "size", "getImportPackages", "assertFalse", "contains", "getImportPackages", "getName", "assertTrue", "contains", "getImportPackages", "getName", "setName", "addFields", "setKeyFlag", "setColumnType", "setPropertyName", "setName", "importPackage", "assertEquals", "size", "getImportPackages", "assertTrue", "contains", "getImportPackages", "getName", "assertTrue", "contains", "getImportPackages", "getName", "setName", "addFields", "setKeyIdentityFlag", "setKeyFlag", "setColumnType", "setPropertyName", "setName", "importPackage", "assertEquals", "size", "getImportPackages", "assertTrue", "contains", "getImportPackages", "getName", "assertTrue", "contains", "getImportPackages", "getName", "assertTrue", "contains", "getImportPackages", "getName", "setLogicDeleteFieldName", "setName", "addFields", "setKeyFlag", "setColumnType", "setPropertyName", "setName", "addFields", "setColumnType", "setPropertyName", "setName", "importPackage", "assertEquals", "size", "getImportPackages", "assertTrue", "contains", "getImportPackages", "getName", "assertTrue", "contains", "getImportPackages", "getName", "assertTrue", "contains", "getImportPackages", "getName", "assertTrue", "contains", "getImportPackages", "getName", "setName", "addFields", "setColumnType", "setPropertyName", "setName", "importPackage", "setIdType", "assertEquals", "size", "getImportPackages", "assertTrue", "contains", "getImportPackages", "getName", "setHavePrimaryKey", "setName", "addFields", "setKeyFlag", "setColumnType", "setPropertyName", "setName", "importPackage", "setIdType", "assertEquals", "size", "getImportPackages", "assertTrue", "contains", "getImportPackages", "getName", "assertTrue", "contains", "getImportPackages", "getName", "assertTrue", "contains", "getImportPackages", "getName", "setHavePrimaryKey", "setName", "addFields", "setKeyFlag", "setColumnType", "setPropertyName", "setName", "addFields", "setFill", "setColumnType", "setPropertyName", "setName", "name", "importPackage", "addTableFills", "assertEquals", "size", "getImportPackages", "assertTrue", "contains", "getImportPackages", "getName", "assertTrue", "contains", "getImportPackages", "getName", "assertTrue", "contains", "getImportPackages", "getName", "assertTrue", "contains", "getImportPackages", "getName", "assertTrue", "contains", "getImportPackages", "getName", "setHavePrimaryKey", "setName", "addFields", "setKeyFlag", "setColumnType", "setPropertyName", "setName", "addFields", "setColumnType", "setPropertyName", "setName", "importPackage", "setVersionFieldName", "assertEquals", "size", "getImportPackages", "assertTrue", "contains", "getImportPackages", "getName", "assertTrue", "contains", "getImportPackages", "getName", "assertTrue", "contains", "getImportPackages", "getName"]}, "focal_class": {"identifier": "TableInfo", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Set<String> importPackages = new HashSet<>();", "modifier": "private final", "type": "Set<String>", "declarator": "importPackages = new HashSet<>()", "var_name": "importPackages"}, {"original_string": "private boolean convert;", "modifier": "private", "type": "boolean", "declarator": "convert", "var_name": "convert"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private String comment;", "modifier": "private", "type": "String", "declarator": "comment", "var_name": "comment"}, {"original_string": "private String entityName;", "modifier": "private", "type": "String", "declarator": "entityName", "var_name": "entityName"}, {"original_string": "private String mapperName;", "modifier": "private", "type": "String", "declarator": "mapperName", "var_name": "mapperName"}, {"original_string": "private String xmlName;", "modifier": "private", "type": "String", "declarator": "xmlName", "var_name": "xmlName"}, {"original_string": "private String serviceName;", "modifier": "private", "type": "String", "declarator": "serviceName", "var_name": "serviceName"}, {"original_string": "private String serviceImplName;", "modifier": "private", "type": "String", "declarator": "serviceImplName", "var_name": "serviceImplName"}, {"original_string": "private String controllerName;", "modifier": "private", "type": "String", "declarator": "controllerName", "var_name": "controllerName"}, {"original_string": "private final List<TableField> fields = new ArrayList<>();", "modifier": "private final", "type": "List<TableField>", "declarator": "fields = new ArrayList<>()", "var_name": "fields"}, {"original_string": "private boolean havePrimaryKey;", "modifier": "private", "type": "boolean", "declarator": "havePrimaryKey", "var_name": "havePrimaryKey"}, {"original_string": "private final List<TableField> commonFields = new ArrayList<>();", "modifier": "private final", "type": "List<TableField>", "declarator": "commonFields = new ArrayList<>()", "var_name": "commonFields"}, {"original_string": "private String fieldNames;", "modifier": "private", "type": "String", "declarator": "fieldNames", "var_name": "fieldNames"}], "methods": [{"identifier": "setConvert", "parameters": "(boolean convert)", "modifiers": "@Deprecated public", "return": "TableInfo", "signature": "TableInfo setConvert(boolean convert)", "full_signature": "@Deprecated public TableInfo setConvert(boolean convert)", "class_method_signature": "TableInfo.setConvert(boolean convert)", "testcase": false, "constructor": false}, {"identifier": "setConvert", "parameters": "(StrategyConfig strategyConfig)", "modifiers": "protected", "return": "TableInfo", "signature": "TableInfo setConvert(StrategyConfig strategyConfig)", "full_signature": "protected TableInfo setConvert(StrategyConfig strategyConfig)", "class_method_signature": "TableInfo.setConvert(StrategyConfig strategyConfig)", "testcase": false, "constructor": false}, {"identifier": "getEntityPath", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEntityPath()", "full_signature": "public String getEntityPath()", "class_method_signature": "TableInfo.getEntityPath()", "testcase": false, "constructor": false}, {"identifier": "setEntityName", "parameters": "(String entityName)", "modifiers": "@Deprecated public", "return": "TableInfo", "signature": "TableInfo setEntityName(String entityName)", "full_signature": "@Deprecated public TableInfo setEntityName(String entityName)", "class_method_signature": "TableInfo.setEntityName(String entityName)", "testcase": false, "constructor": false}, {"identifier": "setEntityName", "parameters": "(StrategyConfig strategyConfig, String entityName)", "modifiers": "public", "return": "TableInfo", "signature": "TableInfo setEntityName(StrategyConfig strategyConfig, String entityName)", "full_signature": "public TableInfo setEntityName(StrategyConfig strategyConfig, String entityName)", "class_method_signature": "TableInfo.setEntityName(StrategyConfig strategyConfig, String entityName)", "testcase": false, "constructor": false}, {"identifier": "setFields", "parameters": "(List<TableField> fields)", "modifiers": "@Deprecated public", "return": "TableInfo", "signature": "TableInfo setFields(List<TableField> fields)", "full_signature": "@Deprecated public TableInfo setFields(List<TableField> fields)", "class_method_signature": "TableInfo.setFields(List<TableField> fields)", "testcase": false, "constructor": false}, {"identifier": "addFields", "parameters": "(List<TableField> fields)", "modifiers": "public", "return": "TableInfo", "signature": "TableInfo addFields(List<TableField> fields)", "full_signature": "public TableInfo addFields(List<TableField> fields)", "class_method_signature": "TableInfo.addFields(List<TableField> fields)", "testcase": false, "constructor": false}, {"identifier": "addFields", "parameters": "(TableField... fields)", "modifiers": "public", "return": "TableInfo", "signature": "TableInfo addFields(TableField... fields)", "full_signature": "public TableInfo addFields(TableField... fields)", "class_method_signature": "TableInfo.addFields(TableField... fields)", "testcase": false, "constructor": false}, {"identifier": "setImportPackages", "parameters": "(String pkg)", "modifiers": "@Deprecated public", "return": "TableInfo", "signature": "TableInfo setImportPackages(String pkg)", "full_signature": "@Deprecated public TableInfo setImportPackages(String pkg)", "class_method_signature": "TableInfo.setImportPackages(String pkg)", "testcase": false, "constructor": false}, {"identifier": "addImportPackages", "parameters": "(String... pkgs)", "modifiers": "public", "return": "TableInfo", "signature": "TableInfo addImportPackages(String... pkgs)", "full_signature": "public TableInfo addImportPackages(String... pkgs)", "class_method_signature": "TableInfo.addImportPackages(String... pkgs)", "testcase": false, "constructor": false}, {"identifier": "isLogicDelete", "parameters": "(String logicDeletePropertyName)", "modifiers": "public", "return": "boolean", "signature": "boolean isLogicDelete(String logicDeletePropertyName)", "full_signature": "public boolean isLogicDelete(String logicDeletePropertyName)", "class_method_signature": "TableInfo.isLogicDelete(String logicDeletePropertyName)", "testcase": false, "constructor": false}, {"identifier": "setFieldNames", "parameters": "(String fieldNames)", "modifiers": "@Deprecated public", "return": "TableInfo", "signature": "TableInfo setFieldNames(String fieldNames)", "full_signature": "@Deprecated public TableInfo setFieldNames(String fieldNames)", "class_method_signature": "TableInfo.setFieldNames(String fieldNames)", "testcase": false, "constructor": false}, {"identifier": "getFieldNames", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFieldNames()", "full_signature": "public String getFieldNames()", "class_method_signature": "TableInfo.getFieldNames()", "testcase": false, "constructor": false}, {"identifier": "setCommonFields", "parameters": "(List<TableField> commonFields)", "modifiers": "@Deprecated public", "return": "TableInfo", "signature": "TableInfo setCommonFields(List<TableField> commonFields)", "full_signature": "@Deprecated public TableInfo setCommonFields(List<TableField> commonFields)", "class_method_signature": "TableInfo.setCommonFields(List<TableField> commonFields)", "testcase": false, "constructor": false}, {"identifier": "addCommonFields", "parameters": "(TableField... commonFields)", "modifiers": "public", "return": "TableInfo", "signature": "TableInfo addCommonFields(TableField... commonFields)", "full_signature": "public TableInfo addCommonFields(TableField... commonFields)", "class_method_signature": "TableInfo.addCommonFields(TableField... commonFields)", "testcase": false, "constructor": false}, {"identifier": "addCommonFields", "parameters": "(List<TableField> commonFields)", "modifiers": "public", "return": "TableInfo", "signature": "TableInfo addCommonFields(List<TableField> commonFields)", "full_signature": "public TableInfo addCommonFields(List<TableField> commonFields)", "class_method_signature": "TableInfo.addCommonFields(List<TableField> commonFields)", "testcase": false, "constructor": false}, {"identifier": "importPackage", "parameters": "(StrategyConfig strategyConfig, GlobalConfig globalConfig)", "modifiers": "public", "return": "void", "signature": "void importPackage(StrategyConfig strategyConfig, GlobalConfig globalConfig)", "full_signature": "public void importPackage(StrategyConfig strategyConfig, GlobalConfig globalConfig)", "class_method_signature": "TableInfo.importPackage(StrategyConfig strategyConfig, GlobalConfig globalConfig)", "testcase": false, "constructor": false}, {"identifier": "processTable", "parameters": "(StrategyConfig strategyConfig, GlobalConfig globalConfig)", "modifiers": "public", "return": "void", "signature": "void processTable(StrategyConfig strategyConfig, GlobalConfig globalConfig)", "full_signature": "public void processTable(StrategyConfig strategyConfig, GlobalConfig globalConfig)", "class_method_signature": "TableInfo.processTable(StrategyConfig strategyConfig, GlobalConfig globalConfig)", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "(String entityName, String value, Supplier<String> defaultValue)", "modifiers": "public", "return": "String", "signature": "String getFileName(String entityName, String value, Supplier<String> defaultValue)", "full_signature": "public String getFileName(String entityName, String value, Supplier<String> defaultValue)", "class_method_signature": "TableInfo.getFileName(String entityName, String value, Supplier<String> defaultValue)", "testcase": false, "constructor": false}], "file": "mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/config/po/TableInfo.java"}, "focal_method": {"identifier": "importPackage", "parameters": "(StrategyConfig strategyConfig, GlobalConfig globalConfig)", "modifiers": "public", "return": "void", "body": "public void importPackage(StrategyConfig strategyConfig, GlobalConfig globalConfig) {\n        boolean importSerializable = true;\n        if (StringUtils.isNotBlank(strategyConfig.getSuperEntityClass())) {\n            // \u81ea\u5b9a\u4e49\u7236\u7c7b\n            importSerializable = false;\n            this.importPackages.add(strategyConfig.getSuperEntityClass());\n        } else {\n            if (globalConfig.isActiveRecord()) {\n                // \u65e0\u7236\u7c7b\u5f00\u542f AR \u6a21\u5f0f\n                this.getImportPackages().add(Model.class.getCanonicalName());\n                importSerializable = false;\n            }\n        }\n        if (importSerializable) {\n            this.importPackages.add(Serializable.class.getCanonicalName());\n        }\n        if (this.isConvert()) {\n            this.importPackages.add(TableName.class.getCanonicalName());\n        }\n        if (strategyConfig.getLogicDeleteFieldName() != null && this.isLogicDelete(strategyConfig.getLogicDeleteFieldName())) {\n            this.importPackages.add(TableLogic.class.getCanonicalName());\n        }\n        if (null != globalConfig.getIdType() && this.isHavePrimaryKey()) {\n            // \u6307\u5b9a\u9700\u8981 IdType \u573a\u666f\n            this.importPackages.add(IdType.class.getCanonicalName());\n            this.importPackages.add(TableId.class.getCanonicalName());\n        }\n        this.fields.forEach(field -> {\n            if (null != field.getColumnType() && null != field.getColumnType().getPkg()) {\n                importPackages.add(field.getColumnType().getPkg());\n            }\n            if (field.isKeyFlag()) {\n                // \u4e3b\u952e\n                if (field.isConvert() || field.isKeyIdentityFlag()) {\n                    importPackages.add(TableId.class.getCanonicalName());\n                }\n                // \u81ea\u589e\n                if (field.isKeyIdentityFlag()) {\n                    importPackages.add(IdType.class.getCanonicalName());\n                }\n            } else if (field.isConvert()) {\n                // \u666e\u901a\u5b57\u6bb5\n                importPackages.add(com.baomidou.mybatisplus.annotation.TableField.class.getCanonicalName());\n            }\n            if (null != field.getFill()) {\n                // \u586b\u5145\u5b57\u6bb5\n                importPackages.add(com.baomidou.mybatisplus.annotation.TableField.class.getCanonicalName());\n                //TODO \u597d\u50cfdefault\u7684\u4e0d\u7528\u5904\u7406\u4e5f\u884c,\u8fd9\u4e2a\u505a\u4f18\u5316\u9879\u76ee.\n                importPackages.add(FieldFill.class.getCanonicalName());\n            }\n            String versionFieldName = strategyConfig.getVersionFieldName();\n            if (StringUtils.isNotBlank(versionFieldName) && versionFieldName.equals(field.getName())) {\n                this.importPackages.add(Version.class.getCanonicalName());\n            }\n        });\n    }", "signature": "void importPackage(StrategyConfig strategyConfig, GlobalConfig globalConfig)", "full_signature": "public void importPackage(StrategyConfig strategyConfig, GlobalConfig globalConfig)", "class_method_signature": "TableInfo.importPackage(StrategyConfig strategyConfig, GlobalConfig globalConfig)", "testcase": false, "constructor": false, "invocations": ["isNotBlank", "getSuperEntityClass", "add", "getSuperEntityClass", "isActiveRecord", "add", "getImportPackages", "getCanonicalName", "add", "getCanonicalName", "isConvert", "add", "getCanonicalName", "getLogicDeleteFieldName", "isLogicDelete", "getLogicDeleteFieldName", "add", "getCanonicalName", "getIdType", "isHavePrimaryKey", "add", "getCanonicalName", "add", "getCanonicalName", "forEach", "getColumnType", "getPkg", "getColumnType", "add", "getPkg", "getColumnType", "isKeyFlag", "isConvert", "isKeyIdentityFlag", "add", "getCanonicalName", "isKeyIdentityFlag", "add", "getCanonicalName", "isConvert", "add", "getCanonicalName", "getFill", "add", "getCanonicalName", "add", "getCanonicalName", "getVersionFieldName", "isNotBlank", "equals", "getName", "add", "getCanonicalName"]}, "repository": {"repo_id": 65987043, "url": "https://github.com/baomidou/mybatis-plus", "stars": 7720, "created": "8/18/2016 10:06:53 AM +00:00", "updates": "2020-01-27T08:09:51+00:00", "fork": "False", "license": "licensed"}}