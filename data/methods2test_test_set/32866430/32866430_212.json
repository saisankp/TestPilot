{"test_class": {"identifier": "JooqHealthCheckTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject ManagedDataSource dataSource;", "modifier": "@Inject", "type": "ManagedDataSource", "declarator": "dataSource", "var_name": "dataSource"}, {"original_string": "@Mock ManagedDataSource managedDataSource;", "modifier": "@Mock", "type": "ManagedDataSource", "declarator": "managedDataSource", "var_name": "managedDataSource"}], "file": "server/src/test/java/keywhiz/JooqHealthCheckTest.java"}, "test_case": {"identifier": "reportsHealthy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void reportsHealthy() throws Exception {\n    JooqHealthCheck healthCheck = new JooqHealthCheck(dataSource, LOG_ONLY);\n    assertThat(healthCheck.check().isHealthy()).isTrue();\n\n    healthCheck = new JooqHealthCheck(dataSource, RETURN_UNHEALTHY);\n    assertThat(healthCheck.check().isHealthy()).isTrue();\n  }", "signature": "void reportsHealthy()", "full_signature": "@Test public void reportsHealthy()", "class_method_signature": "JooqHealthCheckTest.reportsHealthy()", "testcase": true, "constructor": false, "invocations": ["isTrue", "assertThat", "isHealthy", "check", "isTrue", "assertThat", "isHealthy", "check"]}, "focal_class": {"identifier": "JooqHealthCheck", "superclass": "extends HealthCheck", "interfaces": "", "fields": [{"original_string": "private final ManagedDataSource dataSource;", "modifier": "private final", "type": "ManagedDataSource", "declarator": "dataSource", "var_name": "dataSource"}, {"original_string": "private final OnFailure onFailure;", "modifier": "private final", "type": "OnFailure", "declarator": "onFailure", "var_name": "onFailure"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(JooqHealthCheck.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(JooqHealthCheck.class)", "var_name": "logger"}], "methods": [{"identifier": "JooqHealthCheck", "parameters": "(ManagedDataSource dataSource, OnFailure onFailure)", "modifiers": "public", "return": "", "signature": " JooqHealthCheck(ManagedDataSource dataSource, OnFailure onFailure)", "full_signature": "public  JooqHealthCheck(ManagedDataSource dataSource, OnFailure onFailure)", "class_method_signature": "JooqHealthCheck.JooqHealthCheck(ManagedDataSource dataSource, OnFailure onFailure)", "testcase": false, "constructor": true}, {"identifier": "check", "parameters": "()", "modifiers": "@Override protected", "return": "Result", "signature": "Result check()", "full_signature": "@Override protected Result check()", "class_method_signature": "JooqHealthCheck.check()", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/JooqHealthCheck.java"}, "focal_method": {"identifier": "check", "parameters": "()", "modifiers": "@Override protected", "return": "Result", "body": "@Override\n  protected Result check() throws Exception {\n    try {\n      databaseAgnostic(dataSource).selectOne().execute();\n    } catch (DataAccessException | SQLException e) {\n      switch (onFailure) {\n        case LOG_ONLY:\n          logger.warn(\"Unhealthy connection to database.\");\n          break;\n        case RETURN_UNHEALTHY:\n          return Result.unhealthy(\"Unhealthy connection to database.\");\n      }\n    }\n    return Result.healthy();\n  }", "signature": "Result check()", "full_signature": "@Override protected Result check()", "class_method_signature": "JooqHealthCheck.check()", "testcase": false, "constructor": false, "invocations": ["execute", "selectOne", "databaseAgnostic", "warn", "unhealthy", "healthy"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}