{"test_class": {"identifier": "MongoDBAccessEventAppenderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MongoDBAccessEventAppender appender = null;", "modifier": "private", "type": "MongoDBAccessEventAppender", "declarator": "appender = null", "var_name": "appender"}, {"original_string": "@Mock\n    private IAccessEvent event;", "modifier": "@Mock\n    private", "type": "IAccessEvent", "declarator": "event", "var_name": "event"}], "file": "mongodb/access/src/test/java/ch/qos/logback/contrib/mongodb/MongoDBAccessEventAppenderTest.java"}, "test_case": {"identifier": "testRemote", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRemote() {\n        // given\n        Mockito.when(event.getRemoteHost()).thenReturn(\"host\");\n        Mockito.when(event.getRemoteUser()).thenReturn(\"user\");\n        Mockito.when(event.getRemoteAddr()).thenReturn(\"addr\");\n        // when\n        final BasicDBObject dbObject = appender.toMongoDocument(event);\n        // then\n        BasicDBObject remoteDBObject = (BasicDBObject) dbObject.get(\"remote\");\n        assertEquals(\"host\", remoteDBObject.getString(\"host\"));\n        assertEquals(\"user\", remoteDBObject.getString(\"user\"));\n        assertEquals(\"addr\", remoteDBObject.getString(\"addr\"));\n    }", "signature": "void testRemote()", "full_signature": "@Test public void testRemote()", "class_method_signature": "MongoDBAccessEventAppenderTest.testRemote()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getRemoteHost", "thenReturn", "when", "getRemoteUser", "thenReturn", "when", "getRemoteAddr", "toMongoDocument", "get", "assertEquals", "getString", "assertEquals", "getString", "assertEquals", "getString"]}, "focal_class": {"identifier": "MongoDBAccessEventAppender", "superclass": "extends MongoDBAppenderBase<IAccessEvent>", "interfaces": "", "fields": [{"original_string": "private boolean serverName = true;", "modifier": "private", "type": "boolean", "declarator": "serverName = true", "var_name": "serverName"}, {"original_string": "private boolean requestUri = true;", "modifier": "private", "type": "boolean", "declarator": "requestUri = true", "var_name": "requestUri"}, {"original_string": "private boolean requestProtocol = true;", "modifier": "private", "type": "boolean", "declarator": "requestProtocol = true", "var_name": "requestProtocol"}, {"original_string": "private boolean requestMethod = true;", "modifier": "private", "type": "boolean", "declarator": "requestMethod = true", "var_name": "requestMethod"}, {"original_string": "private boolean requestPostContent = true;", "modifier": "private", "type": "boolean", "declarator": "requestPostContent = true", "var_name": "requestPostContent"}, {"original_string": "private boolean requestSessionId = true;", "modifier": "private", "type": "boolean", "declarator": "requestSessionId = true", "var_name": "requestSessionId"}, {"original_string": "private boolean requestUserAgent = true;", "modifier": "private", "type": "boolean", "declarator": "requestUserAgent = true", "var_name": "requestUserAgent"}, {"original_string": "private boolean requestReferer = true;", "modifier": "private", "type": "boolean", "declarator": "requestReferer = true", "var_name": "requestReferer"}, {"original_string": "private boolean remoteHost = true;", "modifier": "private", "type": "boolean", "declarator": "remoteHost = true", "var_name": "remoteHost"}, {"original_string": "private boolean remoteUser = true;", "modifier": "private", "type": "boolean", "declarator": "remoteUser = true", "var_name": "remoteUser"}, {"original_string": "private boolean remoteAddr = true;", "modifier": "private", "type": "boolean", "declarator": "remoteAddr = true", "var_name": "remoteAddr"}, {"original_string": "private boolean responseContentLength = true;", "modifier": "private", "type": "boolean", "declarator": "responseContentLength = true", "var_name": "responseContentLength"}, {"original_string": "private boolean responseStatusCode = true;", "modifier": "private", "type": "boolean", "declarator": "responseStatusCode = true", "var_name": "responseStatusCode"}], "methods": [{"identifier": "toMongoDocument", "parameters": "(IAccessEvent event)", "modifiers": "@Override protected", "return": "BasicDBObject", "signature": "BasicDBObject toMongoDocument(IAccessEvent event)", "full_signature": "@Override protected BasicDBObject toMongoDocument(IAccessEvent event)", "class_method_signature": "MongoDBAccessEventAppender.toMongoDocument(IAccessEvent event)", "testcase": false, "constructor": false}, {"identifier": "addRemote", "parameters": "(BasicDBObject parent, IAccessEvent event)", "modifiers": "private", "return": "void", "signature": "void addRemote(BasicDBObject parent, IAccessEvent event)", "full_signature": "private void addRemote(BasicDBObject parent, IAccessEvent event)", "class_method_signature": "MongoDBAccessEventAppender.addRemote(BasicDBObject parent, IAccessEvent event)", "testcase": false, "constructor": false}, {"identifier": "addRequest", "parameters": "(BasicDBObject parent, IAccessEvent event)", "modifiers": "private", "return": "void", "signature": "void addRequest(BasicDBObject parent, IAccessEvent event)", "full_signature": "private void addRequest(BasicDBObject parent, IAccessEvent event)", "class_method_signature": "MongoDBAccessEventAppender.addRequest(BasicDBObject parent, IAccessEvent event)", "testcase": false, "constructor": false}, {"identifier": "addResponse", "parameters": "(BasicDBObject doc, IAccessEvent event)", "modifiers": "private", "return": "void", "signature": "void addResponse(BasicDBObject doc, IAccessEvent event)", "full_signature": "private void addResponse(BasicDBObject doc, IAccessEvent event)", "class_method_signature": "MongoDBAccessEventAppender.addResponse(BasicDBObject doc, IAccessEvent event)", "testcase": false, "constructor": false}, {"identifier": "setServerName", "parameters": "(boolean serverName)", "modifiers": "public", "return": "void", "signature": "void setServerName(boolean serverName)", "full_signature": "public void setServerName(boolean serverName)", "class_method_signature": "MongoDBAccessEventAppender.setServerName(boolean serverName)", "testcase": false, "constructor": false}, {"identifier": "setRequestUri", "parameters": "(boolean requestUri)", "modifiers": "public", "return": "void", "signature": "void setRequestUri(boolean requestUri)", "full_signature": "public void setRequestUri(boolean requestUri)", "class_method_signature": "MongoDBAccessEventAppender.setRequestUri(boolean requestUri)", "testcase": false, "constructor": false}, {"identifier": "setRequestProtocol", "parameters": "(boolean requestProtocol)", "modifiers": "public", "return": "void", "signature": "void setRequestProtocol(boolean requestProtocol)", "full_signature": "public void setRequestProtocol(boolean requestProtocol)", "class_method_signature": "MongoDBAccessEventAppender.setRequestProtocol(boolean requestProtocol)", "testcase": false, "constructor": false}, {"identifier": "setRequestMethod", "parameters": "(boolean requestMethod)", "modifiers": "public", "return": "void", "signature": "void setRequestMethod(boolean requestMethod)", "full_signature": "public void setRequestMethod(boolean requestMethod)", "class_method_signature": "MongoDBAccessEventAppender.setRequestMethod(boolean requestMethod)", "testcase": false, "constructor": false}, {"identifier": "setRequestPostContent", "parameters": "(boolean requestPostContent)", "modifiers": "public", "return": "void", "signature": "void setRequestPostContent(boolean requestPostContent)", "full_signature": "public void setRequestPostContent(boolean requestPostContent)", "class_method_signature": "MongoDBAccessEventAppender.setRequestPostContent(boolean requestPostContent)", "testcase": false, "constructor": false}, {"identifier": "setRequestSessionId", "parameters": "(boolean requestSessionId)", "modifiers": "public", "return": "void", "signature": "void setRequestSessionId(boolean requestSessionId)", "full_signature": "public void setRequestSessionId(boolean requestSessionId)", "class_method_signature": "MongoDBAccessEventAppender.setRequestSessionId(boolean requestSessionId)", "testcase": false, "constructor": false}, {"identifier": "setRequestUserAgent", "parameters": "(boolean requestUserAgent)", "modifiers": "public", "return": "void", "signature": "void setRequestUserAgent(boolean requestUserAgent)", "full_signature": "public void setRequestUserAgent(boolean requestUserAgent)", "class_method_signature": "MongoDBAccessEventAppender.setRequestUserAgent(boolean requestUserAgent)", "testcase": false, "constructor": false}, {"identifier": "setRequestReferer", "parameters": "(boolean requestReferer)", "modifiers": "public", "return": "void", "signature": "void setRequestReferer(boolean requestReferer)", "full_signature": "public void setRequestReferer(boolean requestReferer)", "class_method_signature": "MongoDBAccessEventAppender.setRequestReferer(boolean requestReferer)", "testcase": false, "constructor": false}, {"identifier": "setRemoteHost", "parameters": "(boolean remoteHost)", "modifiers": "public", "return": "void", "signature": "void setRemoteHost(boolean remoteHost)", "full_signature": "public void setRemoteHost(boolean remoteHost)", "class_method_signature": "MongoDBAccessEventAppender.setRemoteHost(boolean remoteHost)", "testcase": false, "constructor": false}, {"identifier": "setRemoteUser", "parameters": "(boolean remoteUser)", "modifiers": "public", "return": "void", "signature": "void setRemoteUser(boolean remoteUser)", "full_signature": "public void setRemoteUser(boolean remoteUser)", "class_method_signature": "MongoDBAccessEventAppender.setRemoteUser(boolean remoteUser)", "testcase": false, "constructor": false}, {"identifier": "setRemoteAddr", "parameters": "(boolean remoteAddr)", "modifiers": "public", "return": "void", "signature": "void setRemoteAddr(boolean remoteAddr)", "full_signature": "public void setRemoteAddr(boolean remoteAddr)", "class_method_signature": "MongoDBAccessEventAppender.setRemoteAddr(boolean remoteAddr)", "testcase": false, "constructor": false}, {"identifier": "setResponseContentLength", "parameters": "(boolean responseContentLength)", "modifiers": "public", "return": "void", "signature": "void setResponseContentLength(boolean responseContentLength)", "full_signature": "public void setResponseContentLength(boolean responseContentLength)", "class_method_signature": "MongoDBAccessEventAppender.setResponseContentLength(boolean responseContentLength)", "testcase": false, "constructor": false}, {"identifier": "setResponseStatusCode", "parameters": "(boolean responseStatusCode)", "modifiers": "public", "return": "void", "signature": "void setResponseStatusCode(boolean responseStatusCode)", "full_signature": "public void setResponseStatusCode(boolean responseStatusCode)", "class_method_signature": "MongoDBAccessEventAppender.setResponseStatusCode(boolean responseStatusCode)", "testcase": false, "constructor": false}], "file": "mongodb/access/src/main/java/ch/qos/logback/contrib/mongodb/MongoDBAccessEventAppender.java"}, "focal_method": {"identifier": "toMongoDocument", "parameters": "(IAccessEvent event)", "modifiers": "@Override protected", "return": "BasicDBObject", "body": "@Override\n    protected BasicDBObject toMongoDocument(IAccessEvent event) {\n        final BasicDBObject doc = new BasicDBObject();\n        doc.append(\"timeStamp\", new Date(event.getTimeStamp()));\n        if (serverName)\n            doc.append(\"serverName\", event.getServerName());\n        addRemote(doc, event);\n        addRequest(doc, event);\n        addResponse(doc, event);\n        return doc;\n    }", "signature": "BasicDBObject toMongoDocument(IAccessEvent event)", "full_signature": "@Override protected BasicDBObject toMongoDocument(IAccessEvent event)", "class_method_signature": "MongoDBAccessEventAppender.toMongoDocument(IAccessEvent event)", "testcase": false, "constructor": false, "invocations": ["append", "getTimeStamp", "append", "getServerName", "addRemote", "addRequest", "addResponse"]}, "repository": {"repo_id": 7184464, "url": "https://github.com/qos-ch/logback-contrib", "language": "Java", "is_fork": false, "fork_count": 39, "stargazer_count": 32, "size": 301, "license": "licensed"}}