{"test_class": {"identifier": "UtilitiesTest", "superclass": "", "interfaces": "", "fields": [], "file": "cli/src/test/java/keywhiz/cli/UtilitiesTest.java"}, "test_case": {"identifier": "validateNameReturnsFalseOnInvalidNames", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void validateNameReturnsFalseOnInvalidNames() throws Exception {\n    assertThat(validName(\"hello!\")).isFalse();\n    assertThat(validName(\"hello world\")).isFalse();\n    assertThat(validName(\"$$ bill yall\")).isFalse();\n    assertThat(validName(\"blah/../../../etc/passwd\")).isFalse();\n    assertThat(validName(\"bad/I-am-secret.yml\")).isFalse();\n    assertThat(validName(\".almostvalid\")).isFalse();\n    assertThat(validName(\"bad\\tI-am-secret.yml\")).isFalse();\n\n    List<String> specialCharacters = Arrays.asList(\"&\", \"|\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", \"^\",\n        \";\", \",\", \"\\\\\", \"/\", \"<\", \">\", \"\\t\", \"\\n\", \"\\r\", \"`\", \"'\", \"\\\"\", \"?\", \"#\", \"%\",\n        \"*\", \"+\", \"=\", \"\\0\", \"\\u0002\", \"\\000\");\n\n    for (String name : specialCharacters) {\n      assertFalse(\"Failed character: \\\"\" + name + '\"', validName(name));\n    }\n  }", "signature": "void validateNameReturnsFalseOnInvalidNames()", "full_signature": "@Test public void validateNameReturnsFalseOnInvalidNames()", "class_method_signature": "UtilitiesTest.validateNameReturnsFalseOnInvalidNames()", "testcase": true, "constructor": false, "invocations": ["isFalse", "assertThat", "validName", "isFalse", "assertThat", "validName", "isFalse", "assertThat", "validName", "isFalse", "assertThat", "validName", "isFalse", "assertThat", "validName", "isFalse", "assertThat", "validName", "isFalse", "assertThat", "validName", "asList", "assertFalse", "validName"]}, "focal_class": {"identifier": "Utilities", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String VALID_NAME_PATTERN = \"^[a-zA-Z_0-9\\\\-.:]+$\";", "modifier": "public static final", "type": "String", "declarator": "VALID_NAME_PATTERN = \"^[a-zA-Z_0-9\\\\-.:]+$\"", "var_name": "VALID_NAME_PATTERN"}], "methods": [{"identifier": "validName", "parameters": "(String name)", "modifiers": "public static", "return": "boolean", "signature": "boolean validName(String name)", "full_signature": "public static boolean validName(String name)", "class_method_signature": "Utilities.validName(String name)", "testcase": false, "constructor": false}], "file": "cli/src/main/java/keywhiz/cli/Utilities.java"}, "focal_method": {"identifier": "validName", "parameters": "(String name)", "modifiers": "public static", "return": "boolean", "body": "public static boolean validName(String name) {\n    // \".\" is allowed at any position but the first.\n    return !name.startsWith(\".\") && name.matches(VALID_NAME_PATTERN);\n  }", "signature": "boolean validName(String name)", "full_signature": "public static boolean validName(String name)", "class_method_signature": "Utilities.validName(String name)", "testcase": false, "constructor": false, "invocations": ["startsWith", "matches"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}