{"test_class": {"identifier": "GaugeInjectionBeanTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject\n    private GaugeInjectionBean bean;", "modifier": "@Inject\n    private", "type": "GaugeInjectionBean", "declarator": "bean", "var_name": "bean"}, {"original_string": "@Inject\n    @Metric(absolute = true, name = \"org.eclipse.microprofile.metrics.tck.cdi.GaugeInjectionBean.gaugeInjection\")\n    private Gauge<Long> gauge;", "modifier": "@Inject\n    @Metric(absolute = true, name = \"org.eclipse.microprofile.metrics.tck.cdi.GaugeInjectionBean.gaugeInjection\")\n    private", "type": "Gauge<Long>", "declarator": "gauge", "var_name": "gauge"}], "file": "tck/api/src/main/java/org/eclipse/microprofile/metrics/tck/cdi/GaugeInjectionBeanTest.java"}, "test_case": {"identifier": "callGaugeAfterSetterCall", "parameters": "(\n            @Metric(absolute = true, name = \"org.eclipse.microprofile.metrics.tck.cdi.GaugeInjectionBean.gaugeInjection\") Gauge<Long> gauge)", "modifiers": "@Test @InSequence(2) public", "return": "void", "body": "@Test\n    @InSequence(2)\n    public void callGaugeAfterSetterCall(\n            @Metric(absolute = true, name = \"org.eclipse.microprofile.metrics.tck.cdi.GaugeInjectionBean.gaugeInjection\") Gauge<Long> gauge) {\n        // Call the setter method and assert the gauge is up-to-date\n        long value = 1L + Math.round(Math.random() * (Long.MAX_VALUE - 1L));\n        bean.setGauge(value);\n\n        assertThat(\"Gauge value is incorrect\", gauge.getValue(), is(equalTo(value)));\n    }", "signature": "void callGaugeAfterSetterCall(\n            @Metric(absolute = true, name = \"org.eclipse.microprofile.metrics.tck.cdi.GaugeInjectionBean.gaugeInjection\") Gauge<Long> gauge)", "full_signature": "@Test @InSequence(2) public void callGaugeAfterSetterCall(\n            @Metric(absolute = true, name = \"org.eclipse.microprofile.metrics.tck.cdi.GaugeInjectionBean.gaugeInjection\") Gauge<Long> gauge)", "class_method_signature": "GaugeInjectionBeanTest.callGaugeAfterSetterCall(\n            @Metric(absolute = true, name = \"org.eclipse.microprofile.metrics.tck.cdi.GaugeInjectionBean.gaugeInjection\") Gauge<Long> gauge)", "testcase": true, "constructor": false, "invocations": ["round", "random", "setGauge", "assertThat", "getValue", "is", "equalTo"]}, "focal_class": {"identifier": "GaugeInjectionBean", "superclass": "", "interfaces": "", "fields": [{"original_string": "private long gauge;", "modifier": "private", "type": "long", "declarator": "gauge", "var_name": "gauge"}], "methods": [{"identifier": "getGauge", "parameters": "()", "modifiers": "@Gauge(name = \"gaugeInjection\", unit=MetricUnits.NONE) public", "return": "long", "signature": "long getGauge()", "full_signature": "@Gauge(name = \"gaugeInjection\", unit=MetricUnits.NONE) public long getGauge()", "class_method_signature": "GaugeInjectionBean.getGauge()", "testcase": false, "constructor": false}, {"identifier": "setGauge", "parameters": "(long gauge)", "modifiers": "public", "return": "void", "signature": "void setGauge(long gauge)", "full_signature": "public void setGauge(long gauge)", "class_method_signature": "GaugeInjectionBean.setGauge(long gauge)", "testcase": false, "constructor": false}], "file": "tck/api/src/main/java/org/eclipse/microprofile/metrics/tck/cdi/GaugeInjectionBean.java"}, "focal_method": {"identifier": "setGauge", "parameters": "(long gauge)", "modifiers": "public", "return": "void", "body": "public void setGauge(long gauge) {\n        this.gauge = gauge;\n    }", "signature": "void setGauge(long gauge)", "full_signature": "public void setGauge(long gauge)", "class_method_signature": "GaugeInjectionBean.setGauge(long gauge)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 95594455, "url": "https://github.com/eclipse/microprofile-metrics", "stars": 57, "created": "6/27/2017 7:44:21 PM +00:00", "updates": "2020-01-24T22:21:48+00:00", "fork": "False", "license": "licensed"}}