{"test_class": {"identifier": "AutoModelSpecTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/modelling/arima/tramo/AutoModelSpecTest.java"}, "test_case": {"identifier": "testSetCancelLowerBound", "parameters": "()", "modifiers": "@Test(expected = TramoException.class) public", "return": "void", "body": "@Test(expected = TramoException.class)\n    public void testSetCancelLowerBound() {\n        AutoModelSpec spec = new AutoModelSpec();\n        spec.setPcr(-1);\n    }", "signature": "void testSetCancelLowerBound()", "full_signature": "@Test(expected = TramoException.class) public void testSetCancelLowerBound()", "class_method_signature": "AutoModelSpecTest.testSetCancelLowerBound()", "testcase": true, "constructor": false, "invocations": ["setPcr"]}, "focal_class": {"identifier": "AutoModelSpec", "superclass": "", "interfaces": "implements Cloneable, InformationSetSerializable", "fields": [{"original_string": "public static final String ENABLED = \"enabled\",\n            PCR = \"pcr\",\n            UB1 = \"ub1\",\n            UB2 = \"ub2\",\n            TSIG = \"tsig\",\n            PC = \"pc\",\n            CANCEL = \"cancel\",\n            FAL = \"fal\",\n            AMICOMPARE = \"compare\";", "modifier": "public static final", "type": "String", "declarator": "ENABLED = \"enabled\"", "var_name": "ENABLED"}, {"original_string": "private double cancel_ = DEF_CANCEL, ub1_ = DEF_UB1, ub2_ = DEF_UB2,\n            pcr_ = DEF_PCR, pc_ = DEF_PC, tsig_ = DEF_TSIG;", "modifier": "private", "type": "double", "declarator": "cancel_ = DEF_CANCEL", "var_name": "cancel_"}, {"original_string": "private boolean enabled_ = false;", "modifier": "private", "type": "boolean", "declarator": "enabled_ = false", "var_name": "enabled_"}, {"original_string": "private boolean fal_ = DEF_FAL;", "modifier": "private", "type": "boolean", "declarator": "fal_ = DEF_FAL", "var_name": "fal_"}, {"original_string": "private boolean amicompare_ = DEF_AMICOMPARE;", "modifier": "private", "type": "boolean", "declarator": "amicompare_ = DEF_AMICOMPARE", "var_name": "amicompare_"}, {"original_string": "public static final double DEF_CANCEL = .05, DEF_PCR = .95, DEF_UB1 = .97, DEF_UB2 = .91, DEF_TSIG = 1, DEF_PC = .12;", "modifier": "public static final", "type": "double", "declarator": "DEF_CANCEL = .05", "var_name": "DEF_CANCEL"}, {"original_string": "public static final boolean DEF_FAL = false, DEF_AMICOMPARE = false;", "modifier": "public static final", "type": "boolean", "declarator": "DEF_FAL = false", "var_name": "DEF_FAL"}], "methods": [{"identifier": "fillDictionary", "parameters": "(String prefix, Map<String, Class> dic)", "modifiers": "public static", "return": "void", "signature": "void fillDictionary(String prefix, Map<String, Class> dic)", "full_signature": "public static void fillDictionary(String prefix, Map<String, Class> dic)", "class_method_signature": "AutoModelSpec.fillDictionary(String prefix, Map<String, Class> dic)", "testcase": false, "constructor": false}, {"identifier": "AutoModelSpec", "parameters": "()", "modifiers": "public", "return": "", "signature": " AutoModelSpec()", "full_signature": "public  AutoModelSpec()", "class_method_signature": "AutoModelSpec.AutoModelSpec()", "testcase": false, "constructor": true}, {"identifier": "AutoModelSpec", "parameters": "(boolean enabled)", "modifiers": "public", "return": "", "signature": " AutoModelSpec(boolean enabled)", "full_signature": "public  AutoModelSpec(boolean enabled)", "class_method_signature": "AutoModelSpec.AutoModelSpec(boolean enabled)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void reset()", "full_signature": "public void reset()", "class_method_signature": "AutoModelSpec.reset()", "testcase": false, "constructor": false}, {"identifier": "getPcr", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getPcr()", "full_signature": "public double getPcr()", "class_method_signature": "AutoModelSpec.getPcr()", "testcase": false, "constructor": false}, {"identifier": "setPcr", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setPcr(double value)", "full_signature": "public void setPcr(double value)", "class_method_signature": "AutoModelSpec.setPcr(double value)", "testcase": false, "constructor": false}, {"identifier": "getUb1", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getUb1()", "full_signature": "public double getUb1()", "class_method_signature": "AutoModelSpec.getUb1()", "testcase": false, "constructor": false}, {"identifier": "setUb1", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setUb1(double value)", "full_signature": "public void setUb1(double value)", "class_method_signature": "AutoModelSpec.setUb1(double value)", "testcase": false, "constructor": false}, {"identifier": "getUb2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getUb2()", "full_signature": "public double getUb2()", "class_method_signature": "AutoModelSpec.getUb2()", "testcase": false, "constructor": false}, {"identifier": "setUb2", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setUb2(double value)", "full_signature": "public void setUb2(double value)", "class_method_signature": "AutoModelSpec.setUb2(double value)", "testcase": false, "constructor": false}, {"identifier": "getCancel", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCancel()", "full_signature": "public double getCancel()", "class_method_signature": "AutoModelSpec.getCancel()", "testcase": false, "constructor": false}, {"identifier": "setCancel", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setCancel(double value)", "full_signature": "public void setCancel(double value)", "class_method_signature": "AutoModelSpec.setCancel(double value)", "testcase": false, "constructor": false}, {"identifier": "getTsig", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTsig()", "full_signature": "public double getTsig()", "class_method_signature": "AutoModelSpec.getTsig()", "testcase": false, "constructor": false}, {"identifier": "setTsig", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setTsig(double value)", "full_signature": "public void setTsig(double value)", "class_method_signature": "AutoModelSpec.setTsig(double value)", "testcase": false, "constructor": false}, {"identifier": "getPc", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getPc()", "full_signature": "public double getPc()", "class_method_signature": "AutoModelSpec.getPc()", "testcase": false, "constructor": false}, {"identifier": "setPc", "parameters": "(double value)", "modifiers": "public", "return": "void", "signature": "void setPc(double value)", "full_signature": "public void setPc(double value)", "class_method_signature": "AutoModelSpec.setPc(double value)", "testcase": false, "constructor": false}, {"identifier": "isDefault", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDefault()", "full_signature": "public boolean isDefault()", "class_method_signature": "AutoModelSpec.isDefault()", "testcase": false, "constructor": false}, {"identifier": "isEnabled", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEnabled()", "full_signature": "public boolean isEnabled()", "class_method_signature": "AutoModelSpec.isEnabled()", "testcase": false, "constructor": false}, {"identifier": "setEnabled", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setEnabled(boolean value)", "full_signature": "public void setEnabled(boolean value)", "class_method_signature": "AutoModelSpec.setEnabled(boolean value)", "testcase": false, "constructor": false}, {"identifier": "isAmiCompare", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAmiCompare()", "full_signature": "public boolean isAmiCompare()", "class_method_signature": "AutoModelSpec.isAmiCompare()", "testcase": false, "constructor": false}, {"identifier": "setAmiCompare", "parameters": "(boolean value)", "modifiers": "public", "return": "void", "signature": "void setAmiCompare(boolean value)", "full_signature": "public void setAmiCompare(boolean value)", "class_method_signature": "AutoModelSpec.setAmiCompare(boolean value)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "AutoModelSpec", "signature": "AutoModelSpec clone()", "full_signature": "@Override public AutoModelSpec clone()", "class_method_signature": "AutoModelSpec.clone()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(AutoModelSpec other)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(AutoModelSpec other)", "full_signature": "public boolean equals(AutoModelSpec other)", "class_method_signature": "AutoModelSpec.equals(AutoModelSpec other)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(AutoModelSpec l, AutoModelSpec r)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(AutoModelSpec l, AutoModelSpec r)", "full_signature": "public static boolean equals(AutoModelSpec l, AutoModelSpec r)", "class_method_signature": "AutoModelSpec.equals(AutoModelSpec l, AutoModelSpec r)", "testcase": false, "constructor": false}, {"identifier": "isAcceptDefault", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAcceptDefault()", "full_signature": "public boolean isAcceptDefault()", "class_method_signature": "AutoModelSpec.isAcceptDefault()", "testcase": false, "constructor": false}, {"identifier": "setAcceptDefault", "parameters": "(boolean fal)", "modifiers": "public", "return": "void", "signature": "void setAcceptDefault(boolean fal)", "full_signature": "public void setAcceptDefault(boolean fal)", "class_method_signature": "AutoModelSpec.setAcceptDefault(boolean fal)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "AutoModelSpec.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "AutoModelSpec.hashCode()", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(boolean verbose)", "modifiers": "@Override public", "return": "InformationSet", "signature": "InformationSet write(boolean verbose)", "full_signature": "@Override public InformationSet write(boolean verbose)", "class_method_signature": "AutoModelSpec.write(boolean verbose)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(InformationSet info)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean read(InformationSet info)", "full_signature": "@Override public boolean read(InformationSet info)", "class_method_signature": "AutoModelSpec.read(InformationSet info)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/modelling/arima/tramo/AutoModelSpec.java"}, "focal_method": {"identifier": "setPcr", "parameters": "(double value)", "modifiers": "public", "return": "void", "body": "public void setPcr(double value) {\n        if (value < .8 || value > 1) {\n            throw new TramoException(\"PCR should belong to [0.8, 1.0]\");\n        }\n        pcr_ = value;\n    }", "signature": "void setPcr(double value)", "full_signature": "public void setPcr(double value)", "class_method_signature": "AutoModelSpec.setPcr(double value)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}