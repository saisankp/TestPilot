{"test_class": {"identifier": "PropertyUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "util/src/test/java/com/google/cloud/hadoop/util/PropertyUtilTest.java"}, "test_case": {"identifier": "valueIsReturnedForFoundKeyAndFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void valueIsReturnedForFoundKeyAndFile() {\n    assertThat(\n            PropertyUtil.getPropertyOrDefault(getClass(), \"test.properties\", \"testKey\", \"NotFound\"))\n        .isEqualTo(\"testValue\");\n  }", "signature": "void valueIsReturnedForFoundKeyAndFile()", "full_signature": "@Test public void valueIsReturnedForFoundKeyAndFile()", "class_method_signature": "PropertyUtilTest.valueIsReturnedForFoundKeyAndFile()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "getPropertyOrDefault", "getClass"]}, "focal_class": {"identifier": "PropertyUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();", "modifier": "private static final", "type": "GoogleLogger", "declarator": "logger = GoogleLogger.forEnclosingClass()", "var_name": "logger"}], "methods": [{"identifier": "getPropertyOrDefault", "parameters": "(\n      Class<?> referenceClass,\n      String propertyFile,\n      String key,\n      String defaultValue)", "modifiers": "public static", "return": "String", "signature": "String getPropertyOrDefault(\n      Class<?> referenceClass,\n      String propertyFile,\n      String key,\n      String defaultValue)", "full_signature": "public static String getPropertyOrDefault(\n      Class<?> referenceClass,\n      String propertyFile,\n      String key,\n      String defaultValue)", "class_method_signature": "PropertyUtil.getPropertyOrDefault(\n      Class<?> referenceClass,\n      String propertyFile,\n      String key,\n      String defaultValue)", "testcase": false, "constructor": false}], "file": "util/src/main/java/com/google/cloud/hadoop/util/PropertyUtil.java"}, "focal_method": {"identifier": "getPropertyOrDefault", "parameters": "(\n      Class<?> referenceClass,\n      String propertyFile,\n      String key,\n      String defaultValue)", "modifiers": "public static", "return": "String", "body": "public static String getPropertyOrDefault(\n      Class<?> referenceClass,\n      String propertyFile,\n      String key,\n      String defaultValue) {\n    try (InputStream stream = referenceClass.getResourceAsStream(propertyFile)) {\n      if (stream == null) {\n        logger.atSevere().log(\"Could not load properties file '%s'\", propertyFile);\n        return defaultValue;\n      }\n      Properties properties = new Properties();\n      properties.load(stream);\n      String value = properties.getProperty(key);\n      if (value == null) {\n        logger.atSevere().log(\"Key %s not found in properties file %s.\", key, propertyFile);\n        return defaultValue;\n      }\n      return value;\n    } catch (IOException e) {\n      logger.atSevere().withCause(e).log(\n          \"Error while trying to get property value for key %s\", key);\n      return defaultValue;\n    }\n  }", "signature": "String getPropertyOrDefault(\n      Class<?> referenceClass,\n      String propertyFile,\n      String key,\n      String defaultValue)", "full_signature": "public static String getPropertyOrDefault(\n      Class<?> referenceClass,\n      String propertyFile,\n      String key,\n      String defaultValue)", "class_method_signature": "PropertyUtil.getPropertyOrDefault(\n      Class<?> referenceClass,\n      String propertyFile,\n      String key,\n      String defaultValue)", "testcase": false, "constructor": false, "invocations": ["getResourceAsStream", "log", "atSevere", "load", "getProperty", "log", "atSevere", "log", "withCause", "atSevere"]}, "repository": {"repo_id": 19684359, "url": "https://github.com/GoogleCloudDataproc/bigdata-interop", "stars": 178, "created": "5/12/2014 3:11:55 AM +00:00", "updates": "2020-01-23T23:10:40+00:00", "fork": "False", "license": "licensed"}}