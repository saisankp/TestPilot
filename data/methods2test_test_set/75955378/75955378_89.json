{"test_class": {"identifier": "BaseHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DummyHandler handler;", "modifier": "private", "type": "DummyHandler", "declarator": "handler", "var_name": "handler"}], "file": "core/src/test/java/com/nextdoor/bender/handler/BaseHandlerTest.java"}, "test_case": {"identifier": "testFilterNullDeserialization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFilterNullDeserialization() throws HandlerException {\n    BaseHandler.CONFIG_FILE = \"/config/handler_config.json\";\n    handler.skipWriteStats = true;\n\n    List<DummyEvent> events = new ArrayList<DummyEvent>(1);\n    events.add(new DummyEvent(\"foo\", 0));\n\n    TestContext context = new TestContext();\n    context.setInvokedFunctionArn(\"arn:aws:lambda:us-east-1:123:function:test:tag\");\n    handler.init(context);\n\n    DeserializerProcessor proc = handler.sources.get(0).getDeserProcessor();\n\n    Deserializer deserSpy = spy(proc.getDeserializer());\n    when(deserSpy.deserialize(anyString())).thenReturn(null);\n    proc.setDeserializer(deserSpy);\n\n    handler.handler(events, context);\n    assertEquals(0, BufferedTransporter.output.size());\n  }", "signature": "void testFilterNullDeserialization()", "full_signature": "@Test public void testFilterNullDeserialization()", "class_method_signature": "BaseHandlerTest.testFilterNullDeserialization()", "testcase": true, "constructor": false, "invocations": ["add", "setInvokedFunctionArn", "init", "getDeserProcessor", "get", "spy", "getDeserializer", "thenReturn", "when", "deserialize", "anyString", "setDeserializer", "handler", "assertEquals", "size"]}, "focal_class": {"identifier": "BaseHandler", "superclass": "", "interfaces": "implements Handler<T>", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(BaseHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(BaseHandler.class)", "var_name": "logger"}, {"original_string": "public static String CONFIG_FILE = null;", "modifier": "public static", "type": "String", "declarator": "CONFIG_FILE = null", "var_name": "CONFIG_FILE"}, {"original_string": "protected boolean skipWriteStats = false;", "modifier": "protected", "type": "boolean", "declarator": "skipWriteStats = false", "var_name": "skipWriteStats"}, {"original_string": "protected boolean initialized = false;", "modifier": "protected", "type": "boolean", "declarator": "initialized = false", "var_name": "initialized"}, {"original_string": "protected Wrapper wrapper;", "modifier": "protected", "type": "Wrapper", "declarator": "wrapper", "var_name": "wrapper"}, {"original_string": "protected SerializerProcessor ser;", "modifier": "protected", "type": "SerializerProcessor", "declarator": "ser", "var_name": "ser"}, {"original_string": "private IpcSenderService ipcService;", "modifier": "private", "type": "IpcSenderService", "declarator": "ipcService", "var_name": "ipcService"}, {"original_string": "private int queueSize = 1;", "modifier": "private", "type": "int", "declarator": "queueSize = 1", "var_name": "queueSize"}, {"original_string": "protected List<Source> sources;", "modifier": "protected", "type": "List<Source>", "declarator": "sources", "var_name": "sources"}, {"original_string": "protected BenderConfig config = null;", "modifier": "protected", "type": "BenderConfig", "declarator": "config = null", "var_name": "config"}, {"original_string": "protected Monitor monitor;", "modifier": "protected", "type": "Monitor", "declarator": "monitor", "var_name": "monitor"}, {"original_string": "protected AmazonS3ClientFactory s3ClientFactory = new AmazonS3ClientFactory();", "modifier": "protected", "type": "AmazonS3ClientFactory", "declarator": "s3ClientFactory = new AmazonS3ClientFactory()", "var_name": "s3ClientFactory"}, {"original_string": "protected AWSLambdaClientFactory lambdaClientFactory = new AWSLambdaClientFactory();", "modifier": "protected", "type": "AWSLambdaClientFactory", "declarator": "lambdaClientFactory = new AWSLambdaClientFactory()", "var_name": "lambdaClientFactory"}, {"original_string": "private Queue<InternalEvent> eventQueue = null;", "modifier": "private", "type": "Queue<InternalEvent>", "declarator": "eventQueue = null", "var_name": "eventQueue"}, {"original_string": "private static long lastGcCount = 0;", "modifier": "private static", "type": "long", "declarator": "lastGcCount = 0", "var_name": "lastGcCount"}, {"original_string": "private static long lastGcDuration = 0;", "modifier": "private static", "type": "long", "declarator": "lastGcDuration = 0", "var_name": "lastGcDuration"}], "methods": [{"identifier": "init", "parameters": "(Context ctx)", "modifiers": "public", "return": "void", "signature": "void init(Context ctx)", "full_signature": "public void init(Context ctx)", "class_method_signature": "BaseHandler.init(Context ctx)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(Context context)", "modifiers": "public", "return": "void", "signature": "void process(Context context)", "full_signature": "public void process(Context context)", "class_method_signature": "BaseHandler.process(Context context)", "testcase": false, "constructor": false}, {"identifier": "updateOldest", "parameters": "(AtomicLong max, long time)", "modifiers": "private static", "return": "void", "signature": "void updateOldest(AtomicLong max, long time)", "full_signature": "private static void updateOldest(AtomicLong max, long time)", "class_method_signature": "BaseHandler.updateOldest(AtomicLong max, long time)", "testcase": false, "constructor": false}, {"identifier": "processInternal", "parameters": "(Context context)", "modifiers": "private", "return": "void", "signature": "void processInternal(Context context)", "full_signature": "private void processInternal(Context context)", "class_method_signature": "BaseHandler.processInternal(Context context)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void shutdown()", "full_signature": "public void shutdown()", "class_method_signature": "BaseHandler.shutdown()", "testcase": false, "constructor": false}, {"identifier": "writeStats", "parameters": "(long evtCount,\n                          long oldestArrivalTime,\n                          long oldestOccurrenceTime,\n                          String source,\n                          Stat runtime,\n                          int totalEventBytes,\n                          int totalSerializedBytes)", "modifiers": "private", "return": "void", "signature": "void writeStats(long evtCount,\n                          long oldestArrivalTime,\n                          long oldestOccurrenceTime,\n                          String source,\n                          Stat runtime,\n                          int totalEventBytes,\n                          int totalSerializedBytes)", "full_signature": "private void writeStats(long evtCount,\n                          long oldestArrivalTime,\n                          long oldestOccurrenceTime,\n                          String source,\n                          Stat runtime,\n                          int totalEventBytes,\n                          int totalSerializedBytes)", "class_method_signature": "BaseHandler.writeStats(long evtCount,\n                          long oldestArrivalTime,\n                          long oldestOccurrenceTime,\n                          String source,\n                          Stat runtime,\n                          int totalEventBytes,\n                          int totalSerializedBytes)", "testcase": false, "constructor": false}, {"identifier": "getGCStats", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void getGCStats()", "full_signature": "private void getGCStats()", "class_method_signature": "BaseHandler.getGCStats()", "testcase": false, "constructor": false}, {"identifier": "getIpcService", "parameters": "()", "modifiers": "public", "return": "IpcSenderService", "signature": "IpcSenderService getIpcService()", "full_signature": "public IpcSenderService getIpcService()", "class_method_signature": "BaseHandler.getIpcService()", "testcase": false, "constructor": false}, {"identifier": "setIpcService", "parameters": "(IpcSenderService ipcService)", "modifiers": "public", "return": "void", "signature": "void setIpcService(IpcSenderService ipcService)", "full_signature": "public void setIpcService(IpcSenderService ipcService)", "class_method_signature": "BaseHandler.setIpcService(IpcSenderService ipcService)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/nextdoor/bender/handler/BaseHandler.java"}, "focal_method": {"identifier": "init", "parameters": "(Context ctx)", "modifiers": "public", "return": "void", "body": "public void init(Context ctx) throws HandlerException {\n    /*\n     * Function alias is the last part of the Function ARN\n     */\n    String alias = null;\n    String[] tokens = ctx.getInvokedFunctionArn().split(\":\");\n    if (tokens.length == 7) {\n      alias = \"$LATEST\";\n    } else if (tokens.length == 8) {\n      alias = tokens[7];\n    }\n    BenderLayout.ALIAS = alias;\n    BenderLayout.VERSION = ctx.getFunctionVersion();\n\n    /*\n     * Create a new monitor and then get a static copy of it\n     */\n    monitor = Monitor.getInstance();\n    monitor.addTag(\"functionName\", ctx.getFunctionName());\n    monitor.addTag(\"functionVersion\", alias);\n\n    String configFile;\n\n    /*\n     * TODO: Replace this to always use env vars. Code was written prior to lambda env vars\n     * existing.\n     */\n    if (System.getenv(\"BENDER_CONFIG\") != null) {\n      configFile = System.getenv(\"BENDER_CONFIG\");\n    } else if (CONFIG_FILE == null) {\n      configFile = \"/config/\" + alias;\n    } else {\n      configFile = CONFIG_FILE;\n    }\n\n    logger.info(String.format(\"Bender Initializing (config: %s)\", configFile));\n\n    try {\n      if (configFile.startsWith(\"s3://\")) {\n        config = BenderConfig.load(s3ClientFactory, new AmazonS3URI(configFile));\n      } else if (configFile.startsWith(\"file://\")) {\n        File file = new File(configFile.replaceFirst(\"file://\", \"\"));\n        String string = FileUtils.readFileToString(file);\n        config = BenderConfig.load(configFile, string);\n      } else {\n        config = BenderConfig.load(configFile);\n      }\n    } catch (ConfigurationException | IOException e) {\n      throw new HandlerException(\"Error loading configuration: \" + e.getMessage(), e);\n    }\n\n    HandlerResources handlerResources;\n    try {\n      handlerResources = new HandlerResources(config);\n    } catch (ClassNotFoundException e) {\n      throw new HandlerException(\"Unable to load resource: \" + e.getMessage(), e);\n    }\n\n    /*\n     * Add user tags\n     */\n    monitor.addTags(config.getHandlerConfig().getMetricTags());\n\n    /*\n     * Add Lambda function tags. These will override duplicate user tags.\n     */\n    if (config.getHandlerConfig().getIncludeFunctionTags()) {\n      AWSLambda lambda = this.lambdaClientFactory.newInstance();\n      ListTagsResult res =\n          lambda.listTags(new ListTagsRequest().withResource(ctx.getInvokedFunctionArn()));\n\n      monitor.addTagsMap(\n          /*\n           * Filter out tags that come from CloudFormation\n           */\n          res.getTags().entrySet().stream()\n              .filter(map -> !map.getKey().startsWith(\"aws:cloudformation\"))\n              .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));\n    }\n\n    /*\n     * Register reporters\n     */\n    monitor.addReporters(handlerResources.getReporters());\n\n    /*\n     * Init other things\n     */\n    wrapper = handlerResources.getWrapperFactory().newInstance();\n    ser = handlerResources.getSerializerProcessor();\n    setIpcService(new IpcSenderService(handlerResources.getTransportFactory()));\n    sources = new ArrayList<Source>(handlerResources.getSources().values());\n    queueSize = config.getHandlerConfig().getQueueSize();\n    initialized = true;\n  }", "signature": "void init(Context ctx)", "full_signature": "public void init(Context ctx)", "class_method_signature": "BaseHandler.init(Context ctx)", "testcase": false, "constructor": false, "invocations": ["split", "getInvokedFunctionArn", "getFunctionVersion", "getInstance", "addTag", "getFunctionName", "addTag", "getenv", "getenv", "info", "format", "startsWith", "load", "startsWith", "replaceFirst", "readFileToString", "load", "load", "getMessage", "getMessage", "addTags", "getMetricTags", "getHandlerConfig", "getIncludeFunctionTags", "getHandlerConfig", "newInstance", "listTags", "withResource", "getInvokedFunctionArn", "addTagsMap", "collect", "filter", "stream", "entrySet", "getTags", "startsWith", "getKey", "toMap", "addReporters", "getReporters", "newInstance", "getWrapperFactory", "getSerializerProcessor", "setIpcService", "getTransportFactory", "values", "getSources", "getQueueSize", "getHandlerConfig"]}, "repository": {"repo_id": 75955378, "url": "https://github.com/Nextdoor/bender", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 163, "size": 1503, "license": "licensed"}}