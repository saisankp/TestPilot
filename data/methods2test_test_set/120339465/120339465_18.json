{"test_class": {"identifier": "UUIDConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/data/src/test/java/com/hashmapinc/server/common/data/UUIDConverterTest.java"}, "test_case": {"identifier": "basicUuidComperisonTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void basicUuidComperisonTest() {\n        Random r = new Random(System.currentTimeMillis());\n        for (int i = 0; i < 100000; i++) {\n            long ts = System.currentTimeMillis() + 1000 * 60 * 60 * 24 * 365 * 10;\n            long before = (long) (Math.random() * ts);\n            long after = (long) (Math.random() * ts);\n            if (before > after) {\n                long tmp = after;\n                after = before;\n                before = tmp;\n            }\n\n            String beforeStr = UUIDConverter.fromTimeUUID(UUIDs.startOf(before));\n            String afterStr = UUIDConverter.fromTimeUUID(UUIDs.startOf(after));\n\n            if (afterStr.compareTo(beforeStr) < 0) {\n                System.out.println(\"Before: \" + before + \" | \" + beforeStr);\n                System.out.println(\"After: \" + after + \" | \" + afterStr);\n            }\n            Assert.assertTrue(afterStr.compareTo(beforeStr) >= 0);\n        }\n    }", "signature": "void basicUuidComperisonTest()", "full_signature": "@Test public void basicUuidComperisonTest()", "class_method_signature": "UUIDConverterTest.basicUuidComperisonTest()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "currentTimeMillis", "random", "random", "fromTimeUUID", "startOf", "fromTimeUUID", "startOf", "compareTo", "println", "println", "assertTrue", "compareTo"]}, "focal_class": {"identifier": "UUIDConverter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "UUIDConverter", "parameters": "()", "modifiers": "private", "return": "", "signature": " UUIDConverter()", "full_signature": "private  UUIDConverter()", "class_method_signature": "UUIDConverter.UUIDConverter()", "testcase": false, "constructor": true}, {"identifier": "fromString", "parameters": "(String src)", "modifiers": "public static", "return": "UUID", "signature": "UUID fromString(String src)", "full_signature": "public static UUID fromString(String src)", "class_method_signature": "UUIDConverter.fromString(String src)", "testcase": false, "constructor": false}, {"identifier": "fromTimeUUID", "parameters": "(UUID src)", "modifiers": "public static", "return": "String", "signature": "String fromTimeUUID(UUID src)", "full_signature": "public static String fromTimeUUID(UUID src)", "class_method_signature": "UUIDConverter.fromTimeUUID(UUID src)", "testcase": false, "constructor": false}, {"identifier": "fromTimeUUIDs", "parameters": "(List<UUID> uuids)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> fromTimeUUIDs(List<UUID> uuids)", "full_signature": "public static List<String> fromTimeUUIDs(List<UUID> uuids)", "class_method_signature": "UUIDConverter.fromTimeUUIDs(List<UUID> uuids)", "testcase": false, "constructor": false}], "file": "common/data/src/main/java/com/hashmapinc/server/common/data/UUIDConverter.java"}, "focal_method": {"identifier": "fromTimeUUID", "parameters": "(UUID src)", "modifiers": "public static", "return": "String", "body": "public static String fromTimeUUID(UUID src) {\n        if (src.version() != 1) {\n            throw new IllegalArgumentException(\"Only Time-Based UUID (Version 1) is supported!\");\n        }\n        String str = src.toString();\n        // 58e0a7d7-eebc-11d8-9669-0800200c9a66 => 1d8eebc58e0a7d796690800200c9a66. Note that [11d8] -> [1d8]\n        return str.substring(15, 18) + str.substring(9, 13) + str.substring(0, 8) + str.substring(19, 23) + str.substring(24);\n    }", "signature": "String fromTimeUUID(UUID src)", "full_signature": "public static String fromTimeUUID(UUID src)", "class_method_signature": "UUIDConverter.fromTimeUUID(UUID src)", "testcase": false, "constructor": false, "invocations": ["version", "toString", "substring", "substring", "substring", "substring", "substring"]}, "repository": {"repo_id": 120339465, "url": "https://github.com/hashmapinc/Tempus", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 22, "size": 57693, "license": "licensed"}}