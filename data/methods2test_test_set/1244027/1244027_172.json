{"test_class": {"identifier": "JcrResultSetMetaDataTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String STRING = TestUtil.STRING;", "modifier": "public static final", "type": "String", "declarator": "STRING = TestUtil.STRING", "var_name": "STRING"}, {"original_string": "public static final String DOUBLE = TestUtil.DOUBLE;", "modifier": "public static final", "type": "String", "declarator": "DOUBLE = TestUtil.DOUBLE", "var_name": "DOUBLE"}, {"original_string": "public static final String LONG = TestUtil.LONG;", "modifier": "public static final", "type": "String", "declarator": "LONG = TestUtil.LONG", "var_name": "LONG"}, {"original_string": "public static final String PATH = TestUtil.PATH;", "modifier": "public static final", "type": "String", "declarator": "PATH = TestUtil.PATH", "var_name": "PATH"}, {"original_string": "public static final String REFERENCE = TestUtil.REFERENCE;", "modifier": "public static final", "type": "String", "declarator": "REFERENCE = TestUtil.REFERENCE", "var_name": "REFERENCE"}, {"original_string": "public static final Class<?> STRING_CLASS = JcrType.typeInfo(STRING).getRepresentationClass();", "modifier": "public static final", "type": "Class<?>", "declarator": "STRING_CLASS = JcrType.typeInfo(STRING).getRepresentationClass()", "var_name": "STRING_CLASS"}, {"original_string": "private JcrResultSetMetaData metadata;", "modifier": "private", "type": "JcrResultSetMetaData", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "private JcrResultSetMetaData extMetadata;", "modifier": "private", "type": "JcrResultSetMetaData", "declarator": "extMetadata", "var_name": "extMetadata"}, {"original_string": "@Mock\n    private JcrConnection connection;", "modifier": "@Mock\n    private", "type": "JcrConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Mock\n    private QueryResult results;", "modifier": "@Mock\n    private", "type": "QueryResult", "declarator": "results", "var_name": "results"}, {"original_string": "@Mock\n    private org.modeshape.jcr.api.query.QueryResult extendedResults;", "modifier": "@Mock\n    private", "type": "org.modeshape.jcr.api.query.QueryResult", "declarator": "extendedResults", "var_name": "extendedResults"}, {"original_string": "private String[] columnNames = TestUtil.COLUMN_NAMES;", "modifier": "private", "type": "String[]", "declarator": "columnNames = TestUtil.COLUMN_NAMES", "var_name": "columnNames"}, {"original_string": "private String[] tableNames = TestUtil.TABLE_NAMES;", "modifier": "private", "type": "String[]", "declarator": "tableNames = TestUtil.TABLE_NAMES", "var_name": "tableNames"}, {"original_string": "private String[] typeNames = TestUtil.TYPE_NAMES;", "modifier": "private", "type": "String[]", "declarator": "typeNames = TestUtil.TYPE_NAMES", "var_name": "typeNames"}, {"original_string": "@Mock\n    private ConnectionInfo info;", "modifier": "@Mock\n    private", "type": "ConnectionInfo", "declarator": "info", "var_name": "info"}], "file": "modeshape-jdbc-local/src/test/java/org/modeshape/jdbc/JcrResultSetMetaDataTest.java"}, "test_case": {"identifier": "shouldReturnNullableBasedUponNodeTypeWhenResultIsExtendedJcrQueryResult", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldReturnNullableBasedUponNodeTypeWhenResultIsExtendedJcrQueryResult() throws SQLException {\n        assertThat(extMetadata.isNullable(1), is(ResultSetMetaData.columnNullable)); // propA is multiple\n        assertThat(extMetadata.isNullable(2), is(ResultSetMetaData.columnNoNulls)); // propB is NOT multiple\n        assertThat(extMetadata.isNullable(3), is(ResultSetMetaData.columnNoNulls)); // propC is NOT multiple\n        assertThat(extMetadata.isNullable(4), is(ResultSetMetaData.columnNullableUnknown)); // propD has no table\n        assertThat(extMetadata.isNullable(5), is(ResultSetMetaData.columnNoNulls)); // propE is NOT multiple\n        // Add a residual, but since the isNullable() result is cached, this won't matter ...\n        addPropDefn(\"typeB\", \"*\", true);\n        assertThat(extMetadata.isNullable(2), is(ResultSetMetaData.columnNoNulls)); // propB is NOT multiple\n    }", "signature": "void shouldReturnNullableBasedUponNodeTypeWhenResultIsExtendedJcrQueryResult()", "full_signature": "@Test public void shouldReturnNullableBasedUponNodeTypeWhenResultIsExtendedJcrQueryResult()", "class_method_signature": "JcrResultSetMetaDataTest.shouldReturnNullableBasedUponNodeTypeWhenResultIsExtendedJcrQueryResult()", "testcase": true, "constructor": false, "invocations": ["assertThat", "isNullable", "is", "assertThat", "isNullable", "is", "assertThat", "isNullable", "is", "assertThat", "isNullable", "is", "assertThat", "isNullable", "is", "addPropDefn", "assertThat", "isNullable", "is"]}, "focal_class": {"identifier": "JcrResultSetMetaData", "superclass": "", "interfaces": "implements ResultSetMetaData", "fields": [{"original_string": "private final JcrConnection connection;", "modifier": "private final", "type": "JcrConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private final QueryResult results;", "modifier": "private final", "type": "QueryResult", "declarator": "results", "var_name": "results"}, {"original_string": "private int[] nullable;", "modifier": "private", "type": "int[]", "declarator": "nullable", "var_name": "nullable"}], "methods": [{"identifier": "JcrResultSetMetaData", "parameters": "( JcrConnection connection,\n                                    QueryResult results )", "modifiers": "protected", "return": "", "signature": " JcrResultSetMetaData( JcrConnection connection,\n                                    QueryResult results )", "full_signature": "protected  JcrResultSetMetaData( JcrConnection connection,\n                                    QueryResult results )", "class_method_signature": "JcrResultSetMetaData.JcrResultSetMetaData( JcrConnection connection,\n                                    QueryResult results )", "testcase": false, "constructor": true}, {"identifier": "getCatalogName", "parameters": "( int column )", "modifiers": "@Override public", "return": "String", "signature": "String getCatalogName( int column )", "full_signature": "@Override public String getCatalogName( int column )", "class_method_signature": "JcrResultSetMetaData.getCatalogName( int column )", "testcase": false, "constructor": false}, {"identifier": "getColumnClassName", "parameters": "( int column )", "modifiers": "@Override public", "return": "String", "signature": "String getColumnClassName( int column )", "full_signature": "@Override public String getColumnClassName( int column )", "class_method_signature": "JcrResultSetMetaData.getColumnClassName( int column )", "testcase": false, "constructor": false}, {"identifier": "getColumnCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getColumnCount()", "full_signature": "@Override public int getColumnCount()", "class_method_signature": "JcrResultSetMetaData.getColumnCount()", "testcase": false, "constructor": false}, {"identifier": "getColumnDisplaySize", "parameters": "( int column )", "modifiers": "@Override public", "return": "int", "signature": "int getColumnDisplaySize( int column )", "full_signature": "@Override public int getColumnDisplaySize( int column )", "class_method_signature": "JcrResultSetMetaData.getColumnDisplaySize( int column )", "testcase": false, "constructor": false}, {"identifier": "getColumnLabel", "parameters": "( int column )", "modifiers": "@Override public", "return": "String", "signature": "String getColumnLabel( int column )", "full_signature": "@Override public String getColumnLabel( int column )", "class_method_signature": "JcrResultSetMetaData.getColumnLabel( int column )", "testcase": false, "constructor": false}, {"identifier": "getColumnName", "parameters": "( int column )", "modifiers": "@Override public", "return": "String", "signature": "String getColumnName( int column )", "full_signature": "@Override public String getColumnName( int column )", "class_method_signature": "JcrResultSetMetaData.getColumnName( int column )", "testcase": false, "constructor": false}, {"identifier": "getColumnType", "parameters": "( int column )", "modifiers": "@Override public", "return": "int", "signature": "int getColumnType( int column )", "full_signature": "@Override public int getColumnType( int column )", "class_method_signature": "JcrResultSetMetaData.getColumnType( int column )", "testcase": false, "constructor": false}, {"identifier": "getColumnTypeName", "parameters": "( int column )", "modifiers": "@Override public", "return": "String", "signature": "String getColumnTypeName( int column )", "full_signature": "@Override public String getColumnTypeName( int column )", "class_method_signature": "JcrResultSetMetaData.getColumnTypeName( int column )", "testcase": false, "constructor": false}, {"identifier": "getPrecision", "parameters": "( int column )", "modifiers": "@Override public", "return": "int", "signature": "int getPrecision( int column )", "full_signature": "@Override public int getPrecision( int column )", "class_method_signature": "JcrResultSetMetaData.getPrecision( int column )", "testcase": false, "constructor": false}, {"identifier": "getScale", "parameters": "( int column )", "modifiers": "@Override public", "return": "int", "signature": "int getScale( int column )", "full_signature": "@Override public int getScale( int column )", "class_method_signature": "JcrResultSetMetaData.getScale( int column )", "testcase": false, "constructor": false}, {"identifier": "getSchemaName", "parameters": "( int column )", "modifiers": "@Override public", "return": "String", "signature": "String getSchemaName( int column )", "full_signature": "@Override public String getSchemaName( int column )", "class_method_signature": "JcrResultSetMetaData.getSchemaName( int column )", "testcase": false, "constructor": false}, {"identifier": "getTableName", "parameters": "( int column )", "modifiers": "@Override public", "return": "String", "signature": "String getTableName( int column )", "full_signature": "@Override public String getTableName( int column )", "class_method_signature": "JcrResultSetMetaData.getTableName( int column )", "testcase": false, "constructor": false}, {"identifier": "isAutoIncrement", "parameters": "( int column )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAutoIncrement( int column )", "full_signature": "@Override public boolean isAutoIncrement( int column )", "class_method_signature": "JcrResultSetMetaData.isAutoIncrement( int column )", "testcase": false, "constructor": false}, {"identifier": "isCaseSensitive", "parameters": "( int column )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCaseSensitive( int column )", "full_signature": "@Override public boolean isCaseSensitive( int column )", "class_method_signature": "JcrResultSetMetaData.isCaseSensitive( int column )", "testcase": false, "constructor": false}, {"identifier": "isCurrency", "parameters": "( int column )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCurrency( int column )", "full_signature": "@Override public boolean isCurrency( int column )", "class_method_signature": "JcrResultSetMetaData.isCurrency( int column )", "testcase": false, "constructor": false}, {"identifier": "isDefinitelyWritable", "parameters": "( int column )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDefinitelyWritable( int column )", "full_signature": "@Override public boolean isDefinitelyWritable( int column )", "class_method_signature": "JcrResultSetMetaData.isDefinitelyWritable( int column )", "testcase": false, "constructor": false}, {"identifier": "isNullable", "parameters": "( int column )", "modifiers": "@Override public", "return": "int", "signature": "int isNullable( int column )", "full_signature": "@Override public int isNullable( int column )", "class_method_signature": "JcrResultSetMetaData.isNullable( int column )", "testcase": false, "constructor": false}, {"identifier": "isReadOnly", "parameters": "( int column )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadOnly( int column )", "full_signature": "@Override public boolean isReadOnly( int column )", "class_method_signature": "JcrResultSetMetaData.isReadOnly( int column )", "testcase": false, "constructor": false}, {"identifier": "isSearchable", "parameters": "( int column )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSearchable( int column )", "full_signature": "@Override public boolean isSearchable( int column )", "class_method_signature": "JcrResultSetMetaData.isSearchable( int column )", "testcase": false, "constructor": false}, {"identifier": "isSigned", "parameters": "( int column )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSigned( int column )", "full_signature": "@Override public boolean isSigned( int column )", "class_method_signature": "JcrResultSetMetaData.isSigned( int column )", "testcase": false, "constructor": false}, {"identifier": "isWritable", "parameters": "( int column )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWritable( int column )", "full_signature": "@Override public boolean isWritable( int column )", "class_method_signature": "JcrResultSetMetaData.isWritable( int column )", "testcase": false, "constructor": false}, {"identifier": "isWrapperFor", "parameters": "( Class<?> iface )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWrapperFor( Class<?> iface )", "full_signature": "@Override public boolean isWrapperFor( Class<?> iface )", "class_method_signature": "JcrResultSetMetaData.isWrapperFor( Class<?> iface )", "testcase": false, "constructor": false}, {"identifier": "unwrap", "parameters": "( Class<T> iface )", "modifiers": "@Override public", "return": "T", "signature": "T unwrap( Class<T> iface )", "full_signature": "@Override public T unwrap( Class<T> iface )", "class_method_signature": "JcrResultSetMetaData.unwrap( Class<T> iface )", "testcase": false, "constructor": false}, {"identifier": "getJcrType", "parameters": "( int column )", "modifiers": "private", "return": "JcrType", "signature": "JcrType getJcrType( int column )", "full_signature": "private JcrType getJcrType( int column )", "class_method_signature": "JcrResultSetMetaData.getJcrType( int column )", "testcase": false, "constructor": false}], "file": "modeshape-jdbc-local/src/main/java/org/modeshape/jdbc/JcrResultSetMetaData.java"}, "focal_method": {"identifier": "isNullable", "parameters": "( int column )", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int isNullable( int column ) throws SQLException {\n        if (nullable == null) {\n            int length = getColumnCount();\n            nullable = new int[length];\n            for (int i = 0; i != length; ++i) {\n                nullable[i] = -1;\n            }\n        } else {\n            int result = nullable[column - 1];\n            if (result != -1) {\n                // Already found this value, so return it ...\n                return result;\n            }\n        }\n        // Find the node type for the column (given that the column name is the property name and\n        // the table name is the node type), and determine if the property definition is multi-valued or not mandatory.\n        String nodeTypeName = getTableName(column);\n        if (nodeTypeName.length() == 0) {\n            // There is no table for the column, so therefore we don't know the node type ...\n            return ResultSetMetaData.columnNullableUnknown;\n        }\n        String propertyName = getColumnName(column);\n        boolean singleProp = false;\n        boolean singleResidual = false;\n        boolean multiResidual = false;\n        NodeType type = connection.nodeType(nodeTypeName);\n        for (PropertyDefinition defn : type.getPropertyDefinitions()) {\n            if (defn.getName().equals(propertyName)) {\n                if (defn.isMultiple() || defn.isMandatory()) {\n                    // We know this IS nullable\n                    return ResultSetMetaData.columnNullable;\n                }\n                // Otherwise this is a single-valued property that is mandatory,\n                // but we can't return columnNotNullable because we may not have found the multi-valued property ...\n                singleProp = true;\n            } else if (defn.getName().equals(\"*\")) { // Residual\n                if (defn.isMultiple() || defn.isMandatory()) multiResidual = true;\n                else singleResidual = true;\n            }\n        }\n        int result = ResultSetMetaData.columnNullableUnknown;\n        if (multiResidual) result = ResultSetMetaData.columnNullable;\n        else if (singleProp || singleResidual) result = ResultSetMetaData.columnNoNulls;\n        nullable[column - 1] = result;\n        return result;\n    }", "signature": "int isNullable( int column )", "full_signature": "@Override public int isNullable( int column )", "class_method_signature": "JcrResultSetMetaData.isNullable( int column )", "testcase": false, "constructor": false, "invocations": ["getColumnCount", "getTableName", "length", "getColumnName", "nodeType", "getPropertyDefinitions", "equals", "getName", "isMultiple", "isMandatory", "equals", "getName", "isMultiple", "isMandatory"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}