{"test_class": {"identifier": "ShardDataTreeTest", "superclass": "extends AbstractTest", "interfaces": "", "fields": [{"original_string": "private static final DatastoreContext DATASTORE_CONTEXT = DatastoreContext.newBuilder().build();", "modifier": "private static final", "type": "DatastoreContext", "declarator": "DATASTORE_CONTEXT = DatastoreContext.newBuilder().build()", "var_name": "DATASTORE_CONTEXT"}, {"original_string": "private final Shard mockShard = Mockito.mock(Shard.class);", "modifier": "private final", "type": "Shard", "declarator": "mockShard = Mockito.mock(Shard.class)", "var_name": "mockShard"}, {"original_string": "private ShardDataTree shardDataTree;", "modifier": "private", "type": "ShardDataTree", "declarator": "shardDataTree", "var_name": "shardDataTree"}, {"original_string": "private EffectiveModelContext fullSchema;", "modifier": "private", "type": "EffectiveModelContext", "declarator": "fullSchema", "var_name": "fullSchema"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/ShardDataTreeTest.java"}, "test_case": {"identifier": "testUintSnapshot", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUintSnapshot() throws IOException, DataValidationFailedException {\n        shardDataTree.applyRecoverySnapshot(new ShardSnapshotState(new MetadataShardDataTreeSnapshot(bigIntegerRoot()),\n            true));\n\n        assertCarsUint64();\n    }", "signature": "void testUintSnapshot()", "full_signature": "@Test public void testUintSnapshot()", "class_method_signature": "ShardDataTreeTest.testUintSnapshot()", "testcase": true, "constructor": false, "invocations": ["applyRecoverySnapshot", "bigIntegerRoot", "assertCarsUint64"]}, "focal_class": {"identifier": "ShardDataTree", "superclass": "extends ShardDataTreeTransactionParent", "interfaces": "", "fields": [{"original_string": "private static final Timeout COMMIT_STEP_TIMEOUT = new Timeout(FiniteDuration.create(5, TimeUnit.SECONDS));", "modifier": "private static final", "type": "Timeout", "declarator": "COMMIT_STEP_TIMEOUT = new Timeout(FiniteDuration.create(5, TimeUnit.SECONDS))", "var_name": "COMMIT_STEP_TIMEOUT"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(ShardDataTree.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(ShardDataTree.class)", "var_name": "LOG"}, {"original_string": "private static final int MAX_TRANSACTION_BATCH = 100;", "modifier": "private static final", "type": "int", "declarator": "MAX_TRANSACTION_BATCH = 100", "var_name": "MAX_TRANSACTION_BATCH"}, {"original_string": "private final Map<LocalHistoryIdentifier, ShardDataTreeTransactionChain> transactionChains = new HashMap<>();", "modifier": "private final", "type": "Map<LocalHistoryIdentifier, ShardDataTreeTransactionChain>", "declarator": "transactionChains = new HashMap<>()", "var_name": "transactionChains"}, {"original_string": "private final DataTreeCohortActorRegistry cohortRegistry = new DataTreeCohortActorRegistry();", "modifier": "private final", "type": "DataTreeCohortActorRegistry", "declarator": "cohortRegistry = new DataTreeCohortActorRegistry()", "var_name": "cohortRegistry"}, {"original_string": "private final Deque<CommitEntry> pendingTransactions = new ArrayDeque<>();", "modifier": "private final", "type": "Deque<CommitEntry>", "declarator": "pendingTransactions = new ArrayDeque<>()", "var_name": "pendingTransactions"}, {"original_string": "private final Queue<CommitEntry> pendingCommits = new ArrayDeque<>();", "modifier": "private final", "type": "Queue<CommitEntry>", "declarator": "pendingCommits = new ArrayDeque<>()", "var_name": "pendingCommits"}, {"original_string": "private final Queue<CommitEntry> pendingFinishCommits = new ArrayDeque<>();", "modifier": "private final", "type": "Queue<CommitEntry>", "declarator": "pendingFinishCommits = new ArrayDeque<>()", "var_name": "pendingFinishCommits"}, {"original_string": "private final Map<Payload, Runnable> replicationCallbacks = new HashMap<>();", "modifier": "private final", "type": "Map<Payload, Runnable>", "declarator": "replicationCallbacks = new HashMap<>()", "var_name": "replicationCallbacks"}, {"original_string": "private final ShardDataTreeChangeListenerPublisher treeChangeListenerPublisher;", "modifier": "private final", "type": "ShardDataTreeChangeListenerPublisher", "declarator": "treeChangeListenerPublisher", "var_name": "treeChangeListenerPublisher"}, {"original_string": "private final Collection<ShardDataTreeMetadata<?>> metadata;", "modifier": "private final", "type": "Collection<ShardDataTreeMetadata<?>>", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "private final DataTree dataTree;", "modifier": "private final", "type": "DataTree", "declarator": "dataTree", "var_name": "dataTree"}, {"original_string": "private final String logContext;", "modifier": "private final", "type": "String", "declarator": "logContext", "var_name": "logContext"}, {"original_string": "private final Shard shard;", "modifier": "private final", "type": "Shard", "declarator": "shard", "var_name": "shard"}, {"original_string": "private Runnable runOnPendingTransactionsComplete;", "modifier": "private", "type": "Runnable", "declarator": "runOnPendingTransactionsComplete", "var_name": "runOnPendingTransactionsComplete"}, {"original_string": "private DataTreeTip tip;", "modifier": "private", "type": "DataTreeTip", "declarator": "tip", "var_name": "tip"}, {"original_string": "private SchemaContext schemaContext;", "modifier": "private", "type": "SchemaContext", "declarator": "schemaContext", "var_name": "schemaContext"}, {"original_string": "private DataSchemaContextTree dataSchemaContext;", "modifier": "private", "type": "DataSchemaContextTree", "declarator": "dataSchemaContext", "var_name": "dataSchemaContext"}, {"original_string": "private int currentTransactionBatch;", "modifier": "private", "type": "int", "declarator": "currentTransactionBatch", "var_name": "currentTransactionBatch"}], "methods": [{"identifier": "ShardDataTree", "parameters": "(final Shard shard, final EffectiveModelContext schemaContext, final DataTree dataTree,\n            final ShardDataTreeChangeListenerPublisher treeChangeListenerPublisher,\n            final String logContext,\n            final ShardDataTreeMetadata<?>... metadata)", "modifiers": "", "return": "", "signature": " ShardDataTree(final Shard shard, final EffectiveModelContext schemaContext, final DataTree dataTree,\n            final ShardDataTreeChangeListenerPublisher treeChangeListenerPublisher,\n            final String logContext,\n            final ShardDataTreeMetadata<?>... metadata)", "full_signature": "  ShardDataTree(final Shard shard, final EffectiveModelContext schemaContext, final DataTree dataTree,\n            final ShardDataTreeChangeListenerPublisher treeChangeListenerPublisher,\n            final String logContext,\n            final ShardDataTreeMetadata<?>... metadata)", "class_method_signature": "ShardDataTree.ShardDataTree(final Shard shard, final EffectiveModelContext schemaContext, final DataTree dataTree,\n            final ShardDataTreeChangeListenerPublisher treeChangeListenerPublisher,\n            final String logContext,\n            final ShardDataTreeMetadata<?>... metadata)", "testcase": false, "constructor": true}, {"identifier": "ShardDataTree", "parameters": "(final Shard shard, final EffectiveModelContext schemaContext, final TreeType treeType,\n            final YangInstanceIdentifier root,\n            final ShardDataTreeChangeListenerPublisher treeChangeListenerPublisher,\n            final String logContext,\n            final ShardDataTreeMetadata<?>... metadata)", "modifiers": "", "return": "", "signature": " ShardDataTree(final Shard shard, final EffectiveModelContext schemaContext, final TreeType treeType,\n            final YangInstanceIdentifier root,\n            final ShardDataTreeChangeListenerPublisher treeChangeListenerPublisher,\n            final String logContext,\n            final ShardDataTreeMetadata<?>... metadata)", "full_signature": "  ShardDataTree(final Shard shard, final EffectiveModelContext schemaContext, final TreeType treeType,\n            final YangInstanceIdentifier root,\n            final ShardDataTreeChangeListenerPublisher treeChangeListenerPublisher,\n            final String logContext,\n            final ShardDataTreeMetadata<?>... metadata)", "class_method_signature": "ShardDataTree.ShardDataTree(final Shard shard, final EffectiveModelContext schemaContext, final TreeType treeType,\n            final YangInstanceIdentifier root,\n            final ShardDataTreeChangeListenerPublisher treeChangeListenerPublisher,\n            final String logContext,\n            final ShardDataTreeMetadata<?>... metadata)", "testcase": false, "constructor": true}, {"identifier": "createDataTree", "parameters": "(final TreeType treeType, final YangInstanceIdentifier root)", "modifiers": "private static", "return": "DataTree", "signature": "DataTree createDataTree(final TreeType treeType, final YangInstanceIdentifier root)", "full_signature": "private static DataTree createDataTree(final TreeType treeType, final YangInstanceIdentifier root)", "class_method_signature": "ShardDataTree.createDataTree(final TreeType treeType, final YangInstanceIdentifier root)", "testcase": false, "constructor": false}, {"identifier": "ShardDataTree", "parameters": "(final Shard shard, final EffectiveModelContext schemaContext, final TreeType treeType)", "modifiers": "@VisibleForTesting public", "return": "", "signature": " ShardDataTree(final Shard shard, final EffectiveModelContext schemaContext, final TreeType treeType)", "full_signature": "@VisibleForTesting public  ShardDataTree(final Shard shard, final EffectiveModelContext schemaContext, final TreeType treeType)", "class_method_signature": "ShardDataTree.ShardDataTree(final Shard shard, final EffectiveModelContext schemaContext, final TreeType treeType)", "testcase": false, "constructor": true}, {"identifier": "logContext", "parameters": "()", "modifiers": "final", "return": "String", "signature": "String logContext()", "full_signature": "final String logContext()", "class_method_signature": "ShardDataTree.logContext()", "testcase": false, "constructor": false}, {"identifier": "readTime", "parameters": "()", "modifiers": "final", "return": "long", "signature": "long readTime()", "full_signature": "final long readTime()", "class_method_signature": "ShardDataTree.readTime()", "testcase": false, "constructor": false}, {"identifier": "getDataTree", "parameters": "()", "modifiers": "public", "return": "DataTree", "signature": "DataTree getDataTree()", "full_signature": "public DataTree getDataTree()", "class_method_signature": "ShardDataTree.getDataTree()", "testcase": false, "constructor": false}, {"identifier": "getSchemaContext", "parameters": "()", "modifiers": "", "return": "SchemaContext", "signature": "SchemaContext getSchemaContext()", "full_signature": " SchemaContext getSchemaContext()", "class_method_signature": "ShardDataTree.getSchemaContext()", "testcase": false, "constructor": false}, {"identifier": "updateSchemaContext", "parameters": "(final @NonNull EffectiveModelContext newSchemaContext)", "modifiers": "", "return": "void", "signature": "void updateSchemaContext(final @NonNull EffectiveModelContext newSchemaContext)", "full_signature": " void updateSchemaContext(final @NonNull EffectiveModelContext newSchemaContext)", "class_method_signature": "ShardDataTree.updateSchemaContext(final @NonNull EffectiveModelContext newSchemaContext)", "testcase": false, "constructor": false}, {"identifier": "resetTransactionBatch", "parameters": "()", "modifiers": "", "return": "void", "signature": "void resetTransactionBatch()", "full_signature": " void resetTransactionBatch()", "class_method_signature": "ShardDataTree.resetTransactionBatch()", "testcase": false, "constructor": false}, {"identifier": "takeStateSnapshot", "parameters": "()", "modifiers": "@NonNull", "return": "ShardDataTreeSnapshot", "signature": "ShardDataTreeSnapshot takeStateSnapshot()", "full_signature": "@NonNull ShardDataTreeSnapshot takeStateSnapshot()", "class_method_signature": "ShardDataTree.takeStateSnapshot()", "testcase": false, "constructor": false}, {"identifier": "anyPendingTransactions", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean anyPendingTransactions()", "full_signature": "private boolean anyPendingTransactions()", "class_method_signature": "ShardDataTree.anyPendingTransactions()", "testcase": false, "constructor": false}, {"identifier": "applySnapshot", "parameters": "(final @NonNull ShardDataTreeSnapshot snapshot,\n            final UnaryOperator<DataTreeModification> wrapper)", "modifiers": "private", "return": "void", "signature": "void applySnapshot(final @NonNull ShardDataTreeSnapshot snapshot,\n            final UnaryOperator<DataTreeModification> wrapper)", "full_signature": "private void applySnapshot(final @NonNull ShardDataTreeSnapshot snapshot,\n            final UnaryOperator<DataTreeModification> wrapper)", "class_method_signature": "ShardDataTree.applySnapshot(final @NonNull ShardDataTreeSnapshot snapshot,\n            final UnaryOperator<DataTreeModification> wrapper)", "testcase": false, "constructor": false}, {"identifier": "applySnapshot", "parameters": "(final @NonNull ShardDataTreeSnapshot snapshot)", "modifiers": "", "return": "void", "signature": "void applySnapshot(final @NonNull ShardDataTreeSnapshot snapshot)", "full_signature": " void applySnapshot(final @NonNull ShardDataTreeSnapshot snapshot)", "class_method_signature": "ShardDataTree.applySnapshot(final @NonNull ShardDataTreeSnapshot snapshot)", "testcase": false, "constructor": false}, {"identifier": "applyRecoverySnapshot", "parameters": "(final @NonNull ShardSnapshotState snapshot)", "modifiers": "", "return": "void", "signature": "void applyRecoverySnapshot(final @NonNull ShardSnapshotState snapshot)", "full_signature": " void applyRecoverySnapshot(final @NonNull ShardSnapshotState snapshot)", "class_method_signature": "ShardDataTree.applyRecoverySnapshot(final @NonNull ShardSnapshotState snapshot)", "testcase": false, "constructor": false}, {"identifier": "applyRecoveryCandidate", "parameters": "(final CommitTransactionPayload payload)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private", "return": "void", "signature": "void applyRecoveryCandidate(final CommitTransactionPayload payload)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private void applyRecoveryCandidate(final CommitTransactionPayload payload)", "class_method_signature": "ShardDataTree.applyRecoveryCandidate(final CommitTransactionPayload payload)", "testcase": false, "constructor": false}, {"identifier": "createPruningModification", "parameters": "(final DataTreeModification unwrapped,\n            final boolean uintAdapting)", "modifiers": "private", "return": "PruningDataTreeModification", "signature": "PruningDataTreeModification createPruningModification(final DataTreeModification unwrapped,\n            final boolean uintAdapting)", "full_signature": "private PruningDataTreeModification createPruningModification(final DataTreeModification unwrapped,\n            final boolean uintAdapting)", "class_method_signature": "ShardDataTree.createPruningModification(final DataTreeModification unwrapped,\n            final boolean uintAdapting)", "testcase": false, "constructor": false}, {"identifier": "applyRecoveryPayload", "parameters": "(final @NonNull Payload payload)", "modifiers": "", "return": "void", "signature": "void applyRecoveryPayload(final @NonNull Payload payload)", "full_signature": " void applyRecoveryPayload(final @NonNull Payload payload)", "class_method_signature": "ShardDataTree.applyRecoveryPayload(final @NonNull Payload payload)", "testcase": false, "constructor": false}, {"identifier": "applyReplicatedCandidate", "parameters": "(final CommitTransactionPayload payload)", "modifiers": "private", "return": "void", "signature": "void applyReplicatedCandidate(final CommitTransactionPayload payload)", "full_signature": "private void applyReplicatedCandidate(final CommitTransactionPayload payload)", "class_method_signature": "ShardDataTree.applyReplicatedCandidate(final CommitTransactionPayload payload)", "testcase": false, "constructor": false}, {"identifier": "applyReplicatedPayload", "parameters": "(final Identifier identifier, final Payload payload)", "modifiers": "", "return": "void", "signature": "void applyReplicatedPayload(final Identifier identifier, final Payload payload)", "full_signature": " void applyReplicatedPayload(final Identifier identifier, final Payload payload)", "class_method_signature": "ShardDataTree.applyReplicatedPayload(final Identifier identifier, final Payload payload)", "testcase": false, "constructor": false}, {"identifier": "checkRootOverwrite", "parameters": "(DataTreeCandidate candidate)", "modifiers": "private", "return": "void", "signature": "void checkRootOverwrite(DataTreeCandidate candidate)", "full_signature": "private void checkRootOverwrite(DataTreeCandidate candidate)", "class_method_signature": "ShardDataTree.checkRootOverwrite(DataTreeCandidate candidate)", "testcase": false, "constructor": false}, {"identifier": "replicatePayload", "parameters": "(final Identifier id, final Payload payload, final @Nullable Runnable callback)", "modifiers": "private", "return": "void", "signature": "void replicatePayload(final Identifier id, final Payload payload, final @Nullable Runnable callback)", "full_signature": "private void replicatePayload(final Identifier id, final Payload payload, final @Nullable Runnable callback)", "class_method_signature": "ShardDataTree.replicatePayload(final Identifier id, final Payload payload, final @Nullable Runnable callback)", "testcase": false, "constructor": false}, {"identifier": "payloadReplicationComplete", "parameters": "(final AbstractIdentifiablePayload<?> payload)", "modifiers": "private", "return": "void", "signature": "void payloadReplicationComplete(final AbstractIdentifiablePayload<?> payload)", "full_signature": "private void payloadReplicationComplete(final AbstractIdentifiablePayload<?> payload)", "class_method_signature": "ShardDataTree.payloadReplicationComplete(final AbstractIdentifiablePayload<?> payload)", "testcase": false, "constructor": false}, {"identifier": "payloadReplicationComplete", "parameters": "(final TransactionIdentifier txId)", "modifiers": "private", "return": "boolean", "signature": "boolean payloadReplicationComplete(final TransactionIdentifier txId)", "full_signature": "private boolean payloadReplicationComplete(final TransactionIdentifier txId)", "class_method_signature": "ShardDataTree.payloadReplicationComplete(final TransactionIdentifier txId)", "testcase": false, "constructor": false}, {"identifier": "allMetadataAbortedTransaction", "parameters": "(final TransactionIdentifier txId)", "modifiers": "private", "return": "void", "signature": "void allMetadataAbortedTransaction(final TransactionIdentifier txId)", "full_signature": "private void allMetadataAbortedTransaction(final TransactionIdentifier txId)", "class_method_signature": "ShardDataTree.allMetadataAbortedTransaction(final TransactionIdentifier txId)", "testcase": false, "constructor": false}, {"identifier": "allMetadataCommittedTransaction", "parameters": "(final TransactionIdentifier txId)", "modifiers": "private", "return": "void", "signature": "void allMetadataCommittedTransaction(final TransactionIdentifier txId)", "full_signature": "private void allMetadataCommittedTransaction(final TransactionIdentifier txId)", "class_method_signature": "ShardDataTree.allMetadataCommittedTransaction(final TransactionIdentifier txId)", "testcase": false, "constructor": false}, {"identifier": "allMetadataPurgedTransaction", "parameters": "(final TransactionIdentifier txId)", "modifiers": "private", "return": "void", "signature": "void allMetadataPurgedTransaction(final TransactionIdentifier txId)", "full_signature": "private void allMetadataPurgedTransaction(final TransactionIdentifier txId)", "class_method_signature": "ShardDataTree.allMetadataPurgedTransaction(final TransactionIdentifier txId)", "testcase": false, "constructor": false}, {"identifier": "allMetadataCreatedLocalHistory", "parameters": "(final LocalHistoryIdentifier historyId)", "modifiers": "private", "return": "void", "signature": "void allMetadataCreatedLocalHistory(final LocalHistoryIdentifier historyId)", "full_signature": "private void allMetadataCreatedLocalHistory(final LocalHistoryIdentifier historyId)", "class_method_signature": "ShardDataTree.allMetadataCreatedLocalHistory(final LocalHistoryIdentifier historyId)", "testcase": false, "constructor": false}, {"identifier": "allMetadataClosedLocalHistory", "parameters": "(final LocalHistoryIdentifier historyId)", "modifiers": "private", "return": "void", "signature": "void allMetadataClosedLocalHistory(final LocalHistoryIdentifier historyId)", "full_signature": "private void allMetadataClosedLocalHistory(final LocalHistoryIdentifier historyId)", "class_method_signature": "ShardDataTree.allMetadataClosedLocalHistory(final LocalHistoryIdentifier historyId)", "testcase": false, "constructor": false}, {"identifier": "allMetadataPurgedLocalHistory", "parameters": "(final LocalHistoryIdentifier historyId)", "modifiers": "private", "return": "void", "signature": "void allMetadataPurgedLocalHistory(final LocalHistoryIdentifier historyId)", "full_signature": "private void allMetadataPurgedLocalHistory(final LocalHistoryIdentifier historyId)", "class_method_signature": "ShardDataTree.allMetadataPurgedLocalHistory(final LocalHistoryIdentifier historyId)", "testcase": false, "constructor": false}, {"identifier": "recreateTransactionChain", "parameters": "(final LocalHistoryIdentifier historyId,\n            final boolean closed)", "modifiers": "", "return": "ShardDataTreeTransactionChain", "signature": "ShardDataTreeTransactionChain recreateTransactionChain(final LocalHistoryIdentifier historyId,\n            final boolean closed)", "full_signature": " ShardDataTreeTransactionChain recreateTransactionChain(final LocalHistoryIdentifier historyId,\n            final boolean closed)", "class_method_signature": "ShardDataTree.recreateTransactionChain(final LocalHistoryIdentifier historyId,\n            final boolean closed)", "testcase": false, "constructor": false}, {"identifier": "ensureTransactionChain", "parameters": "(final LocalHistoryIdentifier historyId,\n            final @Nullable Runnable callback)", "modifiers": "", "return": "ShardDataTreeTransactionChain", "signature": "ShardDataTreeTransactionChain ensureTransactionChain(final LocalHistoryIdentifier historyId,\n            final @Nullable Runnable callback)", "full_signature": " ShardDataTreeTransactionChain ensureTransactionChain(final LocalHistoryIdentifier historyId,\n            final @Nullable Runnable callback)", "class_method_signature": "ShardDataTree.ensureTransactionChain(final LocalHistoryIdentifier historyId,\n            final @Nullable Runnable callback)", "testcase": false, "constructor": false}, {"identifier": "newReadOnlyTransaction", "parameters": "(final TransactionIdentifier txId)", "modifiers": "", "return": "ReadOnlyShardDataTreeTransaction", "signature": "ReadOnlyShardDataTreeTransaction newReadOnlyTransaction(final TransactionIdentifier txId)", "full_signature": " ReadOnlyShardDataTreeTransaction newReadOnlyTransaction(final TransactionIdentifier txId)", "class_method_signature": "ShardDataTree.newReadOnlyTransaction(final TransactionIdentifier txId)", "testcase": false, "constructor": false}, {"identifier": "newReadWriteTransaction", "parameters": "(final TransactionIdentifier txId)", "modifiers": "", "return": "ReadWriteShardDataTreeTransaction", "signature": "ReadWriteShardDataTreeTransaction newReadWriteTransaction(final TransactionIdentifier txId)", "full_signature": " ReadWriteShardDataTreeTransaction newReadWriteTransaction(final TransactionIdentifier txId)", "class_method_signature": "ShardDataTree.newReadWriteTransaction(final TransactionIdentifier txId)", "testcase": false, "constructor": false}, {"identifier": "notifyListeners", "parameters": "(final DataTreeCandidate candidate)", "modifiers": "@VisibleForTesting public", "return": "void", "signature": "void notifyListeners(final DataTreeCandidate candidate)", "full_signature": "@VisibleForTesting public void notifyListeners(final DataTreeCandidate candidate)", "class_method_signature": "ShardDataTree.notifyListeners(final DataTreeCandidate candidate)", "testcase": false, "constructor": false}, {"identifier": "purgeLeaderState", "parameters": "()", "modifiers": "", "return": "void", "signature": "void purgeLeaderState()", "full_signature": " void purgeLeaderState()", "class_method_signature": "ShardDataTree.purgeLeaderState()", "testcase": false, "constructor": false}, {"identifier": "closeTransactionChain", "parameters": "(final LocalHistoryIdentifier id, final @Nullable Runnable callback)", "modifiers": "", "return": "void", "signature": "void closeTransactionChain(final LocalHistoryIdentifier id, final @Nullable Runnable callback)", "full_signature": " void closeTransactionChain(final LocalHistoryIdentifier id, final @Nullable Runnable callback)", "class_method_signature": "ShardDataTree.closeTransactionChain(final LocalHistoryIdentifier id, final @Nullable Runnable callback)", "testcase": false, "constructor": false}, {"identifier": "closeTransactionChain", "parameters": "(final LocalHistoryIdentifier id)", "modifiers": "", "return": "void", "signature": "void closeTransactionChain(final LocalHistoryIdentifier id)", "full_signature": " void closeTransactionChain(final LocalHistoryIdentifier id)", "class_method_signature": "ShardDataTree.closeTransactionChain(final LocalHistoryIdentifier id)", "testcase": false, "constructor": false}, {"identifier": "commonCloseTransactionChain", "parameters": "(final LocalHistoryIdentifier id, final @Nullable Runnable callback)", "modifiers": "private", "return": "boolean", "signature": "boolean commonCloseTransactionChain(final LocalHistoryIdentifier id, final @Nullable Runnable callback)", "full_signature": "private boolean commonCloseTransactionChain(final LocalHistoryIdentifier id, final @Nullable Runnable callback)", "class_method_signature": "ShardDataTree.commonCloseTransactionChain(final LocalHistoryIdentifier id, final @Nullable Runnable callback)", "testcase": false, "constructor": false}, {"identifier": "purgeTransactionChain", "parameters": "(final LocalHistoryIdentifier id, final @Nullable Runnable callback)", "modifiers": "", "return": "void", "signature": "void purgeTransactionChain(final LocalHistoryIdentifier id, final @Nullable Runnable callback)", "full_signature": " void purgeTransactionChain(final LocalHistoryIdentifier id, final @Nullable Runnable callback)", "class_method_signature": "ShardDataTree.purgeTransactionChain(final LocalHistoryIdentifier id, final @Nullable Runnable callback)", "testcase": false, "constructor": false}, {"identifier": "readCurrentData", "parameters": "()", "modifiers": "", "return": "Optional<DataTreeCandidate>", "signature": "Optional<DataTreeCandidate> readCurrentData()", "full_signature": " Optional<DataTreeCandidate> readCurrentData()", "class_method_signature": "ShardDataTree.readCurrentData()", "testcase": false, "constructor": false}, {"identifier": "registerTreeChangeListener", "parameters": "(final YangInstanceIdentifier path, final DOMDataTreeChangeListener listener,\n            final Optional<DataTreeCandidate> initialState,\n            final Consumer<ListenerRegistration<DOMDataTreeChangeListener>> onRegistration)", "modifiers": "public", "return": "void", "signature": "void registerTreeChangeListener(final YangInstanceIdentifier path, final DOMDataTreeChangeListener listener,\n            final Optional<DataTreeCandidate> initialState,\n            final Consumer<ListenerRegistration<DOMDataTreeChangeListener>> onRegistration)", "full_signature": "public void registerTreeChangeListener(final YangInstanceIdentifier path, final DOMDataTreeChangeListener listener,\n            final Optional<DataTreeCandidate> initialState,\n            final Consumer<ListenerRegistration<DOMDataTreeChangeListener>> onRegistration)", "class_method_signature": "ShardDataTree.registerTreeChangeListener(final YangInstanceIdentifier path, final DOMDataTreeChangeListener listener,\n            final Optional<DataTreeCandidate> initialState,\n            final Consumer<ListenerRegistration<DOMDataTreeChangeListener>> onRegistration)", "testcase": false, "constructor": false}, {"identifier": "getQueueSize", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getQueueSize()", "full_signature": " int getQueueSize()", "class_method_signature": "ShardDataTree.getQueueSize()", "testcase": false, "constructor": false}, {"identifier": "abortTransaction", "parameters": "(final AbstractShardDataTreeTransaction<?> transaction, final Runnable callback)", "modifiers": "@Override", "return": "void", "signature": "void abortTransaction(final AbstractShardDataTreeTransaction<?> transaction, final Runnable callback)", "full_signature": "@Override void abortTransaction(final AbstractShardDataTreeTransaction<?> transaction, final Runnable callback)", "class_method_signature": "ShardDataTree.abortTransaction(final AbstractShardDataTreeTransaction<?> transaction, final Runnable callback)", "testcase": false, "constructor": false}, {"identifier": "abortFromTransactionActor", "parameters": "(final AbstractShardDataTreeTransaction<?> transaction)", "modifiers": "@Override", "return": "void", "signature": "void abortFromTransactionActor(final AbstractShardDataTreeTransaction<?> transaction)", "full_signature": "@Override void abortFromTransactionActor(final AbstractShardDataTreeTransaction<?> transaction)", "class_method_signature": "ShardDataTree.abortFromTransactionActor(final AbstractShardDataTreeTransaction<?> transaction)", "testcase": false, "constructor": false}, {"identifier": "finishTransaction", "parameters": "(final ReadWriteShardDataTreeTransaction transaction,\n            final Optional<SortedSet<String>> participatingShardNames)", "modifiers": "@Override", "return": "ShardDataTreeCohort", "signature": "ShardDataTreeCohort finishTransaction(final ReadWriteShardDataTreeTransaction transaction,\n            final Optional<SortedSet<String>> participatingShardNames)", "full_signature": "@Override ShardDataTreeCohort finishTransaction(final ReadWriteShardDataTreeTransaction transaction,\n            final Optional<SortedSet<String>> participatingShardNames)", "class_method_signature": "ShardDataTree.finishTransaction(final ReadWriteShardDataTreeTransaction transaction,\n            final Optional<SortedSet<String>> participatingShardNames)", "testcase": false, "constructor": false}, {"identifier": "purgeTransaction", "parameters": "(final TransactionIdentifier id, final Runnable callback)", "modifiers": "", "return": "void", "signature": "void purgeTransaction(final TransactionIdentifier id, final Runnable callback)", "full_signature": " void purgeTransaction(final TransactionIdentifier id, final Runnable callback)", "class_method_signature": "ShardDataTree.purgeTransaction(final TransactionIdentifier id, final Runnable callback)", "testcase": false, "constructor": false}, {"identifier": "readNode", "parameters": "(final YangInstanceIdentifier path)", "modifiers": "public", "return": "Optional<NormalizedNode<?, ?>>", "signature": "Optional<NormalizedNode<?, ?>> readNode(final YangInstanceIdentifier path)", "full_signature": "public Optional<NormalizedNode<?, ?>> readNode(final YangInstanceIdentifier path)", "class_method_signature": "ShardDataTree.readNode(final YangInstanceIdentifier path)", "testcase": false, "constructor": false}, {"identifier": "takeSnapshot", "parameters": "()", "modifiers": "", "return": "DataTreeSnapshot", "signature": "DataTreeSnapshot takeSnapshot()", "full_signature": " DataTreeSnapshot takeSnapshot()", "class_method_signature": "ShardDataTree.takeSnapshot()", "testcase": false, "constructor": false}, {"identifier": "newModification", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "DataTreeModification", "signature": "DataTreeModification newModification()", "full_signature": "@VisibleForTesting public DataTreeModification newModification()", "class_method_signature": "ShardDataTree.newModification()", "testcase": false, "constructor": false}, {"identifier": "getAndClearPendingTransactions", "parameters": "()", "modifiers": "public", "return": "Collection<ShardDataTreeCohort>", "signature": "Collection<ShardDataTreeCohort> getAndClearPendingTransactions()", "full_signature": "public Collection<ShardDataTreeCohort> getAndClearPendingTransactions()", "class_method_signature": "ShardDataTree.getAndClearPendingTransactions()", "testcase": false, "constructor": false}, {"identifier": "resumeNextPendingTransaction", "parameters": "()", "modifiers": "", "return": "void", "signature": "void resumeNextPendingTransaction()", "full_signature": " void resumeNextPendingTransaction()", "class_method_signature": "ShardDataTree.resumeNextPendingTransaction()", "testcase": false, "constructor": false}, {"identifier": "processNextPendingTransaction", "parameters": "()", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private", "return": "void", "signature": "void processNextPendingTransaction()", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private void processNextPendingTransaction()", "class_method_signature": "ShardDataTree.processNextPendingTransaction()", "testcase": false, "constructor": false}, {"identifier": "processNextPending", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void processNextPending()", "full_signature": "private void processNextPending()", "class_method_signature": "ShardDataTree.processNextPending()", "testcase": false, "constructor": false}, {"identifier": "processNextPending", "parameters": "(final Queue<CommitEntry> queue, final State allowedState,\n            final Consumer<CommitEntry> processor)", "modifiers": "private", "return": "void", "signature": "void processNextPending(final Queue<CommitEntry> queue, final State allowedState,\n            final Consumer<CommitEntry> processor)", "full_signature": "private void processNextPending(final Queue<CommitEntry> queue, final State allowedState,\n            final Consumer<CommitEntry> processor)", "class_method_signature": "ShardDataTree.processNextPending(final Queue<CommitEntry> queue, final State allowedState,\n            final Consumer<CommitEntry> processor)", "testcase": false, "constructor": false}, {"identifier": "processNextPendingCommit", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void processNextPendingCommit()", "full_signature": "private void processNextPendingCommit()", "class_method_signature": "ShardDataTree.processNextPendingCommit()", "testcase": false, "constructor": false}, {"identifier": "peekNextPendingCommit", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean peekNextPendingCommit()", "full_signature": "private boolean peekNextPendingCommit()", "class_method_signature": "ShardDataTree.peekNextPendingCommit()", "testcase": false, "constructor": false}, {"identifier": "startCanCommit", "parameters": "(final SimpleShardDataTreeCohort cohort)", "modifiers": "", "return": "void", "signature": "void startCanCommit(final SimpleShardDataTreeCohort cohort)", "full_signature": " void startCanCommit(final SimpleShardDataTreeCohort cohort)", "class_method_signature": "ShardDataTree.startCanCommit(final SimpleShardDataTreeCohort cohort)", "testcase": false, "constructor": false}, {"identifier": "insertEntry", "parameters": "(final Deque<CommitEntry> queue, final CommitEntry entry, final int atIndex)", "modifiers": "private static", "return": "void", "signature": "void insertEntry(final Deque<CommitEntry> queue, final CommitEntry entry, final int atIndex)", "full_signature": "private static void insertEntry(final Deque<CommitEntry> queue, final CommitEntry entry, final int atIndex)", "class_method_signature": "ShardDataTree.insertEntry(final Deque<CommitEntry> queue, final CommitEntry entry, final int atIndex)", "testcase": false, "constructor": false}, {"identifier": "extractPrecedingShardNames", "parameters": "(final Optional<SortedSet<String>> participatingShardNames)", "modifiers": "private", "return": "Collection<String>", "signature": "Collection<String> extractPrecedingShardNames(final Optional<SortedSet<String>> participatingShardNames)", "full_signature": "private Collection<String> extractPrecedingShardNames(final Optional<SortedSet<String>> participatingShardNames)", "class_method_signature": "ShardDataTree.extractPrecedingShardNames(final Optional<SortedSet<String>> participatingShardNames)", "testcase": false, "constructor": false}, {"identifier": "failPreCommit", "parameters": "(final Throwable cause)", "modifiers": "private", "return": "void", "signature": "void failPreCommit(final Throwable cause)", "full_signature": "private void failPreCommit(final Throwable cause)", "class_method_signature": "ShardDataTree.failPreCommit(final Throwable cause)", "testcase": false, "constructor": false}, {"identifier": "startPreCommit", "parameters": "(final SimpleShardDataTreeCohort cohort)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\")", "return": "void", "signature": "void startPreCommit(final SimpleShardDataTreeCohort cohort)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") void startPreCommit(final SimpleShardDataTreeCohort cohort)", "class_method_signature": "ShardDataTree.startPreCommit(final SimpleShardDataTreeCohort cohort)", "testcase": false, "constructor": false}, {"identifier": "failCommit", "parameters": "(final Exception cause)", "modifiers": "private", "return": "void", "signature": "void failCommit(final Exception cause)", "full_signature": "private void failCommit(final Exception cause)", "class_method_signature": "ShardDataTree.failCommit(final Exception cause)", "testcase": false, "constructor": false}, {"identifier": "finishCommit", "parameters": "(final SimpleShardDataTreeCohort cohort)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private", "return": "void", "signature": "void finishCommit(final SimpleShardDataTreeCohort cohort)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private void finishCommit(final SimpleShardDataTreeCohort cohort)", "class_method_signature": "ShardDataTree.finishCommit(final SimpleShardDataTreeCohort cohort)", "testcase": false, "constructor": false}, {"identifier": "startCommit", "parameters": "(final SimpleShardDataTreeCohort cohort, final DataTreeCandidate candidate)", "modifiers": "", "return": "void", "signature": "void startCommit(final SimpleShardDataTreeCohort cohort, final DataTreeCandidate candidate)", "full_signature": " void startCommit(final SimpleShardDataTreeCohort cohort, final DataTreeCandidate candidate)", "class_method_signature": "ShardDataTree.startCommit(final SimpleShardDataTreeCohort cohort, final DataTreeCandidate candidate)", "testcase": false, "constructor": false}, {"identifier": "getCohortActors", "parameters": "()", "modifiers": "", "return": "Collection<ActorRef>", "signature": "Collection<ActorRef> getCohortActors()", "full_signature": " Collection<ActorRef> getCohortActors()", "class_method_signature": "ShardDataTree.getCohortActors()", "testcase": false, "constructor": false}, {"identifier": "processCohortRegistryCommand", "parameters": "(final ActorRef sender, final CohortRegistryCommand message)", "modifiers": "", "return": "void", "signature": "void processCohortRegistryCommand(final ActorRef sender, final CohortRegistryCommand message)", "full_signature": " void processCohortRegistryCommand(final ActorRef sender, final CohortRegistryCommand message)", "class_method_signature": "ShardDataTree.processCohortRegistryCommand(final ActorRef sender, final CohortRegistryCommand message)", "testcase": false, "constructor": false}, {"identifier": "createFailedCohort", "parameters": "(final TransactionIdentifier txId, final DataTreeModification mod,\n            final Exception failure)", "modifiers": "@Override", "return": "ShardDataTreeCohort", "signature": "ShardDataTreeCohort createFailedCohort(final TransactionIdentifier txId, final DataTreeModification mod,\n            final Exception failure)", "full_signature": "@Override ShardDataTreeCohort createFailedCohort(final TransactionIdentifier txId, final DataTreeModification mod,\n            final Exception failure)", "class_method_signature": "ShardDataTree.createFailedCohort(final TransactionIdentifier txId, final DataTreeModification mod,\n            final Exception failure)", "testcase": false, "constructor": false}, {"identifier": "createReadyCohort", "parameters": "(final TransactionIdentifier txId, final DataTreeModification mod,\n            final Optional<SortedSet<String>> participatingShardNames)", "modifiers": "@Override", "return": "ShardDataTreeCohort", "signature": "ShardDataTreeCohort createReadyCohort(final TransactionIdentifier txId, final DataTreeModification mod,\n            final Optional<SortedSet<String>> participatingShardNames)", "full_signature": "@Override ShardDataTreeCohort createReadyCohort(final TransactionIdentifier txId, final DataTreeModification mod,\n            final Optional<SortedSet<String>> participatingShardNames)", "class_method_signature": "ShardDataTree.createReadyCohort(final TransactionIdentifier txId, final DataTreeModification mod,\n            final Optional<SortedSet<String>> participatingShardNames)", "testcase": false, "constructor": false}, {"identifier": "newReadyCohort", "parameters": "(final TransactionIdentifier txId, final DataTreeModification mod,\n            final Optional<SortedSet<String>> participatingShardNames)", "modifiers": "", "return": "ShardDataTreeCohort", "signature": "ShardDataTreeCohort newReadyCohort(final TransactionIdentifier txId, final DataTreeModification mod,\n            final Optional<SortedSet<String>> participatingShardNames)", "full_signature": " ShardDataTreeCohort newReadyCohort(final TransactionIdentifier txId, final DataTreeModification mod,\n            final Optional<SortedSet<String>> participatingShardNames)", "class_method_signature": "ShardDataTree.newReadyCohort(final TransactionIdentifier txId, final DataTreeModification mod,\n            final Optional<SortedSet<String>> participatingShardNames)", "testcase": false, "constructor": false}, {"identifier": "checkForExpiredTransactions", "parameters": "(final long transactionCommitTimeoutMillis,\n            final Function<SimpleShardDataTreeCohort, OptionalLong> accessTimeUpdater)", "modifiers": "@SuppressFBWarnings(value = \"DB_DUPLICATE_SWITCH_CLAUSES\", justification = \"See inline comments below.\")", "return": "void", "signature": "void checkForExpiredTransactions(final long transactionCommitTimeoutMillis,\n            final Function<SimpleShardDataTreeCohort, OptionalLong> accessTimeUpdater)", "full_signature": "@SuppressFBWarnings(value = \"DB_DUPLICATE_SWITCH_CLAUSES\", justification = \"See inline comments below.\") void checkForExpiredTransactions(final long transactionCommitTimeoutMillis,\n            final Function<SimpleShardDataTreeCohort, OptionalLong> accessTimeUpdater)", "class_method_signature": "ShardDataTree.checkForExpiredTransactions(final long transactionCommitTimeoutMillis,\n            final Function<SimpleShardDataTreeCohort, OptionalLong> accessTimeUpdater)", "testcase": false, "constructor": false}, {"identifier": "startAbort", "parameters": "(final SimpleShardDataTreeCohort cohort)", "modifiers": "", "return": "boolean", "signature": "boolean startAbort(final SimpleShardDataTreeCohort cohort)", "full_signature": " boolean startAbort(final SimpleShardDataTreeCohort cohort)", "class_method_signature": "ShardDataTree.startAbort(final SimpleShardDataTreeCohort cohort)", "testcase": false, "constructor": false}, {"identifier": "rebaseTransactions", "parameters": "(final Iterator<CommitEntry> iter, final @NonNull DataTreeTip newTip)", "modifiers": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private", "return": "void", "signature": "void rebaseTransactions(final Iterator<CommitEntry> iter, final @NonNull DataTreeTip newTip)", "full_signature": "@SuppressWarnings(\"checkstyle:IllegalCatch\") private void rebaseTransactions(final Iterator<CommitEntry> iter, final @NonNull DataTreeTip newTip)", "class_method_signature": "ShardDataTree.rebaseTransactions(final Iterator<CommitEntry> iter, final @NonNull DataTreeTip newTip)", "testcase": false, "constructor": false}, {"identifier": "setRunOnPendingTransactionsComplete", "parameters": "(final Runnable operation)", "modifiers": "", "return": "void", "signature": "void setRunOnPendingTransactionsComplete(final Runnable operation)", "full_signature": " void setRunOnPendingTransactionsComplete(final Runnable operation)", "class_method_signature": "ShardDataTree.setRunOnPendingTransactionsComplete(final Runnable operation)", "testcase": false, "constructor": false}, {"identifier": "maybeRunOperationOnPendingTransactionsComplete", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void maybeRunOperationOnPendingTransactionsComplete()", "full_signature": "private void maybeRunOperationOnPendingTransactionsComplete()", "class_method_signature": "ShardDataTree.maybeRunOperationOnPendingTransactionsComplete()", "testcase": false, "constructor": false}, {"identifier": "getStats", "parameters": "()", "modifiers": "", "return": "ShardStats", "signature": "ShardStats getStats()", "full_signature": " ShardStats getStats()", "class_method_signature": "ShardDataTree.getStats()", "testcase": false, "constructor": false}, {"identifier": "cohortIterator", "parameters": "()", "modifiers": "", "return": "Iterator<SimpleShardDataTreeCohort>", "signature": "Iterator<SimpleShardDataTreeCohort> cohortIterator()", "full_signature": " Iterator<SimpleShardDataTreeCohort> cohortIterator()", "class_method_signature": "ShardDataTree.cohortIterator()", "testcase": false, "constructor": false}, {"identifier": "removeTransactionChain", "parameters": "(final LocalHistoryIdentifier id)", "modifiers": "", "return": "void", "signature": "void removeTransactionChain(final LocalHistoryIdentifier id)", "full_signature": " void removeTransactionChain(final LocalHistoryIdentifier id)", "class_method_signature": "ShardDataTree.removeTransactionChain(final LocalHistoryIdentifier id)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/ShardDataTree.java"}, "focal_method": {"identifier": "applyRecoverySnapshot", "parameters": "(final @NonNull ShardSnapshotState snapshot)", "modifiers": "", "return": "void", "body": "void applyRecoverySnapshot(final @NonNull ShardSnapshotState snapshot) throws DataValidationFailedException {\n        // TODO: we should be able to reuse the pruner, provided we are not reentrant\n        final ReusableNormalizedNodePruner pruner = ReusableNormalizedNodePruner.forDataSchemaContext(\n            dataSchemaContext);\n        if (snapshot.needsMigration()) {\n            final ReusableNormalizedNodePruner uintPruner = pruner.withUintAdaption();\n            applySnapshot(snapshot.getSnapshot(),\n                delegate -> new PruningDataTreeModification.Proactive(delegate, dataTree, uintPruner));\n        } else {\n            applySnapshot(snapshot.getSnapshot(),\n                delegate -> new PruningDataTreeModification.Reactive(delegate, dataTree, pruner));\n        }\n    }", "signature": "void applyRecoverySnapshot(final @NonNull ShardSnapshotState snapshot)", "full_signature": " void applyRecoverySnapshot(final @NonNull ShardSnapshotState snapshot)", "class_method_signature": "ShardDataTree.applyRecoverySnapshot(final @NonNull ShardSnapshotState snapshot)", "testcase": false, "constructor": false, "invocations": ["forDataSchemaContext", "needsMigration", "withUintAdaption", "applySnapshot", "getSnapshot", "applySnapshot", "getSnapshot"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}