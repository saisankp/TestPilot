{"test_class": {"identifier": "RangePartHeaderSerializerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final RangePartHeaderSerializer rangePartHeaderSerializer = new RangePartHeaderSerializer();", "modifier": "private final", "type": "RangePartHeaderSerializer", "declarator": "rangePartHeaderSerializer = new RangePartHeaderSerializer()", "var_name": "rangePartHeaderSerializer"}], "file": "http/src/test/java/ro/polak/http/protocol/serializer/impl/RangePartHeaderSerializerTest.java"}, "test_case": {"identifier": "shouldSerializeRangeProperly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldSerializeRangeProperly() {\n        Range range = new Range(333L, 1234L);\n        String boundary = \"BBBOOUUNNNDDAARRYY\";\n        String contentType = \"application/pdf\";\n        long totalLength = 12345L;\n        RangePartHeader rangePartHeader = new RangePartHeader(range, boundary, contentType, totalLength);\n\n        String serialized = rangePartHeaderSerializer.serialize(rangePartHeader);\n        assertThat(serialized, startsWith(\"--\" + boundary + \"\\r\\n\"));\n        assertThat(serialized, endsWith(\"\\r\\n\\r\\n\"));\n        assertThat(serialized, containsString(\"\\r\\nContent-Type: \" + contentType + \"\\r\\n\"));\n        assertThat(serialized, containsString(\"\\r\\nContent-Range: bytes 333-1234/12345\\r\\n\"));\n    }", "signature": "void shouldSerializeRangeProperly()", "full_signature": "@Test public void shouldSerializeRangeProperly()", "class_method_signature": "RangePartHeaderSerializerTest.shouldSerializeRangeProperly()", "testcase": true, "constructor": false, "invocations": ["serialize", "assertThat", "startsWith", "assertThat", "endsWith", "assertThat", "containsString", "assertThat", "containsString"]}, "focal_class": {"identifier": "RangePartHeaderSerializer", "superclass": "", "interfaces": "implements Serializer<RangePartHeader>", "fields": [{"original_string": "private static final String NEW_LINE = \"\\r\\n\";", "modifier": "private static final", "type": "String", "declarator": "NEW_LINE = \"\\r\\n\"", "var_name": "NEW_LINE"}, {"original_string": "private static final String DASH_DASH = \"--\";", "modifier": "private static final", "type": "String", "declarator": "DASH_DASH = \"--\"", "var_name": "DASH_DASH"}, {"original_string": "private static final int RANGE_DIGITS_LENGTH = 3;", "modifier": "private static final", "type": "int", "declarator": "RANGE_DIGITS_LENGTH = 3", "var_name": "RANGE_DIGITS_LENGTH"}], "methods": [{"identifier": "serialize", "parameters": "(final RangePartHeader input)", "modifiers": "@Override public", "return": "String", "signature": "String serialize(final RangePartHeader input)", "full_signature": "@Override public String serialize(final RangePartHeader input)", "class_method_signature": "RangePartHeaderSerializer.serialize(final RangePartHeader input)", "testcase": false, "constructor": false}, {"identifier": "serializeLastBoundaryDeliminator", "parameters": "(final String boundary)", "modifiers": "public", "return": "String", "signature": "String serializeLastBoundaryDeliminator(final String boundary)", "full_signature": "public String serializeLastBoundaryDeliminator(final String boundary)", "class_method_signature": "RangePartHeaderSerializer.serializeLastBoundaryDeliminator(final String boundary)", "testcase": false, "constructor": false}, {"identifier": "getPartHeadersLength", "parameters": "(final List<Range> ranges,\n                                     final String boundary,\n                                     final String contentType,\n                                     final long totalLength)", "modifiers": "public", "return": "long", "signature": "long getPartHeadersLength(final List<Range> ranges,\n                                     final String boundary,\n                                     final String contentType,\n                                     final long totalLength)", "full_signature": "public long getPartHeadersLength(final List<Range> ranges,\n                                     final String boundary,\n                                     final String contentType,\n                                     final long totalLength)", "class_method_signature": "RangePartHeaderSerializer.getPartHeadersLength(final List<Range> ranges,\n                                     final String boundary,\n                                     final String contentType,\n                                     final long totalLength)", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/protocol/serializer/impl/RangePartHeaderSerializer.java"}, "focal_method": {"identifier": "serialize", "parameters": "(final RangePartHeader input)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String serialize(final RangePartHeader input) {\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.append(DASH_DASH)\n                .append(input.getBoundary())\n                .append(NEW_LINE)\n                .append(Headers.HEADER_CONTENT_TYPE)\n                .append(\": \")\n                .append(input.getContentType())\n                .append(NEW_LINE)\n                .append(Headers.HEADER_CONTENT_RANGE)\n                .append(\": bytes \")\n                .append(input.getRange().getFrom())\n                .append(\"-\")\n                .append(input.getRange().getTo())\n                .append(\"/\")\n                .append(input.getTotalLength())\n                .append(NEW_LINE)\n                .append(NEW_LINE);\n\n        return stringBuilder.toString();\n    }", "signature": "String serialize(final RangePartHeader input)", "full_signature": "@Override public String serialize(final RangePartHeader input)", "class_method_signature": "RangePartHeaderSerializer.serialize(final RangePartHeader input)", "testcase": false, "constructor": false, "invocations": ["append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "append", "getBoundary", "getContentType", "getFrom", "getRange", "getTo", "getRange", "getTotalLength", "toString"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}