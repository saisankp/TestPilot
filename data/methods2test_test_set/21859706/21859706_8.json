{"test_class": {"identifier": "CacheRequestContextTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundle/src/test/java/com/bazaarvoice/dropwizard/caching/CacheRequestContextTest.java"}, "test_case": {"identifier": "getCacheControl", "parameters": "(MultivaluedMap<String, String> headers, String cacheControl)", "modifiers": "@Test(dataProvider = \"getCacheControlData\") public", "return": "void", "body": "@Test(dataProvider = \"getCacheControlData\")\n    public void getCacheControl(MultivaluedMap<String, String> headers, String cacheControl) {\n        CacheRequestContext requestContext = new CacheRequestContext(\"GET\", URI.create(\"http://host\"), headers, \"abc\");\n        assertEquals(requestContext.getCacheControl(), RequestCacheControl.valueOf(cacheControl));\n    }", "signature": "void getCacheControl(MultivaluedMap<String, String> headers, String cacheControl)", "full_signature": "@Test(dataProvider = \"getCacheControlData\") public void getCacheControl(MultivaluedMap<String, String> headers, String cacheControl)", "class_method_signature": "CacheRequestContextTest.getCacheControl(MultivaluedMap<String, String> headers, String cacheControl)", "testcase": true, "constructor": false, "invocations": ["create", "assertEquals", "getCacheControl", "valueOf"]}, "focal_class": {"identifier": "CacheRequestContext", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(CacheRequestContext.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(CacheRequestContext.class)", "var_name": "LOG"}, {"original_string": "private final String _requestMethod;", "modifier": "private final", "type": "String", "declarator": "_requestMethod", "var_name": "_requestMethod"}, {"original_string": "private final URI _requestUri;", "modifier": "private final", "type": "URI", "declarator": "_requestUri", "var_name": "_requestUri"}, {"original_string": "private final MultivaluedMap<String, String> _headers;", "modifier": "private final", "type": "MultivaluedMap<String, String>", "declarator": "_headers", "var_name": "_headers"}, {"original_string": "private final String _requestHash;", "modifier": "private final", "type": "String", "declarator": "_requestHash", "var_name": "_requestHash"}, {"original_string": "private transient RequestCacheControl _cacheControl;", "modifier": "private transient", "type": "RequestCacheControl", "declarator": "_cacheControl", "var_name": "_cacheControl"}, {"original_string": "private transient Boolean _pragmaNoCache;", "modifier": "private transient", "type": "Boolean", "declarator": "_pragmaNoCache", "var_name": "_pragmaNoCache"}], "methods": [{"identifier": "CacheRequestContext", "parameters": "(String requestMethod, URI requestUri, MultivaluedMap<String, String> headers, String requestHash)", "modifiers": "public", "return": "", "signature": " CacheRequestContext(String requestMethod, URI requestUri, MultivaluedMap<String, String> headers, String requestHash)", "full_signature": "public  CacheRequestContext(String requestMethod, URI requestUri, MultivaluedMap<String, String> headers, String requestHash)", "class_method_signature": "CacheRequestContext.CacheRequestContext(String requestMethod, URI requestUri, MultivaluedMap<String, String> headers, String requestHash)", "testcase": false, "constructor": true}, {"identifier": "build", "parameters": "(ContainerRequest request, Set<String> vary, boolean includeBody)", "modifiers": "public static", "return": "CacheRequestContext", "signature": "CacheRequestContext build(ContainerRequest request, Set<String> vary, boolean includeBody)", "full_signature": "public static CacheRequestContext build(ContainerRequest request, Set<String> vary, boolean includeBody)", "class_method_signature": "CacheRequestContext.build(ContainerRequest request, Set<String> vary, boolean includeBody)", "testcase": false, "constructor": false}, {"identifier": "getRequestUri", "parameters": "()", "modifiers": "public", "return": "URI", "signature": "URI getRequestUri()", "full_signature": "public URI getRequestUri()", "class_method_signature": "CacheRequestContext.getRequestUri()", "testcase": false, "constructor": false}, {"identifier": "getRequestMethod", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRequestMethod()", "full_signature": "public String getRequestMethod()", "class_method_signature": "CacheRequestContext.getRequestMethod()", "testcase": false, "constructor": false}, {"identifier": "getRequestHash", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRequestHash()", "full_signature": "public String getRequestHash()", "class_method_signature": "CacheRequestContext.getRequestHash()", "testcase": false, "constructor": false}, {"identifier": "getCacheControl", "parameters": "()", "modifiers": "public", "return": "RequestCacheControl", "signature": "RequestCacheControl getCacheControl()", "full_signature": "public RequestCacheControl getCacheControl()", "class_method_signature": "CacheRequestContext.getCacheControl()", "testcase": false, "constructor": false}, {"identifier": "isPragmaNoCache", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPragmaNoCache()", "full_signature": "public boolean isPragmaNoCache()", "class_method_signature": "CacheRequestContext.isPragmaNoCache()", "testcase": false, "constructor": false}], "file": "bundle/src/main/java/com/bazaarvoice/dropwizard/caching/CacheRequestContext.java"}, "focal_method": {"identifier": "getCacheControl", "parameters": "()", "modifiers": "public", "return": "RequestCacheControl", "body": "public RequestCacheControl getCacheControl() {\n        if (_cacheControl == null) {\n            List<String> values = _headers.get(CACHE_CONTROL);\n\n            _cacheControl = RequestCacheControl.DEFAULT;\n\n            if (values != null) {\n                String cacheControlHeader = HttpHeaderUtils.join(values);\n\n                try {\n                    _cacheControl = isNullOrEmpty(cacheControlHeader)\n                            ? RequestCacheControl.DEFAULT\n                            : RequestCacheControl.valueOf(cacheControlHeader);\n                } catch (IllegalArgumentException ex) {\n                    LOG.debug(\"Invalid request cache control header\", ex);\n                }\n            }\n        }\n\n        return _cacheControl;\n    }", "signature": "RequestCacheControl getCacheControl()", "full_signature": "public RequestCacheControl getCacheControl()", "class_method_signature": "CacheRequestContext.getCacheControl()", "testcase": false, "constructor": false, "invocations": ["get", "join", "isNullOrEmpty", "valueOf", "debug"]}, "repository": {"repo_id": 21859706, "url": "https://github.com/bazaarvoice/dropwizard-caching-bundle", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 7, "size": 167, "license": "licensed"}}