{"test_class": {"identifier": "JavaTest", "superclass": "", "interfaces": "", "fields": [], "file": "filter-service-core/src/test/java/cn/leancloud/filter/service/utils/JavaTest.java"}, "test_case": {"identifier": "testJavaVersion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testJavaVersion() {\n        Java.Version v = Java.parseVersion(\"9\");\n        assertThat(v.majorVersion).isEqualTo(9);\n        assertThat(v.minorVersion).isEqualTo(0);\n        assertThat(v.isJava9Compatible()).isTrue();\n\n        v = Java.parseVersion(\"9.0.1\");\n        assertThat(v.majorVersion).isEqualTo(9);\n        assertThat(v.minorVersion).isEqualTo(0);\n        assertThat(v.isJava9Compatible()).isTrue();\n\n        v = Java.parseVersion(\"9.0.0.15\"); // Azul Zulu\n        assertThat(v.majorVersion).isEqualTo(9);\n        assertThat(v.minorVersion).isEqualTo(0);\n        assertThat(v.isJava9Compatible()).isTrue();\n\n        v = Java.parseVersion(\"9.1\");\n        assertThat(v.majorVersion).isEqualTo(9);\n        assertThat(v.minorVersion).isEqualTo(1);\n        assertThat(v.isJava9Compatible()).isTrue();\n\n        v = Java.parseVersion(\"1.8.0_152\");\n        assertThat(v.majorVersion).isEqualTo(1);\n        assertThat(v.minorVersion).isEqualTo(8);\n        assertThat(v.isJava9Compatible()).isFalse();\n\n\n        v = Java.parseVersion(\"1.7.0_80\");\n        assertThat(v.majorVersion).isEqualTo(1);\n        assertThat(v.minorVersion).isEqualTo(7);\n        assertThat(v.isJava9Compatible()).isFalse();\n    }", "signature": "void testJavaVersion()", "full_signature": "@Test public void testJavaVersion()", "class_method_signature": "JavaTest.testJavaVersion()", "testcase": true, "constructor": false, "invocations": ["parseVersion", "isEqualTo", "assertThat", "isEqualTo", "assertThat", "isTrue", "assertThat", "isJava9Compatible", "parseVersion", "isEqualTo", "assertThat", "isEqualTo", "assertThat", "isTrue", "assertThat", "isJava9Compatible", "parseVersion", "isEqualTo", "assertThat", "isEqualTo", "assertThat", "isTrue", "assertThat", "isJava9Compatible", "parseVersion", "isEqualTo", "assertThat", "isEqualTo", "assertThat", "isTrue", "assertThat", "isJava9Compatible", "parseVersion", "isEqualTo", "assertThat", "isEqualTo", "assertThat", "isFalse", "assertThat", "isJava9Compatible", "parseVersion", "isEqualTo", "assertThat", "isEqualTo", "assertThat", "isFalse", "assertThat", "isJava9Compatible"]}, "focal_class": {"identifier": "Java", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Version VERSION = parseVersion(System.getProperty(\"java.specification.version\"));", "modifier": "private static final", "type": "Version", "declarator": "VERSION = parseVersion(System.getProperty(\"java.specification.version\"))", "var_name": "VERSION"}, {"original_string": "public static final boolean IS_JAVA9_COMPATIBLE = VERSION.isJava9Compatible();", "modifier": "public static final", "type": "boolean", "declarator": "IS_JAVA9_COMPATIBLE = VERSION.isJava9Compatible()", "var_name": "IS_JAVA9_COMPATIBLE"}], "methods": [{"identifier": "Java", "parameters": "()", "modifiers": "private", "return": "", "signature": " Java()", "full_signature": "private  Java()", "class_method_signature": "Java.Java()", "testcase": false, "constructor": true}, {"identifier": "parseVersion", "parameters": "(String versionString)", "modifiers": "static", "return": "Version", "signature": "Version parseVersion(String versionString)", "full_signature": "static Version parseVersion(String versionString)", "class_method_signature": "Java.parseVersion(String versionString)", "testcase": false, "constructor": false}], "file": "filter-service-core/src/main/java/cn/leancloud/filter/service/utils/Java.java"}, "focal_method": {"identifier": "parseVersion", "parameters": "(String versionString)", "modifiers": "static", "return": "Version", "body": "static Version parseVersion(String versionString) {\n        final StringTokenizer st = new StringTokenizer(versionString, \".\");\n        int majorVersion = Integer.parseInt(st.nextToken());\n        int minorVersion;\n        if (st.hasMoreTokens())\n            minorVersion = Integer.parseInt(st.nextToken());\n        else\n            minorVersion = 0;\n        return new Version(majorVersion, minorVersion);\n    }", "signature": "Version parseVersion(String versionString)", "full_signature": "static Version parseVersion(String versionString)", "class_method_signature": "Java.parseVersion(String versionString)", "testcase": false, "constructor": false, "invocations": ["parseInt", "nextToken", "hasMoreTokens", "parseInt", "nextToken"]}, "repository": {"repo_id": 217849614, "url": "https://github.com/leancloud/filter-service", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 14, "size": 2797, "license": "licensed"}}