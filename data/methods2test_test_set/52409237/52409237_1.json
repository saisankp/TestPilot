{"test_class": {"identifier": "SegmentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Segment fullSegment;", "modifier": "private static", "type": "Segment", "declarator": "fullSegment", "var_name": "fullSegment"}, {"original_string": "private static Segment maxSegment;", "modifier": "private static", "type": "Segment", "declarator": "maxSegment", "var_name": "maxSegment"}, {"original_string": "private static Segment minSegment;", "modifier": "private static", "type": "Segment", "declarator": "minSegment", "var_name": "minSegment"}], "file": "commons-nlp/src/test/java/com/tqmall/search/commons/nlp/SegmentTest.java"}, "test_case": {"identifier": "segmentTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void segmentTest() {\n        List<String> texts = new ArrayList<>();\n        texts.add(\"Xing-Wang0.5\u5143, \u5927\u9023\u7406\u5de5\u5927\u5b66\u516d\u5341\u5e74\u6821\u5e86, 500\u4eba\u4e0d\u662f\u53c2\u52a0\u534e\u4e2d\u79d1\u6280\u5927\u5b66\");\n        texts.add(\"\u5317\u4eac\u5927\u5b66\");\n        texts.add(\"\u5317\u4eac\u7684\u5927\u5b66\");\n        texts.add(\"\u5546\u54c1\u670d\u52a1\");\n        texts.add(\"\u5546\u54c1\u548c\u670d\u52a1\");\n        texts.add(\"\u5546\u54c1\u548c\u6c0f\u74a7\");\n        texts.add(\"B-tree\u4e2d\u7684\u6bcf\u4e2a\u7ed3\u70b9\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u53ef\u4ee5\u5305\u542b\u5927\u91cf\u7684\u5173\u952e\u5b57\u4fe1\u606f\");\n        texts.add(\"\u4e1c\u65b9\u4e0d\u8d25\u7b11\u50b2\u6c5f\u6e56\u90fd\u662f\u597d\u770b\u7684\u7535\u89c6\u5267\");\n        texts.add(\"\u5546\u54c1\u5171\u548c\u670d\");\n        texts.add(\"\u4e25\u5b88\u4e00\u628a\u624b\u673a\u5173\u4e86\");\n        texts.add(\"\u5409\u6797\u7701\u957f\u6625\u836f\u5e97\");\n        texts.add(\"\u4ee3\u8868\u5317\u5927\u7684\u4eba\u5927\u4ee3\u8868\uff0c\u4ee3\u8868\u4eba\u5927\u7684\u5317\u5927\u535a\u58eb\");\n        texts.add(\"\u6c5f\u9634\u6bdb\u7eba\u7ec7\u5382\");\n        texts.add(\"\u8584\u7199\u6765\u5230\u91cd\u5e86\");\n        texts.add(\"\u5468\u6770\u8f6e\u5468\u6770\u4f26\uff0c\u8303\u4f1f\u9a91\u8303\u73ae\u742a\");\n        texts.add(\"\u7ed3\u5a5a\u7684\u548c\u5c1a\u672a\u7ed3\u5a5a\u7684\");\n        texts.add(\"\u5317\u4eac\u5927\u5b66\u751f\u524d\u6765\u5e94\u8058\");\n        texts.add(\"\u9ad8\u6570\u5b66\u8d77\u6765\u5f88\u96be\");\n        texts.add(\"\u535a\u89c2\u662f\u4ec0\u4e48\u65f6\u5019\u52a0\u5165\u963f\u91cc\u7684\uff1f\");\n        texts.add(\"\u8682\u8681\u91d1\u670d\u7684\u5458\u5de5\u90fd\u5206\u5e03\u5728\u54ea\u4e9b\u5de5\u4f5c\u5730\u70b9\uff1f\");\n        texts.add(\"\u5317\u4eac\u5927\u5b66\u751f\u524d\u6765\u5e94\u8058\");\n        for (String text : texts) {\n            System.out.println(\"text: \" + text);\n            char[] array = text.toCharArray();\n            System.out.println(\"fullSegment: \" + Hits.valueOf(array, fullSegment.match(array, 0, array.length)));\n            System.out.println(\"maxSegment: \" + Hits.valueOf(array, maxSegment.match(array, 0, array.length)));\n            System.out.println(\"minSegment: \" + Hits.valueOf(array, minSegment.match(array, 0, array.length)));\n            break;\n        }\n    }", "signature": "void segmentTest()", "full_signature": "@Test public void segmentTest()", "class_method_signature": "SegmentTest.segmentTest()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "add", "println", "toCharArray", "println", "valueOf", "match", "println", "valueOf", "match", "println", "valueOf", "match"]}, "focal_class": {"identifier": "Segment", "superclass": "extends AbstractTextMatch<TokenType>", "interfaces": "", "fields": [{"original_string": "private final String name;", "modifier": "private final", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private final SegmentFilter segmentFilter;", "modifier": "private final", "type": "SegmentFilter", "declarator": "segmentFilter", "var_name": "segmentFilter"}, {"original_string": "private final AbstractTextMatch<TokenType> asciiAnalyzer;", "modifier": "private final", "type": "AbstractTextMatch<TokenType>", "declarator": "asciiAnalyzer", "var_name": "asciiAnalyzer"}, {"original_string": "private final CjkAnalyzer cjkAnalyzer;", "modifier": "private final", "type": "CjkAnalyzer", "declarator": "cjkAnalyzer", "var_name": "cjkAnalyzer"}, {"original_string": "private final NumQuantifierMerge numQuantifierMerge;", "modifier": "private final", "type": "NumQuantifierMerge", "declarator": "numQuantifierMerge", "var_name": "numQuantifierMerge"}], "methods": [{"identifier": "Segment", "parameters": "(String name, SegmentFilter segmentFilter, AbstractTextMatch<TokenType> asciiAnalyzer,\n            CjkAnalyzer cjkAnalyzer, NumQuantifierMerge numQuantifierMerge)", "modifiers": "", "return": "", "signature": " Segment(String name, SegmentFilter segmentFilter, AbstractTextMatch<TokenType> asciiAnalyzer,\n            CjkAnalyzer cjkAnalyzer, NumQuantifierMerge numQuantifierMerge)", "full_signature": "  Segment(String name, SegmentFilter segmentFilter, AbstractTextMatch<TokenType> asciiAnalyzer,\n            CjkAnalyzer cjkAnalyzer, NumQuantifierMerge numQuantifierMerge)", "class_method_signature": "Segment.Segment(String name, SegmentFilter segmentFilter, AbstractTextMatch<TokenType> asciiAnalyzer,\n            CjkAnalyzer cjkAnalyzer, NumQuantifierMerge numQuantifierMerge)", "testcase": false, "constructor": true}, {"identifier": "match", "parameters": "(final char[] text, final int off, final int len)", "modifiers": "@Override public", "return": "List<Hit<TokenType>>", "signature": "List<Hit<TokenType>> match(final char[] text, final int off, final int len)", "full_signature": "@Override public List<Hit<TokenType>> match(final char[] text, final int off, final int len)", "class_method_signature": "Segment.match(final char[] text, final int off, final int len)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "Segment.getName()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Segment.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Segment.hashCode()", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(String name)", "modifiers": "public static", "return": "Builder", "signature": "Builder build(String name)", "full_signature": "public static Builder build(String name)", "class_method_signature": "Segment.build(String name)", "testcase": false, "constructor": false}], "file": "commons-nlp/src/main/java/com/tqmall/search/commons/nlp/Segment.java"}, "focal_method": {"identifier": "Segment", "parameters": "(String name, SegmentFilter segmentFilter, AbstractTextMatch<TokenType> asciiAnalyzer,\n            CjkAnalyzer cjkAnalyzer, NumQuantifierMerge numQuantifierMerge)", "modifiers": "", "return": "", "body": "Segment(String name, SegmentFilter segmentFilter, AbstractTextMatch<TokenType> asciiAnalyzer,\n            CjkAnalyzer cjkAnalyzer, NumQuantifierMerge numQuantifierMerge) {\n        this.name = name;\n        this.segmentFilter = segmentFilter;\n        this.asciiAnalyzer = asciiAnalyzer;\n        this.cjkAnalyzer = cjkAnalyzer;\n        this.numQuantifierMerge = numQuantifierMerge;\n    }", "signature": " Segment(String name, SegmentFilter segmentFilter, AbstractTextMatch<TokenType> asciiAnalyzer,\n            CjkAnalyzer cjkAnalyzer, NumQuantifierMerge numQuantifierMerge)", "full_signature": "  Segment(String name, SegmentFilter segmentFilter, AbstractTextMatch<TokenType> asciiAnalyzer,\n            CjkAnalyzer cjkAnalyzer, NumQuantifierMerge numQuantifierMerge)", "class_method_signature": "Segment.Segment(String name, SegmentFilter segmentFilter, AbstractTextMatch<TokenType> asciiAnalyzer,\n            CjkAnalyzer cjkAnalyzer, NumQuantifierMerge numQuantifierMerge)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 52409237, "url": "https://github.com/wxingyl/search-commons", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 20, "size": 3165, "license": "licensed"}}