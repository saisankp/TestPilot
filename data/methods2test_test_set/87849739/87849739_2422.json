{"test_class": {"identifier": "ModifyPolicyEntryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final JsonObject KNOWN_JSON = JsonFactory.newObjectBuilder()\n            .set(PolicyCommand.JsonFields.TYPE, ModifyPolicyEntry.TYPE)\n            .set(PolicyCommand.JsonFields.JSON_POLICY_ID, TestConstants.Policy.POLICY_ID.toString())\n            .set(ModifyPolicyEntry.JSON_LABEL, TestConstants.Policy.POLICY_ENTRY.getLabel().toString())\n            .set(ModifyPolicyEntry.JSON_POLICY_ENTRY,\n                    TestConstants.Policy.POLICY_ENTRY.toJson(FieldType.regularOrSpecial()))\n            .build();", "modifier": "private static final", "type": "JsonObject", "declarator": "KNOWN_JSON = JsonFactory.newObjectBuilder()\n            .set(PolicyCommand.JsonFields.TYPE, ModifyPolicyEntry.TYPE)\n            .set(PolicyCommand.JsonFields.JSON_POLICY_ID, TestConstants.Policy.POLICY_ID.toString())\n            .set(ModifyPolicyEntry.JSON_LABEL, TestConstants.Policy.POLICY_ENTRY.getLabel().toString())\n            .set(ModifyPolicyEntry.JSON_POLICY_ENTRY,\n                    TestConstants.Policy.POLICY_ENTRY.toJson(FieldType.regularOrSpecial()))\n            .build()", "var_name": "KNOWN_JSON"}], "file": "signals/commands/policies/src/test/java/org/eclipse/ditto/signals/commands/policies/modify/ModifyPolicyEntryTest.java"}, "test_case": {"identifier": "toJsonReturnsExpected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void toJsonReturnsExpected() {\n        final ModifyPolicyEntry underTest = ModifyPolicyEntry.of(\n                TestConstants.Policy.POLICY_ID, TestConstants.Policy.POLICY_ENTRY, TestConstants.EMPTY_DITTO_HEADERS);\n        final JsonObject actualJson = underTest.toJson(FieldType.regularOrSpecial());\n\n        assertThat(actualJson).isEqualTo(KNOWN_JSON);\n    }", "signature": "void toJsonReturnsExpected()", "full_signature": "@Test public void toJsonReturnsExpected()", "class_method_signature": "ModifyPolicyEntryTest.toJsonReturnsExpected()", "testcase": true, "constructor": false, "invocations": ["of", "toJson", "regularOrSpecial", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "ModifyPolicyEntry", "superclass": "extends AbstractCommand<ModifyPolicyEntry>", "interfaces": "implements PolicyModifyCommand<ModifyPolicyEntry>", "fields": [{"original_string": "public static final String NAME = \"modifyPolicyEntry\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"modifyPolicyEntry\"", "var_name": "NAME"}, {"original_string": "public static final String TYPE = TYPE_PREFIX + NAME;", "modifier": "public static final", "type": "String", "declarator": "TYPE = TYPE_PREFIX + NAME", "var_name": "TYPE"}, {"original_string": "static final JsonFieldDefinition<String> JSON_LABEL =\n            JsonFactory.newStringFieldDefinition(\"label\", FieldType.REGULAR, JsonSchemaVersion.V_2);", "modifier": "static final", "type": "JsonFieldDefinition<String>", "declarator": "JSON_LABEL =\n            JsonFactory.newStringFieldDefinition(\"label\", FieldType.REGULAR, JsonSchemaVersion.V_2)", "var_name": "JSON_LABEL"}, {"original_string": "static final JsonFieldDefinition<JsonObject> JSON_POLICY_ENTRY =\n            JsonFactory.newJsonObjectFieldDefinition(\"policyEntry\", FieldType.REGULAR, JsonSchemaVersion.V_2);", "modifier": "static final", "type": "JsonFieldDefinition<JsonObject>", "declarator": "JSON_POLICY_ENTRY =\n            JsonFactory.newJsonObjectFieldDefinition(\"policyEntry\", FieldType.REGULAR, JsonSchemaVersion.V_2)", "var_name": "JSON_POLICY_ENTRY"}, {"original_string": "private final PolicyId policyId;", "modifier": "private final", "type": "PolicyId", "declarator": "policyId", "var_name": "policyId"}, {"original_string": "private final PolicyEntry policyEntry;", "modifier": "private final", "type": "PolicyEntry", "declarator": "policyEntry", "var_name": "policyEntry"}], "methods": [{"identifier": "ModifyPolicyEntry", "parameters": "(final PolicyId policyId, final PolicyEntry policyEntry, final DittoHeaders dittoHeaders)", "modifiers": "private", "return": "", "signature": " ModifyPolicyEntry(final PolicyId policyId, final PolicyEntry policyEntry, final DittoHeaders dittoHeaders)", "full_signature": "private  ModifyPolicyEntry(final PolicyId policyId, final PolicyEntry policyEntry, final DittoHeaders dittoHeaders)", "class_method_signature": "ModifyPolicyEntry.ModifyPolicyEntry(final PolicyId policyId, final PolicyEntry policyEntry, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(final String policyId, final PolicyEntry policyEntry,\n            final DittoHeaders dittoHeaders)", "modifiers": "@Deprecated public static", "return": "ModifyPolicyEntry", "signature": "ModifyPolicyEntry of(final String policyId, final PolicyEntry policyEntry,\n            final DittoHeaders dittoHeaders)", "full_signature": "@Deprecated public static ModifyPolicyEntry of(final String policyId, final PolicyEntry policyEntry,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "ModifyPolicyEntry.of(final String policyId, final PolicyEntry policyEntry,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final PolicyId policyId, final PolicyEntry policyEntry,\n            final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "ModifyPolicyEntry", "signature": "ModifyPolicyEntry of(final PolicyId policyId, final PolicyEntry policyEntry,\n            final DittoHeaders dittoHeaders)", "full_signature": "public static ModifyPolicyEntry of(final PolicyId policyId, final PolicyEntry policyEntry,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "ModifyPolicyEntry.of(final PolicyId policyId, final PolicyEntry policyEntry,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final String jsonString, final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "ModifyPolicyEntry", "signature": "ModifyPolicyEntry fromJson(final String jsonString, final DittoHeaders dittoHeaders)", "full_signature": "public static ModifyPolicyEntry fromJson(final String jsonString, final DittoHeaders dittoHeaders)", "class_method_signature": "ModifyPolicyEntry.fromJson(final String jsonString, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "modifiers": "public static", "return": "ModifyPolicyEntry", "signature": "ModifyPolicyEntry fromJson(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "full_signature": "public static ModifyPolicyEntry fromJson(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "class_method_signature": "ModifyPolicyEntry.fromJson(final JsonObject jsonObject, final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "getPolicyEntry", "parameters": "()", "modifiers": "public", "return": "PolicyEntry", "signature": "PolicyEntry getPolicyEntry()", "full_signature": "public PolicyEntry getPolicyEntry()", "class_method_signature": "ModifyPolicyEntry.getPolicyEntry()", "testcase": false, "constructor": false}, {"identifier": "getEntityId", "parameters": "()", "modifiers": "@Override public", "return": "PolicyId", "signature": "PolicyId getEntityId()", "full_signature": "@Override public PolicyId getEntityId()", "class_method_signature": "ModifyPolicyEntry.getEntityId()", "testcase": false, "constructor": false}, {"identifier": "getEntity", "parameters": "(final JsonSchemaVersion schemaVersion)", "modifiers": "@Override public", "return": "Optional<JsonValue>", "signature": "Optional<JsonValue> getEntity(final JsonSchemaVersion schemaVersion)", "full_signature": "@Override public Optional<JsonValue> getEntity(final JsonSchemaVersion schemaVersion)", "class_method_signature": "ModifyPolicyEntry.getEntity(final JsonSchemaVersion schemaVersion)", "testcase": false, "constructor": false}, {"identifier": "getResourcePath", "parameters": "()", "modifiers": "@Override public", "return": "JsonPointer", "signature": "JsonPointer getResourcePath()", "full_signature": "@Override public JsonPointer getResourcePath()", "class_method_signature": "ModifyPolicyEntry.getResourcePath()", "testcase": false, "constructor": false}, {"identifier": "appendPayload", "parameters": "(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> thePredicate)", "modifiers": "@Override protected", "return": "void", "signature": "void appendPayload(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> thePredicate)", "full_signature": "@Override protected void appendPayload(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> thePredicate)", "class_method_signature": "ModifyPolicyEntry.appendPayload(final JsonObjectBuilder jsonObjectBuilder, final JsonSchemaVersion schemaVersion,\n            final Predicate<JsonField> thePredicate)", "testcase": false, "constructor": false}, {"identifier": "getCategory", "parameters": "()", "modifiers": "@Override public", "return": "Category", "signature": "Category getCategory()", "full_signature": "@Override public Category getCategory()", "class_method_signature": "ModifyPolicyEntry.getCategory()", "testcase": false, "constructor": false}, {"identifier": "setDittoHeaders", "parameters": "(final DittoHeaders dittoHeaders)", "modifiers": "@Override public", "return": "ModifyPolicyEntry", "signature": "ModifyPolicyEntry setDittoHeaders(final DittoHeaders dittoHeaders)", "full_signature": "@Override public ModifyPolicyEntry setDittoHeaders(final DittoHeaders dittoHeaders)", "class_method_signature": "ModifyPolicyEntry.setDittoHeaders(final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false}, {"identifier": "canEqual", "parameters": "(@Nullable final Object other)", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean canEqual(@Nullable final Object other)", "full_signature": "@Override protected boolean canEqual(@Nullable final Object other)", "class_method_signature": "ModifyPolicyEntry.canEqual(@Nullable final Object other)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable final Object obj)", "modifiers": "@SuppressWarnings(\"squid:MethodCyclomaticComplexity\") @Override public", "return": "boolean", "signature": "boolean equals(@Nullable final Object obj)", "full_signature": "@SuppressWarnings(\"squid:MethodCyclomaticComplexity\") @Override public boolean equals(@Nullable final Object obj)", "class_method_signature": "ModifyPolicyEntry.equals(@Nullable final Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@SuppressWarnings(\"squid:S109\") @Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@SuppressWarnings(\"squid:S109\") @Override public int hashCode()", "class_method_signature": "ModifyPolicyEntry.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ModifyPolicyEntry.toString()", "testcase": false, "constructor": false}], "file": "signals/commands/policies/src/main/java/org/eclipse/ditto/signals/commands/policies/modify/ModifyPolicyEntry.java"}, "focal_method": {"identifier": "of", "parameters": "(final String policyId, final PolicyEntry policyEntry,\n            final DittoHeaders dittoHeaders)", "modifiers": "@Deprecated public static", "return": "ModifyPolicyEntry", "body": "@Deprecated\n    public static ModifyPolicyEntry of(final String policyId, final PolicyEntry policyEntry,\n            final DittoHeaders dittoHeaders) {\n\n        return of(PolicyId.of(policyId), policyEntry, dittoHeaders);\n    }", "signature": "ModifyPolicyEntry of(final String policyId, final PolicyEntry policyEntry,\n            final DittoHeaders dittoHeaders)", "full_signature": "@Deprecated public static ModifyPolicyEntry of(final String policyId, final PolicyEntry policyEntry,\n            final DittoHeaders dittoHeaders)", "class_method_signature": "ModifyPolicyEntry.of(final String policyId, final PolicyEntry policyEntry,\n            final DittoHeaders dittoHeaders)", "testcase": false, "constructor": false, "invocations": ["of", "of"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}