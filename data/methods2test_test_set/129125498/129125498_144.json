{"test_class": {"identifier": "DetectorMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DetectorMapper detectorMapper;", "modifier": "private", "type": "DetectorMapper", "declarator": "detectorMapper", "var_name": "detectorMapper"}, {"original_string": "private int detectorMappingCacheUpdatePeriod = 5;", "modifier": "private", "type": "int", "declarator": "detectorMappingCacheUpdatePeriod = 5", "var_name": "detectorMappingCacheUpdatePeriod"}, {"original_string": "@Mock\n    private DetectorSource detectorSource;", "modifier": "@Mock\n    private", "type": "DetectorSource", "declarator": "detectorSource", "var_name": "detectorSource"}, {"original_string": "@Mock\n    private DetectorMapperCache cache;", "modifier": "@Mock\n    private", "type": "DetectorMapperCache", "declarator": "cache", "var_name": "cache"}, {"original_string": "@Mock\n    private Config config;", "modifier": "@Mock\n    private", "type": "Config", "declarator": "config", "var_name": "config"}, {"original_string": "private List<Map<String, String>> tags = new ArrayList<>();", "modifier": "private", "type": "List<Map<String, String>>", "declarator": "tags = new ArrayList<>()", "var_name": "tags"}, {"original_string": "private List<Map<String, String>> tags_cantRetrieve = new ArrayList<>();", "modifier": "private", "type": "List<Map<String, String>>", "declarator": "tags_cantRetrieve = new ArrayList<>()", "var_name": "tags_cantRetrieve"}, {"original_string": "private List<Map<String, String>> tag_bigList = new ArrayList<>();", "modifier": "private", "type": "List<Map<String, String>>", "declarator": "tag_bigList = new ArrayList<>()", "var_name": "tag_bigList"}, {"original_string": "private List<Map<String, String>> listOfMetricTags;", "modifier": "private", "type": "List<Map<String, String>>", "declarator": "listOfMetricTags", "var_name": "listOfMetricTags"}, {"original_string": "private DetectorMatchResponse detectorMatchResponse;", "modifier": "private", "type": "DetectorMatchResponse", "declarator": "detectorMatchResponse", "var_name": "detectorMatchResponse"}, {"original_string": "private DetectorMatchResponse detectorMatchResponse_withMoreLookupTime;", "modifier": "private", "type": "DetectorMatchResponse", "declarator": "detectorMatchResponse_withMoreLookupTime", "var_name": "detectorMatchResponse_withMoreLookupTime"}, {"original_string": "private DetectorMatchResponse emptyDetectorMatchResponse;", "modifier": "private", "type": "DetectorMatchResponse", "declarator": "emptyDetectorMatchResponse", "var_name": "emptyDetectorMatchResponse"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/mapper/DetectorMapperTest.java"}, "test_case": {"identifier": "isSuccessfulDetectorMappingLookup_fail", "parameters": "()", "modifiers": "@Test(expected = RuntimeException.class) public", "return": "void", "body": "@Test(expected = RuntimeException.class)\n    public void isSuccessfulDetectorMappingLookup_fail() {\n        when(detectorSource.findDetectorMappings(tag_bigList)).thenThrow(new RuntimeException());\n        detectorMapper.isSuccessfulDetectorMappingLookup(tag_bigList);\n    }", "signature": "void isSuccessfulDetectorMappingLookup_fail()", "full_signature": "@Test(expected = RuntimeException.class) public void isSuccessfulDetectorMappingLookup_fail()", "class_method_signature": "DetectorMapperTest.isSuccessfulDetectorMappingLookup_fail()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "findDetectorMappings", "isSuccessfulDetectorMappingLookup"]}, "focal_class": {"identifier": "DetectorMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int OPTIMAL_BATCH_SIZE = 80;", "modifier": "private static final", "type": "int", "declarator": "OPTIMAL_BATCH_SIZE = 80", "var_name": "OPTIMAL_BATCH_SIZE"}, {"original_string": "private static final String CK_DETECTOR_CACHE_UPDATE_PERIOD = \"detector-mapping-cache-update-period\";", "modifier": "private static final", "type": "String", "declarator": "CK_DETECTOR_CACHE_UPDATE_PERIOD = \"detector-mapping-cache-update-period\"", "var_name": "CK_DETECTOR_CACHE_UPDATE_PERIOD"}, {"original_string": "private static final String DETECTOR_MAPPER_ERRORS = \"detector-mapper.exceptions\";", "modifier": "private static final", "type": "String", "declarator": "DETECTOR_MAPPER_ERRORS = \"detector-mapper.exceptions\"", "var_name": "DETECTOR_MAPPER_ERRORS"}, {"original_string": "private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "scheduler = Executors.newSingleThreadScheduledExecutor()", "var_name": "scheduler"}, {"original_string": "private AtomicLong lastElasticLookUpLatency = new AtomicLong(-1);", "modifier": "private", "type": "AtomicLong", "declarator": "lastElasticLookUpLatency = new AtomicLong(-1)", "var_name": "lastElasticLookUpLatency"}, {"original_string": "@Getter\n    @NonNull\n    private DetectorSource detectorSource;", "modifier": "@Getter\n    @NonNull\n    private", "type": "DetectorSource", "declarator": "detectorSource", "var_name": "detectorSource"}, {"original_string": "private DetectorMapperCache cache;", "modifier": "private", "type": "DetectorMapperCache", "declarator": "cache", "var_name": "cache"}, {"original_string": "private Counter exceptionCounter;", "modifier": "private", "type": "Counter", "declarator": "exceptionCounter", "var_name": "exceptionCounter"}, {"original_string": "private int detectorCacheUpdateTimePeriod;", "modifier": "private", "type": "int", "declarator": "detectorCacheUpdateTimePeriod", "var_name": "detectorCacheUpdateTimePeriod"}, {"original_string": "private long syncedUpTillTime = System.currentTimeMillis();", "modifier": "private", "type": "long", "declarator": "syncedUpTillTime = System.currentTimeMillis()", "var_name": "syncedUpTillTime"}], "methods": [{"identifier": "DetectorMapper", "parameters": "(DetectorSource detectorSource, DetectorMapperCache cache, int detectorCacheUpdateTimePeriod)", "modifiers": "public", "return": "", "signature": " DetectorMapper(DetectorSource detectorSource, DetectorMapperCache cache, int detectorCacheUpdateTimePeriod)", "full_signature": "public  DetectorMapper(DetectorSource detectorSource, DetectorMapperCache cache, int detectorCacheUpdateTimePeriod)", "class_method_signature": "DetectorMapper.DetectorMapper(DetectorSource detectorSource, DetectorMapperCache cache, int detectorCacheUpdateTimePeriod)", "testcase": false, "constructor": true}, {"identifier": "DetectorMapper", "parameters": "(DetectorSource detectorSource, Config config, MetricRegistry metricRegistry)", "modifiers": "public", "return": "", "signature": " DetectorMapper(DetectorSource detectorSource, Config config, MetricRegistry metricRegistry)", "full_signature": "public  DetectorMapper(DetectorSource detectorSource, Config config, MetricRegistry metricRegistry)", "class_method_signature": "DetectorMapper.DetectorMapper(DetectorSource detectorSource, Config config, MetricRegistry metricRegistry)", "testcase": false, "constructor": true}, {"identifier": "initScheduler", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initScheduler()", "full_signature": "private void initScheduler()", "class_method_signature": "DetectorMapper.initScheduler()", "testcase": false, "constructor": false}, {"identifier": "optimalBatchSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int optimalBatchSize()", "full_signature": "public int optimalBatchSize()", "class_method_signature": "DetectorMapper.optimalBatchSize()", "testcase": false, "constructor": false}, {"identifier": "getDetectorsFromCache", "parameters": "(MetricDefinition metricDefinition)", "modifiers": "public", "return": "List<Detector>", "signature": "List<Detector> getDetectorsFromCache(MetricDefinition metricDefinition)", "full_signature": "public List<Detector> getDetectorsFromCache(MetricDefinition metricDefinition)", "class_method_signature": "DetectorMapper.getDetectorsFromCache(MetricDefinition metricDefinition)", "testcase": false, "constructor": false}, {"identifier": "isSuccessfulDetectorMappingLookup", "parameters": "(List<Map<String, String>> cacheMissedMetricTags)", "modifiers": "public", "return": "boolean", "signature": "boolean isSuccessfulDetectorMappingLookup(List<Map<String, String>> cacheMissedMetricTags)", "full_signature": "public boolean isSuccessfulDetectorMappingLookup(List<Map<String, String>> cacheMissedMetricTags)", "class_method_signature": "DetectorMapper.isSuccessfulDetectorMappingLookup(List<Map<String, String>> cacheMissedMetricTags)", "testcase": false, "constructor": false}, {"identifier": "detectorMappingCacheSync", "parameters": "(long currentTime)", "modifiers": "public", "return": "void", "signature": "void detectorMappingCacheSync(long currentTime)", "full_signature": "public void detectorMappingCacheSync(long currentTime)", "class_method_signature": "DetectorMapper.detectorMappingCacheSync(long currentTime)", "testcase": false, "constructor": false}, {"identifier": "getMappingsFromElasticSearch", "parameters": "(List<Map<String, String>> cacheMissedMetricTags)", "modifiers": "private", "return": "DetectorMatchResponse", "signature": "DetectorMatchResponse getMappingsFromElasticSearch(List<Map<String, String>> cacheMissedMetricTags)", "full_signature": "private DetectorMatchResponse getMappingsFromElasticSearch(List<Map<String, String>> cacheMissedMetricTags)", "class_method_signature": "DetectorMapper.getMappingsFromElasticSearch(List<Map<String, String>> cacheMissedMetricTags)", "testcase": false, "constructor": false}, {"identifier": "populateCache", "parameters": "(Map<Integer, List<Detector>> groupedDetectorsByIndex, List<Map<String, String>> cacheMissedMetricTags)", "modifiers": "private", "return": "void", "signature": "void populateCache(Map<Integer, List<Detector>> groupedDetectorsByIndex, List<Map<String, String>> cacheMissedMetricTags)", "full_signature": "private void populateCache(Map<Integer, List<Detector>> groupedDetectorsByIndex, List<Map<String, String>> cacheMissedMetricTags)", "class_method_signature": "DetectorMapper.populateCache(Map<Integer, List<Detector>> groupedDetectorsByIndex, List<Map<String, String>> cacheMissedMetricTags)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/mapper/DetectorMapper.java"}, "focal_method": {"identifier": "isSuccessfulDetectorMappingLookup", "parameters": "(List<Map<String, String>> cacheMissedMetricTags)", "modifiers": "public", "return": "boolean", "body": "public boolean isSuccessfulDetectorMappingLookup(List<Map<String, String>> cacheMissedMetricTags) {\n\n        DetectorMatchResponse matchingDetectorMappings = getMappingsFromElasticSearch(cacheMissedMetricTags);\n        if (matchingDetectorMappings != null) {\n            lastElasticLookUpLatency.set(matchingDetectorMappings.getLookupTimeInMillis());\n            Map<Integer, List<Detector>> groupedDetectorsByIndex = matchingDetectorMappings.getGroupedDetectorsBySearchIndex();\n            populateCache(groupedDetectorsByIndex, cacheMissedMetricTags);\n            Set<Integer> searchIndexes = groupedDetectorsByIndex.keySet();\n\n            //For metrics with no matching detectors, set matching detectors to empty in cache to avoid repeated cache miss\n            int i = 0;\n            for (Map<String, String> tags : cacheMissedMetricTags) {\n                if (!searchIndexes.contains(i)) {\n                    String cacheKey = CacheUtil.getKey(tags);\n                    cache.put(cacheKey, Collections.emptyList());\n                }\n                i++;\n            }\n        } else {\n            lastElasticLookUpLatency.set(-2);\n        }\n        return matchingDetectorMappings != null;\n    }", "signature": "boolean isSuccessfulDetectorMappingLookup(List<Map<String, String>> cacheMissedMetricTags)", "full_signature": "public boolean isSuccessfulDetectorMappingLookup(List<Map<String, String>> cacheMissedMetricTags)", "class_method_signature": "DetectorMapper.isSuccessfulDetectorMappingLookup(List<Map<String, String>> cacheMissedMetricTags)", "testcase": false, "constructor": false, "invocations": ["getMappingsFromElasticSearch", "set", "getLookupTimeInMillis", "getGroupedDetectorsBySearchIndex", "populateCache", "keySet", "contains", "getKey", "put", "emptyList", "set"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}