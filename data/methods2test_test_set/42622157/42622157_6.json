{"test_class": {"identifier": "CopybaraGeneratorTest", "superclass": "extends TestWithGitBackedRepository", "interfaces": "", "fields": [], "file": "org.eclipse.winery.tools.copybaragenerator/src/test/java/org/eclipse/winery/tools/copybaragenerator/CopybaraGeneratorTest.java"}, "test_case": {"identifier": "generatedOriginFilesConfigHasCorrectStrings", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void generatedOriginFilesConfigHasCorrectStrings() throws Exception {\n        // we use the commit 4b218e6 instead of origin/plain, because the number of definitions changes fast\n        this.setRevisionTo(\"4b218e6\");\n        CopybaraGenerator copybaraGenerator = new CopybaraGenerator();\n        String config = copybaraGenerator.generateOriginFilesConfig();\n        assertEquals(\"origin_files = glob([\\\"README.md\\\", \\\"LICENSE\\\", \\\"artifacttemplates/http%3A%2F%2Fplain.winery.opentosca.org%2Fartifacttemplates/ArtifactTemplateWithFilesAndSources-ArtifactTypeWithoutProperties/**\\\",\\n\" +\n            \"        \\\"artifacttemplates/http%3A%2F%2Fplain.winery.opentosca.org%2Fartifacttemplates/ArtifactTemplateWithoutAnyFiles-ArtifactTypeWithoutProperties/**\\\"]),\", config);\n    }", "signature": "void generatedOriginFilesConfigHasCorrectStrings()", "full_signature": "@Test public void generatedOriginFilesConfigHasCorrectStrings()", "class_method_signature": "CopybaraGeneratorTest.generatedOriginFilesConfigHasCorrectStrings()", "testcase": true, "constructor": false, "invocations": ["setRevisionTo", "generateOriginFilesConfig", "assertEquals"]}, "focal_class": {"identifier": "CopybaraGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(CopybaraGenerator.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(CopybaraGenerator.class)", "var_name": "LOGGER"}, {"original_string": "private final IRepository repository;", "modifier": "private final", "type": "IRepository", "declarator": "repository", "var_name": "repository"}], "methods": [{"identifier": "CopybaraGenerator", "parameters": "()", "modifiers": "public", "return": "", "signature": " CopybaraGenerator()", "full_signature": "public  CopybaraGenerator()", "class_method_signature": "CopybaraGenerator.CopybaraGenerator()", "testcase": false, "constructor": true}, {"identifier": "CopybaraGenerator", "parameters": "(IRepository repository)", "modifiers": "public", "return": "", "signature": " CopybaraGenerator(IRepository repository)", "full_signature": "public  CopybaraGenerator(IRepository repository)", "class_method_signature": "CopybaraGenerator.CopybaraGenerator(IRepository repository)", "testcase": false, "constructor": true}, {"identifier": "generateOriginFilesConfig", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String generateOriginFilesConfig()", "full_signature": "public String generateOriginFilesConfig()", "class_method_signature": "CopybaraGenerator.generateOriginFilesConfig()", "testcase": false, "constructor": false}, {"identifier": "generateCopybaraConfigFile", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String generateCopybaraConfigFile()", "full_signature": "public String generateCopybaraConfigFile()", "class_method_signature": "CopybaraGenerator.generateCopybaraConfigFile()", "testcase": false, "constructor": false}, {"identifier": "generateCopybaraConfigFile", "parameters": "(Path targetFile)", "modifiers": "public", "return": "void", "signature": "void generateCopybaraConfigFile(Path targetFile)", "full_signature": "public void generateCopybaraConfigFile(Path targetFile)", "class_method_signature": "CopybaraGenerator.generateCopybaraConfigFile(Path targetFile)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.tools.copybaragenerator/src/main/java/org/eclipse/winery/tools/copybaragenerator/CopybaraGenerator.java"}, "focal_method": {"identifier": "generateOriginFilesConfig", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String generateOriginFilesConfig() {\n        SortedSet<DefinitionsChildId> allDefinitionsChildIds = repository.getAllDefinitionsChildIds();\n        return allDefinitionsChildIds.stream()\n            .filter(id -> {\n                RepositoryFileReference repositoryFileReference = new RepositoryFileReference(id, Constants.LICENSE_FILE_NAME);\n                if (!repository.exists(repositoryFileReference)) {\n                    return false;\n                }\n                try (InputStream inputStream = repository.newInputStream(repositoryFileReference)) {\n                    // we put the whole license file text into a string and check if it starts with \"Apache License\" after\n                    // trimming it\n                    final String licenceString = \"Apache License\";\n                    String fileAsString = IOUtils.toString(inputStream);\n\n                    return fileAsString.trim().startsWith(licenceString);\n                } catch (IOException e) {\n                    LOGGER.error(\"Could not create input stream for {}\", repositoryFileReference.toString(), e);\n                    return false;\n                }\n            })\n            .map(id -> BackendUtils.getPathInsideRepo(id))\n            .collect(Collectors.joining(\"**\\\",\\n        \\\"\", \"origin_files = glob([\\\"README.md\\\", \\\"LICENSE\\\", \\\"\", \"**\\\"]),\"));\n    }", "signature": "String generateOriginFilesConfig()", "full_signature": "public String generateOriginFilesConfig()", "class_method_signature": "CopybaraGenerator.generateOriginFilesConfig()", "testcase": false, "constructor": false, "invocations": ["getAllDefinitionsChildIds", "collect", "map", "filter", "stream", "exists", "newInputStream", "toString", "startsWith", "trim", "error", "toString", "getPathInsideRepo", "joining"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}