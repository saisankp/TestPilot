{"test_class": {"identifier": "MetricFunctionsReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "metrics/src/test/java/com/expedia/adaptivealerting/metrics/functions/source/MetricFunctionsReaderTest.java"}, "test_case": {"identifier": "testReadFromInputFileException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadFromInputFileException() throws Exception {\n        val invalidFileName = \"config/no-such-file-test.txt\";\n        List<MetricFunctionsSpec> metricFunctionsSpecList = MetricFunctionsReader.readFromInputFile(invalidFileName);\n        if (metricFunctionsSpecList.isEmpty()) {\n            log.error(\"Exception reading input file, exiting\");\n        }\n    }", "signature": "void testReadFromInputFileException()", "full_signature": "@Test public void testReadFromInputFileException()", "class_method_signature": "MetricFunctionsReaderTest.testReadFromInputFileException()", "testcase": true, "constructor": false, "invocations": ["readFromInputFile", "isEmpty", "error"]}, "focal_class": {"identifier": "MetricFunctionsReader", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "readFromInputFile", "parameters": "(String InputFilename)", "modifiers": "public static", "return": "List<MetricFunctionsSpec>", "signature": "List<MetricFunctionsSpec> readFromInputFile(String InputFilename)", "full_signature": "public static List<MetricFunctionsSpec> readFromInputFile(String InputFilename)", "class_method_signature": "MetricFunctionsReader.readFromInputFile(String InputFilename)", "testcase": false, "constructor": false}], "file": "metrics/src/main/java/com/expedia/adaptivealerting/metrics/functions/source/MetricFunctionsReader.java"}, "focal_method": {"identifier": "readFromInputFile", "parameters": "(String InputFilename)", "modifiers": "public static", "return": "List<MetricFunctionsSpec>", "body": "public static List<MetricFunctionsSpec> readFromInputFile(String InputFilename) {\n        List<MetricFunctionsSpec> metricFunctionSpecList = new ArrayList<>();\n        try {\n            InputStream inputStream = new FileInputStream(InputFilename);\n            InputStreamReader streamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n            BufferedReader bufferedReader = new BufferedReader(streamReader);\n            String metricFunctionSpecString;\n            while ((metricFunctionSpecString = bufferedReader.readLine()) != null) {\n                ObjectMapper objectMapper = new ObjectMapper();\n                metricFunctionSpecList.add(objectMapper.readValue(metricFunctionSpecString, MetricFunctionsSpec.class));\n            }\n            bufferedReader.close();\n        } catch (Exception e) {\n            log.error(\"Exception while reading input functions definition\", e);\n        }\n        return metricFunctionSpecList;\n    }", "signature": "List<MetricFunctionsSpec> readFromInputFile(String InputFilename)", "full_signature": "public static List<MetricFunctionsSpec> readFromInputFile(String InputFilename)", "class_method_signature": "MetricFunctionsReader.readFromInputFile(String InputFilename)", "testcase": false, "constructor": false, "invocations": ["readLine", "add", "readValue", "close", "error"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}