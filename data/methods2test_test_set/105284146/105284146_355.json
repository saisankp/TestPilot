{"test_class": {"identifier": "UcteImporterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException exceptionRule = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "exceptionRule = ExpectedException.none()", "var_name": "exceptionRule"}], "file": "ucte/ucte-converter/src/test/java/com/powsybl/ucte/converter/UcteImporterTest.java"}, "test_case": {"identifier": "lineAndTransformerSameId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void lineAndTransformerSameId() {\n        ReadOnlyDataSource dataSource = new ResourceDataSource(\"sameId\", new ResourceSet(\"/\", \"sameId.uct\"));\n\n        Network network = new UcteImporter().importData(dataSource, null);\n\n        assertEquals(0, network.getLineCount());\n        assertEquals(1, network.getTwoWindingsTransformerCount());\n        assertEquals(1, network.getSwitchStream().count());\n    }", "signature": "void lineAndTransformerSameId()", "full_signature": "@Test public void lineAndTransformerSameId()", "class_method_signature": "UcteImporterTest.lineAndTransformerSameId()", "testcase": true, "constructor": false, "invocations": ["importData", "assertEquals", "getLineCount", "assertEquals", "getTwoWindingsTransformerCount", "assertEquals", "count", "getSwitchStream"]}, "focal_class": {"identifier": "UcteImporter", "superclass": "", "interfaces": "implements Importer", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(UcteImporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(UcteImporter.class)", "var_name": "LOGGER"}, {"original_string": "private static final float LINE_MIN_Z = 0.05f;", "modifier": "private static final", "type": "float", "declarator": "LINE_MIN_Z = 0.05f", "var_name": "LINE_MIN_Z"}, {"original_string": "private static final String[] EXTENSIONS = {\"uct\", \"UCT\"};", "modifier": "private static final", "type": "String[]", "declarator": "EXTENSIONS = {\"uct\", \"UCT\"}", "var_name": "EXTENSIONS"}], "methods": [{"identifier": "getConductance", "parameters": "(UcteTransformer ucteTransfo)", "modifiers": "private static", "return": "float", "signature": "float getConductance(UcteTransformer ucteTransfo)", "full_signature": "private static float getConductance(UcteTransformer ucteTransfo)", "class_method_signature": "UcteImporter.getConductance(UcteTransformer ucteTransfo)", "testcase": false, "constructor": false}, {"identifier": "getSusceptance", "parameters": "(UcteElement ucteElement)", "modifiers": "private static", "return": "float", "signature": "float getSusceptance(UcteElement ucteElement)", "full_signature": "private static float getSusceptance(UcteElement ucteElement)", "class_method_signature": "UcteImporter.getSusceptance(UcteElement ucteElement)", "testcase": false, "constructor": false}, {"identifier": "isFictitious", "parameters": "(UcteElement ucteElement)", "modifiers": "private static", "return": "boolean", "signature": "boolean isFictitious(UcteElement ucteElement)", "full_signature": "private static boolean isFictitious(UcteElement ucteElement)", "class_method_signature": "UcteImporter.isFictitious(UcteElement ucteElement)", "testcase": false, "constructor": false}, {"identifier": "isFictitious", "parameters": "(UcteNode ucteNode)", "modifiers": "private static", "return": "boolean", "signature": "boolean isFictitious(UcteNode ucteNode)", "full_signature": "private static boolean isFictitious(UcteNode ucteNode)", "class_method_signature": "UcteImporter.isFictitious(UcteNode ucteNode)", "testcase": false, "constructor": false}, {"identifier": "getRegionalGeographicalCode", "parameters": "(Substation substation)", "modifiers": "private static", "return": "EntsoeGeographicalCode", "signature": "EntsoeGeographicalCode getRegionalGeographicalCode(Substation substation)", "full_signature": "private static EntsoeGeographicalCode getRegionalGeographicalCode(Substation substation)", "class_method_signature": "UcteImporter.getRegionalGeographicalCode(Substation substation)", "testcase": false, "constructor": false}, {"identifier": "createBuses", "parameters": "(UcteNetworkExt ucteNetwork, UcteVoltageLevel ucteVoltageLevel, VoltageLevel voltageLevel)", "modifiers": "private static", "return": "void", "signature": "void createBuses(UcteNetworkExt ucteNetwork, UcteVoltageLevel ucteVoltageLevel, VoltageLevel voltageLevel)", "full_signature": "private static void createBuses(UcteNetworkExt ucteNetwork, UcteVoltageLevel ucteVoltageLevel, VoltageLevel voltageLevel)", "class_method_signature": "UcteImporter.createBuses(UcteNetworkExt ucteNetwork, UcteVoltageLevel ucteVoltageLevel, VoltageLevel voltageLevel)", "testcase": false, "constructor": false}, {"identifier": "createBuses", "parameters": "(UcteNetworkExt ucteNetwork, Network network)", "modifiers": "private static", "return": "void", "signature": "void createBuses(UcteNetworkExt ucteNetwork, Network network)", "full_signature": "private static void createBuses(UcteNetworkExt ucteNetwork, Network network)", "class_method_signature": "UcteImporter.createBuses(UcteNetworkExt ucteNetwork, Network network)", "testcase": false, "constructor": false}, {"identifier": "isValueValid", "parameters": "(float value)", "modifiers": "private static", "return": "boolean", "signature": "boolean isValueValid(float value)", "full_signature": "private static boolean isValueValid(float value)", "class_method_signature": "UcteImporter.isValueValid(float value)", "testcase": false, "constructor": false}, {"identifier": "createLoad", "parameters": "(UcteNode ucteNode, VoltageLevel voltageLevel, Bus bus)", "modifiers": "private static", "return": "void", "signature": "void createLoad(UcteNode ucteNode, VoltageLevel voltageLevel, Bus bus)", "full_signature": "private static void createLoad(UcteNode ucteNode, VoltageLevel voltageLevel, Bus bus)", "class_method_signature": "UcteImporter.createLoad(UcteNode ucteNode, VoltageLevel voltageLevel, Bus bus)", "testcase": false, "constructor": false}, {"identifier": "createGenerator", "parameters": "(UcteNode ucteNode, VoltageLevel voltageLevel, Bus bus)", "modifiers": "private static", "return": "void", "signature": "void createGenerator(UcteNode ucteNode, VoltageLevel voltageLevel, Bus bus)", "full_signature": "private static void createGenerator(UcteNode ucteNode, VoltageLevel voltageLevel, Bus bus)", "class_method_signature": "UcteImporter.createGenerator(UcteNode ucteNode, VoltageLevel voltageLevel, Bus bus)", "testcase": false, "constructor": false}, {"identifier": "createDanglingLine", "parameters": "(UcteLine ucteLine, boolean connected,\n                                           UcteNode xnode, UcteNodeCode nodeCode, UcteVoltageLevel ucteVoltageLevel,\n                                           Network network)", "modifiers": "private static", "return": "void", "signature": "void createDanglingLine(UcteLine ucteLine, boolean connected,\n                                           UcteNode xnode, UcteNodeCode nodeCode, UcteVoltageLevel ucteVoltageLevel,\n                                           Network network)", "full_signature": "private static void createDanglingLine(UcteLine ucteLine, boolean connected,\n                                           UcteNode xnode, UcteNodeCode nodeCode, UcteVoltageLevel ucteVoltageLevel,\n                                           Network network)", "class_method_signature": "UcteImporter.createDanglingLine(UcteLine ucteLine, boolean connected,\n                                           UcteNode xnode, UcteNodeCode nodeCode, UcteVoltageLevel ucteVoltageLevel,\n                                           Network network)", "testcase": false, "constructor": false}, {"identifier": "createCoupler", "parameters": "(UcteNetworkExt ucteNetwork, Network network,\n                                      UcteLine ucteLine,\n                                      UcteNodeCode nodeCode1, UcteNodeCode nodeCode2,\n                                      UcteVoltageLevel ucteVoltageLevel1, UcteVoltageLevel ucteVoltageLevel2)", "modifiers": "private static", "return": "void", "signature": "void createCoupler(UcteNetworkExt ucteNetwork, Network network,\n                                      UcteLine ucteLine,\n                                      UcteNodeCode nodeCode1, UcteNodeCode nodeCode2,\n                                      UcteVoltageLevel ucteVoltageLevel1, UcteVoltageLevel ucteVoltageLevel2)", "full_signature": "private static void createCoupler(UcteNetworkExt ucteNetwork, Network network,\n                                      UcteLine ucteLine,\n                                      UcteNodeCode nodeCode1, UcteNodeCode nodeCode2,\n                                      UcteVoltageLevel ucteVoltageLevel1, UcteVoltageLevel ucteVoltageLevel2)", "class_method_signature": "UcteImporter.createCoupler(UcteNetworkExt ucteNetwork, Network network,\n                                      UcteLine ucteLine,\n                                      UcteNodeCode nodeCode1, UcteNodeCode nodeCode2,\n                                      UcteVoltageLevel ucteVoltageLevel1, UcteVoltageLevel ucteVoltageLevel2)", "testcase": false, "constructor": false}, {"identifier": "createCouplerFromLowImpedanceLine", "parameters": "(Network network, UcteLine ucteLine,\n                                                          UcteNodeCode nodeCode1, UcteNodeCode nodeCode2,\n                                                          UcteVoltageLevel ucteVoltageLevel1, UcteVoltageLevel ucteVoltageLevel2,\n                                                          boolean connected, double z)", "modifiers": "private static", "return": "void", "signature": "void createCouplerFromLowImpedanceLine(Network network, UcteLine ucteLine,\n                                                          UcteNodeCode nodeCode1, UcteNodeCode nodeCode2,\n                                                          UcteVoltageLevel ucteVoltageLevel1, UcteVoltageLevel ucteVoltageLevel2,\n                                                          boolean connected, double z)", "full_signature": "private static void createCouplerFromLowImpedanceLine(Network network, UcteLine ucteLine,\n                                                          UcteNodeCode nodeCode1, UcteNodeCode nodeCode2,\n                                                          UcteVoltageLevel ucteVoltageLevel1, UcteVoltageLevel ucteVoltageLevel2,\n                                                          boolean connected, double z)", "class_method_signature": "UcteImporter.createCouplerFromLowImpedanceLine(Network network, UcteLine ucteLine,\n                                                          UcteNodeCode nodeCode1, UcteNodeCode nodeCode2,\n                                                          UcteVoltageLevel ucteVoltageLevel1, UcteVoltageLevel ucteVoltageLevel2,\n                                                          boolean connected, double z)", "testcase": false, "constructor": false}, {"identifier": "createStandardLine", "parameters": "(Network network, UcteLine ucteLine, UcteNodeCode nodeCode1, UcteNodeCode nodeCode2,\n                                           UcteVoltageLevel ucteVoltageLevel1, UcteVoltageLevel ucteVoltageLevel2,\n                                           boolean connected)", "modifiers": "private static", "return": "void", "signature": "void createStandardLine(Network network, UcteLine ucteLine, UcteNodeCode nodeCode1, UcteNodeCode nodeCode2,\n                                           UcteVoltageLevel ucteVoltageLevel1, UcteVoltageLevel ucteVoltageLevel2,\n                                           boolean connected)", "full_signature": "private static void createStandardLine(Network network, UcteLine ucteLine, UcteNodeCode nodeCode1, UcteNodeCode nodeCode2,\n                                           UcteVoltageLevel ucteVoltageLevel1, UcteVoltageLevel ucteVoltageLevel2,\n                                           boolean connected)", "class_method_signature": "UcteImporter.createStandardLine(Network network, UcteLine ucteLine, UcteNodeCode nodeCode1, UcteNodeCode nodeCode2,\n                                           UcteVoltageLevel ucteVoltageLevel1, UcteVoltageLevel ucteVoltageLevel2,\n                                           boolean connected)", "testcase": false, "constructor": false}, {"identifier": "createLine", "parameters": "(UcteNetworkExt ucteNetwork, Network network,\n                                   UcteLine ucteLine,\n                                   UcteNodeCode nodeCode1, UcteNodeCode nodeCode2,\n                                   UcteVoltageLevel ucteVoltageLevel1, UcteVoltageLevel ucteVoltageLevel2)", "modifiers": "private static", "return": "void", "signature": "void createLine(UcteNetworkExt ucteNetwork, Network network,\n                                   UcteLine ucteLine,\n                                   UcteNodeCode nodeCode1, UcteNodeCode nodeCode2,\n                                   UcteVoltageLevel ucteVoltageLevel1, UcteVoltageLevel ucteVoltageLevel2)", "full_signature": "private static void createLine(UcteNetworkExt ucteNetwork, Network network,\n                                   UcteLine ucteLine,\n                                   UcteNodeCode nodeCode1, UcteNodeCode nodeCode2,\n                                   UcteVoltageLevel ucteVoltageLevel1, UcteVoltageLevel ucteVoltageLevel2)", "class_method_signature": "UcteImporter.createLine(UcteNetworkExt ucteNetwork, Network network,\n                                   UcteLine ucteLine,\n                                   UcteNodeCode nodeCode1, UcteNodeCode nodeCode2,\n                                   UcteVoltageLevel ucteVoltageLevel1, UcteVoltageLevel ucteVoltageLevel2)", "testcase": false, "constructor": false}, {"identifier": "createLines", "parameters": "(UcteNetworkExt ucteNetwork, Network network)", "modifiers": "private static", "return": "void", "signature": "void createLines(UcteNetworkExt ucteNetwork, Network network)", "full_signature": "private static void createLines(UcteNetworkExt ucteNetwork, Network network)", "class_method_signature": "UcteImporter.createLines(UcteNetworkExt ucteNetwork, Network network)", "testcase": false, "constructor": false}, {"identifier": "createRatioTapChanger", "parameters": "(UctePhaseRegulation uctePhaseRegulation, TwoWindingsTransformer transformer)", "modifiers": "private static", "return": "void", "signature": "void createRatioTapChanger(UctePhaseRegulation uctePhaseRegulation, TwoWindingsTransformer transformer)", "full_signature": "private static void createRatioTapChanger(UctePhaseRegulation uctePhaseRegulation, TwoWindingsTransformer transformer)", "class_method_signature": "UcteImporter.createRatioTapChanger(UctePhaseRegulation uctePhaseRegulation, TwoWindingsTransformer transformer)", "testcase": false, "constructor": false}, {"identifier": "createPhaseTapChanger", "parameters": "(UcteAngleRegulation ucteAngleRegulation, TwoWindingsTransformer transformer)", "modifiers": "private static", "return": "void", "signature": "void createPhaseTapChanger(UcteAngleRegulation ucteAngleRegulation, TwoWindingsTransformer transformer)", "full_signature": "private static void createPhaseTapChanger(UcteAngleRegulation ucteAngleRegulation, TwoWindingsTransformer transformer)", "class_method_signature": "UcteImporter.createPhaseTapChanger(UcteAngleRegulation ucteAngleRegulation, TwoWindingsTransformer transformer)", "testcase": false, "constructor": false}, {"identifier": "createXnodeTransfo", "parameters": "(UcteNetworkExt ucteNetwork, UcteTransformer ucteTransfo, boolean connected,\n                                                             UcteNodeCode xNodeCode, UcteNodeCode ucteOtherNodeCode, UcteVoltageLevel ucteOtherVoltageLevel,\n                                                             Substation substation, EntsoeFileName ucteFileName)", "modifiers": "private static", "return": "TwoWindingsTransformer", "signature": "TwoWindingsTransformer createXnodeTransfo(UcteNetworkExt ucteNetwork, UcteTransformer ucteTransfo, boolean connected,\n                                                             UcteNodeCode xNodeCode, UcteNodeCode ucteOtherNodeCode, UcteVoltageLevel ucteOtherVoltageLevel,\n                                                             Substation substation, EntsoeFileName ucteFileName)", "full_signature": "private static TwoWindingsTransformer createXnodeTransfo(UcteNetworkExt ucteNetwork, UcteTransformer ucteTransfo, boolean connected,\n                                                             UcteNodeCode xNodeCode, UcteNodeCode ucteOtherNodeCode, UcteVoltageLevel ucteOtherVoltageLevel,\n                                                             Substation substation, EntsoeFileName ucteFileName)", "class_method_signature": "UcteImporter.createXnodeTransfo(UcteNetworkExt ucteNetwork, UcteTransformer ucteTransfo, boolean connected,\n                                                             UcteNodeCode xNodeCode, UcteNodeCode ucteOtherNodeCode, UcteVoltageLevel ucteOtherVoltageLevel,\n                                                             Substation substation, EntsoeFileName ucteFileName)", "testcase": false, "constructor": false}, {"identifier": "isConnected", "parameters": "(UcteElement ucteElement)", "modifiers": "private static", "return": "boolean", "signature": "boolean isConnected(UcteElement ucteElement)", "full_signature": "private static boolean isConnected(UcteElement ucteElement)", "class_method_signature": "UcteImporter.isConnected(UcteElement ucteElement)", "testcase": false, "constructor": false}, {"identifier": "addTapChangers", "parameters": "(UcteNetworkExt ucteNetwork, UcteTransformer ucteTransfo, TwoWindingsTransformer transformer)", "modifiers": "private static", "return": "void", "signature": "void addTapChangers(UcteNetworkExt ucteNetwork, UcteTransformer ucteTransfo, TwoWindingsTransformer transformer)", "full_signature": "private static void addTapChangers(UcteNetworkExt ucteNetwork, UcteTransformer ucteTransfo, TwoWindingsTransformer transformer)", "class_method_signature": "UcteImporter.addTapChangers(UcteNetworkExt ucteNetwork, UcteTransformer ucteTransfo, TwoWindingsTransformer transformer)", "testcase": false, "constructor": false}, {"identifier": "createTransformers", "parameters": "(UcteNetworkExt ucteNetwork, Network network, EntsoeFileName ucteFileName)", "modifiers": "private static", "return": "void", "signature": "void createTransformers(UcteNetworkExt ucteNetwork, Network network, EntsoeFileName ucteFileName)", "full_signature": "private static void createTransformers(UcteNetworkExt ucteNetwork, Network network, EntsoeFileName ucteFileName)", "class_method_signature": "UcteImporter.createTransformers(UcteNetworkExt ucteNetwork, Network network, EntsoeFileName ucteFileName)", "testcase": false, "constructor": false}, {"identifier": "getBusId", "parameters": "(Bus bus)", "modifiers": "private static", "return": "String", "signature": "String getBusId(Bus bus)", "full_signature": "private static String getBusId(Bus bus)", "class_method_signature": "UcteImporter.getBusId(Bus bus)", "testcase": false, "constructor": false}, {"identifier": "getMatchingDanglingLine", "parameters": "(DanglingLine dl1, Multimap<String, DanglingLine> danglingLinesByXnodeCode)", "modifiers": "private static", "return": "DanglingLine", "signature": "DanglingLine getMatchingDanglingLine(DanglingLine dl1, Multimap<String, DanglingLine> danglingLinesByXnodeCode)", "full_signature": "private static DanglingLine getMatchingDanglingLine(DanglingLine dl1, Multimap<String, DanglingLine> danglingLinesByXnodeCode)", "class_method_signature": "UcteImporter.getMatchingDanglingLine(DanglingLine dl1, Multimap<String, DanglingLine> danglingLinesByXnodeCode)", "testcase": false, "constructor": false}, {"identifier": "addElementNameProperty", "parameters": "(TieLine tieLine, DanglingLine dl1, DanglingLine dl2)", "modifiers": "private static", "return": "void", "signature": "void addElementNameProperty(TieLine tieLine, DanglingLine dl1, DanglingLine dl2)", "full_signature": "private static void addElementNameProperty(TieLine tieLine, DanglingLine dl1, DanglingLine dl2)", "class_method_signature": "UcteImporter.addElementNameProperty(TieLine tieLine, DanglingLine dl1, DanglingLine dl2)", "testcase": false, "constructor": false}, {"identifier": "addElementNameProperty", "parameters": "(UcteElement ucteElement, Identifiable identifiable)", "modifiers": "private static", "return": "void", "signature": "void addElementNameProperty(UcteElement ucteElement, Identifiable identifiable)", "full_signature": "private static void addElementNameProperty(UcteElement ucteElement, Identifiable identifiable)", "class_method_signature": "UcteImporter.addElementNameProperty(UcteElement ucteElement, Identifiable identifiable)", "testcase": false, "constructor": false}, {"identifier": "addCurrentLimitProperty", "parameters": "(UcteLine ucteLine, Switch aSwitch)", "modifiers": "private static", "return": "void", "signature": "void addCurrentLimitProperty(UcteLine ucteLine, Switch aSwitch)", "full_signature": "private static void addCurrentLimitProperty(UcteLine ucteLine, Switch aSwitch)", "class_method_signature": "UcteImporter.addCurrentLimitProperty(UcteLine ucteLine, Switch aSwitch)", "testcase": false, "constructor": false}, {"identifier": "addGeographicalNameProperty", "parameters": "(UcteNode ucteNode, Identifiable identifiable)", "modifiers": "private static", "return": "void", "signature": "void addGeographicalNameProperty(UcteNode ucteNode, Identifiable identifiable)", "full_signature": "private static void addGeographicalNameProperty(UcteNode ucteNode, Identifiable identifiable)", "class_method_signature": "UcteImporter.addGeographicalNameProperty(UcteNode ucteNode, Identifiable identifiable)", "testcase": false, "constructor": false}, {"identifier": "addGeographicalNameProperty", "parameters": "(UcteNetwork ucteNetwork, TieLine tieLine, DanglingLine dl1, DanglingLine dl2)", "modifiers": "private static", "return": "void", "signature": "void addGeographicalNameProperty(UcteNetwork ucteNetwork, TieLine tieLine, DanglingLine dl1, DanglingLine dl2)", "full_signature": "private static void addGeographicalNameProperty(UcteNetwork ucteNetwork, TieLine tieLine, DanglingLine dl1, DanglingLine dl2)", "class_method_signature": "UcteImporter.addGeographicalNameProperty(UcteNetwork ucteNetwork, TieLine tieLine, DanglingLine dl1, DanglingLine dl2)", "testcase": false, "constructor": false}, {"identifier": "addOrderCodeProperty", "parameters": "(UcteLine ucteLine, Switch sw)", "modifiers": "private static", "return": "void", "signature": "void addOrderCodeProperty(UcteLine ucteLine, Switch sw)", "full_signature": "private static void addOrderCodeProperty(UcteLine ucteLine, Switch sw)", "class_method_signature": "UcteImporter.addOrderCodeProperty(UcteLine ucteLine, Switch sw)", "testcase": false, "constructor": false}, {"identifier": "addNominalPowerProperty", "parameters": "(UcteTransformer transformer, TwoWindingsTransformer twoWindingsTransformer)", "modifiers": "private static", "return": "void", "signature": "void addNominalPowerProperty(UcteTransformer transformer, TwoWindingsTransformer twoWindingsTransformer)", "full_signature": "private static void addNominalPowerProperty(UcteTransformer transformer, TwoWindingsTransformer twoWindingsTransformer)", "class_method_signature": "UcteImporter.addNominalPowerProperty(UcteTransformer transformer, TwoWindingsTransformer twoWindingsTransformer)", "testcase": false, "constructor": false}, {"identifier": "addXnodeStatusProperty", "parameters": "(UcteNode ucteNode, Identifiable identifiable)", "modifiers": "private static", "return": "void", "signature": "void addXnodeStatusProperty(UcteNode ucteNode, Identifiable identifiable)", "full_signature": "private static void addXnodeStatusProperty(UcteNode ucteNode, Identifiable identifiable)", "class_method_signature": "UcteImporter.addXnodeStatusProperty(UcteNode ucteNode, Identifiable identifiable)", "testcase": false, "constructor": false}, {"identifier": "addXnodeStatusProperty", "parameters": "(TieLine tieLine, DanglingLine danglingLine)", "modifiers": "private static", "return": "void", "signature": "void addXnodeStatusProperty(TieLine tieLine, DanglingLine danglingLine)", "full_signature": "private static void addXnodeStatusProperty(TieLine tieLine, DanglingLine danglingLine)", "class_method_signature": "UcteImporter.addXnodeStatusProperty(TieLine tieLine, DanglingLine danglingLine)", "testcase": false, "constructor": false}, {"identifier": "addDanglingLineCouplerProperty", "parameters": "(UcteLine ucteLine, DanglingLine danglingLine)", "modifiers": "private static", "return": "void", "signature": "void addDanglingLineCouplerProperty(UcteLine ucteLine, DanglingLine danglingLine)", "full_signature": "private static void addDanglingLineCouplerProperty(UcteLine ucteLine, DanglingLine danglingLine)", "class_method_signature": "UcteImporter.addDanglingLineCouplerProperty(UcteLine ucteLine, DanglingLine danglingLine)", "testcase": false, "constructor": false}, {"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getFormat()", "full_signature": "@Override public String getFormat()", "class_method_signature": "UcteImporter.getFormat()", "testcase": false, "constructor": false}, {"identifier": "getComment", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getComment()", "full_signature": "@Override public String getComment()", "class_method_signature": "UcteImporter.getComment()", "testcase": false, "constructor": false}, {"identifier": "findExtension", "parameters": "(ReadOnlyDataSource dataSource, boolean throwException)", "modifiers": "private", "return": "String", "signature": "String findExtension(ReadOnlyDataSource dataSource, boolean throwException)", "full_signature": "private String findExtension(ReadOnlyDataSource dataSource, boolean throwException)", "class_method_signature": "UcteImporter.findExtension(ReadOnlyDataSource dataSource, boolean throwException)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(ReadOnlyDataSource dataSource)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exists(ReadOnlyDataSource dataSource)", "full_signature": "@Override public boolean exists(ReadOnlyDataSource dataSource)", "class_method_signature": "UcteImporter.exists(ReadOnlyDataSource dataSource)", "testcase": false, "constructor": false}, {"identifier": "mergeXnodeDanglingLines", "parameters": "(UcteNetwork ucteNetwork, Network network)", "modifiers": "private", "return": "void", "signature": "void mergeXnodeDanglingLines(UcteNetwork ucteNetwork, Network network)", "full_signature": "private void mergeXnodeDanglingLines(UcteNetwork ucteNetwork, Network network)", "class_method_signature": "UcteImporter.mergeXnodeDanglingLines(UcteNetwork ucteNetwork, Network network)", "testcase": false, "constructor": false}, {"identifier": "createTieLine", "parameters": "(UcteNetwork ucteNetwork, Network network, DanglingLine dlAtSideOne, DanglingLine dlAtSideTwo)", "modifiers": "private", "return": "void", "signature": "void createTieLine(UcteNetwork ucteNetwork, Network network, DanglingLine dlAtSideOne, DanglingLine dlAtSideTwo)", "full_signature": "private void createTieLine(UcteNetwork ucteNetwork, Network network, DanglingLine dlAtSideOne, DanglingLine dlAtSideTwo)", "class_method_signature": "UcteImporter.createTieLine(UcteNetwork ucteNetwork, Network network, DanglingLine dlAtSideOne, DanglingLine dlAtSideTwo)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "modifiers": "@Override public", "return": "void", "signature": "void copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "full_signature": "@Override public void copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "class_method_signature": "UcteImporter.copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "testcase": false, "constructor": false}, {"identifier": "importData", "parameters": "(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "modifiers": "@Override public", "return": "Network", "signature": "Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "full_signature": "@Override public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "class_method_signature": "UcteImporter.importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "testcase": false, "constructor": false}], "file": "ucte/ucte-converter/src/main/java/com/powsybl/ucte/converter/UcteImporter.java"}, "focal_method": {"identifier": "importData", "parameters": "(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "modifiers": "@Override public", "return": "Network", "body": "@Override\n    public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters) {\n        try {\n            String ext = findExtension(dataSource, true);\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(dataSource.newInputStream(null, ext)))) {\n\n                Stopwatch stopwatch = Stopwatch.createStarted();\n\n                UcteNetworkExt ucteNetwork = new UcteNetworkExt(new UcteReader().read(reader), LINE_MIN_Z);\n                String fileName = dataSource.getBaseName();\n\n                EntsoeFileName ucteFileName = EntsoeFileName.parse(fileName);\n\n                Network network = networkFactory.createNetwork(fileName, \"UCTE\");\n                network.setCaseDate(ucteFileName.getDate());\n                network.setForecastDistance(ucteFileName.getForecastDistance());\n\n                createBuses(ucteNetwork, network);\n                createLines(ucteNetwork, network);\n                createTransformers(ucteNetwork, network, ucteFileName);\n\n                mergeXnodeDanglingLines(ucteNetwork, network);\n\n                stopwatch.stop();\n                LOGGER.debug(\"UCTE import done in {} ms\", stopwatch.elapsed(TimeUnit.MILLISECONDS));\n\n                return network;\n            }\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }", "signature": "Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "full_signature": "@Override public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "class_method_signature": "UcteImporter.importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "testcase": false, "constructor": false, "invocations": ["findExtension", "newInputStream", "createStarted", "read", "getBaseName", "parse", "createNetwork", "setCaseDate", "getDate", "setForecastDistance", "getForecastDistance", "createBuses", "createLines", "createTransformers", "mergeXnodeDanglingLines", "stop", "debug", "elapsed"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}