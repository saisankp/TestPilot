{"test_class": {"identifier": "AbortedScanExceptionTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/net/adamcin/oakpal/core/AbortedScanExceptionTest.java"}, "test_case": {"identifier": "testGetMessage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetMessage() throws Exception {\n        final String baseMessage = \"baseMessage\";\n        final Exception baseError = new Exception(baseMessage);\n\n        final Function<String, String> expectMessage = prefix ->\n                prefix + baseError.getClass().getName() + \": \" + baseError.getMessage();\n\n        AbortedScanException aseNoPackage = new AbortedScanException(baseError);\n        assertEquals(\"no package has base message\", expectMessage.apply(\"\"), aseNoPackage.getMessage());\n        File file = TestPackageUtil.prepareTestPackage(\"package_1.0.zip\");\n        AbortedScanException aseFile = new AbortedScanException(baseError, file);\n        assertEquals(\"file package package has prefix\",\n                expectMessage.apply(\"(Failed package: \" + file.getAbsolutePath() + \") \"),\n                aseFile.getMessage());\n        final URL url = file.toURI().toURL();\n        AbortedScanException aseUrl = new AbortedScanException(baseError, url);\n        assertEquals(\"url package package has prefix\",\n                expectMessage.apply(\"(Failed package: \" + url.toString() + \") \"),\n                aseUrl.getMessage());\n\n        Node node = mock(Node.class);\n        final String path = \"/etc/packages/correct/path\";\n        when(node.getPath()).thenReturn(path);\n        AbortedScanException aseNode = new AbortedScanException(baseError, node);\n        assertEquals(\"node package package has prefix\",\n                expectMessage.apply(\"(Failed package: \" + path + \") \"),\n                aseNode.getMessage());\n    }", "signature": "void testGetMessage()", "full_signature": "@Test public void testGetMessage()", "class_method_signature": "AbortedScanExceptionTest.testGetMessage()", "testcase": true, "constructor": false, "invocations": ["getName", "getClass", "getMessage", "assertEquals", "apply", "getMessage", "prepareTestPackage", "assertEquals", "apply", "getAbsolutePath", "getMessage", "toURL", "toURI", "assertEquals", "apply", "toString", "getMessage", "mock", "thenReturn", "when", "getPath", "assertEquals", "apply", "getMessage"]}, "focal_class": {"identifier": "AbortedScanException", "superclass": "extends Exception", "interfaces": "", "fields": [{"original_string": "private final URL currentPackageUrl;", "modifier": "private final", "type": "URL", "declarator": "currentPackageUrl", "var_name": "currentPackageUrl"}, {"original_string": "private final File currentPackageFile;", "modifier": "private final", "type": "File", "declarator": "currentPackageFile", "var_name": "currentPackageFile"}, {"original_string": "private final Node currentPackageNode;", "modifier": "private final", "type": "Node", "declarator": "currentPackageNode", "var_name": "currentPackageNode"}], "methods": [{"identifier": "AbortedScanException", "parameters": "(final Throwable cause, final File currentPackageFile)", "modifiers": "public", "return": "", "signature": " AbortedScanException(final Throwable cause, final File currentPackageFile)", "full_signature": "public  AbortedScanException(final Throwable cause, final File currentPackageFile)", "class_method_signature": "AbortedScanException.AbortedScanException(final Throwable cause, final File currentPackageFile)", "testcase": false, "constructor": true}, {"identifier": "AbortedScanException", "parameters": "(final Throwable cause, final URL currentPackageUrl)", "modifiers": "public", "return": "", "signature": " AbortedScanException(final Throwable cause, final URL currentPackageUrl)", "full_signature": "public  AbortedScanException(final Throwable cause, final URL currentPackageUrl)", "class_method_signature": "AbortedScanException.AbortedScanException(final Throwable cause, final URL currentPackageUrl)", "testcase": false, "constructor": true}, {"identifier": "AbortedScanException", "parameters": "(final Throwable cause, final Node currentPackageNode)", "modifiers": "public", "return": "", "signature": " AbortedScanException(final Throwable cause, final Node currentPackageNode)", "full_signature": "public  AbortedScanException(final Throwable cause, final Node currentPackageNode)", "class_method_signature": "AbortedScanException.AbortedScanException(final Throwable cause, final Node currentPackageNode)", "testcase": false, "constructor": true}, {"identifier": "AbortedScanException", "parameters": "(Throwable cause)", "modifiers": "public", "return": "", "signature": " AbortedScanException(Throwable cause)", "full_signature": "public  AbortedScanException(Throwable cause)", "class_method_signature": "AbortedScanException.AbortedScanException(Throwable cause)", "testcase": false, "constructor": true}, {"identifier": "getCurrentPackageUrl", "parameters": "()", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "Optional<URL>", "signature": "Optional<URL> getCurrentPackageUrl()", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public Optional<URL> getCurrentPackageUrl()", "class_method_signature": "AbortedScanException.getCurrentPackageUrl()", "testcase": false, "constructor": false}, {"identifier": "getCurrentPackageFile", "parameters": "()", "modifiers": "public", "return": "Optional<File>", "signature": "Optional<File> getCurrentPackageFile()", "full_signature": "public Optional<File> getCurrentPackageFile()", "class_method_signature": "AbortedScanException.getCurrentPackageFile()", "testcase": false, "constructor": false}, {"identifier": "getCurrentPackageNode", "parameters": "()", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "Optional<Node>", "signature": "Optional<Node> getCurrentPackageNode()", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public Optional<Node> getCurrentPackageNode()", "class_method_signature": "AbortedScanException.getCurrentPackageNode()", "testcase": false, "constructor": false}, {"identifier": "getMessage", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getMessage()", "full_signature": "@Override public String getMessage()", "class_method_signature": "AbortedScanException.getMessage()", "testcase": false, "constructor": false}, {"identifier": "getFailedPackageMessage", "parameters": "()", "modifiers": "@SuppressWarnings({\"WeakerAccess\", \"OptionalGetWithoutIsPresent\"}) public", "return": "String", "signature": "String getFailedPackageMessage()", "full_signature": "@SuppressWarnings({\"WeakerAccess\", \"OptionalGetWithoutIsPresent\"}) public String getFailedPackageMessage()", "class_method_signature": "AbortedScanException.getFailedPackageMessage()", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/AbortedScanException.java"}, "focal_method": {"identifier": "getMessage", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getMessage() {\n        return getFailedPackageMessage() + super.getMessage();\n    }", "signature": "String getMessage()", "full_signature": "@Override public String getMessage()", "class_method_signature": "AbortedScanException.getMessage()", "testcase": false, "constructor": false, "invocations": ["getFailedPackageMessage", "getMessage"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}