{"test_class": {"identifier": "SecretContentDAOTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Inject DSLContext jooqContext;", "modifier": "@Inject", "type": "DSLContext", "declarator": "jooqContext", "var_name": "jooqContext"}, {"original_string": "@Inject SecretContentDAOFactory secretContentDAOFactory;", "modifier": "@Inject", "type": "SecretContentDAOFactory", "declarator": "secretContentDAOFactory", "var_name": "secretContentDAOFactory"}, {"original_string": "@Inject private RowHmacGenerator rowHmacGenerator;", "modifier": "@Inject private", "type": "RowHmacGenerator", "declarator": "rowHmacGenerator", "var_name": "rowHmacGenerator"}, {"original_string": "final static ApiDate date = ApiDate.now();", "modifier": "final static", "type": "ApiDate", "declarator": "date = ApiDate.now()", "var_name": "date"}, {"original_string": "ImmutableMap<String, String> metadata = ImmutableMap.of(\"foo\", \"bar\");", "modifier": "", "type": "ImmutableMap<String, String>", "declarator": "metadata = ImmutableMap.of(\"foo\", \"bar\")", "var_name": "metadata"}, {"original_string": "SecretContent secretContent1 = SecretContent.of(11, 22, \"[crypted]\", \"checksum\", date, \"creator\", date,\n      \"creator\", metadata, 1136214245);", "modifier": "", "type": "SecretContent", "declarator": "secretContent1 = SecretContent.of(11, 22, \"[crypted]\", \"checksum\", date, \"creator\", date,\n      \"creator\", metadata, 1136214245)", "var_name": "secretContent1"}, {"original_string": "SecretContentDAO secretContentDAO;", "modifier": "", "type": "SecretContentDAO", "declarator": "secretContentDAO", "var_name": "secretContentDAO"}], "file": "server/src/test/java/keywhiz/service/daos/SecretContentDAOTest.java"}, "test_case": {"identifier": "createSecretContent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void createSecretContent() {\n    int before = tableSize();\n    secretContentDAO.createSecretContent(secretContent1.secretSeriesId()+1, \"encrypted\", \"checksum\", \"creator\",\n        metadata, 1136214245, OffsetDateTime.now().toEpochSecond());\n    assertThat(tableSize()).isEqualTo(before + 1);\n  }", "signature": "void createSecretContent()", "full_signature": "@Test public void createSecretContent()", "class_method_signature": "SecretContentDAOTest.createSecretContent()", "testcase": true, "constructor": false, "invocations": ["tableSize", "createSecretContent", "secretSeriesId", "toEpochSecond", "now", "isEqualTo", "assertThat", "tableSize"]}, "focal_class": {"identifier": "SecretContentDAO", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AclDAO.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AclDAO.class)", "var_name": "logger"}, {"original_string": "@VisibleForTesting static final int PRUNE_CUTOFF_ITEMS = 10;", "modifier": "@VisibleForTesting static final", "type": "int", "declarator": "PRUNE_CUTOFF_ITEMS = 10", "var_name": "PRUNE_CUTOFF_ITEMS"}, {"original_string": "@VisibleForTesting static final int PRUNE_CUTOFF_DAYS = 15;", "modifier": "@VisibleForTesting static final", "type": "int", "declarator": "PRUNE_CUTOFF_DAYS = 15", "var_name": "PRUNE_CUTOFF_DAYS"}, {"original_string": "private final DSLContext dslContext;", "modifier": "private final", "type": "DSLContext", "declarator": "dslContext", "var_name": "dslContext"}, {"original_string": "private final ObjectMapper mapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private final SecretContentMapper secretContentMapper;", "modifier": "private final", "type": "SecretContentMapper", "declarator": "secretContentMapper", "var_name": "secretContentMapper"}, {"original_string": "private final RowHmacGenerator rowHmacGenerator;", "modifier": "private final", "type": "RowHmacGenerator", "declarator": "rowHmacGenerator", "var_name": "rowHmacGenerator"}, {"original_string": "private final KeywhizConfig config;", "modifier": "private final", "type": "KeywhizConfig", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "SecretContentDAO", "parameters": "(DSLContext dslContext, ObjectMapper mapper,\n      SecretContentMapper secretContentMapper, RowHmacGenerator rowHmacGenerator,\n      KeywhizConfig config)", "modifiers": "private", "return": "", "signature": " SecretContentDAO(DSLContext dslContext, ObjectMapper mapper,\n      SecretContentMapper secretContentMapper, RowHmacGenerator rowHmacGenerator,\n      KeywhizConfig config)", "full_signature": "private  SecretContentDAO(DSLContext dslContext, ObjectMapper mapper,\n      SecretContentMapper secretContentMapper, RowHmacGenerator rowHmacGenerator,\n      KeywhizConfig config)", "class_method_signature": "SecretContentDAO.SecretContentDAO(DSLContext dslContext, ObjectMapper mapper,\n      SecretContentMapper secretContentMapper, RowHmacGenerator rowHmacGenerator,\n      KeywhizConfig config)", "testcase": false, "constructor": true}, {"identifier": "createSecretContent", "parameters": "(long secretId, String encryptedContent, String hmac,\n      String creator, Map<String, String> metadata, long expiry, long now)", "modifiers": "public", "return": "long", "signature": "long createSecretContent(long secretId, String encryptedContent, String hmac,\n      String creator, Map<String, String> metadata, long expiry, long now)", "full_signature": "public long createSecretContent(long secretId, String encryptedContent, String hmac,\n      String creator, Map<String, String> metadata, long expiry, long now)", "class_method_signature": "SecretContentDAO.createSecretContent(long secretId, String encryptedContent, String hmac,\n      String creator, Map<String, String> metadata, long expiry, long now)", "testcase": false, "constructor": false}, {"identifier": "pruneOldContents", "parameters": "(long secretId)", "modifiers": "@VisibleForTesting", "return": "void", "signature": "void pruneOldContents(long secretId)", "full_signature": "@VisibleForTesting void pruneOldContents(long secretId)", "class_method_signature": "SecretContentDAO.pruneOldContents(long secretId)", "testcase": false, "constructor": false}, {"identifier": "getSecretContentById", "parameters": "(long id)", "modifiers": "public", "return": "Optional<SecretContent>", "signature": "Optional<SecretContent> getSecretContentById(long id)", "full_signature": "public Optional<SecretContent> getSecretContentById(long id)", "class_method_signature": "SecretContentDAO.getSecretContentById(long id)", "testcase": false, "constructor": false}, {"identifier": "getSecretVersionsBySecretId", "parameters": "(long id,\n      int versionIdx, int numVersions)", "modifiers": "public", "return": "Optional<ImmutableList<SecretContent>>", "signature": "Optional<ImmutableList<SecretContent>> getSecretVersionsBySecretId(long id,\n      int versionIdx, int numVersions)", "full_signature": "public Optional<ImmutableList<SecretContent>> getSecretVersionsBySecretId(long id,\n      int versionIdx, int numVersions)", "class_method_signature": "SecretContentDAO.getSecretVersionsBySecretId(long id,\n      int versionIdx, int numVersions)", "testcase": false, "constructor": false}, {"identifier": "dangerPermanentlyRemoveRecordsForGivenSecretsIDs", "parameters": "(List<Long> ids)", "modifiers": "public", "return": "long", "signature": "long dangerPermanentlyRemoveRecordsForGivenSecretsIDs(List<Long> ids)", "full_signature": "public long dangerPermanentlyRemoveRecordsForGivenSecretsIDs(List<Long> ids)", "class_method_signature": "SecretContentDAO.dangerPermanentlyRemoveRecordsForGivenSecretsIDs(List<Long> ids)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/daos/SecretContentDAO.java"}, "focal_method": {"identifier": "createSecretContent", "parameters": "(long secretId, String encryptedContent, String hmac,\n      String creator, Map<String, String> metadata, long expiry, long now)", "modifiers": "public", "return": "long", "body": "public long createSecretContent(long secretId, String encryptedContent, String hmac,\n      String creator, Map<String, String> metadata, long expiry, long now) {\n    SecretsContentRecord r = dslContext.newRecord(SECRETS_CONTENT);\n\n    String jsonMetadata;\n    try {\n      jsonMetadata = mapper.writeValueAsString(metadata);\n    } catch (JsonProcessingException e) {\n      // Serialization of a Map<String, String> can never fail.\n      throw Throwables.propagate(e);\n    }\n\n    long generatedId = rowHmacGenerator.getNextLongSecure();\n    String rowHmac = rowHmacGenerator.computeRowHmac(\n        SECRETS_CONTENT.getName(), List.of(encryptedContent, jsonMetadata, generatedId));\n\n    r.setId(generatedId);\n    r.setSecretid(secretId);\n    r.setEncryptedContent(encryptedContent);\n    r.setContentHmac(hmac);\n    r.setCreatedby(creator);\n    r.setCreatedat(now);\n    r.setUpdatedby(creator);\n    r.setUpdatedat(now);\n    r.setMetadata(jsonMetadata);\n    r.setExpiry(expiry);\n    r.setRowHmac(rowHmac);\n    r.store();\n\n    pruneOldContents(secretId);\n\n    return r.getId();\n  }", "signature": "long createSecretContent(long secretId, String encryptedContent, String hmac,\n      String creator, Map<String, String> metadata, long expiry, long now)", "full_signature": "public long createSecretContent(long secretId, String encryptedContent, String hmac,\n      String creator, Map<String, String> metadata, long expiry, long now)", "class_method_signature": "SecretContentDAO.createSecretContent(long secretId, String encryptedContent, String hmac,\n      String creator, Map<String, String> metadata, long expiry, long now)", "testcase": false, "constructor": false, "invocations": ["newRecord", "writeValueAsString", "propagate", "getNextLongSecure", "computeRowHmac", "getName", "of", "setId", "setSecretid", "setEncryptedContent", "setContentHmac", "setCreatedby", "setCreatedat", "setUpdatedby", "setUpdatedat", "setMetadata", "setExpiry", "setRowHmac", "store", "pruneOldContents", "getId"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}