{"test_class": {"identifier": "UtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "log/src/test/java/org/cloudname/log/format/UtilTest.java"}, "test_case": {"identifier": "testEscape", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEscape() throws Exception {\n        assertEquals(\"\\\\n\\\\t\\\\n\\\\t\", Util.escape(\"\\n\\t\\n\\t\"));\n        assertEquals(\"\\\\\\\\\\\\\\\\\", Util.escape(\"\\\\\\\\\"));\n    }", "signature": "void testEscape()", "full_signature": "@Test public void testEscape()", "class_method_signature": "UtilTest.testEscape()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "escape", "assertEquals", "escape"]}, "focal_class": {"identifier": "Util", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DateTimeFormatter isoTimeFormatter = ISODateTimeFormat\n        .dateHourMinuteSecondMillis()\n        .withZone(DateTimeZone.UTC);", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "isoTimeFormatter = ISODateTimeFormat\n        .dateHourMinuteSecondMillis()\n        .withZone(DateTimeZone.UTC)", "var_name": "isoTimeFormatter"}, {"original_string": "private static final NavigableMap<Integer,String> logLevelByValue = new TreeMap<Integer,String>();", "modifier": "private static final", "type": "NavigableMap<Integer,String>", "declarator": "logLevelByValue = new TreeMap<Integer,String>()", "var_name": "logLevelByValue"}], "methods": [{"identifier": "Util", "parameters": "()", "modifiers": "private", "return": "", "signature": " Util()", "full_signature": "private  Util()", "class_method_signature": "Util.Util()", "testcase": false, "constructor": true}, {"identifier": "logLevelNameForValue", "parameters": "(int value)", "modifiers": "public static", "return": "String", "signature": "String logLevelNameForValue(int value)", "full_signature": "public static String logLevelNameForValue(int value)", "class_method_signature": "Util.logLevelNameForValue(int value)", "testcase": false, "constructor": false}, {"identifier": "formatTimeSecondsSinceEpoch", "parameters": "(final long time, StringBuilder sbuffer)", "modifiers": "public static", "return": "void", "signature": "void formatTimeSecondsSinceEpoch(final long time, StringBuilder sbuffer)", "full_signature": "public static void formatTimeSecondsSinceEpoch(final long time, StringBuilder sbuffer)", "class_method_signature": "Util.formatTimeSecondsSinceEpoch(final long time, StringBuilder sbuffer)", "testcase": false, "constructor": false}, {"identifier": "formatTimeISO", "parameters": "(long time, StringBuilder sbuffer)", "modifiers": "public static", "return": "void", "signature": "void formatTimeISO(long time, StringBuilder sbuffer)", "full_signature": "public static void formatTimeISO(long time, StringBuilder sbuffer)", "class_method_signature": "Util.formatTimeISO(long time, StringBuilder sbuffer)", "testcase": false, "constructor": false}, {"identifier": "escape", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String escape(String s)", "full_signature": "public static String escape(String s)", "class_method_signature": "Util.escape(String s)", "testcase": false, "constructor": false}], "file": "log/src/main/java/org/cloudname/log/format/Util.java"}, "focal_method": {"identifier": "escape", "parameters": "(String s)", "modifiers": "public static", "return": "String", "body": "public static String escape(String s) {\n        // Guesstimate on length.  Doesn't need to be accurate, only\n        // probable\n        StringBuilder buff = new StringBuilder(s.length() + 20);\n\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            switch(c) {\n                case '\\r':\n                    // If not followed by '\\n', convert to '\\n', else strip.\n                    if (i == s.length() - 1 || s.charAt(i + 1) != '\\n') {\n                        buff.append(\"\\\\n\");\n                    }\n                    break;\n                case '\\n':\n                    buff.append(\"\\\\n\");\n                    break;\n\n                case '\\t':\n                    buff.append(\"\\\\t\");\n                    break;\n\n                case '\\\\':\n                    buff.append(\"\\\\\\\\\");\n                    break;\n\n                default:\n                    buff.append(c);\n            }\n        }\n\n        return buff.toString();\n    }", "signature": "String escape(String s)", "full_signature": "public static String escape(String s)", "class_method_signature": "Util.escape(String s)", "testcase": false, "constructor": false, "invocations": ["length", "length", "charAt", "length", "charAt", "append", "append", "append", "append", "append", "toString"]}, "repository": {"repo_id": 2329961, "url": "https://github.com/Cloudname/cloudname", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 21, "size": 26031, "license": "licensed"}}