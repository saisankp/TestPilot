{"test_class": {"identifier": "TsDataTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private TsData X, Y;", "modifier": "private", "type": "TsData", "declarator": "X", "var_name": "X"}], "file": "jtstoolkit/src/test/java/ec/tstoolkit/timeseries/simplets/TsDataTest.java"}, "test_case": {"identifier": "testDrop", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDrop() {\n        boolean end = false;\n        TsData s = X.clone();\n        while (!s.isEmpty()) {\n//            System.out.print(s.getLength());\n            testIterators(s);\n            if (end) {\n                end = false;\n                s = s.drop(0, 1);\n            } else {\n                end = true;\n                s = s.drop(1, 0);\n            }\n        }\n\n    }", "signature": "void testDrop()", "full_signature": "@Test public void testDrop()", "class_method_signature": "TsDataTest.testDrop()", "testcase": true, "constructor": false, "invocations": ["clone", "isEmpty", "testIterators", "drop", "drop"]}, "focal_class": {"identifier": "TsData", "superclass": "", "interfaces": "implements Cloneable, Iterable<TsObservation>, IReadDataBlock", "fields": [{"original_string": "private static final IRandomNumberGenerator RNG = JdkRNG.newRandom();", "modifier": "private static final", "type": "IRandomNumberGenerator", "declarator": "RNG = JdkRNG.newRandom()", "var_name": "RNG"}, {"original_string": "private TsPeriod start;", "modifier": "private", "type": "TsPeriod", "declarator": "start", "var_name": "start"}, {"original_string": "private double[] vals;", "modifier": "private", "type": "double[]", "declarator": "vals", "var_name": "vals"}], "methods": [{"identifier": "add", "parameters": "(final double d, final TsData ts)", "modifiers": "public static", "return": "TsData", "signature": "TsData add(final double d, final TsData ts)", "full_signature": "public static TsData add(final double d, final TsData ts)", "class_method_signature": "TsData.add(final double d, final TsData ts)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final TsData tsl, final TsData tsr)", "modifiers": "public static", "return": "TsData", "signature": "TsData add(final TsData tsl, final TsData tsr)", "full_signature": "public static TsData add(final TsData tsl, final TsData tsr)", "class_method_signature": "TsData.add(final TsData tsl, final TsData tsr)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(final double d, final TsData ts)", "modifiers": "public static", "return": "TsData", "signature": "TsData divide(final double d, final TsData ts)", "full_signature": "public static TsData divide(final double d, final TsData ts)", "class_method_signature": "TsData.divide(final double d, final TsData ts)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(final TsData tsl, final TsData tsr)", "modifiers": "public static", "return": "TsData", "signature": "TsData divide(final TsData tsl, final TsData tsr)", "full_signature": "public static TsData divide(final TsData tsl, final TsData tsr)", "class_method_signature": "TsData.divide(final TsData tsl, final TsData tsr)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(final double d, final TsData ts)", "modifiers": "public static", "return": "TsData", "signature": "TsData multiply(final double d, final TsData ts)", "full_signature": "public static TsData multiply(final double d, final TsData ts)", "class_method_signature": "TsData.multiply(final double d, final TsData ts)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(final TsData tsl, final TsData tsr)", "modifiers": "public static", "return": "TsData", "signature": "TsData multiply(final TsData tsl, final TsData tsr)", "full_signature": "public static TsData multiply(final TsData tsl, final TsData tsr)", "class_method_signature": "TsData.multiply(final TsData tsl, final TsData tsr)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(double d, final TsData ts)", "modifiers": "public static", "return": "TsData", "signature": "TsData subtract(double d, final TsData ts)", "full_signature": "public static TsData subtract(double d, final TsData ts)", "class_method_signature": "TsData.subtract(double d, final TsData ts)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(final TsData tsl, final TsData tsr)", "modifiers": "public static", "return": "TsData", "signature": "TsData subtract(final TsData tsl, final TsData tsr)", "full_signature": "public static TsData subtract(final TsData tsl, final TsData tsr)", "class_method_signature": "TsData.subtract(final TsData tsl, final TsData tsr)", "testcase": false, "constructor": false}, {"identifier": "random", "parameters": "(TsFrequency freq)", "modifiers": "public static", "return": "TsData", "signature": "TsData random(TsFrequency freq)", "full_signature": "public static TsData random(TsFrequency freq)", "class_method_signature": "TsData.random(TsFrequency freq)", "testcase": false, "constructor": false}, {"identifier": "random", "parameters": "(TsFrequency freq, int seed)", "modifiers": "public static", "return": "TsData", "signature": "TsData random(TsFrequency freq, int seed)", "full_signature": "public static TsData random(TsFrequency freq, int seed)", "class_method_signature": "TsData.random(TsFrequency freq, int seed)", "testcase": false, "constructor": false}, {"identifier": "randomAirline", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void randomAirline()", "full_signature": "public void randomAirline()", "class_method_signature": "TsData.randomAirline()", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(TsData s)", "modifiers": "public", "return": "double", "signature": "double distance(TsData s)", "full_signature": "public double distance(TsData s)", "class_method_signature": "TsData.distance(TsData s)", "testcase": false, "constructor": false}, {"identifier": "TsData", "parameters": "(final TsDomain dom)", "modifiers": "public", "return": "", "signature": " TsData(final TsDomain dom)", "full_signature": "public  TsData(final TsDomain dom)", "class_method_signature": "TsData.TsData(final TsDomain dom)", "testcase": false, "constructor": true}, {"identifier": "TsData", "parameters": "(final TsDomain dom, double val)", "modifiers": "public", "return": "", "signature": " TsData(final TsDomain dom, double val)", "full_signature": "public  TsData(final TsDomain dom, double val)", "class_method_signature": "TsData.TsData(final TsDomain dom, double val)", "testcase": false, "constructor": true}, {"identifier": "TsData", "parameters": "(final TsFrequency freq, final int beg, final int count)", "modifiers": "", "return": "", "signature": " TsData(final TsFrequency freq, final int beg, final int count)", "full_signature": "  TsData(final TsFrequency freq, final int beg, final int count)", "class_method_signature": "TsData.TsData(final TsFrequency freq, final int beg, final int count)", "testcase": false, "constructor": true}, {"identifier": "TsData", "parameters": "(final TsFrequency freq, final int firstyear,\n            final int firstperiod, final double[] data, boolean copydata)", "modifiers": "public", "return": "", "signature": " TsData(final TsFrequency freq, final int firstyear,\n            final int firstperiod, final double[] data, boolean copydata)", "full_signature": "public  TsData(final TsFrequency freq, final int firstyear,\n            final int firstperiod, final double[] data, boolean copydata)", "class_method_signature": "TsData.TsData(final TsFrequency freq, final int firstyear,\n            final int firstperiod, final double[] data, boolean copydata)", "testcase": false, "constructor": true}, {"identifier": "TsData", "parameters": "(final TsFrequency freq, final int firstyear,\n            final int firstperiod, final int count)", "modifiers": "public", "return": "", "signature": " TsData(final TsFrequency freq, final int firstyear,\n            final int firstperiod, final int count)", "full_signature": "public  TsData(final TsFrequency freq, final int firstyear,\n            final int firstperiod, final int count)", "class_method_signature": "TsData.TsData(final TsFrequency freq, final int firstyear,\n            final int firstperiod, final int count)", "testcase": false, "constructor": true}, {"identifier": "TsData", "parameters": "(final TsPeriod start, final double[] data, boolean copydata)", "modifiers": "public", "return": "", "signature": " TsData(final TsPeriod start, final double[] data, boolean copydata)", "full_signature": "public  TsData(final TsPeriod start, final double[] data, boolean copydata)", "class_method_signature": "TsData.TsData(final TsPeriod start, final double[] data, boolean copydata)", "testcase": false, "constructor": true}, {"identifier": "TsData", "parameters": "(final TsPeriod start, final int count)", "modifiers": "public", "return": "", "signature": " TsData(final TsPeriod start, final int count)", "full_signature": "public  TsData(final TsPeriod start, final int count)", "class_method_signature": "TsData.TsData(final TsPeriod start, final int count)", "testcase": false, "constructor": true}, {"identifier": "TsData", "parameters": "(final TsPeriod start, final IReadDataBlock vals)", "modifiers": "public", "return": "", "signature": " TsData(final TsPeriod start, final IReadDataBlock vals)", "full_signature": "public  TsData(final TsPeriod start, final IReadDataBlock vals)", "class_method_signature": "TsData.TsData(final TsPeriod start, final IReadDataBlock vals)", "testcase": false, "constructor": true}, {"identifier": "copyTo", "parameters": "(double[] buffer, int start)", "modifiers": "@Override public", "return": "void", "signature": "void copyTo(double[] buffer, int start)", "full_signature": "@Override public void copyTo(double[] buffer, int start)", "class_method_signature": "TsData.copyTo(double[] buffer, int start)", "testcase": false, "constructor": false}, {"identifier": "rextract", "parameters": "(int start, int length)", "modifiers": "@Override public", "return": "IReadDataBlock", "signature": "IReadDataBlock rextract(int start, int length)", "full_signature": "@Override public IReadDataBlock rextract(int start, int length)", "class_method_signature": "TsData.rextract(int start, int length)", "testcase": false, "constructor": false}, {"identifier": "abs", "parameters": "()", "modifiers": "public", "return": "TsData", "signature": "TsData abs()", "full_signature": "public TsData abs()", "class_method_signature": "TsData.abs()", "testcase": false, "constructor": false}, {"identifier": "changeFrequency", "parameters": "(final TsFrequency newfreq,\n            final TsAggregationType conversion, final boolean complete)", "modifiers": "public", "return": "TsData", "signature": "TsData changeFrequency(final TsFrequency newfreq,\n            final TsAggregationType conversion, final boolean complete)", "full_signature": "public TsData changeFrequency(final TsFrequency newfreq,\n            final TsAggregationType conversion, final boolean complete)", "class_method_signature": "TsData.changeFrequency(final TsFrequency newfreq,\n            final TsAggregationType conversion, final boolean complete)", "testcase": false, "constructor": false}, {"identifier": "chs", "parameters": "()", "modifiers": "public", "return": "TsData", "signature": "TsData chs()", "full_signature": "public TsData chs()", "class_method_signature": "TsData.chs()", "testcase": false, "constructor": false}, {"identifier": "cleanExtremities", "parameters": "()", "modifiers": "public", "return": "TsData", "signature": "TsData cleanExtremities()", "full_signature": "public TsData cleanExtremities()", "class_method_signature": "TsData.cleanExtremities()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "TsData", "signature": "TsData clone()", "full_signature": "@Override public TsData clone()", "class_method_signature": "TsData.clone()", "testcase": false, "constructor": false}, {"identifier": "delta", "parameters": "(final int lag)", "modifiers": "public", "return": "TsData", "signature": "TsData delta(final int lag)", "full_signature": "public TsData delta(final int lag)", "class_method_signature": "TsData.delta(final int lag)", "testcase": false, "constructor": false}, {"identifier": "delta", "parameters": "(final int lag, final int power)", "modifiers": "public", "return": "TsData", "signature": "TsData delta(final int lag, final int power)", "full_signature": "public TsData delta(final int lag, final int power)", "class_method_signature": "TsData.delta(final int lag, final int power)", "testcase": false, "constructor": false}, {"identifier": "div", "parameters": "(final double d)", "modifiers": "public", "return": "TsData", "signature": "TsData div(final double d)", "full_signature": "public TsData div(final double d)", "class_method_signature": "TsData.div(final double d)", "testcase": false, "constructor": false}, {"identifier": "div", "parameters": "(final TsData ts)", "modifiers": "public", "return": "TsData", "signature": "TsData div(final TsData ts)", "full_signature": "public TsData div(final TsData ts)", "class_method_signature": "TsData.div(final TsData ts)", "testcase": false, "constructor": false}, {"identifier": "drop", "parameters": "(final int nfirst, final int nlast)", "modifiers": "public", "return": "TsData", "signature": "TsData drop(final int nfirst, final int nlast)", "full_signature": "public TsData drop(final int nfirst, final int nlast)", "class_method_signature": "TsData.drop(final int nfirst, final int nlast)", "testcase": false, "constructor": false}, {"identifier": "fullYears", "parameters": "()", "modifiers": "public", "return": "TsData", "signature": "TsData fullYears()", "full_signature": "public TsData fullYears()", "class_method_signature": "TsData.fullYears()", "testcase": false, "constructor": false}, {"identifier": "exp", "parameters": "()", "modifiers": "public", "return": "TsData", "signature": "TsData exp()", "full_signature": "public TsData exp()", "class_method_signature": "TsData.exp()", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "(int ndec)", "modifiers": "public", "return": "TsData", "signature": "TsData round(int ndec)", "full_signature": "public TsData round(int ndec)", "class_method_signature": "TsData.round(int ndec)", "testcase": false, "constructor": false}, {"identifier": "extend", "parameters": "(final int nbefore, final int nafter)", "modifiers": "public", "return": "TsData", "signature": "TsData extend(final int nbefore, final int nafter)", "full_signature": "public TsData extend(final int nbefore, final int nafter)", "class_method_signature": "TsData.extend(final int nbefore, final int nafter)", "testcase": false, "constructor": false}, {"identifier": "extendTo", "parameters": "(final Day lastday)", "modifiers": "public", "return": "TsData", "signature": "TsData extendTo(final Day lastday)", "full_signature": "public TsData extendTo(final Day lastday)", "class_method_signature": "TsData.extendTo(final Day lastday)", "testcase": false, "constructor": false}, {"identifier": "fittoDomain", "parameters": "(final TsDomain dom)", "modifiers": "public", "return": "TsData", "signature": "TsData fittoDomain(final TsDomain dom)", "full_signature": "public TsData fittoDomain(final TsDomain dom)", "class_method_signature": "TsData.fittoDomain(final TsDomain dom)", "testcase": false, "constructor": false}, {"identifier": "isMissing", "parameters": "(final int idx)", "modifiers": "public", "return": "boolean", "signature": "boolean isMissing(final int idx)", "full_signature": "public boolean isMissing(final int idx)", "class_method_signature": "TsData.isMissing(final int idx)", "testcase": false, "constructor": false}, {"identifier": "setMissing", "parameters": "(final int idx)", "modifiers": "public", "return": "void", "signature": "void setMissing(final int idx)", "full_signature": "public void setMissing(final int idx)", "class_method_signature": "TsData.setMissing(final int idx)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(final int idx)", "modifiers": "@Override public", "return": "double", "signature": "double get(final int idx)", "full_signature": "@Override public double get(final int idx)", "class_method_signature": "TsData.get(final int idx)", "testcase": false, "constructor": false}, {"identifier": "getDomain", "parameters": "()", "modifiers": "@NewObject public", "return": "TsDomain", "signature": "TsDomain getDomain()", "full_signature": "@NewObject public TsDomain getDomain()", "class_method_signature": "TsData.getDomain()", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "()", "modifiers": "@Deprecated public", "return": "Values", "signature": "Values getValues()", "full_signature": "@Deprecated public Values getValues()", "class_method_signature": "TsData.getValues()", "testcase": false, "constructor": false}, {"identifier": "getEnd", "parameters": "()", "modifiers": "@NewObject public", "return": "TsPeriod", "signature": "TsPeriod getEnd()", "full_signature": "@NewObject public TsPeriod getEnd()", "class_method_signature": "TsData.getEnd()", "testcase": false, "constructor": false}, {"identifier": "getFrequency", "parameters": "()", "modifiers": "public", "return": "TsFrequency", "signature": "TsFrequency getFrequency()", "full_signature": "public TsFrequency getFrequency()", "class_method_signature": "TsData.getFrequency()", "testcase": false, "constructor": false}, {"identifier": "getLastPeriod", "parameters": "()", "modifiers": "@NewObject public", "return": "TsPeriod", "signature": "TsPeriod getLastPeriod()", "full_signature": "@NewObject public TsPeriod getLastPeriod()", "class_method_signature": "TsData.getLastPeriod()", "testcase": false, "constructor": false}, {"identifier": "getLength", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getLength()", "full_signature": "@Override public int getLength()", "class_method_signature": "TsData.getLength()", "testcase": false, "constructor": false}, {"identifier": "getObsCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getObsCount()", "full_signature": "public int getObsCount()", "class_method_signature": "TsData.getObsCount()", "testcase": false, "constructor": false}, {"identifier": "getMissingValuesCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMissingValuesCount()", "full_signature": "public int getMissingValuesCount()", "class_method_signature": "TsData.getMissingValuesCount()", "testcase": false, "constructor": false}, {"identifier": "hasMissingValues", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasMissingValues()", "full_signature": "public boolean hasMissingValues()", "class_method_signature": "TsData.hasMissingValues()", "testcase": false, "constructor": false}, {"identifier": "getStart", "parameters": "()", "modifiers": "@NewObject public", "return": "TsPeriod", "signature": "TsPeriod getStart()", "full_signature": "@NewObject public TsPeriod getStart()", "class_method_signature": "TsData.getStart()", "testcase": false, "constructor": false}, {"identifier": "index", "parameters": "(final TsPeriod refperiod, final double refvalue)", "modifiers": "public", "return": "TsData", "signature": "TsData index(final TsPeriod refperiod, final double refvalue)", "full_signature": "public TsData index(final TsPeriod refperiod, final double refvalue)", "class_method_signature": "TsData.index(final TsPeriod refperiod, final double refvalue)", "testcase": false, "constructor": false}, {"identifier": "inv", "parameters": "()", "modifiers": "public", "return": "TsData", "signature": "TsData inv()", "full_signature": "public TsData inv()", "class_method_signature": "TsData.inv()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "TsData.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<TsObservation>", "signature": "Iterator<TsObservation> iterator()", "full_signature": "@Override public Iterator<TsObservation> iterator()", "class_method_signature": "TsData.iterator()", "testcase": false, "constructor": false}, {"identifier": "stream", "parameters": "()", "modifiers": "public", "return": "Stream<TsObservation>", "signature": "Stream<TsObservation> stream()", "full_signature": "public Stream<TsObservation> stream()", "class_method_signature": "TsData.stream()", "testcase": false, "constructor": false}, {"identifier": "lag", "parameters": "(int nperiods)", "modifiers": "public", "return": "TsData", "signature": "TsData lag(int nperiods)", "full_signature": "public TsData lag(int nperiods)", "class_method_signature": "TsData.lag(int nperiods)", "testcase": false, "constructor": false}, {"identifier": "lead", "parameters": "(final int nperiods)", "modifiers": "public", "return": "TsData", "signature": "TsData lead(final int nperiods)", "full_signature": "public TsData lead(final int nperiods)", "class_method_signature": "TsData.lead(final int nperiods)", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "()", "modifiers": "public", "return": "TsData", "signature": "TsData log()", "full_signature": "public TsData log()", "class_method_signature": "TsData.log()", "testcase": false, "constructor": false}, {"identifier": "log", "parameters": "(final double b)", "modifiers": "public", "return": "TsData", "signature": "TsData log(final double b)", "full_signature": "public TsData log(final double b)", "class_method_signature": "TsData.log(final double b)", "testcase": false, "constructor": false}, {"identifier": "sqrt", "parameters": "()", "modifiers": "public", "return": "TsData", "signature": "TsData sqrt()", "full_signature": "public TsData sqrt()", "class_method_signature": "TsData.sqrt()", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(final double d)", "modifiers": "public", "return": "TsData", "signature": "TsData minus(final double d)", "full_signature": "public TsData minus(final double d)", "class_method_signature": "TsData.minus(final double d)", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(final TsData ts)", "modifiers": "public", "return": "TsData", "signature": "TsData minus(final TsData ts)", "full_signature": "public TsData minus(final TsData ts)", "class_method_signature": "TsData.minus(final TsData ts)", "testcase": false, "constructor": false}, {"identifier": "movingAverage", "parameters": "(final double[] weights, final boolean bcentred,\n            final boolean bnormalized)", "modifiers": "public", "return": "TsData", "signature": "TsData movingAverage(final double[] weights, final boolean bcentred,\n            final boolean bnormalized)", "full_signature": "public TsData movingAverage(final double[] weights, final boolean bcentred,\n            final boolean bnormalized)", "class_method_signature": "TsData.movingAverage(final double[] weights, final boolean bcentred,\n            final boolean bnormalized)", "testcase": false, "constructor": false}, {"identifier": "movingMedian", "parameters": "(final int nperiods, final boolean bcentred)", "modifiers": "public", "return": "TsData", "signature": "TsData movingMedian(final int nperiods, final boolean bcentred)", "full_signature": "public TsData movingMedian(final int nperiods, final boolean bcentred)", "class_method_signature": "TsData.movingMedian(final int nperiods, final boolean bcentred)", "testcase": false, "constructor": false}, {"identifier": "pctVariation", "parameters": "(final int lag)", "modifiers": "public", "return": "TsData", "signature": "TsData pctVariation(final int lag)", "full_signature": "public TsData pctVariation(final int lag)", "class_method_signature": "TsData.pctVariation(final int lag)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(final double d)", "modifiers": "public", "return": "TsData", "signature": "TsData plus(final double d)", "full_signature": "public TsData plus(final double d)", "class_method_signature": "TsData.plus(final double d)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(final TsData ts)", "modifiers": "public", "return": "TsData", "signature": "TsData plus(final TsData ts)", "full_signature": "public TsData plus(final TsData ts)", "class_method_signature": "TsData.plus(final TsData ts)", "testcase": false, "constructor": false}, {"identifier": "pow", "parameters": "(final double e)", "modifiers": "public", "return": "TsData", "signature": "TsData pow(final double e)", "full_signature": "public TsData pow(final double e)", "class_method_signature": "TsData.pow(final double e)", "testcase": false, "constructor": false}, {"identifier": "select", "parameters": "(final TsPeriodSelector ps)", "modifiers": "public", "return": "TsData", "signature": "TsData select(final TsPeriodSelector ps)", "full_signature": "public TsData select(final TsPeriodSelector ps)", "class_method_signature": "TsData.select(final TsPeriodSelector ps)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(final int idx, final double value)", "modifiers": "public", "return": "void", "signature": "void set(final int idx, final double value)", "full_signature": "public void set(final int idx, final double value)", "class_method_signature": "TsData.set(final int idx, final double value)", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(final double d)", "modifiers": "public", "return": "TsData", "signature": "TsData times(final double d)", "full_signature": "public TsData times(final double d)", "class_method_signature": "TsData.times(final double d)", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(final TsData ts)", "modifiers": "public", "return": "TsData", "signature": "TsData times(final TsData ts)", "full_signature": "public TsData times(final TsData ts)", "class_method_signature": "TsData.times(final TsData ts)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(final TsData ts)", "modifiers": "public", "return": "TsData", "signature": "TsData update(final TsData ts)", "full_signature": "public TsData update(final TsData ts)", "class_method_signature": "TsData.update(final TsData ts)", "testcase": false, "constructor": false}, {"identifier": "concatenate", "parameters": "(TsData l, TsData r)", "modifiers": "public static", "return": "TsData", "signature": "TsData concatenate(TsData l, TsData r)", "full_signature": "public static TsData concatenate(TsData l, TsData r)", "class_method_signature": "TsData.concatenate(TsData l, TsData r)", "testcase": false, "constructor": false}, {"identifier": "removeMean", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void removeMean()", "full_signature": "public void removeMean()", "class_method_signature": "TsData.removeMean()", "testcase": false, "constructor": false}, {"identifier": "normalize", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void normalize()", "full_signature": "public void normalize()", "class_method_signature": "TsData.normalize()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(TsPeriod period)", "modifiers": "public", "return": "double", "signature": "double get(TsPeriod period)", "full_signature": "public double get(TsPeriod period)", "class_method_signature": "TsData.get(TsPeriod period)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(TsPeriod period, double value)", "modifiers": "public", "return": "void", "signature": "void set(TsPeriod period, double value)", "full_signature": "public void set(TsPeriod period, double value)", "class_method_signature": "TsData.set(TsPeriod period, double value)", "testcase": false, "constructor": false}, {"identifier": "internalStorage", "parameters": "()", "modifiers": "@Unsafe public", "return": "double[]", "signature": "double[] internalStorage()", "full_signature": "@Unsafe public double[] internalStorage()", "class_method_signature": "TsData.internalStorage()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TsData.toString()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TsData.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "TsData.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(TsData other)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(TsData other)", "full_signature": "public boolean equals(TsData other)", "class_method_signature": "TsData.equals(TsData other)", "testcase": false, "constructor": false}, {"identifier": "computeRecursively", "parameters": "(final double initial, DoubleBinaryOperator fn)", "modifiers": "@Override public", "return": "double", "signature": "double computeRecursively(final double initial, DoubleBinaryOperator fn)", "full_signature": "@Override public double computeRecursively(final double initial, DoubleBinaryOperator fn)", "class_method_signature": "TsData.computeRecursively(final double initial, DoubleBinaryOperator fn)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(DoubleUnaryOperator fn)", "modifiers": "public", "return": "void", "signature": "void apply(DoubleUnaryOperator fn)", "full_signature": "public void apply(DoubleUnaryOperator fn)", "class_method_signature": "TsData.apply(DoubleUnaryOperator fn)", "testcase": false, "constructor": false}, {"identifier": "applyIf", "parameters": "(DoublePredicate pred, DoubleUnaryOperator fn)", "modifiers": "public", "return": "void", "signature": "void applyIf(DoublePredicate pred, DoubleUnaryOperator fn)", "full_signature": "public void applyIf(DoublePredicate pred, DoubleUnaryOperator fn)", "class_method_signature": "TsData.applyIf(DoublePredicate pred, DoubleUnaryOperator fn)", "testcase": false, "constructor": false}, {"identifier": "applyOnFinite", "parameters": "(DoubleUnaryOperator fn)", "modifiers": "public", "return": "void", "signature": "void applyOnFinite(DoubleUnaryOperator fn)", "full_signature": "public void applyOnFinite(DoubleUnaryOperator fn)", "class_method_signature": "TsData.applyOnFinite(DoubleUnaryOperator fn)", "testcase": false, "constructor": false}, {"identifier": "applyRecursively", "parameters": "(final double initial, DoubleBinaryOperator fn)", "modifiers": "public", "return": "void", "signature": "void applyRecursively(final double initial, DoubleBinaryOperator fn)", "full_signature": "public void applyRecursively(final double initial, DoubleBinaryOperator fn)", "class_method_signature": "TsData.applyRecursively(final double initial, DoubleBinaryOperator fn)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(DoublePredicate pred)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean check(DoublePredicate pred)", "full_signature": "@Override public boolean check(DoublePredicate pred)", "class_method_signature": "TsData.check(DoublePredicate pred)", "testcase": false, "constructor": false}, {"identifier": "count", "parameters": "(DoublePredicate pred)", "modifiers": "@Override public", "return": "int", "signature": "int count(DoublePredicate pred)", "full_signature": "@Override public int count(DoublePredicate pred)", "class_method_signature": "TsData.count(DoublePredicate pred)", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "(DoublePredicate pred)", "modifiers": "@Override public", "return": "int", "signature": "int first(DoublePredicate pred)", "full_signature": "@Override public int first(DoublePredicate pred)", "class_method_signature": "TsData.first(DoublePredicate pred)", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "(DoublePredicate pred)", "modifiers": "@Override public", "return": "int", "signature": "int last(DoublePredicate pred)", "full_signature": "@Override public int last(DoublePredicate pred)", "class_method_signature": "TsData.last(DoublePredicate pred)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(DoubleUnaryOperator fn)", "modifiers": "public", "return": "TsData", "signature": "TsData transform(DoubleUnaryOperator fn)", "full_signature": "public TsData transform(DoubleUnaryOperator fn)", "class_method_signature": "TsData.transform(DoubleUnaryOperator fn)", "testcase": false, "constructor": false}, {"identifier": "transformFinite", "parameters": "(DoubleUnaryOperator fn)", "modifiers": "public", "return": "TsData", "signature": "TsData transformFinite(DoubleUnaryOperator fn)", "full_signature": "public TsData transformFinite(DoubleUnaryOperator fn)", "class_method_signature": "TsData.transformFinite(DoubleUnaryOperator fn)", "testcase": false, "constructor": false}, {"identifier": "autoTransform", "parameters": "(int lag, DoubleBinaryOperator fn)", "modifiers": "public", "return": "TsData", "signature": "TsData autoTransform(int lag, DoubleBinaryOperator fn)", "full_signature": "public TsData autoTransform(int lag, DoubleBinaryOperator fn)", "class_method_signature": "TsData.autoTransform(int lag, DoubleBinaryOperator fn)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(IReadDataBlock x, DoubleBinaryOperator fn)", "modifiers": "public", "return": "void", "signature": "void apply(IReadDataBlock x, DoubleBinaryOperator fn)", "full_signature": "public void apply(IReadDataBlock x, DoubleBinaryOperator fn)", "class_method_signature": "TsData.apply(IReadDataBlock x, DoubleBinaryOperator fn)", "testcase": false, "constructor": false}, {"identifier": "applyOnFinite", "parameters": "(IReadDataBlock x, DoubleBinaryOperator fn)", "modifiers": "public", "return": "void", "signature": "void applyOnFinite(IReadDataBlock x, DoubleBinaryOperator fn)", "full_signature": "public void applyOnFinite(IReadDataBlock x, DoubleBinaryOperator fn)", "class_method_signature": "TsData.applyOnFinite(IReadDataBlock x, DoubleBinaryOperator fn)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(DoubleSupplier fn)", "modifiers": "public", "return": "void", "signature": "void set(DoubleSupplier fn)", "full_signature": "public void set(DoubleSupplier fn)", "class_method_signature": "TsData.set(DoubleSupplier fn)", "testcase": false, "constructor": false}, {"identifier": "setIf", "parameters": "(DoublePredicate pred, DoubleSupplier fn)", "modifiers": "public", "return": "void", "signature": "void setIf(DoublePredicate pred, DoubleSupplier fn)", "full_signature": "public void setIf(DoublePredicate pred, DoubleSupplier fn)", "class_method_signature": "TsData.setIf(DoublePredicate pred, DoubleSupplier fn)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(IntToDoubleFunction fn)", "modifiers": "public", "return": "void", "signature": "void set(IntToDoubleFunction fn)", "full_signature": "public void set(IntToDoubleFunction fn)", "class_method_signature": "TsData.set(IntToDoubleFunction fn)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(IReadDataBlock x, DoubleUnaryOperator fn)", "modifiers": "public", "return": "void", "signature": "void set(IReadDataBlock x, DoubleUnaryOperator fn)", "full_signature": "public void set(IReadDataBlock x, DoubleUnaryOperator fn)", "class_method_signature": "TsData.set(IReadDataBlock x, DoubleUnaryOperator fn)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(IReadDataBlock x, IReadDataBlock y, DoubleBinaryOperator fn)", "modifiers": "public", "return": "void", "signature": "void set(IReadDataBlock x, IReadDataBlock y, DoubleBinaryOperator fn)", "full_signature": "public void set(IReadDataBlock x, IReadDataBlock y, DoubleBinaryOperator fn)", "class_method_signature": "TsData.set(IReadDataBlock x, IReadDataBlock y, DoubleBinaryOperator fn)", "testcase": false, "constructor": false}, {"identifier": "computeOnIntersection", "parameters": "(final TsData tsl, final TsData tsr, final DoubleBinaryOperator fn)", "modifiers": "public static", "return": "TsData", "signature": "TsData computeOnIntersection(final TsData tsl, final TsData tsr, final DoubleBinaryOperator fn)", "full_signature": "public static TsData computeOnIntersection(final TsData tsl, final TsData tsr, final DoubleBinaryOperator fn)", "class_method_signature": "TsData.computeOnIntersection(final TsData tsl, final TsData tsr, final DoubleBinaryOperator fn)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/timeseries/simplets/TsData.java"}, "focal_method": {"identifier": "drop", "parameters": "(final int nfirst, final int nlast)", "modifiers": "public", "return": "TsData", "body": "public TsData drop(final int nfirst, final int nlast) {\n        TsPeriod s = getStart();\n        s.move(nfirst);\n        int n = vals.length - nfirst - nlast;\n        if (n < 0) {\n            n = 0;\n        }\n        TsData nts = new TsData(s, n);\n        if (n == 0) {\n            return nts;\n        }\n        int nc = n;\n        int s0, t0;\n        if (nfirst < 0) {\n            nc += nfirst;\n            t0 = -nfirst;\n            s0 = 0;\n            Arrays.fill(nts.vals, 0, -nfirst, Double.NaN);\n        } else {\n            s0 = nfirst;\n            t0 = 0;\n        }\n        if (nlast < 0) {\n            nc += nlast;\n            Arrays.fill(nts.vals, nts.vals.length + nlast, nts.vals.length, Double.NaN);\n        }\n        if (nc > 0) {\n            System.arraycopy(vals, s0, nts.vals, t0, nc);\n        }\n        return nts;\n    }", "signature": "TsData drop(final int nfirst, final int nlast)", "full_signature": "public TsData drop(final int nfirst, final int nlast)", "class_method_signature": "TsData.drop(final int nfirst, final int nlast)", "testcase": false, "constructor": false, "invocations": ["getStart", "move", "fill", "fill", "arraycopy"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}