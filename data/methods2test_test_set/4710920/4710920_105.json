{"test_class": {"identifier": "MockClusterInvokerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "List<Invoker<IHelloService>> invokers = new ArrayList<Invoker<IHelloService>>();", "modifier": "", "type": "List<Invoker<IHelloService>>", "declarator": "invokers = new ArrayList<Invoker<IHelloService>>()", "var_name": "invokers"}], "file": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvokerTest.java"}, "test_case": {"identifier": "testMockInvokerInvoke_normal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMockInvokerInvoke_normal() {\n        URL url = URL.valueOf(\"remote://1.2.3.4/\" + IHelloService.class.getName());\n        url = url.addParameter(MOCK_KEY, \"fail\")\n                .addParameter(REFER_KEY, URL.encode(PATH_KEY + \"=\" + IHelloService.class.getName()));\n        Invoker<IHelloService> cluster = getClusterInvoker(url);\n        URL mockUrl = URL.valueOf(\"mock://localhost/\" + IHelloService.class.getName()\n                + \"?getSomething.mock=return aa\");\n\n        Protocol protocol = new MockProtocol();\n        Invoker<IHelloService> mInvoker1 = protocol.refer(IHelloService.class, mockUrl);\n        invokers.add(mInvoker1);\n\n        //Configured with mock\n        RpcInvocation invocation = new RpcInvocation();\n        invocation.setMethodName(\"getSomething\");\n        Result ret = cluster.invoke(invocation);\n        Assertions.assertEquals(\"something\", ret.getValue());\n\n        // If no mock was configured, return null directly\n        invocation = new RpcInvocation();\n        invocation.setMethodName(\"sayHello\");\n        ret = cluster.invoke(invocation);\n        Assertions.assertNull(ret.getValue());\n    }", "signature": "void testMockInvokerInvoke_normal()", "full_signature": "@Test public void testMockInvokerInvoke_normal()", "class_method_signature": "MockClusterInvokerTest.testMockInvokerInvoke_normal()", "testcase": true, "constructor": false, "invocations": ["valueOf", "getName", "addParameter", "addParameter", "encode", "getName", "getClusterInvoker", "valueOf", "getName", "refer", "add", "setMethodName", "invoke", "assertEquals", "getValue", "setMethodName", "invoke", "assertNull", "getValue"]}, "focal_class": {"identifier": "MockClusterInvoker", "superclass": "", "interfaces": "implements ClusterInvoker<T>", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(MockClusterInvoker.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(MockClusterInvoker.class)", "var_name": "logger"}, {"original_string": "private final Directory<T> directory;", "modifier": "private final", "type": "Directory<T>", "declarator": "directory", "var_name": "directory"}, {"original_string": "private final Invoker<T> invoker;", "modifier": "private final", "type": "Invoker<T>", "declarator": "invoker", "var_name": "invoker"}], "methods": [{"identifier": "MockClusterInvoker", "parameters": "(Directory<T> directory, Invoker<T> invoker)", "modifiers": "public", "return": "", "signature": " MockClusterInvoker(Directory<T> directory, Invoker<T> invoker)", "full_signature": "public  MockClusterInvoker(Directory<T> directory, Invoker<T> invoker)", "class_method_signature": "MockClusterInvoker.MockClusterInvoker(Directory<T> directory, Invoker<T> invoker)", "testcase": false, "constructor": true}, {"identifier": "getUrl", "parameters": "()", "modifiers": "@Override public", "return": "URL", "signature": "URL getUrl()", "full_signature": "@Override public URL getUrl()", "class_method_signature": "MockClusterInvoker.getUrl()", "testcase": false, "constructor": false}, {"identifier": "getRegistryUrl", "parameters": "()", "modifiers": "public", "return": "URL", "signature": "URL getRegistryUrl()", "full_signature": "public URL getRegistryUrl()", "class_method_signature": "MockClusterInvoker.getRegistryUrl()", "testcase": false, "constructor": false}, {"identifier": "getDirectory", "parameters": "()", "modifiers": "@Override public", "return": "Directory<T>", "signature": "Directory<T> getDirectory()", "full_signature": "@Override public Directory<T> getDirectory()", "class_method_signature": "MockClusterInvoker.getDirectory()", "testcase": false, "constructor": false}, {"identifier": "isDestroyed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDestroyed()", "full_signature": "@Override public boolean isDestroyed()", "class_method_signature": "MockClusterInvoker.isDestroyed()", "testcase": false, "constructor": false}, {"identifier": "isAvailable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAvailable()", "full_signature": "@Override public boolean isAvailable()", "class_method_signature": "MockClusterInvoker.isAvailable()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "MockClusterInvoker.destroy()", "testcase": false, "constructor": false}, {"identifier": "getInterface", "parameters": "()", "modifiers": "@Override public", "return": "Class<T>", "signature": "Class<T> getInterface()", "full_signature": "@Override public Class<T> getInterface()", "class_method_signature": "MockClusterInvoker.getInterface()", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(Invocation invocation)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invocation invocation)", "full_signature": "@Override public Result invoke(Invocation invocation)", "class_method_signature": "MockClusterInvoker.invoke(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "doMockInvoke", "parameters": "(Invocation invocation, RpcException e)", "modifiers": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) private", "return": "Result", "signature": "Result doMockInvoke(Invocation invocation, RpcException e)", "full_signature": "@SuppressWarnings({\"unchecked\", \"rawtypes\"}) private Result doMockInvoke(Invocation invocation, RpcException e)", "class_method_signature": "MockClusterInvoker.doMockInvoke(Invocation invocation, RpcException e)", "testcase": false, "constructor": false}, {"identifier": "getMockExceptionMessage", "parameters": "(Throwable t, Throwable mt)", "modifiers": "private", "return": "String", "signature": "String getMockExceptionMessage(Throwable t, Throwable mt)", "full_signature": "private String getMockExceptionMessage(Throwable t, Throwable mt)", "class_method_signature": "MockClusterInvoker.getMockExceptionMessage(Throwable t, Throwable mt)", "testcase": false, "constructor": false}, {"identifier": "selectMockInvoker", "parameters": "(Invocation invocation)", "modifiers": "private", "return": "List<Invoker<T>>", "signature": "List<Invoker<T>> selectMockInvoker(Invocation invocation)", "full_signature": "private List<Invoker<T>> selectMockInvoker(Invocation invocation)", "class_method_signature": "MockClusterInvoker.selectMockInvoker(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MockClusterInvoker.toString()", "testcase": false, "constructor": false}], "file": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java"}, "focal_method": {"identifier": "invoke", "parameters": "(Invocation invocation)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result invoke(Invocation invocation) throws RpcException {\n        Result result = null;\n\n        String value = getUrl().getMethodParameter(invocation.getMethodName(), MOCK_KEY, Boolean.FALSE.toString()).trim();\n        if (value.length() == 0 || \"false\".equalsIgnoreCase(value)) {\n            //no mock\n            result = this.invoker.invoke(invocation);\n        } else if (value.startsWith(\"force\")) {\n            if (logger.isWarnEnabled()) {\n                logger.warn(\"force-mock: \" + invocation.getMethodName() + \" force-mock enabled , url : \" + getUrl());\n            }\n            //force:direct mock\n            result = doMockInvoke(invocation, null);\n        } else {\n            //fail-mock\n            try {\n                result = this.invoker.invoke(invocation);\n\n                //fix:#4585\n                if(result.getException() != null && result.getException() instanceof RpcException){\n                    RpcException rpcException= (RpcException)result.getException();\n                    if(rpcException.isBiz()){\n                        throw  rpcException;\n                    }else {\n                        result = doMockInvoke(invocation, rpcException);\n                    }\n                }\n\n            } catch (RpcException e) {\n                if (e.isBiz()) {\n                    throw e;\n                }\n\n                if (logger.isWarnEnabled()) {\n                    logger.warn(\"fail-mock: \" + invocation.getMethodName() + \" fail-mock enabled , url : \" + getUrl(), e);\n                }\n                result = doMockInvoke(invocation, e);\n            }\n        }\n        return result;\n    }", "signature": "Result invoke(Invocation invocation)", "full_signature": "@Override public Result invoke(Invocation invocation)", "class_method_signature": "MockClusterInvoker.invoke(Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["trim", "getMethodParameter", "getUrl", "getMethodName", "toString", "length", "equalsIgnoreCase", "invoke", "startsWith", "isWarnEnabled", "warn", "getMethodName", "getUrl", "doMockInvoke", "invoke", "getException", "getException", "getException", "isBiz", "doMockInvoke", "isBiz", "isWarnEnabled", "warn", "getMethodName", "getUrl", "doMockInvoke"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}