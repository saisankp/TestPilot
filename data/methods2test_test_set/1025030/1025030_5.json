{"test_class": {"identifier": "JavaImageIOCompareTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "String wsdlLoc = \"/pserv-pa-java-se/JavaImageIOCompare?wsdl\";", "modifier": "", "type": "String", "declarator": "wsdlLoc = \"/pserv-pa-java-se/JavaImageIOCompare?wsdl\"", "var_name": "wsdlLoc"}, {"original_string": "Compare ids = null;", "modifier": "", "type": "Compare", "declarator": "ids = null", "var_name": "ids"}], "file": "services/java-se/src/test/java/eu/planets_project/services/java_se/image/JavaImageIOCompareTest.java"}, "test_case": {"identifier": "testCompare", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompare() throws MalformedURLException, URISyntaxException {\n        // Same:\n        testCompareThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-lowq-jpg.test\"), \n                new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-lowq-jpg.test\"), true );\n        testCompareThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-lowq-png.test\"), \n                new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-lowq-png.test\"), true);\n        testCompareThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-lowq-png.test\"), \n                new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-lowq-jpg.test\"), true);\n        testCompareThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo.png\"), \n                new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo.png\"), true);\n        /* These don't seem to work in server mode, as if the JAR is not being picked up.\n        testCompareThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo.png\"), \n                new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo.tif\"), true);\n        testCompareThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo.png\"), \n                new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo.jp2\"), true);\n                */\n        // Different, and indeed no alpha channel:\n        testCompareThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo.png\"), \n                new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-lowq-png.test\"), false);\n        testCompareThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo.png\"), \n                new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-1.jpg\"), false);\n        testCompareThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo.png\"), \n                new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-2.jpg\"), false);\n        // Different, but same number of colour components (i.e. Alpha channel in both):\n        testCompareThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo.png\"), \n                new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo.gif\"), false);\n        testCompareThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo.png\"), \n                new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-resamp-nn.png\"), false);\n        testCompareThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo.png\"), \n                new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-resamp-bc.png\"), false);\n        testCompareThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-noalpha.png\"), \n                new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-2.jpg\"), false);\n        testCompareThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-noalpha.png\"), \n                new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-noalpha-dotted.png\"), false);\n        // Comparing a high-quality JPEG with poorer ones:\n        testCompareThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-2.jpg\"), \n                new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-lowq-jpg.test\"), false);\n        testCompareThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-2.jpg\"), \n                new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-2-q70.jpg\"), false);\n        testCompareThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-2.jpg\"), \n                new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-2-q80.jpg\"), false);\n        testCompareThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-2.jpg\"), \n                new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-2-q90.jpg\"), false);\n        testCompareThis(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-2.jpg\"), \n                new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION+\"PlanetsLogo-2-q95.jpg\"), false);\n    }", "signature": "void testCompare()", "full_signature": "@Test public void testCompare()", "class_method_signature": "JavaImageIOCompareTest.testCompare()", "testcase": true, "constructor": false, "invocations": ["testCompareThis", "testCompareThis", "testCompareThis", "testCompareThis", "testCompareThis", "testCompareThis", "testCompareThis", "testCompareThis", "testCompareThis", "testCompareThis", "testCompareThis", "testCompareThis", "testCompareThis", "testCompareThis", "testCompareThis", "testCompareThis", "testCompareThis"]}, "focal_class": {"identifier": "JavaImageIOCompare", "superclass": "", "interfaces": "implements Compare", "fields": [{"original_string": "public static final String NAME = \"JavaImageIOCompare\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"JavaImageIOCompare\"", "var_name": "NAME"}, {"original_string": "private static Logger log = Logger.getLogger(JavaImageIOCompare.class.getName());", "modifier": "private static", "type": "Logger", "declarator": "log = Logger.getLogger(JavaImageIOCompare.class.getName())", "var_name": "log"}, {"original_string": "public static final URI PSNR_URI = URI.create(\"planets:pc/compare/image/psnr\");", "modifier": "public static final", "type": "URI", "declarator": "PSNR_URI = URI.create(\"planets:pc/compare/image/psnr\")", "var_name": "PSNR_URI"}], "methods": [{"identifier": "buildPsnrProperty", "parameters": "( double psnr )", "modifiers": "public static", "return": "PropertyComparison", "signature": "PropertyComparison buildPsnrProperty( double psnr )", "full_signature": "public static PropertyComparison buildPsnrProperty( double psnr )", "class_method_signature": "JavaImageIOCompare.buildPsnrProperty( double psnr )", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(DigitalObject first, DigitalObject second,\n            List<Parameter> config)", "modifiers": "public", "return": "CompareResult", "signature": "CompareResult compare(DigitalObject first, DigitalObject second,\n            List<Parameter> config)", "full_signature": "public CompareResult compare(DigitalObject first, DigitalObject second,\n            List<Parameter> config)", "class_method_signature": "JavaImageIOCompare.compare(DigitalObject first, DigitalObject second,\n            List<Parameter> config)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(DigitalObject configFile)", "modifiers": "public", "return": "List<Parameter>", "signature": "List<Parameter> convert(DigitalObject configFile)", "full_signature": "public List<Parameter> convert(DigitalObject configFile)", "class_method_signature": "JavaImageIOCompare.convert(DigitalObject configFile)", "testcase": false, "constructor": false}, {"identifier": "describe", "parameters": "()", "modifiers": "public", "return": "ServiceDescription", "signature": "ServiceDescription describe()", "full_signature": "public ServiceDescription describe()", "class_method_signature": "JavaImageIOCompare.describe()", "testcase": false, "constructor": false}, {"identifier": "psnr", "parameters": "( BufferedImage i1, BufferedImage i2 )", "modifiers": "private static", "return": "Double", "signature": "Double psnr( BufferedImage i1, BufferedImage i2 )", "full_signature": "private static Double psnr( BufferedImage i1, BufferedImage i2 )", "class_method_signature": "JavaImageIOCompare.psnr( BufferedImage i1, BufferedImage i2 )", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "( String[] args )", "modifiers": "public static", "return": "void", "signature": "void main( String[] args )", "full_signature": "public static void main( String[] args )", "class_method_signature": "JavaImageIOCompare.main( String[] args )", "testcase": false, "constructor": false}], "file": "services/java-se/src/main/java/eu/planets_project/services/java_se/image/JavaImageIOCompare.java"}, "focal_method": {"identifier": "compare", "parameters": "(DigitalObject first, DigitalObject second,\n            List<Parameter> config)", "modifiers": "public", "return": "CompareResult", "body": "public CompareResult compare(DigitalObject first, DigitalObject second,\n            List<Parameter> config) {\n        // Start timing...\n        ServicePerformanceHelper sph = new ServicePerformanceHelper();\n        \n        // Initialise what will be built:\n        List<PropertyComparison> props = new ArrayList<PropertyComparison>();\n        ServiceReport sr = null;\n        \n        // Load the images.\n        BufferedImage i1;\n        BufferedImage i2;\n        try {\n            i1 = ImageIO.read( first.getContent().getInputStream() );\n            i2 = ImageIO.read( second.getContent().getInputStream() );\n        } catch (IOException e) {\n            return new CompareResult(null, ServiceUtils.createExceptionErrorReport(\"IOException reading the images. \", e));\n        }\n        if( i1 == null || i2 == null ) {\n            log.warning(\"One of the images was null when loaded!\");\n            return new CompareResult(null, ServiceUtils.createErrorReport(\"Error reading the images, got a NULL.\"));\n        }\n        // Record time take to load the inputs into memory:\n        sph.loaded();\n        \n        // Check comparison is possible: Are the dimensions the same?\n        if (i1.getWidth() != i2.getWidth() || i1.getHeight() != i2.getHeight()) {\n            // FIXME is this really an error, or rather a 'images are different' result?\n            return new CompareResult(null, ServiceUtils.createErrorReport(\"The image dimensions must match!\"));\n        }\n        // FIXME Check comparison is sensible: are there the same number of channels? This is probably a WARNING?\n        if( i1.getColorModel().getNumComponents() != i2.getColorModel().getNumComponents()) {\n            System.out.println(\"The number of colour components does not match. \"+i1.getColorModel().getNumComponents()+\" != \"+i2.getColorModel().getNumComponents());\n            log.warning(\"The number of colour components does not match. \"+i1.getColorModel().getNumComponents()+\" != \"+i2.getColorModel().getNumComponents());\n            sr = new ServiceReport(ServiceReport.Type.WARN, ServiceReport.Status.SUCCESS, \"Number of colour components was not the same. The missing channels, e.g. the alpha channel, will be assumed to be zero.\");\n            // FIXME I think this should be more serious, as the results can be rather misleading.\n            // The comparison assumes the bit-mask to be zero everywhere, but this did not lead to such a bad PSNR?!\n        }\n\n        // Run the comparison:\n        double psnr = psnr(i1, i2);\n        props.add( buildPsnrProperty(psnr) );\n        \n        // Create a happy service report if no problems occurred.\n        if( sr == null) {\n            // Also store some service properties:\n            sr = new ServiceReport(ServiceReport.Type.INFO, ServiceReport.Status.SUCCESS, \n                    \"Comparison succeeded.\", sph.getPerformanceProperties() );\n        }\n        \n        // Halt performance measurement:\n        sph.stop();\n\n        // Return the result:\n        return new CompareResult( props, sr );\n    }", "signature": "CompareResult compare(DigitalObject first, DigitalObject second,\n            List<Parameter> config)", "full_signature": "public CompareResult compare(DigitalObject first, DigitalObject second,\n            List<Parameter> config)", "class_method_signature": "JavaImageIOCompare.compare(DigitalObject first, DigitalObject second,\n            List<Parameter> config)", "testcase": false, "constructor": false, "invocations": ["read", "getInputStream", "getContent", "read", "getInputStream", "getContent", "createExceptionErrorReport", "warning", "createErrorReport", "loaded", "getWidth", "getWidth", "getHeight", "getHeight", "createErrorReport", "getNumComponents", "getColorModel", "getNumComponents", "getColorModel", "println", "getNumComponents", "getColorModel", "getNumComponents", "getColorModel", "warning", "getNumComponents", "getColorModel", "getNumComponents", "getColorModel", "psnr", "add", "buildPsnrProperty", "getPerformanceProperties", "stop"]}, "repository": {"repo_id": 1025030, "url": "https://github.com/opf-labs/planets-suite", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 198462, "license": "licensed"}}