{"test_class": {"identifier": "ResourcesUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public ExpectedException thrown= ExpectedException.none();", "modifier": "@Rule public", "type": "ExpectedException", "declarator": "thrown= ExpectedException.none()", "var_name": "thrown"}], "file": "gateleen-core/src/test/java/org/swisspush/gateleen/core/util/ResourcesUtilsTest.java"}, "test_case": {"identifier": "testLoadExisitingResourceNoException", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadExisitingResourceNoException(TestContext context){\n        String content = ResourcesUtils.loadResource(\"ResourcesUtilsTest_TestResource\", false);\n        context.assertNotNull(content, \"Resource should have been correctly loaded\");\n        context.assertTrue(content.contains(\"This is a test resource for the ResourcesUtilsTest class\"), \"Content of resource not as expected\");\n    }", "signature": "void testLoadExisitingResourceNoException(TestContext context)", "full_signature": "@Test public void testLoadExisitingResourceNoException(TestContext context)", "class_method_signature": "ResourcesUtilsTest.testLoadExisitingResourceNoException(TestContext context)", "testcase": true, "constructor": false, "invocations": ["loadResource", "assertNotNull", "assertTrue", "contains"]}, "focal_class": {"identifier": "ResourcesUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(ResourcesUtils.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ResourcesUtils.class)", "var_name": "log"}], "methods": [{"identifier": "ResourcesUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " ResourcesUtils()", "full_signature": "private  ResourcesUtils()", "class_method_signature": "ResourcesUtils.ResourcesUtils()", "testcase": false, "constructor": true}, {"identifier": "loadResource", "parameters": "(String resourceName, boolean exceptionWhenNotFound)", "modifiers": "public static", "return": "String", "signature": "String loadResource(String resourceName, boolean exceptionWhenNotFound)", "full_signature": "public static String loadResource(String resourceName, boolean exceptionWhenNotFound)", "class_method_signature": "ResourcesUtils.loadResource(String resourceName, boolean exceptionWhenNotFound)", "testcase": false, "constructor": false}], "file": "gateleen-core/src/main/java/org/swisspush/gateleen/core/util/ResourcesUtils.java"}, "focal_method": {"identifier": "loadResource", "parameters": "(String resourceName, boolean exceptionWhenNotFound)", "modifiers": "public static", "return": "String", "body": "public static String loadResource(String resourceName, boolean exceptionWhenNotFound) {\n        try {\n            URL url = Resources.getResource(resourceName);\n            return Resources.toString(url, Charsets.UTF_8);\n        } catch (Exception e) {\n            log.error(\"Error loading resource '\"+resourceName+\"'\", e);\n            if(exceptionWhenNotFound){\n                throw new RuntimeException(\"Error loading required resource '\"+resourceName+\"'\");\n            }\n            return null;\n        }\n    }", "signature": "String loadResource(String resourceName, boolean exceptionWhenNotFound)", "full_signature": "public static String loadResource(String resourceName, boolean exceptionWhenNotFound)", "class_method_signature": "ResourcesUtils.loadResource(String resourceName, boolean exceptionWhenNotFound)", "testcase": false, "constructor": false, "invocations": ["getResource", "toString", "error"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}