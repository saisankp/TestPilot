{"test_class": {"identifier": "GroupTest", "superclass": "extends AbstractUnitTest", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(GroupTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(GroupTest.class)", "var_name": "log"}, {"original_string": "private Group topGroup;", "modifier": "private", "type": "Group", "declarator": "topGroup", "var_name": "topGroup"}, {"original_string": "private Group level1Group;", "modifier": "private", "type": "Group", "declarator": "level1Group", "var_name": "level1Group"}, {"original_string": "private Group level2Group;", "modifier": "private", "type": "Group", "declarator": "level2Group", "var_name": "level2Group"}, {"original_string": "protected EPersonService ePersonService = EPersonServiceFactory.getInstance().getEPersonService();", "modifier": "protected", "type": "EPersonService", "declarator": "ePersonService = EPersonServiceFactory.getInstance().getEPersonService()", "var_name": "ePersonService"}, {"original_string": "protected GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();", "modifier": "protected", "type": "GroupService", "declarator": "groupService = EPersonServiceFactory.getInstance().getGroupService()", "var_name": "groupService"}], "file": "dspace-api/src/test/java/org/dspace/eperson/GroupTest.java"}, "test_case": {"identifier": "removeMemberEPerson", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void removeMemberEPerson() throws SQLException, AuthorizeException, EPersonDeletionException, IOException {\n        EPerson ePerson = null;\n        try {\n            // Test normal behavior, add user to group & remove\n            ePerson = createEPersonAndAddToGroup(\"removeMemberEPerson@dspace.org\", level2Group);\n            context.setCurrentUser(ePerson);\n            assertTrue(groupService.isMember(context, topGroup));\n            assertTrue(groupService.isMember(context, level1Group));\n            assertTrue(groupService.isMember(context, level2Group));\n            groupService.removeMember(context, level2Group, ePerson);\n            assertFalse(groupService.isMember(context, topGroup));\n            assertFalse(groupService.isMember(context, level1Group));\n            assertFalse(groupService.isMember(context, level2Group));\n\n\n            //Test non recursive removal, if not a member do not add\n            groupService.addMember(context, level2Group, ePerson);\n            assertTrue(groupService.isMember(context, topGroup));\n            assertTrue(groupService.isMember(context, level1Group));\n            assertTrue(groupService.isMember(context, level2Group));\n            groupService.removeMember(context, topGroup, ePerson);\n            assertTrue(groupService.isMember(context, topGroup));\n            assertTrue(groupService.isMember(context, level1Group));\n            assertTrue(groupService.isMember(context, level2Group));\n        } finally {\n            if(ePerson != null)\n            {\n                context.turnOffAuthorisationSystem();\n                ePersonService.delete(context, ePerson);\n            }\n        }\n    }", "signature": "void removeMemberEPerson()", "full_signature": "@Test public void removeMemberEPerson()", "class_method_signature": "GroupTest.removeMemberEPerson()", "testcase": true, "constructor": false, "invocations": ["createEPersonAndAddToGroup", "setCurrentUser", "assertTrue", "isMember", "assertTrue", "isMember", "assertTrue", "isMember", "removeMember", "assertFalse", "isMember", "assertFalse", "isMember", "assertFalse", "isMember", "addMember", "assertTrue", "isMember", "assertTrue", "isMember", "assertTrue", "isMember", "removeMember", "assertTrue", "isMember", "assertTrue", "isMember", "assertTrue", "isMember", "turnOffAuthorisationSystem", "delete"]}, "focal_class": {"identifier": "Group", "superclass": "extends DSpaceObject", "interfaces": "implements DSpaceObjectLegacySupport", "fields": [{"original_string": "@Transient\n    public static final String ANONYMOUS = \"Anonymous\";", "modifier": "@Transient\n    public static final", "type": "String", "declarator": "ANONYMOUS = \"Anonymous\"", "var_name": "ANONYMOUS"}, {"original_string": "@Transient\n    public static final String ADMIN = \"Administrator\";", "modifier": "@Transient\n    public static final", "type": "String", "declarator": "ADMIN = \"Administrator\"", "var_name": "ADMIN"}, {"original_string": "@Column(name=\"eperson_group_id\", insertable = false, updatable = false)\n    private Integer legacyId;", "modifier": "@Column(name=\"eperson_group_id\", insertable = false, updatable = false)\n    private", "type": "Integer", "declarator": "legacyId", "var_name": "legacyId"}, {"original_string": "@Column\n    private Boolean permanent = false;", "modifier": "@Column\n    private", "type": "Boolean", "declarator": "permanent = false", "var_name": "permanent"}, {"original_string": "@Column(length = 250, unique = true)\n    private String name;", "modifier": "@Column(length = 250, unique = true)\n    private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "@ManyToMany(fetch = FetchType.LAZY)\n    @JoinTable(\n            name = \"epersongroup2eperson\",\n            joinColumns = {@JoinColumn(name = \"eperson_group_id\") },\n            inverseJoinColumns = {@JoinColumn(name = \"eperson_id\") }\n    )\n    private final List<EPerson> epeople = new ArrayList<>();", "modifier": "@ManyToMany(fetch = FetchType.LAZY)\n    @JoinTable(\n            name = \"epersongroup2eperson\",\n            joinColumns = {@JoinColumn(name = \"eperson_group_id\") },\n            inverseJoinColumns = {@JoinColumn(name = \"eperson_id\") }\n    )\n    private final", "type": "List<EPerson>", "declarator": "epeople = new ArrayList<>()", "var_name": "epeople"}, {"original_string": "@ManyToMany(fetch = FetchType.LAZY)\n    @JoinTable(\n            name = \"group2group\",\n            joinColumns = {@JoinColumn(name = \"parent_id\") },\n            inverseJoinColumns = {@JoinColumn(name = \"child_id\") }\n    )\n    private final List<Group> groups = new ArrayList<>();", "modifier": "@ManyToMany(fetch = FetchType.LAZY)\n    @JoinTable(\n            name = \"group2group\",\n            joinColumns = {@JoinColumn(name = \"parent_id\") },\n            inverseJoinColumns = {@JoinColumn(name = \"child_id\") }\n    )\n    private final", "type": "List<Group>", "declarator": "groups = new ArrayList<>()", "var_name": "groups"}, {"original_string": "@ManyToMany(fetch = FetchType.LAZY, mappedBy = \"groups\")\n    private final List<Group> parentGroups = new ArrayList<>();", "modifier": "@ManyToMany(fetch = FetchType.LAZY, mappedBy = \"groups\")\n    private final", "type": "List<Group>", "declarator": "parentGroups = new ArrayList<>()", "var_name": "parentGroups"}, {"original_string": "@ManyToMany(fetch = FetchType.LAZY, mappedBy = \"supervisorGroups\")\n    private final List<WorkspaceItem> supervisedItems = new ArrayList<>();", "modifier": "@ManyToMany(fetch = FetchType.LAZY, mappedBy = \"supervisorGroups\")\n    private final", "type": "List<WorkspaceItem>", "declarator": "supervisedItems = new ArrayList<>()", "var_name": "supervisedItems"}, {"original_string": "@Transient\n    private boolean groupsChanged;", "modifier": "@Transient\n    private", "type": "boolean", "declarator": "groupsChanged", "var_name": "groupsChanged"}], "methods": [{"identifier": "Group", "parameters": "()", "modifiers": "protected", "return": "", "signature": " Group()", "full_signature": "protected  Group()", "class_method_signature": "Group.Group()", "testcase": false, "constructor": true}, {"identifier": "addMember", "parameters": "(EPerson e)", "modifiers": "", "return": "void", "signature": "void addMember(EPerson e)", "full_signature": " void addMember(EPerson e)", "class_method_signature": "Group.addMember(EPerson e)", "testcase": false, "constructor": false}, {"identifier": "getMembers", "parameters": "()", "modifiers": "public", "return": "List<EPerson>", "signature": "List<EPerson> getMembers()", "full_signature": "public List<EPerson> getMembers()", "class_method_signature": "Group.getMembers()", "testcase": false, "constructor": false}, {"identifier": "addMember", "parameters": "(Group g)", "modifiers": "", "return": "void", "signature": "void addMember(Group g)", "full_signature": " void addMember(Group g)", "class_method_signature": "Group.addMember(Group g)", "testcase": false, "constructor": false}, {"identifier": "addParentGroup", "parameters": "(Group group)", "modifiers": "", "return": "void", "signature": "void addParentGroup(Group group)", "full_signature": " void addParentGroup(Group group)", "class_method_signature": "Group.addParentGroup(Group group)", "testcase": false, "constructor": false}, {"identifier": "removeParentGroup", "parameters": "(Group group)", "modifiers": "", "return": "void", "signature": "void removeParentGroup(Group group)", "full_signature": " void removeParentGroup(Group group)", "class_method_signature": "Group.removeParentGroup(Group group)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(EPerson e)", "modifiers": "", "return": "boolean", "signature": "boolean remove(EPerson e)", "full_signature": " boolean remove(EPerson e)", "class_method_signature": "Group.remove(EPerson e)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(Group g)", "modifiers": "", "return": "boolean", "signature": "boolean remove(Group g)", "full_signature": " boolean remove(Group g)", "class_method_signature": "Group.remove(Group g)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(Group g)", "modifiers": "", "return": "boolean", "signature": "boolean contains(Group g)", "full_signature": " boolean contains(Group g)", "class_method_signature": "Group.contains(Group g)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(EPerson e)", "modifiers": "", "return": "boolean", "signature": "boolean contains(EPerson e)", "full_signature": " boolean contains(EPerson e)", "class_method_signature": "Group.contains(EPerson e)", "testcase": false, "constructor": false}, {"identifier": "getParentGroups", "parameters": "()", "modifiers": "", "return": "List<Group>", "signature": "List<Group> getParentGroups()", "full_signature": " List<Group> getParentGroups()", "class_method_signature": "Group.getParentGroups()", "testcase": false, "constructor": false}, {"identifier": "getMemberGroups", "parameters": "()", "modifiers": "public", "return": "List<Group>", "signature": "List<Group> getMemberGroups()", "full_signature": "public List<Group> getMemberGroups()", "class_method_signature": "Group.getMemberGroups()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Group.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Group.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getType()", "full_signature": "@Override public int getType()", "class_method_signature": "Group.getType()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "Group.getName()", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "", "return": "void", "signature": "void setName(String name)", "full_signature": " void setName(String name)", "class_method_signature": "Group.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "isGroupsChanged", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isGroupsChanged()", "full_signature": "public boolean isGroupsChanged()", "class_method_signature": "Group.isGroupsChanged()", "testcase": false, "constructor": false}, {"identifier": "clearGroupsChanged", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clearGroupsChanged()", "full_signature": "public void clearGroupsChanged()", "class_method_signature": "Group.clearGroupsChanged()", "testcase": false, "constructor": false}, {"identifier": "getLegacyId", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getLegacyId()", "full_signature": "@Override public Integer getLegacyId()", "class_method_signature": "Group.getLegacyId()", "testcase": false, "constructor": false}, {"identifier": "getSupervisedItems", "parameters": "()", "modifiers": "public", "return": "List<WorkspaceItem>", "signature": "List<WorkspaceItem> getSupervisedItems()", "full_signature": "public List<WorkspaceItem> getSupervisedItems()", "class_method_signature": "Group.getSupervisedItems()", "testcase": false, "constructor": false}, {"identifier": "isPermanent", "parameters": "()", "modifiers": "public", "return": "Boolean", "signature": "Boolean isPermanent()", "full_signature": "public Boolean isPermanent()", "class_method_signature": "Group.isPermanent()", "testcase": false, "constructor": false}, {"identifier": "setPermanent", "parameters": "(boolean permanence)", "modifiers": "", "return": "void", "signature": "void setPermanent(boolean permanence)", "full_signature": " void setPermanent(boolean permanence)", "class_method_signature": "Group.setPermanent(boolean permanence)", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/eperson/Group.java"}, "focal_method": {"identifier": "addMember", "parameters": "(EPerson e)", "modifiers": "", "return": "void", "body": "void addMember(EPerson e)\n    {\n        getMembers().add(e);\n    }", "signature": "void addMember(EPerson e)", "full_signature": " void addMember(EPerson e)", "class_method_signature": "Group.addMember(EPerson e)", "testcase": false, "constructor": false, "invocations": ["add", "getMembers"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}