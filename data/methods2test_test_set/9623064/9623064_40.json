{"test_class": {"identifier": "SeleniumDownloaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String chromeDriverPath = \"/Users/yihua/Downloads/chromedriver\";", "modifier": "private", "type": "String", "declarator": "chromeDriverPath = \"/Users/yihua/Downloads/chromedriver\"", "var_name": "chromeDriverPath"}], "file": "webmagic-selenium/src/test/java/us/codecraft/webmagic/downloader/selenium/SeleniumDownloaderTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Ignore(\"need chrome driver\") @Test public", "return": "void", "body": "@Ignore(\"need chrome driver\")\n\t@Test\n\tpublic void test() {\n\t\tSeleniumDownloader seleniumDownloader = new SeleniumDownloader(chromeDriverPath);\n\t\tlong time1 = System.currentTimeMillis();\n\t\tfor (int i = 0; i < 100; i++) {\n\t\t\tPage page = seleniumDownloader.download(new Request(\"http://huaban.com/\"), new Task() {\n\t\t\t\t@Override\n\t\t\t\tpublic String getUUID() {\n\t\t\t\t\treturn \"huaban.com\";\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic Site getSite() {\n\t\t\t\t\treturn Site.me();\n\t\t\t\t}\n\t\t\t});\n\t\t\tSystem.out.println(page.getHtml().$(\"#waterfall\").links().regex(\".*pins.*\").all());\n\t\t}\n\t\tSystem.out.println(System.currentTimeMillis() - time1);\n\t}", "signature": "void test()", "full_signature": "@Ignore(\"need chrome driver\") @Test public void test()", "class_method_signature": "SeleniumDownloaderTest.test()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "download", "me", "println", "getHtml", "all", "regex", "links", "println", "currentTimeMillis"]}, "focal_class": {"identifier": "SeleniumDownloader", "superclass": "", "interfaces": "implements Downloader, Closeable", "fields": [{"original_string": "private volatile WebDriverPool webDriverPool;", "modifier": "private volatile", "type": "WebDriverPool", "declarator": "webDriverPool", "var_name": "webDriverPool"}, {"original_string": "private Logger logger = LoggerFactory.getLogger(getClass());", "modifier": "private", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(getClass())", "var_name": "logger"}, {"original_string": "private int sleepTime = 0;", "modifier": "private", "type": "int", "declarator": "sleepTime = 0", "var_name": "sleepTime"}, {"original_string": "private int poolSize = 1;", "modifier": "private", "type": "int", "declarator": "poolSize = 1", "var_name": "poolSize"}, {"original_string": "private static final String DRIVER_PHANTOMJS = \"phantomjs\";", "modifier": "private static final", "type": "String", "declarator": "DRIVER_PHANTOMJS = \"phantomjs\"", "var_name": "DRIVER_PHANTOMJS"}], "methods": [{"identifier": "SeleniumDownloader", "parameters": "(String chromeDriverPath)", "modifiers": "public", "return": "", "signature": " SeleniumDownloader(String chromeDriverPath)", "full_signature": "public  SeleniumDownloader(String chromeDriverPath)", "class_method_signature": "SeleniumDownloader.SeleniumDownloader(String chromeDriverPath)", "testcase": false, "constructor": true}, {"identifier": "SeleniumDownloader", "parameters": "()", "modifiers": "public", "return": "", "signature": " SeleniumDownloader()", "full_signature": "public  SeleniumDownloader()", "class_method_signature": "SeleniumDownloader.SeleniumDownloader()", "testcase": false, "constructor": true}, {"identifier": "setSleepTime", "parameters": "(int sleepTime)", "modifiers": "public", "return": "SeleniumDownloader", "signature": "SeleniumDownloader setSleepTime(int sleepTime)", "full_signature": "public SeleniumDownloader setSleepTime(int sleepTime)", "class_method_signature": "SeleniumDownloader.setSleepTime(int sleepTime)", "testcase": false, "constructor": false}, {"identifier": "download", "parameters": "(Request request, Task task)", "modifiers": "@Override public", "return": "Page", "signature": "Page download(Request request, Task task)", "full_signature": "@Override public Page download(Request request, Task task)", "class_method_signature": "SeleniumDownloader.download(Request request, Task task)", "testcase": false, "constructor": false}, {"identifier": "checkInit", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkInit()", "full_signature": "private void checkInit()", "class_method_signature": "SeleniumDownloader.checkInit()", "testcase": false, "constructor": false}, {"identifier": "setThread", "parameters": "(int thread)", "modifiers": "@Override public", "return": "void", "signature": "void setThread(int thread)", "full_signature": "@Override public void setThread(int thread)", "class_method_signature": "SeleniumDownloader.setThread(int thread)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SeleniumDownloader.close()", "testcase": false, "constructor": false}], "file": "webmagic-selenium/src/main/java/us/codecraft/webmagic/downloader/selenium/SeleniumDownloader.java"}, "focal_method": {"identifier": "download", "parameters": "(Request request, Task task)", "modifiers": "@Override public", "return": "Page", "body": "@Override\n\tpublic Page download(Request request, Task task) {\n\t\tcheckInit();\n\t\tWebDriver webDriver;\n\t\ttry {\n\t\t\twebDriver = webDriverPool.get();\n\t\t} catch (InterruptedException e) {\n\t\t\tlogger.warn(\"interrupted\", e);\n\t\t\treturn null;\n\t\t}\n\t\tlogger.info(\"downloading page \" + request.getUrl());\n\t\twebDriver.get(request.getUrl());\n\t\ttry {\n\t\t\tThread.sleep(sleepTime);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tWebDriver.Options manage = webDriver.manage();\n\t\tSite site = task.getSite();\n\t\tif (site.getCookies() != null) {\n\t\t\tfor (Map.Entry<String, String> cookieEntry : site.getCookies()\n\t\t\t\t\t.entrySet()) {\n\t\t\t\tCookie cookie = new Cookie(cookieEntry.getKey(),\n\t\t\t\t\t\tcookieEntry.getValue());\n\t\t\t\tmanage.addCookie(cookie);\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t * TODO You can add mouse event or other processes\n\t\t * \n\t\t * @author: bob.li.0718@gmail.com\n\t\t */\n\n\t\tWebElement webElement = webDriver.findElement(By.xpath(\"/html\"));\n\t\tString content = webElement.getAttribute(\"outerHTML\");\n\t\tPage page = new Page();\n\t\tpage.setRawText(content);\n\t\tpage.setHtml(new Html(content, request.getUrl()));\n\t\tpage.setUrl(new PlainText(request.getUrl()));\n\t\tpage.setRequest(request);\n\t\twebDriverPool.returnToPool(webDriver);\n\t\treturn page;\n\t}", "signature": "Page download(Request request, Task task)", "full_signature": "@Override public Page download(Request request, Task task)", "class_method_signature": "SeleniumDownloader.download(Request request, Task task)", "testcase": false, "constructor": false, "invocations": ["checkInit", "get", "warn", "info", "getUrl", "get", "getUrl", "sleep", "printStackTrace", "manage", "getSite", "getCookies", "entrySet", "getCookies", "getKey", "getValue", "addCookie", "findElement", "xpath", "getAttribute", "setRawText", "setHtml", "getUrl", "setUrl", "getUrl", "setRequest", "returnToPool"]}, "repository": {"repo_id": 9623064, "url": "https://github.com/code4craft/webmagic", "language": "Java", "is_fork": false, "fork_count": 3804, "stargazer_count": 9136, "size": 17041, "license": "licensed"}}