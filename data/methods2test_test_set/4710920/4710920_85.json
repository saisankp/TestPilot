{"test_class": {"identifier": "RoundRobinLoadBalanceTest", "superclass": "extends LoadBalanceBaseTest", "interfaces": "", "fields": [], "file": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/loadbalance/RoundRobinLoadBalanceTest.java"}, "test_case": {"identifier": "testNodeCacheShouldNotRecycle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNodeCacheShouldNotRecycle() {\n        int loop = 10000;\n        //tmperately add a new invoker\n        weightInvokers.add(weightInvokerTmp);\n        try {\n            Map<Invoker, InvokeResult> resultMap = getWeightedInvokeResult(loop, RoundRobinLoadBalance.NAME);\n            assertStrictWRRResult(loop, resultMap);\n\n            // inner nodes cache judgement\n            RoundRobinLoadBalance lb = (RoundRobinLoadBalance) getLoadBalance(RoundRobinLoadBalance.NAME);\n            Assertions.assertEquals(weightInvokers.size(), lb.getInvokerAddrList(weightInvokers, weightTestInvocation).size());\n\n            weightInvokers.remove(weightInvokerTmp);\n\n            resultMap = getWeightedInvokeResult(loop, RoundRobinLoadBalance.NAME);\n            assertStrictWRRResult(loop, resultMap);\n\n            Assertions.assertNotEquals(weightInvokers.size(), lb.getInvokerAddrList(weightInvokers, weightTestInvocation).size());\n        } finally {\n            //prevent other UT's failure\n            weightInvokers.remove(weightInvokerTmp);\n        }\n    }", "signature": "void testNodeCacheShouldNotRecycle()", "full_signature": "@Test public void testNodeCacheShouldNotRecycle()", "class_method_signature": "RoundRobinLoadBalanceTest.testNodeCacheShouldNotRecycle()", "testcase": true, "constructor": false, "invocations": ["add", "getWeightedInvokeResult", "assertStrictWRRResult", "getLoadBalance", "assertEquals", "size", "size", "getInvokerAddrList", "remove", "getWeightedInvokeResult", "assertStrictWRRResult", "assertNotEquals", "size", "size", "getInvokerAddrList", "remove"]}, "focal_class": {"identifier": "RoundRobinLoadBalance", "superclass": "extends AbstractLoadBalance", "interfaces": "", "fields": [{"original_string": "public static final String NAME = \"roundrobin\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"roundrobin\"", "var_name": "NAME"}, {"original_string": "private static final int RECYCLE_PERIOD = 60000;", "modifier": "private static final", "type": "int", "declarator": "RECYCLE_PERIOD = 60000", "var_name": "RECYCLE_PERIOD"}, {"original_string": "private ConcurrentMap<String, ConcurrentMap<String, WeightedRoundRobin>> methodWeightMap = new ConcurrentHashMap<String, ConcurrentMap<String, WeightedRoundRobin>>();", "modifier": "private", "type": "ConcurrentMap<String, ConcurrentMap<String, WeightedRoundRobin>>", "declarator": "methodWeightMap = new ConcurrentHashMap<String, ConcurrentMap<String, WeightedRoundRobin>>()", "var_name": "methodWeightMap"}], "methods": [{"identifier": "getInvokerAddrList", "parameters": "(List<Invoker<T>> invokers, Invocation invocation)", "modifiers": "protected", "return": "Collection<String>", "signature": "Collection<String> getInvokerAddrList(List<Invoker<T>> invokers, Invocation invocation)", "full_signature": "protected Collection<String> getInvokerAddrList(List<Invoker<T>> invokers, Invocation invocation)", "class_method_signature": "RoundRobinLoadBalance.getInvokerAddrList(List<Invoker<T>> invokers, Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "doSelect", "parameters": "(List<Invoker<T>> invokers, URL url, Invocation invocation)", "modifiers": "@Override protected", "return": "Invoker<T>", "signature": "Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation)", "full_signature": "@Override protected Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation)", "class_method_signature": "RoundRobinLoadBalance.doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation)", "testcase": false, "constructor": false}], "file": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/loadbalance/RoundRobinLoadBalance.java"}, "focal_method": {"identifier": "getInvokerAddrList", "parameters": "(List<Invoker<T>> invokers, Invocation invocation)", "modifiers": "protected", "return": "Collection<String>", "body": "protected <T> Collection<String> getInvokerAddrList(List<Invoker<T>> invokers, Invocation invocation) {\n        String key = invokers.get(0).getUrl().getServiceKey() + \".\" + invocation.getMethodName();\n        Map<String, WeightedRoundRobin> map = methodWeightMap.get(key);\n        if (map != null) {\n            return map.keySet();\n        }\n        return null;\n    }", "signature": "Collection<String> getInvokerAddrList(List<Invoker<T>> invokers, Invocation invocation)", "full_signature": "protected Collection<String> getInvokerAddrList(List<Invoker<T>> invokers, Invocation invocation)", "class_method_signature": "RoundRobinLoadBalance.getInvokerAddrList(List<Invoker<T>> invokers, Invocation invocation)", "testcase": false, "constructor": false, "invocations": ["getServiceKey", "getUrl", "get", "getMethodName", "get", "keySet"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}