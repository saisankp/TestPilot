{"test_class": {"identifier": "TestCapacityScheduler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(TestCapacityScheduler.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(TestCapacityScheduler.class)", "var_name": "LOG"}, {"original_string": "private final int GB = 1024;", "modifier": "private final", "type": "int", "declarator": "GB = 1024", "var_name": "GB"}, {"original_string": "private static final String A = CapacitySchedulerConfiguration.ROOT + \".a\";", "modifier": "private static final", "type": "String", "declarator": "A = CapacitySchedulerConfiguration.ROOT + \".a\"", "var_name": "A"}, {"original_string": "private static final String B = CapacitySchedulerConfiguration.ROOT + \".b\";", "modifier": "private static final", "type": "String", "declarator": "B = CapacitySchedulerConfiguration.ROOT + \".b\"", "var_name": "B"}, {"original_string": "private static final String A1 = A + \".a1\";", "modifier": "private static final", "type": "String", "declarator": "A1 = A + \".a1\"", "var_name": "A1"}, {"original_string": "private static final String A2 = A + \".a2\";", "modifier": "private static final", "type": "String", "declarator": "A2 = A + \".a2\"", "var_name": "A2"}, {"original_string": "private static final String B1 = B + \".b1\";", "modifier": "private static final", "type": "String", "declarator": "B1 = B + \".b1\"", "var_name": "B1"}, {"original_string": "private static final String B2 = B + \".b2\";", "modifier": "private static final", "type": "String", "declarator": "B2 = B + \".b2\"", "var_name": "B2"}, {"original_string": "private static final String B3 = B + \".b3\";", "modifier": "private static final", "type": "String", "declarator": "B3 = B + \".b3\"", "var_name": "B3"}, {"original_string": "private static float A_CAPACITY = 10.5f;", "modifier": "private static", "type": "float", "declarator": "A_CAPACITY = 10.5f", "var_name": "A_CAPACITY"}, {"original_string": "private static float B_CAPACITY = 89.5f;", "modifier": "private static", "type": "float", "declarator": "B_CAPACITY = 89.5f", "var_name": "B_CAPACITY"}, {"original_string": "private static float A1_CAPACITY = 30;", "modifier": "private static", "type": "float", "declarator": "A1_CAPACITY = 30", "var_name": "A1_CAPACITY"}, {"original_string": "private static float A2_CAPACITY = 70;", "modifier": "private static", "type": "float", "declarator": "A2_CAPACITY = 70", "var_name": "A2_CAPACITY"}, {"original_string": "private static float B1_CAPACITY = 79.2f;", "modifier": "private static", "type": "float", "declarator": "B1_CAPACITY = 79.2f", "var_name": "B1_CAPACITY"}, {"original_string": "private static float B2_CAPACITY = 0.8f;", "modifier": "private static", "type": "float", "declarator": "B2_CAPACITY = 0.8f", "var_name": "B2_CAPACITY"}, {"original_string": "private static float B3_CAPACITY = 20;", "modifier": "private static", "type": "float", "declarator": "B3_CAPACITY = 20", "var_name": "B3_CAPACITY"}, {"original_string": "private ResourceManager resourceManager = null;", "modifier": "private", "type": "ResourceManager", "declarator": "resourceManager = null", "var_name": "resourceManager"}, {"original_string": "private RMContext mockContext;", "modifier": "private", "type": "RMContext", "declarator": "mockContext", "var_name": "mockContext"}], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/TestCapacityScheduler.java"}, "test_case": {"identifier": "testPreemptionInfo", "parameters": "()", "modifiers": "@Test(timeout = 120000) public", "return": "void", "body": "@Test(timeout = 120000)\n  public void testPreemptionInfo() throws Exception {\n    Configuration conf = new Configuration();\n    conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS, 3);\n    conf.setClass(YarnConfiguration.RM_SCHEDULER, CapacityScheduler.class,\n        ResourceScheduler.class);\n    int CONTAINER_MEMORY = 1024; // start RM\n    MockRM rm1 = new MockRM(conf);\n    rm1.start();\n\n    // get scheduler\n    CapacityScheduler cs = (CapacityScheduler) rm1.getResourceScheduler();\n\n    // start NM\n    MockNM nm1 =\n        new MockNM(\"127.0.0.1:1234\", 15120, rm1.getResourceTrackerService());\n    nm1.registerNode();\n\n    // create app and launch the AM\n    RMApp app0 = rm1.submitApp(CONTAINER_MEMORY);\n    MockAM am0 = launchAM(app0, rm1, nm1);\n\n    // get scheduler app\n    FiCaSchedulerApp schedulerAppAttempt =\n        cs.getSchedulerApplications().get(app0.getApplicationId())\n            .getCurrentAppAttempt();\n\n    // allocate some containers and launch them\n    List<Container> allocatedContainers =\n        am0.allocateAndWaitForContainers(3, CONTAINER_MEMORY, nm1);\n\n    // kill the 3 containers\n    for (Container c : allocatedContainers) {\n      cs.killContainer(schedulerAppAttempt.getRMContainer(c.getId()));\n    }\n\n    // check values\n    waitForAppPreemptionInfo(app0,\n        Resource.newInstance(CONTAINER_MEMORY * 3, 3), 0, 3,\n        Resource.newInstance(CONTAINER_MEMORY * 3, 3), false, 3);\n\n    // kill app0-attempt0 AM container\n    cs.killContainer(schedulerAppAttempt.getRMContainer(app0\n        .getCurrentAppAttempt().getMasterContainer().getId()));\n\n    // wait for app0 failed\n    waitForNewAttemptCreated(app0, am0.getApplicationAttemptId());\n\n    // check values\n    waitForAppPreemptionInfo(app0,\n        Resource.newInstance(CONTAINER_MEMORY * 4, 4), 1, 3,\n        Resource.newInstance(0, 0), false, 0);\n\n    // launch app0-attempt1\n    MockAM am1 = launchAM(app0, rm1, nm1);\n    schedulerAppAttempt =\n        cs.getSchedulerApplications().get(app0.getApplicationId())\n            .getCurrentAppAttempt();\n\n    // allocate some containers and launch them\n    allocatedContainers =\n        am1.allocateAndWaitForContainers(3, CONTAINER_MEMORY, nm1);\n    for (Container c : allocatedContainers) {\n      cs.killContainer(schedulerAppAttempt.getRMContainer(c.getId()));\n    }\n\n    // check values\n    waitForAppPreemptionInfo(app0,\n        Resource.newInstance(CONTAINER_MEMORY * 7, 7), 1, 6,\n        Resource.newInstance(CONTAINER_MEMORY * 3, 3), false, 3);\n\n    rm1.stop();\n  }", "signature": "void testPreemptionInfo()", "full_signature": "@Test(timeout = 120000) public void testPreemptionInfo()", "class_method_signature": "TestCapacityScheduler.testPreemptionInfo()", "testcase": true, "constructor": false, "invocations": ["setInt", "setClass", "start", "getResourceScheduler", "getResourceTrackerService", "registerNode", "submitApp", "launchAM", "getCurrentAppAttempt", "get", "getSchedulerApplications", "getApplicationId", "allocateAndWaitForContainers", "killContainer", "getRMContainer", "getId", "waitForAppPreemptionInfo", "newInstance", "newInstance", "killContainer", "getRMContainer", "getId", "getMasterContainer", "getCurrentAppAttempt", "waitForNewAttemptCreated", "getApplicationAttemptId", "waitForAppPreemptionInfo", "newInstance", "newInstance", "launchAM", "getCurrentAppAttempt", "get", "getSchedulerApplications", "getApplicationId", "allocateAndWaitForContainers", "killContainer", "getRMContainer", "getId", "waitForAppPreemptionInfo", "newInstance", "newInstance", "stop"]}, "focal_class": {"identifier": "CapacityScheduler", "superclass": "extends\n    AbstractYarnScheduler<FiCaSchedulerApp, FiCaSchedulerNode>", "interfaces": "implements\n    PreemptableResourceScheduler, CapacitySchedulerContext, Configurable", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(CapacityScheduler.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(CapacityScheduler.class)", "var_name": "LOG"}, {"original_string": "private YarnAuthorizationProvider authorizer;", "modifier": "private", "type": "YarnAuthorizationProvider", "declarator": "authorizer", "var_name": "authorizer"}, {"original_string": "private CSQueue root;", "modifier": "private", "type": "CSQueue", "declarator": "root", "var_name": "root"}, {"original_string": "protected final long THREAD_JOIN_TIMEOUT_MS = 1000;", "modifier": "protected final", "type": "long", "declarator": "THREAD_JOIN_TIMEOUT_MS = 1000", "var_name": "THREAD_JOIN_TIMEOUT_MS"}, {"original_string": "static final Comparator<CSQueue> queueComparator = new Comparator<CSQueue>() {\n    @Override\n    public int compare(CSQueue q1, CSQueue q2) {\n      if (q1.getUsedCapacity() < q2.getUsedCapacity()) {\n        return -1;\n      } else if (q1.getUsedCapacity() > q2.getUsedCapacity()) {\n        return 1;\n      }\n\n      return q1.getQueuePath().compareTo(q2.getQueuePath());\n    }\n  };", "modifier": "static final", "type": "Comparator<CSQueue>", "declarator": "queueComparator = new Comparator<CSQueue>() {\n    @Override\n    public int compare(CSQueue q1, CSQueue q2) {\n      if (q1.getUsedCapacity() < q2.getUsedCapacity()) {\n        return -1;\n      } else if (q1.getUsedCapacity() > q2.getUsedCapacity()) {\n        return 1;\n      }\n\n      return q1.getQueuePath().compareTo(q2.getQueuePath());\n    }\n  }", "var_name": "queueComparator"}, {"original_string": "static final Comparator<FiCaSchedulerApp> applicationComparator = \n    new Comparator<FiCaSchedulerApp>() {\n    @Override\n    public int compare(FiCaSchedulerApp a1, FiCaSchedulerApp a2) {\n      return a1.getApplicationId().compareTo(a2.getApplicationId());\n    }\n  };", "modifier": "static final", "type": "Comparator<FiCaSchedulerApp>", "declarator": "applicationComparator = \n    new Comparator<FiCaSchedulerApp>() {\n    @Override\n    public int compare(FiCaSchedulerApp a1, FiCaSchedulerApp a2) {\n      return a1.getApplicationId().compareTo(a2.getApplicationId());\n    }\n  }", "var_name": "applicationComparator"}, {"original_string": "private CapacitySchedulerConfiguration conf;", "modifier": "private", "type": "CapacitySchedulerConfiguration", "declarator": "conf", "var_name": "conf"}, {"original_string": "private Configuration yarnConf;", "modifier": "private", "type": "Configuration", "declarator": "yarnConf", "var_name": "yarnConf"}, {"original_string": "private Map<String, CSQueue> queues = new ConcurrentHashMap<String, CSQueue>();", "modifier": "private", "type": "Map<String, CSQueue>", "declarator": "queues = new ConcurrentHashMap<String, CSQueue>()", "var_name": "queues"}, {"original_string": "private AtomicInteger numNodeManagers = new AtomicInteger(0);", "modifier": "private", "type": "AtomicInteger", "declarator": "numNodeManagers = new AtomicInteger(0)", "var_name": "numNodeManagers"}, {"original_string": "private ResourceCalculator calculator;", "modifier": "private", "type": "ResourceCalculator", "declarator": "calculator", "var_name": "calculator"}, {"original_string": "private boolean usePortForNodeName;", "modifier": "private", "type": "boolean", "declarator": "usePortForNodeName", "var_name": "usePortForNodeName"}, {"original_string": "private boolean scheduleAsynchronously;", "modifier": "private", "type": "boolean", "declarator": "scheduleAsynchronously", "var_name": "scheduleAsynchronously"}, {"original_string": "private AsyncScheduleThread asyncSchedulerThread;", "modifier": "private", "type": "AsyncScheduleThread", "declarator": "asyncSchedulerThread", "var_name": "asyncSchedulerThread"}, {"original_string": "private RMNodeLabelsManager labelManager;", "modifier": "private", "type": "RMNodeLabelsManager", "declarator": "labelManager", "var_name": "labelManager"}, {"original_string": "private long asyncScheduleInterval;", "modifier": "private", "type": "long", "declarator": "asyncScheduleInterval", "var_name": "asyncScheduleInterval"}, {"original_string": "private static final String ASYNC_SCHEDULER_INTERVAL =\n      CapacitySchedulerConfiguration.SCHEDULE_ASYNCHRONOUSLY_PREFIX\n          + \".scheduling-interval-ms\";", "modifier": "private static final", "type": "String", "declarator": "ASYNC_SCHEDULER_INTERVAL =\n      CapacitySchedulerConfiguration.SCHEDULE_ASYNCHRONOUSLY_PREFIX\n          + \".scheduling-interval-ms\"", "var_name": "ASYNC_SCHEDULER_INTERVAL"}, {"original_string": "private static final long DEFAULT_ASYNC_SCHEDULER_INTERVAL = 5;", "modifier": "private static final", "type": "long", "declarator": "DEFAULT_ASYNC_SCHEDULER_INTERVAL = 5", "var_name": "DEFAULT_ASYNC_SCHEDULER_INTERVAL"}, {"original_string": "private boolean overrideWithQueueMappings = false;", "modifier": "private", "type": "boolean", "declarator": "overrideWithQueueMappings = false", "var_name": "overrideWithQueueMappings"}, {"original_string": "private List<QueueMapping> mappings = null;", "modifier": "private", "type": "List<QueueMapping>", "declarator": "mappings = null", "var_name": "mappings"}, {"original_string": "private Groups groups;", "modifier": "private", "type": "Groups", "declarator": "groups", "var_name": "groups"}, {"original_string": "private final static Random random = new Random(System.currentTimeMillis());", "modifier": "private final static", "type": "Random", "declarator": "random = new Random(System.currentTimeMillis())", "var_name": "random"}, {"original_string": "@Private\n  public static final String ROOT_QUEUE = \n    CapacitySchedulerConfiguration.PREFIX + CapacitySchedulerConfiguration.ROOT;", "modifier": "@Private\n  public static final", "type": "String", "declarator": "ROOT_QUEUE = \n    CapacitySchedulerConfiguration.PREFIX + CapacitySchedulerConfiguration.ROOT", "var_name": "ROOT_QUEUE"}, {"original_string": "private static final QueueHook noop = new QueueHook();", "modifier": "private static final", "type": "QueueHook", "declarator": "noop = new QueueHook()", "var_name": "noop"}, {"original_string": "private static final String CURRENT_USER_MAPPING = \"%user\";", "modifier": "private static final", "type": "String", "declarator": "CURRENT_USER_MAPPING = \"%user\"", "var_name": "CURRENT_USER_MAPPING"}, {"original_string": "private static final String PRIMARY_GROUP_MAPPING = \"%primary_group\";", "modifier": "private static final", "type": "String", "declarator": "PRIMARY_GROUP_MAPPING = \"%primary_group\"", "var_name": "PRIMARY_GROUP_MAPPING"}], "methods": [{"identifier": "setConf", "parameters": "(Configuration conf)", "modifiers": "@Override public", "return": "void", "signature": "void setConf(Configuration conf)", "full_signature": "@Override public void setConf(Configuration conf)", "class_method_signature": "CapacityScheduler.setConf(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "validateConf", "parameters": "(Configuration conf)", "modifiers": "private", "return": "void", "signature": "void validateConf(Configuration conf)", "full_signature": "private void validateConf(Configuration conf)", "class_method_signature": "CapacityScheduler.validateConf(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "getConf", "parameters": "()", "modifiers": "@Override public", "return": "Configuration", "signature": "Configuration getConf()", "full_signature": "@Override public Configuration getConf()", "class_method_signature": "CapacityScheduler.getConf()", "testcase": false, "constructor": false}, {"identifier": "getMappedQueueForTest", "parameters": "(String user)", "modifiers": "@VisibleForTesting public synchronized", "return": "String", "signature": "String getMappedQueueForTest(String user)", "full_signature": "@VisibleForTesting public synchronized String getMappedQueueForTest(String user)", "class_method_signature": "CapacityScheduler.getMappedQueueForTest(String user)", "testcase": false, "constructor": false}, {"identifier": "CapacityScheduler", "parameters": "()", "modifiers": "public", "return": "", "signature": " CapacityScheduler()", "full_signature": "public  CapacityScheduler()", "class_method_signature": "CapacityScheduler.CapacityScheduler()", "testcase": false, "constructor": true}, {"identifier": "getRootQueueMetrics", "parameters": "()", "modifiers": "@Override public", "return": "QueueMetrics", "signature": "QueueMetrics getRootQueueMetrics()", "full_signature": "@Override public QueueMetrics getRootQueueMetrics()", "class_method_signature": "CapacityScheduler.getRootQueueMetrics()", "testcase": false, "constructor": false}, {"identifier": "getRootQueue", "parameters": "()", "modifiers": "public", "return": "CSQueue", "signature": "CSQueue getRootQueue()", "full_signature": "public CSQueue getRootQueue()", "class_method_signature": "CapacityScheduler.getRootQueue()", "testcase": false, "constructor": false}, {"identifier": "getConfiguration", "parameters": "()", "modifiers": "@Override public", "return": "CapacitySchedulerConfiguration", "signature": "CapacitySchedulerConfiguration getConfiguration()", "full_signature": "@Override public CapacitySchedulerConfiguration getConfiguration()", "class_method_signature": "CapacityScheduler.getConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getContainerTokenSecretManager", "parameters": "()", "modifiers": "@Override public synchronized", "return": "RMContainerTokenSecretManager", "signature": "RMContainerTokenSecretManager getContainerTokenSecretManager()", "full_signature": "@Override public synchronized RMContainerTokenSecretManager getContainerTokenSecretManager()", "class_method_signature": "CapacityScheduler.getContainerTokenSecretManager()", "testcase": false, "constructor": false}, {"identifier": "getApplicationComparator", "parameters": "()", "modifiers": "@Override public", "return": "Comparator<FiCaSchedulerApp>", "signature": "Comparator<FiCaSchedulerApp> getApplicationComparator()", "full_signature": "@Override public Comparator<FiCaSchedulerApp> getApplicationComparator()", "class_method_signature": "CapacityScheduler.getApplicationComparator()", "testcase": false, "constructor": false}, {"identifier": "getResourceCalculator", "parameters": "()", "modifiers": "@Override public", "return": "ResourceCalculator", "signature": "ResourceCalculator getResourceCalculator()", "full_signature": "@Override public ResourceCalculator getResourceCalculator()", "class_method_signature": "CapacityScheduler.getResourceCalculator()", "testcase": false, "constructor": false}, {"identifier": "getQueueComparator", "parameters": "()", "modifiers": "@Override public", "return": "Comparator<CSQueue>", "signature": "Comparator<CSQueue> getQueueComparator()", "full_signature": "@Override public Comparator<CSQueue> getQueueComparator()", "class_method_signature": "CapacityScheduler.getQueueComparator()", "testcase": false, "constructor": false}, {"identifier": "getNumClusterNodes", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNumClusterNodes()", "full_signature": "@Override public int getNumClusterNodes()", "class_method_signature": "CapacityScheduler.getNumClusterNodes()", "testcase": false, "constructor": false}, {"identifier": "getRMContext", "parameters": "()", "modifiers": "@Override public synchronized", "return": "RMContext", "signature": "RMContext getRMContext()", "full_signature": "@Override public synchronized RMContext getRMContext()", "class_method_signature": "CapacityScheduler.getRMContext()", "testcase": false, "constructor": false}, {"identifier": "setRMContext", "parameters": "(RMContext rmContext)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void setRMContext(RMContext rmContext)", "full_signature": "@Override public synchronized void setRMContext(RMContext rmContext)", "class_method_signature": "CapacityScheduler.setRMContext(RMContext rmContext)", "testcase": false, "constructor": false}, {"identifier": "initScheduler", "parameters": "(Configuration configuration)", "modifiers": "private synchronized", "return": "void", "signature": "void initScheduler(Configuration configuration)", "full_signature": "private synchronized void initScheduler(Configuration configuration)", "class_method_signature": "CapacityScheduler.initScheduler(Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "startSchedulerThreads", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void startSchedulerThreads()", "full_signature": "private synchronized void startSchedulerThreads()", "class_method_signature": "CapacityScheduler.startSchedulerThreads()", "testcase": false, "constructor": false}, {"identifier": "serviceInit", "parameters": "(Configuration conf)", "modifiers": "@Override public", "return": "void", "signature": "void serviceInit(Configuration conf)", "full_signature": "@Override public void serviceInit(Configuration conf)", "class_method_signature": "CapacityScheduler.serviceInit(Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "serviceStart", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void serviceStart()", "full_signature": "@Override public void serviceStart()", "class_method_signature": "CapacityScheduler.serviceStart()", "testcase": false, "constructor": false}, {"identifier": "serviceStop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void serviceStop()", "full_signature": "@Override public void serviceStop()", "class_method_signature": "CapacityScheduler.serviceStop()", "testcase": false, "constructor": false}, {"identifier": "reinitialize", "parameters": "(Configuration conf, RMContext rmContext)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void reinitialize(Configuration conf, RMContext rmContext)", "full_signature": "@Override public synchronized void reinitialize(Configuration conf, RMContext rmContext)", "class_method_signature": "CapacityScheduler.reinitialize(Configuration conf, RMContext rmContext)", "testcase": false, "constructor": false}, {"identifier": "getAsyncScheduleInterval", "parameters": "()", "modifiers": "", "return": "long", "signature": "long getAsyncScheduleInterval()", "full_signature": " long getAsyncScheduleInterval()", "class_method_signature": "CapacityScheduler.getAsyncScheduleInterval()", "testcase": false, "constructor": false}, {"identifier": "schedule", "parameters": "(CapacityScheduler cs)", "modifiers": "static", "return": "void", "signature": "void schedule(CapacityScheduler cs)", "full_signature": "static void schedule(CapacityScheduler cs)", "class_method_signature": "CapacityScheduler.schedule(CapacityScheduler cs)", "testcase": false, "constructor": false}, {"identifier": "initializeQueueMappings", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeQueueMappings()", "full_signature": "private void initializeQueueMappings()", "class_method_signature": "CapacityScheduler.initializeQueueMappings()", "testcase": false, "constructor": false}, {"identifier": "initializeQueues", "parameters": "(CapacitySchedulerConfiguration conf)", "modifiers": "@Lock(CapacityScheduler.class) private", "return": "void", "signature": "void initializeQueues(CapacitySchedulerConfiguration conf)", "full_signature": "@Lock(CapacityScheduler.class) private void initializeQueues(CapacitySchedulerConfiguration conf)", "class_method_signature": "CapacityScheduler.initializeQueues(CapacitySchedulerConfiguration conf)", "testcase": false, "constructor": false}, {"identifier": "reinitializeQueues", "parameters": "(CapacitySchedulerConfiguration conf)", "modifiers": "@Lock(CapacityScheduler.class) private", "return": "void", "signature": "void reinitializeQueues(CapacitySchedulerConfiguration conf)", "full_signature": "@Lock(CapacityScheduler.class) private void reinitializeQueues(CapacitySchedulerConfiguration conf)", "class_method_signature": "CapacityScheduler.reinitializeQueues(CapacitySchedulerConfiguration conf)", "testcase": false, "constructor": false}, {"identifier": "setQueueAcls", "parameters": "(YarnAuthorizationProvider authorizer,\n      Map<String, CSQueue> queues)", "modifiers": "@VisibleForTesting public static", "return": "void", "signature": "void setQueueAcls(YarnAuthorizationProvider authorizer,\n      Map<String, CSQueue> queues)", "full_signature": "@VisibleForTesting public static void setQueueAcls(YarnAuthorizationProvider authorizer,\n      Map<String, CSQueue> queues)", "class_method_signature": "CapacityScheduler.setQueueAcls(YarnAuthorizationProvider authorizer,\n      Map<String, CSQueue> queues)", "testcase": false, "constructor": false}, {"identifier": "getQueueToLabels", "parameters": "()", "modifiers": "private", "return": "Map<String, Set<String>>", "signature": "Map<String, Set<String>> getQueueToLabels()", "full_signature": "private Map<String, Set<String>> getQueueToLabels()", "class_method_signature": "CapacityScheduler.getQueueToLabels()", "testcase": false, "constructor": false}, {"identifier": "validateExistingQueues", "parameters": "(\n      Map<String, CSQueue> queues, Map<String, CSQueue> newQueues)", "modifiers": "@Lock(CapacityScheduler.class) private", "return": "void", "signature": "void validateExistingQueues(\n      Map<String, CSQueue> queues, Map<String, CSQueue> newQueues)", "full_signature": "@Lock(CapacityScheduler.class) private void validateExistingQueues(\n      Map<String, CSQueue> queues, Map<String, CSQueue> newQueues)", "class_method_signature": "CapacityScheduler.validateExistingQueues(\n      Map<String, CSQueue> queues, Map<String, CSQueue> newQueues)", "testcase": false, "constructor": false}, {"identifier": "addNewQueues", "parameters": "(\n      Map<String, CSQueue> queues, Map<String, CSQueue> newQueues)", "modifiers": "@Lock(CapacityScheduler.class) private", "return": "void", "signature": "void addNewQueues(\n      Map<String, CSQueue> queues, Map<String, CSQueue> newQueues)", "full_signature": "@Lock(CapacityScheduler.class) private void addNewQueues(\n      Map<String, CSQueue> queues, Map<String, CSQueue> newQueues)", "class_method_signature": "CapacityScheduler.addNewQueues(\n      Map<String, CSQueue> queues, Map<String, CSQueue> newQueues)", "testcase": false, "constructor": false}, {"identifier": "parseQueue", "parameters": "(\n      CapacitySchedulerContext csContext,\n      CapacitySchedulerConfiguration conf, \n      CSQueue parent, String queueName, Map<String, CSQueue> queues,\n      Map<String, CSQueue> oldQueues, \n      QueueHook hook)", "modifiers": "@Lock(CapacityScheduler.class) static", "return": "CSQueue", "signature": "CSQueue parseQueue(\n      CapacitySchedulerContext csContext,\n      CapacitySchedulerConfiguration conf, \n      CSQueue parent, String queueName, Map<String, CSQueue> queues,\n      Map<String, CSQueue> oldQueues, \n      QueueHook hook)", "full_signature": "@Lock(CapacityScheduler.class) static CSQueue parseQueue(\n      CapacitySchedulerContext csContext,\n      CapacitySchedulerConfiguration conf, \n      CSQueue parent, String queueName, Map<String, CSQueue> queues,\n      Map<String, CSQueue> oldQueues, \n      QueueHook hook)", "class_method_signature": "CapacityScheduler.parseQueue(\n      CapacitySchedulerContext csContext,\n      CapacitySchedulerConfiguration conf, \n      CSQueue parent, String queueName, Map<String, CSQueue> queues,\n      Map<String, CSQueue> oldQueues, \n      QueueHook hook)", "testcase": false, "constructor": false}, {"identifier": "getQueue", "parameters": "(String queueName)", "modifiers": "public", "return": "CSQueue", "signature": "CSQueue getQueue(String queueName)", "full_signature": "public CSQueue getQueue(String queueName)", "class_method_signature": "CapacityScheduler.getQueue(String queueName)", "testcase": false, "constructor": false}, {"identifier": "getMappedQueue", "parameters": "(String user)", "modifiers": "private", "return": "String", "signature": "String getMappedQueue(String user)", "full_signature": "private String getMappedQueue(String user)", "class_method_signature": "CapacityScheduler.getMappedQueue(String user)", "testcase": false, "constructor": false}, {"identifier": "getQueueMappings", "parameters": "(ApplicationId applicationId, String queueName,\n      String user)", "modifiers": "private", "return": "String", "signature": "String getQueueMappings(ApplicationId applicationId, String queueName,\n      String user)", "full_signature": "private String getQueueMappings(ApplicationId applicationId, String queueName,\n      String user)", "class_method_signature": "CapacityScheduler.getQueueMappings(ApplicationId applicationId, String queueName,\n      String user)", "testcase": false, "constructor": false}, {"identifier": "addApplicationOnRecovery", "parameters": "(\n      ApplicationId applicationId, String queueName, String user)", "modifiers": "private synchronized", "return": "void", "signature": "void addApplicationOnRecovery(\n      ApplicationId applicationId, String queueName, String user)", "full_signature": "private synchronized void addApplicationOnRecovery(\n      ApplicationId applicationId, String queueName, String user)", "class_method_signature": "CapacityScheduler.addApplicationOnRecovery(\n      ApplicationId applicationId, String queueName, String user)", "testcase": false, "constructor": false}, {"identifier": "addApplication", "parameters": "(ApplicationId applicationId,\n      String queueName, String user)", "modifiers": "private synchronized", "return": "void", "signature": "void addApplication(ApplicationId applicationId,\n      String queueName, String user)", "full_signature": "private synchronized void addApplication(ApplicationId applicationId,\n      String queueName, String user)", "class_method_signature": "CapacityScheduler.addApplication(ApplicationId applicationId,\n      String queueName, String user)", "testcase": false, "constructor": false}, {"identifier": "addApplicationAttempt", "parameters": "(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean isAttemptRecovering)", "modifiers": "private synchronized", "return": "void", "signature": "void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean isAttemptRecovering)", "full_signature": "private synchronized void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean isAttemptRecovering)", "class_method_signature": "CapacityScheduler.addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean isAttemptRecovering)", "testcase": false, "constructor": false}, {"identifier": "doneApplication", "parameters": "(ApplicationId applicationId,\n      RMAppState finalState)", "modifiers": "private synchronized", "return": "void", "signature": "void doneApplication(ApplicationId applicationId,\n      RMAppState finalState)", "full_signature": "private synchronized void doneApplication(ApplicationId applicationId,\n      RMAppState finalState)", "class_method_signature": "CapacityScheduler.doneApplication(ApplicationId applicationId,\n      RMAppState finalState)", "testcase": false, "constructor": false}, {"identifier": "doneApplicationAttempt", "parameters": "(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers)", "modifiers": "private synchronized", "return": "void", "signature": "void doneApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers)", "full_signature": "private synchronized void doneApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers)", "class_method_signature": "CapacityScheduler.doneApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      RMAppAttemptState rmAppAttemptFinalState, boolean keepContainers)", "testcase": false, "constructor": false}, {"identifier": "allocate", "parameters": "(ApplicationAttemptId applicationAttemptId,\n      List<ResourceRequest> ask, List<ContainerId> release, \n      List<String> blacklistAdditions, List<String> blacklistRemovals)", "modifiers": "@Override @Lock(Lock.NoLock.class) public", "return": "Allocation", "signature": "Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List<ResourceRequest> ask, List<ContainerId> release, \n      List<String> blacklistAdditions, List<String> blacklistRemovals)", "full_signature": "@Override @Lock(Lock.NoLock.class) public Allocation allocate(ApplicationAttemptId applicationAttemptId,\n      List<ResourceRequest> ask, List<ContainerId> release, \n      List<String> blacklistAdditions, List<String> blacklistRemovals)", "class_method_signature": "CapacityScheduler.allocate(ApplicationAttemptId applicationAttemptId,\n      List<ResourceRequest> ask, List<ContainerId> release, \n      List<String> blacklistAdditions, List<String> blacklistRemovals)", "testcase": false, "constructor": false}, {"identifier": "getQueueInfo", "parameters": "(String queueName, \n      boolean includeChildQueues, boolean recursive)", "modifiers": "@Override @Lock(Lock.NoLock.class) public", "return": "QueueInfo", "signature": "QueueInfo getQueueInfo(String queueName, \n      boolean includeChildQueues, boolean recursive)", "full_signature": "@Override @Lock(Lock.NoLock.class) public QueueInfo getQueueInfo(String queueName, \n      boolean includeChildQueues, boolean recursive)", "class_method_signature": "CapacityScheduler.getQueueInfo(String queueName, \n      boolean includeChildQueues, boolean recursive)", "testcase": false, "constructor": false}, {"identifier": "getQueueUserAclInfo", "parameters": "()", "modifiers": "@Override @Lock(Lock.NoLock.class) public", "return": "List<QueueUserACLInfo>", "signature": "List<QueueUserACLInfo> getQueueUserAclInfo()", "full_signature": "@Override @Lock(Lock.NoLock.class) public List<QueueUserACLInfo> getQueueUserAclInfo()", "class_method_signature": "CapacityScheduler.getQueueUserAclInfo()", "testcase": false, "constructor": false}, {"identifier": "nodeUpdate", "parameters": "(RMNode nm)", "modifiers": "private synchronized", "return": "void", "signature": "void nodeUpdate(RMNode nm)", "full_signature": "private synchronized void nodeUpdate(RMNode nm)", "class_method_signature": "CapacityScheduler.nodeUpdate(RMNode nm)", "testcase": false, "constructor": false}, {"identifier": "updateNodeAndQueueResource", "parameters": "(RMNode nm, \n      ResourceOption resourceOption)", "modifiers": "private synchronized", "return": "void", "signature": "void updateNodeAndQueueResource(RMNode nm, \n      ResourceOption resourceOption)", "full_signature": "private synchronized void updateNodeAndQueueResource(RMNode nm, \n      ResourceOption resourceOption)", "class_method_signature": "CapacityScheduler.updateNodeAndQueueResource(RMNode nm, \n      ResourceOption resourceOption)", "testcase": false, "constructor": false}, {"identifier": "updateLabelsOnNode", "parameters": "(NodeId nodeId,\n      Set<String> newLabels)", "modifiers": "private synchronized", "return": "void", "signature": "void updateLabelsOnNode(NodeId nodeId,\n      Set<String> newLabels)", "full_signature": "private synchronized void updateLabelsOnNode(NodeId nodeId,\n      Set<String> newLabels)", "class_method_signature": "CapacityScheduler.updateLabelsOnNode(NodeId nodeId,\n      Set<String> newLabels)", "testcase": false, "constructor": false}, {"identifier": "allocateContainersToNode", "parameters": "(FiCaSchedulerNode node)", "modifiers": "private synchronized", "return": "void", "signature": "void allocateContainersToNode(FiCaSchedulerNode node)", "full_signature": "private synchronized void allocateContainersToNode(FiCaSchedulerNode node)", "class_method_signature": "CapacityScheduler.allocateContainersToNode(FiCaSchedulerNode node)", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(SchedulerEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void handle(SchedulerEvent event)", "full_signature": "@Override public void handle(SchedulerEvent event)", "class_method_signature": "CapacityScheduler.handle(SchedulerEvent event)", "testcase": false, "constructor": false}, {"identifier": "addNode", "parameters": "(RMNode nodeManager)", "modifiers": "private synchronized", "return": "void", "signature": "void addNode(RMNode nodeManager)", "full_signature": "private synchronized void addNode(RMNode nodeManager)", "class_method_signature": "CapacityScheduler.addNode(RMNode nodeManager)", "testcase": false, "constructor": false}, {"identifier": "removeNode", "parameters": "(RMNode nodeInfo)", "modifiers": "private synchronized", "return": "void", "signature": "void removeNode(RMNode nodeInfo)", "full_signature": "private synchronized void removeNode(RMNode nodeInfo)", "class_method_signature": "CapacityScheduler.removeNode(RMNode nodeInfo)", "testcase": false, "constructor": false}, {"identifier": "completedContainer", "parameters": "(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event)", "modifiers": "@Lock(CapacityScheduler.class) @Override protected synchronized", "return": "void", "signature": "void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event)", "full_signature": "@Lock(CapacityScheduler.class) @Override protected synchronized void completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event)", "class_method_signature": "CapacityScheduler.completedContainer(RMContainer rmContainer,\n      ContainerStatus containerStatus, RMContainerEventType event)", "testcase": false, "constructor": false}, {"identifier": "getApplicationAttempt", "parameters": "(\n      ApplicationAttemptId applicationAttemptId)", "modifiers": "@Lock(Lock.NoLock.class) @VisibleForTesting @Override public", "return": "FiCaSchedulerApp", "signature": "FiCaSchedulerApp getApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId)", "full_signature": "@Lock(Lock.NoLock.class) @VisibleForTesting @Override public FiCaSchedulerApp getApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId)", "class_method_signature": "CapacityScheduler.getApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId)", "testcase": false, "constructor": false}, {"identifier": "getNode", "parameters": "(NodeId nodeId)", "modifiers": "@Lock(Lock.NoLock.class) public", "return": "FiCaSchedulerNode", "signature": "FiCaSchedulerNode getNode(NodeId nodeId)", "full_signature": "@Lock(Lock.NoLock.class) public FiCaSchedulerNode getNode(NodeId nodeId)", "class_method_signature": "CapacityScheduler.getNode(NodeId nodeId)", "testcase": false, "constructor": false}, {"identifier": "getAllNodes", "parameters": "()", "modifiers": "@Lock(Lock.NoLock.class)", "return": "Map<NodeId, FiCaSchedulerNode>", "signature": "Map<NodeId, FiCaSchedulerNode> getAllNodes()", "full_signature": "@Lock(Lock.NoLock.class) Map<NodeId, FiCaSchedulerNode> getAllNodes()", "class_method_signature": "CapacityScheduler.getAllNodes()", "testcase": false, "constructor": false}, {"identifier": "recover", "parameters": "(RMState state)", "modifiers": "@Override @Lock(Lock.NoLock.class) public", "return": "void", "signature": "void recover(RMState state)", "full_signature": "@Override @Lock(Lock.NoLock.class) public void recover(RMState state)", "class_method_signature": "CapacityScheduler.recover(RMState state)", "testcase": false, "constructor": false}, {"identifier": "dropContainerReservation", "parameters": "(RMContainer container)", "modifiers": "@Override public", "return": "void", "signature": "void dropContainerReservation(RMContainer container)", "full_signature": "@Override public void dropContainerReservation(RMContainer container)", "class_method_signature": "CapacityScheduler.dropContainerReservation(RMContainer container)", "testcase": false, "constructor": false}, {"identifier": "preemptContainer", "parameters": "(ApplicationAttemptId aid, RMContainer cont)", "modifiers": "@Override public", "return": "void", "signature": "void preemptContainer(ApplicationAttemptId aid, RMContainer cont)", "full_signature": "@Override public void preemptContainer(ApplicationAttemptId aid, RMContainer cont)", "class_method_signature": "CapacityScheduler.preemptContainer(ApplicationAttemptId aid, RMContainer cont)", "testcase": false, "constructor": false}, {"identifier": "killContainer", "parameters": "(RMContainer cont)", "modifiers": "@Override public", "return": "void", "signature": "void killContainer(RMContainer cont)", "full_signature": "@Override public void killContainer(RMContainer cont)", "class_method_signature": "CapacityScheduler.killContainer(RMContainer cont)", "testcase": false, "constructor": false}, {"identifier": "checkAccess", "parameters": "(UserGroupInformation callerUGI,\n      QueueACL acl, String queueName)", "modifiers": "@Override public synchronized", "return": "boolean", "signature": "boolean checkAccess(UserGroupInformation callerUGI,\n      QueueACL acl, String queueName)", "full_signature": "@Override public synchronized boolean checkAccess(UserGroupInformation callerUGI,\n      QueueACL acl, String queueName)", "class_method_signature": "CapacityScheduler.checkAccess(UserGroupInformation callerUGI,\n      QueueACL acl, String queueName)", "testcase": false, "constructor": false}, {"identifier": "getAppsInQueue", "parameters": "(String queueName)", "modifiers": "@Override public", "return": "List<ApplicationAttemptId>", "signature": "List<ApplicationAttemptId> getAppsInQueue(String queueName)", "full_signature": "@Override public List<ApplicationAttemptId> getAppsInQueue(String queueName)", "class_method_signature": "CapacityScheduler.getAppsInQueue(String queueName)", "testcase": false, "constructor": false}, {"identifier": "loadCapacitySchedulerConfiguration", "parameters": "(\n      Configuration configuration)", "modifiers": "private", "return": "CapacitySchedulerConfiguration", "signature": "CapacitySchedulerConfiguration loadCapacitySchedulerConfiguration(\n      Configuration configuration)", "full_signature": "private CapacitySchedulerConfiguration loadCapacitySchedulerConfiguration(\n      Configuration configuration)", "class_method_signature": "CapacityScheduler.loadCapacitySchedulerConfiguration(\n      Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "resolveReservationQueueName", "parameters": "(String queueName,\n      ApplicationId applicationId, ReservationId reservationID)", "modifiers": "private synchronized", "return": "String", "signature": "String resolveReservationQueueName(String queueName,\n      ApplicationId applicationId, ReservationId reservationID)", "full_signature": "private synchronized String resolveReservationQueueName(String queueName,\n      ApplicationId applicationId, ReservationId reservationID)", "class_method_signature": "CapacityScheduler.resolveReservationQueueName(String queueName,\n      ApplicationId applicationId, ReservationId reservationID)", "testcase": false, "constructor": false}, {"identifier": "removeQueue", "parameters": "(String queueName)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void removeQueue(String queueName)", "full_signature": "@Override public synchronized void removeQueue(String queueName)", "class_method_signature": "CapacityScheduler.removeQueue(String queueName)", "testcase": false, "constructor": false}, {"identifier": "addQueue", "parameters": "(Queue queue)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void addQueue(Queue queue)", "full_signature": "@Override public synchronized void addQueue(Queue queue)", "class_method_signature": "CapacityScheduler.addQueue(Queue queue)", "testcase": false, "constructor": false}, {"identifier": "setEntitlement", "parameters": "(String inQueue,\n      QueueEntitlement entitlement)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void setEntitlement(String inQueue,\n      QueueEntitlement entitlement)", "full_signature": "@Override public synchronized void setEntitlement(String inQueue,\n      QueueEntitlement entitlement)", "class_method_signature": "CapacityScheduler.setEntitlement(String inQueue,\n      QueueEntitlement entitlement)", "testcase": false, "constructor": false}, {"identifier": "moveApplication", "parameters": "(ApplicationId appId,\n      String targetQueueName)", "modifiers": "@Override public synchronized", "return": "String", "signature": "String moveApplication(ApplicationId appId,\n      String targetQueueName)", "full_signature": "@Override public synchronized String moveApplication(ApplicationId appId,\n      String targetQueueName)", "class_method_signature": "CapacityScheduler.moveApplication(ApplicationId appId,\n      String targetQueueName)", "testcase": false, "constructor": false}, {"identifier": "getAndCheckLeafQueue", "parameters": "(String queue)", "modifiers": "private", "return": "LeafQueue", "signature": "LeafQueue getAndCheckLeafQueue(String queue)", "full_signature": "private LeafQueue getAndCheckLeafQueue(String queue)", "class_method_signature": "CapacityScheduler.getAndCheckLeafQueue(String queue)", "testcase": false, "constructor": false}, {"identifier": "getSchedulingResourceTypes", "parameters": "()", "modifiers": "@Override public", "return": "EnumSet<SchedulerResourceTypes>", "signature": "EnumSet<SchedulerResourceTypes> getSchedulingResourceTypes()", "full_signature": "@Override public EnumSet<SchedulerResourceTypes> getSchedulingResourceTypes()", "class_method_signature": "CapacityScheduler.getSchedulingResourceTypes()", "testcase": false, "constructor": false}, {"identifier": "getMaximumResourceCapability", "parameters": "(String queueName)", "modifiers": "@Override public", "return": "Resource", "signature": "Resource getMaximumResourceCapability(String queueName)", "full_signature": "@Override public Resource getMaximumResourceCapability(String queueName)", "class_method_signature": "CapacityScheduler.getMaximumResourceCapability(String queueName)", "testcase": false, "constructor": false}, {"identifier": "handleMoveToPlanQueue", "parameters": "(String targetQueueName)", "modifiers": "private", "return": "String", "signature": "String handleMoveToPlanQueue(String targetQueueName)", "full_signature": "private String handleMoveToPlanQueue(String targetQueueName)", "class_method_signature": "CapacityScheduler.handleMoveToPlanQueue(String targetQueueName)", "testcase": false, "constructor": false}, {"identifier": "getPlanQueues", "parameters": "()", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getPlanQueues()", "full_signature": "@Override public Set<String> getPlanQueues()", "class_method_signature": "CapacityScheduler.getPlanQueues()", "testcase": false, "constructor": false}], "file": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"}, "focal_method": {"identifier": "killContainer", "parameters": "(RMContainer cont)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void killContainer(RMContainer cont) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"KILL_CONTAINER: container\" + cont.toString());\n    }\n    completedContainer(cont, SchedulerUtils.createPreemptedContainerStatus(\n      cont.getContainerId(), SchedulerUtils.PREEMPTED_CONTAINER),\n      RMContainerEventType.KILL);\n  }", "signature": "void killContainer(RMContainer cont)", "full_signature": "@Override public void killContainer(RMContainer cont)", "class_method_signature": "CapacityScheduler.killContainer(RMContainer cont)", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug", "toString", "completedContainer", "createPreemptedContainerStatus", "getContainerId"]}, "repository": {"repo_id": 195808004, "url": "https://github.com/mouzwang/hadoop-2.7.2", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 24927, "license": "licensed"}}