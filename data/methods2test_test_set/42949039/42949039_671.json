{"test_class": {"identifier": "FileTypeServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FILE_TYPE_CODE_WITH_EXTRA_SPACES = FORMAT_FILE_TYPE_CODE + \"    \";", "modifier": "private static final", "type": "String", "declarator": "FILE_TYPE_CODE_WITH_EXTRA_SPACES = FORMAT_FILE_TYPE_CODE + \"    \"", "var_name": "FILE_TYPE_CODE_WITH_EXTRA_SPACES"}, {"original_string": "private static final FileTypeCreateRequest FILE_TYPE_CREATE_REQUEST = new FileTypeCreateRequest()\n    {{\n        setFileTypeCode(FORMAT_FILE_TYPE_CODE);\n    }};", "modifier": "private static final", "type": "FileTypeCreateRequest", "declarator": "FILE_TYPE_CREATE_REQUEST = new FileTypeCreateRequest()\n    {{\n        setFileTypeCode(FORMAT_FILE_TYPE_CODE);\n    }}", "var_name": "FILE_TYPE_CREATE_REQUEST"}, {"original_string": "private static final FileTypeCreateRequest FILE_TYPE_CREATE_REQUEST_WITH_EXTRA_SPACES_IN_NAME = new FileTypeCreateRequest()\n    {{\n        setFileTypeCode(FILE_TYPE_CODE_WITH_EXTRA_SPACES);\n    }};", "modifier": "private static final", "type": "FileTypeCreateRequest", "declarator": "FILE_TYPE_CREATE_REQUEST_WITH_EXTRA_SPACES_IN_NAME = new FileTypeCreateRequest()\n    {{\n        setFileTypeCode(FILE_TYPE_CODE_WITH_EXTRA_SPACES);\n    }}", "var_name": "FILE_TYPE_CREATE_REQUEST_WITH_EXTRA_SPACES_IN_NAME"}, {"original_string": "private static final FileTypeKey FILE_TYPE_KEY = new FileTypeKey()\n    {{\n        setFileTypeCode(FORMAT_FILE_TYPE_CODE);\n    }};", "modifier": "private static final", "type": "FileTypeKey", "declarator": "FILE_TYPE_KEY = new FileTypeKey()\n    {{\n        setFileTypeCode(FORMAT_FILE_TYPE_CODE);\n    }}", "var_name": "FILE_TYPE_KEY"}, {"original_string": "private static final FileTypeKey FILE_TYPE_KEY_WITH_EXTRA_SPACES_IN_NAME = new FileTypeKey()\n    {{\n        setFileTypeCode(FILE_TYPE_CODE_WITH_EXTRA_SPACES);\n    }};", "modifier": "private static final", "type": "FileTypeKey", "declarator": "FILE_TYPE_KEY_WITH_EXTRA_SPACES_IN_NAME = new FileTypeKey()\n    {{\n        setFileTypeCode(FILE_TYPE_CODE_WITH_EXTRA_SPACES);\n    }}", "var_name": "FILE_TYPE_KEY_WITH_EXTRA_SPACES_IN_NAME"}, {"original_string": "private static final FileTypeEntity FILE_TYPE_ENTITY = new FileTypeEntity()\n    {{\n        setCode(FORMAT_FILE_TYPE_CODE);\n        setCreatedBy(CREATED_BY);\n        setUpdatedBy(CREATED_BY);\n        setCreatedOn(new Timestamp(CREATED_ON.getMillisecond()));\n    }};", "modifier": "private static final", "type": "FileTypeEntity", "declarator": "FILE_TYPE_ENTITY = new FileTypeEntity()\n    {{\n        setCode(FORMAT_FILE_TYPE_CODE);\n        setCreatedBy(CREATED_BY);\n        setUpdatedBy(CREATED_BY);\n        setCreatedOn(new Timestamp(CREATED_ON.getMillisecond()));\n    }}", "var_name": "FILE_TYPE_ENTITY"}, {"original_string": "private static final List<FileTypeKey> ALL_FILE_TYPE_KEYS = Arrays.asList(new FileTypeKey()\n        {{\n            setFileTypeCode(FORMAT_FILE_TYPE_CODE);\n        }},\n\n        new FileTypeKey()\n        {{\n            setFileTypeCode(FORMAT_FILE_TYPE_CODE_2);\n        }},\n\n        new FileTypeKey()\n        {{\n            setFileTypeCode(FORMAT_FILE_TYPE_CODE_3);\n        }});", "modifier": "private static final", "type": "List<FileTypeKey>", "declarator": "ALL_FILE_TYPE_KEYS = Arrays.asList(new FileTypeKey()\n        {{\n            setFileTypeCode(FORMAT_FILE_TYPE_CODE);\n        }},\n\n        new FileTypeKey()\n        {{\n            setFileTypeCode(FORMAT_FILE_TYPE_CODE_2);\n        }},\n\n        new FileTypeKey()\n        {{\n            setFileTypeCode(FORMAT_FILE_TYPE_CODE_3);\n        }})", "var_name": "ALL_FILE_TYPE_KEYS"}, {"original_string": "@InjectMocks\n    private FileTypeServiceImpl fileTypeMockService;", "modifier": "@InjectMocks\n    private", "type": "FileTypeServiceImpl", "declarator": "fileTypeMockService", "var_name": "fileTypeMockService"}, {"original_string": "@Mock\n    private AlternateKeyHelper alternateKeyHelper;", "modifier": "@Mock\n    private", "type": "AlternateKeyHelper", "declarator": "alternateKeyHelper", "var_name": "alternateKeyHelper"}, {"original_string": "@Mock\n    private FileTypeDao fileTypeMockDao;", "modifier": "@Mock\n    private", "type": "FileTypeDao", "declarator": "fileTypeMockDao", "var_name": "fileTypeMockDao"}, {"original_string": "@Mock\n    private FileTypeDaoHelper fileTypeDaoHelper;", "modifier": "@Mock\n    private", "type": "FileTypeDaoHelper", "declarator": "fileTypeDaoHelper", "var_name": "fileTypeDaoHelper"}, {"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/impl/FileTypeServiceImplTest.java"}, "test_case": {"identifier": "testCreateFileTypeAlreadyExists", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateFileTypeAlreadyExists()\n    {\n        expectedException.expect(AlreadyExistsException.class);\n        expectedException.expectMessage(String.format(\"Unable to create file type \\\"%s\\\" because it already exists.\", FORMAT_FILE_TYPE_CODE));\n\n        when(fileTypeMockDao.getFileTypeByCode(FORMAT_FILE_TYPE_CODE)).thenReturn(FILE_TYPE_ENTITY);\n        when(alternateKeyHelper.validateStringParameter(anyString(), anyString())).thenReturn(FORMAT_FILE_TYPE_CODE);\n        fileTypeMockService.createFileType(FILE_TYPE_CREATE_REQUEST);\n    }", "signature": "void testCreateFileTypeAlreadyExists()", "full_signature": "@Test public void testCreateFileTypeAlreadyExists()", "class_method_signature": "FileTypeServiceImplTest.testCreateFileTypeAlreadyExists()", "testcase": true, "constructor": false, "invocations": ["expect", "expectMessage", "format", "thenReturn", "when", "getFileTypeByCode", "thenReturn", "when", "validateStringParameter", "anyString", "anyString", "createFileType"]}, "focal_class": {"identifier": "FileTypeServiceImpl", "superclass": "", "interfaces": "implements FileTypeService", "fields": [{"original_string": "@Autowired\n    private AlternateKeyHelper alternateKeyHelper;", "modifier": "@Autowired\n    private", "type": "AlternateKeyHelper", "declarator": "alternateKeyHelper", "var_name": "alternateKeyHelper"}, {"original_string": "@Autowired\n    private FileTypeDaoHelper fileTypeDaoHelper;", "modifier": "@Autowired\n    private", "type": "FileTypeDaoHelper", "declarator": "fileTypeDaoHelper", "var_name": "fileTypeDaoHelper"}, {"original_string": "@Autowired\n    private FileTypeDao fileTypeDao;", "modifier": "@Autowired\n    private", "type": "FileTypeDao", "declarator": "fileTypeDao", "var_name": "fileTypeDao"}], "methods": [{"identifier": "createFileType", "parameters": "(FileTypeCreateRequest fileTypeCreateRequest)", "modifiers": "@Override public", "return": "FileType", "signature": "FileType createFileType(FileTypeCreateRequest fileTypeCreateRequest)", "full_signature": "@Override public FileType createFileType(FileTypeCreateRequest fileTypeCreateRequest)", "class_method_signature": "FileTypeServiceImpl.createFileType(FileTypeCreateRequest fileTypeCreateRequest)", "testcase": false, "constructor": false}, {"identifier": "getFileType", "parameters": "(FileTypeKey fileTypeKey)", "modifiers": "@Override public", "return": "FileType", "signature": "FileType getFileType(FileTypeKey fileTypeKey)", "full_signature": "@Override public FileType getFileType(FileTypeKey fileTypeKey)", "class_method_signature": "FileTypeServiceImpl.getFileType(FileTypeKey fileTypeKey)", "testcase": false, "constructor": false}, {"identifier": "deleteFileType", "parameters": "(FileTypeKey fileTypeKey)", "modifiers": "@Override public", "return": "FileType", "signature": "FileType deleteFileType(FileTypeKey fileTypeKey)", "full_signature": "@Override public FileType deleteFileType(FileTypeKey fileTypeKey)", "class_method_signature": "FileTypeServiceImpl.deleteFileType(FileTypeKey fileTypeKey)", "testcase": false, "constructor": false}, {"identifier": "getFileTypes", "parameters": "()", "modifiers": "@Override public", "return": "FileTypeKeys", "signature": "FileTypeKeys getFileTypes()", "full_signature": "@Override public FileTypeKeys getFileTypes()", "class_method_signature": "FileTypeServiceImpl.getFileTypes()", "testcase": false, "constructor": false}, {"identifier": "validateFileTypeCreateRequest", "parameters": "(FileTypeCreateRequest request)", "modifiers": "", "return": "void", "signature": "void validateFileTypeCreateRequest(FileTypeCreateRequest request)", "full_signature": " void validateFileTypeCreateRequest(FileTypeCreateRequest request)", "class_method_signature": "FileTypeServiceImpl.validateFileTypeCreateRequest(FileTypeCreateRequest request)", "testcase": false, "constructor": false}, {"identifier": "validateAndTrimFileTypeKey", "parameters": "(FileTypeKey fileTypeKey)", "modifiers": "", "return": "void", "signature": "void validateAndTrimFileTypeKey(FileTypeKey fileTypeKey)", "full_signature": " void validateAndTrimFileTypeKey(FileTypeKey fileTypeKey)", "class_method_signature": "FileTypeServiceImpl.validateAndTrimFileTypeKey(FileTypeKey fileTypeKey)", "testcase": false, "constructor": false}, {"identifier": "createFileTypeEntity", "parameters": "(FileTypeCreateRequest request)", "modifiers": "private", "return": "FileTypeEntity", "signature": "FileTypeEntity createFileTypeEntity(FileTypeCreateRequest request)", "full_signature": "private FileTypeEntity createFileTypeEntity(FileTypeCreateRequest request)", "class_method_signature": "FileTypeServiceImpl.createFileTypeEntity(FileTypeCreateRequest request)", "testcase": false, "constructor": false}, {"identifier": "createFileTypeFromEntity", "parameters": "(FileTypeEntity fileTypeEntity)", "modifiers": "private", "return": "FileType", "signature": "FileType createFileTypeFromEntity(FileTypeEntity fileTypeEntity)", "full_signature": "private FileType createFileTypeFromEntity(FileTypeEntity fileTypeEntity)", "class_method_signature": "FileTypeServiceImpl.createFileTypeFromEntity(FileTypeEntity fileTypeEntity)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/impl/FileTypeServiceImpl.java"}, "focal_method": {"identifier": "createFileType", "parameters": "(FileTypeCreateRequest fileTypeCreateRequest)", "modifiers": "@Override public", "return": "FileType", "body": "@Override\n    public FileType createFileType(FileTypeCreateRequest fileTypeCreateRequest)\n    {\n        // Perform the validation.\n        validateFileTypeCreateRequest(fileTypeCreateRequest);\n\n        // Ensure a file type with the specified file type code doesn't already exist.\n        FileTypeEntity fileTypeEntity = fileTypeDao.getFileTypeByCode(fileTypeCreateRequest.getFileTypeCode());\n        if (fileTypeEntity != null)\n        {\n            throw new AlreadyExistsException(\n                String.format(\"Unable to create file type \\\"%s\\\" because it already exists.\", fileTypeCreateRequest.getFileTypeCode()));\n        }\n\n        // Create a file type entity from the request information.\n        fileTypeEntity = createFileTypeEntity(fileTypeCreateRequest);\n\n        // Persist the new entity.\n        fileTypeEntity = fileTypeDao.saveAndRefresh(fileTypeEntity);\n\n        // Create and return the file type object from the persisted entity.\n        return createFileTypeFromEntity(fileTypeEntity);\n    }", "signature": "FileType createFileType(FileTypeCreateRequest fileTypeCreateRequest)", "full_signature": "@Override public FileType createFileType(FileTypeCreateRequest fileTypeCreateRequest)", "class_method_signature": "FileTypeServiceImpl.createFileType(FileTypeCreateRequest fileTypeCreateRequest)", "testcase": false, "constructor": false, "invocations": ["validateFileTypeCreateRequest", "getFileTypeByCode", "getFileTypeCode", "format", "getFileTypeCode", "createFileTypeEntity", "saveAndRefresh", "createFileTypeFromEntity"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}