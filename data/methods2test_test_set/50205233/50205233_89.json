{"test_class": {"identifier": "ByteBufferConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TOPIC = \"topic\";", "modifier": "private static final", "type": "String", "declarator": "TOPIC = \"topic\"", "var_name": "TOPIC"}, {"original_string": "private static final byte[] SAMPLE_BYTES = \"sample string\".getBytes(StandardCharsets.UTF_8);", "modifier": "private static final", "type": "byte[]", "declarator": "SAMPLE_BYTES = \"sample string\".getBytes(StandardCharsets.UTF_8)", "var_name": "SAMPLE_BYTES"}, {"original_string": "private ByteBufferConverter converter = new ByteBufferConverter();", "modifier": "private", "type": "ByteBufferConverter", "declarator": "converter = new ByteBufferConverter()", "var_name": "converter"}], "file": "debezium-core/src/test/java/io/debezium/converters/ByteBufferConverterTest.java"}, "test_case": {"identifier": "shouldConvertToConnectData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldConvertToConnectData() {\n        SchemaAndValue schemaAndValue = converter.toConnectData(TOPIC, SAMPLE_BYTES);\n\n        assertThat(schemaAndValue.schema()).isEqualTo(Schema.OPTIONAL_BYTES_SCHEMA);\n        assertThat(schemaAndValue.value()).isEqualTo(ByteBuffer.wrap(SAMPLE_BYTES));\n    }", "signature": "void shouldConvertToConnectData()", "full_signature": "@Test public void shouldConvertToConnectData()", "class_method_signature": "ByteBufferConverterTest.shouldConvertToConnectData()", "testcase": true, "constructor": false, "invocations": ["toConnectData", "isEqualTo", "assertThat", "schema", "isEqualTo", "assertThat", "value", "wrap"]}, "focal_class": {"identifier": "ByteBufferConverter", "superclass": "", "interfaces": "implements Converter, HeaderConverter", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ByteBufferConverter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ByteBufferConverter.class)", "var_name": "LOGGER"}, {"original_string": "public static final String DELEGATE_CONVERTER_TYPE = \"delegate.converter.type\";", "modifier": "public static final", "type": "String", "declarator": "DELEGATE_CONVERTER_TYPE = \"delegate.converter.type\"", "var_name": "DELEGATE_CONVERTER_TYPE"}, {"original_string": "private Converter delegateConverter;", "modifier": "private", "type": "Converter", "declarator": "delegateConverter", "var_name": "delegateConverter"}, {"original_string": "private static final ConfigDef CONFIG_DEF;", "modifier": "private static final", "type": "ConfigDef", "declarator": "CONFIG_DEF", "var_name": "CONFIG_DEF"}], "methods": [{"identifier": "config", "parameters": "()", "modifiers": "@Override public", "return": "ConfigDef", "signature": "ConfigDef config()", "full_signature": "@Override public ConfigDef config()", "class_method_signature": "ByteBufferConverter.config()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Map<String, ?> configs)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Map<String, ?> configs)", "full_signature": "@Override public void configure(Map<String, ?> configs)", "class_method_signature": "ByteBufferConverter.configure(Map<String, ?> configs)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Map<String, ?> configs, boolean isKey)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Map<String, ?> configs, boolean isKey)", "full_signature": "@Override public void configure(Map<String, ?> configs, boolean isKey)", "class_method_signature": "ByteBufferConverter.configure(Map<String, ?> configs, boolean isKey)", "testcase": false, "constructor": false}, {"identifier": "fromConnectData", "parameters": "(String topic, Schema schema, Object value)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] fromConnectData(String topic, Schema schema, Object value)", "full_signature": "@Override public byte[] fromConnectData(String topic, Schema schema, Object value)", "class_method_signature": "ByteBufferConverter.fromConnectData(String topic, Schema schema, Object value)", "testcase": false, "constructor": false}, {"identifier": "assertDataException", "parameters": "(String name, Object type)", "modifiers": "private", "return": "void", "signature": "void assertDataException(String name, Object type)", "full_signature": "private void assertDataException(String name, Object type)", "class_method_signature": "ByteBufferConverter.assertDataException(String name, Object type)", "testcase": false, "constructor": false}, {"identifier": "toConnectData", "parameters": "(String topic, byte[] value)", "modifiers": "@Override public", "return": "SchemaAndValue", "signature": "SchemaAndValue toConnectData(String topic, byte[] value)", "full_signature": "@Override public SchemaAndValue toConnectData(String topic, byte[] value)", "class_method_signature": "ByteBufferConverter.toConnectData(String topic, byte[] value)", "testcase": false, "constructor": false}, {"identifier": "fromConnectHeader", "parameters": "(String topic, String headerKey, Schema schema, Object value)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] fromConnectHeader(String topic, String headerKey, Schema schema, Object value)", "full_signature": "@Override public byte[] fromConnectHeader(String topic, String headerKey, Schema schema, Object value)", "class_method_signature": "ByteBufferConverter.fromConnectHeader(String topic, String headerKey, Schema schema, Object value)", "testcase": false, "constructor": false}, {"identifier": "toConnectHeader", "parameters": "(String topic, String headerKey, byte[] value)", "modifiers": "@Override public", "return": "SchemaAndValue", "signature": "SchemaAndValue toConnectHeader(String topic, String headerKey, byte[] value)", "full_signature": "@Override public SchemaAndValue toConnectHeader(String topic, String headerKey, byte[] value)", "class_method_signature": "ByteBufferConverter.toConnectHeader(String topic, String headerKey, byte[] value)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "ByteBufferConverter.close()", "testcase": false, "constructor": false}], "file": "debezium-core/src/main/java/io/debezium/converters/ByteBufferConverter.java"}, "focal_method": {"identifier": "toConnectData", "parameters": "(String topic, byte[] value)", "modifiers": "@Override public", "return": "SchemaAndValue", "body": "@Override\n    public SchemaAndValue toConnectData(String topic, byte[] value) {\n        return new SchemaAndValue(Schema.OPTIONAL_BYTES_SCHEMA, value == null ? null : ByteBuffer.wrap(value));\n    }", "signature": "SchemaAndValue toConnectData(String topic, byte[] value)", "full_signature": "@Override public SchemaAndValue toConnectData(String topic, byte[] value)", "class_method_signature": "ByteBufferConverter.toConnectData(String topic, byte[] value)", "testcase": false, "constructor": false, "invocations": ["wrap"]}, "repository": {"repo_id": 50205233, "url": "https://github.com/debezium/debezium", "stars": 2686, "created": "1/22/2016 8:17:05 PM +00:00", "updates": "2020-01-27T20:48:54+00:00", "fork": "False", "license": "licensed"}}