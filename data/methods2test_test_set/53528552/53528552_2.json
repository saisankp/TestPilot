{"test_class": {"identifier": "RegexEvaluatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "RegexEvaluator eval;", "modifier": "", "type": "RegexEvaluator", "declarator": "eval", "var_name": "eval"}], "file": "NetbeansRegexPlugin/src/test/java/de/dev/eth0/netbeans/plugins/regex/RegexEvaluatorTest.java"}, "test_case": {"identifier": "testMultipleGroups", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testMultipleGroups() {\n    String testInput = \"Foobar Ipsum Lorem\";\n    eval.update(\"Foo(.*) (.*)\", 0, \"\", testInput);\n    assertTrue(eval.matches);\n    assertTrue(eval.lookingAt);\n    assertTrue(eval.find);\n    assertEquals(3, eval.groups.length);\n    assertEquals(testInput, eval.groups[0].group);\n    assertEquals(0, eval.groups[0].start);\n    assertEquals(testInput.length(), eval.groups[0].end);\n    assertEquals(\"bar Ipsum\", eval.groups[1].group);\n    assertEquals(3, eval.groups[1].start);\n    assertEquals(12, eval.groups[1].end);\n    assertEquals(\"Lorem\", eval.groups[2].group);\n    assertEquals(13, eval.groups[2].start);\n    assertEquals(testInput.length(), eval.groups[2].end);\n  }", "signature": "void testMultipleGroups()", "full_signature": "@Test public void testMultipleGroups()", "class_method_signature": "RegexEvaluatorTest.testMultipleGroups()", "testcase": true, "constructor": false, "invocations": ["update", "assertTrue", "assertTrue", "assertTrue", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "length", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "length"]}, "focal_class": {"identifier": "RegexEvaluator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String regex = \"\";", "modifier": "private", "type": "String", "declarator": "regex = \"\"", "var_name": "regex"}, {"original_string": "private int flags = 0;", "modifier": "private", "type": "int", "declarator": "flags = 0", "var_name": "flags"}, {"original_string": "private Pattern pattern;", "modifier": "private", "type": "Pattern", "declarator": "pattern", "var_name": "pattern"}, {"original_string": "private Matcher matcher;", "modifier": "private", "type": "Matcher", "declarator": "matcher", "var_name": "matcher"}, {"original_string": "public boolean validRegex;", "modifier": "public", "type": "boolean", "declarator": "validRegex", "var_name": "validRegex"}, {"original_string": "public boolean validReplex;", "modifier": "public", "type": "boolean", "declarator": "validReplex", "var_name": "validReplex"}, {"original_string": "public String regexReason;", "modifier": "public", "type": "String", "declarator": "regexReason", "var_name": "regexReason"}, {"original_string": "public String replexReason;", "modifier": "public", "type": "String", "declarator": "replexReason", "var_name": "replexReason"}, {"original_string": "public boolean matches;", "modifier": "public", "type": "boolean", "declarator": "matches", "var_name": "matches"}, {"original_string": "public String replaceFirst;", "modifier": "public", "type": "String", "declarator": "replaceFirst", "var_name": "replaceFirst"}, {"original_string": "public String replaceAll;", "modifier": "public", "type": "String", "declarator": "replaceAll", "var_name": "replaceAll"}, {"original_string": "public boolean lookingAt;", "modifier": "public", "type": "boolean", "declarator": "lookingAt", "var_name": "lookingAt"}, {"original_string": "public boolean find;", "modifier": "public", "type": "boolean", "declarator": "find", "var_name": "find"}, {"original_string": "public MatcherGroup[] groups = new MatcherGroup[0];", "modifier": "public", "type": "MatcherGroup[]", "declarator": "groups = new MatcherGroup[0]", "var_name": "groups"}], "methods": [{"identifier": "update", "parameters": "(String regex, int flags, String replacement, String input)", "modifiers": "public", "return": "void", "signature": "void update(String regex, int flags, String replacement, String input)", "full_signature": "public void update(String regex, int flags, String replacement, String input)", "class_method_signature": "RegexEvaluator.update(String regex, int flags, String replacement, String input)", "testcase": false, "constructor": false}, {"identifier": "isNotEmpty", "parameters": "(String toTest)", "modifiers": "private", "return": "boolean", "signature": "boolean isNotEmpty(String toTest)", "full_signature": "private boolean isNotEmpty(String toTest)", "class_method_signature": "RegexEvaluator.isNotEmpty(String toTest)", "testcase": false, "constructor": false}], "file": "NetbeansRegexPlugin/src/main/java/de/dev/eth0/netbeans/plugins/regex/RegexEvaluator.java"}, "focal_method": {"identifier": "update", "parameters": "(String regex, int flags, String replacement, String input)", "modifiers": "public", "return": "void", "body": "public void update(String regex, int flags, String replacement, String input) {\n        try {\n            //TODO: catch empty/null exceptions\n            if (!this.regex.equals(regex) || this.flags != flags) {\n                pattern = Pattern.compile(regex, flags);\n                this.regex = regex;\n                this.flags = flags;\n                this.validRegex = true;\n                this.validReplex = true;\n            }\n            if (pattern != null) {\n                matcher = pattern.matcher(input);\n                matches = matcher.matches();\n                matcher.reset();\n                if (isNotEmpty(replacement)) {\n                    try {\n                        replaceFirst = matcher.replaceFirst(replacement);\n                        replaceAll = matcher.replaceAll(replacement);\n                        validReplex = true;\n                    } catch (IllegalArgumentException iae) {\n                        validReplex = false;\n                        replexReason = iae.getMessage();\n                        replaceAll = \"\";\n                        replaceFirst = \"\";\n                    } catch (IndexOutOfBoundsException ioe) {\n                        validReplex = false;\n                        replexReason = ioe.getMessage();\n                        replaceAll = \"\";\n                        replaceFirst = \"\";\n                    }\n                }\n                lookingAt = matcher.lookingAt();\n                matcher.reset();\n                find = matcher.find();\n                if (find) {\n                    groups = new MatcherGroup[matcher.groupCount() + 1];\n                    for (int i = 0; i < matcher.groupCount() + 1; i++) {\n                        groups[i] = new MatcherGroup(matcher.start(i), matcher.end(i), matcher.group(i));\n                    }\n                } else {\n                    groups = new MatcherGroup[0];\n                }\n            }\n        } catch (PatternSyntaxException pse) {\n            this.validRegex = false;\n            this.regexReason = pse.getMessage();\n        }\n    }", "signature": "void update(String regex, int flags, String replacement, String input)", "full_signature": "public void update(String regex, int flags, String replacement, String input)", "class_method_signature": "RegexEvaluator.update(String regex, int flags, String replacement, String input)", "testcase": false, "constructor": false, "invocations": ["equals", "compile", "matcher", "matches", "reset", "isNotEmpty", "replaceFirst", "replaceAll", "getMessage", "getMessage", "lookingAt", "reset", "find", "groupCount", "groupCount", "start", "end", "group", "getMessage"]}, "repository": {"repo_id": 53528552, "url": "https://github.com/deveth0/NetbeansRegexPlugin", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 49, "license": "licensed"}}