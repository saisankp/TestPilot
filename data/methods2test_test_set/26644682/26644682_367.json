{"test_class": {"identifier": "CSVFormatUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private CSVFormatUtils csvFormatUtils = new CSVFormatUtils();", "modifier": "@InjectMocks\n    private", "type": "CSVFormatUtils", "declarator": "csvFormatUtils = new CSVFormatUtils()", "var_name": "csvFormatUtils"}, {"original_string": "@Mock\n    private ObjectMapper mapper = new ObjectMapper();", "modifier": "@Mock\n    private", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/schema/csv/CSVFormatUtilsTest.java"}, "test_case": {"identifier": "should_compile_parameters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_compile_parameters() {\n        // given\n        ReflectionTestUtils.setField(csvFormatUtils, \"defaultTextEnclosure\", \"\\\"\");\n        ReflectionTestUtils.setField(csvFormatUtils, \"defaultEscapeChar\", \"\\u0000\");\n\n        final Map<String, String> entryParameters = initMapParam();\n\n        final Separator separator = new Separator(\"|\".charAt(0));\n\n        // when\n        csvFormatUtils.compileParameterProperties(separator, entryParameters);\n\n        // then\n        assertEquals(5, entryParameters.size());\n        assertEquals(\"\\u0000\", entryParameters.get(ESCAPE_CHAR));\n        assertEquals(\"\\\"\", entryParameters.get(TEXT_ENCLOSURE_CHAR));\n        assertEquals(\"|\", entryParameters.get(SEPARATOR_PARAMETER));\n        assertEquals(\"0\", entryParameters.get(HEADER_NB_LINES_PARAMETER));\n        assertEquals(null, entryParameters.get(HEADER_COLUMNS_PARAMETER));\n    }", "signature": "void should_compile_parameters()", "full_signature": "@Test public void should_compile_parameters()", "class_method_signature": "CSVFormatUtilsTest.should_compile_parameters()", "testcase": true, "constructor": false, "invocations": ["setField", "setField", "initMapParam", "charAt", "compileParameterProperties", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "CSVFormatUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ObjectMapper mapper;", "modifier": "@Autowired\n    private", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "@Value(\"${default.import.text.enclosure:\\\"}\")\n    private String defaultTextEnclosure;", "modifier": "@Value(\"${default.import.text.enclosure:\\\"}\")\n    private", "type": "String", "declarator": "defaultTextEnclosure", "var_name": "defaultTextEnclosure"}, {"original_string": "@Value(\"${default.import.text.escape:\\u0000}\")\n    private String defaultEscapeChar;", "modifier": "@Value(\"${default.import.text.escape:\\u0000}\")\n    private", "type": "String", "declarator": "defaultEscapeChar", "var_name": "defaultEscapeChar"}], "methods": [{"identifier": "retrieveHeader", "parameters": "(Map<String, String> parameters)", "modifiers": "", "return": "List<String>", "signature": "List<String> retrieveHeader(Map<String, String> parameters)", "full_signature": " List<String> retrieveHeader(Map<String, String> parameters)", "class_method_signature": "CSVFormatUtils.retrieveHeader(Map<String, String> parameters)", "testcase": false, "constructor": false}, {"identifier": "compileParameterProperties", "parameters": "(Separator separator, Map<String, String> updatedParameters)", "modifiers": "", "return": "Map<String, String>", "signature": "Map<String, String> compileParameterProperties(Separator separator, Map<String, String> updatedParameters)", "full_signature": " Map<String, String> compileParameterProperties(Separator separator, Map<String, String> updatedParameters)", "class_method_signature": "CSVFormatUtils.compileParameterProperties(Separator separator, Map<String, String> updatedParameters)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/schema/csv/CSVFormatUtils.java"}, "focal_method": {"identifier": "compileParameterProperties", "parameters": "(Separator separator, Map<String, String> updatedParameters)", "modifiers": "", "return": "Map<String, String>", "body": "Map<String, String> compileParameterProperties(Separator separator, Map<String, String> updatedParameters) {\n\n        List<String> header = separator.getHeaders().stream().map(Pair::getKey).collect(Collectors.toList());\n        // header\n        String jsonHeader;\n        try {\n            jsonHeader = mapper.writeValueAsString(header);\n        } catch (Exception e) {\n            throw new TDPException(UNABLE_TO_SERIALIZE_TO_JSON, e);\n        }\n        updatedParameters.put(HEADER_COLUMNS_PARAMETER, jsonHeader);\n\n        updatedParameters.put(HEADER_NB_LINES_PARAMETER, separator.isFirstLineAHeader() ? \"1\" : \"0\");\n        // separator\n        updatedParameters.put(SEPARATOR_PARAMETER, String.valueOf(separator.getSeparator()));\n\n        // if no parameter set set take the default one\n        updatedParameters.putIfAbsent(TEXT_ENCLOSURE_CHAR, defaultTextEnclosure);\n        updatedParameters.putIfAbsent(ESCAPE_CHAR, defaultEscapeChar);\n\n        return updatedParameters;\n    }", "signature": "Map<String, String> compileParameterProperties(Separator separator, Map<String, String> updatedParameters)", "full_signature": " Map<String, String> compileParameterProperties(Separator separator, Map<String, String> updatedParameters)", "class_method_signature": "CSVFormatUtils.compileParameterProperties(Separator separator, Map<String, String> updatedParameters)", "testcase": false, "constructor": false, "invocations": ["collect", "map", "stream", "getHeaders", "toList", "writeValueAsString", "put", "put", "isFirstLineAHeader", "put", "valueOf", "getSeparator", "putIfAbsent", "putIfAbsent"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}