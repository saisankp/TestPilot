{"test_class": {"identifier": "LuceneSearchEngineTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEXT = \"text\";", "modifier": "private static final", "type": "String", "declarator": "TEXT = \"text\"", "var_name": "TEXT"}, {"original_string": "private static final String FIELD_PATH = \"path\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_PATH = \"path\"", "var_name": "FIELD_PATH"}, {"original_string": "private static final int TOP_QUERY_HITS = 10000;", "modifier": "private static final", "type": "int", "declarator": "TOP_QUERY_HITS = 10000", "var_name": "TOP_QUERY_HITS"}, {"original_string": "private ScoreDoc[] scoreDocs;", "modifier": "private", "type": "ScoreDoc[]", "declarator": "scoreDocs", "var_name": "scoreDocs"}, {"original_string": "private TopDocs queryResult;", "modifier": "private", "type": "TopDocs", "declarator": "queryResult", "var_name": "queryResult"}, {"original_string": "private Document document;", "modifier": "private", "type": "Document", "declarator": "document", "var_name": "document"}, {"original_string": "@Mock\n    private IndexReader indexReader;", "modifier": "@Mock\n    private", "type": "IndexReader", "declarator": "indexReader", "var_name": "indexReader"}, {"original_string": "@Mock\n    private IndexSearcher indexSearcher;", "modifier": "@Mock\n    private", "type": "IndexSearcher", "declarator": "indexSearcher", "var_name": "indexSearcher"}, {"original_string": "@Mock\n    private IndexReaderFactory readerFactory;", "modifier": "@Mock\n    private", "type": "IndexReaderFactory", "declarator": "readerFactory", "var_name": "readerFactory"}, {"original_string": "@Mock\n    private QueryParser queryParser;", "modifier": "@Mock\n    private", "type": "QueryParser", "declarator": "queryParser", "var_name": "queryParser"}, {"original_string": "@Mock\n    private IndexSearcherFactory searcherFactory;", "modifier": "@Mock\n    private", "type": "IndexSearcherFactory", "declarator": "searcherFactory", "var_name": "searcherFactory"}, {"original_string": "@Mock\n    private CurrentTimeProvider currentTimeProvider;", "modifier": "@Mock\n    private", "type": "CurrentTimeProvider", "declarator": "currentTimeProvider", "var_name": "currentTimeProvider"}, {"original_string": "@Mock\n    private Logger logger;", "modifier": "@Mock\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Mock\n    private Query query;", "modifier": "@Mock\n    private", "type": "Query", "declarator": "query", "var_name": "query"}, {"original_string": "@InjectMocks\n    private LuceneSearchEngine underTest;", "modifier": "@InjectMocks\n    private", "type": "LuceneSearchEngine", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-message-search/modules/wilma-message-search-lucene/src/test/java/com/epam/wilma/message/search/lucene/search/LuceneSearchEngineTest.java"}, "test_case": {"identifier": "testInitQueryParserProperties", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInitQueryParserProperties() {\n        //GIVEN in setUp\n        //WHEN\n        underTest.initQueryParserProperties();\n        //THEN\n        verify(queryParser).setLowercaseExpandedTerms(true);\n        verify(queryParser).setAllowLeadingWildcard(true);\n    }", "signature": "void testInitQueryParserProperties()", "full_signature": "@Test public void testInitQueryParserProperties()", "class_method_signature": "LuceneSearchEngineTest.testInitQueryParserProperties()", "testcase": true, "constructor": false, "invocations": ["initQueryParserProperties", "setLowercaseExpandedTerms", "verify", "setAllowLeadingWildcard", "verify"]}, "focal_class": {"identifier": "LuceneSearchEngine", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FIELD_PATH = \"path\";", "modifier": "private static final", "type": "String", "declarator": "FIELD_PATH = \"path\"", "var_name": "FIELD_PATH"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(LuceneSearchEngine.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(LuceneSearchEngine.class)", "var_name": "logger"}, {"original_string": "@Value(\"#{topQueryHits}\")\n    private int topQueryHits;", "modifier": "@Value(\"#{topQueryHits}\")\n    private", "type": "int", "declarator": "topQueryHits", "var_name": "topQueryHits"}, {"original_string": "private IndexReader indexReader;", "modifier": "private", "type": "IndexReader", "declarator": "indexReader", "var_name": "indexReader"}, {"original_string": "private IndexSearcher indexSearcher;", "modifier": "private", "type": "IndexSearcher", "declarator": "indexSearcher", "var_name": "indexSearcher"}, {"original_string": "@Autowired\n    private IndexReaderFactory readerFactory;", "modifier": "@Autowired\n    private", "type": "IndexReaderFactory", "declarator": "readerFactory", "var_name": "readerFactory"}, {"original_string": "@Autowired\n    private QueryParser queryParser;", "modifier": "@Autowired\n    private", "type": "QueryParser", "declarator": "queryParser", "var_name": "queryParser"}, {"original_string": "@Autowired\n    private IndexSearcherFactory searcherFactory;", "modifier": "@Autowired\n    private", "type": "IndexSearcherFactory", "declarator": "searcherFactory", "var_name": "searcherFactory"}, {"original_string": "@Autowired\n    private CurrentTimeProvider currentTimeProvider;", "modifier": "@Autowired\n    private", "type": "CurrentTimeProvider", "declarator": "currentTimeProvider", "var_name": "currentTimeProvider"}], "methods": [{"identifier": "initQueryParserProperties", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void initQueryParserProperties()", "full_signature": "@PostConstruct public void initQueryParserProperties()", "class_method_signature": "LuceneSearchEngine.initQueryParserProperties()", "testcase": false, "constructor": false}, {"identifier": "searchForText", "parameters": "(final String text)", "modifiers": "public", "return": "List<String>", "signature": "List<String> searchForText(final String text)", "full_signature": "public List<String> searchForText(final String text)", "class_method_signature": "LuceneSearchEngine.searchForText(final String text)", "testcase": false, "constructor": false}, {"identifier": "doSearch", "parameters": "(final Query query)", "modifiers": "private", "return": "TopDocs", "signature": "TopDocs doSearch(final Query query)", "full_signature": "private TopDocs doSearch(final Query query)", "class_method_signature": "LuceneSearchEngine.doSearch(final Query query)", "testcase": false, "constructor": false}, {"identifier": "getFileNames", "parameters": "(final TopDocs result)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getFileNames(final TopDocs result)", "full_signature": "private List<String> getFileNames(final TopDocs result)", "class_method_signature": "LuceneSearchEngine.getFileNames(final TopDocs result)", "testcase": false, "constructor": false}, {"identifier": "getNewReaderAndSearcherUsingWriter", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void getNewReaderAndSearcherUsingWriter()", "full_signature": "private void getNewReaderAndSearcherUsingWriter()", "class_method_signature": "LuceneSearchEngine.getNewReaderAndSearcherUsingWriter()", "testcase": false, "constructor": false}, {"identifier": "createQuery", "parameters": "(final String query)", "modifiers": "private", "return": "Query", "signature": "Query createQuery(final String query)", "full_signature": "private Query createQuery(final String query)", "class_method_signature": "LuceneSearchEngine.createQuery(final String query)", "testcase": false, "constructor": false}, {"identifier": "getDocument", "parameters": "(final int docNumber)", "modifiers": "", "return": "Document", "signature": "Document getDocument(final int docNumber)", "full_signature": " Document getDocument(final int docNumber)", "class_method_signature": "LuceneSearchEngine.getDocument(final int docNumber)", "testcase": false, "constructor": false}, {"identifier": "closeIndexReader", "parameters": "()", "modifiers": "", "return": "void", "signature": "void closeIndexReader()", "full_signature": " void closeIndexReader()", "class_method_signature": "LuceneSearchEngine.closeIndexReader()", "testcase": false, "constructor": false}], "file": "wilma-message-search/modules/wilma-message-search-lucene/src/main/java/com/epam/wilma/message/search/lucene/search/LuceneSearchEngine.java"}, "focal_method": {"identifier": "initQueryParserProperties", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "body": "@PostConstruct\n    public void initQueryParserProperties() {\n        queryParser.setLowercaseExpandedTerms(true);\n        queryParser.setAllowLeadingWildcard(true);\n    }", "signature": "void initQueryParserProperties()", "full_signature": "@PostConstruct public void initQueryParserProperties()", "class_method_signature": "LuceneSearchEngine.initQueryParserProperties()", "testcase": false, "constructor": false, "invocations": ["setLowercaseExpandedTerms", "setAllowLeadingWildcard"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}