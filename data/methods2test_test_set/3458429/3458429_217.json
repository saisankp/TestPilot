{"test_class": {"identifier": "MultiMapTest", "superclass": "", "interfaces": "", "fields": [], "file": "firefly-common/src/test/java/com/fireflysource/common/collection/map/MultiMapTest.java"}, "test_case": {"identifier": "testPutReplace", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testPutReplace() {\n        MultiMap<String> mm = new MultiMap<>();\n\n        String key = \"formats\";\n        Object ret;\n\n        ret = mm.put(key, \"gzip\");\n        assertMapSize(mm, 1);\n        assertValues(mm, key, \"gzip\");\n        assertNull(ret);\n        Object orig = mm.get(key);\n\n        // Now replace it\n        ret = mm.put(key, \"jar\");\n        assertMapSize(mm, 1);\n        assertValues(mm, key, \"jar\");\n        assertEquals(orig, ret);\n    }", "signature": "void testPutReplace()", "full_signature": "@Test void testPutReplace()", "class_method_signature": "MultiMapTest.testPutReplace()", "testcase": true, "constructor": false, "invocations": ["put", "assertMapSize", "assertValues", "assertNull", "get", "put", "assertMapSize", "assertValues", "assertEquals"]}, "focal_class": {"identifier": "MultiMap", "superclass": "extends HashMap<String, List<V>>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -1127515104096783129L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -1127515104096783129L", "var_name": "serialVersionUID"}], "methods": [{"identifier": "MultiMap", "parameters": "()", "modifiers": "public", "return": "", "signature": " MultiMap()", "full_signature": "public  MultiMap()", "class_method_signature": "MultiMap.MultiMap()", "testcase": false, "constructor": true}, {"identifier": "MultiMap", "parameters": "(Map<String, List<V>> map)", "modifiers": "public", "return": "", "signature": " MultiMap(Map<String, List<V>> map)", "full_signature": "public  MultiMap(Map<String, List<V>> map)", "class_method_signature": "MultiMap.MultiMap(Map<String, List<V>> map)", "testcase": false, "constructor": true}, {"identifier": "MultiMap", "parameters": "(MultiMap<V> map)", "modifiers": "public", "return": "", "signature": " MultiMap(MultiMap<V> map)", "full_signature": "public  MultiMap(MultiMap<V> map)", "class_method_signature": "MultiMap.MultiMap(MultiMap<V> map)", "testcase": false, "constructor": true}, {"identifier": "getValues", "parameters": "(String name)", "modifiers": "public", "return": "List<V>", "signature": "List<V> getValues(String name)", "full_signature": "public List<V> getValues(String name)", "class_method_signature": "MultiMap.getValues(String name)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(String name, int i)", "modifiers": "public", "return": "V", "signature": "V getValue(String name, int i)", "full_signature": "public V getValue(String name, int i)", "class_method_signature": "MultiMap.getValue(String name, int i)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(String name)", "modifiers": "public", "return": "String", "signature": "String getString(String name)", "full_signature": "public String getString(String name)", "class_method_signature": "MultiMap.getString(String name)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String name, V value)", "modifiers": "public", "return": "List<V>", "signature": "List<V> put(String name, V value)", "full_signature": "public List<V> put(String name, V value)", "class_method_signature": "MultiMap.put(String name, V value)", "testcase": false, "constructor": false}, {"identifier": "putAllValues", "parameters": "(Map<String, V> input)", "modifiers": "public", "return": "void", "signature": "void putAllValues(Map<String, V> input)", "full_signature": "public void putAllValues(Map<String, V> input)", "class_method_signature": "MultiMap.putAllValues(Map<String, V> input)", "testcase": false, "constructor": false}, {"identifier": "putValues", "parameters": "(String name, List<V> values)", "modifiers": "public", "return": "List<V>", "signature": "List<V> putValues(String name, List<V> values)", "full_signature": "public List<V> putValues(String name, List<V> values)", "class_method_signature": "MultiMap.putValues(String name, List<V> values)", "testcase": false, "constructor": false}, {"identifier": "putValues", "parameters": "(String name, V... values)", "modifiers": "@SafeVarargs public final", "return": "List<V>", "signature": "List<V> putValues(String name, V... values)", "full_signature": "@SafeVarargs public final List<V> putValues(String name, V... values)", "class_method_signature": "MultiMap.putValues(String name, V... values)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(String name, V value)", "modifiers": "public", "return": "void", "signature": "void add(String name, V value)", "full_signature": "public void add(String name, V value)", "class_method_signature": "MultiMap.add(String name, V value)", "testcase": false, "constructor": false}, {"identifier": "addValues", "parameters": "(String name, List<V> values)", "modifiers": "public", "return": "void", "signature": "void addValues(String name, List<V> values)", "full_signature": "public void addValues(String name, List<V> values)", "class_method_signature": "MultiMap.addValues(String name, List<V> values)", "testcase": false, "constructor": false}, {"identifier": "addValues", "parameters": "(String name, V[] values)", "modifiers": "public", "return": "void", "signature": "void addValues(String name, V[] values)", "full_signature": "public void addValues(String name, V[] values)", "class_method_signature": "MultiMap.addValues(String name, V[] values)", "testcase": false, "constructor": false}, {"identifier": "addAllValues", "parameters": "(MultiMap<V> map)", "modifiers": "public", "return": "boolean", "signature": "boolean addAllValues(MultiMap<V> map)", "full_signature": "public boolean addAllValues(MultiMap<V> map)", "class_method_signature": "MultiMap.addAllValues(MultiMap<V> map)", "testcase": false, "constructor": false}, {"identifier": "removeValue", "parameters": "(String name, V value)", "modifiers": "public", "return": "boolean", "signature": "boolean removeValue(String name, V value)", "full_signature": "public boolean removeValue(String name, V value)", "class_method_signature": "MultiMap.removeValue(String name, V value)", "testcase": false, "constructor": false}, {"identifier": "containsSimpleValue", "parameters": "(V value)", "modifiers": "public", "return": "boolean", "signature": "boolean containsSimpleValue(V value)", "full_signature": "public boolean containsSimpleValue(V value)", "class_method_signature": "MultiMap.containsSimpleValue(V value)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "MultiMap.toString()", "testcase": false, "constructor": false}, {"identifier": "toStringArrayMap", "parameters": "()", "modifiers": "public", "return": "Map<String, String[]>", "signature": "Map<String, String[]> toStringArrayMap()", "full_signature": "public Map<String, String[]> toStringArrayMap()", "class_method_signature": "MultiMap.toStringArrayMap()", "testcase": false, "constructor": false}], "file": "firefly-common/src/main/java/com/fireflysource/common/collection/map/MultiMap.java"}, "focal_method": {"identifier": "put", "parameters": "(String name, V value)", "modifiers": "public", "return": "List<V>", "body": "public List<V> put(String name, V value) {\n        if (value == null) {\n            return super.put(name, null);\n        }\n        List<V> vals = new ArrayList<>();\n        vals.add(value);\n        return put(name, vals);\n    }", "signature": "List<V> put(String name, V value)", "full_signature": "public List<V> put(String name, V value)", "class_method_signature": "MultiMap.put(String name, V value)", "testcase": false, "constructor": false, "invocations": ["put", "add", "put"]}, "repository": {"repo_id": 3458429, "url": "https://github.com/hypercube1024/firefly", "language": "Java", "is_fork": false, "fork_count": 118, "stargazer_count": 271, "size": 29687, "license": "licensed"}}