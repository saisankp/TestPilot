{"test_class": {"identifier": "ServiceReferenceImplTest", "superclass": "", "interfaces": "", "fields": [], "file": "winegrower-core/src/test/java/org/apache/winegrower/service/ServiceReferenceImplTest.java"}, "test_case": {"identifier": "prototype", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void prototype() {\n        final ServiceReferenceImpl<Object> ref = new ServiceReferenceImpl<>(new Hashtable<>(), null,\n                new PrototypeServiceFactory<SomeService>() {\n                    @Override\n                    public SomeService getService(final Bundle bundle, final ServiceRegistration<SomeService> registration) {\n                        return new SomeService();\n                    }\n\n                    @Override\n                    public void ungetService(final Bundle bundle, final ServiceRegistration<SomeService> registration, final SomeService service) {\n                        // no-op\n                    }\n                });\n        assertNotSame(ref.getReference(), ref.getReference());\n    }", "signature": "void prototype()", "full_signature": "@Test void prototype()", "class_method_signature": "ServiceReferenceImplTest.prototype()", "testcase": true, "constructor": false, "invocations": ["assertNotSame", "getReference", "getReference"]}, "focal_class": {"identifier": "ServiceReferenceImpl", "superclass": "", "interfaces": "implements ServiceReference<T>", "fields": [{"original_string": "private final Dictionary<String, Object> properties;", "modifier": "private final", "type": "Dictionary<String, Object>", "declarator": "properties", "var_name": "properties"}, {"original_string": "private final Bundle bundle;", "modifier": "private final", "type": "Bundle", "declarator": "bundle", "var_name": "bundle"}, {"original_string": "private final Bundle[] usingBundles = new Bundle[0];", "modifier": "private final", "type": "Bundle[]", "declarator": "usingBundles = new Bundle[0]", "var_name": "usingBundles"}, {"original_string": "private final Object reference;", "modifier": "private final", "type": "Object", "declarator": "reference", "var_name": "reference"}, {"original_string": "private final boolean usesFactory;", "modifier": "private final", "type": "boolean", "declarator": "usesFactory", "var_name": "usesFactory"}, {"original_string": "private ServiceRegistrationImpl registration;", "modifier": "private", "type": "ServiceRegistrationImpl", "declarator": "registration", "var_name": "registration"}], "methods": [{"identifier": "ServiceReferenceImpl", "parameters": "(final Dictionary<String, Object> properties, final Bundle bundle, final Object reference)", "modifiers": "", "return": "", "signature": " ServiceReferenceImpl(final Dictionary<String, Object> properties, final Bundle bundle, final Object reference)", "full_signature": "  ServiceReferenceImpl(final Dictionary<String, Object> properties, final Bundle bundle, final Object reference)", "class_method_signature": "ServiceReferenceImpl.ServiceReferenceImpl(final Dictionary<String, Object> properties, final Bundle bundle, final Object reference)", "testcase": false, "constructor": true}, {"identifier": "hasFactory", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasFactory()", "full_signature": "public boolean hasFactory()", "class_method_signature": "ServiceReferenceImpl.hasFactory()", "testcase": false, "constructor": false}, {"identifier": "getRegistration", "parameters": "()", "modifiers": "public", "return": "ServiceRegistrationImpl", "signature": "ServiceRegistrationImpl getRegistration()", "full_signature": "public ServiceRegistrationImpl getRegistration()", "class_method_signature": "ServiceReferenceImpl.getRegistration()", "testcase": false, "constructor": false}, {"identifier": "setRegistration", "parameters": "(final ServiceRegistrationImpl registration)", "modifiers": "", "return": "void", "signature": "void setRegistration(final ServiceRegistrationImpl registration)", "full_signature": " void setRegistration(final ServiceRegistrationImpl registration)", "class_method_signature": "ServiceReferenceImpl.setRegistration(final ServiceRegistrationImpl registration)", "testcase": false, "constructor": false}, {"identifier": "getReference", "parameters": "()", "modifiers": "public", "return": "Object", "signature": "Object getReference()", "full_signature": "public Object getReference()", "class_method_signature": "ServiceReferenceImpl.getReference()", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(final String key)", "modifiers": "@Override public", "return": "Object", "signature": "Object getProperty(final String key)", "full_signature": "@Override public Object getProperty(final String key)", "class_method_signature": "ServiceReferenceImpl.getProperty(final String key)", "testcase": false, "constructor": false}, {"identifier": "getPropertyKeys", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getPropertyKeys()", "full_signature": "@Override public String[] getPropertyKeys()", "class_method_signature": "ServiceReferenceImpl.getPropertyKeys()", "testcase": false, "constructor": false}, {"identifier": "getBundle", "parameters": "()", "modifiers": "@Override public", "return": "Bundle", "signature": "Bundle getBundle()", "full_signature": "@Override public Bundle getBundle()", "class_method_signature": "ServiceReferenceImpl.getBundle()", "testcase": false, "constructor": false}, {"identifier": "getUsingBundles", "parameters": "()", "modifiers": "@Override public", "return": "Bundle[]", "signature": "Bundle[] getUsingBundles()", "full_signature": "@Override public Bundle[] getUsingBundles()", "class_method_signature": "ServiceReferenceImpl.getUsingBundles()", "testcase": false, "constructor": false}, {"identifier": "isAssignableTo", "parameters": "(final Bundle bundle, final String className)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAssignableTo(final Bundle bundle, final String className)", "full_signature": "@Override public boolean isAssignableTo(final Bundle bundle, final String className)", "class_method_signature": "ServiceReferenceImpl.isAssignableTo(final Bundle bundle, final String className)", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(final Object reference)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(final Object reference)", "full_signature": "@Override public int compareTo(final Object reference)", "class_method_signature": "ServiceReferenceImpl.compareTo(final Object reference)", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "()", "modifiers": "@Override public", "return": "Dictionary<String, Object>", "signature": "Dictionary<String, Object> getProperties()", "full_signature": "@Override public Dictionary<String, Object> getProperties()", "class_method_signature": "ServiceReferenceImpl.getProperties()", "testcase": false, "constructor": false}, {"identifier": "unget", "parameters": "(final Object instance)", "modifiers": "public", "return": "boolean", "signature": "boolean unget(final Object instance)", "full_signature": "public boolean unget(final Object instance)", "class_method_signature": "ServiceReferenceImpl.unget(final Object instance)", "testcase": false, "constructor": false}, {"identifier": "getFactory", "parameters": "()", "modifiers": "public", "return": "ServiceFactory<?>", "signature": "ServiceFactory<?> getFactory()", "full_signature": "public ServiceFactory<?> getFactory()", "class_method_signature": "ServiceReferenceImpl.getFactory()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ServiceReferenceImpl.toString()", "testcase": false, "constructor": false}], "file": "winegrower-core/src/main/java/org/apache/winegrower/service/ServiceReferenceImpl.java"}, "focal_method": {"identifier": "getReference", "parameters": "()", "modifiers": "public", "return": "Object", "body": "public Object getReference() {\n        if (usesFactory) {\n            return ServiceFactory.class.cast(reference).getService(bundle, registration);\n        }\n        return reference;\n    }", "signature": "Object getReference()", "full_signature": "public Object getReference()", "class_method_signature": "ServiceReferenceImpl.getReference()", "testcase": false, "constructor": false, "invocations": ["getService", "cast"]}, "repository": {"repo_id": 221147168, "url": "https://github.com/apache/karaf-winegrower", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 8, "size": 390, "license": "licensed"}}