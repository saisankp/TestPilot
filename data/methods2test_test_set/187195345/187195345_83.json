{"test_class": {"identifier": "BearingPointCalculatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static MapDatabase mapDatabase = OpenLRMapDatabaseAdaptor.from(OpenLRMapDatabaseAdaptor.class.getClassLoader().getResourceAsStream(\"teststubs/TestMapStub.xml\"));", "modifier": "private static", "type": "MapDatabase", "declarator": "mapDatabase = OpenLRMapDatabaseAdaptor.from(OpenLRMapDatabaseAdaptor.class.getClassLoader().getResourceAsStream(\"teststubs/TestMapStub.xml\"))", "var_name": "mapDatabase"}, {"original_string": "private static int bearingDistance = 25;", "modifier": "private static", "type": "int", "declarator": "bearingDistance = 25", "var_name": "bearingDistance"}, {"original_string": "private static MapDatabase multiWalkMapDatabase = OpenLRMapDatabaseAdaptor.from(OpenLRMapDatabaseAdaptor.class.getClassLoader().getResourceAsStream(\"teststubs/BearingRouteMapStub.xml\"));", "modifier": "private static", "type": "MapDatabase", "declarator": "multiWalkMapDatabase = OpenLRMapDatabaseAdaptor.from(OpenLRMapDatabaseAdaptor.class.getClassLoader().getResourceAsStream(\"teststubs/BearingRouteMapStub.xml\"))", "var_name": "multiWalkMapDatabase"}, {"original_string": "private static final BearingPointCalculator bearingPointCalculator = new BearingPointCalculator();", "modifier": "private static final", "type": "BearingPointCalculator", "declarator": "bearingPointCalculator = new BearingPointCalculator()", "var_name": "bearingPointCalculator"}], "file": "map/src/test/java/openlr/map/utils/BearingPointCalculatorTest.java"}, "test_case": {"identifier": "testBearingRouteAlongMultipleRoadSegmentsInReverseDirection", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBearingRouteAlongMultipleRoadSegmentsInReverseDirection() {\n        Line lrpLine = multiWalkMapDatabase.getLine(6L);\n        Line bearingDestination = multiWalkMapDatabase.getLine(1L);\n        assertEquals(bearingPointCalculator.calculateBearingDestinationAgainstDirection(lrpLine, 500, lrpLine.getLineLength()), bearingDestination.getStartNode().getGeoCoordinates());\n    }", "signature": "void testBearingRouteAlongMultipleRoadSegmentsInReverseDirection()", "full_signature": "@Test public void testBearingRouteAlongMultipleRoadSegmentsInReverseDirection()", "class_method_signature": "BearingPointCalculatorTest.testBearingRouteAlongMultipleRoadSegmentsInReverseDirection()", "testcase": true, "constructor": false, "invocations": ["getLine", "getLine", "assertEquals", "calculateBearingDestinationAgainstDirection", "getLineLength", "getGeoCoordinates", "getStartNode"]}, "focal_class": {"identifier": "BearingPointCalculator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "calculateNextLinesInRoute", "parameters": "(Line line, boolean inLocationDirection)", "modifiers": "private", "return": "List<Line>", "signature": "List<Line> calculateNextLinesInRoute(Line line, boolean inLocationDirection)", "full_signature": "private List<Line> calculateNextLinesInRoute(Line line, boolean inLocationDirection)", "class_method_signature": "BearingPointCalculator.calculateNextLinesInRoute(Line line, boolean inLocationDirection)", "testcase": false, "constructor": false}, {"identifier": "calculateBearingDestinationOnLine", "parameters": "(Line line, int offset, boolean inLocationDirection)", "modifiers": "private", "return": "GeoCoordinates", "signature": "GeoCoordinates calculateBearingDestinationOnLine(Line line, int offset, boolean inLocationDirection)", "full_signature": "private GeoCoordinates calculateBearingDestinationOnLine(Line line, int offset, boolean inLocationDirection)", "class_method_signature": "BearingPointCalculator.calculateBearingDestinationOnLine(Line line, int offset, boolean inLocationDirection)", "testcase": false, "constructor": false}, {"identifier": "getBearingDestination", "parameters": "(Line lrpLine, int lengthCoveredOnLrpLine, boolean inLocationDirection, int bearingDistance)", "modifiers": "private", "return": "GeoCoordinates", "signature": "GeoCoordinates getBearingDestination(Line lrpLine, int lengthCoveredOnLrpLine, boolean inLocationDirection, int bearingDistance)", "full_signature": "private GeoCoordinates getBearingDestination(Line lrpLine, int lengthCoveredOnLrpLine, boolean inLocationDirection, int bearingDistance)", "class_method_signature": "BearingPointCalculator.getBearingDestination(Line lrpLine, int lengthCoveredOnLrpLine, boolean inLocationDirection, int bearingDistance)", "testcase": false, "constructor": false}, {"identifier": "calculateBearingDestinationInDirection", "parameters": "(Line lrpLine, int bearingDistance, int projectionAlongLine)", "modifiers": "public", "return": "GeoCoordinates", "signature": "GeoCoordinates calculateBearingDestinationInDirection(Line lrpLine, int bearingDistance, int projectionAlongLine)", "full_signature": "public GeoCoordinates calculateBearingDestinationInDirection(Line lrpLine, int bearingDistance, int projectionAlongLine)", "class_method_signature": "BearingPointCalculator.calculateBearingDestinationInDirection(Line lrpLine, int bearingDistance, int projectionAlongLine)", "testcase": false, "constructor": false}, {"identifier": "calculateBearingDestinationAgainstDirection", "parameters": "(Line lrpLine, int bearingDistance, int projectionAlongLine)", "modifiers": "public", "return": "GeoCoordinates", "signature": "GeoCoordinates calculateBearingDestinationAgainstDirection(Line lrpLine, int bearingDistance, int projectionAlongLine)", "full_signature": "public GeoCoordinates calculateBearingDestinationAgainstDirection(Line lrpLine, int bearingDistance, int projectionAlongLine)", "class_method_signature": "BearingPointCalculator.calculateBearingDestinationAgainstDirection(Line lrpLine, int bearingDistance, int projectionAlongLine)", "testcase": false, "constructor": false}], "file": "map/src/main/java/openlr/map/utils/BearingPointCalculator.java"}, "focal_method": {"identifier": "calculateBearingDestinationAgainstDirection", "parameters": "(Line lrpLine, int bearingDistance, int projectionAlongLine)", "modifiers": "public", "return": "GeoCoordinates", "body": "public GeoCoordinates calculateBearingDestinationAgainstDirection(Line lrpLine, int bearingDistance, int projectionAlongLine) {\n        return getBearingDestination(lrpLine, projectionAlongLine, false, bearingDistance);\n    }", "signature": "GeoCoordinates calculateBearingDestinationAgainstDirection(Line lrpLine, int bearingDistance, int projectionAlongLine)", "full_signature": "public GeoCoordinates calculateBearingDestinationAgainstDirection(Line lrpLine, int bearingDistance, int projectionAlongLine)", "class_method_signature": "BearingPointCalculator.calculateBearingDestinationAgainstDirection(Line lrpLine, int bearingDistance, int projectionAlongLine)", "testcase": false, "constructor": false, "invocations": ["getBearingDestination"]}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}