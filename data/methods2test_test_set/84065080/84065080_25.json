{"test_class": {"identifier": "SpringPluginContextTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AnnotationConfigApplicationContext context;", "modifier": "private", "type": "AnnotationConfigApplicationContext", "declarator": "context", "var_name": "context"}, {"original_string": "private PluginContext sut;", "modifier": "private", "type": "PluginContext", "declarator": "sut", "var_name": "sut"}], "file": "plugface-spring/src/test/java/org/plugface/spring/SpringPluginContextTest.java"}, "test_case": {"identifier": "shouldLoadFromBothPCandSC", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldLoadFromBothPCandSC() {\n        final TestPlugin plugin = sut.getPlugin(TestPlugin.class);\n        final TestBean bean = sut.getPlugin(TestBean.class);\n\n        assertNotNull(plugin);\n        assertNotNull(bean);\n    }", "signature": "void shouldLoadFromBothPCandSC()", "full_signature": "@Test public void shouldLoadFromBothPCandSC()", "class_method_signature": "SpringPluginContextTest.shouldLoadFromBothPCandSC()", "testcase": true, "constructor": false, "invocations": ["getPlugin", "getPlugin", "assertNotNull", "assertNotNull"]}, "focal_class": {"identifier": "SpringPluginContext", "superclass": "extends DefaultPluginContext", "interfaces": "implements ApplicationContextAware", "fields": [{"original_string": "private ApplicationContext applicationContext;", "modifier": "private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}], "methods": [{"identifier": "setApplicationContext", "parameters": "(ApplicationContext applicationContext)", "modifiers": "@Override public", "return": "void", "signature": "void setApplicationContext(ApplicationContext applicationContext)", "full_signature": "@Override public void setApplicationContext(ApplicationContext applicationContext)", "class_method_signature": "SpringPluginContext.setApplicationContext(ApplicationContext applicationContext)", "testcase": false, "constructor": false}, {"identifier": "getPlugin", "parameters": "(String pluginName)", "modifiers": "@Override public", "return": "T", "signature": "T getPlugin(String pluginName)", "full_signature": "@Override public T getPlugin(String pluginName)", "class_method_signature": "SpringPluginContext.getPlugin(String pluginName)", "testcase": false, "constructor": false}, {"identifier": "getPlugin", "parameters": "(Class<T> pluginClass)", "modifiers": "@Override public", "return": "T", "signature": "T getPlugin(Class<T> pluginClass)", "full_signature": "@Override public T getPlugin(Class<T> pluginClass)", "class_method_signature": "SpringPluginContext.getPlugin(Class<T> pluginClass)", "testcase": false, "constructor": false}, {"identifier": "hasPlugin", "parameters": "(Class<T> pluginClass)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPlugin(Class<T> pluginClass)", "full_signature": "@Override public boolean hasPlugin(Class<T> pluginClass)", "class_method_signature": "SpringPluginContext.hasPlugin(Class<T> pluginClass)", "testcase": false, "constructor": false}, {"identifier": "hasPlugin", "parameters": "(String pluginName)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasPlugin(String pluginName)", "full_signature": "@Override public boolean hasPlugin(String pluginName)", "class_method_signature": "SpringPluginContext.hasPlugin(String pluginName)", "testcase": false, "constructor": false}], "file": "plugface-spring/src/main/java/org/plugface/spring/SpringPluginContext.java"}, "focal_method": {"identifier": "getPlugin", "parameters": "(String pluginName)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T getPlugin(String pluginName) {\n        final T plugin = super.getPlugin(pluginName);\n        if (plugin == null) {\n            try {\n                return (T) applicationContext.getBean(pluginName);\n            } catch (NoSuchBeanDefinitionException e) {\n                return null;\n            }\n        }\n        return plugin;\n    }", "signature": "T getPlugin(String pluginName)", "full_signature": "@Override public T getPlugin(String pluginName)", "class_method_signature": "SpringPluginContext.getPlugin(String pluginName)", "testcase": false, "constructor": false, "invocations": ["getPlugin", "getBean"]}, "repository": {"repo_id": 84065080, "url": "https://github.com/MatteoJoliveau/PlugFace", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 34, "size": 10277, "license": "licensed"}}