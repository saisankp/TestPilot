{"test_class": {"identifier": "TestDFSOutputStream", "superclass": "", "interfaces": "", "fields": [{"original_string": "static MiniDFSCluster cluster;", "modifier": "static", "type": "MiniDFSCluster", "declarator": "cluster", "var_name": "cluster"}], "file": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/TestDFSOutputStream.java"}, "test_case": {"identifier": "testComputePacketChunkSize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testComputePacketChunkSize()\n      throws Exception {\n    DistributedFileSystem fs = cluster.getFileSystem();\n    FSDataOutputStream os = fs.create(new Path(\"/test\"));\n    DFSOutputStream dos = (DFSOutputStream) Whitebox.getInternalState(os,\n        \"wrappedStream\");\n\n    final int packetSize = 64*1024;\n    final int bytesPerChecksum = 512;\n\n    Method method = dos.getClass().getDeclaredMethod(\"computePacketChunkSize\",\n        int.class, int.class);\n    method.setAccessible(true);\n    method.invoke(dos, packetSize, bytesPerChecksum);\n\n    Field field = dos.getClass().getDeclaredField(\"packetSize\");\n    field.setAccessible(true);\n\n    Assert.assertTrue((Integer) field.get(dos) + 33 < packetSize);\n    // If PKT_MAX_HEADER_LEN is 257, actual packet size come to over 64KB\n    // without a fix on HDFS-7308.\n    Assert.assertTrue((Integer) field.get(dos) + 257 < packetSize);\n  }", "signature": "void testComputePacketChunkSize()", "full_signature": "@Test public void testComputePacketChunkSize()", "class_method_signature": "TestDFSOutputStream.testComputePacketChunkSize()", "testcase": true, "constructor": false, "invocations": ["getFileSystem", "create", "getInternalState", "getDeclaredMethod", "getClass", "setAccessible", "invoke", "getDeclaredField", "getClass", "setAccessible", "assertTrue", "get", "assertTrue", "get"]}, "focal_class": {"identifier": "DFSOutputStream", "superclass": "extends FSOutputSummer", "interfaces": "implements Syncable, CanSetDropBehind", "fields": [{"original_string": "private final long dfsclientSlowLogThresholdMs;", "modifier": "private final", "type": "long", "declarator": "dfsclientSlowLogThresholdMs", "var_name": "dfsclientSlowLogThresholdMs"}, {"original_string": "@VisibleForTesting\n  static final int CREATE_RETRY_COUNT = 10;", "modifier": "@VisibleForTesting\n  static final", "type": "int", "declarator": "CREATE_RETRY_COUNT = 10", "var_name": "CREATE_RETRY_COUNT"}, {"original_string": "@VisibleForTesting\n  static CryptoProtocolVersion[] SUPPORTED_CRYPTO_VERSIONS =\n      CryptoProtocolVersion.supported();", "modifier": "@VisibleForTesting\n  static", "type": "CryptoProtocolVersion[]", "declarator": "SUPPORTED_CRYPTO_VERSIONS =\n      CryptoProtocolVersion.supported()", "var_name": "SUPPORTED_CRYPTO_VERSIONS"}, {"original_string": "private final DFSClient dfsClient;", "modifier": "private final", "type": "DFSClient", "declarator": "dfsClient", "var_name": "dfsClient"}, {"original_string": "private final ByteArrayManager byteArrayManager;", "modifier": "private final", "type": "ByteArrayManager", "declarator": "byteArrayManager", "var_name": "byteArrayManager"}, {"original_string": "private Socket s;", "modifier": "private", "type": "Socket", "declarator": "s", "var_name": "s"}, {"original_string": "private volatile boolean closed = false;", "modifier": "private volatile", "type": "boolean", "declarator": "closed = false", "var_name": "closed"}, {"original_string": "private String src;", "modifier": "private", "type": "String", "declarator": "src", "var_name": "src"}, {"original_string": "private final long fileId;", "modifier": "private final", "type": "long", "declarator": "fileId", "var_name": "fileId"}, {"original_string": "private final long blockSize;", "modifier": "private final", "type": "long", "declarator": "blockSize", "var_name": "blockSize"}, {"original_string": "private final DataChecksum checksum4WriteBlock;", "modifier": "private final", "type": "DataChecksum", "declarator": "checksum4WriteBlock", "var_name": "checksum4WriteBlock"}, {"original_string": "private final int bytesPerChecksum;", "modifier": "private final", "type": "int", "declarator": "bytesPerChecksum", "var_name": "bytesPerChecksum"}, {"original_string": "private final LinkedList<DFSPacket> dataQueue = new LinkedList<DFSPacket>();", "modifier": "private final", "type": "LinkedList<DFSPacket>", "declarator": "dataQueue = new LinkedList<DFSPacket>()", "var_name": "dataQueue"}, {"original_string": "private final LinkedList<DFSPacket> ackQueue = new LinkedList<DFSPacket>();", "modifier": "private final", "type": "LinkedList<DFSPacket>", "declarator": "ackQueue = new LinkedList<DFSPacket>()", "var_name": "ackQueue"}, {"original_string": "private DFSPacket currentPacket = null;", "modifier": "private", "type": "DFSPacket", "declarator": "currentPacket = null", "var_name": "currentPacket"}, {"original_string": "private DataStreamer streamer;", "modifier": "private", "type": "DataStreamer", "declarator": "streamer", "var_name": "streamer"}, {"original_string": "private long currentSeqno = 0;", "modifier": "private", "type": "long", "declarator": "currentSeqno = 0", "var_name": "currentSeqno"}, {"original_string": "private long lastQueuedSeqno = -1;", "modifier": "private", "type": "long", "declarator": "lastQueuedSeqno = -1", "var_name": "lastQueuedSeqno"}, {"original_string": "private long lastAckedSeqno = -1;", "modifier": "private", "type": "long", "declarator": "lastAckedSeqno = -1", "var_name": "lastAckedSeqno"}, {"original_string": "private long bytesCurBlock = 0;", "modifier": "private", "type": "long", "declarator": "bytesCurBlock = 0", "var_name": "bytesCurBlock"}, {"original_string": "private int packetSize = 0;", "modifier": "private", "type": "int", "declarator": "packetSize = 0", "var_name": "packetSize"}, {"original_string": "private int chunksPerPacket = 0;", "modifier": "private", "type": "int", "declarator": "chunksPerPacket = 0", "var_name": "chunksPerPacket"}, {"original_string": "private final AtomicReference<IOException> lastException = new AtomicReference<IOException>();", "modifier": "private final", "type": "AtomicReference<IOException>", "declarator": "lastException = new AtomicReference<IOException>()", "var_name": "lastException"}, {"original_string": "private long artificialSlowdown = 0;", "modifier": "private", "type": "long", "declarator": "artificialSlowdown = 0", "var_name": "artificialSlowdown"}, {"original_string": "private long lastFlushOffset = 0;", "modifier": "private", "type": "long", "declarator": "lastFlushOffset = 0", "var_name": "lastFlushOffset"}, {"original_string": "private final AtomicBoolean persistBlocks = new AtomicBoolean(false);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "persistBlocks = new AtomicBoolean(false)", "var_name": "persistBlocks"}, {"original_string": "private volatile boolean appendChunk = false;", "modifier": "private volatile", "type": "boolean", "declarator": "appendChunk = false", "var_name": "appendChunk"}, {"original_string": "private long initialFileSize = 0;", "modifier": "private", "type": "long", "declarator": "initialFileSize = 0", "var_name": "initialFileSize"}, {"original_string": "private final Progressable progress;", "modifier": "private final", "type": "Progressable", "declarator": "progress", "var_name": "progress"}, {"original_string": "private final short blockReplication;", "modifier": "private final", "type": "short", "declarator": "blockReplication", "var_name": "blockReplication"}, {"original_string": "private boolean shouldSyncBlock = false;", "modifier": "private", "type": "boolean", "declarator": "shouldSyncBlock = false", "var_name": "shouldSyncBlock"}, {"original_string": "private final AtomicReference<CachingStrategy> cachingStrategy;", "modifier": "private final", "type": "AtomicReference<CachingStrategy>", "declarator": "cachingStrategy", "var_name": "cachingStrategy"}, {"original_string": "private boolean failPacket = false;", "modifier": "private", "type": "boolean", "declarator": "failPacket = false", "var_name": "failPacket"}, {"original_string": "private FileEncryptionInfo fileEncryptionInfo;", "modifier": "private", "type": "FileEncryptionInfo", "declarator": "fileEncryptionInfo", "var_name": "fileEncryptionInfo"}, {"original_string": "private static final BlockStoragePolicySuite blockStoragePolicySuite =\n      BlockStoragePolicySuite.createDefaultSuite();", "modifier": "private static final", "type": "BlockStoragePolicySuite", "declarator": "blockStoragePolicySuite =\n      BlockStoragePolicySuite.createDefaultSuite()", "var_name": "blockStoragePolicySuite"}], "methods": [{"identifier": "createPacket", "parameters": "(int packetSize, int chunksPerPkt, long offsetInBlock,\n      long seqno, boolean lastPacketInBlock)", "modifiers": "private", "return": "DFSPacket", "signature": "DFSPacket createPacket(int packetSize, int chunksPerPkt, long offsetInBlock,\n      long seqno, boolean lastPacketInBlock)", "full_signature": "private DFSPacket createPacket(int packetSize, int chunksPerPkt, long offsetInBlock,\n      long seqno, boolean lastPacketInBlock)", "class_method_signature": "DFSOutputStream.createPacket(int packetSize, int chunksPerPkt, long offsetInBlock,\n      long seqno, boolean lastPacketInBlock)", "testcase": false, "constructor": false}, {"identifier": "createHeartbeatPacket", "parameters": "()", "modifiers": "private", "return": "DFSPacket", "signature": "DFSPacket createHeartbeatPacket()", "full_signature": "private DFSPacket createHeartbeatPacket()", "class_method_signature": "DFSOutputStream.createHeartbeatPacket()", "testcase": false, "constructor": false}, {"identifier": "createSocketForPipeline", "parameters": "(final DatanodeInfo first,\n      final int length, final DFSClient client)", "modifiers": "static", "return": "Socket", "signature": "Socket createSocketForPipeline(final DatanodeInfo first,\n      final int length, final DFSClient client)", "full_signature": "static Socket createSocketForPipeline(final DatanodeInfo first,\n      final int length, final DFSClient client)", "class_method_signature": "DFSOutputStream.createSocketForPipeline(final DatanodeInfo first,\n      final int length, final DFSClient client)", "testcase": false, "constructor": false}, {"identifier": "checkClosed", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void checkClosed()", "full_signature": "@Override protected void checkClosed()", "class_method_signature": "DFSOutputStream.checkClosed()", "testcase": false, "constructor": false}, {"identifier": "getPipeline", "parameters": "()", "modifiers": "@VisibleForTesting public synchronized", "return": "DatanodeInfo[]", "signature": "DatanodeInfo[] getPipeline()", "full_signature": "@VisibleForTesting public synchronized DatanodeInfo[] getPipeline()", "class_method_signature": "DFSOutputStream.getPipeline()", "testcase": false, "constructor": false}, {"identifier": "getChecksum4Compute", "parameters": "(DataChecksum checksum,\n      HdfsFileStatus stat)", "modifiers": "private static", "return": "DataChecksum", "signature": "DataChecksum getChecksum4Compute(DataChecksum checksum,\n      HdfsFileStatus stat)", "full_signature": "private static DataChecksum getChecksum4Compute(DataChecksum checksum,\n      HdfsFileStatus stat)", "class_method_signature": "DFSOutputStream.getChecksum4Compute(DataChecksum checksum,\n      HdfsFileStatus stat)", "testcase": false, "constructor": false}, {"identifier": "DFSOutputStream", "parameters": "(DFSClient dfsClient, String src, Progressable progress,\n      HdfsFileStatus stat, DataChecksum checksum)", "modifiers": "private", "return": "", "signature": " DFSOutputStream(DFSClient dfsClient, String src, Progressable progress,\n      HdfsFileStatus stat, DataChecksum checksum)", "full_signature": "private  DFSOutputStream(DFSClient dfsClient, String src, Progressable progress,\n      HdfsFileStatus stat, DataChecksum checksum)", "class_method_signature": "DFSOutputStream.DFSOutputStream(DFSClient dfsClient, String src, Progressable progress,\n      HdfsFileStatus stat, DataChecksum checksum)", "testcase": false, "constructor": true}, {"identifier": "DFSOutputStream", "parameters": "(DFSClient dfsClient, String src, HdfsFileStatus stat,\n      EnumSet<CreateFlag> flag, Progressable progress,\n      DataChecksum checksum, String[] favoredNodes)", "modifiers": "private", "return": "", "signature": " DFSOutputStream(DFSClient dfsClient, String src, HdfsFileStatus stat,\n      EnumSet<CreateFlag> flag, Progressable progress,\n      DataChecksum checksum, String[] favoredNodes)", "full_signature": "private  DFSOutputStream(DFSClient dfsClient, String src, HdfsFileStatus stat,\n      EnumSet<CreateFlag> flag, Progressable progress,\n      DataChecksum checksum, String[] favoredNodes)", "class_method_signature": "DFSOutputStream.DFSOutputStream(DFSClient dfsClient, String src, HdfsFileStatus stat,\n      EnumSet<CreateFlag> flag, Progressable progress,\n      DataChecksum checksum, String[] favoredNodes)", "testcase": false, "constructor": true}, {"identifier": "newStreamForCreate", "parameters": "(DFSClient dfsClient, String src,\n      FsPermission masked, EnumSet<CreateFlag> flag, boolean createParent,\n      short replication, long blockSize, Progressable progress, int buffersize,\n      DataChecksum checksum, String[] favoredNodes)", "modifiers": "static", "return": "DFSOutputStream", "signature": "DFSOutputStream newStreamForCreate(DFSClient dfsClient, String src,\n      FsPermission masked, EnumSet<CreateFlag> flag, boolean createParent,\n      short replication, long blockSize, Progressable progress, int buffersize,\n      DataChecksum checksum, String[] favoredNodes)", "full_signature": "static DFSOutputStream newStreamForCreate(DFSClient dfsClient, String src,\n      FsPermission masked, EnumSet<CreateFlag> flag, boolean createParent,\n      short replication, long blockSize, Progressable progress, int buffersize,\n      DataChecksum checksum, String[] favoredNodes)", "class_method_signature": "DFSOutputStream.newStreamForCreate(DFSClient dfsClient, String src,\n      FsPermission masked, EnumSet<CreateFlag> flag, boolean createParent,\n      short replication, long blockSize, Progressable progress, int buffersize,\n      DataChecksum checksum, String[] favoredNodes)", "testcase": false, "constructor": false}, {"identifier": "DFSOutputStream", "parameters": "(DFSClient dfsClient, String src,\n      EnumSet<CreateFlag> flags, Progressable progress, LocatedBlock lastBlock,\n      HdfsFileStatus stat, DataChecksum checksum)", "modifiers": "private", "return": "", "signature": " DFSOutputStream(DFSClient dfsClient, String src,\n      EnumSet<CreateFlag> flags, Progressable progress, LocatedBlock lastBlock,\n      HdfsFileStatus stat, DataChecksum checksum)", "full_signature": "private  DFSOutputStream(DFSClient dfsClient, String src,\n      EnumSet<CreateFlag> flags, Progressable progress, LocatedBlock lastBlock,\n      HdfsFileStatus stat, DataChecksum checksum)", "class_method_signature": "DFSOutputStream.DFSOutputStream(DFSClient dfsClient, String src,\n      EnumSet<CreateFlag> flags, Progressable progress, LocatedBlock lastBlock,\n      HdfsFileStatus stat, DataChecksum checksum)", "testcase": false, "constructor": true}, {"identifier": "newStreamForAppend", "parameters": "(DFSClient dfsClient, String src,\n      EnumSet<CreateFlag> flags, int bufferSize, Progressable progress,\n      LocatedBlock lastBlock, HdfsFileStatus stat, DataChecksum checksum,\n      String[] favoredNodes)", "modifiers": "static", "return": "DFSOutputStream", "signature": "DFSOutputStream newStreamForAppend(DFSClient dfsClient, String src,\n      EnumSet<CreateFlag> flags, int bufferSize, Progressable progress,\n      LocatedBlock lastBlock, HdfsFileStatus stat, DataChecksum checksum,\n      String[] favoredNodes)", "full_signature": "static DFSOutputStream newStreamForAppend(DFSClient dfsClient, String src,\n      EnumSet<CreateFlag> flags, int bufferSize, Progressable progress,\n      LocatedBlock lastBlock, HdfsFileStatus stat, DataChecksum checksum,\n      String[] favoredNodes)", "class_method_signature": "DFSOutputStream.newStreamForAppend(DFSClient dfsClient, String src,\n      EnumSet<CreateFlag> flags, int bufferSize, Progressable progress,\n      LocatedBlock lastBlock, HdfsFileStatus stat, DataChecksum checksum,\n      String[] favoredNodes)", "testcase": false, "constructor": false}, {"identifier": "isLazyPersist", "parameters": "(HdfsFileStatus stat)", "modifiers": "private static", "return": "boolean", "signature": "boolean isLazyPersist(HdfsFileStatus stat)", "full_signature": "private static boolean isLazyPersist(HdfsFileStatus stat)", "class_method_signature": "DFSOutputStream.isLazyPersist(HdfsFileStatus stat)", "testcase": false, "constructor": false}, {"identifier": "computePacketChunkSize", "parameters": "(int psize, int csize)", "modifiers": "private", "return": "void", "signature": "void computePacketChunkSize(int psize, int csize)", "full_signature": "private void computePacketChunkSize(int psize, int csize)", "class_method_signature": "DFSOutputStream.computePacketChunkSize(int psize, int csize)", "testcase": false, "constructor": false}, {"identifier": "queueCurrentPacket", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void queueCurrentPacket()", "full_signature": "private void queueCurrentPacket()", "class_method_signature": "DFSOutputStream.queueCurrentPacket()", "testcase": false, "constructor": false}, {"identifier": "waitAndQueueCurrentPacket", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void waitAndQueueCurrentPacket()", "full_signature": "private void waitAndQueueCurrentPacket()", "class_method_signature": "DFSOutputStream.waitAndQueueCurrentPacket()", "testcase": false, "constructor": false}, {"identifier": "writeChunk", "parameters": "(byte[] b, int offset, int len,\n      byte[] checksum, int ckoff, int cklen)", "modifiers": "@Override protected synchronized", "return": "void", "signature": "void writeChunk(byte[] b, int offset, int len,\n      byte[] checksum, int ckoff, int cklen)", "full_signature": "@Override protected synchronized void writeChunk(byte[] b, int offset, int len,\n      byte[] checksum, int ckoff, int cklen)", "class_method_signature": "DFSOutputStream.writeChunk(byte[] b, int offset, int len,\n      byte[] checksum, int ckoff, int cklen)", "testcase": false, "constructor": false}, {"identifier": "writeChunkImpl", "parameters": "(byte[] b, int offset, int len,\n          byte[] checksum, int ckoff, int cklen)", "modifiers": "private synchronized", "return": "void", "signature": "void writeChunkImpl(byte[] b, int offset, int len,\n          byte[] checksum, int ckoff, int cklen)", "full_signature": "private synchronized void writeChunkImpl(byte[] b, int offset, int len,\n          byte[] checksum, int ckoff, int cklen)", "class_method_signature": "DFSOutputStream.writeChunkImpl(byte[] b, int offset, int len,\n          byte[] checksum, int ckoff, int cklen)", "testcase": false, "constructor": false}, {"identifier": "sync", "parameters": "()", "modifiers": "@Deprecated public", "return": "void", "signature": "void sync()", "full_signature": "@Deprecated public void sync()", "class_method_signature": "DFSOutputStream.sync()", "testcase": false, "constructor": false}, {"identifier": "hflush", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void hflush()", "full_signature": "@Override public void hflush()", "class_method_signature": "DFSOutputStream.hflush()", "testcase": false, "constructor": false}, {"identifier": "hsync", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void hsync()", "full_signature": "@Override public void hsync()", "class_method_signature": "DFSOutputStream.hsync()", "testcase": false, "constructor": false}, {"identifier": "hsync", "parameters": "(EnumSet<SyncFlag> syncFlags)", "modifiers": "public", "return": "void", "signature": "void hsync(EnumSet<SyncFlag> syncFlags)", "full_signature": "public void hsync(EnumSet<SyncFlag> syncFlags)", "class_method_signature": "DFSOutputStream.hsync(EnumSet<SyncFlag> syncFlags)", "testcase": false, "constructor": false}, {"identifier": "flushOrSync", "parameters": "(boolean isSync, EnumSet<SyncFlag> syncFlags)", "modifiers": "private", "return": "void", "signature": "void flushOrSync(boolean isSync, EnumSet<SyncFlag> syncFlags)", "full_signature": "private void flushOrSync(boolean isSync, EnumSet<SyncFlag> syncFlags)", "class_method_signature": "DFSOutputStream.flushOrSync(boolean isSync, EnumSet<SyncFlag> syncFlags)", "testcase": false, "constructor": false}, {"identifier": "getNumCurrentReplicas", "parameters": "()", "modifiers": "@Deprecated public synchronized", "return": "int", "signature": "int getNumCurrentReplicas()", "full_signature": "@Deprecated public synchronized int getNumCurrentReplicas()", "class_method_signature": "DFSOutputStream.getNumCurrentReplicas()", "testcase": false, "constructor": false}, {"identifier": "getCurrentBlockReplication", "parameters": "()", "modifiers": "public synchronized", "return": "int", "signature": "int getCurrentBlockReplication()", "full_signature": "public synchronized int getCurrentBlockReplication()", "class_method_signature": "DFSOutputStream.getCurrentBlockReplication()", "testcase": false, "constructor": false}, {"identifier": "flushInternal", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void flushInternal()", "full_signature": "private void flushInternal()", "class_method_signature": "DFSOutputStream.flushInternal()", "testcase": false, "constructor": false}, {"identifier": "waitForAckedSeqno", "parameters": "(long seqno)", "modifiers": "private", "return": "void", "signature": "void waitForAckedSeqno(long seqno)", "full_signature": "private void waitForAckedSeqno(long seqno)", "class_method_signature": "DFSOutputStream.waitForAckedSeqno(long seqno)", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void start()", "full_signature": "private synchronized void start()", "class_method_signature": "DFSOutputStream.start()", "testcase": false, "constructor": false}, {"identifier": "abort", "parameters": "()", "modifiers": "", "return": "void", "signature": "void abort()", "full_signature": " void abort()", "class_method_signature": "DFSOutputStream.abort()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isClosed()", "full_signature": " boolean isClosed()", "class_method_signature": "DFSOutputStream.isClosed()", "testcase": false, "constructor": false}, {"identifier": "setClosed", "parameters": "()", "modifiers": "", "return": "void", "signature": "void setClosed()", "full_signature": " void setClosed()", "class_method_signature": "DFSOutputStream.setClosed()", "testcase": false, "constructor": false}, {"identifier": "releaseBuffer", "parameters": "(List<DFSPacket> packets, ByteArrayManager bam)", "modifiers": "private static", "return": "void", "signature": "void releaseBuffer(List<DFSPacket> packets, ByteArrayManager bam)", "full_signature": "private static void releaseBuffer(List<DFSPacket> packets, ByteArrayManager bam)", "class_method_signature": "DFSOutputStream.releaseBuffer(List<DFSPacket> packets, ByteArrayManager bam)", "testcase": false, "constructor": false}, {"identifier": "closeThreads", "parameters": "(boolean force)", "modifiers": "private", "return": "void", "signature": "void closeThreads(boolean force)", "full_signature": "private void closeThreads(boolean force)", "class_method_signature": "DFSOutputStream.closeThreads(boolean force)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "DFSOutputStream.close()", "testcase": false, "constructor": false}, {"identifier": "closeImpl", "parameters": "()", "modifiers": "private synchronized", "return": "void", "signature": "void closeImpl()", "full_signature": "private synchronized void closeImpl()", "class_method_signature": "DFSOutputStream.closeImpl()", "testcase": false, "constructor": false}, {"identifier": "completeFile", "parameters": "(ExtendedBlock last)", "modifiers": "private", "return": "void", "signature": "void completeFile(ExtendedBlock last)", "full_signature": "private void completeFile(ExtendedBlock last)", "class_method_signature": "DFSOutputStream.completeFile(ExtendedBlock last)", "testcase": false, "constructor": false}, {"identifier": "setArtificialSlowdown", "parameters": "(long period)", "modifiers": "@VisibleForTesting public", "return": "void", "signature": "void setArtificialSlowdown(long period)", "full_signature": "@VisibleForTesting public void setArtificialSlowdown(long period)", "class_method_signature": "DFSOutputStream.setArtificialSlowdown(long period)", "testcase": false, "constructor": false}, {"identifier": "setChunksPerPacket", "parameters": "(int value)", "modifiers": "@VisibleForTesting public synchronized", "return": "void", "signature": "void setChunksPerPacket(int value)", "full_signature": "@VisibleForTesting public synchronized void setChunksPerPacket(int value)", "class_method_signature": "DFSOutputStream.setChunksPerPacket(int value)", "testcase": false, "constructor": false}, {"identifier": "setTestFilename", "parameters": "(String newname)", "modifiers": "synchronized", "return": "void", "signature": "void setTestFilename(String newname)", "full_signature": "synchronized void setTestFilename(String newname)", "class_method_signature": "DFSOutputStream.setTestFilename(String newname)", "testcase": false, "constructor": false}, {"identifier": "getInitialLen", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getInitialLen()", "full_signature": "public long getInitialLen()", "class_method_signature": "DFSOutputStream.getInitialLen()", "testcase": false, "constructor": false}, {"identifier": "getFileEncryptionInfo", "parameters": "()", "modifiers": "public", "return": "FileEncryptionInfo", "signature": "FileEncryptionInfo getFileEncryptionInfo()", "full_signature": "public FileEncryptionInfo getFileEncryptionInfo()", "class_method_signature": "DFSOutputStream.getFileEncryptionInfo()", "testcase": false, "constructor": false}, {"identifier": "getBlockToken", "parameters": "()", "modifiers": "synchronized", "return": "Token<BlockTokenIdentifier>", "signature": "Token<BlockTokenIdentifier> getBlockToken()", "full_signature": "synchronized Token<BlockTokenIdentifier> getBlockToken()", "class_method_signature": "DFSOutputStream.getBlockToken()", "testcase": false, "constructor": false}, {"identifier": "setDropBehind", "parameters": "(Boolean dropBehind)", "modifiers": "@Override public", "return": "void", "signature": "void setDropBehind(Boolean dropBehind)", "full_signature": "@Override public void setDropBehind(Boolean dropBehind)", "class_method_signature": "DFSOutputStream.setDropBehind(Boolean dropBehind)", "testcase": false, "constructor": false}, {"identifier": "getBlock", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "ExtendedBlock", "signature": "ExtendedBlock getBlock()", "full_signature": "@VisibleForTesting ExtendedBlock getBlock()", "class_method_signature": "DFSOutputStream.getBlock()", "testcase": false, "constructor": false}, {"identifier": "getFileId", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "long", "signature": "long getFileId()", "full_signature": "@VisibleForTesting public long getFileId()", "class_method_signature": "DFSOutputStream.getFileId()", "testcase": false, "constructor": false}, {"identifier": "arraycopy", "parameters": "(T[] srcs, T[] dsts, int skipIndex)", "modifiers": "private static", "return": "void", "signature": "void arraycopy(T[] srcs, T[] dsts, int skipIndex)", "full_signature": "private static void arraycopy(T[] srcs, T[] dsts, int skipIndex)", "class_method_signature": "DFSOutputStream.arraycopy(T[] srcs, T[] dsts, int skipIndex)", "testcase": false, "constructor": false}], "file": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java"}, "focal_method": {"identifier": "computePacketChunkSize", "parameters": "(int psize, int csize)", "modifiers": "private", "return": "void", "body": "private void computePacketChunkSize(int psize, int csize) {\n    final int bodySize = psize - PacketHeader.PKT_MAX_HEADER_LEN;\n    final int chunkSize = csize + getChecksumSize();\n    chunksPerPacket = Math.max(bodySize/chunkSize, 1);\n    packetSize = chunkSize*chunksPerPacket;\n    if (DFSClient.LOG.isDebugEnabled()) {\n      DFSClient.LOG.debug(\"computePacketChunkSize: src=\" + src +\n                \", chunkSize=\" + chunkSize +\n                \", chunksPerPacket=\" + chunksPerPacket +\n                \", packetSize=\" + packetSize);\n    }\n  }", "signature": "void computePacketChunkSize(int psize, int csize)", "full_signature": "private void computePacketChunkSize(int psize, int csize)", "class_method_signature": "DFSOutputStream.computePacketChunkSize(int psize, int csize)", "testcase": false, "constructor": false, "invocations": ["getChecksumSize", "max", "isDebugEnabled", "debug"]}, "repository": {"repo_id": 195808004, "url": "https://github.com/mouzwang/hadoop-2.7.2", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 24927, "license": "licensed"}}