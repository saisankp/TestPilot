{"test_class": {"identifier": "MultivaluedMapEntityProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ParameterizedType multiValuedMapGenericType = newParameterizedType(MultivaluedMap.class, String.class, String.class);", "modifier": "private final", "type": "ParameterizedType", "declarator": "multiValuedMapGenericType = newParameterizedType(MultivaluedMap.class, String.class, String.class)", "var_name": "multiValuedMapGenericType"}, {"original_string": "private byte[] testContent;", "modifier": "private", "type": "byte[]", "declarator": "testContent", "var_name": "testContent"}, {"original_string": "private ApplicationContext           context;", "modifier": "private", "type": "ApplicationContext", "declarator": "context", "var_name": "context"}, {"original_string": "private HttpServletRequest           servletRequest;", "modifier": "private", "type": "HttpServletRequest", "declarator": "servletRequest", "var_name": "servletRequest"}, {"original_string": "private MultivaluedMapEntityProvider multivaluedMapEntityProvider;", "modifier": "private", "type": "MultivaluedMapEntityProvider", "declarator": "multivaluedMapEntityProvider", "var_name": "multivaluedMapEntityProvider"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/provider/MultivaluedMapEntityProviderTest.java"}, "test_case": {"identifier": "writesMultivaluedMapToOutputStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void writesMultivaluedMapToOutputStream() throws Exception {\n        MultivaluedMap<String, String> multivaluedMap = new MultivaluedHashMap<>();\n        multivaluedMap.put(\"bar\", newArrayList(\"hello world\"));\n        multivaluedMap.put(\"foo\", newArrayList(\"to be or not to be\"));\n\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        multivaluedMapEntityProvider.writeTo(multivaluedMap, MultivaluedMap.class, multiValuedMapGenericType, null,\n                                             APPLICATION_FORM_URLENCODED_TYPE, new MultivaluedHashMap<>(), out);\n\n        assertEquals(\"bar=hello+world&foo=to+be+or+not+to+be\", out.toString());\n    }", "signature": "void writesMultivaluedMapToOutputStream()", "full_signature": "@Test public void writesMultivaluedMapToOutputStream()", "class_method_signature": "MultivaluedMapEntityProviderTest.writesMultivaluedMapToOutputStream()", "testcase": true, "constructor": false, "invocations": ["put", "newArrayList", "put", "newArrayList", "writeTo", "assertEquals", "toString"]}, "focal_class": {"identifier": "MultivaluedMapEntityProvider", "superclass": "", "interfaces": "implements EntityProvider<MultivaluedMap<String, String>>", "fields": [{"original_string": "private HttpServletRequest httpRequest;", "modifier": "private", "type": "HttpServletRequest", "declarator": "httpRequest", "var_name": "httpRequest"}], "methods": [{"identifier": "MultivaluedMapEntityProvider", "parameters": "(@Context HttpServletRequest httpRequest)", "modifiers": "public", "return": "", "signature": " MultivaluedMapEntityProvider(@Context HttpServletRequest httpRequest)", "full_signature": "public  MultivaluedMapEntityProvider(@Context HttpServletRequest httpRequest)", "class_method_signature": "MultivaluedMapEntityProvider.MultivaluedMapEntityProvider(@Context HttpServletRequest httpRequest)", "testcase": false, "constructor": true}, {"identifier": "isReadable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "MultivaluedMapEntityProvider.isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "readFrom", "parameters": "(Class<MultivaluedMap<String, String>> type,\n                                                   Type genericType,\n                                                   Annotation[] annotations,\n                                                   MediaType mediaType,\n                                                   MultivaluedMap<String, String> httpHeaders,\n                                                   InputStream entityStream)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "MultivaluedMap<String, String>", "signature": "MultivaluedMap<String, String> readFrom(Class<MultivaluedMap<String, String>> type,\n                                                   Type genericType,\n                                                   Annotation[] annotations,\n                                                   MediaType mediaType,\n                                                   MultivaluedMap<String, String> httpHeaders,\n                                                   InputStream entityStream)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public MultivaluedMap<String, String> readFrom(Class<MultivaluedMap<String, String>> type,\n                                                   Type genericType,\n                                                   Annotation[] annotations,\n                                                   MediaType mediaType,\n                                                   MultivaluedMap<String, String> httpHeaders,\n                                                   InputStream entityStream)", "class_method_signature": "MultivaluedMapEntityProvider.readFrom(Class<MultivaluedMap<String, String>> type,\n                                                   Type genericType,\n                                                   Annotation[] annotations,\n                                                   MediaType mediaType,\n                                                   MultivaluedMap<String, String> httpHeaders,\n                                                   InputStream entityStream)", "testcase": false, "constructor": false}, {"identifier": "parseKeyValuePair", "parameters": "(String pair, MultivaluedMap<String, String> encodedForm, MultivaluedMap<String, String> decodedForm)", "modifiers": "private", "return": "void", "signature": "void parseKeyValuePair(String pair, MultivaluedMap<String, String> encodedForm, MultivaluedMap<String, String> decodedForm)", "full_signature": "private void parseKeyValuePair(String pair, MultivaluedMap<String, String> encodedForm, MultivaluedMap<String, String> decodedForm)", "class_method_signature": "MultivaluedMapEntityProvider.parseKeyValuePair(String pair, MultivaluedMap<String, String> encodedForm, MultivaluedMap<String, String> decodedForm)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "(MultivaluedMap<String, String> multivaluedMap, Class<?> type, Type genericType, Annotation[] annotations,\n                        MediaType mediaType)", "modifiers": "@Override public", "return": "long", "signature": "long getSize(MultivaluedMap<String, String> multivaluedMap, Class<?> type, Type genericType, Annotation[] annotations,\n                        MediaType mediaType)", "full_signature": "@Override public long getSize(MultivaluedMap<String, String> multivaluedMap, Class<?> type, Type genericType, Annotation[] annotations,\n                        MediaType mediaType)", "class_method_signature": "MultivaluedMapEntityProvider.getSize(MultivaluedMap<String, String> multivaluedMap, Class<?> type, Type genericType, Annotation[] annotations,\n                        MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "isWriteable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "MultivaluedMapEntityProvider.isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(MultivaluedMap<String, String> multivaluedMap,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "modifiers": "@Override public", "return": "void", "signature": "void writeTo(MultivaluedMap<String, String> multivaluedMap,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "full_signature": "@Override public void writeTo(MultivaluedMap<String, String> multivaluedMap,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "class_method_signature": "MultivaluedMapEntityProvider.writeTo(MultivaluedMap<String, String> multivaluedMap,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/provider/MultivaluedMapEntityProvider.java"}, "focal_method": {"identifier": "writeTo", "parameters": "(MultivaluedMap<String, String> multivaluedMap,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void writeTo(MultivaluedMap<String, String> multivaluedMap,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream) throws IOException {\n        int i = 0;\n        for (Map.Entry<String, List<String>> e : multivaluedMap.entrySet()) {\n            for (String value : e.getValue()) {\n                if (i > 0) {\n                    entityStream.write('&');\n                }\n                String name = URLEncoder.encode(e.getKey(), \"UTF-8\");\n                entityStream.write(name.getBytes());\n                i++;\n                if (value != null) {\n                    entityStream.write('=');\n                    value = URLEncoder.encode(value, \"UTF-8\");\n                    entityStream.write(value.getBytes());\n                }\n            }\n        }\n    }", "signature": "void writeTo(MultivaluedMap<String, String> multivaluedMap,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "full_signature": "@Override public void writeTo(MultivaluedMap<String, String> multivaluedMap,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "class_method_signature": "MultivaluedMapEntityProvider.writeTo(MultivaluedMap<String, String> multivaluedMap,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "testcase": false, "constructor": false, "invocations": ["entrySet", "getValue", "write", "encode", "getKey", "write", "getBytes", "write", "encode", "write", "getBytes"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}