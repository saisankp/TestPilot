{"test_class": {"identifier": "CompressStringTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CompressString compressString;", "modifier": "private", "type": "CompressString", "declarator": "compressString", "var_name": "compressString"}], "file": "algs/src/test/java/com/github/pedrovgs/problem53/CompressStringTest.java"}, "test_case": {"identifier": "shouldNotAcceptNullStringsAsInputRecursive", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void shouldNotAcceptNullStringsAsInputRecursive() {\n    compressString.compressRecursive(null);\n  }", "signature": "void shouldNotAcceptNullStringsAsInputRecursive()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void shouldNotAcceptNullStringsAsInputRecursive()", "class_method_signature": "CompressStringTest.shouldNotAcceptNullStringsAsInputRecursive()", "testcase": true, "constructor": false, "invocations": ["compressRecursive"]}, "focal_class": {"identifier": "CompressString", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "compress", "parameters": "(String src)", "modifiers": "public", "return": "String", "signature": "String compress(String src)", "full_signature": "public String compress(String src)", "class_method_signature": "CompressString.compress(String src)", "testcase": false, "constructor": false}, {"identifier": "isCharRepeated", "parameters": "(char previousChar, char currentChar)", "modifiers": "private", "return": "boolean", "signature": "boolean isCharRepeated(char previousChar, char currentChar)", "full_signature": "private boolean isCharRepeated(char previousChar, char currentChar)", "class_method_signature": "CompressString.isCharRepeated(char previousChar, char currentChar)", "testcase": false, "constructor": false}, {"identifier": "appendLastCharIfNeeded", "parameters": "(StringBuilder stringBuilder, int repeatedCharCounter,\n      char previousChar)", "modifiers": "private", "return": "void", "signature": "void appendLastCharIfNeeded(StringBuilder stringBuilder, int repeatedCharCounter,\n      char previousChar)", "full_signature": "private void appendLastCharIfNeeded(StringBuilder stringBuilder, int repeatedCharCounter,\n      char previousChar)", "class_method_signature": "CompressString.appendLastCharIfNeeded(StringBuilder stringBuilder, int repeatedCharCounter,\n      char previousChar)", "testcase": false, "constructor": false}, {"identifier": "compressRecursive", "parameters": "(String src)", "modifiers": "public", "return": "String", "signature": "String compressRecursive(String src)", "full_signature": "public String compressRecursive(String src)", "class_method_signature": "CompressString.compressRecursive(String src)", "testcase": false, "constructor": false}, {"identifier": "compressRecursiveInner", "parameters": "(String src, StringBuilder sb, int i, char previousChar,\n      int charCounter)", "modifiers": "private", "return": "String", "signature": "String compressRecursiveInner(String src, StringBuilder sb, int i, char previousChar,\n      int charCounter)", "full_signature": "private String compressRecursiveInner(String src, StringBuilder sb, int i, char previousChar,\n      int charCounter)", "class_method_signature": "CompressString.compressRecursiveInner(String src, StringBuilder sb, int i, char previousChar,\n      int charCounter)", "testcase": false, "constructor": false}, {"identifier": "addCharCounterIfNeeded", "parameters": "(StringBuilder sb, int charCounter)", "modifiers": "private", "return": "void", "signature": "void addCharCounterIfNeeded(StringBuilder sb, int charCounter)", "full_signature": "private void addCharCounterIfNeeded(StringBuilder sb, int charCounter)", "class_method_signature": "CompressString.addCharCounterIfNeeded(StringBuilder sb, int charCounter)", "testcase": false, "constructor": false}, {"identifier": "addChar", "parameters": "(StringBuilder sb, char previousChar)", "modifiers": "private", "return": "void", "signature": "void addChar(StringBuilder sb, char previousChar)", "full_signature": "private void addChar(StringBuilder sb, char previousChar)", "class_method_signature": "CompressString.addChar(StringBuilder sb, char previousChar)", "testcase": false, "constructor": false}, {"identifier": "validateInput", "parameters": "(String src)", "modifiers": "private", "return": "void", "signature": "void validateInput(String src)", "full_signature": "private void validateInput(String src)", "class_method_signature": "CompressString.validateInput(String src)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem53/CompressString.java"}, "focal_method": {"identifier": "compressRecursive", "parameters": "(String src)", "modifiers": "public", "return": "String", "body": "public String compressRecursive(String src) {\n    validateInput(src);\n\n    if (src.length() <= 1) {\n      return src;\n    }\n\n    return compressRecursiveInner(src, new StringBuilder(), 1, src.charAt(0), 1);\n  }", "signature": "String compressRecursive(String src)", "full_signature": "public String compressRecursive(String src)", "class_method_signature": "CompressString.compressRecursive(String src)", "testcase": false, "constructor": false, "invocations": ["validateInput", "length", "compressRecursiveInner", "charAt"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}