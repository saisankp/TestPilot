{"test_class": {"identifier": "SolverConfigurationTest", "superclass": "", "interfaces": "", "fields": [], "file": "Engine/src/test/java/ch/hsr/servicecutter/solver/SolverConfigurationTest.java"}, "test_case": {"identifier": "testEmptyConfig", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testEmptyConfig() {\n\t\tSolverConfiguration config = new SolverConfiguration();\n\t\tassertEquals(new Double(1.0d), config.getPriorityForCouplingCriterion(\"sameEntity\"));\n\t}", "signature": "void testEmptyConfig()", "full_signature": "@Test public void testEmptyConfig()", "class_method_signature": "SolverConfigurationTest.testEmptyConfig()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getPriorityForCouplingCriterion"]}, "focal_class": {"identifier": "SolverConfiguration", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<String, Double> algorithmParams = new HashMap<>();", "modifier": "private", "type": "Map<String, Double>", "declarator": "algorithmParams = new HashMap<>()", "var_name": "algorithmParams"}, {"original_string": "private Map<String, Double> priorities = new HashMap<>();", "modifier": "private", "type": "Map<String, Double>", "declarator": "priorities = new HashMap<>()", "var_name": "priorities"}, {"original_string": "private String algorithm = SolverEndpoint.MODE_GIRVAN_NEWMAN;", "modifier": "private", "type": "String", "declarator": "algorithm = SolverEndpoint.MODE_GIRVAN_NEWMAN", "var_name": "algorithm"}, {"original_string": "private Logger log = LoggerFactory.getLogger(SolverConfiguration.class);", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(SolverConfiguration.class)", "var_name": "log"}], "methods": [{"identifier": "SolverConfiguration", "parameters": "()", "modifiers": "public", "return": "", "signature": " SolverConfiguration()", "full_signature": "public  SolverConfiguration()", "class_method_signature": "SolverConfiguration.SolverConfiguration()", "testcase": false, "constructor": true}, {"identifier": "setAlgorithmParams", "parameters": "(final Map<String, Double> mclParams)", "modifiers": "public", "return": "void", "signature": "void setAlgorithmParams(final Map<String, Double> mclParams)", "full_signature": "public void setAlgorithmParams(final Map<String, Double> mclParams)", "class_method_signature": "SolverConfiguration.setAlgorithmParams(final Map<String, Double> mclParams)", "testcase": false, "constructor": false}, {"identifier": "getPriorities", "parameters": "()", "modifiers": "public", "return": "Map<String, Double>", "signature": "Map<String, Double> getPriorities()", "full_signature": "public Map<String, Double> getPriorities()", "class_method_signature": "SolverConfiguration.getPriorities()", "testcase": false, "constructor": false}, {"identifier": "setPriorities", "parameters": "(final Map<String, Double> priorities)", "modifiers": "public", "return": "void", "signature": "void setPriorities(final Map<String, Double> priorities)", "full_signature": "public void setPriorities(final Map<String, Double> priorities)", "class_method_signature": "SolverConfiguration.setPriorities(final Map<String, Double> priorities)", "testcase": false, "constructor": false}, {"identifier": "getAlgorithmParams", "parameters": "()", "modifiers": "public", "return": "Map<String, Double>", "signature": "Map<String, Double> getAlgorithmParams()", "full_signature": "public Map<String, Double> getAlgorithmParams()", "class_method_signature": "SolverConfiguration.getAlgorithmParams()", "testcase": false, "constructor": false}, {"identifier": "getPriorityForCouplingCriterion", "parameters": "(final String criterionType)", "modifiers": "public", "return": "Double", "signature": "Double getPriorityForCouplingCriterion(final String criterionType)", "full_signature": "public Double getPriorityForCouplingCriterion(final String criterionType)", "class_method_signature": "SolverConfiguration.getPriorityForCouplingCriterion(final String criterionType)", "testcase": false, "constructor": false}, {"identifier": "getValueForAlgorithmParam", "parameters": "(final String key)", "modifiers": "public", "return": "Double", "signature": "Double getValueForAlgorithmParam(final String key)", "full_signature": "public Double getValueForAlgorithmParam(final String key)", "class_method_signature": "SolverConfiguration.getValueForAlgorithmParam(final String key)", "testcase": false, "constructor": false}, {"identifier": "setAlgorithm", "parameters": "(final String algorithm)", "modifiers": "public", "return": "void", "signature": "void setAlgorithm(final String algorithm)", "full_signature": "public void setAlgorithm(final String algorithm)", "class_method_signature": "SolverConfiguration.setAlgorithm(final String algorithm)", "testcase": false, "constructor": false}, {"identifier": "getAlgorithm", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAlgorithm()", "full_signature": "public String getAlgorithm()", "class_method_signature": "SolverConfiguration.getAlgorithm()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SolverConfiguration.toString()", "testcase": false, "constructor": false}], "file": "Engine/src/main/java/ch/hsr/servicecutter/solver/SolverConfiguration.java"}, "focal_method": {"identifier": "getPriorityForCouplingCriterion", "parameters": "(final String criterionType)", "modifiers": "public", "return": "Double", "body": "public Double getPriorityForCouplingCriterion(final String criterionType) {\n\t\tif (!priorities.containsKey(criterionType)) {\n\t\t\tlog.error(\"no priority defined for couplingCriterion: \" + criterionType + \". Use 1\");\n\t\t\treturn 1d;\n\t\t}\n\t\treturn priorities.get(criterionType);\n\t}", "signature": "Double getPriorityForCouplingCriterion(final String criterionType)", "full_signature": "public Double getPriorityForCouplingCriterion(final String criterionType)", "class_method_signature": "SolverConfiguration.getPriorityForCouplingCriterion(final String criterionType)", "testcase": false, "constructor": false, "invocations": ["containsKey", "error", "get"]}, "repository": {"repo_id": 42585709, "url": "https://github.com/ServiceCutter/ServiceCutter", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 29, "size": 8580, "license": "licensed"}}