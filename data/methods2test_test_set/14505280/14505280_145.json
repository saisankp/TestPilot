{"test_class": {"identifier": "MergePolygonCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DOUBLE_TOLERANCE = .0000000001;", "modifier": "private static final", "type": "double", "declarator": "DOUBLE_TOLERANCE = .0000000001", "var_name": "DOUBLE_TOLERANCE"}, {"original_string": "@Autowired\n\tprivate CommandDispatcher dispatcher;", "modifier": "@Autowired\n\tprivate", "type": "CommandDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}, {"original_string": "@Autowired\n\tprivate GeoService geoService;", "modifier": "@Autowired\n\tprivate", "type": "GeoService", "declarator": "geoService", "var_name": "geoService"}, {"original_string": "@Autowired\n\tprivate DtoConverterService dtoConverter;", "modifier": "@Autowired\n\tprivate", "type": "DtoConverterService", "declarator": "dtoConverter", "var_name": "dtoConverter"}], "file": "command/src/test/java/org/geomajas/command/geometry/MergePolygonCommandTest.java"}, "test_case": {"identifier": "testMergePolygon", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testMergePolygon() throws Exception {\n\t\tMergePolygonRequest request = new MergePolygonRequest();\n\t\tGeometryFactory factory = new GeometryFactory();\n\t\trequest.setPolygons(new Geometry[] {\n\t\t\t\tdtoConverter.toDto(geoService.createCircle(factory.createPoint(new Coordinate(0, 0)), 10, 10)),\n\t\t\t\tdtoConverter.toDto(geoService.createCircle(factory.createPoint(new Coordinate(5, 5)), 10, 10))});\n\t\tMergePolygonResponse response = (MergePolygonResponse) dispatcher.execute(\n\t\t\t\tMergePolygonRequest.COMMAND, request, null, \"en\");\n\t\tif (response.isError()) {\n\t\t\tresponse.getErrors().get(0).printStackTrace();\n\t\t}\n\t\tAssert.assertFalse(response.isError());\n\t\tAssert.assertNotNull(response.getGeometry());\n\t\t// @todo should verify that merge is correct\n\t}", "signature": "void testMergePolygon()", "full_signature": "@Test public void testMergePolygon()", "class_method_signature": "MergePolygonCommandTest.testMergePolygon()", "testcase": true, "constructor": false, "invocations": ["setPolygons", "toDto", "createCircle", "createPoint", "toDto", "createCircle", "createPoint", "execute", "isError", "printStackTrace", "get", "getErrors", "assertFalse", "isError", "assertNotNull", "getGeometry"]}, "focal_class": {"identifier": "MergePolygonCommand", "superclass": "", "interfaces": "implements CommandHasRequest<MergePolygonRequest, MergePolygonResponse>", "fields": [{"original_string": "@Autowired\n\tprivate DtoConverterService converter;", "modifier": "@Autowired\n\tprivate", "type": "DtoConverterService", "declarator": "converter", "var_name": "converter"}], "methods": [{"identifier": "getEmptyCommandRequest", "parameters": "()", "modifiers": "@Override public", "return": "MergePolygonRequest", "signature": "MergePolygonRequest getEmptyCommandRequest()", "full_signature": "@Override public MergePolygonRequest getEmptyCommandRequest()", "class_method_signature": "MergePolygonCommand.getEmptyCommandRequest()", "testcase": false, "constructor": false}, {"identifier": "getEmptyCommandResponse", "parameters": "()", "modifiers": "@Override public", "return": "MergePolygonResponse", "signature": "MergePolygonResponse getEmptyCommandResponse()", "full_signature": "@Override public MergePolygonResponse getEmptyCommandResponse()", "class_method_signature": "MergePolygonCommand.getEmptyCommandResponse()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(MergePolygonRequest request, MergePolygonResponse response)", "modifiers": "@Override public", "return": "void", "signature": "void execute(MergePolygonRequest request, MergePolygonResponse response)", "full_signature": "@Override public void execute(MergePolygonRequest request, MergePolygonResponse response)", "class_method_signature": "MergePolygonCommand.execute(MergePolygonRequest request, MergePolygonResponse response)", "testcase": false, "constructor": false}], "file": "command/src/main/java/org/geomajas/command/geometry/MergePolygonCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(MergePolygonRequest request, MergePolygonResponse response)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute(MergePolygonRequest request, MergePolygonResponse response) throws Exception {\n\t\tPolygon[] polygons = new Polygon[request.getPolygons().length];\n\t\tfor (int i = 0; i < request.getPolygons().length; i++) {\n\t\t\ttry {\n\t\t\t\tpolygons[i] = (Polygon) converter.toInternal(request.getPolygons()[i]);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new GeomajasException(e, ExceptionCode.MERGE_NO_POLYGON);\n\t\t\t}\n\t\t}\n\t\tint precision = polygons[0].getPrecisionModel().getMaximumSignificantDigits() - 1;\n\t\tPrecisionModel precisionModel = new PrecisionModel(Math.pow(10.0, precision));\n\t\tGeometryFactory factory = new GeometryFactory(precisionModel, polygons[0].getSRID());\n\n\t\tGeometry temp = factory.createGeometry(polygons[0]);\n\t\tfor (int i = 1; i < polygons.length; i++) {\n\t\t\tGeometry polygon = factory.createGeometry(polygons[i]);\n\t\t\ttemp = temp.union(polygon.buffer(Math.pow(10.0, -(precision - 1))));\n\t\t}\n\t\tif (temp instanceof Polygon) {\n\t\t\tMultiPolygon mp = factory.createMultiPolygon(new Polygon[] { (Polygon) temp });\n\t\t\tresponse.setGeometry(converter.toDto(mp));\n\t\t} else if (temp instanceof MultiPolygon && temp.getNumGeometries() != 0\n\t\t\t\t&& (request.isAllowMultiPolygon() || temp.getNumGeometries() == 1)) {\n\t\t\tresponse.setGeometry(converter.toDto(temp));\n\t\t} else {\n\t\t\tthrow new GeomajasException(ExceptionCode.MERGE_NO_POLYGON);\n\t\t}\n\t}", "signature": "void execute(MergePolygonRequest request, MergePolygonResponse response)", "full_signature": "@Override public void execute(MergePolygonRequest request, MergePolygonResponse response)", "class_method_signature": "MergePolygonCommand.execute(MergePolygonRequest request, MergePolygonResponse response)", "testcase": false, "constructor": false, "invocations": ["getPolygons", "getPolygons", "toInternal", "getPolygons", "getMaximumSignificantDigits", "getPrecisionModel", "pow", "getSRID", "createGeometry", "createGeometry", "union", "buffer", "pow", "createMultiPolygon", "setGeometry", "toDto", "getNumGeometries", "isAllowMultiPolygon", "getNumGeometries", "setGeometry", "toDto"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}