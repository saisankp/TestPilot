{"test_class": {"identifier": "SpanningRecordSerializerTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/api/serialization/SpanningRecordSerializerTest.java"}, "test_case": {"identifier": "testHasData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testHasData() {\n\t\tfinal int SEGMENT_SIZE = 16;\n\n\t\tfinal SpanningRecordSerializer<SerializationTestType> serializer = new SpanningRecordSerializer<SerializationTestType>();\n\t\tfinal Buffer buffer = new Buffer(MemorySegmentFactory.allocateUnpooledSegment(SEGMENT_SIZE), mock(BufferRecycler.class));\n\t\tfinal SerializationTestType randomIntRecord = Util.randomRecord(SerializationTestTypeFactory.INT);\n\n\t\tAssert.assertFalse(serializer.hasData());\n\n\t\ttry {\n\t\t\tserializer.addRecord(randomIntRecord);\n\t\t\tAssert.assertTrue(serializer.hasData());\n\n\t\t\tserializer.setNextBuffer(buffer);\n\t\t\tAssert.assertTrue(serializer.hasData());\n\n\t\t\tserializer.clear();\n\t\t\tAssert.assertFalse(serializer.hasData());\n\n\t\t\tserializer.setNextBuffer(buffer);\n\n\t\t\tserializer.addRecord(randomIntRecord);\n\t\t\tAssert.assertTrue(serializer.hasData());\n\n\t\t\tserializer.addRecord(randomIntRecord);\n\t\t\tAssert.assertTrue(serializer.hasData());\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tAssert.fail(e.getMessage());\n\t\t}\n\t}", "signature": "void testHasData()", "full_signature": "@Test public void testHasData()", "class_method_signature": "SpanningRecordSerializerTest.testHasData()", "testcase": true, "constructor": false, "invocations": ["allocateUnpooledSegment", "mock", "randomRecord", "assertFalse", "hasData", "addRecord", "assertTrue", "hasData", "setNextBuffer", "assertTrue", "hasData", "clear", "assertFalse", "hasData", "setNextBuffer", "addRecord", "assertTrue", "hasData", "addRecord", "assertTrue", "hasData", "printStackTrace", "fail", "getMessage"]}, "focal_class": {"identifier": "SpanningRecordSerializer", "superclass": "", "interfaces": "implements RecordSerializer<T>", "fields": [{"original_string": "private static final boolean CHECKED = false;", "modifier": "private static final", "type": "boolean", "declarator": "CHECKED = false", "var_name": "CHECKED"}, {"original_string": "private final DataOutputSerializer serializationBuffer;", "modifier": "private final", "type": "DataOutputSerializer", "declarator": "serializationBuffer", "var_name": "serializationBuffer"}, {"original_string": "private ByteBuffer dataBuffer;", "modifier": "private", "type": "ByteBuffer", "declarator": "dataBuffer", "var_name": "dataBuffer"}, {"original_string": "private final ByteBuffer lengthBuffer;", "modifier": "private final", "type": "ByteBuffer", "declarator": "lengthBuffer", "var_name": "lengthBuffer"}, {"original_string": "private Buffer targetBuffer;", "modifier": "private", "type": "Buffer", "declarator": "targetBuffer", "var_name": "targetBuffer"}, {"original_string": "private int position;", "modifier": "private", "type": "int", "declarator": "position", "var_name": "position"}, {"original_string": "private int limit;", "modifier": "private", "type": "int", "declarator": "limit", "var_name": "limit"}, {"original_string": "private AccumulatorRegistry.Reporter reporter;", "modifier": "private", "type": "AccumulatorRegistry.Reporter", "declarator": "reporter", "var_name": "reporter"}], "methods": [{"identifier": "SpanningRecordSerializer", "parameters": "()", "modifiers": "public", "return": "", "signature": " SpanningRecordSerializer()", "full_signature": "public  SpanningRecordSerializer()", "class_method_signature": "SpanningRecordSerializer.SpanningRecordSerializer()", "testcase": false, "constructor": true}, {"identifier": "addRecord", "parameters": "(T record)", "modifiers": "@Override public", "return": "SerializationResult", "signature": "SerializationResult addRecord(T record)", "full_signature": "@Override public SerializationResult addRecord(T record)", "class_method_signature": "SpanningRecordSerializer.addRecord(T record)", "testcase": false, "constructor": false}, {"identifier": "setNextBuffer", "parameters": "(Buffer buffer)", "modifiers": "@Override public", "return": "SerializationResult", "signature": "SerializationResult setNextBuffer(Buffer buffer)", "full_signature": "@Override public SerializationResult setNextBuffer(Buffer buffer)", "class_method_signature": "SpanningRecordSerializer.setNextBuffer(Buffer buffer)", "testcase": false, "constructor": false}, {"identifier": "copyToTargetBufferFrom", "parameters": "(ByteBuffer source)", "modifiers": "private", "return": "void", "signature": "void copyToTargetBufferFrom(ByteBuffer source)", "full_signature": "private void copyToTargetBufferFrom(ByteBuffer source)", "class_method_signature": "SpanningRecordSerializer.copyToTargetBufferFrom(ByteBuffer source)", "testcase": false, "constructor": false}, {"identifier": "getSerializationResult", "parameters": "()", "modifiers": "private", "return": "SerializationResult", "signature": "SerializationResult getSerializationResult()", "full_signature": "private SerializationResult getSerializationResult()", "class_method_signature": "SpanningRecordSerializer.getSerializationResult()", "testcase": false, "constructor": false}, {"identifier": "getCurrentBuffer", "parameters": "()", "modifiers": "@Override public", "return": "Buffer", "signature": "Buffer getCurrentBuffer()", "full_signature": "@Override public Buffer getCurrentBuffer()", "class_method_signature": "SpanningRecordSerializer.getCurrentBuffer()", "testcase": false, "constructor": false}, {"identifier": "clearCurrentBuffer", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearCurrentBuffer()", "full_signature": "@Override public void clearCurrentBuffer()", "class_method_signature": "SpanningRecordSerializer.clearCurrentBuffer()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clear()", "full_signature": "@Override public void clear()", "class_method_signature": "SpanningRecordSerializer.clear()", "testcase": false, "constructor": false}, {"identifier": "hasData", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasData()", "full_signature": "@Override public boolean hasData()", "class_method_signature": "SpanningRecordSerializer.hasData()", "testcase": false, "constructor": false}, {"identifier": "setReporter", "parameters": "(AccumulatorRegistry.Reporter reporter)", "modifiers": "@Override public", "return": "void", "signature": "void setReporter(AccumulatorRegistry.Reporter reporter)", "full_signature": "@Override public void setReporter(AccumulatorRegistry.Reporter reporter)", "class_method_signature": "SpanningRecordSerializer.setReporter(AccumulatorRegistry.Reporter reporter)", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/api/serialization/SpanningRecordSerializer.java"}, "focal_method": {"identifier": "hasData", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean hasData() {\n\t\t// either data in current target buffer or intermediate buffers\n\t\treturn this.position > 0 || (this.lengthBuffer.hasRemaining() || this.dataBuffer.hasRemaining());\n\t}", "signature": "boolean hasData()", "full_signature": "@Override public boolean hasData()", "class_method_signature": "SpanningRecordSerializer.hasData()", "testcase": false, "constructor": false, "invocations": ["hasRemaining", "hasRemaining"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}