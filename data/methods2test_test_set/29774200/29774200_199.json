{"test_class": {"identifier": "WallHolderServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private WallHolderService wallHolderService;", "modifier": "private", "type": "WallHolderService", "declarator": "wallHolderService", "var_name": "wallHolderService"}], "file": "component/core/src/test/java/fr/norad/visuwall/core/business/service/WallHolderServiceTest.java"}, "test_case": {"identifier": "should_throw_exception_when_searching_inexistant_wall", "parameters": "()", "modifiers": "@Test(expected = NotFoundException.class) public", "return": "void", "body": "@Test(expected = NotFoundException.class)\n    public void should_throw_exception_when_searching_inexistant_wall() throws NotFoundException {\n        wallHolderService.find(\"not.exist\");\n    }", "signature": "void should_throw_exception_when_searching_inexistant_wall()", "full_signature": "@Test(expected = NotFoundException.class) public void should_throw_exception_when_searching_inexistant_wall()", "class_method_signature": "WallHolderServiceTest.should_throw_exception_when_searching_inexistant_wall()", "testcase": true, "constructor": false, "invocations": ["find"]}, "focal_class": {"identifier": "WallHolderService", "superclass": "", "interfaces": "implements WallDAO", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(WallHolderService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(WallHolderService.class)", "var_name": "LOG"}, {"original_string": "@Autowired\n    WallProcess wallProcess;", "modifier": "@Autowired", "type": "WallProcess", "declarator": "wallProcess", "var_name": "wallProcess"}, {"original_string": "@Autowired\n    WallDAO wallDAO;", "modifier": "@Autowired", "type": "WallDAO", "declarator": "wallDAO", "var_name": "wallDAO"}, {"original_string": "@Autowired\n    ProjectService buildProjectService;", "modifier": "@Autowired", "type": "ProjectService", "declarator": "buildProjectService", "var_name": "buildProjectService"}, {"original_string": "static Map<String, Wall> WALLS;", "modifier": "static", "type": "Map<String, Wall>", "declarator": "WALLS", "var_name": "WALLS"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@PostConstruct", "return": "void", "signature": "void init()", "full_signature": "@PostConstruct void init()", "class_method_signature": "WallHolderService.init()", "testcase": false, "constructor": false}, {"identifier": "getWalls", "parameters": "()", "modifiers": "@Override public", "return": "List<Wall>", "signature": "List<Wall> getWalls()", "full_signature": "@Override public List<Wall> getWalls()", "class_method_signature": "WallHolderService.getWalls()", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(String wallName)", "modifiers": "@Override public", "return": "Wall", "signature": "Wall find(String wallName)", "full_signature": "@Override public Wall find(String wallName)", "class_method_signature": "WallHolderService.find(String wallName)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Wall wall)", "modifiers": "@Override public", "return": "Wall", "signature": "Wall update(Wall wall)", "full_signature": "@Override public Wall update(Wall wall)", "class_method_signature": "WallHolderService.update(Wall wall)", "testcase": false, "constructor": false}, {"identifier": "getWallNames", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getWallNames()", "full_signature": "public Set<String> getWallNames()", "class_method_signature": "WallHolderService.getWallNames()", "testcase": false, "constructor": false}, {"identifier": "deleteWall", "parameters": "(String wallName)", "modifiers": "@Override public", "return": "void", "signature": "void deleteWall(String wallName)", "full_signature": "@Override public void deleteWall(String wallName)", "class_method_signature": "WallHolderService.deleteWall(String wallName)", "testcase": false, "constructor": false}], "file": "component/core/src/main/java/fr/norad/visuwall/core/business/service/WallHolderService.java"}, "focal_method": {"identifier": "find", "parameters": "(String wallName)", "modifiers": "@Override public", "return": "Wall", "body": "@Override\n    public Wall find(String wallName) throws NotFoundException {\n        Preconditions.checkNotNull(wallName, \"wallName\");\n        Wall wall = WALLS.get(wallName);\n        if (wall == null) {\n            throw new NotFoundException(\"Wall with name : \" + wallName + \" not found\");\n        }\n        return wall;\n    }", "signature": "Wall find(String wallName)", "full_signature": "@Override public Wall find(String wallName)", "class_method_signature": "WallHolderService.find(String wallName)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "get"]}, "repository": {"repo_id": 29774200, "url": "https://github.com/n0rad/visuwall", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 19747, "license": "licensed"}}