{"test_class": {"identifier": "TrackStoreTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/com/platypii/baseline/tracks/TrackStoreTest.java"}, "test_case": {"identifier": "setUploading", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void setUploading() throws Exception {\n        TrackStore store = new TrackStore();\n\n        File file = Files.createTempFile(\"tmp\", \".csv.gz\").toFile();\n        TrackFile trackFile = new TrackFile(file);\n\n        store.setRecording(trackFile);\n        assertFalse(store.isUploading(trackFile));\n\n        store.setNotUploaded(trackFile);\n        assertFalse(store.isUploading(trackFile));\n\n        store.setUploading(trackFile);\n        assertTrue(store.isUploading(trackFile));\n        assertEquals(0, store.getUploadProgress(trackFile));\n\n        store.setUploadProgress(trackFile, 1000);\n        assertEquals(1000, store.getUploadProgress(trackFile));\n\n        TrackMetadata cloudData = new MockTrackMetadata();\n        store.setUploadSuccess(trackFile, cloudData);\n        assertFalse(store.isUploading(trackFile));\n        assertEquals(cloudData, store.getCloudData(trackFile));\n    }", "signature": "void setUploading()", "full_signature": "@Test public void setUploading()", "class_method_signature": "TrackStoreTest.setUploading()", "testcase": true, "constructor": false, "invocations": ["toFile", "createTempFile", "setRecording", "assertFalse", "isUploading", "setNotUploaded", "assertFalse", "isUploading", "setUploading", "assertTrue", "isUploading", "assertEquals", "getUploadProgress", "setUploadProgress", "assertEquals", "getUploadProgress", "setUploadSuccess", "assertFalse", "isUploading", "assertEquals", "getCloudData"]}, "focal_class": {"identifier": "TrackStore", "superclass": "", "interfaces": "implements BaseService", "fields": [{"original_string": "private static final String TAG = \"TrackStore\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"TrackStore\"", "var_name": "TAG"}, {"original_string": "private final Map<TrackFile, TrackState> trackState = new HashMap<>();", "modifier": "private final", "type": "Map<TrackFile, TrackState>", "declarator": "trackState = new HashMap<>()", "var_name": "trackState"}, {"original_string": "private boolean initialized = false;", "modifier": "private", "type": "boolean", "declarator": "initialized = false", "var_name": "initialized"}], "methods": [{"identifier": "start", "parameters": "(@NonNull Context context)", "modifiers": "@Override public", "return": "void", "signature": "void start(@NonNull Context context)", "full_signature": "@Override public void start(@NonNull Context context)", "class_method_signature": "TrackStore.start(@NonNull Context context)", "testcase": false, "constructor": false}, {"identifier": "getLocalTracks", "parameters": "()", "modifiers": "@NonNull public", "return": "List<TrackFile>", "signature": "List<TrackFile> getLocalTracks()", "full_signature": "@NonNull public List<TrackFile> getLocalTracks()", "class_method_signature": "TrackStore.getLocalTracks()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "TrackStore.stop()", "testcase": false, "constructor": false}, {"identifier": "setRecording", "parameters": "(@NonNull TrackFile trackFile)", "modifiers": "", "return": "void", "signature": "void setRecording(@NonNull TrackFile trackFile)", "full_signature": " void setRecording(@NonNull TrackFile trackFile)", "class_method_signature": "TrackStore.setRecording(@NonNull TrackFile trackFile)", "testcase": false, "constructor": false}, {"identifier": "setNotUploaded", "parameters": "(@NonNull TrackFile trackFile)", "modifiers": "", "return": "void", "signature": "void setNotUploaded(@NonNull TrackFile trackFile)", "full_signature": " void setNotUploaded(@NonNull TrackFile trackFile)", "class_method_signature": "TrackStore.setNotUploaded(@NonNull TrackFile trackFile)", "testcase": false, "constructor": false}, {"identifier": "setUploading", "parameters": "(@NonNull TrackFile trackFile)", "modifiers": "public", "return": "void", "signature": "void setUploading(@NonNull TrackFile trackFile)", "full_signature": "public void setUploading(@NonNull TrackFile trackFile)", "class_method_signature": "TrackStore.setUploading(@NonNull TrackFile trackFile)", "testcase": false, "constructor": false}, {"identifier": "setUploadSuccess", "parameters": "(@NonNull TrackFile trackFile, @NonNull TrackMetadata cloudData)", "modifiers": "", "return": "void", "signature": "void setUploadSuccess(@NonNull TrackFile trackFile, @NonNull TrackMetadata cloudData)", "full_signature": " void setUploadSuccess(@NonNull TrackFile trackFile, @NonNull TrackMetadata cloudData)", "class_method_signature": "TrackStore.setUploadSuccess(@NonNull TrackFile trackFile, @NonNull TrackMetadata cloudData)", "testcase": false, "constructor": false}, {"identifier": "getUploadProgress", "parameters": "(@NonNull TrackFile trackFile)", "modifiers": "public", "return": "int", "signature": "int getUploadProgress(@NonNull TrackFile trackFile)", "full_signature": "public int getUploadProgress(@NonNull TrackFile trackFile)", "class_method_signature": "TrackStore.getUploadProgress(@NonNull TrackFile trackFile)", "testcase": false, "constructor": false}, {"identifier": "setUploadProgress", "parameters": "(@NonNull TrackFile trackFile, int bytesCopied)", "modifiers": "", "return": "void", "signature": "void setUploadProgress(@NonNull TrackFile trackFile, int bytesCopied)", "full_signature": " void setUploadProgress(@NonNull TrackFile trackFile, int bytesCopied)", "class_method_signature": "TrackStore.setUploadProgress(@NonNull TrackFile trackFile, int bytesCopied)", "testcase": false, "constructor": false}, {"identifier": "isUploading", "parameters": "(@NonNull TrackFile trackFile)", "modifiers": "public", "return": "boolean", "signature": "boolean isUploading(@NonNull TrackFile trackFile)", "full_signature": "public boolean isUploading(@NonNull TrackFile trackFile)", "class_method_signature": "TrackStore.isUploading(@NonNull TrackFile trackFile)", "testcase": false, "constructor": false}, {"identifier": "getCloudData", "parameters": "(@NonNull TrackFile trackFile)", "modifiers": "@Nullable public", "return": "TrackMetadata", "signature": "TrackMetadata getCloudData(@NonNull TrackFile trackFile)", "full_signature": "@Nullable public TrackMetadata getCloudData(@NonNull TrackFile trackFile)", "class_method_signature": "TrackStore.getCloudData(@NonNull TrackFile trackFile)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@NonNull TrackFile trackFile)", "modifiers": "public", "return": "boolean", "signature": "boolean delete(@NonNull TrackFile trackFile)", "full_signature": "public boolean delete(@NonNull TrackFile trackFile)", "class_method_signature": "TrackStore.delete(@NonNull TrackFile trackFile)", "testcase": false, "constructor": false}], "file": "app/src/main/java/com/platypii/baseline/tracks/TrackStore.java"}, "focal_method": {"identifier": "setUploading", "parameters": "(@NonNull TrackFile trackFile)", "modifiers": "public", "return": "void", "body": "public void setUploading(@NonNull TrackFile trackFile) {\n        final TrackState state = trackState.get(trackFile);\n        if (state instanceof TrackState.TrackNotUploaded) {\n            trackState.put(trackFile, new TrackState.TrackUploading(trackFile));\n        } else {\n            Log.e(TAG, \"Invalid track state transition: \" + state + \" -> uploading\");\n        }\n    }", "signature": "void setUploading(@NonNull TrackFile trackFile)", "full_signature": "public void setUploading(@NonNull TrackFile trackFile)", "class_method_signature": "TrackStore.setUploading(@NonNull TrackFile trackFile)", "testcase": false, "constructor": false, "invocations": ["get", "put", "e"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}