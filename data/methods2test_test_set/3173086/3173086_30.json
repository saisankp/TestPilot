{"test_class": {"identifier": "ExporterImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Pattern patternCsvIndividual = Pattern.compile(\n            \"^\\\\d{10}_\\\\w+_\\\\w+_\\\\d{12}_\\\\d{10}\\\\.csv$\");", "modifier": "private final", "type": "Pattern", "declarator": "patternCsvIndividual = Pattern.compile(\n            \"^\\\\d{10}_\\\\w+_\\\\w+_\\\\d{12}_\\\\d{10}\\\\.csv$\")", "var_name": "patternCsvIndividual"}, {"original_string": "private final Pattern patternCsvAll = Pattern.compile(\n            \"^\\\\d{10}_\\\\w+_\\\\d{10}_\\\\d{12}_\\\\d{10}\\\\.csv$\");", "modifier": "private final", "type": "Pattern", "declarator": "patternCsvAll = Pattern.compile(\n            \"^\\\\d{10}_\\\\w+_\\\\d{10}_\\\\d{12}_\\\\d{10}\\\\.csv$\")", "var_name": "patternCsvAll"}, {"original_string": "private final Pattern patternHtmlIndividual = Pattern.compile(\n            \"^\\\\d{10}_\\\\w+_\\\\w+_\\\\d{12}\\\\.html$\");", "modifier": "private final", "type": "Pattern", "declarator": "patternHtmlIndividual = Pattern.compile(\n            \"^\\\\d{10}_\\\\w+_\\\\w+_\\\\d{12}\\\\.html$\")", "var_name": "patternHtmlIndividual"}, {"original_string": "private final Pattern patternHtmlAll = Pattern.compile(\n            \"^\\\\d{10}_\\\\w+\\\\d{10}_\\\\d{12}\\\\.html$\");", "modifier": "private final", "type": "Pattern", "declarator": "patternHtmlAll = Pattern.compile(\n            \"^\\\\d{10}_\\\\w+\\\\d{10}_\\\\d{12}\\\\.html$\")", "var_name": "patternHtmlAll"}, {"original_string": "private final Pattern patternTxtIndividual = Pattern.compile(\n            \"^\\\\d{10}_\\\\w+_\\\\w+_\\\\d{12}\\\\.txt$\");", "modifier": "private final", "type": "Pattern", "declarator": "patternTxtIndividual = Pattern.compile(\n            \"^\\\\d{10}_\\\\w+_\\\\w+_\\\\d{12}\\\\.txt$\")", "var_name": "patternTxtIndividual"}, {"original_string": "private final Pattern patternTxtAll = Pattern.compile(\n            \"^\\\\d{10}_\\\\w+\\\\d{10}_\\\\d{12}\\\\.txt$\");", "modifier": "private final", "type": "Pattern", "declarator": "patternTxtAll = Pattern.compile(\n            \"^\\\\d{10}_\\\\w+\\\\d{10}_\\\\d{12}\\\\.txt$\")", "var_name": "patternTxtAll"}, {"original_string": "@SuppressWarnings(\"FieldCanBeLocal\")\n    private final boolean deleteCreatedFiles = true;", "modifier": "@SuppressWarnings(\"FieldCanBeLocal\")\n    private final", "type": "boolean", "declarator": "deleteCreatedFiles = true", "var_name": "deleteCreatedFiles"}, {"original_string": "private Exporter exporter;", "modifier": "private", "type": "Exporter", "declarator": "exporter", "var_name": "exporter"}, {"original_string": "private Trip tripToExport;", "modifier": "private", "type": "Trip", "declarator": "tripToExport", "var_name": "tripToExport"}, {"original_string": "private ResourceResolver resourceResolver;", "modifier": "private", "type": "ResourceResolver", "declarator": "resourceResolver", "var_name": "resourceResolver"}, {"original_string": "private Participant participant;", "modifier": "private", "type": "Participant", "declarator": "participant", "var_name": "participant"}, {"original_string": "private AmountFactory amountFactory;", "modifier": "private", "type": "AmountFactory", "declarator": "amountFactory", "var_name": "amountFactory"}, {"original_string": "private TestDataFactory factory;", "modifier": "private", "type": "TestDataFactory", "declarator": "factory", "var_name": "factory"}], "file": "app/src/test/java/de/koelle/christian/trickytripper/export/impl/ExporterImplTest.java"}, "test_case": {"identifier": "testOutputTransfersAndDebtsOnlyTxtForAll", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOutputTransfersAndDebtsOnlyTxtForAll() {\n        ExportSettings exportSettings = createExportSettings(true, true, false, false, false, false, false, false, true);\n        List<File> result = exporter.exportReport(exportSettings, tripToExport.getParticipant(), tripToExport,\n                resourceResolver,\n                new ActivityResolver() {\n\n                    @Override\n                    public Object getActivity() {\n                        return null;\n                    }\n                },\n                amountFactory);\n\n        Throwable exceptionCaught = null;\n        try {\n            Assert.assertEquals(1, result.size());\n            Assert.assertTrue(patternTxtAll.matcher(result.get(0).getName()).matches());\n            Assert.assertTrue(nameContains(result.get(0), resourceResolver.resolve(R.string.fileExportrFix_Scope_All)));\n        }\n        catch (Exception e) {\n            exceptionCaught = e;\n        }\n        finally {\n            deleteCreatedFiles(result);\n        }\n        if (exceptionCaught != null) {\n            throw new RuntimeException(exceptionCaught);\n        }\n    }", "signature": "void testOutputTransfersAndDebtsOnlyTxtForAll()", "full_signature": "@Test public void testOutputTransfersAndDebtsOnlyTxtForAll()", "class_method_signature": "ExporterImplTest.testOutputTransfersAndDebtsOnlyTxtForAll()", "testcase": true, "constructor": false, "invocations": ["createExportSettings", "exportReport", "getParticipant", "assertEquals", "size", "assertTrue", "matches", "matcher", "getName", "get", "assertTrue", "nameContains", "get", "resolve", "deleteCreatedFiles"]}, "focal_class": {"identifier": "ExporterImpl", "superclass": "", "interfaces": "implements Exporter", "fields": [{"original_string": "private static final String SPACE = \" \";", "modifier": "private static final", "type": "String", "declarator": "SPACE = \" \"", "var_name": "SPACE"}, {"original_string": "private static final String FILE_NAME_SEPARATOR = \"_\";", "modifier": "private static final", "type": "String", "declarator": "FILE_NAME_SEPARATOR = \"_\"", "var_name": "FILE_NAME_SEPARATOR"}, {"original_string": "private final FileWriter fileWriter;", "modifier": "private final", "type": "FileWriter", "declarator": "fileWriter", "var_name": "fileWriter"}], "methods": [{"identifier": "ExporterImpl", "parameters": "(FileWriter fileWriter)", "modifiers": "public", "return": "", "signature": " ExporterImpl(FileWriter fileWriter)", "full_signature": "public  ExporterImpl(FileWriter fileWriter)", "class_method_signature": "ExporterImpl.ExporterImpl(FileWriter fileWriter)", "testcase": false, "constructor": true}, {"identifier": "exportReport", "parameters": "(ExportSettings settings, List<Participant> participants, Trip trip,\n                                   ResourceResolver resourceResolver, ActivityResolver activityResolver, AmountFactory amountFactory)", "modifiers": "public", "return": "List<File>", "signature": "List<File> exportReport(ExportSettings settings, List<Participant> participants, Trip trip,\n                                   ResourceResolver resourceResolver, ActivityResolver activityResolver, AmountFactory amountFactory)", "full_signature": "public List<File> exportReport(ExportSettings settings, List<Participant> participants, Trip trip,\n                                   ResourceResolver resourceResolver, ActivityResolver activityResolver, AmountFactory amountFactory)", "class_method_signature": "ExporterImpl.exportReport(ExportSettings settings, List<Participant> participants, Trip trip,\n                                   ResourceResolver resourceResolver, ActivityResolver activityResolver, AmountFactory amountFactory)", "testcase": false, "constructor": false}, {"identifier": "createAndWriteFiles", "parameters": "(ExportSettings settings, List<Participant> participants, Trip trip,\n                                     ResourceResolver resourceResolver, FileWriter fileWriter, List<File> filesCreated,\n                                     StringBuilder fileNamePrefix, StringBuilder timestamp, HtmlExportCharResolver htmlExportCharResolver,\n                                     CsvExportCharResolver csvExportCharResolver, TxtExportCharResolver txtExportCharResolver,\n                                     AmountFactory amountFactory)", "modifiers": "private", "return": "void", "signature": "void createAndWriteFiles(ExportSettings settings, List<Participant> participants, Trip trip,\n                                     ResourceResolver resourceResolver, FileWriter fileWriter, List<File> filesCreated,\n                                     StringBuilder fileNamePrefix, StringBuilder timestamp, HtmlExportCharResolver htmlExportCharResolver,\n                                     CsvExportCharResolver csvExportCharResolver, TxtExportCharResolver txtExportCharResolver,\n                                     AmountFactory amountFactory)", "full_signature": "private void createAndWriteFiles(ExportSettings settings, List<Participant> participants, Trip trip,\n                                     ResourceResolver resourceResolver, FileWriter fileWriter, List<File> filesCreated,\n                                     StringBuilder fileNamePrefix, StringBuilder timestamp, HtmlExportCharResolver htmlExportCharResolver,\n                                     CsvExportCharResolver csvExportCharResolver, TxtExportCharResolver txtExportCharResolver,\n                                     AmountFactory amountFactory)", "class_method_signature": "ExporterImpl.createAndWriteFiles(ExportSettings settings, List<Participant> participants, Trip trip,\n                                     ResourceResolver resourceResolver, FileWriter fileWriter, List<File> filesCreated,\n                                     StringBuilder fileNamePrefix, StringBuilder timestamp, HtmlExportCharResolver htmlExportCharResolver,\n                                     CsvExportCharResolver csvExportCharResolver, TxtExportCharResolver txtExportCharResolver,\n                                     AmountFactory amountFactory)", "testcase": false, "constructor": false}, {"identifier": "getReportMetaInfo", "parameters": "(List<Participant> participants, Trip trip, ResourceResolver resourceResolver)", "modifiers": "private", "return": "String[]", "signature": "String[] getReportMetaInfo(List<Participant> participants, Trip trip, ResourceResolver resourceResolver)", "full_signature": "private String[] getReportMetaInfo(List<Participant> participants, Trip trip, ResourceResolver resourceResolver)", "class_method_signature": "ExporterImpl.getReportMetaInfo(List<Participant> participants, Trip trip, ResourceResolver resourceResolver)", "testcase": false, "constructor": false}, {"identifier": "buildFileName", "parameters": "(StringBuilder fileNamePrefix, StringBuilder timestamp,\n                                        List<Participant> participants, ResourceResolver resourceResolver)", "modifiers": "private", "return": "StringBuilder", "signature": "StringBuilder buildFileName(StringBuilder fileNamePrefix, StringBuilder timestamp,\n                                        List<Participant> participants, ResourceResolver resourceResolver)", "full_signature": "private StringBuilder buildFileName(StringBuilder fileNamePrefix, StringBuilder timestamp,\n                                        List<Participant> participants, ResourceResolver resourceResolver)", "class_method_signature": "ExporterImpl.buildFileName(StringBuilder fileNamePrefix, StringBuilder timestamp,\n                                        List<Participant> participants, ResourceResolver resourceResolver)", "testcase": false, "constructor": false}], "file": "app/src/main/java/de/koelle/christian/trickytripper/export/impl/ExporterImpl.java"}, "focal_method": {"identifier": "exportReport", "parameters": "(ExportSettings settings, List<Participant> participants, Trip trip,\n                                   ResourceResolver resourceResolver, ActivityResolver activityResolver, AmountFactory amountFactory)", "modifiers": "public", "return": "List<File>", "body": "public List<File> exportReport(ExportSettings settings, List<Participant> participants, Trip trip,\n                                   ResourceResolver resourceResolver, ActivityResolver activityResolver, AmountFactory amountFactory) {\n\n        List<File> filesCreated = new ArrayList<>();\n\n        StringBuilder fileNamePrefix = new StringBuilder(resourceResolver.resolve(R.string.fileExportPrefix))\n                .append(FILE_NAME_SEPARATOR)\n                .append(ExporterFileNameUtils.clean(trip.getName()));\n        StringBuilder timestamp = new StringBuilder(ExporterFileNameUtils.getTimeStamp(resourceResolver.getLocale()));\n\n        HtmlExportCharResolver htmlExportCharResolver = null;\n        CsvExportCharResolver csvExportCharResolver = null;\n        TxtExportCharResolver txtExportCharResolver = null;\n\n        if (settings.isFormatHtml()) {\n            htmlExportCharResolver = new HtmlExportCharResolver();\n            htmlExportCharResolver.setLang(resourceResolver.getLocale().getLanguage());\n        }\n        if (settings.isFormatCsv()) {\n            csvExportCharResolver = new CsvExportCharResolver();\n        }\n        if (settings.isFormatTxt()) {\n            txtExportCharResolver = new TxtExportCharResolver();\n        }\n\n        if (participants.size() > 1 && settings.isSeparateFilesForIndividuals()) {\n            ArrayList<Participant> participantsSubset;\n            for (Participant p : participants) {\n                participantsSubset = new ArrayList<>(1);\n                participantsSubset.add(p);\n                createAndWriteFiles(settings,\n                        participantsSubset,\n                        trip,\n                        resourceResolver,\n                        fileWriter,\n                        filesCreated,\n                        fileNamePrefix,\n                        timestamp,\n                        htmlExportCharResolver,\n                        csvExportCharResolver,\n                        txtExportCharResolver,\n                        amountFactory);\n            }\n        } else {\n            createAndWriteFiles(settings,\n                    participants,\n                    trip,\n                    resourceResolver,\n                    fileWriter,\n                    filesCreated,\n                    fileNamePrefix,\n                    timestamp,\n                    htmlExportCharResolver,\n                    csvExportCharResolver,\n                    txtExportCharResolver,\n                    amountFactory);\n        }\n\n        StreamSender streamSender = new StreamSenderImpl();\n        StringBuilder exportSubject = new StringBuilder()\n                .append(resourceResolver.resolve(R.string.fileExportEmailSubjectPrefix))\n                .append(SPACE)\n                .append(trip.getName())\n                .append(SPACE)\n                .append(timestamp);\n\n        if (activityResolver.getActivity() != null) {\n            List<Uri> contentUrisFromFiles = FileUtils.getContentUrisFromFiles(filesCreated, TrickyTripperFileProvider.AUTHORITY);\n            if (settings.getOutputChannel() != null) {\n                streamSender.sendStream(\n                        (Activity) activityResolver.getActivity(),\n                        exportSubject.toString(),\n                        resourceResolver.resolve(R.string.fileExportEmailContent),\n                        contentUrisFromFiles, settings.getOutputChannel());\n            }\n        }\n\n        return filesCreated;\n\n    }", "signature": "List<File> exportReport(ExportSettings settings, List<Participant> participants, Trip trip,\n                                   ResourceResolver resourceResolver, ActivityResolver activityResolver, AmountFactory amountFactory)", "full_signature": "public List<File> exportReport(ExportSettings settings, List<Participant> participants, Trip trip,\n                                   ResourceResolver resourceResolver, ActivityResolver activityResolver, AmountFactory amountFactory)", "class_method_signature": "ExporterImpl.exportReport(ExportSettings settings, List<Participant> participants, Trip trip,\n                                   ResourceResolver resourceResolver, ActivityResolver activityResolver, AmountFactory amountFactory)", "testcase": false, "constructor": false, "invocations": ["append", "append", "resolve", "clean", "getName", "getTimeStamp", "getLocale", "isFormatHtml", "setLang", "getLanguage", "getLocale", "isFormatCsv", "isFormatTxt", "size", "isSeparateFilesForIndividuals", "add", "createAndWriteFiles", "createAndWriteFiles", "append", "append", "append", "append", "append", "resolve", "getName", "getActivity", "getContentUrisFromFiles", "getOutputChannel", "sendStream", "getActivity", "toString", "resolve", "getOutputChannel"]}, "repository": {"repo_id": 3173086, "url": "https://github.com/koelleChristian/trickytripper", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 41, "size": 30533, "license": "licensed"}}