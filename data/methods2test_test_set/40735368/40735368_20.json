{"test_class": {"identifier": "IndexedFidReaderTest", "superclass": "extends FIDTestCase", "interfaces": "", "fields": [{"original_string": "private IndexedFidReader reader;", "modifier": "private", "type": "IndexedFidReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "private IndexFile indexFile;", "modifier": "private", "type": "IndexFile", "declarator": "indexFile", "var_name": "indexFile"}, {"original_string": "private ShpFiles shpFiles;", "modifier": "private", "type": "ShpFiles", "declarator": "shpFiles", "var_name": "shpFiles"}], "file": "modules/plugin/shapefile/src/test/java/org/geotools/data/shapefile/fid/IndexedFidReaderTest.java"}, "test_case": {"identifier": "testFindFid", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindFid() throws Exception {\n        long offset = reader.findFid(TYPE_NAME + \".4\");\n        assertEquals(3, offset);\n\n        offset = reader.findFid(TYPE_NAME + \".1\");\n        assertEquals(0, offset);\n\n        // test if the fid is too high\n        offset = reader.findFid(TYPE_NAME + \".10000000\");\n        assertEquals(-1, offset);\n\n        // test if the fid is negative\n        offset = reader.findFid(TYPE_NAME + \".-1\");\n        assertEquals(-1, offset);\n\n        // test if the fid does not match the <typeName>.<long> pattern\n        offset = reader.findFid(TYPE_NAME + \".1ABC\");\n        assertEquals(-1, offset);\n\n        offset = reader.findFid(\"prefix\" + TYPE_NAME + \".1\");\n        assertEquals(-1, offset);\n    }", "signature": "void testFindFid()", "full_signature": "@Test public void testFindFid()", "class_method_signature": "IndexedFidReaderTest.testFindFid()", "testcase": true, "constructor": false, "invocations": ["findFid", "assertEquals", "findFid", "assertEquals", "findFid", "assertEquals", "findFid", "assertEquals", "findFid", "assertEquals", "findFid", "assertEquals"]}, "focal_class": {"identifier": "IndexedFidReader", "superclass": "", "interfaces": "implements FIDReader, FileReader", "fields": [{"original_string": "private static final Logger LOGGER = org.geotools.util.logging.Logging\n            .getLogger(\"org.geotools.data.shapefile\");", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = org.geotools.util.logging.Logging\n            .getLogger(\"org.geotools.data.shapefile\")", "var_name": "LOGGER"}, {"original_string": "private ReadableByteChannel readChannel;", "modifier": "private", "type": "ReadableByteChannel", "declarator": "readChannel", "var_name": "readChannel"}, {"original_string": "private ByteBuffer buffer;", "modifier": "private", "type": "ByteBuffer", "declarator": "buffer", "var_name": "buffer"}, {"original_string": "private long count;", "modifier": "private", "type": "long", "declarator": "count", "var_name": "count"}, {"original_string": "private String typeName;", "modifier": "private", "type": "String", "declarator": "typeName", "var_name": "typeName"}, {"original_string": "private boolean done;", "modifier": "private", "type": "boolean", "declarator": "done", "var_name": "done"}, {"original_string": "private int removes;", "modifier": "private", "type": "int", "declarator": "removes", "var_name": "removes"}, {"original_string": "private int currentShxIndex = -1;", "modifier": "private", "type": "int", "declarator": "currentShxIndex = -1", "var_name": "currentShxIndex"}, {"original_string": "private long currentId;", "modifier": "private", "type": "long", "declarator": "currentId", "var_name": "currentId"}, {"original_string": "private StringBuilder fidBuilder;", "modifier": "private", "type": "StringBuilder", "declarator": "fidBuilder", "var_name": "fidBuilder"}, {"original_string": "private long bufferStart = Long.MIN_VALUE;", "modifier": "private", "type": "long", "declarator": "bufferStart = Long.MIN_VALUE", "var_name": "bufferStart"}, {"original_string": "StreamLogging streamLogger = new StreamLogging(\"IndexedFidReader\");", "modifier": "", "type": "StreamLogging", "declarator": "streamLogger = new StreamLogging(\"IndexedFidReader\")", "var_name": "streamLogger"}], "methods": [{"identifier": "IndexedFidReader", "parameters": "(ShpFiles shpFiles)", "modifiers": "public", "return": "", "signature": " IndexedFidReader(ShpFiles shpFiles)", "full_signature": "public  IndexedFidReader(ShpFiles shpFiles)", "class_method_signature": "IndexedFidReader.IndexedFidReader(ShpFiles shpFiles)", "testcase": false, "constructor": true}, {"identifier": "IndexedFidReader", "parameters": "( ShpFiles shpFiles, ReadableByteChannel in )", "modifiers": "public", "return": "", "signature": " IndexedFidReader( ShpFiles shpFiles, ReadableByteChannel in )", "full_signature": "public  IndexedFidReader( ShpFiles shpFiles, ReadableByteChannel in )", "class_method_signature": "IndexedFidReader.IndexedFidReader( ShpFiles shpFiles, ReadableByteChannel in )", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "( ShpFiles shpFiles, ReadableByteChannel in )", "modifiers": "private", "return": "void", "signature": "void init( ShpFiles shpFiles, ReadableByteChannel in )", "full_signature": "private void init( ShpFiles shpFiles, ReadableByteChannel in )", "class_method_signature": "IndexedFidReader.init( ShpFiles shpFiles, ReadableByteChannel in )", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "(ShpFiles shpFiles)", "modifiers": "private", "return": "void", "signature": "void getHeader(ShpFiles shpFiles)", "full_signature": "private void getHeader(ShpFiles shpFiles)", "class_method_signature": "IndexedFidReader.getHeader(ShpFiles shpFiles)", "testcase": false, "constructor": false}, {"identifier": "getCount", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCount()", "full_signature": "public long getCount()", "class_method_signature": "IndexedFidReader.getCount()", "testcase": false, "constructor": false}, {"identifier": "getRemoves", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRemoves()", "full_signature": "public int getRemoves()", "class_method_signature": "IndexedFidReader.getRemoves()", "testcase": false, "constructor": false}, {"identifier": "findFid", "parameters": "(String fid)", "modifiers": "public", "return": "long", "signature": "long findFid(String fid)", "full_signature": "public long findFid(String fid)", "class_method_signature": "IndexedFidReader.findFid(String fid)", "testcase": false, "constructor": false}, {"identifier": "search", "parameters": "(long desired, long minRec, long maxRec, long predictedRec)", "modifiers": "", "return": "long", "signature": "long search(long desired, long minRec, long maxRec, long predictedRec)", "full_signature": " long search(long desired, long minRec, long maxRec, long predictedRec)", "class_method_signature": "IndexedFidReader.search(long desired, long minRec, long maxRec, long predictedRec)", "testcase": false, "constructor": false}, {"identifier": "goTo", "parameters": "(long recno)", "modifiers": "public", "return": "void", "signature": "void goTo(long recno)", "full_signature": "public void goTo(long recno)", "class_method_signature": "IndexedFidReader.goTo(long recno)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void close()", "full_signature": "public void close()", "class_method_signature": "IndexedFidReader.close()", "testcase": false, "constructor": false}, {"identifier": "hasNext", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasNext()", "full_signature": "public boolean hasNext()", "class_method_signature": "IndexedFidReader.hasNext()", "testcase": false, "constructor": false}, {"identifier": "next", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String next()", "full_signature": "public String next()", "class_method_signature": "IndexedFidReader.next()", "testcase": false, "constructor": false}, {"identifier": "currentSHXIndex", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int currentSHXIndex()", "full_signature": "public int currentSHXIndex()", "class_method_signature": "IndexedFidReader.currentSHXIndex()", "testcase": false, "constructor": false}, {"identifier": "getCurrentFIDIndex", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getCurrentFIDIndex()", "full_signature": "public long getCurrentFIDIndex()", "class_method_signature": "IndexedFidReader.getCurrentFIDIndex()", "testcase": false, "constructor": false}, {"identifier": "id", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String id()", "full_signature": "public String id()", "class_method_signature": "IndexedFidReader.id()", "testcase": false, "constructor": false}], "file": "modules/plugin/shapefile/src/main/java/org/geotools/data/shapefile/fid/IndexedFidReader.java"}, "focal_method": {"identifier": "findFid", "parameters": "(String fid)", "modifiers": "public", "return": "long", "body": "public long findFid(String fid) throws IOException {\n        try {\n            int idx = typeName.length(); //typeName already contains the trailing \".\"\n            long desired = -1;\n            if(fid.startsWith(typeName)){\n                try{\n                    desired =  Long.parseLong(fid.substring(idx), 10);\n                }catch(NumberFormatException e){\n                    return -1;\n                }\n            }else{\n                return -1;\n            }\n\n            if ((desired < 0)) {\n                return -1;\n            }\n\n            if (desired < count) {\n                return search(desired, -1, this.count, desired - 1);\n            } else {\n                return search(desired, -1, this.count, count - 1);\n            }\n        } catch (NumberFormatException e) {\n            LOGGER\n                    .warning(\"Fid is not recognized as a fid for this shapefile: \"\n                            + typeName);\n            return -1;\n        }\n    }", "signature": "long findFid(String fid)", "full_signature": "public long findFid(String fid)", "class_method_signature": "IndexedFidReader.findFid(String fid)", "testcase": false, "constructor": false, "invocations": ["length", "startsWith", "parseLong", "substring", "search", "search", "warning"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}