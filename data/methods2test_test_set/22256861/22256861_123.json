{"test_class": {"identifier": "ImageSizeHandlerTest", "superclass": "", "interfaces": "", "fields": [], "file": "s3tbx-slstr-pdu-stitching/src/test/java/org/esa/s3tbx/slstr/pdu/stitching/ImageSizeHandlerTest.java"}, "test_case": {"identifier": "testExtractImageSizes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExtractImageSizes() throws IOException, URISyntaxException {\n        final ImageSize[] imageSizes1 =\n                ImageSizeHandler.extractImageSizes(createXmlDocument(new FileInputStream(getFirstSlstrFile())));\n        assertEquals(2, imageSizes1.length);\n        assertEquals(new ImageSize(\"tn\", 21687, 64, 2000, 130), imageSizes1[0]);\n        assertEquals(new ImageSize(\"to\", 21687, 64, 2000, 130), imageSizes1[1]);\n\n        final ImageSize[] imageSizes2 =\n                ImageSizeHandler.extractImageSizes(createXmlDocument(new FileInputStream(getSecondSlstrFile())));\n        assertEquals(3, imageSizes2.length);\n        assertEquals(new ImageSize(\"tn\", 23687, 64, 2000, 130), imageSizes2[0]);\n        assertEquals(new ImageSize(\"io\", 23687, 450, 2000, 900), imageSizes2[1]);\n        assertEquals(new ImageSize(\"to\", 23687, 64, 2000, 130), imageSizes2[2]);\n\n        final ImageSize[] imageSizes3 =\n                ImageSizeHandler.extractImageSizes(createXmlDocument(new FileInputStream(getThirdSlstrFile())));\n        assertEquals(2, imageSizes3.length);\n        assertEquals(new ImageSize(\"tn\", 25687, 64, 2000, 130), imageSizes3[0]);\n        assertEquals(new ImageSize(\"to\", 25687, 64, 2000, 130), imageSizes3[1]);\n    }", "signature": "void testExtractImageSizes()", "full_signature": "@Test public void testExtractImageSizes()", "class_method_signature": "ImageSizeHandlerTest.testExtractImageSizes()", "testcase": true, "constructor": false, "invocations": ["extractImageSizes", "createXmlDocument", "getFirstSlstrFile", "assertEquals", "assertEquals", "assertEquals", "extractImageSizes", "createXmlDocument", "getSecondSlstrFile", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "extractImageSizes", "createXmlDocument", "getThirdSlstrFile", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "ImageSizeHandler", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "createTargetImageSize", "parameters": "(ImageSize[] imageSizes)", "modifiers": "public static", "return": "ImageSize", "signature": "ImageSize createTargetImageSize(ImageSize[] imageSizes)", "full_signature": "public static ImageSize createTargetImageSize(ImageSize[] imageSizes)", "class_method_signature": "ImageSizeHandler.createTargetImageSize(ImageSize[] imageSizes)", "testcase": false, "constructor": false}, {"identifier": "extractImageSizes", "parameters": "(Document manifestDocument)", "modifiers": "public static", "return": "ImageSize[]", "signature": "ImageSize[] extractImageSizes(Document manifestDocument)", "full_signature": "public static ImageSize[] extractImageSizes(Document manifestDocument)", "class_method_signature": "ImageSizeHandler.extractImageSizes(Document manifestDocument)", "testcase": false, "constructor": false}, {"identifier": "extractImageSizeFromNode", "parameters": "(Node element, String idExtension)", "modifiers": "public static", "return": "ImageSize", "signature": "ImageSize extractImageSizeFromNode(Node element, String idExtension)", "full_signature": "public static ImageSize extractImageSizeFromNode(Node element, String idExtension)", "class_method_signature": "ImageSizeHandler.extractImageSizeFromNode(Node element, String idExtension)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "(String gridName)", "modifiers": "private static", "return": "String", "signature": "String getId(String gridName)", "full_signature": "private static String getId(String gridName)", "class_method_signature": "ImageSizeHandler.getId(String gridName)", "testcase": false, "constructor": false}], "file": "s3tbx-slstr-pdu-stitching/src/main/java/org/esa/s3tbx/slstr/pdu/stitching/ImageSizeHandler.java"}, "focal_method": {"identifier": "extractImageSizes", "parameters": "(Document manifestDocument)", "modifiers": "public static", "return": "ImageSize[]", "body": "public static ImageSize[] extractImageSizes(Document manifestDocument) {\n        final NodeList nadirElements = manifestDocument.getElementsByTagName(\"slstr:nadirImageSize\");\n        final NodeList obliqueElements = manifestDocument.getElementsByTagName(\"slstr:obliqueImageSize\");\n        final ImageSize[] imageSizes = new ImageSize[nadirElements.getLength() + obliqueElements.getLength()];\n        for (int i = 0; i < nadirElements.getLength(); i++) {\n            imageSizes[i] = extractImageSizeFromNode(nadirElements.item(i), \"n\");\n        }\n        for (int i = 0; i < obliqueElements.getLength(); i++) {\n            imageSizes[nadirElements.getLength() + i] = extractImageSizeFromNode(obliqueElements.item(i), \"o\");\n        }\n        return imageSizes;\n    }", "signature": "ImageSize[] extractImageSizes(Document manifestDocument)", "full_signature": "public static ImageSize[] extractImageSizes(Document manifestDocument)", "class_method_signature": "ImageSizeHandler.extractImageSizes(Document manifestDocument)", "testcase": false, "constructor": false, "invocations": ["getElementsByTagName", "getElementsByTagName", "getLength", "getLength", "getLength", "extractImageSizeFromNode", "item", "getLength", "getLength", "extractImageSizeFromNode", "item"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}