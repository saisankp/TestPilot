{"test_class": {"identifier": "ActivityFragmentLeakInstanceFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "profilers/testSrc/com/android/tools/profilers/memory/adapters/instancefilters/ActivityFragmentLeakInstanceFilterTest.java"}, "test_case": {"identifier": "testActivityLeaks", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testActivityLeaks() {\n    long baseClassActivityId = 1;\n    long subClassActivityId = 2;\n    long unrelatedClassId = 3;\n\n    FakeCaptureObject capture = new FakeCaptureObject.Builder().build();\n\n    // android.app.activity instance with mFinished field set to true and valid depth.\n    FakeInstanceObject leakingBaseClassActivity =\n      new FakeInstanceObject.Builder(capture, baseClassActivityId, ActivityFragmentLeakInstanceFilter.ACTIVTY_CLASS_NAME)\n        .addField(ActivityFragmentLeakInstanceFilter.FINISHED_FIELD_NAME, ValueObject.ValueType.BOOLEAN, true)\n        .setDepth(1)\n        .build();\n    // android.app.activity instance with no corresponding fields we can detect leaks from.\n    FakeInstanceObject nonLeakingBaseClassActivity =\n      new FakeInstanceObject.Builder(capture, baseClassActivityId, ActivityFragmentLeakInstanceFilter.ACTIVTY_CLASS_NAME)\n        .addField(\"blah\", ValueObject.ValueType.BOOLEAN, true)\n        .build();\n    // android.app.activity subclass instance with mDestroyed field set to true and valid depth.\n    FakeInstanceObject leakingSubClassActivity =\n      new FakeInstanceObject.Builder(capture, subClassActivityId, \"my.activity.subclass\")\n        .setSuperClassId(baseClassActivityId)\n        .addField(ActivityFragmentLeakInstanceFilter.DESTROYED_FIELD_NAME, ValueObject.ValueType.BOOLEAN, true)\n        .setDepth(1)\n        .build();\n    // android.app.activity subclass instance with no corresponding fields we can detect leaks from.\n    FakeInstanceObject nonLeakingSubClassActivity1 =\n      new FakeInstanceObject.Builder(capture, subClassActivityId, \"my.activity.subclass\")\n        .setSuperClassId(baseClassActivityId)\n        .addField(\"blah\", ValueObject.ValueType.BOOLEAN, true)\n        .build();\n    // android.app.activity subclass instance with mDestroyed field set to true but invalid depth (waiting to be gc'd instance)\n    FakeInstanceObject nonLeakingSubClassActivity2 =\n      new FakeInstanceObject.Builder(capture, subClassActivityId, \"my.activity.subclass\")\n        .setSuperClassId(baseClassActivityId)\n        .addField(ActivityFragmentLeakInstanceFilter.DESTROYED_FIELD_NAME, ValueObject.ValueType.BOOLEAN, true)\n        .build();\n    // unrelated class instance that does not belong to the android.app.activity hierarchy.\n    FakeInstanceObject unrelatedClassInstance =\n      new FakeInstanceObject.Builder(capture, unrelatedClassId, \"my.other.class\")\n        .addField(ActivityFragmentLeakInstanceFilter.DESTROYED_FIELD_NAME, ValueObject.ValueType.BOOLEAN, true)\n        .build();\n\n    Set<InstanceObject> instances = ImmutableSet.of(leakingBaseClassActivity,\n                                                    nonLeakingBaseClassActivity,\n                                                    leakingSubClassActivity,\n                                                    nonLeakingSubClassActivity1,\n                                                    nonLeakingSubClassActivity2,\n                                                    unrelatedClassInstance);\n\n    ActivityFragmentLeakInstanceFilter filter = new ActivityFragmentLeakInstanceFilter();\n    Set<InstanceObject> result = filter.filter(instances, capture.getClassDatabase());\n    assertThat(result).containsExactly(leakingBaseClassActivity, leakingSubClassActivity);\n  }", "signature": "void testActivityLeaks()", "full_signature": "@Test public void testActivityLeaks()", "class_method_signature": "ActivityFragmentLeakInstanceFilterTest.testActivityLeaks()", "testcase": true, "constructor": false, "invocations": ["build", "build", "setDepth", "addField", "build", "addField", "build", "setDepth", "addField", "setSuperClassId", "build", "addField", "setSuperClassId", "build", "addField", "setSuperClassId", "build", "addField", "of", "filter", "getClassDatabase", "containsExactly", "assertThat"]}, "focal_class": {"identifier": "ActivityFragmentLeakInstanceFilter", "superclass": "", "interfaces": "implements CaptureObjectInstanceFilter", "fields": [{"original_string": "@VisibleForTesting static final String ACTIVTY_CLASS_NAME = \"android.app.Activity\";", "modifier": "@VisibleForTesting static final", "type": "String", "declarator": "ACTIVTY_CLASS_NAME = \"android.app.Activity\"", "var_name": "ACTIVTY_CLASS_NAME"}, {"original_string": "@VisibleForTesting static final String NATIVE_FRAGMENT_CLASS_NAME = \"android.app.Fragment\";", "modifier": "@VisibleForTesting static final", "type": "String", "declarator": "NATIVE_FRAGMENT_CLASS_NAME = \"android.app.Fragment\"", "var_name": "NATIVE_FRAGMENT_CLASS_NAME"}, {"original_string": "@VisibleForTesting static final String SUPPORT_FRAGMENT_CLASS_NAME = \"android.support.v4.app.Fragment\";", "modifier": "@VisibleForTesting static final", "type": "String", "declarator": "SUPPORT_FRAGMENT_CLASS_NAME = \"android.support.v4.app.Fragment\"", "var_name": "SUPPORT_FRAGMENT_CLASS_NAME"}, {"original_string": "@VisibleForTesting static final String ANDROIDX_FRAGMENT_CLASS_NAME = \"androidx.fragment.app.Fragment\";", "modifier": "@VisibleForTesting static final", "type": "String", "declarator": "ANDROIDX_FRAGMENT_CLASS_NAME = \"androidx.fragment.app.Fragment\"", "var_name": "ANDROIDX_FRAGMENT_CLASS_NAME"}, {"original_string": "@VisibleForTesting static final String FINISHED_FIELD_NAME = \"mFinished\";", "modifier": "@VisibleForTesting static final", "type": "String", "declarator": "FINISHED_FIELD_NAME = \"mFinished\"", "var_name": "FINISHED_FIELD_NAME"}, {"original_string": "@VisibleForTesting static final String DESTROYED_FIELD_NAME = \"mDestroyed\";", "modifier": "@VisibleForTesting static final", "type": "String", "declarator": "DESTROYED_FIELD_NAME = \"mDestroyed\"", "var_name": "DESTROYED_FIELD_NAME"}, {"original_string": "@VisibleForTesting static final String FRAGFMENT_MANAGER_FIELD_NAME = \"mFragmentManager\";", "modifier": "@VisibleForTesting static final", "type": "String", "declarator": "FRAGFMENT_MANAGER_FIELD_NAME = \"mFragmentManager\"", "var_name": "FRAGFMENT_MANAGER_FIELD_NAME"}, {"original_string": "private static final Set<String> FRAGMENT_CLASS_NAMES = ImmutableSet.of(\n    NATIVE_FRAGMENT_CLASS_NAME, SUPPORT_FRAGMENT_CLASS_NAME, ANDROIDX_FRAGMENT_CLASS_NAME\n  );", "modifier": "private static final", "type": "Set<String>", "declarator": "FRAGMENT_CLASS_NAMES = ImmutableSet.of(\n    NATIVE_FRAGMENT_CLASS_NAME, SUPPORT_FRAGMENT_CLASS_NAME, ANDROIDX_FRAGMENT_CLASS_NAME\n  )", "var_name": "FRAGMENT_CLASS_NAMES"}], "methods": [{"identifier": "getDisplayName", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getDisplayName()", "full_signature": "@NotNull @Override public String getDisplayName()", "class_method_signature": "ActivityFragmentLeakInstanceFilter.getDisplayName()", "testcase": false, "constructor": false}, {"identifier": "getSummaryDescription", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "String", "signature": "String getSummaryDescription()", "full_signature": "@NotNull @Override public String getSummaryDescription()", "class_method_signature": "ActivityFragmentLeakInstanceFilter.getSummaryDescription()", "testcase": false, "constructor": false}, {"identifier": "getDetailedDescription", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "String", "signature": "String getDetailedDescription()", "full_signature": "@Nullable @Override public String getDetailedDescription()", "class_method_signature": "ActivityFragmentLeakInstanceFilter.getDetailedDescription()", "testcase": false, "constructor": false}, {"identifier": "getDocumentationLink", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "String", "signature": "String getDocumentationLink()", "full_signature": "@Nullable @Override public String getDocumentationLink()", "class_method_signature": "ActivityFragmentLeakInstanceFilter.getDocumentationLink()", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(@NotNull Set<InstanceObject> instances, @NotNull ClassDb classDatabase)", "modifiers": "@Override public", "return": "Set<InstanceObject>", "signature": "Set<InstanceObject> filter(@NotNull Set<InstanceObject> instances, @NotNull ClassDb classDatabase)", "full_signature": "@Override public Set<InstanceObject> filter(@NotNull Set<InstanceObject> instances, @NotNull ClassDb classDatabase)", "class_method_signature": "ActivityFragmentLeakInstanceFilter.filter(@NotNull Set<InstanceObject> instances, @NotNull ClassDb classDatabase)", "testcase": false, "constructor": false}, {"identifier": "isPotentialActivityLeak", "parameters": "(@NotNull InstanceObject instance)", "modifiers": "private", "return": "boolean", "signature": "boolean isPotentialActivityLeak(@NotNull InstanceObject instance)", "full_signature": "private boolean isPotentialActivityLeak(@NotNull InstanceObject instance)", "class_method_signature": "ActivityFragmentLeakInstanceFilter.isPotentialActivityLeak(@NotNull InstanceObject instance)", "testcase": false, "constructor": false}, {"identifier": "isPotentialFragmentLeak", "parameters": "(@NotNull InstanceObject instance)", "modifiers": "private", "return": "boolean", "signature": "boolean isPotentialFragmentLeak(@NotNull InstanceObject instance)", "full_signature": "private boolean isPotentialFragmentLeak(@NotNull InstanceObject instance)", "class_method_signature": "ActivityFragmentLeakInstanceFilter.isPotentialFragmentLeak(@NotNull InstanceObject instance)", "testcase": false, "constructor": false}], "file": "profilers/src/com/android/tools/profilers/memory/adapters/instancefilters/ActivityFragmentLeakInstanceFilter.java"}, "focal_method": {"identifier": "filter", "parameters": "(@NotNull Set<InstanceObject> instances, @NotNull ClassDb classDatabase)", "modifiers": "@Override public", "return": "Set<InstanceObject>", "body": "@Override\n  public Set<InstanceObject> filter(@NotNull Set<InstanceObject> instances, @NotNull ClassDb classDatabase) {\n    Set<ClassDb.ClassEntry> allActivitySubclasses = classDatabase.getEntriesByName(ACTIVTY_CLASS_NAME).stream()\n      .flatMap(classEntry -> classDatabase.getDescendantClasses(classEntry.getClassId()).stream())\n      .collect(Collectors.toSet());\n\n    Set<ClassDb.ClassEntry> allFragmentSubclasses = FRAGMENT_CLASS_NAMES.stream()\n      .flatMap(className -> classDatabase.getEntriesByName(className).stream())\n      .flatMap(classEntry -> classDatabase.getDescendantClasses(classEntry.getClassId()).stream())\n      .collect(Collectors.toSet());\n\n    return instances.stream().filter(instance -> {\n      if (allActivitySubclasses.contains(instance.getClassEntry()) && isPotentialActivityLeak(instance)) {\n        return true;\n      }\n      else if (allFragmentSubclasses.contains(instance.getClassEntry()) && isPotentialFragmentLeak(instance)) {\n        return true;\n      }\n      return false;\n    }).collect(Collectors.toSet());\n  }", "signature": "Set<InstanceObject> filter(@NotNull Set<InstanceObject> instances, @NotNull ClassDb classDatabase)", "full_signature": "@Override public Set<InstanceObject> filter(@NotNull Set<InstanceObject> instances, @NotNull ClassDb classDatabase)", "class_method_signature": "ActivityFragmentLeakInstanceFilter.filter(@NotNull Set<InstanceObject> instances, @NotNull ClassDb classDatabase)", "testcase": false, "constructor": false, "invocations": ["collect", "flatMap", "stream", "getEntriesByName", "stream", "getDescendantClasses", "getClassId", "toSet", "collect", "flatMap", "flatMap", "stream", "stream", "getEntriesByName", "stream", "getDescendantClasses", "getClassId", "toSet", "collect", "filter", "stream", "contains", "getClassEntry", "isPotentialActivityLeak", "contains", "getClassEntry", "isPotentialFragmentLeak", "toSet"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}