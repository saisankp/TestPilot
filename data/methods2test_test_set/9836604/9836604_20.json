{"test_class": {"identifier": "UsernamePasswordCredentialToPrincipalResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private UsernamePasswordCredentialToPrincipalResolver resolver = new UsernamePasswordCredentialToPrincipalResolver();", "modifier": "private", "type": "UsernamePasswordCredentialToPrincipalResolver", "declarator": "resolver = new UsernamePasswordCredentialToPrincipalResolver()", "var_name": "resolver"}], "file": "ki4so-core/src/test/java/com/github/ebnew/ki4so/core/authentication/resolvers/UsernamePasswordCredentialToPrincipalResolverTest.java"}, "test_case": {"identifier": "testResolvePrincipal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testResolvePrincipal(){\n\t\t//\u6d4b\u8bd5\u4f20\u5165null\u7684\u60c5\u51b5\u3002\n\t\tAssert.assertNull(resolver.resolvePrincipal(null));\n\t\t\n\t\t//\u6d4b\u8bd5\u4f20\u5165\u4e0d\u652f\u6301\u7684\u51ed\u636e\u7c7b\u578b\u7684\u60c5\u51b5\u3002\n\t\tCredential credential = Mockito.mock(Credential.class);\n\t\tAssert.assertNull(resolver.resolvePrincipal(credential));\n\t\t\n\t\t//\u6d4b\u8bd5\u4f20\u5165\u6b63\u786e\u7684\u51ed\u636e\u5bf9\u8c61\u7684\u60c5\u51b5\u3002\n\t\tString username = \"admin\";\n\t\tUsernamePasswordCredential usernamePasswordCredential = new UsernamePasswordCredential();\n\t\tusernamePasswordCredential.setUsername(username);\n\t\tDefaultUserPrincipal principal = (DefaultUserPrincipal)resolver.resolvePrincipal(usernamePasswordCredential);\n\t\tAssert.assertNotNull(principal);\n\t\tAssert.assertEquals(username, principal.getId());\n\t\t\n\t\t\n\t}", "signature": "void testResolvePrincipal()", "full_signature": "@Test public void testResolvePrincipal()", "class_method_signature": "UsernamePasswordCredentialToPrincipalResolverTest.testResolvePrincipal()", "testcase": true, "constructor": false, "invocations": ["assertNull", "resolvePrincipal", "mock", "assertNull", "resolvePrincipal", "setUsername", "resolvePrincipal", "assertNotNull", "assertEquals", "getId"]}, "focal_class": {"identifier": "UsernamePasswordCredentialToPrincipalResolver", "superclass": "", "interfaces": "implements CredentialToPrincipalResolver", "fields": [{"original_string": "private static final Class<UsernamePasswordCredential> DEFAULT_CLASS = UsernamePasswordCredential.class;", "modifier": "private static final", "type": "Class<UsernamePasswordCredential>", "declarator": "DEFAULT_CLASS = UsernamePasswordCredential.class", "var_name": "DEFAULT_CLASS"}, {"original_string": "private Class<?> classToSupport = DEFAULT_CLASS;", "modifier": "private", "type": "Class<?>", "declarator": "classToSupport = DEFAULT_CLASS", "var_name": "classToSupport"}, {"original_string": "private boolean supportSubClasses = true;", "modifier": "private", "type": "boolean", "declarator": "supportSubClasses = true", "var_name": "supportSubClasses"}], "methods": [{"identifier": "setSupportSubClasses", "parameters": "(boolean supportSubClasses)", "modifiers": "public", "return": "void", "signature": "void setSupportSubClasses(boolean supportSubClasses)", "full_signature": "public void setSupportSubClasses(boolean supportSubClasses)", "class_method_signature": "UsernamePasswordCredentialToPrincipalResolver.setSupportSubClasses(boolean supportSubClasses)", "testcase": false, "constructor": false}, {"identifier": "resolvePrincipal", "parameters": "(Credential credential)", "modifiers": "@Override public", "return": "Principal", "signature": "Principal resolvePrincipal(Credential credential)", "full_signature": "@Override public Principal resolvePrincipal(Credential credential)", "class_method_signature": "UsernamePasswordCredentialToPrincipalResolver.resolvePrincipal(Credential credential)", "testcase": false, "constructor": false}, {"identifier": "supports", "parameters": "(Credential credential)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supports(Credential credential)", "full_signature": "@Override public boolean supports(Credential credential)", "class_method_signature": "UsernamePasswordCredentialToPrincipalResolver.supports(Credential credential)", "testcase": false, "constructor": false}], "file": "ki4so-core/src/main/java/com/github/ebnew/ki4so/core/authentication/resolvers/UsernamePasswordCredentialToPrincipalResolver.java"}, "focal_method": {"identifier": "resolvePrincipal", "parameters": "(Credential credential)", "modifiers": "@Override public", "return": "Principal", "body": "@Override\n\tpublic Principal resolvePrincipal(Credential credential) {\n\t\t//\u82e5\u7c7b\u578b\u5339\u914d\uff0c\u5219\u8fdb\u884c\u8f6c\u6362\u3002\n\t\tif(credential!=null && this.supports(credential)){\n\t\t\tUsernamePasswordCredential usernamePasswordCredential = (UsernamePasswordCredential)credential;\n\t\t\tDefaultUserPrincipal principal = new DefaultUserPrincipal();\n\t\t\t//\u8bbe\u7f6e\u7528\u6237\u540d\u4e3a\u552f\u4e00\u6807\u8bc6\u3002\n\t\t\tprincipal.setId(usernamePasswordCredential.getUsername());\n\t\t\t//\u8bbe\u7f6e\u53c2\u6570\u8868\u4e3a\u7528\u6237\u5c5e\u6027\u3002\n\t\t\tprincipal.setAttributes(usernamePasswordCredential.getParameters());\n\t\t\treturn principal;\n\t\t}\n\t\treturn null;\n\t}", "signature": "Principal resolvePrincipal(Credential credential)", "full_signature": "@Override public Principal resolvePrincipal(Credential credential)", "class_method_signature": "UsernamePasswordCredentialToPrincipalResolver.resolvePrincipal(Credential credential)", "testcase": false, "constructor": false, "invocations": ["supports", "setId", "getUsername", "setAttributes", "getParameters"]}, "repository": {"repo_id": 9836604, "url": "https://github.com/ebnew/ki4so", "language": "Java", "is_fork": false, "fork_count": 84, "stargazer_count": 100, "size": 4421, "license": "licensed"}}