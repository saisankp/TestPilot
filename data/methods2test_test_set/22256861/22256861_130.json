{"test_class": {"identifier": "SensorCoefficientFileTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Path smacAuxDir;", "modifier": "private", "type": "Path", "declarator": "smacAuxDir", "var_name": "smacAuxDir"}], "file": "s3tbx-meris-smac/src/test/java/org/esa/s3tbx/smac/SensorCoefficientFileTest.java"}, "test_case": {"identifier": "testReadFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadFile() {\n        SensorCoefficientFile file = new SensorCoefficientFile();\n\n        // class should not accept null argument\n        try {\n            file.readFile(null);\n            fail(\"illegal null argument shall not be accepted\");\n        } catch (IllegalArgumentException | IOException ignored) {\n        }\n        // class shall throw exception when file does not exist\n        try {\n            file.readFile(\"gbrmtzewz\");\n            fail(\"exception must be thrown when non existent file is passed in\");\n        } catch (IOException ignored) {\n        }\n\n        // now read an existing file\n        try {\n\n            File toRead = smacAuxDir.resolve(\"coef_ASTER1_DES.dat\").toFile();\n            file.readFile(toRead.toString());\n        } catch (FileNotFoundException e) {\n            fail(\"must be able to read this file\");\n        } catch (IOException ignored) {\n        }\n\n        assertEquals(-0.002718, file.getAh2o(), 1e-12);\n        assertEquals(0.758879, file.getNh2o(), 1e-12);\n        assertEquals(-0.087688, file.getAo3(), 1e-12);\n        assertEquals(0.994792, file.getNo3(), 1e-12);\n        assertEquals(0.000000, file.getAo2(), 1e-12);\n        assertEquals(0.000000, file.getNo2(), 1e-12);\n        assertEquals(0.000000, file.getPo2(), 1e-12);\n        assertEquals(0.000000, file.getAco2(), 1e-12);\n        assertEquals(0.000000, file.getNco2(), 1e-12);\n        assertEquals(0.000000, file.getPco2(), 1e-12);\n        assertEquals(0.000000, file.getAch4(), 1e-12);\n        assertEquals(0.000000, file.getNch4(), 1e-12);\n        assertEquals(0.000000, file.getPch4(), 1e-12);\n        assertEquals(0.000000, file.getAno2(), 1e-12);\n        assertEquals(0.000000, file.getNno2(), 1e-12);\n        assertEquals(0.000000, file.getPno2(), 1e-12);\n        assertEquals(0.000000, file.getAco(), 1e-12);\n        assertEquals(0.000000, file.getNco(), 1e-12);\n        assertEquals(0.000000, file.getPco(), 1e-12);\n        assertEquals(0.049583, file.getA0s(), 1e-12);\n        assertEquals(0.202694, file.getA1s(), 1e-12);\n        assertEquals(-0.069883, file.getA2s(), 1e-12);\n        assertEquals(0.032950, file.getA3s(), 1e-12);\n        assertEquals(1.122924, file.getA0T(), 1e-12);\n        assertEquals(-0.171042, file.getA1T(), 1e-12);\n        assertEquals(-0.087717, file.getA2T(), 1e-12);\n        assertEquals(-0.243279, file.getA3T(), 1e-12);\n        assertEquals(0.095735, file.getTaur(), 1e-12);\n        assertEquals(0.080458, file.getSr(), 1e-12);\n        assertEquals(1.665335e-16, file.getA0taup(), 1e-12);\n        assertEquals(0.996574, file.getA1taup(), 1e-12);\n        assertEquals(0.931251, file.getWo(), 1e-12);\n        assertEquals(0.707801, file.getGc(), 1e-12);\n        assertEquals(6.65108385405353e+00, file.getA0P(), 1e-12);\n        assertEquals(-2.04145765556867e-01, file.getA1P(), 1e-12);\n        assertEquals(2.47532478623969e-03, file.getA2P(), 1e-12);\n        assertEquals(-1.37367474080701e-05, file.getA3P(), 1e-12);\n        assertEquals(2.93421755343360e-08, file.getA4P(), 1e-12);\n        assertEquals(-0.003809, file.getRest1(), 1e-12);\n        assertEquals(-0.015628, file.getRest2(), 1e-12);\n        assertEquals(-0.014170, file.getRest3(), 1e-12);\n        assertEquals(-0.002414, file.getRest4(), 1e-12);\n        assertEquals(-0.001115, file.getResr1(), 1e-12);\n        assertEquals(-0.003992, file.getResr2(), 1e-12);\n        assertEquals(0.025444, file.getResr3(), 1e-12);\n        assertEquals(-0.008359, file.getResa1(), 1e-12);\n        assertEquals(-0.03399, file.getResa2(), 1e-12);\n        assertEquals(-0.042086, file.getResa3(), 1e-12);\n        assertEquals(-0.012983, file.getResa4(), 1e-12);\n    }", "signature": "void testReadFile()", "full_signature": "@Test public void testReadFile()", "class_method_signature": "SensorCoefficientFileTest.testReadFile()", "testcase": true, "constructor": false, "invocations": ["readFile", "fail", "readFile", "fail", "toFile", "resolve", "readFile", "toString", "fail", "assertEquals", "getAh2o", "assertEquals", "getNh2o", "assertEquals", "getAo3", "assertEquals", "getNo3", "assertEquals", "getAo2", "assertEquals", "getNo2", "assertEquals", "getPo2", "assertEquals", "getAco2", "assertEquals", "getNco2", "assertEquals", "getPco2", "assertEquals", "getAch4", "assertEquals", "getNch4", "assertEquals", "getPch4", "assertEquals", "getAno2", "assertEquals", "getNno2", "assertEquals", "getPno2", "assertEquals", "getAco", "assertEquals", "getNco", "assertEquals", "getPco", "assertEquals", "getA0s", "assertEquals", "getA1s", "assertEquals", "getA2s", "assertEquals", "getA3s", "assertEquals", "getA0T", "assertEquals", "getA1T", "assertEquals", "getA2T", "assertEquals", "getA3T", "assertEquals", "getTaur", "assertEquals", "getSr", "assertEquals", "getA0taup", "assertEquals", "getA1taup", "assertEquals", "getWo", "assertEquals", "getGc", "assertEquals", "getA0P", "assertEquals", "getA1P", "assertEquals", "getA2P", "assertEquals", "getA3P", "assertEquals", "getA4P", "assertEquals", "getRest1", "assertEquals", "getRest2", "assertEquals", "getRest3", "assertEquals", "getRest4", "assertEquals", "getResr1", "assertEquals", "getResr2", "assertEquals", "getResr3", "assertEquals", "getResa1", "assertEquals", "getResa2", "assertEquals", "getResa3", "assertEquals", "getResa4"]}, "focal_class": {"identifier": "SensorCoefficientFile", "superclass": "", "interfaces": "implements SmacSensorCoefficients", "fields": [{"original_string": "private double _ah2o;", "modifier": "private", "type": "double", "declarator": "_ah2o", "var_name": "_ah2o"}, {"original_string": "private double _nh2o;", "modifier": "private", "type": "double", "declarator": "_nh2o", "var_name": "_nh2o"}, {"original_string": "private double _ao3;", "modifier": "private", "type": "double", "declarator": "_ao3", "var_name": "_ao3"}, {"original_string": "private double _no3;", "modifier": "private", "type": "double", "declarator": "_no3", "var_name": "_no3"}, {"original_string": "private double _ao2;", "modifier": "private", "type": "double", "declarator": "_ao2", "var_name": "_ao2"}, {"original_string": "private double _no2;", "modifier": "private", "type": "double", "declarator": "_no2", "var_name": "_no2"}, {"original_string": "private double _po2;", "modifier": "private", "type": "double", "declarator": "_po2", "var_name": "_po2"}, {"original_string": "private double _aco2;", "modifier": "private", "type": "double", "declarator": "_aco2", "var_name": "_aco2"}, {"original_string": "private double _nco2;", "modifier": "private", "type": "double", "declarator": "_nco2", "var_name": "_nco2"}, {"original_string": "private double _pco2;", "modifier": "private", "type": "double", "declarator": "_pco2", "var_name": "_pco2"}, {"original_string": "private double _ach4;", "modifier": "private", "type": "double", "declarator": "_ach4", "var_name": "_ach4"}, {"original_string": "private double _nch4;", "modifier": "private", "type": "double", "declarator": "_nch4", "var_name": "_nch4"}, {"original_string": "private double _pch4;", "modifier": "private", "type": "double", "declarator": "_pch4", "var_name": "_pch4"}, {"original_string": "private double _ano2;", "modifier": "private", "type": "double", "declarator": "_ano2", "var_name": "_ano2"}, {"original_string": "private double _nno2;", "modifier": "private", "type": "double", "declarator": "_nno2", "var_name": "_nno2"}, {"original_string": "private double _pno2;", "modifier": "private", "type": "double", "declarator": "_pno2", "var_name": "_pno2"}, {"original_string": "private double _aco;", "modifier": "private", "type": "double", "declarator": "_aco", "var_name": "_aco"}, {"original_string": "private double _nco;", "modifier": "private", "type": "double", "declarator": "_nco", "var_name": "_nco"}, {"original_string": "private double _pco;", "modifier": "private", "type": "double", "declarator": "_pco", "var_name": "_pco"}, {"original_string": "private double _a0s;", "modifier": "private", "type": "double", "declarator": "_a0s", "var_name": "_a0s"}, {"original_string": "private double _a1s;", "modifier": "private", "type": "double", "declarator": "_a1s", "var_name": "_a1s"}, {"original_string": "private double _a2s;", "modifier": "private", "type": "double", "declarator": "_a2s", "var_name": "_a2s"}, {"original_string": "private double _a3s;", "modifier": "private", "type": "double", "declarator": "_a3s", "var_name": "_a3s"}, {"original_string": "private double _a0T;", "modifier": "private", "type": "double", "declarator": "_a0T", "var_name": "_a0T"}, {"original_string": "private double _a1T;", "modifier": "private", "type": "double", "declarator": "_a1T", "var_name": "_a1T"}, {"original_string": "private double _a2T;", "modifier": "private", "type": "double", "declarator": "_a2T", "var_name": "_a2T"}, {"original_string": "private double _a3T;", "modifier": "private", "type": "double", "declarator": "_a3T", "var_name": "_a3T"}, {"original_string": "private double _taur;", "modifier": "private", "type": "double", "declarator": "_taur", "var_name": "_taur"}, {"original_string": "private double _sr;", "modifier": "private", "type": "double", "declarator": "_sr", "var_name": "_sr"}, {"original_string": "private double _a0taup;", "modifier": "private", "type": "double", "declarator": "_a0taup", "var_name": "_a0taup"}, {"original_string": "private double _a1taup;", "modifier": "private", "type": "double", "declarator": "_a1taup", "var_name": "_a1taup"}, {"original_string": "private double _wo;", "modifier": "private", "type": "double", "declarator": "_wo", "var_name": "_wo"}, {"original_string": "private double _gc;", "modifier": "private", "type": "double", "declarator": "_gc", "var_name": "_gc"}, {"original_string": "private double _a0P;", "modifier": "private", "type": "double", "declarator": "_a0P", "var_name": "_a0P"}, {"original_string": "private double _a1P;", "modifier": "private", "type": "double", "declarator": "_a1P", "var_name": "_a1P"}, {"original_string": "private double _a2P;", "modifier": "private", "type": "double", "declarator": "_a2P", "var_name": "_a2P"}, {"original_string": "private double _a3P;", "modifier": "private", "type": "double", "declarator": "_a3P", "var_name": "_a3P"}, {"original_string": "private double _a4P;", "modifier": "private", "type": "double", "declarator": "_a4P", "var_name": "_a4P"}, {"original_string": "private double _rest1;", "modifier": "private", "type": "double", "declarator": "_rest1", "var_name": "_rest1"}, {"original_string": "private double _rest2;", "modifier": "private", "type": "double", "declarator": "_rest2", "var_name": "_rest2"}, {"original_string": "private double _rest3;", "modifier": "private", "type": "double", "declarator": "_rest3", "var_name": "_rest3"}, {"original_string": "private double _rest4;", "modifier": "private", "type": "double", "declarator": "_rest4", "var_name": "_rest4"}, {"original_string": "private double _resr1;", "modifier": "private", "type": "double", "declarator": "_resr1", "var_name": "_resr1"}, {"original_string": "private double _resr2;", "modifier": "private", "type": "double", "declarator": "_resr2", "var_name": "_resr2"}, {"original_string": "private double _resr3;", "modifier": "private", "type": "double", "declarator": "_resr3", "var_name": "_resr3"}, {"original_string": "private double _resa1;", "modifier": "private", "type": "double", "declarator": "_resa1", "var_name": "_resa1"}, {"original_string": "private double _resa2;", "modifier": "private", "type": "double", "declarator": "_resa2", "var_name": "_resa2"}, {"original_string": "private double _resa3;", "modifier": "private", "type": "double", "declarator": "_resa3", "var_name": "_resa3"}, {"original_string": "private double _resa4;", "modifier": "private", "type": "double", "declarator": "_resa4", "var_name": "_resa4"}], "methods": [{"identifier": "SensorCoefficientFile", "parameters": "()", "modifiers": "public", "return": "", "signature": " SensorCoefficientFile()", "full_signature": "public  SensorCoefficientFile()", "class_method_signature": "SensorCoefficientFile.SensorCoefficientFile()", "testcase": false, "constructor": true}, {"identifier": "readFile", "parameters": "(String fileName)", "modifiers": "public", "return": "void", "signature": "void readFile(String fileName)", "full_signature": "public void readFile(String fileName)", "class_method_signature": "SensorCoefficientFile.readFile(String fileName)", "testcase": false, "constructor": false}, {"identifier": "getAh2o", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getAh2o()", "full_signature": "public double getAh2o()", "class_method_signature": "SensorCoefficientFile.getAh2o()", "testcase": false, "constructor": false}, {"identifier": "getNh2o", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getNh2o()", "full_signature": "public double getNh2o()", "class_method_signature": "SensorCoefficientFile.getNh2o()", "testcase": false, "constructor": false}, {"identifier": "getAo3", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getAo3()", "full_signature": "public double getAo3()", "class_method_signature": "SensorCoefficientFile.getAo3()", "testcase": false, "constructor": false}, {"identifier": "getNo3", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getNo3()", "full_signature": "public double getNo3()", "class_method_signature": "SensorCoefficientFile.getNo3()", "testcase": false, "constructor": false}, {"identifier": "getAo2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getAo2()", "full_signature": "public double getAo2()", "class_method_signature": "SensorCoefficientFile.getAo2()", "testcase": false, "constructor": false}, {"identifier": "getNo2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getNo2()", "full_signature": "public double getNo2()", "class_method_signature": "SensorCoefficientFile.getNo2()", "testcase": false, "constructor": false}, {"identifier": "getPo2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getPo2()", "full_signature": "public double getPo2()", "class_method_signature": "SensorCoefficientFile.getPo2()", "testcase": false, "constructor": false}, {"identifier": "getAco2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getAco2()", "full_signature": "public double getAco2()", "class_method_signature": "SensorCoefficientFile.getAco2()", "testcase": false, "constructor": false}, {"identifier": "getNco2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getNco2()", "full_signature": "public double getNco2()", "class_method_signature": "SensorCoefficientFile.getNco2()", "testcase": false, "constructor": false}, {"identifier": "getPco2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getPco2()", "full_signature": "public double getPco2()", "class_method_signature": "SensorCoefficientFile.getPco2()", "testcase": false, "constructor": false}, {"identifier": "getAch4", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getAch4()", "full_signature": "public double getAch4()", "class_method_signature": "SensorCoefficientFile.getAch4()", "testcase": false, "constructor": false}, {"identifier": "getNch4", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getNch4()", "full_signature": "public double getNch4()", "class_method_signature": "SensorCoefficientFile.getNch4()", "testcase": false, "constructor": false}, {"identifier": "getPch4", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getPch4()", "full_signature": "public double getPch4()", "class_method_signature": "SensorCoefficientFile.getPch4()", "testcase": false, "constructor": false}, {"identifier": "getAno2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getAno2()", "full_signature": "public double getAno2()", "class_method_signature": "SensorCoefficientFile.getAno2()", "testcase": false, "constructor": false}, {"identifier": "getNno2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getNno2()", "full_signature": "public double getNno2()", "class_method_signature": "SensorCoefficientFile.getNno2()", "testcase": false, "constructor": false}, {"identifier": "getPno2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getPno2()", "full_signature": "public double getPno2()", "class_method_signature": "SensorCoefficientFile.getPno2()", "testcase": false, "constructor": false}, {"identifier": "getAco", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getAco()", "full_signature": "public double getAco()", "class_method_signature": "SensorCoefficientFile.getAco()", "testcase": false, "constructor": false}, {"identifier": "getNco", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getNco()", "full_signature": "public double getNco()", "class_method_signature": "SensorCoefficientFile.getNco()", "testcase": false, "constructor": false}, {"identifier": "getPco", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getPco()", "full_signature": "public double getPco()", "class_method_signature": "SensorCoefficientFile.getPco()", "testcase": false, "constructor": false}, {"identifier": "getA0s", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getA0s()", "full_signature": "public double getA0s()", "class_method_signature": "SensorCoefficientFile.getA0s()", "testcase": false, "constructor": false}, {"identifier": "getA1s", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getA1s()", "full_signature": "public double getA1s()", "class_method_signature": "SensorCoefficientFile.getA1s()", "testcase": false, "constructor": false}, {"identifier": "getA2s", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getA2s()", "full_signature": "public double getA2s()", "class_method_signature": "SensorCoefficientFile.getA2s()", "testcase": false, "constructor": false}, {"identifier": "getA3s", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getA3s()", "full_signature": "public double getA3s()", "class_method_signature": "SensorCoefficientFile.getA3s()", "testcase": false, "constructor": false}, {"identifier": "getA0T", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getA0T()", "full_signature": "public double getA0T()", "class_method_signature": "SensorCoefficientFile.getA0T()", "testcase": false, "constructor": false}, {"identifier": "getA1T", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getA1T()", "full_signature": "public double getA1T()", "class_method_signature": "SensorCoefficientFile.getA1T()", "testcase": false, "constructor": false}, {"identifier": "getA2T", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getA2T()", "full_signature": "public double getA2T()", "class_method_signature": "SensorCoefficientFile.getA2T()", "testcase": false, "constructor": false}, {"identifier": "getA3T", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getA3T()", "full_signature": "public double getA3T()", "class_method_signature": "SensorCoefficientFile.getA3T()", "testcase": false, "constructor": false}, {"identifier": "getTaur", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getTaur()", "full_signature": "public double getTaur()", "class_method_signature": "SensorCoefficientFile.getTaur()", "testcase": false, "constructor": false}, {"identifier": "getSr", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getSr()", "full_signature": "public double getSr()", "class_method_signature": "SensorCoefficientFile.getSr()", "testcase": false, "constructor": false}, {"identifier": "getA0taup", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getA0taup()", "full_signature": "public double getA0taup()", "class_method_signature": "SensorCoefficientFile.getA0taup()", "testcase": false, "constructor": false}, {"identifier": "getA1taup", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getA1taup()", "full_signature": "public double getA1taup()", "class_method_signature": "SensorCoefficientFile.getA1taup()", "testcase": false, "constructor": false}, {"identifier": "getWo", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getWo()", "full_signature": "public double getWo()", "class_method_signature": "SensorCoefficientFile.getWo()", "testcase": false, "constructor": false}, {"identifier": "getGc", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getGc()", "full_signature": "public double getGc()", "class_method_signature": "SensorCoefficientFile.getGc()", "testcase": false, "constructor": false}, {"identifier": "getA0P", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getA0P()", "full_signature": "public double getA0P()", "class_method_signature": "SensorCoefficientFile.getA0P()", "testcase": false, "constructor": false}, {"identifier": "getA1P", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getA1P()", "full_signature": "public double getA1P()", "class_method_signature": "SensorCoefficientFile.getA1P()", "testcase": false, "constructor": false}, {"identifier": "getA2P", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getA2P()", "full_signature": "public double getA2P()", "class_method_signature": "SensorCoefficientFile.getA2P()", "testcase": false, "constructor": false}, {"identifier": "getA3P", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getA3P()", "full_signature": "public double getA3P()", "class_method_signature": "SensorCoefficientFile.getA3P()", "testcase": false, "constructor": false}, {"identifier": "getA4P", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getA4P()", "full_signature": "public double getA4P()", "class_method_signature": "SensorCoefficientFile.getA4P()", "testcase": false, "constructor": false}, {"identifier": "getRest1", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRest1()", "full_signature": "public double getRest1()", "class_method_signature": "SensorCoefficientFile.getRest1()", "testcase": false, "constructor": false}, {"identifier": "getRest2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRest2()", "full_signature": "public double getRest2()", "class_method_signature": "SensorCoefficientFile.getRest2()", "testcase": false, "constructor": false}, {"identifier": "getRest3", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRest3()", "full_signature": "public double getRest3()", "class_method_signature": "SensorCoefficientFile.getRest3()", "testcase": false, "constructor": false}, {"identifier": "getRest4", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRest4()", "full_signature": "public double getRest4()", "class_method_signature": "SensorCoefficientFile.getRest4()", "testcase": false, "constructor": false}, {"identifier": "getResr1", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getResr1()", "full_signature": "public double getResr1()", "class_method_signature": "SensorCoefficientFile.getResr1()", "testcase": false, "constructor": false}, {"identifier": "getResr2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getResr2()", "full_signature": "public double getResr2()", "class_method_signature": "SensorCoefficientFile.getResr2()", "testcase": false, "constructor": false}, {"identifier": "getResr3", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getResr3()", "full_signature": "public double getResr3()", "class_method_signature": "SensorCoefficientFile.getResr3()", "testcase": false, "constructor": false}, {"identifier": "getResa1", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getResa1()", "full_signature": "public double getResa1()", "class_method_signature": "SensorCoefficientFile.getResa1()", "testcase": false, "constructor": false}, {"identifier": "getResa2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getResa2()", "full_signature": "public double getResa2()", "class_method_signature": "SensorCoefficientFile.getResa2()", "testcase": false, "constructor": false}, {"identifier": "getResa3", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getResa3()", "full_signature": "public double getResa3()", "class_method_signature": "SensorCoefficientFile.getResa3()", "testcase": false, "constructor": false}, {"identifier": "getResa4", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getResa4()", "full_signature": "public double getResa4()", "class_method_signature": "SensorCoefficientFile.getResa4()", "testcase": false, "constructor": false}, {"identifier": "scan", "parameters": "(File coeffFile)", "modifiers": "private", "return": "void", "signature": "void scan(File coeffFile)", "full_signature": "private void scan(File coeffFile)", "class_method_signature": "SensorCoefficientFile.scan(File coeffFile)", "testcase": false, "constructor": false}, {"identifier": "getNextCoefficient", "parameters": "(StreamTokenizer tokenizer)", "modifiers": "private static", "return": "double", "signature": "double getNextCoefficient(StreamTokenizer tokenizer)", "full_signature": "private static double getNextCoefficient(StreamTokenizer tokenizer)", "class_method_signature": "SensorCoefficientFile.getNextCoefficient(StreamTokenizer tokenizer)", "testcase": false, "constructor": false}], "file": "s3tbx-meris-smac/src/main/java/org/esa/s3tbx/smac/SensorCoefficientFile.java"}, "focal_method": {"identifier": "readFile", "parameters": "(String fileName)", "modifiers": "public", "return": "void", "body": "public void readFile(String fileName) throws IllegalArgumentException, IOException {\n        Guardian.assertNotNull(\"fileName\", fileName);\n        File coeffFile = new File(fileName);\n\n        // check if file is available\n        if (!coeffFile.exists() || !coeffFile.isFile()) {\n            throw new FileNotFoundException();\n        }\n\n        scan(coeffFile);\n    }", "signature": "void readFile(String fileName)", "full_signature": "public void readFile(String fileName)", "class_method_signature": "SensorCoefficientFile.readFile(String fileName)", "testcase": false, "constructor": false, "invocations": ["assertNotNull", "exists", "isFile", "scan"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}