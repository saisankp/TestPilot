{"test_class": {"identifier": "ReceiptDatabaseAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int ID = 5;", "modifier": "private static final", "type": "int", "declarator": "ID = 5", "var_name": "ID"}, {"original_string": "private static final UUID RECEIPT_UUID = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "RECEIPT_UUID = UUID.randomUUID()", "var_name": "RECEIPT_UUID"}, {"original_string": "private static final int PARENT_TRIP_ID = 128;", "modifier": "private static final", "type": "int", "declarator": "PARENT_TRIP_ID = 128", "var_name": "PARENT_TRIP_ID"}, {"original_string": "private static final File PARENT_DIR = new File(System.getProperty(\"java.io.tmpdir\"), \"Trip\");", "modifier": "private static final", "type": "File", "declarator": "PARENT_DIR = new File(System.getProperty(\"java.io.tmpdir\"), \"Trip\")", "var_name": "PARENT_DIR"}, {"original_string": "private static final File RECEIPT_FILE = new File(PARENT_DIR, \"Image.jpg\");", "modifier": "private static final", "type": "File", "declarator": "RECEIPT_FILE = new File(PARENT_DIR, \"Image.jpg\")", "var_name": "RECEIPT_FILE"}, {"original_string": "private static final String NAME = \"Name\";", "modifier": "private static final", "type": "String", "declarator": "NAME = \"Name\"", "var_name": "NAME"}, {"original_string": "private static final int CATEGORY_ID = 15;", "modifier": "private static final", "type": "int", "declarator": "CATEGORY_ID = 15", "var_name": "CATEGORY_ID"}, {"original_string": "private static final String CATEGORY_NAME = \"Category\";", "modifier": "private static final", "type": "String", "declarator": "CATEGORY_NAME = \"Category\"", "var_name": "CATEGORY_NAME"}, {"original_string": "private static final UUID CATEGORY_UUID = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "CATEGORY_UUID = UUID.randomUUID()", "var_name": "CATEGORY_UUID"}, {"original_string": "private static final Category CATEGORY = new Category(CATEGORY_ID, CATEGORY_UUID, CATEGORY_NAME, \"code\");", "modifier": "private static final", "type": "Category", "declarator": "CATEGORY = new Category(CATEGORY_ID, CATEGORY_UUID, CATEGORY_NAME, \"code\")", "var_name": "CATEGORY"}, {"original_string": "private static final double PRICE = 12.55d;", "modifier": "private static final", "type": "double", "declarator": "PRICE = 12.55d", "var_name": "PRICE"}, {"original_string": "private static final double TAX = 2.50d;", "modifier": "private static final", "type": "double", "declarator": "TAX = 2.50d", "var_name": "TAX"}, {"original_string": "private static final double TAX2 = 2.80d;", "modifier": "private static final", "type": "double", "declarator": "TAX2 = 2.80d", "var_name": "TAX2"}, {"original_string": "private static final String CURRENCY_CODE = \"USD\";", "modifier": "private static final", "type": "String", "declarator": "CURRENCY_CODE = \"USD\"", "var_name": "CURRENCY_CODE"}, {"original_string": "private static final double EXCHANGE_RATE_FOR_USD = 1.00d;", "modifier": "private static final", "type": "double", "declarator": "EXCHANGE_RATE_FOR_USD = 1.00d", "var_name": "EXCHANGE_RATE_FOR_USD"}, {"original_string": "private static final ExchangeRate EXCHANGE_RATE = new ExchangeRate(CURRENCY_CODE, Collections.singletonMap(CURRENCY_CODE, EXCHANGE_RATE_FOR_USD));", "modifier": "private static final", "type": "ExchangeRate", "declarator": "EXCHANGE_RATE = new ExchangeRate(CURRENCY_CODE, Collections.singletonMap(CURRENCY_CODE, EXCHANGE_RATE_FOR_USD))", "var_name": "EXCHANGE_RATE"}, {"original_string": "private static final long DATE = 1409703721000L;", "modifier": "private static final", "type": "long", "declarator": "DATE = 1409703721000L", "var_name": "DATE"}, {"original_string": "private static final long CUSTOM_ORDER_ID = 16316000L;", "modifier": "private static final", "type": "long", "declarator": "CUSTOM_ORDER_ID = 16316000L", "var_name": "CUSTOM_ORDER_ID"}, {"original_string": "private static final String TIMEZONE = TimeZone.getDefault().getID();", "modifier": "private static final", "type": "String", "declarator": "TIMEZONE = TimeZone.getDefault().getID()", "var_name": "TIMEZONE"}, {"original_string": "private static final String COMMENT = \"Comment\";", "modifier": "private static final", "type": "String", "declarator": "COMMENT = \"Comment\"", "var_name": "COMMENT"}, {"original_string": "private static final boolean REIMBURSABLE = true;", "modifier": "private static final", "type": "boolean", "declarator": "REIMBURSABLE = true", "var_name": "REIMBURSABLE"}, {"original_string": "private static final int PAYMENT_METHOD_ID = 2;", "modifier": "private static final", "type": "int", "declarator": "PAYMENT_METHOD_ID = 2", "var_name": "PAYMENT_METHOD_ID"}, {"original_string": "private static final UUID PAYMENT_METHOD_UUID = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "PAYMENT_METHOD_UUID = UUID.randomUUID()", "var_name": "PAYMENT_METHOD_UUID"}, {"original_string": "private static final int DESCENDING_INDEX = 3;", "modifier": "private static final", "type": "int", "declarator": "DESCENDING_INDEX = 3", "var_name": "DESCENDING_INDEX"}, {"original_string": "private static final int ASCENDING_INDEX = 2;", "modifier": "private static final", "type": "int", "declarator": "ASCENDING_INDEX = 2", "var_name": "ASCENDING_INDEX"}, {"original_string": "private static final int CURSOR_COUNT = 4;", "modifier": "private static final", "type": "int", "declarator": "CURSOR_COUNT = 4", "var_name": "CURSOR_COUNT"}, {"original_string": "private static final PaymentMethod PAYMENT_METHOD = new PaymentMethod(PAYMENT_METHOD_ID, PAYMENT_METHOD_UUID, \"method\", false);", "modifier": "private static final", "type": "PaymentMethod", "declarator": "PAYMENT_METHOD = new PaymentMethod(PAYMENT_METHOD_ID, PAYMENT_METHOD_UUID, \"method\", false)", "var_name": "PAYMENT_METHOD"}, {"original_string": "private static final boolean FULL_PAGE = true;", "modifier": "private static final", "type": "boolean", "declarator": "FULL_PAGE = true", "var_name": "FULL_PAGE"}, {"original_string": "private static final boolean NAME_HIDDEN_FROM_AUTO_COMPLETE = false;", "modifier": "private static final", "type": "boolean", "declarator": "NAME_HIDDEN_FROM_AUTO_COMPLETE = false", "var_name": "NAME_HIDDEN_FROM_AUTO_COMPLETE"}, {"original_string": "private static final boolean COMMENT_HIDDEN_FROM_AUTO_COMPLETE = false;", "modifier": "private static final", "type": "boolean", "declarator": "COMMENT_HIDDEN_FROM_AUTO_COMPLETE = false", "var_name": "COMMENT_HIDDEN_FROM_AUTO_COMPLETE"}, {"original_string": "private static final String EXTRA1 = \"extra1\";", "modifier": "private static final", "type": "String", "declarator": "EXTRA1 = \"extra1\"", "var_name": "EXTRA1"}, {"original_string": "private static final String EXTRA2 = \"extra2\";", "modifier": "private static final", "type": "String", "declarator": "EXTRA2 = \"extra2\"", "var_name": "EXTRA2"}, {"original_string": "private static final String EXTRA3 = \"extra3\";", "modifier": "private static final", "type": "String", "declarator": "EXTRA3 = \"extra3\"", "var_name": "EXTRA3"}, {"original_string": "ReceiptDatabaseAdapter mReceiptDatabaseAdapter;", "modifier": "", "type": "ReceiptDatabaseAdapter", "declarator": "mReceiptDatabaseAdapter", "var_name": "mReceiptDatabaseAdapter"}, {"original_string": "@Mock\n    Table<Trip> mTripsTable;", "modifier": "@Mock", "type": "Table<Trip>", "declarator": "mTripsTable", "var_name": "mTripsTable"}, {"original_string": "@Mock\n    Table<PaymentMethod> mPaymentMethodsTable;", "modifier": "@Mock", "type": "Table<PaymentMethod>", "declarator": "mPaymentMethodsTable", "var_name": "mPaymentMethodsTable"}, {"original_string": "@Mock\n    Table<Category> mCategoriesTable;", "modifier": "@Mock", "type": "Table<Category>", "declarator": "mCategoriesTable", "var_name": "mCategoriesTable"}, {"original_string": "@Mock\n    StorageManager mStorageManager;", "modifier": "@Mock", "type": "StorageManager", "declarator": "mStorageManager", "var_name": "mStorageManager"}, {"original_string": "@Mock\n    Trip mTrip;", "modifier": "@Mock", "type": "Trip", "declarator": "mTrip", "var_name": "mTrip"}, {"original_string": "@Mock\n    Cursor mCursor;", "modifier": "@Mock", "type": "Cursor", "declarator": "mCursor", "var_name": "mCursor"}, {"original_string": "@Mock\n    Receipt mReceipt;", "modifier": "@Mock", "type": "Receipt", "declarator": "mReceipt", "var_name": "mReceipt"}, {"original_string": "@Mock\n    Price mPrice, mTax, mTax2;", "modifier": "@Mock", "type": "Price", "declarator": "mPrice", "var_name": "mPrice"}, {"original_string": "@Mock\n    SyncStateAdapter mSyncStateAdapter;", "modifier": "@Mock", "type": "SyncStateAdapter", "declarator": "mSyncStateAdapter", "var_name": "mSyncStateAdapter"}, {"original_string": "@Mock\n    SyncState mSyncState, mGetSyncState;", "modifier": "@Mock", "type": "SyncState", "declarator": "mSyncState", "var_name": "mSyncState"}, {"original_string": "@Mock\n    AutoCompleteMetadata mAutoCompleteMetadata;", "modifier": "@Mock", "type": "AutoCompleteMetadata", "declarator": "mAutoCompleteMetadata", "var_name": "mAutoCompleteMetadata"}], "file": "app/src/test/java/co/smartreceipts/android/persistence/database/tables/adapters/ReceiptDatabaseAdapterTest.java"}, "test_case": {"identifier": "write", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void write() throws Exception {\n        final String sync = \"sync\";\n        final ContentValues syncValues = new ContentValues();\n        syncValues.put(sync, sync);\n        when(mSyncStateAdapter.write(mSyncState)).thenReturn(syncValues);\n\n        final ContentValues contentValues = mReceiptDatabaseAdapter.write(mReceipt, new DatabaseOperationMetadata(OperationFamilyType.Sync));\n\n        // Note: Full page is backwards in the database\n        assertEquals(RECEIPT_FILE.getName(), contentValues.getAsString(ReceiptsTable.COLUMN_PATH));\n        assertEquals(NAME, contentValues.getAsString(ReceiptsTable.COLUMN_NAME));\n        assertTrue(PARENT_TRIP_ID == contentValues.getAsInteger(ReceiptsTable.COLUMN_PARENT_TRIP_ID));\n        assertEquals(CATEGORY_ID, (int) contentValues.getAsInteger(ReceiptsTable.COLUMN_CATEGORY_ID));\n        assertEquals(PRICE, contentValues.getAsDouble(ReceiptsTable.COLUMN_PRICE), 0.0001d);\n        assertEquals(TAX, contentValues.getAsDouble(ReceiptsTable.COLUMN_TAX), 0.0001d);\n        assertEquals(TAX2, contentValues.getAsDouble(ReceiptsTable.COLUMN_TAX2), 0.0001d);\n        assertEquals(EXCHANGE_RATE_FOR_USD, contentValues.getAsDouble(ReceiptsTable.COLUMN_EXCHANGE_RATE), 0.0001d);\n        assertEquals(DATE, (long) contentValues.getAsLong(ReceiptsTable.COLUMN_DATE));\n        assertEquals(TIMEZONE, contentValues.getAsString(ReceiptsTable.COLUMN_TIMEZONE));\n        assertEquals(COMMENT, contentValues.getAsString(ReceiptsTable.COLUMN_COMMENT));\n        assertEquals(REIMBURSABLE, contentValues.getAsBoolean(ReceiptsTable.COLUMN_REIMBURSABLE));\n        assertEquals(CURRENCY_CODE, contentValues.getAsString(ReceiptsTable.COLUMN_ISO4217));\n        assertEquals(PAYMENT_METHOD_ID, (int) contentValues.getAsInteger(ReceiptsTable.COLUMN_PAYMENT_METHOD_ID));\n        assertEquals(!FULL_PAGE, contentValues.getAsBoolean(ReceiptsTable.COLUMN_NOTFULLPAGEIMAGE));\n        assertEquals(NAME_HIDDEN_FROM_AUTO_COMPLETE, contentValues.getAsBoolean(ReceiptsTable.COLUMN_NAME_HIDDEN_AUTO_COMPLETE));\n        assertEquals(COMMENT_HIDDEN_FROM_AUTO_COMPLETE, contentValues.getAsBoolean(ReceiptsTable.COLUMN_COMMENT_HIDDEN_AUTO_COMPLETE));\n        assertEquals(EXTRA1, contentValues.getAsString(ReceiptsTable.COLUMN_EXTRA_EDITTEXT_1));\n        assertEquals(EXTRA2, contentValues.getAsString(ReceiptsTable.COLUMN_EXTRA_EDITTEXT_2));\n        assertEquals(EXTRA3, contentValues.getAsString(ReceiptsTable.COLUMN_EXTRA_EDITTEXT_3));\n        assertEquals(CUSTOM_ORDER_ID, (long) contentValues.getAsLong(ReceiptsTable.COLUMN_CUSTOM_ORDER_ID));\n        assertEquals(RECEIPT_UUID.toString(), contentValues.getAsString(ReceiptsTable.COLUMN_UUID));\n        assertEquals(sync, contentValues.getAsString(sync));\n        assertFalse(contentValues.containsKey(ReceiptsTable.COLUMN_ID));\n    }", "signature": "void write()", "full_signature": "@Test public void write()", "class_method_signature": "ReceiptDatabaseAdapterTest.write()", "testcase": true, "constructor": false, "invocations": ["put", "thenReturn", "when", "write", "write", "assertEquals", "getName", "getAsString", "assertEquals", "getAsString", "assertTrue", "getAsInteger", "assertEquals", "getAsInteger", "assertEquals", "getAsDouble", "assertEquals", "getAsDouble", "assertEquals", "getAsDouble", "assertEquals", "getAsDouble", "assertEquals", "getAsLong", "assertEquals", "getAsString", "assertEquals", "getAsString", "assertEquals", "getAsBoolean", "assertEquals", "getAsString", "assertEquals", "getAsInteger", "assertEquals", "getAsBoolean", "assertEquals", "getAsBoolean", "assertEquals", "getAsBoolean", "assertEquals", "getAsString", "assertEquals", "getAsString", "assertEquals", "getAsString", "assertEquals", "getAsLong", "assertEquals", "toString", "getAsString", "assertEquals", "getAsString", "assertFalse", "containsKey"]}, "focal_class": {"identifier": "ReceiptDatabaseAdapter", "superclass": "", "interfaces": "implements SelectionBackedDatabaseAdapter<Receipt, Trip>", "fields": [{"original_string": "private final Table<Trip> mTripsTable;", "modifier": "private final", "type": "Table<Trip>", "declarator": "mTripsTable", "var_name": "mTripsTable"}, {"original_string": "private final Table<PaymentMethod> mPaymentMethodTable;", "modifier": "private final", "type": "Table<PaymentMethod>", "declarator": "mPaymentMethodTable", "var_name": "mPaymentMethodTable"}, {"original_string": "private final Table<Category> mCategoriesTable;", "modifier": "private final", "type": "Table<Category>", "declarator": "mCategoriesTable", "var_name": "mCategoriesTable"}, {"original_string": "private final StorageManager mStorageManager;", "modifier": "private final", "type": "StorageManager", "declarator": "mStorageManager", "var_name": "mStorageManager"}, {"original_string": "private final SyncStateAdapter mSyncStateAdapter;", "modifier": "private final", "type": "SyncStateAdapter", "declarator": "mSyncStateAdapter", "var_name": "mSyncStateAdapter"}], "methods": [{"identifier": "ReceiptDatabaseAdapter", "parameters": "(@NonNull Table<Trip> tripsTable, @NonNull Table<PaymentMethod> paymentMethodTable,\n                                  @NonNull Table<Category> categoriesTable, @NonNull StorageManager storageManager)", "modifiers": "public", "return": "", "signature": " ReceiptDatabaseAdapter(@NonNull Table<Trip> tripsTable, @NonNull Table<PaymentMethod> paymentMethodTable,\n                                  @NonNull Table<Category> categoriesTable, @NonNull StorageManager storageManager)", "full_signature": "public  ReceiptDatabaseAdapter(@NonNull Table<Trip> tripsTable, @NonNull Table<PaymentMethod> paymentMethodTable,\n                                  @NonNull Table<Category> categoriesTable, @NonNull StorageManager storageManager)", "class_method_signature": "ReceiptDatabaseAdapter.ReceiptDatabaseAdapter(@NonNull Table<Trip> tripsTable, @NonNull Table<PaymentMethod> paymentMethodTable,\n                                  @NonNull Table<Category> categoriesTable, @NonNull StorageManager storageManager)", "testcase": false, "constructor": true}, {"identifier": "ReceiptDatabaseAdapter", "parameters": "(@NonNull Table<Trip> tripsTable, @NonNull Table<PaymentMethod> paymentMethodTable,\n                                  @NonNull Table<Category> categoriesTable, @NonNull StorageManager storageManager,\n                                  @NonNull SyncStateAdapter syncStateAdapter)", "modifiers": "public", "return": "", "signature": " ReceiptDatabaseAdapter(@NonNull Table<Trip> tripsTable, @NonNull Table<PaymentMethod> paymentMethodTable,\n                                  @NonNull Table<Category> categoriesTable, @NonNull StorageManager storageManager,\n                                  @NonNull SyncStateAdapter syncStateAdapter)", "full_signature": "public  ReceiptDatabaseAdapter(@NonNull Table<Trip> tripsTable, @NonNull Table<PaymentMethod> paymentMethodTable,\n                                  @NonNull Table<Category> categoriesTable, @NonNull StorageManager storageManager,\n                                  @NonNull SyncStateAdapter syncStateAdapter)", "class_method_signature": "ReceiptDatabaseAdapter.ReceiptDatabaseAdapter(@NonNull Table<Trip> tripsTable, @NonNull Table<PaymentMethod> paymentMethodTable,\n                                  @NonNull Table<Category> categoriesTable, @NonNull StorageManager storageManager,\n                                  @NonNull SyncStateAdapter syncStateAdapter)", "testcase": false, "constructor": true}, {"identifier": "read", "parameters": "(@NonNull Cursor cursor)", "modifiers": "@NonNull @Override public", "return": "Receipt", "signature": "Receipt read(@NonNull Cursor cursor)", "full_signature": "@NonNull @Override public Receipt read(@NonNull Cursor cursor)", "class_method_signature": "ReceiptDatabaseAdapter.read(@NonNull Cursor cursor)", "testcase": false, "constructor": false}, {"identifier": "readForSelection", "parameters": "(@NonNull Cursor cursor, @NonNull Trip trip, boolean isDescending)", "modifiers": "@NonNull @Override public", "return": "Receipt", "signature": "Receipt readForSelection(@NonNull Cursor cursor, @NonNull Trip trip, boolean isDescending)", "full_signature": "@NonNull @Override public Receipt readForSelection(@NonNull Cursor cursor, @NonNull Trip trip, boolean isDescending)", "class_method_signature": "ReceiptDatabaseAdapter.readForSelection(@NonNull Cursor cursor, @NonNull Trip trip, boolean isDescending)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(@NonNull Receipt receipt, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@NonNull @Override public", "return": "ContentValues", "signature": "ContentValues write(@NonNull Receipt receipt, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@NonNull @Override public ContentValues write(@NonNull Receipt receipt, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "ReceiptDatabaseAdapter.write(@NonNull Receipt receipt, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(@NonNull Receipt receipt, int primaryKey,\n                         @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@NonNull @Override public", "return": "Receipt", "signature": "Receipt build(@NonNull Receipt receipt, int primaryKey,\n                         @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@NonNull @Override public Receipt build(@NonNull Receipt receipt, int primaryKey,\n                         @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "ReceiptDatabaseAdapter.build(@NonNull Receipt receipt, int primaryKey,\n                         @NonNull UUID uuid, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/persistence/database/tables/adapters/ReceiptDatabaseAdapter.java"}, "focal_method": {"identifier": "write", "parameters": "(@NonNull Receipt receipt, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "modifiers": "@NonNull @Override public", "return": "ContentValues", "body": "@NonNull\n    @Override\n    public ContentValues write(@NonNull Receipt receipt, @NonNull DatabaseOperationMetadata databaseOperationMetadata) {\n        final ContentValues values = new ContentValues();\n\n        // Add core data\n        values.put(ReceiptsTable.COLUMN_PARENT_TRIP_ID, receipt.getTrip().getId());\n        values.put(ReceiptsTable.COLUMN_NAME, receipt.getName().trim());\n        values.put(ReceiptsTable.COLUMN_CATEGORY_ID, receipt.getCategory().getId());\n        values.put(ReceiptsTable.COLUMN_DATE, receipt.getDate().getTime());\n        values.put(ReceiptsTable.COLUMN_TIMEZONE, receipt.getTimeZone().getID());\n        values.put(ReceiptsTable.COLUMN_COMMENT, receipt.getComment());\n        values.put(ReceiptsTable.COLUMN_ISO4217, receipt.getPrice().getCurrencyCode());\n        values.put(ReceiptsTable.COLUMN_REIMBURSABLE, receipt.isReimbursable());\n        values.put(ReceiptsTable.COLUMN_NOTFULLPAGEIMAGE, !receipt.isFullPage());\n        values.put(ReceiptsTable.COLUMN_UUID, receipt.getUuid().toString());\n        values.put(ReceiptsTable.COLUMN_NAME_HIDDEN_AUTO_COMPLETE, receipt.getAutoCompleteMetadata().isNameHiddenFromAutoComplete());\n        values.put(ReceiptsTable.COLUMN_COMMENT_HIDDEN_AUTO_COMPLETE, receipt.getAutoCompleteMetadata().isCommentHiddenFromAutoComplete());\n\n        // Add file\n        final File file = receipt.getFile();\n        if (file != null) {\n            values.put(ReceiptsTable.COLUMN_PATH, file.getName());\n        } else {\n            values.put(ReceiptsTable.COLUMN_PATH, (String) null);\n        }\n\n        // Add payment method if one exists\n        values.put(ReceiptsTable.COLUMN_PAYMENT_METHOD_ID, receipt.getPaymentMethod().getId());\n\n\n        // Note: We replace the commas here with decimals to avoid database bugs around parsing decimal values\n        // TODO: Ensure this logic works for prices like \"1,234.56\"\n        values.put(ReceiptsTable.COLUMN_PRICE, receipt.getPrice().getPrice().doubleValue());\n        values.put(ReceiptsTable.COLUMN_TAX, receipt.getTax().getPrice().doubleValue());\n        values.put(ReceiptsTable.COLUMN_TAX2, receipt.getTax2().getPrice().doubleValue());\n        final BigDecimal exchangeRate = receipt.getPrice().getExchangeRate().getExchangeRate(receipt.getTrip().getDefaultCurrencyCode());\n        if (exchangeRate != null) {\n            values.put(ReceiptsTable.COLUMN_EXCHANGE_RATE, exchangeRate.doubleValue());\n        }\n\n        // Add extras\n        values.put(ReceiptsTable.COLUMN_EXTRA_EDITTEXT_1, receipt.getExtraEditText1());\n        values.put(ReceiptsTable.COLUMN_EXTRA_EDITTEXT_2, receipt.getExtraEditText2());\n        values.put(ReceiptsTable.COLUMN_EXTRA_EDITTEXT_3, receipt.getExtraEditText3());\n        if (databaseOperationMetadata.getOperationFamilyType() == OperationFamilyType.Sync) {\n            values.putAll(mSyncStateAdapter.write(receipt.getSyncState()));\n        } else {\n            values.putAll(mSyncStateAdapter.writeUnsynced(receipt.getSyncState()));\n        }\n\n        values.put(ReceiptsTable.COLUMN_CUSTOM_ORDER_ID, receipt.getCustomOrderId());\n\n        return values;\n    }", "signature": "ContentValues write(@NonNull Receipt receipt, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "full_signature": "@NonNull @Override public ContentValues write(@NonNull Receipt receipt, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "class_method_signature": "ReceiptDatabaseAdapter.write(@NonNull Receipt receipt, @NonNull DatabaseOperationMetadata databaseOperationMetadata)", "testcase": false, "constructor": false, "invocations": ["put", "getId", "getTrip", "put", "trim", "getName", "put", "getId", "getCategory", "put", "getTime", "getDate", "put", "getID", "getTimeZone", "put", "getComment", "put", "getCurrencyCode", "getPrice", "put", "isReimbursable", "put", "isFullPage", "put", "toString", "getUuid", "put", "isNameHiddenFromAutoComplete", "getAutoCompleteMetadata", "put", "isCommentHiddenFromAutoComplete", "getAutoCompleteMetadata", "getFile", "put", "getName", "put", "put", "getId", "getPaymentMethod", "put", "doubleValue", "getPrice", "getPrice", "put", "doubleValue", "getPrice", "getTax", "put", "doubleValue", "getPrice", "getTax2", "getExchangeRate", "getExchangeRate", "getPrice", "getDefaultCurrencyCode", "getTrip", "put", "doubleValue", "put", "getExtraEditText1", "put", "getExtraEditText2", "put", "getExtraEditText3", "getOperationFamilyType", "putAll", "write", "getSyncState", "putAll", "writeUnsynced", "getSyncState", "put", "getCustomOrderId"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}