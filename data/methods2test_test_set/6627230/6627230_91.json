{"test_class": {"identifier": "JdbcDataSourceDescriptorManagerTest", "superclass": "extends ComponentTestCase", "interfaces": "", "fields": [], "file": "dal-jdbc/src/test/java/org/unidal/dal/jdbc/datasource/JdbcDataSourceDescriptorManagerTest.java"}, "test_case": {"identifier": "testStatic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testStatic() throws Exception {\n      JdbcDataSourceDescriptorManager manager = lookup(JdbcDataSourceDescriptorManager.class);\n      JdbcDataSourceDescriptor user = manager.getDescriptor(\"user\");\n      JdbcDataSourceDescriptor history = manager.getDescriptor(\"history\");\n\n      checkProperty(user, \"user\", \"user\");\n      checkProperty(user, \"url\", \"jdbc:mysql://localhost:3306/user?useUnicode=true&autoReconnect=true\");\n\n      checkProperty(history, \"user\", \"history\");\n      checkProperty(history, \"url\", \"jdbc:mysql://localhost:3306/history?useUnicode=true&autoReconnect=true\");\n\n      checkNames(manager, \"jdbc-dal\", \"user\", \"history\");\n   }", "signature": "void testStatic()", "full_signature": "@Test public void testStatic()", "class_method_signature": "JdbcDataSourceDescriptorManagerTest.testStatic()", "testcase": true, "constructor": false, "invocations": ["lookup", "getDescriptor", "getDescriptor", "checkProperty", "checkProperty", "checkProperty", "checkProperty", "checkNames"]}, "focal_class": {"identifier": "JdbcDataSourceDescriptorManager", "superclass": "extends ContainerHolder", "interfaces": "implements Initializable", "fields": [{"original_string": "private Map<String, JdbcDataSourceDescriptor> m_descriptors = new HashMap<String, JdbcDataSourceDescriptor>();", "modifier": "private", "type": "Map<String, JdbcDataSourceDescriptor>", "declarator": "m_descriptors = new HashMap<String, JdbcDataSourceDescriptor>()", "var_name": "m_descriptors"}, {"original_string": "private List<DataSourceProvider> m_providers;", "modifier": "private", "type": "List<DataSourceProvider>", "declarator": "m_providers", "var_name": "m_providers"}, {"original_string": "private String m_datasourceFile;", "modifier": "private", "type": "String", "declarator": "m_datasourceFile", "var_name": "m_datasourceFile"}], "methods": [{"identifier": "buildDescriptor", "parameters": "(DataSourceDef ds)", "modifiers": "protected", "return": "JdbcDataSourceDescriptor", "signature": "JdbcDataSourceDescriptor buildDescriptor(DataSourceDef ds)", "full_signature": "protected JdbcDataSourceDescriptor buildDescriptor(DataSourceDef ds)", "class_method_signature": "JdbcDataSourceDescriptorManager.buildDescriptor(DataSourceDef ds)", "testcase": false, "constructor": false}, {"identifier": "findDataSource", "parameters": "(String id)", "modifiers": "private", "return": "DataSourceDef", "signature": "DataSourceDef findDataSource(String id)", "full_signature": "private DataSourceDef findDataSource(String id)", "class_method_signature": "JdbcDataSourceDescriptorManager.findDataSource(String id)", "testcase": false, "constructor": false}, {"identifier": "getDataSourceNames", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getDataSourceNames()", "full_signature": "public List<String> getDataSourceNames()", "class_method_signature": "JdbcDataSourceDescriptorManager.getDataSourceNames()", "testcase": false, "constructor": false}, {"identifier": "getDescriptor", "parameters": "(String id)", "modifiers": "public", "return": "JdbcDataSourceDescriptor", "signature": "JdbcDataSourceDescriptor getDescriptor(String id)", "full_signature": "public JdbcDataSourceDescriptor getDescriptor(String id)", "class_method_signature": "JdbcDataSourceDescriptorManager.getDescriptor(String id)", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void initialize()", "full_signature": "public void initialize()", "class_method_signature": "JdbcDataSourceDescriptorManager.initialize()", "testcase": false, "constructor": false}, {"identifier": "setDatasourceFile", "parameters": "(String datasourceFile)", "modifiers": "public", "return": "void", "signature": "void setDatasourceFile(String datasourceFile)", "full_signature": "public void setDatasourceFile(String datasourceFile)", "class_method_signature": "JdbcDataSourceDescriptorManager.setDatasourceFile(String datasourceFile)", "testcase": false, "constructor": false}, {"identifier": "toTime", "parameters": "(String source)", "modifiers": "protected", "return": "int", "signature": "int toTime(String source)", "full_signature": "protected int toTime(String source)", "class_method_signature": "JdbcDataSourceDescriptorManager.toTime(String source)", "testcase": false, "constructor": false}], "file": "dal-jdbc/src/main/java/org/unidal/dal/jdbc/datasource/JdbcDataSourceDescriptorManager.java"}, "focal_method": {"identifier": "getDescriptor", "parameters": "(String id)", "modifiers": "public", "return": "JdbcDataSourceDescriptor", "body": "public JdbcDataSourceDescriptor getDescriptor(String id) {\n      JdbcDataSourceDescriptor configuration = m_descriptors.get(id);\n\n      if (configuration == null) {\n         DataSourceDef ds = findDataSource(id);\n\n         if (ds != null) {\n            configuration = buildDescriptor(ds);\n            m_descriptors.put(id, configuration);\n         }\n      }\n\n      return configuration;\n   }", "signature": "JdbcDataSourceDescriptor getDescriptor(String id)", "full_signature": "public JdbcDataSourceDescriptor getDescriptor(String id)", "class_method_signature": "JdbcDataSourceDescriptorManager.getDescriptor(String id)", "testcase": false, "constructor": false, "invocations": ["get", "findDataSource", "buildDescriptor", "put"]}, "repository": {"repo_id": 6627230, "url": "https://github.com/unidal/frameworks", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 100, "size": 3009, "license": "licensed"}}