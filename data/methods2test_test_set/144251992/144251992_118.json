{"test_class": {"identifier": "VelocityMailTemplateServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private VelocityEngine velocityEngineMock;", "modifier": "@Mock\n    private", "type": "VelocityEngine", "declarator": "velocityEngineMock", "var_name": "velocityEngineMock"}, {"original_string": "@Mock\n    private Template velocityTemplateMock;", "modifier": "@Mock\n    private", "type": "Template", "declarator": "velocityTemplateMock", "var_name": "velocityTemplateMock"}, {"original_string": "private VelocityMailTemplateService velocityMailTemplateService;", "modifier": "private", "type": "VelocityMailTemplateService", "declarator": "velocityMailTemplateService", "var_name": "velocityMailTemplateService"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/adapter/mail/VelocityMailTemplateServiceTest.java"}, "test_case": {"identifier": "getSubjectAndTextReturnsExpectedSubjectAndText", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getSubjectAndTextReturnsExpectedSubjectAndText() {\n        // given\n        var expectedSubject = \"Cool subject!\";\n        var expectedText = \"Even cooler text!\";\n        var expectedResult = new Pair<>(expectedSubject, expectedText);\n        var templatePath = \"TestTemplate.vm\";\n        var templateContent = String.format(\"%s\\r\\n%s\\r\\n%s\\r\\n%s\",\n                VelocityMailTemplateService.SUBJECT_DELIMITER, expectedSubject,\n                VelocityMailTemplateService.TEXT_DELIMITER, expectedText);\n        var contextMap = Map.<String, Object>of(\"key\", \"value\");\n\n        given(velocityEngineMock.getTemplate(templatePath)).willReturn(velocityTemplateMock);\n        doAnswer(invocation -> {\n            var actualWriter = (StringWriter) invocation.getArgument(1);\n            actualWriter.append(templateContent);\n\n            return null;\n        }).when(velocityTemplateMock).merge(\n                argThat(new VelocityContextArgumentMatcher(contextMap)),\n                argThat(new StringWriterArgumentMatcher(\"\"))\n        );\n\n        // when\n        var actualResult = velocityMailTemplateService.getSubjectAndText(templatePath, contextMap);\n\n        // then\n        assertThat(actualResult).isEqualTo(expectedResult);\n    }", "signature": "void getSubjectAndTextReturnsExpectedSubjectAndText()", "full_signature": "@Test public void getSubjectAndTextReturnsExpectedSubjectAndText()", "class_method_signature": "VelocityMailTemplateServiceTest.getSubjectAndTextReturnsExpectedSubjectAndText()", "testcase": true, "constructor": false, "invocations": ["format", "of", "willReturn", "given", "getTemplate", "merge", "when", "doAnswer", "getArgument", "append", "argThat", "argThat", "getSubjectAndText", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "VelocityMailTemplateService", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String SUBJECT_DELIMITER = \"--!--SUBJECT--!--\";", "modifier": "static final", "type": "String", "declarator": "SUBJECT_DELIMITER = \"--!--SUBJECT--!--\"", "var_name": "SUBJECT_DELIMITER"}, {"original_string": "static final String TEXT_DELIMITER = \"--!--TEXT--!--\";", "modifier": "static final", "type": "String", "declarator": "TEXT_DELIMITER = \"--!--TEXT--!--\"", "var_name": "TEXT_DELIMITER"}, {"original_string": "private final VelocityEngine velocityEngine;", "modifier": "private final", "type": "VelocityEngine", "declarator": "velocityEngine", "var_name": "velocityEngine"}], "methods": [{"identifier": "VelocityMailTemplateService", "parameters": "(VelocityEngine velocityEngine)", "modifiers": "public", "return": "", "signature": " VelocityMailTemplateService(VelocityEngine velocityEngine)", "full_signature": "public  VelocityMailTemplateService(VelocityEngine velocityEngine)", "class_method_signature": "VelocityMailTemplateService.VelocityMailTemplateService(VelocityEngine velocityEngine)", "testcase": false, "constructor": true}, {"identifier": "mergeTemplate", "parameters": "(@NotNull String templatePath, Map<String, Object> contextMap)", "modifiers": "public", "return": "String", "signature": "String mergeTemplate(@NotNull String templatePath, Map<String, Object> contextMap)", "full_signature": "public String mergeTemplate(@NotNull String templatePath, Map<String, Object> contextMap)", "class_method_signature": "VelocityMailTemplateService.mergeTemplate(@NotNull String templatePath, Map<String, Object> contextMap)", "testcase": false, "constructor": false}, {"identifier": "getSubjectAndText", "parameters": "(@NotNull String templatePath, Map<String, Object> contextMap)", "modifiers": "public", "return": "Pair<String, String>", "signature": "Pair<String, String> getSubjectAndText(@NotNull String templatePath, Map<String, Object> contextMap)", "full_signature": "public Pair<String, String> getSubjectAndText(@NotNull String templatePath, Map<String, Object> contextMap)", "class_method_signature": "VelocityMailTemplateService.getSubjectAndText(@NotNull String templatePath, Map<String, Object> contextMap)", "testcase": false, "constructor": false}, {"identifier": "getSubStringBetweenDelimiters", "parameters": "(String origin, String firstDelimiter, String secondDelimiter)", "modifiers": "", "return": "String", "signature": "String getSubStringBetweenDelimiters(String origin, String firstDelimiter, String secondDelimiter)", "full_signature": " String getSubStringBetweenDelimiters(String origin, String firstDelimiter, String secondDelimiter)", "class_method_signature": "VelocityMailTemplateService.getSubStringBetweenDelimiters(String origin, String firstDelimiter, String secondDelimiter)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/adapter/mail/VelocityMailTemplateService.java"}, "focal_method": {"identifier": "getSubjectAndText", "parameters": "(@NotNull String templatePath, Map<String, Object> contextMap)", "modifiers": "public", "return": "Pair<String, String>", "body": "public Pair<String, String> getSubjectAndText(@NotNull String templatePath, Map<String, Object> contextMap) {\n        var unparsed = mergeTemplate(templatePath, contextMap);\n        var subject = getSubStringBetweenDelimiters(unparsed, SUBJECT_DELIMITER, TEXT_DELIMITER);\n        var text = getSubStringBetweenDelimiters(unparsed, TEXT_DELIMITER, null);\n\n        return new Pair<>(subject, text);\n    }", "signature": "Pair<String, String> getSubjectAndText(@NotNull String templatePath, Map<String, Object> contextMap)", "full_signature": "public Pair<String, String> getSubjectAndText(@NotNull String templatePath, Map<String, Object> contextMap)", "class_method_signature": "VelocityMailTemplateService.getSubjectAndText(@NotNull String templatePath, Map<String, Object> contextMap)", "testcase": false, "constructor": false, "invocations": ["mergeTemplate", "getSubStringBetweenDelimiters", "getSubStringBetweenDelimiters"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}