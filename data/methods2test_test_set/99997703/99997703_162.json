{"test_class": {"identifier": "SQLReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final File FILE = new File(\"src/test/SQLReaderTest.db\");", "modifier": "private static final", "type": "File", "declarator": "FILE = new File(\"src/test/SQLReaderTest.db\")", "var_name": "FILE"}, {"original_string": "private static final String TABLE_NAME = \"TABLE_NAME\";", "modifier": "private static final", "type": "String", "declarator": "TABLE_NAME = \"TABLE_NAME\"", "var_name": "TABLE_NAME"}, {"original_string": "private static final TestWritableToTable writable = setupTableToWrite();", "modifier": "private static final", "type": "TestWritableToTable", "declarator": "writable = setupTableToWrite()", "var_name": "writable"}, {"original_string": "private final SQLReader reader = new SQLReader();", "modifier": "private final", "type": "SQLReader", "declarator": "reader = new SQLReader()", "var_name": "reader"}], "file": "OcavaCore/src/test/java/com/ocadotechnology/tableio/sql/SQLReaderTest.java"}, "test_case": {"identifier": "testReadingFile", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testReadingFile() {\n        TestTableReader tableReader = new TestTableReader();\n\n        reader.read(tableReader, FILE.getAbsolutePath(), TABLE_NAME);\n\n        Assertions.assertEquals(writable.getLines(), tableReader.getLines());\n    }", "signature": "void testReadingFile()", "full_signature": "@Test void testReadingFile()", "class_method_signature": "SQLReaderTest.testReadingFile()", "testcase": true, "constructor": false, "invocations": ["read", "getAbsolutePath", "assertEquals", "getLines", "getLines"]}, "focal_class": {"identifier": "SQLReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(SQLReader.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SQLReader.class)", "var_name": "logger"}], "methods": [{"identifier": "read", "parameters": "(TableReader tableReader, String fileName, String tableName)", "modifiers": "public", "return": "void", "signature": "void read(TableReader tableReader, String fileName, String tableName)", "full_signature": "public void read(TableReader tableReader, String fileName, String tableName)", "class_method_signature": "SQLReader.read(TableReader tableReader, String fileName, String tableName)", "testcase": false, "constructor": false}], "file": "OcavaCore/src/main/java/com/ocadotechnology/tableio/sql/SQLReader.java"}, "focal_method": {"identifier": "read", "parameters": "(TableReader tableReader, String fileName, String tableName)", "modifiers": "public", "return": "void", "body": "public void read(TableReader tableReader, String fileName, String tableName) {\n        try (SQLiteConnection conn = SQLiteConnection.create(fileName)) {\n            ResultConsumer rowConsumer = new ResultConsumer(tableReader, tableName);\n\n            conn.consumeTable(tableName, rowConsumer);\n        } catch (SQLException e) {\n            logger.error(\"Failed to read SQL from table: \" + tableName, e);\n        }\n        tableReader.fileFinished();\n    }", "signature": "void read(TableReader tableReader, String fileName, String tableName)", "full_signature": "public void read(TableReader tableReader, String fileName, String tableName)", "class_method_signature": "SQLReader.read(TableReader tableReader, String fileName, String tableName)", "testcase": false, "constructor": false, "invocations": ["create", "consumeTable", "error", "fileFinished"]}, "repository": {"repo_id": 99997703, "url": "https://github.com/ocadotechnology/Ocava", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 16, "size": 1137, "license": "licensed"}}