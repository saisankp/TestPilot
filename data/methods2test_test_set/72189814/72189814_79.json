{"test_class": {"identifier": "HaloAuthenticatorTest", "superclass": "extends HaloRobolectricTest", "interfaces": "", "fields": [{"original_string": "private HaloSessionManager mSessionManager;", "modifier": "private", "type": "HaloSessionManager", "declarator": "mSessionManager", "var_name": "mSessionManager"}, {"original_string": "private HaloFramework mFramework;", "modifier": "private", "type": "HaloFramework", "declarator": "mFramework", "var_name": "mFramework"}, {"original_string": "private HaloAuthenticator mAuthenticator;", "modifier": "private", "type": "HaloAuthenticator", "declarator": "mAuthenticator", "var_name": "mAuthenticator"}, {"original_string": "private Halo mHalo;", "modifier": "private", "type": "Halo", "declarator": "mHalo", "var_name": "mHalo"}, {"original_string": "private MockServer mMockServer;", "modifier": "private", "type": "MockServer", "declarator": "mMockServer", "var_name": "mMockServer"}, {"original_string": "private CallbackFlag mCallbackFlag;", "modifier": "private", "type": "CallbackFlag", "declarator": "mCallbackFlag", "var_name": "mCallbackFlag"}], "file": "sdk/halo-sdk/src/test/java/com/mobgen/halo/android/sdk/core/management/authentication/HaloAuthenticatorTest.java"}, "test_case": {"identifier": "thatExpiredTokenRefreshAfterARequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void thatExpiredTokenRefreshAfterARequest() throws IOException {\n        enqueueServerFile(mMockServer, AUTHENTICATE);\n        Response response = givenA200Response();\n        Token expiredToken = givenAExpiredToken();\n        Session session = new Session(expiredToken);\n        mSessionManager.setSession(HaloAuthenticator.HALO_SESSION_NAME, session);\n        Request newRequest = mAuthenticator.authenticate(null, response);\n        assertThat(newRequest).isNotNull();\n        assertThat(newRequest.header(\"Authorization\")).contains(\"Bearer LSD4fw4NLBTESfF18tTVEST6q9vsaLW8tMfEGLJa\");\n    }", "signature": "void thatExpiredTokenRefreshAfterARequest()", "full_signature": "@Test public void thatExpiredTokenRefreshAfterARequest()", "class_method_signature": "HaloAuthenticatorTest.thatExpiredTokenRefreshAfterARequest()", "testcase": true, "constructor": false, "invocations": ["enqueueServerFile", "givenA200Response", "givenAExpiredToken", "setSession", "authenticate", "isNotNull", "assertThat", "contains", "assertThat", "header"]}, "focal_class": {"identifier": "HaloAuthenticator", "superclass": "", "interfaces": "implements Authenticator", "fields": [{"original_string": "@Keep\n    public static final String HALO_SESSION_NAME = \"halo-session\";", "modifier": "@Keep\n    public static final", "type": "String", "declarator": "HALO_SESSION_NAME = \"halo-session\"", "var_name": "HALO_SESSION_NAME"}, {"original_string": "public static final String AUTHENTICATION_HEADER = \"Authorization\";", "modifier": "public static final", "type": "String", "declarator": "AUTHENTICATION_HEADER = \"Authorization\"", "var_name": "AUTHENTICATION_HEADER"}, {"original_string": "@NonNull\n    private HaloSessionManager mSessionManager;", "modifier": "@NonNull\n    private", "type": "HaloSessionManager", "declarator": "mSessionManager", "var_name": "mSessionManager"}, {"original_string": "@NonNull\n    private final HaloFramework mFramework;", "modifier": "@NonNull\n    private final", "type": "HaloFramework", "declarator": "mFramework", "var_name": "mFramework"}, {"original_string": "private Credentials mClientCredentials;", "modifier": "private", "type": "Credentials", "declarator": "mClientCredentials", "var_name": "mClientCredentials"}, {"original_string": "private Credentials mUserCredentials;", "modifier": "private", "type": "Credentials", "declarator": "mUserCredentials", "var_name": "mUserCredentials"}, {"original_string": "private HaloManagerApi mManagementApi;", "modifier": "private", "type": "HaloManagerApi", "declarator": "mManagementApi", "var_name": "mManagementApi"}, {"original_string": "private AuthenticationRecover mAuthenticationRecover;", "modifier": "private", "type": "AuthenticationRecover", "declarator": "mAuthenticationRecover", "var_name": "mAuthenticationRecover"}], "methods": [{"identifier": "HaloAuthenticator", "parameters": "(@NonNull HaloFramework framework,\n                             @NonNull HaloManagerApi managerApi,\n                             @NonNull HaloSessionManager sessionManager,\n                             @NonNull Credentials credentials)", "modifiers": "public", "return": "", "signature": " HaloAuthenticator(@NonNull HaloFramework framework,\n                             @NonNull HaloManagerApi managerApi,\n                             @NonNull HaloSessionManager sessionManager,\n                             @NonNull Credentials credentials)", "full_signature": "public  HaloAuthenticator(@NonNull HaloFramework framework,\n                             @NonNull HaloManagerApi managerApi,\n                             @NonNull HaloSessionManager sessionManager,\n                             @NonNull Credentials credentials)", "class_method_signature": "HaloAuthenticator.HaloAuthenticator(@NonNull HaloFramework framework,\n                             @NonNull HaloManagerApi managerApi,\n                             @NonNull HaloSessionManager sessionManager,\n                             @NonNull Credentials credentials)", "testcase": false, "constructor": true}, {"identifier": "authenticate", "parameters": "(Route route, Response response)", "modifiers": "@Override public synchronized", "return": "Request", "signature": "Request authenticate(Route route, Response response)", "full_signature": "@Override public synchronized Request authenticate(Route route, Response response)", "class_method_signature": "HaloAuthenticator.authenticate(Route route, Response response)", "testcase": false, "constructor": false}, {"identifier": "setAuthenticationRecover", "parameters": "(@NonNull AuthenticationRecover authenticationRecover)", "modifiers": "public", "return": "void", "signature": "void setAuthenticationRecover(@NonNull AuthenticationRecover authenticationRecover)", "full_signature": "public void setAuthenticationRecover(@NonNull AuthenticationRecover authenticationRecover)", "class_method_signature": "HaloAuthenticator.setAuthenticationRecover(@NonNull AuthenticationRecover authenticationRecover)", "testcase": false, "constructor": false}, {"identifier": "getAuthenticationRecover", "parameters": "()", "modifiers": "@Nullable public", "return": "AuthenticationRecover", "signature": "AuthenticationRecover getAuthenticationRecover()", "full_signature": "@Nullable public AuthenticationRecover getAuthenticationRecover()", "class_method_signature": "HaloAuthenticator.getAuthenticationRecover()", "testcase": false, "constructor": false}, {"identifier": "requestToken", "parameters": "()", "modifiers": "private", "return": "Token", "signature": "Token requestToken()", "full_signature": "private Token requestToken()", "class_method_signature": "HaloAuthenticator.requestToken()", "testcase": false, "constructor": false}, {"identifier": "attachToFramework", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void attachToFramework()", "full_signature": "private void attachToFramework()", "class_method_signature": "HaloAuthenticator.attachToFramework()", "testcase": false, "constructor": false}, {"identifier": "setCredentials", "parameters": "(@NonNull Credentials credentials)", "modifiers": "public synchronized", "return": "void", "signature": "void setCredentials(@NonNull Credentials credentials)", "full_signature": "public synchronized void setCredentials(@NonNull Credentials credentials)", "class_method_signature": "HaloAuthenticator.setCredentials(@NonNull Credentials credentials)", "testcase": false, "constructor": false}, {"identifier": "logout", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void logout()", "full_signature": "public void logout()", "class_method_signature": "HaloAuthenticator.logout()", "testcase": false, "constructor": false}, {"identifier": "getCredentials", "parameters": "()", "modifiers": "@NonNull public synchronized", "return": "Credentials", "signature": "Credentials getCredentials()", "full_signature": "@NonNull public synchronized Credentials getCredentials()", "class_method_signature": "HaloAuthenticator.getCredentials()", "testcase": false, "constructor": false}, {"identifier": "flushSession", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void flushSession()", "full_signature": "public void flushSession()", "class_method_signature": "HaloAuthenticator.flushSession()", "testcase": false, "constructor": false}, {"identifier": "getSessionManager", "parameters": "()", "modifiers": "public", "return": "HaloSessionManager", "signature": "HaloSessionManager getSessionManager()", "full_signature": "public HaloSessionManager getSessionManager()", "class_method_signature": "HaloAuthenticator.getSessionManager()", "testcase": false, "constructor": false}], "file": "sdk/halo-sdk/src/main/java/com/mobgen/halo/android/sdk/core/management/authentication/HaloAuthenticator.java"}, "focal_method": {"identifier": "authenticate", "parameters": "(Route route, Response response)", "modifiers": "@Override public synchronized", "return": "Request", "body": "@Override\n    public synchronized Request authenticate(Route route, Response response) throws IOException {\n        HaloSession session = mSessionManager.getSession(HALO_SESSION_NAME);\n        try {\n            if (session == null || session.isSessionExpired() || session.mayBeServerExpired()) {\n                flushSession();\n                //Do auth\n                Token token = null;\n                if (!response.request().url().toString().endsWith(TokenRemoteDatasource.URL_GET_CLIENT_TOKEN) &&\n                        !response.request().url().toString().endsWith(TokenRemoteDatasource.URL_GET_USER_TOKEN)) {\n                    //request app token\n                    token = requestToken();\n                    if (token != null) {\n                        session = new Session(token);\n                    }\n                }\n            }\n        } catch (Exception e) {\n            Halog.e(getClass(), \"The token could not be obtained. \" + e.getMessage());\n            throw e;\n        }\n\n        //The request authentication finished successfully\n        if (session != null) {\n            //check if its a client based login to recover account\n            if(getCredentials().getLoginType()==Credentials.CLIENT_BASED_LOGIN) {\n                //recover from logged user if there is a halo auth api\n                if (mAuthenticationRecover != null && !mAuthenticationRecover.recoverStatus()) {\n                    mAuthenticationRecover.recoverAccount();\n                }\n            }\n            //Store the session\n            mSessionManager.setSession(HALO_SESSION_NAME, session);\n            return response.request()\n                    .newBuilder()\n                    .header(AUTHENTICATION_HEADER, session.getSessionAuthentication())\n                    .build();\n        }\n        //Do not reconnect, we can not authenticate with the current token\n        return null;\n    }", "signature": "Request authenticate(Route route, Response response)", "full_signature": "@Override public synchronized Request authenticate(Route route, Response response)", "class_method_signature": "HaloAuthenticator.authenticate(Route route, Response response)", "testcase": false, "constructor": false, "invocations": ["getSession", "isSessionExpired", "mayBeServerExpired", "flushSession", "endsWith", "toString", "url", "request", "endsWith", "toString", "url", "request", "requestToken", "e", "getClass", "getMessage", "getLoginType", "getCredentials", "recoverStatus", "recoverAccount", "setSession", "build", "header", "newBuilder", "request", "getSessionAuthentication"]}, "repository": {"repo_id": 72189814, "url": "https://github.com/mobgen/halo-android", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 6, "size": 3343, "license": "licensed"}}