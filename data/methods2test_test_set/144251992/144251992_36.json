{"test_class": {"identifier": "RepositoryUserAccessServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private RepositoryUserService userService;", "modifier": "@Mock\n    private", "type": "RepositoryUserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "@Mock\n    private AccessIntervalRepository intervalRepo;", "modifier": "@Mock\n    private", "type": "AccessIntervalRepository", "declarator": "intervalRepo", "var_name": "intervalRepo"}, {"original_string": "@Mock\n    private UserAccessEventHandler userAccessEventHandlerMock;", "modifier": "@Mock\n    private", "type": "UserAccessEventHandler", "declarator": "userAccessEventHandlerMock", "var_name": "userAccessEventHandlerMock"}, {"original_string": "@Mock\n    private User userMock;", "modifier": "@Mock\n    private", "type": "User", "declarator": "userMock", "var_name": "userMock"}, {"original_string": "@Mock\n    private AccessInterval accessIntervalMock;", "modifier": "@Mock\n    private", "type": "AccessInterval", "declarator": "accessIntervalMock", "var_name": "accessIntervalMock"}, {"original_string": "private Clock clock;", "modifier": "private", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private RepositoryUserAccessService accessService;", "modifier": "private", "type": "RepositoryUserAccessService", "declarator": "accessService", "var_name": "accessService"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/ad/access/RepositoryUserAccessServiceTest.java"}, "test_case": {"identifier": "userHasActiveAccessIntervalReturnsTrueWhenStartDateBeforeEndDateEqualToToday", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void userHasActiveAccessIntervalReturnsTrueWhenStartDateBeforeEndDateEqualToToday() {\n        // given\n        var startDateTime = LocalDateTime.now(clock).minus(1L, ChronoUnit.DAYS);\n        var endDateTime = LocalDateTime.now(clock);\n\n        given(userMock.getLatestAccessInterval()).willReturn(Optional.of(accessIntervalMock));\n\n        given(accessIntervalMock.getStartTime()).willReturn(startDateTime);\n        given(accessIntervalMock.getEndTime()).willReturn(endDateTime);\n\n        // when\n        boolean actualHasAccess = accessService.userHasActiveAccessInterval(userMock);\n\n        // then\n        assertThat(actualHasAccess).isTrue();\n    }", "signature": "void userHasActiveAccessIntervalReturnsTrueWhenStartDateBeforeEndDateEqualToToday()", "full_signature": "@Test public void userHasActiveAccessIntervalReturnsTrueWhenStartDateBeforeEndDateEqualToToday()", "class_method_signature": "RepositoryUserAccessServiceTest.userHasActiveAccessIntervalReturnsTrueWhenStartDateBeforeEndDateEqualToToday()", "testcase": true, "constructor": false, "invocations": ["minus", "now", "now", "willReturn", "given", "getLatestAccessInterval", "of", "willReturn", "given", "getStartTime", "willReturn", "given", "getEndTime", "userHasActiveAccessInterval", "isTrue", "assertThat"]}, "focal_class": {"identifier": "RepositoryUserAccessService", "superclass": "", "interfaces": "implements UserAccessService", "fields": [{"original_string": "private final RepositoryUserService userService;", "modifier": "private final", "type": "RepositoryUserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "private final AccessIntervalRepository intervalRepo;", "modifier": "private final", "type": "AccessIntervalRepository", "declarator": "intervalRepo", "var_name": "intervalRepo"}, {"original_string": "private final UserAccessEventHandler userAccessEventHandler;", "modifier": "private final", "type": "UserAccessEventHandler", "declarator": "userAccessEventHandler", "var_name": "userAccessEventHandler"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "methods": [{"identifier": "RepositoryUserAccessService", "parameters": "(RepositoryUserService userService,\n                                       AccessIntervalRepository intervalRepo,\n                                       UserAccessEventHandler userAccessEventHandler,\n                                       Clock clock)", "modifiers": "@Autowired public", "return": "", "signature": " RepositoryUserAccessService(RepositoryUserService userService,\n                                       AccessIntervalRepository intervalRepo,\n                                       UserAccessEventHandler userAccessEventHandler,\n                                       Clock clock)", "full_signature": "@Autowired public  RepositoryUserAccessService(RepositoryUserService userService,\n                                       AccessIntervalRepository intervalRepo,\n                                       UserAccessEventHandler userAccessEventHandler,\n                                       Clock clock)", "class_method_signature": "RepositoryUserAccessService.RepositoryUserAccessService(RepositoryUserService userService,\n                                       AccessIntervalRepository intervalRepo,\n                                       UserAccessEventHandler userAccessEventHandler,\n                                       Clock clock)", "testcase": false, "constructor": true}, {"identifier": "giveUserAccessUntil", "parameters": "(User user, LocalDateTime until)", "modifiers": "@Override public", "return": "User", "signature": "User giveUserAccessUntil(User user, LocalDateTime until)", "full_signature": "@Override public User giveUserAccessUntil(User user, LocalDateTime until)", "class_method_signature": "RepositoryUserAccessService.giveUserAccessUntil(User user, LocalDateTime until)", "testcase": false, "constructor": false}, {"identifier": "removeAccessFromUser", "parameters": "(User user)", "modifiers": "@Override public", "return": "User", "signature": "User removeAccessFromUser(User user)", "full_signature": "@Override public User removeAccessFromUser(User user)", "class_method_signature": "RepositoryUserAccessService.removeAccessFromUser(User user)", "testcase": false, "constructor": false}, {"identifier": "userHasActiveAccessInterval", "parameters": "(User user)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean userHasActiveAccessInterval(User user)", "full_signature": "@Override public boolean userHasActiveAccessInterval(User user)", "class_method_signature": "RepositoryUserAccessService.userHasActiveAccessInterval(User user)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/ad/access/RepositoryUserAccessService.java"}, "focal_method": {"identifier": "userHasActiveAccessInterval", "parameters": "(User user)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean userHasActiveAccessInterval(User user) {\n        var latestIntervalOptional = user.getLatestAccessInterval();\n\n        if(latestIntervalOptional.isPresent()) {\n            var latestInterval = latestIntervalOptional.get();\n\n            var startTime = latestInterval.getStartTime();\n            var endTime = latestInterval.getEndTime();\n            var now = LocalDateTime.now(clock);\n\n            return (startTime.isEqual(now) || startTime.isBefore(now)) && (endTime.isEqual(now) || endTime.isAfter(now));\n        }\n\n        return false;\n    }", "signature": "boolean userHasActiveAccessInterval(User user)", "full_signature": "@Override public boolean userHasActiveAccessInterval(User user)", "class_method_signature": "RepositoryUserAccessService.userHasActiveAccessInterval(User user)", "testcase": false, "constructor": false, "invocations": ["getLatestAccessInterval", "isPresent", "get", "getStartTime", "getEndTime", "now", "isEqual", "isBefore", "isEqual", "isAfter"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}