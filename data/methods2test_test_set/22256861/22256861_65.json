{"test_class": {"identifier": "MermaidQueryFormatterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Locale defaultLocale;", "modifier": "private static", "type": "Locale", "declarator": "defaultLocale", "var_name": "defaultLocale"}, {"original_string": "private static TimeZone defaultTimeZone;", "modifier": "private static", "type": "TimeZone", "declarator": "defaultTimeZone", "var_name": "defaultTimeZone"}], "file": "s3tbx-insitu-client-ui/src/test/java/org/esa/s3tbx/insitu/server/mermaid/MermaidQueryFormatterTest.java"}, "test_case": {"identifier": "testQueryCreation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testQueryCreation() throws Exception {\n        final SimpleDateFormat dateFormat = new SimpleDateFormat(\"dd-MMM-yyyy HH:mm:ss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n        final InsituQuery query= new InsituQuery();\n        query.subject(InsituQuery.SUBJECT.PARAMETERS);\n        query.datasets(new String[]{\"Muscheln\", \"Robben\"});\n        query.latMin(-10.943);\n        query.latMax(46.12);\n        query.lonMin(5.0);\n        query.lonMax(15.36);\n        query.startDate(dateFormat.parse(\"01-Jan-2014 00:00:00\"));\n        query.stopDate(dateFormat.parse(\"31-Dec-2015 00:00:00\"));\n        query.param(new String[]{\"param1\", \"param2\", \"param3\"});\n        query.limit(10);\n        query.shift(5);\n        query.countOnly(true);\n        String queryString = MermaidQueryFormatter.format(query);\n        assertTrue(queryString.startsWith(\"/parameters?\"));\n        assertTrue(queryString.contains(\"campaign=Muscheln,Robben\"));\n        assertTrue(queryString.contains(\"lat_min=-10.943\"));\n        assertTrue(queryString.contains(\"lon_min=5.0\"));\n        assertTrue(queryString.contains(\"lat_max=46.12\"));\n        assertTrue(queryString.contains(\"lon_max=15.36\"));\n        assertTrue(queryString.contains(\"start_date=2014-01-01+00%3A00%3A00\")); // URL encoded\n        assertTrue(queryString.contains(\"stop_date=2015-12-31+00%3A00%3A00\")); // URL encoded\n        assertTrue(queryString.contains(\"param=param1,param2,param3\"));\n        assertTrue(queryString.contains(\"limit=10\"));\n        assertTrue(queryString.contains(\"shift=5\"));\n        assertTrue(queryString.contains(\"count_only\"));\n        assertEquals(10, queryString.chars().filter(value -> value == '&').count());\n        final int lastIndex = queryString.length() - 1;\n        assertTrue(queryString.charAt(lastIndex) != '&');\n\n    }", "signature": "void testQueryCreation()", "full_signature": "@Test public void testQueryCreation()", "class_method_signature": "MermaidQueryFormatterTest.testQueryCreation()", "testcase": true, "constructor": false, "invocations": ["setTimeZone", "getTimeZone", "subject", "datasets", "latMin", "latMax", "lonMin", "lonMax", "startDate", "parse", "stopDate", "parse", "param", "limit", "shift", "countOnly", "format", "assertTrue", "startsWith", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains", "assertEquals", "count", "filter", "chars", "length", "assertTrue", "charAt"]}, "focal_class": {"identifier": "MermaidQueryFormatter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PARAMETERS_SUBJECT = \"parameters\";", "modifier": "private static final", "type": "String", "declarator": "PARAMETERS_SUBJECT = \"parameters\"", "var_name": "PARAMETERS_SUBJECT"}, {"original_string": "private static final String CAMPAIGNS_SUBJECT = \"campaigns\";", "modifier": "private static final", "type": "String", "declarator": "CAMPAIGNS_SUBJECT = \"campaigns\"", "var_name": "CAMPAIGNS_SUBJECT"}, {"original_string": "private static final String OBSERVATIONS_SUBJECT = \"observations\";", "modifier": "private static final", "type": "String", "declarator": "OBSERVATIONS_SUBJECT = \"observations\"", "var_name": "OBSERVATIONS_SUBJECT"}, {"original_string": "private static final String PARAM_LON_MIN = \"lon_min\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_LON_MIN = \"lon_min\"", "var_name": "PARAM_LON_MIN"}, {"original_string": "private static final String PARAM_LAT_MIN = \"lat_min\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_LAT_MIN = \"lat_min\"", "var_name": "PARAM_LAT_MIN"}, {"original_string": "private static final String PARAM_LON_MAX = \"lon_max=\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_LON_MAX = \"lon_max=\"", "var_name": "PARAM_LON_MAX"}, {"original_string": "private static final String PARAM_LAT_MAX = \"lat_max\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_LAT_MAX = \"lat_max\"", "var_name": "PARAM_LAT_MAX"}, {"original_string": "private static final String PARAM_START_DATE = \"start_date\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_START_DATE = \"start_date\"", "var_name": "PARAM_START_DATE"}, {"original_string": "private static final String PARAM_STOP_DATE = \"stop_date\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_STOP_DATE = \"stop_date\"", "var_name": "PARAM_STOP_DATE"}, {"original_string": "private static final String PARAM_PARAM = \"param\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_PARAM = \"param\"", "var_name": "PARAM_PARAM"}, {"original_string": "private static final String PARAM_CAMPAIGN = \"campaign\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_CAMPAIGN = \"campaign\"", "var_name": "PARAM_CAMPAIGN"}, {"original_string": "private static final String PARAM_SHIFT = \"shift\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_SHIFT = \"shift\"", "var_name": "PARAM_SHIFT"}, {"original_string": "private static final String PARAM_LIMIT = \"limit\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_LIMIT = \"limit\"", "var_name": "PARAM_LIMIT"}, {"original_string": "private static final String PARAM_COUNT_ONLY = \"count_only\";", "modifier": "private static final", "type": "String", "declarator": "PARAM_COUNT_ONLY = \"count_only\"", "var_name": "PARAM_COUNT_ONLY"}, {"original_string": "private static final DateFormat DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");", "modifier": "private static final", "type": "DateFormat", "declarator": "DATE_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")", "var_name": "DATE_FORMAT"}], "methods": [{"identifier": "format", "parameters": "(InsituQuery query)", "modifiers": "public static", "return": "String", "signature": "String format(InsituQuery query)", "full_signature": "public static String format(InsituQuery query)", "class_method_signature": "MermaidQueryFormatter.format(InsituQuery query)", "testcase": false, "constructor": false}], "file": "s3tbx-insitu-client-ui/src/main/java/org/esa/s3tbx/insitu/server/mermaid/MermaidQueryFormatter.java"}, "focal_method": {"identifier": "format", "parameters": "(InsituQuery query)", "modifiers": "public static", "return": "String", "body": "public static String format(InsituQuery query) {\n        List<String> queryParams= new ArrayList<>();\n\n        if(query.lonMin() != null) {\n            queryParams.add(PARAM_LON_MIN + \"=\" + query.lonMin());\n        }\n        if(query.latMin() != null) {\n            queryParams.add(PARAM_LAT_MIN + \"=\" + query.latMin());\n        }\n        if(query.lonMax() != null) {\n            queryParams.add(PARAM_LON_MAX + query.lonMax());\n        }\n        if(query.latMax() != null) {\n            queryParams.add(PARAM_LAT_MAX + \"=\" + query.latMax());\n        }\n        if(query.startDate() != null) {\n            try {\n                queryParams.add(PARAM_START_DATE + \"=\" + URLEncoder.encode(DATE_FORMAT.format(query.startDate()), \"UTF-8\"));\n            } catch (UnsupportedEncodingException e) {\n                throw new IllegalArgumentException(\"start date could not be encoded\", e);\n            }\n        }\n        if(query.stopDate() != null) {\n            try {\n                queryParams.add(PARAM_STOP_DATE + \"=\" + URLEncoder.encode(DATE_FORMAT.format(query.stopDate()), \"UTF-8\"));\n            } catch (UnsupportedEncodingException e) {\n                throw new IllegalArgumentException(\"stop date could not be encoded\", e);\n            }\n        }\n        if(query.param() != null && query.param().length > 0) {\n            queryParams.add(PARAM_PARAM + \"=\" + StringUtils.arrayToCsv(query.param()));\n        }\n        if(query.datasets() != null && query.datasets().length > 0) {\n            queryParams.add(PARAM_CAMPAIGN + \"=\" + StringUtils.arrayToCsv(query.datasets()));\n        }\n        if(query.shift() > 0) {\n            queryParams.add(PARAM_SHIFT + \"=\" + query.shift());\n        }\n        if(query.limit() > 0) {\n            queryParams.add(PARAM_LIMIT + \"=\" + query.limit());\n        }\n        if(query.countOnly()) {\n            queryParams.add(PARAM_COUNT_ONLY);\n        }\n\n        if(query.subject() == null) {\n            throw new IllegalArgumentException(\"subject must be specified\");\n        }\n        final StringBuilder sb = new StringBuilder();\n        sb.append(\"/\");\n        switch (query.subject()) {\n            case DATASETS:\n                sb.append(CAMPAIGNS_SUBJECT);\n                break;\n            case PARAMETERS:\n                sb.append(PARAMETERS_SUBJECT);\n                break;\n            case OBSERVATIONS:\n                sb.append(OBSERVATIONS_SUBJECT);\n                break;\n        }\n        sb.append(\"?\");\n\n        for (int i = 0; i < queryParams.size(); i++) {\n            String queryParam = queryParams.get(i);\n            sb.append(queryParam);\n            if(i < queryParams.size()-1) {\n                sb.append(\"&\");\n            }\n        }\n\n        return sb.toString();\n    }", "signature": "String format(InsituQuery query)", "full_signature": "public static String format(InsituQuery query)", "class_method_signature": "MermaidQueryFormatter.format(InsituQuery query)", "testcase": false, "constructor": false, "invocations": ["lonMin", "add", "lonMin", "latMin", "add", "latMin", "lonMax", "add", "lonMax", "latMax", "add", "latMax", "startDate", "add", "encode", "format", "startDate", "stopDate", "add", "encode", "format", "stopDate", "param", "param", "add", "arrayToCsv", "param", "datasets", "datasets", "add", "arrayToCsv", "datasets", "shift", "add", "shift", "limit", "add", "limit", "countOnly", "add", "subject", "append", "subject", "append", "append", "append", "append", "size", "get", "append", "size", "append", "toString"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}