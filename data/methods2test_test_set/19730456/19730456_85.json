{"test_class": {"identifier": "CompactEncoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static byte T = 16;", "modifier": "private final static", "type": "byte", "declarator": "T = 16", "var_name": "T"}], "file": "ethereumj-core/src/test/java/org/ethereum/util/CompactEncoderTest.java"}, "test_case": {"identifier": "testCompactEncodeOddCompact", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCompactEncodeOddCompact() {\n        byte[] test = new byte[]{1, 2, 3, 4, 5};\n        byte[] expectedData = new byte[]{0x11, 0x23, 0x45};\n        assertArrayEquals(\"odd compact encode fail\", expectedData, CompactEncoder.packNibbles(test));\n    }", "signature": "void testCompactEncodeOddCompact()", "full_signature": "@Test public void testCompactEncodeOddCompact()", "class_method_signature": "CompactEncoderTest.testCompactEncodeOddCompact()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "packNibbles"]}, "focal_class": {"identifier": "CompactEncoder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static byte TERMINATOR = 16;", "modifier": "private final static", "type": "byte", "declarator": "TERMINATOR = 16", "var_name": "TERMINATOR"}, {"original_string": "private final static Map<Character, Byte> hexMap = new HashMap<>();", "modifier": "private final static", "type": "Map<Character, Byte>", "declarator": "hexMap = new HashMap<>()", "var_name": "hexMap"}], "methods": [{"identifier": "packNibbles", "parameters": "(byte[] nibbles)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] packNibbles(byte[] nibbles)", "full_signature": "public static byte[] packNibbles(byte[] nibbles)", "class_method_signature": "CompactEncoder.packNibbles(byte[] nibbles)", "testcase": false, "constructor": false}, {"identifier": "hasTerminator", "parameters": "(byte[] packedKey)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasTerminator(byte[] packedKey)", "full_signature": "public static boolean hasTerminator(byte[] packedKey)", "class_method_signature": "CompactEncoder.hasTerminator(byte[] packedKey)", "testcase": false, "constructor": false}, {"identifier": "unpackToNibbles", "parameters": "(byte[] str)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] unpackToNibbles(byte[] str)", "full_signature": "public static byte[] unpackToNibbles(byte[] str)", "class_method_signature": "CompactEncoder.unpackToNibbles(byte[] str)", "testcase": false, "constructor": false}, {"identifier": "binToNibbles", "parameters": "(byte[] str)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] binToNibbles(byte[] str)", "full_signature": "public static byte[] binToNibbles(byte[] str)", "class_method_signature": "CompactEncoder.binToNibbles(byte[] str)", "testcase": false, "constructor": false}, {"identifier": "binToNibblesNoTerminator", "parameters": "(byte[] str)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] binToNibblesNoTerminator(byte[] str)", "full_signature": "public static byte[] binToNibblesNoTerminator(byte[] str)", "class_method_signature": "CompactEncoder.binToNibblesNoTerminator(byte[] str)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/util/CompactEncoder.java"}, "focal_method": {"identifier": "packNibbles", "parameters": "(byte[] nibbles)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] packNibbles(byte[] nibbles) {\n        int terminator = 0;\n\n        if (nibbles[nibbles.length - 1] == TERMINATOR) {\n            terminator = 1;\n            nibbles = copyOf(nibbles, nibbles.length - 1);\n        }\n        int oddlen = nibbles.length % 2;\n        int flag = 2 * terminator + oddlen;\n        if (oddlen != 0) {\n            byte[] flags = new byte[]{(byte) flag};\n            nibbles = concatenate(flags, nibbles);\n        } else {\n            byte[] flags = new byte[]{(byte) flag, 0};\n            nibbles = concatenate(flags, nibbles);\n        }\n        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n        for (int i = 0; i < nibbles.length; i += 2) {\n            buffer.write(16 * nibbles[i] + nibbles[i + 1]);\n        }\n        return buffer.toByteArray();\n    }", "signature": "byte[] packNibbles(byte[] nibbles)", "full_signature": "public static byte[] packNibbles(byte[] nibbles)", "class_method_signature": "CompactEncoder.packNibbles(byte[] nibbles)", "testcase": false, "constructor": false, "invocations": ["copyOf", "concatenate", "concatenate", "write", "toByteArray"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}