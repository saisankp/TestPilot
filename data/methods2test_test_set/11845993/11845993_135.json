{"test_class": {"identifier": "ClientSpanJavaScriptServletTest", "superclass": "", "interfaces": "", "fields": [], "file": "stagemonitor-web-servlet/src/test/java/org/stagemonitor/web/servlet/eum/ClientSpanJavaScriptServletTest.java"}, "test_case": {"identifier": "testDoGet_simple_Cache1Minute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testDoGet_simple_Cache1Minute() throws Exception {\n\t\t// Given\n\t\tClientSpanJavaScriptServlet clientSpanJavaScriptServlet = new ClientSpanJavaScriptServlet(mockServletPluginWithCacheTime(1));\n\t\tfinal MockHttpServletRequest request = new MockHttpServletRequest();\n\t\tfinal MockHttpServletResponse response = new MockHttpServletResponse();\n\n\t\t// When\n\t\tclientSpanJavaScriptServlet.doGet(request, response);\n\n\t\t// Then\n\t\tassertThat(response.getContentAsString()).contains(\"EumObject\");\n\t\tassertThat(response.getStatus()).isEqualTo(200);\n\t\tassertThat(response.getHeader(CACHE_CONTROL)).isEqualTo(\"max-age=60\");\n\t}", "signature": "void testDoGet_simple_Cache1Minute()", "full_signature": "@Test public void testDoGet_simple_Cache1Minute()", "class_method_signature": "ClientSpanJavaScriptServletTest.testDoGet_simple_Cache1Minute()", "testcase": true, "constructor": false, "invocations": ["mockServletPluginWithCacheTime", "doGet", "contains", "assertThat", "getContentAsString", "isEqualTo", "assertThat", "getStatus", "isEqualTo", "assertThat", "getHeader"]}, "focal_class": {"identifier": "ClientSpanJavaScriptServlet", "superclass": "extends HttpServlet", "interfaces": "", "fields": [{"original_string": "private static final String MIME_APPLICATION_JAVASCRIPT = \"application/javascript\";", "modifier": "private static final", "type": "String", "declarator": "MIME_APPLICATION_JAVASCRIPT = \"application/javascript\"", "var_name": "MIME_APPLICATION_JAVASCRIPT"}, {"original_string": "private static final String ETAG = \"etag\";", "modifier": "private static final", "type": "String", "declarator": "ETAG = \"etag\"", "var_name": "ETAG"}, {"original_string": "private static final String IF_NONE_MATCH = \"if-none-match\";", "modifier": "private static final", "type": "String", "declarator": "IF_NONE_MATCH = \"if-none-match\"", "var_name": "IF_NONE_MATCH"}, {"original_string": "private static final String MAX_AGE = \"max-age=\";", "modifier": "private static final", "type": "String", "declarator": "MAX_AGE = \"max-age=\"", "var_name": "MAX_AGE"}, {"original_string": "private static final String NO_CACHE = \"no-cache\";", "modifier": "private static final", "type": "String", "declarator": "NO_CACHE = \"no-cache\"", "var_name": "NO_CACHE"}, {"original_string": "static final String CACHE_CONTROL = \"Cache-Control\";", "modifier": "static final", "type": "String", "declarator": "CACHE_CONTROL = \"Cache-Control\"", "var_name": "CACHE_CONTROL"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(ClientSpanJavaScriptServlet.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ClientSpanJavaScriptServlet.class)", "var_name": "log"}, {"original_string": "private final ServletPlugin servletPlugin;", "modifier": "private final", "type": "ServletPlugin", "declarator": "servletPlugin", "var_name": "servletPlugin"}, {"original_string": "private String javaScript;", "modifier": "private", "type": "String", "declarator": "javaScript", "var_name": "javaScript"}, {"original_string": "private String javaScriptEtag;", "modifier": "private", "type": "String", "declarator": "javaScriptEtag", "var_name": "javaScriptEtag"}], "methods": [{"identifier": "ClientSpanJavaScriptServlet", "parameters": "()", "modifiers": "public", "return": "", "signature": " ClientSpanJavaScriptServlet()", "full_signature": "public  ClientSpanJavaScriptServlet()", "class_method_signature": "ClientSpanJavaScriptServlet.ClientSpanJavaScriptServlet()", "testcase": false, "constructor": true}, {"identifier": "ClientSpanJavaScriptServlet", "parameters": "(ServletPlugin servletPlugin)", "modifiers": "public", "return": "", "signature": " ClientSpanJavaScriptServlet(ServletPlugin servletPlugin)", "full_signature": "public  ClientSpanJavaScriptServlet(ServletPlugin servletPlugin)", "class_method_signature": "ClientSpanJavaScriptServlet.ClientSpanJavaScriptServlet(ServletPlugin servletPlugin)", "testcase": false, "constructor": true}, {"identifier": "rebuildJavaScriptAndEtag", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void rebuildJavaScriptAndEtag()", "full_signature": "public void rebuildJavaScriptAndEtag()", "class_method_signature": "ClientSpanJavaScriptServlet.rebuildJavaScriptAndEtag()", "testcase": false, "constructor": false}, {"identifier": "generateEtag", "parameters": "(String javaScript)", "modifiers": "private", "return": "String", "signature": "String generateEtag(String javaScript)", "full_signature": "private String generateEtag(String javaScript)", "class_method_signature": "ClientSpanJavaScriptServlet.generateEtag(String javaScript)", "testcase": false, "constructor": false}, {"identifier": "concatenateJavaScript", "parameters": "(List<ClientSpanExtension> clientSpanExtensions)", "modifiers": "private", "return": "String", "signature": "String concatenateJavaScript(List<ClientSpanExtension> clientSpanExtensions)", "full_signature": "private String concatenateJavaScript(List<ClientSpanExtension> clientSpanExtensions)", "class_method_signature": "ClientSpanJavaScriptServlet.concatenateJavaScript(List<ClientSpanExtension> clientSpanExtensions)", "testcase": false, "constructor": false}, {"identifier": "doGet", "parameters": "(HttpServletRequest req, HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doGet(HttpServletRequest req, HttpServletResponse resp)", "full_signature": "@Override protected void doGet(HttpServletRequest req, HttpServletResponse resp)", "class_method_signature": "ClientSpanJavaScriptServlet.doGet(HttpServletRequest req, HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "isInClientCache", "parameters": "(HttpServletRequest req)", "modifiers": "private", "return": "boolean", "signature": "boolean isInClientCache(HttpServletRequest req)", "full_signature": "private boolean isInClientCache(HttpServletRequest req)", "class_method_signature": "ClientSpanJavaScriptServlet.isInClientCache(HttpServletRequest req)", "testcase": false, "constructor": false}, {"identifier": "wrapImmediateInvokedFunctionExpression", "parameters": "(String toWrap)", "modifiers": "private", "return": "String", "signature": "String wrapImmediateInvokedFunctionExpression(String toWrap)", "full_signature": "private String wrapImmediateInvokedFunctionExpression(String toWrap)", "class_method_signature": "ClientSpanJavaScriptServlet.wrapImmediateInvokedFunctionExpression(String toWrap)", "testcase": false, "constructor": false}, {"identifier": "getCacheControlMaxAge", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String getCacheControlMaxAge()", "full_signature": "private String getCacheControlMaxAge()", "class_method_signature": "ClientSpanJavaScriptServlet.getCacheControlMaxAge()", "testcase": false, "constructor": false}], "file": "stagemonitor-web-servlet/src/main/java/org/stagemonitor/web/servlet/eum/ClientSpanJavaScriptServlet.java"}, "focal_method": {"identifier": "doGet", "parameters": "(HttpServletRequest req, HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n\tprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n\t\tif (servletPlugin.isClientSpanCollectionEnabled()) {\n\t\t\tresp.setHeader(ETAG, javaScriptEtag);\n\t\t\tresp.setHeader(CACHE_CONTROL, getCacheControlMaxAge());\n\t\t\tif (isInClientCache(req)) {\n\t\t\t\tresp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n\t\t\t} else {\n\t\t\t\tresp.setContentType(MIME_APPLICATION_JAVASCRIPT);\n\t\t\t\tresp.getWriter().write(javaScript);\n\t\t\t}\n\t\t} else {\n\t\t\tlog.debug(\"Client span collection is disabled\");\n\t\t\tresp.sendError(HttpServletResponse.SC_NOT_FOUND);\n\t\t}\n\t}", "signature": "void doGet(HttpServletRequest req, HttpServletResponse resp)", "full_signature": "@Override protected void doGet(HttpServletRequest req, HttpServletResponse resp)", "class_method_signature": "ClientSpanJavaScriptServlet.doGet(HttpServletRequest req, HttpServletResponse resp)", "testcase": false, "constructor": false, "invocations": ["isClientSpanCollectionEnabled", "setHeader", "setHeader", "getCacheControlMaxAge", "isInClientCache", "setStatus", "setContentType", "write", "getWriter", "debug", "sendError"]}, "repository": {"repo_id": 11845993, "url": "https://github.com/stagemonitor/stagemonitor", "language": "Java", "is_fork": false, "fork_count": 268, "stargazer_count": 1585, "size": 10342, "license": "licensed"}}