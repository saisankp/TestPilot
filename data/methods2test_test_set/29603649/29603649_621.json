{"test_class": {"identifier": "StubConfigXPathEvaluatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Document document;", "modifier": "@Mock\n    private", "type": "Document", "declarator": "document", "var_name": "document"}, {"original_string": "@Mock\n    private Element element;", "modifier": "@Mock\n    private", "type": "Element", "declarator": "element", "var_name": "element"}, {"original_string": "@Mock\n    private NameSpaceProvider nameSpaceProvider;", "modifier": "@Mock\n    private", "type": "NameSpaceProvider", "declarator": "nameSpaceProvider", "var_name": "nameSpaceProvider"}, {"original_string": "@Mock\n    private XPathProvider xPathProvider;", "modifier": "@Mock\n    private", "type": "XPathProvider", "declarator": "xPathProvider", "var_name": "xPathProvider"}, {"original_string": "@Mock\n    private XPath xPath;", "modifier": "@Mock\n    private", "type": "XPath", "declarator": "xPath", "var_name": "xPath"}, {"original_string": "@Mock\n    private XPathExpression xPathExpression;", "modifier": "@Mock\n    private", "type": "XPathExpression", "declarator": "xPathExpression", "var_name": "xPathExpression"}, {"original_string": "@Mock\n    private Element node;", "modifier": "@Mock\n    private", "type": "Element", "declarator": "node", "var_name": "node"}, {"original_string": "@InjectMocks\n    private StubConfigXPathEvaluator underTest;", "modifier": "@InjectMocks\n    private", "type": "StubConfigXPathEvaluator", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/test/java/com/epam/wilma/stubconfig/dom/parser/node/helper/StubConfigXPathEvaluatorTest.java"}, "test_case": {"identifier": "testGetElementByXPathWhenExpressionIsInvalidShouldThrowException", "parameters": "()", "modifiers": "@Test(expectedExceptions = DescriptorCannotBeParsedException.class) public", "return": "void", "body": "@Test(expectedExceptions = DescriptorCannotBeParsedException.class)\n    public void testGetElementByXPathWhenExpressionIsInvalidShouldThrowException() throws XPathExpressionException {\n        //GIVEN\n        String expression = \"\";\n        given(xPath.compile(expression)).willThrow(new XPathExpressionException(\"exception\"));\n        //given(xPathExpression.evaluate(document, XPathConstants.NODE)).willReturn(node);\n        //WHEN\n        underTest.getElementByXPath(expression, document);\n        //THEN\n    }", "signature": "void testGetElementByXPathWhenExpressionIsInvalidShouldThrowException()", "full_signature": "@Test(expectedExceptions = DescriptorCannotBeParsedException.class) public void testGetElementByXPathWhenExpressionIsInvalidShouldThrowException()", "class_method_signature": "StubConfigXPathEvaluatorTest.testGetElementByXPathWhenExpressionIsInvalidShouldThrowException()", "testcase": true, "constructor": false, "invocations": ["willThrow", "given", "compile", "getElementByXPath"]}, "focal_class": {"identifier": "StubConfigXPathEvaluator", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private NameSpaceProvider nameSpaceProvider;", "modifier": "@Autowired\n    private", "type": "NameSpaceProvider", "declarator": "nameSpaceProvider", "var_name": "nameSpaceProvider"}, {"original_string": "@Autowired\n    private XPathProvider xPathProvider;", "modifier": "@Autowired\n    private", "type": "XPathProvider", "declarator": "xPathProvider", "var_name": "xPathProvider"}], "methods": [{"identifier": "getElementByXPath", "parameters": "(final String expression, final Document document)", "modifiers": "public", "return": "Element", "signature": "Element getElementByXPath(final String expression, final Document document)", "full_signature": "public Element getElementByXPath(final String expression, final Document document)", "class_method_signature": "StubConfigXPathEvaluator.getElementByXPath(final String expression, final Document document)", "testcase": false, "constructor": false}, {"identifier": "getElementsByXPath", "parameters": "(final String expression, final Document document)", "modifiers": "public", "return": "NodeList", "signature": "NodeList getElementsByXPath(final String expression, final Document document)", "full_signature": "public NodeList getElementsByXPath(final String expression, final Document document)", "class_method_signature": "StubConfigXPathEvaluator.getElementsByXPath(final String expression, final Document document)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/main/java/com/epam/wilma/stubconfig/dom/parser/node/helper/StubConfigXPathEvaluator.java"}, "focal_method": {"identifier": "getElementByXPath", "parameters": "(final String expression, final Document document)", "modifiers": "public", "return": "Element", "body": "public Element getElementByXPath(final String expression, final Document document) {\n        Element element = null;\n        XPath xPath = xPathProvider.getXPath();\n        try {\n            nameSpaceProvider.setNameSpaceContext(xPath);\n            XPathExpression expr = xPath.compile(expression);\n            Node result = (Node) expr.evaluate(document, XPathConstants.NODE);\n            if (result.getNodeType() == Node.ELEMENT_NODE) {\n                element = (Element) result;\n            }\n        } catch (XPathExpressionException e) {\n            throw new DescriptorCannotBeParsedException(\"Exception while trying to locate node in the stub configuration file\", e);\n        }\n        return element;\n    }", "signature": "Element getElementByXPath(final String expression, final Document document)", "full_signature": "public Element getElementByXPath(final String expression, final Document document)", "class_method_signature": "StubConfigXPathEvaluator.getElementByXPath(final String expression, final Document document)", "testcase": false, "constructor": false, "invocations": ["getXPath", "setNameSpaceContext", "compile", "evaluate", "getNodeType"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}