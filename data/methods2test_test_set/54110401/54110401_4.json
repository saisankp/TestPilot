{"test_class": {"identifier": "CoordinateUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "motu-web/src/test/java/fr/cls/atoll/motu/web/common/utils/CoordinateUtilsTest.java"}, "test_case": {"identifier": "testFindMaxDepthIndex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindMaxDepthIndex() {\n\n        double[] depths = { 0.18234, 0.235, 0.24, 0.245, 1.1 };\n\n        assertTrue(CoordinateUtils.findMaxDepthIndex(depths, 0.16) == -1);\n        assertTrue(CoordinateUtils.findMaxDepthIndex(depths, 0.17) == 0);\n        assertTrue(CoordinateUtils.findMaxDepthIndex(depths, 0.19) == 0);\n        assertTrue(CoordinateUtils.findMaxDepthIndex(depths, 0.191) == 0);\n        assertTrue(CoordinateUtils.findMaxDepthIndex(depths, 0.219) == 0);\n        assertTrue(CoordinateUtils.findMaxDepthIndex(depths, 0.22) == 1);\n        assertTrue(CoordinateUtils.findMaxDepthIndex(depths, 0.24275) == 3);\n        assertTrue(CoordinateUtils.findMaxDepthIndex(depths, 1.1) == 4);\n\n    }", "signature": "void testFindMaxDepthIndex()", "full_signature": "@Test public void testFindMaxDepthIndex()", "class_method_signature": "CoordinateUtilsTest.testFindMaxDepthIndex()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "findMaxDepthIndex", "assertTrue", "findMaxDepthIndex", "assertTrue", "findMaxDepthIndex", "assertTrue", "findMaxDepthIndex", "assertTrue", "findMaxDepthIndex", "assertTrue", "findMaxDepthIndex", "assertTrue", "findMaxDepthIndex", "assertTrue", "findMaxDepthIndex"]}, "focal_class": {"identifier": "CoordinateUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getLongitudeM180P180", "parameters": "(double longitude)", "modifiers": "public static", "return": "double", "signature": "double getLongitudeM180P180(double longitude)", "full_signature": "public static double getLongitudeM180P180(double longitude)", "class_method_signature": "CoordinateUtils.getLongitudeM180P180(double longitude)", "testcase": false, "constructor": false}, {"identifier": "createRange", "parameters": "(int minj, int maxj, int mini, int maxi)", "modifiers": "public static", "return": "List<Range>", "signature": "List<Range> createRange(int minj, int maxj, int mini, int maxi)", "full_signature": "public static List<Range> createRange(int minj, int maxj, int mini, int maxi)", "class_method_signature": "CoordinateUtils.createRange(int minj, int maxj, int mini, int maxi)", "testcase": false, "constructor": false}, {"identifier": "findCoordElementBounded", "parameters": "(CoordinateAxis1D axis, double pos, int lastIndex)", "modifiers": "public static", "return": "int", "signature": "int findCoordElementBounded(CoordinateAxis1D axis, double pos, int lastIndex)", "full_signature": "public static int findCoordElementBounded(CoordinateAxis1D axis, double pos, int lastIndex)", "class_method_signature": "CoordinateUtils.findCoordElementBounded(CoordinateAxis1D axis, double pos, int lastIndex)", "testcase": false, "constructor": false}, {"identifier": "getRangesFromLatLonRect", "parameters": "(GridCoordSys gcs, LatLonRect rect)", "modifiers": "public static", "return": "List<Range>", "signature": "List<Range> getRangesFromLatLonRect(GridCoordSys gcs, LatLonRect rect)", "full_signature": "public static List<Range> getRangesFromLatLonRect(GridCoordSys gcs, LatLonRect rect)", "class_method_signature": "CoordinateUtils.getRangesFromLatLonRect(GridCoordSys gcs, LatLonRect rect)", "testcase": false, "constructor": false}, {"identifier": "getMinOrMaxLon", "parameters": "(double lon1, double lon2, boolean wantMin)", "modifiers": "public static", "return": "double", "signature": "double getMinOrMaxLon(double lon1, double lon2, boolean wantMin)", "full_signature": "public static double getMinOrMaxLon(double lon1, double lon2, boolean wantMin)", "class_method_signature": "CoordinateUtils.getMinOrMaxLon(double lon1, double lon2, boolean wantMin)", "testcase": false, "constructor": false}, {"identifier": "computeMinMax", "parameters": "(MinMax ref, MinMax work)", "modifiers": "public static", "return": "MinMax", "signature": "MinMax computeMinMax(MinMax ref, MinMax work)", "full_signature": "public static MinMax computeMinMax(MinMax ref, MinMax work)", "class_method_signature": "CoordinateUtils.computeMinMax(MinMax ref, MinMax work)", "testcase": false, "constructor": false}, {"identifier": "computeLatMinMax", "parameters": "(MAMath.MinMax minMaxYValue2D, CoordinateAxis2D latAxis, int minj, int mini, int maxj, int maxi)", "modifiers": "public static", "return": "MAMath.MinMax", "signature": "MAMath.MinMax computeLatMinMax(MAMath.MinMax minMaxYValue2D, CoordinateAxis2D latAxis, int minj, int mini, int maxj, int maxi)", "full_signature": "public static MAMath.MinMax computeLatMinMax(MAMath.MinMax minMaxYValue2D, CoordinateAxis2D latAxis, int minj, int mini, int maxj, int maxi)", "class_method_signature": "CoordinateUtils.computeLatMinMax(MAMath.MinMax minMaxYValue2D, CoordinateAxis2D latAxis, int minj, int mini, int maxj, int maxi)", "testcase": false, "constructor": false}, {"identifier": "computeLonMinMax", "parameters": "(MAMath.MinMax minMaxXValue2D,\n                                                 CoordinateAxis2D lonAxis,\n                                                 int minj,\n                                                 int mini,\n                                                 int maxj,\n                                                 int maxi,\n                                                 double minx,\n                                                 double maxx)", "modifiers": "public static", "return": "MAMath.MinMax", "signature": "MAMath.MinMax computeLonMinMax(MAMath.MinMax minMaxXValue2D,\n                                                 CoordinateAxis2D lonAxis,\n                                                 int minj,\n                                                 int mini,\n                                                 int maxj,\n                                                 int maxi,\n                                                 double minx,\n                                                 double maxx)", "full_signature": "public static MAMath.MinMax computeLonMinMax(MAMath.MinMax minMaxXValue2D,\n                                                 CoordinateAxis2D lonAxis,\n                                                 int minj,\n                                                 int mini,\n                                                 int maxj,\n                                                 int maxi,\n                                                 double minx,\n                                                 double maxx)", "class_method_signature": "CoordinateUtils.computeLonMinMax(MAMath.MinMax minMaxXValue2D,\n                                                 CoordinateAxis2D lonAxis,\n                                                 int minj,\n                                                 int mini,\n                                                 int maxj,\n                                                 int maxi,\n                                                 double minx,\n                                                 double maxx)", "testcase": false, "constructor": false}, {"identifier": "computeMinMaxX", "parameters": "(Projection dataProjection, LatLonRect rect)", "modifiers": "public static", "return": "MinMax", "signature": "MinMax computeMinMaxX(Projection dataProjection, LatLonRect rect)", "full_signature": "public static MinMax computeMinMaxX(Projection dataProjection, LatLonRect rect)", "class_method_signature": "CoordinateUtils.computeMinMaxX(Projection dataProjection, LatLonRect rect)", "testcase": false, "constructor": false}, {"identifier": "computeMinMaxY", "parameters": "(Projection dataProjection, LatLonRect rect)", "modifiers": "public static", "return": "MinMax", "signature": "MinMax computeMinMaxY(Projection dataProjection, LatLonRect rect)", "full_signature": "public static MinMax computeMinMaxY(Projection dataProjection, LatLonRect rect)", "class_method_signature": "CoordinateUtils.computeMinMaxY(Projection dataProjection, LatLonRect rect)", "testcase": false, "constructor": false}, {"identifier": "computeMinMaxXY", "parameters": "(Projection dataProjection, LatLonRect rect)", "modifiers": "public static", "return": "MinMax[]", "signature": "MinMax[] computeMinMaxXY(Projection dataProjection, LatLonRect rect)", "full_signature": "public static MinMax[] computeMinMaxXY(Projection dataProjection, LatLonRect rect)", "class_method_signature": "CoordinateUtils.computeMinMaxXY(Projection dataProjection, LatLonRect rect)", "testcase": false, "constructor": false}, {"identifier": "checkXYAxis", "parameters": "(CoordinateAxis xaxis, CoordinateAxis yaxis, GridCoordSys gcs)", "modifiers": "public static", "return": "void", "signature": "void checkXYAxis(CoordinateAxis xaxis, CoordinateAxis yaxis, GridCoordSys gcs)", "full_signature": "public static void checkXYAxis(CoordinateAxis xaxis, CoordinateAxis yaxis, GridCoordSys gcs)", "class_method_signature": "CoordinateUtils.checkXYAxis(CoordinateAxis xaxis, CoordinateAxis yaxis, GridCoordSys gcs)", "testcase": false, "constructor": false}, {"identifier": "checkLon", "parameters": "(double lon, double refXMin)", "modifiers": "public static", "return": "double", "signature": "double checkLon(double lon, double refXMin)", "full_signature": "public static double checkLon(double lon, double refXMin)", "class_method_signature": "CoordinateUtils.checkLon(double lon, double refXMin)", "testcase": false, "constructor": false}, {"identifier": "isInside", "parameters": "(double lat, double lon, MinMax minMaxX, MinMax minMaxY)", "modifiers": "public static", "return": "boolean", "signature": "boolean isInside(double lat, double lon, MinMax minMaxX, MinMax minMaxY)", "full_signature": "public static boolean isInside(double lat, double lon, MinMax minMaxX, MinMax minMaxY)", "class_method_signature": "CoordinateUtils.isInside(double lat, double lon, MinMax minMaxX, MinMax minMaxY)", "testcase": false, "constructor": false}, {"identifier": "removeEmptyYXRanges", "parameters": "(List<List<Range>> listRanges)", "modifiers": "public static", "return": "void", "signature": "void removeEmptyYXRanges(List<List<Range>> listRanges)", "full_signature": "public static void removeEmptyYXRanges(List<List<Range>> listRanges)", "class_method_signature": "CoordinateUtils.removeEmptyYXRanges(List<List<Range>> listRanges)", "testcase": false, "constructor": false}, {"identifier": "hasEmptyYXRanges", "parameters": "(List<List<Range>> listRanges)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasEmptyYXRanges(List<List<Range>> listRanges)", "full_signature": "public static boolean hasEmptyYXRanges(List<List<Range>> listRanges)", "class_method_signature": "CoordinateUtils.hasEmptyYXRanges(List<List<Range>> listRanges)", "testcase": false, "constructor": false}, {"identifier": "createEmptyYXRanges", "parameters": "()", "modifiers": "public static", "return": "List<Range>", "signature": "List<Range> createEmptyYXRanges()", "full_signature": "public static List<Range> createEmptyYXRanges()", "class_method_signature": "CoordinateUtils.createEmptyYXRanges()", "testcase": false, "constructor": false}, {"identifier": "hasRange", "parameters": "(List<Range> ranges)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasRange(List<Range> ranges)", "full_signature": "public static boolean hasRange(List<Range> ranges)", "class_method_signature": "CoordinateUtils.hasRange(List<Range> ranges)", "testcase": false, "constructor": false}, {"identifier": "hasRange", "parameters": "(Range range)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasRange(Range range)", "full_signature": "public static boolean hasRange(Range range)", "class_method_signature": "CoordinateUtils.hasRange(Range range)", "testcase": false, "constructor": false}, {"identifier": "getRangeValues", "parameters": "(GridCoordSys gcs, Range rangeLat, Range rangeLon, double[] rangeValueLat, double[] rangeValueLon)", "modifiers": "public static", "return": "void", "signature": "void getRangeValues(GridCoordSys gcs, Range rangeLat, Range rangeLon, double[] rangeValueLat, double[] rangeValueLon)", "full_signature": "public static void getRangeValues(GridCoordSys gcs, Range rangeLat, Range rangeLon, double[] rangeValueLat, double[] rangeValueLon)", "class_method_signature": "CoordinateUtils.getRangeValues(GridCoordSys gcs, Range rangeLat, Range rangeLon, double[] rangeValueLat, double[] rangeValueLon)", "testcase": false, "constructor": false}, {"identifier": "getMinMaxValueForAxis", "parameters": "(CoordinateAxis axis)", "modifiers": "public static", "return": "MAMath.MinMax", "signature": "MAMath.MinMax getMinMaxValueForAxis(CoordinateAxis axis)", "full_signature": "public static MAMath.MinMax getMinMaxValueForAxis(CoordinateAxis axis)", "class_method_signature": "CoordinateUtils.getMinMaxValueForAxis(CoordinateAxis axis)", "testcase": false, "constructor": false}, {"identifier": "getMinValueForAxis", "parameters": "(CoordinateAxis axis)", "modifiers": "public static", "return": "double", "signature": "double getMinValueForAxis(CoordinateAxis axis)", "full_signature": "public static double getMinValueForAxis(CoordinateAxis axis)", "class_method_signature": "CoordinateUtils.getMinValueForAxis(CoordinateAxis axis)", "testcase": false, "constructor": false}, {"identifier": "getMaxValueForAxis", "parameters": "(CoordinateAxis axis)", "modifiers": "public static", "return": "double", "signature": "double getMaxValueForAxis(CoordinateAxis axis)", "full_signature": "public static double getMaxValueForAxis(CoordinateAxis axis)", "class_method_signature": "CoordinateUtils.getMaxValueForAxis(CoordinateAxis axis)", "testcase": false, "constructor": false}, {"identifier": "getMinValForAxisAsString", "parameters": "(CoordinateAxis axis)", "modifiers": "public static", "return": "String", "signature": "String getMinValForAxisAsString(CoordinateAxis axis)", "full_signature": "public static String getMinValForAxisAsString(CoordinateAxis axis)", "class_method_signature": "CoordinateUtils.getMinValForAxisAsString(CoordinateAxis axis)", "testcase": false, "constructor": false}, {"identifier": "getMaxValForAxisAsString", "parameters": "(CoordinateAxis axis)", "modifiers": "public static", "return": "String", "signature": "String getMaxValForAxisAsString(CoordinateAxis axis)", "full_signature": "public static String getMaxValForAxisAsString(CoordinateAxis axis)", "class_method_signature": "CoordinateUtils.getMaxValForAxisAsString(CoordinateAxis axis)", "testcase": false, "constructor": false}, {"identifier": "findMinDepthIndex", "parameters": "(double[] depths, double from)", "modifiers": "public static", "return": "int", "signature": "int findMinDepthIndex(double[] depths, double from)", "full_signature": "public static int findMinDepthIndex(double[] depths, double from)", "class_method_signature": "CoordinateUtils.findMinDepthIndex(double[] depths, double from)", "testcase": false, "constructor": false}, {"identifier": "findMaxDepthIndex", "parameters": "(double[] depths, double to)", "modifiers": "public static", "return": "int", "signature": "int findMaxDepthIndex(double[] depths, double to)", "full_signature": "public static int findMaxDepthIndex(double[] depths, double to)", "class_method_signature": "CoordinateUtils.findMaxDepthIndex(double[] depths, double to)", "testcase": false, "constructor": false}], "file": "motu-web/src/main/java/fr/cls/atoll/motu/web/common/utils/CoordinateUtils.java"}, "focal_method": {"identifier": "findMaxDepthIndex", "parameters": "(double[] depths, double to)", "modifiers": "public static", "return": "int", "body": "public static int findMaxDepthIndex(double[] depths, double to) {\n        int last = Arrays.binarySearch(depths, to);\n        if (last < 0) {\n            // Extract insertion point\n            last = -1 - last;\n            // Check at 1 cm for rounding tolerance\n            if (last == depths.length || Math.floor(100 * depths[last]) - Math.floor(100 * to) > 1) {\n                last--;\n            }\n        } else if (last == 0 && Math.floor(100 * depths[0]) - Math.floor(100 * to) > 1) {\n            last = -1;\n        } else if (last == depths.length) {\n            last--;\n        }\n        return last;\n    }", "signature": "int findMaxDepthIndex(double[] depths, double to)", "full_signature": "public static int findMaxDepthIndex(double[] depths, double to)", "class_method_signature": "CoordinateUtils.findMaxDepthIndex(double[] depths, double to)", "testcase": false, "constructor": false, "invocations": ["binarySearch", "floor", "floor", "floor", "floor"]}, "repository": {"repo_id": 54110401, "url": "https://github.com/clstoulouse/motu", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 16, "size": 29467, "license": "licensed"}}