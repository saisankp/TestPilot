{"test_class": {"identifier": "CoinTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/org/ulordj/core/CoinTest.java"}, "test_case": {"identifier": "testParseCoinInexact", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseCoinInexact() {\n        assertEquals(1, parseCoinInexact(\"0.00000001\").value);\n        assertEquals(1, parseCoinInexact(\"0.000000011\").value);\n    }", "signature": "void testParseCoinInexact()", "full_signature": "@Test public void testParseCoinInexact()", "class_method_signature": "CoinTest.testParseCoinInexact()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "parseCoinInexact", "assertEquals", "parseCoinInexact"]}, "focal_class": {"identifier": "Coin", "superclass": "", "interfaces": "implements Monetary, Comparable<Coin>, Serializable", "fields": [{"original_string": "public static final int SMALLEST_UNIT_EXPONENT = 8;", "modifier": "public static final", "type": "int", "declarator": "SMALLEST_UNIT_EXPONENT = 8", "var_name": "SMALLEST_UNIT_EXPONENT"}, {"original_string": "private static final long COIN_VALUE = LongMath.pow(10, SMALLEST_UNIT_EXPONENT);", "modifier": "private static final", "type": "long", "declarator": "COIN_VALUE = LongMath.pow(10, SMALLEST_UNIT_EXPONENT)", "var_name": "COIN_VALUE"}, {"original_string": "public static final Coin ZERO = Coin.valueOf(0);", "modifier": "public static final", "type": "Coin", "declarator": "ZERO = Coin.valueOf(0)", "var_name": "ZERO"}, {"original_string": "public static final Coin COIN = Coin.valueOf(COIN_VALUE);", "modifier": "public static final", "type": "Coin", "declarator": "COIN = Coin.valueOf(COIN_VALUE)", "var_name": "COIN"}, {"original_string": "public static final Coin CENT = COIN.divide(100);", "modifier": "public static final", "type": "Coin", "declarator": "CENT = COIN.divide(100)", "var_name": "CENT"}, {"original_string": "public static final Coin MILLICOIN = COIN.divide(1000);", "modifier": "public static final", "type": "Coin", "declarator": "MILLICOIN = COIN.divide(1000)", "var_name": "MILLICOIN"}, {"original_string": "public static final Coin MICROCOIN = MILLICOIN.divide(1000);", "modifier": "public static final", "type": "Coin", "declarator": "MICROCOIN = MILLICOIN.divide(1000)", "var_name": "MICROCOIN"}, {"original_string": "public static final Coin SATOSHI = Coin.valueOf(1);", "modifier": "public static final", "type": "Coin", "declarator": "SATOSHI = Coin.valueOf(1)", "var_name": "SATOSHI"}, {"original_string": "public static final Coin ONE_COIN = COIN.multiply(1);", "modifier": "public static final", "type": "Coin", "declarator": "ONE_COIN = COIN.multiply(1)", "var_name": "ONE_COIN"}, {"original_string": "public static final Coin NEGATIVE_SATOSHI = Coin.valueOf(-1);", "modifier": "public static final", "type": "Coin", "declarator": "NEGATIVE_SATOSHI = Coin.valueOf(-1)", "var_name": "NEGATIVE_SATOSHI"}, {"original_string": "public final long value;", "modifier": "public final", "type": "long", "declarator": "value", "var_name": "value"}, {"original_string": "private static final MonetaryFormat FRIENDLY_FORMAT = MonetaryFormat.BTC.minDecimals(2).repeatOptionalDecimals(1, 6).postfixCode();", "modifier": "private static final", "type": "MonetaryFormat", "declarator": "FRIENDLY_FORMAT = MonetaryFormat.BTC.minDecimals(2).repeatOptionalDecimals(1, 6).postfixCode()", "var_name": "FRIENDLY_FORMAT"}, {"original_string": "private static final MonetaryFormat PLAIN_FORMAT = MonetaryFormat.BTC.minDecimals(0).repeatOptionalDecimals(1, 8).noCode();", "modifier": "private static final", "type": "MonetaryFormat", "declarator": "PLAIN_FORMAT = MonetaryFormat.BTC.minDecimals(0).repeatOptionalDecimals(1, 8).noCode()", "var_name": "PLAIN_FORMAT"}], "methods": [{"identifier": "Coin", "parameters": "(final long satoshis)", "modifiers": "private", "return": "", "signature": " Coin(final long satoshis)", "full_signature": "private  Coin(final long satoshis)", "class_method_signature": "Coin.Coin(final long satoshis)", "testcase": false, "constructor": true}, {"identifier": "valueOf", "parameters": "(final long satoshis)", "modifiers": "public static", "return": "Coin", "signature": "Coin valueOf(final long satoshis)", "full_signature": "public static Coin valueOf(final long satoshis)", "class_method_signature": "Coin.valueOf(final long satoshis)", "testcase": false, "constructor": false}, {"identifier": "smallestUnitExponent", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int smallestUnitExponent()", "full_signature": "@Override public int smallestUnitExponent()", "class_method_signature": "Coin.smallestUnitExponent()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getValue()", "full_signature": "@Override public long getValue()", "class_method_signature": "Coin.getValue()", "testcase": false, "constructor": false}, {"identifier": "valueOf", "parameters": "(final int coins, final int cents)", "modifiers": "public static", "return": "Coin", "signature": "Coin valueOf(final int coins, final int cents)", "full_signature": "public static Coin valueOf(final int coins, final int cents)", "class_method_signature": "Coin.valueOf(final int coins, final int cents)", "testcase": false, "constructor": false}, {"identifier": "parseCoin", "parameters": "(final String str)", "modifiers": "public static", "return": "Coin", "signature": "Coin parseCoin(final String str)", "full_signature": "public static Coin parseCoin(final String str)", "class_method_signature": "Coin.parseCoin(final String str)", "testcase": false, "constructor": false}, {"identifier": "parseCoinInexact", "parameters": "(final String str)", "modifiers": "public static", "return": "Coin", "signature": "Coin parseCoinInexact(final String str)", "full_signature": "public static Coin parseCoinInexact(final String str)", "class_method_signature": "Coin.parseCoinInexact(final String str)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(final Coin value)", "modifiers": "public", "return": "Coin", "signature": "Coin add(final Coin value)", "full_signature": "public Coin add(final Coin value)", "class_method_signature": "Coin.add(final Coin value)", "testcase": false, "constructor": false}, {"identifier": "plus", "parameters": "(final Coin value)", "modifiers": "public", "return": "Coin", "signature": "Coin plus(final Coin value)", "full_signature": "public Coin plus(final Coin value)", "class_method_signature": "Coin.plus(final Coin value)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(final Coin value)", "modifiers": "public", "return": "Coin", "signature": "Coin subtract(final Coin value)", "full_signature": "public Coin subtract(final Coin value)", "class_method_signature": "Coin.subtract(final Coin value)", "testcase": false, "constructor": false}, {"identifier": "minus", "parameters": "(final Coin value)", "modifiers": "public", "return": "Coin", "signature": "Coin minus(final Coin value)", "full_signature": "public Coin minus(final Coin value)", "class_method_signature": "Coin.minus(final Coin value)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(final long factor)", "modifiers": "public", "return": "Coin", "signature": "Coin multiply(final long factor)", "full_signature": "public Coin multiply(final long factor)", "class_method_signature": "Coin.multiply(final long factor)", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(final long factor)", "modifiers": "public", "return": "Coin", "signature": "Coin times(final long factor)", "full_signature": "public Coin times(final long factor)", "class_method_signature": "Coin.times(final long factor)", "testcase": false, "constructor": false}, {"identifier": "times", "parameters": "(final int factor)", "modifiers": "public", "return": "Coin", "signature": "Coin times(final int factor)", "full_signature": "public Coin times(final int factor)", "class_method_signature": "Coin.times(final int factor)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(final long divisor)", "modifiers": "public", "return": "Coin", "signature": "Coin divide(final long divisor)", "full_signature": "public Coin divide(final long divisor)", "class_method_signature": "Coin.divide(final long divisor)", "testcase": false, "constructor": false}, {"identifier": "div", "parameters": "(final long divisor)", "modifiers": "public", "return": "Coin", "signature": "Coin div(final long divisor)", "full_signature": "public Coin div(final long divisor)", "class_method_signature": "Coin.div(final long divisor)", "testcase": false, "constructor": false}, {"identifier": "div", "parameters": "(final int divisor)", "modifiers": "public", "return": "Coin", "signature": "Coin div(final int divisor)", "full_signature": "public Coin div(final int divisor)", "class_method_signature": "Coin.div(final int divisor)", "testcase": false, "constructor": false}, {"identifier": "divideAndRemainder", "parameters": "(final long divisor)", "modifiers": "public", "return": "Coin[]", "signature": "Coin[] divideAndRemainder(final long divisor)", "full_signature": "public Coin[] divideAndRemainder(final long divisor)", "class_method_signature": "Coin.divideAndRemainder(final long divisor)", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "(final Coin divisor)", "modifiers": "public", "return": "long", "signature": "long divide(final Coin divisor)", "full_signature": "public long divide(final Coin divisor)", "class_method_signature": "Coin.divide(final Coin divisor)", "testcase": false, "constructor": false}, {"identifier": "isPositive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isPositive()", "full_signature": "public boolean isPositive()", "class_method_signature": "Coin.isPositive()", "testcase": false, "constructor": false}, {"identifier": "isNegative", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNegative()", "full_signature": "public boolean isNegative()", "class_method_signature": "Coin.isNegative()", "testcase": false, "constructor": false}, {"identifier": "isZero", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isZero()", "full_signature": "public boolean isZero()", "class_method_signature": "Coin.isZero()", "testcase": false, "constructor": false}, {"identifier": "isGreaterThan", "parameters": "(Coin other)", "modifiers": "public", "return": "boolean", "signature": "boolean isGreaterThan(Coin other)", "full_signature": "public boolean isGreaterThan(Coin other)", "class_method_signature": "Coin.isGreaterThan(Coin other)", "testcase": false, "constructor": false}, {"identifier": "isLessThan", "parameters": "(Coin other)", "modifiers": "public", "return": "boolean", "signature": "boolean isLessThan(Coin other)", "full_signature": "public boolean isLessThan(Coin other)", "class_method_signature": "Coin.isLessThan(Coin other)", "testcase": false, "constructor": false}, {"identifier": "shiftLeft", "parameters": "(final int n)", "modifiers": "public", "return": "Coin", "signature": "Coin shiftLeft(final int n)", "full_signature": "public Coin shiftLeft(final int n)", "class_method_signature": "Coin.shiftLeft(final int n)", "testcase": false, "constructor": false}, {"identifier": "shiftRight", "parameters": "(final int n)", "modifiers": "public", "return": "Coin", "signature": "Coin shiftRight(final int n)", "full_signature": "public Coin shiftRight(final int n)", "class_method_signature": "Coin.shiftRight(final int n)", "testcase": false, "constructor": false}, {"identifier": "signum", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int signum()", "full_signature": "@Override public int signum()", "class_method_signature": "Coin.signum()", "testcase": false, "constructor": false}, {"identifier": "negate", "parameters": "()", "modifiers": "public", "return": "Coin", "signature": "Coin negate()", "full_signature": "public Coin negate()", "class_method_signature": "Coin.negate()", "testcase": false, "constructor": false}, {"identifier": "longValue", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long longValue()", "full_signature": "public long longValue()", "class_method_signature": "Coin.longValue()", "testcase": false, "constructor": false}, {"identifier": "toFriendlyString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toFriendlyString()", "full_signature": "public String toFriendlyString()", "class_method_signature": "Coin.toFriendlyString()", "testcase": false, "constructor": false}, {"identifier": "toPlainString", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toPlainString()", "full_signature": "public String toPlainString()", "class_method_signature": "Coin.toPlainString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Coin.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "Coin.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Coin.hashCode()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(final Coin other)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(final Coin other)", "full_signature": "@Override public int compareTo(final Coin other)", "class_method_signature": "Coin.compareTo(final Coin other)", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ulordj/core/Coin.java"}, "focal_method": {"identifier": "parseCoinInexact", "parameters": "(final String str)", "modifiers": "public static", "return": "Coin", "body": "public static Coin parseCoinInexact(final String str) {\n        try {\n            long satoshis = new BigDecimal(str).movePointRight(SMALLEST_UNIT_EXPONENT).longValue();\n            return Coin.valueOf(satoshis);\n        } catch (ArithmeticException e) {\n            throw new IllegalArgumentException(e); // Repackage exception to honor method contract\n        }\n    }", "signature": "Coin parseCoinInexact(final String str)", "full_signature": "public static Coin parseCoinInexact(final String str)", "class_method_signature": "Coin.parseCoinInexact(final String str)", "testcase": false, "constructor": false, "invocations": ["longValue", "movePointRight", "valueOf"]}, "repository": {"repo_id": 133357466, "url": "https://github.com/UlordChain/ulordj", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 23, "size": 7129, "license": "licensed"}}