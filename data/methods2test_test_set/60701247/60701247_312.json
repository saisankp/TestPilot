{"test_class": {"identifier": "IndexedRegularExpressionIncludeResolverTest", "superclass": "", "interfaces": "", "fields": [], "file": "android/testSrc/com/android/tools/idea/navigator/nodes/ndk/includes/resolver/IndexedRegularExpressionIncludeResolverTest.java"}, "test_case": {"identifier": "testLibraryVariationNoMatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testLibraryVariationNoMatch() {\n    IndexedRegularExpressionIncludeResolver resolver =\n      new IndexedRegularExpressionIncludeResolver(PackageType.NdkComponent,\n                                                  \"^(/path/to/ndk-bundle)(/sources/android/native_app_glue(/.*))$\",\n                                                  \"Native App Glue\");\n    SimpleIncludeValue result = resolver.resolve(new File(\".\"));\n    assertThat(result).isNull();\n  }", "signature": "void testLibraryVariationNoMatch()", "full_signature": "@Test public void testLibraryVariationNoMatch()", "class_method_signature": "IndexedRegularExpressionIncludeResolverTest.testLibraryVariationNoMatch()", "testcase": true, "constructor": false, "invocations": ["resolve", "isNull", "assertThat"]}, "focal_class": {"identifier": "IndexedRegularExpressionIncludeResolver", "superclass": "extends RegularExpressionIncludeResolver", "interfaces": "", "fields": [{"original_string": "@NotNull private final PackageType myKind;", "modifier": "@NotNull private final", "type": "PackageType", "declarator": "myKind", "var_name": "myKind"}, {"original_string": "@NotNull private final String myPattern;", "modifier": "@NotNull private final", "type": "String", "declarator": "myPattern", "var_name": "myPattern"}, {"original_string": "@Nullable private final String myLibraryName;", "modifier": "@Nullable private final", "type": "String", "declarator": "myLibraryName", "var_name": "myLibraryName"}], "methods": [{"identifier": "IndexedRegularExpressionIncludeResolver", "parameters": "(\n    @NotNull PackageType kind,\n    @NotNull String pattern,\n    @Nullable String libraryName)", "modifiers": "", "return": "", "signature": " IndexedRegularExpressionIncludeResolver(\n    @NotNull PackageType kind,\n    @NotNull String pattern,\n    @Nullable String libraryName)", "full_signature": "  IndexedRegularExpressionIncludeResolver(\n    @NotNull PackageType kind,\n    @NotNull String pattern,\n    @Nullable String libraryName)", "class_method_signature": "IndexedRegularExpressionIncludeResolver.IndexedRegularExpressionIncludeResolver(\n    @NotNull PackageType kind,\n    @NotNull String pattern,\n    @Nullable String libraryName)", "testcase": false, "constructor": true}, {"identifier": "getMatchRegexTemplate", "parameters": "()", "modifiers": "@Override @NotNull", "return": "String", "signature": "String getMatchRegexTemplate()", "full_signature": "@Override @NotNull String getMatchRegexTemplate()", "class_method_signature": "IndexedRegularExpressionIncludeResolver.getMatchRegexTemplate()", "testcase": false, "constructor": false}, {"identifier": "groupOrNull", "parameters": "(Matcher match, String name)", "modifiers": "private", "return": "String", "signature": "String groupOrNull(Matcher match, String name)", "full_signature": "private String groupOrNull(Matcher match, String name)", "class_method_signature": "IndexedRegularExpressionIncludeResolver.groupOrNull(Matcher match, String name)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(@NotNull File includeFolder)", "modifiers": "@Override @Nullable public", "return": "SimpleIncludeValue", "signature": "SimpleIncludeValue resolve(@NotNull File includeFolder)", "full_signature": "@Override @Nullable public SimpleIncludeValue resolve(@NotNull File includeFolder)", "class_method_signature": "IndexedRegularExpressionIncludeResolver.resolve(@NotNull File includeFolder)", "testcase": false, "constructor": false}], "file": "android/src/com/android/tools/idea/navigator/nodes/ndk/includes/resolver/IndexedRegularExpressionIncludeResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(@NotNull File includeFolder)", "modifiers": "@Override @Nullable public", "return": "SimpleIncludeValue", "body": "@Override\n  @Nullable\n  public SimpleIncludeValue resolve(@NotNull File includeFolder) {\n    Matcher match = LexicalIncludePaths.matchFolderToRegex(getCompiledMatchPattern(), includeFolder);\n    if (!match.find()) {\n      return null;\n    }\n    try {\n      String relativeFolder = match.group(\"relative\");\n      String libraryName = myLibraryName;\n      if (libraryName == null) {\n        libraryName = match.group(\"library\");\n      }\n      String homeFolder = match.group(\"home\");\n      String description = myKind.myDescription;\n      String version = groupOrNull(match, \"ndk\");\n      if (version != null) {\n        // Convert NDK revision like 19.2.5345600 to standard NDK release name like r19c\n        Revision revision = Revision.parseRevision(version);\n        if (revision.getMinor() == 0) {\n          // Don't show 'a' in the NDK version. It should be r20 not r20a\n          description += String.format(\" r%s\", revision.getMajor());\n        } else {\n          char minor = (char)((int)'a' + revision.getMinor());\n          description += String.format(\" r%s%s\", revision.getMajor(), minor);\n        }\n      }\n      return new SimpleIncludeValue(myKind, description, libraryName, relativeFolder, includeFolder, new File(homeFolder));\n    } catch (IllegalArgumentException e) {\n      throw new RuntimeException(String.format(\"Pattern %s is missing a group name\", myPattern), e);\n    }\n  }", "signature": "SimpleIncludeValue resolve(@NotNull File includeFolder)", "full_signature": "@Override @Nullable public SimpleIncludeValue resolve(@NotNull File includeFolder)", "class_method_signature": "IndexedRegularExpressionIncludeResolver.resolve(@NotNull File includeFolder)", "testcase": false, "constructor": false, "invocations": ["matchFolderToRegex", "getCompiledMatchPattern", "find", "group", "group", "group", "groupOrNull", "parseRevision", "getMinor", "format", "getMajor", "getMinor", "format", "getMajor", "format"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}