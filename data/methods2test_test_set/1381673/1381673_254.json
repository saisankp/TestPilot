{"test_class": {"identifier": "ImportDMNResolverUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "kie-dmn/kie-dmn-core/src/test/java/org/kie/dmn/core/compiler/ImportDMNResolverUtilTest.java"}, "test_case": {"identifier": "testNSonly", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNSonly() {\n        final Import i = makeImport(\"ns1\", null, null);\n        final List<QName> available = Arrays.asList(new QName(\"ns1\", \"m1\"),\n                                                    new QName(\"ns2\", \"m2\"),\n                                                    new QName(\"ns3\", \"m3\"));\n        final Either<String, QName> result = ImportDMNResolverUtil.resolveImportDMN(i, available, Function.identity());\n        assertTrue(result.isRight());\n        assertEquals(new QName(\"ns1\", \"m1\"), result.getOrElse(null));\n    }", "signature": "void testNSonly()", "full_signature": "@Test public void testNSonly()", "class_method_signature": "ImportDMNResolverUtilTest.testNSonly()", "testcase": true, "constructor": false, "invocations": ["makeImport", "asList", "resolveImportDMN", "identity", "assertTrue", "isRight", "assertEquals", "getOrElse"]}, "focal_class": {"identifier": "ImportDMNResolverUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ImportDMNResolverUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " ImportDMNResolverUtil()", "full_signature": "private  ImportDMNResolverUtil()", "class_method_signature": "ImportDMNResolverUtil.ImportDMNResolverUtil()", "testcase": false, "constructor": true}, {"identifier": "resolveImportDMN", "parameters": "(Import _import, Collection<T> all, Function<T, QName> idExtractor)", "modifiers": "public static", "return": "Either<String, T>", "signature": "Either<String, T> resolveImportDMN(Import _import, Collection<T> all, Function<T, QName> idExtractor)", "full_signature": "public static Either<String, T> resolveImportDMN(Import _import, Collection<T> all, Function<T, QName> idExtractor)", "class_method_signature": "ImportDMNResolverUtil.resolveImportDMN(Import _import, Collection<T> all, Function<T, QName> idExtractor)", "testcase": false, "constructor": false}, {"identifier": "whichImportType", "parameters": "(Import _import)", "modifiers": "public static", "return": "ImportType", "signature": "ImportType whichImportType(Import _import)", "full_signature": "public static ImportType whichImportType(Import _import)", "class_method_signature": "ImportDMNResolverUtil.whichImportType(Import _import)", "testcase": false, "constructor": false}], "file": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/compiler/ImportDMNResolverUtil.java"}, "focal_method": {"identifier": "resolveImportDMN", "parameters": "(Import _import, Collection<T> all, Function<T, QName> idExtractor)", "modifiers": "public static", "return": "Either<String, T>", "body": "public static <T> Either<String, T> resolveImportDMN(Import _import, Collection<T> all, Function<T, QName> idExtractor) {\n        final String iNamespace = _import.getNamespace();\n        final String iName = _import.getName();\n        final String iModelName = _import.getAdditionalAttributes().get(TImport.MODELNAME_QNAME);\n        List<T> allInNS = all.stream()\n                             .filter(m -> idExtractor.apply(m).getNamespaceURI().equals(iNamespace))\n                             .collect(Collectors.toList());\n        if (allInNS.size() == 1) {\n            T located = allInNS.get(0);\n            // Check if the located DMN Model in the NS, correspond for the import `drools:modelName`. \n            if (iModelName == null || idExtractor.apply(located).getLocalPart().equals(iModelName)) {\n                return Either.ofRight(located);\n            } else {\n                return Either.ofLeft(String.format(\"While importing DMN for namespace: %s, name: %s, modelName: %s, located within namespace only %s but does not match for the actual name\",\n                                                   iNamespace, iName, iModelName,\n                                                   idExtractor.apply(located)));\n            }\n        } else {\n            List<T> usingNSandName = allInNS.stream()\n                                            .filter(m -> idExtractor.apply(m).getLocalPart().equals(iModelName))\n                                            .collect(Collectors.toList());\n            if (usingNSandName.size() == 1) {\n                return Either.ofRight(usingNSandName.get(0));\n            } else if (usingNSandName.size() == 0) {\n                return Either.ofLeft(String.format(\"Could not locate required dependency while importing DMN for namespace: %s, name: %s, modelName: %s.\",\n                                                   iNamespace, iName, iModelName));\n            } else {\n                return Either.ofLeft(String.format(\"While importing DMN for namespace: %s, name: %s, modelName: %s, could not locate required dependency within: %s.\",\n                                                   iNamespace, iName, iModelName,\n                                                   allInNS.stream().map(idExtractor).collect(Collectors.toList())));\n            }\n        }\n    }", "signature": "Either<String, T> resolveImportDMN(Import _import, Collection<T> all, Function<T, QName> idExtractor)", "full_signature": "public static Either<String, T> resolveImportDMN(Import _import, Collection<T> all, Function<T, QName> idExtractor)", "class_method_signature": "ImportDMNResolverUtil.resolveImportDMN(Import _import, Collection<T> all, Function<T, QName> idExtractor)", "testcase": false, "constructor": false, "invocations": ["getNamespace", "getName", "get", "getAdditionalAttributes", "collect", "filter", "stream", "equals", "getNamespaceURI", "apply", "toList", "size", "get", "equals", "getLocalPart", "apply", "ofRight", "ofLeft", "format", "apply", "collect", "filter", "stream", "equals", "getLocalPart", "apply", "toList", "size", "ofRight", "get", "size", "ofLeft", "format", "ofLeft", "format", "collect", "map", "stream", "toList"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}