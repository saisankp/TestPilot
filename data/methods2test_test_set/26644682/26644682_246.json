{"test_class": {"identifier": "ShannonEntropyTest", "superclass": "", "interfaces": "", "fields": [], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/util/ShannonEntropyTest.java"}, "test_case": {"identifier": "should_not_compute_entropy_for_a_value_with_frequency_of_zero", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void should_not_compute_entropy_for_a_value_with_frequency_of_zero() {\n        // given\n        List frequencies = Arrays.asList(0.25, 0.25, 0.25, 0.0);\n\n        // when\n        ShannonEntropy.computeWithFrequencies(frequencies);\n        // then\n    }", "signature": "void should_not_compute_entropy_for_a_value_with_frequency_of_zero()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void should_not_compute_entropy_for_a_value_with_frequency_of_zero()", "class_method_signature": "ShannonEntropyTest.should_not_compute_entropy_for_a_value_with_frequency_of_zero()", "testcase": true, "constructor": false, "invocations": ["asList", "computeWithFrequencies"]}, "focal_class": {"identifier": "ShannonEntropy", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "computeWithFrequencies", "parameters": "(Collection<Double> frequencies)", "modifiers": "public static", "return": "double", "signature": "double computeWithFrequencies(Collection<Double> frequencies)", "full_signature": "public static double computeWithFrequencies(Collection<Double> frequencies)", "class_method_signature": "ShannonEntropy.computeWithFrequencies(Collection<Double> frequencies)", "testcase": false, "constructor": false}, {"identifier": "computeWithValues", "parameters": "(Collection<T> values)", "modifiers": "public static", "return": "double", "signature": "double computeWithValues(Collection<T> values)", "full_signature": "public static double computeWithValues(Collection<T> values)", "class_method_signature": "ShannonEntropy.computeWithValues(Collection<T> values)", "testcase": false, "constructor": false}, {"identifier": "maxEntropy", "parameters": "(int cardinality)", "modifiers": "public static", "return": "double", "signature": "double maxEntropy(int cardinality)", "full_signature": "public static double maxEntropy(int cardinality)", "class_method_signature": "ShannonEntropy.maxEntropy(int cardinality)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/util/ShannonEntropy.java"}, "focal_method": {"identifier": "computeWithFrequencies", "parameters": "(Collection<Double> frequencies)", "modifiers": "public static", "return": "double", "body": "public static double computeWithFrequencies(Collection<Double> frequencies) {\n        if (frequencies.contains(0D)) {\n            throw new IllegalArgumentException(\n                    \"Values with null frequency are not permitted when computing Shannon entropy\");\n        }\n\n        if (frequencies.isEmpty()) {\n            return Double.MAX_VALUE;\n        }\n        double entropy = frequencies.stream().mapToDouble(d -> d).map(s -> s * Math.log(s)).sum();\n        entropy = (-entropy / Math.log(2));\n\n        return Math.abs(entropy);\n    }", "signature": "double computeWithFrequencies(Collection<Double> frequencies)", "full_signature": "public static double computeWithFrequencies(Collection<Double> frequencies)", "class_method_signature": "ShannonEntropy.computeWithFrequencies(Collection<Double> frequencies)", "testcase": false, "constructor": false, "invocations": ["contains", "isEmpty", "sum", "map", "mapToDouble", "stream", "log", "log", "abs"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}