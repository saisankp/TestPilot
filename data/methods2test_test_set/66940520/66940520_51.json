{"test_class": {"identifier": "OptionObjectBundleHookTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private OptionObjectBundleHook hook = new OptionObjectBundleHook();", "modifier": "private", "type": "OptionObjectBundleHook", "declarator": "hook = new OptionObjectBundleHook()", "var_name": "hook"}, {"original_string": "private Preheat preheat = new Preheat();", "modifier": "private", "type": "Preheat", "declarator": "preheat = new Preheat()", "var_name": "preheat"}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/test/java/org/hisp/dhis/dxf2/metadata/objectbundle/hooks/OptionObjectBundleHookTest.java"}, "test_case": {"identifier": "preCreate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void preCreate()\n    {\n        OptionSet optionSet = new OptionSet();\n        optionSet.setUid( \"jadhjSHdhs\" );\n        Option option = new Option();\n        option.setOptionSet( optionSet );\n\n        OptionSet persistedOptionSet = new OptionSet();\n        persistedOptionSet.setUid( \"jadhjSHdhs\" );\n        preheat.put( PreheatIdentifier.UID, persistedOptionSet );\n\n        ObjectBundleParams objectBundleParams = new ObjectBundleParams();\n        objectBundleParams.setPreheatIdentifier( PreheatIdentifier.UID );\n        ObjectBundle bundle = new ObjectBundle( objectBundleParams, preheat, Collections.emptyMap() );\n        hook.preCreate( option, bundle );\n\n        Assert.assertEquals( 1, persistedOptionSet.getOptions().size() );\n        Assert.assertSame( option, persistedOptionSet.getOptions().get( 0 ) );\n    }", "signature": "void preCreate()", "full_signature": "@Test public void preCreate()", "class_method_signature": "OptionObjectBundleHookTest.preCreate()", "testcase": true, "constructor": false, "invocations": ["setUid", "setOptionSet", "setUid", "put", "setPreheatIdentifier", "emptyMap", "preCreate", "assertEquals", "size", "getOptions", "assertSame", "get", "getOptions"]}, "focal_class": {"identifier": "OptionObjectBundleHook", "superclass": "extends AbstractObjectBundleHook", "interfaces": "", "fields": [], "methods": [{"identifier": "validate", "parameters": "( T object, ObjectBundle bundle )", "modifiers": "@Override public", "return": "List<ErrorReport>", "signature": "List<ErrorReport> validate( T object, ObjectBundle bundle )", "full_signature": "@Override public List<ErrorReport> validate( T object, ObjectBundle bundle )", "class_method_signature": "OptionObjectBundleHook.validate( T object, ObjectBundle bundle )", "testcase": false, "constructor": false}, {"identifier": "preCreate", "parameters": "( T object, ObjectBundle bundle )", "modifiers": "@Override public", "return": "void", "signature": "void preCreate( T object, ObjectBundle bundle )", "full_signature": "@Override public void preCreate( T object, ObjectBundle bundle )", "class_method_signature": "OptionObjectBundleHook.preCreate( T object, ObjectBundle bundle )", "testcase": false, "constructor": false}, {"identifier": "checkDuplicateOption", "parameters": "( OptionSet optionSet, Option checkOption )", "modifiers": "private", "return": "List<ErrorReport>", "signature": "List<ErrorReport> checkDuplicateOption( OptionSet optionSet, Option checkOption )", "full_signature": "private List<ErrorReport> checkDuplicateOption( OptionSet optionSet, Option checkOption )", "class_method_signature": "OptionObjectBundleHook.checkDuplicateOption( OptionSet optionSet, Option checkOption )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-dxf2/src/main/java/org/hisp/dhis/dxf2/metadata/objectbundle/hooks/OptionObjectBundleHook.java"}, "focal_method": {"identifier": "preCreate", "parameters": "( T object, ObjectBundle bundle )", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public <T extends IdentifiableObject> void preCreate( T object, ObjectBundle bundle )\n    {\n        if ( !(object instanceof Option) )\n        {\n            return;\n        }\n\n        final Option option = (Option) object;\n\n        // if the bundle contains also the option set there is no need to add the option here\n        // (will be done automatically later and option set may contain raw value already)\n        if ( option.getOptionSet() != null && !bundle.containsObject( option.getOptionSet() ) )\n        {\n            OptionSet optionSet = bundle.getPreheat().get( bundle.getPreheatIdentifier(), OptionSet.class, option.getOptionSet() );\n\n            if ( optionSet != null )\n            {\n                optionSet.addOption( option );\n            }\n        }\n    }", "signature": "void preCreate( T object, ObjectBundle bundle )", "full_signature": "@Override public void preCreate( T object, ObjectBundle bundle )", "class_method_signature": "OptionObjectBundleHook.preCreate( T object, ObjectBundle bundle )", "testcase": false, "constructor": false, "invocations": ["getOptionSet", "containsObject", "getOptionSet", "get", "getPreheat", "getPreheatIdentifier", "getOptionSet", "addOption"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}