{"test_class": {"identifier": "MaintenanceSchedulerTest", "superclass": "extends BaseMaintenanceTest", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    @Spy\n    private MaintenanceScheduler scheduler;", "modifier": "@InjectMocks\n    @Spy\n    private", "type": "MaintenanceScheduler", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "@Spy\n    private List<MaintenanceTaskProcess> listTask = new ArrayList<>();", "modifier": "@Spy\n    private", "type": "List<MaintenanceTaskProcess>", "declarator": "listTask = new ArrayList<>()", "var_name": "listTask"}, {"original_string": "@Mock\n    private Security security;", "modifier": "@Mock\n    private", "type": "Security", "declarator": "security", "var_name": "security"}], "file": "dataprep-maintenance/src/test/java/org/talend/dataprep/maintenance/executor/MaintenanceSchedulerTest.java"}, "test_case": {"identifier": "testScheduleRepeat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testScheduleRepeat() {\n\n        scheduler.launchRepeatlyTask();\n\n        // only task with ScheduleFrequency = REPEAT are call\n        verify(listTask.get(4), times(1)).performTask();\n        verify(listTask.get(5), times(0)).performTask();\n\n        listTask\n                .stream() //\n                .filter(task -> !(task instanceof MockScheduledRepeatTask))\n                .forEach(task -> {\n                    verify(task, times(0)).performTask();\n                    verify(task, times(0)).condition();\n                    verify(task, times(0)).execute();\n                });\n    }", "signature": "void testScheduleRepeat()", "full_signature": "@Test public void testScheduleRepeat()", "class_method_signature": "MaintenanceSchedulerTest.testScheduleRepeat()", "testcase": true, "constructor": false, "invocations": ["launchRepeatlyTask", "performTask", "verify", "get", "times", "performTask", "verify", "get", "times", "forEach", "filter", "stream", "performTask", "verify", "times", "condition", "verify", "times", "execute", "verify", "times"]}, "focal_class": {"identifier": "MaintenanceScheduler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(MaintenanceScheduler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(MaintenanceScheduler.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private List<MaintenanceTaskProcess> maintenanceTasks;", "modifier": "@Autowired\n    private", "type": "List<MaintenanceTaskProcess>", "declarator": "maintenanceTasks", "var_name": "maintenanceTasks"}, {"original_string": "@Autowired\n    private ForAll forAll;", "modifier": "@Autowired\n    private", "type": "ForAll", "declarator": "forAll", "var_name": "forAll"}, {"original_string": "@Autowired\n    private Security security;", "modifier": "@Autowired\n    private", "type": "Security", "declarator": "security", "var_name": "security"}, {"original_string": "@Autowired\n    private TaskExecutor taskExecutor;", "modifier": "@Autowired\n    private", "type": "TaskExecutor", "declarator": "taskExecutor", "var_name": "taskExecutor"}, {"original_string": "private Map<String, Long> runningTask = new ConcurrentHashMap<>();", "modifier": "private", "type": "Map<String, Long>", "declarator": "runningTask = new ConcurrentHashMap<>()", "var_name": "runningTask"}], "methods": [{"identifier": "launchOnceTask", "parameters": "()", "modifiers": "@PostConstruct public", "return": "void", "signature": "void launchOnceTask()", "full_signature": "@PostConstruct public void launchOnceTask()", "class_method_signature": "MaintenanceScheduler.launchOnceTask()", "testcase": false, "constructor": false}, {"identifier": "launchNightlyTask", "parameters": "()", "modifiers": "@Scheduled(cron = \"${maintenance.scheduled.cron}\") public", "return": "void", "signature": "void launchNightlyTask()", "full_signature": "@Scheduled(cron = \"${maintenance.scheduled.cron}\") public void launchNightlyTask()", "class_method_signature": "MaintenanceScheduler.launchNightlyTask()", "testcase": false, "constructor": false}, {"identifier": "launchRepeatlyTask", "parameters": "()", "modifiers": "@Scheduled(fixedDelayString = \"${maintenance.scheduled.fixed-delay}\", initialDelayString = \"${maintenance.scheduled.initial-delay}\") public", "return": "void", "signature": "void launchRepeatlyTask()", "full_signature": "@Scheduled(fixedDelayString = \"${maintenance.scheduled.fixed-delay}\", initialDelayString = \"${maintenance.scheduled.initial-delay}\") public void launchRepeatlyTask()", "class_method_signature": "MaintenanceScheduler.launchRepeatlyTask()", "testcase": false, "constructor": false}, {"identifier": "runMaintenanceTask", "parameters": "(ScheduleFrequency frequency)", "modifiers": "private", "return": "void", "signature": "void runMaintenanceTask(ScheduleFrequency frequency)", "full_signature": "private void runMaintenanceTask(ScheduleFrequency frequency)", "class_method_signature": "MaintenanceScheduler.runMaintenanceTask(ScheduleFrequency frequency)", "testcase": false, "constructor": false}, {"identifier": "executeTask", "parameters": "(String tenantId, MaintenanceTaskProcess task, String taskKey)", "modifiers": "private", "return": "void", "signature": "void executeTask(String tenantId, MaintenanceTaskProcess task, String taskKey)", "full_signature": "private void executeTask(String tenantId, MaintenanceTaskProcess task, String taskKey)", "class_method_signature": "MaintenanceScheduler.executeTask(String tenantId, MaintenanceTaskProcess task, String taskKey)", "testcase": false, "constructor": false}, {"identifier": "isAlreadyRunning", "parameters": "(String taskKey)", "modifiers": "protected", "return": "boolean", "signature": "boolean isAlreadyRunning(String taskKey)", "full_signature": "protected boolean isAlreadyRunning(String taskKey)", "class_method_signature": "MaintenanceScheduler.isAlreadyRunning(String taskKey)", "testcase": false, "constructor": false}], "file": "dataprep-maintenance/src/main/java/org/talend/dataprep/maintenance/executor/MaintenanceScheduler.java"}, "focal_method": {"identifier": "launchRepeatlyTask", "parameters": "()", "modifiers": "@Scheduled(fixedDelayString = \"${maintenance.scheduled.fixed-delay}\", initialDelayString = \"${maintenance.scheduled.initial-delay}\") public", "return": "void", "body": "@Scheduled(fixedDelayString = \"${maintenance.scheduled.fixed-delay}\",\n            initialDelayString = \"${maintenance.scheduled.initial-delay}\")\n    public void launchRepeatlyTask() {\n        runMaintenanceTask(REPEAT);\n    }", "signature": "void launchRepeatlyTask()", "full_signature": "@Scheduled(fixedDelayString = \"${maintenance.scheduled.fixed-delay}\", initialDelayString = \"${maintenance.scheduled.initial-delay}\") public void launchRepeatlyTask()", "class_method_signature": "MaintenanceScheduler.launchRepeatlyTask()", "testcase": false, "constructor": false, "invocations": ["runMaintenanceTask"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}