{"test_class": {"identifier": "JsonConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File testInputBaseDir = new File(\"src/test/resources/JsonConverterTest\");", "modifier": "private final", "type": "File", "declarator": "testInputBaseDir = new File(\"src/test/resources/JsonConverterTest\")", "var_name": "testInputBaseDir"}, {"original_string": "private final File testOutputBaseDir = new File(\"target/test-out/JsonConverterTest\");", "modifier": "private final", "type": "File", "declarator": "testOutputBaseDir = new File(\"target/test-out/JsonConverterTest\")", "var_name": "testOutputBaseDir"}], "file": "maven/src/test/java/net/adamcin/oakpal/maven/component/JsonConverterTest.java"}, "test_case": {"identifier": "testPlexusPluralStem", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPlexusPluralStem() {\n        Map<String, String> cases = new LinkedHashMap<>();\n        cases.put(\"meetings\", \"meeting\");\n        cases.put(\"caresses\", \"caress\");\n        cases.put(\"flatFiles\", \"file\");\n        cases.put(\"pinkUnicornPonies\", \"poni\");\n        cases.put(\"pony\", \"poni\");\n        cases.put(\"some_people_like_snakes\", \"snake\");\n        cases.put(\"snake\", \"snake\");\n        cases.put(\"some.people.like.dots\", \"dot\");\n        cases.put(\"denyNodeTypes\", \"type\");\n        cases.put(\"denyNodeType\", \"type\");\n        cases.put(\"abyss\", \"abyss\");\n        cases.put(\"why\", \"whi\");\n        cases.put(\"whys\", \"whi\");\n\n        for (Map.Entry<String, String> entry : cases.entrySet()) {\n            Assert.assertEquals(\"should stem to\", entry.getValue(),\n                    JsonConverter.plexusPluralStem(entry.getKey()));\n        }\n\n    }", "signature": "void testPlexusPluralStem()", "full_signature": "@Test public void testPlexusPluralStem()", "class_method_signature": "JsonConverterTest.testPlexusPluralStem()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "put", "entrySet", "assertEquals", "getValue", "plexusPluralStem", "getKey"]}, "focal_class": {"identifier": "JsonConverter", "superclass": "extends AbstractConfigurationConverter", "interfaces": "", "fields": [{"original_string": "static final String HINT_LIST = \"list\";", "modifier": "static final", "type": "String", "declarator": "HINT_LIST = \"list\"", "var_name": "HINT_LIST"}, {"original_string": "static final String HINT_MAP = \"map\";", "modifier": "static final", "type": "String", "declarator": "HINT_MAP = \"map\"", "var_name": "HINT_MAP"}, {"original_string": "static final String HINT_STRING = \"string\";", "modifier": "static final", "type": "String", "declarator": "HINT_STRING = \"string\"", "var_name": "HINT_STRING"}, {"original_string": "static final String HINT_NUMBER = \"number\";", "modifier": "static final", "type": "String", "declarator": "HINT_NUMBER = \"number\"", "var_name": "HINT_NUMBER"}, {"original_string": "static final String HINT_BOOLEAN = \"boolean\";", "modifier": "static final", "type": "String", "declarator": "HINT_BOOLEAN = \"boolean\"", "var_name": "HINT_BOOLEAN"}, {"original_string": "static final String HINT_VALUE_LITERAL = \"json\";", "modifier": "static final", "type": "String", "declarator": "HINT_VALUE_LITERAL = \"json\"", "var_name": "HINT_VALUE_LITERAL"}, {"original_string": "static final String HINT_OBJECT_LITERAL = \"jsonobject\";", "modifier": "static final", "type": "String", "declarator": "HINT_OBJECT_LITERAL = \"jsonobject\"", "var_name": "HINT_OBJECT_LITERAL"}, {"original_string": "static final String HINT_ARRAY_LITERAL = \"jsonarray\";", "modifier": "static final", "type": "String", "declarator": "HINT_ARRAY_LITERAL = \"jsonarray\"", "var_name": "HINT_ARRAY_LITERAL"}, {"original_string": "private static final Pattern KEY_DELIM = Pattern.compile(\"(_|\\\\W|(?=[A-Z]))\");", "modifier": "private static final", "type": "Pattern", "declarator": "KEY_DELIM = Pattern.compile(\"(_|\\\\W|(?=[A-Z]))\")", "var_name": "KEY_DELIM"}, {"original_string": "private static final Pattern DOUBLE_ESS_E_ESS_TO_DOUBLE_ESS = Pattern.compile(\"sses$\");", "modifier": "private static final", "type": "Pattern", "declarator": "DOUBLE_ESS_E_ESS_TO_DOUBLE_ESS = Pattern.compile(\"sses$\")", "var_name": "DOUBLE_ESS_E_ESS_TO_DOUBLE_ESS"}, {"original_string": "private static final Pattern I_E_ESS_TO_I = Pattern.compile(\"(?<=[a-z]{2})ies$\");", "modifier": "private static final", "type": "Pattern", "declarator": "I_E_ESS_TO_I = Pattern.compile(\"(?<=[a-z]{2})ies$\")", "var_name": "I_E_ESS_TO_I"}, {"original_string": "private static final Pattern I_E_ESS_TO_IE = Pattern.compile(\"ies$\");", "modifier": "private static final", "type": "Pattern", "declarator": "I_E_ESS_TO_IE = Pattern.compile(\"ies$\")", "var_name": "I_E_ESS_TO_IE"}, {"original_string": "private static final Pattern PRECEDING_VOWEL_NOT_DOUBLE_ESS = Pattern.compile(\"^.*[aeiouwy].*[^s]s$\");", "modifier": "private static final", "type": "Pattern", "declarator": "PRECEDING_VOWEL_NOT_DOUBLE_ESS = Pattern.compile(\"^.*[aeiouwy].*[^s]s$\")", "var_name": "PRECEDING_VOWEL_NOT_DOUBLE_ESS"}, {"original_string": "private static final Pattern ESS_SUFFIX_TO_DROP = Pattern.compile(\"s$\");", "modifier": "private static final", "type": "Pattern", "declarator": "ESS_SUFFIX_TO_DROP = Pattern.compile(\"s$\")", "var_name": "ESS_SUFFIX_TO_DROP"}, {"original_string": "private static final Pattern REPLACEABLE_WHY_TO_I = Pattern.compile(\"(?<=[a-z][^aeiou])y$\");", "modifier": "private static final", "type": "Pattern", "declarator": "REPLACEABLE_WHY_TO_I = Pattern.compile(\"(?<=[a-z][^aeiou])y$\")", "var_name": "REPLACEABLE_WHY_TO_I"}], "methods": [{"identifier": "plexusPluralStem", "parameters": "(final String key)", "modifiers": "public static", "return": "String", "signature": "String plexusPluralStem(final String key)", "full_signature": "public static String plexusPluralStem(final String key)", "class_method_signature": "JsonConverter.plexusPluralStem(final String key)", "testcase": false, "constructor": false}, {"identifier": "canConvert", "parameters": "(final Class<?> type)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canConvert(final Class<?> type)", "full_signature": "@Override public boolean canConvert(final Class<?> type)", "class_method_signature": "JsonConverter.canConvert(final Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "fromConfiguration", "parameters": "(final ConverterLookup lookup,\n                                    final PlexusConfiguration configuration,\n                                    final Class<?> type,\n                                    final Class<?> enclosingType,\n                                    final ClassLoader loader,\n                                    final ExpressionEvaluator evaluator,\n                                    final ConfigurationListener listener)", "modifiers": "@Override public", "return": "Object", "signature": "Object fromConfiguration(final ConverterLookup lookup,\n                                    final PlexusConfiguration configuration,\n                                    final Class<?> type,\n                                    final Class<?> enclosingType,\n                                    final ClassLoader loader,\n                                    final ExpressionEvaluator evaluator,\n                                    final ConfigurationListener listener)", "full_signature": "@Override public Object fromConfiguration(final ConverterLookup lookup,\n                                    final PlexusConfiguration configuration,\n                                    final Class<?> type,\n                                    final Class<?> enclosingType,\n                                    final ClassLoader loader,\n                                    final ExpressionEvaluator evaluator,\n                                    final ConfigurationListener listener)", "class_method_signature": "JsonConverter.fromConfiguration(final ConverterLookup lookup,\n                                    final PlexusConfiguration configuration,\n                                    final Class<?> type,\n                                    final Class<?> enclosingType,\n                                    final ClassLoader loader,\n                                    final ExpressionEvaluator evaluator,\n                                    final ConfigurationListener listener)", "testcase": false, "constructor": false}, {"identifier": "convertChild", "parameters": "(final @NotNull PlexusConfiguration child, final ExpressionEvaluator evaluator)", "modifiers": "public", "return": "JsonValue", "signature": "JsonValue convertChild(final @NotNull PlexusConfiguration child, final ExpressionEvaluator evaluator)", "full_signature": "public JsonValue convertChild(final @NotNull PlexusConfiguration child, final ExpressionEvaluator evaluator)", "class_method_signature": "JsonConverter.convertChild(final @NotNull PlexusConfiguration child, final ExpressionEvaluator evaluator)", "testcase": false, "constructor": false}, {"identifier": "mightBeList", "parameters": "(final @NotNull PlexusConfiguration config)", "modifiers": "", "return": "boolean", "signature": "boolean mightBeList(final @NotNull PlexusConfiguration config)", "full_signature": " boolean mightBeList(final @NotNull PlexusConfiguration config)", "class_method_signature": "JsonConverter.mightBeList(final @NotNull PlexusConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "readJsonObjectFromConfig", "parameters": "(final @NotNull PlexusConfiguration config,\n                                        final ExpressionEvaluator evaluator)", "modifiers": "", "return": "JsonObject", "signature": "JsonObject readJsonObjectFromConfig(final @NotNull PlexusConfiguration config,\n                                        final ExpressionEvaluator evaluator)", "full_signature": " JsonObject readJsonObjectFromConfig(final @NotNull PlexusConfiguration config,\n                                        final ExpressionEvaluator evaluator)", "class_method_signature": "JsonConverter.readJsonObjectFromConfig(final @NotNull PlexusConfiguration config,\n                                        final ExpressionEvaluator evaluator)", "testcase": false, "constructor": false}, {"identifier": "readJsonArrayFromConfig", "parameters": "(final @NotNull PlexusConfiguration config,\n                                      final ExpressionEvaluator evaluator)", "modifiers": "", "return": "JsonArray", "signature": "JsonArray readJsonArrayFromConfig(final @NotNull PlexusConfiguration config,\n                                      final ExpressionEvaluator evaluator)", "full_signature": " JsonArray readJsonArrayFromConfig(final @NotNull PlexusConfiguration config,\n                                      final ExpressionEvaluator evaluator)", "class_method_signature": "JsonConverter.readJsonArrayFromConfig(final @NotNull PlexusConfiguration config,\n                                      final ExpressionEvaluator evaluator)", "testcase": false, "constructor": false}, {"identifier": "readJsonObjectFromValue", "parameters": "(final String key, final @Nullable Object value)", "modifiers": "", "return": "JsonValue", "signature": "JsonValue readJsonObjectFromValue(final String key, final @Nullable Object value)", "full_signature": " JsonValue readJsonObjectFromValue(final String key, final @Nullable Object value)", "class_method_signature": "JsonConverter.readJsonObjectFromValue(final String key, final @Nullable Object value)", "testcase": false, "constructor": false}, {"identifier": "readJsonArrayFromValue", "parameters": "(final String key, final @Nullable Object value)", "modifiers": "", "return": "JsonValue", "signature": "JsonValue readJsonArrayFromValue(final String key, final @Nullable Object value)", "full_signature": " JsonValue readJsonArrayFromValue(final String key, final @Nullable Object value)", "class_method_signature": "JsonConverter.readJsonArrayFromValue(final String key, final @Nullable Object value)", "testcase": false, "constructor": false}, {"identifier": "readJsonValueFromValue", "parameters": "(final String key, final @Nullable Object value)", "modifiers": "", "return": "JsonValue", "signature": "JsonValue readJsonValueFromValue(final String key, final @Nullable Object value)", "full_signature": " JsonValue readJsonValueFromValue(final String key, final @Nullable Object value)", "class_method_signature": "JsonConverter.readJsonValueFromValue(final String key, final @Nullable Object value)", "testcase": false, "constructor": false}, {"identifier": "readNumberFromValue", "parameters": "(final String key, final @Nullable Object value)", "modifiers": "", "return": "Number", "signature": "Number readNumberFromValue(final String key, final @Nullable Object value)", "full_signature": " Number readNumberFromValue(final String key, final @Nullable Object value)", "class_method_signature": "JsonConverter.readNumberFromValue(final String key, final @Nullable Object value)", "testcase": false, "constructor": false}, {"identifier": "isBlankish", "parameters": "(final Object value)", "modifiers": "", "return": "boolean", "signature": "boolean isBlankish(final Object value)", "full_signature": " boolean isBlankish(final Object value)", "class_method_signature": "JsonConverter.isBlankish(final Object value)", "testcase": false, "constructor": false}, {"identifier": "readBooleanFromValue", "parameters": "(final String key, final @Nullable Object value)", "modifiers": "", "return": "Boolean", "signature": "Boolean readBooleanFromValue(final String key, final @Nullable Object value)", "full_signature": " Boolean readBooleanFromValue(final String key, final @Nullable Object value)", "class_method_signature": "JsonConverter.readBooleanFromValue(final String key, final @Nullable Object value)", "testcase": false, "constructor": false}, {"identifier": "stringToValue", "parameters": "(String string)", "modifiers": "public static", "return": "Object", "signature": "Object stringToValue(String string)", "full_signature": "public static Object stringToValue(String string)", "class_method_signature": "JsonConverter.stringToValue(String string)", "testcase": false, "constructor": false}], "file": "maven/src/main/java/net/adamcin/oakpal/maven/component/JsonConverter.java"}, "focal_method": {"identifier": "plexusPluralStem", "parameters": "(final String key)", "modifiers": "public static", "return": "String", "body": "public static String plexusPluralStem(final String key) {\n        String[] camelWords = KEY_DELIM.split(key);\n        String lastWord = camelWords[camelWords.length - 1].toLowerCase();\n\n        lastWord = DOUBLE_ESS_E_ESS_TO_DOUBLE_ESS.matcher(lastWord).replaceAll(\"ss\");\n        lastWord = I_E_ESS_TO_I.matcher(lastWord).replaceAll(\"i\");\n        lastWord = I_E_ESS_TO_IE.matcher(lastWord).replaceAll(\"ie\");\n        lastWord = PRECEDING_VOWEL_NOT_DOUBLE_ESS.matcher(lastWord).matches()\n                ? ESS_SUFFIX_TO_DROP.matcher(lastWord).replaceAll(\"\")\n                : lastWord;\n        lastWord = REPLACEABLE_WHY_TO_I.matcher(lastWord).replaceAll(\"i\");\n        return lastWord;\n    }", "signature": "String plexusPluralStem(final String key)", "full_signature": "public static String plexusPluralStem(final String key)", "class_method_signature": "JsonConverter.plexusPluralStem(final String key)", "testcase": false, "constructor": false, "invocations": ["split", "toLowerCase", "replaceAll", "matcher", "replaceAll", "matcher", "replaceAll", "matcher", "matches", "matcher", "replaceAll", "matcher", "replaceAll", "matcher"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}