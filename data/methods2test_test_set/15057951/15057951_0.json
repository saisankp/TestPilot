{"test_class": {"identifier": "SpringParamEngineFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SpringParamEngineFactory springParamEngineFactory;", "modifier": "private", "type": "SpringParamEngineFactory", "declarator": "springParamEngineFactory", "var_name": "springParamEngineFactory"}], "file": "smartparam-spring/src/test/java/org/smartparam/spring/SpringParamEngineFactoryTest.java"}, "test_case": {"identifier": "shouldCreateNewConfigObjectIfNoneSpecified", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCreateNewConfigObjectIfNoneSpecified() throws Exception {\n        // when\n        ParamEngine paramEngine = springParamEngineFactory.getObject();\n\n        // then\n        assertThat(paramEngine.runtimeConfiguration()).hasParamCache().hasFunctionCache();\n    }", "signature": "void shouldCreateNewConfigObjectIfNoneSpecified()", "full_signature": "@Test public void shouldCreateNewConfigObjectIfNoneSpecified()", "class_method_signature": "SpringParamEngineFactoryTest.shouldCreateNewConfigObjectIfNoneSpecified()", "testcase": true, "constructor": false, "invocations": ["getObject", "hasFunctionCache", "hasParamCache", "assertThat", "runtimeConfiguration"]}, "focal_class": {"identifier": "SpringParamEngineFactory", "superclass": "", "interfaces": "implements FactoryBean<ParamEngine>, ApplicationContextAware", "fields": [{"original_string": "private ApplicationContext appContext;", "modifier": "private", "type": "ApplicationContext", "declarator": "appContext", "var_name": "appContext"}, {"original_string": "private ParamRepository paramRepository;", "modifier": "private", "type": "ParamRepository", "declarator": "paramRepository", "var_name": "paramRepository"}, {"original_string": "private boolean scanAnnotations = true;", "modifier": "private", "type": "boolean", "declarator": "scanAnnotations = true", "var_name": "scanAnnotations"}, {"original_string": "private final List<String> packagesToScan = new ArrayList<String>();", "modifier": "private final", "type": "List<String>", "declarator": "packagesToScan = new ArrayList<String>()", "var_name": "packagesToScan"}], "methods": [{"identifier": "getObject", "parameters": "()", "modifiers": "@Override public", "return": "ParamEngine", "signature": "ParamEngine getObject()", "full_signature": "@Override public ParamEngine getObject()", "class_method_signature": "SpringParamEngineFactory.getObject()", "testcase": false, "constructor": false}, {"identifier": "getObjectType", "parameters": "()", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> getObjectType()", "full_signature": "@Override public Class<?> getObjectType()", "class_method_signature": "SpringParamEngineFactory.getObjectType()", "testcase": false, "constructor": false}, {"identifier": "isSingleton", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isSingleton()", "full_signature": "@Override public boolean isSingleton()", "class_method_signature": "SpringParamEngineFactory.isSingleton()", "testcase": false, "constructor": false}, {"identifier": "setParamRepository", "parameters": "(ParamRepository paramRepository)", "modifiers": "public", "return": "void", "signature": "void setParamRepository(ParamRepository paramRepository)", "full_signature": "public void setParamRepository(ParamRepository paramRepository)", "class_method_signature": "SpringParamEngineFactory.setParamRepository(ParamRepository paramRepository)", "testcase": false, "constructor": false}, {"identifier": "setScanAnnotations", "parameters": "(boolean scanAnnotations)", "modifiers": "public", "return": "void", "signature": "void setScanAnnotations(boolean scanAnnotations)", "full_signature": "public void setScanAnnotations(boolean scanAnnotations)", "class_method_signature": "SpringParamEngineFactory.setScanAnnotations(boolean scanAnnotations)", "testcase": false, "constructor": false}, {"identifier": "setPackagesToScan", "parameters": "(List<String> packagesToScan)", "modifiers": "public", "return": "void", "signature": "void setPackagesToScan(List<String> packagesToScan)", "full_signature": "public void setPackagesToScan(List<String> packagesToScan)", "class_method_signature": "SpringParamEngineFactory.setPackagesToScan(List<String> packagesToScan)", "testcase": false, "constructor": false}, {"identifier": "setApplicationContext", "parameters": "(ApplicationContext appContext)", "modifiers": "@Override public", "return": "void", "signature": "void setApplicationContext(ApplicationContext appContext)", "full_signature": "@Override public void setApplicationContext(ApplicationContext appContext)", "class_method_signature": "SpringParamEngineFactory.setApplicationContext(ApplicationContext appContext)", "testcase": false, "constructor": false}], "file": "smartparam-spring/src/main/java/org/smartparam/spring/SpringParamEngineFactory.java"}, "focal_method": {"identifier": "getObject", "parameters": "()", "modifiers": "@Override public", "return": "ParamEngine", "body": "@Override\n    public ParamEngine getObject() {\n        ParamEngineConfigBuilder configBuilder = ParamEngineConfigBuilder.paramEngineConfig();\n        if (paramRepository != null) {\n            configBuilder.withParameterRepositories(paramRepository);\n        }\n\n        configBuilder.withPackagesToScan(new PackageList(packagesToScan));\n        if (!scanAnnotations) {\n            configBuilder.withAnnotationScanDisabled();\n        }\n\n        configBuilder.registerModule(new SpringModule(appContext));\n\n        return new ParamEngineFactory().createParamEngine(configBuilder.build());\n    }", "signature": "ParamEngine getObject()", "full_signature": "@Override public ParamEngine getObject()", "class_method_signature": "SpringParamEngineFactory.getObject()", "testcase": false, "constructor": false, "invocations": ["paramEngineConfig", "withParameterRepositories", "withPackagesToScan", "withAnnotationScanDisabled", "registerModule", "createParamEngine", "build"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}