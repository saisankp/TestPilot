{"test_class": {"identifier": "ImmutableSubjectIdTest", "superclass": "extends LengthRestrictionTestBase", "interfaces": "", "fields": [{"original_string": "private static final String ISSUER_WITH_SEPARATOR = SubjectIssuer.GOOGLE.toString() + \":\";", "modifier": "private static final", "type": "String", "declarator": "ISSUER_WITH_SEPARATOR = SubjectIssuer.GOOGLE.toString() + \":\"", "var_name": "ISSUER_WITH_SEPARATOR"}], "file": "model/policies/src/test/java/org/eclipse/ditto/model/policies/ImmutableSubjectIdTest.java"}, "test_case": {"identifier": "createInvalidAttribute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createInvalidAttribute() {\n        final String invalidSubjectId = \"invalidSubjectID\\u0001\";\n        assertThatExceptionOfType(SubjectIdInvalidException.class)\n                .isThrownBy(() -> ImmutableSubjectId.of(invalidSubjectId));\n    }", "signature": "void createInvalidAttribute()", "full_signature": "@Test public void createInvalidAttribute()", "class_method_signature": "ImmutableSubjectIdTest.createInvalidAttribute()", "testcase": true, "constructor": false, "invocations": ["isThrownBy", "assertThatExceptionOfType", "of"]}, "focal_class": {"identifier": "ImmutableSubjectId", "superclass": "", "interfaces": "implements SubjectId", "fields": [{"original_string": "private static final String IGNORED_DELIMITER = \"://\";", "modifier": "private static final", "type": "String", "declarator": "IGNORED_DELIMITER = \"://\"", "var_name": "IGNORED_DELIMITER"}, {"original_string": "private static final SubjectIssuer EMPTY_ISSUER = PoliciesModelFactory.newSubjectIssuer(\"\");", "modifier": "private static final", "type": "SubjectIssuer", "declarator": "EMPTY_ISSUER = PoliciesModelFactory.newSubjectIssuer(\"\")", "var_name": "EMPTY_ISSUER"}, {"original_string": "private final SubjectIssuer issuer;", "modifier": "private final", "type": "SubjectIssuer", "declarator": "issuer", "var_name": "issuer"}, {"original_string": "private final String subject;", "modifier": "private final", "type": "String", "declarator": "subject", "var_name": "subject"}], "methods": [{"identifier": "ImmutableSubjectId", "parameters": "(final SubjectIssuer issuer, final String subject)", "modifiers": "private", "return": "", "signature": " ImmutableSubjectId(final SubjectIssuer issuer, final String subject)", "full_signature": "private  ImmutableSubjectId(final SubjectIssuer issuer, final String subject)", "class_method_signature": "ImmutableSubjectId.ImmutableSubjectId(final SubjectIssuer issuer, final String subject)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(final SubjectIssuer issuer, final CharSequence subject)", "modifiers": "public static", "return": "SubjectId", "signature": "SubjectId of(final SubjectIssuer issuer, final CharSequence subject)", "full_signature": "public static SubjectId of(final SubjectIssuer issuer, final CharSequence subject)", "class_method_signature": "ImmutableSubjectId.of(final SubjectIssuer issuer, final CharSequence subject)", "testcase": false, "constructor": false}, {"identifier": "of", "parameters": "(final CharSequence subjectIssuerWithId)", "modifiers": "public static", "return": "SubjectId", "signature": "SubjectId of(final CharSequence subjectIssuerWithId)", "full_signature": "public static SubjectId of(final CharSequence subjectIssuerWithId)", "class_method_signature": "ImmutableSubjectId.of(final CharSequence subjectIssuerWithId)", "testcase": false, "constructor": false}, {"identifier": "getIssuer", "parameters": "()", "modifiers": "@Override public", "return": "SubjectIssuer", "signature": "SubjectIssuer getIssuer()", "full_signature": "@Override public SubjectIssuer getIssuer()", "class_method_signature": "ImmutableSubjectId.getIssuer()", "testcase": false, "constructor": false}, {"identifier": "getSubject", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSubject()", "full_signature": "@Override public String getSubject()", "class_method_signature": "ImmutableSubjectId.getSubject()", "testcase": false, "constructor": false}, {"identifier": "length", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int length()", "full_signature": "@Override public int length()", "class_method_signature": "ImmutableSubjectId.length()", "testcase": false, "constructor": false}, {"identifier": "charAt", "parameters": "(final int index)", "modifiers": "@Override public", "return": "char", "signature": "char charAt(final int index)", "full_signature": "@Override public char charAt(final int index)", "class_method_signature": "ImmutableSubjectId.charAt(final int index)", "testcase": false, "constructor": false}, {"identifier": "subSequence", "parameters": "(final int start, final int end)", "modifiers": "@Override public", "return": "CharSequence", "signature": "CharSequence subSequence(final int start, final int end)", "full_signature": "@Override public CharSequence subSequence(final int start, final int end)", "class_method_signature": "ImmutableSubjectId.subSequence(final int start, final int end)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "ImmutableSubjectId.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ImmutableSubjectId.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override @Nonnull public", "return": "String", "signature": "String toString()", "full_signature": "@Override @Nonnull public String toString()", "class_method_signature": "ImmutableSubjectId.toString()", "testcase": false, "constructor": false}], "file": "model/policies/src/main/java/org/eclipse/ditto/model/policies/ImmutableSubjectId.java"}, "focal_method": {"identifier": "of", "parameters": "(final SubjectIssuer issuer, final CharSequence subject)", "modifiers": "public static", "return": "SubjectId", "body": "public static SubjectId of(final SubjectIssuer issuer, final CharSequence subject) {\n        checkNotNull(issuer, \"issuer\");\n        argumentNotEmpty(subject, \"subject\");\n\n        final String subjectIdAsString = issuer.toString() + \":\" + subject.toString();\n        final Validator validator = NoControlCharactersValidator.getInstance(subjectIdAsString);\n        if (!validator.isValid()) {\n            throw SubjectIdInvalidException.newBuilder(subjectIdAsString)\n                    .description(validator.getReason().orElse(null))\n                    .build();\n        }\n\n        return new ImmutableSubjectId(issuer, subject.toString());\n    }", "signature": "SubjectId of(final SubjectIssuer issuer, final CharSequence subject)", "full_signature": "public static SubjectId of(final SubjectIssuer issuer, final CharSequence subject)", "class_method_signature": "ImmutableSubjectId.of(final SubjectIssuer issuer, final CharSequence subject)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "argumentNotEmpty", "toString", "toString", "getInstance", "isValid", "build", "description", "newBuilder", "orElse", "getReason", "toString"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}