{"test_class": {"identifier": "LongOperationsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LongOperations ops = new LongOperations();", "modifier": "private", "type": "LongOperations", "declarator": "ops = new LongOperations()", "var_name": "ops"}], "file": "modeshape-common/src/test/java/org/modeshape/common/math/LongOperationsTest.java"}, "test_case": {"identifier": "shouldRoundDownNumbersGreaterThan10", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldRoundDownNumbersGreaterThan10() {\n        assertThat(ops.roundDown(-101l, 0), is(-101l));\n        assertThat(ops.roundDown(-101l, 1), is(-101l));\n        assertThat(ops.roundDown(-101l, 1), is(-101l));\n        assertThat(ops.roundDown(-101l, -1), is(-100l));\n        assertThat(ops.roundDown(-109l, -1), is(-100l));\n        assertThat(ops.roundDown(101l, 0), is(101l));\n        assertThat(ops.roundDown(101l, 0), is(101l));\n        assertThat(ops.roundDown(101l, 1), is(101l));\n        assertThat(ops.roundDown(101l, 1), is(101l));\n        assertThat(ops.roundDown(109l, -1), is(100l));\n        assertThat(ops.roundDown(101l, -1), is(100l));\n    }", "signature": "void shouldRoundDownNumbersGreaterThan10()", "full_signature": "@Test public void shouldRoundDownNumbersGreaterThan10()", "class_method_signature": "LongOperationsTest.shouldRoundDownNumbersGreaterThan10()", "testcase": true, "constructor": false, "invocations": ["assertThat", "roundDown", "is", "assertThat", "roundDown", "is", "assertThat", "roundDown", "is", "assertThat", "roundDown", "is", "assertThat", "roundDown", "is", "assertThat", "roundDown", "is", "assertThat", "roundDown", "is", "assertThat", "roundDown", "is", "assertThat", "roundDown", "is", "assertThat", "roundDown", "is", "assertThat", "roundDown", "is"]}, "focal_class": {"identifier": "LongOperations", "superclass": "", "interfaces": "implements MathOperations<Long>, Comparator<Long>", "fields": [], "methods": [{"identifier": "getOperandClass", "parameters": "()", "modifiers": "@Override public", "return": "Class<Long>", "signature": "Class<Long> getOperandClass()", "full_signature": "@Override public Class<Long> getOperandClass()", "class_method_signature": "LongOperations.getOperandClass()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "( Long value1,\n                     Long value2 )", "modifiers": "@Override public", "return": "Long", "signature": "Long add( Long value1,\n                     Long value2 )", "full_signature": "@Override public Long add( Long value1,\n                     Long value2 )", "class_method_signature": "LongOperations.add( Long value1,\n                     Long value2 )", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "( Long value1,\n                          Long value2 )", "modifiers": "@Override public", "return": "Long", "signature": "Long subtract( Long value1,\n                          Long value2 )", "full_signature": "@Override public Long subtract( Long value1,\n                          Long value2 )", "class_method_signature": "LongOperations.subtract( Long value1,\n                          Long value2 )", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "( Long value1,\n                          Long value2 )", "modifiers": "@Override public", "return": "Long", "signature": "Long multiply( Long value1,\n                          Long value2 )", "full_signature": "@Override public Long multiply( Long value1,\n                          Long value2 )", "class_method_signature": "LongOperations.multiply( Long value1,\n                          Long value2 )", "testcase": false, "constructor": false}, {"identifier": "divide", "parameters": "( Long value1,\n                          Long value2 )", "modifiers": "@Override public", "return": "double", "signature": "double divide( Long value1,\n                          Long value2 )", "full_signature": "@Override public double divide( Long value1,\n                          Long value2 )", "class_method_signature": "LongOperations.divide( Long value1,\n                          Long value2 )", "testcase": false, "constructor": false}, {"identifier": "negate", "parameters": "( Long value )", "modifiers": "@Override public", "return": "Long", "signature": "Long negate( Long value )", "full_signature": "@Override public Long negate( Long value )", "class_method_signature": "LongOperations.negate( Long value )", "testcase": false, "constructor": false}, {"identifier": "increment", "parameters": "( Long value )", "modifiers": "@Override public", "return": "Long", "signature": "Long increment( Long value )", "full_signature": "@Override public Long increment( Long value )", "class_method_signature": "LongOperations.increment( Long value )", "testcase": false, "constructor": false}, {"identifier": "maximum", "parameters": "( Long value1,\n                         Long value2 )", "modifiers": "@Override public", "return": "Long", "signature": "Long maximum( Long value1,\n                         Long value2 )", "full_signature": "@Override public Long maximum( Long value1,\n                         Long value2 )", "class_method_signature": "LongOperations.maximum( Long value1,\n                         Long value2 )", "testcase": false, "constructor": false}, {"identifier": "minimum", "parameters": "( Long value1,\n                         Long value2 )", "modifiers": "@Override public", "return": "Long", "signature": "Long minimum( Long value1,\n                         Long value2 )", "full_signature": "@Override public Long minimum( Long value1,\n                         Long value2 )", "class_method_signature": "LongOperations.minimum( Long value1,\n                         Long value2 )", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "( Long value1,\n                        Long value2 )", "modifiers": "@Override public", "return": "int", "signature": "int compare( Long value1,\n                        Long value2 )", "full_signature": "@Override public int compare( Long value1,\n                        Long value2 )", "class_method_signature": "LongOperations.compare( Long value1,\n                        Long value2 )", "testcase": false, "constructor": false}, {"identifier": "asBigDecimal", "parameters": "( Long value )", "modifiers": "@Override public", "return": "BigDecimal", "signature": "BigDecimal asBigDecimal( Long value )", "full_signature": "@Override public BigDecimal asBigDecimal( Long value )", "class_method_signature": "LongOperations.asBigDecimal( Long value )", "testcase": false, "constructor": false}, {"identifier": "fromBigDecimal", "parameters": "( BigDecimal value )", "modifiers": "@Override public", "return": "Long", "signature": "Long fromBigDecimal( BigDecimal value )", "full_signature": "@Override public Long fromBigDecimal( BigDecimal value )", "class_method_signature": "LongOperations.fromBigDecimal( BigDecimal value )", "testcase": false, "constructor": false}, {"identifier": "createZeroValue", "parameters": "()", "modifiers": "@Override public", "return": "Long", "signature": "Long createZeroValue()", "full_signature": "@Override public Long createZeroValue()", "class_method_signature": "LongOperations.createZeroValue()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( int value )", "modifiers": "@Override public", "return": "Long", "signature": "Long create( int value )", "full_signature": "@Override public Long create( int value )", "class_method_signature": "LongOperations.create( int value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( long value )", "modifiers": "@Override public", "return": "Long", "signature": "Long create( long value )", "full_signature": "@Override public Long create( long value )", "class_method_signature": "LongOperations.create( long value )", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "( double value )", "modifiers": "@Override public", "return": "Long", "signature": "Long create( double value )", "full_signature": "@Override public Long create( double value )", "class_method_signature": "LongOperations.create( double value )", "testcase": false, "constructor": false}, {"identifier": "sqrt", "parameters": "( Long value )", "modifiers": "@Override public", "return": "double", "signature": "double sqrt( Long value )", "full_signature": "@Override public double sqrt( Long value )", "class_method_signature": "LongOperations.sqrt( Long value )", "testcase": false, "constructor": false}, {"identifier": "getComparator", "parameters": "()", "modifiers": "@Override public", "return": "Comparator<Long>", "signature": "Comparator<Long> getComparator()", "full_signature": "@Override public Comparator<Long> getComparator()", "class_method_signature": "LongOperations.getComparator()", "testcase": false, "constructor": false}, {"identifier": "random", "parameters": "( Long minimum,\n                        Long maximum,\n                        Random rng )", "modifiers": "@Override public", "return": "Long", "signature": "Long random( Long minimum,\n                        Long maximum,\n                        Random rng )", "full_signature": "@Override public Long random( Long minimum,\n                        Long maximum,\n                        Random rng )", "class_method_signature": "LongOperations.random( Long minimum,\n                        Long maximum,\n                        Random rng )", "testcase": false, "constructor": false}, {"identifier": "doubleValue", "parameters": "( Long value )", "modifiers": "@Override public", "return": "double", "signature": "double doubleValue( Long value )", "full_signature": "@Override public double doubleValue( Long value )", "class_method_signature": "LongOperations.doubleValue( Long value )", "testcase": false, "constructor": false}, {"identifier": "floatValue", "parameters": "( Long value )", "modifiers": "@Override public", "return": "float", "signature": "float floatValue( Long value )", "full_signature": "@Override public float floatValue( Long value )", "class_method_signature": "LongOperations.floatValue( Long value )", "testcase": false, "constructor": false}, {"identifier": "intValue", "parameters": "( Long value )", "modifiers": "@Override public", "return": "int", "signature": "int intValue( Long value )", "full_signature": "@Override public int intValue( Long value )", "class_method_signature": "LongOperations.intValue( Long value )", "testcase": false, "constructor": false}, {"identifier": "longValue", "parameters": "( Long value )", "modifiers": "@Override public", "return": "long", "signature": "long longValue( Long value )", "full_signature": "@Override public long longValue( Long value )", "class_method_signature": "LongOperations.longValue( Long value )", "testcase": false, "constructor": false}, {"identifier": "shortValue", "parameters": "( Long value )", "modifiers": "@Override public", "return": "short", "signature": "short shortValue( Long value )", "full_signature": "@Override public short shortValue( Long value )", "class_method_signature": "LongOperations.shortValue( Long value )", "testcase": false, "constructor": false}, {"identifier": "getExponentInScientificNotation", "parameters": "( Long value )", "modifiers": "@Override public", "return": "int", "signature": "int getExponentInScientificNotation( Long value )", "full_signature": "@Override public int getExponentInScientificNotation( Long value )", "class_method_signature": "LongOperations.getExponentInScientificNotation( Long value )", "testcase": false, "constructor": false}, {"identifier": "roundUp", "parameters": "( Long value,\n                         int decimalShift )", "modifiers": "@Override public", "return": "Long", "signature": "Long roundUp( Long value,\n                         int decimalShift )", "full_signature": "@Override public Long roundUp( Long value,\n                         int decimalShift )", "class_method_signature": "LongOperations.roundUp( Long value,\n                         int decimalShift )", "testcase": false, "constructor": false}, {"identifier": "roundDown", "parameters": "( Long value,\n                           int decimalShift )", "modifiers": "@Override public", "return": "Long", "signature": "Long roundDown( Long value,\n                           int decimalShift )", "full_signature": "@Override public Long roundDown( Long value,\n                           int decimalShift )", "class_method_signature": "LongOperations.roundDown( Long value,\n                           int decimalShift )", "testcase": false, "constructor": false}, {"identifier": "keepSignificantFigures", "parameters": "( Long value,\n                                        int numSigFigs )", "modifiers": "@Override public", "return": "Long", "signature": "Long keepSignificantFigures( Long value,\n                                        int numSigFigs )", "full_signature": "@Override public Long keepSignificantFigures( Long value,\n                                        int numSigFigs )", "class_method_signature": "LongOperations.keepSignificantFigures( Long value,\n                                        int numSigFigs )", "testcase": false, "constructor": false}], "file": "modeshape-common/src/main/java/org/modeshape/common/math/LongOperations.java"}, "focal_method": {"identifier": "roundDown", "parameters": "( Long value,\n                           int decimalShift )", "modifiers": "@Override public", "return": "Long", "body": "@Override\n    public Long roundDown( Long value,\n                           int decimalShift ) {\n        if (value == 0) return 0l;\n        if (decimalShift >= 0) return value;\n        long shiftedValue = Math.abs(value);\n        for (int i = 0; i != -decimalShift; ++i)\n            shiftedValue /= 10l;\n        shiftedValue *= Long.signum(value);\n        for (int i = 0; i != -decimalShift; ++i)\n            shiftedValue *= 10l;\n        return shiftedValue;\n    }", "signature": "Long roundDown( Long value,\n                           int decimalShift )", "full_signature": "@Override public Long roundDown( Long value,\n                           int decimalShift )", "class_method_signature": "LongOperations.roundDown( Long value,\n                           int decimalShift )", "testcase": false, "constructor": false, "invocations": ["abs", "signum"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}