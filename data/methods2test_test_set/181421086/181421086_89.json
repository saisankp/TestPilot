{"test_class": {"identifier": "SyncManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static Logger logger =\n            LoggerFactory.getLogger(SyncManagerTest.class);", "modifier": "protected static", "type": "Logger", "declarator": "logger =\n            LoggerFactory.getLogger(SyncManagerTest.class)", "var_name": "logger"}, {"original_string": "protected FloodlightModuleContext[] moduleContexts;", "modifier": "protected", "type": "FloodlightModuleContext[]", "declarator": "moduleContexts", "var_name": "moduleContexts"}, {"original_string": "protected SyncManager[] syncManagers;", "modifier": "protected", "type": "SyncManager[]", "declarator": "syncManagers", "var_name": "syncManagers"}, {"original_string": "protected final static ObjectMapper mapper = new ObjectMapper();", "modifier": "protected final static", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "protected String nodeString;", "modifier": "protected", "type": "String", "declarator": "nodeString", "var_name": "nodeString"}, {"original_string": "ArrayList<Node> nodes;", "modifier": "", "type": "ArrayList<Node>", "declarator": "nodes", "var_name": "nodes"}, {"original_string": "ThreadPool tp;", "modifier": "", "type": "ThreadPool", "declarator": "tp", "var_name": "tp"}, {"original_string": "@Rule\n    public TemporaryFolder keyStoreFolder = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "keyStoreFolder = new TemporaryFolder()", "var_name": "keyStoreFolder"}, {"original_string": "protected File keyStoreFile;", "modifier": "protected", "type": "File", "declarator": "keyStoreFile", "var_name": "keyStoreFile"}, {"original_string": "protected String keyStorePassword = \"verysecurepassword\";", "modifier": "protected", "type": "String", "declarator": "keyStorePassword = \"verysecurepassword\"", "var_name": "keyStorePassword"}], "file": "src/agents/apps/floodlight/floodlight-1.2/src/test/java/org/sdnplatform/sync/internal/SyncManagerTest.java"}, "test_case": {"identifier": "testReconnect", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReconnect() throws Exception {\n        IStoreClient<String, String> client0 =\n                syncManagers[0].getStoreClient(\"global\", \n                                               String.class, \n                                               String.class);\n        IStoreClient<String, String> client1 =\n                syncManagers[1].getStoreClient(\"global\", \n                                               String.class, String.class);\n        IStoreClient<String, String> client2 =\n                syncManagers[2].getStoreClient(\"global\", \n                                               String.class, String.class);\n\n        client0.put(\"key0\", \"value0\");\n        waitForValue(client2, \"key0\", \"value0\", 1000, \"client0\");\n\n        logger.info(\"Shutting down server ID 1\");\n        syncManagers[0].shutdown();\n        \n        client1.put(\"newkey1\", \"newvalue1\");\n        client2.put(\"newkey2\", \"newvalue2\");\n        client1.put(\"key0\", \"newvalue0\");\n        client2.put(\"key2\", \"newvalue2\");\n        \n        for (int i = 0; i < 500; i++) {\n            client2.put(\"largetest\" + i, \"largetestvalue\");\n        }\n        \n        logger.info(\"Initializing server ID 1\");\n        syncManagers[0] = new SyncManager();\n        setupSyncManager(moduleContexts[0], syncManagers[0], nodes.get(0));\n\n        waitForFullMesh(2000);\n\n        client0 = syncManagers[0].getStoreClient(\"global\", \n                                                 String.class, String.class);\n        waitForValue(client0, \"newkey1\", \"newvalue1\", 1000, \"client0\");\n        waitForValue(client0, \"newkey2\", \"newvalue2\", 1000, \"client0\");\n        waitForValue(client0, \"key0\", \"newvalue0\", 1000, \"client0\");\n        waitForValue(client0, \"key2\", \"newvalue2\", 1000, \"client0\");\n\n        for (int i = 0; i < 500; i++) {\n            waitForValue(client0, \"largetest\" + i, \n                         \"largetestvalue\", 1000, \"client0\");\n        }\n    }", "signature": "void testReconnect()", "full_signature": "@Test public void testReconnect()", "class_method_signature": "SyncManagerTest.testReconnect()", "testcase": true, "constructor": false, "invocations": ["getStoreClient", "getStoreClient", "getStoreClient", "put", "waitForValue", "info", "shutdown", "put", "put", "put", "put", "put", "info", "setupSyncManager", "get", "waitForFullMesh", "getStoreClient", "waitForValue", "waitForValue", "waitForValue", "waitForValue", "waitForValue"]}, "focal_class": {"identifier": "SyncManager", "superclass": "extends AbstractSyncManager", "interfaces": "", "fields": [{"original_string": "protected static final Logger logger =\n\t\t\tLoggerFactory.getLogger(SyncManager.class.getName());", "modifier": "protected static final", "type": "Logger", "declarator": "logger =\n\t\t\tLoggerFactory.getLogger(SyncManager.class.getName())", "var_name": "logger"}, {"original_string": "protected IThreadPoolService threadPool;", "modifier": "protected", "type": "IThreadPoolService", "declarator": "threadPool", "var_name": "threadPool"}, {"original_string": "protected IDebugCounterService debugCounter;", "modifier": "protected", "type": "IDebugCounterService", "declarator": "debugCounter", "var_name": "debugCounter"}, {"original_string": "private StoreRegistry storeRegistry = null;", "modifier": "private", "type": "StoreRegistry", "declarator": "storeRegistry = null", "var_name": "storeRegistry"}, {"original_string": "private Timer timer;", "modifier": "private", "type": "Timer", "declarator": "timer", "var_name": "timer"}, {"original_string": "private IClusterConfigProvider clusterConfigProvider;", "modifier": "private", "type": "IClusterConfigProvider", "declarator": "clusterConfigProvider", "var_name": "clusterConfigProvider"}, {"original_string": "private ClusterConfig clusterConfig = new ClusterConfig();", "modifier": "private", "type": "ClusterConfig", "declarator": "clusterConfig = new ClusterConfig()", "var_name": "clusterConfig"}, {"original_string": "protected RPCService rpcService = null;", "modifier": "protected", "type": "RPCService", "declarator": "rpcService = null", "var_name": "rpcService"}, {"original_string": "private static final int CLEANUP_INTERVAL = 60 * 60;", "modifier": "private static final", "type": "int", "declarator": "CLEANUP_INTERVAL = 60 * 60", "var_name": "CLEANUP_INTERVAL"}, {"original_string": "private static final int ANTIENTROPY_INTERVAL = 5 * 60;", "modifier": "private static final", "type": "int", "declarator": "ANTIENTROPY_INTERVAL = 5 * 60", "var_name": "ANTIENTROPY_INTERVAL"}, {"original_string": "private static final int CONFIG_RESCAN_INTERVAL = 10;", "modifier": "private static final", "type": "int", "declarator": "CONFIG_RESCAN_INTERVAL = 10", "var_name": "CONFIG_RESCAN_INTERVAL"}, {"original_string": "private SingletonTask cleanupTask;", "modifier": "private", "type": "SingletonTask", "declarator": "cleanupTask", "var_name": "cleanupTask"}, {"original_string": "private SingletonTask antientropyTask;", "modifier": "private", "type": "SingletonTask", "declarator": "antientropyTask", "var_name": "antientropyTask"}, {"original_string": "private SingletonTask updateConfigTask;", "modifier": "private", "type": "SingletonTask", "declarator": "updateConfigTask", "var_name": "updateConfigTask"}, {"original_string": "private static final int SYNC_WORKER_POOL = 2;", "modifier": "private static final", "type": "int", "declarator": "SYNC_WORKER_POOL = 2", "var_name": "SYNC_WORKER_POOL"}, {"original_string": "private ExecutorService hintThreadPool;", "modifier": "private", "type": "ExecutorService", "declarator": "hintThreadPool", "var_name": "hintThreadPool"}, {"original_string": "private final Random random = new Random();", "modifier": "private final", "type": "Random", "declarator": "random = new Random()", "var_name": "random"}, {"original_string": "private final Map<Integer, Cursor> cursorMap =\n\t\t\tnew ConcurrentHashMap<Integer, Cursor>();", "modifier": "private final", "type": "Map<Integer, Cursor>", "declarator": "cursorMap =\n\t\t\tnew ConcurrentHashMap<Integer, Cursor>()", "var_name": "cursorMap"}, {"original_string": "private boolean persistenceEnabled = true;", "modifier": "private", "type": "boolean", "declarator": "persistenceEnabled = true", "var_name": "persistenceEnabled"}, {"original_string": "private static final String PACKAGE =\n\t\t\tISyncService.class.getPackage().getName();", "modifier": "private static final", "type": "String", "declarator": "PACKAGE =\n\t\t\tISyncService.class.getPackage().getName()", "var_name": "PACKAGE"}, {"original_string": "public static IDebugCounter counterHints;", "modifier": "public static", "type": "IDebugCounter", "declarator": "counterHints", "var_name": "counterHints"}, {"original_string": "public static IDebugCounter counterSentValues;", "modifier": "public static", "type": "IDebugCounter", "declarator": "counterSentValues", "var_name": "counterSentValues"}, {"original_string": "public static IDebugCounter counterReceivedValues;", "modifier": "public static", "type": "IDebugCounter", "declarator": "counterReceivedValues", "var_name": "counterReceivedValues"}, {"original_string": "public static IDebugCounter counterPuts;", "modifier": "public static", "type": "IDebugCounter", "declarator": "counterPuts", "var_name": "counterPuts"}, {"original_string": "public static IDebugCounter counterGets;", "modifier": "public static", "type": "IDebugCounter", "declarator": "counterGets", "var_name": "counterGets"}, {"original_string": "public static IDebugCounter counterIterators;", "modifier": "public static", "type": "IDebugCounter", "declarator": "counterIterators", "var_name": "counterIterators"}, {"original_string": "public static IDebugCounter counterErrorRemote;", "modifier": "public static", "type": "IDebugCounter", "declarator": "counterErrorRemote", "var_name": "counterErrorRemote"}, {"original_string": "public static IDebugCounter counterErrorProcessing;", "modifier": "public static", "type": "IDebugCounter", "declarator": "counterErrorProcessing", "var_name": "counterErrorProcessing"}], "methods": [{"identifier": "registerStore", "parameters": "(String storeName, Scope scope)", "modifiers": "@Override public", "return": "void", "signature": "void registerStore(String storeName, Scope scope)", "full_signature": "@Override public void registerStore(String storeName, Scope scope)", "class_method_signature": "SyncManager.registerStore(String storeName, Scope scope)", "testcase": false, "constructor": false}, {"identifier": "registerPersistentStore", "parameters": "(String storeName, Scope scope)", "modifiers": "@Override public", "return": "void", "signature": "void registerPersistentStore(String storeName, Scope scope)", "full_signature": "@Override public void registerPersistentStore(String storeName, Scope scope)", "class_method_signature": "SyncManager.registerPersistentStore(String storeName, Scope scope)", "testcase": false, "constructor": false}, {"identifier": "getClusterConfig", "parameters": "()", "modifiers": "public", "return": "ClusterConfig", "signature": "ClusterConfig getClusterConfig()", "full_signature": "public ClusterConfig getClusterConfig()", "class_method_signature": "SyncManager.getClusterConfig()", "testcase": false, "constructor": false}, {"identifier": "cleanup", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void cleanup()", "full_signature": "public void cleanup()", "class_method_signature": "SyncManager.cleanup()", "testcase": false, "constructor": false}, {"identifier": "antientropy", "parameters": "(Node node)", "modifiers": "public", "return": "void", "signature": "void antientropy(Node node)", "full_signature": "public void antientropy(Node node)", "class_method_signature": "SyncManager.antientropy(Node node)", "testcase": false, "constructor": false}, {"identifier": "antientropy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void antientropy()", "full_signature": "public void antientropy()", "class_method_signature": "SyncManager.antientropy()", "testcase": false, "constructor": false}, {"identifier": "writeSyncValue", "parameters": "(String storeName, Scope scope,\n\t\t\tboolean persist,\n\t\t\tbyte[] key, Iterable<Versioned<byte[]>> values)", "modifiers": "public", "return": "void", "signature": "void writeSyncValue(String storeName, Scope scope,\n\t\t\tboolean persist,\n\t\t\tbyte[] key, Iterable<Versioned<byte[]>> values)", "full_signature": "public void writeSyncValue(String storeName, Scope scope,\n\t\t\tboolean persist,\n\t\t\tbyte[] key, Iterable<Versioned<byte[]>> values)", "class_method_signature": "SyncManager.writeSyncValue(String storeName, Scope scope,\n\t\t\tboolean persist,\n\t\t\tbyte[] key, Iterable<Versioned<byte[]>> values)", "testcase": false, "constructor": false}, {"identifier": "handleSyncOffer", "parameters": "(String storeName,\n\t\t\tbyte[] key,\n\t\t\tIterable<VectorClock> versions)", "modifiers": "public", "return": "boolean", "signature": "boolean handleSyncOffer(String storeName,\n\t\t\tbyte[] key,\n\t\t\tIterable<VectorClock> versions)", "full_signature": "public boolean handleSyncOffer(String storeName,\n\t\t\tbyte[] key,\n\t\t\tIterable<VectorClock> versions)", "class_method_signature": "SyncManager.handleSyncOffer(String storeName,\n\t\t\tbyte[] key,\n\t\t\tIterable<VectorClock> versions)", "testcase": false, "constructor": false}, {"identifier": "getRawStore", "parameters": "(String storeName)", "modifiers": "public", "return": "IStorageEngine<ByteArray, byte[]>", "signature": "IStorageEngine<ByteArray, byte[]> getRawStore(String storeName)", "full_signature": "public IStorageEngine<ByteArray, byte[]> getRawStore(String storeName)", "class_method_signature": "SyncManager.getRawStore(String storeName)", "testcase": false, "constructor": false}, {"identifier": "getThreadPool", "parameters": "()", "modifiers": "public", "return": "IThreadPoolService", "signature": "IThreadPoolService getThreadPool()", "full_signature": "public IThreadPoolService getThreadPool()", "class_method_signature": "SyncManager.getThreadPool()", "testcase": false, "constructor": false}, {"identifier": "queueSyncTask", "parameters": "(SynchronizingStorageEngine e,\n\t\t\tByteArray key, Versioned<byte[]> value)", "modifiers": "public", "return": "void", "signature": "void queueSyncTask(SynchronizingStorageEngine e,\n\t\t\tByteArray key, Versioned<byte[]> value)", "full_signature": "public void queueSyncTask(SynchronizingStorageEngine e,\n\t\t\tByteArray key, Versioned<byte[]> value)", "class_method_signature": "SyncManager.queueSyncTask(SynchronizingStorageEngine e,\n\t\t\tByteArray key, Versioned<byte[]> value)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(String storeName, MappingStoreListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(String storeName, MappingStoreListener listener)", "full_signature": "@Override public void addListener(String storeName, MappingStoreListener listener)", "class_method_signature": "SyncManager.addListener(String storeName, MappingStoreListener listener)", "testcase": false, "constructor": false}, {"identifier": "updateConfiguration", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void updateConfiguration()", "full_signature": "public void updateConfiguration()", "class_method_signature": "SyncManager.updateConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getCursor", "parameters": "(int cursorId)", "modifiers": "public", "return": "Cursor", "signature": "Cursor getCursor(int cursorId)", "full_signature": "public Cursor getCursor(int cursorId)", "class_method_signature": "SyncManager.getCursor(int cursorId)", "testcase": false, "constructor": false}, {"identifier": "newCursor", "parameters": "(String storeName)", "modifiers": "public", "return": "Cursor", "signature": "Cursor newCursor(String storeName)", "full_signature": "public Cursor newCursor(String storeName)", "class_method_signature": "SyncManager.newCursor(String storeName)", "testcase": false, "constructor": false}, {"identifier": "closeCursor", "parameters": "(Cursor cursor)", "modifiers": "public", "return": "void", "signature": "void closeCursor(Cursor cursor)", "full_signature": "public void closeCursor(Cursor cursor)", "class_method_signature": "SyncManager.closeCursor(Cursor cursor)", "testcase": false, "constructor": false}, {"identifier": "getStore", "parameters": "(String storeName)", "modifiers": "@Override public", "return": "IStore<ByteArray,byte[]>", "signature": "IStore<ByteArray,byte[]> getStore(String storeName)", "full_signature": "@Override public IStore<ByteArray,byte[]> getStore(String storeName)", "class_method_signature": "SyncManager.getStore(String storeName)", "testcase": false, "constructor": false}, {"identifier": "getLocalNodeId", "parameters": "()", "modifiers": "@Override public", "return": "short", "signature": "short getLocalNodeId()", "full_signature": "@Override public short getLocalNodeId()", "class_method_signature": "SyncManager.getLocalNodeId()", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "SyncManager.shutdown()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void init(FloodlightModuleContext context)", "full_signature": "@Override public void init(FloodlightModuleContext context)", "class_method_signature": "SyncManager.init(FloodlightModuleContext context)", "testcase": false, "constructor": false}, {"identifier": "registerDebugCounters", "parameters": "(FloodlightModuleContext context)", "modifiers": "private", "return": "void", "signature": "void registerDebugCounters(FloodlightModuleContext context)", "full_signature": "private void registerDebugCounters(FloodlightModuleContext context)", "class_method_signature": "SyncManager.registerDebugCounters(FloodlightModuleContext context)", "testcase": false, "constructor": false}, {"identifier": "startUp", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void startUp(FloodlightModuleContext context)", "full_signature": "@Override public void startUp(FloodlightModuleContext context)", "class_method_signature": "SyncManager.startUp(FloodlightModuleContext context)", "testcase": false, "constructor": false}, {"identifier": "getModuleDependencies", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends IFloodlightService>>", "signature": "Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "full_signature": "@Override public Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "class_method_signature": "SyncManager.getModuleDependencies()", "testcase": false, "constructor": false}, {"identifier": "doUpdateConfiguration", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void doUpdateConfiguration()", "full_signature": "protected void doUpdateConfiguration()", "class_method_signature": "SyncManager.doUpdateConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getStoreInternal", "parameters": "(String storeName)", "modifiers": "protected", "return": "SynchronizingStorageEngine", "signature": "SynchronizingStorageEngine getStoreInternal(String storeName)", "full_signature": "protected SynchronizingStorageEngine getStoreInternal(String storeName)", "class_method_signature": "SyncManager.getStoreInternal(String storeName)", "testcase": false, "constructor": false}, {"identifier": "sendSyncOffer", "parameters": "(short nodeId, SyncMessage bsm)", "modifiers": "private", "return": "void", "signature": "void sendSyncOffer(short nodeId, SyncMessage bsm)", "full_signature": "private void sendSyncOffer(short nodeId, SyncMessage bsm)", "class_method_signature": "SyncManager.sendSyncOffer(short nodeId, SyncMessage bsm)", "testcase": false, "constructor": false}], "file": "src/agents/apps/floodlight/floodlight-1.2/src/main/java/org/sdnplatform/sync/internal/SyncManager.java"}, "focal_method": {"identifier": "shutdown", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void shutdown() {\n\t\tlogger.info(\"Shutting down Sync Manager: {} {}\",\n\t\t\t\tclusterConfig.getNode().getHostname(),\n\t\t\t\tclusterConfig.getNode().getPort());\n\n\t\tif (rpcService != null) {\n\t\t\trpcService.shutdown();\n\t\t}\n\t\tif (hintThreadPool != null) {\n\t\t\thintThreadPool.shutdown();\n\t\t}\n\t\tif (storeRegistry != null) {\n\t\t\tstoreRegistry.shutdown();\n\t\t}\n\t\tif (timer != null)\n            timer.stop();\n        timer = null;\n\t\thintThreadPool = null;\n\t\trpcService = null;\n\t}", "signature": "void shutdown()", "full_signature": "@Override public void shutdown()", "class_method_signature": "SyncManager.shutdown()", "testcase": false, "constructor": false, "invocations": ["info", "getHostname", "getNode", "getPort", "getNode", "shutdown", "shutdown", "shutdown", "stop"]}, "repository": {"repo_id": 181421086, "url": "https://github.com/seungsoo-lee/DELTA", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 99244, "license": "licensed"}}