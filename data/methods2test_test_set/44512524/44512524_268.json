{"test_class": {"identifier": "DistributedCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DistributedCache distributedCache;", "modifier": "private", "type": "DistributedCache", "declarator": "distributedCache", "var_name": "distributedCache"}, {"original_string": "private HazelcastInstance hazelcastInstance;", "modifier": "private", "type": "HazelcastInstance", "declarator": "hazelcastInstance", "var_name": "hazelcastInstance"}, {"original_string": "private ObjectMapper mapper;", "modifier": "private", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}], "file": "real-time/foxtrot/foxtrot-core/src/test/java/com/flipkart/foxtrot/core/querystore/impl/DistributedCacheTest.java"}, "test_case": {"identifier": "testHas", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHas() throws Exception {\n        GroupResponse baseRequest = new GroupResponse();\n        baseRequest.setResult(Collections.<String, Object>singletonMap(\"Hello\", \"World\"));\n        distributedCache.put(\"DUMMY_KEY_HAS\", baseRequest);\n        boolean response = distributedCache.has(\"DUMMY_KEY_HAS\");\n        assertTrue(response);\n        response = distributedCache.has(\"INVALID_KEY\");\n        assertFalse(response);\n        response = distributedCache.has(null);\n        assertFalse(response);\n    }", "signature": "void testHas()", "full_signature": "@Test public void testHas()", "class_method_signature": "DistributedCacheTest.testHas()", "testcase": true, "constructor": false, "invocations": ["setResult", "singletonMap", "put", "has", "assertTrue", "has", "assertFalse", "has", "assertFalse"]}, "focal_class": {"identifier": "DistributedCache", "superclass": "", "interfaces": "implements Cache", "fields": [{"original_string": "private static final String NAME_PREFIX=\"cache-for-\";", "modifier": "private static final", "type": "String", "declarator": "NAME_PREFIX=\"cache-for-\"", "var_name": "NAME_PREFIX"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(DistributedCache.class.getSimpleName());", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DistributedCache.class.getSimpleName())", "var_name": "logger"}, {"original_string": "private final IMap<String, String> distributedMap;", "modifier": "private final", "type": "IMap<String, String>", "declarator": "distributedMap", "var_name": "distributedMap"}, {"original_string": "private final ObjectMapper mapper;", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "setupConfig", "parameters": "(HazelcastConnection hazelcastConnection)", "modifiers": "public static", "return": "void", "signature": "void setupConfig(HazelcastConnection hazelcastConnection)", "full_signature": "public static void setupConfig(HazelcastConnection hazelcastConnection)", "class_method_signature": "DistributedCache.setupConfig(HazelcastConnection hazelcastConnection)", "testcase": false, "constructor": false}, {"identifier": "DistributedCache", "parameters": "(HazelcastConnection hazelcastConnection, String name, ObjectMapper mapper)", "modifiers": "public", "return": "", "signature": " DistributedCache(HazelcastConnection hazelcastConnection, String name, ObjectMapper mapper)", "full_signature": "public  DistributedCache(HazelcastConnection hazelcastConnection, String name, ObjectMapper mapper)", "class_method_signature": "DistributedCache.DistributedCache(HazelcastConnection hazelcastConnection, String name, ObjectMapper mapper)", "testcase": false, "constructor": true}, {"identifier": "put", "parameters": "(String key, ActionResponse data)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse put(String key, ActionResponse data)", "full_signature": "@Override public ActionResponse put(String key, ActionResponse data)", "class_method_signature": "DistributedCache.put(String key, ActionResponse data)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String key)", "modifiers": "@Override public", "return": "ActionResponse", "signature": "ActionResponse get(String key)", "full_signature": "@Override public ActionResponse get(String key)", "class_method_signature": "DistributedCache.get(String key)", "testcase": false, "constructor": false}, {"identifier": "has", "parameters": "(String key)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean has(String key)", "full_signature": "@Override public boolean has(String key)", "class_method_signature": "DistributedCache.has(String key)", "testcase": false, "constructor": false}], "file": "real-time/foxtrot/foxtrot-core/src/main/java/com/flipkart/foxtrot/core/querystore/impl/DistributedCache.java"}, "focal_method": {"identifier": "has", "parameters": "(String key)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean has(String key) {\n        return null != key && distributedMap.containsKey(key);\n    }", "signature": "boolean has(String key)", "full_signature": "@Override public boolean has(String key)", "class_method_signature": "DistributedCache.has(String key)", "testcase": false, "constructor": false, "invocations": ["containsKey"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}