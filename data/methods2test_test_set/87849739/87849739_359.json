{"test_class": {"identifier": "RabbitMQClientActorTest", "superclass": "extends AbstractBaseClientActorTest", "interfaces": "", "fields": [{"original_string": "private static final Status.Success CONNECTED_SUCCESS = new Status.Success(BaseClientState.CONNECTED);", "modifier": "private static final", "type": "Status.Success", "declarator": "CONNECTED_SUCCESS = new Status.Success(BaseClientState.CONNECTED)", "var_name": "CONNECTED_SUCCESS"}, {"original_string": "private static final Status.Success DISCONNECTED_SUCCESS = new Status.Success(BaseClientState.DISCONNECTED);", "modifier": "private static final", "type": "Status.Success", "declarator": "DISCONNECTED_SUCCESS = new Status.Success(BaseClientState.DISCONNECTED)", "var_name": "DISCONNECTED_SUCCESS"}, {"original_string": "private static final IllegalArgumentException CUSTOM_EXCEPTION =\n            new IllegalArgumentException(\"custom error message\");", "modifier": "private static final", "type": "IllegalArgumentException", "declarator": "CUSTOM_EXCEPTION =\n            new IllegalArgumentException(\"custom error message\")", "var_name": "CUSTOM_EXCEPTION"}, {"original_string": "private static final ConnectionId CONNECTION_ID = TestConstants.createRandomConnectionId();", "modifier": "private static final", "type": "ConnectionId", "declarator": "CONNECTION_ID = TestConstants.createRandomConnectionId()", "var_name": "CONNECTION_ID"}, {"original_string": "@SuppressWarnings(\"NullableProblems\") private static ActorSystem actorSystem;", "modifier": "@SuppressWarnings(\"NullableProblems\") private static", "type": "ActorSystem", "declarator": "actorSystem", "var_name": "actorSystem"}, {"original_string": "private static Connection connection;", "modifier": "private static", "type": "Connection", "declarator": "connection", "var_name": "connection"}, {"original_string": "@Mock private ConnectionFactory mockConnectionFactory;", "modifier": "@Mock private", "type": "ConnectionFactory", "declarator": "mockConnectionFactory", "var_name": "mockConnectionFactory"}, {"original_string": "@Mock private ConnectionFactory failingMockConnectionFactory;", "modifier": "@Mock private", "type": "ConnectionFactory", "declarator": "failingMockConnectionFactory", "var_name": "failingMockConnectionFactory"}, {"original_string": "@Mock private com.rabbitmq.client.Connection mockConnection;", "modifier": "@Mock private", "type": "com.rabbitmq.client.Connection", "declarator": "mockConnection", "var_name": "mockConnection"}, {"original_string": "@Mock private com.rabbitmq.client.Connection mockReconnection;", "modifier": "@Mock private", "type": "com.rabbitmq.client.Connection", "declarator": "mockReconnection", "var_name": "mockReconnection"}, {"original_string": "@Mock private Channel mockChannel;", "modifier": "@Mock private", "type": "Channel", "declarator": "mockChannel", "var_name": "mockChannel"}, {"original_string": "@Mock private Channel mockChannelReconnected;", "modifier": "@Mock private", "type": "Channel", "declarator": "mockChannelReconnected", "var_name": "mockChannelReconnected"}, {"original_string": "private final RabbitConnectionFactoryFactory rabbitConnectionFactoryFactory =\n            (con, exHandler) -> mockConnectionFactory;", "modifier": "private final", "type": "RabbitConnectionFactoryFactory", "declarator": "rabbitConnectionFactoryFactory =\n            (con, exHandler) -> mockConnectionFactory", "var_name": "rabbitConnectionFactoryFactory"}], "file": "services/connectivity/messaging/src/test/java/org/eclipse/ditto/services/connectivity/messaging/rabbitmq/RabbitMQClientActorTest.java"}, "test_case": {"identifier": "invalidTargetFormatThrowsConnectionConfigurationInvalidException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void invalidTargetFormatThrowsConnectionConfigurationInvalidException() {\n        final Connection connection = ConnectivityModelFactory.newConnectionBuilder(CONNECTION_ID,\n                ConnectionType.AMQP_091, ConnectivityStatus.OPEN, TestConstants.getUriOfNewMockServer())\n                .targets(Collections.singletonList(ConnectivityModelFactory.newTargetBuilder()\n                        .address(\"exchangeOnly\")\n                        .authorizationContext(TestConstants.Authorization.AUTHORIZATION_CONTEXT)\n                        .topics(Topic.TWIN_EVENTS)\n                        .build()))\n                .build();\n\n        final ThrowableAssert.ThrowingCallable props1 =\n                () -> RabbitMQClientActor.propsForTests(connection, Actor.noSender(), Actor.noSender(), null);\n        final ThrowableAssert.ThrowingCallable props2 =\n                () -> RabbitMQClientActor.propsForTests(connection, Actor.noSender(), Actor.noSender(),\n                        rabbitConnectionFactoryFactory\n                );\n        Stream.of(props1, props2)\n                .forEach(throwingCallable ->\n                        assertThatExceptionOfType(ConnectionConfigurationInvalidException.class)\n                                .isThrownBy(throwingCallable)\n                                .withMessageContaining(\"exchangeOnly\")\n                                .withNoCause()\n                );\n    }", "signature": "void invalidTargetFormatThrowsConnectionConfigurationInvalidException()", "full_signature": "@Test public void invalidTargetFormatThrowsConnectionConfigurationInvalidException()", "class_method_signature": "RabbitMQClientActorTest.invalidTargetFormatThrowsConnectionConfigurationInvalidException()", "testcase": true, "constructor": false, "invocations": ["build", "targets", "newConnectionBuilder", "getUriOfNewMockServer", "singletonList", "build", "topics", "authorizationContext", "address", "newTargetBuilder", "propsForTests", "noSender", "noSender", "propsForTests", "noSender", "noSender", "forEach", "of", "withNoCause", "withMessageContaining", "isThrownBy", "assertThatExceptionOfType"]}, "focal_class": {"identifier": "RabbitMQClientActor", "superclass": "extends BaseClientActor", "interfaces": "", "fields": [{"original_string": "private static final String RMQ_CONNECTION_ACTOR_NAME = \"rmq-connection\";", "modifier": "private static final", "type": "String", "declarator": "RMQ_CONNECTION_ACTOR_NAME = \"rmq-connection\"", "var_name": "RMQ_CONNECTION_ACTOR_NAME"}, {"original_string": "private static final String CONSUMER_CHANNEL = \"consumer-channel\";", "modifier": "private static final", "type": "String", "declarator": "CONSUMER_CHANNEL = \"consumer-channel\"", "var_name": "CONSUMER_CHANNEL"}, {"original_string": "private static final String PUBLISHER_CHANNEL = \"publisher-channel\";", "modifier": "private static final", "type": "String", "declarator": "PUBLISHER_CHANNEL = \"publisher-channel\"", "var_name": "PUBLISHER_CHANNEL"}, {"original_string": "private static final String CONSUMER_ACTOR_PREFIX = \"consumer-\";", "modifier": "private static final", "type": "String", "declarator": "CONSUMER_ACTOR_PREFIX = \"consumer-\"", "var_name": "CONSUMER_ACTOR_PREFIX"}, {"original_string": "private final RabbitConnectionFactoryFactory rabbitConnectionFactoryFactory;", "modifier": "private final", "type": "RabbitConnectionFactoryFactory", "declarator": "rabbitConnectionFactoryFactory", "var_name": "rabbitConnectionFactoryFactory"}, {"original_string": "private final Map<String, String> consumedTagsToAddresses;", "modifier": "private final", "type": "Map<String, String>", "declarator": "consumedTagsToAddresses", "var_name": "consumedTagsToAddresses"}, {"original_string": "private final Map<String, ActorRef> consumerByAddressWithIndex;", "modifier": "private final", "type": "Map<String, ActorRef>", "declarator": "consumerByAddressWithIndex", "var_name": "consumerByAddressWithIndex"}, {"original_string": "@Nullable private ActorRef rmqConnectionActor;", "modifier": "@Nullable private", "type": "ActorRef", "declarator": "rmqConnectionActor", "var_name": "rmqConnectionActor"}, {"original_string": "private ActorRef rmqPublisherActor;", "modifier": "private", "type": "ActorRef", "declarator": "rmqPublisherActor", "var_name": "rmqPublisherActor"}], "methods": [{"identifier": "RabbitMQClientActor", "parameters": "(final Connection connection,\n            final RabbitConnectionFactoryFactory rabbitConnectionFactoryFactory,\n            @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "modifiers": "@SuppressWarnings(\"unused\") private", "return": "", "signature": " RabbitMQClientActor(final Connection connection,\n            final RabbitConnectionFactoryFactory rabbitConnectionFactoryFactory,\n            @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "full_signature": "@SuppressWarnings(\"unused\") private  RabbitMQClientActor(final Connection connection,\n            final RabbitConnectionFactoryFactory rabbitConnectionFactoryFactory,\n            @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "class_method_signature": "RabbitMQClientActor.RabbitMQClientActor(final Connection connection,\n            final RabbitConnectionFactoryFactory rabbitConnectionFactoryFactory,\n            @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "testcase": false, "constructor": true}, {"identifier": "RabbitMQClientActor", "parameters": "(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "modifiers": "@SuppressWarnings(\"unused\") private", "return": "", "signature": " RabbitMQClientActor(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "full_signature": "@SuppressWarnings(\"unused\") private  RabbitMQClientActor(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "class_method_signature": "RabbitMQClientActor.RabbitMQClientActor(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "testcase": false, "constructor": true}, {"identifier": "props", "parameters": "(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "modifiers": "public static", "return": "Props", "signature": "Props props(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "full_signature": "public static Props props(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "class_method_signature": "RabbitMQClientActor.props(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor)", "testcase": false, "constructor": false}, {"identifier": "propsForTests", "parameters": "(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor, final RabbitConnectionFactoryFactory rabbitConnectionFactoryFactory)", "modifiers": "static", "return": "Props", "signature": "Props propsForTests(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor, final RabbitConnectionFactoryFactory rabbitConnectionFactoryFactory)", "full_signature": "static Props propsForTests(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor, final RabbitConnectionFactoryFactory rabbitConnectionFactoryFactory)", "class_method_signature": "RabbitMQClientActor.propsForTests(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor, final RabbitConnectionFactoryFactory rabbitConnectionFactoryFactory)", "testcase": false, "constructor": false}, {"identifier": "validateConnection", "parameters": "(final Connection connection)", "modifiers": "private static", "return": "Connection", "signature": "Connection validateConnection(final Connection connection)", "full_signature": "private static Connection validateConnection(final Connection connection)", "class_method_signature": "RabbitMQClientActor.validateConnection(final Connection connection)", "testcase": false, "constructor": false}, {"identifier": "inConnectedState", "parameters": "()", "modifiers": "@Override protected", "return": "FSMStateFunctionBuilder<BaseClientState, BaseClientData>", "signature": "FSMStateFunctionBuilder<BaseClientState, BaseClientData> inConnectedState()", "full_signature": "@Override protected FSMStateFunctionBuilder<BaseClientState, BaseClientData> inConnectedState()", "class_method_signature": "RabbitMQClientActor.inConnectedState()", "testcase": false, "constructor": false}, {"identifier": "doTestConnection", "parameters": "(final TestConnection testConnectionCommand)", "modifiers": "@Override protected", "return": "CompletionStage<Status.Status>", "signature": "CompletionStage<Status.Status> doTestConnection(final TestConnection testConnectionCommand)", "full_signature": "@Override protected CompletionStage<Status.Status> doTestConnection(final TestConnection testConnectionCommand)", "class_method_signature": "RabbitMQClientActor.doTestConnection(final TestConnection testConnectionCommand)", "testcase": false, "constructor": false}, {"identifier": "doConnectClient", "parameters": "(final Connection connection, @Nullable final ActorRef origin)", "modifiers": "@Override protected", "return": "void", "signature": "void doConnectClient(final Connection connection, @Nullable final ActorRef origin)", "full_signature": "@Override protected void doConnectClient(final Connection connection, @Nullable final ActorRef origin)", "class_method_signature": "RabbitMQClientActor.doConnectClient(final Connection connection, @Nullable final ActorRef origin)", "testcase": false, "constructor": false}, {"identifier": "doDisconnectClient", "parameters": "(final Connection connection, @Nullable final ActorRef origin)", "modifiers": "@Override protected", "return": "void", "signature": "void doDisconnectClient(final Connection connection, @Nullable final ActorRef origin)", "full_signature": "@Override protected void doDisconnectClient(final Connection connection, @Nullable final ActorRef origin)", "class_method_signature": "RabbitMQClientActor.doDisconnectClient(final Connection connection, @Nullable final ActorRef origin)", "testcase": false, "constructor": false}, {"identifier": "allocateResourcesOnConnection", "parameters": "(final ClientConnected clientConnected)", "modifiers": "@Override protected", "return": "void", "signature": "void allocateResourcesOnConnection(final ClientConnected clientConnected)", "full_signature": "@Override protected void allocateResourcesOnConnection(final ClientConnected clientConnected)", "class_method_signature": "RabbitMQClientActor.allocateResourcesOnConnection(final ClientConnected clientConnected)", "testcase": false, "constructor": false}, {"identifier": "startConsumerActors", "parameters": "(final ClientConnected clientConnected)", "modifiers": "@Override protected", "return": "CompletionStage<Status.Status>", "signature": "CompletionStage<Status.Status> startConsumerActors(final ClientConnected clientConnected)", "full_signature": "@Override protected CompletionStage<Status.Status> startConsumerActors(final ClientConnected clientConnected)", "class_method_signature": "RabbitMQClientActor.startConsumerActors(final ClientConnected clientConnected)", "testcase": false, "constructor": false}, {"identifier": "cleanupResourcesForConnection", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void cleanupResourcesForConnection()", "full_signature": "@Override protected void cleanupResourcesForConnection()", "class_method_signature": "RabbitMQClientActor.cleanupResourcesForConnection()", "testcase": false, "constructor": false}, {"identifier": "getPublisherActor", "parameters": "()", "modifiers": "@Override protected", "return": "ActorRef", "signature": "ActorRef getPublisherActor()", "full_signature": "@Override protected ActorRef getPublisherActor()", "class_method_signature": "RabbitMQClientActor.getPublisherActor()", "testcase": false, "constructor": false}, {"identifier": "tryToCreateConnectionFactory", "parameters": "(\n            final RabbitConnectionFactoryFactory factoryFactory,\n            final Connection connection,\n            final RabbitMQExceptionHandler rabbitMQExceptionHandler)", "modifiers": "private static", "return": "Optional<ConnectionFactory>", "signature": "Optional<ConnectionFactory> tryToCreateConnectionFactory(\n            final RabbitConnectionFactoryFactory factoryFactory,\n            final Connection connection,\n            final RabbitMQExceptionHandler rabbitMQExceptionHandler)", "full_signature": "private static Optional<ConnectionFactory> tryToCreateConnectionFactory(\n            final RabbitConnectionFactoryFactory factoryFactory,\n            final Connection connection,\n            final RabbitMQExceptionHandler rabbitMQExceptionHandler)", "class_method_signature": "RabbitMQClientActor.tryToCreateConnectionFactory(\n            final RabbitConnectionFactoryFactory factoryFactory,\n            final Connection connection,\n            final RabbitMQExceptionHandler rabbitMQExceptionHandler)", "testcase": false, "constructor": false}, {"identifier": "messageFromConnectionStatus", "parameters": "(final Status.Status status)", "modifiers": "private static", "return": "Object", "signature": "Object messageFromConnectionStatus(final Status.Status status)", "full_signature": "private static Object messageFromConnectionStatus(final Status.Status status)", "class_method_signature": "RabbitMQClientActor.messageFromConnectionStatus(final Status.Status status)", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(final Connection connection,\n            @Nullable final CharSequence correlationId,\n            final Duration createChannelTimeout,\n            final Duration internalReconnectTimeout)", "modifiers": "private", "return": "CompletionStage<Status.Status>", "signature": "CompletionStage<Status.Status> connect(final Connection connection,\n            @Nullable final CharSequence correlationId,\n            final Duration createChannelTimeout,\n            final Duration internalReconnectTimeout)", "full_signature": "private CompletionStage<Status.Status> connect(final Connection connection,\n            @Nullable final CharSequence correlationId,\n            final Duration createChannelTimeout,\n            final Duration internalReconnectTimeout)", "class_method_signature": "RabbitMQClientActor.connect(final Connection connection,\n            @Nullable final CharSequence correlationId,\n            final Duration createChannelTimeout,\n            final Duration internalReconnectTimeout)", "testcase": false, "constructor": false}, {"identifier": "createConsumerChannelAndNotifySelf", "parameters": "(final Status.Status status, final boolean consuming,\n            final ActorRef self, final Duration createChannelTimeout)", "modifiers": "private", "return": "void", "signature": "void createConsumerChannelAndNotifySelf(final Status.Status status, final boolean consuming,\n            final ActorRef self, final Duration createChannelTimeout)", "full_signature": "private void createConsumerChannelAndNotifySelf(final Status.Status status, final boolean consuming,\n            final ActorRef self, final Duration createChannelTimeout)", "class_method_signature": "RabbitMQClientActor.createConsumerChannelAndNotifySelf(final Status.Status status, final boolean consuming,\n            final ActorRef self, final Duration createChannelTimeout)", "testcase": false, "constructor": false}, {"identifier": "startRmqPublisherActor", "parameters": "()", "modifiers": "private", "return": "ActorRef", "signature": "ActorRef startRmqPublisherActor()", "full_signature": "private ActorRef startRmqPublisherActor()", "class_method_signature": "RabbitMQClientActor.startRmqPublisherActor()", "testcase": false, "constructor": false}, {"identifier": "startPublisherActor", "parameters": "()", "modifiers": "@Override protected", "return": "CompletionStage<Status.Status>", "signature": "CompletionStage<Status.Status> startPublisherActor()", "full_signature": "@Override protected CompletionStage<Status.Status> startPublisherActor()", "class_method_signature": "RabbitMQClientActor.startPublisherActor()", "testcase": false, "constructor": false}, {"identifier": "stopCommandConsumers", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void stopCommandConsumers()", "full_signature": "private void stopCommandConsumers()", "class_method_signature": "RabbitMQClientActor.stopCommandConsumers()", "testcase": false, "constructor": false}, {"identifier": "startCommandConsumers", "parameters": "(final Channel channel)", "modifiers": "private", "return": "void", "signature": "void startCommandConsumers(final Channel channel)", "full_signature": "private void startCommandConsumers(final Channel channel)", "class_method_signature": "RabbitMQClientActor.startCommandConsumers(final Channel channel)", "testcase": false, "constructor": false}, {"identifier": "startConsumers", "parameters": "(final Channel channel)", "modifiers": "private", "return": "void", "signature": "void startConsumers(final Channel channel)", "full_signature": "private void startConsumers(final Channel channel)", "class_method_signature": "RabbitMQClientActor.startConsumers(final Channel channel)", "testcase": false, "constructor": false}, {"identifier": "ensureQueuesExist", "parameters": "(final Channel channel)", "modifiers": "private", "return": "void", "signature": "void ensureQueuesExist(final Channel channel)", "full_signature": "private void ensureQueuesExist(final Channel channel)", "class_method_signature": "RabbitMQClientActor.ensureQueuesExist(final Channel channel)", "testcase": false, "constructor": false}], "file": "services/connectivity/messaging/src/main/java/org/eclipse/ditto/services/connectivity/messaging/rabbitmq/RabbitMQClientActor.java"}, "focal_method": {"identifier": "propsForTests", "parameters": "(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor, final RabbitConnectionFactoryFactory rabbitConnectionFactoryFactory)", "modifiers": "static", "return": "Props", "body": "static Props propsForTests(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor, final RabbitConnectionFactoryFactory rabbitConnectionFactoryFactory) {\n\n        return Props.create(RabbitMQClientActor.class, validateConnection(connection), rabbitConnectionFactoryFactory,\n                proxyActor, connectionActor);\n    }", "signature": "Props propsForTests(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor, final RabbitConnectionFactoryFactory rabbitConnectionFactoryFactory)", "full_signature": "static Props propsForTests(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor, final RabbitConnectionFactoryFactory rabbitConnectionFactoryFactory)", "class_method_signature": "RabbitMQClientActor.propsForTests(final Connection connection, @Nullable final ActorRef proxyActor,\n            final ActorRef connectionActor, final RabbitConnectionFactoryFactory rabbitConnectionFactoryFactory)", "testcase": false, "constructor": false, "invocations": ["create", "validateConnection"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}