{"test_class": {"identifier": "ReplaySubjectTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Throwable testException = new Throwable();", "modifier": "private final", "type": "Throwable", "declarator": "testException = new Throwable()", "var_name": "testException"}], "file": "zava/src/test/java/rx/subjects/ReplaySubjectTest.java"}, "test_case": {"identifier": "testGetValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetValues() {\n        ReplaySubject<Object> rs = ReplaySubject.create();\n        Object[] expected = new Object[10];\n        for (int i = 0; i < expected.length; i++) {\n            expected[i] = i;\n            rs.onNext(i);\n            assertArrayEquals(Arrays.copyOf(expected, i + 1), rs.getValues());\n        }\n        rs.onCompleted();\n        \n        assertArrayEquals(expected, rs.getValues());\n        \n    }", "signature": "void testGetValues()", "full_signature": "@Test public void testGetValues()", "class_method_signature": "ReplaySubjectTest.testGetValues()", "testcase": true, "constructor": false, "invocations": ["create", "onNext", "assertArrayEquals", "copyOf", "getValues", "onCompleted", "assertArrayEquals", "getValues"]}, "focal_class": {"identifier": "ReplaySubject", "superclass": "extends Subject<T, T>", "interfaces": "", "fields": [{"original_string": "final ReplayState<T, ?> state;", "modifier": "final", "type": "ReplayState<T, ?>", "declarator": "state", "var_name": "state"}, {"original_string": "final SubjectSubscriptionManager<T> ssm;", "modifier": "final", "type": "SubjectSubscriptionManager<T>", "declarator": "ssm", "var_name": "ssm"}, {"original_string": "private static final Object[] EMPTY_ARRAY = new Object[0];", "modifier": "private static final", "type": "Object[]", "declarator": "EMPTY_ARRAY = new Object[0]", "var_name": "EMPTY_ARRAY"}], "methods": [{"identifier": "create", "parameters": "()", "modifiers": "public static", "return": "ReplaySubject<T>", "signature": "ReplaySubject<T> create()", "full_signature": "public static ReplaySubject<T> create()", "class_method_signature": "ReplaySubject.create()", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(int capacity)", "modifiers": "public static", "return": "ReplaySubject<T>", "signature": "ReplaySubject<T> create(int capacity)", "full_signature": "public static ReplaySubject<T> create(int capacity)", "class_method_signature": "ReplaySubject.create(int capacity)", "testcase": false, "constructor": false}, {"identifier": "createUnbounded", "parameters": "()", "modifiers": "static", "return": "ReplaySubject<T>", "signature": "ReplaySubject<T> createUnbounded()", "full_signature": "static ReplaySubject<T> createUnbounded()", "class_method_signature": "ReplaySubject.createUnbounded()", "testcase": false, "constructor": false}, {"identifier": "createWithSize", "parameters": "(int size)", "modifiers": "public static", "return": "ReplaySubject<T>", "signature": "ReplaySubject<T> createWithSize(int size)", "full_signature": "public static ReplaySubject<T> createWithSize(int size)", "class_method_signature": "ReplaySubject.createWithSize(int size)", "testcase": false, "constructor": false}, {"identifier": "createWithTime", "parameters": "(long time, TimeUnit unit, final Scheduler scheduler)", "modifiers": "public static", "return": "ReplaySubject<T>", "signature": "ReplaySubject<T> createWithTime(long time, TimeUnit unit, final Scheduler scheduler)", "full_signature": "public static ReplaySubject<T> createWithTime(long time, TimeUnit unit, final Scheduler scheduler)", "class_method_signature": "ReplaySubject.createWithTime(long time, TimeUnit unit, final Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "createWithTimeAndSize", "parameters": "(long time, TimeUnit unit, int size, final Scheduler scheduler)", "modifiers": "public static", "return": "ReplaySubject<T>", "signature": "ReplaySubject<T> createWithTimeAndSize(long time, TimeUnit unit, int size, final Scheduler scheduler)", "full_signature": "public static ReplaySubject<T> createWithTimeAndSize(long time, TimeUnit unit, int size, final Scheduler scheduler)", "class_method_signature": "ReplaySubject.createWithTimeAndSize(long time, TimeUnit unit, int size, final Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "createWithState", "parameters": "(final BoundedState<T> state,\n            Action1<SubjectObserver<T>> onStart)", "modifiers": "static final", "return": "ReplaySubject<T>", "signature": "ReplaySubject<T> createWithState(final BoundedState<T> state,\n            Action1<SubjectObserver<T>> onStart)", "full_signature": "static final ReplaySubject<T> createWithState(final BoundedState<T> state,\n            Action1<SubjectObserver<T>> onStart)", "class_method_signature": "ReplaySubject.createWithState(final BoundedState<T> state,\n            Action1<SubjectObserver<T>> onStart)", "testcase": false, "constructor": false}, {"identifier": "ReplaySubject", "parameters": "(OnSubscribe<T> onSubscribe, SubjectSubscriptionManager<T> ssm, ReplayState<T, ?> state)", "modifiers": "", "return": "", "signature": " ReplaySubject(OnSubscribe<T> onSubscribe, SubjectSubscriptionManager<T> ssm, ReplayState<T, ?> state)", "full_signature": "  ReplaySubject(OnSubscribe<T> onSubscribe, SubjectSubscriptionManager<T> ssm, ReplayState<T, ?> state)", "class_method_signature": "ReplaySubject.ReplaySubject(OnSubscribe<T> onSubscribe, SubjectSubscriptionManager<T> ssm, ReplayState<T, ?> state)", "testcase": false, "constructor": true}, {"identifier": "onNext", "parameters": "(T t)", "modifiers": "@Override public", "return": "void", "signature": "void onNext(T t)", "full_signature": "@Override public void onNext(T t)", "class_method_signature": "ReplaySubject.onNext(T t)", "testcase": false, "constructor": false}, {"identifier": "onError", "parameters": "(final Throwable e)", "modifiers": "@Override public", "return": "void", "signature": "void onError(final Throwable e)", "full_signature": "@Override public void onError(final Throwable e)", "class_method_signature": "ReplaySubject.onError(final Throwable e)", "testcase": false, "constructor": false}, {"identifier": "onCompleted", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void onCompleted()", "full_signature": "@Override public void onCompleted()", "class_method_signature": "ReplaySubject.onCompleted()", "testcase": false, "constructor": false}, {"identifier": "subscriberCount", "parameters": "()", "modifiers": "", "return": "int", "signature": "int subscriberCount()", "full_signature": " int subscriberCount()", "class_method_signature": "ReplaySubject.subscriberCount()", "testcase": false, "constructor": false}, {"identifier": "hasObservers", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasObservers()", "full_signature": "@Override public boolean hasObservers()", "class_method_signature": "ReplaySubject.hasObservers()", "testcase": false, "constructor": false}, {"identifier": "caughtUp", "parameters": "(SubjectObserver<? super T> o)", "modifiers": "private", "return": "boolean", "signature": "boolean caughtUp(SubjectObserver<? super T> o)", "full_signature": "private boolean caughtUp(SubjectObserver<? super T> o)", "class_method_signature": "ReplaySubject.caughtUp(SubjectObserver<? super T> o)", "testcase": false, "constructor": false}, {"identifier": "hasThrowable", "parameters": "()", "modifiers": "@Experimental public", "return": "boolean", "signature": "boolean hasThrowable()", "full_signature": "@Experimental public boolean hasThrowable()", "class_method_signature": "ReplaySubject.hasThrowable()", "testcase": false, "constructor": false}, {"identifier": "hasCompleted", "parameters": "()", "modifiers": "@Experimental public", "return": "boolean", "signature": "boolean hasCompleted()", "full_signature": "@Experimental public boolean hasCompleted()", "class_method_signature": "ReplaySubject.hasCompleted()", "testcase": false, "constructor": false}, {"identifier": "getThrowable", "parameters": "()", "modifiers": "@Experimental public", "return": "Throwable", "signature": "Throwable getThrowable()", "full_signature": "@Experimental public Throwable getThrowable()", "class_method_signature": "ReplaySubject.getThrowable()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Experimental public", "return": "int", "signature": "int size()", "full_signature": "@Experimental public int size()", "class_method_signature": "ReplaySubject.size()", "testcase": false, "constructor": false}, {"identifier": "hasAnyValue", "parameters": "()", "modifiers": "@Experimental public", "return": "boolean", "signature": "boolean hasAnyValue()", "full_signature": "@Experimental public boolean hasAnyValue()", "class_method_signature": "ReplaySubject.hasAnyValue()", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Experimental public", "return": "Object[]", "signature": "Object[] getValues()", "full_signature": "@SuppressWarnings(\"unchecked\") @Experimental public Object[] getValues()", "class_method_signature": "ReplaySubject.getValues()", "testcase": false, "constructor": false}, {"identifier": "getValues", "parameters": "(T[] a)", "modifiers": "@Experimental public", "return": "T[]", "signature": "T[] getValues(T[] a)", "full_signature": "@Experimental public T[] getValues(T[] a)", "class_method_signature": "ReplaySubject.getValues(T[] a)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/subjects/ReplaySubject.java"}, "focal_method": {"identifier": "getValues", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Experimental public", "return": "Object[]", "body": "@SuppressWarnings(\"unchecked\")\n    @Experimental\n    public Object[] getValues() {\n        return state.toArray((T[])EMPTY_ARRAY);\n    }", "signature": "Object[] getValues()", "full_signature": "@SuppressWarnings(\"unchecked\") @Experimental public Object[] getValues()", "class_method_signature": "ReplaySubject.getValues()", "testcase": false, "constructor": false, "invocations": ["toArray"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}