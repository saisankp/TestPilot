{"test_class": {"identifier": "TridentFileReadSpoutTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NEXT_LINE = \"next line\";", "modifier": "private static final", "type": "String", "declarator": "NEXT_LINE = \"next line\"", "var_name": "NEXT_LINE"}, {"original_string": "private FileReader reader;", "modifier": "private", "type": "FileReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "private TridentFileReadSpout spout;", "modifier": "private", "type": "TridentFileReadSpout", "declarator": "spout", "var_name": "spout"}, {"original_string": "private TridentCollector collector;", "modifier": "private", "type": "TridentCollector", "declarator": "collector", "var_name": "collector"}], "file": "storm/storm-benchmark/src/test/java/storm/benchmark/lib/spout/TridentFileReadSpoutTest.java"}, "test_case": {"identifier": "testEmitBatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEmitBatch() {\n    spout.emitBatch(0L, collector);\n    spout.emitBatch(1L, collector);\n\n    verify(collector, times(20)).emit(any(Values.class));\n\n    Map<Long, List<String>> batches = spout.getBatches();\n    assertThat(batches)\n            .hasSize(2)\n            .containsKey(0L)\n            .containsKey(1L);\n    assertThat(batches.get(0L)).hasSize(10);\n    assertThat(batches.get(1L)).hasSize(10);\n  }", "signature": "void testEmitBatch()", "full_signature": "@Test public void testEmitBatch()", "class_method_signature": "TridentFileReadSpoutTest.testEmitBatch()", "testcase": true, "constructor": false, "invocations": ["emitBatch", "emitBatch", "emit", "verify", "times", "any", "getBatches", "containsKey", "containsKey", "hasSize", "assertThat", "hasSize", "assertThat", "get", "hasSize", "assertThat", "get"]}, "focal_class": {"identifier": "TridentFileReadSpout", "superclass": "", "interfaces": "implements IBatchSpout", "fields": [{"original_string": "private static final long serialVersionUID = -3538746749629409899L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -3538746749629409899L", "var_name": "serialVersionUID"}, {"original_string": "private static final String DEFAULT_FILE = \"/resources/A_Tale_of_Two_City.txt\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_FILE = \"/resources/A_Tale_of_Two_City.txt\"", "var_name": "DEFAULT_FILE"}, {"original_string": "public static final String FIELDS = \"sentence\";", "modifier": "public static final", "type": "String", "declarator": "FIELDS = \"sentence\"", "var_name": "FIELDS"}, {"original_string": "private final int maxBatchSize;", "modifier": "private final", "type": "int", "declarator": "maxBatchSize", "var_name": "maxBatchSize"}, {"original_string": "private final FileReader reader;", "modifier": "private final", "type": "FileReader", "declarator": "reader", "var_name": "reader"}, {"original_string": "private final HashMap<Long, List<String>> batches = new HashMap<Long, List<String>>();", "modifier": "private final", "type": "HashMap<Long, List<String>>", "declarator": "batches = new HashMap<Long, List<String>>()", "var_name": "batches"}], "methods": [{"identifier": "TridentFileReadSpout", "parameters": "(int maxBatchSize)", "modifiers": "public", "return": "", "signature": " TridentFileReadSpout(int maxBatchSize)", "full_signature": "public  TridentFileReadSpout(int maxBatchSize)", "class_method_signature": "TridentFileReadSpout.TridentFileReadSpout(int maxBatchSize)", "testcase": false, "constructor": true}, {"identifier": "TridentFileReadSpout", "parameters": "(int maxBatchSize, String file)", "modifiers": "public", "return": "", "signature": " TridentFileReadSpout(int maxBatchSize, String file)", "full_signature": "public  TridentFileReadSpout(int maxBatchSize, String file)", "class_method_signature": "TridentFileReadSpout.TridentFileReadSpout(int maxBatchSize, String file)", "testcase": false, "constructor": true}, {"identifier": "TridentFileReadSpout", "parameters": "(int maxBatchSize, FileReader reader)", "modifiers": "public", "return": "", "signature": " TridentFileReadSpout(int maxBatchSize, FileReader reader)", "full_signature": "public  TridentFileReadSpout(int maxBatchSize, FileReader reader)", "class_method_signature": "TridentFileReadSpout.TridentFileReadSpout(int maxBatchSize, FileReader reader)", "testcase": false, "constructor": true}, {"identifier": "open", "parameters": "(Map conf, TopologyContext context)", "modifiers": "@Override public", "return": "void", "signature": "void open(Map conf, TopologyContext context)", "full_signature": "@Override public void open(Map conf, TopologyContext context)", "class_method_signature": "TridentFileReadSpout.open(Map conf, TopologyContext context)", "testcase": false, "constructor": false}, {"identifier": "emitBatch", "parameters": "(long batchId, TridentCollector collector)", "modifiers": "@Override public", "return": "void", "signature": "void emitBatch(long batchId, TridentCollector collector)", "full_signature": "@Override public void emitBatch(long batchId, TridentCollector collector)", "class_method_signature": "TridentFileReadSpout.emitBatch(long batchId, TridentCollector collector)", "testcase": false, "constructor": false}, {"identifier": "ack", "parameters": "(long batchId)", "modifiers": "@Override public", "return": "void", "signature": "void ack(long batchId)", "full_signature": "@Override public void ack(long batchId)", "class_method_signature": "TridentFileReadSpout.ack(long batchId)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "TridentFileReadSpout.close()", "testcase": false, "constructor": false}, {"identifier": "getComponentConfiguration", "parameters": "()", "modifiers": "@Override public", "return": "Map", "signature": "Map getComponentConfiguration()", "full_signature": "@Override public Map getComponentConfiguration()", "class_method_signature": "TridentFileReadSpout.getComponentConfiguration()", "testcase": false, "constructor": false}, {"identifier": "getOutputFields", "parameters": "()", "modifiers": "@Override public", "return": "Fields", "signature": "Fields getOutputFields()", "full_signature": "@Override public Fields getOutputFields()", "class_method_signature": "TridentFileReadSpout.getOutputFields()", "testcase": false, "constructor": false}, {"identifier": "getBatches", "parameters": "()", "modifiers": "", "return": "Map<Long, List<String>>", "signature": "Map<Long, List<String>> getBatches()", "full_signature": " Map<Long, List<String>> getBatches()", "class_method_signature": "TridentFileReadSpout.getBatches()", "testcase": false, "constructor": false}], "file": "storm/storm-benchmark/src/main/java/storm/benchmark/lib/spout/TridentFileReadSpout.java"}, "focal_method": {"identifier": "emitBatch", "parameters": "(long batchId, TridentCollector collector)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void emitBatch(long batchId, TridentCollector collector) {\n    List<String> batch = batches.get(batchId);\n    if (batch == null) {\n      batch = new ArrayList<String>();\n      for (int i = 0;  i < maxBatchSize; i++) {\n        batch.add(reader.nextLine());\n      }\n      batches.put(batchId, batch);\n    }\n    for(String line : batch){\n      collector.emit(new Values(line));\n    }\n  }", "signature": "void emitBatch(long batchId, TridentCollector collector)", "full_signature": "@Override public void emitBatch(long batchId, TridentCollector collector)", "class_method_signature": "TridentFileReadSpout.emitBatch(long batchId, TridentCollector collector)", "testcase": false, "constructor": false, "invocations": ["get", "add", "nextLine", "put", "emit"]}, "repository": {"repo_id": 44512524, "url": "https://github.com/zqhxuyuan/bigdata", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 8, "size": 91550, "license": "licensed"}}