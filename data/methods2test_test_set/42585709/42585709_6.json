{"test_class": {"identifier": "AuditResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SAMPLE_PRINCIPAL = \"SAMPLE_PRINCIPAL\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_PRINCIPAL = \"SAMPLE_PRINCIPAL\"", "var_name": "SAMPLE_PRINCIPAL"}, {"original_string": "private static final String SAMPLE_TYPE = \"SAMPLE_TYPE\";", "modifier": "private static final", "type": "String", "declarator": "SAMPLE_TYPE = \"SAMPLE_TYPE\"", "var_name": "SAMPLE_TYPE"}, {"original_string": "private static final LocalDateTime SAMPLE_TIMESTAMP = LocalDateTime.parse(\"2015-08-04T10:11:30\");", "modifier": "private static final", "type": "LocalDateTime", "declarator": "SAMPLE_TIMESTAMP = LocalDateTime.parse(\"2015-08-04T10:11:30\")", "var_name": "SAMPLE_TIMESTAMP"}, {"original_string": "@Inject\n\tprivate PersistenceAuditEventRepository auditEventRepository;", "modifier": "@Inject\n\tprivate", "type": "PersistenceAuditEventRepository", "declarator": "auditEventRepository", "var_name": "auditEventRepository"}, {"original_string": "@Inject\n\tprivate AuditEventConverter auditEventConverter;", "modifier": "@Inject\n\tprivate", "type": "AuditEventConverter", "declarator": "auditEventConverter", "var_name": "auditEventConverter"}, {"original_string": "private PersistentAuditEvent auditEvent;", "modifier": "private", "type": "PersistentAuditEvent", "declarator": "auditEvent", "var_name": "auditEvent"}, {"original_string": "private MockMvc restAuditMockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "restAuditMockMvc", "var_name": "restAuditMockMvc"}], "file": "Editor/src/test/java/ch/hsr/servicestoolkit/editor/web/rest/AuditResourceTest.java"}, "test_case": {"identifier": "getAllAudits", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void getAllAudits() throws Exception {\n\t\t// Initialize the database\n\t\tauditEventRepository.save(auditEvent);\n\n\t\t// Get all the audits\n\t\trestAuditMockMvc.perform(get(\"/api/audits\")).andExpect(status().isOk())\n\t\t\t\t// .andDo(print())\n\t\t\t\t.andExpect(content().contentType(MediaType.APPLICATION_JSON)).andExpect(jsonPath(\"$.[*].principal\").value(hasItem(SAMPLE_PRINCIPAL)));\n\t}", "signature": "void getAllAudits()", "full_signature": "@Test public void getAllAudits()", "class_method_signature": "AuditResourceTest.getAllAudits()", "testcase": true, "constructor": false, "invocations": ["save", "andExpect", "andExpect", "andExpect", "perform", "get", "isOk", "status", "contentType", "content", "value", "jsonPath", "hasItem"]}, "focal_class": {"identifier": "AuditResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AuditEventService auditEventService;", "modifier": "private", "type": "AuditEventService", "declarator": "auditEventService", "var_name": "auditEventService"}], "methods": [{"identifier": "AuditResource", "parameters": "(AuditEventService auditEventService)", "modifiers": "@Inject public", "return": "", "signature": " AuditResource(AuditEventService auditEventService)", "full_signature": "@Inject public  AuditResource(AuditEventService auditEventService)", "class_method_signature": "AuditResource.AuditResource(AuditEventService auditEventService)", "testcase": false, "constructor": true}, {"identifier": "initBinder", "parameters": "(WebDataBinder binder)", "modifiers": "@InitBinder public", "return": "void", "signature": "void initBinder(WebDataBinder binder)", "full_signature": "@InitBinder public void initBinder(WebDataBinder binder)", "class_method_signature": "AuditResource.initBinder(WebDataBinder binder)", "testcase": false, "constructor": false}, {"identifier": "getAll", "parameters": "()", "modifiers": "@RequestMapping(method = RequestMethod.GET) public", "return": "List<AuditEvent>", "signature": "List<AuditEvent> getAll()", "full_signature": "@RequestMapping(method = RequestMethod.GET) public List<AuditEvent> getAll()", "class_method_signature": "AuditResource.getAll()", "testcase": false, "constructor": false}, {"identifier": "getByDates", "parameters": "(@RequestParam(value = \"fromDate\") LocalDateTime fromDate,\n                                       @RequestParam(value = \"toDate\") LocalDateTime toDate)", "modifiers": "@RequestMapping(method = RequestMethod.GET, params = {\"fromDate\", \"toDate\"}) public", "return": "List<AuditEvent>", "signature": "List<AuditEvent> getByDates(@RequestParam(value = \"fromDate\") LocalDateTime fromDate,\n                                       @RequestParam(value = \"toDate\") LocalDateTime toDate)", "full_signature": "@RequestMapping(method = RequestMethod.GET, params = {\"fromDate\", \"toDate\"}) public List<AuditEvent> getByDates(@RequestParam(value = \"fromDate\") LocalDateTime fromDate,\n                                       @RequestParam(value = \"toDate\") LocalDateTime toDate)", "class_method_signature": "AuditResource.getByDates(@RequestParam(value = \"fromDate\") LocalDateTime fromDate,\n                                       @RequestParam(value = \"toDate\") LocalDateTime toDate)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(@PathVariable Long id)", "modifiers": "@RequestMapping(value = \"/{id:.+}\", method = RequestMethod.GET) public", "return": "ResponseEntity<AuditEvent>", "signature": "ResponseEntity<AuditEvent> get(@PathVariable Long id)", "full_signature": "@RequestMapping(value = \"/{id:.+}\", method = RequestMethod.GET) public ResponseEntity<AuditEvent> get(@PathVariable Long id)", "class_method_signature": "AuditResource.get(@PathVariable Long id)", "testcase": false, "constructor": false}], "file": "Editor/src/main/java/ch/hsr/servicestoolkit/editor/web/rest/AuditResource.java"}, "focal_method": {"identifier": "get", "parameters": "(@PathVariable Long id)", "modifiers": "@RequestMapping(value = \"/{id:.+}\", method = RequestMethod.GET) public", "return": "ResponseEntity<AuditEvent>", "body": "@RequestMapping(value = \"/{id:.+}\",\n            method = RequestMethod.GET)\n    public ResponseEntity<AuditEvent> get(@PathVariable Long id) {\n        \n        return auditEventService.find(id)\n                .map((entity) -> new ResponseEntity<>(entity, HttpStatus.OK))\n                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));\n    }", "signature": "ResponseEntity<AuditEvent> get(@PathVariable Long id)", "full_signature": "@RequestMapping(value = \"/{id:.+}\", method = RequestMethod.GET) public ResponseEntity<AuditEvent> get(@PathVariable Long id)", "class_method_signature": "AuditResource.get(@PathVariable Long id)", "testcase": false, "constructor": false, "invocations": ["orElse", "map", "find"]}, "repository": {"repo_id": 42585709, "url": "https://github.com/ServiceCutter/ServiceCutter", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 29, "size": 8580, "license": "licensed"}}