{"test_class": {"identifier": "AbstractInterfaceConfigTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@ClassRule\n    public static TemporaryFolder tempDir = new TemporaryFolder();", "modifier": "@ClassRule\n    public static", "type": "TemporaryFolder", "declarator": "tempDir = new TemporaryFolder()", "var_name": "tempDir"}, {"original_string": "private static File dubboProperties;", "modifier": "private static", "type": "File", "declarator": "dubboProperties", "var_name": "dubboProperties"}], "file": "dubbo-config/dubbo-config-api/src/test/java/com/alibaba/dubbo/config/AbstractInterfaceConfigTest.java"}, "test_case": {"identifier": "testCheckRegistry2", "parameters": "()", "modifiers": "@Test(expected = IllegalStateException.class) public", "return": "void", "body": "@Test(expected = IllegalStateException.class)\n    public void testCheckRegistry2() throws Exception {\n        InterfaceConfig interfaceConfig = new InterfaceConfig();\n        interfaceConfig.checkRegistry();\n    }", "signature": "void testCheckRegistry2()", "full_signature": "@Test(expected = IllegalStateException.class) public void testCheckRegistry2()", "class_method_signature": "AbstractInterfaceConfigTest.testCheckRegistry2()", "testcase": true, "constructor": false, "invocations": ["checkRegistry"]}, "focal_class": {"identifier": "AbstractInterfaceConfig", "superclass": "extends AbstractMethodConfig", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -1559314110797223229L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -1559314110797223229L", "var_name": "serialVersionUID"}, {"original_string": "protected String local;", "modifier": "protected", "type": "String", "declarator": "local", "var_name": "local"}, {"original_string": "protected String stub;", "modifier": "protected", "type": "String", "declarator": "stub", "var_name": "stub"}, {"original_string": "protected MonitorConfig monitor;", "modifier": "protected", "type": "MonitorConfig", "declarator": "monitor", "var_name": "monitor"}, {"original_string": "protected String proxy;", "modifier": "protected", "type": "String", "declarator": "proxy", "var_name": "proxy"}, {"original_string": "protected String cluster;", "modifier": "protected", "type": "String", "declarator": "cluster", "var_name": "cluster"}, {"original_string": "protected String filter;", "modifier": "protected", "type": "String", "declarator": "filter", "var_name": "filter"}, {"original_string": "protected String listener;", "modifier": "protected", "type": "String", "declarator": "listener", "var_name": "listener"}, {"original_string": "protected String owner;", "modifier": "protected", "type": "String", "declarator": "owner", "var_name": "owner"}, {"original_string": "protected Integer connections;", "modifier": "protected", "type": "Integer", "declarator": "connections", "var_name": "connections"}, {"original_string": "protected String layer;", "modifier": "protected", "type": "String", "declarator": "layer", "var_name": "layer"}, {"original_string": "protected ApplicationConfig application;", "modifier": "protected", "type": "ApplicationConfig", "declarator": "application", "var_name": "application"}, {"original_string": "protected ModuleConfig module;", "modifier": "protected", "type": "ModuleConfig", "declarator": "module", "var_name": "module"}, {"original_string": "protected List<RegistryConfig> registries;", "modifier": "protected", "type": "List<RegistryConfig>", "declarator": "registries", "var_name": "registries"}, {"original_string": "protected String onconnect;", "modifier": "protected", "type": "String", "declarator": "onconnect", "var_name": "onconnect"}, {"original_string": "protected String ondisconnect;", "modifier": "protected", "type": "String", "declarator": "ondisconnect", "var_name": "ondisconnect"}, {"original_string": "private Integer callbacks;", "modifier": "private", "type": "Integer", "declarator": "callbacks", "var_name": "callbacks"}, {"original_string": "private String scope;", "modifier": "private", "type": "String", "declarator": "scope", "var_name": "scope"}], "methods": [{"identifier": "checkRegistry", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void checkRegistry()", "full_signature": "protected void checkRegistry()", "class_method_signature": "AbstractInterfaceConfig.checkRegistry()", "testcase": false, "constructor": false}, {"identifier": "checkApplication", "parameters": "()", "modifiers": "@SuppressWarnings(\"deprecation\") protected", "return": "void", "signature": "void checkApplication()", "full_signature": "@SuppressWarnings(\"deprecation\") protected void checkApplication()", "class_method_signature": "AbstractInterfaceConfig.checkApplication()", "testcase": false, "constructor": false}, {"identifier": "loadRegistries", "parameters": "(boolean provider)", "modifiers": "protected", "return": "List<URL>", "signature": "List<URL> loadRegistries(boolean provider)", "full_signature": "protected List<URL> loadRegistries(boolean provider)", "class_method_signature": "AbstractInterfaceConfig.loadRegistries(boolean provider)", "testcase": false, "constructor": false}, {"identifier": "loadMonitor", "parameters": "(URL registryURL)", "modifiers": "protected", "return": "URL", "signature": "URL loadMonitor(URL registryURL)", "full_signature": "protected URL loadMonitor(URL registryURL)", "class_method_signature": "AbstractInterfaceConfig.loadMonitor(URL registryURL)", "testcase": false, "constructor": false}, {"identifier": "checkInterfaceAndMethods", "parameters": "(Class<?> interfaceClass, List<MethodConfig> methods)", "modifiers": "protected", "return": "void", "signature": "void checkInterfaceAndMethods(Class<?> interfaceClass, List<MethodConfig> methods)", "full_signature": "protected void checkInterfaceAndMethods(Class<?> interfaceClass, List<MethodConfig> methods)", "class_method_signature": "AbstractInterfaceConfig.checkInterfaceAndMethods(Class<?> interfaceClass, List<MethodConfig> methods)", "testcase": false, "constructor": false}, {"identifier": "checkMock", "parameters": "(Class<?> interfaceClass)", "modifiers": "", "return": "void", "signature": "void checkMock(Class<?> interfaceClass)", "full_signature": " void checkMock(Class<?> interfaceClass)", "class_method_signature": "AbstractInterfaceConfig.checkMock(Class<?> interfaceClass)", "testcase": false, "constructor": false}, {"identifier": "checkStub", "parameters": "(Class<?> interfaceClass)", "modifiers": "", "return": "void", "signature": "void checkStub(Class<?> interfaceClass)", "full_signature": " void checkStub(Class<?> interfaceClass)", "class_method_signature": "AbstractInterfaceConfig.checkStub(Class<?> interfaceClass)", "testcase": false, "constructor": false}, {"identifier": "getLocal", "parameters": "()", "modifiers": "@Deprecated public", "return": "String", "signature": "String getLocal()", "full_signature": "@Deprecated public String getLocal()", "class_method_signature": "AbstractInterfaceConfig.getLocal()", "testcase": false, "constructor": false}, {"identifier": "setLocal", "parameters": "(Boolean local)", "modifiers": "@Deprecated public", "return": "void", "signature": "void setLocal(Boolean local)", "full_signature": "@Deprecated public void setLocal(Boolean local)", "class_method_signature": "AbstractInterfaceConfig.setLocal(Boolean local)", "testcase": false, "constructor": false}, {"identifier": "setLocal", "parameters": "(String local)", "modifiers": "@Deprecated public", "return": "void", "signature": "void setLocal(String local)", "full_signature": "@Deprecated public void setLocal(String local)", "class_method_signature": "AbstractInterfaceConfig.setLocal(String local)", "testcase": false, "constructor": false}, {"identifier": "getStub", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStub()", "full_signature": "public String getStub()", "class_method_signature": "AbstractInterfaceConfig.getStub()", "testcase": false, "constructor": false}, {"identifier": "setStub", "parameters": "(Boolean stub)", "modifiers": "public", "return": "void", "signature": "void setStub(Boolean stub)", "full_signature": "public void setStub(Boolean stub)", "class_method_signature": "AbstractInterfaceConfig.setStub(Boolean stub)", "testcase": false, "constructor": false}, {"identifier": "setStub", "parameters": "(String stub)", "modifiers": "public", "return": "void", "signature": "void setStub(String stub)", "full_signature": "public void setStub(String stub)", "class_method_signature": "AbstractInterfaceConfig.setStub(String stub)", "testcase": false, "constructor": false}, {"identifier": "getCluster", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCluster()", "full_signature": "public String getCluster()", "class_method_signature": "AbstractInterfaceConfig.getCluster()", "testcase": false, "constructor": false}, {"identifier": "setCluster", "parameters": "(String cluster)", "modifiers": "public", "return": "void", "signature": "void setCluster(String cluster)", "full_signature": "public void setCluster(String cluster)", "class_method_signature": "AbstractInterfaceConfig.setCluster(String cluster)", "testcase": false, "constructor": false}, {"identifier": "getProxy", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getProxy()", "full_signature": "public String getProxy()", "class_method_signature": "AbstractInterfaceConfig.getProxy()", "testcase": false, "constructor": false}, {"identifier": "setProxy", "parameters": "(String proxy)", "modifiers": "public", "return": "void", "signature": "void setProxy(String proxy)", "full_signature": "public void setProxy(String proxy)", "class_method_signature": "AbstractInterfaceConfig.setProxy(String proxy)", "testcase": false, "constructor": false}, {"identifier": "getConnections", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getConnections()", "full_signature": "public Integer getConnections()", "class_method_signature": "AbstractInterfaceConfig.getConnections()", "testcase": false, "constructor": false}, {"identifier": "setConnections", "parameters": "(Integer connections)", "modifiers": "public", "return": "void", "signature": "void setConnections(Integer connections)", "full_signature": "public void setConnections(Integer connections)", "class_method_signature": "AbstractInterfaceConfig.setConnections(Integer connections)", "testcase": false, "constructor": false}, {"identifier": "getFilter", "parameters": "()", "modifiers": "@Parameter(key = Constants.REFERENCE_FILTER_KEY, append = true) public", "return": "String", "signature": "String getFilter()", "full_signature": "@Parameter(key = Constants.REFERENCE_FILTER_KEY, append = true) public String getFilter()", "class_method_signature": "AbstractInterfaceConfig.getFilter()", "testcase": false, "constructor": false}, {"identifier": "setFilter", "parameters": "(String filter)", "modifiers": "public", "return": "void", "signature": "void setFilter(String filter)", "full_signature": "public void setFilter(String filter)", "class_method_signature": "AbstractInterfaceConfig.setFilter(String filter)", "testcase": false, "constructor": false}, {"identifier": "getListener", "parameters": "()", "modifiers": "@Parameter(key = Constants.INVOKER_LISTENER_KEY, append = true) public", "return": "String", "signature": "String getListener()", "full_signature": "@Parameter(key = Constants.INVOKER_LISTENER_KEY, append = true) public String getListener()", "class_method_signature": "AbstractInterfaceConfig.getListener()", "testcase": false, "constructor": false}, {"identifier": "setListener", "parameters": "(String listener)", "modifiers": "public", "return": "void", "signature": "void setListener(String listener)", "full_signature": "public void setListener(String listener)", "class_method_signature": "AbstractInterfaceConfig.setListener(String listener)", "testcase": false, "constructor": false}, {"identifier": "getLayer", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLayer()", "full_signature": "public String getLayer()", "class_method_signature": "AbstractInterfaceConfig.getLayer()", "testcase": false, "constructor": false}, {"identifier": "setLayer", "parameters": "(String layer)", "modifiers": "public", "return": "void", "signature": "void setLayer(String layer)", "full_signature": "public void setLayer(String layer)", "class_method_signature": "AbstractInterfaceConfig.setLayer(String layer)", "testcase": false, "constructor": false}, {"identifier": "getApplication", "parameters": "()", "modifiers": "public", "return": "ApplicationConfig", "signature": "ApplicationConfig getApplication()", "full_signature": "public ApplicationConfig getApplication()", "class_method_signature": "AbstractInterfaceConfig.getApplication()", "testcase": false, "constructor": false}, {"identifier": "setApplication", "parameters": "(ApplicationConfig application)", "modifiers": "public", "return": "void", "signature": "void setApplication(ApplicationConfig application)", "full_signature": "public void setApplication(ApplicationConfig application)", "class_method_signature": "AbstractInterfaceConfig.setApplication(ApplicationConfig application)", "testcase": false, "constructor": false}, {"identifier": "getModule", "parameters": "()", "modifiers": "public", "return": "ModuleConfig", "signature": "ModuleConfig getModule()", "full_signature": "public ModuleConfig getModule()", "class_method_signature": "AbstractInterfaceConfig.getModule()", "testcase": false, "constructor": false}, {"identifier": "setModule", "parameters": "(ModuleConfig module)", "modifiers": "public", "return": "void", "signature": "void setModule(ModuleConfig module)", "full_signature": "public void setModule(ModuleConfig module)", "class_method_signature": "AbstractInterfaceConfig.setModule(ModuleConfig module)", "testcase": false, "constructor": false}, {"identifier": "getRegistry", "parameters": "()", "modifiers": "public", "return": "RegistryConfig", "signature": "RegistryConfig getRegistry()", "full_signature": "public RegistryConfig getRegistry()", "class_method_signature": "AbstractInterfaceConfig.getRegistry()", "testcase": false, "constructor": false}, {"identifier": "setRegistry", "parameters": "(RegistryConfig registry)", "modifiers": "public", "return": "void", "signature": "void setRegistry(RegistryConfig registry)", "full_signature": "public void setRegistry(RegistryConfig registry)", "class_method_signature": "AbstractInterfaceConfig.setRegistry(RegistryConfig registry)", "testcase": false, "constructor": false}, {"identifier": "getRegistries", "parameters": "()", "modifiers": "public", "return": "List<RegistryConfig>", "signature": "List<RegistryConfig> getRegistries()", "full_signature": "public List<RegistryConfig> getRegistries()", "class_method_signature": "AbstractInterfaceConfig.getRegistries()", "testcase": false, "constructor": false}, {"identifier": "setRegistries", "parameters": "(List<? extends RegistryConfig> registries)", "modifiers": "@SuppressWarnings({\"unchecked\"}) public", "return": "void", "signature": "void setRegistries(List<? extends RegistryConfig> registries)", "full_signature": "@SuppressWarnings({\"unchecked\"}) public void setRegistries(List<? extends RegistryConfig> registries)", "class_method_signature": "AbstractInterfaceConfig.setRegistries(List<? extends RegistryConfig> registries)", "testcase": false, "constructor": false}, {"identifier": "getMonitor", "parameters": "()", "modifiers": "public", "return": "MonitorConfig", "signature": "MonitorConfig getMonitor()", "full_signature": "public MonitorConfig getMonitor()", "class_method_signature": "AbstractInterfaceConfig.getMonitor()", "testcase": false, "constructor": false}, {"identifier": "setMonitor", "parameters": "(String monitor)", "modifiers": "public", "return": "void", "signature": "void setMonitor(String monitor)", "full_signature": "public void setMonitor(String monitor)", "class_method_signature": "AbstractInterfaceConfig.setMonitor(String monitor)", "testcase": false, "constructor": false}, {"identifier": "setMonitor", "parameters": "(MonitorConfig monitor)", "modifiers": "public", "return": "void", "signature": "void setMonitor(MonitorConfig monitor)", "full_signature": "public void setMonitor(MonitorConfig monitor)", "class_method_signature": "AbstractInterfaceConfig.setMonitor(MonitorConfig monitor)", "testcase": false, "constructor": false}, {"identifier": "getOwner", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOwner()", "full_signature": "public String getOwner()", "class_method_signature": "AbstractInterfaceConfig.getOwner()", "testcase": false, "constructor": false}, {"identifier": "setOwner", "parameters": "(String owner)", "modifiers": "public", "return": "void", "signature": "void setOwner(String owner)", "full_signature": "public void setOwner(String owner)", "class_method_signature": "AbstractInterfaceConfig.setOwner(String owner)", "testcase": false, "constructor": false}, {"identifier": "getCallbacks", "parameters": "()", "modifiers": "public", "return": "Integer", "signature": "Integer getCallbacks()", "full_signature": "public Integer getCallbacks()", "class_method_signature": "AbstractInterfaceConfig.getCallbacks()", "testcase": false, "constructor": false}, {"identifier": "setCallbacks", "parameters": "(Integer callbacks)", "modifiers": "public", "return": "void", "signature": "void setCallbacks(Integer callbacks)", "full_signature": "public void setCallbacks(Integer callbacks)", "class_method_signature": "AbstractInterfaceConfig.setCallbacks(Integer callbacks)", "testcase": false, "constructor": false}, {"identifier": "getOnconnect", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOnconnect()", "full_signature": "public String getOnconnect()", "class_method_signature": "AbstractInterfaceConfig.getOnconnect()", "testcase": false, "constructor": false}, {"identifier": "setOnconnect", "parameters": "(String onconnect)", "modifiers": "public", "return": "void", "signature": "void setOnconnect(String onconnect)", "full_signature": "public void setOnconnect(String onconnect)", "class_method_signature": "AbstractInterfaceConfig.setOnconnect(String onconnect)", "testcase": false, "constructor": false}, {"identifier": "getOndisconnect", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getOndisconnect()", "full_signature": "public String getOndisconnect()", "class_method_signature": "AbstractInterfaceConfig.getOndisconnect()", "testcase": false, "constructor": false}, {"identifier": "setOndisconnect", "parameters": "(String ondisconnect)", "modifiers": "public", "return": "void", "signature": "void setOndisconnect(String ondisconnect)", "full_signature": "public void setOndisconnect(String ondisconnect)", "class_method_signature": "AbstractInterfaceConfig.setOndisconnect(String ondisconnect)", "testcase": false, "constructor": false}, {"identifier": "getScope", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getScope()", "full_signature": "public String getScope()", "class_method_signature": "AbstractInterfaceConfig.getScope()", "testcase": false, "constructor": false}, {"identifier": "setScope", "parameters": "(String scope)", "modifiers": "public", "return": "void", "signature": "void setScope(String scope)", "full_signature": "public void setScope(String scope)", "class_method_signature": "AbstractInterfaceConfig.setScope(String scope)", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-api/src/main/java/com/alibaba/dubbo/config/AbstractInterfaceConfig.java"}, "focal_method": {"identifier": "checkRegistry", "parameters": "()", "modifiers": "protected", "return": "void", "body": "protected void checkRegistry() {\n        // for backward compatibility\n        if (registries == null || registries.isEmpty()) {\n            String address = ConfigUtils.getProperty(\"dubbo.registry.address\");\n            if (address != null && address.length() > 0) {\n                registries = new ArrayList<RegistryConfig>();\n                String[] as = address.split(\"\\\\s*[|]+\\\\s*\");\n                for (String a : as) {\n                    RegistryConfig registryConfig = new RegistryConfig();\n                    registryConfig.setAddress(a);\n                    registries.add(registryConfig);\n                }\n            }\n        }\n        if ((registries == null || registries.isEmpty())) {\n            throw new IllegalStateException((getClass().getSimpleName().startsWith(\"Reference\")\n                    ? \"No such any registry to refer service in consumer \"\n                    : \"No such any registry to export service in provider \")\n                    + NetUtils.getLocalHost()\n                    + \" use dubbo version \"\n                    + Version.getVersion()\n                    + \", Please add <dubbo:registry address=\\\"...\\\" /> to your spring config. If you want unregister, please set <dubbo:service registry=\\\"N/A\\\" />\");\n        }\n        for (RegistryConfig registryConfig : registries) {\n            appendProperties(registryConfig);\n        }\n    }", "signature": "void checkRegistry()", "full_signature": "protected void checkRegistry()", "class_method_signature": "AbstractInterfaceConfig.checkRegistry()", "testcase": false, "constructor": false, "invocations": ["isEmpty", "getProperty", "length", "split", "setAddress", "add", "isEmpty", "startsWith", "getSimpleName", "getClass", "getLocalHost", "getVersion", "appendProperties"]}, "repository": {"repo_id": 189562861, "url": "https://github.com/smallFive55/dubbo-dubbo-2.6.6", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 1428, "license": "licensed"}}