{"test_class": {"identifier": "RemoteSchemaProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final SourceIdentifier ID = RevisionSourceIdentifier.create(\"Test\", Revision.of(\"2015-10-30\"));", "modifier": "private static final", "type": "SourceIdentifier", "declarator": "ID = RevisionSourceIdentifier.create(\"Test\", Revision.of(\"2015-10-30\"))", "var_name": "ID"}, {"original_string": "private RemoteSchemaProvider remoteSchemaProvider;", "modifier": "private", "type": "RemoteSchemaProvider", "declarator": "remoteSchemaProvider", "var_name": "remoteSchemaProvider"}, {"original_string": "private RemoteYangTextSourceProvider mockedRemoteSchemaRepository;", "modifier": "private", "type": "RemoteYangTextSourceProvider", "declarator": "mockedRemoteSchemaRepository", "var_name": "mockedRemoteSchemaRepository"}], "file": "opendaylight/md-sal/sal-clustering-commons/src/test/java/org/opendaylight/controller/cluster/schema/provider/impl/RemoteSchemaProviderTest.java"}, "test_case": {"identifier": "getNonExistingSchemaSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getNonExistingSchemaSource() throws InterruptedException {\n        doReturn(Futures.failed(new SchemaSourceException(\"Source not provided\")))\n            .when(mockedRemoteSchemaRepository).getYangTextSchemaSource(ID);\n\n        ListenableFuture<YangTextSchemaSource> sourceFuture = remoteSchemaProvider.getSource(ID);\n        assertTrue(sourceFuture.isDone());\n        try {\n            sourceFuture.get();\n            fail(\"Expected a failure to occur\");\n        } catch (ExecutionException e) {\n            assertThat(e.getCause(), instanceOf(SchemaSourceException.class));\n        }\n    }", "signature": "void getNonExistingSchemaSource()", "full_signature": "@Test public void getNonExistingSchemaSource()", "class_method_signature": "RemoteSchemaProviderTest.getNonExistingSchemaSource()", "testcase": true, "constructor": false, "invocations": ["getYangTextSchemaSource", "when", "doReturn", "failed", "getSource", "assertTrue", "isDone", "get", "fail", "assertThat", "getCause", "instanceOf"]}, "focal_class": {"identifier": "RemoteSchemaProvider", "superclass": "", "interfaces": "implements SchemaSourceProvider<YangTextSchemaSource>", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(RemoteSchemaProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(RemoteSchemaProvider.class)", "var_name": "LOG"}, {"original_string": "private final RemoteYangTextSourceProvider remoteRepo;", "modifier": "private final", "type": "RemoteYangTextSourceProvider", "declarator": "remoteRepo", "var_name": "remoteRepo"}, {"original_string": "private final ExecutionContext executionContext;", "modifier": "private final", "type": "ExecutionContext", "declarator": "executionContext", "var_name": "executionContext"}], "methods": [{"identifier": "RemoteSchemaProvider", "parameters": "(final RemoteYangTextSourceProvider remoteRepo,\n            final ExecutionContext executionContext)", "modifiers": "public", "return": "", "signature": " RemoteSchemaProvider(final RemoteYangTextSourceProvider remoteRepo,\n            final ExecutionContext executionContext)", "full_signature": "public  RemoteSchemaProvider(final RemoteYangTextSourceProvider remoteRepo,\n            final ExecutionContext executionContext)", "class_method_signature": "RemoteSchemaProvider.RemoteSchemaProvider(final RemoteYangTextSourceProvider remoteRepo,\n            final ExecutionContext executionContext)", "testcase": false, "constructor": true}, {"identifier": "getSource", "parameters": "(final SourceIdentifier sourceIdentifier)", "modifiers": "@Override public", "return": "ListenableFuture<YangTextSchemaSource>", "signature": "ListenableFuture<YangTextSchemaSource> getSource(final SourceIdentifier sourceIdentifier)", "full_signature": "@Override public ListenableFuture<YangTextSchemaSource> getSource(final SourceIdentifier sourceIdentifier)", "class_method_signature": "RemoteSchemaProvider.getSource(final SourceIdentifier sourceIdentifier)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-clustering-commons/src/main/java/org/opendaylight/controller/cluster/schema/provider/impl/RemoteSchemaProvider.java"}, "focal_method": {"identifier": "getSource", "parameters": "(final SourceIdentifier sourceIdentifier)", "modifiers": "@Override public", "return": "ListenableFuture<YangTextSchemaSource>", "body": "@Override\n    public ListenableFuture<YangTextSchemaSource> getSource(final SourceIdentifier sourceIdentifier) {\n        LOG.trace(\"Getting yang schema source for {}\", sourceIdentifier.getName());\n\n        Future<YangTextSchemaSourceSerializationProxy> result = remoteRepo.getYangTextSchemaSource(sourceIdentifier);\n\n        final SettableFuture<YangTextSchemaSource> res = SettableFuture.create();\n        result.onComplete(new OnComplete<YangTextSchemaSourceSerializationProxy>() {\n            @Override\n            public void onComplete(final Throwable throwable,\n                    final YangTextSchemaSourceSerializationProxy yangTextSchemaSourceSerializationProxy) {\n                if (yangTextSchemaSourceSerializationProxy != null) {\n                    res.set(yangTextSchemaSourceSerializationProxy.getRepresentation());\n                }\n                if (throwable != null) {\n                    res.setException(throwable);\n                }\n            }\n        }, executionContext);\n\n        return res;\n    }", "signature": "ListenableFuture<YangTextSchemaSource> getSource(final SourceIdentifier sourceIdentifier)", "full_signature": "@Override public ListenableFuture<YangTextSchemaSource> getSource(final SourceIdentifier sourceIdentifier)", "class_method_signature": "RemoteSchemaProvider.getSource(final SourceIdentifier sourceIdentifier)", "testcase": false, "constructor": false, "invocations": ["trace", "getName", "getYangTextSchemaSource", "create", "onComplete", "set", "getRepresentation", "setException"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}