{"test_class": {"identifier": "TensorBoardComponentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n  public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "private ComponentTestCommons testCommons =\n      new ComponentTestCommons(TensorFlowRole.TENSORBOARD);", "modifier": "private", "type": "ComponentTestCommons", "declarator": "testCommons =\n      new ComponentTestCommons(TensorFlowRole.TENSORBOARD)", "var_name": "testCommons"}], "file": "submarine-server/server-submitter/submitter-yarnservice/src/test/java/org/apache/submarine/server/submitter/yarnservice/tensorflow/component/TensorBoardComponentTest.java"}, "test_case": {"identifier": "testTensorBoardComponentWithNullResource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTensorBoardComponentWithNullResource() throws IOException {\n    TensorFlowRunJobParameters parameters = new TensorFlowRunJobParameters();\n    parameters.setTensorboardResource(null);\n\n    TensorBoardComponent tensorBoardComponent =\n        createTensorBoardComponent(parameters);\n\n    expectedException.expect(NullPointerException.class);\n    expectedException.expectMessage(\"TensorBoard resource must not be null\");\n    tensorBoardComponent.createComponent();\n  }", "signature": "void testTensorBoardComponentWithNullResource()", "full_signature": "@Test public void testTensorBoardComponentWithNullResource()", "class_method_signature": "TensorBoardComponentTest.testTensorBoardComponentWithNullResource()", "testcase": true, "constructor": false, "invocations": ["setTensorboardResource", "createTensorBoardComponent", "expect", "expectMessage", "createComponent"]}, "focal_class": {"identifier": "TensorBoardComponent", "superclass": "extends AbstractComponent", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG =\n      LoggerFactory.getLogger(TensorBoardComponent.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG =\n      LoggerFactory.getLogger(TensorBoardComponent.class)", "var_name": "LOG"}, {"original_string": "public static final String TENSORBOARD_QUICKLINK_LABEL = \"Tensorboard\";", "modifier": "public static final", "type": "String", "declarator": "TENSORBOARD_QUICKLINK_LABEL = \"Tensorboard\"", "var_name": "TENSORBOARD_QUICKLINK_LABEL"}, {"original_string": "private static final int DEFAULT_PORT = 6006;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_PORT = 6006", "var_name": "DEFAULT_PORT"}, {"original_string": "private String tensorboardLink;", "modifier": "private", "type": "String", "declarator": "tensorboardLink", "var_name": "tensorboardLink"}], "methods": [{"identifier": "TensorBoardComponent", "parameters": "(FileSystemOperations fsOperations,\n                              RemoteDirectoryManager remoteDirectoryManager,\n                              RunJobParameters parameters,\n                              TensorFlowLaunchCommandFactory launchCommandFactory,\n                              Configuration yarnConfig)", "modifiers": "public", "return": "", "signature": " TensorBoardComponent(FileSystemOperations fsOperations,\n                              RemoteDirectoryManager remoteDirectoryManager,\n                              RunJobParameters parameters,\n                              TensorFlowLaunchCommandFactory launchCommandFactory,\n                              Configuration yarnConfig)", "full_signature": "public  TensorBoardComponent(FileSystemOperations fsOperations,\n                              RemoteDirectoryManager remoteDirectoryManager,\n                              RunJobParameters parameters,\n                              TensorFlowLaunchCommandFactory launchCommandFactory,\n                              Configuration yarnConfig)", "class_method_signature": "TensorBoardComponent.TensorBoardComponent(FileSystemOperations fsOperations,\n                              RemoteDirectoryManager remoteDirectoryManager,\n                              RunJobParameters parameters,\n                              TensorFlowLaunchCommandFactory launchCommandFactory,\n                              Configuration yarnConfig)", "testcase": false, "constructor": true}, {"identifier": "createComponent", "parameters": "()", "modifiers": "@Override public", "return": "Component", "signature": "Component createComponent()", "full_signature": "@Override public Component createComponent()", "class_method_signature": "TensorBoardComponent.createComponent()", "testcase": false, "constructor": false}, {"identifier": "getTensorboardLink", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTensorboardLink()", "full_signature": "public String getTensorboardLink()", "class_method_signature": "TensorBoardComponent.getTensorboardLink()", "testcase": false, "constructor": false}], "file": "submarine-server/server-submitter/submitter-yarnservice/src/main/java/org/apache/submarine/server/submitter/yarnservice/tensorflow/component/TensorBoardComponent.java"}, "focal_method": {"identifier": "createComponent", "parameters": "()", "modifiers": "@Override public", "return": "Component", "body": "@Override\n  public Component createComponent() throws IOException {\n    TensorFlowRunJobParameters tensorFlowParams =\n        (TensorFlowRunJobParameters) this.parameters;\n\n    Objects.requireNonNull(tensorFlowParams.getTensorboardResource(),\n        \"TensorBoard resource must not be null!\");\n\n    Component component = new Component();\n    component.setName(role.getComponentName());\n    component.setNumberOfContainers(1L);\n    component.setRestartPolicy(RestartPolicyEnum.NEVER);\n    component.setResource(SubmarineResourceUtils.convertYarnResourceToServiceResource(\n        tensorFlowParams.getTensorboardResource()));\n\n    if (tensorFlowParams.getTensorboardDockerImage() != null) {\n      component.setArtifact(\n          DockerUtilities.getDockerArtifact(tensorFlowParams.getTensorboardDockerImage()));\n    }\n\n    TensorFlowCommons.addCommonEnvironments(component, role);\n    generateLaunchCommand(component);\n\n    tensorboardLink = \"http://\" + YarnServiceUtils.getDNSName(\n        parameters.getName(),\n        role.getComponentName() + \"-\" + 0, TensorFlowCommons.getUserName(),\n        TensorFlowCommons.getDNSDomain(yarnConfig), DEFAULT_PORT);\n    LOG.info(\"Link to tensorboard:\" + tensorboardLink);\n\n    return component;\n  }", "signature": "Component createComponent()", "full_signature": "@Override public Component createComponent()", "class_method_signature": "TensorBoardComponent.createComponent()", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "getTensorboardResource", "setName", "getComponentName", "setNumberOfContainers", "setRestartPolicy", "setResource", "convertYarnResourceToServiceResource", "getTensorboardResource", "getTensorboardDockerImage", "setArtifact", "getDockerArtifact", "getTensorboardDockerImage", "addCommonEnvironments", "generateLaunchCommand", "getDNSName", "getName", "getComponentName", "getUserName", "getDNSDomain", "info"]}, "repository": {"repo_id": 209459144, "url": "https://github.com/apache/submarine", "stars": 185, "created": "9/19/2019 4:00:17 AM +00:00", "updates": "2020-01-27T15:27:05+00:00", "fork": "False", "license": "licensed"}}