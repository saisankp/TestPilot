{"test_class": {"identifier": "SavepointStoreFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/SavepointStoreFactoryTest.java"}, "test_case": {"identifier": "testSavepointBackendFileSystemButNoDirectory", "parameters": "()", "modifiers": "@Test(expected = IllegalConfigurationException.class) public", "return": "void", "body": "@Test(expected = IllegalConfigurationException.class)\n\tpublic void testSavepointBackendFileSystemButNoDirectory() throws Exception {\n\t\tConfiguration config = new Configuration();\n\t\tconfig.setString(SavepointStoreFactory.SAVEPOINT_BACKEND_KEY, \"filesystem\");\n\t\tSavepointStoreFactory.createFromConfig(config);\n\t\tfail(\"Did not throw expected Exception\");\n\t}", "signature": "void testSavepointBackendFileSystemButNoDirectory()", "full_signature": "@Test(expected = IllegalConfigurationException.class) public void testSavepointBackendFileSystemButNoDirectory()", "class_method_signature": "SavepointStoreFactoryTest.testSavepointBackendFileSystemButNoDirectory()", "testcase": true, "constructor": false, "invocations": ["setString", "createFromConfig", "fail"]}, "focal_class": {"identifier": "SavepointStoreFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String SAVEPOINT_BACKEND_KEY = \"savepoints.state.backend\";", "modifier": "public static final", "type": "String", "declarator": "SAVEPOINT_BACKEND_KEY = \"savepoints.state.backend\"", "var_name": "SAVEPOINT_BACKEND_KEY"}, {"original_string": "public static final String SAVEPOINT_DIRECTORY_KEY = \"savepoints.state.backend.fs.dir\";", "modifier": "public static final", "type": "String", "declarator": "SAVEPOINT_DIRECTORY_KEY = \"savepoints.state.backend.fs.dir\"", "var_name": "SAVEPOINT_DIRECTORY_KEY"}, {"original_string": "public static final String DEFAULT_SAVEPOINT_BACKEND = \"jobmanager\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_SAVEPOINT_BACKEND = \"jobmanager\"", "var_name": "DEFAULT_SAVEPOINT_BACKEND"}, {"original_string": "public static final Logger LOG = LoggerFactory.getLogger(SavepointStoreFactory.class);", "modifier": "public static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SavepointStoreFactory.class)", "var_name": "LOG"}], "methods": [{"identifier": "createFromConfig", "parameters": "(\n\t\t\tConfiguration config)", "modifiers": "public static", "return": "SavepointStore", "signature": "SavepointStore createFromConfig(\n\t\t\tConfiguration config)", "full_signature": "public static SavepointStore createFromConfig(\n\t\t\tConfiguration config)", "class_method_signature": "SavepointStoreFactory.createFromConfig(\n\t\t\tConfiguration config)", "testcase": false, "constructor": false}, {"identifier": "createJobManagerSavepointStore", "parameters": "()", "modifiers": "private static", "return": "SavepointStore", "signature": "SavepointStore createJobManagerSavepointStore()", "full_signature": "private static SavepointStore createJobManagerSavepointStore()", "class_method_signature": "SavepointStoreFactory.createJobManagerSavepointStore()", "testcase": false, "constructor": false}, {"identifier": "createFileSystemSavepointStore", "parameters": "(String rootPath)", "modifiers": "private static", "return": "SavepointStore", "signature": "SavepointStore createFileSystemSavepointStore(String rootPath)", "full_signature": "private static SavepointStore createFileSystemSavepointStore(String rootPath)", "class_method_signature": "SavepointStoreFactory.createFileSystemSavepointStore(String rootPath)", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/SavepointStoreFactory.java"}, "focal_method": {"identifier": "createFromConfig", "parameters": "(\n\t\t\tConfiguration config)", "modifiers": "public static", "return": "SavepointStore", "body": "public static SavepointStore createFromConfig(\n\t\t\tConfiguration config) throws Exception {\n\n\t\t// Try a the savepoint-specific configuration first.\n\t\tString savepointBackend = config.getString(SAVEPOINT_BACKEND_KEY, DEFAULT_SAVEPOINT_BACKEND);\n\n\t\tif (savepointBackend == null) {\n\t\t\tLOG.info(\"No savepoint state backend configured. \" +\n\t\t\t\t\t\"Using job manager savepoint state backend.\");\n\t\t\treturn createJobManagerSavepointStore();\n\t\t} else if (savepointBackend.equals(\"jobmanager\")) {\n\t\t\tLOG.info(\"Using job manager savepoint state backend.\");\n\t\t\treturn createJobManagerSavepointStore();\n\t\t} else if (savepointBackend.equals(\"filesystem\")) {\n\t\t\tString rootPath = config.getString(SAVEPOINT_DIRECTORY_KEY, null);\n\n\t\t\tif (rootPath == null) {\n\t\t\t\tthrow new IllegalConfigurationException(\"Using filesystem as savepoint state backend, \" +\n\t\t\t\t\t\t\"but did not specify directory. Please set the \" +\n\t\t\t\t\t\t\"following configuration key: '\" + SAVEPOINT_DIRECTORY_KEY +\n\t\t\t\t\t\t\"' (e.g. \" + SAVEPOINT_DIRECTORY_KEY + \": hdfs:///flink/savepoints/). \" +\n\t\t\t\t\t\t\"Falling back to job manager savepoint backend.\");\n\t\t\t} else {\n\t\t\t\tLOG.info(\"Using filesystem savepoint backend (root path: {}).\", rootPath);\n\n\t\t\t\treturn createFileSystemSavepointStore(rootPath);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new IllegalConfigurationException(\"Unexpected savepoint backend \" +\n\t\t\t\t\t\"configuration '\" + savepointBackend + \"'. \" +\n\t\t\t\t\t\"Falling back to job manager savepoint state backend.\");\n\t\t}\n\t}", "signature": "SavepointStore createFromConfig(\n\t\t\tConfiguration config)", "full_signature": "public static SavepointStore createFromConfig(\n\t\t\tConfiguration config)", "class_method_signature": "SavepointStoreFactory.createFromConfig(\n\t\t\tConfiguration config)", "testcase": false, "constructor": false, "invocations": ["getString", "info", "createJobManagerSavepointStore", "equals", "info", "createJobManagerSavepointStore", "equals", "getString", "info", "createFileSystemSavepointStore"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}