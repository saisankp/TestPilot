{"test_class": {"identifier": "MinimizedPanelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  private AttachedToolWindow<String> myToolWindow1;", "modifier": "@Mock\n  private", "type": "AttachedToolWindow<String>", "declarator": "myToolWindow1", "var_name": "myToolWindow1"}, {"original_string": "@Mock\n  private AttachedToolWindow<String> myToolWindow2;", "modifier": "@Mock\n  private", "type": "AttachedToolWindow<String>", "declarator": "myToolWindow2", "var_name": "myToolWindow2"}, {"original_string": "@Mock\n  private SideModel<String> myModel;", "modifier": "@Mock\n  private", "type": "SideModel<String>", "declarator": "myModel", "var_name": "myModel"}, {"original_string": "private AbstractButton myButton1;", "modifier": "private", "type": "AbstractButton", "declarator": "myButton1", "var_name": "myButton1"}, {"original_string": "private AbstractButton myButton2;", "modifier": "private", "type": "AbstractButton", "declarator": "myButton2", "var_name": "myButton2"}, {"original_string": "private MinimizedPanel<String> myPanel;", "modifier": "private", "type": "MinimizedPanel<String>", "declarator": "myPanel", "var_name": "myPanel"}], "file": "adt-ui/src/test/java/com/android/tools/adtui/workbench/MinimizedPanelTest.java"}, "test_case": {"identifier": "testDrag", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDrag() {\n    myPanel.setSize(21, 400);\n    myButton1.setPreferredSize(new Dimension(21, 21));\n    myButton2.setPreferredSize(new Dimension(21, 21));\n    when(myToolWindow1.isMinimized()).thenReturn(true);\n    when(myToolWindow2.isMinimized()).thenReturn(true);\n    when(myModel.getTopTools(Side.LEFT)).thenReturn(Collections.singletonList(myToolWindow1));\n    when(myModel.getBottomTools(Side.LEFT)).thenReturn(Collections.singletonList(myToolWindow2));\n    myPanel.modelChanged(myModel, SideModel.EventType.LOCAL_UPDATE);\n    myPanel.doLayout();\n\n    myPanel.drag(myToolWindow1, -99999999);\n    assertThat(findVisibleComponents(Split.TOP)).containsExactly(myButton1);\n    myPanel.doLayout();\n\n    myPanel.drag(myToolWindow1, 26);\n    assertThat(findVisibleComponents(Split.TOP)).containsExactly(myButton1);\n\n    myPanel.drag(myToolWindow1, 125);\n    assertThat(findVisibleComponents(Split.TOP)).containsExactly(myButton1);\n\n    myPanel.drag(myToolWindow1, 135);\n    assertThat(findVisibleComponents(Split.TOP)).isEmpty();\n    assertThat(findVisibleComponents(Split.BOTTOM)).containsExactly(myButton1, myButton2).inOrder();\n\n    myPanel.drag(myToolWindow1, 255);\n    assertThat(findVisibleComponents(Split.TOP)).isEmpty();\n    assertThat(findVisibleComponents(Split.BOTTOM)).containsExactly(myButton1, myButton2).inOrder();\n\n    myPanel.drag(myToolWindow1, 265);\n    assertThat(findVisibleComponents(Split.TOP)).isEmpty();\n    assertThat(findVisibleComponents(Split.BOTTOM)).containsExactly(myButton2, myButton1).inOrder();\n\n    myPanel.drag(myToolWindow1, 99999999);\n    assertThat(findVisibleComponents(Split.TOP)).isEmpty();\n    assertThat(findVisibleComponents(Split.BOTTOM)).containsExactly(myButton2, myButton1).inOrder();\n  }", "signature": "void testDrag()", "full_signature": "@Test public void testDrag()", "class_method_signature": "MinimizedPanelTest.testDrag()", "testcase": true, "constructor": false, "invocations": ["setSize", "setPreferredSize", "setPreferredSize", "thenReturn", "when", "isMinimized", "thenReturn", "when", "isMinimized", "thenReturn", "when", "getTopTools", "singletonList", "thenReturn", "when", "getBottomTools", "singletonList", "modelChanged", "doLayout", "drag", "containsExactly", "assertThat", "findVisibleComponents", "doLayout", "drag", "containsExactly", "assertThat", "findVisibleComponents", "drag", "containsExactly", "assertThat", "findVisibleComponents", "drag", "isEmpty", "assertThat", "findVisibleComponents", "inOrder", "containsExactly", "assertThat", "findVisibleComponents", "drag", "isEmpty", "assertThat", "findVisibleComponents", "inOrder", "containsExactly", "assertThat", "findVisibleComponents", "drag", "isEmpty", "assertThat", "findVisibleComponents", "inOrder", "containsExactly", "assertThat", "findVisibleComponents", "drag", "isEmpty", "assertThat", "findVisibleComponents", "inOrder", "containsExactly", "assertThat", "findVisibleComponents"]}, "focal_class": {"identifier": "MinimizedPanel", "superclass": "extends JPanel", "interfaces": "implements SideModel.Listener<T>", "fields": [{"original_string": "private final SideModel<T> myModel;", "modifier": "private final", "type": "SideModel<T>", "declarator": "myModel", "var_name": "myModel"}, {"original_string": "private final Side mySide;", "modifier": "private final", "type": "Side", "declarator": "mySide", "var_name": "mySide"}, {"original_string": "private final Component myFiller;", "modifier": "private final", "type": "Component", "declarator": "myFiller", "var_name": "myFiller"}, {"original_string": "private boolean myHasVisibleButtons;", "modifier": "private", "type": "boolean", "declarator": "myHasVisibleButtons", "var_name": "myHasVisibleButtons"}], "methods": [{"identifier": "MinimizedPanel", "parameters": "(@NotNull Side side, @NotNull SideModel<T> model)", "modifiers": "", "return": "", "signature": " MinimizedPanel(@NotNull Side side, @NotNull SideModel<T> model)", "full_signature": "  MinimizedPanel(@NotNull Side side, @NotNull SideModel<T> model)", "class_method_signature": "MinimizedPanel.MinimizedPanel(@NotNull Side side, @NotNull SideModel<T> model)", "testcase": false, "constructor": true}, {"identifier": "modelChanged", "parameters": "(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused)", "modifiers": "@Override public", "return": "void", "signature": "void modelChanged(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused)", "full_signature": "@Override public void modelChanged(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused)", "class_method_signature": "MinimizedPanel.modelChanged(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused)", "testcase": false, "constructor": false}, {"identifier": "addButton", "parameters": "(@NotNull AttachedToolWindow tool)", "modifiers": "private", "return": "void", "signature": "void addButton(@NotNull AttachedToolWindow tool)", "full_signature": "private void addButton(@NotNull AttachedToolWindow tool)", "class_method_signature": "MinimizedPanel.addButton(@NotNull AttachedToolWindow tool)", "testcase": false, "constructor": false}, {"identifier": "drag", "parameters": "(@NotNull AttachedToolWindow<T> tool, int position)", "modifiers": "public", "return": "int", "signature": "int drag(@NotNull AttachedToolWindow<T> tool, int position)", "full_signature": "public int drag(@NotNull AttachedToolWindow<T> tool, int position)", "class_method_signature": "MinimizedPanel.drag(@NotNull AttachedToolWindow<T> tool, int position)", "testcase": false, "constructor": false}, {"identifier": "dragExit", "parameters": "(@NotNull AttachedToolWindow<T> tool)", "modifiers": "public", "return": "void", "signature": "void dragExit(@NotNull AttachedToolWindow<T> tool)", "full_signature": "public void dragExit(@NotNull AttachedToolWindow<T> tool)", "class_method_signature": "MinimizedPanel.dragExit(@NotNull AttachedToolWindow<T> tool)", "testcase": false, "constructor": false}, {"identifier": "dragDrop", "parameters": "(@NotNull AttachedToolWindow<T> tool, int position)", "modifiers": "public", "return": "void", "signature": "void dragDrop(@NotNull AttachedToolWindow<T> tool, int position)", "full_signature": "public void dragDrop(@NotNull AttachedToolWindow<T> tool, int position)", "class_method_signature": "MinimizedPanel.dragDrop(@NotNull AttachedToolWindow<T> tool, int position)", "testcase": false, "constructor": false}, {"identifier": "enableMinimizeButtonDragAndDrop", "parameters": "(boolean enable)", "modifiers": "private", "return": "void", "signature": "void enableMinimizeButtonDragAndDrop(boolean enable)", "full_signature": "private void enableMinimizeButtonDragAndDrop(boolean enable)", "class_method_signature": "MinimizedPanel.enableMinimizeButtonDragAndDrop(boolean enable)", "testcase": false, "constructor": false}, {"identifier": "findInsertIndex", "parameters": "(int position, @NotNull Component draggedButton)", "modifiers": "private", "return": "int", "signature": "int findInsertIndex(int position, @NotNull Component draggedButton)", "full_signature": "private int findInsertIndex(int position, @NotNull Component draggedButton)", "class_method_signature": "MinimizedPanel.findInsertIndex(int position, @NotNull Component draggedButton)", "testcase": false, "constructor": false}, {"identifier": "getComponentIndex", "parameters": "(@NotNull Component component)", "modifiers": "private", "return": "int", "signature": "int getComponentIndex(@NotNull Component component)", "full_signature": "private int getComponentIndex(@NotNull Component component)", "class_method_signature": "MinimizedPanel.getComponentIndex(@NotNull Component component)", "testcase": false, "constructor": false}], "file": "adt-ui/src/main/java/com/android/tools/adtui/workbench/MinimizedPanel.java"}, "focal_method": {"identifier": "drag", "parameters": "(@NotNull AttachedToolWindow<T> tool, int position)", "modifiers": "public", "return": "int", "body": "public int drag(@NotNull AttachedToolWindow<T> tool, int position) {\n    AbstractButton button = tool.getMinimizedButton();\n    if (!isOpaque()) {\n      enableMinimizeButtonDragAndDrop(true);\n      button.setVisible(true);\n    }\n    int insertIndex = findInsertIndex(position, button);\n    int index = getComponentIndex(button);\n    if (index == insertIndex) {\n      return insertIndex;\n    }\n    if (index >= 0) {\n      remove(index);\n    }\n    add(button, insertIndex);\n    revalidate();\n    repaint();\n    return insertIndex;\n  }", "signature": "int drag(@NotNull AttachedToolWindow<T> tool, int position)", "full_signature": "public int drag(@NotNull AttachedToolWindow<T> tool, int position)", "class_method_signature": "MinimizedPanel.drag(@NotNull AttachedToolWindow<T> tool, int position)", "testcase": false, "constructor": false, "invocations": ["getMinimizedButton", "isOpaque", "enableMinimizeButtonDragAndDrop", "setVisible", "findInsertIndex", "getComponentIndex", "remove", "add", "revalidate", "repaint"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}