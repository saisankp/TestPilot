{"test_class": {"identifier": "SimpleOntologyTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private ValueFactory vf = SimpleValueFactory.getInstance();", "modifier": "private", "type": "ValueFactory", "declarator": "vf = SimpleValueFactory.getInstance()", "var_name": "vf"}, {"original_string": "private InputStream restrictionInputStream;", "modifier": "private", "type": "InputStream", "declarator": "restrictionInputStream", "var_name": "restrictionInputStream"}, {"original_string": "private InputStream hasDoctypeInputStream;", "modifier": "private", "type": "InputStream", "declarator": "hasDoctypeInputStream", "var_name": "hasDoctypeInputStream"}, {"original_string": "private File testFile;", "modifier": "private", "type": "File", "declarator": "testFile", "var_name": "testFile"}, {"original_string": "private IRI ontologyIRI;", "modifier": "private", "type": "IRI", "declarator": "ontologyIRI", "var_name": "ontologyIRI"}, {"original_string": "@Mock\n    private OntologyId ontologyIdMock;", "modifier": "@Mock\n    private", "type": "OntologyId", "declarator": "ontologyIdMock", "var_name": "ontologyIdMock"}, {"original_string": "@Mock\n    private OntologyManager ontologyManager;", "modifier": "@Mock\n    private", "type": "OntologyManager", "declarator": "ontologyManager", "var_name": "ontologyManager"}, {"original_string": "@Mock\n    private SesameTransformer transformer;", "modifier": "@Mock\n    private", "type": "SesameTransformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "@Mock\n    private BNodeService bNodeService;", "modifier": "@Mock\n    private", "type": "BNodeService", "declarator": "bNodeService", "var_name": "bNodeService"}, {"original_string": "@Mock\n    private RepositoryManager repositoryManager;", "modifier": "@Mock\n    private", "type": "RepositoryManager", "declarator": "repositoryManager", "var_name": "repositoryManager"}, {"original_string": "@Mock\n    private IRI versionIRI;", "modifier": "@Mock\n    private", "type": "IRI", "declarator": "versionIRI", "var_name": "versionIRI"}, {"original_string": "@Mock\n    private ForkJoinPool threadPool;", "modifier": "@Mock\n    private", "type": "ForkJoinPool", "declarator": "threadPool", "var_name": "threadPool"}], "file": "com.mobi.ontology.impl.owlapi/src/test/java/com/mobi/ontology/impl/owlapi/SimpleOntologyTest.java"}, "test_case": {"identifier": "annotationsAreCorrectForNonemptyOntology", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void annotationsAreCorrectForNonemptyOntology() throws Exception {\n        // Behaviors\n        when(SimpleOntologyValues.mobiAnnotation(any(OWLAnnotation.class))).thenReturn(mock(Annotation.class));\n\n        // Setup\n        InputStream stream = new FileInputStream(testFile);\n        Ontology ontology = new SimpleOntology(stream, ontologyManager, transformer, bNodeService, repositoryManager, true, threadPool);\n\n        // Test\n        Set<Annotation> annotations = ontology.getOntologyAnnotations();\n\n        // Assertions\n        assertEquals(1, annotations.size());\n    }", "signature": "void annotationsAreCorrectForNonemptyOntology()", "full_signature": "@Test public void annotationsAreCorrectForNonemptyOntology()", "class_method_signature": "SimpleOntologyTest.annotationsAreCorrectForNonemptyOntology()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "mobiAnnotation", "any", "mock", "getOntologyAnnotations", "assertEquals", "size"]}, "focal_class": {"identifier": "SimpleOntology", "superclass": "", "interfaces": "implements Ontology", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SimpleOntology.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SimpleOntology.class)", "var_name": "LOG"}, {"original_string": "private OntologyId ontologyId;", "modifier": "private", "type": "OntologyId", "declarator": "ontologyId", "var_name": "ontologyId"}, {"original_string": "private OntologyManager ontologyManager;", "modifier": "private", "type": "OntologyManager", "declarator": "ontologyManager", "var_name": "ontologyManager"}, {"original_string": "private SesameTransformer transformer;", "modifier": "private", "type": "SesameTransformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "private BNodeService bNodeService;", "modifier": "private", "type": "BNodeService", "declarator": "bNodeService", "var_name": "bNodeService"}, {"original_string": "private RepositoryManager repoManager;", "modifier": "private", "type": "RepositoryManager", "declarator": "repoManager", "var_name": "repoManager"}, {"original_string": "private Set<Annotation> ontoAnnotations;", "modifier": "private", "type": "Set<Annotation>", "declarator": "ontoAnnotations", "var_name": "ontoAnnotations"}, {"original_string": "private Set<Annotation> annotations;", "modifier": "private", "type": "Set<Annotation>", "declarator": "annotations", "var_name": "annotations"}, {"original_string": "private Set<AnnotationProperty> annotationProperties;", "modifier": "private", "type": "Set<AnnotationProperty>", "declarator": "annotationProperties", "var_name": "annotationProperties"}, {"original_string": "private Set<IRI> missingImports = new HashSet<>();", "modifier": "private", "type": "Set<IRI>", "declarator": "missingImports = new HashSet<>()", "var_name": "missingImports"}, {"original_string": "private org.eclipse.rdf4j.model.Model sesameModel;", "modifier": "private", "type": "org.eclipse.rdf4j.model.Model", "declarator": "sesameModel", "var_name": "sesameModel"}, {"original_string": "private ForkJoinPool threadPool;", "modifier": "private", "type": "ForkJoinPool", "declarator": "threadPool", "var_name": "threadPool"}, {"original_string": "private OWLOntology owlOntology;", "modifier": "private", "type": "OWLOntology", "declarator": "owlOntology", "var_name": "owlOntology"}, {"original_string": "private OWLReasoner owlReasoner;", "modifier": "private", "type": "OWLReasoner", "declarator": "owlReasoner", "var_name": "owlReasoner"}, {"original_string": "private OWLReasonerFactory owlReasonerFactory = new StructuralReasonerFactory();", "modifier": "private", "type": "OWLReasonerFactory", "declarator": "owlReasonerFactory = new StructuralReasonerFactory()", "var_name": "owlReasonerFactory"}, {"original_string": "private final OWLOntologyLoaderConfiguration config = new OWLOntologyLoaderConfiguration()\n            .setMissingImportHandlingStrategy(MissingImportHandlingStrategy.SILENT)\n            .setMissingOntologyHeaderStrategy(MissingOntologyHeaderStrategy.IMPORT_GRAPH)\n            .setTreatDublinCoreAsBuiltIn(true);", "modifier": "private final", "type": "OWLOntologyLoaderConfiguration", "declarator": "config = new OWLOntologyLoaderConfiguration()\n            .setMissingImportHandlingStrategy(MissingImportHandlingStrategy.SILENT)\n            .setMissingOntologyHeaderStrategy(MissingOntologyHeaderStrategy.IMPORT_GRAPH)\n            .setTreatDublinCoreAsBuiltIn(true)", "var_name": "config"}, {"original_string": "private OWLOntologyManager owlManager;", "modifier": "private", "type": "OWLOntologyManager", "declarator": "owlManager", "var_name": "owlManager"}, {"original_string": "private static String CONCEPT = SKOS.CONCEPT.stringValue();", "modifier": "private static", "type": "String", "declarator": "CONCEPT = SKOS.CONCEPT.stringValue()", "var_name": "CONCEPT"}, {"original_string": "private static String CONCEPT_SCHEME = SKOS.CONCEPT_SCHEME.stringValue();", "modifier": "private static", "type": "String", "declarator": "CONCEPT_SCHEME = SKOS.CONCEPT_SCHEME.stringValue()", "var_name": "CONCEPT_SCHEME"}, {"original_string": "private static final String SELECT_ENTITY_USAGES;", "modifier": "private static final", "type": "String", "declarator": "SELECT_ENTITY_USAGES", "var_name": "SELECT_ENTITY_USAGES"}, {"original_string": "private static final String CONSTRUCT_ENTITY_USAGES;", "modifier": "private static final", "type": "String", "declarator": "CONSTRUCT_ENTITY_USAGES", "var_name": "CONSTRUCT_ENTITY_USAGES"}, {"original_string": "private static final String GET_SEARCH_RESULTS;", "modifier": "private static final", "type": "String", "declarator": "GET_SEARCH_RESULTS", "var_name": "GET_SEARCH_RESULTS"}, {"original_string": "private static final String ENTITY_BINDING = \"entity\";", "modifier": "private static final", "type": "String", "declarator": "ENTITY_BINDING = \"entity\"", "var_name": "ENTITY_BINDING"}, {"original_string": "private static final String SEARCH_TEXT = \"searchText\";", "modifier": "private static final", "type": "String", "declarator": "SEARCH_TEXT = \"searchText\"", "var_name": "SEARCH_TEXT"}], "methods": [{"identifier": "SimpleOntology", "parameters": "(InputStream inputStream, OntologyManager ontologyManager, SesameTransformer transformer,\n                          BNodeService bNodeService, RepositoryManager repoManager, boolean resolveImports,\n                          ForkJoinPool threadPool)", "modifiers": "public", "return": "", "signature": " SimpleOntology(InputStream inputStream, OntologyManager ontologyManager, SesameTransformer transformer,\n                          BNodeService bNodeService, RepositoryManager repoManager, boolean resolveImports,\n                          ForkJoinPool threadPool)", "full_signature": "public  SimpleOntology(InputStream inputStream, OntologyManager ontologyManager, SesameTransformer transformer,\n                          BNodeService bNodeService, RepositoryManager repoManager, boolean resolveImports,\n                          ForkJoinPool threadPool)", "class_method_signature": "SimpleOntology.SimpleOntology(InputStream inputStream, OntologyManager ontologyManager, SesameTransformer transformer,\n                          BNodeService bNodeService, RepositoryManager repoManager, boolean resolveImports,\n                          ForkJoinPool threadPool)", "testcase": false, "constructor": true}, {"identifier": "SimpleOntology", "parameters": "(Model model, OntologyManager ontologyManager, SesameTransformer transformer,\n                          BNodeService bNodeService, RepositoryManager repoManager, ForkJoinPool threadPool)", "modifiers": "public", "return": "", "signature": " SimpleOntology(Model model, OntologyManager ontologyManager, SesameTransformer transformer,\n                          BNodeService bNodeService, RepositoryManager repoManager, ForkJoinPool threadPool)", "full_signature": "public  SimpleOntology(Model model, OntologyManager ontologyManager, SesameTransformer transformer,\n                          BNodeService bNodeService, RepositoryManager repoManager, ForkJoinPool threadPool)", "class_method_signature": "SimpleOntology.SimpleOntology(Model model, OntologyManager ontologyManager, SesameTransformer transformer,\n                          BNodeService bNodeService, RepositoryManager repoManager, ForkJoinPool threadPool)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "(OntologyManager ontologyManager, SesameTransformer transformer, BNodeService bNodeService,\n                            RepositoryManager repoManager, boolean resolveImports, ForkJoinPool threadPool)", "modifiers": "private", "return": "void", "signature": "void initialize(OntologyManager ontologyManager, SesameTransformer transformer, BNodeService bNodeService,\n                            RepositoryManager repoManager, boolean resolveImports, ForkJoinPool threadPool)", "full_signature": "private void initialize(OntologyManager ontologyManager, SesameTransformer transformer, BNodeService bNodeService,\n                            RepositoryManager repoManager, boolean resolveImports, ForkJoinPool threadPool)", "class_method_signature": "SimpleOntology.initialize(OntologyManager ontologyManager, SesameTransformer transformer, BNodeService bNodeService,\n                            RepositoryManager repoManager, boolean resolveImports, ForkJoinPool threadPool)", "testcase": false, "constructor": false}, {"identifier": "SimpleOntology", "parameters": "(OWLOntology ontology, OWLOntologyManager owlManager, Resource resource,\n                             OntologyManager ontologyManager, SesameTransformer transformer,\n                             BNodeService bNodeService, RepositoryManager repoManager, ForkJoinPool threadPool)", "modifiers": "protected", "return": "", "signature": " SimpleOntology(OWLOntology ontology, OWLOntologyManager owlManager, Resource resource,\n                             OntologyManager ontologyManager, SesameTransformer transformer,\n                             BNodeService bNodeService, RepositoryManager repoManager, ForkJoinPool threadPool)", "full_signature": "protected  SimpleOntology(OWLOntology ontology, OWLOntologyManager owlManager, Resource resource,\n                             OntologyManager ontologyManager, SesameTransformer transformer,\n                             BNodeService bNodeService, RepositoryManager repoManager, ForkJoinPool threadPool)", "class_method_signature": "SimpleOntology.SimpleOntology(OWLOntology ontology, OWLOntologyManager owlManager, Resource resource,\n                             OntologyManager ontologyManager, SesameTransformer transformer,\n                             BNodeService bNodeService, RepositoryManager repoManager, ForkJoinPool threadPool)", "testcase": false, "constructor": true}, {"identifier": "createOntologyId", "parameters": "(Resource resource)", "modifiers": "private", "return": "void", "signature": "void createOntologyId(Resource resource)", "full_signature": "private void createOntologyId(Resource resource)", "class_method_signature": "SimpleOntology.createOntologyId(Resource resource)", "testcase": false, "constructor": false}, {"identifier": "createOntologyFromSesameModel", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createOntologyFromSesameModel()", "full_signature": "private void createOntologyFromSesameModel()", "class_method_signature": "SimpleOntology.createOntologyFromSesameModel()", "testcase": false, "constructor": false}, {"identifier": "getOntologyId", "parameters": "()", "modifiers": "@Override public", "return": "OntologyId", "signature": "OntologyId getOntologyId()", "full_signature": "@Override public OntologyId getOntologyId()", "class_method_signature": "SimpleOntology.getOntologyId()", "testcase": false, "constructor": false}, {"identifier": "getUnloadableImportIRIs", "parameters": "()", "modifiers": "@Override public", "return": "Set<IRI>", "signature": "Set<IRI> getUnloadableImportIRIs()", "full_signature": "@Override public Set<IRI> getUnloadableImportIRIs()", "class_method_signature": "SimpleOntology.getUnloadableImportIRIs()", "testcase": false, "constructor": false}, {"identifier": "getImportsClosure", "parameters": "()", "modifiers": "@Override public", "return": "Set<Ontology>", "signature": "Set<Ontology> getImportsClosure()", "full_signature": "@Override public Set<Ontology> getImportsClosure()", "class_method_signature": "SimpleOntology.getImportsClosure()", "testcase": false, "constructor": false}, {"identifier": "getImportedOntologyIRIs", "parameters": "()", "modifiers": "@Override public", "return": "Set<IRI>", "signature": "Set<IRI> getImportedOntologyIRIs()", "full_signature": "@Override public Set<IRI> getImportedOntologyIRIs()", "class_method_signature": "SimpleOntology.getImportedOntologyIRIs()", "testcase": false, "constructor": false}, {"identifier": "getOntologyAnnotations", "parameters": "()", "modifiers": "@Override public", "return": "Set<Annotation>", "signature": "Set<Annotation> getOntologyAnnotations()", "full_signature": "@Override public Set<Annotation> getOntologyAnnotations()", "class_method_signature": "SimpleOntology.getOntologyAnnotations()", "testcase": false, "constructor": false}, {"identifier": "getAllAnnotations", "parameters": "()", "modifiers": "@Override public", "return": "Set<Annotation>", "signature": "Set<Annotation> getAllAnnotations()", "full_signature": "@Override public Set<Annotation> getAllAnnotations()", "class_method_signature": "SimpleOntology.getAllAnnotations()", "testcase": false, "constructor": false}, {"identifier": "getAllAnnotationProperties", "parameters": "()", "modifiers": "@Override public", "return": "Set<AnnotationProperty>", "signature": "Set<AnnotationProperty> getAllAnnotationProperties()", "full_signature": "@Override public Set<AnnotationProperty> getAllAnnotationProperties()", "class_method_signature": "SimpleOntology.getAllAnnotationProperties()", "testcase": false, "constructor": false}, {"identifier": "getAllClasses", "parameters": "()", "modifiers": "@Override public", "return": "Set<OClass>", "signature": "Set<OClass> getAllClasses()", "full_signature": "@Override public Set<OClass> getAllClasses()", "class_method_signature": "SimpleOntology.getAllClasses()", "testcase": false, "constructor": false}, {"identifier": "containsClass", "parameters": "(IRI iri)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsClass(IRI iri)", "full_signature": "@Override public boolean containsClass(IRI iri)", "class_method_signature": "SimpleOntology.containsClass(IRI iri)", "testcase": false, "constructor": false}, {"identifier": "getAllClassObjectProperties", "parameters": "(IRI iri)", "modifiers": "@Override public", "return": "Set<ObjectProperty>", "signature": "Set<ObjectProperty> getAllClassObjectProperties(IRI iri)", "full_signature": "@Override public Set<ObjectProperty> getAllClassObjectProperties(IRI iri)", "class_method_signature": "SimpleOntology.getAllClassObjectProperties(IRI iri)", "testcase": false, "constructor": false}, {"identifier": "getAllNoDomainObjectProperties", "parameters": "()", "modifiers": "@Override public", "return": "Set<ObjectProperty>", "signature": "Set<ObjectProperty> getAllNoDomainObjectProperties()", "full_signature": "@Override public Set<ObjectProperty> getAllNoDomainObjectProperties()", "class_method_signature": "SimpleOntology.getAllNoDomainObjectProperties()", "testcase": false, "constructor": false}, {"identifier": "getAllClassDataProperties", "parameters": "(IRI iri)", "modifiers": "@Override public", "return": "Set<DataProperty>", "signature": "Set<DataProperty> getAllClassDataProperties(IRI iri)", "full_signature": "@Override public Set<DataProperty> getAllClassDataProperties(IRI iri)", "class_method_signature": "SimpleOntology.getAllClassDataProperties(IRI iri)", "testcase": false, "constructor": false}, {"identifier": "getAllNoDomainDataProperties", "parameters": "()", "modifiers": "@Override public", "return": "Set<DataProperty>", "signature": "Set<DataProperty> getAllNoDomainDataProperties()", "full_signature": "@Override public Set<DataProperty> getAllNoDomainDataProperties()", "class_method_signature": "SimpleOntology.getAllNoDomainDataProperties()", "testcase": false, "constructor": false}, {"identifier": "getAllDatatypes", "parameters": "()", "modifiers": "@Override public", "return": "Set<Datatype>", "signature": "Set<Datatype> getAllDatatypes()", "full_signature": "@Override public Set<Datatype> getAllDatatypes()", "class_method_signature": "SimpleOntology.getAllDatatypes()", "testcase": false, "constructor": false}, {"identifier": "getAllObjectProperties", "parameters": "()", "modifiers": "@Override public", "return": "Set<ObjectProperty>", "signature": "Set<ObjectProperty> getAllObjectProperties()", "full_signature": "@Override public Set<ObjectProperty> getAllObjectProperties()", "class_method_signature": "SimpleOntology.getAllObjectProperties()", "testcase": false, "constructor": false}, {"identifier": "getObjectProperty", "parameters": "(IRI iri)", "modifiers": "@Override public", "return": "Optional<ObjectProperty>", "signature": "Optional<ObjectProperty> getObjectProperty(IRI iri)", "full_signature": "@Override public Optional<ObjectProperty> getObjectProperty(IRI iri)", "class_method_signature": "SimpleOntology.getObjectProperty(IRI iri)", "testcase": false, "constructor": false}, {"identifier": "getObjectPropertyRange", "parameters": "(ObjectProperty objectProperty)", "modifiers": "@Override public", "return": "Set<Resource>", "signature": "Set<Resource> getObjectPropertyRange(ObjectProperty objectProperty)", "full_signature": "@Override public Set<Resource> getObjectPropertyRange(ObjectProperty objectProperty)", "class_method_signature": "SimpleOntology.getObjectPropertyRange(ObjectProperty objectProperty)", "testcase": false, "constructor": false}, {"identifier": "getAllDataProperties", "parameters": "()", "modifiers": "@Override public", "return": "Set<DataProperty>", "signature": "Set<DataProperty> getAllDataProperties()", "full_signature": "@Override public Set<DataProperty> getAllDataProperties()", "class_method_signature": "SimpleOntology.getAllDataProperties()", "testcase": false, "constructor": false}, {"identifier": "getDataProperty", "parameters": "(IRI iri)", "modifiers": "@Override public", "return": "Optional<DataProperty>", "signature": "Optional<DataProperty> getDataProperty(IRI iri)", "full_signature": "@Override public Optional<DataProperty> getDataProperty(IRI iri)", "class_method_signature": "SimpleOntology.getDataProperty(IRI iri)", "testcase": false, "constructor": false}, {"identifier": "getDataPropertyRange", "parameters": "(DataProperty dataProperty)", "modifiers": "@Override public", "return": "Set<Resource>", "signature": "Set<Resource> getDataPropertyRange(DataProperty dataProperty)", "full_signature": "@Override public Set<Resource> getDataPropertyRange(DataProperty dataProperty)", "class_method_signature": "SimpleOntology.getDataPropertyRange(DataProperty dataProperty)", "testcase": false, "constructor": false}, {"identifier": "getAllIndividuals", "parameters": "()", "modifiers": "@Override public", "return": "Set<Individual>", "signature": "Set<Individual> getAllIndividuals()", "full_signature": "@Override public Set<Individual> getAllIndividuals()", "class_method_signature": "SimpleOntology.getAllIndividuals()", "testcase": false, "constructor": false}, {"identifier": "getIndividualsOfType", "parameters": "(IRI classIRI)", "modifiers": "@Override public", "return": "Set<Individual>", "signature": "Set<Individual> getIndividualsOfType(IRI classIRI)", "full_signature": "@Override public Set<Individual> getIndividualsOfType(IRI classIRI)", "class_method_signature": "SimpleOntology.getIndividualsOfType(IRI classIRI)", "testcase": false, "constructor": false}, {"identifier": "getIndividualsOfType", "parameters": "(OClass clazz)", "modifiers": "@Override public", "return": "Set<Individual>", "signature": "Set<Individual> getIndividualsOfType(OClass clazz)", "full_signature": "@Override public Set<Individual> getIndividualsOfType(OClass clazz)", "class_method_signature": "SimpleOntology.getIndividualsOfType(OClass clazz)", "testcase": false, "constructor": false}, {"identifier": "getSubClassesOf", "parameters": "(ValueFactory vf, ModelFactory mf)", "modifiers": "@Override public", "return": "Hierarchy", "signature": "Hierarchy getSubClassesOf(ValueFactory vf, ModelFactory mf)", "full_signature": "@Override public Hierarchy getSubClassesOf(ValueFactory vf, ModelFactory mf)", "class_method_signature": "SimpleOntology.getSubClassesOf(ValueFactory vf, ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "getSubClassesFor", "parameters": "(IRI iri)", "modifiers": "@Override public", "return": "Set<IRI>", "signature": "Set<IRI> getSubClassesFor(IRI iri)", "full_signature": "@Override public Set<IRI> getSubClassesFor(IRI iri)", "class_method_signature": "SimpleOntology.getSubClassesFor(IRI iri)", "testcase": false, "constructor": false}, {"identifier": "getSubClassesFor", "parameters": "(OWLClass owlClass, boolean direct)", "modifiers": "private", "return": "Stream<IRI>", "signature": "Stream<IRI> getSubClassesFor(OWLClass owlClass, boolean direct)", "full_signature": "private Stream<IRI> getSubClassesFor(OWLClass owlClass, boolean direct)", "class_method_signature": "SimpleOntology.getSubClassesFor(OWLClass owlClass, boolean direct)", "testcase": false, "constructor": false}, {"identifier": "getSubClassesFor", "parameters": "(Set<OWLSubClassOfAxiom> axioms, OWLClass owlClass, boolean direct)", "modifiers": "private", "return": "Stream<IRI>", "signature": "Stream<IRI> getSubClassesFor(Set<OWLSubClassOfAxiom> axioms, OWLClass owlClass, boolean direct)", "full_signature": "private Stream<IRI> getSubClassesFor(Set<OWLSubClassOfAxiom> axioms, OWLClass owlClass, boolean direct)", "class_method_signature": "SimpleOntology.getSubClassesFor(Set<OWLSubClassOfAxiom> axioms, OWLClass owlClass, boolean direct)", "testcase": false, "constructor": false}, {"identifier": "getDeclaredClasses", "parameters": "(Imports imports)", "modifiers": "private", "return": "Stream<OWLClass>", "signature": "Stream<OWLClass> getDeclaredClasses(Imports imports)", "full_signature": "private Stream<OWLClass> getDeclaredClasses(Imports imports)", "class_method_signature": "SimpleOntology.getDeclaredClasses(Imports imports)", "testcase": false, "constructor": false}, {"identifier": "getSubPropertiesFor", "parameters": "(IRI iri)", "modifiers": "@Override public", "return": "Set<IRI>", "signature": "Set<IRI> getSubPropertiesFor(IRI iri)", "full_signature": "@Override public Set<IRI> getSubPropertiesFor(IRI iri)", "class_method_signature": "SimpleOntology.getSubPropertiesFor(IRI iri)", "testcase": false, "constructor": false}, {"identifier": "getSubDatatypePropertiesOf", "parameters": "(ValueFactory vf, ModelFactory mf)", "modifiers": "@Override public", "return": "Hierarchy", "signature": "Hierarchy getSubDatatypePropertiesOf(ValueFactory vf, ModelFactory mf)", "full_signature": "@Override public Hierarchy getSubDatatypePropertiesOf(ValueFactory vf, ModelFactory mf)", "class_method_signature": "SimpleOntology.getSubDatatypePropertiesOf(ValueFactory vf, ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "getSubDatatypePropertiesFor", "parameters": "(OWLDataProperty property, boolean direct)", "modifiers": "private", "return": "Stream<IRI>", "signature": "Stream<IRI> getSubDatatypePropertiesFor(OWLDataProperty property, boolean direct)", "full_signature": "private Stream<IRI> getSubDatatypePropertiesFor(OWLDataProperty property, boolean direct)", "class_method_signature": "SimpleOntology.getSubDatatypePropertiesFor(OWLDataProperty property, boolean direct)", "testcase": false, "constructor": false}, {"identifier": "getDeclaredDatatypeProperties", "parameters": "(Imports imports)", "modifiers": "private", "return": "Stream<OWLDataProperty>", "signature": "Stream<OWLDataProperty> getDeclaredDatatypeProperties(Imports imports)", "full_signature": "private Stream<OWLDataProperty> getDeclaredDatatypeProperties(Imports imports)", "class_method_signature": "SimpleOntology.getDeclaredDatatypeProperties(Imports imports)", "testcase": false, "constructor": false}, {"identifier": "getSubAnnotationPropertiesOf", "parameters": "(ValueFactory vf, ModelFactory mf)", "modifiers": "@Override public", "return": "Hierarchy", "signature": "Hierarchy getSubAnnotationPropertiesOf(ValueFactory vf, ModelFactory mf)", "full_signature": "@Override public Hierarchy getSubAnnotationPropertiesOf(ValueFactory vf, ModelFactory mf)", "class_method_signature": "SimpleOntology.getSubAnnotationPropertiesOf(ValueFactory vf, ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "getDeclaredAnnotationProperties", "parameters": "(Imports imports)", "modifiers": "private", "return": "Stream<OWLAnnotationProperty>", "signature": "Stream<OWLAnnotationProperty> getDeclaredAnnotationProperties(Imports imports)", "full_signature": "private Stream<OWLAnnotationProperty> getDeclaredAnnotationProperties(Imports imports)", "class_method_signature": "SimpleOntology.getDeclaredAnnotationProperties(Imports imports)", "testcase": false, "constructor": false}, {"identifier": "getSubAnnotationPropertiesFor", "parameters": "(OWLAnnotationProperty property, boolean direct)", "modifiers": "private", "return": "Stream<IRI>", "signature": "Stream<IRI> getSubAnnotationPropertiesFor(OWLAnnotationProperty property, boolean direct)", "full_signature": "private Stream<IRI> getSubAnnotationPropertiesFor(OWLAnnotationProperty property, boolean direct)", "class_method_signature": "SimpleOntology.getSubAnnotationPropertiesFor(OWLAnnotationProperty property, boolean direct)", "testcase": false, "constructor": false}, {"identifier": "getSubObjectPropertiesOf", "parameters": "(ValueFactory vf, ModelFactory mf)", "modifiers": "@Override public", "return": "Hierarchy", "signature": "Hierarchy getSubObjectPropertiesOf(ValueFactory vf, ModelFactory mf)", "full_signature": "@Override public Hierarchy getSubObjectPropertiesOf(ValueFactory vf, ModelFactory mf)", "class_method_signature": "SimpleOntology.getSubObjectPropertiesOf(ValueFactory vf, ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "getSubObjectPropertiesFor", "parameters": "(OWLObjectProperty property, boolean direct)", "modifiers": "private", "return": "Stream<IRI>", "signature": "Stream<IRI> getSubObjectPropertiesFor(OWLObjectProperty property, boolean direct)", "full_signature": "private Stream<IRI> getSubObjectPropertiesFor(OWLObjectProperty property, boolean direct)", "class_method_signature": "SimpleOntology.getSubObjectPropertiesFor(OWLObjectProperty property, boolean direct)", "testcase": false, "constructor": false}, {"identifier": "getDeclaredObjectProperties", "parameters": "(Imports imports)", "modifiers": "private", "return": "Stream<OWLObjectProperty>", "signature": "Stream<OWLObjectProperty> getDeclaredObjectProperties(Imports imports)", "full_signature": "private Stream<OWLObjectProperty> getDeclaredObjectProperties(Imports imports)", "class_method_signature": "SimpleOntology.getDeclaredObjectProperties(Imports imports)", "testcase": false, "constructor": false}, {"identifier": "getClassesWithIndividuals", "parameters": "(ValueFactory vf, ModelFactory mf)", "modifiers": "@Override public", "return": "Hierarchy", "signature": "Hierarchy getClassesWithIndividuals(ValueFactory vf, ModelFactory mf)", "full_signature": "@Override public Hierarchy getClassesWithIndividuals(ValueFactory vf, ModelFactory mf)", "class_method_signature": "SimpleOntology.getClassesWithIndividuals(ValueFactory vf, ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "getEntityUsages", "parameters": "(Resource entity)", "modifiers": "@Override public", "return": "TupleQueryResult", "signature": "TupleQueryResult getEntityUsages(Resource entity)", "full_signature": "@Override public TupleQueryResult getEntityUsages(Resource entity)", "class_method_signature": "SimpleOntology.getEntityUsages(Resource entity)", "testcase": false, "constructor": false}, {"identifier": "constructEntityUsages", "parameters": "(Resource entity, ModelFactory modelFactory)", "modifiers": "@Override public", "return": "Model", "signature": "Model constructEntityUsages(Resource entity, ModelFactory modelFactory)", "full_signature": "@Override public Model constructEntityUsages(Resource entity, ModelFactory modelFactory)", "class_method_signature": "SimpleOntology.constructEntityUsages(Resource entity, ModelFactory modelFactory)", "testcase": false, "constructor": false}, {"identifier": "constructEntityUsages", "parameters": "(Resource entity, RepositoryConnection conn, ModelFactory modelFactory)", "modifiers": "private", "return": "Model", "signature": "Model constructEntityUsages(Resource entity, RepositoryConnection conn, ModelFactory modelFactory)", "full_signature": "private Model constructEntityUsages(Resource entity, RepositoryConnection conn, ModelFactory modelFactory)", "class_method_signature": "SimpleOntology.constructEntityUsages(Resource entity, RepositoryConnection conn, ModelFactory modelFactory)", "testcase": false, "constructor": false}, {"identifier": "getConceptRelationships", "parameters": "(ValueFactory vf, ModelFactory mf)", "modifiers": "@Override public", "return": "Hierarchy", "signature": "Hierarchy getConceptRelationships(ValueFactory vf, ModelFactory mf)", "full_signature": "@Override public Hierarchy getConceptRelationships(ValueFactory vf, ModelFactory mf)", "class_method_signature": "SimpleOntology.getConceptRelationships(ValueFactory vf, ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "getConceptSchemeRelationships", "parameters": "(ValueFactory vf, ModelFactory mf)", "modifiers": "@Override public", "return": "Hierarchy", "signature": "Hierarchy getConceptSchemeRelationships(ValueFactory vf, ModelFactory mf)", "full_signature": "@Override public Hierarchy getConceptSchemeRelationships(ValueFactory vf, ModelFactory mf)", "class_method_signature": "SimpleOntology.getConceptSchemeRelationships(ValueFactory vf, ModelFactory mf)", "testcase": false, "constructor": false}, {"identifier": "isDeclaredIndividual", "parameters": "(OWLIndividual individual)", "modifiers": "private", "return": "boolean", "signature": "boolean isDeclaredIndividual(OWLIndividual individual)", "full_signature": "private boolean isDeclaredIndividual(OWLIndividual individual)", "class_method_signature": "SimpleOntology.isDeclaredIndividual(OWLIndividual individual)", "testcase": false, "constructor": false}, {"identifier": "getSearchResults", "parameters": "(String searchText, ValueFactory valueFactory)", "modifiers": "@Override public", "return": "TupleQueryResult", "signature": "TupleQueryResult getSearchResults(String searchText, ValueFactory valueFactory)", "full_signature": "@Override public TupleQueryResult getSearchResults(String searchText, ValueFactory valueFactory)", "class_method_signature": "SimpleOntology.getSearchResults(String searchText, ValueFactory valueFactory)", "testcase": false, "constructor": false}, {"identifier": "getTupleQueryResults", "parameters": "(String queryString, boolean includeImports)", "modifiers": "@Override public", "return": "TupleQueryResult", "signature": "TupleQueryResult getTupleQueryResults(String queryString, boolean includeImports)", "full_signature": "@Override public TupleQueryResult getTupleQueryResults(String queryString, boolean includeImports)", "class_method_signature": "SimpleOntology.getTupleQueryResults(String queryString, boolean includeImports)", "testcase": false, "constructor": false}, {"identifier": "getGraphQueryResults", "parameters": "(String queryString, boolean includeImports, ModelFactory modelFactory)", "modifiers": "@Override public", "return": "Model", "signature": "Model getGraphQueryResults(String queryString, boolean includeImports, ModelFactory modelFactory)", "full_signature": "@Override public Model getGraphQueryResults(String queryString, boolean includeImports, ModelFactory modelFactory)", "class_method_signature": "SimpleOntology.getGraphQueryResults(String queryString, boolean includeImports, ModelFactory modelFactory)", "testcase": false, "constructor": false}, {"identifier": "asSesameModel", "parameters": "()", "modifiers": "protected synchronized", "return": "org.eclipse.rdf4j.model.Model", "signature": "org.eclipse.rdf4j.model.Model asSesameModel()", "full_signature": "protected synchronized org.eclipse.rdf4j.model.Model asSesameModel()", "class_method_signature": "SimpleOntology.asSesameModel()", "testcase": false, "constructor": false}, {"identifier": "setSesameModel", "parameters": "()", "modifiers": "protected synchronized", "return": "void", "signature": "void setSesameModel()", "full_signature": "protected synchronized void setSesameModel()", "class_method_signature": "SimpleOntology.setSesameModel()", "testcase": false, "constructor": false}, {"identifier": "asModel", "parameters": "(ModelFactory factory)", "modifiers": "@Override public", "return": "Model", "signature": "Model asModel(ModelFactory factory)", "full_signature": "@Override public Model asModel(ModelFactory factory)", "class_method_signature": "SimpleOntology.asModel(ModelFactory factory)", "testcase": false, "constructor": false}, {"identifier": "asTurtle", "parameters": "()", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream asTurtle()", "full_signature": "@Override public OutputStream asTurtle()", "class_method_signature": "SimpleOntology.asTurtle()", "testcase": false, "constructor": false}, {"identifier": "asTurtle", "parameters": "(OutputStream outputStream)", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream asTurtle(OutputStream outputStream)", "full_signature": "@Override public OutputStream asTurtle(OutputStream outputStream)", "class_method_signature": "SimpleOntology.asTurtle(OutputStream outputStream)", "testcase": false, "constructor": false}, {"identifier": "asRdfXml", "parameters": "()", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream asRdfXml()", "full_signature": "@Override public OutputStream asRdfXml()", "class_method_signature": "SimpleOntology.asRdfXml()", "testcase": false, "constructor": false}, {"identifier": "asRdfXml", "parameters": "(OutputStream outputStream)", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream asRdfXml(OutputStream outputStream)", "full_signature": "@Override public OutputStream asRdfXml(OutputStream outputStream)", "class_method_signature": "SimpleOntology.asRdfXml(OutputStream outputStream)", "testcase": false, "constructor": false}, {"identifier": "asOwlXml", "parameters": "()", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream asOwlXml()", "full_signature": "@Override public OutputStream asOwlXml()", "class_method_signature": "SimpleOntology.asOwlXml()", "testcase": false, "constructor": false}, {"identifier": "asOwlXml", "parameters": "(OutputStream outputStream)", "modifiers": "@Override public", "return": "OutputStream", "signature": "OutputStream asOwlXml(OutputStream outputStream)", "full_signature": "@Override public OutputStream asOwlXml(OutputStream outputStream)", "class_method_signature": "SimpleOntology.asOwlXml(OutputStream outputStream)", "testcase": false, "constructor": false}, {"identifier": "asJsonLD", "parameters": "(boolean skolemize)", "modifiers": "@Override public @Nonnull", "return": "OutputStream", "signature": "OutputStream asJsonLD(boolean skolemize)", "full_signature": "@Override public @Nonnull OutputStream asJsonLD(boolean skolemize)", "class_method_signature": "SimpleOntology.asJsonLD(boolean skolemize)", "testcase": false, "constructor": false}, {"identifier": "asJsonLD", "parameters": "(boolean skolemize, OutputStream outputStream)", "modifiers": "@Override public @Nonnull", "return": "OutputStream", "signature": "OutputStream asJsonLD(boolean skolemize, OutputStream outputStream)", "full_signature": "@Override public @Nonnull OutputStream asJsonLD(boolean skolemize, OutputStream outputStream)", "class_method_signature": "SimpleOntology.asJsonLD(boolean skolemize, OutputStream outputStream)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "SimpleOntology.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SimpleOntology.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getOwlapiOntology", "parameters": "()", "modifiers": "protected", "return": "OWLOntology", "signature": "OWLOntology getOwlapiOntology()", "full_signature": "protected OWLOntology getOwlapiOntology()", "class_method_signature": "SimpleOntology.getOwlapiOntology()", "testcase": false, "constructor": false}, {"identifier": "getOwlapiOntologyManager", "parameters": "()", "modifiers": "protected", "return": "OWLOntologyManager", "signature": "OWLOntologyManager getOwlapiOntologyManager()", "full_signature": "protected OWLOntologyManager getOwlapiOntologyManager()", "class_method_signature": "SimpleOntology.getOwlapiOntologyManager()", "testcase": false, "constructor": false}, {"identifier": "addOntologyData", "parameters": "(RepositoryConnection conn, boolean includeImports)", "modifiers": "private", "return": "void", "signature": "void addOntologyData(RepositoryConnection conn, boolean includeImports)", "full_signature": "private void addOntologyData(RepositoryConnection conn, boolean includeImports)", "class_method_signature": "SimpleOntology.addOntologyData(RepositoryConnection conn, boolean includeImports)", "testcase": false, "constructor": false}, {"identifier": "runGraphQueryOnOntology", "parameters": "(String queryString,\n                                          @Nullable Function<GraphQuery, GraphQuery> addBinding,\n                                          String methodName, boolean includeImports, ModelFactory modelFactory)", "modifiers": "private", "return": "Model", "signature": "Model runGraphQueryOnOntology(String queryString,\n                                          @Nullable Function<GraphQuery, GraphQuery> addBinding,\n                                          String methodName, boolean includeImports, ModelFactory modelFactory)", "full_signature": "private Model runGraphQueryOnOntology(String queryString,\n                                          @Nullable Function<GraphQuery, GraphQuery> addBinding,\n                                          String methodName, boolean includeImports, ModelFactory modelFactory)", "class_method_signature": "SimpleOntology.runGraphQueryOnOntology(String queryString,\n                                          @Nullable Function<GraphQuery, GraphQuery> addBinding,\n                                          String methodName, boolean includeImports, ModelFactory modelFactory)", "testcase": false, "constructor": false}, {"identifier": "runGraphQueryOnOntology", "parameters": "(String queryString, @Nullable Function<GraphQuery, GraphQuery> addBinding,\n                                          String methodName, RepositoryConnection conn, ModelFactory modelFactory)", "modifiers": "private", "return": "Model", "signature": "Model runGraphQueryOnOntology(String queryString, @Nullable Function<GraphQuery, GraphQuery> addBinding,\n                                          String methodName, RepositoryConnection conn, ModelFactory modelFactory)", "full_signature": "private Model runGraphQueryOnOntology(String queryString, @Nullable Function<GraphQuery, GraphQuery> addBinding,\n                                          String methodName, RepositoryConnection conn, ModelFactory modelFactory)", "class_method_signature": "SimpleOntology.runGraphQueryOnOntology(String queryString, @Nullable Function<GraphQuery, GraphQuery> addBinding,\n                                          String methodName, RepositoryConnection conn, ModelFactory modelFactory)", "testcase": false, "constructor": false}, {"identifier": "runQueryOnOntology", "parameters": "(String queryString,\n                                                @Nullable Function<TupleQuery, TupleQuery> addBinding,\n                                                String methodName, boolean includeImports)", "modifiers": "private", "return": "TupleQueryResult", "signature": "TupleQueryResult runQueryOnOntology(String queryString,\n                                                @Nullable Function<TupleQuery, TupleQuery> addBinding,\n                                                String methodName, boolean includeImports)", "full_signature": "private TupleQueryResult runQueryOnOntology(String queryString,\n                                                @Nullable Function<TupleQuery, TupleQuery> addBinding,\n                                                String methodName, boolean includeImports)", "class_method_signature": "SimpleOntology.runQueryOnOntology(String queryString,\n                                                @Nullable Function<TupleQuery, TupleQuery> addBinding,\n                                                String methodName, boolean includeImports)", "testcase": false, "constructor": false}, {"identifier": "runQueryOnOntology", "parameters": "(String queryString,\n                                                @Nullable Function<TupleQuery, TupleQuery> addBinding,\n                                                String methodName, RepositoryConnection conn)", "modifiers": "private", "return": "TupleQueryResult", "signature": "TupleQueryResult runQueryOnOntology(String queryString,\n                                                @Nullable Function<TupleQuery, TupleQuery> addBinding,\n                                                String methodName, RepositoryConnection conn)", "full_signature": "private TupleQueryResult runQueryOnOntology(String queryString,\n                                                @Nullable Function<TupleQuery, TupleQuery> addBinding,\n                                                String methodName, RepositoryConnection conn)", "class_method_signature": "SimpleOntology.runQueryOnOntology(String queryString,\n                                                @Nullable Function<TupleQuery, TupleQuery> addBinding,\n                                                String methodName, RepositoryConnection conn)", "testcase": false, "constructor": false}, {"identifier": "getStartTime", "parameters": "()", "modifiers": "private", "return": "long", "signature": "long getStartTime()", "full_signature": "private long getStartTime()", "class_method_signature": "SimpleOntology.getStartTime()", "testcase": false, "constructor": false}, {"identifier": "logTrace", "parameters": "(String methodName, Long start)", "modifiers": "private", "return": "void", "signature": "void logTrace(String methodName, Long start)", "full_signature": "private void logTrace(String methodName, Long start)", "class_method_signature": "SimpleOntology.logTrace(String methodName, Long start)", "testcase": false, "constructor": false}, {"identifier": "getOntologyDocument", "parameters": "(PrefixDocumentFormatImpl prefixFormat)", "modifiers": "private @Nonnull", "return": "OutputStream", "signature": "OutputStream getOntologyDocument(PrefixDocumentFormatImpl prefixFormat)", "full_signature": "private @Nonnull OutputStream getOntologyDocument(PrefixDocumentFormatImpl prefixFormat)", "class_method_signature": "SimpleOntology.getOntologyDocument(PrefixDocumentFormatImpl prefixFormat)", "testcase": false, "constructor": false}, {"identifier": "getAnnotations", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void getAnnotations()", "full_signature": "private void getAnnotations()", "class_method_signature": "SimpleOntology.getAnnotations()", "testcase": false, "constructor": false}, {"identifier": "getAnnotationProperties", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void getAnnotationProperties()", "full_signature": "private void getAnnotationProperties()", "class_method_signature": "SimpleOntology.getAnnotationProperties()", "testcase": false, "constructor": false}, {"identifier": "getOwlObjectProperty", "parameters": "(IRI iri)", "modifiers": "private", "return": "Optional<OWLObjectProperty>", "signature": "Optional<OWLObjectProperty> getOwlObjectProperty(IRI iri)", "full_signature": "private Optional<OWLObjectProperty> getOwlObjectProperty(IRI iri)", "class_method_signature": "SimpleOntology.getOwlObjectProperty(IRI iri)", "testcase": false, "constructor": false}, {"identifier": "getOwlDataProperty", "parameters": "(IRI iri)", "modifiers": "private", "return": "Optional<OWLDataProperty>", "signature": "Optional<OWLDataProperty> getOwlDataProperty(IRI iri)", "full_signature": "private Optional<OWLDataProperty> getOwlDataProperty(IRI iri)", "class_method_signature": "SimpleOntology.getOwlDataProperty(IRI iri)", "testcase": false, "constructor": false}, {"identifier": "hasClassAsDomain", "parameters": "(Stream<T> stream,\n                                                                           org.semanticweb.owlapi.model.IRI iri,\n                                                                           Node<OWLClass> equivalentClasses,\n                                                                           NodeSet<OWLClass> superClasses)", "modifiers": "private", "return": "boolean", "signature": "boolean hasClassAsDomain(Stream<T> stream,\n                                                                           org.semanticweb.owlapi.model.IRI iri,\n                                                                           Node<OWLClass> equivalentClasses,\n                                                                           NodeSet<OWLClass> superClasses)", "full_signature": "private boolean hasClassAsDomain(Stream<T> stream,\n                                                                           org.semanticweb.owlapi.model.IRI iri,\n                                                                           Node<OWLClass> equivalentClasses,\n                                                                           NodeSet<OWLClass> superClasses)", "class_method_signature": "SimpleOntology.hasClassAsDomain(Stream<T> stream,\n                                                                           org.semanticweb.owlapi.model.IRI iri,\n                                                                           Node<OWLClass> equivalentClasses,\n                                                                           NodeSet<OWLClass> superClasses)", "testcase": false, "constructor": false}, {"identifier": "hasNoDomain", "parameters": "(Stream<T> stream)", "modifiers": "private", "return": "boolean", "signature": "boolean hasNoDomain(Stream<T> stream)", "full_signature": "private boolean hasNoDomain(Stream<T> stream)", "class_method_signature": "SimpleOntology.hasNoDomain(Stream<T> stream)", "testcase": false, "constructor": false}, {"identifier": "inputStreamToByteArray", "parameters": "(InputStream inputStream)", "modifiers": "private", "return": "byte[]", "signature": "byte[] inputStreamToByteArray(InputStream inputStream)", "full_signature": "private byte[] inputStreamToByteArray(InputStream inputStream)", "class_method_signature": "SimpleOntology.inputStreamToByteArray(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "createSesameModel", "parameters": "(InputStream inputStream)", "modifiers": "private", "return": "org.eclipse.rdf4j.model.Model", "signature": "org.eclipse.rdf4j.model.Model createSesameModel(InputStream inputStream)", "full_signature": "private org.eclipse.rdf4j.model.Model createSesameModel(InputStream inputStream)", "class_method_signature": "SimpleOntology.createSesameModel(InputStream inputStream)", "testcase": false, "constructor": false}], "file": "com.mobi.ontology.impl.owlapi/src/main/java/com/mobi/ontology/impl/owlapi/SimpleOntology.java"}, "focal_method": {"identifier": "getOntologyAnnotations", "parameters": "()", "modifiers": "@Override public", "return": "Set<Annotation>", "body": "@Override\n    public Set<Annotation> getOntologyAnnotations() throws MobiOntologyException {\n        if (ontoAnnotations == null) {\n            getAnnotations();\n        }\n        return ontoAnnotations;\n    }", "signature": "Set<Annotation> getOntologyAnnotations()", "full_signature": "@Override public Set<Annotation> getOntologyAnnotations()", "class_method_signature": "SimpleOntology.getOntologyAnnotations()", "testcase": false, "constructor": false, "invocations": ["getAnnotations"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}