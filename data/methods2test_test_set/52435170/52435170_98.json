{"test_class": {"identifier": "DataSetLoaderProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DataSetLoaderProvider LOADER_PROVIDER = new DataSetLoaderProvider();", "modifier": "private static final", "type": "DataSetLoaderProvider", "declarator": "LOADER_PROVIDER = new DataSetLoaderProvider()", "var_name": "LOADER_PROVIDER"}], "file": "rdbms/src/test/java/eu/drus/jpa/unit/sql/dbunit/dataset/DataSetLoaderProviderTest.java"}, "test_case": {"identifier": "testCsvLoaderLoadUsingProperResource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCsvLoaderLoadUsingProperResource() throws Exception {\n        // WHEN\n        final DataSetLoader<IDataSet> loader = LOADER_PROVIDER.csvLoader();\n\n        // THEN\n        assertThat(loader, notNullValue());\n\n        // WHEN\n        final IDataSet dataSet = loader.load(getFile(\"test-data\"));\n\n        // THEN\n        assertThat(dataSet, notNullValue());\n\n        final List<String> tableNames = Arrays.asList(dataSet.getTableNames());\n        assertThat(tableNames.size(), equalTo(2));\n        assertThat(tableNames, hasItems(\"CSV_TABLE_1\", \"CSV_TABLE_2\"));\n\n        final ITable table1 = dataSet.getTable(\"CSV_TABLE_1\");\n        assertThat(table1.getRowCount(), equalTo(3));\n\n        final ITable table2 = dataSet.getTable(\"CSV_TABLE_2\");\n        assertThat(table2.getRowCount(), equalTo(1));\n    }", "signature": "void testCsvLoaderLoadUsingProperResource()", "full_signature": "@Test public void testCsvLoaderLoadUsingProperResource()", "class_method_signature": "DataSetLoaderProviderTest.testCsvLoaderLoadUsingProperResource()", "testcase": true, "constructor": false, "invocations": ["csvLoader", "assertThat", "notNullValue", "load", "getFile", "assertThat", "notNullValue", "asList", "getTableNames", "assertThat", "size", "equalTo", "assertThat", "hasItems", "getTable", "assertThat", "getRowCount", "equalTo", "getTable", "assertThat", "getRowCount", "equalTo"]}, "focal_class": {"identifier": "DataSetLoaderProvider", "superclass": "", "interfaces": "implements LoaderProvider<IDataSet>", "fields": [], "methods": [{"identifier": "defineReplaceableExpressions", "parameters": "(final IDataSet dataSet)", "modifiers": "private", "return": "IDataSet", "signature": "IDataSet defineReplaceableExpressions(final IDataSet dataSet)", "full_signature": "private IDataSet defineReplaceableExpressions(final IDataSet dataSet)", "class_method_signature": "DataSetLoaderProvider.defineReplaceableExpressions(final IDataSet dataSet)", "testcase": false, "constructor": false}, {"identifier": "xmlLoader", "parameters": "()", "modifiers": "@Override public", "return": "DataSetLoader<IDataSet>", "signature": "DataSetLoader<IDataSet> xmlLoader()", "full_signature": "@Override public DataSetLoader<IDataSet> xmlLoader()", "class_method_signature": "DataSetLoaderProvider.xmlLoader()", "testcase": false, "constructor": false}, {"identifier": "yamlLoader", "parameters": "()", "modifiers": "@Override public", "return": "DataSetLoader<IDataSet>", "signature": "DataSetLoader<IDataSet> yamlLoader()", "full_signature": "@Override public DataSetLoader<IDataSet> yamlLoader()", "class_method_signature": "DataSetLoaderProvider.yamlLoader()", "testcase": false, "constructor": false}, {"identifier": "jsonLoader", "parameters": "()", "modifiers": "@Override public", "return": "DataSetLoader<IDataSet>", "signature": "DataSetLoader<IDataSet> jsonLoader()", "full_signature": "@Override public DataSetLoader<IDataSet> jsonLoader()", "class_method_signature": "DataSetLoaderProvider.jsonLoader()", "testcase": false, "constructor": false}, {"identifier": "csvLoader", "parameters": "()", "modifiers": "@Override public", "return": "DataSetLoader<IDataSet>", "signature": "DataSetLoader<IDataSet> csvLoader()", "full_signature": "@Override public DataSetLoader<IDataSet> csvLoader()", "class_method_signature": "DataSetLoaderProvider.csvLoader()", "testcase": false, "constructor": false}, {"identifier": "xlsLoader", "parameters": "()", "modifiers": "@Override public", "return": "DataSetLoader<IDataSet>", "signature": "DataSetLoader<IDataSet> xlsLoader()", "full_signature": "@Override public DataSetLoader<IDataSet> xlsLoader()", "class_method_signature": "DataSetLoaderProvider.xlsLoader()", "testcase": false, "constructor": false}], "file": "rdbms/src/main/java/eu/drus/jpa/unit/sql/dbunit/dataset/DataSetLoaderProvider.java"}, "focal_method": {"identifier": "csvLoader", "parameters": "()", "modifiers": "@Override public", "return": "DataSetLoader<IDataSet>", "body": "@Override\n    public DataSetLoader<IDataSet> csvLoader() {\n        return (final File path) -> {\n            try {\n                return defineReplaceableExpressions(new CsvDataSet(path));\n            } catch (final DataSetException e) {\n                throw new IOException(e);\n            }\n        };\n    }", "signature": "DataSetLoader<IDataSet> csvLoader()", "full_signature": "@Override public DataSetLoader<IDataSet> csvLoader()", "class_method_signature": "DataSetLoaderProvider.csvLoader()", "testcase": false, "constructor": false, "invocations": ["defineReplaceableExpressions"]}, "repository": {"repo_id": 52435170, "url": "https://github.com/dadrus/jpa-unit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 24, "size": 1190, "license": "licensed"}}