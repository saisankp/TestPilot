{"test_class": {"identifier": "ShardRecoveryCoordinatorTest", "superclass": "extends AbstractTest", "interfaces": "", "fields": [{"original_string": "private static final Logger FOO_LOGGER = LoggerFactory.getLogger(\"foo\");", "modifier": "private static final", "type": "Logger", "declarator": "FOO_LOGGER = LoggerFactory.getLogger(\"foo\")", "var_name": "FOO_LOGGER"}, {"original_string": "private ShardDataTree peopleDataTree;", "modifier": "private", "type": "ShardDataTree", "declarator": "peopleDataTree", "var_name": "peopleDataTree"}, {"original_string": "private EffectiveModelContext peopleSchemaContext;", "modifier": "private", "type": "EffectiveModelContext", "declarator": "peopleSchemaContext", "var_name": "peopleSchemaContext"}, {"original_string": "private EffectiveModelContext carsSchemaContext;", "modifier": "private", "type": "EffectiveModelContext", "declarator": "carsSchemaContext", "var_name": "carsSchemaContext"}, {"original_string": "private ShardRecoveryCoordinator coordinator;", "modifier": "private", "type": "ShardRecoveryCoordinator", "declarator": "coordinator", "var_name": "coordinator"}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/test/java/org/opendaylight/controller/cluster/datastore/ShardRecoveryCoordinatorTest.java"}, "test_case": {"identifier": "testApplyCurrentLogRecoveryBatch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testApplyCurrentLogRecoveryBatch() {\n        try {\n            coordinator.applyCurrentLogRecoveryBatch();\n        } catch (final IllegalArgumentException e) {\n            fail(\"IllegalArgumentException should not happen - if the pruning modification delegate is passed\");\n        }\n    }", "signature": "void testApplyCurrentLogRecoveryBatch()", "full_signature": "@Test public void testApplyCurrentLogRecoveryBatch()", "class_method_signature": "ShardRecoveryCoordinatorTest.testApplyCurrentLogRecoveryBatch()", "testcase": true, "constructor": false, "invocations": ["applyCurrentLogRecoveryBatch", "fail"]}, "focal_class": {"identifier": "ShardRecoveryCoordinator", "superclass": "", "interfaces": "implements RaftActorRecoveryCohort", "fields": [{"original_string": "private final ShardDataTree store;", "modifier": "private final", "type": "ShardDataTree", "declarator": "store", "var_name": "store"}, {"original_string": "private final String shardName;", "modifier": "private final", "type": "String", "declarator": "shardName", "var_name": "shardName"}, {"original_string": "private final Logger log;", "modifier": "private final", "type": "Logger", "declarator": "log", "var_name": "log"}, {"original_string": "private boolean open;", "modifier": "private", "type": "boolean", "declarator": "open", "var_name": "open"}], "methods": [{"identifier": "ShardRecoveryCoordinator", "parameters": "(final ShardDataTree store, final String shardName, final Logger log)", "modifiers": "", "return": "", "signature": " ShardRecoveryCoordinator(final ShardDataTree store, final String shardName, final Logger log)", "full_signature": "  ShardRecoveryCoordinator(final ShardDataTree store, final String shardName, final Logger log)", "class_method_signature": "ShardRecoveryCoordinator.ShardRecoveryCoordinator(final ShardDataTree store, final String shardName, final Logger log)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(final ShardDataTree store, final String shardName, final Logger log)", "modifiers": "static", "return": "ShardRecoveryCoordinator", "signature": "ShardRecoveryCoordinator create(final ShardDataTree store, final String shardName, final Logger log)", "full_signature": "static ShardRecoveryCoordinator create(final ShardDataTree store, final String shardName, final Logger log)", "class_method_signature": "ShardRecoveryCoordinator.create(final ShardDataTree store, final String shardName, final Logger log)", "testcase": false, "constructor": false}, {"identifier": "forSnapshot", "parameters": "(final ShardDataTree store, final String shardName, final Logger log,\n            final Snapshot snapshot)", "modifiers": "static", "return": "ShardRecoveryCoordinator", "signature": "ShardRecoveryCoordinator forSnapshot(final ShardDataTree store, final String shardName, final Logger log,\n            final Snapshot snapshot)", "full_signature": "static ShardRecoveryCoordinator forSnapshot(final ShardDataTree store, final String shardName, final Logger log,\n            final Snapshot snapshot)", "class_method_signature": "ShardRecoveryCoordinator.forSnapshot(final ShardDataTree store, final String shardName, final Logger log,\n            final Snapshot snapshot)", "testcase": false, "constructor": false}, {"identifier": "startLogRecoveryBatch", "parameters": "(final int maxBatchSize)", "modifiers": "@Override public", "return": "void", "signature": "void startLogRecoveryBatch(final int maxBatchSize)", "full_signature": "@Override public void startLogRecoveryBatch(final int maxBatchSize)", "class_method_signature": "ShardRecoveryCoordinator.startLogRecoveryBatch(final int maxBatchSize)", "testcase": false, "constructor": false}, {"identifier": "appendRecoveredLogEntry", "parameters": "(final Payload payload)", "modifiers": "@Override @SuppressWarnings(\"checkstyle:IllegalCatch\") public", "return": "void", "signature": "void appendRecoveredLogEntry(final Payload payload)", "full_signature": "@Override @SuppressWarnings(\"checkstyle:IllegalCatch\") public void appendRecoveredLogEntry(final Payload payload)", "class_method_signature": "ShardRecoveryCoordinator.appendRecoveredLogEntry(final Payload payload)", "testcase": false, "constructor": false}, {"identifier": "applyCurrentLogRecoveryBatch", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void applyCurrentLogRecoveryBatch()", "full_signature": "@Override public void applyCurrentLogRecoveryBatch()", "class_method_signature": "ShardRecoveryCoordinator.applyCurrentLogRecoveryBatch()", "testcase": false, "constructor": false}, {"identifier": "writeRoot", "parameters": "(final String kind, final NormalizedNode<?, ?> node)", "modifiers": "private", "return": "File", "signature": "File writeRoot(final String kind, final NormalizedNode<?, ?> node)", "full_signature": "private File writeRoot(final String kind, final NormalizedNode<?, ?> node)", "class_method_signature": "ShardRecoveryCoordinator.writeRoot(final String kind, final NormalizedNode<?, ?> node)", "testcase": false, "constructor": false}, {"identifier": "applyRecoverySnapshot", "parameters": "(final Snapshot.State snapshotState)", "modifiers": "@Override @SuppressWarnings(\"checkstyle:IllegalCatch\") public", "return": "void", "signature": "void applyRecoverySnapshot(final Snapshot.State snapshotState)", "full_signature": "@Override @SuppressWarnings(\"checkstyle:IllegalCatch\") public void applyRecoverySnapshot(final Snapshot.State snapshotState)", "class_method_signature": "ShardRecoveryCoordinator.applyRecoverySnapshot(final Snapshot.State snapshotState)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-distributed-datastore/src/main/java/org/opendaylight/controller/cluster/datastore/ShardRecoveryCoordinator.java"}, "focal_method": {"identifier": "applyCurrentLogRecoveryBatch", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void applyCurrentLogRecoveryBatch() {\n        checkState(open, \"call startLogRecovery before calling applyCurrentLogRecoveryBatch\");\n        open = false;\n    }", "signature": "void applyCurrentLogRecoveryBatch()", "full_signature": "@Override public void applyCurrentLogRecoveryBatch()", "class_method_signature": "ShardRecoveryCoordinator.applyCurrentLogRecoveryBatch()", "testcase": false, "constructor": false, "invocations": ["checkState"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}