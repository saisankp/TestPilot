{"test_class": {"identifier": "FixedDelayRestartStrategyTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/executiongraph/restart/FixedDelayRestartStrategyTest.java"}, "test_case": {"identifier": "testFixedDelayRestartStrategy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFixedDelayRestartStrategy() {\n\t\tint numberRestarts = 10;\n\t\tlong restartDelay = 10;\n\n\t\tFixedDelayRestartStrategy fixedDelayRestartStrategy = new FixedDelayRestartStrategy(\n\t\t\tnumberRestarts,\n\t\t\trestartDelay);\n\n\t\tExecutionGraph executionGraph = mock(ExecutionGraph.class);\n\t\twhen(executionGraph.getExecutionContext())\n\t\t\t.thenReturn(ExecutionContext$.MODULE$.fromExecutor(MoreExecutors.directExecutor()));\n\n\t\twhile(fixedDelayRestartStrategy.canRestart()) {\n\t\t\tfixedDelayRestartStrategy.restart(executionGraph);\n\t\t}\n\n\t\tMockito.verify(executionGraph, Mockito.times(numberRestarts)).restart();\n\t}", "signature": "void testFixedDelayRestartStrategy()", "full_signature": "@Test public void testFixedDelayRestartStrategy()", "class_method_signature": "FixedDelayRestartStrategyTest.testFixedDelayRestartStrategy()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getExecutionContext", "fromExecutor", "directExecutor", "canRestart", "restart", "restart", "verify", "times"]}, "focal_class": {"identifier": "FixedDelayRestartStrategy", "superclass": "", "interfaces": "implements RestartStrategy", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(FixedDelayRestartStrategy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FixedDelayRestartStrategy.class)", "var_name": "LOG"}, {"original_string": "private final int maxNumberRestartAttempts;", "modifier": "private final", "type": "int", "declarator": "maxNumberRestartAttempts", "var_name": "maxNumberRestartAttempts"}, {"original_string": "private final long delayBetweenRestartAttempts;", "modifier": "private final", "type": "long", "declarator": "delayBetweenRestartAttempts", "var_name": "delayBetweenRestartAttempts"}, {"original_string": "private int currentRestartAttempt;", "modifier": "private", "type": "int", "declarator": "currentRestartAttempt", "var_name": "currentRestartAttempt"}], "methods": [{"identifier": "FixedDelayRestartStrategy", "parameters": "(\n\t\tint maxNumberRestartAttempts,\n\t\tlong delayBetweenRestartAttempts)", "modifiers": "public", "return": "", "signature": " FixedDelayRestartStrategy(\n\t\tint maxNumberRestartAttempts,\n\t\tlong delayBetweenRestartAttempts)", "full_signature": "public  FixedDelayRestartStrategy(\n\t\tint maxNumberRestartAttempts,\n\t\tlong delayBetweenRestartAttempts)", "class_method_signature": "FixedDelayRestartStrategy.FixedDelayRestartStrategy(\n\t\tint maxNumberRestartAttempts,\n\t\tlong delayBetweenRestartAttempts)", "testcase": false, "constructor": true}, {"identifier": "getCurrentRestartAttempt", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCurrentRestartAttempt()", "full_signature": "public int getCurrentRestartAttempt()", "class_method_signature": "FixedDelayRestartStrategy.getCurrentRestartAttempt()", "testcase": false, "constructor": false}, {"identifier": "canRestart", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canRestart()", "full_signature": "@Override public boolean canRestart()", "class_method_signature": "FixedDelayRestartStrategy.canRestart()", "testcase": false, "constructor": false}, {"identifier": "restart", "parameters": "(final ExecutionGraph executionGraph)", "modifiers": "@Override public", "return": "void", "signature": "void restart(final ExecutionGraph executionGraph)", "full_signature": "@Override public void restart(final ExecutionGraph executionGraph)", "class_method_signature": "FixedDelayRestartStrategy.restart(final ExecutionGraph executionGraph)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Configuration configuration)", "modifiers": "public static", "return": "FixedDelayRestartStrategy", "signature": "FixedDelayRestartStrategy create(Configuration configuration)", "full_signature": "public static FixedDelayRestartStrategy create(Configuration configuration)", "class_method_signature": "FixedDelayRestartStrategy.create(Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "FixedDelayRestartStrategy.toString()", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/restart/FixedDelayRestartStrategy.java"}, "focal_method": {"identifier": "FixedDelayRestartStrategy", "parameters": "(\n\t\tint maxNumberRestartAttempts,\n\t\tlong delayBetweenRestartAttempts)", "modifiers": "public", "return": "", "body": "public FixedDelayRestartStrategy(\n\t\tint maxNumberRestartAttempts,\n\t\tlong delayBetweenRestartAttempts) {\n\n\t\tPreconditions.checkArgument(maxNumberRestartAttempts >= 0, \"Maximum number of restart attempts must be positive.\");\n\t\tPreconditions.checkArgument(delayBetweenRestartAttempts >= 0, \"Delay between restart attempts must be positive\");\n\n\t\tthis.maxNumberRestartAttempts = maxNumberRestartAttempts;\n\t\tthis.delayBetweenRestartAttempts = delayBetweenRestartAttempts;\n\t\tcurrentRestartAttempt = 0;\n\t}", "signature": " FixedDelayRestartStrategy(\n\t\tint maxNumberRestartAttempts,\n\t\tlong delayBetweenRestartAttempts)", "full_signature": "public  FixedDelayRestartStrategy(\n\t\tint maxNumberRestartAttempts,\n\t\tlong delayBetweenRestartAttempts)", "class_method_signature": "FixedDelayRestartStrategy.FixedDelayRestartStrategy(\n\t\tint maxNumberRestartAttempts,\n\t\tlong delayBetweenRestartAttempts)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}