{"test_class": {"identifier": "RatTest", "superclass": "", "interfaces": "", "fields": [], "file": "fuzzm/fuzzm/src/main/java/fuzzm/util/RatTest.java"}, "test_case": {"identifier": "testRandomCoverage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testRandomCoverage() {\n\t\ttry {\n\n\t\t\tSystem.out.println(\"Testing random coverage\" + \"\\n\");\n\n\t\t\tboolean stdOutput = true;\n\t\t\tboolean fileOutput = false;\n\n\t\t\tfinal int totalCount = 10000;\n\t\t\tfinal NamedType nt = NamedType.INT;\n\t\t\tfinal int minI = -128;\n\t\t\tfinal int maxI = 127;\t\t\n\t\t\tfinal BigFraction min = new BigFraction(BigInteger.valueOf(minI));\n\t\t\tfinal BigFraction max = new BigFraction(BigInteger.valueOf(maxI));\n\n\t\t\tArrayList<Integer> bias = new ArrayList<Integer>();\n\t\t\tbias.add(-1);\n\t\t\tbias.add(0);\n\t\t\tbias.add(1);\n\n\t\t\tint aBias;\n\n\t\t\tArrayList<Integer> missing = new ArrayList<Integer>();\n\n\t\t\tfor(int bIndex = 0; bIndex < bias.size(); bIndex++){\n\n\t\t\t\taBias = bias.get(bIndex);\n\n\t\t\t\tif(stdOutput){\n\t\t\t\t\tSystem.out.println(\"bias: \" + aBias);\n\t\t\t\t}\n\n\t\t\t\tBufferedWriter myOut = null;\n\n\t\t\t\tif(fileOutput){\n\t\t\t\t\tString myFileName = buildOutputFilename(\"random_freq_\", aBias, totalCount);\n\t\t\t\t\tString rangeString = \"_range_\" + min + \"--\" + max;\n\t\t\t\t\tString typeString = \"_type-\" + nt.toString();\n\t\t\t\t\tmyFileName = myFileName.concat(rangeString).concat(typeString).concat(\".txt\");\n\n\t\t\t\t\tmyOut = new BufferedWriter(new FileWriter(myFileName));\n\t\t\t\t\tSystem.out.println(myFileName + \"\\n\");\n\t\t\t\t}\n\n\t\t\t\tHashMap<Integer,Integer> hm = new HashMap<Integer, Integer>();\n\n\t\t\t\tfor(int i = 0; i < totalCount; i += 1){\n\n\t\t\t\t\tBigFraction resBF = Rat.biasedRandom(nt, true, aBias, min, max);\n\t\t\t\t\tdouble res = resBF.doubleValue();\n\n\t\t\t\t\tif(hm.containsKey((int)res)){\n\t\t\t\t\t\tInteger freq = hm.get((int)res);\n\t\t\t\t\t\tfreq = freq + 1;\n\t\t\t\t\t\thm.put((int)res, freq);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\thm.put((int)res, 1);\n\t\t\t\t\t}\n\n\t\t\t\t} // end for totalCount\n\n\t\t\t\t// output frequencies to file, one value per line.  format:  value, frequency \n\t\t\t\tif(fileOutput){\n\t\t\t\t\tfor(int i = minI; i <= maxI; i++){\n\t\t\t\t\t\tif(hm.containsKey(i)){\n\t\t\t\t\t\t\tint freq = hm.get(i);\n\t\t\t\t\t\t\tmyOut.write(i + \", \" + freq + \"\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tmyOut.write(i + \", \" + 0 + \"\\n\");\n\n\t\t\t\t\t}\n\t\t\t\t} // end if stdOutput\n\n\t\t\t\tif(! (myOut==null)){\n\t\t\t\t\tmyOut.close();\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\tfor(int i = minI; i <= maxI; i++){\n\t\t\t\t\tif(! hm.containsKey(i))\n\t\t\t\t\t\tmissing.add(i);\t\t\n\t\t\t\t}\n\n\t\t\t\tif(stdOutput){\n\t\t\t\t\tSystem.out.println(\"missing count: \" + missing.size());\n\t\t\t\t\tSystem.out.println(\"missing: \\n\" + missing + \"\\n\");\n\t\t\t\t}\n\n\t\t\t\t// test conditions:  Ensure we always produce min and max values.\n\t\t\t\tAssert.assertFalse(missing.contains(minI));\n\t\t\t\tAssert.assertFalse(missing.contains(maxI));\n\n\t\t\t\tmissing.clear();\n\n\t\t\t} // end for bIndex\n\t\t} catch (Throwable e) {\n\t\t\tthrow new Error(e);\n\t\t}\n\t}", "signature": "void testRandomCoverage()", "full_signature": "@Test public void testRandomCoverage()", "class_method_signature": "RatTest.testRandomCoverage()", "testcase": true, "constructor": false, "invocations": ["println", "valueOf", "valueOf", "add", "add", "add", "size", "get", "println", "buildOutputFilename", "toString", "concat", "concat", "concat", "println", "biasedRandom", "doubleValue", "containsKey", "get", "put", "put", "containsKey", "get", "write", "write", "close", "containsKey", "add", "println", "size", "println", "assertFalse", "contains", "assertFalse", "contains", "clear"]}, "focal_class": {"identifier": "Rat", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Random oracle = new Random();", "modifier": "public static final", "type": "Random", "declarator": "oracle = new Random()", "var_name": "oracle"}], "methods": [{"identifier": "BigFractionFromString", "parameters": "(String value)", "modifiers": "public static", "return": "BigFraction", "signature": "BigFraction BigFractionFromString(String value)", "full_signature": "public static BigFraction BigFractionFromString(String value)", "class_method_signature": "Rat.BigFractionFromString(String value)", "testcase": false, "constructor": false}, {"identifier": "TypeFromString", "parameters": "(String type)", "modifiers": "public static", "return": "NamedType", "signature": "NamedType TypeFromString(String type)", "full_signature": "public static NamedType TypeFromString(String type)", "class_method_signature": "Rat.TypeFromString(String type)", "testcase": false, "constructor": false}, {"identifier": "ValueFromTypedFraction", "parameters": "(NamedType ntype, BigFraction fvalue)", "modifiers": "public static", "return": "EvaluatableValue", "signature": "EvaluatableValue ValueFromTypedFraction(NamedType ntype, BigFraction fvalue)", "full_signature": "public static EvaluatableValue ValueFromTypedFraction(NamedType ntype, BigFraction fvalue)", "class_method_signature": "Rat.ValueFromTypedFraction(NamedType ntype, BigFraction fvalue)", "testcase": false, "constructor": false}, {"identifier": "ValueFromString", "parameters": "(String type, String value)", "modifiers": "public static", "return": "EvaluatableValue", "signature": "EvaluatableValue ValueFromString(String type, String value)", "full_signature": "public static EvaluatableValue ValueFromString(String type, String value)", "class_method_signature": "Rat.ValueFromString(String type, String value)", "testcase": false, "constructor": false}, {"identifier": "toExpr", "parameters": "(BigFraction x)", "modifiers": "public static", "return": "Expr", "signature": "Expr toExpr(BigFraction x)", "full_signature": "public static Expr toExpr(BigFraction x)", "class_method_signature": "Rat.toExpr(BigFraction x)", "testcase": false, "constructor": false}, {"identifier": "cast", "parameters": "(String name, Type type)", "modifiers": "public static", "return": "Expr", "signature": "Expr cast(String name, Type type)", "full_signature": "public static Expr cast(String name, Type type)", "class_method_signature": "Rat.cast(String name, Type type)", "testcase": false, "constructor": false}, {"identifier": "pubBias", "parameters": "(double rnd, int bias)", "modifiers": "protected static", "return": "double", "signature": "double pubBias(double rnd, int bias)", "full_signature": "protected static double pubBias(double rnd, int bias)", "class_method_signature": "Rat.pubBias(double rnd, int bias)", "testcase": false, "constructor": false}, {"identifier": "bias", "parameters": "(double rnd, int bias)", "modifiers": "private static", "return": "double", "signature": "double bias(double rnd, int bias)", "full_signature": "private static double bias(double rnd, int bias)", "class_method_signature": "Rat.bias(double rnd, int bias)", "testcase": false, "constructor": false}, {"identifier": "biasedRandom", "parameters": "(boolean biased, int bias, BigFraction min, BigFraction max)", "modifiers": "private static", "return": "BigFraction", "signature": "BigFraction biasedRandom(boolean biased, int bias, BigFraction min, BigFraction max)", "full_signature": "private static BigFraction biasedRandom(boolean biased, int bias, BigFraction min, BigFraction max)", "class_method_signature": "Rat.biasedRandom(boolean biased, int bias, BigFraction min, BigFraction max)", "testcase": false, "constructor": false}, {"identifier": "biasedRandom", "parameters": "(Type type, boolean biased, int bias, BigFraction min, BigFraction max)", "modifiers": "public static", "return": "BigFraction", "signature": "BigFraction biasedRandom(Type type, boolean biased, int bias, BigFraction min, BigFraction max)", "full_signature": "public static BigFraction biasedRandom(Type type, boolean biased, int bias, BigFraction min, BigFraction max)", "class_method_signature": "Rat.biasedRandom(Type type, boolean biased, int bias, BigFraction min, BigFraction max)", "testcase": false, "constructor": false}, {"identifier": "roundDown", "parameters": "(BigFraction max)", "modifiers": "public static", "return": "BigFraction", "signature": "BigFraction roundDown(BigFraction max)", "full_signature": "public static BigFraction roundDown(BigFraction max)", "class_method_signature": "Rat.roundDown(BigFraction max)", "testcase": false, "constructor": false}, {"identifier": "roundUp", "parameters": "(BigFraction min)", "modifiers": "public static", "return": "BigFraction", "signature": "BigFraction roundUp(BigFraction min)", "full_signature": "public static BigFraction roundUp(BigFraction min)", "class_method_signature": "Rat.roundUp(BigFraction min)", "testcase": false, "constructor": false}], "file": "fuzzm/fuzzm/src/main/java/fuzzm/util/Rat.java"}, "focal_method": {"identifier": "biasedRandom", "parameters": "(boolean biased, int bias, BigFraction min, BigFraction max)", "modifiers": "private static", "return": "BigFraction", "body": "private static BigFraction biasedRandom(boolean biased, int bias, BigFraction min, BigFraction max) {\n\t\tdouble drnd = biased ? bias(oracle.nextDouble(),bias) : oracle.nextDouble();\n\t\tBigDecimal rnd = BigDecimal.valueOf(drnd);\n\t\tBigFraction r = BigFraction.valueOf(rnd);\n\t\tBigFraction offset = (max.subtract(min)).multiply(r);\n\t\tBigFraction res = min.add(offset);\n\t\treturn res;\n\t}", "signature": "BigFraction biasedRandom(boolean biased, int bias, BigFraction min, BigFraction max)", "full_signature": "private static BigFraction biasedRandom(boolean biased, int bias, BigFraction min, BigFraction max)", "class_method_signature": "Rat.biasedRandom(boolean biased, int bias, BigFraction min, BigFraction max)", "testcase": false, "constructor": false, "invocations": ["bias", "nextDouble", "nextDouble", "valueOf", "valueOf", "multiply", "subtract", "add"]}, "repository": {"repo_id": 122628585, "url": "https://github.com/collins-research/FuzzM", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 5406, "license": "licensed"}}