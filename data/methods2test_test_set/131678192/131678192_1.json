{"test_class": {"identifier": "LwM2MImporterTest", "superclass": "", "interfaces": "", "fields": [], "file": "vorto-importers/lwm2m/lwm2m-importer/src/test/java/org/eclipse/vorto/plugins/importer/example/lwm2m/LwM2MImporterTest.java"}, "test_case": {"identifier": "testConversion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testConversion()throws Exception {\n    final String filename = \"3328_1_1.xml\";\n    \n    InputStream lwm2mXml = Thread.currentThread().getContextClassLoader().getResourceAsStream(filename);    \n    \n    LwM2MImporter importer = new LwM2MImporter();\n    \n    byte[] convertedContent = importer.convert(lwm2mXml);\n    \n    ZipInputStream zis = new ZipInputStream(new ByteArrayInputStream(convertedContent));\n    ZipEntry entry = null;\n    \n    Map<String,byte[]> content = new HashMap<>();\n    while ((entry = zis.getNextEntry()) != null) {\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      IOUtils.copy(zis, baos);\n      content.put(entry.getName(),baos.toByteArray());\n    }\n    \n    assertEquals(2,content.keySet().size());\n    assertTrue(content.keySet().contains(\"Power.fbmodel\"));\n    assertTrue(content.keySet().contains(\"Power.mapping\"));\n    \n    System.out.println(new String(content.get(\"Power.fbmodel\")));\n    System.out.println(new String(content.get(\"Power.mapping\")));\n  }", "signature": "void testConversion()", "full_signature": "@Test public void testConversion()", "class_method_signature": "LwM2MImporterTest.testConversion()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getContextClassLoader", "currentThread", "convert", "getNextEntry", "copy", "put", "getName", "toByteArray", "assertEquals", "size", "keySet", "assertTrue", "contains", "keySet", "assertTrue", "contains", "keySet", "println", "get", "println", "get"]}, "focal_class": {"identifier": "LwM2MImporter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NAMESPACE = \"com.ipso.smartobjects\";", "modifier": "private static final", "type": "String", "declarator": "NAMESPACE = \"com.ipso.smartobjects\"", "var_name": "NAMESPACE"}, {"original_string": "private static final String VERSION = \"1.1.0\";", "modifier": "private static final", "type": "String", "declarator": "VERSION = \"1.1.0\"", "var_name": "VERSION"}, {"original_string": "private static final FunctionblockTemplate FB_TEMPLATE = new FunctionblockTemplate();", "modifier": "private static final", "type": "FunctionblockTemplate", "declarator": "FB_TEMPLATE = new FunctionblockTemplate()", "var_name": "FB_TEMPLATE"}, {"original_string": "private static final MappingTemplate MAPPING_TEMPLATE = new MappingTemplate();", "modifier": "private static final", "type": "MappingTemplate", "declarator": "MAPPING_TEMPLATE = new MappingTemplate()", "var_name": "MAPPING_TEMPLATE"}], "methods": [{"identifier": "validate", "parameters": "(InputStream fileInput)", "modifiers": "public", "return": "ValidationReport", "signature": "ValidationReport validate(InputStream fileInput)", "full_signature": "public ValidationReport validate(InputStream fileInput)", "class_method_signature": "LwM2MImporter.validate(InputStream fileInput)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(InputStream fileInput)", "modifiers": "private", "return": "LWM2M", "signature": "LWM2M parse(InputStream fileInput)", "full_signature": "private LWM2M parse(InputStream fileInput)", "class_method_signature": "LwM2MImporter.parse(InputStream fileInput)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(InputStream fileInput)", "modifiers": "public", "return": "byte[]", "signature": "byte[] convert(InputStream fileInput)", "full_signature": "public byte[] convert(InputStream fileInput)", "class_method_signature": "LwM2MImporter.convert(InputStream fileInput)", "testcase": false, "constructor": false}, {"identifier": "createModelId", "parameters": "(Object obj)", "modifiers": "private", "return": "ModelId", "signature": "ModelId createModelId(Object obj)", "full_signature": "private ModelId createModelId(Object obj)", "class_method_signature": "LwM2MImporter.createModelId(Object obj)", "testcase": false, "constructor": false}, {"identifier": "parseId", "parameters": "(String name)", "modifiers": "private", "return": "String", "signature": "String parseId(String name)", "full_signature": "private String parseId(String name)", "class_method_signature": "LwM2MImporter.parseId(String name)", "testcase": false, "constructor": false}], "file": "vorto-importers/lwm2m/lwm2m-importer/src/main/java/org/eclipse/vorto/plugins/importer/example/lwm2m/LwM2MImporter.java"}, "focal_method": {"identifier": "convert", "parameters": "(InputStream fileInput)", "modifiers": "public", "return": "byte[]", "body": "public byte[] convert(InputStream fileInput) {\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tZipOutputStream zip = new ZipOutputStream(baos);\n\n\t\ttry {\n\t\t\tLWM2M lwm2m = parse(fileInput);\n\n\t\t\ttry {\n\t\t\t\tfor (LWM2M.Object obj : lwm2m.getObject()) {\n\n\t\t\t\t\tfinal ModelId modelId = createModelId(obj);\n\n\t\t\t\t\tZipEntry fbEntry = new ZipEntry(modelId.getName() + \".fbmodel\");\n\t\t\t\t\tzip.putNextEntry(fbEntry);\n\t\t\t\t\tzip.write(FB_TEMPLATE.create(obj, modelId).getBytes());\n\t\t\t\t\tzip.closeEntry();\n\n\t\t\t\t\tZipEntry mappingEntry = new ZipEntry(modelId.getName() + \".mapping\");\n\t\t\t\t\tzip.putNextEntry(mappingEntry);\n\t\t\t\t\tzip.write(MAPPING_TEMPLATE.create(obj, modelId).getBytes());\n\t\t\t\t\tzip.closeEntry();\n\t\t\t\t}\n\t\t\t} catch (Exception ex) {\n\t\t\t\tex.printStackTrace();\n\t\t\t} finally {\n\t\t\t\tif (zip != null) {\n\t\t\t\t\tzip.close();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn baos.toByteArray();\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t} finally {\n\t\t\tif (baos != null) {\n\t\t\t\ttry {\n\t\t\t\t\tbaos.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "signature": "byte[] convert(InputStream fileInput)", "full_signature": "public byte[] convert(InputStream fileInput)", "class_method_signature": "LwM2MImporter.convert(InputStream fileInput)", "testcase": false, "constructor": false, "invocations": ["parse", "getObject", "createModelId", "getName", "putNextEntry", "write", "getBytes", "create", "closeEntry", "getName", "putNextEntry", "write", "getBytes", "create", "closeEntry", "printStackTrace", "close", "toByteArray", "close", "printStackTrace"]}, "repository": {"repo_id": 131678192, "url": "https://github.com/eclipse/vorto-examples", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 14, "size": 127019, "license": "licensed"}}