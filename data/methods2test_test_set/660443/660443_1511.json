{"test_class": {"identifier": "GravitationalIndexDescriptorTest", "superclass": "extends MolecularDescriptorTest", "interfaces": "", "fields": [], "file": "descriptor/qsarmolecular/src/test/java/org/openscience/cdk/qsar/descriptors/molecular/GravitationalIndexDescriptorTest.java"}, "test_case": {"identifier": "testGravitationalIndex", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGravitationalIndex() throws ClassNotFoundException, CDKException, java.lang.Exception {\n        String filename = \"data/hin/gravindex.hin\";\n        InputStream ins = this.getClass().getClassLoader().getResourceAsStream(filename);\n        ISimpleChemObjectReader reader = new HINReader(ins);\n        ChemFile content = (ChemFile) reader.read((ChemObject) new ChemFile());\n        List cList = ChemFileManipulator.getAllAtomContainers(content);\n        IAtomContainer ac = (IAtomContainer) cList.get(0);\n\n        DoubleArrayResult retval = (DoubleArrayResult) descriptor.calculate(ac).getValue();\n\n        Assert.assertEquals(1756.5060703860984, retval.get(0), 0.00000001);\n        Assert.assertEquals(41.91069159994975, retval.get(1), 0.00000001);\n        Assert.assertEquals(12.06562671430088, retval.get(2), 0.00000001);\n        Assert.assertEquals(1976.6432599699767, retval.get(3), 0.00000001);\n        Assert.assertEquals(44.45945636161082, retval.get(4), 0.00000001);\n        Assert.assertEquals(12.549972243701887, retval.get(5), 0.00000001);\n        Assert.assertEquals(4333.097373073368, retval.get(6), 0.00000001);\n        Assert.assertEquals(65.82626658920714, retval.get(7), 0.00000001);\n        Assert.assertEquals(16.302948232909483, retval.get(8), 0.00000001);\n    }", "signature": "void testGravitationalIndex()", "full_signature": "@Test public void testGravitationalIndex()", "class_method_signature": "GravitationalIndexDescriptorTest.testGravitationalIndex()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClassLoader", "getClass", "read", "getAllAtomContainers", "get", "getValue", "calculate", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "GravitationalIndexDescriptor", "superclass": "extends AbstractMolecularDescriptor", "interfaces": "implements IMolecularDescriptor", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(GravitationalIndexDescriptor.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(GravitationalIndexDescriptor.class)", "var_name": "logger"}, {"original_string": "private static final String[] NAMES = {\"GRAV-1\", \"GRAV-2\", \"GRAV-3\", \"GRAVH-1\", \"GRAVH-2\", \"GRAVH-3\", \"GRAV-4\",\n            \"GRAV-5\", \"GRAV-6\"          };", "modifier": "private static final", "type": "String[]", "declarator": "NAMES = {\"GRAV-1\", \"GRAV-2\", \"GRAV-3\", \"GRAVH-1\", \"GRAVH-2\", \"GRAVH-3\", \"GRAV-4\",\n            \"GRAV-5\", \"GRAV-6\"          }", "var_name": "NAMES"}], "methods": [{"identifier": "GravitationalIndexDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " GravitationalIndexDescriptor()", "full_signature": "public  GravitationalIndexDescriptor()", "class_method_signature": "GravitationalIndexDescriptor.GravitationalIndexDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "GravitationalIndexDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "GravitationalIndexDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "GravitationalIndexDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "GravitationalIndexDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "GravitationalIndexDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "GravitationalIndexDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}, {"identifier": "getDummyDescriptorValue", "parameters": "(Exception e)", "modifiers": "private", "return": "DescriptorValue", "signature": "DescriptorValue getDummyDescriptorValue(Exception e)", "full_signature": "private DescriptorValue getDummyDescriptorValue(Exception e)", "class_method_signature": "GravitationalIndexDescriptor.getDummyDescriptorValue(Exception e)", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "GravitationalIndexDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getDescriptorResultType", "parameters": "()", "modifiers": "@Override public", "return": "IDescriptorResult", "signature": "IDescriptorResult getDescriptorResultType()", "full_signature": "@Override public IDescriptorResult getDescriptorResultType()", "class_method_signature": "GravitationalIndexDescriptor.getDescriptorResultType()", "testcase": false, "constructor": false}], "file": "descriptor/qsarmolecular/src/main/java/org/openscience/cdk/qsar/descriptors/molecular/GravitationalIndexDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtomContainer container) {\n        if (!GeometryUtil.has3DCoordinates(container))\n            return getDummyDescriptorValue(new CDKException(\"Molecule must have 3D coordinates\"));\n\n        IsotopeFactory factory = null;\n        double mass1;\n        double mass2;\n        try {\n            factory = Isotopes.getInstance();\n        } catch (Exception e) {\n            logger.debug(e);\n        }\n\n        double sum = 0;\n        for (int i = 0; i < container.getBondCount(); i++) {\n            IBond bond = container.getBond(i);\n\n            if (bond.getAtomCount() != 2) {\n                return getDummyDescriptorValue(new CDKException(\"GravitationalIndex: Only handles 2 center bonds\"));\n            }\n\n            mass1 = factory.getMajorIsotope(bond.getBegin().getSymbol()).getMassNumber();\n            mass2 = factory.getMajorIsotope(bond.getEnd().getSymbol()).getMassNumber();\n\n            Point3d p1 = bond.getBegin().getPoint3d();\n            Point3d p2 = bond.getEnd().getPoint3d();\n\n            double x1 = p1.x;\n            double y1 = p1.y;\n            double z1 = p1.z;\n            double x2 = p2.x;\n            double y2 = p2.y;\n            double z2 = p2.z;\n\n            double dist = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);\n            sum += (mass1 * mass2) / dist;\n        }\n\n        // heavy atoms only\n        double heavysum = 0;\n        for (int i = 0; i < container.getBondCount(); i++) {\n            IBond b = container.getBond(i);\n\n            if (b.getAtomCount() != 2) {\n                return getDummyDescriptorValue(new CDKException(\"GravitationalIndex: Only handles 2 center bonds\"));\n            }\n\n            if (b.getBegin().getAtomicNumber() == IElement.H || b.getEnd().getAtomicNumber() == IElement.H) continue;\n\n            mass1 = factory.getMajorIsotope(b.getBegin().getSymbol()).getMassNumber();\n            mass2 = factory.getMajorIsotope(b.getEnd().getSymbol()).getMassNumber();\n\n            Point3d point0 = b.getBegin().getPoint3d();\n            Point3d point1 = b.getEnd().getPoint3d();\n\n            double x1 = point0.x;\n            double y1 = point0.y;\n            double z1 = point0.z;\n            double x2 = point1.x;\n            double y2 = point1.y;\n            double z2 = point1.z;\n\n            double dist = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);\n            heavysum += (mass1 * mass2) / dist;\n        }\n\n        // all pairs\n        ArrayList<Integer> x = new ArrayList<Integer>();\n        for (int i = 0; i < container.getAtomCount(); i++) {\n            if (container.getAtom(i).getAtomicNumber() != IElement.H) x.add(i);\n        }\n        int npair = x.size() * (x.size() - 1) / 2;\n        pair[] p = new pair[npair];\n        for (int i = 0; i < npair; i++)\n            p[i] = new pair();\n        int pcount = 0;\n        for (int i = 0; i < x.size() - 1; i++) {\n            for (int j = i + 1; j < x.size(); j++) {\n                int present = 0;\n                int a = x.get(i);\n                int b = x.get(j);\n                for (int k = 0; k < pcount; k++) {\n                    if ((p[k].x == a && p[k].y == b) || (p[k].y == a && p[k].x == b)) present = 1;\n                }\n                if (present == 1) continue;\n                p[pcount].x = a;\n                p[pcount].y = b;\n                pcount += 1;\n            }\n        }\n        double allheavysum = 0;\n        for (pair aP : p) {\n            int atomNumber1 = aP.x;\n            int atomNumber2 = aP.y;\n\n            mass1 = factory.getMajorIsotope(container.getAtom(atomNumber1).getSymbol()).getMassNumber();\n            mass2 = factory.getMajorIsotope(container.getAtom(atomNumber2).getSymbol()).getMassNumber();\n\n            double x1 = container.getAtom(atomNumber1).getPoint3d().x;\n            double y1 = container.getAtom(atomNumber1).getPoint3d().y;\n            double z1 = container.getAtom(atomNumber1).getPoint3d().z;\n            double x2 = container.getAtom(atomNumber2).getPoint3d().x;\n            double y2 = container.getAtom(atomNumber2).getPoint3d().y;\n            double z2 = container.getAtom(atomNumber2).getPoint3d().z;\n\n            double dist = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) + (z1 - z2) * (z1 - z2);\n            allheavysum += (mass1 * mass2) / dist;\n        }\n\n        DoubleArrayResult retval = new DoubleArrayResult(9);\n        retval.add(heavysum);\n        retval.add(Math.sqrt(heavysum));\n        retval.add(Math.pow(heavysum, 1.0 / 3.0));\n\n        retval.add(sum);\n        retval.add(Math.sqrt(sum));\n        retval.add(Math.pow(sum, 1.0 / 3.0));\n\n        retval.add(allheavysum);\n        retval.add(Math.sqrt(allheavysum));\n        retval.add(Math.pow(allheavysum, 1.0 / 3.0));\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), retval,\n                getDescriptorNames());\n    }", "signature": "DescriptorValue calculate(IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtomContainer container)", "class_method_signature": "GravitationalIndexDescriptor.calculate(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["has3DCoordinates", "getDummyDescriptorValue", "getInstance", "debug", "getBondCount", "getBond", "getAtomCount", "getDummyDescriptorValue", "getMassNumber", "getMajorIsotope", "getSymbol", "getBegin", "getMassNumber", "getMajorIsotope", "getSymbol", "getEnd", "getPoint3d", "getBegin", "getPoint3d", "getEnd", "getBondCount", "getBond", "getAtomCount", "getDummyDescriptorValue", "getAtomicNumber", "getBegin", "getAtomicNumber", "getEnd", "getMassNumber", "getMajorIsotope", "getSymbol", "getBegin", "getMassNumber", "getMajorIsotope", "getSymbol", "getEnd", "getPoint3d", "getBegin", "getPoint3d", "getEnd", "getAtomCount", "getAtomicNumber", "getAtom", "add", "size", "size", "size", "size", "get", "get", "getMassNumber", "getMajorIsotope", "getSymbol", "getAtom", "getMassNumber", "getMajorIsotope", "getSymbol", "getAtom", "getPoint3d", "getAtom", "getPoint3d", "getAtom", "getPoint3d", "getAtom", "getPoint3d", "getAtom", "getPoint3d", "getAtom", "getPoint3d", "getAtom", "add", "add", "sqrt", "add", "pow", "add", "add", "sqrt", "add", "pow", "add", "add", "sqrt", "add", "pow", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}