{"test_class": {"identifier": "GaseousAbsorptionAlgoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GaseousAbsorptionAlgo gaseousAbsorptionAlgo;", "modifier": "private", "type": "GaseousAbsorptionAlgo", "declarator": "gaseousAbsorptionAlgo", "var_name": "gaseousAbsorptionAlgo"}], "file": "s3tbx-olci-radiometry/src/test/java/org/esa/s3tbx/olci/radiometry/gasabsorption/GaseousAbsorptionAlgoTest.java"}, "test_case": {"identifier": "testGetTransmissionGasKnownBand", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetTransmissionGasKnownBand() {\n        GaseousAbsorptionAlgo algorithm = new GaseousAbsorptionAlgo();\n        float[] oza = {4, 5, 6};\n        float[] sza = {1, 2, 3};\n        float[] oa01_radians = algorithm.getTransmissionGas(\"gaseous_absorp_01\", sza, oza);\n        assertEquals(3, oa01_radians.length);\n        assertEquals(0.13498464f, oa01_radians[0], 1.0e-6);\n        assertEquals(0.13473716f, oa01_radians[1], 1.0e-6);\n        assertEquals(0.1344073f, oa01_radians[2], 1.0e-6);\n    }", "signature": "void testGetTransmissionGasKnownBand()", "full_signature": "@Test public void testGetTransmissionGasKnownBand()", "class_method_signature": "GaseousAbsorptionAlgoTest.testGetTransmissionGasKnownBand()", "testcase": true, "constructor": false, "invocations": ["getTransmissionGas", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "GaseousAbsorptionAlgo", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getAtmosphericGas", "parameters": "(String bandName)", "modifiers": "private", "return": "float", "signature": "float getAtmosphericGas(String bandName)", "full_signature": "private float getAtmosphericGas(String bandName)", "class_method_signature": "GaseousAbsorptionAlgo.getAtmosphericGas(String bandName)", "testcase": false, "constructor": false}, {"identifier": "getNormalizedConcentration", "parameters": "(String bandName)", "modifiers": "private", "return": "float", "signature": "float getNormalizedConcentration(String bandName)", "full_signature": "private float getNormalizedConcentration(String bandName)", "class_method_signature": "GaseousAbsorptionAlgo.getNormalizedConcentration(String bandName)", "testcase": false, "constructor": false}, {"identifier": "getExponential", "parameters": "(float atmosphericGas, float normConcentration, float massAir)", "modifiers": "", "return": "float", "signature": "float getExponential(float atmosphericGas, float normConcentration, float massAir)", "full_signature": " float getExponential(float atmosphericGas, float normConcentration, float massAir)", "class_method_signature": "GaseousAbsorptionAlgo.getExponential(float atmosphericGas, float normConcentration, float massAir)", "testcase": false, "constructor": false}, {"identifier": "gasToComputeForBand", "parameters": "(String bandName)", "modifiers": "", "return": "String[]", "signature": "String[] gasToComputeForBand(String bandName)", "full_signature": " String[] gasToComputeForBand(String bandName)", "class_method_signature": "GaseousAbsorptionAlgo.gasToComputeForBand(String bandName)", "testcase": false, "constructor": false}, {"identifier": "getMassAir", "parameters": "(float[] sza, float[] oza)", "modifiers": "", "return": "float[]", "signature": "float[] getMassAir(float[] sza, float[] oza)", "full_signature": " float[] getMassAir(float[] sza, float[] oza)", "class_method_signature": "GaseousAbsorptionAlgo.getMassAir(float[] sza, float[] oza)", "testcase": false, "constructor": false}, {"identifier": "getMassAir", "parameters": "(float szaRad, float ozaRad)", "modifiers": "private static", "return": "float", "signature": "float getMassAir(float szaRad, float ozaRad)", "full_signature": "private static float getMassAir(float szaRad, float ozaRad)", "class_method_signature": "GaseousAbsorptionAlgo.getMassAir(float szaRad, float ozaRad)", "testcase": false, "constructor": false}, {"identifier": "getTransmissionGas", "parameters": "(String bandName, float[] sza, float[] oza)", "modifiers": "", "return": "float[]", "signature": "float[] getTransmissionGas(String bandName, float[] sza, float[] oza)", "full_signature": " float[] getTransmissionGas(String bandName, float[] sza, float[] oza)", "class_method_signature": "GaseousAbsorptionAlgo.getTransmissionGas(String bandName, float[] sza, float[] oza)", "testcase": false, "constructor": false}], "file": "s3tbx-olci-radiometry/src/main/java/org/esa/s3tbx/olci/radiometry/gasabsorption/GaseousAbsorptionAlgo.java"}, "focal_method": {"identifier": "getTransmissionGas", "parameters": "(String bandName, float[] sza, float[] oza)", "modifiers": "", "return": "float[]", "body": "float[] getTransmissionGas(String bandName, float[] sza, float[] oza) {\n        float[] calMassAirs = getMassAir(sza, oza);\n        String[] gasesToCompute = gasToComputeForBand(bandName);\n\n        final ArrayList<float[]> arrayListExponential = new ArrayList<>();\n\n        for (String gas : gasesToCompute) {\n            final float calAtmosphericGas = getAtmosphericGas(gas);\n            final float normalizedConcentration = getNormalizedConcentration(gas);\n            final float[] calExponential = new float[oza.length];\n\n            for (int i = 0; i < sza.length; i++) {\n                calExponential[i] = getExponential(calAtmosphericGas, normalizedConcentration, calMassAirs[i]);\n            }\n            arrayListExponential.add(calExponential);\n        }\n\n        final int size = arrayListExponential.size();\n        float[] transmissionGas = new float[0];\n        if (size == 1) {\n            transmissionGas = arrayListExponential.get(0);\n        } else if (size == 2) {\n            transmissionGas = SmileCorrectionUtils.multiple2ArrayFloat(arrayListExponential.get(0), arrayListExponential.get(1));\n        } else if (size == 3) {\n            transmissionGas = SmileCorrectionUtils.multiple3ArrayFloat(arrayListExponential.get(0), arrayListExponential.get(1), arrayListExponential.get(2));\n        }\n        return transmissionGas;\n    }", "signature": "float[] getTransmissionGas(String bandName, float[] sza, float[] oza)", "full_signature": " float[] getTransmissionGas(String bandName, float[] sza, float[] oza)", "class_method_signature": "GaseousAbsorptionAlgo.getTransmissionGas(String bandName, float[] sza, float[] oza)", "testcase": false, "constructor": false, "invocations": ["getMassAir", "gasToComputeForBand", "getAtmosphericGas", "getNormalizedConcentration", "getExponential", "add", "size", "get", "multiple2ArrayFloat", "get", "get", "multiple3ArrayFloat", "get", "get", "get"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}