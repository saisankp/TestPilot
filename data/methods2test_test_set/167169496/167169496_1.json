{"test_class": {"identifier": "DispatcherTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/ji/core/DispatcherTest.java"}, "test_case": {"identifier": "should_handle_default", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_handle_default() {\n        assertNull(Dispatcher.execute(\"x\"));\n    }", "signature": "void should_handle_default()", "full_signature": "@Test public void should_handle_default()", "class_method_signature": "DispatcherTest.should_handle_default()", "testcase": true, "constructor": false, "invocations": ["assertNull", "execute"]}, "focal_class": {"identifier": "Dispatcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final AtomicReference<Map<String, Handler>> ref = new AtomicReference<>(Collections.emptyMap());", "modifier": "private static final", "type": "AtomicReference<Map<String, Handler>>", "declarator": "ref = new AtomicReference<>(Collections.emptyMap())", "var_name": "ref"}], "methods": [{"identifier": "register", "parameters": "(String name, Handler handler)", "modifiers": "static", "return": "void", "signature": "void register(String name, Handler handler)", "full_signature": "static void register(String name, Handler handler)", "class_method_signature": "Dispatcher.register(String name, Handler handler)", "testcase": false, "constructor": false}, {"identifier": "registerAll", "parameters": "(Map<String, Handler> handlers)", "modifiers": "static", "return": "void", "signature": "void registerAll(Map<String, Handler> handlers)", "full_signature": "static void registerAll(Map<String, Handler> handlers)", "class_method_signature": "Dispatcher.registerAll(Map<String, Handler> handlers)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(Map<String, Handler> cur, Map<String, Handler> handlers)", "modifiers": "private static", "return": "Map<String, Handler>", "signature": "Map<String, Handler> update(Map<String, Handler> cur, Map<String, Handler> handlers)", "full_signature": "private static Map<String, Handler> update(Map<String, Handler> cur, Map<String, Handler> handlers)", "class_method_signature": "Dispatcher.update(Map<String, Handler> cur, Map<String, Handler> handlers)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(String name, Object... args)", "modifiers": "public static", "return": "Object", "signature": "Object execute(String name, Object... args)", "full_signature": "public static Object execute(String name, Object... args)", "class_method_signature": "Dispatcher.execute(String name, Object... args)", "testcase": false, "constructor": false}, {"identifier": "Dispatcher", "parameters": "()", "modifiers": "private", "return": "", "signature": " Dispatcher()", "full_signature": "private  Dispatcher()", "class_method_signature": "Dispatcher.Dispatcher()", "testcase": false, "constructor": true}], "file": "core/src/main/java/ji/core/Dispatcher.java"}, "focal_method": {"identifier": "execute", "parameters": "(String name, Object... args)", "modifiers": "public static", "return": "Object", "body": "public static Object execute(String name, Object... args) {\n        final Handler handler = ref.get().get(name);\n        if (handler == null) {\n            return DefaultHandler.INSTANCE.execute(args);\n        } else {\n            return handler.execute(args);\n        }\n    }", "signature": "Object execute(String name, Object... args)", "full_signature": "public static Object execute(String name, Object... args)", "class_method_signature": "Dispatcher.execute(String name, Object... args)", "testcase": false, "constructor": false, "invocations": ["get", "get", "execute", "execute"]}, "repository": {"repo_id": 167169496, "url": "https://github.com/jiboard/ji", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 109, "license": "licensed"}}