{"test_class": {"identifier": "ByteArrayConverterTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtss/src/test/java/ec/tss/tsproviders/utils/ByteArrayConverterTest.java"}, "test_case": {"identifier": "testInstance", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"null\") public", "return": "void", "body": "@Test\n    @SuppressWarnings(\"null\")\n    public void testInstance() {\n        Assertions.assertThatThrownBy(() -> ByteArrayConverter.setInstance(null))\n                .isInstanceOf(NullPointerException.class);\n\n        ByteArrayConverter c1 = new ByteArrayConverter() {\n            @Override\n            public byte[] fromDoubleArray(double[] input) {\n                throw new RuntimeException();\n            }\n        };\n        Assertions.assertThatThrownBy(() -> ByteArrayConverter.setInstance(c1))\n                .isInstanceOf(IllegalArgumentException.class)\n                .hasCauseInstanceOf(RuntimeException.class);\n\n        ByteArrayConverter c2 = new ByteArrayConverter() {\n            @Override\n            public double[] toDoubleArray(byte[] input) {\n                return new double[0];\n            }\n        };\n        Assertions.assertThatThrownBy(() -> ByteArrayConverter.setInstance(c2))\n                .isInstanceOf(IllegalArgumentException.class)\n                .hasNoCause();\n    }", "signature": "void testInstance()", "full_signature": "@Test @SuppressWarnings(\"null\") public void testInstance()", "class_method_signature": "ByteArrayConverterTest.testInstance()", "testcase": true, "constructor": false, "invocations": ["isInstanceOf", "assertThatThrownBy", "setInstance", "hasCauseInstanceOf", "isInstanceOf", "assertThatThrownBy", "setInstance", "hasNoCause", "isInstanceOf", "assertThatThrownBy", "setInstance"]}, "focal_class": {"identifier": "ByteArrayConverter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final AtomicReference<ByteArrayConverter> INSTANCE = new AtomicReference<>(getDefault());", "modifier": "private static final", "type": "AtomicReference<ByteArrayConverter>", "declarator": "INSTANCE = new AtomicReference<>(getDefault())", "var_name": "INSTANCE"}], "methods": [{"identifier": "getInstance", "parameters": "()", "modifiers": "@NonNull public static final", "return": "ByteArrayConverter", "signature": "ByteArrayConverter getInstance()", "full_signature": "@NonNull public static final ByteArrayConverter getInstance()", "class_method_signature": "ByteArrayConverter.getInstance()", "testcase": false, "constructor": false}, {"identifier": "setInstance", "parameters": "(@NonNull ByteArrayConverter s)", "modifiers": "public static final", "return": "void", "signature": "void setInstance(@NonNull ByteArrayConverter s)", "full_signature": "public static final void setInstance(@NonNull ByteArrayConverter s)", "class_method_signature": "ByteArrayConverter.setInstance(@NonNull ByteArrayConverter s)", "testcase": false, "constructor": false}, {"identifier": "fromDoubleArray", "parameters": "(@NonNull double[] input)", "modifiers": "@NonNull @NewObject public", "return": "byte[]", "signature": "byte[] fromDoubleArray(@NonNull double[] input)", "full_signature": "@NonNull @NewObject public byte[] fromDoubleArray(@NonNull double[] input)", "class_method_signature": "ByteArrayConverter.fromDoubleArray(@NonNull double[] input)", "testcase": false, "constructor": false}, {"identifier": "toDoubleArray", "parameters": "(@NonNull byte[] input)", "modifiers": "@NonNull @NewObject public", "return": "double[]", "signature": "double[] toDoubleArray(@NonNull byte[] input)", "full_signature": "@NonNull @NewObject public double[] toDoubleArray(@NonNull byte[] input)", "class_method_signature": "ByteArrayConverter.toDoubleArray(@NonNull byte[] input)", "testcase": false, "constructor": false}, {"identifier": "getDefault", "parameters": "()", "modifiers": "@NonNull public static final", "return": "ByteArrayConverter", "signature": "ByteArrayConverter getDefault()", "full_signature": "@NonNull public static final ByteArrayConverter getDefault()", "class_method_signature": "ByteArrayConverter.getDefault()", "testcase": false, "constructor": false}, {"identifier": "getDeflate", "parameters": "(int level, boolean nowrap)", "modifiers": "@NonNull public static final", "return": "ByteArrayConverter", "signature": "ByteArrayConverter getDeflate(int level, boolean nowrap)", "full_signature": "@NonNull public static final ByteArrayConverter getDeflate(int level, boolean nowrap)", "class_method_signature": "ByteArrayConverter.getDeflate(int level, boolean nowrap)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(ByteArrayConverter converter)", "modifiers": "private static", "return": "ByteArrayConverter", "signature": "ByteArrayConverter check(ByteArrayConverter converter)", "full_signature": "private static ByteArrayConverter check(ByteArrayConverter converter)", "class_method_signature": "ByteArrayConverter.check(ByteArrayConverter converter)", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/tss/tsproviders/utils/ByteArrayConverter.java"}, "focal_method": {"identifier": "setInstance", "parameters": "(@NonNull ByteArrayConverter s)", "modifiers": "public static final", "return": "void", "body": "public static final void setInstance(@NonNull ByteArrayConverter s) throws IllegalArgumentException {\n        INSTANCE.set(check(Objects.requireNonNull(s)));\n    }", "signature": "void setInstance(@NonNull ByteArrayConverter s)", "full_signature": "public static final void setInstance(@NonNull ByteArrayConverter s)", "class_method_signature": "ByteArrayConverter.setInstance(@NonNull ByteArrayConverter s)", "testcase": false, "constructor": false, "invocations": ["set", "check", "requireNonNull"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}