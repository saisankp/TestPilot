{"test_class": {"identifier": "DisposableSubscriberTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/subscribers/DisposableSubscriberTest.java"}, "test_case": {"identifier": "dispose", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void dispose() {\n        TestDisposableSubscriber<Integer> tc = new TestDisposableSubscriber<Integer>();\n\n        assertFalse(tc.isDisposed());\n\n        tc.dispose();\n\n        assertTrue(tc.isDisposed());\n\n        BooleanSubscription d = new BooleanSubscription();\n\n        tc.onSubscribe(d);\n\n        assertTrue(d.isCancelled());\n\n        assertEquals(0, tc.start);\n    }", "signature": "void dispose()", "full_signature": "@Test public void dispose()", "class_method_signature": "DisposableSubscriberTest.dispose()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isDisposed", "dispose", "assertTrue", "isDisposed", "onSubscribe", "assertTrue", "isCancelled", "assertEquals"]}, "focal_class": {"identifier": "DisposableSubscriber", "superclass": "", "interfaces": "implements FlowableSubscriber<T>, Disposable", "fields": [{"original_string": "final AtomicReference<Subscription> s = new AtomicReference<Subscription>();", "modifier": "final", "type": "AtomicReference<Subscription>", "declarator": "s = new AtomicReference<Subscription>()", "var_name": "s"}], "methods": [{"identifier": "onSubscribe", "parameters": "(Subscription s)", "modifiers": "@Override public final", "return": "void", "signature": "void onSubscribe(Subscription s)", "full_signature": "@Override public final void onSubscribe(Subscription s)", "class_method_signature": "DisposableSubscriber.onSubscribe(Subscription s)", "testcase": false, "constructor": false}, {"identifier": "onStart", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void onStart()", "full_signature": "protected void onStart()", "class_method_signature": "DisposableSubscriber.onStart()", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(long n)", "modifiers": "protected final", "return": "void", "signature": "void request(long n)", "full_signature": "protected final void request(long n)", "class_method_signature": "DisposableSubscriber.request(long n)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "()", "modifiers": "protected final", "return": "void", "signature": "void cancel()", "full_signature": "protected final void cancel()", "class_method_signature": "DisposableSubscriber.cancel()", "testcase": false, "constructor": false}, {"identifier": "isDisposed", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean isDisposed()", "full_signature": "@Override public final boolean isDisposed()", "class_method_signature": "DisposableSubscriber.isDisposed()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public final", "return": "void", "signature": "void dispose()", "full_signature": "@Override public final void dispose()", "class_method_signature": "DisposableSubscriber.dispose()", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/subscribers/DisposableSubscriber.java"}, "focal_method": {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public final", "return": "void", "body": "@Override\n    public final void dispose() {\n        SubscriptionHelper.cancel(s);\n    }", "signature": "void dispose()", "full_signature": "@Override public final void dispose()", "class_method_signature": "DisposableSubscriber.dispose()", "testcase": false, "constructor": false, "invocations": ["cancel"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}