{"test_class": {"identifier": "DirichletKernelTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/maths/special/DirichletKernelTest.java"}, "test_case": {"identifier": "testSomeMethod", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSomeMethod() {\n        int N=180;\n        DirichletKernel dk=new DirichletKernel(N);\n        double step=Math.PI*2/N;\n        double z=0;\n        for (int i=1; i<20; ++i){\n            double k=dk.fn(step*i);\n            z+=k*k*step*Math.PI*2;\n        }\n//        double dn=N;\n//        for (int i=20; i<N/2; ++i){\n//            double k=dk.fn(step*i);\n//            z+=k*k*step*Math.PI*2;\n//            System.out.print(z);\n//            System.out.print('\\t');\n//            System.out.println(i/dn);\n//        }\n    }", "signature": "void testSomeMethod()", "full_signature": "@Test public void testSomeMethod()", "class_method_signature": "DirichletKernelTest.testSomeMethod()", "testcase": true, "constructor": false, "invocations": ["fn"]}, "focal_class": {"identifier": "DirichletKernel", "superclass": "", "interfaces": "implements IRealFunction", "fields": [{"original_string": "private static final double TWOPI = 2 * Math.PI, EPS = 1e-9;", "modifier": "private static final", "type": "double", "declarator": "TWOPI = 2 * Math.PI", "var_name": "TWOPI"}, {"original_string": "private final int n_, m_;", "modifier": "private final", "type": "int", "declarator": "n_", "var_name": "n_"}, {"original_string": "private final double mc_;", "modifier": "private final", "type": "double", "declarator": "mc_", "var_name": "mc_"}], "methods": [{"identifier": "mpi", "parameters": "(double x)", "modifiers": "private", "return": "boolean", "signature": "boolean mpi(double x)", "full_signature": "private boolean mpi(double x)", "class_method_signature": "DirichletKernel.mpi(double x)", "testcase": false, "constructor": false}, {"identifier": "DirichletKernel", "parameters": "(int n)", "modifiers": "public", "return": "", "signature": " DirichletKernel(int n)", "full_signature": "public  DirichletKernel(int n)", "class_method_signature": "DirichletKernel.DirichletKernel(int n)", "testcase": false, "constructor": true}, {"identifier": "getN", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getN()", "full_signature": "public int getN()", "class_method_signature": "DirichletKernel.getN()", "testcase": false, "constructor": false}, {"identifier": "fn", "parameters": "(final double x)", "modifiers": "@Override public", "return": "double", "signature": "double fn(final double x)", "full_signature": "@Override public double fn(final double x)", "class_method_signature": "DirichletKernel.fn(final double x)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/maths/special/DirichletKernel.java"}, "focal_method": {"identifier": "fn", "parameters": "(final double x)", "modifiers": "@Override public", "return": "double", "body": "@Override\n    public double fn(final double x) {\n        double x2 = x * .5;\n        if (mpi(x2)) {\n            return mc_;\n        } else {\n            return (Math.sin(m_ * x2) / Math.sin(x2)) / TWOPI;\n        }\n    }", "signature": "double fn(final double x)", "full_signature": "@Override public double fn(final double x)", "class_method_signature": "DirichletKernel.fn(final double x)", "testcase": false, "constructor": false, "invocations": ["mpi", "sin", "sin"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}