{"test_class": {"identifier": "TransformersValidationTest", "superclass": "extends AbstractValidationTest", "interfaces": "", "fields": [{"original_string": "private final double rho = 1.034;", "modifier": "private final", "type": "double", "declarator": "rho = 1.034", "var_name": "rho"}, {"original_string": "private final double rhoPreviousStep = 1.043;", "modifier": "private final", "type": "double", "declarator": "rhoPreviousStep = 1.043", "var_name": "rhoPreviousStep"}, {"original_string": "private final double rhoNextStep = 1.024;", "modifier": "private final", "type": "double", "declarator": "rhoNextStep = 1.024", "var_name": "rhoNextStep"}, {"original_string": "private final int tapPosition = 8;", "modifier": "private final", "type": "int", "declarator": "tapPosition = 8", "var_name": "tapPosition"}, {"original_string": "private final int lowTapPosition = 0;", "modifier": "private final", "type": "int", "declarator": "lowTapPosition = 0", "var_name": "lowTapPosition"}, {"original_string": "private final int highTapPosition = 30;", "modifier": "private final", "type": "int", "declarator": "highTapPosition = 30", "var_name": "highTapPosition"}, {"original_string": "private final double targetV = 92.7781;", "modifier": "private final", "type": "double", "declarator": "targetV = 92.7781", "var_name": "targetV"}, {"original_string": "private final Side regulatedSide = Side.ONE;", "modifier": "private final", "type": "Side", "declarator": "regulatedSide = Side.ONE", "var_name": "regulatedSide"}, {"original_string": "private final double v = 92.8007;", "modifier": "private final", "type": "double", "declarator": "v = 92.8007", "var_name": "v"}, {"original_string": "private final double lowV = 88.13;", "modifier": "private final", "type": "double", "declarator": "lowV = 88.13", "var_name": "lowV"}, {"original_string": "private final double highV = 97.342;", "modifier": "private final", "type": "double", "declarator": "highV = 97.342", "var_name": "highV"}, {"original_string": "private final boolean connected = true;", "modifier": "private final", "type": "boolean", "declarator": "connected = true", "var_name": "connected"}, {"original_string": "private final boolean mainComponent = true;", "modifier": "private final", "type": "boolean", "declarator": "mainComponent = true", "var_name": "mainComponent"}, {"original_string": "private TwoWindingsTransformer transformer;", "modifier": "private", "type": "TwoWindingsTransformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "private Bus bus;", "modifier": "private", "type": "Bus", "declarator": "bus", "var_name": "bus"}], "file": "loadflow/loadflow-validation/src/test/java/com/powsybl/loadflow/validation/TransformersValidationTest.java"}, "test_case": {"identifier": "checkTwts", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkTwts() {\n        assertTrue(TransformersValidation.INSTANCE.checkTransformer(transformer, strictConfig, NullWriter.NULL_WRITER));\n        Mockito.when(bus.getV()).thenReturn(highV);\n        assertFalse(TransformersValidation.INSTANCE.checkTransformer(transformer, strictConfig, NullWriter.NULL_WRITER));\n    }", "signature": "void checkTwts()", "full_signature": "@Test public void checkTwts()", "class_method_signature": "TransformersValidationTest.checkTwts()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "checkTransformer", "thenReturn", "when", "getV", "assertFalse", "checkTransformer"]}, "focal_class": {"identifier": "TransformersValidation", "superclass": "extends AbstractTransformersValidation", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(TransformersValidation.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(TransformersValidation.class)", "var_name": "LOGGER"}, {"original_string": "public static final TransformersValidation INSTANCE = new TransformersValidation();", "modifier": "public static final", "type": "TransformersValidation", "declarator": "INSTANCE = new TransformersValidation()", "var_name": "INSTANCE"}], "methods": [{"identifier": "TransformersValidation", "parameters": "()", "modifiers": "private", "return": "", "signature": " TransformersValidation()", "full_signature": "private  TransformersValidation()", "class_method_signature": "TransformersValidation.TransformersValidation()", "testcase": false, "constructor": true}, {"identifier": "checkTransformers", "parameters": "(Network network, ValidationConfig config, ValidationWriter twtsWriter)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean checkTransformers(Network network, ValidationConfig config, ValidationWriter twtsWriter)", "full_signature": "@Override public boolean checkTransformers(Network network, ValidationConfig config, ValidationWriter twtsWriter)", "class_method_signature": "TransformersValidation.checkTransformers(Network network, ValidationConfig config, ValidationWriter twtsWriter)", "testcase": false, "constructor": false}, {"identifier": "filterTwt", "parameters": "(TwoWindingsTransformer twt)", "modifiers": "private static", "return": "boolean", "signature": "boolean filterTwt(TwoWindingsTransformer twt)", "full_signature": "private static boolean filterTwt(TwoWindingsTransformer twt)", "class_method_signature": "TransformersValidation.filterTwt(TwoWindingsTransformer twt)", "testcase": false, "constructor": false}, {"identifier": "checkTransformer", "parameters": "(TwoWindingsTransformer twt, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkTransformer(TwoWindingsTransformer twt, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkTransformer(TwoWindingsTransformer twt, ValidationConfig config, Writer writer)", "class_method_signature": "TransformersValidation.checkTransformer(TwoWindingsTransformer twt, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkTransformer", "parameters": "(TwoWindingsTransformer twt, ValidationConfig config, ValidationWriter twtsWriter)", "modifiers": "public", "return": "boolean", "signature": "boolean checkTransformer(TwoWindingsTransformer twt, ValidationConfig config, ValidationWriter twtsWriter)", "full_signature": "public boolean checkTransformer(TwoWindingsTransformer twt, ValidationConfig config, ValidationWriter twtsWriter)", "class_method_signature": "TransformersValidation.checkTransformer(TwoWindingsTransformer twt, ValidationConfig config, ValidationWriter twtsWriter)", "testcase": false, "constructor": false}, {"identifier": "checkTransformer", "parameters": "(String id, double rho, double rhoPreviousStep, double rhoNextStep, int tapPosition,\n                                           int lowTapPosition, int highTapPosition, double targetV, Side regulatedSide, double v,\n                                           boolean connected, boolean mainComponent, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "signature": "boolean checkTransformer(String id, double rho, double rhoPreviousStep, double rhoNextStep, int tapPosition,\n                                           int lowTapPosition, int highTapPosition, double targetV, Side regulatedSide, double v,\n                                           boolean connected, boolean mainComponent, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkTransformer(String id, double rho, double rhoPreviousStep, double rhoNextStep, int tapPosition,\n                                           int lowTapPosition, int highTapPosition, double targetV, Side regulatedSide, double v,\n                                           boolean connected, boolean mainComponent, ValidationConfig config, Writer writer)", "class_method_signature": "TransformersValidation.checkTransformer(String id, double rho, double rhoPreviousStep, double rhoNextStep, int tapPosition,\n                                           int lowTapPosition, int highTapPosition, double targetV, Side regulatedSide, double v,\n                                           boolean connected, boolean mainComponent, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false}, {"identifier": "checkTransformer", "parameters": "(String id, double rho, double rhoPreviousStep, double rhoNextStep, int tapPosition,\n                                           int lowTapPosition, int highTapPosition, double targetV, Side regulatedSide, double v,\n                                           boolean connected, boolean mainComponent, ValidationConfig config, ValidationWriter twtsWriter)", "modifiers": "public", "return": "boolean", "signature": "boolean checkTransformer(String id, double rho, double rhoPreviousStep, double rhoNextStep, int tapPosition,\n                                           int lowTapPosition, int highTapPosition, double targetV, Side regulatedSide, double v,\n                                           boolean connected, boolean mainComponent, ValidationConfig config, ValidationWriter twtsWriter)", "full_signature": "public boolean checkTransformer(String id, double rho, double rhoPreviousStep, double rhoNextStep, int tapPosition,\n                                           int lowTapPosition, int highTapPosition, double targetV, Side regulatedSide, double v,\n                                           boolean connected, boolean mainComponent, ValidationConfig config, ValidationWriter twtsWriter)", "class_method_signature": "TransformersValidation.checkTransformer(String id, double rho, double rhoPreviousStep, double rhoNextStep, int tapPosition,\n                                           int lowTapPosition, int highTapPosition, double targetV, Side regulatedSide, double v,\n                                           boolean connected, boolean mainComponent, ValidationConfig config, ValidationWriter twtsWriter)", "testcase": false, "constructor": false}, {"identifier": "evaluateVoltage", "parameters": "(Side regulatedSide, double voltage, double ratio, double nextRatio)", "modifiers": "private static", "return": "double", "signature": "double evaluateVoltage(Side regulatedSide, double voltage, double ratio, double nextRatio)", "full_signature": "private static double evaluateVoltage(Side regulatedSide, double voltage, double ratio, double nextRatio)", "class_method_signature": "TransformersValidation.evaluateVoltage(Side regulatedSide, double voltage, double ratio, double nextRatio)", "testcase": false, "constructor": false}, {"identifier": "checkTransformerSide", "parameters": "(String id, Side side, double error, double upIncrement, double downIncrement, ValidationConfig config)", "modifiers": "private static", "return": "boolean", "signature": "boolean checkTransformerSide(String id, Side side, double error, double upIncrement, double downIncrement, ValidationConfig config)", "full_signature": "private static boolean checkTransformerSide(String id, Side side, double error, double upIncrement, double downIncrement, ValidationConfig config)", "class_method_signature": "TransformersValidation.checkTransformerSide(String id, Side side, double error, double upIncrement, double downIncrement, ValidationConfig config)", "testcase": false, "constructor": false}, {"identifier": "getMaxVoltageIncrease", "parameters": "(double upIncrement, double downIncrement)", "modifiers": "private static", "return": "double", "signature": "double getMaxVoltageIncrease(double upIncrement, double downIncrement)", "full_signature": "private static double getMaxVoltageIncrease(double upIncrement, double downIncrement)", "class_method_signature": "TransformersValidation.getMaxVoltageIncrease(double upIncrement, double downIncrement)", "testcase": false, "constructor": false}, {"identifier": "getMaxVoltageDecrease", "parameters": "(double upIncrement, double downIncrement)", "modifiers": "private static", "return": "double", "signature": "double getMaxVoltageDecrease(double upIncrement, double downIncrement)", "full_signature": "private static double getMaxVoltageDecrease(double upIncrement, double downIncrement)", "class_method_signature": "TransformersValidation.getMaxVoltageDecrease(double upIncrement, double downIncrement)", "testcase": false, "constructor": false}], "file": "loadflow/loadflow-validation/src/main/java/com/powsybl/loadflow/validation/TransformersValidation.java"}, "focal_method": {"identifier": "checkTransformer", "parameters": "(TwoWindingsTransformer twt, ValidationConfig config, Writer writer)", "modifiers": "public", "return": "boolean", "body": "public boolean checkTransformer(TwoWindingsTransformer twt, ValidationConfig config, Writer writer) {\n        Objects.requireNonNull(twt);\n        Objects.requireNonNull(config);\n        Objects.requireNonNull(writer);\n\n        try (ValidationWriter twtsWriter = ValidationUtils.createValidationWriter(twt.getId(), config, writer, ValidationType.TWTS)) {\n            return checkTransformer(twt, config, twtsWriter);\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }", "signature": "boolean checkTransformer(TwoWindingsTransformer twt, ValidationConfig config, Writer writer)", "full_signature": "public boolean checkTransformer(TwoWindingsTransformer twt, ValidationConfig config, Writer writer)", "class_method_signature": "TransformersValidation.checkTransformer(TwoWindingsTransformer twt, ValidationConfig config, Writer writer)", "testcase": false, "constructor": false, "invocations": ["requireNonNull", "requireNonNull", "requireNonNull", "createValidationWriter", "getId", "checkTransformer"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}