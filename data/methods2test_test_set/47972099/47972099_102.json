{"test_class": {"identifier": "ValueTypeInfoTest", "superclass": "extends TestLogger", "interfaces": "", "fields": [], "file": "flink-core/src/test/java/org/apache/flink/api/java/typeutils/ValueTypeInfoTest.java"}, "test_case": {"identifier": "testValueTypeEqualsWithNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testValueTypeEqualsWithNull() throws Exception {\n\t\tValueTypeInfo<Record> tpeInfo = new ValueTypeInfo<>(Record.class);\n\n\t\tAssert.assertFalse(tpeInfo.equals(null));\n\t}", "signature": "void testValueTypeEqualsWithNull()", "full_signature": "@Test public void testValueTypeEqualsWithNull()", "class_method_signature": "ValueTypeInfoTest.testValueTypeEqualsWithNull()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "equals"]}, "focal_class": {"identifier": "ValueTypeInfo", "superclass": "extends TypeInformation<T>", "interfaces": "implements AtomicType<T>", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "public static final ValueTypeInfo<BooleanValue> BOOLEAN_VALUE_TYPE_INFO = new ValueTypeInfo<>(BooleanValue.class);", "modifier": "public static final", "type": "ValueTypeInfo<BooleanValue>", "declarator": "BOOLEAN_VALUE_TYPE_INFO = new ValueTypeInfo<>(BooleanValue.class)", "var_name": "BOOLEAN_VALUE_TYPE_INFO"}, {"original_string": "public static final ValueTypeInfo<ByteValue> BYTE_VALUE_TYPE_INFO = new ValueTypeInfo<>(ByteValue.class);", "modifier": "public static final", "type": "ValueTypeInfo<ByteValue>", "declarator": "BYTE_VALUE_TYPE_INFO = new ValueTypeInfo<>(ByteValue.class)", "var_name": "BYTE_VALUE_TYPE_INFO"}, {"original_string": "public static final ValueTypeInfo<CharValue> CHAR_VALUE_TYPE_INFO = new ValueTypeInfo<>(CharValue.class);", "modifier": "public static final", "type": "ValueTypeInfo<CharValue>", "declarator": "CHAR_VALUE_TYPE_INFO = new ValueTypeInfo<>(CharValue.class)", "var_name": "CHAR_VALUE_TYPE_INFO"}, {"original_string": "public static final ValueTypeInfo<DoubleValue> DOUBLE_VALUE_TYPE_INFO = new ValueTypeInfo<>(DoubleValue.class);", "modifier": "public static final", "type": "ValueTypeInfo<DoubleValue>", "declarator": "DOUBLE_VALUE_TYPE_INFO = new ValueTypeInfo<>(DoubleValue.class)", "var_name": "DOUBLE_VALUE_TYPE_INFO"}, {"original_string": "public static final ValueTypeInfo<FloatValue> FLOAT_VALUE_TYPE_INFO = new ValueTypeInfo<>(FloatValue.class);", "modifier": "public static final", "type": "ValueTypeInfo<FloatValue>", "declarator": "FLOAT_VALUE_TYPE_INFO = new ValueTypeInfo<>(FloatValue.class)", "var_name": "FLOAT_VALUE_TYPE_INFO"}, {"original_string": "public static final ValueTypeInfo<IntValue> INT_VALUE_TYPE_INFO = new ValueTypeInfo<>(IntValue.class);", "modifier": "public static final", "type": "ValueTypeInfo<IntValue>", "declarator": "INT_VALUE_TYPE_INFO = new ValueTypeInfo<>(IntValue.class)", "var_name": "INT_VALUE_TYPE_INFO"}, {"original_string": "public static final ValueTypeInfo<LongValue> LONG_VALUE_TYPE_INFO = new ValueTypeInfo<>(LongValue.class);", "modifier": "public static final", "type": "ValueTypeInfo<LongValue>", "declarator": "LONG_VALUE_TYPE_INFO = new ValueTypeInfo<>(LongValue.class)", "var_name": "LONG_VALUE_TYPE_INFO"}, {"original_string": "public static final ValueTypeInfo<NullValue> NULL_VALUE_TYPE_INFO = new ValueTypeInfo<>(NullValue.class);", "modifier": "public static final", "type": "ValueTypeInfo<NullValue>", "declarator": "NULL_VALUE_TYPE_INFO = new ValueTypeInfo<>(NullValue.class)", "var_name": "NULL_VALUE_TYPE_INFO"}, {"original_string": "public static final ValueTypeInfo<ShortValue> SHORT_VALUE_TYPE_INFO = new ValueTypeInfo<>(ShortValue.class);", "modifier": "public static final", "type": "ValueTypeInfo<ShortValue>", "declarator": "SHORT_VALUE_TYPE_INFO = new ValueTypeInfo<>(ShortValue.class)", "var_name": "SHORT_VALUE_TYPE_INFO"}, {"original_string": "public static final ValueTypeInfo<StringValue> STRING_VALUE_TYPE_INFO = new ValueTypeInfo<>(StringValue.class);", "modifier": "public static final", "type": "ValueTypeInfo<StringValue>", "declarator": "STRING_VALUE_TYPE_INFO = new ValueTypeInfo<>(StringValue.class)", "var_name": "STRING_VALUE_TYPE_INFO"}, {"original_string": "private final Class<T> type;", "modifier": "private final", "type": "Class<T>", "declarator": "type", "var_name": "type"}], "methods": [{"identifier": "ValueTypeInfo", "parameters": "(Class<T> type)", "modifiers": "@PublicEvolving public", "return": "", "signature": " ValueTypeInfo(Class<T> type)", "full_signature": "@PublicEvolving public  ValueTypeInfo(Class<T> type)", "class_method_signature": "ValueTypeInfo.ValueTypeInfo(Class<T> type)", "testcase": false, "constructor": true}, {"identifier": "getArity", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "int", "signature": "int getArity()", "full_signature": "@Override @PublicEvolving public int getArity()", "class_method_signature": "ValueTypeInfo.getArity()", "testcase": false, "constructor": false}, {"identifier": "getTotalFields", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "int", "signature": "int getTotalFields()", "full_signature": "@Override @PublicEvolving public int getTotalFields()", "class_method_signature": "ValueTypeInfo.getTotalFields()", "testcase": false, "constructor": false}, {"identifier": "getTypeClass", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "Class<T>", "signature": "Class<T> getTypeClass()", "full_signature": "@Override @PublicEvolving public Class<T> getTypeClass()", "class_method_signature": "ValueTypeInfo.getTypeClass()", "testcase": false, "constructor": false}, {"identifier": "isBasicType", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "boolean", "signature": "boolean isBasicType()", "full_signature": "@Override @PublicEvolving public boolean isBasicType()", "class_method_signature": "ValueTypeInfo.isBasicType()", "testcase": false, "constructor": false}, {"identifier": "isBasicValueType", "parameters": "()", "modifiers": "@PublicEvolving public", "return": "boolean", "signature": "boolean isBasicValueType()", "full_signature": "@PublicEvolving public boolean isBasicValueType()", "class_method_signature": "ValueTypeInfo.isBasicValueType()", "testcase": false, "constructor": false}, {"identifier": "isTupleType", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "boolean", "signature": "boolean isTupleType()", "full_signature": "@Override @PublicEvolving public boolean isTupleType()", "class_method_signature": "ValueTypeInfo.isTupleType()", "testcase": false, "constructor": false}, {"identifier": "isKeyType", "parameters": "()", "modifiers": "@Override @PublicEvolving public", "return": "boolean", "signature": "boolean isKeyType()", "full_signature": "@Override @PublicEvolving public boolean isKeyType()", "class_method_signature": "ValueTypeInfo.isKeyType()", "testcase": false, "constructor": false}, {"identifier": "createSerializer", "parameters": "(ExecutionConfig executionConfig)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") @PublicEvolving public", "return": "TypeSerializer<T>", "signature": "TypeSerializer<T> createSerializer(ExecutionConfig executionConfig)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") @PublicEvolving public TypeSerializer<T> createSerializer(ExecutionConfig executionConfig)", "class_method_signature": "ValueTypeInfo.createSerializer(ExecutionConfig executionConfig)", "testcase": false, "constructor": false}, {"identifier": "createComparator", "parameters": "(boolean sortOrderAscending, ExecutionConfig executionConfig)", "modifiers": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) @Override @PublicEvolving public", "return": "TypeComparator<T>", "signature": "TypeComparator<T> createComparator(boolean sortOrderAscending, ExecutionConfig executionConfig)", "full_signature": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) @Override @PublicEvolving public TypeComparator<T> createComparator(boolean sortOrderAscending, ExecutionConfig executionConfig)", "class_method_signature": "ValueTypeInfo.createComparator(boolean sortOrderAscending, ExecutionConfig executionConfig)", "testcase": false, "constructor": false}, {"identifier": "createCopyableValueSerializer", "parameters": "(Class<X> clazz)", "modifiers": "private static", "return": "CopyableValueSerializer<X>", "signature": "CopyableValueSerializer<X> createCopyableValueSerializer(Class<X> clazz)", "full_signature": "private static CopyableValueSerializer<X> createCopyableValueSerializer(Class<X> clazz)", "class_method_signature": "ValueTypeInfo.createCopyableValueSerializer(Class<X> clazz)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ValueTypeInfo.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ValueTypeInfo.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "canEqual", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canEqual(Object obj)", "full_signature": "@Override public boolean canEqual(Object obj)", "class_method_signature": "ValueTypeInfo.canEqual(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ValueTypeInfo.toString()", "testcase": false, "constructor": false}, {"identifier": "getValueTypeInfo", "parameters": "(Class<X> typeClass)", "modifiers": "@PublicEvolving static", "return": "TypeInformation<X>", "signature": "TypeInformation<X> getValueTypeInfo(Class<X> typeClass)", "full_signature": "@PublicEvolving static TypeInformation<X> getValueTypeInfo(Class<X> typeClass)", "class_method_signature": "ValueTypeInfo.getValueTypeInfo(Class<X> typeClass)", "testcase": false, "constructor": false}], "file": "flink-core/src/main/java/org/apache/flink/api/java/typeutils/ValueTypeInfo.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (obj instanceof ValueTypeInfo) {\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tValueTypeInfo<T> valueTypeInfo = (ValueTypeInfo<T>) obj;\n\n\t\t\treturn valueTypeInfo.canEqual(this) &&\n\t\t\t\ttype == valueTypeInfo.type;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ValueTypeInfo.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["canEqual"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}