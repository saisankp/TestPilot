{"test_class": {"identifier": "SQLiteUtilsTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [], "file": "reactiveandroid/src/test/java/com/reactiveandroid/internal/utils/SQLiteUtilsTest.java"}, "test_case": {"identifier": "testCreateColumnDefinition", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateColumnDefinition() throws NoSuchFieldException {\n        TableInfo testModelTableInfo = ReActiveAndroid.getTableInfo(FullTestModel.class);\n        Field idField = testModelTableInfo.getColumnFields().get(0);\n        Field stringField = FullTestModel.class.getField(\"stringField\");\n        Field booleanField = FullTestModel.class.getField(\"booleanField\");\n\n        assertEquals(\"`id` INTEGER PRIMARY KEY AUTOINCREMENT\", SQLiteUtils.createColumnDefinition(testModelTableInfo, idField));\n        assertEquals(\"`stringField` TEXT COLLATE BINARY UNIQUE ON CONFLICT IGNORE\", SQLiteUtils.createColumnDefinition(testModelTableInfo, stringField));\n        assertEquals(\"`booleanField` INTEGER\", SQLiteUtils.createColumnDefinition(testModelTableInfo, booleanField));\n    }", "signature": "void testCreateColumnDefinition()", "full_signature": "@Test public void testCreateColumnDefinition()", "class_method_signature": "SQLiteUtilsTest.testCreateColumnDefinition()", "testcase": true, "constructor": false, "invocations": ["getTableInfo", "get", "getColumnFields", "getField", "getField", "assertEquals", "createColumnDefinition", "assertEquals", "createColumnDefinition", "assertEquals", "createColumnDefinition"]}, "focal_class": {"identifier": "SQLiteUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getIdentityHash", "parameters": "(Collection<TableInfo> tableInfos)", "modifiers": "@NonNull public static", "return": "String", "signature": "String getIdentityHash(Collection<TableInfo> tableInfos)", "full_signature": "@NonNull public static String getIdentityHash(Collection<TableInfo> tableInfos)", "class_method_signature": "SQLiteUtils.getIdentityHash(Collection<TableInfo> tableInfos)", "testcase": false, "constructor": false}, {"identifier": "getAllTableNames", "parameters": "(SQLiteDatabase database)", "modifiers": "@NonNull public static", "return": "ArrayList<String>", "signature": "ArrayList<String> getAllTableNames(SQLiteDatabase database)", "full_signature": "@NonNull public static ArrayList<String> getAllTableNames(SQLiteDatabase database)", "class_method_signature": "SQLiteUtils.getAllTableNames(SQLiteDatabase database)", "testcase": false, "constructor": false}, {"identifier": "createTableDefinition", "parameters": "(TableInfo tableInfo)", "modifiers": "@NonNull public static", "return": "String", "signature": "String createTableDefinition(TableInfo tableInfo)", "full_signature": "@NonNull public static String createTableDefinition(TableInfo tableInfo)", "class_method_signature": "SQLiteUtils.createTableDefinition(TableInfo tableInfo)", "testcase": false, "constructor": false}, {"identifier": "createColumnDefinition", "parameters": "(TableInfo tableInfo, Field field)", "modifiers": "@NonNull @SuppressWarnings(\"unchecked\") static", "return": "String", "signature": "String createColumnDefinition(TableInfo tableInfo, Field field)", "full_signature": "@NonNull @SuppressWarnings(\"unchecked\") static String createColumnDefinition(TableInfo tableInfo, Field field)", "class_method_signature": "SQLiteUtils.createColumnDefinition(TableInfo tableInfo, Field field)", "testcase": false, "constructor": false}, {"identifier": "createUniqueDefinition", "parameters": "(TableInfo tableInfo)", "modifiers": "@NonNull static", "return": "List<String>", "signature": "List<String> createUniqueDefinition(TableInfo tableInfo)", "full_signature": "@NonNull static List<String> createUniqueDefinition(TableInfo tableInfo)", "class_method_signature": "SQLiteUtils.createUniqueDefinition(TableInfo tableInfo)", "testcase": false, "constructor": false}, {"identifier": "createIndexDefinition", "parameters": "(TableInfo tableInfo)", "modifiers": "@NonNull public static", "return": "List<String>", "signature": "List<String> createIndexDefinition(TableInfo tableInfo)", "full_signature": "@NonNull public static List<String> createIndexDefinition(TableInfo tableInfo)", "class_method_signature": "SQLiteUtils.createIndexDefinition(TableInfo tableInfo)", "testcase": false, "constructor": false}, {"identifier": "getFieldSQLiteType", "parameters": "(Field field, Map<Class<?>, TypeSerializer> typeSerializers)", "modifiers": "public static", "return": "SQLiteType", "signature": "SQLiteType getFieldSQLiteType(Field field, Map<Class<?>, TypeSerializer> typeSerializers)", "full_signature": "public static SQLiteType getFieldSQLiteType(Field field, Map<Class<?>, TypeSerializer> typeSerializers)", "class_method_signature": "SQLiteUtils.getFieldSQLiteType(Field field, Map<Class<?>, TypeSerializer> typeSerializers)", "testcase": false, "constructor": false}, {"identifier": "getColumnFieldValue", "parameters": "(Class<?> modelClass,\n                                             Class<?> fieldType,\n                                             Cursor cursor,\n                                             int columnIndex)", "modifiers": "public static", "return": "Object", "signature": "Object getColumnFieldValue(Class<?> modelClass,\n                                             Class<?> fieldType,\n                                             Cursor cursor,\n                                             int columnIndex)", "full_signature": "public static Object getColumnFieldValue(Class<?> modelClass,\n                                             Class<?> fieldType,\n                                             Cursor cursor,\n                                             int columnIndex)", "class_method_signature": "SQLiteUtils.getColumnFieldValue(Class<?> modelClass,\n                                             Class<?> fieldType,\n                                             Cursor cursor,\n                                             int columnIndex)", "testcase": false, "constructor": false}, {"identifier": "fillContentValuesForUpdate", "parameters": "(Object model,\n                                                  ModelAdapter modelAdapter,\n                                                  ContentValues contentValues)", "modifiers": "public static", "return": "void", "signature": "void fillContentValuesForUpdate(Object model,\n                                                  ModelAdapter modelAdapter,\n                                                  ContentValues contentValues)", "full_signature": "public static void fillContentValuesForUpdate(Object model,\n                                                  ModelAdapter modelAdapter,\n                                                  ContentValues contentValues)", "class_method_signature": "SQLiteUtils.fillContentValuesForUpdate(Object model,\n                                                  ModelAdapter modelAdapter,\n                                                  ContentValues contentValues)", "testcase": false, "constructor": false}, {"identifier": "fillContentValuesForInsert", "parameters": "(Object model,\n                                                  ModelAdapter modelAdapter,\n                                                  ContentValues contentValues)", "modifiers": "public static", "return": "void", "signature": "void fillContentValuesForInsert(Object model,\n                                                  ModelAdapter modelAdapter,\n                                                  ContentValues contentValues)", "full_signature": "public static void fillContentValuesForInsert(Object model,\n                                                  ModelAdapter modelAdapter,\n                                                  ContentValues contentValues)", "class_method_signature": "SQLiteUtils.fillContentValuesForInsert(Object model,\n                                                  ModelAdapter modelAdapter,\n                                                  ContentValues contentValues)", "testcase": false, "constructor": false}, {"identifier": "isInternalTable", "parameters": "(String tableName)", "modifiers": "private static", "return": "boolean", "signature": "boolean isInternalTable(String tableName)", "full_signature": "private static boolean isInternalTable(String tableName)", "class_method_signature": "SQLiteUtils.isInternalTable(String tableName)", "testcase": false, "constructor": false}, {"identifier": "getDatabaseSchemaHash", "parameters": "(ArrayList<String> tableDefinitions)", "modifiers": "@NonNull private static", "return": "String", "signature": "String getDatabaseSchemaHash(ArrayList<String> tableDefinitions)", "full_signature": "@NonNull private static String getDatabaseSchemaHash(ArrayList<String> tableDefinitions)", "class_method_signature": "SQLiteUtils.getDatabaseSchemaHash(ArrayList<String> tableDefinitions)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(List<ColumnInfo> columnInfos)", "modifiers": "@NonNull private static", "return": "String", "signature": "String join(List<ColumnInfo> columnInfos)", "full_signature": "@NonNull private static String join(List<ColumnInfo> columnInfos)", "class_method_signature": "SQLiteUtils.join(List<ColumnInfo> columnInfos)", "testcase": false, "constructor": false}], "file": "reactiveandroid/src/main/java/com/reactiveandroid/internal/utils/SQLiteUtils.java"}, "focal_method": {"identifier": "createColumnDefinition", "parameters": "(TableInfo tableInfo, Field field)", "modifiers": "@NonNull @SuppressWarnings(\"unchecked\") static", "return": "String", "body": "@NonNull\n    @SuppressWarnings(\"unchecked\")\n    static String createColumnDefinition(TableInfo tableInfo, Field field) {\n        StringBuilder definition = new StringBuilder();\n\n        Column column = field.getAnnotation(Column.class);\n        Unique uniqueAnnotation = field.getAnnotation(Unique.class);\n        Class type = field.getType();\n        ColumnInfo columnInfo = tableInfo.getColumnInfo(field);\n        SQLiteType sqliteType = columnInfo.type;\n\n        definition.append(\"`\");\n        definition.append(columnInfo.name);\n        definition.append(\"`\");\n        definition.append(\" \");\n        definition.append(sqliteType.getName());\n\n        if (!TextUtils.isEmpty(definition)) {\n            if (columnInfo.name.equals(tableInfo.getPrimaryKeyColumnName())) {\n                definition.append(\" PRIMARY KEY AUTOINCREMENT\");\n            } else if (column != null) {\n                if (column.length() > -1) {\n                    definition.append(\"(\");\n                    definition.append(column.length());\n                    definition.append(\")\");\n                }\n\n                if (column.collate() != Collate.NONE) {\n                    definition.append(\" COLLATE \");\n                    definition.append(column.collate().toString());\n                }\n\n                if (column.notNull()) {\n                    definition.append(\" NOT NULL ON CONFLICT \");\n                    definition.append(column.onNullConflict().toString());\n                }\n\n                if (uniqueAnnotation != null && uniqueAnnotation.unique()) {\n                    definition.append(\" UNIQUE ON CONFLICT \");\n                    definition.append(uniqueAnnotation.onUniqueConflict().toString());\n                }\n\n            }\n\n            if (ReflectionUtils.isModel(type)) {\n                TableInfo foreignKeyTableInfo = ReActiveAndroid.getTableInfo(type);\n                definition.append(\" REFERENCES \");\n                definition.append(foreignKeyTableInfo.getTableName());\n                definition.append(\"(`\").append(foreignKeyTableInfo.getPrimaryKeyColumnName()).append(\"`)\");\n                definition.append(\" ON DELETE \");\n                definition.append(column.onDelete().toString().replace(\"_\", \" \"));\n                definition.append(\" ON UPDATE \");\n                definition.append(column.onUpdate().toString().replace(\"_\", \" \"));\n            }\n        } else {\n            ReActiveLog.e(LogLevel.BASIC, \"No type mapping for: \" + type.toString());\n        }\n\n        return definition.toString();\n    }", "signature": "String createColumnDefinition(TableInfo tableInfo, Field field)", "full_signature": "@NonNull @SuppressWarnings(\"unchecked\") static String createColumnDefinition(TableInfo tableInfo, Field field)", "class_method_signature": "SQLiteUtils.createColumnDefinition(TableInfo tableInfo, Field field)", "testcase": false, "constructor": false, "invocations": ["getAnnotation", "getAnnotation", "getType", "getColumnInfo", "append", "append", "append", "append", "append", "getName", "isEmpty", "equals", "getPrimaryKeyColumnName", "append", "length", "append", "append", "length", "append", "collate", "append", "append", "toString", "collate", "notNull", "append", "append", "toString", "onNullConflict", "unique", "append", "append", "toString", "onUniqueConflict", "isModel", "getTableInfo", "append", "append", "getTableName", "append", "append", "append", "getPrimaryKeyColumnName", "append", "append", "replace", "toString", "onDelete", "append", "append", "replace", "toString", "onUpdate", "e", "toString", "toString"]}, "repository": {"repo_id": 108579191, "url": "https://github.com/ImangazalievM/ReActiveAndroid", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 101, "size": 572, "license": "licensed"}}