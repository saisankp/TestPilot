{"test_class": {"identifier": "MapToIObjectResolveDependencyStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private MapToIObjectResolveDependencyStrategy strategy;", "modifier": "private", "type": "MapToIObjectResolveDependencyStrategy", "declarator": "strategy", "var_name": "strategy"}], "file": "CoreFeatures/IOCStrategyPack/ResolveIObjectStrategies/src/test/java/info/smart_tools/smartactors/ioc_strategy_pack/resolve_iobject_strategies/MapToIObjectResolveDependencyStrategyTest.java"}, "test_case": {"identifier": "ShouldThrowException_When_AnyErrorIsOccurred", "parameters": "()", "modifiers": "@Test(expected = ResolveDependencyStrategyException.class) public", "return": "void", "body": "@Test(expected = ResolveDependencyStrategyException.class)\n    public void ShouldThrowException_When_AnyErrorIsOccurred() throws Exception {\n\n        when(IOC.resolve(any(IKey.class), anyString())).thenThrow(new ResolutionException(\"\"));\n\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"key\", \"value\");\n        strategy.resolve(map);\n        fail();\n    }", "signature": "void ShouldThrowException_When_AnyErrorIsOccurred()", "full_signature": "@Test(expected = ResolveDependencyStrategyException.class) public void ShouldThrowException_When_AnyErrorIsOccurred()", "class_method_signature": "MapToIObjectResolveDependencyStrategyTest.ShouldThrowException_When_AnyErrorIsOccurred()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "resolve", "any", "anyString", "put", "resolve", "fail"]}, "focal_class": {"identifier": "MapToIObjectResolveDependencyStrategy", "superclass": "", "interfaces": "implements IResolveDependencyStrategy", "fields": [], "methods": [{"identifier": "resolve", "parameters": "(final Object... args)", "modifiers": "@Override public", "return": "T", "signature": "T resolve(final Object... args)", "full_signature": "@Override public T resolve(final Object... args)", "class_method_signature": "MapToIObjectResolveDependencyStrategy.resolve(final Object... args)", "testcase": false, "constructor": false}], "file": "CoreFeatures/IOCStrategyPack/ResolveIObjectStrategies/src/main/java/info/smart_tools/smartactors/ioc_strategy_pack/resolve_iobject_strategies/MapToIObjectResolveDependencyStrategy.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final Object... args)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T resolve(final Object... args) throws ResolveDependencyStrategyException {\n\n        try {\n            Map<String, Object> stringObjectMap = (Map<String, Object>) args[0];\n            Map<IFieldName, Object> fieldNameObjectMap = new HashMap<>();\n            for (String key: stringObjectMap.keySet()) {\n                IFieldName fieldName = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.ifield_name.IFieldName\"), key);\n                fieldNameObjectMap.put(fieldName, stringObjectMap.get(key));\n            }\n\n            return (T) new DSObject(fieldNameObjectMap);\n        } catch (Exception e) {\n            throw new ResolveDependencyStrategyException(\"Can't create IObject from Map.\", e);\n        }\n    }", "signature": "T resolve(final Object... args)", "full_signature": "@Override public T resolve(final Object... args)", "class_method_signature": "MapToIObjectResolveDependencyStrategy.resolve(final Object... args)", "testcase": false, "constructor": false, "invocations": ["keySet", "resolve", "getOrAdd", "put", "get"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}