{"test_class": {"identifier": "JsonWriterTest", "superclass": "", "interfaces": "", "fields": [], "file": "brave/src/test/java/brave/internal/codec/JsonWriterTest.java"}, "test_case": {"identifier": "doesntStackOverflowOnToBufferWriterBug_Overflow", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void doesntStackOverflowOnToBufferWriterBug_Overflow() {\n    // pretend there was a bug calculating size, ex it calculated incorrectly as to small\n    class FooWriter implements WriteBuffer.Writer {\n      @Override public int sizeInBytes(Object value) {\n        return 2;\n      }\n\n      @Override public void write(Object value, WriteBuffer buffer) {\n        buffer.writeByte('a');\n        buffer.writeByte('b');\n        buffer.writeByte('c'); // wrote larger than size!\n      }\n    }\n\n    class Foo {\n      @Override public String toString() {\n        return new String(JsonWriter.write(new FooWriter(), this), UTF_8);\n      }\n    }\n\n    Foo foo = new Foo();\n    assertThatThrownBy(foo::toString)\n        .isInstanceOf(AssertionError.class)\n        .hasMessage(\"Bug found using FooWriter to write Foo as json. Wrote 2/2 bytes: ab\");\n  }", "signature": "void doesntStackOverflowOnToBufferWriterBug_Overflow()", "full_signature": "@Test public void doesntStackOverflowOnToBufferWriterBug_Overflow()", "class_method_signature": "JsonWriterTest.doesntStackOverflowOnToBufferWriterBug_Overflow()", "testcase": true, "constructor": false, "invocations": ["writeByte", "writeByte", "writeByte", "write", "hasMessage", "isInstanceOf", "assertThatThrownBy"]}, "focal_class": {"identifier": "JsonWriter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Charset UTF_8 = Charset.forName(\"UTF-8\");", "modifier": "public static final", "type": "Charset", "declarator": "UTF_8 = Charset.forName(\"UTF-8\")", "var_name": "UTF_8"}], "methods": [{"identifier": "sizeInBytes", "parameters": "(Writer<T> writer, List<T> value)", "modifiers": "static", "return": "int", "signature": "int sizeInBytes(Writer<T> writer, List<T> value)", "full_signature": "static int sizeInBytes(Writer<T> writer, List<T> value)", "class_method_signature": "JsonWriter.sizeInBytes(Writer<T> writer, List<T> value)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(Writer<T> writer, T value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] write(Writer<T> writer, T value)", "full_signature": "public static byte[] write(Writer<T> writer, T value)", "class_method_signature": "JsonWriter.write(Writer<T> writer, T value)", "testcase": false, "constructor": false}, {"identifier": "writeList", "parameters": "(Writer<T> writer, List<T> value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] writeList(Writer<T> writer, List<T> value)", "full_signature": "public static byte[] writeList(Writer<T> writer, List<T> value)", "class_method_signature": "JsonWriter.writeList(Writer<T> writer, List<T> value)", "testcase": false, "constructor": false}, {"identifier": "writeList", "parameters": "(Writer<T> writer, List<T> value, byte[] out,\n      int pos)", "modifiers": "public static", "return": "int", "signature": "int writeList(Writer<T> writer, List<T> value, byte[] out,\n      int pos)", "full_signature": "public static int writeList(Writer<T> writer, List<T> value, byte[] out,\n      int pos)", "class_method_signature": "JsonWriter.writeList(Writer<T> writer, List<T> value, byte[] out,\n      int pos)", "testcase": false, "constructor": false}, {"identifier": "writeList", "parameters": "(Writer<T> writer, List<T> value, WriteBuffer b)", "modifiers": "public static", "return": "void", "signature": "void writeList(Writer<T> writer, List<T> value, WriteBuffer b)", "full_signature": "public static void writeList(Writer<T> writer, List<T> value, WriteBuffer b)", "class_method_signature": "JsonWriter.writeList(Writer<T> writer, List<T> value, WriteBuffer b)", "testcase": false, "constructor": false}], "file": "brave/src/main/java/brave/internal/codec/JsonWriter.java"}, "focal_method": {"identifier": "write", "parameters": "(Writer<T> writer, T value)", "modifiers": "public static", "return": "byte[]", "body": "public static <T> byte[] write(Writer<T> writer, T value) {\n    byte[] result = new byte[writer.sizeInBytes(value)];\n    WriteBuffer b = WriteBuffer.wrap(result);\n    try {\n      writer.write(value, b);\n    } catch (RuntimeException e) {\n      int lengthWritten = result.length;\n      for (int i = 0; i < result.length; i++) {\n        if (result[i] == 0) {\n          lengthWritten = i;\n          break;\n        }\n      }\n\n      // Don't use value directly in the message, as its toString might be implemented using this\n      // method. If that's the case, we'd stack overflow. Instead, emit what we've written so far.\n      String message =\n          format(\n              \"Bug found using %s to write %s as json. Wrote %s/%s bytes: %s\",\n              writer.getClass().getSimpleName(),\n              value.getClass().getSimpleName(),\n              lengthWritten,\n              result.length,\n              new String(result, 0, lengthWritten, UTF_8));\n      throw Platform.get().assertionError(message, e);\n    }\n    return result;\n  }", "signature": "byte[] write(Writer<T> writer, T value)", "full_signature": "public static byte[] write(Writer<T> writer, T value)", "class_method_signature": "JsonWriter.write(Writer<T> writer, T value)", "testcase": false, "constructor": false, "invocations": ["sizeInBytes", "wrap", "write", "format", "getSimpleName", "getClass", "getSimpleName", "getClass", "assertionError", "get"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}