{"test_class": {"identifier": "OptionsRendererTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final BasicTilesContainer container = new BasicTilesContainer();", "modifier": "private final", "type": "BasicTilesContainer", "declarator": "container = new BasicTilesContainer()", "var_name": "container"}, {"original_string": "private final Map<String, Object> appScope = new HashMap<String, Object>(){{\n        put(TilesAccess.CONTAINER_ATTRIBUTE, container);\n    }};", "modifier": "private final", "type": "Map<String, Object>", "declarator": "appScope = new HashMap<String, Object>(){{\n        put(TilesAccess.CONTAINER_ATTRIBUTE, container);\n    }}", "var_name": "appScope"}, {"original_string": "private final Map<String, Object> requestScope = new HashMap<String, Object>();", "modifier": "private final", "type": "Map<String, Object>", "declarator": "requestScope = new HashMap<String, Object>()", "var_name": "requestScope"}, {"original_string": "private final ApplicationResource template = new PostfixedApplicationResource(\"Result\"){\n        @Override\n        public InputStream getInputStream() throws IOException {\n            throw new AssertionError(\"Shouldn't be called.\");\n        }\n        @Override\n        public long getLastModified() throws IOException {\n            return 0;\n        }\n    };", "modifier": "private final", "type": "ApplicationResource", "declarator": "template = new PostfixedApplicationResource(\"Result\"){\n        @Override\n        public InputStream getInputStream() throws IOException {\n            throw new AssertionError(\"Shouldn't be called.\");\n        }\n        @Override\n        public long getLastModified() throws IOException {\n            return 0;\n        }\n    }", "var_name": "template"}, {"original_string": "private final ApplicationContext context = new ApplicationContext(){\n        @Override\n        public Object getContext() {\n            throw new AssertionError(\"Shouldn't be called.\");\n        }\n        @Override\n        public Map<String, Object> getApplicationScope() {\n            return appScope;\n        }\n        @Override\n        public Map<String, String> getInitParams() {\n            throw new AssertionError(\"Shouldn't be called.\");\n        }\n        @Override\n        public ApplicationResource getResource(String string) {\n            return template;\n        }\n        @Override\n        public ApplicationResource getResource(ApplicationResource ar, Locale locale) {\n            throw new AssertionError(\"Shouldn't be called.\");\n        }\n        @Override\n        public Collection<ApplicationResource> getResources(String string) {\n            throw new AssertionError(\"Shouldn't be called.\");\n        }\n    };", "modifier": "private final", "type": "ApplicationContext", "declarator": "context = new ApplicationContext(){\n        @Override\n        public Object getContext() {\n            throw new AssertionError(\"Shouldn't be called.\");\n        }\n        @Override\n        public Map<String, Object> getApplicationScope() {\n            return appScope;\n        }\n        @Override\n        public Map<String, String> getInitParams() {\n            throw new AssertionError(\"Shouldn't be called.\");\n        }\n        @Override\n        public ApplicationResource getResource(String string) {\n            return template;\n        }\n        @Override\n        public ApplicationResource getResource(ApplicationResource ar, Locale locale) {\n            throw new AssertionError(\"Shouldn't be called.\");\n        }\n        @Override\n        public Collection<ApplicationResource> getResources(String string) {\n            throw new AssertionError(\"Shouldn't be called.\");\n        }\n    }", "var_name": "context"}], "file": "tiles-extras/src/test/java/org/apache/tiles/extras/renderer/OptionsRendererTest.java"}, "test_case": {"identifier": "testWrite", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWrite() throws IOException {\n        StringWriter writer = new StringWriter();\n        Request request = createMock(Request.class);\n\n        requestScope.put(TilesAccess.CURRENT_CONTAINER_ATTRIBUTE_NAME, container);\n\n        expect(request.getContext(matches(\"request\"))).andReturn(requestScope).anyTimes();\n        expect(request.getApplicationContext()).andReturn(context);\n        expect(request.getWriter()).andReturn(writer);\n        replay(request);\n\n        container\n                .getAttributeContext(request)\n                .putAttribute(\"test-fallback\", new ListAttribute(){{\n                    add(new Attribute(\"Result\"));\n                }});\n\n        OptionsRenderer renderer = new OptionsRenderer(context, new StringRenderer());\n        renderer.render(\"{options[test-fallback]}\", request);\n        writer.close();\n        assertEquals(\"Not written 'Result'\", \"Result\", writer.toString());\n        verify(request);\n    }", "signature": "void testWrite()", "full_signature": "@Test public void testWrite()", "class_method_signature": "OptionsRendererTest.testWrite()", "testcase": true, "constructor": false, "invocations": ["createMock", "put", "anyTimes", "andReturn", "expect", "getContext", "matches", "andReturn", "expect", "getApplicationContext", "andReturn", "expect", "getWriter", "replay", "putAttribute", "getAttributeContext", "add", "render", "close", "assertEquals", "toString", "verify"]}, "focal_class": {"identifier": "OptionsRenderer", "superclass": "", "interfaces": "implements Renderer", "fields": [{"original_string": "public static final String CACHE_LIFE_PROPERTY = OptionsRenderer.class.getName() + \".cache_ttl_ms\";", "modifier": "public static final", "type": "String", "declarator": "CACHE_LIFE_PROPERTY = OptionsRenderer.class.getName() + \".cache_ttl_ms\"", "var_name": "CACHE_LIFE_PROPERTY"}, {"original_string": "public static final long DEFAULT_CACHE_LIFE = 1000 * 60 * 5;", "modifier": "public static final", "type": "long", "declarator": "DEFAULT_CACHE_LIFE = 1000 * 60 * 5", "var_name": "DEFAULT_CACHE_LIFE"}, {"original_string": "public static final Pattern OPTIONS_PATTERN\n            = Pattern.compile(Pattern.quote(\"{options[\") + \"(.+)\" + Pattern.quote(\"]}\"));", "modifier": "public static final", "type": "Pattern", "declarator": "OPTIONS_PATTERN\n            = Pattern.compile(Pattern.quote(\"{options[\") + \"(.+)\" + Pattern.quote(\"]}\"))", "var_name": "OPTIONS_PATTERN"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(OptionsRenderer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(OptionsRenderer.class)", "var_name": "LOG"}, {"original_string": "private final ApplicationContext applicationContext;", "modifier": "private final", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "private final Renderer renderer;", "modifier": "private final", "type": "Renderer", "declarator": "renderer", "var_name": "renderer"}], "methods": [{"identifier": "OptionsRenderer", "parameters": "(final ApplicationContext applicationContext, final Renderer renderer)", "modifiers": "public", "return": "", "signature": " OptionsRenderer(final ApplicationContext applicationContext, final Renderer renderer)", "full_signature": "public  OptionsRenderer(final ApplicationContext applicationContext, final Renderer renderer)", "class_method_signature": "OptionsRenderer.OptionsRenderer(final ApplicationContext applicationContext, final Renderer renderer)", "testcase": false, "constructor": true}, {"identifier": "isRenderable", "parameters": "(final String path, final Request request)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRenderable(final String path, final Request request)", "full_signature": "@Override public boolean isRenderable(final String path, final Request request)", "class_method_signature": "OptionsRenderer.isRenderable(final String path, final Request request)", "testcase": false, "constructor": false}, {"identifier": "render", "parameters": "(final String path, final Request request)", "modifiers": "@Override public", "return": "void", "signature": "void render(final String path, final Request request)", "full_signature": "@Override public void render(final String path, final Request request)", "class_method_signature": "OptionsRenderer.render(final String path, final Request request)", "testcase": false, "constructor": false}, {"identifier": "renderAttempt", "parameters": "(final String template, final Request request)", "modifiers": "private", "return": "boolean", "signature": "boolean renderAttempt(final String template, final Request request)", "full_signature": "private boolean renderAttempt(final String template, final Request request)", "class_method_signature": "OptionsRenderer.renderAttempt(final String template, final Request request)", "testcase": false, "constructor": false}], "file": "tiles-extras/src/main/java/org/apache/tiles/extras/renderer/OptionsRenderer.java"}, "focal_method": {"identifier": "render", "parameters": "(final String path, final Request request)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void render(final String path, final Request request) throws IOException {\n\n        Matcher matcher =  OPTIONS_PATTERN.matcher((String) path);\n\n        if (null != matcher && matcher.find()) {\n            boolean done = false;\n            String match = matcher.group(1);\n            ListAttribute fallbacks = (ListAttribute) TilesAccess\n                    .getCurrentContainer(request)\n                    .getAttributeContext(request)\n                    .getAttribute(match);\n\n            if (null == fallbacks) {\n                throw new IllegalStateException(\"A matching list-attribute name=\\\"\" + match + \"\\\" must be defined.\");\n            } else if (fallbacks.getValue().isEmpty()) {\n                throw new IllegalStateException(\n                        \"list-attribute name=\\\"\" + match + \"\\\" must have minimum one attribute\");\n            }\n\n            for (Attribute option : (List<Attribute>) fallbacks.getValue()) {\n                String template = path.replaceFirst(Pattern.quote(matcher.group()), (String) option.getValue());\n                done = renderAttempt(template, request);\n                if (done) { break; }\n            }\n            if (!done) {\n                throw new IOException(\"None of the options existed for \" + path);\n            }\n        } else {\n            renderer.render(path, request);\n        }\n    }", "signature": "void render(final String path, final Request request)", "full_signature": "@Override public void render(final String path, final Request request)", "class_method_signature": "OptionsRenderer.render(final String path, final Request request)", "testcase": false, "constructor": false, "invocations": ["matcher", "find", "group", "getAttribute", "getAttributeContext", "getCurrentContainer", "isEmpty", "getValue", "getValue", "replaceFirst", "quote", "group", "getValue", "renderAttempt", "render"]}, "repository": {"repo_id": 2641714, "url": "https://github.com/apache/tiles", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 99, "size": 12554, "license": "licensed"}}