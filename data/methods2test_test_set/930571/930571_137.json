{"test_class": {"identifier": "RuleFlowProcessValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RuleFlowProcessValidator validator;", "modifier": "private", "type": "RuleFlowProcessValidator", "declarator": "validator", "var_name": "validator"}, {"original_string": "private List<ProcessValidationError> errors;", "modifier": "private", "type": "List<ProcessValidationError>", "declarator": "errors", "var_name": "errors"}, {"original_string": "@Mock\n    private RuleFlowProcess process;", "modifier": "@Mock\n    private", "type": "RuleFlowProcess", "declarator": "process", "var_name": "process"}, {"original_string": "@Mock\n    private Node node;", "modifier": "@Mock\n    private", "type": "Node", "declarator": "node", "var_name": "node"}], "file": "jbpm-flow/src/test/java/org/jbpm/ruleflow/core/validation/RuleFlowProcessValidatorTest.java"}, "test_case": {"identifier": "testSubprocessCallActivity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSubprocessCallActivity() throws Exception {\n        RuleFlowProcess process = new RuleFlowProcess();\n        process.setId(\"org.drools.core.process.process\");\n        process.setName(\"Process\");\n\n        StartNode startNode = new StartNode();\n        startNode.setName(\"Start\");\n        startNode.setId(1);\n        process.addNode(startNode);\n        EndNode endNode = new EndNode();\n        endNode.setName(\"EndNode\");\n        endNode.setId(2);\n        process.addNode(endNode);\n        SubProcessNode subProcessNode = new SubProcessNode();\n        subProcessNode.setName(\"CallActivityNode\");\n        subProcessNode.setId(3);\n        subProcessNode.setIsCallActivity(true);\n        // dont set processid or processname\n        process.addNode(subProcessNode);\n        new org.jbpm.workflow.core.impl.ConnectionImpl(\n                startNode,\n                Node.CONNECTION_DEFAULT_TYPE,\n                subProcessNode,\n                Node.CONNECTION_DEFAULT_TYPE\n        );\n        new org.jbpm.workflow.core.impl.ConnectionImpl(\n                subProcessNode,\n                Node.CONNECTION_DEFAULT_TYPE,\n                endNode,\n                Node.CONNECTION_DEFAULT_TYPE\n        );\n\n        ProcessValidationError[] errors = validator.validateProcess(process);\n        assertNotNull(errors);\n        assertEquals(1,\n                     errors.length);\n        assertEquals(\"Node 'CallActivityNode' [3] Reusable Subprocess has no called element specified.\",\n                     errors[0].getMessage());\n\n    }", "signature": "void testSubprocessCallActivity()", "full_signature": "@Test public void testSubprocessCallActivity()", "class_method_signature": "RuleFlowProcessValidatorTest.testSubprocessCallActivity()", "testcase": true, "constructor": false, "invocations": ["setId", "setName", "setName", "setId", "addNode", "setName", "setId", "addNode", "setName", "setId", "setIsCallActivity", "addNode", "validateProcess", "assertNotNull", "assertEquals", "assertEquals", "getMessage"]}, "focal_class": {"identifier": "RuleFlowProcessValidator", "superclass": "", "interfaces": "implements ProcessValidator", "fields": [{"original_string": "public static final String ASSOCIATIONS = \"BPMN.Associations\";", "modifier": "public static final", "type": "String", "declarator": "ASSOCIATIONS = \"BPMN.Associations\"", "var_name": "ASSOCIATIONS"}, {"original_string": "private static RuleFlowProcessValidator instance;", "modifier": "private static", "type": "RuleFlowProcessValidator", "declarator": "instance", "var_name": "instance"}], "methods": [{"identifier": "RuleFlowProcessValidator", "parameters": "()", "modifiers": "private", "return": "", "signature": " RuleFlowProcessValidator()", "full_signature": "private  RuleFlowProcessValidator()", "class_method_signature": "RuleFlowProcessValidator.RuleFlowProcessValidator()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "RuleFlowProcessValidator", "signature": "RuleFlowProcessValidator getInstance()", "full_signature": "public static RuleFlowProcessValidator getInstance()", "class_method_signature": "RuleFlowProcessValidator.getInstance()", "testcase": false, "constructor": false}, {"identifier": "validateProcess", "parameters": "(final RuleFlowProcess process)", "modifiers": "public", "return": "ProcessValidationError[]", "signature": "ProcessValidationError[] validateProcess(final RuleFlowProcess process)", "full_signature": "public ProcessValidationError[] validateProcess(final RuleFlowProcess process)", "class_method_signature": "RuleFlowProcessValidator.validateProcess(final RuleFlowProcess process)", "testcase": false, "constructor": false}, {"identifier": "validateNodes", "parameters": "(Node[] nodes,\n                               List<ProcessValidationError> errors,\n                               RuleFlowProcess process)", "modifiers": "private", "return": "void", "signature": "void validateNodes(Node[] nodes,\n                               List<ProcessValidationError> errors,\n                               RuleFlowProcess process)", "full_signature": "private void validateNodes(Node[] nodes,\n                               List<ProcessValidationError> errors,\n                               RuleFlowProcess process)", "class_method_signature": "RuleFlowProcessValidator.validateNodes(Node[] nodes,\n                               List<ProcessValidationError> errors,\n                               RuleFlowProcess process)", "testcase": false, "constructor": false}, {"identifier": "checkAllNodesConnectedToStart", "parameters": "(final NodeContainer container,\n                                               boolean isDynamic,\n                                               final List<ProcessValidationError> errors,\n                                               RuleFlowProcess process)", "modifiers": "private", "return": "void", "signature": "void checkAllNodesConnectedToStart(final NodeContainer container,\n                                               boolean isDynamic,\n                                               final List<ProcessValidationError> errors,\n                                               RuleFlowProcess process)", "full_signature": "private void checkAllNodesConnectedToStart(final NodeContainer container,\n                                               boolean isDynamic,\n                                               final List<ProcessValidationError> errors,\n                                               RuleFlowProcess process)", "class_method_signature": "RuleFlowProcessValidator.checkAllNodesConnectedToStart(final NodeContainer container,\n                                               boolean isDynamic,\n                                               final List<ProcessValidationError> errors,\n                                               RuleFlowProcess process)", "testcase": false, "constructor": false}, {"identifier": "processNode", "parameters": "(final Node node,\n                             final Map<Node, Boolean> nodes)", "modifiers": "private", "return": "void", "signature": "void processNode(final Node node,\n                             final Map<Node, Boolean> nodes)", "full_signature": "private void processNode(final Node node,\n                             final Map<Node, Boolean> nodes)", "class_method_signature": "RuleFlowProcessValidator.processNode(final Node node,\n                             final Map<Node, Boolean> nodes)", "testcase": false, "constructor": false}, {"identifier": "acceptsNoIncomingConnections", "parameters": "(Node node)", "modifiers": "private", "return": "boolean", "signature": "boolean acceptsNoIncomingConnections(Node node)", "full_signature": "private boolean acceptsNoIncomingConnections(Node node)", "class_method_signature": "RuleFlowProcessValidator.acceptsNoIncomingConnections(Node node)", "testcase": false, "constructor": false}, {"identifier": "acceptsNoOutgoingConnections", "parameters": "(Node node)", "modifiers": "private", "return": "boolean", "signature": "boolean acceptsNoOutgoingConnections(Node node)", "full_signature": "private boolean acceptsNoOutgoingConnections(Node node)", "class_method_signature": "RuleFlowProcessValidator.acceptsNoOutgoingConnections(Node node)", "testcase": false, "constructor": false}, {"identifier": "validateTimer", "parameters": "(final Timer timer,\n                               final Node node,\n                               final RuleFlowProcess process,\n                               final List<ProcessValidationError> errors)", "modifiers": "private", "return": "void", "signature": "void validateTimer(final Timer timer,\n                               final Node node,\n                               final RuleFlowProcess process,\n                               final List<ProcessValidationError> errors)", "full_signature": "private void validateTimer(final Timer timer,\n                               final Node node,\n                               final RuleFlowProcess process,\n                               final List<ProcessValidationError> errors)", "class_method_signature": "RuleFlowProcessValidator.validateTimer(final Timer timer,\n                               final Node node,\n                               final RuleFlowProcess process,\n                               final List<ProcessValidationError> errors)", "testcase": false, "constructor": false}, {"identifier": "validateProcess", "parameters": "(Process process)", "modifiers": "public", "return": "ProcessValidationError[]", "signature": "ProcessValidationError[] validateProcess(Process process)", "full_signature": "public ProcessValidationError[] validateProcess(Process process)", "class_method_signature": "RuleFlowProcessValidator.validateProcess(Process process)", "testcase": false, "constructor": false}, {"identifier": "validateVariables", "parameters": "(List<ProcessValidationError> errors,\n                                   RuleFlowProcess process)", "modifiers": "private", "return": "void", "signature": "void validateVariables(List<ProcessValidationError> errors,\n                                   RuleFlowProcess process)", "full_signature": "private void validateVariables(List<ProcessValidationError> errors,\n                                   RuleFlowProcess process)", "class_method_signature": "RuleFlowProcessValidator.validateVariables(List<ProcessValidationError> errors,\n                                   RuleFlowProcess process)", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(Process process,\n                          Resource resource)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accept(Process process,\n                          Resource resource)", "full_signature": "@Override public boolean accept(Process process,\n                          Resource resource)", "class_method_signature": "RuleFlowProcessValidator.accept(Process process,\n                          Resource resource)", "testcase": false, "constructor": false}, {"identifier": "validateCompensationIntermediateOrEndEvent", "parameters": "(Node node,\n                                                              RuleFlowProcess process,\n                                                              List<ProcessValidationError> errors)", "modifiers": "protected", "return": "void", "signature": "void validateCompensationIntermediateOrEndEvent(Node node,\n                                                              RuleFlowProcess process,\n                                                              List<ProcessValidationError> errors)", "full_signature": "protected void validateCompensationIntermediateOrEndEvent(Node node,\n                                                              RuleFlowProcess process,\n                                                              List<ProcessValidationError> errors)", "class_method_signature": "RuleFlowProcessValidator.validateCompensationIntermediateOrEndEvent(Node node,\n                                                              RuleFlowProcess process,\n                                                              List<ProcessValidationError> errors)", "testcase": false, "constructor": false}, {"identifier": "compilationSupported", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean compilationSupported()", "full_signature": "@Override public boolean compilationSupported()", "class_method_signature": "RuleFlowProcessValidator.compilationSupported()", "testcase": false, "constructor": false}, {"identifier": "addErrorMessage", "parameters": "(RuleFlowProcess process,\n                                   Node node,\n                                   List<ProcessValidationError> errors,\n                                   String message)", "modifiers": "protected", "return": "void", "signature": "void addErrorMessage(RuleFlowProcess process,\n                                   Node node,\n                                   List<ProcessValidationError> errors,\n                                   String message)", "full_signature": "protected void addErrorMessage(RuleFlowProcess process,\n                                   Node node,\n                                   List<ProcessValidationError> errors,\n                                   String message)", "class_method_signature": "RuleFlowProcessValidator.addErrorMessage(RuleFlowProcess process,\n                                   Node node,\n                                   List<ProcessValidationError> errors,\n                                   String message)", "testcase": false, "constructor": false}], "file": "jbpm-flow/src/main/java/org/jbpm/ruleflow/core/validation/RuleFlowProcessValidator.java"}, "focal_method": {"identifier": "validateProcess", "parameters": "(final RuleFlowProcess process)", "modifiers": "public", "return": "ProcessValidationError[]", "body": "public ProcessValidationError[] validateProcess(final RuleFlowProcess process) {\n        final List<ProcessValidationError> errors = new ArrayList<>();\n\n        if (process.getName() == null) {\n            errors.add(new ProcessValidationErrorImpl(process,\n                                                      \"Process has no name.\"));\n        }\n\n        if (process.getId() == null || \"\".equals(process.getId())) {\n            errors.add(new ProcessValidationErrorImpl(process,\n                                                      \"Process has no id.\"));\n        }\n\n        // check start node of process\n        if (process.getStartNodes().isEmpty() && !process.isDynamic()) {\n            errors.add(new ProcessValidationErrorImpl(process,\n                                                      \"Process has no start node.\"));\n        }\n\n        // Check end node of the process.\n        if (process.getEndNodes().isEmpty() && !process.isDynamic()) {\n            errors.add(new ProcessValidationErrorImpl(process,\n                                                      \"Process has no end node.\"));\n        }\n\n        validateNodes(process.getNodes(),\n                      errors,\n                      process);\n\n        validateVariables(errors,\n                          process);\n\n        checkAllNodesConnectedToStart(process,\n                                      process.isDynamic(),\n                                      errors,\n                                      process);\n\n        return errors.toArray(new ProcessValidationError[errors.size()]);\n    }", "signature": "ProcessValidationError[] validateProcess(final RuleFlowProcess process)", "full_signature": "public ProcessValidationError[] validateProcess(final RuleFlowProcess process)", "class_method_signature": "RuleFlowProcessValidator.validateProcess(final RuleFlowProcess process)", "testcase": false, "constructor": false, "invocations": ["getName", "add", "getId", "equals", "getId", "add", "isEmpty", "getStartNodes", "isDynamic", "add", "isEmpty", "getEndNodes", "isDynamic", "add", "validateNodes", "getNodes", "validateVariables", "checkAllNodesConnectedToStart", "isDynamic", "toArray", "size"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}