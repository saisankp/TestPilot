{"test_class": {"identifier": "RightOuterToLeftOuterJoinsTest", "superclass": "extends AbstractQueryTest", "interfaces": "", "fields": [{"original_string": "private RightOuterToLeftOuterJoins rule;", "modifier": "private", "type": "RightOuterToLeftOuterJoins", "declarator": "rule", "var_name": "rule"}, {"original_string": "private QueryContext context;", "modifier": "private", "type": "QueryContext", "declarator": "context", "var_name": "context"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/query/optimize/RightOuterToLeftOuterJoinsTest.java"}, "test_case": {"identifier": "shouldDoNothingWithLeftOuterJoin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldDoNothingWithLeftOuterJoin() {\n        // Create a LEFT_OUTER join ...\n        PlanNode joinNode = new PlanNode(Type.JOIN);\n        joinNode.setProperty(Property.JOIN_TYPE, JoinType.LEFT_OUTER);\n        PlanNode lhs = new PlanNode(Type.SOURCE, joinNode);\n        PlanNode rhs = new PlanNode(Type.SOURCE, joinNode);\n\n        // Execute the rule ...\n        PlanNode result = rule.execute(context, joinNode, new LinkedList<OptimizerRule>());\n        assertThat(result, is(sameInstance(joinNode)));\n\n        // Verify nothing has changed ...\n        assertThat(joinNode.getProperty(Property.JOIN_TYPE, JoinType.class), is(JoinType.LEFT_OUTER));\n        assertThat(joinNode.getFirstChild(), is(sameInstance(lhs)));\n        assertThat(joinNode.getLastChild(), is(sameInstance(rhs)));\n        assertThat(joinNode.getChildCount(), is(2));\n    }", "signature": "void shouldDoNothingWithLeftOuterJoin()", "full_signature": "@Test public void shouldDoNothingWithLeftOuterJoin()", "class_method_signature": "RightOuterToLeftOuterJoinsTest.shouldDoNothingWithLeftOuterJoin()", "testcase": true, "constructor": false, "invocations": ["setProperty", "execute", "assertThat", "is", "sameInstance", "assertThat", "getProperty", "is", "assertThat", "getFirstChild", "is", "sameInstance", "assertThat", "getLastChild", "is", "sameInstance", "assertThat", "getChildCount", "is"]}, "focal_class": {"identifier": "RightOuterToLeftOuterJoins", "superclass": "", "interfaces": "implements OptimizerRule", "fields": [{"original_string": "public static final RightOuterToLeftOuterJoins INSTANCE = new RightOuterToLeftOuterJoins();", "modifier": "public static final", "type": "RightOuterToLeftOuterJoins", "declarator": "INSTANCE = new RightOuterToLeftOuterJoins()", "var_name": "INSTANCE"}], "methods": [{"identifier": "execute", "parameters": "( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "modifiers": "@Override public", "return": "PlanNode", "signature": "PlanNode execute( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "full_signature": "@Override public PlanNode execute( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "class_method_signature": "RightOuterToLeftOuterJoins.execute( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RightOuterToLeftOuterJoins.toString()", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/query/optimize/RightOuterToLeftOuterJoins.java"}, "focal_method": {"identifier": "execute", "parameters": "( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "modifiers": "@Override public", "return": "PlanNode", "body": "@Override\n    public PlanNode execute( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack ) {\n        // For each of the JOIN nodes ...\n        for (PlanNode joinNode : plan.findAllAtOrBelow(Type.JOIN)) {\n            if (JoinType.RIGHT_OUTER == joinNode.getProperty(Property.JOIN_TYPE, JoinType.class)) {\n                // Swap the information ...\n                PlanNode left = joinNode.getFirstChild();\n                left.removeFromParent(); // right is now the first child ...\n                left.setParent(joinNode);\n                joinNode.setProperty(Property.JOIN_TYPE, JoinType.LEFT_OUTER);\n                // None of the Constraints or JoinCondition need to be changed (they refer to named selectors) ...\n            }\n        }\n        return plan;\n    }", "signature": "PlanNode execute( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "full_signature": "@Override public PlanNode execute( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "class_method_signature": "RightOuterToLeftOuterJoins.execute( QueryContext context,\n                             PlanNode plan,\n                             LinkedList<OptimizerRule> ruleStack )", "testcase": false, "constructor": false, "invocations": ["findAllAtOrBelow", "getProperty", "getFirstChild", "removeFromParent", "setParent", "setProperty"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}