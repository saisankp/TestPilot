{"test_class": {"identifier": "DittoAckRequestsFilterTest", "superclass": "", "interfaces": "", "fields": [], "file": "protocol-adapter/src/test/java/org/eclipse/ditto/protocoladapter/DittoAckRequestsFilterTest.java"}, "test_case": {"identifier": "filterValueWithTwinPersistedOnlyAckRequest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void filterValueWithTwinPersistedOnlyAckRequest() {\n        final DittoHeaderDefinition headerDefinition = DittoHeaderDefinition.REQUESTED_ACKS;\n        final AcknowledgementRequest twinPersistedAckRequest =\n                AcknowledgementRequest.of(DittoAcknowledgementLabel.TWIN_PERSISTED);\n        final JsonArray ackRequestsJsonArray = JsonArray.newBuilder().add(twinPersistedAckRequest.toString()).build();\n\n        final DittoAckRequestsFilter underTest = DittoAckRequestsFilter.getInstance();\n\n        assertThat(underTest.apply(headerDefinition.getKey(), ackRequestsJsonArray.toString())).isNull();\n    }", "signature": "void filterValueWithTwinPersistedOnlyAckRequest()", "full_signature": "@Test public void filterValueWithTwinPersistedOnlyAckRequest()", "class_method_signature": "DittoAckRequestsFilterTest.filterValueWithTwinPersistedOnlyAckRequest()", "testcase": true, "constructor": false, "invocations": ["of", "build", "add", "newBuilder", "toString", "getInstance", "isNull", "assertThat", "apply", "getKey", "toString"]}, "focal_class": {"identifier": "DittoAckRequestsFilter", "superclass": "extends AbstractHeaderEntryFilter", "interfaces": "", "fields": [{"original_string": "private static final String TWIN_PERSISTED_ONLY_VALUE = \"[\\\"\" + DittoAcknowledgementLabel.TWIN_PERSISTED + \"\\\"]\";", "modifier": "private static final", "type": "String", "declarator": "TWIN_PERSISTED_ONLY_VALUE = \"[\\\"\" + DittoAcknowledgementLabel.TWIN_PERSISTED + \"\\\"]\"", "var_name": "TWIN_PERSISTED_ONLY_VALUE"}, {"original_string": "private static final String LIVE_RESPONSE_ONLY_VALUE = \"[\\\"\" + DittoAcknowledgementLabel.LIVE_RESPONSE + \"\\\"]\";", "modifier": "private static final", "type": "String", "declarator": "LIVE_RESPONSE_ONLY_VALUE = \"[\\\"\" + DittoAcknowledgementLabel.LIVE_RESPONSE + \"\\\"]\"", "var_name": "LIVE_RESPONSE_ONLY_VALUE"}, {"original_string": "private static final JsonValue EMPTY_JSON_STRING = JsonValue.of(\"\");", "modifier": "private static final", "type": "JsonValue", "declarator": "EMPTY_JSON_STRING = JsonValue.of(\"\")", "var_name": "EMPTY_JSON_STRING"}, {"original_string": "private static final DittoAckRequestsFilter INSTANCE = new DittoAckRequestsFilter();", "modifier": "private static final", "type": "DittoAckRequestsFilter", "declarator": "INSTANCE = new DittoAckRequestsFilter()", "var_name": "INSTANCE"}], "methods": [{"identifier": "DittoAckRequestsFilter", "parameters": "()", "modifiers": "private", "return": "", "signature": " DittoAckRequestsFilter()", "full_signature": "private  DittoAckRequestsFilter()", "class_method_signature": "DittoAckRequestsFilter.DittoAckRequestsFilter()", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "DittoAckRequestsFilter", "signature": "DittoAckRequestsFilter getInstance()", "full_signature": "public static DittoAckRequestsFilter getInstance()", "class_method_signature": "DittoAckRequestsFilter.getInstance()", "testcase": false, "constructor": false}, {"identifier": "filterValue", "parameters": "(final String key, final String value)", "modifiers": "@Override @Nullable public", "return": "String", "signature": "String filterValue(final String key, final String value)", "full_signature": "@Override @Nullable public String filterValue(final String key, final String value)", "class_method_signature": "DittoAckRequestsFilter.filterValue(final String key, final String value)", "testcase": false, "constructor": false}, {"identifier": "isTwinPersistedOnly", "parameters": "(final String value)", "modifiers": "private static", "return": "boolean", "signature": "boolean isTwinPersistedOnly(final String value)", "full_signature": "private static boolean isTwinPersistedOnly(final String value)", "class_method_signature": "DittoAckRequestsFilter.isTwinPersistedOnly(final String value)", "testcase": false, "constructor": false}, {"identifier": "isLiveResponseOnly", "parameters": "(final String value)", "modifiers": "private static", "return": "boolean", "signature": "boolean isLiveResponseOnly(final String value)", "full_signature": "private static boolean isLiveResponseOnly(final String value)", "class_method_signature": "DittoAckRequestsFilter.isLiveResponseOnly(final String value)", "testcase": false, "constructor": false}, {"identifier": "isRequestedAcks", "parameters": "(final String key)", "modifiers": "private static", "return": "boolean", "signature": "boolean isRequestedAcks(final String key)", "full_signature": "private static boolean isRequestedAcks(final String key)", "class_method_signature": "DittoAckRequestsFilter.isRequestedAcks(final String key)", "testcase": false, "constructor": false}, {"identifier": "tryToParseAsJsonArrayAndFilter", "parameters": "(final String value)", "modifiers": "@Nullable private static", "return": "String", "signature": "String tryToParseAsJsonArrayAndFilter(final String value)", "full_signature": "@Nullable private static String tryToParseAsJsonArrayAndFilter(final String value)", "class_method_signature": "DittoAckRequestsFilter.tryToParseAsJsonArrayAndFilter(final String value)", "testcase": false, "constructor": false}, {"identifier": "parseAsJsonArrayAndFilter", "parameters": "(final String value)", "modifiers": "@Nullable private static", "return": "String", "signature": "String parseAsJsonArrayAndFilter(final String value)", "full_signature": "@Nullable private static String parseAsJsonArrayAndFilter(final String value)", "class_method_signature": "DittoAckRequestsFilter.parseAsJsonArrayAndFilter(final String value)", "testcase": false, "constructor": false}, {"identifier": "isDittoInternal", "parameters": "(final JsonValue ackRequestLabelJsonValue)", "modifiers": "private static", "return": "boolean", "signature": "boolean isDittoInternal(final JsonValue ackRequestLabelJsonValue)", "full_signature": "private static boolean isDittoInternal(final JsonValue ackRequestLabelJsonValue)", "class_method_signature": "DittoAckRequestsFilter.isDittoInternal(final JsonValue ackRequestLabelJsonValue)", "testcase": false, "constructor": false}], "file": "protocol-adapter/src/main/java/org/eclipse/ditto/protocoladapter/DittoAckRequestsFilter.java"}, "focal_method": {"identifier": "getInstance", "parameters": "()", "modifiers": "public static", "return": "DittoAckRequestsFilter", "body": "public static DittoAckRequestsFilter getInstance() {\n        return INSTANCE;\n    }", "signature": "DittoAckRequestsFilter getInstance()", "full_signature": "public static DittoAckRequestsFilter getInstance()", "class_method_signature": "DittoAckRequestsFilter.getInstance()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}