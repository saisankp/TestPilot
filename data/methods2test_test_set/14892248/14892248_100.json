{"test_class": {"identifier": "ChunkCssApplierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Tag t;", "modifier": "private", "type": "Tag", "declarator": "t", "var_name": "t"}, {"original_string": "private Chunk c;", "modifier": "private", "type": "Chunk", "declarator": "c", "var_name": "c"}, {"original_string": "private final ChunkCssApplier applier = new ChunkCssApplier();", "modifier": "private final", "type": "ChunkCssApplier", "declarator": "applier = new ChunkCssApplier()", "var_name": "applier"}], "file": "xmlworker/src/test/java/com/itextpdf/tool/xml/css/apply/ChunkCssApplierTest.java"}, "test_case": {"identifier": "resolveColor", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void resolveColor() throws IOException {\n        assertEquals(BaseColor.BLACK, c.getFont().getColor());\n        t.getCSS().put(\"color\", \"#00f\");\n        c = applier.apply(c, t);\n        assertEquals(255, c.getFont().getColor().getBlue(), 0);\n        t.getCSS().put(\"color\", \"#00ff00\");\n        c = applier.apply(c, t);\n        assertEquals(255, c.getFont().getColor().getGreen(), 0);\n        t.getCSS().put(\"color\", \"rgb(255,0,0)\");\n        c = applier.apply(c, t);\n        assertEquals(255, c.getFont().getColor().getRed(), 0);\n    }", "signature": "void resolveColor()", "full_signature": "@Test public void resolveColor()", "class_method_signature": "ChunkCssApplierTest.resolveColor()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getColor", "getFont", "put", "getCSS", "apply", "assertEquals", "getBlue", "getColor", "getFont", "put", "getCSS", "apply", "assertEquals", "getGreen", "getColor", "getFont", "put", "getCSS", "apply", "assertEquals", "getRed", "getColor", "getFont"]}, "focal_class": {"identifier": "ChunkCssApplier", "superclass": "", "interfaces": "implements CssApplier<Chunk>", "fields": [{"original_string": "public static final List<String> BOLD = Arrays.asList(new String[]{\"bold\", \"bolder\", \"600\", \"700\", \"800\", \"900\"});", "modifier": "public static final", "type": "List<String>", "declarator": "BOLD = Arrays.asList(new String[]{\"bold\", \"bolder\", \"600\", \"700\", \"800\", \"900\"})", "var_name": "BOLD"}, {"original_string": "protected final CssUtils utils = CssUtils.getInstance();", "modifier": "protected final", "type": "CssUtils", "declarator": "utils = CssUtils.getInstance()", "var_name": "utils"}, {"original_string": "protected FontProvider fontProvider;", "modifier": "protected", "type": "FontProvider", "declarator": "fontProvider", "var_name": "fontProvider"}], "methods": [{"identifier": "ChunkCssApplier", "parameters": "()", "modifiers": "public", "return": "", "signature": " ChunkCssApplier()", "full_signature": "public  ChunkCssApplier()", "class_method_signature": "ChunkCssApplier.ChunkCssApplier()", "testcase": false, "constructor": true}, {"identifier": "ChunkCssApplier", "parameters": "(FontProvider fontProvider)", "modifiers": "public", "return": "", "signature": " ChunkCssApplier(FontProvider fontProvider)", "full_signature": "public  ChunkCssApplier(FontProvider fontProvider)", "class_method_signature": "ChunkCssApplier.ChunkCssApplier(FontProvider fontProvider)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(final Chunk c, final Tag t)", "modifiers": "public", "return": "Chunk", "signature": "Chunk apply(final Chunk c, final Tag t)", "full_signature": "public Chunk apply(final Chunk c, final Tag t)", "class_method_signature": "ChunkCssApplier.apply(final Chunk c, final Tag t)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(final Chunk c, final Tag t, final MarginMemory mm, final PageSizeContainable psc, final HtmlPipelineContext ctx)", "modifiers": "public", "return": "Chunk", "signature": "Chunk apply(final Chunk c, final Tag t, final MarginMemory mm, final PageSizeContainable psc, final HtmlPipelineContext ctx)", "full_signature": "public Chunk apply(final Chunk c, final Tag t, final MarginMemory mm, final PageSizeContainable psc, final HtmlPipelineContext ctx)", "class_method_signature": "ChunkCssApplier.apply(final Chunk c, final Tag t, final MarginMemory mm, final PageSizeContainable psc, final HtmlPipelineContext ctx)", "testcase": false, "constructor": false}, {"identifier": "applyFontStyles", "parameters": "(final Tag t)", "modifiers": "public", "return": "Font", "signature": "Font applyFontStyles(final Tag t)", "full_signature": "public Font applyFontStyles(final Tag t)", "class_method_signature": "ChunkCssApplier.applyFontStyles(final Tag t)", "testcase": false, "constructor": false}, {"identifier": "getWidestWord", "parameters": "(final Chunk c)", "modifiers": "public", "return": "float", "signature": "float getWidestWord(final Chunk c)", "full_signature": "public float getWidestWord(final Chunk c)", "class_method_signature": "ChunkCssApplier.getWidestWord(final Chunk c)", "testcase": false, "constructor": false}, {"identifier": "copyChunkStyles", "parameters": "(final Chunk source, final Chunk target)", "modifiers": "public", "return": "void", "signature": "void copyChunkStyles(final Chunk source, final Chunk target)", "full_signature": "public void copyChunkStyles(final Chunk source, final Chunk target)", "class_method_signature": "ChunkCssApplier.copyChunkStyles(final Chunk source, final Chunk target)", "testcase": false, "constructor": false}, {"identifier": "getFontProvider", "parameters": "()", "modifiers": "public", "return": "FontProvider", "signature": "FontProvider getFontProvider()", "full_signature": "public FontProvider getFontProvider()", "class_method_signature": "ChunkCssApplier.getFontProvider()", "testcase": false, "constructor": false}, {"identifier": "setFontProvider", "parameters": "(FontProvider fontProvider)", "modifiers": "public", "return": "void", "signature": "void setFontProvider(FontProvider fontProvider)", "full_signature": "public void setFontProvider(FontProvider fontProvider)", "class_method_signature": "ChunkCssApplier.setFontProvider(FontProvider fontProvider)", "testcase": false, "constructor": false}, {"identifier": "isBoldValue", "parameters": "(String value)", "modifiers": "protected", "return": "boolean", "signature": "boolean isBoldValue(String value)", "full_signature": "protected boolean isBoldValue(String value)", "class_method_signature": "ChunkCssApplier.isBoldValue(String value)", "testcase": false, "constructor": false}], "file": "xmlworker/src/main/java/com/itextpdf/tool/xml/css/apply/ChunkCssApplier.java"}, "focal_method": {"identifier": "apply", "parameters": "(final Chunk c, final Tag t)", "modifiers": "public", "return": "Chunk", "body": "public Chunk apply(final Chunk c, final Tag t) {\n        return apply(c, t, null, null, null);\n    }", "signature": "Chunk apply(final Chunk c, final Tag t)", "full_signature": "public Chunk apply(final Chunk c, final Tag t)", "class_method_signature": "ChunkCssApplier.apply(final Chunk c, final Tag t)", "testcase": false, "constructor": false, "invocations": ["apply"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}