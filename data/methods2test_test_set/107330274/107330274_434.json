{"test_class": {"identifier": "AggregatingAutoScalingServiceTest", "superclass": "extends AggregatingAutoScalingTestBase", "interfaces": "", "fields": [], "file": "titus-server-federation/src/test/java/com/netflix/titus/federation/service/AggregatingAutoScalingServiceTest.java"}, "test_case": {"identifier": "getPoliciesForJobFromTwoCells", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getPoliciesForJobFromTwoCells() {\n        ScalingPolicyID policy1 = ScalingPolicyID.newBuilder().setId(POLICY_1).build();\n        ScalingPolicyID policy2 = ScalingPolicyID.newBuilder().setId(POLICY_2).build();\n\n        ScalingPolicyResult policyOneResult = ScalingPolicyResult.newBuilder().setId(policy1).setJobId(JOB_1).build();\n        ScalingPolicyResult policyTwoResult = ScalingPolicyResult.newBuilder().setId(policy2).setJobId(JOB_2).build();\n\n        CellWithPolicies cellOneService = new CellWithPolicies(Collections.singletonList(policyOneResult));\n        CellWithPolicies cellTwoService = new CellWithPolicies(Collections.singletonList(policyTwoResult));\n\n        cellOne.getServiceRegistry().addService(cellOneService);\n        cellTwo.getServiceRegistry().addService(cellTwoService);\n\n        AssertableSubscriber<GetPolicyResult> testSubscriber = service.getJobScalingPolicies(JobId.newBuilder().setId(JOB_2).build(), JUNIT_REST_CALL_METADATA).test();\n\n        testSubscriber.awaitValueCount(1, 1, TimeUnit.SECONDS);\n\n        List<GetPolicyResult> onNextEvents = testSubscriber.getOnNextEvents();\n        assertThat(onNextEvents).isNotNull();\n        assertThat(onNextEvents.size()).isEqualTo(1);\n        assertThat(onNextEvents.get(0).getItemsCount()).isEqualTo(1);\n        assertThat(onNextEvents.get(0).getItems(0).getJobId()).isEqualTo(JOB_2);\n\n        // Bad policy id, currently each Cell returns an empty result\n        testSubscriber = service.getJobScalingPolicies(JobId.newBuilder().setId(\"badID\").build(), JUNIT_REST_CALL_METADATA).test();\n        testSubscriber.awaitTerminalEvent(1, TimeUnit.SECONDS);\n        testSubscriber.assertNoErrors();\n        onNextEvents = testSubscriber.getOnNextEvents();\n        assertThat(onNextEvents).isNotNull();\n        assertThat(onNextEvents.size()).isEqualTo(1);\n        assertThat(onNextEvents.get(0).getItemsCount()).isEqualTo(0);\n    }", "signature": "void getPoliciesForJobFromTwoCells()", "full_signature": "@Test public void getPoliciesForJobFromTwoCells()", "class_method_signature": "AggregatingAutoScalingServiceTest.getPoliciesForJobFromTwoCells()", "testcase": true, "constructor": false, "invocations": ["build", "setId", "newBuilder", "build", "setId", "newBuilder", "build", "setJobId", "setId", "newBuilder", "build", "setJobId", "setId", "newBuilder", "singletonList", "singletonList", "addService", "getServiceRegistry", "addService", "getServiceRegistry", "test", "getJobScalingPolicies", "build", "setId", "newBuilder", "awaitValueCount", "getOnNextEvents", "isNotNull", "assertThat", "isEqualTo", "assertThat", "size", "isEqualTo", "assertThat", "getItemsCount", "get", "isEqualTo", "assertThat", "getJobId", "getItems", "get", "test", "getJobScalingPolicies", "build", "setId", "newBuilder", "awaitTerminalEvent", "assertNoErrors", "getOnNextEvents", "isNotNull", "assertThat", "isEqualTo", "assertThat", "size", "isEqualTo", "assertThat", "getItemsCount", "get"]}, "focal_class": {"identifier": "AggregatingAutoScalingService", "superclass": "", "interfaces": "implements AutoScalingService", "fields": [{"original_string": "private final CellConnector connector;", "modifier": "private final", "type": "CellConnector", "declarator": "connector", "var_name": "connector"}, {"original_string": "private final AggregatingCellClient aggregatingClient;", "modifier": "private final", "type": "AggregatingCellClient", "declarator": "aggregatingClient", "var_name": "aggregatingClient"}, {"original_string": "private final GrpcConfiguration grpcConfiguration;", "modifier": "private final", "type": "GrpcConfiguration", "declarator": "grpcConfiguration", "var_name": "grpcConfiguration"}, {"original_string": "private final AggregatingJobManagementServiceHelper jobManagementServiceHelper;", "modifier": "private final", "type": "AggregatingJobManagementServiceHelper", "declarator": "jobManagementServiceHelper", "var_name": "jobManagementServiceHelper"}], "methods": [{"identifier": "AggregatingAutoScalingService", "parameters": "(CellConnector connector,\n                                         GrpcConfiguration configuration,\n                                         AggregatingJobManagementServiceHelper jobManagementServiceHelper,\n                                         AggregatingCellClient aggregatingClient)", "modifiers": "@Inject public", "return": "", "signature": " AggregatingAutoScalingService(CellConnector connector,\n                                         GrpcConfiguration configuration,\n                                         AggregatingJobManagementServiceHelper jobManagementServiceHelper,\n                                         AggregatingCellClient aggregatingClient)", "full_signature": "@Inject public  AggregatingAutoScalingService(CellConnector connector,\n                                         GrpcConfiguration configuration,\n                                         AggregatingJobManagementServiceHelper jobManagementServiceHelper,\n                                         AggregatingCellClient aggregatingClient)", "class_method_signature": "AggregatingAutoScalingService.AggregatingAutoScalingService(CellConnector connector,\n                                         GrpcConfiguration configuration,\n                                         AggregatingJobManagementServiceHelper jobManagementServiceHelper,\n                                         AggregatingCellClient aggregatingClient)", "testcase": false, "constructor": true}, {"identifier": "getJobScalingPolicies", "parameters": "(JobId jobId, CallMetadata callMetadata)", "modifiers": "@Override public", "return": "Observable<GetPolicyResult>", "signature": "Observable<GetPolicyResult> getJobScalingPolicies(JobId jobId, CallMetadata callMetadata)", "full_signature": "@Override public Observable<GetPolicyResult> getJobScalingPolicies(JobId jobId, CallMetadata callMetadata)", "class_method_signature": "AggregatingAutoScalingService.getJobScalingPolicies(JobId jobId, CallMetadata callMetadata)", "testcase": false, "constructor": false}, {"identifier": "getJobScalingPoliciesInCell", "parameters": "(JobId jobId, CallMetadata callMetadata)", "modifiers": "private", "return": "ClientCall<GetPolicyResult>", "signature": "ClientCall<GetPolicyResult> getJobScalingPoliciesInCell(JobId jobId, CallMetadata callMetadata)", "full_signature": "private ClientCall<GetPolicyResult> getJobScalingPoliciesInCell(JobId jobId, CallMetadata callMetadata)", "class_method_signature": "AggregatingAutoScalingService.getJobScalingPoliciesInCell(JobId jobId, CallMetadata callMetadata)", "testcase": false, "constructor": false}, {"identifier": "setAutoScalingPolicy", "parameters": "(PutPolicyRequest request, CallMetadata callMetadata)", "modifiers": "@Override public", "return": "Observable<ScalingPolicyID>", "signature": "Observable<ScalingPolicyID> setAutoScalingPolicy(PutPolicyRequest request, CallMetadata callMetadata)", "full_signature": "@Override public Observable<ScalingPolicyID> setAutoScalingPolicy(PutPolicyRequest request, CallMetadata callMetadata)", "class_method_signature": "AggregatingAutoScalingService.setAutoScalingPolicy(PutPolicyRequest request, CallMetadata callMetadata)", "testcase": false, "constructor": false}, {"identifier": "getScalingPolicy", "parameters": "(ScalingPolicyID request, CallMetadata callMetadata)", "modifiers": "@Override public", "return": "Observable<GetPolicyResult>", "signature": "Observable<GetPolicyResult> getScalingPolicy(ScalingPolicyID request, CallMetadata callMetadata)", "full_signature": "@Override public Observable<GetPolicyResult> getScalingPolicy(ScalingPolicyID request, CallMetadata callMetadata)", "class_method_signature": "AggregatingAutoScalingService.getScalingPolicy(ScalingPolicyID request, CallMetadata callMetadata)", "testcase": false, "constructor": false}, {"identifier": "getScalingPolicyInAllCells", "parameters": "(ScalingPolicyID request,\n                                                                                                         CallMetadata callMetadata)", "modifiers": "private", "return": "Observable<CellResponse<AutoScalingServiceStub, GetPolicyResult>>", "signature": "Observable<CellResponse<AutoScalingServiceStub, GetPolicyResult>> getScalingPolicyInAllCells(ScalingPolicyID request,\n                                                                                                         CallMetadata callMetadata)", "full_signature": "private Observable<CellResponse<AutoScalingServiceStub, GetPolicyResult>> getScalingPolicyInAllCells(ScalingPolicyID request,\n                                                                                                         CallMetadata callMetadata)", "class_method_signature": "AggregatingAutoScalingService.getScalingPolicyInAllCells(ScalingPolicyID request,\n                                                                                                         CallMetadata callMetadata)", "testcase": false, "constructor": false}, {"identifier": "getScalingPolicyInCell", "parameters": "(ScalingPolicyID request, CallMetadata callMetadata)", "modifiers": "private", "return": "ClientCall<GetPolicyResult>", "signature": "ClientCall<GetPolicyResult> getScalingPolicyInCell(ScalingPolicyID request, CallMetadata callMetadata)", "full_signature": "private ClientCall<GetPolicyResult> getScalingPolicyInCell(ScalingPolicyID request, CallMetadata callMetadata)", "class_method_signature": "AggregatingAutoScalingService.getScalingPolicyInCell(ScalingPolicyID request, CallMetadata callMetadata)", "testcase": false, "constructor": false}, {"identifier": "getAllScalingPolicies", "parameters": "(CallMetadata callMetadata)", "modifiers": "@Override public", "return": "Observable<GetPolicyResult>", "signature": "Observable<GetPolicyResult> getAllScalingPolicies(CallMetadata callMetadata)", "full_signature": "@Override public Observable<GetPolicyResult> getAllScalingPolicies(CallMetadata callMetadata)", "class_method_signature": "AggregatingAutoScalingService.getAllScalingPolicies(CallMetadata callMetadata)", "testcase": false, "constructor": false}, {"identifier": "getAllScalingPoliciesInCell", "parameters": "(CallMetadata callMetadata)", "modifiers": "private", "return": "ClientCall<GetPolicyResult>", "signature": "ClientCall<GetPolicyResult> getAllScalingPoliciesInCell(CallMetadata callMetadata)", "full_signature": "private ClientCall<GetPolicyResult> getAllScalingPoliciesInCell(CallMetadata callMetadata)", "class_method_signature": "AggregatingAutoScalingService.getAllScalingPoliciesInCell(CallMetadata callMetadata)", "testcase": false, "constructor": false}, {"identifier": "deleteAutoScalingPolicy", "parameters": "(DeletePolicyRequest request, CallMetadata callMetadata)", "modifiers": "@Override public", "return": "Completable", "signature": "Completable deleteAutoScalingPolicy(DeletePolicyRequest request, CallMetadata callMetadata)", "full_signature": "@Override public Completable deleteAutoScalingPolicy(DeletePolicyRequest request, CallMetadata callMetadata)", "class_method_signature": "AggregatingAutoScalingService.deleteAutoScalingPolicy(DeletePolicyRequest request, CallMetadata callMetadata)", "testcase": false, "constructor": false}, {"identifier": "updateAutoScalingPolicy", "parameters": "(UpdatePolicyRequest request, CallMetadata callMetadata)", "modifiers": "@Override public", "return": "Completable", "signature": "Completable updateAutoScalingPolicy(UpdatePolicyRequest request, CallMetadata callMetadata)", "full_signature": "@Override public Completable updateAutoScalingPolicy(UpdatePolicyRequest request, CallMetadata callMetadata)", "class_method_signature": "AggregatingAutoScalingService.updateAutoScalingPolicy(UpdatePolicyRequest request, CallMetadata callMetadata)", "testcase": false, "constructor": false}, {"identifier": "singleCellCall", "parameters": "(Cell cell, ClientCall<T> clientCall, CallMetadata callMetadata)", "modifiers": "private", "return": "Observable<T>", "signature": "Observable<T> singleCellCall(Cell cell, ClientCall<T> clientCall, CallMetadata callMetadata)", "full_signature": "private Observable<T> singleCellCall(Cell cell, ClientCall<T> clientCall, CallMetadata callMetadata)", "class_method_signature": "AggregatingAutoScalingService.singleCellCall(Cell cell, ClientCall<T> clientCall, CallMetadata callMetadata)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(STUB stub, CallMetadata callMetadata)", "modifiers": "private", "return": "STUB", "signature": "STUB wrap(STUB stub, CallMetadata callMetadata)", "full_signature": "private STUB wrap(STUB stub, CallMetadata callMetadata)", "class_method_signature": "AggregatingAutoScalingService.wrap(STUB stub, CallMetadata callMetadata)", "testcase": false, "constructor": false}], "file": "titus-server-federation/src/main/java/com/netflix/titus/federation/service/AggregatingAutoScalingService.java"}, "focal_method": {"identifier": "getJobScalingPolicies", "parameters": "(JobId jobId, CallMetadata callMetadata)", "modifiers": "@Override public", "return": "Observable<GetPolicyResult>", "body": "@Override\n    public Observable<GetPolicyResult> getJobScalingPolicies(JobId jobId, CallMetadata callMetadata) {\n        return aggregatingClient.callExpectingErrors(AutoScalingServiceGrpc::newStub, getJobScalingPoliciesInCell(jobId, callMetadata))\n                .filter(response -> response.getResult().hasError() || response.getResult().getValue().getItemsCount() > 0)\n                .reduce(ResponseMerger.emptyResponseMarker(), ResponseMerger.singleValue())\n                .filter(ResponseMerger::isNotEmptyResponseMarker)\n                .flatMap(response -> response.getResult()\n                        .map(Observable::just)\n                        .onErrorGet(Observable::error)\n                )\n                .switchIfEmpty(Observable.just(GetPolicyResult.newBuilder().build()));\n    }", "signature": "Observable<GetPolicyResult> getJobScalingPolicies(JobId jobId, CallMetadata callMetadata)", "full_signature": "@Override public Observable<GetPolicyResult> getJobScalingPolicies(JobId jobId, CallMetadata callMetadata)", "class_method_signature": "AggregatingAutoScalingService.getJobScalingPolicies(JobId jobId, CallMetadata callMetadata)", "testcase": false, "constructor": false, "invocations": ["switchIfEmpty", "flatMap", "filter", "reduce", "filter", "callExpectingErrors", "getJobScalingPoliciesInCell", "hasError", "getResult", "getItemsCount", "getValue", "getResult", "emptyResponseMarker", "singleValue", "onErrorGet", "map", "getResult", "just", "build", "newBuilder"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}