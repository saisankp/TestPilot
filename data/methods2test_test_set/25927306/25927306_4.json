{"test_class": {"identifier": "SRVDNSResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(SRVDNSResolverTest.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SRVDNSResolverTest.class)", "var_name": "logger"}, {"original_string": "private DNSContextFactory contextFactory;", "modifier": "private", "type": "DNSContextFactory", "declarator": "contextFactory", "var_name": "contextFactory"}], "file": "core/src/test/java/org/ldaptive/dns/SRVDNSResolverTest.java"}, "test_case": {"identifier": "resolveCustom", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test @Ignore\n  public void resolveCustom()\n  {\n    final String nameserver = System.getProperty(\"SRVDNSResolverTest.nameserver\");\n    final SRVDNSResolver resolver;\n    if (nameserver == null) {\n      resolver = new SRVDNSResolver(new DefaultDNSContextFactory());\n    } else {\n      resolver = new SRVDNSResolver(new DefaultDNSContextFactory(nameserver));\n    }\n    final String recordName = System.getProperty(\"SRVDNSResolverTest.name\");\n    final Set<SRVRecord> records = resolver.resolve(recordName);\n    Assert.assertTrue(records.size() > 0);\n  }", "signature": "void resolveCustom()", "full_signature": "@Test @Ignore public void resolveCustom()", "class_method_signature": "SRVDNSResolverTest.resolveCustom()", "testcase": true, "constructor": false, "invocations": ["getProperty", "getProperty", "resolve", "assertTrue", "size"]}, "focal_class": {"identifier": "SRVDNSResolver", "superclass": "extends AbstractDNSResolver<SRVRecord>", "interfaces": "", "fields": [{"original_string": "private static final String[] ATTRIBUTES = {\"SRV\", };", "modifier": "private static final", "type": "String[]", "declarator": "ATTRIBUTES = {\"SRV\", }", "var_name": "ATTRIBUTES"}, {"original_string": "private static final String DEFAULT_RECORD_NAME = \"_ldap._tcp\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_RECORD_NAME = \"_ldap._tcp\"", "var_name": "DEFAULT_RECORD_NAME"}, {"original_string": "private boolean useSSL;", "modifier": "private", "type": "boolean", "declarator": "useSSL", "var_name": "useSSL"}], "methods": [{"identifier": "SRVDNSResolver", "parameters": "()", "modifiers": "public", "return": "", "signature": " SRVDNSResolver()", "full_signature": "public  SRVDNSResolver()", "class_method_signature": "SRVDNSResolver.SRVDNSResolver()", "testcase": false, "constructor": true}, {"identifier": "SRVDNSResolver", "parameters": "(final DNSContextFactory factory)", "modifiers": "public", "return": "", "signature": " SRVDNSResolver(final DNSContextFactory factory)", "full_signature": "public  SRVDNSResolver(final DNSContextFactory factory)", "class_method_signature": "SRVDNSResolver.SRVDNSResolver(final DNSContextFactory factory)", "testcase": false, "constructor": true}, {"identifier": "SRVDNSResolver", "parameters": "(final DNSContextFactory factory, final boolean ssl)", "modifiers": "public", "return": "", "signature": " SRVDNSResolver(final DNSContextFactory factory, final boolean ssl)", "full_signature": "public  SRVDNSResolver(final DNSContextFactory factory, final boolean ssl)", "class_method_signature": "SRVDNSResolver.SRVDNSResolver(final DNSContextFactory factory, final boolean ssl)", "testcase": false, "constructor": true}, {"identifier": "resolve", "parameters": "(final String name)", "modifiers": "@Override public", "return": "Set<SRVRecord>", "signature": "Set<SRVRecord> resolve(final String name)", "full_signature": "@Override public Set<SRVRecord> resolve(final String name)", "class_method_signature": "SRVDNSResolver.resolve(final String name)", "testcase": false, "constructor": false}, {"identifier": "getAttributes", "parameters": "()", "modifiers": "@Override protected", "return": "String[]", "signature": "String[] getAttributes()", "full_signature": "@Override protected String[] getAttributes()", "class_method_signature": "SRVDNSResolver.getAttributes()", "testcase": false, "constructor": false}, {"identifier": "processRecords", "parameters": "(final Set<String> records)", "modifiers": "@Override protected", "return": "Set<SRVRecord>", "signature": "Set<SRVRecord> processRecords(final Set<String> records)", "full_signature": "@Override protected Set<SRVRecord> processRecords(final Set<String> records)", "class_method_signature": "SRVDNSResolver.processRecords(final Set<String> records)", "testcase": false, "constructor": false}, {"identifier": "sortSrvRecords", "parameters": "(final Set<SRVRecord> records)", "modifiers": "protected", "return": "Set<SRVRecord>", "signature": "Set<SRVRecord> sortSrvRecords(final Set<SRVRecord> records)", "full_signature": "protected Set<SRVRecord> sortSrvRecords(final Set<SRVRecord> records)", "class_method_signature": "SRVDNSResolver.sortSrvRecords(final Set<SRVRecord> records)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SRVDNSResolver.toString()", "testcase": false, "constructor": false}], "file": "core/src/main/java/org/ldaptive/dns/SRVDNSResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final String name)", "modifiers": "@Override public", "return": "Set<SRVRecord>", "body": "@Override\n  public Set<SRVRecord> resolve(final String name)\n  {\n    if (name == null) {\n      return super.resolve(DEFAULT_RECORD_NAME);\n    }\n    return super.resolve(name);\n  }", "signature": "Set<SRVRecord> resolve(final String name)", "full_signature": "@Override public Set<SRVRecord> resolve(final String name)", "class_method_signature": "SRVDNSResolver.resolve(final String name)", "testcase": false, "constructor": false, "invocations": ["resolve", "resolve"]}, "repository": {"repo_id": 25927306, "url": "https://github.com/vt-middleware/ldaptive", "stars": 32, "created": "10/29/2014 3:27:31 PM +00:00", "updates": "2020-01-14T22:18:12+00:00", "fork": "False", "license": "licensed"}}