{"test_class": {"identifier": "RepositoryTodoSearchServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CREATION_TIME_STRING = TestDateUtil.CURRENT_TIMESTAMP;", "modifier": "private static final", "type": "String", "declarator": "CREATION_TIME_STRING = TestDateUtil.CURRENT_TIMESTAMP", "var_name": "CREATION_TIME_STRING"}, {"original_string": "private static final Timestamp CREATION_TIME = TestDateUtil.parseTimestamp(CREATION_TIME_STRING);", "modifier": "private static final", "type": "Timestamp", "declarator": "CREATION_TIME = TestDateUtil.parseTimestamp(CREATION_TIME_STRING)", "var_name": "CREATION_TIME"}, {"original_string": "private static final String DESCRIPTION = \"description\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"description\"", "var_name": "DESCRIPTION"}, {"original_string": "private static final Long ID = 1L;", "modifier": "private static final", "type": "Long", "declarator": "ID = 1L", "var_name": "ID"}, {"original_string": "private static final String MODIFICATION_TIME_STRING = TestDateUtil.CURRENT_TIMESTAMP;", "modifier": "private static final", "type": "String", "declarator": "MODIFICATION_TIME_STRING = TestDateUtil.CURRENT_TIMESTAMP", "var_name": "MODIFICATION_TIME_STRING"}, {"original_string": "private static final Timestamp MODIFICATION_TIME = TestDateUtil.parseTimestamp(MODIFICATION_TIME_STRING);", "modifier": "private static final", "type": "Timestamp", "declarator": "MODIFICATION_TIME = TestDateUtil.parseTimestamp(MODIFICATION_TIME_STRING)", "var_name": "MODIFICATION_TIME"}, {"original_string": "private static final String TITLE = \"title\";", "modifier": "private static final", "type": "String", "declarator": "TITLE = \"title\"", "var_name": "TITLE"}, {"original_string": "private static final String SEARCH_TERM = \"title\";", "modifier": "private static final", "type": "String", "declarator": "SEARCH_TERM = \"title\"", "var_name": "SEARCH_TERM"}, {"original_string": "private static final int PAGE_NUMBER = 0;", "modifier": "private static final", "type": "int", "declarator": "PAGE_NUMBER = 0", "var_name": "PAGE_NUMBER"}, {"original_string": "private static final int PAGE_SIZE = 10;", "modifier": "private static final", "type": "int", "declarator": "PAGE_SIZE = 10", "var_name": "PAGE_SIZE"}, {"original_string": "private static final Sort SORT = mock(Sort.class);", "modifier": "private static final", "type": "Sort", "declarator": "SORT = mock(Sort.class)", "var_name": "SORT"}, {"original_string": "private static final int ONE_ELEMENT_ON_PAGE = 1;", "modifier": "private static final", "type": "int", "declarator": "ONE_ELEMENT_ON_PAGE = 1", "var_name": "ONE_ELEMENT_ON_PAGE"}, {"original_string": "private static final long ONE_ELEMENT = 1L;", "modifier": "private static final", "type": "long", "declarator": "ONE_ELEMENT = 1L", "var_name": "ONE_ELEMENT"}, {"original_string": "private static final int ONE_PAGE = 1;", "modifier": "private static final", "type": "int", "declarator": "ONE_PAGE = 1", "var_name": "ONE_PAGE"}, {"original_string": "private static final long ZERO_ELEMENTS = 0L;", "modifier": "private static final", "type": "long", "declarator": "ZERO_ELEMENTS = 0L", "var_name": "ZERO_ELEMENTS"}, {"original_string": "private static final int ZERO_PAGES = 0;", "modifier": "private static final", "type": "int", "declarator": "ZERO_PAGES = 0", "var_name": "ZERO_PAGES"}, {"original_string": "@Mock\n    private Pageable pageRequest;", "modifier": "@Mock\n    private", "type": "Pageable", "declarator": "pageRequest", "var_name": "pageRequest"}, {"original_string": "@Mock\n    private TodoRepository repositoryMock;", "modifier": "@Mock\n    private", "type": "TodoRepository", "declarator": "repositoryMock", "var_name": "repositoryMock"}, {"original_string": "private RepositoryTodoSearchService service;", "modifier": "private", "type": "RepositoryTodoSearchService", "declarator": "service", "var_name": "service"}, {"original_string": "@Autowired\n    private JTransfo transformer;", "modifier": "@Autowired\n    private", "type": "JTransfo", "declarator": "transformer", "var_name": "transformer"}], "file": "jooq-only/src/test/java/net/petrikainulainen/spring/jooq/todo/service/RepositoryTodoSearchServiceTest.java"}, "test_case": {"identifier": "findBySearchTerm_OneTodoEntryFound_ShouldReturnFoundTodoEntry", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findBySearchTerm_OneTodoEntryFound_ShouldReturnFoundTodoEntry() {\n        Todo expectedTodoEntry = Todo.getBuilder(TITLE)\n                .creationTime(CREATION_TIME)\n                .description(DESCRIPTION)\n                .id(ID)\n                .modificationTime(MODIFICATION_TIME)\n                .build();\n\n        Page<Todo> page = new PageBuilder<Todo>()\n                .itemsOnPage(expectedTodoEntry)\n                .pageNumber(PAGE_NUMBER)\n                .pageSize(PAGE_SIZE)\n                .totalNumberOfItems(ONE_ELEMENT)\n                .sort(SORT)\n                .build();\n\n        when(repositoryMock.findBySearchTerm(SEARCH_TERM, pageRequest)).thenReturn(page);\n\n        Page<TodoDTO> searchResults = service.findBySearchTerm(SEARCH_TERM, pageRequest);\n\n        verify(repositoryMock, times(1)).findBySearchTerm(SEARCH_TERM, pageRequest);\n        verifyNoMoreInteractions(repositoryMock);\n\n        assertThatPage(searchResults)\n                .isFirstPage()\n                .isLastPage()\n                .hasPageNumber(PAGE_NUMBER)\n                .hasPageSize(PAGE_SIZE)\n                .hasSort(SORT)\n                .hasNumberOfElements(ONE_ELEMENT_ON_PAGE)\n                .hasTotalNumberOfElements(ONE_ELEMENT)\n                .hasTotalNumberOfPages(ONE_PAGE);\n\n        TodoDTO found = searchResults.getContent().get(0);\n        assertThatTodoDTO(found)\n                .hasDescription(DESCRIPTION)\n                .hasId(ID)\n                .hasTitle(TITLE)\n                .wasCreatedAt(CREATION_TIME_STRING)\n                .wasModifiedAt(MODIFICATION_TIME_STRING);\n    }", "signature": "void findBySearchTerm_OneTodoEntryFound_ShouldReturnFoundTodoEntry()", "full_signature": "@Test public void findBySearchTerm_OneTodoEntryFound_ShouldReturnFoundTodoEntry()", "class_method_signature": "RepositoryTodoSearchServiceTest.findBySearchTerm_OneTodoEntryFound_ShouldReturnFoundTodoEntry()", "testcase": true, "constructor": false, "invocations": ["build", "modificationTime", "id", "description", "creationTime", "getBuilder", "build", "sort", "totalNumberOfItems", "pageSize", "pageNumber", "itemsOnPage", "thenReturn", "when", "findBySearchTerm", "findBySearchTerm", "findBySearchTerm", "verify", "times", "verifyNoMoreInteractions", "hasTotalNumberOfPages", "hasTotalNumberOfElements", "hasNumberOfElements", "hasSort", "hasPageSize", "hasPageNumber", "isLastPage", "isFirstPage", "assertThatPage", "get", "getContent", "wasModifiedAt", "wasCreatedAt", "hasTitle", "hasId", "hasDescription", "assertThatTodoDTO"]}, "focal_class": {"identifier": "RepositoryTodoSearchService", "superclass": "", "interfaces": "implements TodoSearchService", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(RepositoryTodoSearchService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(RepositoryTodoSearchService.class)", "var_name": "LOGGER"}, {"original_string": "private TodoRepository repository;", "modifier": "private", "type": "TodoRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private JTransfo transformer;", "modifier": "private", "type": "JTransfo", "declarator": "transformer", "var_name": "transformer"}], "methods": [{"identifier": "RepositoryTodoSearchService", "parameters": "(TodoRepository repository, JTransfo transformer)", "modifiers": "@Autowired public", "return": "", "signature": " RepositoryTodoSearchService(TodoRepository repository, JTransfo transformer)", "full_signature": "@Autowired public  RepositoryTodoSearchService(TodoRepository repository, JTransfo transformer)", "class_method_signature": "RepositoryTodoSearchService.RepositoryTodoSearchService(TodoRepository repository, JTransfo transformer)", "testcase": false, "constructor": true}, {"identifier": "findBySearchTerm", "parameters": "(String searchTerm, Pageable pageable)", "modifiers": "@Transactional(readOnly = true) @Override public", "return": "Page<TodoDTO>", "signature": "Page<TodoDTO> findBySearchTerm(String searchTerm, Pageable pageable)", "full_signature": "@Transactional(readOnly = true) @Override public Page<TodoDTO> findBySearchTerm(String searchTerm, Pageable pageable)", "class_method_signature": "RepositoryTodoSearchService.findBySearchTerm(String searchTerm, Pageable pageable)", "testcase": false, "constructor": false}], "file": "jooq-only/src/main/java/net/petrikainulainen/spring/jooq/todo/service/RepositoryTodoSearchService.java"}, "focal_method": {"identifier": "findBySearchTerm", "parameters": "(String searchTerm, Pageable pageable)", "modifiers": "@Transactional(readOnly = true) @Override public", "return": "Page<TodoDTO>", "body": "@Transactional(readOnly = true)\n    @Override\n    public Page<TodoDTO> findBySearchTerm(String searchTerm, Pageable pageable) {\n        LOGGER.info(\"Finding {} todo entries for page {} by using search term: {}\",\n                pageable.getPageSize(),\n                pageable.getPageNumber(),\n                searchTerm\n        );\n\n        Page<Todo> searchResults = repository.findBySearchTerm(searchTerm, pageable);\n        LOGGER.info(\"Found {} todo entries for page: {}\",\n                searchResults.getNumberOfElements(),\n                searchResults.getNumber()\n        );\n\n        List<TodoDTO> dtos = transformer.convertList(searchResults.getContent(), TodoDTO.class);\n\n        return new PageImpl<>(dtos,\n                new PageRequest(searchResults.getNumber(), searchResults.getSize(), searchResults.getSort()),\n                searchResults.getTotalElements()\n        );\n    }", "signature": "Page<TodoDTO> findBySearchTerm(String searchTerm, Pageable pageable)", "full_signature": "@Transactional(readOnly = true) @Override public Page<TodoDTO> findBySearchTerm(String searchTerm, Pageable pageable)", "class_method_signature": "RepositoryTodoSearchService.findBySearchTerm(String searchTerm, Pageable pageable)", "testcase": false, "constructor": false, "invocations": ["info", "getPageSize", "getPageNumber", "findBySearchTerm", "info", "getNumberOfElements", "getNumber", "convertList", "getContent", "getNumber", "getSize", "getSort", "getTotalElements"]}, "repository": {"repo_id": 15566188, "url": "https://github.com/pkainulainen/jooq-with-spring-examples", "language": "Java", "is_fork": false, "fork_count": 51, "stargazer_count": 70, "size": 370, "license": "licensed"}}