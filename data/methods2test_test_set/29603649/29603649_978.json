{"test_class": {"identifier": "FileReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FILE_NAME = \"file\";", "modifier": "private static final", "type": "String", "declarator": "FILE_NAME = \"file\"", "var_name": "FILE_NAME"}, {"original_string": "@InjectMocks\n    private FileReader underTest;", "modifier": "@InjectMocks\n    private", "type": "FileReader", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private FileInputStreamFactory fileInputStreamFactory;", "modifier": "@Mock\n    private", "type": "FileInputStreamFactory", "declarator": "fileInputStreamFactory", "var_name": "fileInputStreamFactory"}, {"original_string": "@Mock\n    private Path messageFilePath;", "modifier": "@Mock\n    private", "type": "Path", "declarator": "messageFilePath", "var_name": "messageFilePath"}, {"original_string": "@Mock\n    private Path messageDirPath;", "modifier": "@Mock\n    private", "type": "Path", "declarator": "messageDirPath", "var_name": "messageDirPath"}, {"original_string": "@Mock\n    private File messageFile;", "modifier": "@Mock\n    private", "type": "File", "declarator": "messageFile", "var_name": "messageFile"}, {"original_string": "@Mock\n    private FileInputStream fileInputStream;", "modifier": "@Mock\n    private", "type": "FileInputStream", "declarator": "fileInputStream", "var_name": "fileInputStream"}, {"original_string": "@Mock\n    private Logger logger;", "modifier": "@Mock\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "@Mock\n    private Path path;", "modifier": "@Mock\n    private", "type": "Path", "declarator": "path", "var_name": "path"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/config/servlet/helper/FileReaderTest.java"}, "test_case": {"identifier": "testReadFileShouldReturnNullWhenRequestedFileIsNotAFile", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n    public final void testReadFileShouldReturnNullWhenRequestedFileIsNotAFile() {\n        // GIVEN\n        given(path.resolve(FILE_NAME)).willReturn(messageFilePath);\n        given(messageFilePath.toFile()).willReturn(messageFile);\n        given(messageFile.isFile()).willReturn(false);\n        given(messageFile.exists()).willReturn(false);\n        // WHEN\n        InputStream actual = underTest.readFile(FILE_NAME, path);\n        // THEN\n        assertNull(actual);\n    }", "signature": "void testReadFileShouldReturnNullWhenRequestedFileIsNotAFile()", "full_signature": "@Test public final void testReadFileShouldReturnNullWhenRequestedFileIsNotAFile()", "class_method_signature": "FileReaderTest.testReadFileShouldReturnNullWhenRequestedFileIsNotAFile()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "resolve", "willReturn", "given", "toFile", "willReturn", "given", "isFile", "willReturn", "given", "exists", "readFile", "assertNull"]}, "focal_class": {"identifier": "FileReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(FileReader.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(FileReader.class)", "var_name": "logger"}, {"original_string": "@Autowired\n    private FileInputStreamFactory fileInputStreamFactory;", "modifier": "@Autowired\n    private", "type": "FileInputStreamFactory", "declarator": "fileInputStreamFactory", "var_name": "fileInputStreamFactory"}], "methods": [{"identifier": "readFile", "parameters": "(final String filename, final Path filePath)", "modifiers": "public", "return": "InputStream", "signature": "InputStream readFile(final String filename, final Path filePath)", "full_signature": "public InputStream readFile(final String filename, final Path filePath)", "class_method_signature": "FileReader.readFile(final String filename, final Path filePath)", "testcase": false, "constructor": false}, {"identifier": "getFile", "parameters": "(final String filename, final Path filePath)", "modifiers": "private", "return": "File", "signature": "File getFile(final String filename, final Path filePath)", "full_signature": "private File getFile(final String filename, final Path filePath)", "class_method_signature": "FileReader.getFile(final String filename, final Path filePath)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/config/servlet/helper/FileReader.java"}, "focal_method": {"identifier": "readFile", "parameters": "(final String filename, final Path filePath)", "modifiers": "public", "return": "InputStream", "body": "public InputStream readFile(final String filename, final Path filePath) {\n        File requestedFile = getFile(filename, filePath);\n        InputStream fileInputStream = null;\n        if (requestedFile.isFile()) {\n            if (requestedFile.exists()) {\n                try {\n                    fileInputStream = fileInputStreamFactory.createFileInputStream(requestedFile);\n                } catch (FileNotFoundException e) {\n                    logger.warn(\"Message file not found!\", e);\n                }\n            }\n        }\n        return fileInputStream;\n    }", "signature": "InputStream readFile(final String filename, final Path filePath)", "full_signature": "public InputStream readFile(final String filename, final Path filePath)", "class_method_signature": "FileReader.readFile(final String filename, final Path filePath)", "testcase": false, "constructor": false, "invocations": ["getFile", "isFile", "exists", "createFileInputStream", "warn"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}