{"test_class": {"identifier": "RuleModelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RuleModel model;", "modifier": "private", "type": "RuleModel", "declarator": "model", "var_name": "model"}], "file": "drools-workbench-models/drools-workbench-models-datamodel-api/src/test/java/org/drools/workbench/models/datamodel/rule/RuleModelTest.java"}, "test_case": {"identifier": "checkGetLHSFieldVariables", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void checkGetLHSFieldVariables() {\n        final List<String> allLHSVariables = model.getLHSVariables(false,\n                                                                   true);\n        assertEquals(3,\n                     allLHSVariables.size());\n        assertTrue(allLHSVariables.contains(\"$sfc1\"));\n        assertTrue(allLHSVariables.contains(\"$sfc2\"));\n        assertTrue(allLHSVariables.contains(\"$sfc3\"));\n    }", "signature": "void checkGetLHSFieldVariables()", "full_signature": "@Test public void checkGetLHSFieldVariables()", "class_method_signature": "RuleModelTest.checkGetLHSFieldVariables()", "testcase": true, "constructor": false, "invocations": ["getLHSVariables", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "RuleModel", "superclass": "", "interfaces": "implements HasImports,\n                                  HasPackageName", "fields": [{"original_string": "public static final String DEFAULT_TYPE = \"DEFAULT_TYPE\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_TYPE = \"DEFAULT_TYPE\"", "var_name": "DEFAULT_TYPE"}, {"original_string": "public String name;", "modifier": "public", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "public String parentName;", "modifier": "public", "type": "String", "declarator": "parentName", "var_name": "parentName"}, {"original_string": "public String modelVersion = \"1.0\";", "modifier": "public", "type": "String", "declarator": "modelVersion = \"1.0\"", "var_name": "modelVersion"}, {"original_string": "public RuleAttribute[] attributes = new RuleAttribute[0];", "modifier": "public", "type": "RuleAttribute[]", "declarator": "attributes = new RuleAttribute[0]", "var_name": "attributes"}, {"original_string": "public RuleMetadata[] metadataList = new RuleMetadata[0];", "modifier": "public", "type": "RuleMetadata[]", "declarator": "metadataList = new RuleMetadata[0]", "var_name": "metadataList"}, {"original_string": "public IPattern[] lhs = new IPattern[0];", "modifier": "public", "type": "IPattern[]", "declarator": "lhs = new IPattern[0]", "var_name": "lhs"}, {"original_string": "public IAction[] rhs = new IAction[0];", "modifier": "public", "type": "IAction[]", "declarator": "rhs = new IAction[0]", "var_name": "rhs"}, {"original_string": "private Imports imports = new Imports();", "modifier": "private", "type": "Imports", "declarator": "imports = new Imports()", "var_name": "imports"}, {"original_string": "private String packageName;", "modifier": "private", "type": "String", "declarator": "packageName", "var_name": "packageName"}, {"original_string": "private boolean isNegated;", "modifier": "private", "type": "boolean", "declarator": "isNegated", "var_name": "isNegated"}], "methods": [{"identifier": "RuleModel", "parameters": "()", "modifiers": "public", "return": "", "signature": " RuleModel()", "full_signature": "public  RuleModel()", "class_method_signature": "RuleModel.RuleModel()", "testcase": false, "constructor": true}, {"identifier": "getLHSBoundFacts", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getLHSBoundFacts()", "full_signature": "public List<String> getLHSBoundFacts()", "class_method_signature": "RuleModel.getLHSBoundFacts()", "testcase": false, "constructor": false}, {"identifier": "getLHSBoundFact", "parameters": "(final String var)", "modifiers": "public", "return": "FactPattern", "signature": "FactPattern getLHSBoundFact(final String var)", "full_signature": "public FactPattern getLHSBoundFact(final String var)", "class_method_signature": "RuleModel.getLHSBoundFact(final String var)", "testcase": false, "constructor": false}, {"identifier": "getLHSBoundField", "parameters": "(final String var)", "modifiers": "public", "return": "SingleFieldConstraint", "signature": "SingleFieldConstraint getLHSBoundField(final String var)", "full_signature": "public SingleFieldConstraint getLHSBoundField(final String var)", "class_method_signature": "RuleModel.getLHSBoundField(final String var)", "testcase": false, "constructor": false}, {"identifier": "getLHSBoundField", "parameters": "(IPattern pat,\n                                                   String var)", "modifiers": "private", "return": "SingleFieldConstraint", "signature": "SingleFieldConstraint getLHSBoundField(IPattern pat,\n                                                   String var)", "full_signature": "private SingleFieldConstraint getLHSBoundField(IPattern pat,\n                                                   String var)", "class_method_signature": "RuleModel.getLHSBoundField(IPattern pat,\n                                                   String var)", "testcase": false, "constructor": false}, {"identifier": "getLHSBindingType", "parameters": "(final String var)", "modifiers": "public", "return": "String", "signature": "String getLHSBindingType(final String var)", "full_signature": "public String getLHSBindingType(final String var)", "class_method_signature": "RuleModel.getLHSBindingType(final String var)", "testcase": false, "constructor": false}, {"identifier": "getLHSBindingType", "parameters": "(IPattern pat,\n                                     String var)", "modifiers": "private", "return": "String", "signature": "String getLHSBindingType(IPattern pat,\n                                     String var)", "full_signature": "private String getLHSBindingType(IPattern pat,\n                                     String var)", "class_method_signature": "RuleModel.getLHSBindingType(IPattern pat,\n                                     String var)", "testcase": false, "constructor": false}, {"identifier": "getFieldBinding", "parameters": "(FieldConstraint fc,\n                                  String var)", "modifiers": "public", "return": "String", "signature": "String getFieldBinding(FieldConstraint fc,\n                                  String var)", "full_signature": "public String getFieldBinding(FieldConstraint fc,\n                                  String var)", "class_method_signature": "RuleModel.getFieldBinding(FieldConstraint fc,\n                                  String var)", "testcase": false, "constructor": false}, {"identifier": "getRHSBoundFacts", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getRHSBoundFacts()", "full_signature": "public List<String> getRHSBoundFacts()", "class_method_signature": "RuleModel.getRHSBoundFacts()", "testcase": false, "constructor": false}, {"identifier": "getRHSBoundFact", "parameters": "(final String var)", "modifiers": "public", "return": "ActionInsertFact", "signature": "ActionInsertFact getRHSBoundFact(final String var)", "full_signature": "public ActionInsertFact getRHSBoundFact(final String var)", "class_method_signature": "RuleModel.getRHSBoundFact(final String var)", "testcase": false, "constructor": false}, {"identifier": "getLHSParentFactPatternForBinding", "parameters": "(final String var)", "modifiers": "public", "return": "FactPattern", "signature": "FactPattern getLHSParentFactPatternForBinding(final String var)", "full_signature": "public FactPattern getLHSParentFactPatternForBinding(final String var)", "class_method_signature": "RuleModel.getLHSParentFactPatternForBinding(final String var)", "testcase": false, "constructor": false}, {"identifier": "getAllLHSVariables", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAllLHSVariables()", "full_signature": "public List<String> getAllLHSVariables()", "class_method_signature": "RuleModel.getAllLHSVariables()", "testcase": false, "constructor": false}, {"identifier": "getLHSPatternVariables", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getLHSPatternVariables()", "full_signature": "public List<String> getLHSPatternVariables()", "class_method_signature": "RuleModel.getLHSPatternVariables()", "testcase": false, "constructor": false}, {"identifier": "getLHSVariables", "parameters": "(final boolean includePatterns,\n                                        final boolean includeFields)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getLHSVariables(final boolean includePatterns,\n                                        final boolean includeFields)", "full_signature": "public List<String> getLHSVariables(final boolean includePatterns,\n                                        final boolean includeFields)", "class_method_signature": "RuleModel.getLHSVariables(final boolean includePatterns,\n                                        final boolean includeFields)", "testcase": false, "constructor": false}, {"identifier": "getAllRHSVariables", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAllRHSVariables()", "full_signature": "public List<String> getAllRHSVariables()", "class_method_signature": "RuleModel.getAllRHSVariables()", "testcase": false, "constructor": false}, {"identifier": "getAllVariables", "parameters": "()", "modifiers": "public", "return": "List<String>", "signature": "List<String> getAllVariables()", "full_signature": "public List<String> getAllVariables()", "class_method_signature": "RuleModel.getAllVariables()", "testcase": false, "constructor": false}, {"identifier": "getFieldBinding", "parameters": "(FieldConstraint f)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getFieldBinding(FieldConstraint f)", "full_signature": "public List<String> getFieldBinding(FieldConstraint f)", "class_method_signature": "RuleModel.getFieldBinding(FieldConstraint f)", "testcase": false, "constructor": false}, {"identifier": "removeLhsItem", "parameters": "(final int idx)", "modifiers": "public", "return": "boolean", "signature": "boolean removeLhsItem(final int idx)", "full_signature": "public boolean removeLhsItem(final int idx)", "class_method_signature": "RuleModel.removeLhsItem(final int idx)", "testcase": false, "constructor": false}, {"identifier": "isBoundFactUsed", "parameters": "(final String binding)", "modifiers": "public", "return": "boolean", "signature": "boolean isBoundFactUsed(final String binding)", "full_signature": "public boolean isBoundFactUsed(final String binding)", "class_method_signature": "RuleModel.isBoundFactUsed(final String binding)", "testcase": false, "constructor": false}, {"identifier": "addLhsItem", "parameters": "(final IPattern pat)", "modifiers": "public", "return": "void", "signature": "void addLhsItem(final IPattern pat)", "full_signature": "public void addLhsItem(final IPattern pat)", "class_method_signature": "RuleModel.addLhsItem(final IPattern pat)", "testcase": false, "constructor": false}, {"identifier": "addLhsItem", "parameters": "(final IPattern pat,\n                           boolean append)", "modifiers": "public", "return": "void", "signature": "void addLhsItem(final IPattern pat,\n                           boolean append)", "full_signature": "public void addLhsItem(final IPattern pat,\n                           boolean append)", "class_method_signature": "RuleModel.addLhsItem(final IPattern pat,\n                           boolean append)", "testcase": false, "constructor": false}, {"identifier": "addLhsItem", "parameters": "(final IPattern pat,\n                           int position)", "modifiers": "public", "return": "void", "signature": "void addLhsItem(final IPattern pat,\n                           int position)", "full_signature": "public void addLhsItem(final IPattern pat,\n                           int position)", "class_method_signature": "RuleModel.addLhsItem(final IPattern pat,\n                           int position)", "testcase": false, "constructor": false}, {"identifier": "moveLhsItemDown", "parameters": "(int itemIndex)", "modifiers": "public", "return": "void", "signature": "void moveLhsItemDown(int itemIndex)", "full_signature": "public void moveLhsItemDown(int itemIndex)", "class_method_signature": "RuleModel.moveLhsItemDown(int itemIndex)", "testcase": false, "constructor": false}, {"identifier": "moveLhsItemUp", "parameters": "(int itemIndex)", "modifiers": "public", "return": "void", "signature": "void moveLhsItemUp(int itemIndex)", "full_signature": "public void moveLhsItemUp(int itemIndex)", "class_method_signature": "RuleModel.moveLhsItemUp(int itemIndex)", "testcase": false, "constructor": false}, {"identifier": "moveRhsItemDown", "parameters": "(int itemIndex)", "modifiers": "public", "return": "void", "signature": "void moveRhsItemDown(int itemIndex)", "full_signature": "public void moveRhsItemDown(int itemIndex)", "class_method_signature": "RuleModel.moveRhsItemDown(int itemIndex)", "testcase": false, "constructor": false}, {"identifier": "moveRhsItemUp", "parameters": "(int itemIndex)", "modifiers": "public", "return": "void", "signature": "void moveRhsItemUp(int itemIndex)", "full_signature": "public void moveRhsItemUp(int itemIndex)", "class_method_signature": "RuleModel.moveRhsItemUp(int itemIndex)", "testcase": false, "constructor": false}, {"identifier": "moveItemDown", "parameters": "(Object[] array,\n                              int itemIndex)", "modifiers": "private", "return": "void", "signature": "void moveItemDown(Object[] array,\n                              int itemIndex)", "full_signature": "private void moveItemDown(Object[] array,\n                              int itemIndex)", "class_method_signature": "RuleModel.moveItemDown(Object[] array,\n                              int itemIndex)", "testcase": false, "constructor": false}, {"identifier": "moveItemUp", "parameters": "(Object[] array,\n                            int itemIndex)", "modifiers": "private", "return": "void", "signature": "void moveItemUp(Object[] array,\n                            int itemIndex)", "full_signature": "private void moveItemUp(Object[] array,\n                            int itemIndex)", "class_method_signature": "RuleModel.moveItemUp(Object[] array,\n                            int itemIndex)", "testcase": false, "constructor": false}, {"identifier": "addRhsItem", "parameters": "(final IAction action)", "modifiers": "public", "return": "void", "signature": "void addRhsItem(final IAction action)", "full_signature": "public void addRhsItem(final IAction action)", "class_method_signature": "RuleModel.addRhsItem(final IAction action)", "testcase": false, "constructor": false}, {"identifier": "addRhsItem", "parameters": "(final IAction action,\n                           boolean append)", "modifiers": "public", "return": "void", "signature": "void addRhsItem(final IAction action,\n                           boolean append)", "full_signature": "public void addRhsItem(final IAction action,\n                           boolean append)", "class_method_signature": "RuleModel.addRhsItem(final IAction action,\n                           boolean append)", "testcase": false, "constructor": false}, {"identifier": "addRhsItem", "parameters": "(final IAction action,\n                           int position)", "modifiers": "public", "return": "void", "signature": "void addRhsItem(final IAction action,\n                           int position)", "full_signature": "public void addRhsItem(final IAction action,\n                           int position)", "class_method_signature": "RuleModel.addRhsItem(final IAction action,\n                           int position)", "testcase": false, "constructor": false}, {"identifier": "removeRhsItem", "parameters": "(final int idx)", "modifiers": "public", "return": "void", "signature": "void removeRhsItem(final int idx)", "full_signature": "public void removeRhsItem(final int idx)", "class_method_signature": "RuleModel.removeRhsItem(final int idx)", "testcase": false, "constructor": false}, {"identifier": "addAttribute", "parameters": "(final RuleAttribute attribute)", "modifiers": "public", "return": "void", "signature": "void addAttribute(final RuleAttribute attribute)", "full_signature": "public void addAttribute(final RuleAttribute attribute)", "class_method_signature": "RuleModel.addAttribute(final RuleAttribute attribute)", "testcase": false, "constructor": false}, {"identifier": "removeAttribute", "parameters": "(final int idx)", "modifiers": "public", "return": "void", "signature": "void removeAttribute(final int idx)", "full_signature": "public void removeAttribute(final int idx)", "class_method_signature": "RuleModel.removeAttribute(final int idx)", "testcase": false, "constructor": false}, {"identifier": "addMetadata", "parameters": "(final RuleMetadata metadata)", "modifiers": "public", "return": "void", "signature": "void addMetadata(final RuleMetadata metadata)", "full_signature": "public void addMetadata(final RuleMetadata metadata)", "class_method_signature": "RuleModel.addMetadata(final RuleMetadata metadata)", "testcase": false, "constructor": false}, {"identifier": "removeMetadata", "parameters": "(final int idx)", "modifiers": "public", "return": "void", "signature": "void removeMetadata(final int idx)", "full_signature": "public void removeMetadata(final int idx)", "class_method_signature": "RuleModel.removeMetadata(final int idx)", "testcase": false, "constructor": false}, {"identifier": "getMetaData", "parameters": "(String attributeName)", "modifiers": "public", "return": "RuleMetadata", "signature": "RuleMetadata getMetaData(String attributeName)", "full_signature": "public RuleMetadata getMetaData(String attributeName)", "class_method_signature": "RuleModel.getMetaData(String attributeName)", "testcase": false, "constructor": false}, {"identifier": "updateMetadata", "parameters": "(final RuleMetadata target)", "modifiers": "public", "return": "boolean", "signature": "boolean updateMetadata(final RuleMetadata target)", "full_signature": "public boolean updateMetadata(final RuleMetadata target)", "class_method_signature": "RuleModel.updateMetadata(final RuleMetadata target)", "testcase": false, "constructor": false}, {"identifier": "getBoundVariablesInScope", "parameters": "(final BaseSingleFieldConstraint con)", "modifiers": "public", "return": "List<String>", "signature": "List<String> getBoundVariablesInScope(final BaseSingleFieldConstraint con)", "full_signature": "public List<String> getBoundVariablesInScope(final BaseSingleFieldConstraint con)", "class_method_signature": "RuleModel.getBoundVariablesInScope(final BaseSingleFieldConstraint con)", "testcase": false, "constructor": false}, {"identifier": "findBoundVariableNames", "parameters": "(BaseSingleFieldConstraint con,\n                                           List<String> result,\n                                           IPattern pat)", "modifiers": "private", "return": "boolean", "signature": "boolean findBoundVariableNames(BaseSingleFieldConstraint con,\n                                           List<String> result,\n                                           IPattern pat)", "full_signature": "private boolean findBoundVariableNames(BaseSingleFieldConstraint con,\n                                           List<String> result,\n                                           IPattern pat)", "class_method_signature": "RuleModel.findBoundVariableNames(BaseSingleFieldConstraint con,\n                                           List<String> result,\n                                           IPattern pat)", "testcase": false, "constructor": false}, {"identifier": "findBoundVariableNames", "parameters": "(BaseSingleFieldConstraint con,\n                                           List<String> result,\n                                           FactPattern fact)", "modifiers": "private", "return": "boolean", "signature": "boolean findBoundVariableNames(BaseSingleFieldConstraint con,\n                                           List<String> result,\n                                           FactPattern fact)", "full_signature": "private boolean findBoundVariableNames(BaseSingleFieldConstraint con,\n                                           List<String> result,\n                                           FactPattern fact)", "class_method_signature": "RuleModel.findBoundVariableNames(BaseSingleFieldConstraint con,\n                                           List<String> result,\n                                           FactPattern fact)", "testcase": false, "constructor": false}, {"identifier": "isVariableNameUsed", "parameters": "(String s)", "modifiers": "public", "return": "boolean", "signature": "boolean isVariableNameUsed(String s)", "full_signature": "public boolean isVariableNameUsed(String s)", "class_method_signature": "RuleModel.isVariableNameUsed(String s)", "testcase": false, "constructor": false}, {"identifier": "hasDSLSentences", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean hasDSLSentences()", "full_signature": "public boolean hasDSLSentences()", "class_method_signature": "RuleModel.hasDSLSentences()", "testcase": false, "constructor": false}, {"identifier": "isNegated", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNegated()", "full_signature": "public boolean isNegated()", "class_method_signature": "RuleModel.isNegated()", "testcase": false, "constructor": false}, {"identifier": "setNegated", "parameters": "(boolean isNegated)", "modifiers": "public", "return": "void", "signature": "void setNegated(boolean isNegated)", "full_signature": "public void setNegated(boolean isNegated)", "class_method_signature": "RuleModel.setNegated(boolean isNegated)", "testcase": false, "constructor": false}, {"identifier": "getImports", "parameters": "()", "modifiers": "public", "return": "Imports", "signature": "Imports getImports()", "full_signature": "public Imports getImports()", "class_method_signature": "RuleModel.getImports()", "testcase": false, "constructor": false}, {"identifier": "setImports", "parameters": "(final Imports imports)", "modifiers": "@Override public", "return": "void", "signature": "void setImports(final Imports imports)", "full_signature": "@Override public void setImports(final Imports imports)", "class_method_signature": "RuleModel.setImports(final Imports imports)", "testcase": false, "constructor": false}, {"identifier": "getPackageName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPackageName()", "full_signature": "public String getPackageName()", "class_method_signature": "RuleModel.getPackageName()", "testcase": false, "constructor": false}, {"identifier": "setPackageName", "parameters": "(String packageName)", "modifiers": "public", "return": "void", "signature": "void setPackageName(String packageName)", "full_signature": "public void setPackageName(String packageName)", "class_method_signature": "RuleModel.setPackageName(String packageName)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "RuleModel.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RuleModel.hashCode()", "testcase": false, "constructor": false}], "file": "drools-workbench-models/drools-workbench-models-datamodel-api/src/main/java/org/drools/workbench/models/datamodel/rule/RuleModel.java"}, "focal_method": {"identifier": "getLHSVariables", "parameters": "(final boolean includePatterns,\n                                        final boolean includeFields)", "modifiers": "public", "return": "List<String>", "body": "public List<String> getLHSVariables(final boolean includePatterns,\n                                        final boolean includeFields) {\n        List<String> result = new ArrayList<>();\n\n        for (int i = 0; i < this.lhs.length; i++) {\n            IPattern pat = this.lhs[i];\n            if (pat instanceof FromCompositeFactPattern) {\n                pat = ((FromCompositeFactPattern) pat).getFactPattern();\n            }\n            if (pat instanceof FactPattern) {\n                FactPattern fact = (FactPattern) pat;\n                if (fact.isBound()) {\n                    if (includePatterns) {\n                        result.add(fact.getBoundName());\n                    }\n                }\n\n                if (includeFields) {\n                    for (int j = 0; j < fact.getFieldConstraints().length; j++) {\n                        FieldConstraint fc = fact.getFieldConstraints()[j];\n                        if (fc instanceof SingleFieldConstraintEBLeftSide) {\n                            SingleFieldConstraintEBLeftSide exp = (SingleFieldConstraintEBLeftSide) fc;\n                            if (exp.getExpressionLeftSide() != null && exp.getExpressionLeftSide().isBound()) {\n                                result.add(exp.getExpressionLeftSide().getBinding());\n                            }\n                        } else if (fc instanceof SingleFieldConstraint) {\n                            SingleFieldConstraint con = (SingleFieldConstraint) fc;\n                            if (con.isBound()) {\n                                result.add(con.getFieldBinding());\n                            }\n                            if (con.getExpressionValue() != null && con.getExpressionValue().isBound()) {\n                                result.add(con.getExpressionValue().getBinding());\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }", "signature": "List<String> getLHSVariables(final boolean includePatterns,\n                                        final boolean includeFields)", "full_signature": "public List<String> getLHSVariables(final boolean includePatterns,\n                                        final boolean includeFields)", "class_method_signature": "RuleModel.getLHSVariables(final boolean includePatterns,\n                                        final boolean includeFields)", "testcase": false, "constructor": false, "invocations": ["getFactPattern", "isBound", "add", "getBoundName", "getFieldConstraints", "getFieldConstraints", "getExpressionLeftSide", "isBound", "getExpressionLeftSide", "add", "getBinding", "getExpressionLeftSide", "isBound", "add", "getFieldBinding", "getExpressionValue", "isBound", "getExpressionValue", "add", "getBinding", "getExpressionValue"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}