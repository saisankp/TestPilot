{"test_class": {"identifier": "Categorize2ColorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected Categorize2Color categorize;", "modifier": "protected", "type": "Categorize2Color", "declarator": "categorize", "var_name": "categorize"}, {"original_string": "protected ColorParameter class1;", "modifier": "protected", "type": "ColorParameter", "declarator": "class1", "var_name": "class1"}, {"original_string": "protected ColorParameter class2;", "modifier": "protected", "type": "ColorParameter", "declarator": "class2", "var_name": "class2"}, {"original_string": "protected ColorParameter class3;", "modifier": "protected", "type": "ColorParameter", "declarator": "class3", "var_name": "class3"}, {"original_string": "protected ColorParameter class4;", "modifier": "protected", "type": "ColorParameter", "declarator": "class4", "var_name": "class4"}, {"original_string": "protected RealLiteral t1;", "modifier": "protected", "type": "RealLiteral", "declarator": "t1", "var_name": "t1"}, {"original_string": "protected RealLiteral t2;", "modifier": "protected", "type": "RealLiteral", "declarator": "t2", "var_name": "t2"}, {"original_string": "protected RealLiteral t3;", "modifier": "protected", "type": "RealLiteral", "declarator": "t3", "var_name": "t3"}, {"original_string": "protected RealLiteral t4;", "modifier": "protected", "type": "RealLiteral", "declarator": "t4", "var_name": "t4"}, {"original_string": "protected RealLiteral t5;", "modifier": "protected", "type": "RealLiteral", "declarator": "t5", "var_name": "t5"}, {"original_string": "protected ColorLiteral fallback;", "modifier": "protected", "type": "ColorLiteral", "declarator": "fallback", "var_name": "fallback"}], "file": "bundles/core-map/src/test/java/org/orbisgis/coremap/renderer/se/parameter/color/Categorize2ColorTest.java"}, "test_case": {"identifier": "testAddClasses", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddClasses(){\n        try {\n            //We first have ;\n            // -INF -> class1\n            // t1 -> class2\n            categorize.put(t1, class2);\n            assertTrue(categorize.getNumClasses() == 2);\n            assertTrue(categorize.get(0).getColor(null, -1) == class1.getColor(null, -1));\n            assertTrue(categorize.get(1).getColor(null, -1) == class2.getColor(null, -1));\n            categorize.put(t2, class3);\n            // -INF -> class1\n            // t1 -> class2\n            // t2 -> class3\n            assertTrue(categorize.getNumClasses() == 3);\n            assertTrue(categorize.get(0).getColor(null, -1) == class1.getColor(null, -1));\n            assertTrue(categorize.get(1).getColor(null, -1) == class2.getColor(null, -1));\n            assertTrue(categorize.get(2).getColor(null, -1) == class3.getColor(null, -1));\n            categorize.put(t3, class4);\n            // -INF -> class1\n            // t3 -> class4\n            // t1 -> class2\n            // t2 -> class3\n            assertTrue(categorize.getNumClasses() == 4);\n            assertTrue(categorize.get(0).getColor(null, -1) == class1.getColor(null, -1));\n            assertTrue(categorize.get(2).getColor(null, -1) == class2.getColor(null, -1));\n            assertTrue(categorize.get(3).getColor(null, -1) == class3.getColor(null, -1));\n            assertTrue(categorize.get(1).getColor(null, -1) == class4.getColor(null, -1));\n        } catch (ParameterException ex) {\n            Logger.getLogger(Categorize2ColorTest.class.getName()).log(Level.SEVERE, null, ex);\n        }\n\n    }", "signature": "void testAddClasses()", "full_signature": "@Test public void testAddClasses()", "class_method_signature": "Categorize2ColorTest.testAddClasses()", "testcase": true, "constructor": false, "invocations": ["put", "assertTrue", "getNumClasses", "assertTrue", "getColor", "get", "getColor", "assertTrue", "getColor", "get", "getColor", "put", "assertTrue", "getNumClasses", "assertTrue", "getColor", "get", "getColor", "assertTrue", "getColor", "get", "getColor", "assertTrue", "getColor", "get", "getColor", "put", "assertTrue", "getNumClasses", "assertTrue", "getColor", "get", "getColor", "assertTrue", "getColor", "get", "getColor", "assertTrue", "getColor", "get", "getColor", "assertTrue", "getColor", "get", "getColor", "log", "getLogger", "getName"]}, "focal_class": {"identifier": "Categorize2Color", "superclass": "extends Categorize<ColorParameter, ColorLiteral>", "interfaces": "implements ColorParameter", "fields": [], "methods": [{"identifier": "Categorize2Color", "parameters": "(ColorParameter initialClass, ColorLiteral fallback, RealParameter lookupValue)", "modifiers": "public", "return": "", "signature": " Categorize2Color(ColorParameter initialClass, ColorLiteral fallback, RealParameter lookupValue)", "full_signature": "public  Categorize2Color(ColorParameter initialClass, ColorLiteral fallback, RealParameter lookupValue)", "class_method_signature": "Categorize2Color.Categorize2Color(ColorParameter initialClass, ColorLiteral fallback, RealParameter lookupValue)", "testcase": false, "constructor": true}, {"identifier": "Categorize2Color", "parameters": "(JAXBElement<CategorizeType> expr)", "modifiers": "public", "return": "", "signature": " Categorize2Color(JAXBElement<CategorizeType> expr)", "full_signature": "public  Categorize2Color(JAXBElement<CategorizeType> expr)", "class_method_signature": "Categorize2Color.Categorize2Color(JAXBElement<CategorizeType> expr)", "testcase": false, "constructor": true}, {"identifier": "getColor", "parameters": "(ResultSet rs, long fid)", "modifiers": "@Override public", "return": "Color", "signature": "Color getColor(ResultSet rs, long fid)", "full_signature": "@Override public Color getColor(ResultSet rs, long fid)", "class_method_signature": "Categorize2Color.getColor(ResultSet rs, long fid)", "testcase": false, "constructor": false}, {"identifier": "getColor", "parameters": "(Map<String,Object> map)", "modifiers": "@Override public", "return": "Color", "signature": "Color getColor(Map<String,Object> map)", "full_signature": "@Override public Color getColor(Map<String,Object> map)", "class_method_signature": "Categorize2Color.getColor(Map<String,Object> map)", "testcase": false, "constructor": false}], "file": "bundles/core-map/src/main/java/org/orbisgis/coremap/renderer/se/parameter/color/Categorize2Color.java"}, "focal_method": {"identifier": "getColor", "parameters": "(ResultSet rs, long fid)", "modifiers": "@Override public", "return": "Color", "body": "@Override\n    public Color getColor(ResultSet rs, long fid) throws ParameterException {\n        if (rs == null) {\n            throw new ParameterException(\"No feature\");\n        }\n        return getParameter(rs, fid).getColor(rs, fid);\n    }", "signature": "Color getColor(ResultSet rs, long fid)", "full_signature": "@Override public Color getColor(ResultSet rs, long fid)", "class_method_signature": "Categorize2Color.getColor(ResultSet rs, long fid)", "testcase": false, "constructor": false, "invocations": ["getColor", "getParameter"]}, "repository": {"repo_id": 4735878, "url": "https://github.com/orbisgis/orbisgis", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 63, "size": 76463, "license": "licensed"}}