{"test_class": {"identifier": "DefaultErrorListenerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final Exception simpleCause = new IllegalStateException(new IllegalArgumentException());", "modifier": "final", "type": "Exception", "declarator": "simpleCause = new IllegalStateException(new IllegalArgumentException())", "var_name": "simpleCause"}], "file": "core/src/test/java/net/adamcin/oakpal/core/DefaultErrorListenerTest.java"}, "test_case": {"identifier": "testOnImporterException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnImporterException() {\n        new DefaultErrorListener().onImporterException(simpleCause, null, null);\n    }", "signature": "void testOnImporterException()", "full_signature": "@Test public void testOnImporterException()", "class_method_signature": "DefaultErrorListenerTest.testOnImporterException()", "testcase": true, "constructor": false, "invocations": ["onImporterException"]}, "focal_class": {"identifier": "DefaultErrorListener", "superclass": "", "interfaces": "implements ErrorListener", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(DefaultErrorListener.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(DefaultErrorListener.class)", "var_name": "LOGGER"}, {"original_string": "private final ReportCollector collector = new ReportCollector();", "modifier": "private final", "type": "ReportCollector", "declarator": "collector = new ReportCollector()", "var_name": "collector"}, {"original_string": "private ResourceBundle resourceBundle;", "modifier": "private", "type": "ResourceBundle", "declarator": "resourceBundle", "var_name": "resourceBundle"}], "methods": [{"identifier": "reportViolation", "parameters": "(final Violation violation)", "modifiers": "protected", "return": "void", "signature": "void reportViolation(final Violation violation)", "full_signature": "protected void reportViolation(final Violation violation)", "class_method_signature": "DefaultErrorListener.reportViolation(final Violation violation)", "testcase": false, "constructor": false}, {"identifier": "setResourceBundle", "parameters": "(final ResourceBundle resourceBundle)", "modifiers": "@Override public", "return": "void", "signature": "void setResourceBundle(final ResourceBundle resourceBundle)", "full_signature": "@Override public void setResourceBundle(final ResourceBundle resourceBundle)", "class_method_signature": "DefaultErrorListener.setResourceBundle(final ResourceBundle resourceBundle)", "testcase": false, "constructor": false}, {"identifier": "getResourceBundle", "parameters": "()", "modifiers": "@NotNull protected", "return": "ResourceBundle", "signature": "ResourceBundle getResourceBundle()", "full_signature": "@NotNull protected ResourceBundle getResourceBundle()", "class_method_signature": "DefaultErrorListener.getResourceBundle()", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "(@NotNull final String key)", "modifiers": "@NotNull protected", "return": "String", "signature": "String getString(@NotNull final String key)", "full_signature": "@NotNull protected String getString(@NotNull final String key)", "class_method_signature": "DefaultErrorListener.getString(@NotNull final String key)", "testcase": false, "constructor": false}, {"identifier": "getReportedViolations", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Violation>", "signature": "Collection<Violation> getReportedViolations()", "full_signature": "@Override public Collection<Violation> getReportedViolations()", "class_method_signature": "DefaultErrorListener.getReportedViolations()", "testcase": false, "constructor": false}, {"identifier": "onNodeTypeRegistrationError", "parameters": "(final Throwable error, final URL resource)", "modifiers": "@Override public", "return": "void", "signature": "void onNodeTypeRegistrationError(final Throwable error, final URL resource)", "full_signature": "@Override public void onNodeTypeRegistrationError(final Throwable error, final URL resource)", "class_method_signature": "DefaultErrorListener.onNodeTypeRegistrationError(final Throwable error, final URL resource)", "testcase": false, "constructor": false}, {"identifier": "onJcrNamespaceRegistrationError", "parameters": "(final Throwable error, final String prefix, final String uri)", "modifiers": "@Override public", "return": "void", "signature": "void onJcrNamespaceRegistrationError(final Throwable error, final String prefix, final String uri)", "full_signature": "@Override public void onJcrNamespaceRegistrationError(final Throwable error, final String prefix, final String uri)", "class_method_signature": "DefaultErrorListener.onJcrNamespaceRegistrationError(final Throwable error, final String prefix, final String uri)", "testcase": false, "constructor": false}, {"identifier": "onJcrPrivilegeRegistrationError", "parameters": "(final Throwable error, final String jcrPrivilege)", "modifiers": "@Override public", "return": "void", "signature": "void onJcrPrivilegeRegistrationError(final Throwable error, final String jcrPrivilege)", "full_signature": "@Override public void onJcrPrivilegeRegistrationError(final Throwable error, final String jcrPrivilege)", "class_method_signature": "DefaultErrorListener.onJcrPrivilegeRegistrationError(final Throwable error, final String jcrPrivilege)", "testcase": false, "constructor": false}, {"identifier": "onForcedRootCreationError", "parameters": "(final Throwable error, final ForcedRoot forcedRoot)", "modifiers": "@Override public", "return": "void", "signature": "void onForcedRootCreationError(final Throwable error, final ForcedRoot forcedRoot)", "full_signature": "@Override public void onForcedRootCreationError(final Throwable error, final ForcedRoot forcedRoot)", "class_method_signature": "DefaultErrorListener.onForcedRootCreationError(final Throwable error, final ForcedRoot forcedRoot)", "testcase": false, "constructor": false}, {"identifier": "onListenerException", "parameters": "(final Exception error, final ProgressCheck listener, final PackageId packageId)", "modifiers": "@Override public", "return": "void", "signature": "void onListenerException(final Exception error, final ProgressCheck listener, final PackageId packageId)", "full_signature": "@Override public void onListenerException(final Exception error, final ProgressCheck listener, final PackageId packageId)", "class_method_signature": "DefaultErrorListener.onListenerException(final Exception error, final ProgressCheck listener, final PackageId packageId)", "testcase": false, "constructor": false}, {"identifier": "onSubpackageException", "parameters": "(final Exception error, final PackageId packageId)", "modifiers": "@Override public", "return": "void", "signature": "void onSubpackageException(final Exception error, final PackageId packageId)", "full_signature": "@Override public void onSubpackageException(final Exception error, final PackageId packageId)", "class_method_signature": "DefaultErrorListener.onSubpackageException(final Exception error, final PackageId packageId)", "testcase": false, "constructor": false}, {"identifier": "onImporterException", "parameters": "(final Exception error, final PackageId packageId, final String path)", "modifiers": "@Override public", "return": "void", "signature": "void onImporterException(final Exception error, final PackageId packageId, final String path)", "full_signature": "@Override public void onImporterException(final Exception error, final PackageId packageId, final String path)", "class_method_signature": "DefaultErrorListener.onImporterException(final Exception error, final PackageId packageId, final String path)", "testcase": false, "constructor": false}, {"identifier": "onListenerPathException", "parameters": "(final Exception error, final ProgressCheck handler,\n                                        final PackageId packageId, final String path)", "modifiers": "@Override public", "return": "void", "signature": "void onListenerPathException(final Exception error, final ProgressCheck handler,\n                                        final PackageId packageId, final String path)", "full_signature": "@Override public void onListenerPathException(final Exception error, final ProgressCheck handler,\n                                        final PackageId packageId, final String path)", "class_method_signature": "DefaultErrorListener.onListenerPathException(final Exception error, final ProgressCheck handler,\n                                        final PackageId packageId, final String path)", "testcase": false, "constructor": false}, {"identifier": "onInstallHookError", "parameters": "(final Throwable error, final PackageId packageId)", "modifiers": "@Override public", "return": "void", "signature": "void onInstallHookError(final Throwable error, final PackageId packageId)", "full_signature": "@Override public void onInstallHookError(final Throwable error, final PackageId packageId)", "class_method_signature": "DefaultErrorListener.onInstallHookError(final Throwable error, final PackageId packageId)", "testcase": false, "constructor": false}, {"identifier": "onProhibitedInstallHookRegistration", "parameters": "(final PackageId packageId)", "modifiers": "@Override public", "return": "void", "signature": "void onProhibitedInstallHookRegistration(final PackageId packageId)", "full_signature": "@Override public void onProhibitedInstallHookRegistration(final PackageId packageId)", "class_method_signature": "DefaultErrorListener.onProhibitedInstallHookRegistration(final PackageId packageId)", "testcase": false, "constructor": false}, {"identifier": "onRepoInitUrlError", "parameters": "(final Throwable error, final URL repoinitUrl)", "modifiers": "@Override public", "return": "void", "signature": "void onRepoInitUrlError(final Throwable error, final URL repoinitUrl)", "full_signature": "@Override public void onRepoInitUrlError(final Throwable error, final URL repoinitUrl)", "class_method_signature": "DefaultErrorListener.onRepoInitUrlError(final Throwable error, final URL repoinitUrl)", "testcase": false, "constructor": false}, {"identifier": "onRepoInitInlineError", "parameters": "(final Throwable error, final List<String> repoinits)", "modifiers": "@Override public", "return": "void", "signature": "void onRepoInitInlineError(final Throwable error, final List<String> repoinits)", "full_signature": "@Override public void onRepoInitInlineError(final Throwable error, final List<String> repoinits)", "class_method_signature": "DefaultErrorListener.onRepoInitInlineError(final Throwable error, final List<String> repoinits)", "testcase": false, "constructor": false}, {"identifier": "onSlingEmbeddedPackageError", "parameters": "(Throwable error, EmbeddedPackageInstallable installable)", "modifiers": "@Override public", "return": "void", "signature": "void onSlingEmbeddedPackageError(Throwable error, EmbeddedPackageInstallable installable)", "full_signature": "@Override public void onSlingEmbeddedPackageError(Throwable error, EmbeddedPackageInstallable installable)", "class_method_signature": "DefaultErrorListener.onSlingEmbeddedPackageError(Throwable error, EmbeddedPackageInstallable installable)", "testcase": false, "constructor": false}, {"identifier": "onSlingRepoInitScriptsError", "parameters": "(Throwable error, List<String> scripts, String failedScript, SlingInstallable installable)", "modifiers": "@Override public", "return": "void", "signature": "void onSlingRepoInitScriptsError(Throwable error, List<String> scripts, String failedScript, SlingInstallable installable)", "full_signature": "@Override public void onSlingRepoInitScriptsError(Throwable error, List<String> scripts, String failedScript, SlingInstallable installable)", "class_method_signature": "DefaultErrorListener.onSlingRepoInitScriptsError(Throwable error, List<String> scripts, String failedScript, SlingInstallable installable)", "testcase": false, "constructor": false}, {"identifier": "onSlingCreateInstallableError", "parameters": "(final Exception error,\n                                              final Class<? extends SlingInstallable> installableType,\n                                              final PackageId parentId, final String jcrPath)", "modifiers": "@Override public", "return": "void", "signature": "void onSlingCreateInstallableError(final Exception error,\n                                              final Class<? extends SlingInstallable> installableType,\n                                              final PackageId parentId, final String jcrPath)", "full_signature": "@Override public void onSlingCreateInstallableError(final Exception error,\n                                              final Class<? extends SlingInstallable> installableType,\n                                              final PackageId parentId, final String jcrPath)", "class_method_signature": "DefaultErrorListener.onSlingCreateInstallableError(final Exception error,\n                                              final Class<? extends SlingInstallable> installableType,\n                                              final PackageId parentId, final String jcrPath)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/DefaultErrorListener.java"}, "focal_method": {"identifier": "onImporterException", "parameters": "(final Exception error, final PackageId packageId, final String path)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onImporterException(final Exception error, final PackageId packageId, final String path) {\n        // Ignore PathNotFoundException, as it is thrown A LOT\n        if (!(error instanceof PathNotFoundException)) {\n            final String message = MessageFormat.format(getString(\"{0} - Importer error: {1} \\\"{2}\\\"\"),\n                    path, error.getClass().getName(), error.getMessage());\n            LOGGER.trace(\"[onImporterException] stack trace for: \" + message, error);\n            reportViolation(new SimpleViolation(Severity.MAJOR, message, packageId));\n        }\n    }", "signature": "void onImporterException(final Exception error, final PackageId packageId, final String path)", "full_signature": "@Override public void onImporterException(final Exception error, final PackageId packageId, final String path)", "class_method_signature": "DefaultErrorListener.onImporterException(final Exception error, final PackageId packageId, final String path)", "testcase": false, "constructor": false, "invocations": ["format", "getString", "getName", "getClass", "getMessage", "trace", "reportViolation"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}