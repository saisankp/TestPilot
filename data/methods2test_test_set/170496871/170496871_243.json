{"test_class": {"identifier": "MinMaxScalerPreprocessorTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/preprocessing/minmaxscaling/MinMaxScalerPreprocessorTest.java"}, "test_case": {"identifier": "testApply", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testApply() {\n        double[][] data = new double[][]{\n            {2., 4., 1.},\n            {1., 8., 22.},\n            {4., 10., 100.},\n            {0., 22., 300.}\n        };\n\n        Vectorizer<Integer, double[], Integer, Double> vectorizer = new DoubleArrayVectorizer<>(0, 1, 2);\n\n        MinMaxScalerPreprocessor<Integer, double[]> preprocessor = new MinMaxScalerPreprocessor<>(\n            new double[] {0, 4, 1},\n            new double[] {4, 22, 300},\n            vectorizer\n        );\n\n        double[][] standardData = new double[][]{\n            {2. / 4, (4. - 4.) / 18., 0.},\n            {1. / 4, (8. - 4.) / 18., (22. - 1.) / 299.},\n            {1., (10. - 4.) / 18., (100. - 1.) / 299.},\n            {0., (22. - 4.) / 18., (300. - 1.) / 299.}\n        };\n\n       for (int i = 0; i < data.length; i++)\n           assertArrayEquals(standardData[i], preprocessor.apply(i, data[i]).features().asArray(), 1e-8);\n    }", "signature": "void testApply()", "full_signature": "@Test public void testApply()", "class_method_signature": "MinMaxScalerPreprocessorTest.testApply()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "asArray", "features", "apply"]}, "focal_class": {"identifier": "MinMaxScalerPreprocessor", "superclass": "", "interfaces": "implements Preprocessor<K, V>, DeployableObject", "fields": [{"original_string": "private static final long serialVersionUID = 6997800576392623469L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 6997800576392623469L", "var_name": "serialVersionUID"}, {"original_string": "private final double[] min;", "modifier": "private final", "type": "double[]", "declarator": "min", "var_name": "min"}, {"original_string": "private final double[] max;", "modifier": "private final", "type": "double[]", "declarator": "max", "var_name": "max"}, {"original_string": "private final Preprocessor<K, V> basePreprocessor;", "modifier": "private final", "type": "Preprocessor<K, V>", "declarator": "basePreprocessor", "var_name": "basePreprocessor"}], "methods": [{"identifier": "MinMaxScalerPreprocessor", "parameters": "(double[] min, double[] max, Preprocessor<K, V> basePreprocessor)", "modifiers": "public", "return": "", "signature": " MinMaxScalerPreprocessor(double[] min, double[] max, Preprocessor<K, V> basePreprocessor)", "full_signature": "public  MinMaxScalerPreprocessor(double[] min, double[] max, Preprocessor<K, V> basePreprocessor)", "class_method_signature": "MinMaxScalerPreprocessor.MinMaxScalerPreprocessor(double[] min, double[] max, Preprocessor<K, V> basePreprocessor)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(K k, V v)", "modifiers": "@Override public", "return": "LabeledVector", "signature": "LabeledVector apply(K k, V v)", "full_signature": "@Override public LabeledVector apply(K k, V v)", "class_method_signature": "MinMaxScalerPreprocessor.apply(K k, V v)", "testcase": false, "constructor": false}, {"identifier": "getMin", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getMin()", "full_signature": "public double[] getMin()", "class_method_signature": "MinMaxScalerPreprocessor.getMin()", "testcase": false, "constructor": false}, {"identifier": "getMax", "parameters": "()", "modifiers": "public", "return": "double[]", "signature": "double[] getMax()", "full_signature": "public double[] getMax()", "class_method_signature": "MinMaxScalerPreprocessor.getMax()", "testcase": false, "constructor": false}, {"identifier": "getDependencies", "parameters": "()", "modifiers": "@Override public", "return": "List<Object>", "signature": "List<Object> getDependencies()", "full_signature": "@Override public List<Object> getDependencies()", "class_method_signature": "MinMaxScalerPreprocessor.getDependencies()", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/preprocessing/minmaxscaling/MinMaxScalerPreprocessor.java"}, "focal_method": {"identifier": "apply", "parameters": "(K k, V v)", "modifiers": "@Override public", "return": "LabeledVector", "body": "@Override public LabeledVector apply(K k, V v) {\n        LabeledVector res = basePreprocessor.apply(k, v);\n\n        assert res.size() == min.length;\n        assert res.size() == max.length;\n\n        for (int i = 0; i < res.size(); i++) {\n            double num = res.get(i) - min[i];\n            double denom = max[i] - min[i];\n            double scaled = num / denom;\n\n            if (Double.isNaN(scaled))\n                res.set(i, num);\n            else\n                res.set(i, scaled);\n        }\n\n        return res;\n    }", "signature": "LabeledVector apply(K k, V v)", "full_signature": "@Override public LabeledVector apply(K k, V v)", "class_method_signature": "MinMaxScalerPreprocessor.apply(K k, V v)", "testcase": false, "constructor": false, "invocations": ["apply", "size", "size", "size", "get", "isNaN", "set", "set"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}