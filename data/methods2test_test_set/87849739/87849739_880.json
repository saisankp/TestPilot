{"test_class": {"identifier": "ImmutableAddressMetricTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final JsonObject METRIC_JSON =\n            JsonObject.newBuilder()\n                    .set(\"consumed\",\n                            JsonObject.newBuilder()\n                                    .set(\"success\", TestConstants.MEASUREMENTS)\n                                    .set(\"failure\", TestConstants.MEASUREMENTS)\n                                    .build()\n                    )\n                    .set(\"mapped\",\n                            JsonObject.newBuilder()\n                                    .set(\"success\", TestConstants.MEASUREMENTS)\n                                    .set(\"failure\", TestConstants.MEASUREMENTS)\n                                    .build()\n                    )\n                    .build();", "modifier": "private static final", "type": "JsonObject", "declarator": "METRIC_JSON =\n            JsonObject.newBuilder()\n                    .set(\"consumed\",\n                            JsonObject.newBuilder()\n                                    .set(\"success\", TestConstants.MEASUREMENTS)\n                                    .set(\"failure\", TestConstants.MEASUREMENTS)\n                                    .build()\n                    )\n                    .set(\"mapped\",\n                            JsonObject.newBuilder()\n                                    .set(\"success\", TestConstants.MEASUREMENTS)\n                                    .set(\"failure\", TestConstants.MEASUREMENTS)\n                                    .build()\n                    )\n                    .build()", "var_name": "METRIC_JSON"}, {"original_string": "private static final AddressMetric ADDRESS_METRIC = ConnectivityModelFactory.newAddressMetric(INBOUND_MEASUREMENTS);", "modifier": "private static final", "type": "AddressMetric", "declarator": "ADDRESS_METRIC = ConnectivityModelFactory.newAddressMetric(INBOUND_MEASUREMENTS)", "var_name": "ADDRESS_METRIC"}], "file": "model/connectivity/src/test/java/org/eclipse/ditto/model/connectivity/ImmutableAddressMetricTest.java"}, "test_case": {"identifier": "toJsonReturnsExpected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void toJsonReturnsExpected() {\n        final JsonObject actual = ADDRESS_METRIC.toJson();\n        assertThat(actual).isEqualTo(METRIC_JSON);\n    }", "signature": "void toJsonReturnsExpected()", "full_signature": "@Test public void toJsonReturnsExpected()", "class_method_signature": "ImmutableAddressMetricTest.toJsonReturnsExpected()", "testcase": true, "constructor": false, "invocations": ["toJson", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "ImmutableAddressMetric", "superclass": "", "interfaces": "implements AddressMetric", "fields": [{"original_string": "private static final JsonKey SUCCESS_KEY = JsonFactory.newKey(\"success\");", "modifier": "private static final", "type": "JsonKey", "declarator": "SUCCESS_KEY = JsonFactory.newKey(\"success\")", "var_name": "SUCCESS_KEY"}, {"original_string": "private static final JsonKey FAILURE_KEY = JsonFactory.newKey(\"failure\");", "modifier": "private static final", "type": "JsonKey", "declarator": "FAILURE_KEY = JsonFactory.newKey(\"failure\")", "var_name": "FAILURE_KEY"}, {"original_string": "private final Set<Measurement> measurements;", "modifier": "private final", "type": "Set<Measurement>", "declarator": "measurements", "var_name": "measurements"}], "methods": [{"identifier": "ImmutableAddressMetric", "parameters": "(final Set<Measurement> measurements)", "modifiers": "private", "return": "", "signature": " ImmutableAddressMetric(final Set<Measurement> measurements)", "full_signature": "private  ImmutableAddressMetric(final Set<Measurement> measurements)", "class_method_signature": "ImmutableAddressMetric.ImmutableAddressMetric(final Set<Measurement> measurements)", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(final Set<Measurement> measurements)", "modifiers": "public static", "return": "ImmutableAddressMetric", "signature": "ImmutableAddressMetric of(final Set<Measurement> measurements)", "full_signature": "public static ImmutableAddressMetric of(final Set<Measurement> measurements)", "class_method_signature": "ImmutableAddressMetric.of(final Set<Measurement> measurements)", "testcase": false, "constructor": false}, {"identifier": "getMeasurements", "parameters": "()", "modifiers": "@Override public", "return": "Set<Measurement>", "signature": "Set<Measurement> getMeasurements()", "full_signature": "@Override public Set<Measurement> getMeasurements()", "class_method_signature": "ImmutableAddressMetric.getMeasurements()", "testcase": false, "constructor": false}, {"identifier": "toJson", "parameters": "(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "modifiers": "@Override public", "return": "JsonObject", "signature": "JsonObject toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "full_signature": "@Override public JsonObject toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "class_method_signature": "ImmutableAddressMetric.toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "testcase": false, "constructor": false}, {"identifier": "getMeasurementComparator", "parameters": "()", "modifiers": "private static", "return": "Comparator<Measurement>", "signature": "Comparator<Measurement> getMeasurementComparator()", "full_signature": "private static Comparator<Measurement> getMeasurementComparator()", "class_method_signature": "ImmutableAddressMetric.getMeasurementComparator()", "testcase": false, "constructor": false}, {"identifier": "calculateComparatorScore", "parameters": "(final List<MetricType> sortedTypes, final Measurement m1,\n            final Measurement m2)", "modifiers": "private static", "return": "int", "signature": "int calculateComparatorScore(final List<MetricType> sortedTypes, final Measurement m1,\n            final Measurement m2)", "full_signature": "private static int calculateComparatorScore(final List<MetricType> sortedTypes, final Measurement m1,\n            final Measurement m2)", "class_method_signature": "ImmutableAddressMetric.calculateComparatorScore(final List<MetricType> sortedTypes, final Measurement m1,\n            final Measurement m2)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final JsonObject jsonObject)", "modifiers": "public static", "return": "AddressMetric", "signature": "AddressMetric fromJson(final JsonObject jsonObject)", "full_signature": "public static AddressMetric fromJson(final JsonObject jsonObject)", "class_method_signature": "ImmutableAddressMetric.fromJson(final JsonObject jsonObject)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "ImmutableAddressMetric.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ImmutableAddressMetric.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ImmutableAddressMetric.toString()", "testcase": false, "constructor": false}, {"identifier": "toJsonField", "parameters": "(final String key, final AddressMetric metric)", "modifiers": "static", "return": "JsonField", "signature": "JsonField toJsonField(final String key, final AddressMetric metric)", "full_signature": "static JsonField toJsonField(final String key, final AddressMetric metric)", "class_method_signature": "ImmutableAddressMetric.toJsonField(final String key, final AddressMetric metric)", "testcase": false, "constructor": false}], "file": "model/connectivity/src/main/java/org/eclipse/ditto/model/connectivity/ImmutableAddressMetric.java"}, "focal_method": {"identifier": "toJson", "parameters": "(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "modifiers": "@Override public", "return": "JsonObject", "body": "@Override\n    public JsonObject toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate) {\n        if (measurements.isEmpty()) {\n            return JsonFactory.nullObject();\n        } else {\n            final Predicate<JsonField> predicate = schemaVersion.and(thePredicate);\n            final JsonObjectBuilder jsonObjectBuilder = JsonFactory.newObjectBuilder();\n            jsonObjectBuilder.set(JsonFields.SCHEMA_VERSION, schemaVersion.toInt(), predicate);\n            final List<Measurement> sortedMeasurements = new ArrayList<>(measurements);\n            sortedMeasurements.sort(getMeasurementComparator());\n            for (final Measurement measurement : sortedMeasurements) {\n                final JsonPointer pointer = JsonFactory.newPointer(\n                        JsonFactory.newKey(measurement.getMetricType().getName()),\n                        measurement.isSuccess() ? SUCCESS_KEY : FAILURE_KEY);\n                jsonObjectBuilder.set(pointer, measurement.toJson().getValue(pointer).orElse(JsonFactory.newObject()));\n            }\n            return jsonObjectBuilder.build();\n        }\n    }", "signature": "JsonObject toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "full_signature": "@Override public JsonObject toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "class_method_signature": "ImmutableAddressMetric.toJson(final JsonSchemaVersion schemaVersion, final Predicate<JsonField> thePredicate)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "nullObject", "and", "newObjectBuilder", "set", "toInt", "sort", "getMeasurementComparator", "newPointer", "newKey", "getName", "getMetricType", "isSuccess", "set", "orElse", "getValue", "toJson", "newObject", "build"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}