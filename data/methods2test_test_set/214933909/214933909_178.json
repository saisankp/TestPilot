{"test_class": {"identifier": "DatabaseSetServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private DatabaseSetService databaseSetService;", "modifier": "@Mock\n    private", "type": "DatabaseSetService", "declarator": "databaseSetService", "var_name": "databaseSetService"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/service/DatabaseSetServiceTest.java"}, "test_case": {"identifier": "findDbSetPageListTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void findDbSetPageListTest() throws SQLException {\n        Paging<DatabaseSet> paging = new Paging<>();\n        paging.setData(new DatabaseSet());\n        Assert.assertTrue(databaseSetService.findDbSetPageList(paging).getList().size() > 0);\n    }", "signature": "void findDbSetPageListTest()", "full_signature": "@Test public void findDbSetPageListTest()", "class_method_signature": "DatabaseSetServiceTest.findDbSetPageListTest()", "testcase": true, "constructor": false, "invocations": ["setData", "assertTrue", "size", "getList", "findDbSetPageList"]}, "focal_class": {"identifier": "DatabaseSetService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private GroupDao groupDao;", "modifier": "@Autowired\n    private", "type": "GroupDao", "declarator": "groupDao", "var_name": "groupDao"}, {"original_string": "@Autowired\n    private DatabaseSetDao databaseSetDao;", "modifier": "@Autowired\n    private", "type": "DatabaseSetDao", "declarator": "databaseSetDao", "var_name": "databaseSetDao"}, {"original_string": "@Autowired\n    private ProjectDao projectDao;", "modifier": "@Autowired\n    private", "type": "ProjectDao", "declarator": "projectDao", "var_name": "projectDao"}, {"original_string": "@Autowired\n    private Message message;", "modifier": "@Autowired\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@Autowired\n    private PermissionService permissionService;", "modifier": "@Autowired\n    private", "type": "PermissionService", "declarator": "permissionService", "var_name": "permissionService"}, {"original_string": "@Autowired\n    private DeleteCheckDao deleteCheckDao;", "modifier": "@Autowired\n    private", "type": "DeleteCheckDao", "declarator": "deleteCheckDao", "var_name": "deleteCheckDao"}, {"original_string": "@Autowired\n    private DbSetConfiguration dbSetConfiguration;", "modifier": "@Autowired\n    private", "type": "DbSetConfiguration", "declarator": "dbSetConfiguration", "var_name": "dbSetConfiguration"}, {"original_string": "@Autowired\n    private DefaultConfiguration defaultConfiguration;", "modifier": "@Autowired\n    private", "type": "DefaultConfiguration", "declarator": "defaultConfiguration", "var_name": "defaultConfiguration"}], "methods": [{"identifier": "validatePermision", "parameters": "(LoginUser user, Errors errors)", "modifiers": "public", "return": "ValidatorChain", "signature": "ValidatorChain validatePermision(LoginUser user, Errors errors)", "full_signature": "public ValidatorChain validatePermision(LoginUser user, Errors errors)", "class_method_signature": "DatabaseSetService.validatePermision(LoginUser user, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "insertDatabaseSet", "parameters": "(DatabaseSet dbset)", "modifiers": "public", "return": "boolean", "signature": "boolean insertDatabaseSet(DatabaseSet dbset)", "full_signature": "public boolean insertDatabaseSet(DatabaseSet dbset)", "class_method_signature": "DatabaseSetService.insertDatabaseSet(DatabaseSet dbset)", "testcase": false, "constructor": false}, {"identifier": "updateDatabaseSet", "parameters": "(DatabaseSet dbset)", "modifiers": "public", "return": "int", "signature": "int updateDatabaseSet(DatabaseSet dbset)", "full_signature": "public int updateDatabaseSet(DatabaseSet dbset)", "class_method_signature": "DatabaseSetService.updateDatabaseSet(DatabaseSet dbset)", "testcase": false, "constructor": false}, {"identifier": "deleteCheck", "parameters": "(Long dbsetId)", "modifiers": "public", "return": "ServiceResult", "signature": "ServiceResult deleteCheck(Long dbsetId)", "full_signature": "public ServiceResult deleteCheck(Long dbsetId)", "class_method_signature": "DatabaseSetService.deleteCheck(Long dbsetId)", "testcase": false, "constructor": false}, {"identifier": "deleteDatabaseSet", "parameters": "(Long dbsetId)", "modifiers": "public", "return": "boolean", "signature": "boolean deleteDatabaseSet(Long dbsetId)", "full_signature": "public boolean deleteDatabaseSet(Long dbsetId)", "class_method_signature": "DatabaseSetService.deleteDatabaseSet(Long dbsetId)", "testcase": false, "constructor": false}, {"identifier": "findDbSetPageList", "parameters": "(Paging<DatabaseSet> paging)", "modifiers": "public", "return": "ListResult<DatabaseSetView>", "signature": "ListResult<DatabaseSetView> findDbSetPageList(Paging<DatabaseSet> paging)", "full_signature": "public ListResult<DatabaseSetView> findDbSetPageList(Paging<DatabaseSet> paging)", "class_method_signature": "DatabaseSetService.findDbSetPageList(Paging<DatabaseSet> paging)", "testcase": false, "constructor": false}, {"identifier": "getAllDatabaseSetByProjectId", "parameters": "(Long projectId)", "modifiers": "public", "return": "List<DatabaseSet>", "signature": "List<DatabaseSet> getAllDatabaseSetByProjectId(Long projectId)", "full_signature": "public List<DatabaseSet> getAllDatabaseSetByProjectId(Long projectId)", "class_method_signature": "DatabaseSetService.getAllDatabaseSetByProjectId(Long projectId)", "testcase": false, "constructor": false}, {"identifier": "getAllDatabaseSetByAppId", "parameters": "(String appId)", "modifiers": "public", "return": "List<DatabaseSet>", "signature": "List<DatabaseSet> getAllDatabaseSetByAppId(String appId)", "full_signature": "public List<DatabaseSet> getAllDatabaseSetByAppId(String appId)", "class_method_signature": "DatabaseSetService.getAllDatabaseSetByAppId(String appId)", "testcase": false, "constructor": false}, {"identifier": "findDbSetPageListByAppid", "parameters": "(Paging<DatabaseSet> paging)", "modifiers": "public", "return": "ListResult<DatabaseSetView>", "signature": "ListResult<DatabaseSetView> findDbSetPageListByAppid(Paging<DatabaseSet> paging)", "full_signature": "public ListResult<DatabaseSetView> findDbSetPageListByAppid(Paging<DatabaseSet> paging)", "class_method_signature": "DatabaseSetService.findDbSetPageListByAppid(Paging<DatabaseSet> paging)", "testcase": false, "constructor": false}, {"identifier": "addDataCenter", "parameters": "(LoginUser user, DatabaseSet dbset)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> addDataCenter(LoginUser user, DatabaseSet dbset)", "full_signature": "public ServiceResult<String> addDataCenter(LoginUser user, DatabaseSet dbset)", "class_method_signature": "DatabaseSetService.addDataCenter(LoginUser user, DatabaseSet dbset)", "testcase": false, "constructor": false}, {"identifier": "updateDataCenter", "parameters": "(LoginUser user, DatabaseSet newDbset)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> updateDataCenter(LoginUser user, DatabaseSet newDbset)", "full_signature": "public ServiceResult<String> updateDataCenter(LoginUser user, DatabaseSet newDbset)", "class_method_signature": "DatabaseSetService.updateDataCenter(LoginUser user, DatabaseSet newDbset)", "testcase": false, "constructor": false}, {"identifier": "deleteDataCenter", "parameters": "(LoginUser user, DatabaseSet dbset)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> deleteDataCenter(LoginUser user, DatabaseSet dbset)", "full_signature": "public ServiceResult<String> deleteDataCenter(LoginUser user, DatabaseSet dbset)", "class_method_signature": "DatabaseSetService.deleteDataCenter(LoginUser user, DatabaseSet dbset)", "testcase": false, "constructor": false}, {"identifier": "syncDbSet", "parameters": "(LoginUser user, DatabaseSet dbset)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> syncDbSet(LoginUser user, DatabaseSet dbset)", "full_signature": "public ServiceResult<String> syncDbSet(LoginUser user, DatabaseSet dbset)", "class_method_signature": "DatabaseSetService.syncDbSet(LoginUser user, DatabaseSet dbset)", "testcase": false, "constructor": false}, {"identifier": "getCheckData", "parameters": "(LoginUser user, DatabaseSet dbset)", "modifiers": "public", "return": "ConfigCkeckResult<List<ConfigDataResponse>>", "signature": "ConfigCkeckResult<List<ConfigDataResponse>> getCheckData(LoginUser user, DatabaseSet dbset)", "full_signature": "public ConfigCkeckResult<List<ConfigDataResponse>> getCheckData(LoginUser user, DatabaseSet dbset)", "class_method_signature": "DatabaseSetService.getCheckData(LoginUser user, DatabaseSet dbset)", "testcase": false, "constructor": false}, {"identifier": "getDbSetButton", "parameters": "(LoginUser user)", "modifiers": "public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> getDbSetButton(LoginUser user)", "full_signature": "public ServiceResult<String> getDbSetButton(LoginUser user)", "class_method_signature": "DatabaseSetService.getDbSetButton(LoginUser user)", "testcase": false, "constructor": false}, {"identifier": "getAllCheckData", "parameters": "(LoginUser user, Long gourpId, DatabaseSet dbset)", "modifiers": "public", "return": "List<ConfigDataResponse>", "signature": "List<ConfigDataResponse> getAllCheckData(LoginUser user, Long gourpId, DatabaseSet dbset)", "full_signature": "public List<ConfigDataResponse> getAllCheckData(LoginUser user, Long gourpId, DatabaseSet dbset)", "class_method_signature": "DatabaseSetService.getAllCheckData(LoginUser user, Long gourpId, DatabaseSet dbset)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/service/DatabaseSetService.java"}, "focal_method": {"identifier": "findDbSetPageList", "parameters": "(Paging<DatabaseSet> paging)", "modifiers": "public", "return": "ListResult<DatabaseSetView>", "body": "public ListResult<DatabaseSetView> findDbSetPageList(Paging<DatabaseSet> paging) throws SQLException {\n        Long count = databaseSetDao.getDbSetTotalCount(paging);\n        return PagerUtil.find(count, paging.getPage(), paging.getPageSize(), () -> {\n            List<DatabaseSetView> list = databaseSetDao.findDbSetPageList(paging);\n            if (CollectionUtils.isEmpty(list)) {\n                return Collections.emptyList();\n            }\n            return list;\n        });\n    }", "signature": "ListResult<DatabaseSetView> findDbSetPageList(Paging<DatabaseSet> paging)", "full_signature": "public ListResult<DatabaseSetView> findDbSetPageList(Paging<DatabaseSet> paging)", "class_method_signature": "DatabaseSetService.findDbSetPageList(Paging<DatabaseSet> paging)", "testcase": false, "constructor": false, "invocations": ["getDbSetTotalCount", "find", "getPage", "getPageSize", "findDbSetPageList", "isEmpty", "emptyList"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}