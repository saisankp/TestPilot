{"test_class": {"identifier": "KeyLocationResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    JsonWebSignature signature;", "modifier": "@Mock", "type": "JsonWebSignature", "declarator": "signature", "var_name": "signature"}, {"original_string": "@Mock\n    Headers headers;", "modifier": "@Mock", "type": "Headers", "declarator": "headers", "var_name": "headers"}, {"original_string": "@Mock\n    HttpsJwks mockedHttpsJwks;", "modifier": "@Mock", "type": "HttpsJwks", "declarator": "mockedHttpsJwks", "var_name": "mockedHttpsJwks"}, {"original_string": "@Mock\n    UrlStreamResolver urlResolver;", "modifier": "@Mock", "type": "UrlStreamResolver", "declarator": "urlResolver", "var_name": "urlResolver"}, {"original_string": "RSAPublicKey rsaKey;", "modifier": "", "type": "RSAPublicKey", "declarator": "rsaKey", "var_name": "rsaKey"}, {"original_string": "SecretKey secretKey;", "modifier": "", "type": "SecretKey", "declarator": "secretKey", "var_name": "secretKey"}, {"original_string": "@Rule\n    public ExpectedException expectedEx = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedEx = ExpectedException.none()", "var_name": "expectedEx"}], "file": "implementation/src/test/java/io/smallrye/jwt/auth/principal/KeyLocationResolverTest.java"}, "test_case": {"identifier": "testLoadHttpsJwksNonMathchingKidAndRefreshDeclined", "parameters": "()", "modifiers": "@Test(expected = UnresolvableKeyException.class) public", "return": "void", "body": "@Test(expected = UnresolvableKeyException.class)\n    public void testLoadHttpsJwksNonMathchingKidAndRefreshDeclined() throws Exception {\n        JWTAuthContextInfo contextInfo = new JWTAuthContextInfo(\"https://github.com/my_key.jwks\", \"issuer\");\n        contextInfo.setJwksRefreshInterval(10);\n        contextInfo.setForcedJwksRefreshInterval(10);\n\n        KeyLocationResolver keyLocationResolver = new KeyLocationResolver(contextInfo) {\n            protected HttpsJwks initializeHttpsJwks(String loc) {\n                return mockedHttpsJwks;\n            }\n        };\n        // token 'kid' is '1'\n        when(signature.getHeaders()).thenReturn(headers);\n        when(headers.getStringHeaderValue(JsonWebKey.KEY_ID_PARAMETER)).thenReturn(\"1\");\n\n        final RsaJsonWebKey jwk = new RsaJsonWebKey(rsaKey);\n\n        // Return JWK Set with a non-matching JWK with 'kid' set to '2' \n        jwk.setKeyId(\"2\");\n        when(mockedHttpsJwks.getJsonWebKeys()).thenReturn(Collections.singletonList(jwk));\n\n        // Refresh JWK Set and get a matching JWK with 'kid' set to '1'\n        doAnswer((i) -> {\n            jwk.setKeyId(\"1\");\n            return null;\n        }).when(mockedHttpsJwks).refresh();\n\n        keyLocationResolver = Mockito.spy(keyLocationResolver);\n        assertEquals(rsaKey, keyLocationResolver.resolveKey(signature, emptyList()));\n        assertNull(keyLocationResolver.key);\n\n        // Return JWK Set with a non-matching JWK with 'kid' set to '2'\n        jwk.setKeyId(\"2\");\n        keyLocationResolver.resolveKey(signature, emptyList());\n    }", "signature": "void testLoadHttpsJwksNonMathchingKidAndRefreshDeclined()", "full_signature": "@Test(expected = UnresolvableKeyException.class) public void testLoadHttpsJwksNonMathchingKidAndRefreshDeclined()", "class_method_signature": "KeyLocationResolverTest.testLoadHttpsJwksNonMathchingKidAndRefreshDeclined()", "testcase": true, "constructor": false, "invocations": ["setJwksRefreshInterval", "setForcedJwksRefreshInterval", "thenReturn", "when", "getHeaders", "thenReturn", "when", "getStringHeaderValue", "setKeyId", "thenReturn", "when", "getJsonWebKeys", "singletonList", "refresh", "when", "doAnswer", "setKeyId", "spy", "assertEquals", "resolveKey", "emptyList", "assertNull", "setKeyId", "resolveKey", "emptyList"]}, "focal_class": {"identifier": "KeyLocationResolver", "superclass": "extends AbstractKeyLocationResolver", "interfaces": "implements VerificationKeyResolver", "fields": [], "methods": [{"identifier": "KeyLocationResolver", "parameters": "(JWTAuthContextInfo authContextInfo)", "modifiers": "public", "return": "", "signature": " KeyLocationResolver(JWTAuthContextInfo authContextInfo)", "full_signature": "public  KeyLocationResolver(JWTAuthContextInfo authContextInfo)", "class_method_signature": "KeyLocationResolver.KeyLocationResolver(JWTAuthContextInfo authContextInfo)", "testcase": false, "constructor": true}, {"identifier": "resolveKey", "parameters": "(JsonWebSignature jws, List<JsonWebStructure> nestingContext)", "modifiers": "@Override public", "return": "Key", "signature": "Key resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext)", "full_signature": "@Override public Key resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext)", "class_method_signature": "KeyLocationResolver.resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext)", "testcase": false, "constructor": false}, {"identifier": "tryAsVerificationJwk", "parameters": "(JsonWebSignature jws)", "modifiers": "private", "return": "Key", "signature": "Key tryAsVerificationJwk(JsonWebSignature jws)", "full_signature": "private Key tryAsVerificationJwk(JsonWebSignature jws)", "class_method_signature": "KeyLocationResolver.tryAsVerificationJwk(JsonWebSignature jws)", "testcase": false, "constructor": false}, {"identifier": "fromJwkToVerificationKey", "parameters": "(JsonWebKey jwk)", "modifiers": "private", "return": "Key", "signature": "Key fromJwkToVerificationKey(JsonWebKey jwk)", "full_signature": "private Key fromJwkToVerificationKey(JsonWebKey jwk)", "class_method_signature": "KeyLocationResolver.fromJwkToVerificationKey(JsonWebKey jwk)", "testcase": false, "constructor": false}, {"identifier": "initializeKeyContent", "parameters": "()", "modifiers": "protected", "return": "void", "signature": "void initializeKeyContent()", "full_signature": "protected void initializeKeyContent()", "class_method_signature": "KeyLocationResolver.initializeKeyContent()", "testcase": false, "constructor": false}, {"identifier": "tryAsPEMPublicKey", "parameters": "(String content, SignatureAlgorithm algo)", "modifiers": "static", "return": "PublicKey", "signature": "PublicKey tryAsPEMPublicKey(String content, SignatureAlgorithm algo)", "full_signature": "static PublicKey tryAsPEMPublicKey(String content, SignatureAlgorithm algo)", "class_method_signature": "KeyLocationResolver.tryAsPEMPublicKey(String content, SignatureAlgorithm algo)", "testcase": false, "constructor": false}, {"identifier": "tryAsPEMCertificate", "parameters": "(String content)", "modifiers": "", "return": "PublicKey", "signature": "PublicKey tryAsPEMCertificate(String content)", "full_signature": " PublicKey tryAsPEMCertificate(String content)", "class_method_signature": "KeyLocationResolver.tryAsPEMCertificate(String content)", "testcase": false, "constructor": false}], "file": "implementation/src/main/java/io/smallrye/jwt/auth/principal/KeyLocationResolver.java"}, "focal_method": {"identifier": "resolveKey", "parameters": "(JsonWebSignature jws, List<JsonWebStructure> nestingContext)", "modifiers": "@Override public", "return": "Key", "body": "@Override\n    public Key resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext) throws UnresolvableKeyException {\n        verifyKid(jws, authContextInfo.getTokenKeyId());\n\n        // The verificationKey may have been calculated in the constructor from the local PEM, or,\n        // if authContextInfo.getTokenKeyId() is not null - from the local JWK(S) content.\n        if (key != null) {\n            return key;\n        }\n\n        // At this point the key can be loaded from either the HTTPS or local JWK(s) content using\n        // the current token kid to select the key.\n        Key theKey = tryAsVerificationJwk(jws);\n\n        if (theKey == null) {\n            reportUnresolvableKeyException(authContextInfo.getPublicKeyContent(), authContextInfo.getPublicKeyLocation());\n        }\n        return theKey;\n    }", "signature": "Key resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext)", "full_signature": "@Override public Key resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext)", "class_method_signature": "KeyLocationResolver.resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext)", "testcase": false, "constructor": false, "invocations": ["verifyKid", "getTokenKeyId", "tryAsVerificationJwk", "reportUnresolvableKeyException", "getPublicKeyContent", "getPublicKeyLocation"]}, "repository": {"repo_id": 134901097, "url": "https://github.com/smallrye/smallrye-jwt", "stars": 19, "created": "5/25/2018 8:19:37 PM +00:00", "updates": "2020-01-23T18:42:37+00:00", "fork": "False", "license": "licensed"}}