{"test_class": {"identifier": "AbstractValueHolderTest", "superclass": "", "interfaces": "", "fields": [], "file": "smartparam-engine/src/test/java/org/smartparam/engine/core/type/AbstractValueHolderTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n\n        // przypadki testowe\n        Object[][] pairs = {\n            {new StringHolder(\"ab\"), new StringHolder(\"ab\"), true},\n            {new StringHolder(\"ab\"), new StringHolder(\"ac\"), false},\n            {new IntegerHolder(1L), new IntegerHolder(1L), true},\n            {new IntegerHolder(1L), new StringHolder(\"1\"), false},\n            {new StringHolder(\"ab\"), null, false}\n        };\n\n        // testy\n        for (int i = 0; i < pairs.length; i++) {\n            Object[] test = pairs[i];\n            ValueHolder h1 = (ValueHolder) test[0];\n            ValueHolder h2 = (ValueHolder) test[1];\n            boolean expectedResult = (Boolean) test[2];\n\n            // test 1\n            boolean result = h1.equals(h2);\n            assertEquals(expectedResult, result);\n\n            // test 2\n            if (h2 != null) {\n                result = h2.equals(h1);\n                assertEquals(expectedResult, result);\n            }\n        }\n\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "AbstractValueHolderTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["equals", "assertEquals", "equals", "assertEquals"]}, "focal_class": {"identifier": "AbstractValueHolder", "superclass": "", "interfaces": "implements ValueHolder", "fields": [{"original_string": "private static final int EXPECTED_TOSTRING_LENGTH = 32;", "modifier": "private static final", "type": "int", "declarator": "EXPECTED_TOSTRING_LENGTH = 32", "var_name": "EXPECTED_TOSTRING_LENGTH"}], "methods": [{"identifier": "isNull", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isNull()", "full_signature": "@Override public boolean isNull()", "class_method_signature": "AbstractValueHolder.isNull()", "testcase": false, "constructor": false}, {"identifier": "isNotNull", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isNotNull()", "full_signature": "@Override public boolean isNotNull()", "class_method_signature": "AbstractValueHolder.isNotNull()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "AbstractValueHolder.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "AbstractValueHolder.hashCode()", "testcase": false, "constructor": false}, {"identifier": "isComparable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isComparable()", "full_signature": "@Override public boolean isComparable()", "class_method_signature": "AbstractValueHolder.isComparable()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(ValueHolder o)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "int", "signature": "int compareTo(ValueHolder o)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public int compareTo(ValueHolder o)", "class_method_signature": "AbstractValueHolder.compareTo(ValueHolder o)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "AbstractValueHolder.toString()", "testcase": false, "constructor": false}, {"identifier": "prepareUnexpectedUsageException", "parameters": "(String valueType)", "modifiers": "private", "return": "UnsupportedOperationException", "signature": "UnsupportedOperationException prepareUnexpectedUsageException(String valueType)", "full_signature": "private UnsupportedOperationException prepareUnexpectedUsageException(String valueType)", "class_method_signature": "AbstractValueHolder.prepareUnexpectedUsageException(String valueType)", "testcase": false, "constructor": false}, {"identifier": "getString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getString()", "full_signature": "@Override public String getString()", "class_method_signature": "AbstractValueHolder.getString()", "testcase": false, "constructor": false}, {"identifier": "intValue", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int intValue()", "full_signature": "@Override public int intValue()", "class_method_signature": "AbstractValueHolder.intValue()", "testcase": false, "constructor": false}, {"identifier": "longValue", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long longValue()", "full_signature": "@Override public long longValue()", "class_method_signature": "AbstractValueHolder.longValue()", "testcase": false, "constructor": false}, {"identifier": "doubleValue", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double doubleValue()", "full_signature": "@Override public double doubleValue()", "class_method_signature": "AbstractValueHolder.doubleValue()", "testcase": false, "constructor": false}, {"identifier": "booleanValue", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean booleanValue()", "full_signature": "@Override public boolean booleanValue()", "class_method_signature": "AbstractValueHolder.booleanValue()", "testcase": false, "constructor": false}, {"identifier": "getInteger", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getInteger()", "full_signature": "@Override public Integer getInteger()", "class_method_signature": "AbstractValueHolder.getInteger()", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "()", "modifiers": "@Override public", "return": "Long", "signature": "Long getLong()", "full_signature": "@Override public Long getLong()", "class_method_signature": "AbstractValueHolder.getLong()", "testcase": false, "constructor": false}, {"identifier": "getDouble", "parameters": "()", "modifiers": "@Override public", "return": "Double", "signature": "Double getDouble()", "full_signature": "@Override public Double getDouble()", "class_method_signature": "AbstractValueHolder.getDouble()", "testcase": false, "constructor": false}, {"identifier": "getBoolean", "parameters": "()", "modifiers": "@Override public", "return": "Boolean", "signature": "Boolean getBoolean()", "full_signature": "@Override public Boolean getBoolean()", "class_method_signature": "AbstractValueHolder.getBoolean()", "testcase": false, "constructor": false}, {"identifier": "getBigDecimal", "parameters": "()", "modifiers": "@Override public", "return": "BigDecimal", "signature": "BigDecimal getBigDecimal()", "full_signature": "@Override public BigDecimal getBigDecimal()", "class_method_signature": "AbstractValueHolder.getBigDecimal()", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "()", "modifiers": "@Override public", "return": "Date", "signature": "Date getDate()", "full_signature": "@Override public Date getDate()", "class_method_signature": "AbstractValueHolder.getDate()", "testcase": false, "constructor": false}], "file": "smartparam-engine/src/main/java/org/smartparam/engine/core/type/AbstractValueHolder.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object obj) {\n        if (obj != null && obj.getClass() == this.getClass()) {\n\n            Object v1 = getValue();\n            Object v2 = ((ValueHolder) obj).getValue();\n\n            if (v1 == null) {\n                return v2 == null;\n            }\n            if (v2 != null) {\n                return v1.equals(v2);\n            }\n        }\n        return false;\n    }", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "AbstractValueHolder.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "getValue", "getValue", "equals"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}