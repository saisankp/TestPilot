{"test_class": {"identifier": "TestGitCheckout", "superclass": "extends TestBase", "interfaces": "", "fields": [{"original_string": "public static final String TEST_BRANCH = \"testBranch\";", "modifier": "public static final", "type": "String", "declarator": "TEST_BRANCH = \"testBranch\"", "var_name": "TEST_BRANCH"}, {"original_string": "private File repositoryDirectory;", "modifier": "private", "type": "File", "declarator": "repositoryDirectory", "var_name": "repositoryDirectory"}, {"original_string": "private String repositoryPath;", "modifier": "private", "type": "String", "declarator": "repositoryPath", "var_name": "repositoryPath"}, {"original_string": "private GitCommit gitCommit;", "modifier": "private", "type": "GitCommit", "declarator": "gitCommit", "var_name": "gitCommit"}, {"original_string": "private GitAdd gitAdd;", "modifier": "private", "type": "GitAdd", "declarator": "gitAdd", "var_name": "gitAdd"}, {"original_string": "private GitCheckout gitCheckout;", "modifier": "private", "type": "GitCheckout", "declarator": "gitCheckout", "var_name": "gitCheckout"}, {"original_string": "private File file1;", "modifier": "private", "type": "File", "declarator": "file1", "var_name": "file1"}, {"original_string": "private File file2;", "modifier": "private", "type": "File", "declarator": "file2", "var_name": "file2"}], "file": "javagit/src/test/java/edu/nyu/cs/javagit/api/commands/TestGitCheckout.java"}, "test_case": {"identifier": "testCheckingOutLocalllyDeletedFiles", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckingOutLocalllyDeletedFiles() throws JavaGitException, IOException {\n        List<File> filePaths = new ArrayList<File>();\n        File tmpFile;\n        try {\n            filePaths.add(tmpFile = new File(repositoryPath + File.separator + \"foobar01\"));\n            if (!tmpFile.exists()) {\n                System.out.println(\"tmpFile does not exit: \" + tmpFile.getPath());\n            }\n            if (tmpFile.delete()) { // locally delete the file\n                // check out the file from the repository after deletion\n                GitCheckoutResponse response = gitCheckout.checkout(repositoryDirectory, filePaths);\n                File checkedOutFile = new File(repositoryPath + File.separator + \"foobar01\");\n                assertTrue(checkedOutFile.exists());\n                FileUtilities.modifyFileContents(file2, \"Test for append to a file\");\n                GitCheckoutOptions options = new GitCheckoutOptions();\n                Ref branch = Ref.createBranchRef(\"master\");\n                response = gitCheckout.checkout(repositoryDirectory, options, branch);\n                assertEquals(\"Modified File exists\", 1, response.getNumberOfModifiedFiles());\n            } else {\n                fail(\"File delete failed\");\n            }\n        } catch (IOException e) {\n            System.err.println(e.getMessage());\n            e.printStackTrace();\n        }\n\n    }", "signature": "void testCheckingOutLocalllyDeletedFiles()", "full_signature": "@Test public void testCheckingOutLocalllyDeletedFiles()", "class_method_signature": "TestGitCheckout.testCheckingOutLocalllyDeletedFiles()", "testcase": true, "constructor": false, "invocations": ["add", "exists", "println", "getPath", "delete", "checkout", "assertTrue", "exists", "modifyFileContents", "createBranchRef", "checkout", "assertEquals", "getNumberOfModifiedFiles", "fail", "println", "getMessage", "printStackTrace"]}, "focal_class": {"identifier": "GitCheckout", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "checkout", "parameters": "(File repositoryPath, GitCheckoutOptions options, Ref branch)", "modifiers": "public", "return": "GitCheckoutResponse", "signature": "GitCheckoutResponse checkout(File repositoryPath, GitCheckoutOptions options, Ref branch)", "full_signature": "public GitCheckoutResponse checkout(File repositoryPath, GitCheckoutOptions options, Ref branch)", "class_method_signature": "GitCheckout.checkout(File repositoryPath, GitCheckoutOptions options, Ref branch)", "testcase": false, "constructor": false}, {"identifier": "checkout", "parameters": "(File repositoryPath, List<File> paths)", "modifiers": "public", "return": "GitCheckoutResponse", "signature": "GitCheckoutResponse checkout(File repositoryPath, List<File> paths)", "full_signature": "public GitCheckoutResponse checkout(File repositoryPath, List<File> paths)", "class_method_signature": "GitCheckout.checkout(File repositoryPath, List<File> paths)", "testcase": false, "constructor": false}, {"identifier": "checkout", "parameters": "(File repositoryPath, GitCheckoutOptions options, Ref branch,\n      File file)", "modifiers": "public", "return": "GitCheckoutResponse", "signature": "GitCheckoutResponse checkout(File repositoryPath, GitCheckoutOptions options, Ref branch,\n      File file)", "full_signature": "public GitCheckoutResponse checkout(File repositoryPath, GitCheckoutOptions options, Ref branch,\n      File file)", "class_method_signature": "GitCheckout.checkout(File repositoryPath, GitCheckoutOptions options, Ref branch,\n      File file)", "testcase": false, "constructor": false}, {"identifier": "checkout", "parameters": "(File repositoryPath, GitCheckoutOptions options, Ref branch,\n      List<File> paths)", "modifiers": "public", "return": "GitCheckoutResponse", "signature": "GitCheckoutResponse checkout(File repositoryPath, GitCheckoutOptions options, Ref branch,\n      List<File> paths)", "full_signature": "public GitCheckoutResponse checkout(File repositoryPath, GitCheckoutOptions options, Ref branch,\n      List<File> paths)", "class_method_signature": "GitCheckout.checkout(File repositoryPath, GitCheckoutOptions options, Ref branch,\n      List<File> paths)", "testcase": false, "constructor": false}, {"identifier": "checkout", "parameters": "(File repositoryPath, Ref ref, List<File> paths)", "modifiers": "public", "return": "GitCheckoutResponse", "signature": "GitCheckoutResponse checkout(File repositoryPath, Ref ref, List<File> paths)", "full_signature": "public GitCheckoutResponse checkout(File repositoryPath, Ref ref, List<File> paths)", "class_method_signature": "GitCheckout.checkout(File repositoryPath, Ref ref, List<File> paths)", "testcase": false, "constructor": false}], "file": "javagit/src/main/java/edu/nyu/cs/javagit/api/commands/GitCheckout.java"}, "focal_method": {"identifier": "checkout", "parameters": "(File repositoryPath, GitCheckoutOptions options, Ref branch)", "modifiers": "public", "return": "GitCheckoutResponse", "body": "public GitCheckoutResponse checkout(File repositoryPath, GitCheckoutOptions options, Ref branch)\n      throws IOException, JavaGitException {\n    CheckUtilities.checkFileValidity(repositoryPath);\n    CheckUtilities.validateArgumentRefType(branch, RefType.BRANCH, \"Branch name\");\n    IClient client = ClientManager.getInstance().getPreferredClient();\n    IGitCheckout gitCheckout = client.getGitCheckoutInstance();\n    return gitCheckout.checkout(repositoryPath, options, branch);\n  }", "signature": "GitCheckoutResponse checkout(File repositoryPath, GitCheckoutOptions options, Ref branch)", "full_signature": "public GitCheckoutResponse checkout(File repositoryPath, GitCheckoutOptions options, Ref branch)", "class_method_signature": "GitCheckout.checkout(File repositoryPath, GitCheckoutOptions options, Ref branch)", "testcase": false, "constructor": false, "invocations": ["checkFileValidity", "validateArgumentRefType", "getPreferredClient", "getInstance", "getGitCheckoutInstance", "checkout"]}, "repository": {"repo_id": 8397753, "url": "https://github.com/bit-man/SwissArmyJavaGit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 1549, "license": "licensed"}}