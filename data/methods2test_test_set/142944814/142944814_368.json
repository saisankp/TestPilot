{"test_class": {"identifier": "RequestMethodTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/common/src/test/java/hera/RequestMethodTest.java"}, "test_case": {"identifier": "testValidateType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testValidateType() throws Exception {\n    final List<Object> parameters = Arrays.<Object>asList(\"string\", 1, new LinkedList<>());\n    final List<Class<?>> types = Arrays.<Class<?>>asList(String.class, Integer.class,\n        LinkedList.class);\n    final RequestMethod<?> requestMethod = spy(RequestMethod.class);\n    for (int i = 0; i < parameters.size(); ++i) {\n      requestMethod.validateType(parameters, i, types.get(i));\n    }\n  }", "signature": "void testValidateType()", "full_signature": "@Test public void testValidateType()", "class_method_signature": "RequestMethodTest.testValidateType()", "testcase": true, "constructor": false, "invocations": ["asList", "asList", "spy", "size", "validateType", "get"]}, "focal_class": {"identifier": "RequestMethod", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "RequestMethod.getName()", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "()", "modifiers": "public", "return": "T", "signature": "T invoke()", "full_signature": "public T invoke()", "class_method_signature": "RequestMethod.invoke()", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(final List<Object> parameters)", "modifiers": "public", "return": "T", "signature": "T invoke(final List<Object> parameters)", "full_signature": "public T invoke(final List<Object> parameters)", "class_method_signature": "RequestMethod.invoke(final List<Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(final List<Object> parameters)", "modifiers": "protected", "return": "void", "signature": "void validate(final List<Object> parameters)", "full_signature": "protected void validate(final List<Object> parameters)", "class_method_signature": "RequestMethod.validate(final List<Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "validateType", "parameters": "(final List<Object> parameters, final int index,\n      final Class<?> clazz)", "modifiers": "protected", "return": "void", "signature": "void validateType(final List<Object> parameters, final int index,\n      final Class<?> clazz)", "full_signature": "protected void validateType(final List<Object> parameters, final int index,\n      final Class<?> clazz)", "class_method_signature": "RequestMethod.validateType(final List<Object> parameters, final int index,\n      final Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "validateValue", "parameters": "(final boolean condition, final String message)", "modifiers": "protected", "return": "void", "signature": "void validateValue(final boolean condition, final String message)", "full_signature": "protected void validateValue(final boolean condition, final String message)", "class_method_signature": "RequestMethod.validateValue(final boolean condition, final String message)", "testcase": false, "constructor": false}, {"identifier": "runInternal", "parameters": "(final List<Object> parameters)", "modifiers": "protected abstract", "return": "T", "signature": "T runInternal(final List<Object> parameters)", "full_signature": "protected abstract T runInternal(final List<Object> parameters)", "class_method_signature": "RequestMethod.runInternal(final List<Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "toInvocation", "parameters": "()", "modifiers": "public", "return": "Invocation<T>", "signature": "Invocation<T> toInvocation()", "full_signature": "public Invocation<T> toInvocation()", "class_method_signature": "RequestMethod.toInvocation()", "testcase": false, "constructor": false}, {"identifier": "toInvocation", "parameters": "(final List<Object> parameters)", "modifiers": "public", "return": "Invocation<T>", "signature": "Invocation<T> toInvocation(final List<Object> parameters)", "full_signature": "public Invocation<T> toInvocation(final List<Object> parameters)", "class_method_signature": "RequestMethod.toInvocation(final List<Object> parameters)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "RequestMethod.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object obj)", "full_signature": "@Override public boolean equals(final Object obj)", "class_method_signature": "RequestMethod.equals(final Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RequestMethod.hashCode()", "testcase": false, "constructor": false}], "file": "core/common/src/main/java/hera/RequestMethod.java"}, "focal_method": {"identifier": "validateType", "parameters": "(final List<Object> parameters, final int index,\n      final Class<?> clazz)", "modifiers": "protected", "return": "void", "body": "protected void validateType(final List<Object> parameters, final int index,\n      final Class<?> clazz) {\n    if (parameters.size() <= index) {\n      throw new IllegalArgumentException(\n          String.format(\"No parameter at index %d (expected: %s)%n\", index, clazz));\n    }\n\n    final Object parameter = parameters.get(index);\n    if (!clazz.isInstance(parameter)) {\n      throw new IllegalArgumentException(String\n          .format(\"Parameter at index %d is invalid (expected: %s, actual: %s)%n\", index, clazz,\n              parameter.getClass()));\n    }\n  }", "signature": "void validateType(final List<Object> parameters, final int index,\n      final Class<?> clazz)", "full_signature": "protected void validateType(final List<Object> parameters, final int index,\n      final Class<?> clazz)", "class_method_signature": "RequestMethod.validateType(final List<Object> parameters, final int index,\n      final Class<?> clazz)", "testcase": false, "constructor": false, "invocations": ["size", "format", "get", "isInstance", "format", "getClass"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}