{"test_class": {"identifier": "XQueryExpressionEvaluatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String QUERY = \"query\";", "modifier": "private static final", "type": "String", "declarator": "QUERY = \"query\"", "var_name": "QUERY"}, {"original_string": "private static final String INPUT = \"xml\";", "modifier": "private static final", "type": "String", "declarator": "INPUT = \"xml\"", "var_name": "INPUT"}, {"original_string": "@Mock\n    private ProcessorFactory processorFactory;", "modifier": "@Mock\n    private", "type": "ProcessorFactory", "declarator": "processorFactory", "var_name": "processorFactory"}, {"original_string": "@Mock\n    private SAXSourceFactory saxSourceFactory;", "modifier": "@Mock\n    private", "type": "SAXSourceFactory", "declarator": "saxSourceFactory", "var_name": "saxSourceFactory"}, {"original_string": "@Mock\n    private InputSourceFactory inputSourceFactory;", "modifier": "@Mock\n    private", "type": "InputSourceFactory", "declarator": "inputSourceFactory", "var_name": "inputSourceFactory"}, {"original_string": "@Mock\n    private SerializerFactory serializerFactory;", "modifier": "@Mock\n    private", "type": "SerializerFactory", "declarator": "serializerFactory", "var_name": "serializerFactory"}, {"original_string": "@Mock\n    private ByteArrayOutputStreamFactory byteArrayOutputStreamFactory;", "modifier": "@Mock\n    private", "type": "ByteArrayOutputStreamFactory", "declarator": "byteArrayOutputStreamFactory", "var_name": "byteArrayOutputStreamFactory"}, {"original_string": "@Mock\n    private Processor processor;", "modifier": "@Mock\n    private", "type": "Processor", "declarator": "processor", "var_name": "processor"}, {"original_string": "@Mock\n    private XQueryCompiler xQueryCompiler;", "modifier": "@Mock\n    private", "type": "XQueryCompiler", "declarator": "xQueryCompiler", "var_name": "xQueryCompiler"}, {"original_string": "@Mock\n    private XQueryExecutable xQueryExecutable;", "modifier": "@Mock\n    private", "type": "XQueryExecutable", "declarator": "xQueryExecutable", "var_name": "xQueryExecutable"}, {"original_string": "@Mock\n    private XQueryEvaluator xQueryEvaluator;", "modifier": "@Mock\n    private", "type": "XQueryEvaluator", "declarator": "xQueryEvaluator", "var_name": "xQueryEvaluator"}, {"original_string": "@Mock\n    private SAXSource saxSource;", "modifier": "@Mock\n    private", "type": "SAXSource", "declarator": "saxSource", "var_name": "saxSource"}, {"original_string": "@Mock\n    private ByteArrayOutputStream outputStream;", "modifier": "@Mock\n    private", "type": "ByteArrayOutputStream", "declarator": "outputStream", "var_name": "outputStream"}, {"original_string": "@Mock\n    private Serializer serializer;", "modifier": "@Mock\n    private", "type": "Serializer", "declarator": "serializer", "var_name": "serializer"}, {"original_string": "@Mock\n    private InputSource inputSource;", "modifier": "@Mock\n    private", "type": "InputSource", "declarator": "inputSource", "var_name": "inputSource"}, {"original_string": "@InjectMocks\n    private XQueryExpressionEvaluator underTest;", "modifier": "@InjectMocks\n    private", "type": "XQueryExpressionEvaluator", "declarator": "underTest", "var_name": "underTest"}], "file": "wilma-application/modules/wilma-stub-configuration-support/src/test/java/com/epam/wilma/stubconfig/condition/checker/xml/helper/XQueryExpressionEvaluatorTest.java"}, "test_case": {"identifier": "testEvaluateXQueryShouldReturnOutputStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEvaluateXQueryShouldReturnOutputStream() throws SaxonApiException {\n        //GIVEN in setUp\n        //WHEN\n        String actual = underTest.evaluateXQuery(INPUT, QUERY);\n        //THEN\n        assertEquals(actual, outputStream.toString());\n    }", "signature": "void testEvaluateXQueryShouldReturnOutputStream()", "full_signature": "@Test public void testEvaluateXQueryShouldReturnOutputStream()", "class_method_signature": "XQueryExpressionEvaluatorTest.testEvaluateXQueryShouldReturnOutputStream()", "testcase": true, "constructor": false, "invocations": ["evaluateXQuery", "assertEquals", "toString"]}, "focal_class": {"identifier": "XQueryExpressionEvaluator", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ProcessorFactory processorFactory;", "modifier": "@Autowired\n    private", "type": "ProcessorFactory", "declarator": "processorFactory", "var_name": "processorFactory"}, {"original_string": "@Autowired\n    private SAXSourceFactory saxSourceFactory;", "modifier": "@Autowired\n    private", "type": "SAXSourceFactory", "declarator": "saxSourceFactory", "var_name": "saxSourceFactory"}, {"original_string": "@Autowired\n    private InputSourceFactory inputSourceFactory;", "modifier": "@Autowired\n    private", "type": "InputSourceFactory", "declarator": "inputSourceFactory", "var_name": "inputSourceFactory"}, {"original_string": "@Autowired\n    private SerializerFactory serializerFactory;", "modifier": "@Autowired\n    private", "type": "SerializerFactory", "declarator": "serializerFactory", "var_name": "serializerFactory"}, {"original_string": "@Autowired\n    private ByteArrayOutputStreamFactory byteArrayOutputStreamFactory;", "modifier": "@Autowired\n    private", "type": "ByteArrayOutputStreamFactory", "declarator": "byteArrayOutputStreamFactory", "var_name": "byteArrayOutputStreamFactory"}, {"original_string": "@Autowired\n    private SaxonCompilerErrorListener errorListener;", "modifier": "@Autowired\n    private", "type": "SaxonCompilerErrorListener", "declarator": "errorListener", "var_name": "errorListener"}], "methods": [{"identifier": "evaluateXQuery", "parameters": "(final String xml, final String query)", "modifiers": "public", "return": "String", "signature": "String evaluateXQuery(final String xml, final String query)", "full_signature": "public String evaluateXQuery(final String xml, final String query)", "class_method_signature": "XQueryExpressionEvaluator.evaluateXQuery(final String xml, final String query)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-support/src/main/java/com/epam/wilma/stubconfig/condition/checker/xml/helper/XQueryExpressionEvaluator.java"}, "focal_method": {"identifier": "evaluateXQuery", "parameters": "(final String xml, final String query)", "modifiers": "public", "return": "String", "body": "public String evaluateXQuery(final String xml, final String query) throws SaxonApiException {\n        Processor processor = processorFactory.createProcessor();\n        XQueryCompiler xqueryCompiler = processor.newXQueryCompiler();\n        xqueryCompiler.setErrorListener(errorListener);\n        XQueryExecutable xqueryExec = xqueryCompiler.compile(query);\n        XQueryEvaluator xqueryEval = xqueryExec.load();\n        xqueryEval.setErrorListener(errorListener);\n        SAXSource requestXml = saxSourceFactory.createSAXSource(inputSourceFactory.createInputSource(xml));\n        xqueryEval.setSource(requestXml);\n        ByteArrayOutputStream baos = byteArrayOutputStreamFactory.createByteArrayOutputStream();\n        Serializer ser = serializerFactory.createSerializer(baos);\n        xqueryEval.setDestination(ser);\n        xqueryEval.run();\n        return baos.toString();\n    }", "signature": "String evaluateXQuery(final String xml, final String query)", "full_signature": "public String evaluateXQuery(final String xml, final String query)", "class_method_signature": "XQueryExpressionEvaluator.evaluateXQuery(final String xml, final String query)", "testcase": false, "constructor": false, "invocations": ["createProcessor", "newXQueryCompiler", "setErrorListener", "compile", "load", "setErrorListener", "createSAXSource", "createInputSource", "setSource", "createByteArrayOutputStream", "createSerializer", "setDestination", "run", "toString"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}