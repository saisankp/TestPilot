{"test_class": {"identifier": "ChiefControllerMessageEventTest", "superclass": "", "interfaces": "", "fields": [], "file": "OLAT-LMS/src/test/java/org/olat/presentation/framework/core/chiefcontrollers/ChiefControllerMessageEventTest.java"}, "test_case": {"identifier": "testHashCode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHashCode() {\n\n        String msg_A = \"A Test Message\";\n        // clusterwide with msg_A\n        ChiefControllerMessageEvent ccme_A_clusterwide = new ChiefControllerMessageEvent();\n        ccme_A_clusterwide.setMsg(msg_A);\n        ccme_A_clusterwide.setClusterWideMessage(true);\n\n        // not clusterwiede with same msg_A\n        ChiefControllerMessageEvent ccme_A = new ChiefControllerMessageEvent();\n        ccme_A.setMsg(msg_A);\n        ccme_A.setClusterWideMessage(false);\n\n        // same objects are equal according to the equals method (see other equal testcase)\n        assertTrue(\"MUST BE SAME HASHCODE: same objectRefs, clusterwide\", ccme_A_clusterwide.hashCode() == ccme_A_clusterwide.hashCode());\n        // subsequent call must still remain the same hashcode\n        assertTrue(\"MUST BE SAME HASHCODE: same objectRefs, clusterwide\", ccme_A_clusterwide.hashCode() == ccme_A_clusterwide.hashCode());\n\n        assertTrue(\"MUST BE SAME HASHCODE: same objectRefs\", ccme_A.hashCode() == ccme_A.hashCode());\n        assertTrue(\"MUST BE SAME HASHCODE: same objectRefs\", ccme_A.hashCode() == ccme_A.hashCode());\n\n        /*\n         * compare A with B, both with same message\n         */\n        String msg_B = \"A Test Message\";\n        // clusterwide with msg_B\n        ChiefControllerMessageEvent ccme_B_clusterwide = new ChiefControllerMessageEvent();\n        ccme_B_clusterwide.setMsg(msg_B);\n        ccme_B_clusterwide.setClusterWideMessage(true);\n\n        // not clusterwiede with same msg_B\n        ChiefControllerMessageEvent ccme_B = new ChiefControllerMessageEvent();\n        ccme_B.setMsg(msg_B);\n        ccme_B.setClusterWideMessage(false);\n\n        // A and B's are equal\n        assertTrue(\"MUST BE SAME HASHCODE: same message, and both clusterwide\", ccme_A_clusterwide.hashCode() == ccme_B_clusterwide.hashCode());\n        assertTrue(\"MUST BE SAME HASHCODE: same message, and both clusterwide\", ccme_A_clusterwide.hashCode() == ccme_B_clusterwide.hashCode());\n\n        assertTrue(\"MUST BE SAME HASHCODE: same message\", ccme_A.hashCode() == ccme_B.hashCode());\n        assertTrue(\"MUST BE SAME HASHCODE: same message\", ccme_A.hashCode() == ccme_B.hashCode());\n\n    }", "signature": "void testHashCode()", "full_signature": "@Test public void testHashCode()", "class_method_signature": "ChiefControllerMessageEventTest.testHashCode()", "testcase": true, "constructor": false, "invocations": ["setMsg", "setClusterWideMessage", "setMsg", "setClusterWideMessage", "assertTrue", "hashCode", "hashCode", "assertTrue", "hashCode", "hashCode", "assertTrue", "hashCode", "hashCode", "assertTrue", "hashCode", "hashCode", "setMsg", "setClusterWideMessage", "setMsg", "setClusterWideMessage", "assertTrue", "hashCode", "hashCode", "assertTrue", "hashCode", "hashCode", "assertTrue", "hashCode", "hashCode", "assertTrue", "hashCode", "hashCode"]}, "focal_class": {"identifier": "ChiefControllerMessageEvent", "superclass": "extends MultiUserEvent", "interfaces": "", "fields": [{"original_string": "public static final ChiefControllerMessageEvent CLEAR = new ChiefControllerMessageEvent(\"CLR\");", "modifier": "public static final", "type": "ChiefControllerMessageEvent", "declarator": "CLEAR = new ChiefControllerMessageEvent(\"CLR\")", "var_name": "CLEAR"}, {"original_string": "public static final String CHANGED_EVENT_CMD = Event.CHANGED_EVENT.getCommand();", "modifier": "public static final", "type": "String", "declarator": "CHANGED_EVENT_CMD = Event.CHANGED_EVENT.getCommand()", "var_name": "CHANGED_EVENT_CMD"}, {"original_string": "private String msg;", "modifier": "private", "type": "String", "declarator": "msg", "var_name": "msg"}, {"original_string": "private boolean clusterWideMessage = true;", "modifier": "private", "type": "boolean", "declarator": "clusterWideMessage = true", "var_name": "clusterWideMessage"}], "methods": [{"identifier": "ChiefControllerMessageEvent", "parameters": "()", "modifiers": "public", "return": "", "signature": " ChiefControllerMessageEvent()", "full_signature": "public  ChiefControllerMessageEvent()", "class_method_signature": "ChiefControllerMessageEvent.ChiefControllerMessageEvent()", "testcase": false, "constructor": true}, {"identifier": "ChiefControllerMessageEvent", "parameters": "(String command)", "modifiers": "private", "return": "", "signature": " ChiefControllerMessageEvent(String command)", "full_signature": "private  ChiefControllerMessageEvent(String command)", "class_method_signature": "ChiefControllerMessageEvent.ChiefControllerMessageEvent(String command)", "testcase": false, "constructor": true}, {"identifier": "getMsg", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMsg()", "full_signature": "public String getMsg()", "class_method_signature": "ChiefControllerMessageEvent.getMsg()", "testcase": false, "constructor": false}, {"identifier": "setMsg", "parameters": "(String msg)", "modifiers": "public", "return": "void", "signature": "void setMsg(String msg)", "full_signature": "public void setMsg(String msg)", "class_method_signature": "ChiefControllerMessageEvent.setMsg(String msg)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ChiefControllerMessageEvent.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object event)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object event)", "full_signature": "@Override public boolean equals(Object event)", "class_method_signature": "ChiefControllerMessageEvent.equals(Object event)", "testcase": false, "constructor": false}, {"identifier": "isClusterWideMessage", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isClusterWideMessage()", "full_signature": "public boolean isClusterWideMessage()", "class_method_signature": "ChiefControllerMessageEvent.isClusterWideMessage()", "testcase": false, "constructor": false}, {"identifier": "setClusterWideMessage", "parameters": "(boolean clusterWideMessage)", "modifiers": "public", "return": "void", "signature": "void setClusterWideMessage(boolean clusterWideMessage)", "full_signature": "public void setClusterWideMessage(boolean clusterWideMessage)", "class_method_signature": "ChiefControllerMessageEvent.setClusterWideMessage(boolean clusterWideMessage)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ChiefControllerMessageEvent.hashCode()", "testcase": false, "constructor": false}], "file": "OLAT-LMS/src/main/java/org/olat/presentation/framework/core/chiefcontrollers/ChiefControllerMessageEvent.java"}, "focal_method": {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int hashCode() {\n        int hc = 5;\n        int hcMul = 7;\n        hc = hc * hcMul + (clusterWideMessage ? 0 : 1);\n        hc = hc * hcMul + (msg == null ? 0 : msg.hashCode());\n        return hc * hcMul + super.hashCode();\n    }", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ChiefControllerMessageEvent.hashCode()", "testcase": false, "constructor": false, "invocations": ["hashCode", "hashCode"]}, "repository": {"repo_id": 22589840, "url": "https://github.com/huihoo/olat", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 10, "size": 69738, "license": "licensed"}}