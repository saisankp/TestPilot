{"test_class": {"identifier": "RepositoryUserAccessServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private RepositoryUserService userService;", "modifier": "@Mock\n    private", "type": "RepositoryUserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "@Mock\n    private AccessIntervalRepository intervalRepo;", "modifier": "@Mock\n    private", "type": "AccessIntervalRepository", "declarator": "intervalRepo", "var_name": "intervalRepo"}, {"original_string": "@Mock\n    private UserAccessEventHandler userAccessEventHandlerMock;", "modifier": "@Mock\n    private", "type": "UserAccessEventHandler", "declarator": "userAccessEventHandlerMock", "var_name": "userAccessEventHandlerMock"}, {"original_string": "@Mock\n    private User userMock;", "modifier": "@Mock\n    private", "type": "User", "declarator": "userMock", "var_name": "userMock"}, {"original_string": "@Mock\n    private AccessInterval accessIntervalMock;", "modifier": "@Mock\n    private", "type": "AccessInterval", "declarator": "accessIntervalMock", "var_name": "accessIntervalMock"}, {"original_string": "private Clock clock;", "modifier": "private", "type": "Clock", "declarator": "clock", "var_name": "clock"}, {"original_string": "private RepositoryUserAccessService accessService;", "modifier": "private", "type": "RepositoryUserAccessService", "declarator": "accessService", "var_name": "accessService"}], "file": "backend/project-board/src/test/java/de/adesso/projectboard/ad/access/RepositoryUserAccessServiceTest.java"}, "test_case": {"identifier": "giveUserAccessUntilCreatesAccessWhenUserHasNoAccessInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void giveUserAccessUntilCreatesAccessWhenUserHasNoAccessInstance() {\n        // given\n        var expectedStartTime = LocalDateTime.now(clock);\n        var expectedEndTime = LocalDateTime.now(clock).plus(10L , ChronoUnit.DAYS);\n\n        given(userMock.getLatestAccessInterval()).willReturn(Optional.empty());\n        given(userService.save(userMock)).willReturn(userMock);\n\n        // when\n        var actualUser = accessService.giveUserAccessUntil(userMock, expectedEndTime);\n\n        // then\n        assertThat(actualUser).isEqualTo(userMock);\n\n        var accessInfoArgumentCaptor = ArgumentCaptor.forClass(AccessInterval.class);\n        verify(userMock, times(2)).addAccessInterval(accessInfoArgumentCaptor.capture());\n        var createdAccessInterval = accessInfoArgumentCaptor.getValue();\n\n        var softly = new SoftAssertions();\n        softly.assertThat(createdAccessInterval.getUser()).isEqualTo(userMock);\n        softly.assertThat(createdAccessInterval.getStartTime()).isEqualTo(expectedStartTime);\n        softly.assertThat(createdAccessInterval.getEndTime()).isEqualTo(expectedEndTime);\n        softly.assertAll();\n\n        verify(userService).save(userMock);\n        verify(userAccessEventHandlerMock).onAccessCreated(userMock, createdAccessInterval);\n    }", "signature": "void giveUserAccessUntilCreatesAccessWhenUserHasNoAccessInstance()", "full_signature": "@Test public void giveUserAccessUntilCreatesAccessWhenUserHasNoAccessInstance()", "class_method_signature": "RepositoryUserAccessServiceTest.giveUserAccessUntilCreatesAccessWhenUserHasNoAccessInstance()", "testcase": true, "constructor": false, "invocations": ["now", "plus", "now", "willReturn", "given", "getLatestAccessInterval", "empty", "willReturn", "given", "save", "giveUserAccessUntil", "isEqualTo", "assertThat", "forClass", "addAccessInterval", "verify", "times", "capture", "getValue", "isEqualTo", "assertThat", "getUser", "isEqualTo", "assertThat", "getStartTime", "isEqualTo", "assertThat", "getEndTime", "assertAll", "save", "verify", "onAccessCreated", "verify"]}, "focal_class": {"identifier": "RepositoryUserAccessService", "superclass": "", "interfaces": "implements UserAccessService", "fields": [{"original_string": "private final RepositoryUserService userService;", "modifier": "private final", "type": "RepositoryUserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "private final AccessIntervalRepository intervalRepo;", "modifier": "private final", "type": "AccessIntervalRepository", "declarator": "intervalRepo", "var_name": "intervalRepo"}, {"original_string": "private final UserAccessEventHandler userAccessEventHandler;", "modifier": "private final", "type": "UserAccessEventHandler", "declarator": "userAccessEventHandler", "var_name": "userAccessEventHandler"}, {"original_string": "private final Clock clock;", "modifier": "private final", "type": "Clock", "declarator": "clock", "var_name": "clock"}], "methods": [{"identifier": "RepositoryUserAccessService", "parameters": "(RepositoryUserService userService,\n                                       AccessIntervalRepository intervalRepo,\n                                       UserAccessEventHandler userAccessEventHandler,\n                                       Clock clock)", "modifiers": "@Autowired public", "return": "", "signature": " RepositoryUserAccessService(RepositoryUserService userService,\n                                       AccessIntervalRepository intervalRepo,\n                                       UserAccessEventHandler userAccessEventHandler,\n                                       Clock clock)", "full_signature": "@Autowired public  RepositoryUserAccessService(RepositoryUserService userService,\n                                       AccessIntervalRepository intervalRepo,\n                                       UserAccessEventHandler userAccessEventHandler,\n                                       Clock clock)", "class_method_signature": "RepositoryUserAccessService.RepositoryUserAccessService(RepositoryUserService userService,\n                                       AccessIntervalRepository intervalRepo,\n                                       UserAccessEventHandler userAccessEventHandler,\n                                       Clock clock)", "testcase": false, "constructor": true}, {"identifier": "giveUserAccessUntil", "parameters": "(User user, LocalDateTime until)", "modifiers": "@Override public", "return": "User", "signature": "User giveUserAccessUntil(User user, LocalDateTime until)", "full_signature": "@Override public User giveUserAccessUntil(User user, LocalDateTime until)", "class_method_signature": "RepositoryUserAccessService.giveUserAccessUntil(User user, LocalDateTime until)", "testcase": false, "constructor": false}, {"identifier": "removeAccessFromUser", "parameters": "(User user)", "modifiers": "@Override public", "return": "User", "signature": "User removeAccessFromUser(User user)", "full_signature": "@Override public User removeAccessFromUser(User user)", "class_method_signature": "RepositoryUserAccessService.removeAccessFromUser(User user)", "testcase": false, "constructor": false}, {"identifier": "userHasActiveAccessInterval", "parameters": "(User user)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean userHasActiveAccessInterval(User user)", "full_signature": "@Override public boolean userHasActiveAccessInterval(User user)", "class_method_signature": "RepositoryUserAccessService.userHasActiveAccessInterval(User user)", "testcase": false, "constructor": false}], "file": "backend/project-board/src/main/java/de/adesso/projectboard/ad/access/RepositoryUserAccessService.java"}, "focal_method": {"identifier": "giveUserAccessUntil", "parameters": "(User user, LocalDateTime until)", "modifiers": "@Override public", "return": "User", "body": "@Override\n    public User giveUserAccessUntil(User user, LocalDateTime until) throws IllegalArgumentException {\n        if(until.isBefore(LocalDateTime.now(clock))) {\n            throw new IllegalArgumentException(\"End date must lie in the future!\");\n        }\n\n        var latestIntervalOptional = user.getLatestAccessInterval();\n\n        if(latestIntervalOptional.isEmpty() || !userHasActiveAccessInterval(user)) {\n            var interval = new AccessInterval(user, LocalDateTime.now(clock), until);\n            user.addAccessInterval(interval);\n\n            userAccessEventHandler.onAccessCreated(user, interval);\n\n            return userService.save(user);\n        } else {\n            var latestInterval = latestIntervalOptional.get();\n            var oldEndTime = latestInterval.getEndTime();\n            if(oldEndTime.isEqual(until)) {\n                return user;\n            }\n\n            latestInterval.setEndTime(until);\n            intervalRepo.save(latestInterval);\n\n            userAccessEventHandler.onAccessChanged(user, latestInterval, oldEndTime);\n        }\n\n        return user;\n    }", "signature": "User giveUserAccessUntil(User user, LocalDateTime until)", "full_signature": "@Override public User giveUserAccessUntil(User user, LocalDateTime until)", "class_method_signature": "RepositoryUserAccessService.giveUserAccessUntil(User user, LocalDateTime until)", "testcase": false, "constructor": false, "invocations": ["isBefore", "now", "getLatestAccessInterval", "isEmpty", "userHasActiveAccessInterval", "now", "addAccessInterval", "onAccessCreated", "save", "get", "getEndTime", "isEqual", "setEndTime", "save", "onAccessChanged"]}, "repository": {"repo_id": 144251992, "url": "https://github.com/adessoAG/project-board", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2608, "license": "licensed"}}