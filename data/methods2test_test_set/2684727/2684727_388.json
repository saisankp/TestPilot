{"test_class": {"identifier": "ReportTooltipInteractorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int DAYS = 20;", "modifier": "private static final", "type": "int", "declarator": "DAYS = 20", "var_name": "DAYS"}, {"original_string": "ReportTooltipInteractor interactor;", "modifier": "", "type": "ReportTooltipInteractor", "declarator": "interactor", "var_name": "interactor"}, {"original_string": "FragmentActivity activity = Robolectric.setupActivity(FragmentActivity.class);", "modifier": "", "type": "FragmentActivity", "declarator": "activity = Robolectric.setupActivity(FragmentActivity.class)", "var_name": "activity"}, {"original_string": "@Mock\n    NavigationHandler navigationHandler;", "modifier": "@Mock", "type": "NavigationHandler", "declarator": "navigationHandler", "var_name": "navigationHandler"}, {"original_string": "@Mock\n    BackupProvidersManager backupProvidersManager;", "modifier": "@Mock", "type": "BackupProvidersManager", "declarator": "backupProvidersManager", "var_name": "backupProvidersManager"}, {"original_string": "@Mock\n    Analytics analytics;", "modifier": "@Mock", "type": "Analytics", "declarator": "analytics", "var_name": "analytics"}, {"original_string": "@Mock\n    GenerateInfoTooltipManager generateInfoTooltipManager;", "modifier": "@Mock", "type": "GenerateInfoTooltipManager", "declarator": "generateInfoTooltipManager", "var_name": "generateInfoTooltipManager"}, {"original_string": "@Mock\n    BackupReminderTooltipManager backupReminderTooltipManager;", "modifier": "@Mock", "type": "BackupReminderTooltipManager", "declarator": "backupReminderTooltipManager", "var_name": "backupReminderTooltipManager"}, {"original_string": "@Mock\n    ImportInfoTooltipManager importInfoTooltipManager;", "modifier": "@Mock", "type": "ImportInfoTooltipManager", "declarator": "importInfoTooltipManager", "var_name": "importInfoTooltipManager"}, {"original_string": "private final SyncErrorType errorType = SyncErrorType.NoRemoteDiskSpace;", "modifier": "private final", "type": "SyncErrorType", "declarator": "errorType = SyncErrorType.NoRemoteDiskSpace", "var_name": "errorType"}], "file": "app/src/test/java/co/smartreceipts/android/widget/tooltip/report/ReportTooltipInteractorTest.java"}, "test_case": {"identifier": "getImportInfo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getImportInfo() {\n        when(importInfoTooltipManager.needToShowImportInfo()).thenReturn(Observable.just(true));\n\n        interactor.checkTooltipCauses()\n                .test()\n                .assertNoErrors()\n                .assertValue(ReportTooltipUiIndicator.importInfo());\n    }", "signature": "void getImportInfo()", "full_signature": "@Test public void getImportInfo()", "class_method_signature": "ReportTooltipInteractorTest.getImportInfo()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "needToShowImportInfo", "just", "assertValue", "assertNoErrors", "test", "checkTooltipCauses", "importInfo"]}, "focal_class": {"identifier": "ReportTooltipInteractor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final FragmentActivity fragmentActivity;", "modifier": "private final", "type": "FragmentActivity", "declarator": "fragmentActivity", "var_name": "fragmentActivity"}, {"original_string": "private final NavigationHandler navigationHandler;", "modifier": "private final", "type": "NavigationHandler", "declarator": "navigationHandler", "var_name": "navigationHandler"}, {"original_string": "private final BackupProvidersManager backupProvidersManager;", "modifier": "private final", "type": "BackupProvidersManager", "declarator": "backupProvidersManager", "var_name": "backupProvidersManager"}, {"original_string": "private final Analytics analytics;", "modifier": "private final", "type": "Analytics", "declarator": "analytics", "var_name": "analytics"}, {"original_string": "private final GenerateInfoTooltipManager generateInfoTooltipManager;", "modifier": "private final", "type": "GenerateInfoTooltipManager", "declarator": "generateInfoTooltipManager", "var_name": "generateInfoTooltipManager"}, {"original_string": "private final BackupReminderTooltipManager backupReminderTooltipManager;", "modifier": "private final", "type": "BackupReminderTooltipManager", "declarator": "backupReminderTooltipManager", "var_name": "backupReminderTooltipManager"}, {"original_string": "private final ImportInfoTooltipManager importInfoTooltipManager;", "modifier": "private final", "type": "ImportInfoTooltipManager", "declarator": "importInfoTooltipManager", "var_name": "importInfoTooltipManager"}], "methods": [{"identifier": "ReportTooltipInteractor", "parameters": "(T activity, NavigationHandler navigationHandler,\n                                   BackupProvidersManager backupProvidersManager,\n                                   Analytics analytics, GenerateInfoTooltipManager infoTooltipManager,\n                                   BackupReminderTooltipManager backupReminderTooltipManager,\n                                   ImportInfoTooltipManager importInfoTooltipManager)", "modifiers": "@Inject public", "return": "", "signature": " ReportTooltipInteractor(T activity, NavigationHandler navigationHandler,\n                                   BackupProvidersManager backupProvidersManager,\n                                   Analytics analytics, GenerateInfoTooltipManager infoTooltipManager,\n                                   BackupReminderTooltipManager backupReminderTooltipManager,\n                                   ImportInfoTooltipManager importInfoTooltipManager)", "full_signature": "@Inject public  ReportTooltipInteractor(T activity, NavigationHandler navigationHandler,\n                                   BackupProvidersManager backupProvidersManager,\n                                   Analytics analytics, GenerateInfoTooltipManager infoTooltipManager,\n                                   BackupReminderTooltipManager backupReminderTooltipManager,\n                                   ImportInfoTooltipManager importInfoTooltipManager)", "class_method_signature": "ReportTooltipInteractor.ReportTooltipInteractor(T activity, NavigationHandler navigationHandler,\n                                   BackupProvidersManager backupProvidersManager,\n                                   Analytics analytics, GenerateInfoTooltipManager infoTooltipManager,\n                                   BackupReminderTooltipManager backupReminderTooltipManager,\n                                   ImportInfoTooltipManager importInfoTooltipManager)", "testcase": false, "constructor": true}, {"identifier": "checkTooltipCauses", "parameters": "()", "modifiers": "public", "return": "Observable<ReportTooltipUiIndicator>", "signature": "Observable<ReportTooltipUiIndicator> checkTooltipCauses()", "full_signature": "public Observable<ReportTooltipUiIndicator> checkTooltipCauses()", "class_method_signature": "ReportTooltipInteractor.checkTooltipCauses()", "testcase": false, "constructor": false}, {"identifier": "getErrorStream", "parameters": "()", "modifiers": "private", "return": "Observable<SyncErrorType>", "signature": "Observable<SyncErrorType> getErrorStream()", "full_signature": "private Observable<SyncErrorType> getErrorStream()", "class_method_signature": "ReportTooltipInteractor.getErrorStream()", "testcase": false, "constructor": false}, {"identifier": "getInfoStream", "parameters": "()", "modifiers": "private", "return": "Observable<ReportTooltipUiIndicator>", "signature": "Observable<ReportTooltipUiIndicator> getInfoStream()", "full_signature": "private Observable<ReportTooltipUiIndicator> getInfoStream()", "class_method_signature": "ReportTooltipInteractor.getInfoStream()", "testcase": false, "constructor": false}, {"identifier": "checkGenerateInfoCauses", "parameters": "()", "modifiers": "private", "return": "Single<ReportTooltipUiIndicator>", "signature": "Single<ReportTooltipUiIndicator> checkGenerateInfoCauses()", "full_signature": "private Single<ReportTooltipUiIndicator> checkGenerateInfoCauses()", "class_method_signature": "ReportTooltipInteractor.checkGenerateInfoCauses()", "testcase": false, "constructor": false}, {"identifier": "checkImportInfoCauses", "parameters": "()", "modifiers": "private", "return": "Observable<ReportTooltipUiIndicator>", "signature": "Observable<ReportTooltipUiIndicator> checkImportInfoCauses()", "full_signature": "private Observable<ReportTooltipUiIndicator> checkImportInfoCauses()", "class_method_signature": "ReportTooltipInteractor.checkImportInfoCauses()", "testcase": false, "constructor": false}, {"identifier": "checkBackupReminderCauses", "parameters": "()", "modifiers": "private", "return": "Single<ReportTooltipUiIndicator>", "signature": "Single<ReportTooltipUiIndicator> checkBackupReminderCauses()", "full_signature": "private Single<ReportTooltipUiIndicator> checkBackupReminderCauses()", "class_method_signature": "ReportTooltipInteractor.checkBackupReminderCauses()", "testcase": false, "constructor": false}, {"identifier": "handleClickOnErrorTooltip", "parameters": "(@NonNull SyncErrorType syncErrorType)", "modifiers": "public", "return": "void", "signature": "void handleClickOnErrorTooltip(@NonNull SyncErrorType syncErrorType)", "full_signature": "public void handleClickOnErrorTooltip(@NonNull SyncErrorType syncErrorType)", "class_method_signature": "ReportTooltipInteractor.handleClickOnErrorTooltip(@NonNull SyncErrorType syncErrorType)", "testcase": false, "constructor": false}, {"identifier": "generateInfoTooltipClosed", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void generateInfoTooltipClosed()", "full_signature": "public void generateInfoTooltipClosed()", "class_method_signature": "ReportTooltipInteractor.generateInfoTooltipClosed()", "testcase": false, "constructor": false}, {"identifier": "backupReminderTooltipClosed", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void backupReminderTooltipClosed()", "full_signature": "public void backupReminderTooltipClosed()", "class_method_signature": "ReportTooltipInteractor.backupReminderTooltipClosed()", "testcase": false, "constructor": false}, {"identifier": "importInfoTooltipClosed", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void importInfoTooltipClosed()", "full_signature": "public void importInfoTooltipClosed()", "class_method_signature": "ReportTooltipInteractor.importInfoTooltipClosed()", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/widget/tooltip/report/ReportTooltipInteractor.java"}, "focal_method": {"identifier": "checkTooltipCauses", "parameters": "()", "modifiers": "public", "return": "Observable<ReportTooltipUiIndicator>", "body": "public Observable<ReportTooltipUiIndicator> checkTooltipCauses() {\n\n        return Observable.combineLatest(\n                getErrorStream()\n                        .doOnNext(syncErrorType -> { // it must start with some element because actual source observable can be empty() or never()\n                            analytics.record(new DefaultDataPointEvent(Events.Sync.DisplaySyncError)\n                                    .addDataPoint(new DataPoint(SyncErrorType.class.getName(), syncErrorType)));\n                            Logger.info(this, \"Received sync error: {}.\", syncErrorType);\n                        })\n                        .flatMap(syncErrorType -> Observable.just(ReportTooltipUiIndicator.syncError(syncErrorType)))\n                        .startWith(ReportTooltipUiIndicator.none()),\n                getInfoStream(),\n                (errorUiIndicator, infoUiIndicator) -> errorUiIndicator.getState() != None ? errorUiIndicator : infoUiIndicator)\n                .observeOn(AndroidSchedulers.mainThread());\n    }", "signature": "Observable<ReportTooltipUiIndicator> checkTooltipCauses()", "full_signature": "public Observable<ReportTooltipUiIndicator> checkTooltipCauses()", "class_method_signature": "ReportTooltipInteractor.checkTooltipCauses()", "testcase": false, "constructor": false, "invocations": ["observeOn", "combineLatest", "startWith", "flatMap", "doOnNext", "getErrorStream", "record", "addDataPoint", "getName", "info", "just", "syncError", "none", "getInfoStream", "getState", "mainThread"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}