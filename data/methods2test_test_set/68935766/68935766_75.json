{"test_class": {"identifier": "DispatcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Dispatcher dispatcher;", "modifier": "", "type": "Dispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}, {"original_string": "Plugin plugin = when(mock(Plugin.class).getName()).thenReturn(\"test\").getMock();", "modifier": "", "type": "Plugin", "declarator": "plugin = when(mock(Plugin.class).getName()).thenReturn(\"test\").getMock()", "var_name": "plugin"}, {"original_string": "CraftServer craftserver = mock(CraftServer.class);", "modifier": "", "type": "CraftServer", "declarator": "craftserver = mock(CraftServer.class)", "var_name": "craftserver"}, {"original_string": "DedicatedServer server = mock(DedicatedServer.class);", "modifier": "", "type": "DedicatedServer", "declarator": "server = mock(DedicatedServer.class)", "var_name": "server"}, {"original_string": "CraftCommandMap map = when(mock(CraftCommandMap.class).register(any(String.class), any())).thenReturn(true).getMock();", "modifier": "", "type": "CraftCommandMap", "declarator": "map = when(mock(CraftCommandMap.class).register(any(String.class), any())).thenReturn(true).getMock()", "var_name": "map"}, {"original_string": "CraftScheduler scheduler = mock(CraftScheduler.class);", "modifier": "", "type": "CraftScheduler", "declarator": "scheduler = mock(CraftScheduler.class)", "var_name": "scheduler"}, {"original_string": "PluginManager manager = mock(PluginManager.class);", "modifier": "", "type": "PluginManager", "declarator": "manager = mock(PluginManager.class)", "var_name": "manager"}, {"original_string": "com.mojang.brigadier.CommandDispatcher<CommandListenerWrapper> internal = new com.mojang.brigadier.CommandDispatcher();", "modifier": "", "type": "com.mojang.brigadier.CommandDispatcher<CommandListenerWrapper>", "declarator": "internal = new com.mojang.brigadier.CommandDispatcher()", "var_name": "internal"}, {"original_string": "CommandDispatcher wrapper = when(mock(CommandDispatcher.class).a()).thenReturn(internal).getMock();", "modifier": "", "type": "CommandDispatcher", "declarator": "wrapper = when(mock(CommandDispatcher.class).a()).thenReturn(internal).getMock()", "var_name": "wrapper"}], "file": "commons/src/test/java/com/karuslabs/commons/command/dispatcher/DispatcherTest.java"}, "test_case": {"identifier": "of", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void of() {\n        reset(manager);\n        \n        var dispatcher = Dispatcher.of(plugin);\n        \n        assertSame(dispatcher, ((SpigotMap) dispatcher.getRoot().map()).dispatcher);\n    }", "signature": "void of()", "full_signature": "@Test void of()", "class_method_signature": "DispatcherTest.of()", "testcase": true, "constructor": false, "invocations": ["reset", "of", "assertSame", "map", "getRoot"]}, "focal_class": {"identifier": "Dispatcher", "superclass": "extends CommandDispatcher<CommandSender>", "interfaces": "implements Listener", "fields": [{"original_string": "private MinecraftServer server;", "modifier": "private", "type": "MinecraftServer", "declarator": "server", "var_name": "server"}, {"original_string": "private Root root;", "modifier": "private", "type": "Root", "declarator": "root", "var_name": "root"}, {"original_string": "CommandDispatcher<CommandListenerWrapper> dispatcher;", "modifier": "", "type": "CommandDispatcher<CommandListenerWrapper>", "declarator": "dispatcher", "var_name": "dispatcher"}, {"original_string": "TreeWalker<CommandSender, CommandListenerWrapper> walker;", "modifier": "", "type": "TreeWalker<CommandSender, CommandListenerWrapper>", "declarator": "walker", "var_name": "walker"}], "methods": [{"identifier": "of", "parameters": "(Plugin plugin)", "modifiers": "public static", "return": "Dispatcher", "signature": "Dispatcher of(Plugin plugin)", "full_signature": "public static Dispatcher of(Plugin plugin)", "class_method_signature": "Dispatcher.of(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "Dispatcher", "parameters": "(Server server, Root root)", "modifiers": "protected", "return": "", "signature": " Dispatcher(Server server, Root root)", "full_signature": "protected  Dispatcher(Server server, Root root)", "class_method_signature": "Dispatcher.Dispatcher(Server server, Root root)", "testcase": false, "constructor": true}, {"identifier": "register", "parameters": "(Map<String, CommandNode<CommandSender>> commands)", "modifiers": "public", "return": "void", "signature": "void register(Map<String, CommandNode<CommandSender>> commands)", "full_signature": "public void register(Map<String, CommandNode<CommandSender>> commands)", "class_method_signature": "Dispatcher.register(Map<String, CommandNode<CommandSender>> commands)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(Literal.Builder<CommandSender> command)", "modifiers": "public", "return": "Literal<CommandSender>", "signature": "Literal<CommandSender> register(Literal.Builder<CommandSender> command)", "full_signature": "public Literal<CommandSender> register(Literal.Builder<CommandSender> command)", "class_method_signature": "Dispatcher.register(Literal.Builder<CommandSender> command)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void update()", "full_signature": "public void update()", "class_method_signature": "Dispatcher.update()", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(ServerLoadEvent event)", "modifiers": "@EventHandler protected", "return": "void", "signature": "void update(ServerLoadEvent event)", "full_signature": "@EventHandler protected void update(ServerLoadEvent event)", "class_method_signature": "Dispatcher.update(ServerLoadEvent event)", "testcase": false, "constructor": false}, {"identifier": "getRoot", "parameters": "()", "modifiers": "@Override public", "return": "Root", "signature": "Root getRoot()", "full_signature": "@Override public Root getRoot()", "class_method_signature": "Dispatcher.getRoot()", "testcase": false, "constructor": false}], "file": "commons/src/main/java/com/karuslabs/commons/command/dispatcher/Dispatcher.java"}, "focal_method": {"identifier": "of", "parameters": "(Plugin plugin)", "modifiers": "public static", "return": "Dispatcher", "body": "public static Dispatcher of(Plugin plugin) {\n        var prefix = plugin.getName().toLowerCase();\n        var server = ((CraftServer) plugin.getServer());\n        \n        var map = new SpigotMap(prefix, plugin, (CraftCommandMap) server.getCommandMap());\n        var root = new Root(prefix, map);\n        var dispatcher = new Dispatcher(server, root);\n        map.dispatcher = dispatcher;\n        \n        server.getPluginManager().registerEvents(dispatcher, plugin);\n        \n        return dispatcher;\n    }", "signature": "Dispatcher of(Plugin plugin)", "full_signature": "public static Dispatcher of(Plugin plugin)", "class_method_signature": "Dispatcher.of(Plugin plugin)", "testcase": false, "constructor": false, "invocations": ["toLowerCase", "getName", "getServer", "getCommandMap", "registerEvents", "getPluginManager"]}, "repository": {"repo_id": 68935766, "url": "https://github.com/Pante/Chimera", "stars": 13, "created": "9/22/2016 3:36:39 PM +00:00", "updates": "2020-01-27T21:22:29+00:00", "fork": "False", "license": "licensed"}}