{"test_class": {"identifier": "LoadBalancerTest", "superclass": "extends FloodlightTestCase", "interfaces": "", "fields": [{"original_string": "protected LoadBalancer lb;", "modifier": "protected", "type": "LoadBalancer", "declarator": "lb", "var_name": "lb"}, {"original_string": "protected FloodlightContext cntx;", "modifier": "protected", "type": "FloodlightContext", "declarator": "cntx", "var_name": "cntx"}, {"original_string": "protected FloodlightModuleContext fmc;", "modifier": "protected", "type": "FloodlightModuleContext", "declarator": "fmc", "var_name": "fmc"}, {"original_string": "protected MockDeviceManager deviceManager;", "modifier": "protected", "type": "MockDeviceManager", "declarator": "deviceManager", "var_name": "deviceManager"}, {"original_string": "protected MockThreadPoolService tps;", "modifier": "protected", "type": "MockThreadPoolService", "declarator": "tps", "var_name": "tps"}, {"original_string": "protected DefaultEntityClassifier entityClassifier;", "modifier": "protected", "type": "DefaultEntityClassifier", "declarator": "entityClassifier", "var_name": "entityClassifier"}, {"original_string": "protected IRoutingService routingEngine;", "modifier": "protected", "type": "IRoutingService", "declarator": "routingEngine", "var_name": "routingEngine"}, {"original_string": "protected ITopologyService topology;", "modifier": "protected", "type": "ITopologyService", "declarator": "topology", "var_name": "topology"}, {"original_string": "protected StaticFlowEntryPusher sfp;", "modifier": "protected", "type": "StaticFlowEntryPusher", "declarator": "sfp", "var_name": "sfp"}, {"original_string": "protected MemoryStorageSource storage;", "modifier": "protected", "type": "MemoryStorageSource", "declarator": "storage", "var_name": "storage"}, {"original_string": "protected RestApiServer restApi;", "modifier": "protected", "type": "RestApiServer", "declarator": "restApi", "var_name": "restApi"}, {"original_string": "protected VipsResource vipsResource;", "modifier": "protected", "type": "VipsResource", "declarator": "vipsResource", "var_name": "vipsResource"}, {"original_string": "protected PoolsResource poolsResource;", "modifier": "protected", "type": "PoolsResource", "declarator": "poolsResource", "var_name": "poolsResource"}, {"original_string": "protected MembersResource membersResource;", "modifier": "protected", "type": "MembersResource", "declarator": "membersResource", "var_name": "membersResource"}, {"original_string": "private MockSyncService mockSyncService;", "modifier": "private", "type": "MockSyncService", "declarator": "mockSyncService", "var_name": "mockSyncService"}, {"original_string": "protected IDebugCounterService debugCounterService;", "modifier": "protected", "type": "IDebugCounterService", "declarator": "debugCounterService", "var_name": "debugCounterService"}, {"original_string": "protected IDebugEventService debugEventService;", "modifier": "protected", "type": "IDebugEventService", "declarator": "debugEventService", "var_name": "debugEventService"}, {"original_string": "protected LBVip vip1, vip2;", "modifier": "protected", "type": "LBVip", "declarator": "vip1", "var_name": "vip1"}, {"original_string": "protected LBPool pool1, pool2, pool3;", "modifier": "protected", "type": "LBPool", "declarator": "pool1", "var_name": "pool1"}, {"original_string": "protected LBMember member1, member2, member3, member4;", "modifier": "protected", "type": "LBMember", "declarator": "member1", "var_name": "member1"}, {"original_string": "private OFFactory factory;", "modifier": "private", "type": "OFFactory", "declarator": "factory", "var_name": "factory"}], "file": "src/agents/apps/floodlight/floodlight-1.0/src/test/java/net/floodlightcontroller/loadbalancer/LoadBalancerTest.java"}, "test_case": {"identifier": "testRemoveVip", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testRemoveVip() {\n\n\t\ttestCreateVip();\n\n\t\t// verify correct initial condition\n\t\tassertFalse(vip1==null);\n\t\tassertFalse(vip2==null);\n\n\t\tlb.removeVip(vip1.id);\n\t\tlb.removeVip(vip2.id);\n\n\t\t// verify correct removal\n\t\tassertFalse(lb.vips.containsKey(vip1.id));\n\t\tassertFalse(lb.vips.containsKey(vip2.id));\n\n\t}", "signature": "void testRemoveVip()", "full_signature": "@Test public void testRemoveVip()", "class_method_signature": "LoadBalancerTest.testRemoveVip()", "testcase": true, "constructor": false, "invocations": ["testCreateVip", "assertFalse", "assertFalse", "removeVip", "removeVip", "assertFalse", "containsKey", "assertFalse", "containsKey"]}, "focal_class": {"identifier": "LoadBalancer", "superclass": "", "interfaces": "implements IFloodlightModule,\n    ILoadBalancerService, IOFMessageListener", "fields": [{"original_string": "protected static Logger log = LoggerFactory.getLogger(LoadBalancer.class);", "modifier": "protected static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(LoadBalancer.class)", "var_name": "log"}, {"original_string": "protected IFloodlightProviderService floodlightProviderService;", "modifier": "protected", "type": "IFloodlightProviderService", "declarator": "floodlightProviderService", "var_name": "floodlightProviderService"}, {"original_string": "protected IRestApiService restApiService;", "modifier": "protected", "type": "IRestApiService", "declarator": "restApiService", "var_name": "restApiService"}, {"original_string": "protected IDebugCounterService debugCounterService;", "modifier": "protected", "type": "IDebugCounterService", "declarator": "debugCounterService", "var_name": "debugCounterService"}, {"original_string": "private IDebugCounter counterPacketOut;", "modifier": "private", "type": "IDebugCounter", "declarator": "counterPacketOut", "var_name": "counterPacketOut"}, {"original_string": "protected IDeviceService deviceManagerService;", "modifier": "protected", "type": "IDeviceService", "declarator": "deviceManagerService", "var_name": "deviceManagerService"}, {"original_string": "protected IRoutingService routingEngineService;", "modifier": "protected", "type": "IRoutingService", "declarator": "routingEngineService", "var_name": "routingEngineService"}, {"original_string": "protected ITopologyService topologyService;", "modifier": "protected", "type": "ITopologyService", "declarator": "topologyService", "var_name": "topologyService"}, {"original_string": "protected IStaticFlowEntryPusherService sfpService;", "modifier": "protected", "type": "IStaticFlowEntryPusherService", "declarator": "sfpService", "var_name": "sfpService"}, {"original_string": "protected IOFSwitchService switchService;", "modifier": "protected", "type": "IOFSwitchService", "declarator": "switchService", "var_name": "switchService"}, {"original_string": "protected HashMap<String, LBVip> vips;", "modifier": "protected", "type": "HashMap<String, LBVip>", "declarator": "vips", "var_name": "vips"}, {"original_string": "protected HashMap<String, LBPool> pools;", "modifier": "protected", "type": "HashMap<String, LBPool>", "declarator": "pools", "var_name": "pools"}, {"original_string": "protected HashMap<String, LBMember> members;", "modifier": "protected", "type": "HashMap<String, LBMember>", "declarator": "members", "var_name": "members"}, {"original_string": "protected HashMap<Integer, String> vipIpToId;", "modifier": "protected", "type": "HashMap<Integer, String>", "declarator": "vipIpToId", "var_name": "vipIpToId"}, {"original_string": "protected HashMap<Integer, MacAddress> vipIpToMac;", "modifier": "protected", "type": "HashMap<Integer, MacAddress>", "declarator": "vipIpToMac", "var_name": "vipIpToMac"}, {"original_string": "protected HashMap<Integer, String> memberIpToId;", "modifier": "protected", "type": "HashMap<Integer, String>", "declarator": "memberIpToId", "var_name": "memberIpToId"}, {"original_string": "protected HashMap<IPClient, LBMember> clientToMember;", "modifier": "protected", "type": "HashMap<IPClient, LBMember>", "declarator": "clientToMember", "var_name": "clientToMember"}, {"original_string": "protected static int OFMESSAGE_DAMPER_CAPACITY = 10000;", "modifier": "protected static", "type": "int", "declarator": "OFMESSAGE_DAMPER_CAPACITY = 10000", "var_name": "OFMESSAGE_DAMPER_CAPACITY"}, {"original_string": "protected static int OFMESSAGE_DAMPER_TIMEOUT = 250;", "modifier": "protected static", "type": "int", "declarator": "OFMESSAGE_DAMPER_TIMEOUT = 250", "var_name": "OFMESSAGE_DAMPER_TIMEOUT"}, {"original_string": "protected static String LB_ETHER_TYPE = \"0x800\";", "modifier": "protected static", "type": "String", "declarator": "LB_ETHER_TYPE = \"0x800\"", "var_name": "LB_ETHER_TYPE"}, {"original_string": "protected static int LB_PRIORITY = 32768;", "modifier": "protected static", "type": "int", "declarator": "LB_PRIORITY = 32768", "var_name": "LB_PRIORITY"}, {"original_string": "public Comparator<SwitchPort> clusterIdComparator =\n            new Comparator<SwitchPort>() {\n                @Override\n                public int compare(SwitchPort d1, SwitchPort d2) {\n                    DatapathId d1ClusterId = topologyService.getL2DomainId(d1.getSwitchDPID());\n                    DatapathId d2ClusterId = topologyService.getL2DomainId(d2.getSwitchDPID());\n                    return d1ClusterId.compareTo(d2ClusterId);\n                }\n            };", "modifier": "public", "type": "Comparator<SwitchPort>", "declarator": "clusterIdComparator =\n            new Comparator<SwitchPort>() {\n                @Override\n                public int compare(SwitchPort d1, SwitchPort d2) {\n                    DatapathId d1ClusterId = topologyService.getL2DomainId(d1.getSwitchDPID());\n                    DatapathId d2ClusterId = topologyService.getL2DomainId(d2.getSwitchDPID());\n                    return d1ClusterId.compareTo(d2ClusterId);\n                }\n            }", "var_name": "clusterIdComparator"}], "methods": [{"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "LoadBalancer.getName()", "testcase": false, "constructor": false}, {"identifier": "isCallbackOrderingPrereq", "parameters": "(OFType type, String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCallbackOrderingPrereq(OFType type, String name)", "full_signature": "@Override public boolean isCallbackOrderingPrereq(OFType type, String name)", "class_method_signature": "LoadBalancer.isCallbackOrderingPrereq(OFType type, String name)", "testcase": false, "constructor": false}, {"identifier": "isCallbackOrderingPostreq", "parameters": "(OFType type, String name)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCallbackOrderingPostreq(OFType type, String name)", "full_signature": "@Override public boolean isCallbackOrderingPostreq(OFType type, String name)", "class_method_signature": "LoadBalancer.isCallbackOrderingPostreq(OFType type, String name)", "testcase": false, "constructor": false}, {"identifier": "receive", "parameters": "(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "modifiers": "@Override public", "return": "net.floodlightcontroller.core.IListener.Command", "signature": "net.floodlightcontroller.core.IListener.Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "full_signature": "@Override public net.floodlightcontroller.core.IListener.Command receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "class_method_signature": "LoadBalancer.receive(IOFSwitch sw, OFMessage msg, FloodlightContext cntx)", "testcase": false, "constructor": false}, {"identifier": "processPacketIn", "parameters": "(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx)", "modifiers": "private", "return": "net.floodlightcontroller.core.IListener.Command", "signature": "net.floodlightcontroller.core.IListener.Command processPacketIn(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx)", "full_signature": "private net.floodlightcontroller.core.IListener.Command processPacketIn(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx)", "class_method_signature": "LoadBalancer.processPacketIn(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx)", "testcase": false, "constructor": false}, {"identifier": "vipProxyArpReply", "parameters": "(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx, String vipId)", "modifiers": "protected", "return": "void", "signature": "void vipProxyArpReply(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx, String vipId)", "full_signature": "protected void vipProxyArpReply(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx, String vipId)", "class_method_signature": "LoadBalancer.vipProxyArpReply(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx, String vipId)", "testcase": false, "constructor": false}, {"identifier": "pushPacket", "parameters": "(IPacket packet, \n                           IOFSwitch sw,\n                           OFBufferId bufferId,\n                           OFPort inPort,\n                           OFPort outPort, \n                           FloodlightContext cntx,\n                           boolean flush)", "modifiers": "public", "return": "void", "signature": "void pushPacket(IPacket packet, \n                           IOFSwitch sw,\n                           OFBufferId bufferId,\n                           OFPort inPort,\n                           OFPort outPort, \n                           FloodlightContext cntx,\n                           boolean flush)", "full_signature": "public void pushPacket(IPacket packet, \n                           IOFSwitch sw,\n                           OFBufferId bufferId,\n                           OFPort inPort,\n                           OFPort outPort, \n                           FloodlightContext cntx,\n                           boolean flush)", "class_method_signature": "LoadBalancer.pushPacket(IPacket packet, \n                           IOFSwitch sw,\n                           OFBufferId bufferId,\n                           OFPort inPort,\n                           OFPort outPort, \n                           FloodlightContext cntx,\n                           boolean flush)", "testcase": false, "constructor": false}, {"identifier": "pushBidirectionalVipRoutes", "parameters": "(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx, IPClient client, LBMember member)", "modifiers": "protected", "return": "void", "signature": "void pushBidirectionalVipRoutes(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx, IPClient client, LBMember member)", "full_signature": "protected void pushBidirectionalVipRoutes(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx, IPClient client, LBMember member)", "class_method_signature": "LoadBalancer.pushBidirectionalVipRoutes(IOFSwitch sw, OFPacketIn pi, FloodlightContext cntx, IPClient client, LBMember member)", "testcase": false, "constructor": false}, {"identifier": "pushStaticVipRoute", "parameters": "(boolean inBound, Route route, IPClient client, LBMember member, IOFSwitch pinSwitch)", "modifiers": "public", "return": "void", "signature": "void pushStaticVipRoute(boolean inBound, Route route, IPClient client, LBMember member, IOFSwitch pinSwitch)", "full_signature": "public void pushStaticVipRoute(boolean inBound, Route route, IPClient client, LBMember member, IOFSwitch pinSwitch)", "class_method_signature": "LoadBalancer.pushStaticVipRoute(boolean inBound, Route route, IPClient client, LBMember member, IOFSwitch pinSwitch)", "testcase": false, "constructor": false}, {"identifier": "listVips", "parameters": "()", "modifiers": "@Override public", "return": "Collection<LBVip>", "signature": "Collection<LBVip> listVips()", "full_signature": "@Override public Collection<LBVip> listVips()", "class_method_signature": "LoadBalancer.listVips()", "testcase": false, "constructor": false}, {"identifier": "listVip", "parameters": "(String vipId)", "modifiers": "@Override public", "return": "Collection<LBVip>", "signature": "Collection<LBVip> listVip(String vipId)", "full_signature": "@Override public Collection<LBVip> listVip(String vipId)", "class_method_signature": "LoadBalancer.listVip(String vipId)", "testcase": false, "constructor": false}, {"identifier": "createVip", "parameters": "(LBVip vip)", "modifiers": "@Override public", "return": "LBVip", "signature": "LBVip createVip(LBVip vip)", "full_signature": "@Override public LBVip createVip(LBVip vip)", "class_method_signature": "LoadBalancer.createVip(LBVip vip)", "testcase": false, "constructor": false}, {"identifier": "updateVip", "parameters": "(LBVip vip)", "modifiers": "@Override public", "return": "LBVip", "signature": "LBVip updateVip(LBVip vip)", "full_signature": "@Override public LBVip updateVip(LBVip vip)", "class_method_signature": "LoadBalancer.updateVip(LBVip vip)", "testcase": false, "constructor": false}, {"identifier": "removeVip", "parameters": "(String vipId)", "modifiers": "@Override public", "return": "int", "signature": "int removeVip(String vipId)", "full_signature": "@Override public int removeVip(String vipId)", "class_method_signature": "LoadBalancer.removeVip(String vipId)", "testcase": false, "constructor": false}, {"identifier": "listPools", "parameters": "()", "modifiers": "@Override public", "return": "Collection<LBPool>", "signature": "Collection<LBPool> listPools()", "full_signature": "@Override public Collection<LBPool> listPools()", "class_method_signature": "LoadBalancer.listPools()", "testcase": false, "constructor": false}, {"identifier": "listPool", "parameters": "(String poolId)", "modifiers": "@Override public", "return": "Collection<LBPool>", "signature": "Collection<LBPool> listPool(String poolId)", "full_signature": "@Override public Collection<LBPool> listPool(String poolId)", "class_method_signature": "LoadBalancer.listPool(String poolId)", "testcase": false, "constructor": false}, {"identifier": "createPool", "parameters": "(LBPool pool)", "modifiers": "@Override public", "return": "LBPool", "signature": "LBPool createPool(LBPool pool)", "full_signature": "@Override public LBPool createPool(LBPool pool)", "class_method_signature": "LoadBalancer.createPool(LBPool pool)", "testcase": false, "constructor": false}, {"identifier": "updatePool", "parameters": "(LBPool pool)", "modifiers": "@Override public", "return": "LBPool", "signature": "LBPool updatePool(LBPool pool)", "full_signature": "@Override public LBPool updatePool(LBPool pool)", "class_method_signature": "LoadBalancer.updatePool(LBPool pool)", "testcase": false, "constructor": false}, {"identifier": "removePool", "parameters": "(String poolId)", "modifiers": "@Override public", "return": "int", "signature": "int removePool(String poolId)", "full_signature": "@Override public int removePool(String poolId)", "class_method_signature": "LoadBalancer.removePool(String poolId)", "testcase": false, "constructor": false}, {"identifier": "listMembers", "parameters": "()", "modifiers": "@Override public", "return": "Collection<LBMember>", "signature": "Collection<LBMember> listMembers()", "full_signature": "@Override public Collection<LBMember> listMembers()", "class_method_signature": "LoadBalancer.listMembers()", "testcase": false, "constructor": false}, {"identifier": "listMember", "parameters": "(String memberId)", "modifiers": "@Override public", "return": "Collection<LBMember>", "signature": "Collection<LBMember> listMember(String memberId)", "full_signature": "@Override public Collection<LBMember> listMember(String memberId)", "class_method_signature": "LoadBalancer.listMember(String memberId)", "testcase": false, "constructor": false}, {"identifier": "listMembersByPool", "parameters": "(String poolId)", "modifiers": "@Override public", "return": "Collection<LBMember>", "signature": "Collection<LBMember> listMembersByPool(String poolId)", "full_signature": "@Override public Collection<LBMember> listMembersByPool(String poolId)", "class_method_signature": "LoadBalancer.listMembersByPool(String poolId)", "testcase": false, "constructor": false}, {"identifier": "createMember", "parameters": "(LBMember member)", "modifiers": "@Override public", "return": "LBMember", "signature": "LBMember createMember(LBMember member)", "full_signature": "@Override public LBMember createMember(LBMember member)", "class_method_signature": "LoadBalancer.createMember(LBMember member)", "testcase": false, "constructor": false}, {"identifier": "updateMember", "parameters": "(LBMember member)", "modifiers": "@Override public", "return": "LBMember", "signature": "LBMember updateMember(LBMember member)", "full_signature": "@Override public LBMember updateMember(LBMember member)", "class_method_signature": "LoadBalancer.updateMember(LBMember member)", "testcase": false, "constructor": false}, {"identifier": "removeMember", "parameters": "(String memberId)", "modifiers": "@Override public", "return": "int", "signature": "int removeMember(String memberId)", "full_signature": "@Override public int removeMember(String memberId)", "class_method_signature": "LoadBalancer.removeMember(String memberId)", "testcase": false, "constructor": false}, {"identifier": "listMonitors", "parameters": "()", "modifiers": "@Override public", "return": "Collection<LBMonitor>", "signature": "Collection<LBMonitor> listMonitors()", "full_signature": "@Override public Collection<LBMonitor> listMonitors()", "class_method_signature": "LoadBalancer.listMonitors()", "testcase": false, "constructor": false}, {"identifier": "listMonitor", "parameters": "(String monitorId)", "modifiers": "@Override public", "return": "Collection<LBMonitor>", "signature": "Collection<LBMonitor> listMonitor(String monitorId)", "full_signature": "@Override public Collection<LBMonitor> listMonitor(String monitorId)", "class_method_signature": "LoadBalancer.listMonitor(String monitorId)", "testcase": false, "constructor": false}, {"identifier": "createMonitor", "parameters": "(LBMonitor monitor)", "modifiers": "@Override public", "return": "LBMonitor", "signature": "LBMonitor createMonitor(LBMonitor monitor)", "full_signature": "@Override public LBMonitor createMonitor(LBMonitor monitor)", "class_method_signature": "LoadBalancer.createMonitor(LBMonitor monitor)", "testcase": false, "constructor": false}, {"identifier": "updateMonitor", "parameters": "(LBMonitor monitor)", "modifiers": "@Override public", "return": "LBMonitor", "signature": "LBMonitor updateMonitor(LBMonitor monitor)", "full_signature": "@Override public LBMonitor updateMonitor(LBMonitor monitor)", "class_method_signature": "LoadBalancer.updateMonitor(LBMonitor monitor)", "testcase": false, "constructor": false}, {"identifier": "removeMonitor", "parameters": "(String monitorId)", "modifiers": "@Override public", "return": "int", "signature": "int removeMonitor(String monitorId)", "full_signature": "@Override public int removeMonitor(String monitorId)", "class_method_signature": "LoadBalancer.removeMonitor(String monitorId)", "testcase": false, "constructor": false}, {"identifier": "getModuleServices", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends IFloodlightService>>", "signature": "Collection<Class<? extends IFloodlightService>> getModuleServices()", "full_signature": "@Override public Collection<Class<? extends IFloodlightService>> getModuleServices()", "class_method_signature": "LoadBalancer.getModuleServices()", "testcase": false, "constructor": false}, {"identifier": "getServiceImpls", "parameters": "()", "modifiers": "@Override public", "return": "Map<Class<? extends IFloodlightService>, IFloodlightService>", "signature": "Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls()", "full_signature": "@Override public Map<Class<? extends IFloodlightService>, IFloodlightService> getServiceImpls()", "class_method_signature": "LoadBalancer.getServiceImpls()", "testcase": false, "constructor": false}, {"identifier": "getModuleDependencies", "parameters": "()", "modifiers": "@Override public", "return": "Collection<Class<? extends IFloodlightService>>", "signature": "Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "full_signature": "@Override public Collection<Class<? extends IFloodlightService>> getModuleDependencies()", "class_method_signature": "LoadBalancer.getModuleDependencies()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void init(FloodlightModuleContext context)", "full_signature": "@Override public void init(FloodlightModuleContext context)", "class_method_signature": "LoadBalancer.init(FloodlightModuleContext context)", "testcase": false, "constructor": false}, {"identifier": "startUp", "parameters": "(FloodlightModuleContext context)", "modifiers": "@Override public", "return": "void", "signature": "void startUp(FloodlightModuleContext context)", "full_signature": "@Override public void startUp(FloodlightModuleContext context)", "class_method_signature": "LoadBalancer.startUp(FloodlightModuleContext context)", "testcase": false, "constructor": false}], "file": "src/agents/apps/floodlight/floodlight-1.0/src/main/java/net/floodlightcontroller/loadbalancer/LoadBalancer.java"}, "focal_method": {"identifier": "removeVip", "parameters": "(String vipId)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int removeVip(String vipId) {\n        if(vips.containsKey(vipId)){\n            vips.remove(vipId);\n            return 0;\n        } else {\n            return -1;\n        }\n    }", "signature": "int removeVip(String vipId)", "full_signature": "@Override public int removeVip(String vipId)", "class_method_signature": "LoadBalancer.removeVip(String vipId)", "testcase": false, "constructor": false, "invocations": ["containsKey", "remove"]}, "repository": {"repo_id": 181421086, "url": "https://github.com/seungsoo-lee/DELTA", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 99244, "license": "licensed"}}