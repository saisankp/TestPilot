{"test_class": {"identifier": "OrderedMapTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static TestFactory FACTORY;", "modifier": "private static", "type": "TestFactory", "declarator": "FACTORY", "var_name": "FACTORY"}, {"original_string": "private static final String MAP_NAME = \"map\";", "modifier": "private static final", "type": "String", "declarator": "MAP_NAME = \"map\"", "var_name": "MAP_NAME"}, {"original_string": "private static final int N = 10;", "modifier": "private static final", "type": "int", "declarator": "N = 10", "var_name": "N"}], "file": "zava/src/test/java/com/github/geophile/erdo/OrderedMapTest.java"}, "test_case": {"identifier": "testEnsurePresent", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEnsurePresent()\n        throws IOException,\n               InterruptedException,\n               DeadlockException,\n               TransactionRolledBackException\n    {\n        Database db = new DisklessTestDatabase(FACTORY);\n        OrderedMap map = db.createMap(MAP_NAME, RecordFactory.simpleRecordFactory(TestKey.class, TestRecord.class));\n        for (int i = 0; i < N; i++) {\n            map.ensurePresent(TestRecord.createRecord(i, \"first\"));\n        }\n        for (int i = 0; i < N; i++) {\n            map.ensurePresent(TestRecord.createRecord(i, \"second\"));\n        }\n        Cursor cursor = map.first();\n        TestRecord record;\n        int expected = 0;\n        while ((record = (TestRecord) cursor.next()) != null) {\n            assertEquals(expected++, ((TestKey) record.key()).key());\n            assertEquals(\"second\", record.stringValue());\n        }\n        assertEquals(N, expected);\n        db.close();\n    }", "signature": "void testEnsurePresent()", "full_signature": "@Test public void testEnsurePresent()", "class_method_signature": "OrderedMapTest.testEnsurePresent()", "testcase": true, "constructor": false, "invocations": ["createMap", "simpleRecordFactory", "ensurePresent", "createRecord", "ensurePresent", "createRecord", "first", "next", "assertEquals", "key", "key", "assertEquals", "stringValue", "assertEquals", "close"]}, "focal_class": {"identifier": "OrderedMap", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ensurePresent", "parameters": "(AbstractRecord record)", "modifiers": "public abstract", "return": "void", "signature": "void ensurePresent(AbstractRecord record)", "full_signature": "public abstract void ensurePresent(AbstractRecord record)", "class_method_signature": "OrderedMap.ensurePresent(AbstractRecord record)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(AbstractRecord record)", "modifiers": "public abstract", "return": "AbstractRecord", "signature": "AbstractRecord put(AbstractRecord record)", "full_signature": "public abstract AbstractRecord put(AbstractRecord record)", "class_method_signature": "OrderedMap.put(AbstractRecord record)", "testcase": false, "constructor": false}, {"identifier": "ensureAbsent", "parameters": "(AbstractKey key)", "modifiers": "public abstract", "return": "void", "signature": "void ensureAbsent(AbstractKey key)", "full_signature": "public abstract void ensureAbsent(AbstractKey key)", "class_method_signature": "OrderedMap.ensureAbsent(AbstractKey key)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(AbstractKey key)", "modifiers": "public abstract", "return": "AbstractRecord", "signature": "AbstractRecord delete(AbstractKey key)", "full_signature": "public abstract AbstractRecord delete(AbstractKey key)", "class_method_signature": "OrderedMap.delete(AbstractKey key)", "testcase": false, "constructor": false}, {"identifier": "lock", "parameters": "(AbstractKey key)", "modifiers": "public abstract", "return": "void", "signature": "void lock(AbstractKey key)", "full_signature": "public abstract void lock(AbstractKey key)", "class_method_signature": "OrderedMap.lock(AbstractKey key)", "testcase": false, "constructor": false}, {"identifier": "find", "parameters": "(AbstractKey key)", "modifiers": "public abstract", "return": "AbstractRecord", "signature": "AbstractRecord find(AbstractKey key)", "full_signature": "public abstract AbstractRecord find(AbstractKey key)", "class_method_signature": "OrderedMap.find(AbstractKey key)", "testcase": false, "constructor": false}, {"identifier": "cursor", "parameters": "(AbstractKey key)", "modifiers": "public abstract", "return": "Cursor", "signature": "Cursor cursor(AbstractKey key)", "full_signature": "public abstract Cursor cursor(AbstractKey key)", "class_method_signature": "OrderedMap.cursor(AbstractKey key)", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "()", "modifiers": "public abstract", "return": "Cursor", "signature": "Cursor first()", "full_signature": "public abstract Cursor first()", "class_method_signature": "OrderedMap.first()", "testcase": false, "constructor": false}, {"identifier": "last", "parameters": "()", "modifiers": "public abstract", "return": "Cursor", "signature": "Cursor last()", "full_signature": "public abstract Cursor last()", "class_method_signature": "OrderedMap.last()", "testcase": false, "constructor": false}], "file": "zava/src/main/java/com/github/geophile/erdo/OrderedMap.java"}, "focal_method": {"identifier": "ensurePresent", "parameters": "(AbstractRecord record)", "modifiers": "public abstract", "return": "void", "body": "public abstract void ensurePresent(AbstractRecord record)\n        throws IOException,\n               InterruptedException,\n               DeadlockException,\n               TransactionRolledBackException;", "signature": "void ensurePresent(AbstractRecord record)", "full_signature": "public abstract void ensurePresent(AbstractRecord record)", "class_method_signature": "OrderedMap.ensurePresent(AbstractRecord record)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}