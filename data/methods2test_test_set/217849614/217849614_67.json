{"test_class": {"identifier": "CountUpdateBloomFilterFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LongAdder filterUpdateTimesCounter;", "modifier": "private", "type": "LongAdder", "declarator": "filterUpdateTimesCounter", "var_name": "filterUpdateTimesCounter"}, {"original_string": "private BloomFilterFactory<BloomFilter, BloomFilterConfig> innerFilterFactory;", "modifier": "private", "type": "BloomFilterFactory<BloomFilter, BloomFilterConfig>", "declarator": "innerFilterFactory", "var_name": "innerFilterFactory"}, {"original_string": "private CountUpdateBloomFilterFactory wrapper;", "modifier": "private", "type": "CountUpdateBloomFilterFactory", "declarator": "wrapper", "var_name": "wrapper"}], "file": "filter-service-core/src/test/java/cn/leancloud/filter/service/CountUpdateBloomFilterFactoryTest.java"}, "test_case": {"identifier": "testReadFromThrowsException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadFromThrowsException() throws Exception {\n        final InputStream in = new ByteArrayInputStream(new byte[0]);\n        final IOException expectedEx = new IOException(\"expected exception\");\n\n        doThrow(expectedEx).when(innerFilterFactory).readFrom(in);\n\n        assertThatThrownBy(() -> wrapper.readFrom(in)).isEqualTo(expectedEx);\n        verify(innerFilterFactory, times(1)).readFrom(in);\n    }", "signature": "void testReadFromThrowsException()", "full_signature": "@Test public void testReadFromThrowsException()", "class_method_signature": "CountUpdateBloomFilterFactoryTest.testReadFromThrowsException()", "testcase": true, "constructor": false, "invocations": ["readFrom", "when", "doThrow", "isEqualTo", "assertThatThrownBy", "readFrom", "readFrom", "verify", "times"]}, "focal_class": {"identifier": "CountUpdateBloomFilterFactory", "superclass": "", "interfaces": "implements BloomFilterFactory<CountUpdateBloomFilterWrapper, C>", "fields": [{"original_string": "private final BloomFilterFactory<?, C> factory;", "modifier": "private final", "type": "BloomFilterFactory<?, C>", "declarator": "factory", "var_name": "factory"}, {"original_string": "private final LongAdder filterUpdateTimesCounter;", "modifier": "private final", "type": "LongAdder", "declarator": "filterUpdateTimesCounter", "var_name": "filterUpdateTimesCounter"}], "methods": [{"identifier": "CountUpdateBloomFilterFactory", "parameters": "(BloomFilterFactory<?, C> factory, LongAdder filterUpdateTimesCounter)", "modifiers": "", "return": "", "signature": " CountUpdateBloomFilterFactory(BloomFilterFactory<?, C> factory, LongAdder filterUpdateTimesCounter)", "full_signature": "  CountUpdateBloomFilterFactory(BloomFilterFactory<?, C> factory, LongAdder filterUpdateTimesCounter)", "class_method_signature": "CountUpdateBloomFilterFactory.CountUpdateBloomFilterFactory(BloomFilterFactory<?, C> factory, LongAdder filterUpdateTimesCounter)", "testcase": false, "constructor": true}, {"identifier": "filterUpdateTimesCounter", "parameters": "()", "modifiers": "", "return": "LongAdder", "signature": "LongAdder filterUpdateTimesCounter()", "full_signature": " LongAdder filterUpdateTimesCounter()", "class_method_signature": "CountUpdateBloomFilterFactory.filterUpdateTimesCounter()", "testcase": false, "constructor": false}, {"identifier": "createFilter", "parameters": "(C config)", "modifiers": "@Override public", "return": "CountUpdateBloomFilterWrapper", "signature": "CountUpdateBloomFilterWrapper createFilter(C config)", "full_signature": "@Override public CountUpdateBloomFilterWrapper createFilter(C config)", "class_method_signature": "CountUpdateBloomFilterFactory.createFilter(C config)", "testcase": false, "constructor": false}, {"identifier": "readFrom", "parameters": "(InputStream stream)", "modifiers": "@Override public", "return": "CountUpdateBloomFilterWrapper", "signature": "CountUpdateBloomFilterWrapper readFrom(InputStream stream)", "full_signature": "@Override public CountUpdateBloomFilterWrapper readFrom(InputStream stream)", "class_method_signature": "CountUpdateBloomFilterFactory.readFrom(InputStream stream)", "testcase": false, "constructor": false}], "file": "filter-service-core/src/main/java/cn/leancloud/filter/service/CountUpdateBloomFilterFactory.java"}, "focal_method": {"identifier": "readFrom", "parameters": "(InputStream stream)", "modifiers": "@Override public", "return": "CountUpdateBloomFilterWrapper", "body": "@Override\n    public CountUpdateBloomFilterWrapper readFrom(InputStream stream) throws IOException {\n        return new CountUpdateBloomFilterWrapper(factory.readFrom(stream), filterUpdateTimesCounter);\n    }", "signature": "CountUpdateBloomFilterWrapper readFrom(InputStream stream)", "full_signature": "@Override public CountUpdateBloomFilterWrapper readFrom(InputStream stream)", "class_method_signature": "CountUpdateBloomFilterFactory.readFrom(InputStream stream)", "testcase": false, "constructor": false, "invocations": ["readFrom"]}, "repository": {"repo_id": 217849614, "url": "https://github.com/leancloud/filter-service", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 14, "size": 2797, "license": "licensed"}}