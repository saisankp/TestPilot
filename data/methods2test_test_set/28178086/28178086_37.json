{"test_class": {"identifier": "XmlInterventionVariableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FILE = \"c:\\\\localdata\\\\intervention.xml\";", "modifier": "private static final", "type": "String", "declarator": "FILE = \"c:\\\\localdata\\\\intervention.xml\"", "var_name": "FILE"}], "file": "jtss/src/test/java/ec/demetra/xml/regression/XmlInterventionVariableTest.java"}, "test_case": {"identifier": "testFile", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n    @Ignore\n    public void testFile() throws FileNotFoundException, JAXBException, IOException {\n\n        JAXBContext jaxb = JAXBContext.newInstance(XmlInterventionVariable.class);\n        InterventionVariable ivar = new InterventionVariable();\n        ivar.setDelta(.9);\n        Day d0 = new Day(1999, Month.April, 3);\n        Day d1 = new Day(2005, Month.June, 3);\n        ivar.add(d0, d0);\n        ivar.add(d1, d1.plus(90));\n        XmlInterventionVariable xvar = XmlInterventionVariable.getAdapter().marshal(ivar);\n\n        FileOutputStream ostream = new FileOutputStream(FILE);\n        try (OutputStreamWriter writer = new OutputStreamWriter(ostream, StandardCharsets.UTF_8)) {\n            Marshaller marshaller = jaxb.createMarshaller();\n            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n//            marshaller.marshal(xvar, writer);\n            marshaller.marshal(new JAXBElement(QName.valueOf(\"test\"), XmlInterventionVariable.class, xvar), writer);\n            writer.flush();\n        }\n\n        XmlInterventionVariable rslt = null;\n        FileInputStream istream = new FileInputStream(FILE);\n        try (InputStreamReader reader = new InputStreamReader(istream, StandardCharsets.UTF_8)) {\n            Source source = new StreamSource(reader);\n            Unmarshaller unmarshaller = jaxb.createUnmarshaller();\n//            rslt = (XmlInterventionVariable) unmarshaller.unmarshal(reader);\n            JAXBElement<XmlInterventionVariable> jrslt =   unmarshaller.unmarshal(source, XmlInterventionVariable.class);\n            rslt=jrslt.getValue();\n            InterventionVariable nvar = XmlInterventionVariable.getAdapter().unmarshal(rslt);\n        }\n    }", "signature": "void testFile()", "full_signature": "@Test @Ignore public void testFile()", "class_method_signature": "XmlInterventionVariableTest.testFile()", "testcase": true, "constructor": false, "invocations": ["newInstance", "setDelta", "add", "add", "plus", "marshal", "getAdapter", "createMarshaller", "setProperty", "marshal", "valueOf", "flush", "createUnmarshaller", "unmarshal", "getValue", "unmarshal", "getAdapter"]}, "focal_class": {"identifier": "XmlInterventionVariable", "superclass": "extends XmlRegressionVariable", "interfaces": "", "fields": [{"original_string": "@XmlElement(name = \"Sequence\")\n    protected List<XmlSpan> sequence;", "modifier": "@XmlElement(name = \"Sequence\")\n    protected", "type": "List<XmlSpan>", "declarator": "sequence", "var_name": "sequence"}, {"original_string": "@XmlElement(name = \"DeltaFilter\")\n    protected Double deltaFilter;", "modifier": "@XmlElement(name = \"DeltaFilter\")\n    protected", "type": "Double", "declarator": "deltaFilter", "var_name": "deltaFilter"}, {"original_string": "@XmlElement(name = \"DeltaSeasonalFilter\")\n    protected Double deltaSeasonalFilter;", "modifier": "@XmlElement(name = \"DeltaSeasonalFilter\")\n    protected", "type": "Double", "declarator": "deltaSeasonalFilter", "var_name": "deltaSeasonalFilter"}, {"original_string": "private static final Adapter ADAPTER = new Adapter();", "modifier": "private static final", "type": "Adapter", "declarator": "ADAPTER = new Adapter()", "var_name": "ADAPTER"}], "methods": [{"identifier": "getSequences", "parameters": "()", "modifiers": "public", "return": "List<XmlSpan>", "signature": "List<XmlSpan> getSequences()", "full_signature": "public List<XmlSpan> getSequences()", "class_method_signature": "XmlInterventionVariable.getSequences()", "testcase": false, "constructor": false}, {"identifier": "getDeltaFilter", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getDeltaFilter()", "full_signature": "public Double getDeltaFilter()", "class_method_signature": "XmlInterventionVariable.getDeltaFilter()", "testcase": false, "constructor": false}, {"identifier": "setDeltaFilter", "parameters": "(Double value)", "modifiers": "public", "return": "void", "signature": "void setDeltaFilter(Double value)", "full_signature": "public void setDeltaFilter(Double value)", "class_method_signature": "XmlInterventionVariable.setDeltaFilter(Double value)", "testcase": false, "constructor": false}, {"identifier": "getDeltaSeasonalFilter", "parameters": "()", "modifiers": "public", "return": "Double", "signature": "Double getDeltaSeasonalFilter()", "full_signature": "public Double getDeltaSeasonalFilter()", "class_method_signature": "XmlInterventionVariable.getDeltaSeasonalFilter()", "testcase": false, "constructor": false}, {"identifier": "setDeltaSeasonalFilter", "parameters": "(Double value)", "modifiers": "public", "return": "void", "signature": "void setDeltaSeasonalFilter(Double value)", "full_signature": "public void setDeltaSeasonalFilter(Double value)", "class_method_signature": "XmlInterventionVariable.setDeltaSeasonalFilter(Double value)", "testcase": false, "constructor": false}, {"identifier": "getAdapter", "parameters": "()", "modifiers": "public static final", "return": "Adapter", "signature": "Adapter getAdapter()", "full_signature": "public static final Adapter getAdapter()", "class_method_signature": "XmlInterventionVariable.getAdapter()", "testcase": false, "constructor": false}], "file": "jtss/src/main/java/ec/demetra/xml/regression/XmlInterventionVariable.java"}, "focal_method": {"identifier": "getAdapter", "parameters": "()", "modifiers": "public static final", "return": "Adapter", "body": "public static final Adapter getAdapter() {\n        return ADAPTER;\n    }", "signature": "Adapter getAdapter()", "full_signature": "public static final Adapter getAdapter()", "class_method_signature": "XmlInterventionVariable.getAdapter()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}