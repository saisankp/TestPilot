{"test_class": {"identifier": "GiniImpurityMeasureCalculatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Parameterized.Parameter\n    public boolean useIdx;", "modifier": "@Parameterized.Parameter\n    public", "type": "boolean", "declarator": "useIdx", "var_name": "useIdx"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/tree/impurity/gini/GiniImpurityMeasureCalculatorTest.java"}, "test_case": {"identifier": "testGetLabelCode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetLabelCode() {\n        Map<Double, Integer> encoder = new HashMap<>();\n        encoder.put(0.0, 0);\n        encoder.put(1.0, 1);\n        encoder.put(2.0, 2);\n\n        GiniImpurityMeasureCalculator calculator = new GiniImpurityMeasureCalculator(encoder, useIdx);\n\n        assertEquals(0, calculator.getLabelCode(0.0));\n        assertEquals(1, calculator.getLabelCode(1.0));\n        assertEquals(2, calculator.getLabelCode(2.0));\n    }", "signature": "void testGetLabelCode()", "full_signature": "@Test public void testGetLabelCode()", "class_method_signature": "GiniImpurityMeasureCalculatorTest.testGetLabelCode()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "assertEquals", "getLabelCode", "assertEquals", "getLabelCode", "assertEquals", "getLabelCode"]}, "focal_class": {"identifier": "GiniImpurityMeasureCalculator", "superclass": "extends ImpurityMeasureCalculator<GiniImpurityMeasure>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -522995134128519679L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -522995134128519679L", "var_name": "serialVersionUID"}, {"original_string": "private final Map<Double, Integer> lbEncoder;", "modifier": "private final", "type": "Map<Double, Integer>", "declarator": "lbEncoder", "var_name": "lbEncoder"}], "methods": [{"identifier": "GiniImpurityMeasureCalculator", "parameters": "(Map<Double, Integer> lbEncoder, boolean useIdx)", "modifiers": "public", "return": "", "signature": " GiniImpurityMeasureCalculator(Map<Double, Integer> lbEncoder, boolean useIdx)", "full_signature": "public  GiniImpurityMeasureCalculator(Map<Double, Integer> lbEncoder, boolean useIdx)", "class_method_signature": "GiniImpurityMeasureCalculator.GiniImpurityMeasureCalculator(Map<Double, Integer> lbEncoder, boolean useIdx)", "testcase": false, "constructor": true}, {"identifier": "calculate", "parameters": "(DecisionTreeData data, TreeFilter filter, int depth)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "StepFunction<GiniImpurityMeasure>[]", "signature": "StepFunction<GiniImpurityMeasure>[] calculate(DecisionTreeData data, TreeFilter filter, int depth)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public StepFunction<GiniImpurityMeasure>[] calculate(DecisionTreeData data, TreeFilter filter, int depth)", "class_method_signature": "GiniImpurityMeasureCalculator.calculate(DecisionTreeData data, TreeFilter filter, int depth)", "testcase": false, "constructor": false}, {"identifier": "getLabelCode", "parameters": "(double lb)", "modifiers": "", "return": "int", "signature": "int getLabelCode(double lb)", "full_signature": " int getLabelCode(double lb)", "class_method_signature": "GiniImpurityMeasureCalculator.getLabelCode(double lb)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/tree/impurity/gini/GiniImpurityMeasureCalculator.java"}, "focal_method": {"identifier": "getLabelCode", "parameters": "(double lb)", "modifiers": "", "return": "int", "body": "int getLabelCode(double lb) {\n        Integer code = lbEncoder.get(lb);\n\n        assert code != null : \"Can't find code for label \" + lb;\n\n        return code;\n    }", "signature": "int getLabelCode(double lb)", "full_signature": " int getLabelCode(double lb)", "class_method_signature": "GiniImpurityMeasureCalculator.getLabelCode(double lb)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}