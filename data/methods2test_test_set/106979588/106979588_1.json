{"test_class": {"identifier": "ScrollActionTest", "superclass": "", "interfaces": "", "fields": [], "file": "automator/src/test/java/com/stardust/automator/simple_action/ScrollActionTest.java"}, "test_case": {"identifier": "perform", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void perform() throws Exception {\n        ScrollAction action = new ScrollAction(AccessibilityNodeInfo.ACTION_SCROLL_BACKWARD, 0);\n        UiObject root = new TestUiObject(5);\n        action.perform(root);\n        System.out.println(TestUiObject.max);\n        assertEquals(1, TestUiObject.count);\n    }", "signature": "void perform()", "full_signature": "@Test public void perform()", "class_method_signature": "ScrollActionTest.perform()", "testcase": true, "constructor": false, "invocations": ["perform", "println", "assertEquals"]}, "focal_class": {"identifier": "ScrollAction", "superclass": "extends SimpleAction", "interfaces": "", "fields": [{"original_string": "private int mIndex, mAction;", "modifier": "private", "type": "int", "declarator": "mIndex", "var_name": "mIndex"}], "methods": [{"identifier": "ScrollAction", "parameters": "(int action, int i)", "modifiers": "public", "return": "", "signature": " ScrollAction(int action, int i)", "full_signature": "public  ScrollAction(int action, int i)", "class_method_signature": "ScrollAction.ScrollAction(int action, int i)", "testcase": false, "constructor": true}, {"identifier": "perform", "parameters": "(UiObject root)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean perform(UiObject root)", "full_signature": "@Override public boolean perform(UiObject root)", "class_method_signature": "ScrollAction.perform(UiObject root)", "testcase": false, "constructor": false}, {"identifier": "recycle", "parameters": "(List<UiObject> list, UiObject root)", "modifiers": "private", "return": "void", "signature": "void recycle(List<UiObject> list, UiObject root)", "full_signature": "private void recycle(List<UiObject> list, UiObject root)", "class_method_signature": "ScrollAction.recycle(List<UiObject> list, UiObject root)", "testcase": false, "constructor": false}, {"identifier": "findScrollableNodes", "parameters": "(UiObject root)", "modifiers": "private", "return": "List<UiObject>", "signature": "List<UiObject> findScrollableNodes(UiObject root)", "full_signature": "private List<UiObject> findScrollableNodes(UiObject root)", "class_method_signature": "ScrollAction.findScrollableNodes(UiObject root)", "testcase": false, "constructor": false}, {"identifier": "findScrollableNodes", "parameters": "(UiObject node, List<UiObject> list)", "modifiers": "private static", "return": "void", "signature": "void findScrollableNodes(UiObject node, List<UiObject> list)", "full_signature": "private static void findScrollableNodes(UiObject node, List<UiObject> list)", "class_method_signature": "ScrollAction.findScrollableNodes(UiObject node, List<UiObject> list)", "testcase": false, "constructor": false}], "file": "automator/src/main/java/com/stardust/automator/simple_action/ScrollAction.java"}, "focal_method": {"identifier": "perform", "parameters": "(UiObject root)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean perform(UiObject root) {\n        List<UiObject> scrollableNodes = findScrollableNodes(root);\n        boolean result = mIndex < scrollableNodes.size() && scrollableNodes.get(mIndex).performAction(mAction);\n        recycle(scrollableNodes, root);\n        return result;\n    }", "signature": "boolean perform(UiObject root)", "full_signature": "@Override public boolean perform(UiObject root)", "class_method_signature": "ScrollAction.perform(UiObject root)", "testcase": false, "constructor": false, "invocations": ["findScrollableNodes", "size", "performAction", "get", "recycle"]}, "repository": {"repo_id": 106979588, "url": "https://github.com/feifadaima/https-github.com-hyb1996-NoRootScriptDroid", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 24, "size": 106032, "license": "licensed"}}