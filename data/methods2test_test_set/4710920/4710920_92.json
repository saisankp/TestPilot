{"test_class": {"identifier": "ConfigParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-cluster/src/test/java/org/apache/dubbo/rpc/cluster/configurator/parser/ConfigParserTest.java"}, "test_case": {"identifier": "parseConfiguratorsAppMultiServicesTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseConfiguratorsAppMultiServicesTest() throws IOException {\n        try (InputStream yamlStream = this.getClass().getResourceAsStream(\"/AppMultiServices.yml\")) {\n            String yamlFile = streamToString(yamlStream);\n            List<URL> urls = ConfigParser.parseConfigurators(yamlFile);\n            Assertions.assertNotNull(urls);\n            Assertions.assertEquals(4, urls.size());\n            URL url = urls.get(0);\n            Assertions.assertEquals(\"127.0.0.1\", url.getAddress());\n            Assertions.assertEquals(\"service1\", url.getServiceInterface());\n            Assertions.assertEquals(6666, url.getParameter(TIMEOUT_KEY, 0));\n            Assertions.assertEquals(\"random\", url.getParameter(LOADBALANCE_KEY));\n            Assertions.assertEquals(url.getParameter(APPLICATION_KEY), \"demo-consumer\");\n        }\n    }", "signature": "void parseConfiguratorsAppMultiServicesTest()", "full_signature": "@Test public void parseConfiguratorsAppMultiServicesTest()", "class_method_signature": "ConfigParserTest.parseConfiguratorsAppMultiServicesTest()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "streamToString", "parseConfigurators", "assertNotNull", "assertEquals", "size", "get", "assertEquals", "getAddress", "assertEquals", "getServiceInterface", "assertEquals", "getParameter", "assertEquals", "getParameter", "assertEquals", "getParameter"]}, "focal_class": {"identifier": "ConfigParser", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parseConfigurators", "parameters": "(String rawConfig)", "modifiers": "public static", "return": "List<URL>", "signature": "List<URL> parseConfigurators(String rawConfig)", "full_signature": "public static List<URL> parseConfigurators(String rawConfig)", "class_method_signature": "ConfigParser.parseConfigurators(String rawConfig)", "testcase": false, "constructor": false}, {"identifier": "parseJsonArray", "parameters": "(String rawConfig)", "modifiers": "private static", "return": "List<URL>", "signature": "List<URL> parseJsonArray(String rawConfig)", "full_signature": "private static List<URL> parseJsonArray(String rawConfig)", "class_method_signature": "ConfigParser.parseJsonArray(String rawConfig)", "testcase": false, "constructor": false}, {"identifier": "parseObject", "parameters": "(String rawConfig)", "modifiers": "private static", "return": "T", "signature": "T parseObject(String rawConfig)", "full_signature": "private static T parseObject(String rawConfig)", "class_method_signature": "ConfigParser.parseObject(String rawConfig)", "testcase": false, "constructor": false}, {"identifier": "serviceItemToUrls", "parameters": "(ConfigItem item, ConfiguratorConfig config)", "modifiers": "private static", "return": "List<URL>", "signature": "List<URL> serviceItemToUrls(ConfigItem item, ConfiguratorConfig config)", "full_signature": "private static List<URL> serviceItemToUrls(ConfigItem item, ConfiguratorConfig config)", "class_method_signature": "ConfigParser.serviceItemToUrls(ConfigItem item, ConfiguratorConfig config)", "testcase": false, "constructor": false}, {"identifier": "appItemToUrls", "parameters": "(ConfigItem item, ConfiguratorConfig config)", "modifiers": "private static", "return": "List<URL>", "signature": "List<URL> appItemToUrls(ConfigItem item, ConfiguratorConfig config)", "full_signature": "private static List<URL> appItemToUrls(ConfigItem item, ConfiguratorConfig config)", "class_method_signature": "ConfigParser.appItemToUrls(ConfigItem item, ConfiguratorConfig config)", "testcase": false, "constructor": false}, {"identifier": "toParameterString", "parameters": "(ConfigItem item)", "modifiers": "private static", "return": "String", "signature": "String toParameterString(ConfigItem item)", "full_signature": "private static String toParameterString(ConfigItem item)", "class_method_signature": "ConfigParser.toParameterString(ConfigItem item)", "testcase": false, "constructor": false}, {"identifier": "appendService", "parameters": "(String serviceKey)", "modifiers": "private static", "return": "String", "signature": "String appendService(String serviceKey)", "full_signature": "private static String appendService(String serviceKey)", "class_method_signature": "ConfigParser.appendService(String serviceKey)", "testcase": false, "constructor": false}, {"identifier": "parseEnabled", "parameters": "(ConfigItem item, ConfiguratorConfig config, StringBuilder urlBuilder)", "modifiers": "private static", "return": "void", "signature": "void parseEnabled(ConfigItem item, ConfiguratorConfig config, StringBuilder urlBuilder)", "full_signature": "private static void parseEnabled(ConfigItem item, ConfiguratorConfig config, StringBuilder urlBuilder)", "class_method_signature": "ConfigParser.parseEnabled(ConfigItem item, ConfiguratorConfig config, StringBuilder urlBuilder)", "testcase": false, "constructor": false}, {"identifier": "parseAddresses", "parameters": "(ConfigItem item)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> parseAddresses(ConfigItem item)", "full_signature": "private static List<String> parseAddresses(ConfigItem item)", "class_method_signature": "ConfigParser.parseAddresses(ConfigItem item)", "testcase": false, "constructor": false}, {"identifier": "isJsonArray", "parameters": "(String rawConfig)", "modifiers": "private static", "return": "boolean", "signature": "boolean isJsonArray(String rawConfig)", "full_signature": "private static boolean isJsonArray(String rawConfig)", "class_method_signature": "ConfigParser.isJsonArray(String rawConfig)", "testcase": false, "constructor": false}], "file": "dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/configurator/parser/ConfigParser.java"}, "focal_method": {"identifier": "parseConfigurators", "parameters": "(String rawConfig)", "modifiers": "public static", "return": "List<URL>", "body": "public static List<URL> parseConfigurators(String rawConfig) {\n        // compatible url JsonArray, such as [ \"override://xxx\", \"override://xxx\" ]\n        if (isJsonArray(rawConfig)) {\n            return parseJsonArray(rawConfig);\n        }\n\n        List<URL> urls = new ArrayList<>();\n        ConfiguratorConfig configuratorConfig = parseObject(rawConfig);\n\n        String scope = configuratorConfig.getScope();\n        List<ConfigItem> items = configuratorConfig.getConfigs();\n\n        if (ConfiguratorConfig.SCOPE_APPLICATION.equals(scope)) {\n            items.forEach(item -> urls.addAll(appItemToUrls(item, configuratorConfig)));\n        } else {\n            // service scope by default.\n            items.forEach(item -> urls.addAll(serviceItemToUrls(item, configuratorConfig)));\n        }\n        return urls;\n    }", "signature": "List<URL> parseConfigurators(String rawConfig)", "full_signature": "public static List<URL> parseConfigurators(String rawConfig)", "class_method_signature": "ConfigParser.parseConfigurators(String rawConfig)", "testcase": false, "constructor": false, "invocations": ["isJsonArray", "parseJsonArray", "parseObject", "getScope", "getConfigs", "equals", "forEach", "addAll", "appItemToUrls", "forEach", "addAll", "serviceItemToUrls"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}