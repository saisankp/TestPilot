{"test_class": {"identifier": "DAOTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String TEST_CLASS = \"DAOTestClass\";", "modifier": "static final", "type": "String", "declarator": "TEST_CLASS = \"DAOTestClass\"", "var_name": "TEST_CLASS"}, {"original_string": "private static OrienteerTester tester;", "modifier": "private static", "type": "OrienteerTester", "declarator": "tester", "var_name": "tester"}], "file": "orienteer-core/src/test/java/org/orienteer/core/dao/DAOTest.java"}, "test_case": {"identifier": "testDescribeAllTypes", "parameters": "()", "modifiers": "@Test @Sudo public", "return": "void", "body": "@Test\n\t@Sudo\n\tpublic void testDescribeAllTypes() {\n\t\tOSchema schema = tester.getMetadata().getSchema();\n\t\ttry {\n\t\t\tDAO.describe(OSchemaHelper.bind(tester.getDatabase()), IDAOAllTypesTestClass.class);\n\t\t\tassertTrue(schema.existsClass(\"DAOAllTypesTestClass\"));\n\t\t\tassertTrue(schema.existsClass(\"IDAODummyClass\"));\n\t\t\tOClass oClass = schema.getClass(\"DAOAllTypesTestClass\");\n\t\t\tOClass dummyClass = schema.getClass(\"IDAODummyClass\");\n\t\t\t\n\t\t\tassertTrue(!oClass.isAbstract());\n\t\t\t\n\t\t\tassertProperty(oClass, \"boolean\", OType.BOOLEAN, false);\n\t\t\tassertProperty(oClass, \"booleanPrimitive\", OType.BOOLEAN, true);\n\t\t\tassertProperty(oClass, \"booleanDeclared\", OType.BOOLEAN, true);\n\t\t\t\n\t\t\tassertProperty(oClass, \"integer\", OType.INTEGER);\n\t\t\tassertProperty(oClass, \"short\", OType.SHORT);\n\t\t\tassertProperty(oClass, \"long\", OType.LONG);\n\t\t\tassertProperty(oClass, \"float\", OType.FLOAT);\n\t\t\tassertProperty(oClass, \"double\", OType.DOUBLE);\n\t\t\tassertProperty(oClass, \"dateTime\", OType.DATETIME);\n\t\t\tassertProperty(oClass, \"date\", OType.DATE);\n\t\t\tassertProperty(oClass, \"string\", OType.STRING);\n\t\t\tassertProperty(oClass, \"binary\", OType.BINARY);\n\t\t\tassertProperty(oClass, \"decimal\", OType.DECIMAL);\n\t\t\tassertProperty(oClass, \"byte\", OType.BYTE);\n\t\t\tassertProperty(oClass, \"custom\", OType.CUSTOM);\n\t\t\tassertProperty(oClass, \"transient\", OType.TRANSIENT);\n\t\t\tassertProperty(oClass, \"any\", OType.ANY);\n\t\t\t\n\t\t\tassertProperty(oClass, \"link\", OType.LINK, dummyClass, null);\n\t\t\tassertProperty(oClass, \"linkList\", OType.LINKLIST, dummyClass, null);\n\t\t\tassertProperty(oClass, \"linkSet\", OType.LINKSET, dummyClass, null);\n\t\t\tassertProperty(oClass, \"linkMap\", OType.LINKMAP, dummyClass, null);\n\t\t\tassertProperty(oClass, \"linkBag\", OType.LINKBAG, dummyClass, null);\n\t\t\t\n\t\t\tassertProperty(oClass, \"embedded\", OType.EMBEDDED, dummyClass, null);\n\t\t\tassertProperty(oClass, \"embeddedList\", OType.EMBEDDEDLIST, dummyClass, null);\n\t\t\tassertProperty(oClass, \"embeddedSet\", OType.EMBEDDEDSET, dummyClass, null);\n\t\t\tassertProperty(oClass, \"embeddedMap\", OType.EMBEDDEDMAP, dummyClass, null);\n\t\t\t\n\t\t\tassertProperty(oClass, \"embeddedStringSet\", OType.EMBEDDEDSET, OType.STRING);\n\t\t\tassertProperty(oClass, \"embeddedStringList\", OType.EMBEDDEDLIST, OType.STRING);\n\t\t\tassertProperty(oClass, \"embeddedStringMap\", OType.EMBEDDEDMAP, OType.STRING);\n\n\t\t\tassertProperty(oClass, \"docs\", OType.LINKLIST, dummyClass, null);\n\n\t\t} finally {\n\t\t\tif(schema.existsClass(\"DAOAllTypesTestClass\")) schema.dropClass(\"DAOAllTypesTestClass\");\n\t\t\tif(schema.existsClass(\"IDAODummyClass\")) schema.dropClass(\"IDAODummyClass\");\n\t\t}\n\t}", "signature": "void testDescribeAllTypes()", "full_signature": "@Test @Sudo public void testDescribeAllTypes()", "class_method_signature": "DAOTest.testDescribeAllTypes()", "testcase": true, "constructor": false, "invocations": ["getSchema", "getMetadata", "describe", "bind", "getDatabase", "assertTrue", "existsClass", "assertTrue", "existsClass", "getClass", "getClass", "assertTrue", "isAbstract", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "assertProperty", "existsClass", "dropClass", "existsClass", "dropClass"]}, "focal_class": {"identifier": "DAO", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DAO.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DAO.class)", "var_name": "LOG"}, {"original_string": "private static final Class<?>[] NO_CLASSES = new Class<?>[0];", "modifier": "private static final", "type": "Class<?>[]", "declarator": "NO_CLASSES = new Class<?>[0]", "var_name": "NO_CLASSES"}, {"original_string": "private static final Map<OType, OType> EMBEDDED_TO_LINKS_MAP = toMap(OType.EMBEDDED, OType.LINK,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t OType.EMBEDDEDLIST, OType.LINKLIST,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t OType.EMBEDDEDSET, OType.LINKSET,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t OType.EMBEDDEDMAP, OType.LINKMAP);", "modifier": "private static final", "type": "Map<OType, OType>", "declarator": "EMBEDDED_TO_LINKS_MAP = toMap(OType.EMBEDDED, OType.LINK,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t OType.EMBEDDEDLIST, OType.LINKLIST,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t OType.EMBEDDEDSET, OType.LINKSET,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t OType.EMBEDDEDMAP, OType.LINKMAP)", "var_name": "EMBEDDED_TO_LINKS_MAP"}], "methods": [{"identifier": "DAO", "parameters": "()", "modifiers": "private", "return": "", "signature": " DAO()", "full_signature": "private  DAO()", "class_method_signature": "DAO.DAO()", "testcase": false, "constructor": true}, {"identifier": "asWrapper", "parameters": "(Object obj)", "modifiers": "public static", "return": "IODocumentWrapper", "signature": "IODocumentWrapper asWrapper(Object obj)", "full_signature": "public static IODocumentWrapper asWrapper(Object obj)", "class_method_signature": "DAO.asWrapper(Object obj)", "testcase": false, "constructor": false}, {"identifier": "asDocument", "parameters": "(Object obj)", "modifiers": "public static", "return": "ODocument", "signature": "ODocument asDocument(Object obj)", "full_signature": "public static ODocument asDocument(Object obj)", "class_method_signature": "DAO.asDocument(Object obj)", "testcase": false, "constructor": false}, {"identifier": "loadFromDocument", "parameters": "(T obj, ODocument doc)", "modifiers": "public static", "return": "T", "signature": "T loadFromDocument(T obj, ODocument doc)", "full_signature": "public static T loadFromDocument(T obj, ODocument doc)", "class_method_signature": "DAO.loadFromDocument(T obj, ODocument doc)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(T obj)", "modifiers": "public static", "return": "T", "signature": "T save(T obj)", "full_signature": "public static T save(T obj)", "class_method_signature": "DAO.save(T obj)", "testcase": false, "constructor": false}, {"identifier": "reload", "parameters": "(T obj)", "modifiers": "public static", "return": "T", "signature": "T reload(T obj)", "full_signature": "public static T reload(T obj)", "class_method_signature": "DAO.reload(T obj)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Class<T> interfaceClass, Class<?>... additionalInterfaces)", "modifiers": "public static", "return": "T", "signature": "T create(Class<T> interfaceClass, Class<?>... additionalInterfaces)", "full_signature": "public static T create(Class<T> interfaceClass, Class<?>... additionalInterfaces)", "class_method_signature": "DAO.create(Class<T> interfaceClass, Class<?>... additionalInterfaces)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(Class<T> interfaceClass, String className, Class<?>... additionalInterfaces)", "modifiers": "public static", "return": "T", "signature": "T create(Class<T> interfaceClass, String className, Class<?>... additionalInterfaces)", "full_signature": "public static T create(Class<T> interfaceClass, String className, Class<?>... additionalInterfaces)", "class_method_signature": "DAO.create(Class<T> interfaceClass, String className, Class<?>... additionalInterfaces)", "testcase": false, "constructor": false}, {"identifier": "provide", "parameters": "(Class<T> interfaceClass, ORID iRID, Class<?>... additionalInterfaces)", "modifiers": "public static", "return": "T", "signature": "T provide(Class<T> interfaceClass, ORID iRID, Class<?>... additionalInterfaces)", "full_signature": "public static T provide(Class<T> interfaceClass, ORID iRID, Class<?>... additionalInterfaces)", "class_method_signature": "DAO.provide(Class<T> interfaceClass, ORID iRID, Class<?>... additionalInterfaces)", "testcase": false, "constructor": false}, {"identifier": "provide", "parameters": "(Class<T> interfaceClass, ODocument doc, Class<?>... additionalInterfaces)", "modifiers": "public static", "return": "T", "signature": "T provide(Class<T> interfaceClass, ODocument doc, Class<?>... additionalInterfaces)", "full_signature": "public static T provide(Class<T> interfaceClass, ODocument doc, Class<?>... additionalInterfaces)", "class_method_signature": "DAO.provide(Class<T> interfaceClass, ODocument doc, Class<?>... additionalInterfaces)", "testcase": false, "constructor": false}, {"identifier": "provide", "parameters": "(Class<T> interfaceClass, ODocumentWrapper docWrapper, Class<?>... additionalInterfaces)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T provide(Class<T> interfaceClass, ODocumentWrapper docWrapper, Class<?>... additionalInterfaces)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T provide(Class<T> interfaceClass, ODocumentWrapper docWrapper, Class<?>... additionalInterfaces)", "class_method_signature": "DAO.provide(Class<T> interfaceClass, ODocumentWrapper docWrapper, Class<?>... additionalInterfaces)", "testcase": false, "constructor": false}, {"identifier": "dao", "parameters": "(Class<T> interfaceClass, Class<?>... additionalInterfaces)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "T", "signature": "T dao(Class<T> interfaceClass, Class<?>... additionalInterfaces)", "full_signature": "@SuppressWarnings(\"unchecked\") public static T dao(Class<T> interfaceClass, Class<?>... additionalInterfaces)", "class_method_signature": "DAO.dao(Class<T> interfaceClass, Class<?>... additionalInterfaces)", "testcase": false, "constructor": false}, {"identifier": "describe", "parameters": "(OSchemaHelper helper, Class<?>... classes)", "modifiers": "public static", "return": "OSchemaHelper", "signature": "OSchemaHelper describe(OSchemaHelper helper, Class<?>... classes)", "full_signature": "public static OSchemaHelper describe(OSchemaHelper helper, Class<?>... classes)", "class_method_signature": "DAO.describe(OSchemaHelper helper, Class<?>... classes)", "testcase": false, "constructor": false}, {"identifier": "describe", "parameters": "(OSchemaHelper helper, List<Class<?>> classes, DescribeContext ctx)", "modifiers": "private static", "return": "Set<String>", "signature": "Set<String> describe(OSchemaHelper helper, List<Class<?>> classes, DescribeContext ctx)", "full_signature": "private static Set<String> describe(OSchemaHelper helper, List<Class<?>> classes, DescribeContext ctx)", "class_method_signature": "DAO.describe(OSchemaHelper helper, List<Class<?>> classes, DescribeContext ctx)", "testcase": false, "constructor": false}, {"identifier": "describe", "parameters": "(OSchemaHelper helper, Class<?> clazz, DescribeContext ctx)", "modifiers": "private static", "return": "String", "signature": "String describe(OSchemaHelper helper, Class<?> clazz, DescribeContext ctx)", "full_signature": "private static String describe(OSchemaHelper helper, Class<?> clazz, DescribeContext ctx)", "class_method_signature": "DAO.describe(OSchemaHelper helper, Class<?> clazz, DescribeContext ctx)", "testcase": false, "constructor": false}, {"identifier": "applyDAOClassAttributes", "parameters": "(OSchemaHelper helper, DAOOClass daoOClass)", "modifiers": "private static", "return": "void", "signature": "void applyDAOClassAttributes(OSchemaHelper helper, DAOOClass daoOClass)", "full_signature": "private static void applyDAOClassAttributes(OSchemaHelper helper, DAOOClass daoOClass)", "class_method_signature": "DAO.applyDAOClassAttributes(OSchemaHelper helper, DAOOClass daoOClass)", "testcase": false, "constructor": false}, {"identifier": "applyDAOFieldAttribute", "parameters": "(OSchemaHelper helper, DAOField daoField)", "modifiers": "private static", "return": "void", "signature": "void applyDAOFieldAttribute(OSchemaHelper helper, DAOField daoField)", "full_signature": "private static void applyDAOFieldAttribute(OSchemaHelper helper, DAOField daoField)", "class_method_signature": "DAO.applyDAOFieldAttribute(OSchemaHelper helper, DAOField daoField)", "testcase": false, "constructor": false}], "file": "orienteer-core/src/main/java/org/orienteer/core/dao/DAO.java"}, "focal_method": {"identifier": "describe", "parameters": "(OSchemaHelper helper, Class<?>... classes)", "modifiers": "public static", "return": "OSchemaHelper", "body": "public static OSchemaHelper describe(OSchemaHelper helper, Class<?>... classes) {\n\t\tDescribeContext ctx = new DescribeContext();\n\t\tdescribe(helper, Arrays.asList(classes), ctx);\n\t\tctx.close(false);\n\t\treturn helper;\n\t}", "signature": "OSchemaHelper describe(OSchemaHelper helper, Class<?>... classes)", "full_signature": "public static OSchemaHelper describe(OSchemaHelper helper, Class<?>... classes)", "class_method_signature": "DAO.describe(OSchemaHelper helper, Class<?>... classes)", "testcase": false, "constructor": false, "invocations": ["describe", "asList", "close"]}, "repository": {"repo_id": 20936653, "url": "https://github.com/OrienteerBAP/Orienteer", "stars": 108, "created": "6/17/2014 7:21:32 PM +00:00", "updates": "2020-01-27T07:16:30+00:00", "fork": "False", "license": "licensed"}}