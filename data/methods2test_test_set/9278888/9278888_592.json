{"test_class": {"identifier": "JsonEscaperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "byte[] buf = new byte[20];", "modifier": "", "type": "byte[]", "declarator": "buf = new byte[20]", "var_name": "buf"}], "file": "brave/src/test/java/brave/internal/codec/JsonEscaperTest.java"}, "test_case": {"identifier": "testJsonEscape", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testJsonEscape() {\n    WriteBuffer buffer = new WriteBuffer(buf, 0);\n    jsonEscape(new String(new char[] {0, 'a', 1}), buffer);\n    assertThat(buffer).hasToString(\"\\\\u0000a\\\\u0001\");\n\n    buffer.pos = 0;\n    jsonEscape(new String(new char[] {'\"', '\\\\', '\\t', '\\b'}), buffer);\n    assertThat(buffer).hasToString(\"\\\\\\\"\\\\\\\\\\\\t\\\\b\");\n\n    buffer.pos = 0;\n    jsonEscape(new String(new char[] {'\\n', '\\r', '\\f'}), buffer);\n    assertThat(buffer).hasToString(\"\\\\n\\\\r\\\\f\");\n\n    buffer.pos = 0;\n    jsonEscape(\"\\u2028 and \\u2029\", buffer);\n    assertThat(buffer).hasToString(\"\\\\u2028 and \\\\u2029\");\n\n    buffer.pos = 0;\n    jsonEscape(\"\\\"foo\", buffer);\n    assertThat(buffer).hasToString(\"\\\\\\\"foo\");\n  }", "signature": "void testJsonEscape()", "full_signature": "@Test public void testJsonEscape()", "class_method_signature": "JsonEscaperTest.testJsonEscape()", "testcase": true, "constructor": false, "invocations": ["jsonEscape", "hasToString", "assertThat", "jsonEscape", "hasToString", "assertThat", "jsonEscape", "hasToString", "assertThat", "jsonEscape", "hasToString", "assertThat", "jsonEscape", "hasToString", "assertThat"]}, "focal_class": {"identifier": "JsonEscaper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String[] REPLACEMENT_CHARS;", "modifier": "private static final", "type": "String[]", "declarator": "REPLACEMENT_CHARS", "var_name": "REPLACEMENT_CHARS"}, {"original_string": "private static final String U2028 = \"\\\\u2028\";", "modifier": "private static final", "type": "String", "declarator": "U2028 = \"\\\\u2028\"", "var_name": "U2028"}, {"original_string": "private static final String U2029 = \"\\\\u2029\";", "modifier": "private static final", "type": "String", "declarator": "U2029 = \"\\\\u2029\"", "var_name": "U2029"}], "methods": [{"identifier": "jsonEscapedSizeInBytes", "parameters": "(CharSequence v)", "modifiers": "public static", "return": "int", "signature": "int jsonEscapedSizeInBytes(CharSequence v)", "full_signature": "public static int jsonEscapedSizeInBytes(CharSequence v)", "class_method_signature": "JsonEscaper.jsonEscapedSizeInBytes(CharSequence v)", "testcase": false, "constructor": false}, {"identifier": "jsonEscape", "parameters": "(CharSequence in, WriteBuffer out)", "modifiers": "public static", "return": "void", "signature": "void jsonEscape(CharSequence in, WriteBuffer out)", "full_signature": "public static void jsonEscape(CharSequence in, WriteBuffer out)", "class_method_signature": "JsonEscaper.jsonEscape(CharSequence in, WriteBuffer out)", "testcase": false, "constructor": false}], "file": "brave/src/main/java/brave/internal/codec/JsonEscaper.java"}, "focal_method": {"identifier": "jsonEscape", "parameters": "(CharSequence in, WriteBuffer out)", "modifiers": "public static", "return": "void", "body": "public static void jsonEscape(CharSequence in, WriteBuffer out) {\n    int length = in.length();\n    if (length == 0) return;\n\n    int afterReplacement = 0;\n    for (int i = 0; i < length; i++) {\n      char c = in.charAt(i);\n      String replacement;\n      if (c < 0x80) {\n        replacement = REPLACEMENT_CHARS[c];\n        if (replacement == null) continue;\n      } else if (c == '\\u2028') {\n        replacement = U2028;\n      } else if (c == '\\u2029') {\n        replacement = U2029;\n      } else {\n        continue;\n      }\n      if (afterReplacement < i) { // write characters between the last replacement and now\n        out.writeUtf8(in, afterReplacement, i);\n      }\n      out.writeUtf8(replacement, 0, replacement.length());\n      afterReplacement = i + 1;\n    }\n\n    if (afterReplacement < length) {\n      out.writeUtf8(in, afterReplacement, length);\n    }\n  }", "signature": "void jsonEscape(CharSequence in, WriteBuffer out)", "full_signature": "public static void jsonEscape(CharSequence in, WriteBuffer out)", "class_method_signature": "JsonEscaper.jsonEscape(CharSequence in, WriteBuffer out)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "writeUtf8", "writeUtf8", "length", "writeUtf8"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}