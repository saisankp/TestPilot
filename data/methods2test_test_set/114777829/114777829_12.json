{"test_class": {"identifier": "WebXmlInitializerTest", "superclass": "", "interfaces": "", "fields": [], "file": "webapp/webxml/src/test/java/cloud/piranha/webapp/webxml/WebXmlInitializerTest.java"}, "test_case": {"identifier": "testOnStartup", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testOnStartup() throws Exception {\n        DefaultWebApplication webApplication = new DefaultWebApplication();\n        webApplication.addResource(new DirectoryResource(new File(\"src/test/webxml/init\")));\n        webApplication.addInitializer(new WebXmlInitializer());\n        webApplication.initialize();\n        ServletRegistration registration = webApplication.getServletRegistration(\"Test Servlet\");\n        assertNotNull(registration);\n        assertFalse(registration.getMappings().isEmpty());\n        assertEquals(\"*.html\", registration.getMappings().iterator().next());\n        assertEquals(\"application/x-java-class\", webApplication.getMimeType(\"my.class\"));\n        assertEquals(\"myvalue\", webApplication.getInitParameter(\"myname\"));\n        assertEquals(\"myservletcontext\", webApplication.getServletContextName());\n    }", "signature": "void testOnStartup()", "full_signature": "@Test void testOnStartup()", "class_method_signature": "WebXmlInitializerTest.testOnStartup()", "testcase": true, "constructor": false, "invocations": ["addResource", "addInitializer", "initialize", "getServletRegistration", "assertNotNull", "assertFalse", "isEmpty", "getMappings", "assertEquals", "next", "iterator", "getMappings", "assertEquals", "getMimeType", "assertEquals", "getInitParameter", "assertEquals", "getServletContextName"]}, "focal_class": {"identifier": "WebXmlInitializer", "superclass": "", "interfaces": "implements ServletContainerInitializer", "fields": [{"original_string": "private static final Logger LOGGER = Logger.getLogger(WebXmlInitializer.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(WebXmlInitializer.class.getName())", "var_name": "LOGGER"}], "methods": [{"identifier": "onStartup", "parameters": "(Set<Class<?>> classes, ServletContext servletContext)", "modifiers": "@Override public", "return": "void", "signature": "void onStartup(Set<Class<?>> classes, ServletContext servletContext)", "full_signature": "@Override public void onStartup(Set<Class<?>> classes, ServletContext servletContext)", "class_method_signature": "WebXmlInitializer.onStartup(Set<Class<?>> classes, ServletContext servletContext)", "testcase": false, "constructor": false}], "file": "webapp/webxml/src/main/java/cloud/piranha/webapp/webxml/WebXmlInitializer.java"}, "focal_method": {"identifier": "onStartup", "parameters": "(Set<Class<?>> classes, ServletContext servletContext)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void onStartup(Set<Class<?>> classes, ServletContext servletContext) throws ServletException {\n        LOGGER.log(FINE, () -> \"Entering WebXmlInitializer.onStartup\");\n\n        try {\n            WebXmlParser parser = new WebXmlParser();\n            WebXmlManager manager = new WebXmlManager();\n            servletContext.setAttribute(WebXmlManager.KEY, manager);\n\n            WebApplication webApp = (WebApplication) servletContext;\n            InputStream inputStream = servletContext.getResourceAsStream(\"WEB-INF/web.xml\");\n            if (inputStream != null) {\n                WebXml webXml = parser.parse(servletContext.getResourceAsStream(\"WEB-INF/web.xml\"));\n                manager.setWebXml(webXml);\n                manager.setInitialWebXml(webXml);\n            }\n\n            ArrayList<WebXml> webFragments = new ArrayList<>();\n            List<URL> webFragmentUrls = Collections.list(servletContext.getClassLoader().getResources(\"META-INF/web-fragment.xml\"));\n            for (URL url : webFragmentUrls) {\n                try (InputStream stream = url.openStream()) {\n                    WebXml webFragment = parser.parse(stream);\n                    webFragment.setFragment(true);\n                    webFragments.add(webFragment);\n                }\n            }\n            if (!webFragments.isEmpty()) {\n                manager.setWebFragments(webFragments);\n            }\n\n            if (manager.getWebXml() == null) {\n                manager.setWebXml(new WebXml());\n            }\n\n            if (manager.getWebXml() != null) {\n                WebXml webXml = manager.getWebXml();\n                WebXmlProcessor processor = new WebXmlProcessor();\n\n                processor.process(webXml, webApp);\n\n                if (webXml.getMetadataComplete()) {\n                    return;\n                }\n\n                manager.getOrderedFragments().forEach(fragment -> processor.process(fragment, webApp));\n            } else {\n                LOGGER.fine(\"No web.xml found!\");\n            }\n        } catch (IOException e) {\n            LOGGER.log(WARNING, \"Unable to parse web.xml\", e);\n        }\n\n        LOGGER.log(FINE, () -> \"Exiting WebXmlInitializer.onStartup\");\n    }", "signature": "void onStartup(Set<Class<?>> classes, ServletContext servletContext)", "full_signature": "@Override public void onStartup(Set<Class<?>> classes, ServletContext servletContext)", "class_method_signature": "WebXmlInitializer.onStartup(Set<Class<?>> classes, ServletContext servletContext)", "testcase": false, "constructor": false, "invocations": ["log", "setAttribute", "getResourceAsStream", "parse", "getResourceAsStream", "setWebXml", "setInitialWebXml", "list", "getResources", "getClassLoader", "openStream", "parse", "setFragment", "add", "isEmpty", "setWebFragments", "getWebXml", "setWebXml", "getWebXml", "getWebXml", "process", "getMetadataComplete", "forEach", "getOrderedFragments", "process", "fine", "log", "log"]}, "repository": {"repo_id": 114777829, "url": "https://github.com/piranhacloud/piranha", "stars": 27, "created": "12/19/2017 2:55:23 PM +00:00", "updates": "2020-01-27T11:57:41+00:00", "fork": "False", "license": "licensed"}}