{"test_class": {"identifier": "JDBCInputFormatTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "JDBCInputFormat jdbcInputFormat;", "modifier": "", "type": "JDBCInputFormat", "declarator": "jdbcInputFormat", "var_name": "jdbcInputFormat"}, {"original_string": "static Connection conn;", "modifier": "static", "type": "Connection", "declarator": "conn", "var_name": "conn"}, {"original_string": "static final Object[][] dbData = {\n\t\t{1001, (\"Java for dummies\"), (\"Tan Ah Teck\"), 11.11, 11},\n\t\t{1002, (\"More Java for dummies\"), (\"Tan Ah Teck\"), 22.22, 22},\n\t\t{1003, (\"More Java for more dummies\"), (\"Mohammad Ali\"), 33.33, 33},\n\t\t{1004, (\"A Cup of Java\"), (\"Kumar\"), 44.44, 44},\n\t\t{1005, (\"A Teaspoon of Java\"), (\"Kevin Jones\"), 55.55, 55}};", "modifier": "static final", "type": "Object[][]", "declarator": "dbData = {\n\t\t{1001, (\"Java for dummies\"), (\"Tan Ah Teck\"), 11.11, 11},\n\t\t{1002, (\"More Java for dummies\"), (\"Tan Ah Teck\"), 22.22, 22},\n\t\t{1003, (\"More Java for more dummies\"), (\"Mohammad Ali\"), 33.33, 33},\n\t\t{1004, (\"A Cup of Java\"), (\"Kumar\"), 44.44, 44},\n\t\t{1005, (\"A Teaspoon of Java\"), (\"Kevin Jones\"), 55.55, 55}}", "var_name": "dbData"}], "file": "flink-batch-connectors/flink-jdbc/src/test/java/org/apache/flink/api/java/io/jdbc/JDBCInputFormatTest.java"}, "test_case": {"identifier": "testJDBCInputFormat", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testJDBCInputFormat() throws IOException {\n\t\tjdbcInputFormat = JDBCInputFormat.buildJDBCInputFormat()\n\t\t\t\t.setDrivername(\"org.apache.derby.jdbc.EmbeddedDriver\")\n\t\t\t\t.setDBUrl(\"jdbc:derby:memory:ebookshop\")\n\t\t\t\t.setQuery(\"select * from books\")\n\t\t\t\t.setResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE)\n\t\t\t\t.finish();\n\t\tjdbcInputFormat.open(null);\n\t\tTuple5 tuple = new Tuple5();\n\t\tint recordCount = 0;\n\t\twhile (!jdbcInputFormat.reachedEnd()) {\n\t\t\tjdbcInputFormat.nextRecord(tuple);\n\t\t\tAssert.assertEquals(\"Field 0 should be int\", Integer.class, tuple.getField(0).getClass());\n\t\t\tAssert.assertEquals(\"Field 1 should be String\", String.class, tuple.getField(1).getClass());\n\t\t\tAssert.assertEquals(\"Field 2 should be String\", String.class, tuple.getField(2).getClass());\n\t\t\tAssert.assertEquals(\"Field 3 should be float\", Double.class, tuple.getField(3).getClass());\n\t\t\tAssert.assertEquals(\"Field 4 should be int\", Integer.class, tuple.getField(4).getClass());\n\n\t\t\tfor (int x = 0; x < 5; x++) {\n\t\t\t\tAssert.assertEquals(dbData[recordCount][x], tuple.getField(x));\n\t\t\t}\n\t\t\trecordCount++;\n\t\t}\n\t\tAssert.assertEquals(5, recordCount);\n\t}", "signature": "void testJDBCInputFormat()", "full_signature": "@Test public void testJDBCInputFormat()", "class_method_signature": "JDBCInputFormatTest.testJDBCInputFormat()", "testcase": true, "constructor": false, "invocations": ["finish", "setResultSetType", "setQuery", "setDBUrl", "setDrivername", "buildJDBCInputFormat", "open", "reachedEnd", "nextRecord", "assertEquals", "getClass", "getField", "assertEquals", "getClass", "getField", "assertEquals", "getClass", "getField", "assertEquals", "getClass", "getField", "assertEquals", "getClass", "getField", "assertEquals", "getField", "assertEquals"]}, "focal_class": {"identifier": "JDBCInputFormat", "superclass": "extends RichInputFormat<OUT, InputSplit>", "interfaces": "implements NonParallelInput", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(JDBCInputFormat.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(JDBCInputFormat.class)", "var_name": "LOG"}, {"original_string": "private String username;", "modifier": "private", "type": "String", "declarator": "username", "var_name": "username"}, {"original_string": "private String password;", "modifier": "private", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "private String drivername;", "modifier": "private", "type": "String", "declarator": "drivername", "var_name": "drivername"}, {"original_string": "private String dbURL;", "modifier": "private", "type": "String", "declarator": "dbURL", "var_name": "dbURL"}, {"original_string": "private String query;", "modifier": "private", "type": "String", "declarator": "query", "var_name": "query"}, {"original_string": "private int resultSetType;", "modifier": "private", "type": "int", "declarator": "resultSetType", "var_name": "resultSetType"}, {"original_string": "private int resultSetConcurrency;", "modifier": "private", "type": "int", "declarator": "resultSetConcurrency", "var_name": "resultSetConcurrency"}, {"original_string": "private transient Connection dbConn;", "modifier": "private transient", "type": "Connection", "declarator": "dbConn", "var_name": "dbConn"}, {"original_string": "private transient Statement statement;", "modifier": "private transient", "type": "Statement", "declarator": "statement", "var_name": "statement"}, {"original_string": "private transient ResultSet resultSet;", "modifier": "private transient", "type": "ResultSet", "declarator": "resultSet", "var_name": "resultSet"}, {"original_string": "private int[] columnTypes = null;", "modifier": "private", "type": "int[]", "declarator": "columnTypes = null", "var_name": "columnTypes"}], "methods": [{"identifier": "JDBCInputFormat", "parameters": "()", "modifiers": "public", "return": "", "signature": " JDBCInputFormat()", "full_signature": "public  JDBCInputFormat()", "class_method_signature": "JDBCInputFormat.JDBCInputFormat()", "testcase": false, "constructor": true}, {"identifier": "configure", "parameters": "(Configuration parameters)", "modifiers": "@Override public", "return": "void", "signature": "void configure(Configuration parameters)", "full_signature": "@Override public void configure(Configuration parameters)", "class_method_signature": "JDBCInputFormat.configure(Configuration parameters)", "testcase": false, "constructor": false}, {"identifier": "open", "parameters": "(InputSplit ignored)", "modifiers": "@Override public", "return": "void", "signature": "void open(InputSplit ignored)", "full_signature": "@Override public void open(InputSplit ignored)", "class_method_signature": "JDBCInputFormat.open(InputSplit ignored)", "testcase": false, "constructor": false}, {"identifier": "establishConnection", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void establishConnection()", "full_signature": "private void establishConnection()", "class_method_signature": "JDBCInputFormat.establishConnection()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "JDBCInputFormat.close()", "testcase": false, "constructor": false}, {"identifier": "reachedEnd", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean reachedEnd()", "full_signature": "@Override public boolean reachedEnd()", "class_method_signature": "JDBCInputFormat.reachedEnd()", "testcase": false, "constructor": false}, {"identifier": "nextRecord", "parameters": "(OUT tuple)", "modifiers": "@Override public", "return": "OUT", "signature": "OUT nextRecord(OUT tuple)", "full_signature": "@Override public OUT nextRecord(OUT tuple)", "class_method_signature": "JDBCInputFormat.nextRecord(OUT tuple)", "testcase": false, "constructor": false}, {"identifier": "extractTypes", "parameters": "(OUT tuple)", "modifiers": "private", "return": "void", "signature": "void extractTypes(OUT tuple)", "full_signature": "private void extractTypes(OUT tuple)", "class_method_signature": "JDBCInputFormat.extractTypes(OUT tuple)", "testcase": false, "constructor": false}, {"identifier": "addValue", "parameters": "(OUT reuse)", "modifiers": "private", "return": "void", "signature": "void addValue(OUT reuse)", "full_signature": "private void addValue(OUT reuse)", "class_method_signature": "JDBCInputFormat.addValue(OUT reuse)", "testcase": false, "constructor": false}, {"identifier": "getStatistics", "parameters": "(BaseStatistics cachedStatistics)", "modifiers": "@Override public", "return": "BaseStatistics", "signature": "BaseStatistics getStatistics(BaseStatistics cachedStatistics)", "full_signature": "@Override public BaseStatistics getStatistics(BaseStatistics cachedStatistics)", "class_method_signature": "JDBCInputFormat.getStatistics(BaseStatistics cachedStatistics)", "testcase": false, "constructor": false}, {"identifier": "createInputSplits", "parameters": "(int minNumSplits)", "modifiers": "@Override public", "return": "InputSplit[]", "signature": "InputSplit[] createInputSplits(int minNumSplits)", "full_signature": "@Override public InputSplit[] createInputSplits(int minNumSplits)", "class_method_signature": "JDBCInputFormat.createInputSplits(int minNumSplits)", "testcase": false, "constructor": false}, {"identifier": "getInputSplitAssigner", "parameters": "(InputSplit[] inputSplits)", "modifiers": "@Override public", "return": "InputSplitAssigner", "signature": "InputSplitAssigner getInputSplitAssigner(InputSplit[] inputSplits)", "full_signature": "@Override public InputSplitAssigner getInputSplitAssigner(InputSplit[] inputSplits)", "class_method_signature": "JDBCInputFormat.getInputSplitAssigner(InputSplit[] inputSplits)", "testcase": false, "constructor": false}, {"identifier": "buildJDBCInputFormat", "parameters": "()", "modifiers": "public static", "return": "JDBCInputFormatBuilder", "signature": "JDBCInputFormatBuilder buildJDBCInputFormat()", "full_signature": "public static JDBCInputFormatBuilder buildJDBCInputFormat()", "class_method_signature": "JDBCInputFormat.buildJDBCInputFormat()", "testcase": false, "constructor": false}], "file": "flink-batch-connectors/flink-jdbc/src/main/java/org/apache/flink/api/java/io/jdbc/JDBCInputFormat.java"}, "focal_method": {"identifier": "JDBCInputFormat", "parameters": "()", "modifiers": "public", "return": "", "body": "public JDBCInputFormat() {\n\t}", "signature": " JDBCInputFormat()", "full_signature": "public  JDBCInputFormat()", "class_method_signature": "JDBCInputFormat.JDBCInputFormat()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}