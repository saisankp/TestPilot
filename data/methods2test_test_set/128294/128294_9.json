{"test_class": {"identifier": "RTPAudioFormatTest", "superclass": "", "interfaces": "", "fields": [], "file": "servers/media/core/server-impl/src/test/java/org/mobicents/media/server/impl/rtp/sdp/RTPAudioFormatTest.java"}, "test_case": {"identifier": "testEncodeL16Mono", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEncodeL16Mono() throws Exception {\n        Collection<Attribute> attributes = AVProfile.L16_MONO.encode();\n        assertEquals(1, attributes.size());\n        Attribute rtpmap = getAttribute(attributes, 0);\n        assertEquals(\"rtpmap\",rtpmap.getName());\n        assertEquals(\"11 l16/44100\",rtpmap.getValue());\n    }", "signature": "void testEncodeL16Mono()", "full_signature": "@Test public void testEncodeL16Mono()", "class_method_signature": "RTPAudioFormatTest.testEncodeL16Mono()", "testcase": true, "constructor": false, "invocations": ["encode", "assertEquals", "size", "getAttribute", "assertEquals", "getName", "assertEquals", "getValue"]}, "focal_class": {"identifier": "RTPAudioFormat", "superclass": "extends AudioFormat", "interfaces": "implements RTPFormat", "fields": [{"original_string": "private int payloadType;", "modifier": "private", "type": "int", "declarator": "payloadType", "var_name": "payloadType"}, {"original_string": "private final static SdpFactory sdpFactory = SdpFactory.getInstance();", "modifier": "private final static", "type": "SdpFactory", "declarator": "sdpFactory = SdpFactory.getInstance()", "var_name": "sdpFactory"}], "methods": [{"identifier": "RTPAudioFormat", "parameters": "(int payload, String encodingName)", "modifiers": "public", "return": "", "signature": " RTPAudioFormat(int payload, String encodingName)", "full_signature": "public  RTPAudioFormat(int payload, String encodingName)", "class_method_signature": "RTPAudioFormat.RTPAudioFormat(int payload, String encodingName)", "testcase": false, "constructor": true}, {"identifier": "RTPAudioFormat", "parameters": "(int payload, String encodingName, double sampleRate, int bits, int chans)", "modifiers": "public", "return": "", "signature": " RTPAudioFormat(int payload, String encodingName, double sampleRate, int bits, int chans)", "full_signature": "public  RTPAudioFormat(int payload, String encodingName, double sampleRate, int bits, int chans)", "class_method_signature": "RTPAudioFormat.RTPAudioFormat(int payload, String encodingName, double sampleRate, int bits, int chans)", "testcase": false, "constructor": true}, {"identifier": "RTPAudioFormat", "parameters": "(int payload, String encodingName, double sampleRate, int bits, int chans, int endian, int signed)", "modifiers": "public", "return": "", "signature": " RTPAudioFormat(int payload, String encodingName, double sampleRate, int bits, int chans, int endian, int signed)", "full_signature": "public  RTPAudioFormat(int payload, String encodingName, double sampleRate, int bits, int chans, int endian, int signed)", "class_method_signature": "RTPAudioFormat.RTPAudioFormat(int payload, String encodingName, double sampleRate, int bits, int chans, int endian, int signed)", "testcase": false, "constructor": true}, {"identifier": "getPayloadType", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getPayloadType()", "full_signature": "public int getPayloadType()", "class_method_signature": "RTPAudioFormat.getPayloadType()", "testcase": false, "constructor": false}, {"identifier": "setPayloadType", "parameters": "(int payload)", "modifiers": "public", "return": "void", "signature": "void setPayloadType(int payload)", "full_signature": "public void setPayloadType(int payload)", "class_method_signature": "RTPAudioFormat.setPayloadType(int payload)", "testcase": false, "constructor": false}, {"identifier": "getBits", "parameters": "(String enc)", "modifiers": "private static", "return": "int", "signature": "int getBits(String enc)", "full_signature": "private static int getBits(String enc)", "class_method_signature": "RTPAudioFormat.getBits(String enc)", "testcase": false, "constructor": false}, {"identifier": "parseFormat", "parameters": "(String rtpmap)", "modifiers": "public static", "return": "RTPAudioFormat", "signature": "RTPAudioFormat parseFormat(String rtpmap)", "full_signature": "public static RTPAudioFormat parseFormat(String rtpmap)", "class_method_signature": "RTPAudioFormat.parseFormat(String rtpmap)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "()", "modifiers": "public", "return": "Collection<Attribute>", "signature": "Collection<Attribute> encode()", "full_signature": "public Collection<Attribute> encode()", "class_method_signature": "RTPAudioFormat.encode()", "testcase": false, "constructor": false}, {"identifier": "toSdp", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toSdp()", "full_signature": "public String toSdp()", "class_method_signature": "RTPAudioFormat.toSdp()", "testcase": false, "constructor": false}], "file": "servers/media/core/server-impl/src/main/java/org/mobicents/media/server/impl/rtp/sdp/RTPAudioFormat.java"}, "focal_method": {"identifier": "encode", "parameters": "()", "modifiers": "public", "return": "Collection<Attribute>", "body": "public Collection<Attribute> encode() {\n        Vector<Attribute> list = new Vector();\n        list.add(sdpFactory.createAttribute(\"rtpmap\", toSdp()));\n        if (getEncoding().equalsIgnoreCase(\"telephone-event\")) {\n            list.add(sdpFactory.createAttribute(\"fmtp\", payloadType + \" 0-15\"));\n        } else if (getEncoding().equalsIgnoreCase(\"g729\")) {\n            list.add(sdpFactory.createAttribute(\"fmtp\", payloadType + \" annex=b\"));\n        }\n        return list;\n    }", "signature": "Collection<Attribute> encode()", "full_signature": "public Collection<Attribute> encode()", "class_method_signature": "RTPAudioFormat.encode()", "testcase": false, "constructor": false, "invocations": ["add", "createAttribute", "toSdp", "equalsIgnoreCase", "getEncoding", "add", "createAttribute", "equalsIgnoreCase", "getEncoding", "add", "createAttribute"]}, "repository": {"repo_id": 128294, "url": "https://github.com/deruelle/mobicents", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 17, "size": 347121, "license": "licensed"}}