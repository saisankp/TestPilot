{"test_class": {"identifier": "PrimeNumbersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Integer[] ONE = {};", "modifier": "", "type": "Integer[]", "declarator": "ONE = {}", "var_name": "ONE"}, {"original_string": "Integer[] TWO = {2};", "modifier": "", "type": "Integer[]", "declarator": "TWO = {2}", "var_name": "TWO"}, {"original_string": "Integer[] THREE = {3};", "modifier": "", "type": "Integer[]", "declarator": "THREE = {3}", "var_name": "THREE"}, {"original_string": "Integer[] FOUR = {2, 2};", "modifier": "", "type": "Integer[]", "declarator": "FOUR = {2, 2}", "var_name": "FOUR"}, {"original_string": "Integer[] SIX = {2, 3};", "modifier": "", "type": "Integer[]", "declarator": "SIX = {2, 3}", "var_name": "SIX"}], "file": "remotekata/andreiAndXavi/src/test/java/com/novoda/primenumbers/PrimeNumbersTest.java"}, "test_case": {"identifier": "testTwoHasPrimeFactorTwo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTwoHasPrimeFactorTwo() {\n        assertThat(list(TWO), is(PrimeNumbers.generate(2)));\n    }", "signature": "void testTwoHasPrimeFactorTwo()", "full_signature": "@Test public void testTwoHasPrimeFactorTwo()", "class_method_signature": "PrimeNumbersTest.testTwoHasPrimeFactorTwo()", "testcase": true, "constructor": false, "invocations": ["assertThat", "list", "is", "generate"]}, "focal_class": {"identifier": "PrimeNumbers", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "generate", "parameters": "(int i)", "modifiers": "public static", "return": "List<Integer>", "signature": "List<Integer> generate(int i)", "full_signature": "public static List<Integer> generate(int i)", "class_method_signature": "PrimeNumbers.generate(int i)", "testcase": false, "constructor": false}, {"identifier": "isOne", "parameters": "(int i)", "modifiers": "private static", "return": "boolean", "signature": "boolean isOne(int i)", "full_signature": "private static boolean isOne(int i)", "class_method_signature": "PrimeNumbers.isOne(int i)", "testcase": false, "constructor": false}, {"identifier": "emptyList", "parameters": "()", "modifiers": "private static", "return": "ArrayList<Integer>", "signature": "ArrayList<Integer> emptyList()", "full_signature": "private static ArrayList<Integer> emptyList()", "class_method_signature": "PrimeNumbers.emptyList()", "testcase": false, "constructor": false}], "file": "remotekata/andreiAndXavi/src/main/java/com/novoda/primenumbers/PrimeNumbers.java"}, "focal_method": {"identifier": "generate", "parameters": "(int i)", "modifiers": "public static", "return": "List<Integer>", "body": "public static List<Integer> generate(int i) {\n        if (isOne(i)) {\n            return emptyList();\n        } else if (i == 2) {\n            return new ArrayList<Integer>() {{\n                add(2);\n            }};\n\n        } else if (i == 4) {\n            return new ArrayList<Integer>() {{\n                add(2);\n                add(2);\n            }};\n        } else {\n            return new ArrayList<Integer>() {{\n                add(3);\n            }};\n        }\n    }", "signature": "List<Integer> generate(int i)", "full_signature": "public static List<Integer> generate(int i)", "class_method_signature": "PrimeNumbers.generate(int i)", "testcase": false, "constructor": false, "invocations": ["isOne", "emptyList", "add", "add", "add", "add"]}, "repository": {"repo_id": 6509909, "url": "https://github.com/novoda/dojos", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 72, "size": 12987, "license": "licensed"}}