{"test_class": {"identifier": "SpecificationCacheDefaultTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public JUnitRuleMockery2 context = JUnitRuleMockery2.createFor(Mode.INTERFACES_ONLY);", "modifier": "@Rule\n    public", "type": "JUnitRuleMockery2", "declarator": "context = JUnitRuleMockery2.createFor(Mode.INTERFACES_ONLY)", "var_name": "context"}, {"original_string": "@Mock\n    private ObjectSpecification customerSpec;", "modifier": "@Mock\n    private", "type": "ObjectSpecification", "declarator": "customerSpec", "var_name": "customerSpec"}, {"original_string": "@Mock\n    private ObjectSpecification orderSpec;", "modifier": "@Mock\n    private", "type": "ObjectSpecification", "declarator": "orderSpec", "var_name": "orderSpec"}, {"original_string": "private SpecificationCacheDefault<ObjectSpecification> specificationCache;", "modifier": "private", "type": "SpecificationCacheDefault<ObjectSpecification>", "declarator": "specificationCache", "var_name": "specificationCache"}], "file": "core/metamodel/src/test/java/org/apache/isis/core/metamodel/specloader/SpecificationCacheDefaultTest.java"}, "test_case": {"identifier": "getByObjectType_whenNotSet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getByObjectType_whenNotSet() {\n        assertNull(specificationCache.getByObjectType(ObjectSpecId.of(\"CUS\")));\n    }", "signature": "void getByObjectType_whenNotSet()", "full_signature": "@Test public void getByObjectType_whenNotSet()", "class_method_signature": "SpecificationCacheDefaultTest.getByObjectType_whenNotSet()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getByObjectType", "of"]}, "focal_class": {"identifier": "SpecificationCacheDefault", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<ObjectSpecId, String> classNameBySpecId = _Maps.newHashMap();", "modifier": "private final", "type": "Map<ObjectSpecId, String>", "declarator": "classNameBySpecId = _Maps.newHashMap()", "var_name": "classNameBySpecId"}, {"original_string": "private final Map<String, T> specByClassName = _Maps.newHashMap();", "modifier": "private final", "type": "Map<String, T>", "declarator": "specByClassName = _Maps.newHashMap()", "var_name": "specByClassName"}, {"original_string": "@Getter(value = AccessLevel.PACKAGE)\n    private final _VersionedList<T> vList = new _VersionedList<>();", "modifier": "@Getter(value = AccessLevel.PACKAGE)\n    private final", "type": "_VersionedList<T>", "declarator": "vList = new _VersionedList<>()", "var_name": "vList"}], "methods": [{"identifier": "get", "parameters": "(String className)", "modifiers": "public", "return": "T", "signature": "T get(String className)", "full_signature": "public T get(String className)", "class_method_signature": "SpecificationCacheDefault.get(String className)", "testcase": false, "constructor": false}, {"identifier": "computeIfAbsent", "parameters": "(\n            String className, \n            Function<? super String, T> mappingFunction)", "modifiers": "public", "return": "T", "signature": "T computeIfAbsent(\n            String className, \n            Function<? super String, T> mappingFunction)", "full_signature": "public T computeIfAbsent(\n            String className, \n            Function<? super String, T> mappingFunction)", "class_method_signature": "SpecificationCacheDefault.computeIfAbsent(\n            String className, \n            Function<? super String, T> mappingFunction)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "SpecificationCacheDefault.clear()", "testcase": false, "constructor": false}, {"identifier": "snapshotSpecs", "parameters": "()", "modifiers": "public", "return": "Collection<T>", "signature": "Collection<T> snapshotSpecs()", "full_signature": "public Collection<T> snapshotSpecs()", "class_method_signature": "SpecificationCacheDefault.snapshotSpecs()", "testcase": false, "constructor": false}, {"identifier": "resolveType", "parameters": "(final ObjectSpecId objectSpecID)", "modifiers": "public", "return": "Class<?>", "signature": "Class<?> resolveType(final ObjectSpecId objectSpecID)", "full_signature": "public Class<?> resolveType(final ObjectSpecId objectSpecID)", "class_method_signature": "SpecificationCacheDefault.resolveType(final ObjectSpecId objectSpecID)", "testcase": false, "constructor": false}, {"identifier": "getByObjectType", "parameters": "(final ObjectSpecId objectSpecID)", "modifiers": "public", "return": "T", "signature": "T getByObjectType(final ObjectSpecId objectSpecID)", "full_signature": "public T getByObjectType(final ObjectSpecId objectSpecID)", "class_method_signature": "SpecificationCacheDefault.getByObjectType(final ObjectSpecId objectSpecID)", "testcase": false, "constructor": false}, {"identifier": "internalPut", "parameters": "(T spec)", "modifiers": "private", "return": "void", "signature": "void internalPut(T spec)", "full_signature": "private void internalPut(T spec)", "class_method_signature": "SpecificationCacheDefault.internalPut(T spec)", "testcase": false, "constructor": false}, {"identifier": "remove", "parameters": "(String typeName)", "modifiers": "public", "return": "T", "signature": "T remove(String typeName)", "full_signature": "public T remove(String typeName)", "class_method_signature": "SpecificationCacheDefault.remove(String typeName)", "testcase": false, "constructor": false}, {"identifier": "recache", "parameters": "(T spec)", "modifiers": "public", "return": "void", "signature": "void recache(T spec)", "full_signature": "public void recache(T spec)", "class_method_signature": "SpecificationCacheDefault.recache(T spec)", "testcase": false, "constructor": false}, {"identifier": "hasUsableSpecId", "parameters": "(T spec)", "modifiers": "private", "return": "boolean", "signature": "boolean hasUsableSpecId(T spec)", "full_signature": "private boolean hasUsableSpecId(T spec)", "class_method_signature": "SpecificationCacheDefault.hasUsableSpecId(T spec)", "testcase": false, "constructor": false}], "file": "core/metamodel/src/main/java/org/apache/isis/core/metamodel/specloader/SpecificationCacheDefault.java"}, "focal_method": {"identifier": "getByObjectType", "parameters": "(final ObjectSpecId objectSpecID)", "modifiers": "public", "return": "T", "body": "public T getByObjectType(final ObjectSpecId objectSpecID) {\n        val className = classNameBySpecId.get(objectSpecID);\n        return className != null ? specByClassName.get(className) : null;\n    }", "signature": "T getByObjectType(final ObjectSpecId objectSpecID)", "full_signature": "public T getByObjectType(final ObjectSpecId objectSpecID)", "class_method_signature": "SpecificationCacheDefault.getByObjectType(final ObjectSpecId objectSpecID)", "testcase": false, "constructor": false, "invocations": ["get", "get"]}, "repository": {"repo_id": 6935442, "url": "https://github.com/apache/isis", "stars": 516, "created": "11/30/2012 8:00:24 AM +00:00", "updates": "2020-01-27T13:28:09+00:00", "fork": "False", "license": "licensed"}}