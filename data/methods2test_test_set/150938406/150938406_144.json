{"test_class": {"identifier": "ClusterEvaluationUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/evaluation/ClusterEvaluationUtilTest.java"}, "test_case": {"identifier": "matrixToParamsTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void matrixToParamsTest(){\n        long[][] matrix = new long[][]{{5, 1, 2}, {1, 4, 0}, {0, 1, 3}};\n        LongMatrix longMatrix = new LongMatrix(matrix);\n\n        Params params = ClusterEvaluationUtil.extractParamsFromConfusionMatrix(longMatrix);\n        Assert.assertEquals(params.get(ClusterMetrics.NMI), 0.364, 0.001);\n        Assert.assertEquals(params.get(ClusterMetrics.PURITY), 0.705, 0.001);\n        Assert.assertEquals(params.get(ClusterMetrics.RI), 0.68, 0.01);\n        Assert.assertEquals(params.get(ClusterMetrics.ARI), 0.24, 0.01);\n    }", "signature": "void matrixToParamsTest()", "full_signature": "@Test public void matrixToParamsTest()", "class_method_signature": "ClusterEvaluationUtilTest.matrixToParamsTest()", "testcase": true, "constructor": false, "invocations": ["extractParamsFromConfusionMatrix", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "ClusterEvaluationUtil", "superclass": "", "interfaces": "implements AllWindowFunction<Row, Row, TimeWindow>", "fields": [{"original_string": "public static int COUNT = 0;", "modifier": "public static", "type": "int", "declarator": "COUNT = 0", "var_name": "COUNT"}, {"original_string": "public static int MEAN = 1;", "modifier": "public static", "type": "int", "declarator": "MEAN = 1", "var_name": "MEAN"}, {"original_string": "public static int SUM_2 = 2;", "modifier": "public static", "type": "int", "declarator": "SUM_2 = 2", "var_name": "SUM_2"}, {"original_string": "private ContinuousDistance distance;", "modifier": "private", "type": "ContinuousDistance", "declarator": "distance", "var_name": "distance"}], "methods": [{"identifier": "ClusterEvaluationUtil", "parameters": "(ContinuousDistance distance)", "modifiers": "public", "return": "", "signature": " ClusterEvaluationUtil(ContinuousDistance distance)", "full_signature": "public  ClusterEvaluationUtil(ContinuousDistance distance)", "class_method_signature": "ClusterEvaluationUtil.ClusterEvaluationUtil(ContinuousDistance distance)", "testcase": false, "constructor": true}, {"identifier": "extractParamsFromConfusionMatrix", "parameters": "(LongMatrix longMatrix)", "modifiers": "public static", "return": "Params", "signature": "Params extractParamsFromConfusionMatrix(LongMatrix longMatrix)", "full_signature": "public static Params extractParamsFromConfusionMatrix(LongMatrix longMatrix)", "class_method_signature": "ClusterEvaluationUtil.extractParamsFromConfusionMatrix(LongMatrix longMatrix)", "testcase": false, "constructor": false}, {"identifier": "combination", "parameters": "(long number)", "modifiers": "private static", "return": "long", "signature": "long combination(long number)", "full_signature": "private static long combination(long number)", "class_method_signature": "ClusterEvaluationUtil.combination(long number)", "testcase": false, "constructor": false}, {"identifier": "entropy", "parameters": "(long frequency, long total)", "modifiers": "private static", "return": "double", "signature": "double entropy(long frequency, long total)", "full_signature": "private static double entropy(long frequency, long total)", "class_method_signature": "ClusterEvaluationUtil.entropy(long frequency, long total)", "testcase": false, "constructor": false}, {"identifier": "calSilhouetteCoefficient", "parameters": "(Row row, ClusterMetricsSummary clusterMetricsSummary)", "modifiers": "public static", "return": "Tuple1<Double>", "signature": "Tuple1<Double> calSilhouetteCoefficient(Row row, ClusterMetricsSummary clusterMetricsSummary)", "full_signature": "public static Tuple1<Double> calSilhouetteCoefficient(Row row, ClusterMetricsSummary clusterMetricsSummary)", "class_method_signature": "ClusterEvaluationUtil.calSilhouetteCoefficient(Row row, ClusterMetricsSummary clusterMetricsSummary)", "testcase": false, "constructor": false}, {"identifier": "getBasicClusterStatistics", "parameters": "(Iterable<Row> rows)", "modifiers": "public static", "return": "Params", "signature": "Params getBasicClusterStatistics(Iterable<Row> rows)", "full_signature": "public static Params getBasicClusterStatistics(Iterable<Row> rows)", "class_method_signature": "ClusterEvaluationUtil.getBasicClusterStatistics(Iterable<Row> rows)", "testcase": false, "constructor": false}, {"identifier": "getClusterStatistics", "parameters": "(Iterable<Row> rows, ContinuousDistance distance)", "modifiers": "public static", "return": "ClusterMetricsSummary", "signature": "ClusterMetricsSummary getClusterStatistics(Iterable<Row> rows, ContinuousDistance distance)", "full_signature": "public static ClusterMetricsSummary getClusterStatistics(Iterable<Row> rows, ContinuousDistance distance)", "class_method_signature": "ClusterEvaluationUtil.getClusterStatistics(Iterable<Row> rows, ContinuousDistance distance)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(TimeWindow timeWindow, Iterable<Row> rows, Collector<Row> collector)", "modifiers": "@Override public", "return": "void", "signature": "void apply(TimeWindow timeWindow, Iterable<Row> rows, Collector<Row> collector)", "full_signature": "@Override public void apply(TimeWindow timeWindow, Iterable<Row> rows, Collector<Row> collector)", "class_method_signature": "ClusterEvaluationUtil.apply(TimeWindow timeWindow, Iterable<Row> rows, Collector<Row> collector)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/evaluation/ClusterEvaluationUtil.java"}, "focal_method": {"identifier": "extractParamsFromConfusionMatrix", "parameters": "(LongMatrix longMatrix)", "modifiers": "public static", "return": "Params", "body": "public static Params extractParamsFromConfusionMatrix(LongMatrix longMatrix) {\n        long[][] matrix = longMatrix.getMatrix();\n        long[] actualLabel = longMatrix.getColSums();\n        long[] predictLabel = longMatrix.getRowSums();\n        long total = longMatrix.getTotal();\n\n        double entropyActual = 0.0;\n        double entropyPredict = 0.0;\n        double mutualInfor = 0.0;\n        double purity = 0.0;\n        long tp = 0L;\n        long tpFpSum = 0L;\n        long tpFnSum = 0L;\n        for (long anActualLabel : actualLabel) {\n            entropyActual += entropy(anActualLabel, total);\n            tpFpSum += combination(anActualLabel);\n        }\n        entropyActual /= -Math.log(2);\n        for (long aPredictLabel : predictLabel) {\n            entropyPredict += entropy(aPredictLabel, total);\n            tpFnSum += combination(aPredictLabel);\n        }\n        entropyPredict /= -Math.log(2);\n        for (int i = 0; i < matrix.length; i++) {\n            long max = 0;\n            for (int j = 0; j < matrix[0].length; j++) {\n                max = Math.max(max, matrix[i][j]);\n                mutualInfor += (0 == matrix[i][j] ? 0.0 :\n                    1.0 * matrix[i][j] / total * Math.log(1.0 * total * matrix[i][j] / predictLabel[i] / actualLabel[j]));\n                tp += combination(matrix[i][j]);\n            }\n            purity += max;\n        }\n        purity /= total;\n        mutualInfor /= Math.log(2);\n        long fp = tpFpSum - tp;\n        long fn = tpFnSum - tp;\n        long totalCombination = combination(total);\n        long tn = totalCombination - tp - fn - fp;\n        double expectedIndex = 1.0 * tpFpSum * tpFnSum / totalCombination;\n        double maxIndex = 1.0 * (tpFpSum + tpFnSum) / 2;\n        double ri = 1.0 * (tp + tn) / (tp + tn + fp + fn);\n        return new Params()\n            .set(ClusterMetrics.NMI, 2.0 * mutualInfor / (entropyActual + entropyPredict))\n            .set(ClusterMetrics.PURITY, purity)\n            .set(ClusterMetrics.RI, ri)\n            .set(ClusterMetrics.ARI, (tp - expectedIndex) / (maxIndex - expectedIndex));\n    }", "signature": "Params extractParamsFromConfusionMatrix(LongMatrix longMatrix)", "full_signature": "public static Params extractParamsFromConfusionMatrix(LongMatrix longMatrix)", "class_method_signature": "ClusterEvaluationUtil.extractParamsFromConfusionMatrix(LongMatrix longMatrix)", "testcase": false, "constructor": false, "invocations": ["getMatrix", "getColSums", "getRowSums", "getTotal", "entropy", "combination", "log", "entropy", "combination", "log", "max", "log", "combination", "log", "combination", "set", "set", "set", "set"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}