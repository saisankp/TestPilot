{"test_class": {"identifier": "IntentRendererTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SlotTypeDefinition literalType = SlotTypeDefinition.builder()\n        .withCustom(false)\n        .withSlotTypeClass(AmazonLiteral.class)\n        .withName(\"slot_type\")\n        .build();", "modifier": "private final", "type": "SlotTypeDefinition", "declarator": "literalType = SlotTypeDefinition.builder()\n        .withCustom(false)\n        .withSlotTypeClass(AmazonLiteral.class)\n        .withName(\"slot_type\")\n        .build()", "var_name": "literalType"}, {"original_string": "private final IntentDefinition intent = IntentDefinition.builder()\n        .withName(\"TestIntent\")\n        .withCustom(false)\n        .withIntentType(Mockito.mock(JavaType.class))\n        .withSlots(Collections.singletonMap(\"slot_name\", SlotTypeDefinition.builder()\n            .withName(\"slot_type\")\n            .withCustom(false)\n            .withSlotTypeClass(AmazonLiteral.class)\n            .build()))\n        .build();", "modifier": "private final", "type": "IntentDefinition", "declarator": "intent = IntentDefinition.builder()\n        .withName(\"TestIntent\")\n        .withCustom(false)\n        .withIntentType(Mockito.mock(JavaType.class))\n        .withSlots(Collections.singletonMap(\"slot_name\", SlotTypeDefinition.builder()\n            .withName(\"slot_type\")\n            .withCustom(false)\n            .withSlotTypeClass(AmazonLiteral.class)\n            .build()))\n        .build()", "var_name": "intent"}, {"original_string": "private final IntentRenderer underTest = new IntentRenderer();", "modifier": "private final", "type": "IntentRenderer", "declarator": "underTest = new IntentRenderer()", "var_name": "underTest"}], "file": "ask-sdk-interaction-model-mapper/src/test/java/com/amazon/ask/interaction/renderer/IntentRendererTest.java"}, "test_case": {"identifier": "testRenderIntent_Samples", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRenderIntent_Samples() {\n        IntentData intentData = IntentData.builder()\n            .addSlot(\"slot_name\", IntentSlotData.builder().build())\n            .addSample(\"test\")\n            .build();\n\n        Intent expected = Intent.builder()\n            .withName(\"TestIntent\")\n            .withSlots(Collections.singletonList(Slot.builder()\n                .withName(\"slot_name\")\n                .withType(\"slot_type\")\n                .build()))\n            .withSamples(Collections.singletonList(\"test\"))\n            .build();\n\n        Intent actual = underTest.renderIntent(intent, intentData);\n\n        assertEquals(expected, actual);\n    }", "signature": "void testRenderIntent_Samples()", "full_signature": "@Test public void testRenderIntent_Samples()", "class_method_signature": "IntentRendererTest.testRenderIntent_Samples()", "testcase": true, "constructor": false, "invocations": ["build", "addSample", "addSlot", "builder", "build", "builder", "build", "withSamples", "withSlots", "withName", "builder", "singletonList", "build", "withType", "withName", "builder", "singletonList", "renderIntent", "assertEquals"]}, "focal_class": {"identifier": "IntentRenderer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final IntentSlotRenderer intentSlotRenderer;", "modifier": "private final", "type": "IntentSlotRenderer", "declarator": "intentSlotRenderer", "var_name": "intentSlotRenderer"}], "methods": [{"identifier": "IntentRenderer", "parameters": "(IntentSlotRenderer intentSlotRenderer)", "modifiers": "public", "return": "", "signature": " IntentRenderer(IntentSlotRenderer intentSlotRenderer)", "full_signature": "public  IntentRenderer(IntentSlotRenderer intentSlotRenderer)", "class_method_signature": "IntentRenderer.IntentRenderer(IntentSlotRenderer intentSlotRenderer)", "testcase": false, "constructor": true}, {"identifier": "IntentRenderer", "parameters": "()", "modifiers": "public", "return": "", "signature": " IntentRenderer()", "full_signature": "public  IntentRenderer()", "class_method_signature": "IntentRenderer.IntentRenderer()", "testcase": false, "constructor": true}, {"identifier": "renderIntent", "parameters": "(IntentDefinition intentDefinition, IntentData intentData)", "modifiers": "public", "return": "Intent", "signature": "Intent renderIntent(IntentDefinition intentDefinition, IntentData intentData)", "full_signature": "public Intent renderIntent(IntentDefinition intentDefinition, IntentData intentData)", "class_method_signature": "IntentRenderer.renderIntent(IntentDefinition intentDefinition, IntentData intentData)", "testcase": false, "constructor": false}, {"identifier": "renderDialogIntent", "parameters": "(IntentDefinition intentDefinition, IntentData intentData)", "modifiers": "public", "return": "Optional<DialogIntent>", "signature": "Optional<DialogIntent> renderDialogIntent(IntentDefinition intentDefinition, IntentData intentData)", "full_signature": "public Optional<DialogIntent> renderDialogIntent(IntentDefinition intentDefinition, IntentData intentData)", "class_method_signature": "IntentRenderer.renderDialogIntent(IntentDefinition intentDefinition, IntentData intentData)", "testcase": false, "constructor": false}, {"identifier": "hasDialogInformation", "parameters": "(IntentData intentData)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasDialogInformation(IntentData intentData)", "full_signature": "private static boolean hasDialogInformation(IntentData intentData)", "class_method_signature": "IntentRenderer.hasDialogInformation(IntentData intentData)", "testcase": false, "constructor": false}, {"identifier": "hasDialogInformation", "parameters": "(IntentSlotData slot)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasDialogInformation(IntentSlotData slot)", "full_signature": "private static boolean hasDialogInformation(IntentSlotData slot)", "class_method_signature": "IntentRenderer.hasDialogInformation(IntentSlotData slot)", "testcase": false, "constructor": false}, {"identifier": "renderDialogSlots", "parameters": "(IntentDefinition intentDefinition, IntentData intentData)", "modifiers": "protected", "return": "Optional<List<DialogSlot>>", "signature": "Optional<List<DialogSlot>> renderDialogSlots(IntentDefinition intentDefinition, IntentData intentData)", "full_signature": "protected Optional<List<DialogSlot>> renderDialogSlots(IntentDefinition intentDefinition, IntentData intentData)", "class_method_signature": "IntentRenderer.renderDialogSlots(IntentDefinition intentDefinition, IntentData intentData)", "testcase": false, "constructor": false}, {"identifier": "renderPrompts", "parameters": "(IntentDefinition intentDefinition, IntentData intentData)", "modifiers": "public", "return": "List<Prompt>", "signature": "List<Prompt> renderPrompts(IntentDefinition intentDefinition, IntentData intentData)", "full_signature": "public List<Prompt> renderPrompts(IntentDefinition intentDefinition, IntentData intentData)", "class_method_signature": "IntentRenderer.renderPrompts(IntentDefinition intentDefinition, IntentData intentData)", "testcase": false, "constructor": false}, {"identifier": "resolveConfirmationPrompt", "parameters": "(IntentDefinition intentDefinition, IntentData intentData)", "modifiers": "protected", "return": "DialogIntentPrompt", "signature": "DialogIntentPrompt resolveConfirmationPrompt(IntentDefinition intentDefinition, IntentData intentData)", "full_signature": "protected DialogIntentPrompt resolveConfirmationPrompt(IntentDefinition intentDefinition, IntentData intentData)", "class_method_signature": "IntentRenderer.resolveConfirmationPrompt(IntentDefinition intentDefinition, IntentData intentData)", "testcase": false, "constructor": false}], "file": "ask-sdk-interaction-model-mapper/src/main/java/com/amazon/ask/interaction/renderer/IntentRenderer.java"}, "focal_method": {"identifier": "renderIntent", "parameters": "(IntentDefinition intentDefinition, IntentData intentData)", "modifiers": "public", "return": "Intent", "body": "public Intent renderIntent(IntentDefinition intentDefinition, IntentData intentData) {\n        List<Slot> slots = intentDefinition.getSlots().entrySet().stream()\n            .map(s -> intentSlotRenderer.renderSlot(s.getKey(), s.getValue(), intentData))\n            .collect(Collectors.toList());\n\n        return Intent.builder()\n            .withName(intentDefinition.getName())\n            .withSlots(slots.isEmpty() ? null : slots)\n            .withSamples(intentData.getSamples().isEmpty() ? null : new ArrayList<>(intentData.getSamples()))\n            .build();\n    }", "signature": "Intent renderIntent(IntentDefinition intentDefinition, IntentData intentData)", "full_signature": "public Intent renderIntent(IntentDefinition intentDefinition, IntentData intentData)", "class_method_signature": "IntentRenderer.renderIntent(IntentDefinition intentDefinition, IntentData intentData)", "testcase": false, "constructor": false, "invocations": ["collect", "map", "stream", "entrySet", "getSlots", "renderSlot", "getKey", "getValue", "toList", "build", "withSamples", "withSlots", "withName", "builder", "getName", "isEmpty", "isEmpty", "getSamples", "getSamples"]}, "repository": {"repo_id": 143249569, "url": "https://github.com/amazon-archives/ask-sdk-frameworks-java", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 12, "size": 313, "license": "licensed"}}