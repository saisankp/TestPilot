{"test_class": {"identifier": "FixedLengthRecordSorterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long SEED = 649180756312423613L;", "modifier": "private static final", "type": "long", "declarator": "SEED = 649180756312423613L", "var_name": "SEED"}, {"original_string": "private static final int MEMORY_SIZE = 1024 * 1024 * 64;", "modifier": "private static final", "type": "int", "declarator": "MEMORY_SIZE = 1024 * 1024 * 64", "var_name": "MEMORY_SIZE"}, {"original_string": "private static final int MEMORY_PAGE_SIZE = 32 * 1024;", "modifier": "private static final", "type": "int", "declarator": "MEMORY_PAGE_SIZE = 32 * 1024", "var_name": "MEMORY_PAGE_SIZE"}, {"original_string": "private MemoryManager memoryManager;", "modifier": "private", "type": "MemoryManager", "declarator": "memoryManager", "var_name": "memoryManager"}, {"original_string": "private IOManager ioManager;", "modifier": "private", "type": "IOManager", "declarator": "ioManager", "var_name": "ioManager"}, {"original_string": "private TypeSerializer<IntPair> serializer;", "modifier": "private", "type": "TypeSerializer<IntPair>", "declarator": "serializer", "var_name": "serializer"}, {"original_string": "private TypeComparator<IntPair> comparator;", "modifier": "private", "type": "TypeComparator<IntPair>", "declarator": "comparator", "var_name": "comparator"}], "file": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/sort/FixedLengthRecordSorterTest.java"}, "test_case": {"identifier": "testReset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testReset() throws Exception {\n\t\tfinal int numSegments = MEMORY_SIZE / MEMORY_PAGE_SIZE;\n\t\tfinal List<MemorySegment> memory = this.memoryManager.allocatePages(new DummyInvokable(), numSegments);\n\t\t\n\t\tFixedLengthRecordSorter<IntPair> sorter = newSortBuffer(memory);\n\t\tRandomIntPairGenerator generator = new RandomIntPairGenerator(SEED);\n\t\t\n\t\t// write the buffer full with the first set of records\n\t\tIntPair record = new IntPair();\n\t\tint num = -1;\n\t\tdo {\n\t\t\tgenerator.next(record);\n\t\t\tnum++;\n\t\t}\n\t\twhile (sorter.write(record) && num < 3354624);\n\t\t\n\t\tsorter.reset();\n\t\t\n\t\t// write a second sequence of records. since the values are of fixed length, we must be able to write an equal number\n\t\tgenerator.reset();\n\t\t\n\t\t// write the buffer full with the first set of records\n\t\tint num2 = -1;\n\t\tdo {\n\t\t\tgenerator.next(record);\n\t\t\tnum2++;\n\t\t}\n\t\twhile (sorter.write(record) && num2 < 3354624);\n\t\t\n\t\tAssert.assertEquals(\"The number of records written after the reset was not the same as before.\", num, num2);\n\t\t\n\t\t// re-read the records\n\t\tgenerator.reset();\n\t\tIntPair readTarget = new IntPair();\n\t\t\n\t\tint i = 0;\n\t\twhile (i < num) {\n\t\t\tgenerator.next(record);\n\t\t\treadTarget = sorter.getRecord(readTarget, i++);\n\t\t\t\n\t\t\tint rk = readTarget.getKey();\n\t\t\tint gk = record.getKey();\n\t\t\t\n\t\t\tint rv = readTarget.getValue();\n\t\t\tint gv = record.getValue();\n\t\t\t\n\t\t\tAssert.assertEquals(\"The re-read key is wrong\", gk, rk);\n\t\t\tAssert.assertEquals(\"The re-read value is wrong\", gv, rv);\n\t\t}\n\t\t\n\t\t// release the memory occupied by the buffers\n\t\tsorter.dispose();\n\t\tthis.memoryManager.release(memory);\n\t}", "signature": "void testReset()", "full_signature": "@Test public void testReset()", "class_method_signature": "FixedLengthRecordSorterTest.testReset()", "testcase": true, "constructor": false, "invocations": ["allocatePages", "newSortBuffer", "next", "write", "reset", "reset", "next", "write", "assertEquals", "reset", "next", "getRecord", "getKey", "getKey", "getValue", "getValue", "assertEquals", "assertEquals", "dispose", "release"]}, "focal_class": {"identifier": "FixedLengthRecordSorter", "superclass": "", "interfaces": "implements InMemorySorter<T>", "fields": [{"original_string": "private static final int MIN_REQUIRED_BUFFERS = 3;", "modifier": "private static final", "type": "int", "declarator": "MIN_REQUIRED_BUFFERS = 3", "var_name": "MIN_REQUIRED_BUFFERS"}, {"original_string": "private final byte[] swapBuffer;", "modifier": "private final", "type": "byte[]", "declarator": "swapBuffer", "var_name": "swapBuffer"}, {"original_string": "private final TypeSerializer<T> serializer;", "modifier": "private final", "type": "TypeSerializer<T>", "declarator": "serializer", "var_name": "serializer"}, {"original_string": "private final TypeComparator<T> comparator;", "modifier": "private final", "type": "TypeComparator<T>", "declarator": "comparator", "var_name": "comparator"}, {"original_string": "private final SingleSegmentOutputView outView;", "modifier": "private final", "type": "SingleSegmentOutputView", "declarator": "outView", "var_name": "outView"}, {"original_string": "private final SingleSegmentInputView inView;", "modifier": "private final", "type": "SingleSegmentInputView", "declarator": "inView", "var_name": "inView"}, {"original_string": "private MemorySegment currentSortBufferSegment;", "modifier": "private", "type": "MemorySegment", "declarator": "currentSortBufferSegment", "var_name": "currentSortBufferSegment"}, {"original_string": "private int currentSortBufferOffset;", "modifier": "private", "type": "int", "declarator": "currentSortBufferOffset", "var_name": "currentSortBufferOffset"}, {"original_string": "private final ArrayList<MemorySegment> freeMemory;", "modifier": "private final", "type": "ArrayList<MemorySegment>", "declarator": "freeMemory", "var_name": "freeMemory"}, {"original_string": "private final ArrayList<MemorySegment> sortBuffer;", "modifier": "private final", "type": "ArrayList<MemorySegment>", "declarator": "sortBuffer", "var_name": "sortBuffer"}, {"original_string": "private long sortBufferBytes;", "modifier": "private", "type": "long", "declarator": "sortBufferBytes", "var_name": "sortBufferBytes"}, {"original_string": "private int numRecords;", "modifier": "private", "type": "int", "declarator": "numRecords", "var_name": "numRecords"}, {"original_string": "private final int numKeyBytes;", "modifier": "private final", "type": "int", "declarator": "numKeyBytes", "var_name": "numKeyBytes"}, {"original_string": "private final int recordSize;", "modifier": "private final", "type": "int", "declarator": "recordSize", "var_name": "recordSize"}, {"original_string": "private final int recordsPerSegment;", "modifier": "private final", "type": "int", "declarator": "recordsPerSegment", "var_name": "recordsPerSegment"}, {"original_string": "private final int lastEntryOffset;", "modifier": "private final", "type": "int", "declarator": "lastEntryOffset", "var_name": "lastEntryOffset"}, {"original_string": "private final int segmentSize;", "modifier": "private final", "type": "int", "declarator": "segmentSize", "var_name": "segmentSize"}, {"original_string": "private final int totalNumBuffers;", "modifier": "private final", "type": "int", "declarator": "totalNumBuffers", "var_name": "totalNumBuffers"}, {"original_string": "private final boolean useNormKeyUninverted;", "modifier": "private final", "type": "boolean", "declarator": "useNormKeyUninverted", "var_name": "useNormKeyUninverted"}, {"original_string": "private final T recordInstance;", "modifier": "private final", "type": "T", "declarator": "recordInstance", "var_name": "recordInstance"}], "methods": [{"identifier": "FixedLengthRecordSorter", "parameters": "(TypeSerializer<T> serializer, TypeComparator<T> comparator, \n\t\t\tList<MemorySegment> memory)", "modifiers": "public", "return": "", "signature": " FixedLengthRecordSorter(TypeSerializer<T> serializer, TypeComparator<T> comparator, \n\t\t\tList<MemorySegment> memory)", "full_signature": "public  FixedLengthRecordSorter(TypeSerializer<T> serializer, TypeComparator<T> comparator, \n\t\t\tList<MemorySegment> memory)", "class_method_signature": "FixedLengthRecordSorter.FixedLengthRecordSorter(TypeSerializer<T> serializer, TypeComparator<T> comparator, \n\t\t\tList<MemorySegment> memory)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "FixedLengthRecordSorter.reset()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "@Override public boolean isEmpty()", "class_method_signature": "FixedLengthRecordSorter.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "FixedLengthRecordSorter.dispose()", "testcase": false, "constructor": false}, {"identifier": "getCapacity", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getCapacity()", "full_signature": "@Override public long getCapacity()", "class_method_signature": "FixedLengthRecordSorter.getCapacity()", "testcase": false, "constructor": false}, {"identifier": "getOccupancy", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getOccupancy()", "full_signature": "@Override public long getOccupancy()", "class_method_signature": "FixedLengthRecordSorter.getOccupancy()", "testcase": false, "constructor": false}, {"identifier": "getRecord", "parameters": "(int logicalPosition)", "modifiers": "@Override public", "return": "T", "signature": "T getRecord(int logicalPosition)", "full_signature": "@Override public T getRecord(int logicalPosition)", "class_method_signature": "FixedLengthRecordSorter.getRecord(int logicalPosition)", "testcase": false, "constructor": false}, {"identifier": "getRecord", "parameters": "(T reuse, int logicalPosition)", "modifiers": "@Override public", "return": "T", "signature": "T getRecord(T reuse, int logicalPosition)", "full_signature": "@Override public T getRecord(T reuse, int logicalPosition)", "class_method_signature": "FixedLengthRecordSorter.getRecord(T reuse, int logicalPosition)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(T record)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean write(T record)", "full_signature": "@Override public boolean write(T record)", "class_method_signature": "FixedLengthRecordSorter.write(T record)", "testcase": false, "constructor": false}, {"identifier": "memoryAvailable", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean memoryAvailable()", "full_signature": "private boolean memoryAvailable()", "class_method_signature": "FixedLengthRecordSorter.memoryAvailable()", "testcase": false, "constructor": false}, {"identifier": "nextMemorySegment", "parameters": "()", "modifiers": "private", "return": "MemorySegment", "signature": "MemorySegment nextMemorySegment()", "full_signature": "private MemorySegment nextMemorySegment()", "class_method_signature": "FixedLengthRecordSorter.nextMemorySegment()", "testcase": false, "constructor": false}, {"identifier": "compare", "parameters": "(int i, int j)", "modifiers": "@Override public", "return": "int", "signature": "int compare(int i, int j)", "full_signature": "@Override public int compare(int i, int j)", "class_method_signature": "FixedLengthRecordSorter.compare(int i, int j)", "testcase": false, "constructor": false}, {"identifier": "swap", "parameters": "(int i, int j)", "modifiers": "@Override public", "return": "void", "signature": "void swap(int i, int j)", "full_signature": "@Override public void swap(int i, int j)", "class_method_signature": "FixedLengthRecordSorter.swap(int i, int j)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "FixedLengthRecordSorter.size()", "testcase": false, "constructor": false}, {"identifier": "getIterator", "parameters": "()", "modifiers": "@Override public final", "return": "MutableObjectIterator<T>", "signature": "MutableObjectIterator<T> getIterator()", "full_signature": "@Override public final MutableObjectIterator<T> getIterator()", "class_method_signature": "FixedLengthRecordSorter.getIterator()", "testcase": false, "constructor": false}, {"identifier": "writeToOutput", "parameters": "(final ChannelWriterOutputView output)", "modifiers": "@Override public", "return": "void", "signature": "void writeToOutput(final ChannelWriterOutputView output)", "full_signature": "@Override public void writeToOutput(final ChannelWriterOutputView output)", "class_method_signature": "FixedLengthRecordSorter.writeToOutput(final ChannelWriterOutputView output)", "testcase": false, "constructor": false}, {"identifier": "writeToOutput", "parameters": "(ChannelWriterOutputView output, LargeRecordHandler<T> largeRecordsOutput)", "modifiers": "@Override public", "return": "void", "signature": "void writeToOutput(ChannelWriterOutputView output, LargeRecordHandler<T> largeRecordsOutput)", "full_signature": "@Override public void writeToOutput(ChannelWriterOutputView output, LargeRecordHandler<T> largeRecordsOutput)", "class_method_signature": "FixedLengthRecordSorter.writeToOutput(ChannelWriterOutputView output, LargeRecordHandler<T> largeRecordsOutput)", "testcase": false, "constructor": false}, {"identifier": "writeToOutput", "parameters": "(final ChannelWriterOutputView output, final int start, int num)", "modifiers": "@Override public", "return": "void", "signature": "void writeToOutput(final ChannelWriterOutputView output, final int start, int num)", "full_signature": "@Override public void writeToOutput(final ChannelWriterOutputView output, final int start, int num)", "class_method_signature": "FixedLengthRecordSorter.writeToOutput(final ChannelWriterOutputView output, final int start, int num)", "testcase": false, "constructor": false}], "file": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/sort/FixedLengthRecordSorter.java"}, "focal_method": {"identifier": "reset", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void reset() {\n\t\t// reset all offsets\n\t\tthis.numRecords = 0;\n\t\tthis.currentSortBufferOffset = 0;\n\t\tthis.sortBufferBytes = 0;\n\t\t\n\t\t// return all memory\n\t\tthis.freeMemory.addAll(this.sortBuffer);\n\t\tthis.sortBuffer.clear();\n\t\t\n\t\t// grab first buffers\n\t\tthis.currentSortBufferSegment = nextMemorySegment();\n\t\tthis.sortBuffer.add(this.currentSortBufferSegment);\n\t\tthis.outView.set(this.currentSortBufferSegment);\n\t}", "signature": "void reset()", "full_signature": "@Override public void reset()", "class_method_signature": "FixedLengthRecordSorter.reset()", "testcase": false, "constructor": false, "invocations": ["addAll", "clear", "nextMemorySegment", "add", "set"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}