{"test_class": {"identifier": "BoundaryLayerTest", "superclass": "extends BaseKujakuLayerTest", "interfaces": "", "fields": [], "file": "library/src/test/java/io/ona/kujaku/layers/BoundaryLayerTest.java"}, "test_case": {"identifier": "removeLayerOnMapShouldReturnTrueWhenStyleIsReadyAndRemoveLayersAndSources", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void removeLayerOnMapShouldReturnTrueWhenStyleIsReadyAndRemoveLayersAndSources() {\n        float textSize = 20f;\n        float boundaryWidth = 6f;\n        int colorInt = Color.GREEN;\n        String labelProperty = \"district-name\";\n\n        FeatureCollection featureCollection = FeatureCollection.fromFeatures(new ArrayList<Feature>());\n\n        BoundaryLayer.Builder builder = new BoundaryLayer.Builder(featureCollection)\n                .setLabelProperty(labelProperty)\n                .setLabelTextSize(textSize)\n                .setLabelColorInt(colorInt)\n                .setBoundaryColor(colorInt)\n                .setBoundaryWidth(boundaryWidth);\n\n        BoundaryLayer boundaryLayer = builder.build();\n\n        assertNull(ReflectionHelpers.getField(boundaryLayer, \"boundarySource\"));\n\n        MapboxMap mapboxMap = Mockito.mock(MapboxMap.class);\n        Style style = Mockito.mock(Style.class);\n\n        SymbolLayer boundaryLabelLayer = Mockito.mock(SymbolLayer.class);\n        LineLayer boundaryLineLayer = Mockito.mock(LineLayer.class);\n        GeoJsonSource boundarySource = new GeoJsonSource(\"some-id\");\n        GeoJsonSource boundaryLabelsSource = new GeoJsonSource(\"some-id-2\");\n\n        Mockito.doReturn(true)\n                .when(style)\n                .isFullyLoaded();\n\n        Mockito.doReturn(style)\n                .when(mapboxMap)\n                .getStyle();\n\n        ReflectionHelpers.setField(boundaryLayer, \"boundaryLabelLayer\", boundaryLabelLayer);\n        ReflectionHelpers.setField(boundaryLayer, \"boundaryLineLayer\", boundaryLineLayer);\n        ReflectionHelpers.setField(boundaryLayer, \"boundarySource\", boundarySource);\n        ReflectionHelpers.setField(boundaryLayer, \"boundaryLabelsSource\", boundaryLabelsSource);\n\n        assertTrue(boundaryLayer.removeLayerOnMap(mapboxMap));\n\n        Mockito.verify(style, Mockito.times(1))\n                .removeLayer(ArgumentMatchers.eq(boundaryLabelLayer));\n        Mockito.verify(style, Mockito.times(1))\n                .removeLayer(ArgumentMatchers.eq(boundaryLineLayer));\n        Mockito.verify(style, Mockito.times(1))\n                .removeSource(ArgumentMatchers.eq(boundarySource));\n        Mockito.verify(style, Mockito.times(1))\n                .removeSource(ArgumentMatchers.eq(boundaryLabelsSource));\n    }", "signature": "void removeLayerOnMapShouldReturnTrueWhenStyleIsReadyAndRemoveLayersAndSources()", "full_signature": "@Test public void removeLayerOnMapShouldReturnTrueWhenStyleIsReadyAndRemoveLayersAndSources()", "class_method_signature": "BoundaryLayerTest.removeLayerOnMapShouldReturnTrueWhenStyleIsReadyAndRemoveLayersAndSources()", "testcase": true, "constructor": false, "invocations": ["fromFeatures", "setBoundaryWidth", "setBoundaryColor", "setLabelColorInt", "setLabelTextSize", "setLabelProperty", "build", "assertNull", "getField", "mock", "mock", "mock", "mock", "isFullyLoaded", "when", "doReturn", "getStyle", "when", "doReturn", "setField", "setField", "setField", "setField", "assertTrue", "removeLayerOnMap", "removeLayer", "verify", "times", "eq", "removeLayer", "verify", "times", "eq", "removeSource", "verify", "times", "eq", "removeSource", "verify", "times", "eq"]}, "focal_class": {"identifier": "BoundaryLayer", "superclass": "extends KujakuLayer", "interfaces": "", "fields": [{"original_string": "private static final String TAG = BoundaryLayer.class.getName();", "modifier": "private static final", "type": "String", "declarator": "TAG = BoundaryLayer.class.getName()", "var_name": "TAG"}, {"original_string": "protected KujakuLayer.Builder builder;", "modifier": "protected", "type": "KujakuLayer.Builder", "declarator": "builder", "var_name": "builder"}, {"original_string": "protected String BOUNDARY_FEATURE_SOURCE_ID = UUID.randomUUID().toString();", "modifier": "protected", "type": "String", "declarator": "BOUNDARY_FEATURE_SOURCE_ID = UUID.randomUUID().toString()", "var_name": "BOUNDARY_FEATURE_SOURCE_ID"}, {"original_string": "protected String BOUNDARY_LABEL_SOURCE_ID = UUID.randomUUID().toString();", "modifier": "protected", "type": "String", "declarator": "BOUNDARY_LABEL_SOURCE_ID = UUID.randomUUID().toString()", "var_name": "BOUNDARY_LABEL_SOURCE_ID"}, {"original_string": "protected String BOUNDARY_LINE_LAYER_ID = UUID.randomUUID().toString();", "modifier": "protected", "type": "String", "declarator": "BOUNDARY_LINE_LAYER_ID = UUID.randomUUID().toString()", "var_name": "BOUNDARY_LINE_LAYER_ID"}, {"original_string": "protected String BOUNDARY_LABEL_LAYER_ID = UUID.randomUUID().toString();", "modifier": "protected", "type": "String", "declarator": "BOUNDARY_LABEL_LAYER_ID = UUID.randomUUID().toString()", "var_name": "BOUNDARY_LABEL_LAYER_ID"}, {"original_string": "private GeoJsonSource boundarySource;", "modifier": "private", "type": "GeoJsonSource", "declarator": "boundarySource", "var_name": "boundarySource"}, {"original_string": "private GeoJsonSource boundaryLabelsSource;", "modifier": "private", "type": "GeoJsonSource", "declarator": "boundaryLabelsSource", "var_name": "boundaryLabelsSource"}, {"original_string": "private LineLayer boundaryLineLayer;", "modifier": "private", "type": "LineLayer", "declarator": "boundaryLineLayer", "var_name": "boundaryLineLayer"}, {"original_string": "private SymbolLayer boundaryLabelLayer;", "modifier": "private", "type": "SymbolLayer", "declarator": "boundaryLabelLayer", "var_name": "boundaryLabelLayer"}], "methods": [{"identifier": "BoundaryLayer", "parameters": "(@NonNull KujakuLayer.Builder builder)", "modifiers": "", "return": "", "signature": " BoundaryLayer(@NonNull KujakuLayer.Builder builder)", "full_signature": "  BoundaryLayer(@NonNull KujakuLayer.Builder builder)", "class_method_signature": "BoundaryLayer.BoundaryLayer(@NonNull KujakuLayer.Builder builder)", "testcase": false, "constructor": true}, {"identifier": "createBoundaryLabelLayer", "parameters": "(@NonNull KujakuLayer.Builder builder)", "modifiers": "private", "return": "void", "signature": "void createBoundaryLabelLayer(@NonNull KujakuLayer.Builder builder)", "full_signature": "private void createBoundaryLabelLayer(@NonNull KujakuLayer.Builder builder)", "class_method_signature": "BoundaryLayer.createBoundaryLabelLayer(@NonNull KujakuLayer.Builder builder)", "testcase": false, "constructor": false}, {"identifier": "createBoundaryLineLayer", "parameters": "(@NonNull KujakuLayer.Builder builder)", "modifiers": "private", "return": "void", "signature": "void createBoundaryLineLayer(@NonNull KujakuLayer.Builder builder)", "full_signature": "private void createBoundaryLineLayer(@NonNull KujakuLayer.Builder builder)", "class_method_signature": "BoundaryLayer.createBoundaryLineLayer(@NonNull KujakuLayer.Builder builder)", "testcase": false, "constructor": false}, {"identifier": "createBoundaryLabelSource", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createBoundaryLabelSource()", "full_signature": "private void createBoundaryLabelSource()", "class_method_signature": "BoundaryLayer.createBoundaryLabelSource()", "testcase": false, "constructor": false}, {"identifier": "createBoundaryFeatureSource", "parameters": "(@NonNull KujakuLayer.Builder builder)", "modifiers": "private", "return": "void", "signature": "void createBoundaryFeatureSource(@NonNull KujakuLayer.Builder builder)", "full_signature": "private void createBoundaryFeatureSource(@NonNull KujakuLayer.Builder builder)", "class_method_signature": "BoundaryLayer.createBoundaryFeatureSource(@NonNull KujakuLayer.Builder builder)", "testcase": false, "constructor": false}, {"identifier": "updateLineLayerProperties", "parameters": "(@NonNull PropertyValue<?>... properties)", "modifiers": "public", "return": "void", "signature": "void updateLineLayerProperties(@NonNull PropertyValue<?>... properties)", "full_signature": "public void updateLineLayerProperties(@NonNull PropertyValue<?>... properties)", "class_method_signature": "BoundaryLayer.updateLineLayerProperties(@NonNull PropertyValue<?>... properties)", "testcase": false, "constructor": false}, {"identifier": "addLayerToMap", "parameters": "(@NonNull MapboxMap mapboxMap)", "modifiers": "@Override public", "return": "void", "signature": "void addLayerToMap(@NonNull MapboxMap mapboxMap)", "full_signature": "@Override public void addLayerToMap(@NonNull MapboxMap mapboxMap)", "class_method_signature": "BoundaryLayer.addLayerToMap(@NonNull MapboxMap mapboxMap)", "testcase": false, "constructor": false}, {"identifier": "createLayers", "parameters": "(@NonNull MapboxMap mapboxMap)", "modifiers": "protected", "return": "void", "signature": "void createLayers(@NonNull MapboxMap mapboxMap)", "full_signature": "protected void createLayers(@NonNull MapboxMap mapboxMap)", "class_method_signature": "BoundaryLayer.createLayers(@NonNull MapboxMap mapboxMap)", "testcase": false, "constructor": false}, {"identifier": "addLayersBelow", "parameters": "(@NonNull MapboxMap mapboxMap)", "modifiers": "protected", "return": "void", "signature": "void addLayersBelow(@NonNull MapboxMap mapboxMap)", "full_signature": "protected void addLayersBelow(@NonNull MapboxMap mapboxMap)", "class_method_signature": "BoundaryLayer.addLayersBelow(@NonNull MapboxMap mapboxMap)", "testcase": false, "constructor": false}, {"identifier": "addLayers", "parameters": "(@NonNull MapboxMap mapboxMap)", "modifiers": "protected", "return": "void", "signature": "void addLayers(@NonNull MapboxMap mapboxMap)", "full_signature": "protected void addLayers(@NonNull MapboxMap mapboxMap)", "class_method_signature": "BoundaryLayer.addLayers(@NonNull MapboxMap mapboxMap)", "testcase": false, "constructor": false}, {"identifier": "calculateCenterPoints", "parameters": "(@NonNull FeatureCollection featureCollection)", "modifiers": "private", "return": "FeatureCollection", "signature": "FeatureCollection calculateCenterPoints(@NonNull FeatureCollection featureCollection)", "full_signature": "private FeatureCollection calculateCenterPoints(@NonNull FeatureCollection featureCollection)", "class_method_signature": "BoundaryLayer.calculateCenterPoints(@NonNull FeatureCollection featureCollection)", "testcase": false, "constructor": false}, {"identifier": "getCenter", "parameters": "(@NonNull Geometry featureGeometry)", "modifiers": "private", "return": "Point", "signature": "Point getCenter(@NonNull Geometry featureGeometry)", "full_signature": "private Point getCenter(@NonNull Geometry featureGeometry)", "class_method_signature": "BoundaryLayer.getCenter(@NonNull Geometry featureGeometry)", "testcase": false, "constructor": false}, {"identifier": "getLayers", "parameters": "(@NonNull MapboxMap mapboxMap)", "modifiers": "protected", "return": "ArrayList<Layer>", "signature": "ArrayList<Layer> getLayers(@NonNull MapboxMap mapboxMap)", "full_signature": "protected ArrayList<Layer> getLayers(@NonNull MapboxMap mapboxMap)", "class_method_signature": "BoundaryLayer.getLayers(@NonNull MapboxMap mapboxMap)", "testcase": false, "constructor": false}, {"identifier": "enableLayerOnMap", "parameters": "(@NonNull MapboxMap mapboxMap)", "modifiers": "@Override public", "return": "void", "signature": "void enableLayerOnMap(@NonNull MapboxMap mapboxMap)", "full_signature": "@Override public void enableLayerOnMap(@NonNull MapboxMap mapboxMap)", "class_method_signature": "BoundaryLayer.enableLayerOnMap(@NonNull MapboxMap mapboxMap)", "testcase": false, "constructor": false}, {"identifier": "disableLayerOnMap", "parameters": "(@NonNull MapboxMap mapboxMap)", "modifiers": "@Override public", "return": "void", "signature": "void disableLayerOnMap(@NonNull MapboxMap mapboxMap)", "full_signature": "@Override public void disableLayerOnMap(@NonNull MapboxMap mapboxMap)", "class_method_signature": "BoundaryLayer.disableLayerOnMap(@NonNull MapboxMap mapboxMap)", "testcase": false, "constructor": false}, {"identifier": "getLayerIds", "parameters": "()", "modifiers": "@Override @NonNull public", "return": "String[]", "signature": "String[] getLayerIds()", "full_signature": "@Override @NonNull public String[] getLayerIds()", "class_method_signature": "BoundaryLayer.getLayerIds()", "testcase": false, "constructor": false}, {"identifier": "removeLayerOnMap", "parameters": "(@NonNull MapboxMap mapboxMap)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeLayerOnMap(@NonNull MapboxMap mapboxMap)", "full_signature": "@Override public boolean removeLayerOnMap(@NonNull MapboxMap mapboxMap)", "class_method_signature": "BoundaryLayer.removeLayerOnMap(@NonNull MapboxMap mapboxMap)", "testcase": false, "constructor": false}, {"identifier": "removeLayers", "parameters": "(@NonNull Style style)", "modifiers": "protected", "return": "void", "signature": "void removeLayers(@NonNull Style style)", "full_signature": "protected void removeLayers(@NonNull Style style)", "class_method_signature": "BoundaryLayer.removeLayers(@NonNull Style style)", "testcase": false, "constructor": false}, {"identifier": "removeSources", "parameters": "(@NonNull Style style)", "modifiers": "protected", "return": "void", "signature": "void removeSources(@NonNull Style style)", "full_signature": "protected void removeSources(@NonNull Style style)", "class_method_signature": "BoundaryLayer.removeSources(@NonNull Style style)", "testcase": false, "constructor": false}, {"identifier": "updateFeatures", "parameters": "(@NonNull FeatureCollection featureCollection)", "modifiers": "@Override public", "return": "void", "signature": "void updateFeatures(@NonNull FeatureCollection featureCollection)", "full_signature": "@Override public void updateFeatures(@NonNull FeatureCollection featureCollection)", "class_method_signature": "BoundaryLayer.updateFeatures(@NonNull FeatureCollection featureCollection)", "testcase": false, "constructor": false}, {"identifier": "getFeatureCollection", "parameters": "()", "modifiers": "@Override public", "return": "FeatureCollection", "signature": "FeatureCollection getFeatureCollection()", "full_signature": "@Override public FeatureCollection getFeatureCollection()", "class_method_signature": "BoundaryLayer.getFeatureCollection()", "testcase": false, "constructor": false}], "file": "library/src/main/java/io/ona/kujaku/layers/BoundaryLayer.java"}, "focal_method": {"identifier": "removeLayerOnMap", "parameters": "(@NonNull MapboxMap mapboxMap)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean removeLayerOnMap(@NonNull MapboxMap mapboxMap) {\n        setRemoved(true);\n\n        // Remove the layers & sources\n        Style style = mapboxMap.getStyle();\n        if (style != null && style.isFullyLoaded()) {\n            removeLayers(style) ;\n            removeSources(style);\n\n            return true;\n        } else {\n            Log.e(TAG, \"Could not remove the layers & source because the the style is null or not fully loaded\");\n            return false;\n        }\n    }", "signature": "boolean removeLayerOnMap(@NonNull MapboxMap mapboxMap)", "full_signature": "@Override public boolean removeLayerOnMap(@NonNull MapboxMap mapboxMap)", "class_method_signature": "BoundaryLayer.removeLayerOnMap(@NonNull MapboxMap mapboxMap)", "testcase": false, "constructor": false, "invocations": ["setRemoved", "getStyle", "isFullyLoaded", "removeLayers", "removeSources", "e"]}, "repository": {"repo_id": 109667968, "url": "https://github.com/onaio/kujaku", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 4778, "license": "licensed"}}