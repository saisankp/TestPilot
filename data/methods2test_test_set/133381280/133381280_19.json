{"test_class": {"identifier": "LookoutSpringBootMetricsImplTest", "superclass": "extends AbstractTestBase", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private LookoutSpringBootMetricsImpl lookoutSpringBootMetrics;", "modifier": "@Autowired\n    private", "type": "LookoutSpringBootMetricsImpl", "declarator": "lookoutSpringBootMetrics", "var_name": "lookoutSpringBootMetrics"}, {"original_string": "@Autowired\n    private CounterService               counterService;", "modifier": "@Autowired\n    private", "type": "CounterService", "declarator": "counterService", "var_name": "counterService"}, {"original_string": "@Autowired\n    private GaugeService                 gaugeService;", "modifier": "@Autowired\n    private", "type": "GaugeService", "declarator": "gaugeService", "var_name": "gaugeService"}, {"original_string": "@Autowired\n    private LookoutRegistryMetricReader  lookoutRegistryMetricReader;", "modifier": "@Autowired\n    private", "type": "LookoutRegistryMetricReader", "declarator": "lookoutRegistryMetricReader", "var_name": "lookoutRegistryMetricReader"}], "file": "client/lookout-sofa-boot-starter/src/test/java/com/alipay/lookout/starter/support/actuator/LookoutSpringBootMetricsImplTest.java"}, "test_case": {"identifier": "testSubmit", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSubmit() throws Exception {\n        String gaugeName = \"gaugeName\";\n        double value = 10;\n        this.gaugeService.submit(gaugeName, value);\n        //get\n        gaugeName = LookoutSpringBootMetricsImpl.LOOKOUT_GAUGE_PREFIX + gaugeName;\n        Metric metric = this.lookoutRegistryMetricReader.findOne(gaugeName);\n        assertEquals(value, metric.getValue());\n    }", "signature": "void testSubmit()", "full_signature": "@Test public void testSubmit()", "class_method_signature": "LookoutSpringBootMetricsImplTest.testSubmit()", "testcase": true, "constructor": false, "invocations": ["submit", "findOne", "assertEquals", "getValue"]}, "focal_class": {"identifier": "LookoutSpringBootMetricsImpl", "superclass": "", "interfaces": "implements CounterService, GaugeService", "fields": [{"original_string": "public static final String                              LOOKOUT_COUNTER_PREFIX = \"counter.\";", "modifier": "public static final", "type": "String", "declarator": "LOOKOUT_COUNTER_PREFIX = \"counter.\"", "var_name": "LOOKOUT_COUNTER_PREFIX"}, {"original_string": "public static final String                              LOOKOUT_GAUGE_PREFIX   = \"gauge.\";", "modifier": "public static final", "type": "String", "declarator": "LOOKOUT_GAUGE_PREFIX   = \"gauge.\"", "var_name": "LOOKOUT_GAUGE_PREFIX"}, {"original_string": "private final Registry                                  registry;", "modifier": "private final", "type": "Registry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private final ConcurrentMap<String, SimpleLookoutGauge> gauges                 = new ConcurrentHashMap<String, SimpleLookoutGauge>();", "modifier": "private final", "type": "ConcurrentMap<String, SimpleLookoutGauge>", "declarator": "gauges                 = new ConcurrentHashMap<String, SimpleLookoutGauge>()", "var_name": "gauges"}], "methods": [{"identifier": "LookoutSpringBootMetricsImpl", "parameters": "(Registry registry)", "modifiers": "public", "return": "", "signature": " LookoutSpringBootMetricsImpl(Registry registry)", "full_signature": "public  LookoutSpringBootMetricsImpl(Registry registry)", "class_method_signature": "LookoutSpringBootMetricsImpl.LookoutSpringBootMetricsImpl(Registry registry)", "testcase": false, "constructor": true}, {"identifier": "increment", "parameters": "(String metricName)", "modifiers": "@Override public", "return": "void", "signature": "void increment(String metricName)", "full_signature": "@Override public void increment(String metricName)", "class_method_signature": "LookoutSpringBootMetricsImpl.increment(String metricName)", "testcase": false, "constructor": false}, {"identifier": "decrement", "parameters": "(String metricName)", "modifiers": "@Override public", "return": "void", "signature": "void decrement(String metricName)", "full_signature": "@Override public void decrement(String metricName)", "class_method_signature": "LookoutSpringBootMetricsImpl.decrement(String metricName)", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "(String metricName)", "modifiers": "@Override public", "return": "void", "signature": "void reset(String metricName)", "full_signature": "@Override public void reset(String metricName)", "class_method_signature": "LookoutSpringBootMetricsImpl.reset(String metricName)", "testcase": false, "constructor": false}, {"identifier": "submit", "parameters": "(String metricName, double value)", "modifiers": "@Override public", "return": "void", "signature": "void submit(String metricName, double value)", "full_signature": "@Override public void submit(String metricName, double value)", "class_method_signature": "LookoutSpringBootMetricsImpl.submit(String metricName, double value)", "testcase": false, "constructor": false}, {"identifier": "wrapName", "parameters": "(String prefix, String metricName)", "modifiers": "private", "return": "String", "signature": "String wrapName(String prefix, String metricName)", "full_signature": "private String wrapName(String prefix, String metricName)", "class_method_signature": "LookoutSpringBootMetricsImpl.wrapName(String prefix, String metricName)", "testcase": false, "constructor": false}], "file": "client/lookout-sofa-boot-starter/src/main/java/com/alipay/lookout/starter/support/actuator/LookoutSpringBootMetricsImpl.java"}, "focal_method": {"identifier": "submit", "parameters": "(String metricName, double value)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void submit(String metricName, double value) {\n        if (StringUtils.isBlank(metricName)) {\n            return;\n        }\n        metricName = wrapName(LOOKOUT_GAUGE_PREFIX, metricName);\n        SimpleLookoutGauge gauge = this.gauges.get(metricName);\n        if (gauge == null) {\n            SimpleLookoutGauge newGauge = new SimpleLookoutGauge(value);\n            gauge = this.gauges.putIfAbsent(metricName, newGauge);\n            if (gauge == null) {\n                Id id = this.registry.createId(metricName);\n                this.registry.gauge(id, newGauge);\n                return;\n            }\n        }\n        gauge.setValue(value);\n    }", "signature": "void submit(String metricName, double value)", "full_signature": "@Override public void submit(String metricName, double value)", "class_method_signature": "LookoutSpringBootMetricsImpl.submit(String metricName, double value)", "testcase": false, "constructor": false, "invocations": ["isBlank", "wrapName", "get", "putIfAbsent", "createId", "gauge", "setValue"]}, "repository": {"repo_id": 133381280, "url": "https://github.com/sofastack/sofa-lookout", "language": "Java", "is_fork": false, "fork_count": 113, "stargazer_count": 318, "size": 1394, "license": "licensed"}}