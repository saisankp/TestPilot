{"test_class": {"identifier": "GeometryBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double EPS = 1.0e-8;", "modifier": "private static final", "type": "double", "declarator": "EPS = 1.0e-8", "var_name": "EPS"}, {"original_string": "private static final Envelope RECT_ENV = new Envelope(-1.2, 3.4, -5.6, 7.8);", "modifier": "private static final", "type": "Envelope", "declarator": "RECT_ENV = new Envelope(-1.2, 3.4, -5.6, 7.8)", "var_name": "RECT_ENV"}, {"original_string": "private static final Envelope SQUARE_ENV = new Envelope(-1.2, 1.2, -1.2, 1.2);", "modifier": "private static final", "type": "Envelope", "declarator": "SQUARE_ENV = new Envelope(-1.2, 1.2, -1.2, 1.2)", "var_name": "SQUARE_ENV"}, {"original_string": "private static final GeometryBuilder builder = new GeometryBuilder();", "modifier": "private static final", "type": "GeometryBuilder", "declarator": "builder = new GeometryBuilder()", "var_name": "builder"}], "file": "modules/library/main/src/test/java/org/geotools/geometry/jts/GeometryBuilderTest.java"}, "test_case": {"identifier": "ellipse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void ellipse() throws Exception {\n        Polygon p = builder.ellipse(\n                RECT_ENV.getMinX(),\n                RECT_ENV.getMinY(),\n                RECT_ENV.getMaxX(),\n                RECT_ENV.getMaxY(),\n                getNumSides(RECT_ENV));\n        \n        assertBounds(RECT_ENV, p.getEnvelopeInternal(), 0.01);\n    }", "signature": "void ellipse()", "full_signature": "@Test public void ellipse()", "class_method_signature": "GeometryBuilderTest.ellipse()", "testcase": true, "constructor": false, "invocations": ["ellipse", "getMinX", "getMinY", "getMaxX", "getMaxY", "getNumSides", "assertBounds", "getEnvelopeInternal"]}, "focal_class": {"identifier": "GeometryBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GeometryFactory geomFact;", "modifier": "private", "type": "GeometryFactory", "declarator": "geomFact", "var_name": "geomFact"}, {"original_string": "private CoordinateSequenceFactory csFact;", "modifier": "private", "type": "CoordinateSequenceFactory", "declarator": "csFact", "var_name": "csFact"}], "methods": [{"identifier": "GeometryBuilder", "parameters": "()", "modifiers": "public", "return": "", "signature": " GeometryBuilder()", "full_signature": "public  GeometryBuilder()", "class_method_signature": "GeometryBuilder.GeometryBuilder()", "testcase": false, "constructor": true}, {"identifier": "GeometryBuilder", "parameters": "(GeometryFactory geomFact)", "modifiers": "public", "return": "", "signature": " GeometryBuilder(GeometryFactory geomFact)", "full_signature": "public  GeometryBuilder(GeometryFactory geomFact)", "class_method_signature": "GeometryBuilder.GeometryBuilder(GeometryFactory geomFact)", "testcase": false, "constructor": true}, {"identifier": "point", "parameters": "()", "modifiers": "public", "return": "Point", "signature": "Point point()", "full_signature": "public Point point()", "class_method_signature": "GeometryBuilder.point()", "testcase": false, "constructor": false}, {"identifier": "pointZ", "parameters": "()", "modifiers": "public", "return": "Point", "signature": "Point pointZ()", "full_signature": "public Point pointZ()", "class_method_signature": "GeometryBuilder.pointZ()", "testcase": false, "constructor": false}, {"identifier": "point", "parameters": "(double x)", "modifiers": "public", "return": "Point", "signature": "Point point(double x)", "full_signature": "public Point point(double x)", "class_method_signature": "GeometryBuilder.point(double x)", "testcase": false, "constructor": false}, {"identifier": "point", "parameters": "(double x, double y)", "modifiers": "public", "return": "Point", "signature": "Point point(double x, double y)", "full_signature": "public Point point(double x, double y)", "class_method_signature": "GeometryBuilder.point(double x, double y)", "testcase": false, "constructor": false}, {"identifier": "pointZ", "parameters": "(double x, double y, double z)", "modifiers": "public", "return": "Point", "signature": "Point pointZ(double x, double y, double z)", "full_signature": "public Point pointZ(double x, double y, double z)", "class_method_signature": "GeometryBuilder.pointZ(double x, double y, double z)", "testcase": false, "constructor": false}, {"identifier": "lineString", "parameters": "()", "modifiers": "public", "return": "LineString", "signature": "LineString lineString()", "full_signature": "public LineString lineString()", "class_method_signature": "GeometryBuilder.lineString()", "testcase": false, "constructor": false}, {"identifier": "lineStringZ", "parameters": "()", "modifiers": "public", "return": "LineString", "signature": "LineString lineStringZ()", "full_signature": "public LineString lineStringZ()", "class_method_signature": "GeometryBuilder.lineStringZ()", "testcase": false, "constructor": false}, {"identifier": "lineString", "parameters": "(double... ord)", "modifiers": "public", "return": "LineString", "signature": "LineString lineString(double... ord)", "full_signature": "public LineString lineString(double... ord)", "class_method_signature": "GeometryBuilder.lineString(double... ord)", "testcase": false, "constructor": false}, {"identifier": "lineStringZ", "parameters": "(double... ord)", "modifiers": "public", "return": "LineString", "signature": "LineString lineStringZ(double... ord)", "full_signature": "public LineString lineStringZ(double... ord)", "class_method_signature": "GeometryBuilder.lineStringZ(double... ord)", "testcase": false, "constructor": false}, {"identifier": "linearRing", "parameters": "()", "modifiers": "public", "return": "LinearRing", "signature": "LinearRing linearRing()", "full_signature": "public LinearRing linearRing()", "class_method_signature": "GeometryBuilder.linearRing()", "testcase": false, "constructor": false}, {"identifier": "linearRingZ", "parameters": "()", "modifiers": "public", "return": "LinearRing", "signature": "LinearRing linearRingZ()", "full_signature": "public LinearRing linearRingZ()", "class_method_signature": "GeometryBuilder.linearRingZ()", "testcase": false, "constructor": false}, {"identifier": "linearRing", "parameters": "(double... ord)", "modifiers": "public", "return": "LinearRing", "signature": "LinearRing linearRing(double... ord)", "full_signature": "public LinearRing linearRing(double... ord)", "class_method_signature": "GeometryBuilder.linearRing(double... ord)", "testcase": false, "constructor": false}, {"identifier": "linearRingZ", "parameters": "(double... ord)", "modifiers": "public", "return": "LinearRing", "signature": "LinearRing linearRingZ(double... ord)", "full_signature": "public LinearRing linearRingZ(double... ord)", "class_method_signature": "GeometryBuilder.linearRingZ(double... ord)", "testcase": false, "constructor": false}, {"identifier": "polygon", "parameters": "()", "modifiers": "public", "return": "Polygon", "signature": "Polygon polygon()", "full_signature": "public Polygon polygon()", "class_method_signature": "GeometryBuilder.polygon()", "testcase": false, "constructor": false}, {"identifier": "polygonZ", "parameters": "()", "modifiers": "public", "return": "Polygon", "signature": "Polygon polygonZ()", "full_signature": "public Polygon polygonZ()", "class_method_signature": "GeometryBuilder.polygonZ()", "testcase": false, "constructor": false}, {"identifier": "polygon", "parameters": "(double... ord)", "modifiers": "public", "return": "Polygon", "signature": "Polygon polygon(double... ord)", "full_signature": "public Polygon polygon(double... ord)", "class_method_signature": "GeometryBuilder.polygon(double... ord)", "testcase": false, "constructor": false}, {"identifier": "polygonZ", "parameters": "(double... ord)", "modifiers": "public", "return": "Polygon", "signature": "Polygon polygonZ(double... ord)", "full_signature": "public Polygon polygonZ(double... ord)", "class_method_signature": "GeometryBuilder.polygonZ(double... ord)", "testcase": false, "constructor": false}, {"identifier": "polygon", "parameters": "(LinearRing shell)", "modifiers": "public", "return": "Polygon", "signature": "Polygon polygon(LinearRing shell)", "full_signature": "public Polygon polygon(LinearRing shell)", "class_method_signature": "GeometryBuilder.polygon(LinearRing shell)", "testcase": false, "constructor": false}, {"identifier": "polygon", "parameters": "(LinearRing shell, LinearRing hole)", "modifiers": "public", "return": "Polygon", "signature": "Polygon polygon(LinearRing shell, LinearRing hole)", "full_signature": "public Polygon polygon(LinearRing shell, LinearRing hole)", "class_method_signature": "GeometryBuilder.polygon(LinearRing shell, LinearRing hole)", "testcase": false, "constructor": false}, {"identifier": "polygon", "parameters": "(Polygon shell, Polygon hole)", "modifiers": "public", "return": "Polygon", "signature": "Polygon polygon(Polygon shell, Polygon hole)", "full_signature": "public Polygon polygon(Polygon shell, Polygon hole)", "class_method_signature": "GeometryBuilder.polygon(Polygon shell, Polygon hole)", "testcase": false, "constructor": false}, {"identifier": "box", "parameters": "(double x1, double y1, double x2, double y2)", "modifiers": "public", "return": "Polygon", "signature": "Polygon box(double x1, double y1, double x2, double y2)", "full_signature": "public Polygon box(double x1, double y1, double x2, double y2)", "class_method_signature": "GeometryBuilder.box(double x1, double y1, double x2, double y2)", "testcase": false, "constructor": false}, {"identifier": "boxZ", "parameters": "(double x1, double y1, double x2, double y2, double z)", "modifiers": "public", "return": "Polygon", "signature": "Polygon boxZ(double x1, double y1, double x2, double y2, double z)", "full_signature": "public Polygon boxZ(double x1, double y1, double x2, double y2, double z)", "class_method_signature": "GeometryBuilder.boxZ(double x1, double y1, double x2, double y2, double z)", "testcase": false, "constructor": false}, {"identifier": "ellipse", "parameters": "(double x1, double y1, double x2, double y2, int nsides)", "modifiers": "public", "return": "Polygon", "signature": "Polygon ellipse(double x1, double y1, double x2, double y2, int nsides)", "full_signature": "public Polygon ellipse(double x1, double y1, double x2, double y2, int nsides)", "class_method_signature": "GeometryBuilder.ellipse(double x1, double y1, double x2, double y2, int nsides)", "testcase": false, "constructor": false}, {"identifier": "circle", "parameters": "(double x, double y, double radius, int nsides)", "modifiers": "public", "return": "Polygon", "signature": "Polygon circle(double x, double y, double radius, int nsides)", "full_signature": "public Polygon circle(double x, double y, double radius, int nsides)", "class_method_signature": "GeometryBuilder.circle(double x, double y, double radius, int nsides)", "testcase": false, "constructor": false}, {"identifier": "multiPoint", "parameters": "(double x1, double y1, double x2, double y2)", "modifiers": "public", "return": "MultiPoint", "signature": "MultiPoint multiPoint(double x1, double y1, double x2, double y2)", "full_signature": "public MultiPoint multiPoint(double x1, double y1, double x2, double y2)", "class_method_signature": "GeometryBuilder.multiPoint(double x1, double y1, double x2, double y2)", "testcase": false, "constructor": false}, {"identifier": "multiPointZ", "parameters": "(double x1, double y1, double z1, double x2,\n            double y2, double z2)", "modifiers": "public", "return": "MultiPoint", "signature": "MultiPoint multiPointZ(double x1, double y1, double z1, double x2,\n            double y2, double z2)", "full_signature": "public MultiPoint multiPointZ(double x1, double y1, double z1, double x2,\n            double y2, double z2)", "class_method_signature": "GeometryBuilder.multiPointZ(double x1, double y1, double z1, double x2,\n            double y2, double z2)", "testcase": false, "constructor": false}, {"identifier": "multiLineString", "parameters": "(LineString... lines)", "modifiers": "public", "return": "MultiLineString", "signature": "MultiLineString multiLineString(LineString... lines)", "full_signature": "public MultiLineString multiLineString(LineString... lines)", "class_method_signature": "GeometryBuilder.multiLineString(LineString... lines)", "testcase": false, "constructor": false}, {"identifier": "multiPolygon", "parameters": "(Polygon... polys)", "modifiers": "public", "return": "MultiPolygon", "signature": "MultiPolygon multiPolygon(Polygon... polys)", "full_signature": "public MultiPolygon multiPolygon(Polygon... polys)", "class_method_signature": "GeometryBuilder.multiPolygon(Polygon... polys)", "testcase": false, "constructor": false}, {"identifier": "geometryCollection", "parameters": "(Geometry... geoms)", "modifiers": "public", "return": "GeometryCollection", "signature": "GeometryCollection geometryCollection(Geometry... geoms)", "full_signature": "public GeometryCollection geometryCollection(Geometry... geoms)", "class_method_signature": "GeometryBuilder.geometryCollection(Geometry... geoms)", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "(double[] ord, int dim)", "modifiers": "private", "return": "boolean", "signature": "boolean isClosed(double[] ord, int dim)", "full_signature": "private boolean isClosed(double[] ord, int dim)", "class_method_signature": "GeometryBuilder.isClosed(double[] ord, int dim)", "testcase": false, "constructor": false}, {"identifier": "createRingCS", "parameters": "(double[] ord, int dim)", "modifiers": "private", "return": "CoordinateSequence", "signature": "CoordinateSequence createRingCS(double[] ord, int dim)", "full_signature": "private CoordinateSequence createRingCS(double[] ord, int dim)", "class_method_signature": "GeometryBuilder.createRingCS(double[] ord, int dim)", "testcase": false, "constructor": false}, {"identifier": "createCS", "parameters": "(double[] ord, int dim)", "modifiers": "private", "return": "CoordinateSequence", "signature": "CoordinateSequence createCS(double[] ord, int dim)", "full_signature": "private CoordinateSequence createCS(double[] ord, int dim)", "class_method_signature": "GeometryBuilder.createCS(double[] ord, int dim)", "testcase": false, "constructor": false}], "file": "modules/library/main/src/main/java/org/geotools/geometry/jts/GeometryBuilder.java"}, "focal_method": {"identifier": "ellipse", "parameters": "(double x1, double y1, double x2, double y2, int nsides)", "modifiers": "public", "return": "Polygon", "body": "public Polygon ellipse(double x1, double y1, double x2, double y2, int nsides) {\n        double rx = Math.abs(x2 - x1) / 2;\n        double ry = Math.abs(y2 - y1) / 2;\n        double cx = Math.min(x1, x2) + rx;\n        double cy = Math.min(y1, y2) + ry;\n    \n        double[] ord = new double[2 * nsides + 2];\n        double angInc = 2 * Math.PI / nsides;\n        // create ring in CW order\n        for (int i = 0; i < nsides; i++) {\n            double ang = -(i * angInc);\n            ord[2 * i] = cx + rx * Math.cos(ang);\n            ord[2 * i + 1] = cy + ry * Math.sin(ang);\n        }\n        ord[2 * nsides] = ord[0];\n        ord[2 * nsides + 1] = ord[1];\n        return polygon(ord);\n    }", "signature": "Polygon ellipse(double x1, double y1, double x2, double y2, int nsides)", "full_signature": "public Polygon ellipse(double x1, double y1, double x2, double y2, int nsides)", "class_method_signature": "GeometryBuilder.ellipse(double x1, double y1, double x2, double y2, int nsides)", "testcase": false, "constructor": false, "invocations": ["abs", "abs", "min", "min", "cos", "sin", "polygon"]}, "repository": {"repo_id": 40735368, "url": "https://github.com/FUNCATE/geotools-android", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 8, "size": 63952, "license": "licensed"}}