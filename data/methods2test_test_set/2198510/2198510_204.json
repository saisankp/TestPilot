{"test_class": {"identifier": "TestTimestampInterceptor", "superclass": "", "interfaces": "", "fields": [], "file": "flume-ng-core/src/test/java/org/apache/flume/interceptor/TestTimestampInterceptor.java"}, "test_case": {"identifier": "testCustomHeader", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCustomHeader() throws Exception {\n    Context ctx = new Context();\n    ctx.put(TimestampInterceptor.Constants.CONFIG_HEADER_NAME, \"timestampHeader\");\n    Interceptor.Builder builder = InterceptorBuilderFactory.newInstance(\n            InterceptorType.TIMESTAMP.toString());\n    builder.configure(ctx);\n    Interceptor interceptor = builder.build();\n\n    long originalTs = 1L;\n    Event event = EventBuilder.withBody(\"test event\", Charsets.UTF_8);\n    event.getHeaders().put(Constants.DEFAULT_HEADER_NAME, Long.toString(originalTs));\n\n    Long now = System.currentTimeMillis();\n    event = interceptor.intercept(event);\n    Assert.assertEquals(Long.toString(originalTs),\n            event.getHeaders().get(Constants.DEFAULT_HEADER_NAME));\n    String timestampStr = event.getHeaders().get(\"timestampHeader\");\n    Assert.assertNotNull(timestampStr);\n    Assert.assertTrue(Long.parseLong(timestampStr) >= now);\n  }", "signature": "void testCustomHeader()", "full_signature": "@Test public void testCustomHeader()", "class_method_signature": "TestTimestampInterceptor.testCustomHeader()", "testcase": true, "constructor": false, "invocations": ["put", "newInstance", "toString", "configure", "build", "withBody", "put", "getHeaders", "toString", "currentTimeMillis", "intercept", "assertEquals", "toString", "get", "getHeaders", "get", "getHeaders", "assertNotNull", "assertTrue", "parseLong"]}, "focal_class": {"identifier": "TimestampInterceptor", "superclass": "", "interfaces": "implements Interceptor", "fields": [{"original_string": "private final boolean preserveExisting;", "modifier": "private final", "type": "boolean", "declarator": "preserveExisting", "var_name": "preserveExisting"}, {"original_string": "private final String header;", "modifier": "private final", "type": "String", "declarator": "header", "var_name": "header"}], "methods": [{"identifier": "TimestampInterceptor", "parameters": "(boolean preserveExisting, String header)", "modifiers": "private", "return": "", "signature": " TimestampInterceptor(boolean preserveExisting, String header)", "full_signature": "private  TimestampInterceptor(boolean preserveExisting, String header)", "class_method_signature": "TimestampInterceptor.TimestampInterceptor(boolean preserveExisting, String header)", "testcase": false, "constructor": true}, {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "TimestampInterceptor.initialize()", "testcase": false, "constructor": false}, {"identifier": "intercept", "parameters": "(Event event)", "modifiers": "@Override public", "return": "Event", "signature": "Event intercept(Event event)", "full_signature": "@Override public Event intercept(Event event)", "class_method_signature": "TimestampInterceptor.intercept(Event event)", "testcase": false, "constructor": false}, {"identifier": "intercept", "parameters": "(List<Event> events)", "modifiers": "@Override public", "return": "List<Event>", "signature": "List<Event> intercept(List<Event> events)", "full_signature": "@Override public List<Event> intercept(List<Event> events)", "class_method_signature": "TimestampInterceptor.intercept(List<Event> events)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "TimestampInterceptor.close()", "testcase": false, "constructor": false}], "file": "flume-ng-core/src/main/java/org/apache/flume/interceptor/TimestampInterceptor.java"}, "focal_method": {"identifier": "intercept", "parameters": "(Event event)", "modifiers": "@Override public", "return": "Event", "body": "@Override\n  public Event intercept(Event event) {\n    Map<String, String> headers = event.getHeaders();\n    if (preserveExisting && headers.containsKey(header)) {\n      // we must preserve the existing timestamp\n    } else {\n      long now = System.currentTimeMillis();\n      headers.put(header, Long.toString(now));\n    }\n    return event;\n  }", "signature": "Event intercept(Event event)", "full_signature": "@Override public Event intercept(Event event)", "class_method_signature": "TimestampInterceptor.intercept(Event event)", "testcase": false, "constructor": false, "invocations": ["getHeaders", "containsKey", "currentTimeMillis", "put", "toString"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}