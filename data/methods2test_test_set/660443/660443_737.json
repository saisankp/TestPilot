{"test_class": {"identifier": "IPAtomicLearningDescriptorTest", "superclass": "extends AtomicDescriptorTest", "interfaces": "", "fields": [{"original_string": "IPAtomicLearningDescriptor      descriptor;", "modifier": "", "type": "IPAtomicLearningDescriptor", "declarator": "descriptor", "var_name": "descriptor"}, {"original_string": "private SmilesParser            sp      = new SmilesParser(DefaultChemObjectBuilder.getInstance());", "modifier": "private", "type": "SmilesParser", "declarator": "sp      = new SmilesParser(DefaultChemObjectBuilder.getInstance())", "var_name": "sp"}, {"original_string": "private IChemObjectBuilder      builder = SilentChemObjectBuilder.getInstance();", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}, {"original_string": "private LonePairElectronChecker lpcheck = new LonePairElectronChecker();", "modifier": "private", "type": "LonePairElectronChecker", "declarator": "lpcheck = new LonePairElectronChecker()", "var_name": "lpcheck"}], "file": "legacy/src/test/java/org/openscience/cdk/qsar/descriptors/atomic/IPAtomicLearningDescriptorTest.java"}, "test_case": {"identifier": "testIPPySystemWithHeteroatomDescriptor1", "parameters": "()", "modifiers": "@Test @Category(SlowTest.class) public", "return": "void", "body": "@Test\n    @Category(SlowTest.class)\n    public void testIPPySystemWithHeteroatomDescriptor1() throws Exception {\n\n        SmilesParser sp = new SmilesParser(DefaultChemObjectBuilder.getInstance());\n        IAtomContainer mol = sp.parseSmiles(\"C1=C(C)CCS1\");\n        AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(mol);\n        addExplicitHydrogens(mol);\n        lpcheck.saturate(mol);\n\n        double result = ((DoubleResult) descriptor.calculate(mol.getAtom(5), mol).getValue()).doubleValue();\n        double resultAccordingNIST = 7.77;\n        Assert.assertEquals(resultAccordingNIST, result, 0.7);\n\n        //        IReactionSet reactionSet = descriptor.getReactionSet();\n        //\t\tassertEquals(3, reactionSet.getReactionCount());\n\n    }", "signature": "void testIPPySystemWithHeteroatomDescriptor1()", "full_signature": "@Test @Category(SlowTest.class) public void testIPPySystemWithHeteroatomDescriptor1()", "class_method_signature": "IPAtomicLearningDescriptorTest.testIPPySystemWithHeteroatomDescriptor1()", "testcase": true, "constructor": false, "invocations": ["getInstance", "parseSmiles", "percieveAtomTypesAndConfigureAtoms", "addExplicitHydrogens", "saturate", "doubleValue", "getValue", "calculate", "getAtom", "assertEquals"]}, "focal_class": {"identifier": "IPAtomicLearningDescriptor", "superclass": "extends AbstractAtomicDescriptor", "interfaces": "", "fields": [{"original_string": "private static final String[] DESCRIPTOR_NAMES = {\"ipAtomicLearning\"};", "modifier": "private static final", "type": "String[]", "declarator": "DESCRIPTOR_NAMES = {\"ipAtomicLearning\"}", "var_name": "DESCRIPTOR_NAMES"}], "methods": [{"identifier": "IPAtomicLearningDescriptor", "parameters": "()", "modifiers": "public", "return": "", "signature": " IPAtomicLearningDescriptor()", "full_signature": "public  IPAtomicLearningDescriptor()", "class_method_signature": "IPAtomicLearningDescriptor.IPAtomicLearningDescriptor()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "DescriptorSpecification", "signature": "DescriptorSpecification getSpecification()", "full_signature": "@Override public DescriptorSpecification getSpecification()", "class_method_signature": "IPAtomicLearningDescriptor.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "IPAtomicLearningDescriptor.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "IPAtomicLearningDescriptor.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getDescriptorNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getDescriptorNames()", "full_signature": "@Override public String[] getDescriptorNames()", "class_method_signature": "IPAtomicLearningDescriptor.getDescriptorNames()", "testcase": false, "constructor": false}, {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer container)", "class_method_signature": "IPAtomicLearningDescriptor.calculate(IAtom atom, IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getParameterNames", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getParameterNames()", "full_signature": "@Override public String[] getParameterNames()", "class_method_signature": "IPAtomicLearningDescriptor.getParameterNames()", "testcase": false, "constructor": false}, {"identifier": "getParameterType", "parameters": "(String name)", "modifiers": "@Override public", "return": "Object", "signature": "Object getParameterType(String name)", "full_signature": "@Override public Object getParameterType(String name)", "class_method_signature": "IPAtomicLearningDescriptor.getParameterType(String name)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/org/openscience/cdk/qsar/descriptors/atomic/IPAtomicLearningDescriptor.java"}, "focal_method": {"identifier": "calculate", "parameters": "(IAtom atom, IAtomContainer container)", "modifiers": "@Override public", "return": "DescriptorValue", "body": "@Override\n    public DescriptorValue calculate(IAtom atom, IAtomContainer container) {\n        double value = 0;\n        // FIXME: for now I'll cache a few modified atomic properties, and restore them at the end of this method\n        String originalAtomtypeName = atom.getAtomTypeName();\n        Integer originalNeighborCount = atom.getFormalNeighbourCount();\n        Integer originalValency = atom.getValency();\n        IAtomType.Hybridization originalHybrid = atom.getHybridization();\n        Double originalBondOrderSum = atom.getBondOrderSum();\n        Order originalMaxBondOrder = atom.getMaxBondOrder();\n\n        if (!isCachedAtomContainer(container)) {\n            try {\n                AtomContainerManipulator.percieveAtomTypesAndConfigureAtoms(container);\n\n                LonePairElectronChecker lpcheck = new LonePairElectronChecker();\n                lpcheck.saturate(container);\n            } catch (CDKException e) {\n                return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                        Double.NaN), getDescriptorNames(), e);\n\n            }\n        }\n\n        try {\n            value = IonizationPotentialTool.predictIP(container, atom);\n        } catch (CDKException e) {\n            return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(\n                    Double.NaN), getDescriptorNames(), e);\n        }\n        // restore original props\n        atom.setAtomTypeName(originalAtomtypeName);\n        atom.setFormalNeighbourCount(originalNeighborCount);\n        atom.setValency(originalValency);\n        atom.setHybridization(originalHybrid);\n        atom.setMaxBondOrder(originalMaxBondOrder);\n        atom.setBondOrderSum(originalBondOrderSum);\n\n        return new DescriptorValue(getSpecification(), getParameterNames(), getParameters(), new DoubleResult(value),\n                getDescriptorNames());\n\n    }", "signature": "DescriptorValue calculate(IAtom atom, IAtomContainer container)", "full_signature": "@Override public DescriptorValue calculate(IAtom atom, IAtomContainer container)", "class_method_signature": "IPAtomicLearningDescriptor.calculate(IAtom atom, IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["getAtomTypeName", "getFormalNeighbourCount", "getValency", "getHybridization", "getBondOrderSum", "getMaxBondOrder", "isCachedAtomContainer", "percieveAtomTypesAndConfigureAtoms", "saturate", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames", "predictIP", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames", "setAtomTypeName", "setFormalNeighbourCount", "setValency", "setHybridization", "setMaxBondOrder", "setBondOrderSum", "getSpecification", "getParameterNames", "getParameters", "getDescriptorNames"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}