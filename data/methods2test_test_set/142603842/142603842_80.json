{"test_class": {"identifier": "PortableRoutingPlanFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "optaweb-vehicle-routing-backend/src/test/java/org/optaweb/vehiclerouting/plugin/websocket/PortableRoutingPlanFactoryTest.java"}, "test_case": {"identifier": "portable_routing_plan_with_two_routes", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void portable_routing_plan_with_two_routes() {\n        // arrange\n        final Coordinates coordinates1 = Coordinates.valueOf(0.0, 0.1);\n        final Coordinates coordinates2 = Coordinates.valueOf(2.0, -0.2);\n        final Coordinates coordinates3 = Coordinates.valueOf(3.3, -3.3);\n        final Coordinates checkpoint12 = Coordinates.valueOf(12, 12);\n        final Coordinates checkpoint21 = Coordinates.valueOf(21, 21);\n        final Coordinates checkpoint13 = Coordinates.valueOf(13, 13);\n        final Coordinates checkpoint31 = Coordinates.valueOf(31, 31);\n        List<Coordinates> segment12 = asList(coordinates1, checkpoint12, coordinates2);\n        List<Coordinates> segment21 = asList(coordinates2, checkpoint21, coordinates1);\n        List<Coordinates> segment13 = asList(coordinates1, checkpoint13, coordinates3);\n        List<Coordinates> segment31 = asList(coordinates3, checkpoint31, coordinates1);\n\n        final Location location1 = new Location(1, coordinates1);\n        final Location location2 = new Location(2, coordinates2);\n        final Location location3 = new Location(3, coordinates3);\n        final Distance distance = Distance.ofMillis(5);\n\n        final Vehicle vehicle1 = VehicleFactory.createVehicle(1, \"Vehicle 1\", 100);\n        final Vehicle vehicle2 = VehicleFactory.createVehicle(2, \"Vehicle 2\", 200);\n\n        RouteWithTrack route1 = new RouteWithTrack(\n                new Route(vehicle1, location1, singletonList(location2)),\n                asList(segment12, segment21));\n        RouteWithTrack route2 = new RouteWithTrack(\n                new Route(vehicle2, location1, singletonList(location3)),\n                asList(segment13, segment31));\n\n        RoutingPlan routingPlan = new RoutingPlan(\n                distance,\n                asList(vehicle1, vehicle2),\n                location1,\n                asList(location2, location3),\n                asList(route1, route2));\n\n        // act\n        PortableRoutingPlan portableRoutingPlan = PortableRoutingPlanFactory.fromRoutingPlan(routingPlan);\n\n        // assert\n        // -- plan.distance\n        assertThat(portableRoutingPlan.getDistance()).isEqualTo(PortableDistance.fromDistance(distance));\n        // -- plan.depot\n        assertThat(portableRoutingPlan.getDepot()).isEqualTo(PortableLocation.fromLocation(location1));\n        // -- plan.visits\n        assertThat(portableRoutingPlan.getVisits()).containsExactlyInAnyOrder(\n                PortableLocation.fromLocation(location2),\n                PortableLocation.fromLocation(location3));\n        // -- plan.routes\n        assertThat(portableRoutingPlan.getRoutes()).hasSize(2);\n        // -- plan.vehicles\n        assertThat(portableRoutingPlan.getVehicles()).containsExactlyInAnyOrder(\n                PortableVehicle.fromVehicle(vehicle1),\n                PortableVehicle.fromVehicle(vehicle2));\n\n        // -- plan.routes[1]\n        PortableRoute portableRoute1 = portableRoutingPlan.getRoutes().get(0);\n\n        assertThat(portableRoute1.getVehicle()).isEqualTo(PortableVehicle.fromVehicle(vehicle1));\n        assertThat(portableRoute1.getDepot()).isEqualTo(PortableLocation.fromLocation(location1));\n        assertThat(portableRoute1.getVisits()).containsExactly(\n                PortableLocation.fromLocation(location2));\n        assertThat(portableRoute1.getTrack()).hasSize(2);\n        assertThat(portableRoute1.getTrack().get(0)).containsExactly(\n                PortableCoordinates.fromCoordinates(location1.coordinates()),\n                PortableCoordinates.fromCoordinates(checkpoint12),\n                PortableCoordinates.fromCoordinates(location2.coordinates()));\n        assertThat(portableRoute1.getTrack().get(1)).containsExactly(\n                PortableCoordinates.fromCoordinates(location2.coordinates()),\n                PortableCoordinates.fromCoordinates(checkpoint21),\n                PortableCoordinates.fromCoordinates(location1.coordinates()));\n\n        // -- plan.routes[2]\n        PortableRoute portableRoute2 = portableRoutingPlan.getRoutes().get(1);\n\n        assertThat(portableRoute2.getVehicle()).isEqualTo(PortableVehicle.fromVehicle(vehicle2));\n        assertThat(portableRoute2.getDepot()).isEqualTo(PortableLocation.fromLocation(location1));\n        assertThat(portableRoute2.getVisits()).containsExactly(\n                PortableLocation.fromLocation(location3));\n        assertThat(portableRoute2.getTrack()).hasSize(2);\n        assertThat(portableRoute2.getTrack().get(0)).containsExactly(\n                PortableCoordinates.fromCoordinates(location1.coordinates()),\n                PortableCoordinates.fromCoordinates(checkpoint13),\n                PortableCoordinates.fromCoordinates(location3.coordinates()));\n        assertThat(portableRoute2.getTrack().get(1)).containsExactly(\n                PortableCoordinates.fromCoordinates(location3.coordinates()),\n                PortableCoordinates.fromCoordinates(checkpoint31),\n                PortableCoordinates.fromCoordinates(location1.coordinates()));\n    }", "signature": "void portable_routing_plan_with_two_routes()", "full_signature": "@Test void portable_routing_plan_with_two_routes()", "class_method_signature": "PortableRoutingPlanFactoryTest.portable_routing_plan_with_two_routes()", "testcase": true, "constructor": false, "invocations": ["valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "valueOf", "asList", "asList", "asList", "asList", "ofMillis", "createVehicle", "createVehicle", "singletonList", "asList", "singletonList", "asList", "asList", "asList", "asList", "fromRoutingPlan", "isEqualTo", "assertThat", "getDistance", "fromDistance", "isEqualTo", "assertThat", "getDepot", "fromLocation", "containsExactlyInAnyOrder", "assertThat", "getVisits", "fromLocation", "fromLocation", "hasSize", "assertThat", "getRoutes", "containsExactlyInAnyOrder", "assertThat", "getVehicles", "fromVehicle", "fromVehicle", "get", "getRoutes", "isEqualTo", "assertThat", "getVehicle", "fromVehicle", "isEqualTo", "assertThat", "getDepot", "fromLocation", "containsExactly", "assertThat", "getVisits", "fromLocation", "hasSize", "assertThat", "getTrack", "containsExactly", "assertThat", "get", "getTrack", "fromCoordinates", "coordinates", "fromCoordinates", "fromCoordinates", "coordinates", "containsExactly", "assertThat", "get", "getTrack", "fromCoordinates", "coordinates", "fromCoordinates", "fromCoordinates", "coordinates", "get", "getRoutes", "isEqualTo", "assertThat", "getVehicle", "fromVehicle", "isEqualTo", "assertThat", "getDepot", "fromLocation", "containsExactly", "assertThat", "getVisits", "fromLocation", "hasSize", "assertThat", "getTrack", "containsExactly", "assertThat", "get", "getTrack", "fromCoordinates", "coordinates", "fromCoordinates", "fromCoordinates", "coordinates", "containsExactly", "assertThat", "get", "getTrack", "fromCoordinates", "coordinates", "fromCoordinates", "fromCoordinates", "coordinates"]}, "focal_class": {"identifier": "PortableRoutingPlanFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "PortableRoutingPlanFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " PortableRoutingPlanFactory()", "full_signature": "private  PortableRoutingPlanFactory()", "class_method_signature": "PortableRoutingPlanFactory.PortableRoutingPlanFactory()", "testcase": false, "constructor": true}, {"identifier": "fromRoutingPlan", "parameters": "(RoutingPlan routingPlan)", "modifiers": "static", "return": "PortableRoutingPlan", "signature": "PortableRoutingPlan fromRoutingPlan(RoutingPlan routingPlan)", "full_signature": "static PortableRoutingPlan fromRoutingPlan(RoutingPlan routingPlan)", "class_method_signature": "PortableRoutingPlanFactory.fromRoutingPlan(RoutingPlan routingPlan)", "testcase": false, "constructor": false}, {"identifier": "portableTrack", "parameters": "(List<List<Coordinates>> track)", "modifiers": "private static", "return": "List<List<PortableCoordinates>>", "signature": "List<List<PortableCoordinates>> portableTrack(List<List<Coordinates>> track)", "full_signature": "private static List<List<PortableCoordinates>> portableTrack(List<List<Coordinates>> track)", "class_method_signature": "PortableRoutingPlanFactory.portableTrack(List<List<Coordinates>> track)", "testcase": false, "constructor": false}, {"identifier": "portableVisits", "parameters": "(List<Location> visits)", "modifiers": "private static", "return": "List<PortableLocation>", "signature": "List<PortableLocation> portableVisits(List<Location> visits)", "full_signature": "private static List<PortableLocation> portableVisits(List<Location> visits)", "class_method_signature": "PortableRoutingPlanFactory.portableVisits(List<Location> visits)", "testcase": false, "constructor": false}, {"identifier": "portableVehicles", "parameters": "(List<Vehicle> vehicles)", "modifiers": "private static", "return": "List<PortableVehicle>", "signature": "List<PortableVehicle> portableVehicles(List<Vehicle> vehicles)", "full_signature": "private static List<PortableVehicle> portableVehicles(List<Vehicle> vehicles)", "class_method_signature": "PortableRoutingPlanFactory.portableVehicles(List<Vehicle> vehicles)", "testcase": false, "constructor": false}], "file": "optaweb-vehicle-routing-backend/src/main/java/org/optaweb/vehiclerouting/plugin/websocket/PortableRoutingPlanFactory.java"}, "focal_method": {"identifier": "fromRoutingPlan", "parameters": "(RoutingPlan routingPlan)", "modifiers": "static", "return": "PortableRoutingPlan", "body": "static PortableRoutingPlan fromRoutingPlan(RoutingPlan routingPlan) {\n        PortableDistance distance = PortableDistance.fromDistance(routingPlan.distance());\n        List<PortableVehicle> vehicles = portableVehicles(routingPlan.vehicles());\n        PortableLocation depot = routingPlan.depot().map(PortableLocation::fromLocation).orElse(null);\n        List<PortableLocation> visits = portableVisits(routingPlan.visits());\n        List<PortableRoute> routes = routingPlan.routes().stream()\n                .map(routeWithTrack -> new PortableRoute(\n                        PortableVehicle.fromVehicle(routeWithTrack.vehicle()),\n                        depot,\n                        portableVisits(routeWithTrack.visits()),\n                        portableTrack(routeWithTrack.track())))\n                .collect(toList());\n        return new PortableRoutingPlan(distance, vehicles, depot, visits, routes);\n    }", "signature": "PortableRoutingPlan fromRoutingPlan(RoutingPlan routingPlan)", "full_signature": "static PortableRoutingPlan fromRoutingPlan(RoutingPlan routingPlan)", "class_method_signature": "PortableRoutingPlanFactory.fromRoutingPlan(RoutingPlan routingPlan)", "testcase": false, "constructor": false, "invocations": ["fromDistance", "distance", "portableVehicles", "vehicles", "orElse", "map", "depot", "portableVisits", "visits", "collect", "map", "stream", "routes", "fromVehicle", "vehicle", "portableVisits", "visits", "portableTrack", "track", "toList"]}, "repository": {"repo_id": 142603842, "url": "https://github.com/kiegroup/optaweb-vehicle-routing", "stars": 42, "created": "7/27/2018 5:08:08 PM +00:00", "updates": "2020-01-27T22:19:48+00:00", "fork": "False", "license": "licensed"}}