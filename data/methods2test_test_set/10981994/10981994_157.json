{"test_class": {"identifier": "SAXDecoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static String statusFailed = \"\"//\n      + \"<soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\"\n      //\n      + \"  <soap:Body>\\n\"//\n      + \"    <ns1:getNeustarNetworkStatusResponse xmlns:ns1=\\\"http://webservice.api.ultra.neustar.com/v01/\\\">\\n\"\n      //\n      + \"      <NeustarNetworkStatus xmlns:ns2=\\\"http://schema.ultraservice.neustar.com/v01/\\\">Failed</NeustarNetworkStatus>\\n\"\n      //\n      + \"    </ns1:getNeustarNetworkStatusResponse>\\n\"//\n      + \"  </soap:Body>\\n\"//\n      + \"</soap:Envelope>\";", "modifier": "static", "type": "String", "declarator": "statusFailed = \"\"//\n      + \"<soap:Envelope xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n\"\n      //\n      + \"  <soap:Body>\\n\"//\n      + \"    <ns1:getNeustarNetworkStatusResponse xmlns:ns1=\\\"http://webservice.api.ultra.neustar.com/v01/\\\">\\n\"\n      //\n      + \"      <NeustarNetworkStatus xmlns:ns2=\\\"http://schema.ultraservice.neustar.com/v01/\\\">Failed</NeustarNetworkStatus>\\n\"\n      //\n      + \"    </ns1:getNeustarNetworkStatusResponse>\\n\"//\n      + \"  </soap:Body>\\n\"//\n      + \"</soap:Envelope>\"", "var_name": "statusFailed"}, {"original_string": "@Rule\n  public final ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n  public final", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "Decoder decoder = SAXDecoder.builder() //\n      .registerContentHandler(NetworkStatus.class,\n          new SAXDecoder.ContentHandlerWithResult.Factory<NetworkStatus>() {\n            @Override\n            public SAXDecoder.ContentHandlerWithResult<NetworkStatus> create() {\n              return new NetworkStatusHandler();\n            }\n          }) //\n      .registerContentHandler(NetworkStatusStringHandler.class) //\n      .build();", "modifier": "", "type": "Decoder", "declarator": "decoder = SAXDecoder.builder() //\n      .registerContentHandler(NetworkStatus.class,\n          new SAXDecoder.ContentHandlerWithResult.Factory<NetworkStatus>() {\n            @Override\n            public SAXDecoder.ContentHandlerWithResult<NetworkStatus> create() {\n              return new NetworkStatusHandler();\n            }\n          }) //\n      .registerContentHandler(NetworkStatusStringHandler.class) //\n      .build()", "var_name": "decoder"}], "file": "sax/src/test/java/feign/sax/SAXDecoderTest.java"}, "test_case": {"identifier": "parsesConfiguredTypes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void parsesConfiguredTypes() throws ParseException, IOException {\n    assertEquals(NetworkStatus.FAILED, decoder.decode(statusFailedResponse(), NetworkStatus.class));\n    assertEquals(\"Failed\", decoder.decode(statusFailedResponse(), String.class));\n  }", "signature": "void parsesConfiguredTypes()", "full_signature": "@Test public void parsesConfiguredTypes()", "class_method_signature": "SAXDecoderTest.parsesConfiguredTypes()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "decode", "statusFailedResponse", "assertEquals", "decode", "statusFailedResponse"]}, "focal_class": {"identifier": "SAXDecoder", "superclass": "", "interfaces": "implements Decoder", "fields": [{"original_string": "private final Map<Type, ContentHandlerWithResult.Factory<?>> handlerFactories;", "modifier": "private final", "type": "Map<Type, ContentHandlerWithResult.Factory<?>>", "declarator": "handlerFactories", "var_name": "handlerFactories"}], "methods": [{"identifier": "SAXDecoder", "parameters": "(Map<Type, ContentHandlerWithResult.Factory<?>> handlerFactories)", "modifiers": "private", "return": "", "signature": " SAXDecoder(Map<Type, ContentHandlerWithResult.Factory<?>> handlerFactories)", "full_signature": "private  SAXDecoder(Map<Type, ContentHandlerWithResult.Factory<?>> handlerFactories)", "class_method_signature": "SAXDecoder.SAXDecoder(Map<Type, ContentHandlerWithResult.Factory<?>> handlerFactories)", "testcase": false, "constructor": true}, {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder builder()", "full_signature": "public static Builder builder()", "class_method_signature": "SAXDecoder.builder()", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(Response response, Type type)", "modifiers": "@Override public", "return": "Object", "signature": "Object decode(Response response, Type type)", "full_signature": "@Override public Object decode(Response response, Type type)", "class_method_signature": "SAXDecoder.decode(Response response, Type type)", "testcase": false, "constructor": false}], "file": "sax/src/main/java/feign/sax/SAXDecoder.java"}, "focal_method": {"identifier": "decode", "parameters": "(Response response, Type type)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n  public Object decode(Response response, Type type) throws IOException, DecodeException {\n    if (response.body() == null)\n      return null;\n    ContentHandlerWithResult.Factory<?> handlerFactory = handlerFactories.get(type);\n    checkState(handlerFactory != null, \"type %s not in configured handlers %s\", type,\n        handlerFactories.keySet());\n    ContentHandlerWithResult<?> handler = handlerFactory.create();\n    try {\n      XMLReader xmlReader = XMLReaderFactory.createXMLReader();\n      xmlReader.setFeature(\"http://xml.org/sax/features/namespaces\", false);\n      xmlReader.setFeature(\"http://xml.org/sax/features/validation\", false);\n      /* Explicitly control sax configuration to prevent XXE attacks */\n      xmlReader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n      xmlReader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n      xmlReader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", false);\n      xmlReader.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n      xmlReader.setContentHandler(handler);\n      InputStream inputStream = response.body().asInputStream();\n      try {\n        xmlReader.parse(new InputSource(inputStream));\n      } finally {\n        ensureClosed(inputStream);\n      }\n      return handler.result();\n    } catch (SAXException e) {\n      throw new DecodeException(response.status(), e.getMessage(), response.request(), e);\n    }\n  }", "signature": "Object decode(Response response, Type type)", "full_signature": "@Override public Object decode(Response response, Type type)", "class_method_signature": "SAXDecoder.decode(Response response, Type type)", "testcase": false, "constructor": false, "invocations": ["body", "get", "checkState", "keySet", "create", "createXMLReader", "setFeature", "setFeature", "setFeature", "setFeature", "setFeature", "setFeature", "setContentHandler", "asInputStream", "body", "parse", "ensureClosed", "result", "status", "getMessage", "request"]}, "repository": {"repo_id": 10981994, "url": "https://github.com/OpenFeign/feign", "stars": 5385, "created": "6/26/2013 11:28:16 PM +00:00", "updates": "2020-01-27T14:44:13+00:00", "fork": "False", "license": "licensed"}}