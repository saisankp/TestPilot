{"test_class": {"identifier": "AdjustBoundsTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/com/platypii/baseline/util/AdjustBoundsTest.java"}, "test_case": {"identifier": "squareBoundsPortrait", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void squareBoundsPortrait() {\n        Bounds bounds = new Bounds();\n        bounds.set(0, 1, 1, 0);\n        IntBounds padding = new IntBounds();\n\n        AdjustBounds.squareBounds(bounds, 300, 400, padding);\n\n        assertEquals(0, bounds.x.min, 0.01);\n        assertEquals(1, bounds.y.max, 0.01);\n        assertEquals(1, bounds.x.max, 0.01);\n        assertEquals(-0.33, bounds.y.min, 0.01);\n    }", "signature": "void squareBoundsPortrait()", "full_signature": "@Test public void squareBoundsPortrait()", "class_method_signature": "AdjustBoundsTest.squareBoundsPortrait()", "testcase": true, "constructor": false, "invocations": ["set", "squareBounds", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "AdjustBounds", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double EPSILON = 0.001;", "modifier": "private static final", "type": "double", "declarator": "EPSILON = 0.001", "var_name": "EPSILON"}], "methods": [{"identifier": "clean", "parameters": "(@NonNull Bounds b, @NonNull Bounds inner, @NonNull Bounds outer)", "modifiers": "public static", "return": "void", "signature": "void clean(@NonNull Bounds b, @NonNull Bounds inner, @NonNull Bounds outer)", "full_signature": "public static void clean(@NonNull Bounds b, @NonNull Bounds inner, @NonNull Bounds outer)", "class_method_signature": "AdjustBounds.clean(@NonNull Bounds b, @NonNull Bounds inner, @NonNull Bounds outer)", "testcase": false, "constructor": false}, {"identifier": "squareBounds", "parameters": "(@NonNull Bounds b, int width, int height, @NonNull IntBounds padding)", "modifiers": "public static", "return": "void", "signature": "void squareBounds(@NonNull Bounds b, int width, int height, @NonNull IntBounds padding)", "full_signature": "public static void squareBounds(@NonNull Bounds b, int width, int height, @NonNull IntBounds padding)", "class_method_signature": "AdjustBounds.squareBounds(@NonNull Bounds b, int width, int height, @NonNull IntBounds padding)", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/platypii/baseline/util/AdjustBounds.java"}, "focal_method": {"identifier": "squareBounds", "parameters": "(@NonNull Bounds b, int width, int height, @NonNull IntBounds padding)", "modifiers": "public static", "return": "void", "body": "public static void squareBounds(@NonNull Bounds b, int width, int height, @NonNull IntBounds padding) {\n        final int activeWidth = width - padding.right - padding.left;\n        final int activeHeight = height - padding.bottom - padding.top;\n        final double aspectCanvas = ((double) activeWidth) / activeHeight;\n        final double boundsWidth = b.x.max - b.x.min;\n        final double boundsHeight = b.y.max - b.y.min;\n        final double aspectBounds = boundsWidth / boundsHeight;\n        if (aspectCanvas < aspectBounds) {\n            // Anchor b.y.max\n            final double delta = boundsWidth / aspectCanvas - boundsHeight;\n            b.set(b.x.min, b.y.max, b.x.max, b.y.min - delta);\n        } else {\n            // Anchor b.x.min side\n            final double delta = (boundsHeight * aspectCanvas - boundsWidth);\n            b.set(b.x.min, b.y.max, b.x.max + delta, b.y.min);\n        }\n    }", "signature": "void squareBounds(@NonNull Bounds b, int width, int height, @NonNull IntBounds padding)", "full_signature": "public static void squareBounds(@NonNull Bounds b, int width, int height, @NonNull IntBounds padding)", "class_method_signature": "AdjustBounds.squareBounds(@NonNull Bounds b, int width, int height, @NonNull IntBounds padding)", "testcase": false, "constructor": false, "invocations": ["set", "set"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}