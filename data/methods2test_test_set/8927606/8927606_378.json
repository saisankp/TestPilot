{"test_class": {"identifier": "SchedulerAdapterTest", "superclass": "extends SchedulerTestBase", "interfaces": "", "fields": [{"original_string": "private static final String JAVALISTENER = \"javaListener\";", "modifier": "private static final", "type": "String", "declarator": "JAVALISTENER = \"javaListener\"", "var_name": "JAVALISTENER"}, {"original_string": "private static final String CORRELATIONID = \"correlationId\";", "modifier": "private static final", "type": "String", "declarator": "CORRELATIONID = \"correlationId\"", "var_name": "CORRELATIONID"}, {"original_string": "private static final String MESSAGE = \"message\";", "modifier": "private static final", "type": "String", "declarator": "MESSAGE = \"message\"", "var_name": "MESSAGE"}, {"original_string": "private SchedulerAdapter schedulerAdapter;", "modifier": "private", "type": "SchedulerAdapter", "declarator": "schedulerAdapter", "var_name": "schedulerAdapter"}], "file": "core/src/test/java/nl/nn/adapterframework/scheduler/SchedulerAdapterTest.java"}, "test_case": {"identifier": "testGetSchedulerMetaDataToXml", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetSchedulerMetaDataToXml() throws SchedulerException {\n\t\tassertTrue(schedulerAdapter.getSchedulerMetaDataToXml(schedulerHelper.getScheduler()).toXML().contains(\"<schedulerMetaData \"));\n\t}", "signature": "void testGetSchedulerMetaDataToXml()", "full_signature": "@Test public void testGetSchedulerMetaDataToXml()", "class_method_signature": "SchedulerAdapterTest.testGetSchedulerMetaDataToXml()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "contains", "toXML", "getSchedulerMetaDataToXml", "getScheduler"]}, "focal_class": {"identifier": "SchedulerAdapter", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected Logger log=LogUtil.getLogger(this);", "modifier": "protected", "type": "Logger", "declarator": "log=LogUtil.getLogger(this)", "var_name": "log"}, {"original_string": "private DecimalFormat tf=new DecimalFormat(ItemList.PRINT_FORMAT_TIME);", "modifier": "private", "type": "DecimalFormat", "declarator": "tf=new DecimalFormat(ItemList.PRINT_FORMAT_TIME)", "var_name": "tf"}, {"original_string": "private DecimalFormat pf=new DecimalFormat(ItemList.PRINT_FORMAT_PERC);", "modifier": "private", "type": "DecimalFormat", "declarator": "pf=new DecimalFormat(ItemList.PRINT_FORMAT_PERC)", "var_name": "pf"}], "methods": [{"identifier": "getJobGroupNamesWithJobsToXml", "parameters": "(Scheduler theScheduler, IbisManager ibisManager)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder getJobGroupNamesWithJobsToXml(Scheduler theScheduler, IbisManager ibisManager)", "full_signature": "public XmlBuilder getJobGroupNamesWithJobsToXml(Scheduler theScheduler, IbisManager ibisManager)", "class_method_signature": "SchedulerAdapter.getJobGroupNamesWithJobsToXml(Scheduler theScheduler, IbisManager ibisManager)", "testcase": false, "constructor": false}, {"identifier": "getJobTriggers", "parameters": "(List<? extends Trigger> triggers)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder getJobTriggers(List<? extends Trigger> triggers)", "full_signature": "public XmlBuilder getJobTriggers(List<? extends Trigger> triggers)", "class_method_signature": "SchedulerAdapter.getJobTriggers(List<? extends Trigger> triggers)", "testcase": false, "constructor": false}, {"identifier": "getJobMessages", "parameters": "(JobDef jobdef)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder getJobMessages(JobDef jobdef)", "full_signature": "public XmlBuilder getJobMessages(JobDef jobdef)", "class_method_signature": "SchedulerAdapter.getJobMessages(JobDef jobdef)", "testcase": false, "constructor": false}, {"identifier": "getJobRunStatistics", "parameters": "(JobDef jobdef)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder getJobRunStatistics(JobDef jobdef)", "full_signature": "public XmlBuilder getJobRunStatistics(JobDef jobdef)", "class_method_signature": "SchedulerAdapter.getJobRunStatistics(JobDef jobdef)", "testcase": false, "constructor": false}, {"identifier": "getSchedulerCalendarNamesToXml", "parameters": "(Scheduler theScheduler)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder getSchedulerCalendarNamesToXml(Scheduler theScheduler)", "full_signature": "public XmlBuilder getSchedulerCalendarNamesToXml(Scheduler theScheduler)", "class_method_signature": "SchedulerAdapter.getSchedulerCalendarNamesToXml(Scheduler theScheduler)", "testcase": false, "constructor": false}, {"identifier": "getSchedulerMetaDataToXml", "parameters": "(Scheduler theScheduler)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder getSchedulerMetaDataToXml(Scheduler theScheduler)", "full_signature": "public XmlBuilder getSchedulerMetaDataToXml(Scheduler theScheduler)", "class_method_signature": "SchedulerAdapter.getSchedulerMetaDataToXml(Scheduler theScheduler)", "testcase": false, "constructor": false}, {"identifier": "jobDataMapToXmlBuilder", "parameters": "(JobDataMap jd)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder jobDataMapToXmlBuilder(JobDataMap jd)", "full_signature": "public XmlBuilder jobDataMapToXmlBuilder(JobDataMap jd)", "class_method_signature": "SchedulerAdapter.jobDataMapToXmlBuilder(JobDataMap jd)", "testcase": false, "constructor": false}, {"identifier": "jobDetailToXmlBuilder", "parameters": "(JobDetail jobDetail)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder jobDetailToXmlBuilder(JobDetail jobDetail)", "full_signature": "public XmlBuilder jobDetailToXmlBuilder(JobDetail jobDetail)", "class_method_signature": "SchedulerAdapter.jobDetailToXmlBuilder(JobDetail jobDetail)", "testcase": false, "constructor": false}, {"identifier": "triggerToXmlBuilder", "parameters": "(Trigger trigger)", "modifiers": "public", "return": "XmlBuilder", "signature": "XmlBuilder triggerToXmlBuilder(Trigger trigger)", "full_signature": "public XmlBuilder triggerToXmlBuilder(Trigger trigger)", "class_method_signature": "SchedulerAdapter.triggerToXmlBuilder(Trigger trigger)", "testcase": false, "constructor": false}, {"identifier": "convertDate", "parameters": "(Date date)", "modifiers": "private", "return": "String", "signature": "String convertDate(Date date)", "full_signature": "private String convertDate(Date date)", "class_method_signature": "SchedulerAdapter.convertDate(Date date)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/scheduler/SchedulerAdapter.java"}, "focal_method": {"identifier": "getSchedulerMetaDataToXml", "parameters": "(Scheduler theScheduler)", "modifiers": "public", "return": "XmlBuilder", "body": "public XmlBuilder getSchedulerMetaDataToXml(Scheduler theScheduler) {\n        XmlBuilder xbRoot = new XmlBuilder(\"schedulerMetaData\");\n\n        try {\n            SchedulerMetaData smd = theScheduler.getMetaData();\n\n            xbRoot.addAttribute(\"schedulerName\", smd.getSchedulerName());\n            xbRoot.addAttribute(\"schedulerInstanceId\", smd.getSchedulerInstanceId().toString());\n            xbRoot.addAttribute(\"version\", smd.getVersion());\n            xbRoot.addAttribute(\"isPaused\", smd.isInStandbyMode());\n            xbRoot.addAttribute(\"isSchedulerRemote\", smd.isSchedulerRemote());\n            xbRoot.addAttribute(\"isShutdown\", smd.isShutdown());\n            xbRoot.addAttribute(\"isStarted\", smd.isStarted());\n            xbRoot.addAttribute(\"jobStoreSupportsPersistence\", smd.isJobStoreSupportsPersistence());\n            xbRoot.addAttribute(\"numJobsExecuted\", Integer.toString(smd.getNumberOfJobsExecuted()));\n            try {\n                Date runningSince = smd.getRunningSince();\n\n                xbRoot.addAttribute(\"runningSince\", (null == runningSince ? \"unknown\" : DateUtils.format(runningSince, DateUtils.FORMAT_GENERICDATETIME)));\n            } catch (Exception e) {\n\t            log.debug(e);\n\t        };\n            xbRoot.addAttribute(\"jobStoreClass\", smd.getJobStoreClass().getName());\n            xbRoot.addAttribute(\"schedulerClass\", smd.getSchedulerClass().getName());\n            xbRoot.addAttribute(\"threadPoolClass\", smd.getThreadPoolClass().getName());\n            xbRoot.addAttribute(\"threadPoolSize\", Integer.toString(smd.getThreadPoolSize()));\n        } catch (SchedulerException se) {\n            log.error(se);\n        }\n\n        return xbRoot;\n    }", "signature": "XmlBuilder getSchedulerMetaDataToXml(Scheduler theScheduler)", "full_signature": "public XmlBuilder getSchedulerMetaDataToXml(Scheduler theScheduler)", "class_method_signature": "SchedulerAdapter.getSchedulerMetaDataToXml(Scheduler theScheduler)", "testcase": false, "constructor": false, "invocations": ["getMetaData", "addAttribute", "getSchedulerName", "addAttribute", "toString", "getSchedulerInstanceId", "addAttribute", "getVersion", "addAttribute", "isInStandbyMode", "addAttribute", "isSchedulerRemote", "addAttribute", "isShutdown", "addAttribute", "isStarted", "addAttribute", "isJobStoreSupportsPersistence", "addAttribute", "toString", "getNumberOfJobsExecuted", "getRunningSince", "addAttribute", "format", "debug", "addAttribute", "getName", "getJobStoreClass", "addAttribute", "getName", "getSchedulerClass", "addAttribute", "getName", "getThreadPoolClass", "addAttribute", "toString", "getThreadPoolSize", "error"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}