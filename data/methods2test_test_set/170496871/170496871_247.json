{"test_class": {"identifier": "StandardScalerTrainerTest", "superclass": "extends TrainerTest", "interfaces": "", "fields": [{"original_string": "private DatasetBuilder<Integer, Vector> datasetBuilder;", "modifier": "private", "type": "DatasetBuilder<Integer, Vector>", "declarator": "datasetBuilder", "var_name": "datasetBuilder"}, {"original_string": "private StandardScalerTrainer<Integer, Vector> standardizationTrainer;", "modifier": "private", "type": "StandardScalerTrainer<Integer, Vector>", "declarator": "standardizationTrainer", "var_name": "standardizationTrainer"}], "file": "modules/ml/src/test/java/org/apache/ignite/ml/preprocessing/standardscaling/StandardScalerTrainerTest.java"}, "test_case": {"identifier": "testCalculatesCorrectStandardDeviations", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCalculatesCorrectStandardDeviations() {\n        double[] expectedSigmas = new double[] {0.5, 1.47901995, 14.51723114, 0.93374247};\n\n        final Vectorizer<Integer, Vector, Integer, Double> vectorizer = new DummyVectorizer<>(0, 1, 2, 3);\n\n        StandardScalerPreprocessor<Integer, Vector> preprocessor = (StandardScalerPreprocessor<Integer, Vector>)standardizationTrainer.fit(\n            TestUtils.testEnvBuilder(),\n            datasetBuilder,\n            vectorizer\n        );\n\n        assertArrayEquals(expectedSigmas, preprocessor.getSigmas(), 1e-8);\n    }", "signature": "void testCalculatesCorrectStandardDeviations()", "full_signature": "@Test public void testCalculatesCorrectStandardDeviations()", "class_method_signature": "StandardScalerTrainerTest.testCalculatesCorrectStandardDeviations()", "testcase": true, "constructor": false, "invocations": ["fit", "testEnvBuilder", "assertArrayEquals", "getSigmas"]}, "focal_class": {"identifier": "StandardScalerTrainer", "superclass": "", "interfaces": "implements PreprocessingTrainer<K, V>", "fields": [], "methods": [{"identifier": "fit", "parameters": "(LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "modifiers": "@Override public", "return": "StandardScalerPreprocessor<K, V>", "signature": "StandardScalerPreprocessor<K, V> fit(LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "full_signature": "@Override public StandardScalerPreprocessor<K, V> fit(LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "class_method_signature": "StandardScalerTrainer.fit(LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "testcase": false, "constructor": false}, {"identifier": "computeSum", "parameters": "(LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "modifiers": "private", "return": "StandardScalerData", "signature": "StandardScalerData computeSum(LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "full_signature": "private StandardScalerData computeSum(LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "class_method_signature": "StandardScalerTrainer.computeSum(LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/preprocessing/standardscaling/StandardScalerTrainer.java"}, "focal_method": {"identifier": "fit", "parameters": "(LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "modifiers": "@Override public", "return": "StandardScalerPreprocessor<K, V>", "body": "@Override public StandardScalerPreprocessor<K, V> fit(LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor) {\n        StandardScalerData standardScalerData = computeSum(envBuilder, datasetBuilder, basePreprocessor);\n\n        int n = standardScalerData.sum.length;\n        long cnt = standardScalerData.cnt;\n        double[] mean = new double[n];\n        double[] sigma = new double[n];\n\n        for (int i = 0; i < n; i++) {\n            mean[i] = standardScalerData.sum[i] / cnt;\n            double variance = (standardScalerData.squaredSum[i] - Math.pow(standardScalerData.sum[i], 2) / cnt) / cnt;\n            sigma[i] = Math.sqrt(variance);\n        }\n        return new StandardScalerPreprocessor<>(mean, sigma, basePreprocessor);\n    }", "signature": "StandardScalerPreprocessor<K, V> fit(LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "full_signature": "@Override public StandardScalerPreprocessor<K, V> fit(LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "class_method_signature": "StandardScalerTrainer.fit(LearningEnvironmentBuilder envBuilder,\n        DatasetBuilder<K, V> datasetBuilder,\n        Preprocessor<K, V> basePreprocessor)", "testcase": false, "constructor": false, "invocations": ["computeSum", "pow", "sqrt"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}