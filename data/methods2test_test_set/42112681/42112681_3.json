{"test_class": {"identifier": "LispWriterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LispWriter lwriter;", "modifier": "private", "type": "LispWriter", "declarator": "lwriter", "var_name": "lwriter"}, {"original_string": "private StringWriter output;", "modifier": "private", "type": "StringWriter", "declarator": "output", "var_name": "output"}], "file": "lib/jdee-server/src/test/java/jde/juci/LispWriterTest.java"}, "test_case": {"identifier": "testChars", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testChars() {\n        lwriter.writeChar('a');\n        assertEquals(\"?a\", output.toString());\n        reset();\n        lwriter.writeChar('?');\n        assertEquals(\"?\\\\?\", output.toString());\n        reset();\n        lwriter.writeChar('\\\\');\n        assertEquals(\"?\\\\\\\\\", output.toString());\n    }", "signature": "void testChars()", "full_signature": "@Test public void testChars()", "class_method_signature": "LispWriterTest.testChars()", "testcase": true, "constructor": false, "invocations": ["writeChar", "assertEquals", "toString", "reset", "writeChar", "assertEquals", "toString", "reset", "writeChar", "assertEquals", "toString"]}, "focal_class": {"identifier": "LispWriter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Symbol T = new Symbol(\"t\");", "modifier": "public static final", "type": "Symbol", "declarator": "T = new Symbol(\"t\")", "var_name": "T"}, {"original_string": "public static final Symbol NIL = new Symbol(\"nil\");", "modifier": "public static final", "type": "Symbol", "declarator": "NIL = new Symbol(\"nil\")", "var_name": "NIL"}, {"original_string": "public static final Quoted NULL = new Quoted(new Symbol(\"null\"));", "modifier": "public static final", "type": "Quoted", "declarator": "NULL = new Quoted(new Symbol(\"null\"))", "var_name": "NULL"}, {"original_string": "private PrintWriter output;", "modifier": "private", "type": "PrintWriter", "declarator": "output", "var_name": "output"}, {"original_string": "private boolean autoQuoteLists = true;", "modifier": "private", "type": "boolean", "declarator": "autoQuoteLists = true", "var_name": "autoQuoteLists"}, {"original_string": "private boolean inQuote = false;", "modifier": "private", "type": "boolean", "declarator": "inQuote = false", "var_name": "inQuote"}], "methods": [{"identifier": "LispWriter", "parameters": "(PrintWriter dest)", "modifiers": "public", "return": "", "signature": " LispWriter(PrintWriter dest)", "full_signature": "public  LispWriter(PrintWriter dest)", "class_method_signature": "LispWriter.LispWriter(PrintWriter dest)", "testcase": false, "constructor": true}, {"identifier": "isAutoQuoteLists", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAutoQuoteLists()", "full_signature": "public boolean isAutoQuoteLists()", "class_method_signature": "LispWriter.isAutoQuoteLists()", "testcase": false, "constructor": false}, {"identifier": "setAutoQuoteLists", "parameters": "(boolean autoQuoteLists)", "modifiers": "public", "return": "void", "signature": "void setAutoQuoteLists(boolean autoQuoteLists)", "full_signature": "public void setAutoQuoteLists(boolean autoQuoteLists)", "class_method_signature": "LispWriter.setAutoQuoteLists(boolean autoQuoteLists)", "testcase": false, "constructor": false}, {"identifier": "writeList", "parameters": "(List<Cons> list)", "modifiers": "public", "return": "void", "signature": "void writeList(List<Cons> list)", "full_signature": "public void writeList(List<Cons> list)", "class_method_signature": "LispWriter.writeList(List<Cons> list)", "testcase": false, "constructor": false}, {"identifier": "writeForm", "parameters": "(List<Cons> list)", "modifiers": "public", "return": "void", "signature": "void writeForm(List<Cons> list)", "full_signature": "public void writeForm(List<Cons> list)", "class_method_signature": "LispWriter.writeForm(List<Cons> list)", "testcase": false, "constructor": false}, {"identifier": "writeAlist", "parameters": "(Map<Object, Object> map)", "modifiers": "public", "return": "void", "signature": "void writeAlist(Map<Object, Object> map)", "full_signature": "public void writeAlist(Map<Object, Object> map)", "class_method_signature": "LispWriter.writeAlist(Map<Object, Object> map)", "testcase": false, "constructor": false}, {"identifier": "writeCons", "parameters": "(Cons cons)", "modifiers": "public", "return": "void", "signature": "void writeCons(Cons cons)", "full_signature": "public void writeCons(Cons cons)", "class_method_signature": "LispWriter.writeCons(Cons cons)", "testcase": false, "constructor": false}, {"identifier": "writeString", "parameters": "(String string)", "modifiers": "public", "return": "void", "signature": "void writeString(String string)", "full_signature": "public void writeString(String string)", "class_method_signature": "LispWriter.writeString(String string)", "testcase": false, "constructor": false}, {"identifier": "writeInt", "parameters": "(int n)", "modifiers": "public", "return": "void", "signature": "void writeInt(int n)", "full_signature": "public void writeInt(int n)", "class_method_signature": "LispWriter.writeInt(int n)", "testcase": false, "constructor": false}, {"identifier": "writeInt", "parameters": "(Integer n)", "modifiers": "public", "return": "void", "signature": "void writeInt(Integer n)", "full_signature": "public void writeInt(Integer n)", "class_method_signature": "LispWriter.writeInt(Integer n)", "testcase": false, "constructor": false}, {"identifier": "writeLong", "parameters": "(long n)", "modifiers": "public", "return": "void", "signature": "void writeLong(long n)", "full_signature": "public void writeLong(long n)", "class_method_signature": "LispWriter.writeLong(long n)", "testcase": false, "constructor": false}, {"identifier": "writeLong", "parameters": "(Long n)", "modifiers": "public", "return": "void", "signature": "void writeLong(Long n)", "full_signature": "public void writeLong(Long n)", "class_method_signature": "LispWriter.writeLong(Long n)", "testcase": false, "constructor": false}, {"identifier": "writeFloat", "parameters": "(float f)", "modifiers": "public", "return": "void", "signature": "void writeFloat(float f)", "full_signature": "public void writeFloat(float f)", "class_method_signature": "LispWriter.writeFloat(float f)", "testcase": false, "constructor": false}, {"identifier": "writeFloat", "parameters": "(Float f)", "modifiers": "public", "return": "void", "signature": "void writeFloat(Float f)", "full_signature": "public void writeFloat(Float f)", "class_method_signature": "LispWriter.writeFloat(Float f)", "testcase": false, "constructor": false}, {"identifier": "writeDouble", "parameters": "(double d)", "modifiers": "public", "return": "void", "signature": "void writeDouble(double d)", "full_signature": "public void writeDouble(double d)", "class_method_signature": "LispWriter.writeDouble(double d)", "testcase": false, "constructor": false}, {"identifier": "writeDouble", "parameters": "(Double d)", "modifiers": "public", "return": "void", "signature": "void writeDouble(Double d)", "full_signature": "public void writeDouble(Double d)", "class_method_signature": "LispWriter.writeDouble(Double d)", "testcase": false, "constructor": false}, {"identifier": "writeChar", "parameters": "(char c)", "modifiers": "public", "return": "void", "signature": "void writeChar(char c)", "full_signature": "public void writeChar(char c)", "class_method_signature": "LispWriter.writeChar(char c)", "testcase": false, "constructor": false}, {"identifier": "writeChar", "parameters": "(Character c)", "modifiers": "public", "return": "void", "signature": "void writeChar(Character c)", "full_signature": "public void writeChar(Character c)", "class_method_signature": "LispWriter.writeChar(Character c)", "testcase": false, "constructor": false}, {"identifier": "writeBoolean", "parameters": "(boolean b)", "modifiers": "public", "return": "void", "signature": "void writeBoolean(boolean b)", "full_signature": "public void writeBoolean(boolean b)", "class_method_signature": "LispWriter.writeBoolean(boolean b)", "testcase": false, "constructor": false}, {"identifier": "writeBoolean", "parameters": "(Boolean b)", "modifiers": "public", "return": "void", "signature": "void writeBoolean(Boolean b)", "full_signature": "public void writeBoolean(Boolean b)", "class_method_signature": "LispWriter.writeBoolean(Boolean b)", "testcase": false, "constructor": false}, {"identifier": "writeT", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void writeT()", "full_signature": "public void writeT()", "class_method_signature": "LispWriter.writeT()", "testcase": false, "constructor": false}, {"identifier": "writeNil", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void writeNil()", "full_signature": "public void writeNil()", "class_method_signature": "LispWriter.writeNil()", "testcase": false, "constructor": false}, {"identifier": "writeSymbol", "parameters": "(Symbol name)", "modifiers": "public", "return": "void", "signature": "void writeSymbol(Symbol name)", "full_signature": "public void writeSymbol(Symbol name)", "class_method_signature": "LispWriter.writeSymbol(Symbol name)", "testcase": false, "constructor": false}, {"identifier": "writeQuoted", "parameters": "(Quoted q)", "modifiers": "public", "return": "void", "signature": "void writeQuoted(Quoted q)", "full_signature": "public void writeQuoted(Quoted q)", "class_method_signature": "LispWriter.writeQuoted(Quoted q)", "testcase": false, "constructor": false}, {"identifier": "writeNumber", "parameters": "(Number n)", "modifiers": "private", "return": "void", "signature": "void writeNumber(Number n)", "full_signature": "private void writeNumber(Number n)", "class_method_signature": "LispWriter.writeNumber(Number n)", "testcase": false, "constructor": false}, {"identifier": "writeUnknown", "parameters": "(Object o)", "modifiers": "public", "return": "void", "signature": "void writeUnknown(Object o)", "full_signature": "public void writeUnknown(Object o)", "class_method_signature": "LispWriter.writeUnknown(Object o)", "testcase": false, "constructor": false}], "file": "lib/jdee-server/src/main/java/jde/juci/LispWriter.java"}, "focal_method": {"identifier": "writeChar", "parameters": "(char c)", "modifiers": "public", "return": "void", "body": "public void writeChar(char c) {\n        output.write(\"?\");\n        // TODO: any more special characters that should be quoted here?\n        switch (c) {\n            case '\\\"':\n            case '\\'':\n            case '\\\\':\n            case '?':\n            case ')':\n            case '(':\n            case ']':\n            case '[':\n                output.write(\"\\\\\");\n                output.write(c);\n                break;\n            case '\\n':\n                output.write(\"\\\\n\");\n                break;\n            case '\\b':\n                output.write(\"\\\\b\");\n                break;\n            case '\\r':\n                output.write(\"\\\\r\");\n                break;\n            case '\\t':\n                output.write(\"\\\\t\");\n                break;\n            case '\\f':\n                output.write(\"\\\\f\");\n                break;\n            default:\n                output.write(c);\n                break;\n        }\n    }", "signature": "void writeChar(char c)", "full_signature": "public void writeChar(char c)", "class_method_signature": "LispWriter.writeChar(char c)", "testcase": false, "constructor": false, "invocations": ["write", "write", "write", "write", "write", "write", "write", "write", "write"]}, "repository": {"repo_id": 42112681, "url": "https://github.com/kqr/.emacs.d", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 42179, "license": "licensed"}}