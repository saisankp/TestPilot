{"test_class": {"identifier": "TransactionAdminTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(TransactionAdminTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(TransactionAdminTest.class)", "var_name": "LOG"}, {"original_string": "private static Configuration conf;", "modifier": "private static", "type": "Configuration", "declarator": "conf", "var_name": "conf"}, {"original_string": "private static InMemoryZKServer zkServer;", "modifier": "private static", "type": "InMemoryZKServer", "declarator": "zkServer", "var_name": "zkServer"}, {"original_string": "private static ZKClientService zkClientService;", "modifier": "private static", "type": "ZKClientService", "declarator": "zkClientService", "var_name": "zkClientService"}, {"original_string": "private static TransactionService txService;", "modifier": "private static", "type": "TransactionService", "declarator": "txService", "var_name": "txService"}, {"original_string": "private static TransactionSystemClient txClient;", "modifier": "private static", "type": "TransactionSystemClient", "declarator": "txClient", "var_name": "txClient"}, {"original_string": "@ClassRule\n  public static TemporaryFolder tmpFolder = new TemporaryFolder();", "modifier": "@ClassRule\n  public static", "type": "TemporaryFolder", "declarator": "tmpFolder = new TemporaryFolder()", "var_name": "tmpFolder"}], "file": "tephra-core/src/test/java/co/cask/tephra/TransactionAdminTest.java"}, "test_case": {"identifier": "testTruncateInvalidTxBefore", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTruncateInvalidTxBefore() throws Exception {\n    Transaction tx1 = txClient.startLong();\n    TimeUnit.MILLISECONDS.sleep(1);\n    long beforeTx2 = System.currentTimeMillis();\n    Transaction tx2 = txClient.startLong();\n\n    // Try before invalidation\n    Assert.assertEquals(0, txClient.getInvalidSize());\n    TransactionAdmin txAdmin = new TransactionAdmin(new PrintStream(System.out), new PrintStream(System.err));\n    int status = txAdmin.doMain(new String[]{\"--truncate-invalid-tx-before\", String.valueOf(beforeTx2)}, conf);\n    // Assert command failed due to in-progress transactions\n    Assert.assertEquals(1, status);\n    // Assert no change to invalid size\n    Assert.assertEquals(0, txClient.getInvalidSize());\n\n    txClient.invalidate(tx1.getTransactionId());\n    txClient.invalidate(tx2.getTransactionId());\n    Assert.assertEquals(2, txClient.getInvalidSize());\n\n    status = txAdmin.doMain(new String[]{\"--truncate-invalid-tx-before\", String.valueOf(beforeTx2)}, conf);\n    Assert.assertEquals(0, status);\n    Assert.assertEquals(1, txClient.getInvalidSize());\n  }", "signature": "void testTruncateInvalidTxBefore()", "full_signature": "@Test public void testTruncateInvalidTxBefore()", "class_method_signature": "TransactionAdminTest.testTruncateInvalidTxBefore()", "testcase": true, "constructor": false, "invocations": ["startLong", "sleep", "currentTimeMillis", "startLong", "assertEquals", "getInvalidSize", "doMain", "valueOf", "assertEquals", "assertEquals", "getInvalidSize", "invalidate", "getTransactionId", "invalidate", "getTransactionId", "assertEquals", "getInvalidSize", "doMain", "valueOf", "assertEquals", "assertEquals", "getInvalidSize"]}, "focal_class": {"identifier": "TransactionAdmin", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String OPT_TRUNCATE_INVALID_TX = \"--truncate-invalid-tx\";", "modifier": "private static final", "type": "String", "declarator": "OPT_TRUNCATE_INVALID_TX = \"--truncate-invalid-tx\"", "var_name": "OPT_TRUNCATE_INVALID_TX"}, {"original_string": "private static final String OPT_TRUNCATE_INVALID_TX_BEFORE = \"--truncate-invalid-tx-before\";", "modifier": "private static final", "type": "String", "declarator": "OPT_TRUNCATE_INVALID_TX_BEFORE = \"--truncate-invalid-tx-before\"", "var_name": "OPT_TRUNCATE_INVALID_TX_BEFORE"}, {"original_string": "private static final String OPT_GET_INVALID_TX_SIZE = \"--get-invalid-tx-size\";", "modifier": "private static final", "type": "String", "declarator": "OPT_GET_INVALID_TX_SIZE = \"--get-invalid-tx-size\"", "var_name": "OPT_GET_INVALID_TX_SIZE"}, {"original_string": "private final PrintStream out;", "modifier": "private final", "type": "PrintStream", "declarator": "out", "var_name": "out"}, {"original_string": "private final PrintStream err;", "modifier": "private final", "type": "PrintStream", "declarator": "err", "var_name": "err"}], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "TransactionAdmin.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "TransactionAdmin", "parameters": "(PrintStream out, PrintStream err)", "modifiers": "public", "return": "", "signature": " TransactionAdmin(PrintStream out, PrintStream err)", "full_signature": "public  TransactionAdmin(PrintStream out, PrintStream err)", "class_method_signature": "TransactionAdmin.TransactionAdmin(PrintStream out, PrintStream err)", "testcase": false, "constructor": true}, {"identifier": "doMain", "parameters": "(String[] args, Configuration conf)", "modifiers": "@VisibleForTesting", "return": "int", "signature": "int doMain(String[] args, Configuration conf)", "full_signature": "@VisibleForTesting int doMain(String[] args, Configuration conf)", "class_method_signature": "TransactionAdmin.doMain(String[] args, Configuration conf)", "testcase": false, "constructor": false}, {"identifier": "parseTxIds", "parameters": "(String option)", "modifiers": "private", "return": "Set<Long>", "signature": "Set<Long> parseTxIds(String option)", "full_signature": "private Set<Long> parseTxIds(String option)", "class_method_signature": "TransactionAdmin.parseTxIds(String option)", "testcase": false, "constructor": false}, {"identifier": "printUsage", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void printUsage()", "full_signature": "private void printUsage()", "class_method_signature": "TransactionAdmin.printUsage()", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(String... args)", "modifiers": "private static", "return": "String", "signature": "String join(String... args)", "full_signature": "private static String join(String... args)", "class_method_signature": "TransactionAdmin.join(String... args)", "testcase": false, "constructor": false}], "file": "tephra-core/src/main/java/co/cask/tephra/TransactionAdmin.java"}, "focal_method": {"identifier": "doMain", "parameters": "(String[] args, Configuration conf)", "modifiers": "@VisibleForTesting", "return": "int", "body": "@VisibleForTesting\n  int doMain(String[] args, Configuration conf) {\n    if (args.length < 1) {\n      printUsage();\n      return 1;\n    }\n\n    Injector injector = Guice.createInjector(\n      new ConfigModule(conf),\n      new ZKModule(),\n      new DiscoveryModules().getDistributedModules(),\n      new TransactionModules().getDistributedModules(),\n      new TransactionClientModule()\n    );\n\n    ZKClientService zkClient = injector.getInstance(ZKClientService.class);\n    zkClient.startAndWait();\n    \n    try {\n      TransactionSystemClient txClient = injector.getInstance(TransactionSystemClient.class);\n      String option = args[0];\n      \n      if (option.equals(OPT_TRUNCATE_INVALID_TX)) {\n        if (args.length != 2) {\n          printUsage();\n          return 1;\n        }\n        Set<Long> txIds;\n        try {\n          txIds = parseTxIds(args[1]);\n        } catch (NumberFormatException e) {\n          err.println(\"NumberFormatException: \" + e.getMessage());\n          return 1;\n        }\n        if (!txIds.isEmpty()) {\n          out.println(\"Invalid list size before truncation: \" + txClient.getInvalidSize());\n          txClient.truncateInvalidTx(txIds);\n          out.println(\"Invalid list size after truncation: \" + txClient.getInvalidSize());\n        }\n      } else if (option.equals(OPT_TRUNCATE_INVALID_TX_BEFORE)) {\n        if (args.length != 2) {\n          printUsage();\n          return 1;\n        }\n        try {\n          long time = Long.parseLong(args[1]);\n          out.println(\"Invalid list size before truncation: \" + txClient.getInvalidSize());\n          txClient.truncateInvalidTxBefore(time);\n          out.println(\"Invalid list size after truncation: \" + txClient.getInvalidSize());\n        } catch (InvalidTruncateTimeException e) {\n          err.println(e.getMessage());\n          return 1;\n        } catch (NumberFormatException e) {\n          err.println(\"NumberFormatException: \" + e.getMessage());\n          return 1;\n        }\n      } else if (option.equals(OPT_GET_INVALID_TX_SIZE)) {\n        if (args.length != 1) {\n          printUsage();\n          return 1;\n        }\n        out.println(\"Invalid list size: \" + txClient.getInvalidSize());\n      } else {\n        printUsage();\n        return 1;\n      }\n    } finally {\n      zkClient.stopAndWait();\n    }\n    return 0;\n  }", "signature": "int doMain(String[] args, Configuration conf)", "full_signature": "@VisibleForTesting int doMain(String[] args, Configuration conf)", "class_method_signature": "TransactionAdmin.doMain(String[] args, Configuration conf)", "testcase": false, "constructor": false, "invocations": ["printUsage", "createInjector", "getDistributedModules", "getDistributedModules", "getInstance", "startAndWait", "getInstance", "equals", "printUsage", "parseTxIds", "println", "getMessage", "isEmpty", "println", "getInvalidSize", "truncateInvalidTx", "println", "getInvalidSize", "equals", "printUsage", "parseLong", "println", "getInvalidSize", "truncateInvalidTxBefore", "println", "getInvalidSize", "println", "getMessage", "println", "getMessage", "equals", "printUsage", "println", "getInvalidSize", "printUsage", "stopAndWait"]}, "repository": {"repo_id": 21894018, "url": "https://github.com/cdapio/tephra", "language": "Java", "is_fork": false, "fork_count": 43, "stargazer_count": 157, "size": 1415, "license": "licensed"}}