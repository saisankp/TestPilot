{"test_class": {"identifier": "TestMathUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BigInteger modulus = new BigInteger(\"113\");", "modifier": "private", "type": "BigInteger", "declarator": "modulus = new BigInteger(\"113\")", "var_name": "modulus"}], "file": "core/src/test/java/dk/alexandra/fresco/framework/util/TestMathUtils.java"}, "test_case": {"identifier": "testModularSqrtNoSqrt", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void testModularSqrtNoSqrt() {\n    MathUtils.modularSqrt(new BigInteger(\"23\"), modulus);\n  }", "signature": "void testModularSqrtNoSqrt()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void testModularSqrtNoSqrt()", "class_method_signature": "TestMathUtils.testModularSqrtNoSqrt()", "testcase": true, "constructor": false, "invocations": ["modularSqrt"]}, "focal_class": {"identifier": "MathUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final BigInteger TWO = BigInteger.valueOf(2);", "modifier": "private static final", "type": "BigInteger", "declarator": "TWO = BigInteger.valueOf(2)", "var_name": "TWO"}], "methods": [{"identifier": "MathUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " MathUtils()", "full_signature": "private  MathUtils()", "class_method_signature": "MathUtils.MathUtils()", "testcase": false, "constructor": true}, {"identifier": "isQuadraticResidue", "parameters": "(BigInteger value, BigInteger modulus)", "modifiers": "public static", "return": "boolean", "signature": "boolean isQuadraticResidue(BigInteger value, BigInteger modulus)", "full_signature": "public static boolean isQuadraticResidue(BigInteger value, BigInteger modulus)", "class_method_signature": "MathUtils.isQuadraticResidue(BigInteger value, BigInteger modulus)", "testcase": false, "constructor": false}, {"identifier": "modularSqrt", "parameters": "(BigInteger value, BigInteger modulus)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger modularSqrt(BigInteger value, BigInteger modulus)", "full_signature": "public static BigInteger modularSqrt(BigInteger value, BigInteger modulus)", "class_method_signature": "MathUtils.modularSqrt(BigInteger value, BigInteger modulus)", "testcase": false, "constructor": false}, {"identifier": "sum", "parameters": "(List<BigInteger> summands, BigInteger modulus)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger sum(List<BigInteger> summands, BigInteger modulus)", "full_signature": "public static BigInteger sum(List<BigInteger> summands, BigInteger modulus)", "class_method_signature": "MathUtils.sum(List<BigInteger> summands, BigInteger modulus)", "testcase": false, "constructor": false}, {"identifier": "getNonQuadraticResidue", "parameters": "(BigInteger modulus)", "modifiers": "private static", "return": "BigInteger", "signature": "BigInteger getNonQuadraticResidue(BigInteger modulus)", "full_signature": "private static BigInteger getNonQuadraticResidue(BigInteger modulus)", "class_method_signature": "MathUtils.getNonQuadraticResidue(BigInteger modulus)", "testcase": false, "constructor": false}, {"identifier": "expressAsProductOfPowerOfTwo", "parameters": "(BigInteger value)", "modifiers": "private static", "return": "Pair<BigInteger, Integer>", "signature": "Pair<BigInteger, Integer> expressAsProductOfPowerOfTwo(BigInteger value)", "full_signature": "private static Pair<BigInteger, Integer> expressAsProductOfPowerOfTwo(BigInteger value)", "class_method_signature": "MathUtils.expressAsProductOfPowerOfTwo(BigInteger value)", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/util/MathUtils.java"}, "focal_method": {"identifier": "modularSqrt", "parameters": "(BigInteger value, BigInteger modulus)", "modifiers": "public static", "return": "BigInteger", "body": "public static BigInteger modularSqrt(BigInteger value, BigInteger modulus) {\n    // check if square root exists\n    if (!isQuadraticResidue(value, modulus)) {\n      throw new IllegalArgumentException(\"Value has no square root in field\");\n    }\n\n    // find q and s such that (p - 1) = q * 2^s\n    Pair<BigInteger, Integer> factors = expressAsProductOfPowerOfTwo(\n        modulus.subtract(BigInteger.ONE));\n    BigInteger q = factors.getFirst();\n    int s = factors.getSecond();\n\n    // find non-quadratic residue for field\n    BigInteger z = getNonQuadraticResidue(modulus);\n\n    int m = s;\n    BigInteger c = z.modPow(q, modulus);\n    BigInteger t = value.modPow(q, modulus);\n    BigInteger r = value.modPow(q.add(BigInteger.ONE).divide(TWO), modulus);\n\n    while (!t.equals(BigInteger.ONE)) {\n      int i = 0;\n      BigInteger power = t;\n      while (!power.equals(BigInteger.ONE)) {\n        power = power.pow(2).mod(modulus);\n        i++;\n      }\n      BigInteger exp = TWO.pow(m - i - 1).mod(modulus);\n      BigInteger b = c.modPow(exp, modulus);\n\n      m = i;\n      c = b.pow(2).mod(modulus);\n      t = t.multiply(c).mod(modulus);\n      r = r.multiply(b).mod(modulus);\n    }\n    return r;\n  }", "signature": "BigInteger modularSqrt(BigInteger value, BigInteger modulus)", "full_signature": "public static BigInteger modularSqrt(BigInteger value, BigInteger modulus)", "class_method_signature": "MathUtils.modularSqrt(BigInteger value, BigInteger modulus)", "testcase": false, "constructor": false, "invocations": ["isQuadraticResidue", "expressAsProductOfPowerOfTwo", "subtract", "getFirst", "getSecond", "getNonQuadraticResidue", "modPow", "modPow", "modPow", "divide", "add", "equals", "equals", "mod", "pow", "mod", "pow", "modPow", "mod", "pow", "mod", "multiply", "mod", "multiply"]}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}