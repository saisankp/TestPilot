{"test_class": {"identifier": "RegistryResponseValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RegistryResponseValidator validator;", "modifier": "private", "type": "RegistryResponseValidator", "declarator": "validator", "var_name": "validator"}, {"original_string": "private Response response;", "modifier": "private", "type": "Response", "declarator": "response", "var_name": "response"}, {"original_string": "private ResponseTransformer transformer;", "modifier": "private", "type": "ResponseTransformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "private ValidationProfile profile;", "modifier": "private", "type": "ValidationProfile", "declarator": "profile", "var_name": "profile"}], "file": "commons/ihe/xds/src/test/java/org/openehealth/ipf/commons/ihe/xds/core/validate/responses/RegistryResponseValidatorTest.java"}, "test_case": {"identifier": "testGoodCase", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGoodCase() throws XDSMetaDataException {\n        validator.validate(transformer.toEbXML(response), profile);\n    }", "signature": "void testGoodCase()", "full_signature": "@Test public void testGoodCase()", "class_method_signature": "RegistryResponseValidatorTest.testGoodCase()", "testcase": true, "constructor": false, "invocations": ["validate", "toEbXML"]}, "focal_class": {"identifier": "RegistryResponseValidator", "superclass": "", "interfaces": "implements Validator<EbXMLRegistryResponse, ValidationProfile>", "fields": [{"original_string": "private final HomeCommunityIdValidator hcValidator = new HomeCommunityIdValidator(true);", "modifier": "private final", "type": "HomeCommunityIdValidator", "declarator": "hcValidator = new HomeCommunityIdValidator(true)", "var_name": "hcValidator"}], "methods": [{"identifier": "validate", "parameters": "(EbXMLRegistryResponse response, ValidationProfile profile)", "modifiers": "@Override public", "return": "void", "signature": "void validate(EbXMLRegistryResponse response, ValidationProfile profile)", "full_signature": "@Override public void validate(EbXMLRegistryResponse response, ValidationProfile profile)", "class_method_signature": "RegistryResponseValidator.validate(EbXMLRegistryResponse response, ValidationProfile profile)", "testcase": false, "constructor": false}], "file": "commons/ihe/xds/src/main/java/org/openehealth/ipf/commons/ihe/xds/core/validate/responses/RegistryResponseValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(EbXMLRegistryResponse response, ValidationProfile profile)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validate(EbXMLRegistryResponse response, ValidationProfile profile) {\n        notNull(response, \"response cannot be null\");\n        \n        metaDataAssert(response.getStatus() != null, INVALID_STATUS_IN_RESPONSE);\n        for (EbXMLRegistryError registryError : response.getErrors()) {\n            metaDataAssert(registryError != null, INVALID_ERROR_INFO_IN_RESPONSE);\n            metaDataAssert(registryError.getErrorCode() != null, INVALID_ERROR_CODE_IN_RESPONSE);\n            metaDataAssert(registryError.getSeverity() != null, INVALID_SEVERITY_IN_RESPONSE);\n\n            if (profile.getProfile() == ValidationProfile.InteractionProfile.XCA) {\n                hcValidator.validate(registryError.getLocation());\n            }\n        }\n    }", "signature": "void validate(EbXMLRegistryResponse response, ValidationProfile profile)", "full_signature": "@Override public void validate(EbXMLRegistryResponse response, ValidationProfile profile)", "class_method_signature": "RegistryResponseValidator.validate(EbXMLRegistryResponse response, ValidationProfile profile)", "testcase": false, "constructor": false, "invocations": ["notNull", "metaDataAssert", "getStatus", "getErrors", "metaDataAssert", "metaDataAssert", "getErrorCode", "metaDataAssert", "getSeverity", "getProfile", "validate", "getLocation"]}, "repository": {"repo_id": 793164, "url": "https://github.com/krasserm/ipf", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 29, "size": 30233, "license": "licensed"}}