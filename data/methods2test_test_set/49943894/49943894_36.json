{"test_class": {"identifier": "CreateAccountCmdTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger s_logger = LoggerFactory.getLogger(CreateAccountCmdTest.class.getName());", "modifier": "public static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(CreateAccountCmdTest.class.getName())", "var_name": "s_logger"}, {"original_string": "@Mock\n    private AccountService accountService;", "modifier": "@Mock\n    private", "type": "AccountService", "declarator": "accountService", "var_name": "accountService"}, {"original_string": "@InjectMocks\n    private CreateAccountCmd createAccountCmd = new CreateAccountCmd();", "modifier": "@InjectMocks\n    private", "type": "CreateAccountCmd", "declarator": "createAccountCmd = new CreateAccountCmd()", "var_name": "createAccountCmd"}, {"original_string": "private short accountType = 1;", "modifier": "private", "type": "short", "declarator": "accountType = 1", "var_name": "accountType"}, {"original_string": "private Long domainId = 1L;", "modifier": "private", "type": "Long", "declarator": "domainId = 1L", "var_name": "domainId"}], "file": "api/src/test/java/org/apache/cloudstack/api/command/admin/account/CreateAccountCmdTest.java"}, "test_case": {"identifier": "testExecuteWithNullPassword", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecuteWithNullPassword() {\n        ReflectionTestUtils.setField(createAccountCmd, \"password\", null);\n        try {\n            createAccountCmd.execute();\n            Assert.fail(\"should throw exception for a null password\");\n        } catch (ServerApiException e) {\n            Assert.assertEquals(ApiErrorCode.PARAM_ERROR, e.getErrorCode());\n            Assert.assertEquals(\"Empty passwords are not allowed\", e.getMessage());\n        }\n        Mockito.verify(accountService, Mockito.never()).createUserAccount(null, null, null, null, null, null, null, accountType, domainId, null, null, null, null);\n    }", "signature": "void testExecuteWithNullPassword()", "full_signature": "@Test public void testExecuteWithNullPassword()", "class_method_signature": "CreateAccountCmdTest.testExecuteWithNullPassword()", "testcase": true, "constructor": false, "invocations": ["setField", "execute", "fail", "assertEquals", "getErrorCode", "assertEquals", "getMessage", "createUserAccount", "verify", "never"]}, "focal_class": {"identifier": "CreateAccountCmd", "superclass": "extends BaseCmd", "interfaces": "", "fields": [{"original_string": "public static final Logger s_logger = LoggerFactory.getLogger(CreateAccountCmd.class.getName());", "modifier": "public static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(CreateAccountCmd.class.getName())", "var_name": "s_logger"}, {"original_string": "private static final String s_name = \"createaccountresponse\";", "modifier": "private static final", "type": "String", "declarator": "s_name = \"createaccountresponse\"", "var_name": "s_name"}, {"original_string": "@Parameter(name = ApiConstants.ACCOUNT,\n               type = CommandType.STRING,\n               description = \"Creates the user under the specified account. If no account is specified, the username will be used as the account name.\")\n    private String accountName;", "modifier": "@Parameter(name = ApiConstants.ACCOUNT,\n               type = CommandType.STRING,\n               description = \"Creates the user under the specified account. If no account is specified, the username will be used as the account name.\")\n    private", "type": "String", "declarator": "accountName", "var_name": "accountName"}, {"original_string": "@Parameter(name = ApiConstants.ACCOUNT_TYPE,\n               type = CommandType.SHORT,\n               required = true,\n               description = \"Type of the account.  Specify 0 for user, 1 for root admin, and 2 for domain admin\")\n    private Short accountType;", "modifier": "@Parameter(name = ApiConstants.ACCOUNT_TYPE,\n               type = CommandType.SHORT,\n               required = true,\n               description = \"Type of the account.  Specify 0 for user, 1 for root admin, and 2 for domain admin\")\n    private", "type": "Short", "declarator": "accountType", "var_name": "accountType"}, {"original_string": "@Parameter(name = ApiConstants.DOMAIN_ID, type = CommandType.UUID, entityType = DomainResponse.class, description = \"Creates the user under the specified domain.\")\n    private Long domainId;", "modifier": "@Parameter(name = ApiConstants.DOMAIN_ID, type = CommandType.UUID, entityType = DomainResponse.class, description = \"Creates the user under the specified domain.\")\n    private", "type": "Long", "declarator": "domainId", "var_name": "domainId"}, {"original_string": "@Parameter(name = ApiConstants.EMAIL, type = CommandType.STRING, required = true, description = \"email\")\n    private String email;", "modifier": "@Parameter(name = ApiConstants.EMAIL, type = CommandType.STRING, required = true, description = \"email\")\n    private", "type": "String", "declarator": "email", "var_name": "email"}, {"original_string": "@Parameter(name = ApiConstants.FIRSTNAME, type = CommandType.STRING, required = true, description = \"firstname\")\n    private String firstName;", "modifier": "@Parameter(name = ApiConstants.FIRSTNAME, type = CommandType.STRING, required = true, description = \"firstname\")\n    private", "type": "String", "declarator": "firstName", "var_name": "firstName"}, {"original_string": "@Parameter(name = ApiConstants.LASTNAME, type = CommandType.STRING, required = true, description = \"lastname\")\n    private String lastName;", "modifier": "@Parameter(name = ApiConstants.LASTNAME, type = CommandType.STRING, required = true, description = \"lastname\")\n    private", "type": "String", "declarator": "lastName", "var_name": "lastName"}, {"original_string": "@Parameter(name = ApiConstants.PASSWORD,\n               type = CommandType.STRING,\n               required = true,\n               description = \"Clear text password (Default hashed to SHA256SALT). If you wish to use any other hashing algorithm, you would need to write a custom authentication adapter See Docs section.\")\n    private String password;", "modifier": "@Parameter(name = ApiConstants.PASSWORD,\n               type = CommandType.STRING,\n               required = true,\n               description = \"Clear text password (Default hashed to SHA256SALT). If you wish to use any other hashing algorithm, you would need to write a custom authentication adapter See Docs section.\")\n    private", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "@Parameter(name = ApiConstants.TIMEZONE,\n               type = CommandType.STRING,\n               description = \"Specifies a timezone for this command. For more information on the timezone parameter, see Time Zone Format.\")\n    private String timeZone;", "modifier": "@Parameter(name = ApiConstants.TIMEZONE,\n               type = CommandType.STRING,\n               description = \"Specifies a timezone for this command. For more information on the timezone parameter, see Time Zone Format.\")\n    private", "type": "String", "declarator": "timeZone", "var_name": "timeZone"}, {"original_string": "@Parameter(name = ApiConstants.USERNAME, type = CommandType.STRING, required = true, description = \"Unique username.\")\n    private String userName;", "modifier": "@Parameter(name = ApiConstants.USERNAME, type = CommandType.STRING, required = true, description = \"Unique username.\")\n    private", "type": "String", "declarator": "userName", "var_name": "userName"}, {"original_string": "@Parameter(name = ApiConstants.NETWORK_DOMAIN, type = CommandType.STRING, description = \"Network domain for the account's networks\")\n    private String networkDomain;", "modifier": "@Parameter(name = ApiConstants.NETWORK_DOMAIN, type = CommandType.STRING, description = \"Network domain for the account's networks\")\n    private", "type": "String", "declarator": "networkDomain", "var_name": "networkDomain"}, {"original_string": "@Parameter(name = ApiConstants.ACCOUNT_DETAILS, type = CommandType.MAP, description = \"details for account used to store specific parameters\")\n    private Map<String, String> details;", "modifier": "@Parameter(name = ApiConstants.ACCOUNT_DETAILS, type = CommandType.MAP, description = \"details for account used to store specific parameters\")\n    private", "type": "Map<String, String>", "declarator": "details", "var_name": "details"}, {"original_string": "@Parameter(name = ApiConstants.ACCOUNT_ID, type = CommandType.STRING, description = \"Account UUID, required for adding account from external provisioning system\")\n    private String accountUUID;", "modifier": "@Parameter(name = ApiConstants.ACCOUNT_ID, type = CommandType.STRING, description = \"Account UUID, required for adding account from external provisioning system\")\n    private", "type": "String", "declarator": "accountUUID", "var_name": "accountUUID"}, {"original_string": "@Parameter(name = ApiConstants.USER_ID, type = CommandType.STRING, description = \"User UUID, required for adding account from external provisioning system\")\n    private String userUUID;", "modifier": "@Parameter(name = ApiConstants.USER_ID, type = CommandType.STRING, description = \"User UUID, required for adding account from external provisioning system\")\n    private", "type": "String", "declarator": "userUUID", "var_name": "userUUID"}], "methods": [{"identifier": "getAccountName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAccountName()", "full_signature": "public String getAccountName()", "class_method_signature": "CreateAccountCmd.getAccountName()", "testcase": false, "constructor": false}, {"identifier": "getAccountType", "parameters": "()", "modifiers": "public", "return": "Short", "signature": "Short getAccountType()", "full_signature": "public Short getAccountType()", "class_method_signature": "CreateAccountCmd.getAccountType()", "testcase": false, "constructor": false}, {"identifier": "getDomainId", "parameters": "()", "modifiers": "public", "return": "Long", "signature": "Long getDomainId()", "full_signature": "public Long getDomainId()", "class_method_signature": "CreateAccountCmd.getDomainId()", "testcase": false, "constructor": false}, {"identifier": "getEmail", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEmail()", "full_signature": "public String getEmail()", "class_method_signature": "CreateAccountCmd.getEmail()", "testcase": false, "constructor": false}, {"identifier": "getFirstName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFirstName()", "full_signature": "public String getFirstName()", "class_method_signature": "CreateAccountCmd.getFirstName()", "testcase": false, "constructor": false}, {"identifier": "getLastName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLastName()", "full_signature": "public String getLastName()", "class_method_signature": "CreateAccountCmd.getLastName()", "testcase": false, "constructor": false}, {"identifier": "getPassword", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPassword()", "full_signature": "public String getPassword()", "class_method_signature": "CreateAccountCmd.getPassword()", "testcase": false, "constructor": false}, {"identifier": "getTimeZone", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTimeZone()", "full_signature": "public String getTimeZone()", "class_method_signature": "CreateAccountCmd.getTimeZone()", "testcase": false, "constructor": false}, {"identifier": "getUsername", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUsername()", "full_signature": "public String getUsername()", "class_method_signature": "CreateAccountCmd.getUsername()", "testcase": false, "constructor": false}, {"identifier": "getNetworkDomain", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNetworkDomain()", "full_signature": "public String getNetworkDomain()", "class_method_signature": "CreateAccountCmd.getNetworkDomain()", "testcase": false, "constructor": false}, {"identifier": "getDetails", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getDetails()", "full_signature": "public Map<String, String> getDetails()", "class_method_signature": "CreateAccountCmd.getDetails()", "testcase": false, "constructor": false}, {"identifier": "getAccountUUID", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAccountUUID()", "full_signature": "public String getAccountUUID()", "class_method_signature": "CreateAccountCmd.getAccountUUID()", "testcase": false, "constructor": false}, {"identifier": "getUserUUID", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUserUUID()", "full_signature": "public String getUserUUID()", "class_method_signature": "CreateAccountCmd.getUserUUID()", "testcase": false, "constructor": false}, {"identifier": "getCommandName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getCommandName()", "full_signature": "@Override public String getCommandName()", "class_method_signature": "CreateAccountCmd.getCommandName()", "testcase": false, "constructor": false}, {"identifier": "getEntityOwnerId", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getEntityOwnerId()", "full_signature": "@Override public long getEntityOwnerId()", "class_method_signature": "CreateAccountCmd.getEntityOwnerId()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "CreateAccountCmd.execute()", "testcase": false, "constructor": false}, {"identifier": "validateParams", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void validateParams()", "full_signature": "private void validateParams()", "class_method_signature": "CreateAccountCmd.validateParams()", "testcase": false, "constructor": false}], "file": "api/src/main/java/org/apache/cloudstack/api/command/admin/account/CreateAccountCmd.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute() {\n        validateParams();\n        CallContext.current().setEventDetails(\"Account Name: \" + getAccountName() + \", Domain Id:\" + getDomainId());\n        UserAccount userAccount =\n            _accountService.createUserAccount(getUsername(), getPassword(), getFirstName(), getLastName(), getEmail(), getTimeZone(), getAccountName(), getAccountType(),\n                getDomainId(), getNetworkDomain(), getDetails(), getAccountUUID(), getUserUUID());\n        if (userAccount != null) {\n            AccountResponse response = _responseGenerator.createUserAccountResponse(ResponseView.Full, userAccount);\n            response.setResponseName(getCommandName());\n            setResponseObject(response);\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to create a user account\");\n        }\n    }", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "CreateAccountCmd.execute()", "testcase": false, "constructor": false, "invocations": ["validateParams", "setEventDetails", "current", "getAccountName", "getDomainId", "createUserAccount", "getUsername", "getPassword", "getFirstName", "getLastName", "getEmail", "getTimeZone", "getAccountName", "getAccountType", "getDomainId", "getNetworkDomain", "getDetails", "getAccountUUID", "getUserUUID", "createUserAccountResponse", "setResponseName", "getCommandName", "setResponseObject"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}