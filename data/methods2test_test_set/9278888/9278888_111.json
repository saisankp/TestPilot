{"test_class": {"identifier": "HttpClientHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public IntegrationTestSpanHandler spanHandler = new IntegrationTestSpanHandler();", "modifier": "@Rule public", "type": "IntegrationTestSpanHandler", "declarator": "spanHandler = new IntegrationTestSpanHandler()", "var_name": "spanHandler"}, {"original_string": "TraceContext context = TraceContext.newBuilder().traceId(1L).spanId(1L).sampled(true).build();", "modifier": "", "type": "TraceContext", "declarator": "context = TraceContext.newBuilder().traceId(1L).spanId(1L).sampled(true).build()", "var_name": "context"}, {"original_string": "HttpTracing httpTracing;", "modifier": "", "type": "HttpTracing", "declarator": "httpTracing", "var_name": "httpTracing"}, {"original_string": "HttpClientHandler<HttpClientRequest, HttpClientResponse> handler;", "modifier": "", "type": "HttpClientHandler<HttpClientRequest, HttpClientResponse>", "declarator": "handler", "var_name": "handler"}, {"original_string": "@Mock(answer = CALLS_REAL_METHODS) HttpClientRequest request;", "modifier": "@Mock(answer = CALLS_REAL_METHODS)", "type": "HttpClientRequest", "declarator": "request", "var_name": "request"}, {"original_string": "@Mock(answer = CALLS_REAL_METHODS) HttpClientResponse response;", "modifier": "@Mock(answer = CALLS_REAL_METHODS)", "type": "HttpClientResponse", "declarator": "response", "var_name": "response"}], "file": "instrumentation/http/src/test/java/brave/http/HttpClientHandlerTest.java"}, "test_case": {"identifier": "handleSendWithParent_overrideContext", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void handleSendWithParent_overrideContext() {\n    try (\n      CurrentTraceContext.Scope ws = httpTracing.tracing.currentTraceContext().newScope(context)) {\n      brave.Span span = handler.handleSendWithParent(request, null);\n\n      // If the overwrite was successful, we have a root span.\n      assertThat(span.context().parentIdAsLong()).isZero();\n    }\n  }", "signature": "void handleSendWithParent_overrideContext()", "full_signature": "@Test public void handleSendWithParent_overrideContext()", "class_method_signature": "HttpClientHandlerTest.handleSendWithParent_overrideContext()", "testcase": true, "constructor": false, "invocations": ["newScope", "currentTraceContext", "handleSendWithParent", "isZero", "assertThat", "parentIdAsLong", "context"]}, "focal_class": {"identifier": "HttpClientHandler", "superclass": "extends HttpHandler", "interfaces": "", "fields": [{"original_string": "final Tracer tracer;", "modifier": "final", "type": "Tracer", "declarator": "tracer", "var_name": "tracer"}, {"original_string": "@Deprecated @Nullable final HttpClientAdapter<Req, Resp> adapter;", "modifier": "@Deprecated @Nullable final", "type": "HttpClientAdapter<Req, Resp>", "declarator": "adapter", "var_name": "adapter"}, {"original_string": "final Sampler sampler;", "modifier": "final", "type": "Sampler", "declarator": "sampler", "var_name": "sampler"}, {"original_string": "final SamplerFunction<HttpRequest> httpSampler;", "modifier": "final", "type": "SamplerFunction<HttpRequest>", "declarator": "httpSampler", "var_name": "httpSampler"}, {"original_string": "@Nullable final String serverName;", "modifier": "@Nullable final", "type": "String", "declarator": "serverName", "var_name": "serverName"}, {"original_string": "final Injector<HttpClientRequest> defaultInjector;", "modifier": "final", "type": "Injector<HttpClientRequest>", "declarator": "defaultInjector", "var_name": "defaultInjector"}], "methods": [{"identifier": "create", "parameters": "(\n    HttpTracing httpTracing)", "modifiers": "public static", "return": "HttpClientHandler<HttpClientRequest, HttpClientResponse>", "signature": "HttpClientHandler<HttpClientRequest, HttpClientResponse> create(\n    HttpTracing httpTracing)", "full_signature": "public static HttpClientHandler<HttpClientRequest, HttpClientResponse> create(\n    HttpTracing httpTracing)", "class_method_signature": "HttpClientHandler.create(\n    HttpTracing httpTracing)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(HttpTracing httpTracing,\n    HttpClientAdapter<Req, Resp> adapter)", "modifiers": "@Deprecated public static", "return": "HttpClientHandler<Req, Resp>", "signature": "HttpClientHandler<Req, Resp> create(HttpTracing httpTracing,\n    HttpClientAdapter<Req, Resp> adapter)", "full_signature": "@Deprecated public static HttpClientHandler<Req, Resp> create(HttpTracing httpTracing,\n    HttpClientAdapter<Req, Resp> adapter)", "class_method_signature": "HttpClientHandler.create(HttpTracing httpTracing,\n    HttpClientAdapter<Req, Resp> adapter)", "testcase": false, "constructor": false}, {"identifier": "HttpClientHandler", "parameters": "(HttpTracing httpTracing, @Deprecated HttpClientAdapter<Req, Resp> adapter)", "modifiers": "", "return": "", "signature": " HttpClientHandler(HttpTracing httpTracing, @Deprecated HttpClientAdapter<Req, Resp> adapter)", "full_signature": "  HttpClientHandler(HttpTracing httpTracing, @Deprecated HttpClientAdapter<Req, Resp> adapter)", "class_method_signature": "HttpClientHandler.HttpClientHandler(HttpTracing httpTracing, @Deprecated HttpClientAdapter<Req, Resp> adapter)", "testcase": false, "constructor": true}, {"identifier": "handleSend", "parameters": "(HttpClientRequest request)", "modifiers": "public", "return": "Span", "signature": "Span handleSend(HttpClientRequest request)", "full_signature": "public Span handleSend(HttpClientRequest request)", "class_method_signature": "HttpClientHandler.handleSend(HttpClientRequest request)", "testcase": false, "constructor": false}, {"identifier": "handleSendWithParent", "parameters": "(HttpClientRequest request, @Nullable TraceContext parent)", "modifiers": "public", "return": "Span", "signature": "Span handleSendWithParent(HttpClientRequest request, @Nullable TraceContext parent)", "full_signature": "public Span handleSendWithParent(HttpClientRequest request, @Nullable TraceContext parent)", "class_method_signature": "HttpClientHandler.handleSendWithParent(HttpClientRequest request, @Nullable TraceContext parent)", "testcase": false, "constructor": false}, {"identifier": "handleSend", "parameters": "(HttpClientRequest request, Span span)", "modifiers": "public", "return": "Span", "signature": "Span handleSend(HttpClientRequest request, Span span)", "full_signature": "public Span handleSend(HttpClientRequest request, Span span)", "class_method_signature": "HttpClientHandler.handleSend(HttpClientRequest request, Span span)", "testcase": false, "constructor": false}, {"identifier": "parseRequest", "parameters": "(HttpRequest request, Span span)", "modifiers": "@Override", "return": "void", "signature": "void parseRequest(HttpRequest request, Span span)", "full_signature": "@Override void parseRequest(HttpRequest request, Span span)", "class_method_signature": "HttpClientHandler.parseRequest(HttpRequest request, Span span)", "testcase": false, "constructor": false}, {"identifier": "handleSend", "parameters": "(Injector<Req> injector, Req request)", "modifiers": "@Deprecated public", "return": "Span", "signature": "Span handleSend(Injector<Req> injector, Req request)", "full_signature": "@Deprecated public Span handleSend(Injector<Req> injector, Req request)", "class_method_signature": "HttpClientHandler.handleSend(Injector<Req> injector, Req request)", "testcase": false, "constructor": false}, {"identifier": "handleSend", "parameters": "(Injector<C> injector, C carrier, Req request)", "modifiers": "@Deprecated public", "return": "Span", "signature": "Span handleSend(Injector<C> injector, C carrier, Req request)", "full_signature": "@Deprecated public Span handleSend(Injector<C> injector, C carrier, Req request)", "class_method_signature": "HttpClientHandler.handleSend(Injector<C> injector, C carrier, Req request)", "testcase": false, "constructor": false}, {"identifier": "handleSend", "parameters": "(Injector<Req> injector, Req request, Span span)", "modifiers": "@Deprecated public", "return": "Span", "signature": "Span handleSend(Injector<Req> injector, Req request, Span span)", "full_signature": "@Deprecated public Span handleSend(Injector<Req> injector, Req request, Span span)", "class_method_signature": "HttpClientHandler.handleSend(Injector<Req> injector, Req request, Span span)", "testcase": false, "constructor": false}, {"identifier": "handleSend", "parameters": "(Injector<C> injector, C carrier, Req request, Span span)", "modifiers": "@Deprecated public", "return": "Span", "signature": "Span handleSend(Injector<C> injector, C carrier, Req request, Span span)", "full_signature": "@Deprecated public Span handleSend(Injector<C> injector, C carrier, Req request, Span span)", "class_method_signature": "HttpClientHandler.handleSend(Injector<C> injector, C carrier, Req request, Span span)", "testcase": false, "constructor": false}, {"identifier": "nextSpan", "parameters": "(Req request)", "modifiers": "@Deprecated public", "return": "Span", "signature": "Span nextSpan(Req request)", "full_signature": "@Deprecated public Span nextSpan(Req request)", "class_method_signature": "HttpClientHandler.nextSpan(Req request)", "testcase": false, "constructor": false}, {"identifier": "handleReceive", "parameters": "(@Nullable Resp response, @Nullable Throwable error, Span span)", "modifiers": "@Deprecated public", "return": "void", "signature": "void handleReceive(@Nullable Resp response, @Nullable Throwable error, Span span)", "full_signature": "@Deprecated public void handleReceive(@Nullable Resp response, @Nullable Throwable error, Span span)", "class_method_signature": "HttpClientHandler.handleReceive(@Nullable Resp response, @Nullable Throwable error, Span span)", "testcase": false, "constructor": false}, {"identifier": "handleReceive", "parameters": "(HttpClientResponse response, Span span)", "modifiers": "public", "return": "void", "signature": "void handleReceive(HttpClientResponse response, Span span)", "full_signature": "public void handleReceive(HttpClientResponse response, Span span)", "class_method_signature": "HttpClientHandler.handleReceive(HttpClientResponse response, Span span)", "testcase": false, "constructor": false}], "file": "instrumentation/http/src/main/java/brave/http/HttpClientHandler.java"}, "focal_method": {"identifier": "handleSendWithParent", "parameters": "(HttpClientRequest request, @Nullable TraceContext parent)", "modifiers": "public", "return": "Span", "body": "public Span handleSendWithParent(HttpClientRequest request, @Nullable TraceContext parent) {\n    if (request == null) throw new NullPointerException(\"request == null\");\n    return handleSend(request, tracer.nextSpanWithParent(httpSampler, request, parent));\n  }", "signature": "Span handleSendWithParent(HttpClientRequest request, @Nullable TraceContext parent)", "full_signature": "public Span handleSendWithParent(HttpClientRequest request, @Nullable TraceContext parent)", "class_method_signature": "HttpClientHandler.handleSendWithParent(HttpClientRequest request, @Nullable TraceContext parent)", "testcase": false, "constructor": false, "invocations": ["handleSend", "nextSpanWithParent"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}