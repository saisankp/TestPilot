{"test_class": {"identifier": "EventNoteValidationHookTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private EventNoteValidationHook hook;", "modifier": "private", "type": "EventNoteValidationHook", "declarator": "hook", "var_name": "hook"}, {"original_string": "@Mock\n    private TrackedEntityCommentService commentService;", "modifier": "@Mock\n    private", "type": "TrackedEntityCommentService", "declarator": "commentService", "var_name": "commentService"}, {"original_string": "@Mock\n    private TrackedEntityAttributeService teAttrService;", "modifier": "@Mock\n    private", "type": "TrackedEntityAttributeService", "declarator": "teAttrService", "var_name": "teAttrService"}, {"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "private BeanRandomizer rnd;", "modifier": "private", "type": "BeanRandomizer", "declarator": "rnd", "var_name": "rnd"}, {"original_string": "private Event event;", "modifier": "private", "type": "Event", "declarator": "event", "var_name": "event"}], "file": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHookTest.java"}, "test_case": {"identifier": "verifyOnlyNonExistingNoteArePersisted", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void verifyOnlyNonExistingNoteArePersisted()\n    {\n        // Given\n        final List<Note> notes = rnd.randomObjects( Note.class, 3, \"newNote\" );\n        final List<Note> existingNotes = rnd.randomObjects( Note.class, 2, \"newNote\" );\n\n        event.setNotes( newArrayList( concat( notes, existingNotes ) ) );\n\n        // When\n        when( commentService.filterExistingNotes( anyList() ) )\n            .thenReturn( notes.stream().map( Note::getNote ).collect( Collectors.toList() ) );\n\n        this.hook.validateEvent( mock( ValidationErrorReporter.class ), event );\n\n        // Then\n        assertThat( event.getNotes(), hasSize( 3 ) );\n    }", "signature": "void verifyOnlyNonExistingNoteArePersisted()", "full_signature": "@Test public void verifyOnlyNonExistingNoteArePersisted()", "class_method_signature": "EventNoteValidationHookTest.verifyOnlyNonExistingNoteArePersisted()", "testcase": true, "constructor": false, "invocations": ["randomObjects", "randomObjects", "setNotes", "newArrayList", "concat", "thenReturn", "when", "filterExistingNotes", "anyList", "collect", "map", "stream", "toList", "validateEvent", "mock", "assertThat", "getNotes", "hasSize"]}, "focal_class": {"identifier": "EventNoteValidationHook", "superclass": "extends AbstractTrackerDtoValidationHook", "interfaces": "", "fields": [{"original_string": "private final TrackedEntityCommentService commentService;", "modifier": "private final", "type": "TrackedEntityCommentService", "declarator": "commentService", "var_name": "commentService"}], "methods": [{"identifier": "EventNoteValidationHook", "parameters": "( TrackedEntityAttributeService teAttrService,\n        TrackedEntityCommentService commentService )", "modifiers": "public", "return": "", "signature": " EventNoteValidationHook( TrackedEntityAttributeService teAttrService,\n        TrackedEntityCommentService commentService )", "full_signature": "public  EventNoteValidationHook( TrackedEntityAttributeService teAttrService,\n        TrackedEntityCommentService commentService )", "class_method_signature": "EventNoteValidationHook.EventNoteValidationHook( TrackedEntityAttributeService teAttrService,\n        TrackedEntityCommentService commentService )", "testcase": false, "constructor": true}, {"identifier": "validateEvent", "parameters": "( ValidationErrorReporter reporter, Event event )", "modifiers": "@Override public", "return": "void", "signature": "void validateEvent( ValidationErrorReporter reporter, Event event )", "full_signature": "@Override public void validateEvent( ValidationErrorReporter reporter, Event event )", "class_method_signature": "EventNoteValidationHook.validateEvent( ValidationErrorReporter reporter, Event event )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java"}, "focal_method": {"identifier": "validateEvent", "parameters": "( ValidationErrorReporter reporter, Event event )", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void validateEvent( ValidationErrorReporter reporter, Event event )\n    {\n        event.setNotes( NoteValidationUtils.getPersistableNotes( commentService, event.getNotes() ) );\n    }", "signature": "void validateEvent( ValidationErrorReporter reporter, Event event )", "full_signature": "@Override public void validateEvent( ValidationErrorReporter reporter, Event event )", "class_method_signature": "EventNoteValidationHook.validateEvent( ValidationErrorReporter reporter, Event event )", "testcase": false, "constructor": false, "invocations": ["setNotes", "getPersistableNotes", "getNotes"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}