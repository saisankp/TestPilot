{"test_class": {"identifier": "TestConvertClassToReflectedType", "superclass": "", "interfaces": "", "fields": [], "file": "fluent-reflection/src/test/java/com/lexicalscope/fluentreflection/TestConvertClassToReflectedType.java"}, "test_case": {"identifier": "classCanBeConvertedToReflectedType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void classCanBeConvertedToReflectedType() throws Exception {\n        assertThat(\n                new ConvertClassToReflectedType(new ReflectedTypeFactoryImpl()).convert(ExampleClass.class),\n                reflectingOn(ExampleClass.class));\n    }", "signature": "void classCanBeConvertedToReflectedType()", "full_signature": "@Test public void classCanBeConvertedToReflectedType()", "class_method_signature": "TestConvertClassToReflectedType.classCanBeConvertedToReflectedType()", "testcase": true, "constructor": false, "invocations": ["assertThat", "convert", "reflectingOn"]}, "focal_class": {"identifier": "ConvertClassToReflectedType", "superclass": "", "interfaces": "implements Converter<Class<?>, FluentClass<?>>", "fields": [{"original_string": "private final ReflectedTypeFactory reflectedTypeFactory;", "modifier": "private final", "type": "ReflectedTypeFactory", "declarator": "reflectedTypeFactory", "var_name": "reflectedTypeFactory"}], "methods": [{"identifier": "ConvertClassToReflectedType", "parameters": "(final ReflectedTypeFactory reflectedTypeFactory)", "modifiers": "public", "return": "", "signature": " ConvertClassToReflectedType(final ReflectedTypeFactory reflectedTypeFactory)", "full_signature": "public  ConvertClassToReflectedType(final ReflectedTypeFactory reflectedTypeFactory)", "class_method_signature": "ConvertClassToReflectedType.ConvertClassToReflectedType(final ReflectedTypeFactory reflectedTypeFactory)", "testcase": false, "constructor": true}, {"identifier": "convert", "parameters": "(final Class<?> from)", "modifiers": "@Override public", "return": "FluentClass<?>", "signature": "FluentClass<?> convert(final Class<?> from)", "full_signature": "@Override public FluentClass<?> convert(final Class<?> from)", "class_method_signature": "ConvertClassToReflectedType.convert(final Class<?> from)", "testcase": false, "constructor": false}], "file": "fluent-reflection/src/main/java/com/lexicalscope/fluentreflection/ConvertClassToReflectedType.java"}, "focal_method": {"identifier": "convert", "parameters": "(final Class<?> from)", "modifiers": "@Override public", "return": "FluentClass<?>", "body": "@Override\n    public FluentClass<?> convert(final Class<?> from) {\n        return reflectedTypeFactory.reflect(from);\n    }", "signature": "FluentClass<?> convert(final Class<?> from)", "full_signature": "@Override public FluentClass<?> convert(final Class<?> from)", "class_method_signature": "ConvertClassToReflectedType.convert(final Class<?> from)", "testcase": false, "constructor": false, "invocations": ["reflect"]}, "repository": {"repo_id": 2193717, "url": "https://github.com/lexicalscope/fluent-reflection", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 8596, "license": "licensed"}}