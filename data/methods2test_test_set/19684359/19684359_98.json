{"test_class": {"identifier": "BigQueryUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Bigquery mockBigQuery;", "modifier": "private", "type": "Bigquery", "declarator": "mockBigQuery", "var_name": "mockBigQuery"}, {"original_string": "private Progressable mockProgressable;", "modifier": "private", "type": "Progressable", "declarator": "mockProgressable", "var_name": "mockProgressable"}, {"original_string": "private String projectId = \"Test\";", "modifier": "private", "type": "String", "declarator": "projectId = \"Test\"", "var_name": "projectId"}, {"original_string": "private JobReference jobReference;", "modifier": "private", "type": "JobReference", "declarator": "jobReference", "var_name": "jobReference"}, {"original_string": "private Bigquery.Jobs mockBigQueryJobs;", "modifier": "private", "type": "Bigquery.Jobs", "declarator": "mockBigQueryJobs", "var_name": "mockBigQueryJobs"}, {"original_string": "private Bigquery.Jobs.Get mockJobsGet;", "modifier": "private", "type": "Bigquery.Jobs.Get", "declarator": "mockJobsGet", "var_name": "mockJobsGet"}, {"original_string": "private JobStatus jobStatus;", "modifier": "private", "type": "JobStatus", "declarator": "jobStatus", "var_name": "jobStatus"}, {"original_string": "private JobStatus notDoneJobStatus;", "modifier": "private", "type": "JobStatus", "declarator": "notDoneJobStatus", "var_name": "notDoneJobStatus"}, {"original_string": "private Job job;", "modifier": "private", "type": "Job", "declarator": "job", "var_name": "job"}, {"original_string": "private Job notDoneJob;", "modifier": "private", "type": "Job", "declarator": "notDoneJob", "var_name": "notDoneJob"}], "file": "bigquery/src/test/java/com/google/cloud/hadoop/io/bigquery/BigQueryUtilsTest.java"}, "test_case": {"identifier": "testWaitForJobCompletion", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testWaitForJobCompletion() throws Exception {\n    // Return completed job.\n    when(mockJobsGet.execute()).thenReturn(job);\n\n    // Run waitForJobCompletion.\n    BigQueryUtils.waitForJobCompletion(mockBigQuery, projectId, jobReference, mockProgressable);\n\n    // Verify that the method terminates and that the correct calls were sent to the mock BigQuery.\n    verify(mockBigQuery).jobs();\n    verify(mockBigQueryJobs).get(projectId, jobReference.getJobId());\n    verify(mockJobsGet).execute();\n    verify(mockProgressable, never()).progress();\n  }", "signature": "void testWaitForJobCompletion()", "full_signature": "@Test public void testWaitForJobCompletion()", "class_method_signature": "BigQueryUtilsTest.testWaitForJobCompletion()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "execute", "waitForJobCompletion", "jobs", "verify", "get", "verify", "getJobId", "execute", "verify", "progress", "verify", "never"]}, "focal_class": {"identifier": "BigQueryUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final GoogleLogger logger = GoogleLogger.forEnclosingClass();", "modifier": "private static final", "type": "GoogleLogger", "declarator": "logger = GoogleLogger.forEnclosingClass()", "var_name": "logger"}, {"original_string": "public static final int POLL_WAIT_INITIAL_MILLIS =\n      (int) TimeUnit.MILLISECONDS.convert(10, TimeUnit.SECONDS);", "modifier": "public static final", "type": "int", "declarator": "POLL_WAIT_INITIAL_MILLIS =\n      (int) TimeUnit.MILLISECONDS.convert(10, TimeUnit.SECONDS)", "var_name": "POLL_WAIT_INITIAL_MILLIS"}, {"original_string": "public static final int POLL_WAIT_INTERVAL_MAX_MILLIS =\n      (int) TimeUnit.MILLISECONDS.convert(180, TimeUnit.SECONDS);", "modifier": "public static final", "type": "int", "declarator": "POLL_WAIT_INTERVAL_MAX_MILLIS =\n      (int) TimeUnit.MILLISECONDS.convert(180, TimeUnit.SECONDS)", "var_name": "POLL_WAIT_INTERVAL_MAX_MILLIS"}, {"original_string": "public static final int POLL_WAIT_MAX_ELAPSED_MILLIS =\n      (int) TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS);", "modifier": "public static final", "type": "int", "declarator": "POLL_WAIT_MAX_ELAPSED_MILLIS =\n      (int) TimeUnit.MILLISECONDS.convert(1, TimeUnit.DAYS)", "var_name": "POLL_WAIT_MAX_ELAPSED_MILLIS"}], "methods": [{"identifier": "waitForJobCompletion", "parameters": "(\n      Bigquery bigquery, String projectId, JobReference jobReference, Progressable progressable)", "modifiers": "public static", "return": "void", "signature": "void waitForJobCompletion(\n      Bigquery bigquery, String projectId, JobReference jobReference, Progressable progressable)", "full_signature": "public static void waitForJobCompletion(\n      Bigquery bigquery, String projectId, JobReference jobReference, Progressable progressable)", "class_method_signature": "BigQueryUtils.waitForJobCompletion(\n      Bigquery bigquery, String projectId, JobReference jobReference, Progressable progressable)", "testcase": false, "constructor": false}, {"identifier": "getSchemaFromString", "parameters": "(String fields)", "modifiers": "public static", "return": "List<TableFieldSchema>", "signature": "List<TableFieldSchema> getSchemaFromString(String fields)", "full_signature": "public static List<TableFieldSchema> getSchemaFromString(String fields)", "class_method_signature": "BigQueryUtils.getSchemaFromString(String fields)", "testcase": false, "constructor": false}], "file": "bigquery/src/main/java/com/google/cloud/hadoop/io/bigquery/BigQueryUtils.java"}, "focal_method": {"identifier": "waitForJobCompletion", "parameters": "(\n      Bigquery bigquery, String projectId, JobReference jobReference, Progressable progressable)", "modifiers": "public static", "return": "void", "body": "public static void waitForJobCompletion(\n      Bigquery bigquery, String projectId, JobReference jobReference, Progressable progressable)\n      throws IOException, InterruptedException {\n\n    Sleeper sleeper = Sleeper.DEFAULT;\n    BackOff pollBackOff =\n        new ExponentialBackOff.Builder()\n            .setMaxIntervalMillis(POLL_WAIT_INTERVAL_MAX_MILLIS)\n            .setInitialIntervalMillis(POLL_WAIT_INITIAL_MILLIS)\n            .setMaxElapsedTimeMillis(POLL_WAIT_MAX_ELAPSED_MILLIS)\n            .build();\n\n    // Get starting time.\n    long startTime = System.currentTimeMillis();\n    long elapsedTime = 0;\n    boolean notDone = true;\n\n    // While job is incomplete continue to poll.\n    while (notDone) {\n      BackOff operationBackOff = new ExponentialBackOff();\n      Get get =\n          bigquery\n              .jobs()\n              .get(projectId, jobReference.getJobId())\n              .setLocation(jobReference.getLocation());\n\n      Job pollJob =\n          ResilientOperation.retry(\n              ResilientOperation.getGoogleRequestCallable(get),\n              operationBackOff,\n              RetryDeterminer.RATE_LIMIT_ERRORS,\n              IOException.class,\n              sleeper);\n\n      elapsedTime = System.currentTimeMillis() - startTime;\n      logger.atFine().log(\n          \"Job status (%s ms) %s: %s\",\n          elapsedTime, jobReference.getJobId(), pollJob.getStatus().getState());\n      if (pollJob.getStatus().getState().equals(\"DONE\")) {\n        notDone = false;\n        if (pollJob.getStatus().getErrorResult() != null) {\n          throw new IOException(\n              String.format(\n                  \"Job %s failed: %s. Errors: %s\",\n                  jobReference.getJobId(),\n                  pollJob.getStatus().getErrorResult(),\n                  pollJob.getStatus().getErrors()));\n        }\n      } else {\n        long millisToWait = pollBackOff.nextBackOffMillis();\n        if (millisToWait == BackOff.STOP) {\n          throw new IOException(\n              String.format(\n                  \"Job %s failed to complete after %s millis.\",\n                  jobReference.getJobId(), elapsedTime));\n        }\n        // Pause execution for the configured duration before polling job status again.\n        Thread.sleep(millisToWait);\n        // Call progress to ensure task doesn't time out.\n        progressable.progress();\n      }\n    }\n  }", "signature": "void waitForJobCompletion(\n      Bigquery bigquery, String projectId, JobReference jobReference, Progressable progressable)", "full_signature": "public static void waitForJobCompletion(\n      Bigquery bigquery, String projectId, JobReference jobReference, Progressable progressable)", "class_method_signature": "BigQueryUtils.waitForJobCompletion(\n      Bigquery bigquery, String projectId, JobReference jobReference, Progressable progressable)", "testcase": false, "constructor": false, "invocations": ["build", "setMaxElapsedTimeMillis", "setInitialIntervalMillis", "setMaxIntervalMillis", "currentTimeMillis", "setLocation", "get", "jobs", "getJobId", "getLocation", "retry", "getGoogleRequestCallable", "currentTimeMillis", "log", "atFine", "getJobId", "getState", "getStatus", "equals", "getState", "getStatus", "getErrorResult", "getStatus", "format", "getJobId", "getErrorResult", "getStatus", "getErrors", "getStatus", "nextBackOffMillis", "format", "getJobId", "sleep", "progress"]}, "repository": {"repo_id": 19684359, "url": "https://github.com/GoogleCloudDataproc/bigdata-interop", "stars": 178, "created": "5/12/2014 3:11:55 AM +00:00", "updates": "2020-01-23T23:10:40+00:00", "fork": "False", "license": "licensed"}}