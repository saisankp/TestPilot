{"test_class": {"identifier": "UploadMultipartArchiveCommandTest", "superclass": "extends AbstractCommandTest", "interfaces": "", "fields": [], "file": "glacieruploader-command/src/test/java/de/kopis/glacier/commands/UploadMultipartArchiveCommandTest.java"}, "test_case": {"identifier": "testExec", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExec() throws IOException {\n        final File tempFile = File.createTempFile(\"this is a test with whitespaces\", \".txt\");\n        tempFile.deleteOnExit();\n        try(FileWriter fw = new FileWriter(tempFile)) {\n            fw.write(UUID.randomUUID().toString());\n        }\n\n        final OptionSet options = optionParser.parse(\"--vault\", \"dummy\", \"-m\", tempFile.getAbsolutePath(), \"--partsize\", \"1234\");\n\n        final InitiateMultipartUploadResult initiateResult = new InitiateMultipartUploadResult();\n        initiateResult.setUploadId(UUID.randomUUID().toString());\n        expect(client.initiateMultipartUpload(isA(InitiateMultipartUploadRequest.class))).andReturn(initiateResult).times(1);\n        expect(client.uploadMultipartPart(isA(UploadMultipartPartRequest.class))).andReturn(new UploadMultipartPartResult()).times(1);\n        expect(client.completeMultipartUpload(isA(CompleteMultipartUploadRequest.class))).andReturn(new CompleteMultipartUploadResult()).times(1);\n        replay(client, sqs, sns);\n\n        final UploadMultipartArchiveCommand command = new UploadMultipartArchiveCommand(client, sqs, sns);\n\n        assertTrue(command.valid(options, optionParser));\n        command.exec(options, optionParser);\n\n        verify(client, sqs, sns);\n    }", "signature": "void testExec()", "full_signature": "@Test public void testExec()", "class_method_signature": "UploadMultipartArchiveCommandTest.testExec()", "testcase": true, "constructor": false, "invocations": ["createTempFile", "deleteOnExit", "write", "toString", "randomUUID", "parse", "getAbsolutePath", "setUploadId", "toString", "randomUUID", "times", "andReturn", "expect", "initiateMultipartUpload", "isA", "times", "andReturn", "expect", "uploadMultipartPart", "isA", "times", "andReturn", "expect", "completeMultipartUpload", "isA", "replay", "assertTrue", "valid", "exec", "verify"]}, "focal_class": {"identifier": "UploadMultipartArchiveCommand", "superclass": "extends AbstractCommand", "interfaces": "", "fields": [], "methods": [{"identifier": "UploadMultipartArchiveCommand", "parameters": "(AmazonGlacier client, AmazonSQS sqs, AmazonSNS sns)", "modifiers": "public", "return": "", "signature": " UploadMultipartArchiveCommand(AmazonGlacier client, AmazonSQS sqs, AmazonSNS sns)", "full_signature": "public  UploadMultipartArchiveCommand(AmazonGlacier client, AmazonSQS sqs, AmazonSNS sns)", "class_method_signature": "UploadMultipartArchiveCommand.UploadMultipartArchiveCommand(AmazonGlacier client, AmazonSQS sqs, AmazonSNS sns)", "testcase": false, "constructor": true}, {"identifier": "upload", "parameters": "(final String vaultName, final File uploadFile, final Long partSize)", "modifiers": "private", "return": "void", "signature": "void upload(final String vaultName, final File uploadFile, final Long partSize)", "full_signature": "private void upload(final String vaultName, final File uploadFile, final Long partSize)", "class_method_signature": "UploadMultipartArchiveCommand.upload(final String vaultName, final File uploadFile, final Long partSize)", "testcase": false, "constructor": false}, {"identifier": "initiateMultipartUpload", "parameters": "(final String vaultName, final Long partSize, final String fileName)", "modifiers": "private", "return": "String", "signature": "String initiateMultipartUpload(final String vaultName, final Long partSize, final String fileName)", "full_signature": "private String initiateMultipartUpload(final String vaultName, final Long partSize, final String fileName)", "class_method_signature": "UploadMultipartArchiveCommand.initiateMultipartUpload(final String vaultName, final Long partSize, final String fileName)", "testcase": false, "constructor": false}, {"identifier": "uploadParts", "parameters": "(String uploadId, File file, final String vaultName, final Long partSize)", "modifiers": "private", "return": "String", "signature": "String uploadParts(String uploadId, File file, final String vaultName, final Long partSize)", "full_signature": "private String uploadParts(String uploadId, File file, final String vaultName, final Long partSize)", "class_method_signature": "UploadMultipartArchiveCommand.uploadParts(String uploadId, File file, final String vaultName, final Long partSize)", "testcase": false, "constructor": false}, {"identifier": "newInputSubstream", "parameters": "(File file, long startingPosition, long length)", "modifiers": "private", "return": "InputSubstream", "signature": "InputSubstream newInputSubstream(File file, long startingPosition, long length)", "full_signature": "private InputSubstream newInputSubstream(File file, long startingPosition, long length)", "class_method_signature": "UploadMultipartArchiveCommand.newInputSubstream(File file, long startingPosition, long length)", "testcase": false, "constructor": false}, {"identifier": "completeMultiPartUpload", "parameters": "(String uploadId, File file, final String vaultName,\n                                                                  String checksum)", "modifiers": "private", "return": "CompleteMultipartUploadResult", "signature": "CompleteMultipartUploadResult completeMultiPartUpload(String uploadId, File file, final String vaultName,\n                                                                  String checksum)", "full_signature": "private CompleteMultipartUploadResult completeMultiPartUpload(String uploadId, File file, final String vaultName,\n                                                                  String checksum)", "class_method_signature": "UploadMultipartArchiveCommand.completeMultiPartUpload(String uploadId, File file, final String vaultName,\n                                                                  String checksum)", "testcase": false, "constructor": false}, {"identifier": "exec", "parameters": "(OptionSet options, GlacierUploaderOptionParser optionParser)", "modifiers": "@Override public", "return": "void", "signature": "void exec(OptionSet options, GlacierUploaderOptionParser optionParser)", "full_signature": "@Override public void exec(OptionSet options, GlacierUploaderOptionParser optionParser)", "class_method_signature": "UploadMultipartArchiveCommand.exec(OptionSet options, GlacierUploaderOptionParser optionParser)", "testcase": false, "constructor": false}, {"identifier": "valid", "parameters": "(OptionSet options, GlacierUploaderOptionParser optionParser)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean valid(OptionSet options, GlacierUploaderOptionParser optionParser)", "full_signature": "@Override public boolean valid(OptionSet options, GlacierUploaderOptionParser optionParser)", "class_method_signature": "UploadMultipartArchiveCommand.valid(OptionSet options, GlacierUploaderOptionParser optionParser)", "testcase": false, "constructor": false}], "file": "glacieruploader-command/src/main/java/de/kopis/glacier/commands/UploadMultipartArchiveCommand.java"}, "focal_method": {"identifier": "exec", "parameters": "(OptionSet options, GlacierUploaderOptionParser optionParser)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void exec(OptionSet options, GlacierUploaderOptionParser optionParser) {\n        final String vaultName = options.valueOf(optionParser.vault);\n        final List<File> optionsFiles = options.valuesOf(optionParser.multipartUpload);\n        final Long partSize = options.valueOf(optionParser.partSize);\n        final List<String> nonOptions = options.nonOptionArguments();\n        final List<File> files = optionParser.mergeNonOptionsFiles(optionsFiles, nonOptions);\n\n        for (File uploadFile : files) {\n            this.upload(vaultName, uploadFile, partSize);\n        }\n    }", "signature": "void exec(OptionSet options, GlacierUploaderOptionParser optionParser)", "full_signature": "@Override public void exec(OptionSet options, GlacierUploaderOptionParser optionParser)", "class_method_signature": "UploadMultipartArchiveCommand.exec(OptionSet options, GlacierUploaderOptionParser optionParser)", "testcase": false, "constructor": false, "invocations": ["valueOf", "valuesOf", "valueOf", "nonOptionArguments", "mergeNonOptionsFiles", "upload"]}, "repository": {"repo_id": 5518934, "url": "https://github.com/MoriTanosuke/glacieruploader", "language": "Java", "is_fork": false, "fork_count": 54, "stargazer_count": 243, "size": 6248, "license": "licensed"}}