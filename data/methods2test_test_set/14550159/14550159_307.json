{"test_class": {"identifier": "StringEntityProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TEST_CONTENT = \"\\u041f\\u0440\\u0438\\u0432\\u0456\\u0442\";", "modifier": "private static final", "type": "String", "declarator": "TEST_CONTENT = \"\\u041f\\u0440\\u0438\\u0432\\u0456\\u0442\"", "var_name": "TEST_CONTENT"}, {"original_string": "private StringEntityProvider stringEntityProvider;", "modifier": "private", "type": "StringEntityProvider", "declarator": "stringEntityProvider", "var_name": "stringEntityProvider"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/provider/StringEntityProviderTest.java"}, "test_case": {"identifier": "isNotReadableForTypeOtherThanString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void isNotReadableForTypeOtherThanString() throws Exception {\n        assertFalse(stringEntityProvider.isReadable(Object.class, null, null, null));\n    }", "signature": "void isNotReadableForTypeOtherThanString()", "full_signature": "@Test public void isNotReadableForTypeOtherThanString()", "class_method_signature": "StringEntityProviderTest.isNotReadableForTypeOtherThanString()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isReadable"]}, "focal_class": {"identifier": "StringEntityProvider", "superclass": "", "interfaces": "implements EntityProvider<String>", "fields": [], "methods": [{"identifier": "isReadable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "StringEntityProvider.isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "readFrom", "parameters": "(Class<String> type,\n                           Type genericType,\n                           Annotation[] annotations,\n                           MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders,\n                           InputStream entityStream)", "modifiers": "@Override public", "return": "String", "signature": "String readFrom(Class<String> type,\n                           Type genericType,\n                           Annotation[] annotations,\n                           MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders,\n                           InputStream entityStream)", "full_signature": "@Override public String readFrom(Class<String> type,\n                           Type genericType,\n                           Annotation[] annotations,\n                           MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders,\n                           InputStream entityStream)", "class_method_signature": "StringEntityProvider.readFrom(Class<String> type,\n                           Type genericType,\n                           Annotation[] annotations,\n                           MediaType mediaType,\n                           MultivaluedMap<String, String> httpHeaders,\n                           InputStream entityStream)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "(String string, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "long", "signature": "long getSize(String string, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public long getSize(String string, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "StringEntityProvider.getSize(String string, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "isWriteable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "StringEntityProvider.isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "writeTo", "parameters": "(String string,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "modifiers": "@Override public", "return": "void", "signature": "void writeTo(String string,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "full_signature": "@Override public void writeTo(String string,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "class_method_signature": "StringEntityProvider.writeTo(String string,\n                        Class<?> type,\n                        Type genericType,\n                        Annotation[] annotations,\n                        MediaType mediaType,\n                        MultivaluedMap<String, Object> httpHeaders,\n                        OutputStream entityStream)", "testcase": false, "constructor": false}, {"identifier": "getCharsetOrUtf8", "parameters": "(MediaType mediaType)", "modifiers": "private", "return": "String", "signature": "String getCharsetOrUtf8(MediaType mediaType)", "full_signature": "private String getCharsetOrUtf8(MediaType mediaType)", "class_method_signature": "StringEntityProvider.getCharsetOrUtf8(MediaType mediaType)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/provider/StringEntityProvider.java"}, "focal_method": {"identifier": "isReadable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType) {\n        return type == String.class;\n    }", "signature": "boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "StringEntityProvider.isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}