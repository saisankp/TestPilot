{"test_class": {"identifier": "SimpleReplicatedLogEntrySerializerTest", "superclass": "", "interfaces": "", "fields": [], "file": "opendaylight/md-sal/sal-akka-raft/src/test/java/org/opendaylight/controller/cluster/raft/persisted/SimpleReplicatedLogEntrySerializerTest.java"}, "test_case": {"identifier": "testToAndFromBinary", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToAndFromBinary() throws NotSerializableException {\n        SimpleReplicatedLogEntry expected = new SimpleReplicatedLogEntry(0, 1,\n                new MockRaftActorContext.MockPayload(\"A\"));\n\n        final ExtendedActorSystem system = (ExtendedActorSystem) ExtendedActorSystem.create(\"test\");\n        final Object deserialized;\n        try {\n            final SimpleReplicatedLogEntrySerializer serializer = new SimpleReplicatedLogEntrySerializer(system);\n            final byte[] bytes = serializer.toBinary(expected);\n            deserialized = serializer.fromBinary(bytes, SimpleReplicatedLogEntry.class);\n        } finally {\n            TestKit.shutdownActorSystem(system);\n        }\n\n        assertNotNull(\"fromBinary returned null\", deserialized);\n        assertEquals(\"fromBinary return type\", SimpleReplicatedLogEntry.class, deserialized.getClass());\n\n        SimpleReplicatedLogEntry actual = (SimpleReplicatedLogEntry)deserialized;\n        assertEquals(\"getTerm\", expected.getTerm(), actual.getTerm());\n        assertEquals(\"getIndex\", expected.getIndex(), actual.getIndex());\n        assertEquals(\"getData\", expected.getData(), actual.getData());\n    }", "signature": "void testToAndFromBinary()", "full_signature": "@Test public void testToAndFromBinary()", "class_method_signature": "SimpleReplicatedLogEntrySerializerTest.testToAndFromBinary()", "testcase": true, "constructor": false, "invocations": ["create", "toBinary", "fromBinary", "shutdownActorSystem", "assertNotNull", "assertEquals", "getClass", "assertEquals", "getTerm", "getTerm", "assertEquals", "getIndex", "getIndex", "assertEquals", "getData", "getData"]}, "focal_class": {"identifier": "SimpleReplicatedLogEntrySerializer", "superclass": "extends JSerializer", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SimpleReplicatedLogEntrySerializer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SimpleReplicatedLogEntrySerializer.class)", "var_name": "LOG"}, {"original_string": "private final ExtendedActorSystem system;", "modifier": "private final", "type": "ExtendedActorSystem", "declarator": "system", "var_name": "system"}], "methods": [{"identifier": "SimpleReplicatedLogEntrySerializer", "parameters": "(final ExtendedActorSystem system)", "modifiers": "public", "return": "", "signature": " SimpleReplicatedLogEntrySerializer(final ExtendedActorSystem system)", "full_signature": "public  SimpleReplicatedLogEntrySerializer(final ExtendedActorSystem system)", "class_method_signature": "SimpleReplicatedLogEntrySerializer.SimpleReplicatedLogEntrySerializer(final ExtendedActorSystem system)", "testcase": false, "constructor": true}, {"identifier": "identifier", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int identifier()", "full_signature": "@Override public int identifier()", "class_method_signature": "SimpleReplicatedLogEntrySerializer.identifier()", "testcase": false, "constructor": false}, {"identifier": "includeManifest", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean includeManifest()", "full_signature": "@Override public boolean includeManifest()", "class_method_signature": "SimpleReplicatedLogEntrySerializer.includeManifest()", "testcase": false, "constructor": false}, {"identifier": "toBinary", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] toBinary(Object obj)", "full_signature": "@Override public byte[] toBinary(Object obj)", "class_method_signature": "SimpleReplicatedLogEntrySerializer.toBinary(Object obj)", "testcase": false, "constructor": false}, {"identifier": "fromBinaryJava", "parameters": "(byte[] bytes, Class<?> manifest)", "modifiers": "@Override public", "return": "Object", "signature": "Object fromBinaryJava(byte[] bytes, Class<?> manifest)", "full_signature": "@Override public Object fromBinaryJava(byte[] bytes, Class<?> manifest)", "class_method_signature": "SimpleReplicatedLogEntrySerializer.fromBinaryJava(byte[] bytes, Class<?> manifest)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/persisted/SimpleReplicatedLogEntrySerializer.java"}, "focal_method": {"identifier": "toBinary", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n    public byte[] toBinary(Object obj) {\n        checkArgument(obj instanceof SimpleReplicatedLogEntry, \"Unsupported object type %s\", obj.getClass());\n\n        SimpleReplicatedLogEntry replicatedLogEntry = (SimpleReplicatedLogEntry)obj;\n        final int estimatedSerializedSize = replicatedLogEntry.estimatedSerializedSize();\n\n        final ByteArrayOutputStream bos = new ByteArrayOutputStream(estimatedSerializedSize);\n        SerializationUtils.serialize(replicatedLogEntry, bos);\n        final byte[] bytes = bos.toByteArray();\n\n        LOG.debug(\"Estimated serialized size {}, data size {} for payload: {}. Actual serialized size: {}\",\n            estimatedSerializedSize, replicatedLogEntry.getData().size(), replicatedLogEntry.getData(), bytes.length);\n\n        return bytes;\n    }", "signature": "byte[] toBinary(Object obj)", "full_signature": "@Override public byte[] toBinary(Object obj)", "class_method_signature": "SimpleReplicatedLogEntrySerializer.toBinary(Object obj)", "testcase": false, "constructor": false, "invocations": ["checkArgument", "getClass", "estimatedSerializedSize", "serialize", "toByteArray", "debug", "size", "getData", "getData"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}