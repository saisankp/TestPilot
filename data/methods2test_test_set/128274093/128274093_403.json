{"test_class": {"identifier": "ObservableReplayTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/operators/observable/ObservableReplayTest.java"}, "test_case": {"identifier": "connectRace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void connectRace() {\n        for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n            final ConnectableObservable<Integer> co = Observable.range(1, 3).replay();\n\n            Runnable r = new Runnable() {\n                @Override\n                public void run() {\n                    co.connect();\n                }\n            };\n\n            TestHelper.race(r, r);\n        }\n    }", "signature": "void connectRace()", "full_signature": "@Test public void connectRace()", "class_method_signature": "ObservableReplayTest.connectRace()", "testcase": true, "constructor": false, "invocations": ["replay", "range", "connect", "race"]}, "focal_class": {"identifier": "ObservableReplay", "superclass": "extends ConnectableObservable<T>", "interfaces": "implements HasUpstreamObservableSource<T>, Disposable", "fields": [{"original_string": "final ObservableSource<T> source;", "modifier": "final", "type": "ObservableSource<T>", "declarator": "source", "var_name": "source"}, {"original_string": "final AtomicReference<ReplayObserver<T>> current;", "modifier": "final", "type": "AtomicReference<ReplayObserver<T>>", "declarator": "current", "var_name": "current"}, {"original_string": "final BufferSupplier<T> bufferFactory;", "modifier": "final", "type": "BufferSupplier<T>", "declarator": "bufferFactory", "var_name": "bufferFactory"}, {"original_string": "final ObservableSource<T> onSubscribe;", "modifier": "final", "type": "ObservableSource<T>", "declarator": "onSubscribe", "var_name": "onSubscribe"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    static final BufferSupplier DEFAULT_UNBOUNDED_FACTORY = new UnBoundedFactory();", "modifier": "@SuppressWarnings(\"rawtypes\")\n    static final", "type": "BufferSupplier", "declarator": "DEFAULT_UNBOUNDED_FACTORY = new UnBoundedFactory()", "var_name": "DEFAULT_UNBOUNDED_FACTORY"}], "methods": [{"identifier": "multicastSelector", "parameters": "(\n            final Callable<? extends ConnectableObservable<U>> connectableFactory,\n            final Function<? super Observable<U>, ? extends ObservableSource<R>> selector)", "modifiers": "public static", "return": "Observable<R>", "signature": "Observable<R> multicastSelector(\n            final Callable<? extends ConnectableObservable<U>> connectableFactory,\n            final Function<? super Observable<U>, ? extends ObservableSource<R>> selector)", "full_signature": "public static Observable<R> multicastSelector(\n            final Callable<? extends ConnectableObservable<U>> connectableFactory,\n            final Function<? super Observable<U>, ? extends ObservableSource<R>> selector)", "class_method_signature": "ObservableReplay.multicastSelector(\n            final Callable<? extends ConnectableObservable<U>> connectableFactory,\n            final Function<? super Observable<U>, ? extends ObservableSource<R>> selector)", "testcase": false, "constructor": false}, {"identifier": "observeOn", "parameters": "(final ConnectableObservable<T> co, final Scheduler scheduler)", "modifiers": "public static", "return": "ConnectableObservable<T>", "signature": "ConnectableObservable<T> observeOn(final ConnectableObservable<T> co, final Scheduler scheduler)", "full_signature": "public static ConnectableObservable<T> observeOn(final ConnectableObservable<T> co, final Scheduler scheduler)", "class_method_signature": "ObservableReplay.observeOn(final ConnectableObservable<T> co, final Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "createFrom", "parameters": "(ObservableSource<? extends T> source)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "ConnectableObservable<T>", "signature": "ConnectableObservable<T> createFrom(ObservableSource<? extends T> source)", "full_signature": "@SuppressWarnings(\"unchecked\") public static ConnectableObservable<T> createFrom(ObservableSource<? extends T> source)", "class_method_signature": "ObservableReplay.createFrom(ObservableSource<? extends T> source)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(ObservableSource<T> source,\n            final int bufferSize)", "modifiers": "public static", "return": "ConnectableObservable<T>", "signature": "ConnectableObservable<T> create(ObservableSource<T> source,\n            final int bufferSize)", "full_signature": "public static ConnectableObservable<T> create(ObservableSource<T> source,\n            final int bufferSize)", "class_method_signature": "ObservableReplay.create(ObservableSource<T> source,\n            final int bufferSize)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(ObservableSource<T> source,\n            long maxAge, TimeUnit unit, Scheduler scheduler)", "modifiers": "public static", "return": "ConnectableObservable<T>", "signature": "ConnectableObservable<T> create(ObservableSource<T> source,\n            long maxAge, TimeUnit unit, Scheduler scheduler)", "full_signature": "public static ConnectableObservable<T> create(ObservableSource<T> source,\n            long maxAge, TimeUnit unit, Scheduler scheduler)", "class_method_signature": "ObservableReplay.create(ObservableSource<T> source,\n            long maxAge, TimeUnit unit, Scheduler scheduler)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(ObservableSource<T> source,\n            final long maxAge, final TimeUnit unit, final Scheduler scheduler, final int bufferSize)", "modifiers": "public static", "return": "ConnectableObservable<T>", "signature": "ConnectableObservable<T> create(ObservableSource<T> source,\n            final long maxAge, final TimeUnit unit, final Scheduler scheduler, final int bufferSize)", "full_signature": "public static ConnectableObservable<T> create(ObservableSource<T> source,\n            final long maxAge, final TimeUnit unit, final Scheduler scheduler, final int bufferSize)", "class_method_signature": "ObservableReplay.create(ObservableSource<T> source,\n            final long maxAge, final TimeUnit unit, final Scheduler scheduler, final int bufferSize)", "testcase": false, "constructor": false}, {"identifier": "create", "parameters": "(ObservableSource<T> source,\n            final BufferSupplier<T> bufferFactory)", "modifiers": "static", "return": "ConnectableObservable<T>", "signature": "ConnectableObservable<T> create(ObservableSource<T> source,\n            final BufferSupplier<T> bufferFactory)", "full_signature": "static ConnectableObservable<T> create(ObservableSource<T> source,\n            final BufferSupplier<T> bufferFactory)", "class_method_signature": "ObservableReplay.create(ObservableSource<T> source,\n            final BufferSupplier<T> bufferFactory)", "testcase": false, "constructor": false}, {"identifier": "ObservableReplay", "parameters": "(ObservableSource<T> onSubscribe, ObservableSource<T> source,\n                             final AtomicReference<ReplayObserver<T>> current,\n                             final BufferSupplier<T> bufferFactory)", "modifiers": "private", "return": "", "signature": " ObservableReplay(ObservableSource<T> onSubscribe, ObservableSource<T> source,\n                             final AtomicReference<ReplayObserver<T>> current,\n                             final BufferSupplier<T> bufferFactory)", "full_signature": "private  ObservableReplay(ObservableSource<T> onSubscribe, ObservableSource<T> source,\n                             final AtomicReference<ReplayObserver<T>> current,\n                             final BufferSupplier<T> bufferFactory)", "class_method_signature": "ObservableReplay.ObservableReplay(ObservableSource<T> onSubscribe, ObservableSource<T> source,\n                             final AtomicReference<ReplayObserver<T>> current,\n                             final BufferSupplier<T> bufferFactory)", "testcase": false, "constructor": true}, {"identifier": "source", "parameters": "()", "modifiers": "@Override public", "return": "ObservableSource<T>", "signature": "ObservableSource<T> source()", "full_signature": "@Override public ObservableSource<T> source()", "class_method_signature": "ObservableReplay.source()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "ObservableReplay.dispose()", "testcase": false, "constructor": false}, {"identifier": "isDisposed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDisposed()", "full_signature": "@Override public boolean isDisposed()", "class_method_signature": "ObservableReplay.isDisposed()", "testcase": false, "constructor": false}, {"identifier": "subscribeActual", "parameters": "(Observer<? super T> observer)", "modifiers": "@Override protected", "return": "void", "signature": "void subscribeActual(Observer<? super T> observer)", "full_signature": "@Override protected void subscribeActual(Observer<? super T> observer)", "class_method_signature": "ObservableReplay.subscribeActual(Observer<? super T> observer)", "testcase": false, "constructor": false}, {"identifier": "connect", "parameters": "(Consumer<? super Disposable> connection)", "modifiers": "@Override public", "return": "void", "signature": "void connect(Consumer<? super Disposable> connection)", "full_signature": "@Override public void connect(Consumer<? super Disposable> connection)", "class_method_signature": "ObservableReplay.connect(Consumer<? super Disposable> connection)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/operators/observable/ObservableReplay.java"}, "focal_method": {"identifier": "connect", "parameters": "(Consumer<? super Disposable> connection)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void connect(Consumer<? super Disposable> connection) {\n        boolean doConnect;\n        ReplayObserver<T> ps;\n        // we loop because concurrent connect/disconnect and termination may change the state\n        for (;;) {\n            // retrieve the current subscriber-to-source instance\n            ps = current.get();\n            // if there is none yet or the current has been disposed\n            if (ps == null || ps.isDisposed()) {\n                // create a new subscriber-to-source\n                ReplayBuffer<T> buf = bufferFactory.call();\n\n                ReplayObserver<T> u = new ReplayObserver<T>(buf);\n                // try setting it as the current subscriber-to-source\n                if (!current.compareAndSet(ps, u)) {\n                    // did not work, perhaps a new subscriber arrived\n                    // and created a new subscriber-to-source as well, retry\n                    continue;\n                }\n                ps = u;\n            }\n            // if connect() was called concurrently, only one of them should actually\n            // connect to the source\n            doConnect = !ps.shouldConnect.get() && ps.shouldConnect.compareAndSet(false, true);\n            break; // NOPMD\n        }\n        /*\n         * Notify the callback that we have a (new) connection which it can dispose\n         * but since ps is unique to a connection, multiple calls to connect() will return the\n         * same Disposable and even if there was a connect-disconnect-connect pair, the older\n         * references won't disconnect the newer connection.\n         * Synchronous source consumers have the opportunity to disconnect via dispose() on the\n         * Disposable as subscribe() may never return in its own.\n         *\n         * Note however, that asynchronously disconnecting a running source might leave\n         * child observers without any terminal event; ReplaySubject does not have this\n         * issue because the dispose() call was always triggered by the child observers\n         * themselves.\n         */\n\n        try {\n            connection.accept(ps);\n        } catch (Throwable ex) {\n            if (doConnect) {\n                ps.shouldConnect.compareAndSet(true, false);\n            }\n            Exceptions.throwIfFatal(ex);\n            throw ExceptionHelper.wrapOrThrow(ex);\n        }\n        if (doConnect) {\n            source.subscribe(ps);\n        }\n    }", "signature": "void connect(Consumer<? super Disposable> connection)", "full_signature": "@Override public void connect(Consumer<? super Disposable> connection)", "class_method_signature": "ObservableReplay.connect(Consumer<? super Disposable> connection)", "testcase": false, "constructor": false, "invocations": ["get", "isDisposed", "call", "compareAndSet", "get", "compareAndSet", "accept", "compareAndSet", "throwIfFatal", "wrapOrThrow", "subscribe"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}