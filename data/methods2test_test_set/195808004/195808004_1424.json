{"test_class": {"identifier": "TestFSDirectory", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Log LOG = LogFactory.getLog(TestFSDirectory.class);", "modifier": "public static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(TestFSDirectory.class)", "var_name": "LOG"}, {"original_string": "private static final long seed = 0;", "modifier": "private static final", "type": "long", "declarator": "seed = 0", "var_name": "seed"}, {"original_string": "private static final short REPLICATION = 3;", "modifier": "private static final", "type": "short", "declarator": "REPLICATION = 3", "var_name": "REPLICATION"}, {"original_string": "private final Path dir = new Path(\"/\" + getClass().getSimpleName());", "modifier": "private final", "type": "Path", "declarator": "dir = new Path(\"/\" + getClass().getSimpleName())", "var_name": "dir"}, {"original_string": "private final Path sub1 = new Path(dir, \"sub1\");", "modifier": "private final", "type": "Path", "declarator": "sub1 = new Path(dir, \"sub1\")", "var_name": "sub1"}, {"original_string": "private final Path file1 = new Path(sub1, \"file1\");", "modifier": "private final", "type": "Path", "declarator": "file1 = new Path(sub1, \"file1\")", "var_name": "file1"}, {"original_string": "private final Path file2 = new Path(sub1, \"file2\");", "modifier": "private final", "type": "Path", "declarator": "file2 = new Path(sub1, \"file2\")", "var_name": "file2"}, {"original_string": "private final Path sub11 = new Path(sub1, \"sub11\");", "modifier": "private final", "type": "Path", "declarator": "sub11 = new Path(sub1, \"sub11\")", "var_name": "sub11"}, {"original_string": "private final Path file3 = new Path(sub11, \"file3\");", "modifier": "private final", "type": "Path", "declarator": "file3 = new Path(sub11, \"file3\")", "var_name": "file3"}, {"original_string": "private final Path file5 = new Path(sub1, \"z_file5\");", "modifier": "private final", "type": "Path", "declarator": "file5 = new Path(sub1, \"z_file5\")", "var_name": "file5"}, {"original_string": "private final Path sub2 = new Path(dir, \"sub2\");", "modifier": "private final", "type": "Path", "declarator": "sub2 = new Path(dir, \"sub2\")", "var_name": "sub2"}, {"original_string": "private final Path file6 = new Path(sub2, \"file6\");", "modifier": "private final", "type": "Path", "declarator": "file6 = new Path(sub2, \"file6\")", "var_name": "file6"}, {"original_string": "private Configuration conf;", "modifier": "private", "type": "Configuration", "declarator": "conf", "var_name": "conf"}, {"original_string": "private MiniDFSCluster cluster;", "modifier": "private", "type": "MiniDFSCluster", "declarator": "cluster", "var_name": "cluster"}, {"original_string": "private FSNamesystem fsn;", "modifier": "private", "type": "FSNamesystem", "declarator": "fsn", "var_name": "fsn"}, {"original_string": "private FSDirectory fsdir;", "modifier": "private", "type": "FSDirectory", "declarator": "fsdir", "var_name": "fsdir"}, {"original_string": "private DistributedFileSystem hdfs;", "modifier": "private", "type": "DistributedFileSystem", "declarator": "hdfs", "var_name": "hdfs"}, {"original_string": "private static final int numGeneratedXAttrs = 256;", "modifier": "private static final", "type": "int", "declarator": "numGeneratedXAttrs = 256", "var_name": "numGeneratedXAttrs"}, {"original_string": "private static final ImmutableList<XAttr> generatedXAttrs =\n      ImmutableList.copyOf(generateXAttrs(numGeneratedXAttrs));", "modifier": "private static final", "type": "ImmutableList<XAttr>", "declarator": "generatedXAttrs =\n      ImmutableList.copyOf(generateXAttrs(numGeneratedXAttrs))", "var_name": "generatedXAttrs"}], "file": "hadoop-hdfs-project/hadoop-hdfs/src/test/java/org/apache/hadoop/hdfs/server/namenode/TestFSDirectory.java"}, "test_case": {"identifier": "testDumpTree", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testDumpTree() throws Exception {\n    final INode root = fsdir.getINode(\"/\");\n\n    LOG.info(\"Original tree\");\n    final StringBuffer b1 = root.dumpTreeRecursively();\n    System.out.println(\"b1=\" + b1);\n\n    final BufferedReader in = new BufferedReader(new StringReader(b1.toString()));\n    \n    String line = in.readLine();\n    checkClassName(line);\n\n    for(; (line = in.readLine()) != null; ) {\n      line = line.trim();\n      if (!line.isEmpty() && !line.contains(\"snapshot\")) {\n        assertTrue(\"line=\" + line,\n            line.startsWith(INodeDirectory.DUMPTREE_LAST_ITEM)\n                || line.startsWith(INodeDirectory.DUMPTREE_EXCEPT_LAST_ITEM)\n        );\n        checkClassName(line);\n      }\n    }\n  }", "signature": "void testDumpTree()", "full_signature": "@Test public void testDumpTree()", "class_method_signature": "TestFSDirectory.testDumpTree()", "testcase": true, "constructor": false, "invocations": ["getINode", "info", "dumpTreeRecursively", "println", "toString", "readLine", "checkClassName", "readLine", "trim", "isEmpty", "contains", "assertTrue", "startsWith", "startsWith", "checkClassName"]}, "focal_class": {"identifier": "FSDirectory", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "static final Logger LOG = LoggerFactory.getLogger(FSDirectory.class);", "modifier": "static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(FSDirectory.class)", "var_name": "LOG"}, {"original_string": "@VisibleForTesting\n  static boolean CHECK_RESERVED_FILE_NAMES = true;", "modifier": "@VisibleForTesting\n  static", "type": "boolean", "declarator": "CHECK_RESERVED_FILE_NAMES = true", "var_name": "CHECK_RESERVED_FILE_NAMES"}, {"original_string": "public final static String DOT_RESERVED_STRING = \".reserved\";", "modifier": "public final static", "type": "String", "declarator": "DOT_RESERVED_STRING = \".reserved\"", "var_name": "DOT_RESERVED_STRING"}, {"original_string": "public final static String DOT_RESERVED_PATH_PREFIX = Path.SEPARATOR\n      + DOT_RESERVED_STRING;", "modifier": "public final static", "type": "String", "declarator": "DOT_RESERVED_PATH_PREFIX = Path.SEPARATOR\n      + DOT_RESERVED_STRING", "var_name": "DOT_RESERVED_PATH_PREFIX"}, {"original_string": "public final static byte[] DOT_RESERVED = \n      DFSUtil.string2Bytes(DOT_RESERVED_STRING);", "modifier": "public final static", "type": "byte[]", "declarator": "DOT_RESERVED = \n      DFSUtil.string2Bytes(DOT_RESERVED_STRING)", "var_name": "DOT_RESERVED"}, {"original_string": "private final static String RAW_STRING = \"raw\";", "modifier": "private final static", "type": "String", "declarator": "RAW_STRING = \"raw\"", "var_name": "RAW_STRING"}, {"original_string": "private final static byte[] RAW = DFSUtil.string2Bytes(RAW_STRING);", "modifier": "private final static", "type": "byte[]", "declarator": "RAW = DFSUtil.string2Bytes(RAW_STRING)", "var_name": "RAW"}, {"original_string": "public final static String DOT_INODES_STRING = \".inodes\";", "modifier": "public final static", "type": "String", "declarator": "DOT_INODES_STRING = \".inodes\"", "var_name": "DOT_INODES_STRING"}, {"original_string": "public final static byte[] DOT_INODES = \n      DFSUtil.string2Bytes(DOT_INODES_STRING);", "modifier": "public final static", "type": "byte[]", "declarator": "DOT_INODES = \n      DFSUtil.string2Bytes(DOT_INODES_STRING)", "var_name": "DOT_INODES"}, {"original_string": "INodeDirectory rootDir;", "modifier": "", "type": "INodeDirectory", "declarator": "rootDir", "var_name": "rootDir"}, {"original_string": "private final FSNamesystem namesystem;", "modifier": "private final", "type": "FSNamesystem", "declarator": "namesystem", "var_name": "namesystem"}, {"original_string": "private volatile boolean skipQuotaCheck = false;", "modifier": "private volatile", "type": "boolean", "declarator": "skipQuotaCheck = false", "var_name": "skipQuotaCheck"}, {"original_string": "private final int maxComponentLength;", "modifier": "private final", "type": "int", "declarator": "maxComponentLength", "var_name": "maxComponentLength"}, {"original_string": "private final int maxDirItems;", "modifier": "private final", "type": "int", "declarator": "maxDirItems", "var_name": "maxDirItems"}, {"original_string": "private final int lsLimit;", "modifier": "private final", "type": "int", "declarator": "lsLimit", "var_name": "lsLimit"}, {"original_string": "private final int contentCountLimit;", "modifier": "private final", "type": "int", "declarator": "contentCountLimit", "var_name": "contentCountLimit"}, {"original_string": "private final long contentSleepMicroSec;", "modifier": "private final", "type": "long", "declarator": "contentSleepMicroSec", "var_name": "contentSleepMicroSec"}, {"original_string": "private final INodeMap inodeMap;", "modifier": "private final", "type": "INodeMap", "declarator": "inodeMap", "var_name": "inodeMap"}, {"original_string": "private long yieldCount = 0;", "modifier": "private", "type": "long", "declarator": "yieldCount = 0", "var_name": "yieldCount"}, {"original_string": "private final int inodeXAttrsLimit;", "modifier": "private final", "type": "int", "declarator": "inodeXAttrsLimit", "var_name": "inodeXAttrsLimit"}, {"original_string": "private final ReentrantReadWriteLock dirLock;", "modifier": "private final", "type": "ReentrantReadWriteLock", "declarator": "dirLock", "var_name": "dirLock"}, {"original_string": "private final boolean isPermissionEnabled;", "modifier": "private final", "type": "boolean", "declarator": "isPermissionEnabled", "var_name": "isPermissionEnabled"}, {"original_string": "private final boolean aclsEnabled;", "modifier": "private final", "type": "boolean", "declarator": "aclsEnabled", "var_name": "aclsEnabled"}, {"original_string": "private final boolean xattrsEnabled;", "modifier": "private final", "type": "boolean", "declarator": "xattrsEnabled", "var_name": "xattrsEnabled"}, {"original_string": "private final int xattrMaxSize;", "modifier": "private final", "type": "int", "declarator": "xattrMaxSize", "var_name": "xattrMaxSize"}, {"original_string": "private final long accessTimePrecision;", "modifier": "private final", "type": "long", "declarator": "accessTimePrecision", "var_name": "accessTimePrecision"}, {"original_string": "private final boolean storagePolicyEnabled;", "modifier": "private final", "type": "boolean", "declarator": "storagePolicyEnabled", "var_name": "storagePolicyEnabled"}, {"original_string": "private final boolean quotaByStorageTypeEnabled;", "modifier": "private final", "type": "boolean", "declarator": "quotaByStorageTypeEnabled", "var_name": "quotaByStorageTypeEnabled"}, {"original_string": "private final String fsOwnerShortUserName;", "modifier": "private final", "type": "String", "declarator": "fsOwnerShortUserName", "var_name": "fsOwnerShortUserName"}, {"original_string": "private final String supergroup;", "modifier": "private final", "type": "String", "declarator": "supergroup", "var_name": "supergroup"}, {"original_string": "private final INodeId inodeId;", "modifier": "private final", "type": "INodeId", "declarator": "inodeId", "var_name": "inodeId"}, {"original_string": "private final FSEditLog editLog;", "modifier": "private final", "type": "FSEditLog", "declarator": "editLog", "var_name": "editLog"}, {"original_string": "private INodeAttributeProvider attributeProvider;", "modifier": "private", "type": "INodeAttributeProvider", "declarator": "attributeProvider", "var_name": "attributeProvider"}, {"original_string": "@VisibleForTesting\n  public final EncryptionZoneManager ezManager;", "modifier": "@VisibleForTesting\n  public final", "type": "EncryptionZoneManager", "declarator": "ezManager", "var_name": "ezManager"}, {"original_string": "private final NameCache<ByteArray> nameCache;", "modifier": "private final", "type": "NameCache<ByteArray>", "declarator": "nameCache", "var_name": "nameCache"}], "methods": [{"identifier": "createRoot", "parameters": "(FSNamesystem namesystem)", "modifiers": "private static", "return": "INodeDirectory", "signature": "INodeDirectory createRoot(FSNamesystem namesystem)", "full_signature": "private static INodeDirectory createRoot(FSNamesystem namesystem)", "class_method_signature": "FSDirectory.createRoot(FSNamesystem namesystem)", "testcase": false, "constructor": false}, {"identifier": "setINodeAttributeProvider", "parameters": "(INodeAttributeProvider provider)", "modifiers": "public", "return": "void", "signature": "void setINodeAttributeProvider(INodeAttributeProvider provider)", "full_signature": "public void setINodeAttributeProvider(INodeAttributeProvider provider)", "class_method_signature": "FSDirectory.setINodeAttributeProvider(INodeAttributeProvider provider)", "testcase": false, "constructor": false}, {"identifier": "readLock", "parameters": "()", "modifiers": "", "return": "void", "signature": "void readLock()", "full_signature": " void readLock()", "class_method_signature": "FSDirectory.readLock()", "testcase": false, "constructor": false}, {"identifier": "readUnlock", "parameters": "()", "modifiers": "", "return": "void", "signature": "void readUnlock()", "full_signature": " void readUnlock()", "class_method_signature": "FSDirectory.readUnlock()", "testcase": false, "constructor": false}, {"identifier": "writeLock", "parameters": "()", "modifiers": "", "return": "void", "signature": "void writeLock()", "full_signature": " void writeLock()", "class_method_signature": "FSDirectory.writeLock()", "testcase": false, "constructor": false}, {"identifier": "writeUnlock", "parameters": "()", "modifiers": "", "return": "void", "signature": "void writeUnlock()", "full_signature": " void writeUnlock()", "class_method_signature": "FSDirectory.writeUnlock()", "testcase": false, "constructor": false}, {"identifier": "hasWriteLock", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean hasWriteLock()", "full_signature": " boolean hasWriteLock()", "class_method_signature": "FSDirectory.hasWriteLock()", "testcase": false, "constructor": false}, {"identifier": "hasReadLock", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean hasReadLock()", "full_signature": " boolean hasReadLock()", "class_method_signature": "FSDirectory.hasReadLock()", "testcase": false, "constructor": false}, {"identifier": "getReadHoldCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getReadHoldCount()", "full_signature": "public int getReadHoldCount()", "class_method_signature": "FSDirectory.getReadHoldCount()", "testcase": false, "constructor": false}, {"identifier": "getWriteHoldCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getWriteHoldCount()", "full_signature": "public int getWriteHoldCount()", "class_method_signature": "FSDirectory.getWriteHoldCount()", "testcase": false, "constructor": false}, {"identifier": "FSDirectory", "parameters": "(FSNamesystem ns, Configuration conf)", "modifiers": "", "return": "", "signature": " FSDirectory(FSNamesystem ns, Configuration conf)", "full_signature": "  FSDirectory(FSNamesystem ns, Configuration conf)", "class_method_signature": "FSDirectory.FSDirectory(FSNamesystem ns, Configuration conf)", "testcase": false, "constructor": true}, {"identifier": "getFSNamesystem", "parameters": "()", "modifiers": "", "return": "FSNamesystem", "signature": "FSNamesystem getFSNamesystem()", "full_signature": " FSNamesystem getFSNamesystem()", "class_method_signature": "FSDirectory.getFSNamesystem()", "testcase": false, "constructor": false}, {"identifier": "getBlockManager", "parameters": "()", "modifiers": "private", "return": "BlockManager", "signature": "BlockManager getBlockManager()", "full_signature": "private BlockManager getBlockManager()", "class_method_signature": "FSDirectory.getBlockManager()", "testcase": false, "constructor": false}, {"identifier": "getRoot", "parameters": "()", "modifiers": "public", "return": "INodeDirectory", "signature": "INodeDirectory getRoot()", "full_signature": "public INodeDirectory getRoot()", "class_method_signature": "FSDirectory.getRoot()", "testcase": false, "constructor": false}, {"identifier": "getBlockStoragePolicySuite", "parameters": "()", "modifiers": "public", "return": "BlockStoragePolicySuite", "signature": "BlockStoragePolicySuite getBlockStoragePolicySuite()", "full_signature": "public BlockStoragePolicySuite getBlockStoragePolicySuite()", "class_method_signature": "FSDirectory.getBlockStoragePolicySuite()", "testcase": false, "constructor": false}, {"identifier": "isPermissionEnabled", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isPermissionEnabled()", "full_signature": " boolean isPermissionEnabled()", "class_method_signature": "FSDirectory.isPermissionEnabled()", "testcase": false, "constructor": false}, {"identifier": "isAclsEnabled", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isAclsEnabled()", "full_signature": " boolean isAclsEnabled()", "class_method_signature": "FSDirectory.isAclsEnabled()", "testcase": false, "constructor": false}, {"identifier": "isXattrsEnabled", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isXattrsEnabled()", "full_signature": " boolean isXattrsEnabled()", "class_method_signature": "FSDirectory.isXattrsEnabled()", "testcase": false, "constructor": false}, {"identifier": "getXattrMaxSize", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getXattrMaxSize()", "full_signature": " int getXattrMaxSize()", "class_method_signature": "FSDirectory.getXattrMaxSize()", "testcase": false, "constructor": false}, {"identifier": "isStoragePolicyEnabled", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isStoragePolicyEnabled()", "full_signature": " boolean isStoragePolicyEnabled()", "class_method_signature": "FSDirectory.isStoragePolicyEnabled()", "testcase": false, "constructor": false}, {"identifier": "isAccessTimeSupported", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isAccessTimeSupported()", "full_signature": " boolean isAccessTimeSupported()", "class_method_signature": "FSDirectory.isAccessTimeSupported()", "testcase": false, "constructor": false}, {"identifier": "isQuotaByStorageTypeEnabled", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean isQuotaByStorageTypeEnabled()", "full_signature": " boolean isQuotaByStorageTypeEnabled()", "class_method_signature": "FSDirectory.isQuotaByStorageTypeEnabled()", "testcase": false, "constructor": false}, {"identifier": "getLsLimit", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getLsLimit()", "full_signature": " int getLsLimit()", "class_method_signature": "FSDirectory.getLsLimit()", "testcase": false, "constructor": false}, {"identifier": "getContentCountLimit", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getContentCountLimit()", "full_signature": " int getContentCountLimit()", "class_method_signature": "FSDirectory.getContentCountLimit()", "testcase": false, "constructor": false}, {"identifier": "getContentSleepMicroSec", "parameters": "()", "modifiers": "", "return": "long", "signature": "long getContentSleepMicroSec()", "full_signature": " long getContentSleepMicroSec()", "class_method_signature": "FSDirectory.getContentSleepMicroSec()", "testcase": false, "constructor": false}, {"identifier": "getInodeXAttrsLimit", "parameters": "()", "modifiers": "", "return": "int", "signature": "int getInodeXAttrsLimit()", "full_signature": " int getInodeXAttrsLimit()", "class_method_signature": "FSDirectory.getInodeXAttrsLimit()", "testcase": false, "constructor": false}, {"identifier": "getEditLog", "parameters": "()", "modifiers": "", "return": "FSEditLog", "signature": "FSEditLog getEditLog()", "full_signature": " FSEditLog getEditLog()", "class_method_signature": "FSDirectory.getEditLog()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "FSDirectory.close()", "testcase": false, "constructor": false}, {"identifier": "markNameCacheInitialized", "parameters": "()", "modifiers": "", "return": "void", "signature": "void markNameCacheInitialized()", "full_signature": " void markNameCacheInitialized()", "class_method_signature": "FSDirectory.markNameCacheInitialized()", "testcase": false, "constructor": false}, {"identifier": "shouldSkipQuotaChecks", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean shouldSkipQuotaChecks()", "full_signature": " boolean shouldSkipQuotaChecks()", "class_method_signature": "FSDirectory.shouldSkipQuotaChecks()", "testcase": false, "constructor": false}, {"identifier": "enableQuotaChecks", "parameters": "()", "modifiers": "", "return": "void", "signature": "void enableQuotaChecks()", "full_signature": " void enableQuotaChecks()", "class_method_signature": "FSDirectory.enableQuotaChecks()", "testcase": false, "constructor": false}, {"identifier": "disableQuotaChecks", "parameters": "()", "modifiers": "", "return": "void", "signature": "void disableQuotaChecks()", "full_signature": " void disableQuotaChecks()", "class_method_signature": "FSDirectory.disableQuotaChecks()", "testcase": false, "constructor": false}, {"identifier": "newINodeFile", "parameters": "(long id, PermissionStatus permissions,\n      long mtime, long atime, short replication, long preferredBlockSize)", "modifiers": "private static", "return": "INodeFile", "signature": "INodeFile newINodeFile(long id, PermissionStatus permissions,\n      long mtime, long atime, short replication, long preferredBlockSize)", "full_signature": "private static INodeFile newINodeFile(long id, PermissionStatus permissions,\n      long mtime, long atime, short replication, long preferredBlockSize)", "class_method_signature": "FSDirectory.newINodeFile(long id, PermissionStatus permissions,\n      long mtime, long atime, short replication, long preferredBlockSize)", "testcase": false, "constructor": false}, {"identifier": "newINodeFile", "parameters": "(long id, PermissionStatus permissions,\n      long mtime, long atime, short replication, long preferredBlockSize,\n      byte storagePolicyId)", "modifiers": "private static", "return": "INodeFile", "signature": "INodeFile newINodeFile(long id, PermissionStatus permissions,\n      long mtime, long atime, short replication, long preferredBlockSize,\n      byte storagePolicyId)", "full_signature": "private static INodeFile newINodeFile(long id, PermissionStatus permissions,\n      long mtime, long atime, short replication, long preferredBlockSize,\n      byte storagePolicyId)", "class_method_signature": "FSDirectory.newINodeFile(long id, PermissionStatus permissions,\n      long mtime, long atime, short replication, long preferredBlockSize,\n      byte storagePolicyId)", "testcase": false, "constructor": false}, {"identifier": "addFile", "parameters": "(INodesInPath existing, String localName, PermissionStatus\n      permissions, short replication, long preferredBlockSize,\n      String clientName, String clientMachine)", "modifiers": "", "return": "INodesInPath", "signature": "INodesInPath addFile(INodesInPath existing, String localName, PermissionStatus\n      permissions, short replication, long preferredBlockSize,\n      String clientName, String clientMachine)", "full_signature": " INodesInPath addFile(INodesInPath existing, String localName, PermissionStatus\n      permissions, short replication, long preferredBlockSize,\n      String clientName, String clientMachine)", "class_method_signature": "FSDirectory.addFile(INodesInPath existing, String localName, PermissionStatus\n      permissions, short replication, long preferredBlockSize,\n      String clientName, String clientMachine)", "testcase": false, "constructor": false}, {"identifier": "addFileForEditLog", "parameters": "(long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List<AclEntry> aclEntries,\n      List<XAttr> xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId)", "modifiers": "", "return": "INodeFile", "signature": "INodeFile addFileForEditLog(long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List<AclEntry> aclEntries,\n      List<XAttr> xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId)", "full_signature": " INodeFile addFileForEditLog(long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List<AclEntry> aclEntries,\n      List<XAttr> xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId)", "class_method_signature": "FSDirectory.addFileForEditLog(long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List<AclEntry> aclEntries,\n      List<XAttr> xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId)", "testcase": false, "constructor": false}, {"identifier": "addBlock", "parameters": "(String path, INodesInPath inodesInPath,\n      Block block, DatanodeStorageInfo[] targets)", "modifiers": "", "return": "BlockInfoContiguous", "signature": "BlockInfoContiguous addBlock(String path, INodesInPath inodesInPath,\n      Block block, DatanodeStorageInfo[] targets)", "full_signature": " BlockInfoContiguous addBlock(String path, INodesInPath inodesInPath,\n      Block block, DatanodeStorageInfo[] targets)", "class_method_signature": "FSDirectory.addBlock(String path, INodesInPath inodesInPath,\n      Block block, DatanodeStorageInfo[] targets)", "testcase": false, "constructor": false}, {"identifier": "removeBlock", "parameters": "(String path, INodesInPath iip, INodeFile fileNode,\n      Block block)", "modifiers": "", "return": "boolean", "signature": "boolean removeBlock(String path, INodesInPath iip, INodeFile fileNode,\n      Block block)", "full_signature": " boolean removeBlock(String path, INodesInPath iip, INodeFile fileNode,\n      Block block)", "class_method_signature": "FSDirectory.removeBlock(String path, INodesInPath iip, INodeFile fileNode,\n      Block block)", "testcase": false, "constructor": false}, {"identifier": "unprotectedRemoveBlock", "parameters": "(String path, INodesInPath iip,\n      INodeFile fileNode, Block block)", "modifiers": "", "return": "boolean", "signature": "boolean unprotectedRemoveBlock(String path, INodesInPath iip,\n      INodeFile fileNode, Block block)", "full_signature": " boolean unprotectedRemoveBlock(String path, INodesInPath iip,\n      INodeFile fileNode, Block block)", "class_method_signature": "FSDirectory.unprotectedRemoveBlock(String path, INodesInPath iip,\n      INodeFile fileNode, Block block)", "testcase": false, "constructor": false}, {"identifier": "resolvePath", "parameters": "(FSPermissionChecker pc, String path, byte[][] pathComponents)", "modifiers": "", "return": "String", "signature": "String resolvePath(FSPermissionChecker pc, String path, byte[][] pathComponents)", "full_signature": " String resolvePath(FSPermissionChecker pc, String path, byte[][] pathComponents)", "class_method_signature": "FSDirectory.resolvePath(FSPermissionChecker pc, String path, byte[][] pathComponents)", "testcase": false, "constructor": false}, {"identifier": "isNonEmptyDirectory", "parameters": "(INodesInPath inodesInPath)", "modifiers": "", "return": "boolean", "signature": "boolean isNonEmptyDirectory(INodesInPath inodesInPath)", "full_signature": " boolean isNonEmptyDirectory(INodesInPath inodesInPath)", "class_method_signature": "FSDirectory.isNonEmptyDirectory(INodesInPath inodesInPath)", "testcase": false, "constructor": false}, {"identifier": "isValidToCreate", "parameters": "(String src, INodesInPath iip)", "modifiers": "", "return": "boolean", "signature": "boolean isValidToCreate(String src, INodesInPath iip)", "full_signature": " boolean isValidToCreate(String src, INodesInPath iip)", "class_method_signature": "FSDirectory.isValidToCreate(String src, INodesInPath iip)", "testcase": false, "constructor": false}, {"identifier": "isDir", "parameters": "(String src)", "modifiers": "", "return": "boolean", "signature": "boolean isDir(String src)", "full_signature": " boolean isDir(String src)", "class_method_signature": "FSDirectory.isDir(String src)", "testcase": false, "constructor": false}, {"identifier": "updateSpaceConsumed", "parameters": "(INodesInPath iip, long nsDelta, long ssDelta, short replication)", "modifiers": "", "return": "void", "signature": "void updateSpaceConsumed(INodesInPath iip, long nsDelta, long ssDelta, short replication)", "full_signature": " void updateSpaceConsumed(INodesInPath iip, long nsDelta, long ssDelta, short replication)", "class_method_signature": "FSDirectory.updateSpaceConsumed(INodesInPath iip, long nsDelta, long ssDelta, short replication)", "testcase": false, "constructor": false}, {"identifier": "updateCountForDelete", "parameters": "(final INode inode, final INodesInPath iip)", "modifiers": "", "return": "void", "signature": "void updateCountForDelete(final INode inode, final INodesInPath iip)", "full_signature": " void updateCountForDelete(final INode inode, final INodesInPath iip)", "class_method_signature": "FSDirectory.updateCountForDelete(final INode inode, final INodesInPath iip)", "testcase": false, "constructor": false}, {"identifier": "updateCount", "parameters": "(INodesInPath iip, long nsDelta, long ssDelta, short replication,\n      boolean checkQuota)", "modifiers": "", "return": "void", "signature": "void updateCount(INodesInPath iip, long nsDelta, long ssDelta, short replication,\n      boolean checkQuota)", "full_signature": " void updateCount(INodesInPath iip, long nsDelta, long ssDelta, short replication,\n      boolean checkQuota)", "class_method_signature": "FSDirectory.updateCount(INodesInPath iip, long nsDelta, long ssDelta, short replication,\n      boolean checkQuota)", "testcase": false, "constructor": false}, {"identifier": "updateCount", "parameters": "(INodesInPath iip, long nsDelta, long ssDelta, short oldRep,\n      short newRep, boolean checkQuota)", "modifiers": "", "return": "void", "signature": "void updateCount(INodesInPath iip, long nsDelta, long ssDelta, short oldRep,\n      short newRep, boolean checkQuota)", "full_signature": " void updateCount(INodesInPath iip, long nsDelta, long ssDelta, short oldRep,\n      short newRep, boolean checkQuota)", "class_method_signature": "FSDirectory.updateCount(INodesInPath iip, long nsDelta, long ssDelta, short oldRep,\n      short newRep, boolean checkQuota)", "testcase": false, "constructor": false}, {"identifier": "updateCount", "parameters": "(INodesInPath iip, int numOfINodes,\n                    QuotaCounts counts, boolean checkQuota)", "modifiers": "", "return": "void", "signature": "void updateCount(INodesInPath iip, int numOfINodes,\n                    QuotaCounts counts, boolean checkQuota)", "full_signature": " void updateCount(INodesInPath iip, int numOfINodes,\n                    QuotaCounts counts, boolean checkQuota)", "class_method_signature": "FSDirectory.updateCount(INodesInPath iip, int numOfINodes,\n                    QuotaCounts counts, boolean checkQuota)", "testcase": false, "constructor": false}, {"identifier": "updateCountNoQuotaCheck", "parameters": "(INodesInPath inodesInPath,\n      int numOfINodes, QuotaCounts counts)", "modifiers": "", "return": "void", "signature": "void updateCountNoQuotaCheck(INodesInPath inodesInPath,\n      int numOfINodes, QuotaCounts counts)", "full_signature": " void updateCountNoQuotaCheck(INodesInPath inodesInPath,\n      int numOfINodes, QuotaCounts counts)", "class_method_signature": "FSDirectory.updateCountNoQuotaCheck(INodesInPath inodesInPath,\n      int numOfINodes, QuotaCounts counts)", "testcase": false, "constructor": false}, {"identifier": "unprotectedUpdateCount", "parameters": "(INodesInPath inodesInPath,\n      int numOfINodes, QuotaCounts counts)", "modifiers": "static", "return": "void", "signature": "void unprotectedUpdateCount(INodesInPath inodesInPath,\n      int numOfINodes, QuotaCounts counts)", "full_signature": "static void unprotectedUpdateCount(INodesInPath inodesInPath,\n      int numOfINodes, QuotaCounts counts)", "class_method_signature": "FSDirectory.unprotectedUpdateCount(INodesInPath inodesInPath,\n      int numOfINodes, QuotaCounts counts)", "testcase": false, "constructor": false}, {"identifier": "getStorageTypeDeltas", "parameters": "(byte storagePolicyID,\n      long dsDelta, short oldRep, short newRep)", "modifiers": "public", "return": "EnumCounters<StorageType>", "signature": "EnumCounters<StorageType> getStorageTypeDeltas(byte storagePolicyID,\n      long dsDelta, short oldRep, short newRep)", "full_signature": "public EnumCounters<StorageType> getStorageTypeDeltas(byte storagePolicyID,\n      long dsDelta, short oldRep, short newRep)", "class_method_signature": "FSDirectory.getStorageTypeDeltas(byte storagePolicyID,\n      long dsDelta, short oldRep, short newRep)", "testcase": false, "constructor": false}, {"identifier": "getFullPathName", "parameters": "(INode[] inodes, int pos)", "modifiers": "static", "return": "String", "signature": "String getFullPathName(INode[] inodes, int pos)", "full_signature": "static String getFullPathName(INode[] inodes, int pos)", "class_method_signature": "FSDirectory.getFullPathName(INode[] inodes, int pos)", "testcase": false, "constructor": false}, {"identifier": "getRelativePathINodes", "parameters": "(INode inode, INode ancestor)", "modifiers": "private static", "return": "INode[]", "signature": "INode[] getRelativePathINodes(INode inode, INode ancestor)", "full_signature": "private static INode[] getRelativePathINodes(INode inode, INode ancestor)", "class_method_signature": "FSDirectory.getRelativePathINodes(INode inode, INode ancestor)", "testcase": false, "constructor": false}, {"identifier": "getFullPathINodes", "parameters": "(INode inode)", "modifiers": "private static", "return": "INode[]", "signature": "INode[] getFullPathINodes(INode inode)", "full_signature": "private static INode[] getFullPathINodes(INode inode)", "class_method_signature": "FSDirectory.getFullPathINodes(INode inode)", "testcase": false, "constructor": false}, {"identifier": "getFullPathName", "parameters": "(INode inode)", "modifiers": "static", "return": "String", "signature": "String getFullPathName(INode inode)", "full_signature": "static String getFullPathName(INode inode)", "class_method_signature": "FSDirectory.getFullPathName(INode inode)", "testcase": false, "constructor": false}, {"identifier": "addINode", "parameters": "(INodesInPath existing, INode child)", "modifiers": "", "return": "INodesInPath", "signature": "INodesInPath addINode(INodesInPath existing, INode child)", "full_signature": " INodesInPath addINode(INodesInPath existing, INode child)", "class_method_signature": "FSDirectory.addINode(INodesInPath existing, INode child)", "testcase": false, "constructor": false}, {"identifier": "verifyQuota", "parameters": "(INodesInPath iip, int pos, QuotaCounts deltas,\n                          INode commonAncestor)", "modifiers": "static", "return": "void", "signature": "void verifyQuota(INodesInPath iip, int pos, QuotaCounts deltas,\n                          INode commonAncestor)", "full_signature": "static void verifyQuota(INodesInPath iip, int pos, QuotaCounts deltas,\n                          INode commonAncestor)", "class_method_signature": "FSDirectory.verifyQuota(INodesInPath iip, int pos, QuotaCounts deltas,\n                          INode commonAncestor)", "testcase": false, "constructor": false}, {"identifier": "verifyINodeName", "parameters": "(byte[] childName)", "modifiers": "", "return": "void", "signature": "void verifyINodeName(byte[] childName)", "full_signature": " void verifyINodeName(byte[] childName)", "class_method_signature": "FSDirectory.verifyINodeName(byte[] childName)", "testcase": false, "constructor": false}, {"identifier": "verifyMaxComponentLength", "parameters": "(byte[] childName, String parentPath)", "modifiers": "", "return": "void", "signature": "void verifyMaxComponentLength(byte[] childName, String parentPath)", "full_signature": " void verifyMaxComponentLength(byte[] childName, String parentPath)", "class_method_signature": "FSDirectory.verifyMaxComponentLength(byte[] childName, String parentPath)", "testcase": false, "constructor": false}, {"identifier": "verifyMaxDirItems", "parameters": "(INodeDirectory parent, String parentPath)", "modifiers": "", "return": "void", "signature": "void verifyMaxDirItems(INodeDirectory parent, String parentPath)", "full_signature": " void verifyMaxDirItems(INodeDirectory parent, String parentPath)", "class_method_signature": "FSDirectory.verifyMaxDirItems(INodeDirectory parent, String parentPath)", "testcase": false, "constructor": false}, {"identifier": "addLastINode", "parameters": "(INodesInPath existing, INode inode,\n      boolean checkQuota)", "modifiers": "@VisibleForTesting public", "return": "INodesInPath", "signature": "INodesInPath addLastINode(INodesInPath existing, INode inode,\n      boolean checkQuota)", "full_signature": "@VisibleForTesting public INodesInPath addLastINode(INodesInPath existing, INode inode,\n      boolean checkQuota)", "class_method_signature": "FSDirectory.addLastINode(INodesInPath existing, INode inode,\n      boolean checkQuota)", "testcase": false, "constructor": false}, {"identifier": "addLastINodeNoQuotaCheck", "parameters": "(INodesInPath existing, INode i)", "modifiers": "", "return": "INodesInPath", "signature": "INodesInPath addLastINodeNoQuotaCheck(INodesInPath existing, INode i)", "full_signature": " INodesInPath addLastINodeNoQuotaCheck(INodesInPath existing, INode i)", "class_method_signature": "FSDirectory.addLastINodeNoQuotaCheck(INodesInPath existing, INode i)", "testcase": false, "constructor": false}, {"identifier": "removeLastINode", "parameters": "(final INodesInPath iip)", "modifiers": "@VisibleForTesting public", "return": "long", "signature": "long removeLastINode(final INodesInPath iip)", "full_signature": "@VisibleForTesting public long removeLastINode(final INodesInPath iip)", "class_method_signature": "FSDirectory.removeLastINode(final INodesInPath iip)", "testcase": false, "constructor": false}, {"identifier": "normalizePath", "parameters": "(String src)", "modifiers": "static", "return": "String", "signature": "String normalizePath(String src)", "full_signature": "static String normalizePath(String src)", "class_method_signature": "FSDirectory.normalizePath(String src)", "testcase": false, "constructor": false}, {"identifier": "getYieldCount", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "long", "signature": "long getYieldCount()", "full_signature": "@VisibleForTesting public long getYieldCount()", "class_method_signature": "FSDirectory.getYieldCount()", "testcase": false, "constructor": false}, {"identifier": "addYieldCount", "parameters": "(long value)", "modifiers": "", "return": "void", "signature": "void addYieldCount(long value)", "full_signature": " void addYieldCount(long value)", "class_method_signature": "FSDirectory.addYieldCount(long value)", "testcase": false, "constructor": false}, {"identifier": "getINodeMap", "parameters": "()", "modifiers": "public", "return": "INodeMap", "signature": "INodeMap getINodeMap()", "full_signature": "public INodeMap getINodeMap()", "class_method_signature": "FSDirectory.getINodeMap()", "testcase": false, "constructor": false}, {"identifier": "unprotectedTruncate", "parameters": "(String src, String clientName, String clientMachine,\n                           long newLength, long mtime, Block truncateBlock)", "modifiers": "", "return": "void", "signature": "void unprotectedTruncate(String src, String clientName, String clientMachine,\n                           long newLength, long mtime, Block truncateBlock)", "full_signature": " void unprotectedTruncate(String src, String clientName, String clientMachine,\n                           long newLength, long mtime, Block truncateBlock)", "class_method_signature": "FSDirectory.unprotectedTruncate(String src, String clientName, String clientMachine,\n                           long newLength, long mtime, Block truncateBlock)", "testcase": false, "constructor": false}, {"identifier": "truncate", "parameters": "(INodesInPath iip, long newLength,\n                   BlocksMapUpdateInfo collectedBlocks,\n                   long mtime, QuotaCounts delta)", "modifiers": "", "return": "boolean", "signature": "boolean truncate(INodesInPath iip, long newLength,\n                   BlocksMapUpdateInfo collectedBlocks,\n                   long mtime, QuotaCounts delta)", "full_signature": " boolean truncate(INodesInPath iip, long newLength,\n                   BlocksMapUpdateInfo collectedBlocks,\n                   long mtime, QuotaCounts delta)", "class_method_signature": "FSDirectory.truncate(INodesInPath iip, long newLength,\n                   BlocksMapUpdateInfo collectedBlocks,\n                   long mtime, QuotaCounts delta)", "testcase": false, "constructor": false}, {"identifier": "unprotectedTruncate", "parameters": "(INodesInPath iip, long newLength,\n                              BlocksMapUpdateInfo collectedBlocks,\n                              long mtime, QuotaCounts delta)", "modifiers": "", "return": "boolean", "signature": "boolean unprotectedTruncate(INodesInPath iip, long newLength,\n                              BlocksMapUpdateInfo collectedBlocks,\n                              long mtime, QuotaCounts delta)", "full_signature": " boolean unprotectedTruncate(INodesInPath iip, long newLength,\n                              BlocksMapUpdateInfo collectedBlocks,\n                              long mtime, QuotaCounts delta)", "class_method_signature": "FSDirectory.unprotectedTruncate(INodesInPath iip, long newLength,\n                              BlocksMapUpdateInfo collectedBlocks,\n                              long mtime, QuotaCounts delta)", "testcase": false, "constructor": false}, {"identifier": "verifyQuotaForTruncate", "parameters": "(INodesInPath iip, INodeFile file,\n      long newLength, QuotaCounts delta)", "modifiers": "private", "return": "void", "signature": "void verifyQuotaForTruncate(INodesInPath iip, INodeFile file,\n      long newLength, QuotaCounts delta)", "full_signature": "private void verifyQuotaForTruncate(INodesInPath iip, INodeFile file,\n      long newLength, QuotaCounts delta)", "class_method_signature": "FSDirectory.verifyQuotaForTruncate(INodesInPath iip, INodeFile file,\n      long newLength, QuotaCounts delta)", "testcase": false, "constructor": false}, {"identifier": "addToInodeMap", "parameters": "(INode inode)", "modifiers": "public final", "return": "void", "signature": "void addToInodeMap(INode inode)", "full_signature": "public final void addToInodeMap(INode inode)", "class_method_signature": "FSDirectory.addToInodeMap(INode inode)", "testcase": false, "constructor": false}, {"identifier": "addEncryptionZone", "parameters": "(INodeWithAdditionalFields inode,\n      XAttrFeature xaf)", "modifiers": "private", "return": "void", "signature": "void addEncryptionZone(INodeWithAdditionalFields inode,\n      XAttrFeature xaf)", "full_signature": "private void addEncryptionZone(INodeWithAdditionalFields inode,\n      XAttrFeature xaf)", "class_method_signature": "FSDirectory.addEncryptionZone(INodeWithAdditionalFields inode,\n      XAttrFeature xaf)", "testcase": false, "constructor": false}, {"identifier": "addRootDirToEncryptionZone", "parameters": "(XAttrFeature xaf)", "modifiers": "public final", "return": "void", "signature": "void addRootDirToEncryptionZone(XAttrFeature xaf)", "full_signature": "public final void addRootDirToEncryptionZone(XAttrFeature xaf)", "class_method_signature": "FSDirectory.addRootDirToEncryptionZone(XAttrFeature xaf)", "testcase": false, "constructor": false}, {"identifier": "removeFromInodeMap", "parameters": "(List<? extends INode> inodes)", "modifiers": "public final", "return": "void", "signature": "void removeFromInodeMap(List<? extends INode> inodes)", "full_signature": "public final void removeFromInodeMap(List<? extends INode> inodes)", "class_method_signature": "FSDirectory.removeFromInodeMap(List<? extends INode> inodes)", "testcase": false, "constructor": false}, {"identifier": "getInode", "parameters": "(long id)", "modifiers": "public", "return": "INode", "signature": "INode getInode(long id)", "full_signature": "public INode getInode(long id)", "class_method_signature": "FSDirectory.getInode(long id)", "testcase": false, "constructor": false}, {"identifier": "getInodeMapSize", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "int", "signature": "int getInodeMapSize()", "full_signature": "@VisibleForTesting int getInodeMapSize()", "class_method_signature": "FSDirectory.getInodeMapSize()", "testcase": false, "constructor": false}, {"identifier": "totalInodes", "parameters": "()", "modifiers": "", "return": "long", "signature": "long totalInodes()", "full_signature": " long totalInodes()", "class_method_signature": "FSDirectory.totalInodes()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "", "return": "void", "signature": "void reset()", "full_signature": " void reset()", "class_method_signature": "FSDirectory.reset()", "testcase": false, "constructor": false}, {"identifier": "isInAnEZ", "parameters": "(INodesInPath iip)", "modifiers": "", "return": "boolean", "signature": "boolean isInAnEZ(INodesInPath iip)", "full_signature": " boolean isInAnEZ(INodesInPath iip)", "class_method_signature": "FSDirectory.isInAnEZ(INodesInPath iip)", "testcase": false, "constructor": false}, {"identifier": "getKeyName", "parameters": "(INodesInPath iip)", "modifiers": "", "return": "String", "signature": "String getKeyName(INodesInPath iip)", "full_signature": " String getKeyName(INodesInPath iip)", "class_method_signature": "FSDirectory.getKeyName(INodesInPath iip)", "testcase": false, "constructor": false}, {"identifier": "createEncryptionZone", "parameters": "(String src, CipherSuite suite,\n      CryptoProtocolVersion version, String keyName)", "modifiers": "", "return": "XAttr", "signature": "XAttr createEncryptionZone(String src, CipherSuite suite,\n      CryptoProtocolVersion version, String keyName)", "full_signature": " XAttr createEncryptionZone(String src, CipherSuite suite,\n      CryptoProtocolVersion version, String keyName)", "class_method_signature": "FSDirectory.createEncryptionZone(String src, CipherSuite suite,\n      CryptoProtocolVersion version, String keyName)", "testcase": false, "constructor": false}, {"identifier": "getEZForPath", "parameters": "(INodesInPath iip)", "modifiers": "", "return": "EncryptionZone", "signature": "EncryptionZone getEZForPath(INodesInPath iip)", "full_signature": " EncryptionZone getEZForPath(INodesInPath iip)", "class_method_signature": "FSDirectory.getEZForPath(INodesInPath iip)", "testcase": false, "constructor": false}, {"identifier": "listEncryptionZones", "parameters": "(long prevId)", "modifiers": "", "return": "BatchedListEntries<EncryptionZone>", "signature": "BatchedListEntries<EncryptionZone> listEncryptionZones(long prevId)", "full_signature": " BatchedListEntries<EncryptionZone> listEncryptionZones(long prevId)", "class_method_signature": "FSDirectory.listEncryptionZones(long prevId)", "testcase": false, "constructor": false}, {"identifier": "setFileEncryptionInfo", "parameters": "(String src, FileEncryptionInfo info)", "modifiers": "", "return": "void", "signature": "void setFileEncryptionInfo(String src, FileEncryptionInfo info)", "full_signature": " void setFileEncryptionInfo(String src, FileEncryptionInfo info)", "class_method_signature": "FSDirectory.setFileEncryptionInfo(String src, FileEncryptionInfo info)", "testcase": false, "constructor": false}, {"identifier": "getFileEncryptionInfo", "parameters": "(INode inode, int snapshotId,\n      INodesInPath iip)", "modifiers": "", "return": "FileEncryptionInfo", "signature": "FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n      INodesInPath iip)", "full_signature": " FileEncryptionInfo getFileEncryptionInfo(INode inode, int snapshotId,\n      INodesInPath iip)", "class_method_signature": "FSDirectory.getFileEncryptionInfo(INode inode, int snapshotId,\n      INodesInPath iip)", "testcase": false, "constructor": false}, {"identifier": "resolveLastINode", "parameters": "(INodesInPath iip)", "modifiers": "static", "return": "INode", "signature": "INode resolveLastINode(INodesInPath iip)", "full_signature": "static INode resolveLastINode(INodesInPath iip)", "class_method_signature": "FSDirectory.resolveLastINode(INodesInPath iip)", "testcase": false, "constructor": false}, {"identifier": "cacheName", "parameters": "(INode inode)", "modifiers": "", "return": "void", "signature": "void cacheName(INode inode)", "full_signature": " void cacheName(INode inode)", "class_method_signature": "FSDirectory.cacheName(INode inode)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "()", "modifiers": "", "return": "void", "signature": "void shutdown()", "full_signature": " void shutdown()", "class_method_signature": "FSDirectory.shutdown()", "testcase": false, "constructor": false}, {"identifier": "getPathComponents", "parameters": "(INode inode)", "modifiers": "public static", "return": "byte[][]", "signature": "byte[][] getPathComponents(INode inode)", "full_signature": "public static byte[][] getPathComponents(INode inode)", "class_method_signature": "FSDirectory.getPathComponents(INode inode)", "testcase": false, "constructor": false}, {"identifier": "getPathComponentsForReservedPath", "parameters": "(String src)", "modifiers": "static", "return": "byte[][]", "signature": "byte[][] getPathComponentsForReservedPath(String src)", "full_signature": "static byte[][] getPathComponentsForReservedPath(String src)", "class_method_signature": "FSDirectory.getPathComponentsForReservedPath(String src)", "testcase": false, "constructor": false}, {"identifier": "isReservedName", "parameters": "(INode inode)", "modifiers": "public static", "return": "boolean", "signature": "boolean isReservedName(INode inode)", "full_signature": "public static boolean isReservedName(INode inode)", "class_method_signature": "FSDirectory.isReservedName(INode inode)", "testcase": false, "constructor": false}, {"identifier": "isReservedName", "parameters": "(String src)", "modifiers": "public static", "return": "boolean", "signature": "boolean isReservedName(String src)", "full_signature": "public static boolean isReservedName(String src)", "class_method_signature": "FSDirectory.isReservedName(String src)", "testcase": false, "constructor": false}, {"identifier": "isReservedRawName", "parameters": "(String src)", "modifiers": "static", "return": "boolean", "signature": "boolean isReservedRawName(String src)", "full_signature": "static boolean isReservedRawName(String src)", "class_method_signature": "FSDirectory.isReservedRawName(String src)", "testcase": false, "constructor": false}, {"identifier": "resolvePath", "parameters": "(String src, byte[][] pathComponents,\n      FSDirectory fsd)", "modifiers": "static", "return": "String", "signature": "String resolvePath(String src, byte[][] pathComponents,\n      FSDirectory fsd)", "full_signature": "static String resolvePath(String src, byte[][] pathComponents,\n      FSDirectory fsd)", "class_method_signature": "FSDirectory.resolvePath(String src, byte[][] pathComponents,\n      FSDirectory fsd)", "testcase": false, "constructor": false}, {"identifier": "resolveDotInodesPath", "parameters": "(String src,\n      byte[][] pathComponents, FSDirectory fsd)", "modifiers": "private static", "return": "String", "signature": "String resolveDotInodesPath(String src,\n      byte[][] pathComponents, FSDirectory fsd)", "full_signature": "private static String resolveDotInodesPath(String src,\n      byte[][] pathComponents, FSDirectory fsd)", "class_method_signature": "FSDirectory.resolveDotInodesPath(String src,\n      byte[][] pathComponents, FSDirectory fsd)", "testcase": false, "constructor": false}, {"identifier": "constructRemainingPath", "parameters": "(String pathPrefix,\n      byte[][] pathComponents, int startAt)", "modifiers": "private static", "return": "String", "signature": "String constructRemainingPath(String pathPrefix,\n      byte[][] pathComponents, int startAt)", "full_signature": "private static String constructRemainingPath(String pathPrefix,\n      byte[][] pathComponents, int startAt)", "class_method_signature": "FSDirectory.constructRemainingPath(String pathPrefix,\n      byte[][] pathComponents, int startAt)", "testcase": false, "constructor": false}, {"identifier": "getINode4DotSnapshot", "parameters": "(String src)", "modifiers": "", "return": "INode", "signature": "INode getINode4DotSnapshot(String src)", "full_signature": " INode getINode4DotSnapshot(String src)", "class_method_signature": "FSDirectory.getINode4DotSnapshot(String src)", "testcase": false, "constructor": false}, {"identifier": "getExistingPathINodes", "parameters": "(byte[][] components)", "modifiers": "", "return": "INodesInPath", "signature": "INodesInPath getExistingPathINodes(byte[][] components)", "full_signature": " INodesInPath getExistingPathINodes(byte[][] components)", "class_method_signature": "FSDirectory.getExistingPathINodes(byte[][] components)", "testcase": false, "constructor": false}, {"identifier": "getINodesInPath4Write", "parameters": "(String src)", "modifiers": "public", "return": "INodesInPath", "signature": "INodesInPath getINodesInPath4Write(String src)", "full_signature": "public INodesInPath getINodesInPath4Write(String src)", "class_method_signature": "FSDirectory.getINodesInPath4Write(String src)", "testcase": false, "constructor": false}, {"identifier": "getINode4Write", "parameters": "(String src)", "modifiers": "public", "return": "INode", "signature": "INode getINode4Write(String src)", "full_signature": "public INode getINode4Write(String src)", "class_method_signature": "FSDirectory.getINode4Write(String src)", "testcase": false, "constructor": false}, {"identifier": "getINodesInPath", "parameters": "(String path, boolean resolveLink)", "modifiers": "public", "return": "INodesInPath", "signature": "INodesInPath getINodesInPath(String path, boolean resolveLink)", "full_signature": "public INodesInPath getINodesInPath(String path, boolean resolveLink)", "class_method_signature": "FSDirectory.getINodesInPath(String path, boolean resolveLink)", "testcase": false, "constructor": false}, {"identifier": "getINode", "parameters": "(String path, boolean resolveLink)", "modifiers": "", "return": "INode", "signature": "INode getINode(String path, boolean resolveLink)", "full_signature": " INode getINode(String path, boolean resolveLink)", "class_method_signature": "FSDirectory.getINode(String path, boolean resolveLink)", "testcase": false, "constructor": false}, {"identifier": "getINode", "parameters": "(String src)", "modifiers": "public", "return": "INode", "signature": "INode getINode(String src)", "full_signature": "public INode getINode(String src)", "class_method_signature": "FSDirectory.getINode(String src)", "testcase": false, "constructor": false}, {"identifier": "getINodesInPath4Write", "parameters": "(String src, boolean resolveLink)", "modifiers": "", "return": "INodesInPath", "signature": "INodesInPath getINodesInPath4Write(String src, boolean resolveLink)", "full_signature": " INodesInPath getINodesInPath4Write(String src, boolean resolveLink)", "class_method_signature": "FSDirectory.getINodesInPath4Write(String src, boolean resolveLink)", "testcase": false, "constructor": false}, {"identifier": "getPermissionChecker", "parameters": "()", "modifiers": "", "return": "FSPermissionChecker", "signature": "FSPermissionChecker getPermissionChecker()", "full_signature": " FSPermissionChecker getPermissionChecker()", "class_method_signature": "FSDirectory.getPermissionChecker()", "testcase": false, "constructor": false}, {"identifier": "getPermissionChecker", "parameters": "(String fsOwner, String superGroup,\n      UserGroupInformation ugi)", "modifiers": "@VisibleForTesting", "return": "FSPermissionChecker", "signature": "FSPermissionChecker getPermissionChecker(String fsOwner, String superGroup,\n      UserGroupInformation ugi)", "full_signature": "@VisibleForTesting FSPermissionChecker getPermissionChecker(String fsOwner, String superGroup,\n      UserGroupInformation ugi)", "class_method_signature": "FSDirectory.getPermissionChecker(String fsOwner, String superGroup,\n      UserGroupInformation ugi)", "testcase": false, "constructor": false}, {"identifier": "checkOwner", "parameters": "(FSPermissionChecker pc, INodesInPath iip)", "modifiers": "", "return": "void", "signature": "void checkOwner(FSPermissionChecker pc, INodesInPath iip)", "full_signature": " void checkOwner(FSPermissionChecker pc, INodesInPath iip)", "class_method_signature": "FSDirectory.checkOwner(FSPermissionChecker pc, INodesInPath iip)", "testcase": false, "constructor": false}, {"identifier": "checkPathAccess", "parameters": "(FSPermissionChecker pc, INodesInPath iip,\n      FsAction access)", "modifiers": "", "return": "void", "signature": "void checkPathAccess(FSPermissionChecker pc, INodesInPath iip,\n      FsAction access)", "full_signature": " void checkPathAccess(FSPermissionChecker pc, INodesInPath iip,\n      FsAction access)", "class_method_signature": "FSDirectory.checkPathAccess(FSPermissionChecker pc, INodesInPath iip,\n      FsAction access)", "testcase": false, "constructor": false}, {"identifier": "checkParentAccess", "parameters": "(FSPermissionChecker pc, INodesInPath iip,\n      FsAction access)", "modifiers": "", "return": "void", "signature": "void checkParentAccess(FSPermissionChecker pc, INodesInPath iip,\n      FsAction access)", "full_signature": " void checkParentAccess(FSPermissionChecker pc, INodesInPath iip,\n      FsAction access)", "class_method_signature": "FSDirectory.checkParentAccess(FSPermissionChecker pc, INodesInPath iip,\n      FsAction access)", "testcase": false, "constructor": false}, {"identifier": "checkAncestorAccess", "parameters": "(FSPermissionChecker pc, INodesInPath iip,\n      FsAction access)", "modifiers": "", "return": "void", "signature": "void checkAncestorAccess(FSPermissionChecker pc, INodesInPath iip,\n      FsAction access)", "full_signature": " void checkAncestorAccess(FSPermissionChecker pc, INodesInPath iip,\n      FsAction access)", "class_method_signature": "FSDirectory.checkAncestorAccess(FSPermissionChecker pc, INodesInPath iip,\n      FsAction access)", "testcase": false, "constructor": false}, {"identifier": "checkTraverse", "parameters": "(FSPermissionChecker pc, INodesInPath iip)", "modifiers": "", "return": "void", "signature": "void checkTraverse(FSPermissionChecker pc, INodesInPath iip)", "full_signature": " void checkTraverse(FSPermissionChecker pc, INodesInPath iip)", "class_method_signature": "FSDirectory.checkTraverse(FSPermissionChecker pc, INodesInPath iip)", "testcase": false, "constructor": false}, {"identifier": "checkPermission", "parameters": "(FSPermissionChecker pc, INodesInPath iip,\n      boolean doCheckOwner, FsAction ancestorAccess, FsAction parentAccess,\n      FsAction access, FsAction subAccess)", "modifiers": "", "return": "void", "signature": "void checkPermission(FSPermissionChecker pc, INodesInPath iip,\n      boolean doCheckOwner, FsAction ancestorAccess, FsAction parentAccess,\n      FsAction access, FsAction subAccess)", "full_signature": " void checkPermission(FSPermissionChecker pc, INodesInPath iip,\n      boolean doCheckOwner, FsAction ancestorAccess, FsAction parentAccess,\n      FsAction access, FsAction subAccess)", "class_method_signature": "FSDirectory.checkPermission(FSPermissionChecker pc, INodesInPath iip,\n      boolean doCheckOwner, FsAction ancestorAccess, FsAction parentAccess,\n      FsAction access, FsAction subAccess)", "testcase": false, "constructor": false}, {"identifier": "checkPermission", "parameters": "(FSPermissionChecker pc, INodesInPath iip,\n      boolean doCheckOwner, FsAction ancestorAccess, FsAction parentAccess,\n      FsAction access, FsAction subAccess, boolean ignoreEmptyDir)", "modifiers": "", "return": "void", "signature": "void checkPermission(FSPermissionChecker pc, INodesInPath iip,\n      boolean doCheckOwner, FsAction ancestorAccess, FsAction parentAccess,\n      FsAction access, FsAction subAccess, boolean ignoreEmptyDir)", "full_signature": " void checkPermission(FSPermissionChecker pc, INodesInPath iip,\n      boolean doCheckOwner, FsAction ancestorAccess, FsAction parentAccess,\n      FsAction access, FsAction subAccess, boolean ignoreEmptyDir)", "class_method_signature": "FSDirectory.checkPermission(FSPermissionChecker pc, INodesInPath iip,\n      boolean doCheckOwner, FsAction ancestorAccess, FsAction parentAccess,\n      FsAction access, FsAction subAccess, boolean ignoreEmptyDir)", "testcase": false, "constructor": false}, {"identifier": "getAuditFileInfo", "parameters": "(INodesInPath iip)", "modifiers": "", "return": "HdfsFileStatus", "signature": "HdfsFileStatus getAuditFileInfo(INodesInPath iip)", "full_signature": " HdfsFileStatus getAuditFileInfo(INodesInPath iip)", "class_method_signature": "FSDirectory.getAuditFileInfo(INodesInPath iip)", "testcase": false, "constructor": false}, {"identifier": "verifyParentDir", "parameters": "(INodesInPath iip, String src)", "modifiers": "", "return": "void", "signature": "void verifyParentDir(INodesInPath iip, String src)", "full_signature": " void verifyParentDir(INodesInPath iip, String src)", "class_method_signature": "FSDirectory.verifyParentDir(INodesInPath iip, String src)", "testcase": false, "constructor": false}, {"identifier": "allocateNewInodeId", "parameters": "()", "modifiers": "", "return": "long", "signature": "long allocateNewInodeId()", "full_signature": " long allocateNewInodeId()", "class_method_signature": "FSDirectory.allocateNewInodeId()", "testcase": false, "constructor": false}, {"identifier": "getLastInodeId", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLastInodeId()", "full_signature": "public long getLastInodeId()", "class_method_signature": "FSDirectory.getLastInodeId()", "testcase": false, "constructor": false}, {"identifier": "resetLastInodeId", "parameters": "(long newValue)", "modifiers": "", "return": "void", "signature": "void resetLastInodeId(long newValue)", "full_signature": " void resetLastInodeId(long newValue)", "class_method_signature": "FSDirectory.resetLastInodeId(long newValue)", "testcase": false, "constructor": false}, {"identifier": "resetLastInodeIdWithoutChecking", "parameters": "(long newValue)", "modifiers": "", "return": "void", "signature": "void resetLastInodeIdWithoutChecking(long newValue)", "full_signature": " void resetLastInodeIdWithoutChecking(long newValue)", "class_method_signature": "FSDirectory.resetLastInodeIdWithoutChecking(long newValue)", "testcase": false, "constructor": false}, {"identifier": "getAttributes", "parameters": "(String fullPath, byte[] path,\n      INode node, int snapshot)", "modifiers": "", "return": "INodeAttributes", "signature": "INodeAttributes getAttributes(String fullPath, byte[] path,\n      INode node, int snapshot)", "full_signature": " INodeAttributes getAttributes(String fullPath, byte[] path,\n      INode node, int snapshot)", "class_method_signature": "FSDirectory.getAttributes(String fullPath, byte[] path,\n      INode node, int snapshot)", "testcase": false, "constructor": false}], "file": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java"}, "focal_method": {"identifier": "getInode", "parameters": "(long id)", "modifiers": "public", "return": "INode", "body": "public INode getInode(long id) {\n    readLock();\n    try {\n      return inodeMap.get(id);\n    } finally {\n      readUnlock();\n    }\n  }", "signature": "INode getInode(long id)", "full_signature": "public INode getInode(long id)", "class_method_signature": "FSDirectory.getInode(long id)", "testcase": false, "constructor": false, "invocations": ["readLock", "get", "readUnlock"]}, "repository": {"repo_id": 195808004, "url": "https://github.com/mouzwang/hadoop-2.7.2", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 24927, "license": "licensed"}}