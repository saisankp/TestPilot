{"test_class": {"identifier": "TopicTest", "superclass": "", "interfaces": "", "fields": [], "file": "broker/src/test/java/io/moquette/spi/impl/subscriptions/TopicTest.java"}, "test_case": {"identifier": "testParseTopic", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseTopic() {\n        assertThat(new Topic(\"finance/stock/ibm\")).containsToken(\"finance\", \"stock\", \"ibm\");\n\n        assertThat(new Topic(\"/finance/stock/ibm\")).containsToken(Token.EMPTY, \"finance\", \"stock\", \"ibm\");\n\n        assertThat(new Topic(\"/\")).containsToken(Token.EMPTY, Token.EMPTY);\n    }", "signature": "void testParseTopic()", "full_signature": "@Test public void testParseTopic()", "class_method_signature": "TopicTest.testParseTopic()", "testcase": true, "constructor": false, "invocations": ["containsToken", "assertThat", "containsToken", "assertThat", "containsToken", "assertThat"]}, "focal_class": {"identifier": "Topic", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(Topic.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(Topic.class)", "var_name": "LOG"}, {"original_string": "private static final long serialVersionUID = 2438799283749822L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 2438799283749822L", "var_name": "serialVersionUID"}, {"original_string": "private final String topic;", "modifier": "private final", "type": "String", "declarator": "topic", "var_name": "topic"}, {"original_string": "private transient List<Token> tokens;", "modifier": "private transient", "type": "List<Token>", "declarator": "tokens", "var_name": "tokens"}, {"original_string": "private transient boolean valid;", "modifier": "private transient", "type": "boolean", "declarator": "valid", "var_name": "valid"}], "methods": [{"identifier": "asTopic", "parameters": "(String s)", "modifiers": "public static", "return": "Topic", "signature": "Topic asTopic(String s)", "full_signature": "public static Topic asTopic(String s)", "class_method_signature": "Topic.asTopic(String s)", "testcase": false, "constructor": false}, {"identifier": "Topic", "parameters": "(String topic)", "modifiers": "public", "return": "", "signature": " Topic(String topic)", "full_signature": "public  Topic(String topic)", "class_method_signature": "Topic.Topic(String topic)", "testcase": false, "constructor": true}, {"identifier": "Topic", "parameters": "(List<Token> tokens)", "modifiers": "", "return": "", "signature": " Topic(List<Token> tokens)", "full_signature": "  Topic(List<Token> tokens)", "class_method_signature": "Topic.Topic(List<Token> tokens)", "testcase": false, "constructor": true}, {"identifier": "getTokens", "parameters": "()", "modifiers": "public", "return": "List<Token>", "signature": "List<Token> getTokens()", "full_signature": "public List<Token> getTokens()", "class_method_signature": "Topic.getTokens()", "testcase": false, "constructor": false}, {"identifier": "parseTopic", "parameters": "(String topic)", "modifiers": "private", "return": "List<Token>", "signature": "List<Token> parseTopic(String topic)", "full_signature": "private List<Token> parseTopic(String topic)", "class_method_signature": "Topic.parseTopic(String topic)", "testcase": false, "constructor": false}, {"identifier": "headToken", "parameters": "()", "modifiers": "public", "return": "Token", "signature": "Token headToken()", "full_signature": "public Token headToken()", "class_method_signature": "Topic.headToken()", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isEmpty()", "full_signature": "public boolean isEmpty()", "class_method_signature": "Topic.isEmpty()", "testcase": false, "constructor": false}, {"identifier": "exceptHeadToken", "parameters": "()", "modifiers": "public", "return": "Topic", "signature": "Topic exceptHeadToken()", "full_signature": "public Topic exceptHeadToken()", "class_method_signature": "Topic.exceptHeadToken()", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isValid()", "full_signature": "public boolean isValid()", "class_method_signature": "Topic.isValid()", "testcase": false, "constructor": false}, {"identifier": "match", "parameters": "(Topic subscriptionTopic)", "modifiers": "public", "return": "boolean", "signature": "boolean match(Topic subscriptionTopic)", "full_signature": "public boolean match(Topic subscriptionTopic)", "class_method_signature": "Topic.match(Topic subscriptionTopic)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Topic.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "Topic.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Topic.hashCode()", "testcase": false, "constructor": false}], "file": "broker/src/main/java/io/moquette/spi/impl/subscriptions/Topic.java"}, "focal_method": {"identifier": "parseTopic", "parameters": "(String topic)", "modifiers": "private", "return": "List<Token>", "body": "private List<Token> parseTopic(String topic) throws ParseException {\n        List<Token> res = new ArrayList<>();\n        String[] splitted = topic.split(\"/\");\n\n        if (splitted.length == 0) {\n            res.add(Token.EMPTY);\n        }\n\n        if (topic.endsWith(\"/\")) {\n            // Add a fictious space\n            String[] newSplitted = new String[splitted.length + 1];\n            System.arraycopy(splitted, 0, newSplitted, 0, splitted.length);\n            newSplitted[splitted.length] = \"\";\n            splitted = newSplitted;\n        }\n\n        for (int i = 0; i < splitted.length; i++) {\n            String s = splitted[i];\n            if (s.isEmpty()) {\n                // if (i != 0) {\n                // throw new ParseException(\"Bad format of topic, expetec topic name between\n                // separators\", i);\n                // }\n                res.add(Token.EMPTY);\n            } else if (s.equals(\"#\")) {\n                // check that multi is the last symbol\n                if (i != splitted.length - 1) {\n                    throw new ParseException(\n                            \"Bad format of topic, the multi symbol (#) has to be the last one after a separator\",\n                            i);\n                }\n                res.add(Token.MULTI);\n            } else if (s.contains(\"#\")) {\n                throw new ParseException(\"Bad format of topic, invalid subtopic name: \" + s, i);\n            } else if (s.equals(\"+\")) {\n                res.add(Token.SINGLE);\n            } else if (s.contains(\"+\")) {\n                throw new ParseException(\"Bad format of topic, invalid subtopic name: \" + s, i);\n            } else {\n                res.add(new Token(s));\n            }\n        }\n\n        return res;\n    }", "signature": "List<Token> parseTopic(String topic)", "full_signature": "private List<Token> parseTopic(String topic)", "class_method_signature": "Topic.parseTopic(String topic)", "testcase": false, "constructor": false, "invocations": ["split", "add", "endsWith", "arraycopy", "isEmpty", "add", "equals", "add", "contains", "equals", "add", "contains", "add"]}, "repository": {"repo_id": 109554428, "url": "https://github.com/historicvally/springboot-mqtt", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 91, "size": 318, "license": "licensed"}}