{"test_class": {"identifier": "TrieTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Trie<String> trie = new Trie<String>();", "modifier": "private final", "type": "Trie<String>", "declarator": "trie = new Trie<String>()", "var_name": "trie"}], "file": "rut/src/test/java/io/norberg/rut/TrieTest.java"}, "test_case": {"identifier": "testToString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testToString() {\n    assertThat(trie.toString(), not(Matchers.isEmptyOrNullString()));\n\n    trie.insert(Path.of(\"/\"), \"/\");\n    assertThat(trie.toString(), not(Matchers.isEmptyOrNullString()));\n\n    trie.insert(Path.of(\"/<foo>\"), \"/<foo>\");\n    assertThat(trie.toString(), not(Matchers.isEmptyOrNullString()));\n\n    trie.insert(Path.of(\"/<foo>/<bar:path>\"), \"/<foo>/<bar:path>\");\n    assertThat(trie.toString(), not(Matchers.isEmptyOrNullString()));\n  }", "signature": "void testToString()", "full_signature": "@Test public void testToString()", "class_method_signature": "TrieTest.testToString()", "testcase": true, "constructor": false, "invocations": ["assertThat", "toString", "not", "isEmptyOrNullString", "insert", "of", "assertThat", "toString", "not", "isEmptyOrNullString", "insert", "of", "assertThat", "toString", "not", "isEmptyOrNullString", "insert", "of", "assertThat", "toString", "not", "isEmptyOrNullString"]}, "focal_class": {"identifier": "Trie", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final char CAPTURE_SEG = 0x1000;", "modifier": "private static final", "type": "char", "declarator": "CAPTURE_SEG = 0x1000", "var_name": "CAPTURE_SEG"}, {"original_string": "private static final char CAPTURE_PATH = 0x2000;", "modifier": "private static final", "type": "char", "declarator": "CAPTURE_PATH = 0x2000", "var_name": "CAPTURE_PATH"}, {"original_string": "private final Map<Character, Node<T>> roots = new TreeMap<Character, Node<T>>();", "modifier": "private final", "type": "Map<Character, Node<T>>", "declarator": "roots = new TreeMap<Character, Node<T>>()", "var_name": "roots"}], "methods": [{"identifier": "insert", "parameters": "(final Path path, final T value)", "modifiers": "", "return": "T", "signature": "T insert(final Path path, final T value)", "full_signature": " T insert(final Path path, final T value)", "class_method_signature": "Trie.insert(final Path path, final T value)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(final Path path, final Visitor<T> visitor)", "modifiers": "", "return": "T", "signature": "T insert(final Path path, final Visitor<T> visitor)", "full_signature": " T insert(final Path path, final Visitor<T> visitor)", "class_method_signature": "Trie.insert(final Path path, final Visitor<T> visitor)", "testcase": false, "constructor": false}, {"identifier": "insert", "parameters": "(final Path path, final Node<T> node,\n                              final Map<Character, Node<T>> edges,\n                              final int partIndex, final Visitor<T> visitor)", "modifiers": "private static", "return": "T", "signature": "T insert(final Path path, final Node<T> node,\n                              final Map<Character, Node<T>> edges,\n                              final int partIndex, final Visitor<T> visitor)", "full_signature": "private static T insert(final Path path, final Node<T> node,\n                              final Map<Character, Node<T>> edges,\n                              final int partIndex, final Visitor<T> visitor)", "class_method_signature": "Trie.insert(final Path path, final Node<T> node,\n                              final Map<Character, Node<T>> edges,\n                              final int partIndex, final Visitor<T> visitor)", "testcase": false, "constructor": false}, {"identifier": "insertCapturePath", "parameters": "(final Map<Character, Node<T>> edges,\n                                         final Visitor<T> visitor)", "modifiers": "private static", "return": "T", "signature": "T insertCapturePath(final Map<Character, Node<T>> edges,\n                                         final Visitor<T> visitor)", "full_signature": "private static T insertCapturePath(final Map<Character, Node<T>> edges,\n                                         final Visitor<T> visitor)", "class_method_signature": "Trie.insertCapturePath(final Map<Character, Node<T>> edges,\n                                         final Visitor<T> visitor)", "testcase": false, "constructor": false}, {"identifier": "insertCaptureSegment", "parameters": "(final Path path, final Map<Character, Node<T>> edges,\n                                            final int partIndex, final Visitor<T> visitor)", "modifiers": "private static", "return": "T", "signature": "T insertCaptureSegment(final Path path, final Map<Character, Node<T>> edges,\n                                            final int partIndex, final Visitor<T> visitor)", "full_signature": "private static T insertCaptureSegment(final Path path, final Map<Character, Node<T>> edges,\n                                            final int partIndex, final Visitor<T> visitor)", "class_method_signature": "Trie.insertCaptureSegment(final Path path, final Map<Character, Node<T>> edges,\n                                            final int partIndex, final Visitor<T> visitor)", "testcase": false, "constructor": false}, {"identifier": "insertMatch", "parameters": "(final Path path, final Node<T> node,\n                                   final Map<Character, Node<T>> edges,\n                                   final int pi, final Visitor<T> visitor,\n                                   final Path.Match part, final int ci)", "modifiers": "private static", "return": "T", "signature": "T insertMatch(final Path path, final Node<T> node,\n                                   final Map<Character, Node<T>> edges,\n                                   final int pi, final Visitor<T> visitor,\n                                   final Path.Match part, final int ci)", "full_signature": "private static T insertMatch(final Path path, final Node<T> node,\n                                   final Map<Character, Node<T>> edges,\n                                   final int pi, final Visitor<T> visitor,\n                                   final Path.Match part, final int ci)", "class_method_signature": "Trie.insertMatch(final Path path, final Node<T> node,\n                                   final Map<Character, Node<T>> edges,\n                                   final int pi, final Visitor<T> visitor,\n                                   final Path.Match part, final int ci)", "testcase": false, "constructor": false}, {"identifier": "compress", "parameters": "()", "modifiers": "", "return": "RadixTrie<T>", "signature": "RadixTrie<T> compress()", "full_signature": " RadixTrie<T> compress()", "class_method_signature": "Trie.compress()", "testcase": false, "constructor": false}, {"identifier": "compressEdges", "parameters": "(final Map<Character, Node<T>> nodes)", "modifiers": "private static", "return": "RadixTrie.Node<T>", "signature": "RadixTrie.Node<T> compressEdges(final Map<Character, Node<T>> nodes)", "full_signature": "private static RadixTrie.Node<T> compressEdges(final Map<Character, Node<T>> nodes)", "class_method_signature": "Trie.compressEdges(final Map<Character, Node<T>> nodes)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Trie.toString()", "testcase": false, "constructor": false}, {"identifier": "reversed", "parameters": "(final Collection<T> values)", "modifiers": "private static", "return": "Collection<T>", "signature": "Collection<T> reversed(final Collection<T> values)", "full_signature": "private static Collection<T> reversed(final Collection<T> values)", "class_method_signature": "Trie.reversed(final Collection<T> values)", "testcase": false, "constructor": false}], "file": "rut/src/main/java/io/norberg/rut/Trie.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String toString() {\n    return \"Trie{\" +\n           \"roots=\" + roots +\n           '}';\n  }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Trie.toString()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 30616178, "url": "https://github.com/danielnorberg/rut", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 18, "size": 221, "license": "licensed"}}