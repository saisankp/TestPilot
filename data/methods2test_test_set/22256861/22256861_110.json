{"test_class": {"identifier": "NcFileStitcherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private File targetDirectory;", "modifier": "private", "type": "File", "declarator": "targetDirectory", "var_name": "targetDirectory"}, {"original_string": "private NetcdfFile netcdfFile;", "modifier": "private", "type": "NetcdfFile", "declarator": "netcdfFile", "var_name": "netcdfFile"}], "file": "s3tbx-slstr-pdu-stitching/src/test/java/org/esa/s3tbx/slstr/pdu/stitching/NcFileStitcherTest.java"}, "test_case": {"identifier": "testSetDimensions", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSetDimensions() throws IOException, PDUStitchingException {\n        List<Dimension>[] dimensionLists = new ArrayList[2];\n        List<Variable>[] variableLists = new ArrayList[2];\n\n        final File inputFile1 = new File(targetDirectory, \"input_1.nc\");\n        SlstrNFileWritable inputWriteable1 = new SlstrNFileWritable(inputFile1.getAbsolutePath());\n        inputWriteable1.addDimension(\"rows\", 5);\n        inputWriteable1.addDimension(\"columns\", 7);\n        inputWriteable1.addDimension(\"the_twilight_zone\", 12);\n        final SlstrN4Variable abVariable1 = inputWriteable1.addVariable(\"ab\", DataType.BYTE, true, \"rows columns\");\n        final SlstrN4Variable cdVariable1 = inputWriteable1.addVariable(\"cd\", DataType.LONG, false, \"columns the_twilight_zone\");\n        inputWriteable1.create();\n        abVariable1.writeFullyInSections(new ArrayByte(new int[]{5, 7}, false));\n        cdVariable1.writeFullyInSections(new ArrayLong(new int[]{7, 12}, false));\n        inputWriteable1.close();\n        final NetcdfFile inputnc1 = NetcdfFileOpener.open(inputFile1);\n        assertNotNull(inputnc1);\n        dimensionLists[0] = inputnc1.getDimensions();\n        variableLists[0] = inputnc1.getVariables();\n        inputnc1.close();\n\n        final File inputFile2 = new File(targetDirectory, \"input_2.nc\");\n        final NFileWriteable inputWriteable2 = NWritableFactory.create(inputFile2.getAbsolutePath(), \"netcdf4\");\n        inputWriteable2.addDimension(\"rows\", 5);\n        inputWriteable2.addDimension(\"columns\", 7);\n        inputWriteable2.addDimension(\"outer_limits\", 25);\n        final NVariable abVariable2 = inputWriteable2.addVariable(\"ab\", DataType.BYTE, true, null, \"rows columns\");\n        final NVariable cdVariable2 = inputWriteable2.addVariable(\"ef\", DataType.LONG, false, null, \"columns outer_limits\");\n        inputWriteable2.create();\n        abVariable2.writeFully(new ArrayByte(new int[]{5, 7}, false));\n        cdVariable2.writeFully(new ArrayLong(new int[]{7, 25}, false));\n        inputWriteable2.close();\n        final NetcdfFile inputnc2 = NetcdfFileOpener.open(inputFile2);\n        assertNotNull(inputnc2);\n        dimensionLists[1] = inputnc2.getDimensions();\n        variableLists[1] = inputnc2.getVariables();\n        inputnc2.close();\n\n        final File file = new File(targetDirectory, \"something.nc\");\n        SlstrNFileWritable netcdfWriteable = new SlstrNFileWritable(file.getAbsolutePath());\n        ImageSize targetImageSize = new ImageSize(\"id\", 10, 20, 10, 20);\n        NcFileStitcher.setDimensions(netcdfWriteable, dimensionLists, targetImageSize, variableLists);\n        netcdfWriteable.create();\n        netcdfWriteable.close();\n        netcdfFile = NetcdfFileOpener.open(file);\n        assertNotNull(netcdfFile);\n        final List<Dimension> dimensions = netcdfFile.getDimensions();\n        assertEquals(4, dimensions.size());\n        Map<String, Integer> expectedDimensions = new HashMap<>();\n        expectedDimensions.put(\"rows\", 10);\n        expectedDimensions.put(\"columns\", 20);\n        expectedDimensions.put(\"the_twilight_zone\", 12);\n        expectedDimensions.put(\"outer_limits\", 25);\n        for (Dimension dimension : dimensions) {\n            assertTrue(expectedDimensions.containsKey(dimension.getFullName()));\n            assertEquals(expectedDimensions.get(dimension.getFullName()).intValue(), dimension.getLength());\n        }\n    }", "signature": "void testSetDimensions()", "full_signature": "@Test public void testSetDimensions()", "class_method_signature": "NcFileStitcherTest.testSetDimensions()", "testcase": true, "constructor": false, "invocations": ["getAbsolutePath", "addDimension", "addDimension", "addDimension", "addVariable", "addVariable", "create", "writeFullyInSections", "writeFullyInSections", "close", "open", "assertNotNull", "getDimensions", "getVariables", "close", "create", "getAbsolutePath", "addDimension", "addDimension", "addDimension", "addVariable", "addVariable", "create", "writeFully", "writeFully", "close", "open", "assertNotNull", "getDimensions", "getVariables", "close", "getAbsolutePath", "setDimensions", "create", "close", "open", "assertNotNull", "getDimensions", "assertEquals", "size", "put", "put", "put", "put", "assertTrue", "containsKey", "getFullName", "assertEquals", "intValue", "get", "getFullName", "getLength"]}, "focal_class": {"identifier": "NcFileStitcher", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String PRODUCT_NAME = \"product_name\";", "modifier": "private static final", "type": "String", "declarator": "PRODUCT_NAME = \"product_name\"", "var_name": "PRODUCT_NAME"}, {"original_string": "private static final String CREATION_TIME = \"creation_time\";", "modifier": "private static final", "type": "String", "declarator": "CREATION_TIME = \"creation_time\"", "var_name": "CREATION_TIME"}], "methods": [{"identifier": "stitchNcFiles", "parameters": "(String fileName, File targetDirectory, Date creationDate,\n                              File[] ncFiles, ImageSize targetImageSize, ImageSize[] imageSizes)", "modifiers": "static", "return": "File", "signature": "File stitchNcFiles(String fileName, File targetDirectory, Date creationDate,\n                              File[] ncFiles, ImageSize targetImageSize, ImageSize[] imageSizes)", "full_signature": "static File stitchNcFiles(String fileName, File targetDirectory, Date creationDate,\n                              File[] ncFiles, ImageSize targetImageSize, ImageSize[] imageSizes)", "class_method_signature": "NcFileStitcher.stitchNcFiles(String fileName, File targetDirectory, Date creationDate,\n                              File[] ncFiles, ImageSize targetImageSize, ImageSize[] imageSizes)", "testcase": false, "constructor": false}, {"identifier": "defineVariables", "parameters": "(SlstrNFileWritable netcdfWriteable, List<Variable>[] variableLists,\n                                                      ImageSize targetImageSize, ImageSize[] imageSizes)", "modifiers": "private static", "return": "Map<String, Array>", "signature": "Map<String, Array> defineVariables(SlstrNFileWritable netcdfWriteable, List<Variable>[] variableLists,\n                                                      ImageSize targetImageSize, ImageSize[] imageSizes)", "full_signature": "private static Map<String, Array> defineVariables(SlstrNFileWritable netcdfWriteable, List<Variable>[] variableLists,\n                                                      ImageSize targetImageSize, ImageSize[] imageSizes)", "class_method_signature": "NcFileStitcher.defineVariables(SlstrNFileWritable netcdfWriteable, List<Variable>[] variableLists,\n                                                      ImageSize targetImageSize, ImageSize[] imageSizes)", "testcase": false, "constructor": false}, {"identifier": "getValidArrayFromVariable", "parameters": "(Variable variable)", "modifiers": "private static", "return": "Array", "signature": "Array getValidArrayFromVariable(Variable variable)", "full_signature": "private static Array getValidArrayFromVariable(Variable variable)", "class_method_signature": "NcFileStitcher.getValidArrayFromVariable(Variable variable)", "testcase": false, "constructor": false}, {"identifier": "addVariableToWritable", "parameters": "(SlstrNFileWritable netcdfWriteable, Variable variable)", "modifiers": "private static", "return": "SlstrN4Variable", "signature": "SlstrN4Variable addVariableToWritable(SlstrNFileWritable netcdfWriteable, Variable variable)", "full_signature": "private static SlstrN4Variable addVariableToWritable(SlstrNFileWritable netcdfWriteable, Variable variable)", "class_method_signature": "NcFileStitcher.addVariableToWritable(SlstrNFileWritable netcdfWriteable, Variable variable)", "testcase": false, "constructor": false}, {"identifier": "createStitchedArray", "parameters": "(Variable variable, ImageSize targetImageSize, ImageSize[] imageSizes,\n                                             int indexOfRowDimension, List<Variable>[] variableLists, Number fillValue)", "modifiers": "private static", "return": "Array", "signature": "Array createStitchedArray(Variable variable, ImageSize targetImageSize, ImageSize[] imageSizes,\n                                             int indexOfRowDimension, List<Variable>[] variableLists, Number fillValue)", "full_signature": "private static Array createStitchedArray(Variable variable, ImageSize targetImageSize, ImageSize[] imageSizes,\n                                             int indexOfRowDimension, List<Variable>[] variableLists, Number fillValue)", "class_method_signature": "NcFileStitcher.createStitchedArray(Variable variable, ImageSize targetImageSize, ImageSize[] imageSizes,\n                                             int indexOfRowDimension, List<Variable>[] variableLists, Number fillValue)", "testcase": false, "constructor": false}, {"identifier": "getPreFilledArray", "parameters": "(DataType dataType, int[] shape, Number fillValue)", "modifiers": "private static", "return": "Array", "signature": "Array getPreFilledArray(DataType dataType, int[] shape, Number fillValue)", "full_signature": "private static Array getPreFilledArray(DataType dataType, int[] shape, Number fillValue)", "class_method_signature": "NcFileStitcher.getPreFilledArray(DataType dataType, int[] shape, Number fillValue)", "testcase": false, "constructor": false}, {"identifier": "addVariableAttributes", "parameters": "(SlstrN4Variable nVariable, Variable variable, int variableIndex,\n                                              List<Variable>[] variableLists)", "modifiers": "private static", "return": "void", "signature": "void addVariableAttributes(SlstrN4Variable nVariable, Variable variable, int variableIndex,\n                                              List<Variable>[] variableLists)", "full_signature": "private static void addVariableAttributes(SlstrN4Variable nVariable, Variable variable, int variableIndex,\n                                              List<Variable>[] variableLists)", "class_method_signature": "NcFileStitcher.addVariableAttributes(SlstrN4Variable nVariable, Variable variable, int variableIndex,\n                                              List<Variable>[] variableLists)", "testcase": false, "constructor": false}, {"identifier": "checkWhetherVariableHasSameDimensionsAcrossFiles", "parameters": "(int listIndex, Variable variable,\n                                                                         List<Variable>[] variableLists)", "modifiers": "private static", "return": "void", "signature": "void checkWhetherVariableHasSameDimensionsAcrossFiles(int listIndex, Variable variable,\n                                                                         List<Variable>[] variableLists)", "full_signature": "private static void checkWhetherVariableHasSameDimensionsAcrossFiles(int listIndex, Variable variable,\n                                                                         List<Variable>[] variableLists)", "class_method_signature": "NcFileStitcher.checkWhetherVariableHasSameDimensionsAcrossFiles(int listIndex, Variable variable,\n                                                                         List<Variable>[] variableLists)", "testcase": false, "constructor": false}, {"identifier": "getIndexOfRowDimension", "parameters": "(List<Dimension> variableDimensions)", "modifiers": "private static", "return": "int", "signature": "int getIndexOfRowDimension(List<Dimension> variableDimensions)", "full_signature": "private static int getIndexOfRowDimension(List<Dimension> variableDimensions)", "class_method_signature": "NcFileStitcher.getIndexOfRowDimension(List<Dimension> variableDimensions)", "testcase": false, "constructor": false}, {"identifier": "addAttributeToNVariable", "parameters": "(SlstrN4Variable nVariable, Attribute referenceAttribute, int index)", "modifiers": "private static", "return": "void", "signature": "void addAttributeToNVariable(SlstrN4Variable nVariable, Attribute referenceAttribute, int index)", "full_signature": "private static void addAttributeToNVariable(SlstrN4Variable nVariable, Attribute referenceAttribute, int index)", "class_method_signature": "NcFileStitcher.addAttributeToNVariable(SlstrN4Variable nVariable, Attribute referenceAttribute, int index)", "testcase": false, "constructor": false}, {"identifier": "addAttributeToNVariable", "parameters": "(SlstrN4Variable nVariable, Attribute referenceAttribute)", "modifiers": "private static", "return": "void", "signature": "void addAttributeToNVariable(SlstrN4Variable nVariable, Attribute referenceAttribute)", "full_signature": "private static void addAttributeToNVariable(SlstrN4Variable nVariable, Attribute referenceAttribute)", "class_method_signature": "NcFileStitcher.addAttributeToNVariable(SlstrN4Variable nVariable, Attribute referenceAttribute)", "testcase": false, "constructor": false}, {"identifier": "addAttributeToNVariable", "parameters": "(SlstrN4Variable nVariable, String name, Attribute referenceAttribute)", "modifiers": "private static", "return": "void", "signature": "void addAttributeToNVariable(SlstrN4Variable nVariable, String name, Attribute referenceAttribute)", "full_signature": "private static void addAttributeToNVariable(SlstrN4Variable nVariable, String name, Attribute referenceAttribute)", "class_method_signature": "NcFileStitcher.addAttributeToNVariable(SlstrN4Variable nVariable, String name, Attribute referenceAttribute)", "testcase": false, "constructor": false}, {"identifier": "getDimensionFromList", "parameters": "(String name, List<Dimension> dimensionList)", "modifiers": "private static", "return": "Dimension", "signature": "Dimension getDimensionFromList(String name, List<Dimension> dimensionList)", "full_signature": "private static Dimension getDimensionFromList(String name, List<Dimension> dimensionList)", "class_method_signature": "NcFileStitcher.getDimensionFromList(String name, List<Dimension> dimensionList)", "testcase": false, "constructor": false}, {"identifier": "getAttributeFromList", "parameters": "(String name, List<Attribute> attributeList)", "modifiers": "private static", "return": "Attribute", "signature": "Attribute getAttributeFromList(String name, List<Attribute> attributeList)", "full_signature": "private static Attribute getAttributeFromList(String name, List<Attribute> attributeList)", "class_method_signature": "NcFileStitcher.getAttributeFromList(String name, List<Attribute> attributeList)", "testcase": false, "constructor": false}, {"identifier": "getVariableFromList", "parameters": "(String name, List<Variable> variableList)", "modifiers": "private static", "return": "Variable", "signature": "Variable getVariableFromList(String name, List<Variable> variableList)", "full_signature": "private static Variable getVariableFromList(String name, List<Variable> variableList)", "class_method_signature": "NcFileStitcher.getVariableFromList(String name, List<Variable> variableList)", "testcase": false, "constructor": false}, {"identifier": "determineDestinationOffsets", "parameters": "(int[] rowOffsets, int[] numberOfRows,\n                                               int[] sectionSizes, int[][] sourceOffsets)", "modifiers": "static", "return": "int[][]", "signature": "int[][] determineDestinationOffsets(int[] rowOffsets, int[] numberOfRows,\n                                               int[] sectionSizes, int[][] sourceOffsets)", "full_signature": "static int[][] determineDestinationOffsets(int[] rowOffsets, int[] numberOfRows,\n                                               int[] sectionSizes, int[][] sourceOffsets)", "class_method_signature": "NcFileStitcher.determineDestinationOffsets(int[] rowOffsets, int[] numberOfRows,\n                                               int[] sectionSizes, int[][] sourceOffsets)", "testcase": false, "constructor": false}, {"identifier": "determineSourceOffsets", "parameters": "(int sectionSize, Variable variable)", "modifiers": "static", "return": "int[]", "signature": "int[] determineSourceOffsets(int sectionSize, Variable variable)", "full_signature": "static int[] determineSourceOffsets(int sectionSize, Variable variable)", "class_method_signature": "NcFileStitcher.determineSourceOffsets(int sectionSize, Variable variable)", "testcase": false, "constructor": false}, {"identifier": "determineSectionSize", "parameters": "(int indexOfRowDimension, Variable variable)", "modifiers": "static", "return": "int", "signature": "int determineSectionSize(int indexOfRowDimension, Variable variable)", "full_signature": "static int determineSectionSize(int indexOfRowDimension, Variable variable)", "class_method_signature": "NcFileStitcher.determineSectionSize(int indexOfRowDimension, Variable variable)", "testcase": false, "constructor": false}, {"identifier": "setDimensions", "parameters": "(SlstrNFileWritable nFileWriteable, List<Dimension>[] dimensionLists,\n                              ImageSize targetImageSize, List<Variable>[] variableLists)", "modifiers": "static", "return": "void", "signature": "void setDimensions(SlstrNFileWritable nFileWriteable, List<Dimension>[] dimensionLists,\n                              ImageSize targetImageSize, List<Variable>[] variableLists)", "full_signature": "static void setDimensions(SlstrNFileWritable nFileWriteable, List<Dimension>[] dimensionLists,\n                              ImageSize targetImageSize, List<Variable>[] variableLists)", "class_method_signature": "NcFileStitcher.setDimensions(SlstrNFileWritable nFileWriteable, List<Dimension>[] dimensionLists,\n                              ImageSize targetImageSize, List<Variable>[] variableLists)", "testcase": false, "constructor": false}, {"identifier": "checkWhetherEquallyNamedVariablesContainEqualValues", "parameters": "(String dimensionName, int dimensionIndex,\n                                                                            List<Variable>[] variableLists)", "modifiers": "private static", "return": "void", "signature": "void checkWhetherEquallyNamedVariablesContainEqualValues(String dimensionName, int dimensionIndex,\n                                                                            List<Variable>[] variableLists)", "full_signature": "private static void checkWhetherEquallyNamedVariablesContainEqualValues(String dimensionName, int dimensionIndex,\n                                                                            List<Variable>[] variableLists)", "class_method_signature": "NcFileStitcher.checkWhetherEquallyNamedVariablesContainEqualValues(String dimensionName, int dimensionIndex,\n                                                                            List<Variable>[] variableLists)", "testcase": false, "constructor": false}, {"identifier": "checkWhetherDimensionLengthIsEqualAcrossAllEquallyNamedDimensions", "parameters": "(Dimension dimension,\n                                                                                          int dimensionIndex,\n                                                                                          List<Dimension>[] dimensionLists)", "modifiers": "private static", "return": "void", "signature": "void checkWhetherDimensionLengthIsEqualAcrossAllEquallyNamedDimensions(Dimension dimension,\n                                                                                          int dimensionIndex,\n                                                                                          List<Dimension>[] dimensionLists)", "full_signature": "private static void checkWhetherDimensionLengthIsEqualAcrossAllEquallyNamedDimensions(Dimension dimension,\n                                                                                          int dimensionIndex,\n                                                                                          List<Dimension>[] dimensionLists)", "class_method_signature": "NcFileStitcher.checkWhetherDimensionLengthIsEqualAcrossAllEquallyNamedDimensions(Dimension dimension,\n                                                                                          int dimensionIndex,\n                                                                                          List<Dimension>[] dimensionLists)", "testcase": false, "constructor": false}, {"identifier": "setGlobalAttributes", "parameters": "(SlstrNFileWritable nFileWriteable, List<Attribute>[] globalAttributeLists,\n                                    String parentDirectoryName, Date creationDate)", "modifiers": "static", "return": "void", "signature": "void setGlobalAttributes(SlstrNFileWritable nFileWriteable, List<Attribute>[] globalAttributeLists,\n                                    String parentDirectoryName, Date creationDate)", "full_signature": "static void setGlobalAttributes(SlstrNFileWritable nFileWriteable, List<Attribute>[] globalAttributeLists,\n                                    String parentDirectoryName, Date creationDate)", "class_method_signature": "NcFileStitcher.setGlobalAttributes(SlstrNFileWritable nFileWriteable, List<Attribute>[] globalAttributeLists,\n                                    String parentDirectoryName, Date creationDate)", "testcase": false, "constructor": false}, {"identifier": "areAttributeValuesEqual", "parameters": "(Attribute attribute1, Attribute attribute2)", "modifiers": "private static", "return": "boolean", "signature": "boolean areAttributeValuesEqual(Attribute attribute1, Attribute attribute2)", "full_signature": "private static boolean areAttributeValuesEqual(Attribute attribute1, Attribute attribute2)", "class_method_signature": "NcFileStitcher.areAttributeValuesEqual(Attribute attribute1, Attribute attribute2)", "testcase": false, "constructor": false}, {"identifier": "areArraysEqual", "parameters": "(Array array1, Array array2)", "modifiers": "private static", "return": "boolean", "signature": "boolean areArraysEqual(Array array1, Array array2)", "full_signature": "private static boolean areArraysEqual(Array array1, Array array2)", "class_method_signature": "NcFileStitcher.areArraysEqual(Array array1, Array array2)", "testcase": false, "constructor": false}], "file": "s3tbx-slstr-pdu-stitching/src/main/java/org/esa/s3tbx/slstr/pdu/stitching/NcFileStitcher.java"}, "focal_method": {"identifier": "setDimensions", "parameters": "(SlstrNFileWritable nFileWriteable, List<Dimension>[] dimensionLists,\n                              ImageSize targetImageSize, List<Variable>[] variableLists)", "modifiers": "static", "return": "void", "body": "static void setDimensions(SlstrNFileWritable nFileWriteable, List<Dimension>[] dimensionLists,\n                              ImageSize targetImageSize, List<Variable>[] variableLists)\n            throws PDUStitchingException, IOException {\n        List<String> namesOfAddedDimensions = new ArrayList<>();\n        for (int i = 0; i < dimensionLists.length; i++) {\n            List<Dimension> dimensions = dimensionLists[i];\n            for (Dimension dimension : dimensions) {\n                final String dimensionName = dimension.getFullName();\n                if (!namesOfAddedDimensions.contains(dimensionName)) {\n                    switch (dimensionName) {\n                        case \"rows\":\n                            nFileWriteable.addDimension(\"rows\", targetImageSize.getRows());\n                            break;\n                        case \"columns\":\n                            nFileWriteable.addDimension(\"columns\", targetImageSize.getColumns());\n                            break;\n                        default:\n                            checkWhetherEquallyNamedVariablesContainEqualValues(dimensionName, i, variableLists);\n                            checkWhetherDimensionLengthIsEqualAcrossAllEquallyNamedDimensions(dimension, i, dimensionLists);\n                            nFileWriteable.addDimension(dimensionName, dimension.getLength());\n                            break;\n                    }\n                    namesOfAddedDimensions.add(dimensionName);\n                }\n            }\n        }\n    }", "signature": "void setDimensions(SlstrNFileWritable nFileWriteable, List<Dimension>[] dimensionLists,\n                              ImageSize targetImageSize, List<Variable>[] variableLists)", "full_signature": "static void setDimensions(SlstrNFileWritable nFileWriteable, List<Dimension>[] dimensionLists,\n                              ImageSize targetImageSize, List<Variable>[] variableLists)", "class_method_signature": "NcFileStitcher.setDimensions(SlstrNFileWritable nFileWriteable, List<Dimension>[] dimensionLists,\n                              ImageSize targetImageSize, List<Variable>[] variableLists)", "testcase": false, "constructor": false, "invocations": ["getFullName", "contains", "addDimension", "getRows", "addDimension", "getColumns", "checkWhetherEquallyNamedVariablesContainEqualValues", "checkWhetherDimensionLengthIsEqualAcrossAllEquallyNamedDimensions", "addDimension", "getLength", "add"]}, "repository": {"repo_id": 22256861, "url": "https://github.com/senbox-org/s3tbx", "stars": 22, "created": "7/25/2014 12:57:22 PM +00:00", "updates": "2020-01-27T10:23:46+00:00", "fork": "False", "license": "licensed"}}