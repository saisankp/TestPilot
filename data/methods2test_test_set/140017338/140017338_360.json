{"test_class": {"identifier": "JsonReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private List<Artifact> artifacts;", "modifier": "private", "type": "List<Artifact>", "declarator": "artifacts", "var_name": "artifacts"}], "file": "core/core-workflow-steps/src/test/java/org/eclipse/sw360/antenna/jsonreader/JsonReaderTest.java"}, "test_case": {"identifier": "testMapLicenses", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMapLicenses() throws URISyntaxException, IOException {\n        Path recordFilePath = Paths.get(\".\", \"target\", \"foo\");\n        JsonReader jsonReader = new JsonReader(recordFilePath, Paths.get(\"tmp\"), StandardCharsets.UTF_8);\n        URI uri = this.getClass().getClassLoader().getResource(\"JsonReaderTest/data.json\").toURI();\n        InputStream iStream = Files.newInputStream(Paths.get(uri));\n        artifacts = jsonReader.createArtifactsList(iStream);\n        assertThat(artifacts.get(0).askForGet(DeclaredLicenseInformation.class).get().evaluate()).isEqualTo(\"( license1 AND license2 AND license3 )\");\n    }", "signature": "void testMapLicenses()", "full_signature": "@Test public void testMapLicenses()", "class_method_signature": "JsonReaderTest.testMapLicenses()", "testcase": true, "constructor": false, "invocations": ["get", "get", "toURI", "getResource", "getClassLoader", "getClass", "newInputStream", "get", "createArtifactsList", "isEqualTo", "assertThat", "evaluate", "get", "askForGet", "get"]}, "focal_class": {"identifier": "JsonReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(JsonReader.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(JsonReader.class)", "var_name": "LOGGER"}, {"original_string": "private static final String COMPONENTS = \"components\";", "modifier": "private static final", "type": "String", "declarator": "COMPONENTS = \"components\"", "var_name": "COMPONENTS"}, {"original_string": "private final Charset encoding;", "modifier": "private final", "type": "Charset", "declarator": "encoding", "var_name": "encoding"}, {"original_string": "private final Path recordingFile;", "modifier": "private final", "type": "Path", "declarator": "recordingFile", "var_name": "recordingFile"}, {"original_string": "private final Path dependencyDir;", "modifier": "private final", "type": "Path", "declarator": "dependencyDir", "var_name": "dependencyDir"}, {"original_string": "private static final String JSON_OBJ_PATHNAMES = \"pathnames\";", "modifier": "private static final", "type": "String", "declarator": "JSON_OBJ_PATHNAMES = \"pathnames\"", "var_name": "JSON_OBJ_PATHNAMES"}, {"original_string": "private static final String JSON_OBJ_VERSION = \"version\";", "modifier": "private static final", "type": "String", "declarator": "JSON_OBJ_VERSION = \"version\"", "var_name": "JSON_OBJ_VERSION"}, {"original_string": "private static final String JSON_OBJ_COORDINATES = \"coordinates\";", "modifier": "private static final", "type": "String", "declarator": "JSON_OBJ_COORDINATES = \"coordinates\"", "var_name": "JSON_OBJ_COORDINATES"}, {"original_string": "private static final Map<String, MissingLicenseReasons> SPECIAL_INFORMATION = Stream.of(new Object[][] {\n                {\"No-Sources\", MissingLicenseReasons.NO_SOURCES},\n                {\"No-Source-License\", MissingLicenseReasons.NO_LICENSE_IN_SOURCES},\n                {\"Not-Declared\", MissingLicenseReasons.NOT_DECLARED},\n                {\"Not-Provided\", MissingLicenseReasons.NOT_PROVIDED},\n                {\"Not-Supported\", MissingLicenseReasons.NOT_SUPPORTED},\n                {\"Non-Standard\", MissingLicenseReasons.NON_STANDARD}})\n                .collect(Collectors.toMap(data -> (String) data[0], data -> (MissingLicenseReasons) data[1]));", "modifier": "private static final", "type": "Map<String, MissingLicenseReasons>", "declarator": "SPECIAL_INFORMATION = Stream.of(new Object[][] {\n                {\"No-Sources\", MissingLicenseReasons.NO_SOURCES},\n                {\"No-Source-License\", MissingLicenseReasons.NO_LICENSE_IN_SOURCES},\n                {\"Not-Declared\", MissingLicenseReasons.NOT_DECLARED},\n                {\"Not-Provided\", MissingLicenseReasons.NOT_PROVIDED},\n                {\"Not-Supported\", MissingLicenseReasons.NOT_SUPPORTED},\n                {\"Non-Standard\", MissingLicenseReasons.NON_STANDARD}})\n                .collect(Collectors.toMap(data -> (String) data[0], data -> (MissingLicenseReasons) data[1]))", "var_name": "SPECIAL_INFORMATION"}], "methods": [{"identifier": "JsonReader", "parameters": "(Path recordingFile, Path dependencyDir, Charset encoding)", "modifiers": "public", "return": "", "signature": " JsonReader(Path recordingFile, Path dependencyDir, Charset encoding)", "full_signature": "public  JsonReader(Path recordingFile, Path dependencyDir, Charset encoding)", "class_method_signature": "JsonReader.JsonReader(Path recordingFile, Path dependencyDir, Charset encoding)", "testcase": false, "constructor": true}, {"identifier": "readJsonObjects", "parameters": "(InputStream stream)", "modifiers": "private", "return": "List<JsonObject>", "signature": "List<JsonObject> readJsonObjects(InputStream stream)", "full_signature": "private List<JsonObject> readJsonObjects(InputStream stream)", "class_method_signature": "JsonReader.readJsonObjects(InputStream stream)", "testcase": false, "constructor": false}, {"identifier": "createArtifactsList", "parameters": "(InputStream stream, List<String> filterStrings)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") protected", "return": "List<Artifact>", "signature": "List<Artifact> createArtifactsList(InputStream stream, List<String> filterStrings)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") protected List<Artifact> createArtifactsList(InputStream stream, List<String> filterStrings)", "class_method_signature": "JsonReader.createArtifactsList(InputStream stream, List<String> filterStrings)", "testcase": false, "constructor": false}, {"identifier": "createArtifactsList", "parameters": "(InputStream is)", "modifiers": "public", "return": "List<Artifact>", "signature": "List<Artifact> createArtifactsList(InputStream is)", "full_signature": "public List<Artifact> createArtifactsList(InputStream is)", "class_method_signature": "JsonReader.createArtifactsList(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "filterObject", "parameters": "(JsonObject object, Optional<List<String>> filterStrings)", "modifiers": "private", "return": "boolean", "signature": "boolean filterObject(JsonObject object, Optional<List<String>> filterStrings)", "full_signature": "private boolean filterObject(JsonObject object, Optional<List<String>> filterStrings)", "class_method_signature": "JsonReader.filterObject(JsonObject object, Optional<List<String>> filterStrings)", "testcase": false, "constructor": false}, {"identifier": "mapArtifact", "parameters": "(JsonObject obj)", "modifiers": "private", "return": "Artifact", "signature": "Artifact mapArtifact(JsonObject obj)", "full_signature": "private Artifact mapArtifact(JsonObject obj)", "class_method_signature": "JsonReader.mapArtifact(JsonObject obj)", "testcase": false, "constructor": false}, {"identifier": "potentiallyAddSpecialLicenseInformation", "parameters": "(JsonObject licenseDataObj, Artifact a)", "modifiers": "private", "return": "void", "signature": "void potentiallyAddSpecialLicenseInformation(JsonObject licenseDataObj, Artifact a)", "full_signature": "private void potentiallyAddSpecialLicenseInformation(JsonObject licenseDataObj, Artifact a)", "class_method_signature": "JsonReader.potentiallyAddSpecialLicenseInformation(JsonObject licenseDataObj, Artifact a)", "testcase": false, "constructor": false}, {"identifier": "extractSpecialLicenseDeclarations", "parameters": "(String identifier, JsonObject licenseDataObj)", "modifiers": "private", "return": "List<MissingLicenseReasons>", "signature": "List<MissingLicenseReasons> extractSpecialLicenseDeclarations(String identifier, JsonObject licenseDataObj)", "full_signature": "private List<MissingLicenseReasons> extractSpecialLicenseDeclarations(String identifier, JsonObject licenseDataObj)", "class_method_signature": "JsonReader.extractSpecialLicenseDeclarations(String identifier, JsonObject licenseDataObj)", "testcase": false, "constructor": false}, {"identifier": "mapSecurityIssues", "parameters": "(JsonObject securityDataObj)", "modifiers": "private", "return": "Issues", "signature": "Issues mapSecurityIssues(JsonObject securityDataObj)", "full_signature": "private Issues mapSecurityIssues(JsonObject securityDataObj)", "class_method_signature": "JsonReader.mapSecurityIssues(JsonObject securityDataObj)", "testcase": false, "constructor": false}, {"identifier": "parseSeverity", "parameters": "(JsonObject json)", "modifiers": "private static", "return": "double", "signature": "double parseSeverity(JsonObject json)", "full_signature": "private static double parseSeverity(JsonObject json)", "class_method_signature": "JsonReader.parseSeverity(JsonObject json)", "testcase": false, "constructor": false}, {"identifier": "mapFilename", "parameters": "(JsonObject obj)", "modifiers": "private", "return": "ArtifactFilename", "signature": "ArtifactFilename mapFilename(JsonObject obj)", "full_signature": "private ArtifactFilename mapFilename(JsonObject obj)", "class_method_signature": "JsonReader.mapFilename(JsonObject obj)", "testcase": false, "constructor": false}, {"identifier": "mapLicenses", "parameters": "(String identifier, JsonObject licenseDataObj)", "modifiers": "private", "return": "LicenseInformation", "signature": "LicenseInformation mapLicenses(String identifier, JsonObject licenseDataObj)", "full_signature": "private LicenseInformation mapLicenses(String identifier, JsonObject licenseDataObj)", "class_method_signature": "JsonReader.mapLicenses(String identifier, JsonObject licenseDataObj)", "testcase": false, "constructor": false}, {"identifier": "mapPathNames", "parameters": "(JsonObject obj)", "modifiers": "private", "return": "String[]", "signature": "String[] mapPathNames(JsonObject obj)", "full_signature": "private String[] mapPathNames(JsonObject obj)", "class_method_signature": "JsonReader.mapPathNames(JsonObject obj)", "testcase": false, "constructor": false}, {"identifier": "mapProprietary", "parameters": "(JsonObject obj)", "modifiers": "private", "return": "boolean", "signature": "boolean mapProprietary(JsonObject obj)", "full_signature": "private boolean mapProprietary(JsonObject obj)", "class_method_signature": "JsonReader.mapProprietary(JsonObject obj)", "testcase": false, "constructor": false}, {"identifier": "mapMatchState", "parameters": "(JsonObject obj)", "modifiers": "private", "return": "MatchState", "signature": "MatchState mapMatchState(JsonObject obj)", "full_signature": "private MatchState mapMatchState(JsonObject obj)", "class_method_signature": "JsonReader.mapMatchState(JsonObject obj)", "testcase": false, "constructor": false}, {"identifier": "mapMavenCoordinates", "parameters": "(JsonObject objCoordinates)", "modifiers": "private", "return": "Optional<Coordinate>", "signature": "Optional<Coordinate> mapMavenCoordinates(JsonObject objCoordinates)", "full_signature": "private Optional<Coordinate> mapMavenCoordinates(JsonObject objCoordinates)", "class_method_signature": "JsonReader.mapMavenCoordinates(JsonObject objCoordinates)", "testcase": false, "constructor": false}, {"identifier": "mapJavaScriptCoordinates", "parameters": "(JsonObject objCoordinates)", "modifiers": "private", "return": "Optional<Coordinate>", "signature": "Optional<Coordinate> mapJavaScriptCoordinates(JsonObject objCoordinates)", "full_signature": "private Optional<Coordinate> mapJavaScriptCoordinates(JsonObject objCoordinates)", "class_method_signature": "JsonReader.mapJavaScriptCoordinates(JsonObject objCoordinates)", "testcase": false, "constructor": false}, {"identifier": "mapDotNetCoordinates", "parameters": "(JsonObject objCoordinates)", "modifiers": "private", "return": "Optional<Coordinate>", "signature": "Optional<Coordinate> mapDotNetCoordinates(JsonObject objCoordinates)", "full_signature": "private Optional<Coordinate> mapDotNetCoordinates(JsonObject objCoordinates)", "class_method_signature": "JsonReader.mapDotNetCoordinates(JsonObject objCoordinates)", "testcase": false, "constructor": false}, {"identifier": "mapCoordinates", "parameters": "(JsonObject object)", "modifiers": "private", "return": "Optional<Coordinate>", "signature": "Optional<Coordinate> mapCoordinates(JsonObject object)", "full_signature": "private Optional<Coordinate> mapCoordinates(JsonObject object)", "class_method_signature": "JsonReader.mapCoordinates(JsonObject object)", "testcase": false, "constructor": false}, {"identifier": "getJavaScriptCoordinatesNamespace", "parameters": "(String name)", "modifiers": "private", "return": "String", "signature": "String getJavaScriptCoordinatesNamespace(String name)", "full_signature": "private String getJavaScriptCoordinatesNamespace(String name)", "class_method_signature": "JsonReader.getJavaScriptCoordinatesNamespace(String name)", "testcase": false, "constructor": false}, {"identifier": "getJavaScriptCoordinatesPackageName", "parameters": "(String name)", "modifiers": "private", "return": "String", "signature": "String getJavaScriptCoordinatesPackageName(String name)", "full_signature": "private String getJavaScriptCoordinatesPackageName(String name)", "class_method_signature": "JsonReader.getJavaScriptCoordinatesPackageName(String name)", "testcase": false, "constructor": false}, {"identifier": "mapArtifactDownloadurl", "parameters": "(JsonObject obj)", "modifiers": "private", "return": "String", "signature": "String mapArtifactDownloadurl(JsonObject obj)", "full_signature": "private String mapArtifactDownloadurl(JsonObject obj)", "class_method_signature": "JsonReader.mapArtifactDownloadurl(JsonObject obj)", "testcase": false, "constructor": false}, {"identifier": "getEncoding", "parameters": "()", "modifiers": "protected", "return": "Charset", "signature": "Charset getEncoding()", "full_signature": "protected Charset getEncoding()", "class_method_signature": "JsonReader.getEncoding()", "testcase": false, "constructor": false}, {"identifier": "getRecordingFile", "parameters": "()", "modifiers": "protected", "return": "Path", "signature": "Path getRecordingFile()", "full_signature": "protected Path getRecordingFile()", "class_method_signature": "JsonReader.getRecordingFile()", "testcase": false, "constructor": false}], "file": "core/core-workflow-steps/src/main/java/org/eclipse/sw360/antenna/jsonreader/JsonReader.java"}, "focal_method": {"identifier": "mapLicenses", "parameters": "(String identifier, JsonObject licenseDataObj)", "modifiers": "private", "return": "LicenseInformation", "body": "private LicenseInformation mapLicenses(String identifier, JsonObject licenseDataObj) {\n        if (null != licenseDataObj) {\n            JsonArray objs = (JsonArray) licenseDataObj.get(identifier);\n            if (null != objs) {\n                Spliterator<Object> tmp = objs.spliterator();\n                Collection<String> licenses = StreamSupport.stream(tmp, false)\n                        .map(obj -> (JsonObject) obj)\n                        .map(obj -> (String) obj.get(\"licenseId\"))\n                        // We delete all special strings which can be used to convey information about missing licenses\n                        .filter(licenseId -> !SPECIAL_INFORMATION.containsKey(licenseId))\n                        .collect(Collectors.toSet());\n                return LicenseSupport.mapLicenses(licenses);\n            }\n        }\n        return new LicenseStatement();\n    }", "signature": "LicenseInformation mapLicenses(String identifier, JsonObject licenseDataObj)", "full_signature": "private LicenseInformation mapLicenses(String identifier, JsonObject licenseDataObj)", "class_method_signature": "JsonReader.mapLicenses(String identifier, JsonObject licenseDataObj)", "testcase": false, "constructor": false, "invocations": ["get", "spliterator", "collect", "filter", "map", "map", "stream", "get", "containsKey", "toSet", "mapLicenses"]}, "repository": {"repo_id": 140017338, "url": "https://github.com/eclipse/antenna", "stars": 14, "created": "7/6/2018 6:17:28 PM +00:00", "updates": "2020-01-21T13:15:34+00:00", "fork": "False", "license": "licensed"}}