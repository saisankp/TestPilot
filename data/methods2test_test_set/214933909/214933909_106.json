{"test_class": {"identifier": "RefreshableDataSourceTest", "superclass": "", "interfaces": "", "fields": [], "file": "das-client/src/test/java/com/ppdai/das/core/datasource/RefreshableDataSourceTest.java"}, "test_case": {"identifier": "test", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test() throws SQLException, IllegalAccessException {\n        DasClient client = DasClientFactory.getClient(\"MySqlSimple\");\n        SqlBuilder sqlBuilder = SqlBuilder.selectCount().from(Person.PERSON).intoObject();\n        Number before = client.queryObject(sqlBuilder);\n\n        DataSourceConfigure oldConfig = DataSourceConfigureLocatorManager.getInstance().getDataSourceConfigure(\"dal_shard_0\");\n        DataSourceConfigure newConfig = new DataSourceConfigure(oldConfig.getName(), oldConfig.getProperties());\n        DataSourceConfigureChangeEvent event = new DataSourceConfigureChangeEvent(\"testEvent\", newConfig, oldConfig);\n\n        ConcurrentHashMap<String, DataSource> dss = (ConcurrentHashMap<String, DataSource>) FieldUtils.readStaticField(DataSourceLocator.class, \"cache\", true);\n        RefreshableDataSource dataSource = (RefreshableDataSource) dss.get(\"dal_shard_0\");\n        SingleDataSource oldSingleDataSource = ((AtomicReference<SingleDataSource>)FieldUtils.readField(dataSource, \"dataSourceReference\", true)).get();\n        dataSource.configChanged(event);\n        Number after = client.queryObject(sqlBuilder);\n\n        //verify datasource changed\n        assertNotSame(oldSingleDataSource, ((AtomicReference<SingleDataSource>)FieldUtils.readField(dataSource, \"dataSourceReference\", true)).get());\n        //verify new datasource work fine\n        assertEquals(before, after);\n    }", "signature": "void test()", "full_signature": "@Test public void test()", "class_method_signature": "RefreshableDataSourceTest.test()", "testcase": true, "constructor": false, "invocations": ["getClient", "intoObject", "from", "selectCount", "queryObject", "getDataSourceConfigure", "getInstance", "getName", "getProperties", "readStaticField", "get", "get", "readField", "configChanged", "queryObject", "assertNotSame", "get", "readField", "assertEquals"]}, "focal_class": {"identifier": "RefreshableDataSource", "superclass": "", "interfaces": "implements DataSource, DataSourceConfigureChangeListener", "fields": [{"original_string": "private AtomicReference<SingleDataSource> dataSourceReference = new AtomicReference<>();", "modifier": "private", "type": "AtomicReference<SingleDataSource>", "declarator": "dataSourceReference = new AtomicReference<>()", "var_name": "dataSourceReference"}], "methods": [{"identifier": "RefreshableDataSource", "parameters": "(String name, DataSourceConfigure config)", "modifiers": "public", "return": "", "signature": " RefreshableDataSource(String name, DataSourceConfigure config)", "full_signature": "public  RefreshableDataSource(String name, DataSourceConfigure config)", "class_method_signature": "RefreshableDataSource.RefreshableDataSource(String name, DataSourceConfigure config)", "testcase": false, "constructor": true}, {"identifier": "configChanged", "parameters": "(DataSourceConfigureChangeEvent event)", "modifiers": "@Override public synchronized", "return": "void", "signature": "void configChanged(DataSourceConfigureChangeEvent event)", "full_signature": "@Override public synchronized void configChanged(DataSourceConfigureChangeEvent event)", "class_method_signature": "RefreshableDataSource.configChanged(DataSourceConfigureChangeEvent event)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(SingleDataSource oldDataSource)", "modifiers": "private", "return": "void", "signature": "void close(SingleDataSource oldDataSource)", "full_signature": "private void close(SingleDataSource oldDataSource)", "class_method_signature": "RefreshableDataSource.close(SingleDataSource oldDataSource)", "testcase": false, "constructor": false}, {"identifier": "getDataSource", "parameters": "()", "modifiers": "private", "return": "DataSource", "signature": "DataSource getDataSource()", "full_signature": "private DataSource getDataSource()", "class_method_signature": "RefreshableDataSource.getDataSource()", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "()", "modifiers": "@Override public", "return": "Connection", "signature": "Connection getConnection()", "full_signature": "@Override public Connection getConnection()", "class_method_signature": "RefreshableDataSource.getConnection()", "testcase": false, "constructor": false}, {"identifier": "getConnection", "parameters": "(String paramString1, String paramString2)", "modifiers": "@Override public", "return": "Connection", "signature": "Connection getConnection(String paramString1, String paramString2)", "full_signature": "@Override public Connection getConnection(String paramString1, String paramString2)", "class_method_signature": "RefreshableDataSource.getConnection(String paramString1, String paramString2)", "testcase": false, "constructor": false}, {"identifier": "getLogWriter", "parameters": "()", "modifiers": "@Override public", "return": "PrintWriter", "signature": "PrintWriter getLogWriter()", "full_signature": "@Override public PrintWriter getLogWriter()", "class_method_signature": "RefreshableDataSource.getLogWriter()", "testcase": false, "constructor": false}, {"identifier": "getLoginTimeout", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getLoginTimeout()", "full_signature": "@Override public int getLoginTimeout()", "class_method_signature": "RefreshableDataSource.getLoginTimeout()", "testcase": false, "constructor": false}, {"identifier": "setLogWriter", "parameters": "(PrintWriter paramPrintWriter)", "modifiers": "@Override public", "return": "void", "signature": "void setLogWriter(PrintWriter paramPrintWriter)", "full_signature": "@Override public void setLogWriter(PrintWriter paramPrintWriter)", "class_method_signature": "RefreshableDataSource.setLogWriter(PrintWriter paramPrintWriter)", "testcase": false, "constructor": false}, {"identifier": "setLoginTimeout", "parameters": "(int paramInt)", "modifiers": "@Override public", "return": "void", "signature": "void setLoginTimeout(int paramInt)", "full_signature": "@Override public void setLoginTimeout(int paramInt)", "class_method_signature": "RefreshableDataSource.setLoginTimeout(int paramInt)", "testcase": false, "constructor": false}, {"identifier": "getParentLogger", "parameters": "()", "modifiers": "@Override public", "return": "java.util.logging.Logger", "signature": "java.util.logging.Logger getParentLogger()", "full_signature": "@Override public java.util.logging.Logger getParentLogger()", "class_method_signature": "RefreshableDataSource.getParentLogger()", "testcase": false, "constructor": false}, {"identifier": "unwrap", "parameters": "(Class<T> iface)", "modifiers": "@Override public", "return": "T", "signature": "T unwrap(Class<T> iface)", "full_signature": "@Override public T unwrap(Class<T> iface)", "class_method_signature": "RefreshableDataSource.unwrap(Class<T> iface)", "testcase": false, "constructor": false}, {"identifier": "isWrapperFor", "parameters": "(Class<?> iface)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWrapperFor(Class<?> iface)", "full_signature": "@Override public boolean isWrapperFor(Class<?> iface)", "class_method_signature": "RefreshableDataSource.isWrapperFor(Class<?> iface)", "testcase": false, "constructor": false}], "file": "das-client/src/main/java/com/ppdai/das/core/datasource/RefreshableDataSource.java"}, "focal_method": {"identifier": "configChanged", "parameters": "(DataSourceConfigureChangeEvent event)", "modifiers": "@Override public synchronized", "return": "void", "body": "@Override\n    public synchronized void configChanged(DataSourceConfigureChangeEvent event) throws SQLException {\n        String name = event.getName();\n        DataSourceConfigure newConfigure = event.getNewDataSourceConfigure();\n        SingleDataSource oldDataSource = dataSourceReference.getAndSet(newConfigure == null ? null : new SingleDataSource(name, newConfigure));\n        close(oldDataSource);\n    }", "signature": "void configChanged(DataSourceConfigureChangeEvent event)", "full_signature": "@Override public synchronized void configChanged(DataSourceConfigureChangeEvent event)", "class_method_signature": "RefreshableDataSource.configChanged(DataSourceConfigureChangeEvent event)", "testcase": false, "constructor": false, "invocations": ["getName", "getNewDataSourceConfigure", "getAndSet", "close"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}