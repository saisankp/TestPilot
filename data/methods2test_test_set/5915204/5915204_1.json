{"test_class": {"identifier": "ConstructorModuleTest", "superclass": "extends AbstractTest", "interfaces": "", "fields": [], "file": "omicron-core/src/test/java/com/lyndir/omicron/api/ConstructorModuleTest.java"}, "test_case": {"identifier": "testOnNewTurn", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOnNewTurn()\n            throws Exception {\n\n        // Create a unit that can build BASE & MOBILITY.\n        ConstructorModule initBaseConstructorModule = ConstructorModule.createWithStandardResourceCost()\n                                                                       .buildSpeed( 3 )\n                                                                       .buildsModule( ModuleType.BASE );\n        ConstructorModule initMobilityConstructorModule = ConstructorModule.createWithStandardResourceCost()\n                                                                           .buildSpeed( 2 )\n                                                                           .buildsModule( ModuleType.MOBILITY );\n        GameObject baseMobilityConstructorUnit = createUnit( testUnitType( \"Base Mobility Constructor\",\n                                                                           BaseModule.createWithStandardResourceCost()\n                                                                                     .maxHealth( 1 )\n                                                                                     .armor( 1 )\n                                                                                     .viewRange( 1 )\n                                                                                     .supportedLayers( LevelType.values() ),\n                                                                           initBaseConstructorModule, initMobilityConstructorModule ), //\n                                                             5, 5 );\n        staticGame.getController().setReady();\n\n        // Create a BASE unit type and a BASE & MOBILITY unit type.\n        UnitType baseUnit = testUnitType( \"Base Unit\", 5, BaseModule.createWithStandardResourceCost()\n                                                                    .maxHealth( 1 )\n                                                                    .armor( 1 )\n                                                                    .viewRange( 1 )\n                                                                    .supportedLayers( ImmutableSet.<LevelType>of() ) );\n        UnitType baseMobilityUnit = testUnitType( \"Mobility Unit\", 7, BaseModule.createWithStandardResourceCost()\n                                                                                .maxHealth( 1 )\n                                                                                .armor( 1 )\n                                                                                .viewRange( 1 )\n                                                                                .supportedLayers( ImmutableSet.<LevelType>of() ),\n                                                  MobilityModule.createWithStandardResourceCost()\n                                                                .movementSpeed( 1 )\n                                                                .movementCost( ImmutableMap.<LevelType, Double>of() )\n                                                                .levelingCost( ImmutableMap.<LevelType, Double>of() ) );\n\n        // Build a BASE unit, initially without resources.\n        ConstructorModule baseConstructorModule = baseMobilityConstructorUnit.getModule( ModuleType.CONSTRUCTOR, 0 ).get();\n        ConstructorModule mobilityConstructorModule = baseMobilityConstructorUnit.getModule( ModuleType.CONSTRUCTOR, 1 ).get();\n        ITile location1 = baseMobilityConstructorUnit.getLocation().get().neighbour( Side.E ).get();\n        ConstructorModule.ConstructionSite site1 = baseConstructorModule.schedule( baseUnit, location1 );\n        assertEquals( baseConstructorModule.getRemainingSpeed(), 3 );\n        assertEquals( mobilityConstructorModule.getRemainingSpeed(), 2 );\n        assertEquals( site1.getRemainingWork( ModuleType.BASE ), 5 );\n        assertEquals( site1.getRemainingWork( ModuleType.MOBILITY ), 0 );\n        assertEquals( site1.getLocation().get().getContents().get(), site1 );\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(), ImmutableSet.of( baseMobilityConstructorUnit, site1 ) ) );\n\n        staticGame.getController().setReady();\n        assertEquals( baseConstructorModule.getRemainingSpeed(), 3 );\n        assertEquals( mobilityConstructorModule.getRemainingSpeed(), 2 );\n        assertEquals( site1.getRemainingWork( ModuleType.BASE ), 5 );\n        assertEquals( site1.getRemainingWork( ModuleType.MOBILITY ), 0 );\n        assertEquals( site1.getLocation().get().getContents().get(), site1 );\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(), ImmutableSet.of( baseMobilityConstructorUnit, site1 ) ) );\n\n        // Now provide resources, work = 5 so should take 2 turns at a speed of 3.\n        GameObject containerUnit = createUnit( testUnitType( \"Metal Container\", ContainerModule.createWithStandardResourceCost()\n                                                                                               .resourceType( ResourceType.METALS )\n                                                                                               .capacity( 100 ) ), 5, 6 );\n        final int baseMetals = baseUnit.getConstructionWork() * ModuleType.BASE.getStandardCost().get( ResourceType.METALS );\n        containerUnit.onModule( ModuleType.CONTAINER, 0, module -> module.addStock( baseMetals ) );\n        staticGame.getController().setReady();\n        assertEquals( baseConstructorModule.getRemainingSpeed(), 0 );\n        assertEquals( mobilityConstructorModule.getRemainingSpeed(), 2 );\n        assertEquals( site1.getRemainingWork( ModuleType.BASE ), 2 );\n        assertEquals( site1.getRemainingWork( ModuleType.MOBILITY ), 0 );\n        assertEquals( site1.getLocation().get().getContents().get(), site1 );\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(),\n                                                     ImmutableSet.of( baseMobilityConstructorUnit, site1, containerUnit ) ) );\n\n        staticGame.getController().setReady();\n        assertEquals( baseConstructorModule.getRemainingSpeed(), 1 );\n        assertEquals( mobilityConstructorModule.getRemainingSpeed(), 2 );\n        assertEquals( site1.getRemainingWork( ModuleType.BASE ), 0 );\n        assertEquals( site1.getRemainingWork( ModuleType.MOBILITY ), 0 );\n        assertNotEquals( site1.getLocation().get().getContents().get(), site1 );\n        GameObject newUnit1 = GameObject.cast( site1.getLocation().get().getContents().get() );\n        assertEquals( newUnit1.getType(), baseUnit );\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(),\n                                                     ImmutableSet.of( baseMobilityConstructorUnit, newUnit1, containerUnit ) ) );\n        assertEquals( containerUnit.getModule( ModuleType.CONTAINER, 0 ).get().getStock(), 0 );\n        newUnit1.getController().die();\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(),\n                                                     ImmutableSet.of( baseMobilityConstructorUnit, containerUnit ) ) );\n\n        // Build a BASE & MOBILITY unit, work = 7 so should take 3 turns at a speed of 3 for BASE and 4 turns at a speed of 2 for MOBILITY, so after 4 turns we should be done.\n        final int baseMobilityMetals =\n                baseMobilityUnit.getConstructionWork() * (ModuleType.BASE.getStandardCost().get( ResourceType.METALS ) + //\n                                                          ModuleType.MOBILITY.getStandardCost().get( ResourceType.METALS ));\n        containerUnit.onModule( ModuleType.CONTAINER, 0, module -> module.addStock( baseMobilityMetals ) );\n        staticGame.getController().setReady();\n        ITile location2 = baseMobilityConstructorUnit.getLocation().get().neighbour( Side.W ).get();\n        ConstructorModule.ConstructionSite site2 = baseConstructorModule.schedule( baseMobilityUnit, location2 );\n        assertEquals( baseConstructorModule.getRemainingSpeed(), 3 );\n        assertEquals( mobilityConstructorModule.getRemainingSpeed(), 2 );\n        assertEquals( site2.getRemainingWork( ModuleType.BASE ), 7 );\n        assertEquals( site2.getRemainingWork( ModuleType.MOBILITY ), 7 );\n        assertEquals( site2.getLocation().get().getContents().get(), site2 );\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(),\n                                                     ImmutableSet.of( baseMobilityConstructorUnit, containerUnit, site2 ) ) );\n\n        staticGame.getController().setReady();\n        assertEquals( baseConstructorModule.getRemainingSpeed(), 0 );\n        assertEquals( mobilityConstructorModule.getRemainingSpeed(), 0 );\n        assertEquals( site2.getRemainingWork( ModuleType.BASE ), 4 );\n        assertEquals( site2.getRemainingWork( ModuleType.MOBILITY ), 5 );\n        assertEquals( site2.getLocation().get().getContents().get(), site2 );\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(),\n                                                     ImmutableSet.of( baseMobilityConstructorUnit, containerUnit, site2 ) ) );\n\n        staticGame.getController().setReady();\n        assertEquals( baseConstructorModule.getRemainingSpeed(), 0 );\n        assertEquals( mobilityConstructorModule.getRemainingSpeed(), 0 );\n        assertEquals( site2.getRemainingWork( ModuleType.BASE ), 1 );\n        assertEquals( site2.getRemainingWork( ModuleType.MOBILITY ), 3 );\n        assertEquals( site2.getLocation().get().getContents().get(), site2 );\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(),\n                                                     ImmutableSet.of( baseMobilityConstructorUnit, containerUnit, site2 ) ) );\n\n        staticGame.getController().setReady();\n        assertEquals( baseConstructorModule.getRemainingSpeed(), 2 );\n        assertEquals( mobilityConstructorModule.getRemainingSpeed(), 0 );\n        assertEquals( site2.getRemainingWork( ModuleType.BASE ), 0 );\n        assertEquals( site2.getRemainingWork( ModuleType.MOBILITY ), 1 );\n        assertEquals( site2.getLocation().get().getContents().get(), site2 );\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(),\n                                                     ImmutableSet.of( baseMobilityConstructorUnit, containerUnit, site2 ) ) );\n\n        staticGame.getController().setReady();\n        assertEquals( baseConstructorModule.getRemainingSpeed(), 3 );\n        assertEquals( mobilityConstructorModule.getRemainingSpeed(), 1 );\n        assertEquals( site2.getRemainingWork( ModuleType.BASE ), 0 );\n        assertEquals( site2.getRemainingWork( ModuleType.MOBILITY ), 0 );\n        assertNotEquals( site2.getLocation().get().getContents().get(), site2 );\n        GameObject newUnit2 = GameObject.cast( site2.getLocation().get().getContents().get() );\n        assertEquals( newUnit2.getType(), baseMobilityUnit );\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(),\n                                                     ImmutableSet.of( baseMobilityConstructorUnit, containerUnit, newUnit2 ) ) );\n        assertEquals( containerUnit.getModule( ModuleType.CONTAINER, 0 ).get().getStock(), 0 );\n        newUnit2.getController().die();\n        baseMobilityConstructorUnit.getController().die();\n        containerUnit.getController().die();\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(), ImmutableSet.of() ) );\n\n        // Build a BASE & MOBILITY unit, using a constructor that can do only BASE, then help out with one that can do only MOBILITY.\n        initBaseConstructorModule = ConstructorModule.createWithStandardResourceCost().buildSpeed( 3 ).buildsModule( ModuleType.BASE );\n        GameObject baseConstructorUnit = createUnit( testUnitType( \"Base Constructor\", BaseModule.createWithStandardResourceCost()\n                                                                                                 .maxHealth( 1 )\n                                                                                                 .armor( 1 )\n                                                                                                 .viewRange( 1 )\n                                                                                                 .supportedLayers( LevelType.values() ),\n                                                                   initBaseConstructorModule ), 5, 5 );\n        baseConstructorModule = baseConstructorUnit.getModule( ModuleType.CONSTRUCTOR, 0 ).get();\n        containerUnit = createUnit( testUnitType( \"Metal Container\", ContainerModule.createWithStandardResourceCost()\n                                                                                    .resourceType( ResourceType.METALS )\n                                                                                    .capacity( 100 ) ), 5, 4 );\n        containerUnit.onModule( ModuleType.CONTAINER, 0, module -> module.addStock( baseMobilityMetals ) );\n        staticGame.getController().setReady();\n        ITile location3 = baseConstructorUnit.getLocation().get().neighbour( Side.E ).get();\n        ConstructorModule.ConstructionSite site3 = baseConstructorModule.schedule( baseMobilityUnit, location3 );\n        assertEquals( baseConstructorModule.getRemainingSpeed(), 3 );\n        assertEquals( site3.getRemainingWork( ModuleType.BASE ), 7 );\n        assertEquals( site3.getRemainingWork( ModuleType.MOBILITY ), 7 );\n        assertEquals( site3.getLocation().get().getContents().get(), site3 );\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(),\n                                                     ImmutableSet.of( baseConstructorUnit, containerUnit, site3 ) ) );\n\n        staticGame.getController().setReady();\n        assertEquals( baseConstructorModule.getRemainingSpeed(), 0 );\n        assertEquals( site3.getRemainingWork( ModuleType.BASE ), 4 );\n        assertEquals( site3.getRemainingWork( ModuleType.MOBILITY ), 7 );\n        assertEquals( site3.getLocation().get().getContents().get(), site3 );\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(),\n                                                     ImmutableSet.of( baseConstructorUnit, containerUnit, site3 ) ) );\n\n        staticGame.getController().setReady();\n        assertEquals( baseConstructorModule.getRemainingSpeed(), 0 );\n        assertEquals( site3.getRemainingWork( ModuleType.BASE ), 1 );\n        assertEquals( site3.getRemainingWork( ModuleType.MOBILITY ), 7 );\n        assertEquals( site3.getLocation().get().getContents().get(), site3 );\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(),\n                                                     ImmutableSet.of( baseConstructorUnit, containerUnit, site3 ) ) );\n\n        staticGame.getController().setReady();\n        assertEquals( baseConstructorModule.getRemainingSpeed(), 2 );\n        assertEquals( site3.getRemainingWork( ModuleType.BASE ), 0 );\n        assertEquals( site3.getRemainingWork( ModuleType.MOBILITY ), 7 );\n        assertEquals( site3.getLocation().get().getContents().get(), site3 );\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(),\n                                                     ImmutableSet.of( baseConstructorUnit, containerUnit, site3 ) ) );\n\n        staticGame.getController().setReady();\n        assertEquals( baseConstructorModule.getRemainingSpeed(), 3 );\n        assertEquals( site3.getRemainingWork( ModuleType.BASE ), 0 );\n        assertEquals( site3.getRemainingWork( ModuleType.MOBILITY ), 7 );\n        assertEquals( site3.getLocation().get().getContents().get(), site3 );\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(),\n                                                     ImmutableSet.of( baseConstructorUnit, containerUnit, site3 ) ) );\n\n        // Send help.\n        initMobilityConstructorModule = ConstructorModule.createWithStandardResourceCost()\n                                                         .buildSpeed( 2 )\n                                                         .buildsModule( ModuleType.MOBILITY );\n        IGameObject mobilityConstructorUnit = createUnit( testUnitType( \"Mobility Constructor\", initMobilityConstructorModule ), 5, 6 );\n        mobilityConstructorModule = mobilityConstructorUnit.getModule( ModuleType.CONSTRUCTOR, 0 ).get();\n        staticGame.getController().setReady();\n        assertEquals( baseConstructorModule.getRemainingSpeed(), 3 );\n        assertEquals( mobilityConstructorModule.getRemainingSpeed(), 2 );\n        assertEquals( site3.getRemainingWork( ModuleType.BASE ), 0 );\n        assertEquals( site3.getRemainingWork( ModuleType.MOBILITY ), 7 );\n        assertEquals( site3.getLocation().get().getContents().get(), site3 );\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(),\n                                                     ImmutableSet.of( baseConstructorUnit, containerUnit, mobilityConstructorUnit,\n                                                                      site3 ) ) );\n\n        mobilityConstructorModule.setTarget( baseConstructorUnit );\n        staticGame.getController().setReady();\n        assertEquals( baseConstructorModule.getRemainingSpeed(), 3 );\n        assertEquals( mobilityConstructorModule.getRemainingSpeed(), 0 );\n        assertEquals( site3.getRemainingWork( ModuleType.BASE ), 0 );\n        assertEquals( site3.getRemainingWork( ModuleType.MOBILITY ), 5 );\n        assertEquals( site3.getLocation().get().getContents().get(), site3 );\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(),\n                                                     ImmutableSet.of( baseConstructorUnit, containerUnit, mobilityConstructorUnit,\n                                                                      site3 ) ) );\n\n        staticGame.getController().setReady();\n        assertEquals( baseConstructorModule.getRemainingSpeed(), 3 );\n        assertEquals( mobilityConstructorModule.getRemainingSpeed(), 0 );\n        assertEquals( site3.getRemainingWork( ModuleType.BASE ), 0 );\n        assertEquals( site3.getRemainingWork( ModuleType.MOBILITY ), 3 );\n        assertEquals( site3.getLocation().get().getContents().get(), site3 );\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(),\n                                                     ImmutableSet.of( baseConstructorUnit, containerUnit, mobilityConstructorUnit,\n                                                                      site3 ) ) );\n\n        staticGame.getController().setReady();\n        assertEquals( baseConstructorModule.getRemainingSpeed(), 3 );\n        assertEquals( mobilityConstructorModule.getRemainingSpeed(), 0 );\n        assertEquals( site3.getRemainingWork( ModuleType.BASE ), 0 );\n        assertEquals( site3.getRemainingWork( ModuleType.MOBILITY ), 1 );\n        assertEquals( site3.getLocation().get().getContents().get(), site3 );\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(),\n                                                     ImmutableSet.of( baseConstructorUnit, containerUnit, mobilityConstructorUnit,\n                                                                      site3 ) ) );\n\n        staticGame.getController().setReady();\n        assertEquals( baseConstructorModule.getRemainingSpeed(), 3 );\n        assertEquals( mobilityConstructorModule.getRemainingSpeed(), 1 );\n        assertEquals( site3.getRemainingWork( ModuleType.BASE ), 0 );\n        assertEquals( site3.getRemainingWork( ModuleType.MOBILITY ), 0 );\n        assertNotEquals( site3.getLocation().get().getContents().get(), site3 );\n        GameObject newUnit3 = GameObject.cast( site3.getLocation().get().getContents().get() );\n        assertEquals( newUnit3.getType(), baseMobilityUnit );\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(),\n                                                     ImmutableSet.of( baseConstructorUnit, containerUnit, mobilityConstructorUnit,\n                                                                      newUnit3 ) ) );\n        assertEquals( containerUnit.getModule( ModuleType.CONTAINER, 0 ).get().getStock(), 0 );\n        newUnit3.getController().die();\n        assertTrue( CollectionUtils.isEqualElements( staticPlayer.getObjects(),\n                                                     ImmutableSet.of( baseConstructorUnit, containerUnit, mobilityConstructorUnit ) ) );\n    }", "signature": "void testOnNewTurn()", "full_signature": "@Test public void testOnNewTurn()", "class_method_signature": "ConstructorModuleTest.testOnNewTurn()", "testcase": true, "constructor": false, "invocations": ["buildsModule", "buildSpeed", "createWithStandardResourceCost", "buildsModule", "buildSpeed", "createWithStandardResourceCost", "createUnit", "testUnitType", "supportedLayers", "viewRange", "armor", "maxHealth", "createWithStandardResourceCost", "values", "setReady", "getController", "testUnitType", "supportedLayers", "viewRange", "armor", "maxHealth", "createWithStandardResourceCost", "of", "testUnitType", "supportedLayers", "viewRange", "armor", "maxHealth", "createWithStandardResourceCost", "of", "levelingCost", "movementCost", "movementSpeed", "createWithStandardResourceCost", "of", "of", "get", "getModule", "get", "getModule", "get", "neighbour", "get", "getLocation", "schedule", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingWork", "assertEquals", "getRemainingWork", "assertEquals", "get", "getContents", "get", "getLocation", "assertTrue", "isEqualElements", "getObjects", "of", "setReady", "getController", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingWork", "assertEquals", "getRemainingWork", "assertEquals", "get", "getContents", "get", "getLocation", "assertTrue", "isEqualElements", "getObjects", "of", "createUnit", "testUnitType", "capacity", "resourceType", "createWithStandardResourceCost", "getConstructionWork", "get", "getStandardCost", "onModule", "addStock", "setReady", "getController", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingWork", "assertEquals", "getRemainingWork", "assertEquals", "get", "getContents", "get", "getLocation", "assertTrue", "isEqualElements", "getObjects", "of", "setReady", "getController", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingWork", "assertEquals", "getRemainingWork", "assertNotEquals", "get", "getContents", "get", "getLocation", "cast", "get", "getContents", "get", "getLocation", "assertEquals", "getType", "assertTrue", "isEqualElements", "getObjects", "of", "assertEquals", "getStock", "get", "getModule", "die", "getController", "assertTrue", "isEqualElements", "getObjects", "of", "getConstructionWork", "get", "getStandardCost", "get", "getStandardCost", "onModule", "addStock", "setReady", "getController", "get", "neighbour", "get", "getLocation", "schedule", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingWork", "assertEquals", "getRemainingWork", "assertEquals", "get", "getContents", "get", "getLocation", "assertTrue", "isEqualElements", "getObjects", "of", "setReady", "getController", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingWork", "assertEquals", "getRemainingWork", "assertEquals", "get", "getContents", "get", "getLocation", "assertTrue", "isEqualElements", "getObjects", "of", "setReady", "getController", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingWork", "assertEquals", "getRemainingWork", "assertEquals", "get", "getContents", "get", "getLocation", "assertTrue", "isEqualElements", "getObjects", "of", "setReady", "getController", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingWork", "assertEquals", "getRemainingWork", "assertEquals", "get", "getContents", "get", "getLocation", "assertTrue", "isEqualElements", "getObjects", "of", "setReady", "getController", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingWork", "assertEquals", "getRemainingWork", "assertNotEquals", "get", "getContents", "get", "getLocation", "cast", "get", "getContents", "get", "getLocation", "assertEquals", "getType", "assertTrue", "isEqualElements", "getObjects", "of", "assertEquals", "getStock", "get", "getModule", "die", "getController", "die", "getController", "die", "getController", "assertTrue", "isEqualElements", "getObjects", "of", "buildsModule", "buildSpeed", "createWithStandardResourceCost", "createUnit", "testUnitType", "supportedLayers", "viewRange", "armor", "maxHealth", "createWithStandardResourceCost", "values", "get", "getModule", "createUnit", "testUnitType", "capacity", "resourceType", "createWithStandardResourceCost", "onModule", "addStock", "setReady", "getController", "get", "neighbour", "get", "getLocation", "schedule", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingWork", "assertEquals", "getRemainingWork", "assertEquals", "get", "getContents", "get", "getLocation", "assertTrue", "isEqualElements", "getObjects", "of", "setReady", "getController", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingWork", "assertEquals", "getRemainingWork", "assertEquals", "get", "getContents", "get", "getLocation", "assertTrue", "isEqualElements", "getObjects", "of", "setReady", "getController", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingWork", "assertEquals", "getRemainingWork", "assertEquals", "get", "getContents", "get", "getLocation", "assertTrue", "isEqualElements", "getObjects", "of", "setReady", "getController", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingWork", "assertEquals", "getRemainingWork", "assertEquals", "get", "getContents", "get", "getLocation", "assertTrue", "isEqualElements", "getObjects", "of", "setReady", "getController", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingWork", "assertEquals", "getRemainingWork", "assertEquals", "get", "getContents", "get", "getLocation", "assertTrue", "isEqualElements", "getObjects", "of", "buildsModule", "buildSpeed", "createWithStandardResourceCost", "createUnit", "testUnitType", "get", "getModule", "setReady", "getController", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingWork", "assertEquals", "getRemainingWork", "assertEquals", "get", "getContents", "get", "getLocation", "assertTrue", "isEqualElements", "getObjects", "of", "setTarget", "setReady", "getController", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingWork", "assertEquals", "getRemainingWork", "assertEquals", "get", "getContents", "get", "getLocation", "assertTrue", "isEqualElements", "getObjects", "of", "setReady", "getController", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingWork", "assertEquals", "getRemainingWork", "assertEquals", "get", "getContents", "get", "getLocation", "assertTrue", "isEqualElements", "getObjects", "of", "setReady", "getController", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingWork", "assertEquals", "getRemainingWork", "assertEquals", "get", "getContents", "get", "getLocation", "assertTrue", "isEqualElements", "getObjects", "of", "setReady", "getController", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingSpeed", "assertEquals", "getRemainingWork", "assertEquals", "getRemainingWork", "assertNotEquals", "get", "getContents", "get", "getLocation", "cast", "get", "getContents", "get", "getLocation", "assertEquals", "getType", "assertTrue", "isEqualElements", "getObjects", "of", "assertEquals", "getStock", "get", "getModule", "die", "getController", "assertTrue", "isEqualElements", "getObjects", "of"]}, "focal_class": {"identifier": "ConstructorModule", "superclass": "extends Module", "interfaces": "implements IConstructorModule, IConstructorModuleController", "fields": [{"original_string": "private final int           buildSpeed;", "modifier": "private final", "type": "int", "declarator": "buildSpeed", "var_name": "buildSpeed"}, {"original_string": "private final ModuleType<?> buildsModule;", "modifier": "private final", "type": "ModuleType<?>", "declarator": "buildsModule", "var_name": "buildsModule"}, {"original_string": "private boolean resourceConstrained;", "modifier": "private", "type": "boolean", "declarator": "resourceConstrained", "var_name": "resourceConstrained"}, {"original_string": "private int     remainingSpeed;", "modifier": "private", "type": "int", "declarator": "remainingSpeed", "var_name": "remainingSpeed"}, {"original_string": "@Nullable\n    private GameObject target;", "modifier": "@Nullable\n    private", "type": "GameObject", "declarator": "target", "var_name": "target"}], "methods": [{"identifier": "ConstructorModule", "parameters": "(final ImmutableResourceCost resourceCost, final int buildSpeed, final ModuleType<?> buildsModule)", "modifiers": "protected", "return": "", "signature": " ConstructorModule(final ImmutableResourceCost resourceCost, final int buildSpeed, final ModuleType<?> buildsModule)", "full_signature": "protected  ConstructorModule(final ImmutableResourceCost resourceCost, final int buildSpeed, final ModuleType<?> buildsModule)", "class_method_signature": "ConstructorModule.ConstructorModule(final ImmutableResourceCost resourceCost, final int buildSpeed, final ModuleType<?> buildsModule)", "testcase": false, "constructor": true}, {"identifier": "createWithStandardResourceCost", "parameters": "()", "modifiers": "static", "return": "Builder0", "signature": "Builder0 createWithStandardResourceCost()", "full_signature": "static Builder0 createWithStandardResourceCost()", "class_method_signature": "ConstructorModule.createWithStandardResourceCost()", "testcase": false, "constructor": false}, {"identifier": "createWithExtraResourceCost", "parameters": "(final ImmutableResourceCost resourceCost)", "modifiers": "static", "return": "Builder0", "signature": "Builder0 createWithExtraResourceCost(final ImmutableResourceCost resourceCost)", "full_signature": "static Builder0 createWithExtraResourceCost(final ImmutableResourceCost resourceCost)", "class_method_signature": "ConstructorModule.createWithExtraResourceCost(final ImmutableResourceCost resourceCost)", "testcase": false, "constructor": false}, {"identifier": "onReset", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onReset()", "full_signature": "@Override protected void onReset()", "class_method_signature": "ConstructorModule.onReset()", "testcase": false, "constructor": false}, {"identifier": "onNewTurn", "parameters": "()", "modifiers": "@Override protected", "return": "void", "signature": "void onNewTurn()", "full_signature": "@Override protected void onNewTurn()", "class_method_signature": "ConstructorModule.onNewTurn()", "testcase": false, "constructor": false}, {"identifier": "construct", "parameters": "(final ConstructionSite site)", "modifiers": "private", "return": "void", "signature": "void construct(final ConstructionSite site)", "full_signature": "private void construct(final ConstructionSite site)", "class_method_signature": "ConstructorModule.construct(final ConstructionSite site)", "testcase": false, "constructor": false}, {"identifier": "getBuildsModule", "parameters": "()", "modifiers": "@Override public", "return": "ModuleType<?>", "signature": "ModuleType<?> getBuildsModule()", "full_signature": "@Override public ModuleType<?> getBuildsModule()", "class_method_signature": "ConstructorModule.getBuildsModule()", "testcase": false, "constructor": false}, {"identifier": "getBuildSpeed", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getBuildSpeed()", "full_signature": "@Override public int getBuildSpeed()", "class_method_signature": "ConstructorModule.getBuildSpeed()", "testcase": false, "constructor": false}, {"identifier": "isResourceConstrained", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isResourceConstrained()", "full_signature": "@Override public boolean isResourceConstrained()", "class_method_signature": "ConstructorModule.isResourceConstrained()", "testcase": false, "constructor": false}, {"identifier": "getRemainingSpeed", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getRemainingSpeed()", "full_signature": "@Override public int getRemainingSpeed()", "class_method_signature": "ConstructorModule.getRemainingSpeed()", "testcase": false, "constructor": false}, {"identifier": "getTarget", "parameters": "()", "modifiers": "@Nullable @Override public", "return": "GameObject", "signature": "GameObject getTarget()", "full_signature": "@Nullable @Override public GameObject getTarget()", "class_method_signature": "ConstructorModule.getTarget()", "testcase": false, "constructor": false}, {"identifier": "setTarget", "parameters": "(@Nullable final IGameObject target)", "modifiers": "@Override public", "return": "void", "signature": "void setTarget(@Nullable final IGameObject target)", "full_signature": "@Override public void setTarget(@Nullable final IGameObject target)", "class_method_signature": "ConstructorModule.setTarget(@Nullable final IGameObject target)", "testcase": false, "constructor": false}, {"identifier": "blueprints", "parameters": "()", "modifiers": "@Override public", "return": "ImmutableSet<? extends UnitType>", "signature": "ImmutableSet<? extends UnitType> blueprints()", "full_signature": "@Override public ImmutableSet<? extends UnitType> blueprints()", "class_method_signature": "ConstructorModule.blueprints()", "testcase": false, "constructor": false}, {"identifier": "schedule", "parameters": "(final IUnitType unitType, final ITile location)", "modifiers": "@Override public", "return": "ConstructionSite", "signature": "ConstructionSite schedule(final IUnitType unitType, final ITile location)", "full_signature": "@Override public ConstructionSite schedule(final IUnitType unitType, final ITile location)", "class_method_signature": "ConstructorModule.schedule(final IUnitType unitType, final ITile location)", "testcase": false, "constructor": false}, {"identifier": "getController", "parameters": "()", "modifiers": "@Override public", "return": "IConstructorModuleController", "signature": "IConstructorModuleController getController()", "full_signature": "@Override public IConstructorModuleController getController()", "class_method_signature": "ConstructorModule.getController()", "testcase": false, "constructor": false}, {"identifier": "getModule", "parameters": "()", "modifiers": "@Override public", "return": "IConstructorModule", "signature": "IConstructorModule getModule()", "full_signature": "@Override public IConstructorModule getModule()", "class_method_signature": "ConstructorModule.getModule()", "testcase": false, "constructor": false}], "file": "omicron-core/src/main/java/com/lyndir/omicron/api/ConstructorModule.java"}, "focal_method": {"identifier": "onNewTurn", "parameters": "()", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void onNewTurn() {\n    }", "signature": "void onNewTurn()", "full_signature": "@Override protected void onNewTurn()", "class_method_signature": "ConstructorModule.onNewTurn()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 5915204, "url": "https://github.com/Lyndir/Omicron", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 3199, "license": "licensed"}}