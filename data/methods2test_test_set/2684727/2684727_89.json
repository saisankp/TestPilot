{"test_class": {"identifier": "OcrResponseParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/co/smartreceipts/android/ocr/util/OcrResponseParserTest.java"}, "test_case": {"identifier": "getDateWithLowConfidence", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getDateWithLowConfidence() {\n        final String iso8601Date = \"2016-12-22T12:00:00.000Z\";\n        assertNull(new OcrResponseParser(new OcrResponse(null, null, null, new OcrResponseField<>(iso8601Date, 0.4), null, null, null, null)).getDate());\n    }", "signature": "void getDateWithLowConfidence()", "full_signature": "@Test public void getDateWithLowConfidence()", "class_method_signature": "OcrResponseParserTest.getDateWithLowConfidence()", "testcase": true, "constructor": false, "invocations": ["assertNull", "getDate"]}, "focal_class": {"identifier": "OcrResponseParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double MINIMUM_DATE_CONFIDENCE = 0.4;", "modifier": "private static final", "type": "double", "declarator": "MINIMUM_DATE_CONFIDENCE = 0.4", "var_name": "MINIMUM_DATE_CONFIDENCE"}, {"original_string": "private final OcrResponse ocrResponse;", "modifier": "private final", "type": "OcrResponse", "declarator": "ocrResponse", "var_name": "ocrResponse"}], "methods": [{"identifier": "OcrResponseParser", "parameters": "(@Nullable OcrResponse ocrResponse)", "modifiers": "public", "return": "", "signature": " OcrResponseParser(@Nullable OcrResponse ocrResponse)", "full_signature": "public  OcrResponseParser(@Nullable OcrResponse ocrResponse)", "class_method_signature": "OcrResponseParser.OcrResponseParser(@Nullable OcrResponse ocrResponse)", "testcase": false, "constructor": true}, {"identifier": "getMerchant", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getMerchant()", "full_signature": "@Nullable public String getMerchant()", "class_method_signature": "OcrResponseParser.getMerchant()", "testcase": false, "constructor": false}, {"identifier": "getTotalAmount", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getTotalAmount()", "full_signature": "@Nullable public String getTotalAmount()", "class_method_signature": "OcrResponseParser.getTotalAmount()", "testcase": false, "constructor": false}, {"identifier": "getTaxAmount", "parameters": "()", "modifiers": "@Nullable public", "return": "String", "signature": "String getTaxAmount()", "full_signature": "@Nullable public String getTaxAmount()", "class_method_signature": "OcrResponseParser.getTaxAmount()", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "()", "modifiers": "@Nullable public", "return": "Date", "signature": "Date getDate()", "full_signature": "@Nullable public Date getDate()", "class_method_signature": "OcrResponseParser.getDate()", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/ocr/util/OcrResponseParser.java"}, "focal_method": {"identifier": "getDate", "parameters": "()", "modifiers": "@Nullable public", "return": "Date", "body": "@Nullable\n    public Date getDate() {\n        if (ocrResponse != null && ocrResponse.getDate() != null && ocrResponse.getDate().getData() != null && ocrResponse.getDate().getConfidenceLevel() > MINIMUM_DATE_CONFIDENCE) {\n            try {\n                final SimpleDateFormat iso8601Formatter = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", Locale.US);\n                final GregorianCalendar ocrResponseCalendar = new GregorianCalendar();\n                ocrResponseCalendar.setTime(iso8601Formatter.parse(ocrResponse.getDate().getData()));\n                ocrResponseCalendar.set(Calendar.HOUR_OF_DAY, 0);\n                ocrResponseCalendar.set(Calendar.MINUTE, 0);\n                ocrResponseCalendar.set(Calendar.SECOND, 0);\n                ocrResponseCalendar.set(Calendar.MILLISECOND, 0);\n\n                // Shift this by the current time (local) for hours/mins/secs/m\n                final GregorianCalendar localTimeCalendar = new GregorianCalendar();\n                localTimeCalendar.setTime(new Date(System.currentTimeMillis()));\n                ocrResponseCalendar.add(Calendar.HOUR_OF_DAY, localTimeCalendar.get(Calendar.HOUR_OF_DAY));\n                ocrResponseCalendar.add(Calendar.MINUTE, localTimeCalendar.get(Calendar.MINUTE));\n                ocrResponseCalendar.add(Calendar.SECOND, localTimeCalendar.get(Calendar.SECOND));\n                ocrResponseCalendar.add(Calendar.MILLISECOND, localTimeCalendar.get(Calendar.MILLISECOND));\n\n                return new Date(ocrResponseCalendar.getTime().getTime());\n            } catch (ParseException e) {\n                Logger.error(this, \"Failed to parse OCR Date.\", e);\n            }\n        }\n        return null;\n    }", "signature": "Date getDate()", "full_signature": "@Nullable public Date getDate()", "class_method_signature": "OcrResponseParser.getDate()", "testcase": false, "constructor": false, "invocations": ["getDate", "getData", "getDate", "getConfidenceLevel", "getDate", "setTime", "parse", "getData", "getDate", "set", "set", "set", "set", "setTime", "currentTimeMillis", "add", "get", "add", "get", "add", "get", "add", "get", "getTime", "getTime", "error"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}