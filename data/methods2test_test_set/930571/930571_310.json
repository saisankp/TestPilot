{"test_class": {"identifier": "PerRequestRuntimeManagerTest", "superclass": "extends AbstractBaseTest", "interfaces": "", "fields": [{"original_string": "private PoolingDataSourceWrapper pds;", "modifier": "private", "type": "PoolingDataSourceWrapper", "declarator": "pds", "var_name": "pds"}, {"original_string": "private UserGroupCallback userGroupCallback;", "modifier": "private", "type": "UserGroupCallback", "declarator": "userGroupCallback", "var_name": "userGroupCallback"}, {"original_string": "private RuntimeManager manager;", "modifier": "private", "type": "RuntimeManager", "declarator": "manager", "var_name": "manager"}], "file": "jbpm-runtime-manager/src/test/java/org/jbpm/runtime/manager/impl/PerRequestRuntimeManagerTest.java"}, "test_case": {"identifier": "testCreationOfSessionWithinTransaction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreationOfSessionWithinTransaction() throws Exception {\n        System.setProperty(\"jbpm.tm.jndi.lookup\", \"java:comp/UserTransaction\");\n        RuntimeEnvironment environment = RuntimeEnvironmentBuilder.Factory.get()\n    \t\t\t.newDefaultBuilder()\n                .userGroupCallback(userGroupCallback)\n                .addAsset(ResourceFactory.newClassPathResource(\"BPMN2-ScriptTask.bpmn2\"), ResourceType.BPMN2)\n                .get();\n        \n        manager = RuntimeManagerFactory.Factory.get().newPerRequestRuntimeManager(environment);        \n        assertNotNull(manager);\n        \n        UserTransaction ut = InitialContext.doLookup(\"java:comp/UserTransaction\");\n        ut.begin();\n        \n        RuntimeEngine runtime = manager.getRuntimeEngine(EmptyContext.get());\n        KieSession ksession = runtime.getKieSession();\n        assertNotNull(ksession);       \n        \n        long sessionId = ksession.getIdentifier();\n        assertTrue(sessionId == 1);\n        \n        ut.commit();\n        \n        // since session was created with transaction tx sync is registered to dispose session\n        // so now session should already be disposed\n        try {\n            ksession.getIdentifier();\n            fail(\"Should fail as session manager was closed and with that it's session\");\n        } catch (IllegalStateException e) {\n            \n        } catch (UndeclaredThrowableException e) {\n            TestUtil.checkDisposedSessionException(e);\n        }\n        System.clearProperty(\"jbpm.tm.jndi.lookup\");\n    }", "signature": "void testCreationOfSessionWithinTransaction()", "full_signature": "@Test public void testCreationOfSessionWithinTransaction()", "class_method_signature": "PerRequestRuntimeManagerTest.testCreationOfSessionWithinTransaction()", "testcase": true, "constructor": false, "invocations": ["setProperty", "get", "addAsset", "userGroupCallback", "newDefaultBuilder", "get", "newClassPathResource", "newPerRequestRuntimeManager", "get", "assertNotNull", "doLookup", "begin", "getRuntimeEngine", "get", "getKieSession", "assertNotNull", "getIdentifier", "assertTrue", "commit", "getIdentifier", "fail", "checkDisposedSessionException", "clearProperty"]}, "focal_class": {"identifier": "PerRequestRuntimeManager", "superclass": "extends AbstractRuntimeManager", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(PerRequestRuntimeManager.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PerRequestRuntimeManager.class)", "var_name": "logger"}, {"original_string": "private SessionFactory factory;", "modifier": "private", "type": "SessionFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private TaskServiceFactory taskServiceFactory;", "modifier": "private", "type": "TaskServiceFactory", "declarator": "taskServiceFactory", "var_name": "taskServiceFactory"}, {"original_string": "private static ThreadLocal<Map<String, RuntimeEngine>> local = new ThreadLocal<Map<String, RuntimeEngine>>() {\n\n        @Override\n        protected Map<String, RuntimeEngine> initialValue() {\n            return new HashMap<String, RuntimeEngine>();\n        }\n        \n    };", "modifier": "private static", "type": "ThreadLocal<Map<String, RuntimeEngine>>", "declarator": "local = new ThreadLocal<Map<String, RuntimeEngine>>() {\n\n        @Override\n        protected Map<String, RuntimeEngine> initialValue() {\n            return new HashMap<String, RuntimeEngine>();\n        }\n        \n    }", "var_name": "local"}], "methods": [{"identifier": "PerRequestRuntimeManager", "parameters": "(RuntimeEnvironment environment, SessionFactory factory, TaskServiceFactory taskServiceFactory, String identifier)", "modifiers": "public", "return": "", "signature": " PerRequestRuntimeManager(RuntimeEnvironment environment, SessionFactory factory, TaskServiceFactory taskServiceFactory, String identifier)", "full_signature": "public  PerRequestRuntimeManager(RuntimeEnvironment environment, SessionFactory factory, TaskServiceFactory taskServiceFactory, String identifier)", "class_method_signature": "PerRequestRuntimeManager.PerRequestRuntimeManager(RuntimeEnvironment environment, SessionFactory factory, TaskServiceFactory taskServiceFactory, String identifier)", "testcase": false, "constructor": true}, {"identifier": "getRuntimeEngine", "parameters": "(Context<?> context)", "modifiers": "@Override public", "return": "RuntimeEngine", "signature": "RuntimeEngine getRuntimeEngine(Context<?> context)", "full_signature": "@Override public RuntimeEngine getRuntimeEngine(Context<?> context)", "class_method_signature": "PerRequestRuntimeManager.getRuntimeEngine(Context<?> context)", "testcase": false, "constructor": false}, {"identifier": "signalEvent", "parameters": "(String type, Object event)", "modifiers": "@Override public", "return": "void", "signature": "void signalEvent(String type, Object event)", "full_signature": "@Override public void signalEvent(String type, Object event)", "class_method_signature": "PerRequestRuntimeManager.signalEvent(String type, Object event)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(KieSession ksession, Context<?> context)", "modifiers": "@Override public", "return": "void", "signature": "void validate(KieSession ksession, Context<?> context)", "full_signature": "@Override public void validate(KieSession ksession, Context<?> context)", "class_method_signature": "PerRequestRuntimeManager.validate(KieSession ksession, Context<?> context)", "testcase": false, "constructor": false}, {"identifier": "disposeRuntimeEngine", "parameters": "(RuntimeEngine runtime)", "modifiers": "@Override public", "return": "void", "signature": "void disposeRuntimeEngine(RuntimeEngine runtime)", "full_signature": "@Override public void disposeRuntimeEngine(RuntimeEngine runtime)", "class_method_signature": "PerRequestRuntimeManager.disposeRuntimeEngine(RuntimeEngine runtime)", "testcase": false, "constructor": false}, {"identifier": "softDispose", "parameters": "(RuntimeEngine runtimeEngine)", "modifiers": "@Override public", "return": "void", "signature": "void softDispose(RuntimeEngine runtimeEngine)", "full_signature": "@Override public void softDispose(RuntimeEngine runtimeEngine)", "class_method_signature": "PerRequestRuntimeManager.softDispose(RuntimeEngine runtimeEngine)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "PerRequestRuntimeManager.close()", "testcase": false, "constructor": false}, {"identifier": "getFactory", "parameters": "()", "modifiers": "public", "return": "SessionFactory", "signature": "SessionFactory getFactory()", "full_signature": "public SessionFactory getFactory()", "class_method_signature": "PerRequestRuntimeManager.getFactory()", "testcase": false, "constructor": false}, {"identifier": "setFactory", "parameters": "(SessionFactory factory)", "modifiers": "public", "return": "void", "signature": "void setFactory(SessionFactory factory)", "full_signature": "public void setFactory(SessionFactory factory)", "class_method_signature": "PerRequestRuntimeManager.setFactory(SessionFactory factory)", "testcase": false, "constructor": false}, {"identifier": "getTaskServiceFactory", "parameters": "()", "modifiers": "public", "return": "TaskServiceFactory", "signature": "TaskServiceFactory getTaskServiceFactory()", "full_signature": "public TaskServiceFactory getTaskServiceFactory()", "class_method_signature": "PerRequestRuntimeManager.getTaskServiceFactory()", "testcase": false, "constructor": false}, {"identifier": "setTaskServiceFactory", "parameters": "(TaskServiceFactory taskServiceFactory)", "modifiers": "public", "return": "void", "signature": "void setTaskServiceFactory(TaskServiceFactory taskServiceFactory)", "full_signature": "public void setTaskServiceFactory(TaskServiceFactory taskServiceFactory)", "class_method_signature": "PerRequestRuntimeManager.setTaskServiceFactory(TaskServiceFactory taskServiceFactory)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "PerRequestRuntimeManager.init()", "testcase": false, "constructor": false}], "file": "jbpm-runtime-manager/src/main/java/org/jbpm/runtime/manager/impl/PerRequestRuntimeManager.java"}, "focal_method": {"identifier": "getRuntimeEngine", "parameters": "(Context<?> context)", "modifiers": "@Override public", "return": "RuntimeEngine", "body": "@Override\n    public RuntimeEngine getRuntimeEngine(Context<?> context) {\n    \tif (isClosed()) {\n    \t\tthrow new IllegalStateException(\"Runtime manager \" + identifier + \" is already closed\");\n    \t}\n    \t\n    \tRuntimeEngine runtime = null;\n        if (local.get().get(identifier) != null) {\n        \tRuntimeEngine engine = local.get().get(identifier);\n        \t// check if engine is not already disposed as afterCompletion might be issued from another thread\n        \tif (engine != null && ((RuntimeEngineImpl) engine).isDisposed()) {\n        \t\treturn null;\n        \t}\n        \t\n        \treturn engine;\n        }\n    \tif (engineInitEager) {\n\t        InternalTaskService internalTaskService = newTaskService(taskServiceFactory);\t        \n\t        runtime = new RuntimeEngineImpl(factory.newKieSession(), internalTaskService);\n\t        ((RuntimeEngineImpl) runtime).setManager(this);\n\t        \n\t        configureRuntimeOnTaskService(internalTaskService, runtime);\n\t        registerDisposeCallback(runtime, new DisposeSessionTransactionSynchronization(this, runtime), runtime.getKieSession().getEnvironment());\n\t        registerDisposeCallback(runtime, new DestroySessionTransactionSynchronization(runtime.getKieSession()), runtime.getKieSession().getEnvironment());\n\t        registerItems(runtime);\n\t        attachManager(runtime);\n    \t} else {\n    \t\truntime = new RuntimeEngineImpl(context, new PerRequestInitializer());\n\t        ((RuntimeEngineImpl) runtime).setManager(this);\n    \t}\n        local.get().put(identifier, runtime);\n\n        return runtime;\n    }", "signature": "RuntimeEngine getRuntimeEngine(Context<?> context)", "full_signature": "@Override public RuntimeEngine getRuntimeEngine(Context<?> context)", "class_method_signature": "PerRequestRuntimeManager.getRuntimeEngine(Context<?> context)", "testcase": false, "constructor": false, "invocations": ["isClosed", "get", "get", "get", "get", "isDisposed", "newTaskService", "newKieSession", "setManager", "configureRuntimeOnTaskService", "registerDisposeCallback", "getEnvironment", "getKieSession", "registerDisposeCallback", "getKieSession", "getEnvironment", "getKieSession", "registerItems", "attachManager", "setManager", "put", "get"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}