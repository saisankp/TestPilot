{"test_class": {"identifier": "PreparationUtilsTest", "superclass": "extends ServiceBaseTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private PreparationRepository repository;", "modifier": "@Autowired\n    private", "type": "PreparationRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Autowired\n    private VersionService versionService;", "modifier": "@Autowired\n    private", "type": "VersionService", "declarator": "versionService", "var_name": "versionService"}, {"original_string": "@Autowired\n    private PreparationUtils preparationUtils;", "modifier": "@Autowired\n    private", "type": "PreparationUtils", "declarator": "preparationUtils", "var_name": "preparationUtils"}], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/api/preparation/PreparationUtilsTest.java"}, "test_case": {"identifier": "prettyPrint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void prettyPrint() throws Exception {\n        // given\n        final String version = versionService.version().getVersionId();\n        final List<Action> actions = getSimpleAction(\"uppercase\", \"column_name\", \"lastname\");\n        final PreparationActions newContent = new PreparationActions(actions, version);\n        final Step step = new Step(Step.ROOT_STEP.id(), newContent.id(), version);\n        final Preparation preparation = new Preparation(\"#15325878\", \"1234\", step.id(), version);\n\n        repository.add(newContent);\n        repository.add(step);\n        repository.add(preparation);\n\n        // when\n        PreparationUtils.prettyPrint(repository, preparation, new NullOutputStream());\n\n        // Basic walk through code, no assert.\n    }", "signature": "void prettyPrint()", "full_signature": "@Test public void prettyPrint()", "class_method_signature": "PreparationUtilsTest.prettyPrint()", "testcase": true, "constructor": false, "invocations": ["getVersionId", "version", "getSimpleAction", "id", "id", "id", "add", "add", "add", "prettyPrint"]}, "focal_class": {"identifier": "PreparationUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(PreparationUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PreparationUtils.class)", "var_name": "LOGGER"}], "methods": [{"identifier": "prettyPrint", "parameters": "(PreparationRepository repository, String stepId, OutputStream out)", "modifiers": "private static", "return": "void", "signature": "void prettyPrint(PreparationRepository repository, String stepId, OutputStream out)", "full_signature": "private static void prettyPrint(PreparationRepository repository, String stepId, OutputStream out)", "class_method_signature": "PreparationUtils.prettyPrint(PreparationRepository repository, String stepId, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "prettyPrint", "parameters": "(PreparationActions blob, OutputStream out)", "modifiers": "private static", "return": "void", "signature": "void prettyPrint(PreparationActions blob, OutputStream out)", "full_signature": "private static void prettyPrint(PreparationActions blob, OutputStream out)", "class_method_signature": "PreparationUtils.prettyPrint(PreparationActions blob, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "prettyPrint", "parameters": "(PreparationRepository repository, Preparation preparation, OutputStream out)", "modifiers": "public static", "return": "void", "signature": "void prettyPrint(PreparationRepository repository, Preparation preparation, OutputStream out)", "full_signature": "public static void prettyPrint(PreparationRepository repository, Preparation preparation, OutputStream out)", "class_method_signature": "PreparationUtils.prettyPrint(PreparationRepository repository, Preparation preparation, OutputStream out)", "testcase": false, "constructor": false}, {"identifier": "scatter", "parameters": "(Identifiable source)", "modifiers": "public static", "return": "Collection<Identifiable>", "signature": "Collection<Identifiable> scatter(Identifiable source)", "full_signature": "public static Collection<Identifiable> scatter(Identifiable source)", "class_method_signature": "PreparationUtils.scatter(Identifiable source)", "testcase": false, "constructor": false}, {"identifier": "walk", "parameters": "(Object object, Predicate<Object> callback)", "modifiers": "private static", "return": "void", "signature": "void walk(Object object, Predicate<Object> callback)", "full_signature": "private static void walk(Object object, Predicate<Object> callback)", "class_method_signature": "PreparationUtils.walk(Object object, Predicate<Object> callback)", "testcase": false, "constructor": false}, {"identifier": "__listSteps", "parameters": "(final List<Step> steps, final String limit, final Step step,\n            final PreparationRepository repository)", "modifiers": "private", "return": "void", "signature": "void __listSteps(final List<Step> steps, final String limit, final Step step,\n            final PreparationRepository repository)", "full_signature": "private void __listSteps(final List<Step> steps, final String limit, final Step step,\n            final PreparationRepository repository)", "class_method_signature": "PreparationUtils.__listSteps(final List<Step> steps, final String limit, final Step step,\n            final PreparationRepository repository)", "testcase": false, "constructor": false}, {"identifier": "listStepsIds", "parameters": "(final String stepId, final PreparationRepository repository)", "modifiers": "public", "return": "List<String>", "signature": "List<String> listStepsIds(final String stepId, final PreparationRepository repository)", "full_signature": "public List<String> listStepsIds(final String stepId, final PreparationRepository repository)", "class_method_signature": "PreparationUtils.listStepsIds(final String stepId, final PreparationRepository repository)", "testcase": false, "constructor": false}, {"identifier": "listStepsIds", "parameters": "(final String stepId, final String limit, final PreparationRepository repository)", "modifiers": "public", "return": "List<String>", "signature": "List<String> listStepsIds(final String stepId, final String limit, final PreparationRepository repository)", "full_signature": "public List<String> listStepsIds(final String stepId, final String limit, final PreparationRepository repository)", "class_method_signature": "PreparationUtils.listStepsIds(final String stepId, final String limit, final PreparationRepository repository)", "testcase": false, "constructor": false}, {"identifier": "listSteps", "parameters": "(String headStepId, PreparationRepository repository)", "modifiers": "public", "return": "List<Step>", "signature": "List<Step> listSteps(String headStepId, PreparationRepository repository)", "full_signature": "public List<Step> listSteps(String headStepId, PreparationRepository repository)", "class_method_signature": "PreparationUtils.listSteps(String headStepId, PreparationRepository repository)", "testcase": false, "constructor": false}, {"identifier": "listSteps", "parameters": "(final Step step, final String limit, final PreparationRepository repository)", "modifiers": "public", "return": "List<Step>", "signature": "List<Step> listSteps(final Step step, final String limit, final PreparationRepository repository)", "full_signature": "public List<Step> listSteps(final Step step, final String limit, final PreparationRepository repository)", "class_method_signature": "PreparationUtils.listSteps(final Step step, final String limit, final PreparationRepository repository)", "testcase": false, "constructor": false}, {"identifier": "getPreparationIdForStepRowMetadata", "parameters": "(final List<String> stepRowMetadataUpdated,\n            final PreparationRepository repository)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getPreparationIdForStepRowMetadata(final List<String> stepRowMetadataUpdated,\n            final PreparationRepository repository)", "full_signature": "public static List<String> getPreparationIdForStepRowMetadata(final List<String> stepRowMetadataUpdated,\n            final PreparationRepository repository)", "class_method_signature": "PreparationUtils.getPreparationIdForStepRowMetadata(final List<String> stepRowMetadataUpdated,\n            final PreparationRepository repository)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/api/preparation/PreparationUtils.java"}, "focal_method": {"identifier": "prettyPrint", "parameters": "(PreparationRepository repository, String stepId, OutputStream out)", "modifiers": "private static", "return": "void", "body": "private static void prettyPrint(PreparationRepository repository, String stepId, OutputStream out) {\n        if (stepId == null) {\n            return;\n        }\n        try {\n            Step step = repository.get(stepId, Step.class);\n            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out));\n            writer.append(\"\\t\\tStep (\").append(step.id()).append(\")\").append(\"\\n\");\n            writer.flush();\n            PreparationActions blob = repository.get(step.getContent(), PreparationActions.class);\n            prettyPrint(blob, out);\n            if (step.getParent() != null) {\n                prettyPrint(repository, step.getParent(), out);\n            }\n        } catch (IOException e) {\n            throw new TalendRuntimeException(BaseErrorCodes.UNEXPECTED_EXCEPTION, e);\n        }\n    }", "signature": "void prettyPrint(PreparationRepository repository, String stepId, OutputStream out)", "full_signature": "private static void prettyPrint(PreparationRepository repository, String stepId, OutputStream out)", "class_method_signature": "PreparationUtils.prettyPrint(PreparationRepository repository, String stepId, OutputStream out)", "testcase": false, "constructor": false, "invocations": ["get", "append", "append", "append", "append", "id", "flush", "get", "getContent", "prettyPrint", "getParent", "prettyPrint", "getParent"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}