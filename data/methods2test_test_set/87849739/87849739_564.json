{"test_class": {"identifier": "ThingPersistenceActorTest", "superclass": "extends PersistenceActorTestBase", "interfaces": "", "fields": [{"original_string": "private static final AuthorizationSubject AUTHORIZATION_SUBJECT =\n            AuthorizationModelFactory.newAuthSubject(\n                    SubjectId.newInstance(SubjectIssuer.GOOGLE, \"testuser\").toString());", "modifier": "private static final", "type": "AuthorizationSubject", "declarator": "AUTHORIZATION_SUBJECT =\n            AuthorizationModelFactory.newAuthSubject(\n                    SubjectId.newInstance(SubjectIssuer.GOOGLE, \"testuser\").toString())", "var_name": "AUTHORIZATION_SUBJECT"}, {"original_string": "private static final Permissions PERMISSIONS = Thing.MIN_REQUIRED_PERMISSIONS;", "modifier": "private static final", "type": "Permissions", "declarator": "PERMISSIONS = Thing.MIN_REQUIRED_PERMISSIONS", "var_name": "PERMISSIONS"}, {"original_string": "private static final JsonParseOptions JSON_PARSE_OPTIONS =\n            JsonFactory.newParseOptionsBuilder().withoutUrlDecoding().build();", "modifier": "private static final", "type": "JsonParseOptions", "declarator": "JSON_PARSE_OPTIONS =\n            JsonFactory.newParseOptionsBuilder().withoutUrlDecoding().build()", "var_name": "JSON_PARSE_OPTIONS"}, {"original_string": "@Rule\n    public final TestWatcher watchman = new TestedMethodLoggingWatcher(LoggerFactory.getLogger(getClass()));", "modifier": "@Rule\n    public final", "type": "TestWatcher", "declarator": "watchman = new TestedMethodLoggingWatcher(LoggerFactory.getLogger(getClass()))", "var_name": "watchman"}], "file": "services/things/persistence/src/test/java/org/eclipse/ditto/services/things/persistence/actors/ThingPersistenceActorTest.java"}, "test_case": {"identifier": "tryToCreateThingWithDifferentThingId", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void tryToCreateThingWithDifferentThingId() {\n        final ThingId thingIdOfActor = ThingId.of(\"test.ns\", \"23420815\");\n        final Thing thing = createThingV2WithRandomId();\n        final CreateThing createThing = CreateThing.of(thing, null, dittoHeadersV2);\n\n        final Props props = ThingPersistenceActor.props(thingIdOfActor, getDistributedPub());\n        final TestActorRef<ThingPersistenceActor> underTest = TestActorRef.create(actorSystem, props);\n        final ThingPersistenceActor thingPersistenceActor = underTest.underlyingActor();\n        final PartialFunction<Object, BoxedUnit> receiveCommand = thingPersistenceActor.receiveCommand();\n\n        try {\n            receiveCommand.apply(createThing);\n            fail(\"Expected IllegalArgumentException to be thrown.\");\n        } catch (final Exception e) {\n            assertThat(e).isInstanceOf(IllegalArgumentException.class);\n        }\n    }", "signature": "void tryToCreateThingWithDifferentThingId()", "full_signature": "@Test public void tryToCreateThingWithDifferentThingId()", "class_method_signature": "ThingPersistenceActorTest.tryToCreateThingWithDifferentThingId()", "testcase": true, "constructor": false, "invocations": ["of", "createThingV2WithRandomId", "of", "props", "getDistributedPub", "create", "underlyingActor", "receiveCommand", "apply", "fail", "isInstanceOf", "assertThat"]}, "focal_class": {"identifier": "ThingPersistenceActor", "superclass": "extends AbstractShardedPersistenceActor<Command, Thing, ThingId, ThingId, ThingEvent>", "interfaces": "", "fields": [{"original_string": "static final String PERSISTENCE_ID_PREFIX = \"thing:\";", "modifier": "static final", "type": "String", "declarator": "PERSISTENCE_ID_PREFIX = \"thing:\"", "var_name": "PERSISTENCE_ID_PREFIX"}, {"original_string": "static final String JOURNAL_PLUGIN_ID = \"akka-contrib-mongodb-persistence-things-journal\";", "modifier": "static final", "type": "String", "declarator": "JOURNAL_PLUGIN_ID = \"akka-contrib-mongodb-persistence-things-journal\"", "var_name": "JOURNAL_PLUGIN_ID"}, {"original_string": "static final String SNAPSHOT_PLUGIN_ID = \"akka-contrib-mongodb-persistence-things-snapshots\";", "modifier": "static final", "type": "String", "declarator": "SNAPSHOT_PLUGIN_ID = \"akka-contrib-mongodb-persistence-things-snapshots\"", "var_name": "SNAPSHOT_PLUGIN_ID"}, {"original_string": "private final ThingConfig thingConfig;", "modifier": "private final", "type": "ThingConfig", "declarator": "thingConfig", "var_name": "thingConfig"}, {"original_string": "private final DistributedPub<ThingEvent> distributedPub;", "modifier": "private final", "type": "DistributedPub<ThingEvent>", "declarator": "distributedPub", "var_name": "distributedPub"}], "methods": [{"identifier": "ThingPersistenceActor", "parameters": "(final ThingId thingId, final DistributedPub<ThingEvent> distributedPub,\n            final SnapshotAdapter<Thing> snapshotAdapter)", "modifiers": "@SuppressWarnings(\"unused\") private", "return": "", "signature": " ThingPersistenceActor(final ThingId thingId, final DistributedPub<ThingEvent> distributedPub,\n            final SnapshotAdapter<Thing> snapshotAdapter)", "full_signature": "@SuppressWarnings(\"unused\") private  ThingPersistenceActor(final ThingId thingId, final DistributedPub<ThingEvent> distributedPub,\n            final SnapshotAdapter<Thing> snapshotAdapter)", "class_method_signature": "ThingPersistenceActor.ThingPersistenceActor(final ThingId thingId, final DistributedPub<ThingEvent> distributedPub,\n            final SnapshotAdapter<Thing> snapshotAdapter)", "testcase": false, "constructor": true}, {"identifier": "props", "parameters": "(final ThingId thingId, final DistributedPub<ThingEvent> distributedPub,\n            final SnapshotAdapter<Thing> snapshotAdapter)", "modifiers": "public static", "return": "Props", "signature": "Props props(final ThingId thingId, final DistributedPub<ThingEvent> distributedPub,\n            final SnapshotAdapter<Thing> snapshotAdapter)", "full_signature": "public static Props props(final ThingId thingId, final DistributedPub<ThingEvent> distributedPub,\n            final SnapshotAdapter<Thing> snapshotAdapter)", "class_method_signature": "ThingPersistenceActor.props(final ThingId thingId, final DistributedPub<ThingEvent> distributedPub,\n            final SnapshotAdapter<Thing> snapshotAdapter)", "testcase": false, "constructor": false}, {"identifier": "props", "parameters": "(final ThingId thingId, final DistributedPub<ThingEvent> distributedPub)", "modifiers": "public static", "return": "Props", "signature": "Props props(final ThingId thingId, final DistributedPub<ThingEvent> distributedPub)", "full_signature": "public static Props props(final ThingId thingId, final DistributedPub<ThingEvent> distributedPub)", "class_method_signature": "ThingPersistenceActor.props(final ThingId thingId, final DistributedPub<ThingEvent> distributedPub)", "testcase": false, "constructor": false}, {"identifier": "persistenceId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String persistenceId()", "full_signature": "@Override public String persistenceId()", "class_method_signature": "ThingPersistenceActor.persistenceId()", "testcase": false, "constructor": false}, {"identifier": "journalPluginId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String journalPluginId()", "full_signature": "@Override public String journalPluginId()", "class_method_signature": "ThingPersistenceActor.journalPluginId()", "testcase": false, "constructor": false}, {"identifier": "snapshotPluginId", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String snapshotPluginId()", "full_signature": "@Override public String snapshotPluginId()", "class_method_signature": "ThingPersistenceActor.snapshotPluginId()", "testcase": false, "constructor": false}, {"identifier": "getEventClass", "parameters": "()", "modifiers": "@Override protected", "return": "Class<ThingEvent>", "signature": "Class<ThingEvent> getEventClass()", "full_signature": "@Override protected Class<ThingEvent> getEventClass()", "class_method_signature": "ThingPersistenceActor.getEventClass()", "testcase": false, "constructor": false}, {"identifier": "getStrategyContext", "parameters": "()", "modifiers": "@Override protected", "return": "CommandStrategy.Context<ThingId>", "signature": "CommandStrategy.Context<ThingId> getStrategyContext()", "full_signature": "@Override protected CommandStrategy.Context<ThingId> getStrategyContext()", "class_method_signature": "ThingPersistenceActor.getStrategyContext()", "testcase": false, "constructor": false}, {"identifier": "getCreatedStrategy", "parameters": "()", "modifiers": "@Override protected", "return": "ThingCommandStrategies", "signature": "ThingCommandStrategies getCreatedStrategy()", "full_signature": "@Override protected ThingCommandStrategies getCreatedStrategy()", "class_method_signature": "ThingPersistenceActor.getCreatedStrategy()", "testcase": false, "constructor": false}, {"identifier": "getDeletedStrategy", "parameters": "()", "modifiers": "@Override protected", "return": "CommandStrategy<CreateThing, Thing, ThingId, Result<ThingEvent>>", "signature": "CommandStrategy<CreateThing, Thing, ThingId, Result<ThingEvent>> getDeletedStrategy()", "full_signature": "@Override protected CommandStrategy<CreateThing, Thing, ThingId, Result<ThingEvent>> getDeletedStrategy()", "class_method_signature": "ThingPersistenceActor.getDeletedStrategy()", "testcase": false, "constructor": false}, {"identifier": "getEventStrategy", "parameters": "()", "modifiers": "@Override protected", "return": "EventStrategy<ThingEvent, Thing>", "signature": "EventStrategy<ThingEvent, Thing> getEventStrategy()", "full_signature": "@Override protected EventStrategy<ThingEvent, Thing> getEventStrategy()", "class_method_signature": "ThingPersistenceActor.getEventStrategy()", "testcase": false, "constructor": false}, {"identifier": "getActivityCheckConfig", "parameters": "()", "modifiers": "@Override protected", "return": "ActivityCheckConfig", "signature": "ActivityCheckConfig getActivityCheckConfig()", "full_signature": "@Override protected ActivityCheckConfig getActivityCheckConfig()", "class_method_signature": "ThingPersistenceActor.getActivityCheckConfig()", "testcase": false, "constructor": false}, {"identifier": "getSnapshotConfig", "parameters": "()", "modifiers": "@Override protected", "return": "SnapshotConfig", "signature": "SnapshotConfig getSnapshotConfig()", "full_signature": "@Override protected SnapshotConfig getSnapshotConfig()", "class_method_signature": "ThingPersistenceActor.getSnapshotConfig()", "testcase": false, "constructor": false}, {"identifier": "entityExistsAsDeleted", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean entityExistsAsDeleted()", "full_signature": "@Override protected boolean entityExistsAsDeleted()", "class_method_signature": "ThingPersistenceActor.entityExistsAsDeleted()", "testcase": false, "constructor": false}, {"identifier": "newNotAccessibleExceptionBuilder", "parameters": "()", "modifiers": "@Override protected", "return": "DittoRuntimeExceptionBuilder", "signature": "DittoRuntimeExceptionBuilder newNotAccessibleExceptionBuilder()", "full_signature": "@Override protected DittoRuntimeExceptionBuilder newNotAccessibleExceptionBuilder()", "class_method_signature": "ThingPersistenceActor.newNotAccessibleExceptionBuilder()", "testcase": false, "constructor": false}, {"identifier": "recoveryCompleted", "parameters": "(final RecoveryCompleted event)", "modifiers": "@Override protected", "return": "void", "signature": "void recoveryCompleted(final RecoveryCompleted event)", "full_signature": "@Override protected void recoveryCompleted(final RecoveryCompleted event)", "class_method_signature": "ThingPersistenceActor.recoveryCompleted(final RecoveryCompleted event)", "testcase": false, "constructor": false}, {"identifier": "publishEvent", "parameters": "(final ThingEvent event)", "modifiers": "@Override protected", "return": "void", "signature": "void publishEvent(final ThingEvent event)", "full_signature": "@Override protected void publishEvent(final ThingEvent event)", "class_method_signature": "ThingPersistenceActor.publishEvent(final ThingEvent event)", "testcase": false, "constructor": false}, {"identifier": "getEntitySchemaVersion", "parameters": "(final Thing entity)", "modifiers": "@Override protected", "return": "JsonSchemaVersion", "signature": "JsonSchemaVersion getEntitySchemaVersion(final Thing entity)", "full_signature": "@Override protected JsonSchemaVersion getEntitySchemaVersion(final Thing entity)", "class_method_signature": "ThingPersistenceActor.getEntitySchemaVersion(final Thing entity)", "testcase": false, "constructor": false}, {"identifier": "enhanceThingWithLifecycle", "parameters": "(final Thing thing)", "modifiers": "private static", "return": "Thing", "signature": "Thing enhanceThingWithLifecycle(final Thing thing)", "full_signature": "private static Thing enhanceThingWithLifecycle(final Thing thing)", "class_method_signature": "ThingPersistenceActor.enhanceThingWithLifecycle(final Thing thing)", "testcase": false, "constructor": false}], "file": "services/things/persistence/src/main/java/org/eclipse/ditto/services/things/persistence/actors/ThingPersistenceActor.java"}, "focal_method": {"identifier": "props", "parameters": "(final ThingId thingId, final DistributedPub<ThingEvent> distributedPub,\n            final SnapshotAdapter<Thing> snapshotAdapter)", "modifiers": "public static", "return": "Props", "body": "public static Props props(final ThingId thingId, final DistributedPub<ThingEvent> distributedPub,\n            final SnapshotAdapter<Thing> snapshotAdapter) {\n\n        return Props.create(ThingPersistenceActor.class, thingId, distributedPub, snapshotAdapter);\n    }", "signature": "Props props(final ThingId thingId, final DistributedPub<ThingEvent> distributedPub,\n            final SnapshotAdapter<Thing> snapshotAdapter)", "full_signature": "public static Props props(final ThingId thingId, final DistributedPub<ThingEvent> distributedPub,\n            final SnapshotAdapter<Thing> snapshotAdapter)", "class_method_signature": "ThingPersistenceActor.props(final ThingId thingId, final DistributedPub<ThingEvent> distributedPub,\n            final SnapshotAdapter<Thing> snapshotAdapter)", "testcase": false, "constructor": false, "invocations": ["create"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}