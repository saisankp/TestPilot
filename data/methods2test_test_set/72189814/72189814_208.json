{"test_class": {"identifier": "HaloJobSchedulerTest", "superclass": "extends HaloRobolectricTest", "interfaces": "", "fields": [{"original_string": "private CallbackFlag mCallbackFlag;", "modifier": "private", "type": "CallbackFlag", "declarator": "mCallbackFlag", "var_name": "mCallbackFlag"}, {"original_string": "private HaloFramework mFramework;", "modifier": "private", "type": "HaloFramework", "declarator": "mFramework", "var_name": "mFramework"}], "file": "sdk/halo-framework/src/test/java/com/mobgen/halo/android/framework/toolbox/scheduler/HaloJobSchedulerTest.java"}, "test_case": {"identifier": "thatCanScheduleAListOfJobs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void thatCanScheduleAListOfJobs() throws NoSuchFieldException, IllegalAccessException {\n        HaloJobScheduler haloJobScheduler = givenAHaloJobScheduler();\n        Job job1 = givenAJob(mCallbackFlag,\"job1\");\n        Job job2 = givenAJob(mCallbackFlag,\"job2\");\n        Job [] jobs = new Job[] {job1,job2};\n        haloJobScheduler.schedule(jobs);\n        HashMap<String, Job> pendingList = getPendingListByReflection(haloJobScheduler);\n        assertThat(pendingList.containsKey(job1.info().mTag)).isFalse();\n        assertThat(pendingList.containsKey(job2.info().mTag)).isFalse();\n    }", "signature": "void thatCanScheduleAListOfJobs()", "full_signature": "@Test public void thatCanScheduleAListOfJobs()", "class_method_signature": "HaloJobSchedulerTest.thatCanScheduleAListOfJobs()", "testcase": true, "constructor": false, "invocations": ["givenAHaloJobScheduler", "givenAJob", "givenAJob", "schedule", "getPendingListByReflection", "isFalse", "assertThat", "containsKey", "info", "isFalse", "assertThat", "containsKey", "info"]}, "focal_class": {"identifier": "HaloJobScheduler", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String TAG = \"HaloJobScheduler\";", "modifier": "private static final", "type": "String", "declarator": "TAG = \"HaloJobScheduler\"", "var_name": "TAG"}, {"original_string": "static final String DEBUG_DEVICE_ON_B = \"trigger.testcase.deviceon\";", "modifier": "static final", "type": "String", "declarator": "DEBUG_DEVICE_ON_B = \"trigger.testcase.deviceon\"", "var_name": "DEBUG_DEVICE_ON_B"}, {"original_string": "static final boolean DEBUG = Log.isLoggable(TAG, Log.DEBUG);", "modifier": "static final", "type": "boolean", "declarator": "DEBUG = Log.isLoggable(TAG, Log.DEBUG)", "var_name": "DEBUG"}, {"original_string": "private IHaloSchedulerServiceBinder mServiceBinder;", "modifier": "private", "type": "IHaloSchedulerServiceBinder", "declarator": "mServiceBinder", "var_name": "mServiceBinder"}, {"original_string": "private Context mContext;", "modifier": "private", "type": "Context", "declarator": "mContext", "var_name": "mContext"}, {"original_string": "private HashMap<String, Job> mPendingList;", "modifier": "private", "type": "HashMap<String, Job>", "declarator": "mPendingList", "var_name": "mPendingList"}, {"original_string": "private boolean mStopAndResetPending;", "modifier": "private", "type": "boolean", "declarator": "mStopAndResetPending", "var_name": "mStopAndResetPending"}, {"original_string": "private Connector mConnector;", "modifier": "private", "type": "Connector", "declarator": "mConnector", "var_name": "mConnector"}, {"original_string": "private HaloThreadManager mThreadManager;", "modifier": "private", "type": "HaloThreadManager", "declarator": "mThreadManager", "var_name": "mThreadManager"}], "methods": [{"identifier": "HaloJobScheduler", "parameters": "(@NonNull Context context, @NonNull HaloThreadManager threadManger)", "modifiers": "public", "return": "", "signature": " HaloJobScheduler(@NonNull Context context, @NonNull HaloThreadManager threadManger)", "full_signature": "public  HaloJobScheduler(@NonNull Context context, @NonNull HaloThreadManager threadManger)", "class_method_signature": "HaloJobScheduler.HaloJobScheduler(@NonNull Context context, @NonNull HaloThreadManager threadManger)", "testcase": false, "constructor": true}, {"identifier": "schedule", "parameters": "(@NonNull Job job)", "modifiers": "@Api(2.0) public", "return": "void", "signature": "void schedule(@NonNull Job job)", "full_signature": "@Api(2.0) public void schedule(@NonNull Job job)", "class_method_signature": "HaloJobScheduler.schedule(@NonNull Job job)", "testcase": false, "constructor": false}, {"identifier": "schedule", "parameters": "(@NonNull Job... jobs)", "modifiers": "@Api(2.0) public", "return": "void", "signature": "void schedule(@NonNull Job... jobs)", "full_signature": "@Api(2.0) public void schedule(@NonNull Job... jobs)", "class_method_signature": "HaloJobScheduler.schedule(@NonNull Job... jobs)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "(@NonNull String tag)", "modifiers": "@Api(2.0) public", "return": "void", "signature": "void cancel(@NonNull String tag)", "full_signature": "@Api(2.0) public void cancel(@NonNull String tag)", "class_method_signature": "HaloJobScheduler.cancel(@NonNull String tag)", "testcase": false, "constructor": false}, {"identifier": "closeDoor", "parameters": "()", "modifiers": "@Api(2.0) public", "return": "void", "signature": "void closeDoor()", "full_signature": "@Api(2.0) public void closeDoor()", "class_method_signature": "HaloJobScheduler.closeDoor()", "testcase": false, "constructor": false}, {"identifier": "stopAndReset", "parameters": "()", "modifiers": "@Api(2.0) public", "return": "void", "signature": "void stopAndReset()", "full_signature": "@Api(2.0) public void stopAndReset()", "class_method_signature": "HaloJobScheduler.stopAndReset()", "testcase": false, "constructor": false}], "file": "sdk/halo-framework/src/main/java/com/mobgen/halo/android/framework/toolbox/scheduler/HaloJobScheduler.java"}, "focal_method": {"identifier": "schedule", "parameters": "(@NonNull Job job)", "modifiers": "@Api(2.0) public", "return": "void", "body": "@Api(2.0)\n    public void schedule(@NonNull Job job) {\n        AssertionUtils.notNull(job, \"job\");\n        if (mServiceBinder == null) {\n            mPendingList.put(job.info().mIdentity, job);\n        } else {\n            mServiceBinder.schedule(job);\n        }\n    }", "signature": "void schedule(@NonNull Job job)", "full_signature": "@Api(2.0) public void schedule(@NonNull Job job)", "class_method_signature": "HaloJobScheduler.schedule(@NonNull Job job)", "testcase": false, "constructor": false, "invocations": ["notNull", "put", "info", "schedule"]}, "repository": {"repo_id": 72189814, "url": "https://github.com/mobgen/halo-android", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 6, "size": 3343, "license": "licensed"}}