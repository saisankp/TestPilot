{"test_class": {"identifier": "ShortIDTest", "superclass": "extends ConcurrentTestCase", "interfaces": "", "fields": [], "file": "base/lang/src/test/java/leap/lang/util/ShortIDTest.java"}, "test_case": {"identifier": "testUnique", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnique() {\n        int num = 20000;\n\n        Set<String> set = new HashSet<>(num);\n\n        int maxlen = 0;\n        for(int i=0;i<num;i++) {\n            String id = ShortID.randomID();\n            maxlen = Math.max(maxlen, id.length());\n            set.add(id);\n        }\n\n        assertTrue(maxlen < 17);\n        assertEquals(num, set.size());\n    }", "signature": "void testUnique()", "full_signature": "@Test public void testUnique()", "class_method_signature": "ShortIDTest.testUnique()", "testcase": true, "constructor": false, "invocations": ["randomID", "max", "length", "add", "assertTrue", "assertEquals", "size"]}, "focal_class": {"identifier": "ShortID", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ShortID INSTANCE = new ShortID.Builder().build();", "modifier": "private static final", "type": "ShortID", "declarator": "INSTANCE = new ShortID.Builder().build()", "var_name": "INSTANCE"}, {"original_string": "public static final String DEFAULT_ALPHABET =\n            \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_ALPHABET =\n            \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-\"", "var_name": "DEFAULT_ALPHABET"}, {"original_string": "public static final String DOLLARAT_ALPHABET =\n            \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$@\";", "modifier": "public static final", "type": "String", "declarator": "DOLLARAT_ALPHABET =\n            \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$@\"", "var_name": "DOLLARAT_ALPHABET"}, {"original_string": "private static final long DEFAULT_REDUCE_TIME = 1403265799803L;", "modifier": "private static final", "type": "long", "declarator": "DEFAULT_REDUCE_TIME = 1403265799803L", "var_name": "DEFAULT_REDUCE_TIME"}, {"original_string": "private static final int DEFAULT_VERSION = 6;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_VERSION = 6", "var_name": "DEFAULT_VERSION"}, {"original_string": "private final Random random;", "modifier": "private final", "type": "Random", "declarator": "random", "var_name": "random"}, {"original_string": "private final long reduceTime;", "modifier": "private final", "type": "long", "declarator": "reduceTime", "var_name": "reduceTime"}, {"original_string": "private final int version;", "modifier": "private final", "type": "int", "declarator": "version", "var_name": "version"}, {"original_string": "private final int clusterWorkerId;", "modifier": "private final", "type": "int", "declarator": "clusterWorkerId", "var_name": "clusterWorkerId"}, {"original_string": "private volatile int counter;", "modifier": "private volatile", "type": "int", "declarator": "counter", "var_name": "counter"}, {"original_string": "private volatile long previousSeconds;", "modifier": "private volatile", "type": "long", "declarator": "previousSeconds", "var_name": "previousSeconds"}, {"original_string": "private final char[] shuffled;", "modifier": "private final", "type": "char[]", "declarator": "shuffled", "var_name": "shuffled"}], "methods": [{"identifier": "randomID", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String randomID()", "full_signature": "public static String randomID()", "class_method_signature": "ShortID.randomID()", "testcase": false, "constructor": false}, {"identifier": "ShortID", "parameters": "(Random random, String alphabet, long reduceTime, int version, int clusterWorkerId)", "modifiers": "private", "return": "", "signature": " ShortID(Random random, String alphabet, long reduceTime, int version, int clusterWorkerId)", "full_signature": "private  ShortID(Random random, String alphabet, long reduceTime, int version, int clusterWorkerId)", "class_method_signature": "ShortID.ShortID(Random random, String alphabet, long reduceTime, int version, int clusterWorkerId)", "testcase": false, "constructor": true}, {"identifier": "generate", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String generate()", "full_signature": "public String generate()", "class_method_signature": "ShortID.generate()", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(int number)", "modifiers": "private", "return": "String", "signature": "String encode(int number)", "full_signature": "private String encode(int number)", "class_method_signature": "ShortID.encode(int number)", "testcase": false, "constructor": false}, {"identifier": "randomByte", "parameters": "()", "modifiers": "private", "return": "int", "signature": "int randomByte()", "full_signature": "private int randomByte()", "class_method_signature": "ShortID.randomByte()", "testcase": false, "constructor": false}, {"identifier": "shuffle", "parameters": "(String alphabet)", "modifiers": "private", "return": "char[]", "signature": "char[] shuffle(String alphabet)", "full_signature": "private char[] shuffle(String alphabet)", "class_method_signature": "ShortID.shuffle(String alphabet)", "testcase": false, "constructor": false}], "file": "base/lang/src/main/java/leap/lang/util/ShortID.java"}, "focal_method": {"identifier": "randomID", "parameters": "()", "modifiers": "public static", "return": "String", "body": "public static String randomID() {\n        return INSTANCE.generate();\n    }", "signature": "String randomID()", "full_signature": "public static String randomID()", "class_method_signature": "ShortID.randomID()", "testcase": false, "constructor": false, "invocations": ["generate"]}, "repository": {"repo_id": 48562236, "url": "https://github.com/leapframework/framework", "stars": 42, "created": "12/25/2015 1:54:52 AM +00:00", "updates": "2020-01-20T03:04:15+00:00", "fork": "False", "license": "licensed"}}