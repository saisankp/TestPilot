{"test_class": {"identifier": "Iec60870InterrogationCommandAsduHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Iec60870AsduFactory iec60870AsduFactory;", "modifier": "@Mock\n    private", "type": "Iec60870AsduFactory", "declarator": "iec60870AsduFactory", "var_name": "iec60870AsduFactory"}, {"original_string": "@Mock\n    private Connection connection;", "modifier": "@Mock\n    private", "type": "Connection", "declarator": "connection", "var_name": "connection"}], "file": "osgp/protocol-adapter-iec60870/osgp-protocol-simulator-iec60870/src/test/java/org/opensmartgridplatform/simulator/protocol/iec60870/server/handlers/Iec60870InterrogationCommandAsduHandlerTest.java"}, "test_case": {"identifier": "testSendingOrder", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testSendingOrder() throws IOException {\n\n        // Arrange\n        doNothing().when(this.connection).sendConfirmation(any(ASdu.class));\n        final ASdu responseAsdu = this.getAsdu(ASduType.M_SP_NA_1, CauseOfTransmission.INTERROGATED_BY_STATION);\n        when(this.iec60870AsduFactory.createInterrogationCommandResponseAsdu()).thenReturn(responseAsdu);\n        final ASdu terminationAsdu = this.getAsdu(ASduType.C_IC_NA_1, CauseOfTransmission.ACTIVATION_TERMINATION);\n        when(this.iec60870AsduFactory.createActivationTerminationResponseAsdu()).thenReturn(terminationAsdu);\n        doNothing().when(this.connection).send(any(ASdu.class));\n\n        final InOrder inOrder = inOrder(this.connection);\n\n        // Act\n        final Iec60870InterrogationCommandAsduHandler interrogationCommandHandler = new Iec60870InterrogationCommandAsduHandler(\n                this.iec60870AsduFactory);\n        interrogationCommandHandler.handleAsdu(this.connection, responseAsdu);\n\n        // Assert\n        inOrder.verify(this.connection).sendConfirmation(any(ASdu.class));\n        inOrder.verify(this.connection).send(argThat(new AsduTypeArgumentMatcher(ASduType.M_SP_NA_1)));\n        inOrder.verify(this.connection)\n                .send(argThat(\n                        new AsduTypeArgumentMatcher(ASduType.C_IC_NA_1, CauseOfTransmission.ACTIVATION_TERMINATION)));\n        inOrder.verifyNoMoreInteractions();\n    }", "signature": "void testSendingOrder()", "full_signature": "@Test void testSendingOrder()", "class_method_signature": "Iec60870InterrogationCommandAsduHandlerTest.testSendingOrder()", "testcase": true, "constructor": false, "invocations": ["sendConfirmation", "when", "doNothing", "any", "getAsdu", "thenReturn", "when", "createInterrogationCommandResponseAsdu", "getAsdu", "thenReturn", "when", "createActivationTerminationResponseAsdu", "send", "when", "doNothing", "any", "inOrder", "handleAsdu", "sendConfirmation", "verify", "any", "send", "verify", "argThat", "send", "verify", "argThat", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "Iec60870InterrogationCommandAsduHandler", "superclass": "extends Iec60870AsduHandler", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(Iec60870InterrogationCommandAsduHandler.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Iec60870InterrogationCommandAsduHandler.class)", "var_name": "LOGGER"}, {"original_string": "private final Iec60870AsduFactory iec60870AsduFactory;", "modifier": "private final", "type": "Iec60870AsduFactory", "declarator": "iec60870AsduFactory", "var_name": "iec60870AsduFactory"}], "methods": [{"identifier": "Iec60870InterrogationCommandAsduHandler", "parameters": "(final Iec60870AsduFactory iec60870AsduFactory)", "modifiers": "@Autowired public", "return": "", "signature": " Iec60870InterrogationCommandAsduHandler(final Iec60870AsduFactory iec60870AsduFactory)", "full_signature": "@Autowired public  Iec60870InterrogationCommandAsduHandler(final Iec60870AsduFactory iec60870AsduFactory)", "class_method_signature": "Iec60870InterrogationCommandAsduHandler.Iec60870InterrogationCommandAsduHandler(final Iec60870AsduFactory iec60870AsduFactory)", "testcase": false, "constructor": true}, {"identifier": "handleAsdu", "parameters": "(final Connection connection, final ASdu asdu)", "modifiers": "@Override public", "return": "void", "signature": "void handleAsdu(final Connection connection, final ASdu asdu)", "full_signature": "@Override public void handleAsdu(final Connection connection, final ASdu asdu)", "class_method_signature": "Iec60870InterrogationCommandAsduHandler.handleAsdu(final Connection connection, final ASdu asdu)", "testcase": false, "constructor": false}], "file": "osgp/protocol-adapter-iec60870/osgp-protocol-simulator-iec60870/src/main/java/org/opensmartgridplatform/simulator/protocol/iec60870/server/handlers/Iec60870InterrogationCommandAsduHandler.java"}, "focal_method": {"identifier": "handleAsdu", "parameters": "(final Connection connection, final ASdu asdu)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void handleAsdu(final Connection connection, final ASdu asdu) throws IOException {\n        LOGGER.info(\"Received interrogation command. Sending confirmation for ASDU: {}\", asdu);\n        connection.sendConfirmation(asdu);\n\n        final ASdu responseAsdu = this.iec60870AsduFactory.createInterrogationCommandResponseAsdu();\n        LOGGER.info(\"Processing interrogation command. Sending response ASDU: {}.\", responseAsdu);\n        connection.send(responseAsdu);\n\n        final ASdu terminationAsdu = this.iec60870AsduFactory.createActivationTerminationResponseAsdu();\n        LOGGER.info(\"Finished processing interrogation command. Sending termination ASDU: {}\", terminationAsdu);\n        connection.send(terminationAsdu);\n\n    }", "signature": "void handleAsdu(final Connection connection, final ASdu asdu)", "full_signature": "@Override public void handleAsdu(final Connection connection, final ASdu asdu)", "class_method_signature": "Iec60870InterrogationCommandAsduHandler.handleAsdu(final Connection connection, final ASdu asdu)", "testcase": false, "constructor": false, "invocations": ["info", "sendConfirmation", "createInterrogationCommandResponseAsdu", "info", "send", "createActivationTerminationResponseAsdu", "info", "send"]}, "repository": {"repo_id": 154302277, "url": "https://github.com/OSGP/open-smart-grid-platform", "stars": 30, "created": "10/23/2018 9:41:12 AM +00:00", "updates": "2020-01-26T20:15:09+00:00", "fork": "False", "license": "licensed"}}