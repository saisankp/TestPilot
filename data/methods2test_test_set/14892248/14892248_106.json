{"test_class": {"identifier": "ParagraphCssApplierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final FontSizeTranslator fst = FontSizeTranslator.getInstance();", "modifier": "private static final", "type": "FontSizeTranslator", "declarator": "fst = FontSizeTranslator.getInstance()", "var_name": "fst"}, {"original_string": "private Tag parent;", "modifier": "private", "type": "Tag", "declarator": "parent", "var_name": "parent"}, {"original_string": "private Tag first;", "modifier": "private", "type": "Tag", "declarator": "first", "var_name": "first"}, {"original_string": "private Tag second;", "modifier": "private", "type": "Tag", "declarator": "second", "var_name": "second"}, {"original_string": "private Tag child;", "modifier": "private", "type": "Tag", "declarator": "child", "var_name": "child"}, {"original_string": "private Paragraph firstPara;", "modifier": "private", "type": "Paragraph", "declarator": "firstPara", "var_name": "firstPara"}, {"original_string": "private Paragraph secondPara;", "modifier": "private", "type": "Paragraph", "declarator": "secondPara", "var_name": "secondPara"}, {"original_string": "private final ParagraphCssApplier applier = new ParagraphCssApplier(new CssAppliersImpl());", "modifier": "private final", "type": "ParagraphCssApplier", "declarator": "applier = new ParagraphCssApplier(new CssAppliersImpl())", "var_name": "applier"}, {"original_string": "private HtmlPipelineContext configuration;", "modifier": "private", "type": "HtmlPipelineContext", "declarator": "configuration", "var_name": "configuration"}], "file": "xmlworker/src/test/java/com/itextpdf/tool/xml/css/apply/ParagraphCssApplierTest.java"}, "test_case": {"identifier": "resolveLeading", "parameters": "()", "modifiers": "@Test @Ignore//We need possibility to detect that line-height undefined; public", "return": "void", "body": "@Test\n    @Ignore//We need possibility to detect that line-height undefined;\n    public void resolveLeading() throws IOException {\n        assertEquals(18f, firstPara.getLeading(), 0);\n\n        first.getCSS().put(\"line-height\", \"25pt\");\n        applier.apply(firstPara, first, configuration);\n        assertEquals(25, firstPara.getLeading(), 0);\n\n        child.getCSS().put(\"line-height\", \"19pt\");\n        applier.apply(firstPara, first, configuration);\n        assertEquals(25, firstPara.getLeading(), 0);\n\n        child.getCSS().put(\"line-height\", \"30pt\");\n        applier.apply(firstPara, first, configuration);\n        assertEquals(30, firstPara.getLeading(), 0);\n    }", "signature": "void resolveLeading()", "full_signature": "@Test @Ignore//We need possibility to detect that line-height undefined; public void resolveLeading()", "class_method_signature": "ParagraphCssApplierTest.resolveLeading()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getLeading", "put", "getCSS", "apply", "assertEquals", "getLeading", "put", "getCSS", "apply", "assertEquals", "getLeading", "put", "getCSS", "apply", "assertEquals", "getLeading"]}, "focal_class": {"identifier": "ParagraphCssApplier", "superclass": "", "interfaces": "implements CssApplier<Paragraph>", "fields": [{"original_string": "private final CssAppliers appliers;", "modifier": "private final", "type": "CssAppliers", "declarator": "appliers", "var_name": "appliers"}], "methods": [{"identifier": "ParagraphCssApplier", "parameters": "(final CssAppliers appliers)", "modifiers": "public", "return": "", "signature": " ParagraphCssApplier(final CssAppliers appliers)", "full_signature": "public  ParagraphCssApplier(final CssAppliers appliers)", "class_method_signature": "ParagraphCssApplier.ParagraphCssApplier(final CssAppliers appliers)", "testcase": false, "constructor": true}, {"identifier": "apply", "parameters": "(final Paragraph p, final Tag t, final MarginMemory configuration)", "modifiers": "public", "return": "Paragraph", "signature": "Paragraph apply(final Paragraph p, final Tag t, final MarginMemory configuration)", "full_signature": "public Paragraph apply(final Paragraph p, final Tag t, final MarginMemory configuration)", "class_method_signature": "ParagraphCssApplier.apply(final Paragraph p, final Tag t, final MarginMemory configuration)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(final Paragraph p, final Tag t, final MarginMemory configuration, final PageSizeContainable psc, final HtmlPipelineContext ctx)", "modifiers": "public", "return": "Paragraph", "signature": "Paragraph apply(final Paragraph p, final Tag t, final MarginMemory configuration, final PageSizeContainable psc, final HtmlPipelineContext ctx)", "full_signature": "public Paragraph apply(final Paragraph p, final Tag t, final MarginMemory configuration, final PageSizeContainable psc, final HtmlPipelineContext ctx)", "class_method_signature": "ParagraphCssApplier.apply(final Paragraph p, final Tag t, final MarginMemory configuration, final PageSizeContainable psc, final HtmlPipelineContext ctx)", "testcase": false, "constructor": false}], "file": "xmlworker/src/main/java/com/itextpdf/tool/xml/css/apply/ParagraphCssApplier.java"}, "focal_method": {"identifier": "apply", "parameters": "(final Paragraph p, final Tag t, final MarginMemory configuration)", "modifiers": "public", "return": "Paragraph", "body": "public Paragraph apply(final Paragraph p, final Tag t, final MarginMemory configuration) {\n            return apply(p, t, configuration, null, null);\n        }", "signature": "Paragraph apply(final Paragraph p, final Tag t, final MarginMemory configuration)", "full_signature": "public Paragraph apply(final Paragraph p, final Tag t, final MarginMemory configuration)", "class_method_signature": "ParagraphCssApplier.apply(final Paragraph p, final Tag t, final MarginMemory configuration)", "testcase": false, "constructor": false, "invocations": ["apply"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}