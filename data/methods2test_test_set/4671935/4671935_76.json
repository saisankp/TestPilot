{"test_class": {"identifier": "ConvertUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/com/platypii/baseline/util/ConvertUtilTest.java"}, "test_case": {"identifier": "convertFormatDouble", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void convertFormatDouble() {\n        assertEquals( \"0\", ConvertUtil.formatDouble(0.0, 2));\n        assertEquals( \"1.0\", ConvertUtil.formatDouble(1.0, 2));\n\n        assertEquals( \"9\", ConvertUtil.formatDouble(9.8, 0));\n        assertEquals( \"9\", ConvertUtil.formatDouble(9.8, 1));\n        assertEquals( \"9.8\", ConvertUtil.formatDouble(9.8, 2));\n        assertEquals( \"9.80\", ConvertUtil.formatDouble(9.8, 3));\n\n        assertEquals( \"10\", ConvertUtil.formatDouble(10, 1));\n        assertEquals( \"10\", ConvertUtil.formatDouble(10, 2));\n        assertEquals( \"10.0\", ConvertUtil.formatDouble(10, 3));\n\n        assertEquals( \"3200\", ConvertUtil.formatDouble(3280, 2));\n        assertEquals( \"3280\", ConvertUtil.formatDouble(3280, 3));\n        assertEquals( \"3280\", ConvertUtil.formatDouble(3280, 4));\n        assertEquals( \"3280.0\", ConvertUtil.formatDouble(3280, 5));\n        assertEquals( \"3280.00\", ConvertUtil.formatDouble(3280, 6));\n\n        assertEquals( \"-9\", ConvertUtil.formatDouble(-9.8, 1));\n        assertEquals( \"-9.8\", ConvertUtil.formatDouble(-9.8, 2));\n        assertEquals( \"-9.80\", ConvertUtil.formatDouble(-9.8, 3));\n\n        assertEquals( \"9.2\", ConvertUtil.formatDouble(9.2, 2));\n        assertEquals( \".92\", ConvertUtil.formatDouble(0.92, 2));\n        assertEquals( \".092\", ConvertUtil.formatDouble(0.092, 2));\n        assertEquals( \".0092\", ConvertUtil.formatDouble(0.0092, 2));\n\n        assertEquals( \".098\", ConvertUtil.formatDouble(0.098, 2));\n        assertEquals( \".99\", ConvertUtil.formatDouble(0.999, 2));\n\n        assertEquals( \"NaN\", ConvertUtil.formatDouble(Double.NaN, 2));\n        assertEquals( \"Infinity\", ConvertUtil.formatDouble(Double.POSITIVE_INFINITY, 2));\n        assertEquals( \"-Infinity\", ConvertUtil.formatDouble(Double.NEGATIVE_INFINITY, 2));\n    }", "signature": "void convertFormatDouble()", "full_signature": "@Test public void convertFormatDouble()", "class_method_signature": "ConvertUtilTest.convertFormatDouble()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble", "assertEquals", "formatDouble"]}, "focal_class": {"identifier": "ConvertUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "formatDouble", "parameters": "(double value, int precision)", "modifiers": "@NonNull static", "return": "String", "signature": "String formatDouble(double value, int precision)", "full_signature": "@NonNull static String formatDouble(double value, int precision)", "class_method_signature": "ConvertUtil.formatDouble(double value, int precision)", "testcase": false, "constructor": false}, {"identifier": "formatInt", "parameters": "(double value, int precision)", "modifiers": "@NonNull static", "return": "String", "signature": "String formatInt(double value, int precision)", "full_signature": "@NonNull static String formatInt(double value, int precision)", "class_method_signature": "ConvertUtil.formatInt(double value, int precision)", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/platypii/baseline/util/ConvertUtil.java"}, "focal_method": {"identifier": "formatDouble", "parameters": "(double value, int precision)", "modifiers": "@NonNull static", "return": "String", "body": "@NonNull\n    static String formatDouble(double value, int precision) {\n        // Switch negative, so that we floor toward zero\n        if (value < 0) return \"-\" + formatDouble(-value, precision);\n        // Check for special values\n        if (Double.isNaN(value) || Double.isInfinite(value)) return Double.toString(value);\n        if (value == 0.0) return \"0\";\n        // Precision must be at least 1\n        if (precision <= 0) precision = 1;\n        // Find magnitude of value\n        final int mag = (int) Math.floor(Math.log10(value));\n        // Significant digits as an int (9300 -> 93, 9.3 -> 93, 0.093 -> 93)\n        final int digits = (int) Math.floor(value * Math.pow(10, precision - mag - 1));\n        // How many decimal places we need to print\n        final int decimalPlaces = precision - mag - 1;\n        if (decimalPlaces <= 0) {\n            // Add trailing zeros 9300\n            final char[] zeros = new char[-decimalPlaces];\n            Arrays.fill(zeros, '0');\n            return digits + new String(zeros);\n        } else if (precision < decimalPlaces) {\n            // Add leading zeros .093\n            final char[] zeros = new char[decimalPlaces - precision];\n            Arrays.fill(zeros, '0');\n            return \".\" + new String(zeros) + digits;\n        } else {\n            // Split digits 9.3\n            final String digitsString = Integer.toString(digits);\n            final String before = digitsString.substring(0, precision - decimalPlaces);\n            final String after = digitsString.substring(precision - decimalPlaces);\n            return before + \".\" + after;\n        }\n    }", "signature": "String formatDouble(double value, int precision)", "full_signature": "@NonNull static String formatDouble(double value, int precision)", "class_method_signature": "ConvertUtil.formatDouble(double value, int precision)", "testcase": false, "constructor": false, "invocations": ["formatDouble", "isNaN", "isInfinite", "toString", "floor", "log10", "floor", "pow", "fill", "fill", "toString", "substring", "substring"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}