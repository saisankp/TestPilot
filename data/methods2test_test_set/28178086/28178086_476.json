{"test_class": {"identifier": "ApproximateSingleOutlierDetectorTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/modelling/arima/ApproximateSingleOutlierDetectorTest.java"}, "test_case": {"identifier": "testSomeSeries", "parameters": "()", "modifiers": "@Test @Ignore public", "return": "void", "body": "@Test\n    @Ignore\n    public void testSomeSeries() {\n        ModellingContext context = new ModellingContext();\n        context.automodelling = true;\n        context.hasseas = true;\n        context.description = new ModelDescription(Data.P, null);\n        context.description.setAirline(true);\n        context.description.setTransformation(DefaultTransformationType.Log);\n        int K = 1000;\n        long t0 = System.currentTimeMillis();\n        for (int i = 0; i < K; ++i) {\n            context.description.getOutliers().clear();\n            context.estimation = null;\n            OutliersDetectionModule om = new OutliersDetectionModule(new ApproximateSingleOutlierDetector());\n            om.setCriticalValue(2.8);\n            om.setDefault();\n            om.process(context);\n//            for (IOutlierVariable o : context.description.getOutliers()) {\n//                System.out.println(o.getDescription(TsFrequency.Monthly));\n//            }\n        }\n        long t1 = System.currentTimeMillis();\n        System.out.println(t1 - t0);\n        t0 = System.currentTimeMillis();\n        for (int i = 0; i < K; ++i) {\n            context.description.getOutliers().clear();\n            context.estimation = null;\n            OutliersDetector om2 = new OutliersDetector();\n            om2.setDefault();\n            om2.setCriticalValue(2.8);\n            om2.useEML(true);\n            om2.process(context);\n//            for (IOutlierVariable o : context.description.getOutliers()) {\n//                System.out.println(o.getDescription(TsFrequency.Monthly));\n//            }\n        }\n        System.out.println(\"\");\n        t1 = System.currentTimeMillis();\n        System.out.println(t1 - t0);\n\n    }", "signature": "void testSomeSeries()", "full_signature": "@Test @Ignore public void testSomeSeries()", "class_method_signature": "ApproximateSingleOutlierDetectorTest.testSomeSeries()", "testcase": true, "constructor": false, "invocations": ["setAirline", "setTransformation", "currentTimeMillis", "clear", "getOutliers", "setCriticalValue", "setDefault", "process", "currentTimeMillis", "println", "currentTimeMillis", "clear", "getOutliers", "setDefault", "setCriticalValue", "useEML", "process", "println", "currentTimeMillis", "println"]}, "focal_class": {"identifier": "ApproximateSingleOutlierDetector", "superclass": "extends\n        AbstractSingleOutlierDetector<T>", "interfaces": "", "fields": [{"original_string": "private double[] m_el;", "modifier": "private", "type": "double[]", "declarator": "m_el", "var_name": "m_el"}, {"original_string": "private SarimaModel m_stmodel;", "modifier": "private", "type": "SarimaModel", "declarator": "m_stmodel", "var_name": "m_stmodel"}, {"original_string": "private BackFilter m_ur;", "modifier": "private", "type": "BackFilter", "declarator": "m_ur", "var_name": "m_ur"}], "methods": [{"identifier": "ApproximateSingleOutlierDetector", "parameters": "()", "modifiers": "public", "return": "", "signature": " ApproximateSingleOutlierDetector()", "full_signature": "public  ApproximateSingleOutlierDetector()", "class_method_signature": "ApproximateSingleOutlierDetector.ApproximateSingleOutlierDetector()", "testcase": false, "constructor": true}, {"identifier": "ApproximateSingleOutlierDetector", "parameters": "(IRobustStandardDeviationComputer computer)", "modifiers": "public", "return": "", "signature": " ApproximateSingleOutlierDetector(IRobustStandardDeviationComputer computer)", "full_signature": "public  ApproximateSingleOutlierDetector(IRobustStandardDeviationComputer computer)", "class_method_signature": "ApproximateSingleOutlierDetector.ApproximateSingleOutlierDetector(IRobustStandardDeviationComputer computer)", "testcase": false, "constructor": true}, {"identifier": "calc", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean calc()", "full_signature": "@Override protected boolean calc()", "class_method_signature": "ApproximateSingleOutlierDetector.calc()", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "(boolean all)", "modifiers": "@Override protected", "return": "void", "signature": "void clear(boolean all)", "full_signature": "@Override protected void clear(boolean all)", "class_method_signature": "ApproximateSingleOutlierDetector.clear(boolean all)", "testcase": false, "constructor": false}, {"identifier": "initmodel", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean initmodel()", "full_signature": "private boolean initmodel()", "class_method_signature": "ApproximateSingleOutlierDetector.initmodel()", "testcase": false, "constructor": false}, {"identifier": "processOutlier", "parameters": "(int idx)", "modifiers": "private", "return": "void", "signature": "void processOutlier(int idx)", "full_signature": "private void processOutlier(int idx)", "class_method_signature": "ApproximateSingleOutlierDetector.processOutlier(int idx)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/modelling/arima/ApproximateSingleOutlierDetector.java"}, "focal_method": {"identifier": "clear", "parameters": "(boolean all)", "modifiers": "@Override protected", "return": "void", "body": "@Override\n    protected void clear(boolean all) {\n        super.clear(all);\n        m_el = null;\n    }", "signature": "void clear(boolean all)", "full_signature": "@Override protected void clear(boolean all)", "class_method_signature": "ApproximateSingleOutlierDetector.clear(boolean all)", "testcase": false, "constructor": false, "invocations": ["clear"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}