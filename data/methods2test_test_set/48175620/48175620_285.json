{"test_class": {"identifier": "SuppliersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Object ITEM = new Object();", "modifier": "private static final", "type": "Object", "declarator": "ITEM = new Object()", "var_name": "ITEM"}, {"original_string": "private static final Object RETURN_ITEM = new Object();", "modifier": "private static final", "type": "Object", "declarator": "RETURN_ITEM = new Object()", "var_name": "RETURN_ITEM"}, {"original_string": "@Mock\n  private Function<Object, Object> mockFunction;", "modifier": "@Mock\n  private", "type": "Function<Object, Object>", "declarator": "mockFunction", "var_name": "mockFunction"}], "file": "agera/src/test/java/com/google/android/agera/SuppliersTest.java"}, "test_case": {"identifier": "shouldRunFactoryWithFromObjectAndReturnFactoryOutputForFunctionWithSupplier", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldRunFactoryWithFromObjectAndReturnFactoryOutputForFunctionWithSupplier() {\n    assertThat(functionAsSupplier(mockFunction, ITEM), gives(RETURN_ITEM));\n  }", "signature": "void shouldRunFactoryWithFromObjectAndReturnFactoryOutputForFunctionWithSupplier()", "full_signature": "@Test public void shouldRunFactoryWithFromObjectAndReturnFactoryOutputForFunctionWithSupplier()", "class_method_signature": "SuppliersTest.shouldRunFactoryWithFromObjectAndReturnFactoryOutputForFunctionWithSupplier()", "testcase": true, "constructor": false, "invocations": ["assertThat", "functionAsSupplier", "gives"]}, "focal_class": {"identifier": "Suppliers", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "staticSupplier", "parameters": "(@NonNull final T object)", "modifiers": "@NonNull public static", "return": "Supplier<T>", "signature": "Supplier<T> staticSupplier(@NonNull final T object)", "full_signature": "@NonNull public static Supplier<T> staticSupplier(@NonNull final T object)", "class_method_signature": "Suppliers.staticSupplier(@NonNull final T object)", "testcase": false, "constructor": false}, {"identifier": "functionAsSupplier", "parameters": "(\n      @NonNull final Function<F, T> function, @NonNull final F from)", "modifiers": "@NonNull public static", "return": "Supplier<T>", "signature": "Supplier<T> functionAsSupplier(\n      @NonNull final Function<F, T> function, @NonNull final F from)", "full_signature": "@NonNull public static Supplier<T> functionAsSupplier(\n      @NonNull final Function<F, T> function, @NonNull final F from)", "class_method_signature": "Suppliers.functionAsSupplier(\n      @NonNull final Function<F, T> function, @NonNull final F from)", "testcase": false, "constructor": false}, {"identifier": "Suppliers", "parameters": "()", "modifiers": "private", "return": "", "signature": " Suppliers()", "full_signature": "private  Suppliers()", "class_method_signature": "Suppliers.Suppliers()", "testcase": false, "constructor": true}], "file": "agera/src/main/java/com/google/android/agera/Suppliers.java"}, "focal_method": {"identifier": "functionAsSupplier", "parameters": "(\n      @NonNull final Function<F, T> function, @NonNull final F from)", "modifiers": "@NonNull public static", "return": "Supplier<T>", "body": "@NonNull\n  public static <T, F> Supplier<T> functionAsSupplier(\n      @NonNull final Function<F, T> function, @NonNull final F from) {\n    return new FunctionToSupplierConverter<>(function, from);\n  }", "signature": "Supplier<T> functionAsSupplier(\n      @NonNull final Function<F, T> function, @NonNull final F from)", "full_signature": "@NonNull public static Supplier<T> functionAsSupplier(\n      @NonNull final Function<F, T> function, @NonNull final F from)", "class_method_signature": "Suppliers.functionAsSupplier(\n      @NonNull final Function<F, T> function, @NonNull final F from)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 48175620, "url": "https://github.com/google/agera", "language": "Java", "is_fork": false, "fork_count": 669, "stargazer_count": 7333, "size": 968, "license": "licensed"}}