{"test_class": {"identifier": "FsHandleTest", "superclass": "", "interfaces": "", "fields": [], "file": "plugin/com.sandpolis.plugin.filesys/src/test/java/com/sandpolis/plugin/filesys/FsHandleTest.java"}, "test_case": {"identifier": "list_1", "parameters": "(@TempDir Path temp)", "modifiers": "@Test @DisplayName(\"Check that the handle lists directory contents\")", "return": "void", "body": "@Test\n\t@DisplayName(\"Check that the handle lists directory contents\")\n\tvoid list_1(@TempDir Path temp) throws IOException {\n\t\tFiles.createDirectory(temp.resolve(\"test1\"));\n\t\tFiles.createFile(temp.resolve(\"small_file.txt\"));\n\n\t\ttry (FsHandle fs = new FsHandle(temp.toString())) {\n\n\t\t\tassertTrue(fs.list().stream().anyMatch(listlet -> {\n\t\t\t\treturn \"test1\".equals(listlet.getName()) && listlet.getDirectory() == true;\n\t\t\t}));\n\n\t\t\tassertTrue(fs.list().stream().anyMatch(listlet -> {\n\t\t\t\treturn \"small_file.txt\".equals(listlet.getName()) && listlet.getDirectory() == false;\n\t\t\t}));\n\n\t\t\tassertEquals(2, fs.list().size());\n\t\t}\n\t}", "signature": "void list_1(@TempDir Path temp)", "full_signature": "@Test @DisplayName(\"Check that the handle lists directory contents\") void list_1(@TempDir Path temp)", "class_method_signature": "FsHandleTest.list_1(@TempDir Path temp)", "testcase": true, "constructor": false, "invocations": ["createDirectory", "resolve", "createFile", "resolve", "toString", "assertTrue", "anyMatch", "stream", "list", "equals", "getName", "getDirectory", "assertTrue", "anyMatch", "stream", "list", "equals", "getName", "getDirectory", "assertEquals", "size", "list"]}, "focal_class": {"identifier": "FsHandle", "superclass": "", "interfaces": "implements Closeable", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(FsHandle.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(FsHandle.class)", "var_name": "log"}, {"original_string": "private static final int CACHE_SIZE = 4;", "modifier": "private static final", "type": "int", "declarator": "CACHE_SIZE = 4", "var_name": "CACHE_SIZE"}, {"original_string": "private static final int CACHE_EXPIRE = 60;", "modifier": "private static final", "type": "int", "declarator": "CACHE_EXPIRE = 60", "var_name": "CACHE_EXPIRE"}, {"original_string": "private int id;", "modifier": "private", "type": "int", "declarator": "id", "var_name": "id"}, {"original_string": "private boolean list_mtimes;", "modifier": "private", "type": "boolean", "declarator": "list_mtimes", "var_name": "list_mtimes"}, {"original_string": "private boolean list_atimes;", "modifier": "private", "type": "boolean", "declarator": "list_atimes", "var_name": "list_atimes"}, {"original_string": "private boolean list_ctimes;", "modifier": "private", "type": "boolean", "declarator": "list_ctimes", "var_name": "list_ctimes"}, {"original_string": "private boolean list_sizes;", "modifier": "private", "type": "boolean", "declarator": "list_sizes", "var_name": "list_sizes"}, {"original_string": "private boolean list_mimes;", "modifier": "private", "type": "boolean", "declarator": "list_mimes", "var_name": "list_mimes"}, {"original_string": "private Path ref;", "modifier": "private", "type": "Path", "declarator": "ref", "var_name": "ref"}, {"original_string": "private WatchKey refWatchKey;", "modifier": "private", "type": "WatchKey", "declarator": "refWatchKey", "var_name": "refWatchKey"}, {"original_string": "private List<FileListlet> refListing;", "modifier": "private", "type": "List<FileListlet>", "declarator": "refListing", "var_name": "refListing"}, {"original_string": "private WatchService refService;", "modifier": "private", "type": "WatchService", "declarator": "refService", "var_name": "refService"}, {"original_string": "private WatchService cacheService;", "modifier": "private", "type": "WatchService", "declarator": "cacheService", "var_name": "cacheService"}, {"original_string": "private Cache<Path, CachedPath> pathCache;", "modifier": "private", "type": "Cache<Path, CachedPath>", "declarator": "pathCache", "var_name": "pathCache"}, {"original_string": "private List<Consumer<EV_FileListing>> callbacks = Collections.synchronizedList(new ArrayList<>());", "modifier": "private", "type": "List<Consumer<EV_FileListing>>", "declarator": "callbacks = Collections.synchronizedList(new ArrayList<>())", "var_name": "callbacks"}], "methods": [{"identifier": "FsHandle", "parameters": "()", "modifiers": "public", "return": "", "signature": " FsHandle()", "full_signature": "public  FsHandle()", "class_method_signature": "FsHandle.FsHandle()", "testcase": false, "constructor": true}, {"identifier": "FsHandle", "parameters": "(String start)", "modifiers": "public", "return": "", "signature": " FsHandle(String start)", "full_signature": "public  FsHandle(String start)", "class_method_signature": "FsHandle.FsHandle(String start)", "testcase": false, "constructor": true}, {"identifier": "FsHandle", "parameters": "(String start, FsHandleOptions options)", "modifiers": "public", "return": "", "signature": " FsHandle(String start, FsHandleOptions options)", "full_signature": "public  FsHandle(String start, FsHandleOptions options)", "class_method_signature": "FsHandle.FsHandle(String start, FsHandleOptions options)", "testcase": false, "constructor": true}, {"identifier": "FsHandle", "parameters": "(FileSystem fs, String start, FsHandleOptions options)", "modifiers": "public", "return": "", "signature": " FsHandle(FileSystem fs, String start, FsHandleOptions options)", "full_signature": "public  FsHandle(FileSystem fs, String start, FsHandleOptions options)", "class_method_signature": "FsHandle.FsHandle(FileSystem fs, String start, FsHandleOptions options)", "testcase": false, "constructor": true}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getId()", "full_signature": "public int getId()", "class_method_signature": "FsHandle.getId()", "testcase": false, "constructor": false}, {"identifier": "pwd", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String pwd()", "full_signature": "public String pwd()", "class_method_signature": "FsHandle.pwd()", "testcase": false, "constructor": false}, {"identifier": "addUpdateCallback", "parameters": "(Consumer<EV_FileListing> callback)", "modifiers": "public", "return": "void", "signature": "void addUpdateCallback(Consumer<EV_FileListing> callback)", "full_signature": "public void addUpdateCallback(Consumer<EV_FileListing> callback)", "class_method_signature": "FsHandle.addUpdateCallback(Consumer<EV_FileListing> callback)", "testcase": false, "constructor": false}, {"identifier": "fireCallbacks", "parameters": "(EV_FileListing update)", "modifiers": "private", "return": "void", "signature": "void fireCallbacks(EV_FileListing update)", "full_signature": "private void fireCallbacks(EV_FileListing update)", "class_method_signature": "FsHandle.fireCallbacks(EV_FileListing update)", "testcase": false, "constructor": false}, {"identifier": "up", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean up()", "full_signature": "public boolean up()", "class_method_signature": "FsHandle.up()", "testcase": false, "constructor": false}, {"identifier": "down", "parameters": "(String directory)", "modifiers": "public", "return": "boolean", "signature": "boolean down(String directory)", "full_signature": "public boolean down(String directory)", "class_method_signature": "FsHandle.down(String directory)", "testcase": false, "constructor": false}, {"identifier": "setPath", "parameters": "(String path)", "modifiers": "public", "return": "boolean", "signature": "boolean setPath(String path)", "full_signature": "public boolean setPath(String path)", "class_method_signature": "FsHandle.setPath(String path)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "()", "modifiers": "public", "return": "List<FileListlet>", "signature": "List<FileListlet> list()", "full_signature": "public List<FileListlet> list()", "class_method_signature": "FsHandle.list()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "FsHandle.close()", "testcase": false, "constructor": false}, {"identifier": "movePath", "parameters": "(Path potential)", "modifiers": "private", "return": "void", "signature": "void movePath(Path potential)", "full_signature": "private void movePath(Path potential)", "class_method_signature": "FsHandle.movePath(Path potential)", "testcase": false, "constructor": false}, {"identifier": "buildListletFromEvent", "parameters": "(@SuppressWarnings(\"rawtypes\") WatchEvent event)", "modifiers": "private", "return": "FileListlet", "signature": "FileListlet buildListletFromEvent(@SuppressWarnings(\"rawtypes\") WatchEvent event)", "full_signature": "private FileListlet buildListletFromEvent(@SuppressWarnings(\"rawtypes\") WatchEvent event)", "class_method_signature": "FsHandle.buildListletFromEvent(@SuppressWarnings(\"rawtypes\") WatchEvent event)", "testcase": false, "constructor": false}, {"identifier": "buildNewListlet", "parameters": "(Path path)", "modifiers": "private", "return": "FileListlet", "signature": "FileListlet buildNewListlet(Path path)", "full_signature": "private FileListlet buildNewListlet(Path path)", "class_method_signature": "FsHandle.buildNewListlet(Path path)", "testcase": false, "constructor": false}, {"identifier": "buildDeletedListlet", "parameters": "(Path path)", "modifiers": "private", "return": "FileListlet", "signature": "FileListlet buildDeletedListlet(Path path)", "full_signature": "private FileListlet buildDeletedListlet(Path path)", "class_method_signature": "FsHandle.buildDeletedListlet(Path path)", "testcase": false, "constructor": false}, {"identifier": "buildModifiedListlet", "parameters": "(Path path)", "modifiers": "private", "return": "FileListlet", "signature": "FileListlet buildModifiedListlet(Path path)", "full_signature": "private FileListlet buildModifiedListlet(Path path)", "class_method_signature": "FsHandle.buildModifiedListlet(Path path)", "testcase": false, "constructor": false}, {"identifier": "startPwdService", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void startPwdService()", "full_signature": "private void startPwdService()", "class_method_signature": "FsHandle.startPwdService()", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(List<FileListlet> listing, List<FileListlet> updates)", "modifiers": "private static", "return": "void", "signature": "void merge(List<FileListlet> listing, List<FileListlet> updates)", "full_signature": "private static void merge(List<FileListlet> listing, List<FileListlet> updates)", "class_method_signature": "FsHandle.merge(List<FileListlet> listing, List<FileListlet> updates)", "testcase": false, "constructor": false}], "file": "plugin/com.sandpolis.plugin.filesys/src/main/java/com/sandpolis/plugin/filesys/FsHandle.java"}, "focal_method": {"identifier": "list", "parameters": "()", "modifiers": "public", "return": "List<FileListlet>", "body": "public List<FileListlet> list() throws IOException {\n\t\t// TODO add update callback in constructor to update refListing\n\t\tif (refListing == null) {\n\t\t\ttry (Stream<Path> paths = Files.list(ref)) {\n\t\t\t\trefListing = paths.map(this::buildNewListlet).collect(Collectors.toList());\n\t\t\t}\n\t\t}\n\n\t\treturn refListing;\n\t}", "signature": "List<FileListlet> list()", "full_signature": "public List<FileListlet> list()", "class_method_signature": "FsHandle.list()", "testcase": false, "constructor": false, "invocations": ["list", "collect", "map", "toList"]}, "repository": {"repo_id": 100069523, "url": "https://github.com/Subterranean-Security/Sandpolis", "stars": 25, "created": "8/11/2017 8:55:30 PM +00:00", "updates": "2020-01-27T01:41:01+00:00", "fork": "False", "license": "licensed"}}