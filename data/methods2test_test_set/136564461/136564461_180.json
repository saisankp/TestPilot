{"test_class": {"identifier": "ArrayUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "eddsa/src/test/java/io/moatwel/util/ArrayUtilsTest.java"}, "test_case": {"identifier": "failure_SplitByteArray_wrong_range_2", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n    public void failure_SplitByteArray_wrong_range_2() {\n        byte[] input = new byte[]{1, 2, 3, 4, 5, 6};\n        ArrayUtils.split(input, 9);\n    }", "signature": "void failure_SplitByteArray_wrong_range_2()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void failure_SplitByteArray_wrong_range_2()", "class_method_signature": "ArrayUtilsTest.failure_SplitByteArray_wrong_range_2()", "testcase": true, "constructor": false, "invocations": ["split"]}, "focal_class": {"identifier": "ArrayUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "split", "parameters": "(byte[] bytes, int splitIndex)", "modifiers": "public static", "return": "byte[][]", "signature": "byte[][] split(byte[] bytes, int splitIndex)", "full_signature": "public static byte[][] split(byte[] bytes, int splitIndex)", "class_method_signature": "ArrayUtils.split(byte[] bytes, int splitIndex)", "testcase": false, "constructor": false}, {"identifier": "reverse", "parameters": "(int[] input)", "modifiers": "public static", "return": "int[]", "signature": "int[] reverse(int[] input)", "full_signature": "public static int[] reverse(int[] input)", "class_method_signature": "ArrayUtils.reverse(int[] input)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(BigInteger value, int expectedBytesLength)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(BigInteger value, int expectedBytesLength)", "full_signature": "public static byte[] toByteArray(BigInteger value, int expectedBytesLength)", "class_method_signature": "ArrayUtils.toByteArray(BigInteger value, int expectedBytesLength)", "testcase": false, "constructor": false}, {"identifier": "toBinaryArray", "parameters": "(BigInteger integer)", "modifiers": "public static", "return": "int[]", "signature": "int[] toBinaryArray(BigInteger integer)", "full_signature": "public static int[] toBinaryArray(BigInteger integer)", "class_method_signature": "ArrayUtils.toBinaryArray(BigInteger integer)", "testcase": false, "constructor": false}, {"identifier": "toMutualOppositeForm", "parameters": "(BigInteger integer)", "modifiers": "public static", "return": "int[]", "signature": "int[] toMutualOppositeForm(BigInteger integer)", "full_signature": "public static int[] toMutualOppositeForm(BigInteger integer)", "class_method_signature": "ArrayUtils.toMutualOppositeForm(BigInteger integer)", "testcase": false, "constructor": false}], "file": "eddsa/src/main/java/io/moatwel/util/ArrayUtils.java"}, "focal_method": {"identifier": "split", "parameters": "(byte[] bytes, int splitIndex)", "modifiers": "public static", "return": "byte[][]", "body": "public static byte[][] split(byte[] bytes, int splitIndex) {\n        if (splitIndex < 0 || bytes.length < splitIndex) {\n            throw new IllegalArgumentException(\"split index is out of range\");\n        }\n\n        final byte[] lhs = new byte[splitIndex];\n        final byte[] rhs = new byte[bytes.length - splitIndex];\n\n        System.arraycopy(bytes, 0, lhs, 0, lhs.length);\n        System.arraycopy(bytes, splitIndex, rhs, 0, rhs.length);\n        return new byte[][]{lhs, rhs};\n    }", "signature": "byte[][] split(byte[] bytes, int splitIndex)", "full_signature": "public static byte[][] split(byte[] bytes, int splitIndex)", "class_method_signature": "ArrayUtils.split(byte[] bytes, int splitIndex)", "testcase": false, "constructor": false, "invocations": ["arraycopy", "arraycopy"]}, "repository": {"repo_id": 136564461, "url": "https://github.com/halu5071/edwards", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 626, "license": "licensed"}}