{"test_class": {"identifier": "LayerUtilTest", "superclass": "extends BaseTest", "interfaces": "", "fields": [{"original_string": "private Context context;", "modifier": "private", "type": "Context", "declarator": "context", "var_name": "context"}, {"original_string": "private LayerUtil layerUtil;", "modifier": "private", "type": "LayerUtil", "declarator": "layerUtil", "var_name": "layerUtil"}], "file": "library/src/test/java/io/ona/kujaku/utils/LayerUtilTest.java"}, "test_case": {"identifier": "getFloatArray", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getFloatArray() throws JSONException {\n        JSONArray jsonArray = new JSONArray(\"[7, 90, 78, 45, 858, 86, 958]\");\n\n        Float[] result = layerUtil.getFloatArray(jsonArray);\n\n        Assert.assertEquals(7, result.length);\n        Assert.assertEquals(7f, result[0]);\n        Assert.assertEquals(90f, result[1]);\n        Assert.assertEquals(958f, result[6]);\n    }", "signature": "void getFloatArray()", "full_signature": "@Test public void getFloatArray()", "class_method_signature": "LayerUtilTest.getFloatArray()", "testcase": true, "constructor": false, "invocations": ["getFloatArray", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "LayerUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String TYPE = \"type\";", "modifier": "public static final", "type": "String", "declarator": "TYPE = \"type\"", "var_name": "TYPE"}, {"original_string": "public static final String ID = \"id\";", "modifier": "public static final", "type": "String", "declarator": "ID = \"id\"", "var_name": "ID"}, {"original_string": "public static final String SOURCE = \"source\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE = \"source\"", "var_name": "SOURCE"}, {"original_string": "public static final String SOURCE_LAYER = \"source-layer\";", "modifier": "public static final", "type": "String", "declarator": "SOURCE_LAYER = \"source-layer\"", "var_name": "SOURCE_LAYER"}, {"original_string": "public static final String MINZOOM = \"minzoom\";", "modifier": "public static final", "type": "String", "declarator": "MINZOOM = \"minzoom\"", "var_name": "MINZOOM"}, {"original_string": "public static final String MAXZOOM = \"maxzoom\";", "modifier": "public static final", "type": "String", "declarator": "MAXZOOM = \"maxzoom\"", "var_name": "MAXZOOM"}, {"original_string": "public static final String FILTER = \"filter\";", "modifier": "public static final", "type": "String", "declarator": "FILTER = \"filter\"", "var_name": "FILTER"}, {"original_string": "public static final String LAYOUT = \"layout\";", "modifier": "public static final", "type": "String", "declarator": "LAYOUT = \"layout\"", "var_name": "LAYOUT"}, {"original_string": "public static final String PAINT = \"paint\";", "modifier": "public static final", "type": "String", "declarator": "PAINT = \"paint\"", "var_name": "PAINT"}, {"original_string": "public static final String URL = \"url\";", "modifier": "public static final", "type": "String", "declarator": "URL = \"url\"", "var_name": "URL"}], "methods": [{"identifier": "getLayer", "parameters": "(@NonNull String layerJSON)", "modifiers": "@Nullable public", "return": "Layer", "signature": "Layer getLayer(@NonNull String layerJSON)", "full_signature": "@Nullable public Layer getLayer(@NonNull String layerJSON)", "class_method_signature": "LayerUtil.getLayer(@NonNull String layerJSON)", "testcase": false, "constructor": false}, {"identifier": "getFloatArray", "parameters": "(JSONArray jsonArray)", "modifiers": "@VisibleForTesting @NonNull protected", "return": "Float[]", "signature": "Float[] getFloatArray(JSONArray jsonArray)", "full_signature": "@VisibleForTesting @NonNull protected Float[] getFloatArray(JSONArray jsonArray)", "class_method_signature": "LayerUtil.getFloatArray(JSONArray jsonArray)", "testcase": false, "constructor": false}, {"identifier": "isJSONArrayOfNumbers", "parameters": "(@NonNull JSONArray jsonArray)", "modifiers": "private", "return": "boolean", "signature": "boolean isJSONArrayOfNumbers(@NonNull JSONArray jsonArray)", "full_signature": "private boolean isJSONArrayOfNumbers(@NonNull JSONArray jsonArray)", "class_method_signature": "LayerUtil.isJSONArrayOfNumbers(@NonNull JSONArray jsonArray)", "testcase": false, "constructor": false}], "file": "library/src/main/java/io/ona/kujaku/utils/LayerUtil.java"}, "focal_method": {"identifier": "getFloatArray", "parameters": "(JSONArray jsonArray)", "modifiers": "@VisibleForTesting @NonNull protected", "return": "Float[]", "body": "@VisibleForTesting\n    @NonNull\n    protected Float[] getFloatArray(JSONArray jsonArray) throws JSONException {\n        Float[] lineDashArrayValue = new Float[jsonArray.length()];\n\n        for (int i = 0; i < jsonArray.length(); i++) {\n            lineDashArrayValue[i] = Double.valueOf(jsonArray.getDouble(i)).floatValue();\n        }\n\n        return lineDashArrayValue;\n    }", "signature": "Float[] getFloatArray(JSONArray jsonArray)", "full_signature": "@VisibleForTesting @NonNull protected Float[] getFloatArray(JSONArray jsonArray)", "class_method_signature": "LayerUtil.getFloatArray(JSONArray jsonArray)", "testcase": false, "constructor": false, "invocations": ["length", "length", "floatValue", "valueOf", "getDouble"]}, "repository": {"repo_id": 109667968, "url": "https://github.com/onaio/kujaku", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 14, "size": 4778, "license": "licensed"}}