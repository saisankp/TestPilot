{"test_class": {"identifier": "SpelExpressionProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SpelExpressionProcessor spelExpressionProcessor;", "modifier": "private", "type": "SpelExpressionProcessor", "declarator": "spelExpressionProcessor", "var_name": "spelExpressionProcessor"}], "file": "alien4cloud-core/src/test/java/org/alien4cloud/tosca/variable/SpelExpressionProcessorTest.java"}, "test_case": {"identifier": "parse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parse() throws Exception {\n        assertThat(spelExpressionProcessor.process(\"#{ #var1 }\", String.class)).isEqualTo(\"var1 value\");\n        assertThat(spelExpressionProcessor.process(\"#{ #var2 }\", Object.class)).isEqualTo(ImmutableMap.of(\"sub\", \"subvar value\"));\n        assertThat(spelExpressionProcessor.process(\"#{true == true}\", Boolean.class)).isEqualTo(true);\n        assertThat(spelExpressionProcessor.process(\"#{true == false}\", Boolean.class)).isEqualTo(false);\n    }", "signature": "void parse()", "full_signature": "@Test public void parse()", "class_method_signature": "SpelExpressionProcessorTest.parse()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "process", "isEqualTo", "assertThat", "process", "of", "isEqualTo", "assertThat", "process", "isEqualTo", "assertThat", "process"]}, "focal_class": {"identifier": "SpelExpressionProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SpelExpressionParser parser;", "modifier": "private", "type": "SpelExpressionParser", "declarator": "parser", "var_name": "parser"}, {"original_string": "private ParserContext templateContext;", "modifier": "private", "type": "ParserContext", "declarator": "templateContext", "var_name": "templateContext"}, {"original_string": "private EvaluationContext context;", "modifier": "private", "type": "EvaluationContext", "declarator": "context", "var_name": "context"}], "methods": [{"identifier": "SpelExpressionProcessor", "parameters": "(PropertyResolver resolver)", "modifiers": "public", "return": "", "signature": " SpelExpressionProcessor(PropertyResolver resolver)", "full_signature": "public  SpelExpressionProcessor(PropertyResolver resolver)", "class_method_signature": "SpelExpressionProcessor.SpelExpressionProcessor(PropertyResolver resolver)", "testcase": false, "constructor": true}, {"identifier": "process", "parameters": "(String expressionString, Class<T> clazz)", "modifiers": "public", "return": "T", "signature": "T process(String expressionString, Class<T> clazz)", "full_signature": "public T process(String expressionString, Class<T> clazz)", "class_method_signature": "SpelExpressionProcessor.process(String expressionString, Class<T> clazz)", "testcase": false, "constructor": false}], "file": "alien4cloud-core/src/main/java/org/alien4cloud/tosca/variable/SpelExpressionProcessor.java"}, "focal_method": {"identifier": "process", "parameters": "(String expressionString, Class<T> clazz)", "modifiers": "public", "return": "T", "body": "public <T> T process(String expressionString, Class<T> clazz) {\n        if (expressionString == null) {\n            return null;\n        }\n\n        Expression expression = parser.parseExpression(expressionString, templateContext);\n        return expression.getValue(context, clazz);\n    }", "signature": "T process(String expressionString, Class<T> clazz)", "full_signature": "public T process(String expressionString, Class<T> clazz)", "class_method_signature": "SpelExpressionProcessor.process(String expressionString, Class<T> clazz)", "testcase": false, "constructor": false, "invocations": ["parseExpression", "getValue"]}, "repository": {"repo_id": 24750302, "url": "https://github.com/alien4cloud/alien4cloud", "language": "Java", "is_fork": false, "fork_count": 64, "stargazer_count": 67, "size": 27647, "license": "licensed"}}