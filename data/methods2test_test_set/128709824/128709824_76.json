{"test_class": {"identifier": "ProxyFactoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/api/src/test/java/com/alipay/sofa/rpc/proxy/ProxyFactoryTest.java"}, "test_case": {"identifier": "buildProxy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void buildProxy() throws Exception {\n        TestProxyInterface testInterface = ProxyFactory.buildProxy(\"test\", TestProxyInterface.class, null);\n        Assert.assertEquals(testInterface, null);\n\n        boolean error = false;\n        try {\n            ProxyFactory.buildProxy(\"xasdasd\", TestProxyInterface.class, null);\n        } catch (Exception e) {\n            error = true;\n        }\n        Assert.assertTrue(error);\n    }", "signature": "void buildProxy()", "full_signature": "@Test public void buildProxy()", "class_method_signature": "ProxyFactoryTest.buildProxy()", "testcase": true, "constructor": false, "invocations": ["buildProxy", "assertEquals", "buildProxy", "assertTrue"]}, "focal_class": {"identifier": "ProxyFactory", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "buildProxy", "parameters": "(String proxyType, Class<T> clazz, Invoker proxyInvoker)", "modifiers": "public static", "return": "T", "signature": "T buildProxy(String proxyType, Class<T> clazz, Invoker proxyInvoker)", "full_signature": "public static T buildProxy(String proxyType, Class<T> clazz, Invoker proxyInvoker)", "class_method_signature": "ProxyFactory.buildProxy(String proxyType, Class<T> clazz, Invoker proxyInvoker)", "testcase": false, "constructor": false}, {"identifier": "getInvoker", "parameters": "(Object proxyObject, String proxyType)", "modifiers": "public static", "return": "Invoker", "signature": "Invoker getInvoker(Object proxyObject, String proxyType)", "full_signature": "public static Invoker getInvoker(Object proxyObject, String proxyType)", "class_method_signature": "ProxyFactory.getInvoker(Object proxyObject, String proxyType)", "testcase": false, "constructor": false}], "file": "core/api/src/main/java/com/alipay/sofa/rpc/proxy/ProxyFactory.java"}, "focal_method": {"identifier": "buildProxy", "parameters": "(String proxyType, Class<T> clazz, Invoker proxyInvoker)", "modifiers": "public static", "return": "T", "body": "public static <T> T buildProxy(String proxyType, Class<T> clazz, Invoker proxyInvoker) throws Exception {\n        try {\n            ExtensionClass<Proxy> ext = ExtensionLoaderFactory.getExtensionLoader(Proxy.class)\n                .getExtensionClass(proxyType);\n            if (ext == null) {\n                throw new SofaRpcRuntimeException(LogCodes.getLog(LogCodes.ERROR_LOAD_EXT, \"Proxy\", proxyType));\n            }\n            Proxy proxy = ext.getExtInstance();\n            return proxy.getProxy(clazz, proxyInvoker);\n        } catch (SofaRpcRuntimeException e) {\n            throw e;\n        } catch (Throwable e) {\n            throw new SofaRpcRuntimeException(LogCodes.getLog(LogCodes.ERROR_LOAD_EXT, \"Proxy\", proxyType), e);\n        }\n    }", "signature": "T buildProxy(String proxyType, Class<T> clazz, Invoker proxyInvoker)", "full_signature": "public static T buildProxy(String proxyType, Class<T> clazz, Invoker proxyInvoker)", "class_method_signature": "ProxyFactory.buildProxy(String proxyType, Class<T> clazz, Invoker proxyInvoker)", "testcase": false, "constructor": false, "invocations": ["getExtensionClass", "getExtensionLoader", "getLog", "getExtInstance", "getProxy", "getLog"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}