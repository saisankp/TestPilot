{"test_class": {"identifier": "MongoQueryTranslatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final PropertyResolver resolver = new MorphiaPropertyResolver();", "modifier": "private final", "type": "PropertyResolver", "declarator": "resolver = new MorphiaPropertyResolver()", "var_name": "resolver"}, {"original_string": "private final MongoQueryTranslator translator = new MongoQueryTranslator(resolver);", "modifier": "private final", "type": "MongoQueryTranslator", "declarator": "translator = new MongoQueryTranslator(resolver)", "var_name": "translator"}, {"original_string": "private final String property = \"propertyName\";", "modifier": "private final", "type": "String", "declarator": "property = \"propertyName\"", "var_name": "property"}, {"original_string": "private final String value = \"test property value\";", "modifier": "private final", "type": "String", "declarator": "value = \"test property value\"", "var_name": "value"}, {"original_string": "private final Integer from = 1;", "modifier": "private final", "type": "Integer", "declarator": "from = 1", "var_name": "from"}, {"original_string": "private final Integer to = 10;", "modifier": "private final", "type": "Integer", "declarator": "to = 10", "var_name": "to"}, {"original_string": "private final String[] values = { \"test\", \"value\", \"array\" };", "modifier": "private final", "type": "String[]", "declarator": "values = { \"test\", \"value\", \"array\" }", "var_name": "values"}, {"original_string": "private final double x = 1.0;", "modifier": "private final", "type": "double", "declarator": "x = 1.0", "var_name": "x"}, {"original_string": "private final double y = 2.0;", "modifier": "private final", "type": "double", "declarator": "y = 2.0", "var_name": "y"}, {"original_string": "private final double distance = 3.5;", "modifier": "private final", "type": "double", "declarator": "distance = 3.5", "var_name": "distance"}], "file": "seeking-mongo/src/test/java/com/eharmony/matching/seeking/translator/mongodb/MongoQueryTranslatorTest.java"}, "test_case": {"identifier": "contains", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void contains() {\n        Set<DBObject> objects = set(values.length);\n        for (Object value : values) {\n            objects.add(o(property, value));\n        }\n        assertEquals(o(MongoOperator.AND, objects), \n                translator.contains(property, values));\n    }", "signature": "void contains()", "full_signature": "@Test public void contains()", "class_method_signature": "MongoQueryTranslatorTest.contains()", "testcase": true, "constructor": false, "invocations": ["set", "add", "o", "assertEquals", "o", "contains"]}, "focal_class": {"identifier": "MongoQueryTranslator", "superclass": "extends\n        AbstractQueryTranslator<DBObject, DBObject, DBObject>", "interfaces": "implements\n        QueryTranslator<DBObject, DBObject, DBObject>", "fields": [], "methods": [{"identifier": "MongoQueryTranslator", "parameters": "(PropertyResolver propertyResolver)", "modifiers": "public", "return": "", "signature": " MongoQueryTranslator(PropertyResolver propertyResolver)", "full_signature": "public  MongoQueryTranslator(PropertyResolver propertyResolver)", "class_method_signature": "MongoQueryTranslator.MongoQueryTranslator(PropertyResolver propertyResolver)", "testcase": false, "constructor": true}, {"identifier": "object", "parameters": "()", "modifiers": "protected", "return": "DBObject", "signature": "DBObject object()", "full_signature": "protected DBObject object()", "class_method_signature": "MongoQueryTranslator.object()", "testcase": false, "constructor": false}, {"identifier": "object", "parameters": "(String key, Object value)", "modifiers": "protected", "return": "DBObject", "signature": "DBObject object(String key, Object value)", "full_signature": "protected DBObject object(String key, Object value)", "class_method_signature": "MongoQueryTranslator.object(String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "object", "parameters": "(MongoOperator operator, Object value)", "modifiers": "protected", "return": "DBObject", "signature": "DBObject object(MongoOperator operator, Object value)", "full_signature": "protected DBObject object(MongoOperator operator, Object value)", "class_method_signature": "MongoQueryTranslator.object(MongoOperator operator, Object value)", "testcase": false, "constructor": false}, {"identifier": "set", "parameters": "(E... elements)", "modifiers": "protected static", "return": "LinkedHashSet<E>", "signature": "LinkedHashSet<E> set(E... elements)", "full_signature": "protected static LinkedHashSet<E> set(E... elements)", "class_method_signature": "MongoQueryTranslator.set(E... elements)", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "(Object... elements)", "modifiers": "protected static", "return": "List<Object>", "signature": "List<Object> list(Object... elements)", "full_signature": "protected static List<Object> list(Object... elements)", "class_method_signature": "MongoQueryTranslator.list(Object... elements)", "testcase": false, "constructor": false}, {"identifier": "merge", "parameters": "(DBObject[] queries)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "DBObject", "signature": "DBObject merge(DBObject[] queries)", "full_signature": "@SuppressWarnings(\"unchecked\") protected DBObject merge(DBObject[] queries)", "class_method_signature": "MongoQueryTranslator.merge(DBObject[] queries)", "testcase": false, "constructor": false}, {"identifier": "multimap", "parameters": "(DBObject[] objects)", "modifiers": "private", "return": "Multimap<String, DBObject>", "signature": "Multimap<String, DBObject> multimap(DBObject[] objects)", "full_signature": "private Multimap<String, DBObject> multimap(DBObject[] objects)", "class_method_signature": "MongoQueryTranslator.multimap(DBObject[] objects)", "testcase": false, "constructor": false}, {"identifier": "translate", "parameters": "(NativeExpression e, Class<T> entityClass)", "modifiers": "@Override protected", "return": "DBObject", "signature": "DBObject translate(NativeExpression e, Class<T> entityClass)", "full_signature": "@Override protected DBObject translate(NativeExpression e, Class<T> entityClass)", "class_method_signature": "MongoQueryTranslator.translate(NativeExpression e, Class<T> entityClass)", "testcase": false, "constructor": false}, {"identifier": "eq", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "DBObject", "signature": "DBObject eq(String fieldName, Object value)", "full_signature": "@Override public DBObject eq(String fieldName, Object value)", "class_method_signature": "MongoQueryTranslator.eq(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "ne", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "DBObject", "signature": "DBObject ne(String fieldName, Object value)", "full_signature": "@Override public DBObject ne(String fieldName, Object value)", "class_method_signature": "MongoQueryTranslator.ne(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "lt", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "DBObject", "signature": "DBObject lt(String fieldName, Object value)", "full_signature": "@Override public DBObject lt(String fieldName, Object value)", "class_method_signature": "MongoQueryTranslator.lt(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "lte", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "DBObject", "signature": "DBObject lte(String fieldName, Object value)", "full_signature": "@Override public DBObject lte(String fieldName, Object value)", "class_method_signature": "MongoQueryTranslator.lte(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "gt", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "DBObject", "signature": "DBObject gt(String fieldName, Object value)", "full_signature": "@Override public DBObject gt(String fieldName, Object value)", "class_method_signature": "MongoQueryTranslator.gt(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "gte", "parameters": "(String fieldName, Object value)", "modifiers": "@Override public", "return": "DBObject", "signature": "DBObject gte(String fieldName, Object value)", "full_signature": "@Override public DBObject gte(String fieldName, Object value)", "class_method_signature": "MongoQueryTranslator.gte(String fieldName, Object value)", "testcase": false, "constructor": false}, {"identifier": "between", "parameters": "(String fieldName, Object from, Object to)", "modifiers": "@Override public", "return": "DBObject", "signature": "DBObject between(String fieldName, Object from, Object to)", "full_signature": "@Override public DBObject between(String fieldName, Object from, Object to)", "class_method_signature": "MongoQueryTranslator.between(String fieldName, Object from, Object to)", "testcase": false, "constructor": false}, {"identifier": "in", "parameters": "(String fieldName, Object[] values)", "modifiers": "@Override public", "return": "DBObject", "signature": "DBObject in(String fieldName, Object[] values)", "full_signature": "@Override public DBObject in(String fieldName, Object[] values)", "class_method_signature": "MongoQueryTranslator.in(String fieldName, Object[] values)", "testcase": false, "constructor": false}, {"identifier": "notIn", "parameters": "(String fieldName, Object[] values)", "modifiers": "@Override public", "return": "DBObject", "signature": "DBObject notIn(String fieldName, Object[] values)", "full_signature": "@Override public DBObject notIn(String fieldName, Object[] values)", "class_method_signature": "MongoQueryTranslator.notIn(String fieldName, Object[] values)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(String fieldName, Object[] values)", "modifiers": "@Override public", "return": "DBObject", "signature": "DBObject contains(String fieldName, Object[] values)", "full_signature": "@Override public DBObject contains(String fieldName, Object[] values)", "class_method_signature": "MongoQueryTranslator.contains(String fieldName, Object[] values)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(String fieldName, boolean exists)", "modifiers": "protected", "return": "DBObject", "signature": "DBObject exists(String fieldName, boolean exists)", "full_signature": "protected DBObject exists(String fieldName, boolean exists)", "class_method_signature": "MongoQueryTranslator.exists(String fieldName, boolean exists)", "testcase": false, "constructor": false}, {"identifier": "isNull", "parameters": "(String fieldName)", "modifiers": "@Override public", "return": "DBObject", "signature": "DBObject isNull(String fieldName)", "full_signature": "@Override public DBObject isNull(String fieldName)", "class_method_signature": "MongoQueryTranslator.isNull(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "notNull", "parameters": "(String fieldName)", "modifiers": "@Override public", "return": "DBObject", "signature": "DBObject notNull(String fieldName)", "full_signature": "@Override public DBObject notNull(String fieldName)", "class_method_signature": "MongoQueryTranslator.notNull(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "isEmpty", "parameters": "(String fieldName)", "modifiers": "@Override public", "return": "DBObject", "signature": "DBObject isEmpty(String fieldName)", "full_signature": "@Override public DBObject isEmpty(String fieldName)", "class_method_signature": "MongoQueryTranslator.isEmpty(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "notEmpty", "parameters": "(String fieldName)", "modifiers": "@Override public", "return": "DBObject", "signature": "DBObject notEmpty(String fieldName)", "full_signature": "@Override public DBObject notEmpty(String fieldName)", "class_method_signature": "MongoQueryTranslator.notEmpty(String fieldName)", "testcase": false, "constructor": false}, {"identifier": "within", "parameters": "(String fieldName,\n            Point<N> center, Number distance)", "modifiers": "@Override public", "return": "DBObject", "signature": "DBObject within(String fieldName,\n            Point<N> center, Number distance)", "full_signature": "@Override public DBObject within(String fieldName,\n            Point<N> center, Number distance)", "class_method_signature": "MongoQueryTranslator.within(String fieldName,\n            Point<N> center, Number distance)", "testcase": false, "constructor": false}, {"identifier": "and", "parameters": "(DBObject... subqueries)", "modifiers": "@Override public", "return": "DBObject", "signature": "DBObject and(DBObject... subqueries)", "full_signature": "@Override public DBObject and(DBObject... subqueries)", "class_method_signature": "MongoQueryTranslator.and(DBObject... subqueries)", "testcase": false, "constructor": false}, {"identifier": "or", "parameters": "(DBObject... subqueries)", "modifiers": "@Override public", "return": "DBObject", "signature": "DBObject or(DBObject... subqueries)", "full_signature": "@Override public DBObject or(DBObject... subqueries)", "class_method_signature": "MongoQueryTranslator.or(DBObject... subqueries)", "testcase": false, "constructor": false}, {"identifier": "order", "parameters": "(String fieldName, Order o)", "modifiers": "@Override public", "return": "DBObject", "signature": "DBObject order(String fieldName, Order o)", "full_signature": "@Override public DBObject order(String fieldName, Order o)", "class_method_signature": "MongoQueryTranslator.order(String fieldName, Order o)", "testcase": false, "constructor": false}, {"identifier": "order", "parameters": "(DBObject... orders)", "modifiers": "@Override public", "return": "DBObject", "signature": "DBObject order(DBObject... orders)", "full_signature": "@Override public DBObject order(DBObject... orders)", "class_method_signature": "MongoQueryTranslator.order(DBObject... orders)", "testcase": false, "constructor": false}, {"identifier": "translateProjection", "parameters": "(Query<T, R> query)", "modifiers": "@Override public", "return": "DBObject", "signature": "DBObject translateProjection(Query<T, R> query)", "full_signature": "@Override public DBObject translateProjection(Query<T, R> query)", "class_method_signature": "MongoQueryTranslator.translateProjection(Query<T, R> query)", "testcase": false, "constructor": false}], "file": "seeking-mongo/src/main/java/com/eharmony/matching/seeking/translator/mongodb/MongoQueryTranslator.java"}, "focal_method": {"identifier": "contains", "parameters": "(String fieldName, Object[] values)", "modifiers": "@Override public", "return": "DBObject", "body": "@Override\n    public DBObject contains(String fieldName, Object[] values) {\n        int n = values.length;\n        if (n == 1) {\n            return eq(fieldName, values[0]);\n        } else {\n            DBObject[] conditions = new DBObject[n];\n            for (int i = 0; i < n; i++) {\n                conditions[i] = eq(fieldName, values[i]);\n            }\n            return and(conditions);\n        }\n    }", "signature": "DBObject contains(String fieldName, Object[] values)", "full_signature": "@Override public DBObject contains(String fieldName, Object[] values)", "class_method_signature": "MongoQueryTranslator.contains(String fieldName, Object[] values)", "testcase": false, "constructor": false, "invocations": ["eq", "eq", "and"]}, "repository": {"repo_id": 9248683, "url": "https://github.com/eHarmony/seeking", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 7, "size": 194, "license": "licensed"}}