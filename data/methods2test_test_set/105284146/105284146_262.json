{"test_class": {"identifier": "DanglingLineAdapterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException thrown = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "thrown = ExpectedException.none()", "var_name": "thrown"}, {"original_string": "private MergingView mergingView;", "modifier": "private", "type": "MergingView", "declarator": "mergingView", "var_name": "mergingView"}, {"original_string": "private Network noEquipNetwork;", "modifier": "private", "type": "Network", "declarator": "noEquipNetwork", "var_name": "noEquipNetwork"}], "file": "iidm/iidm-mergingview/src/test/java/com/powsybl/iidm/mergingview/DanglingLineAdapterTest.java"}, "test_case": {"identifier": "testProperties", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProperties() {\n        final DanglingLine dl1 = createDanglingLine(noEquipNetwork, \"vl1\", \"dl1\", \"dl\", 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, \"code\", \"busA\");\n        dl1.setProperty(\"ucteCode\", dl1.getUcteXnodeCode()); // test equals property\n        dl1.setProperty(\"id\", dl1.getId()); // test not equals property\n        dl1.setProperty(\"network\", \"noEquipNetwork\"); // test empty property\n        dl1.setProperty(\"vl\", \"\"); // test empty property\n\n        final DanglingLine dl2 = createDanglingLine(noEquipNetwork, \"vl2\", \"dl2\", \"dl\", 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, \"code\", \"busB\");\n        dl2.setProperty(\"ucteCode\", dl2.getUcteXnodeCode()); // test equals property\n        dl2.setProperty(\"id\", dl2.getId()); // test not equals property\n        dl2.setProperty(\"network\", \"\"); // test empty property\n        dl2.setProperty(\"vl\", \"vl2\"); // test empty property\n\n        mergingView.merge(noEquipNetwork);\n        final Line line = mergingView.getLine(\"dl1 + dl2\");\n        final MergedLine mergedLine = (MergedLine) line;\n        assertEquals(\"dl\", mergedLine.getOptionalName().orElse(null));\n        assertEquals(\"dl\", mergedLine.getNameOrId());\n\n        assertTrue(mergedLine.hasProperty());\n        assertTrue(mergedLine.hasProperty(\"ucteCode\"));\n        assertEquals(3, mergedLine.getPropertyNames().size());\n        mergedLine.setProperty(\"key\", \"value\");\n        assertEquals(\"value\", mergedLine.getProperty(\"key\"));\n        assertEquals(\"defaultValue\", mergedLine.getProperty(\"noKey\", \"defaultValue\"));\n    }", "signature": "void testProperties()", "full_signature": "@Test public void testProperties()", "class_method_signature": "DanglingLineAdapterTest.testProperties()", "testcase": true, "constructor": false, "invocations": ["createDanglingLine", "setProperty", "getUcteXnodeCode", "setProperty", "getId", "setProperty", "setProperty", "createDanglingLine", "setProperty", "getUcteXnodeCode", "setProperty", "getId", "setProperty", "setProperty", "merge", "getLine", "assertEquals", "orElse", "getOptionalName", "assertEquals", "getNameOrId", "assertTrue", "hasProperty", "assertTrue", "hasProperty", "assertEquals", "size", "getPropertyNames", "setProperty", "assertEquals", "getProperty", "assertEquals", "getProperty"]}, "focal_class": {"identifier": "DanglingLineAdapter", "superclass": "extends AbstractInjectionAdapter<DanglingLine>", "interfaces": "implements DanglingLine", "fields": [], "methods": [{"identifier": "DanglingLineAdapter", "parameters": "(final DanglingLine delegate, final MergingViewIndex index)", "modifiers": "", "return": "", "signature": " DanglingLineAdapter(final DanglingLine delegate, final MergingViewIndex index)", "full_signature": "  DanglingLineAdapter(final DanglingLine delegate, final MergingViewIndex index)", "class_method_signature": "DanglingLineAdapter.DanglingLineAdapter(final DanglingLine delegate, final MergingViewIndex index)", "testcase": false, "constructor": true}, {"identifier": "getP0", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getP0()", "full_signature": "@Override public double getP0()", "class_method_signature": "DanglingLineAdapter.getP0()", "testcase": false, "constructor": false}, {"identifier": "setP0", "parameters": "(final double p0)", "modifiers": "@Override public", "return": "DanglingLine", "signature": "DanglingLine setP0(final double p0)", "full_signature": "@Override public DanglingLine setP0(final double p0)", "class_method_signature": "DanglingLineAdapter.setP0(final double p0)", "testcase": false, "constructor": false}, {"identifier": "getQ0", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getQ0()", "full_signature": "@Override public double getQ0()", "class_method_signature": "DanglingLineAdapter.getQ0()", "testcase": false, "constructor": false}, {"identifier": "setQ0", "parameters": "(final double q0)", "modifiers": "@Override public", "return": "DanglingLine", "signature": "DanglingLine setQ0(final double q0)", "full_signature": "@Override public DanglingLine setQ0(final double q0)", "class_method_signature": "DanglingLineAdapter.setQ0(final double q0)", "testcase": false, "constructor": false}, {"identifier": "getR", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getR()", "full_signature": "@Override public double getR()", "class_method_signature": "DanglingLineAdapter.getR()", "testcase": false, "constructor": false}, {"identifier": "setR", "parameters": "(final double r)", "modifiers": "@Override public", "return": "DanglingLine", "signature": "DanglingLine setR(final double r)", "full_signature": "@Override public DanglingLine setR(final double r)", "class_method_signature": "DanglingLineAdapter.setR(final double r)", "testcase": false, "constructor": false}, {"identifier": "getX", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getX()", "full_signature": "@Override public double getX()", "class_method_signature": "DanglingLineAdapter.getX()", "testcase": false, "constructor": false}, {"identifier": "setX", "parameters": "(final double x)", "modifiers": "@Override public", "return": "DanglingLine", "signature": "DanglingLine setX(final double x)", "full_signature": "@Override public DanglingLine setX(final double x)", "class_method_signature": "DanglingLineAdapter.setX(final double x)", "testcase": false, "constructor": false}, {"identifier": "getG", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getG()", "full_signature": "@Override public double getG()", "class_method_signature": "DanglingLineAdapter.getG()", "testcase": false, "constructor": false}, {"identifier": "setG", "parameters": "(final double g)", "modifiers": "@Override public", "return": "DanglingLine", "signature": "DanglingLine setG(final double g)", "full_signature": "@Override public DanglingLine setG(final double g)", "class_method_signature": "DanglingLineAdapter.setG(final double g)", "testcase": false, "constructor": false}, {"identifier": "getB", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double getB()", "full_signature": "@Override public double getB()", "class_method_signature": "DanglingLineAdapter.getB()", "testcase": false, "constructor": false}, {"identifier": "setB", "parameters": "(final double b)", "modifiers": "@Override public", "return": "DanglingLine", "signature": "DanglingLine setB(final double b)", "full_signature": "@Override public DanglingLine setB(final double b)", "class_method_signature": "DanglingLineAdapter.setB(final double b)", "testcase": false, "constructor": false}, {"identifier": "getGeneration", "parameters": "()", "modifiers": "@Override public", "return": "Generation", "signature": "Generation getGeneration()", "full_signature": "@Override public Generation getGeneration()", "class_method_signature": "DanglingLineAdapter.getGeneration()", "testcase": false, "constructor": false}, {"identifier": "getUcteXnodeCode", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getUcteXnodeCode()", "full_signature": "@Override public String getUcteXnodeCode()", "class_method_signature": "DanglingLineAdapter.getUcteXnodeCode()", "testcase": false, "constructor": false}, {"identifier": "getCurrentLimits", "parameters": "()", "modifiers": "@Override public", "return": "CurrentLimits", "signature": "CurrentLimits getCurrentLimits()", "full_signature": "@Override public CurrentLimits getCurrentLimits()", "class_method_signature": "DanglingLineAdapter.getCurrentLimits()", "testcase": false, "constructor": false}, {"identifier": "newCurrentLimits", "parameters": "()", "modifiers": "@Override public", "return": "CurrentLimitsAdder", "signature": "CurrentLimitsAdder newCurrentLimits()", "full_signature": "@Override public CurrentLimitsAdder newCurrentLimits()", "class_method_signature": "DanglingLineAdapter.newCurrentLimits()", "testcase": false, "constructor": false}], "file": "iidm/iidm-mergingview/src/main/java/com/powsybl/iidm/mergingview/DanglingLineAdapter.java"}, "focal_method": {"identifier": "getUcteXnodeCode", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getUcteXnodeCode() {\n        return getDelegate().getUcteXnodeCode();\n    }", "signature": "String getUcteXnodeCode()", "full_signature": "@Override public String getUcteXnodeCode()", "class_method_signature": "DanglingLineAdapter.getUcteXnodeCode()", "testcase": false, "constructor": false, "invocations": ["getUcteXnodeCode", "getDelegate"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}