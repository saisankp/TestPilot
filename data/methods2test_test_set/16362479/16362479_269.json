{"test_class": {"identifier": "FollowerTest", "superclass": "extends AbstractRaftActorBehaviorTest<Follower>", "interfaces": "", "fields": [{"original_string": "private final ActorRef followerActor = actorFactory.createActor(\n            MessageCollectorActor.props(), actorFactory.generateActorId(\"follower\"));", "modifier": "private final", "type": "ActorRef", "declarator": "followerActor = actorFactory.createActor(\n            MessageCollectorActor.props(), actorFactory.generateActorId(\"follower\"))", "var_name": "followerActor"}, {"original_string": "private final ActorRef leaderActor = actorFactory.createActor(\n            MessageCollectorActor.props(), actorFactory.generateActorId(\"leader\"));", "modifier": "private final", "type": "ActorRef", "declarator": "leaderActor = actorFactory.createActor(\n            MessageCollectorActor.props(), actorFactory.generateActorId(\"leader\"))", "var_name": "leaderActor"}, {"original_string": "private Follower follower;", "modifier": "private", "type": "Follower", "declarator": "follower", "var_name": "follower"}, {"original_string": "private final short payloadVersion = 5;", "modifier": "private final", "type": "short", "declarator": "payloadVersion = 5", "var_name": "payloadVersion"}], "file": "opendaylight/md-sal/sal-akka-raft/src/test/java/org/opendaylight/controller/cluster/raft/behaviors/FollowerTest.java"}, "test_case": {"identifier": "testHandleInstallSnapshot", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testHandleInstallSnapshot() {\n        logStart(\"testHandleInstallSnapshot\");\n\n        MockRaftActorContext context = createActorContext();\n        context.getTermInformation().update(1, \"leader\");\n\n        follower = createBehavior(context);\n\n        ByteString bsSnapshot = createSnapshot();\n        int offset = 0;\n        int snapshotLength = bsSnapshot.size();\n        int chunkSize = 50;\n        int totalChunks = snapshotLength / chunkSize + (snapshotLength % chunkSize > 0 ? 1 : 0);\n        int lastIncludedIndex = 1;\n        int chunkIndex = 1;\n        InstallSnapshot lastInstallSnapshot = null;\n\n        for (int i = 0; i < totalChunks; i++) {\n            byte[] chunkData = getNextChunk(bsSnapshot, offset, chunkSize);\n            lastInstallSnapshot = new InstallSnapshot(1, \"leader\", lastIncludedIndex, 1,\n                    chunkData, chunkIndex, totalChunks);\n            follower.handleMessage(leaderActor, lastInstallSnapshot);\n            offset = offset + 50;\n            lastIncludedIndex++;\n            chunkIndex++;\n        }\n\n        ApplySnapshot applySnapshot = MessageCollectorActor.expectFirstMatching(followerActor,\n                ApplySnapshot.class);\n        Snapshot snapshot = applySnapshot.getSnapshot();\n        assertNotNull(lastInstallSnapshot);\n        assertEquals(\"getLastIndex\", lastInstallSnapshot.getLastIncludedIndex(), snapshot.getLastIndex());\n        assertEquals(\"getLastIncludedTerm\", lastInstallSnapshot.getLastIncludedTerm(),\n                snapshot.getLastAppliedTerm());\n        assertEquals(\"getLastAppliedIndex\", lastInstallSnapshot.getLastIncludedIndex(),\n                snapshot.getLastAppliedIndex());\n        assertEquals(\"getLastTerm\", lastInstallSnapshot.getLastIncludedTerm(), snapshot.getLastTerm());\n        assertEquals(\"getState type\", ByteState.class, snapshot.getState().getClass());\n        Assert.assertArrayEquals(\"getState\", bsSnapshot.toByteArray(), ((ByteState)snapshot.getState()).getBytes());\n        assertEquals(\"getElectionTerm\", 1, snapshot.getElectionTerm());\n        assertEquals(\"getElectionVotedFor\", \"leader\", snapshot.getElectionVotedFor());\n        applySnapshot.getCallback().onSuccess();\n\n        List<InstallSnapshotReply> replies = MessageCollectorActor.getAllMatching(\n                leaderActor, InstallSnapshotReply.class);\n        assertEquals(\"InstallSnapshotReply count\", totalChunks, replies.size());\n\n        chunkIndex = 1;\n        for (InstallSnapshotReply reply: replies) {\n            assertEquals(\"getChunkIndex\", chunkIndex++, reply.getChunkIndex());\n            assertEquals(\"getTerm\", 1, reply.getTerm());\n            assertEquals(\"isSuccess\", true, reply.isSuccess());\n            assertEquals(\"getFollowerId\", context.getId(), reply.getFollowerId());\n        }\n\n        assertNull(\"Expected null SnapshotTracker\", follower.getSnapshotTracker());\n    }", "signature": "void testHandleInstallSnapshot()", "full_signature": "@Test public void testHandleInstallSnapshot()", "class_method_signature": "FollowerTest.testHandleInstallSnapshot()", "testcase": true, "constructor": false, "invocations": ["logStart", "createActorContext", "update", "getTermInformation", "createBehavior", "createSnapshot", "size", "getNextChunk", "handleMessage", "expectFirstMatching", "getSnapshot", "assertNotNull", "assertEquals", "getLastIncludedIndex", "getLastIndex", "assertEquals", "getLastIncludedTerm", "getLastAppliedTerm", "assertEquals", "getLastIncludedIndex", "getLastAppliedIndex", "assertEquals", "getLastIncludedTerm", "getLastTerm", "assertEquals", "getClass", "getState", "assertArrayEquals", "toByteArray", "getBytes", "getState", "assertEquals", "getElectionTerm", "assertEquals", "getElectionVotedFor", "onSuccess", "getCallback", "getAllMatching", "assertEquals", "size", "assertEquals", "getChunkIndex", "assertEquals", "getTerm", "assertEquals", "isSuccess", "assertEquals", "getId", "getFollowerId", "assertNull", "getSnapshotTracker"]}, "focal_class": {"identifier": "Follower", "superclass": "extends AbstractRaftActorBehavior", "interfaces": "", "fields": [{"original_string": "private static final long MAX_ELECTION_TIMEOUT_FACTOR = 18;", "modifier": "private static final", "type": "long", "declarator": "MAX_ELECTION_TIMEOUT_FACTOR = 18", "var_name": "MAX_ELECTION_TIMEOUT_FACTOR"}, {"original_string": "private final SyncStatusTracker initialSyncStatusTracker;", "modifier": "private final", "type": "SyncStatusTracker", "declarator": "initialSyncStatusTracker", "var_name": "initialSyncStatusTracker"}, {"original_string": "private final MessageAssembler appendEntriesMessageAssembler;", "modifier": "private final", "type": "MessageAssembler", "declarator": "appendEntriesMessageAssembler", "var_name": "appendEntriesMessageAssembler"}, {"original_string": "private final Stopwatch lastLeaderMessageTimer = Stopwatch.createStarted();", "modifier": "private final", "type": "Stopwatch", "declarator": "lastLeaderMessageTimer = Stopwatch.createStarted()", "var_name": "lastLeaderMessageTimer"}, {"original_string": "private SnapshotTracker snapshotTracker = null;", "modifier": "private", "type": "SnapshotTracker", "declarator": "snapshotTracker = null", "var_name": "snapshotTracker"}, {"original_string": "private String leaderId;", "modifier": "private", "type": "String", "declarator": "leaderId", "var_name": "leaderId"}, {"original_string": "private short leaderPayloadVersion;", "modifier": "private", "type": "short", "declarator": "leaderPayloadVersion", "var_name": "leaderPayloadVersion"}], "methods": [{"identifier": "Follower", "parameters": "(final RaftActorContext context)", "modifiers": "public", "return": "", "signature": " Follower(final RaftActorContext context)", "full_signature": "public  Follower(final RaftActorContext context)", "class_method_signature": "Follower.Follower(final RaftActorContext context)", "testcase": false, "constructor": true}, {"identifier": "Follower", "parameters": "(final RaftActorContext context, final String initialLeaderId,\n            final short initialLeaderPayloadVersion)", "modifiers": "public", "return": "", "signature": " Follower(final RaftActorContext context, final String initialLeaderId,\n            final short initialLeaderPayloadVersion)", "full_signature": "public  Follower(final RaftActorContext context, final String initialLeaderId,\n            final short initialLeaderPayloadVersion)", "class_method_signature": "Follower.Follower(final RaftActorContext context, final String initialLeaderId,\n            final short initialLeaderPayloadVersion)", "testcase": false, "constructor": true}, {"identifier": "getLeaderId", "parameters": "()", "modifiers": "@Override public final", "return": "String", "signature": "String getLeaderId()", "full_signature": "@Override public final String getLeaderId()", "class_method_signature": "Follower.getLeaderId()", "testcase": false, "constructor": false}, {"identifier": "setLeaderId", "parameters": "(final @Nullable String leaderId)", "modifiers": "@VisibleForTesting protected final", "return": "void", "signature": "void setLeaderId(final @Nullable String leaderId)", "full_signature": "@VisibleForTesting protected final void setLeaderId(final @Nullable String leaderId)", "class_method_signature": "Follower.setLeaderId(final @Nullable String leaderId)", "testcase": false, "constructor": false}, {"identifier": "getLeaderPayloadVersion", "parameters": "()", "modifiers": "@Override public", "return": "short", "signature": "short getLeaderPayloadVersion()", "full_signature": "@Override public short getLeaderPayloadVersion()", "class_method_signature": "Follower.getLeaderPayloadVersion()", "testcase": false, "constructor": false}, {"identifier": "setLeaderPayloadVersion", "parameters": "(final short leaderPayloadVersion)", "modifiers": "@VisibleForTesting protected final", "return": "void", "signature": "void setLeaderPayloadVersion(final short leaderPayloadVersion)", "full_signature": "@VisibleForTesting protected final void setLeaderPayloadVersion(final short leaderPayloadVersion)", "class_method_signature": "Follower.setLeaderPayloadVersion(final short leaderPayloadVersion)", "testcase": false, "constructor": false}, {"identifier": "restartLastLeaderMessageTimer", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void restartLastLeaderMessageTimer()", "full_signature": "private void restartLastLeaderMessageTimer()", "class_method_signature": "Follower.restartLastLeaderMessageTimer()", "testcase": false, "constructor": false}, {"identifier": "isLogEntryPresent", "parameters": "(final long index)", "modifiers": "private", "return": "boolean", "signature": "boolean isLogEntryPresent(final long index)", "full_signature": "private boolean isLogEntryPresent(final long index)", "class_method_signature": "Follower.isLogEntryPresent(final long index)", "testcase": false, "constructor": false}, {"identifier": "updateInitialSyncStatus", "parameters": "(final long currentLeaderCommit, final String newLeaderId)", "modifiers": "private", "return": "void", "signature": "void updateInitialSyncStatus(final long currentLeaderCommit, final String newLeaderId)", "full_signature": "private void updateInitialSyncStatus(final long currentLeaderCommit, final String newLeaderId)", "class_method_signature": "Follower.updateInitialSyncStatus(final long currentLeaderCommit, final String newLeaderId)", "testcase": false, "constructor": false}, {"identifier": "handleAppendEntries", "parameters": "(final ActorRef sender, final AppendEntries appendEntries)", "modifiers": "@Override protected", "return": "RaftActorBehavior", "signature": "RaftActorBehavior handleAppendEntries(final ActorRef sender, final AppendEntries appendEntries)", "full_signature": "@Override protected RaftActorBehavior handleAppendEntries(final ActorRef sender, final AppendEntries appendEntries)", "class_method_signature": "Follower.handleAppendEntries(final ActorRef sender, final AppendEntries appendEntries)", "testcase": false, "constructor": false}, {"identifier": "processNewEntries", "parameters": "(final AppendEntries appendEntries, final ActorRef sender)", "modifiers": "private", "return": "boolean", "signature": "boolean processNewEntries(final AppendEntries appendEntries, final ActorRef sender)", "full_signature": "private boolean processNewEntries(final AppendEntries appendEntries, final ActorRef sender)", "class_method_signature": "Follower.processNewEntries(final AppendEntries appendEntries, final ActorRef sender)", "testcase": false, "constructor": false}, {"identifier": "isOutOfSync", "parameters": "(final AppendEntries appendEntries, final ActorRef sender)", "modifiers": "private", "return": "boolean", "signature": "boolean isOutOfSync(final AppendEntries appendEntries, final ActorRef sender)", "full_signature": "private boolean isOutOfSync(final AppendEntries appendEntries, final ActorRef sender)", "class_method_signature": "Follower.isOutOfSync(final AppendEntries appendEntries, final ActorRef sender)", "testcase": false, "constructor": false}, {"identifier": "sendOutOfSyncAppendEntriesReply", "parameters": "(final ActorRef sender, final boolean forceInstallSnapshot,\n            final short leaderRaftVersion)", "modifiers": "private", "return": "void", "signature": "void sendOutOfSyncAppendEntriesReply(final ActorRef sender, final boolean forceInstallSnapshot,\n            final short leaderRaftVersion)", "full_signature": "private void sendOutOfSyncAppendEntriesReply(final ActorRef sender, final boolean forceInstallSnapshot,\n            final short leaderRaftVersion)", "class_method_signature": "Follower.sendOutOfSyncAppendEntriesReply(final ActorRef sender, final boolean forceInstallSnapshot,\n            final short leaderRaftVersion)", "testcase": false, "constructor": false}, {"identifier": "needsLeaderAddress", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean needsLeaderAddress()", "full_signature": "private boolean needsLeaderAddress()", "class_method_signature": "Follower.needsLeaderAddress()", "testcase": false, "constructor": false}, {"identifier": "handleAppendEntriesReply", "parameters": "(final ActorRef sender,\n        final AppendEntriesReply appendEntriesReply)", "modifiers": "@Override protected", "return": "RaftActorBehavior", "signature": "RaftActorBehavior handleAppendEntriesReply(final ActorRef sender,\n        final AppendEntriesReply appendEntriesReply)", "full_signature": "@Override protected RaftActorBehavior handleAppendEntriesReply(final ActorRef sender,\n        final AppendEntriesReply appendEntriesReply)", "class_method_signature": "Follower.handleAppendEntriesReply(final ActorRef sender,\n        final AppendEntriesReply appendEntriesReply)", "testcase": false, "constructor": false}, {"identifier": "handleRequestVoteReply", "parameters": "(final ActorRef sender,\n        final RequestVoteReply requestVoteReply)", "modifiers": "@Override protected", "return": "RaftActorBehavior", "signature": "RaftActorBehavior handleRequestVoteReply(final ActorRef sender,\n        final RequestVoteReply requestVoteReply)", "full_signature": "@Override protected RaftActorBehavior handleRequestVoteReply(final ActorRef sender,\n        final RequestVoteReply requestVoteReply)", "class_method_signature": "Follower.handleRequestVoteReply(final ActorRef sender,\n        final RequestVoteReply requestVoteReply)", "testcase": false, "constructor": false}, {"identifier": "getApplyStateFor", "parameters": "(final ReplicatedLogEntry entry)", "modifiers": "@Override final", "return": "ApplyState", "signature": "ApplyState getApplyStateFor(final ReplicatedLogEntry entry)", "full_signature": "@Override final ApplyState getApplyStateFor(final ReplicatedLogEntry entry)", "class_method_signature": "Follower.getApplyStateFor(final ReplicatedLogEntry entry)", "testcase": false, "constructor": false}, {"identifier": "handleMessage", "parameters": "(final ActorRef sender, final Object message)", "modifiers": "@Override public", "return": "RaftActorBehavior", "signature": "RaftActorBehavior handleMessage(final ActorRef sender, final Object message)", "full_signature": "@Override public RaftActorBehavior handleMessage(final ActorRef sender, final Object message)", "class_method_signature": "Follower.handleMessage(final ActorRef sender, final Object message)", "testcase": false, "constructor": false}, {"identifier": "handleElectionTimeout", "parameters": "(final Object message)", "modifiers": "private", "return": "RaftActorBehavior", "signature": "RaftActorBehavior handleElectionTimeout(final Object message)", "full_signature": "private RaftActorBehavior handleElectionTimeout(final Object message)", "class_method_signature": "Follower.handleElectionTimeout(final Object message)", "testcase": false, "constructor": false}, {"identifier": "isLeaderAvailabilityKnown", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isLeaderAvailabilityKnown()", "full_signature": "private boolean isLeaderAvailabilityKnown()", "class_method_signature": "Follower.isLeaderAvailabilityKnown()", "testcase": false, "constructor": false}, {"identifier": "isThisFollowerIsolated", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isThisFollowerIsolated()", "full_signature": "private boolean isThisFollowerIsolated()", "class_method_signature": "Follower.isThisFollowerIsolated()", "testcase": false, "constructor": false}, {"identifier": "handleInstallSnapshot", "parameters": "(final ActorRef sender, final InstallSnapshot installSnapshot)", "modifiers": "private", "return": "void", "signature": "void handleInstallSnapshot(final ActorRef sender, final InstallSnapshot installSnapshot)", "full_signature": "private void handleInstallSnapshot(final ActorRef sender, final InstallSnapshot installSnapshot)", "class_method_signature": "Follower.handleInstallSnapshot(final ActorRef sender, final InstallSnapshot installSnapshot)", "testcase": false, "constructor": false}, {"identifier": "closeSnapshotTracker", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void closeSnapshotTracker()", "full_signature": "private void closeSnapshotTracker()", "class_method_signature": "Follower.closeSnapshotTracker()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "Follower.close()", "testcase": false, "constructor": false}, {"identifier": "getSnapshotTracker", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "SnapshotTracker", "signature": "SnapshotTracker getSnapshotTracker()", "full_signature": "@VisibleForTesting SnapshotTracker getSnapshotTracker()", "class_method_signature": "Follower.getSnapshotTracker()", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/behaviors/Follower.java"}, "focal_method": {"identifier": "handleInstallSnapshot", "parameters": "(final ActorRef sender, final InstallSnapshot installSnapshot)", "modifiers": "private", "return": "void", "body": "private void handleInstallSnapshot(final ActorRef sender, final InstallSnapshot installSnapshot) {\n\n        log.debug(\"{}: handleInstallSnapshot: {}\", logName(), installSnapshot);\n\n        leaderId = installSnapshot.getLeaderId();\n\n        if (snapshotTracker == null) {\n            snapshotTracker = new SnapshotTracker(log, installSnapshot.getTotalChunks(), installSnapshot.getLeaderId(),\n                    context);\n        }\n\n        updateInitialSyncStatus(installSnapshot.getLastIncludedIndex(), installSnapshot.getLeaderId());\n\n        try {\n            final InstallSnapshotReply reply = new InstallSnapshotReply(\n                    currentTerm(), context.getId(), installSnapshot.getChunkIndex(), true);\n\n            if (snapshotTracker.addChunk(installSnapshot.getChunkIndex(), installSnapshot.getData(),\n                    installSnapshot.getLastChunkHashCode())) {\n\n                log.info(\"{}: Snapshot installed from leader: {}\", logName(), installSnapshot.getLeaderId());\n\n                Snapshot snapshot = Snapshot.create(\n                        context.getSnapshotManager().convertSnapshot(snapshotTracker.getSnapshotBytes()),\n                        new ArrayList<>(),\n                        installSnapshot.getLastIncludedIndex(),\n                        installSnapshot.getLastIncludedTerm(),\n                        installSnapshot.getLastIncludedIndex(),\n                        installSnapshot.getLastIncludedTerm(),\n                        context.getTermInformation().getCurrentTerm(),\n                        context.getTermInformation().getVotedFor(),\n                        installSnapshot.getServerConfig().orElse(null));\n\n                ApplySnapshot.Callback applySnapshotCallback = new ApplySnapshot.Callback() {\n                    @Override\n                    public void onSuccess() {\n                        log.debug(\"{}: handleInstallSnapshot returning: {}\", logName(), reply);\n\n                        sender.tell(reply, actor());\n                    }\n\n                    @Override\n                    public void onFailure() {\n                        sender.tell(new InstallSnapshotReply(currentTerm(), context.getId(), -1, false), actor());\n                    }\n                };\n\n                actor().tell(new ApplySnapshot(snapshot, applySnapshotCallback), actor());\n\n                closeSnapshotTracker();\n            } else {\n                log.debug(\"{}: handleInstallSnapshot returning: {}\", logName(), reply);\n\n                sender.tell(reply, actor());\n            }\n        } catch (IOException e) {\n            log.debug(\"{}: Exception in InstallSnapshot of follower\", logName(), e);\n\n            sender.tell(new InstallSnapshotReply(currentTerm(), context.getId(),\n                    -1, false), actor());\n\n            closeSnapshotTracker();\n        }\n    }", "signature": "void handleInstallSnapshot(final ActorRef sender, final InstallSnapshot installSnapshot)", "full_signature": "private void handleInstallSnapshot(final ActorRef sender, final InstallSnapshot installSnapshot)", "class_method_signature": "Follower.handleInstallSnapshot(final ActorRef sender, final InstallSnapshot installSnapshot)", "testcase": false, "constructor": false, "invocations": ["debug", "logName", "getLeaderId", "getTotalChunks", "getLeaderId", "updateInitialSyncStatus", "getLastIncludedIndex", "getLeaderId", "currentTerm", "getId", "getChunkIndex", "addChunk", "getChunkIndex", "getData", "getLastChunkHashCode", "info", "logName", "getLeaderId", "create", "convertSnapshot", "getSnapshotManager", "getSnapshotBytes", "getLastIncludedIndex", "getLastIncludedTerm", "getLastIncludedIndex", "getLastIncludedTerm", "getCurrentTerm", "getTermInformation", "getVotedFor", "getTermInformation", "orElse", "getServerConfig", "debug", "logName", "tell", "actor", "tell", "currentTerm", "getId", "actor", "tell", "actor", "actor", "closeSnapshotTracker", "debug", "logName", "tell", "actor", "debug", "logName", "tell", "currentTerm", "getId", "actor", "closeSnapshotTracker"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}