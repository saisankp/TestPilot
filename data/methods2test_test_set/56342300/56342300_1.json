{"test_class": {"identifier": "DroolsDescriptionServiceTest", "superclass": "extends BaseServiceTest", "interfaces": "", "fields": [{"original_string": "private DroolsDescriptionService droolsDescriptionService;", "modifier": "private", "type": "DroolsDescriptionService", "declarator": "droolsDescriptionService", "var_name": "droolsDescriptionService"}], "file": "snomed-drools-rf2-validator/src/test/java/org/ihtsdo/drools/validator/rf2/service/DroolsDescriptionServiceTest.java"}, "test_case": {"identifier": "testFindFSNs", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindFSNs() {\n        repository.getConcept(\"1263005\").getDescriptions().stream()\n                .filter(d -> ConceptConstants.FSN.equals(d.getTypeId()))\n                .forEach(d -> d.getAcceptabilityMap().put(ConceptConstants.US_EN_LANGUAGE_REFERENCE_SET, Constants.ACCEPTABILITY_PREFERRED));\n\n        Set<String> conceptsIds = new HashSet<>();\n        conceptsIds.add(\"1263005\");\n        Set<String> results = droolsDescriptionService.getFSNs(conceptsIds, ConceptConstants.US_EN_LANGUAGE_REFERENCE_SET);\n        Assert.assertEquals(1, results.size());\n        for (String result : results) {\n            Assert.assertEquals(\"Distinctive arrangement of microtubules (cell structure)\", result);\n        }\n\n    }", "signature": "void testFindFSNs()", "full_signature": "@Test public void testFindFSNs()", "class_method_signature": "DroolsDescriptionServiceTest.testFindFSNs()", "testcase": true, "constructor": false, "invocations": ["forEach", "filter", "stream", "getDescriptions", "getConcept", "equals", "getTypeId", "put", "getAcceptabilityMap", "add", "getFSNs", "assertEquals", "size", "assertEquals"]}, "focal_class": {"identifier": "DroolsDescriptionService", "superclass": "", "interfaces": "implements DescriptionService", "fields": [{"original_string": "private static final String FULLY_SPECIFIED_NAME = \"900000000000003001\";", "modifier": "private static final", "type": "String", "declarator": "FULLY_SPECIFIED_NAME = \"900000000000003001\"", "var_name": "FULLY_SPECIFIED_NAME"}, {"original_string": "private static final String PREFERRED_ACCEPTABILITY = \"900000000000548007\";", "modifier": "private static final", "type": "String", "declarator": "PREFERRED_ACCEPTABILITY = \"900000000000548007\"", "var_name": "PREFERRED_ACCEPTABILITY"}, {"original_string": "private final SnomedDroolsComponentRepository repository;", "modifier": "private final", "type": "SnomedDroolsComponentRepository", "declarator": "repository", "var_name": "repository"}, {"original_string": "private final DroolsDescriptionIndex droolsDescriptionIndex;", "modifier": "private final", "type": "DroolsDescriptionIndex", "declarator": "droolsDescriptionIndex", "var_name": "droolsDescriptionIndex"}, {"original_string": "private final TestResourceProvider testResourceProvider;", "modifier": "private final", "type": "TestResourceProvider", "declarator": "testResourceProvider", "var_name": "testResourceProvider"}], "methods": [{"identifier": "DroolsDescriptionService", "parameters": "(SnomedDroolsComponentRepository repository, TestResourceProvider testResourceProvider)", "modifiers": "public", "return": "", "signature": " DroolsDescriptionService(SnomedDroolsComponentRepository repository, TestResourceProvider testResourceProvider)", "full_signature": "public  DroolsDescriptionService(SnomedDroolsComponentRepository repository, TestResourceProvider testResourceProvider)", "class_method_signature": "DroolsDescriptionService.DroolsDescriptionService(SnomedDroolsComponentRepository repository, TestResourceProvider testResourceProvider)", "testcase": false, "constructor": true}, {"identifier": "getFSNs", "parameters": "(Set<String> conceptIds, String... languageRefsetIds)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> getFSNs(Set<String> conceptIds, String... languageRefsetIds)", "full_signature": "@Override public Set<String> getFSNs(Set<String> conceptIds, String... languageRefsetIds)", "class_method_signature": "DroolsDescriptionService.getFSNs(Set<String> conceptIds, String... languageRefsetIds)", "testcase": false, "constructor": false}, {"identifier": "findActiveDescriptionByExactTerm", "parameters": "(String exactTerm)", "modifiers": "@Override public", "return": "Set<Description>", "signature": "Set<Description> findActiveDescriptionByExactTerm(String exactTerm)", "full_signature": "@Override public Set<Description> findActiveDescriptionByExactTerm(String exactTerm)", "class_method_signature": "DroolsDescriptionService.findActiveDescriptionByExactTerm(String exactTerm)", "testcase": false, "constructor": false}, {"identifier": "findInactiveDescriptionByExactTerm", "parameters": "(String exactTerm)", "modifiers": "@Override public", "return": "Set<Description>", "signature": "Set<Description> findInactiveDescriptionByExactTerm(String exactTerm)", "full_signature": "@Override public Set<Description> findInactiveDescriptionByExactTerm(String exactTerm)", "class_method_signature": "DroolsDescriptionService.findInactiveDescriptionByExactTerm(String exactTerm)", "testcase": false, "constructor": false}, {"identifier": "findMatchingDescriptionInHierarchy", "parameters": "(Concept concept, Description description)", "modifiers": "@Override // FIXME: Currently only finds matching description in ancestors. // Should search all descendants of the second highest ancestor (the ancestor which is a direct child of root). public", "return": "Set<Description>", "signature": "Set<Description> findMatchingDescriptionInHierarchy(Concept concept, Description description)", "full_signature": "@Override // FIXME: Currently only finds matching description in ancestors. // Should search all descendants of the second highest ancestor (the ancestor which is a direct child of root). public Set<Description> findMatchingDescriptionInHierarchy(Concept concept, Description description)", "class_method_signature": "DroolsDescriptionService.findMatchingDescriptionInHierarchy(Concept concept, Description description)", "testcase": false, "constructor": false}, {"identifier": "getCaseSensitiveWordsErrorMessage", "parameters": "(Description description)", "modifiers": "@Override public", "return": "String", "signature": "String getCaseSensitiveWordsErrorMessage(Description description)", "full_signature": "@Override public String getCaseSensitiveWordsErrorMessage(Description description)", "class_method_signature": "DroolsDescriptionService.getCaseSensitiveWordsErrorMessage(Description description)", "testcase": false, "constructor": false}, {"identifier": "getLanguageSpecificErrorMessage", "parameters": "(Description description)", "modifiers": "@Override public", "return": "String", "signature": "String getLanguageSpecificErrorMessage(Description description)", "full_signature": "@Override public String getLanguageSpecificErrorMessage(Description description)", "class_method_signature": "DroolsDescriptionService.getLanguageSpecificErrorMessage(Description description)", "testcase": false, "constructor": false}, {"identifier": "findParentsNotContainingSemanticTag", "parameters": "(Concept concept, String termSematicTag, String... languageRefsetIds)", "modifiers": "@Override public", "return": "Set<String>", "signature": "Set<String> findParentsNotContainingSemanticTag(Concept concept, String termSematicTag, String... languageRefsetIds)", "full_signature": "@Override public Set<String> findParentsNotContainingSemanticTag(Concept concept, String termSematicTag, String... languageRefsetIds)", "class_method_signature": "DroolsDescriptionService.findParentsNotContainingSemanticTag(Concept concept, String termSematicTag, String... languageRefsetIds)", "testcase": false, "constructor": false}, {"identifier": "isRecognisedSemanticTag", "parameters": "(String termSemanticTag)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRecognisedSemanticTag(String termSemanticTag)", "full_signature": "@Override public boolean isRecognisedSemanticTag(String termSemanticTag)", "class_method_signature": "DroolsDescriptionService.isRecognisedSemanticTag(String termSemanticTag)", "testcase": false, "constructor": false}, {"identifier": "getDroolsDescriptionIndex", "parameters": "()", "modifiers": "public", "return": "DroolsDescriptionIndex", "signature": "DroolsDescriptionIndex getDroolsDescriptionIndex()", "full_signature": "public DroolsDescriptionIndex getDroolsDescriptionIndex()", "class_method_signature": "DroolsDescriptionService.getDroolsDescriptionIndex()", "testcase": false, "constructor": false}], "file": "snomed-drools-rf2-validator/src/main/java/org/ihtsdo/drools/validator/rf2/service/DroolsDescriptionService.java"}, "focal_method": {"identifier": "getFSNs", "parameters": "(Set<String> conceptIds, String... languageRefsetIds)", "modifiers": "@Override public", "return": "Set<String>", "body": "@Override\n\tpublic Set<String> getFSNs(Set<String> conceptIds, String... languageRefsetIds) {\n\t\tSet<String> fsns = new HashSet<>();\n\t\tfor (String conceptId : conceptIds) {\n\t\t\tDroolsConcept concept = repository.getConcept(conceptId);\n\t\t\tif(concept != null) {\n\t\t\t\tCollection<DroolsDescription> descriptions = concept.getDescriptions();\n\t\t\t\tfor (DroolsDescription description : descriptions) {\n\t\t\t\t\tif (description.isActive() && description.getTypeId().equals(FULLY_SPECIFIED_NAME)) {\n\t\t\t\t\t\tif(languageRefsetIds != null && languageRefsetIds.length > 0) {\n\t\t\t\t\t\t\tfor (String languageRefsetId : languageRefsetIds) {\n\t\t\t\t\t\t\t\tif (PREFERRED_ACCEPTABILITY.equals(description.getAcceptabilityMap().get(languageRefsetId))) {\n\t\t\t\t\t\t\t\t\tfsns.add(description.getTerm());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfsns.add(description.getTerm());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn fsns;\n\t}", "signature": "Set<String> getFSNs(Set<String> conceptIds, String... languageRefsetIds)", "full_signature": "@Override public Set<String> getFSNs(Set<String> conceptIds, String... languageRefsetIds)", "class_method_signature": "DroolsDescriptionService.getFSNs(Set<String> conceptIds, String... languageRefsetIds)", "testcase": false, "constructor": false, "invocations": ["getConcept", "getDescriptions", "isActive", "equals", "getTypeId", "equals", "get", "getAcceptabilityMap", "add", "getTerm", "add", "getTerm"]}, "repository": {"repo_id": 56342300, "url": "https://github.com/IHTSDO/snomed-drools", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 384, "license": "licensed"}}