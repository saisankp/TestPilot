{"test_class": {"identifier": "DBUserInfoImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final User JOHN = TaskModelProvider.getFactory().newUser(\"john\");", "modifier": "private static final", "type": "User", "declarator": "JOHN = TaskModelProvider.getFactory().newUser(\"john\")", "var_name": "JOHN"}, {"original_string": "private static final Group PM = TaskModelProvider.getFactory().newGroup(\"PM\");", "modifier": "private static final", "type": "Group", "declarator": "PM = TaskModelProvider.getFactory().newGroup(\"PM\")", "var_name": "PM"}, {"original_string": "protected static final String DATASOURCE_PROPERTIES = \"/datasource.properties\";", "modifier": "protected static final", "type": "String", "declarator": "DATASOURCE_PROPERTIES = \"/datasource.properties\"", "var_name": "DATASOURCE_PROPERTIES"}, {"original_string": "private PoolingDataSourceWrapper pds;", "modifier": "private", "type": "PoolingDataSourceWrapper", "declarator": "pds", "var_name": "pds"}, {"original_string": "private Properties props;", "modifier": "private", "type": "Properties", "declarator": "props", "var_name": "props"}], "file": "jbpm-human-task/jbpm-human-task-core/src/test/java/org/jbpm/services/task/identity/DBUserInfoImplTest.java"}, "test_case": {"identifier": "testGetEmailForEntity", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetEmailForEntity() {\n        DBUserInfoImpl userInfo = new DBUserInfoImpl(props);\n        \n        String email = userInfo.getEmailForEntity(JOHN);\n        Assertions.assertThat(email).isEqualTo(\"john@jbpm.org\");\n    }", "signature": "void testGetEmailForEntity()", "full_signature": "@Test public void testGetEmailForEntity()", "class_method_signature": "DBUserInfoImplTest.testGetEmailForEntity()", "testcase": true, "constructor": false, "invocations": ["getEmailForEntity", "isEqualTo", "assertThat"]}, "focal_class": {"identifier": "DBUserInfoImpl", "superclass": "extends AbstractUserGroupInfo", "interfaces": "implements UserInfo", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DBUserInfoImpl.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DBUserInfoImpl.class)", "var_name": "logger"}, {"original_string": "protected static final String DEFAULT_PROPERTIES_NAME = \"classpath:/jbpm.user.info.properties\";", "modifier": "protected static final", "type": "String", "declarator": "DEFAULT_PROPERTIES_NAME = \"classpath:/jbpm.user.info.properties\"", "var_name": "DEFAULT_PROPERTIES_NAME"}, {"original_string": "public static final String DS_JNDI_NAME = \"db.ds.jndi.name\";", "modifier": "public static final", "type": "String", "declarator": "DS_JNDI_NAME = \"db.ds.jndi.name\"", "var_name": "DS_JNDI_NAME"}, {"original_string": "public static final String NAME_QUERY = \"db.name.query\";", "modifier": "public static final", "type": "String", "declarator": "NAME_QUERY = \"db.name.query\"", "var_name": "NAME_QUERY"}, {"original_string": "public static final String EMAIL_QUERY = \"db.email.query\";", "modifier": "public static final", "type": "String", "declarator": "EMAIL_QUERY = \"db.email.query\"", "var_name": "EMAIL_QUERY"}, {"original_string": "public static final String LANG_QUERY = \"db.lang.query\";", "modifier": "public static final", "type": "String", "declarator": "LANG_QUERY = \"db.lang.query\"", "var_name": "LANG_QUERY"}, {"original_string": "public static final String HAS_EMAIL_QUERY = \"db.has.email.query\";", "modifier": "public static final", "type": "String", "declarator": "HAS_EMAIL_QUERY = \"db.has.email.query\"", "var_name": "HAS_EMAIL_QUERY"}, {"original_string": "public static final String MEMBERS_QUERY = \"db.group.mem.query\";", "modifier": "public static final", "type": "String", "declarator": "MEMBERS_QUERY = \"db.group.mem.query\"", "var_name": "MEMBERS_QUERY"}, {"original_string": "public static final String ID_QUERY = \"db.id.query\";", "modifier": "public static final", "type": "String", "declarator": "ID_QUERY = \"db.id.query\"", "var_name": "ID_QUERY"}, {"original_string": "private Properties config;", "modifier": "private", "type": "Properties", "declarator": "config", "var_name": "config"}, {"original_string": "private DataSource ds;", "modifier": "private", "type": "DataSource", "declarator": "ds", "var_name": "ds"}], "methods": [{"identifier": "DBUserInfoImpl", "parameters": "(boolean activate)", "modifiers": "public", "return": "", "signature": " DBUserInfoImpl(boolean activate)", "full_signature": "public  DBUserInfoImpl(boolean activate)", "class_method_signature": "DBUserInfoImpl.DBUserInfoImpl(boolean activate)", "testcase": false, "constructor": true}, {"identifier": "DBUserInfoImpl", "parameters": "(Properties config)", "modifiers": "public", "return": "", "signature": " DBUserInfoImpl(Properties config)", "full_signature": "public  DBUserInfoImpl(Properties config)", "class_method_signature": "DBUserInfoImpl.DBUserInfoImpl(Properties config)", "testcase": false, "constructor": true}, {"identifier": "getConnection", "parameters": "()", "modifiers": "protected", "return": "Connection", "signature": "Connection getConnection()", "full_signature": "protected Connection getConnection()", "class_method_signature": "DBUserInfoImpl.getConnection()", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void init()", "full_signature": "private void init()", "class_method_signature": "DBUserInfoImpl.init()", "testcase": false, "constructor": false}, {"identifier": "getDisplayName", "parameters": "(OrganizationalEntity entity)", "modifiers": "@Override public", "return": "String", "signature": "String getDisplayName(OrganizationalEntity entity)", "full_signature": "@Override public String getDisplayName(OrganizationalEntity entity)", "class_method_signature": "DBUserInfoImpl.getDisplayName(OrganizationalEntity entity)", "testcase": false, "constructor": false}, {"identifier": "getEntityForEmail", "parameters": "(String email)", "modifiers": "@Override public", "return": "String", "signature": "String getEntityForEmail(String email)", "full_signature": "@Override public String getEntityForEmail(String email)", "class_method_signature": "DBUserInfoImpl.getEntityForEmail(String email)", "testcase": false, "constructor": false}, {"identifier": "getMembersForGroup", "parameters": "(Group group)", "modifiers": "@Override public", "return": "Iterator<OrganizationalEntity>", "signature": "Iterator<OrganizationalEntity> getMembersForGroup(Group group)", "full_signature": "@Override public Iterator<OrganizationalEntity> getMembersForGroup(Group group)", "class_method_signature": "DBUserInfoImpl.getMembersForGroup(Group group)", "testcase": false, "constructor": false}, {"identifier": "hasEmail", "parameters": "(Group group)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasEmail(Group group)", "full_signature": "@Override public boolean hasEmail(Group group)", "class_method_signature": "DBUserInfoImpl.hasEmail(Group group)", "testcase": false, "constructor": false}, {"identifier": "getEmailForEntity", "parameters": "(OrganizationalEntity entity)", "modifiers": "@Override public", "return": "String", "signature": "String getEmailForEntity(OrganizationalEntity entity)", "full_signature": "@Override public String getEmailForEntity(OrganizationalEntity entity)", "class_method_signature": "DBUserInfoImpl.getEmailForEntity(OrganizationalEntity entity)", "testcase": false, "constructor": false}, {"identifier": "getLanguageForEntity", "parameters": "(OrganizationalEntity entity)", "modifiers": "@Override public", "return": "String", "signature": "String getLanguageForEntity(OrganizationalEntity entity)", "full_signature": "@Override public String getLanguageForEntity(OrganizationalEntity entity)", "class_method_signature": "DBUserInfoImpl.getLanguageForEntity(OrganizationalEntity entity)", "testcase": false, "constructor": false}], "file": "jbpm-human-task/jbpm-human-task-core/src/main/java/org/jbpm/services/task/identity/DBUserInfoImpl.java"}, "focal_method": {"identifier": "getEmailForEntity", "parameters": "(OrganizationalEntity entity)", "modifiers": "@Override public", "return": "String", "body": "@Override\n\tpublic String getEmailForEntity(OrganizationalEntity entity) {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\t\tString emailAddress = null;\n\t\ttry {\n\t\t\tconn = ds.getConnection();\n\n\t\t\tps = conn.prepareStatement(this.config.getProperty(EMAIL_QUERY));\n\n\t\t\tps.setString(1, entity.getId());\n\t\t\trs = ps.executeQuery();\n\t\t\tif (rs.next()) {\n\t\t\t\temailAddress = rs.getString(1);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error when fetching email address from db for entity {}\", entity.getId(), e);\n\t\t} finally {\n\t\t\tif (rs != null) {\n\t\t\t\ttry {\n\t\t\t\t\trs.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ps != null) {\n\t\t\t\ttry {\n\t\t\t\t\tps.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (conn != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconn.close();\n\t\t\t\t} catch (Exception ex) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn emailAddress;\n\t}", "signature": "String getEmailForEntity(OrganizationalEntity entity)", "full_signature": "@Override public String getEmailForEntity(OrganizationalEntity entity)", "class_method_signature": "DBUserInfoImpl.getEmailForEntity(OrganizationalEntity entity)", "testcase": false, "constructor": false, "invocations": ["getConnection", "prepareStatement", "getProperty", "setString", "getId", "executeQuery", "next", "getString", "error", "getId", "close", "close", "close"]}, "repository": {"repo_id": 930571, "url": "https://github.com/kiegroup/jbpm", "stars": 1035, "created": "9/22/2010 1:19:52 PM +00:00", "updates": "2020-01-22T03:39:57+00:00", "fork": "False", "license": "licensed"}}