{"test_class": {"identifier": "PrometheusMetricTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String[] labelNames = {\n            PrometheusMetric.REQUEST_DOMAIN_LABEL_NAME,\n            PrometheusMetric.PRINCIPAL_DOMAIN_LABEL_NAME,\n            PrometheusMetric.REQUEST_HTTP_METHOD_LABEL_NAME,\n            PrometheusMetric.REQUEST_HTTP_STATUS_LABEL_NAME,\n            PrometheusMetric.REQUEST_API_LABEL_NAME\n    };", "modifier": "private", "type": "String[]", "declarator": "labelNames = {\n            PrometheusMetric.REQUEST_DOMAIN_LABEL_NAME,\n            PrometheusMetric.PRINCIPAL_DOMAIN_LABEL_NAME,\n            PrometheusMetric.REQUEST_HTTP_METHOD_LABEL_NAME,\n            PrometheusMetric.REQUEST_HTTP_STATUS_LABEL_NAME,\n            PrometheusMetric.REQUEST_API_LABEL_NAME\n    }", "var_name": "labelNames"}], "file": "contributions/metric/prometheus/src/test/java/com/yahoo/athenz/common/metrics/impl/prometheus/PrometheusMetricTest.java"}, "test_case": {"identifier": "testCreateOrGetCollector", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateOrGetCollector() throws NoSuchMethodException, SecurityException, IllegalAccessException,\n            IllegalArgumentException, InvocationTargetException {\n        CollectorRegistry registry = new CollectorRegistry();\n        ConcurrentHashMap<String, Collector> namesToCollectors = new ConcurrentHashMap<>();\n        PrometheusMetric metric = new PrometheusMetric(registry, namesToCollectors, null, \"\");\n        Method createOrGetCollector = metric.getClass().getDeclaredMethod(\"createOrGetCollector\", String.class, SimpleCollector.Builder.class);\n        createOrGetCollector.setAccessible(true);\n\n        // test create\n        String metricName = \"metric_test\";\n        Counter.Builder builder = Counter.build();\n        double countValue = 110.110d;\n        Counter counter = (Counter) createOrGetCollector.invoke(metric, metricName, builder);\n        counter.labels(\"\", \"\", \"\", \"\", \"\").inc(countValue);\n        // assertions\n        Assert.assertSame(counter, namesToCollectors.get(metricName));\n        Assert.assertEquals(registry.getSampleValue(metricName, this.labelNames, new String[]{\"\", \"\", \"\", \"\", \"\"}), countValue);\n\n        // test get\n        Counter counter_2 = (Counter) createOrGetCollector.invoke(metric, metricName, builder);\n        // assertions\n        Assert.assertSame(counter_2, namesToCollectors.get(metricName));\n        Assert.assertSame(counter_2, counter);\n    }", "signature": "void testCreateOrGetCollector()", "full_signature": "@Test public void testCreateOrGetCollector()", "class_method_signature": "PrometheusMetricTest.testCreateOrGetCollector()", "testcase": true, "constructor": false, "invocations": ["getDeclaredMethod", "getClass", "setAccessible", "build", "invoke", "inc", "labels", "assertSame", "get", "assertEquals", "getSampleValue", "invoke", "assertSame", "get", "assertSame"]}, "focal_class": {"identifier": "PrometheusMetric", "superclass": "", "interfaces": "implements Metric", "fields": [{"original_string": "public static final String REQUEST_DOMAIN_LABEL_NAME = \"domain\";", "modifier": "public static final", "type": "String", "declarator": "REQUEST_DOMAIN_LABEL_NAME = \"domain\"", "var_name": "REQUEST_DOMAIN_LABEL_NAME"}, {"original_string": "public static final String PRINCIPAL_DOMAIN_LABEL_NAME = \"principal\";", "modifier": "public static final", "type": "String", "declarator": "PRINCIPAL_DOMAIN_LABEL_NAME = \"principal\"", "var_name": "PRINCIPAL_DOMAIN_LABEL_NAME"}, {"original_string": "public static final String REQUEST_HTTP_METHOD_LABEL_NAME = \"httpmethod\";", "modifier": "public static final", "type": "String", "declarator": "REQUEST_HTTP_METHOD_LABEL_NAME = \"httpmethod\"", "var_name": "REQUEST_HTTP_METHOD_LABEL_NAME"}, {"original_string": "public static final String REQUEST_HTTP_STATUS_LABEL_NAME = \"httpstatus\";", "modifier": "public static final", "type": "String", "declarator": "REQUEST_HTTP_STATUS_LABEL_NAME = \"httpstatus\"", "var_name": "REQUEST_HTTP_STATUS_LABEL_NAME"}, {"original_string": "public static final String REQUEST_API_LABEL_NAME = \"apimethod\";", "modifier": "public static final", "type": "String", "declarator": "REQUEST_API_LABEL_NAME = \"apimethod\"", "var_name": "REQUEST_API_LABEL_NAME"}, {"original_string": "public static final String METRIC_NAME_DELIMITER = \"_\";", "modifier": "public static final", "type": "String", "declarator": "METRIC_NAME_DELIMITER = \"_\"", "var_name": "METRIC_NAME_DELIMITER"}, {"original_string": "public static final String COUNTER_SUFFIX = \"total\";", "modifier": "public static final", "type": "String", "declarator": "COUNTER_SUFFIX = \"total\"", "var_name": "COUNTER_SUFFIX"}, {"original_string": "public static final String TIMER_UNIT = \"seconds\";", "modifier": "public static final", "type": "String", "declarator": "TIMER_UNIT = \"seconds\"", "var_name": "TIMER_UNIT"}, {"original_string": "private final CollectorRegistry registry;", "modifier": "private final", "type": "CollectorRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "private final ConcurrentMap<String, Collector> namesToCollectors;", "modifier": "private final", "type": "ConcurrentMap<String, Collector>", "declarator": "namesToCollectors", "var_name": "namesToCollectors"}, {"original_string": "private final PrometheusExporter exporter;", "modifier": "private final", "type": "PrometheusExporter", "declarator": "exporter", "var_name": "exporter"}, {"original_string": "private String namespace;", "modifier": "private", "type": "String", "declarator": "namespace", "var_name": "namespace"}, {"original_string": "private boolean isLabelRequestDomainNameEnable;", "modifier": "private", "type": "boolean", "declarator": "isLabelRequestDomainNameEnable", "var_name": "isLabelRequestDomainNameEnable"}, {"original_string": "private boolean isLabelPrincipalDomainNameEnable;", "modifier": "private", "type": "boolean", "declarator": "isLabelPrincipalDomainNameEnable", "var_name": "isLabelPrincipalDomainNameEnable"}, {"original_string": "private boolean isLabelHttpMethodNameEnable;", "modifier": "private", "type": "boolean", "declarator": "isLabelHttpMethodNameEnable", "var_name": "isLabelHttpMethodNameEnable"}, {"original_string": "private boolean isLabelHttpStatusNameEnable;", "modifier": "private", "type": "boolean", "declarator": "isLabelHttpStatusNameEnable", "var_name": "isLabelHttpStatusNameEnable"}, {"original_string": "private boolean isLabelApiNameEnable;", "modifier": "private", "type": "boolean", "declarator": "isLabelApiNameEnable", "var_name": "isLabelApiNameEnable"}], "methods": [{"identifier": "PrometheusMetric", "parameters": "(CollectorRegistry registry, ConcurrentMap<String, Collector> namesToCollectors, PrometheusExporter exporter, String namespace)", "modifiers": "public", "return": "", "signature": " PrometheusMetric(CollectorRegistry registry, ConcurrentMap<String, Collector> namesToCollectors, PrometheusExporter exporter, String namespace)", "full_signature": "public  PrometheusMetric(CollectorRegistry registry, ConcurrentMap<String, Collector> namesToCollectors, PrometheusExporter exporter, String namespace)", "class_method_signature": "PrometheusMetric.PrometheusMetric(CollectorRegistry registry, ConcurrentMap<String, Collector> namesToCollectors, PrometheusExporter exporter, String namespace)", "testcase": false, "constructor": true}, {"identifier": "PrometheusMetric", "parameters": "(CollectorRegistry registry,\n                            ConcurrentMap<String, Collector> namesToCollectors,\n                            PrometheusExporter exporter,\n                            String namespace,\n                            boolean isLabelRequestDomainNameEnable,\n                            boolean isLabelPrincipalDomainNameEnable,\n                            boolean isLabelHttpMethodNameEnable,\n                            boolean isLabelHttpStatusNameEnable,\n                            boolean isLabelApiNameEnable)", "modifiers": "public", "return": "", "signature": " PrometheusMetric(CollectorRegistry registry,\n                            ConcurrentMap<String, Collector> namesToCollectors,\n                            PrometheusExporter exporter,\n                            String namespace,\n                            boolean isLabelRequestDomainNameEnable,\n                            boolean isLabelPrincipalDomainNameEnable,\n                            boolean isLabelHttpMethodNameEnable,\n                            boolean isLabelHttpStatusNameEnable,\n                            boolean isLabelApiNameEnable)", "full_signature": "public  PrometheusMetric(CollectorRegistry registry,\n                            ConcurrentMap<String, Collector> namesToCollectors,\n                            PrometheusExporter exporter,\n                            String namespace,\n                            boolean isLabelRequestDomainNameEnable,\n                            boolean isLabelPrincipalDomainNameEnable,\n                            boolean isLabelHttpMethodNameEnable,\n                            boolean isLabelHttpStatusNameEnable,\n                            boolean isLabelApiNameEnable)", "class_method_signature": "PrometheusMetric.PrometheusMetric(CollectorRegistry registry,\n                            ConcurrentMap<String, Collector> namesToCollectors,\n                            PrometheusExporter exporter,\n                            String namespace,\n                            boolean isLabelRequestDomainNameEnable,\n                            boolean isLabelPrincipalDomainNameEnable,\n                            boolean isLabelHttpMethodNameEnable,\n                            boolean isLabelHttpStatusNameEnable,\n                            boolean isLabelApiNameEnable)", "testcase": false, "constructor": true}, {"identifier": "increment", "parameters": "(String metricName)", "modifiers": "@Override public", "return": "void", "signature": "void increment(String metricName)", "full_signature": "@Override public void increment(String metricName)", "class_method_signature": "PrometheusMetric.increment(String metricName)", "testcase": false, "constructor": false}, {"identifier": "increment", "parameters": "(String metricName, String requestDomainName)", "modifiers": "@Override public", "return": "void", "signature": "void increment(String metricName, String requestDomainName)", "full_signature": "@Override public void increment(String metricName, String requestDomainName)", "class_method_signature": "PrometheusMetric.increment(String metricName, String requestDomainName)", "testcase": false, "constructor": false}, {"identifier": "increment", "parameters": "(String metricName, String requestDomainName, String principalDomainName)", "modifiers": "@Override public", "return": "void", "signature": "void increment(String metricName, String requestDomainName, String principalDomainName)", "full_signature": "@Override public void increment(String metricName, String requestDomainName, String principalDomainName)", "class_method_signature": "PrometheusMetric.increment(String metricName, String requestDomainName, String principalDomainName)", "testcase": false, "constructor": false}, {"identifier": "increment", "parameters": "(String metricName, String requestDomainName, int count)", "modifiers": "@Override public", "return": "void", "signature": "void increment(String metricName, String requestDomainName, int count)", "full_signature": "@Override public void increment(String metricName, String requestDomainName, int count)", "class_method_signature": "PrometheusMetric.increment(String metricName, String requestDomainName, int count)", "testcase": false, "constructor": false}, {"identifier": "increment", "parameters": "(String metricName, String requestDomainName, String principalDomainName, int count)", "modifiers": "@Override public", "return": "void", "signature": "void increment(String metricName, String requestDomainName, String principalDomainName, int count)", "full_signature": "@Override public void increment(String metricName, String requestDomainName, String principalDomainName, int count)", "class_method_signature": "PrometheusMetric.increment(String metricName, String requestDomainName, String principalDomainName, int count)", "testcase": false, "constructor": false}, {"identifier": "increment", "parameters": "(String metricName, String requestDomainName, String principalDomainName, String httpMethod, int httpStatus, String apiName)", "modifiers": "@Override public", "return": "void", "signature": "void increment(String metricName, String requestDomainName, String principalDomainName, String httpMethod, int httpStatus, String apiName)", "full_signature": "@Override public void increment(String metricName, String requestDomainName, String principalDomainName, String httpMethod, int httpStatus, String apiName)", "class_method_signature": "PrometheusMetric.increment(String metricName, String requestDomainName, String principalDomainName, String httpMethod, int httpStatus, String apiName)", "testcase": false, "constructor": false}, {"identifier": "startTiming", "parameters": "(String metricName, String requestDomainName)", "modifiers": "@Override public", "return": "Object", "signature": "Object startTiming(String metricName, String requestDomainName)", "full_signature": "@Override public Object startTiming(String metricName, String requestDomainName)", "class_method_signature": "PrometheusMetric.startTiming(String metricName, String requestDomainName)", "testcase": false, "constructor": false}, {"identifier": "startTiming", "parameters": "(String metricName, String requestDomainName, String principalDomainName)", "modifiers": "@Override public", "return": "Object", "signature": "Object startTiming(String metricName, String requestDomainName, String principalDomainName)", "full_signature": "@Override public Object startTiming(String metricName, String requestDomainName, String principalDomainName)", "class_method_signature": "PrometheusMetric.startTiming(String metricName, String requestDomainName, String principalDomainName)", "testcase": false, "constructor": false}, {"identifier": "startTiming", "parameters": "(String metricName, String requestDomainName, String principalDomainName, String httpMethod, String apiName)", "modifiers": "@Override public", "return": "Object", "signature": "Object startTiming(String metricName, String requestDomainName, String principalDomainName, String httpMethod, String apiName)", "full_signature": "@Override public Object startTiming(String metricName, String requestDomainName, String principalDomainName, String httpMethod, String apiName)", "class_method_signature": "PrometheusMetric.startTiming(String metricName, String requestDomainName, String principalDomainName, String httpMethod, String apiName)", "testcase": false, "constructor": false}, {"identifier": "stopTiming", "parameters": "(Object timerObj)", "modifiers": "@Override public", "return": "void", "signature": "void stopTiming(Object timerObj)", "full_signature": "@Override public void stopTiming(Object timerObj)", "class_method_signature": "PrometheusMetric.stopTiming(Object timerObj)", "testcase": false, "constructor": false}, {"identifier": "stopTiming", "parameters": "(Object timerObj, String requestDomainName, String principalDomainName)", "modifiers": "@Override public", "return": "void", "signature": "void stopTiming(Object timerObj, String requestDomainName, String principalDomainName)", "full_signature": "@Override public void stopTiming(Object timerObj, String requestDomainName, String principalDomainName)", "class_method_signature": "PrometheusMetric.stopTiming(Object timerObj, String requestDomainName, String principalDomainName)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flush()", "full_signature": "@Override public void flush()", "class_method_signature": "PrometheusMetric.flush()", "testcase": false, "constructor": false}, {"identifier": "quit", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void quit()", "full_signature": "@Override public void quit()", "class_method_signature": "PrometheusMetric.quit()", "testcase": false, "constructor": false}, {"identifier": "createOrGetCollector", "parameters": "(String metricName, SimpleCollector.Builder<?, ?> builder)", "modifiers": "private", "return": "Collector", "signature": "Collector createOrGetCollector(String metricName, SimpleCollector.Builder<?, ?> builder)", "full_signature": "private Collector createOrGetCollector(String metricName, SimpleCollector.Builder<?, ?> builder)", "class_method_signature": "PrometheusMetric.createOrGetCollector(String metricName, SimpleCollector.Builder<?, ?> builder)", "testcase": false, "constructor": false}, {"identifier": "normalizeCounterMetricName", "parameters": "(String metricName)", "modifiers": "private", "return": "String", "signature": "String normalizeCounterMetricName(String metricName)", "full_signature": "private String normalizeCounterMetricName(String metricName)", "class_method_signature": "PrometheusMetric.normalizeCounterMetricName(String metricName)", "testcase": false, "constructor": false}, {"identifier": "normalizeTimerMetricName", "parameters": "(String metricName)", "modifiers": "private", "return": "String", "signature": "String normalizeTimerMetricName(String metricName)", "full_signature": "private String normalizeTimerMetricName(String metricName)", "class_method_signature": "PrometheusMetric.normalizeTimerMetricName(String metricName)", "testcase": false, "constructor": false}], "file": "contributions/metric/prometheus/src/main/java/com/yahoo/athenz/common/metrics/impl/prometheus/PrometheusMetric.java"}, "focal_method": {"identifier": "createOrGetCollector", "parameters": "(String metricName, SimpleCollector.Builder<?, ?> builder)", "modifiers": "private", "return": "Collector", "body": "private Collector createOrGetCollector(String metricName, SimpleCollector.Builder<?, ?> builder) {\n        String key = metricName;\n        ConcurrentMap<String, Collector> map = this.namesToCollectors;\n        Collector collector = map.get(key);\n\n        // double checked locking\n        if (collector == null) {\n            synchronized (map) {\n                if (!map.containsKey(key)) {\n                    // create\n                    builder = builder\n                        .namespace(this.namespace)\n                        .name(metricName)\n                        .help(metricName)\n                        .labelNames(REQUEST_DOMAIN_LABEL_NAME, PRINCIPAL_DOMAIN_LABEL_NAME, REQUEST_HTTP_METHOD_LABEL_NAME, REQUEST_HTTP_STATUS_LABEL_NAME, REQUEST_API_LABEL_NAME);\n                    collector = builder.register(this.registry);\n                    // put\n                    map.put(key, collector);\n                } else {\n                    // get\n                    collector = map.get(key);\n                }\n            }\n        };\n\n        return collector;\n    }", "signature": "Collector createOrGetCollector(String metricName, SimpleCollector.Builder<?, ?> builder)", "full_signature": "private Collector createOrGetCollector(String metricName, SimpleCollector.Builder<?, ?> builder)", "class_method_signature": "PrometheusMetric.createOrGetCollector(String metricName, SimpleCollector.Builder<?, ?> builder)", "testcase": false, "constructor": false, "invocations": ["get", "containsKey", "labelNames", "help", "name", "namespace", "register", "put", "get"]}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}