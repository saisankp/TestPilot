{"test_class": {"identifier": "LexicalComparatorTest", "superclass": "extends AbstractComparatorTest", "interfaces": "", "fields": [], "file": "ontopia-engine/src/test/java/net/ontopia/utils/LexicalComparatorTest.java"}, "test_case": {"identifier": "testGreaterThanIgnore", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGreaterThanIgnore() {\n    testComparator(LexicalComparator.CASE_INSENSITIVE.compare(\"FOOaR\", \"FOOBAR\"), -1, 0);\n  }", "signature": "void testGreaterThanIgnore()", "full_signature": "@Test public void testGreaterThanIgnore()", "class_method_signature": "LexicalComparatorTest.testGreaterThanIgnore()", "testcase": true, "constructor": false, "invocations": ["testComparator", "compare"]}, "focal_class": {"identifier": "LexicalComparator", "superclass": "", "interfaces": "implements Comparator<Object>", "fields": [{"original_string": "public final static LexicalComparator CASE_SENSITIVE = new LexicalComparator(true);", "modifier": "public final static", "type": "LexicalComparator", "declarator": "CASE_SENSITIVE = new LexicalComparator(true)", "var_name": "CASE_SENSITIVE"}, {"original_string": "public final static LexicalComparator CASE_INSENSITIVE = new LexicalComparator(false);", "modifier": "public final static", "type": "LexicalComparator", "declarator": "CASE_INSENSITIVE = new LexicalComparator(false)", "var_name": "CASE_INSENSITIVE"}, {"original_string": "protected Collator collator;", "modifier": "protected", "type": "Collator", "declarator": "collator", "var_name": "collator"}], "methods": [{"identifier": "LexicalComparator", "parameters": "(boolean casesensitive)", "modifiers": "private", "return": "", "signature": " LexicalComparator(boolean casesensitive)", "full_signature": "private  LexicalComparator(boolean casesensitive)", "class_method_signature": "LexicalComparator.LexicalComparator(boolean casesensitive)", "testcase": false, "constructor": true}, {"identifier": "LexicalComparator", "parameters": "(Collator collator)", "modifiers": "private", "return": "", "signature": " LexicalComparator(Collator collator)", "full_signature": "private  LexicalComparator(Collator collator)", "class_method_signature": "LexicalComparator.LexicalComparator(Collator collator)", "testcase": false, "constructor": true}, {"identifier": "compare", "parameters": "(Object obj1, Object obj2)", "modifiers": "@Override public", "return": "int", "signature": "int compare(Object obj1, Object obj2)", "full_signature": "@Override public int compare(Object obj1, Object obj2)", "class_method_signature": "LexicalComparator.compare(Object obj1, Object obj2)", "testcase": false, "constructor": false}], "file": "ontopia-engine/src/main/java/net/ontopia/utils/LexicalComparator.java"}, "focal_method": {"identifier": "compare", "parameters": "(Object obj1, Object obj2)", "modifiers": "@Override public", "return": "int", "body": "@Override\n  public int compare(Object obj1, Object obj2) {\n    return collator.compare(obj1.toString(), obj2.toString());\n  }", "signature": "int compare(Object obj1, Object obj2)", "full_signature": "@Override public int compare(Object obj1, Object obj2)", "class_method_signature": "LexicalComparator.compare(Object obj1, Object obj2)", "testcase": false, "constructor": false, "invocations": ["compare", "toString", "toString"]}, "repository": {"repo_id": 32357795, "url": "https://github.com/ontopia/ontopia", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 35, "size": 68637, "license": "licensed"}}