{"test_class": {"identifier": "ReactionPlusGeneratorTest", "superclass": "extends AbstractGeneratorTest", "interfaces": "", "fields": [{"original_string": "private ReactionPlusGenerator generator;", "modifier": "private", "type": "ReactionPlusGenerator", "declarator": "generator", "var_name": "generator"}], "file": "display/renderextra/src/test/java/org/openscience/cdk/renderer/generators/ReactionPlusGeneratorTest.java"}, "test_case": {"identifier": "testEmptyReaction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEmptyReaction() {\n        IReaction singleReaction = super.builder.newInstance(IReaction.class);\n\n        // nothing should be made\n        IRenderingElement root = generator.generate(singleReaction, model);\n        List<IRenderingElement> elements = elementUtil.getAllSimpleElements(root);\n        Assert.assertEquals(0, elements.size());\n    }", "signature": "void testEmptyReaction()", "full_signature": "@Test public void testEmptyReaction()", "class_method_signature": "ReactionPlusGeneratorTest.testEmptyReaction()", "testcase": true, "constructor": false, "invocations": ["newInstance", "generate", "getAllSimpleElements", "assertEquals", "size"]}, "focal_class": {"identifier": "ReactionPlusGenerator", "superclass": "", "interfaces": "implements IGenerator<IReaction>", "fields": [], "methods": [{"identifier": "generate", "parameters": "(IReaction reaction, RendererModel model)", "modifiers": "@Override public", "return": "IRenderingElement", "signature": "IRenderingElement generate(IReaction reaction, RendererModel model)", "full_signature": "@Override public IRenderingElement generate(IReaction reaction, RendererModel model)", "class_method_signature": "ReactionPlusGenerator.generate(IReaction reaction, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "makePlus", "parameters": "(Rectangle2D moleculeBox1, Rectangle2D moleculeBox2, double axis, Color color)", "modifiers": "private", "return": "TextElement", "signature": "TextElement makePlus(Rectangle2D moleculeBox1, Rectangle2D moleculeBox2, double axis, Color color)", "full_signature": "private TextElement makePlus(Rectangle2D moleculeBox1, Rectangle2D moleculeBox2, double axis, Color color)", "class_method_signature": "ReactionPlusGenerator.makePlus(Rectangle2D moleculeBox1, Rectangle2D moleculeBox2, double axis, Color color)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "List<IGeneratorParameter<?>>", "signature": "List<IGeneratorParameter<?>> getParameters()", "full_signature": "@Override public List<IGeneratorParameter<?>> getParameters()", "class_method_signature": "ReactionPlusGenerator.getParameters()", "testcase": false, "constructor": false}], "file": "display/renderextra/src/main/java/org/openscience/cdk/renderer/generators/ReactionPlusGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(IReaction reaction, RendererModel model)", "modifiers": "@Override public", "return": "IRenderingElement", "body": "@Override\n    public IRenderingElement generate(IReaction reaction, RendererModel model) {\n        ElementGroup diagram = new ElementGroup();\n\n        Color color = model.getParameter(BasicSceneGenerator.ForegroundColor.class).getValue();\n        IAtomContainerSet reactants = reaction.getReactants();\n\n        // only draw + signs when there are more than one reactant\n        if (reactants.getAtomContainerCount() > 1) {\n            Rectangle2D totalBoundsReactants = BoundsCalculator.calculateBounds(reactants);\n            Rectangle2D bounds1 = BoundsCalculator.calculateBounds(reactants.getAtomContainer(0));\n            double axis = totalBoundsReactants.getCenterY();\n            for (int i = 1; i < reaction.getReactantCount(); i++) {\n                Rectangle2D bounds2 = BoundsCalculator.calculateBounds(reactants.getAtomContainer(i));\n                diagram.add(makePlus(bounds1, bounds2, axis, color));\n                bounds1 = bounds2;\n            }\n        }\n\n        // only draw + signs when there are more than one products\n        IAtomContainerSet products = reaction.getProducts();\n        if (products.getAtomContainerCount() > 1) {\n            Rectangle2D totalBoundsProducts = BoundsCalculator.calculateBounds(products);\n            double axis = totalBoundsProducts.getCenterY();\n            Rectangle2D bounds1 = BoundsCalculator.calculateBounds(reactants.getAtomContainer(0));\n            for (int i = 1; i < reaction.getProductCount(); i++) {\n                Rectangle2D bounds2 = BoundsCalculator.calculateBounds(products.getAtomContainer(i));\n\n                diagram.add(makePlus(bounds1, bounds2, axis, color));\n                bounds1 = bounds2;\n            }\n        }\n        return diagram;\n    }", "signature": "IRenderingElement generate(IReaction reaction, RendererModel model)", "full_signature": "@Override public IRenderingElement generate(IReaction reaction, RendererModel model)", "class_method_signature": "ReactionPlusGenerator.generate(IReaction reaction, RendererModel model)", "testcase": false, "constructor": false, "invocations": ["getValue", "getParameter", "getReactants", "getAtomContainerCount", "calculateBounds", "calculateBounds", "getAtomContainer", "getCenterY", "getReactantCount", "calculateBounds", "getAtomContainer", "add", "makePlus", "getProducts", "getAtomContainerCount", "calculateBounds", "getCenterY", "calculateBounds", "getAtomContainer", "getProductCount", "calculateBounds", "getAtomContainer", "add", "makePlus"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}