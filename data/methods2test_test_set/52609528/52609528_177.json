{"test_class": {"identifier": "ConfigurationResourceValidatorTest", "superclass": "extends ConfigurationResourceTestBase", "interfaces": "", "fields": [{"original_string": "private ConfigurationResourceValidator configurationResourceValidator;", "modifier": "private", "type": "ConfigurationResourceValidator", "declarator": "configurationResourceValidator", "var_name": "configurationResourceValidator"}], "file": "gateleen-core/src/test/java/org/swisspush/gateleen/core/configuration/ConfigurationResourceValidatorTest.java"}, "test_case": {"identifier": "testValidateValidJsonWithContentNotMatchingSchema", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValidateValidJsonWithContentNotMatchingSchema(TestContext context) {\n        Async async = context.async();\n        configurationResourceValidator = new ConfigurationResourceValidator(vertx);\n\n        configurationResourceValidator.validateConfigurationResource(Buffer.buffer(CONTENT_NOT_MATCHING_PERSON_SCHEMA), PERSON_SCHEMA, event -> {\n            context.assertTrue(event.succeeded());\n            context.assertEquals(ValidationStatus.VALIDATED_NEGATIV, event.result().getValidationStatus());\n            String expectedMessage = \"Validation failed\";\n            context.assertEquals(expectedMessage, event.result().getMessage());\n\n            context.assertNotNull(event.result().getValidationDetails());\n            JsonArray validationDetails = event.result().getValidationDetails();\n            context.assertEquals(\"$.lastName: is missing but it is required\", validationDetails.getJsonObject(0).getString(\"message\"));\n\n            async.complete();\n        });\n    }", "signature": "void testValidateValidJsonWithContentNotMatchingSchema(TestContext context)", "full_signature": "@Test public void testValidateValidJsonWithContentNotMatchingSchema(TestContext context)", "class_method_signature": "ConfigurationResourceValidatorTest.testValidateValidJsonWithContentNotMatchingSchema(TestContext context)", "testcase": true, "constructor": false, "invocations": ["async", "validateConfigurationResource", "buffer", "assertTrue", "succeeded", "assertEquals", "getValidationStatus", "result", "assertEquals", "getMessage", "result", "assertNotNull", "getValidationDetails", "result", "getValidationDetails", "result", "assertEquals", "getString", "getJsonObject", "complete"]}, "focal_class": {"identifier": "ConfigurationResourceValidator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String SCHEMA_DECLARATION = \"http://json-schema.org/draft-04/schema#\";", "modifier": "private static final", "type": "String", "declarator": "SCHEMA_DECLARATION = \"http://json-schema.org/draft-04/schema#\"", "var_name": "SCHEMA_DECLARATION"}, {"original_string": "private Logger log = LoggerFactory.getLogger(ConfigurationResourceValidator.class);", "modifier": "private", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(ConfigurationResourceValidator.class)", "var_name": "log"}, {"original_string": "private Vertx vertx;", "modifier": "private", "type": "Vertx", "declarator": "vertx", "var_name": "vertx"}], "methods": [{"identifier": "ConfigurationResourceValidator", "parameters": "(Vertx vertx)", "modifiers": "public", "return": "", "signature": " ConfigurationResourceValidator(Vertx vertx)", "full_signature": "public  ConfigurationResourceValidator(Vertx vertx)", "class_method_signature": "ConfigurationResourceValidator.ConfigurationResourceValidator(Vertx vertx)", "testcase": false, "constructor": true}, {"identifier": "validateConfigurationResource", "parameters": "(Buffer configurationResource, String resourceSchema,\n                                              Handler<AsyncResult<ValidationResult>> resultHandler)", "modifiers": "public", "return": "void", "signature": "void validateConfigurationResource(Buffer configurationResource, String resourceSchema,\n                                              Handler<AsyncResult<ValidationResult>> resultHandler)", "full_signature": "public void validateConfigurationResource(Buffer configurationResource, String resourceSchema,\n                                              Handler<AsyncResult<ValidationResult>> resultHandler)", "class_method_signature": "ConfigurationResourceValidator.validateConfigurationResource(Buffer configurationResource, String resourceSchema,\n                                              Handler<AsyncResult<ValidationResult>> resultHandler)", "testcase": false, "constructor": false}, {"identifier": "extractMessagesAsJson", "parameters": "(Set<ValidationMessage> valMsgs)", "modifiers": "private", "return": "JsonArray", "signature": "JsonArray extractMessagesAsJson(Set<ValidationMessage> valMsgs)", "full_signature": "private JsonArray extractMessagesAsJson(Set<ValidationMessage> valMsgs)", "class_method_signature": "ConfigurationResourceValidator.extractMessagesAsJson(Set<ValidationMessage> valMsgs)", "testcase": false, "constructor": false}], "file": "gateleen-core/src/main/java/org/swisspush/gateleen/core/configuration/ConfigurationResourceValidator.java"}, "focal_method": {"identifier": "validateConfigurationResource", "parameters": "(Buffer configurationResource, String resourceSchema,\n                                              Handler<AsyncResult<ValidationResult>> resultHandler)", "modifiers": "public", "return": "void", "body": "public void validateConfigurationResource(Buffer configurationResource, String resourceSchema,\n                                              Handler<AsyncResult<ValidationResult>> resultHandler){\n        vertx.executeBlocking(future -> {\n            if(!JsonUtil.isValidJson(configurationResource)){\n                String message = \"Unable to parse json\";\n                log.warn(message);\n                future.complete(new ValidationResult(ValidationStatus.VALIDATED_NEGATIV, message));\n                return;\n            }\n\n            if(StringUtils.isEmpty(resourceSchema)){\n                log.info(\"validated positive since no schema was provided\");\n                future.complete(new ValidationResult(ValidationStatus.VALIDATED_POSITIV));\n                return;\n            }\n\n            JsonObject schemaObject;\n            try {\n                schemaObject = new JsonObject(resourceSchema);\n            } catch(DecodeException ex) {\n                String message = \"Unable to parse json schema\";\n                log.warn(message);\n                future.complete(new ValidationResult(ValidationStatus.VALIDATED_NEGATIV, message));\n                return;\n            }\n\n            if(SCHEMA_DECLARATION.equals(schemaObject.getString(\"$schema\"))) {\n                JsonSchema schema;\n                try {\n                    schema = JsonSchemaFactory.getInstance().getSchema(resourceSchema);\n                } catch (Exception e) {\n                    String message = \"Cannot load schema\";\n                    log.warn(message, e);\n                    future.complete(new ValidationResult(ValidationStatus.VALIDATED_NEGATIV, message));\n                    return;\n                }\n                try {\n                    JsonNode jsonNode = new ObjectMapper().readTree(configurationResource.toString());\n                    final Set<ValidationMessage> valMsgs = schema.validate(jsonNode);\n                    if(valMsgs.isEmpty()) {\n                        log.info(\"validated positive\");\n                        future.complete(new ValidationResult(ValidationStatus.VALIDATED_POSITIV));\n                    } else {\n                        JsonArray validationDetails = extractMessagesAsJson(valMsgs);\n                        future.complete(new ValidationResult(ValidationStatus.VALIDATED_NEGATIV, \"Validation failed\", validationDetails));\n                    }\n                } catch (IOException e) {\n                    String message = \"Cannot read JSON\";\n                    log.warn(message, e.getMessage());\n                    future.complete(new ValidationResult(ValidationStatus.VALIDATED_NEGATIV, message));\n                }\n            } else {\n                String message = \"Invalid schema: Expected property '$schema' with content '\"+SCHEMA_DECLARATION+\"'\";\n                log.warn(message);\n                future.complete(new ValidationResult(ValidationStatus.VALIDATED_NEGATIV, message));\n            }\n        }, resultHandler);\n    }", "signature": "void validateConfigurationResource(Buffer configurationResource, String resourceSchema,\n                                              Handler<AsyncResult<ValidationResult>> resultHandler)", "full_signature": "public void validateConfigurationResource(Buffer configurationResource, String resourceSchema,\n                                              Handler<AsyncResult<ValidationResult>> resultHandler)", "class_method_signature": "ConfigurationResourceValidator.validateConfigurationResource(Buffer configurationResource, String resourceSchema,\n                                              Handler<AsyncResult<ValidationResult>> resultHandler)", "testcase": false, "constructor": false, "invocations": ["executeBlocking", "isValidJson", "warn", "complete", "isEmpty", "info", "complete", "warn", "complete", "equals", "getString", "getSchema", "getInstance", "warn", "complete", "readTree", "toString", "validate", "isEmpty", "info", "complete", "extractMessagesAsJson", "complete", "warn", "getMessage", "complete", "warn", "complete"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}