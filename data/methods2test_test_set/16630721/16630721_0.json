{"test_class": {"identifier": "SampleDaoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  private DatabaseMock db;", "modifier": "@Mock\n  private", "type": "DatabaseMock", "declarator": "db", "var_name": "db"}, {"original_string": "private Date now = new Date();", "modifier": "private", "type": "Date", "declarator": "now = new Date()", "var_name": "now"}, {"original_string": "private SampleDao sampleDao;", "modifier": "private", "type": "SampleDao", "declarator": "sampleDao", "var_name": "sampleDao"}], "file": "demo/src/test/java/SampleDaoTest.java"}, "test_case": {"identifier": "testCreate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCreate() throws Exception {\n    // Configure the mock because DAO expects the pk to be returned from the insert\n    when(db.insertReturningPk(anyString(), anyString())).thenReturn(1L);\n\n    Sample sample = new Sample();\n    sample.setName(\"Foo\");\n\n    sampleDao.createSample(sample, 1L);\n\n    // Verify object in memory is updated properly\n    assertEquals(new Long(1L), sample.getSampleId());\n    assertEquals(\"Foo\", sample.getName());\n    assertEquals(new Integer(0), sample.getUpdateSequence());\n    assertEquals(now, sample.getUpdateTime());\n\n    // Verify SQL executed against golden copies\n    verify(db).insertReturningPk(eq(\"insert into sample (sample_id, sample_name, update_sequence, update_time) values (nextval('id_seq'),?,0,?)\"), anyString());\n    verify(db).insert(eq(\"insert into sample_history (sample_id, sample_name, update_sequence, update_time, update_user_id, is_deleted) values (?,?,0,?,?,'N')\"), anyString());\n    verifyNoMoreInteractions(db);\n  }", "signature": "void testCreate()", "full_signature": "@Test public void testCreate()", "class_method_signature": "SampleDaoTest.testCreate()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "insertReturningPk", "anyString", "anyString", "setName", "createSample", "assertEquals", "getSampleId", "assertEquals", "getName", "assertEquals", "getUpdateSequence", "assertEquals", "getUpdateTime", "insertReturningPk", "verify", "eq", "anyString", "insert", "verify", "eq", "anyString", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "SampleDao", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Supplier<Database> dbp;", "modifier": "private final", "type": "Supplier<Database>", "declarator": "dbp", "var_name": "dbp"}], "methods": [{"identifier": "SampleDao", "parameters": "(Supplier<Database> dbp)", "modifiers": "public", "return": "", "signature": " SampleDao(Supplier<Database> dbp)", "full_signature": "public  SampleDao(Supplier<Database> dbp)", "class_method_signature": "SampleDao.SampleDao(Supplier<Database> dbp)", "testcase": false, "constructor": true}, {"identifier": "createSample", "parameters": "(final Sample sample, Long userIdMakingChange)", "modifiers": "public", "return": "void", "signature": "void createSample(final Sample sample, Long userIdMakingChange)", "full_signature": "public void createSample(final Sample sample, Long userIdMakingChange)", "class_method_signature": "SampleDao.createSample(final Sample sample, Long userIdMakingChange)", "testcase": false, "constructor": false}, {"identifier": "findSampleById", "parameters": "(final Long sampleId, boolean lockRow)", "modifiers": "public", "return": "Sample", "signature": "Sample findSampleById(final Long sampleId, boolean lockRow)", "full_signature": "public Sample findSampleById(final Long sampleId, boolean lockRow)", "class_method_signature": "SampleDao.findSampleById(final Long sampleId, boolean lockRow)", "testcase": false, "constructor": false}, {"identifier": "updateSample", "parameters": "(Sample sample, Long userIdMakingChange)", "modifiers": "public", "return": "void", "signature": "void updateSample(Sample sample, Long userIdMakingChange)", "full_signature": "public void updateSample(Sample sample, Long userIdMakingChange)", "class_method_signature": "SampleDao.updateSample(Sample sample, Long userIdMakingChange)", "testcase": false, "constructor": false}, {"identifier": "deleteSample", "parameters": "(Sample sample, Long userIdMakingChange)", "modifiers": "public", "return": "void", "signature": "void deleteSample(Sample sample, Long userIdMakingChange)", "full_signature": "public void deleteSample(Sample sample, Long userIdMakingChange)", "class_method_signature": "SampleDao.deleteSample(Sample sample, Long userIdMakingChange)", "testcase": false, "constructor": false}], "file": "demo/src/main/java/SampleDao.java"}, "focal_method": {"identifier": "createSample", "parameters": "(final Sample sample, Long userIdMakingChange)", "modifiers": "public", "return": "void", "body": "public void createSample(final Sample sample, Long userIdMakingChange) {\n    Database db = dbp.get();\n\n    Date updateTime = db.nowPerApp();\n    Long sampleId = db.toInsert(\n        \"insert into sample (sample_id, sample_name, update_sequence, update_time) values (?,?,0,?)\")\n        .argPkSeq(\"id_seq\")\n        .argString(sample.getName())\n        .argDate(updateTime)\n        .insertReturningPkSeq(\"sample_id\");\n\n    db.toInsert(\"insert into sample_history (sample_id, sample_name, update_sequence, update_time, update_user_id,\"\n        + \" is_deleted) values (?,?,0,?,?,'N')\")\n        .argLong(sampleId)\n        .argString(sample.getName())\n        .argDate(updateTime)\n        .argLong(userIdMakingChange)\n        .insert(1);\n\n    // Update the object in memory\n    sample.setSampleId(sampleId);\n    sample.setUpdateSequence(0);\n    sample.setUpdateTime(updateTime);\n  }", "signature": "void createSample(final Sample sample, Long userIdMakingChange)", "full_signature": "public void createSample(final Sample sample, Long userIdMakingChange)", "class_method_signature": "SampleDao.createSample(final Sample sample, Long userIdMakingChange)", "testcase": false, "constructor": false, "invocations": ["get", "nowPerApp", "insertReturningPkSeq", "argDate", "argString", "argPkSeq", "toInsert", "getName", "insert", "argLong", "argDate", "argString", "argLong", "toInsert", "getName", "setSampleId", "setUpdateSequence", "setUpdateTime"]}, "repository": {"repo_id": 16630721, "url": "https://github.com/susom/database", "stars": 32, "created": "2/7/2014 11:25:13 PM +00:00", "updates": "2019-12-26T21:46:30+00:00", "fork": "False", "license": "licensed"}}