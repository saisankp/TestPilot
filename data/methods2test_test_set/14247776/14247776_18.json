{"test_class": {"identifier": "BundleServiceTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "@Mock Scoped scoped;", "modifier": "@Mock", "type": "Scoped", "declarator": "scoped", "var_name": "scoped"}, {"original_string": "private MortarScope activityScope;", "modifier": "private", "type": "MortarScope", "declarator": "activityScope", "var_name": "activityScope"}], "file": "mortar/src/test/java/mortar/bundler/BundleServiceTest.java"}, "test_case": {"identifier": "onRegisteredIsDebounced", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void onRegisteredIsDebounced() {\n    activityScope.register(scoped);\n    activityScope.register(scoped);\n    verify(scoped, times(1)).onEnterScope(activityScope);\n  }", "signature": "void onRegisteredIsDebounced()", "full_signature": "@Test public void onRegisteredIsDebounced()", "class_method_signature": "BundleServiceTest.onRegisteredIsDebounced()", "testcase": true, "constructor": false, "invocations": ["register", "register", "onEnterScope", "verify", "times"]}, "focal_class": {"identifier": "BundleService", "superclass": "", "interfaces": "", "fields": [{"original_string": "final BundleServiceRunner runner;", "modifier": "final", "type": "BundleServiceRunner", "declarator": "runner", "var_name": "runner"}, {"original_string": "final MortarScope scope;", "modifier": "final", "type": "MortarScope", "declarator": "scope", "var_name": "scope"}, {"original_string": "final Set<Bundler> bundlers = new LinkedHashSet<>();", "modifier": "final", "type": "Set<Bundler>", "declarator": "bundlers = new LinkedHashSet<>()", "var_name": "bundlers"}, {"original_string": "Bundle scopeBundle;", "modifier": "", "type": "Bundle", "declarator": "scopeBundle", "var_name": "scopeBundle"}, {"original_string": "private List<Bundler> toBeLoaded = new ArrayList<>();", "modifier": "private", "type": "List<Bundler>", "declarator": "toBeLoaded = new ArrayList<>()", "var_name": "toBeLoaded"}], "methods": [{"identifier": "BundleService", "parameters": "(BundleServiceRunner runner, MortarScope scope)", "modifiers": "", "return": "", "signature": " BundleService(BundleServiceRunner runner, MortarScope scope)", "full_signature": "  BundleService(BundleServiceRunner runner, MortarScope scope)", "class_method_signature": "BundleService.BundleService(BundleServiceRunner runner, MortarScope scope)", "testcase": false, "constructor": true}, {"identifier": "getBundleService", "parameters": "(Context context)", "modifiers": "public static", "return": "BundleService", "signature": "BundleService getBundleService(Context context)", "full_signature": "public static BundleService getBundleService(Context context)", "class_method_signature": "BundleService.getBundleService(Context context)", "testcase": false, "constructor": false}, {"identifier": "getBundleService", "parameters": "(MortarScope scope)", "modifiers": "public static", "return": "BundleService", "signature": "BundleService getBundleService(MortarScope scope)", "full_signature": "public static BundleService getBundleService(MortarScope scope)", "class_method_signature": "BundleService.getBundleService(MortarScope scope)", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "(Bundler bundler)", "modifiers": "public", "return": "void", "signature": "void register(Bundler bundler)", "full_signature": "public void register(Bundler bundler)", "class_method_signature": "BundleService.register(Bundler bundler)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "()", "modifiers": "", "return": "void", "signature": "void init()", "full_signature": " void init()", "class_method_signature": "BundleService.init()", "testcase": false, "constructor": false}, {"identifier": "needsLoading", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean needsLoading()", "full_signature": " boolean needsLoading()", "class_method_signature": "BundleService.needsLoading()", "testcase": false, "constructor": false}, {"identifier": "loadOne", "parameters": "()", "modifiers": "", "return": "void", "signature": "void loadOne()", "full_signature": " void loadOne()", "class_method_signature": "BundleService.loadOne()", "testcase": false, "constructor": false}, {"identifier": "updateScopedBundleOnCreate", "parameters": "(Bundle rootBundle)", "modifiers": "", "return": "boolean", "signature": "boolean updateScopedBundleOnCreate(Bundle rootBundle)", "full_signature": " boolean updateScopedBundleOnCreate(Bundle rootBundle)", "class_method_signature": "BundleService.updateScopedBundleOnCreate(Bundle rootBundle)", "testcase": false, "constructor": false}, {"identifier": "findScopeBundle", "parameters": "(Bundle root)", "modifiers": "private", "return": "Bundle", "signature": "Bundle findScopeBundle(Bundle root)", "full_signature": "private Bundle findScopeBundle(Bundle root)", "class_method_signature": "BundleService.findScopeBundle(Bundle root)", "testcase": false, "constructor": false}, {"identifier": "saveToRootBundle", "parameters": "(Bundle rootBundle)", "modifiers": "", "return": "void", "signature": "void saveToRootBundle(Bundle rootBundle)", "full_signature": " void saveToRootBundle(Bundle rootBundle)", "class_method_signature": "BundleService.saveToRootBundle(Bundle rootBundle)", "testcase": false, "constructor": false}], "file": "mortar/src/main/java/mortar/bundler/BundleService.java"}, "focal_method": {"identifier": "register", "parameters": "(Bundler bundler)", "modifiers": "public", "return": "void", "body": "public void register(Bundler bundler) {\n    if (bundler == null) throw new NullPointerException(\"Cannot register null bundler.\");\n\n    if (runner.state == BundleServiceRunner.State.SAVING) {\n      throw new IllegalStateException(\"Cannot register during onSave\");\n    }\n\n    if (bundlers.add(bundler)) bundler.onEnterScope(scope);\n    String mortarBundleKey = bundler.getMortarBundleKey();\n    if (mortarBundleKey == null || mortarBundleKey.trim().equals(\"\")) {\n      throw new IllegalArgumentException(format(\"%s has null or empty bundle key\", bundler));\n    }\n\n    switch (runner.state) {\n      case IDLE:\n        toBeLoaded.add(bundler);\n        runner.servicesToBeLoaded.add(this);\n        runner.finishLoading();\n        break;\n      case LOADING:\n        if (!toBeLoaded.contains(bundler)) {\n          toBeLoaded.add(bundler);\n          runner.servicesToBeLoaded.add(this);\n        }\n        break;\n\n      default:\n        throw new AssertionError(\"Unexpected state \" + runner.state);\n    }\n  }", "signature": "void register(Bundler bundler)", "full_signature": "public void register(Bundler bundler)", "class_method_signature": "BundleService.register(Bundler bundler)", "testcase": false, "constructor": false, "invocations": ["add", "onEnterScope", "getMortarBundleKey", "equals", "trim", "format", "add", "add", "finishLoading", "contains", "add", "add"]}, "repository": {"repo_id": 14247776, "url": "https://github.com/square/mortar", "language": "Java", "is_fork": false, "fork_count": 172, "stargazer_count": 2189, "size": 884, "license": "licensed"}}