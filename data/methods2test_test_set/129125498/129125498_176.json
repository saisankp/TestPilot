{"test_class": {"identifier": "AnomalyClassifierTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AnomalyClassifier classifierUnderTest_leftTailed;", "modifier": "private", "type": "AnomalyClassifier", "declarator": "classifierUnderTest_leftTailed", "var_name": "classifierUnderTest_leftTailed"}, {"original_string": "private AnomalyClassifier classifierUnderTest_rightTailed;", "modifier": "private", "type": "AnomalyClassifier", "declarator": "classifierUnderTest_rightTailed", "var_name": "classifierUnderTest_rightTailed"}, {"original_string": "private AnomalyClassifier classifierUnderTest_twoTailed;", "modifier": "private", "type": "AnomalyClassifier", "declarator": "classifierUnderTest_twoTailed", "var_name": "classifierUnderTest_twoTailed"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/detect/outlier/algo/AnomalyClassifierTest.java"}, "test_case": {"identifier": "testUpperThresholds", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUpperThresholds() {\n        val thresholds = new AnomalyThresholds(100.0, 50.0, null, null);\n\n        Assert.assertEquals(AnomalyLevel.NORMAL, classifierUnderTest_leftTailed.classify(thresholds, 150.0));\n        assertEquals(AnomalyLevel.NORMAL, classifierUnderTest_leftTailed.classify(thresholds, 75.0));\n        assertEquals(AnomalyLevel.NORMAL, classifierUnderTest_leftTailed.classify(thresholds, 25.0));\n\n        assertEquals(AnomalyLevel.STRONG, classifierUnderTest_rightTailed.classify(thresholds, 150.0));\n        assertEquals(AnomalyLevel.WEAK, classifierUnderTest_rightTailed.classify(thresholds, 100.0));\n        assertEquals(AnomalyLevel.WEAK, classifierUnderTest_rightTailed.classify(thresholds, 75.0));\n        assertEquals(AnomalyLevel.NORMAL, classifierUnderTest_rightTailed.classify(thresholds, 50.0));\n        assertEquals(AnomalyLevel.NORMAL, classifierUnderTest_rightTailed.classify(thresholds, 25.0));\n\n        assertEquals(AnomalyLevel.STRONG, classifierUnderTest_twoTailed.classify(thresholds, 150.0));\n        assertEquals(AnomalyLevel.WEAK, classifierUnderTest_twoTailed.classify(thresholds, 100.0));\n        assertEquals(AnomalyLevel.WEAK, classifierUnderTest_twoTailed.classify(thresholds, 75.0));\n        assertEquals(AnomalyLevel.NORMAL, classifierUnderTest_twoTailed.classify(thresholds, 50.0));\n        assertEquals(AnomalyLevel.NORMAL, classifierUnderTest_twoTailed.classify(thresholds, 25.0));\n    }", "signature": "void testUpperThresholds()", "full_signature": "@Test public void testUpperThresholds()", "class_method_signature": "AnomalyClassifierTest.testUpperThresholds()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "classify", "assertEquals", "classify", "assertEquals", "classify", "assertEquals", "classify", "assertEquals", "classify", "assertEquals", "classify", "assertEquals", "classify", "assertEquals", "classify", "assertEquals", "classify", "assertEquals", "classify", "assertEquals", "classify", "assertEquals", "classify", "assertEquals", "classify"]}, "focal_class": {"identifier": "AnomalyClassifier", "superclass": "", "interfaces": "", "fields": [{"original_string": "@NonNull\n    private AnomalyType anomalyType;", "modifier": "@NonNull\n    private", "type": "AnomalyType", "declarator": "anomalyType", "var_name": "anomalyType"}], "methods": [{"identifier": "classify", "parameters": "(AnomalyThresholds thresholds, double observed)", "modifiers": "public", "return": "AnomalyLevel", "signature": "AnomalyLevel classify(AnomalyThresholds thresholds, double observed)", "full_signature": "public AnomalyLevel classify(AnomalyThresholds thresholds, double observed)", "class_method_signature": "AnomalyClassifier.classify(AnomalyThresholds thresholds, double observed)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/detect/outlier/algo/AnomalyClassifier.java"}, "focal_method": {"identifier": "classify", "parameters": "(AnomalyThresholds thresholds, double observed)", "modifiers": "public", "return": "AnomalyLevel", "body": "public AnomalyLevel classify(AnomalyThresholds thresholds, double observed) {\n        notNull(thresholds, \"thresholds can't be null\");\n\n        val checkUpper = (anomalyType == AnomalyType.RIGHT_TAILED || anomalyType == AnomalyType.TWO_TAILED);\n        val checkLower = (anomalyType == AnomalyType.LEFT_TAILED || anomalyType == AnomalyType.TWO_TAILED);\n\n        val upperStrong = thresholds.getUpperStrong();\n        val upperWeak = thresholds.getUpperWeak();\n        val lowerWeak = thresholds.getLowerWeak();\n        val lowerStrong = thresholds.getLowerStrong();\n\n        if (checkUpper) {\n            if (upperStrong != null && observed > upperStrong) {\n                return AnomalyLevel.STRONG;\n            } else if (upperWeak != null && observed > upperWeak) {\n                return AnomalyLevel.WEAK;\n            }\n        }\n\n        if (checkLower) {\n            if (lowerStrong != null && observed < lowerStrong) {\n                return AnomalyLevel.STRONG;\n            } else if (lowerWeak != null && observed < lowerWeak) {\n                return AnomalyLevel.WEAK;\n            }\n        }\n\n        return AnomalyLevel.NORMAL;\n    }", "signature": "AnomalyLevel classify(AnomalyThresholds thresholds, double observed)", "full_signature": "public AnomalyLevel classify(AnomalyThresholds thresholds, double observed)", "class_method_signature": "AnomalyClassifier.classify(AnomalyThresholds thresholds, double observed)", "testcase": false, "constructor": false, "invocations": ["notNull", "getUpperStrong", "getUpperWeak", "getLowerWeak", "getLowerStrong"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}