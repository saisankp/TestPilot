{"test_class": {"identifier": "PermutationGeneratorTest", "superclass": "extends AbstractRefinementTest", "interfaces": "", "fields": [], "file": "org.eclipse.winery.model.adaptation/src/test/java/org/eclipse/winery/model/adaptation/substitution/refinement/PermutationGeneratorTest.java"}, "test_case": {"identifier": "checkMutabilityOfPrmWithTwoPatternsHostedOnOne", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void checkMutabilityOfPrmWithTwoPatternsHostedOnOne() {\n        OTPatternRefinementModel refinementModel = generatePrmWithTwoPatternsHostedOnAThird();\n\n        PermutationGenerator permutationGenerator = new PermutationGenerator();\n        assertTrue(permutationGenerator.checkMutability(refinementModel));\n\n        List<OTPermutationMapping> permutationMappings = refinementModel.getPermutationMappings();\n        assertEquals(7, permutationMappings.size());\n        \n        assertTrue(permutationMappings.removeIf(mapping -> mapping.getDetectorElement().getId().equals(\"1\")\n            && mapping.getRefinementElement().getId().equals(\"11\")));\n        assertTrue(permutationMappings.removeIf(mapping -> mapping.getDetectorElement().getId().equals(\"3\")\n            && mapping.getRefinementElement().getId().equals(\"12\")));\n        assertTrue(permutationMappings.removeIf(mapping -> mapping.getDetectorElement().getId().equals(\"2\")\n            && mapping.getRefinementElement().getId().equals(\"13\")));\n        assertTrue(permutationMappings.removeIf(mapping -> mapping.getDetectorElement().getId().equals(\"2\")\n            && mapping.getRefinementElement().getId().equals(\"14\")));\n        assertTrue(permutationMappings.removeIf(mapping -> mapping.getDetectorElement().getId().equals(\"1--3\")\n            && mapping.getRefinementElement().getId().equals(\"12\")));\n        assertTrue(permutationMappings.removeIf(mapping -> mapping.getDetectorElement().getId().equals(\"1--2\")\n            && mapping.getRefinementElement().getId().equals(\"13\")));\n        assertTrue(permutationMappings.removeIf(mapping -> mapping.getDetectorElement().getId().equals(\"3--2\")\n            && mapping.getRefinementElement().getId().equals(\"13\")));\n    }", "signature": "void checkMutabilityOfPrmWithTwoPatternsHostedOnOne()", "full_signature": "@Test void checkMutabilityOfPrmWithTwoPatternsHostedOnOne()", "class_method_signature": "PermutationGeneratorTest.checkMutabilityOfPrmWithTwoPatternsHostedOnOne()", "testcase": true, "constructor": false, "invocations": ["generatePrmWithTwoPatternsHostedOnAThird", "assertTrue", "checkMutability", "getPermutationMappings", "assertEquals", "size", "assertTrue", "removeIf", "equals", "getId", "getDetectorElement", "equals", "getId", "getRefinementElement", "assertTrue", "removeIf", "equals", "getId", "getDetectorElement", "equals", "getId", "getRefinementElement", "assertTrue", "removeIf", "equals", "getId", "getDetectorElement", "equals", "getId", "getRefinementElement", "assertTrue", "removeIf", "equals", "getId", "getDetectorElement", "equals", "getId", "getRefinementElement", "assertTrue", "removeIf", "equals", "getId", "getDetectorElement", "equals", "getId", "getRefinementElement", "assertTrue", "removeIf", "equals", "getId", "getDetectorElement", "equals", "getId", "getRefinementElement", "assertTrue", "removeIf", "equals", "getId", "getDetectorElement", "equals", "getId", "getRefinementElement"]}, "focal_class": {"identifier": "PermutationGenerator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(PermutationGenerator.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(PermutationGenerator.class)", "var_name": "logger"}, {"original_string": "protected final Map<QName, TRelationshipType> relationshipTypes = new HashMap<>();", "modifier": "protected final", "type": "Map<QName, TRelationshipType>", "declarator": "relationshipTypes = new HashMap<>()", "var_name": "relationshipTypes"}, {"original_string": "protected final Map<QName, TNodeType> nodeTypes = new HashMap<>();", "modifier": "protected final", "type": "Map<QName, TNodeType>", "declarator": "nodeTypes = new HashMap<>()", "var_name": "nodeTypes"}, {"original_string": "protected final String errorMessage = \"Permutations cannot be determined automatically! Reason: {}.\";", "modifier": "protected final", "type": "String", "declarator": "errorMessage = \"Permutations cannot be determined automatically! Reason: {}.\"", "var_name": "errorMessage"}, {"original_string": "protected String mutabilityErrorReason = \"\";", "modifier": "protected", "type": "String", "declarator": "mutabilityErrorReason = \"\"", "var_name": "mutabilityErrorReason"}], "methods": [{"identifier": "PermutationGenerator", "parameters": "()", "modifiers": "public", "return": "", "signature": " PermutationGenerator()", "full_signature": "public  PermutationGenerator()", "class_method_signature": "PermutationGenerator.PermutationGenerator()", "testcase": false, "constructor": true}, {"identifier": "checkMutability", "parameters": "(OTTopologyFragmentRefinementModel refinementModel)", "modifiers": "public", "return": "boolean", "signature": "boolean checkMutability(OTTopologyFragmentRefinementModel refinementModel)", "full_signature": "public boolean checkMutability(OTTopologyFragmentRefinementModel refinementModel)", "class_method_signature": "PermutationGenerator.checkMutability(OTTopologyFragmentRefinementModel refinementModel)", "testcase": false, "constructor": false}, {"identifier": "checkComponentMutability", "parameters": "(TNodeTemplate refinementNode,\n                                          TNodeTemplate detectorNode,\n                                          OTTopologyFragmentRefinementModel refinementModel)", "modifiers": "private", "return": "void", "signature": "void checkComponentMutability(TNodeTemplate refinementNode,\n                                          TNodeTemplate detectorNode,\n                                          OTTopologyFragmentRefinementModel refinementModel)", "full_signature": "private void checkComponentMutability(TNodeTemplate refinementNode,\n                                          TNodeTemplate detectorNode,\n                                          OTTopologyFragmentRefinementModel refinementModel)", "class_method_signature": "PermutationGenerator.checkComponentMutability(TNodeTemplate refinementNode,\n                                          TNodeTemplate detectorNode,\n                                          OTTopologyFragmentRefinementModel refinementModel)", "testcase": false, "constructor": false}, {"identifier": "chekMutabilityOfDetectorRelations", "parameters": "(OTTopologyFragmentRefinementModel refinementModel)", "modifiers": "private", "return": "List<String>", "signature": "List<String> chekMutabilityOfDetectorRelations(OTTopologyFragmentRefinementModel refinementModel)", "full_signature": "private List<String> chekMutabilityOfDetectorRelations(OTTopologyFragmentRefinementModel refinementModel)", "class_method_signature": "PermutationGenerator.chekMutabilityOfDetectorRelations(OTTopologyFragmentRefinementModel refinementModel)", "testcase": false, "constructor": false}, {"identifier": "generatePermutations", "parameters": "(OTTopologyFragmentRefinementModel refinementModel)", "modifiers": "public", "return": "Map<String, OTTopologyFragmentRefinementModel>", "signature": "Map<String, OTTopologyFragmentRefinementModel> generatePermutations(OTTopologyFragmentRefinementModel refinementModel)", "full_signature": "public Map<String, OTTopologyFragmentRefinementModel> generatePermutations(OTTopologyFragmentRefinementModel refinementModel)", "class_method_signature": "PermutationGenerator.generatePermutations(OTTopologyFragmentRefinementModel refinementModel)", "testcase": false, "constructor": false}, {"identifier": "getMutabilityErrorReason", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getMutabilityErrorReason()", "full_signature": "public String getMutabilityErrorReason()", "class_method_signature": "PermutationGenerator.getMutabilityErrorReason()", "testcase": false, "constructor": false}, {"identifier": "addNodeFromRefinementStructureToDetector", "parameters": "(TNodeTemplate refinementElement,\n                                                                   OTTopologyFragmentRefinementModel permutation,\n                                                                   Map<String, String> alreadyAdded)", "modifiers": "private", "return": "TNodeTemplate", "signature": "TNodeTemplate addNodeFromRefinementStructureToDetector(TNodeTemplate refinementElement,\n                                                                   OTTopologyFragmentRefinementModel permutation,\n                                                                   Map<String, String> alreadyAdded)", "full_signature": "private TNodeTemplate addNodeFromRefinementStructureToDetector(TNodeTemplate refinementElement,\n                                                                   OTTopologyFragmentRefinementModel permutation,\n                                                                   Map<String, String> alreadyAdded)", "class_method_signature": "PermutationGenerator.addNodeFromRefinementStructureToDetector(TNodeTemplate refinementElement,\n                                                                   OTTopologyFragmentRefinementModel permutation,\n                                                                   Map<String, String> alreadyAdded)", "testcase": false, "constructor": false}], "file": "org.eclipse.winery.model.adaptation/src/main/java/org/eclipse/winery/model/adaptation/substitution/refinement/PermutationGenerator.java"}, "focal_method": {"identifier": "checkMutability", "parameters": "(OTTopologyFragmentRefinementModel refinementModel)", "modifiers": "public", "return": "boolean", "body": "public boolean checkMutability(OTTopologyFragmentRefinementModel refinementModel) {\n        logger.info(\"Starting mutability check of {}\", refinementModel.getIdFromIdOrNameField());\n        this.mutabilityErrorReason = \"\";\n\n        List<TNodeTemplate> detectorNodeTemplates = refinementModel.getDetector().getNodeTemplates();\n        Set<TNodeTemplate> mutableNodes = detectorNodeTemplates.stream()\n            .filter(nodeTemplate -> !isStayPlaceholder(nodeTemplate, refinementModel))\n            .collect(Collectors.toSet());\n\n        List<OTStringList> permutationOptions = new ArrayList<>();\n        refinementModel.setPermutationOptions(permutationOptions);\n        Sets.powerSet(mutableNodes).stream()\n            .filter(set -> !(\n                set.size() == 0 || set.size() == mutableNodes.size()\n            )).forEach(permutation -> permutationOptions.add(\n            new OTStringList(\n                permutation.stream()\n                    .map(HasId::getId)\n                    .collect(Collectors.toList())\n            )\n        ));\n\n        refinementModel.setComponentSets(new ArrayList<>());\n\n        for (TNodeTemplate detectorNode : detectorNodeTemplates) {\n            getAllMappingsForDetectorNode(detectorNode, refinementModel).stream()\n                .filter(mapping -> mapping.getRefinementElement() instanceof TNodeTemplate)\n                .map(mapping -> (TNodeTemplate) mapping.getRefinementElement())\n                .forEach(refinementNode ->\n                    this.checkComponentMutability(refinementNode, detectorNode, refinementModel)\n                );\n\n            ModelUtilities.getIncomingRelationshipTemplates(refinementModel.getDetector(), detectorNode)\n                .forEach(relation -> {\n                    TNodeTemplate dependantNode = (TNodeTemplate) relation.getSourceElement().getRef();\n                    if (refinementModel.getRelationMappings() != null) {\n                        refinementModel.getRelationMappings().stream()\n                            .filter(relMap -> relMap.getDetectorElement().equals(dependantNode))\n                            .filter(relMap -> RefinementUtils.canRedirectRelation(relMap, relation, this.relationshipTypes, this.nodeTypes))\n                            .findFirst()\n                            .ifPresent(relMap ->\n                                addMutabilityMapping(relMap.getDetectorElement(), relMap.getRefinementElement(), refinementModel)\n                            );\n                    }\n                });\n        }\n\n        if (refinementModel.getPermutationMappings() == null) {\n            this.mutabilityErrorReason = \"No permutation mappings could be identified\";\n            logger.info(this.errorMessage, this.mutabilityErrorReason);\n            return false;\n        }\n\n        List<String> unmappedDetectorNodes = refinementModel.getDetector().getNodeTemplates().stream()\n            .filter(detectorNode -> !isStayPlaceholder(detectorNode, refinementModel))\n            .filter(detectorNode -> !permutabilityMappingExistsForDetectorElement(detectorNode, refinementModel))\n            .map(HasId::getId)\n            .collect(Collectors.toList());\n\n        if (unmappedDetectorNodes.size() > 0) {\n            this.mutabilityErrorReason = \"There are detector nodes which could not be mapped to a refinement node: \"\n                + String.join(\", \", unmappedDetectorNodes);\n            logger.info(this.errorMessage, this.mutabilityErrorReason);\n            return false;\n        }\n\n        List<String> unmappedRefinementNodes = refinementModel.getRefinementStructure().getNodeTemplates().stream()\n            .filter(refinementNode -> !isStayingRefinementElement(refinementNode, refinementModel))\n            .filter(refinementNode -> !permutabilityMappingExistsForRefinementNode(refinementNode, refinementModel))\n            .map(HasId::getId)\n            .collect(Collectors.toList());\n\n        if (unmappedRefinementNodes.size() > 0) {\n            this.mutabilityErrorReason = \"There are refinement nodes which could not be mapped to a detector node: \"\n                + String.join(\", \", unmappedRefinementNodes);\n            logger.info(this.errorMessage, this.mutabilityErrorReason);\n            return false;\n        }\n\n        List<String> unmappableRelationIds = chekMutabilityOfDetectorRelations(refinementModel);\n\n        if (unmappableRelationIds.size() > 0) {\n            this.mutabilityErrorReason = \"There are relations that cannot be redirected during the generation: \"\n                + String.join(\", \", unmappableRelationIds);\n            logger.info(this.errorMessage, this.mutabilityErrorReason);\n            return false;\n        }\n\n        return true;\n    }", "signature": "boolean checkMutability(OTTopologyFragmentRefinementModel refinementModel)", "full_signature": "public boolean checkMutability(OTTopologyFragmentRefinementModel refinementModel)", "class_method_signature": "PermutationGenerator.checkMutability(OTTopologyFragmentRefinementModel refinementModel)", "testcase": false, "constructor": false, "invocations": ["info", "getIdFromIdOrNameField", "getNodeTemplates", "getDetector", "collect", "filter", "stream", "isStayPlaceholder", "toSet", "setPermutationOptions", "forEach", "filter", "stream", "powerSet", "size", "size", "size", "add", "collect", "map", "stream", "toList", "setComponentSets", "forEach", "map", "filter", "stream", "getAllMappingsForDetectorNode", "getRefinementElement", "getRefinementElement", "checkComponentMutability", "forEach", "getIncomingRelationshipTemplates", "getDetector", "getRef", "getSourceElement", "getRelationMappings", "ifPresent", "findFirst", "filter", "filter", "stream", "getRelationMappings", "equals", "getDetectorElement", "canRedirectRelation", "addMutabilityMapping", "getDetectorElement", "getRefinementElement", "getPermutationMappings", "info", "collect", "map", "filter", "filter", "stream", "getNodeTemplates", "getDetector", "isStayPlaceholder", "permutabilityMappingExistsForDetectorElement", "toList", "size", "join", "info", "collect", "map", "filter", "filter", "stream", "getNodeTemplates", "getRefinementStructure", "isStayingRefinementElement", "permutabilityMappingExistsForRefinementNode", "toList", "size", "join", "info", "chekMutabilityOfDetectorRelations", "size", "join", "info"]}, "repository": {"repo_id": 42622157, "url": "https://github.com/eclipse/winery", "stars": 34, "created": "9/17/2015 12:31:44 AM +00:00", "updates": "2020-01-22T09:32:00+00:00", "fork": "False", "license": "licensed"}}