{"test_class": {"identifier": "LocalAndroidPlatformsTest", "superclass": "", "interfaces": "", "fields": [], "file": "sdkfido/src/test/java/net/erdfelt/android/sdkfido/local/LocalAndroidPlatformsTest.java"}, "test_case": {"identifier": "testFindLocalJavaSdk", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindLocalJavaSdk() {\n        try {\n            File dir = LocalAndroidPlatforms.findLocalJavaSdk();\n            System.out.println(\"Local Android SDK Dir = \" + dir);\n            if (dir != null) {\n                LocalAndroidPlatforms platforms = new LocalAndroidPlatforms(dir);\n                System.out.println(\"LocalAndroidPlatforms = \" + platforms);\n            }\n        } catch (IOException e) {\n            e.printStackTrace(); // Intentionally swallow exceptions, don't want JUnit to know about em.\n        }\n    }", "signature": "void testFindLocalJavaSdk()", "full_signature": "@Test public void testFindLocalJavaSdk()", "class_method_signature": "LocalAndroidPlatformsTest.testFindLocalJavaSdk()", "testcase": true, "constructor": false, "invocations": ["findLocalJavaSdk", "println", "println", "printStackTrace"]}, "focal_class": {"identifier": "LocalAndroidPlatforms", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = Logger.getLogger(LocalAndroidPlatforms.class.getName());", "modifier": "private static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(LocalAndroidPlatforms.class.getName())", "var_name": "LOG"}, {"original_string": "private File                         homeDir;", "modifier": "private", "type": "File", "declarator": "homeDir", "var_name": "homeDir"}, {"original_string": "private int                          sdkRelease;", "modifier": "private", "type": "int", "declarator": "sdkRelease", "var_name": "sdkRelease"}, {"original_string": "private boolean                      valid;", "modifier": "private", "type": "boolean", "declarator": "valid", "var_name": "valid"}, {"original_string": "private Map<String, AndroidPlatform> platforms;", "modifier": "private", "type": "Map<String, AndroidPlatform>", "declarator": "platforms", "var_name": "platforms"}], "methods": [{"identifier": "findLocalJavaSdk", "parameters": "()", "modifiers": "public static", "return": "File", "signature": "File findLocalJavaSdk()", "full_signature": "public static File findLocalJavaSdk()", "class_method_signature": "LocalAndroidPlatforms.findLocalJavaSdk()", "testcase": false, "constructor": false}, {"identifier": "getEnvironmentVariableDir", "parameters": "(StringBuilder err, String key)", "modifiers": "private static", "return": "File", "signature": "File getEnvironmentVariableDir(StringBuilder err, String key)", "full_signature": "private static File getEnvironmentVariableDir(StringBuilder err, String key)", "class_method_signature": "LocalAndroidPlatforms.getEnvironmentVariableDir(StringBuilder err, String key)", "testcase": false, "constructor": false}, {"identifier": "LocalAndroidPlatforms", "parameters": "(File dir)", "modifiers": "public", "return": "", "signature": " LocalAndroidPlatforms(File dir)", "full_signature": "public  LocalAndroidPlatforms(File dir)", "class_method_signature": "LocalAndroidPlatforms.LocalAndroidPlatforms(File dir)", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "LocalAndroidPlatforms.toString()", "testcase": false, "constructor": false}, {"identifier": "addPlatform", "parameters": "(AndroidPlatform platform)", "modifiers": "public", "return": "void", "signature": "void addPlatform(AndroidPlatform platform)", "full_signature": "public void addPlatform(AndroidPlatform platform)", "class_method_signature": "LocalAndroidPlatforms.addPlatform(AndroidPlatform platform)", "testcase": false, "constructor": false}, {"identifier": "valid", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean valid()", "full_signature": "public boolean valid()", "class_method_signature": "LocalAndroidPlatforms.valid()", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean exists()", "full_signature": "public boolean exists()", "class_method_signature": "LocalAndroidPlatforms.exists()", "testcase": false, "constructor": false}, {"identifier": "getPlatform", "parameters": "(String id)", "modifiers": "public", "return": "AndroidPlatform", "signature": "AndroidPlatform getPlatform(String id)", "full_signature": "public AndroidPlatform getPlatform(String id)", "class_method_signature": "LocalAndroidPlatforms.getPlatform(String id)", "testcase": false, "constructor": false}, {"identifier": "getPlatforms", "parameters": "()", "modifiers": "public", "return": "Collection<AndroidPlatform>", "signature": "Collection<AndroidPlatform> getPlatforms()", "full_signature": "public Collection<AndroidPlatform> getPlatforms()", "class_method_signature": "LocalAndroidPlatforms.getPlatforms()", "testcase": false, "constructor": false}, {"identifier": "getSdkRelease", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSdkRelease()", "full_signature": "public int getSdkRelease()", "class_method_signature": "LocalAndroidPlatforms.getSdkRelease()", "testcase": false, "constructor": false}, {"identifier": "loadPlatform", "parameters": "(File subdir)", "modifiers": "private final", "return": "AndroidPlatform", "signature": "AndroidPlatform loadPlatform(File subdir)", "full_signature": "private final AndroidPlatform loadPlatform(File subdir)", "class_method_signature": "LocalAndroidPlatforms.loadPlatform(File subdir)", "testcase": false, "constructor": false}, {"identifier": "loadPlatformsDir", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void loadPlatformsDir()", "full_signature": "private void loadPlatformsDir()", "class_method_signature": "LocalAndroidPlatforms.loadPlatformsDir()", "testcase": false, "constructor": false}, {"identifier": "loadProperties", "parameters": "(File propFile)", "modifiers": "private final", "return": "Properties", "signature": "Properties loadProperties(File propFile)", "full_signature": "private final Properties loadProperties(File propFile)", "class_method_signature": "LocalAndroidPlatforms.loadProperties(File propFile)", "testcase": false, "constructor": false}, {"identifier": "loadToolsDir", "parameters": "()", "modifiers": "private final", "return": "void", "signature": "void loadToolsDir()", "full_signature": "private final void loadToolsDir()", "class_method_signature": "LocalAndroidPlatforms.loadToolsDir()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "LocalAndroidPlatforms.size()", "testcase": false, "constructor": false}, {"identifier": "toInt", "parameters": "(String raw)", "modifiers": "private final", "return": "int", "signature": "int toInt(String raw)", "full_signature": "private final int toInt(String raw)", "class_method_signature": "LocalAndroidPlatforms.toInt(String raw)", "testcase": false, "constructor": false}, {"identifier": "getDir", "parameters": "()", "modifiers": "public", "return": "File", "signature": "File getDir()", "full_signature": "public File getDir()", "class_method_signature": "LocalAndroidPlatforms.getDir()", "testcase": false, "constructor": false}, {"identifier": "getBin", "parameters": "(String binname)", "modifiers": "public", "return": "File", "signature": "File getBin(String binname)", "full_signature": "public File getBin(String binname)", "class_method_signature": "LocalAndroidPlatforms.getBin(String binname)", "testcase": false, "constructor": false}, {"identifier": "hasApiLevel", "parameters": "(String apilevel)", "modifiers": "public", "return": "boolean", "signature": "boolean hasApiLevel(String apilevel)", "full_signature": "public boolean hasApiLevel(String apilevel)", "class_method_signature": "LocalAndroidPlatforms.hasApiLevel(String apilevel)", "testcase": false, "constructor": false}], "file": "sdkfido/src/main/java/net/erdfelt/android/sdkfido/local/LocalAndroidPlatforms.java"}, "focal_method": {"identifier": "findLocalJavaSdk", "parameters": "()", "modifiers": "public static", "return": "File", "body": "public static File findLocalJavaSdk() throws IOException {\n        StringBuilder err = new StringBuilder();\n        err.append(\"Unable to find the Local Android Java SDK Folder.\");\n\n        // Check Environment Variables First\n        String envKeys[] = { \"ANDROID_HOME\", \"ANDROID_SDK_ROOT\" };\n        for (String envKey : envKeys) {\n            File sdkHome = getEnvironmentVariableDir(err, envKey);\n            if (sdkHome == null) {\n                continue; // skip, not found on that key\n            }\n            LocalAndroidPlatforms platforms = new LocalAndroidPlatforms(sdkHome);\n            if (platforms.valid()) {\n                return sdkHome;\n            }\n        }\n\n        // Check Path for possible android.exe (or similar)\n        List<String> searchBins = new ArrayList<String>();\n        if (SystemUtils.IS_OS_WINDOWS) {\n            searchBins.add(\"adb.exe\");\n            searchBins.add(\"emulator.exe\");\n            searchBins.add(\"android.exe\");\n        } else {\n            searchBins.add(\"adb\");\n            searchBins.add(\"emulator\");\n            searchBins.add(\"android\");\n        }\n\n        String pathParts[] = StringUtils.split(System.getenv(\"PATH\"), File.pathSeparatorChar);\n        for (String searchBin : searchBins) {\n            err.append(\"\\nSearched PATH for \").append(searchBin);\n            for (String pathPart : pathParts) {\n                File pathDir = new File(pathPart);\n                LOG.fine(\"Searching Path: \" + pathDir);\n                File bin = new File(pathDir, searchBin);\n                if (bin.exists() && bin.isFile() && bin.canExecute()) {\n                    File homeDir = bin.getParentFile().getParentFile();\n                    LOG.fine(\"Possible Home Dir: \" + homeDir);\n                    LocalAndroidPlatforms platforms = new LocalAndroidPlatforms(homeDir);\n                    if (platforms.valid) {\n                        return homeDir;\n                    }\n                }\n            }\n            err.append(\", not found.\");\n        }\n\n        throw new FileNotFoundException(err.toString());\n    }", "signature": "File findLocalJavaSdk()", "full_signature": "public static File findLocalJavaSdk()", "class_method_signature": "LocalAndroidPlatforms.findLocalJavaSdk()", "testcase": false, "constructor": false, "invocations": ["append", "getEnvironmentVariableDir", "valid", "add", "add", "add", "add", "add", "add", "split", "getenv", "append", "append", "fine", "exists", "isFile", "canExecute", "getParentFile", "getParentFile", "fine", "append", "toString"]}, "repository": {"repo_id": 1332011, "url": "https://github.com/joakime/android-sdkfido", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 9, "size": 984, "license": "licensed"}}