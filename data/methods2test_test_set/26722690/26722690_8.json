{"test_class": {"identifier": "PluginUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "commons/src/test/java/org/restheart/utils/PluginUtilsTest.java"}, "test_case": {"identifier": "testDontInterceptDefault", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDontInterceptDefault() {\n        var plugin = new TestPluginDefault();\n\n        InterceptPoint[] expected = {};\n\n        assertArrayEquals(expected,\n                PluginUtils.dontIntercept(plugin));\n    }", "signature": "void testDontInterceptDefault()", "full_signature": "@Test public void testDontInterceptDefault()", "class_method_signature": "PluginUtilsTest.testDontInterceptDefault()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "dontIntercept"]}, "focal_class": {"identifier": "PluginUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static LoadingCache<ExchangeTypeResolver, Type> RC = CacheFactory\n            .createLocalLoadingCache(\n                    Integer.MAX_VALUE,\n                    Cache.EXPIRE_POLICY.NEVER, 0,\n                    plugin -> plugin.requestType());", "modifier": "private static", "type": "LoadingCache<ExchangeTypeResolver, Type>", "declarator": "RC = CacheFactory\n            .createLocalLoadingCache(\n                    Integer.MAX_VALUE,\n                    Cache.EXPIRE_POLICY.NEVER, 0,\n                    plugin -> plugin.requestType())", "var_name": "RC"}, {"original_string": "private static LoadingCache<ExchangeTypeResolver, Type> SC = CacheFactory\n            .createLocalLoadingCache(\n                    Integer.MAX_VALUE,\n                    Cache.EXPIRE_POLICY.NEVER, 0,\n                    plugin -> plugin.responseType());", "modifier": "private static", "type": "LoadingCache<ExchangeTypeResolver, Type>", "declarator": "SC = CacheFactory\n            .createLocalLoadingCache(\n                    Integer.MAX_VALUE,\n                    Cache.EXPIRE_POLICY.NEVER, 0,\n                    plugin -> plugin.responseType())", "var_name": "SC"}], "methods": [{"identifier": "interceptPoint", "parameters": "(Interceptor interceptor)", "modifiers": "public static", "return": "InterceptPoint", "signature": "InterceptPoint interceptPoint(Interceptor interceptor)", "full_signature": "public static InterceptPoint interceptPoint(Interceptor interceptor)", "class_method_signature": "PluginUtils.interceptPoint(Interceptor interceptor)", "testcase": false, "constructor": false}, {"identifier": "initPoint", "parameters": "(Initializer initializer)", "modifiers": "public static", "return": "InitPoint", "signature": "InitPoint initPoint(Initializer initializer)", "full_signature": "public static InitPoint initPoint(Initializer initializer)", "class_method_signature": "PluginUtils.initPoint(Initializer initializer)", "testcase": false, "constructor": false}, {"identifier": "requiresContent", "parameters": "(Interceptor interceptor)", "modifiers": "public static", "return": "boolean", "signature": "boolean requiresContent(Interceptor interceptor)", "full_signature": "public static boolean requiresContent(Interceptor interceptor)", "class_method_signature": "PluginUtils.requiresContent(Interceptor interceptor)", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "(Plugin plugin)", "modifiers": "public static", "return": "String", "signature": "String name(Plugin plugin)", "full_signature": "public static String name(Plugin plugin)", "class_method_signature": "PluginUtils.name(Plugin plugin)", "testcase": false, "constructor": false}, {"identifier": "defaultURI", "parameters": "(Service service)", "modifiers": "public static", "return": "String", "signature": "String defaultURI(Service service)", "full_signature": "public static String defaultURI(Service service)", "class_method_signature": "PluginUtils.defaultURI(Service service)", "testcase": false, "constructor": false}, {"identifier": "defaultURI", "parameters": "(Class<P> serviceClass)", "modifiers": "public static", "return": "String", "signature": "String defaultURI(Class<P> serviceClass)", "full_signature": "public static String defaultURI(Class<P> serviceClass)", "class_method_signature": "PluginUtils.defaultURI(Class<P> serviceClass)", "testcase": false, "constructor": false}, {"identifier": "actualUri", "parameters": "(Map<String, Object> conf,\n            Class<P> serviceClass)", "modifiers": "public static", "return": "String", "signature": "String actualUri(Map<String, Object> conf,\n            Class<P> serviceClass)", "full_signature": "public static String actualUri(Map<String, Object> conf,\n            Class<P> serviceClass)", "class_method_signature": "PluginUtils.actualUri(Map<String, Object> conf,\n            Class<P> serviceClass)", "testcase": false, "constructor": false}, {"identifier": "dontIntercept", "parameters": "(Service service)", "modifiers": "public static", "return": "InterceptPoint[]", "signature": "InterceptPoint[] dontIntercept(Service service)", "full_signature": "public static InterceptPoint[] dontIntercept(Service service)", "class_method_signature": "PluginUtils.dontIntercept(Service service)", "testcase": false, "constructor": false}, {"identifier": "handlingService", "parameters": "(PluginsRegistry registry,\n            HttpServerExchange exchange)", "modifiers": "public static", "return": "Service", "signature": "Service handlingService(PluginsRegistry registry,\n            HttpServerExchange exchange)", "full_signature": "public static Service handlingService(PluginsRegistry registry,\n            HttpServerExchange exchange)", "class_method_signature": "PluginUtils.handlingService(PluginsRegistry registry,\n            HttpServerExchange exchange)", "testcase": false, "constructor": false}, {"identifier": "dontIntercept", "parameters": "(PluginsRegistry registry,\n            HttpServerExchange exchange)", "modifiers": "public static", "return": "InterceptPoint[]", "signature": "InterceptPoint[] dontIntercept(PluginsRegistry registry,\n            HttpServerExchange exchange)", "full_signature": "public static InterceptPoint[] dontIntercept(PluginsRegistry registry,\n            HttpServerExchange exchange)", "class_method_signature": "PluginUtils.dontIntercept(PluginsRegistry registry,\n            HttpServerExchange exchange)", "testcase": false, "constructor": false}, {"identifier": "pipelineInfo", "parameters": "(HttpServerExchange exchange)", "modifiers": "public static", "return": "PipelineInfo", "signature": "PipelineInfo pipelineInfo(HttpServerExchange exchange)", "full_signature": "public static PipelineInfo pipelineInfo(HttpServerExchange exchange)", "class_method_signature": "PluginUtils.pipelineInfo(HttpServerExchange exchange)", "testcase": false, "constructor": false}, {"identifier": "cachedRequestType", "parameters": "(ExchangeTypeResolver plugin)", "modifiers": "public static", "return": "Type", "signature": "Type cachedRequestType(ExchangeTypeResolver plugin)", "full_signature": "public static Type cachedRequestType(ExchangeTypeResolver plugin)", "class_method_signature": "PluginUtils.cachedRequestType(ExchangeTypeResolver plugin)", "testcase": false, "constructor": false}, {"identifier": "cachedResponseType", "parameters": "(ExchangeTypeResolver plugin)", "modifiers": "public static", "return": "Type", "signature": "Type cachedResponseType(ExchangeTypeResolver plugin)", "full_signature": "public static Type cachedResponseType(ExchangeTypeResolver plugin)", "class_method_signature": "PluginUtils.cachedResponseType(ExchangeTypeResolver plugin)", "testcase": false, "constructor": false}], "file": "commons/src/main/java/org/restheart/utils/PluginUtils.java"}, "focal_method": {"identifier": "dontIntercept", "parameters": "(Service service)", "modifiers": "public static", "return": "InterceptPoint[]", "body": "public static InterceptPoint[] dontIntercept(Service service) {\n        var a = service.getClass()\n                .getDeclaredAnnotation(RegisterPlugin.class);\n\n        if (a == null) {\n            return new InterceptPoint[0];\n        } else {\n            return a.dontIntercept();\n        }\n    }", "signature": "InterceptPoint[] dontIntercept(Service service)", "full_signature": "public static InterceptPoint[] dontIntercept(Service service)", "class_method_signature": "PluginUtils.dontIntercept(Service service)", "testcase": false, "constructor": false, "invocations": ["getDeclaredAnnotation", "getClass", "dontIntercept"]}, "repository": {"repo_id": 26722690, "url": "https://github.com/SoftInstigate/restheart", "stars": 582, "created": "11/16/2014 6:01:01 PM +00:00", "updates": "2020-01-18T15:31:59+00:00", "fork": "False", "license": "licensed"}}