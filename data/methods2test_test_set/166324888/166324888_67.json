{"test_class": {"identifier": "NumberParserUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "@Rule\n    public RxJavaTestSchedulerRule rule = new RxJavaTestSchedulerRule();", "modifier": "@Rule\n    public", "type": "RxJavaTestSchedulerRule", "declarator": "rule = new RxJavaTestSchedulerRule()", "var_name": "rule"}, {"original_string": "@Mock\n    public NodeManager nodeManager;", "modifier": "@Mock\n    public", "type": "NodeManager", "declarator": "nodeManager", "var_name": "nodeManager"}, {"original_string": "@Mock\n    public Node node;", "modifier": "@Mock\n    public", "type": "Node", "declarator": "node", "var_name": "node"}], "file": "wallet/src/test/java/com/platon/aton/utils/NumberParserUtilsTest.java"}, "test_case": {"identifier": "parseDouble", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public  void  parseDouble(){\n        double resultValue = 0;\n        String value =\"10.648798787987979\";\n        resultValue = Double.parseDouble(value);\n        Log.d(\"======\", \"\u5f97\u5230\u7ed3\u679cresult---------->\" + new BigDecimal(resultValue));\n        Log.d(\"======\", \"\u5f97\u5230\u7ed3\u679cresult---------->\" + resultValue);\n\n    }", "signature": "void parseDouble()", "full_signature": "@Test public void parseDouble()", "class_method_signature": "NumberParserUtilsTest.parseDouble()", "testcase": true, "constructor": false, "invocations": ["parseDouble", "d", "d"]}, "focal_class": {"identifier": "NumberParserUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static BigDecimal VALUE_1E10 = BigDecimal.valueOf(10000000000L);", "modifier": "private final static", "type": "BigDecimal", "declarator": "VALUE_1E10 = BigDecimal.valueOf(10000000000L)", "var_name": "VALUE_1E10"}], "methods": [{"identifier": "NumberParserUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " NumberParserUtils()", "full_signature": "private  NumberParserUtils()", "class_method_signature": "NumberParserUtils.NumberParserUtils()", "testcase": false, "constructor": true}, {"identifier": "parseLong", "parameters": "(double value)", "modifiers": "public static", "return": "long", "signature": "long parseLong(double value)", "full_signature": "public static long parseLong(double value)", "class_method_signature": "NumberParserUtils.parseLong(double value)", "testcase": false, "constructor": false}, {"identifier": "parseLong", "parameters": "(String value)", "modifiers": "public static", "return": "long", "signature": "long parseLong(String value)", "full_signature": "public static long parseLong(String value)", "class_method_signature": "NumberParserUtils.parseLong(String value)", "testcase": false, "constructor": false}, {"identifier": "parseLong", "parameters": "(String value, long defaultValue)", "modifiers": "public static", "return": "long", "signature": "long parseLong(String value, long defaultValue)", "full_signature": "public static long parseLong(String value, long defaultValue)", "class_method_signature": "NumberParserUtils.parseLong(String value, long defaultValue)", "testcase": false, "constructor": false}, {"identifier": "parseDouble", "parameters": "(String value)", "modifiers": "public static", "return": "double", "signature": "double parseDouble(String value)", "full_signature": "public static double parseDouble(String value)", "class_method_signature": "NumberParserUtils.parseDouble(String value)", "testcase": false, "constructor": false}, {"identifier": "parseDouble", "parameters": "(String value, double defaultValue)", "modifiers": "public static", "return": "double", "signature": "double parseDouble(String value, double defaultValue)", "full_signature": "public static double parseDouble(String value, double defaultValue)", "class_method_signature": "NumberParserUtils.parseDouble(String value, double defaultValue)", "testcase": false, "constructor": false}, {"identifier": "parseFloat", "parameters": "(String value)", "modifiers": "public static", "return": "float", "signature": "float parseFloat(String value)", "full_signature": "public static float parseFloat(String value)", "class_method_signature": "NumberParserUtils.parseFloat(String value)", "testcase": false, "constructor": false}, {"identifier": "parseFloat", "parameters": "(String value, float defaultValue)", "modifiers": "public static", "return": "float", "signature": "float parseFloat(String value, float defaultValue)", "full_signature": "public static float parseFloat(String value, float defaultValue)", "class_method_signature": "NumberParserUtils.parseFloat(String value, float defaultValue)", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "(String value)", "modifiers": "public static", "return": "int", "signature": "int parseInt(String value)", "full_signature": "public static int parseInt(String value)", "class_method_signature": "NumberParserUtils.parseInt(String value)", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "(String value, int defaultValue)", "modifiers": "public static", "return": "int", "signature": "int parseInt(String value, int defaultValue)", "full_signature": "public static int parseInt(String value, int defaultValue)", "class_method_signature": "NumberParserUtils.parseInt(String value, int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "parseInt", "parameters": "(Object object)", "modifiers": "public static", "return": "int", "signature": "int parseInt(Object object)", "full_signature": "public static int parseInt(Object object)", "class_method_signature": "NumberParserUtils.parseInt(Object object)", "testcase": false, "constructor": false}, {"identifier": "parseDouble", "parameters": "(Object object)", "modifiers": "public static", "return": "double", "signature": "double parseDouble(Object object)", "full_signature": "public static double parseDouble(Object object)", "class_method_signature": "NumberParserUtils.parseDouble(Object object)", "testcase": false, "constructor": false}, {"identifier": "parseDoubleToPrettyNumber", "parameters": "(double value)", "modifiers": "public static", "return": "String", "signature": "String parseDoubleToPrettyNumber(double value)", "full_signature": "public static String parseDoubleToPrettyNumber(double value)", "class_method_signature": "NumberParserUtils.parseDoubleToPrettyNumber(double value)", "testcase": false, "constructor": false}, {"identifier": "parseStringWithoutTwoDecimals", "parameters": "(String value)", "modifiers": "public static", "return": "String", "signature": "String parseStringWithoutTwoDecimals(String value)", "full_signature": "public static String parseStringWithoutTwoDecimals(String value)", "class_method_signature": "NumberParserUtils.parseStringWithoutTwoDecimals(String value)", "testcase": false, "constructor": false}, {"identifier": "parseStringWithoutTwoDecimalsToInt", "parameters": "(String value)", "modifiers": "public static", "return": "String", "signature": "String parseStringWithoutTwoDecimalsToInt(String value)", "full_signature": "public static String parseStringWithoutTwoDecimalsToInt(String value)", "class_method_signature": "NumberParserUtils.parseStringWithoutTwoDecimalsToInt(String value)", "testcase": false, "constructor": false}, {"identifier": "parseStringWithFractionDigits", "parameters": "(String value, int fractionDigits)", "modifiers": "public static", "return": "String", "signature": "String parseStringWithFractionDigits(String value, int fractionDigits)", "full_signature": "public static String parseStringWithFractionDigits(String value, int fractionDigits)", "class_method_signature": "NumberParserUtils.parseStringWithFractionDigits(String value, int fractionDigits)", "testcase": false, "constructor": false}, {"identifier": "getPrettyNumber", "parameters": "(String number)", "modifiers": "public static", "return": "String", "signature": "String getPrettyNumber(String number)", "full_signature": "public static String getPrettyNumber(String number)", "class_method_signature": "NumberParserUtils.getPrettyNumber(String number)", "testcase": false, "constructor": false}, {"identifier": "getPrettyBalance", "parameters": "(String balance)", "modifiers": "public static", "return": "String", "signature": "String getPrettyBalance(String balance)", "full_signature": "public static String getPrettyBalance(String balance)", "class_method_signature": "NumberParserUtils.getPrettyBalance(String balance)", "testcase": false, "constructor": false}, {"identifier": "getPrettyBalance", "parameters": "(double balance)", "modifiers": "public static", "return": "String", "signature": "String getPrettyBalance(double balance)", "full_signature": "public static String getPrettyBalance(double balance)", "class_method_signature": "NumberParserUtils.getPrettyBalance(double balance)", "testcase": false, "constructor": false}, {"identifier": "getPrettyDetailBalance", "parameters": "(double balance)", "modifiers": "public static", "return": "String", "signature": "String getPrettyDetailBalance(double balance)", "full_signature": "public static String getPrettyDetailBalance(double balance)", "class_method_signature": "NumberParserUtils.getPrettyDetailBalance(double balance)", "testcase": false, "constructor": false}, {"identifier": "getPrettyNumber", "parameters": "(double value, int maxDigit)", "modifiers": "public static", "return": "String", "signature": "String getPrettyNumber(double value, int maxDigit)", "full_signature": "public static String getPrettyNumber(double value, int maxDigit)", "class_method_signature": "NumberParserUtils.getPrettyNumber(double value, int maxDigit)", "testcase": false, "constructor": false}, {"identifier": "getPrettyNumber", "parameters": "(double value, int maxDigit, int roundingMode)", "modifiers": "public static", "return": "String", "signature": "String getPrettyNumber(double value, int maxDigit, int roundingMode)", "full_signature": "public static String getPrettyNumber(double value, int maxDigit, int roundingMode)", "class_method_signature": "NumberParserUtils.getPrettyNumber(double value, int maxDigit, int roundingMode)", "testcase": false, "constructor": false}, {"identifier": "getPrettyNumber", "parameters": "(String value, int maxDigit)", "modifiers": "public static", "return": "String", "signature": "String getPrettyNumber(String value, int maxDigit)", "full_signature": "public static String getPrettyNumber(String value, int maxDigit)", "class_method_signature": "NumberParserUtils.getPrettyNumber(String value, int maxDigit)", "testcase": false, "constructor": false}, {"identifier": "getPrettyBalance", "parameters": "(String value, int maxDigit)", "modifiers": "public static", "return": "String", "signature": "String getPrettyBalance(String value, int maxDigit)", "full_signature": "public static String getPrettyBalance(String value, int maxDigit)", "class_method_signature": "NumberParserUtils.getPrettyBalance(String value, int maxDigit)", "testcase": false, "constructor": false}], "file": "wallet/src/main/java/com/platon/aton/utils/NumberParserUtils.java"}, "focal_method": {"identifier": "parseDouble", "parameters": "(String value)", "modifiers": "public static", "return": "double", "body": "public static double parseDouble(String value) {\n        return parseDouble(TextUtils.isEmpty(value) ? \"0\" : value, 0.0D);\n    }", "signature": "double parseDouble(String value)", "full_signature": "public static double parseDouble(String value)", "class_method_signature": "NumberParserUtils.parseDouble(String value)", "testcase": false, "constructor": false, "invocations": ["parseDouble", "isEmpty"]}, "repository": {"repo_id": 166324888, "url": "https://github.com/PlatONnetwork/ATON-Android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 8, "size": 118901, "license": "licensed"}}