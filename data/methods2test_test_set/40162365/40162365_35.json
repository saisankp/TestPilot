{"test_class": {"identifier": "PauseResumeAudioRecorderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PauseResumeAudioRecorder pauseResumeAudioRecorder;", "modifier": "private", "type": "PauseResumeAudioRecorder", "declarator": "pauseResumeAudioRecorder", "var_name": "pauseResumeAudioRecorder"}, {"original_string": "private boolean failTest;", "modifier": "private", "type": "boolean", "declarator": "failTest", "var_name": "failTest"}, {"original_string": "private Field sampleRateInHertzField;", "modifier": "private", "type": "Field", "declarator": "sampleRateInHertzField", "var_name": "sampleRateInHertzField"}, {"original_string": "private Field channelConfigField;", "modifier": "private", "type": "Field", "declarator": "channelConfigField", "var_name": "channelConfigField"}, {"original_string": "private Field audioEncodingField;", "modifier": "private", "type": "Field", "declarator": "audioEncodingField", "var_name": "audioEncodingField"}, {"original_string": "private Field audioFileField;", "modifier": "private", "type": "Field", "declarator": "audioFileField", "var_name": "audioFileField"}, {"original_string": "private Field currentAudioStateField;", "modifier": "private", "type": "Field", "declarator": "currentAudioStateField", "var_name": "currentAudioStateField"}, {"original_string": "private Field currentAudioRecordingThreadField;", "modifier": "private", "type": "Field", "declarator": "currentAudioRecordingThreadField", "var_name": "currentAudioRecordingThreadField"}, {"original_string": "private Field recordingStartTimeMillisField;", "modifier": "private", "type": "Field", "declarator": "recordingStartTimeMillisField", "var_name": "recordingStartTimeMillisField"}, {"original_string": "private Field remainingMaxTimeInMillisField;", "modifier": "private", "type": "Field", "declarator": "remainingMaxTimeInMillisField", "var_name": "remainingMaxTimeInMillisField"}, {"original_string": "private Field onTimeCompletedTimerField;", "modifier": "private", "type": "Field", "declarator": "onTimeCompletedTimerField", "var_name": "onTimeCompletedTimerField"}, {"original_string": "private Field onTimeCompletionTimerTaskField;", "modifier": "private", "type": "Field", "declarator": "onTimeCompletionTimerTaskField", "var_name": "onTimeCompletionTimerTaskField"}, {"original_string": "private Field onTimeCompletionListenerField;", "modifier": "private", "type": "Field", "declarator": "onTimeCompletionListenerField", "var_name": "onTimeCompletionListenerField"}, {"original_string": "private Field maxTimeInMillisField;", "modifier": "private", "type": "Field", "declarator": "maxTimeInMillisField", "var_name": "maxTimeInMillisField"}, {"original_string": "private Field onFileSizeReachedListenerField;", "modifier": "private", "type": "Field", "declarator": "onFileSizeReachedListenerField", "var_name": "onFileSizeReachedListenerField"}, {"original_string": "private Field maxFileSizeInBytesField;", "modifier": "private", "type": "Field", "declarator": "maxFileSizeInBytesField", "var_name": "maxFileSizeInBytesField"}, {"original_string": "private Field audioRecordThreadField;", "modifier": "private", "type": "Field", "declarator": "audioRecordThreadField", "var_name": "audioRecordThreadField"}, {"original_string": "@Mock\n    private Timer mockTimer;", "modifier": "@Mock\n    private", "type": "Timer", "declarator": "mockTimer", "var_name": "mockTimer"}], "file": "library/src/test/java/com/github/republicofgavin/pauseresumeaudiorecorder/PauseResumeAudioRecorderTest.java"}, "test_case": {"identifier": "testStartRecording", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStartRecording()throws NoSuchFieldException, IllegalAccessException,InterruptedException{\n        PauseResumeAudioRecorder pauseResumeAudioRecorder=new PauseResumeAudioRecorder();\n        pauseResumeAudioRecorder.setAudioFile(Environment.getExternalStorageDirectory() + \"/recording.wav\");\n        pauseResumeAudioRecorder.setChannel(AudioFormat.CHANNEL_IN_STEREO);\n        pauseResumeAudioRecorder.setSampleRate(44100);\n        pauseResumeAudioRecorder.setAudioEncoding(AudioFormat.ENCODING_PCM_8BIT);\n\n        pauseResumeAudioRecorder.startRecording();\n\n        Assert.assertNotNull(\"Recording thread is not created\", currentAudioRecordingThreadField.get(pauseResumeAudioRecorder));\n        Assert.assertEquals(\"Correct state not set\", PauseResumeAudioRecorder.RECORDING_STATE, pauseResumeAudioRecorder.getCurrentState());\n        Assert.assertNotNull(\"Timer is null\", onTimeCompletedTimerField.get(pauseResumeAudioRecorder));\n        Assert.assertNotNull(\"TimerTask is null\",onTimeCompletionTimerTaskField.get(pauseResumeAudioRecorder));\n        Assert.assertTrue(\"start time not set\",((long)recordingStartTimeMillisField.get(pauseResumeAudioRecorder))>=0);\n\n        Thread.sleep(100);//Give it some time to create the file.\n\n        //Thread's fields\n        audioRecordThreadField=currentAudioRecordingThreadField.get(pauseResumeAudioRecorder).getClass().getDeclaredField(\"currentAudioRecording\");\n        audioRecordThreadField.setAccessible(true);\n        AudioRecord audioRecord=(AudioRecord)audioRecordThreadField.get(currentAudioRecordingThreadField.get(pauseResumeAudioRecorder));\n        ShadowAudioRecord shadowAudioRecord=Robolectric.shadowOf_(audioRecord);\n\n        Assert.assertTrue(\"AudioRecord is not recording\", shadowAudioRecord.isRecording);\n        Assert.assertEquals(\"AudioRecord has wrong sample rate\", 44100, shadowAudioRecord.sampleRateInHz);\n        Assert.assertEquals(\"AudioRecord has wrong audio encoding\", AudioFormat.ENCODING_PCM_8BIT, shadowAudioRecord.audioFormat);\n        Assert.assertEquals(\"AudioRecord has wrong audio source\", MediaRecorder.AudioSource.MIC,shadowAudioRecord.audioSource);\n        Assert.assertEquals(\"AudioRecord has wrong channel config\", AudioFormat.CHANNEL_IN_STEREO, shadowAudioRecord.channelConfig);\n\n        final File pcmFile=new File(Environment.getExternalStorageDirectory() + \"/recording.temp\");\n        Assert.assertTrue(pcmFile.exists());\n        pcmFile.delete();\n    }", "signature": "void testStartRecording()", "full_signature": "@Test public void testStartRecording()", "class_method_signature": "PauseResumeAudioRecorderTest.testStartRecording()", "testcase": true, "constructor": false, "invocations": ["setAudioFile", "getExternalStorageDirectory", "setChannel", "setSampleRate", "setAudioEncoding", "startRecording", "assertNotNull", "get", "assertEquals", "getCurrentState", "assertNotNull", "get", "assertNotNull", "get", "assertTrue", "get", "sleep", "getDeclaredField", "getClass", "get", "setAccessible", "get", "get", "shadowOf_", "assertTrue", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "getExternalStorageDirectory", "assertTrue", "exists", "delete"]}, "focal_class": {"identifier": "PauseResumeAudioRecorder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private AtomicInteger currentAudioState;", "modifier": "private", "type": "AtomicInteger", "declarator": "currentAudioState", "var_name": "currentAudioState"}, {"original_string": "private AudioRecorderThread currentAudioRecordingThread;", "modifier": "private", "type": "AudioRecorderThread", "declarator": "currentAudioRecordingThread", "var_name": "currentAudioRecordingThread"}, {"original_string": "private int sampleRateInHertz;", "modifier": "private", "type": "int", "declarator": "sampleRateInHertz", "var_name": "sampleRateInHertz"}, {"original_string": "private int channelConfig;", "modifier": "private", "type": "int", "declarator": "channelConfig", "var_name": "channelConfig"}, {"original_string": "private int audioEncoding;", "modifier": "private", "type": "int", "declarator": "audioEncoding", "var_name": "audioEncoding"}, {"original_string": "private String audioFile;", "modifier": "private", "type": "String", "declarator": "audioFile", "var_name": "audioFile"}, {"original_string": "private static final int DEFAULT_AUDIO_SAMPLE_RATE_HERTZ=44100;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_AUDIO_SAMPLE_RATE_HERTZ=44100", "var_name": "DEFAULT_AUDIO_SAMPLE_RATE_HERTZ"}, {"original_string": "private static final String TAG=PauseResumeAudioRecorder.class.getSimpleName();", "modifier": "private static final", "type": "String", "declarator": "TAG=PauseResumeAudioRecorder.class.getSimpleName()", "var_name": "TAG"}, {"original_string": "private OnFileSizeReachedListener onFileSizeReachedListener;", "modifier": "private", "type": "OnFileSizeReachedListener", "declarator": "onFileSizeReachedListener", "var_name": "onFileSizeReachedListener"}, {"original_string": "private long maxFileSizeInBytes;", "modifier": "private", "type": "long", "declarator": "maxFileSizeInBytes", "var_name": "maxFileSizeInBytes"}, {"original_string": "private OnTimeCompletionListener onTimeCompletionListener;", "modifier": "private", "type": "OnTimeCompletionListener", "declarator": "onTimeCompletionListener", "var_name": "onTimeCompletionListener"}, {"original_string": "private TimerTask onTimeCompletionTimerTask;", "modifier": "private", "type": "TimerTask", "declarator": "onTimeCompletionTimerTask", "var_name": "onTimeCompletionTimerTask"}, {"original_string": "private Timer onTimeCompletedTimer;", "modifier": "private", "type": "Timer", "declarator": "onTimeCompletedTimer", "var_name": "onTimeCompletedTimer"}, {"original_string": "private long maxTimeInMillis;", "modifier": "private", "type": "long", "declarator": "maxTimeInMillis", "var_name": "maxTimeInMillis"}, {"original_string": "private long recordingStartTimeMillis;", "modifier": "private", "type": "long", "declarator": "recordingStartTimeMillis", "var_name": "recordingStartTimeMillis"}, {"original_string": "private long remainingMaxTimeInMillis;", "modifier": "private", "type": "long", "declarator": "remainingMaxTimeInMillis", "var_name": "remainingMaxTimeInMillis"}, {"original_string": "public static final int STOPPED_STATE=-1;", "modifier": "public static final", "type": "int", "declarator": "STOPPED_STATE=-1", "var_name": "STOPPED_STATE"}, {"original_string": "public static final int INITIALIZED_STATE=0;", "modifier": "public static final", "type": "int", "declarator": "INITIALIZED_STATE=0", "var_name": "INITIALIZED_STATE"}, {"original_string": "public static final int PREPARED_STATE=1;", "modifier": "public static final", "type": "int", "declarator": "PREPARED_STATE=1", "var_name": "PREPARED_STATE"}, {"original_string": "public static final int RECORDING_STATE=2;", "modifier": "public static final", "type": "int", "declarator": "RECORDING_STATE=2", "var_name": "RECORDING_STATE"}, {"original_string": "public static final int PAUSED_STATE=3;", "modifier": "public static final", "type": "int", "declarator": "PAUSED_STATE=3", "var_name": "PAUSED_STATE"}, {"original_string": "public static final int ERROR_STATE=-2;", "modifier": "public static final", "type": "int", "declarator": "ERROR_STATE=-2", "var_name": "ERROR_STATE"}], "methods": [{"identifier": "PauseResumeAudioRecorder", "parameters": "()", "modifiers": "public", "return": "", "signature": " PauseResumeAudioRecorder()", "full_signature": "public  PauseResumeAudioRecorder()", "class_method_signature": "PauseResumeAudioRecorder.PauseResumeAudioRecorder()", "testcase": false, "constructor": true}, {"identifier": "setOnFileSizeReachedListener", "parameters": "(final OnFileSizeReachedListener onFileSizeReachedListener)", "modifiers": "public", "return": "void", "signature": "void setOnFileSizeReachedListener(final OnFileSizeReachedListener onFileSizeReachedListener)", "full_signature": "public void setOnFileSizeReachedListener(final OnFileSizeReachedListener onFileSizeReachedListener)", "class_method_signature": "PauseResumeAudioRecorder.setOnFileSizeReachedListener(final OnFileSizeReachedListener onFileSizeReachedListener)", "testcase": false, "constructor": false}, {"identifier": "setMaxFileSizeInBytes", "parameters": "(final long maxFileSizeInBytes)", "modifiers": "public", "return": "void", "signature": "void setMaxFileSizeInBytes(final long maxFileSizeInBytes)", "full_signature": "public void setMaxFileSizeInBytes(final long maxFileSizeInBytes)", "class_method_signature": "PauseResumeAudioRecorder.setMaxFileSizeInBytes(final long maxFileSizeInBytes)", "testcase": false, "constructor": false}, {"identifier": "setOnTimeCompletionListener", "parameters": "(final OnTimeCompletionListener onTimeCompletionListener)", "modifiers": "public", "return": "void", "signature": "void setOnTimeCompletionListener(final OnTimeCompletionListener onTimeCompletionListener)", "full_signature": "public void setOnTimeCompletionListener(final OnTimeCompletionListener onTimeCompletionListener)", "class_method_signature": "PauseResumeAudioRecorder.setOnTimeCompletionListener(final OnTimeCompletionListener onTimeCompletionListener)", "testcase": false, "constructor": false}, {"identifier": "setMaxTimeInMillis", "parameters": "(final long maxTimeInMillis)", "modifiers": "public", "return": "void", "signature": "void setMaxTimeInMillis(final long maxTimeInMillis)", "full_signature": "public void setMaxTimeInMillis(final long maxTimeInMillis)", "class_method_signature": "PauseResumeAudioRecorder.setMaxTimeInMillis(final long maxTimeInMillis)", "testcase": false, "constructor": false}, {"identifier": "setAudioEncoding", "parameters": "(final int audioEncoding)", "modifiers": "public", "return": "void", "signature": "void setAudioEncoding(final int audioEncoding)", "full_signature": "public void setAudioEncoding(final int audioEncoding)", "class_method_signature": "PauseResumeAudioRecorder.setAudioEncoding(final int audioEncoding)", "testcase": false, "constructor": false}, {"identifier": "setAudioFile", "parameters": "(final String audioFilePath)", "modifiers": "public", "return": "void", "signature": "void setAudioFile(final String audioFilePath)", "full_signature": "public void setAudioFile(final String audioFilePath)", "class_method_signature": "PauseResumeAudioRecorder.setAudioFile(final String audioFilePath)", "testcase": false, "constructor": false}, {"identifier": "setSampleRate", "parameters": "(final int sampleRateInHertz)", "modifiers": "public", "return": "void", "signature": "void setSampleRate(final int sampleRateInHertz)", "full_signature": "public void setSampleRate(final int sampleRateInHertz)", "class_method_signature": "PauseResumeAudioRecorder.setSampleRate(final int sampleRateInHertz)", "testcase": false, "constructor": false}, {"identifier": "setChannel", "parameters": "(final int channelConfig)", "modifiers": "public", "return": "void", "signature": "void setChannel(final int channelConfig)", "full_signature": "public void setChannel(final int channelConfig)", "class_method_signature": "PauseResumeAudioRecorder.setChannel(final int channelConfig)", "testcase": false, "constructor": false}, {"identifier": "getCurrentState", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCurrentState()", "full_signature": "public int getCurrentState()", "class_method_signature": "PauseResumeAudioRecorder.getCurrentState()", "testcase": false, "constructor": false}, {"identifier": "startRecording", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void startRecording()", "full_signature": "public void startRecording()", "class_method_signature": "PauseResumeAudioRecorder.startRecording()", "testcase": false, "constructor": false}, {"identifier": "pauseRecording", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void pauseRecording()", "full_signature": "public void pauseRecording()", "class_method_signature": "PauseResumeAudioRecorder.pauseRecording()", "testcase": false, "constructor": false}, {"identifier": "resumeRecording", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void resumeRecording()", "full_signature": "public void resumeRecording()", "class_method_signature": "PauseResumeAudioRecorder.resumeRecording()", "testcase": false, "constructor": false}, {"identifier": "stopRecording", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stopRecording()", "full_signature": "public void stopRecording()", "class_method_signature": "PauseResumeAudioRecorder.stopRecording()", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/github/republicofgavin/pauseresumeaudiorecorder/PauseResumeAudioRecorder.java"}, "focal_method": {"identifier": "startRecording", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void startRecording(){\n        if (currentAudioState.get() == PREPARED_STATE) {\n            currentAudioRecordingThread = new AudioRecorderThread(audioFile.replace(\".wav\",\".temp\"), MediaRecorder.AudioSource.MIC, sampleRateInHertz,channelConfig,audioEncoding,maxFileSizeInBytes);\n            currentAudioState.set(RECORDING_STATE);\n            currentAudioRecordingThread.start();\n            onTimeCompletedTimer=new Timer(true);\n            onTimeCompletionTimerTask=new MaxTimeTimerTask();\n            onTimeCompletedTimer.schedule(onTimeCompletionTimerTask,maxTimeInMillis);\n            remainingMaxTimeInMillis=maxTimeInMillis;\n            recordingStartTimeMillis=System.currentTimeMillis();\n        }\n        else{\n            Log.w(TAG,\"Audio recorder is not in prepared state. Ignoring call.\");\n        }\n    }", "signature": "void startRecording()", "full_signature": "public void startRecording()", "class_method_signature": "PauseResumeAudioRecorder.startRecording()", "testcase": false, "constructor": false, "invocations": ["get", "replace", "set", "start", "schedule", "currentTimeMillis", "w"]}, "repository": {"repo_id": 40162365, "url": "https://github.com/republicofgavin/PauseResumeAudioRecorder", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 16, "size": 105, "license": "Apache License 2.0"}}