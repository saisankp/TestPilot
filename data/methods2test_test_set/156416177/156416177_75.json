{"test_class": {"identifier": "GetDataFciRespParsTest", "superclass": "", "interfaces": "", "fields": [], "file": "java/component/keyple-calypso/src/test/java/org/eclipse/keyple/calypso/command/po/parser/GetDataFciRespParsTest.java"}, "test_case": {"identifier": "testFCIparser_FCI_BadTags", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testFCIparser_FCI_BadTags() {\n    String dfName = \"00112233445566778899\";\n    String appSerialNumber = \"AABBCCDDEEFF0011\";\n    byte siBufferSizeIndicator = 11;\n    byte siPlatform = (byte) 0x55;\n    byte siApplicationType = (byte) 0xAA;\n    byte siApplicationSubtype = (byte) 0x55;\n    byte siSoftwareIssuer = (byte) 0xAA;\n    byte siSoftwareVersion = (byte) 0x55;\n    byte siSoftwareRevision = (byte) 0xAA;\n    String startupInformation =\n        String.format(\n            \"%02X%02X%02X%02X%02X%02X%02X\",\n            siBufferSizeIndicator,\n            siPlatform,\n            siApplicationType,\n            siApplicationSubtype,\n            siSoftwareIssuer,\n            siSoftwareVersion,\n            siSoftwareRevision);\n\n    /* bad tag FCI Template (not constructed) */\n    ApduResponse apduResponse =\n        new ApduResponse(\n            ByteArrayUtil.fromHex(\n                \"4F 24 84 0A \"\n                    + dfName\n                    + \" A5 16 BF0C 13 C7 08 \"\n                    + appSerialNumber\n                    + \" 53 07 \"\n                    + startupInformation\n                    + \"9000\"),\n            null);\n\n    GetDataFciRespPars parser = new GetDataFciRespPars(apduResponse, null);\n\n    /* invalid Calypso FCI */\n    Assert.assertFalse(parser.isValidCalypsoFCI());\n\n    /* bad tag DF Name (constructed) */\n    apduResponse =\n        new ApduResponse(\n            ByteArrayUtil.fromHex(\n                \"6F 24 C4 0A \"\n                    + dfName\n                    + \" A5 16 BF0C 13 C7 08 \"\n                    + appSerialNumber\n                    + \" 53 07 \"\n                    + startupInformation\n                    + \"9000\"),\n            null);\n\n    parser = new GetDataFciRespPars(apduResponse, null);\n\n    /* invalid Calypso FCI */\n    Assert.assertFalse(parser.isValidCalypsoFCI());\n\n    /* bad tag FCI Proprietary Template (not constructed) */\n    apduResponse =\n        new ApduResponse(\n            ByteArrayUtil.fromHex(\n                \"6F 24 84 0A \"\n                    + dfName\n                    + \" 85 16 BF0C 13 C7 08 \"\n                    + appSerialNumber\n                    + \" 53 07 \"\n                    + startupInformation\n                    + \"9000\"),\n            null);\n\n    parser = new GetDataFciRespPars(apduResponse, null);\n\n    /* invalid Calypso FCI */\n    Assert.assertFalse(parser.isValidCalypsoFCI());\n\n    /* bad tag FCI Issuer Discretionary */\n    apduResponse =\n        new ApduResponse(\n            ByteArrayUtil.fromHex(\n                \"6F 24 84 0A \"\n                    + dfName\n                    + \" A5 16 BF0D 13 C7 08 \"\n                    + appSerialNumber\n                    + \" 53 07 \"\n                    + startupInformation\n                    + \"9000\"),\n            null);\n\n    parser = new GetDataFciRespPars(apduResponse, null);\n\n    /* invalid Calypso FCI */\n    Assert.assertFalse(parser.isValidCalypsoFCI());\n\n    /* bad tag Application Serial Number */\n    apduResponse =\n        new ApduResponse(\n            ByteArrayUtil.fromHex(\n                \"6F 24 84 0A \"\n                    + dfName\n                    + \" A5 16 BF0C 13 87 08 \"\n                    + appSerialNumber\n                    + \" 53 07 \"\n                    + startupInformation\n                    + \"9000\"),\n            null);\n\n    parser = new GetDataFciRespPars(apduResponse, null);\n\n    /* invalid Calypso FCI */\n    Assert.assertFalse(parser.isValidCalypsoFCI());\n\n    /* bad tag Discretionary Data */\n    apduResponse =\n        new ApduResponse(\n            ByteArrayUtil.fromHex(\n                \"6F 24 84 0A \"\n                    + dfName\n                    + \" A5 16 BF0C 13 C7 08 \"\n                    + appSerialNumber\n                    + \" 43 07 \"\n                    + startupInformation\n                    + \"9000\"),\n            null);\n\n    parser = new GetDataFciRespPars(apduResponse, null);\n\n    /* invalid Calypso FCI */\n    Assert.assertFalse(parser.isValidCalypsoFCI());\n  }", "signature": "void testFCIparser_FCI_BadTags()", "full_signature": "@Test public void testFCIparser_FCI_BadTags()", "class_method_signature": "GetDataFciRespParsTest.testFCIparser_FCI_BadTags()", "testcase": true, "constructor": false, "invocations": ["format", "fromHex", "assertFalse", "isValidCalypsoFCI", "fromHex", "assertFalse", "isValidCalypsoFCI", "fromHex", "assertFalse", "isValidCalypsoFCI", "fromHex", "assertFalse", "isValidCalypsoFCI", "fromHex", "assertFalse", "isValidCalypsoFCI", "fromHex", "assertFalse", "isValidCalypsoFCI"]}, "focal_class": {"identifier": "GetDataFciRespPars", "superclass": "extends AbstractPoResponseParser", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(GetDataFciRespPars.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(GetDataFciRespPars.class)", "var_name": "logger"}, {"original_string": "private static final Map<Integer, StatusProperties> STATUS_TABLE;", "modifier": "private static final", "type": "Map<Integer, StatusProperties>", "declarator": "STATUS_TABLE", "var_name": "STATUS_TABLE"}, {"original_string": "private static final Tag TAG_FCI_TEMPLATE = new Tag(0x0F, Tag.APPLICATION, CONSTRUCTED, 1);", "modifier": "private static final", "type": "Tag", "declarator": "TAG_FCI_TEMPLATE = new Tag(0x0F, Tag.APPLICATION, CONSTRUCTED, 1)", "var_name": "TAG_FCI_TEMPLATE"}, {"original_string": "private static final Tag TAG_DF_NAME = new Tag(0x04, Tag.CONTEXT, PRIMITIVE, 1);", "modifier": "private static final", "type": "Tag", "declarator": "TAG_DF_NAME = new Tag(0x04, Tag.CONTEXT, PRIMITIVE, 1)", "var_name": "TAG_DF_NAME"}, {"original_string": "private static final Tag TAG_FCI_PROPRIETARY_TEMPLATE =\n      new Tag(0x05, Tag.CONTEXT, CONSTRUCTED, 1);", "modifier": "private static final", "type": "Tag", "declarator": "TAG_FCI_PROPRIETARY_TEMPLATE =\n      new Tag(0x05, Tag.CONTEXT, CONSTRUCTED, 1)", "var_name": "TAG_FCI_PROPRIETARY_TEMPLATE"}, {"original_string": "private static final Tag TAG_FCI_ISSUER_DISCRETIONARY_DATA =\n      new Tag(0x0C, Tag.CONTEXT, CONSTRUCTED, 2);", "modifier": "private static final", "type": "Tag", "declarator": "TAG_FCI_ISSUER_DISCRETIONARY_DATA =\n      new Tag(0x0C, Tag.CONTEXT, CONSTRUCTED, 2)", "var_name": "TAG_FCI_ISSUER_DISCRETIONARY_DATA"}, {"original_string": "private static final Tag TAG_APPLICATION_SERIAL_NUMBER = new Tag(0x07, Tag.PRIVATE, PRIMITIVE, 1);", "modifier": "private static final", "type": "Tag", "declarator": "TAG_APPLICATION_SERIAL_NUMBER = new Tag(0x07, Tag.PRIVATE, PRIMITIVE, 1)", "var_name": "TAG_APPLICATION_SERIAL_NUMBER"}, {"original_string": "private static final Tag TAG_DISCRETIONARY_DATA = new Tag(0x13, Tag.APPLICATION, PRIMITIVE, 1);", "modifier": "private static final", "type": "Tag", "declarator": "TAG_DISCRETIONARY_DATA = new Tag(0x13, Tag.APPLICATION, PRIMITIVE, 1)", "var_name": "TAG_DISCRETIONARY_DATA"}, {"original_string": "private boolean isDfInvalidated = false;", "modifier": "private", "type": "boolean", "declarator": "isDfInvalidated = false", "var_name": "isDfInvalidated"}, {"original_string": "private boolean isValidCalypsoFCI = false;", "modifier": "private", "type": "boolean", "declarator": "isValidCalypsoFCI = false", "var_name": "isValidCalypsoFCI"}, {"original_string": "private byte[] dfName = null;", "modifier": "private", "type": "byte[]", "declarator": "dfName = null", "var_name": "dfName"}, {"original_string": "private byte[] applicationSN = null;", "modifier": "private", "type": "byte[]", "declarator": "applicationSN = null", "var_name": "applicationSN"}, {"original_string": "private byte[] discretionaryData = null;", "modifier": "private", "type": "byte[]", "declarator": "discretionaryData = null", "var_name": "discretionaryData"}], "methods": [{"identifier": "getStatusTable", "parameters": "()", "modifiers": "@Override protected", "return": "Map<Integer, StatusProperties>", "signature": "Map<Integer, StatusProperties> getStatusTable()", "full_signature": "@Override protected Map<Integer, StatusProperties> getStatusTable()", "class_method_signature": "GetDataFciRespPars.getStatusTable()", "testcase": false, "constructor": false}, {"identifier": "GetDataFciRespPars", "parameters": "(ApduResponse response, GetDataFciCmdBuild builder)", "modifiers": "public", "return": "", "signature": " GetDataFciRespPars(ApduResponse response, GetDataFciCmdBuild builder)", "full_signature": "public  GetDataFciRespPars(ApduResponse response, GetDataFciCmdBuild builder)", "class_method_signature": "GetDataFciRespPars.GetDataFciRespPars(ApduResponse response, GetDataFciCmdBuild builder)", "testcase": false, "constructor": true}, {"identifier": "isValidCalypsoFCI", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isValidCalypsoFCI()", "full_signature": "public boolean isValidCalypsoFCI()", "class_method_signature": "GetDataFciRespPars.isValidCalypsoFCI()", "testcase": false, "constructor": false}, {"identifier": "getDfName", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getDfName()", "full_signature": "public byte[] getDfName()", "class_method_signature": "GetDataFciRespPars.getDfName()", "testcase": false, "constructor": false}, {"identifier": "getApplicationSerialNumber", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getApplicationSerialNumber()", "full_signature": "public byte[] getApplicationSerialNumber()", "class_method_signature": "GetDataFciRespPars.getApplicationSerialNumber()", "testcase": false, "constructor": false}, {"identifier": "getDiscretionaryData", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getDiscretionaryData()", "full_signature": "public byte[] getDiscretionaryData()", "class_method_signature": "GetDataFciRespPars.getDiscretionaryData()", "testcase": false, "constructor": false}, {"identifier": "isDfInvalidated", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDfInvalidated()", "full_signature": "public boolean isDfInvalidated()", "class_method_signature": "GetDataFciRespPars.isDfInvalidated()", "testcase": false, "constructor": false}], "file": "java/component/keyple-calypso/src/main/java/org/eclipse/keyple/calypso/command/po/parser/GetDataFciRespPars.java"}, "focal_method": {"identifier": "isValidCalypsoFCI", "parameters": "()", "modifiers": "public", "return": "boolean", "body": "public boolean isValidCalypsoFCI() {\n    return isValidCalypsoFCI;\n  }", "signature": "boolean isValidCalypsoFCI()", "full_signature": "public boolean isValidCalypsoFCI()", "class_method_signature": "GetDataFciRespPars.isValidCalypsoFCI()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 156416177, "url": "https://github.com/eclipse/keyple-java", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 10325, "license": "licensed"}}