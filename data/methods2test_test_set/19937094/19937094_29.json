{"test_class": {"identifier": "DefaultSessionFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SessionID sessionID;", "modifier": "private", "type": "SessionID", "declarator": "sessionID", "var_name": "sessionID"}, {"original_string": "private SessionSettings settings;", "modifier": "private", "type": "SessionSettings", "declarator": "settings", "var_name": "settings"}, {"original_string": "private SessionFactory factory;", "modifier": "private", "type": "SessionFactory", "declarator": "factory", "var_name": "factory"}], "file": "quickfixj-core/src/test/java/quickfix/DefaultSessionFactoryTest.java"}, "test_case": {"identifier": "testMinimalSettings", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMinimalSettings() throws Exception {\n        factory.create(sessionID, settings);\n    }", "signature": "void testMinimalSettings()", "full_signature": "@Test public void testMinimalSettings()", "class_method_signature": "DefaultSessionFactoryTest.testMinimalSettings()", "testcase": true, "constructor": false, "invocations": ["create"]}, "focal_class": {"identifier": "DefaultSessionFactory", "superclass": "", "interfaces": "implements SessionFactory", "fields": [{"original_string": "private static final SimpleCache<String, DataDictionary> dictionaryCache = new SimpleCache<>(path -> {\n        try {\n            return new DataDictionary(path);\n        } catch (ConfigError e) {\n            throw new QFJException(e);\n        }\n    });", "modifier": "private static final", "type": "SimpleCache<String, DataDictionary>", "declarator": "dictionaryCache = new SimpleCache<>(path -> {\n        try {\n            return new DataDictionary(path);\n        } catch (ConfigError e) {\n            throw new QFJException(e);\n        }\n    })", "var_name": "dictionaryCache"}, {"original_string": "private final Application application;", "modifier": "private final", "type": "Application", "declarator": "application", "var_name": "application"}, {"original_string": "private final MessageStoreFactory messageStoreFactory;", "modifier": "private final", "type": "MessageStoreFactory", "declarator": "messageStoreFactory", "var_name": "messageStoreFactory"}, {"original_string": "private final LogFactory logFactory;", "modifier": "private final", "type": "LogFactory", "declarator": "logFactory", "var_name": "logFactory"}, {"original_string": "private final MessageFactory messageFactory;", "modifier": "private final", "type": "MessageFactory", "declarator": "messageFactory", "var_name": "messageFactory"}, {"original_string": "private final SessionScheduleFactory sessionScheduleFactory;", "modifier": "private final", "type": "SessionScheduleFactory", "declarator": "sessionScheduleFactory", "var_name": "sessionScheduleFactory"}], "methods": [{"identifier": "DefaultSessionFactory", "parameters": "(Application application, MessageStoreFactory messageStoreFactory,\n            LogFactory logFactory)", "modifiers": "public", "return": "", "signature": " DefaultSessionFactory(Application application, MessageStoreFactory messageStoreFactory,\n            LogFactory logFactory)", "full_signature": "public  DefaultSessionFactory(Application application, MessageStoreFactory messageStoreFactory,\n            LogFactory logFactory)", "class_method_signature": "DefaultSessionFactory.DefaultSessionFactory(Application application, MessageStoreFactory messageStoreFactory,\n            LogFactory logFactory)", "testcase": false, "constructor": true}, {"identifier": "DefaultSessionFactory", "parameters": "(Application application, MessageStoreFactory messageStoreFactory,\n            LogFactory logFactory, MessageFactory messageFactory)", "modifiers": "public", "return": "", "signature": " DefaultSessionFactory(Application application, MessageStoreFactory messageStoreFactory,\n            LogFactory logFactory, MessageFactory messageFactory)", "full_signature": "public  DefaultSessionFactory(Application application, MessageStoreFactory messageStoreFactory,\n            LogFactory logFactory, MessageFactory messageFactory)", "class_method_signature": "DefaultSessionFactory.DefaultSessionFactory(Application application, MessageStoreFactory messageStoreFactory,\n            LogFactory logFactory, MessageFactory messageFactory)", "testcase": false, "constructor": true}, {"identifier": "DefaultSessionFactory", "parameters": "(Application application, MessageStoreFactory messageStoreFactory,\n                                 LogFactory logFactory, MessageFactory messageFactory,\n                                 SessionScheduleFactory sessionScheduleFactory)", "modifiers": "public", "return": "", "signature": " DefaultSessionFactory(Application application, MessageStoreFactory messageStoreFactory,\n                                 LogFactory logFactory, MessageFactory messageFactory,\n                                 SessionScheduleFactory sessionScheduleFactory)", "full_signature": "public  DefaultSessionFactory(Application application, MessageStoreFactory messageStoreFactory,\n                                 LogFactory logFactory, MessageFactory messageFactory,\n                                 SessionScheduleFactory sessionScheduleFactory)", "class_method_signature": "DefaultSessionFactory.DefaultSessionFactory(Application application, MessageStoreFactory messageStoreFactory,\n                                 LogFactory logFactory, MessageFactory messageFactory,\n                                 SessionScheduleFactory sessionScheduleFactory)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(SessionID sessionID, SessionSettings settings)", "modifiers": "public", "return": "Session", "signature": "Session create(SessionID sessionID, SessionSettings settings)", "full_signature": "public Session create(SessionID sessionID, SessionSettings settings)", "class_method_signature": "DefaultSessionFactory.create(SessionID sessionID, SessionSettings settings)", "testcase": false, "constructor": false}, {"identifier": "processPreFixtDataDictionary", "parameters": "(SessionID sessionID, SessionSettings settings,\n            DefaultDataDictionaryProvider dataDictionaryProvider)", "modifiers": "private", "return": "void", "signature": "void processPreFixtDataDictionary(SessionID sessionID, SessionSettings settings,\n            DefaultDataDictionaryProvider dataDictionaryProvider)", "full_signature": "private void processPreFixtDataDictionary(SessionID sessionID, SessionSettings settings,\n            DefaultDataDictionaryProvider dataDictionaryProvider)", "class_method_signature": "DefaultSessionFactory.processPreFixtDataDictionary(SessionID sessionID, SessionSettings settings,\n            DefaultDataDictionaryProvider dataDictionaryProvider)", "testcase": false, "constructor": false}, {"identifier": "createDataDictionary", "parameters": "(SessionID sessionID, SessionSettings settings,\n            String settingsKey, String beginString)", "modifiers": "private", "return": "DataDictionary", "signature": "DataDictionary createDataDictionary(SessionID sessionID, SessionSettings settings,\n            String settingsKey, String beginString)", "full_signature": "private DataDictionary createDataDictionary(SessionID sessionID, SessionSettings settings,\n            String settingsKey, String beginString)", "class_method_signature": "DefaultSessionFactory.createDataDictionary(SessionID sessionID, SessionSettings settings,\n            String settingsKey, String beginString)", "testcase": false, "constructor": false}, {"identifier": "processFixtDataDictionaries", "parameters": "(SessionID sessionID, SessionSettings settings,\n            DefaultDataDictionaryProvider dataDictionaryProvider)", "modifiers": "private", "return": "void", "signature": "void processFixtDataDictionaries(SessionID sessionID, SessionSettings settings,\n            DefaultDataDictionaryProvider dataDictionaryProvider)", "full_signature": "private void processFixtDataDictionaries(SessionID sessionID, SessionSettings settings,\n            DefaultDataDictionaryProvider dataDictionaryProvider)", "class_method_signature": "DefaultSessionFactory.processFixtDataDictionaries(SessionID sessionID, SessionSettings settings,\n            DefaultDataDictionaryProvider dataDictionaryProvider)", "testcase": false, "constructor": false}, {"identifier": "toApplVerID", "parameters": "(String value)", "modifiers": "private", "return": "ApplVerID", "signature": "ApplVerID toApplVerID(String value)", "full_signature": "private ApplVerID toApplVerID(String value)", "class_method_signature": "DefaultSessionFactory.toApplVerID(String value)", "testcase": false, "constructor": false}, {"identifier": "isApplVerIdEnum", "parameters": "(String value)", "modifiers": "private", "return": "boolean", "signature": "boolean isApplVerIdEnum(String value)", "full_signature": "private boolean isApplVerIdEnum(String value)", "class_method_signature": "DefaultSessionFactory.isApplVerIdEnum(String value)", "testcase": false, "constructor": false}, {"identifier": "getDictionaryPath", "parameters": "(SessionID sessionID, SessionSettings settings,\n            String settingsKey, String beginString)", "modifiers": "private", "return": "String", "signature": "String getDictionaryPath(SessionID sessionID, SessionSettings settings,\n            String settingsKey, String beginString)", "full_signature": "private String getDictionaryPath(SessionID sessionID, SessionSettings settings,\n            String settingsKey, String beginString)", "class_method_signature": "DefaultSessionFactory.getDictionaryPath(SessionID sessionID, SessionSettings settings,\n            String settingsKey, String beginString)", "testcase": false, "constructor": false}, {"identifier": "toDictionaryPath", "parameters": "(String beginString)", "modifiers": "private", "return": "String", "signature": "String toDictionaryPath(String beginString)", "full_signature": "private String toDictionaryPath(String beginString)", "class_method_signature": "DefaultSessionFactory.toDictionaryPath(String beginString)", "testcase": false, "constructor": false}, {"identifier": "getDataDictionary", "parameters": "(String path)", "modifiers": "private", "return": "DataDictionary", "signature": "DataDictionary getDataDictionary(String path)", "full_signature": "private DataDictionary getDataDictionary(String path)", "class_method_signature": "DefaultSessionFactory.getDataDictionary(String path)", "testcase": false, "constructor": false}, {"identifier": "getLogonIntervalsInSeconds", "parameters": "(SessionSettings settings, SessionID sessionID)", "modifiers": "private", "return": "int[]", "signature": "int[] getLogonIntervalsInSeconds(SessionSettings settings, SessionID sessionID)", "full_signature": "private int[] getLogonIntervalsInSeconds(SessionSettings settings, SessionID sessionID)", "class_method_signature": "DefaultSessionFactory.getLogonIntervalsInSeconds(SessionSettings settings, SessionID sessionID)", "testcase": false, "constructor": false}, {"identifier": "getInetAddresses", "parameters": "(SessionSettings settings, SessionID sessionID)", "modifiers": "private", "return": "Set<InetAddress>", "signature": "Set<InetAddress> getInetAddresses(SessionSettings settings, SessionID sessionID)", "full_signature": "private Set<InetAddress> getInetAddresses(SessionSettings settings, SessionID sessionID)", "class_method_signature": "DefaultSessionFactory.getInetAddresses(SessionSettings settings, SessionID sessionID)", "testcase": false, "constructor": false}, {"identifier": "getSetting", "parameters": "(SessionSettings settings, SessionID sessionID, String key,\n            boolean defaultValue)", "modifiers": "private", "return": "boolean", "signature": "boolean getSetting(SessionSettings settings, SessionID sessionID, String key,\n            boolean defaultValue)", "full_signature": "private boolean getSetting(SessionSettings settings, SessionID sessionID, String key,\n            boolean defaultValue)", "class_method_signature": "DefaultSessionFactory.getSetting(SessionSettings settings, SessionID sessionID, String key,\n            boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getSetting", "parameters": "(SessionSettings settings, SessionID sessionID, String key,\n            int defaultValue)", "modifiers": "private", "return": "int", "signature": "int getSetting(SessionSettings settings, SessionID sessionID, String key,\n            int defaultValue)", "full_signature": "private int getSetting(SessionSettings settings, SessionID sessionID, String key,\n            int defaultValue)", "class_method_signature": "DefaultSessionFactory.getSetting(SessionSettings settings, SessionID sessionID, String key,\n            int defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getSetting", "parameters": "(SessionSettings settings, SessionID sessionID, String key,\n            double defaultValue)", "modifiers": "private", "return": "double", "signature": "double getSetting(SessionSettings settings, SessionID sessionID, String key,\n            double defaultValue)", "full_signature": "private double getSetting(SessionSettings settings, SessionID sessionID, String key,\n            double defaultValue)", "class_method_signature": "DefaultSessionFactory.getSetting(SessionSettings settings, SessionID sessionID, String key,\n            double defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getTimestampPrecision", "parameters": "(SessionSettings settings, SessionID sessionID,\n            UtcTimestampPrecision defaultValue)", "modifiers": "private", "return": "UtcTimestampPrecision", "signature": "UtcTimestampPrecision getTimestampPrecision(SessionSettings settings, SessionID sessionID,\n            UtcTimestampPrecision defaultValue)", "full_signature": "private UtcTimestampPrecision getTimestampPrecision(SessionSettings settings, SessionID sessionID,\n            UtcTimestampPrecision defaultValue)", "class_method_signature": "DefaultSessionFactory.getTimestampPrecision(SessionSettings settings, SessionID sessionID,\n            UtcTimestampPrecision defaultValue)", "testcase": false, "constructor": false}, {"identifier": "getLogonTags", "parameters": "(SessionSettings settings, SessionID sessionID)", "modifiers": "private", "return": "List<StringField>", "signature": "List<StringField> getLogonTags(SessionSettings settings, SessionID sessionID)", "full_signature": "private List<StringField> getLogonTags(SessionSettings settings, SessionID sessionID)", "class_method_signature": "DefaultSessionFactory.getLogonTags(SessionSettings settings, SessionID sessionID)", "testcase": false, "constructor": false}], "file": "quickfixj-core/src/main/java/quickfix/DefaultSessionFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(SessionID sessionID, SessionSettings settings)", "modifiers": "public", "return": "Session", "body": "public Session create(SessionID sessionID, SessionSettings settings) throws ConfigError {\n        try {\n            String connectionType = null;\n\n            final boolean rejectGarbledMessage = getSetting(settings, sessionID,\n                    Session.SETTING_REJECT_GARBLED_MESSAGE, false);\n\n            final boolean validateChecksum = getSetting(settings, sessionID,\n                    Session.SETTING_VALIDATE_CHECKSUM, true);\n\n            if (rejectGarbledMessage && !validateChecksum) {\n                throw new ConfigError(\"Not possible to reject garbled message and process \" +\n                        \"messages with invalid checksum at the same time.\");\n            }\n\n            final boolean rejectInvalidMessage = getSetting(settings, sessionID,\n                    Session.SETTING_REJECT_INVALID_MESSAGE, true);\n\n            final boolean rejectMessageOnUnhandledException = getSetting(settings, sessionID,\n                    Session.SETTING_REJECT_MESSAGE_ON_UNHANDLED_EXCEPTION, false);\n\n            final boolean requiresOrigSendingTime = getSetting(settings, sessionID,\n                    Session.SETTING_REQUIRES_ORIG_SENDING_TIME, true);\n\n            if (settings.isSetting(sessionID, SessionFactory.SETTING_CONNECTION_TYPE)) {\n                connectionType = settings.getString(sessionID,\n                        SessionFactory.SETTING_CONNECTION_TYPE);\n            }\n\n            if (connectionType == null) {\n                throw new ConfigError(\"Missing ConnectionType\");\n            }\n\n            if (!connectionType.equals(SessionFactory.ACCEPTOR_CONNECTION_TYPE)\n                    && !connectionType.equals(SessionFactory.INITIATOR_CONNECTION_TYPE)) {\n                throw new ConfigError(\"Invalid ConnectionType\");\n            }\n\n            if (connectionType.equals(SessionFactory.ACCEPTOR_CONNECTION_TYPE)\n                    && settings.isSetting(sessionID, SessionSettings.SESSION_QUALIFIER)) {\n                throw new ConfigError(\"SessionQualifier cannot be used with acceptor.\");\n            }\n\n            if (connectionType.equals(SessionFactory.INITIATOR_CONNECTION_TYPE)\n                    && settings.isSetting(sessionID, Session.SETTING_ALLOWED_REMOTE_ADDRESSES)) {\n                throw new ConfigError(\"AllowedRemoteAddresses cannot be used with initiator\");\n            }\n\n            DefaultApplVerID senderDefaultApplVerID = null;\n\n            if (sessionID.isFIXT()) {\n                if (!settings.isSetting(sessionID, Session.SETTING_DEFAULT_APPL_VER_ID)) {\n                    throw new ConfigError(Session.SETTING_DEFAULT_APPL_VER_ID\n                            + \" is required for FIXT transport\");\n                }\n                senderDefaultApplVerID = new DefaultApplVerID(toApplVerID(\n                        settings.getString(sessionID, Session.SETTING_DEFAULT_APPL_VER_ID))\n                        .getValue());\n            }\n\n            boolean useDataDictionary = true;\n            if (settings.isSetting(sessionID, Session.SETTING_USE_DATA_DICTIONARY)) {\n                useDataDictionary = settings\n                        .getBool(sessionID, Session.SETTING_USE_DATA_DICTIONARY);\n            }\n\n            DefaultDataDictionaryProvider dataDictionaryProvider = null;\n            if (useDataDictionary) {\n                dataDictionaryProvider = new DefaultDataDictionaryProvider();\n                if (sessionID.isFIXT()) {\n                    processFixtDataDictionaries(sessionID, settings, dataDictionaryProvider);\n                } else {\n                    processPreFixtDataDictionary(sessionID, settings, dataDictionaryProvider);\n                }\n            }\n\n            int heartbeatInterval = 0;\n            if (connectionType.equals(SessionFactory.INITIATOR_CONNECTION_TYPE)) {\n                heartbeatInterval = (int) settings.getLong(sessionID, Session.SETTING_HEARTBTINT);\n                if (heartbeatInterval <= 0) {\n                    throw new ConfigError(\"Heartbeat must be greater than zero\");\n                }\n            }\n\n            final boolean checkLatency = getSetting(settings, sessionID, Session.SETTING_CHECK_LATENCY,\n                    true);\n            final int maxLatency = getSetting(settings, sessionID, Session.SETTING_MAX_LATENCY,\n                    Session.DEFAULT_MAX_LATENCY);\n            final double testRequestDelayMultiplier = getSetting(settings, sessionID,\n                    Session.SETTING_TEST_REQUEST_DELAY_MULTIPLIER,\n                    Session.DEFAULT_TEST_REQUEST_DELAY_MULTIPLIER);\n            final double heartBeatTimeoutMultiplier = getSetting(settings, sessionID,\n                    Session.SETTING_HEARTBEAT_TIMEOUT_MULTIPLIER,\n                    Session.DEFAULT_HEARTBEAT_TIMEOUT_MULTIPLIER);\n\n            final UtcTimestampPrecision timestampPrecision = getTimestampPrecision(settings, sessionID,\n                    UtcTimestampPrecision.MILLIS);\n\n            final boolean resetOnLogout = getSetting(settings, sessionID,\n                    Session.SETTING_RESET_ON_LOGOUT, false);\n\n            final boolean resetOnDisconnect = getSetting(settings, sessionID,\n                    Session.SETTING_RESET_ON_DISCONNECT, false);\n\n            final boolean resetOnLogon = getSetting(settings, sessionID, Session.SETTING_RESET_ON_LOGON,\n                    false);\n\n            final boolean refreshOnLogon = getSetting(settings, sessionID,\n                    Session.SETTING_REFRESH_ON_LOGON, false);\n\n            final boolean checkCompID = getSetting(settings, sessionID, Session.SETTING_CHECK_COMP_ID,\n                    true);\n\n            final boolean redundantResentRequestAllowed = getSetting(settings, sessionID,\n                    Session.SETTING_SEND_REDUNDANT_RESEND_REQUEST, false);\n\n            final boolean persistMessages = getSetting(settings, sessionID,\n                    Session.SETTING_PERSIST_MESSAGES, true);\n\n            final boolean useClosedIntervalForResend = getSetting(settings, sessionID,\n                    Session.SETTING_USE_CLOSED_RESEND_INTERVAL, false);\n\n            final int logonTimeout = getSetting(settings, sessionID, Session.SETTING_LOGON_TIMEOUT, 10);\n            final int logoutTimeout = getSetting(settings, sessionID, Session.SETTING_LOGOUT_TIMEOUT, 2);\n\n            final boolean validateSequenceNumbers = getSetting(settings, sessionID, Session.SETTING_VALIDATE_SEQUENCE_NUMBERS, true);\n            final boolean validateIncomingMessage = getSetting(settings, sessionID, Session.SETTING_VALIDATE_INCOMING_MESSAGE, true);\n            final boolean resetOnError = getSetting(settings, sessionID, Session.SETTING_RESET_ON_ERROR, false);\n            final boolean disconnectOnError = getSetting(settings, sessionID, Session.SETTING_DISCONNECT_ON_ERROR, false);\n            final boolean disableHeartBeatCheck = getSetting(settings, sessionID, Session.SETTING_DISABLE_HEART_BEAT_CHECK, false);\n            final boolean forceResendWhenCorruptedStore = getSetting(settings, sessionID, Session.SETTING_FORCE_RESEND_WHEN_CORRUPTED_STORE, false);\n            final boolean enableNextExpectedMsgSeqNum = getSetting(settings, sessionID, Session.SETTING_ENABLE_NEXT_EXPECTED_MSG_SEQ_NUM, false);\n            final boolean enableLastMsgSeqNumProcessed = getSetting(settings, sessionID, Session.SETTING_ENABLE_LAST_MSG_SEQ_NUM_PROCESSED, false);\n            final int resendRequestChunkSize = getSetting(settings, sessionID, Session.SETTING_RESEND_REQUEST_CHUNK_SIZE, Session.DEFAULT_RESEND_RANGE_CHUNK_SIZE);\n\n            final int[] logonIntervals = getLogonIntervalsInSeconds(settings, sessionID);\n            final Set<InetAddress> allowedRemoteAddresses = getInetAddresses(settings, sessionID);\n\n            final SessionSchedule sessionSchedule = sessionScheduleFactory.create(sessionID, settings);\n\n            final List<StringField> logonTags = getLogonTags(settings, sessionID);\n\n            final Session session = new Session(application, messageStoreFactory, sessionID,\n                    dataDictionaryProvider, sessionSchedule, logFactory,\n                    messageFactory, heartbeatInterval, checkLatency, maxLatency, timestampPrecision,\n                    resetOnLogon, resetOnLogout, resetOnDisconnect, refreshOnLogon, checkCompID,\n                    redundantResentRequestAllowed, persistMessages, useClosedIntervalForResend,\n                    testRequestDelayMultiplier, senderDefaultApplVerID, validateSequenceNumbers,\n                    logonIntervals, resetOnError, disconnectOnError, disableHeartBeatCheck, rejectGarbledMessage,\n                    rejectInvalidMessage, rejectMessageOnUnhandledException, requiresOrigSendingTime,\n                    forceResendWhenCorruptedStore, allowedRemoteAddresses, validateIncomingMessage,\n                    resendRequestChunkSize, enableNextExpectedMsgSeqNum, enableLastMsgSeqNumProcessed,\n                    validateChecksum, logonTags, heartBeatTimeoutMultiplier);\n\n            session.setLogonTimeout(logonTimeout);\n            session.setLogoutTimeout(logoutTimeout);\n\n            final int maxScheduledWriteRequests = getSetting(settings, sessionID, Session.SETTING_MAX_SCHEDULED_WRITE_REQUESTS, 0);\n            session.setMaxScheduledWriteRequests(maxScheduledWriteRequests);\n\n            //\n            // Session registration and creation callback is done here instead of in\n            // session constructor to eliminate the possibility of other threads\n            // accessing the session before it's fully constructed.\n            //\n\n            application.onCreate(sessionID);\n\n            return session;\n        } catch (final FieldConvertError e) {\n            throw new ConfigError(e.getMessage());\n        }\n    }", "signature": "Session create(SessionID sessionID, SessionSettings settings)", "full_signature": "public Session create(SessionID sessionID, SessionSettings settings)", "class_method_signature": "DefaultSessionFactory.create(SessionID sessionID, SessionSettings settings)", "testcase": false, "constructor": false, "invocations": ["getSetting", "getSetting", "getSetting", "getSetting", "getSetting", "isSetting", "getString", "equals", "equals", "equals", "isSetting", "equals", "isSetting", "isFIXT", "isSetting", "getValue", "toApplVerID", "getString", "isSetting", "getBool", "isFIXT", "processFixtDataDictionaries", "processPreFixtDataDictionary", "equals", "getLong", "getSetting", "getSetting", "getSetting", "getSetting", "getTimestampPrecision", "getSetting", "getSetting", "getSetting", "getSetting", "getSetting", "getSetting", "getSetting", "getSetting", "getSetting", "getSetting", "getSetting", "getSetting", "getSetting", "getSetting", "getSetting", "getSetting", "getSetting", "getSetting", "getSetting", "getLogonIntervalsInSeconds", "getInetAddresses", "create", "getLogonTags", "setLogonTimeout", "setLogoutTimeout", "getSetting", "setMaxScheduledWriteRequests", "onCreate", "getMessage"]}, "repository": {"repo_id": 19937094, "url": "https://github.com/quickfix-j/quickfixj", "stars": 538, "created": "5/19/2014 10:04:08 AM +00:00", "updates": "2020-01-26T01:21:15+00:00", "fork": "False", "license": "licensed"}}