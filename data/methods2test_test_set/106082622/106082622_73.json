{"test_class": {"identifier": "ViewConfigControllerTest", "superclass": "extends AbstractMvcTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private FilterTestTools filterTestTools;", "modifier": "@Autowired\n    private", "type": "FilterTestTools", "declarator": "filterTestTools", "var_name": "filterTestTools"}, {"original_string": "@Autowired\n    private ViewTestTools viewTestTools;", "modifier": "@Autowired\n    private", "type": "ViewTestTools", "declarator": "viewTestTools", "var_name": "viewTestTools"}, {"original_string": "@Autowired\n    private ClusterTestTools clusterTestTools;", "modifier": "@Autowired\n    private", "type": "ClusterTestTools", "declarator": "clusterTestTools", "var_name": "clusterTestTools"}, {"original_string": "@Autowired\n    private MessageFormatTestTools messageFormatTestTools;", "modifier": "@Autowired\n    private", "type": "MessageFormatTestTools", "declarator": "messageFormatTestTools", "var_name": "messageFormatTestTools"}, {"original_string": "@Autowired\n    private ViewRepository viewRepository;", "modifier": "@Autowired\n    private", "type": "ViewRepository", "declarator": "viewRepository", "var_name": "viewRepository"}], "file": "kafka-webview-ui/src/test/java/org/sourcelab/kafka/webview/ui/controller/configuration/view/ViewConfigControllerTest.java"}, "test_case": {"identifier": "testCopyView", "parameters": "()", "modifiers": "@Test @Transactional public", "return": "void", "body": "@Test\n    @Transactional\n    public void testCopyView() throws Exception {\n        final String originalViewName = \"My Original View\";\n        final String partitions = \"1,2,4\";\n        final String topic = \"MyTopic\";\n\n        final String expectedCopyName = \"Copy of \" + originalViewName;\n\n        final Cluster cluster = clusterTestTools.createCluster(\"Test Cluster\");\n        final MessageFormat keyMessageFormat = messageFormatTestTools.createMessageFormat(\"Key Message Format\");\n        final MessageFormat valueMessageFormat = messageFormatTestTools.createMessageFormat(\"Value Message Format\");\n\n        // Create source view\n        final View sourceView = viewTestTools.createView(originalViewName, cluster, keyMessageFormat);\n        sourceView.setKeyMessageFormat(keyMessageFormat);\n        sourceView.setValueMessageFormat(valueMessageFormat);\n        sourceView.setTopic(topic);\n        sourceView.setPartitions(partitions);\n\n        viewRepository.save(sourceView);\n\n        // Hit index.\n        mockMvc\n            .perform(post(\"/configuration/view/copy/\" + sourceView.getId())\n                .with(csrf())\n                .with(user(adminUserDetails))\n            )\n            //.andDo(print())\n            .andExpect(status().is3xxRedirection())\n            .andExpect(redirectedUrl(\"/configuration/view\"));\n\n        // Validate view now exists\n        final View copiedView = viewRepository.findByName(expectedCopyName);\n        assertNotNull(copiedView);\n\n        // Validate properties\n        Assert.assertNotNull(\"Should be non-null\", copiedView);\n        Assert.assertNotNull(\"Should have an id\", copiedView.getId());\n        assertNotEquals(\"Should have a new id\", copiedView.getId(), sourceView.getId());\n        assertEquals(\"Has new name\", expectedCopyName, copiedView.getName());\n        assertEquals(\"Has topic\", topic, copiedView.getTopic());\n        assertEquals(\"Has partitions\", partitions, copiedView.getPartitions());\n        assertEquals(\"Has cluster\", cluster.getId(), copiedView.getCluster().getId());\n        assertEquals(\"Has key format\", keyMessageFormat.getId(), copiedView.getKeyMessageFormat().getId());\n        assertEquals(\"Has value format\", valueMessageFormat.getId(), copiedView.getValueMessageFormat().getId());\n    }", "signature": "void testCopyView()", "full_signature": "@Test @Transactional public void testCopyView()", "class_method_signature": "ViewConfigControllerTest.testCopyView()", "testcase": true, "constructor": false, "invocations": ["createCluster", "createMessageFormat", "createMessageFormat", "createView", "setKeyMessageFormat", "setValueMessageFormat", "setTopic", "setPartitions", "save", "andExpect", "andExpect", "perform", "with", "with", "post", "getId", "csrf", "user", "is3xxRedirection", "status", "redirectedUrl", "findByName", "assertNotNull", "assertNotNull", "assertNotNull", "getId", "assertNotEquals", "getId", "getId", "assertEquals", "getName", "assertEquals", "getTopic", "assertEquals", "getPartitions", "assertEquals", "getId", "getId", "getCluster", "assertEquals", "getId", "getId", "getKeyMessageFormat", "assertEquals", "getId", "getId", "getValueMessageFormat"]}, "focal_class": {"identifier": "ViewConfigController", "superclass": "extends BaseController", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private ClusterRepository clusterRepository;", "modifier": "@Autowired\n    private", "type": "ClusterRepository", "declarator": "clusterRepository", "var_name": "clusterRepository"}, {"original_string": "@Autowired\n    private MessageFormatRepository messageFormatRepository;", "modifier": "@Autowired\n    private", "type": "MessageFormatRepository", "declarator": "messageFormatRepository", "var_name": "messageFormatRepository"}, {"original_string": "@Autowired\n    private ViewRepository viewRepository;", "modifier": "@Autowired\n    private", "type": "ViewRepository", "declarator": "viewRepository", "var_name": "viewRepository"}, {"original_string": "@Autowired\n    private ViewToFilterOptionalRepository viewToFilterOptionalRepository;", "modifier": "@Autowired\n    private", "type": "ViewToFilterOptionalRepository", "declarator": "viewToFilterOptionalRepository", "var_name": "viewToFilterOptionalRepository"}, {"original_string": "@Autowired\n    private FilterRepository filterRepository;", "modifier": "@Autowired\n    private", "type": "FilterRepository", "declarator": "filterRepository", "var_name": "filterRepository"}, {"original_string": "@Autowired\n    private KafkaOperationsFactory kafkaOperationsFactory;", "modifier": "@Autowired\n    private", "type": "KafkaOperationsFactory", "declarator": "kafkaOperationsFactory", "var_name": "kafkaOperationsFactory"}], "methods": [{"identifier": "datatable", "parameters": "(\n        final Model model,\n        @RequestParam(name = \"cluster.id\", required = false) final Long clusterId,\n        final Pageable pageable,\n        @RequestParam Map<String,String> allParams\n    )", "modifiers": "@RequestMapping(path = \"\", method = RequestMethod.GET) public", "return": "String", "signature": "String datatable(\n        final Model model,\n        @RequestParam(name = \"cluster.id\", required = false) final Long clusterId,\n        final Pageable pageable,\n        @RequestParam Map<String,String> allParams\n    )", "full_signature": "@RequestMapping(path = \"\", method = RequestMethod.GET) public String datatable(\n        final Model model,\n        @RequestParam(name = \"cluster.id\", required = false) final Long clusterId,\n        final Pageable pageable,\n        @RequestParam Map<String,String> allParams\n    )", "class_method_signature": "ViewConfigController.datatable(\n        final Model model,\n        @RequestParam(name = \"cluster.id\", required = false) final Long clusterId,\n        final Pageable pageable,\n        @RequestParam Map<String,String> allParams\n    )", "testcase": false, "constructor": false}, {"identifier": "createViewForm", "parameters": "(final ViewForm viewForm, final Model model, final RedirectAttributes redirectAttributes)", "modifiers": "@RequestMapping(path = \"/create\", method = RequestMethod.GET) public", "return": "String", "signature": "String createViewForm(final ViewForm viewForm, final Model model, final RedirectAttributes redirectAttributes)", "full_signature": "@RequestMapping(path = \"/create\", method = RequestMethod.GET) public String createViewForm(final ViewForm viewForm, final Model model, final RedirectAttributes redirectAttributes)", "class_method_signature": "ViewConfigController.createViewForm(final ViewForm viewForm, final Model model, final RedirectAttributes redirectAttributes)", "testcase": false, "constructor": false}, {"identifier": "editViewForm", "parameters": "(\n        @PathVariable final Long id,\n        final ViewForm viewForm,\n        final RedirectAttributes redirectAttributes,\n        final Model model)", "modifiers": "@RequestMapping(path = \"/edit/{id}\", method = RequestMethod.GET) public", "return": "String", "signature": "String editViewForm(\n        @PathVariable final Long id,\n        final ViewForm viewForm,\n        final RedirectAttributes redirectAttributes,\n        final Model model)", "full_signature": "@RequestMapping(path = \"/edit/{id}\", method = RequestMethod.GET) public String editViewForm(\n        @PathVariable final Long id,\n        final ViewForm viewForm,\n        final RedirectAttributes redirectAttributes,\n        final Model model)", "class_method_signature": "ViewConfigController.editViewForm(\n        @PathVariable final Long id,\n        final ViewForm viewForm,\n        final RedirectAttributes redirectAttributes,\n        final Model model)", "testcase": false, "constructor": false}, {"identifier": "updateView", "parameters": "(\n        @Valid final ViewForm viewForm,\n        final BindingResult bindingResult,\n        final RedirectAttributes redirectAttributes,\n        final Model model,\n        @RequestParam final Map<String, String> allRequestParams)", "modifiers": "@RequestMapping(path = \"/update\", method = RequestMethod.POST) public", "return": "String", "signature": "String updateView(\n        @Valid final ViewForm viewForm,\n        final BindingResult bindingResult,\n        final RedirectAttributes redirectAttributes,\n        final Model model,\n        @RequestParam final Map<String, String> allRequestParams)", "full_signature": "@RequestMapping(path = \"/update\", method = RequestMethod.POST) public String updateView(\n        @Valid final ViewForm viewForm,\n        final BindingResult bindingResult,\n        final RedirectAttributes redirectAttributes,\n        final Model model,\n        @RequestParam final Map<String, String> allRequestParams)", "class_method_signature": "ViewConfigController.updateView(\n        @Valid final ViewForm viewForm,\n        final BindingResult bindingResult,\n        final RedirectAttributes redirectAttributes,\n        final Model model,\n        @RequestParam final Map<String, String> allRequestParams)", "testcase": false, "constructor": false}, {"identifier": "handleOptionalFilterSubmission", "parameters": "(\n        final Set<ViewToFilterOptional> currentlySetFilters,\n        final Set<Long> submittedFilterIds,\n        final View view)", "modifiers": "private", "return": "void", "signature": "void handleOptionalFilterSubmission(\n        final Set<ViewToFilterOptional> currentlySetFilters,\n        final Set<Long> submittedFilterIds,\n        final View view)", "full_signature": "private void handleOptionalFilterSubmission(\n        final Set<ViewToFilterOptional> currentlySetFilters,\n        final Set<Long> submittedFilterIds,\n        final View view)", "class_method_signature": "ViewConfigController.handleOptionalFilterSubmission(\n        final Set<ViewToFilterOptional> currentlySetFilters,\n        final Set<Long> submittedFilterIds,\n        final View view)", "testcase": false, "constructor": false}, {"identifier": "handleEnforcedFilterSubmission", "parameters": "(\n        final Set<ViewToFilterEnforced> currentlySetFilters,\n        final Set<Long> submittedFilterIds,\n        final View view,\n        final Map<String, String> allRequestParameters)", "modifiers": "private", "return": "void", "signature": "void handleEnforcedFilterSubmission(\n        final Set<ViewToFilterEnforced> currentlySetFilters,\n        final Set<Long> submittedFilterIds,\n        final View view,\n        final Map<String, String> allRequestParameters)", "full_signature": "private void handleEnforcedFilterSubmission(\n        final Set<ViewToFilterEnforced> currentlySetFilters,\n        final Set<Long> submittedFilterIds,\n        final View view,\n        final Map<String, String> allRequestParameters)", "class_method_signature": "ViewConfigController.handleEnforcedFilterSubmission(\n        final Set<ViewToFilterEnforced> currentlySetFilters,\n        final Set<Long> submittedFilterIds,\n        final View view,\n        final Map<String, String> allRequestParameters)", "testcase": false, "constructor": false}, {"identifier": "deleteView", "parameters": "(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "modifiers": "@RequestMapping(path = \"/delete/{id}\", method = RequestMethod.POST) public", "return": "String", "signature": "String deleteView(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "full_signature": "@RequestMapping(path = \"/delete/{id}\", method = RequestMethod.POST) public String deleteView(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "class_method_signature": "ViewConfigController.deleteView(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "testcase": false, "constructor": false}, {"identifier": "copyView", "parameters": "(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "modifiers": "@RequestMapping(path = \"/copy/{id}\", method = RequestMethod.POST) @Transactional public", "return": "String", "signature": "String copyView(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "full_signature": "@RequestMapping(path = \"/copy/{id}\", method = RequestMethod.POST) @Transactional public String copyView(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "class_method_signature": "ViewConfigController.copyView(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "testcase": false, "constructor": false}, {"identifier": "setupBreadCrumbs", "parameters": "(final Model model, String name, String url)", "modifiers": "private", "return": "void", "signature": "void setupBreadCrumbs(final Model model, String name, String url)", "full_signature": "private void setupBreadCrumbs(final Model model, String name, String url)", "class_method_signature": "ViewConfigController.setupBreadCrumbs(final Model model, String name, String url)", "testcase": false, "constructor": false}], "file": "kafka-webview-ui/src/main/java/org/sourcelab/kafka/webview/ui/controller/configuration/view/ViewConfigController.java"}, "focal_method": {"identifier": "copyView", "parameters": "(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "modifiers": "@RequestMapping(path = \"/copy/{id}\", method = RequestMethod.POST) @Transactional public", "return": "String", "body": "@RequestMapping(path = \"/copy/{id}\", method = RequestMethod.POST)\n    @Transactional\n    public String copyView(@PathVariable final Long id, final RedirectAttributes redirectAttributes) {\n        // Retrieve it\n        if (!viewRepository.existsById(id)) {\n            // Set flash message & redirect\n            redirectAttributes.addFlashAttribute(\"FlashMessage\", FlashMessage.newWarning(\"Unable to find view!\"));\n        } else {\n            // Retrieve view\n            viewRepository.findById(id).ifPresent((view) -> {\n                // Create Copy manager\n                final ViewCopyManager copyManager = new ViewCopyManager(viewRepository);\n                final String newName = \"Copy of \" + view.getName();\n                copyManager.copy(view, newName);\n\n                redirectAttributes.addFlashAttribute(\n                    \"FlashMessage\",\n                    FlashMessage.newSuccess(\"Copied view using name '\" + newName + \"'!\")\n                );\n            });\n        }\n\n        // redirect to cluster index\n        return \"redirect:/configuration/view\";\n    }", "signature": "String copyView(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "full_signature": "@RequestMapping(path = \"/copy/{id}\", method = RequestMethod.POST) @Transactional public String copyView(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "class_method_signature": "ViewConfigController.copyView(@PathVariable final Long id, final RedirectAttributes redirectAttributes)", "testcase": false, "constructor": false, "invocations": ["existsById", "addFlashAttribute", "newWarning", "ifPresent", "findById", "getName", "copy", "addFlashAttribute", "newSuccess"]}, "repository": {"repo_id": 106082622, "url": "https://github.com/SourceLabOrg/kafka-webview", "stars": 256, "created": "10/7/2017 8:28:45 AM +00:00", "updates": "2020-01-25T06:02:44+00:00", "fork": "False", "license": "licensed"}}