{"test_class": {"identifier": "UtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Locale defaultLocale;", "modifier": "private", "type": "Locale", "declarator": "defaultLocale", "var_name": "defaultLocale"}], "file": "ethereumj-core/src/test/java/org/ethereum/util/UtilsTest.java"}, "test_case": {"identifier": "testGetValueShortString1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetValueShortString1() {\n\n        int aaa;\n        String expected = \"123\\u00b7(10^24)\";\n        String result = Utils.getValueShortString(new BigInteger(\"123456789123445654363653463\"));\n\n        assertEquals(expected, result);\n    }", "signature": "void testGetValueShortString1()", "full_signature": "@Test public void testGetValueShortString1()", "class_method_signature": "UtilsTest.testGetValueShortString1()", "testcase": true, "constructor": false, "invocations": ["getValueShortString", "assertEquals"]}, "focal_class": {"identifier": "Utils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DataWord DIVISOR = DataWord.of(64);", "modifier": "private static final", "type": "DataWord", "declarator": "DIVISOR = DataWord.of(64)", "var_name": "DIVISOR"}, {"original_string": "private static SecureRandom random = new SecureRandom();", "modifier": "private static", "type": "SecureRandom", "declarator": "random = new SecureRandom()", "var_name": "random"}, {"original_string": "static BigInteger _1000_ = new BigInteger(\"1000\");", "modifier": "static", "type": "BigInteger", "declarator": "_1000_ = new BigInteger(\"1000\")", "var_name": "_1000_"}, {"original_string": "public static double JAVA_VERSION = getJavaVersion();", "modifier": "public static", "type": "double", "declarator": "JAVA_VERSION = getJavaVersion()", "var_name": "JAVA_VERSION"}], "methods": [{"identifier": "unifiedNumericToBigInteger", "parameters": "(String number)", "modifiers": "public static", "return": "BigInteger", "signature": "BigInteger unifiedNumericToBigInteger(String number)", "full_signature": "public static BigInteger unifiedNumericToBigInteger(String number)", "class_method_signature": "Utils.unifiedNumericToBigInteger(String number)", "testcase": false, "constructor": false}, {"identifier": "longToDateTime", "parameters": "(long timestamp)", "modifiers": "public static", "return": "String", "signature": "String longToDateTime(long timestamp)", "full_signature": "public static String longToDateTime(long timestamp)", "class_method_signature": "Utils.longToDateTime(long timestamp)", "testcase": false, "constructor": false}, {"identifier": "longToTimePeriod", "parameters": "(long msec)", "modifiers": "public static", "return": "String", "signature": "String longToTimePeriod(long msec)", "full_signature": "public static String longToTimePeriod(long msec)", "class_method_signature": "Utils.longToTimePeriod(long msec)", "testcase": false, "constructor": false}, {"identifier": "getImageIcon", "parameters": "(String resource)", "modifiers": "public static", "return": "ImageIcon", "signature": "ImageIcon getImageIcon(String resource)", "full_signature": "public static ImageIcon getImageIcon(String resource)", "class_method_signature": "Utils.getImageIcon(String resource)", "testcase": false, "constructor": false}, {"identifier": "getValueShortString", "parameters": "(BigInteger number)", "modifiers": "public static", "return": "String", "signature": "String getValueShortString(BigInteger number)", "full_signature": "public static String getValueShortString(BigInteger number)", "class_method_signature": "Utils.getValueShortString(BigInteger number)", "testcase": false, "constructor": false}, {"identifier": "addressStringToBytes", "parameters": "(String hex)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] addressStringToBytes(String hex)", "full_signature": "public static byte[] addressStringToBytes(String hex)", "class_method_signature": "Utils.addressStringToBytes(String hex)", "testcase": false, "constructor": false}, {"identifier": "isValidAddress", "parameters": "(byte[] addr)", "modifiers": "public static", "return": "boolean", "signature": "boolean isValidAddress(byte[] addr)", "full_signature": "public static boolean isValidAddress(byte[] addr)", "class_method_signature": "Utils.isValidAddress(byte[] addr)", "testcase": false, "constructor": false}, {"identifier": "getAddressShortString", "parameters": "(byte[] addr)", "modifiers": "public static", "return": "String", "signature": "String getAddressShortString(byte[] addr)", "full_signature": "public static String getAddressShortString(byte[] addr)", "class_method_signature": "Utils.getAddressShortString(byte[] addr)", "testcase": false, "constructor": false}, {"identifier": "getRandom", "parameters": "()", "modifiers": "public static", "return": "SecureRandom", "signature": "SecureRandom getRandom()", "full_signature": "public static SecureRandom getRandom()", "class_method_signature": "Utils.getRandom()", "testcase": false, "constructor": false}, {"identifier": "getJavaVersion", "parameters": "()", "modifiers": "static", "return": "double", "signature": "double getJavaVersion()", "full_signature": "static double getJavaVersion()", "class_method_signature": "Utils.getJavaVersion()", "testcase": false, "constructor": false}, {"identifier": "getHashListShort", "parameters": "(List<byte[]> blockHashes)", "modifiers": "public static", "return": "String", "signature": "String getHashListShort(List<byte[]> blockHashes)", "full_signature": "public static String getHashListShort(List<byte[]> blockHashes)", "class_method_signature": "Utils.getHashListShort(List<byte[]> blockHashes)", "testcase": false, "constructor": false}, {"identifier": "getNodeIdShort", "parameters": "(String nodeId)", "modifiers": "public static", "return": "String", "signature": "String getNodeIdShort(String nodeId)", "full_signature": "public static String getNodeIdShort(String nodeId)", "class_method_signature": "Utils.getNodeIdShort(String nodeId)", "testcase": false, "constructor": false}, {"identifier": "toUnixTime", "parameters": "(long javaTime)", "modifiers": "public static", "return": "long", "signature": "long toUnixTime(long javaTime)", "full_signature": "public static long toUnixTime(long javaTime)", "class_method_signature": "Utils.toUnixTime(long javaTime)", "testcase": false, "constructor": false}, {"identifier": "fromUnixTime", "parameters": "(long unixTime)", "modifiers": "public static", "return": "long", "signature": "long fromUnixTime(long unixTime)", "full_signature": "public static long fromUnixTime(long unixTime)", "class_method_signature": "Utils.fromUnixTime(long unixTime)", "testcase": false, "constructor": false}, {"identifier": "mergeArrays", "parameters": "(T[] ... arr)", "modifiers": "public static", "return": "T[]", "signature": "T[] mergeArrays(T[] ... arr)", "full_signature": "public static T[] mergeArrays(T[] ... arr)", "class_method_signature": "Utils.mergeArrays(T[] ... arr)", "testcase": false, "constructor": false}, {"identifier": "align", "parameters": "(String s, char fillChar, int targetLen, boolean alignRight)", "modifiers": "public static", "return": "String", "signature": "String align(String s, char fillChar, int targetLen, boolean alignRight)", "full_signature": "public static String align(String s, char fillChar, int targetLen, boolean alignRight)", "class_method_signature": "Utils.align(String s, char fillChar, int targetLen, boolean alignRight)", "testcase": false, "constructor": false}, {"identifier": "repeat", "parameters": "(String s, int n)", "modifiers": "public static", "return": "String", "signature": "String repeat(String s, int n)", "full_signature": "public static String repeat(String s, int n)", "class_method_signature": "Utils.repeat(String s, int n)", "testcase": false, "constructor": false}, {"identifier": "dumpKeys", "parameters": "(DbSource<byte[]> ds)", "modifiers": "public static", "return": "List<ByteArrayWrapper>", "signature": "List<ByteArrayWrapper> dumpKeys(DbSource<byte[]> ds)", "full_signature": "public static List<ByteArrayWrapper> dumpKeys(DbSource<byte[]> ds)", "class_method_signature": "Utils.dumpKeys(DbSource<byte[]> ds)", "testcase": false, "constructor": false}, {"identifier": "allButOne64th", "parameters": "(DataWord dw)", "modifiers": "public static", "return": "DataWord", "signature": "DataWord allButOne64th(DataWord dw)", "full_signature": "public static DataWord allButOne64th(DataWord dw)", "class_method_signature": "Utils.allButOne64th(DataWord dw)", "testcase": false, "constructor": false}, {"identifier": "showErrorAndExit", "parameters": "(String message, String... messages)", "modifiers": "public static", "return": "void", "signature": "void showErrorAndExit(String message, String... messages)", "full_signature": "public static void showErrorAndExit(String message, String... messages)", "class_method_signature": "Utils.showErrorAndExit(String message, String... messages)", "testcase": false, "constructor": false}, {"identifier": "showWarn", "parameters": "(String message, String... messages)", "modifiers": "public static", "return": "void", "signature": "void showWarn(String message, String... messages)", "full_signature": "public static void showWarn(String message, String... messages)", "class_method_signature": "Utils.showWarn(String message, String... messages)", "testcase": false, "constructor": false}, {"identifier": "sizeToStr", "parameters": "(long size)", "modifiers": "public static", "return": "String", "signature": "String sizeToStr(long size)", "full_signature": "public static String sizeToStr(long size)", "class_method_signature": "Utils.sizeToStr(long size)", "testcase": false, "constructor": false}, {"identifier": "sleep", "parameters": "(long ms)", "modifiers": "public static", "return": "void", "signature": "void sleep(long ms)", "full_signature": "public static void sleep(long ms)", "class_method_signature": "Utils.sleep(long ms)", "testcase": false, "constructor": false}, {"identifier": "isHexEncoded", "parameters": "(String value)", "modifiers": "public static", "return": "boolean", "signature": "boolean isHexEncoded(String value)", "full_signature": "public static boolean isHexEncoded(String value)", "class_method_signature": "Utils.isHexEncoded(String value)", "testcase": false, "constructor": false}], "file": "ethereumj-core/src/main/java/org/ethereum/util/Utils.java"}, "focal_method": {"identifier": "getValueShortString", "parameters": "(BigInteger number)", "modifiers": "public static", "return": "String", "body": "public static String getValueShortString(BigInteger number) {\n        BigInteger result = number;\n        int pow = 0;\n        while (result.compareTo(_1000_) == 1 || result.compareTo(_1000_) == 0) {\n            result = result.divide(_1000_);\n            pow += 3;\n        }\n        return result.toString() + \"\\u00b7(\" + \"10^\" + pow + \")\";\n    }", "signature": "String getValueShortString(BigInteger number)", "full_signature": "public static String getValueShortString(BigInteger number)", "class_method_signature": "Utils.getValueShortString(BigInteger number)", "testcase": false, "constructor": false, "invocations": ["compareTo", "compareTo", "divide", "toString"]}, "repository": {"repo_id": 19730456, "url": "https://github.com/ethereum/ethereumj", "language": "Java", "is_fork": false, "fork_count": 1034, "stargazer_count": 2058, "size": 47979, "license": "licensed"}}