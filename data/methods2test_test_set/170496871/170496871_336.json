{"test_class": {"identifier": "MSEImpurityMeasureTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/tree/impurity/mse/MSEImpurityMeasureTest.java"}, "test_case": {"identifier": "testAdd", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAdd() {\n        Random rnd = new Random(0);\n\n        MSEImpurityMeasure a = new MSEImpurityMeasure(\n            rnd.nextDouble(), rnd.nextDouble(), rnd.nextInt(), rnd.nextDouble(), rnd.nextDouble(), rnd.nextInt()\n        );\n\n        MSEImpurityMeasure b = new MSEImpurityMeasure(\n            rnd.nextDouble(), rnd.nextDouble(), rnd.nextInt(), rnd.nextDouble(), rnd.nextDouble(), rnd.nextInt()\n        );\n\n        MSEImpurityMeasure c = a.add(b);\n\n        assertEquals(a.getLeftY() + b.getLeftY(), c.getLeftY(), 1e-10);\n        assertEquals(a.getLeftY2() + b.getLeftY2(), c.getLeftY2(), 1e-10);\n        assertEquals(a.getLeftCnt() + b.getLeftCnt(), c.getLeftCnt());\n        assertEquals(a.getRightY() + b.getRightY(), c.getRightY(), 1e-10);\n        assertEquals(a.getRightY2() + b.getRightY2(), c.getRightY2(), 1e-10);\n        assertEquals(a.getRightCnt() + b.getRightCnt(), c.getRightCnt());\n    }", "signature": "void testAdd()", "full_signature": "@Test public void testAdd()", "class_method_signature": "MSEImpurityMeasureTest.testAdd()", "testcase": true, "constructor": false, "invocations": ["nextDouble", "nextDouble", "nextInt", "nextDouble", "nextDouble", "nextInt", "nextDouble", "nextDouble", "nextInt", "nextDouble", "nextDouble", "nextInt", "add", "assertEquals", "getLeftY", "getLeftY", "getLeftY", "assertEquals", "getLeftY2", "getLeftY2", "getLeftY2", "assertEquals", "getLeftCnt", "getLeftCnt", "getLeftCnt", "assertEquals", "getRightY", "getRightY", "getRightY", "assertEquals", "getRightY2", "getRightY2", "getRightY2", "assertEquals", "getRightCnt", "getRightCnt", "getRightCnt"]}, "focal_class": {"identifier": "MSEImpurityMeasure", "superclass": "", "interfaces": "implements ImpurityMeasure<MSEImpurityMeasure>", "fields": [{"original_string": "private static final long serialVersionUID = 4536394578628409689L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 4536394578628409689L", "var_name": "serialVersionUID"}, {"original_string": "private final double leftY;", "modifier": "private final", "type": "double", "declarator": "leftY", "var_name": "leftY"}, {"original_string": "private final double leftY2;", "modifier": "private final", "type": "double", "declarator": "leftY2", "var_name": "leftY2"}, {"original_string": "private final long leftCnt;", "modifier": "private final", "type": "long", "declarator": "leftCnt", "var_name": "leftCnt"}, {"original_string": "private final double rightY;", "modifier": "private final", "type": "double", "declarator": "rightY", "var_name": "rightY"}, {"original_string": "private final double rightY2;", "modifier": "private final", "type": "double", "declarator": "rightY2", "var_name": "rightY2"}, {"original_string": "private final long rightCnt;", "modifier": "private final", "type": "long", "declarator": "rightCnt", "var_name": "rightCnt"}], "methods": [{"identifier": "MSEImpurityMeasure", "parameters": "(double leftY, double leftY2, long leftCnt, double rightY, double rightY2, long rightCnt)", "modifiers": "public", "return": "", "signature": " MSEImpurityMeasure(double leftY, double leftY2, long leftCnt, double rightY, double rightY2, long rightCnt)", "full_signature": "public  MSEImpurityMeasure(double leftY, double leftY2, long leftCnt, double rightY, double rightY2, long rightCnt)", "class_method_signature": "MSEImpurityMeasure.MSEImpurityMeasure(double leftY, double leftY2, long leftCnt, double rightY, double rightY2, long rightCnt)", "testcase": false, "constructor": true}, {"identifier": "impurity", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double impurity()", "full_signature": "@Override public double impurity()", "class_method_signature": "MSEImpurityMeasure.impurity()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(MSEImpurityMeasure b)", "modifiers": "@Override public", "return": "MSEImpurityMeasure", "signature": "MSEImpurityMeasure add(MSEImpurityMeasure b)", "full_signature": "@Override public MSEImpurityMeasure add(MSEImpurityMeasure b)", "class_method_signature": "MSEImpurityMeasure.add(MSEImpurityMeasure b)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(MSEImpurityMeasure b)", "modifiers": "@Override public", "return": "MSEImpurityMeasure", "signature": "MSEImpurityMeasure subtract(MSEImpurityMeasure b)", "full_signature": "@Override public MSEImpurityMeasure subtract(MSEImpurityMeasure b)", "class_method_signature": "MSEImpurityMeasure.subtract(MSEImpurityMeasure b)", "testcase": false, "constructor": false}, {"identifier": "getLeftY", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getLeftY()", "full_signature": "public double getLeftY()", "class_method_signature": "MSEImpurityMeasure.getLeftY()", "testcase": false, "constructor": false}, {"identifier": "getLeftY2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getLeftY2()", "full_signature": "public double getLeftY2()", "class_method_signature": "MSEImpurityMeasure.getLeftY2()", "testcase": false, "constructor": false}, {"identifier": "getLeftCnt", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLeftCnt()", "full_signature": "public long getLeftCnt()", "class_method_signature": "MSEImpurityMeasure.getLeftCnt()", "testcase": false, "constructor": false}, {"identifier": "getRightY", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRightY()", "full_signature": "public double getRightY()", "class_method_signature": "MSEImpurityMeasure.getRightY()", "testcase": false, "constructor": false}, {"identifier": "getRightY2", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getRightY2()", "full_signature": "public double getRightY2()", "class_method_signature": "MSEImpurityMeasure.getRightY2()", "testcase": false, "constructor": false}, {"identifier": "getRightCnt", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getRightCnt()", "full_signature": "public long getRightCnt()", "class_method_signature": "MSEImpurityMeasure.getRightCnt()", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/tree/impurity/mse/MSEImpurityMeasure.java"}, "focal_method": {"identifier": "add", "parameters": "(MSEImpurityMeasure b)", "modifiers": "@Override public", "return": "MSEImpurityMeasure", "body": "@Override public MSEImpurityMeasure add(MSEImpurityMeasure b) {\n        return new MSEImpurityMeasure(\n            leftY + b.leftY,\n            leftY2 + b.leftY2,\n            leftCnt + b.leftCnt,\n            rightY + b.rightY,\n            rightY2 + b.rightY2,\n            rightCnt + b.rightCnt\n        );\n    }", "signature": "MSEImpurityMeasure add(MSEImpurityMeasure b)", "full_signature": "@Override public MSEImpurityMeasure add(MSEImpurityMeasure b)", "class_method_signature": "MSEImpurityMeasure.add(MSEImpurityMeasure b)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}