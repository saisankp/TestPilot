{"test_class": {"identifier": "TestEsperStatement", "superclass": "", "interfaces": "", "fields": [{"original_string": "private EsperTemplate template;", "modifier": "private", "type": "EsperTemplate", "declarator": "template", "var_name": "template"}, {"original_string": "private EsperStatement statement;", "modifier": "private", "type": "EsperStatement", "declarator": "statement", "var_name": "statement"}, {"original_string": "private ParameterizedEsperRowMapper<SampleEvent> rowMapper;", "modifier": "private", "type": "ParameterizedEsperRowMapper<SampleEvent>", "declarator": "rowMapper", "var_name": "rowMapper"}], "file": "esper-template/src/test/java/org/opencredo/esper/TestEsperStatement.java"}, "test_case": {"identifier": "testConcurrencyUnsafeQueryForObject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConcurrencyUnsafeQueryForObject() throws Exception {\n\n        SampleEvent event = new SampleEvent();\n        template.sendEvent(event);\n\n        SampleEvent result = statement.concurrentUnsafeQueryForObject(this.rowMapper);\n\n        assertEquals(result, event);\n\n    }", "signature": "void testConcurrencyUnsafeQueryForObject()", "full_signature": "@Test public void testConcurrencyUnsafeQueryForObject()", "class_method_signature": "TestEsperStatement.testConcurrencyUnsafeQueryForObject()", "testcase": true, "constructor": false, "invocations": ["sendEvent", "concurrentUnsafeQueryForObject", "assertEquals"]}, "focal_class": {"identifier": "EsperStatement", "superclass": "", "interfaces": "implements EsperStatementOperations", "fields": [{"original_string": "private final static Logger LOG = LoggerFactory.getLogger(EsperStatement.class);", "modifier": "private final static", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(EsperStatement.class)", "var_name": "LOG"}, {"original_string": "private String id;", "modifier": "private", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private String epl;", "modifier": "private", "type": "String", "declarator": "epl", "var_name": "epl"}, {"original_string": "private EPStatement epStatement;", "modifier": "private", "type": "EPStatement", "declarator": "epStatement", "var_name": "epStatement"}, {"original_string": "private Set<UpdateListener> listeners = new LinkedHashSet<UpdateListener>();", "modifier": "private", "type": "Set<UpdateListener>", "declarator": "listeners = new LinkedHashSet<UpdateListener>()", "var_name": "listeners"}, {"original_string": "private Object subscriber;", "modifier": "private", "type": "Object", "declarator": "subscriber", "var_name": "subscriber"}], "methods": [{"identifier": "EsperStatement", "parameters": "(String epl)", "modifiers": "public", "return": "", "signature": " EsperStatement(String epl)", "full_signature": "public  EsperStatement(String epl)", "class_method_signature": "EsperStatement.EsperStatement(String epl)", "testcase": false, "constructor": true}, {"identifier": "EsperStatement", "parameters": "(String id, String epl)", "modifiers": "public", "return": "", "signature": " EsperStatement(String id, String epl)", "full_signature": "public  EsperStatement(String id, String epl)", "class_method_signature": "EsperStatement.EsperStatement(String id, String epl)", "testcase": false, "constructor": true}, {"identifier": "getEPL", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEPL()", "full_signature": "public String getEPL()", "class_method_signature": "EsperStatement.getEPL()", "testcase": false, "constructor": false}, {"identifier": "getState", "parameters": "()", "modifiers": "public", "return": "EPStatementState", "signature": "EPStatementState getState()", "full_signature": "public EPStatementState getState()", "class_method_signature": "EsperStatement.getState()", "testcase": false, "constructor": false}, {"identifier": "start", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void start()", "full_signature": "public void start()", "class_method_signature": "EsperStatement.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stop()", "full_signature": "public void stop()", "class_method_signature": "EsperStatement.stop()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void destroy()", "full_signature": "public void destroy()", "class_method_signature": "EsperStatement.destroy()", "testcase": false, "constructor": false}, {"identifier": "doWithNativeEPStatement", "parameters": "(NativeEPStatementCallback callback)", "modifiers": "public", "return": "void", "signature": "void doWithNativeEPStatement(NativeEPStatementCallback callback)", "full_signature": "public void doWithNativeEPStatement(NativeEPStatementCallback callback)", "class_method_signature": "EsperStatement.doWithNativeEPStatement(NativeEPStatementCallback callback)", "testcase": false, "constructor": false}, {"identifier": "setListeners", "parameters": "(Set<UpdateListener> listeners)", "modifiers": "public", "return": "void", "signature": "void setListeners(Set<UpdateListener> listeners)", "full_signature": "public void setListeners(Set<UpdateListener> listeners)", "class_method_signature": "EsperStatement.setListeners(Set<UpdateListener> listeners)", "testcase": false, "constructor": false}, {"identifier": "getListeners", "parameters": "()", "modifiers": "public", "return": "Set<UpdateListener>", "signature": "Set<UpdateListener> getListeners()", "full_signature": "public Set<UpdateListener> getListeners()", "class_method_signature": "EsperStatement.getListeners()", "testcase": false, "constructor": false}, {"identifier": "setSubscriber", "parameters": "(Object subscriber)", "modifiers": "public", "return": "void", "signature": "void setSubscriber(Object subscriber)", "full_signature": "public void setSubscriber(Object subscriber)", "class_method_signature": "EsperStatement.setSubscriber(Object subscriber)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(UpdateListener listener)", "modifiers": "public", "return": "void", "signature": "void addListener(UpdateListener listener)", "full_signature": "public void addListener(UpdateListener listener)", "class_method_signature": "EsperStatement.addListener(UpdateListener listener)", "testcase": false, "constructor": false}, {"identifier": "refreshEPStatmentListeners", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshEPStatmentListeners()", "full_signature": "private void refreshEPStatmentListeners()", "class_method_signature": "EsperStatement.refreshEPStatmentListeners()", "testcase": false, "constructor": false}, {"identifier": "addEPStatementListener", "parameters": "(UpdateListener listener)", "modifiers": "private", "return": "void", "signature": "void addEPStatementListener(UpdateListener listener)", "full_signature": "private void addEPStatementListener(UpdateListener listener)", "class_method_signature": "EsperStatement.addEPStatementListener(UpdateListener listener)", "testcase": false, "constructor": false}, {"identifier": "setEPStatement", "parameters": "(EPStatement epStatement)", "modifiers": "", "return": "void", "signature": "void setEPStatement(EPStatement epStatement)", "full_signature": " void setEPStatement(EPStatement epStatement)", "class_method_signature": "EsperStatement.setEPStatement(EPStatement epStatement)", "testcase": false, "constructor": false}, {"identifier": "concurrentSafeQuery", "parameters": "(ParameterizedEsperRowMapper<T> rm)", "modifiers": "public", "return": "List<T>", "signature": "List<T> concurrentSafeQuery(ParameterizedEsperRowMapper<T> rm)", "full_signature": "public List<T> concurrentSafeQuery(ParameterizedEsperRowMapper<T> rm)", "class_method_signature": "EsperStatement.concurrentSafeQuery(ParameterizedEsperRowMapper<T> rm)", "testcase": false, "constructor": false}, {"identifier": "concurrentSafeQueryForObject", "parameters": "(ParameterizedEsperRowMapper<T> rm)", "modifiers": "public", "return": "T", "signature": "T concurrentSafeQueryForObject(ParameterizedEsperRowMapper<T> rm)", "full_signature": "public T concurrentSafeQueryForObject(ParameterizedEsperRowMapper<T> rm)", "class_method_signature": "EsperStatement.concurrentSafeQueryForObject(ParameterizedEsperRowMapper<T> rm)", "testcase": false, "constructor": false}, {"identifier": "concurrentUnsafeQuery", "parameters": "(ParameterizedEsperRowMapper<T> rm)", "modifiers": "public", "return": "List<T>", "signature": "List<T> concurrentUnsafeQuery(ParameterizedEsperRowMapper<T> rm)", "full_signature": "public List<T> concurrentUnsafeQuery(ParameterizedEsperRowMapper<T> rm)", "class_method_signature": "EsperStatement.concurrentUnsafeQuery(ParameterizedEsperRowMapper<T> rm)", "testcase": false, "constructor": false}, {"identifier": "concurrentUnsafeQueryForObject", "parameters": "(\n\t\t\tParameterizedEsperRowMapper<T> rm)", "modifiers": "public", "return": "T", "signature": "T concurrentUnsafeQueryForObject(\n\t\t\tParameterizedEsperRowMapper<T> rm)", "full_signature": "public T concurrentUnsafeQueryForObject(\n\t\t\tParameterizedEsperRowMapper<T> rm)", "class_method_signature": "EsperStatement.concurrentUnsafeQueryForObject(\n\t\t\tParameterizedEsperRowMapper<T> rm)", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getId()", "full_signature": "public String getId()", "class_method_signature": "EsperStatement.getId()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "EsperStatement.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "EsperStatement.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "EsperStatement.toString()", "testcase": false, "constructor": false}], "file": "esper-template/src/main/java/org/opencredo/esper/EsperStatement.java"}, "focal_method": {"identifier": "concurrentUnsafeQueryForObject", "parameters": "(\n\t\t\tParameterizedEsperRowMapper<T> rm)", "modifiers": "public", "return": "T", "body": "public <T> T concurrentUnsafeQueryForObject(\n\t\t\tParameterizedEsperRowMapper<T> rm) {\n\t\tLOG.info(\"Concurrent unsafe query for object being executed\");\n\n\t\tif (epStatement.isStopped() || epStatement.isDestroyed()) {\n\t\t\tLOG\n\t\t\t\t\t.error(\"Concurrent unsafe query for object was attempted when the statement was stopped or destroyed\");\n\t\t\tthrow new EsperStatementInvalidStateException(\n\t\t\t\t\t\"Attempted to execute a concurrent unsafe query for object when esper statement resource had state of \"\n\t\t\t\t\t\t\t+ epStatement.getState());\n\t\t}\n\n\t\tIterator<EventBean> safeIter = this.epStatement.iterator();\n\n\t\tT result = null;\n\n\t\t// Only retrieve the last result\n\t\twhile (safeIter.hasNext()) {\n\t\t\tEventBean event = safeIter.next();\n\t\t\tif (!safeIter.hasNext()) {\n\t\t\t\tresult = rm.mapRow(event);\n\t\t\t}\n\n\t\t}\n\n\t\tLOG.info(\"Concurrent unsafe query for object was completed\");\n\t\treturn result;\n\t}", "signature": "T concurrentUnsafeQueryForObject(\n\t\t\tParameterizedEsperRowMapper<T> rm)", "full_signature": "public T concurrentUnsafeQueryForObject(\n\t\t\tParameterizedEsperRowMapper<T> rm)", "class_method_signature": "EsperStatement.concurrentUnsafeQueryForObject(\n\t\t\tParameterizedEsperRowMapper<T> rm)", "testcase": false, "constructor": false, "invocations": ["info", "isStopped", "isDestroyed", "error", "getState", "iterator", "hasNext", "next", "hasNext", "mapRow", "info"]}, "repository": {"repo_id": 440622, "url": "https://github.com/opencredo/opencredo-esper", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 28, "size": 828, "license": "licensed"}}