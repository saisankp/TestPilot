{"test_class": {"identifier": "ClaimImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final EntityIdValue subject = new ItemIdValueImpl(\"Q42\", \"http://wikidata.org/entity/\");", "modifier": "private final", "type": "EntityIdValue", "declarator": "subject = new ItemIdValueImpl(\"Q42\", \"http://wikidata.org/entity/\")", "var_name": "subject"}, {"original_string": "private final ValueSnak mainSnak = new ValueSnakImpl(\n\t\t\tnew PropertyIdValueImpl(\"P42\", \"http://wikidata.org/entity/\"),\n\t\t\tsubject\n\t);", "modifier": "private final", "type": "ValueSnak", "declarator": "mainSnak = new ValueSnakImpl(\n\t\t\tnew PropertyIdValueImpl(\"P42\", \"http://wikidata.org/entity/\"),\n\t\t\tsubject\n\t)", "var_name": "mainSnak"}, {"original_string": "private final Claim c1 = new ClaimImpl(subject, mainSnak, Collections.emptyList());", "modifier": "private final", "type": "Claim", "declarator": "c1 = new ClaimImpl(subject, mainSnak, Collections.emptyList())", "var_name": "c1"}, {"original_string": "private final Claim c2 = new ClaimImpl(subject, mainSnak, Collections.emptyList());", "modifier": "private final", "type": "Claim", "declarator": "c2 = new ClaimImpl(subject, mainSnak, Collections.emptyList())", "var_name": "c2"}], "file": "wdtk-datamodel/src/test/java/org/wikidata/wdtk/datamodel/implementation/ClaimImplTest.java"}, "test_case": {"identifier": "accessSnakGroups", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void accessSnakGroups() {\n\t\tEntityIdValue value1 = new ItemIdValueImpl(\"Q1\",\n\t\t\t\t\"http://wikidata.org/entity/\");\n\t\tEntityIdValue value2 = new ItemIdValueImpl(\"Q2\",\n\t\t\t\t\"http://wikidata.org/entity/\");\n\t\tPropertyIdValue property1 = new PropertyIdValueImpl(\"P1\", \"http://wikidata.org/entity/\");\n\t\tPropertyIdValue property2 = new PropertyIdValueImpl(\"P2\", \"http://wikidata.org/entity/\");\n\t\tSnak snak1 = new ValueSnakImpl(property1, value1);\n\t\tSnak snak2 = new ValueSnakImpl(property1, value2);\n\t\tSnak snak3 = new ValueSnakImpl(property2, value2);\n\n\t\tList<Snak> snakList1 = new ArrayList<>();\n\t\tsnakList1.add(snak1);\n\t\tsnakList1.add(snak2);\n\n\t\tSnakGroup snakGroup1 = new SnakGroupImpl(snakList1);\n\t\tSnakGroup snakGroup2 = new SnakGroupImpl(\n\t\t\t\tCollections.singletonList(snak3));\n\t\tList<SnakGroup> snakGroups = new ArrayList<>();\n\t\tsnakGroups.add(snakGroup1);\n\t\tsnakGroups.add(snakGroup2);\n\n\t\tClaim claim = new ClaimImpl(subject, mainSnak, snakGroups);\n\n\t\tIterator<Snak> snaks = claim.getAllQualifiers();\n\n\t\tassertTrue(snaks.hasNext());\n\t\tassertEquals(snak1, snaks.next());\n\t\tassertTrue(snaks.hasNext());\n\t\tassertEquals(snak2, snaks.next());\n\t\tassertTrue(snaks.hasNext());\n\t\tassertEquals(snak3, snaks.next());\n\t\tassertFalse(snaks.hasNext());\n\t}", "signature": "void accessSnakGroups()", "full_signature": "@Test public void accessSnakGroups()", "class_method_signature": "ClaimImplTest.accessSnakGroups()", "testcase": true, "constructor": false, "invocations": ["add", "add", "singletonList", "add", "add", "getAllQualifiers", "assertTrue", "hasNext", "assertEquals", "next", "assertTrue", "hasNext", "assertEquals", "next", "assertTrue", "hasNext", "assertEquals", "next", "assertFalse", "hasNext"]}, "focal_class": {"identifier": "ClaimImpl", "superclass": "", "interfaces": "implements Claim", "fields": [{"original_string": "private final Statement statement;", "modifier": "private final", "type": "Statement", "declarator": "statement", "var_name": "statement"}], "methods": [{"identifier": "ClaimImpl", "parameters": "(\n\t\t\tEntityIdValue subject,\n\t\t\tSnak mainSnak,\n\t\t\tList<SnakGroup> qualifiers)", "modifiers": "public", "return": "", "signature": " ClaimImpl(\n\t\t\tEntityIdValue subject,\n\t\t\tSnak mainSnak,\n\t\t\tList<SnakGroup> qualifiers)", "full_signature": "public  ClaimImpl(\n\t\t\tEntityIdValue subject,\n\t\t\tSnak mainSnak,\n\t\t\tList<SnakGroup> qualifiers)", "class_method_signature": "ClaimImpl.ClaimImpl(\n\t\t\tEntityIdValue subject,\n\t\t\tSnak mainSnak,\n\t\t\tList<SnakGroup> qualifiers)", "testcase": false, "constructor": true}, {"identifier": "ClaimImpl", "parameters": "(StatementImpl statement)", "modifiers": "public", "return": "", "signature": " ClaimImpl(StatementImpl statement)", "full_signature": "public  ClaimImpl(StatementImpl statement)", "class_method_signature": "ClaimImpl.ClaimImpl(StatementImpl statement)", "testcase": false, "constructor": true}, {"identifier": "getSubject", "parameters": "()", "modifiers": "@Override public", "return": "EntityIdValue", "signature": "EntityIdValue getSubject()", "full_signature": "@Override public EntityIdValue getSubject()", "class_method_signature": "ClaimImpl.getSubject()", "testcase": false, "constructor": false}, {"identifier": "getMainSnak", "parameters": "()", "modifiers": "@Override public", "return": "Snak", "signature": "Snak getMainSnak()", "full_signature": "@Override public Snak getMainSnak()", "class_method_signature": "ClaimImpl.getMainSnak()", "testcase": false, "constructor": false}, {"identifier": "getQualifiers", "parameters": "()", "modifiers": "@Override public", "return": "List<SnakGroup>", "signature": "List<SnakGroup> getQualifiers()", "full_signature": "@Override public List<SnakGroup> getQualifiers()", "class_method_signature": "ClaimImpl.getQualifiers()", "testcase": false, "constructor": false}, {"identifier": "getAllQualifiers", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Snak>", "signature": "Iterator<Snak> getAllQualifiers()", "full_signature": "@Override public Iterator<Snak> getAllQualifiers()", "class_method_signature": "ClaimImpl.getAllQualifiers()", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "()", "modifiers": "@Override public", "return": "Value", "signature": "Value getValue()", "full_signature": "@Override public Value getValue()", "class_method_signature": "ClaimImpl.getValue()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "ClaimImpl.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "ClaimImpl.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ClaimImpl.toString()", "testcase": false, "constructor": false}], "file": "wdtk-datamodel/src/main/java/org/wikidata/wdtk/datamodel/implementation/ClaimImpl.java"}, "focal_method": {"identifier": "getAllQualifiers", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Snak>", "body": "@Override\n\tpublic Iterator<Snak> getAllQualifiers() {\n\t\treturn statement.getAllQualifiers();\n\t}", "signature": "Iterator<Snak> getAllQualifiers()", "full_signature": "@Override public Iterator<Snak> getAllQualifiers()", "class_method_signature": "ClaimImpl.getAllQualifiers()", "testcase": false, "constructor": false, "invocations": ["getAllQualifiers"]}, "repository": {"repo_id": 16144428, "url": "https://github.com/Wikidata/Wikidata-Toolkit", "language": "Java", "is_fork": false, "fork_count": 80, "stargazer_count": 264, "size": 11241, "license": "licensed"}}