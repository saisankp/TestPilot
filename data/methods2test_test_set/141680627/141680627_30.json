{"test_class": {"identifier": "RouteUtilTest", "superclass": "extends RobolectricTest", "interfaces": "", "fields": [], "file": "MSDKUIKit/MSDKUILib/src/test/java/com/here/msdkui/routing/RouteUtilTest.java"}, "test_case": {"identifier": "testArrivalTime", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testArrivalTime() {\n        Context context = getApplicationContext();\n        Route route = new MockUtils.MockRouteBuilder().getRoute();\n        long currentTimeInMs = new Date().getTime();\n        String arrivalTime = RouteUtil.getArrivalTime(context, route, false);\n        assertThat(arrivalTime, equalTo(DateFormatterUtil.format(getApplicationContext(),\n                new Date(currentTimeInMs + 1000 * DateUtils.SECOND_IN_MILLIS))));\n\n        int penaltyMinutes = 5;\n        route = new MockUtils.MockRouteBuilder().setTrafficPenaltyMinutes(penaltyMinutes).getRoute();\n        arrivalTime = RouteUtil.getArrivalTime(context, route, true);\n        assertThat(arrivalTime, equalTo(DateFormatterUtil.format(getApplicationContext(),\n                new Date(currentTimeInMs + penaltyMinutes * DateUtils.MINUTE_IN_MILLIS))));\n    }", "signature": "void testArrivalTime()", "full_signature": "@Test public void testArrivalTime()", "class_method_signature": "RouteUtilTest.testArrivalTime()", "testcase": true, "constructor": false, "invocations": ["getApplicationContext", "getRoute", "getTime", "getArrivalTime", "assertThat", "equalTo", "format", "getApplicationContext", "getRoute", "setTrafficPenaltyMinutes", "getArrivalTime", "assertThat", "equalTo", "format", "getApplicationContext"]}, "focal_class": {"identifier": "RouteUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "RouteUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " RouteUtil()", "full_signature": "private  RouteUtil()", "class_method_signature": "RouteUtil.RouteUtil()", "testcase": false, "constructor": true}, {"identifier": "getLongestRoadSegments", "parameters": "(final Route route)", "modifiers": "public static", "return": "String", "signature": "String getLongestRoadSegments(final Route route)", "full_signature": "public static String getLongestRoadSegments(final Route route)", "class_method_signature": "RouteUtil.getLongestRoadSegments(final Route route)", "testcase": false, "constructor": false}, {"identifier": "getTrafficDelayed", "parameters": "(final Context context, final Route route)", "modifiers": "public static", "return": "Spannable", "signature": "Spannable getTrafficDelayed(final Context context, final Route route)", "full_signature": "public static Spannable getTrafficDelayed(final Context context, final Route route)", "class_method_signature": "RouteUtil.getTrafficDelayed(final Context context, final Route route)", "testcase": false, "constructor": false}, {"identifier": "getArrivalTime", "parameters": "(final Context context, final Route route, final boolean isTraffic)", "modifiers": "public static", "return": "String", "signature": "String getArrivalTime(final Context context, final Route route, final boolean isTraffic)", "full_signature": "public static String getArrivalTime(final Context context, final Route route, final boolean isTraffic)", "class_method_signature": "RouteUtil.getArrivalTime(final Context context, final Route route, final boolean isTraffic)", "testcase": false, "constructor": false}, {"identifier": "getRouteLength", "parameters": "(final Context context, final Route route,\n                                        final UnitSystem unitSystem)", "modifiers": "public static", "return": "String", "signature": "String getRouteLength(final Context context, final Route route,\n                                        final UnitSystem unitSystem)", "full_signature": "public static String getRouteLength(final Context context, final Route route,\n                                        final UnitSystem unitSystem)", "class_method_signature": "RouteUtil.getRouteLength(final Context context, final Route route,\n                                        final UnitSystem unitSystem)", "testcase": false, "constructor": false}, {"identifier": "getDetails", "parameters": "(final Context context, final Route route,\n                                       final UnitSystem unitSystem)", "modifiers": "public static", "return": "Spannable", "signature": "Spannable getDetails(final Context context, final Route route,\n                                       final UnitSystem unitSystem)", "full_signature": "public static Spannable getDetails(final Context context, final Route route,\n                                       final UnitSystem unitSystem)", "class_method_signature": "RouteUtil.getDetails(final Context context, final Route route,\n                                       final UnitSystem unitSystem)", "testcase": false, "constructor": false}, {"identifier": "getTimeToArrive", "parameters": "(final Context context, final Route route, final boolean isTraffic)", "modifiers": "public static", "return": "Spannable", "signature": "Spannable getTimeToArrive(final Context context, final Route route, final boolean isTraffic)", "full_signature": "public static Spannable getTimeToArrive(final Context context, final Route route, final boolean isTraffic)", "class_method_signature": "RouteUtil.getTimeToArrive(final Context context, final Route route, final boolean isTraffic)", "testcase": false, "constructor": false}, {"identifier": "getIcon", "parameters": "(final Route route)", "modifiers": "public static", "return": "Integer", "signature": "Integer getIcon(final Route route)", "full_signature": "public static Integer getIcon(final Route route)", "class_method_signature": "RouteUtil.getIcon(final Route route)", "testcase": false, "constructor": false}, {"identifier": "getSectionBar", "parameters": "(final Context context, final Route route)", "modifiers": "public static", "return": "List<SectionModel>", "signature": "List<SectionModel> getSectionBar(final Context context, final Route route)", "full_signature": "public static List<SectionModel> getSectionBar(final Context context, final Route route)", "class_method_signature": "RouteUtil.getSectionBar(final Context context, final Route route)", "testcase": false, "constructor": false}, {"identifier": "addVia", "parameters": "(final Context context, final Route route, final SpannableStringBuilder builder)", "modifiers": "private static", "return": "void", "signature": "void addVia(final Context context, final Route route, final SpannableStringBuilder builder)", "full_signature": "private static void addVia(final Context context, final Route route, final SpannableStringBuilder builder)", "class_method_signature": "RouteUtil.addVia(final Context context, final Route route, final SpannableStringBuilder builder)", "testcase": false, "constructor": false}, {"identifier": "appendDrawable", "parameters": "(final Context context, final SpannableStringBuilder builder, final int drawable, int tint)", "modifiers": "private static", "return": "void", "signature": "void appendDrawable(final Context context, final SpannableStringBuilder builder, final int drawable, int tint)", "full_signature": "private static void appendDrawable(final Context context, final SpannableStringBuilder builder, final int drawable, int tint)", "class_method_signature": "RouteUtil.appendDrawable(final Context context, final SpannableStringBuilder builder, final int drawable, int tint)", "testcase": false, "constructor": false}, {"identifier": "appendText", "parameters": "(final Context context, final SpannableStringBuilder builder, final String text, final int attr)", "modifiers": "private static", "return": "void", "signature": "void appendText(final Context context, final SpannableStringBuilder builder, final String text, final int attr)", "full_signature": "private static void appendText(final Context context, final SpannableStringBuilder builder, final String text, final int attr)", "class_method_signature": "RouteUtil.appendText(final Context context, final SpannableStringBuilder builder, final String text, final int attr)", "testcase": false, "constructor": false}, {"identifier": "getRouteOrRoadName", "parameters": "(final RoadElement road)", "modifiers": "private static", "return": "String", "signature": "String getRouteOrRoadName(final RoadElement road)", "full_signature": "private static String getRouteOrRoadName(final RoadElement road)", "class_method_signature": "RouteUtil.getRouteOrRoadName(final RoadElement road)", "testcase": false, "constructor": false}, {"identifier": "getTta", "parameters": "(final Route route, final boolean isTraffic)", "modifiers": "private static", "return": "long", "signature": "long getTta(final Route route, final boolean isTraffic)", "full_signature": "private static long getTta(final Route route, final boolean isTraffic)", "class_method_signature": "RouteUtil.getTta(final Route route, final boolean isTraffic)", "testcase": false, "constructor": false}, {"identifier": "isTrafficAvailable", "parameters": "(final Route route)", "modifiers": "private static", "return": "boolean", "signature": "boolean isTrafficAvailable(final Route route)", "full_signature": "private static boolean isTrafficAvailable(final Route route)", "class_method_signature": "RouteUtil.isTrafficAvailable(final Route route)", "testcase": false, "constructor": false}], "file": "MSDKUIKit/MSDKUILib/src/main/java/com/here/msdkui/routing/RouteUtil.java"}, "focal_method": {"identifier": "getArrivalTime", "parameters": "(final Context context, final Route route, final boolean isTraffic)", "modifiers": "public static", "return": "String", "body": "public static String getArrivalTime(final Context context, final Route route, final boolean isTraffic) {\n        final long tta = getTta(route, isTraffic);\n        final Date setArrivalOrDepartureDate = new Date();\n        final Date estimatedArrival;\n        final RouteOptions.TimeType type = route.getRoutePlan().getRouteOptions().getTime(setArrivalOrDepartureDate);\n        if (type == RouteOptions.TimeType.ARRIVAL) {\n            estimatedArrival = new Date(setArrivalOrDepartureDate.getTime() - tta);\n        } else {\n            estimatedArrival = new Date(setArrivalOrDepartureDate.getTime() + tta);\n        }\n        return DateFormatterUtil.format(context, estimatedArrival);\n    }", "signature": "String getArrivalTime(final Context context, final Route route, final boolean isTraffic)", "full_signature": "public static String getArrivalTime(final Context context, final Route route, final boolean isTraffic)", "class_method_signature": "RouteUtil.getArrivalTime(final Context context, final Route route, final boolean isTraffic)", "testcase": false, "constructor": false, "invocations": ["getTta", "getTime", "getRouteOptions", "getRoutePlan", "getTime", "getTime", "format"]}, "repository": {"repo_id": 141680627, "url": "https://github.com/heremaps/msdkui-android", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 35, "size": 5559, "license": "licensed"}}