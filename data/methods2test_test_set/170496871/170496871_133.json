{"test_class": {"identifier": "DiscreteRandomProducerTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/util/generators/primitives/scalar/DiscreteRandomProducerTest.java"}, "test_case": {"identifier": "testSeedConsidering", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSeedConsidering() {\n        DiscreteRandomProducer producer1 = new DiscreteRandomProducer(0L, 0.1, 0.2, 0.3, 0.4);\n        DiscreteRandomProducer producer2 = new DiscreteRandomProducer(0L, 0.1, 0.2, 0.3, 0.4);\n\n        assertEquals(producer1.get(), producer2.get(), 0.0001);\n    }", "signature": "void testSeedConsidering()", "full_signature": "@Test public void testSeedConsidering()", "class_method_signature": "DiscreteRandomProducerTest.testSeedConsidering()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "get", "get"]}, "focal_class": {"identifier": "DiscreteRandomProducer", "superclass": "extends RandomProducerWithGenerator", "interfaces": "", "fields": [{"original_string": "private static final double EPS = 1e-5;", "modifier": "private static final", "type": "double", "declarator": "EPS = 1e-5", "var_name": "EPS"}, {"original_string": "private final double[] probs;", "modifier": "private final", "type": "double[]", "declarator": "probs", "var_name": "probs"}, {"original_string": "private final int[] ids;", "modifier": "private final", "type": "int[]", "declarator": "ids", "var_name": "ids"}], "methods": [{"identifier": "DiscreteRandomProducer", "parameters": "(double... probs)", "modifiers": "public", "return": "", "signature": " DiscreteRandomProducer(double... probs)", "full_signature": "public  DiscreteRandomProducer(double... probs)", "class_method_signature": "DiscreteRandomProducer.DiscreteRandomProducer(double... probs)", "testcase": false, "constructor": true}, {"identifier": "DiscreteRandomProducer", "parameters": "(long seed, double... probs)", "modifiers": "public", "return": "", "signature": " DiscreteRandomProducer(long seed, double... probs)", "full_signature": "public  DiscreteRandomProducer(long seed, double... probs)", "class_method_signature": "DiscreteRandomProducer.DiscreteRandomProducer(long seed, double... probs)", "testcase": false, "constructor": true}, {"identifier": "uniform", "parameters": "(int numOfValues)", "modifiers": "public static", "return": "DiscreteRandomProducer", "signature": "DiscreteRandomProducer uniform(int numOfValues)", "full_signature": "public static DiscreteRandomProducer uniform(int numOfValues)", "class_method_signature": "DiscreteRandomProducer.uniform(int numOfValues)", "testcase": false, "constructor": false}, {"identifier": "uniform", "parameters": "(int numOfValues, long seed)", "modifiers": "public static", "return": "DiscreteRandomProducer", "signature": "DiscreteRandomProducer uniform(int numOfValues, long seed)", "full_signature": "public static DiscreteRandomProducer uniform(int numOfValues, long seed)", "class_method_signature": "DiscreteRandomProducer.uniform(int numOfValues, long seed)", "testcase": false, "constructor": false}, {"identifier": "randomDistribution", "parameters": "(int numOfValues)", "modifiers": "public static", "return": "double[]", "signature": "double[] randomDistribution(int numOfValues)", "full_signature": "public static double[] randomDistribution(int numOfValues)", "class_method_signature": "DiscreteRandomProducer.randomDistribution(int numOfValues)", "testcase": false, "constructor": false}, {"identifier": "randomDistribution", "parameters": "(int numOfValues, long seed)", "modifiers": "public static", "return": "double[]", "signature": "double[] randomDistribution(int numOfValues, long seed)", "full_signature": "public static double[] randomDistribution(int numOfValues, long seed)", "class_method_signature": "DiscreteRandomProducer.randomDistribution(int numOfValues, long seed)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Double", "signature": "Double get()", "full_signature": "@Override public Double get()", "class_method_signature": "DiscreteRandomProducer.get()", "testcase": false, "constructor": false}, {"identifier": "getInt", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getInt()", "full_signature": "public int getInt()", "class_method_signature": "DiscreteRandomProducer.getInt()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "DiscreteRandomProducer.size()", "testcase": false, "constructor": false}, {"identifier": "sort", "parameters": "(double[] probs, int[] idx, int from, int to)", "modifiers": "private", "return": "void", "signature": "void sort(double[] probs, int[] idx, int from, int to)", "full_signature": "private void sort(double[] probs, int[] idx, int from, int to)", "class_method_signature": "DiscreteRandomProducer.sort(double[] probs, int[] idx, int from, int to)", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/util/generators/primitives/scalar/DiscreteRandomProducer.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Double", "body": "@Override public Double get() {\n        double p = generator().nextDouble();\n        for (int i = 0; i < probs.length; i++) {\n            if (probs[i] > p)\n                return (double)ids[i];\n        }\n\n        return (double)ids[probs.length - 1];\n    }", "signature": "Double get()", "full_signature": "@Override public Double get()", "class_method_signature": "DiscreteRandomProducer.get()", "testcase": false, "constructor": false, "invocations": ["nextDouble", "generator"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}