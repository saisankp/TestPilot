{"test_class": {"identifier": "RepositoryStoreTest", "superclass": "", "interfaces": "", "fields": [], "file": "smartparam-editor/src/test/java/org/smartparam/editor/core/store/RepositoryStoreTest.java"}, "test_case": {"identifier": "shouldThrowInvalidSourceExceptionWhenTryingToGetUnknownRepository", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldThrowInvalidSourceExceptionWhenTryingToGetUnknownRepository() {\n        // given\n        List<NamedParamRepository> repositories = Arrays.asList(\n                namedRepository(new FakeEditableParamRepository()).build()\n        );\n\n        RepositoryStore<EditableParamRepository> store = new RepositoryStore<EditableParamRepository>(repositories, EditableParamRepository.class);\n\n        // when\n        try {\n            store.get(RepositoryName.from(\"invalid name\"));\n            Assertions.fail(\"Expected InvalidSourceRepositoryException.\");\n        } catch (InvalidSourceRepositoryException invalidRepoException) {\n        }\n    }", "signature": "void shouldThrowInvalidSourceExceptionWhenTryingToGetUnknownRepository()", "full_signature": "@Test public void shouldThrowInvalidSourceExceptionWhenTryingToGetUnknownRepository()", "class_method_signature": "RepositoryStoreTest.shouldThrowInvalidSourceExceptionWhenTryingToGetUnknownRepository()", "testcase": true, "constructor": false, "invocations": ["asList", "build", "namedRepository", "get", "from", "fail"]}, "focal_class": {"identifier": "RepositoryStore", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<RepositoryName, T> storedRepositories = new LinkedHashMap<RepositoryName, T>();", "modifier": "private final", "type": "Map<RepositoryName, T>", "declarator": "storedRepositories = new LinkedHashMap<RepositoryName, T>()", "var_name": "storedRepositories"}], "methods": [{"identifier": "RepositoryStore", "parameters": "(List<NamedParamRepository> allRepositories, Class<T> storedClass)", "modifiers": "public", "return": "", "signature": " RepositoryStore(List<NamedParamRepository> allRepositories, Class<T> storedClass)", "full_signature": "public  RepositoryStore(List<NamedParamRepository> allRepositories, Class<T> storedClass)", "class_method_signature": "RepositoryStore.RepositoryStore(List<NamedParamRepository> allRepositories, Class<T> storedClass)", "testcase": false, "constructor": true}, {"identifier": "filterOutMatchingRepositories", "parameters": "(List<NamedParamRepository> allRepositories, Class<T> storedClass)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "void", "signature": "void filterOutMatchingRepositories(List<NamedParamRepository> allRepositories, Class<T> storedClass)", "full_signature": "@SuppressWarnings(\"unchecked\") private void filterOutMatchingRepositories(List<NamedParamRepository> allRepositories, Class<T> storedClass)", "class_method_signature": "RepositoryStore.filterOutMatchingRepositories(List<NamedParamRepository> allRepositories, Class<T> storedClass)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(RepositoryName from)", "modifiers": "public", "return": "T", "signature": "T get(RepositoryName from)", "full_signature": "public T get(RepositoryName from)", "class_method_signature": "RepositoryStore.get(RepositoryName from)", "testcase": false, "constructor": false}, {"identifier": "storedRepositories", "parameters": "()", "modifiers": "public", "return": "List<RepositoryName>", "signature": "List<RepositoryName> storedRepositories()", "full_signature": "public List<RepositoryName> storedRepositories()", "class_method_signature": "RepositoryStore.storedRepositories()", "testcase": false, "constructor": false}], "file": "smartparam-editor/src/main/java/org/smartparam/editor/core/store/RepositoryStore.java"}, "focal_method": {"identifier": "get", "parameters": "(RepositoryName from)", "modifiers": "public", "return": "T", "body": "public T get(RepositoryName from) {\n        T repository = storedRepositories.get(from);\n        if (repository == null) {\n            throw new InvalidSourceRepositoryException(from);\n        }\n        return repository;\n    }", "signature": "T get(RepositoryName from)", "full_signature": "public T get(RepositoryName from)", "class_method_signature": "RepositoryStore.get(RepositoryName from)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 15057951, "url": "https://github.com/smartparam/smartparam", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 27, "size": 2358, "license": "licensed"}}