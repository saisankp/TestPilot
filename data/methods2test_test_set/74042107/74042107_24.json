{"test_class": {"identifier": "ScenarioParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "src/osip-core/src/test/java/edu/kit/pse/osip/core/io/files/ScenarioParserTest.java"}, "test_case": {"identifier": "testVariableAssignments", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVariableAssignments() throws ParserException {\n        ScenarioParser parser = new ScenarioParser(\"var x = 15;\");\n        parser.readStatement();\n        assertEquals(15f, parser.variables.get(\"x\"), 0.0001);\n        \n        parser = new ScenarioParser(\"var myVariable = -(3+3);\");\n        parser.readStatement();\n        assertEquals(-6f, parser.variables.get(\"myVariable\"), 0.0001);\n        \n        parser = new ScenarioParser(\"var var = -var;\");\n        parser.variables.put(\"var\", 42f);\n        parser.readStatement();\n        assertEquals(-42f, parser.variables.get(\"var\"), 0.0001);\n    }", "signature": "void testVariableAssignments()", "full_signature": "@Test public void testVariableAssignments()", "class_method_signature": "ScenarioParserTest.testVariableAssignments()", "testcase": true, "constructor": false, "invocations": ["readStatement", "assertEquals", "get", "readStatement", "assertEquals", "get", "put", "readStatement", "assertEquals", "get"]}, "focal_class": {"identifier": "ScenarioParser", "superclass": "extends ExtendedParser", "interfaces": "", "fields": [{"original_string": "private HashMap<String, CommandAction> commands = new HashMap<>();", "modifier": "private", "type": "HashMap<String, CommandAction>", "declarator": "commands = new HashMap<>()", "var_name": "commands"}, {"original_string": "protected Scenario scenario = new Scenario();", "modifier": "protected", "type": "Scenario", "declarator": "scenario = new Scenario()", "var_name": "scenario"}], "methods": [{"identifier": "ScenarioParser", "parameters": "(String toParse)", "modifiers": "public", "return": "", "signature": " ScenarioParser(String toParse)", "full_signature": "public  ScenarioParser(String toParse)", "class_method_signature": "ScenarioParser.ScenarioParser(String toParse)", "testcase": false, "constructor": true}, {"identifier": "readScenario", "parameters": "()", "modifiers": "public final", "return": "Scenario", "signature": "Scenario readScenario()", "full_signature": "public final Scenario readScenario()", "class_method_signature": "ScenarioParser.readScenario()", "testcase": false, "constructor": false}, {"identifier": "skipUtf8Bom", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void skipUtf8Bom()", "full_signature": "private void skipUtf8Bom()", "class_method_signature": "ScenarioParser.skipUtf8Bom()", "testcase": false, "constructor": false}, {"identifier": "readStatement", "parameters": "()", "modifiers": "public final", "return": "void", "signature": "void readStatement()", "full_signature": "public final void readStatement()", "class_method_signature": "ScenarioParser.readStatement()", "testcase": false, "constructor": false}, {"identifier": "readAlphabetic", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String readAlphabetic()", "full_signature": "private String readAlphabetic()", "class_method_signature": "ScenarioParser.readAlphabetic()", "testcase": false, "constructor": false}, {"identifier": "checkArgumentCount", "parameters": "(ArrayList<Float> parameters, int required)", "modifiers": "private", "return": "void", "signature": "void checkArgumentCount(ArrayList<Float> parameters, int required)", "full_signature": "private void checkArgumentCount(ArrayList<Float> parameters, int required)", "class_method_signature": "ScenarioParser.checkArgumentCount(ArrayList<Float> parameters, int required)", "testcase": false, "constructor": false}, {"identifier": "addCommands", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addCommands()", "full_signature": "private void addCommands()", "class_method_signature": "ScenarioParser.addCommands()", "testcase": false, "constructor": false}], "file": "src/osip-core/src/main/java/edu/kit/pse/osip/core/io/files/ScenarioParser.java"}, "focal_method": {"identifier": "readStatement", "parameters": "()", "modifiers": "public final", "return": "void", "body": "public final void readStatement() throws ParserException {\n        String command = readAlphabetic();\n        skipWhitespaces();\n        \n        if (command.equals(\"var\")) {\n            // Variable assignment\n            String name = readAlphabetic();\n            skipWhitespaces();\n            check('=');\n            skipWhitespaces();\n            float value = readExpression();\n            skipWhitespaces();\n            check(';');\n            super.variables.put(name, value);\n        } else {\n            // Function call\n            ArrayList<Float> parameters = new ArrayList<>();\n            check('(');\n            while (true) {\n                skipWhitespaces();\n                parameters.add(readExpression());\n                skipWhitespaces();\n                if (peek() == ',') {\n                    check(',');\n                    skipWhitespaces();\n                } else {\n                    break;\n                }\n            }\n            skipWhitespaces();\n            check(')');\n            skipWhitespaces();\n            check(';');\n\n            if (command.equals(\"delay\")) {\n                checkArgumentCount(parameters, 1);\n                scenario.addPause(Math.round(parameters.get(0)));\n            } else if (command.equals(\"setRepeat\")) {\n                checkArgumentCount(parameters, 1);\n                scenario.setRepeat(Math.abs(parameters.get(0) - 1) < 0.000001);\n            } else if (!commands.containsKey(command)) {\n                die(\"Unknown command: \" + command);\n            } else {\n                scenario.appendRunnable(commands.get(command).create(parameters));\n            }\n        }\n    }", "signature": "void readStatement()", "full_signature": "public final void readStatement()", "class_method_signature": "ScenarioParser.readStatement()", "testcase": false, "constructor": false, "invocations": ["readAlphabetic", "skipWhitespaces", "equals", "readAlphabetic", "skipWhitespaces", "check", "skipWhitespaces", "readExpression", "skipWhitespaces", "check", "put", "check", "skipWhitespaces", "add", "readExpression", "skipWhitespaces", "peek", "check", "skipWhitespaces", "skipWhitespaces", "check", "skipWhitespaces", "check", "equals", "checkArgumentCount", "addPause", "round", "get", "equals", "checkArgumentCount", "setRepeat", "abs", "get", "containsKey", "die", "appendRunnable", "create", "get"]}, "repository": {"repo_id": 74042107, "url": "https://github.com/ByteHamster/PSE", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 18396, "license": "licensed"}}