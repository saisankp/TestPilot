{"test_class": {"identifier": "PooledClientProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int MAX_CLIENT_COUNT = 3;", "modifier": "public static final", "type": "int", "declarator": "MAX_CLIENT_COUNT = 3", "var_name": "MAX_CLIENT_COUNT"}, {"original_string": "public static final long CLIENT_OBTAIN_TIMEOUT = 10;", "modifier": "public static final", "type": "long", "declarator": "CLIENT_OBTAIN_TIMEOUT = 10", "var_name": "CLIENT_OBTAIN_TIMEOUT"}, {"original_string": "@ClassRule\n  public static TemporaryFolder tmpFolder = new TemporaryFolder();", "modifier": "@ClassRule\n  public static", "type": "TemporaryFolder", "declarator": "tmpFolder = new TemporaryFolder()", "var_name": "tmpFolder"}], "file": "tephra-core/src/test/java/co/cask/tephra/distributed/PooledClientProviderTest.java"}, "test_case": {"identifier": "testClientConnectionPoolMaximumNumberOfClients", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testClientConnectionPoolMaximumNumberOfClients() throws Exception {\n    // We need a server for the client to connect to\n    InMemoryZKServer zkServer = InMemoryZKServer.builder().setDataDir(tmpFolder.newFolder()).build();\n    zkServer.startAndWait();\n\n    try {\n      Configuration conf = new Configuration();\n      conf.set(TxConstants.Service.CFG_DATA_TX_ZOOKEEPER_QUORUM, zkServer.getConnectionStr());\n      conf.set(TxConstants.Manager.CFG_TX_SNAPSHOT_DIR, tmpFolder.newFolder().getAbsolutePath());\n      conf.set(\"data.tx.client.count\", Integer.toString(MAX_CLIENT_COUNT));\n      conf.set(\"data.tx.client.obtain.timeout\", Long.toString(CLIENT_OBTAIN_TIMEOUT));\n\n      final TransactionServiceMain main = new TransactionServiceMain(conf);\n      final CountDownLatch latch = new CountDownLatch(1);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            main.start();\n            latch.countDown();\n          } catch (Exception e) {\n            throw Throwables.propagate(e);\n          }\n        }\n      };\n\n      try {\n        t.start();\n        // Wait for service to startup\n        latch.await();\n\n        startClientAndTestPool(conf);\n      } finally {\n        main.stop();\n        t.join();\n      }\n    } finally {\n      zkServer.stopAndWait();\n    }\n  }", "signature": "void testClientConnectionPoolMaximumNumberOfClients()", "full_signature": "@Test public void testClientConnectionPoolMaximumNumberOfClients()", "class_method_signature": "PooledClientProviderTest.testClientConnectionPoolMaximumNumberOfClients()", "testcase": true, "constructor": false, "invocations": ["build", "setDataDir", "builder", "newFolder", "startAndWait", "set", "getConnectionStr", "set", "getAbsolutePath", "newFolder", "set", "toString", "set", "toString", "start", "countDown", "propagate", "start", "await", "startClientAndTestPool", "stop", "join", "stopAndWait"]}, "focal_class": {"identifier": "PooledClientProvider", "superclass": "extends AbstractClientProvider", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG =\n      LoggerFactory.getLogger(PooledClientProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG =\n      LoggerFactory.getLogger(PooledClientProvider.class)", "var_name": "LOG"}, {"original_string": "private volatile TxClientPool clients;", "modifier": "private volatile", "type": "TxClientPool", "declarator": "clients", "var_name": "clients"}, {"original_string": "private int maxClients;", "modifier": "private", "type": "int", "declarator": "maxClients", "var_name": "maxClients"}, {"original_string": "private long obtainClientTimeoutMs;", "modifier": "private", "type": "long", "declarator": "obtainClientTimeoutMs", "var_name": "obtainClientTimeoutMs"}], "methods": [{"identifier": "PooledClientProvider", "parameters": "(Configuration conf, DiscoveryServiceClient discoveryServiceClient)", "modifiers": "public", "return": "", "signature": " PooledClientProvider(Configuration conf, DiscoveryServiceClient discoveryServiceClient)", "full_signature": "public  PooledClientProvider(Configuration conf, DiscoveryServiceClient discoveryServiceClient)", "class_method_signature": "PooledClientProvider.PooledClientProvider(Configuration conf, DiscoveryServiceClient discoveryServiceClient)", "testcase": false, "constructor": true}, {"identifier": "initializePool", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializePool()", "full_signature": "private void initializePool()", "class_method_signature": "PooledClientProvider.initializePool()", "testcase": false, "constructor": false}, {"identifier": "getCloseableClient", "parameters": "()", "modifiers": "@Override public", "return": "CloseableThriftClient", "signature": "CloseableThriftClient getCloseableClient()", "full_signature": "@Override public CloseableThriftClient getCloseableClient()", "class_method_signature": "PooledClientProvider.getCloseableClient()", "testcase": false, "constructor": false}, {"identifier": "returnClient", "parameters": "(TransactionServiceThriftClient client)", "modifiers": "@Override public", "return": "void", "signature": "void returnClient(TransactionServiceThriftClient client)", "full_signature": "@Override public void returnClient(TransactionServiceThriftClient client)", "class_method_signature": "PooledClientProvider.returnClient(TransactionServiceThriftClient client)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PooledClientProvider.toString()", "testcase": false, "constructor": false}, {"identifier": "getClientPool", "parameters": "()", "modifiers": "private", "return": "TxClientPool", "signature": "TxClientPool getClientPool()", "full_signature": "private TxClientPool getClientPool()", "class_method_signature": "PooledClientProvider.getClientPool()", "testcase": false, "constructor": false}], "file": "tephra-core/src/main/java/co/cask/tephra/distributed/PooledClientProvider.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String toString() {\n    return \"Elastic pool of size \" + this.maxClients +\n      \", with timeout (in milliseconds): \" + this.obtainClientTimeoutMs;\n  }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "PooledClientProvider.toString()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 21894018, "url": "https://github.com/cdapio/tephra", "language": "Java", "is_fork": false, "fork_count": 43, "stargazer_count": 157, "size": 1415, "license": "licensed"}}