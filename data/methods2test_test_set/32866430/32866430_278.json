{"test_class": {"identifier": "ListVersionsActionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock KeywhizClient keywhizClient;", "modifier": "@Mock", "type": "KeywhizClient", "declarator": "keywhizClient", "var_name": "keywhizClient"}, {"original_string": "@Mock Printing printing;", "modifier": "@Mock", "type": "Printing", "declarator": "printing", "var_name": "printing"}, {"original_string": "ListVersionsActionConfig listVersionsActionConfig;", "modifier": "", "type": "ListVersionsActionConfig", "declarator": "listVersionsActionConfig", "var_name": "listVersionsActionConfig"}, {"original_string": "ListVersionsAction listVersionsAction;", "modifier": "", "type": "ListVersionsAction", "declarator": "listVersionsAction", "var_name": "listVersionsAction"}, {"original_string": "private static final ApiDate NOW = ApiDate.now();", "modifier": "private static final", "type": "ApiDate", "declarator": "NOW = ApiDate.now()", "var_name": "NOW"}, {"original_string": "Secret secretV2 =\n      new Secret(0, \"secret\", null, () -> \"c2VjcmV0MQ==\", \"checksum2\", NOW, null, NOW, null, null,\n          null, ImmutableMap.of(), 0, 1L, NOW, \"creator2\");", "modifier": "", "type": "Secret", "declarator": "secretV2 =\n      new Secret(0, \"secret\", null, () -> \"c2VjcmV0MQ==\", \"checksum2\", NOW, null, NOW, null, null,\n          null, ImmutableMap.of(), 0, 1L, NOW, \"creator2\")", "var_name": "secretV2"}, {"original_string": "Secret secretV1 =\n      new Secret(0, \"secret\", null, () -> \"c2VjcmV0MQ==\", \"checksum1\", NOW, null, NOW, null, null,\n          null, ImmutableMap.of(), 0, -1L, NOW, \"creator1\");", "modifier": "", "type": "Secret", "declarator": "secretV1 =\n      new Secret(0, \"secret\", null, () -> \"c2VjcmV0MQ==\", \"checksum1\", NOW, null, NOW, null, null,\n          null, ImmutableMap.of(), 0, -1L, NOW, \"creator1\")", "var_name": "secretV1"}, {"original_string": "SanitizedSecret sanitizedSecretV2 = SanitizedSecret.fromSecret(secretV2);", "modifier": "", "type": "SanitizedSecret", "declarator": "sanitizedSecretV2 = SanitizedSecret.fromSecret(secretV2)", "var_name": "sanitizedSecretV2"}, {"original_string": "SanitizedSecret sanitizedSecretV1 = SanitizedSecret.fromSecret(secretV1);", "modifier": "", "type": "SanitizedSecret", "declarator": "sanitizedSecretV1 = SanitizedSecret.fromSecret(secretV1)", "var_name": "sanitizedSecretV1"}, {"original_string": "List<SanitizedSecret> secretVersions = ImmutableList.of(sanitizedSecretV2, sanitizedSecretV1);", "modifier": "", "type": "List<SanitizedSecret>", "declarator": "secretVersions = ImmutableList.of(sanitizedSecretV2, sanitizedSecretV1)", "var_name": "secretVersions"}], "file": "cli/src/test/java/keywhiz/cli/commands/ListVersionsActionTest.java"}, "test_case": {"identifier": "listVersionsUsesDefaults", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void listVersionsUsesDefaults() throws Exception {\n    listVersionsActionConfig.name = secretV2.getDisplayName();\n\n    when(keywhizClient.getSanitizedSecretByName(secretV2.getDisplayName())).thenReturn(\n        sanitizedSecretV2);\n    when(keywhizClient.listSecretVersions(eq(secretV2.getName()), anyInt(), anyInt())).thenReturn(\n        secretVersions);\n\n    listVersionsAction.run();\n\n    verify(keywhizClient).listSecretVersions(secretV2.getName(), 0, 10);\n    verify(printing).printSecretVersions(secretVersions, Optional.of(1L));\n  }", "signature": "void listVersionsUsesDefaults()", "full_signature": "@Test public void listVersionsUsesDefaults()", "class_method_signature": "ListVersionsActionTest.listVersionsUsesDefaults()", "testcase": true, "constructor": false, "invocations": ["getDisplayName", "thenReturn", "when", "getSanitizedSecretByName", "getDisplayName", "thenReturn", "when", "listSecretVersions", "eq", "getName", "anyInt", "anyInt", "run", "listSecretVersions", "verify", "getName", "printSecretVersions", "verify", "of"]}, "focal_class": {"identifier": "ListVersionsAction", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private final ListVersionsActionConfig listVersionsActionConfig;", "modifier": "private final", "type": "ListVersionsActionConfig", "declarator": "listVersionsActionConfig", "var_name": "listVersionsActionConfig"}, {"original_string": "private final KeywhizClient keywhizClient;", "modifier": "private final", "type": "KeywhizClient", "declarator": "keywhizClient", "var_name": "keywhizClient"}, {"original_string": "private final Printing printing;", "modifier": "private final", "type": "Printing", "declarator": "printing", "var_name": "printing"}], "methods": [{"identifier": "ListVersionsAction", "parameters": "(ListVersionsActionConfig listVersionsActionConfig, KeywhizClient client, Printing printing)", "modifiers": "public", "return": "", "signature": " ListVersionsAction(ListVersionsActionConfig listVersionsActionConfig, KeywhizClient client, Printing printing)", "full_signature": "public  ListVersionsAction(ListVersionsActionConfig listVersionsActionConfig, KeywhizClient client, Printing printing)", "class_method_signature": "ListVersionsAction.ListVersionsAction(ListVersionsActionConfig listVersionsActionConfig, KeywhizClient client, Printing printing)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "ListVersionsAction.run()", "testcase": false, "constructor": false}], "file": "cli/src/main/java/keywhiz/cli/commands/ListVersionsAction.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override public void run() {\n    if (listVersionsActionConfig.name == null || !validName(listVersionsActionConfig.name)) {\n      throw new IllegalArgumentException(format(\"Invalid name, must match %s\", VALID_NAME_PATTERN));\n    }\n\n    try {\n      SanitizedSecret sanitizedSecret =\n          keywhizClient.getSanitizedSecretByName(listVersionsActionConfig.name);\n\n      List<SanitizedSecret> versions =\n          keywhizClient.listSecretVersions(sanitizedSecret.name(),\n              listVersionsActionConfig.idx, listVersionsActionConfig.number);\n      printing.printSecretVersions(versions, sanitizedSecret.version());\n    } catch (NotFoundException e) {\n      throw new AssertionError(\"Secret does not exist: \" + listVersionsActionConfig.name);\n    } catch (IOException e) {\n      throw Throwables.propagate(e);\n    }\n  }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "ListVersionsAction.run()", "testcase": false, "constructor": false, "invocations": ["validName", "format", "getSanitizedSecretByName", "listSecretVersions", "name", "printSecretVersions", "version", "propagate"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}