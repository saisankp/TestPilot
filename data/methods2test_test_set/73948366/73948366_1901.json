{"test_class": {"identifier": "TestZpeMetric", "superclass": "", "interfaces": "", "fields": [], "file": "clients/java/zpe/src/test/java/com/yahoo/athenz/zpe/TestZpeMetric.java"}, "test_case": {"identifier": "testZpeMetric", "parameters": "()", "modifiers": "@SuppressWarnings(\"ResultOfMethodCallIgnored\") @Test public", "return": "void", "body": "@SuppressWarnings(\"ResultOfMethodCallIgnored\")\n    @Test\n    public void testZpeMetric() throws IOException {\n\n        // setting the system property to write in file every 5 secs\n        System.setProperty(ZpeConsts.ZPE_PROP_METRIC_WRITE_INTERVAL, \"5000\");\n        \n        final String metricDirPath = \"/tmp/zpe-metrics\";\n        File metricsDir = new File(metricDirPath);\n        metricsDir.mkdirs();\n        System.setProperty(ZpeConsts.ZPE_PROP_METRIC_FILE_PATH, metricDirPath);\n\n        final String TEST_DOMAIN = \"test\";\n        ZpeMetric.statsEnabled = true;\n        ZpeMetric test = new ZpeMetric();\n\n        // cleaning the directory\n        File dir = new File(test.getFilePath());\n        if (dir.exists()) {\n            File[] files = dir.listFiles();\n            if (files != null) {\n                for (File file : files) {\n                    if (!file.isDirectory()) {\n                        file.delete();\n                    }\n                }\n            }\n        } else {\n            dir.mkdirs();\n        }\n\n        // incrementing metrics for testing\n        test.increment(ZpeConsts.ZPE_METRIC_NAME, AuthZpeClient.DEFAULT_DOMAIN);\n        test.increment(ZpeConsts.ZPE_METRIC_NAME, AuthZpeClient.DEFAULT_DOMAIN);\n        test.increment(ZpeConsts.ZPE_METRIC_NAME, AuthZpeClient.DEFAULT_DOMAIN);\n        test.increment(ZpeConsts.ZPE_METRIC_NAME, AuthZpeClient.DEFAULT_DOMAIN);\n        test.increment(ZpeConsts.ZPE_METRIC_NAME, AuthZpeClient.DEFAULT_DOMAIN);\n        test.increment(ZpeConsts.ZPE_METRIC_NAME, AuthZpeClient.DEFAULT_DOMAIN);\n        \n        try {\n            Thread.sleep(4000);\n        } catch (InterruptedException ignored) {\n        }\n\n        test.increment(ZpeConsts.ZPE_METRIC_NAME, TEST_DOMAIN);\n        test.increment(ZpeConsts.ZPE_METRIC_NAME, TEST_DOMAIN);\n        test.increment(ZpeConsts.ZPE_METRIC_NAME, AuthZpeClient.DEFAULT_DOMAIN);\n        test.increment(ZpeConsts.ZPE_METRIC_NAME, AuthZpeClient.DEFAULT_DOMAIN);\n        test.increment(ZpeConsts.ZPE_METRIC_NAME, AuthZpeClient.DEFAULT_DOMAIN);\n        test.increment(ZpeConsts.ZPE_METRIC_NAME, AuthZpeClient.DEFAULT_DOMAIN);\n\n        try {\n            Thread.sleep(2000);\n        } catch (InterruptedException ignored) {\n        }\n\n        // Reading from the json file generated\n\n        boolean sysDomainMetricVerified = false;\n        boolean testDomainMetricVerified = false;\n        File[] files = dir.listFiles();\n        assertNotNull(files);\n        for (File file : files) {\n            String filepath = test.getFilePath() + file.getName();\n            Path path = Paths.get(filepath);\n            DomainMetrics domainMetrics = JSON.fromBytes(Files.readAllBytes(path), DomainMetrics.class);\n            // verifying the value of the metric\n            List<DomainMetric> metricList = domainMetrics.getMetricList();\n            for (DomainMetric metric : metricList) {\n                if (metric.getMetricType().toString().equals(ZpeConsts.ZPE_METRIC_NAME)) {\n                    if (domainMetrics.getDomainName().equals(\"sys.auth\")) {\n                        assertEquals(10, metric.getMetricVal());\n                        sysDomainMetricVerified = true;\n                    } else if (domainMetrics.getDomainName().equals(\"test\")) {\n                        assertEquals(2, metric.getMetricVal());\n                        testDomainMetricVerified = true;\n                    }\n                }\n            }\n        }\n        assertTrue(sysDomainMetricVerified);\n        assertTrue(testDomainMetricVerified);\n\n        // unsetting the system property\n        System.clearProperty(ZpeConsts.ZPE_PROP_METRIC_WRITE_INTERVAL);\n    }", "signature": "void testZpeMetric()", "full_signature": "@SuppressWarnings(\"ResultOfMethodCallIgnored\") @Test public void testZpeMetric()", "class_method_signature": "TestZpeMetric.testZpeMetric()", "testcase": true, "constructor": false, "invocations": ["setProperty", "mkdirs", "setProperty", "getFilePath", "exists", "listFiles", "isDirectory", "delete", "mkdirs", "increment", "increment", "increment", "increment", "increment", "increment", "sleep", "increment", "increment", "increment", "increment", "increment", "increment", "sleep", "listFiles", "assertNotNull", "getFilePath", "getName", "get", "fromBytes", "readAllBytes", "getMetricList", "equals", "toString", "getMetricType", "equals", "getDomainName", "assertEquals", "getMetricVal", "equals", "getDomainName", "assertEquals", "getMetricVal", "assertTrue", "assertTrue", "clearProperty"]}, "focal_class": {"identifier": "ZpeMetric", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String ZPE_METRIC_FILE_PATH = \"/var/zpe_stat/\";", "modifier": "public static final", "type": "String", "declarator": "ZPE_METRIC_FILE_PATH = \"/var/zpe_stat/\"", "var_name": "ZPE_METRIC_FILE_PATH"}, {"original_string": "public static final String ZPE_WRITE_INTERVAL = \"3600000\";", "modifier": "public static final", "type": "String", "declarator": "ZPE_WRITE_INTERVAL = \"3600000\"", "var_name": "ZPE_WRITE_INTERVAL"}, {"original_string": "public ConcurrentHashMap<String, AtomicIntegerArray> counter = new ConcurrentHashMap<>();", "modifier": "public", "type": "ConcurrentHashMap<String, AtomicIntegerArray>", "declarator": "counter = new ConcurrentHashMap<>()", "var_name": "counter"}, {"original_string": "private static volatile Timer FETCH_TIMER;", "modifier": "private static volatile", "type": "Timer", "declarator": "FETCH_TIMER", "var_name": "FETCH_TIMER"}, {"original_string": "private static final Object TIMER_LOCK = new Object();", "modifier": "private static final", "type": "Object", "declarator": "TIMER_LOCK = new Object()", "var_name": "TIMER_LOCK"}, {"original_string": "static boolean statsEnabled = Boolean.parseBoolean(System.getProperty(ZpeConsts.ZPE_PROP_STATS_ENABLED, \"false\"));", "modifier": "static", "type": "boolean", "declarator": "statsEnabled = Boolean.parseBoolean(System.getProperty(ZpeConsts.ZPE_PROP_STATS_ENABLED, \"false\"))", "var_name": "statsEnabled"}], "methods": [{"identifier": "ZpeMetric", "parameters": "()", "modifiers": "", "return": "", "signature": " ZpeMetric()", "full_signature": "  ZpeMetric()", "class_method_signature": "ZpeMetric.ZpeMetric()", "testcase": false, "constructor": true}, {"identifier": "getFilePath", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getFilePath()", "full_signature": " String getFilePath()", "class_method_signature": "ZpeMetric.getFilePath()", "testcase": false, "constructor": false}, {"identifier": "increment", "parameters": "(String metricName, String domainName)", "modifiers": "public", "return": "void", "signature": "void increment(String metricName, String domainName)", "full_signature": "public void increment(String metricName, String domainName)", "class_method_signature": "ZpeMetric.increment(String metricName, String domainName)", "testcase": false, "constructor": false}, {"identifier": "getMetrics", "parameters": "(String domainName)", "modifiers": "public", "return": "DomainMetrics", "signature": "DomainMetrics getMetrics(String domainName)", "full_signature": "public DomainMetrics getMetrics(String domainName)", "class_method_signature": "ZpeMetric.getMetrics(String domainName)", "testcase": false, "constructor": false}, {"identifier": "writeToFile", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void writeToFile()", "full_signature": "public void writeToFile()", "class_method_signature": "ZpeMetric.writeToFile()", "testcase": false, "constructor": false}], "file": "clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/ZpeMetric.java"}, "focal_method": {"identifier": "ZpeMetric", "parameters": "()", "modifiers": "", "return": "", "body": "ZpeMetric() {\n        File directory = new File(String.valueOf(getFilePath()));\n        //noinspection ResultOfMethodCallIgnored\n        directory.mkdir();\n        //setting the timer to the interval specified in the system property\n        if (statsEnabled) {\n            Integer interval = Integer.parseInt(System.getProperty(ZpeConsts.ZPE_PROP_METRIC_WRITE_INTERVAL, ZPE_WRITE_INTERVAL));\n            Timer timer = FETCH_TIMER;\n            if (timer == null) {\n                synchronized (TIMER_LOCK) {\n                    timer = FETCH_TIMER;\n                    if (timer == null) {\n                        timer = new Timer();\n                        timer.schedule(new SchedulerService(), interval, interval);\n                        FETCH_TIMER = timer;\n                    }\n                }\n            }\n        }\n    }", "signature": " ZpeMetric()", "full_signature": "  ZpeMetric()", "class_method_signature": "ZpeMetric.ZpeMetric()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}