{"test_class": {"identifier": "OpearPackageMojoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File testOutBaseDir = new File(\"target/test-out/OpearPackageMojoTest\");", "modifier": "private final", "type": "File", "declarator": "testOutBaseDir = new File(\"target/test-out/OpearPackageMojoTest\")", "var_name": "testOutBaseDir"}, {"original_string": "private final File srcDir = new File(\"src/test/resources/OpearPackageMojoTest\");", "modifier": "private final", "type": "File", "declarator": "srcDir = new File(\"src/test/resources/OpearPackageMojoTest\")", "var_name": "srcDir"}], "file": "maven/src/test/java/net/adamcin/oakpal/maven/mojo/OpearPackageMojoTest.java"}, "test_case": {"identifier": "testAssembleOpear_asOpear", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAssembleOpear_asOpear() throws Exception {\n        final File preInstallPackage = TestPackageUtil.prepareTestPackage(\"tmp_foo_bar.zip\");\n        final File testOutDir = new File(testOutBaseDir, \"testAssembleOpear_asOpear\");\n        FileUtils.deleteDirectory(testOutDir);\n        testOutDir.mkdirs();\n        final OpearPackageMojo mojo = newMojo();\n        final MavenProject project = mock(MavenProject.class);\n        mojo.project = project;\n        when(project.getPackaging()).thenReturn(OPEAR);\n        final String expectGroupId = \"com.example.testAssembleOpear\";\n        final String expectArtifactId = \"assembly1\";\n        final String expectVersion = \"1.0-SNAPSHOT\";\n        when(project.getGroupId()).thenReturn(expectGroupId);\n        when(project.getArtifactId()).thenReturn(expectArtifactId);\n        when(project.getVersion()).thenReturn(expectVersion);\n        final MavenSession session = mock(MavenSession.class);\n        mojo.session = session;\n        final MavenExecutionRequest executionRequest = mock(MavenExecutionRequest.class);\n        when(session.getRequest()).thenReturn(executionRequest);\n        final RepositorySystem repositorySystem = mock(RepositorySystem.class);\n        mojo.repositorySystem = repositorySystem;\n\n        final File basedir = new File(testOutDir, \"basedir\");\n        final File projectFile = new File(basedir, \"pom.xml\");\n        FileUtils.touch(projectFile);\n        when(project.getFile()).thenReturn(projectFile);\n\n        final File target = new File(basedir, \"target\");\n        target.mkdirs();\n        mojo.outputDirectory = target;\n        final File targetClasses = new File(target, \"classes\");\n        targetClasses.mkdirs();\n        final Build build = mock(Build.class);\n        when(project.getBuild()).thenReturn(build);\n        when(build.getDirectory()).thenReturn(target.getPath());\n        when(build.getOutputDirectory()).thenReturn(targetClasses.getPath());\n        FileUtils.copyFile(new File(srcDir, \"echo.js\"), new File(targetClasses, \"echo.js\"));\n\n        final String expectFinalName = expectArtifactId + \"-\" + expectVersion;\n        mojo.finalName = expectFinalName;\n\n        final Artifact projectArtifact = mock(Artifact.class);\n        when(projectArtifact.getType()).thenReturn(OPEAR);\n        when(project.getArtifact()).thenReturn(projectArtifact);\n\n        final String expectOakpalVersion = \"0.31415926535898\";\n        final Dependency oakpalCoreDep = new DependencyFilter()\n                .withGroupId(OAKPAL_GROUP_ID)\n                .withArtifactId(OAKPAL_CORE_ARTIFACT_ID)\n                .withVersion(expectOakpalVersion)\n                .toDependency();\n        final File oakpalDepFile = new File(testOutDir, \"oakpal-core.jar\");\n        final Artifact oakpalArt = mock(Artifact.class);\n        when(oakpalArt.getGroupId()).thenReturn(OAKPAL_GROUP_ID);\n        when(oakpalArt.getArtifactId()).thenReturn(OAKPAL_CORE_ARTIFACT_ID);\n        when(oakpalArt.getVersion()).thenReturn(expectOakpalVersion);\n        when(oakpalArt.getScope()).thenReturn(\"compile\");\n        when(oakpalArt.getFile()).thenReturn(oakpalDepFile);\n\n        final Dependency compileDep = new DependencyFilter().toDependency(\"compile\");\n        final File compileDepFile = new File(testOutDir, \"compile-scope.jar\");\n        FileUtils.touch(compileDepFile);\n        final Artifact compileArt = mock(Artifact.class);\n        when(compileArt.getGroupId()).thenReturn(OAKPAL_GROUP_ID);\n        when(compileArt.getArtifactId()).thenReturn(\"compile-scope\");\n        when(compileArt.getScope()).thenReturn(\"compile\");\n        when(compileArt.getFile()).thenReturn(compileDepFile);\n        when(project.getDependencies()).thenReturn(Arrays.asList(oakpalCoreDep, compileDep));\n        doAnswer(call -> {\n            final Dependency input = call.getArgument(0, Dependency.class);\n            if (input == oakpalCoreDep) {\n                return oakpalArt;\n            } else if (input == compileDep) {\n                return compileArt;\n            } else {\n                return null;\n            }\n        }).when(repositorySystem).createDependencyArtifact(any(Dependency.class));\n\n        doAnswer(call -> {\n            final ArtifactResolutionRequest request = call.getArgument(0, ArtifactResolutionRequest.class);\n            final ArtifactResolutionResult result = mock(ArtifactResolutionResult.class);\n            when(result.getArtifacts()).thenReturn(Collections.singleton(request.getArtifact()));\n            return result;\n        }).when(repositorySystem).resolve(any(ArtifactResolutionRequest.class));\n\n        final String expectFilename = \"sample-plan.json\";\n        final File samplePlanFile = new File(srcDir, expectFilename);\n        mojo.planFile = samplePlanFile;\n\n        when(project.clone()).thenReturn(project);\n        final File expectFinalFile = new File(target, expectFinalName + \".\" + OPEAR);\n        assertEquals(\"\", expectFinalFile, mojo.assembleOpear());\n        try (JarFile jarFile = new JarFile(expectFinalFile)) {\n            final Set<String> allEntries = jarFile.stream().map(JarEntry::getName).collect(Collectors.toSet());\n            final List<String> expectEntries = Arrays.asList(\n                    \"lib/classes/echo.js\",\n                    \"lib/\" + compileDepFile.getName(),\n                    \"tmp_foo_bar.zip\",\n                    expectFilename\n            );\n            for (String expectEntry : expectEntries) {\n                assertTrue(String.format(\"should have entry %s in %s\", expectEntry, allEntries),\n                        jarFile.stream().anyMatch(entry -> expectEntry.equals(entry.getName())));\n            }\n            final List<String> expectNoEntries = Arrays.asList(\n                    \"lib/\" + oakpalDepFile.getName()\n            );\n            for (String noExpectEntry : expectNoEntries) {\n                assertTrue(String.format(\"should not have entry %s in %s\", noExpectEntry, allEntries),\n                        jarFile.stream().noneMatch(entry -> noExpectEntry.equals(entry.getName())));\n            }\n            final Manifest manifest = jarFile.getManifest();\n            assertEquals(\"expect bsn\", Collections.singletonList(expectArtifactId),\n                    Util.getManifestHeaderValues(manifest, \"Bundle-SymbolicName\"));\n            assertEquals(\"expect bcp\", Arrays.asList(\"lib/classes\", \"lib/\" + compileDepFile.getName()),\n                    Util.getManifestHeaderValues(manifest, \"Bundle-ClassPath\"));\n            assertEquals(\"expect oakpal version\", Collections.singletonList(expectOakpalVersion),\n                    Util.getManifestHeaderValues(manifest, \"Oakpal-Version\"));\n            assertEquals(\"expect oakpal plan\", Collections.singletonList(expectFilename),\n                    Util.getManifestHeaderValues(manifest, \"Oakpal-Plan\"));\n        }\n    }", "signature": "void testAssembleOpear_asOpear()", "full_signature": "@Test public void testAssembleOpear_asOpear()", "class_method_signature": "OpearPackageMojoTest.testAssembleOpear_asOpear()", "testcase": true, "constructor": false, "invocations": ["prepareTestPackage", "deleteDirectory", "mkdirs", "newMojo", "mock", "thenReturn", "when", "getPackaging", "thenReturn", "when", "getGroupId", "thenReturn", "when", "getArtifactId", "thenReturn", "when", "getVersion", "mock", "mock", "thenReturn", "when", "getRequest", "mock", "touch", "thenReturn", "when", "getFile", "mkdirs", "mkdirs", "mock", "thenReturn", "when", "getBuild", "thenReturn", "when", "getDirectory", "getPath", "thenReturn", "when", "getOutputDirectory", "getPath", "copyFile", "mock", "thenReturn", "when", "getType", "thenReturn", "when", "getArtifact", "toDependency", "withVersion", "withArtifactId", "withGroupId", "mock", "thenReturn", "when", "getGroupId", "thenReturn", "when", "getArtifactId", "thenReturn", "when", "getVersion", "thenReturn", "when", "getScope", "thenReturn", "when", "getFile", "toDependency", "touch", "mock", "thenReturn", "when", "getGroupId", "thenReturn", "when", "getArtifactId", "thenReturn", "when", "getScope", "thenReturn", "when", "getFile", "thenReturn", "when", "getDependencies", "asList", "createDependencyArtifact", "when", "doAnswer", "getArgument", "any", "resolve", "when", "doAnswer", "getArgument", "mock", "thenReturn", "when", "getArtifacts", "singleton", "getArtifact", "any", "thenReturn", "when", "clone", "assertEquals", "assembleOpear", "collect", "map", "stream", "toSet", "asList", "getName", "assertTrue", "format", "anyMatch", "stream", "equals", "getName", "asList", "getName", "assertTrue", "format", "noneMatch", "stream", "equals", "getName", "getManifest", "assertEquals", "singletonList", "getManifestHeaderValues", "assertEquals", "asList", "getName", "getManifestHeaderValues", "assertEquals", "singletonList", "getManifestHeaderValues", "assertEquals", "singletonList", "getManifestHeaderValues"]}, "focal_class": {"identifier": "OpearPackageMojo", "superclass": "extends AbstractCommonMojo", "interfaces": "", "fields": [{"original_string": "public static final String OPEAR = \"opear\";", "modifier": "public static final", "type": "String", "declarator": "OPEAR = \"opear\"", "var_name": "OPEAR"}, {"original_string": "static final String OAKPAL_GROUP_ID = \"net.adamcin.oakpal\";", "modifier": "static final", "type": "String", "declarator": "OAKPAL_GROUP_ID = \"net.adamcin.oakpal\"", "var_name": "OAKPAL_GROUP_ID"}, {"original_string": "static final String OAKPAL_API_ARTIFACT_ID = \"oakpal-api\";", "modifier": "static final", "type": "String", "declarator": "OAKPAL_API_ARTIFACT_ID = \"oakpal-api\"", "var_name": "OAKPAL_API_ARTIFACT_ID"}, {"original_string": "static final String OAKPAL_CORE_ARTIFACT_ID = \"oakpal-core\";", "modifier": "static final", "type": "String", "declarator": "OAKPAL_CORE_ARTIFACT_ID = \"oakpal-core\"", "var_name": "OAKPAL_CORE_ARTIFACT_ID"}, {"original_string": "private static final Predicate<Artifact> TEST_IS_OAKPAL_API =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_API_ARTIFACT_ID::equals));", "modifier": "private static final", "type": "Predicate<Artifact>", "declarator": "TEST_IS_OAKPAL_API =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_API_ARTIFACT_ID::equals))", "var_name": "TEST_IS_OAKPAL_API"}, {"original_string": "private static final Predicate<Artifact> TEST_IS_OAKPAL_CORE =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_CORE_ARTIFACT_ID::equals));", "modifier": "private static final", "type": "Predicate<Artifact>", "declarator": "TEST_IS_OAKPAL_CORE =\n            composeTest1(Artifact::getGroupId, OAKPAL_GROUP_ID::equals)\n                    .and(composeTest1(Artifact::getArtifactId, OAKPAL_CORE_ARTIFACT_ID::equals))", "var_name": "TEST_IS_OAKPAL_CORE"}, {"original_string": "@Component\n    ArtifactHandlerManager artifactHandlerManager;", "modifier": "@Component", "type": "ArtifactHandlerManager", "declarator": "artifactHandlerManager", "var_name": "artifactHandlerManager"}, {"original_string": "@Parameter(defaultValue = \"${project.build.finalName}\", required = true)\n    String finalName;", "modifier": "@Parameter(defaultValue = \"${project.build.finalName}\", required = true)", "type": "String", "declarator": "finalName", "var_name": "finalName"}, {"original_string": "@Parameter(defaultValue = \"${project.build.directory}/oakpal-plugin/opear-plans/plan.json\", required = true)\n    File planFile;", "modifier": "@Parameter(defaultValue = \"${project.build.directory}/oakpal-plugin/opear-plans/plan.json\", required = true)", "type": "File", "declarator": "planFile", "var_name": "planFile"}, {"original_string": "@Parameter\n    List<File> additionalPlans = new ArrayList<>();", "modifier": "@Parameter", "type": "List<File>", "declarator": "additionalPlans = new ArrayList<>()", "var_name": "additionalPlans"}, {"original_string": "@Parameter(defaultValue = \"${project.build.directory}\", required = true)\n    File outputDirectory;", "modifier": "@Parameter(defaultValue = \"${project.build.directory}\", required = true)", "type": "File", "declarator": "outputDirectory", "var_name": "outputDirectory"}], "methods": [{"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "OpearPackageMojo.execute()", "testcase": false, "constructor": false}, {"identifier": "attachArtifact", "parameters": "(final @NotNull File finalFile)", "modifiers": "", "return": "Artifact", "signature": "Artifact attachArtifact(final @NotNull File finalFile)", "full_signature": " Artifact attachArtifact(final @NotNull File finalFile)", "class_method_signature": "OpearPackageMojo.attachArtifact(final @NotNull File finalFile)", "testcase": false, "constructor": false}, {"identifier": "getOwnVersion", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getOwnVersion()", "full_signature": " String getOwnVersion()", "class_method_signature": "OpearPackageMojo.getOwnVersion()", "testcase": false, "constructor": false}, {"identifier": "getBundleSymbolicName", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getBundleSymbolicName()", "full_signature": " String getBundleSymbolicName()", "class_method_signature": "OpearPackageMojo.getBundleSymbolicName()", "testcase": false, "constructor": false}, {"identifier": "getOakpalCoreVersion", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getOakpalCoreVersion()", "full_signature": " String getOakpalCoreVersion()", "class_method_signature": "OpearPackageMojo.getOakpalCoreVersion()", "testcase": false, "constructor": false}, {"identifier": "getEmbeddedLibraries", "parameters": "()", "modifiers": "", "return": "List<File>", "signature": "List<File> getEmbeddedLibraries()", "full_signature": " List<File> getEmbeddedLibraries()", "class_method_signature": "OpearPackageMojo.getEmbeddedLibraries()", "testcase": false, "constructor": false}, {"identifier": "assembleOpear", "parameters": "()", "modifiers": "", "return": "File", "signature": "File assembleOpear()", "full_signature": " File assembleOpear()", "class_method_signature": "OpearPackageMojo.assembleOpear()", "testcase": false, "constructor": false}, {"identifier": "mapDestFileNames", "parameters": "(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "modifiers": "static", "return": "Map<String, T>", "signature": "Map<String, T> mapDestFileNames(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "full_signature": "static Map<String, T> mapDestFileNames(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "class_method_signature": "OpearPackageMojo.mapDestFileNames(final @NotNull Map<String, T> acc,\n                                               final @NotNull List<T> files,\n                                               final @NotNull Function<T, String> namer)", "testcase": false, "constructor": false}, {"identifier": "shrinkWrapPlans", "parameters": "(final @NotNull File toDir)", "modifiers": "", "return": "Result<List<String>>", "signature": "Result<List<String>> shrinkWrapPlans(final @NotNull File toDir)", "full_signature": " Result<List<String>> shrinkWrapPlans(final @NotNull File toDir)", "class_method_signature": "OpearPackageMojo.shrinkWrapPlans(final @NotNull File toDir)", "testcase": false, "constructor": false}, {"identifier": "rewritePlan", "parameters": "(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "modifiers": "static", "return": "OakpalPlan", "signature": "OakpalPlan rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "full_signature": "static OakpalPlan rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "class_method_signature": "OpearPackageMojo.rewritePlan(final @NotNull File toDir,\n                                  final @NotNull Map<URL, String> renamed,\n                                  final @NotNull OakpalPlan plan,\n                                  final @NotNull String filename)", "testcase": false, "constructor": false}, {"identifier": "copyPlans", "parameters": "(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "modifiers": "static", "return": "Result<Map<String, OakpalPlan>>", "signature": "Result<Map<String, OakpalPlan>> copyPlans(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "full_signature": "static Result<Map<String, OakpalPlan>> copyPlans(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "class_method_signature": "OpearPackageMojo.copyPlans(final @NotNull File toDir, final @NotNull List<OakpalPlan> plans)", "testcase": false, "constructor": false}, {"identifier": "copyUrlStreams", "parameters": "(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "modifiers": "static", "return": "Result<Map<URL, String>>", "signature": "Result<Map<URL, String>> copyUrlStreams(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "full_signature": "static Result<Map<URL, String>> copyUrlStreams(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "class_method_signature": "OpearPackageMojo.copyUrlStreams(final @NotNull File toDir,\n                                                   final @NotNull List<URL> urls)", "testcase": false, "constructor": false}], "file": "maven/src/main/java/net/adamcin/oakpal/maven/mojo/OpearPackageMojo.java"}, "focal_method": {"identifier": "assembleOpear", "parameters": "()", "modifiers": "", "return": "File", "body": "File assembleOpear() throws Exception {\n        final String prefix = \"lib/\";\n        if (this.outputDirectory == null) {\n            throw new IllegalStateException(\"outputDirectory should not be null\");\n        }\n        final File finalFile = new File(this.outputDirectory, this.finalName + \".\" + OPEAR);\n\n        final File planPrep = new File(this.outputDirectory, \"plans-tmp-\" + this.finalName);\n        FileUtils.deleteDirectory(planPrep);\n        planPrep.mkdirs();\n        final Result<List<String>> planNames = this.shrinkWrapPlans(planPrep);\n        planNames.throwCause(Exception.class);\n\n        final MavenArchiveConfiguration conf = new MavenArchiveConfiguration();\n        conf.addManifestEntry(Opear.MF_BUNDLE_SYMBOLICNAME, getBundleSymbolicName());\n        conf.addManifestEntry(Opear.MF_OAKPAL_VERSION, getOakpalCoreVersion());\n        conf.addManifestEntry(Opear.MF_OAKPAL_PLAN,\n                Util.escapeManifestHeaderValues(planNames.getOrDefault(Collections.emptyList())));\n\n        OpearArchiver opear = new OpearArchiver();\n        opear.addFileSet(DefaultFileSet.fileSet(planPrep));\n\n        List<File> embeddedFiles = new ArrayList<>();\n        if (\"jar\".equals(project.getPackaging()) && project.getArtifact().getFile().exists()) {\n            if (project.getArtifact().getFile().isDirectory()) {\n                throw new Exception(\"cannot embed project artifact while it is a directory.\");\n            }\n            embeddedFiles.add(project.getArtifact().getFile());\n        } else if (OPEAR.equals(project.getPackaging())\n                && new File(project.getBuild().getOutputDirectory()).isDirectory()) {\n            embeddedFiles.add(new File(project.getBuild().getOutputDirectory()));\n        }\n        embeddedFiles.addAll(getEmbeddedLibraries());\n        Map<String, File> destFiles = mapDestFileNames(new LinkedHashMap<>(), embeddedFiles, File::getName);\n        final String scanClassPath = Util.escapeManifestHeaderValue(destFiles.entrySet().stream()\n                .map(entry -> prefix + entry.getKey())\n                .toArray(String[]::new));\n        conf.addManifestEntry(Opear.MF_CLASS_PATH, scanClassPath);\n\n        destFiles.entrySet().stream().filter(testValue(File::isFile)).forEachOrdered(entry -> {\n            opear.addFile(entry.getValue(), prefix + entry.getKey());\n        });\n\n        destFiles.entrySet().stream().filter(testValue(File::isDirectory)).forEachOrdered(entry -> {\n            opear.addFileSet(new DefaultFileSet(entry.getValue()).prefixed(prefix + entry.getKey() + \"/\"));\n        });\n\n        MavenArchiver mavenArchiver = new MavenArchiver();\n        mavenArchiver.setArchiver(opear);\n        mavenArchiver.setOutputFile(finalFile);\n        mavenArchiver.createArchive(getSession(), project, conf);\n\n        return finalFile;\n    }", "signature": "File assembleOpear()", "full_signature": " File assembleOpear()", "class_method_signature": "OpearPackageMojo.assembleOpear()", "testcase": false, "constructor": false, "invocations": ["deleteDirectory", "mkdirs", "shrinkWrapPlans", "throwCause", "addManifestEntry", "getBundleSymbolicName", "addManifestEntry", "getOakpalCoreVersion", "addManifestEntry", "escapeManifestHeaderValues", "getOrDefault", "emptyList", "addFileSet", "fileSet", "equals", "getPackaging", "exists", "getFile", "getArtifact", "isDirectory", "getFile", "getArtifact", "add", "getFile", "getArtifact", "equals", "getPackaging", "isDirectory", "getOutputDirectory", "getBuild", "add", "getOutputDirectory", "getBuild", "addAll", "getEmbeddedLibraries", "mapDestFileNames", "escapeManifestHeaderValue", "toArray", "map", "stream", "entrySet", "getKey", "addManifestEntry", "forEachOrdered", "filter", "stream", "entrySet", "testValue", "addFile", "getValue", "getKey", "forEachOrdered", "filter", "stream", "entrySet", "testValue", "addFileSet", "prefixed", "getValue", "getKey", "setArchiver", "setOutputFile", "createArchive", "getSession"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}