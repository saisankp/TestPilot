{"test_class": {"identifier": "HeapChannelBufferTest", "superclass": "extends AbstractChannelBufferTest", "interfaces": "", "fields": [{"original_string": "private ChannelBuffer buffer;", "modifier": "private", "type": "ChannelBuffer", "declarator": "buffer", "var_name": "buffer"}], "file": "dubbo-remoting/dubbo-remoting-api/src/test/java/org/apache/dubbo/remoting/buffer/HeapChannelBufferTest.java"}, "test_case": {"identifier": "testEqualsAndHashcode", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testEqualsAndHashcode() {\n        HeapChannelBuffer b1 = new HeapChannelBuffer(\"hello-world\".getBytes());\n        HeapChannelBuffer b2 = new HeapChannelBuffer(\"hello-world\".getBytes());\n\n        MatcherAssert.assertThat(b1.equals(b2), is(true));\n        MatcherAssert.assertThat(b1.hashCode(), is(b2.hashCode()));\n\n        b1 = new HeapChannelBuffer(\"hello-world\".getBytes());\n        b2 = new HeapChannelBuffer(\"hello-worldd\".getBytes());\n\n        MatcherAssert.assertThat(b1.equals(b2), is(false));\n        MatcherAssert.assertThat(b1.hashCode(), not(b2.hashCode()));\n    }", "signature": "void testEqualsAndHashcode()", "full_signature": "@Test void testEqualsAndHashcode()", "class_method_signature": "HeapChannelBufferTest.testEqualsAndHashcode()", "testcase": true, "constructor": false, "invocations": ["getBytes", "getBytes", "assertThat", "equals", "is", "assertThat", "hashCode", "is", "hashCode", "getBytes", "getBytes", "assertThat", "equals", "is", "assertThat", "hashCode", "not", "hashCode"]}, "focal_class": {"identifier": "HeapChannelBuffer", "superclass": "extends AbstractChannelBuffer", "interfaces": "", "fields": [{"original_string": "protected final byte[] array;", "modifier": "protected final", "type": "byte[]", "declarator": "array", "var_name": "array"}], "methods": [{"identifier": "HeapChannelBuffer", "parameters": "(int length)", "modifiers": "public", "return": "", "signature": " HeapChannelBuffer(int length)", "full_signature": "public  HeapChannelBuffer(int length)", "class_method_signature": "HeapChannelBuffer.HeapChannelBuffer(int length)", "testcase": false, "constructor": true}, {"identifier": "HeapChannelBuffer", "parameters": "(byte[] array)", "modifiers": "public", "return": "", "signature": " HeapChannelBuffer(byte[] array)", "full_signature": "public  HeapChannelBuffer(byte[] array)", "class_method_signature": "HeapChannelBuffer.HeapChannelBuffer(byte[] array)", "testcase": false, "constructor": true}, {"identifier": "HeapChannelBuffer", "parameters": "(byte[] array, int readerIndex, int writerIndex)", "modifiers": "protected", "return": "", "signature": " HeapChannelBuffer(byte[] array, int readerIndex, int writerIndex)", "full_signature": "protected  HeapChannelBuffer(byte[] array, int readerIndex, int writerIndex)", "class_method_signature": "HeapChannelBuffer.HeapChannelBuffer(byte[] array, int readerIndex, int writerIndex)", "testcase": false, "constructor": true}, {"identifier": "isDirect", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDirect()", "full_signature": "@Override public boolean isDirect()", "class_method_signature": "HeapChannelBuffer.isDirect()", "testcase": false, "constructor": false}, {"identifier": "capacity", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int capacity()", "full_signature": "@Override public int capacity()", "class_method_signature": "HeapChannelBuffer.capacity()", "testcase": false, "constructor": false}, {"identifier": "hasArray", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasArray()", "full_signature": "@Override public boolean hasArray()", "class_method_signature": "HeapChannelBuffer.hasArray()", "testcase": false, "constructor": false}, {"identifier": "array", "parameters": "()", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] array()", "full_signature": "@Override public byte[] array()", "class_method_signature": "HeapChannelBuffer.array()", "testcase": false, "constructor": false}, {"identifier": "arrayOffset", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int arrayOffset()", "full_signature": "@Override public int arrayOffset()", "class_method_signature": "HeapChannelBuffer.arrayOffset()", "testcase": false, "constructor": false}, {"identifier": "getByte", "parameters": "(int index)", "modifiers": "@Override public", "return": "byte", "signature": "byte getByte(int index)", "full_signature": "@Override public byte getByte(int index)", "class_method_signature": "HeapChannelBuffer.getByte(int index)", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "(int index, ChannelBuffer dst, int dstIndex, int length)", "modifiers": "@Override public", "return": "void", "signature": "void getBytes(int index, ChannelBuffer dst, int dstIndex, int length)", "full_signature": "@Override public void getBytes(int index, ChannelBuffer dst, int dstIndex, int length)", "class_method_signature": "HeapChannelBuffer.getBytes(int index, ChannelBuffer dst, int dstIndex, int length)", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "(int index, byte[] dst, int dstIndex, int length)", "modifiers": "@Override public", "return": "void", "signature": "void getBytes(int index, byte[] dst, int dstIndex, int length)", "full_signature": "@Override public void getBytes(int index, byte[] dst, int dstIndex, int length)", "class_method_signature": "HeapChannelBuffer.getBytes(int index, byte[] dst, int dstIndex, int length)", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "(int index, ByteBuffer dst)", "modifiers": "@Override public", "return": "void", "signature": "void getBytes(int index, ByteBuffer dst)", "full_signature": "@Override public void getBytes(int index, ByteBuffer dst)", "class_method_signature": "HeapChannelBuffer.getBytes(int index, ByteBuffer dst)", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "(int index, OutputStream out, int length)", "modifiers": "@Override public", "return": "void", "signature": "void getBytes(int index, OutputStream out, int length)", "full_signature": "@Override public void getBytes(int index, OutputStream out, int length)", "class_method_signature": "HeapChannelBuffer.getBytes(int index, OutputStream out, int length)", "testcase": false, "constructor": false}, {"identifier": "getBytes", "parameters": "(int index, GatheringByteChannel out, int length)", "modifiers": "public", "return": "int", "signature": "int getBytes(int index, GatheringByteChannel out, int length)", "full_signature": "public int getBytes(int index, GatheringByteChannel out, int length)", "class_method_signature": "HeapChannelBuffer.getBytes(int index, GatheringByteChannel out, int length)", "testcase": false, "constructor": false}, {"identifier": "setByte", "parameters": "(int index, int value)", "modifiers": "@Override public", "return": "void", "signature": "void setByte(int index, int value)", "full_signature": "@Override public void setByte(int index, int value)", "class_method_signature": "HeapChannelBuffer.setByte(int index, int value)", "testcase": false, "constructor": false}, {"identifier": "setBytes", "parameters": "(int index, ChannelBuffer src, int srcIndex, int length)", "modifiers": "@Override public", "return": "void", "signature": "void setBytes(int index, ChannelBuffer src, int srcIndex, int length)", "full_signature": "@Override public void setBytes(int index, ChannelBuffer src, int srcIndex, int length)", "class_method_signature": "HeapChannelBuffer.setBytes(int index, ChannelBuffer src, int srcIndex, int length)", "testcase": false, "constructor": false}, {"identifier": "setBytes", "parameters": "(int index, byte[] src, int srcIndex, int length)", "modifiers": "@Override public", "return": "void", "signature": "void setBytes(int index, byte[] src, int srcIndex, int length)", "full_signature": "@Override public void setBytes(int index, byte[] src, int srcIndex, int length)", "class_method_signature": "HeapChannelBuffer.setBytes(int index, byte[] src, int srcIndex, int length)", "testcase": false, "constructor": false}, {"identifier": "setBytes", "parameters": "(int index, ByteBuffer src)", "modifiers": "@Override public", "return": "void", "signature": "void setBytes(int index, ByteBuffer src)", "full_signature": "@Override public void setBytes(int index, ByteBuffer src)", "class_method_signature": "HeapChannelBuffer.setBytes(int index, ByteBuffer src)", "testcase": false, "constructor": false}, {"identifier": "setBytes", "parameters": "(int index, InputStream in, int length)", "modifiers": "@Override public", "return": "int", "signature": "int setBytes(int index, InputStream in, int length)", "full_signature": "@Override public int setBytes(int index, InputStream in, int length)", "class_method_signature": "HeapChannelBuffer.setBytes(int index, InputStream in, int length)", "testcase": false, "constructor": false}, {"identifier": "setBytes", "parameters": "(int index, ScatteringByteChannel in, int length)", "modifiers": "public", "return": "int", "signature": "int setBytes(int index, ScatteringByteChannel in, int length)", "full_signature": "public int setBytes(int index, ScatteringByteChannel in, int length)", "class_method_signature": "HeapChannelBuffer.setBytes(int index, ScatteringByteChannel in, int length)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(int index, int length)", "modifiers": "@Override public", "return": "ChannelBuffer", "signature": "ChannelBuffer copy(int index, int length)", "full_signature": "@Override public ChannelBuffer copy(int index, int length)", "class_method_signature": "HeapChannelBuffer.copy(int index, int length)", "testcase": false, "constructor": false}, {"identifier": "factory", "parameters": "()", "modifiers": "@Override public", "return": "ChannelBufferFactory", "signature": "ChannelBufferFactory factory()", "full_signature": "@Override public ChannelBufferFactory factory()", "class_method_signature": "HeapChannelBuffer.factory()", "testcase": false, "constructor": false}, {"identifier": "toByteBuffer", "parameters": "(int index, int length)", "modifiers": "@Override public", "return": "ByteBuffer", "signature": "ByteBuffer toByteBuffer(int index, int length)", "full_signature": "@Override public ByteBuffer toByteBuffer(int index, int length)", "class_method_signature": "HeapChannelBuffer.toByteBuffer(int index, int length)", "testcase": false, "constructor": false}], "file": "dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/buffer/HeapChannelBuffer.java"}, "focal_method": {"identifier": "getBytes", "parameters": "(int index, ChannelBuffer dst, int dstIndex, int length)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void getBytes(int index, ChannelBuffer dst, int dstIndex, int length) {\n        if (dst instanceof HeapChannelBuffer) {\n            getBytes(index, ((HeapChannelBuffer) dst).array, dstIndex, length);\n        } else {\n            dst.setBytes(dstIndex, array, index, length);\n        }\n    }", "signature": "void getBytes(int index, ChannelBuffer dst, int dstIndex, int length)", "full_signature": "@Override public void getBytes(int index, ChannelBuffer dst, int dstIndex, int length)", "class_method_signature": "HeapChannelBuffer.getBytes(int index, ChannelBuffer dst, int dstIndex, int length)", "testcase": false, "constructor": false, "invocations": ["getBytes", "setBytes"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}