{"test_class": {"identifier": "DefaultImmutableTokenBucketTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int BUCKET_SIZE = 5;", "modifier": "private static final", "type": "int", "declarator": "BUCKET_SIZE = 5", "var_name": "BUCKET_SIZE"}, {"original_string": "private static final int REFILL_INTERVAL_MS = 100;", "modifier": "private static final", "type": "int", "declarator": "REFILL_INTERVAL_MS = 100", "var_name": "REFILL_INTERVAL_MS"}, {"original_string": "private static final int REFILL_BATCH = 2;", "modifier": "private static final", "type": "int", "declarator": "REFILL_BATCH = 2", "var_name": "REFILL_BATCH"}, {"original_string": "private final TestClock testClock = Clocks.test();", "modifier": "private final", "type": "TestClock", "declarator": "testClock = Clocks.test()", "var_name": "testClock"}, {"original_string": "private final ImmutableTokenBucket tokenBucket = tokenBucket(\n            BUCKET_SIZE,\n            refillAtFixedInterval(REFILL_BATCH, REFILL_INTERVAL_MS, TimeUnit.MILLISECONDS, testClock)\n    );", "modifier": "private final", "type": "ImmutableTokenBucket", "declarator": "tokenBucket = tokenBucket(\n            BUCKET_SIZE,\n            refillAtFixedInterval(REFILL_BATCH, REFILL_INTERVAL_MS, TimeUnit.MILLISECONDS, testClock)\n    )", "var_name": "tokenBucket"}], "file": "titus-common/src/test/java/com/netflix/titus/common/util/limiter/tokenbucket/internal/DefaultImmutableTokenBucketTest.java"}, "test_case": {"identifier": "testTryTake", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTryTake() throws Exception {\n        ImmutableTokenBucket next = tokenBucket;\n        for (int i = 0; i < BUCKET_SIZE; i++) {\n            next = doTryTake(next);\n        }\n        assertThat(next.tryTake()).isEmpty();\n\n        // Advance time to refill the bucket\n        testClock.advanceTime(REFILL_INTERVAL_MS, TimeUnit.MILLISECONDS);\n        Pair<Long, ImmutableTokenBucket> pair = doTryTake(next, REFILL_BATCH, REFILL_BATCH);\n        assertThat(pair.getLeft()).isEqualTo(REFILL_BATCH);\n        assertThat(pair.getRight().tryTake()).isEmpty();\n    }", "signature": "void testTryTake()", "full_signature": "@Test public void testTryTake()", "class_method_signature": "DefaultImmutableTokenBucketTest.testTryTake()", "testcase": true, "constructor": false, "invocations": ["doTryTake", "isEmpty", "assertThat", "tryTake", "advanceTime", "doTryTake", "isEqualTo", "assertThat", "getLeft", "isEmpty", "assertThat", "tryTake", "getRight"]}, "focal_class": {"identifier": "DefaultImmutableTokenBucket", "superclass": "", "interfaces": "implements ImmutableTokenBucket", "fields": [{"original_string": "private final ImmutableRefillStrategy refillStrategy;", "modifier": "private final", "type": "ImmutableRefillStrategy", "declarator": "refillStrategy", "var_name": "refillStrategy"}, {"original_string": "private final long bucketSize;", "modifier": "private final", "type": "long", "declarator": "bucketSize", "var_name": "bucketSize"}, {"original_string": "private final long bucketLevel;", "modifier": "private final", "type": "long", "declarator": "bucketLevel", "var_name": "bucketLevel"}], "methods": [{"identifier": "DefaultImmutableTokenBucket", "parameters": "(long bucketSize, long bucketLevel, ImmutableRefillStrategy refillStrategy)", "modifiers": "public", "return": "", "signature": " DefaultImmutableTokenBucket(long bucketSize, long bucketLevel, ImmutableRefillStrategy refillStrategy)", "full_signature": "public  DefaultImmutableTokenBucket(long bucketSize, long bucketLevel, ImmutableRefillStrategy refillStrategy)", "class_method_signature": "DefaultImmutableTokenBucket.DefaultImmutableTokenBucket(long bucketSize, long bucketLevel, ImmutableRefillStrategy refillStrategy)", "testcase": false, "constructor": true}, {"identifier": "tryTake", "parameters": "(long min, long max)", "modifiers": "@Override public", "return": "Optional<Pair<Long, ImmutableTokenBucket>>", "signature": "Optional<Pair<Long, ImmutableTokenBucket>> tryTake(long min, long max)", "full_signature": "@Override public Optional<Pair<Long, ImmutableTokenBucket>> tryTake(long min, long max)", "class_method_signature": "DefaultImmutableTokenBucket.tryTake(long min, long max)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/limiter/tokenbucket/internal/DefaultImmutableTokenBucket.java"}, "focal_method": {"identifier": "tryTake", "parameters": "(long min, long max)", "modifiers": "@Override public", "return": "Optional<Pair<Long, ImmutableTokenBucket>>", "body": "@Override\n    public Optional<Pair<Long, ImmutableTokenBucket>> tryTake(long min, long max) {\n        if (bucketLevel >= max) {\n            return Optional.of(Pair.of(max, new DefaultImmutableTokenBucket(bucketSize, bucketLevel - max, refillStrategy)));\n        }\n\n        Pair<ImmutableRefillStrategy, Long> consumed = refillStrategy.consume();\n        long refill = consumed.getRight();\n        ImmutableRefillStrategy newRefillStrategyInstance = consumed.getLeft();\n\n        if (refill == 0) {\n            if (bucketLevel >= min) {\n                return Optional.of(Pair.of(bucketLevel, new DefaultImmutableTokenBucket(bucketSize, 0, refillStrategy)));\n            }\n        } else {\n            long newBucketLevel = Math.min(bucketSize, bucketLevel + refill);\n            if (newBucketLevel >= min) {\n                long tokensToTake = Math.min(newBucketLevel, max);\n                return Optional.of(Pair.of(tokensToTake, new DefaultImmutableTokenBucket(bucketSize, newBucketLevel - tokensToTake, newRefillStrategyInstance)));\n            }\n        }\n        return Optional.empty();\n    }", "signature": "Optional<Pair<Long, ImmutableTokenBucket>> tryTake(long min, long max)", "full_signature": "@Override public Optional<Pair<Long, ImmutableTokenBucket>> tryTake(long min, long max)", "class_method_signature": "DefaultImmutableTokenBucket.tryTake(long min, long max)", "testcase": false, "constructor": false, "invocations": ["of", "of", "consume", "getRight", "getLeft", "of", "of", "min", "min", "of", "of", "empty"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}