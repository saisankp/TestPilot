{"test_class": {"identifier": "FragmentUtilsTest", "superclass": "extends CDKTestCase", "interfaces": "", "fields": [{"original_string": "static SmilesParser smilesParser;", "modifier": "static", "type": "SmilesParser", "declarator": "smilesParser", "var_name": "smilesParser"}], "file": "tool/fragment/src/test/java/org/openscience/cdk/fragment/FragmentUtilsTest.java"}, "test_case": {"identifier": "testTraversal_Chain", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTraversal_Chain() {\n\n        IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();\n\n        IAtom[] atoms = new IAtom[]{builder.newInstance(IAtom.class, \"C\"), builder.newInstance(IAtom.class, \"C\"),\n                builder.newInstance(IAtom.class, \"C\"), builder.newInstance(IAtom.class, \"C\"),\n                builder.newInstance(IAtom.class, \"C\"), builder.newInstance(IAtom.class, \"C\")};\n        IBond[] bonds = new IBond[]{builder.newInstance(IBond.class, atoms[0], atoms[1]),\n                builder.newInstance(IBond.class, atoms[1], atoms[2]),\n                builder.newInstance(IBond.class, atoms[2], atoms[3]),\n                builder.newInstance(IBond.class, atoms[3], atoms[4]),\n                builder.newInstance(IBond.class, atoms[4], atoms[5])};\n\n        IAtomContainer m = builder.newInstance(IAtomContainer.class, 0, 0, 0, 0);\n        m.setAtoms(atoms);\n        m.setBonds(bonds);\n\n        List<IBond> accumulator = new ArrayList<IBond>();\n\n        // traverse from one end\n        FragmentUtils.traverse(m, atoms[0], accumulator);\n\n        assertThat(accumulator.size(), is(5));\n        assertThat(accumulator.get(0), is(bonds[0]));\n        assertThat(accumulator.get(1), is(bonds[1]));\n        assertThat(accumulator.get(2), is(bonds[2]));\n        assertThat(accumulator.get(3), is(bonds[3]));\n        assertThat(accumulator.get(4), is(bonds[4]));\n\n        // traverse from the middle\n        accumulator.clear();\n        FragmentUtils.traverse(m, atoms[3], accumulator);\n\n        assertThat(accumulator.size(), is(5));\n\n        assertThat(accumulator.get(0), is(bonds[2]));\n        assertThat(accumulator.get(1), is(bonds[1]));\n        assertThat(accumulator.get(2), is(bonds[0]));\n        assertThat(accumulator.get(3), is(bonds[3]));\n        assertThat(accumulator.get(4), is(bonds[4]));\n    }", "signature": "void testTraversal_Chain()", "full_signature": "@Test public void testTraversal_Chain()", "class_method_signature": "FragmentUtilsTest.testTraversal_Chain()", "testcase": true, "constructor": false, "invocations": ["getInstance", "newInstance", "newInstance", "newInstance", "newInstance", "newInstance", "newInstance", "newInstance", "newInstance", "newInstance", "newInstance", "newInstance", "newInstance", "setAtoms", "setBonds", "traverse", "assertThat", "size", "is", "assertThat", "get", "is", "assertThat", "get", "is", "assertThat", "get", "is", "assertThat", "get", "is", "assertThat", "get", "is", "clear", "traverse", "assertThat", "size", "is", "assertThat", "get", "is", "assertThat", "get", "is", "assertThat", "get", "is", "assertThat", "get", "is", "assertThat", "get", "is"]}, "focal_class": {"identifier": "FragmentUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "splitMolecule", "parameters": "(IAtomContainer atomContainer, IBond bond)", "modifiers": "protected static", "return": "List<IAtomContainer>", "signature": "List<IAtomContainer> splitMolecule(IAtomContainer atomContainer, IBond bond)", "full_signature": "protected static List<IAtomContainer> splitMolecule(IAtomContainer atomContainer, IBond bond)", "class_method_signature": "FragmentUtils.splitMolecule(IAtomContainer atomContainer, IBond bond)", "testcase": false, "constructor": false}, {"identifier": "makeAtomContainer", "parameters": "(IAtom atom, List<IBond> parts, IAtom excludedAtom)", "modifiers": "protected static", "return": "IAtomContainer", "signature": "IAtomContainer makeAtomContainer(IAtom atom, List<IBond> parts, IAtom excludedAtom)", "full_signature": "protected static IAtomContainer makeAtomContainer(IAtom atom, List<IBond> parts, IAtom excludedAtom)", "class_method_signature": "FragmentUtils.makeAtomContainer(IAtom atom, List<IBond> parts, IAtom excludedAtom)", "testcase": false, "constructor": false}, {"identifier": "traverse", "parameters": "(IAtomContainer atomContainer, IAtom atom, List<IBond> bondList)", "modifiers": "protected static", "return": "List<IBond>", "signature": "List<IBond> traverse(IAtomContainer atomContainer, IAtom atom, List<IBond> bondList)", "full_signature": "protected static List<IBond> traverse(IAtomContainer atomContainer, IAtom atom, List<IBond> bondList)", "class_method_signature": "FragmentUtils.traverse(IAtomContainer atomContainer, IAtom atom, List<IBond> bondList)", "testcase": false, "constructor": false}], "file": "tool/fragment/src/main/java/org/openscience/cdk/fragment/FragmentUtils.java"}, "focal_method": {"identifier": "traverse", "parameters": "(IAtomContainer atomContainer, IAtom atom, List<IBond> bondList)", "modifiers": "protected static", "return": "List<IBond>", "body": "protected static List<IBond> traverse(IAtomContainer atomContainer, IAtom atom, List<IBond> bondList) {\n        List<IBond> connectedBonds = atomContainer.getConnectedBondsList(atom);\n        for (IBond aBond : connectedBonds) {\n            if (bondList.contains(aBond)) continue;\n            bondList.add(aBond);\n            IAtom nextAtom = aBond.getOther(atom);\n            if (atomContainer.getConnectedBondsCount(nextAtom) == 1) continue;\n            traverse(atomContainer, nextAtom, bondList);\n        }\n        return bondList;\n    }", "signature": "List<IBond> traverse(IAtomContainer atomContainer, IAtom atom, List<IBond> bondList)", "full_signature": "protected static List<IBond> traverse(IAtomContainer atomContainer, IAtom atom, List<IBond> bondList)", "class_method_signature": "FragmentUtils.traverse(IAtomContainer atomContainer, IAtom atom, List<IBond> bondList)", "testcase": false, "constructor": false, "invocations": ["getConnectedBondsList", "contains", "add", "getOther", "getConnectedBondsCount", "traverse"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}