{"test_class": {"identifier": "RotateParametersTest", "superclass": "", "interfaces": "", "fields": [], "file": "sejda-model/src/test/java/org/sejda/model/parameter/RotateParametersTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n        RotateParameters eq1 = new RotateParameters(Rotation.DEGREES_0, PredefinedSetOfPages.ALL_PAGES);\n        RotateParameters eq2 = new RotateParameters(Rotation.DEGREES_0, PredefinedSetOfPages.ALL_PAGES);\n        RotateParameters eq3 = new RotateParameters(Rotation.DEGREES_0, PredefinedSetOfPages.ALL_PAGES);\n        RotateParameters diff = new RotateParameters(Rotation.DEGREES_0, PredefinedSetOfPages.ALL_PAGES);\n        diff.setOutputPrefix(\"prefix\");\n        TestUtils.testEqualsAndHashCodes(eq1, eq2, eq3, diff);\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "RotateParametersTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["setOutputPrefix", "testEqualsAndHashCodes"]}, "focal_class": {"identifier": "RotateParameters", "superclass": "extends MultiplePdfSourceMultipleOutputParameters", "interfaces": "", "fields": [{"original_string": "@Valid\n    @NotNull\n    // same rotation all pages, all sources\n    private Rotation rotation = null;", "modifier": "@Valid\n    @NotNull\n    // same rotation all pages, all sources\n    private", "type": "Rotation", "declarator": "rotation = null", "var_name": "rotation"}, {"original_string": "@NotNull\n    // same rotation per page set, all sources\n    private PredefinedSetOfPages predefinedSetOfPages;", "modifier": "@NotNull\n    // same rotation per page set, all sources\n    private", "type": "PredefinedSetOfPages", "declarator": "predefinedSetOfPages", "var_name": "predefinedSetOfPages"}, {"original_string": "@Valid\n    // different rotations per page, all sources\n    private final Map<PageRange, Rotation> pageSelection = new HashMap<>();", "modifier": "@Valid\n    // different rotations per page, all sources\n    private final", "type": "Map<PageRange, Rotation>", "declarator": "pageSelection = new HashMap<>()", "var_name": "pageSelection"}, {"original_string": "private Map<Integer, Map<PageRange, Rotation>> pageSelectionPerSource = new HashMap<>();", "modifier": "private", "type": "Map<Integer, Map<PageRange, Rotation>>", "declarator": "pageSelectionPerSource = new HashMap<>()", "var_name": "pageSelectionPerSource"}], "methods": [{"identifier": "RotateParameters", "parameters": "(Rotation rotation, PredefinedSetOfPages predefinedSetOfPages)", "modifiers": "public", "return": "", "signature": " RotateParameters(Rotation rotation, PredefinedSetOfPages predefinedSetOfPages)", "full_signature": "public  RotateParameters(Rotation rotation, PredefinedSetOfPages predefinedSetOfPages)", "class_method_signature": "RotateParameters.RotateParameters(Rotation rotation, PredefinedSetOfPages predefinedSetOfPages)", "testcase": false, "constructor": true}, {"identifier": "RotateParameters", "parameters": "(Rotation rotation)", "modifiers": "public", "return": "", "signature": " RotateParameters(Rotation rotation)", "full_signature": "public  RotateParameters(Rotation rotation)", "class_method_signature": "RotateParameters.RotateParameters(Rotation rotation)", "testcase": false, "constructor": true}, {"identifier": "RotateParameters", "parameters": "()", "modifiers": "public", "return": "", "signature": " RotateParameters()", "full_signature": "public  RotateParameters()", "class_method_signature": "RotateParameters.RotateParameters()", "testcase": false, "constructor": true}, {"identifier": "getRotation", "parameters": "()", "modifiers": "@Deprecated public", "return": "Rotation", "signature": "Rotation getRotation()", "full_signature": "@Deprecated public Rotation getRotation()", "class_method_signature": "RotateParameters.getRotation()", "testcase": false, "constructor": false}, {"identifier": "getRotation", "parameters": "(int page)", "modifiers": "public", "return": "Rotation", "signature": "Rotation getRotation(int page)", "full_signature": "public Rotation getRotation(int page)", "class_method_signature": "RotateParameters.getRotation(int page)", "testcase": false, "constructor": false}, {"identifier": "getRotation", "parameters": "(int sourceIndex, int page)", "modifiers": "public", "return": "Rotation", "signature": "Rotation getRotation(int sourceIndex, int page)", "full_signature": "public Rotation getRotation(int sourceIndex, int page)", "class_method_signature": "RotateParameters.getRotation(int sourceIndex, int page)", "testcase": false, "constructor": false}, {"identifier": "addPageRange", "parameters": "(PageRange range)", "modifiers": "public", "return": "void", "signature": "void addPageRange(PageRange range)", "full_signature": "public void addPageRange(PageRange range)", "class_method_signature": "RotateParameters.addPageRange(PageRange range)", "testcase": false, "constructor": false}, {"identifier": "addPageRange", "parameters": "(PageRange range, Rotation rotation)", "modifiers": "public", "return": "void", "signature": "void addPageRange(PageRange range, Rotation rotation)", "full_signature": "public void addPageRange(PageRange range, Rotation rotation)", "class_method_signature": "RotateParameters.addPageRange(PageRange range, Rotation rotation)", "testcase": false, "constructor": false}, {"identifier": "addAllPageRanges", "parameters": "(Collection<PageRange> ranges)", "modifiers": "public", "return": "void", "signature": "void addAllPageRanges(Collection<PageRange> ranges)", "full_signature": "public void addAllPageRanges(Collection<PageRange> ranges)", "class_method_signature": "RotateParameters.addAllPageRanges(Collection<PageRange> ranges)", "testcase": false, "constructor": false}, {"identifier": "addPageRangePerSource", "parameters": "(int sourceIndex, PageRange range, Rotation rotation)", "modifiers": "public", "return": "void", "signature": "void addPageRangePerSource(int sourceIndex, PageRange range, Rotation rotation)", "full_signature": "public void addPageRangePerSource(int sourceIndex, PageRange range, Rotation rotation)", "class_method_signature": "RotateParameters.addPageRangePerSource(int sourceIndex, PageRange range, Rotation rotation)", "testcase": false, "constructor": false}, {"identifier": "getPredefinedSetOfPages", "parameters": "()", "modifiers": "public", "return": "PredefinedSetOfPages", "signature": "PredefinedSetOfPages getPredefinedSetOfPages()", "full_signature": "public PredefinedSetOfPages getPredefinedSetOfPages()", "class_method_signature": "RotateParameters.getPredefinedSetOfPages()", "testcase": false, "constructor": false}, {"identifier": "getPageSelection", "parameters": "()", "modifiers": "public", "return": "Map<PageRange, Rotation>", "signature": "Map<PageRange, Rotation> getPageSelection()", "full_signature": "public Map<PageRange, Rotation> getPageSelection()", "class_method_signature": "RotateParameters.getPageSelection()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "RotateParameters.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "RotateParameters.equals(Object other)", "testcase": false, "constructor": false}], "file": "sejda-model/src/main/java/org/sejda/model/parameter/RotateParameters.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object other)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (!(other instanceof RotateParameters)) {\n            return false;\n        }\n        RotateParameters parameter = (RotateParameters) other;\n        return new EqualsBuilder().appendSuper(super.equals(other))\n                .append(predefinedSetOfPages, parameter.predefinedSetOfPages)\n                .append(pageSelection, parameter.pageSelection)\n                .append(rotation, parameter.rotation)\n                .append(pageSelectionPerSource, parameter.pageSelectionPerSource)\n                .isEquals();\n    }", "signature": "boolean equals(Object other)", "full_signature": "@Override public boolean equals(Object other)", "class_method_signature": "RotateParameters.equals(Object other)", "testcase": false, "constructor": false, "invocations": ["isEquals", "append", "append", "append", "append", "appendSuper", "equals"]}, "repository": {"repo_id": 13146848, "url": "https://github.com/torakiki/sejda", "language": "Java", "is_fork": false, "fork_count": 47, "stargazer_count": 316, "size": 59670, "license": "licensed"}}