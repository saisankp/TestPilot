{"test_class": {"identifier": "RiskRatioTest", "superclass": "", "interfaces": "", "fields": [], "file": "legacy/src/test/java/macrobase/analysis/summary/itemset/RiskRatioTest.java"}, "test_case": {"identifier": "testRatio", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRatio() {\n        assertEquals(1.0, RiskRatio.compute(10, 10, 100, 100).get(), 0.01);\n        assertEquals(6., RiskRatio.compute(10, 10, 1000, 100).get(), 0.01);\n        assertEquals(900.082, RiskRatio.compute(10, 99, 1000, 100).get(), 0.01);\n    }", "signature": "void testRatio()", "full_signature": "@Test public void testRatio()", "class_method_signature": "RiskRatioTest.testRatio()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "get", "compute", "assertEquals", "get", "compute", "assertEquals", "get", "compute"]}, "focal_class": {"identifier": "RiskRatio", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(RiskRatio.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(RiskRatio.class)", "var_name": "log"}], "methods": [{"identifier": "computeDouble", "parameters": "(double exposedInlierCount,\n                                                 double exposedOutlierCount,\n                                                 double totalInliers,\n                                                 double totalOutliers)", "modifiers": "private static", "return": "RiskRatioResult", "signature": "RiskRatioResult computeDouble(double exposedInlierCount,\n                                                 double exposedOutlierCount,\n                                                 double totalInliers,\n                                                 double totalOutliers)", "full_signature": "private static RiskRatioResult computeDouble(double exposedInlierCount,\n                                                 double exposedOutlierCount,\n                                                 double totalInliers,\n                                                 double totalOutliers)", "class_method_signature": "RiskRatio.computeDouble(double exposedInlierCount,\n                                                 double exposedOutlierCount,\n                                                 double totalInliers,\n                                                 double totalOutliers)", "testcase": false, "constructor": false}, {"identifier": "compute", "parameters": "(Number exposedInlierCount,\n                                 Number exposedOutlierCount,\n                                 Number totalInliers,\n                                 Number totalOutliers)", "modifiers": "public static", "return": "RiskRatioResult", "signature": "RiskRatioResult compute(Number exposedInlierCount,\n                                 Number exposedOutlierCount,\n                                 Number totalInliers,\n                                 Number totalOutliers)", "full_signature": "public static RiskRatioResult compute(Number exposedInlierCount,\n                                 Number exposedOutlierCount,\n                                 Number totalInliers,\n                                 Number totalOutliers)", "class_method_signature": "RiskRatio.compute(Number exposedInlierCount,\n                                 Number exposedOutlierCount,\n                                 Number totalInliers,\n                                 Number totalOutliers)", "testcase": false, "constructor": false}], "file": "legacy/src/main/java/macrobase/analysis/summary/itemset/RiskRatio.java"}, "focal_method": {"identifier": "compute", "parameters": "(Number exposedInlierCount,\n                                 Number exposedOutlierCount,\n                                 Number totalInliers,\n                                 Number totalOutliers)", "modifiers": "public static", "return": "RiskRatioResult", "body": "public static RiskRatioResult compute(Number exposedInlierCount,\n                                 Number exposedOutlierCount,\n                                 Number totalInliers,\n                                 Number totalOutliers) {\n        if(exposedInlierCount == null) {\n            exposedInlierCount = 0.;\n        }\n\n        if(exposedOutlierCount == null) {\n            exposedOutlierCount = 0.;\n        }\n\n        if(totalInliers == null) {\n            totalInliers = 0.;\n        }\n\n        if(totalOutliers == null) {\n            totalOutliers = 0.;\n        }\n\n        return computeDouble(exposedInlierCount.doubleValue(),\n                             exposedOutlierCount.doubleValue(),\n                             totalInliers.doubleValue(),\n                             totalOutliers.doubleValue());\n    }", "signature": "RiskRatioResult compute(Number exposedInlierCount,\n                                 Number exposedOutlierCount,\n                                 Number totalInliers,\n                                 Number totalOutliers)", "full_signature": "public static RiskRatioResult compute(Number exposedInlierCount,\n                                 Number exposedOutlierCount,\n                                 Number totalInliers,\n                                 Number totalOutliers)", "class_method_signature": "RiskRatio.compute(Number exposedInlierCount,\n                                 Number exposedOutlierCount,\n                                 Number totalInliers,\n                                 Number totalOutliers)", "testcase": false, "constructor": false, "invocations": ["computeDouble", "doubleValue", "doubleValue", "doubleValue", "doubleValue"]}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}