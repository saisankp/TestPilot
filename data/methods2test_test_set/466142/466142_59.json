{"test_class": {"identifier": "TestCloseThreadMonitor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ConnectionHandle mockConnection;", "modifier": "private", "type": "ConnectionHandle", "declarator": "mockConnection", "var_name": "mockConnection"}, {"original_string": "private Logger mockLogger;", "modifier": "private", "type": "Logger", "declarator": "mockLogger", "var_name": "mockLogger"}, {"original_string": "private Thread mockThread;", "modifier": "private", "type": "Thread", "declarator": "mockThread", "var_name": "mockThread"}, {"original_string": "private CloseThreadMonitor testClass;", "modifier": "private", "type": "CloseThreadMonitor", "declarator": "testClass", "var_name": "testClass"}], "file": "bonecp/src/test/java/com/jolbox/bonecp/TestCloseThreadMonitor.java"}, "test_case": {"identifier": "testConnectionNotClosed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testConnectionNotClosed() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException{\n\t\tmockLogger.error((String)anyObject());\n\t\texpectLastCall().once();\n\t\texpect(mockConnection.isClosed()).andReturn(false).once();\n\t\texpect(mockConnection.getThreadUsingConnection()).andReturn(mockThread).once();\n\t\treplay(mockConnection, mockLogger);\n\t\ttestClass.run();\n\t\tverify(mockConnection, mockLogger);\n\t}", "signature": "void testConnectionNotClosed()", "full_signature": "@Test public void testConnectionNotClosed()", "class_method_signature": "TestCloseThreadMonitor.testConnectionNotClosed()", "testcase": true, "constructor": false, "invocations": ["error", "anyObject", "once", "expectLastCall", "once", "andReturn", "expect", "isClosed", "once", "andReturn", "expect", "getThreadUsingConnection", "replay", "run", "verify"]}, "focal_class": {"identifier": "CloseThreadMonitor", "superclass": "", "interfaces": "implements Runnable", "fields": [{"original_string": "private ConnectionHandle connectionHandle;", "modifier": "private", "type": "ConnectionHandle", "declarator": "connectionHandle", "var_name": "connectionHandle"}, {"original_string": "private String stackTrace;", "modifier": "private", "type": "String", "declarator": "stackTrace", "var_name": "stackTrace"}, {"original_string": "private Thread threadToMonitor;", "modifier": "private", "type": "Thread", "declarator": "threadToMonitor", "var_name": "threadToMonitor"}, {"original_string": "private long closeConnectionWatchTimeout;", "modifier": "private", "type": "long", "declarator": "closeConnectionWatchTimeout", "var_name": "closeConnectionWatchTimeout"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(CloseThreadMonitor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CloseThreadMonitor.class)", "var_name": "logger"}], "methods": [{"identifier": "CloseThreadMonitor", "parameters": "(Thread threadToMonitor, ConnectionHandle connectionHandle, String stackTrace, long closeConnectionWatchTimeout)", "modifiers": "public", "return": "", "signature": " CloseThreadMonitor(Thread threadToMonitor, ConnectionHandle connectionHandle, String stackTrace, long closeConnectionWatchTimeout)", "full_signature": "public  CloseThreadMonitor(Thread threadToMonitor, ConnectionHandle connectionHandle, String stackTrace, long closeConnectionWatchTimeout)", "class_method_signature": "CloseThreadMonitor.CloseThreadMonitor(Thread threadToMonitor, ConnectionHandle connectionHandle, String stackTrace, long closeConnectionWatchTimeout)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void run()", "full_signature": "public void run()", "class_method_signature": "CloseThreadMonitor.run()", "testcase": false, "constructor": false}], "file": "bonecp/src/main/java/com/jolbox/bonecp/CloseThreadMonitor.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void run() {\n\t\ttry {\n\t\t\tthis.connectionHandle.setThreadWatch(Thread.currentThread());\n\t\t\t// wait for the thread we're monitoring to die off.\n\t\t\tthis.threadToMonitor.join(this.closeConnectionWatchTimeout);\n\t\t\tif (!this.connectionHandle.isClosed() \n\t\t\t\t\t&& this.threadToMonitor.equals(this.connectionHandle.getThreadUsingConnection())\n\t\t\t\t){\n\t\t\t\tlogger.error(this.stackTrace);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// just kill off this thread\n\t\t\tif (this.connectionHandle != null){ // safety\n\t\t\t\tthis.connectionHandle.setThreadWatch(null);\n\t\t\t}\n\t\t} \n\t}", "signature": "void run()", "full_signature": "public void run()", "class_method_signature": "CloseThreadMonitor.run()", "testcase": false, "constructor": false, "invocations": ["setThreadWatch", "currentThread", "join", "isClosed", "equals", "getThreadUsingConnection", "error", "setThreadWatch"]}, "repository": {"repo_id": 466142, "url": "https://github.com/wwadge/bonecp", "language": "Java", "is_fork": false, "fork_count": 161, "stargazer_count": 544, "size": 3833, "license": "licensed"}}