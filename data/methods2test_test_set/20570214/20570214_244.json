{"test_class": {"identifier": "EcdsaSignJceTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/subtle/EcdsaSignJceTest.java"}, "test_case": {"identifier": "testBitFlipAgainstSignatureInstance", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBitFlipAgainstSignatureInstance() throws Exception {\n    ECParameterSpec ecParams = EllipticCurves.getNistP256Params();\n    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"EC\");\n    keyGen.initialize(ecParams);\n    KeyPair keyPair = keyGen.generateKeyPair();\n    ECPublicKey pub = (ECPublicKey) keyPair.getPublic();\n    ECPrivateKey priv = (ECPrivateKey) keyPair.getPrivate();\n\n    // Sign with EcdsaSign.\n    String message = \"Hello\";\n    EcdsaSignJce signer = new EcdsaSignJce(priv, HashType.SHA256, EcdsaEncoding.DER);\n    byte[] signature = signer.sign(message.getBytes(\"UTF-8\"));\n\n    for (int i = 0; i < signature.length; i++) {\n      for (int j = 0; j < 8; j++) {\n        signature[i] = (byte) (signature[i] ^ (1 << j));\n        // Verify with JCE's Signature.\n        Signature verifier = Signature.getInstance(\"SHA256WithECDSA\");\n        verifier.initVerify(pub);\n        verifier.update(message.getBytes(\"UTF-8\"));\n        boolean verified = true;\n        try {\n          verified = verifier.verify(signature);\n        } catch (GeneralSecurityException expected) {\n          verified = false;\n        }\n        assertFalse(verified);\n        signature[i] = (byte) (signature[i] ^ (1 << j));\n      }\n    }\n  }", "signature": "void testBitFlipAgainstSignatureInstance()", "full_signature": "@Test public void testBitFlipAgainstSignatureInstance()", "class_method_signature": "EcdsaSignJceTest.testBitFlipAgainstSignatureInstance()", "testcase": true, "constructor": false, "invocations": ["getNistP256Params", "getInstance", "initialize", "generateKeyPair", "getPublic", "getPrivate", "sign", "getBytes", "getInstance", "initVerify", "update", "getBytes", "verify", "assertFalse"]}, "focal_class": {"identifier": "EcdsaSignJce", "superclass": "", "interfaces": "implements PublicKeySign", "fields": [{"original_string": "private final ECPrivateKey privateKey;", "modifier": "private final", "type": "ECPrivateKey", "declarator": "privateKey", "var_name": "privateKey"}, {"original_string": "private final String signatureAlgorithm;", "modifier": "private final", "type": "String", "declarator": "signatureAlgorithm", "var_name": "signatureAlgorithm"}, {"original_string": "private final EcdsaEncoding encoding;", "modifier": "private final", "type": "EcdsaEncoding", "declarator": "encoding", "var_name": "encoding"}], "methods": [{"identifier": "EcdsaSignJce", "parameters": "(final ECPrivateKey priv, HashType hash, EcdsaEncoding encoding)", "modifiers": "public", "return": "", "signature": " EcdsaSignJce(final ECPrivateKey priv, HashType hash, EcdsaEncoding encoding)", "full_signature": "public  EcdsaSignJce(final ECPrivateKey priv, HashType hash, EcdsaEncoding encoding)", "class_method_signature": "EcdsaSignJce.EcdsaSignJce(final ECPrivateKey priv, HashType hash, EcdsaEncoding encoding)", "testcase": false, "constructor": true}, {"identifier": "sign", "parameters": "(final byte[] data)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] sign(final byte[] data)", "full_signature": "@Override public byte[] sign(final byte[] data)", "class_method_signature": "EcdsaSignJce.sign(final byte[] data)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/subtle/EcdsaSignJce.java"}, "focal_method": {"identifier": "sign", "parameters": "(final byte[] data)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n  public byte[] sign(final byte[] data) throws GeneralSecurityException {\n    Signature signer = EngineFactory.SIGNATURE.getInstance(signatureAlgorithm);\n    signer.initSign(privateKey);\n    signer.update(data);\n    byte[] signature = signer.sign();\n    if (encoding == EcdsaEncoding.IEEE_P1363) {\n      EllipticCurve curve = privateKey.getParams().getCurve();\n      signature =\n          EllipticCurves.ecdsaDer2Ieee(signature, 2 * EllipticCurves.fieldSizeInBytes(curve));\n    }\n    return signature;\n  }", "signature": "byte[] sign(final byte[] data)", "full_signature": "@Override public byte[] sign(final byte[] data)", "class_method_signature": "EcdsaSignJce.sign(final byte[] data)", "testcase": false, "constructor": false, "invocations": ["getInstance", "initSign", "update", "sign", "getCurve", "getParams", "ecdsaDer2Ieee", "fieldSizeInBytes"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}