{"test_class": {"identifier": "BoardDaoTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    BoardDao boardDao;", "modifier": "@Autowired", "type": "BoardDao", "declarator": "boardDao", "var_name": "boardDao"}], "file": "fastcampus/daoexam/src/test/java/examples/daoexam/dao/BoardDaoTest.java"}, "test_case": {"identifier": "getBoards", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getBoards() throws Exception{\n        List<Board> boards = boardDao.getBoards();\n        Assert.assertEquals(boards.size(), 5);\n        for(Board board : boards){\n            Assert.assertNotNull(board);\n        }\n    }", "signature": "void getBoards()", "full_signature": "@Test public void getBoards()", "class_method_signature": "BoardDaoTest.getBoards()", "testcase": true, "constructor": false, "invocations": ["getBoards", "assertEquals", "size", "assertNotNull"]}, "focal_class": {"identifier": "BoardDao", "superclass": "", "interfaces": "", "fields": [{"original_string": "private NamedParameterJdbcTemplate jdbc;", "modifier": "private", "type": "NamedParameterJdbcTemplate", "declarator": "jdbc", "var_name": "jdbc"}, {"original_string": "private SimpleJdbcInsert insertAction;", "modifier": "private", "type": "SimpleJdbcInsert", "declarator": "insertAction", "var_name": "insertAction"}], "methods": [{"identifier": "BoardDao", "parameters": "(DataSource dataSource)", "modifiers": "public", "return": "", "signature": " BoardDao(DataSource dataSource)", "full_signature": "public  BoardDao(DataSource dataSource)", "class_method_signature": "BoardDao.BoardDao(DataSource dataSource)", "testcase": false, "constructor": true}, {"identifier": "addBoard", "parameters": "(Board board)", "modifiers": "public", "return": "Long", "signature": "Long addBoard(Board board)", "full_signature": "public Long addBoard(Board board)", "class_method_signature": "BoardDao.addBoard(Board board)", "testcase": false, "constructor": false}, {"identifier": "updateCount", "parameters": "(Long id)", "modifiers": "public", "return": "int", "signature": "int updateCount(Long id)", "full_signature": "public int updateCount(Long id)", "class_method_signature": "BoardDao.updateCount(Long id)", "testcase": false, "constructor": false}, {"identifier": "deleteBoard", "parameters": "(Long id)", "modifiers": "public", "return": "int", "signature": "int deleteBoard(Long id)", "full_signature": "public int deleteBoard(Long id)", "class_method_signature": "BoardDao.deleteBoard(Long id)", "testcase": false, "constructor": false}, {"identifier": "updateBoard", "parameters": "(Board board)", "modifiers": "public", "return": "int", "signature": "int updateBoard(Board board)", "full_signature": "public int updateBoard(Board board)", "class_method_signature": "BoardDao.updateBoard(Board board)", "testcase": false, "constructor": false}, {"identifier": "getBoard", "parameters": "(Long id)", "modifiers": "public", "return": "Board", "signature": "Board getBoard(Long id)", "full_signature": "public Board getBoard(Long id)", "class_method_signature": "BoardDao.getBoard(Long id)", "testcase": false, "constructor": false}, {"identifier": "getBoards", "parameters": "()", "modifiers": "public", "return": "List<Board>", "signature": "List<Board> getBoards()", "full_signature": "public List<Board> getBoards()", "class_method_signature": "BoardDao.getBoards()", "testcase": false, "constructor": false}], "file": "fastcampus/daoexam/src/main/java/examples/daoexam/dao/BoardDao.java"}, "focal_method": {"identifier": "getBoards", "parameters": "()", "modifiers": "public", "return": "List<Board>", "body": "public List<Board> getBoards(){\n        String sql = \"select id, name, title, content, regdate, read_count     \" +\n                \"from board order by id desc\";\n        try{\n            RowMapper<Board> rowMapper = BeanPropertyRowMapper.newInstance(Board.class);\n            return jdbc.query(sql, rowMapper);\n        }catch(Exception ex){\n            return null;\n        }\n    }", "signature": "List<Board> getBoards()", "full_signature": "public List<Board> getBoards()", "class_method_signature": "BoardDao.getBoards()", "testcase": false, "constructor": false, "invocations": ["newInstance", "query"]}, "repository": {"repo_id": 152217753, "url": "https://github.com/siyoon210/spring-framework", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 5, "size": 7064, "license": "licensed"}}