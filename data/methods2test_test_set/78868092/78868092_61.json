{"test_class": {"identifier": "AlarmServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private final AlarmService alarmService = new AlarmService();", "modifier": "@InjectMocks\n    private final", "type": "AlarmService", "declarator": "alarmService = new AlarmService()", "var_name": "alarmService"}, {"original_string": "@Mock\n    private SubscriptionService subscriptionService;", "modifier": "@Mock\n    private", "type": "SubscriptionService", "declarator": "subscriptionService", "var_name": "subscriptionService"}, {"original_string": "@Mock\n    private SeyrenRepository seyrenRepository;", "modifier": "@Mock\n    private", "type": "SeyrenRepository", "declarator": "seyrenRepository", "var_name": "seyrenRepository"}, {"original_string": "@Mock\n    private NotificationHandler notificationHandler;", "modifier": "@Mock\n    private", "type": "NotificationHandler", "declarator": "notificationHandler", "var_name": "notificationHandler"}], "file": "services/src/test/java/com/vsct/supervision/notification/service/AlarmServiceTest.java"}, "test_case": {"identifier": "searchNonExistentAlarm", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void searchNonExistentAlarm() throws Exception {\n        Alarm searchAlarm = new Alarm();\n        searchAlarm.setTarget(\"testing.is.good\");\n        searchAlarm.setWarn(BigDecimal.valueOf(155));\n        searchAlarm.setError(BigDecimal.valueOf(551));\n\n        Alarm foundAlarm = alarmService.searchAlarm(searchAlarm);\n        assertNull(foundAlarm);\n    }", "signature": "void searchNonExistentAlarm()", "full_signature": "@Test public void searchNonExistentAlarm()", "class_method_signature": "AlarmServiceTest.searchNonExistentAlarm()", "testcase": true, "constructor": false, "invocations": ["setTarget", "setWarn", "valueOf", "setError", "valueOf", "searchAlarm", "assertNull"]}, "focal_class": {"identifier": "AlarmService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(AlarmService.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(AlarmService.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private SeyrenRepository seyrenRepository;", "modifier": "@Autowired\n    private", "type": "SeyrenRepository", "declarator": "seyrenRepository", "var_name": "seyrenRepository"}, {"original_string": "@Autowired\n    private SubscriptionService subscriptionService;", "modifier": "@Autowired\n    private", "type": "SubscriptionService", "declarator": "subscriptionService", "var_name": "subscriptionService"}, {"original_string": "@Autowired\n    private NotificationHandler notificationHandler;", "modifier": "@Autowired\n    private", "type": "NotificationHandler", "declarator": "notificationHandler", "var_name": "notificationHandler"}], "methods": [{"identifier": "getAlarm", "parameters": "(String id)", "modifiers": "public", "return": "Alarm", "signature": "Alarm getAlarm(String id)", "full_signature": "public Alarm getAlarm(String id)", "class_method_signature": "AlarmService.getAlarm(String id)", "testcase": false, "constructor": false}, {"identifier": "getAllAlarms", "parameters": "()", "modifiers": "public", "return": "Collection<Alarm>", "signature": "Collection<Alarm> getAllAlarms()", "full_signature": "public Collection<Alarm> getAllAlarms()", "class_method_signature": "AlarmService.getAllAlarms()", "testcase": false, "constructor": false}, {"identifier": "subscribeToAAlarm", "parameters": "(final Alarm alarm)", "modifiers": "public", "return": "Alarm", "signature": "Alarm subscribeToAAlarm(final Alarm alarm)", "full_signature": "public Alarm subscribeToAAlarm(final Alarm alarm)", "class_method_signature": "AlarmService.subscribeToAAlarm(final Alarm alarm)", "testcase": false, "constructor": false}, {"identifier": "activateAlarm", "parameters": "(final Alarm alarm)", "modifiers": "private", "return": "void", "signature": "void activateAlarm(final Alarm alarm)", "full_signature": "private void activateAlarm(final Alarm alarm)", "class_method_signature": "AlarmService.activateAlarm(final Alarm alarm)", "testcase": false, "constructor": false}, {"identifier": "searchAlarmByName", "parameters": "(final String name)", "modifiers": "private", "return": "Alarm", "signature": "Alarm searchAlarmByName(final String name)", "full_signature": "private Alarm searchAlarmByName(final String name)", "class_method_signature": "AlarmService.searchAlarmByName(final String name)", "testcase": false, "constructor": false}, {"identifier": "searchAlarmsBySourceTargetAndThresholds", "parameters": "(final URI source, final String target, final BigDecimal warn,\n        final BigDecimal error)", "modifiers": "private", "return": "Collection<Alarm>", "signature": "Collection<Alarm> searchAlarmsBySourceTargetAndThresholds(final URI source, final String target, final BigDecimal warn,\n        final BigDecimal error)", "full_signature": "private Collection<Alarm> searchAlarmsBySourceTargetAndThresholds(final URI source, final String target, final BigDecimal warn,\n        final BigDecimal error)", "class_method_signature": "AlarmService.searchAlarmsBySourceTargetAndThresholds(final URI source, final String target, final BigDecimal warn,\n        final BigDecimal error)", "testcase": false, "constructor": false}, {"identifier": "searchAlarm", "parameters": "(final Alarm alarm)", "modifiers": "public", "return": "Alarm", "signature": "Alarm searchAlarm(final Alarm alarm)", "full_signature": "public Alarm searchAlarm(final Alarm alarm)", "class_method_signature": "AlarmService.searchAlarm(final Alarm alarm)", "testcase": false, "constructor": false}, {"identifier": "searchAlarmsBySubscriptionTarget", "parameters": "(String subTarget)", "modifiers": "public", "return": "Collection<Alarm>", "signature": "Collection<Alarm> searchAlarmsBySubscriptionTarget(String subTarget)", "full_signature": "public Collection<Alarm> searchAlarmsBySubscriptionTarget(String subTarget)", "class_method_signature": "AlarmService.searchAlarmsBySubscriptionTarget(String subTarget)", "testcase": false, "constructor": false}, {"identifier": "updateAlarm", "parameters": "(final Alarm alarm)", "modifiers": "public", "return": "Alarm", "signature": "Alarm updateAlarm(final Alarm alarm)", "full_signature": "public Alarm updateAlarm(final Alarm alarm)", "class_method_signature": "AlarmService.updateAlarm(final Alarm alarm)", "testcase": false, "constructor": false}, {"identifier": "validateUpdatable", "parameters": "(Alarm alarm)", "modifiers": "private", "return": "void", "signature": "void validateUpdatable(Alarm alarm)", "full_signature": "private void validateUpdatable(Alarm alarm)", "class_method_signature": "AlarmService.validateUpdatable(Alarm alarm)", "testcase": false, "constructor": false}], "file": "services/src/main/java/com/vsct/supervision/notification/service/AlarmService.java"}, "focal_method": {"identifier": "searchAlarm", "parameters": "(final Alarm alarm)", "modifiers": "public", "return": "Alarm", "body": "public Alarm searchAlarm(final Alarm alarm) {\n\n        Collection<Alarm> identicalAlarms =\n            searchAlarmsBySourceTargetAndThresholds(alarm.getGraphiteBaseUrl(), alarm.getTarget(), alarm.getWarn(), alarm.getError());\n\n        if (!identicalAlarms.isEmpty()) {\n            return identicalAlarms.iterator().next();\n        }\n\n        return null;\n    }", "signature": "Alarm searchAlarm(final Alarm alarm)", "full_signature": "public Alarm searchAlarm(final Alarm alarm)", "class_method_signature": "AlarmService.searchAlarm(final Alarm alarm)", "testcase": false, "constructor": false, "invocations": ["searchAlarmsBySourceTargetAndThresholds", "getGraphiteBaseUrl", "getTarget", "getWarn", "getError", "isEmpty", "next", "iterator"]}, "repository": {"repo_id": 78868092, "url": "https://github.com/voyages-sncf-technologies/cerebro", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 98, "size": 660, "license": "licensed"}}