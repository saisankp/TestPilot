{"test_class": {"identifier": "MethodInvokerReceiverResolutionStrategyTest", "superclass": "extends PluginsLoadingTestBase", "interfaces": "", "fields": [{"original_string": "private AObject object = new AObject();", "modifier": "private", "type": "AObject", "declarator": "object = new AObject()", "var_name": "object"}, {"original_string": "private IResolveDependencyStrategy strategy;", "modifier": "private", "type": "IResolveDependencyStrategy", "declarator": "strategy", "var_name": "strategy"}, {"original_string": "private IObject configMock;", "modifier": "private", "type": "IObject", "declarator": "configMock", "var_name": "configMock"}, {"original_string": "private IReceiverGenerator receiverGeneratorMock;", "modifier": "private", "type": "IReceiverGenerator", "declarator": "receiverGeneratorMock", "var_name": "receiverGeneratorMock"}, {"original_string": "private IResolveDependencyStrategy defaultWrapperResolutionStrategyMock;", "modifier": "private", "type": "IResolveDependencyStrategy", "declarator": "defaultWrapperResolutionStrategyMock", "var_name": "defaultWrapperResolutionStrategyMock"}, {"original_string": "private IResolveDependencyStrategy specialWrapperResolutionStrategyMock;", "modifier": "private", "type": "IResolveDependencyStrategy", "declarator": "specialWrapperResolutionStrategyMock", "var_name": "specialWrapperResolutionStrategyMock"}, {"original_string": "private IResolveDependencyStrategy defaultWrapperResolutionStrategyResolutionStrategyMock;", "modifier": "private", "type": "IResolveDependencyStrategy", "declarator": "defaultWrapperResolutionStrategyResolutionStrategyMock", "var_name": "defaultWrapperResolutionStrategyResolutionStrategyMock"}, {"original_string": "private IResolveDependencyStrategy specialWrapperResolutionStrategyResolutionStrategyMock;", "modifier": "private", "type": "IResolveDependencyStrategy", "declarator": "specialWrapperResolutionStrategyResolutionStrategyMock", "var_name": "specialWrapperResolutionStrategyResolutionStrategyMock"}, {"original_string": "private IMessageReceiver receiverMock1;", "modifier": "private", "type": "IMessageReceiver", "declarator": "receiverMock1", "var_name": "receiverMock1"}, {"original_string": "private IMessageReceiver receiverMock2;", "modifier": "private", "type": "IMessageReceiver", "declarator": "receiverMock2", "var_name": "receiverMock2"}], "file": "CoreFeatures/MessageProcessing/ObjectCreationStrategies/src/test/java/info/smart_tools/smartactors/message_processing/object_creation_strategies/MethodInvokerReceiverResolutionStrategyTest.java"}, "test_case": {"identifier": "Should_throwWhenMethodHasTooMuchArguments", "parameters": "()", "modifiers": "@Test(expected = ResolveDependencyStrategyException.class) public", "return": "void", "body": "@Test(expected = ResolveDependencyStrategyException.class)\n    public void Should_throwWhenMethodHasTooMuchArguments()\n            throws Exception {\n        strategy.resolve(\n                object,\n                object.getClass().getMethod(\"method2\", Object.class, Object.class),\n                configMock\n        );\n    }", "signature": "void Should_throwWhenMethodHasTooMuchArguments()", "full_signature": "@Test(expected = ResolveDependencyStrategyException.class) public void Should_throwWhenMethodHasTooMuchArguments()", "class_method_signature": "MethodInvokerReceiverResolutionStrategyTest.Should_throwWhenMethodHasTooMuchArguments()", "testcase": true, "constructor": false, "invocations": ["resolve", "getMethod", "getClass"]}, "focal_class": {"identifier": "MethodInvokerReceiverResolutionStrategy", "superclass": "", "interfaces": "implements IResolveDependencyStrategy", "fields": [{"original_string": "private final IFieldName wrapperResolutionStrategyDependencyFieldName;", "modifier": "private final", "type": "IFieldName", "declarator": "wrapperResolutionStrategyDependencyFieldName", "var_name": "wrapperResolutionStrategyDependencyFieldName"}, {"original_string": "private final IReceiverGenerator receiverGenerator;", "modifier": "private final", "type": "IReceiverGenerator", "declarator": "receiverGenerator", "var_name": "receiverGenerator"}], "methods": [{"identifier": "MethodInvokerReceiverResolutionStrategy", "parameters": "()", "modifiers": "public", "return": "", "signature": " MethodInvokerReceiverResolutionStrategy()", "full_signature": "public  MethodInvokerReceiverResolutionStrategy()", "class_method_signature": "MethodInvokerReceiverResolutionStrategy.MethodInvokerReceiverResolutionStrategy()", "testcase": false, "constructor": true}, {"identifier": "resolve", "parameters": "(final Object... args)", "modifiers": "@Override public", "return": "T", "signature": "T resolve(final Object... args)", "full_signature": "@Override public T resolve(final Object... args)", "class_method_signature": "MethodInvokerReceiverResolutionStrategy.resolve(final Object... args)", "testcase": false, "constructor": false}], "file": "CoreFeatures/MessageProcessing/ObjectCreationStrategies/src/main/java/info/smart_tools/smartactors/message_processing/object_creation_strategies/MethodInvokerReceiverResolutionStrategy.java"}, "focal_method": {"identifier": "resolve", "parameters": "(final Object... args)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T resolve(final Object... args) throws ResolveDependencyStrategyException {\n        Object targetObject = args[0];\n        Method method = (Method) args[1];\n        IObject invokerConfig = (IObject) args[2];\n\n        if (method.getParameterCount() != 1) {\n            throw new ResolveDependencyStrategyException(\n                    String.format(\"Unexpected amount of arguments in method %s of class %s.\",\n                            method.getName(), method.getDeclaringClass().getCanonicalName()));\n        }\n\n        try {\n            Object wrapperResolutionStrategyDependency = invokerConfig.getValue(wrapperResolutionStrategyDependencyFieldName);\n\n            if (null == wrapperResolutionStrategyDependency) {\n                wrapperResolutionStrategyDependency = \"default wrapper resolution strategy dependency for invoker receiver\";\n            }\n\n            IResolveDependencyStrategy wrapperResolutionStrategy = IOC.resolve(\n                    IOC.resolve(IOC.getKeyForKeyStorage(), wrapperResolutionStrategyDependency),\n                    method.getParameterTypes()[0]\n            );\n\n            return (T) receiverGenerator.generate(targetObject, wrapperResolutionStrategy, method.getName());\n        } catch (ReadValueException | InvalidArgumentException | ResolutionException | ReceiverGeneratorException e) {\n            throw new ResolveDependencyStrategyException(e);\n        }\n    }", "signature": "T resolve(final Object... args)", "full_signature": "@Override public T resolve(final Object... args)", "class_method_signature": "MethodInvokerReceiverResolutionStrategy.resolve(final Object... args)", "testcase": false, "constructor": false, "invocations": ["getParameterCount", "format", "getName", "getCanonicalName", "getDeclaringClass", "getValue", "resolve", "resolve", "getKeyForKeyStorage", "getParameterTypes", "generate", "getName"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}