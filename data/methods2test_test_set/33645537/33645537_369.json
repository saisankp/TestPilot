{"test_class": {"identifier": "FibonacciNumbersTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FibonacciNumbers fibonacciNumbers;", "modifier": "private", "type": "FibonacciNumbers", "declarator": "fibonacciNumbers", "var_name": "fibonacciNumbers"}], "file": "algs/src/test/java/com/github/pedrovgs/problem7/FibonacciNumbersTest.java"}, "test_case": {"identifier": "shouldNotAcceptNegativeValuesIterative", "parameters": "()", "modifiers": "@Test(expected = IllegalArgumentException.class) public", "return": "void", "body": "@Test(expected = IllegalArgumentException.class)\n  public void shouldNotAcceptNegativeValuesIterative() {\n    fibonacciNumbers.getIterative(-1);\n  }", "signature": "void shouldNotAcceptNegativeValuesIterative()", "full_signature": "@Test(expected = IllegalArgumentException.class) public void shouldNotAcceptNegativeValuesIterative()", "class_method_signature": "FibonacciNumbersTest.shouldNotAcceptNegativeValuesIterative()", "testcase": true, "constructor": false, "invocations": ["getIterative"]}, "focal_class": {"identifier": "FibonacciNumbers", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static int[] elements = new int[1000];", "modifier": "private static", "type": "int[]", "declarator": "elements = new int[1000]", "var_name": "elements"}], "methods": [{"identifier": "getRecursive", "parameters": "(int n)", "modifiers": "public", "return": "int", "signature": "int getRecursive(int n)", "full_signature": "public int getRecursive(int n)", "class_method_signature": "FibonacciNumbers.getRecursive(int n)", "testcase": false, "constructor": false}, {"identifier": "getIterative", "parameters": "(int n)", "modifiers": "public", "return": "int", "signature": "int getIterative(int n)", "full_signature": "public int getIterative(int n)", "class_method_signature": "FibonacciNumbers.getIterative(int n)", "testcase": false, "constructor": false}, {"identifier": "getRecursiveWithCatching", "parameters": "(int n)", "modifiers": "public", "return": "int", "signature": "int getRecursiveWithCatching(int n)", "full_signature": "public int getRecursiveWithCatching(int n)", "class_method_signature": "FibonacciNumbers.getRecursiveWithCatching(int n)", "testcase": false, "constructor": false}, {"identifier": "validateInput", "parameters": "(int n)", "modifiers": "private", "return": "void", "signature": "void validateInput(int n)", "full_signature": "private void validateInput(int n)", "class_method_signature": "FibonacciNumbers.validateInput(int n)", "testcase": false, "constructor": false}], "file": "algs/src/main/java/com/github/pedrovgs/problem7/FibonacciNumbers.java"}, "focal_method": {"identifier": "getIterative", "parameters": "(int n)", "modifiers": "public", "return": "int", "body": "public int getIterative(int n) {\n    validateInput(n);\n\n    if (n <= 1) {\n      return 1;\n    }\n    int previous = 1;\n    int current = 1;\n    int element = 0;\n    for (int i = 2; i <= n; i++) {\n      element = previous + current;\n      previous = current;\n      current = element;\n    }\n    return element;\n  }", "signature": "int getIterative(int n)", "full_signature": "public int getIterative(int n)", "class_method_signature": "FibonacciNumbers.getIterative(int n)", "testcase": false, "constructor": false, "invocations": ["validateInput"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}