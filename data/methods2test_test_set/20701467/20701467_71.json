{"test_class": {"identifier": "NetUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "packethandler/implementation/src/test/java/org/opendaylight/l2switch/packethandler/decoders/utils/NetUtilsTest.java"}, "test_case": {"identifier": "testGetSubnetLen", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetSubnetLen() {\n\n        byte[] address = { (byte) 128, (byte) 0, (byte) 0, 0 };\n        assertTrue(NetUtils.getSubnetMaskLength(address) == 1);\n\n        byte[] address1 = { (byte) 255, 0, 0, 0 };\n        assertTrue(NetUtils.getSubnetMaskLength(address1) == 8);\n\n        byte[] address2 = { (byte) 255, (byte) 255, (byte) 248, 0 };\n        assertTrue(NetUtils.getSubnetMaskLength(address2) == 21);\n\n        byte[] address4 = { (byte) 255, (byte) 255, (byte) 255, (byte) 254 };\n        assertTrue(NetUtils.getSubnetMaskLength(address4) == 31);\n\n        byte[] address5 = {(byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255,\n            (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255,\n            (byte) 255};\n        assertTrue(NetUtils.getSubnetMaskLength(address5) == 128);\n\n        byte[] address6 = {(byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255,\n            (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255,\n            (byte) 254};\n        assertTrue(NetUtils.getSubnetMaskLength(address6) == 127);\n\n        byte[] address7 = {(byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255,\n            (byte) 255, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0};\n        assertTrue(NetUtils.getSubnetMaskLength(address7) == 64);\n\n        byte[] address8 = {(byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255,\n            (byte) 254, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0};\n        assertTrue(NetUtils.getSubnetMaskLength(address8) == 63);\n\n        byte[] address9 = {(byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 255, (byte) 128,\n            (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0};\n        assertTrue(NetUtils.getSubnetMaskLength(address9) == 49);\n\n        byte[] address10 = {(byte) 128, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0,\n            (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0};\n        assertTrue(NetUtils.getSubnetMaskLength(address10) == 1);\n\n        byte[] address11 = {(byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0,\n            (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0};\n        assertTrue(NetUtils.getSubnetMaskLength(address11) == 0);\n    }", "signature": "void testGetSubnetLen()", "full_signature": "@Test public void testGetSubnetLen()", "class_method_signature": "NetUtilsTest.testGetSubnetLen()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "getSubnetMaskLength", "assertTrue", "getSubnetMaskLength", "assertTrue", "getSubnetMaskLength", "assertTrue", "getSubnetMaskLength", "assertTrue", "getSubnetMaskLength", "assertTrue", "getSubnetMaskLength", "assertTrue", "getSubnetMaskLength", "assertTrue", "getSubnetMaskLength", "assertTrue", "getSubnetMaskLength", "assertTrue", "getSubnetMaskLength", "assertTrue", "getSubnetMaskLength"]}, "focal_class": {"identifier": "NetUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(NetUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(NetUtils.class)", "var_name": "LOG"}, {"original_string": "public static final int NUM_BITS_IN_A_BYTE = 8;", "modifier": "public static final", "type": "int", "declarator": "NUM_BITS_IN_A_BYTE = 8", "var_name": "NUM_BITS_IN_A_BYTE"}, {"original_string": "public static final int MAC_ADDR_LENGTH_IN_BYTES = 6;", "modifier": "public static final", "type": "int", "declarator": "MAC_ADDR_LENGTH_IN_BYTES = 6", "var_name": "MAC_ADDR_LENGTH_IN_BYTES"}, {"original_string": "public static final int MAC_ADDR_LENGTH_IN_WORDS = 3;", "modifier": "public static final", "type": "int", "declarator": "MAC_ADDR_LENGTH_IN_WORDS = 3", "var_name": "MAC_ADDR_LENGTH_IN_WORDS"}, {"original_string": "private static final byte[] BROADCAST_MAC_ADDR = { -1, -1, -1, -1, -1, -1 };", "modifier": "private static final", "type": "byte[]", "declarator": "BROADCAST_MAC_ADDR = { -1, -1, -1, -1, -1, -1 }", "var_name": "BROADCAST_MAC_ADDR"}], "methods": [{"identifier": "NetUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " NetUtils()", "full_signature": "private  NetUtils()", "class_method_signature": "NetUtils.NetUtils()", "testcase": false, "constructor": true}, {"identifier": "byteArray4ToInt", "parameters": "(byte[] ba)", "modifiers": "public static", "return": "int", "signature": "int byteArray4ToInt(byte[] ba)", "full_signature": "public static int byteArray4ToInt(byte[] ba)", "class_method_signature": "NetUtils.byteArray4ToInt(byte[] ba)", "testcase": false, "constructor": false}, {"identifier": "byteArray6ToLong", "parameters": "(byte[] ba)", "modifiers": "public static", "return": "long", "signature": "long byteArray6ToLong(byte[] ba)", "full_signature": "public static long byteArray6ToLong(byte[] ba)", "class_method_signature": "NetUtils.byteArray6ToLong(byte[] ba)", "testcase": false, "constructor": false}, {"identifier": "longToByteArray6", "parameters": "(long addr)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] longToByteArray6(long addr)", "full_signature": "public static byte[] longToByteArray6(long addr)", "class_method_signature": "NetUtils.longToByteArray6(long addr)", "testcase": false, "constructor": false}, {"identifier": "intToByteArray4", "parameters": "(int value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] intToByteArray4(int value)", "full_signature": "public static byte[] intToByteArray4(int value)", "class_method_signature": "NetUtils.intToByteArray4(int value)", "testcase": false, "constructor": false}, {"identifier": "getInetAddress", "parameters": "(int address)", "modifiers": "public static", "return": "InetAddress", "signature": "InetAddress getInetAddress(int address)", "full_signature": "public static InetAddress getInetAddress(int address)", "class_method_signature": "NetUtils.getInetAddress(int address)", "testcase": false, "constructor": false}, {"identifier": "getInetNetworkMask", "parameters": "(int prefixMaskLength, boolean isV6)", "modifiers": "public static", "return": "InetAddress", "signature": "InetAddress getInetNetworkMask(int prefixMaskLength, boolean isV6)", "full_signature": "public static InetAddress getInetNetworkMask(int prefixMaskLength, boolean isV6)", "class_method_signature": "NetUtils.getInetNetworkMask(int prefixMaskLength, boolean isV6)", "testcase": false, "constructor": false}, {"identifier": "getSubnetMaskLength", "parameters": "(byte[] subnetMask)", "modifiers": "public static", "return": "int", "signature": "int getSubnetMaskLength(byte[] subnetMask)", "full_signature": "public static int getSubnetMaskLength(byte[] subnetMask)", "class_method_signature": "NetUtils.getSubnetMaskLength(byte[] subnetMask)", "testcase": false, "constructor": false}, {"identifier": "getSubnetMaskLength", "parameters": "(InetAddress subnetMask)", "modifiers": "public static", "return": "int", "signature": "int getSubnetMaskLength(InetAddress subnetMask)", "full_signature": "public static int getSubnetMaskLength(InetAddress subnetMask)", "class_method_signature": "NetUtils.getSubnetMaskLength(InetAddress subnetMask)", "testcase": false, "constructor": false}, {"identifier": "getSubnetPrefix", "parameters": "(InetAddress ip, int maskLen)", "modifiers": "public static", "return": "InetAddress", "signature": "InetAddress getSubnetPrefix(InetAddress ip, int maskLen)", "full_signature": "public static InetAddress getSubnetPrefix(InetAddress ip, int maskLen)", "class_method_signature": "NetUtils.getSubnetPrefix(InetAddress ip, int maskLen)", "testcase": false, "constructor": false}, {"identifier": "inetAddressConflict", "parameters": "(InetAddress testAddress, InetAddress filterAddress, InetAddress testMask,\n            InetAddress filterMask)", "modifiers": "public static", "return": "boolean", "signature": "boolean inetAddressConflict(InetAddress testAddress, InetAddress filterAddress, InetAddress testMask,\n            InetAddress filterMask)", "full_signature": "public static boolean inetAddressConflict(InetAddress testAddress, InetAddress filterAddress, InetAddress testMask,\n            InetAddress filterMask)", "class_method_signature": "NetUtils.inetAddressConflict(InetAddress testAddress, InetAddress filterAddress, InetAddress testMask,\n            InetAddress filterMask)", "testcase": false, "constructor": false}, {"identifier": "isZeroMAC", "parameters": "(byte[] mac)", "modifiers": "public static", "return": "boolean", "signature": "boolean isZeroMAC(byte[] mac)", "full_signature": "public static boolean isZeroMAC(byte[] mac)", "class_method_signature": "NetUtils.isZeroMAC(byte[] mac)", "testcase": false, "constructor": false}, {"identifier": "isBroadcastMACAddr", "parameters": "(byte[] macAddress)", "modifiers": "public static", "return": "boolean", "signature": "boolean isBroadcastMACAddr(byte[] macAddress)", "full_signature": "public static boolean isBroadcastMACAddr(byte[] macAddress)", "class_method_signature": "NetUtils.isBroadcastMACAddr(byte[] macAddress)", "testcase": false, "constructor": false}, {"identifier": "isUnicastMACAddr", "parameters": "(byte[] macAddress)", "modifiers": "public static", "return": "boolean", "signature": "boolean isUnicastMACAddr(byte[] macAddress)", "full_signature": "public static boolean isUnicastMACAddr(byte[] macAddress)", "class_method_signature": "NetUtils.isUnicastMACAddr(byte[] macAddress)", "testcase": false, "constructor": false}, {"identifier": "isMulticastMACAddr", "parameters": "(byte[] macAddress)", "modifiers": "public static", "return": "boolean", "signature": "boolean isMulticastMACAddr(byte[] macAddress)", "full_signature": "public static boolean isMulticastMACAddr(byte[] macAddress)", "class_method_signature": "NetUtils.isMulticastMACAddr(byte[] macAddress)", "testcase": false, "constructor": false}, {"identifier": "isAny", "parameters": "(InetAddress ip)", "modifiers": "public static", "return": "boolean", "signature": "boolean isAny(InetAddress ip)", "full_signature": "public static boolean isAny(InetAddress ip)", "class_method_signature": "NetUtils.isAny(InetAddress ip)", "testcase": false, "constructor": false}, {"identifier": "fieldsConflict", "parameters": "(int field1, int field2)", "modifiers": "public static", "return": "boolean", "signature": "boolean fieldsConflict(int field1, int field2)", "full_signature": "public static boolean fieldsConflict(int field1, int field2)", "class_method_signature": "NetUtils.fieldsConflict(int field1, int field2)", "testcase": false, "constructor": false}, {"identifier": "parseInetAddress", "parameters": "(String addressString)", "modifiers": "public static", "return": "InetAddress", "signature": "InetAddress parseInetAddress(String addressString)", "full_signature": "public static InetAddress parseInetAddress(String addressString)", "class_method_signature": "NetUtils.parseInetAddress(String addressString)", "testcase": false, "constructor": false}, {"identifier": "isIPv4AddressValid", "parameters": "(String cidr)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIPv4AddressValid(String cidr)", "full_signature": "public static boolean isIPv4AddressValid(String cidr)", "class_method_signature": "NetUtils.isIPv4AddressValid(String cidr)", "testcase": false, "constructor": false}, {"identifier": "isIPv6AddressValid", "parameters": "(String cidr)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIPv6AddressValid(String cidr)", "full_signature": "public static boolean isIPv6AddressValid(String cidr)", "class_method_signature": "NetUtils.isIPv6AddressValid(String cidr)", "testcase": false, "constructor": false}, {"identifier": "isIPAddressValid", "parameters": "(String cidr)", "modifiers": "public static", "return": "boolean", "signature": "boolean isIPAddressValid(String cidr)", "full_signature": "public static boolean isIPAddressValid(String cidr)", "class_method_signature": "NetUtils.isIPAddressValid(String cidr)", "testcase": false, "constructor": false}, {"identifier": "getUnsignedByte", "parameters": "(byte value)", "modifiers": "public static", "return": "int", "signature": "int getUnsignedByte(byte value)", "full_signature": "public static int getUnsignedByte(byte value)", "class_method_signature": "NetUtils.getUnsignedByte(byte value)", "testcase": false, "constructor": false}, {"identifier": "getUnsignedShort", "parameters": "(short value)", "modifiers": "public static", "return": "int", "signature": "int getUnsignedShort(short value)", "full_signature": "public static int getUnsignedShort(short value)", "class_method_signature": "NetUtils.getUnsignedShort(short value)", "testcase": false, "constructor": false}, {"identifier": "gethighestIP", "parameters": "(boolean v6)", "modifiers": "public static", "return": "InetAddress", "signature": "InetAddress gethighestIP(boolean v6)", "full_signature": "public static InetAddress gethighestIP(boolean v6)", "class_method_signature": "NetUtils.gethighestIP(boolean v6)", "testcase": false, "constructor": false}, {"identifier": "getBroadcastMACAddr", "parameters": "()", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getBroadcastMACAddr()", "full_signature": "public static byte[] getBroadcastMACAddr()", "class_method_signature": "NetUtils.getBroadcastMACAddr()", "testcase": false, "constructor": false}], "file": "packethandler/implementation/src/main/java/org/opendaylight/l2switch/packethandler/decoders/utils/NetUtils.java"}, "focal_method": {"identifier": "getSubnetMaskLength", "parameters": "(byte[] subnetMask)", "modifiers": "public static", "return": "int", "body": "public static int getSubnetMaskLength(byte[] subnetMask) {\n        int maskLength = 0;\n        if (subnetMask != null && (subnetMask.length == 4 || subnetMask.length == 16)) {\n            int index = 0;\n            while (index < subnetMask.length && subnetMask[index] == (byte) 0xFF) {\n                maskLength += NetUtils.NUM_BITS_IN_A_BYTE;\n                index++;\n            }\n            if (index != subnetMask.length) {\n                int bits = NetUtils.NUM_BITS_IN_A_BYTE - 1;\n                while (bits >= 0 && (subnetMask[index] & 1 << bits) != 0) {\n                    bits--;\n                    maskLength++;\n                }\n            }\n        }\n        return maskLength;\n    }", "signature": "int getSubnetMaskLength(byte[] subnetMask)", "full_signature": "public static int getSubnetMaskLength(byte[] subnetMask)", "class_method_signature": "NetUtils.getSubnetMaskLength(byte[] subnetMask)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 20701467, "url": "https://github.com/opendaylight/l2switch", "language": "Java", "is_fork": false, "fork_count": 30, "stargazer_count": 25, "size": 4178, "license": "licensed"}}