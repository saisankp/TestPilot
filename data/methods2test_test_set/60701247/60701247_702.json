{"test_class": {"identifier": "NetworkProfilerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final FakeNetworkService myService = FakeNetworkService.newBuilder().build();", "modifier": "private final", "type": "FakeNetworkService", "declarator": "myService = FakeNetworkService.newBuilder().build()", "var_name": "myService"}, {"original_string": "@Rule public FakeGrpcChannel myGrpcChannel = new FakeGrpcChannel(\"NetworkProfilerTest\", myService);", "modifier": "@Rule public", "type": "FakeGrpcChannel", "declarator": "myGrpcChannel = new FakeGrpcChannel(\"NetworkProfilerTest\", myService)", "var_name": "myGrpcChannel"}, {"original_string": "private NetworkProfiler myProfiler;", "modifier": "private", "type": "NetworkProfiler", "declarator": "myProfiler", "var_name": "myProfiler"}], "file": "profilers/testSrc/com/android/tools/profilers/network/NetworkProfilerTest.java"}, "test_case": {"identifier": "stopMonitoring", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void stopMonitoring() {\n    myProfiler.stopProfiling(SESSION_DATA);\n    assertEquals(SESSION_DATA, myService.getSession());\n  }", "signature": "void stopMonitoring()", "full_signature": "@Test public void stopMonitoring()", "class_method_signature": "NetworkProfilerTest.stopMonitoring()", "testcase": true, "constructor": false, "invocations": ["stopProfiling", "assertEquals", "getSession"]}, "focal_class": {"identifier": "NetworkProfiler", "superclass": "extends StudioProfiler", "interfaces": "", "fields": [], "methods": [{"identifier": "NetworkProfiler", "parameters": "(@NotNull StudioProfilers profilers)", "modifiers": "public", "return": "", "signature": " NetworkProfiler(@NotNull StudioProfilers profilers)", "full_signature": "public  NetworkProfiler(@NotNull StudioProfilers profilers)", "class_method_signature": "NetworkProfiler.NetworkProfiler(@NotNull StudioProfilers profilers)", "testcase": false, "constructor": true}, {"identifier": "newMonitor", "parameters": "()", "modifiers": "@Override public", "return": "ProfilerMonitor", "signature": "ProfilerMonitor newMonitor()", "full_signature": "@Override public ProfilerMonitor newMonitor()", "class_method_signature": "NetworkProfiler.newMonitor()", "testcase": false, "constructor": false}, {"identifier": "startProfiling", "parameters": "(Common.Session session)", "modifiers": "@Override public", "return": "void", "signature": "void startProfiling(Common.Session session)", "full_signature": "@Override public void startProfiling(Common.Session session)", "class_method_signature": "NetworkProfiler.startProfiling(Common.Session session)", "testcase": false, "constructor": false}, {"identifier": "stopProfiling", "parameters": "(Common.Session session)", "modifiers": "@Override public", "return": "void", "signature": "void stopProfiling(Common.Session session)", "full_signature": "@Override public void stopProfiling(Common.Session session)", "class_method_signature": "NetworkProfiler.stopProfiling(Common.Session session)", "testcase": false, "constructor": false}], "file": "profilers/src/com/android/tools/profilers/network/NetworkProfiler.java"}, "focal_method": {"identifier": "stopProfiling", "parameters": "(Common.Session session)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void stopProfiling(Common.Session session) {\n    myProfilers.getClient().getNetworkClient().stopMonitoringApp(NetworkStopRequest.newBuilder().setSession(session).build());\n  }", "signature": "void stopProfiling(Common.Session session)", "full_signature": "@Override public void stopProfiling(Common.Session session)", "class_method_signature": "NetworkProfiler.stopProfiling(Common.Session session)", "testcase": false, "constructor": false, "invocations": ["stopMonitoringApp", "getNetworkClient", "getClient", "build", "setSession", "newBuilder"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}