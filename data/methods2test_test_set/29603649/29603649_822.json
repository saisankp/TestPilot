{"test_class": {"identifier": "HostBasedUrlAccessSecurityFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private HostValidatorService hostValidatorService;", "modifier": "@Mock\n    private", "type": "HostValidatorService", "declarator": "hostValidatorService", "var_name": "hostValidatorService"}, {"original_string": "@Mock\n    private UrlAccessLogMessageAssembler urlAccessLogMessageAssembler;", "modifier": "@Mock\n    private", "type": "UrlAccessLogMessageAssembler", "declarator": "urlAccessLogMessageAssembler", "var_name": "urlAccessLogMessageAssembler"}, {"original_string": "@InjectMocks\n    private HostBasedUrlAccessSecurityFilter underTest;", "modifier": "@InjectMocks\n    private", "type": "HostBasedUrlAccessSecurityFilter", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private ServletRequest servletRequest;", "modifier": "@Mock\n    private", "type": "ServletRequest", "declarator": "servletRequest", "var_name": "servletRequest"}, {"original_string": "@Mock\n    private ServletResponse servletResponse;", "modifier": "@Mock\n    private", "type": "ServletResponse", "declarator": "servletResponse", "var_name": "servletResponse"}, {"original_string": "@Mock\n    private FilterChain filterChain;", "modifier": "@Mock\n    private", "type": "FilterChain", "declarator": "filterChain", "var_name": "filterChain"}, {"original_string": "@Mock\n    private PrintWriter printWriter;", "modifier": "@Mock\n    private", "type": "PrintWriter", "declarator": "printWriter", "var_name": "printWriter"}], "file": "wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/webapp/security/filter/HostBasedUrlAccessSecurityFilterTest.java"}, "test_case": {"identifier": "testdoFilterShouldWriteErrorToResponseIfNotAdmin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testdoFilterShouldWriteErrorToResponseIfNotAdmin() throws IOException, ServletException {\n        //GIVEN\n        given(hostValidatorService.isRequestFromAdmin(servletRequest)).willReturn(false);\n        given(servletResponse.getWriter()).willReturn(printWriter);\n        //WHEN\n        underTest.doFilter(servletRequest, servletResponse, filterChain);\n        //THEN\n        verify(printWriter).write(Mockito.anyString());\n    }", "signature": "void testdoFilterShouldWriteErrorToResponseIfNotAdmin()", "full_signature": "@Test public void testdoFilterShouldWriteErrorToResponseIfNotAdmin()", "class_method_signature": "HostBasedUrlAccessSecurityFilterTest.testdoFilterShouldWriteErrorToResponseIfNotAdmin()", "testcase": true, "constructor": false, "invocations": ["willReturn", "given", "isRequestFromAdmin", "willReturn", "given", "getWriter", "doFilter", "write", "verify", "anyString"]}, "focal_class": {"identifier": "HostBasedUrlAccessSecurityFilter", "superclass": "", "interfaces": "implements Filter", "fields": [{"original_string": "private static final String NO_ACCESS_MESSAGE = \"You don't have the necessary rights.\";", "modifier": "private static final", "type": "String", "declarator": "NO_ACCESS_MESSAGE = \"You don't have the necessary rights.\"", "var_name": "NO_ACCESS_MESSAGE"}, {"original_string": "private final Logger logger = LoggerFactory.getLogger(HostBasedUrlAccessSecurityFilter.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HostBasedUrlAccessSecurityFilter.class)", "var_name": "logger"}, {"original_string": "@Autowired\n    private HostValidatorService hostValidatorService;", "modifier": "@Autowired\n    private", "type": "HostValidatorService", "declarator": "hostValidatorService", "var_name": "hostValidatorService"}, {"original_string": "@Autowired\n    private UrlAccessLogMessageAssembler urlAccessLogMessageAssembler;", "modifier": "@Autowired\n    private", "type": "UrlAccessLogMessageAssembler", "declarator": "urlAccessLogMessageAssembler", "var_name": "urlAccessLogMessageAssembler"}], "methods": [{"identifier": "init", "parameters": "(FilterConfig filterConfig)", "modifiers": "@Override public", "return": "void", "signature": "void init(FilterConfig filterConfig)", "full_signature": "@Override public void init(FilterConfig filterConfig)", "class_method_signature": "HostBasedUrlAccessSecurityFilter.init(FilterConfig filterConfig)", "testcase": false, "constructor": false}, {"identifier": "doFilter", "parameters": "(ServletRequest request, ServletResponse response, FilterChain chain)", "modifiers": "@Override public", "return": "void", "signature": "void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "full_signature": "@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "class_method_signature": "HostBasedUrlAccessSecurityFilter.doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "testcase": false, "constructor": false}, {"identifier": "sendBackNoAccessResponse", "parameters": "(final ServletResponse response)", "modifiers": "private", "return": "void", "signature": "void sendBackNoAccessResponse(final ServletResponse response)", "full_signature": "private void sendBackNoAccessResponse(final ServletResponse response)", "class_method_signature": "HostBasedUrlAccessSecurityFilter.sendBackNoAccessResponse(final ServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "HostBasedUrlAccessSecurityFilter.destroy()", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-webapp/src/main/java/com/epam/wilma/webapp/security/filter/HostBasedUrlAccessSecurityFilter.java"}, "focal_method": {"identifier": "doFilter", "parameters": "(ServletRequest request, ServletResponse response, FilterChain chain)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        if (hostValidatorService.isRequestFromAdmin(request)) {\n            chain.doFilter(request, response);\n        } else {\n            if (request instanceof HttpServletRequest) {\n                logger.info(urlAccessLogMessageAssembler.assembleDenyMessage((HttpServletRequest) request));\n            }\n            sendBackNoAccessResponse(response);\n        }\n    }", "signature": "void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "full_signature": "@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "class_method_signature": "HostBasedUrlAccessSecurityFilter.doFilter(ServletRequest request, ServletResponse response, FilterChain chain)", "testcase": false, "constructor": false, "invocations": ["isRequestFromAdmin", "doFilter", "info", "assembleDenyMessage", "sendBackNoAccessResponse"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}