{"test_class": {"identifier": "TestJVoiceXmlApplication", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ScopeObserver observer;", "modifier": "private", "type": "ScopeObserver", "declarator": "observer", "var_name": "observer"}], "file": "org.jvoicexml/src/test/java/org/jvoicexml/interpreter/TestJVoiceXmlApplication.java"}, "test_case": {"identifier": "testAddDocument", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddDocument() throws JVoiceXMLEvent, Exception {\n        final Application application = new JVoiceXmlApplication(observer);\n\n        VoiceXmlDocument doc1 = new VoiceXmlDocument();\n        final Vxml vxml1 = doc1.getVxml();\n        final URI testUri1 = createUri(\"scheme\", \"host\", \"/path\", \"fragment\");\n\n        vxml1.setXmlBase(testUri1);\n\n        Assert.assertFalse(application.isLoaded(testUri1));\n        application.addDocument(testUri1, doc1);\n        Assert.assertTrue(application.isLoaded(testUri1));\n        Assert.assertEquals(testUri1, application.getXmlBase());\n\n        VoiceXmlDocument doc2 = new VoiceXmlDocument();\n        final Vxml vxml2 = doc2.getVxml();\n        final URI testUri2 = createUri(\"scheme\", \"host\", \"/path\", \"fragment\");\n        vxml2.setXmlBase(testUri2);\n\n        application.addDocument(testUri2, doc2);\n        Assert.assertTrue(application.isLoaded(testUri2));\n\n        Assert.assertEquals(testUri1, application.getXmlBase());\n\n        VoiceXmlDocument doc3 = new VoiceXmlDocument();\n        final Vxml vxml3 = doc3.getVxml();\n        final URI testUri3 =\n            createUri(\"scheme3\", \"host3\", \"/path3\", \"fragment3\");\n        vxml3.setXmlBase(testUri3);\n        application.addDocument(testUri3, doc3);\n        Assert.assertEquals(testUri3, application.getXmlBase());\n        final URI testUri31 =\n            createUri(\"scheme3\", \"host3\", \"/path3\", null);\n        Assert.assertTrue(\"fragment less document is also loaded\",\n                application.isLoaded(testUri31));\n    }", "signature": "void testAddDocument()", "full_signature": "@Test public void testAddDocument()", "class_method_signature": "TestJVoiceXmlApplication.testAddDocument()", "testcase": true, "constructor": false, "invocations": ["getVxml", "createUri", "setXmlBase", "assertFalse", "isLoaded", "addDocument", "assertTrue", "isLoaded", "assertEquals", "getXmlBase", "getVxml", "createUri", "setXmlBase", "addDocument", "assertTrue", "isLoaded", "assertEquals", "getXmlBase", "getVxml", "createUri", "setXmlBase", "addDocument", "assertEquals", "getXmlBase", "createUri", "assertTrue", "isLoaded"]}, "focal_class": {"identifier": "JVoiceXmlApplication", "superclass": "", "interfaces": "implements Application", "fields": [{"original_string": "private static final Logger LOGGER =\n            LogManager.getLogger(JVoiceXmlApplication.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER =\n            LogManager.getLogger(JVoiceXmlApplication.class)", "var_name": "LOGGER"}, {"original_string": "private VoiceXmlDocument root;", "modifier": "private", "type": "VoiceXmlDocument", "declarator": "root", "var_name": "root"}, {"original_string": "private VoiceXmlDocument current;", "modifier": "private", "type": "VoiceXmlDocument", "declarator": "current", "var_name": "current"}, {"original_string": "private final Map<URI, VoiceXmlDocument> loadedDocuments;", "modifier": "private final", "type": "Map<URI, VoiceXmlDocument>", "declarator": "loadedDocuments", "var_name": "loadedDocuments"}, {"original_string": "private URI application;", "modifier": "private", "type": "URI", "declarator": "application", "var_name": "application"}, {"original_string": "private URI baseUri;", "modifier": "private", "type": "URI", "declarator": "baseUri", "var_name": "baseUri"}, {"original_string": "private final transient ScopeObserver observer;", "modifier": "private final transient", "type": "ScopeObserver", "declarator": "observer", "var_name": "observer"}, {"original_string": "private List<LastResult> lastresults;", "modifier": "private", "type": "List<LastResult>", "declarator": "lastresults", "var_name": "lastresults"}], "methods": [{"identifier": "JVoiceXmlApplication", "parameters": "()", "modifiers": "public", "return": "", "signature": " JVoiceXmlApplication()", "full_signature": "public  JVoiceXmlApplication()", "class_method_signature": "JVoiceXmlApplication.JVoiceXmlApplication()", "testcase": false, "constructor": true}, {"identifier": "JVoiceXmlApplication", "parameters": "(final ScopeObserver scopeObserver)", "modifiers": "public", "return": "", "signature": " JVoiceXmlApplication(final ScopeObserver scopeObserver)", "full_signature": "public  JVoiceXmlApplication(final ScopeObserver scopeObserver)", "class_method_signature": "JVoiceXmlApplication.JVoiceXmlApplication(final ScopeObserver scopeObserver)", "testcase": false, "constructor": true}, {"identifier": "addDocument", "parameters": "(final URI uri, final VoiceXmlDocument doc)", "modifiers": "public", "return": "void", "signature": "void addDocument(final URI uri, final VoiceXmlDocument doc)", "full_signature": "public void addDocument(final URI uri, final VoiceXmlDocument doc)", "class_method_signature": "JVoiceXmlApplication.addDocument(final URI uri, final VoiceXmlDocument doc)", "testcase": false, "constructor": false}, {"identifier": "setRootDocument", "parameters": "(final VoiceXmlDocument document)", "modifiers": "public", "return": "void", "signature": "void setRootDocument(final VoiceXmlDocument document)", "full_signature": "public void setRootDocument(final VoiceXmlDocument document)", "class_method_signature": "JVoiceXmlApplication.setRootDocument(final VoiceXmlDocument document)", "testcase": false, "constructor": false}, {"identifier": "getApplication", "parameters": "()", "modifiers": "public", "return": "URI", "signature": "URI getApplication()", "full_signature": "public URI getApplication()", "class_method_signature": "JVoiceXmlApplication.getApplication()", "testcase": false, "constructor": false}, {"identifier": "getXmlBase", "parameters": "()", "modifiers": "public", "return": "URI", "signature": "URI getXmlBase()", "full_signature": "public URI getXmlBase()", "class_method_signature": "JVoiceXmlApplication.getXmlBase()", "testcase": false, "constructor": false}, {"identifier": "getCurrentDocument", "parameters": "()", "modifiers": "public", "return": "VoiceXmlDocument", "signature": "VoiceXmlDocument getCurrentDocument()", "full_signature": "public VoiceXmlDocument getCurrentDocument()", "class_method_signature": "JVoiceXmlApplication.getCurrentDocument()", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(final URI uri)", "modifiers": "public", "return": "URI", "signature": "URI resolve(final URI uri)", "full_signature": "public URI resolve(final URI uri)", "class_method_signature": "JVoiceXmlApplication.resolve(final URI uri)", "testcase": false, "constructor": false}, {"identifier": "removeFragment", "parameters": "(final URI uri)", "modifiers": "private", "return": "URI", "signature": "URI removeFragment(final URI uri)", "full_signature": "private URI removeFragment(final URI uri)", "class_method_signature": "JVoiceXmlApplication.removeFragment(final URI uri)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(final URI base, final URI uri)", "modifiers": "public", "return": "URI", "signature": "URI resolve(final URI base, final URI uri)", "full_signature": "public URI resolve(final URI base, final URI uri)", "class_method_signature": "JVoiceXmlApplication.resolve(final URI base, final URI uri)", "testcase": false, "constructor": false}, {"identifier": "isLoaded", "parameters": "(final URI uri)", "modifiers": "public", "return": "boolean", "signature": "boolean isLoaded(final URI uri)", "full_signature": "public boolean isLoaded(final URI uri)", "class_method_signature": "JVoiceXmlApplication.isLoaded(final URI uri)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "JVoiceXmlApplication.toString()", "testcase": false, "constructor": false}, {"identifier": "setLastResult", "parameters": "(final List<LastResult> result)", "modifiers": "@Override public", "return": "void", "signature": "void setLastResult(final List<LastResult> result)", "full_signature": "@Override public void setLastResult(final List<LastResult> result)", "class_method_signature": "JVoiceXmlApplication.setLastResult(final List<LastResult> result)", "testcase": false, "constructor": false}, {"identifier": "getLastResult", "parameters": "()", "modifiers": "@Override public", "return": "List<LastResult>", "signature": "List<LastResult> getLastResult()", "full_signature": "@Override public List<LastResult> getLastResult()", "class_method_signature": "JVoiceXmlApplication.getLastResult()", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/interpreter/JVoiceXmlApplication.java"}, "focal_method": {"identifier": "addDocument", "parameters": "(final URI uri, final VoiceXmlDocument doc)", "modifiers": "public", "return": "void", "body": "public void addDocument(final URI uri, final VoiceXmlDocument doc)\n        throws BadFetchError {\n        if (uri == null) {\n            LOGGER.warn(\"no URI specified\");\n            return;\n        }\n\n        if (doc == null) {\n            LOGGER.warn(\"cannot add a null document to application\");\n            return;\n        }\n\n        final Vxml vxml = doc.getVxml();\n        if (vxml == null) {\n            LOGGER.warn(\"Is this a VoiceXML document? No vxml tag found\");\n            return;\n        }\n        try {\n            baseUri = vxml.getXmlBaseUri();\n            if (baseUri == null) {\n                baseUri = uri;\n            }\n            final URI currentApplication = vxml.getApplicationUri();\n            if (currentApplication == null) {\n                loadedDocuments.clear();\n                root = null;\n            }\n\n            if (application == null) {\n                application = currentApplication;\n            } else if (!application.equals(currentApplication)) {\n                application = baseUri;\n                loadedDocuments.clear();\n                root = null;\n            }\n        } catch (URISyntaxException e) {\n            throw new BadFetchError(\n                    \"Error adding the document to the application\", e);\n        }\n\n        current = doc;\n        final URI resolved = resolve(uri);\n        final URI fragmentLess = removeFragment(resolved);\n        loadedDocuments.put(fragmentLess, current);\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"loaded documents:\");\n            final Collection<URI> keys = loadedDocuments.keySet();\n            for (URI loadedUri : keys) {\n                LOGGER.debug(\"- \" + loadedUri);\n            }\n        }\n    }", "signature": "void addDocument(final URI uri, final VoiceXmlDocument doc)", "full_signature": "public void addDocument(final URI uri, final VoiceXmlDocument doc)", "class_method_signature": "JVoiceXmlApplication.addDocument(final URI uri, final VoiceXmlDocument doc)", "testcase": false, "constructor": false, "invocations": ["warn", "warn", "getVxml", "warn", "getXmlBaseUri", "getApplicationUri", "clear", "equals", "clear", "resolve", "removeFragment", "put", "isDebugEnabled", "debug", "keySet", "debug"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}