{"test_class": {"identifier": "JavaFileAnalyzer2Test", "superclass": "", "interfaces": "", "fields": [], "file": "lang-java/src/test/java/org/eclipse/steady/java/JavaFileAnalyzer2Test.java"}, "test_case": {"identifier": "testClassWithoutPackage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testClassWithoutPackage() {\n    try {\n      final JavaFileAnalyzer2 jfa =\n          (JavaFileAnalyzer2)\n              FileAnalyzerFactory.buildFileAnalyzer(\n                  new File(\"./src/test/java/ClassWithoutPackage.java\"));\n      final Map<ConstructId, Construct> constructs_from_java = jfa.getConstructs();\n\n      final ClassFileAnalyzer cfa =\n          (ClassFileAnalyzer)\n              FileAnalyzerFactory.buildFileAnalyzer(\n                  new File(\"./target/test-classes/ClassWithoutPackage.class\"));\n      final Map<ConstructId, Construct> constructs_from_class = cfa.getConstructs();\n\n      // The parsing should produce the following 3 elements:\n      final JavaClassId cl = JavaId.parseClassQName(\"ClassWithoutPackage\");\n      final JavaConstructorId co = JavaId.parseConstructorQName(\"ClassWithoutPackage()\");\n      final JavaMethodId m = JavaId.parseMethodQName(\"ClassWithoutPackage.foo()\");\n\n      // Assertions\n      assertEquals(3, constructs_from_java.size());\n      assertTrue(constructs_from_java.containsKey(cl));\n      assertTrue(constructs_from_java.containsKey(co));\n      assertTrue(constructs_from_java.containsKey(m));\n\n      assertEquals(3, constructs_from_class.size());\n      assertTrue(constructs_from_class.containsKey(cl));\n      assertTrue(constructs_from_java.containsKey(co));\n      assertTrue(constructs_from_class.containsKey(m));\n    } catch (FileAnalysisException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }", "signature": "void testClassWithoutPackage()", "full_signature": "@Test public void testClassWithoutPackage()", "class_method_signature": "JavaFileAnalyzer2Test.testClassWithoutPackage()", "testcase": true, "constructor": false, "invocations": ["buildFileAnalyzer", "getConstructs", "buildFileAnalyzer", "getConstructs", "parseClassQName", "parseConstructorQName", "parseMethodQName", "assertEquals", "size", "assertTrue", "containsKey", "assertTrue", "containsKey", "assertTrue", "containsKey", "assertEquals", "size", "assertTrue", "containsKey", "assertTrue", "containsKey", "assertTrue", "containsKey", "printStackTrace", "assertTrue"]}, "focal_class": {"identifier": "JavaFileAnalyzer2", "superclass": "extends JavaParserBaseListener", "interfaces": "implements FileAnalyzer", "fields": [{"original_string": "private static final Logger log = org.apache.logging.log4j.LogManager.getLogger();", "modifier": "private static final", "type": "Logger", "declarator": "log = org.apache.logging.log4j.LogManager.getLogger()", "var_name": "log"}, {"original_string": "private Map<ConstructId, Construct> constructs = null;", "modifier": "private", "type": "Map<ConstructId, Construct>", "declarator": "constructs = null", "var_name": "constructs"}, {"original_string": "private ANTLRInputStream input = null;", "modifier": "private", "type": "ANTLRInputStream", "declarator": "input = null", "var_name": "input"}, {"original_string": "private File file = null;", "modifier": "private", "type": "File", "declarator": "file = null", "var_name": "file"}, {"original_string": "private final ContextStack contextStack = new ContextStack();", "modifier": "private final", "type": "ContextStack", "declarator": "contextStack = new ContextStack()", "var_name": "contextStack"}, {"original_string": "private final ConstructIdBuilder constructIdBuilder = new ConstructIdBuilder();", "modifier": "private final", "type": "ConstructIdBuilder", "declarator": "constructIdBuilder = new ConstructIdBuilder()", "var_name": "constructIdBuilder"}], "methods": [{"identifier": "getSupportedFileExtensions", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getSupportedFileExtensions()", "full_signature": "@Override public String[] getSupportedFileExtensions()", "class_method_signature": "JavaFileAnalyzer2.getSupportedFileExtensions()", "testcase": false, "constructor": false}, {"identifier": "canAnalyze", "parameters": "(File _file)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canAnalyze(File _file)", "full_signature": "@Override public boolean canAnalyze(File _file)", "class_method_signature": "JavaFileAnalyzer2.canAnalyze(File _file)", "testcase": false, "constructor": false}, {"identifier": "analyze", "parameters": "(final File _file)", "modifiers": "@Override public", "return": "void", "signature": "void analyze(final File _file)", "full_signature": "@Override public void analyze(final File _file)", "class_method_signature": "JavaFileAnalyzer2.analyze(final File _file)", "testcase": false, "constructor": false}, {"identifier": "setFile", "parameters": "(File _file)", "modifiers": "public", "return": "void", "signature": "void setFile(File _file)", "full_signature": "public void setFile(File _file)", "class_method_signature": "JavaFileAnalyzer2.setFile(File _file)", "testcase": false, "constructor": false}, {"identifier": "saveConstruct", "parameters": "(ConstructId _id, String _body)", "modifiers": "private", "return": "void", "signature": "void saveConstruct(ConstructId _id, String _body)", "full_signature": "private void saveConstruct(ConstructId _id, String _body)", "class_method_signature": "JavaFileAnalyzer2.saveConstruct(ConstructId _id, String _body)", "testcase": false, "constructor": false}, {"identifier": "enterPackageDeclaration", "parameters": "(@NotNull JavaParser.PackageDeclarationContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void enterPackageDeclaration(@NotNull JavaParser.PackageDeclarationContext ctx)", "full_signature": "@Override public void enterPackageDeclaration(@NotNull JavaParser.PackageDeclarationContext ctx)", "class_method_signature": "JavaFileAnalyzer2.enterPackageDeclaration(@NotNull JavaParser.PackageDeclarationContext ctx)", "testcase": false, "constructor": false}, {"identifier": "enterEnumDeclaration", "parameters": "(@NotNull JavaParser.EnumDeclarationContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void enterEnumDeclaration(@NotNull JavaParser.EnumDeclarationContext ctx)", "full_signature": "@Override public void enterEnumDeclaration(@NotNull JavaParser.EnumDeclarationContext ctx)", "class_method_signature": "JavaFileAnalyzer2.enterEnumDeclaration(@NotNull JavaParser.EnumDeclarationContext ctx)", "testcase": false, "constructor": false}, {"identifier": "exitEnumDeclaration", "parameters": "(@NotNull JavaParser.EnumDeclarationContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void exitEnumDeclaration(@NotNull JavaParser.EnumDeclarationContext ctx)", "full_signature": "@Override public void exitEnumDeclaration(@NotNull JavaParser.EnumDeclarationContext ctx)", "class_method_signature": "JavaFileAnalyzer2.exitEnumDeclaration(@NotNull JavaParser.EnumDeclarationContext ctx)", "testcase": false, "constructor": false}, {"identifier": "enterInterfaceDeclaration", "parameters": "(@NotNull JavaParser.InterfaceDeclarationContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void enterInterfaceDeclaration(@NotNull JavaParser.InterfaceDeclarationContext ctx)", "full_signature": "@Override public void enterInterfaceDeclaration(@NotNull JavaParser.InterfaceDeclarationContext ctx)", "class_method_signature": "JavaFileAnalyzer2.enterInterfaceDeclaration(@NotNull JavaParser.InterfaceDeclarationContext ctx)", "testcase": false, "constructor": false}, {"identifier": "exitInterfaceDeclaration", "parameters": "(@NotNull JavaParser.InterfaceDeclarationContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void exitInterfaceDeclaration(@NotNull JavaParser.InterfaceDeclarationContext ctx)", "full_signature": "@Override public void exitInterfaceDeclaration(@NotNull JavaParser.InterfaceDeclarationContext ctx)", "class_method_signature": "JavaFileAnalyzer2.exitInterfaceDeclaration(@NotNull JavaParser.InterfaceDeclarationContext ctx)", "testcase": false, "constructor": false}, {"identifier": "enterClassDeclaration", "parameters": "(@NotNull JavaParser.ClassDeclarationContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void enterClassDeclaration(@NotNull JavaParser.ClassDeclarationContext ctx)", "full_signature": "@Override public void enterClassDeclaration(@NotNull JavaParser.ClassDeclarationContext ctx)", "class_method_signature": "JavaFileAnalyzer2.enterClassDeclaration(@NotNull JavaParser.ClassDeclarationContext ctx)", "testcase": false, "constructor": false}, {"identifier": "exitClassDeclaration", "parameters": "(@NotNull JavaParser.ClassDeclarationContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void exitClassDeclaration(@NotNull JavaParser.ClassDeclarationContext ctx)", "full_signature": "@Override public void exitClassDeclaration(@NotNull JavaParser.ClassDeclarationContext ctx)", "class_method_signature": "JavaFileAnalyzer2.exitClassDeclaration(@NotNull JavaParser.ClassDeclarationContext ctx)", "testcase": false, "constructor": false}, {"identifier": "enterClassBody", "parameters": "(@NotNull JavaParser.ClassBodyContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void enterClassBody(@NotNull JavaParser.ClassBodyContext ctx)", "full_signature": "@Override public void enterClassBody(@NotNull JavaParser.ClassBodyContext ctx)", "class_method_signature": "JavaFileAnalyzer2.enterClassBody(@NotNull JavaParser.ClassBodyContext ctx)", "testcase": false, "constructor": false}, {"identifier": "exitClassBody", "parameters": "(@NotNull JavaParser.ClassBodyContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void exitClassBody(@NotNull JavaParser.ClassBodyContext ctx)", "full_signature": "@Override public void exitClassBody(@NotNull JavaParser.ClassBodyContext ctx)", "class_method_signature": "JavaFileAnalyzer2.exitClassBody(@NotNull JavaParser.ClassBodyContext ctx)", "testcase": false, "constructor": false}, {"identifier": "enterMethodDeclaration", "parameters": "(@NotNull JavaParser.MethodDeclarationContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void enterMethodDeclaration(@NotNull JavaParser.MethodDeclarationContext ctx)", "full_signature": "@Override public void enterMethodDeclaration(@NotNull JavaParser.MethodDeclarationContext ctx)", "class_method_signature": "JavaFileAnalyzer2.enterMethodDeclaration(@NotNull JavaParser.MethodDeclarationContext ctx)", "testcase": false, "constructor": false}, {"identifier": "exitMethodDeclaration", "parameters": "(\n      org.eclipse.steady.java.antlr.JavaParser.MethodDeclarationContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void exitMethodDeclaration(\n      org.eclipse.steady.java.antlr.JavaParser.MethodDeclarationContext ctx)", "full_signature": "@Override public void exitMethodDeclaration(\n      org.eclipse.steady.java.antlr.JavaParser.MethodDeclarationContext ctx)", "class_method_signature": "JavaFileAnalyzer2.exitMethodDeclaration(\n      org.eclipse.steady.java.antlr.JavaParser.MethodDeclarationContext ctx)", "testcase": false, "constructor": false}, {"identifier": "enterConstructorDeclaration", "parameters": "(@NotNull JavaParser.ConstructorDeclarationContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void enterConstructorDeclaration(@NotNull JavaParser.ConstructorDeclarationContext ctx)", "full_signature": "@Override public void enterConstructorDeclaration(@NotNull JavaParser.ConstructorDeclarationContext ctx)", "class_method_signature": "JavaFileAnalyzer2.enterConstructorDeclaration(@NotNull JavaParser.ConstructorDeclarationContext ctx)", "testcase": false, "constructor": false}, {"identifier": "exitConstructorDeclaration", "parameters": "(\n      org.eclipse.steady.java.antlr.JavaParser.ConstructorDeclarationContext ctx)", "modifiers": "@Override public", "return": "void", "signature": "void exitConstructorDeclaration(\n      org.eclipse.steady.java.antlr.JavaParser.ConstructorDeclarationContext ctx)", "full_signature": "@Override public void exitConstructorDeclaration(\n      org.eclipse.steady.java.antlr.JavaParser.ConstructorDeclarationContext ctx)", "class_method_signature": "JavaFileAnalyzer2.exitConstructorDeclaration(\n      org.eclipse.steady.java.antlr.JavaParser.ConstructorDeclarationContext ctx)", "testcase": false, "constructor": false}, {"identifier": "getConstructContent", "parameters": "(ParserRuleContext ctx)", "modifiers": "private final", "return": "String", "signature": "String getConstructContent(ParserRuleContext ctx)", "full_signature": "private final String getConstructContent(ParserRuleContext ctx)", "class_method_signature": "JavaFileAnalyzer2.getConstructContent(ParserRuleContext ctx)", "testcase": false, "constructor": false}, {"identifier": "isOfExpectedType", "parameters": "(JavaId _jid, JavaId.Type[] _types, boolean _throw_exception)", "modifiers": "private", "return": "boolean", "signature": "boolean isOfExpectedType(JavaId _jid, JavaId.Type[] _types, boolean _throw_exception)", "full_signature": "private boolean isOfExpectedType(JavaId _jid, JavaId.Type[] _types, boolean _throw_exception)", "class_method_signature": "JavaFileAnalyzer2.isOfExpectedType(JavaId _jid, JavaId.Type[] _types, boolean _throw_exception)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "(JavaParser.FormalParameterListContext _ctx)", "modifiers": "private", "return": "List<String>", "signature": "List<String> getParameters(JavaParser.FormalParameterListContext _ctx)", "full_signature": "private List<String> getParameters(JavaParser.FormalParameterListContext _ctx)", "class_method_signature": "JavaFileAnalyzer2.getParameters(JavaParser.FormalParameterListContext _ctx)", "testcase": false, "constructor": false}, {"identifier": "getConstructs", "parameters": "()", "modifiers": "@Override public", "return": "Map<ConstructId, Construct>", "signature": "Map<ConstructId, Construct> getConstructs()", "full_signature": "@Override public Map<ConstructId, Construct> getConstructs()", "class_method_signature": "JavaFileAnalyzer2.getConstructs()", "testcase": false, "constructor": false}, {"identifier": "containsConstruct", "parameters": "(ConstructId _id)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean containsConstruct(ConstructId _id)", "full_signature": "@Override public boolean containsConstruct(ConstructId _id)", "class_method_signature": "JavaFileAnalyzer2.containsConstruct(ConstructId _id)", "testcase": false, "constructor": false}, {"identifier": "getConstruct", "parameters": "(ConstructId _id)", "modifiers": "@Override public", "return": "Construct", "signature": "Construct getConstruct(ConstructId _id)", "full_signature": "@Override public Construct getConstruct(ConstructId _id)", "class_method_signature": "JavaFileAnalyzer2.getConstruct(ConstructId _id)", "testcase": false, "constructor": false}, {"identifier": "hasChilds", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasChilds()", "full_signature": "@Override public boolean hasChilds()", "class_method_signature": "JavaFileAnalyzer2.hasChilds()", "testcase": false, "constructor": false}, {"identifier": "getChilds", "parameters": "(boolean _recursive)", "modifiers": "@Override public", "return": "Set<FileAnalyzer>", "signature": "Set<FileAnalyzer> getChilds(boolean _recursive)", "full_signature": "@Override public Set<FileAnalyzer> getChilds(boolean _recursive)", "class_method_signature": "JavaFileAnalyzer2.getChilds(boolean _recursive)", "testcase": false, "constructor": false}, {"identifier": "indent", "parameters": "(int _i)", "modifiers": "private final", "return": "String", "signature": "String indent(int _i)", "full_signature": "private final String indent(int _i)", "class_method_signature": "JavaFileAnalyzer2.indent(int _i)", "testcase": false, "constructor": false}, {"identifier": "printDeclarationStack", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String printDeclarationStack()", "full_signature": "private String printDeclarationStack()", "class_method_signature": "JavaFileAnalyzer2.printDeclarationStack()", "testcase": false, "constructor": false}], "file": "lang-java/src/main/java/org/eclipse/steady/java/JavaFileAnalyzer2.java"}, "focal_method": {"identifier": "getConstructs", "parameters": "()", "modifiers": "@Override public", "return": "Map<ConstructId, Construct>", "body": "@Override\n  public Map<ConstructId, Construct> getConstructs() throws FileAnalysisException {\n    if (this.constructs == null) {\n      try {\n        this.constructs = new TreeMap<ConstructId, Construct>();\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try (final InputStream is2 = new BufferedInputStream(new FileInputStream(this.file))) {\n          int cc = -1;\n          while ((cc = is2.read()) >= 0) baos.write(cc);\n        }\n        baos.flush();\n        this.input = new ANTLRInputStream(new ByteArrayInputStream(baos.toByteArray()));\n        JavaLexer lexer = new JavaLexer(input);\n        CommonTokenStream tokens = new CommonTokenStream(lexer);\n        JavaParser parser = new JavaParser(tokens);\n        CompilationUnitContext ctx = parser.compilationUnit();\n        ParseTreeWalker walker = new ParseTreeWalker();\n        walker.walk(this, ctx);\n      } catch (FileNotFoundException e) {\n        throw new FileAnalysisException(e.getMessage(), e);\n      } catch (RecognitionException e) {\n        throw new FileAnalysisException(\n            \"ANTLR exception while analysing class file [\"\n                + this.file.getName()\n                + \"]: \"\n                + e.getMessage(),\n            e);\n      } catch (IOException e) {\n        throw new FileAnalysisException(\n            \"I/O exception while analysing class file [\"\n                + this.file.getName()\n                + \"]: \"\n                + e.getMessage(),\n            e);\n      } catch (Exception e) {\n        throw new FileAnalysisException(\n            \"Exception of type [\"\n                + e.getClass().getSimpleName()\n                + \"] while analyzing file [\"\n                + this.file.toPath().toAbsolutePath()\n                + \"]: \"\n                + e.getMessage(),\n            e);\n      }\n    }\n    return this.constructs;\n  }", "signature": "Map<ConstructId, Construct> getConstructs()", "full_signature": "@Override public Map<ConstructId, Construct> getConstructs()", "class_method_signature": "JavaFileAnalyzer2.getConstructs()", "testcase": false, "constructor": false, "invocations": ["read", "write", "flush", "toByteArray", "compilationUnit", "walk", "getMessage", "getName", "getMessage", "getName", "getMessage", "getSimpleName", "getClass", "toAbsolutePath", "toPath", "getMessage"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}