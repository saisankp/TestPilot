{"test_class": {"identifier": "CVCControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "CVCController controller;", "modifier": "", "type": "CVCController", "declarator": "controller", "var_name": "controller"}, {"original_string": "PermissionDataHandlingMBean data;", "modifier": "", "type": "PermissionDataHandlingMBean", "declarator": "data", "var_name": "data"}, {"original_string": "MetadataService metadataService;", "modifier": "", "type": "MetadataService", "declarator": "metadataService", "var_name": "metadataService"}, {"original_string": "CvcTlsCheck cvcTlsCheck;", "modifier": "", "type": "CvcTlsCheck", "declarator": "cvcTlsCheck", "var_name": "cvcTlsCheck"}], "file": "poseidas/src/test/java/de/governikus/eumw/poseidas/server/pki/controller/CVCControllerTest.java"}, "test_case": {"identifier": "downloadMetadataReturnsMetadataAsXMLFile", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void downloadMetadataReturnsMetadataAsXMLFile() throws Exception\n  {\n    InputStream resourceAsStream = CVCControllerTest.class.getResourceAsStream(\"/Metadata.xml\");\n    Mockito.when(metadataService.getMetadata()).thenReturn(ByteStreams.toByteArray(resourceAsStream));\n    ResponseEntity<byte[]> responseEntity = controller.downloadMetadata();\n\n    HttpStatus statusCode = responseEntity.getStatusCode();\n    Assertions.assertEquals(HttpStatus.OK, statusCode);\n    HttpHeaders headers = responseEntity.getHeaders();\n    ContentDisposition contentDisposition = headers.getContentDisposition();\n    Assertions.assertEquals(\"attachment\", contentDisposition.getType());\n    Assertions.assertEquals(\"Metadata.xml\", contentDisposition.getFilename());\n    Assertions.assertEquals(MediaType.APPLICATION_OCTET_STREAM, headers.getContentType());\n    byte[] body = responseEntity.getBody();\n    Assertions.assertFalse(ArrayUtil.isNullOrEmpty(body));\n  }", "signature": "void downloadMetadataReturnsMetadataAsXMLFile()", "full_signature": "@Test void downloadMetadataReturnsMetadataAsXMLFile()", "class_method_signature": "CVCControllerTest.downloadMetadataReturnsMetadataAsXMLFile()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "thenReturn", "when", "getMetadata", "toByteArray", "downloadMetadata", "getStatusCode", "assertEquals", "getHeaders", "getContentDisposition", "assertEquals", "getType", "assertEquals", "getFilename", "assertEquals", "getContentType", "getBody", "assertFalse", "isNullOrEmpty"]}, "focal_class": {"identifier": "CVCController", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CO_MSG_OK_OK = \"CO.msg.ok.ok\";", "modifier": "private static final", "type": "String", "declarator": "CO_MSG_OK_OK = \"CO.msg.ok.ok\"", "var_name": "CO_MSG_OK_OK"}, {"original_string": "private final Map<String, CVCInfoBean> cvcList;", "modifier": "private final", "type": "Map<String, CVCInfoBean>", "declarator": "cvcList", "var_name": "cvcList"}, {"original_string": "private final MetadataService metadataService;", "modifier": "private final", "type": "MetadataService", "declarator": "metadataService", "var_name": "metadataService"}, {"original_string": "private final CvcTlsCheck cvcTlsCheck;", "modifier": "private final", "type": "CvcTlsCheck", "declarator": "cvcTlsCheck", "var_name": "cvcTlsCheck"}], "methods": [{"identifier": "CVCController", "parameters": "(PermissionDataHandlingMBean data,\n                       MetadataService metadataService,\n                       CvcTlsCheck cvcTlsCheck)", "modifiers": "public", "return": "", "signature": " CVCController(PermissionDataHandlingMBean data,\n                       MetadataService metadataService,\n                       CvcTlsCheck cvcTlsCheck)", "full_signature": "public  CVCController(PermissionDataHandlingMBean data,\n                       MetadataService metadataService,\n                       CvcTlsCheck cvcTlsCheck)", "class_method_signature": "CVCController.CVCController(PermissionDataHandlingMBean data,\n                       MetadataService metadataService,\n                       CvcTlsCheck cvcTlsCheck)", "testcase": false, "constructor": true}, {"identifier": "index", "parameters": "(HttpServletResponse response)", "modifiers": "@GetMapping(\"\") public", "return": "void", "signature": "void index(HttpServletResponse response)", "full_signature": "@GetMapping(\"\") public void index(HttpServletResponse response)", "class_method_signature": "CVCController.index(HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "login", "parameters": "()", "modifiers": "@GetMapping(\"login\") public", "return": "String", "signature": "String login()", "full_signature": "@GetMapping(\"login\") public String login()", "class_method_signature": "CVCController.login()", "testcase": false, "constructor": false}, {"identifier": "list", "parameters": "(Model model)", "modifiers": "@GetMapping(\"list\") public", "return": "String", "signature": "String list(Model model)", "full_signature": "@GetMapping(\"list\") public String list(Model model)", "class_method_signature": "CVCController.list(Model model)", "testcase": false, "constructor": false}, {"identifier": "getMailto", "parameters": "(Map.Entry<String, CvcTlsCheck.CvcCheckResults> entry)", "modifiers": "public", "return": "String", "signature": "String getMailto(Map.Entry<String, CvcTlsCheck.CvcCheckResults> entry)", "full_signature": "public String getMailto(Map.Entry<String, CvcTlsCheck.CvcCheckResults> entry)", "class_method_signature": "CVCController.getMailto(Map.Entry<String, CvcTlsCheck.CvcCheckResults> entry)", "testcase": false, "constructor": false}, {"identifier": "encodeURIComponent", "parameters": "(String component)", "modifiers": "private", "return": "String", "signature": "String encodeURIComponent(String component)", "full_signature": "private String encodeURIComponent(String component)", "class_method_signature": "CVCController.encodeURIComponent(String component)", "testcase": false, "constructor": false}, {"identifier": "status", "parameters": "(Model model)", "modifiers": "@GetMapping(\"status\") public", "return": "String", "signature": "String status(Model model)", "full_signature": "@GetMapping(\"status\") public String status(Model model)", "class_method_signature": "CVCController.status(Model model)", "testcase": false, "constructor": false}, {"identifier": "details", "parameters": "(@PathVariable String entityID, Model model, HttpServletResponse response)", "modifiers": "@GetMapping(\"details/{entityID}\") public", "return": "String", "signature": "String details(@PathVariable String entityID, Model model, HttpServletResponse response)", "full_signature": "@GetMapping(\"details/{entityID}\") public String details(@PathVariable String entityID, Model model, HttpServletResponse response)", "class_method_signature": "CVCController.details(@PathVariable String entityID, Model model, HttpServletResponse response)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(@PathVariable String entityID, Model model)", "modifiers": "@PostMapping(\"details/{entityID}/check\") public", "return": "String", "signature": "String check(@PathVariable String entityID, Model model)", "full_signature": "@PostMapping(\"details/{entityID}/check\") public String check(@PathVariable String entityID, Model model)", "class_method_signature": "CVCController.check(@PathVariable String entityID, Model model)", "testcase": false, "constructor": false}, {"identifier": "initialRequest", "parameters": "(@PathVariable String entityID,\n                               Model model,\n                               @ModelAttribute CVCRequestModel form)", "modifiers": "@PostMapping(\"details/{entityID}/initialRequest\") public", "return": "String", "signature": "String initialRequest(@PathVariable String entityID,\n                               Model model,\n                               @ModelAttribute CVCRequestModel form)", "full_signature": "@PostMapping(\"details/{entityID}/initialRequest\") public String initialRequest(@PathVariable String entityID,\n                               Model model,\n                               @ModelAttribute CVCRequestModel form)", "class_method_signature": "CVCController.initialRequest(@PathVariable String entityID,\n                               Model model,\n                               @ModelAttribute CVCRequestModel form)", "testcase": false, "constructor": false}, {"identifier": "renewBlackList", "parameters": "(@PathVariable String entityID, Model model)", "modifiers": "@PostMapping(\"details/{entityID}/renewBlackList\") public", "return": "String", "signature": "String renewBlackList(@PathVariable String entityID, Model model)", "full_signature": "@PostMapping(\"details/{entityID}/renewBlackList\") public String renewBlackList(@PathVariable String entityID, Model model)", "class_method_signature": "CVCController.renewBlackList(@PathVariable String entityID, Model model)", "testcase": false, "constructor": false}, {"identifier": "renewMasterDefectList", "parameters": "(@PathVariable String entityID, Model model)", "modifiers": "@PostMapping(\"details/{entityID}/renewMasterDefectList\") public", "return": "String", "signature": "String renewMasterDefectList(@PathVariable String entityID, Model model)", "full_signature": "@PostMapping(\"details/{entityID}/renewMasterDefectList\") public String renewMasterDefectList(@PathVariable String entityID, Model model)", "class_method_signature": "CVCController.renewMasterDefectList(@PathVariable String entityID, Model model)", "testcase": false, "constructor": false}, {"identifier": "renewCVC", "parameters": "(@PathVariable String entityID, Model model)", "modifiers": "@PostMapping(\"/details/{entityID}/renewCVC\") public", "return": "String", "signature": "String renewCVC(@PathVariable String entityID, Model model)", "full_signature": "@PostMapping(\"/details/{entityID}/renewCVC\") public String renewCVC(@PathVariable String entityID, Model model)", "class_method_signature": "CVCController.renewCVC(@PathVariable String entityID, Model model)", "testcase": false, "constructor": false}, {"identifier": "downloadMetadata", "parameters": "()", "modifiers": "@GetMapping(value = \"/download\", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE) public", "return": "ResponseEntity<byte[]>", "signature": "ResponseEntity<byte[]> downloadMetadata()", "full_signature": "@GetMapping(value = \"/download\", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE) public ResponseEntity<byte[]> downloadMetadata()", "class_method_signature": "CVCController.downloadMetadata()", "testcase": false, "constructor": false}, {"identifier": "handleMetadataDownloadException", "parameters": "(Model model)", "modifiers": "@ExceptionHandler(MetadataDownloadException.class) public", "return": "String", "signature": "String handleMetadataDownloadException(Model model)", "full_signature": "@ExceptionHandler(MetadataDownloadException.class) public String handleMetadataDownloadException(Model model)", "class_method_signature": "CVCController.handleMetadataDownloadException(Model model)", "testcase": false, "constructor": false}], "file": "poseidas/src/main/java/de/governikus/eumw/poseidas/server/pki/controller/CVCController.java"}, "focal_method": {"identifier": "downloadMetadata", "parameters": "()", "modifiers": "@GetMapping(value = \"/download\", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE) public", "return": "ResponseEntity<byte[]>", "body": "@GetMapping(value = \"/download\", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)\n  public ResponseEntity<byte[]> downloadMetadata() throws MetadataDownloadException\n  {\n    byte[] metadataArray = metadataService.getMetadata();\n    if (metadataArray.length != 0)\n    {\n      return ResponseEntity.ok()\n                           .header(\"Content-Disposition\", \"attachment; filename=Metadata.xml\")\n                           .contentType(MediaType.APPLICATION_OCTET_STREAM)\n                           .body(metadataArray);\n    }\n    log.error(\"No Metadata were created. Can not download metadata.\");\n    throw new MetadataDownloadException();\n  }", "signature": "ResponseEntity<byte[]> downloadMetadata()", "full_signature": "@GetMapping(value = \"/download\", produces = MediaType.APPLICATION_OCTET_STREAM_VALUE) public ResponseEntity<byte[]> downloadMetadata()", "class_method_signature": "CVCController.downloadMetadata()", "testcase": false, "constructor": false, "invocations": ["getMetadata", "body", "contentType", "header", "ok", "error"]}, "repository": {"repo_id": 133799133, "url": "https://github.com/Governikus/eidas-middleware", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 15, "size": 2286, "license": "licensed"}}