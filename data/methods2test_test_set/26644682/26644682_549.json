{"test_class": {"identifier": "XlsUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "dataprep-backend-service/src/test/java/org/talend/dataprep/schema/xls/XlsUtilsTest.java"}, "test_case": {"identifier": "col_number_from_cell_ref", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void col_number_from_cell_ref() throws Exception {\n        Assertions.assertThat(XlsUtils.getColumnNumberFromCellRef(\"A5\")).isEqualTo(0);\n        Assertions.assertThat(XlsUtils.getColumnNumberFromCellRef(\"D5\")).isEqualTo(3);\n        Assertions.assertThat(XlsUtils.getColumnNumberFromCellRef(\"A15\")).isEqualTo(0);\n        Assertions.assertThat(XlsUtils.getColumnNumberFromCellRef(\"AG142\")).isEqualTo(32);\n        Assertions.assertThat(XlsUtils.getColumnNumberFromCellRef(\"BB11\")).isEqualTo(53);\n    }", "signature": "void col_number_from_cell_ref()", "full_signature": "@Test public void col_number_from_cell_ref()", "class_method_signature": "XlsUtilsTest.col_number_from_cell_ref()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "getColumnNumberFromCellRef", "isEqualTo", "assertThat", "getColumnNumberFromCellRef", "isEqualTo", "assertThat", "getColumnNumberFromCellRef", "isEqualTo", "assertThat", "getColumnNumberFromCellRef", "isEqualTo", "assertThat", "getColumnNumberFromCellRef"]}, "focal_class": {"identifier": "XlsUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(XlsUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(XlsUtils.class)", "var_name": "LOGGER"}, {"original_string": "private static final XMLInputFactory XML_INPUT_FACTORY = XMLInputSingletonHolder.xmlInputFactory;", "modifier": "private static final", "type": "XMLInputFactory", "declarator": "XML_INPUT_FACTORY = XMLInputSingletonHolder.xmlInputFactory", "var_name": "XML_INPUT_FACTORY"}], "methods": [{"identifier": "XlsUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " XlsUtils()", "full_signature": "private  XlsUtils()", "class_method_signature": "XlsUtils.XlsUtils()", "testcase": false, "constructor": true}, {"identifier": "getCellValueAsString", "parameters": "(Cell cell, FormulaEvaluator formulaEvaluator)", "modifiers": "public static", "return": "String", "signature": "String getCellValueAsString(Cell cell, FormulaEvaluator formulaEvaluator)", "full_signature": "public static String getCellValueAsString(Cell cell, FormulaEvaluator formulaEvaluator)", "class_method_signature": "XlsUtils.getCellValueAsString(Cell cell, FormulaEvaluator formulaEvaluator)", "testcase": false, "constructor": false}, {"identifier": "getCellValueAsString", "parameters": "(Cell cell, CellValue cellValue)", "modifiers": "private static", "return": "String", "signature": "String getCellValueAsString(Cell cell, CellValue cellValue)", "full_signature": "private static String getCellValueAsString(Cell cell, CellValue cellValue)", "class_method_signature": "XlsUtils.getCellValueAsString(Cell cell, CellValue cellValue)", "testcase": false, "constructor": false}, {"identifier": "getNumericValue", "parameters": "(Cell cell, CellValue cellValue, boolean fromFormula)", "modifiers": "private static", "return": "String", "signature": "String getNumericValue(Cell cell, CellValue cellValue, boolean fromFormula)", "full_signature": "private static String getNumericValue(Cell cell, CellValue cellValue, boolean fromFormula)", "class_method_signature": "XlsUtils.getNumericValue(Cell cell, CellValue cellValue, boolean fromFormula)", "testcase": false, "constructor": false}, {"identifier": "isNewExcelFormat", "parameters": "(InputStream inputStream)", "modifiers": "public static", "return": "boolean", "signature": "boolean isNewExcelFormat(InputStream inputStream)", "full_signature": "public static boolean isNewExcelFormat(InputStream inputStream)", "class_method_signature": "XlsUtils.isNewExcelFormat(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "getActiveSheetsFromWorkbookSpec", "parameters": "(InputStream inputStream)", "modifiers": "public static", "return": "List<String>", "signature": "List<String> getActiveSheetsFromWorkbookSpec(InputStream inputStream)", "full_signature": "public static List<String> getActiveSheetsFromWorkbookSpec(InputStream inputStream)", "class_method_signature": "XlsUtils.getActiveSheetsFromWorkbookSpec(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "getColumnsNumber", "parameters": "(InputStream inputStream)", "modifiers": "public static", "return": "int", "signature": "int getColumnsNumber(InputStream inputStream)", "full_signature": "public static int getColumnsNumber(InputStream inputStream)", "class_method_signature": "XlsUtils.getColumnsNumber(InputStream inputStream)", "testcase": false, "constructor": false}, {"identifier": "getAttributesNameValue", "parameters": "(XMLStreamReader streamReader)", "modifiers": "private static", "return": "Map<String, String>", "signature": "Map<String, String> getAttributesNameValue(XMLStreamReader streamReader)", "full_signature": "private static Map<String, String> getAttributesNameValue(XMLStreamReader streamReader)", "class_method_signature": "XlsUtils.getAttributesNameValue(XMLStreamReader streamReader)", "testcase": false, "constructor": false}, {"identifier": "getColumnsNumberFromDimension", "parameters": "(String dimension)", "modifiers": "public static", "return": "int", "signature": "int getColumnsNumberFromDimension(String dimension)", "full_signature": "public static int getColumnsNumberFromDimension(String dimension)", "class_method_signature": "XlsUtils.getColumnsNumberFromDimension(String dimension)", "testcase": false, "constructor": false}, {"identifier": "getColumnNumberFromCellRef", "parameters": "(String lastCell)", "modifiers": "public static", "return": "int", "signature": "int getColumnNumberFromCellRef(String lastCell)", "full_signature": "public static int getColumnNumberFromCellRef(String lastCell)", "class_method_signature": "XlsUtils.getColumnNumberFromCellRef(String lastCell)", "testcase": false, "constructor": false}], "file": "dataprep-backend-service/src/main/java/org/talend/dataprep/schema/xls/XlsUtils.java"}, "focal_method": {"identifier": "getColumnNumberFromCellRef", "parameters": "(String lastCell)", "modifiers": "public static", "return": "int", "body": "public static int getColumnNumberFromCellRef(String lastCell) {\n\n        StringBuilder letters = new StringBuilder();\n        // get all letters to remove row number\n        StringCharacterIterator iter = new StringCharacterIterator(lastCell);\n        for (char c = iter.first(); c != StringCharacterIterator.DONE; c = iter.next()) {\n            if (!NumberUtils.isNumber(String.valueOf(c))) {\n                letters.append(c);\n            }\n        }\n        // use poi api to calculate column number from an excell column format\n        return CellReference.convertColStringToIndex(letters.toString());\n\n    }", "signature": "int getColumnNumberFromCellRef(String lastCell)", "full_signature": "public static int getColumnNumberFromCellRef(String lastCell)", "class_method_signature": "XlsUtils.getColumnNumberFromCellRef(String lastCell)", "testcase": false, "constructor": false, "invocations": ["first", "next", "isNumber", "valueOf", "append", "convertColStringToIndex", "toString"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}