{"test_class": {"identifier": "CookieHeaderProviderTest", "superclass": "", "interfaces": "", "fields": [], "file": "jaxrs-delegates/src/test/java/org/wso2/msf4j/delegates/CookieHeaderProviderTest.java"}, "test_case": {"identifier": "testFromString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFromString() throws Exception {\n        Cookie cookie = Cookie.valueOf(\"JSESSIONID=3508015E4EF0ECA8C4B761FCC4BC1718\");\n        assertEquals(cookie.getName(), \"JSESSIONID\");\n        assertEquals(cookie.getValue(), \"3508015E4EF0ECA8C4B761FCC4BC1718\");\n    }", "signature": "void testFromString()", "full_signature": "@Test public void testFromString()", "class_method_signature": "CookieHeaderProviderTest.testFromString()", "testcase": true, "constructor": false, "invocations": ["valueOf", "assertEquals", "getName", "assertEquals", "getValue"]}, "focal_class": {"identifier": "CookieHeaderProvider", "superclass": "", "interfaces": "implements RuntimeDelegate.HeaderDelegate<Cookie>", "fields": [{"original_string": "private static final String DATE_FORMAT_PATTERN = \"EEE, dd MMM yyyy HH:mm:ss zzz\";", "modifier": "private static final", "type": "String", "declarator": "DATE_FORMAT_PATTERN = \"EEE, dd MMM yyyy HH:mm:ss zzz\"", "var_name": "DATE_FORMAT_PATTERN"}, {"original_string": "private static final String GMT_TIMEZONE = \"GMT\";", "modifier": "private static final", "type": "String", "declarator": "GMT_TIMEZONE = \"GMT\"", "var_name": "GMT_TIMEZONE"}, {"original_string": "private static final String VERSION = \"Version\";", "modifier": "private static final", "type": "String", "declarator": "VERSION = \"Version\"", "var_name": "VERSION"}, {"original_string": "private static final String PATH = \"Path\";", "modifier": "private static final", "type": "String", "declarator": "PATH = \"Path\"", "var_name": "PATH"}, {"original_string": "private static final String DOMAIN = \"Domain\";", "modifier": "private static final", "type": "String", "declarator": "DOMAIN = \"Domain\"", "var_name": "DOMAIN"}, {"original_string": "private static final String SECURE = \"Secure\";", "modifier": "private static final", "type": "String", "declarator": "SECURE = \"Secure\"", "var_name": "SECURE"}, {"original_string": "private static final String EXPIRES = \"Expires\";", "modifier": "private static final", "type": "String", "declarator": "EXPIRES = \"Expires\"", "var_name": "EXPIRES"}, {"original_string": "private static final String COMMENT = \"Comment\";", "modifier": "private static final", "type": "String", "declarator": "COMMENT = \"Comment\"", "var_name": "COMMENT"}, {"original_string": "private static final String HTTP_ONLY = \"HttpOnly\";", "modifier": "private static final", "type": "String", "declarator": "HTTP_ONLY = \"HttpOnly\"", "var_name": "HTTP_ONLY"}, {"original_string": "private static final String MAX_AGE = \"MaxAge\";", "modifier": "private static final", "type": "String", "declarator": "MAX_AGE = \"MaxAge\"", "var_name": "MAX_AGE"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(CookieHeaderProvider.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(CookieHeaderProvider.class)", "var_name": "log"}, {"original_string": "private SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN, Locale.ENGLISH);", "modifier": "private", "type": "SimpleDateFormat", "declarator": "dateFormat = new SimpleDateFormat(DATE_FORMAT_PATTERN, Locale.ENGLISH)", "var_name": "dateFormat"}], "methods": [{"identifier": "fromString", "parameters": "(String cookieValue)", "modifiers": "@Override public", "return": "Cookie", "signature": "Cookie fromString(String cookieValue)", "full_signature": "@Override public Cookie fromString(String cookieValue)", "class_method_signature": "CookieHeaderProvider.fromString(String cookieValue)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Cookie cookie)", "modifiers": "@Override public", "return": "String", "signature": "String toString(Cookie cookie)", "full_signature": "@Override public String toString(Cookie cookie)", "class_method_signature": "CookieHeaderProvider.toString(Cookie cookie)", "testcase": false, "constructor": false}], "file": "jaxrs-delegates/src/main/java/org/wso2/msf4j/delegates/CookieHeaderProvider.java"}, "focal_method": {"identifier": "fromString", "parameters": "(String cookieValue)", "modifiers": "@Override public", "return": "Cookie", "body": "@Override\n    public Cookie fromString(String cookieValue) {\n        if (cookieValue == null) {\n            throw new IllegalArgumentException(\"Cookie value can not be null\");\n        }\n\n        int version = NewCookie.DEFAULT_VERSION;\n        int maxAge = NewCookie.DEFAULT_MAX_AGE;\n        String name = null;\n        String value = null;\n        String path = null;\n        String domain = null;\n        String comment = null;\n        Date expiry = null;\n        boolean secure = false;\n        boolean httpOnly = false;\n\n        String[] parts = cookieValue.split(\";\");\n        for (String part : parts) {\n            String token = part.trim();\n            if (token.startsWith(VERSION)) {\n                version = Integer.parseInt(token.substring(VERSION.length() + 1));\n            } else if (token.startsWith(PATH)) {\n                path = token.substring(PATH.length() + 1);\n            } else if (token.startsWith(DOMAIN)) {\n                domain = token.substring(DOMAIN.length() + 1);\n            } else if (token.startsWith(SECURE)) {\n                secure = Boolean.TRUE;\n            } else if (token.startsWith(HTTP_ONLY)) {\n                httpOnly = Boolean.TRUE;\n            } else if (token.startsWith(COMMENT)) {\n                comment = token.substring(COMMENT.length() + 1);\n            } else if (token.startsWith(MAX_AGE)) {\n                maxAge = Integer.parseInt(token.substring(MAX_AGE.length() + 1));\n            } else if (token.startsWith(EXPIRES)) {\n                try {\n                    //All HTTP date/time stamps MUST be represented in Greenwich Mean Time (GMT)\n                    dateFormat.setTimeZone(TimeZone.getTimeZone(GMT_TIMEZONE));\n                    expiry = dateFormat.parse(token.substring(EXPIRES.length() + 1));\n                } catch (ParseException e) {\n                    log.error(\"Error while parsing the Date value. Hence return null\", e);\n                }\n            } else {\n                int i = token.indexOf('=');\n                if (i != -1) {\n                    name = token.substring(0, i);\n                    value = i == token.length()  + 1 ? \"\" : token.substring(i + 1);\n                }\n            }\n        }\n\n        if (name == null) {\n            throw new IllegalArgumentException(\"Cookie is malformed : \" + cookieValue);\n        }\n\n        return new NewCookie(name, value, path, domain, version, comment, maxAge, expiry, secure, httpOnly);\n    }", "signature": "Cookie fromString(String cookieValue)", "full_signature": "@Override public Cookie fromString(String cookieValue)", "class_method_signature": "CookieHeaderProvider.fromString(String cookieValue)", "testcase": false, "constructor": false, "invocations": ["split", "trim", "startsWith", "parseInt", "substring", "length", "startsWith", "substring", "length", "startsWith", "substring", "length", "startsWith", "startsWith", "startsWith", "substring", "length", "startsWith", "parseInt", "substring", "length", "startsWith", "setTimeZone", "getTimeZone", "parse", "substring", "length", "error", "indexOf", "substring", "length", "substring"]}, "repository": {"repo_id": 42847560, "url": "https://github.com/wso2/msf4j", "language": "Java", "is_fork": false, "fork_count": 337, "stargazer_count": 345, "size": 33285, "license": "licensed"}}