{"test_class": {"identifier": "ScopeELResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ScopeELResolver resolver;", "modifier": "private", "type": "ScopeELResolver", "declarator": "resolver", "var_name": "resolver"}], "file": "tiles-el/src/test/java/org/apache/tiles/el/ScopeELResolverTest.java"}, "test_case": {"identifier": "testGetType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetType() {\n        Request request = createMock(Request.class);\n        ApplicationContext applicationContext = createMock(ApplicationContext.class);\n        ELContext context = new ELContextImpl(resolver);\n        replay(request, applicationContext);\n        context.putContext(Request.class, request);\n        context.putContext(ApplicationContext.class, applicationContext);\n        assertNull(resolver.getType(context, new Integer(1), \"whatever\"));\n        assertEquals(\"The requestScope object is not a map.\", Map.class,\n                resolver.getType(context, null, \"requestScope\"));\n        assertEquals(\"The sessionScope object is not a map.\", Map.class,\n                resolver.getType(context, null, \"sessionScope\"));\n        assertEquals(\"The applicationScope object is not a map.\", Map.class,\n                resolver.getType(context, null, \"applicationScope\"));\n    }", "signature": "void testGetType()", "full_signature": "@Test public void testGetType()", "class_method_signature": "ScopeELResolverTest.testGetType()", "testcase": true, "constructor": false, "invocations": ["createMock", "createMock", "replay", "putContext", "putContext", "assertNull", "getType", "assertEquals", "getType", "assertEquals", "getType", "assertEquals", "getType"]}, "focal_class": {"identifier": "ScopeELResolver", "superclass": "extends ELResolver", "interfaces": "", "fields": [{"original_string": "private static final int SUFFIX_LENGTH = 5;", "modifier": "private static final", "type": "int", "declarator": "SUFFIX_LENGTH = 5", "var_name": "SUFFIX_LENGTH"}], "methods": [{"identifier": "getCommonPropertyType", "parameters": "(ELContext context, Object base)", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> getCommonPropertyType(ELContext context, Object base)", "full_signature": "@Override public Class<?> getCommonPropertyType(ELContext context, Object base)", "class_method_signature": "ScopeELResolver.getCommonPropertyType(ELContext context, Object base)", "testcase": false, "constructor": false}, {"identifier": "getFeatureDescriptors", "parameters": "(ELContext context,\n            Object base)", "modifiers": "@Override public", "return": "Iterator<FeatureDescriptor>", "signature": "Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context,\n            Object base)", "full_signature": "@Override public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context,\n            Object base)", "class_method_signature": "ScopeELResolver.getFeatureDescriptors(ELContext context,\n            Object base)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "(ELContext context, Object base, Object property)", "modifiers": "@Override public", "return": "Class<?>", "signature": "Class<?> getType(ELContext context, Object base, Object property)", "full_signature": "@Override public Class<?> getType(ELContext context, Object base, Object property)", "class_method_signature": "ScopeELResolver.getType(ELContext context, Object base, Object property)", "testcase": false, "constructor": false}, {"identifier": "getValue", "parameters": "(ELContext context, Object base, Object property)", "modifiers": "@Override public", "return": "Object", "signature": "Object getValue(ELContext context, Object base, Object property)", "full_signature": "@Override public Object getValue(ELContext context, Object base, Object property)", "class_method_signature": "ScopeELResolver.getValue(ELContext context, Object base, Object property)", "testcase": false, "constructor": false}, {"identifier": "isReadOnly", "parameters": "(ELContext context, Object base, Object property)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadOnly(ELContext context, Object base, Object property)", "full_signature": "@Override public boolean isReadOnly(ELContext context, Object base, Object property)", "class_method_signature": "ScopeELResolver.isReadOnly(ELContext context, Object base, Object property)", "testcase": false, "constructor": false}, {"identifier": "setValue", "parameters": "(ELContext context, Object base, Object property,\n            Object value)", "modifiers": "@Override public", "return": "void", "signature": "void setValue(ELContext context, Object base, Object property,\n            Object value)", "full_signature": "@Override public void setValue(ELContext context, Object base, Object property,\n            Object value)", "class_method_signature": "ScopeELResolver.setValue(ELContext context, Object base, Object property,\n            Object value)", "testcase": false, "constructor": false}], "file": "tiles-el/src/main/java/org/apache/tiles/el/ScopeELResolver.java"}, "focal_method": {"identifier": "getType", "parameters": "(ELContext context, Object base, Object property)", "modifiers": "@Override public", "return": "Class<?>", "body": "@Override\n    public Class<?> getType(ELContext context, Object base, Object property) {\n        if (base != null || property == null || !(property instanceof String)\n                || !((String) property).endsWith(\"Scope\")) {\n            return null;\n        }\n\n        return Map.class;\n    }", "signature": "Class<?> getType(ELContext context, Object base, Object property)", "full_signature": "@Override public Class<?> getType(ELContext context, Object base, Object property)", "class_method_signature": "ScopeELResolver.getType(ELContext context, Object base, Object property)", "testcase": false, "constructor": false, "invocations": ["endsWith"]}, "repository": {"repo_id": 2641714, "url": "https://github.com/apache/tiles", "language": "Java", "is_fork": false, "fork_count": 65, "stargazer_count": 99, "size": 12554, "license": "licensed"}}