{"test_class": {"identifier": "TextChangedBindingFunctionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    TextView view;", "modifier": "@Mock", "type": "TextView", "declarator": "view", "var_name": "view"}, {"original_string": "@Mock\n    OnTextChangedListener listener;", "modifier": "@Mock", "type": "OnTextChangedListener", "declarator": "listener", "var_name": "listener"}], "file": "library/src/test/java/com/github/bluetape/function/binder/TextChangedBindingFunctionTest.java"}, "test_case": {"identifier": "removeTextWatcher", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void removeTextWatcher() throws Exception {\n        // Given\n        TextWatcher watcher = mock(TextWatcher.class);\n\n        given(view.getTag(anyInt()))\n                .willReturn(watcher);\n\n        BindingFunction function = TextChangedBindingFunction.create(null);\n\n        // When\n        function.bind(view);\n\n        // Then\n        verify(view).removeTextChangedListener(watcher);\n        verify(view).setTag(R.id.onTextChangedListener, null);\n    }", "signature": "void removeTextWatcher()", "full_signature": "@Test public void removeTextWatcher()", "class_method_signature": "TextChangedBindingFunctionTest.removeTextWatcher()", "testcase": true, "constructor": false, "invocations": ["mock", "willReturn", "given", "getTag", "anyInt", "create", "bind", "removeTextChangedListener", "verify", "setTag", "verify"]}, "focal_class": {"identifier": "TextChangedBindingFunction", "superclass": "", "interfaces": "implements BindingFunction", "fields": [{"original_string": "@Nullable\n    private final OnTextChangedListener listener;", "modifier": "@Nullable\n    private final", "type": "OnTextChangedListener", "declarator": "listener", "var_name": "listener"}], "methods": [{"identifier": "TextChangedBindingFunction", "parameters": "(@Nullable OnTextChangedListener listener)", "modifiers": "private", "return": "", "signature": " TextChangedBindingFunction(@Nullable OnTextChangedListener listener)", "full_signature": "private  TextChangedBindingFunction(@Nullable OnTextChangedListener listener)", "class_method_signature": "TextChangedBindingFunction.TextChangedBindingFunction(@Nullable OnTextChangedListener listener)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(@Nullable OnTextChangedListener listener)", "modifiers": "public static", "return": "BindingFunction", "signature": "BindingFunction create(@Nullable OnTextChangedListener listener)", "full_signature": "public static BindingFunction create(@Nullable OnTextChangedListener listener)", "class_method_signature": "TextChangedBindingFunction.create(@Nullable OnTextChangedListener listener)", "testcase": false, "constructor": false}, {"identifier": "isAlreadyAssigned", "parameters": "(TextView textView)", "modifiers": "private static", "return": "boolean", "signature": "boolean isAlreadyAssigned(TextView textView)", "full_signature": "private static boolean isAlreadyAssigned(TextView textView)", "class_method_signature": "TextChangedBindingFunction.isAlreadyAssigned(TextView textView)", "testcase": false, "constructor": false}, {"identifier": "addTextWatcher", "parameters": "(TextView textView, @NonNull OnTextChangedListener listener)", "modifiers": "private static", "return": "void", "signature": "void addTextWatcher(TextView textView, @NonNull OnTextChangedListener listener)", "full_signature": "private static void addTextWatcher(TextView textView, @NonNull OnTextChangedListener listener)", "class_method_signature": "TextChangedBindingFunction.addTextWatcher(TextView textView, @NonNull OnTextChangedListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeTextWatcher", "parameters": "(TextView textView)", "modifiers": "private static", "return": "void", "signature": "void removeTextWatcher(TextView textView)", "full_signature": "private static void removeTextWatcher(TextView textView)", "class_method_signature": "TextChangedBindingFunction.removeTextWatcher(TextView textView)", "testcase": false, "constructor": false}, {"identifier": "bind", "parameters": "(View view)", "modifiers": "@Override public", "return": "void", "signature": "void bind(View view)", "full_signature": "@Override public void bind(View view)", "class_method_signature": "TextChangedBindingFunction.bind(View view)", "testcase": false, "constructor": false}], "file": "library/src/main/java/com/github/bluetape/function/binder/TextChangedBindingFunction.java"}, "focal_method": {"identifier": "removeTextWatcher", "parameters": "(TextView textView)", "modifiers": "private static", "return": "void", "body": "private static void removeTextWatcher(TextView textView) {\n        textView.removeTextChangedListener(\n                (TextWatcher) textView.getTag(R.id.onTextChangedListener)\n        );\n        textView.setTag(R.id.onTextChangedListener, null);\n    }", "signature": "void removeTextWatcher(TextView textView)", "full_signature": "private static void removeTextWatcher(TextView textView)", "class_method_signature": "TextChangedBindingFunction.removeTextWatcher(TextView textView)", "testcase": false, "constructor": false, "invocations": ["removeTextChangedListener", "getTag", "setTag"]}, "repository": {"repo_id": 83193705, "url": "https://github.com/dmitry-zaitsev/BlueTape", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 7, "size": 170, "license": "licensed"}}