{"test_class": {"identifier": "RecodeFunctionTest", "superclass": "extends SEFunctionTestBase", "interfaces": "", "fields": [{"original_string": "private final Integer[] ints = {1, 2, 3};", "modifier": "private final", "type": "Integer[]", "declarator": "ints = {1, 2, 3}", "var_name": "ints"}, {"original_string": "private final String[] words = {\"UPPER\", \"lower\", \"MiXeD\"};", "modifier": "private final", "type": "String[]", "declarator": "words = {\"UPPER\", \"lower\", \"MiXeD\"}", "var_name": "words"}, {"original_string": "private final Color[] colors = {Color.RED, Color.GREEN, Color.BLUE};", "modifier": "private final", "type": "Color[]", "declarator": "colors = {Color.RED, Color.GREEN, Color.BLUE}", "var_name": "colors"}], "file": "modules/library/main/src/test/java/org/geotools/filter/function/RecodeFunctionTest.java"}, "test_case": {"identifier": "testCaseInsensitiveLookup", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCaseInsensitiveLookup() throws Exception {\n        System.out.println(\"   testCaseInsensitiveLookup\");\n\n        setupParameters(words, ints);\n        Function fn = finder.findFunction(\"recode\", parameters);\n\n        for (int i = 0; i < words.length; i++) {\n            assertEquals(ints[i], fn.evaluate(feature(words[i].toLowerCase()), Integer.class));\n            assertEquals(ints[i], fn.evaluate(feature(words[i].toUpperCase()), Integer.class));\n        }\n    }", "signature": "void testCaseInsensitiveLookup()", "full_signature": "@Test public void testCaseInsensitiveLookup()", "class_method_signature": "RecodeFunctionTest.testCaseInsensitiveLookup()", "testcase": true, "constructor": false, "invocations": ["println", "setupParameters", "findFunction", "assertEquals", "evaluate", "feature", "toLowerCase", "assertEquals", "evaluate", "feature", "toUpperCase"]}, "focal_class": {"identifier": "RecodeFunction", "superclass": "", "interfaces": "implements Function", "fields": [{"original_string": "private static final FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2(null);", "modifier": "private static final", "type": "FilterFactory2", "declarator": "ff = CommonFactoryFinder.getFilterFactory2(null)", "var_name": "ff"}, {"original_string": "private final List<Expression> parameters;", "modifier": "private final", "type": "List<Expression>", "declarator": "parameters", "var_name": "parameters"}, {"original_string": "private final Literal fallback;", "modifier": "private final", "type": "Literal", "declarator": "fallback", "var_name": "fallback"}, {"original_string": "public static final FunctionName NAME = new FunctionNameImpl(\"Recode\", \"LookupValue\", \"Data 1\", \n        \"Value 1\", \"Data 2\", \"Value 2\");", "modifier": "public static final", "type": "FunctionName", "declarator": "NAME = new FunctionNameImpl(\"Recode\", \"LookupValue\", \"Data 1\", \n        \"Value 1\", \"Data 2\", \"Value 2\")", "var_name": "NAME"}], "methods": [{"identifier": "RecodeFunction", "parameters": "()", "modifiers": "public", "return": "", "signature": " RecodeFunction()", "full_signature": "public  RecodeFunction()", "class_method_signature": "RecodeFunction.RecodeFunction()", "testcase": false, "constructor": true}, {"identifier": "RecodeFunction", "parameters": "(List<Expression> parameters, Literal fallback)", "modifiers": "public", "return": "", "signature": " RecodeFunction(List<Expression> parameters, Literal fallback)", "full_signature": "public  RecodeFunction(List<Expression> parameters, Literal fallback)", "class_method_signature": "RecodeFunction.RecodeFunction(List<Expression> parameters, Literal fallback)", "testcase": false, "constructor": true}, {"identifier": "getName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getName()", "full_signature": "public String getName()", "class_method_signature": "RecodeFunction.getName()", "testcase": false, "constructor": false}, {"identifier": "getFunctionName", "parameters": "()", "modifiers": "public", "return": "FunctionName", "signature": "FunctionName getFunctionName()", "full_signature": "public FunctionName getFunctionName()", "class_method_signature": "RecodeFunction.getFunctionName()", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "public", "return": "List<Expression>", "signature": "List<Expression> getParameters()", "full_signature": "public List<Expression> getParameters()", "class_method_signature": "RecodeFunction.getParameters()", "testcase": false, "constructor": false}, {"identifier": "accept", "parameters": "(ExpressionVisitor visitor, Object extraData)", "modifiers": "public", "return": "Object", "signature": "Object accept(ExpressionVisitor visitor, Object extraData)", "full_signature": "public Object accept(ExpressionVisitor visitor, Object extraData)", "class_method_signature": "RecodeFunction.accept(ExpressionVisitor visitor, Object extraData)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(Object object)", "modifiers": "public", "return": "Object", "signature": "Object evaluate(Object object)", "full_signature": "public Object evaluate(Object object)", "class_method_signature": "RecodeFunction.evaluate(Object object)", "testcase": false, "constructor": false}, {"identifier": "evaluate", "parameters": "(Object object, Class<T> context)", "modifiers": "public", "return": "T", "signature": "T evaluate(Object object, Class<T> context)", "full_signature": "public T evaluate(Object object, Class<T> context)", "class_method_signature": "RecodeFunction.evaluate(Object object, Class<T> context)", "testcase": false, "constructor": false}, {"identifier": "getFallbackValue", "parameters": "()", "modifiers": "public", "return": "Literal", "signature": "Literal getFallbackValue()", "full_signature": "public Literal getFallbackValue()", "class_method_signature": "RecodeFunction.getFallbackValue()", "testcase": false, "constructor": false}], "file": "modules/library/main/src/main/java/org/geotools/filter/function/RecodeFunction.java"}, "focal_method": {"identifier": "evaluate", "parameters": "(Object object)", "modifiers": "public", "return": "Object", "body": "public Object evaluate(Object object) {\n        return evaluate(object, Object.class);\n    }", "signature": "Object evaluate(Object object)", "full_signature": "public Object evaluate(Object object)", "class_method_signature": "RecodeFunction.evaluate(Object object)", "testcase": false, "constructor": false, "invocations": ["evaluate"]}, "repository": {"repo_id": 4750321, "url": "https://github.com/HGitMaster/geotools-osgi", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 7, "size": 114107, "license": "licensed"}}