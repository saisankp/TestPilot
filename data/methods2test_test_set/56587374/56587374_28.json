{"test_class": {"identifier": "OutputTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Output output;", "modifier": "private", "type": "Output", "declarator": "output", "var_name": "output"}, {"original_string": "private static HashMap<QName,ParameterValue> emptyInputParams;", "modifier": "private static", "type": "HashMap<QName,ParameterValue>", "declarator": "emptyInputParams", "var_name": "emptyInputParams"}, {"original_string": "private static SaxonConfigurationFactory configFactory;", "modifier": "private static", "type": "SaxonConfigurationFactory", "declarator": "configFactory", "var_name": "configFactory"}], "file": "gaulois-pipe/src/test/java/fr/efl/chaine/xslt/config/OutputTest.java"}, "test_case": {"identifier": "addInvalidPropertyNormalizationForm", "parameters": "()", "modifiers": "@Test(expected = InvalidSyntaxException.class) public", "return": "void", "body": "@Test(expected = InvalidSyntaxException.class)\n    public void addInvalidPropertyNormalizationForm() throws InvalidSyntaxException {\n        output.setOutputProperty(\"normalization-form\", \"XXXX\");\n    }", "signature": "void addInvalidPropertyNormalizationForm()", "full_signature": "@Test(expected = InvalidSyntaxException.class) public void addInvalidPropertyNormalizationForm()", "class_method_signature": "OutputTest.addInvalidPropertyNormalizationForm()", "testcase": true, "constructor": false, "invocations": ["setOutputProperty"]}, "focal_class": {"identifier": "Output", "superclass": "", "interfaces": "implements Verifiable", "fields": [{"original_string": "final static QName QNAME = new QName(Config.NS, \"output\");", "modifier": "final static", "type": "QName", "declarator": "QNAME = new QName(Config.NS, \"output\")", "var_name": "QNAME"}, {"original_string": "static final QName QN_CONSOLE = new QName(Config.NS, \"console\");", "modifier": "static final", "type": "QName", "declarator": "QN_CONSOLE = new QName(Config.NS, \"console\")", "var_name": "QN_CONSOLE"}, {"original_string": "static final QName ATTR_CONSOLE_WHICH = new QName(\"which\");", "modifier": "static final", "type": "QName", "declarator": "ATTR_CONSOLE_WHICH = new QName(\"which\")", "var_name": "ATTR_CONSOLE_WHICH"}, {"original_string": "public static final HashMap<String,OutputPropertyEntry> VALID_OUTPUT_PROPERTIES = new HashMap<>();", "modifier": "public static final", "type": "HashMap<String,OutputPropertyEntry>", "declarator": "VALID_OUTPUT_PROPERTIES = new HashMap<>()", "var_name": "VALID_OUTPUT_PROPERTIES"}, {"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(Output.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Output.class)", "var_name": "LOGGER"}, {"original_string": "private String relativeTo, relativePath;", "modifier": "private", "type": "String", "declarator": "relativeTo", "var_name": "relativeTo"}, {"original_string": "private String absolute;", "modifier": "private", "type": "String", "declarator": "absolute", "var_name": "absolute"}, {"original_string": "private String prefix, suffix, name;", "modifier": "private", "type": "String", "declarator": "prefix", "var_name": "prefix"}, {"original_string": "private String console = null;", "modifier": "private", "type": "String", "declarator": "console = null", "var_name": "console"}, {"original_string": "private String id;", "modifier": "private", "type": "String", "declarator": "id", "var_name": "id"}, {"original_string": "private final OutputProperties outputProperties;", "modifier": "private final", "type": "OutputProperties", "declarator": "outputProperties", "var_name": "outputProperties"}, {"original_string": "private boolean nullOutput = false;", "modifier": "private", "type": "boolean", "declarator": "nullOutput = false", "var_name": "nullOutput"}], "methods": [{"identifier": "Output", "parameters": "()", "modifiers": "public", "return": "", "signature": " Output()", "full_signature": "public  Output()", "class_method_signature": "Output.Output()", "testcase": false, "constructor": true}, {"identifier": "setRelativeTo", "parameters": "(String relativeTo)", "modifiers": "public", "return": "void", "signature": "void setRelativeTo(String relativeTo)", "full_signature": "public void setRelativeTo(String relativeTo)", "class_method_signature": "Output.setRelativeTo(String relativeTo)", "testcase": false, "constructor": false}, {"identifier": "setRelativePath", "parameters": "(String relativePath)", "modifiers": "public", "return": "void", "signature": "void setRelativePath(String relativePath)", "full_signature": "public void setRelativePath(String relativePath)", "class_method_signature": "Output.setRelativePath(String relativePath)", "testcase": false, "constructor": false}, {"identifier": "setAbsolute", "parameters": "(String absolute)", "modifiers": "public", "return": "void", "signature": "void setAbsolute(String absolute)", "full_signature": "public void setAbsolute(String absolute)", "class_method_signature": "Output.setAbsolute(String absolute)", "testcase": false, "constructor": false}, {"identifier": "setPrefix", "parameters": "(String prefix)", "modifiers": "public", "return": "void", "signature": "void setPrefix(String prefix)", "full_signature": "public void setPrefix(String prefix)", "class_method_signature": "Output.setPrefix(String prefix)", "testcase": false, "constructor": false}, {"identifier": "setSuffix", "parameters": "(String suffix)", "modifiers": "public", "return": "void", "signature": "void setSuffix(String suffix)", "full_signature": "public void setSuffix(String suffix)", "class_method_signature": "Output.setSuffix(String suffix)", "testcase": false, "constructor": false}, {"identifier": "setName", "parameters": "(String name)", "modifiers": "public", "return": "void", "signature": "void setName(String name)", "full_signature": "public void setName(String name)", "class_method_signature": "Output.setName(String name)", "testcase": false, "constructor": false}, {"identifier": "isAbsolute", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isAbsolute()", "full_signature": "private boolean isAbsolute()", "class_method_signature": "Output.isAbsolute()", "testcase": false, "constructor": false}, {"identifier": "setNull", "parameters": "(final boolean nullOutput)", "modifiers": "public", "return": "void", "signature": "void setNull(final boolean nullOutput)", "full_signature": "public void setNull(final boolean nullOutput)", "class_method_signature": "Output.setNull(final boolean nullOutput)", "testcase": false, "constructor": false}, {"identifier": "setOutputProperties", "parameters": "(final Properties props)", "modifiers": "public", "return": "void", "signature": "void setOutputProperties(final Properties props)", "full_signature": "public void setOutputProperties(final Properties props)", "class_method_signature": "Output.setOutputProperties(final Properties props)", "testcase": false, "constructor": false}, {"identifier": "setOutputProperty", "parameters": "(final String key, final String value)", "modifiers": "public", "return": "void", "signature": "void setOutputProperty(final String key, final String value)", "full_signature": "public void setOutputProperty(final String key, final String value)", "class_method_signature": "Output.setOutputProperty(final String key, final String value)", "testcase": false, "constructor": false}, {"identifier": "unsetOutputProperty", "parameters": "(final String key)", "modifiers": "public", "return": "void", "signature": "void unsetOutputProperty(final String key)", "full_signature": "public void unsetOutputProperty(final String key)", "class_method_signature": "Output.unsetOutputProperty(final String key)", "testcase": false, "constructor": false}, {"identifier": "isNullOutput", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isNullOutput()", "full_signature": "public boolean isNullOutput()", "class_method_signature": "Output.isNullOutput()", "testcase": false, "constructor": false}, {"identifier": "getOutputProperties", "parameters": "()", "modifiers": "public", "return": "Properties", "signature": "Properties getOutputProperties()", "full_signature": "public Properties getOutputProperties()", "class_method_signature": "Output.getOutputProperties()", "testcase": false, "constructor": false}, {"identifier": "getOutputProperty", "parameters": "(final String key)", "modifiers": "public", "return": "String", "signature": "String getOutputProperty(final String key)", "full_signature": "public String getOutputProperty(final String key)", "class_method_signature": "Output.getOutputProperty(final String key)", "testcase": false, "constructor": false}, {"identifier": "getDestinationFile", "parameters": "(File sourceFile, HashMap<QName,ParameterValue> parameters)", "modifiers": "public", "return": "File", "signature": "File getDestinationFile(File sourceFile, HashMap<QName,ParameterValue> parameters)", "full_signature": "public File getDestinationFile(File sourceFile, HashMap<QName,ParameterValue> parameters)", "class_method_signature": "Output.getDestinationFile(File sourceFile, HashMap<QName,ParameterValue> parameters)", "testcase": false, "constructor": false}, {"identifier": "getFileName", "parameters": "(File sourceFile, HashMap<QName,ParameterValue> parameters)", "modifiers": "private", "return": "String", "signature": "String getFileName(File sourceFile, HashMap<QName,ParameterValue> parameters)", "full_signature": "private String getFileName(File sourceFile, HashMap<QName,ParameterValue> parameters)", "class_method_signature": "Output.getFileName(File sourceFile, HashMap<QName,ParameterValue> parameters)", "testcase": false, "constructor": false}, {"identifier": "verify", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void verify()", "full_signature": "@Override public void verify()", "class_method_signature": "Output.verify()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Output.toString()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(final String prefix)", "modifiers": "public", "return": "String", "signature": "String toString(final String prefix)", "full_signature": "public String toString(final String prefix)", "class_method_signature": "Output.toString(final String prefix)", "testcase": false, "constructor": false}, {"identifier": "getConsole", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getConsole()", "full_signature": "public String getConsole()", "class_method_signature": "Output.getConsole()", "testcase": false, "constructor": false}, {"identifier": "setConsole", "parameters": "(String console)", "modifiers": "public", "return": "void", "signature": "void setConsole(String console)", "full_signature": "public void setConsole(String console)", "class_method_signature": "Output.setConsole(String console)", "testcase": false, "constructor": false}, {"identifier": "isConsoleOutput", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isConsoleOutput()", "full_signature": "public boolean isConsoleOutput()", "class_method_signature": "Output.isConsoleOutput()", "testcase": false, "constructor": false}, {"identifier": "getId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getId()", "full_signature": "public String getId()", "class_method_signature": "Output.getId()", "testcase": false, "constructor": false}, {"identifier": "setId", "parameters": "(String id)", "modifiers": "public", "return": "void", "signature": "void setId(String id)", "full_signature": "public void setId(String id)", "class_method_signature": "Output.setId(String id)", "testcase": false, "constructor": false}], "file": "gaulois-pipe/src/main/java/fr/efl/chaine/xslt/config/Output.java"}, "focal_method": {"identifier": "setOutputProperty", "parameters": "(final String key, final String value)", "modifiers": "public", "return": "void", "body": "public void setOutputProperty(final String key, final String value) throws InvalidSyntaxException {\n        outputProperties.defineProperty(key, value);\n    }", "signature": "void setOutputProperty(final String key, final String value)", "full_signature": "public void setOutputProperty(final String key, final String value)", "class_method_signature": "Output.setOutputProperty(final String key, final String value)", "testcase": false, "constructor": false, "invocations": ["defineProperty"]}, "repository": {"repo_id": 56587374, "url": "https://github.com/cmarchand/gaulois-pipe", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 6, "size": 506, "license": "licensed"}}