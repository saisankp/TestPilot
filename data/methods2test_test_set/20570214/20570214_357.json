{"test_class": {"identifier": "HybridConfigTest", "superclass": "", "interfaces": "", "fields": [], "file": "java_src/src/test/java/com/google/crypto/tink/hybrid/HybridConfigTest.java"}, "test_case": {"identifier": "aaaTestInitialization", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void aaaTestInitialization() throws Exception {\n    try {\n      Registry.getCatalogue(\"tinkmac\");\n      fail(\"Expected GeneralSecurityException\");\n    } catch (GeneralSecurityException e) {\n      assertThat(e.toString()).contains(\"no catalogue found\");\n      assertThat(e.toString()).contains(\"MacConfig.register()\");\n    }\n    try {\n      Registry.getCatalogue(\"tinkhybridencrypt\");\n      fail(\"Expected GeneralSecurityException\");\n    } catch (GeneralSecurityException e) {\n      assertThat(e.toString()).contains(\"no catalogue found\");\n      assertThat(e.toString()).contains(\"HybridConfig.register()\");\n    }\n    try {\n      Registry.getCatalogue(\"tinkhybriddecrypt\");\n      fail(\"Expected GeneralSecurityException\");\n    } catch (GeneralSecurityException e) {\n      assertThat(e.toString()).contains(\"no catalogue found\");\n      assertThat(e.toString()).contains(\"HybridConfig.register()\");\n    }\n\n    String typeUrl = \"type.googleapis.com/google.crypto.tink.EciesAeadHkdfPrivateKey\";\n    try {\n      Registry.getUntypedKeyManager(typeUrl);\n      fail(\"Expected GeneralSecurityException\");\n    } catch (GeneralSecurityException e) {\n      assertThat(e.toString()).contains(\"No key manager found\");\n    }\n\n    // Initialize the config.\n    HybridConfig.register();\n\n    Registry.getKeyManager(typeUrl, HybridDecrypt.class);\n\n    // Running init() manually again should succeed.\n    HybridConfig.register();\n  }", "signature": "void aaaTestInitialization()", "full_signature": "@Test public void aaaTestInitialization()", "class_method_signature": "HybridConfigTest.aaaTestInitialization()", "testcase": true, "constructor": false, "invocations": ["getCatalogue", "fail", "contains", "assertThat", "toString", "contains", "assertThat", "toString", "getCatalogue", "fail", "contains", "assertThat", "toString", "contains", "assertThat", "toString", "getCatalogue", "fail", "contains", "assertThat", "toString", "contains", "assertThat", "toString", "getUntypedKeyManager", "fail", "contains", "assertThat", "toString", "register", "getKeyManager", "register"]}, "focal_class": {"identifier": "HybridConfig", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String ECIES_AEAD_HKDF_PUBLIC_KEY_TYPE_URL =\n      new EciesAeadHkdfPublicKeyManager().getKeyType();", "modifier": "public static final", "type": "String", "declarator": "ECIES_AEAD_HKDF_PUBLIC_KEY_TYPE_URL =\n      new EciesAeadHkdfPublicKeyManager().getKeyType()", "var_name": "ECIES_AEAD_HKDF_PUBLIC_KEY_TYPE_URL"}, {"original_string": "public static final String ECIES_AEAD_HKDF_PRIVATE_KEY_TYPE_URL =\n      new EciesAeadHkdfPrivateKeyManager().getKeyType();", "modifier": "public static final", "type": "String", "declarator": "ECIES_AEAD_HKDF_PRIVATE_KEY_TYPE_URL =\n      new EciesAeadHkdfPrivateKeyManager().getKeyType()", "var_name": "ECIES_AEAD_HKDF_PRIVATE_KEY_TYPE_URL"}, {"original_string": "@Deprecated public static final RegistryConfig TINK_1_0_0 = RegistryConfig.getDefaultInstance();", "modifier": "@Deprecated public static final", "type": "RegistryConfig", "declarator": "TINK_1_0_0 = RegistryConfig.getDefaultInstance()", "var_name": "TINK_1_0_0"}, {"original_string": "@Deprecated public static final RegistryConfig TINK_1_1_0 = RegistryConfig.getDefaultInstance();", "modifier": "@Deprecated public static final", "type": "RegistryConfig", "declarator": "TINK_1_1_0 = RegistryConfig.getDefaultInstance()", "var_name": "TINK_1_1_0"}, {"original_string": "@Deprecated public static final RegistryConfig LATEST = RegistryConfig.getDefaultInstance();", "modifier": "@Deprecated public static final", "type": "RegistryConfig", "declarator": "LATEST = RegistryConfig.getDefaultInstance()", "var_name": "LATEST"}], "methods": [{"identifier": "init", "parameters": "()", "modifiers": "@Deprecated public static", "return": "void", "signature": "void init()", "full_signature": "@Deprecated public static void init()", "class_method_signature": "HybridConfig.init()", "testcase": false, "constructor": false}, {"identifier": "register", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void register()", "full_signature": "public static void register()", "class_method_signature": "HybridConfig.register()", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/hybrid/HybridConfig.java"}, "focal_method": {"identifier": "register", "parameters": "()", "modifiers": "public static", "return": "void", "body": "public static void register() throws GeneralSecurityException {\n    AeadConfig.register();\n    EciesAeadHkdfPrivateKeyManager.registerPair(/*newKeyAllowed=*/true);\n    HybridDecryptWrapper.register();\n    HybridEncryptWrapper.register();\n  }", "signature": "void register()", "full_signature": "public static void register()", "class_method_signature": "HybridConfig.register()", "testcase": false, "constructor": false, "invocations": ["register", "registerPair", "register", "register"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}