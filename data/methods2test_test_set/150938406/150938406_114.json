{"test_class": {"identifier": "FeatureBinsUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/feature/binning/FeatureBinsUtilTest.java"}, "test_case": {"identifier": "keepGivenDecimal", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void keepGivenDecimal() {\n        double d = 1.5678;\n        Assert.assertEquals(FeatureBinsUtil.keepGivenDecimal(d, 0).toString(), \"2.0\");\n    }", "signature": "void keepGivenDecimal()", "full_signature": "@Test public void keepGivenDecimal()", "class_method_signature": "FeatureBinsUtilTest.keepGivenDecimal()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toString", "keepGivenDecimal"]}, "focal_class": {"identifier": "FeatureBinsUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "static int DISCRETE_BIN_SIZE = 2;", "modifier": "static", "type": "int", "declarator": "DISCRETE_BIN_SIZE = 2", "var_name": "DISCRETE_BIN_SIZE"}, {"original_string": "static int NUMERIC_BIN_SIZE = 1;", "modifier": "static", "type": "int", "declarator": "NUMERIC_BIN_SIZE = 1", "var_name": "NUMERIC_BIN_SIZE"}, {"original_string": "public static String NULL_LABEL = \"NULL\";", "modifier": "public static", "type": "String", "declarator": "NULL_LABEL = \"NULL\"", "var_name": "NULL_LABEL"}, {"original_string": "public static String ELSE_LABEL = \"ELSE\";", "modifier": "public static", "type": "String", "declarator": "ELSE_LABEL = \"ELSE\"", "var_name": "ELSE_LABEL"}, {"original_string": "private static String WEB_STRING = \"STRING\";", "modifier": "private static", "type": "String", "declarator": "WEB_STRING = \"STRING\"", "var_name": "WEB_STRING"}, {"original_string": "private static String SQL_STRING = \"VARCHAR\";", "modifier": "private static", "type": "String", "declarator": "SQL_STRING = \"VARCHAR\"", "var_name": "SQL_STRING"}, {"original_string": "private static String POSITIVE_INF = \"+inf\";", "modifier": "private static", "type": "String", "declarator": "POSITIVE_INF = \"+inf\"", "var_name": "POSITIVE_INF"}, {"original_string": "private static String NEGATIVE_INF = \"-inf\";", "modifier": "private static", "type": "String", "declarator": "NEGATIVE_INF = \"-inf\"", "var_name": "NEGATIVE_INF"}, {"original_string": "private static String LEFT_OPEN = \"(\";", "modifier": "private static", "type": "String", "declarator": "LEFT_OPEN = \"(\"", "var_name": "LEFT_OPEN"}, {"original_string": "private static String LEFT_CLOSE = \"[\";", "modifier": "private static", "type": "String", "declarator": "LEFT_CLOSE = \"[\"", "var_name": "LEFT_CLOSE"}, {"original_string": "private static String RIGHT_OPEN = \")\";", "modifier": "private static", "type": "String", "declarator": "RIGHT_OPEN = \")\"", "var_name": "RIGHT_OPEN"}, {"original_string": "private static String RIGHT_CLOSE = \"]\";", "modifier": "private static", "type": "String", "declarator": "RIGHT_CLOSE = \"]\"", "var_name": "RIGHT_CLOSE"}, {"original_string": "private static String JOIN_DELIMITER = \",\";", "modifier": "private static", "type": "String", "declarator": "JOIN_DELIMITER = \",\"", "var_name": "JOIN_DELIMITER"}, {"original_string": "private static SerializableComparator<Number> numberComparator =\n        (SerializableComparator<Number>) FeatureBinsUtil::compareNumbers;", "modifier": "private static", "type": "SerializableComparator<Number>", "declarator": "numberComparator =\n        (SerializableComparator<Number>) FeatureBinsUtil::compareNumbers", "var_name": "numberComparator"}], "methods": [{"identifier": "featureTypeToColType", "parameters": "(String featureType, BinDivideType binDivideType)", "modifiers": "public static", "return": "BinTypes.ColType", "signature": "BinTypes.ColType featureTypeToColType(String featureType, BinDivideType binDivideType)", "full_signature": "public static BinTypes.ColType featureTypeToColType(String featureType, BinDivideType binDivideType)", "class_method_signature": "FeatureBinsUtil.featureTypeToColType(String featureType, BinDivideType binDivideType)", "testcase": false, "constructor": false}, {"identifier": "getTypeString", "parameters": "(TypeInformation<?> type)", "modifiers": "public static", "return": "String", "signature": "String getTypeString(TypeInformation<?> type)", "full_signature": "public static String getTypeString(TypeInformation<?> type)", "class_method_signature": "FeatureBinsUtil.getTypeString(TypeInformation<?> type)", "testcase": false, "constructor": false}, {"identifier": "getFlinkType", "parameters": "(String typeStr)", "modifiers": "public static", "return": "TypeInformation<?>", "signature": "TypeInformation<?> getFlinkType(String typeStr)", "full_signature": "public static TypeInformation<?> getFlinkType(String typeStr)", "class_method_signature": "FeatureBinsUtil.getFlinkType(String typeStr)", "testcase": false, "constructor": false}, {"identifier": "keepGivenDecimal", "parameters": "(Double d, int decimal)", "modifiers": "public static", "return": "Double", "signature": "Double keepGivenDecimal(Double d, int decimal)", "full_signature": "public static Double keepGivenDecimal(Double d, int decimal)", "class_method_signature": "FeatureBinsUtil.keepGivenDecimal(Double d, int decimal)", "testcase": false, "constructor": false}, {"identifier": "keepGivenDecimal", "parameters": "(Number d, int decimal)", "modifiers": "public static", "return": "Number", "signature": "Number keepGivenDecimal(Number d, int decimal)", "full_signature": "public static Number keepGivenDecimal(Number d, int decimal)", "class_method_signature": "FeatureBinsUtil.keepGivenDecimal(Number d, int decimal)", "testcase": false, "constructor": false}, {"identifier": "createNumericBin", "parameters": "(Number[] splitsArray)", "modifiers": "static", "return": "Tuple2<Bins, Number[]>", "signature": "Tuple2<Bins, Number[]> createNumericBin(Number[] splitsArray)", "full_signature": "static Tuple2<Bins, Number[]> createNumericBin(Number[] splitsArray)", "class_method_signature": "FeatureBinsUtil.createNumericBin(Number[] splitsArray)", "testcase": false, "constructor": false}, {"identifier": "parseFeatureBinsModel", "parameters": "(DataSet<Row> modelData)", "modifiers": "public static", "return": "DataSet<FeatureBinsCalculator>", "signature": "DataSet<FeatureBinsCalculator> parseFeatureBinsModel(DataSet<Row> modelData)", "full_signature": "public static DataSet<FeatureBinsCalculator> parseFeatureBinsModel(DataSet<Row> modelData)", "class_method_signature": "FeatureBinsUtil.parseFeatureBinsModel(DataSet<Row> modelData)", "testcase": false, "constructor": false}, {"identifier": "compareNumbers", "parameters": "(Number o1, Number o2)", "modifiers": "public static", "return": "int", "signature": "int compareNumbers(Number o1, Number o2)", "full_signature": "public static int compareNumbers(Number o1, Number o2)", "class_method_signature": "FeatureBinsUtil.compareNumbers(Number o1, Number o2)", "testcase": false, "constructor": false}, {"identifier": "deSerialize", "parameters": "(String str)", "modifiers": "public static", "return": "FeatureBinsCalculator[]", "signature": "FeatureBinsCalculator[] deSerialize(String str)", "full_signature": "public static FeatureBinsCalculator[] deSerialize(String str)", "class_method_signature": "FeatureBinsUtil.deSerialize(String str)", "testcase": false, "constructor": false}, {"identifier": "serialize", "parameters": "(FeatureBinsCalculator... featureBinsCalculators)", "modifiers": "public static", "return": "String", "signature": "String serialize(FeatureBinsCalculator... featureBinsCalculators)", "full_signature": "public static String serialize(FeatureBinsCalculator... featureBinsCalculators)", "class_method_signature": "FeatureBinsUtil.serialize(FeatureBinsCalculator... featureBinsCalculators)", "testcase": false, "constructor": false}, {"identifier": "calcWoe", "parameters": "(long binTotal, long binPositiveTotal, long positiveTotal, long negativeTotal)", "modifiers": "public static", "return": "double", "signature": "double calcWoe(long binTotal, long binPositiveTotal, long positiveTotal, long negativeTotal)", "full_signature": "public static double calcWoe(long binTotal, long binPositiveTotal, long positiveTotal, long negativeTotal)", "class_method_signature": "FeatureBinsUtil.calcWoe(long binTotal, long binPositiveTotal, long positiveTotal, long negativeTotal)", "testcase": false, "constructor": false}, {"identifier": "nullIndex", "parameters": "(int normBinSize)", "modifiers": "public static", "return": "long", "signature": "long nullIndex(int normBinSize)", "full_signature": "public static long nullIndex(int normBinSize)", "class_method_signature": "FeatureBinsUtil.nullIndex(int normBinSize)", "testcase": false, "constructor": false}, {"identifier": "elseIndex", "parameters": "(int normBinSize)", "modifiers": "public static", "return": "long", "signature": "long elseIndex(int normBinSize)", "full_signature": "public static long elseIndex(int normBinSize)", "class_method_signature": "FeatureBinsUtil.elseIndex(int normBinSize)", "testcase": false, "constructor": false}, {"identifier": "getBinEncodeVectorSize", "parameters": "(FeatureBinsCalculator featureBinsCalculator)", "modifiers": "public static", "return": "int", "signature": "int getBinEncodeVectorSize(FeatureBinsCalculator featureBinsCalculator)", "full_signature": "public static int getBinEncodeVectorSize(FeatureBinsCalculator featureBinsCalculator)", "class_method_signature": "FeatureBinsUtil.getBinEncodeVectorSize(FeatureBinsCalculator featureBinsCalculator)", "testcase": false, "constructor": false}, {"identifier": "cutsArrayToInterval", "parameters": "(Number[] splitsArray, boolean leftOpen)", "modifiers": "public static", "return": "String[]", "signature": "String[] cutsArrayToInterval(Number[] splitsArray, boolean leftOpen)", "full_signature": "public static String[] cutsArrayToInterval(Number[] splitsArray, boolean leftOpen)", "class_method_signature": "FeatureBinsUtil.cutsArrayToInterval(Number[] splitsArray, boolean leftOpen)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/feature/binning/FeatureBinsUtil.java"}, "focal_method": {"identifier": "keepGivenDecimal", "parameters": "(Double d, int decimal)", "modifiers": "public static", "return": "Double", "body": "public static Double keepGivenDecimal(Double d, int decimal) {\n        if (null == d) {\n            return null;\n        }\n        BigDecimal bigDecimal = new BigDecimal(d);\n\n        return bigDecimal.setScale(decimal, BigDecimal.ROUND_HALF_UP).doubleValue();\n    }", "signature": "Double keepGivenDecimal(Double d, int decimal)", "full_signature": "public static Double keepGivenDecimal(Double d, int decimal)", "class_method_signature": "FeatureBinsUtil.keepGivenDecimal(Double d, int decimal)", "testcase": false, "constructor": false, "invocations": ["doubleValue", "setScale"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}