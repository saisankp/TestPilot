{"test_class": {"identifier": "DateTimeExtTest", "superclass": "", "interfaces": "", "fields": [], "file": "titus-common/src/test/java/com/netflix/titus/common/util/DateTimeExtTest.java"}, "test_case": {"identifier": "testToRateString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testToRateString() {\n        assertThat(toRateString(1, 1, TimeUnit.MILLISECONDS, \"action\")).isEqualTo(\"1.00 action/ms\");\n        assertThat(toRateString(60, 5, TimeUnit.SECONDS, \"action\")).isEqualTo(\"5.00 action/min\");\n    }", "signature": "void testToRateString()", "full_signature": "@Test public void testToRateString()", "class_method_signature": "DateTimeExtTest.testToRateString()", "testcase": true, "constructor": false, "invocations": ["isEqualTo", "assertThat", "toRateString", "isEqualTo", "assertThat", "toRateString"]}, "focal_class": {"identifier": "DateTimeExt", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DateTimeFormatter ISO_UTC_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_LOCAL_DATE_TIME.withZone(ZoneId.of(\"UTC\"));", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "ISO_UTC_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_LOCAL_DATE_TIME.withZone(ZoneId.of(\"UTC\"))", "var_name": "ISO_UTC_DATE_TIME_FORMATTER"}, {"original_string": "private static final DateTimeFormatter ISO_LOCAL_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_LOCAL_DATE_TIME.withZone(ZoneId.systemDefault());", "modifier": "private static final", "type": "DateTimeFormatter", "declarator": "ISO_LOCAL_DATE_TIME_FORMATTER = DateTimeFormatter.ISO_LOCAL_DATE_TIME.withZone(ZoneId.systemDefault())", "var_name": "ISO_LOCAL_DATE_TIME_FORMATTER"}], "methods": [{"identifier": "DateTimeExt", "parameters": "()", "modifiers": "private", "return": "", "signature": " DateTimeExt()", "full_signature": "private  DateTimeExt()", "class_method_signature": "DateTimeExt.DateTimeExt()", "testcase": false, "constructor": true}, {"identifier": "toZoneId", "parameters": "(String timeZoneName)", "modifiers": "public static", "return": "ZoneId", "signature": "ZoneId toZoneId(String timeZoneName)", "full_signature": "public static ZoneId toZoneId(String timeZoneName)", "class_method_signature": "DateTimeExt.toZoneId(String timeZoneName)", "testcase": false, "constructor": false}, {"identifier": "toZoneOffset", "parameters": "(String timeZoneName)", "modifiers": "public static", "return": "ZoneOffset", "signature": "ZoneOffset toZoneOffset(String timeZoneName)", "full_signature": "public static ZoneOffset toZoneOffset(String timeZoneName)", "class_method_signature": "DateTimeExt.toZoneOffset(String timeZoneName)", "testcase": false, "constructor": false}, {"identifier": "toUtcDateTimeString", "parameters": "(long msSinceEpoch)", "modifiers": "public static", "return": "String", "signature": "String toUtcDateTimeString(long msSinceEpoch)", "full_signature": "public static String toUtcDateTimeString(long msSinceEpoch)", "class_method_signature": "DateTimeExt.toUtcDateTimeString(long msSinceEpoch)", "testcase": false, "constructor": false}, {"identifier": "toLocalDateTimeString", "parameters": "(long msSinceEpoch)", "modifiers": "public static", "return": "String", "signature": "String toLocalDateTimeString(long msSinceEpoch)", "full_signature": "public static String toLocalDateTimeString(long msSinceEpoch)", "class_method_signature": "DateTimeExt.toLocalDateTimeString(long msSinceEpoch)", "testcase": false, "constructor": false}, {"identifier": "toTimeUnitAbbreviation", "parameters": "(TimeUnit timeUnit)", "modifiers": "public static", "return": "String", "signature": "String toTimeUnitAbbreviation(TimeUnit timeUnit)", "full_signature": "public static String toTimeUnitAbbreviation(TimeUnit timeUnit)", "class_method_signature": "DateTimeExt.toTimeUnitAbbreviation(TimeUnit timeUnit)", "testcase": false, "constructor": false}, {"identifier": "toTimeUnitString", "parameters": "(Duration duration)", "modifiers": "public static", "return": "String", "signature": "String toTimeUnitString(Duration duration)", "full_signature": "public static String toTimeUnitString(Duration duration)", "class_method_signature": "DateTimeExt.toTimeUnitString(Duration duration)", "testcase": false, "constructor": false}, {"identifier": "toTimeUnitString", "parameters": "(long timeMs)", "modifiers": "public static", "return": "String", "signature": "String toTimeUnitString(long timeMs)", "full_signature": "public static String toTimeUnitString(long timeMs)", "class_method_signature": "DateTimeExt.toTimeUnitString(long timeMs)", "testcase": false, "constructor": false}, {"identifier": "toRateString", "parameters": "(long interval, long itemsPerInterval, TimeUnit timeUnit, String rateType)", "modifiers": "public static", "return": "String", "signature": "String toRateString(long interval, long itemsPerInterval, TimeUnit timeUnit, String rateType)", "full_signature": "public static String toRateString(long interval, long itemsPerInterval, TimeUnit timeUnit, String rateType)", "class_method_signature": "DateTimeExt.toRateString(long interval, long itemsPerInterval, TimeUnit timeUnit, String rateType)", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/util/DateTimeExt.java"}, "focal_method": {"identifier": "toRateString", "parameters": "(long interval, long itemsPerInterval, TimeUnit timeUnit, String rateType)", "modifiers": "public static", "return": "String", "body": "public static String toRateString(long interval, long itemsPerInterval, TimeUnit timeUnit, String rateType) {\n        TimeUnit matchedTimeUnit = timeUnit;\n        for (TimeUnit nextTimeUnit : TimeUnit.values()) {\n            double ratio = nextTimeUnit.toNanos(1) / (double) timeUnit.toNanos(1);\n            double rate = itemsPerInterval / (double) interval * ratio;\n            if (rate >= 0.1) {\n                matchedTimeUnit = nextTimeUnit;\n                break;\n            }\n        }\n        double ratio = matchedTimeUnit.toNanos(1) / (double) timeUnit.toNanos(1);\n        double rate = itemsPerInterval / (double) interval * ratio;\n\n        return String.format(\"%.2f %s/%s\", rate, rateType, toTimeUnitAbbreviation(matchedTimeUnit));\n    }", "signature": "String toRateString(long interval, long itemsPerInterval, TimeUnit timeUnit, String rateType)", "full_signature": "public static String toRateString(long interval, long itemsPerInterval, TimeUnit timeUnit, String rateType)", "class_method_signature": "DateTimeExt.toRateString(long interval, long itemsPerInterval, TimeUnit timeUnit, String rateType)", "testcase": false, "constructor": false, "invocations": ["values", "toNanos", "toNanos", "toNanos", "toNanos", "format", "toTimeUnitAbbreviation"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}