{"test_class": {"identifier": "GeoLocationPointListTest", "superclass": "extends AbstractGisTest", "interfaces": "", "fields": [{"original_string": "private int count1;", "modifier": "private", "type": "int", "declarator": "count1", "var_name": "count1"}, {"original_string": "private int count2;", "modifier": "private", "type": "int", "declarator": "count2", "var_name": "count2"}, {"original_string": "private double[] coords11;", "modifier": "private", "type": "double[]", "declarator": "coords11", "var_name": "coords11"}, {"original_string": "private double[] coords12;", "modifier": "private", "type": "double[]", "declarator": "coords12", "var_name": "coords12"}, {"original_string": "private double[] coords13;", "modifier": "private", "type": "double[]", "declarator": "coords13", "var_name": "coords13"}, {"original_string": "private double[] coords21;", "modifier": "private", "type": "double[]", "declarator": "coords21", "var_name": "coords21"}, {"original_string": "private double[] coords22;", "modifier": "private", "type": "double[]", "declarator": "coords22", "var_name": "coords22"}, {"original_string": "private double[] coords23;", "modifier": "private", "type": "double[]", "declarator": "coords23", "var_name": "coords23"}, {"original_string": "private Rectangle2d b11;", "modifier": "private", "type": "Rectangle2d", "declarator": "b11", "var_name": "b11"}, {"original_string": "private Rectangle2d b12;", "modifier": "private", "type": "Rectangle2d", "declarator": "b12", "var_name": "b12"}, {"original_string": "private Rectangle2d b13;", "modifier": "private", "type": "Rectangle2d", "declarator": "b13", "var_name": "b13"}, {"original_string": "private Rectangle2d b21;", "modifier": "private", "type": "Rectangle2d", "declarator": "b21", "var_name": "b21"}, {"original_string": "private Rectangle2d b22;", "modifier": "private", "type": "Rectangle2d", "declarator": "b22", "var_name": "b22"}, {"original_string": "private Rectangle2d b23;", "modifier": "private", "type": "Rectangle2d", "declarator": "b23", "var_name": "b23"}, {"original_string": "private GeoLocationPointList location11;", "modifier": "private", "type": "GeoLocationPointList", "declarator": "location11", "var_name": "location11"}, {"original_string": "private GeoLocationPointList location12;", "modifier": "private", "type": "GeoLocationPointList", "declarator": "location12", "var_name": "location12"}, {"original_string": "private GeoLocationPointList location13;", "modifier": "private", "type": "GeoLocationPointList", "declarator": "location13", "var_name": "location13"}, {"original_string": "private GeoLocationPointList location21;", "modifier": "private", "type": "GeoLocationPointList", "declarator": "location21", "var_name": "location21"}, {"original_string": "private GeoLocationPointList location22;", "modifier": "private", "type": "GeoLocationPointList", "declarator": "location22", "var_name": "location22"}, {"original_string": "private GeoLocationPointList location23;", "modifier": "private", "type": "GeoLocationPointList", "declarator": "location23", "var_name": "location23"}], "file": "advanced/gis/giscore/src/test/java/org/arakhne/afc/gis/location/GeoLocationPointListTest.java"}, "test_case": {"identifier": "testToBounds2D", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testToBounds2D() {\n\t\tassertEpsilonEquals(this.b11, this.location11.toBounds2D());\n\t\tassertEpsilonEquals(this.b12, this.location12.toBounds2D());\n\t\tassertEpsilonEquals(this.b13, this.location13.toBounds2D());\n\t\tassertEpsilonEquals(this.b21, this.location21.toBounds2D());\n\t\tassertEpsilonEquals(this.b22, this.location22.toBounds2D());\n\t\tassertEpsilonEquals(this.b23, this.location23.toBounds2D());\n\n\t\tassertEpsilonEquals(this.location11.toBounds2D(), this.location11.toBounds2D());\n\t\tassertEpsilonEquals(this.location12.toBounds2D(), this.location11.toBounds2D());\n\t\tassertNotEquals(this.location13.toBounds2D(), this.location11.toBounds2D());\n\t\tassertNotEquals(this.location21.toBounds2D(), this.location11.toBounds2D());\n\t\tassertNotEquals(this.location22.toBounds2D(), this.location11.toBounds2D());\n\t\tassertNotEquals(this.location23.toBounds2D(), this.location11.toBounds2D());\n\n\t\tassertEpsilonEquals(this.location11.toBounds2D(), this.location12.toBounds2D());\n\t\tassertEpsilonEquals(this.location12.toBounds2D(), this.location12.toBounds2D());\n\t\tassertNotEquals(this.location13.toBounds2D(), this.location12.toBounds2D());\n\t\tassertNotEquals(this.location21.toBounds2D(), this.location12.toBounds2D());\n\t\tassertNotEquals(this.location22.toBounds2D(), this.location12.toBounds2D());\n\t\tassertNotEquals(this.location23.toBounds2D(), this.location12.toBounds2D());\n\n\t\tassertNotEquals(this.location11.toBounds2D(), this.location13.toBounds2D());\n\t\tassertNotEquals(this.location12.toBounds2D(), this.location13.toBounds2D());\n\t\tassertEpsilonEquals(this.location13.toBounds2D(), this.location13.toBounds2D());\n\t\tassertNotEquals(this.location21.toBounds2D(), this.location13.toBounds2D());\n\t\tassertNotEquals(this.location22.toBounds2D(), this.location13.toBounds2D());\n\t\tassertNotEquals(this.location23.toBounds2D(), this.location13.toBounds2D());\n\n\t\tassertNotEquals(this.location11.toBounds2D(), this.location21.toBounds2D());\n\t\tassertNotEquals(this.location12.toBounds2D(), this.location21.toBounds2D());\n\t\tassertNotEquals(this.location13.toBounds2D(), this.location21.toBounds2D());\n\t\tassertEpsilonEquals(this.location21.toBounds2D(), this.location21.toBounds2D());\n\t\tassertEpsilonEquals(this.location22.toBounds2D(), this.location21.toBounds2D());\n\t\tassertNotEquals(this.location23.toBounds2D(), this.location21.toBounds2D());\n\n\t\tassertNotEquals(this.location11.toBounds2D(), this.location22.toBounds2D());\n\t\tassertNotEquals(this.location12.toBounds2D(), this.location22.toBounds2D());\n\t\tassertNotEquals(this.location13.toBounds2D(), this.location22.toBounds2D());\n\t\tassertEpsilonEquals(this.location21.toBounds2D(), this.location22.toBounds2D());\n\t\tassertEpsilonEquals(this.location22.toBounds2D(), this.location22.toBounds2D());\n\t\tassertNotEquals(this.location23.toBounds2D(), this.location22.toBounds2D());\n\n\t\tassertNotEquals(this.location11.toBounds2D(), this.location23.toBounds2D());\n\t\tassertNotEquals(this.location12.toBounds2D(), this.location23.toBounds2D());\n\t\tassertNotEquals(this.location13.toBounds2D(), this.location23.toBounds2D());\n\t\tassertNotEquals(this.location21.toBounds2D(), this.location23.toBounds2D());\n\t\tassertNotEquals(this.location22.toBounds2D(), this.location23.toBounds2D());\n\t\tassertEpsilonEquals(this.location23.toBounds2D(), this.location23.toBounds2D());\n\t}", "signature": "void testToBounds2D()", "full_signature": "@Test public void testToBounds2D()", "class_method_signature": "GeoLocationPointListTest.testToBounds2D()", "testcase": true, "constructor": false, "invocations": ["assertEpsilonEquals", "toBounds2D", "assertEpsilonEquals", "toBounds2D", "assertEpsilonEquals", "toBounds2D", "assertEpsilonEquals", "toBounds2D", "assertEpsilonEquals", "toBounds2D", "assertEpsilonEquals", "toBounds2D", "assertEpsilonEquals", "toBounds2D", "toBounds2D", "assertEpsilonEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertEpsilonEquals", "toBounds2D", "toBounds2D", "assertEpsilonEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertEpsilonEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertEpsilonEquals", "toBounds2D", "toBounds2D", "assertEpsilonEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertEpsilonEquals", "toBounds2D", "toBounds2D", "assertEpsilonEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertNotEquals", "toBounds2D", "toBounds2D", "assertEpsilonEquals", "toBounds2D", "toBounds2D"]}, "focal_class": {"identifier": "GeoLocationPointList", "superclass": "extends AbstractGeoLocation", "interfaces": "", "fields": [{"original_string": "private final float[] pts;", "modifier": "private final", "type": "float[]", "declarator": "pts", "var_name": "pts"}, {"original_string": "private transient int hash = -1;", "modifier": "private transient", "type": "int", "declarator": "hash = -1", "var_name": "hash"}, {"original_string": "private transient Rectangle2d bounds;", "modifier": "private transient", "type": "Rectangle2d", "declarator": "bounds", "var_name": "bounds"}], "methods": [{"identifier": "GeoLocationPointList", "parameters": "(double... points)", "modifiers": "public", "return": "", "signature": " GeoLocationPointList(double... points)", "full_signature": "public  GeoLocationPointList(double... points)", "class_method_signature": "GeoLocationPointList.GeoLocationPointList(double... points)", "testcase": false, "constructor": true}, {"identifier": "toGeoId", "parameters": "()", "modifiers": "@Override @Pure public", "return": "GeoId", "signature": "GeoId toGeoId()", "full_signature": "@Override @Pure public GeoId toGeoId()", "class_method_signature": "GeoLocationPointList.toGeoId()", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override @SuppressWarnings(\"checkstyle:equalshashcode\") @Pure public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override @SuppressWarnings(\"checkstyle:equalshashcode\") @Pure public int hashCode()", "class_method_signature": "GeoLocationPointList.hashCode()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Pure public", "return": "int", "signature": "int size()", "full_signature": "@Pure public int size()", "class_method_signature": "GeoLocationPointList.size()", "testcase": false, "constructor": false}, {"identifier": "getX", "parameters": "(int index)", "modifiers": "@Pure public", "return": "float", "signature": "float getX(int index)", "full_signature": "@Pure public float getX(int index)", "class_method_signature": "GeoLocationPointList.getX(int index)", "testcase": false, "constructor": false}, {"identifier": "getY", "parameters": "(int index)", "modifiers": "@Pure public", "return": "float", "signature": "float getY(int index)", "full_signature": "@Pure public float getY(int index)", "class_method_signature": "GeoLocationPointList.getY(int index)", "testcase": false, "constructor": false}, {"identifier": "toBounds2D", "parameters": "()", "modifiers": "@Override @Pure public", "return": "Rectangle2d", "signature": "Rectangle2d toBounds2D()", "full_signature": "@Override @Pure public Rectangle2d toBounds2D()", "class_method_signature": "GeoLocationPointList.toBounds2D()", "testcase": false, "constructor": false}, {"identifier": "toGeodesicPosition", "parameters": "()", "modifiers": "@Override @Pure public", "return": "GeodesicPosition", "signature": "GeodesicPosition toGeodesicPosition()", "full_signature": "@Override @Pure public GeodesicPosition toGeodesicPosition()", "class_method_signature": "GeoLocationPointList.toGeodesicPosition()", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "()", "modifiers": "@Pure", "return": "float[]", "signature": "float[] toArray()", "full_signature": "@Pure float[] toArray()", "class_method_signature": "GeoLocationPointList.toArray()", "testcase": false, "constructor": false}], "file": "advanced/gis/giscore/src/main/java/org/arakhne/afc/gis/location/GeoLocationPointList.java"}, "focal_method": {"identifier": "toBounds2D", "parameters": "()", "modifiers": "@Override @Pure public", "return": "Rectangle2d", "body": "@Override\n\t@Pure\n\tpublic Rectangle2d toBounds2D() {\n\t\tif (this.bounds == null && this.pts != null) {\n\t\t\tdouble x1 = Double.MAX_VALUE;\n\t\t\tdouble y1 = Double.MAX_VALUE;\n\t\t\tdouble x2 = Double.MIN_VALUE;\n\t\t\tdouble y2 = Double.MIN_VALUE;\n\t\t\tfor (int i = 0; i < this.pts.length; i += 2) {\n\t\t\t\tif (this.pts[i] < x1) {\n\t\t\t\t\tx1 = this.pts[i];\n\t\t\t\t}\n\t\t\t\tif (this.pts[i] > x2) {\n\t\t\t\t\tx2 = this.pts[i];\n\t\t\t\t}\n\t\t\t\tif (this.pts[i + 1] < y1) {\n\t\t\t\t\ty1 = this.pts[i + 1];\n\t\t\t\t}\n\t\t\t\tif (this.pts[i + 1] > y2) {\n\t\t\t\t\ty2 = this.pts[i + 1];\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.bounds = new Rectangle2d();\n\t\t\tthis.bounds.setFromCorners(x1, y1, x2, y2);\n\t\t}\n\t\treturn this.bounds;\n\t}", "signature": "Rectangle2d toBounds2D()", "full_signature": "@Override @Pure public Rectangle2d toBounds2D()", "class_method_signature": "GeoLocationPointList.toBounds2D()", "testcase": false, "constructor": false, "invocations": ["setFromCorners"]}, "repository": {"repo_id": 9714608, "url": "https://github.com/gallandarakhneorg/afc", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 12, "size": 19091, "license": "licensed"}}