{"test_class": {"identifier": "TautomerizationReactionTest", "superclass": "extends ReactionProcessTest", "interfaces": "", "fields": [{"original_string": "private IChemObjectBuilder builder = SilentChemObjectBuilder.getInstance();", "modifier": "private", "type": "IChemObjectBuilder", "declarator": "builder = SilentChemObjectBuilder.getInstance()", "var_name": "builder"}], "file": "base/reaction/src/test/java/org/openscience/cdk/reaction/type/TautomerizationReactionTest.java"}, "test_case": {"identifier": "testManuallyCentreActive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testManuallyCentreActive() throws Exception {\n        IReactionProcess type = new TautomerizationReaction();\n\n        IAtomContainerSet setOfReactants = getExampleReactants();\n        IAtomContainer molecule = setOfReactants.getAtomContainer(0);\n\n        /* manually putting the active center */\n        molecule.getAtom(0).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        molecule.getAtom(1).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        molecule.getAtom(2).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        molecule.getAtom(4).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        molecule.getBond(0).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        molecule.getBond(1).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        molecule.getBond(3).setFlag(CDKConstants.REACTIVE_CENTER, true);\n\n        /* initiate */\n        List<IParameterReact> paramList = new ArrayList<IParameterReact>();\n        IParameterReact param = new SetReactionCenter();\n        param.setParameter(Boolean.TRUE);\n        paramList.add(param);\n        type.setParameterList(paramList);\n        IReactionSet setOfReactions = type.initiate(setOfReactants, null);\n\n        Assert.assertEquals(1, setOfReactions.getReactionCount());\n        Assert.assertEquals(1, setOfReactions.getReaction(0).getProductCount());\n\n        IAtomContainer product = setOfReactions.getReaction(0).getProducts().getAtomContainer(0);\n\n        IAtomContainer molecule2 = getExpectedProducts().getAtomContainer(0);\n\n        IQueryAtomContainer queryAtom = QueryAtomContainerCreator.createSymbolAndChargeQueryContainer(product);\n        Assert.assertTrue(new UniversalIsomorphismTester().isIsomorph(molecule2, queryAtom));\n\n        // reverse process\n        /* manually putting the active center */\n        molecule2.getAtom(0).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        molecule2.getAtom(1).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        molecule2.getAtom(2).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        molecule2.getAtom(6).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        molecule2.getBond(0).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        molecule2.getBond(1).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        molecule2.getBond(5).setFlag(CDKConstants.REACTIVE_CENTER, true);\n        IAtomContainerSet setOfReactants2 = DefaultChemObjectBuilder.getInstance().newInstance(IAtomContainerSet.class);\n        setOfReactants2.addAtomContainer(molecule2);\n\n        IReactionSet setOfReactions2 = type.initiate(setOfReactants2, null);\n\n        Assert.assertEquals(1, setOfReactions2.getReactionCount());\n        Assert.assertEquals(1, setOfReactions2.getReaction(0).getProductCount());\n\n        IAtomContainer product2 = setOfReactions2.getReaction(0).getProducts().getAtomContainer(0);\n\n        queryAtom = QueryAtomContainerCreator.createSymbolAndChargeQueryContainer(product2);\n        Assert.assertTrue(new UniversalIsomorphismTester().isIsomorph(molecule, queryAtom));\n    }", "signature": "void testManuallyCentreActive()", "full_signature": "@Test public void testManuallyCentreActive()", "class_method_signature": "TautomerizationReactionTest.testManuallyCentreActive()", "testcase": true, "constructor": false, "invocations": ["getExampleReactants", "getAtomContainer", "setFlag", "getAtom", "setFlag", "getAtom", "setFlag", "getAtom", "setFlag", "getAtom", "setFlag", "getBond", "setFlag", "getBond", "setFlag", "getBond", "setParameter", "add", "setParameterList", "initiate", "assertEquals", "getReactionCount", "assertEquals", "getProductCount", "getReaction", "getAtomContainer", "getProducts", "getReaction", "getAtomContainer", "getExpectedProducts", "createSymbolAndChargeQueryContainer", "assertTrue", "isIsomorph", "setFlag", "getAtom", "setFlag", "getAtom", "setFlag", "getAtom", "setFlag", "getAtom", "setFlag", "getBond", "setFlag", "getBond", "setFlag", "getBond", "newInstance", "getInstance", "addAtomContainer", "initiate", "assertEquals", "getReactionCount", "assertEquals", "getProductCount", "getReaction", "getAtomContainer", "getProducts", "getReaction", "createSymbolAndChargeQueryContainer", "assertTrue", "isIsomorph"]}, "focal_class": {"identifier": "TautomerizationReaction", "superclass": "extends ReactionEngine", "interfaces": "implements IReactionProcess", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(TautomerizationReaction.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(TautomerizationReaction.class)", "var_name": "logger"}], "methods": [{"identifier": "TautomerizationReaction", "parameters": "()", "modifiers": "public", "return": "", "signature": " TautomerizationReaction()", "full_signature": "public  TautomerizationReaction()", "class_method_signature": "TautomerizationReaction.TautomerizationReaction()", "testcase": false, "constructor": true}, {"identifier": "getSpecification", "parameters": "()", "modifiers": "@Override public", "return": "ReactionSpecification", "signature": "ReactionSpecification getSpecification()", "full_signature": "@Override public ReactionSpecification getSpecification()", "class_method_signature": "TautomerizationReaction.getSpecification()", "testcase": false, "constructor": false}, {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "TautomerizationReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false}, {"identifier": "setActiveCenters", "parameters": "(IAtomContainer reactant)", "modifiers": "private", "return": "void", "signature": "void setActiveCenters(IAtomContainer reactant)", "full_signature": "private void setActiveCenters(IAtomContainer reactant)", "class_method_signature": "TautomerizationReaction.setActiveCenters(IAtomContainer reactant)", "testcase": false, "constructor": false}], "file": "base/reaction/src/main/java/org/openscience/cdk/reaction/type/TautomerizationReaction.java"}, "focal_method": {"identifier": "initiate", "parameters": "(IAtomContainerSet reactants, IAtomContainerSet agents)", "modifiers": "@Override public", "return": "IReactionSet", "body": "@Override\n    public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents) throws CDKException {\n\n        logger.debug(\"initiate reaction: TautomerizationReaction\");\n\n        if (reactants.getAtomContainerCount() != 1) {\n            throw new CDKException(\"TautomerizationReaction only expects one reactant\");\n        }\n        if (agents != null) {\n            throw new CDKException(\"TautomerizationReaction don't expects agents\");\n        }\n\n        IReactionSet setOfReactions = reactants.getBuilder().newInstance(IReactionSet.class);\n        IAtomContainer reactant = reactants.getAtomContainer(0);\n\n        /*\n         * if the parameter hasActiveCenter is not fixed yet, set the active\n         * centers\n         */\n        IParameterReact ipr = super.getParameterClass(SetReactionCenter.class);\n        if (ipr != null && !ipr.isSetParameter()) setActiveCenters(reactant);\n\n        Iterator<IAtom> atoms = reactant.atoms().iterator();\n        while (atoms.hasNext()) {\n            IAtom atomi = atoms.next(); // Atom pos 1\n            if (atomi.getFlag(CDKConstants.REACTIVE_CENTER)\n                    && (atomi.getFormalCharge() == CDKConstants.UNSET ? 0 : atomi.getFormalCharge()) == 0\n                    && reactant.getConnectedSingleElectronsCount(atomi) == 0) {\n                Iterator<IBond> bondis = reactant.getConnectedBondsList(atomi).iterator();\n                while (bondis.hasNext()) {\n                    IBond bondi = bondis.next();\n                    if (bondi.getFlag(CDKConstants.REACTIVE_CENTER) && bondi.getOrder() == IBond.Order.DOUBLE) {\n                        IAtom atomj = bondi.getOther(atomi); // Atom pos 2\n                        if (atomj.getFlag(CDKConstants.REACTIVE_CENTER)\n                                && (atomj.getFormalCharge() == CDKConstants.UNSET ? 0 : atomj.getFormalCharge()) == 0\n                                && reactant.getConnectedSingleElectronsCount(atomj) == 0) {\n                            Iterator<IBond> bondjs = reactant.getConnectedBondsList(atomj).iterator();\n                            while (bondjs.hasNext()) {\n                                IBond bondj = bondjs.next();\n                                if (bondj.equals(bondi)) continue;\n                                if (bondj.getFlag(CDKConstants.REACTIVE_CENTER)\n                                        && bondj.getOrder() == IBond.Order.SINGLE) {\n                                    IAtom atomk = bondj.getOther(atomj); // Atom pos 3\n                                    if (atomk.getFlag(CDKConstants.REACTIVE_CENTER)\n                                            && (atomk.getFormalCharge() == CDKConstants.UNSET ? 0 : atomk\n                                                    .getFormalCharge()) == 0\n                                            && reactant.getConnectedSingleElectronsCount(atomk) == 0) {\n                                        Iterator<IBond> bondks = reactant.getConnectedBondsList(atomk).iterator();\n                                        while (bondks.hasNext()) {\n                                            IBond bondk = bondks.next();\n                                            if (bondk.equals(bondj)) continue;\n                                            if (bondk.getFlag(CDKConstants.REACTIVE_CENTER)\n                                                    && bondk.getOrder() == IBond.Order.SINGLE) {\n                                                IAtom atoml = bondk.getOther(atomk); // Atom pos 4\n                                                if (atoml.getFlag(CDKConstants.REACTIVE_CENTER)\n                                                        && atoml.getSymbol().equals(\"H\")) {\n\n                                                    ArrayList<IAtom> atomList = new ArrayList<IAtom>();\n                                                    atomList.add(atomi);\n                                                    atomList.add(atomj);\n                                                    atomList.add(atomk);\n                                                    atomList.add(atoml);\n                                                    ArrayList<IBond> bondList = new ArrayList<IBond>();\n                                                    bondList.add(bondi);\n                                                    bondList.add(bondj);\n                                                    bondList.add(bondk);\n\n                                                    IAtomContainerSet moleculeSet = reactant.getBuilder().newInstance(\n                                                            IAtomContainerSet.class);\n                                                    moleculeSet.addAtomContainer(reactant);\n                                                    IReaction reaction = mechanism.initiate(moleculeSet, atomList,\n                                                            bondList);\n                                                    if (reaction == null)\n                                                        continue;\n                                                    else\n                                                        setOfReactions.addReaction(reaction);\n\n                                                    break; // because of the others atoms are hydrogen too.\n                                                }\n                                            }\n\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                }\n\n            }\n        }\n\n        return setOfReactions;\n    }", "signature": "IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "full_signature": "@Override public IReactionSet initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "class_method_signature": "TautomerizationReaction.initiate(IAtomContainerSet reactants, IAtomContainerSet agents)", "testcase": false, "constructor": false, "invocations": ["debug", "getAtomContainerCount", "newInstance", "getBuilder", "getAtomContainer", "getParameterClass", "isSetParameter", "setActiveCenters", "iterator", "atoms", "hasNext", "next", "getFlag", "getFormalCharge", "getFormalCharge", "getConnectedSingleElectronsCount", "iterator", "getConnectedBondsList", "hasNext", "next", "getFlag", "getOrder", "getOther", "getFlag", "getFormalCharge", "getFormalCharge", "getConnectedSingleElectronsCount", "iterator", "getConnectedBondsList", "hasNext", "next", "equals", "getFlag", "getOrder", "getOther", "getFlag", "getFormalCharge", "getFormalCharge", "getConnectedSingleElectronsCount", "iterator", "getConnectedBondsList", "hasNext", "next", "equals", "getFlag", "getOrder", "getOther", "getFlag", "equals", "getSymbol", "add", "add", "add", "add", "add", "add", "add", "newInstance", "getBuilder", "addAtomContainer", "initiate", "addReaction"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}