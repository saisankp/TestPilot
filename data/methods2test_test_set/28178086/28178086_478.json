{"test_class": {"identifier": "AbstractModelControllerTest", "superclass": "", "interfaces": "", "fields": [], "file": "jtstoolkit/src/test/java/ec/tstoolkit/modelling/arima/AbstractModelControllerTest.java"}, "test_case": {"identifier": "testSomeController", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSomeController() {\n        \n        ModellingContext context=new ModellingContext();\n        TramoSpecification.TR0.build().process(Data.X, context);\n        SomeController controller = new SomeController();\n        // use CALCULA_MODEL\n        controller.setEstimator(new ModelEstimator());\n        controller.process(context);\n    }", "signature": "void testSomeController()", "full_signature": "@Test public void testSomeController()", "class_method_signature": "AbstractModelControllerTest.testSomeController()", "testcase": true, "constructor": false, "invocations": ["process", "build", "setEstimator", "process"]}, "focal_class": {"identifier": "AbstractModelController", "superclass": "", "interfaces": "implements IModelController", "fields": [{"original_string": "private IModelEstimator estimator_;", "modifier": "private", "type": "IModelEstimator", "declarator": "estimator_", "var_name": "estimator_"}, {"original_string": "private PreprocessingModel refmodel_;", "modifier": "private", "type": "PreprocessingModel", "declarator": "refmodel_", "var_name": "refmodel_"}], "methods": [{"identifier": "getReferenceModel", "parameters": "()", "modifiers": "@Override public", "return": "PreprocessingModel", "signature": "PreprocessingModel getReferenceModel()", "full_signature": "@Override public PreprocessingModel getReferenceModel()", "class_method_signature": "AbstractModelController.getReferenceModel()", "testcase": false, "constructor": false}, {"identifier": "setReferenceModel", "parameters": "(PreprocessingModel model)", "modifiers": "@Override public", "return": "void", "signature": "void setReferenceModel(PreprocessingModel model)", "full_signature": "@Override public void setReferenceModel(PreprocessingModel model)", "class_method_signature": "AbstractModelController.setReferenceModel(PreprocessingModel model)", "testcase": false, "constructor": false}, {"identifier": "getEstimator", "parameters": "()", "modifiers": "@Override public", "return": "IModelEstimator", "signature": "IModelEstimator getEstimator()", "full_signature": "@Override public IModelEstimator getEstimator()", "class_method_signature": "AbstractModelController.getEstimator()", "testcase": false, "constructor": false}, {"identifier": "setEstimator", "parameters": "(IModelEstimator estimator)", "modifiers": "@Override public", "return": "void", "signature": "void setEstimator(IModelEstimator estimator)", "full_signature": "@Override public void setEstimator(IModelEstimator estimator)", "class_method_signature": "AbstractModelController.setEstimator(IModelEstimator estimator)", "testcase": false, "constructor": false}, {"identifier": "checkMean", "parameters": "(ModellingContext context)", "modifiers": "protected", "return": "boolean", "signature": "boolean checkMean(ModellingContext context)", "full_signature": "protected boolean checkMean(ModellingContext context)", "class_method_signature": "AbstractModelController.checkMean(ModellingContext context)", "testcase": false, "constructor": false}, {"identifier": "estimate", "parameters": "(ModellingContext context, boolean checkmean)", "modifiers": "protected", "return": "boolean", "signature": "boolean estimate(ModellingContext context, boolean checkmean)", "full_signature": "protected boolean estimate(ModellingContext context, boolean checkmean)", "class_method_signature": "AbstractModelController.estimate(ModellingContext context, boolean checkmean)", "testcase": false, "constructor": false}, {"identifier": "transferInformation", "parameters": "(ModellingContext from, ModellingContext to)", "modifiers": "protected", "return": "void", "signature": "void transferInformation(ModellingContext from, ModellingContext to)", "full_signature": "protected void transferInformation(ModellingContext from, ModellingContext to)", "class_method_signature": "AbstractModelController.transferInformation(ModellingContext from, ModellingContext to)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/modelling/arima/AbstractModelController.java"}, "focal_method": {"identifier": "setEstimator", "parameters": "(IModelEstimator estimator)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void setEstimator(IModelEstimator estimator) {\n        estimator_ = estimator;\n    }", "signature": "void setEstimator(IModelEstimator estimator)", "full_signature": "@Override public void setEstimator(IModelEstimator estimator)", "class_method_signature": "AbstractModelController.setEstimator(IModelEstimator estimator)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}