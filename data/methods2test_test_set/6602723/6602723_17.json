{"test_class": {"identifier": "TestCircuitBreakerBeanFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CircuitBreakerBeanFactory factory;", "modifier": "private", "type": "CircuitBreakerBeanFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private CircuitBreakerConfig config;", "modifier": "private", "type": "CircuitBreakerConfig", "declarator": "config", "var_name": "config"}, {"original_string": "MBeanExporter mockMBeanExporter;", "modifier": "", "type": "MBeanExporter", "declarator": "mockMBeanExporter", "var_name": "mockMBeanExporter"}], "file": "jrugged-spring/src/test/java/org/fishwife/jrugged/spring/TestCircuitBreakerBeanFactory.java"}, "test_case": {"identifier": "testCreateDuplicateCircuitBreaker", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateDuplicateCircuitBreaker() {\n        String name = \"testCreate\";\n        CircuitBreaker createdBreaker = factory.createCircuitBreaker(name, config);\n        CircuitBreaker secondBreaker = factory.createCircuitBreaker(name, config);\n\n        assertSame(createdBreaker, secondBreaker);\n    }", "signature": "void testCreateDuplicateCircuitBreaker()", "full_signature": "@Test public void testCreateDuplicateCircuitBreaker()", "class_method_signature": "TestCircuitBreakerBeanFactory.testCreateDuplicateCircuitBreaker()", "testcase": true, "constructor": false, "invocations": ["createCircuitBreaker", "createCircuitBreaker", "assertSame"]}, "focal_class": {"identifier": "CircuitBreakerBeanFactory", "superclass": "extends CircuitBreakerFactory", "interfaces": "implements InitializingBean", "fields": [{"original_string": "@Autowired(required = false)\n    private MBeanExportOperations mBeanExportOperations;", "modifier": "@Autowired(required = false)\n    private", "type": "MBeanExportOperations", "declarator": "mBeanExportOperations", "var_name": "mBeanExportOperations"}, {"original_string": "private String packageScanBase;", "modifier": "private", "type": "String", "declarator": "packageScanBase", "var_name": "packageScanBase"}], "methods": [{"identifier": "afterPropertiesSet", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void afterPropertiesSet()", "full_signature": "public void afterPropertiesSet()", "class_method_signature": "CircuitBreakerBeanFactory.afterPropertiesSet()", "testcase": false, "constructor": false}, {"identifier": "setMBeanExporter", "parameters": "(MBeanExporter mBeanExporter)", "modifiers": "@Deprecated public", "return": "void", "signature": "void setMBeanExporter(MBeanExporter mBeanExporter)", "full_signature": "@Deprecated public void setMBeanExporter(MBeanExporter mBeanExporter)", "class_method_signature": "CircuitBreakerBeanFactory.setMBeanExporter(MBeanExporter mBeanExporter)", "testcase": false, "constructor": false}, {"identifier": "setMBeanExportOperations", "parameters": "(MBeanExportOperations mBeanExportOperations)", "modifiers": "public", "return": "void", "signature": "void setMBeanExportOperations(MBeanExportOperations mBeanExportOperations)", "full_signature": "public void setMBeanExportOperations(MBeanExportOperations mBeanExportOperations)", "class_method_signature": "CircuitBreakerBeanFactory.setMBeanExportOperations(MBeanExportOperations mBeanExportOperations)", "testcase": false, "constructor": false}, {"identifier": "setPackageScanBase", "parameters": "(String packageScanBase)", "modifiers": "public", "return": "void", "signature": "void setPackageScanBase(String packageScanBase)", "full_signature": "public void setPackageScanBase(String packageScanBase)", "class_method_signature": "CircuitBreakerBeanFactory.setPackageScanBase(String packageScanBase)", "testcase": false, "constructor": false}, {"identifier": "buildAnnotatedCircuitBreakers", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void buildAnnotatedCircuitBreakers()", "full_signature": "public void buildAnnotatedCircuitBreakers()", "class_method_signature": "CircuitBreakerBeanFactory.buildAnnotatedCircuitBreakers()", "testcase": false, "constructor": false}, {"identifier": "createCircuitBreaker", "parameters": "(String name, CircuitBreakerConfig config)", "modifiers": "public synchronized", "return": "CircuitBreaker", "signature": "CircuitBreaker createCircuitBreaker(String name, CircuitBreakerConfig config)", "full_signature": "public synchronized CircuitBreaker createCircuitBreaker(String name, CircuitBreakerConfig config)", "class_method_signature": "CircuitBreakerBeanFactory.createCircuitBreaker(String name, CircuitBreakerConfig config)", "testcase": false, "constructor": false}, {"identifier": "findCircuitBreakerBean", "parameters": "(String name)", "modifiers": "public", "return": "CircuitBreakerBean", "signature": "CircuitBreakerBean findCircuitBreakerBean(String name)", "full_signature": "public CircuitBreakerBean findCircuitBreakerBean(String name)", "class_method_signature": "CircuitBreakerBeanFactory.findCircuitBreakerBean(String name)", "testcase": false, "constructor": false}], "file": "jrugged-spring/src/main/java/org/fishwife/jrugged/spring/CircuitBreakerBeanFactory.java"}, "focal_method": {"identifier": "createCircuitBreaker", "parameters": "(String name, CircuitBreakerConfig config)", "modifiers": "public synchronized", "return": "CircuitBreaker", "body": "public synchronized CircuitBreaker createCircuitBreaker(String name, CircuitBreakerConfig config) {\n\n        CircuitBreaker circuitBreaker = findCircuitBreaker(name);\n\n        if (circuitBreaker == null) {\n            circuitBreaker = new CircuitBreakerBean(name);\n\n            configureCircuitBreaker(name, circuitBreaker, config);\n\n            if (mBeanExportOperations != null) {\n                ObjectName objectName;\n\n                try {\n                    objectName = new ObjectName(\"org.fishwife.jrugged.spring:type=CircuitBreakerBean,\" + \"name=\" + name);\n                } catch (MalformedObjectNameException e) {\n                    throw new IllegalArgumentException(\"Invalid MBean Name \" + name, e);\n\n                }\n\n                mBeanExportOperations.registerManagedResource(circuitBreaker, objectName);\n            }\n\n            addCircuitBreakerToMap(name, circuitBreaker);\n        }\n\n        return circuitBreaker;\n    }", "signature": "CircuitBreaker createCircuitBreaker(String name, CircuitBreakerConfig config)", "full_signature": "public synchronized CircuitBreaker createCircuitBreaker(String name, CircuitBreakerConfig config)", "class_method_signature": "CircuitBreakerBeanFactory.createCircuitBreaker(String name, CircuitBreakerConfig config)", "testcase": false, "constructor": false, "invocations": ["findCircuitBreaker", "configureCircuitBreaker", "registerManagedResource", "addCircuitBreakerToMap"]}, "repository": {"repo_id": 6602723, "url": "https://github.com/Comcast/jrugged", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 236, "size": 1302, "license": "licensed"}}