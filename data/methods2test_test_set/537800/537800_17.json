{"test_class": {"identifier": "MemoryUsageGaugeSetTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final MemoryUsage heap = mock(MemoryUsage.class);", "modifier": "private final", "type": "MemoryUsage", "declarator": "heap = mock(MemoryUsage.class)", "var_name": "heap"}, {"original_string": "private final MemoryUsage nonHeap = mock(MemoryUsage.class);", "modifier": "private final", "type": "MemoryUsage", "declarator": "nonHeap = mock(MemoryUsage.class)", "var_name": "nonHeap"}, {"original_string": "private final MemoryUsage pool = mock(MemoryUsage.class);", "modifier": "private final", "type": "MemoryUsage", "declarator": "pool = mock(MemoryUsage.class)", "var_name": "pool"}, {"original_string": "private final MemoryUsage weirdPool = mock(MemoryUsage.class);", "modifier": "private final", "type": "MemoryUsage", "declarator": "weirdPool = mock(MemoryUsage.class)", "var_name": "weirdPool"}, {"original_string": "private final MemoryUsage weirdCollection = mock(MemoryUsage.class);", "modifier": "private final", "type": "MemoryUsage", "declarator": "weirdCollection = mock(MemoryUsage.class)", "var_name": "weirdCollection"}, {"original_string": "private final MemoryMXBean mxBean = mock(MemoryMXBean.class);", "modifier": "private final", "type": "MemoryMXBean", "declarator": "mxBean = mock(MemoryMXBean.class)", "var_name": "mxBean"}, {"original_string": "private final MemoryPoolMXBean memoryPool = mock(MemoryPoolMXBean.class);", "modifier": "private final", "type": "MemoryPoolMXBean", "declarator": "memoryPool = mock(MemoryPoolMXBean.class)", "var_name": "memoryPool"}, {"original_string": "private final MemoryPoolMXBean weirdMemoryPool = mock(MemoryPoolMXBean.class);", "modifier": "private final", "type": "MemoryPoolMXBean", "declarator": "weirdMemoryPool = mock(MemoryPoolMXBean.class)", "var_name": "weirdMemoryPool"}, {"original_string": "private final MemoryUsageGaugeSet gauges = new MemoryUsageGaugeSet(mxBean,\n            Arrays.asList(memoryPool,\n                    weirdMemoryPool));", "modifier": "private final", "type": "MemoryUsageGaugeSet", "declarator": "gauges = new MemoryUsageGaugeSet(mxBean,\n            Arrays.asList(memoryPool,\n                    weirdMemoryPool))", "var_name": "gauges"}], "file": "metrics-jvm/src/test/java/com/codahale/metrics/jvm/MemoryUsageGaugeSetTest.java"}, "test_case": {"identifier": "hasAGaugeForNonHeapUsage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void hasAGaugeForNonHeapUsage() {\n        final Gauge gauge = (Gauge) gauges.getMetrics().get(\"non-heap.usage\");\n\n        assertThat(gauge.getValue())\n                .isEqualTo(0.75);\n    }", "signature": "void hasAGaugeForNonHeapUsage()", "full_signature": "@Test public void hasAGaugeForNonHeapUsage()", "class_method_signature": "MemoryUsageGaugeSetTest.hasAGaugeForNonHeapUsage()", "testcase": true, "constructor": false, "invocations": ["get", "getMetrics", "isEqualTo", "assertThat", "getValue"]}, "focal_class": {"identifier": "MemoryUsageGaugeSet", "superclass": "", "interfaces": "implements MetricSet", "fields": [{"original_string": "private static final Pattern WHITESPACE = Pattern.compile(\"[\\\\s]+\");", "modifier": "private static final", "type": "Pattern", "declarator": "WHITESPACE = Pattern.compile(\"[\\\\s]+\")", "var_name": "WHITESPACE"}, {"original_string": "private final MemoryMXBean mxBean;", "modifier": "private final", "type": "MemoryMXBean", "declarator": "mxBean", "var_name": "mxBean"}, {"original_string": "private final List<MemoryPoolMXBean> memoryPools;", "modifier": "private final", "type": "List<MemoryPoolMXBean>", "declarator": "memoryPools", "var_name": "memoryPools"}], "methods": [{"identifier": "MemoryUsageGaugeSet", "parameters": "()", "modifiers": "public", "return": "", "signature": " MemoryUsageGaugeSet()", "full_signature": "public  MemoryUsageGaugeSet()", "class_method_signature": "MemoryUsageGaugeSet.MemoryUsageGaugeSet()", "testcase": false, "constructor": true}, {"identifier": "MemoryUsageGaugeSet", "parameters": "(MemoryMXBean mxBean,\n                               Collection<MemoryPoolMXBean> memoryPools)", "modifiers": "public", "return": "", "signature": " MemoryUsageGaugeSet(MemoryMXBean mxBean,\n                               Collection<MemoryPoolMXBean> memoryPools)", "full_signature": "public  MemoryUsageGaugeSet(MemoryMXBean mxBean,\n                               Collection<MemoryPoolMXBean> memoryPools)", "class_method_signature": "MemoryUsageGaugeSet.MemoryUsageGaugeSet(MemoryMXBean mxBean,\n                               Collection<MemoryPoolMXBean> memoryPools)", "testcase": false, "constructor": true}, {"identifier": "getMetrics", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Metric>", "signature": "Map<String, Metric> getMetrics()", "full_signature": "@Override public Map<String, Metric> getMetrics()", "class_method_signature": "MemoryUsageGaugeSet.getMetrics()", "testcase": false, "constructor": false}], "file": "metrics-jvm/src/main/java/com/codahale/metrics/jvm/MemoryUsageGaugeSet.java"}, "focal_method": {"identifier": "getMetrics", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Metric>", "body": "@Override\n    public Map<String, Metric> getMetrics() {\n        final Map<String, Metric> gauges = new HashMap<>();\n\n        gauges.put(\"total.init\", (Gauge<Long>) () -> mxBean.getHeapMemoryUsage().getInit() +\n                mxBean.getNonHeapMemoryUsage().getInit());\n        gauges.put(\"total.used\", (Gauge<Long>) () -> mxBean.getHeapMemoryUsage().getUsed() +\n                mxBean.getNonHeapMemoryUsage().getUsed());\n        gauges.put(\"total.max\", (Gauge<Long>) () -> mxBean.getHeapMemoryUsage().getMax() +\n                mxBean.getNonHeapMemoryUsage().getMax());\n        gauges.put(\"total.committed\", (Gauge<Long>) () -> mxBean.getHeapMemoryUsage().getCommitted() +\n                mxBean.getNonHeapMemoryUsage().getCommitted());\n\n        gauges.put(\"heap.init\", (Gauge<Long>) () -> mxBean.getHeapMemoryUsage().getInit());\n        gauges.put(\"heap.used\", (Gauge<Long>) () -> mxBean.getHeapMemoryUsage().getUsed());\n        gauges.put(\"heap.max\", (Gauge<Long>) () -> mxBean.getHeapMemoryUsage().getMax());\n        gauges.put(\"heap.committed\", (Gauge<Long>) () -> mxBean.getHeapMemoryUsage().getCommitted());\n        gauges.put(\"heap.usage\", new RatioGauge() {\n            @Override\n            protected Ratio getRatio() {\n                final MemoryUsage usage = mxBean.getHeapMemoryUsage();\n                return Ratio.of(usage.getUsed(), usage.getMax());\n            }\n        });\n\n        gauges.put(\"non-heap.init\", (Gauge<Long>) () -> mxBean.getNonHeapMemoryUsage().getInit());\n        gauges.put(\"non-heap.used\", (Gauge<Long>) () -> mxBean.getNonHeapMemoryUsage().getUsed());\n        gauges.put(\"non-heap.max\", (Gauge<Long>) () -> mxBean.getNonHeapMemoryUsage().getMax());\n        gauges.put(\"non-heap.committed\", (Gauge<Long>) () -> mxBean.getNonHeapMemoryUsage().getCommitted());\n        gauges.put(\"non-heap.usage\", new RatioGauge() {\n            @Override\n            protected Ratio getRatio() {\n                final MemoryUsage usage = mxBean.getNonHeapMemoryUsage();\n                return Ratio.of(usage.getUsed(), usage.getMax());\n            }\n        });\n\n        for (final MemoryPoolMXBean pool : memoryPools) {\n            final String poolName = name(\"pools\", WHITESPACE.matcher(pool.getName()).replaceAll(\"-\"));\n\n            gauges.put(name(poolName, \"usage\"), new RatioGauge() {\n                @Override\n                protected Ratio getRatio() {\n                    MemoryUsage usage = pool.getUsage();\n                    return Ratio.of(usage.getUsed(),\n                            usage.getMax() == -1 ? usage.getCommitted() : usage.getMax());\n                }\n            });\n\n            gauges.put(name(poolName, \"max\"), (Gauge<Long>) () -> pool.getUsage().getMax());\n            gauges.put(name(poolName, \"used\"), (Gauge<Long>) () -> pool.getUsage().getUsed());\n            gauges.put(name(poolName, \"committed\"), (Gauge<Long>) () -> pool.getUsage().getCommitted());\n\n            // Only register GC usage metrics if the memory pool supports usage statistics.\n            if (pool.getCollectionUsage() != null) {\n                gauges.put(name(poolName, \"used-after-gc\"), (Gauge<Long>) () ->\n                        pool.getCollectionUsage().getUsed());\n            }\n\n            gauges.put(name(poolName, \"init\"), (Gauge<Long>) () -> pool.getUsage().getInit());\n        }\n\n        return Collections.unmodifiableMap(gauges);\n    }", "signature": "Map<String, Metric> getMetrics()", "full_signature": "@Override public Map<String, Metric> getMetrics()", "class_method_signature": "MemoryUsageGaugeSet.getMetrics()", "testcase": false, "constructor": false, "invocations": ["put", "getInit", "getHeapMemoryUsage", "getInit", "getNonHeapMemoryUsage", "put", "getUsed", "getHeapMemoryUsage", "getUsed", "getNonHeapMemoryUsage", "put", "getMax", "getHeapMemoryUsage", "getMax", "getNonHeapMemoryUsage", "put", "getCommitted", "getHeapMemoryUsage", "getCommitted", "getNonHeapMemoryUsage", "put", "getInit", "getHeapMemoryUsage", "put", "getUsed", "getHeapMemoryUsage", "put", "getMax", "getHeapMemoryUsage", "put", "getCommitted", "getHeapMemoryUsage", "put", "getHeapMemoryUsage", "of", "getUsed", "getMax", "put", "getInit", "getNonHeapMemoryUsage", "put", "getUsed", "getNonHeapMemoryUsage", "put", "getMax", "getNonHeapMemoryUsage", "put", "getCommitted", "getNonHeapMemoryUsage", "put", "getNonHeapMemoryUsage", "of", "getUsed", "getMax", "name", "replaceAll", "matcher", "getName", "put", "name", "getUsage", "of", "getUsed", "getMax", "getCommitted", "getMax", "put", "name", "getMax", "getUsage", "put", "name", "getUsed", "getUsage", "put", "name", "getCommitted", "getUsage", "getCollectionUsage", "put", "name", "getUsed", "getCollectionUsage", "put", "name", "getInit", "getUsage", "unmodifiableMap"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}