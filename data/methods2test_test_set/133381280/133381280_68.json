{"test_class": {"identifier": "DefaultHttpRequestProcessorTest", "superclass": "", "interfaces": "", "fields": [], "file": "client/lookout-reg-server/src/test/java/com/alipay/lookout/remote/report/support/http/DefaultHttpRequestProcessorTest.java"}, "test_case": {"identifier": "testGetHttpClient", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetHttpClient() {\n        CloseableHttpClient client = DefaultHttpRequestProcessor.getHttpClent();\n        Assert.assertSame(client, DefaultHttpRequestProcessor.getHttpClent());\n    }", "signature": "void testGetHttpClient()", "full_signature": "@Test public void testGetHttpClient()", "class_method_signature": "DefaultHttpRequestProcessorTest.testGetHttpClient()", "testcase": true, "constructor": false, "invocations": ["getHttpClent", "assertSame", "getHttpClent"]}, "focal_class": {"identifier": "DefaultHttpRequestProcessor", "superclass": "extends ReportDecider", "interfaces": "", "fields": [{"original_string": "private static final Logger        logger                       = LookoutLoggerFactory\n                                                                        .getLogger(DefaultHttpRequestProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger                       = LookoutLoggerFactory\n                                                                        .getLogger(DefaultHttpRequestProcessor.class)", "var_name": "logger"}, {"original_string": "public static final String         CLIENT_IP_HEADER_NAME        = \"Client-Ip\";", "modifier": "public static final", "type": "String", "declarator": "CLIENT_IP_HEADER_NAME        = \"Client-Ip\"", "var_name": "CLIENT_IP_HEADER_NAME"}, {"original_string": "public static final String         LOOKOUT_REPORT_FAIL_COUNT_ID = \"lookout.report.fail\";", "modifier": "public static final", "type": "String", "declarator": "LOOKOUT_REPORT_FAIL_COUNT_ID = \"lookout.report.fail\"", "var_name": "LOOKOUT_REPORT_FAIL_COUNT_ID"}, {"original_string": "public static final String         WAIT_MINUTES                 = \"Wait-Minutes\";", "modifier": "public static final", "type": "String", "declarator": "WAIT_MINUTES                 = \"Wait-Minutes\"", "var_name": "WAIT_MINUTES"}, {"original_string": "static final String                CLIENT_VERSION               = \"LOOKOUT-CLIENT-V1\";", "modifier": "static final", "type": "String", "declarator": "CLIENT_VERSION               = \"LOOKOUT-CLIENT-V1\"", "var_name": "CLIENT_VERSION"}, {"original_string": "static final String                APP_HEADER_NAME              = \"app\";", "modifier": "static final", "type": "String", "declarator": "APP_HEADER_NAME              = \"app\"", "var_name": "APP_HEADER_NAME"}, {"original_string": "static final String                CONFIG_HEADER_NAME           = \"Conf-Id\";", "modifier": "static final", "type": "String", "declarator": "CONFIG_HEADER_NAME           = \"Conf-Id\"", "var_name": "CONFIG_HEADER_NAME"}, {"original_string": "private static final String        CELL_HEADER_NAME             = \"Cell\";", "modifier": "private static final", "type": "String", "declarator": "CELL_HEADER_NAME             = \"Cell\"", "var_name": "CELL_HEADER_NAME"}, {"original_string": "private final String               clientIp                     = NetworkUtil.getLocalAddress()\n                                                                        .getHostAddress();", "modifier": "private final", "type": "String", "declarator": "clientIp                     = NetworkUtil.getLocalAddress()\n                                                                        .getHostAddress()", "var_name": "clientIp"}, {"original_string": "final static RequestConfig         reqConf                      = buildRequestConfig();", "modifier": "final static", "type": "RequestConfig", "declarator": "reqConf                      = buildRequestConfig()", "var_name": "reqConf"}, {"original_string": "static CloseableHttpClient         httpClientCache;", "modifier": "static", "type": "CloseableHttpClient", "declarator": "httpClientCache", "var_name": "httpClientCache"}, {"original_string": "private static Runnable            clearIdleConnectionsTask;", "modifier": "private static", "type": "Runnable", "declarator": "clearIdleConnectionsTask", "var_name": "clearIdleConnectionsTask"}, {"original_string": "private static final AtomicBoolean httpClientInitialized        = new AtomicBoolean(false);", "modifier": "private static final", "type": "AtomicBoolean", "declarator": "httpClientInitialized        = new AtomicBoolean(false)", "var_name": "httpClientInitialized"}, {"original_string": "private final ReportConfigUtil     reportConfigUtil             = new ReportConfigUtil();", "modifier": "private final", "type": "ReportConfigUtil", "declarator": "reportConfigUtil             = new ReportConfigUtil()", "var_name": "reportConfigUtil"}], "methods": [{"identifier": "DefaultHttpRequestProcessor", "parameters": "(AddressService addressService, MetricConfig metricConfig)", "modifiers": "public", "return": "", "signature": " DefaultHttpRequestProcessor(AddressService addressService, MetricConfig metricConfig)", "full_signature": "public  DefaultHttpRequestProcessor(AddressService addressService, MetricConfig metricConfig)", "class_method_signature": "DefaultHttpRequestProcessor.DefaultHttpRequestProcessor(AddressService addressService, MetricConfig metricConfig)", "testcase": false, "constructor": true}, {"identifier": "sendGetRequest", "parameters": "(final HttpGet httpGet, Map<String, String> metadata)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean sendGetRequest(final HttpGet httpGet, Map<String, String> metadata)", "full_signature": "@Override public boolean sendGetRequest(final HttpGet httpGet, Map<String, String> metadata)", "class_method_signature": "DefaultHttpRequestProcessor.sendGetRequest(final HttpGet httpGet, Map<String, String> metadata)", "testcase": false, "constructor": false}, {"identifier": "sendGetRequest", "parameters": "(final HttpGet httpGet, Map<String, String> metadata,\n                                  final ResultConsumer resultConsumer)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean sendGetRequest(final HttpGet httpGet, Map<String, String> metadata,\n                                  final ResultConsumer resultConsumer)", "full_signature": "@Override public boolean sendGetRequest(final HttpGet httpGet, Map<String, String> metadata,\n                                  final ResultConsumer resultConsumer)", "class_method_signature": "DefaultHttpRequestProcessor.sendGetRequest(final HttpGet httpGet, Map<String, String> metadata,\n                                  final ResultConsumer resultConsumer)", "testcase": false, "constructor": false}, {"identifier": "sendPostRequest", "parameters": "(final HttpPost httpPost, Map<String, String> metadata)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean sendPostRequest(final HttpPost httpPost, Map<String, String> metadata)", "full_signature": "@Override public boolean sendPostRequest(final HttpPost httpPost, Map<String, String> metadata)", "class_method_signature": "DefaultHttpRequestProcessor.sendPostRequest(final HttpPost httpPost, Map<String, String> metadata)", "testcase": false, "constructor": false}, {"identifier": "addCommonHeaders", "parameters": "(HttpRequestBase httpMtd, Map<String, String> metadata)", "modifiers": "private", "return": "void", "signature": "void addCommonHeaders(HttpRequestBase httpMtd, Map<String, String> metadata)", "full_signature": "private void addCommonHeaders(HttpRequestBase httpMtd, Map<String, String> metadata)", "class_method_signature": "DefaultHttpRequestProcessor.addCommonHeaders(HttpRequestBase httpMtd, Map<String, String> metadata)", "testcase": false, "constructor": false}, {"identifier": "sendRequest", "parameters": "(HttpRequestBase requestBase, ResponseHandler<T> responseHandler)", "modifiers": "private", "return": "T", "signature": "T sendRequest(HttpRequestBase requestBase, ResponseHandler<T> responseHandler)", "full_signature": "private T sendRequest(HttpRequestBase requestBase, ResponseHandler<T> responseHandler)", "class_method_signature": "DefaultHttpRequestProcessor.sendRequest(HttpRequestBase requestBase, ResponseHandler<T> responseHandler)", "testcase": false, "constructor": false}, {"identifier": "handleErrorResponse", "parameters": "(HttpResponse response, HttpRequestBase request)", "modifiers": "public", "return": "void", "signature": "void handleErrorResponse(HttpResponse response, HttpRequestBase request)", "full_signature": "public void handleErrorResponse(HttpResponse response, HttpRequestBase request)", "class_method_signature": "DefaultHttpRequestProcessor.handleErrorResponse(HttpResponse response, HttpRequestBase request)", "testcase": false, "constructor": false}, {"identifier": "changeSilentTime", "parameters": "(String waitMinutesStr)", "modifiers": "private", "return": "void", "signature": "void changeSilentTime(String waitMinutesStr)", "full_signature": "private void changeSilentTime(String waitMinutesStr)", "class_method_signature": "DefaultHttpRequestProcessor.changeSilentTime(String waitMinutesStr)", "testcase": false, "constructor": false}, {"identifier": "getHttpClent", "parameters": "()", "modifiers": "static", "return": "CloseableHttpClient", "signature": "CloseableHttpClient getHttpClent()", "full_signature": "static CloseableHttpClient getHttpClent()", "class_method_signature": "DefaultHttpRequestProcessor.getHttpClent()", "testcase": false, "constructor": false}, {"identifier": "buildRequestConfig", "parameters": "()", "modifiers": "static", "return": "RequestConfig", "signature": "RequestConfig buildRequestConfig()", "full_signature": "static RequestConfig buildRequestConfig()", "class_method_signature": "DefaultHttpRequestProcessor.buildRequestConfig()", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(List<LookoutMeasurement> measures)", "modifiers": "@Override public", "return": "List<LookoutMeasurement>", "signature": "List<LookoutMeasurement> filter(List<LookoutMeasurement> measures)", "full_signature": "@Override public List<LookoutMeasurement> filter(List<LookoutMeasurement> measures)", "class_method_signature": "DefaultHttpRequestProcessor.filter(List<LookoutMeasurement> measures)", "testcase": false, "constructor": false}], "file": "client/lookout-reg-server/src/main/java/com/alipay/lookout/remote/report/support/http/DefaultHttpRequestProcessor.java"}, "focal_method": {"identifier": "getHttpClent", "parameters": "()", "modifiers": "static", "return": "CloseableHttpClient", "body": "static CloseableHttpClient getHttpClent() {\n        if (httpClientCache != null) {\n            return httpClientCache;\n        }\n        if (httpClientInitialized.compareAndSet(false, true)) {\n            final PoolingHttpClientConnectionManager connManager = new PoolingHttpClientConnectionManager();\n            connManager.setDefaultMaxPerRoute(2);\n            connManager.setMaxTotal(4);\n            httpClientCache = HttpClientBuilder.create().setConnectionManager(connManager)\n                .setRetryHandler(new DefaultHttpRequestRetryHandler(1, false))\n                .setUserAgent(CLIENT_VERSION).build();\n            clearIdleConnectionsTask = new Runnable() {\n                @Override\n                public void run() {\n                    try {\n                        connManager.closeIdleConnections(30, TimeUnit.SECONDS);\n                        connManager.closeExpiredConnections();\n                    } catch (Throwable e) {\n                        logger.warn(\"fail to close idle connections.{}\", e.getMessage());\n                    }\n                }\n            };\n            return httpClientCache;\n        }\n        return null; //\u53d1\u751f\u5e76\u53d1\u521d\u59cb\u5316\u60c5\u51b5;\n    }", "signature": "CloseableHttpClient getHttpClent()", "full_signature": "static CloseableHttpClient getHttpClent()", "class_method_signature": "DefaultHttpRequestProcessor.getHttpClent()", "testcase": false, "constructor": false, "invocations": ["compareAndSet", "setDefaultMaxPerRoute", "setMaxTotal", "build", "setUserAgent", "setRetryHandler", "setConnectionManager", "create", "closeIdleConnections", "closeExpiredConnections", "warn", "getMessage"]}, "repository": {"repo_id": 133381280, "url": "https://github.com/sofastack/sofa-lookout", "language": "Java", "is_fork": false, "fork_count": 113, "stargazer_count": 318, "size": 1394, "license": "licensed"}}