{"test_class": {"identifier": "PomFileTest", "superclass": "extends TransformationUtilityTestHelper", "interfaces": "", "fields": [{"original_string": "private static Model model;", "modifier": "private static", "type": "Model", "declarator": "model", "var_name": "model"}], "file": "butterfly-utilities/src/test/java/com/paypal/butterfly/utilities/operations/pom/PomFileTest.java"}, "test_case": {"identifier": "existentWarnNotAddTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void existentWarnNotAddTest() {\n        TOExecutionResult executionResult = new PomFile(model).relative(\"/\").warnNotAddIfPresent().execution(transformedAppFolder, transformationContext);\n        assertEquals(executionResult.getType(), TOExecutionResult.Type.WARNING);\n        assertNull(executionResult.getException());\n        assertEquals(executionResult.getWarnings().get(0).getClass(), TransformationOperationException.class);\n        assertEquals(executionResult.getWarnings().get(0).getMessage(), \"There is already a pom file at /\");\n    }", "signature": "void existentWarnNotAddTest()", "full_signature": "@Test public void existentWarnNotAddTest()", "class_method_signature": "PomFileTest.existentWarnNotAddTest()", "testcase": true, "constructor": false, "invocations": ["execution", "warnNotAddIfPresent", "relative", "assertEquals", "getType", "assertNull", "getException", "assertEquals", "getClass", "get", "getWarnings", "assertEquals", "getMessage", "get", "getWarnings"]}, "focal_class": {"identifier": "PomFile", "superclass": "extends AddElementTO<PomFile>", "interfaces": "", "fields": [{"original_string": "private static final String DESCRIPTION = \"Writes a pom.xml file at %s given a Model object%s\";", "modifier": "private static final", "type": "String", "declarator": "DESCRIPTION = \"Writes a pom.xml file at %s given a Model object%s\"", "var_name": "DESCRIPTION"}, {"original_string": "private String attribute;", "modifier": "private", "type": "String", "declarator": "attribute", "var_name": "attribute"}, {"original_string": "private Model model;", "modifier": "private", "type": "Model", "declarator": "model", "var_name": "model"}], "methods": [{"identifier": "PomFile", "parameters": "()", "modifiers": "public", "return": "", "signature": " PomFile()", "full_signature": "public  PomFile()", "class_method_signature": "PomFile.PomFile()", "testcase": false, "constructor": true}, {"identifier": "PomFile", "parameters": "(String attribute)", "modifiers": "public", "return": "", "signature": " PomFile(String attribute)", "full_signature": "public  PomFile(String attribute)", "class_method_signature": "PomFile.PomFile(String attribute)", "testcase": false, "constructor": true}, {"identifier": "PomFile", "parameters": "(Model model)", "modifiers": "public", "return": "", "signature": " PomFile(Model model)", "full_signature": "public  PomFile(Model model)", "class_method_signature": "PomFile.PomFile(Model model)", "testcase": false, "constructor": true}, {"identifier": "setAttribute", "parameters": "(String attribute)", "modifiers": "public", "return": "PomFile", "signature": "PomFile setAttribute(String attribute)", "full_signature": "public PomFile setAttribute(String attribute)", "class_method_signature": "PomFile.setAttribute(String attribute)", "testcase": false, "constructor": false}, {"identifier": "setModel", "parameters": "(Model model)", "modifiers": "public", "return": "PomFile", "signature": "PomFile setModel(Model model)", "full_signature": "public PomFile setModel(Model model)", "class_method_signature": "PomFile.setModel(Model model)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAttribute()", "full_signature": "public String getAttribute()", "class_method_signature": "PomFile.getAttribute()", "testcase": false, "constructor": false}, {"identifier": "getModel", "parameters": "()", "modifiers": "public", "return": "Model", "signature": "Model getModel()", "full_signature": "public Model getModel()", "class_method_signature": "PomFile.getModel()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "PomFile.getDescription()", "testcase": false, "constructor": false}, {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@Override protected", "return": "TOExecutionResult", "signature": "TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@Override protected TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "PomFile.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false}, {"identifier": "writePomFile", "parameters": "(File pomFile)", "modifiers": "private", "return": "TOExecutionResult", "signature": "TOExecutionResult writePomFile(File pomFile)", "full_signature": "private TOExecutionResult writePomFile(File pomFile)", "class_method_signature": "PomFile.writePomFile(File pomFile)", "testcase": false, "constructor": false}], "file": "butterfly-utilities/src/main/java/com/paypal/butterfly/utilities/operations/pom/PomFile.java"}, "focal_method": {"identifier": "execution", "parameters": "(File transformedAppFolder, TransformationContext transformationContext)", "modifiers": "@Override protected", "return": "TOExecutionResult", "body": "@Override\n    protected TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext) {\n        if (attribute != null) {\n            if (!transformationContext.contains(attribute)) {\n                return TOExecutionResult.error(this, new TransformationOperationException(\"Transformation context attribute \" + attribute + \" does not exist\"));\n            }\n            Object modelObj = transformationContext.get(attribute);\n            if (modelObj == null) {\n                return TOExecutionResult.error(this, new TransformationOperationException(\"Transformation context attribute \" + attribute + \" is null\"));\n            }\n            if (!(modelObj instanceof Model)) {\n                return TOExecutionResult.error(this, new TransformationOperationException(\"Transformation context attribute \" + attribute + \" is not a Model object, but \" + modelObj.getClass().getName()));\n            }\n            model = (Model) modelObj;\n        } else if (model == null) {\n            return TOExecutionResult.error(this, new TransformationOperationException(\"Neither transformation context attribute nor Model object were specified\"));\n        }\n\n        File pomFile = new File(getAbsoluteFile(transformedAppFolder, transformationContext), \"pom.xml\");\n        TOExecutionResult errorResult;\n\n        if (pomFile.exists()) {\n            switch (ifPresent) {\n                case Fail:\n                    return TOExecutionResult.error(this, new TransformationOperationException(\"There is already a pom file at \" + getRelativePath()));\n                case WarnNotAdd:\n                    return TOExecutionResult.warning(this, new TransformationOperationException(\"There is already a pom file at \" + getRelativePath()));\n                case NoOp:\n                    return TOExecutionResult.noOp(this, \"There is already a pom file at \" + getRelativePath());\n                case WarnButAdd:\n                    errorResult = writePomFile(pomFile);\n                    if (errorResult != null) return errorResult;\n                    return TOExecutionResult.warning(this, new TransformationOperationException(\"There is already a pom file at \" + getRelativePath()), \"Pom file overwritten at \" + getRelativePath());\n                case Overwrite:\n                    errorResult = writePomFile(pomFile);\n                    if (errorResult != null) return errorResult;\n                    return TOExecutionResult.success(this, \"Pom file overwritten at \" + getRelativePath());\n            }\n        } else {\n            try {\n                pomFile.createNewFile();\n            } catch (IOException e) {\n                return TOExecutionResult.error(this, new TransformationOperationException(\"There was an error when creating pom.xml file at \" + getRelativePath() + \", double check if that directory exists\"));\n            }\n        }\n\n        errorResult = writePomFile(pomFile);\n        if (errorResult != null) return errorResult;\n\n        return TOExecutionResult.success(this, \"Pom file written at \" + getRelativePath());\n    }", "signature": "TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "full_signature": "@Override protected TOExecutionResult execution(File transformedAppFolder, TransformationContext transformationContext)", "class_method_signature": "PomFile.execution(File transformedAppFolder, TransformationContext transformationContext)", "testcase": false, "constructor": false, "invocations": ["contains", "error", "get", "error", "error", "getName", "getClass", "error", "getAbsoluteFile", "exists", "error", "getRelativePath", "warning", "getRelativePath", "noOp", "getRelativePath", "writePomFile", "warning", "getRelativePath", "getRelativePath", "writePomFile", "success", "getRelativePath", "createNewFile", "error", "getRelativePath", "writePomFile", "success", "getRelativePath"]}, "repository": {"repo_id": 104398040, "url": "https://github.com/paypal/butterfly", "language": "Java", "is_fork": false, "fork_count": 42, "stargazer_count": 26, "size": 6906, "license": "licensed"}}