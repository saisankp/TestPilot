{"test_class": {"identifier": "CompositeCredentialResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private CompositeCredentialResolver resolver;", "modifier": "private", "type": "CompositeCredentialResolver", "declarator": "resolver", "var_name": "resolver"}], "file": "ki4so-web/src/test/java/com/github/ebnew/ki4so/web/action/CompositeCredentialResolverTest.java"}, "test_case": {"identifier": "testResolveCredential", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testResolveCredential() {\n\t\t\n\t\t\n\t\t//\u6d4b\u8bd5\u53c2\u6570request\u662f\u7a7a\u7684\u60c5\u51b5\u3002\n\t\tAssert.assertNull(resolver.resolveCredential(null));\n\t\t\n\t\t\n\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n\t\t\n\t\t//\u6d4b\u8bd5request\u4e0d\u662f\u7a7a\uff0c\u5185\u90e8\u4e24\u4e2a\u89e3\u6790\u5668\u90fd\u662f\u7a7a\u7684\u60c5\u51b5\u3002\n\t\tAssert.assertNull(resolver.resolveCredential(request));\n\t\t\n\t\t//\u6a21\u62df\u4e24\u4e2a\u89e3\u6790\u5668\u5bf9\u8c61\u3002\n\t\tCredentialResolver encryCredentialResolver = Mockito.mock(CredentialResolver.class);\n\t\tCredentialResolver usernamePasswordCredentialResolver = Mockito.mock(CredentialResolver.class);\n\t\t\n\t\t//\u6d4b\u8bd5request\u4e0d\u662f\u7a7a\uff0c\u52a0\u5bc6\u89e3\u6790\u5668\u662f\u7a7a\uff0c\u539f\u59cb\u5bc6\u7801\u89e3\u6790\u5668\u975e\u7a7a\u7684\u60c5\u51b5\u3002\n\t\tresolver.setEncryCredentialResolver(encryCredentialResolver);\n\t\tAssert.assertNull(resolver.resolveCredential(request));\n\t\t\n\t\t//\u6d4b\u8bd5request\u4e0d\u662f\u7a7a\uff0c\u52a0\u5bc6\u89e3\u6790\u5668\u4e0d\u662f\u7a7a\uff0c\u539f\u59cb\u5bc6\u7801\u89e3\u6790\u5668\u4e3a\u7a7a\u7684\u60c5\u51b5\u3002\n\t\tresolver.setEncryCredentialResolver(null);\n\t\tresolver.setUsernamePasswordCredentialResolver(usernamePasswordCredentialResolver);\n\t\tAssert.assertNull(resolver.resolveCredential(request));\n\t\t\n\t\t//\u6d4b\u8bd5request\u4e0d\u662f\u7a7a\uff0c\u52a0\u5bc6\u89e3\u6790\u5668\u548c\u539f\u59cb\u5bc6\u7801\u89e3\u6790\u5668\u90fd\u4e0d\u662f\u7a7a\uff0c\u4f46\u662f\u89e3\u6790\u5668\u89e3\u6790\u8fd4\u56de\u503c\u662fnull\u7684\u60c5\u51b5\u3002\n\t\tresolver.setEncryCredentialResolver(encryCredentialResolver);\n\t\tresolver.setUsernamePasswordCredentialResolver(usernamePasswordCredentialResolver);\n\t\tAssert.assertNull(resolver.resolveCredential(request));\n\t\t\n\t\t//\u6d4b\u8bd5request\u4e0d\u662f\u7a7a\uff0c\u52a0\u5bc6\u89e3\u6790\u5668\u548c\u539f\u59cb\u5bc6\u7801\u89e3\u6790\u5668\u90fd\u4e0d\u662f\u7a7a\uff0c\u4f46\u662f\u52a0\u5bc6\u89e3\u6790\u5668\u89e3\u6790\u8fd4\u56de\u503c\u662f\u4e0dnull\u7684\u60c5\u51b5\u3002\n\t\tCredential credential = Mockito.mock(Credential.class);\n\t\tCredential credential1 = Mockito.mock(Credential.class);\n\t\tresolver.setEncryCredentialResolver(encryCredentialResolver);\n\t\tresolver.setUsernamePasswordCredentialResolver(usernamePasswordCredentialResolver);\n\t\tMockito.when(encryCredentialResolver.resolveCredential(request)).thenReturn(credential);\n\t\tMockito.when(usernamePasswordCredentialResolver.resolveCredential(request)).thenReturn(credential1);\n\t\tCredential result = resolver.resolveCredential(request);\n\t\tAssert.assertNotNull(result);\n\t\tAssert.assertEquals(result, credential);\n\t\t\n\t\t//\u6d4b\u8bd5request\u4e0d\u662f\u7a7a\uff0c\u52a0\u5bc6\u89e3\u6790\u5668\u548c\u539f\u59cb\u5bc6\u7801\u89e3\u6790\u5668\u90fd\u4e0d\u662f\u7a7a\uff0c\u4f46\u662f\u52a0\u5bc6\u51ed\u636e\u89e3\u6790\u5668\u89e3\u6790\u8fd4\u56de\u503c\u662fnull,\n\t\t//\u800c\u539f\u59cb\u51ed\u636e\u89e3\u6790\u5668\u8fd4\u56de\u4e0d\u4e3anull\u7684\u60c5\u51b5\u3002\n\t\tcredential = Mockito.mock(Credential.class);\n\t\tcredential1 = Mockito.mock(Credential.class);\n\t\tresolver.setEncryCredentialResolver(encryCredentialResolver);\n\t\tresolver.setUsernamePasswordCredentialResolver(usernamePasswordCredentialResolver);\n\t\tMockito.when(encryCredentialResolver.resolveCredential(request)).thenReturn(null);\n\t\tMockito.when(usernamePasswordCredentialResolver.resolveCredential(request)).thenReturn(credential1);\n\t\tresult = resolver.resolveCredential(request);\n\t\tAssert.assertNotNull(result);\n\t\tAssert.assertEquals(result, credential1);\n\t\t\n\t}", "signature": "void testResolveCredential()", "full_signature": "@Test public void testResolveCredential()", "class_method_signature": "CompositeCredentialResolverTest.testResolveCredential()", "testcase": true, "constructor": false, "invocations": ["assertNull", "resolveCredential", "assertNull", "resolveCredential", "mock", "mock", "setEncryCredentialResolver", "assertNull", "resolveCredential", "setEncryCredentialResolver", "setUsernamePasswordCredentialResolver", "assertNull", "resolveCredential", "setEncryCredentialResolver", "setUsernamePasswordCredentialResolver", "assertNull", "resolveCredential", "mock", "mock", "setEncryCredentialResolver", "setUsernamePasswordCredentialResolver", "thenReturn", "when", "resolveCredential", "thenReturn", "when", "resolveCredential", "resolveCredential", "assertNotNull", "assertEquals", "mock", "mock", "setEncryCredentialResolver", "setUsernamePasswordCredentialResolver", "thenReturn", "when", "resolveCredential", "thenReturn", "when", "resolveCredential", "resolveCredential", "assertNotNull", "assertEquals"]}, "focal_class": {"identifier": "CompositeCredentialResolver", "superclass": "", "interfaces": "implements CredentialResolver", "fields": [{"original_string": "private CredentialResolver encryCredentialResolver;", "modifier": "private", "type": "CredentialResolver", "declarator": "encryCredentialResolver", "var_name": "encryCredentialResolver"}, {"original_string": "private CredentialResolver usernamePasswordCredentialResolver;", "modifier": "private", "type": "CredentialResolver", "declarator": "usernamePasswordCredentialResolver", "var_name": "usernamePasswordCredentialResolver"}], "methods": [{"identifier": "CompositeCredentialResolver", "parameters": "()", "modifiers": "public", "return": "", "signature": " CompositeCredentialResolver()", "full_signature": "public  CompositeCredentialResolver()", "class_method_signature": "CompositeCredentialResolver.CompositeCredentialResolver()", "testcase": false, "constructor": true}, {"identifier": "resolveCredential", "parameters": "(HttpServletRequest request)", "modifiers": "public", "return": "Credential", "signature": "Credential resolveCredential(HttpServletRequest request)", "full_signature": "public Credential resolveCredential(HttpServletRequest request)", "class_method_signature": "CompositeCredentialResolver.resolveCredential(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "setEncryCredentialResolver", "parameters": "(\n\t\t\tCredentialResolver encryCredentialResolver)", "modifiers": "public", "return": "void", "signature": "void setEncryCredentialResolver(\n\t\t\tCredentialResolver encryCredentialResolver)", "full_signature": "public void setEncryCredentialResolver(\n\t\t\tCredentialResolver encryCredentialResolver)", "class_method_signature": "CompositeCredentialResolver.setEncryCredentialResolver(\n\t\t\tCredentialResolver encryCredentialResolver)", "testcase": false, "constructor": false}, {"identifier": "setUsernamePasswordCredentialResolver", "parameters": "(\n\t\t\tCredentialResolver usernamePasswordCredentialResolver)", "modifiers": "public", "return": "void", "signature": "void setUsernamePasswordCredentialResolver(\n\t\t\tCredentialResolver usernamePasswordCredentialResolver)", "full_signature": "public void setUsernamePasswordCredentialResolver(\n\t\t\tCredentialResolver usernamePasswordCredentialResolver)", "class_method_signature": "CompositeCredentialResolver.setUsernamePasswordCredentialResolver(\n\t\t\tCredentialResolver usernamePasswordCredentialResolver)", "testcase": false, "constructor": false}], "file": "ki4so-web/src/main/java/com/github/ebnew/ki4so/web/action/CompositeCredentialResolver.java"}, "focal_method": {"identifier": "resolveCredential", "parameters": "(HttpServletRequest request)", "modifiers": "public", "return": "Credential", "body": "public Credential resolveCredential(HttpServletRequest request){\n\t\tif(request==null){\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tCredential credential = null;\n\t\tif(encryCredentialResolver!=null){\n\t\t\t//\u5148\u89e3\u6790\u52a0\u5bc6\u540e\u7684\u51ed\u636e\u3002\n\t\t\tcredential = encryCredentialResolver.resolveCredential(request);\n\t\t}\n\t\t//\u82e5\u8fd4\u56de\u7a7a\uff0c\u5219\u7528\u539f\u59cb\u51ed\u636e\u89e3\u6790\u5668\u89e3\u6790\u3002\n\t\tif(credential==null){\n\t\t\tif(usernamePasswordCredentialResolver!=null){\n\t\t\t\tcredential = usernamePasswordCredentialResolver.resolveCredential(request);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//\u5982\u679c\u662f\u62bd\u8c61\u7684\u53c2\u6570\u51ed\u636e\u5bf9\u8c61\uff0c\u5219\u89e3\u6790\u5176\u5b83\u7684\u53c2\u6570\u3002\n\t\tif(credential instanceof AbstractParameter){\n\t\t\tAbstractParameter abstractParameter = (AbstractParameter)credential;\n\t\t\t//\u5c06\u6240\u6709\u7684\u53c2\u6570\u8bbe\u7f6e\u5230\u53c2\u6570\u5217\u8868\u4e2d\uff0c\u65b9\u4fbf\u4ee5\u540e\u5904\u7406\u4f7f\u7528\u3002\n\t\t\tabstractParameter.setParameters(WebUtils.getParametersStartingWith(request, null));\n\t\t\t//\u5982\u679c\u53c2\u6570\u5217\u8868\u4e2d\u65e0service,\u5219\u4ecesession\u4e2d\u83b7\u53d6\u3002\n\t\t\tif(abstractParameter.getParameterValue(WebConstants.SERVICE_PARAM_NAME)==null){\n\t\t\t\tif(request.getSession().getAttribute(WebConstants.KI4SO_SERVICE_KEY_IN_SESSION)!=null){\n\t\t\t\t\tabstractParameter.getParameters().put(WebConstants.SERVICE_PARAM_NAME, request.getSession().getAttribute(WebConstants.KI4SO_SERVICE_KEY_IN_SESSION));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn credential;\n\t}", "signature": "Credential resolveCredential(HttpServletRequest request)", "full_signature": "public Credential resolveCredential(HttpServletRequest request)", "class_method_signature": "CompositeCredentialResolver.resolveCredential(HttpServletRequest request)", "testcase": false, "constructor": false, "invocations": ["resolveCredential", "resolveCredential", "setParameters", "getParametersStartingWith", "getParameterValue", "getAttribute", "getSession", "put", "getParameters", "getAttribute", "getSession"]}, "repository": {"repo_id": 9836604, "url": "https://github.com/ebnew/ki4so", "language": "Java", "is_fork": false, "fork_count": 84, "stargazer_count": 100, "size": 4421, "license": "licensed"}}