{"test_class": {"identifier": "DiffBaseTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock private DiffListener listener1;", "modifier": "@Mock private", "type": "DiffListener", "declarator": "listener1", "var_name": "listener1"}, {"original_string": "@Mock private DiffListener listener2;", "modifier": "@Mock private", "type": "DiffListener", "declarator": "listener2", "var_name": "listener2"}, {"original_string": "@Mock private MatchResult matchResult;", "modifier": "@Mock private", "type": "MatchResult", "declarator": "matchResult", "var_name": "matchResult"}, {"original_string": "private DiffBase<Object, Object> diffBase;", "modifier": "private", "type": "DiffBase<Object, Object>", "declarator": "diffBase", "var_name": "diffBase"}], "file": "dbfit-java/core/src/test/java/dbfit/diff/DiffBaseTest.java"}, "test_case": {"identifier": "shouldNotifyAllRegisteredListener", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldNotifyAllRegisteredListener() {\n        diffBase.notifyListeners(matchResult);\n        verify(listener1).onEvent(matchResult);\n        verify(listener2).onEvent(matchResult);\n    }", "signature": "void shouldNotifyAllRegisteredListener()", "full_signature": "@Test public void shouldNotifyAllRegisteredListener()", "class_method_signature": "DiffBaseTest.shouldNotifyAllRegisteredListener()", "testcase": true, "constructor": false, "invocations": ["notifyListeners", "onEvent", "verify", "onEvent", "verify"]}, "focal_class": {"identifier": "DiffBase", "superclass": "", "interfaces": "implements Diff<T1, T2>", "fields": [{"original_string": "protected Collection<DiffListener> listeners;", "modifier": "protected", "type": "Collection<DiffListener>", "declarator": "listeners", "var_name": "listeners"}], "methods": [{"identifier": "getType", "parameters": "()", "modifiers": "protected abstract", "return": "Class", "signature": "Class getType()", "full_signature": "protected abstract Class getType()", "class_method_signature": "DiffBase.getType()", "testcase": false, "constructor": false}, {"identifier": "getDiffRunner", "parameters": "(MatchResult<T1, T2> request)", "modifiers": "protected abstract", "return": "DiffRunner", "signature": "DiffRunner getDiffRunner(MatchResult<T1, T2> request)", "full_signature": "protected abstract DiffRunner getDiffRunner(MatchResult<T1, T2> request)", "class_method_signature": "DiffBase.getDiffRunner(MatchResult<T1, T2> request)", "testcase": false, "constructor": false}, {"identifier": "DiffBase", "parameters": "(final Collection<DiffListener> listeners)", "modifiers": "public", "return": "", "signature": " DiffBase(final Collection<DiffListener> listeners)", "full_signature": "public  DiffBase(final Collection<DiffListener> listeners)", "class_method_signature": "DiffBase.DiffBase(final Collection<DiffListener> listeners)", "testcase": false, "constructor": true}, {"identifier": "DiffBase", "parameters": "()", "modifiers": "public", "return": "", "signature": " DiffBase()", "full_signature": "public  DiffBase()", "class_method_signature": "DiffBase.DiffBase()", "testcase": false, "constructor": true}, {"identifier": "diff", "parameters": "(final T1 object1, final T2 object2)", "modifiers": "@Override public", "return": "void", "signature": "void diff(final T1 object1, final T2 object2)", "full_signature": "@Override public void diff(final T1 object1, final T2 object2)", "class_method_signature": "DiffBase.diff(final T1 object1, final T2 object2)", "testcase": false, "constructor": false}, {"identifier": "diff", "parameters": "(final MatchResult<T1, T2> request)", "modifiers": "public", "return": "void", "signature": "void diff(final MatchResult<T1, T2> request)", "full_signature": "public void diff(final MatchResult<T1, T2> request)", "class_method_signature": "DiffBase.diff(final MatchResult<T1, T2> request)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(final DiffListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(final DiffListener listener)", "full_signature": "@Override public void addListener(final DiffListener listener)", "class_method_signature": "DiffBase.addListener(final DiffListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(final DiffListener listener)", "modifiers": "@Override public", "return": "void", "signature": "void removeListener(final DiffListener listener)", "full_signature": "@Override public void removeListener(final DiffListener listener)", "class_method_signature": "DiffBase.removeListener(final DiffListener listener)", "testcase": false, "constructor": false}, {"identifier": "addListeners", "parameters": "(final Collection<DiffListener> newListeneres)", "modifiers": "@Override public", "return": "void", "signature": "void addListeners(final Collection<DiffListener> newListeneres)", "full_signature": "@Override public void addListeners(final Collection<DiffListener> newListeneres)", "class_method_signature": "DiffBase.addListeners(final Collection<DiffListener> newListeneres)", "testcase": false, "constructor": false}, {"identifier": "removeListeners", "parameters": "(final Collection<DiffListener> removed)", "modifiers": "@Override public", "return": "void", "signature": "void removeListeners(final Collection<DiffListener> removed)", "full_signature": "@Override public void removeListeners(final Collection<DiffListener> removed)", "class_method_signature": "DiffBase.removeListeners(final Collection<DiffListener> removed)", "testcase": false, "constructor": false}, {"identifier": "notifyListeners", "parameters": "(final MatchResult result)", "modifiers": "protected", "return": "void", "signature": "void notifyListeners(final MatchResult result)", "full_signature": "protected void notifyListeners(final MatchResult result)", "class_method_signature": "DiffBase.notifyListeners(final MatchResult result)", "testcase": false, "constructor": false}], "file": "dbfit-java/core/src/main/java/dbfit/diff/DiffBase.java"}, "focal_method": {"identifier": "notifyListeners", "parameters": "(final MatchResult result)", "modifiers": "protected", "return": "void", "body": "protected void notifyListeners(final MatchResult result) {\n        for (DiffListener listener: listeners) {\n            listener.onEvent(result);\n        }\n    }", "signature": "void notifyListeners(final MatchResult result)", "full_signature": "protected void notifyListeners(final MatchResult result)", "class_method_signature": "DiffBase.notifyListeners(final MatchResult result)", "testcase": false, "constructor": false, "invocations": ["onEvent"]}, "repository": {"repo_id": 7283919, "url": "https://github.com/dbfit/dbfit", "language": "Java", "is_fork": false, "fork_count": 83, "stargazer_count": 181, "size": 6978, "license": "licensed"}}