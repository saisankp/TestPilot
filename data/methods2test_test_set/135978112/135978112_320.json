{"test_class": {"identifier": "KTableMapValuesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final private Serde<String> stringSerde = Serdes.String();", "modifier": "final private", "type": "Serde<String>", "declarator": "stringSerde = Serdes.String()", "var_name": "stringSerde"}, {"original_string": "private KStreamTestDriver driver = null;", "modifier": "private", "type": "KStreamTestDriver", "declarator": "driver = null", "var_name": "driver"}, {"original_string": "private File stateDir = null;", "modifier": "private", "type": "File", "declarator": "stateDir = null", "var_name": "stateDir"}], "file": "streams/src/test/java/org/apache/kafka/streams/kstream/internals/KTableMapValuesTest.java"}, "test_case": {"identifier": "testValueGetter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testValueGetter() throws IOException {\n        KStreamBuilder builder = new KStreamBuilder();\n\n        String topic1 = \"topic1\";\n        String topic2 = \"topic2\";\n\n        KTableImpl<String, String, String> table1 =\n                (KTableImpl<String, String, String>) builder.table(stringSerde, stringSerde, topic1);\n        KTableImpl<String, String, Integer> table2 = (KTableImpl<String, String, Integer>) table1.mapValues(\n                new ValueMapper<String, Integer>() {\n                    @Override\n                    public Integer apply(String value) {\n                        return new Integer(value);\n                    }\n                });\n        KTableImpl<String, Integer, Integer> table3 = (KTableImpl<String, Integer, Integer>) table2.filter(\n                new Predicate<String, Integer>() {\n                    @Override\n                    public boolean test(String key, Integer value) {\n                        return (value % 2) == 0;\n                    }\n                });\n        KTableImpl<String, String, String> table4 = (KTableImpl<String, String, String>)\n                table1.through(stringSerde, stringSerde, topic2);\n\n        KTableValueGetterSupplier<String, String> getterSupplier1 = table1.valueGetterSupplier();\n        KTableValueGetterSupplier<String, Integer> getterSupplier2 = table2.valueGetterSupplier();\n        KTableValueGetterSupplier<String, Integer> getterSupplier3 = table3.valueGetterSupplier();\n        KTableValueGetterSupplier<String, String> getterSupplier4 = table4.valueGetterSupplier();\n\n        driver = new KStreamTestDriver(builder, stateDir, null, null);\n\n        KTableValueGetter<String, String> getter1 = getterSupplier1.get();\n        getter1.init(driver.context());\n        KTableValueGetter<String, Integer> getter2 = getterSupplier2.get();\n        getter2.init(driver.context());\n        KTableValueGetter<String, Integer> getter3 = getterSupplier3.get();\n        getter3.init(driver.context());\n        KTableValueGetter<String, String> getter4 = getterSupplier4.get();\n        getter4.init(driver.context());\n\n        driver.process(topic1, \"A\", \"01\");\n        driver.process(topic1, \"B\", \"01\");\n        driver.process(topic1, \"C\", \"01\");\n\n        assertEquals(\"01\", getter1.get(\"A\"));\n        assertEquals(\"01\", getter1.get(\"B\"));\n        assertEquals(\"01\", getter1.get(\"C\"));\n\n        assertEquals(new Integer(1), getter2.get(\"A\"));\n        assertEquals(new Integer(1), getter2.get(\"B\"));\n        assertEquals(new Integer(1), getter2.get(\"C\"));\n\n        assertNull(getter3.get(\"A\"));\n        assertNull(getter3.get(\"B\"));\n        assertNull(getter3.get(\"C\"));\n\n        assertEquals(\"01\", getter4.get(\"A\"));\n        assertEquals(\"01\", getter4.get(\"B\"));\n        assertEquals(\"01\", getter4.get(\"C\"));\n\n        driver.process(topic1, \"A\", \"02\");\n        driver.process(topic1, \"B\", \"02\");\n\n        assertEquals(\"02\", getter1.get(\"A\"));\n        assertEquals(\"02\", getter1.get(\"B\"));\n        assertEquals(\"01\", getter1.get(\"C\"));\n\n        assertEquals(new Integer(2), getter2.get(\"A\"));\n        assertEquals(new Integer(2), getter2.get(\"B\"));\n        assertEquals(new Integer(1), getter2.get(\"C\"));\n\n        assertEquals(new Integer(2), getter3.get(\"A\"));\n        assertEquals(new Integer(2), getter3.get(\"B\"));\n        assertNull(getter3.get(\"C\"));\n\n        assertEquals(\"02\", getter4.get(\"A\"));\n        assertEquals(\"02\", getter4.get(\"B\"));\n        assertEquals(\"01\", getter4.get(\"C\"));\n\n        driver.process(topic1, \"A\", \"03\");\n\n        assertEquals(\"03\", getter1.get(\"A\"));\n        assertEquals(\"02\", getter1.get(\"B\"));\n        assertEquals(\"01\", getter1.get(\"C\"));\n\n        assertEquals(new Integer(3), getter2.get(\"A\"));\n        assertEquals(new Integer(2), getter2.get(\"B\"));\n        assertEquals(new Integer(1), getter2.get(\"C\"));\n\n        assertNull(getter3.get(\"A\"));\n        assertEquals(new Integer(2), getter3.get(\"B\"));\n        assertNull(getter3.get(\"C\"));\n\n        assertEquals(\"03\", getter4.get(\"A\"));\n        assertEquals(\"02\", getter4.get(\"B\"));\n        assertEquals(\"01\", getter4.get(\"C\"));\n\n        driver.process(topic1, \"A\", null);\n\n        assertNull(getter1.get(\"A\"));\n        assertEquals(\"02\", getter1.get(\"B\"));\n        assertEquals(\"01\", getter1.get(\"C\"));\n\n        assertNull(getter2.get(\"A\"));\n        assertEquals(new Integer(2), getter2.get(\"B\"));\n        assertEquals(new Integer(1), getter2.get(\"C\"));\n\n        assertNull(getter3.get(\"A\"));\n        assertEquals(new Integer(2), getter3.get(\"B\"));\n        assertNull(getter3.get(\"C\"));\n\n        assertNull(getter4.get(\"A\"));\n        assertEquals(\"02\", getter4.get(\"B\"));\n        assertEquals(\"01\", getter4.get(\"C\"));\n    }", "signature": "void testValueGetter()", "full_signature": "@Test public void testValueGetter()", "class_method_signature": "KTableMapValuesTest.testValueGetter()", "testcase": true, "constructor": false, "invocations": ["table", "mapValues", "filter", "through", "valueGetterSupplier", "valueGetterSupplier", "valueGetterSupplier", "valueGetterSupplier", "get", "init", "context", "get", "init", "context", "get", "init", "context", "get", "init", "context", "process", "process", "process", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertNull", "get", "assertNull", "get", "assertNull", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "process", "process", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertNull", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "process", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertNull", "get", "assertEquals", "get", "assertNull", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "process", "assertNull", "get", "assertEquals", "get", "assertEquals", "get", "assertNull", "get", "assertEquals", "get", "assertEquals", "get", "assertNull", "get", "assertEquals", "get", "assertNull", "get", "assertNull", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "KTableMapValues", "superclass": "", "interfaces": "implements KTableProcessorSupplier<K, V, V1>", "fields": [{"original_string": "private final KTableImpl<K, ?, V> parent;", "modifier": "private final", "type": "KTableImpl<K, ?, V>", "declarator": "parent", "var_name": "parent"}, {"original_string": "private final ValueMapper<V, V1> mapper;", "modifier": "private final", "type": "ValueMapper<V, V1>", "declarator": "mapper", "var_name": "mapper"}, {"original_string": "private boolean sendOldValues = false;", "modifier": "private", "type": "boolean", "declarator": "sendOldValues = false", "var_name": "sendOldValues"}], "methods": [{"identifier": "KTableMapValues", "parameters": "(KTableImpl<K, ?, V> parent, ValueMapper<V, V1> mapper)", "modifiers": "public", "return": "", "signature": " KTableMapValues(KTableImpl<K, ?, V> parent, ValueMapper<V, V1> mapper)", "full_signature": "public  KTableMapValues(KTableImpl<K, ?, V> parent, ValueMapper<V, V1> mapper)", "class_method_signature": "KTableMapValues.KTableMapValues(KTableImpl<K, ?, V> parent, ValueMapper<V, V1> mapper)", "testcase": false, "constructor": true}, {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Processor<K, Change<V>>", "signature": "Processor<K, Change<V>> get()", "full_signature": "@Override public Processor<K, Change<V>> get()", "class_method_signature": "KTableMapValues.get()", "testcase": false, "constructor": false}, {"identifier": "view", "parameters": "()", "modifiers": "@Override public", "return": "KTableValueGetterSupplier<K, V1>", "signature": "KTableValueGetterSupplier<K, V1> view()", "full_signature": "@Override public KTableValueGetterSupplier<K, V1> view()", "class_method_signature": "KTableMapValues.view()", "testcase": false, "constructor": false}, {"identifier": "enableSendingOldValues", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void enableSendingOldValues()", "full_signature": "@Override public void enableSendingOldValues()", "class_method_signature": "KTableMapValues.enableSendingOldValues()", "testcase": false, "constructor": false}, {"identifier": "computeValue", "parameters": "(V value)", "modifiers": "private", "return": "V1", "signature": "V1 computeValue(V value)", "full_signature": "private V1 computeValue(V value)", "class_method_signature": "KTableMapValues.computeValue(V value)", "testcase": false, "constructor": false}], "file": "streams/src/main/java/org/apache/kafka/streams/kstream/internals/KTableMapValues.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@Override public", "return": "Processor<K, Change<V>>", "body": "@Override\n    public Processor<K, Change<V>> get() {\n        return new KTableMapValuesProcessor();\n    }", "signature": "Processor<K, Change<V>> get()", "full_signature": "@Override public Processor<K, Change<V>> get()", "class_method_signature": "KTableMapValues.get()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}