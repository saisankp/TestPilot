{"test_class": {"identifier": "ChallengeValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Origin origin = null;", "modifier": "private final", "type": "Origin", "declarator": "origin = null", "var_name": "origin"}, {"original_string": "private final ChallengeValidator target = new ChallengeValidator();", "modifier": "private final", "type": "ChallengeValidator", "declarator": "target = new ChallengeValidator()", "var_name": "target"}], "file": "webauthn4j-core/src/test/java/com/webauthn4j/validator/ChallengeValidatorTest.java"}, "test_case": {"identifier": "verifyChallenge_test_with_different_challenge", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void verifyChallenge_test_with_different_challenge() {\n\n        Challenge challengeA = new DefaultChallenge(new byte[]{0x00});\n        Challenge challengeB = new DefaultChallenge(new byte[]{0x01});\n\n        CollectedClientData collectedClientData = new CollectedClientData(ClientDataType.CREATE, challengeA, null, null);\n        ServerProperty serverProperty = new ServerProperty(origin, null, challengeB, null);\n\n        //When\n        assertThrows(BadChallengeException.class,\n                () -> target.validate(collectedClientData, serverProperty)\n        );\n    }", "signature": "void verifyChallenge_test_with_different_challenge()", "full_signature": "@Test void verifyChallenge_test_with_different_challenge()", "class_method_signature": "ChallengeValidatorTest.verifyChallenge_test_with_different_challenge()", "testcase": true, "constructor": false, "invocations": ["assertThrows", "validate"]}, "focal_class": {"identifier": "ChallengeValidator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "validate", "parameters": "(CollectedClientData collectedClientData, ServerProperty serverProperty)", "modifiers": "public", "return": "void", "signature": "void validate(CollectedClientData collectedClientData, ServerProperty serverProperty)", "full_signature": "public void validate(CollectedClientData collectedClientData, ServerProperty serverProperty)", "class_method_signature": "ChallengeValidator.validate(CollectedClientData collectedClientData, ServerProperty serverProperty)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(Challenge expected, Challenge actual)", "modifiers": "public", "return": "void", "signature": "void validate(Challenge expected, Challenge actual)", "full_signature": "public void validate(Challenge expected, Challenge actual)", "class_method_signature": "ChallengeValidator.validate(Challenge expected, Challenge actual)", "testcase": false, "constructor": false}], "file": "webauthn4j-core/src/main/java/com/webauthn4j/validator/ChallengeValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(CollectedClientData collectedClientData, ServerProperty serverProperty)", "modifiers": "public", "return": "void", "body": "public void validate(CollectedClientData collectedClientData, ServerProperty serverProperty) {\n        AssertUtil.notNull(collectedClientData, \"collectedClientData must not be null\");\n        AssertUtil.notNull(serverProperty, \"serverProperty must not be null\");\n        Challenge savedChallenge = serverProperty.getChallenge();\n        Challenge collectedChallenge = collectedClientData.getChallenge();\n\n        if (savedChallenge == null) {\n            throw new MissingChallengeException(\"The server doesn't have a challenge. The client must request the server to issue the challenge before WebAuthn operations.\");\n        }\n\n        // Verify that the challenge member of the collectedClientData matches the challenge that was sent to\n        // the authenticator in the PublicKeyCredentialRequestOptions passed to the get() call.\n        validate(savedChallenge, collectedChallenge);\n\n    }", "signature": "void validate(CollectedClientData collectedClientData, ServerProperty serverProperty)", "full_signature": "public void validate(CollectedClientData collectedClientData, ServerProperty serverProperty)", "class_method_signature": "ChallengeValidator.validate(CollectedClientData collectedClientData, ServerProperty serverProperty)", "testcase": false, "constructor": false, "invocations": ["notNull", "notNull", "getChallenge", "getChallenge", "validate"]}, "repository": {"repo_id": 134147639, "url": "https://github.com/webauthn4j/webauthn4j", "stars": 101, "created": "5/20/2018 12:14:36 PM +00:00", "updates": "2020-01-27T13:01:46+00:00", "fork": "False", "license": "licensed"}}