{"test_class": {"identifier": "ClassUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(ClassUtilTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(ClassUtilTest.class)", "var_name": "logger"}], "file": "ch-commons-util/src/test/java/com/cloudhopper/commons/util/ClassUtilTest.java"}, "test_case": {"identifier": "getClassHierarchy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getClassHierarchy() throws Exception {\n        Class[] hierarchy = ClassUtil.getClassHierarchy(InternetPerson.class);\n        Assert.assertEquals(2, hierarchy.length);\n        Assert.assertEquals(Person.class, hierarchy[0]);\n        Assert.assertEquals(InternetPerson.class, hierarchy[1]);\n    }", "signature": "void getClassHierarchy()", "full_signature": "@Test public void getClassHierarchy()", "class_method_signature": "ClassUtilTest.getClassHierarchy()", "testcase": true, "constructor": false, "invocations": ["getClassHierarchy", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "ClassUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "findEnumConstant", "parameters": "(Class<?> type, String constantName)", "modifiers": "public static", "return": "Object", "signature": "Object findEnumConstant(Class<?> type, String constantName)", "full_signature": "public static Object findEnumConstant(Class<?> type, String constantName)", "class_method_signature": "ClassUtil.findEnumConstant(Class<?> type, String constantName)", "testcase": false, "constructor": false}, {"identifier": "findEnumConstant", "parameters": "(Class<?> type, String constantName, boolean caseSensitive)", "modifiers": "public static", "return": "Object", "signature": "Object findEnumConstant(Class<?> type, String constantName, boolean caseSensitive)", "full_signature": "public static Object findEnumConstant(Class<?> type, String constantName, boolean caseSensitive)", "class_method_signature": "ClassUtil.findEnumConstant(Class<?> type, String constantName, boolean caseSensitive)", "testcase": false, "constructor": false}, {"identifier": "getClassHierarchy", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "Class<?>[]", "signature": "Class<?>[] getClassHierarchy(Class<?> type)", "full_signature": "public static Class<?>[] getClassHierarchy(Class<?> type)", "class_method_signature": "ClassUtil.getClassHierarchy(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "hasBeanMethods", "parameters": "(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasBeanMethods(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "full_signature": "public static boolean hasBeanMethods(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "class_method_signature": "ClassUtil.hasBeanMethods(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "testcase": false, "constructor": false}, {"identifier": "getBeanMethods", "parameters": "(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "modifiers": "public static", "return": "Method[]", "signature": "Method[] getBeanMethods(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "full_signature": "public static Method[] getBeanMethods(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "class_method_signature": "ClassUtil.getBeanMethods(Class<?> type, String propertyName, Class<?> propertyType, boolean caseSensitive)", "testcase": false, "constructor": false}, {"identifier": "getMethod", "parameters": "(Class<?> type, String name, Class<?> returnType, Class<?> paramType, boolean caseSensitive)", "modifiers": "public static", "return": "Method", "signature": "Method getMethod(Class<?> type, String name, Class<?> returnType, Class<?> paramType, boolean caseSensitive)", "full_signature": "public static Method getMethod(Class<?> type, String name, Class<?> returnType, Class<?> paramType, boolean caseSensitive)", "class_method_signature": "ClassUtil.getMethod(Class<?> type, String name, Class<?> returnType, Class<?> paramType, boolean caseSensitive)", "testcase": false, "constructor": false}], "file": "ch-commons-util/src/main/java/com/cloudhopper/commons/util/ClassUtil.java"}, "focal_method": {"identifier": "getClassHierarchy", "parameters": "(Class<?> type)", "modifiers": "public static", "return": "Class<?>[]", "body": "public static Class<?>[] getClassHierarchy(Class<?> type) {\n        ArrayDeque<Class<?>> classes = new ArrayDeque<Class<?>>();\n        // class to start our search from, we'll loop thru the entire class hierarchy\n        Class<?> classType = type;\n        // keep searching up until we reach an Object class type\n        while (classType != null && !classType.equals(Object.class)) {\n            // keep adding onto front\n            classes.addFirst(classType);\n            classType = classType.getSuperclass();\n        }\n        return classes.toArray(new Class[0]);\n    }", "signature": "Class<?>[] getClassHierarchy(Class<?> type)", "full_signature": "public static Class<?>[] getClassHierarchy(Class<?> type)", "class_method_signature": "ClassUtil.getClassHierarchy(Class<?> type)", "testcase": false, "constructor": false, "invocations": ["equals", "addFirst", "getSuperclass", "toArray"]}, "repository": {"repo_id": 14960307, "url": "https://github.com/twitter/cloudhopper-commons", "language": "Java", "is_fork": false, "fork_count": 40, "stargazer_count": 36, "size": 6452, "license": "licensed"}}