{"test_class": {"identifier": "TestFileSystemSchemaRegistryService", "superclass": "", "interfaces": "", "fields": [], "file": "databus-core/databus-core-schemas/src/test/java/com/linkedin/databus2/schemas/TestFileSystemSchemaRegistryService.java"}, "test_case": {"identifier": "testErrorOnMissingSchemasDir", "parameters": "()", "modifiers": "@Test(expectedExceptions=InvalidConfigException.class) /** Instantiation should fail with fallbackToResourceDisabled and a missing directory */ public", "return": "void", "body": "@Test(expectedExceptions=InvalidConfigException.class)\n  /** Instantiation should fail with fallbackToResourceDisabled and a missing directory */\n  public void testErrorOnMissingSchemasDir() throws InvalidConfigException\n  {\n    final String dirName = \"/lets/hope/no/one/creates/this/dir\";\n    Assert.assertFalse((new File(dirName)).exists());\n\n    FileSystemSchemaRegistryService.Config cfgBuilder = new FileSystemSchemaRegistryService.Config();\n    cfgBuilder.setFallbackToResources(false);\n    cfgBuilder.setSchemaDir(dirName);\n\n    FileSystemSchemaRegistryService.build(cfgBuilder);\n  }", "signature": "void testErrorOnMissingSchemasDir()", "full_signature": "@Test(expectedExceptions=InvalidConfigException.class) /** Instantiation should fail with fallbackToResourceDisabled and a missing directory */ public void testErrorOnMissingSchemasDir()", "class_method_signature": "TestFileSystemSchemaRegistryService.testErrorOnMissingSchemasDir()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "exists", "setFallbackToResources", "setSchemaDir", "build"]}, "focal_class": {"identifier": "FileSystemSchemaRegistryService", "superclass": "extends VersionedSchemaSetBackedRegistryService", "interfaces": "", "fields": [{"original_string": "public static final String MODULE = FileSystemSchemaRegistryService.class.getName();", "modifier": "public static final", "type": "String", "declarator": "MODULE = FileSystemSchemaRegistryService.class.getName()", "var_name": "MODULE"}, {"original_string": "public static final Logger LOG = Logger.getLogger(MODULE);", "modifier": "public static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(MODULE)", "var_name": "LOG"}, {"original_string": "private final FileSystemVersionedSchemaSetProvider _fsSchemaSetProvider;", "modifier": "private final", "type": "FileSystemVersionedSchemaSetProvider", "declarator": "_fsSchemaSetProvider", "var_name": "_fsSchemaSetProvider"}, {"original_string": "private final ResourceVersionedSchemaSetProvider _resourceSchemaSetProvider;", "modifier": "private final", "type": "ResourceVersionedSchemaSetProvider", "declarator": "_resourceSchemaSetProvider", "var_name": "_resourceSchemaSetProvider"}, {"original_string": "private final StaticConfig _config;", "modifier": "private final", "type": "StaticConfig", "declarator": "_config", "var_name": "_config"}, {"original_string": "private Thread _schemaSetRefreshThread;", "modifier": "private", "type": "Thread", "declarator": "_schemaSetRefreshThread", "var_name": "_schemaSetRefreshThread"}, {"original_string": "private final AtomicBoolean _stopRefreshThread = new AtomicBoolean();", "modifier": "private final", "type": "AtomicBoolean", "declarator": "_stopRefreshThread = new AtomicBoolean()", "var_name": "_stopRefreshThread"}, {"original_string": "private long _lastRefreshTs = -1;", "modifier": "private", "type": "long", "declarator": "_lastRefreshTs = -1", "var_name": "_lastRefreshTs"}], "methods": [{"identifier": "build", "parameters": "(Config config)", "modifiers": "public static", "return": "FileSystemSchemaRegistryService", "signature": "FileSystemSchemaRegistryService build(Config config)", "full_signature": "public static FileSystemSchemaRegistryService build(Config config)", "class_method_signature": "FileSystemSchemaRegistryService.build(Config config)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(StaticConfig config)", "modifiers": "public static", "return": "FileSystemSchemaRegistryService", "signature": "FileSystemSchemaRegistryService build(StaticConfig config)", "full_signature": "public static FileSystemSchemaRegistryService build(StaticConfig config)", "class_method_signature": "FileSystemSchemaRegistryService.build(StaticConfig config)", "testcase": false, "constructor": false}, {"identifier": "FileSystemSchemaRegistryService", "parameters": "(StaticConfig config)", "modifiers": "private", "return": "", "signature": " FileSystemSchemaRegistryService(StaticConfig config)", "full_signature": "private  FileSystemSchemaRegistryService(StaticConfig config)", "class_method_signature": "FileSystemSchemaRegistryService.FileSystemSchemaRegistryService(StaticConfig config)", "testcase": false, "constructor": true}, {"identifier": "startSchemasRefreshThread", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean startSchemasRefreshThread()", "full_signature": "public boolean startSchemasRefreshThread()", "class_method_signature": "FileSystemSchemaRegistryService.startSchemasRefreshThread()", "testcase": false, "constructor": false}, {"identifier": "stopSchemasRefreshThread", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void stopSchemasRefreshThread()", "full_signature": "public void stopSchemasRefreshThread()", "class_method_signature": "FileSystemSchemaRegistryService.stopSchemasRefreshThread()", "testcase": false, "constructor": false}, {"identifier": "registerSchema", "parameters": "(VersionedSchema schema)", "modifiers": "@Override public", "return": "void", "signature": "void registerSchema(VersionedSchema schema)", "full_signature": "@Override public void registerSchema(VersionedSchema schema)", "class_method_signature": "FileSystemSchemaRegistryService.registerSchema(VersionedSchema schema)", "testcase": false, "constructor": false}, {"identifier": "initializeSchemaSet", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeSchemaSet()", "full_signature": "private void initializeSchemaSet()", "class_method_signature": "FileSystemSchemaRegistryService.initializeSchemaSet()", "testcase": false, "constructor": false}, {"identifier": "refreshSchemaSet", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refreshSchemaSet()", "full_signature": "private void refreshSchemaSet()", "class_method_signature": "FileSystemSchemaRegistryService.refreshSchemaSet()", "testcase": false, "constructor": false}], "file": "databus-core/databus-core-schemas/src/main/java/com/linkedin/databus2/schemas/FileSystemSchemaRegistryService.java"}, "focal_method": {"identifier": "build", "parameters": "(Config config)", "modifiers": "public static", "return": "FileSystemSchemaRegistryService", "body": "public static FileSystemSchemaRegistryService build(Config config) throws InvalidConfigException\n  {\n    return build(config.build());\n  }", "signature": "FileSystemSchemaRegistryService build(Config config)", "full_signature": "public static FileSystemSchemaRegistryService build(Config config)", "class_method_signature": "FileSystemSchemaRegistryService.build(Config config)", "testcase": false, "constructor": false, "invocations": ["build", "build"]}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}