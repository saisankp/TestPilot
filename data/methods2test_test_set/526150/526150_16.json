{"test_class": {"identifier": "LatLonToIsinGridMapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "beam-glob-due-reader/src/test/java/org/esa/beam/dataio/globaerosol/LatLonToIsinGridMapperTest.java"}, "test_case": {"identifier": "testComputeN_v", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testComputeN_v() throws Exception {\n        final double cellSizeY = 180.0 / 2004.0;\n        double lat;\n        double isinGridRow = 1002.0;\n        lat = cellSizeY * isinGridRow;\n        assertEquals(2, LatLonToIsinGridMapper.computeN_v(lat));\n        isinGridRow = 1001.0;\n        lat = cellSizeY * isinGridRow;\n        assertEquals(8, LatLonToIsinGridMapper.computeN_v(lat));\n        isinGridRow = 1000.0;\n        lat = cellSizeY * isinGridRow;\n        assertEquals(14, LatLonToIsinGridMapper.computeN_v(lat));\n        isinGridRow = 300.0;\n        lat = cellSizeY * isinGridRow;\n        assertEquals(3574, LatLonToIsinGridMapper.computeN_v(lat));\n        lat = 0.0;\n        assertEquals(LatLonToIsinGridMapper.N_eq, LatLonToIsinGridMapper.computeN_v(lat));\n        isinGridRow = -300;\n        lat = cellSizeY * isinGridRow;\n        assertEquals(3574, LatLonToIsinGridMapper.computeN_v(lat));\n        isinGridRow = -1001.0;\n        lat = cellSizeY * isinGridRow;\n        assertEquals(8, LatLonToIsinGridMapper.computeN_v(lat));\n        isinGridRow = -1002.0;\n        lat = cellSizeY * isinGridRow;\n        assertEquals(2, LatLonToIsinGridMapper.computeN_v(lat));\n    }", "signature": "void testComputeN_v()", "full_signature": "@Test public void testComputeN_v()", "class_method_signature": "LatLonToIsinGridMapperTest.testComputeN_v()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "computeN_v", "assertEquals", "computeN_v", "assertEquals", "computeN_v", "assertEquals", "computeN_v", "assertEquals", "computeN_v", "assertEquals", "computeN_v", "assertEquals", "computeN_v", "assertEquals", "computeN_v"]}, "focal_class": {"identifier": "LatLonToIsinGridMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final int N_eq = 4008;", "modifier": "static final", "type": "int", "declarator": "N_eq = 4008", "var_name": "N_eq"}, {"original_string": "static final double R_g = N_eq / 360.0;", "modifier": "static final", "type": "double", "declarator": "R_g = N_eq / 360.0", "var_name": "R_g"}, {"original_string": "static final double u_0 = 180 * R_g + 0.5;", "modifier": "static final", "type": "double", "declarator": "u_0 = 180 * R_g + 0.5", "var_name": "u_0"}, {"original_string": "static final double v_0 = 90 * R_g + 0.5;", "modifier": "static final", "type": "double", "declarator": "v_0 = 90 * R_g + 0.5", "var_name": "v_0"}], "methods": [{"identifier": "LatLonToIsinGridMapper", "parameters": "()", "modifiers": "private", "return": "", "signature": " LatLonToIsinGridMapper()", "full_signature": "private  LatLonToIsinGridMapper()", "class_method_signature": "LatLonToIsinGridMapper.LatLonToIsinGridMapper()", "testcase": false, "constructor": true}, {"identifier": "toIsinGridIndex", "parameters": "(GeoPos gp)", "modifiers": "static", "return": "int", "signature": "int toIsinGridIndex(GeoPos gp)", "full_signature": "static int toIsinGridIndex(GeoPos gp)", "class_method_signature": "LatLonToIsinGridMapper.toIsinGridIndex(GeoPos gp)", "testcase": false, "constructor": false}, {"identifier": "computeN_v", "parameters": "(double lat)", "modifiers": "static", "return": "int", "signature": "int computeN_v(double lat)", "full_signature": "static int computeN_v(double lat)", "class_method_signature": "LatLonToIsinGridMapper.computeN_v(double lat)", "testcase": false, "constructor": false}, {"identifier": "computeB_v", "parameters": "( double lat)", "modifiers": "static", "return": "int", "signature": "int computeB_v( double lat)", "full_signature": "static int computeB_v( double lat)", "class_method_signature": "LatLonToIsinGridMapper.computeB_v( double lat)", "testcase": false, "constructor": false}], "file": "beam-glob-due-reader/src/main/java/org/esa/beam/dataio/globaerosol/LatLonToIsinGridMapper.java"}, "focal_method": {"identifier": "computeN_v", "parameters": "(double lat)", "modifiers": "static", "return": "int", "body": "static int computeN_v(double lat) {\n        int N_v = (int) Math.ceil(Math.abs(Math.cos(Math.toRadians(lat))) * N_eq);\n        /**\n         * according to product spec:\n         * \"N_v is equal to cos(lat) * N_eq, rounded up to the nearest even integer\"\n         */\n        if( N_v % 2 == 0 ) {\n            return N_v;\n        } else {\n            return ++N_v;\n        }\n    }", "signature": "int computeN_v(double lat)", "full_signature": "static int computeN_v(double lat)", "class_method_signature": "LatLonToIsinGridMapper.computeN_v(double lat)", "testcase": false, "constructor": false, "invocations": ["ceil", "abs", "cos", "toRadians"]}, "repository": {"repo_id": 526150, "url": "https://github.com/bcdev/glob-box", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 6, "size": 6440, "license": "licensed"}}