{"test_class": {"identifier": "SonarConnectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Map<String, SonarQualityMetric> metricList = createMetricList();", "modifier": "", "type": "Map<String, SonarQualityMetric>", "declarator": "metricList = createMetricList()", "var_name": "metricList"}, {"original_string": "@Mock\n    Sonar sonarClient;", "modifier": "@Mock", "type": "Sonar", "declarator": "sonarClient", "var_name": "sonarClient"}, {"original_string": "SonarConnection sonar;", "modifier": "", "type": "SonarConnection", "declarator": "sonar", "var_name": "sonar"}, {"original_string": "private Map<String, String> properties;", "modifier": "private", "type": "Map<String, String>", "declarator": "properties", "var_name": "properties"}], "file": "component/core/src/test/java/fr/norad/visuwall/plugin/sonar/SonarConnectionTest.java"}, "test_case": {"identifier": "build_numbers_should_not_be_empty", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void build_numbers_should_not_be_empty() throws ProjectNotFoundException {\n        SoftwareProjectId softwareProjectId = new SoftwareProjectId(\"projectId\");\n        List<Integer> buildIds = sonar.getBuildIds(softwareProjectId);\n        assertFalse(buildIds.isEmpty());\n    }", "signature": "void build_numbers_should_not_be_empty()", "full_signature": "@Test public void build_numbers_should_not_be_empty()", "class_method_signature": "SonarConnectionTest.build_numbers_should_not_be_empty()", "testcase": true, "constructor": false, "invocations": ["getBuildIds", "assertFalse", "isEmpty"]}, "focal_class": {"identifier": "SonarConnection", "superclass": "", "interfaces": "implements MetricCapability, TestCapability", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SonarConnection.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SonarConnection.class)", "var_name": "LOG"}, {"original_string": "private final UUID id = UUID.randomUUID();", "modifier": "private final", "type": "UUID", "declarator": "id = UUID.randomUUID()", "var_name": "id"}, {"original_string": "@VisibleForTesting\n    Sonar sonarClient;", "modifier": "@VisibleForTesting", "type": "Sonar", "declarator": "sonarClient", "var_name": "sonarClient"}, {"original_string": "private Map<String, QualityMetric> metricsMap;", "modifier": "private", "type": "Map<String, QualityMetric>", "declarator": "metricsMap", "var_name": "metricsMap"}, {"original_string": "private String[] metricKeys = new String[] {};", "modifier": "private", "type": "String[]", "declarator": "metricKeys = new String[] {}", "var_name": "metricKeys"}, {"original_string": "private boolean connected;", "modifier": "private", "type": "boolean", "declarator": "connected", "var_name": "connected"}, {"original_string": "private String url;", "modifier": "private", "type": "String", "declarator": "url", "var_name": "url"}], "methods": [{"identifier": "SonarConnection", "parameters": "()", "modifiers": "public", "return": "", "signature": " SonarConnection()", "full_signature": "public  SonarConnection()", "class_method_signature": "SonarConnection.SonarConnection()", "testcase": false, "constructor": true}, {"identifier": "connect", "parameters": "(String url, String login, String password)", "modifiers": "@Override public", "return": "void", "signature": "void connect(String url, String login, String password)", "full_signature": "@Override public void connect(String url, String login, String password)", "class_method_signature": "SonarConnection.connect(String url, String login, String password)", "testcase": false, "constructor": false}, {"identifier": "getMetricsByCategory", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, List<QualityMetric>>", "signature": "Map<String, List<QualityMetric>> getMetricsByCategory()", "full_signature": "@Override public Map<String, List<QualityMetric>> getMetricsByCategory()", "class_method_signature": "SonarConnection.getMetricsByCategory()", "testcase": false, "constructor": false}, {"identifier": "listSoftwareProjectIds", "parameters": "()", "modifiers": "@Override public", "return": "Map<SoftwareProjectId, String>", "signature": "Map<SoftwareProjectId, String> listSoftwareProjectIds()", "full_signature": "@Override public Map<SoftwareProjectId, String> listSoftwareProjectIds()", "class_method_signature": "SonarConnection.listSoftwareProjectIds()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SonarConnection.close()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "SonarConnection.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SonarConnection.hashCode()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "String", "signature": "String getDescription(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public String getDescription(SoftwareProjectId softwareProjectId)", "class_method_signature": "SonarConnection.getDescription(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "identify", "parameters": "(ProjectKey projectKey)", "modifiers": "@Override public", "return": "SoftwareProjectId", "signature": "SoftwareProjectId identify(ProjectKey projectKey)", "full_signature": "@Override public SoftwareProjectId identify(ProjectKey projectKey)", "class_method_signature": "SonarConnection.identify(ProjectKey projectKey)", "testcase": false, "constructor": false}, {"identifier": "analyzeUnitTests", "parameters": "(SoftwareProjectId projectId)", "modifiers": "@Override public", "return": "TestResult", "signature": "TestResult analyzeUnitTests(SoftwareProjectId projectId)", "full_signature": "@Override public TestResult analyzeUnitTests(SoftwareProjectId projectId)", "class_method_signature": "SonarConnection.analyzeUnitTests(SoftwareProjectId projectId)", "testcase": false, "constructor": false}, {"identifier": "analyzeIntegrationTests", "parameters": "(SoftwareProjectId projectId)", "modifiers": "@Override public", "return": "TestResult", "signature": "TestResult analyzeIntegrationTests(SoftwareProjectId projectId)", "full_signature": "@Override public TestResult analyzeIntegrationTests(SoftwareProjectId projectId)", "class_method_signature": "SonarConnection.analyzeIntegrationTests(SoftwareProjectId projectId)", "testcase": false, "constructor": false}, {"identifier": "analyzeQuality", "parameters": "(SoftwareProjectId projectId, String... metrics)", "modifiers": "@Override public", "return": "QualityResult", "signature": "QualityResult analyzeQuality(SoftwareProjectId projectId, String... metrics)", "full_signature": "@Override public QualityResult analyzeQuality(SoftwareProjectId projectId, String... metrics)", "class_method_signature": "SonarConnection.analyzeQuality(SoftwareProjectId projectId, String... metrics)", "testcase": false, "constructor": false}, {"identifier": "addQualityMeasure", "parameters": "(QualityResult qualityResult, String artifactId, String key)", "modifiers": "private", "return": "void", "signature": "void addQualityMeasure(QualityResult qualityResult, String artifactId, String key)", "full_signature": "private void addQualityMeasure(QualityResult qualityResult, String artifactId, String key)", "class_method_signature": "SonarConnection.addQualityMeasure(QualityResult qualityResult, String artifactId, String key)", "testcase": false, "constructor": false}, {"identifier": "asQualityMeasure", "parameters": "(SonarQualityMeasure sonarQualityMeasure)", "modifiers": "private", "return": "QualityMeasure", "signature": "QualityMeasure asQualityMeasure(SonarQualityMeasure sonarQualityMeasure)", "full_signature": "private QualityMeasure asQualityMeasure(SonarQualityMeasure sonarQualityMeasure)", "class_method_signature": "SonarConnection.asQualityMeasure(SonarQualityMeasure sonarQualityMeasure)", "testcase": false, "constructor": false}, {"identifier": "getMavenId", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "String", "signature": "String getMavenId(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public String getMavenId(SoftwareProjectId softwareProjectId)", "class_method_signature": "SonarConnection.getMavenId(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "String", "signature": "String getName(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public String getName(SoftwareProjectId softwareProjectId)", "class_method_signature": "SonarConnection.getName(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "@Override public boolean isClosed()", "class_method_signature": "SonarConnection.isClosed()", "testcase": false, "constructor": false}, {"identifier": "isProjectDisabled", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isProjectDisabled(SoftwareProjectId softwareProjectId)", "full_signature": "@Override public boolean isProjectDisabled(SoftwareProjectId softwareProjectId)", "class_method_signature": "SonarConnection.isProjectDisabled(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "createUnitTestAnalysis", "parameters": "(String artifactId)", "modifiers": "private", "return": "TestResult", "signature": "TestResult createUnitTestAnalysis(String artifactId)", "full_signature": "private TestResult createUnitTestAnalysis(String artifactId)", "class_method_signature": "SonarConnection.createUnitTestAnalysis(String artifactId)", "testcase": false, "constructor": false}, {"identifier": "initializeMetrics", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initializeMetrics()", "full_signature": "private void initializeMetrics()", "class_method_signature": "SonarConnection.initializeMetrics()", "testcase": false, "constructor": false}, {"identifier": "asMetrics", "parameters": "(Map<String, SonarQualityMetric> sonarMetrics)", "modifiers": "private", "return": "Map<String, QualityMetric>", "signature": "Map<String, QualityMetric> asMetrics(Map<String, SonarQualityMetric> sonarMetrics)", "full_signature": "private Map<String, QualityMetric> asMetrics(Map<String, SonarQualityMetric> sonarMetrics)", "class_method_signature": "SonarConnection.asMetrics(Map<String, SonarQualityMetric> sonarMetrics)", "testcase": false, "constructor": false}, {"identifier": "asQualityMetric", "parameters": "(SonarQualityMetric sonarQualityMetric)", "modifiers": "private", "return": "QualityMetric", "signature": "QualityMetric asQualityMetric(SonarQualityMetric sonarQualityMetric)", "full_signature": "private QualityMetric asQualityMetric(SonarQualityMetric sonarQualityMetric)", "class_method_signature": "SonarConnection.asQualityMetric(SonarQualityMetric sonarQualityMetric)", "testcase": false, "constructor": false}, {"identifier": "getBuildTime", "parameters": "(SoftwareProjectId softwareProjectId, Integer buildId)", "modifiers": "public", "return": "BuildTime", "signature": "BuildTime getBuildTime(SoftwareProjectId softwareProjectId, Integer buildId)", "full_signature": "public BuildTime getBuildTime(SoftwareProjectId softwareProjectId, Integer buildId)", "class_method_signature": "SonarConnection.getBuildTime(SoftwareProjectId softwareProjectId, Integer buildId)", "testcase": false, "constructor": false}, {"identifier": "getBuildIds", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Deprecated // NOT USED public", "return": "List<Integer>", "signature": "List<Integer> getBuildIds(SoftwareProjectId softwareProjectId)", "full_signature": "@Deprecated // NOT USED public List<Integer> getBuildIds(SoftwareProjectId softwareProjectId)", "class_method_signature": "SonarConnection.getBuildIds(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "getBuildState", "parameters": "(SoftwareProjectId softwareProjectId, Integer buildId)", "modifiers": "@Deprecated // NOT USED public", "return": "BuildState", "signature": "BuildState getBuildState(SoftwareProjectId softwareProjectId, Integer buildId)", "full_signature": "@Deprecated // NOT USED public BuildState getBuildState(SoftwareProjectId softwareProjectId, Integer buildId)", "class_method_signature": "SonarConnection.getBuildState(SoftwareProjectId softwareProjectId, Integer buildId)", "testcase": false, "constructor": false}, {"identifier": "getEstimatedFinishTime", "parameters": "(SoftwareProjectId softwareProjectId, Integer buildId)", "modifiers": "@Deprecated // NOT USED public", "return": "Date", "signature": "Date getEstimatedFinishTime(SoftwareProjectId softwareProjectId, Integer buildId)", "full_signature": "@Deprecated // NOT USED public Date getEstimatedFinishTime(SoftwareProjectId softwareProjectId, Integer buildId)", "class_method_signature": "SonarConnection.getEstimatedFinishTime(SoftwareProjectId softwareProjectId, Integer buildId)", "testcase": false, "constructor": false}, {"identifier": "isBuilding", "parameters": "(SoftwareProjectId softwareProjectId, Integer buildId)", "modifiers": "@Deprecated // NOT USED public", "return": "boolean", "signature": "boolean isBuilding(SoftwareProjectId softwareProjectId, Integer buildId)", "full_signature": "@Deprecated // NOT USED public boolean isBuilding(SoftwareProjectId softwareProjectId, Integer buildId)", "class_method_signature": "SonarConnection.isBuilding(SoftwareProjectId softwareProjectId, Integer buildId)", "testcase": false, "constructor": false}, {"identifier": "getLastBuildId", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Deprecated // NOT USED public", "return": "int", "signature": "int getLastBuildId(SoftwareProjectId softwareProjectId)", "full_signature": "@Deprecated // NOT USED public int getLastBuildId(SoftwareProjectId softwareProjectId)", "class_method_signature": "SonarConnection.getLastBuildId(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "getBuildCommiters", "parameters": "(SoftwareProjectId softwareProjectId, Integer buildId)", "modifiers": "@Deprecated // NOT USED public", "return": "List<Commiter>", "signature": "List<Commiter> getBuildCommiters(SoftwareProjectId softwareProjectId, Integer buildId)", "full_signature": "@Deprecated // NOT USED public List<Commiter> getBuildCommiters(SoftwareProjectId softwareProjectId, Integer buildId)", "class_method_signature": "SonarConnection.getBuildCommiters(SoftwareProjectId softwareProjectId, Integer buildId)", "testcase": false, "constructor": false}, {"identifier": "checkBuildId", "parameters": "(int buildId)", "modifiers": "private", "return": "void", "signature": "void checkBuildId(int buildId)", "full_signature": "private void checkBuildId(int buildId)", "class_method_signature": "SonarConnection.checkBuildId(int buildId)", "testcase": false, "constructor": false}, {"identifier": "checkSoftwareProjectId", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "private", "return": "void", "signature": "void checkSoftwareProjectId(SoftwareProjectId softwareProjectId)", "full_signature": "private void checkSoftwareProjectId(SoftwareProjectId softwareProjectId)", "class_method_signature": "SonarConnection.checkSoftwareProjectId(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false}, {"identifier": "checkConnected", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkConnected()", "full_signature": "private void checkConnected()", "class_method_signature": "SonarConnection.checkConnected()", "testcase": false, "constructor": false}], "file": "component/core/src/main/java/fr/norad/visuwall/plugin/sonar/SonarConnection.java"}, "focal_method": {"identifier": "getBuildIds", "parameters": "(SoftwareProjectId softwareProjectId)", "modifiers": "@Deprecated // NOT USED public", "return": "List<Integer>", "body": "@Deprecated\n    // NOT USED\n    public List<Integer> getBuildIds(SoftwareProjectId softwareProjectId) throws ProjectNotFoundException {\n        checkConnected();\n        checkSoftwareProjectId(softwareProjectId);\n        return Arrays.asList(1);\n    }", "signature": "List<Integer> getBuildIds(SoftwareProjectId softwareProjectId)", "full_signature": "@Deprecated // NOT USED public List<Integer> getBuildIds(SoftwareProjectId softwareProjectId)", "class_method_signature": "SonarConnection.getBuildIds(SoftwareProjectId softwareProjectId)", "testcase": false, "constructor": false, "invocations": ["checkConnected", "checkSoftwareProjectId", "asList"]}, "repository": {"repo_id": 29774200, "url": "https://github.com/n0rad/visuwall", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 5, "size": 19747, "license": "licensed"}}