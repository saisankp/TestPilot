{"test_class": {"identifier": "ColorimetricColorTest", "superclass": "extends ColorimetryAssert", "interfaces": "", "fields": [{"original_string": "private Logger logger = Logger.getLogger(ColorimetricColorTest.class);", "modifier": "private", "type": "Logger", "declarator": "logger = Logger.getLogger(ColorimetricColorTest.class)", "var_name": "logger"}, {"original_string": "private ColorimetricColor defaultColorimetric;", "modifier": "private", "type": "ColorimetricColor", "declarator": "defaultColorimetric", "var_name": "defaultColorimetric"}], "file": "geoxygene-style/src/test/java/fr/ign/cogit/geoxygene/style/colorimetry/ColorimetricColorTest.java"}, "test_case": {"identifier": "testGetSlice", "parameters": "()", "modifiers": "@Test public final", "return": "void", "body": "@Test\n  public final void testGetSlice() {\n    logger.info(\"--------------------------------------------------------------------------------------------------------------\");\n    logger.info(\"Test method getSlice(ColorReferenceSystem)\");\n    \n    // =====================================================\n    logger.info(\"  Test 1.1 : ColorReferenceSystem is null. \");\n    ColorimetricColor cResult = new ColorimetricColor();\n    assertNull(\"ColorSlice is not null \", cResult.getSlice(null));\n    \n    logger.info(\"  Test 1.2 : ColorReferenceSystem exist but is empty. \");\n    cResult = new ColorimetricColor();\n    ColorReferenceSystem crsZeroWheels = new ColorReferenceSystem();\n    assertNull(\"ColorSlice is not null \", cResult.getSlice(crsZeroWheels));\n    \n    logger.info(\"  Test 1.3 : ColorReferenceSystem without wheels\");\n    cResult = new ColorimetricColor();\n    crsZeroWheels = new ColorReferenceSystem();\n    List<ColorWheel> wheels = new ArrayList<ColorWheel>();\n    crsZeroWheels.setWheels(wheels);\n    assertNull(\"ColorSlice is not null \", cResult.getSlice(crsZeroWheels));\n    \n    logger.info(\"  Test 1.4 : ColorReferenceSystem : each wheels has not got slices\");\n    List<ColorSlice> slices = new ArrayList<ColorSlice>();\n    ColorWheel colorWheel = new ColorWheel();\n    colorWheel.setSlices(slices);\n    wheels = new ArrayList<ColorWheel>();\n    wheels.add(colorWheel);\n    cResult = new ColorimetricColor();\n    crsZeroWheels = new ColorReferenceSystem();\n    crsZeroWheels.setWheels(wheels);\n    assertNull(\"ColorSlice is not null \", cResult.getSlice(crsZeroWheels));\n    \n    logger.info(\"  Test 1.5 : ColorReferenceSystem : each slices of each wheels has not got colors\");\n    ColorSlice colorSlice = new ColorSlice();\n    slices = new ArrayList<ColorSlice>();\n    slices.add(colorSlice);\n    colorWheel = new ColorWheel();\n    colorWheel.setSlices(slices);\n    wheels = new ArrayList<ColorWheel>();\n    wheels.add(colorWheel);\n    cResult = new ColorimetricColor();\n    crsZeroWheels = new ColorReferenceSystem();\n    crsZeroWheels.setWheels(wheels);\n    assertNull(\"ColorSlice is not null \", cResult.getSlice(crsZeroWheels));\n    \n    // =====================================================\n    logger.info(\"  Test 2 : ColorReferenceSystem with one color\");\n    colorSlice = new ColorSlice();\n    colorSlice.setHue(\"ROUGE GRIS\");\n    colorSlice.setIdSaturationParentWheel(0);\n    List<ColorimetricColor> justDefaultColorimetricList = new ArrayList<ColorimetricColor>();\n    justDefaultColorimetricList.add(new ColorimetricColor());\n    colorSlice.setColors(justDefaultColorimetricList);\n    \n    colorWheel = new ColorWheel();\n    slices = new ArrayList<ColorSlice>();\n    slices.add(colorSlice);\n    colorWheel.setSlices(slices);\n    colorWheel.setidSaturation(0);\n    \n    crsZeroWheels = new ColorReferenceSystem();\n    wheels = new ArrayList<ColorWheel>();\n    wheels.add(colorWheel);\n    crsZeroWheels.setWheels(wheels);\n    \n    cResult = new ColorimetricColor();\n    assertNotNull(\"ColorSlice is not null \", cResult.getSlice(crsZeroWheels));\n    \n    // =====================================================\n    logger.info(\"  Test 3 : COGIT ColorReferenceSystem\");\n    // Loading COGIT Color reference system\n    ColorReferenceSystem COGITcrs = ColorReferenceSystem\n        .unmarshall(this.getClass().getClassLoader().getResourceAsStream(\"color/ColorReferenceSystem.xml\"));\n    \n    logger.info(\"  Test 3.1 : JAUNE\");\n    \n    // Prepare list colors expected for the JAUNE ColorSlice\n    List<ColorimetricColor> colorsExpected = new ArrayList<ColorimetricColor>();\n    colorsExpected.add(new ColorimetricColor(\"JAUNE TRES CLAIR\"));\n    colorsExpected.add(new ColorimetricColor(\"JAUNE CLAIR\"));\n    colorsExpected.add(new ColorimetricColor(\"JAUNE MOYEN CLAIR\"));\n    colorsExpected.add(new ColorimetricColor(\"JAUNE PUR\"));\n    colorsExpected.add(new ColorimetricColor(\"JAUNE MOYEN FONCE\"));\n    colorsExpected.add(new ColorimetricColor(\"JAUNE FONCE\"));\n    colorsExpected.add(new ColorimetricColor(\"JAUNE TRES FONCE\"));\n    \n    cResult = COGITcrs.getAllColors().get(1);\n    assertEquals(\"Compare hue. \", \"JAUNE\", cResult.getSlice(COGITcrs).getHue());\n    assertEquals(\"Compare idSaturationParentWheel. \", 0, cResult.getSlice(COGITcrs).getIdSaturationParentWheel());\n    compareColorimetricColorList(colorsExpected, cResult.getSlice(COGITcrs).getColors());\n    \n    cResult = new ColorimetricColor(1);\n    assertEquals(\"Compare hue. \", \"JAUNE\", cResult.getSlice(COGITcrs).getHue());\n    assertEquals(\"Compare idSaturationParentWheel. \", 0, cResult.getSlice(COGITcrs).getIdSaturationParentWheel());\n    compareColorimetricColorList(colorsExpected, cResult.getSlice(COGITcrs).getColors());\n    \n    cResult = new ColorimetricColor(2);\n    assertEquals(\"Compare hue. \", \"JAUNE\", cResult.getSlice(COGITcrs).getHue());\n    assertEquals(\"Compare idSaturationParentWheel. \", 0, cResult.getSlice(COGITcrs).getIdSaturationParentWheel());\n    compareColorimetricColorList(colorsExpected, cResult.getSlice(COGITcrs).getColors());\n    \n    cResult = new ColorimetricColor(7);\n    assertEquals(\"Compare hue. \", \"JAUNE\", cResult.getSlice(COGITcrs).getHue());\n    assertEquals(\"Compare idSaturationParentWheel. \", 0, cResult.getSlice(COGITcrs).getIdSaturationParentWheel());\n    compareColorimetricColorList(colorsExpected, cResult.getSlice(COGITcrs).getColors());\n    \n    cResult = new ColorimetricColor(\"JAUNE TRES FONCE\");\n    assertEquals(\"Compare hue. \", \"JAUNE\", cResult.getSlice(COGITcrs).getHue());\n    assertEquals(\"Compare idSaturationParentWheel. \", 0, cResult.getSlice(COGITcrs).getIdSaturationParentWheel());\n    compareColorimetricColorList(colorsExpected, cResult.getSlice(COGITcrs).getColors());\n    \n    // =====================================================\n    logger.info(\"  Test 3.2 : ORANGE GRIS\");\n    \n    // Prepare list colors expected for the ORANGE GRIS ColorSlice\n    colorsExpected = new ArrayList<ColorimetricColor>();\n    colorsExpected.add(new ColorimetricColor(\"ORANGE GRIS TRES CLAIR\"));\n    colorsExpected.add(new ColorimetricColor(\"ORANGE GRIS MOYEN CLAIR\"));\n    colorsExpected.add(new ColorimetricColor(\"ORANGE GRIS MOYEN FONCE\"));\n    colorsExpected.add(new ColorimetricColor(\"ORANGE GRIS TRES FONCE\"));\n    \n    cResult = new ColorimetricColor(129);\n    assertEquals(\"\", \"ORANGE GRIS\", cResult.getSlice(COGITcrs).getHue());\n    assertEquals(\"\", 1, cResult.getSlice(COGITcrs).getIdSaturationParentWheel());\n    \n    cResult = new ColorimetricColor(130);\n    assertEquals(\"\", \"ORANGE GRIS\", cResult.getSlice(COGITcrs).getHue());\n    assertEquals(\"\", 1, cResult.getSlice(COGITcrs).getIdSaturationParentWheel());\n    \n    cResult = new ColorimetricColor(131);\n    assertEquals(\"\", \"ORANGE GRIS\", cResult.getSlice(COGITcrs).getHue());\n    assertEquals(\"\", 1, cResult.getSlice(COGITcrs).getIdSaturationParentWheel());\n    \n    cResult = new ColorimetricColor(\"ORANGE GRIS TRES CLAIR\");\n    assertEquals(\"\", \"ORANGE GRIS\", cResult.getSlice(COGITcrs).getHue());\n    assertEquals(\"\", 1, cResult.getSlice(COGITcrs).getIdSaturationParentWheel());\n    \n    // ???\n    // List<ColorimetricColor> slice = COGITcrs.getSlice(0, 1);\n    \n  }", "signature": "void testGetSlice()", "full_signature": "@Test public final void testGetSlice()", "class_method_signature": "ColorimetricColorTest.testGetSlice()", "testcase": true, "constructor": false, "invocations": ["info", "info", "info", "assertNull", "getSlice", "info", "assertNull", "getSlice", "info", "setWheels", "assertNull", "getSlice", "info", "setSlices", "add", "setWheels", "assertNull", "getSlice", "info", "add", "setSlices", "add", "setWheels", "assertNull", "getSlice", "info", "setHue", "setIdSaturationParentWheel", "add", "setColors", "add", "setSlices", "setidSaturation", "add", "setWheels", "assertNotNull", "getSlice", "info", "unmarshall", "getResourceAsStream", "getClassLoader", "getClass", "info", "add", "add", "add", "add", "add", "add", "add", "get", "getAllColors", "assertEquals", "getHue", "getSlice", "assertEquals", "getIdSaturationParentWheel", "getSlice", "compareColorimetricColorList", "getColors", "getSlice", "assertEquals", "getHue", "getSlice", "assertEquals", "getIdSaturationParentWheel", "getSlice", "compareColorimetricColorList", "getColors", "getSlice", "assertEquals", "getHue", "getSlice", "assertEquals", "getIdSaturationParentWheel", "getSlice", "compareColorimetricColorList", "getColors", "getSlice", "assertEquals", "getHue", "getSlice", "assertEquals", "getIdSaturationParentWheel", "getSlice", "compareColorimetricColorList", "getColors", "getSlice", "assertEquals", "getHue", "getSlice", "assertEquals", "getIdSaturationParentWheel", "getSlice", "compareColorimetricColorList", "getColors", "getSlice", "info", "add", "add", "add", "add", "assertEquals", "getHue", "getSlice", "assertEquals", "getIdSaturationParentWheel", "getSlice", "assertEquals", "getHue", "getSlice", "assertEquals", "getIdSaturationParentWheel", "getSlice", "assertEquals", "getHue", "getSlice", "assertEquals", "getIdSaturationParentWheel", "getSlice", "assertEquals", "getHue", "getSlice", "assertEquals", "getIdSaturationParentWheel", "getSlice"]}, "focal_class": {"identifier": "ColorimetricColor", "superclass": "", "interfaces": "", "fields": [{"original_string": "static Logger logger = Logger.getLogger(ColorimetricColor.class);", "modifier": "static", "type": "Logger", "declarator": "logger = Logger.getLogger(ColorimetricColor.class)", "var_name": "logger"}, {"original_string": "@XmlElement(name = \"IdColor\")\n  protected int idColor;", "modifier": "@XmlElement(name = \"IdColor\")\n  protected", "type": "int", "declarator": "idColor", "var_name": "idColor"}, {"original_string": "@XmlElement(name = \"Hue\")\n  protected String hue;", "modifier": "@XmlElement(name = \"Hue\")\n  protected", "type": "String", "declarator": "hue", "var_name": "hue"}, {"original_string": "@XmlElement(name = \"Lightness\")\n  protected int lightness;", "modifier": "@XmlElement(name = \"Lightness\")\n  protected", "type": "int", "declarator": "lightness", "var_name": "lightness"}, {"original_string": "@XmlElement(name = \"UsualName\")\n  protected String usualName;", "modifier": "@XmlElement(name = \"UsualName\")\n  protected", "type": "String", "declarator": "usualName", "var_name": "usualName"}, {"original_string": "@XmlElement(name = \"CleCoul\")\n  protected String cleCoul;", "modifier": "@XmlElement(name = \"CleCoul\")\n  protected", "type": "String", "declarator": "cleCoul", "var_name": "cleCoul"}, {"original_string": "@XmlElement(name = \"redRGB\")\n  protected int redRGB;", "modifier": "@XmlElement(name = \"redRGB\")\n  protected", "type": "int", "declarator": "redRGB", "var_name": "redRGB"}, {"original_string": "@XmlElement(name = \"greenRGB\")\n  protected int greenRGB;", "modifier": "@XmlElement(name = \"greenRGB\")\n  protected", "type": "int", "declarator": "greenRGB", "var_name": "greenRGB"}, {"original_string": "@XmlElement(name = \"blueRGB\")\n  protected int blueRGB;", "modifier": "@XmlElement(name = \"blueRGB\")\n  protected", "type": "int", "declarator": "blueRGB", "var_name": "blueRGB"}, {"original_string": "@XmlElement(name = \"xScreen\")\n  protected int xScreen;", "modifier": "@XmlElement(name = \"xScreen\")\n  protected", "type": "int", "declarator": "xScreen", "var_name": "xScreen"}, {"original_string": "@XmlElement(name = \"yScreen\")\n  protected int yScreen;", "modifier": "@XmlElement(name = \"yScreen\")\n  protected", "type": "int", "declarator": "yScreen", "var_name": "yScreen"}], "methods": [{"identifier": "getIdColor", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getIdColor()", "full_signature": "public int getIdColor()", "class_method_signature": "ColorimetricColor.getIdColor()", "testcase": false, "constructor": false}, {"identifier": "setIdColor", "parameters": "(int id)", "modifiers": "public", "return": "void", "signature": "void setIdColor(int id)", "full_signature": "public void setIdColor(int id)", "class_method_signature": "ColorimetricColor.setIdColor(int id)", "testcase": false, "constructor": false}, {"identifier": "getHue", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getHue()", "full_signature": "public String getHue()", "class_method_signature": "ColorimetricColor.getHue()", "testcase": false, "constructor": false}, {"identifier": "setHue", "parameters": "(String hue)", "modifiers": "public", "return": "void", "signature": "void setHue(String hue)", "full_signature": "public void setHue(String hue)", "class_method_signature": "ColorimetricColor.setHue(String hue)", "testcase": false, "constructor": false}, {"identifier": "getSlice", "parameters": "(ColorReferenceSystem crs)", "modifiers": "public", "return": "ColorSlice", "signature": "ColorSlice getSlice(ColorReferenceSystem crs)", "full_signature": "public ColorSlice getSlice(ColorReferenceSystem crs)", "class_method_signature": "ColorimetricColor.getSlice(ColorReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "getWheel", "parameters": "(ColorReferenceSystem crs)", "modifiers": "public", "return": "ColorWheel", "signature": "ColorWheel getWheel(ColorReferenceSystem crs)", "full_signature": "public ColorWheel getWheel(ColorReferenceSystem crs)", "class_method_signature": "ColorimetricColor.getWheel(ColorReferenceSystem crs)", "testcase": false, "constructor": false}, {"identifier": "getLightness", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getLightness()", "full_signature": "public int getLightness()", "class_method_signature": "ColorimetricColor.getLightness()", "testcase": false, "constructor": false}, {"identifier": "setLightness", "parameters": "(int lightness)", "modifiers": "public", "return": "void", "signature": "void setLightness(int lightness)", "full_signature": "public void setLightness(int lightness)", "class_method_signature": "ColorimetricColor.setLightness(int lightness)", "testcase": false, "constructor": false}, {"identifier": "setSaturation", "parameters": "(int saturation)", "modifiers": "public", "return": "void", "signature": "void setSaturation(int saturation)", "full_signature": "public void setSaturation(int saturation)", "class_method_signature": "ColorimetricColor.setSaturation(int saturation)", "testcase": false, "constructor": false}, {"identifier": "getUsualName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUsualName()", "full_signature": "public String getUsualName()", "class_method_signature": "ColorimetricColor.getUsualName()", "testcase": false, "constructor": false}, {"identifier": "setUsualName", "parameters": "(String usualName)", "modifiers": "public", "return": "void", "signature": "void setUsualName(String usualName)", "full_signature": "public void setUsualName(String usualName)", "class_method_signature": "ColorimetricColor.setUsualName(String usualName)", "testcase": false, "constructor": false}, {"identifier": "getCleCoul", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getCleCoul()", "full_signature": "public String getCleCoul()", "class_method_signature": "ColorimetricColor.getCleCoul()", "testcase": false, "constructor": false}, {"identifier": "setCleCoul", "parameters": "(String cleCoul)", "modifiers": "public", "return": "void", "signature": "void setCleCoul(String cleCoul)", "full_signature": "public void setCleCoul(String cleCoul)", "class_method_signature": "ColorimetricColor.setCleCoul(String cleCoul)", "testcase": false, "constructor": false}, {"identifier": "getRedRGB", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getRedRGB()", "full_signature": "public int getRedRGB()", "class_method_signature": "ColorimetricColor.getRedRGB()", "testcase": false, "constructor": false}, {"identifier": "setRedRGB", "parameters": "(int redRGB)", "modifiers": "public", "return": "void", "signature": "void setRedRGB(int redRGB)", "full_signature": "public void setRedRGB(int redRGB)", "class_method_signature": "ColorimetricColor.setRedRGB(int redRGB)", "testcase": false, "constructor": false}, {"identifier": "getGreenRGB", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getGreenRGB()", "full_signature": "public int getGreenRGB()", "class_method_signature": "ColorimetricColor.getGreenRGB()", "testcase": false, "constructor": false}, {"identifier": "setGreenRGB", "parameters": "(int greenRGB)", "modifiers": "public", "return": "void", "signature": "void setGreenRGB(int greenRGB)", "full_signature": "public void setGreenRGB(int greenRGB)", "class_method_signature": "ColorimetricColor.setGreenRGB(int greenRGB)", "testcase": false, "constructor": false}, {"identifier": "getBlueRGB", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getBlueRGB()", "full_signature": "public int getBlueRGB()", "class_method_signature": "ColorimetricColor.getBlueRGB()", "testcase": false, "constructor": false}, {"identifier": "setBlueRGB", "parameters": "(int blueRGB)", "modifiers": "public", "return": "void", "signature": "void setBlueRGB(int blueRGB)", "full_signature": "public void setBlueRGB(int blueRGB)", "class_method_signature": "ColorimetricColor.setBlueRGB(int blueRGB)", "testcase": false, "constructor": false}, {"identifier": "getXScreen", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getXScreen()", "full_signature": "public int getXScreen()", "class_method_signature": "ColorimetricColor.getXScreen()", "testcase": false, "constructor": false}, {"identifier": "setXScreen", "parameters": "(int x)", "modifiers": "public", "return": "void", "signature": "void setXScreen(int x)", "full_signature": "public void setXScreen(int x)", "class_method_signature": "ColorimetricColor.setXScreen(int x)", "testcase": false, "constructor": false}, {"identifier": "getYScreen", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getYScreen()", "full_signature": "public int getYScreen()", "class_method_signature": "ColorimetricColor.getYScreen()", "testcase": false, "constructor": false}, {"identifier": "setYScreen", "parameters": "(int y)", "modifiers": "public", "return": "void", "signature": "void setYScreen(int y)", "full_signature": "public void setYScreen(int y)", "class_method_signature": "ColorimetricColor.setYScreen(int y)", "testcase": false, "constructor": false}, {"identifier": "ColorimetricColor", "parameters": "()", "modifiers": "public", "return": "", "signature": " ColorimetricColor()", "full_signature": "public  ColorimetricColor()", "class_method_signature": "ColorimetricColor.ColorimetricColor()", "testcase": false, "constructor": true}, {"identifier": "ColorimetricColor", "parameters": "(int idColor)", "modifiers": "public", "return": "", "signature": " ColorimetricColor(int idColor)", "full_signature": "public  ColorimetricColor(int idColor)", "class_method_signature": "ColorimetricColor.ColorimetricColor(int idColor)", "testcase": false, "constructor": true}, {"identifier": "ColorimetricColor", "parameters": "(String hue, int lightness)", "modifiers": "public", "return": "", "signature": " ColorimetricColor(String hue, int lightness)", "full_signature": "public  ColorimetricColor(String hue, int lightness)", "class_method_signature": "ColorimetricColor.ColorimetricColor(String hue, int lightness)", "testcase": false, "constructor": true}, {"identifier": "ColorimetricColor", "parameters": "(String usualName)", "modifiers": "public", "return": "", "signature": " ColorimetricColor(String usualName)", "full_signature": "public  ColorimetricColor(String usualName)", "class_method_signature": "ColorimetricColor.ColorimetricColor(String usualName)", "testcase": false, "constructor": true}, {"identifier": "ColorimetricColor", "parameters": "(int r, int g, int b)", "modifiers": "public", "return": "", "signature": " ColorimetricColor(int r, int g, int b)", "full_signature": "public  ColorimetricColor(int r, int g, int b)", "class_method_signature": "ColorimetricColor.ColorimetricColor(int r, int g, int b)", "testcase": false, "constructor": true}, {"identifier": "ColorimetricColor", "parameters": "(int r, int g, int b, boolean reference)", "modifiers": "public", "return": "", "signature": " ColorimetricColor(int r, int g, int b, boolean reference)", "full_signature": "public  ColorimetricColor(int r, int g, int b, boolean reference)", "class_method_signature": "ColorimetricColor.ColorimetricColor(int r, int g, int b, boolean reference)", "testcase": false, "constructor": true}, {"identifier": "ColorimetricColor", "parameters": "(Color c)", "modifiers": "public", "return": "", "signature": " ColorimetricColor(Color c)", "full_signature": "public  ColorimetricColor(Color c)", "class_method_signature": "ColorimetricColor.ColorimetricColor(Color c)", "testcase": false, "constructor": true}, {"identifier": "ColorimetricColor", "parameters": "(Color c, boolean reference)", "modifiers": "public", "return": "", "signature": " ColorimetricColor(Color c, boolean reference)", "full_signature": "public  ColorimetricColor(Color c, boolean reference)", "class_method_signature": "ColorimetricColor.ColorimetricColor(Color c, boolean reference)", "testcase": false, "constructor": true}, {"identifier": "toColor", "parameters": "()", "modifiers": "public", "return": "Color", "signature": "Color toColor()", "full_signature": "public Color toColor()", "class_method_signature": "ColorimetricColor.toColor()", "testcase": false, "constructor": false}, {"identifier": "toXYZ", "parameters": "()", "modifiers": "public", "return": "float[]", "signature": "float[] toXYZ()", "full_signature": "public float[] toXYZ()", "class_method_signature": "ColorimetricColor.toXYZ()", "testcase": false, "constructor": false}, {"identifier": "toXYZ", "parameters": "(float[] lab)", "modifiers": "public static", "return": "float[]", "signature": "float[] toXYZ(float[] lab)", "full_signature": "public static float[] toXYZ(float[] lab)", "class_method_signature": "ColorimetricColor.toXYZ(float[] lab)", "testcase": false, "constructor": false}, {"identifier": "getLab", "parameters": "()", "modifiers": "public", "return": "float[]", "signature": "float[] getLab()", "full_signature": "public float[] getLab()", "class_method_signature": "ColorimetricColor.getLab()", "testcase": false, "constructor": false}, {"identifier": "f", "parameters": "(float t)", "modifiers": "public static", "return": "float", "signature": "float f(float t)", "full_signature": "public static float f(float t)", "class_method_signature": "ColorimetricColor.f(float t)", "testcase": false, "constructor": false}, {"identifier": "getCIELabL", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getCIELabL()", "full_signature": "public float getCIELabL()", "class_method_signature": "ColorimetricColor.getCIELabL()", "testcase": false, "constructor": false}, {"identifier": "getCIELabA", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getCIELabA()", "full_signature": "public float getCIELabA()", "class_method_signature": "ColorimetricColor.getCIELabA()", "testcase": false, "constructor": false}, {"identifier": "getCIELabB", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float getCIELabB()", "full_signature": "public float getCIELabB()", "class_method_signature": "ColorimetricColor.getCIELabB()", "testcase": false, "constructor": false}, {"identifier": "getCIEChroma", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCIEChroma()", "full_signature": "public double getCIEChroma()", "class_method_signature": "ColorimetricColor.getCIEChroma()", "testcase": false, "constructor": false}, {"identifier": "getCIEHue", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getCIEHue()", "full_signature": "public double getCIEHue()", "class_method_signature": "ColorimetricColor.getCIEHue()", "testcase": false, "constructor": false}, {"identifier": "ColorimetricColor", "parameters": "(float l, float a, float b)", "modifiers": "public", "return": "", "signature": " ColorimetricColor(float l, float a, float b)", "full_signature": "public  ColorimetricColor(float l, float a, float b)", "class_method_signature": "ColorimetricColor.ColorimetricColor(float l, float a, float b)", "testcase": false, "constructor": true}, {"identifier": "ColorimetricColor", "parameters": "(float[] lab)", "modifiers": "public", "return": "", "signature": " ColorimetricColor(float[] lab)", "full_signature": "public  ColorimetricColor(float[] lab)", "class_method_signature": "ColorimetricColor.ColorimetricColor(float[] lab)", "testcase": false, "constructor": true}, {"identifier": "labExistance", "parameters": "(float l, float a, float b)", "modifiers": "public static", "return": "boolean", "signature": "boolean labExistance(float l, float a, float b)", "full_signature": "public static boolean labExistance(float l, float a, float b)", "class_method_signature": "ColorimetricColor.labExistance(float l, float a, float b)", "testcase": false, "constructor": false}, {"identifier": "setL", "parameters": "(float l)", "modifiers": "public", "return": "void", "signature": "void setL(float l)", "full_signature": "public void setL(float l)", "class_method_signature": "ColorimetricColor.setL(float l)", "testcase": false, "constructor": false}, {"identifier": "setA", "parameters": "(float a)", "modifiers": "public", "return": "void", "signature": "void setA(float a)", "full_signature": "public void setA(float a)", "class_method_signature": "ColorimetricColor.setA(float a)", "testcase": false, "constructor": false}, {"identifier": "setB", "parameters": "(float b)", "modifiers": "public", "return": "void", "signature": "void setB(float b)", "full_signature": "public void setB(float b)", "class_method_signature": "ColorimetricColor.setB(float b)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(ColorimetricColor c)", "modifiers": "public", "return": "boolean", "signature": "boolean equals(ColorimetricColor c)", "full_signature": "public boolean equals(ColorimetricColor c)", "class_method_signature": "ColorimetricColor.equals(ColorimetricColor c)", "testcase": false, "constructor": false}, {"identifier": "maxRGB", "parameters": "()", "modifiers": "public", "return": "float", "signature": "float maxRGB()", "full_signature": "public float maxRGB()", "class_method_signature": "ColorimetricColor.maxRGB()", "testcase": false, "constructor": false}, {"identifier": "distanceCIElab", "parameters": "(ColorimetricColor c1, ColorimetricColor c2)", "modifiers": "public static", "return": "float", "signature": "float distanceCIElab(ColorimetricColor c1, ColorimetricColor c2)", "full_signature": "public static float distanceCIElab(ColorimetricColor c1, ColorimetricColor c2)", "class_method_signature": "ColorimetricColor.distanceCIElab(ColorimetricColor c1, ColorimetricColor c2)", "testcase": false, "constructor": false}, {"identifier": "distanceRVB", "parameters": "(ColorimetricColor c1, ColorimetricColor c2)", "modifiers": "public static", "return": "float", "signature": "float distanceRVB(ColorimetricColor c1, ColorimetricColor c2)", "full_signature": "public static float distanceRVB(ColorimetricColor c1, ColorimetricColor c2)", "class_method_signature": "ColorimetricColor.distanceRVB(ColorimetricColor c1, ColorimetricColor c2)", "testcase": false, "constructor": false}, {"identifier": "CIELab_Lightness_Difference", "parameters": "(ColorimetricColor c1,\n      ColorimetricColor c2)", "modifiers": "public static", "return": "float", "signature": "float CIELab_Lightness_Difference(ColorimetricColor c1,\n      ColorimetricColor c2)", "full_signature": "public static float CIELab_Lightness_Difference(ColorimetricColor c1,\n      ColorimetricColor c2)", "class_method_signature": "ColorimetricColor.CIELab_Lightness_Difference(ColorimetricColor c1,\n      ColorimetricColor c2)", "testcase": false, "constructor": false}, {"identifier": "CIELCh_Chroma_Difference", "parameters": "(ColorimetricColor c1,\n      ColorimetricColor c2)", "modifiers": "public static", "return": "double", "signature": "double CIELCh_Chroma_Difference(ColorimetricColor c1,\n      ColorimetricColor c2)", "full_signature": "public static double CIELCh_Chroma_Difference(ColorimetricColor c1,\n      ColorimetricColor c2)", "class_method_signature": "ColorimetricColor.CIELCh_Chroma_Difference(ColorimetricColor c1,\n      ColorimetricColor c2)", "testcase": false, "constructor": false}, {"identifier": "CIELCh_Hue_Difference", "parameters": "(ColorimetricColor c1,\n      ColorimetricColor c2)", "modifiers": "public static", "return": "double", "signature": "double CIELCh_Hue_Difference(ColorimetricColor c1,\n      ColorimetricColor c2)", "full_signature": "public static double CIELCh_Hue_Difference(ColorimetricColor c1,\n      ColorimetricColor c2)", "class_method_signature": "ColorimetricColor.CIELCh_Hue_Difference(ColorimetricColor c1,\n      ColorimetricColor c2)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ColorimetricColor.toString()", "testcase": false, "constructor": false}, {"identifier": "basicColorsComponents", "parameters": "()", "modifiers": "public static", "return": "void", "signature": "void basicColorsComponents()", "full_signature": "public static void basicColorsComponents()", "class_method_signature": "ColorimetricColor.basicColorsComponents()", "testcase": false, "constructor": false}], "file": "geoxygene-style/src/main/java/fr/ign/cogit/geoxygene/style/colorimetry/ColorimetricColor.java"}, "focal_method": {"identifier": "getSlice", "parameters": "(ColorReferenceSystem crs)", "modifiers": "public", "return": "ColorSlice", "body": "public ColorSlice getSlice(ColorReferenceSystem crs) {\n    ColorSlice sliceColor = null;\n    if (crs != null) {\n      List<ColorWheel> wheels = crs.getWheels();\n      for (ColorWheel wheel : wheels) {\n        List<ColorSlice> slices = wheel.getSlices();\n        for (ColorSlice slice : slices) {\n          List<ColorimetricColor> colors = slice.getColors();\n          for (ColorimetricColor color : colors) {\n            if (this.equals(color)) {\n              sliceColor = slice;\n            }\n          }\n        }\n      }\n    }\n    return sliceColor;\n  }", "signature": "ColorSlice getSlice(ColorReferenceSystem crs)", "full_signature": "public ColorSlice getSlice(ColorReferenceSystem crs)", "class_method_signature": "ColorimetricColor.getSlice(ColorReferenceSystem crs)", "testcase": false, "constructor": false, "invocations": ["getWheels", "getSlices", "getColors", "equals"]}, "repository": {"repo_id": 56582318, "url": "https://github.com/IGNF/geoxygene", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 22, "size": 323511, "license": "licensed"}}