{"test_class": {"identifier": "DriveDatabaseManagerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "DriveDatabaseManager mDriveDatabaseManager;", "modifier": "", "type": "DriveDatabaseManager", "declarator": "mDriveDatabaseManager", "var_name": "mDriveDatabaseManager"}, {"original_string": "File mDatabaseFile;", "modifier": "", "type": "File", "declarator": "mDatabaseFile", "var_name": "mDatabaseFile"}, {"original_string": "@Mock\n    DriveStreamsManager mDriveStreamsManager;", "modifier": "@Mock", "type": "DriveStreamsManager", "declarator": "mDriveStreamsManager", "var_name": "mDriveStreamsManager"}, {"original_string": "@Mock\n    GoogleDriveSyncMetadata mGoogleDriveSyncMetadata;", "modifier": "@Mock", "type": "GoogleDriveSyncMetadata", "declarator": "mGoogleDriveSyncMetadata", "var_name": "mGoogleDriveSyncMetadata"}, {"original_string": "@Mock\n    Analytics mAnalytics;", "modifier": "@Mock", "type": "Analytics", "declarator": "mAnalytics", "var_name": "mAnalytics"}], "file": "automatic_backups/src/testNotFloss/java/co/smartreceipts/automatic_backups/drive/managers/DriveDatabaseManagerTest.java"}, "test_case": {"identifier": "syncDatabaseForTheFirstTime", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void syncDatabaseForTheFirstTime() {\n        final Identifier identifier = new Identifier(\"newId\");\n        when(mDriveStreamsManager.uploadFileToDrive(mDatabaseFile)).thenReturn(Single.just(identifier));\n\n        mDriveDatabaseManager.syncDatabase();\n        verify(mGoogleDriveSyncMetadata).setDatabaseSyncIdentifier(identifier);\n    }", "signature": "void syncDatabaseForTheFirstTime()", "full_signature": "@Test public void syncDatabaseForTheFirstTime()", "class_method_signature": "DriveDatabaseManagerTest.syncDatabaseForTheFirstTime()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "uploadFileToDrive", "just", "syncDatabase", "setDatabaseSyncIdentifier", "verify"]}, "focal_class": {"identifier": "DriveDatabaseManager", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Context mContext;", "modifier": "private final", "type": "Context", "declarator": "mContext", "var_name": "mContext"}, {"original_string": "private final DriveStreamsManager mDriveTaskManager;", "modifier": "private final", "type": "DriveStreamsManager", "declarator": "mDriveTaskManager", "var_name": "mDriveTaskManager"}, {"original_string": "private final GoogleDriveSyncMetadata mGoogleDriveSyncMetadata;", "modifier": "private final", "type": "GoogleDriveSyncMetadata", "declarator": "mGoogleDriveSyncMetadata", "var_name": "mGoogleDriveSyncMetadata"}, {"original_string": "private final Analytics mAnalytics;", "modifier": "private final", "type": "Analytics", "declarator": "mAnalytics", "var_name": "mAnalytics"}, {"original_string": "private final Scheduler mObserveOnScheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "mObserveOnScheduler", "var_name": "mObserveOnScheduler"}, {"original_string": "private final Scheduler mSubscribeOnScheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "mSubscribeOnScheduler", "var_name": "mSubscribeOnScheduler"}, {"original_string": "private final AtomicBoolean mIsSyncInProgress = new AtomicBoolean(false);", "modifier": "private final", "type": "AtomicBoolean", "declarator": "mIsSyncInProgress = new AtomicBoolean(false)", "var_name": "mIsSyncInProgress"}], "methods": [{"identifier": "DriveDatabaseManager", "parameters": "(@NonNull Context context, @NonNull DriveStreamsManager driveTaskManager,\n                                @NonNull GoogleDriveSyncMetadata googleDriveSyncMetadata,\n                                @NonNull Analytics analytics)", "modifiers": "public", "return": "", "signature": " DriveDatabaseManager(@NonNull Context context, @NonNull DriveStreamsManager driveTaskManager,\n                                @NonNull GoogleDriveSyncMetadata googleDriveSyncMetadata,\n                                @NonNull Analytics analytics)", "full_signature": "public  DriveDatabaseManager(@NonNull Context context, @NonNull DriveStreamsManager driveTaskManager,\n                                @NonNull GoogleDriveSyncMetadata googleDriveSyncMetadata,\n                                @NonNull Analytics analytics)", "class_method_signature": "DriveDatabaseManager.DriveDatabaseManager(@NonNull Context context, @NonNull DriveStreamsManager driveTaskManager,\n                                @NonNull GoogleDriveSyncMetadata googleDriveSyncMetadata,\n                                @NonNull Analytics analytics)", "testcase": false, "constructor": true}, {"identifier": "DriveDatabaseManager", "parameters": "(@NonNull Context context, @NonNull DriveStreamsManager driveTaskManager, @NonNull GoogleDriveSyncMetadata googleDriveSyncMetadata,\n                                @NonNull Analytics analytics, @NonNull Scheduler observeOnScheduler, @NonNull Scheduler subscribeOnScheduler)", "modifiers": "public", "return": "", "signature": " DriveDatabaseManager(@NonNull Context context, @NonNull DriveStreamsManager driveTaskManager, @NonNull GoogleDriveSyncMetadata googleDriveSyncMetadata,\n                                @NonNull Analytics analytics, @NonNull Scheduler observeOnScheduler, @NonNull Scheduler subscribeOnScheduler)", "full_signature": "public  DriveDatabaseManager(@NonNull Context context, @NonNull DriveStreamsManager driveTaskManager, @NonNull GoogleDriveSyncMetadata googleDriveSyncMetadata,\n                                @NonNull Analytics analytics, @NonNull Scheduler observeOnScheduler, @NonNull Scheduler subscribeOnScheduler)", "class_method_signature": "DriveDatabaseManager.DriveDatabaseManager(@NonNull Context context, @NonNull DriveStreamsManager driveTaskManager, @NonNull GoogleDriveSyncMetadata googleDriveSyncMetadata,\n                                @NonNull Analytics analytics, @NonNull Scheduler observeOnScheduler, @NonNull Scheduler subscribeOnScheduler)", "testcase": false, "constructor": true}, {"identifier": "syncDatabase", "parameters": "()", "modifiers": "@SuppressLint(\"CheckResult\") public", "return": "void", "signature": "void syncDatabase()", "full_signature": "@SuppressLint(\"CheckResult\") public void syncDatabase()", "class_method_signature": "DriveDatabaseManager.syncDatabase()", "testcase": false, "constructor": false}, {"identifier": "getSyncDatabaseObservable", "parameters": "(@NonNull final File dbFile)", "modifiers": "@NonNull private", "return": "Single<Identifier>", "signature": "Single<Identifier> getSyncDatabaseObservable(@NonNull final File dbFile)", "full_signature": "@NonNull private Single<Identifier> getSyncDatabaseObservable(@NonNull final File dbFile)", "class_method_signature": "DriveDatabaseManager.getSyncDatabaseObservable(@NonNull final File dbFile)", "testcase": false, "constructor": false}], "file": "automatic_backups/src/notFloss/java/co/smartreceipts/automatic_backups/drive/managers/DriveDatabaseManager.java"}, "focal_method": {"identifier": "syncDatabase", "parameters": "()", "modifiers": "@SuppressLint(\"CheckResult\") public", "return": "void", "body": "@SuppressLint(\"CheckResult\")\n    public void syncDatabase() {\n        // TODO: Make sure the database is closed or inactive before performing this\n        // TODO: We can trigger this off of our #close() method in DB helper\n        final File filesDir = mContext.getExternalFilesDir(null);\n        if (filesDir != null) {\n            final File dbFile = new File(filesDir, DatabaseConstants.DATABASE_NAME);\n            if (dbFile.exists()) {\n                if (!mIsSyncInProgress.getAndSet(true)) {\n                    getSyncDatabaseObservable(dbFile)\n                            .observeOn(mObserveOnScheduler)\n                            .subscribeOn(mSubscribeOnScheduler)\n                            .subscribe(identifier -> {\n                                Logger.info(DriveDatabaseManager.this, \"Successfully synced our database\");\n                                mGoogleDriveSyncMetadata.setDatabaseSyncIdentifier(identifier);\n                                mIsSyncInProgress.set(false);\n                            }, throwable -> {\n                                mIsSyncInProgress.set(false);\n                                mAnalytics.record(new ErrorEvent(DriveDatabaseManager.this, throwable));\n                                Logger.error(DriveDatabaseManager.this, \"Failed to sync our database\", throwable);\n                            });\n                } else {\n                    Logger.debug(DriveDatabaseManager.this, \"A sync is already in progress. Ignoring subsequent one for now\");\n                }\n            } else {\n                Logger.error(DriveDatabaseManager.this, \"Failed to find our main database\");\n            }\n        } else {\n            Logger.error(DriveDatabaseManager.this, \"Failed to find our main database storage directory\");\n        }\n    }", "signature": "void syncDatabase()", "full_signature": "@SuppressLint(\"CheckResult\") public void syncDatabase()", "class_method_signature": "DriveDatabaseManager.syncDatabase()", "testcase": false, "constructor": false, "invocations": ["getExternalFilesDir", "exists", "getAndSet", "subscribe", "subscribeOn", "observeOn", "getSyncDatabaseObservable", "info", "setDatabaseSyncIdentifier", "set", "set", "record", "error", "debug", "error", "error"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}