{"test_class": {"identifier": "HTTPUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static org.slf4j.Logger log = LoggerFactory.getLogger(HTTPUtilsTest.class);", "modifier": "private static", "type": "org.slf4j.Logger", "declarator": "log = LoggerFactory.getLogger(HTTPUtilsTest.class)", "var_name": "log"}, {"original_string": "private static boolean isServerReachable = false;", "modifier": "private static", "type": "boolean", "declarator": "isServerReachable = false", "var_name": "isServerReachable"}, {"original_string": "private static String server = \"www.java2s.com\";", "modifier": "private static", "type": "String", "declarator": "server = \"www.java2s.com\"", "var_name": "server"}, {"original_string": "private static String tempDir= null;", "modifier": "private static", "type": "String", "declarator": "tempDir= null", "var_name": "tempDir"}, {"original_string": "private static String seperator = null;", "modifier": "private static", "type": "String", "declarator": "seperator = null", "var_name": "seperator"}, {"original_string": "private static String sampleDir = null;", "modifier": "private static", "type": "String", "declarator": "sampleDir = null", "var_name": "sampleDir"}, {"original_string": "private static String testFilePath = null;", "modifier": "private static", "type": "String", "declarator": "testFilePath = null", "var_name": "testFilePath"}, {"original_string": "private static final String testFile = \"demo_HUCs\";", "modifier": "private static final", "type": "String", "declarator": "testFile = \"demo_HUCs\"", "var_name": "testFile"}, {"original_string": "private static final String secondTestFile = \"Yahara_River_HRUs_geo_WGS84\";", "modifier": "private static final", "type": "String", "declarator": "secondTestFile = \"Yahara_River_HRUs_geo_WGS84\"", "var_name": "secondTestFile"}], "file": "gdp-common-utilities/src/test/java/gov/usgs/cida/gdp/utilities/HTTPUtilsTest.java"}, "test_case": {"identifier": "testSendPacket", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSendPacket() {\n        if (!isServerReachable) {\n            log.debug(server + \" is not reachable. Skipping testSendPacket()\");\n            return;\n        }\n        InputStream result = null;\n        try {\n            result = HTTPUtils.sendPacket(new URL(\"http://\" + server), \"GET\");\n            assertTrue(result.read() > -1);\n        } catch (IOException ex) {\n            Logger.getLogger(HTTPUtilsTest.class.getName()).log(Level.SEVERE, null, ex);\n        }\n\n        try {\n            result.close();\n        } catch (IOException ex) {\n            Logger.getLogger(HTTPUtilsTest.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }", "signature": "void testSendPacket()", "full_signature": "@Test public void testSendPacket()", "class_method_signature": "HTTPUtilsTest.testSendPacket()", "testcase": true, "constructor": false, "invocations": ["debug", "sendPacket", "assertTrue", "read", "log", "getLogger", "getName", "close", "log", "getLogger", "getName"]}, "focal_class": {"identifier": "HTTPUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static org.slf4j.Logger log = LoggerFactory.getLogger(HTTPUtils.class);", "modifier": "private static", "type": "org.slf4j.Logger", "declarator": "log = LoggerFactory.getLogger(HTTPUtils.class)", "var_name": "log"}], "methods": [{"identifier": "sendPacket", "parameters": "(URL url, String requestMethod)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream sendPacket(URL url, String requestMethod)", "full_signature": "public static InputStream sendPacket(URL url, String requestMethod)", "class_method_signature": "HTTPUtils.sendPacket(URL url, String requestMethod)", "testcase": false, "constructor": false}, {"identifier": "getStringFromInputStream", "parameters": "(InputStream is)", "modifiers": "public static", "return": "String", "signature": "String getStringFromInputStream(InputStream is)", "full_signature": "public static String getStringFromInputStream(InputStream is)", "class_method_signature": "HTTPUtils.getStringFromInputStream(InputStream is)", "testcase": false, "constructor": false}, {"identifier": "openHttpConnection", "parameters": "(final URL url, final HTTPConnectionMethods httpConnectionMethod)", "modifiers": "public static", "return": "HttpURLConnection", "signature": "HttpURLConnection openHttpConnection(final URL url, final HTTPConnectionMethods httpConnectionMethod)", "full_signature": "public static HttpURLConnection openHttpConnection(final URL url, final HTTPConnectionMethods httpConnectionMethod)", "class_method_signature": "HTTPUtils.openHttpConnection(final URL url, final HTTPConnectionMethods httpConnectionMethod)", "testcase": false, "constructor": false}, {"identifier": "openHttpConnection", "parameters": "(URL url, String requestMethod)", "modifiers": "public static", "return": "HttpURLConnection", "signature": "HttpURLConnection openHttpConnection(URL url, String requestMethod)", "full_signature": "public static HttpURLConnection openHttpConnection(URL url, String requestMethod)", "class_method_signature": "HTTPUtils.openHttpConnection(URL url, String requestMethod)", "testcase": false, "constructor": false}, {"identifier": "getHttpConnectionInputStream", "parameters": "(HttpURLConnection httpConnection)", "modifiers": "public static", "return": "InputStream", "signature": "InputStream getHttpConnectionInputStream(HttpURLConnection httpConnection)", "full_signature": "public static InputStream getHttpConnectionInputStream(HttpURLConnection httpConnection)", "class_method_signature": "HTTPUtils.getHttpConnectionInputStream(HttpURLConnection httpConnection)", "testcase": false, "constructor": false}, {"identifier": "getHttpConnectionHeaderFields", "parameters": "(HttpURLConnection httpConnection)", "modifiers": "public static", "return": "Map<String, List<String>>", "signature": "Map<String, List<String>> getHttpConnectionHeaderFields(HttpURLConnection httpConnection)", "full_signature": "public static Map<String, List<String>> getHttpConnectionHeaderFields(HttpURLConnection httpConnection)", "class_method_signature": "HTTPUtils.getHttpConnectionHeaderFields(HttpURLConnection httpConnection)", "testcase": false, "constructor": false}], "file": "gdp-common-utilities/src/main/java/gov/usgs/cida/gdp/utilities/HTTPUtils.java"}, "focal_method": {"identifier": "sendPacket", "parameters": "(URL url, String requestMethod)", "modifiers": "public static", "return": "InputStream", "body": "public static InputStream sendPacket(URL url, String requestMethod)\n            throws IOException {\n\n        HttpURLConnection httpConnection = openHttpConnection(url, requestMethod);\n\n        return getHttpConnectionInputStream(httpConnection);\n    }", "signature": "InputStream sendPacket(URL url, String requestMethod)", "full_signature": "public static InputStream sendPacket(URL url, String requestMethod)", "class_method_signature": "HTTPUtils.sendPacket(URL url, String requestMethod)", "testcase": false, "constructor": false, "invocations": ["openHttpConnection", "getHttpConnectionInputStream"]}, "repository": {"repo_id": 11799031, "url": "https://github.com/USGS-CIDA/geo-data-portal", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 9, "size": 178468, "license": "licensed"}}