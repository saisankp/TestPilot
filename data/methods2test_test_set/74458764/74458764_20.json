{"test_class": {"identifier": "TestSessionConfiguration", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n  public final ExpectedException exception = ExpectedException.none();", "modifier": "@Rule\n  public final", "type": "ExpectedException", "declarator": "exception = ExpectedException.none()", "var_name": "exception"}], "file": "session-replacement/src/test/java/com/amadeus/session/TestSessionConfiguration.java"}, "test_case": {"identifier": "testTrackerInterval", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testTrackerInterval() {\n    System.setProperty(SessionConfiguration.TRACKER_ERROR_INTERVAL_MILLISECONDS_KEY, \"1\");\n    SessionConfiguration sc = new SessionConfiguration();\n    assertEquals(1, sc.getTrackerInterval());\n    System.getProperties().remove(SessionConfiguration.TRACKER_ERROR_INTERVAL_MILLISECONDS_KEY);\n  }", "signature": "void testTrackerInterval()", "full_signature": "@Test public void testTrackerInterval()", "class_method_signature": "TestSessionConfiguration.testTrackerInterval()", "testcase": true, "constructor": false, "invocations": ["setProperty", "assertEquals", "getTrackerInterval", "remove", "getProperties"]}, "focal_class": {"identifier": "SessionConfiguration", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = -4538053252686416412L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -4538053252686416412L", "var_name": "serialVersionUID"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(SessionConfiguration.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(SessionConfiguration.class)", "var_name": "logger"}, {"original_string": "public static final int DEFAULT_TRACKER_ERROR_INTERVAL_MILLISECONDS_NUM = 60000;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_TRACKER_ERROR_INTERVAL_MILLISECONDS_NUM = 60000", "var_name": "DEFAULT_TRACKER_ERROR_INTERVAL_MILLISECONDS_NUM"}, {"original_string": "public static final String TRACKER_ERROR_INTERVAL_MILLISECONDS_KEY = \"com.amadeus.session.tracker.interval\";", "modifier": "public static final", "type": "String", "declarator": "TRACKER_ERROR_INTERVAL_MILLISECONDS_KEY = \"com.amadeus.session.tracker.interval\"", "var_name": "TRACKER_ERROR_INTERVAL_MILLISECONDS_KEY"}, {"original_string": "public static final int DEFAULT_TRACKER_ERROR_LIMITS_NUMBER = 50;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_TRACKER_ERROR_LIMITS_NUMBER = 50", "var_name": "DEFAULT_TRACKER_ERROR_LIMITS_NUMBER"}, {"original_string": "public static final String TRACKER_ERROR_LIMITS_NUMBER_KEY = \"com.amadeus.session.tracker.limits\";", "modifier": "public static final", "type": "String", "declarator": "TRACKER_ERROR_LIMITS_NUMBER_KEY = \"com.amadeus.session.tracker.limits\"", "var_name": "TRACKER_ERROR_LIMITS_NUMBER_KEY"}, {"original_string": "public static final String DISTRIBUTABLE_SESSION = \"com.amadeus.session.distributable\";", "modifier": "public static final", "type": "String", "declarator": "DISTRIBUTABLE_SESSION = \"com.amadeus.session.distributable\"", "var_name": "DISTRIBUTABLE_SESSION"}, {"original_string": "public static final String FORCE_DISTRIBUTABLE = \"com.amadeus.session.distributable.force\";", "modifier": "public static final", "type": "String", "declarator": "FORCE_DISTRIBUTABLE = \"com.amadeus.session.distributable.force\"", "var_name": "FORCE_DISTRIBUTABLE"}, {"original_string": "public static final String DEFAULT_SESSION_TIMEOUT = \"com.amadeus.session.timeout\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_SESSION_TIMEOUT = \"com.amadeus.session.timeout\"", "var_name": "DEFAULT_SESSION_TIMEOUT"}, {"original_string": "public static final String NON_CACHEABLE_ATTRIBUTES = \"com.amadeus.session.non-cacheable\";", "modifier": "public static final", "type": "String", "declarator": "NON_CACHEABLE_ATTRIBUTES = \"com.amadeus.session.non-cacheable\"", "var_name": "NON_CACHEABLE_ATTRIBUTES"}, {"original_string": "public static final String SESSION_REPLICATION_TRIGGER = \"com.amadeus.session.replication-trigger\";", "modifier": "public static final", "type": "String", "declarator": "SESSION_REPLICATION_TRIGGER = \"com.amadeus.session.replication-trigger\"", "var_name": "SESSION_REPLICATION_TRIGGER"}, {"original_string": "public static final ReplicationTrigger DEFAULT_REPLICATION_TRIGGER = ReplicationTrigger.SET_AND_NON_PRIMITIVE_GET;", "modifier": "public static final", "type": "ReplicationTrigger", "declarator": "DEFAULT_REPLICATION_TRIGGER = ReplicationTrigger.SET_AND_NON_PRIMITIVE_GET", "var_name": "DEFAULT_REPLICATION_TRIGGER"}, {"original_string": "public static final String LOG_MDC_SESSION_ENABLED = \"com.amadeus.session.logging.mdc.enabled\";", "modifier": "public static final", "type": "String", "declarator": "LOG_MDC_SESSION_ENABLED = \"com.amadeus.session.logging.mdc.enabled\"", "var_name": "LOG_MDC_SESSION_ENABLED"}, {"original_string": "public static final String LOG_MDC_SESSION_NAME = \"com.amadeus.session.logging.mdc.name\";", "modifier": "public static final", "type": "String", "declarator": "LOG_MDC_SESSION_NAME = \"com.amadeus.session.logging.mdc.name\"", "var_name": "LOG_MDC_SESSION_NAME"}, {"original_string": "public static final String LOGGING_MDC_DEFAULT_KEY = \"JSESSIONID\";", "modifier": "public static final", "type": "String", "declarator": "LOGGING_MDC_DEFAULT_KEY = \"JSESSIONID\"", "var_name": "LOGGING_MDC_DEFAULT_KEY"}, {"original_string": "public static final String STICKY_SESSIONS = \"com.amadeus.session.sticky\";", "modifier": "public static final", "type": "String", "declarator": "STICKY_SESSIONS = \"com.amadeus.session.sticky\"", "var_name": "STICKY_SESSIONS"}, {"original_string": "public static final String DEFAULT_STICKY_SESSIONS = \"true\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_STICKY_SESSIONS = \"true\"", "var_name": "DEFAULT_STICKY_SESSIONS"}, {"original_string": "public static final String SESSION_NAMESPACE = \"com.amadeus.session.namespace\";", "modifier": "public static final", "type": "String", "declarator": "SESSION_NAMESPACE = \"com.amadeus.session.namespace\"", "var_name": "SESSION_NAMESPACE"}, {"original_string": "public static final String DEFAULT_SESSION_NAMESPACE = \"default\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_SESSION_NAMESPACE = \"default\"", "var_name": "DEFAULT_SESSION_NAMESPACE"}, {"original_string": "public static final String SESSION_TIMESTAMP = \"com.amadeus.session.timestamp\";", "modifier": "public static final", "type": "String", "declarator": "SESSION_TIMESTAMP = \"com.amadeus.session.timestamp\"", "var_name": "SESSION_TIMESTAMP"}, {"original_string": "public static final String DEFAULT_SESSION_TIMESTAMP = \"false\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_SESSION_TIMESTAMP = \"false\"", "var_name": "DEFAULT_SESSION_TIMESTAMP"}, {"original_string": "public static final int DEFAULT_SESSION_TIMEOUT_VALUE_NUM = 1800;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_SESSION_TIMEOUT_VALUE_NUM = 1800", "var_name": "DEFAULT_SESSION_TIMEOUT_VALUE_NUM"}, {"original_string": "private static final String DEFAULT_SESSION_TIMEOUT_VALUE = String.valueOf(DEFAULT_SESSION_TIMEOUT_VALUE_NUM);", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_SESSION_TIMEOUT_VALUE = String.valueOf(DEFAULT_SESSION_TIMEOUT_VALUE_NUM)", "var_name": "DEFAULT_SESSION_TIMEOUT_VALUE"}, {"original_string": "public static final String SESSION_HOST = \"com.amadeus.session.host\";", "modifier": "public static final", "type": "String", "declarator": "SESSION_HOST = \"com.amadeus.session.host\"", "var_name": "SESSION_HOST"}, {"original_string": "public static final String PROVIDER_CONFIGURATION = \"com.amadeus.session.repository.conf\";", "modifier": "public static final", "type": "String", "declarator": "PROVIDER_CONFIGURATION = \"com.amadeus.session.repository.conf\"", "var_name": "PROVIDER_CONFIGURATION"}, {"original_string": "public static final String REPOSITORY_FACTORY_NAME = \"com.amadeus.session.repository.factory\";", "modifier": "public static final", "type": "String", "declarator": "REPOSITORY_FACTORY_NAME = \"com.amadeus.session.repository.factory\"", "var_name": "REPOSITORY_FACTORY_NAME"}, {"original_string": "public static final String SESSION_PROPAGATOR_NAME = \"com.amadeus.session.tracking\";", "modifier": "public static final", "type": "String", "declarator": "SESSION_PROPAGATOR_NAME = \"com.amadeus.session.tracking\"", "var_name": "SESSION_PROPAGATOR_NAME"}, {"original_string": "public static final String SESSION_ID_NAME = \"com.amadeus.session.sessionName\";", "modifier": "public static final", "type": "String", "declarator": "SESSION_ID_NAME = \"com.amadeus.session.sessionName\"", "var_name": "SESSION_ID_NAME"}, {"original_string": "public static final String DEFAULT_SESSION_ID_NAME = \"JSESSIONID\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_SESSION_ID_NAME = \"JSESSIONID\"", "var_name": "DEFAULT_SESSION_ID_NAME"}, {"original_string": "public static final String NODE_ID = \"com.amadeus.session.node\";", "modifier": "public static final", "type": "String", "declarator": "NODE_ID = \"com.amadeus.session.node\"", "var_name": "NODE_ID"}, {"original_string": "public static final String DISABLED_SESSION = \"com.amadeus.session.disabled\";", "modifier": "public static final", "type": "String", "declarator": "DISABLED_SESSION = \"com.amadeus.session.disabled\"", "var_name": "DISABLED_SESSION"}, {"original_string": "public static final String REUSE_CONCURRENT_SESSION = \"com.amadeus.session.reuse.concurrent\";", "modifier": "public static final", "type": "String", "declarator": "REUSE_CONCURRENT_SESSION = \"com.amadeus.session.reuse.concurrent\"", "var_name": "REUSE_CONCURRENT_SESSION"}, {"original_string": "public static final String SESSION_ID_PROVIDER = \"com.amadeus.session.id\";", "modifier": "public static final", "type": "String", "declarator": "SESSION_ID_PROVIDER = \"com.amadeus.session.id\"", "var_name": "SESSION_ID_PROVIDER"}, {"original_string": "public static final String SESSION_ID_LENGTH = \"com.amadeus.session.id.length\";", "modifier": "public static final", "type": "String", "declarator": "SESSION_ID_LENGTH = \"com.amadeus.session.id.length\"", "var_name": "SESSION_ID_LENGTH"}, {"original_string": "public static final String DEFAULT_SESSION_ID_LENGTH = \"30\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_SESSION_ID_LENGTH = \"30\"", "var_name": "DEFAULT_SESSION_ID_LENGTH"}, {"original_string": "public static final String INTERCEPT_LISTENERS = \"com.amadeus.session.intercept.listeners\";", "modifier": "public static final", "type": "String", "declarator": "INTERCEPT_LISTENERS = \"com.amadeus.session.intercept.listeners\"", "var_name": "INTERCEPT_LISTENERS"}, {"original_string": "public static final String COMMIT_ON_ALL_CONCURRENT = \"com.amadeus.session.commit.concurrent\";", "modifier": "public static final", "type": "String", "declarator": "COMMIT_ON_ALL_CONCURRENT = \"com.amadeus.session.commit.concurrent\"", "var_name": "COMMIT_ON_ALL_CONCURRENT"}, {"original_string": "public static final String SESSION_ENCRYPTION_KEY = \"com.amadeus.session.encryption.key\";", "modifier": "public static final", "type": "String", "declarator": "SESSION_ENCRYPTION_KEY = \"com.amadeus.session.encryption.key\"", "var_name": "SESSION_ENCRYPTION_KEY"}, {"original_string": "public static final String DELEGATE_WRITER = \"com.amadeus.session.delegate.writer\";", "modifier": "public static final", "type": "String", "declarator": "DELEGATE_WRITER = \"com.amadeus.session.delegate.writer\"", "var_name": "DELEGATE_WRITER"}, {"original_string": "private int trackerInterval;", "modifier": "private", "type": "int", "declarator": "trackerInterval", "var_name": "trackerInterval"}, {"original_string": "private int trackerLimits;", "modifier": "private", "type": "int", "declarator": "trackerLimits", "var_name": "trackerLimits"}, {"original_string": "private int maxInactiveInterval;", "modifier": "private", "type": "int", "declarator": "maxInactiveInterval", "var_name": "maxInactiveInterval"}, {"original_string": "private boolean distributable;", "modifier": "private", "type": "boolean", "declarator": "distributable", "var_name": "distributable"}, {"original_string": "private boolean sticky;", "modifier": "private", "type": "boolean", "declarator": "sticky", "var_name": "sticky"}, {"original_string": "private boolean timestampSufix;", "modifier": "private", "type": "boolean", "declarator": "timestampSufix", "var_name": "timestampSufix"}, {"original_string": "private boolean allowedCachedSessionReuse;", "modifier": "private", "type": "boolean", "declarator": "allowedCachedSessionReuse", "var_name": "allowedCachedSessionReuse"}, {"original_string": "private boolean interceptListeners;", "modifier": "private", "type": "boolean", "declarator": "interceptListeners", "var_name": "interceptListeners"}, {"original_string": "private boolean forceDistributable;", "modifier": "private", "type": "boolean", "declarator": "forceDistributable", "var_name": "forceDistributable"}, {"original_string": "private boolean loggingMdcActive;", "modifier": "private", "type": "boolean", "declarator": "loggingMdcActive", "var_name": "loggingMdcActive"}, {"original_string": "private boolean usingEncryption;", "modifier": "private", "type": "boolean", "declarator": "usingEncryption", "var_name": "usingEncryption"}, {"original_string": "private String loggingMdcKey;", "modifier": "private", "type": "String", "declarator": "loggingMdcKey", "var_name": "loggingMdcKey"}, {"original_string": "private String node;", "modifier": "private", "type": "String", "declarator": "node", "var_name": "node"}, {"original_string": "private String namespace;", "modifier": "private", "type": "String", "declarator": "namespace", "var_name": "namespace"}, {"original_string": "private String providerConfiguration;", "modifier": "private", "type": "String", "declarator": "providerConfiguration", "var_name": "providerConfiguration"}, {"original_string": "private String repositoryFactory;", "modifier": "private", "type": "String", "declarator": "repositoryFactory", "var_name": "repositoryFactory"}, {"original_string": "private String[] sessionTracking;", "modifier": "private", "type": "String[]", "declarator": "sessionTracking", "var_name": "sessionTracking"}, {"original_string": "private String sessionIdName;", "modifier": "private", "type": "String", "declarator": "sessionIdName", "var_name": "sessionIdName"}, {"original_string": "private String encryptionKey;", "modifier": "private", "type": "String", "declarator": "encryptionKey", "var_name": "encryptionKey"}, {"original_string": "private Set<String> nonCacheable;", "modifier": "private", "type": "Set<String>", "declarator": "nonCacheable", "var_name": "nonCacheable"}, {"original_string": "private ReplicationTrigger replicationTrigger;", "modifier": "private", "type": "ReplicationTrigger", "declarator": "replicationTrigger", "var_name": "replicationTrigger"}, {"original_string": "private Properties attributes;", "modifier": "private", "type": "Properties", "declarator": "attributes", "var_name": "attributes"}, {"original_string": "private transient AttributeProvider currentAttributeProvider;", "modifier": "private transient", "type": "AttributeProvider", "declarator": "currentAttributeProvider", "var_name": "currentAttributeProvider"}, {"original_string": "private boolean commitOnAllConcurrent;", "modifier": "private", "type": "boolean", "declarator": "commitOnAllConcurrent", "var_name": "commitOnAllConcurrent"}, {"original_string": "private boolean delegateWriter;", "modifier": "private", "type": "boolean", "declarator": "delegateWriter", "var_name": "delegateWriter"}], "methods": [{"identifier": "SessionConfiguration", "parameters": "()", "modifiers": "public", "return": "", "signature": " SessionConfiguration()", "full_signature": "public  SessionConfiguration()", "class_method_signature": "SessionConfiguration.SessionConfiguration()", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(String key, int def)", "modifiers": "private", "return": "int", "signature": "int init(String key, int def)", "full_signature": "private int init(String key, int def)", "class_method_signature": "SessionConfiguration.init(String key, int def)", "testcase": false, "constructor": false}, {"identifier": "parsePropagators", "parameters": "(String value, String[] defaultValue)", "modifiers": "private", "return": "String[]", "signature": "String[] parsePropagators(String value, String[] defaultValue)", "full_signature": "private String[] parsePropagators(String value, String[] defaultValue)", "class_method_signature": "SessionConfiguration.parsePropagators(String value, String[] defaultValue)", "testcase": false, "constructor": false}, {"identifier": "setEncryptionKey", "parameters": "(String key)", "modifiers": "public", "return": "void", "signature": "void setEncryptionKey(String key)", "full_signature": "public void setEncryptionKey(String key)", "class_method_signature": "SessionConfiguration.setEncryptionKey(String key)", "testcase": false, "constructor": false}, {"identifier": "allowedProtocol", "parameters": "(String protocol)", "modifiers": "static", "return": "boolean", "signature": "boolean allowedProtocol(String protocol)", "full_signature": "static boolean allowedProtocol(String protocol)", "class_method_signature": "SessionConfiguration.allowedProtocol(String protocol)", "testcase": false, "constructor": false}, {"identifier": "initializeFrom", "parameters": "(AttributeProvider provider)", "modifiers": "public", "return": "void", "signature": "void initializeFrom(AttributeProvider provider)", "full_signature": "public void initializeFrom(AttributeProvider provider)", "class_method_signature": "SessionConfiguration.initializeFrom(AttributeProvider provider)", "testcase": false, "constructor": false}, {"identifier": "initInt", "parameters": "(AttributeProvider provider, String name, int maxInactiveInterval)", "modifiers": "private", "return": "int", "signature": "int initInt(AttributeProvider provider, String name, int maxInactiveInterval)", "full_signature": "private int initInt(AttributeProvider provider, String name, int maxInactiveInterval)", "class_method_signature": "SessionConfiguration.initInt(AttributeProvider provider, String name, int maxInactiveInterval)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(String key, boolean defaultValue)", "modifiers": "private", "return": "boolean", "signature": "boolean read(String key, boolean defaultValue)", "full_signature": "private boolean read(String key, boolean defaultValue)", "class_method_signature": "SessionConfiguration.read(String key, boolean defaultValue)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(String key, String defaultValue)", "modifiers": "private", "return": "String", "signature": "String read(String key, String defaultValue)", "full_signature": "private String read(String key, String defaultValue)", "class_method_signature": "SessionConfiguration.read(String key, String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "nonEmpty", "parameters": "(String value)", "modifiers": "private", "return": "boolean", "signature": "boolean nonEmpty(String value)", "full_signature": "private boolean nonEmpty(String value)", "class_method_signature": "SessionConfiguration.nonEmpty(String value)", "testcase": false, "constructor": false}, {"identifier": "getMaxInactiveInterval", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxInactiveInterval()", "full_signature": "public int getMaxInactiveInterval()", "class_method_signature": "SessionConfiguration.getMaxInactiveInterval()", "testcase": false, "constructor": false}, {"identifier": "setMaxInactiveInterval", "parameters": "(int maxInactiveInterval)", "modifiers": "public", "return": "void", "signature": "void setMaxInactiveInterval(int maxInactiveInterval)", "full_signature": "public void setMaxInactiveInterval(int maxInactiveInterval)", "class_method_signature": "SessionConfiguration.setMaxInactiveInterval(int maxInactiveInterval)", "testcase": false, "constructor": false}, {"identifier": "isDistributable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDistributable()", "full_signature": "public boolean isDistributable()", "class_method_signature": "SessionConfiguration.isDistributable()", "testcase": false, "constructor": false}, {"identifier": "setDistributable", "parameters": "(boolean distributable)", "modifiers": "public", "return": "void", "signature": "void setDistributable(boolean distributable)", "full_signature": "public void setDistributable(boolean distributable)", "class_method_signature": "SessionConfiguration.setDistributable(boolean distributable)", "testcase": false, "constructor": false}, {"identifier": "getNonCacheable", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> getNonCacheable()", "full_signature": "public Set<String> getNonCacheable()", "class_method_signature": "SessionConfiguration.getNonCacheable()", "testcase": false, "constructor": false}, {"identifier": "setNonCacheable", "parameters": "(Set<String> nonCacheable)", "modifiers": "public", "return": "void", "signature": "void setNonCacheable(Set<String> nonCacheable)", "full_signature": "public void setNonCacheable(Set<String> nonCacheable)", "class_method_signature": "SessionConfiguration.setNonCacheable(Set<String> nonCacheable)", "testcase": false, "constructor": false}, {"identifier": "setNonCacheable", "parameters": "(String nonCacheableAttributesCsv)", "modifiers": "public", "return": "void", "signature": "void setNonCacheable(String nonCacheableAttributesCsv)", "full_signature": "public void setNonCacheable(String nonCacheableAttributesCsv)", "class_method_signature": "SessionConfiguration.setNonCacheable(String nonCacheableAttributesCsv)", "testcase": false, "constructor": false}, {"identifier": "getReplicationTrigger", "parameters": "()", "modifiers": "public", "return": "ReplicationTrigger", "signature": "ReplicationTrigger getReplicationTrigger()", "full_signature": "public ReplicationTrigger getReplicationTrigger()", "class_method_signature": "SessionConfiguration.getReplicationTrigger()", "testcase": false, "constructor": false}, {"identifier": "setReplicationTrigger", "parameters": "(ReplicationTrigger replicationTrigger)", "modifiers": "public", "return": "void", "signature": "void setReplicationTrigger(ReplicationTrigger replicationTrigger)", "full_signature": "public void setReplicationTrigger(ReplicationTrigger replicationTrigger)", "class_method_signature": "SessionConfiguration.setReplicationTrigger(ReplicationTrigger replicationTrigger)", "testcase": false, "constructor": false}, {"identifier": "isLoggingMdcActive", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isLoggingMdcActive()", "full_signature": "public boolean isLoggingMdcActive()", "class_method_signature": "SessionConfiguration.isLoggingMdcActive()", "testcase": false, "constructor": false}, {"identifier": "setLoggingMdcActive", "parameters": "(boolean loggingMdcActive)", "modifiers": "public", "return": "void", "signature": "void setLoggingMdcActive(boolean loggingMdcActive)", "full_signature": "public void setLoggingMdcActive(boolean loggingMdcActive)", "class_method_signature": "SessionConfiguration.setLoggingMdcActive(boolean loggingMdcActive)", "testcase": false, "constructor": false}, {"identifier": "getLoggingMdcKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLoggingMdcKey()", "full_signature": "public String getLoggingMdcKey()", "class_method_signature": "SessionConfiguration.getLoggingMdcKey()", "testcase": false, "constructor": false}, {"identifier": "setLoggingMdcKey", "parameters": "(String loggingMdcKey)", "modifiers": "public", "return": "void", "signature": "void setLoggingMdcKey(String loggingMdcKey)", "full_signature": "public void setLoggingMdcKey(String loggingMdcKey)", "class_method_signature": "SessionConfiguration.setLoggingMdcKey(String loggingMdcKey)", "testcase": false, "constructor": false}, {"identifier": "isSticky", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isSticky()", "full_signature": "public boolean isSticky()", "class_method_signature": "SessionConfiguration.isSticky()", "testcase": false, "constructor": false}, {"identifier": "setSticky", "parameters": "(boolean sticky)", "modifiers": "public", "return": "void", "signature": "void setSticky(boolean sticky)", "full_signature": "public void setSticky(boolean sticky)", "class_method_signature": "SessionConfiguration.setSticky(boolean sticky)", "testcase": false, "constructor": false}, {"identifier": "isTimestampSufix", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isTimestampSufix()", "full_signature": "public boolean isTimestampSufix()", "class_method_signature": "SessionConfiguration.isTimestampSufix()", "testcase": false, "constructor": false}, {"identifier": "setTimestampSufix", "parameters": "(boolean timestamp)", "modifiers": "public", "return": "void", "signature": "void setTimestampSufix(boolean timestamp)", "full_signature": "public void setTimestampSufix(boolean timestamp)", "class_method_signature": "SessionConfiguration.setTimestampSufix(boolean timestamp)", "testcase": false, "constructor": false}, {"identifier": "getNode", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNode()", "full_signature": "public String getNode()", "class_method_signature": "SessionConfiguration.getNode()", "testcase": false, "constructor": false}, {"identifier": "setNode", "parameters": "(String node)", "modifiers": "public", "return": "void", "signature": "void setNode(String node)", "full_signature": "public void setNode(String node)", "class_method_signature": "SessionConfiguration.setNode(String node)", "testcase": false, "constructor": false}, {"identifier": "getNamespace", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getNamespace()", "full_signature": "public String getNamespace()", "class_method_signature": "SessionConfiguration.getNamespace()", "testcase": false, "constructor": false}, {"identifier": "getTrueNamespace", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTrueNamespace()", "full_signature": "public String getTrueNamespace()", "class_method_signature": "SessionConfiguration.getTrueNamespace()", "testcase": false, "constructor": false}, {"identifier": "setNamespace", "parameters": "(String namespace)", "modifiers": "public", "return": "void", "signature": "void setNamespace(String namespace)", "full_signature": "public void setNamespace(String namespace)", "class_method_signature": "SessionConfiguration.setNamespace(String namespace)", "testcase": false, "constructor": false}, {"identifier": "getProviderConfiguration", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getProviderConfiguration()", "full_signature": "public String getProviderConfiguration()", "class_method_signature": "SessionConfiguration.getProviderConfiguration()", "testcase": false, "constructor": false}, {"identifier": "setProviderConfiguration", "parameters": "(String providerConfiguration)", "modifiers": "public", "return": "void", "signature": "void setProviderConfiguration(String providerConfiguration)", "full_signature": "public void setProviderConfiguration(String providerConfiguration)", "class_method_signature": "SessionConfiguration.setProviderConfiguration(String providerConfiguration)", "testcase": false, "constructor": false}, {"identifier": "getRepositoryFactory", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getRepositoryFactory()", "full_signature": "public String getRepositoryFactory()", "class_method_signature": "SessionConfiguration.getRepositoryFactory()", "testcase": false, "constructor": false}, {"identifier": "setRepositoryFactory", "parameters": "(String repositoryFactory)", "modifiers": "public", "return": "void", "signature": "void setRepositoryFactory(String repositoryFactory)", "full_signature": "public void setRepositoryFactory(String repositoryFactory)", "class_method_signature": "SessionConfiguration.setRepositoryFactory(String repositoryFactory)", "testcase": false, "constructor": false}, {"identifier": "getSessionTracking", "parameters": "()", "modifiers": "public", "return": "String[]", "signature": "String[] getSessionTracking()", "full_signature": "public String[] getSessionTracking()", "class_method_signature": "SessionConfiguration.getSessionTracking()", "testcase": false, "constructor": false}, {"identifier": "setSessionTracking", "parameters": "(String... sessionTracking)", "modifiers": "public", "return": "void", "signature": "void setSessionTracking(String... sessionTracking)", "full_signature": "public void setSessionTracking(String... sessionTracking)", "class_method_signature": "SessionConfiguration.setSessionTracking(String... sessionTracking)", "testcase": false, "constructor": false}, {"identifier": "getSessionIdName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSessionIdName()", "full_signature": "public String getSessionIdName()", "class_method_signature": "SessionConfiguration.getSessionIdName()", "testcase": false, "constructor": false}, {"identifier": "setSessionIdName", "parameters": "(String sessionIdName)", "modifiers": "public", "return": "void", "signature": "void setSessionIdName(String sessionIdName)", "full_signature": "public void setSessionIdName(String sessionIdName)", "class_method_signature": "SessionConfiguration.setSessionIdName(String sessionIdName)", "testcase": false, "constructor": false}, {"identifier": "isAllowedCachedSessionReuse", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isAllowedCachedSessionReuse()", "full_signature": "public boolean isAllowedCachedSessionReuse()", "class_method_signature": "SessionConfiguration.isAllowedCachedSessionReuse()", "testcase": false, "constructor": false}, {"identifier": "setAllowedCachedSessionReuse", "parameters": "(boolean allowedCachedSessionReuse)", "modifiers": "public", "return": "void", "signature": "void setAllowedCachedSessionReuse(boolean allowedCachedSessionReuse)", "full_signature": "public void setAllowedCachedSessionReuse(boolean allowedCachedSessionReuse)", "class_method_signature": "SessionConfiguration.setAllowedCachedSessionReuse(boolean allowedCachedSessionReuse)", "testcase": false, "constructor": false}, {"identifier": "initNode", "parameters": "()", "modifiers": "static", "return": "String", "signature": "String initNode()", "full_signature": "static String initNode()", "class_method_signature": "SessionConfiguration.initNode()", "testcase": false, "constructor": false}, {"identifier": "getPropertySecured", "parameters": "(String key, String def)", "modifiers": "public static", "return": "String", "signature": "String getPropertySecured(String key, String def)", "full_signature": "public static String getPropertySecured(String key, String def)", "class_method_signature": "SessionConfiguration.getPropertySecured(String key, String def)", "testcase": false, "constructor": false}, {"identifier": "getAttribute", "parameters": "(String key, String defaultValue)", "modifiers": "public", "return": "String", "signature": "String getAttribute(String key, String defaultValue)", "full_signature": "public String getAttribute(String key, String defaultValue)", "class_method_signature": "SessionConfiguration.getAttribute(String key, String defaultValue)", "testcase": false, "constructor": false}, {"identifier": "setAttribute", "parameters": "(String key, String value)", "modifiers": "public", "return": "void", "signature": "void setAttribute(String key, String value)", "full_signature": "public void setAttribute(String key, String value)", "class_method_signature": "SessionConfiguration.setAttribute(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "isInterceptListeners", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isInterceptListeners()", "full_signature": "public boolean isInterceptListeners()", "class_method_signature": "SessionConfiguration.isInterceptListeners()", "testcase": false, "constructor": false}, {"identifier": "setInterceptListeners", "parameters": "(boolean interceptListeners)", "modifiers": "public", "return": "void", "signature": "void setInterceptListeners(boolean interceptListeners)", "full_signature": "public void setInterceptListeners(boolean interceptListeners)", "class_method_signature": "SessionConfiguration.setInterceptListeners(boolean interceptListeners)", "testcase": false, "constructor": false}, {"identifier": "isForceDistributable", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isForceDistributable()", "full_signature": "public boolean isForceDistributable()", "class_method_signature": "SessionConfiguration.isForceDistributable()", "testcase": false, "constructor": false}, {"identifier": "setForceDistributable", "parameters": "(boolean forceDistributable)", "modifiers": "public", "return": "void", "signature": "void setForceDistributable(boolean forceDistributable)", "full_signature": "public void setForceDistributable(boolean forceDistributable)", "class_method_signature": "SessionConfiguration.setForceDistributable(boolean forceDistributable)", "testcase": false, "constructor": false}, {"identifier": "isCommitOnAllConcurrent", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isCommitOnAllConcurrent()", "full_signature": "public boolean isCommitOnAllConcurrent()", "class_method_signature": "SessionConfiguration.isCommitOnAllConcurrent()", "testcase": false, "constructor": false}, {"identifier": "setCommitOnAllConcurrent", "parameters": "(boolean commitOnAllConcurrent)", "modifiers": "public", "return": "void", "signature": "void setCommitOnAllConcurrent(boolean commitOnAllConcurrent)", "full_signature": "public void setCommitOnAllConcurrent(boolean commitOnAllConcurrent)", "class_method_signature": "SessionConfiguration.setCommitOnAllConcurrent(boolean commitOnAllConcurrent)", "testcase": false, "constructor": false}, {"identifier": "isUsingEncryption", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUsingEncryption()", "full_signature": "public boolean isUsingEncryption()", "class_method_signature": "SessionConfiguration.isUsingEncryption()", "testcase": false, "constructor": false}, {"identifier": "setUsingEncryption", "parameters": "(boolean usingEncryption)", "modifiers": "public", "return": "void", "signature": "void setUsingEncryption(boolean usingEncryption)", "full_signature": "public void setUsingEncryption(boolean usingEncryption)", "class_method_signature": "SessionConfiguration.setUsingEncryption(boolean usingEncryption)", "testcase": false, "constructor": false}, {"identifier": "getEncryptionKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEncryptionKey()", "full_signature": "public String getEncryptionKey()", "class_method_signature": "SessionConfiguration.getEncryptionKey()", "testcase": false, "constructor": false}, {"identifier": "isDelegateWriter", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isDelegateWriter()", "full_signature": "public boolean isDelegateWriter()", "class_method_signature": "SessionConfiguration.isDelegateWriter()", "testcase": false, "constructor": false}, {"identifier": "setDelegateWriter", "parameters": "(boolean delegateWriter)", "modifiers": "public", "return": "void", "signature": "void setDelegateWriter(boolean delegateWriter)", "full_signature": "public void setDelegateWriter(boolean delegateWriter)", "class_method_signature": "SessionConfiguration.setDelegateWriter(boolean delegateWriter)", "testcase": false, "constructor": false}, {"identifier": "loadKeyFromUrl", "parameters": "(URL url)", "modifiers": "private", "return": "String", "signature": "String loadKeyFromUrl(URL url)", "full_signature": "private String loadKeyFromUrl(URL url)", "class_method_signature": "SessionConfiguration.loadKeyFromUrl(URL url)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SessionConfiguration.toString()", "testcase": false, "constructor": false}, {"identifier": "getTrackerInterval", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTrackerInterval()", "full_signature": "public int getTrackerInterval()", "class_method_signature": "SessionConfiguration.getTrackerInterval()", "testcase": false, "constructor": false}, {"identifier": "setTrackerInterval", "parameters": "(int trackerInterval)", "modifiers": "public", "return": "void", "signature": "void setTrackerInterval(int trackerInterval)", "full_signature": "public void setTrackerInterval(int trackerInterval)", "class_method_signature": "SessionConfiguration.setTrackerInterval(int trackerInterval)", "testcase": false, "constructor": false}, {"identifier": "getTrackerLimits", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTrackerLimits()", "full_signature": "public int getTrackerLimits()", "class_method_signature": "SessionConfiguration.getTrackerLimits()", "testcase": false, "constructor": false}, {"identifier": "setTrackerLimits", "parameters": "(int trackerLimits)", "modifiers": "public", "return": "void", "signature": "void setTrackerLimits(int trackerLimits)", "full_signature": "public void setTrackerLimits(int trackerLimits)", "class_method_signature": "SessionConfiguration.setTrackerLimits(int trackerLimits)", "testcase": false, "constructor": false}], "file": "session-replacement/src/main/java/com/amadeus/session/SessionConfiguration.java"}, "focal_method": {"identifier": "getTrackerInterval", "parameters": "()", "modifiers": "public", "return": "int", "body": "public int getTrackerInterval() {\n    return trackerInterval;\n  }", "signature": "int getTrackerInterval()", "full_signature": "public int getTrackerInterval()", "class_method_signature": "SessionConfiguration.getTrackerInterval()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 74458764, "url": "https://github.com/AmadeusITGroup/HttpSessionReplacer", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 45, "size": 514, "license": "licensed"}}