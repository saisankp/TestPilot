{"test_class": {"identifier": "ResourceDescriptionTemplateProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ResourceDescriptionTemplateProcessor processor;", "modifier": "private", "type": "ResourceDescriptionTemplateProcessor", "declarator": "processor", "var_name": "processor"}], "file": "meta/src/test/java/org/jboss/hal/meta/description/ResourceDescriptionTemplateProcessorTest.java"}, "test_case": {"identifier": "server2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void server2() throws Exception {\n        AddressTemplate input = AddressTemplate.of(\n                \"/host=master/server=server-one/subsystem=datasources/data-source=*\");\n        AddressTemplate expected = AddressTemplate.of(\"/host=*/server=*/subsystem=datasources/data-source=*\");\n\n        AddressTemplate result = processor.apply(input);\n        assertEquals(expected, result);\n    }", "signature": "void server2()", "full_signature": "@Test public void server2()", "class_method_signature": "ResourceDescriptionTemplateProcessorTest.server2()", "testcase": true, "constructor": false, "invocations": ["of", "of", "apply", "assertEquals"]}, "focal_class": {"identifier": "ResourceDescriptionTemplateProcessor", "superclass": "", "interfaces": "implements Function<AddressTemplate, AddressTemplate>", "fields": [], "methods": [{"identifier": "apply", "parameters": "(AddressTemplate template)", "modifiers": "@Override public", "return": "AddressTemplate", "signature": "AddressTemplate apply(AddressTemplate template)", "full_signature": "@Override public AddressTemplate apply(AddressTemplate template)", "class_method_signature": "ResourceDescriptionTemplateProcessor.apply(AddressTemplate template)", "testcase": false, "constructor": false}], "file": "meta/src/main/java/org/jboss/hal/meta/description/ResourceDescriptionTemplateProcessor.java"}, "focal_method": {"identifier": "apply", "parameters": "(AddressTemplate template)", "modifiers": "@Override public", "return": "AddressTemplate", "body": "@Override\n    public AddressTemplate apply(AddressTemplate template) {\n        AddressTemplate modified = AddressTemplate.ROOT;\n\n        if (template != null && !AddressTemplate.ROOT.equals(template)) {\n            List<String[]> segments = stream(template.spliterator(), false)\n                    .map(segment -> {\n                        if (segment.contains(\"=\")) {\n                            return Splitter.on('=')\n                                    .omitEmptyStrings()\n                                    .trimResults()\n                                    .limit(2)\n                                    .splitToList(segment)\n                                    .toArray(new String[2]);\n                        }\n                        return new String[]{segment, null};\n                    })\n                    .collect(toList());\n\n            StringBuilder builder = new StringBuilder();\n            SegmentProcessor.process(segments, segment -> {\n                builder.append(\"/\").append(segment[0]);\n                if (segment[1] != null) {\n                    builder.append(\"=\").append(segment[1]);\n                }\n            });\n            modified = AddressTemplate.of(builder.toString());\n        }\n\n        return modified;\n    }", "signature": "AddressTemplate apply(AddressTemplate template)", "full_signature": "@Override public AddressTemplate apply(AddressTemplate template)", "class_method_signature": "ResourceDescriptionTemplateProcessor.apply(AddressTemplate template)", "testcase": false, "constructor": false, "invocations": ["equals", "collect", "map", "stream", "spliterator", "contains", "toArray", "splitToList", "limit", "trimResults", "omitEmptyStrings", "on", "toList", "process", "append", "append", "append", "append", "of", "toString"]}, "repository": {"repo_id": 38317187, "url": "https://github.com/hal/console", "stars": 34, "created": "6/30/2015 3:26:19 PM +00:00", "updates": "2020-01-26T16:25:43+00:00", "fork": "False", "license": "licensed"}}