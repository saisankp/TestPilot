{"test_class": {"identifier": "LayeredPanelTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n  private AttachedToolWindow<String> myToolWindow1;", "modifier": "@Mock\n  private", "type": "AttachedToolWindow<String>", "declarator": "myToolWindow1", "var_name": "myToolWindow1"}, {"original_string": "@Mock\n  private AttachedToolWindow<String> myToolWindow2;", "modifier": "@Mock\n  private", "type": "AttachedToolWindow<String>", "declarator": "myToolWindow2", "var_name": "myToolWindow2"}, {"original_string": "@Mock\n  private SideModel<String> myModel;", "modifier": "@Mock\n  private", "type": "SideModel<String>", "declarator": "myModel", "var_name": "myModel"}, {"original_string": "private EventType myEventType;", "modifier": "private", "type": "EventType", "declarator": "myEventType", "var_name": "myEventType"}, {"original_string": "private JComponent myMainContent;", "modifier": "private", "type": "JComponent", "declarator": "myMainContent", "var_name": "myMainContent"}, {"original_string": "private JComponent myToolWindowComponent1;", "modifier": "private", "type": "JComponent", "declarator": "myToolWindowComponent1", "var_name": "myToolWindowComponent1"}, {"original_string": "private JComponent myToolWindowComponent2;", "modifier": "private", "type": "JComponent", "declarator": "myToolWindowComponent2", "var_name": "myToolWindowComponent2"}, {"original_string": "private LayeredPanel<String> myPanel;", "modifier": "private", "type": "LayeredPanel<String>", "declarator": "myPanel", "var_name": "myPanel"}, {"original_string": "private ThreeComponentsSplitter mySplitter;", "modifier": "private", "type": "ThreeComponentsSplitter", "declarator": "mySplitter", "var_name": "mySplitter"}, {"original_string": "private PropertiesComponent myPropertiesComponent;", "modifier": "private", "type": "PropertiesComponent", "declarator": "myPropertiesComponent", "var_name": "myPropertiesComponent"}, {"original_string": "private JComponent myContainer;", "modifier": "private", "type": "JComponent", "declarator": "myContainer", "var_name": "myContainer"}], "file": "adt-ui/src/test/java/com/android/tools/adtui/workbench/LayeredPanelTest.java"}, "test_case": {"identifier": "testVisibleToolOnLeftSide", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testVisibleToolOnLeftSide() {\n    when(myModel.getHiddenSliders()).thenReturn(ImmutableList.of(myToolWindow2));\n    when(myModel.getVisibleAutoHideTool()).thenReturn(myToolWindow1);\n    when(myToolWindow1.isLeft()).thenReturn(true);\n    myPanel.modelChanged(myModel, myEventType);\n    assertThat(mySplitter.isVisible()).isTrue();\n    assertThat(mySplitter.getFirstComponent()).isEqualTo(myToolWindowComponent1);\n    assertThat(mySplitter.getLastComponent()).isNull();\n    assertThat(myContainer.getComponents()).asList().containsExactly(myToolWindowComponent2);\n  }", "signature": "void testVisibleToolOnLeftSide()", "full_signature": "@Test public void testVisibleToolOnLeftSide()", "class_method_signature": "LayeredPanelTest.testVisibleToolOnLeftSide()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getHiddenSliders", "of", "thenReturn", "when", "getVisibleAutoHideTool", "thenReturn", "when", "isLeft", "modelChanged", "isTrue", "assertThat", "isVisible", "isEqualTo", "assertThat", "getFirstComponent", "isNull", "assertThat", "getLastComponent", "containsExactly", "asList", "assertThat", "getComponents"]}, "focal_class": {"identifier": "LayeredPanel", "superclass": "extends JBLayeredPane", "interfaces": "implements SideModel.Listener<T>, Disposable", "fields": [{"original_string": "private final String myBenchName;", "modifier": "private final", "type": "String", "declarator": "myBenchName", "var_name": "myBenchName"}, {"original_string": "private final PropertiesComponent myPropertiesComponent;", "modifier": "private final", "type": "PropertiesComponent", "declarator": "myPropertiesComponent", "var_name": "myPropertiesComponent"}, {"original_string": "private final JComponent myDefaultLayer;", "modifier": "private final", "type": "JComponent", "declarator": "myDefaultLayer", "var_name": "myDefaultLayer"}, {"original_string": "private final ThreeComponentsSplitter mySplitter;", "modifier": "private final", "type": "ThreeComponentsSplitter", "declarator": "mySplitter", "var_name": "mySplitter"}, {"original_string": "private final JPanel myContainer;", "modifier": "private final", "type": "JPanel", "declarator": "myContainer", "var_name": "myContainer"}, {"original_string": "private String myToolName;", "modifier": "private", "type": "String", "declarator": "myToolName", "var_name": "myToolName"}, {"original_string": "private Side mySide;", "modifier": "private", "type": "Side", "declarator": "mySide", "var_name": "mySide"}], "methods": [{"identifier": "LayeredPanel", "parameters": "(@NotNull String benchName, @NotNull JComponent defaultLayer, @NotNull SideModel<T> model)", "modifiers": "", "return": "", "signature": " LayeredPanel(@NotNull String benchName, @NotNull JComponent defaultLayer, @NotNull SideModel<T> model)", "full_signature": "  LayeredPanel(@NotNull String benchName, @NotNull JComponent defaultLayer, @NotNull SideModel<T> model)", "class_method_signature": "LayeredPanel.LayeredPanel(@NotNull String benchName, @NotNull JComponent defaultLayer, @NotNull SideModel<T> model)", "testcase": false, "constructor": true}, {"identifier": "LayeredPanel", "parameters": "(@NotNull String benchName,\n               @NotNull JComponent defaultLayer,\n               @NotNull SideModel<T> model,\n               @NotNull PropertiesComponent propertiesComponent)", "modifiers": "", "return": "", "signature": " LayeredPanel(@NotNull String benchName,\n               @NotNull JComponent defaultLayer,\n               @NotNull SideModel<T> model,\n               @NotNull PropertiesComponent propertiesComponent)", "full_signature": "  LayeredPanel(@NotNull String benchName,\n               @NotNull JComponent defaultLayer,\n               @NotNull SideModel<T> model,\n               @NotNull PropertiesComponent propertiesComponent)", "class_method_signature": "LayeredPanel.LayeredPanel(@NotNull String benchName,\n               @NotNull JComponent defaultLayer,\n               @NotNull SideModel<T> model,\n               @NotNull PropertiesComponent propertiesComponent)", "testcase": false, "constructor": true}, {"identifier": "getSplitter", "parameters": "()", "modifiers": "@VisibleForTesting", "return": "ThreeComponentsSplitter", "signature": "ThreeComponentsSplitter getSplitter()", "full_signature": "@VisibleForTesting ThreeComponentsSplitter getSplitter()", "class_method_signature": "LayeredPanel.getSplitter()", "testcase": false, "constructor": false}, {"identifier": "modelChanged", "parameters": "(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused)", "modifiers": "@Override public", "return": "void", "signature": "void modelChanged(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused)", "full_signature": "@Override public void modelChanged(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused)", "class_method_signature": "LayeredPanel.modelChanged(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused)", "testcase": false, "constructor": false}, {"identifier": "addVisibleTool", "parameters": "(@Nullable AttachedToolWindow<T> tool)", "modifiers": "private", "return": "void", "signature": "void addVisibleTool(@Nullable AttachedToolWindow<T> tool)", "full_signature": "private void addVisibleTool(@Nullable AttachedToolWindow<T> tool)", "class_method_signature": "LayeredPanel.addVisibleTool(@Nullable AttachedToolWindow<T> tool)", "testcase": false, "constructor": false}, {"identifier": "addHiddenTool", "parameters": "(@NotNull AttachedToolWindow<T> tool)", "modifiers": "private", "return": "void", "signature": "void addHiddenTool(@NotNull AttachedToolWindow<T> tool)", "full_signature": "private void addHiddenTool(@NotNull AttachedToolWindow<T> tool)", "class_method_signature": "LayeredPanel.addHiddenTool(@NotNull AttachedToolWindow<T> tool)", "testcase": false, "constructor": false}, {"identifier": "doLayout", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void doLayout()", "full_signature": "@Override public void doLayout()", "class_method_signature": "LayeredPanel.doLayout()", "testcase": false, "constructor": false}, {"identifier": "dispose", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void dispose()", "full_signature": "@Override public void dispose()", "class_method_signature": "LayeredPanel.dispose()", "testcase": false, "constructor": false}, {"identifier": "createWidthUpdater", "parameters": "()", "modifiers": "@NotNull private", "return": "ComponentListener", "signature": "ComponentListener createWidthUpdater()", "full_signature": "@NotNull private ComponentListener createWidthUpdater()", "class_method_signature": "LayeredPanel.createWidthUpdater()", "testcase": false, "constructor": false}, {"identifier": "getUnscaledWidthPropertyName", "parameters": "()", "modifiers": "@NotNull private", "return": "String", "signature": "String getUnscaledWidthPropertyName()", "full_signature": "@NotNull private String getUnscaledWidthPropertyName()", "class_method_signature": "LayeredPanel.getUnscaledWidthPropertyName()", "testcase": false, "constructor": false}, {"identifier": "getScaledWidthPropertyName", "parameters": "()", "modifiers": "@NotNull private", "return": "String", "signature": "String getScaledWidthPropertyName()", "full_signature": "@NotNull private String getScaledWidthPropertyName()", "class_method_signature": "LayeredPanel.getScaledWidthPropertyName()", "testcase": false, "constructor": false}, {"identifier": "getToolWidth", "parameters": "(@NotNull AttachedToolWindow<T> tool)", "modifiers": "private", "return": "int", "signature": "int getToolWidth(@NotNull AttachedToolWindow<T> tool)", "full_signature": "private int getToolWidth(@NotNull AttachedToolWindow<T> tool)", "class_method_signature": "LayeredPanel.getToolWidth(@NotNull AttachedToolWindow<T> tool)", "testcase": false, "constructor": false}, {"identifier": "setToolWidth", "parameters": "(int width)", "modifiers": "private", "return": "void", "signature": "void setToolWidth(int width)", "full_signature": "private void setToolWidth(int width)", "class_method_signature": "LayeredPanel.setToolWidth(int width)", "testcase": false, "constructor": false}], "file": "adt-ui/src/main/java/com/android/tools/adtui/workbench/LayeredPanel.java"}, "focal_method": {"identifier": "modelChanged", "parameters": "(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused)", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void modelChanged(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused) {\n    model.getHiddenSliders().forEach(this::addHiddenTool);\n    addVisibleTool(model.getVisibleAutoHideTool());\n    revalidate();\n    repaint();\n  }", "signature": "void modelChanged(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused)", "full_signature": "@Override public void modelChanged(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused)", "class_method_signature": "LayeredPanel.modelChanged(@NotNull SideModel<T> model, @NotNull SideModel.EventType unused)", "testcase": false, "constructor": false, "invocations": ["forEach", "getHiddenSliders", "addVisibleTool", "getVisibleAutoHideTool", "revalidate", "repaint"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}