{"test_class": {"identifier": "Kv78ParserTest", "superclass": "", "interfaces": "", "fields": [], "file": "distribution/src/test/java/nl/crowndov/displaydirect/distribution/kv78/Kv78ParserTest.java"}, "test_case": {"identifier": "parseGeneralMessageDelete", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseGeneralMessageDelete() {\n        String data = \"\\\\GKV8turbo_generalmessages|KV8turbo_generalmessages|openOV RET|||UTF-8|0.1|2017-04-11T22:05:46+02:00|\\uFEFF\\r\\n\" +\n                \"\\\\TGENERALMESSAGEDELETE|GENERALMESSAGEDELETE|start object\\r\\n\" +\n                \"\\\\LDataOwnerCode|MessageCodeDate|MessageCodeNumber|TimingPointDataOwnerCode|TimingPointCode\\r\\n\" +\n                \"RET|2017-04-11|27|ALGEMEEN|31001347\\r\\n\";\n        Kv78Packet p = Kv78Parser.parseMessage(data);\n\n        Assert.assertEquals(\"KV8turbo_generalmessages\", p.getType());\n        Assert.assertEquals(\"openOV RET\", p.getComment());\n        Assert.assertEquals(\"UTF-8\", p.getEncoding());\n        Assert.assertEquals(\"0.1\", p.getVersion());\n        Assert.assertEquals(ZonedDateTime.parse(\"2017-04-11T22:05:46+02:00\"), p.getGenerated());\n\n        Assert.assertEquals(\"GENERALMESSAGEDELETE\", p.getTables().get(0).getTableName());\n        Assert.assertEquals(\"start object\", p.getTables().get(0).getTableComment());\n\n        Assert.assertEquals(1, p.getTables().get(0).getRecords().size());\n        Map<String, String> record = p.getTables().get(0).getRecords().get(0);\n        Assert.assertEquals(5, record.size());\n        Assert.assertEquals(\"RET\", record.get(\"DataOwnerCode\"));\n        Assert.assertEquals(\"2017-04-11\", record.get(\"MessageCodeDate\"));\n        Assert.assertEquals(\"27\", record.get(\"MessageCodeNumber\"));\n        Assert.assertEquals(\"ALGEMEEN\", record.get(\"TimingPointDataOwnerCode\"));\n        Assert.assertEquals(\"31001347\", record.get(\"TimingPointCode\"));\n    }", "signature": "void parseGeneralMessageDelete()", "full_signature": "@Test public void parseGeneralMessageDelete()", "class_method_signature": "Kv78ParserTest.parseGeneralMessageDelete()", "testcase": true, "constructor": false, "invocations": ["parseMessage", "assertEquals", "getType", "assertEquals", "getComment", "assertEquals", "getEncoding", "assertEquals", "getVersion", "assertEquals", "parse", "getGenerated", "assertEquals", "getTableName", "get", "getTables", "assertEquals", "getTableComment", "get", "getTables", "assertEquals", "size", "getRecords", "get", "getTables", "get", "getRecords", "get", "getTables", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "Kv78Parser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(Configuration.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(Configuration.class)", "var_name": "LOGGER"}, {"original_string": "private static final String CHAR_SPLIT = \"\\\\|\";", "modifier": "private static final", "type": "String", "declarator": "CHAR_SPLIT = \"\\\\|\"", "var_name": "CHAR_SPLIT"}, {"original_string": "private static final String CHAR_CONTROL = \"\\\\\";", "modifier": "private static final", "type": "String", "declarator": "CHAR_CONTROL = \"\\\\\"", "var_name": "CHAR_CONTROL"}, {"original_string": "private static final String CHAR_EMPTY = \"\\\\0\";", "modifier": "private static final", "type": "String", "declarator": "CHAR_EMPTY = \"\\\\0\"", "var_name": "CHAR_EMPTY"}, {"original_string": "private static final String CHAR_NEWLINE = \"\\r\\n\";", "modifier": "private static final", "type": "String", "declarator": "CHAR_NEWLINE = \"\\r\\n\"", "var_name": "CHAR_NEWLINE"}], "methods": [{"identifier": "parseMessage", "parameters": "(String input)", "modifiers": "public static", "return": "Kv78Packet", "signature": "Kv78Packet parseMessage(String input)", "full_signature": "public static Kv78Packet parseMessage(String input)", "class_method_signature": "Kv78Parser.parseMessage(String input)", "testcase": false, "constructor": false}], "file": "distribution/src/main/java/nl/crowndov/displaydirect/distribution/kv78/Kv78Parser.java"}, "focal_method": {"identifier": "parseMessage", "parameters": "(String input)", "modifiers": "public static", "return": "Kv78Packet", "body": "public static Kv78Packet parseMessage(String input) {\n        Kv78Packet p = new Kv78Packet();\n        Kv78Table t = null;\n        String[] lines = input.split(CHAR_NEWLINE);\n        String[] headers = null;\n        for (String line : lines) {\n            if (line.startsWith(CHAR_CONTROL)) {\n                String[] columns = line.substring(2).split(\"\\\\|\");\n                switch (line.substring(1,2)) {\n                    case \"G\":\n                        p.setType(columns[0]);\n                        p.setComment(columns[2]);\n                        p.setEncoding(columns[5]);\n                        p.setVersion(columns[6]);\n                        p.setGenerated(ZonedDateTime.parse(columns[7]));\n                        break;\n                    case \"T\":\n                        if (t != null) {\n                            p.addTable(t);\n                        }\n                        t = new Kv78Table();\n                        t.setTableName(columns[0]);\n                        t.setTableComment(columns[2]);\n                        break;\n                    case \"L\":\n                        headers = columns;\n                        break;\n                    default:\n                        break;\n                }\n            } else {\n                if (headers != null) {\n                    Map<String, String> record = new HashMap<>();\n                    String[] cells = line.split(CHAR_SPLIT);\n                    for (int i = 0; i < cells.length; i++) {\n                        if (!CHAR_EMPTY.contentEquals(cells[i])) {\n                            record.put(headers[i], cells[i]);\n                        }\n                    }\n                    if (t == null) {\n                        t = new Kv78Table();\n                    }\n                    t.getRecords().add(record);\n                } else {\n                    // Invalid message!\n                    LOGGER.error(\"Failed to parse message\");\n                }\n            }\n        }\n        p.addTable(t);\n        return p;\n    }", "signature": "Kv78Packet parseMessage(String input)", "full_signature": "public static Kv78Packet parseMessage(String input)", "class_method_signature": "Kv78Parser.parseMessage(String input)", "testcase": false, "constructor": false, "invocations": ["split", "startsWith", "split", "substring", "substring", "setType", "setComment", "setEncoding", "setVersion", "setGenerated", "parse", "addTable", "setTableName", "setTableComment", "split", "contentEquals", "put", "add", "getRecords", "error", "addTable"]}, "repository": {"repo_id": 92798552, "url": "https://github.com/CROW-NDOV/displaydirect", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 6, "size": 247, "license": "licensed"}}