{"test_class": {"identifier": "UploadTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String HOST = \"host\";", "modifier": "private static final", "type": "String", "declarator": "HOST = \"host\"", "var_name": "HOST"}, {"original_string": "private static final Integer PORT = 1;", "modifier": "private static final", "type": "Integer", "declarator": "PORT = 1", "var_name": "PORT"}, {"original_string": "private static final String CONDITION_CHECKER_UPLOAD_URL = \"http://host:1/config/admin/stub/conditionchecker?fileName=testfile1\";", "modifier": "private static final", "type": "String", "declarator": "CONDITION_CHECKER_UPLOAD_URL = \"http://host:1/config/admin/stub/conditionchecker?fileName=testfile1\"", "var_name": "CONDITION_CHECKER_UPLOAD_URL"}, {"original_string": "private static final String STUB_CONFIGURATION_UPLOAD_URL = \"http://host:1/config/admin/stub/stubconfig?fileName=testfile1\";", "modifier": "private static final", "type": "String", "declarator": "STUB_CONFIGURATION_UPLOAD_URL = \"http://host:1/config/admin/stub/stubconfig?fileName=testfile1\"", "var_name": "STUB_CONFIGURATION_UPLOAD_URL"}, {"original_string": "private static final String STUB_CONFIGURATION_UPLOAD_URL_FOR_STRING = \"http://host:1/config/admin/stub/stubconfig?fileName=directUpload\";", "modifier": "private static final", "type": "String", "declarator": "STUB_CONFIGURATION_UPLOAD_URL_FOR_STRING = \"http://host:1/config/admin/stub/stubconfig?fileName=directUpload\"", "var_name": "STUB_CONFIGURATION_UPLOAD_URL_FOR_STRING"}, {"original_string": "private static final String TEMPLATE_UPLOAD_URL = \"http://host:1/config/admin/stub/templates?fileName=testfile1\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_UPLOAD_URL = \"http://host:1/config/admin/stub/templates?fileName=testfile1\"", "var_name": "TEMPLATE_UPLOAD_URL"}, {"original_string": "private static final String RESPONSE_FORMATTER_UPLOAD_URL = \"http://host:1/config/admin/stub/responseformatter?fileName=testfile1\";", "modifier": "private static final", "type": "String", "declarator": "RESPONSE_FORMATTER_UPLOAD_URL = \"http://host:1/config/admin/stub/responseformatter?fileName=testfile1\"", "var_name": "RESPONSE_FORMATTER_UPLOAD_URL"}, {"original_string": "private static final String FILENAME = \"testfile1\";", "modifier": "private static final", "type": "String", "declarator": "FILENAME = \"testfile1\"", "var_name": "FILENAME"}, {"original_string": "@Mock\n    private WilmaHttpClient client;", "modifier": "@Mock\n    private", "type": "WilmaHttpClient", "declarator": "client", "var_name": "client"}, {"original_string": "@Mock\n    private File testFile;", "modifier": "@Mock\n    private", "type": "File", "declarator": "testFile", "var_name": "testFile"}, {"original_string": "@Mock\n    private WilmaStub wilmaStub;", "modifier": "@Mock\n    private", "type": "WilmaStub", "declarator": "wilmaStub", "var_name": "wilmaStub"}, {"original_string": "private Upload fileUpload;", "modifier": "private", "type": "Upload", "declarator": "fileUpload", "var_name": "fileUpload"}], "file": "wilma-service-api/src/test/java/com/epam/wilma/service/resource/UploadTest.java"}, "test_case": {"identifier": "shouldCallTheProperTemplateFormatterUploadUrlWithTheGivenFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCallTheProperTemplateFormatterUploadUrlWithTheGivenFile() {\n        ArgumentCaptor<String> url = ArgumentCaptor.forClass(String.class);\n        ArgumentCaptor<File> file = ArgumentCaptor.forClass(File.class);\n\n        fileUpload.uploadTemplateFormatter(FILENAME, testFile);\n\n        verify(client).uploadFile(url.capture(), file.capture());\n\n        assertEquals(url.getValue(), RESPONSE_FORMATTER_UPLOAD_URL);\n        assertEquals(file.getValue(), testFile);\n    }", "signature": "void shouldCallTheProperTemplateFormatterUploadUrlWithTheGivenFile()", "full_signature": "@Test public void shouldCallTheProperTemplateFormatterUploadUrlWithTheGivenFile()", "class_method_signature": "UploadTest.shouldCallTheProperTemplateFormatterUploadUrlWithTheGivenFile()", "testcase": true, "constructor": false, "invocations": ["forClass", "forClass", "uploadTemplateFormatter", "uploadFile", "verify", "capture", "capture", "assertEquals", "getValue", "assertEquals", "getValue"]}, "focal_class": {"identifier": "Upload", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(Upload.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(Upload.class)", "var_name": "LOG"}, {"original_string": "private static final String CONDITION_CHECKER_UPLOAD_URL_POSTFIX = \"config/admin/stub/conditionchecker\";", "modifier": "private static final", "type": "String", "declarator": "CONDITION_CHECKER_UPLOAD_URL_POSTFIX = \"config/admin/stub/conditionchecker\"", "var_name": "CONDITION_CHECKER_UPLOAD_URL_POSTFIX"}, {"original_string": "private static final String STUB_CONFIGURATION_UPLOAD_URL_POSTFIX = \"config/admin/stub/stubconfig\";", "modifier": "private static final", "type": "String", "declarator": "STUB_CONFIGURATION_UPLOAD_URL_POSTFIX = \"config/admin/stub/stubconfig\"", "var_name": "STUB_CONFIGURATION_UPLOAD_URL_POSTFIX"}, {"original_string": "private static final String TEMPLATE_UPLOAD_URL_POSTFIX = \"config/admin/stub/templates\";", "modifier": "private static final", "type": "String", "declarator": "TEMPLATE_UPLOAD_URL_POSTFIX = \"config/admin/stub/templates\"", "var_name": "TEMPLATE_UPLOAD_URL_POSTFIX"}, {"original_string": "private static final String RESPONSE_FORMATTER_UPLOAD_URL_POSTFIX = \"config/admin/stub/responseformatter\";", "modifier": "private static final", "type": "String", "declarator": "RESPONSE_FORMATTER_UPLOAD_URL_POSTFIX = \"config/admin/stub/responseformatter\"", "var_name": "RESPONSE_FORMATTER_UPLOAD_URL_POSTFIX"}, {"original_string": "private static final String FILE_NAME = \"fileName\";", "modifier": "private static final", "type": "String", "declarator": "FILE_NAME = \"fileName\"", "var_name": "FILE_NAME"}, {"original_string": "private static final String FILE_FROM_STRING = \"directUpload\";", "modifier": "private static final", "type": "String", "declarator": "FILE_FROM_STRING = \"directUpload\"", "var_name": "FILE_FROM_STRING"}, {"original_string": "private WilmaHttpClient wilmaClient;", "modifier": "private", "type": "WilmaHttpClient", "declarator": "wilmaClient", "var_name": "wilmaClient"}, {"original_string": "private WilmaServiceConfig config;", "modifier": "private", "type": "WilmaServiceConfig", "declarator": "config", "var_name": "config"}], "methods": [{"identifier": "Upload", "parameters": "(WilmaServiceConfig config)", "modifiers": "public", "return": "", "signature": " Upload(WilmaServiceConfig config)", "full_signature": "public  Upload(WilmaServiceConfig config)", "class_method_signature": "Upload.Upload(WilmaServiceConfig config)", "testcase": false, "constructor": true}, {"identifier": "Upload", "parameters": "(WilmaServiceConfig config, WilmaHttpClient client)", "modifiers": "public", "return": "", "signature": " Upload(WilmaServiceConfig config, WilmaHttpClient client)", "full_signature": "public  Upload(WilmaServiceConfig config, WilmaHttpClient client)", "class_method_signature": "Upload.Upload(WilmaServiceConfig config, WilmaHttpClient client)", "testcase": false, "constructor": true}, {"identifier": "uploadConditionChecker", "parameters": "(String fileName, File file)", "modifiers": "public", "return": "boolean", "signature": "boolean uploadConditionChecker(String fileName, File file)", "full_signature": "public boolean uploadConditionChecker(String fileName, File file)", "class_method_signature": "Upload.uploadConditionChecker(String fileName, File file)", "testcase": false, "constructor": false}, {"identifier": "uploadTemplate", "parameters": "(String fileName, File file)", "modifiers": "public", "return": "boolean", "signature": "boolean uploadTemplate(String fileName, File file)", "full_signature": "public boolean uploadTemplate(String fileName, File file)", "class_method_signature": "Upload.uploadTemplate(String fileName, File file)", "testcase": false, "constructor": false}, {"identifier": "uploadTemplateFormatter", "parameters": "(String fileName, File file)", "modifiers": "public", "return": "boolean", "signature": "boolean uploadTemplateFormatter(String fileName, File file)", "full_signature": "public boolean uploadTemplateFormatter(String fileName, File file)", "class_method_signature": "Upload.uploadTemplateFormatter(String fileName, File file)", "testcase": false, "constructor": false}, {"identifier": "uploadStubConfiguration", "parameters": "(String fileName, File file)", "modifiers": "public", "return": "boolean", "signature": "boolean uploadStubConfiguration(String fileName, File file)", "full_signature": "public boolean uploadStubConfiguration(String fileName, File file)", "class_method_signature": "Upload.uploadStubConfiguration(String fileName, File file)", "testcase": false, "constructor": false}, {"identifier": "uploadStubConfiguration", "parameters": "(WilmaStub resource)", "modifiers": "public", "return": "boolean", "signature": "boolean uploadStubConfiguration(WilmaStub resource)", "full_signature": "public boolean uploadStubConfiguration(WilmaStub resource)", "class_method_signature": "Upload.uploadStubConfiguration(WilmaStub resource)", "testcase": false, "constructor": false}, {"identifier": "callFileUploadMethod", "parameters": "(String url, File file)", "modifiers": "private", "return": "boolean", "signature": "boolean callFileUploadMethod(String url, File file)", "full_signature": "private boolean callFileUploadMethod(String url, File file)", "class_method_signature": "Upload.callFileUploadMethod(String url, File file)", "testcase": false, "constructor": false}, {"identifier": "callStringUploadMethod", "parameters": "(String url, String resource)", "modifiers": "private", "return": "boolean", "signature": "boolean callStringUploadMethod(String url, String resource)", "full_signature": "private boolean callStringUploadMethod(String url, String resource)", "class_method_signature": "Upload.callStringUploadMethod(String url, String resource)", "testcase": false, "constructor": false}, {"identifier": "buildUrl", "parameters": "(String postfix, Map<String, String> params)", "modifiers": "private", "return": "String", "signature": "String buildUrl(String postfix, Map<String, String> params)", "full_signature": "private String buildUrl(String postfix, Map<String, String> params)", "class_method_signature": "Upload.buildUrl(String postfix, Map<String, String> params)", "testcase": false, "constructor": false}], "file": "wilma-service-api/src/main/java/com/epam/wilma/service/resource/Upload.java"}, "focal_method": {"identifier": "uploadTemplateFormatter", "parameters": "(String fileName, File file)", "modifiers": "public", "return": "boolean", "body": "public boolean uploadTemplateFormatter(String fileName, File file) {\n        LOG.debug(\"Call template formatter upload API.\");\n\n        String url = buildUrl(RESPONSE_FORMATTER_UPLOAD_URL_POSTFIX, ImmutableMap.of(FILE_NAME, fileName));\n\n        return callFileUploadMethod(url, file);\n    }", "signature": "boolean uploadTemplateFormatter(String fileName, File file)", "full_signature": "public boolean uploadTemplateFormatter(String fileName, File file)", "class_method_signature": "Upload.uploadTemplateFormatter(String fileName, File file)", "testcase": false, "constructor": false, "invocations": ["debug", "buildUrl", "of", "callFileUploadMethod"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}