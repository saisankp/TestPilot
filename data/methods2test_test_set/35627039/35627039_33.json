{"test_class": {"identifier": "StreamlineEventLoggerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FastDateFormat dateFormat = FastDateFormat.getInstance(\"yyyy-MM-dd HH:mm:ss.SSS\");", "modifier": "private", "type": "FastDateFormat", "declarator": "dateFormat = FastDateFormat.getInstance(\"yyyy-MM-dd HH:mm:ss.SSS\")", "var_name": "dateFormat"}, {"original_string": "private StreamlineEventLogger sut = new StreamlineEventLogger();", "modifier": "private", "type": "StreamlineEventLogger", "declarator": "sut = new StreamlineEventLogger()", "var_name": "sut"}], "file": "streams/runners/storm/runtime/src/test/java/com/hortonworks/streamline/streams/runtime/storm/event/sample/StreamlineEventLoggerTest.java"}, "test_case": {"identifier": "buildOtherEventLogMessage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void buildOtherEventLogMessage() {\n        long timestamp = 1513300663123L;\n        String timestampStr = dateFormat.format(timestamp);\n        String stormComponentName = \"1-Component\";\n        int taskId = 2;\n        Object messageId = \"dummy\";\n\n        List<Object> values = new ArrayList<>();\n        values.add(\"hello\");\n        values.add(\"world\");\n        values.add(12345);\n\n        // Date, Marker, Component Name (Storm), task ID, Message ID, Values\n        String expectMessage = String.format(\"%s,%s,%s,%s,%s,%s\", timestampStr,\n                StreamlineEventLogger.MARKER_FOR_OTHER_EVENT, stormComponentName, taskId, messageId, values);\n\n        IEventLogger.EventInfo eventInfo = new IEventLogger.EventInfo(timestamp, stormComponentName, taskId,\n                messageId, values);\n\n        String actualMessage = sut.buildLogMessage(eventInfo);\n        Assert.assertEquals(expectMessage, actualMessage);\n    }", "signature": "void buildOtherEventLogMessage()", "full_signature": "@Test public void buildOtherEventLogMessage()", "class_method_signature": "StreamlineEventLoggerTest.buildOtherEventLogMessage()", "testcase": true, "constructor": false, "invocations": ["format", "add", "add", "add", "format", "buildLogMessage", "assertEquals"]}, "focal_class": {"identifier": "StreamlineEventLogger", "superclass": "extends FileBasedEventLogger", "interfaces": "", "fields": [{"original_string": "public static final String MARKER_FOR_STREAMLINE_EVENT = \"<STREAMLINE_EVENT>\";", "modifier": "public static final", "type": "String", "declarator": "MARKER_FOR_STREAMLINE_EVENT = \"<STREAMLINE_EVENT>\"", "var_name": "MARKER_FOR_STREAMLINE_EVENT"}, {"original_string": "public static final String MARKER_FOR_OTHER_EVENT = \"<OTHER_EVENT>\";", "modifier": "public static final", "type": "String", "declarator": "MARKER_FOR_OTHER_EVENT = \"<OTHER_EVENT>\"", "var_name": "MARKER_FOR_OTHER_EVENT"}, {"original_string": "public static final String DELIMITER = \"!_DELIM_!\";", "modifier": "public static final", "type": "String", "declarator": "DELIMITER = \"!_DELIM_!\"", "var_name": "DELIMITER"}, {"original_string": "private FastDateFormat dateFormat = FastDateFormat.getInstance(\"yyyy-MM-dd HH:mm:ss.SSS\");", "modifier": "private", "type": "FastDateFormat", "declarator": "dateFormat = FastDateFormat.getInstance(\"yyyy-MM-dd HH:mm:ss.SSS\")", "var_name": "dateFormat"}], "methods": [{"identifier": "buildLogMessage", "parameters": "(EventInfo event)", "modifiers": "@Override protected", "return": "String", "signature": "String buildLogMessage(EventInfo event)", "full_signature": "@Override protected String buildLogMessage(EventInfo event)", "class_method_signature": "StreamlineEventLogger.buildLogMessage(EventInfo event)", "testcase": false, "constructor": false}], "file": "streams/runners/storm/runtime/src/main/java/com/hortonworks/streamline/streams/runtime/storm/event/sample/StreamlineEventLogger.java"}, "focal_method": {"identifier": "buildLogMessage", "parameters": "(EventInfo event)", "modifiers": "@Override protected", "return": "String", "body": "@Override\n    protected String buildLogMessage(EventInfo event) {\n        String timestampStr = dateFormat.format(event.getTs());\n\n        List<Object> values = event.getValues();\n        if (!values.isEmpty()) {\n            final Object eventObj = values.get(0);\n\n            if (eventObj instanceof StreamlineEvent) {\n                final StreamlineEvent slEvent = (StreamlineEvent) eventObj;\n\n                Set<String> rootIds;\n                if (EventCorrelationInjector.containsRootIds(slEvent)) {\n                    rootIds = EventCorrelationInjector.getRootIds(slEvent);\n                } else {\n                    rootIds = Collections.emptySet();\n                }\n\n                Set<String> parentIds;\n                if (EventCorrelationInjector.containsParentIds(slEvent)) {\n                    parentIds = EventCorrelationInjector.getParentIds(slEvent);\n                } else {\n                    parentIds = Collections.emptySet();\n                }\n\n                // Date, Marker, Component Name (Streamline), Event ID, Root IDs, Parent IDs,\n                // Event Fields, Header KV, Aux. Fields KV\n                // use DELIMITER to let parser understand it more easily\n                String format = String.join(DELIMITER, new String[] { \"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\",\"%s\"} );\n\n                return String.format(format, timestampStr, MARKER_FOR_STREAMLINE_EVENT,\n                        StormTopologyUtil.extractStreamlineComponentName(event.getComponent()),\n                        slEvent.getId(), rootIds, parentIds, ImmutableMap.copyOf(slEvent),\n                        slEvent.getHeader().toString(), slEvent.getAuxiliaryFieldsAndValues().toString());\n            }\n        }\n\n        // Date, Marker, Component Name (Storm), task ID, Message ID, Values\n        // use comma-separated delimiter since this is not for machine, but for users\n        Object messageId = event.getMessageId();\n        return String.format(\"%s,%s,%s,%s,%s,%s\", timestampStr, MARKER_FOR_OTHER_EVENT,\n                event.getComponent(), String.valueOf(event.getTask()),\n                (messageId == null ? \"\" : messageId.toString()), values);\n    }", "signature": "String buildLogMessage(EventInfo event)", "full_signature": "@Override protected String buildLogMessage(EventInfo event)", "class_method_signature": "StreamlineEventLogger.buildLogMessage(EventInfo event)", "testcase": false, "constructor": false, "invocations": ["format", "getTs", "getValues", "isEmpty", "get", "containsRootIds", "getRootIds", "emptySet", "containsParentIds", "getParentIds", "emptySet", "join", "format", "extractStreamlineComponentName", "getComponent", "getId", "copyOf", "toString", "getHeader", "toString", "getAuxiliaryFieldsAndValues", "getMessageId", "format", "getComponent", "valueOf", "getTask", "toString"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}