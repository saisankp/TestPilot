{"test_class": {"identifier": "OnSubscribeCacheTest", "superclass": "", "interfaces": "", "fields": [], "file": "zava/src/test/java/rx/internal/operators/OnSubscribeCacheTest.java"}, "test_case": {"identifier": "testUnsubscribeSource", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnsubscribeSource() {\n        Action0 unsubscribe = mock(Action0.class);\n        Observable<Integer> o = Observable.just(1).doOnUnsubscribe(unsubscribe).cache();\n        o.subscribe();\n        o.subscribe();\n        o.subscribe();\n        verify(unsubscribe, times(1)).call();\n    }", "signature": "void testUnsubscribeSource()", "full_signature": "@Test public void testUnsubscribeSource()", "class_method_signature": "OnSubscribeCacheTest.testUnsubscribeSource()", "testcase": true, "constructor": false, "invocations": ["mock", "cache", "doOnUnsubscribe", "just", "subscribe", "subscribe", "subscribe", "call", "verify", "times"]}, "focal_class": {"identifier": "OnSubscribeCache", "superclass": "", "interfaces": "implements OnSubscribe<T>", "fields": [{"original_string": "protected final Observable<? extends T> source;", "modifier": "protected final", "type": "Observable<? extends T>", "declarator": "source", "var_name": "source"}, {"original_string": "protected final Subject<? super T, ? extends T> cache;", "modifier": "protected final", "type": "Subject<? super T, ? extends T>", "declarator": "cache", "var_name": "cache"}, {"original_string": "volatile int sourceSubscribed;", "modifier": "volatile", "type": "int", "declarator": "sourceSubscribed", "var_name": "sourceSubscribed"}, {"original_string": "@SuppressWarnings(\"rawtypes\")\n    static final AtomicIntegerFieldUpdater<OnSubscribeCache> SRC_SUBSCRIBED_UPDATER\n            = AtomicIntegerFieldUpdater.newUpdater(OnSubscribeCache.class, \"sourceSubscribed\");", "modifier": "@SuppressWarnings(\"rawtypes\")\n    static final", "type": "AtomicIntegerFieldUpdater<OnSubscribeCache>", "declarator": "SRC_SUBSCRIBED_UPDATER\n            = AtomicIntegerFieldUpdater.newUpdater(OnSubscribeCache.class, \"sourceSubscribed\")", "var_name": "SRC_SUBSCRIBED_UPDATER"}], "methods": [{"identifier": "OnSubscribeCache", "parameters": "(Observable<? extends T> source)", "modifiers": "public", "return": "", "signature": " OnSubscribeCache(Observable<? extends T> source)", "full_signature": "public  OnSubscribeCache(Observable<? extends T> source)", "class_method_signature": "OnSubscribeCache.OnSubscribeCache(Observable<? extends T> source)", "testcase": false, "constructor": true}, {"identifier": "OnSubscribeCache", "parameters": "(Observable<? extends T> source, int capacity)", "modifiers": "public", "return": "", "signature": " OnSubscribeCache(Observable<? extends T> source, int capacity)", "full_signature": "public  OnSubscribeCache(Observable<? extends T> source, int capacity)", "class_method_signature": "OnSubscribeCache.OnSubscribeCache(Observable<? extends T> source, int capacity)", "testcase": false, "constructor": true}, {"identifier": "OnSubscribeCache", "parameters": "(Observable<? extends T> source, Subject<? super T, ? extends T> cache)", "modifiers": "", "return": "", "signature": " OnSubscribeCache(Observable<? extends T> source, Subject<? super T, ? extends T> cache)", "full_signature": "  OnSubscribeCache(Observable<? extends T> source, Subject<? super T, ? extends T> cache)", "class_method_signature": "OnSubscribeCache.OnSubscribeCache(Observable<? extends T> source, Subject<? super T, ? extends T> cache)", "testcase": false, "constructor": true}, {"identifier": "call", "parameters": "(Subscriber<? super T> s)", "modifiers": "@Override public", "return": "void", "signature": "void call(Subscriber<? super T> s)", "full_signature": "@Override public void call(Subscriber<? super T> s)", "class_method_signature": "OnSubscribeCache.call(Subscriber<? super T> s)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/internal/operators/OnSubscribeCache.java"}, "focal_method": {"identifier": "call", "parameters": "(Subscriber<? super T> s)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void call(Subscriber<? super T> s) {\n        if (SRC_SUBSCRIBED_UPDATER.compareAndSet(this, 0, 1)) {\n            source.subscribe(cache);\n            /*\n             * Note that we will never unsubscribe from 'source' unless we receive `onCompleted` or `onError`,\n             * as we want to receive and cache all of its values.\n             * \n             * This means this should never be used on an infinite or very large sequence, similar to toList().\n             */\n        }\n        cache.unsafeSubscribe(s);\n    }", "signature": "void call(Subscriber<? super T> s)", "full_signature": "@Override public void call(Subscriber<? super T> s)", "class_method_signature": "OnSubscribeCache.call(Subscriber<? super T> s)", "testcase": false, "constructor": false, "invocations": ["compareAndSet", "subscribe", "unsafeSubscribe"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}