{"test_class": {"identifier": "TripTableActionAlterationsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "TripTableActionAlterations mTripTableActionAlterations;", "modifier": "", "type": "TripTableActionAlterations", "declarator": "mTripTableActionAlterations", "var_name": "mTripTableActionAlterations"}, {"original_string": "@Mock\n    Table<Trip> mTripsTable;", "modifier": "@Mock", "type": "Table<Trip>", "declarator": "mTripsTable", "var_name": "mTripsTable"}, {"original_string": "@Mock\n    ReceiptsTable mReceiptsTable;", "modifier": "@Mock", "type": "ReceiptsTable", "declarator": "mReceiptsTable", "var_name": "mReceiptsTable"}, {"original_string": "@Mock\n    DistanceTable mDistanceTable;", "modifier": "@Mock", "type": "DistanceTable", "declarator": "mDistanceTable", "var_name": "mDistanceTable"}, {"original_string": "@Mock\n    DatabaseHelper mDatabaseHelper;", "modifier": "@Mock", "type": "DatabaseHelper", "declarator": "mDatabaseHelper", "var_name": "mDatabaseHelper"}, {"original_string": "@Mock\n    StorageManager mStorageManager;", "modifier": "@Mock", "type": "StorageManager", "declarator": "mStorageManager", "var_name": "mStorageManager"}, {"original_string": "@Mock\n    Trip mTrip1;", "modifier": "@Mock", "type": "Trip", "declarator": "mTrip1", "var_name": "mTrip1"}, {"original_string": "@Mock\n    Trip mTrip2;", "modifier": "@Mock", "type": "Trip", "declarator": "mTrip2", "var_name": "mTrip2"}, {"original_string": "@Mock\n    Price mPrice1;", "modifier": "@Mock", "type": "Price", "declarator": "mPrice1", "var_name": "mPrice1"}, {"original_string": "@Mock\n    Price mPrice2;", "modifier": "@Mock", "type": "Price", "declarator": "mPrice2", "var_name": "mPrice2"}], "file": "app/src/test/java/co/smartreceipts/android/persistence/database/controllers/alterations/TripTableActionAlterationsTest.java"}, "test_case": {"identifier": "postUpdateForValidTripButIOFails", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void postUpdateForValidTripButIOFails() throws Exception {\n        final String name1 = \"name1\";\n        final String name2 = \"name2\";\n        when(mTrip1.getName()).thenReturn(name1);\n        when(mTrip2.getName()).thenReturn(name2);\n        when(mTrip1.getDirectory()).thenReturn(new File(name1));\n        when(mStorageManager.rename(new File(name1), name2)).thenReturn(new File(name1));\n        when(mTripsTable.update(mTrip2, mTrip1, new DatabaseOperationMetadata())).thenReturn(Single.just(mTrip1));\n\n        mTripTableActionAlterations.postUpdate(mTrip1, mTrip2)\n                .test()\n                .assertNoValues()\n                .assertNotComplete()\n                .assertError(IOException.class);\n\n        verify(mTrip2).setPrice(mPrice1);\n        verify(mTrip2).setDailySubTotal(mPrice2);\n        verify(mReceiptsTable).updateParentBlocking(mTrip1, mTrip2);\n        verify(mDistanceTable).updateParentBlocking(mTrip1, mTrip2);\n        verify(mReceiptsTable).updateParentBlocking(mTrip2, mTrip1);\n        verify(mDistanceTable).updateParentBlocking(mTrip2, mTrip1);\n        verify(mTripsTable).update(mTrip2, mTrip1, new DatabaseOperationMetadata());\n    }", "signature": "void postUpdateForValidTripButIOFails()", "full_signature": "@Test public void postUpdateForValidTripButIOFails()", "class_method_signature": "TripTableActionAlterationsTest.postUpdateForValidTripButIOFails()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "getName", "thenReturn", "when", "getName", "thenReturn", "when", "getDirectory", "thenReturn", "when", "rename", "thenReturn", "when", "update", "just", "assertError", "assertNotComplete", "assertNoValues", "test", "postUpdate", "setPrice", "verify", "setDailySubTotal", "verify", "updateParentBlocking", "verify", "updateParentBlocking", "verify", "updateParentBlocking", "verify", "updateParentBlocking", "verify", "update", "verify"]}, "focal_class": {"identifier": "TripTableActionAlterations", "superclass": "extends StubTableActionAlterations<Trip>", "interfaces": "", "fields": [{"original_string": "private final Table<Trip> mTripsTable;", "modifier": "private final", "type": "Table<Trip>", "declarator": "mTripsTable", "var_name": "mTripsTable"}, {"original_string": "private final ReceiptsTable mReceiptsTable;", "modifier": "private final", "type": "ReceiptsTable", "declarator": "mReceiptsTable", "var_name": "mReceiptsTable"}, {"original_string": "private final DistanceTable mDistanceTable;", "modifier": "private final", "type": "DistanceTable", "declarator": "mDistanceTable", "var_name": "mDistanceTable"}, {"original_string": "private final DatabaseHelper mDatabaseHelper;", "modifier": "private final", "type": "DatabaseHelper", "declarator": "mDatabaseHelper", "var_name": "mDatabaseHelper"}, {"original_string": "private final StorageManager mStorageManager;", "modifier": "private final", "type": "StorageManager", "declarator": "mStorageManager", "var_name": "mStorageManager"}], "methods": [{"identifier": "TripTableActionAlterations", "parameters": "(@NonNull PersistenceManager persistenceManager)", "modifiers": "public", "return": "", "signature": " TripTableActionAlterations(@NonNull PersistenceManager persistenceManager)", "full_signature": "public  TripTableActionAlterations(@NonNull PersistenceManager persistenceManager)", "class_method_signature": "TripTableActionAlterations.TripTableActionAlterations(@NonNull PersistenceManager persistenceManager)", "testcase": false, "constructor": true}, {"identifier": "TripTableActionAlterations", "parameters": "(@NonNull DatabaseHelper databaseHelper, @NonNull StorageManager storageManager)", "modifiers": "public", "return": "", "signature": " TripTableActionAlterations(@NonNull DatabaseHelper databaseHelper, @NonNull StorageManager storageManager)", "full_signature": "public  TripTableActionAlterations(@NonNull DatabaseHelper databaseHelper, @NonNull StorageManager storageManager)", "class_method_signature": "TripTableActionAlterations.TripTableActionAlterations(@NonNull DatabaseHelper databaseHelper, @NonNull StorageManager storageManager)", "testcase": false, "constructor": true}, {"identifier": "TripTableActionAlterations", "parameters": "(@NonNull Table<Trip> tripsTable, @NonNull ReceiptsTable receiptsTable, @NonNull DistanceTable distanceTable,\n                                      @NonNull DatabaseHelper databaseHelper, @NonNull StorageManager storageManager)", "modifiers": "public", "return": "", "signature": " TripTableActionAlterations(@NonNull Table<Trip> tripsTable, @NonNull ReceiptsTable receiptsTable, @NonNull DistanceTable distanceTable,\n                                      @NonNull DatabaseHelper databaseHelper, @NonNull StorageManager storageManager)", "full_signature": "public  TripTableActionAlterations(@NonNull Table<Trip> tripsTable, @NonNull ReceiptsTable receiptsTable, @NonNull DistanceTable distanceTable,\n                                      @NonNull DatabaseHelper databaseHelper, @NonNull StorageManager storageManager)", "class_method_signature": "TripTableActionAlterations.TripTableActionAlterations(@NonNull Table<Trip> tripsTable, @NonNull ReceiptsTable receiptsTable, @NonNull DistanceTable distanceTable,\n                                      @NonNull DatabaseHelper databaseHelper, @NonNull StorageManager storageManager)", "testcase": false, "constructor": true}, {"identifier": "postGet", "parameters": "(@NonNull final List<Trip> trips)", "modifiers": "@NonNull @Override public", "return": "Single<List<Trip>>", "signature": "Single<List<Trip>> postGet(@NonNull final List<Trip> trips)", "full_signature": "@NonNull @Override public Single<List<Trip>> postGet(@NonNull final List<Trip> trips)", "class_method_signature": "TripTableActionAlterations.postGet(@NonNull final List<Trip> trips)", "testcase": false, "constructor": false}, {"identifier": "postInsert", "parameters": "(@NonNull final Trip postInsertTrip)", "modifiers": "@NonNull @Override public", "return": "Single<Trip>", "signature": "Single<Trip> postInsert(@NonNull final Trip postInsertTrip)", "full_signature": "@NonNull @Override public Single<Trip> postInsert(@NonNull final Trip postInsertTrip)", "class_method_signature": "TripTableActionAlterations.postInsert(@NonNull final Trip postInsertTrip)", "testcase": false, "constructor": false}, {"identifier": "makeTripDirectory", "parameters": "(@NonNull final Trip trip)", "modifiers": "@NonNull private", "return": "Completable", "signature": "Completable makeTripDirectory(@NonNull final Trip trip)", "full_signature": "@NonNull private Completable makeTripDirectory(@NonNull final Trip trip)", "class_method_signature": "TripTableActionAlterations.makeTripDirectory(@NonNull final Trip trip)", "testcase": false, "constructor": false}, {"identifier": "postUpdate", "parameters": "(@NonNull final Trip oldTrip, @Nullable final Trip newTrip)", "modifiers": "@NonNull @Override public", "return": "Single<Trip>", "signature": "Single<Trip> postUpdate(@NonNull final Trip oldTrip, @Nullable final Trip newTrip)", "full_signature": "@NonNull @Override public Single<Trip> postUpdate(@NonNull final Trip oldTrip, @Nullable final Trip newTrip)", "class_method_signature": "TripTableActionAlterations.postUpdate(@NonNull final Trip oldTrip, @Nullable final Trip newTrip)", "testcase": false, "constructor": false}, {"identifier": "postDelete", "parameters": "(@Nullable final Trip trip)", "modifiers": "@NonNull @Override public", "return": "Single<Trip>", "signature": "Single<Trip> postDelete(@Nullable final Trip trip)", "full_signature": "@NonNull @Override public Single<Trip> postDelete(@Nullable final Trip trip)", "class_method_signature": "TripTableActionAlterations.postDelete(@Nullable final Trip trip)", "testcase": false, "constructor": false}, {"identifier": "backUpDatabase", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void backUpDatabase()", "full_signature": "private void backUpDatabase()", "class_method_signature": "TripTableActionAlterations.backUpDatabase()", "testcase": false, "constructor": false}], "file": "app/src/main/java/co/smartreceipts/android/persistence/database/controllers/alterations/TripTableActionAlterations.java"}, "focal_method": {"identifier": "postUpdate", "parameters": "(@NonNull final Trip oldTrip, @Nullable final Trip newTrip)", "modifiers": "@NonNull @Override public", "return": "Single<Trip>", "body": "@NonNull\n    @Override\n    public Single<Trip> postUpdate(@NonNull final Trip oldTrip, @Nullable final Trip newTrip) {\n        return Single.fromCallable(() -> {\n            if (newTrip == null) {\n                throw new Exception(\"Post update failed due to a null trip\");\n            }\n\n            newTrip.setPrice(oldTrip.getPrice());\n            newTrip.setDailySubTotal(oldTrip.getDailySubTotal());\n\n            return newTrip;\n        }).doOnSuccess(trip -> {\n            if (!oldTrip.getDirectory().equals(trip.getDirectory())) {\n\n                mReceiptsTable.updateParentBlocking(oldTrip, trip);\n                mDistanceTable.updateParentBlocking(oldTrip, trip);\n                final File dir = mStorageManager.rename(oldTrip.getDirectory(), trip.getName());\n                if (dir.equals(oldTrip.getDirectory())) {\n                    Logger.error(this, \"Failed to re-name the trip directory... Rolling back and throwing an exception\");\n                    mTripsTable.update(trip, oldTrip, new DatabaseOperationMetadata()).blockingGet();\n                    mReceiptsTable.updateParentBlocking(trip, oldTrip);\n                    mDistanceTable.updateParentBlocking(trip, oldTrip);\n\n                    throw new IOException(\"Failed to create trip directory\");\n                }\n            }\n        });\n    }", "signature": "Single<Trip> postUpdate(@NonNull final Trip oldTrip, @Nullable final Trip newTrip)", "full_signature": "@NonNull @Override public Single<Trip> postUpdate(@NonNull final Trip oldTrip, @Nullable final Trip newTrip)", "class_method_signature": "TripTableActionAlterations.postUpdate(@NonNull final Trip oldTrip, @Nullable final Trip newTrip)", "testcase": false, "constructor": false, "invocations": ["doOnSuccess", "fromCallable", "setPrice", "getPrice", "setDailySubTotal", "getDailySubTotal", "equals", "getDirectory", "getDirectory", "updateParentBlocking", "updateParentBlocking", "rename", "getDirectory", "getName", "equals", "getDirectory", "error", "blockingGet", "update", "updateParentBlocking", "updateParentBlocking"]}, "repository": {"repo_id": 2684727, "url": "https://github.com/wbaumann/SmartReceiptsLibrary", "stars": 166, "created": "11/1/2011 12:32:39 AM +00:00", "updates": "2020-01-26T22:04:24+00:00", "fork": "False", "license": "licensed"}}