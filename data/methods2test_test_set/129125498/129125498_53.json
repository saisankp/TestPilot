{"test_class": {"identifier": "EwmaPointForecasterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double TOLERANCE = 0.001;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 0.001", "var_name": "TOLERANCE"}, {"original_string": "private MetricDefinition metricDef;", "modifier": "private", "type": "MetricDefinition", "declarator": "metricDef", "var_name": "metricDef"}, {"original_string": "private long epochSecond;", "modifier": "private", "type": "long", "declarator": "epochSecond", "var_name": "epochSecond"}, {"original_string": "private static List<EwmaPointForecasterTestRow> data;", "modifier": "private static", "type": "List<EwmaPointForecasterTestRow>", "declarator": "data", "var_name": "data"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/forecast/point/algo/ewma/EwmaPointForecasterTest.java"}, "test_case": {"identifier": "classify", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void classify() {\n        val testRows = data.listIterator();\n        val testRow0 = testRows.next();\n        val observed0 = testRow0.getObserved();\n\n        val params = new EwmaPointForecasterParams()\n                .setAlpha(0.05)\n                .setInitMeanEstimate(observed0);\n        val forecaster = new EwmaPointForecaster(params);\n\n        assertEquals(params, forecaster.getParams());\n        assertEquals(observed0, forecaster.getMean(), TOLERANCE);\n\n        while (testRows.hasNext()) {\n            val testRow = testRows.next();\n            val observed = testRow.getObserved();\n            val metricData = new MetricData(metricDef, observed, epochSecond);\n            forecaster.forecast(metricData);\n            assertEquals(testRow.getKnownMean(), forecaster.getMean(), TOLERANCE);\n        }\n    }", "signature": "void classify()", "full_signature": "@Test public void classify()", "class_method_signature": "EwmaPointForecasterTest.classify()", "testcase": true, "constructor": false, "invocations": ["listIterator", "next", "getObserved", "setInitMeanEstimate", "setAlpha", "assertEquals", "getParams", "assertEquals", "getMean", "hasNext", "next", "getObserved", "forecast", "assertEquals", "getKnownMean", "getMean"]}, "focal_class": {"identifier": "EwmaPointForecaster", "superclass": "", "interfaces": "implements PointForecaster", "fields": [{"original_string": "@Getter\n    @Generated // https://reflectoring.io/100-percent-test-coverage/\n    private EwmaPointForecasterParams params;", "modifier": "@Getter\n    @Generated // https://reflectoring.io/100-percent-test-coverage/\n    private", "type": "EwmaPointForecasterParams", "declarator": "params", "var_name": "params"}, {"original_string": "@Getter\n    @Generated // https://reflectoring.io/100-percent-test-coverage/\n    private double mean;", "modifier": "@Getter\n    @Generated // https://reflectoring.io/100-percent-test-coverage/\n    private", "type": "double", "declarator": "mean", "var_name": "mean"}], "methods": [{"identifier": "EwmaPointForecaster", "parameters": "()", "modifiers": "public", "return": "", "signature": " EwmaPointForecaster()", "full_signature": "public  EwmaPointForecaster()", "class_method_signature": "EwmaPointForecaster.EwmaPointForecaster()", "testcase": false, "constructor": true}, {"identifier": "EwmaPointForecaster", "parameters": "(EwmaPointForecasterParams params)", "modifiers": "public", "return": "", "signature": " EwmaPointForecaster(EwmaPointForecasterParams params)", "full_signature": "public  EwmaPointForecaster(EwmaPointForecasterParams params)", "class_method_signature": "EwmaPointForecaster.EwmaPointForecaster(EwmaPointForecasterParams params)", "testcase": false, "constructor": true}, {"identifier": "forecast", "parameters": "(MetricData metricData)", "modifiers": "@Override public", "return": "PointForecast", "signature": "PointForecast forecast(MetricData metricData)", "full_signature": "@Override public PointForecast forecast(MetricData metricData)", "class_method_signature": "EwmaPointForecaster.forecast(MetricData metricData)", "testcase": false, "constructor": false}, {"identifier": "updateMeanEstimate", "parameters": "(double observed)", "modifiers": "private", "return": "void", "signature": "void updateMeanEstimate(double observed)", "full_signature": "private void updateMeanEstimate(double observed)", "class_method_signature": "EwmaPointForecaster.updateMeanEstimate(double observed)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/forecast/point/algo/ewma/EwmaPointForecaster.java"}, "focal_method": {"identifier": "forecast", "parameters": "(MetricData metricData)", "modifiers": "@Override public", "return": "PointForecast", "body": "@Override\n    public PointForecast forecast(MetricData metricData) {\n        notNull(metricData, \"metricData can't be null\");\n        val observed = metricData.getValue();\n        updateMeanEstimate(observed);\n\n        // TODO Handle warmup\n        return new PointForecast(mean, false);\n    }", "signature": "PointForecast forecast(MetricData metricData)", "full_signature": "@Override public PointForecast forecast(MetricData metricData)", "class_method_signature": "EwmaPointForecaster.forecast(MetricData metricData)", "testcase": false, "constructor": false, "invocations": ["notNull", "getValue", "updateMeanEstimate"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}