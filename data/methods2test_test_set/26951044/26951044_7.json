{"test_class": {"identifier": "TypeLiteralTest", "superclass": "", "interfaces": "", "fields": [], "file": "code/api/src/test/java/org/apache/tamaya/TypeLiteralTest.java"}, "test_case": {"identifier": "testTypeTakingParametersMustBeSubclassOfParameterizedType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTypeTakingParametersMustBeSubclassOfParameterizedType() {\n        //Reflection on ArrayList<String> gives a ParameterizedType\n        class A extends ArrayList<String> { };\n        class B extends A { };\n        TypeLiteral<List<String>> checker = new TypeLiteral<List<String>>() { };\n        Type t = checker.getDefinedType(B.class);\n        assertThat(\"java.lang.String\").isEqualTo(t.getTypeName());\n    }", "signature": "void testTypeTakingParametersMustBeSubclassOfParameterizedType()", "full_signature": "@Test public void testTypeTakingParametersMustBeSubclassOfParameterizedType()", "class_method_signature": "TypeLiteralTest.testTypeTakingParametersMustBeSubclassOfParameterizedType()", "testcase": true, "constructor": false, "invocations": ["getDefinedType", "isEqualTo", "assertThat", "getTypeName"]}, "focal_class": {"identifier": "TypeLiteral", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private static final Type[] EMPTY_TYPE_ARRAY = new Type[0];", "modifier": "private static final", "type": "Type[]", "declarator": "EMPTY_TYPE_ARRAY = new Type[0]", "var_name": "EMPTY_TYPE_ARRAY"}, {"original_string": "private final Type definedType;", "modifier": "private final", "type": "Type", "declarator": "definedType", "var_name": "definedType"}], "methods": [{"identifier": "TypeLiteral", "parameters": "(Type definedType)", "modifiers": "public", "return": "", "signature": " TypeLiteral(Type definedType)", "full_signature": "public  TypeLiteral(Type definedType)", "class_method_signature": "TypeLiteral.TypeLiteral(Type definedType)", "testcase": false, "constructor": true}, {"identifier": "TypeLiteral", "parameters": "()", "modifiers": "public", "return": "", "signature": " TypeLiteral()", "full_signature": "public  TypeLiteral()", "class_method_signature": "TypeLiteral.TypeLiteral()", "testcase": false, "constructor": true}, {"identifier": "of", "parameters": "(Type type)", "modifiers": "public static", "return": "TypeLiteral<R>", "signature": "TypeLiteral<R> of(Type type)", "full_signature": "public static TypeLiteral<R> of(Type type)", "class_method_signature": "TypeLiteral.of(Type type)", "testcase": false, "constructor": false}, {"identifier": "getGenericInterfaceTypeParameters", "parameters": "(Class<?> clazz, Class<?> interfaceType)", "modifiers": "public static", "return": "Type[]", "signature": "Type[] getGenericInterfaceTypeParameters(Class<?> clazz, Class<?> interfaceType)", "full_signature": "public static Type[] getGenericInterfaceTypeParameters(Class<?> clazz, Class<?> interfaceType)", "class_method_signature": "TypeLiteral.getGenericInterfaceTypeParameters(Class<?> clazz, Class<?> interfaceType)", "testcase": false, "constructor": false}, {"identifier": "getTypeParameters", "parameters": "(Type type)", "modifiers": "public static", "return": "Type[]", "signature": "Type[] getTypeParameters(Type type)", "full_signature": "public static Type[] getTypeParameters(Type type)", "class_method_signature": "TypeLiteral.getTypeParameters(Type type)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "public final", "return": "Type", "signature": "Type getType()", "full_signature": "public final Type getType()", "class_method_signature": "TypeLiteral.getType()", "testcase": false, "constructor": false}, {"identifier": "getRawType", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") public final", "return": "Class<T>", "signature": "Class<T> getRawType()", "full_signature": "@SuppressWarnings(\"unchecked\") public final Class<T> getRawType()", "class_method_signature": "TypeLiteral.getRawType()", "testcase": false, "constructor": false}, {"identifier": "getDefinedType", "parameters": "(Class<?> clazz)", "modifiers": "protected", "return": "Type", "signature": "Type getDefinedType(Class<?> clazz)", "full_signature": "protected Type getDefinedType(Class<?> clazz)", "class_method_signature": "TypeLiteral.getDefinedType(Class<?> clazz)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "TypeLiteral.hashCode()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object obj)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object obj)", "full_signature": "@Override public boolean equals(Object obj)", "class_method_signature": "TypeLiteral.equals(Object obj)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "TypeLiteral.toString()", "testcase": false, "constructor": false}], "file": "code/api/src/main/java/org/apache/tamaya/TypeLiteral.java"}, "focal_method": {"identifier": "getDefinedType", "parameters": "(Class<?> clazz)", "modifiers": "protected", "return": "Type", "body": "protected Type getDefinedType(Class<?> clazz) {\n        Type type;\n\n        if (clazz == null) {\n            throw new RuntimeException(\"Class parameter clazz can not be null\");\n        }\n\n        Type superClazz = clazz.getGenericSuperclass();\n\n        if (superClazz instanceof ParameterizedType) {\n            ParameterizedType pt = (ParameterizedType) superClazz;\n            Type[] actualArgs = pt.getActualTypeArguments();\n\n            if (actualArgs.length == 1) {\n                type = actualArgs[0];\n\n            } else {\n                throw new RuntimeException(\"More than one parametric type\");\n            }\n\n        } else if (superClazz.equals(Object.class)) {\n            throw new RuntimeException(\"Super class must be parametrized type\");\n        } else {\n            type = getDefinedType((Class<?>) superClazz);\n        }\n\n        return type;\n    }", "signature": "Type getDefinedType(Class<?> clazz)", "full_signature": "protected Type getDefinedType(Class<?> clazz)", "class_method_signature": "TypeLiteral.getDefinedType(Class<?> clazz)", "testcase": false, "constructor": false, "invocations": ["getGenericSuperclass", "getActualTypeArguments", "equals", "getDefinedType"]}, "repository": {"repo_id": 26951044, "url": "https://github.com/apache/incubator-tamaya", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 44, "size": 7630, "license": "licensed"}}