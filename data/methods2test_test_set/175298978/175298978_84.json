{"test_class": {"identifier": "JDBCCommitQueriesTest", "superclass": "extends PostgresTestCase", "interfaces": "", "fields": [{"original_string": "private DeveloperQueries developerQueries;", "modifier": "private", "type": "DeveloperQueries", "declarator": "developerQueries", "var_name": "developerQueries"}, {"original_string": "private ProjectQueries projectQueries;", "modifier": "private", "type": "ProjectQueries", "declarator": "projectQueries", "var_name": "projectQueries"}, {"original_string": "private CommitQueries queries;", "modifier": "private", "type": "CommitQueries", "declarator": "queries", "var_name": "queries"}, {"original_string": "private int projectId;", "modifier": "private", "type": "int", "declarator": "projectId", "var_name": "projectId"}, {"original_string": "private String mainDev;", "modifier": "private", "type": "String", "declarator": "mainDev", "var_name": "mainDev"}], "file": "SmellTracker/src/test/java/fr/inria/sniffer/tracker/analysis/persistence/queries/JDBCCommitQueriesTest.java"}, "test_case": {"identifier": "testMergedCommitIdQuery", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMergedCommitIdQuery() {\n        List<Map<String, Object>> result;\n\n        Commit commit = generateCommit(\"sha\", 1);\n        Commit secondCommit = generateCommit(\"anotherSha\", 2);\n\n        // No commit means no result\n        result = persistence.query(queries.mergedCommitIdQuery(projectId, commit));\n        assertTrue(result.isEmpty());\n\n        executeSuccess(queries.commitInsertionStatement(projectId, commit, GitDiff.EMPTY));\n        executeSuccess(queries.commitInsertionStatement(projectId, secondCommit, GitDiff.EMPTY));\n\n        // Not a merge commit means no result in row\n        result = persistence.query(queries.mergedCommitIdQuery(projectId, commit));\n        assertFalse(result.isEmpty());\n        assertNull(\"returned ID is null\", result.get(0).get(\"id\"));\n        result = persistence.query(queries.mergedCommitIdQuery(projectId, secondCommit));\n        assertFalse(result.isEmpty());\n        assertNull(\"returned ID is null\", result.get(0).get(\"id\"));\n\n        Commit mergeCommit = generateCommit(\"thirdSha\", 3);\n        mergeCommit.setParents(Arrays.asList(secondCommit, commit));\n        executeSuccess(queries.commitInsertionStatement(projectId, mergeCommit, GitDiff.EMPTY));\n\n        // Merge commit returns the ID of the second parent commit.\n        result = persistence.query(queries.mergedCommitIdQuery(projectId, mergeCommit));\n        assertEquals(1, result.get(0).get(\"id\"));\n    }", "signature": "void testMergedCommitIdQuery()", "full_signature": "@Test public void testMergedCommitIdQuery()", "class_method_signature": "JDBCCommitQueriesTest.testMergedCommitIdQuery()", "testcase": true, "constructor": false, "invocations": ["generateCommit", "generateCommit", "query", "mergedCommitIdQuery", "assertTrue", "isEmpty", "executeSuccess", "commitInsertionStatement", "executeSuccess", "commitInsertionStatement", "query", "mergedCommitIdQuery", "assertFalse", "isEmpty", "assertNull", "get", "get", "query", "mergedCommitIdQuery", "assertFalse", "isEmpty", "assertNull", "get", "get", "generateCommit", "setParents", "asList", "executeSuccess", "commitInsertionStatement", "query", "mergedCommitIdQuery", "assertEquals", "get", "get"]}, "focal_class": {"identifier": "JDBCCommitQueries", "superclass": "extends JDBCQueriesHelper", "interfaces": "implements CommitQueries", "fields": [{"original_string": "private DeveloperQueries developerQueries;", "modifier": "private", "type": "DeveloperQueries", "declarator": "developerQueries", "var_name": "developerQueries"}], "methods": [{"identifier": "JDBCCommitQueries", "parameters": "(DeveloperQueries developerQueries)", "modifiers": "public", "return": "", "signature": " JDBCCommitQueries(DeveloperQueries developerQueries)", "full_signature": "public  JDBCCommitQueries(DeveloperQueries developerQueries)", "class_method_signature": "JDBCCommitQueries.JDBCCommitQueries(DeveloperQueries developerQueries)", "testcase": false, "constructor": true}, {"identifier": "commitInsertionStatement", "parameters": "(int projectId, Commit commit, GitDiff diff)", "modifiers": "@Override public", "return": "String", "signature": "String commitInsertionStatement(int projectId, Commit commit, GitDiff diff)", "full_signature": "@Override public String commitInsertionStatement(int projectId, Commit commit, GitDiff diff)", "class_method_signature": "JDBCCommitQueries.commitInsertionStatement(int projectId, Commit commit, GitDiff diff)", "testcase": false, "constructor": false}, {"identifier": "idFromShaQuery", "parameters": "(int projectId, String sha)", "modifiers": "@Override public", "return": "String", "signature": "String idFromShaQuery(int projectId, String sha)", "full_signature": "@Override public String idFromShaQuery(int projectId, String sha)", "class_method_signature": "JDBCCommitQueries.idFromShaQuery(int projectId, String sha)", "testcase": false, "constructor": false}, {"identifier": "shaFromOrdinalQuery", "parameters": "(int projectId, int ordinal)", "modifiers": "@Override public", "return": "String", "signature": "String shaFromOrdinalQuery(int projectId, int ordinal)", "full_signature": "@Override public String shaFromOrdinalQuery(int projectId, int ordinal)", "class_method_signature": "JDBCCommitQueries.shaFromOrdinalQuery(int projectId, int ordinal)", "testcase": false, "constructor": false}, {"identifier": "idFromShaQuery", "parameters": "(int projectId, String sha, boolean paprikaOnly)", "modifiers": "@Override public", "return": "String", "signature": "String idFromShaQuery(int projectId, String sha, boolean paprikaOnly)", "full_signature": "@Override public String idFromShaQuery(int projectId, String sha, boolean paprikaOnly)", "class_method_signature": "JDBCCommitQueries.idFromShaQuery(int projectId, String sha, boolean paprikaOnly)", "testcase": false, "constructor": false}, {"identifier": "shaFromOrdinalQuery", "parameters": "(int projectId, int ordinal, boolean paprikaOnly)", "modifiers": "@Override public", "return": "String", "signature": "String shaFromOrdinalQuery(int projectId, int ordinal, boolean paprikaOnly)", "full_signature": "@Override public String shaFromOrdinalQuery(int projectId, int ordinal, boolean paprikaOnly)", "class_method_signature": "JDBCCommitQueries.shaFromOrdinalQuery(int projectId, int ordinal, boolean paprikaOnly)", "testcase": false, "constructor": false}, {"identifier": "lastProjectCommitShaQuery", "parameters": "(int projectId)", "modifiers": "@Override public", "return": "String", "signature": "String lastProjectCommitShaQuery(int projectId)", "full_signature": "@Override public String lastProjectCommitShaQuery(int projectId)", "class_method_signature": "JDBCCommitQueries.lastProjectCommitShaQuery(int projectId)", "testcase": false, "constructor": false}, {"identifier": "lastProjectCommitShaQuery", "parameters": "(int projectId, boolean paprikaOnly)", "modifiers": "@Override public", "return": "String", "signature": "String lastProjectCommitShaQuery(int projectId, boolean paprikaOnly)", "full_signature": "@Override public String lastProjectCommitShaQuery(int projectId, boolean paprikaOnly)", "class_method_signature": "JDBCCommitQueries.lastProjectCommitShaQuery(int projectId, boolean paprikaOnly)", "testcase": false, "constructor": false}, {"identifier": "fileRenameInsertionStatement", "parameters": "(int projectId, String commitSha, GitRename rename)", "modifiers": "@Override public", "return": "String", "signature": "String fileRenameInsertionStatement(int projectId, String commitSha, GitRename rename)", "full_signature": "@Override public String fileRenameInsertionStatement(int projectId, String commitSha, GitRename rename)", "class_method_signature": "JDBCCommitQueries.fileRenameInsertionStatement(int projectId, String commitSha, GitRename rename)", "testcase": false, "constructor": false}, {"identifier": "mergedCommitIdQuery", "parameters": "(int projectId, Commit commit)", "modifiers": "@Override public", "return": "String", "signature": "String mergedCommitIdQuery(int projectId, Commit commit)", "full_signature": "@Override public String mergedCommitIdQuery(int projectId, Commit commit)", "class_method_signature": "JDBCCommitQueries.mergedCommitIdQuery(int projectId, Commit commit)", "testcase": false, "constructor": false}, {"identifier": "projectIdFromShaQuery", "parameters": "(String sha)", "modifiers": "@Override public", "return": "String", "signature": "String projectIdFromShaQuery(String sha)", "full_signature": "@Override public String projectIdFromShaQuery(String sha)", "class_method_signature": "JDBCCommitQueries.projectIdFromShaQuery(String sha)", "testcase": false, "constructor": false}, {"identifier": "updateCommitSizeQuery", "parameters": "(int projectId, String tempTable)", "modifiers": "@Override public", "return": "String", "signature": "String updateCommitSizeQuery(int projectId, String tempTable)", "full_signature": "@Override public String updateCommitSizeQuery(int projectId, String tempTable)", "class_method_signature": "JDBCCommitQueries.updateCommitSizeQuery(int projectId, String tempTable)", "testcase": false, "constructor": false}, {"identifier": "fileChangedInsertionStatement", "parameters": "(int projectId, String commitSha, GitChangedFile changedFile)", "modifiers": "@Override public", "return": "String", "signature": "String fileChangedInsertionStatement(int projectId, String commitSha, GitChangedFile changedFile)", "full_signature": "@Override public String fileChangedInsertionStatement(int projectId, String commitSha, GitChangedFile changedFile)", "class_method_signature": "JDBCCommitQueries.fileChangedInsertionStatement(int projectId, String commitSha, GitChangedFile changedFile)", "testcase": false, "constructor": false}], "file": "SmellTracker/src/main/java/fr/inria/sniffer/tracker/analysis/persistence/queries/JDBCCommitQueries.java"}, "focal_method": {"identifier": "mergedCommitIdQuery", "parameters": "(int projectId, Commit commit)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String mergedCommitIdQuery(int projectId, Commit commit) {\n        return \"SELECT merged_commit_id AS id FROM commit_entry where sha1 = '\" + commit.sha + \"'\";\n    }", "signature": "String mergedCommitIdQuery(int projectId, Commit commit)", "full_signature": "@Override public String mergedCommitIdQuery(int projectId, Commit commit)", "class_method_signature": "JDBCCommitQueries.mergedCommitIdQuery(int projectId, Commit commit)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 175298978, "url": "https://github.com/HabchiSarra/Sniffer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 10, "size": 587, "license": "licensed"}}