{"test_class": {"identifier": "TestObjectExecutorThread", "superclass": "", "interfaces": "implements EventSubscriber", "fields": [{"original_string": "private JVoiceXMLEvent event;", "modifier": "private", "type": "JVoiceXMLEvent", "declarator": "event", "var_name": "event"}, {"original_string": "private Object lock;", "modifier": "private", "type": "Object", "declarator": "lock", "var_name": "lock"}, {"original_string": "private static final String STRING_VALUE = \"dummy value\";", "modifier": "private static final", "type": "String", "declarator": "STRING_VALUE = \"dummy value\"", "var_name": "STRING_VALUE"}, {"original_string": "private static final Long LONG_VALUE = new Long(42);", "modifier": "private static final", "type": "Long", "declarator": "LONG_VALUE = new Long(42)", "var_name": "LONG_VALUE"}, {"original_string": "private VoiceXmlInterpreterContext context;", "modifier": "private", "type": "VoiceXmlInterpreterContext", "declarator": "context", "var_name": "context"}], "file": "org.jvoicexml/src/test/java/org/jvoicexml/interpreter/TestObjectExecutorThread.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test(timeout = 2000) public", "return": "void", "body": "@Test(timeout = 2000)\n    public void testExecute() throws Exception, JVoiceXMLEvent {\n        final VoiceXmlDocument doc = new VoiceXmlDocument();\n        final Vxml vxml = doc.getVxml();\n        final Form form = vxml.appendChild(Form.class);\n        final ObjectTag object = form.appendChild(ObjectTag.class);\n        object.setName(\"test\");\n        object.setClassid(TestObjectExecutorThread.class);\n        final ObjectFormItem item = new ObjectFormItem(context, object);\n        final Dialog dialog = new ExecutablePlainForm();\n        dialog.setNode(form);\n        final EventBus eventbus = context.getEventBus();\n        eventbus.subscribe(\"\", this);\n\n        final ObjectExecutorThread executor = new ObjectExecutorThread(context,\n                item);\n\n        executor.start();\n        synchronized (lock) {\n            lock.wait();\n        }\n        Assert.assertNotNull(\"no event received\", event);\n        Assert.assertTrue(\"expected an object result\",\n                event instanceof ObjectTagResultEvent);\n        final ObjectTagResultEvent result = (ObjectTagResultEvent) event;\n        Assert.assertEquals(STRING_VALUE, result.getInputResult());\n    }", "signature": "void testExecute()", "full_signature": "@Test(timeout = 2000) public void testExecute()", "class_method_signature": "TestObjectExecutorThread.testExecute()", "testcase": true, "constructor": false, "invocations": ["getVxml", "appendChild", "appendChild", "setName", "setClassid", "setNode", "getEventBus", "subscribe", "start", "wait", "assertNotNull", "assertTrue", "assertEquals", "getInputResult"]}, "focal_class": {"identifier": "ObjectExecutorThread", "superclass": "extends Thread", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LogManager\n            .getLogger(ObjectExecutorThread.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager\n            .getLogger(ObjectExecutorThread.class)", "var_name": "LOGGER"}, {"original_string": "private final VoiceXmlInterpreterContext context;", "modifier": "private final", "type": "VoiceXmlInterpreterContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final ObjectFormItem object;", "modifier": "private final", "type": "ObjectFormItem", "declarator": "object", "var_name": "object"}, {"original_string": "private final EventBus eventbus;", "modifier": "private final", "type": "EventBus", "declarator": "eventbus", "var_name": "eventbus"}, {"original_string": "private final Collection<Object> parameter;", "modifier": "private final", "type": "Collection<Object>", "declarator": "parameter", "var_name": "parameter"}, {"original_string": "private final Application application;", "modifier": "private final", "type": "Application", "declarator": "application", "var_name": "application"}, {"original_string": "private final URL applicationBase;", "modifier": "private final", "type": "URL", "declarator": "applicationBase", "var_name": "applicationBase"}, {"original_string": "private static final ClassLoader LOADER;", "modifier": "private static final", "type": "ClassLoader", "declarator": "LOADER", "var_name": "LOADER"}, {"original_string": "private static final Map<Collection<URI>, ClassLoader> LOADERS;", "modifier": "private static final", "type": "Map<Collection<URI>, ClassLoader>", "declarator": "LOADERS", "var_name": "LOADERS"}], "methods": [{"identifier": "ObjectExecutorThread", "parameters": "(final VoiceXmlInterpreterContext ctx,\n            final ObjectFormItem item)", "modifiers": "", "return": "", "signature": " ObjectExecutorThread(final VoiceXmlInterpreterContext ctx,\n            final ObjectFormItem item)", "full_signature": "  ObjectExecutorThread(final VoiceXmlInterpreterContext ctx,\n            final ObjectFormItem item)", "class_method_signature": "ObjectExecutorThread.ObjectExecutorThread(final VoiceXmlInterpreterContext ctx,\n            final ObjectFormItem item)", "testcase": false, "constructor": true}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "ObjectExecutorThread.run()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "private", "return": "Object", "signature": "Object execute()", "full_signature": "private Object execute()", "class_method_signature": "ObjectExecutorThread.execute()", "testcase": false, "constructor": false}, {"identifier": "getInvocationTarget", "parameters": "(final ObjectTag tag)", "modifiers": "private", "return": "Object", "signature": "Object getInvocationTarget(final ObjectTag tag)", "full_signature": "private Object getInvocationTarget(final ObjectTag tag)", "class_method_signature": "ObjectExecutorThread.getInvocationTarget(final ObjectTag tag)", "testcase": false, "constructor": false}, {"identifier": "getClassLoader", "parameters": "(final Collection<URI> uris)", "modifiers": "private synchronized", "return": "ClassLoader", "signature": "ClassLoader getClassLoader(final Collection<URI> uris)", "full_signature": "private synchronized ClassLoader getClassLoader(final Collection<URI> uris)", "class_method_signature": "ObjectExecutorThread.getClassLoader(final Collection<URI> uris)", "testcase": false, "constructor": false}, {"identifier": "getMethodName", "parameters": "(final ObjectTag tag)", "modifiers": "private", "return": "String", "signature": "String getMethodName(final ObjectTag tag)", "full_signature": "private String getMethodName(final ObjectTag tag)", "class_method_signature": "ObjectExecutorThread.getMethodName(final ObjectTag tag)", "testcase": false, "constructor": false}, {"identifier": "targetExecute", "parameters": "(final Object invocationTarget,\n            final String methodName)", "modifiers": "private", "return": "Object", "signature": "Object targetExecute(final Object invocationTarget,\n            final String methodName)", "full_signature": "private Object targetExecute(final Object invocationTarget,\n            final String methodName)", "class_method_signature": "ObjectExecutorThread.targetExecute(final Object invocationTarget,\n            final String methodName)", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/interpreter/ObjectExecutorThread.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "private", "return": "Object", "body": "private Object execute() throws SemanticError, NoresourceError,\n            NoauthorizationError, BadFetchError, UnsupportedObjectnameError {\n\n        final ObjectTag tag = (ObjectTag) object.getNode();\n        final Object invocationTarget = getInvocationTarget(tag);\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"try to execute: '\"\n                    + invocationTarget.getClass().getName() + \"'\");\n        }\n\n        final String method;\n        try {\n            method = getMethodName(tag);\n        } catch (URISyntaxException e) {\n            throw new SemanticError(\"Must specify attribute a valid URI for: \"\n                    + ObjectTag.ATTRIBUTE_CLASSID);\n        }\n\n        return targetExecute(invocationTarget, method);\n    }", "signature": "Object execute()", "full_signature": "private Object execute()", "class_method_signature": "ObjectExecutorThread.execute()", "testcase": false, "constructor": false, "invocations": ["getNode", "getInvocationTarget", "isDebugEnabled", "debug", "getName", "getClass", "getMethodName", "targetExecute"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}