{"test_class": {"identifier": "RepairRequestTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_CACHE_NAME = \"default\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_CACHE_NAME = \"default\"", "var_name": "DEFAULT_CACHE_NAME"}, {"original_string": "private static final UUID NODE_2 = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "NODE_2 = UUID.randomUUID()", "var_name": "NODE_2"}, {"original_string": "private static final UUID NODE_3 = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "NODE_3 = UUID.randomUUID()", "var_name": "NODE_3"}, {"original_string": "private static final UUID NODE_4 = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "NODE_4 = UUID.randomUUID()", "var_name": "NODE_4"}, {"original_string": "private static final UUID NODE_5 = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "NODE_5 = UUID.randomUUID()", "var_name": "NODE_5"}, {"original_string": "private static final UUID NODE_1 = UUID.randomUUID();", "modifier": "private static final", "type": "UUID", "declarator": "NODE_1 = UUID.randomUUID()", "var_name": "NODE_1"}, {"original_string": "private static final String KEY = \"some_key\";", "modifier": "private static final", "type": "String", "declarator": "KEY = \"some_key\"", "var_name": "KEY"}, {"original_string": "@Parameterized.Parameter(0)\n    public RepairAlgorithm repairAlgorithm;", "modifier": "@Parameterized.Parameter(0)\n    public", "type": "RepairAlgorithm", "declarator": "repairAlgorithm", "var_name": "repairAlgorithm"}, {"original_string": "@Parameterized.Parameter(1)\n    public boolean fixed;", "modifier": "@Parameterized.Parameter(1)\n    public", "type": "boolean", "declarator": "fixed", "var_name": "fixed"}], "file": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/checker/tasks/RepairRequestTaskTest.java"}, "test_case": {"identifier": "testFullOwnerSetMaxAttempt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFullOwnerSetMaxAttempt() throws IllegalAccessException {\n        Map<VersionedKey, Map<UUID, VersionedValue>> data = new HashMap<>();\n        VersionedKey key = new VersionedKey(null, new KeyCacheObjectImpl(), null);\n        Map<UUID, VersionedValue> keyVers = new HashMap<>();\n        keyVers.put(NODE_1, versionedValue(\"1\", 1));\n        keyVers.put(NODE_2, versionedValue(\"2\", 2));\n        keyVers.put(NODE_3, versionedValue(\"2\", 2));\n        keyVers.put(NODE_4, versionedValue(\"4\", 4));\n        data.put(key, keyVers);\n\n        IgniteEx igniteMock = igniteMock(true);\n\n        final int lastAttempt = 3;\n        ExecutionResult<RepairResult> res = injectIgnite(repairJob(data, 4, lastAttempt), igniteMock).execute();\n\n        assertTrue(res.result().keysToRepair().isEmpty());\n        assertEquals(1, res.result().repairedKeys().size());\n\n        Map.Entry<VersionedKey, RepairMeta> entry = res.result()\n            .repairedKeys().entrySet().iterator().next();\n        assertEquals(keyVers, entry.getValue().getPreviousValue());\n\n        RepairMeta repairMeta = entry.getValue();\n        assertTrue(repairMeta.fixed());\n        assertEquals(repairAlgorithm, repairMeta.repairAlg());\n\n        switch (repairAlgorithm) {\n            case LATEST:\n                assertCacheObjectEquals(keyVers.get(NODE_4).value(), repairMeta.value());\n                break;\n            case PRIMARY:\n                assertCacheObjectEquals(keyVers.get(NODE_1).value(), repairMeta.value());\n                break;\n            case MAJORITY:\n                assertCacheObjectEquals(keyVers.get(NODE_2).value(), repairMeta.value());\n                break;\n            case REMOVE:\n                assertCacheObjectEquals(null, repairMeta.value());\n                break;\n        }\n    }", "signature": "void testFullOwnerSetMaxAttempt()", "full_signature": "@Test public void testFullOwnerSetMaxAttempt()", "class_method_signature": "RepairRequestTaskTest.testFullOwnerSetMaxAttempt()", "testcase": true, "constructor": false, "invocations": ["put", "versionedValue", "put", "versionedValue", "put", "versionedValue", "put", "versionedValue", "put", "igniteMock", "execute", "injectIgnite", "repairJob", "assertTrue", "isEmpty", "keysToRepair", "result", "assertEquals", "size", "repairedKeys", "result", "next", "iterator", "entrySet", "repairedKeys", "result", "assertEquals", "getPreviousValue", "getValue", "getValue", "assertTrue", "fixed", "assertEquals", "repairAlg", "assertCacheObjectEquals", "value", "get", "value", "assertCacheObjectEquals", "value", "get", "value", "assertCacheObjectEquals", "value", "get", "value", "assertCacheObjectEquals", "value"]}, "focal_class": {"identifier": "RepairRequestTask", "superclass": "extends ComputeTaskAdapter<RepairRequest, ExecutionResult<RepairResult>>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 0L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 0L", "var_name": "serialVersionUID"}, {"original_string": "public static final int MAX_REPAIR_ATTEMPTS = 3;", "modifier": "public static final", "type": "int", "declarator": "MAX_REPAIR_ATTEMPTS = 3", "var_name": "MAX_REPAIR_ATTEMPTS"}, {"original_string": "@SuppressWarnings(\"unused\")\n    @LoggerResource\n    private IgniteLogger log;", "modifier": "@SuppressWarnings(\"unused\")\n    @LoggerResource\n    private", "type": "IgniteLogger", "declarator": "log", "var_name": "log"}, {"original_string": "@SuppressWarnings(\"unused\")\n    @IgniteInstanceResource\n    private IgniteEx ignite;", "modifier": "@SuppressWarnings(\"unused\")\n    @IgniteInstanceResource\n    private", "type": "IgniteEx", "declarator": "ignite", "var_name": "ignite"}, {"original_string": "private RepairRequest repairReq;", "modifier": "private", "type": "RepairRequest", "declarator": "repairReq", "var_name": "repairReq"}], "methods": [{"identifier": "map", "parameters": "(List<ClusterNode> subgrid, RepairRequest arg)", "modifiers": "@Override public", "return": "Map<? extends ComputeJob, ClusterNode>", "signature": "Map<? extends ComputeJob, ClusterNode> map(List<ClusterNode> subgrid, RepairRequest arg)", "full_signature": "@Override public Map<? extends ComputeJob, ClusterNode> map(List<ClusterNode> subgrid, RepairRequest arg)", "class_method_signature": "RepairRequestTask.map(List<ClusterNode> subgrid, RepairRequest arg)", "testcase": false, "constructor": false}, {"identifier": "result", "parameters": "(ComputeJobResult res, List<ComputeJobResult> rcvd)", "modifiers": "@Override public", "return": "ComputeJobResultPolicy", "signature": "ComputeJobResultPolicy result(ComputeJobResult res, List<ComputeJobResult> rcvd)", "full_signature": "@Override public ComputeJobResultPolicy result(ComputeJobResult res, List<ComputeJobResult> rcvd)", "class_method_signature": "RepairRequestTask.result(ComputeJobResult res, List<ComputeJobResult> rcvd)", "testcase": false, "constructor": false}, {"identifier": "reduce", "parameters": "(\n        List<ComputeJobResult> results)", "modifiers": "@Override public", "return": "ExecutionResult<RepairResult>", "signature": "ExecutionResult<RepairResult> reduce(\n        List<ComputeJobResult> results)", "full_signature": "@Override public ExecutionResult<RepairResult> reduce(\n        List<ComputeJobResult> results)", "class_method_signature": "RepairRequestTask.reduce(\n        List<ComputeJobResult> results)", "testcase": false, "constructor": false}], "file": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/checker/tasks/RepairRequestTask.java"}, "focal_method": {"identifier": "result", "parameters": "(ComputeJobResult res, List<ComputeJobResult> rcvd)", "modifiers": "@Override public", "return": "ComputeJobResultPolicy", "body": "@Override public ComputeJobResultPolicy result(ComputeJobResult res, List<ComputeJobResult> rcvd) {\n        ComputeJobResultPolicy superRes = super.result(res, rcvd);\n\n        // Deny failover.\n        if (superRes == ComputeJobResultPolicy.FAILOVER) {\n            superRes = ComputeJobResultPolicy.WAIT;\n\n            log.warning(\"CollectPartitionEntryHashesJob failed on node \" +\n                \"[consistentId=\" + res.getNode().consistentId() + \"]\", res.getException());\n        }\n\n        return superRes;\n    }", "signature": "ComputeJobResultPolicy result(ComputeJobResult res, List<ComputeJobResult> rcvd)", "full_signature": "@Override public ComputeJobResultPolicy result(ComputeJobResult res, List<ComputeJobResult> rcvd)", "class_method_signature": "RepairRequestTask.result(ComputeJobResult res, List<ComputeJobResult> rcvd)", "testcase": false, "constructor": false, "invocations": ["result", "warning", "consistentId", "getNode", "getException"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}