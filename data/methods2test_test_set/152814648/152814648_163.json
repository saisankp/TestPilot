{"test_class": {"identifier": "ToolsTrendChartTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CHECK_STYLE = \"checkStyle\";", "modifier": "private static final", "type": "String", "declarator": "CHECK_STYLE = \"checkStyle\"", "var_name": "CHECK_STYLE"}, {"original_string": "private static final String SPOT_BUGS = \"spotBugs\";", "modifier": "private static final", "type": "String", "declarator": "SPOT_BUGS = \"spotBugs\"", "var_name": "SPOT_BUGS"}], "file": "plugin/src/test/java/io/jenkins/plugins/analysis/core/charts/ToolsTrendChartTest.java"}, "test_case": {"identifier": "shouldCreateToolsChartForMultipleActions", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void shouldCreateToolsChartForMultipleActions() {\n        ToolsTrendChart chart = new ToolsTrendChart();\n\n        List<BuildResult<AnalysisBuildResult>> compositeResults = new ArrayList<>();\n        compositeResults.add(new BuildResult<>(new Build(1), new CompositeBuildResult()\n                .add(createAnalysisBuildResult(CHECK_STYLE, 1), createAnalysisBuildResult(SPOT_BUGS, 3))));\n        compositeResults.add(new BuildResult<>(new Build(2), new CompositeBuildResult()\n                .add(createAnalysisBuildResult(CHECK_STYLE, 2), createAnalysisBuildResult(SPOT_BUGS, 4))));\n\n        LinesChartModel model = chart.create(compositeResults, new ChartModelConfiguration());\n\n        verifySeries(model.getSeries().get(0), CHECK_STYLE, 1, 2);\n        verifySeries(model.getSeries().get(1), SPOT_BUGS, 3, 4);\n\n        assertThatJson(model).node(\"domainAxisLabels\")\n                .isArray().hasSize(2).containsExactly(\"#1\", \"#2\");\n        assertThatJson(model).node(\"series\")\n                .isArray().hasSize(2);\n    }", "signature": "void shouldCreateToolsChartForMultipleActions()", "full_signature": "@Test void shouldCreateToolsChartForMultipleActions()", "class_method_signature": "ToolsTrendChartTest.shouldCreateToolsChartForMultipleActions()", "testcase": true, "constructor": false, "invocations": ["add", "add", "createAnalysisBuildResult", "createAnalysisBuildResult", "add", "add", "createAnalysisBuildResult", "createAnalysisBuildResult", "create", "verifySeries", "get", "getSeries", "verifySeries", "get", "getSeries", "containsExactly", "hasSize", "isArray", "node", "assertThatJson", "hasSize", "isArray", "node", "assertThatJson"]}, "focal_class": {"identifier": "ToolsTrendChart", "superclass": "", "interfaces": "implements TrendChart", "fields": [], "methods": [{"identifier": "create", "parameters": "(final Iterable<? extends BuildResult<AnalysisBuildResult>> results,\n            final ChartModelConfiguration configuration)", "modifiers": "@Override public", "return": "LinesChartModel", "signature": "LinesChartModel create(final Iterable<? extends BuildResult<AnalysisBuildResult>> results,\n            final ChartModelConfiguration configuration)", "full_signature": "@Override public LinesChartModel create(final Iterable<? extends BuildResult<AnalysisBuildResult>> results,\n            final ChartModelConfiguration configuration)", "class_method_signature": "ToolsTrendChart.create(final Iterable<? extends BuildResult<AnalysisBuildResult>> results,\n            final ChartModelConfiguration configuration)", "testcase": false, "constructor": false}], "file": "plugin/src/main/java/io/jenkins/plugins/analysis/core/charts/ToolsTrendChart.java"}, "focal_method": {"identifier": "create", "parameters": "(final Iterable<? extends BuildResult<AnalysisBuildResult>> results,\n            final ChartModelConfiguration configuration)", "modifiers": "@Override public", "return": "LinesChartModel", "body": "@Override\n    public LinesChartModel create(final Iterable<? extends BuildResult<AnalysisBuildResult>> results,\n            final ChartModelConfiguration configuration) {\n        ToolSeriesBuilder builder = new ToolSeriesBuilder();\n        LinesDataSet lineModel = builder.createDataSet(configuration, results);\n\n        LinesChartModel model = new LinesChartModel();\n\n        Palette[] colors = Palette.values();\n        int index = 0;\n        for (String name : lineModel.getDataSetIds()) {\n            LineSeries lineSeries = new LineSeries(name, colors[index++].getNormal(),\n                    StackedMode.SEPARATE_LINES, FilledMode.LINES);\n            if (index == colors.length) {\n                index = 0;\n            }\n            lineSeries.addAll(lineModel.getSeries(name));\n            model.addSeries(lineSeries);\n        }\n\n        model.setDomainAxisLabels(lineModel.getDomainAxisLabels());\n\n        return model;\n    }", "signature": "LinesChartModel create(final Iterable<? extends BuildResult<AnalysisBuildResult>> results,\n            final ChartModelConfiguration configuration)", "full_signature": "@Override public LinesChartModel create(final Iterable<? extends BuildResult<AnalysisBuildResult>> results,\n            final ChartModelConfiguration configuration)", "class_method_signature": "ToolsTrendChart.create(final Iterable<? extends BuildResult<AnalysisBuildResult>> results,\n            final ChartModelConfiguration configuration)", "testcase": false, "constructor": false, "invocations": ["createDataSet", "values", "getDataSetIds", "getNormal", "addAll", "getSeries", "addSeries", "setDomainAxisLabels", "getDomainAxisLabels"]}, "repository": {"repo_id": 152814648, "url": "https://github.com/jenkinsci/warnings-ng-plugin", "stars": 158, "created": "10/12/2018 10:41:36 PM +00:00", "updates": "2020-01-27T14:00:03+00:00", "fork": "False", "license": "licensed"}}