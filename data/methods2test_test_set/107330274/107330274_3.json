{"test_class": {"identifier": "MultiNodeClusterMemberResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final java.time.Duration TIMEOUT = Duration.ofSeconds(5);", "modifier": "private static final", "type": "java.time.Duration", "declarator": "TIMEOUT = Duration.ofSeconds(5)", "var_name": "TIMEOUT"}, {"original_string": "private static final String TEST_SERVICE = \"testService\";", "modifier": "private static final", "type": "String", "declarator": "TEST_SERVICE = \"testService\"", "var_name": "TEST_SERVICE"}, {"original_string": "private static final ClusterMembershipRevision<ClusterMember> MEMBER_1 = clusterMemberRegistrationRevision(activeClusterMember(\"member1\", \"10.0.0.1\"));", "modifier": "private static final", "type": "ClusterMembershipRevision<ClusterMember>", "declarator": "MEMBER_1 = clusterMemberRegistrationRevision(activeClusterMember(\"member1\", \"10.0.0.1\"))", "var_name": "MEMBER_1"}, {"original_string": "private static final ClusterMembershipRevision<ClusterMember> MEMBER_2 = clusterMemberRegistrationRevision(activeClusterMember(\"member2\", \"10.0.0.2\"));", "modifier": "private static final", "type": "ClusterMembershipRevision<ClusterMember>", "declarator": "MEMBER_2 = clusterMemberRegistrationRevision(activeClusterMember(\"member2\", \"10.0.0.2\"))", "var_name": "MEMBER_2"}, {"original_string": "private static final ClusterMembershipRevision<ClusterMember> MEMBER_3 = clusterMemberRegistrationRevision(activeClusterMember(\"member3\", \"10.0.0.3\"));", "modifier": "private static final", "type": "ClusterMembershipRevision<ClusterMember>", "declarator": "MEMBER_3 = clusterMemberRegistrationRevision(activeClusterMember(\"member3\", \"10.0.0.3\"))", "var_name": "MEMBER_3"}, {"original_string": "private final TitusRuntime titusRuntime = TitusRuntimes.internal(Duration.ofMillis(1));", "modifier": "private final", "type": "TitusRuntime", "declarator": "titusRuntime = TitusRuntimes.internal(Duration.ofMillis(1))", "var_name": "titusRuntime"}, {"original_string": "private final ClusterMembershipResolverConfiguration configuration = mock(ClusterMembershipResolverConfiguration.class);", "modifier": "private final", "type": "ClusterMembershipResolverConfiguration", "declarator": "configuration = mock(ClusterMembershipResolverConfiguration.class)", "var_name": "configuration"}, {"original_string": "private final TestableDirectClusterMemberResolver memberResolver1 = new TestableDirectClusterMemberResolver(MEMBER_1);", "modifier": "private final", "type": "TestableDirectClusterMemberResolver", "declarator": "memberResolver1 = new TestableDirectClusterMemberResolver(MEMBER_1)", "var_name": "memberResolver1"}, {"original_string": "private final TestableDirectClusterMemberResolver memberResolver2 = new TestableDirectClusterMemberResolver(MEMBER_2);", "modifier": "private final", "type": "TestableDirectClusterMemberResolver", "declarator": "memberResolver2 = new TestableDirectClusterMemberResolver(MEMBER_2)", "var_name": "memberResolver2"}, {"original_string": "private final TestableDirectClusterMemberResolver memberResolver3 = new TestableDirectClusterMemberResolver(MEMBER_3);", "modifier": "private final", "type": "TestableDirectClusterMemberResolver", "declarator": "memberResolver3 = new TestableDirectClusterMemberResolver(MEMBER_3)", "var_name": "memberResolver3"}, {"original_string": "private MultiNodeClusterMemberResolver resolver;", "modifier": "private", "type": "MultiNodeClusterMemberResolver", "declarator": "resolver", "var_name": "resolver"}, {"original_string": "private final ConcurrentMap<String, ClusterMemberAddress> seedAddresses = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<String, ClusterMemberAddress>", "declarator": "seedAddresses = new ConcurrentHashMap<>()", "var_name": "seedAddresses"}], "file": "titus-common-client/src/test/java/com/netflix/titus/client/clustermembership/resolver/MultiNodeClusterMemberResolverTest.java"}, "test_case": {"identifier": "testMemberRemoval", "parameters": "()", "modifiers": "@Test(timeout = 30_000) public", "return": "void", "body": "@Test(timeout = 30_000)\n    public void testMemberRemoval() {\n        Iterator<ClusterMembershipSnapshot> eventIterator = resolver.resolve().toIterable().iterator();\n        eventIterator.next();\n\n        memberResolver1.removeMembers(MEMBER_2.getCurrent().getMemberId());\n        memberResolver2.changeHealth(false);\n\n        ClusterMembershipSnapshot nextEvent = eventIterator.next();\n        assertThat(nextEvent.getMemberRevisions()).hasSize(1);\n    }", "signature": "void testMemberRemoval()", "full_signature": "@Test(timeout = 30_000) public void testMemberRemoval()", "class_method_signature": "MultiNodeClusterMemberResolverTest.testMemberRemoval()", "testcase": true, "constructor": false, "invocations": ["iterator", "toIterable", "resolve", "next", "removeMembers", "getMemberId", "getCurrent", "changeHealth", "next", "hasSize", "assertThat", "getMemberRevisions"]}, "focal_class": {"identifier": "MultiNodeClusterMemberResolver", "superclass": "", "interfaces": "implements ClusterMemberResolver", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(MultiNodeClusterMemberResolver.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(MultiNodeClusterMemberResolver.class)", "var_name": "logger"}, {"original_string": "private static final ScheduleDescriptor SCHEDULE_DESCRIPTOR = ScheduleDescriptor.newBuilder()\n            .withName(MultiNodeClusterMemberResolver.class.getSimpleName())\n            .withDescription(\"Cluster membership resolver aggregating data from all cluster members\")\n            .withInitialDelay(Duration.ZERO)\n            .withInterval(Duration.ofSeconds(1))\n            .withTimeout(Duration.ofSeconds(5))\n            .withRetryerSupplier(Retryers::never)\n            .withOnErrorHandler((action, error) -> {\n                logger.warn(\"Cannot update cluster membership data: {}\", error.getMessage());\n                logger.debug(error.getMessage(), error);\n            })\n            .build();", "modifier": "private static final", "type": "ScheduleDescriptor", "declarator": "SCHEDULE_DESCRIPTOR = ScheduleDescriptor.newBuilder()\n            .withName(MultiNodeClusterMemberResolver.class.getSimpleName())\n            .withDescription(\"Cluster membership resolver aggregating data from all cluster members\")\n            .withInitialDelay(Duration.ZERO)\n            .withInterval(Duration.ofSeconds(1))\n            .withTimeout(Duration.ofSeconds(5))\n            .withRetryerSupplier(Retryers::never)\n            .withOnErrorHandler((action, error) -> {\n                logger.warn(\"Cannot update cluster membership data: {}\", error.getMessage());\n                logger.debug(error.getMessage(), error);\n            })\n            .build()", "var_name": "SCHEDULE_DESCRIPTOR"}, {"original_string": "private final Supplier<Set<ClusterMemberAddress>> seedAddressesProvider;", "modifier": "private final", "type": "Supplier<Set<ClusterMemberAddress>>", "declarator": "seedAddressesProvider", "var_name": "seedAddressesProvider"}, {"original_string": "private final Function<ClusterMemberAddress, DirectClusterMemberResolver> directResolverFactory;", "modifier": "private final", "type": "Function<ClusterMemberAddress, DirectClusterMemberResolver>", "declarator": "directResolverFactory", "var_name": "directResolverFactory"}, {"original_string": "private final Function<ClusterMember, ClusterMemberAddress> addressSelector;", "modifier": "private final", "type": "Function<ClusterMember, ClusterMemberAddress>", "declarator": "addressSelector", "var_name": "addressSelector"}, {"original_string": "private final MultiNodeClusterMemberResolverMetrics metrics;", "modifier": "private final", "type": "MultiNodeClusterMemberResolverMetrics", "declarator": "metrics", "var_name": "metrics"}, {"original_string": "private final ConcurrentMap<String, DirectClusterMemberResolver> memberResolversByIpAddress = new ConcurrentHashMap<>();", "modifier": "private final", "type": "ConcurrentMap<String, DirectClusterMemberResolver>", "declarator": "memberResolversByIpAddress = new ConcurrentHashMap<>()", "var_name": "memberResolversByIpAddress"}, {"original_string": "private final ScheduleReference scheduleReference;", "modifier": "private final", "type": "ScheduleReference", "declarator": "scheduleReference", "var_name": "scheduleReference"}, {"original_string": "private volatile ClusterMembershipSnapshot lastReportedSnapshot;", "modifier": "private volatile", "type": "ClusterMembershipSnapshot", "declarator": "lastReportedSnapshot", "var_name": "lastReportedSnapshot"}, {"original_string": "private final ReplayProcessor<ClusterMembershipSnapshot> snapshotEventProcessor = ReplayProcessor.create(1);", "modifier": "private final", "type": "ReplayProcessor<ClusterMembershipSnapshot>", "declarator": "snapshotEventProcessor = ReplayProcessor.create(1)", "var_name": "snapshotEventProcessor"}, {"original_string": "private final Flux<ClusterMembershipSnapshot> snapshotEventObservable = snapshotEventProcessor\n            .distinctUntilChanged()\n            .onBackpressureError()\n            .compose(ReactorExt.badSubscriberHandler(logger));", "modifier": "private final", "type": "Flux<ClusterMembershipSnapshot>", "declarator": "snapshotEventObservable = snapshotEventProcessor\n            .distinctUntilChanged()\n            .onBackpressureError()\n            .compose(ReactorExt.badSubscriberHandler(logger))", "var_name": "snapshotEventObservable"}], "methods": [{"identifier": "MultiNodeClusterMemberResolver", "parameters": "(String serviceName,\n                                          ClusterMembershipResolverConfiguration configuration,\n                                          Supplier<Set<ClusterMemberAddress>> seedAddressesProvider,\n                                          Function<ClusterMemberAddress, DirectClusterMemberResolver> directResolverFactory,\n                                          Function<ClusterMember, ClusterMemberAddress> addressSelector,\n                                          TitusRuntime titusRuntime)", "modifiers": "public", "return": "", "signature": " MultiNodeClusterMemberResolver(String serviceName,\n                                          ClusterMembershipResolverConfiguration configuration,\n                                          Supplier<Set<ClusterMemberAddress>> seedAddressesProvider,\n                                          Function<ClusterMemberAddress, DirectClusterMemberResolver> directResolverFactory,\n                                          Function<ClusterMember, ClusterMemberAddress> addressSelector,\n                                          TitusRuntime titusRuntime)", "full_signature": "public  MultiNodeClusterMemberResolver(String serviceName,\n                                          ClusterMembershipResolverConfiguration configuration,\n                                          Supplier<Set<ClusterMemberAddress>> seedAddressesProvider,\n                                          Function<ClusterMemberAddress, DirectClusterMemberResolver> directResolverFactory,\n                                          Function<ClusterMember, ClusterMemberAddress> addressSelector,\n                                          TitusRuntime titusRuntime)", "class_method_signature": "MultiNodeClusterMemberResolver.MultiNodeClusterMemberResolver(String serviceName,\n                                          ClusterMembershipResolverConfiguration configuration,\n                                          Supplier<Set<ClusterMemberAddress>> seedAddressesProvider,\n                                          Function<ClusterMemberAddress, DirectClusterMemberResolver> directResolverFactory,\n                                          Function<ClusterMember, ClusterMemberAddress> addressSelector,\n                                          TitusRuntime titusRuntime)", "testcase": false, "constructor": true}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "MultiNodeClusterMemberResolver.close()", "testcase": false, "constructor": false}, {"identifier": "getSnapshot", "parameters": "()", "modifiers": "@Override public", "return": "ClusterMembershipSnapshot", "signature": "ClusterMembershipSnapshot getSnapshot()", "full_signature": "@Override public ClusterMembershipSnapshot getSnapshot()", "class_method_signature": "MultiNodeClusterMemberResolver.getSnapshot()", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "()", "modifiers": "@Override public", "return": "Flux<ClusterMembershipSnapshot>", "signature": "Flux<ClusterMembershipSnapshot> resolve()", "full_signature": "@Override public Flux<ClusterMembershipSnapshot> resolve()", "class_method_signature": "MultiNodeClusterMemberResolver.resolve()", "testcase": false, "constructor": false}, {"identifier": "findHealthyMembers", "parameters": "()", "modifiers": "private", "return": "List<DirectClusterMemberResolver>", "signature": "List<DirectClusterMemberResolver> findHealthyMembers()", "full_signature": "private List<DirectClusterMemberResolver> findHealthyMembers()", "class_method_signature": "MultiNodeClusterMemberResolver.findHealthyMembers()", "testcase": false, "constructor": false}, {"identifier": "findHealthySnapshots", "parameters": "()", "modifiers": "private", "return": "List<ClusterMembershipSnapshot>", "signature": "List<ClusterMembershipSnapshot> findHealthySnapshots()", "full_signature": "private List<ClusterMembershipSnapshot> findHealthySnapshots()", "class_method_signature": "MultiNodeClusterMemberResolver.findHealthySnapshots()", "testcase": false, "constructor": false}, {"identifier": "buildSnapshot", "parameters": "()", "modifiers": "private", "return": "ClusterMembershipSnapshot", "signature": "ClusterMembershipSnapshot buildSnapshot()", "full_signature": "private ClusterMembershipSnapshot buildSnapshot()", "class_method_signature": "MultiNodeClusterMemberResolver.buildSnapshot()", "testcase": false, "constructor": false}, {"identifier": "findBestMemberRevision", "parameters": "(List<ClusterMembershipRevision<ClusterMember>> singleMemberVersions)", "modifiers": "private", "return": "ClusterMembershipRevision<ClusterMember>", "signature": "ClusterMembershipRevision<ClusterMember> findBestMemberRevision(List<ClusterMembershipRevision<ClusterMember>> singleMemberVersions)", "full_signature": "private ClusterMembershipRevision<ClusterMember> findBestMemberRevision(List<ClusterMembershipRevision<ClusterMember>> singleMemberVersions)", "class_method_signature": "MultiNodeClusterMemberResolver.findBestMemberRevision(List<ClusterMembershipRevision<ClusterMember>> singleMemberVersions)", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void refresh()", "full_signature": "private void refresh()", "class_method_signature": "MultiNodeClusterMemberResolver.refresh()", "testcase": false, "constructor": false}, {"identifier": "connectNewMembers", "parameters": "(Map<String, ClusterMembershipRevision<ClusterMember>> resolvedMembersByIp, Set<String> toAdd)", "modifiers": "private", "return": "void", "signature": "void connectNewMembers(Map<String, ClusterMembershipRevision<ClusterMember>> resolvedMembersByIp, Set<String> toAdd)", "full_signature": "private void connectNewMembers(Map<String, ClusterMembershipRevision<ClusterMember>> resolvedMembersByIp, Set<String> toAdd)", "class_method_signature": "MultiNodeClusterMemberResolver.connectNewMembers(Map<String, ClusterMembershipRevision<ClusterMember>> resolvedMembersByIp, Set<String> toAdd)", "testcase": false, "constructor": false}, {"identifier": "disconnectTerminatedMembers", "parameters": "(Set<String> toRemove)", "modifiers": "private", "return": "void", "signature": "void disconnectTerminatedMembers(Set<String> toRemove)", "full_signature": "private void disconnectTerminatedMembers(Set<String> toRemove)", "class_method_signature": "MultiNodeClusterMemberResolver.disconnectTerminatedMembers(Set<String> toRemove)", "testcase": false, "constructor": false}, {"identifier": "addNewSeeds", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void addNewSeeds()", "full_signature": "private void addNewSeeds()", "class_method_signature": "MultiNodeClusterMemberResolver.addNewSeeds()", "testcase": false, "constructor": false}, {"identifier": "isSeedIp", "parameters": "(String ipAddress)", "modifiers": "private", "return": "boolean", "signature": "boolean isSeedIp(String ipAddress)", "full_signature": "private boolean isSeedIp(String ipAddress)", "class_method_signature": "MultiNodeClusterMemberResolver.isSeedIp(String ipAddress)", "testcase": false, "constructor": false}, {"identifier": "toResolvedMembersString", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String toResolvedMembersString()", "full_signature": "private String toResolvedMembersString()", "class_method_signature": "MultiNodeClusterMemberResolver.toResolvedMembersString()", "testcase": false, "constructor": false}, {"identifier": "report", "parameters": "(ClusterMembershipSnapshot newSnapshot)", "modifiers": "private", "return": "void", "signature": "void report(ClusterMembershipSnapshot newSnapshot)", "full_signature": "private void report(ClusterMembershipSnapshot newSnapshot)", "class_method_signature": "MultiNodeClusterMemberResolver.report(ClusterMembershipSnapshot newSnapshot)", "testcase": false, "constructor": false}], "file": "titus-common-client/src/main/java/com/netflix/titus/client/clustermembership/resolver/MultiNodeClusterMemberResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "()", "modifiers": "@Override public", "return": "Flux<ClusterMembershipSnapshot>", "body": "@Override\n    public Flux<ClusterMembershipSnapshot> resolve() {\n        return snapshotEventObservable;\n    }", "signature": "Flux<ClusterMembershipSnapshot> resolve()", "full_signature": "@Override public Flux<ClusterMembershipSnapshot> resolve()", "class_method_signature": "MultiNodeClusterMemberResolver.resolve()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}