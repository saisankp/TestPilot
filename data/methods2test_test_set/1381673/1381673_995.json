{"test_class": {"identifier": "ReteooRuleBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ReteooRuleBuilder builder;", "modifier": "private", "type": "ReteooRuleBuilder", "declarator": "builder", "var_name": "builder"}, {"original_string": "private KnowledgeBaseImpl rulebase;", "modifier": "private", "type": "KnowledgeBaseImpl", "declarator": "rulebase", "var_name": "rulebase"}], "file": "drools-core/src/test/java/org/drools/core/reteoo/builder/ReteooRuleBuilderTest.java"}, "test_case": {"identifier": "testAddRuleWithPatterns", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAddRuleWithPatterns() {\n        final RuleImpl rule = new RuleImpl( \"only patterns\" );\n        final Pattern c1 = new Pattern( 0,\n                                new ClassObjectType( String.class ) );\n        final Pattern c2 = new Pattern( 1,\n                                new ClassObjectType( String.class ) );\n        final Pattern c3 = new Pattern( 2,\n                                new ClassObjectType( String.class ) );\n\n        final GroupElement lhsroot = GroupElementFactory.newAndInstance();\n        lhsroot.addChild( c1 );\n        lhsroot.addChild( c2 );\n        lhsroot.addChild( c3 );\n\n        rule.setLhs( lhsroot );\n\n        final Consequence consequence = new Consequence() {\n            public void evaluate(KnowledgeHelper knowledgeHelper,\n                                 WorkingMemory workingMemory) throws Exception {\n                System.out.println( \"Consequence!\" );\n            }\n\n            public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n\n            }\n\n            public void writeExternal(ObjectOutput out) throws IOException {\n\n            }\n            \n            public String getName() {\n                return \"default\";\n            }\n        };\n\n        rule.setConsequence( consequence );\n\n        final List terminals = this.builder.addRule( rule,\n                                               this.rulebase );\n\n        assertEquals( \"Rule must have a single terminal node\",\n                             1,\n                             terminals.size() );\n\n        final RuleTerminalNode terminal = (RuleTerminalNode) terminals.get( 0 );\n\n    }", "signature": "void testAddRuleWithPatterns()", "full_signature": "@Test public void testAddRuleWithPatterns()", "class_method_signature": "ReteooRuleBuilderTest.testAddRuleWithPatterns()", "testcase": true, "constructor": false, "invocations": ["newAndInstance", "addChild", "addChild", "addChild", "setLhs", "println", "setConsequence", "addRule", "assertEquals", "size", "get"]}, "focal_class": {"identifier": "ReteooRuleBuilder", "superclass": "", "interfaces": "implements RuleBuilder", "fields": [{"original_string": "protected BuildUtils utils;", "modifier": "protected", "type": "BuildUtils", "declarator": "utils", "var_name": "utils"}], "methods": [{"identifier": "ReteooRuleBuilder", "parameters": "()", "modifiers": "public", "return": "", "signature": " ReteooRuleBuilder()", "full_signature": "public  ReteooRuleBuilder()", "class_method_signature": "ReteooRuleBuilder.ReteooRuleBuilder()", "testcase": false, "constructor": true}, {"identifier": "addRule", "parameters": "( final RuleImpl rule,\n                                       final InternalKnowledgeBase kBase )", "modifiers": "public", "return": "List<TerminalNode>", "signature": "List<TerminalNode> addRule( final RuleImpl rule,\n                                       final InternalKnowledgeBase kBase )", "full_signature": "public List<TerminalNode> addRule( final RuleImpl rule,\n                                       final InternalKnowledgeBase kBase )", "class_method_signature": "ReteooRuleBuilder.addRule( final RuleImpl rule,\n                                       final InternalKnowledgeBase kBase )", "testcase": false, "constructor": false}, {"identifier": "addSubRule", "parameters": "( final BuildContext context,\n                                     final GroupElement subrule,\n                                     final int subruleIndex,\n                                     final RuleImpl rule )", "modifiers": "private", "return": "TerminalNode", "signature": "TerminalNode addSubRule( final BuildContext context,\n                                     final GroupElement subrule,\n                                     final int subruleIndex,\n                                     final RuleImpl rule )", "full_signature": "private TerminalNode addSubRule( final BuildContext context,\n                                     final GroupElement subrule,\n                                     final int subruleIndex,\n                                     final RuleImpl rule )", "class_method_signature": "ReteooRuleBuilder.addSubRule( final BuildContext context,\n                                     final GroupElement subrule,\n                                     final int subruleIndex,\n                                     final RuleImpl rule )", "testcase": false, "constructor": false}, {"identifier": "setPathEndNodes", "parameters": "(BuildContext context)", "modifiers": "private", "return": "void", "signature": "void setPathEndNodes(BuildContext context)", "full_signature": "private void setPathEndNodes(BuildContext context)", "class_method_signature": "ReteooRuleBuilder.setPathEndNodes(BuildContext context)", "testcase": false, "constructor": false}, {"identifier": "addInitialFactPattern", "parameters": "( final GroupElement subrule )", "modifiers": "private", "return": "void", "signature": "void addInitialFactPattern( final GroupElement subrule )", "full_signature": "private void addInitialFactPattern( final GroupElement subrule )", "class_method_signature": "ReteooRuleBuilder.addInitialFactPattern( final GroupElement subrule )", "testcase": false, "constructor": false}, {"identifier": "addEntryPoint", "parameters": "( final String id,\n            final InternalKnowledgeBase kBase )", "modifiers": "public", "return": "void", "signature": "void addEntryPoint( final String id,\n            final InternalKnowledgeBase kBase )", "full_signature": "public void addEntryPoint( final String id,\n            final InternalKnowledgeBase kBase )", "class_method_signature": "ReteooRuleBuilder.addEntryPoint( final String id,\n            final InternalKnowledgeBase kBase )", "testcase": false, "constructor": false}, {"identifier": "addWindowNode", "parameters": "( WindowDeclaration window,\n                                     InternalKnowledgeBase kBase )", "modifiers": "public", "return": "WindowNode", "signature": "WindowNode addWindowNode( WindowDeclaration window,\n                                     InternalKnowledgeBase kBase )", "full_signature": "public WindowNode addWindowNode( WindowDeclaration window,\n                                     InternalKnowledgeBase kBase )", "class_method_signature": "ReteooRuleBuilder.addWindowNode( WindowDeclaration window,\n                                     InternalKnowledgeBase kBase )", "testcase": false, "constructor": false}], "file": "drools-core/src/main/java/org/drools/core/reteoo/builder/ReteooRuleBuilder.java"}, "focal_method": {"identifier": "addRule", "parameters": "( final RuleImpl rule,\n                                       final InternalKnowledgeBase kBase )", "modifiers": "public", "return": "List<TerminalNode>", "body": "public List<TerminalNode> addRule( final RuleImpl rule,\n                                       final InternalKnowledgeBase kBase ) throws InvalidPatternException {\n\n        // the list of terminal nodes\n        final List<TerminalNode> nodes = new ArrayList<TerminalNode>();\n\n        // transform rule and gets the array of subrules\n        final GroupElement[] subrules = rule.getTransformedLhs( kBase.getConfiguration().getComponentFactory().getLogicTransformerFactory().getLogicTransformer(),\n                                                                kBase.getGlobals() );\n\n        for (int i = 0; i < subrules.length; i++) {\n\n            // creates a clean build context for each subrule\n            final BuildContext context = new BuildContext( kBase );\n            context.setRule( rule );\n\n            // if running in STREAM mode, calculate temporal distance for events\n            if (EventProcessingOption.STREAM.equals( kBase.getConfiguration().getEventProcessingMode() )) {\n                TemporalDependencyMatrix temporal = this.utils.calculateTemporalDistance( subrules[i] );\n                context.setTemporalDistance( temporal );\n            }\n\n            if (kBase.getConfiguration().isSequential() ) {\n                context.setTupleMemoryEnabled( false );\n                context.setObjectTypeNodeMemoryEnabled( false );\n            } else {\n                context.setTupleMemoryEnabled( true );\n                context.setObjectTypeNodeMemoryEnabled( true );\n            }\n\n            // adds subrule\n            final TerminalNode node = this.addSubRule( context,\n                                                       subrules[i],\n                                                       i,\n                                                       rule );\n\n            // adds the terminal node to the list of terminal nodes\n            nodes.add( node );\n        }\n\n        return nodes;\n    }", "signature": "List<TerminalNode> addRule( final RuleImpl rule,\n                                       final InternalKnowledgeBase kBase )", "full_signature": "public List<TerminalNode> addRule( final RuleImpl rule,\n                                       final InternalKnowledgeBase kBase )", "class_method_signature": "ReteooRuleBuilder.addRule( final RuleImpl rule,\n                                       final InternalKnowledgeBase kBase )", "testcase": false, "constructor": false, "invocations": ["getTransformedLhs", "getLogicTransformer", "getLogicTransformerFactory", "getComponentFactory", "getConfiguration", "getGlobals", "setRule", "equals", "getEventProcessingMode", "getConfiguration", "calculateTemporalDistance", "setTemporalDistance", "isSequential", "getConfiguration", "setTupleMemoryEnabled", "setObjectTypeNodeMemoryEnabled", "setTupleMemoryEnabled", "setObjectTypeNodeMemoryEnabled", "addSubRule", "add"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}