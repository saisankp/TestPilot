{"test_class": {"identifier": "TableSchemaBuilderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String AVRO_UNSUPPORTED_NAME = \"9-`~!@#$%^&*()+=[]{}\\\\|;:\\\"'<>,.?/\";", "modifier": "private static final", "type": "String", "declarator": "AVRO_UNSUPPORTED_NAME = \"9-`~!@#$%^&*()+=[]{}\\\\|;:\\\"'<>,.?/\"", "var_name": "AVRO_UNSUPPORTED_NAME"}, {"original_string": "private static final String AVRO_UNSUPPORTED_NAME_CONVERTED = \"_9_______________________________\";", "modifier": "private static final", "type": "String", "declarator": "AVRO_UNSUPPORTED_NAME_CONVERTED = \"_9_______________________________\"", "var_name": "AVRO_UNSUPPORTED_NAME_CONVERTED"}, {"original_string": "private final String prefix = \"\";", "modifier": "private final", "type": "String", "declarator": "prefix = \"\"", "var_name": "prefix"}, {"original_string": "private final TableId id = new TableId(\"catalog\", \"schema\", \"table\");", "modifier": "private final", "type": "TableId", "declarator": "id = new TableId(\"catalog\", \"schema\", \"table\")", "var_name": "id"}, {"original_string": "private final Object[] data = new Object[]{ \"c1value\", 3.142d, java.sql.Date.valueOf(\"2001-10-31\"), 4, new byte[]{ 71, 117, 110, 110, 97, 114 }, null, \"c7value\",\n            \"c8value\", \"c9value\" };", "modifier": "private final", "type": "Object[]", "declarator": "data = new Object[]{ \"c1value\", 3.142d, java.sql.Date.valueOf(\"2001-10-31\"), 4, new byte[]{ 71, 117, 110, 110, 97, 114 }, null, \"c7value\",\n            \"c8value\", \"c9value\" }", "var_name": "data"}, {"original_string": "private final Object[] keyData = new Object[]{ \"c1value\", 3.142d };", "modifier": "private final", "type": "Object[]", "declarator": "keyData = new Object[]{ \"c1value\", 3.142d }", "var_name": "keyData"}, {"original_string": "private Table table;", "modifier": "private", "type": "Table", "declarator": "table", "var_name": "table"}, {"original_string": "private Column c1;", "modifier": "private", "type": "Column", "declarator": "c1", "var_name": "c1"}, {"original_string": "private Column c2;", "modifier": "private", "type": "Column", "declarator": "c2", "var_name": "c2"}, {"original_string": "private Column c3;", "modifier": "private", "type": "Column", "declarator": "c3", "var_name": "c3"}, {"original_string": "private Column c4;", "modifier": "private", "type": "Column", "declarator": "c4", "var_name": "c4"}, {"original_string": "private Column c5;", "modifier": "private", "type": "Column", "declarator": "c5", "var_name": "c5"}, {"original_string": "private Column c6;", "modifier": "private", "type": "Column", "declarator": "c6", "var_name": "c6"}, {"original_string": "private Column c7;", "modifier": "private", "type": "Column", "declarator": "c7", "var_name": "c7"}, {"original_string": "private Column c8;", "modifier": "private", "type": "Column", "declarator": "c8", "var_name": "c8"}, {"original_string": "private Column c9;", "modifier": "private", "type": "Column", "declarator": "c9", "var_name": "c9"}, {"original_string": "private TableSchema schema;", "modifier": "private", "type": "TableSchema", "declarator": "schema", "var_name": "schema"}, {"original_string": "private SchemaNameAdjuster adjuster;", "modifier": "private", "type": "SchemaNameAdjuster", "declarator": "adjuster", "var_name": "adjuster"}, {"original_string": "private final CustomConverterRegistry customConverterRegistry = new CustomConverterRegistry(null);", "modifier": "private final", "type": "CustomConverterRegistry", "declarator": "customConverterRegistry = new CustomConverterRegistry(null)", "var_name": "customConverterRegistry"}], "file": "debezium-core/src/test/java/io/debezium/relational/TableSchemaBuilderTest.java"}, "test_case": {"identifier": "shouldBuildCorrectSchemaNames", "parameters": "()", "modifiers": "@Test @FixFor(\"DBZ-1089\") public", "return": "void", "body": "@Test\n    @FixFor(\"DBZ-1089\")\n    public void shouldBuildCorrectSchemaNames() {\n        // table id with catalog and schema\n        schema = new TableSchemaBuilder(new JdbcValueConverters(), adjuster, customConverterRegistry, SchemaBuilder.struct().build(), false)\n                .create(prefix, \"sometopic\", table, null, null, null);\n        assertThat(schema).isNotNull();\n        assertThat(schema.keySchema().name()).isEqualTo(\"schema.table.Key\");\n        assertThat(schema.valueSchema().name()).isEqualTo(\"schema.table.Value\");\n\n        // only catalog\n        table = table.edit()\n                .tableId(new TableId(\"testDb\", null, \"testTable\"))\n                .create();\n\n        schema = new TableSchemaBuilder(new JdbcValueConverters(), adjuster, customConverterRegistry, SchemaBuilder.struct().build(), false)\n                .create(prefix, \"sometopic\", table, null, null, null);\n\n        assertThat(schema).isNotNull();\n        assertThat(schema.keySchema().name()).isEqualTo(\"testDb.testTable.Key\");\n        assertThat(schema.valueSchema().name()).isEqualTo(\"testDb.testTable.Value\");\n\n        // only schema\n        table = table.edit()\n                .tableId(new TableId(null, \"testSchema\", \"testTable\"))\n                .create();\n\n        schema = new TableSchemaBuilder(new JdbcValueConverters(), adjuster, customConverterRegistry, SchemaBuilder.struct().build(), false)\n                .create(prefix, \"sometopic\", table, null, null, null);\n\n        assertThat(schema).isNotNull();\n        assertThat(schema.keySchema().name()).isEqualTo(\"testSchema.testTable.Key\");\n        assertThat(schema.valueSchema().name()).isEqualTo(\"testSchema.testTable.Value\");\n\n        // neither catalog nor schema\n        table = table.edit()\n                .tableId(new TableId(null, null, \"testTable\"))\n                .create();\n\n        schema = new TableSchemaBuilder(new JdbcValueConverters(), adjuster, customConverterRegistry, SchemaBuilder.struct().build(), false)\n                .create(prefix, \"sometopic\", table, null, null, null);\n\n        assertThat(schema).isNotNull();\n        assertThat(schema.keySchema().name()).isEqualTo(\"testTable.Key\");\n        assertThat(schema.valueSchema().name()).isEqualTo(\"testTable.Value\");\n    }", "signature": "void shouldBuildCorrectSchemaNames()", "full_signature": "@Test @FixFor(\"DBZ-1089\") public void shouldBuildCorrectSchemaNames()", "class_method_signature": "TableSchemaBuilderTest.shouldBuildCorrectSchemaNames()", "testcase": true, "constructor": false, "invocations": ["create", "build", "struct", "isNotNull", "assertThat", "isEqualTo", "assertThat", "name", "keySchema", "isEqualTo", "assertThat", "name", "valueSchema", "create", "tableId", "edit", "create", "build", "struct", "isNotNull", "assertThat", "isEqualTo", "assertThat", "name", "keySchema", "isEqualTo", "assertThat", "name", "valueSchema", "create", "tableId", "edit", "create", "build", "struct", "isNotNull", "assertThat", "isEqualTo", "assertThat", "name", "keySchema", "isEqualTo", "assertThat", "name", "valueSchema", "create", "tableId", "edit", "create", "build", "struct", "isNotNull", "assertThat", "isEqualTo", "assertThat", "name", "keySchema", "isEqualTo", "assertThat", "name", "valueSchema"]}, "focal_class": {"identifier": "TableSchemaBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(TableSchemaBuilder.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(TableSchemaBuilder.class)", "var_name": "LOGGER"}, {"original_string": "private final SchemaNameAdjuster schemaNameAdjuster;", "modifier": "private final", "type": "SchemaNameAdjuster", "declarator": "schemaNameAdjuster", "var_name": "schemaNameAdjuster"}, {"original_string": "private final ValueConverterProvider valueConverterProvider;", "modifier": "private final", "type": "ValueConverterProvider", "declarator": "valueConverterProvider", "var_name": "valueConverterProvider"}, {"original_string": "private final Schema sourceInfoSchema;", "modifier": "private final", "type": "Schema", "declarator": "sourceInfoSchema", "var_name": "sourceInfoSchema"}, {"original_string": "private final FieldNamer<Column> fieldNamer;", "modifier": "private final", "type": "FieldNamer<Column>", "declarator": "fieldNamer", "var_name": "fieldNamer"}, {"original_string": "private final CustomConverterRegistry customConverterRegistry;", "modifier": "private final", "type": "CustomConverterRegistry", "declarator": "customConverterRegistry", "var_name": "customConverterRegistry"}], "methods": [{"identifier": "TableSchemaBuilder", "parameters": "(ValueConverterProvider valueConverterProvider, SchemaNameAdjuster schemaNameAdjuster, CustomConverterRegistry customConverterRegistry,\n                              Schema sourceInfoSchema, boolean sanitizeFieldNames)", "modifiers": "public", "return": "", "signature": " TableSchemaBuilder(ValueConverterProvider valueConverterProvider, SchemaNameAdjuster schemaNameAdjuster, CustomConverterRegistry customConverterRegistry,\n                              Schema sourceInfoSchema, boolean sanitizeFieldNames)", "full_signature": "public  TableSchemaBuilder(ValueConverterProvider valueConverterProvider, SchemaNameAdjuster schemaNameAdjuster, CustomConverterRegistry customConverterRegistry,\n                              Schema sourceInfoSchema, boolean sanitizeFieldNames)", "class_method_signature": "TableSchemaBuilder.TableSchemaBuilder(ValueConverterProvider valueConverterProvider, SchemaNameAdjuster schemaNameAdjuster, CustomConverterRegistry customConverterRegistry,\n                              Schema sourceInfoSchema, boolean sanitizeFieldNames)", "testcase": false, "constructor": true}, {"identifier": "create", "parameters": "(String schemaPrefix, String envelopSchemaName, Table table, ColumnNameFilter filter, ColumnMappers mappers, KeyMapper keysMapper)", "modifiers": "public", "return": "TableSchema", "signature": "TableSchema create(String schemaPrefix, String envelopSchemaName, Table table, ColumnNameFilter filter, ColumnMappers mappers, KeyMapper keysMapper)", "full_signature": "public TableSchema create(String schemaPrefix, String envelopSchemaName, Table table, ColumnNameFilter filter, ColumnMappers mappers, KeyMapper keysMapper)", "class_method_signature": "TableSchemaBuilder.create(String schemaPrefix, String envelopSchemaName, Table table, ColumnNameFilter filter, ColumnMappers mappers, KeyMapper keysMapper)", "testcase": false, "constructor": false}, {"identifier": "tableSchemaName", "parameters": "(TableId tableId)", "modifiers": "private", "return": "String", "signature": "String tableSchemaName(TableId tableId)", "full_signature": "private String tableSchemaName(TableId tableId)", "class_method_signature": "TableSchemaBuilder.tableSchemaName(TableId tableId)", "testcase": false, "constructor": false}, {"identifier": "createKeyGenerator", "parameters": "(Schema schema, TableId columnSetName, List<Column> columns)", "modifiers": "protected", "return": "StructGenerator", "signature": "StructGenerator createKeyGenerator(Schema schema, TableId columnSetName, List<Column> columns)", "full_signature": "protected StructGenerator createKeyGenerator(Schema schema, TableId columnSetName, List<Column> columns)", "class_method_signature": "TableSchemaBuilder.createKeyGenerator(Schema schema, TableId columnSetName, List<Column> columns)", "testcase": false, "constructor": false}, {"identifier": "validateIncomingRowToInternalMetadata", "parameters": "(int[] recordIndexes, Field[] fields, ValueConverter[] converters,\n                                                       Object[] row, int position)", "modifiers": "private", "return": "void", "signature": "void validateIncomingRowToInternalMetadata(int[] recordIndexes, Field[] fields, ValueConverter[] converters,\n                                                       Object[] row, int position)", "full_signature": "private void validateIncomingRowToInternalMetadata(int[] recordIndexes, Field[] fields, ValueConverter[] converters,\n                                                       Object[] row, int position)", "class_method_signature": "TableSchemaBuilder.validateIncomingRowToInternalMetadata(int[] recordIndexes, Field[] fields, ValueConverter[] converters,\n                                                       Object[] row, int position)", "testcase": false, "constructor": false}, {"identifier": "createValueGenerator", "parameters": "(Schema schema, TableId tableId, List<Column> columns,\n                                                   ColumnNameFilter filter, ColumnMappers mappers)", "modifiers": "protected", "return": "StructGenerator", "signature": "StructGenerator createValueGenerator(Schema schema, TableId tableId, List<Column> columns,\n                                                   ColumnNameFilter filter, ColumnMappers mappers)", "full_signature": "protected StructGenerator createValueGenerator(Schema schema, TableId tableId, List<Column> columns,\n                                                   ColumnNameFilter filter, ColumnMappers mappers)", "class_method_signature": "TableSchemaBuilder.createValueGenerator(Schema schema, TableId tableId, List<Column> columns,\n                                                   ColumnNameFilter filter, ColumnMappers mappers)", "testcase": false, "constructor": false}, {"identifier": "indexesForColumns", "parameters": "(List<Column> columns)", "modifiers": "protected", "return": "int[]", "signature": "int[] indexesForColumns(List<Column> columns)", "full_signature": "protected int[] indexesForColumns(List<Column> columns)", "class_method_signature": "TableSchemaBuilder.indexesForColumns(List<Column> columns)", "testcase": false, "constructor": false}, {"identifier": "fieldsForColumns", "parameters": "(Schema schema, List<Column> columns)", "modifiers": "protected", "return": "Field[]", "signature": "Field[] fieldsForColumns(Schema schema, List<Column> columns)", "full_signature": "protected Field[] fieldsForColumns(Schema schema, List<Column> columns)", "class_method_signature": "TableSchemaBuilder.fieldsForColumns(Schema schema, List<Column> columns)", "testcase": false, "constructor": false}, {"identifier": "convertersForColumns", "parameters": "(Schema schema, TableId tableId, List<Column> columns, ColumnMappers mappers)", "modifiers": "protected", "return": "ValueConverter[]", "signature": "ValueConverter[] convertersForColumns(Schema schema, TableId tableId, List<Column> columns, ColumnMappers mappers)", "full_signature": "protected ValueConverter[] convertersForColumns(Schema schema, TableId tableId, List<Column> columns, ColumnMappers mappers)", "class_method_signature": "TableSchemaBuilder.convertersForColumns(Schema schema, TableId tableId, List<Column> columns, ColumnMappers mappers)", "testcase": false, "constructor": false}, {"identifier": "wrapInMappingConverterIfNeeded", "parameters": "(ColumnMappers mappers, TableId tableId, Column column, ValueConverter converter)", "modifiers": "private", "return": "ValueConverter", "signature": "ValueConverter wrapInMappingConverterIfNeeded(ColumnMappers mappers, TableId tableId, Column column, ValueConverter converter)", "full_signature": "private ValueConverter wrapInMappingConverterIfNeeded(ColumnMappers mappers, TableId tableId, Column column, ValueConverter converter)", "class_method_signature": "TableSchemaBuilder.wrapInMappingConverterIfNeeded(ColumnMappers mappers, TableId tableId, Column column, ValueConverter converter)", "testcase": false, "constructor": false}, {"identifier": "addField", "parameters": "(SchemaBuilder builder, Table table, Column column, ColumnMapper mapper)", "modifiers": "protected", "return": "void", "signature": "void addField(SchemaBuilder builder, Table table, Column column, ColumnMapper mapper)", "full_signature": "protected void addField(SchemaBuilder builder, Table table, Column column, ColumnMapper mapper)", "class_method_signature": "TableSchemaBuilder.addField(SchemaBuilder builder, Table table, Column column, ColumnMapper mapper)", "testcase": false, "constructor": false}, {"identifier": "createValueConverterFor", "parameters": "(TableId tableId, Column column, Field fieldDefn)", "modifiers": "protected", "return": "ValueConverter", "signature": "ValueConverter createValueConverterFor(TableId tableId, Column column, Field fieldDefn)", "full_signature": "protected ValueConverter createValueConverterFor(TableId tableId, Column column, Field fieldDefn)", "class_method_signature": "TableSchemaBuilder.createValueConverterFor(TableId tableId, Column column, Field fieldDefn)", "testcase": false, "constructor": false}], "file": "debezium-core/src/main/java/io/debezium/relational/TableSchemaBuilder.java"}, "focal_method": {"identifier": "create", "parameters": "(String schemaPrefix, String envelopSchemaName, Table table, ColumnNameFilter filter, ColumnMappers mappers, KeyMapper keysMapper)", "modifiers": "public", "return": "TableSchema", "body": "public TableSchema create(String schemaPrefix, String envelopSchemaName, Table table, ColumnNameFilter filter, ColumnMappers mappers, KeyMapper keysMapper) {\n        if (schemaPrefix == null) {\n            schemaPrefix = \"\";\n        }\n\n        // Build the schemas ...\n        final TableId tableId = table.id();\n        final String tableIdStr = tableSchemaName(tableId);\n        final String schemaNamePrefix = schemaPrefix + tableIdStr;\n        LOGGER.debug(\"Mapping table '{}' to schemas under '{}'\", tableId, schemaNamePrefix);\n        SchemaBuilder valSchemaBuilder = SchemaBuilder.struct().name(schemaNameAdjuster.adjust(schemaNamePrefix + \".Value\"));\n        SchemaBuilder keySchemaBuilder = SchemaBuilder.struct().name(schemaNameAdjuster.adjust(schemaNamePrefix + \".Key\"));\n        AtomicBoolean hasPrimaryKey = new AtomicBoolean(false);\n\n        Key tableKey = new Key.Builder(table).customKeyMapper(keysMapper).build();\n        tableKey.keyColumns().forEach(column -> {\n            addField(keySchemaBuilder, table, column, null);\n            hasPrimaryKey.set(true);\n        });\n\n        table.columns()\n                .stream()\n                .filter(column -> filter == null || filter.matches(tableId.catalog(), tableId.schema(), tableId.table(), column.name()))\n                .forEach(column -> {\n                    ColumnMapper mapper = mappers == null ? null : mappers.mapperFor(tableId, column);\n                    addField(valSchemaBuilder, table, column, mapper);\n                });\n\n        Schema valSchema = valSchemaBuilder.optional().build();\n        Schema keySchema = hasPrimaryKey.get() ? keySchemaBuilder.build() : null;\n\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"Mapped primary key for table '{}' to schema: {}\", tableId, SchemaUtil.asDetailedString(keySchema));\n            LOGGER.debug(\"Mapped columns for table '{}' to schema: {}\", tableId, SchemaUtil.asDetailedString(valSchema));\n        }\n\n        Envelope envelope = Envelope.defineSchema()\n                .withName(schemaNameAdjuster.adjust(envelopSchemaName))\n                .withRecord(valSchema)\n                .withSource(sourceInfoSchema)\n                .build();\n\n        // Create the generators ...\n        StructGenerator keyGenerator = createKeyGenerator(keySchema, tableId, tableKey.keyColumns());\n        StructGenerator valueGenerator = createValueGenerator(valSchema, tableId, table.columns(), filter, mappers);\n\n        // And the table schema ...\n        return new TableSchema(tableId, keySchema, keyGenerator, envelope, valSchema, valueGenerator);\n    }", "signature": "TableSchema create(String schemaPrefix, String envelopSchemaName, Table table, ColumnNameFilter filter, ColumnMappers mappers, KeyMapper keysMapper)", "full_signature": "public TableSchema create(String schemaPrefix, String envelopSchemaName, Table table, ColumnNameFilter filter, ColumnMappers mappers, KeyMapper keysMapper)", "class_method_signature": "TableSchemaBuilder.create(String schemaPrefix, String envelopSchemaName, Table table, ColumnNameFilter filter, ColumnMappers mappers, KeyMapper keysMapper)", "testcase": false, "constructor": false, "invocations": ["id", "tableSchemaName", "debug", "name", "struct", "adjust", "name", "struct", "adjust", "build", "customKeyMapper", "forEach", "keyColumns", "addField", "set", "forEach", "filter", "stream", "columns", "matches", "catalog", "schema", "table", "name", "mapperFor", "addField", "build", "optional", "get", "build", "isDebugEnabled", "debug", "asDetailedString", "debug", "asDetailedString", "build", "withSource", "withRecord", "withName", "defineSchema", "adjust", "createKeyGenerator", "keyColumns", "createValueGenerator", "columns"]}, "repository": {"repo_id": 50205233, "url": "https://github.com/debezium/debezium", "stars": 2686, "created": "1/22/2016 8:17:05 PM +00:00", "updates": "2020-01-27T20:48:54+00:00", "fork": "False", "license": "licensed"}}