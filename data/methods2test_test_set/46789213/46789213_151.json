{"test_class": {"identifier": "TestByteAndBitConverter", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/dk/alexandra/fresco/framework/util/TestByteAndBitConverter.java"}, "test_case": {"identifier": "toByteArrayLong", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void toByteArrayLong() {\n    Assert\n        .assertArrayEquals(new byte[8], ByteAndBitConverter.toByteArray(Integer.toUnsignedLong(0)));\n    Assert.assertArrayEquals(\n        new byte[]{0, 0, 0, 0, 0, 0, 0, 1},\n        ByteAndBitConverter.toByteArray(Integer.toUnsignedLong(1)));\n    Assert.assertArrayEquals(\n        new byte[]{0, 0, 0, 0, 0, 0, 0, 42},\n        ByteAndBitConverter.toByteArray(Integer.toUnsignedLong(42)));\n    Assert.assertArrayEquals(\n        new byte[]{0, 0, 0, 0, 1, 0, 0, 0},\n        ByteAndBitConverter.toByteArray(Integer.toUnsignedLong(1 << 24)));\n    Assert.assertArrayEquals(\n        new byte[]{0, 0, 0, 0, 1, 0, 42, 0},\n        ByteAndBitConverter.toByteArray(Integer.toUnsignedLong((1 << 24) + (42 << 8))));\n    Assert.assertArrayEquals(\n        new byte[]{-1, -1, -1, -1, -1, -1, -1, -1},\n        ByteAndBitConverter.toByteArray(0xffffffffffffffffL));\n  }", "signature": "void toByteArrayLong()", "full_signature": "@Test public void toByteArrayLong()", "class_method_signature": "TestByteAndBitConverter.toByteArrayLong()", "testcase": true, "constructor": false, "invocations": ["assertArrayEquals", "toByteArray", "toUnsignedLong", "assertArrayEquals", "toByteArray", "toUnsignedLong", "assertArrayEquals", "toByteArray", "toUnsignedLong", "assertArrayEquals", "toByteArray", "toUnsignedLong", "assertArrayEquals", "toByteArray", "toUnsignedLong", "assertArrayEquals", "toByteArray"]}, "focal_class": {"identifier": "ByteAndBitConverter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ByteAndBitConverter", "parameters": "()", "modifiers": "private", "return": "", "signature": " ByteAndBitConverter()", "full_signature": "private  ByteAndBitConverter()", "class_method_signature": "ByteAndBitConverter.ByteAndBitConverter()", "testcase": false, "constructor": true}, {"identifier": "toByteArray", "parameters": "(long value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(long value)", "full_signature": "public static byte[] toByteArray(long value)", "class_method_signature": "ByteAndBitConverter.toByteArray(long value)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(int value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(int value)", "full_signature": "public static byte[] toByteArray(int value)", "class_method_signature": "ByteAndBitConverter.toByteArray(int value)", "testcase": false, "constructor": false}, {"identifier": "intToBitSet", "parameters": "(int i)", "modifiers": "public static", "return": "BitSet", "signature": "BitSet intToBitSet(int i)", "full_signature": "public static BitSet intToBitSet(int i)", "class_method_signature": "ByteAndBitConverter.intToBitSet(int i)", "testcase": false, "constructor": false}, {"identifier": "toBoolean", "parameters": "(String hex)", "modifiers": "public static", "return": "Boolean[]", "signature": "Boolean[] toBoolean(String hex)", "full_signature": "public static Boolean[] toBoolean(String hex)", "class_method_signature": "ByteAndBitConverter.toBoolean(String hex)", "testcase": false, "constructor": false}, {"identifier": "toHex", "parameters": "(boolean[] bits)", "modifiers": "public static", "return": "String", "signature": "String toHex(boolean[] bits)", "full_signature": "public static String toHex(boolean[] bits)", "class_method_signature": "ByteAndBitConverter.toHex(boolean[] bits)", "testcase": false, "constructor": false}, {"identifier": "toHex", "parameters": "(List<Boolean> bits)", "modifiers": "public static", "return": "String", "signature": "String toHex(List<Boolean> bits)", "full_signature": "public static String toHex(List<Boolean> bits)", "class_method_signature": "ByteAndBitConverter.toHex(List<Boolean> bits)", "testcase": false, "constructor": false}, {"identifier": "convertArray", "parameters": "(Boolean[] in)", "modifiers": "private static", "return": "boolean[]", "signature": "boolean[] convertArray(Boolean[] in)", "full_signature": "private static boolean[] convertArray(Boolean[] in)", "class_method_signature": "ByteAndBitConverter.convertArray(Boolean[] in)", "testcase": false, "constructor": false}], "file": "core/src/main/java/dk/alexandra/fresco/framework/util/ByteAndBitConverter.java"}, "focal_method": {"identifier": "toByteArray", "parameters": "(long value)", "modifiers": "public static", "return": "byte[]", "body": "public static byte[] toByteArray(long value) {\n    byte[] bytes = new byte[8];\n    for (int i = 7; i >= 0; i--) {\n      bytes[i] = (byte) (value & 0xFF);\n      value >>= 8;\n    }\n    return bytes;\n  }", "signature": "byte[] toByteArray(long value)", "full_signature": "public static byte[] toByteArray(long value)", "class_method_signature": "ByteAndBitConverter.toByteArray(long value)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}