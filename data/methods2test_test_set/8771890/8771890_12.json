{"test_class": {"identifier": "PBKDF2PasswordEncryptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private PasswordEncryptor sut;", "modifier": "private", "type": "PasswordEncryptor", "declarator": "sut", "var_name": "sut"}], "file": "examples/nablarch/src/test/java/com/nablarch/example/app/web/common/authentication/encrypt/PBKDF2PasswordEncryptorTest.java"}, "test_case": {"identifier": "testEncrypt", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEncrypt() {\n        assertThat(\"\u540c\u3058\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u6697\u53f7\u5316\u3059\u308b\u3068\u3001\u540c\u3058\u6587\u5b57\u5217\u3068\u306a\u308b\u3053\u3068\u3002\", sut.encrypt(\"salt\", \"password\"), is(sut.encrypt(\"salt\", \"password\")));\n        assertThat(\"\u7570\u306a\u308b\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u6697\u53f7\u5316\u3059\u308b\u3068\u3001\u7570\u306a\u308b\u6587\u5b57\u5217\u3068\u306a\u308b\u3053\u3068\u3002\", sut.encrypt(\"salt\", \"one\"), is(not(sut.encrypt(\"salt\", \"another\"))));\n        assertThat(\"\u540c\u3058\u30d1\u30b9\u30ef\u30fc\u30c9\u3067\u3082\u3001\u30bd\u30eb\u30c8\u304c\u7570\u306a\u308b\u3068\u3001\u7570\u306a\u308b\u6587\u5b57\u5217\u3068\u306a\u308b\u3053\u3068\u3002\", sut.encrypt(\"one\", \"password\"), is(not(sut.encrypt(\"another\", \"password\"))));\n\n        PBKDF2PasswordEncryptor itr = createEncryptor();\n        itr.setIterationCount(1);\n        assertThat(\"\u8a2d\u5b9a\u3057\u305fiterationCount\u3067\u30b9\u30c8\u30ec\u30c3\u30c1\u30f3\u30b0\u3055\u308c\u308b\u3053\u3068\u3002\", itr.encrypt(\"salt\", \"password\"), is(not(sut.encrypt(\"salt\", \"password\"))));\n\n        PBKDF2PasswordEncryptor len = createEncryptor();\n        len.setKeyLength(160);\n        // 160bit\u3092Base64\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u3068\u300128byte\u306b\u306a\u308b\u3002\n        // 160bit -> 6bit\u305a\u3064block\u5316\u3055\u308c\u306627block -> 1block\u304c8bit\u306b\u5909\u63db\u3055\u308c\u306627byte -> 4\u306e\u500d\u6570\u307e\u3067\"=\"\u3067fill\u3055\u308c\u306628byte\n        assertThat(\"\u8a2d\u5b9a\u3057\u305fkeyLength\u306e\u9577\u3055\u306e\u6697\u53f7\u5316\u3055\u308c\u305f\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u751f\u6210\u3055\u308c\u308b\u3053\u3068\", len.encrypt(\"salt\", \"password\").length(), is(28));\n\n        PBKDF2PasswordEncryptor fix = createEncryptor();\n        fix.setFixedSalt(\"someOtherFixedSaltString\");\n        assertThat(\"\u8a2d\u5b9a\u3057\u305ffixedSalt\u3092\u4f7f\u7528\u3057\u3066\u30bd\u30eb\u30c8\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3002\", fix.encrypt(\"salt\", \"password\"), is(not(sut.encrypt(\"salt\", \"password\"))));\n    }", "signature": "void testEncrypt()", "full_signature": "@Test public void testEncrypt()", "class_method_signature": "PBKDF2PasswordEncryptorTest.testEncrypt()", "testcase": true, "constructor": false, "invocations": ["assertThat", "\"passwo", "", "", "assertThat", "her\")))", "", "", "", "assertThat", "sword\")", "", "", "", "createEncryptor", "setIterationCount", "assertThat", "sut.enc", "\")", "));", "", "createEncryptor", "setKeyLength", "assertThat", "", "", "", "createEncryptor", "setFixedSalt", "assertThat", "t(\"salt", "", "", ""]}, "focal_class": {"identifier": "PBKDF2PasswordEncryptor", "superclass": "", "interfaces": "implements PasswordEncryptor", "fields": [{"original_string": "private static final String CRYPT_ALGORITHM = \"PBKDF2WithHmacSha1\";", "modifier": "private static final", "type": "String", "declarator": "CRYPT_ALGORITHM = \"PBKDF2WithHmacSha1\"", "var_name": "CRYPT_ALGORITHM"}, {"original_string": "private int iterationCount = 3966;", "modifier": "private", "type": "int", "declarator": "iterationCount = 3966", "var_name": "iterationCount"}, {"original_string": "private int keyLength = 256;", "modifier": "private", "type": "int", "declarator": "keyLength = 256", "var_name": "keyLength"}, {"original_string": "private String fixedSalt;", "modifier": "private", "type": "String", "declarator": "fixedSalt", "var_name": "fixedSalt"}, {"original_string": "private static final ThreadLocal<SecretKeyFactory> FACTORY = new ThreadLocal<SecretKeyFactory>() {\n        @Override\n        protected SecretKeyFactory initialValue() {\n            try {\n                return SecretKeyFactory.getInstance(CRYPT_ALGORITHM);\n            } catch (NoSuchAlgorithmException e) {\n                // Oracle JRE \u306a\u3069\u3001PBKDF2WithHmacSha1\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308bJRE\u3092\u5229\u7528\u3059\u308b\u5834\u5408\u306b\u306f\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5b58\u5728\u3059\u308b\u305f\u3081\u3001\u3053\u306e\u4f8b\u5916\u306f\u767a\u751f\u3057\u5f97\u306a\u3044\u3002\n                throw new RuntimeException(\"Initialization Failed. Can't get instance of SecretKeyFactory. \"\n                        + \"Algorithm name is '\" + CRYPT_ALGORITHM + \"'.\", e);\n            }\n        }\n    };", "modifier": "private static final", "type": "ThreadLocal<SecretKeyFactory>", "declarator": "FACTORY = new ThreadLocal<SecretKeyFactory>() {\n        @Override\n        protected SecretKeyFactory initialValue() {\n            try {\n                return SecretKeyFactory.getInstance(CRYPT_ALGORITHM);\n            } catch (NoSuchAlgorithmException e) {\n                // Oracle JRE \u306a\u3069\u3001PBKDF2WithHmacSha1\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308bJRE\u3092\u5229\u7528\u3059\u308b\u5834\u5408\u306b\u306f\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5b58\u5728\u3059\u308b\u305f\u3081\u3001\u3053\u306e\u4f8b\u5916\u306f\u767a\u751f\u3057\u5f97\u306a\u3044\u3002\n                throw new RuntimeException(\"Initialization Failed. Can't get instance of SecretKeyFactory. \"\n                        + \"Algorithm name is '\" + CRYPT_ALGORITHM + \"'.\", e);\n            }\n        }\n    }", "var_name": "FACTORY"}], "methods": [{"identifier": "encrypt", "parameters": "(String saltSeed, String password)", "modifiers": "@Override public", "return": "String", "signature": "String encrypt(String saltSeed, String password)", "full_signature": "@Override public String encrypt(String saltSeed, String password)", "class_method_signature": "PBKDF2PasswordEncryptor.encrypt(String saltSeed, String password)", "testcase": false, "constructor": false}, {"identifier": "isSuccessEncryption", "parameters": "(byte[] bytes)", "modifiers": "private", "return": "boolean", "signature": "boolean isSuccessEncryption(byte[] bytes)", "full_signature": "private boolean isSuccessEncryption(byte[] bytes)", "class_method_signature": "PBKDF2PasswordEncryptor.isSuccessEncryption(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "getSalt", "parameters": "(String saltSeed)", "modifiers": "private", "return": "byte[]", "signature": "byte[] getSalt(String saltSeed)", "full_signature": "private byte[] getSalt(String saltSeed)", "class_method_signature": "PBKDF2PasswordEncryptor.getSalt(String saltSeed)", "testcase": false, "constructor": false}, {"identifier": "getIterationCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getIterationCount()", "full_signature": "public int getIterationCount()", "class_method_signature": "PBKDF2PasswordEncryptor.getIterationCount()", "testcase": false, "constructor": false}, {"identifier": "setIterationCount", "parameters": "(int iterationCount)", "modifiers": "public", "return": "void", "signature": "void setIterationCount(int iterationCount)", "full_signature": "public void setIterationCount(int iterationCount)", "class_method_signature": "PBKDF2PasswordEncryptor.setIterationCount(int iterationCount)", "testcase": false, "constructor": false}, {"identifier": "getKeyLength", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getKeyLength()", "full_signature": "public int getKeyLength()", "class_method_signature": "PBKDF2PasswordEncryptor.getKeyLength()", "testcase": false, "constructor": false}, {"identifier": "setKeyLength", "parameters": "(int keyLength)", "modifiers": "public", "return": "void", "signature": "void setKeyLength(int keyLength)", "full_signature": "public void setKeyLength(int keyLength)", "class_method_signature": "PBKDF2PasswordEncryptor.setKeyLength(int keyLength)", "testcase": false, "constructor": false}, {"identifier": "getFixedSalt", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFixedSalt()", "full_signature": "public String getFixedSalt()", "class_method_signature": "PBKDF2PasswordEncryptor.getFixedSalt()", "testcase": false, "constructor": false}, {"identifier": "setFixedSalt", "parameters": "(String fixedSalt)", "modifiers": "public", "return": "void", "signature": "void setFixedSalt(String fixedSalt)", "full_signature": "public void setFixedSalt(String fixedSalt)", "class_method_signature": "PBKDF2PasswordEncryptor.setFixedSalt(String fixedSalt)", "testcase": false, "constructor": false}], "file": "examples/nablarch/src/main/java/com/nablarch/example/app/web/common/authentication/encrypt/PBKDF2PasswordEncryptor.java"}, "focal_method": {"identifier": "encrypt", "parameters": "(String saltSeed, String password)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String encrypt(String saltSeed, String password) throws IllegalStateException {\n        if (saltSeed == null || password == null) {\n            throw new IllegalArgumentException(\"saltSeed and password must not be null.\");\n        }\n        if (saltSeed.isEmpty() || password.isEmpty()) {\n            return \"\";\n        }\n\n        KeySpec spec = new PBEKeySpec(password.toCharArray(), getSalt(saltSeed), getIterationCount(), getKeyLength());\n        byte[] encryptPassword;\n        try {\n            do {\n                encryptPassword = FACTORY.get().generateSecret(spec).getEncoded();\n            } while (!isSuccessEncryption(encryptPassword));\n        } catch (InvalidKeySpecException e) {\n            // \u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u7a7a\u306e\u5834\u5408\u306b\u767a\u751f\u3059\u308b\u304c\u3001\u4e8b\u524d\u306b\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u308b\u305f\u3081\u3053\u306e\u4f8b\u5916\u306f\u767a\u751f\u3057\u306a\u3044\u3002\n            throw new RuntimeException(e);\n        }\n        return Base64Util.encode(encryptPassword);\n    }", "signature": "String encrypt(String saltSeed, String password)", "full_signature": "@Override public String encrypt(String saltSeed, String password)", "class_method_signature": "PBKDF2PasswordEncryptor.encrypt(String saltSeed, String password)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "isEmpty", "toCharArray", "getSalt", "getIterationCount", "getKeyLength", "getEncoded", "generateSecret", "get", "isSuccessEncryption", "encode"]}, "repository": {"repo_id": 8771890, "url": "https://github.com/kawasima/waitt", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 15, "size": 1108, "license": "licensed"}}