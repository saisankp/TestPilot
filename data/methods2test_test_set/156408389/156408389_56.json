{"test_class": {"identifier": "FederationServerTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "private final String successResponse =\n            \"{\\\"stellar_address\\\":\\\"bob*stellar.org\\\",\\\"account_id\\\":\\\"GCW667JUHCOP5Y7KY6KGDHNPHFM4CS3FCBQ7QWDUALXTX3PGXLSOEALY\\\"}\";", "modifier": "private final", "type": "String", "declarator": "successResponse =\n            \"{\\\"stellar_address\\\":\\\"bob*stellar.org\\\",\\\"account_id\\\":\\\"GCW667JUHCOP5Y7KY6KGDHNPHFM4CS3FCBQ7QWDUALXTX3PGXLSOEALY\\\"}\"", "var_name": "successResponse"}, {"original_string": "private final String successResponseWithMemo =\n            \"{\\\"stellar_address\\\":\\\"bob*stellar.org\\\",\\\"account_id\\\":\\\"GCW667JUHCOP5Y7KY6KGDHNPHFM4CS3FCBQ7QWDUALXTX3PGXLSOEALY\\\", \\\"memo_type\\\": \\\"text\\\", \\\"memo\\\": \\\"test\\\"}\";", "modifier": "private final", "type": "String", "declarator": "successResponseWithMemo =\n            \"{\\\"stellar_address\\\":\\\"bob*stellar.org\\\",\\\"account_id\\\":\\\"GCW667JUHCOP5Y7KY6KGDHNPHFM4CS3FCBQ7QWDUALXTX3PGXLSOEALY\\\", \\\"memo_type\\\": \\\"text\\\", \\\"memo\\\": \\\"test\\\"}\"", "var_name": "successResponseWithMemo"}, {"original_string": "private final String notFoundResponse =\n            \"{\\\"code\\\":\\\"not_found\\\",\\\"message\\\":\\\"Account not found\\\"}\";", "modifier": "private final", "type": "String", "declarator": "notFoundResponse =\n            \"{\\\"code\\\":\\\"not_found\\\",\\\"message\\\":\\\"Account not found\\\"}\"", "var_name": "notFoundResponse"}, {"original_string": "private final String stellarToml =\n            \"FEDERATION_SERVER = \\\"https://api.stellar.org/federation\\\"\";", "modifier": "private final", "type": "String", "declarator": "stellarToml =\n            \"FEDERATION_SERVER = \\\"https://api.stellar.org/federation\\\"\"", "var_name": "stellarToml"}, {"original_string": "private OkHttpClient fakeClient;", "modifier": "private", "type": "OkHttpClient", "declarator": "fakeClient", "var_name": "fakeClient"}, {"original_string": "private MockWebServer mockWebServer;", "modifier": "private", "type": "MockWebServer", "declarator": "mockWebServer", "var_name": "mockWebServer"}, {"original_string": "private FederationServer server;", "modifier": "private", "type": "FederationServer", "declarator": "server", "var_name": "server"}], "file": "kin-sdk/kin-base/src/test/java/kin/base/federation/FederationServerTest.java"}, "test_case": {"identifier": "testNameFederationSuccessWithMemo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNameFederationSuccessWithMemo() throws IOException {\n        mockWebServer.enqueue(\n                new MockResponse()\n                        .setResponseCode(200)\n                        .setBody(successResponseWithMemo)\n        );\n\n        FederationResponse response = server.resolveAddress(\"bob*stellar.org\");\n        assertEquals(response.getStellarAddress(), \"bob*stellar.org\");\n        assertEquals(response.getAccountId(), \"GCW667JUHCOP5Y7KY6KGDHNPHFM4CS3FCBQ7QWDUALXTX3PGXLSOEALY\");\n        assertEquals(response.getMemoType(), \"text\");\n        assertEquals(response.getMemo(), \"test\");\n    }", "signature": "void testNameFederationSuccessWithMemo()", "full_signature": "@Test public void testNameFederationSuccessWithMemo()", "class_method_signature": "FederationServerTest.testNameFederationSuccessWithMemo()", "testcase": true, "constructor": false, "invocations": ["enqueue", "setBody", "setResponseCode", "resolveAddress", "assertEquals", "getStellarAddress", "assertEquals", "getAccountId", "assertEquals", "getMemoType", "assertEquals", "getMemo"]}, "focal_class": {"identifier": "FederationServer", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final URL serverUri;", "modifier": "private final", "type": "URL", "declarator": "serverUri", "var_name": "serverUri"}, {"original_string": "private final String domain;", "modifier": "private final", "type": "String", "declarator": "domain", "var_name": "domain"}, {"original_string": "private static OkHttpClient httpClient = new OkHttpClient();", "modifier": "private static", "type": "OkHttpClient", "declarator": "httpClient = new OkHttpClient()", "var_name": "httpClient"}], "methods": [{"identifier": "FederationServer", "parameters": "(URL serverUri, String domain)", "modifiers": "public", "return": "", "signature": " FederationServer(URL serverUri, String domain)", "full_signature": "public  FederationServer(URL serverUri, String domain)", "class_method_signature": "FederationServer.FederationServer(URL serverUri, String domain)", "testcase": false, "constructor": true}, {"identifier": "FederationServer", "parameters": "(String serverUri, String domain)", "modifiers": "public", "return": "", "signature": " FederationServer(String serverUri, String domain)", "full_signature": "public  FederationServer(String serverUri, String domain)", "class_method_signature": "FederationServer.FederationServer(String serverUri, String domain)", "testcase": false, "constructor": true}, {"identifier": "createForDomain", "parameters": "(String domain)", "modifiers": "public static", "return": "FederationServer", "signature": "FederationServer createForDomain(String domain)", "full_signature": "public static FederationServer createForDomain(String domain)", "class_method_signature": "FederationServer.createForDomain(String domain)", "testcase": false, "constructor": false}, {"identifier": "resolveAddress", "parameters": "(String address)", "modifiers": "public", "return": "FederationResponse", "signature": "FederationResponse resolveAddress(String address)", "full_signature": "public FederationResponse resolveAddress(String address)", "class_method_signature": "FederationServer.resolveAddress(String address)", "testcase": false, "constructor": false}, {"identifier": "getServerUri", "parameters": "()", "modifiers": "public", "return": "URL", "signature": "URL getServerUri()", "full_signature": "public URL getServerUri()", "class_method_signature": "FederationServer.getServerUri()", "testcase": false, "constructor": false}, {"identifier": "getDomain", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDomain()", "full_signature": "public String getDomain()", "class_method_signature": "FederationServer.getDomain()", "testcase": false, "constructor": false}, {"identifier": "setHttpClient", "parameters": "(OkHttpClient httpClient)", "modifiers": "static", "return": "void", "signature": "void setHttpClient(OkHttpClient httpClient)", "full_signature": "static void setHttpClient(OkHttpClient httpClient)", "class_method_signature": "FederationServer.setHttpClient(OkHttpClient httpClient)", "testcase": false, "constructor": false}], "file": "kin-sdk/kin-base/src/main/java/kin/base/federation/FederationServer.java"}, "focal_method": {"identifier": "resolveAddress", "parameters": "(String address)", "modifiers": "public", "return": "FederationResponse", "body": "public FederationResponse resolveAddress(String address) {\n        String[] tokens = address.split(\"\\\\*\");\n        if (tokens.length != 2) {\n            throw new MalformedAddressException();\n        }\n\n        URL uri = HttpUrl.parse(serverUri.toString()).newBuilder()\n                .addQueryParameter(\"type\", \"name\")\n                .addQueryParameter(\"q\", address)\n                .build().url();\n\n        TypeToken type = new TypeToken<FederationResponse>() {\n        };\n        ResponseHandler<FederationResponse> responseHandler = new ResponseHandler<FederationResponse>(httpClient, type);\n\n        Request request = new Request.Builder()\n                .url(uri.toString())\n                .get()\n                .build();\n\n        try {\n            Response response = httpClient.newCall(request)\n                    .execute();\n            return responseHandler.handleResponse(response);\n        } catch (HttpResponseException e) {\n            if (e.getStatusCode() == 404) {\n                throw new NotFoundException();\n            } else {\n                throw new ServerErrorException();\n            }\n        } catch (IOException e) {\n            throw new ConnectionErrorException();\n        }\n    }", "signature": "FederationResponse resolveAddress(String address)", "full_signature": "public FederationResponse resolveAddress(String address)", "class_method_signature": "FederationServer.resolveAddress(String address)", "testcase": false, "constructor": false, "invocations": ["split", "url", "build", "addQueryParameter", "addQueryParameter", "newBuilder", "parse", "toString", "build", "get", "url", "toString", "execute", "newCall", "handleResponse", "getStatusCode"]}, "repository": {"repo_id": 156408389, "url": "https://github.com/kinecosystem/kin-sdk-android", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 9, "size": 3232, "license": "licensed"}}