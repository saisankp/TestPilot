{"test_class": {"identifier": "HttpServletRequestImplFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static HttpServletRequestImplFactory factory;", "modifier": "private static", "type": "HttpServletRequestImplFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private static Socket socket;", "modifier": "private static", "type": "Socket", "declarator": "socket", "var_name": "socket"}, {"original_string": "private static Parser<Map<String, Cookie>> cookieParser;", "modifier": "private static", "type": "Parser<Map<String, Cookie>>", "declarator": "cookieParser", "var_name": "cookieParser"}, {"original_string": "private static Parser<Headers> headersParser;", "modifier": "private static", "type": "Parser<Headers>", "declarator": "headersParser", "var_name": "headersParser"}, {"original_string": "private static Headers headers;", "modifier": "private static", "type": "Headers", "declarator": "headers", "var_name": "headers"}], "file": "http/src/test/java/ro/polak/http/servlet/factory/HttpServletRequestImplFactoryTest.java"}, "test_case": {"identifier": "shouldThrowProtocolExceptionOnMalformedHeaders", "parameters": "()", "modifiers": "@Test(expected = ProtocolException.class) public", "return": "void", "body": "@Test(expected = ProtocolException.class)\n    public void shouldThrowProtocolExceptionOnMalformedHeaders() throws Exception {\n        when(headersParser.parse(any(String.class))).thenThrow(new MalformedInputException(\"ANY\"));\n        factory.createFromSocket(socket);\n    }", "signature": "void shouldThrowProtocolExceptionOnMalformedHeaders()", "full_signature": "@Test(expected = ProtocolException.class) public void shouldThrowProtocolExceptionOnMalformedHeaders()", "class_method_signature": "HttpServletRequestImplFactoryTest.shouldThrowProtocolExceptionOnMalformedHeaders()", "testcase": true, "constructor": false, "invocations": ["thenThrow", "when", "parse", "any", "createFromSocket"]}, "focal_class": {"identifier": "HttpServletRequestImplFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEFAULT_SCHEME = \"http\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_SCHEME = \"http\"", "var_name": "DEFAULT_SCHEME"}, {"original_string": "private static final int MULTIPART_BUFFER_LENGTH = 2048;", "modifier": "private static final", "type": "int", "declarator": "MULTIPART_BUFFER_LENGTH = 2048", "var_name": "MULTIPART_BUFFER_LENGTH"}, {"original_string": "private static final String BOUNDARY_START = \"boundary=\";", "modifier": "private static final", "type": "String", "declarator": "BOUNDARY_START = \"boundary=\"", "var_name": "BOUNDARY_START"}, {"original_string": "private static final int URI_MAX_LENGTH = 2048;", "modifier": "private static final", "type": "int", "declarator": "URI_MAX_LENGTH = 2048", "var_name": "URI_MAX_LENGTH"}, {"original_string": "private static final int POST_MAX_LENGTH = 50 * 1024 * 1024;", "modifier": "private static final", "type": "int", "declarator": "POST_MAX_LENGTH = 50 * 1024 * 1024", "var_name": "POST_MAX_LENGTH"}, {"original_string": "private static final int STATUS_MAX_LENGTH = 8 + URI_MAX_LENGTH + 9;", "modifier": "private static final", "type": "int", "declarator": "STATUS_MAX_LENGTH = 8 + URI_MAX_LENGTH + 9", "var_name": "STATUS_MAX_LENGTH"}, {"original_string": "private static final String[] RECOGNIZED_METHODS = {\n            \"OPTIONS\",\n            \"GET\",\n            \"HEAD\",\n            \"POST\",\n            \"PUT\",\n            \"DELETE\",\n            \"TRACE\",\n            \"CONNECT\"\n    };", "modifier": "private static final", "type": "String[]", "declarator": "RECOGNIZED_METHODS = {\n            \"OPTIONS\",\n            \"GET\",\n            \"HEAD\",\n            \"POST\",\n            \"PUT\",\n            \"DELETE\",\n            \"TRACE\",\n            \"CONNECT\"\n    }", "var_name": "RECOGNIZED_METHODS"}, {"original_string": "private static final int METHOD_MAX_LENGTH;", "modifier": "private static final", "type": "int", "declarator": "METHOD_MAX_LENGTH", "var_name": "METHOD_MAX_LENGTH"}, {"original_string": "private static final List<String> RECOGNIZED_METHODS_LIST = Arrays.asList(RECOGNIZED_METHODS);", "modifier": "private static final", "type": "List<String>", "declarator": "RECOGNIZED_METHODS_LIST = Arrays.asList(RECOGNIZED_METHODS)", "var_name": "RECOGNIZED_METHODS_LIST"}, {"original_string": "private static final String HEADERS_END_DELIMINATOR = \"\\n\\r\\n\";", "modifier": "private static final", "type": "String", "declarator": "HEADERS_END_DELIMINATOR = \"\\n\\r\\n\"", "var_name": "HEADERS_END_DELIMINATOR"}, {"original_string": "private static final int MINUMUM_HEADER_LINE_LENGTH = 3;", "modifier": "private static final", "type": "int", "declarator": "MINUMUM_HEADER_LINE_LENGTH = 3", "var_name": "MINUMUM_HEADER_LINE_LENGTH"}, {"original_string": "private static final String MULTIPART_FORM_DATA_HEADER_START = \"multipart/form-data\";", "modifier": "private static final", "type": "String", "declarator": "MULTIPART_FORM_DATA_HEADER_START = \"multipart/form-data\"", "var_name": "MULTIPART_FORM_DATA_HEADER_START"}, {"original_string": "private static final String DEFAULT_SERVLET_CONTEXT_PATH = \"/\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_SERVLET_CONTEXT_PATH = \"/\"", "var_name": "DEFAULT_SERVLET_CONTEXT_PATH"}, {"original_string": "private static final char NEWLINE = '\\n';", "modifier": "private static final", "type": "char", "declarator": "NEWLINE = '\\n'", "var_name": "NEWLINE"}, {"original_string": "private static final String HTTP_1_0 = \"HTTP/1.0\";", "modifier": "private static final", "type": "String", "declarator": "HTTP_1_0 = \"HTTP/1.0\"", "var_name": "HTTP_1_0"}, {"original_string": "private static final String HTTP_1_1 = \"HTTP/1.1\";", "modifier": "private static final", "type": "String", "declarator": "HTTP_1_1 = \"HTTP/1.1\"", "var_name": "HTTP_1_1"}, {"original_string": "private final Parser<Headers> headersParser;", "modifier": "private final", "type": "Parser<Headers>", "declarator": "headersParser", "var_name": "headersParser"}, {"original_string": "private final Parser<Map<String, String>> queryStringParser;", "modifier": "private final", "type": "Parser<Map<String, String>>", "declarator": "queryStringParser", "var_name": "queryStringParser"}, {"original_string": "private final Parser<RequestStatus> statusParser;", "modifier": "private final", "type": "Parser<RequestStatus>", "declarator": "statusParser", "var_name": "statusParser"}, {"original_string": "private final Parser<Map<String, Cookie>> cookieParser;", "modifier": "private final", "type": "Parser<Map<String, Cookie>>", "declarator": "cookieParser", "var_name": "cookieParser"}, {"original_string": "private Parser<MultipartHeadersPart> multipartHeadersPartParser;", "modifier": "private", "type": "Parser<MultipartHeadersPart>", "declarator": "multipartHeadersPartParser", "var_name": "multipartHeadersPartParser"}, {"original_string": "private final String tempPath;", "modifier": "private final", "type": "String", "declarator": "tempPath", "var_name": "tempPath"}], "methods": [{"identifier": "HttpServletRequestImplFactory", "parameters": "(final Parser<Headers> headersParser,\n                                         final Parser<Map<String, String>> queryStringParser,\n                                         final Parser<RequestStatus> statusParser,\n                                         final Parser<Map<String, Cookie>> cookieParser,\n                                         final Parser<MultipartHeadersPart> multipartHeadersPartParser,\n                                         final String tempPath)", "modifiers": "public", "return": "", "signature": " HttpServletRequestImplFactory(final Parser<Headers> headersParser,\n                                         final Parser<Map<String, String>> queryStringParser,\n                                         final Parser<RequestStatus> statusParser,\n                                         final Parser<Map<String, Cookie>> cookieParser,\n                                         final Parser<MultipartHeadersPart> multipartHeadersPartParser,\n                                         final String tempPath)", "full_signature": "public  HttpServletRequestImplFactory(final Parser<Headers> headersParser,\n                                         final Parser<Map<String, String>> queryStringParser,\n                                         final Parser<RequestStatus> statusParser,\n                                         final Parser<Map<String, Cookie>> cookieParser,\n                                         final Parser<MultipartHeadersPart> multipartHeadersPartParser,\n                                         final String tempPath)", "class_method_signature": "HttpServletRequestImplFactory.HttpServletRequestImplFactory(final Parser<Headers> headersParser,\n                                         final Parser<Map<String, String>> queryStringParser,\n                                         final Parser<RequestStatus> statusParser,\n                                         final Parser<Map<String, Cookie>> cookieParser,\n                                         final Parser<MultipartHeadersPart> multipartHeadersPartParser,\n                                         final String tempPath)", "testcase": false, "constructor": true}, {"identifier": "createFromSocket", "parameters": "(final Socket socket)", "modifiers": "public", "return": "HttpServletRequestImpl", "signature": "HttpServletRequestImpl createFromSocket(final Socket socket)", "full_signature": "public HttpServletRequestImpl createFromSocket(final Socket socket)", "class_method_signature": "HttpServletRequestImplFactory.createFromSocket(final Socket socket)", "testcase": false, "constructor": false}, {"identifier": "getImplicitServletContext", "parameters": "()", "modifiers": "private", "return": "ServletContextImpl", "signature": "ServletContextImpl getImplicitServletContext()", "full_signature": "private ServletContextImpl getImplicitServletContext()", "class_method_signature": "HttpServletRequestImplFactory.getImplicitServletContext()", "testcase": false, "constructor": false}, {"identifier": "computeHeaders", "parameters": "(final InputStream in)", "modifiers": "private", "return": "Headers", "signature": "Headers computeHeaders(final InputStream in)", "full_signature": "private Headers computeHeaders(final InputStream in)", "class_method_signature": "HttpServletRequestImplFactory.computeHeaders(final InputStream in)", "testcase": false, "constructor": false}, {"identifier": "isValidProtocol", "parameters": "(final String protocol)", "modifiers": "private", "return": "boolean", "signature": "boolean isValidProtocol(final String protocol)", "full_signature": "private boolean isValidProtocol(final String protocol)", "class_method_signature": "HttpServletRequestImplFactory.isValidProtocol(final String protocol)", "testcase": false, "constructor": false}, {"identifier": "assignSocketMetadata", "parameters": "(final Socket socket, final HttpServletRequestImpl.Builder builder)", "modifiers": "private", "return": "void", "signature": "void assignSocketMetadata(final Socket socket, final HttpServletRequestImpl.Builder builder)", "full_signature": "private void assignSocketMetadata(final Socket socket, final HttpServletRequestImpl.Builder builder)", "class_method_signature": "HttpServletRequestImplFactory.assignSocketMetadata(final Socket socket, final HttpServletRequestImpl.Builder builder)", "testcase": false, "constructor": false}, {"identifier": "getCookies", "parameters": "(final Headers headers)", "modifiers": "private", "return": "Map<String, Cookie>", "signature": "Map<String, Cookie> getCookies(final Headers headers)", "full_signature": "private Map<String, Cookie> getCookies(final Headers headers)", "class_method_signature": "HttpServletRequestImplFactory.getCookies(final Headers headers)", "testcase": false, "constructor": false}, {"identifier": "getStatusLine", "parameters": "(final InputStream in)", "modifiers": "private", "return": "String", "signature": "String getStatusLine(final InputStream in)", "full_signature": "private String getStatusLine(final InputStream in)", "class_method_signature": "HttpServletRequestImplFactory.getStatusLine(final InputStream in)", "testcase": false, "constructor": false}, {"identifier": "getHeadersString", "parameters": "(final InputStream in)", "modifiers": "private", "return": "String", "signature": "String getHeadersString(final InputStream in)", "full_signature": "private String getHeadersString(final InputStream in)", "class_method_signature": "HttpServletRequestImplFactory.getHeadersString(final InputStream in)", "testcase": false, "constructor": false}, {"identifier": "getEndChars", "parameters": "(final StringBuilder headersString, final int headersEndSymbolLength)", "modifiers": "private", "return": "String", "signature": "String getEndChars(final StringBuilder headersString, final int headersEndSymbolLength)", "full_signature": "private String getEndChars(final StringBuilder headersString, final int headersEndSymbolLength)", "class_method_signature": "HttpServletRequestImplFactory.getEndChars(final StringBuilder headersString, final int headersEndSymbolLength)", "testcase": false, "constructor": false}, {"identifier": "handlePostRequest", "parameters": "(final HttpServletRequestImpl.Builder builder,\n                                   final InputStream in,\n                                   final Headers headers)", "modifiers": "private", "return": "void", "signature": "void handlePostRequest(final HttpServletRequestImpl.Builder builder,\n                                   final InputStream in,\n                                   final Headers headers)", "full_signature": "private void handlePostRequest(final HttpServletRequestImpl.Builder builder,\n                                   final InputStream in,\n                                   final Headers headers)", "class_method_signature": "HttpServletRequestImplFactory.handlePostRequest(final HttpServletRequestImpl.Builder builder,\n                                   final InputStream in,\n                                   final Headers headers)", "testcase": false, "constructor": false}, {"identifier": "isMultipartRequest", "parameters": "(final Headers headers)", "modifiers": "private", "return": "boolean", "signature": "boolean isMultipartRequest(final Headers headers)", "full_signature": "private boolean isMultipartRequest(final Headers headers)", "class_method_signature": "HttpServletRequestImplFactory.isMultipartRequest(final Headers headers)", "testcase": false, "constructor": false}, {"identifier": "handlePostPlainRequest", "parameters": "(final HttpServletRequestImpl.Builder builder,\n                                        final InputStream in,\n                                        final int postLength)", "modifiers": "private", "return": "void", "signature": "void handlePostPlainRequest(final HttpServletRequestImpl.Builder builder,\n                                        final InputStream in,\n                                        final int postLength)", "full_signature": "private void handlePostPlainRequest(final HttpServletRequestImpl.Builder builder,\n                                        final InputStream in,\n                                        final int postLength)", "class_method_signature": "HttpServletRequestImplFactory.handlePostPlainRequest(final HttpServletRequestImpl.Builder builder,\n                                        final InputStream in,\n                                        final int postLength)", "testcase": false, "constructor": false}, {"identifier": "handlePostMultipartRequest", "parameters": "(final HttpServletRequestImpl.Builder builder,\n                                            final Headers headers,\n                                            final InputStream in,\n                                            final int postLength)", "modifiers": "private", "return": "void", "signature": "void handlePostMultipartRequest(final HttpServletRequestImpl.Builder builder,\n                                            final Headers headers,\n                                            final InputStream in,\n                                            final int postLength)", "full_signature": "private void handlePostMultipartRequest(final HttpServletRequestImpl.Builder builder,\n                                            final Headers headers,\n                                            final InputStream in,\n                                            final int postLength)", "class_method_signature": "HttpServletRequestImplFactory.handlePostMultipartRequest(final HttpServletRequestImpl.Builder builder,\n                                            final Headers headers,\n                                            final InputStream in,\n                                            final int postLength)", "testcase": false, "constructor": false}], "file": "http/src/main/java/ro/polak/http/servlet/factory/HttpServletRequestImplFactory.java"}, "focal_method": {"identifier": "createFromSocket", "parameters": "(final Socket socket)", "modifiers": "public", "return": "HttpServletRequestImpl", "body": "public HttpServletRequestImpl createFromSocket(final Socket socket)\n            throws IOException, ProtocolException {\n\n        HttpServletRequestImpl.Builder builder = HttpServletRequestImpl.createNewBuilder();\n\n        InputStream in = socket.getInputStream();\n        // The order matters\n\n        RequestStatus status;\n        try {\n            status = statusParser.parse(getStatusLine(in));\n        } catch (MalformedInputException e) {\n            throw new MalformedStatusLineException(\"Malformed status line \" + e.getMessage());\n        }\n\n        int uriLengthExceededWith = status.getUri().length() - URI_MAX_LENGTH;\n        if (uriLengthExceededWith > 0) {\n            throw new UriTooLongProtocolException(\"Uri length exceeded max length with\"\n                    + uriLengthExceededWith + \" characters\");\n        }\n\n        if (!isValidProtocol(status.getProtocol())) {\n            throw new UnsupportedProtocolException(\"Protocol \" + status.getProtocol() + \" is not supported\");\n        }\n\n        assignSocketMetadata(socket, builder);\n\n        try {\n            builder.withGetParameters(queryStringParser.parse(status.getQueryString()));\n        } catch (MalformedInputException e) {\n            // This should never happen\n        }\n\n        Headers headers = computeHeaders(in);\n\n        builder.withServletContext(getImplicitServletContext())\n                .withInputStream(in)\n                .withStatus(status)\n                .withPathTranslated(status.getUri()) // TODO There is no way to make it work under Android\n                .withPathInfo(\"\")\n                .withRemoteUser(null)\n                .withPrincipal(null)\n                .withHeaders(headers)\n                .withCookies(getCookies(headers));\n\n        if (status.getMethod().equalsIgnoreCase(HttpServletRequest.METHOD_POST)) {\n            try {\n                handlePostRequest(builder, in, headers);\n            } catch (MalformedInputException e) {\n                throw new ProtocolException(\"Malformed post input\");\n            }\n        }\n\n        return builder.build();\n    }", "signature": "HttpServletRequestImpl createFromSocket(final Socket socket)", "full_signature": "public HttpServletRequestImpl createFromSocket(final Socket socket)", "class_method_signature": "HttpServletRequestImplFactory.createFromSocket(final Socket socket)", "testcase": false, "constructor": false, "invocations": ["createNewBuilder", "getInputStream", "parse", "getStatusLine", "getMessage", "length", "getUri", "isValidProtocol", "getProtocol", "getProtocol", "assignSocketMetadata", "withGetParameters", "parse", "getQueryString", "computeHeaders", "withCookies", "withHeaders", "withPrincipal", "withRemoteUser", "withPathInfo", "withPathTranslated", "withStatus", "withInputStream", "withServletContext", "getImplicitServletContext", "getUri", "getCookies", "equalsIgnoreCase", "getMethod", "handlePostRequest", "build"]}, "repository": {"repo_id": 42557838, "url": "https://github.com/piotrpolak/android-http-server", "language": "Java", "is_fork": false, "fork_count": 41, "stargazer_count": 136, "size": 2000, "license": "licensed"}}