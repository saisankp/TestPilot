{"test_class": {"identifier": "CollectionViewPresenterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public final RxSchedulerTestRule rxSchedulerTestRule = new RxSchedulerTestRule();", "modifier": "@Rule public final", "type": "RxSchedulerTestRule", "declarator": "rxSchedulerTestRule = new RxSchedulerTestRule()", "var_name": "rxSchedulerTestRule"}, {"original_string": "@Mock DataProvider mockedDataProvider;", "modifier": "@Mock", "type": "DataProvider", "declarator": "mockedDataProvider", "var_name": "mockedDataProvider"}, {"original_string": "@Mock CollectionView mockedView;", "modifier": "@Mock", "type": "CollectionView", "declarator": "mockedView", "var_name": "mockedView"}, {"original_string": "ListData<Integer> loadData = new ListDataTest(\n      Arrays.asList(1, 2, 3),\n      new PagingImpl(1, 2, 6));", "modifier": "", "type": "ListData<Integer>", "declarator": "loadData = new ListDataTest(\n      Arrays.asList(1, 2, 3),\n      new PagingImpl(1, 2, 6))", "var_name": "loadData"}, {"original_string": "ListData<Integer> loadMoreData = new ListDataTest(\n      Arrays.asList(4, 5, 6),\n      new PagingImpl(2, 2, 6));", "modifier": "", "type": "ListData<Integer>", "declarator": "loadMoreData = new ListDataTest(\n      Arrays.asList(4, 5, 6),\n      new PagingImpl(2, 2, 6))", "var_name": "loadMoreData"}, {"original_string": "ListData<Integer> refreshData = new ListDataTest(\n      Arrays.asList(1, 2, 3, 4),\n      new PagingImpl(1, 2, 6));", "modifier": "", "type": "ListData<Integer>", "declarator": "refreshData = new ListDataTest(\n      Arrays.asList(1, 2, 3, 4),\n      new PagingImpl(1, 2, 6))", "var_name": "refreshData"}, {"original_string": "private CollectionViewPresenter tested;", "modifier": "private", "type": "CollectionViewPresenter", "declarator": "tested", "var_name": "tested"}], "file": "collectionview/src/test/java/vn/tiki/collectionview/CollectionViewPresenterTest.java"}, "test_case": {"identifier": "testRefreshSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testRefreshSuccess() throws Exception {\n    tested.onRefresh();\n    verify(mockedView).hideRefreshing();\n    verify(mockedView).setItems(eq(Arrays.asList(\n        1,\n        2,\n        3,\n        4,\n        CollectionViewPresenter.LOADING_ITEM)));\n  }", "signature": "void testRefreshSuccess()", "full_signature": "@Test public void testRefreshSuccess()", "class_method_signature": "CollectionViewPresenterTest.testRefreshSuccess()", "testcase": true, "constructor": false, "invocations": ["onRefresh", "hideRefreshing", "verify", "setItems", "verify", "eq", "asList"]}, "focal_class": {"identifier": "CollectionViewPresenter", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final LoadingItem LOADING_ITEM = new LoadingItem();", "modifier": "static final", "type": "LoadingItem", "declarator": "LOADING_ITEM = new LoadingItem()", "var_name": "LOADING_ITEM"}, {"original_string": "CollectionView collectionView;", "modifier": "", "type": "CollectionView", "declarator": "collectionView", "var_name": "collectionView"}, {"original_string": "@NonNull private final DataProvider<?> dataProvider;", "modifier": "@NonNull private final", "type": "DataProvider<?>", "declarator": "dataProvider", "var_name": "dataProvider"}, {"original_string": "@Nullable private Disposable disposable;", "modifier": "@Nullable private", "type": "Disposable", "declarator": "disposable", "var_name": "disposable"}, {"original_string": "@Nullable private ListData<?> listData;", "modifier": "@Nullable private", "type": "ListData<?>", "declarator": "listData", "var_name": "listData"}], "methods": [{"identifier": "CollectionViewPresenter", "parameters": "(@NonNull DataProvider<?> dataProvider)", "modifiers": "", "return": "", "signature": " CollectionViewPresenter(@NonNull DataProvider<?> dataProvider)", "full_signature": "  CollectionViewPresenter(@NonNull DataProvider<?> dataProvider)", "class_method_signature": "CollectionViewPresenter.CollectionViewPresenter(@NonNull DataProvider<?> dataProvider)", "testcase": false, "constructor": true}, {"identifier": "attach", "parameters": "(CollectionView collectionView)", "modifiers": "", "return": "void", "signature": "void attach(CollectionView collectionView)", "full_signature": " void attach(CollectionView collectionView)", "class_method_signature": "CollectionViewPresenter.attach(CollectionView collectionView)", "testcase": false, "constructor": false}, {"identifier": "detach", "parameters": "()", "modifiers": "", "return": "void", "signature": "void detach()", "full_signature": " void detach()", "class_method_signature": "CollectionViewPresenter.detach()", "testcase": false, "constructor": false}, {"identifier": "onLoad", "parameters": "()", "modifiers": "", "return": "void", "signature": "void onLoad()", "full_signature": " void onLoad()", "class_method_signature": "CollectionViewPresenter.onLoad()", "testcase": false, "constructor": false}, {"identifier": "onLoadMore", "parameters": "()", "modifiers": "", "return": "void", "signature": "void onLoadMore()", "full_signature": " void onLoadMore()", "class_method_signature": "CollectionViewPresenter.onLoadMore()", "testcase": false, "constructor": false}, {"identifier": "onRefresh", "parameters": "()", "modifiers": "", "return": "void", "signature": "void onRefresh()", "full_signature": " void onRefresh()", "class_method_signature": "CollectionViewPresenter.onRefresh()", "testcase": false, "constructor": false}, {"identifier": "disposeDisposable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void disposeDisposable()", "full_signature": "private void disposeDisposable()", "class_method_signature": "CollectionViewPresenter.disposeDisposable()", "testcase": false, "constructor": false}, {"identifier": "includeLoading", "parameters": "()", "modifiers": "@NonNull private", "return": "Function<List<?>, List<?>>", "signature": "Function<List<?>, List<?>> includeLoading()", "full_signature": "@NonNull private Function<List<?>, List<?>> includeLoading()", "class_method_signature": "CollectionViewPresenter.includeLoading()", "testcase": false, "constructor": false}, {"identifier": "isCurrentLastPage", "parameters": "(@NonNull Paging paging)", "modifiers": "private", "return": "boolean", "signature": "boolean isCurrentLastPage(@NonNull Paging paging)", "full_signature": "private boolean isCurrentLastPage(@NonNull Paging paging)", "class_method_signature": "CollectionViewPresenter.isCurrentLastPage(@NonNull Paging paging)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(Single<? extends ListData<?>> source)", "modifiers": "private", "return": "Single<List<?>>", "signature": "Single<List<?>> map(Single<? extends ListData<?>> source)", "full_signature": "private Single<List<?>> map(Single<? extends ListData<?>> source)", "class_method_signature": "CollectionViewPresenter.map(Single<? extends ListData<?>> source)", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(List<?> list1, Object item)", "modifiers": "private static", "return": "List<?>", "signature": "List<?> append(List<?> list1, Object item)", "full_signature": "private static List<?> append(List<?> list1, Object item)", "class_method_signature": "CollectionViewPresenter.append(List<?> list1, Object item)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(List<?> list1, List<?> list2)", "modifiers": "private static", "return": "List<?>", "signature": "List<?> concat(List<?> list1, List<?> list2)", "full_signature": "private static List<?> concat(List<?> list1, List<?> list2)", "class_method_signature": "CollectionViewPresenter.concat(List<?> list1, List<?> list2)", "testcase": false, "constructor": false}], "file": "collectionview/src/main/java/vn/tiki/collectionview/CollectionViewPresenter.java"}, "focal_method": {"identifier": "onRefresh", "parameters": "()", "modifiers": "", "return": "void", "body": "void onRefresh() {\n    disposeDisposable();\n    disposable = map(dataProvider.fetchNewest())\n        .map(includeLoading())\n        .subscribe(\n            new Consumer<List<?>>() {\n              @Override\n              public void accept(List<?> items) throws Exception {\n                collectionView.hideRefreshing();\n                collectionView.setItems(items);\n              }\n            },\n            new Consumer<Throwable>() {\n              @Override\n              public void accept(Throwable throwable) throws Exception {\n                throwable.printStackTrace();\n                collectionView.hideRefreshing();\n              }\n            });\n  }", "signature": "void onRefresh()", "full_signature": " void onRefresh()", "class_method_signature": "CollectionViewPresenter.onRefresh()", "testcase": false, "constructor": false, "invocations": ["disposeDisposable", "subscribe", "map", "map", "fetchNewest", "includeLoading", "hideRefreshing", "setItems", "printStackTrace", "hideRefreshing"]}, "repository": {"repo_id": 102814088, "url": "https://github.com/tikivn/android-template", "language": "Java", "is_fork": false, "fork_count": 9, "stargazer_count": 16, "size": 7557, "license": "licensed"}}