{"test_class": {"identifier": "JcrQueryManagerTest", "superclass": "extends MultiUseAbstractTest", "interfaces": "", "fields": [{"original_string": "private static final String[] INDEXED_SYSTEM_NODES_PATHS = new String[] {\"/jcr:system/jcr:nodeTypes\",\n        \"/jcr:system/mode:namespaces\"};", "modifier": "private static final", "type": "String[]", "declarator": "INDEXED_SYSTEM_NODES_PATHS = new String[] {\"/jcr:system/jcr:nodeTypes\",\n        \"/jcr:system/mode:namespaces\"}", "var_name": "INDEXED_SYSTEM_NODES_PATHS"}, {"original_string": "protected static final int TOTAL_NON_SYSTEM_NODE_COUNT = 25;", "modifier": "protected static final", "type": "int", "declarator": "TOTAL_NON_SYSTEM_NODE_COUNT = 25", "var_name": "TOTAL_NON_SYSTEM_NODE_COUNT"}, {"original_string": "protected static int totalSystemNodeCount;", "modifier": "protected static", "type": "int", "declarator": "totalSystemNodeCount", "var_name": "totalSystemNodeCount"}, {"original_string": "protected static int totalNodeCount;", "modifier": "protected static", "type": "int", "declarator": "totalNodeCount", "var_name": "totalNodeCount"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/JcrQueryManagerTest.java"}, "test_case": {"identifier": "shouldAllowQueryingForRuntimeRegisteredNodeTypes", "parameters": "()", "modifiers": "@Test @FixFor( \"MODE-2275\" ) public", "return": "void", "body": "@Test\n    @FixFor( \"MODE-2275\" )\n    public void shouldAllowQueryingForRuntimeRegisteredNodeTypes() throws Exception {\n        NamespaceRegistry namespaceRegistry = session.getWorkspace().getNamespaceRegistry();\n        namespaceRegistry.registerNamespace(\"foo\", \"http://www.modeshape.org/foo/1.0\");\n        Node node1 = null;\n        Node node2 = null;\n\n        try {\n            registerNodeType(\"foo:nodeType1\");\n            node1 = session.getRootNode().addNode(\"foo1\", \"foo:nodeType1\");\n            session.save();\n            String sql = \"SELECT node.[jcr:name] FROM [foo:nodeType1] AS node\";\n            Query query = session.getWorkspace().getQueryManager().createQuery(sql, Query.JCR_SQL2);\n            NodeIterator nodes = query.execute().getNodes();\n            assertEquals(1, nodes.getSize());\n            assertEquals(\"foo1\", nodes.nextNode().getName());\n\n            registerNodeType(\"foo:nodeType2\");\n            node2 = session.getRootNode().addNode(\"foo2\", \"foo:nodeType2\");\n            session.save();\n            sql = \"SELECT node.[jcr:name] FROM [foo:nodeType2] AS node\";\n            query = session.getWorkspace().getQueryManager().createQuery(sql, Query.JCR_SQL2);\n            nodes = query.execute().getNodes();\n            assertEquals(1, nodes.getSize());\n            assertEquals(\"foo2\", nodes.nextNode().getName());\n        } finally {\n            // remove the nodes to avoid influencing the other tests\n            if (node1 != null) {\n                node1.remove();\n            }\n            if (node2 != null) {\n                node2.remove();\n            }\n            session.save();\n\n            // remove the custom types and namespaces to avoid influencing the other tests\n            JcrNodeTypeManager nodeTypeManager = session.getWorkspace().getNodeTypeManager();\n            nodeTypeManager.unregisterNodeType(\"foo:nodeType1\");\n            nodeTypeManager.unregisterNodeType(\"foo:nodeType2\");\n            namespaceRegistry.unregisterNamespace(\"foo\");\n        }\n    }", "signature": "void shouldAllowQueryingForRuntimeRegisteredNodeTypes()", "full_signature": "@Test @FixFor( \"MODE-2275\" ) public void shouldAllowQueryingForRuntimeRegisteredNodeTypes()", "class_method_signature": "JcrQueryManagerTest.shouldAllowQueryingForRuntimeRegisteredNodeTypes()", "testcase": true, "constructor": false, "invocations": ["getNamespaceRegistry", "getWorkspace", "registerNamespace", "registerNodeType", "addNode", "getRootNode", "save", "createQuery", "getQueryManager", "getWorkspace", "getNodes", "execute", "assertEquals", "getSize", "assertEquals", "getName", "nextNode", "registerNodeType", "addNode", "getRootNode", "save", "createQuery", "getQueryManager", "getWorkspace", "getNodes", "execute", "assertEquals", "getSize", "assertEquals", "getName", "nextNode", "remove", "remove", "save", "getNodeTypeManager", "getWorkspace", "unregisterNodeType", "unregisterNodeType", "unregisterNamespace"]}, "focal_class": {"identifier": "JcrQueryManager", "superclass": "", "interfaces": "implements QueryManager", "fields": [{"original_string": "protected static final Logger LOGGER = Logger.getLogger(JcrQueryManager.class);", "modifier": "protected static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(JcrQueryManager.class)", "var_name": "LOGGER"}, {"original_string": "private final JcrSession session;", "modifier": "private final", "type": "JcrSession", "declarator": "session", "var_name": "session"}, {"original_string": "private final JcrQueryContext context;", "modifier": "private final", "type": "JcrQueryContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final JcrTypeSystem typeSystem;", "modifier": "private final", "type": "JcrTypeSystem", "declarator": "typeSystem", "var_name": "typeSystem"}, {"original_string": "private final QueryObjectModelFactory factory;", "modifier": "private final", "type": "QueryObjectModelFactory", "declarator": "factory", "var_name": "factory"}], "methods": [{"identifier": "JcrQueryManager", "parameters": "( JcrSession session )", "modifiers": "", "return": "", "signature": " JcrQueryManager( JcrSession session )", "full_signature": "  JcrQueryManager( JcrSession session )", "class_method_signature": "JcrQueryManager.JcrQueryManager( JcrSession session )", "testcase": false, "constructor": true}, {"identifier": "getQOMFactory", "parameters": "()", "modifiers": "@Override public", "return": "org.modeshape.jcr.api.query.qom.QueryObjectModelFactory", "signature": "org.modeshape.jcr.api.query.qom.QueryObjectModelFactory getQOMFactory()", "full_signature": "@Override public org.modeshape.jcr.api.query.qom.QueryObjectModelFactory getQOMFactory()", "class_method_signature": "JcrQueryManager.getQOMFactory()", "testcase": false, "constructor": false}, {"identifier": "createQuery", "parameters": "( String statement,\n                                                          String language )", "modifiers": "@Override public", "return": "org.modeshape.jcr.api.query.Query", "signature": "org.modeshape.jcr.api.query.Query createQuery( String statement,\n                                                          String language )", "full_signature": "@Override public org.modeshape.jcr.api.query.Query createQuery( String statement,\n                                                          String language )", "class_method_signature": "JcrQueryManager.createQuery( String statement,\n                                                          String language )", "testcase": false, "constructor": false}, {"identifier": "createQuery", "parameters": "( String statement, \n                                                          String language,\n                                                          Locale locale )", "modifiers": "@Override public", "return": "org.modeshape.jcr.api.query.Query", "signature": "org.modeshape.jcr.api.query.Query createQuery( String statement, \n                                                          String language,\n                                                          Locale locale )", "full_signature": "@Override public org.modeshape.jcr.api.query.Query createQuery( String statement, \n                                                          String language,\n                                                          Locale locale )", "class_method_signature": "JcrQueryManager.createQuery( String statement, \n                                                          String language,\n                                                          Locale locale )", "testcase": false, "constructor": false}, {"identifier": "createQuery", "parameters": "( String expression,\n                                                          String language,\n                                                          Path storedAtPath, \n                                                          Locale locale )", "modifiers": "public", "return": "org.modeshape.jcr.api.query.Query", "signature": "org.modeshape.jcr.api.query.Query createQuery( String expression,\n                                                          String language,\n                                                          Path storedAtPath, \n                                                          Locale locale )", "full_signature": "public org.modeshape.jcr.api.query.Query createQuery( String expression,\n                                                          String language,\n                                                          Path storedAtPath, \n                                                          Locale locale )", "class_method_signature": "JcrQueryManager.createQuery( String expression,\n                                                          String language,\n                                                          Path storedAtPath, \n                                                          Locale locale )", "testcase": false, "constructor": false}, {"identifier": "createQuery", "parameters": "( QueryCommand command )", "modifiers": "public", "return": "Query", "signature": "Query createQuery( QueryCommand command )", "full_signature": "public Query createQuery( QueryCommand command )", "class_method_signature": "JcrQueryManager.createQuery( QueryCommand command )", "testcase": false, "constructor": false}, {"identifier": "getQuery", "parameters": "( Node node )", "modifiers": "@Override public", "return": "org.modeshape.jcr.api.query.Query", "signature": "org.modeshape.jcr.api.query.Query getQuery( Node node )", "full_signature": "@Override public org.modeshape.jcr.api.query.Query getQuery( Node node )", "class_method_signature": "JcrQueryManager.getQuery( Node node )", "testcase": false, "constructor": false}, {"identifier": "getSupportedQueryLanguages", "parameters": "()", "modifiers": "@Override public", "return": "String[]", "signature": "String[] getSupportedQueryLanguages()", "full_signature": "@Override public String[] getSupportedQueryLanguages()", "class_method_signature": "JcrQueryManager.getSupportedQueryLanguages()", "testcase": false, "constructor": false}, {"identifier": "resultWith", "parameters": "( String expression,\n                                                            String language,\n                                                            QueryCommand command,\n                                                            PlanHints hints,\n                                                            Path storedAtPath, \n                                                            Locale locale )", "modifiers": "protected", "return": "org.modeshape.jcr.api.query.Query", "signature": "org.modeshape.jcr.api.query.Query resultWith( String expression,\n                                                            String language,\n                                                            QueryCommand command,\n                                                            PlanHints hints,\n                                                            Path storedAtPath, \n                                                            Locale locale )", "full_signature": "protected org.modeshape.jcr.api.query.Query resultWith( String expression,\n                                                            String language,\n                                                            QueryCommand command,\n                                                            PlanHints hints,\n                                                            Path storedAtPath, \n                                                            Locale locale )", "class_method_signature": "JcrQueryManager.resultWith( String expression,\n                                                            String language,\n                                                            QueryCommand command,\n                                                            PlanHints hints,\n                                                            Path storedAtPath, \n                                                            Locale locale )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/JcrQueryManager.java"}, "focal_method": {"identifier": "createQuery", "parameters": "( String statement,\n                                                          String language )", "modifiers": "@Override public", "return": "org.modeshape.jcr.api.query.Query", "body": "@Override\n    public org.modeshape.jcr.api.query.Query createQuery( String statement,\n                                                          String language ) throws InvalidQueryException, RepositoryException {\n        CheckArg.isNotNull(statement, \"statement\");\n        CheckArg.isNotNull(language, \"language\");\n        return createQuery(statement, language, null, null);\n    }", "signature": "org.modeshape.jcr.api.query.Query createQuery( String statement,\n                                                          String language )", "full_signature": "@Override public org.modeshape.jcr.api.query.Query createQuery( String statement,\n                                                          String language )", "class_method_signature": "JcrQueryManager.createQuery( String statement,\n                                                          String language )", "testcase": false, "constructor": false, "invocations": ["isNotNull", "isNotNull", "createQuery"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}