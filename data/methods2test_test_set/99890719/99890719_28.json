{"test_class": {"identifier": "OnlyDefPrefixNoViolationPredicateTest", "superclass": "", "interfaces": "", "fields": [], "file": "mubench/src/test/java/de/tu_darmstadt/stg/mudetect/OnlyDefPrefixNoViolationPredicateTest.java"}, "test_case": {"identifier": "moreThanDefPrefixIsNoDecision", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void moreThanDefPrefixIsNoDecision() {\n        TestAUGBuilder pattern = buildAUG().withActionNodes(\"create()\", \"use()\", \"use2()\").withDataNode(\"Object\")\n                .withEdge(\"create()\", DEFINITION, \"Object\")\n                .withEdge(\"Object\", RECEIVER, \"use()\")\n                .withEdge(\"Object\", RECEIVER, \"use2()\");\n        TestAUGBuilder target = buildAUG().withActionNodes(\"create()\", \"use()\").withDataNode(\"Object\")\n                .withEdge(\"Object\", RECEIVER, \"use()\")\n                .withEdge(\"Object\", RECEIVER, \"use()\");\n        TestOverlapBuilder overlap = buildOverlap(target, pattern).withNodes(\"create()\", \"use()\", \"Object\")\n                .withEdge(\"Object\", RECEIVER, \"use()\")\n                .withEdge(\"Object\", RECEIVER, \"use()\");\n\n        Optional<Boolean> decision = new OnlyDefPrefixNoViolationPredicate().apply(overlap.build());\n\n        assertThat(decision, is(Optional.empty()));\n    }", "signature": "void moreThanDefPrefixIsNoDecision()", "full_signature": "@Test public void moreThanDefPrefixIsNoDecision()", "class_method_signature": "OnlyDefPrefixNoViolationPredicateTest.moreThanDefPrefixIsNoDecision()", "testcase": true, "constructor": false, "invocations": ["withEdge", "withEdge", "withEdge", "withDataNode", "withActionNodes", "buildAUG", "withEdge", "withEdge", "withDataNode", "withActionNodes", "buildAUG", "withEdge", "withEdge", "withNodes", "buildOverlap", "apply", "build", "assertThat", "is", "empty"]}, "focal_class": {"identifier": "OnlyDefPrefixNoViolationPredicate", "superclass": "", "interfaces": "implements ViolationPredicate", "fields": [], "methods": [{"identifier": "apply", "parameters": "(Overlap overlap)", "modifiers": "@Override public", "return": "Optional<Boolean>", "signature": "Optional<Boolean> apply(Overlap overlap)", "full_signature": "@Override public Optional<Boolean> apply(Overlap overlap)", "class_method_signature": "OnlyDefPrefixNoViolationPredicate.apply(Overlap overlap)", "testcase": false, "constructor": false}, {"identifier": "isProducerDataPair", "parameters": "(Set<Node> missingEdgeSources, Overlap overlap)", "modifiers": "private", "return": "boolean", "signature": "boolean isProducerDataPair(Set<Node> missingEdgeSources, Overlap overlap)", "full_signature": "private boolean isProducerDataPair(Set<Node> missingEdgeSources, Overlap overlap)", "class_method_signature": "OnlyDefPrefixNoViolationPredicate.isProducerDataPair(Set<Node> missingEdgeSources, Overlap overlap)", "testcase": false, "constructor": false}, {"identifier": "hasMappedDefinitionEdge", "parameters": "(Overlap overlap, Node producer, Node defined)", "modifiers": "private", "return": "boolean", "signature": "boolean hasMappedDefinitionEdge(Overlap overlap, Node producer, Node defined)", "full_signature": "private boolean hasMappedDefinitionEdge(Overlap overlap, Node producer, Node defined)", "class_method_signature": "OnlyDefPrefixNoViolationPredicate.hasMappedDefinitionEdge(Overlap overlap, Node producer, Node defined)", "testcase": false, "constructor": false}, {"identifier": "isSingleDataNode", "parameters": "(Set<Node> missingEdgeSources)", "modifiers": "private", "return": "boolean", "signature": "boolean isSingleDataNode(Set<Node> missingEdgeSources)", "full_signature": "private boolean isSingleDataNode(Set<Node> missingEdgeSources)", "class_method_signature": "OnlyDefPrefixNoViolationPredicate.isSingleDataNode(Set<Node> missingEdgeSources)", "testcase": false, "constructor": false}, {"identifier": "getSources", "parameters": "(Set<Edge> missingDirectConnectionEdges)", "modifiers": "private", "return": "Set<Node>", "signature": "Set<Node> getSources(Set<Edge> missingDirectConnectionEdges)", "full_signature": "private Set<Node> getSources(Set<Edge> missingDirectConnectionEdges)", "class_method_signature": "OnlyDefPrefixNoViolationPredicate.getSources(Set<Edge> missingDirectConnectionEdges)", "testcase": false, "constructor": false}, {"identifier": "allHaveMappedSourceAndMissingTarget", "parameters": "(Set<Edge> missingDirectConnectionEdges, Overlap overlap)", "modifiers": "private", "return": "boolean", "signature": "boolean allHaveMappedSourceAndMissingTarget(Set<Edge> missingDirectConnectionEdges, Overlap overlap)", "full_signature": "private boolean allHaveMappedSourceAndMissingTarget(Set<Edge> missingDirectConnectionEdges, Overlap overlap)", "class_method_signature": "OnlyDefPrefixNoViolationPredicate.allHaveMappedSourceAndMissingTarget(Set<Edge> missingDirectConnectionEdges, Overlap overlap)", "testcase": false, "constructor": false}, {"identifier": "hasMappedSourceAndMissingTarget", "parameters": "(Overlap overlap, Edge edge)", "modifiers": "private", "return": "boolean", "signature": "boolean hasMappedSourceAndMissingTarget(Overlap overlap, Edge edge)", "full_signature": "private boolean hasMappedSourceAndMissingTarget(Overlap overlap, Edge edge)", "class_method_signature": "OnlyDefPrefixNoViolationPredicate.hasMappedSourceAndMissingTarget(Overlap overlap, Edge edge)", "testcase": false, "constructor": false}, {"identifier": "connectsToMappedNode", "parameters": "(Edge edge, Overlap overlap)", "modifiers": "private", "return": "boolean", "signature": "boolean connectsToMappedNode(Edge edge, Overlap overlap)", "full_signature": "private boolean connectsToMappedNode(Edge edge, Overlap overlap)", "class_method_signature": "OnlyDefPrefixNoViolationPredicate.connectsToMappedNode(Edge edge, Overlap overlap)", "testcase": false, "constructor": false}], "file": "mubench/src/main/java/de/tu_darmstadt/stg/mudetect/OnlyDefPrefixNoViolationPredicate.java"}, "focal_method": {"identifier": "apply", "parameters": "(Overlap overlap)", "modifiers": "@Override public", "return": "Optional<Boolean>", "body": "@Override\n    public Optional<Boolean> apply(Overlap overlap) {\n        Set<Edge> missingDirectConnectionEdges = overlap.getMissingEdges().stream()\n                .filter(Edge::isDirect)\n                .filter(edge -> connectsToMappedNode(edge, overlap))\n                .collect(Collectors.toSet());\n\n        if (allHaveMappedSourceAndMissingTarget(missingDirectConnectionEdges, overlap)) {\n            Set<Node> missingEdgeSources = getSources(missingDirectConnectionEdges);\n            if (isSingleDataNode(missingEdgeSources) || isProducerDataPair(missingEdgeSources, overlap)) {\n                return Optional.of(false);\n            }\n        }\n\n        return Optional.empty();\n    }", "signature": "Optional<Boolean> apply(Overlap overlap)", "full_signature": "@Override public Optional<Boolean> apply(Overlap overlap)", "class_method_signature": "OnlyDefPrefixNoViolationPredicate.apply(Overlap overlap)", "testcase": false, "constructor": false, "invocations": ["collect", "filter", "filter", "stream", "getMissingEdges", "connectsToMappedNode", "toSet", "allHaveMappedSourceAndMissingTarget", "getSources", "isSingleDataNode", "isProducerDataPair", "of", "empty"]}, "repository": {"repo_id": 99890719, "url": "https://github.com/stg-tud/MUDetect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 5, "size": 11835, "license": "licensed"}}