{"test_class": {"identifier": "AutomationGroupResourceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public MockitoRule mockito = MockitoJUnit.rule();", "modifier": "@Rule public", "type": "MockitoRule", "declarator": "mockito = MockitoJUnit.rule()", "var_name": "mockito"}, {"original_string": "@Mock GroupDAO groupDAO;", "modifier": "@Mock", "type": "GroupDAO", "declarator": "groupDAO", "var_name": "groupDAO"}, {"original_string": "@Mock AclDAO aclDAO;", "modifier": "@Mock", "type": "AclDAO", "declarator": "aclDAO", "var_name": "aclDAO"}, {"original_string": "ApiDate now = ApiDate.now();", "modifier": "", "type": "ApiDate", "declarator": "now = ApiDate.now()", "var_name": "now"}, {"original_string": "AutomationClient automation = AutomationClient.of(\n      new Client(1, \"automation\", \"Automation client\", null, now, \"test\", now, \"test\", null, null, true,\n          true));", "modifier": "", "type": "AutomationClient", "declarator": "automation = AutomationClient.of(\n      new Client(1, \"automation\", \"Automation client\", null, now, \"test\", now, \"test\", null, null, true,\n          true))", "var_name": "automation"}, {"original_string": "AuditLog auditLog = new SimpleLogger();", "modifier": "", "type": "AuditLog", "declarator": "auditLog = new SimpleLogger()", "var_name": "auditLog"}, {"original_string": "AutomationGroupResource resource;", "modifier": "", "type": "AutomationGroupResource", "declarator": "resource", "var_name": "resource"}], "file": "server/src/test/java/keywhiz/service/resources/automation/AutomationGroupResourceTest.java"}, "test_case": {"identifier": "findGroupByName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void findGroupByName() {\n    Group group = new Group(50, \"testGroup\", \"testing group\", now, \"automation client\", now,\n        \"automation client\", ImmutableMap.of(\"app\", \"keywhiz\"));\n    when(groupDAO.getGroup(\"testGroup\")).thenReturn(Optional.of(group));\n    when(aclDAO.getClientsFor(group)).thenReturn(ImmutableSet.of());\n    when(aclDAO.getSanitizedSecretsFor(group)).thenReturn(ImmutableSet.of());\n\n    GroupDetailResponse expectedResponse = GroupDetailResponse.fromGroup(group,\n        ImmutableList.of(), ImmutableList.of());\n    Response response = resource.getGroupByName(automation, Optional.of(\"testGroup\"));\n    assertThat(response.getEntity()).isEqualTo(expectedResponse);\n  }", "signature": "void findGroupByName()", "full_signature": "@Test public void findGroupByName()", "class_method_signature": "AutomationGroupResourceTest.findGroupByName()", "testcase": true, "constructor": false, "invocations": ["of", "thenReturn", "when", "getGroup", "of", "thenReturn", "when", "getClientsFor", "of", "thenReturn", "when", "getSanitizedSecretsFor", "of", "fromGroup", "of", "of", "getGroupByName", "of", "isEqualTo", "assertThat", "getEntity"]}, "focal_class": {"identifier": "AutomationGroupResource", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(AutomationGroupResource.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AutomationGroupResource.class)", "var_name": "logger"}, {"original_string": "private final GroupDAO groupDAO;", "modifier": "private final", "type": "GroupDAO", "declarator": "groupDAO", "var_name": "groupDAO"}, {"original_string": "private final AclDAO aclDAO;", "modifier": "private final", "type": "AclDAO", "declarator": "aclDAO", "var_name": "aclDAO"}, {"original_string": "private final AuditLog auditLog;", "modifier": "private final", "type": "AuditLog", "declarator": "auditLog", "var_name": "auditLog"}], "methods": [{"identifier": "AutomationGroupResource", "parameters": "(GroupDAOFactory groupDAOFactory, AclDAOFactory aclDAOFactory,\n      AuditLog auditLog)", "modifiers": "@Inject public", "return": "", "signature": " AutomationGroupResource(GroupDAOFactory groupDAOFactory, AclDAOFactory aclDAOFactory,\n      AuditLog auditLog)", "full_signature": "@Inject public  AutomationGroupResource(GroupDAOFactory groupDAOFactory, AclDAOFactory aclDAOFactory,\n      AuditLog auditLog)", "class_method_signature": "AutomationGroupResource.AutomationGroupResource(GroupDAOFactory groupDAOFactory, AclDAOFactory aclDAOFactory,\n      AuditLog auditLog)", "testcase": false, "constructor": true}, {"identifier": "AutomationGroupResource", "parameters": "(GroupDAO groupDAO, AclDAO aclDAO, AuditLog auditLog)", "modifiers": "@VisibleForTesting", "return": "", "signature": " AutomationGroupResource(GroupDAO groupDAO, AclDAO aclDAO, AuditLog auditLog)", "full_signature": "@VisibleForTesting  AutomationGroupResource(GroupDAO groupDAO, AclDAO aclDAO, AuditLog auditLog)", "class_method_signature": "AutomationGroupResource.AutomationGroupResource(GroupDAO groupDAO, AclDAO aclDAO, AuditLog auditLog)", "testcase": false, "constructor": true}, {"identifier": "getGroupById", "parameters": "(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"groupId\") LongParam groupId)", "modifiers": "@Timed @ExceptionMetered @GET @Path(\"{groupId}\") public", "return": "GroupDetailResponse", "signature": "GroupDetailResponse getGroupById(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"groupId\") LongParam groupId)", "full_signature": "@Timed @ExceptionMetered @GET @Path(\"{groupId}\") public GroupDetailResponse getGroupById(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"groupId\") LongParam groupId)", "class_method_signature": "AutomationGroupResource.getGroupById(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"groupId\") LongParam groupId)", "testcase": false, "constructor": false}, {"identifier": "getGroupByName", "parameters": "(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name)", "modifiers": "@Timed @ExceptionMetered @GET public", "return": "Response", "signature": "Response getGroupByName(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name)", "full_signature": "@Timed @ExceptionMetered @GET public Response getGroupByName(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name)", "class_method_signature": "AutomationGroupResource.getGroupByName(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name)", "testcase": false, "constructor": false}, {"identifier": "createGroup", "parameters": "(\n      @Auth AutomationClient automationClient,\n      @Valid CreateGroupRequest groupRequest)", "modifiers": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public", "return": "Group", "signature": "Group createGroup(\n      @Auth AutomationClient automationClient,\n      @Valid CreateGroupRequest groupRequest)", "full_signature": "@Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public Group createGroup(\n      @Auth AutomationClient automationClient,\n      @Valid CreateGroupRequest groupRequest)", "class_method_signature": "AutomationGroupResource.createGroup(\n      @Auth AutomationClient automationClient,\n      @Valid CreateGroupRequest groupRequest)", "testcase": false, "constructor": false}, {"identifier": "deleteGroup", "parameters": "(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"groupId\") LongParam groupId)", "modifiers": "@Timed @ExceptionMetered @DELETE @Path(\"{groupId}\") public", "return": "Response", "signature": "Response deleteGroup(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"groupId\") LongParam groupId)", "full_signature": "@Timed @ExceptionMetered @DELETE @Path(\"{groupId}\") public Response deleteGroup(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"groupId\") LongParam groupId)", "class_method_signature": "AutomationGroupResource.deleteGroup(\n      @Auth AutomationClient automationClient,\n      @PathParam(\"groupId\") LongParam groupId)", "testcase": false, "constructor": false}], "file": "server/src/main/java/keywhiz/service/resources/automation/AutomationGroupResource.java"}, "focal_method": {"identifier": "getGroupByName", "parameters": "(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name)", "modifiers": "@Timed @ExceptionMetered @GET public", "return": "Response", "body": "@Timed @ExceptionMetered\n  @GET\n  public Response getGroupByName(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name) {\n    if (name.isPresent()) {\n      Group group = groupDAO.getGroup(name.get()).orElseThrow(NotFoundException::new);\n\n      ImmutableList<Client> clients = ImmutableList.copyOf(aclDAO.getClientsFor(group));\n      ImmutableList<SanitizedSecret> sanitizedSecrets =\n          ImmutableList.copyOf(aclDAO.getSanitizedSecretsFor(group));\n      return Response.ok()\n          .entity(GroupDetailResponse.fromGroup(group, sanitizedSecrets, clients))\n          .build();\n    }\n\n    ImmutableList<SanitizedSecret> emptySecrets = ImmutableList.of();\n    ImmutableList<Client> emptyClients = ImmutableList.of();\n    List<GroupDetailResponse> groups = groupDAO.getGroups().stream()\n        .map((g) -> GroupDetailResponse.fromGroup(g, emptySecrets, emptyClients))\n        .collect(toList());\n    return Response.ok()\n        .entity(groups)\n        .build();\n  }", "signature": "Response getGroupByName(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name)", "full_signature": "@Timed @ExceptionMetered @GET public Response getGroupByName(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name)", "class_method_signature": "AutomationGroupResource.getGroupByName(\n      @Auth AutomationClient automationClient,\n      @QueryParam(\"name\") Optional<String> name)", "testcase": false, "constructor": false, "invocations": ["isPresent", "orElseThrow", "getGroup", "get", "copyOf", "getClientsFor", "copyOf", "getSanitizedSecretsFor", "build", "entity", "ok", "fromGroup", "of", "of", "collect", "map", "stream", "getGroups", "fromGroup", "toList", "build", "entity", "ok"]}, "repository": {"repo_id": 32866430, "url": "https://github.com/square/keywhiz", "stars": 2186, "created": "3/25/2015 1:31:39 PM +00:00", "updates": "2020-01-24T18:57:02+00:00", "fork": "False", "license": "licensed"}}