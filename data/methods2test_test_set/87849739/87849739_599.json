{"test_class": {"identifier": "AbstractSubscriptionsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final ActorRef ACTOR1 = new MockActorRef(\"actor1\");", "modifier": "protected static final", "type": "ActorRef", "declarator": "ACTOR1 = new MockActorRef(\"actor1\")", "var_name": "ACTOR1"}, {"original_string": "protected static final ActorRef ACTOR2 = new MockActorRef(\"actor2\");", "modifier": "protected static final", "type": "ActorRef", "declarator": "ACTOR2 = new MockActorRef(\"actor2\")", "var_name": "ACTOR2"}, {"original_string": "protected static final ActorRef ACTOR3 = new MockActorRef(\"actor3\");", "modifier": "protected static final", "type": "ActorRef", "declarator": "ACTOR3 = new MockActorRef(\"actor3\")", "var_name": "ACTOR3"}, {"original_string": "protected static final ActorRef ACTOR4 = new MockActorRef(\"actor4\");", "modifier": "protected static final", "type": "ActorRef", "declarator": "ACTOR4 = new MockActorRef(\"actor4\")", "var_name": "ACTOR4"}], "file": "services/utils/pubsub/src/test/java/org/eclipse/ditto/services/utils/pubsub/ddata/AbstractSubscriptionsTest.java"}, "test_case": {"identifier": "testVennDiagramMembership", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testVennDiagramMembership() {\n        final AbstractSubscriptions<H, T> underTest = getVennDiagram();\n        final SubscriptionsReader reader = underTest.snapshot();\n        assertThat(reader.getSubscribers(singleton(\"1\"))).containsExactlyInAnyOrder(ACTOR1);\n        assertThat(reader.getSubscribers(singleton(\"2\"))).containsExactlyInAnyOrder(ACTOR1, ACTOR2);\n        assertThat(reader.getSubscribers(singleton(\"3\"))).containsExactlyInAnyOrder(ACTOR2);\n        assertThat(reader.getSubscribers(singleton(\"4\"))).containsExactlyInAnyOrder(ACTOR1, ACTOR3);\n        assertThat(reader.getSubscribers(singleton(\"5\"))).containsExactlyInAnyOrder(ACTOR1, ACTOR2, ACTOR3);\n        assertThat(reader.getSubscribers(singleton(\"6\"))).containsExactlyInAnyOrder(ACTOR2, ACTOR3);\n        assertThat(reader.getSubscribers(singleton(\"7\"))).containsExactlyInAnyOrder(ACTOR3);\n        assertThat(underTest.subscriberToTopic.size()).isEqualTo(3);\n        assertThat(underTest.topicToData.size()).isEqualTo(7);\n    }", "signature": "void testVennDiagramMembership()", "full_signature": "@Test public void testVennDiagramMembership()", "class_method_signature": "AbstractSubscriptionsTest.testVennDiagramMembership()", "testcase": true, "constructor": false, "invocations": ["getVennDiagram", "snapshot", "containsExactlyInAnyOrder", "assertThat", "getSubscribers", "singleton", "containsExactlyInAnyOrder", "assertThat", "getSubscribers", "singleton", "containsExactlyInAnyOrder", "assertThat", "getSubscribers", "singleton", "containsExactlyInAnyOrder", "assertThat", "getSubscribers", "singleton", "containsExactlyInAnyOrder", "assertThat", "getSubscribers", "singleton", "containsExactlyInAnyOrder", "assertThat", "getSubscribers", "singleton", "containsExactlyInAnyOrder", "assertThat", "getSubscribers", "singleton", "isEqualTo", "assertThat", "size", "isEqualTo", "assertThat", "size"]}, "focal_class": {"identifier": "AbstractSubscriptions", "superclass": "", "interfaces": "implements Subscriptions<T>", "fields": [{"original_string": "protected final Map<ActorRef, Set<String>> subscriberToTopic;", "modifier": "protected final", "type": "Map<ActorRef, Set<String>>", "declarator": "subscriberToTopic", "var_name": "subscriberToTopic"}, {"original_string": "protected final Map<ActorRef, Predicate<Collection<String>>> subscriberToFilter;", "modifier": "protected final", "type": "Map<ActorRef, Predicate<Collection<String>>>", "declarator": "subscriberToFilter", "var_name": "subscriberToFilter"}, {"original_string": "protected final Map<String, TopicData<H>> topicToData;", "modifier": "protected final", "type": "Map<String, TopicData<H>>", "declarator": "topicToData", "var_name": "topicToData"}], "methods": [{"identifier": "AbstractSubscriptions", "parameters": "(\n            final Map<ActorRef, Set<String>> subscriberToTopic,\n            final Map<ActorRef, Predicate<Collection<String>>> subscriberToFilter,\n            final Map<String, TopicData<H>> topicToData)", "modifiers": "protected", "return": "", "signature": " AbstractSubscriptions(\n            final Map<ActorRef, Set<String>> subscriberToTopic,\n            final Map<ActorRef, Predicate<Collection<String>>> subscriberToFilter,\n            final Map<String, TopicData<H>> topicToData)", "full_signature": "protected  AbstractSubscriptions(\n            final Map<ActorRef, Set<String>> subscriberToTopic,\n            final Map<ActorRef, Predicate<Collection<String>>> subscriberToFilter,\n            final Map<String, TopicData<H>> topicToData)", "class_method_signature": "AbstractSubscriptions.AbstractSubscriptions(\n            final Map<ActorRef, Set<String>> subscriberToTopic,\n            final Map<ActorRef, Predicate<Collection<String>>> subscriberToFilter,\n            final Map<String, TopicData<H>> topicToData)", "testcase": false, "constructor": true}, {"identifier": "hashTopic", "parameters": "(final String topic)", "modifiers": "protected abstract", "return": "H", "signature": "H hashTopic(final String topic)", "full_signature": "protected abstract H hashTopic(final String topic)", "class_method_signature": "AbstractSubscriptions.hashTopic(final String topic)", "testcase": false, "constructor": false}, {"identifier": "onNewTopic", "parameters": "(final TopicData<H> newTopic)", "modifiers": "protected abstract", "return": "void", "signature": "void onNewTopic(final TopicData<H> newTopic)", "full_signature": "protected abstract void onNewTopic(final TopicData<H> newTopic)", "class_method_signature": "AbstractSubscriptions.onNewTopic(final TopicData<H> newTopic)", "testcase": false, "constructor": false}, {"identifier": "onRemovedTopic", "parameters": "(final TopicData<H> removedTopic)", "modifiers": "protected abstract", "return": "void", "signature": "void onRemovedTopic(final TopicData<H> removedTopic)", "full_signature": "protected abstract void onRemovedTopic(final TopicData<H> removedTopic)", "class_method_signature": "AbstractSubscriptions.onRemovedTopic(final TopicData<H> removedTopic)", "testcase": false, "constructor": false}, {"identifier": "subscribe", "parameters": "(final ActorRef subscriber,\n            final Set<String> topics,\n            final Predicate<Collection<String>> filter)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean subscribe(final ActorRef subscriber,\n            final Set<String> topics,\n            final Predicate<Collection<String>> filter)", "full_signature": "@Override public boolean subscribe(final ActorRef subscriber,\n            final Set<String> topics,\n            final Predicate<Collection<String>> filter)", "class_method_signature": "AbstractSubscriptions.subscribe(final ActorRef subscriber,\n            final Set<String> topics,\n            final Predicate<Collection<String>> filter)", "testcase": false, "constructor": false}, {"identifier": "unsubscribe", "parameters": "(final ActorRef subscriber, final Set<String> topics)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean unsubscribe(final ActorRef subscriber, final Set<String> topics)", "full_signature": "@Override public boolean unsubscribe(final ActorRef subscriber, final Set<String> topics)", "class_method_signature": "AbstractSubscriptions.unsubscribe(final ActorRef subscriber, final Set<String> topics)", "testcase": false, "constructor": false}, {"identifier": "removeSubscriber", "parameters": "(final ActorRef subscriber)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean removeSubscriber(final ActorRef subscriber)", "full_signature": "@Override public boolean removeSubscriber(final ActorRef subscriber)", "class_method_signature": "AbstractSubscriptions.removeSubscriber(final ActorRef subscriber)", "testcase": false, "constructor": false}, {"identifier": "contains", "parameters": "(final ActorRef subscriber)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean contains(final ActorRef subscriber)", "full_signature": "@Override public boolean contains(final ActorRef subscriber)", "class_method_signature": "AbstractSubscriptions.contains(final ActorRef subscriber)", "testcase": false, "constructor": false}, {"identifier": "countTopics", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int countTopics()", "full_signature": "@Override public int countTopics()", "class_method_signature": "AbstractSubscriptions.countTopics()", "testcase": false, "constructor": false}, {"identifier": "snapshot", "parameters": "()", "modifiers": "@Override public", "return": "SubscriptionsReader", "signature": "SubscriptionsReader snapshot()", "full_signature": "@Override public SubscriptionsReader snapshot()", "class_method_signature": "AbstractSubscriptions.snapshot()", "testcase": false, "constructor": false}, {"identifier": "exportSubscriberToFilter", "parameters": "()", "modifiers": "private", "return": "Map<ActorRef, Predicate<Collection<String>>>", "signature": "Map<ActorRef, Predicate<Collection<String>>> exportSubscriberToFilter()", "full_signature": "private Map<ActorRef, Predicate<Collection<String>>> exportSubscriberToFilter()", "class_method_signature": "AbstractSubscriptions.exportSubscriberToFilter()", "testcase": false, "constructor": false}, {"identifier": "exportTopicData", "parameters": "()", "modifiers": "private", "return": "Map<String, Set<ActorRef>>", "signature": "Map<String, Set<ActorRef>> exportTopicData()", "full_signature": "private Map<String, Set<ActorRef>> exportTopicData()", "class_method_signature": "AbstractSubscriptions.exportTopicData()", "testcase": false, "constructor": false}, {"identifier": "removeSubscriberForTopics", "parameters": "(final ActorRef subscriber, final Collection<String> topics)", "modifiers": "private", "return": "boolean", "signature": "boolean removeSubscriberForTopics(final ActorRef subscriber, final Collection<String> topics)", "full_signature": "private boolean removeSubscriberForTopics(final ActorRef subscriber, final Collection<String> topics)", "class_method_signature": "AbstractSubscriptions.removeSubscriberForTopics(final ActorRef subscriber, final Collection<String> topics)", "testcase": false, "constructor": false}, {"identifier": "unionSet", "parameters": "(final Set<String> s1, final Set<String> s2)", "modifiers": "private static", "return": "Set<String>", "signature": "Set<String> unionSet(final Set<String> s1, final Set<String> s2)", "full_signature": "private static Set<String> unionSet(final Set<String> s1, final Set<String> s2)", "class_method_signature": "AbstractSubscriptions.unionSet(final Set<String> s1, final Set<String> s2)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object other)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object other)", "full_signature": "@Override public boolean equals(final Object other)", "class_method_signature": "AbstractSubscriptions.equals(final Object other)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "AbstractSubscriptions.hashCode()", "testcase": false, "constructor": false}], "file": "services/utils/pubsub/src/main/java/org/eclipse/ditto/services/utils/pubsub/ddata/AbstractSubscriptions.java"}, "focal_method": {"identifier": "snapshot", "parameters": "()", "modifiers": "@Override public", "return": "SubscriptionsReader", "body": "@Override\n    public SubscriptionsReader snapshot() {\n        return SubscriptionsReader.of(exportTopicData(), exportSubscriberToFilter());\n    }", "signature": "SubscriptionsReader snapshot()", "full_signature": "@Override public SubscriptionsReader snapshot()", "class_method_signature": "AbstractSubscriptions.snapshot()", "testcase": false, "constructor": false, "invocations": ["of", "exportTopicData", "exportSubscriberToFilter"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}