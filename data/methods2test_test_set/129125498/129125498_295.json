{"test_class": {"identifier": "LegacyDetectorRepositoryImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@InjectMocks\n    private LegacyDetectorRepository repoUnderTest = new LegacyDetectorRepositoryImpl();", "modifier": "@InjectMocks\n    private", "type": "LegacyDetectorRepository", "declarator": "repoUnderTest = new LegacyDetectorRepositoryImpl()", "var_name": "repoUnderTest"}, {"original_string": "@Mock\n    private LegacyElasticSearchClient legacyElasticSearchClient;", "modifier": "@Mock\n    private", "type": "LegacyElasticSearchClient", "declarator": "legacyElasticSearchClient", "var_name": "legacyElasticSearchClient"}, {"original_string": "@Mock\n    private ElasticsearchUtil elasticsearchUtil;", "modifier": "@Mock\n    private", "type": "ElasticsearchUtil", "declarator": "elasticsearchUtil", "var_name": "elasticsearchUtil"}, {"original_string": "@Mock\n    private ObjectMapperUtil objectMapperUtil;", "modifier": "@Mock\n    private", "type": "ObjectMapperUtil", "declarator": "objectMapperUtil", "var_name": "objectMapperUtil"}, {"original_string": "private UUID someUuid;", "modifier": "private", "type": "UUID", "declarator": "someUuid", "var_name": "someUuid"}, {"original_string": "private DetectorDocument detector;", "modifier": "private", "type": "DetectorDocument", "declarator": "detector", "var_name": "detector"}, {"original_string": "private DetectorDocument illegalParamsDetector;", "modifier": "private", "type": "DetectorDocument", "declarator": "illegalParamsDetector", "var_name": "illegalParamsDetector"}, {"original_string": "private IndexResponse indexResponse;", "modifier": "private", "type": "IndexResponse", "declarator": "indexResponse", "var_name": "indexResponse"}, {"original_string": "private SearchResponse searchResponse;", "modifier": "private", "type": "SearchResponse", "declarator": "searchResponse", "var_name": "searchResponse"}, {"original_string": "private DeleteResponse deleteResponse;", "modifier": "private", "type": "DeleteResponse", "declarator": "deleteResponse", "var_name": "deleteResponse"}, {"original_string": "private GetResponse getResponse;", "modifier": "private", "type": "GetResponse", "declarator": "getResponse", "var_name": "getResponse"}, {"original_string": "private List<DetectorDocument> detectors = new ArrayList<>();", "modifier": "private", "type": "List<DetectorDocument>", "declarator": "detectors = new ArrayList<>()", "var_name": "detectors"}], "file": "modelservice/src/test/java/com/expedia/adaptivealerting/modelservice/repo/impl/LegacyDetectorRepositoryImplTest.java"}, "test_case": {"identifier": "testCreateDetector", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateDetector() {\n        val mom = ObjectMother.instance();\n        val document = mom.buildDetectorDocument();\n\n        // Disabled these because the contract does not require returning an implementation-specific ID. [WLW]\n//        val actualCreationId = repoUnderTest.createDetector(document);\n//        assertNotNull(actualCreationId);\n//        assertEquals(\"1\", actualCreationId);\n\n        repoUnderTest.createDetector(document);\n    }", "signature": "void testCreateDetector()", "full_signature": "@Test public void testCreateDetector()", "class_method_signature": "LegacyDetectorRepositoryImplTest.testCreateDetector()", "testcase": true, "constructor": false, "invocations": ["instance", "buildDetectorDocument", "createDetector"]}, "focal_class": {"identifier": "LegacyDetectorRepositoryImpl", "superclass": "", "interfaces": "implements LegacyDetectorRepository", "fields": [{"original_string": "private static final String DETECTOR_INDEX = \"detectors\";", "modifier": "private static final", "type": "String", "declarator": "DETECTOR_INDEX = \"detectors\"", "var_name": "DETECTOR_INDEX"}, {"original_string": "private static final String DETECTOR_DOC_TYPE = \"detector\";", "modifier": "private static final", "type": "String", "declarator": "DETECTOR_DOC_TYPE = \"detector\"", "var_name": "DETECTOR_DOC_TYPE"}, {"original_string": "private static final int DEFAULT_ES_RESULTS_SIZE = 500;", "modifier": "private static final", "type": "int", "declarator": "DEFAULT_ES_RESULTS_SIZE = 500", "var_name": "DEFAULT_ES_RESULTS_SIZE"}, {"original_string": "@Autowired\n    private LegacyElasticSearchClient legacyElasticSearchClient;", "modifier": "@Autowired\n    private", "type": "LegacyElasticSearchClient", "declarator": "legacyElasticSearchClient", "var_name": "legacyElasticSearchClient"}, {"original_string": "@Autowired\n    private ObjectMapperUtil objectMapperUtil;", "modifier": "@Autowired\n    private", "type": "ObjectMapperUtil", "declarator": "objectMapperUtil", "var_name": "objectMapperUtil"}, {"original_string": "@Autowired\n    private ElasticsearchUtil elasticsearchUtil;", "modifier": "@Autowired\n    private", "type": "ElasticsearchUtil", "declarator": "elasticsearchUtil", "var_name": "elasticsearchUtil"}], "methods": [{"identifier": "createDetector", "parameters": "(DetectorDocument document)", "modifiers": "@Override public", "return": "UUID", "signature": "UUID createDetector(DetectorDocument document)", "full_signature": "@Override public UUID createDetector(DetectorDocument document)", "class_method_signature": "LegacyDetectorRepositoryImpl.createDetector(DetectorDocument document)", "testcase": false, "constructor": false}, {"identifier": "deleteDetector", "parameters": "(String uuid)", "modifiers": "@Override public", "return": "void", "signature": "void deleteDetector(String uuid)", "full_signature": "@Override public void deleteDetector(String uuid)", "class_method_signature": "LegacyDetectorRepositoryImpl.deleteDetector(String uuid)", "testcase": false, "constructor": false}, {"identifier": "updateDetector", "parameters": "(String uuid, DetectorDocument document)", "modifiers": "@Override public", "return": "void", "signature": "void updateDetector(String uuid, DetectorDocument document)", "full_signature": "@Override public void updateDetector(String uuid, DetectorDocument document)", "class_method_signature": "LegacyDetectorRepositoryImpl.updateDetector(String uuid, DetectorDocument document)", "testcase": false, "constructor": false}, {"identifier": "findByUuid", "parameters": "(String uuid)", "modifiers": "@Override public", "return": "DetectorDocument", "signature": "DetectorDocument findByUuid(String uuid)", "full_signature": "@Override public DetectorDocument findByUuid(String uuid)", "class_method_signature": "LegacyDetectorRepositoryImpl.findByUuid(String uuid)", "testcase": false, "constructor": false}, {"identifier": "findByCreatedBy", "parameters": "(String user)", "modifiers": "@Override public", "return": "List<DetectorDocument>", "signature": "List<DetectorDocument> findByCreatedBy(String user)", "full_signature": "@Override public List<DetectorDocument> findByCreatedBy(String user)", "class_method_signature": "LegacyDetectorRepositoryImpl.findByCreatedBy(String user)", "testcase": false, "constructor": false}, {"identifier": "toggleDetector", "parameters": "(String uuid, Boolean enabled)", "modifiers": "@Override public", "return": "void", "signature": "void toggleDetector(String uuid, Boolean enabled)", "full_signature": "@Override public void toggleDetector(String uuid, Boolean enabled)", "class_method_signature": "LegacyDetectorRepositoryImpl.toggleDetector(String uuid, Boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "trustDetector", "parameters": "(String uuid, Boolean trusted)", "modifiers": "@Override public", "return": "void", "signature": "void trustDetector(String uuid, Boolean trusted)", "full_signature": "@Override public void trustDetector(String uuid, Boolean trusted)", "class_method_signature": "LegacyDetectorRepositoryImpl.trustDetector(String uuid, Boolean trusted)", "testcase": false, "constructor": false}, {"identifier": "getLastUpdatedDetectors", "parameters": "(long interval)", "modifiers": "@Override public", "return": "List<DetectorDocument>", "signature": "List<DetectorDocument> getLastUpdatedDetectors(long interval)", "full_signature": "@Override public List<DetectorDocument> getLastUpdatedDetectors(long interval)", "class_method_signature": "LegacyDetectorRepositoryImpl.getLastUpdatedDetectors(long interval)", "testcase": false, "constructor": false}, {"identifier": "getLastUpdatedDetectors", "parameters": "(String fromDate, String toDate)", "modifiers": "@Override public", "return": "List<DetectorDocument>", "signature": "List<DetectorDocument> getLastUpdatedDetectors(String fromDate, String toDate)", "full_signature": "@Override public List<DetectorDocument> getLastUpdatedDetectors(String fromDate, String toDate)", "class_method_signature": "LegacyDetectorRepositoryImpl.getLastUpdatedDetectors(String fromDate, String toDate)", "testcase": false, "constructor": false}, {"identifier": "getDetectorsFromElasticSearch", "parameters": "(SearchRequest searchRequest)", "modifiers": "private", "return": "List<DetectorDocument>", "signature": "List<DetectorDocument> getDetectorsFromElasticSearch(SearchRequest searchRequest)", "full_signature": "private List<DetectorDocument> getDetectorsFromElasticSearch(SearchRequest searchRequest)", "class_method_signature": "LegacyDetectorRepositoryImpl.getDetectorsFromElasticSearch(SearchRequest searchRequest)", "testcase": false, "constructor": false}, {"identifier": "getElasticSearchDetector", "parameters": "(DetectorDocument detector)", "modifiers": "private", "return": "DetectorDocument", "signature": "DetectorDocument getElasticSearchDetector(DetectorDocument detector)", "full_signature": "private DetectorDocument getElasticSearchDetector(DetectorDocument detector)", "class_method_signature": "LegacyDetectorRepositoryImpl.getElasticSearchDetector(DetectorDocument detector)", "testcase": false, "constructor": false}], "file": "modelservice/src/main/java/com/expedia/adaptivealerting/modelservice/repo/impl/LegacyDetectorRepositoryImpl.java"}, "focal_method": {"identifier": "createDetector", "parameters": "(DetectorDocument document)", "modifiers": "@Override public", "return": "UUID", "body": "@Override\n    public UUID createDetector(DetectorDocument document) {\n        notNull(document, \"document can't be null\");\n        isNull(document.getUuid(), \"Required: document.uuid == null\");\n\n        val uuid = UUID.randomUUID();\n        document.setUuid(uuid);\n        Date nowDate = DateUtil.now();\n\n        // Force setting last update time to current time. Although deprecated, this field is still used to determine what changed for cache loading.\n        // In the future this can change to the field within Meta\n        document.setLastUpdateTimestamp(nowDate);\n\n        // Set meta fields if none are provided\n        if (document.getMeta() == null) {\n            DetectorDocument.Meta metaBlock = new DetectorDocument.Meta();\n            metaBlock.setDateCreated(nowDate);\n            metaBlock.setCreatedBy(document.getCreatedBy());\n            document.setMeta(metaBlock);\n        } else {\n            DetectorDocument.Meta metaBlock = document.getMeta();\n            metaBlock.setDateCreated(nowDate);\n            if (metaBlock.getCreatedBy() == null) {\n                metaBlock.setCreatedBy(document.getCreatedBy());\n            }\n        }\n\n        // Do this after setting the UUID since validation checks for the UUID.\n        RequestValidator.validateDetectorDocument(document);\n\n        val indexRequest = new IndexRequest(DETECTOR_INDEX, DETECTOR_DOC_TYPE, uuid.toString());\n        val json = objectMapperUtil.convertToString(getElasticSearchDetector(document));\n\n        // FIXME We should not be returning an implementation-specific ID here. (This is an Elasticsearch document ID.)\n//        return elasticsearchUtil.index(indexRequest, json).getId();\n        elasticsearchUtil.index(indexRequest, json);\n        return uuid;\n    }", "signature": "UUID createDetector(DetectorDocument document)", "full_signature": "@Override public UUID createDetector(DetectorDocument document)", "class_method_signature": "LegacyDetectorRepositoryImpl.createDetector(DetectorDocument document)", "testcase": false, "constructor": false, "invocations": ["notNull", "isNull", "getUuid", "randomUUID", "setUuid", "now", "setLastUpdateTimestamp", "getMeta", "setDateCreated", "setCreatedBy", "getCreatedBy", "setMeta", "getMeta", "setDateCreated", "getCreatedBy", "setCreatedBy", "getCreatedBy", "validateDetectorDocument", "toString", "convertToString", "getElasticSearchDetector", "index"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}