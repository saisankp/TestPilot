{"test_class": {"identifier": "ConfigDefTest", "superclass": "", "interfaces": "", "fields": [], "file": "config/src/test/java/io/confluent/common/config/ConfigDefTest.java"}, "test_case": {"identifier": "testClassLoading", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testClassLoading() throws IOException {\n    ClassLoader systemLoader = Thread.currentThread().getContextClassLoader();\n\n    // test with system classloader\n    String configName = \"type.class.property\";\n    String configNameDefault = ConfigUtils.class.getName();\n\n    ConfigDef configDef = new ConfigDef();\n    configDef.define(configName, Type.CLASS, configNameDefault,\n        ConfigDef.Importance.MEDIUM, \"system class\");\n\n    AbstractConfig config = new AbstractConfig(configDef, new HashMap<>());\n\n    Class<?> systemKlass = config.getClass(configName);\n    assertEquals(systemLoader, systemKlass.getClassLoader());\n\n    // test with custom, child-first, classloader\n    Set<String> allowedKlasses = Collections.singleton(configNameDefault);\n    List<URL> pluginUrls = Collections.singletonList(Paths.get(\"target/classes/\").toUri().toURL());\n    URLClassLoader pluginLoader = new PluginClassLoader(pluginUrls.toArray(new URL[0]), systemLoader, allowedKlasses);\n\n    try {\n      Thread.currentThread().setContextClassLoader(pluginLoader);\n\n      configDef = new ConfigDef();\n      configDef.define(configName, Type.CLASS, configNameDefault, ConfigDef.Importance.MEDIUM, \"plugin class\");\n\n      config = new AbstractConfig(configDef, new HashMap<>());\n\n      Class<?> pluginKlass = config.getClass(configName);\n      assertEquals(pluginLoader, pluginKlass.getClassLoader());\n      assertNotEquals(pluginKlass, systemKlass);\n      assertEquals(pluginKlass.getName(), systemKlass.getName());\n    } finally {\n      Thread.currentThread().setContextClassLoader(systemLoader);\n    }\n}", "signature": "void testClassLoading()", "full_signature": "@Test public void testClassLoading()", "class_method_signature": "ConfigDefTest.testClassLoading()", "testcase": true, "constructor": false, "invocations": ["getContextClassLoader", "currentThread", "getName", "define", "getClass", "assertEquals", "getClassLoader", "singleton", "singletonList", "toURL", "toUri", "get", "toArray", "setContextClassLoader", "currentThread", "define", "getClass", "assertEquals", "getClassLoader", "assertNotEquals", "assertEquals", "getName", "getName", "setContextClassLoader", "currentThread"]}, "focal_class": {"identifier": "ConfigDef", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final Object NO_DEFAULT_VALUE = new Object();", "modifier": "protected static final", "type": "Object", "declarator": "NO_DEFAULT_VALUE = new Object()", "var_name": "NO_DEFAULT_VALUE"}, {"original_string": "private final Map<String, ConfigKey> configKeys;", "modifier": "private final", "type": "Map<String, ConfigKey>", "declarator": "configKeys", "var_name": "configKeys"}], "methods": [{"identifier": "ConfigDef", "parameters": "()", "modifiers": "public", "return": "", "signature": " ConfigDef()", "full_signature": "public  ConfigDef()", "class_method_signature": "ConfigDef.ConfigDef()", "testcase": false, "constructor": true}, {"identifier": "ConfigDef", "parameters": "(ConfigDef configDef)", "modifiers": "public", "return": "", "signature": " ConfigDef(ConfigDef configDef)", "full_signature": "public  ConfigDef(ConfigDef configDef)", "class_method_signature": "ConfigDef.ConfigDef(ConfigDef configDef)", "testcase": false, "constructor": true}, {"identifier": "names", "parameters": "()", "modifiers": "public", "return": "Set<String>", "signature": "Set<String> names()", "full_signature": "public Set<String> names()", "class_method_signature": "ConfigDef.names()", "testcase": false, "constructor": false}, {"identifier": "define", "parameters": "(String name, Type type, Object defaultValue, Validator validator,\n                          Importance importance, String documentation)", "modifiers": "public", "return": "ConfigDef", "signature": "ConfigDef define(String name, Type type, Object defaultValue, Validator validator,\n                          Importance importance, String documentation)", "full_signature": "public ConfigDef define(String name, Type type, Object defaultValue, Validator validator,\n                          Importance importance, String documentation)", "class_method_signature": "ConfigDef.define(String name, Type type, Object defaultValue, Validator validator,\n                          Importance importance, String documentation)", "testcase": false, "constructor": false}, {"identifier": "defineOverride", "parameters": "(String name, Type type, Object defaultValue, Validator validator,\n                                  Importance importance, String documentation)", "modifiers": "public", "return": "ConfigDef", "signature": "ConfigDef defineOverride(String name, Type type, Object defaultValue, Validator validator,\n                                  Importance importance, String documentation)", "full_signature": "public ConfigDef defineOverride(String name, Type type, Object defaultValue, Validator validator,\n                                  Importance importance, String documentation)", "class_method_signature": "ConfigDef.defineOverride(String name, Type type, Object defaultValue, Validator validator,\n                                  Importance importance, String documentation)", "testcase": false, "constructor": false}, {"identifier": "define", "parameters": "(String name, Type type, Object defaultValue, Importance importance,\n                          String documentation)", "modifiers": "public", "return": "ConfigDef", "signature": "ConfigDef define(String name, Type type, Object defaultValue, Importance importance,\n                          String documentation)", "full_signature": "public ConfigDef define(String name, Type type, Object defaultValue, Importance importance,\n                          String documentation)", "class_method_signature": "ConfigDef.define(String name, Type type, Object defaultValue, Importance importance,\n                          String documentation)", "testcase": false, "constructor": false}, {"identifier": "defineOverride", "parameters": "(String name, Type type, Object defaultValue, Importance importance,\n                          String documentation)", "modifiers": "public", "return": "ConfigDef", "signature": "ConfigDef defineOverride(String name, Type type, Object defaultValue, Importance importance,\n                          String documentation)", "full_signature": "public ConfigDef defineOverride(String name, Type type, Object defaultValue, Importance importance,\n                          String documentation)", "class_method_signature": "ConfigDef.defineOverride(String name, Type type, Object defaultValue, Importance importance,\n                          String documentation)", "testcase": false, "constructor": false}, {"identifier": "define", "parameters": "(String name, Type type, Validator validator, Importance importance,\n                          String documentation)", "modifiers": "public", "return": "ConfigDef", "signature": "ConfigDef define(String name, Type type, Validator validator, Importance importance,\n                          String documentation)", "full_signature": "public ConfigDef define(String name, Type type, Validator validator, Importance importance,\n                          String documentation)", "class_method_signature": "ConfigDef.define(String name, Type type, Validator validator, Importance importance,\n                          String documentation)", "testcase": false, "constructor": false}, {"identifier": "defineOverride", "parameters": "(String name, Type type, Validator validator, Importance importance,\n                          String documentation)", "modifiers": "public", "return": "ConfigDef", "signature": "ConfigDef defineOverride(String name, Type type, Validator validator, Importance importance,\n                          String documentation)", "full_signature": "public ConfigDef defineOverride(String name, Type type, Validator validator, Importance importance,\n                          String documentation)", "class_method_signature": "ConfigDef.defineOverride(String name, Type type, Validator validator, Importance importance,\n                          String documentation)", "testcase": false, "constructor": false}, {"identifier": "define", "parameters": "(String name, Type type, Importance importance, String documentation)", "modifiers": "public", "return": "ConfigDef", "signature": "ConfigDef define(String name, Type type, Importance importance, String documentation)", "full_signature": "public ConfigDef define(String name, Type type, Importance importance, String documentation)", "class_method_signature": "ConfigDef.define(String name, Type type, Importance importance, String documentation)", "testcase": false, "constructor": false}, {"identifier": "defineOverride", "parameters": "(String name, Type type, Importance importance, String documentation)", "modifiers": "public", "return": "ConfigDef", "signature": "ConfigDef defineOverride(String name, Type type, Importance importance, String documentation)", "full_signature": "public ConfigDef defineOverride(String name, Type type, Importance importance, String documentation)", "class_method_signature": "ConfigDef.defineOverride(String name, Type type, Importance importance, String documentation)", "testcase": false, "constructor": false}, {"identifier": "parse", "parameters": "(Map<?, ?> props)", "modifiers": "public", "return": "Map<String, Object>", "signature": "Map<String, Object> parse(Map<?, ?> props)", "full_signature": "public Map<String, Object> parse(Map<?, ?> props)", "class_method_signature": "ConfigDef.parse(Map<?, ?> props)", "testcase": false, "constructor": false}, {"identifier": "parseType", "parameters": "(String name, Object value, Type type)", "modifiers": "private", "return": "Object", "signature": "Object parseType(String name, Object value, Type type)", "full_signature": "private Object parseType(String name, Object value, Type type)", "class_method_signature": "ConfigDef.parseType(String name, Object value, Type type)", "testcase": false, "constructor": false}, {"identifier": "toHtmlTable", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toHtmlTable()", "full_signature": "public String toHtmlTable()", "class_method_signature": "ConfigDef.toHtmlTable()", "testcase": false, "constructor": false}, {"identifier": "toRst", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String toRst()", "full_signature": "public String toRst()", "class_method_signature": "ConfigDef.toRst()", "testcase": false, "constructor": false}, {"identifier": "sortedConfigs", "parameters": "()", "modifiers": "private", "return": "List<ConfigDef.ConfigKey>", "signature": "List<ConfigDef.ConfigKey> sortedConfigs()", "full_signature": "private List<ConfigDef.ConfigKey> sortedConfigs()", "class_method_signature": "ConfigDef.sortedConfigs()", "testcase": false, "constructor": false}], "file": "config/src/main/java/io/confluent/common/config/ConfigDef.java"}, "focal_method": {"identifier": "define", "parameters": "(String name, Type type, Object defaultValue, Validator validator,\n                          Importance importance, String documentation)", "modifiers": "public", "return": "ConfigDef", "body": "public ConfigDef define(String name, Type type, Object defaultValue, Validator validator,\n                          Importance importance, String documentation) {\n    if (configKeys.containsKey(name)) {\n      throw new ConfigException(\"Configuration \" + name + \" is defined twice.\");\n    }\n    Object parsedDefault =\n        NO_DEFAULT_VALUE.equals(defaultValue) ? NO_DEFAULT_VALUE : parseType(name, defaultValue, type);\n    configKeys\n        .put(name, new ConfigKey(name, type, parsedDefault, validator, importance, documentation));\n    return this;\n  }", "signature": "ConfigDef define(String name, Type type, Object defaultValue, Validator validator,\n                          Importance importance, String documentation)", "full_signature": "public ConfigDef define(String name, Type type, Object defaultValue, Validator validator,\n                          Importance importance, String documentation)", "class_method_signature": "ConfigDef.define(String name, Type type, Object defaultValue, Validator validator,\n                          Importance importance, String documentation)", "testcase": false, "constructor": false, "invocations": ["containsKey", "equals", "parseType", "put"]}, "repository": {"repo_id": 28214426, "url": "https://github.com/confluentinc/common", "stars": 46, "created": "12/19/2014 4:38:00 AM +00:00", "updates": "2020-01-22T00:50:00+00:00", "fork": "False", "license": "licensed"}}