{"test_class": {"identifier": "EvictingWindowOperatorTest", "superclass": "", "interfaces": "", "fields": [], "file": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/operators/windowing/EvictingWindowOperatorTest.java"}, "test_case": {"identifier": "testCountTriggerWithApply", "parameters": "()", "modifiers": "@Test @SuppressWarnings(\"unchecked\") public", "return": "void", "body": "@Test\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void testCountTriggerWithApply() throws Exception {\n\t\tAtomicInteger closeCalled = new AtomicInteger(0);\n\n\t\tfinal int WINDOW_SIZE = 4;\n\t\tfinal int WINDOW_SLIDE = 2;\n\n\t\tTypeInformation<Tuple2<String, Integer>> inputType = TypeInfoParser.parse(\"Tuple2<String, Integer>\");\n\n\n\t\tListStateDescriptor<StreamRecord<Tuple2<String, Integer>>> stateDesc = new ListStateDescriptor<>(\"window-contents\",\n\t\t\tnew StreamRecordSerializer<>(inputType.createSerializer(new ExecutionConfig())));\n\n\n\t\tEvictingWindowOperator<String, Tuple2<String, Integer>, Tuple2<String, Integer>, GlobalWindow> operator = new EvictingWindowOperator<>(\n\t\t\tGlobalWindows.create(),\n\t\t\tnew GlobalWindow.Serializer(),\n\t\t\tnew TupleKeySelector(),\n\t\t\tBasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),\n\t\t\tstateDesc,\n\t\t\tnew InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),\n\t\t\tCountTrigger.of(WINDOW_SLIDE),\n\t\t\tCountEvictor.of(WINDOW_SIZE));\n\n\t\toperator.setInputType(inputType, new ExecutionConfig());\n\n\n\t\tOneInputStreamOperatorTestHarness<Tuple2<String, Integer>, Tuple2<String, Integer>> testHarness =\n\t\t\tnew OneInputStreamOperatorTestHarness<>(operator);\n\n\t\ttestHarness.configureForKeyedStream(new TupleKeySelector(), BasicTypeInfo.STRING_TYPE_INFO);\n\n\t\tlong initialTime = 0L;\n\t\tConcurrentLinkedQueue<Object> expectedOutput = new ConcurrentLinkedQueue<>();\n\n\t\ttestHarness.open();\n\n\t\t// The global window actually ignores these timestamps...\n\n\t\t// add elements out-of-order\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), initialTime + 3000));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), initialTime + 3999));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), initialTime + 20));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), initialTime));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), initialTime + 999));\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), initialTime + 1998));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), initialTime + 1999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), initialTime + 1000));\n\n\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 2), Long.MAX_VALUE));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 4), Long.MAX_VALUE));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 2), Long.MAX_VALUE));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new ResultSortComparator());\n\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key1\", 1), initialTime + 10999));\n\t\ttestHarness.processElement(new StreamRecord<>(new Tuple2<>(\"key2\", 1), initialTime + 1000));\n\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key1\", 4), Long.MAX_VALUE));\n\t\texpectedOutput.add(new StreamRecord<>(new Tuple2<>(\"key2\", 4), Long.MAX_VALUE));\n\n\t\tTestHarnessUtil.assertOutputEqualsSorted(\"Output was not correct.\", expectedOutput, testHarness.getOutput(), new ResultSortComparator());\n\n\t\ttestHarness.close();\n\n\t\tAssert.assertEquals(\"Close was not called.\", 1, closeCalled.get());\n\t}", "signature": "void testCountTriggerWithApply()", "full_signature": "@Test @SuppressWarnings(\"unchecked\") public void testCountTriggerWithApply()", "class_method_signature": "EvictingWindowOperatorTest.testCountTriggerWithApply()", "testcase": true, "constructor": false, "invocations": ["parse", "createSerializer", "create", "createSerializer", "of", "of", "setInputType", "configureForKeyedStream", "open", "processElement", "processElement", "processElement", "processElement", "processElement", "processElement", "processElement", "processElement", "add", "add", "add", "assertOutputEqualsSorted", "getOutput", "processElement", "processElement", "add", "add", "assertOutputEqualsSorted", "getOutput", "close", "assertEquals", "get"]}, "focal_class": {"identifier": "EvictingWindowOperator", "superclass": "extends WindowOperator<K, IN, Iterable<IN>, OUT, W>", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final Evictor<? super IN, ? super W> evictor;", "modifier": "private final", "type": "Evictor<? super IN, ? super W>", "declarator": "evictor", "var_name": "evictor"}, {"original_string": "private final StateDescriptor<? extends ListState<StreamRecord<IN>>, ?> windowStateDescriptor;", "modifier": "private final", "type": "StateDescriptor<? extends ListState<StreamRecord<IN>>, ?>", "declarator": "windowStateDescriptor", "var_name": "windowStateDescriptor"}], "methods": [{"identifier": "EvictingWindowOperator", "parameters": "(WindowAssigner<? super IN, W> windowAssigner,\n\t\tTypeSerializer<W> windowSerializer,\n\t\tKeySelector<IN, K> keySelector,\n\t\tTypeSerializer<K> keySerializer,\n\t\tStateDescriptor<? extends ListState<StreamRecord<IN>>, ?> windowStateDescriptor,\n\t\tInternalWindowFunction<Iterable<IN>, OUT, K, W> windowFunction,\n\t\tTrigger<? super IN, ? super W> trigger,\n\t\tEvictor<? super IN, ? super W> evictor)", "modifiers": "public", "return": "", "signature": " EvictingWindowOperator(WindowAssigner<? super IN, W> windowAssigner,\n\t\tTypeSerializer<W> windowSerializer,\n\t\tKeySelector<IN, K> keySelector,\n\t\tTypeSerializer<K> keySerializer,\n\t\tStateDescriptor<? extends ListState<StreamRecord<IN>>, ?> windowStateDescriptor,\n\t\tInternalWindowFunction<Iterable<IN>, OUT, K, W> windowFunction,\n\t\tTrigger<? super IN, ? super W> trigger,\n\t\tEvictor<? super IN, ? super W> evictor)", "full_signature": "public  EvictingWindowOperator(WindowAssigner<? super IN, W> windowAssigner,\n\t\tTypeSerializer<W> windowSerializer,\n\t\tKeySelector<IN, K> keySelector,\n\t\tTypeSerializer<K> keySerializer,\n\t\tStateDescriptor<? extends ListState<StreamRecord<IN>>, ?> windowStateDescriptor,\n\t\tInternalWindowFunction<Iterable<IN>, OUT, K, W> windowFunction,\n\t\tTrigger<? super IN, ? super W> trigger,\n\t\tEvictor<? super IN, ? super W> evictor)", "class_method_signature": "EvictingWindowOperator.EvictingWindowOperator(WindowAssigner<? super IN, W> windowAssigner,\n\t\tTypeSerializer<W> windowSerializer,\n\t\tKeySelector<IN, K> keySelector,\n\t\tTypeSerializer<K> keySerializer,\n\t\tStateDescriptor<? extends ListState<StreamRecord<IN>>, ?> windowStateDescriptor,\n\t\tInternalWindowFunction<Iterable<IN>, OUT, K, W> windowFunction,\n\t\tTrigger<? super IN, ? super W> trigger,\n\t\tEvictor<? super IN, ? super W> evictor)", "testcase": false, "constructor": true}, {"identifier": "processElement", "parameters": "(StreamRecord<IN> element)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "void", "signature": "void processElement(StreamRecord<IN> element)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public void processElement(StreamRecord<IN> element)", "class_method_signature": "EvictingWindowOperator.processElement(StreamRecord<IN> element)", "testcase": false, "constructor": false}, {"identifier": "processTriggerResult", "parameters": "(TriggerResult triggerResult, K key, W window)", "modifiers": "@Override @SuppressWarnings(\"unchecked,rawtypes\") protected", "return": "void", "signature": "void processTriggerResult(TriggerResult triggerResult, K key, W window)", "full_signature": "@Override @SuppressWarnings(\"unchecked,rawtypes\") protected void processTriggerResult(TriggerResult triggerResult, K key, W window)", "class_method_signature": "EvictingWindowOperator.processTriggerResult(TriggerResult triggerResult, K key, W window)", "testcase": false, "constructor": false}, {"identifier": "getEvictor", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "Evictor<? super IN, ? super W>", "signature": "Evictor<? super IN, ? super W> getEvictor()", "full_signature": "@VisibleForTesting public Evictor<? super IN, ? super W> getEvictor()", "class_method_signature": "EvictingWindowOperator.getEvictor()", "testcase": false, "constructor": false}, {"identifier": "getStateDescriptor", "parameters": "()", "modifiers": "@Override @VisibleForTesting @SuppressWarnings(\"unchecked, rawtypes\") public", "return": "StateDescriptor<? extends MergingState<IN, Iterable<IN>>, ?>", "signature": "StateDescriptor<? extends MergingState<IN, Iterable<IN>>, ?> getStateDescriptor()", "full_signature": "@Override @VisibleForTesting @SuppressWarnings(\"unchecked, rawtypes\") public StateDescriptor<? extends MergingState<IN, Iterable<IN>>, ?> getStateDescriptor()", "class_method_signature": "EvictingWindowOperator.getStateDescriptor()", "testcase": false, "constructor": false}], "file": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/operators/windowing/EvictingWindowOperator.java"}, "focal_method": {"identifier": "processElement", "parameters": "(StreamRecord<IN> element)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") public", "return": "void", "body": "@Override\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void processElement(StreamRecord<IN> element) throws Exception {\n\t\tCollection<W> elementWindows = windowAssigner.assignWindows(element.getValue(), element.getTimestamp());\n\n\t\tK key = (K) getStateBackend().getCurrentKey();\n\n\t\tfor (W window: elementWindows) {\n\n\t\t\tListState<StreamRecord<IN>> windowState = getPartitionedState(window, windowSerializer,\n\t\t\t\twindowStateDescriptor);\n\n\t\t\twindowState.add(element);\n\n\t\t\tcontext.key = key;\n\t\t\tcontext.window = window;\n\t\t\tTriggerResult triggerResult = context.onElement(element);\n\n\t\t\tprocessTriggerResult(triggerResult, key, window);\n\t\t}\n\t}", "signature": "void processElement(StreamRecord<IN> element)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") public void processElement(StreamRecord<IN> element)", "class_method_signature": "EvictingWindowOperator.processElement(StreamRecord<IN> element)", "testcase": false, "constructor": false, "invocations": ["assignWindows", "getValue", "getTimestamp", "getCurrentKey", "getStateBackend", "getPartitionedState", "add", "onElement", "processTriggerResult"]}, "repository": {"repo_id": 47972099, "url": "https://github.com/streamline-eu/ML-Pipelines", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 85537, "license": "licensed"}}