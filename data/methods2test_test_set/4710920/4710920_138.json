{"test_class": {"identifier": "HessianProtocolTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-rpc/dubbo-rpc-hessian/src/test/java/org/apache/dubbo/rpc/protocol/hessian/HessianProtocolTest.java"}, "test_case": {"identifier": "testOverload", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testOverload() {\n        HessianServiceImpl server = new HessianServiceImpl();\n        Assertions.assertFalse(server.isCalled());\n        ProxyFactory proxyFactory = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();\n        Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();\n        int port = NetUtils.getAvailablePort();\n        URL url = URL.valueOf(\"hessian://127.0.0.1:\" + port + \"/\" + HessianService.class.getName() + \"?version=1.0.0&hessian.overload.method=true&hessian2.request=false\");\n        Exporter<HessianService> exporter = protocol.export(proxyFactory.getInvoker(server, HessianService.class, url));\n        Invoker<HessianService> invoker = protocol.refer(HessianService.class, url);\n        HessianService client = proxyFactory.getProxy(invoker);\n        String result = client.sayHello(\"haha\");\n        Assertions.assertEquals(\"Hello, haha\", result);\n        result = client.sayHello(\"haha\", 1);\n        Assertions.assertEquals(\"Hello, haha. \", result);\n        invoker.destroy();\n        exporter.unexport();\n    }", "signature": "void testOverload()", "full_signature": "@Test public void testOverload()", "class_method_signature": "HessianProtocolTest.testOverload()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isCalled", "getAdaptiveExtension", "getExtensionLoader", "getAdaptiveExtension", "getExtensionLoader", "getAvailablePort", "valueOf", "getName", "export", "getInvoker", "refer", "getProxy", "sayHello", "assertEquals", "sayHello", "assertEquals", "destroy", "unexport"]}, "focal_class": {"identifier": "HessianProtocol", "superclass": "extends AbstractProxyProtocol", "interfaces": "", "fields": [{"original_string": "private final Map<String, HessianSkeleton> skeletonMap = new ConcurrentHashMap<String, HessianSkeleton>();", "modifier": "private final", "type": "Map<String, HessianSkeleton>", "declarator": "skeletonMap = new ConcurrentHashMap<String, HessianSkeleton>()", "var_name": "skeletonMap"}, {"original_string": "private HttpBinder httpBinder;", "modifier": "private", "type": "HttpBinder", "declarator": "httpBinder", "var_name": "httpBinder"}], "methods": [{"identifier": "HessianProtocol", "parameters": "()", "modifiers": "public", "return": "", "signature": " HessianProtocol()", "full_signature": "public  HessianProtocol()", "class_method_signature": "HessianProtocol.HessianProtocol()", "testcase": false, "constructor": true}, {"identifier": "setHttpBinder", "parameters": "(HttpBinder httpBinder)", "modifiers": "public", "return": "void", "signature": "void setHttpBinder(HttpBinder httpBinder)", "full_signature": "public void setHttpBinder(HttpBinder httpBinder)", "class_method_signature": "HessianProtocol.setHttpBinder(HttpBinder httpBinder)", "testcase": false, "constructor": false}, {"identifier": "getDefaultPort", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getDefaultPort()", "full_signature": "@Override public int getDefaultPort()", "class_method_signature": "HessianProtocol.getDefaultPort()", "testcase": false, "constructor": false}, {"identifier": "doExport", "parameters": "(T impl, Class<T> type, URL url)", "modifiers": "@Override protected", "return": "Runnable", "signature": "Runnable doExport(T impl, Class<T> type, URL url)", "full_signature": "@Override protected Runnable doExport(T impl, Class<T> type, URL url)", "class_method_signature": "HessianProtocol.doExport(T impl, Class<T> type, URL url)", "testcase": false, "constructor": false}, {"identifier": "doRefer", "parameters": "(Class<T> serviceType, URL url)", "modifiers": "@Override @SuppressWarnings(\"unchecked\") protected", "return": "T", "signature": "T doRefer(Class<T> serviceType, URL url)", "full_signature": "@Override @SuppressWarnings(\"unchecked\") protected T doRefer(Class<T> serviceType, URL url)", "class_method_signature": "HessianProtocol.doRefer(Class<T> serviceType, URL url)", "testcase": false, "constructor": false}, {"identifier": "getErrorCode", "parameters": "(Throwable e)", "modifiers": "@Override protected", "return": "int", "signature": "int getErrorCode(Throwable e)", "full_signature": "@Override protected int getErrorCode(Throwable e)", "class_method_signature": "HessianProtocol.getErrorCode(Throwable e)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "HessianProtocol.destroy()", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-hessian/src/main/java/org/apache/dubbo/rpc/protocol/hessian/HessianProtocol.java"}, "focal_method": {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void destroy() {\n        super.destroy();\n        for (String key : new ArrayList<String>(serverMap.keySet())) {\n            ProtocolServer protocolServer = serverMap.remove(key);\n            if (protocolServer != null) {\n                try {\n                    if (logger.isInfoEnabled()) {\n                        logger.info(\"Close hessian server \" + protocolServer.getUrl());\n                    }\n                    protocolServer.close();\n                } catch (Throwable t) {\n                    logger.warn(t.getMessage(), t);\n                }\n            }\n        }\n    }", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "HessianProtocol.destroy()", "testcase": false, "constructor": false, "invocations": ["destroy", "keySet", "remove", "isInfoEnabled", "info", "getUrl", "close", "warn", "getMessage"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}