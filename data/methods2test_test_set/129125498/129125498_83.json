{"test_class": {"identifier": "ArrayUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double TOLERANCE = 0.001;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 0.001", "var_name": "TOLERANCE"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/util/ArrayUtilTest.java"}, "test_case": {"identifier": "testShuffle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testShuffle() {\n        val n = 14;\n\n        val orig = new double[n];\n        for (int i = 0; i < n; i++) {\n            orig[i] = i;\n        }\n\n        val copy = Arrays.copyOf(orig, n);\n        ArrayUtil.shuffle(copy);\n\n        int diffCount = 0;\n        for (int i = 0; i < n; i++) {\n            if (orig[i] != copy[i]) {\n                diffCount++;\n            }\n        }\n\n        // With n = 14 (see above), there are over 87T permutations.\n        // So we can safely assume that the input and output are unequal.\n        assertTrue(diffCount > 0);\n\n        Arrays.sort(copy);\n        assertArrayEquals(orig, copy, TOLERANCE);\n    }", "signature": "void testShuffle()", "full_signature": "@Test public void testShuffle()", "class_method_signature": "ArrayUtilTest.testShuffle()", "testcase": true, "constructor": false, "invocations": ["copyOf", "shuffle", "assertTrue", "sort", "assertArrayEquals"]}, "focal_class": {"identifier": "ArrayUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "shuffle", "parameters": "(double[] arr)", "modifiers": "public static", "return": "void", "signature": "void shuffle(double[] arr)", "full_signature": "public static void shuffle(double[] arr)", "class_method_signature": "ArrayUtil.shuffle(double[] arr)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/util/ArrayUtil.java"}, "focal_method": {"identifier": "shuffle", "parameters": "(double[] arr)", "modifiers": "public static", "return": "void", "body": "public static void shuffle(double[] arr) {\n        val rnd = ThreadLocalRandom.current();\n        for (int i = arr.length - 1; i > 0; i--) {\n            val index = rnd.nextInt(i + 1);\n            val elemToSwap = arr[index];\n            arr[index] = arr[i];\n            arr[i] = elemToSwap;\n        }\n    }", "signature": "void shuffle(double[] arr)", "full_signature": "public static void shuffle(double[] arr)", "class_method_signature": "ArrayUtil.shuffle(double[] arr)", "testcase": false, "constructor": false, "invocations": ["current", "nextInt"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}