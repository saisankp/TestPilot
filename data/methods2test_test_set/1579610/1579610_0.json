{"test_class": {"identifier": "ComponentBundlerUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "protected static final String ACTION_DATA =\n        \"<actions>\\n\" +\n        \"  <!-- actions relating to the face shot components -->\\n\" +\n        \"  <action name=\\\"default\\\">\\n\" +\n        \"    <framesPerSecond>1</framesPerSecond>\\n\" +\n        \"    <origin>270,640</origin>\\n\" +\n        \"    <!-- TODO: fix code that requires one array entry for each orientation -->\\n\" +\n        \"    <orients>SW</orients>\\n\" +\n        \"    <tileset>\\n\" +\n        \"      <widths>540</widths>\\n\" +\n        \"      <heights>640</heights>\\n\" +\n        \"      <tileCounts>1</tileCounts>\\n\" +\n        \"      <offsetPos>0, 0</offsetPos>\\n\" +\n        \"      <gapSize>0, 0</gapSize>\\n\" +\n        \"    </tileset>\\n\" +\n        \"  </action>\\n\" +\n        \"\\n\" +\n        \"  <!-- actions relating to the gang buckle components -->\\n\" +\n        \"  <action name=\\\"static\\\">\\n\" +\n        \"    <framesPerSecond>1</framesPerSecond>\\n\" +\n        \"    <origin>156,240</origin>\\n\" +\n        \"    <orients>SW</orients>\\n\" +\n        \"    <tileset>\\n\" +\n        \"      <widths>312</widths>\\n\" +\n        \"      <heights>240</heights>\\n\" +\n        \"      <tileCounts>1</tileCounts>\\n\" +\n        \"      <offsetPos>0, 0</offsetPos>\\n\" +\n        \"      <gapSize>0, 0</gapSize>\\n\" +\n        \"    </tileset>\\n\" +\n        \"  </action>\\n\" +\n        \"</actions>\";", "modifier": "protected static final", "type": "String", "declarator": "ACTION_DATA =\n        \"<actions>\\n\" +\n        \"  <!-- actions relating to the face shot components -->\\n\" +\n        \"  <action name=\\\"default\\\">\\n\" +\n        \"    <framesPerSecond>1</framesPerSecond>\\n\" +\n        \"    <origin>270,640</origin>\\n\" +\n        \"    <!-- TODO: fix code that requires one array entry for each orientation -->\\n\" +\n        \"    <orients>SW</orients>\\n\" +\n        \"    <tileset>\\n\" +\n        \"      <widths>540</widths>\\n\" +\n        \"      <heights>640</heights>\\n\" +\n        \"      <tileCounts>1</tileCounts>\\n\" +\n        \"      <offsetPos>0, 0</offsetPos>\\n\" +\n        \"      <gapSize>0, 0</gapSize>\\n\" +\n        \"    </tileset>\\n\" +\n        \"  </action>\\n\" +\n        \"\\n\" +\n        \"  <!-- actions relating to the gang buckle components -->\\n\" +\n        \"  <action name=\\\"static\\\">\\n\" +\n        \"    <framesPerSecond>1</framesPerSecond>\\n\" +\n        \"    <origin>156,240</origin>\\n\" +\n        \"    <orients>SW</orients>\\n\" +\n        \"    <tileset>\\n\" +\n        \"      <widths>312</widths>\\n\" +\n        \"      <heights>240</heights>\\n\" +\n        \"      <tileCounts>1</tileCounts>\\n\" +\n        \"      <offsetPos>0, 0</offsetPos>\\n\" +\n        \"      <gapSize>0, 0</gapSize>\\n\" +\n        \"    </tileset>\\n\" +\n        \"  </action>\\n\" +\n        \"</actions>\"", "var_name": "ACTION_DATA"}], "file": "tools/src/test/java/com/threerings/cast/bundle/tools/ComponentBundlerUtilTest.java"}, "test_case": {"identifier": "testParseActionTileSets", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParseActionTileSets ()\n        throws Exception\n    {\n        Map<String, TileSet> map = ComponentBundlerUtil.parseActionTileSets(\n            new ByteArrayInputStream(ACTION_DATA.getBytes()));\n\n        SwissArmyTileSet defset = (SwissArmyTileSet)map.get(\"default\");\n        assertNotNull(defset);\n        assertEquals(\"default\", defset.getName());\n        assertEquals(1, defset.getTileCount());\n        assertArrayEquals(new int[] { 1 }, defset.getTileCounts());\n        assertEquals(new Rectangle(0, 0, 540, 640), defset.computeTileBounds(0, new Rectangle()));\n\n        SwissArmyTileSet statset = (SwissArmyTileSet)map.get(\"static\");\n        assertNotNull(statset);\n        assertEquals(\"static\", statset.getName());\n        assertEquals(1, statset.getTileCount());\n        assertArrayEquals(new int[] { 1 }, statset.getTileCounts());\n        assertEquals(new Rectangle(0, 0, 312, 240), statset.computeTileBounds(0, new Rectangle()));\n    }", "signature": "void testParseActionTileSets()", "full_signature": "@Test public void testParseActionTileSets()", "class_method_signature": "ComponentBundlerUtilTest.testParseActionTileSets()", "testcase": true, "constructor": false, "invocations": ["parseActionTileSets", "getBytes", "get", "assertNotNull", "assertEquals", "getName", "assertEquals", "getTileCount", "assertArrayEquals", "getTileCounts", "assertEquals", "computeTileBounds", "get", "assertNotNull", "assertEquals", "getName", "assertEquals", "getTileCount", "assertArrayEquals", "getTileCounts", "assertEquals", "computeTileBounds"]}, "focal_class": {"identifier": "ComponentBundlerUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parseActionTileSets", "parameters": "(File file)", "modifiers": "public static", "return": "Map<String, TileSet>", "signature": "Map<String, TileSet> parseActionTileSets(File file)", "full_signature": "public static Map<String, TileSet> parseActionTileSets(File file)", "class_method_signature": "ComponentBundlerUtil.parseActionTileSets(File file)", "testcase": false, "constructor": false}, {"identifier": "parseActionTileSets", "parameters": "(InputStream in)", "modifiers": "public static", "return": "Map<String, TileSet>", "signature": "Map<String, TileSet> parseActionTileSets(InputStream in)", "full_signature": "public static Map<String, TileSet> parseActionTileSets(InputStream in)", "class_method_signature": "ComponentBundlerUtil.parseActionTileSets(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "addTileSetRuleSet", "parameters": "(Digester digester, TileSetRuleSet ruleSet)", "modifiers": "protected static", "return": "void", "signature": "void addTileSetRuleSet(Digester digester, TileSetRuleSet ruleSet)", "full_signature": "protected static void addTileSetRuleSet(Digester digester, TileSetRuleSet ruleSet)", "class_method_signature": "ComponentBundlerUtil.addTileSetRuleSet(Digester digester, TileSetRuleSet ruleSet)", "testcase": false, "constructor": false}], "file": "tools/src/main/java/com/threerings/cast/bundle/tools/ComponentBundlerUtil.java"}, "focal_method": {"identifier": "parseActionTileSets", "parameters": "(File file)", "modifiers": "public static", "return": "Map<String, TileSet>", "body": "public static Map<String, TileSet> parseActionTileSets (File file)\n        throws IOException, SAXException\n    {\n        return parseActionTileSets(new BufferedInputStream(new FileInputStream(file)));\n    }", "signature": "Map<String, TileSet> parseActionTileSets(File file)", "full_signature": "public static Map<String, TileSet> parseActionTileSets(File file)", "class_method_signature": "ComponentBundlerUtil.parseActionTileSets(File file)", "testcase": false, "constructor": false, "invocations": ["parseActionTileSets"]}, "repository": {"repo_id": 1579610, "url": "https://github.com/threerings/nenya", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 26, "size": 13815, "license": "licensed"}}