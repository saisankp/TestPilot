{"test_class": {"identifier": "CucumberInterceptorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Integer RESULT = Integer.MIN_VALUE;", "modifier": "private static final", "type": "Integer", "declarator": "RESULT = Integer.MIN_VALUE", "var_name": "RESULT"}, {"original_string": "@Mock\n    private JpaUnitContext context;", "modifier": "@Mock\n    private", "type": "JpaUnitContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock\n    private DecoratorExecutor executor;", "modifier": "@Mock\n    private", "type": "DecoratorExecutor", "declarator": "executor", "var_name": "executor"}, {"original_string": "private Method method;", "modifier": "private", "type": "Method", "declarator": "method", "var_name": "method"}, {"original_string": "@Spy\n    private TestDelegate delegate = new TestDelegate();", "modifier": "@Spy\n    private", "type": "TestDelegate", "declarator": "delegate = new TestDelegate()", "var_name": "delegate"}], "file": "cucumber/src/test/java/eu/drus/jpa/unit/cucumber/CucumberInterceptorTest.java"}, "test_case": {"identifier": "testInterceptMethodInvocationWithoutExceptionThrown", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testInterceptMethodInvocationWithoutExceptionThrown() throws Throwable {\n        // GIVEN\n        final Object[] args = new Object[0];\n\n        // WHEN\n        final Object res = CucumberInterceptor.intercept(executor, delegate, method, args);\n\n        // THEN\n        assertThat(res, equalTo(RESULT));\n\n        final ArgumentCaptor<TestInvocation> beforeCaptor = ArgumentCaptor.forClass(TestInvocation.class);\n        final ArgumentCaptor<TestInvocation> afterCaptor = ArgumentCaptor.forClass(TestInvocation.class);\n        final InOrder inOrder = inOrder(executor, delegate);\n        inOrder.verify(executor).processBefore(beforeCaptor.capture());\n        inOrder.verify(delegate).testMethod();\n        inOrder.verify(executor).processAfter(afterCaptor.capture());\n\n        final TestInvocation invocation1 = beforeCaptor.getValue();\n        final TestInvocation invocation2 = afterCaptor.getValue();\n\n        assertThat(invocation1, equalTo(invocation2));\n        assertThat(invocation1.getException().isPresent(), equalTo(Boolean.FALSE));\n\n        assertThat(invocation1.getContext(), equalTo(context));\n        assertThat(invocation1.getFeatureResolver().shouldCleanupAfter(), equalTo(Boolean.FALSE));\n        assertThat(invocation1.getFeatureResolver().shouldCleanupBefore(), equalTo(Boolean.FALSE));\n        assertThat(invocation1.getTestInstance().get(), equalTo(delegate));\n        assertThat(invocation1.getTestMethod().get(), equalTo(method));\n    }", "signature": "void testInterceptMethodInvocationWithoutExceptionThrown()", "full_signature": "@Test public void testInterceptMethodInvocationWithoutExceptionThrown()", "class_method_signature": "CucumberInterceptorTest.testInterceptMethodInvocationWithoutExceptionThrown()", "testcase": true, "constructor": false, "invocations": ["intercept", "assertThat", "equalTo", "forClass", "forClass", "inOrder", "processBefore", "verify", "capture", "testMethod", "verify", "processAfter", "verify", "capture", "getValue", "getValue", "assertThat", "equalTo", "assertThat", "isPresent", "getException", "equalTo", "assertThat", "getContext", "equalTo", "assertThat", "shouldCleanupAfter", "getFeatureResolver", "equalTo", "assertThat", "shouldCleanupBefore", "getFeatureResolver", "equalTo", "assertThat", "get", "getTestInstance", "equalTo", "assertThat", "get", "getTestMethod", "equalTo"]}, "focal_class": {"identifier": "CucumberInterceptor", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "CucumberInterceptor", "parameters": "()", "modifiers": "private", "return": "", "signature": " CucumberInterceptor()", "full_signature": "private  CucumberInterceptor()", "class_method_signature": "CucumberInterceptor.CucumberInterceptor()", "testcase": false, "constructor": true}, {"identifier": "intercept", "parameters": "(@FieldValue(\"executor\") DecoratorExecutor executor, @FieldValue(\"bean\") Object bean, @Origin Method method, @AllArguments Object[] args)", "modifiers": "@RuntimeType public static", "return": "Object", "signature": "Object intercept(@FieldValue(\"executor\") DecoratorExecutor executor, @FieldValue(\"bean\") Object bean, @Origin Method method, @AllArguments Object[] args)", "full_signature": "@RuntimeType public static Object intercept(@FieldValue(\"executor\") DecoratorExecutor executor, @FieldValue(\"bean\") Object bean, @Origin Method method, @AllArguments Object[] args)", "class_method_signature": "CucumberInterceptor.intercept(@FieldValue(\"executor\") DecoratorExecutor executor, @FieldValue(\"bean\") Object bean, @Origin Method method, @AllArguments Object[] args)", "testcase": false, "constructor": false}], "file": "cucumber/src/main/java/eu/drus/jpa/unit/cucumber/CucumberInterceptor.java"}, "focal_method": {"identifier": "intercept", "parameters": "(@FieldValue(\"executor\") DecoratorExecutor executor, @FieldValue(\"bean\") Object bean, @Origin Method method, @AllArguments Object[] args)", "modifiers": "@RuntimeType public static", "return": "Object", "body": "@RuntimeType\n\tpublic static Object intercept(@FieldValue(\"executor\") DecoratorExecutor executor, @FieldValue(\"bean\") Object bean, @Origin Method method, @AllArguments Object[] args) throws Exception {\n\t\t\n        final FeatureResolver resolver = FeatureResolver.newFeatureResolver(bean.getClass()).withTestMethod(method)\n                .withDefaultCleanupPhase(CleanupPhase.NONE).build();\n\n        Object result = null;\n        final TestInvocationImpl invocation = new TestInvocationImpl(bean, method, resolver);\n        executor.processBefore(invocation);\n        try {\n            result = method.invoke(bean, args);\n        } catch (final Exception e) {\n        \tException cause = (Exception)e.getCause();\n            invocation.setTestException(cause);\n            executor.processAfter(invocation);\n            throw cause;\n        }\n        executor.processAfter(invocation);\n\n        return result;\n    }", "signature": "Object intercept(@FieldValue(\"executor\") DecoratorExecutor executor, @FieldValue(\"bean\") Object bean, @Origin Method method, @AllArguments Object[] args)", "full_signature": "@RuntimeType public static Object intercept(@FieldValue(\"executor\") DecoratorExecutor executor, @FieldValue(\"bean\") Object bean, @Origin Method method, @AllArguments Object[] args)", "class_method_signature": "CucumberInterceptor.intercept(@FieldValue(\"executor\") DecoratorExecutor executor, @FieldValue(\"bean\") Object bean, @Origin Method method, @AllArguments Object[] args)", "testcase": false, "constructor": false, "invocations": ["build", "withDefaultCleanupPhase", "withTestMethod", "newFeatureResolver", "getClass", "processBefore", "invoke", "getCause", "setTestException", "processAfter", "processAfter"]}, "repository": {"repo_id": 52435170, "url": "https://github.com/dadrus/jpa-unit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 24, "size": 1190, "license": "licensed"}}