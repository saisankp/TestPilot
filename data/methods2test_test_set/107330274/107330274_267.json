{"test_class": {"identifier": "DefaultCapacityMonitoringServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ApplicationSLA CRITICAL_APP = ApplicationSlaSample.CriticalSmall.build();", "modifier": "private static final", "type": "ApplicationSLA", "declarator": "CRITICAL_APP = ApplicationSlaSample.CriticalSmall.build()", "var_name": "CRITICAL_APP"}, {"original_string": "private static final ApplicationSLA FLEX_APP = ApplicationSlaSample.FlexSmall.build();", "modifier": "private static final", "type": "ApplicationSLA", "declarator": "FLEX_APP = ApplicationSlaSample.FlexSmall.build()", "var_name": "FLEX_APP"}, {"original_string": "private static final String CRITICAL_INSTANCE_GROUP_ID = \"Critical#0\";", "modifier": "private static final", "type": "String", "declarator": "CRITICAL_INSTANCE_GROUP_ID = \"Critical#0\"", "var_name": "CRITICAL_INSTANCE_GROUP_ID"}, {"original_string": "private static final String FLEX_INSTANCE_GROUP_ID = \"Flex#0\";", "modifier": "private static final", "type": "String", "declarator": "FLEX_INSTANCE_GROUP_ID = \"Flex#0\"", "var_name": "FLEX_INSTANCE_GROUP_ID"}, {"original_string": "private final TestScheduler testScheduler = Schedulers.test();", "modifier": "private final", "type": "TestScheduler", "declarator": "testScheduler = Schedulers.test()", "var_name": "testScheduler"}, {"original_string": "private final CapacityManagementConfiguration configuration = BeanCapacityManagementConfiguration.newBuilder()\n            .withCriticalTierBuffer(0.1)\n            .withFlexTierBuffer(0.1)\n            .build();", "modifier": "private final", "type": "CapacityManagementConfiguration", "declarator": "configuration = BeanCapacityManagementConfiguration.newBuilder()\n            .withCriticalTierBuffer(0.1)\n            .withFlexTierBuffer(0.1)\n            .build()", "var_name": "configuration"}, {"original_string": "private final AgentManagementService agentManagementService = mock(AgentManagementService.class);", "modifier": "private final", "type": "AgentManagementService", "declarator": "agentManagementService = mock(AgentManagementService.class)", "var_name": "agentManagementService"}, {"original_string": "private final ApplicationSlaStore storage = mock(ApplicationSlaStore.class);", "modifier": "private final", "type": "ApplicationSlaStore", "declarator": "storage = mock(ApplicationSlaStore.class)", "var_name": "storage"}, {"original_string": "private final CapacityGuaranteeStrategy capacityGuaranteeStrategy = mock(CapacityGuaranteeStrategy.class);", "modifier": "private final", "type": "CapacityGuaranteeStrategy", "declarator": "capacityGuaranteeStrategy = mock(CapacityGuaranteeStrategy.class)", "var_name": "capacityGuaranteeStrategy"}, {"original_string": "private final DefaultCapacityMonitoringService capacityMonitoringService = new DefaultCapacityMonitoringService(\n            configuration,\n            capacityGuaranteeStrategy,\n            storage,\n            agentManagementService,\n            new DefaultRegistry(),\n            testScheduler\n    );", "modifier": "private final", "type": "DefaultCapacityMonitoringService", "declarator": "capacityMonitoringService = new DefaultCapacityMonitoringService(\n            configuration,\n            capacityGuaranteeStrategy,\n            storage,\n            agentManagementService,\n            new DefaultRegistry(),\n            testScheduler\n    )", "var_name": "capacityMonitoringService"}], "file": "titus-server-master/src/test/java/com/netflix/titus/master/service/management/internal/DefaultCapacityMonitoringServiceTest.java"}, "test_case": {"identifier": "testScheduledRefreshRecoversFromError", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testScheduledRefreshRecoversFromError() throws Exception {\n        when(storage.findAll()).thenReturn(Observable.error(new IOException(\"simulated storage error\")));\n\n        capacityMonitoringService.enterActiveMode();\n        testScheduler.triggerActions();\n        verify(agentManagementService, times(0)).updateCapacity(any(), any(), any());\n\n        // Next refresh round\n        setupMocksForApp(1, 1, CRITICAL_APP, FLEX_APP);\n\n        testScheduler.advanceTimeBy(DefaultCapacityMonitoringService.PERIODIC_UPDATE_INTERVAL_MS, TimeUnit.MILLISECONDS);\n        verify(agentManagementService, times(1))\n                .updateCapacity(CRITICAL_INSTANCE_GROUP_ID, Optional.of(1), Optional.empty());\n        verify(agentManagementService, times(0))\n                .updateCapacity(FLEX_INSTANCE_GROUP_ID, Optional.of(1), Optional.empty());\n    }", "signature": "void testScheduledRefreshRecoversFromError()", "full_signature": "@Test public void testScheduledRefreshRecoversFromError()", "class_method_signature": "DefaultCapacityMonitoringServiceTest.testScheduledRefreshRecoversFromError()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "findAll", "error", "enterActiveMode", "triggerActions", "updateCapacity", "verify", "times", "any", "any", "any", "setupMocksForApp", "advanceTimeBy", "updateCapacity", "verify", "times", "of", "empty", "updateCapacity", "verify", "times", "of", "empty"]}, "focal_class": {"identifier": "DefaultCapacityMonitoringService", "superclass": "", "interfaces": "implements CapacityMonitoringService", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(DefaultCapacityMonitoringService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(DefaultCapacityMonitoringService.class)", "var_name": "logger"}, {"original_string": "@VisibleForTesting\n    static final long UPDATE_TIMEOUT_MS = 30 * 1000;", "modifier": "@VisibleForTesting\n    static final", "type": "long", "declarator": "UPDATE_TIMEOUT_MS = 30 * 1000", "var_name": "UPDATE_TIMEOUT_MS"}, {"original_string": "@VisibleForTesting\n    static final long PERIODIC_UPDATE_INTERVAL_MS = 5 * 60 * 1000;", "modifier": "@VisibleForTesting\n    static final", "type": "long", "declarator": "PERIODIC_UPDATE_INTERVAL_MS = 5 * 60 * 1000", "var_name": "PERIODIC_UPDATE_INTERVAL_MS"}, {"original_string": "private final CapacityManagementConfiguration configuration;", "modifier": "private final", "type": "CapacityManagementConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final CapacityGuaranteeStrategy strategy;", "modifier": "private final", "type": "CapacityGuaranteeStrategy", "declarator": "strategy", "var_name": "strategy"}, {"original_string": "private final ApplicationSlaStore storage;", "modifier": "private final", "type": "ApplicationSlaStore", "declarator": "storage", "var_name": "storage"}, {"original_string": "private final Scheduler scheduler;", "modifier": "private final", "type": "Scheduler", "declarator": "scheduler", "var_name": "scheduler"}, {"original_string": "private final AgentManagementService agentManagementService;", "modifier": "private final", "type": "AgentManagementService", "declarator": "agentManagementService", "var_name": "agentManagementService"}, {"original_string": "private final ComputationTaskInvoker<Void> invoker;", "modifier": "private final", "type": "ComputationTaskInvoker<Void>", "declarator": "invoker", "var_name": "invoker"}, {"original_string": "private final DefaultCapacityMonitoringServiceMetrics metrics;", "modifier": "private final", "type": "DefaultCapacityMonitoringServiceMetrics", "declarator": "metrics", "var_name": "metrics"}, {"original_string": "private Subscription periodicUpdateSubscription;", "modifier": "private", "type": "Subscription", "declarator": "periodicUpdateSubscription", "var_name": "periodicUpdateSubscription"}], "methods": [{"identifier": "DefaultCapacityMonitoringService", "parameters": "(CapacityManagementConfiguration configuration,\n                                            CapacityGuaranteeStrategy strategy,\n                                            ApplicationSlaStore storage,\n                                            AgentManagementService agentManagementService,\n                                            Registry registry,\n                                            Scheduler scheduler)", "modifiers": "public", "return": "", "signature": " DefaultCapacityMonitoringService(CapacityManagementConfiguration configuration,\n                                            CapacityGuaranteeStrategy strategy,\n                                            ApplicationSlaStore storage,\n                                            AgentManagementService agentManagementService,\n                                            Registry registry,\n                                            Scheduler scheduler)", "full_signature": "public  DefaultCapacityMonitoringService(CapacityManagementConfiguration configuration,\n                                            CapacityGuaranteeStrategy strategy,\n                                            ApplicationSlaStore storage,\n                                            AgentManagementService agentManagementService,\n                                            Registry registry,\n                                            Scheduler scheduler)", "class_method_signature": "DefaultCapacityMonitoringService.DefaultCapacityMonitoringService(CapacityManagementConfiguration configuration,\n                                            CapacityGuaranteeStrategy strategy,\n                                            ApplicationSlaStore storage,\n                                            AgentManagementService agentManagementService,\n                                            Registry registry,\n                                            Scheduler scheduler)", "testcase": false, "constructor": true}, {"identifier": "DefaultCapacityMonitoringService", "parameters": "(CapacityManagementConfiguration configuration,\n                                            CapacityGuaranteeStrategy strategy,\n                                            ApplicationSlaStore storage,\n                                            AgentManagementService agentManagementService,\n                                            Registry registry)", "modifiers": "@Inject public", "return": "", "signature": " DefaultCapacityMonitoringService(CapacityManagementConfiguration configuration,\n                                            CapacityGuaranteeStrategy strategy,\n                                            ApplicationSlaStore storage,\n                                            AgentManagementService agentManagementService,\n                                            Registry registry)", "full_signature": "@Inject public  DefaultCapacityMonitoringService(CapacityManagementConfiguration configuration,\n                                            CapacityGuaranteeStrategy strategy,\n                                            ApplicationSlaStore storage,\n                                            AgentManagementService agentManagementService,\n                                            Registry registry)", "class_method_signature": "DefaultCapacityMonitoringService.DefaultCapacityMonitoringService(CapacityManagementConfiguration configuration,\n                                            CapacityGuaranteeStrategy strategy,\n                                            ApplicationSlaStore storage,\n                                            AgentManagementService agentManagementService,\n                                            Registry registry)", "testcase": false, "constructor": true}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@PreDestroy public", "return": "void", "signature": "void shutdown()", "full_signature": "@PreDestroy public void shutdown()", "class_method_signature": "DefaultCapacityMonitoringService.shutdown()", "testcase": false, "constructor": false}, {"identifier": "enterActiveMode", "parameters": "()", "modifiers": "@Activator public", "return": "Observable<Void>", "signature": "Observable<Void> enterActiveMode()", "full_signature": "@Activator public Observable<Void> enterActiveMode()", "class_method_signature": "DefaultCapacityMonitoringService.enterActiveMode()", "testcase": false, "constructor": false}, {"identifier": "refresh", "parameters": "()", "modifiers": "@Override public", "return": "Observable<Void>", "signature": "Observable<Void> refresh()", "full_signature": "@Override public Observable<Void> refresh()", "class_method_signature": "DefaultCapacityMonitoringService.refresh()", "testcase": false, "constructor": false}, {"identifier": "schedulePeriodicUpdate", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void schedulePeriodicUpdate()", "full_signature": "private void schedulePeriodicUpdate()", "class_method_signature": "DefaultCapacityMonitoringService.schedulePeriodicUpdate()", "testcase": false, "constructor": false}, {"identifier": "updateAction", "parameters": "(Subscriber<? super Void> result)", "modifiers": "private", "return": "void", "signature": "void updateAction(Subscriber<? super Void> result)", "full_signature": "private void updateAction(Subscriber<? super Void> result)", "class_method_signature": "DefaultCapacityMonitoringService.updateAction(Subscriber<? super Void> result)", "testcase": false, "constructor": false}, {"identifier": "scalableSLAs", "parameters": "(List<ApplicationSLA> allSLAs)", "modifiers": "private", "return": "List<ApplicationSLA>", "signature": "List<ApplicationSLA> scalableSLAs(List<ApplicationSLA> allSLAs)", "full_signature": "private List<ApplicationSLA> scalableSLAs(List<ApplicationSLA> allSLAs)", "class_method_signature": "DefaultCapacityMonitoringService.scalableSLAs(List<ApplicationSLA> allSLAs)", "testcase": false, "constructor": false}, {"identifier": "recompute", "parameters": "(List<ApplicationSLA> allSLAs)", "modifiers": "private", "return": "CapacityGuaranteeStrategy.CapacityAllocations", "signature": "CapacityGuaranteeStrategy.CapacityAllocations recompute(List<ApplicationSLA> allSLAs)", "full_signature": "private CapacityGuaranteeStrategy.CapacityAllocations recompute(List<ApplicationSLA> allSLAs)", "class_method_signature": "DefaultCapacityMonitoringService.recompute(List<ApplicationSLA> allSLAs)", "testcase": false, "constructor": false}], "file": "titus-server-master/src/main/java/com/netflix/titus/master/service/management/internal/DefaultCapacityMonitoringService.java"}, "focal_method": {"identifier": "enterActiveMode", "parameters": "()", "modifiers": "@Activator public", "return": "Observable<Void>", "body": "@Activator\n    public Observable<Void> enterActiveMode() {\n        logger.info(\"Entering active mode\");\n        schedulePeriodicUpdate();\n        return Observable.empty();\n    }", "signature": "Observable<Void> enterActiveMode()", "full_signature": "@Activator public Observable<Void> enterActiveMode()", "class_method_signature": "DefaultCapacityMonitoringService.enterActiveMode()", "testcase": false, "constructor": false, "invocations": ["info", "schedulePeriodicUpdate", "empty"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}