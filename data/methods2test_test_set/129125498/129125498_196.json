{"test_class": {"identifier": "DetectorFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private DetectorFactory factoryUnderTest;", "modifier": "private", "type": "DetectorFactory", "declarator": "factoryUnderTest", "var_name": "factoryUnderTest"}, {"original_string": "private final ObjectMapper objectMapper = new ObjectMapper();", "modifier": "private final", "type": "ObjectMapper", "declarator": "objectMapper = new ObjectMapper()", "var_name": "objectMapper"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/source/DetectorFactoryTest.java"}, "test_case": {"identifier": "testBuildDetector_illegalType", "parameters": "()", "modifiers": "@Test(expected = DetectorException.class) public", "return": "void", "body": "@Test(expected = DetectorException.class)\n    public void testBuildDetector_illegalType() {\n        val document = readDocument(\"invalid-type\");\n        factoryUnderTest.buildDetector(document);\n    }", "signature": "void testBuildDetector_illegalType()", "full_signature": "@Test(expected = DetectorException.class) public void testBuildDetector_illegalType()", "class_method_signature": "DetectorFactoryTest.testBuildDetector_illegalType()", "testcase": true, "constructor": false, "invocations": ["readDocument", "buildDetector"]}, "focal_class": {"identifier": "DetectorFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Map<String, DetectorFactoryProvider<?>> providers = new HashMap<>();", "modifier": "private final", "type": "Map<String, DetectorFactoryProvider<?>>", "declarator": "providers = new HashMap<>()", "var_name": "providers"}], "methods": [{"identifier": "DetectorFactory", "parameters": "()", "modifiers": "public", "return": "", "signature": " DetectorFactory()", "full_signature": "public  DetectorFactory()", "class_method_signature": "DetectorFactory.DetectorFactory()", "testcase": false, "constructor": true}, {"identifier": "buildDetector", "parameters": "(DetectorDocument document)", "modifiers": "public", "return": "Detector", "signature": "Detector buildDetector(DetectorDocument document)", "full_signature": "public Detector buildDetector(DetectorDocument document)", "class_method_signature": "DetectorFactory.buildDetector(DetectorDocument document)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/source/DetectorFactory.java"}, "focal_method": {"identifier": "buildDetector", "parameters": "(DetectorDocument document)", "modifiers": "public", "return": "Detector", "body": "public Detector buildDetector(DetectorDocument document) {\n        notNull(document, \"document can't be null\");\n        val type = document.getType();\n        val factory = providers.get(type);\n        if (factory == null) {\n            throw new DetectorException(\"Illegal detector type: \" + type);\n        }\n        return factory.buildDetector(document);\n    }", "signature": "Detector buildDetector(DetectorDocument document)", "full_signature": "public Detector buildDetector(DetectorDocument document)", "class_method_signature": "DetectorFactory.buildDetector(DetectorDocument document)", "testcase": false, "constructor": false, "invocations": ["notNull", "getType", "get", "buildDetector"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}