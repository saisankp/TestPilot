{"test_class": {"identifier": "UrlsTest", "superclass": "", "interfaces": "", "fields": [], "file": "base/lang/src/test/java/leap/lang/net/UrlsTest.java"}, "test_case": {"identifier": "testResolveUrlExpr", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testResolveUrlExpr(){\n        URI uri1 = URI.create(\"http://127.0.0.1:8080/ctx\");\n        URI uri2 = URI.create(\"http://127.0.0.1/ctx/\");\n        String str1 = Urls.resolveUrlExpr(\"@{~/}path1\",uri1);\n        String str2 = Urls.resolveUrlExpr(\"@{~}path1\",uri1);\n        String str3 = Urls.resolveUrlExpr(\"@{/}path1\",uri1);\n        String str4 = Urls.resolveUrlExpr(\"@{^/}path1\",uri1);\n        String str5 = Urls.resolveUrlExpr(\"@{^}path1\",uri1);\n        Assert.assertEquals(\"http://127.0.0.1:8080/ctx/path1\",str1);\n        Assert.assertEquals(\"http://127.0.0.1:8080/ctxpath1\",str2);\n        Assert.assertEquals(\"/ctx/path1\",str3);\n        Assert.assertEquals(\"/path1\",str4);\n        Assert.assertEquals(\"path1\",str5);\n\n        str1 = Urls.resolveUrlExpr(\"@{~/}path1\",uri2);\n        str2 = Urls.resolveUrlExpr(\"@{~}path1\",uri2);\n        str3 = Urls.resolveUrlExpr(\"@{/}path1\",uri2);\n        str4 = Urls.resolveUrlExpr(\"@{^/}path1\",uri2);\n        str5 = Urls.resolveUrlExpr(\"@{^}path1\",uri2);\n        Assert.assertEquals(\"http://127.0.0.1/ctx/path1\",str1);\n        Assert.assertEquals(\"http://127.0.0.1/ctxpath1\",str2);\n        Assert.assertEquals(\"/ctx/path1\",str3);\n        Assert.assertEquals(\"/path1\",str4);\n        Assert.assertEquals(\"path1\",str5);\n    }", "signature": "void testResolveUrlExpr()", "full_signature": "@Test public void testResolveUrlExpr()", "class_method_signature": "UrlsTest.testResolveUrlExpr()", "testcase": true, "constructor": false, "invocations": ["create", "create", "resolveUrlExpr", "resolveUrlExpr", "resolveUrlExpr", "resolveUrlExpr", "resolveUrlExpr", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "resolveUrlExpr", "resolveUrlExpr", "resolveUrlExpr", "resolveUrlExpr", "resolveUrlExpr", "assertEquals", "assertEquals", "assertEquals", "assertEquals", "assertEquals"]}, "focal_class": {"identifier": "Urls", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String CLASSPATH_ONE_URL_PREFIX = \"classpath:\";", "modifier": "public static final", "type": "String", "declarator": "CLASSPATH_ONE_URL_PREFIX = \"classpath:\"", "var_name": "CLASSPATH_ONE_URL_PREFIX"}, {"original_string": "public static final String CLASSPATH_ALL_URL_PREFIX = \"classpath*:\";", "modifier": "public static final", "type": "String", "declarator": "CLASSPATH_ALL_URL_PREFIX = \"classpath*:\"", "var_name": "CLASSPATH_ALL_URL_PREFIX"}, {"original_string": "public static final String FILE_URL_PREFIX    = \"file:\";", "modifier": "public static final", "type": "String", "declarator": "FILE_URL_PREFIX    = \"file:\"", "var_name": "FILE_URL_PREFIX"}, {"original_string": "public static final String JAR_URL_SEPARATOR  = \"!/\";", "modifier": "public static final", "type": "String", "declarator": "JAR_URL_SEPARATOR  = \"!/\"", "var_name": "JAR_URL_SEPARATOR"}, {"original_string": "public static final String PROTOCOL_SEPARATOR = \"://\";", "modifier": "public static final", "type": "String", "declarator": "PROTOCOL_SEPARATOR = \"://\"", "var_name": "PROTOCOL_SEPARATOR"}, {"original_string": "public static final String PROTOCOL_FILE        = \"file\";", "modifier": "public static final", "type": "String", "declarator": "PROTOCOL_FILE        = \"file\"", "var_name": "PROTOCOL_FILE"}, {"original_string": "public static final String PROTOCOL_JAR         = \"jar\";", "modifier": "public static final", "type": "String", "declarator": "PROTOCOL_JAR         = \"jar\"", "var_name": "PROTOCOL_JAR"}, {"original_string": "public static final String PROTOCOL_ZIP         = \"zip\";", "modifier": "public static final", "type": "String", "declarator": "PROTOCOL_ZIP         = \"zip\"", "var_name": "PROTOCOL_ZIP"}, {"original_string": "public static final String PROTOCOL_VFSZIP      = \"vfszip\";", "modifier": "public static final", "type": "String", "declarator": "PROTOCOL_VFSZIP      = \"vfszip\"", "var_name": "PROTOCOL_VFSZIP"}, {"original_string": "public static final String PROTOCOL_VFS         = \"vfs\";", "modifier": "public static final", "type": "String", "declarator": "PROTOCOL_VFS         = \"vfs\"", "var_name": "PROTOCOL_VFS"}, {"original_string": "public static final String PROTOCOL_WSJAR       = \"wsjar\";", "modifier": "public static final", "type": "String", "declarator": "PROTOCOL_WSJAR       = \"wsjar\"", "var_name": "PROTOCOL_WSJAR"}, {"original_string": "public static final String PROTOCOL_CODE_SOURCE = \"code-source\";", "modifier": "public static final", "type": "String", "declarator": "PROTOCOL_CODE_SOURCE = \"code-source\"", "var_name": "PROTOCOL_CODE_SOURCE"}], "methods": [{"identifier": "encode", "parameters": "(String url)", "modifiers": "public static", "return": "String", "signature": "String encode(String url)", "full_signature": "public static String encode(String url)", "class_method_signature": "Urls.encode(String url)", "testcase": false, "constructor": false}, {"identifier": "encode", "parameters": "(String url, String charset)", "modifiers": "public static", "return": "String", "signature": "String encode(String url, String charset)", "full_signature": "public static String encode(String url, String charset)", "class_method_signature": "Urls.encode(String url, String charset)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String s)", "modifiers": "public static", "return": "String", "signature": "String decode(String s)", "full_signature": "public static String decode(String s)", "class_method_signature": "Urls.decode(String s)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(String s, String charset)", "modifiers": "public static", "return": "String", "signature": "String decode(String s, String charset)", "full_signature": "public static String decode(String s, String charset)", "class_method_signature": "Urls.decode(String s, String charset)", "testcase": false, "constructor": false}, {"identifier": "hasProtocolPrefix", "parameters": "(String location)", "modifiers": "public static", "return": "boolean", "signature": "boolean hasProtocolPrefix(String location)", "full_signature": "public static boolean hasProtocolPrefix(String location)", "class_method_signature": "Urls.hasProtocolPrefix(String location)", "testcase": false, "constructor": false}, {"identifier": "isClasspath", "parameters": "(String resourceLocation)", "modifiers": "public static", "return": "boolean", "signature": "boolean isClasspath(String resourceLocation)", "full_signature": "public static boolean isClasspath(String resourceLocation)", "class_method_signature": "Urls.isClasspath(String resourceLocation)", "testcase": false, "constructor": false}, {"identifier": "getQueryString", "parameters": "(String uri)", "modifiers": "public static", "return": "String", "signature": "String getQueryString(String uri)", "full_signature": "public static String getQueryString(String uri)", "class_method_signature": "Urls.getQueryString(String uri)", "testcase": false, "constructor": false}, {"identifier": "appendQueryString", "parameters": "(String url, String queryString)", "modifiers": "public static", "return": "String", "signature": "String appendQueryString(String url, String queryString)", "full_signature": "public static String appendQueryString(String url, String queryString)", "class_method_signature": "Urls.appendQueryString(String url, String queryString)", "testcase": false, "constructor": false}, {"identifier": "appendQueryParams", "parameters": "(String url, String name, String value)", "modifiers": "public static", "return": "String", "signature": "String appendQueryParams(String url, String name, String value)", "full_signature": "public static String appendQueryParams(String url, String name, String value)", "class_method_signature": "Urls.appendQueryParams(String url, String name, String value)", "testcase": false, "constructor": false}, {"identifier": "removeQueryString", "parameters": "(String url)", "modifiers": "public static", "return": "String", "signature": "String removeQueryString(String url)", "full_signature": "public static String removeQueryString(String url)", "class_method_signature": "Urls.removeQueryString(String url)", "testcase": false, "constructor": false}, {"identifier": "isUrl", "parameters": "(String resourceLocation)", "modifiers": "public static", "return": "boolean", "signature": "boolean isUrl(String resourceLocation)", "full_signature": "public static boolean isUrl(String resourceLocation)", "class_method_signature": "Urls.isUrl(String resourceLocation)", "testcase": false, "constructor": false}, {"identifier": "isFileUrl", "parameters": "(URL url)", "modifiers": "public static", "return": "boolean", "signature": "boolean isFileUrl(URL url)", "full_signature": "public static boolean isFileUrl(URL url)", "class_method_signature": "Urls.isFileUrl(URL url)", "testcase": false, "constructor": false}, {"identifier": "isJarUrl", "parameters": "(URL url)", "modifiers": "public static", "return": "boolean", "signature": "boolean isJarUrl(URL url)", "full_signature": "public static boolean isJarUrl(URL url)", "class_method_signature": "Urls.isJarUrl(URL url)", "testcase": false, "constructor": false}, {"identifier": "toURI", "parameters": "(URL url)", "modifiers": "public static", "return": "URI", "signature": "URI toURI(URL url)", "full_signature": "public static URI toURI(URL url)", "class_method_signature": "Urls.toURI(URL url)", "testcase": false, "constructor": false}, {"identifier": "toURI", "parameters": "(String location)", "modifiers": "public static", "return": "URI", "signature": "URI toURI(String location)", "full_signature": "public static URI toURI(String location)", "class_method_signature": "Urls.toURI(String location)", "testcase": false, "constructor": false}, {"identifier": "getJarFileURL", "parameters": "(URL jarUrl)", "modifiers": "public static", "return": "URL", "signature": "URL getJarFileURL(URL jarUrl)", "full_signature": "public static URL getJarFileURL(URL jarUrl)", "class_method_signature": "Urls.getJarFileURL(URL jarUrl)", "testcase": false, "constructor": false}, {"identifier": "setUseCachesIfNecessary", "parameters": "(URLConnection con)", "modifiers": "public static", "return": "void", "signature": "void setUseCachesIfNecessary(URLConnection con)", "full_signature": "public static void setUseCachesIfNecessary(URLConnection con)", "class_method_signature": "Urls.setUseCachesIfNecessary(URLConnection con)", "testcase": false, "constructor": false}, {"identifier": "getQueryString", "parameters": "(Map<String, String> map)", "modifiers": "public static", "return": "String", "signature": "String getQueryString(Map<String, String> map)", "full_signature": "public static String getQueryString(Map<String, String> map)", "class_method_signature": "Urls.getQueryString(Map<String, String> map)", "testcase": false, "constructor": false}, {"identifier": "getQueryStringBuilder", "parameters": "(Map<String, String> map)", "modifiers": "public static", "return": "StringBuilder", "signature": "StringBuilder getQueryStringBuilder(Map<String, String> map)", "full_signature": "public static StringBuilder getQueryStringBuilder(Map<String, String> map)", "class_method_signature": "Urls.getQueryStringBuilder(Map<String, String> map)", "testcase": false, "constructor": false}, {"identifier": "queryStringToMap", "parameters": "(String queryString)", "modifiers": "public static", "return": "Map<String, String>", "signature": "Map<String, String> queryStringToMap(String queryString)", "full_signature": "public static Map<String, String> queryStringToMap(String queryString)", "class_method_signature": "Urls.queryStringToMap(String queryString)", "testcase": false, "constructor": false}, {"identifier": "resolveUrlExpr", "parameters": "(String expression, URI uri)", "modifiers": "public static", "return": "String", "signature": "String resolveUrlExpr(String expression, URI uri)", "full_signature": "public static String resolveUrlExpr(String expression, URI uri)", "class_method_signature": "Urls.resolveUrlExpr(String expression, URI uri)", "testcase": false, "constructor": false}, {"identifier": "getExpressionValue", "parameters": "(String expression, URI uri)", "modifiers": "protected static", "return": "String", "signature": "String getExpressionValue(String expression, URI uri)", "full_signature": "protected static String getExpressionValue(String expression, URI uri)", "class_method_signature": "Urls.getExpressionValue(String expression, URI uri)", "testcase": false, "constructor": false}, {"identifier": "Urls", "parameters": "()", "modifiers": "protected", "return": "", "signature": " Urls()", "full_signature": "protected  Urls()", "class_method_signature": "Urls.Urls()", "testcase": false, "constructor": true}], "file": "base/lang/src/main/java/leap/lang/net/Urls.java"}, "focal_method": {"identifier": "resolveUrlExpr", "parameters": "(String expression, URI uri)", "modifiers": "public static", "return": "String", "body": "public static String resolveUrlExpr(String expression, URI uri){\n\t\tint i = 0;\n\t\tStringBuilder source = new StringBuilder(expression);\n\t\tStringBuilder builder = new StringBuilder();\n\t\twhile (source.length()>0){\n\t\t\tchar c = source.charAt(i);\n\t\t\tsource.deleteCharAt(i);\n\t\t\tif(c == '@'){\n\t\t\t\tif(source.charAt(i) == '{'){\n\t\t\t\t\tsource.deleteCharAt(i);\n\t\t\t\t\tint index = source.indexOf(\"}\");\n\t\t\t\t\tif(-1 == index){\n\t\t\t\t\t\tthrow new IllegalArgumentException(\"error server url expression:\"+expression);\n\t\t\t\t\t}\n\t\t\t\t\tString exp = source.substring(0,index);\n\t\t\t\t\tsource.delete(0,index+1);\n\t\t\t\t\tbuilder.append(getExpressionValue(exp,uri));\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tif(c != '/' || builder.length() == 0){\n\t\t\t\t\tbuilder.append(c);\n\t\t\t\t}else if(builder.charAt(builder.length()-1)!='/'){\n\t\t\t\t\tbuilder.append(c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn builder.toString();\n\t}", "signature": "String resolveUrlExpr(String expression, URI uri)", "full_signature": "public static String resolveUrlExpr(String expression, URI uri)", "class_method_signature": "Urls.resolveUrlExpr(String expression, URI uri)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "deleteCharAt", "charAt", "deleteCharAt", "indexOf", "substring", "delete", "append", "getExpressionValue", "length", "append", "charAt", "length", "append", "toString"]}, "repository": {"repo_id": 48562236, "url": "https://github.com/leapframework/framework", "stars": 42, "created": "12/25/2015 1:54:52 AM +00:00", "updates": "2020-01-20T03:04:15+00:00", "fork": "False", "license": "licensed"}}