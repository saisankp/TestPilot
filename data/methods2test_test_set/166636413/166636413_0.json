{"test_class": {"identifier": "CollectServerClientTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String URL_STRING = \"http://testurl\";", "modifier": "static final", "type": "String", "declarator": "URL_STRING = \"http://testurl\"", "var_name": "URL_STRING"}, {"original_string": "CollectServerClient collectServerClient;", "modifier": "", "type": "CollectServerClient", "declarator": "collectServerClient", "var_name": "collectServerClient"}, {"original_string": "CollectServerClient collectServerClientError;", "modifier": "", "type": "CollectServerClient", "declarator": "collectServerClientError", "var_name": "collectServerClientError"}], "file": "collect_app/src/test/java/org/odk/collect/android/http/CollectServerClientTest.java"}, "test_case": {"identifier": "testGetXMLDocumentErrorResponse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetXMLDocumentErrorResponse() {\n        DocumentFetchResult fetchResult = collectServerClientError.getXmlDocument(URL_STRING);\n        assertEquals(fetchResult.errorMessage, \"Parsing failed with null while accessing \" + URL_STRING);\n    }", "signature": "void testGetXMLDocumentErrorResponse()", "full_signature": "@Test public void testGetXMLDocumentErrorResponse()", "class_method_signature": "CollectServerClientTest.testGetXMLDocumentErrorResponse()", "testcase": true, "constructor": false, "invocations": ["getXmlDocument", "assertEquals"]}, "focal_class": {"identifier": "CollectServerClient", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String HTTP_CONTENT_TYPE_TEXT_XML = \"text/xml\";", "modifier": "public static final", "type": "String", "declarator": "HTTP_CONTENT_TYPE_TEXT_XML = \"text/xml\"", "var_name": "HTTP_CONTENT_TYPE_TEXT_XML"}, {"original_string": "protected OpenRosaHttpInterface httpInterface;", "modifier": "protected", "type": "OpenRosaHttpInterface", "declarator": "httpInterface", "var_name": "httpInterface"}, {"original_string": "private final WebCredentialsUtils webCredentialsUtils;", "modifier": "private final", "type": "WebCredentialsUtils", "declarator": "webCredentialsUtils", "var_name": "webCredentialsUtils"}], "methods": [{"identifier": "CollectServerClient", "parameters": "(OpenRosaHttpInterface httpInterface, WebCredentialsUtils webCredentialsUtils)", "modifiers": "@Inject public", "return": "", "signature": " CollectServerClient(OpenRosaHttpInterface httpInterface, WebCredentialsUtils webCredentialsUtils)", "full_signature": "@Inject public  CollectServerClient(OpenRosaHttpInterface httpInterface, WebCredentialsUtils webCredentialsUtils)", "class_method_signature": "CollectServerClient.CollectServerClient(OpenRosaHttpInterface httpInterface, WebCredentialsUtils webCredentialsUtils)", "testcase": false, "constructor": true}, {"identifier": "getXmlDocument", "parameters": "(String urlString)", "modifiers": "public", "return": "DocumentFetchResult", "signature": "DocumentFetchResult getXmlDocument(String urlString)", "full_signature": "public DocumentFetchResult getXmlDocument(String urlString)", "class_method_signature": "CollectServerClient.getXmlDocument(String urlString)", "testcase": false, "constructor": false}, {"identifier": "getHttpInputStream", "parameters": "(@NonNull String downloadUrl, @Nullable final String contentType)", "modifiers": "public @NonNull", "return": "HttpGetResult", "signature": "HttpGetResult getHttpInputStream(@NonNull String downloadUrl, @Nullable final String contentType)", "full_signature": "public @NonNull HttpGetResult getHttpInputStream(@NonNull String downloadUrl, @Nullable final String contentType)", "class_method_signature": "CollectServerClient.getHttpInputStream(@NonNull String downloadUrl, @Nullable final String contentType)", "testcase": false, "constructor": false}, {"identifier": "getPlainTextMimeType", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String getPlainTextMimeType()", "full_signature": "public static String getPlainTextMimeType()", "class_method_signature": "CollectServerClient.getPlainTextMimeType()", "testcase": false, "constructor": false}], "file": "collect_app/src/main/java/org/odk/collect/android/http/CollectServerClient.java"}, "focal_method": {"identifier": "getXmlDocument", "parameters": "(String urlString)", "modifiers": "public", "return": "DocumentFetchResult", "body": "public DocumentFetchResult getXmlDocument(String urlString) {\n\n        // parse response\n        Document doc;\n        HttpGetResult inputStreamResult;\n\n        try {\n            inputStreamResult = getHttpInputStream(urlString, HTTP_CONTENT_TYPE_TEXT_XML);\n\n            if (inputStreamResult.getStatusCode() != HttpURLConnection.HTTP_OK) {\n                String error = \"getXmlDocument failed while accessing \"\n                        + urlString + \" with status code: \" + inputStreamResult.getStatusCode();\n                Timber.e(error);\n                return new DocumentFetchResult(error, inputStreamResult.getStatusCode());\n            }\n\n            try (InputStream resultInputStream = inputStreamResult.getInputStream();\n                 InputStreamReader streamReader = new InputStreamReader(resultInputStream, \"UTF-8\")) {\n\n                doc = new Document();\n                KXmlParser parser = new KXmlParser();\n                parser.setInput(streamReader);\n                parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, true);\n                doc.parse(parser);\n            }\n        } catch (Exception e) {\n            String error = \"Parsing failed with \" + e.getMessage() + \" while accessing \" + urlString;\n            Timber.e(error);\n            return new DocumentFetchResult(error, 0);\n        }\n\n        return new DocumentFetchResult(doc, inputStreamResult.isOpenRosaResponse(), inputStreamResult.getHash());\n    }", "signature": "DocumentFetchResult getXmlDocument(String urlString)", "full_signature": "public DocumentFetchResult getXmlDocument(String urlString)", "class_method_signature": "CollectServerClient.getXmlDocument(String urlString)", "testcase": false, "constructor": false, "invocations": ["getHttpInputStream", "getStatusCode", "getStatusCode", "e", "getStatusCode", "getInputStream", "setInput", "setFeature", "parse", "getMessage", "e", "isOpenRosaResponse", "getHash"]}, "repository": {"repo_id": 166636413, "url": "https://github.com/fieldsight/fieldsight-mobile", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 14, "size": 41030, "license": "licensed"}}