{"test_class": {"identifier": "CalculPriceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double delta = 0.00001d;", "modifier": "private static final", "type": "double", "declarator": "delta = 0.00001d", "var_name": "delta"}, {"original_string": "private final double price = 50d;", "modifier": "private final", "type": "double", "declarator": "price = 50d", "var_name": "price"}, {"original_string": "private final double taxe = 0d;", "modifier": "private final", "type": "double", "declarator": "taxe = 0d", "var_name": "taxe"}, {"original_string": "private final double discount = 0d;", "modifier": "private final", "type": "double", "declarator": "discount = 0d", "var_name": "discount"}], "file": "app/src/test/java/fr/pasteque/client/utils/CalculPriceTest.java"}, "test_case": {"identifier": "getTaxCostTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getTaxCostTest() {\n        double taxe = 0.055;\n        double control = 2.75;\n        assertEquals(control, getGenericPrice(price, discount, taxe, Type.TAXE_COST));\n    }", "signature": "void getTaxCostTest()", "full_signature": "@Test public void getTaxCostTest()", "class_method_signature": "CalculPriceTest.getTaxCostTest()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getGenericPrice"]}, "focal_class": {"identifier": "CalculPrice", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int DEFAULT_DECIMAL_NUMBER = 5;", "modifier": "public static final", "type": "int", "declarator": "DEFAULT_DECIMAL_NUMBER = 5", "var_name": "DEFAULT_DECIMAL_NUMBER"}], "methods": [{"identifier": "hasOption", "parameters": "(int binaryMask, int model)", "modifiers": "private static", "return": "boolean", "signature": "boolean hasOption(int binaryMask, int model)", "full_signature": "private static boolean hasOption(int binaryMask, int model)", "class_method_signature": "CalculPrice.hasOption(int binaryMask, int model)", "testcase": false, "constructor": false}, {"identifier": "getGenericPrice", "parameters": "(double price, double discount, double taxe, int binaryMask)", "modifiers": "public static final", "return": "double", "signature": "double getGenericPrice(double price, double discount, double taxe, int binaryMask)", "full_signature": "public static final double getGenericPrice(double price, double discount, double taxe, int binaryMask)", "class_method_signature": "CalculPrice.getGenericPrice(double price, double discount, double taxe, int binaryMask)", "testcase": false, "constructor": false}, {"identifier": "removeTaxe", "parameters": "(double price, double tax)", "modifiers": "public static final", "return": "double", "signature": "double removeTaxe(double price, double tax)", "full_signature": "public static final double removeTaxe(double price, double tax)", "class_method_signature": "CalculPrice.removeTaxe(double price, double tax)", "testcase": false, "constructor": false}, {"identifier": "getDiscountCost", "parameters": "(double price, double discount)", "modifiers": "public static final", "return": "double", "signature": "double getDiscountCost(double price, double discount)", "full_signature": "public static final double getDiscountCost(double price, double discount)", "class_method_signature": "CalculPrice.getDiscountCost(double price, double discount)", "testcase": false, "constructor": false}, {"identifier": "applyDiscount", "parameters": "(double price, double discount)", "modifiers": "public static final", "return": "double", "signature": "double applyDiscount(double price, double discount)", "full_signature": "public static final double applyDiscount(double price, double discount)", "class_method_signature": "CalculPrice.applyDiscount(double price, double discount)", "testcase": false, "constructor": false}, {"identifier": "mergeDiscount", "parameters": "(double productDiscount, double ticketDiscount)", "modifiers": "public static final", "return": "double", "signature": "double mergeDiscount(double productDiscount, double ticketDiscount)", "full_signature": "public static final double mergeDiscount(double productDiscount, double ticketDiscount)", "class_method_signature": "CalculPrice.mergeDiscount(double productDiscount, double ticketDiscount)", "testcase": false, "constructor": false}, {"identifier": "applyTax", "parameters": "(double price, double taxRate)", "modifiers": "public static", "return": "double", "signature": "double applyTax(double price, double taxRate)", "full_signature": "public static double applyTax(double price, double taxRate)", "class_method_signature": "CalculPrice.applyTax(double price, double taxRate)", "testcase": false, "constructor": false}, {"identifier": "getTaxCost", "parameters": "(double price, double taxRate)", "modifiers": "public static", "return": "double", "signature": "double getTaxCost(double price, double taxRate)", "full_signature": "public static double getTaxCost(double price, double taxRate)", "class_method_signature": "CalculPrice.getTaxCost(double price, double taxRate)", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "(double number)", "modifiers": "public static", "return": "double", "signature": "double round(double number)", "full_signature": "public static double round(double number)", "class_method_signature": "CalculPrice.round(double number)", "testcase": false, "constructor": false}, {"identifier": "round", "parameters": "(double number, int decimalNumber)", "modifiers": "public static", "return": "double", "signature": "double round(double number, int decimalNumber)", "full_signature": "public static double round(double number, int decimalNumber)", "class_method_signature": "CalculPrice.round(double number, int decimalNumber)", "testcase": false, "constructor": false}], "file": "app/src/main/java/fr/pasteque/client/utils/CalculPrice.java"}, "focal_method": {"identifier": "getTaxCost", "parameters": "(double price, double taxRate)", "modifiers": "public static", "return": "double", "body": "public static double getTaxCost(double price, double taxRate) {\n        return round(price * taxRate);\n    }", "signature": "double getTaxCost(double price, double taxRate)", "full_signature": "public static double getTaxCost(double price, double taxRate)", "class_method_signature": "CalculPrice.getTaxCost(double price, double taxRate)", "testcase": false, "constructor": false, "invocations": ["round"]}, "repository": {"repo_id": 46855694, "url": "https://github.com/ScilCoop/pasteque-android", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 7, "size": 13425, "license": "licensed"}}