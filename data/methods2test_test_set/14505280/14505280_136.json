{"test_class": {"identifier": "GetMapConfigurationCommandTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final double DOUBLE_TOLERANCE = .0000000001;", "modifier": "private static final", "type": "double", "declarator": "DOUBLE_TOLERANCE = .0000000001", "var_name": "DOUBLE_TOLERANCE"}, {"original_string": "@Autowired\n\tprivate ConfigurationService configurationService;", "modifier": "@Autowired\n\tprivate", "type": "ConfigurationService", "declarator": "configurationService", "var_name": "configurationService"}, {"original_string": "@Autowired\n\tprivate CommandDispatcher dispatcher;", "modifier": "@Autowired\n\tprivate", "type": "CommandDispatcher", "declarator": "dispatcher", "var_name": "dispatcher"}], "file": "command/src/test/java/org/geomajas/command/configuration/GetMapConfigurationCommandTest.java"}, "test_case": {"identifier": "testServerSideOnlyInfo", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testServerSideOnlyInfo() throws Exception {\n\t\tGetMapConfigurationRequest request = new GetMapConfigurationRequest();\n\t\trequest.setApplicationId(\"appServerSideOnly\");\n\t\trequest.setMapId(\"mapServerSideOnly\");\n\t\tGetMapConfigurationResponse response = (GetMapConfigurationResponse) dispatcher.execute(\n\t\t\t\tGetMapConfigurationRequest.COMMAND, request, null, \"en\");\n\t\tif (response.isError()) {\n\t\t\tresponse.getErrors().get(0).printStackTrace();\n\t\t}\n\t\tAssert.assertFalse(response.isError());\n\t\tClientMapInfo mapInfo = response.getMapInfo();\n\t\tAssert.assertNotNull(mapInfo);\n\n\t\t// user data\n\t\tClientUserDataInfo info = mapInfo.getUserData();\n\t\tAssert.assertNull(info);\n\n\t\t// widget data\n\t\tAssert.assertNotNull(mapInfo.getWidgetInfo());\n\t\tAssert.assertNull(mapInfo.getWidgetInfo(\"appDummy\")); // not present\n\t\tAssert.assertNotNull(mapInfo.getWidgetInfo(\"layerTree\")); // present\n\t\tAssert.assertNull(mapInfo.getWidgetInfo(\"mapDummy\")); // filtered because ServerSideOnlyInfo\n\t\t\n\t\t// ViewBounds LimitOption\n\t\tAssert.assertEquals(BoundsLimitOption.COMPLETELY_WITHIN_MAX_BOUNDS, \n\t\t\t\tmapInfo.getViewBoundsLimitOption());\n\t\t\n\t}", "signature": "void testServerSideOnlyInfo()", "full_signature": "@Test public void testServerSideOnlyInfo()", "class_method_signature": "GetMapConfigurationCommandTest.testServerSideOnlyInfo()", "testcase": true, "constructor": false, "invocations": ["setApplicationId", "setMapId", "execute", "isError", "printStackTrace", "get", "getErrors", "assertFalse", "isError", "getMapInfo", "assertNotNull", "getUserData", "assertNull", "assertNotNull", "getWidgetInfo", "assertNull", "getWidgetInfo", "assertNotNull", "getWidgetInfo", "assertNull", "getWidgetInfo", "assertEquals", "getViewBoundsLimitOption"]}, "focal_class": {"identifier": "GetMapConfigurationCommand", "superclass": "", "interfaces": "implements CommandHasRequest<GetMapConfigurationRequest, GetMapConfigurationResponse>", "fields": [{"original_string": "@Autowired\n\tprivate ApplicationContext context;", "modifier": "@Autowired\n\tprivate", "type": "ApplicationContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Autowired\n\tprivate SecurityContext securityContext;", "modifier": "@Autowired\n\tprivate", "type": "SecurityContext", "declarator": "securityContext", "var_name": "securityContext"}], "methods": [{"identifier": "getEmptyCommandRequest", "parameters": "()", "modifiers": "@Override public", "return": "GetMapConfigurationRequest", "signature": "GetMapConfigurationRequest getEmptyCommandRequest()", "full_signature": "@Override public GetMapConfigurationRequest getEmptyCommandRequest()", "class_method_signature": "GetMapConfigurationCommand.getEmptyCommandRequest()", "testcase": false, "constructor": false}, {"identifier": "getEmptyCommandResponse", "parameters": "()", "modifiers": "@Override public", "return": "GetMapConfigurationResponse", "signature": "GetMapConfigurationResponse getEmptyCommandResponse()", "full_signature": "@Override public GetMapConfigurationResponse getEmptyCommandResponse()", "class_method_signature": "GetMapConfigurationCommand.getEmptyCommandResponse()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(GetMapConfigurationRequest request, GetMapConfigurationResponse response)", "modifiers": "@Override public", "return": "void", "signature": "void execute(GetMapConfigurationRequest request, GetMapConfigurationResponse response)", "full_signature": "@Override public void execute(GetMapConfigurationRequest request, GetMapConfigurationResponse response)", "class_method_signature": "GetMapConfigurationCommand.execute(GetMapConfigurationRequest request, GetMapConfigurationResponse response)", "testcase": false, "constructor": false}, {"identifier": "securityClone", "parameters": "(ClientMapInfo original)", "modifiers": "public", "return": "ClientMapInfo", "signature": "ClientMapInfo securityClone(ClientMapInfo original)", "full_signature": "public ClientMapInfo securityClone(ClientMapInfo original)", "class_method_signature": "GetMapConfigurationCommand.securityClone(ClientMapInfo original)", "testcase": false, "constructor": false}, {"identifier": "securityClone", "parameters": "(Map<String, ClientWidgetInfo> widgetInfo)", "modifiers": "public", "return": "Map<String, ClientWidgetInfo>", "signature": "Map<String, ClientWidgetInfo> securityClone(Map<String, ClientWidgetInfo> widgetInfo)", "full_signature": "public Map<String, ClientWidgetInfo> securityClone(Map<String, ClientWidgetInfo> widgetInfo)", "class_method_signature": "GetMapConfigurationCommand.securityClone(Map<String, ClientWidgetInfo> widgetInfo)", "testcase": false, "constructor": false}, {"identifier": "securityCloneLayerExtraInfo", "parameters": "(Map<String, LayerExtraInfo> extraInfoMap)", "modifiers": "public", "return": "Map<String, LayerExtraInfo>", "signature": "Map<String, LayerExtraInfo> securityCloneLayerExtraInfo(Map<String, LayerExtraInfo> extraInfoMap)", "full_signature": "public Map<String, LayerExtraInfo> securityCloneLayerExtraInfo(Map<String, LayerExtraInfo> extraInfoMap)", "class_method_signature": "GetMapConfigurationCommand.securityCloneLayerExtraInfo(Map<String, LayerExtraInfo> extraInfoMap)", "testcase": false, "constructor": false}, {"identifier": "securityClone", "parameters": "(ClientLayerInfo original)", "modifiers": "public", "return": "ClientLayerInfo", "signature": "ClientLayerInfo securityClone(ClientLayerInfo original)", "full_signature": "public ClientLayerInfo securityClone(ClientLayerInfo original)", "class_method_signature": "GetMapConfigurationCommand.securityClone(ClientLayerInfo original)", "testcase": false, "constructor": false}, {"identifier": "securityClone", "parameters": "(ClientLayerTreeInfo original)", "modifiers": "public", "return": "ClientLayerTreeInfo", "signature": "ClientLayerTreeInfo securityClone(ClientLayerTreeInfo original)", "full_signature": "public ClientLayerTreeInfo securityClone(ClientLayerTreeInfo original)", "class_method_signature": "GetMapConfigurationCommand.securityClone(ClientLayerTreeInfo original)", "testcase": false, "constructor": false}, {"identifier": "securityClone", "parameters": "(ClientLayerTreeNodeInfo original)", "modifiers": "public", "return": "ClientLayerTreeNodeInfo", "signature": "ClientLayerTreeNodeInfo securityClone(ClientLayerTreeNodeInfo original)", "full_signature": "public ClientLayerTreeNodeInfo securityClone(ClientLayerTreeNodeInfo original)", "class_method_signature": "GetMapConfigurationCommand.securityClone(ClientLayerTreeNodeInfo original)", "testcase": false, "constructor": false}, {"identifier": "securityClone", "parameters": "(ClientToolbarInfo original)", "modifiers": "public", "return": "ClientToolbarInfo", "signature": "ClientToolbarInfo securityClone(ClientToolbarInfo original)", "full_signature": "public ClientToolbarInfo securityClone(ClientToolbarInfo original)", "class_method_signature": "GetMapConfigurationCommand.securityClone(ClientToolbarInfo original)", "testcase": false, "constructor": false}, {"identifier": "securityClone", "parameters": "(List<ClientToolInfo> original)", "modifiers": "public", "return": "List<ClientToolInfo>", "signature": "List<ClientToolInfo> securityClone(List<ClientToolInfo> original)", "full_signature": "public List<ClientToolInfo> securityClone(List<ClientToolInfo> original)", "class_method_signature": "GetMapConfigurationCommand.securityClone(List<ClientToolInfo> original)", "testcase": false, "constructor": false}], "file": "command/src/main/java/org/geomajas/command/configuration/GetMapConfigurationCommand.java"}, "focal_method": {"identifier": "execute", "parameters": "(GetMapConfigurationRequest request, GetMapConfigurationResponse response)", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void execute(GetMapConfigurationRequest request, GetMapConfigurationResponse response) throws Exception {\n\t\tif (null == request.getApplicationId()) {\n\t\t\tthrow new GeomajasException(ExceptionCode.PARAMETER_MISSING, \"applicationId\");\n\t\t}\n\t\tString mapId = request.getMapId();\n\t\tif (null == mapId) {\n\t\t\tthrow new GeomajasException(ExceptionCode.PARAMETER_MISSING, \"mapId\");\n\t\t}\n\n\t\tClientApplicationInfo application = context.getBean(request.getApplicationId(), ClientApplicationInfo.class);\n\t\tfor (ClientMapInfo map : application.getMaps()) {\n\t\t\tif (mapId.equals(map.getId())) {\n\t\t\t\tresponse.setMapInfo(securityClone(map));\n\t\t\t}\n\t\t}\n\t\tif (response.getMapInfo() == null) {\n\t\t\tthrow new GeomajasException(ExceptionCode.MAP_NOT_FOUND, request.getMapId(), request.getApplicationId());\n\t\t}\n\t}", "signature": "void execute(GetMapConfigurationRequest request, GetMapConfigurationResponse response)", "full_signature": "@Override public void execute(GetMapConfigurationRequest request, GetMapConfigurationResponse response)", "class_method_signature": "GetMapConfigurationCommand.execute(GetMapConfigurationRequest request, GetMapConfigurationResponse response)", "testcase": false, "constructor": false, "invocations": ["getApplicationId", "getMapId", "getBean", "getApplicationId", "getMaps", "equals", "getId", "setMapInfo", "securityClone", "getMapInfo", "getMapId", "getApplicationId"]}, "repository": {"repo_id": 14505280, "url": "https://github.com/geomajas/geomajas-project-server", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 13, "size": 124882, "license": "licensed"}}