{"test_class": {"identifier": "JdkRNGTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final long SEED = 1234;", "modifier": "static final", "type": "long", "declarator": "SEED = 1234", "var_name": "SEED"}, {"original_string": "static final int N = 1000;", "modifier": "static final", "type": "int", "declarator": "N = 1000", "var_name": "N"}], "file": "jtstoolkit/src/test/java/ec/tstoolkit/random/JdkRNGTest.java"}, "test_case": {"identifier": "testSynchronize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSynchronize() {\n        assertSameSynchronized(createRNG());\n    }", "signature": "void testSynchronize()", "full_signature": "@Test public void testSynchronize()", "class_method_signature": "JdkRNGTest.testSynchronize()", "testcase": true, "constructor": false, "invocations": ["assertSameSynchronized", "createRNG"]}, "focal_class": {"identifier": "JdkRNG", "superclass": "", "interfaces": "implements IRandomNumberGenerator", "fields": [{"original_string": "final Random random;", "modifier": "final", "type": "Random", "declarator": "random", "var_name": "random"}], "methods": [{"identifier": "newRandom", "parameters": "()", "modifiers": "public static", "return": "JdkRNG", "signature": "JdkRNG newRandom()", "full_signature": "public static JdkRNG newRandom()", "class_method_signature": "JdkRNG.newRandom()", "testcase": false, "constructor": false}, {"identifier": "newRandom", "parameters": "(long seed)", "modifiers": "public static", "return": "JdkRNG", "signature": "JdkRNG newRandom(long seed)", "full_signature": "public static JdkRNG newRandom(long seed)", "class_method_signature": "JdkRNG.newRandom(long seed)", "testcase": false, "constructor": false}, {"identifier": "JdkRNG", "parameters": "(Random random)", "modifiers": "public", "return": "", "signature": " JdkRNG(Random random)", "full_signature": "public  JdkRNG(Random random)", "class_method_signature": "JdkRNG.JdkRNG(Random random)", "testcase": false, "constructor": true}, {"identifier": "getRandom", "parameters": "()", "modifiers": "public", "return": "Random", "signature": "Random getRandom()", "full_signature": "public Random getRandom()", "class_method_signature": "JdkRNG.getRandom()", "testcase": false, "constructor": false}, {"identifier": "nextDouble", "parameters": "()", "modifiers": "@Override public", "return": "double", "signature": "double nextDouble()", "full_signature": "@Override public double nextDouble()", "class_method_signature": "JdkRNG.nextDouble()", "testcase": false, "constructor": false}, {"identifier": "nextInt", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int nextInt()", "full_signature": "@Override public int nextInt()", "class_method_signature": "JdkRNG.nextInt()", "testcase": false, "constructor": false}, {"identifier": "nextLong", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long nextLong()", "full_signature": "@Override public long nextLong()", "class_method_signature": "JdkRNG.nextLong()", "testcase": false, "constructor": false}, {"identifier": "nextBoolean", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean nextBoolean()", "full_signature": "@Override public boolean nextBoolean()", "class_method_signature": "JdkRNG.nextBoolean()", "testcase": false, "constructor": false}, {"identifier": "nextFloat", "parameters": "()", "modifiers": "@Override public", "return": "float", "signature": "float nextFloat()", "full_signature": "@Override public float nextFloat()", "class_method_signature": "JdkRNG.nextFloat()", "testcase": false, "constructor": false}, {"identifier": "nextInt", "parameters": "(int n)", "modifiers": "@Override public", "return": "int", "signature": "int nextInt(int n)", "full_signature": "@Override public int nextInt(int n)", "class_method_signature": "JdkRNG.nextInt(int n)", "testcase": false, "constructor": false}, {"identifier": "synchronize", "parameters": "()", "modifiers": "@Override public", "return": "JdkRNG", "signature": "JdkRNG synchronize()", "full_signature": "@Override public JdkRNG synchronize()", "class_method_signature": "JdkRNG.synchronize()", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/random/JdkRNG.java"}, "focal_method": {"identifier": "synchronize", "parameters": "()", "modifiers": "@Override public", "return": "JdkRNG", "body": "@Override\n    public JdkRNG synchronize() {\n        return this;\n    }", "signature": "JdkRNG synchronize()", "full_signature": "@Override public JdkRNG synchronize()", "class_method_signature": "JdkRNG.synchronize()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}