{"test_class": {"identifier": "PrincipalAuthorityTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String svcVersion = \"S1\";", "modifier": "private final", "type": "String", "declarator": "svcVersion = \"S1\"", "var_name": "svcVersion"}, {"original_string": "private final String svcDomain = \"sports\";", "modifier": "private final", "type": "String", "declarator": "svcDomain = \"sports\"", "var_name": "svcDomain"}, {"original_string": "private final String svcName = \"fantasy\";", "modifier": "private final", "type": "String", "declarator": "svcName = \"fantasy\"", "var_name": "svcName"}, {"original_string": "private final String host = \"somehost.somecompany.com\";", "modifier": "private final", "type": "String", "declarator": "host = \"somehost.somecompany.com\"", "var_name": "host"}, {"original_string": "private final String salt = \"saltvalue\";", "modifier": "private final", "type": "String", "declarator": "salt = \"saltvalue\"", "var_name": "salt"}, {"original_string": "private final String usrVersion = \"U1\";", "modifier": "private final", "type": "String", "declarator": "usrVersion = \"U1\"", "var_name": "usrVersion"}, {"original_string": "private final String usrDomain = \"user\";", "modifier": "private final", "type": "String", "declarator": "usrDomain = \"user\"", "var_name": "usrDomain"}, {"original_string": "private final String usrName = \"john\";", "modifier": "private final", "type": "String", "declarator": "usrName = \"john\"", "var_name": "usrName"}, {"original_string": "private final long expirationTime = 10;", "modifier": "private final", "type": "long", "declarator": "expirationTime = 10", "var_name": "expirationTime"}, {"original_string": "private String servicePrivateKeyStringK0 = null;", "modifier": "private", "type": "String", "declarator": "servicePrivateKeyStringK0 = null", "var_name": "servicePrivateKeyStringK0"}, {"original_string": "private String servicePrivateKeyStringK1 = null;", "modifier": "private", "type": "String", "declarator": "servicePrivateKeyStringK1 = null", "var_name": "servicePrivateKeyStringK1"}], "file": "libs/java/auth_core/src/test/java/com/yahoo/athenz/auth/impl/PrincipalAuthorityTest.java"}, "test_case": {"identifier": "testPrincipalAuthority", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPrincipalAuthority() throws IOException, CryptoException {\n        PrincipalAuthority serviceAuthority = new PrincipalAuthority();\n        KeyStore keyStore = new KeyStoreMock();\n        serviceAuthority.setKeyStore(keyStore);\n\n        assertNull(serviceAuthority.getDomain());\n        assertEquals(serviceAuthority.getHeader(), \"Athenz-Principal-Auth\");\n\n        // Create and sign token with no key version\n        PrincipalToken serviceToken = new PrincipalToken.Builder(svcVersion, svcDomain, svcName)\n            .host(host).salt(salt).expirationWindow(expirationTime).build();\n        serviceToken.sign(servicePrivateKeyStringK0);\n\n        StringBuilder errMsg = new StringBuilder();\n        Principal principal = serviceAuthority.authenticate(\n                serviceToken.getSignedToken(), null, \"GET\", errMsg);\n\n        assertNotNull(principal);\n        assertNotNull(principal.getAuthority());\n        assertEquals(principal.getCredentials(), serviceToken.getSignedToken());\n        assertEquals(principal.getDomain(), serviceToken.getDomain());\n        assertEquals(principal.getName(), serviceToken.getName());\n        assertEquals(principal.getKeyId(), \"0\");\n        \n        principal = serviceAuthority.authenticate(\n                serviceToken.getSignedToken(), null, \"GET\", null);\n        assertNotNull(principal);\n        \n        // Create and sign token with key version 0\n        String testKeyVersionK0 = \"0\";\n        serviceToken = new PrincipalToken.Builder(svcVersion, svcDomain, svcName)\n                .host(host).salt(salt).expirationWindow(expirationTime)\n                .keyId(testKeyVersionK0).build();\n        serviceToken.sign(servicePrivateKeyStringK0);\n\n        principal = serviceAuthority.authenticate(serviceToken.getSignedToken(), null, \"GET\", errMsg);\n        \n        assertNotNull(principal);\n        assertEquals(principal.getCredentials(), serviceToken.getSignedToken());\n        \n        // Create and sign token with key version 1\n        String testKeyVersionK1 = \"1\";\n        serviceToken = new PrincipalToken.Builder(svcVersion, svcDomain, svcName)\n            .host(host).salt(salt).expirationWindow(expirationTime).keyId(testKeyVersionK1).build();\n        serviceToken.sign(servicePrivateKeyStringK1);\n\n        principal = serviceAuthority.authenticate(serviceToken.getSignedToken(), null, \"GET\", errMsg);\n        \n        assertNotNull(principal);\n        assertEquals(principal.getCredentials(), serviceToken.getSignedToken());\n    }", "signature": "void testPrincipalAuthority()", "full_signature": "@Test public void testPrincipalAuthority()", "class_method_signature": "PrincipalAuthorityTest.testPrincipalAuthority()", "testcase": true, "constructor": false, "invocations": ["setKeyStore", "assertNull", "getDomain", "assertEquals", "getHeader", "build", "expirationWindow", "salt", "host", "sign", "authenticate", "getSignedToken", "assertNotNull", "assertNotNull", "getAuthority", "assertEquals", "getCredentials", "getSignedToken", "assertEquals", "getDomain", "getDomain", "assertEquals", "getName", "getName", "assertEquals", "getKeyId", "authenticate", "getSignedToken", "assertNotNull", "build", "keyId", "expirationWindow", "salt", "host", "sign", "authenticate", "getSignedToken", "assertNotNull", "assertEquals", "getCredentials", "getSignedToken", "build", "keyId", "expirationWindow", "salt", "host", "sign", "authenticate", "getSignedToken", "assertNotNull", "assertEquals", "getCredentials", "getSignedToken"]}, "focal_class": {"identifier": "PrincipalAuthority", "superclass": "", "interfaces": "implements Authority, AuthorityKeyStore", "fields": [{"original_string": "private static final String USER_DOMAIN = \"user\";", "modifier": "private static final", "type": "String", "declarator": "USER_DOMAIN = \"user\"", "var_name": "USER_DOMAIN"}, {"original_string": "private static final String SYS_AUTH_DOMAIN = \"sys.auth\";", "modifier": "private static final", "type": "String", "declarator": "SYS_AUTH_DOMAIN = \"sys.auth\"", "var_name": "SYS_AUTH_DOMAIN"}, {"original_string": "private static final String ZMS_SERVICE = \"zms\";", "modifier": "private static final", "type": "String", "declarator": "ZMS_SERVICE = \"zms\"", "var_name": "ZMS_SERVICE"}, {"original_string": "private static final String ZTS_SERVICE = \"zts\";", "modifier": "private static final", "type": "String", "declarator": "ZTS_SERVICE = \"zts\"", "var_name": "ZTS_SERVICE"}, {"original_string": "static final String ATHENZ_PROP_TOKEN_OFFSET = \"athenz.auth.principal.token_allowed_offset\";", "modifier": "static final", "type": "String", "declarator": "ATHENZ_PROP_TOKEN_OFFSET = \"athenz.auth.principal.token_allowed_offset\"", "var_name": "ATHENZ_PROP_TOKEN_OFFSET"}, {"original_string": "private static final String ATHENZ_PROP_IP_CHECK_MODE = \"athenz.auth.principal.remote_ip_check_mode\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_PROP_IP_CHECK_MODE = \"athenz.auth.principal.remote_ip_check_mode\"", "var_name": "ATHENZ_PROP_IP_CHECK_MODE"}, {"original_string": "private static final String ATHENZ_PROP_USER_DOMAIN = \"athenz.user_domain\";", "modifier": "private static final", "type": "String", "declarator": "ATHENZ_PROP_USER_DOMAIN = \"athenz.user_domain\"", "var_name": "ATHENZ_PROP_USER_DOMAIN"}, {"original_string": "public static final String HTTP_HEADER = \"Athenz-Principal-Auth\";", "modifier": "public static final", "type": "String", "declarator": "HTTP_HEADER = \"Athenz-Principal-Auth\"", "var_name": "HTTP_HEADER"}, {"original_string": "public static final String ATHENZ_AUTH_CHALLENGE = \"AthenzPrincipalToken realm=\\\"athenz\\\"\";", "modifier": "public static final", "type": "String", "declarator": "ATHENZ_AUTH_CHALLENGE = \"AthenzPrincipalToken realm=\\\"athenz\\\"\"", "var_name": "ATHENZ_AUTH_CHALLENGE"}, {"original_string": "public static final String ATHENZ_PROP_PRINCIPAL_HEADER = \"athenz.auth.principal.header\";", "modifier": "public static final", "type": "String", "declarator": "ATHENZ_PROP_PRINCIPAL_HEADER = \"athenz.auth.principal.header\"", "var_name": "ATHENZ_PROP_PRINCIPAL_HEADER"}, {"original_string": "private static final Logger LOG = LoggerFactory.getLogger(PrincipalAuthority.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(PrincipalAuthority.class)", "var_name": "LOG"}, {"original_string": "private KeyStore keyStore = null;", "modifier": "private", "type": "KeyStore", "declarator": "keyStore = null", "var_name": "keyStore"}, {"original_string": "private int allowedOffset;", "modifier": "private", "type": "int", "declarator": "allowedOffset", "var_name": "allowedOffset"}, {"original_string": "IpCheckMode ipCheckMode;", "modifier": "", "type": "IpCheckMode", "declarator": "ipCheckMode", "var_name": "ipCheckMode"}, {"original_string": "final String userDomain;", "modifier": "final", "type": "String", "declarator": "userDomain", "var_name": "userDomain"}, {"original_string": "private String headerName;", "modifier": "private", "type": "String", "declarator": "headerName", "var_name": "headerName"}], "methods": [{"identifier": "PrincipalAuthority", "parameters": "()", "modifiers": "public", "return": "", "signature": " PrincipalAuthority()", "full_signature": "public  PrincipalAuthority()", "class_method_signature": "PrincipalAuthority.PrincipalAuthority()", "testcase": false, "constructor": true}, {"identifier": "getID", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getID()", "full_signature": "@Override public String getID()", "class_method_signature": "PrincipalAuthority.getID()", "testcase": false, "constructor": false}, {"identifier": "initialize", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void initialize()", "full_signature": "@Override public void initialize()", "class_method_signature": "PrincipalAuthority.initialize()", "testcase": false, "constructor": false}, {"identifier": "getDomain", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDomain()", "full_signature": "@Override public String getDomain()", "class_method_signature": "PrincipalAuthority.getDomain()", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getHeader()", "full_signature": "@Override public String getHeader()", "class_method_signature": "PrincipalAuthority.getHeader()", "testcase": false, "constructor": false}, {"identifier": "getAuthenticateChallenge", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getAuthenticateChallenge()", "full_signature": "@Override public String getAuthenticateChallenge()", "class_method_signature": "PrincipalAuthority.getAuthenticateChallenge()", "testcase": false, "constructor": false}, {"identifier": "authenticate", "parameters": "(String signedToken, String remoteAddr, String httpMethod,\n            StringBuilder errMsg)", "modifiers": "@Override public", "return": "Principal", "signature": "Principal authenticate(String signedToken, String remoteAddr, String httpMethod,\n            StringBuilder errMsg)", "full_signature": "@Override public Principal authenticate(String signedToken, String remoteAddr, String httpMethod,\n            StringBuilder errMsg)", "class_method_signature": "PrincipalAuthority.authenticate(String signedToken, String remoteAddr, String httpMethod,\n            StringBuilder errMsg)", "testcase": false, "constructor": false}, {"identifier": "remoteIpCheck", "parameters": "(String remoteAddr, boolean writeOp, PrincipalToken serviceToken,\n            String authorizedServiceName)", "modifiers": "", "return": "boolean", "signature": "boolean remoteIpCheck(String remoteAddr, boolean writeOp, PrincipalToken serviceToken,\n            String authorizedServiceName)", "full_signature": " boolean remoteIpCheck(String remoteAddr, boolean writeOp, PrincipalToken serviceToken,\n            String authorizedServiceName)", "class_method_signature": "PrincipalAuthority.remoteIpCheck(String remoteAddr, boolean writeOp, PrincipalToken serviceToken,\n            String authorizedServiceName)", "testcase": false, "constructor": false}, {"identifier": "getPublicKey", "parameters": "(String tokenDomain, String tokenName, String keyService,\n            String keyId, boolean userToken)", "modifiers": "", "return": "String", "signature": "String getPublicKey(String tokenDomain, String tokenName, String keyService,\n            String keyId, boolean userToken)", "full_signature": " String getPublicKey(String tokenDomain, String tokenName, String keyService,\n            String keyId, boolean userToken)", "class_method_signature": "PrincipalAuthority.getPublicKey(String tokenDomain, String tokenName, String keyService,\n            String keyId, boolean userToken)", "testcase": false, "constructor": false}, {"identifier": "isWriteOperation", "parameters": "(String httpMethod)", "modifiers": "", "return": "boolean", "signature": "boolean isWriteOperation(String httpMethod)", "full_signature": " boolean isWriteOperation(String httpMethod)", "class_method_signature": "PrincipalAuthority.isWriteOperation(String httpMethod)", "testcase": false, "constructor": false}, {"identifier": "getAuthorizedServiceName", "parameters": "(List<String> authorizedServices, String authorizedServiceName)", "modifiers": "", "return": "String", "signature": "String getAuthorizedServiceName(List<String> authorizedServices, String authorizedServiceName)", "full_signature": " String getAuthorizedServiceName(List<String> authorizedServices, String authorizedServiceName)", "class_method_signature": "PrincipalAuthority.getAuthorizedServiceName(List<String> authorizedServices, String authorizedServiceName)", "testcase": false, "constructor": false}, {"identifier": "validateAuthorizeService", "parameters": "(PrincipalToken userToken, StringBuilder errMsg)", "modifiers": "", "return": "String", "signature": "String validateAuthorizeService(PrincipalToken userToken, StringBuilder errMsg)", "full_signature": " String validateAuthorizeService(PrincipalToken userToken, StringBuilder errMsg)", "class_method_signature": "PrincipalAuthority.validateAuthorizeService(PrincipalToken userToken, StringBuilder errMsg)", "testcase": false, "constructor": false}, {"identifier": "setKeyStore", "parameters": "(KeyStore keyStore)", "modifiers": "@Override public", "return": "void", "signature": "void setKeyStore(KeyStore keyStore)", "full_signature": "@Override public void setKeyStore(KeyStore keyStore)", "class_method_signature": "PrincipalAuthority.setKeyStore(KeyStore keyStore)", "testcase": false, "constructor": false}], "file": "libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/impl/PrincipalAuthority.java"}, "focal_method": {"identifier": "PrincipalAuthority", "parameters": "()", "modifiers": "public", "return": "", "body": "public PrincipalAuthority() {\n        allowedOffset = Integer.parseInt(System.getProperty(ATHENZ_PROP_TOKEN_OFFSET, \"300\"));\n        ipCheckMode = IpCheckMode.valueOf(System.getProperty(ATHENZ_PROP_IP_CHECK_MODE,\n                IpCheckMode.OPS_WRITE.toString()));\n        userDomain = System.getProperty(ATHENZ_PROP_USER_DOMAIN, USER_DOMAIN);\n        headerName = System.getProperty(ATHENZ_PROP_PRINCIPAL_HEADER, HTTP_HEADER);\n        \n        // case of invalid value, we'll default back to 5 minutes\n        \n        if (allowedOffset < 0) {\n            allowedOffset = 300;\n        }\n    }", "signature": " PrincipalAuthority()", "full_signature": "public  PrincipalAuthority()", "class_method_signature": "PrincipalAuthority.PrincipalAuthority()", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 73948366, "url": "https://github.com/yahoo/athenz", "stars": 394, "created": "11/16/2016 6:23:08 PM +00:00", "updates": "2020-01-27T15:36:13+00:00", "fork": "False", "license": "licensed"}}