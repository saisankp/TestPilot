{"test_class": {"identifier": "JcrConnectionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final DriverInfo DRIVER_INFO = new DriverInfo(\"DriverName\", \"DriverVendor\", \"http://www.driverUrl.com\", \"1.0\");", "modifier": "private static final", "type": "DriverInfo", "declarator": "DRIVER_INFO = new DriverInfo(\"DriverName\", \"DriverVendor\", \"http://www.driverUrl.com\", \"1.0\")", "var_name": "DRIVER_INFO"}, {"original_string": "private static final String REPOSITORY_NAME = \"repositoryName\";", "modifier": "private static final", "type": "String", "declarator": "REPOSITORY_NAME = \"repositoryName\"", "var_name": "REPOSITORY_NAME"}, {"original_string": "private Connection conn;", "modifier": "private", "type": "Connection", "declarator": "conn", "var_name": "conn"}, {"original_string": "@Mock\n    private ConnectionInfo connInfo;", "modifier": "@Mock\n    private", "type": "ConnectionInfo", "declarator": "connInfo", "var_name": "connInfo"}, {"original_string": "@Mock\n    private Repository repository;", "modifier": "@Mock\n    private", "type": "Repository", "declarator": "repository", "var_name": "repository"}, {"original_string": "@Mock\n    private Session session;", "modifier": "@Mock\n    private", "type": "Session", "declarator": "session", "var_name": "session"}, {"original_string": "@Mock\n    private RepositoryDelegate jcrDelegate;", "modifier": "@Mock\n    private", "type": "RepositoryDelegate", "declarator": "jcrDelegate", "var_name": "jcrDelegate"}], "file": "modeshape-jdbc-local/src/test/java/org/modeshape/jdbc/JcrConnectionTest.java"}, "test_case": {"identifier": "featureNotSupportedCallPrepareStatementColumnNames", "parameters": "()", "modifiers": "@Test( expected = SQLFeatureNotSupportedException.class ) public", "return": "void", "body": "@Test( expected = SQLFeatureNotSupportedException.class )\n    public void featureNotSupportedCallPrepareStatementColumnNames() throws SQLException {\n        conn.prepareStatement(\"sql\", new String[] {});\n    }", "signature": "void featureNotSupportedCallPrepareStatementColumnNames()", "full_signature": "@Test( expected = SQLFeatureNotSupportedException.class ) public void featureNotSupportedCallPrepareStatementColumnNames()", "class_method_signature": "JcrConnectionTest.featureNotSupportedCallPrepareStatementColumnNames()", "testcase": true, "constructor": false, "invocations": ["prepareStatement"]}, "focal_class": {"identifier": "JcrConnection", "superclass": "", "interfaces": "implements Connection", "fields": [{"original_string": "public static final String JCR_SQL2 = Query.JCR_SQL2;", "modifier": "public static final", "type": "String", "declarator": "JCR_SQL2 = Query.JCR_SQL2", "var_name": "JCR_SQL2"}, {"original_string": "@SuppressWarnings( \"deprecation\" )\n    public static final String JCR_SQL = Query.SQL;", "modifier": "@SuppressWarnings( \"deprecation\" )\n    public static final", "type": "String", "declarator": "JCR_SQL = Query.SQL", "var_name": "JCR_SQL"}, {"original_string": "private boolean closed;", "modifier": "private", "type": "boolean", "declarator": "closed", "var_name": "closed"}, {"original_string": "private boolean autoCommit = true;", "modifier": "private", "type": "boolean", "declarator": "autoCommit = true", "var_name": "autoCommit"}, {"original_string": "private SQLWarning warning;", "modifier": "private", "type": "SQLWarning", "declarator": "warning", "var_name": "warning"}, {"original_string": "private Properties clientInfo = new Properties();", "modifier": "private", "type": "Properties", "declarator": "clientInfo = new Properties()", "var_name": "clientInfo"}, {"original_string": "private DatabaseMetaData metadata;", "modifier": "private", "type": "DatabaseMetaData", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "private final RepositoryDelegate jcrDelegate;", "modifier": "private final", "type": "RepositoryDelegate", "declarator": "jcrDelegate", "var_name": "jcrDelegate"}, {"original_string": "private final DriverInfo driverInfo;", "modifier": "private final", "type": "DriverInfo", "declarator": "driverInfo", "var_name": "driverInfo"}], "methods": [{"identifier": "JcrConnection", "parameters": "( RepositoryDelegate jcrDelegate,\n                          DriverInfo driverInfo )", "modifiers": "public", "return": "", "signature": " JcrConnection( RepositoryDelegate jcrDelegate,\n                          DriverInfo driverInfo )", "full_signature": "public  JcrConnection( RepositoryDelegate jcrDelegate,\n                          DriverInfo driverInfo )", "class_method_signature": "JcrConnection.JcrConnection( RepositoryDelegate jcrDelegate,\n                          DriverInfo driverInfo )", "testcase": false, "constructor": true}, {"identifier": "info", "parameters": "()", "modifiers": "protected", "return": "ConnectionInfo", "signature": "ConnectionInfo info()", "full_signature": "protected ConnectionInfo info()", "class_method_signature": "JcrConnection.info()", "testcase": false, "constructor": false}, {"identifier": "driverInfo", "parameters": "()", "modifiers": "protected", "return": "DriverInfo", "signature": "DriverInfo driverInfo()", "full_signature": "protected DriverInfo driverInfo()", "class_method_signature": "JcrConnection.driverInfo()", "testcase": false, "constructor": false}, {"identifier": "getRepositoryDelegate", "parameters": "()", "modifiers": "public", "return": "RepositoryDelegate", "signature": "RepositoryDelegate getRepositoryDelegate()", "full_signature": "public RepositoryDelegate getRepositoryDelegate()", "class_method_signature": "JcrConnection.getRepositoryDelegate()", "testcase": false, "constructor": false}, {"identifier": "nodeType", "parameters": "( String name )", "modifiers": "protected", "return": "NodeType", "signature": "NodeType nodeType( String name )", "full_signature": "protected NodeType nodeType( String name )", "class_method_signature": "JcrConnection.nodeType( String name )", "testcase": false, "constructor": false}, {"identifier": "isReadOnly", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadOnly()", "full_signature": "@Override public boolean isReadOnly()", "class_method_signature": "JcrConnection.isReadOnly()", "testcase": false, "constructor": false}, {"identifier": "setReadOnly", "parameters": "( boolean readOnly )", "modifiers": "@Override public", "return": "void", "signature": "void setReadOnly( boolean readOnly )", "full_signature": "@Override public void setReadOnly( boolean readOnly )", "class_method_signature": "JcrConnection.setReadOnly( boolean readOnly )", "testcase": false, "constructor": false}, {"identifier": "isValid", "parameters": "( int timeout )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isValid( int timeout )", "full_signature": "@Override public boolean isValid( int timeout )", "class_method_signature": "JcrConnection.isValid( int timeout )", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "JcrConnection.close()", "testcase": false, "constructor": false}, {"identifier": "isClosed", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isClosed()", "full_signature": "@Override public boolean isClosed()", "class_method_signature": "JcrConnection.isClosed()", "testcase": false, "constructor": false}, {"identifier": "notClosed", "parameters": "()", "modifiers": "protected final", "return": "void", "signature": "void notClosed()", "full_signature": "protected final void notClosed()", "class_method_signature": "JcrConnection.notClosed()", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void commit()", "full_signature": "@Override public void commit()", "class_method_signature": "JcrConnection.commit()", "testcase": false, "constructor": false}, {"identifier": "rollback", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void rollback()", "full_signature": "@Override public void rollback()", "class_method_signature": "JcrConnection.rollback()", "testcase": false, "constructor": false}, {"identifier": "rollback", "parameters": "( Savepoint savepoint )", "modifiers": "@Override public", "return": "void", "signature": "void rollback( Savepoint savepoint )", "full_signature": "@Override public void rollback( Savepoint savepoint )", "class_method_signature": "JcrConnection.rollback( Savepoint savepoint )", "testcase": false, "constructor": false}, {"identifier": "clearWarnings", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void clearWarnings()", "full_signature": "@Override public void clearWarnings()", "class_method_signature": "JcrConnection.clearWarnings()", "testcase": false, "constructor": false}, {"identifier": "getWarnings", "parameters": "()", "modifiers": "@Override public", "return": "SQLWarning", "signature": "SQLWarning getWarnings()", "full_signature": "@Override public SQLWarning getWarnings()", "class_method_signature": "JcrConnection.getWarnings()", "testcase": false, "constructor": false}, {"identifier": "getAutoCommit", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean getAutoCommit()", "full_signature": "@Override public boolean getAutoCommit()", "class_method_signature": "JcrConnection.getAutoCommit()", "testcase": false, "constructor": false}, {"identifier": "setAutoCommit", "parameters": "( boolean autoCommit )", "modifiers": "@Override public", "return": "void", "signature": "void setAutoCommit( boolean autoCommit )", "full_signature": "@Override public void setAutoCommit( boolean autoCommit )", "class_method_signature": "JcrConnection.setAutoCommit( boolean autoCommit )", "testcase": false, "constructor": false}, {"identifier": "getTransactionIsolation", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getTransactionIsolation()", "full_signature": "@Override public int getTransactionIsolation()", "class_method_signature": "JcrConnection.getTransactionIsolation()", "testcase": false, "constructor": false}, {"identifier": "setTransactionIsolation", "parameters": "( int level )", "modifiers": "@Override public", "return": "void", "signature": "void setTransactionIsolation( int level )", "full_signature": "@Override public void setTransactionIsolation( int level )", "class_method_signature": "JcrConnection.setTransactionIsolation( int level )", "testcase": false, "constructor": false}, {"identifier": "setSavepoint", "parameters": "()", "modifiers": "@Override public", "return": "Savepoint", "signature": "Savepoint setSavepoint()", "full_signature": "@Override public Savepoint setSavepoint()", "class_method_signature": "JcrConnection.setSavepoint()", "testcase": false, "constructor": false}, {"identifier": "setSavepoint", "parameters": "( String name )", "modifiers": "@Override public", "return": "Savepoint", "signature": "Savepoint setSavepoint( String name )", "full_signature": "@Override public Savepoint setSavepoint( String name )", "class_method_signature": "JcrConnection.setSavepoint( String name )", "testcase": false, "constructor": false}, {"identifier": "releaseSavepoint", "parameters": "( Savepoint savepoint )", "modifiers": "@Override public", "return": "void", "signature": "void releaseSavepoint( Savepoint savepoint )", "full_signature": "@Override public void releaseSavepoint( Savepoint savepoint )", "class_method_signature": "JcrConnection.releaseSavepoint( Savepoint savepoint )", "testcase": false, "constructor": false}, {"identifier": "getCatalog", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getCatalog()", "full_signature": "@Override public String getCatalog()", "class_method_signature": "JcrConnection.getCatalog()", "testcase": false, "constructor": false}, {"identifier": "setCatalog", "parameters": "( String catalog )", "modifiers": "@Override public", "return": "void", "signature": "void setCatalog( String catalog )", "full_signature": "@Override public void setCatalog( String catalog )", "class_method_signature": "JcrConnection.setCatalog( String catalog )", "testcase": false, "constructor": false}, {"identifier": "getClientInfo", "parameters": "()", "modifiers": "@Override public", "return": "Properties", "signature": "Properties getClientInfo()", "full_signature": "@Override public Properties getClientInfo()", "class_method_signature": "JcrConnection.getClientInfo()", "testcase": false, "constructor": false}, {"identifier": "getClientInfo", "parameters": "( String name )", "modifiers": "@Override public", "return": "String", "signature": "String getClientInfo( String name )", "full_signature": "@Override public String getClientInfo( String name )", "class_method_signature": "JcrConnection.getClientInfo( String name )", "testcase": false, "constructor": false}, {"identifier": "setClientInfo", "parameters": "( Properties properties )", "modifiers": "@Override public", "return": "void", "signature": "void setClientInfo( Properties properties )", "full_signature": "@Override public void setClientInfo( Properties properties )", "class_method_signature": "JcrConnection.setClientInfo( Properties properties )", "testcase": false, "constructor": false}, {"identifier": "setClientInfo", "parameters": "( String name,\n                               String value )", "modifiers": "@Override public", "return": "void", "signature": "void setClientInfo( String name,\n                               String value )", "full_signature": "@Override public void setClientInfo( String name,\n                               String value )", "class_method_signature": "JcrConnection.setClientInfo( String name,\n                               String value )", "testcase": false, "constructor": false}, {"identifier": "getHoldability", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getHoldability()", "full_signature": "@Override public int getHoldability()", "class_method_signature": "JcrConnection.getHoldability()", "testcase": false, "constructor": false}, {"identifier": "setHoldability", "parameters": "( int holdability )", "modifiers": "@Override public", "return": "void", "signature": "void setHoldability( int holdability )", "full_signature": "@Override public void setHoldability( int holdability )", "class_method_signature": "JcrConnection.setHoldability( int holdability )", "testcase": false, "constructor": false}, {"identifier": "getMetaData", "parameters": "()", "modifiers": "@Override public", "return": "DatabaseMetaData", "signature": "DatabaseMetaData getMetaData()", "full_signature": "@Override public DatabaseMetaData getMetaData()", "class_method_signature": "JcrConnection.getMetaData()", "testcase": false, "constructor": false}, {"identifier": "getTypeMap", "parameters": "()", "modifiers": "@Override public", "return": "Map<String, Class<?>>", "signature": "Map<String, Class<?>> getTypeMap()", "full_signature": "@Override public Map<String, Class<?>> getTypeMap()", "class_method_signature": "JcrConnection.getTypeMap()", "testcase": false, "constructor": false}, {"identifier": "setTypeMap", "parameters": "( Map<String, Class<?>> map )", "modifiers": "@Override public", "return": "void", "signature": "void setTypeMap( Map<String, Class<?>> map )", "full_signature": "@Override public void setTypeMap( Map<String, Class<?>> map )", "class_method_signature": "JcrConnection.setTypeMap( Map<String, Class<?>> map )", "testcase": false, "constructor": false}, {"identifier": "nativeSQL", "parameters": "( String sql )", "modifiers": "@Override public", "return": "String", "signature": "String nativeSQL( String sql )", "full_signature": "@Override public String nativeSQL( String sql )", "class_method_signature": "JcrConnection.nativeSQL( String sql )", "testcase": false, "constructor": false}, {"identifier": "createStatement", "parameters": "()", "modifiers": "@SuppressWarnings( \"unused\" ) @Override public", "return": "Statement", "signature": "Statement createStatement()", "full_signature": "@SuppressWarnings( \"unused\" ) @Override public Statement createStatement()", "class_method_signature": "JcrConnection.createStatement()", "testcase": false, "constructor": false}, {"identifier": "createStatement", "parameters": "( int resultSetType,\n                                      int resultSetConcurrency )", "modifiers": "@Override public", "return": "Statement", "signature": "Statement createStatement( int resultSetType,\n                                      int resultSetConcurrency )", "full_signature": "@Override public Statement createStatement( int resultSetType,\n                                      int resultSetConcurrency )", "class_method_signature": "JcrConnection.createStatement( int resultSetType,\n                                      int resultSetConcurrency )", "testcase": false, "constructor": false}, {"identifier": "createStatement", "parameters": "( int resultSetType,\n                                      int resultSetConcurrency,\n                                      int resultSetHoldability )", "modifiers": "@Override public", "return": "Statement", "signature": "Statement createStatement( int resultSetType,\n                                      int resultSetConcurrency,\n                                      int resultSetHoldability )", "full_signature": "@Override public Statement createStatement( int resultSetType,\n                                      int resultSetConcurrency,\n                                      int resultSetHoldability )", "class_method_signature": "JcrConnection.createStatement( int resultSetType,\n                                      int resultSetConcurrency,\n                                      int resultSetHoldability )", "testcase": false, "constructor": false}, {"identifier": "prepareStatement", "parameters": "( String sql )", "modifiers": "@Override public", "return": "PreparedStatement", "signature": "PreparedStatement prepareStatement( String sql )", "full_signature": "@Override public PreparedStatement prepareStatement( String sql )", "class_method_signature": "JcrConnection.prepareStatement( String sql )", "testcase": false, "constructor": false}, {"identifier": "prepareStatement", "parameters": "( String sql,\n                                               int autoGeneratedKeys )", "modifiers": "@Override public", "return": "PreparedStatement", "signature": "PreparedStatement prepareStatement( String sql,\n                                               int autoGeneratedKeys )", "full_signature": "@Override public PreparedStatement prepareStatement( String sql,\n                                               int autoGeneratedKeys )", "class_method_signature": "JcrConnection.prepareStatement( String sql,\n                                               int autoGeneratedKeys )", "testcase": false, "constructor": false}, {"identifier": "prepareStatement", "parameters": "( String sql,\n                                               int[] columnIndexes )", "modifiers": "@Override public", "return": "PreparedStatement", "signature": "PreparedStatement prepareStatement( String sql,\n                                               int[] columnIndexes )", "full_signature": "@Override public PreparedStatement prepareStatement( String sql,\n                                               int[] columnIndexes )", "class_method_signature": "JcrConnection.prepareStatement( String sql,\n                                               int[] columnIndexes )", "testcase": false, "constructor": false}, {"identifier": "prepareStatement", "parameters": "( String sql,\n                                               String[] columnNames )", "modifiers": "@Override public", "return": "PreparedStatement", "signature": "PreparedStatement prepareStatement( String sql,\n                                               String[] columnNames )", "full_signature": "@Override public PreparedStatement prepareStatement( String sql,\n                                               String[] columnNames )", "class_method_signature": "JcrConnection.prepareStatement( String sql,\n                                               String[] columnNames )", "testcase": false, "constructor": false}, {"identifier": "prepareStatement", "parameters": "( String sql,\n                                               int resultSetType,\n                                               int resultSetConcurrency )", "modifiers": "@Override public", "return": "PreparedStatement", "signature": "PreparedStatement prepareStatement( String sql,\n                                               int resultSetType,\n                                               int resultSetConcurrency )", "full_signature": "@Override public PreparedStatement prepareStatement( String sql,\n                                               int resultSetType,\n                                               int resultSetConcurrency )", "class_method_signature": "JcrConnection.prepareStatement( String sql,\n                                               int resultSetType,\n                                               int resultSetConcurrency )", "testcase": false, "constructor": false}, {"identifier": "prepareStatement", "parameters": "( String sql,\n                                               int resultSetType,\n                                               int resultSetConcurrency,\n                                               int resultSetHoldability )", "modifiers": "@Override public", "return": "PreparedStatement", "signature": "PreparedStatement prepareStatement( String sql,\n                                               int resultSetType,\n                                               int resultSetConcurrency,\n                                               int resultSetHoldability )", "full_signature": "@Override public PreparedStatement prepareStatement( String sql,\n                                               int resultSetType,\n                                               int resultSetConcurrency,\n                                               int resultSetHoldability )", "class_method_signature": "JcrConnection.prepareStatement( String sql,\n                                               int resultSetType,\n                                               int resultSetConcurrency,\n                                               int resultSetHoldability )", "testcase": false, "constructor": false}, {"identifier": "prepareCall", "parameters": "( String sql )", "modifiers": "@Override public", "return": "CallableStatement", "signature": "CallableStatement prepareCall( String sql )", "full_signature": "@Override public CallableStatement prepareCall( String sql )", "class_method_signature": "JcrConnection.prepareCall( String sql )", "testcase": false, "constructor": false}, {"identifier": "prepareCall", "parameters": "( String sql,\n                                          int resultSetType,\n                                          int resultSetConcurrency )", "modifiers": "@Override public", "return": "CallableStatement", "signature": "CallableStatement prepareCall( String sql,\n                                          int resultSetType,\n                                          int resultSetConcurrency )", "full_signature": "@Override public CallableStatement prepareCall( String sql,\n                                          int resultSetType,\n                                          int resultSetConcurrency )", "class_method_signature": "JcrConnection.prepareCall( String sql,\n                                          int resultSetType,\n                                          int resultSetConcurrency )", "testcase": false, "constructor": false}, {"identifier": "prepareCall", "parameters": "( String sql,\n                                          int resultSetType,\n                                          int resultSetConcurrency,\n                                          int resultSetHoldability )", "modifiers": "@Override public", "return": "CallableStatement", "signature": "CallableStatement prepareCall( String sql,\n                                          int resultSetType,\n                                          int resultSetConcurrency,\n                                          int resultSetHoldability )", "full_signature": "@Override public CallableStatement prepareCall( String sql,\n                                          int resultSetType,\n                                          int resultSetConcurrency,\n                                          int resultSetHoldability )", "class_method_signature": "JcrConnection.prepareCall( String sql,\n                                          int resultSetType,\n                                          int resultSetConcurrency,\n                                          int resultSetHoldability )", "testcase": false, "constructor": false}, {"identifier": "createArrayOf", "parameters": "( String typeName,\n                                Object[] elements )", "modifiers": "@Override public", "return": "Array", "signature": "Array createArrayOf( String typeName,\n                                Object[] elements )", "full_signature": "@Override public Array createArrayOf( String typeName,\n                                Object[] elements )", "class_method_signature": "JcrConnection.createArrayOf( String typeName,\n                                Object[] elements )", "testcase": false, "constructor": false}, {"identifier": "createBlob", "parameters": "()", "modifiers": "@Override public", "return": "Blob", "signature": "Blob createBlob()", "full_signature": "@Override public Blob createBlob()", "class_method_signature": "JcrConnection.createBlob()", "testcase": false, "constructor": false}, {"identifier": "createClob", "parameters": "()", "modifiers": "@Override public", "return": "Clob", "signature": "Clob createClob()", "full_signature": "@Override public Clob createClob()", "class_method_signature": "JcrConnection.createClob()", "testcase": false, "constructor": false}, {"identifier": "createNClob", "parameters": "()", "modifiers": "@Override public", "return": "NClob", "signature": "NClob createNClob()", "full_signature": "@Override public NClob createNClob()", "class_method_signature": "JcrConnection.createNClob()", "testcase": false, "constructor": false}, {"identifier": "createSQLXML", "parameters": "()", "modifiers": "@Override public", "return": "SQLXML", "signature": "SQLXML createSQLXML()", "full_signature": "@Override public SQLXML createSQLXML()", "class_method_signature": "JcrConnection.createSQLXML()", "testcase": false, "constructor": false}, {"identifier": "createStruct", "parameters": "( String typeName,\n                                Object[] attributes )", "modifiers": "@Override public", "return": "Struct", "signature": "Struct createStruct( String typeName,\n                                Object[] attributes )", "full_signature": "@Override public Struct createStruct( String typeName,\n                                Object[] attributes )", "class_method_signature": "JcrConnection.createStruct( String typeName,\n                                Object[] attributes )", "testcase": false, "constructor": false}, {"identifier": "isWrapperFor", "parameters": "( Class<?> iface )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isWrapperFor( Class<?> iface )", "full_signature": "@Override public boolean isWrapperFor( Class<?> iface )", "class_method_signature": "JcrConnection.isWrapperFor( Class<?> iface )", "testcase": false, "constructor": false}, {"identifier": "unwrap", "parameters": "( Class<T> iface )", "modifiers": "@Override public", "return": "T", "signature": "T unwrap( Class<T> iface )", "full_signature": "@Override public T unwrap( Class<T> iface )", "class_method_signature": "JcrConnection.unwrap( Class<T> iface )", "testcase": false, "constructor": false}, {"identifier": "setSchema", "parameters": "( String schema )", "modifiers": "@Override public", "return": "void", "signature": "void setSchema( String schema )", "full_signature": "@Override public void setSchema( String schema )", "class_method_signature": "JcrConnection.setSchema( String schema )", "testcase": false, "constructor": false}, {"identifier": "getSchema", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSchema()", "full_signature": "@Override public String getSchema()", "class_method_signature": "JcrConnection.getSchema()", "testcase": false, "constructor": false}, {"identifier": "abort", "parameters": "( Executor executor )", "modifiers": "@Override public", "return": "void", "signature": "void abort( Executor executor )", "full_signature": "@Override public void abort( Executor executor )", "class_method_signature": "JcrConnection.abort( Executor executor )", "testcase": false, "constructor": false}, {"identifier": "setNetworkTimeout", "parameters": "( Executor executor,\n                                   int milliseconds )", "modifiers": "@Override public", "return": "void", "signature": "void setNetworkTimeout( Executor executor,\n                                   int milliseconds )", "full_signature": "@Override public void setNetworkTimeout( Executor executor,\n                                   int milliseconds )", "class_method_signature": "JcrConnection.setNetworkTimeout( Executor executor,\n                                   int milliseconds )", "testcase": false, "constructor": false}, {"identifier": "getNetworkTimeout", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getNetworkTimeout()", "full_signature": "@Override public int getNetworkTimeout()", "class_method_signature": "JcrConnection.getNetworkTimeout()", "testcase": false, "constructor": false}], "file": "modeshape-jdbc-local/src/main/java/org/modeshape/jdbc/JcrConnection.java"}, "focal_method": {"identifier": "prepareStatement", "parameters": "( String sql )", "modifiers": "@Override public", "return": "PreparedStatement", "body": "@Override\n    public PreparedStatement prepareStatement( String sql ) throws SQLException {\n        throw new SQLFeatureNotSupportedException();\n    }", "signature": "PreparedStatement prepareStatement( String sql )", "full_signature": "@Override public PreparedStatement prepareStatement( String sql )", "class_method_signature": "JcrConnection.prepareStatement( String sql )", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}