{"test_class": {"identifier": "IpTranslatorProcessorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IpTranslatorProcessor processor;", "modifier": "private", "type": "IpTranslatorProcessor", "declarator": "processor", "var_name": "processor"}, {"original_string": "private SlackMessage slackMessage;", "modifier": "private", "type": "SlackMessage", "declarator": "slackMessage", "var_name": "slackMessage"}], "file": "cerberus-ip-translator-lambda/src/test/java/com.nike.cerberus.lambda.waf/IpTranslatorProcessorTest.java"}, "test_case": {"identifier": "test_that_getEnvironmentFromSlackMessage_returns_the_env_as_expected", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void test_that_getEnvironmentFromSlackMessage_returns_the_env_as_expected() {\n    String env = processor.getEnvironmentFromSlackMessage(slackMessage);\n    assertEquals(\"demo2\", env);\n  }", "signature": "void test_that_getEnvironmentFromSlackMessage_returns_the_env_as_expected()", "full_signature": "@Test public void test_that_getEnvironmentFromSlackMessage_returns_the_env_as_expected()", "class_method_signature": "IpTranslatorProcessorTest.test_that_getEnvironmentFromSlackMessage_returns_the_env_as_expected()", "testcase": true, "constructor": false, "invocations": ["getEnvironmentFromSlackMessage", "assertEquals"]}, "focal_class": {"identifier": "IpTranslatorProcessor", "superclass": "", "interfaces": "", "fields": [{"original_string": "Logger log = Logger.getLogger(getClass());", "modifier": "", "type": "Logger", "declarator": "log = Logger.getLogger(getClass())", "var_name": "log"}, {"original_string": "private CerberusMetadataLookup cerberusMetadataLookup = new CerberusMetadataLookup();", "modifier": "private", "type": "CerberusMetadataLookup", "declarator": "cerberusMetadataLookup = new CerberusMetadataLookup()", "var_name": "cerberusMetadataLookup"}, {"original_string": "private SlackMessageSender slackMessageSender = new SlackMessageSender();", "modifier": "private", "type": "SlackMessageSender", "declarator": "slackMessageSender = new SlackMessageSender()", "var_name": "slackMessageSender"}], "methods": [{"identifier": "processMessageIfFromRateLimiter", "parameters": "(SlackMessage message)", "modifiers": "public", "return": "void", "signature": "void processMessageIfFromRateLimiter(SlackMessage message)", "full_signature": "public void processMessageIfFromRateLimiter(SlackMessage message)", "class_method_signature": "IpTranslatorProcessor.processMessageIfFromRateLimiter(SlackMessage message)", "testcase": false, "constructor": false}, {"identifier": "isMessageFromRateLimiter", "parameters": "(SlackMessage message)", "modifiers": "protected", "return": "boolean", "signature": "boolean isMessageFromRateLimiter(SlackMessage message)", "full_signature": "protected boolean isMessageFromRateLimiter(SlackMessage message)", "class_method_signature": "IpTranslatorProcessor.isMessageFromRateLimiter(SlackMessage message)", "testcase": false, "constructor": false}, {"identifier": "getEnvironmentFromSlackMessage", "parameters": "(SlackMessage message)", "modifiers": "protected", "return": "String", "signature": "String getEnvironmentFromSlackMessage(SlackMessage message)", "full_signature": "protected String getEnvironmentFromSlackMessage(SlackMessage message)", "class_method_signature": "IpTranslatorProcessor.getEnvironmentFromSlackMessage(SlackMessage message)", "testcase": false, "constructor": false}, {"identifier": "translateIpToMetadata", "parameters": "(SlackMessage message, String environment)", "modifiers": "private", "return": "void", "signature": "void translateIpToMetadata(SlackMessage message, String environment)", "full_signature": "private void translateIpToMetadata(SlackMessage message, String environment)", "class_method_signature": "IpTranslatorProcessor.translateIpToMetadata(SlackMessage message, String environment)", "testcase": false, "constructor": false}, {"identifier": "getIpsFromSlackMessage", "parameters": "(SlackMessage message)", "modifiers": "protected", "return": "List<String>", "signature": "List<String> getIpsFromSlackMessage(SlackMessage message)", "full_signature": "protected List<String> getIpsFromSlackMessage(SlackMessage message)", "class_method_signature": "IpTranslatorProcessor.getIpsFromSlackMessage(SlackMessage message)", "testcase": false, "constructor": false}, {"identifier": "parseAndTranslateIpAddressToMetadata", "parameters": "(String ipAddress, String environment)", "modifiers": "private", "return": "List<Map<String,String>>", "signature": "List<Map<String,String>> parseAndTranslateIpAddressToMetadata(String ipAddress, String environment)", "full_signature": "private List<Map<String,String>> parseAndTranslateIpAddressToMetadata(String ipAddress, String environment)", "class_method_signature": "IpTranslatorProcessor.parseAndTranslateIpAddressToMetadata(String ipAddress, String environment)", "testcase": false, "constructor": false}], "file": "cerberus-ip-translator-lambda/src/main/java/com.nike.cerberus.lambda.waf/IpTranslatorProcessor.java"}, "focal_method": {"identifier": "getEnvironmentFromSlackMessage", "parameters": "(SlackMessage message)", "modifiers": "protected", "return": "String", "body": "protected String getEnvironmentFromSlackMessage(SlackMessage message) {\n        Pattern envName = Pattern.compile(\".*Environment: (?<env>.*?)\\\\n\");\n        Matcher envMatcher = envName.matcher(message.getText());\n        if (! envMatcher.find()) {\n            log.info(\"Failed to determine environment from slack message, aborting...\");\n            throw new RuntimeException(\"Failed to determine environment!\");\n        }\n        return envMatcher.group(\"env\");\n    }", "signature": "String getEnvironmentFromSlackMessage(SlackMessage message)", "full_signature": "protected String getEnvironmentFromSlackMessage(SlackMessage message)", "class_method_signature": "IpTranslatorProcessor.getEnvironmentFromSlackMessage(SlackMessage message)", "testcase": false, "constructor": false, "invocations": ["compile", "matcher", "getText", "find", "info", "group"]}, "repository": {"repo_id": 70515197, "url": "https://github.com/Nike-Inc/cerberus-serverless-components", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 12, "size": 269, "license": "licensed"}}