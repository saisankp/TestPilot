{"test_class": {"identifier": "UnitUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "bundles/org.openhab.core/src/test/java/org/openhab/core/types/util/UnitUtilsTest.java"}, "test_case": {"identifier": "testGetDimensionName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetDimensionName() {\n        assertThat(UnitUtils.getDimensionName(SIUnits.CELSIUS), is(Temperature.class.getSimpleName()));\n        assertThat(UnitUtils.getDimensionName(SmartHomeUnits.KILOWATT_HOUR), is(Energy.class.getSimpleName()));\n        assertThat(UnitUtils.getDimensionName(SmartHomeUnits.WATT), is(Power.class.getSimpleName()));\n        assertThat(UnitUtils.getDimensionName(MetricPrefix.MEGA(SmartHomeUnits.KILOWATT_HOUR)),\n                is(Energy.class.getSimpleName()));\n\n        Unit<?> unit = UnitUtils.parseUnit(\"\u00b0F\");\n        assertNotNull(unit);\n        if (unit != null) {\n            assertThat(UnitUtils.getDimensionName(unit), is(Temperature.class.getSimpleName()));\n        }\n        unit = UnitUtils.parseUnit(\"m\");\n        assertNotNull(unit);\n        if (unit != null) {\n            assertThat(UnitUtils.getDimensionName(unit), is(Length.class.getSimpleName()));\n        }\n    }", "signature": "void testGetDimensionName()", "full_signature": "@Test public void testGetDimensionName()", "class_method_signature": "UnitUtilsTest.testGetDimensionName()", "testcase": true, "constructor": false, "invocations": ["assertThat", "getDimensionName", "is", "getSimpleName", "assertThat", "getDimensionName", "is", "getSimpleName", "assertThat", "getDimensionName", "is", "getSimpleName", "assertThat", "getDimensionName", "MEGA", "is", "getSimpleName", "parseUnit", "assertNotNull", "assertThat", "getDimensionName", "is", "getSimpleName", "parseUnit", "assertNotNull", "assertThat", "getDimensionName", "is", "getSimpleName"]}, "focal_class": {"identifier": "UnitUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(UnitUtils.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(UnitUtils.class)", "var_name": "LOGGER"}, {"original_string": "public static final String UNIT_PLACEHOLDER = \"%unit%\";", "modifier": "public static final", "type": "String", "declarator": "UNIT_PLACEHOLDER = \"%unit%\"", "var_name": "UNIT_PLACEHOLDER"}, {"original_string": "public static final String UNIT_PERCENT_FORMAT_STRING = \"%%\";", "modifier": "public static final", "type": "String", "declarator": "UNIT_PERCENT_FORMAT_STRING = \"%%\"", "var_name": "UNIT_PERCENT_FORMAT_STRING"}, {"original_string": "private static final String JAVAX_MEASURE_QUANTITY_PREFIX = \"javax.measure.quantity.\";", "modifier": "private static final", "type": "String", "declarator": "JAVAX_MEASURE_QUANTITY_PREFIX = \"javax.measure.quantity.\"", "var_name": "JAVAX_MEASURE_QUANTITY_PREFIX"}, {"original_string": "private static final String FRAMEWORK_DIMENSION_PREFIX = \"org.openhab.core.library.dimension.\";", "modifier": "private static final", "type": "String", "declarator": "FRAMEWORK_DIMENSION_PREFIX = \"org.openhab.core.library.dimension.\"", "var_name": "FRAMEWORK_DIMENSION_PREFIX"}, {"original_string": "private static final Collection<Class<? extends SystemOfUnits>> ALL_SYSTEM_OF_UNITS = Arrays.asList(SIUnits.class,\n            ImperialUnits.class, SmartHomeUnits.class, Units.class);", "modifier": "private static final", "type": "Collection<Class<? extends SystemOfUnits>>", "declarator": "ALL_SYSTEM_OF_UNITS = Arrays.asList(SIUnits.class,\n            ImperialUnits.class, SmartHomeUnits.class, Units.class)", "var_name": "ALL_SYSTEM_OF_UNITS"}], "methods": [{"identifier": "parseDimension", "parameters": "(String dimension)", "modifiers": "public static @Nullable", "return": "Class<? extends Quantity<?>>", "signature": "Class<? extends Quantity<?>> parseDimension(String dimension)", "full_signature": "public static @Nullable Class<? extends Quantity<?>> parseDimension(String dimension)", "class_method_signature": "UnitUtils.parseDimension(String dimension)", "testcase": false, "constructor": false}, {"identifier": "getDimensionName", "parameters": "(Unit<?> unit)", "modifiers": "public static @Nullable", "return": "String", "signature": "String getDimensionName(Unit<?> unit)", "full_signature": "public static @Nullable String getDimensionName(Unit<?> unit)", "class_method_signature": "UnitUtils.getDimensionName(Unit<?> unit)", "testcase": false, "constructor": false}, {"identifier": "parseUnit", "parameters": "(@Nullable String pattern)", "modifiers": "public static @Nullable", "return": "Unit<?>", "signature": "Unit<?> parseUnit(@Nullable String pattern)", "full_signature": "public static @Nullable Unit<?> parseUnit(@Nullable String pattern)", "class_method_signature": "UnitUtils.parseUnit(@Nullable String pattern)", "testcase": false, "constructor": false}, {"identifier": "isDifferentMeasurementSystem", "parameters": "(Unit<? extends Quantity<?>> thisUnit, Unit<?> thatUnit)", "modifiers": "public static", "return": "boolean", "signature": "boolean isDifferentMeasurementSystem(Unit<? extends Quantity<?>> thisUnit, Unit<?> thatUnit)", "full_signature": "public static boolean isDifferentMeasurementSystem(Unit<? extends Quantity<?>> thisUnit, Unit<?> thatUnit)", "class_method_signature": "UnitUtils.isDifferentMeasurementSystem(Unit<? extends Quantity<?>> thisUnit, Unit<?> thatUnit)", "testcase": false, "constructor": false}, {"identifier": "isMetricConversion", "parameters": "(UnitConverter converter)", "modifiers": "private static", "return": "boolean", "signature": "boolean isMetricConversion(UnitConverter converter)", "full_signature": "private static boolean isMetricConversion(UnitConverter converter)", "class_method_signature": "UnitUtils.isMetricConversion(UnitConverter converter)", "testcase": false, "constructor": false}, {"identifier": "dimensionClass", "parameters": "(String prefix, String name)", "modifiers": "@SuppressWarnings(\"unchecked\") private static", "return": "Class<? extends Quantity<?>>", "signature": "Class<? extends Quantity<?>> dimensionClass(String prefix, String name)", "full_signature": "@SuppressWarnings(\"unchecked\") private static Class<? extends Quantity<?>> dimensionClass(String prefix, String name)", "class_method_signature": "UnitUtils.dimensionClass(String prefix, String name)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core/src/main/java/org/openhab/core/types/util/UnitUtils.java"}, "focal_method": {"identifier": "getDimensionName", "parameters": "(Unit<?> unit)", "modifiers": "public static @Nullable", "return": "String", "body": "public static @Nullable String getDimensionName(Unit<?> unit) {\n        for (Class<? extends SystemOfUnits> system : ALL_SYSTEM_OF_UNITS) {\n            for (Field field : system.getDeclaredFields()) {\n                if (field.getType().isAssignableFrom(Unit.class) && Modifier.isStatic(field.getModifiers())) {\n                    Type genericType = field.getGenericType();\n                    if (genericType instanceof ParameterizedType) {\n                        String dimension = ((Class<?>) ((ParameterizedType) genericType).getActualTypeArguments()[0])\n                                .getSimpleName();\n                        Unit<?> systemUnit;\n                        try {\n                            systemUnit = (Unit<?>) field.get(null);\n                            if (systemUnit == null) {\n                                LOGGER.warn(\"Unit field points to a null value: {}\", field);\n                            } else if (systemUnit.isCompatible(unit)) {\n                                return dimension;\n                            }\n                        } catch (IllegalArgumentException | IllegalAccessException e) {\n                            LOGGER.error(\"The unit field '{}' seems to be not accessible\", field, e);\n                        }\n                    } else {\n                        LOGGER.warn(\"There is a unit field defined which has no generic type parametrization: {}\",\n                                field);\n                    }\n                }\n            }\n        }\n        return null;\n    }", "signature": "String getDimensionName(Unit<?> unit)", "full_signature": "public static @Nullable String getDimensionName(Unit<?> unit)", "class_method_signature": "UnitUtils.getDimensionName(Unit<?> unit)", "testcase": false, "constructor": false, "invocations": ["getDeclaredFields", "isAssignableFrom", "getType", "isStatic", "getModifiers", "getGenericType", "getSimpleName", "getActualTypeArguments", "get", "warn", "isCompatible", "error", "warn"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}