{"test_class": {"identifier": "DatastoreHelperTest", "superclass": "extends GaeTestBase", "interfaces": "", "fields": [{"original_string": "private static final String A_KIND = \"A_KIND\";", "modifier": "private static final", "type": "String", "declarator": "A_KIND = \"A_KIND\"", "var_name": "A_KIND"}, {"original_string": "private static final String A_PROPERTY = \"A_PROPERTY\";", "modifier": "private static final", "type": "String", "declarator": "A_PROPERTY = \"A_PROPERTY\"", "var_name": "A_PROPERTY"}, {"original_string": "private static final String NOT_INEQUALITY = \"NOT_INEQUALITY\";", "modifier": "private static final", "type": "String", "declarator": "NOT_INEQUALITY = \"NOT_INEQUALITY\"", "var_name": "NOT_INEQUALITY"}, {"original_string": "private static final String INEQUALITY = \"INEQUALITY\";", "modifier": "private static final", "type": "String", "declarator": "INEQUALITY = \"INEQUALITY\"", "var_name": "INEQUALITY"}, {"original_string": "private DatastoreHelper datastoreHelper;", "modifier": "private", "type": "DatastoreHelper", "declarator": "datastoreHelper", "var_name": "datastoreHelper"}], "file": "gae-studio/gae-studio-server/src/test/java/com/arcbees/gaestudio/server/util/DatastoreHelperTest.java"}, "test_case": {"identifier": "preFilterGaeKinds_validQuery_addsFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void preFilterGaeKinds_validQuery_addsFilter() throws Exception {\n        // given\n        Query query = new Query(A_KIND);\n\n        // when\n        datastoreHelper.preFilterGaeKinds(query);\n\n        // then\n        then(query.getFilter()).isInstanceOf(Query.FilterPredicate.class);\n        then(query.getFilter()).isNotNull();\n    }", "signature": "void preFilterGaeKinds_validQuery_addsFilter()", "full_signature": "@Test public void preFilterGaeKinds_validQuery_addsFilter()", "class_method_signature": "DatastoreHelperTest.preFilterGaeKinds_validQuery_addsFilter()", "testcase": true, "constructor": false, "invocations": ["preFilterGaeKinds", "isInstanceOf", "then", "getFilter", "isNotNull", "then", "getFilter"]}, "focal_class": {"identifier": "DatastoreHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Set<FilterOperator> inequalityFilters =\n            Sets.newHashSet(GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL);", "modifier": "private static final", "type": "Set<FilterOperator>", "declarator": "inequalityFilters =\n            Sets.newHashSet(GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL)", "var_name": "inequalityFilters"}, {"original_string": "private static final String ENTITY_PREFIX = \"__\";", "modifier": "private static final", "type": "String", "declarator": "ENTITY_PREFIX = \"__\"", "var_name": "ENTITY_PREFIX"}], "methods": [{"identifier": "get", "parameters": "(KeyDto keyDto)", "modifiers": "public", "return": "Entity", "signature": "Entity get(KeyDto keyDto)", "full_signature": "public Entity get(KeyDto keyDto)", "class_method_signature": "DatastoreHelper.get(KeyDto keyDto)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(Key key)", "modifiers": "public", "return": "Entity", "signature": "Entity get(Key key)", "full_signature": "public Entity get(Key key)", "class_method_signature": "DatastoreHelper.get(Key key)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Key key, String namespace)", "modifiers": "public", "return": "void", "signature": "void delete(Key key, String namespace)", "full_signature": "public void delete(Key key, String namespace)", "class_method_signature": "DatastoreHelper.delete(Key key, String namespace)", "testcase": false, "constructor": false}, {"identifier": "deleteOnAllNamespaces", "parameters": "(Query query)", "modifiers": "public", "return": "void", "signature": "void deleteOnAllNamespaces(Query query)", "full_signature": "public void deleteOnAllNamespaces(Query query)", "class_method_signature": "DatastoreHelper.deleteOnAllNamespaces(Query query)", "testcase": false, "constructor": false}, {"identifier": "queryOnAllNamespaces", "parameters": "(Query query)", "modifiers": "public", "return": "Iterable<Entity>", "signature": "Iterable<Entity> queryOnAllNamespaces(Query query)", "full_signature": "public Iterable<Entity> queryOnAllNamespaces(Query query)", "class_method_signature": "DatastoreHelper.queryOnAllNamespaces(Query query)", "testcase": false, "constructor": false}, {"identifier": "queryOnAllNamespaces", "parameters": "(\n            Query query,\n            FetchOptions options)", "modifiers": "public", "return": "Collection<Entity>", "signature": "Collection<Entity> queryOnAllNamespaces(\n            Query query,\n            FetchOptions options)", "full_signature": "public Collection<Entity> queryOnAllNamespaces(\n            Query query,\n            FetchOptions options)", "class_method_signature": "DatastoreHelper.queryOnAllNamespaces(\n            Query query,\n            FetchOptions options)", "testcase": false, "constructor": false}, {"identifier": "querySingleEntity", "parameters": "(String namespace, Query query)", "modifiers": "public", "return": "Entity", "signature": "Entity querySingleEntity(String namespace, Query query)", "full_signature": "public Entity querySingleEntity(String namespace, Query query)", "class_method_signature": "DatastoreHelper.querySingleEntity(String namespace, Query query)", "testcase": false, "constructor": false}, {"identifier": "queryOnNamespace", "parameters": "(String namespace, Query query)", "modifiers": "public", "return": "Iterable<Entity>", "signature": "Iterable<Entity> queryOnNamespace(String namespace, Query query)", "full_signature": "public Iterable<Entity> queryOnNamespace(String namespace, Query query)", "class_method_signature": "DatastoreHelper.queryOnNamespace(String namespace, Query query)", "testcase": false, "constructor": false}, {"identifier": "queryOnNamespace", "parameters": "(String namespace, Query query, FetchOptions fetchOptions)", "modifiers": "public", "return": "Iterable<Entity>", "signature": "Iterable<Entity> queryOnNamespace(String namespace, Query query, FetchOptions fetchOptions)", "full_signature": "public Iterable<Entity> queryOnNamespace(String namespace, Query query, FetchOptions fetchOptions)", "class_method_signature": "DatastoreHelper.queryOnNamespace(String namespace, Query query, FetchOptions fetchOptions)", "testcase": false, "constructor": false}, {"identifier": "preFilterGaeKinds", "parameters": "(Query query)", "modifiers": "public", "return": "void", "signature": "void preFilterGaeKinds(Query query)", "full_signature": "public void preFilterGaeKinds(Query query)", "class_method_signature": "DatastoreHelper.preFilterGaeKinds(Query query)", "testcase": false, "constructor": false}, {"identifier": "getAllNamespaces", "parameters": "()", "modifiers": "public", "return": "Iterable<Entity>", "signature": "Iterable<Entity> getAllNamespaces()", "full_signature": "public Iterable<Entity> getAllNamespaces()", "class_method_signature": "DatastoreHelper.getAllNamespaces()", "testcase": false, "constructor": false}, {"identifier": "canPreFilterGaeKinds", "parameters": "(Query query)", "modifiers": "public", "return": "boolean", "signature": "boolean canPreFilterGaeKinds(Query query)", "full_signature": "public boolean canPreFilterGaeKinds(Query query)", "class_method_signature": "DatastoreHelper.canPreFilterGaeKinds(Query query)", "testcase": false, "constructor": false}, {"identifier": "canPreFilterGaeKinds", "parameters": "(Query.Filter filter)", "modifiers": "private", "return": "boolean", "signature": "boolean canPreFilterGaeKinds(Query.Filter filter)", "full_signature": "private boolean canPreFilterGaeKinds(Query.Filter filter)", "class_method_signature": "DatastoreHelper.canPreFilterGaeKinds(Query.Filter filter)", "testcase": false, "constructor": false}, {"identifier": "copyQuery", "parameters": "(Query query)", "modifiers": "private", "return": "Query", "signature": "Query copyQuery(Query query)", "full_signature": "private Query copyQuery(Query query)", "class_method_signature": "DatastoreHelper.copyQuery(Query query)", "testcase": false, "constructor": false}, {"identifier": "toSerializableIterable", "parameters": "(Iterable<Entity> entities)", "modifiers": "private", "return": "Iterable<Entity>", "signature": "Iterable<Entity> toSerializableIterable(Iterable<Entity> entities)", "full_signature": "private Iterable<Entity> toSerializableIterable(Iterable<Entity> entities)", "class_method_signature": "DatastoreHelper.toSerializableIterable(Iterable<Entity> entities)", "testcase": false, "constructor": false}, {"identifier": "extractNamespace", "parameters": "(Entity namespace)", "modifiers": "private", "return": "String", "signature": "String extractNamespace(Entity namespace)", "full_signature": "private String extractNamespace(Entity namespace)", "class_method_signature": "DatastoreHelper.extractNamespace(Entity namespace)", "testcase": false, "constructor": false}, {"identifier": "idIsNumeric", "parameters": "(KeyDto keyDto)", "modifiers": "private", "return": "boolean", "signature": "boolean idIsNumeric(KeyDto keyDto)", "full_signature": "private boolean idIsNumeric(KeyDto keyDto)", "class_method_signature": "DatastoreHelper.idIsNumeric(KeyDto keyDto)", "testcase": false, "constructor": false}], "file": "gae-studio/gae-studio-server/src/main/java/com/arcbees/gaestudio/server/util/DatastoreHelper.java"}, "focal_method": {"identifier": "preFilterGaeKinds", "parameters": "(Query query)", "modifiers": "public", "return": "void", "body": "public void preFilterGaeKinds(Query query) throws IllegalArgumentException {\n        if (!canPreFilterGaeKinds(query)) {\n            throw new IllegalArgumentException(\"Cannot pre-filter kinds. Query already contains an inequality filter\");\n        }\n\n        FilterPredicate filter;\n        if (Entities.KIND_METADATA_KIND.equals(query.getKind())) {\n            filter = new FilterPredicate(Entity.KEY_RESERVED_PROPERTY, LESS_THAN,\n                    Entities.createKindKey(ENTITY_PREFIX));\n        } else {\n            filter = new FilterPredicate(Entity.KEY_RESERVED_PROPERTY, LESS_THAN,\n                    KeyFactory.createKey(ENTITY_PREFIX, 1L));\n        }\n\n        List<Query.Filter> filters = Lists.<Query.Filter>newArrayList(filter);\n        if (query.getFilter() != null) {\n            filters.add(query.getFilter());\n            query.setFilter(Query.CompositeFilterOperator.and(filters));\n        } else {\n            query.setFilter(filter);\n        }\n    }", "signature": "void preFilterGaeKinds(Query query)", "full_signature": "public void preFilterGaeKinds(Query query)", "class_method_signature": "DatastoreHelper.preFilterGaeKinds(Query query)", "testcase": false, "constructor": false, "invocations": ["canPreFilterGaeKinds", "equals", "getKind", "createKindKey", "createKey", "newArrayList", "getFilter", "add", "getFilter", "setFilter", "and", "setFilter"]}, "repository": {"repo_id": 29952888, "url": "https://github.com/ArcBees/gae-studio", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 21, "size": 11408, "license": "licensed"}}