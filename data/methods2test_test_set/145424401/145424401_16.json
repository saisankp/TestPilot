{"test_class": {"identifier": "CveReader2Test", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm\");", "modifier": "static final", "type": "SimpleDateFormat", "declarator": "format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm\")", "var_name": "format"}], "file": "rest-backend/src/test/java/org/eclipse/steady/backend/cve/CveReader2Test.java"}, "test_case": {"identifier": "testBuildFromJson", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testBuildFromJson() throws CacheException {\n    NvdRestServiceMockup.create();\n    try {\n      final Cve cve_2014_0050 = CveReader2.read(\"CVE-2014-0050\");\n      assertEquals(Float.valueOf(\"7.5\"), cve_2014_0050.getCvssScore());\n      assertEquals(\"2.0\", cve_2014_0050.getCvssVersion());\n      assertEquals(\"AV:N/AC:L/Au:N/C:P/I:P/A:P\", cve_2014_0050.getCvssVector());\n      assertEquals(\n          \"MultipartStream.java in Apache Commons FileUpload before 1.3.1, as used in Apache\"\n              + \" Tomcat, JBoss Web, and other products, allows remote attackers to cause a denial\"\n              + \" of service (infinite loop and CPU consumption) via a crafted Content-Type header\"\n              + \" that bypasses a loop's intended exit conditions.\",\n          cve_2014_0050.getSummary());\n      final Calendar publ = new GregorianCalendar();\n      publ.setTime(format.parse(\"2014-04-01T06:27Z\"));\n      assertEquals(publ, cve_2014_0050.getPublished());\n      final Calendar modi = new GregorianCalendar();\n      modi.setTime(format.parse(\"2018-10-09T19:35Z\"));\n      assertEquals(modi, cve_2014_0050.getModified());\n\n      final Cve cve_2018_0123 = CveReader2.read(\"CVE-2018-0123\");\n      assertEquals(Float.valueOf(\"5.5\"), cve_2018_0123.getCvssScore());\n      assertEquals(\"3.0\", cve_2018_0123.getCvssVersion());\n      assertEquals(\"CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N\", cve_2018_0123.getCvssVector());\n      assertEquals(\n          \"Not available\",\n          cve_2018_0123\n              .getSummary()); // lang was changed to 'de', thus, no english description is found\n      publ.setTime(format.parse(\"2018-02-08T07:29Z\"));\n      assertEquals(publ, cve_2018_0123.getPublished());\n      modi.setTime(format.parse(\"2018-03-13T13:53Z\"));\n      assertEquals(modi, cve_2018_0123.getModified());\n\n      final Cve cve_2018_1000865 = CveReader2.read(\"CVE-2018-1000865\");\n      assertEquals(Float.valueOf(\"8.8\"), cve_2018_1000865.getCvssScore());\n      assertEquals(\"3.0\", cve_2018_1000865.getCvssVersion());\n      assertEquals(\n          \"CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H\", cve_2018_1000865.getCvssVector());\n      assertEquals(\n          \"A sandbox bypass vulnerability exists in Script Security Plugin 1.47 and earlier in\"\n              + \" groovy-sandbox/src/main/java/org/kohsuke/groovy/sandbox/SandboxTransformer.java\"\n              + \" that allows attackers with Job/Configure permission to execute arbitrary code on\"\n              + \" the Jenkins master JVM, if plugins using the Groovy sandbox are installed.\",\n          cve_2018_1000865.getSummary());\n      publ.setTime(format.parse(\"2018-12-10T14:29Z\"));\n      assertEquals(publ, cve_2018_1000865.getPublished());\n      modi.setTime(format.parse(\"2019-02-06T19:02Z\"));\n      assertEquals(modi, cve_2018_1000865.getModified());\n\n      // Check CVSS version is properly read (3.1)\n      final Cve cve_2019_0047 = CveReader2.read(\"CVE-2019-0047\");\n      assertEquals(Float.valueOf(\"8.8\"), cve_2019_0047.getCvssScore());\n      assertEquals(\"3.1\", cve_2019_0047.getCvssVersion());\n      assertEquals(\"CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H\", cve_2019_0047.getCvssVector());\n      assertEquals(\n          \"A persistent Cross-Site Scripting (XSS) vulnerability in Junos OS J-Web interface may\"\n              + \" allow remote unauthenticated attackers to perform administrative actions on the\"\n              + \" Junos device. Successful exploitation requires a Junos administrator to first\"\n              + \" perform certain diagnostic actions on J-Web. This issue affects: Juniper\"\n              + \" Networks Junos OS 12.1X46 versions prior to 12.1X46-D86; 12.3 versions prior to\"\n              + \" 12.3R12-S13; 12.3X48 versions prior to 12.3X48-D80; 14.1X53 versions prior to\"\n              + \" 14.1X53-D51; 15.1 versions prior to 15.1F6-S13, 15.1R7-S4; 15.1X49 versions\"\n              + \" prior to 15.1X49-D171, 15.1X49-D180; 15.1X53 versions prior to 15.1X53-D497,\"\n              + \" 15.1X53-D69; 16.1 versions prior to 16.1R7-S5; 16.2 versions prior to 16.2R2-S9;\"\n              + \" 17.1 versions prior to 17.1R3; 17.2 versions prior to 17.2R1-S8, 17.2R2-S7,\"\n              + \" 17.2R3-S1; 17.3 versions prior to 17.3R3-S6; 17.4 versions prior to 17.4R1-S7,\"\n              + \" 17.4R2-S4, 17.4R3; 18.1 versions prior to 18.1R3-S5; 18.2 versions prior to\"\n              + \" 18.2R1-S5, 18.2R2-S3, 18.2R3; 18.3 versions prior to 18.3R1-S3, 18.3R2, 18.3R3;\"\n              + \" 18.4 versions prior to 18.4R1-S2, 18.4R2.\",\n          cve_2019_0047.getSummary());\n    } catch (ParseException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }", "signature": "void testBuildFromJson()", "full_signature": "@Test public void testBuildFromJson()", "class_method_signature": "CveReader2Test.testBuildFromJson()", "testcase": true, "constructor": false, "invocations": ["create", "read", "assertEquals", "valueOf", "getCvssScore", "assertEquals", "getCvssVersion", "assertEquals", "getCvssVector", "assertEquals", "getSummary", "setTime", "parse", "assertEquals", "getPublished", "setTime", "parse", "assertEquals", "getModified", "read", "assertEquals", "valueOf", "getCvssScore", "assertEquals", "getCvssVersion", "assertEquals", "getCvssVector", "assertEquals", "getSummary", "setTime", "parse", "assertEquals", "getPublished", "setTime", "parse", "assertEquals", "getModified", "read", "assertEquals", "valueOf", "getCvssScore", "assertEquals", "getCvssVersion", "assertEquals", "getCvssVector", "assertEquals", "getSummary", "setTime", "parse", "assertEquals", "getPublished", "setTime", "parse", "assertEquals", "getModified", "read", "assertEquals", "valueOf", "getCvssScore", "assertEquals", "getCvssVersion", "assertEquals", "getCvssVector", "assertEquals", "getSummary", "printStackTrace", "assertTrue"]}, "focal_class": {"identifier": "CveReader2", "superclass": "", "interfaces": "implements ObjectFetcher<String, Cve>", "fields": [{"original_string": "private static Logger log = LoggerFactory.getLogger(CveReader2.class);", "modifier": "private static", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(CveReader2.class)", "var_name": "log"}, {"original_string": "private static Cache<String, Cve> CVE_CACHE = new Cache<String, Cve>(new CveReader2(), 1440);", "modifier": "private static", "type": "Cache<String, Cve>", "declarator": "CVE_CACHE = new Cache<String, Cve>(new CveReader2(), 1440)", "var_name": "CVE_CACHE"}], "methods": [{"identifier": "read", "parameters": "(String _key)", "modifiers": "public static", "return": "Cve", "signature": "Cve read(String _key)", "full_signature": "public static Cve read(String _key)", "class_method_signature": "CveReader2.read(String _key)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(String _key, boolean _force_fetch)", "modifiers": "public static", "return": "Cve", "signature": "Cve read(String _key, boolean _force_fetch)", "full_signature": "public static Cve read(String _key, boolean _force_fetch)", "class_method_signature": "CveReader2.read(String _key, boolean _force_fetch)", "testcase": false, "constructor": false}, {"identifier": "fetch", "parameters": "(String _key)", "modifiers": "public", "return": "Cve", "signature": "Cve fetch(String _key)", "full_signature": "public Cve fetch(String _key)", "class_method_signature": "CveReader2.fetch(String _key)", "testcase": false, "constructor": false}, {"identifier": "buildFromJson", "parameters": "(String _id, String _json)", "modifiers": "private static final", "return": "Cve", "signature": "Cve buildFromJson(String _id, String _json)", "full_signature": "private static final Cve buildFromJson(String _id, String _json)", "class_method_signature": "CveReader2.buildFromJson(String _id, String _json)", "testcase": false, "constructor": false}], "file": "rest-backend/src/main/java/org/eclipse/steady/backend/cve/CveReader2.java"}, "focal_method": {"identifier": "buildFromJson", "parameters": "(String _id, String _json)", "modifiers": "private static final", "return": "Cve", "body": "private static final Cve buildFromJson(String _id, String _json) throws ParseException {\n    final SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm\");\n    final Cve cve = new Cve();\n    cve.setId(_id);\n\n    final Configuration conf = Configuration.defaultConfiguration();\n    // conf.addOptions(Option.DEFAULT_PATH_LEAF_TO_NULL);\n    final Object document = conf.jsonProvider().parse(_json);\n\n    // Take first english description\n    final JSONArray descriptions =\n        JsonPath.read(document, \"$.cve.description.description_data[?(@.lang=='en')].value\");\n    if (descriptions == null || descriptions.size() == 0) {\n      log.warn(\"No english description found for CVE [\" + _id + \"]\");\n      cve.setSummary(\"Not available\");\n    } else {\n      cve.setSummary(descriptions.get(0).toString());\n    }\n\n    final String published = JsonPath.read(document, \"$.publishedDate\");\n    final Calendar publ = new GregorianCalendar();\n    publ.setTime(format.parse(published));\n    cve.setPublished(publ);\n\n    final String modified = JsonPath.read(document, \"$.lastModifiedDate\");\n    final Calendar modi = new GregorianCalendar();\n    modi.setTime(format.parse(modified));\n    cve.setModified(modi);\n\n    String cvss3_version = null;\n    Double cvss3_score = null;\n    String cvss3_vector = null;\n    try {\n      cvss3_version = JsonPath.read(document, \"$.impact.baseMetricV3.cvssV3.version\");\n      cvss3_score = JsonPath.read(document, \"$.impact.baseMetricV3.cvssV3.baseScore\");\n      cvss3_vector = JsonPath.read(document, \"$.impact.baseMetricV3.cvssV3.vectorString\");\n    } catch (Exception e) {\n      log.warn(\n          \"Exception when reading CVSS v3 information for CVE [\" + _id + \"]: \" + e.getMessage());\n    }\n\n    String cvss2_version = null;\n    Double cvss2_score = null;\n    String cvss2_vector = null;\n    try {\n      cvss2_version = JsonPath.read(document, \"$.impact.baseMetricV2.cvssV2.version\");\n      cvss2_score = JsonPath.read(document, \"$.impact.baseMetricV2.cvssV2.baseScore\");\n      cvss2_vector = JsonPath.read(document, \"$.impact.baseMetricV2.cvssV2.vectorString\");\n    } catch (Exception e) {\n      log.warn(\n          \"Exception when reading CVSS v2 information for CVE [\" + _id + \"]: \" + e.getMessage());\n    }\n\n    if (cvss3_version != null && cvss3_score != null && cvss3_vector != null) {\n      cve.setCvssScore(cvss3_score.floatValue());\n      cve.setCvssVector(cvss3_vector);\n      cve.setCvssVersion(cvss3_version);\n    } else if (cvss2_version != null && cvss2_score != null && cvss2_vector != null) {\n      cve.setCvssScore(cvss2_score.floatValue());\n      cve.setCvssVector(cvss2_vector);\n      cve.setCvssVersion(cvss2_version);\n    }\n\n    return cve;\n  }", "signature": "Cve buildFromJson(String _id, String _json)", "full_signature": "private static final Cve buildFromJson(String _id, String _json)", "class_method_signature": "CveReader2.buildFromJson(String _id, String _json)", "testcase": false, "constructor": false, "invocations": ["setId", "defaultConfiguration", "parse", "jsonProvider", "read", "size", "warn", "setSummary", "setSummary", "toString", "get", "read", "setTime", "parse", "setPublished", "read", "setTime", "parse", "setModified", "read", "read", "read", "warn", "getMessage", "read", "read", "read", "warn", "getMessage", "setCvssScore", "floatValue", "setCvssVector", "setCvssVersion", "setCvssScore", "floatValue", "setCvssVector", "setCvssVersion"]}, "repository": {"repo_id": 145424401, "url": "https://github.com/eclipse/steady", "stars": 353, "created": "8/20/2018 1:54:15 PM +00:00", "updates": "2020-01-25T08:37:00+00:00", "fork": "False", "license": "licensed"}}