{"test_class": {"identifier": "PortofolioServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Offset<Double> PERCENT_OFFSET = offset(0.000000000001d);", "modifier": "private static final", "type": "Offset<Double>", "declarator": "PERCENT_OFFSET = offset(0.000000000001d)", "var_name": "PERCENT_OFFSET"}, {"original_string": "@Autowired\n\tprivate PortofolioService portofolioService;", "modifier": "@Autowired\n\tprivate", "type": "PortofolioService", "declarator": "portofolioService", "var_name": "portofolioService"}, {"original_string": "@Autowired\n\tprivate PortofolioRepository portofolioRepo;", "modifier": "@Autowired\n\tprivate", "type": "PortofolioRepository", "declarator": "portofolioRepo", "var_name": "portofolioRepo"}], "file": "trading-common/src/test/java/fr/ymanvieu/trading/common/portofolio/PortofolioServiceTest.java"}, "test_case": {"identifier": "testGetAsset", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetAsset() {\n\t\tString login = \"toto\";\n\t\tString symbol = GBP;\n\t\tint amount = 5000;\n\n\t\tAssetEntity ae = portofolioRepo.findByUserUsername(login).getAsset(symbol);\n\n\t\tAssetInfo a = portofolioService.getAsset(ae);\n\n\t\tassertThat(a.getSymbol().getCode()).isEqualTo(symbol);\n\t\tassertThat(a.getQuantity()).isEqualTo(amount);\n\t\tassertThat(a.getValue()).isEqualTo(6000);\n\t\tassertThat(a.getCurrentValue()).isEqualTo(6332.419239);\n\t\tassertThat(a.getValueChange()).isEqualTo(332.419239);\n\t\tassertThat(a.getPercentChange()).isEqualTo(5.54032065);\n\t\tassertThat(a.getCurrentRate()).isEqualTo(1.2664838478);\n\t}", "signature": "void testGetAsset()", "full_signature": "@Test public void testGetAsset()", "class_method_signature": "PortofolioServiceTest.testGetAsset()", "testcase": true, "constructor": false, "invocations": ["getAsset", "findByUserUsername", "getAsset", "isEqualTo", "assertThat", "getCode", "getSymbol", "isEqualTo", "assertThat", "getQuantity", "isEqualTo", "assertThat", "getValue", "isEqualTo", "assertThat", "getCurrentValue", "isEqualTo", "assertThat", "getValueChange", "isEqualTo", "assertThat", "getPercentChange", "isEqualTo", "assertThat", "getCurrentRate"]}, "focal_class": {"identifier": "PortofolioService", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n\tprivate UserRepository userRepo;", "modifier": "@Autowired\n\tprivate", "type": "UserRepository", "declarator": "userRepo", "var_name": "userRepo"}, {"original_string": "@Autowired\n\tprivate PortofolioRepository portofolioRepo;", "modifier": "@Autowired\n\tprivate", "type": "PortofolioRepository", "declarator": "portofolioRepo", "var_name": "portofolioRepo"}, {"original_string": "@Autowired\n\tprivate SymbolRepository symbolRepo;", "modifier": "@Autowired\n\tprivate", "type": "SymbolRepository", "declarator": "symbolRepo", "var_name": "symbolRepo"}, {"original_string": "@Autowired\n\tprivate RateService rateService;", "modifier": "@Autowired\n\tprivate", "type": "RateService", "declarator": "rateService", "var_name": "rateService"}, {"original_string": "@Autowired\n\tprivate SymbolMapper symbolMapper;", "modifier": "@Autowired\n\tprivate", "type": "SymbolMapper", "declarator": "symbolMapper", "var_name": "symbolMapper"}], "methods": [{"identifier": "createPortofolio", "parameters": "(String login, String baseCurrencyCode, int baseCurrencyAmount)", "modifiers": "public", "return": "Portofolio", "signature": "Portofolio createPortofolio(String login, String baseCurrencyCode, int baseCurrencyAmount)", "full_signature": "public Portofolio createPortofolio(String login, String baseCurrencyCode, int baseCurrencyAmount)", "class_method_signature": "PortofolioService.createPortofolio(String login, String baseCurrencyCode, int baseCurrencyAmount)", "testcase": false, "constructor": false}, {"identifier": "getBaseCurrency", "parameters": "(String login)", "modifiers": "public", "return": "AssetInfo", "signature": "AssetInfo getBaseCurrency(String login)", "full_signature": "public AssetInfo getBaseCurrency(String login)", "class_method_signature": "PortofolioService.getBaseCurrency(String login)", "testcase": false, "constructor": false}, {"identifier": "getPortofolio", "parameters": "(String login)", "modifiers": "public", "return": "Portofolio", "signature": "Portofolio getPortofolio(String login)", "full_signature": "public Portofolio getPortofolio(String login)", "class_method_signature": "PortofolioService.getPortofolio(String login)", "testcase": false, "constructor": false}, {"identifier": "getAsset", "parameters": "(AssetEntity ae)", "modifiers": "protected", "return": "AssetInfo", "signature": "AssetInfo getAsset(AssetEntity ae)", "full_signature": "protected AssetInfo getAsset(AssetEntity ae)", "class_method_signature": "PortofolioService.getAsset(AssetEntity ae)", "testcase": false, "constructor": false}, {"identifier": "getOrderInfo", "parameters": "(String login, String symbolCode, double quantity)", "modifiers": "public", "return": "OrderInfo", "signature": "OrderInfo getOrderInfo(String login, String symbolCode, double quantity)", "full_signature": "public OrderInfo getOrderInfo(String login, String symbolCode, double quantity)", "class_method_signature": "PortofolioService.getOrderInfo(String login, String symbolCode, double quantity)", "testcase": false, "constructor": false}, {"identifier": "getAvailableSymbols", "parameters": "(String login)", "modifiers": "public", "return": "List<Symbol>", "signature": "List<Symbol> getAvailableSymbols(String login)", "full_signature": "public List<Symbol> getAvailableSymbols(String login)", "class_method_signature": "PortofolioService.getAvailableSymbols(String login)", "testcase": false, "constructor": false}, {"identifier": "buy", "parameters": "(String login, String code, double quantity)", "modifiers": "public", "return": "Order", "signature": "Order buy(String login, String code, double quantity)", "full_signature": "public Order buy(String login, String code, double quantity)", "class_method_signature": "PortofolioService.buy(String login, String code, double quantity)", "testcase": false, "constructor": false}, {"identifier": "sell", "parameters": "(String login, String code, double quantity)", "modifiers": "public", "return": "Order", "signature": "Order sell(String login, String code, double quantity)", "full_signature": "public Order sell(String login, String code, double quantity)", "class_method_signature": "PortofolioService.sell(String login, String code, double quantity)", "testcase": false, "constructor": false}], "file": "trading-common/src/main/java/fr/ymanvieu/trading/common/portofolio/PortofolioService.java"}, "focal_method": {"identifier": "getAsset", "parameters": "(AssetEntity ae)", "modifiers": "protected", "return": "AssetInfo", "body": "protected AssetInfo getAsset(AssetEntity ae) {\n\n\t\tSymbolEntity currency = ae.getCurrency();\n\n\t\tAssetInfo asset = new AssetInfo(ae.getSymbol(), currency, ae.getQuantity().doubleValue());\n\n\t\tRate q = rateService.getLatest(ae.getSymbol().getCode(), currency.getCode());\n\n\t\tif (!equalsByComparingTo(ae.getQuantity(), ZERO)) {\n\t\t\tBigDecimal currentValue = q.getValue().multiply(ae.getQuantity());\n\t\t\tdouble percentChange = percentChange(ae.getCurrencyAmount(), currentValue);\n\n\t\t\tasset.setValue(ae.getCurrencyAmount().doubleValue());\n\t\t\tasset.setCurrentValue(currentValue.doubleValue());\n\t\t\tasset.setValueChange(currentValue.subtract(ae.getCurrencyAmount()).doubleValue());\n\t\t\tasset.setPercentChange(percentChange);\n\t\t}\n\t\tasset.setCurrentRate(q.getValue().doubleValue());\n\n\t\treturn asset;\n\t}", "signature": "AssetInfo getAsset(AssetEntity ae)", "full_signature": "protected AssetInfo getAsset(AssetEntity ae)", "class_method_signature": "PortofolioService.getAsset(AssetEntity ae)", "testcase": false, "constructor": false, "invocations": ["getCurrency", "getSymbol", "doubleValue", "getQuantity", "getLatest", "getCode", "getSymbol", "getCode", "equalsByComparingTo", "getQuantity", "multiply", "getValue", "getQuantity", "percentChange", "getCurrencyAmount", "setValue", "doubleValue", "getCurrencyAmount", "setCurrentValue", "doubleValue", "setValueChange", "doubleValue", "subtract", "getCurrencyAmount", "setPercentChange", "setCurrentRate", "doubleValue", "getValue"]}, "repository": {"repo_id": 51700398, "url": "https://github.com/ymanvieu/trading", "language": "Java", "is_fork": false, "fork_count": 0, "stargazer_count": 5, "size": 988, "license": "licensed"}}