{"test_class": {"identifier": "ReceiverGeneratorTest", "superclass": "", "interfaces": "", "fields": [], "file": "CoreFeatures/MessageProcessing/ReceiverGenerator/src/test/java/info/smart_tools/smartactors/message_processing/receiver_generator/ReceiverGeneratorTest.java"}, "test_case": {"identifier": "checkReceiverGeneratorExceptionOn", "parameters": "()", "modifiers": "@Test(expected = ReceiverGeneratorException.class) public", "return": "void", "body": "@Test(expected = ReceiverGeneratorException.class)\n    public void checkReceiverGeneratorExceptionOn()\n            throws Exception {\n        CustomActor a = new CustomActor();\n        IResolveDependencyStrategy strategy = mock(IResolveDependencyStrategy.class);\n\n        IReceiverGenerator rg = new ReceiverGenerator(null);\n        rg.generate(a, strategy, \"a\");\n        fail();\n    }", "signature": "void checkReceiverGeneratorExceptionOn()", "full_signature": "@Test(expected = ReceiverGeneratorException.class) public void checkReceiverGeneratorExceptionOn()", "class_method_signature": "ReceiverGeneratorTest.checkReceiverGeneratorExceptionOn()", "testcase": true, "constructor": false, "invocations": ["mock", "generate", "fail"]}, "focal_class": {"identifier": "ReceiverGenerator", "superclass": "", "interfaces": "implements IReceiverGenerator", "fields": [{"original_string": "private IClassGenerator<String> classGenerator;", "modifier": "private", "type": "IClassGenerator<String>", "declarator": "classGenerator", "var_name": "classGenerator"}], "methods": [{"identifier": "ReceiverGenerator", "parameters": "(final ClassLoader classLoader)", "modifiers": "public", "return": "", "signature": " ReceiverGenerator(final ClassLoader classLoader)", "full_signature": "public  ReceiverGenerator(final ClassLoader classLoader)", "class_method_signature": "ReceiverGenerator.ReceiverGenerator(final ClassLoader classLoader)", "testcase": false, "constructor": true}, {"identifier": "generate", "parameters": "(\n            final Object objInstance,\n            final IResolveDependencyStrategy wrapperResolutionStrategy,\n            final String methodName\n    )", "modifiers": "@Override public", "return": "IMessageReceiver", "signature": "IMessageReceiver generate(\n            final Object objInstance,\n            final IResolveDependencyStrategy wrapperResolutionStrategy,\n            final String methodName\n    )", "full_signature": "@Override public IMessageReceiver generate(\n            final Object objInstance,\n            final IResolveDependencyStrategy wrapperResolutionStrategy,\n            final String methodName\n    )", "class_method_signature": "ReceiverGenerator.generate(\n            final Object objInstance,\n            final IResolveDependencyStrategy wrapperResolutionStrategy,\n            final String methodName\n    )", "testcase": false, "constructor": false}, {"identifier": "generateClass", "parameters": "(\n            final Object usersObject,\n            final String handlerName\n    )", "modifiers": "private", "return": "Class<IMessageReceiver>", "signature": "Class<IMessageReceiver> generateClass(\n            final Object usersObject,\n            final String handlerName\n    )", "full_signature": "private Class<IMessageReceiver> generateClass(\n            final Object usersObject,\n            final String handlerName\n    )", "class_method_signature": "ReceiverGenerator.generateClass(\n            final Object usersObject,\n            final String handlerName\n    )", "testcase": false, "constructor": false}, {"identifier": "findWrapperInterface", "parameters": "(final Object actor, final String handler)", "modifiers": "private", "return": "Class", "signature": "Class findWrapperInterface(final Object actor, final String handler)", "full_signature": "private Class findWrapperInterface(final Object actor, final String handler)", "class_method_signature": "ReceiverGenerator.findWrapperInterface(final Object actor, final String handler)", "testcase": false, "constructor": false}], "file": "CoreFeatures/MessageProcessing/ReceiverGenerator/src/main/java/info/smart_tools/smartactors/message_processing/receiver_generator/ReceiverGenerator.java"}, "focal_method": {"identifier": "generate", "parameters": "(\n            final Object objInstance,\n            final IResolveDependencyStrategy wrapperResolutionStrategy,\n            final String methodName\n    )", "modifiers": "@Override public", "return": "IMessageReceiver", "body": "@Override\n    public IMessageReceiver generate(\n            final Object objInstance,\n            final IResolveDependencyStrategy wrapperResolutionStrategy,\n            final String methodName\n    ) throws InvalidArgumentException, ReceiverGeneratorException {\n        if (\n                null == objInstance ||\n                null == methodName ||\n                methodName.isEmpty() ||\n                null == wrapperResolutionStrategy\n        ) {\n            throw new InvalidArgumentException(\"One of the arguments null or empty.\");\n        }\n        try {\n            Class<IMessageReceiver> clazz = generateClass(\n                    objInstance,\n                    methodName\n            );\n            return clazz.getConstructor(\n                    new Class[]{objInstance.getClass(), IResolveDependencyStrategy.class}\n            )\n                    .newInstance(new Object[]{objInstance, wrapperResolutionStrategy});\n        } catch (Throwable e) {\n            throw new ReceiverGeneratorException(\n                    \"Could not generate message receiver because of the following error:\",\n                    e\n            );\n        }\n    }", "signature": "IMessageReceiver generate(\n            final Object objInstance,\n            final IResolveDependencyStrategy wrapperResolutionStrategy,\n            final String methodName\n    )", "full_signature": "@Override public IMessageReceiver generate(\n            final Object objInstance,\n            final IResolveDependencyStrategy wrapperResolutionStrategy,\n            final String methodName\n    )", "class_method_signature": "ReceiverGenerator.generate(\n            final Object objInstance,\n            final IResolveDependencyStrategy wrapperResolutionStrategy,\n            final String methodName\n    )", "testcase": false, "constructor": false, "invocations": ["isEmpty", "generateClass", "newInstance", "getConstructor", "getClass"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}