{"test_class": {"identifier": "TravisRestServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n  private TravisRestService travisRestService;", "modifier": "@Autowired\n  private", "type": "TravisRestService", "declarator": "travisRestService", "var_name": "travisRestService"}, {"original_string": "@MockBean\n  private ProfContextDumpRepository profContextDumpRepository;", "modifier": "@MockBean\n  private", "type": "ProfContextDumpRepository", "declarator": "profContextDumpRepository", "var_name": "profContextDumpRepository"}, {"original_string": "@MockBean\n  private ProjectRepository projectRepository;", "modifier": "@MockBean\n  private", "type": "ProjectRepository", "declarator": "projectRepository", "var_name": "projectRepository"}, {"original_string": "@MockBean\n  private BranchRepository branchRepository;", "modifier": "@MockBean\n  private", "type": "BranchRepository", "declarator": "branchRepository", "var_name": "branchRepository"}, {"original_string": "@MockBean\n  private BuildRepository buildRepository;", "modifier": "@MockBean\n  private", "type": "BuildRepository", "declarator": "buildRepository", "var_name": "buildRepository"}, {"original_string": "@MockBean\n  private JandyWorker jandyWorker;", "modifier": "@MockBean\n  private", "type": "JandyWorker", "declarator": "jandyWorker", "var_name": "jandyWorker"}, {"original_string": "@MockBean\n  private SampleRepository sampleRepository;", "modifier": "@MockBean\n  private", "type": "SampleRepository", "declarator": "sampleRepository", "var_name": "sampleRepository"}, {"original_string": "private BuildInfo bi;", "modifier": "private", "type": "BuildInfo", "declarator": "bi", "var_name": "bi"}, {"original_string": "private Project project;", "modifier": "private", "type": "Project", "declarator": "project", "var_name": "project"}, {"original_string": "private Branch branch;", "modifier": "private", "type": "Branch", "declarator": "branch", "var_name": "branch"}], "file": "jandy-server/src/test/java/io/jandy/service/TravisRestServiceTest.java"}, "test_case": {"identifier": "testCreateProf", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testCreateProf() throws Exception {\n    ProfilingInfo profParams = new Gson().fromJson(IOUtils.toString(ClassLoader.getSystemResource(\"java-profiler-result/begin.json\")), ProfilingInfo.class);\n\n    Build build = new Build();\n    build.setId(3L);\n    build.setLanguage(bi.getLang());\n    build.setTravisBuildId(profParams.getBuildId());\n    build.setNumber(bi.getBuildNum());\n    build.setBranch(branch);\n    build.setNumSamples(bi.getNumSamples());\n\n    Sample sample = new Sample();\n    sample.setId(4L);\n    sample.getBuilds().add(build);\n\n    build.getSamples().add(sample);\n\n    ProfContextDump prof = new ProfContextDump();\n    prof.setId(5L);\n    prof.setBuild(build);\n    prof.setSample(sample);\n    prof.setState(ProfContextState.CREATED);\n\n    when(buildRepository.findByTravisBuildId(eq(profParams.getBuildId()))).thenReturn(build);\n    when(projectRepository.findByBuild(any(Build.class))).thenReturn(project);\n//    Sample sample = sampleRepository.findByNameAndProject_Id(profParams.getSampleName(), project.getId());\n    when(sampleRepository.save(any(Sample.class))).thenReturn(sample);\n    when(buildRepository.save(any(Build.class))).thenReturn(build);\n    when(profContextDumpRepository.save(any(ProfContextDump.class))).thenReturn(prof);\n\n    Map<String, ?> result = travisRestService.createProf(profParams);\n    assertEquals(result.get(\"profId\"), prof.getId());\n\n    verify(buildRepository, times(1)).findByTravisBuildId(eq(profParams.getBuildId()));\n    verify(projectRepository, times(1)).findByBuild(refEq(build, \"id\"));\n    verify(sampleRepository, times(1)).save(refEq(sample));\n    verify(sampleRepository, times(1)).findByNameAndProject_Id(eq(profParams.getSampleName()), eq(profParams.getBuildId()));\n    verify(buildRepository, times(1)).save(refEq(build, \"id\"));\n    verify(profContextDumpRepository, times(1)).save(refEq(prof, \"id\"));\n  }", "signature": "void testCreateProf()", "full_signature": "@Test public void testCreateProf()", "class_method_signature": "TravisRestServiceTest.testCreateProf()", "testcase": true, "constructor": false, "invocations": ["fromJson", "toString", "getSystemResource", "setId", "setLanguage", "getLang", "setTravisBuildId", "getBuildId", "setNumber", "getBuildNum", "setBranch", "setNumSamples", "getNumSamples", "setId", "add", "getBuilds", "add", "getSamples", "setId", "setBuild", "setSample", "setState", "thenReturn", "when", "findByTravisBuildId", "eq", "getBuildId", "thenReturn", "when", "findByBuild", "any", "thenReturn", "when", "save", "any", "thenReturn", "when", "save", "any", "thenReturn", "when", "save", "any", "createProf", "assertEquals", "get", "getId", "findByTravisBuildId", "verify", "times", "eq", "getBuildId", "findByBuild", "verify", "times", "refEq", "save", "verify", "times", "refEq", "findByNameAndProject_Id", "verify", "times", "eq", "getSampleName", "eq", "getBuildId", "save", "verify", "times", "refEq", "save", "verify", "times", "refEq"]}, "focal_class": {"identifier": "TravisRestService", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(TravisRestService.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(TravisRestService.class)", "var_name": "logger"}, {"original_string": "@Autowired\n  private ProfContextDumpRepository profContextDumpRepository;", "modifier": "@Autowired\n  private", "type": "ProfContextDumpRepository", "declarator": "profContextDumpRepository", "var_name": "profContextDumpRepository"}, {"original_string": "@Autowired\n  private BuildRepository buildRepository;", "modifier": "@Autowired\n  private", "type": "BuildRepository", "declarator": "buildRepository", "var_name": "buildRepository"}, {"original_string": "@Autowired\n  private BranchRepository branchRepository;", "modifier": "@Autowired\n  private", "type": "BranchRepository", "declarator": "branchRepository", "var_name": "branchRepository"}, {"original_string": "@Autowired\n  private ProjectRepository projectRepository;", "modifier": "@Autowired\n  private", "type": "ProjectRepository", "declarator": "projectRepository", "var_name": "projectRepository"}, {"original_string": "@Autowired\n  private SampleRepository sampleRepository;", "modifier": "@Autowired\n  private", "type": "SampleRepository", "declarator": "sampleRepository", "var_name": "sampleRepository"}, {"original_string": "@Autowired\n  private JandyWorker jandyWorker;", "modifier": "@Autowired\n  private", "type": "JandyWorker", "declarator": "jandyWorker", "var_name": "jandyWorker"}], "methods": [{"identifier": "begin", "parameters": "(BuildInfo bi)", "modifiers": "@Transactional public", "return": "void", "signature": "void begin(BuildInfo bi)", "full_signature": "@Transactional public void begin(BuildInfo bi)", "class_method_signature": "TravisRestService.begin(BuildInfo bi)", "testcase": false, "constructor": false}, {"identifier": "createProf", "parameters": "(ProfilingInfo profParams)", "modifiers": "@Transactional public", "return": "Map<String, ?>", "signature": "Map<String, ?> createProf(ProfilingInfo profParams)", "full_signature": "@Transactional public Map<String, ?> createProf(ProfilingInfo profParams)", "class_method_signature": "TravisRestService.createProf(ProfilingInfo profParams)", "testcase": false, "constructor": false}, {"identifier": "saveProf", "parameters": "(ProfilingContext profilingContext)", "modifiers": "public", "return": "void", "signature": "void saveProf(ProfilingContext profilingContext)", "full_signature": "public void saveProf(ProfilingContext profilingContext)", "class_method_signature": "TravisRestService.saveProf(ProfilingContext profilingContext)", "testcase": false, "constructor": false}, {"identifier": "updateTreeNodes", "parameters": "(List<TreeNode> treeNodes)", "modifiers": "public", "return": "void", "signature": "void updateTreeNodes(List<TreeNode> treeNodes)", "full_signature": "public void updateTreeNodes(List<TreeNode> treeNodes)", "class_method_signature": "TravisRestService.updateTreeNodes(List<TreeNode> treeNodes)", "testcase": false, "constructor": false}, {"identifier": "finish", "parameters": "(long buildId)", "modifiers": "public", "return": "void", "signature": "void finish(long buildId)", "full_signature": "public void finish(long buildId)", "class_method_signature": "TravisRestService.finish(long buildId)", "testcase": false, "constructor": false}], "file": "jandy-server/src/main/java/io/jandy/service/TravisRestService.java"}, "focal_method": {"identifier": "createProf", "parameters": "(ProfilingInfo profParams)", "modifiers": "@Transactional public", "return": "Map<String, ?>", "body": "@Transactional\n  public Map<String, ?> createProf(ProfilingInfo profParams) {\n    Build build = buildRepository.findByTravisBuildId(profParams.getBuildId());\n    Project project = projectRepository.findByBuild(build);\n    Sample sample = sampleRepository.findByNameAndProject_Id(profParams.getSampleName(), project.getId());\n    if (sample == null) {\n      sample = new Sample();\n      sample.setName(profParams.getSampleName());\n      sample.setProject(project);\n      sample = sampleRepository.save(sample);\n    }\n\n    sample.getBuilds().add(build);\n    sample = sampleRepository.save(sample);\n    build.getSamples().add(sample);\n    build = buildRepository.save(build);\n\n    ProfContextDump prof = new ProfContextDump();\n    prof.setBuild(build);\n    prof.setSample(sample);\n    prof.setState(ProfContextState.CREATED);\n    prof = profContextDumpRepository.save(prof);\n\n    logger.info(\"Create Profiling: {}\", prof.getId());\n\n    return ImmutableMap.of(\"profId\", prof.getId());\n  }", "signature": "Map<String, ?> createProf(ProfilingInfo profParams)", "full_signature": "@Transactional public Map<String, ?> createProf(ProfilingInfo profParams)", "class_method_signature": "TravisRestService.createProf(ProfilingInfo profParams)", "testcase": false, "constructor": false, "invocations": ["findByTravisBuildId", "getBuildId", "findByBuild", "findByNameAndProject_Id", "getSampleName", "getId", "setName", "getSampleName", "setProject", "save", "add", "getBuilds", "save", "add", "getSamples", "save", "setBuild", "setSample", "setState", "save", "info", "getId", "of", "getId"]}, "repository": {"repo_id": 37814227, "url": "https://github.com/jandy-team/jandy", "language": "Java", "is_fork": false, "fork_count": 13, "stargazer_count": 12, "size": 5059, "license": "licensed"}}