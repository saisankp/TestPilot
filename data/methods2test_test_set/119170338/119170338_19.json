{"test_class": {"identifier": "ObjectScoreDistributionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ObjectScoreDistribution objDist;", "modifier": "private", "type": "ObjectScoreDistribution", "declarator": "objDist", "var_name": "objDist"}, {"original_string": "private final int numTerms = 2;", "modifier": "private final", "type": "int", "declarator": "numTerms = 2", "var_name": "numTerms"}, {"original_string": "private final int sampleSize = 10;", "modifier": "private final", "type": "int", "declarator": "sampleSize = 10", "var_name": "sampleSize"}], "file": "phenol-core/src/test/java/org/monarchinitiative/phenol/ontology/scoredist/ObjectScoreDistributionTest.java"}, "test_case": {"identifier": "testEstimatePValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testEstimatePValue() {\n    assertEquals(1.0, objDist.estimatePValue(0.0), 0.01);\n    assertEquals(1.0, objDist.estimatePValue(0.1), 0.01);\n    assertEquals(0.82, objDist.estimatePValue(0.2), 0.01);\n    assertEquals(0.82, objDist.estimatePValue(0.4), 0.01);\n    assertEquals(0.42, objDist.estimatePValue(0.6), 0.01);\n    assertEquals(0.42, objDist.estimatePValue(0.8), 0.01);\n    assertEquals(0.0, objDist.estimatePValue(0.99), 0.01);\n  }", "signature": "void testEstimatePValue()", "full_signature": "@Test public void testEstimatePValue()", "class_method_signature": "ObjectScoreDistributionTest.testEstimatePValue()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "estimatePValue", "assertEquals", "estimatePValue", "assertEquals", "estimatePValue", "assertEquals", "estimatePValue", "assertEquals", "estimatePValue", "assertEquals", "estimatePValue", "assertEquals", "estimatePValue"]}, "focal_class": {"identifier": "ObjectScoreDistribution", "superclass": "", "interfaces": "implements Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final TermId objectId;", "modifier": "private final", "type": "TermId", "declarator": "objectId", "var_name": "objectId"}, {"original_string": "private final int numTerms;", "modifier": "private final", "type": "int", "declarator": "numTerms", "var_name": "numTerms"}, {"original_string": "private final int sampleSize;", "modifier": "private final", "type": "int", "declarator": "sampleSize", "var_name": "sampleSize"}, {"original_string": "private final SortedMap<Double, Double> cumulativeFrequencies;", "modifier": "private final", "type": "SortedMap<Double, Double>", "declarator": "cumulativeFrequencies", "var_name": "cumulativeFrequencies"}], "methods": [{"identifier": "ObjectScoreDistribution", "parameters": "(TermId objectId, int numTerms, int sampleSize, SortedMap<Double, Double> cumulativeFrequencies)", "modifiers": "public", "return": "", "signature": " ObjectScoreDistribution(TermId objectId, int numTerms, int sampleSize, SortedMap<Double, Double> cumulativeFrequencies)", "full_signature": "public  ObjectScoreDistribution(TermId objectId, int numTerms, int sampleSize, SortedMap<Double, Double> cumulativeFrequencies)", "class_method_signature": "ObjectScoreDistribution.ObjectScoreDistribution(TermId objectId, int numTerms, int sampleSize, SortedMap<Double, Double> cumulativeFrequencies)", "testcase": false, "constructor": true}, {"identifier": "estimatePValue", "parameters": "(double score)", "modifiers": "public", "return": "double", "signature": "double estimatePValue(double score)", "full_signature": "public double estimatePValue(double score)", "class_method_signature": "ObjectScoreDistribution.estimatePValue(double score)", "testcase": false, "constructor": false}, {"identifier": "observedScores", "parameters": "()", "modifiers": "public", "return": "List<Double>", "signature": "List<Double> observedScores()", "full_signature": "public List<Double> observedScores()", "class_method_signature": "ObjectScoreDistribution.observedScores()", "testcase": false, "constructor": false}, {"identifier": "getCumulativeFrequencies", "parameters": "()", "modifiers": "public", "return": "SortedMap<Double, Double>", "signature": "SortedMap<Double, Double> getCumulativeFrequencies()", "full_signature": "public SortedMap<Double, Double> getCumulativeFrequencies()", "class_method_signature": "ObjectScoreDistribution.getCumulativeFrequencies()", "testcase": false, "constructor": false}, {"identifier": "getObjectId", "parameters": "()", "modifiers": "public", "return": "TermId", "signature": "TermId getObjectId()", "full_signature": "public TermId getObjectId()", "class_method_signature": "ObjectScoreDistribution.getObjectId()", "testcase": false, "constructor": false}, {"identifier": "getNumTerms", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getNumTerms()", "full_signature": "public int getNumTerms()", "class_method_signature": "ObjectScoreDistribution.getNumTerms()", "testcase": false, "constructor": false}, {"identifier": "getSampleSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getSampleSize()", "full_signature": "public int getSampleSize()", "class_method_signature": "ObjectScoreDistribution.getSampleSize()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "ObjectScoreDistribution.toString()", "testcase": false, "constructor": false}], "file": "phenol-core/src/main/java/org/monarchinitiative/phenol/ontology/scoredist/ObjectScoreDistribution.java"}, "focal_method": {"identifier": "estimatePValue", "parameters": "(double score)", "modifiers": "public", "return": "double", "body": "public double estimatePValue(double score) {\n    Entry<Double, Double> previous = null;\n    for (Entry<Double, Double> entry : cumulativeFrequencies.entrySet()) {\n      if (previous == null && score <= entry.getKey()) {\n        return 1.0; // smaller than all\n      }\n      if (previous != null && previous.getKey() <= score && score < entry.getKey()) {\n        // interpolate and return\n        final double dx = (entry.getKey() - previous.getKey()) / 2.0;\n        return 1 - (previous.getValue() + dx * (entry.getValue() - previous.getValue()));\n      }\n      previous = entry;\n    }\n    // If we reach here, p value is 0.0\n    return 0.0;\n  }", "signature": "double estimatePValue(double score)", "full_signature": "public double estimatePValue(double score)", "class_method_signature": "ObjectScoreDistribution.estimatePValue(double score)", "testcase": false, "constructor": false, "invocations": ["entrySet", "getKey", "getKey", "getKey", "getKey", "getKey", "getValue", "getValue", "getValue"]}, "repository": {"repo_id": 119170338, "url": "https://github.com/monarch-initiative/phenol", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 5832, "license": "licensed"}}