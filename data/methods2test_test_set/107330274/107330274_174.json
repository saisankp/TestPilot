{"test_class": {"identifier": "HiccupMeterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final HiccupRecorderConfiguration config = mock(HiccupRecorderConfiguration.class);", "modifier": "private final", "type": "HiccupRecorderConfiguration", "declarator": "config = mock(HiccupRecorderConfiguration.class)", "var_name": "config"}], "file": "titus-common/src/test/java/com/netflix/titus/common/jhiccup/HiccupMeterTest.java"}, "test_case": {"identifier": "testStartupShutdownSequence", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testStartupShutdownSequence() throws Exception {\n        HiccupMeter hiccupMeter = new HiccupMeter(config, new DefaultRegistry());\n        hiccupMeter.shutdown();\n    }", "signature": "void testStartupShutdownSequence()", "full_signature": "@Test public void testStartupShutdownSequence()", "class_method_signature": "HiccupMeterTest.testStartupShutdownSequence()", "testcase": true, "constructor": false, "invocations": ["shutdown"]}, "focal_class": {"identifier": "HiccupMeter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(HiccupMeter.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HiccupMeter.class)", "var_name": "logger"}, {"original_string": "private final HiccupRecorderConfiguration configuration;", "modifier": "private final", "type": "HiccupRecorderConfiguration", "declarator": "configuration", "var_name": "configuration"}, {"original_string": "private final HiccupMeterController controller;", "modifier": "private final", "type": "HiccupMeterController", "declarator": "controller", "var_name": "controller"}, {"original_string": "private volatile boolean doRun = true;", "modifier": "private volatile", "type": "boolean", "declarator": "doRun = true", "var_name": "doRun"}, {"original_string": "private final List<HiccupSensor> sensors;", "modifier": "private final", "type": "List<HiccupSensor>", "declarator": "sensors", "var_name": "sensors"}], "methods": [{"identifier": "HiccupMeter", "parameters": "(HiccupRecorderConfiguration configuration, Registry registry)", "modifiers": "@Inject public", "return": "", "signature": " HiccupMeter(HiccupRecorderConfiguration configuration, Registry registry)", "full_signature": "@Inject public  HiccupMeter(HiccupRecorderConfiguration configuration, Registry registry)", "class_method_signature": "HiccupMeter.HiccupMeter(HiccupRecorderConfiguration configuration, Registry registry)", "testcase": false, "constructor": true}, {"identifier": "shutdown", "parameters": "()", "modifiers": "@PreDestroy public", "return": "void", "signature": "void shutdown()", "full_signature": "@PreDestroy public void shutdown()", "class_method_signature": "HiccupMeter.shutdown()", "testcase": false, "constructor": false}], "file": "titus-common/src/main/java/com/netflix/titus/common/jhiccup/HiccupMeter.java"}, "focal_method": {"identifier": "shutdown", "parameters": "()", "modifiers": "@PreDestroy public", "return": "void", "body": "@PreDestroy\n    public void shutdown() {\n        doRun = false;\n        sensors.forEach(HiccupSensor::shutdown);\n        if (controller.isAlive()) {\n            try {\n                controller.join();\n            } catch (InterruptedException e) {\n                logger.warn(\"HiccupMeter terminate/join interrupted\");\n            }\n\n        }\n    }", "signature": "void shutdown()", "full_signature": "@PreDestroy public void shutdown()", "class_method_signature": "HiccupMeter.shutdown()", "testcase": false, "constructor": false, "invocations": ["forEach", "isAlive", "join", "warn"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}