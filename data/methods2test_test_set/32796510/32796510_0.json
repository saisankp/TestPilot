{"test_class": {"identifier": "InvalidXmlCharacterModifierTest", "superclass": "", "interfaces": "", "fields": [], "file": "streamflyer-core/src/test/java/com/github/rwitzel/streamflyer/xml/InvalidXmlCharacterModifierTest.java"}, "test_case": {"identifier": "testModify", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testModify() throws Exception {\n\n        // replace one character with whitespace\n        assertModify(\" \", \"a\\uD8FFb\", \"a b\", \"1.0\", 8192, false);\n\n        // replace two characters with whitespace\n        assertModify(\" \", \"a\\uD8FFb\\uD8FFc\", \"a b c\", \"1.0\", 8192, false);\n\n        // delete two characters\n        assertModify(\"\", \"a\\uD8FFb\\uD8FFc\", \"abc\", \"1.0\", 8192, false);\n\n        // delete two characters (a newline in the string)\n        assertModify(\"\", \"a\\uD8FF\\n\\uD8FFc\", \"a\\nc\", \"1.0\", 8192, false);\n    }", "signature": "void testModify()", "full_signature": "@Test public void testModify()", "class_method_signature": "InvalidXmlCharacterModifierTest.testModify()", "testcase": true, "constructor": false, "invocations": ["assertModify", "assertModify", "assertModify", "assertModify"]}, "focal_class": {"identifier": "InvalidXmlCharacterModifier", "superclass": "", "interfaces": "implements Modifier", "fields": [{"original_string": "public static final String XML_10_VERSION = \"1.0\";", "modifier": "public static final", "type": "String", "declarator": "XML_10_VERSION = \"1.0\"", "var_name": "XML_10_VERSION"}, {"original_string": "public static final String XML_11_VERSION = \"1.1\";", "modifier": "public static final", "type": "String", "declarator": "XML_11_VERSION = \"1.1\"", "var_name": "XML_11_VERSION"}, {"original_string": "protected ModificationFactory factory;", "modifier": "protected", "type": "ModificationFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "protected String replacement;", "modifier": "protected", "type": "String", "declarator": "replacement", "var_name": "replacement"}, {"original_string": "protected Matcher matcher;", "modifier": "protected", "type": "Matcher", "declarator": "matcher", "var_name": "matcher"}, {"original_string": "protected boolean dollarZero;", "modifier": "protected", "type": "boolean", "declarator": "dollarZero", "var_name": "dollarZero"}], "methods": [{"identifier": "InvalidXmlCharacterModifier", "parameters": "(String replacement, String xmlVersion)", "modifiers": "public", "return": "", "signature": " InvalidXmlCharacterModifier(String replacement, String xmlVersion)", "full_signature": "public  InvalidXmlCharacterModifier(String replacement, String xmlVersion)", "class_method_signature": "InvalidXmlCharacterModifier.InvalidXmlCharacterModifier(String replacement, String xmlVersion)", "testcase": false, "constructor": true}, {"identifier": "InvalidXmlCharacterModifier", "parameters": "(int newNumberOfChars, String replacement, String xmlVersion, boolean dollarZero)", "modifiers": "public", "return": "", "signature": " InvalidXmlCharacterModifier(int newNumberOfChars, String replacement, String xmlVersion, boolean dollarZero)", "full_signature": "public  InvalidXmlCharacterModifier(int newNumberOfChars, String replacement, String xmlVersion, boolean dollarZero)", "class_method_signature": "InvalidXmlCharacterModifier.InvalidXmlCharacterModifier(int newNumberOfChars, String replacement, String xmlVersion, boolean dollarZero)", "testcase": false, "constructor": true}, {"identifier": "getInvalidXmlCharacterRegex_Xml10", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getInvalidXmlCharacterRegex_Xml10()", "full_signature": "protected String getInvalidXmlCharacterRegex_Xml10()", "class_method_signature": "InvalidXmlCharacterModifier.getInvalidXmlCharacterRegex_Xml10()", "testcase": false, "constructor": false}, {"identifier": "getInvalidXmlCharacterRegex_Xml11", "parameters": "()", "modifiers": "protected", "return": "String", "signature": "String getInvalidXmlCharacterRegex_Xml11()", "full_signature": "protected String getInvalidXmlCharacterRegex_Xml11()", "class_method_signature": "InvalidXmlCharacterModifier.getInvalidXmlCharacterRegex_Xml11()", "testcase": false, "constructor": false}, {"identifier": "modify", "parameters": "(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            boolean endOfStreamHit)", "modifiers": "@Override public", "return": "AfterModification", "signature": "AfterModification modify(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            boolean endOfStreamHit)", "full_signature": "@Override public AfterModification modify(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            boolean endOfStreamHit)", "class_method_signature": "InvalidXmlCharacterModifier.modify(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            boolean endOfStreamHit)", "testcase": false, "constructor": false}, {"identifier": "onMatch", "parameters": "(StringBuilder characterBuffer)", "modifiers": "protected", "return": "int", "signature": "int onMatch(StringBuilder characterBuffer)", "full_signature": "protected int onMatch(StringBuilder characterBuffer)", "class_method_signature": "InvalidXmlCharacterModifier.onMatch(StringBuilder characterBuffer)", "testcase": false, "constructor": false}, {"identifier": "replacement", "parameters": "(StringBuilder characterBuffer)", "modifiers": "protected", "return": "String", "signature": "String replacement(StringBuilder characterBuffer)", "full_signature": "protected String replacement(StringBuilder characterBuffer)", "class_method_signature": "InvalidXmlCharacterModifier.replacement(StringBuilder characterBuffer)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "InvalidXmlCharacterModifier.toString()", "testcase": false, "constructor": false}], "file": "streamflyer-core/src/main/java/com/github/rwitzel/streamflyer/xml/InvalidXmlCharacterModifier.java"}, "focal_method": {"identifier": "modify", "parameters": "(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            boolean endOfStreamHit)", "modifiers": "@Override public", "return": "AfterModification", "body": "@Override\n    public AfterModification modify(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            boolean endOfStreamHit) {\n\n        matcher.reset(characterBuffer);\n        matcher.region(firstModifiableCharacterInBuffer, characterBuffer.length());\n\n        // String newCharacterBuffer = matcher.replaceAll(replacement);\n        // characterBuffer.setLength(0);\n        // characterBuffer.append(newCharacterBuffer);\n\n        int start = firstModifiableCharacterInBuffer;\n        while (matcher.find(start)) {\n            start = onMatch(characterBuffer);\n        }\n\n        return factory.skipEntireBuffer(characterBuffer, firstModifiableCharacterInBuffer, endOfStreamHit);\n    }", "signature": "AfterModification modify(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            boolean endOfStreamHit)", "full_signature": "@Override public AfterModification modify(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            boolean endOfStreamHit)", "class_method_signature": "InvalidXmlCharacterModifier.modify(StringBuilder characterBuffer, int firstModifiableCharacterInBuffer,\n            boolean endOfStreamHit)", "testcase": false, "constructor": false, "invocations": ["reset", "region", "length", "find", "onMatch", "skipEntireBuffer"]}, "repository": {"repo_id": 32796510, "url": "https://github.com/rwitzel/streamflyer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 26, "size": 2880, "license": "licensed"}}