{"test_class": {"identifier": "SingleThreadedActorsTest", "superclass": "extends ActorsContract<SingleThreadedActors>", "interfaces": "", "fields": [{"original_string": "private final List<SingleThreadedActors> createdActors = new ArrayList<>();", "modifier": "private final", "type": "List<SingleThreadedActors>", "declarator": "createdActors = new ArrayList<>()", "var_name": "createdActors"}], "file": "jumi-actors/src/test/java/fi/jumi/actors/SingleThreadedActorsTest.java"}, "test_case": {"identifier": "the_asynchronous_executor_is_hooked_into_the_same_MessageListener_as_the_actors_use", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void the_asynchronous_executor_is_hooked_into_the_same_MessageListener_as_the_actors_use() {\n        Executor listenedExecutor = mock(Executor.class, \"listenedExecutor\");\n        MessageListener messageListener = mock(MessageListener.class);\n        stub(messageListener.getListenedExecutor(Matchers.<Executor>any())).toReturn(listenedExecutor);\n\n        SingleThreadedActors actors = new SingleThreadedActors(defaultEventizerProvider, defaultFailureHandler, messageListener);\n        Executor asynchronousExecutor = actors.getExecutor();\n\n        assertThat(asynchronousExecutor, is(listenedExecutor));\n    }", "signature": "void the_asynchronous_executor_is_hooked_into_the_same_MessageListener_as_the_actors_use()", "full_signature": "@Test public void the_asynchronous_executor_is_hooked_into_the_same_MessageListener_as_the_actors_use()", "class_method_signature": "SingleThreadedActorsTest.the_asynchronous_executor_is_hooked_into_the_same_MessageListener_as_the_actors_use()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "toReturn", "stub", "getListenedExecutor", "any", "getExecutor", "assertThat", "is"]}, "focal_class": {"identifier": "SingleThreadedActors", "superclass": "extends Actors", "interfaces": "", "fields": [{"original_string": "private final List<MessageProcessor> actorThreads = new CopyOnWriteArrayList<>();", "modifier": "private final", "type": "List<MessageProcessor>", "declarator": "actorThreads = new CopyOnWriteArrayList<>()", "var_name": "actorThreads"}, {"original_string": "private final MessageListener messageListener;", "modifier": "private final", "type": "MessageListener", "declarator": "messageListener", "var_name": "messageListener"}], "methods": [{"identifier": "SingleThreadedActors", "parameters": "(EventizerProvider eventizerProvider, FailureHandler failureHandler, MessageListener messageListener)", "modifiers": "public", "return": "", "signature": " SingleThreadedActors(EventizerProvider eventizerProvider, FailureHandler failureHandler, MessageListener messageListener)", "full_signature": "public  SingleThreadedActors(EventizerProvider eventizerProvider, FailureHandler failureHandler, MessageListener messageListener)", "class_method_signature": "SingleThreadedActors.SingleThreadedActors(EventizerProvider eventizerProvider, FailureHandler failureHandler, MessageListener messageListener)", "testcase": false, "constructor": true}, {"identifier": "startActorThread", "parameters": "(MessageProcessor actorThread)", "modifiers": "@Override", "return": "void", "signature": "void startActorThread(MessageProcessor actorThread)", "full_signature": "@Override void startActorThread(MessageProcessor actorThread)", "class_method_signature": "SingleThreadedActors.startActorThread(MessageProcessor actorThread)", "testcase": false, "constructor": false}, {"identifier": "processEventsUntilIdle", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void processEventsUntilIdle()", "full_signature": "public void processEventsUntilIdle()", "class_method_signature": "SingleThreadedActors.processEventsUntilIdle()", "testcase": false, "constructor": false}, {"identifier": "getExecutor", "parameters": "()", "modifiers": "public", "return": "Executor", "signature": "Executor getExecutor()", "full_signature": "public Executor getExecutor()", "class_method_signature": "SingleThreadedActors.getExecutor()", "testcase": false, "constructor": false}], "file": "jumi-actors/src/main/java/fi/jumi/actors/SingleThreadedActors.java"}, "focal_method": {"identifier": "getExecutor", "parameters": "()", "modifiers": "public", "return": "Executor", "body": "public Executor getExecutor() {\n        return messageListener.getListenedExecutor(new AsynchronousExecutor());\n    }", "signature": "Executor getExecutor()", "full_signature": "public Executor getExecutor()", "class_method_signature": "SingleThreadedActors.getExecutor()", "testcase": false, "constructor": false, "invocations": ["getListenedExecutor"]}, "repository": {"repo_id": 6426667, "url": "https://github.com/luontola/jumi-actors", "language": "Java", "is_fork": false, "fork_count": 15, "stargazer_count": 78, "size": 2989, "license": "licensed"}}