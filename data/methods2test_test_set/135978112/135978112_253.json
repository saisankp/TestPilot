{"test_class": {"identifier": "KafkaProducerTest", "superclass": "", "interfaces": "", "fields": [], "file": "clients/src/test/java/org/apache/kafka/clients/producer/KafkaProducerTest.java"}, "test_case": {"identifier": "testSerializerClose", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSerializerClose() throws Exception {\n        Map<String, Object> configs = new HashMap<>();\n        configs.put(ProducerConfig.CLIENT_ID_CONFIG, \"testConstructorClose\");\n        configs.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9999\");\n        configs.put(ProducerConfig.METRIC_REPORTER_CLASSES_CONFIG, MockMetricsReporter.class.getName());\n        configs.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, CommonClientConfigs.DEFAULT_SECURITY_PROTOCOL);\n        final int oldInitCount = MockSerializer.INIT_COUNT.get();\n        final int oldCloseCount = MockSerializer.CLOSE_COUNT.get();\n\n        KafkaProducer<byte[], byte[]> producer = new KafkaProducer<byte[], byte[]>(\n                configs, new MockSerializer(), new MockSerializer());\n        Assert.assertEquals(oldInitCount + 2, MockSerializer.INIT_COUNT.get());\n        Assert.assertEquals(oldCloseCount, MockSerializer.CLOSE_COUNT.get());\n\n        producer.close();\n        Assert.assertEquals(oldInitCount + 2, MockSerializer.INIT_COUNT.get());\n        Assert.assertEquals(oldCloseCount + 2, MockSerializer.CLOSE_COUNT.get());\n    }", "signature": "void testSerializerClose()", "full_signature": "@Test public void testSerializerClose()", "class_method_signature": "KafkaProducerTest.testSerializerClose()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "getName", "put", "get", "get", "assertEquals", "get", "assertEquals", "get", "close", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "KafkaProducer", "superclass": "", "interfaces": "implements Producer<K, V>", "fields": [{"original_string": "private static final Logger log = LoggerFactory.getLogger(KafkaProducer.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(KafkaProducer.class)", "var_name": "log"}, {"original_string": "private static final AtomicInteger PRODUCER_CLIENT_ID_SEQUENCE = new AtomicInteger(1);", "modifier": "private static final", "type": "AtomicInteger", "declarator": "PRODUCER_CLIENT_ID_SEQUENCE = new AtomicInteger(1)", "var_name": "PRODUCER_CLIENT_ID_SEQUENCE"}, {"original_string": "private static final String JMX_PREFIX = \"kafka.producer\";", "modifier": "private static final", "type": "String", "declarator": "JMX_PREFIX = \"kafka.producer\"", "var_name": "JMX_PREFIX"}, {"original_string": "private String clientId;", "modifier": "private", "type": "String", "declarator": "clientId", "var_name": "clientId"}, {"original_string": "private final Partitioner partitioner;", "modifier": "private final", "type": "Partitioner", "declarator": "partitioner", "var_name": "partitioner"}, {"original_string": "private final int maxRequestSize;", "modifier": "private final", "type": "int", "declarator": "maxRequestSize", "var_name": "maxRequestSize"}, {"original_string": "private final long totalMemorySize;", "modifier": "private final", "type": "long", "declarator": "totalMemorySize", "var_name": "totalMemorySize"}, {"original_string": "private final Metadata metadata;", "modifier": "private final", "type": "Metadata", "declarator": "metadata", "var_name": "metadata"}, {"original_string": "private final RecordAccumulator accumulator;", "modifier": "private final", "type": "RecordAccumulator", "declarator": "accumulator", "var_name": "accumulator"}, {"original_string": "private final Sender sender;", "modifier": "private final", "type": "Sender", "declarator": "sender", "var_name": "sender"}, {"original_string": "private final Metrics metrics;", "modifier": "private final", "type": "Metrics", "declarator": "metrics", "var_name": "metrics"}, {"original_string": "private final Thread ioThread;", "modifier": "private final", "type": "Thread", "declarator": "ioThread", "var_name": "ioThread"}, {"original_string": "private final CompressionType compressionType;", "modifier": "private final", "type": "CompressionType", "declarator": "compressionType", "var_name": "compressionType"}, {"original_string": "private final Sensor errors;", "modifier": "private final", "type": "Sensor", "declarator": "errors", "var_name": "errors"}, {"original_string": "private final Time time;", "modifier": "private final", "type": "Time", "declarator": "time", "var_name": "time"}, {"original_string": "private final Serializer<K> keySerializer;", "modifier": "private final", "type": "Serializer<K>", "declarator": "keySerializer", "var_name": "keySerializer"}, {"original_string": "private final Serializer<V> valueSerializer;", "modifier": "private final", "type": "Serializer<V>", "declarator": "valueSerializer", "var_name": "valueSerializer"}, {"original_string": "private final ProducerConfig producerConfig;", "modifier": "private final", "type": "ProducerConfig", "declarator": "producerConfig", "var_name": "producerConfig"}, {"original_string": "private final long maxBlockTimeMs;", "modifier": "private final", "type": "long", "declarator": "maxBlockTimeMs", "var_name": "maxBlockTimeMs"}, {"original_string": "private final int requestTimeoutMs;", "modifier": "private final", "type": "int", "declarator": "requestTimeoutMs", "var_name": "requestTimeoutMs"}, {"original_string": "private final ProducerInterceptors<K, V> interceptors;", "modifier": "private final", "type": "ProducerInterceptors<K, V>", "declarator": "interceptors", "var_name": "interceptors"}], "methods": [{"identifier": "KafkaProducer", "parameters": "(Map<String, Object> configs)", "modifiers": "public", "return": "", "signature": " KafkaProducer(Map<String, Object> configs)", "full_signature": "public  KafkaProducer(Map<String, Object> configs)", "class_method_signature": "KafkaProducer.KafkaProducer(Map<String, Object> configs)", "testcase": false, "constructor": true}, {"identifier": "KafkaProducer", "parameters": "(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer)", "modifiers": "public", "return": "", "signature": " KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer)", "full_signature": "public  KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer)", "class_method_signature": "KafkaProducer.KafkaProducer(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer)", "testcase": false, "constructor": true}, {"identifier": "KafkaProducer", "parameters": "(Properties properties)", "modifiers": "public", "return": "", "signature": " KafkaProducer(Properties properties)", "full_signature": "public  KafkaProducer(Properties properties)", "class_method_signature": "KafkaProducer.KafkaProducer(Properties properties)", "testcase": false, "constructor": true}, {"identifier": "KafkaProducer", "parameters": "(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer)", "modifiers": "public", "return": "", "signature": " KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer)", "full_signature": "public  KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer)", "class_method_signature": "KafkaProducer.KafkaProducer(Properties properties, Serializer<K> keySerializer, Serializer<V> valueSerializer)", "testcase": false, "constructor": true}, {"identifier": "KafkaProducer", "parameters": "(ProducerConfig config, Serializer<K> keySerializer, Serializer<V> valueSerializer)", "modifiers": "@SuppressWarnings({ \"unchecked\", \"deprecation\" }) private", "return": "", "signature": " KafkaProducer(ProducerConfig config, Serializer<K> keySerializer, Serializer<V> valueSerializer)", "full_signature": "@SuppressWarnings({ \"unchecked\", \"deprecation\" }) private  KafkaProducer(ProducerConfig config, Serializer<K> keySerializer, Serializer<V> valueSerializer)", "class_method_signature": "KafkaProducer.KafkaProducer(ProducerConfig config, Serializer<K> keySerializer, Serializer<V> valueSerializer)", "testcase": false, "constructor": true}, {"identifier": "parseAcks", "parameters": "(String acksString)", "modifiers": "private static", "return": "int", "signature": "int parseAcks(String acksString)", "full_signature": "private static int parseAcks(String acksString)", "class_method_signature": "KafkaProducer.parseAcks(String acksString)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(ProducerRecord<K, V> record)", "modifiers": "@Override public", "return": "Future<RecordMetadata>", "signature": "Future<RecordMetadata> send(ProducerRecord<K, V> record)", "full_signature": "@Override public Future<RecordMetadata> send(ProducerRecord<K, V> record)", "class_method_signature": "KafkaProducer.send(ProducerRecord<K, V> record)", "testcase": false, "constructor": false}, {"identifier": "send", "parameters": "(ProducerRecord<K, V> record, Callback callback)", "modifiers": "@Override public", "return": "Future<RecordMetadata>", "signature": "Future<RecordMetadata> send(ProducerRecord<K, V> record, Callback callback)", "full_signature": "@Override public Future<RecordMetadata> send(ProducerRecord<K, V> record, Callback callback)", "class_method_signature": "KafkaProducer.send(ProducerRecord<K, V> record, Callback callback)", "testcase": false, "constructor": false}, {"identifier": "doSend", "parameters": "(ProducerRecord<K, V> record, Callback callback)", "modifiers": "private", "return": "Future<RecordMetadata>", "signature": "Future<RecordMetadata> doSend(ProducerRecord<K, V> record, Callback callback)", "full_signature": "private Future<RecordMetadata> doSend(ProducerRecord<K, V> record, Callback callback)", "class_method_signature": "KafkaProducer.doSend(ProducerRecord<K, V> record, Callback callback)", "testcase": false, "constructor": false}, {"identifier": "waitOnMetadata", "parameters": "(String topic, long maxWaitMs)", "modifiers": "private", "return": "long", "signature": "long waitOnMetadata(String topic, long maxWaitMs)", "full_signature": "private long waitOnMetadata(String topic, long maxWaitMs)", "class_method_signature": "KafkaProducer.waitOnMetadata(String topic, long maxWaitMs)", "testcase": false, "constructor": false}, {"identifier": "ensureValidRecordSize", "parameters": "(int size)", "modifiers": "private", "return": "void", "signature": "void ensureValidRecordSize(int size)", "full_signature": "private void ensureValidRecordSize(int size)", "class_method_signature": "KafkaProducer.ensureValidRecordSize(int size)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flush()", "full_signature": "@Override public void flush()", "class_method_signature": "KafkaProducer.flush()", "testcase": false, "constructor": false}, {"identifier": "partitionsFor", "parameters": "(String topic)", "modifiers": "@Override public", "return": "List<PartitionInfo>", "signature": "List<PartitionInfo> partitionsFor(String topic)", "full_signature": "@Override public List<PartitionInfo> partitionsFor(String topic)", "class_method_signature": "KafkaProducer.partitionsFor(String topic)", "testcase": false, "constructor": false}, {"identifier": "metrics", "parameters": "()", "modifiers": "@Override public", "return": "Map<MetricName, ? extends Metric>", "signature": "Map<MetricName, ? extends Metric> metrics()", "full_signature": "@Override public Map<MetricName, ? extends Metric> metrics()", "class_method_signature": "KafkaProducer.metrics()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "KafkaProducer.close()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(long timeout, TimeUnit timeUnit)", "modifiers": "@Override public", "return": "void", "signature": "void close(long timeout, TimeUnit timeUnit)", "full_signature": "@Override public void close(long timeout, TimeUnit timeUnit)", "class_method_signature": "KafkaProducer.close(long timeout, TimeUnit timeUnit)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "(long timeout, TimeUnit timeUnit, boolean swallowException)", "modifiers": "private", "return": "void", "signature": "void close(long timeout, TimeUnit timeUnit, boolean swallowException)", "full_signature": "private void close(long timeout, TimeUnit timeUnit, boolean swallowException)", "class_method_signature": "KafkaProducer.close(long timeout, TimeUnit timeUnit, boolean swallowException)", "testcase": false, "constructor": false}, {"identifier": "partition", "parameters": "(ProducerRecord<K, V> record, byte[] serializedKey, byte[] serializedValue, Cluster cluster)", "modifiers": "private", "return": "int", "signature": "int partition(ProducerRecord<K, V> record, byte[] serializedKey, byte[] serializedValue, Cluster cluster)", "full_signature": "private int partition(ProducerRecord<K, V> record, byte[] serializedKey, byte[] serializedValue, Cluster cluster)", "class_method_signature": "KafkaProducer.partition(ProducerRecord<K, V> record, byte[] serializedKey, byte[] serializedValue, Cluster cluster)", "testcase": false, "constructor": false}], "file": "clients/src/main/java/org/apache/kafka/clients/producer/KafkaProducer.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void close() {\n        close(Long.MAX_VALUE, TimeUnit.MILLISECONDS);\n    }", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "KafkaProducer.close()", "testcase": false, "constructor": false, "invocations": ["close"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}