{"test_class": {"identifier": "AbbreviationsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static SmilesParser smipar = new SmilesParser(SilentChemObjectBuilder.getInstance());", "modifier": "private static", "type": "SmilesParser", "declarator": "smipar = new SmilesParser(SilentChemObjectBuilder.getInstance())", "var_name": "smipar"}], "file": "app/depict/src/test/java/org/openscience/cdk/depict/AbbreviationsTest.java"}, "test_case": {"identifier": "loadFromFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void loadFromFile() throws Exception {\n        Abbreviations factory = new Abbreviations();\n        assertThat(factory.loadFromFile(\"obabel_superatoms.smi\"), is(27));\n        assertThat(factory.loadFromFile(\"/org/openscience/cdk/depict/obabel_superatoms.smi\"), is(27));\n    }", "signature": "void loadFromFile()", "full_signature": "@Test public void loadFromFile()", "class_method_signature": "AbbreviationsTest.loadFromFile()", "testcase": true, "constructor": false, "invocations": ["assertThat", "loadFromFile", "is", "assertThat", "loadFromFile", "is"]}, "focal_class": {"identifier": "Abbreviations", "superclass": "", "interfaces": "implements Iterable<String>", "fields": [{"original_string": "private static final int MAX_FRAG = 50;", "modifier": "private static final", "type": "int", "declarator": "MAX_FRAG = 50", "var_name": "MAX_FRAG"}, {"original_string": "private static final String INTERPUNCT = \"\u00b7\";", "modifier": "private static final", "type": "String", "declarator": "INTERPUNCT = \"\u00b7\";", "var_name": "INTERPUNCT"}, {"original_string": "private final Map<String, String> connectedAbbreviations    = new LinkedHashMap<>();", "modifier": "private final", "type": "Map<String, String>", "declarator": "connectedAbbreviations    = new LinkedHashMap<>()", "var_name": "connectedAbbreviations"}, {"original_string": "private final Map<String, String> disconnectedAbbreviations = new LinkedHashMap<>();", "modifier": "private final", "type": "Map<String, String>", "declarator": "disconnectedAbbreviations = new LinkedHashMap<>()", "var_name": "disconnectedAbbreviations"}, {"original_string": "private final Set<String>         labels                    = new LinkedHashSet<>();", "modifier": "private final", "type": "Set<String>", "declarator": "labels                    = new LinkedHashSet<>()", "var_name": "labels"}, {"original_string": "private final Set<String>         disabled                  = new HashSet<>();", "modifier": "private final", "type": "Set<String>", "declarator": "disabled                  = new HashSet<>()", "var_name": "disabled"}, {"original_string": "private final SmilesGenerator     usmigen                   = SmilesGenerator.unique();", "modifier": "private final", "type": "SmilesGenerator", "declarator": "usmigen                   = SmilesGenerator.unique()", "var_name": "usmigen"}, {"original_string": "private final SmilesParser smipar = new SmilesParser(SilentChemObjectBuilder.getInstance());", "modifier": "private final", "type": "SmilesParser", "declarator": "smipar = new SmilesParser(SilentChemObjectBuilder.getInstance())", "var_name": "smipar"}, {"original_string": "private boolean contractOnHetero = true;", "modifier": "private", "type": "boolean", "declarator": "contractOnHetero = true", "var_name": "contractOnHetero"}, {"original_string": "private boolean contractSingleFragments = false;", "modifier": "private", "type": "boolean", "declarator": "contractSingleFragments = false", "var_name": "contractSingleFragments"}, {"original_string": "private static final String CUT_BOND = \"cutbond\";", "modifier": "private static final", "type": "String", "declarator": "CUT_BOND = \"cutbond\"", "var_name": "CUT_BOND"}], "methods": [{"identifier": "Abbreviations", "parameters": "()", "modifiers": "public", "return": "", "signature": " Abbreviations()", "full_signature": "public  Abbreviations()", "class_method_signature": "Abbreviations.Abbreviations()", "testcase": false, "constructor": true}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<String>", "signature": "Iterator<String> iterator()", "full_signature": "@Override public Iterator<String> iterator()", "class_method_signature": "Abbreviations.iterator()", "testcase": false, "constructor": false}, {"identifier": "isEnabled", "parameters": "(final String label)", "modifiers": "public", "return": "boolean", "signature": "boolean isEnabled(final String label)", "full_signature": "public boolean isEnabled(final String label)", "class_method_signature": "Abbreviations.isEnabled(final String label)", "testcase": false, "constructor": false}, {"identifier": "setEnabled", "parameters": "(String label, boolean enabled)", "modifiers": "public", "return": "boolean", "signature": "boolean setEnabled(String label, boolean enabled)", "full_signature": "public boolean setEnabled(String label, boolean enabled)", "class_method_signature": "Abbreviations.setEnabled(String label, boolean enabled)", "testcase": false, "constructor": false}, {"identifier": "setContractOnHetero", "parameters": "(boolean val)", "modifiers": "public", "return": "void", "signature": "void setContractOnHetero(boolean val)", "full_signature": "public void setContractOnHetero(boolean val)", "class_method_signature": "Abbreviations.setContractOnHetero(boolean val)", "testcase": false, "constructor": false}, {"identifier": "setContractToSingleLabel", "parameters": "(boolean val)", "modifiers": "public", "return": "void", "signature": "void setContractToSingleLabel(boolean val)", "full_signature": "public void setContractToSingleLabel(boolean val)", "class_method_signature": "Abbreviations.setContractToSingleLabel(boolean val)", "testcase": false, "constructor": false}, {"identifier": "findCutBonds", "parameters": "(IAtomContainer mol, EdgeToBondMap bmap, int[][] adjlist)", "modifiers": "private static", "return": "Set<IBond>", "signature": "Set<IBond> findCutBonds(IAtomContainer mol, EdgeToBondMap bmap, int[][] adjlist)", "full_signature": "private static Set<IBond> findCutBonds(IAtomContainer mol, EdgeToBondMap bmap, int[][] adjlist)", "class_method_signature": "Abbreviations.findCutBonds(IAtomContainer mol, EdgeToBondMap bmap, int[][] adjlist)", "testcase": false, "constructor": false}, {"identifier": "makeCut", "parameters": "(IBond cut, IAtomContainer mol, Map<IAtom, Integer> idx,\n                                                int[][] adjlist)", "modifiers": "private static", "return": "List<IAtomContainer>", "signature": "List<IAtomContainer> makeCut(IBond cut, IAtomContainer mol, Map<IAtom, Integer> idx,\n                                                int[][] adjlist)", "full_signature": "private static List<IAtomContainer> makeCut(IBond cut, IAtomContainer mol, Map<IAtom, Integer> idx,\n                                                int[][] adjlist)", "class_method_signature": "Abbreviations.makeCut(IBond cut, IAtomContainer mol, Map<IAtom, Integer> idx,\n                                                int[][] adjlist)", "testcase": false, "constructor": false}, {"identifier": "generateFragments", "parameters": "(IAtomContainer mol)", "modifiers": "private static", "return": "List<IAtomContainer>", "signature": "List<IAtomContainer> generateFragments(IAtomContainer mol)", "full_signature": "private static List<IAtomContainer> generateFragments(IAtomContainer mol)", "class_method_signature": "Abbreviations.generateFragments(IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(final IAtomContainer mol)", "modifiers": "public", "return": "List<Sgroup>", "signature": "List<Sgroup> generate(final IAtomContainer mol)", "full_signature": "public List<Sgroup> generate(final IAtomContainer mol)", "class_method_signature": "Abbreviations.generate(final IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "getAbbr", "parameters": "(IAtomContainer part)", "modifiers": "private", "return": "Sgroup", "signature": "Sgroup getAbbr(IAtomContainer part)", "full_signature": "private Sgroup getAbbr(IAtomContainer part)", "class_method_signature": "Abbreviations.getAbbr(IAtomContainer part)", "testcase": false, "constructor": false}, {"identifier": "countUpper", "parameters": "(String str)", "modifiers": "private", "return": "int", "signature": "int countUpper(String str)", "full_signature": "private int countUpper(String str)", "class_method_signature": "Abbreviations.countUpper(String str)", "testcase": false, "constructor": false}, {"identifier": "containsChargeChar", "parameters": "(String str)", "modifiers": "private", "return": "boolean", "signature": "boolean containsChargeChar(String str)", "full_signature": "private boolean containsChargeChar(String str)", "class_method_signature": "Abbreviations.containsChargeChar(String str)", "testcase": false, "constructor": false}, {"identifier": "digitAtEnd", "parameters": "(String str)", "modifiers": "private", "return": "boolean", "signature": "boolean digitAtEnd(String str)", "full_signature": "private boolean digitAtEnd(String str)", "class_method_signature": "Abbreviations.digitAtEnd(String str)", "testcase": false, "constructor": false}, {"identifier": "newSymbol", "parameters": "(int atomnum, int hcount, boolean prefix)", "modifiers": "private", "return": "String", "signature": "String newSymbol(int atomnum, int hcount, boolean prefix)", "full_signature": "private String newSymbol(int atomnum, int hcount, boolean prefix)", "class_method_signature": "Abbreviations.newSymbol(int atomnum, int hcount, boolean prefix)", "testcase": false, "constructor": false}, {"identifier": "appendGroup", "parameters": "(StringBuilder sb, String group, int coef, boolean useParen)", "modifiers": "private", "return": "void", "signature": "void appendGroup(StringBuilder sb, String group, int coef, boolean useParen)", "full_signature": "private void appendGroup(StringBuilder sb, String group, int coef, boolean useParen)", "class_method_signature": "Abbreviations.appendGroup(StringBuilder sb, String group, int coef, boolean useParen)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(final IAtomContainer mol)", "modifiers": "public", "return": "int", "signature": "int apply(final IAtomContainer mol)", "full_signature": "public int apply(final IAtomContainer mol)", "class_method_signature": "Abbreviations.apply(final IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "matchExact", "parameters": "(final IAtomContainer mol, final IAtom atom)", "modifiers": "private", "return": "IQueryAtom", "signature": "IQueryAtom matchExact(final IAtomContainer mol, final IAtom atom)", "full_signature": "private IQueryAtom matchExact(final IAtomContainer mol, final IAtom atom)", "class_method_signature": "Abbreviations.matchExact(final IAtomContainer mol, final IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "matchExact", "parameters": "(IAtomContainer mol)", "modifiers": "private", "return": "IQueryAtomContainer", "signature": "IQueryAtomContainer matchExact(IAtomContainer mol)", "full_signature": "private IQueryAtomContainer matchExact(IAtomContainer mol)", "class_method_signature": "Abbreviations.matchExact(IAtomContainer mol)", "testcase": false, "constructor": false}, {"identifier": "addDisconnectedAbbreviation", "parameters": "(IAtomContainer mol, String label)", "modifiers": "private", "return": "boolean", "signature": "boolean addDisconnectedAbbreviation(IAtomContainer mol, String label)", "full_signature": "private boolean addDisconnectedAbbreviation(IAtomContainer mol, String label)", "class_method_signature": "Abbreviations.addDisconnectedAbbreviation(IAtomContainer mol, String label)", "testcase": false, "constructor": false}, {"identifier": "addConnectedAbbreviation", "parameters": "(IAtomContainer mol, String label)", "modifiers": "private", "return": "boolean", "signature": "boolean addConnectedAbbreviation(IAtomContainer mol, String label)", "full_signature": "private boolean addConnectedAbbreviation(IAtomContainer mol, String label)", "class_method_signature": "Abbreviations.addConnectedAbbreviation(IAtomContainer mol, String label)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(String line)", "modifiers": "public", "return": "boolean", "signature": "boolean add(String line)", "full_signature": "public boolean add(String line)", "class_method_signature": "Abbreviations.add(String line)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(IAtomContainer mol, String label)", "modifiers": "public", "return": "boolean", "signature": "boolean add(IAtomContainer mol, String label)", "full_signature": "public boolean add(IAtomContainer mol, String label)", "class_method_signature": "Abbreviations.add(IAtomContainer mol, String label)", "testcase": false, "constructor": false}, {"identifier": "getSmilesSuffix", "parameters": "(String line)", "modifiers": "private static", "return": "String", "signature": "String getSmilesSuffix(String line)", "full_signature": "private static String getSmilesSuffix(String line)", "class_method_signature": "Abbreviations.getSmilesSuffix(String line)", "testcase": false, "constructor": false}, {"identifier": "getBasicElementSymbol", "parameters": "(IAtom atom)", "modifiers": "private static", "return": "String", "signature": "String getBasicElementSymbol(IAtom atom)", "full_signature": "private static String getBasicElementSymbol(IAtom atom)", "class_method_signature": "Abbreviations.getBasicElementSymbol(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "loadSmiles", "parameters": "(final InputStream in)", "modifiers": "private", "return": "int", "signature": "int loadSmiles(final InputStream in)", "full_signature": "private int loadSmiles(final InputStream in)", "class_method_signature": "Abbreviations.loadSmiles(final InputStream in)", "testcase": false, "constructor": false}, {"identifier": "loadFromFile", "parameters": "(final String path)", "modifiers": "public", "return": "int", "signature": "int loadFromFile(final String path)", "full_signature": "public int loadFromFile(final String path)", "class_method_signature": "Abbreviations.loadFromFile(final String path)", "testcase": false, "constructor": false}], "file": "app/depict/src/main/java/org/openscience/cdk/depict/Abbreviations.java"}, "focal_method": {"identifier": "loadFromFile", "parameters": "(final String path)", "modifiers": "public", "return": "int", "body": "public int loadFromFile(final String path) throws IOException {\n        InputStream in = null;\n        try {\n            in = getClass().getResourceAsStream(path);\n            if (in != null)\n                return loadSmiles(in);\n            File file = new File(path);\n            if (file.exists() && file.canRead())\n                return loadSmiles(new FileInputStream(file));\n        } finally {\n            if (in != null)\n                in.close();\n        }\n        return 0;\n    }", "signature": "int loadFromFile(final String path)", "full_signature": "public int loadFromFile(final String path)", "class_method_signature": "Abbreviations.loadFromFile(final String path)", "testcase": false, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "loadSmiles", "exists", "canRead", "loadSmiles", "close"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}