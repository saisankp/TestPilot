{"test_class": {"identifier": "SoapFaultMappingExceptionResolverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SoapFaultMappingExceptionResolver resolver;", "modifier": "private", "type": "SoapFaultMappingExceptionResolver", "declarator": "resolver", "var_name": "resolver"}], "file": "spring-ws-core/src/test/java/org/springframework/ws/soap/server/endpoint/SoapFaultMappingExceptionResolverTest.java"}, "test_case": {"identifier": "testResolveExceptionClientSoap11", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testResolveExceptionClientSoap11() throws Exception {\n\t\tProperties mappings = new Properties();\n\t\tmappings.setProperty(Exception.class.getName(), \"SERVER, Server error\");\n\t\tmappings.setProperty(RuntimeException.class.getName(), \"CLIENT, Client error\");\n\t\tresolver.setExceptionMappings(mappings);\n\n\t\tMessageFactory messageFactory = MessageFactory.newInstance(SOAPConstants.SOAP_1_1_PROTOCOL);\n\t\tSOAPMessage message = messageFactory.createMessage();\n\t\tSoapMessageFactory factory = new SaajSoapMessageFactory(messageFactory);\n\t\tMessageContext context = new DefaultMessageContext(new SaajSoapMessage(message), factory);\n\n\t\tboolean result = resolver.resolveException(context, null, new IllegalArgumentException(\"bla\"));\n\t\tAssert.assertTrue(\"resolveException returns false\", result);\n\t\tAssert.assertTrue(\"Context has no response\", context.hasResponse());\n\t\tSoapMessage response = (SoapMessage) context.getResponse();\n\t\tAssert.assertTrue(\"Response has no fault\", response.getSoapBody().hasFault());\n\t\tSoap11Fault fault = (Soap11Fault) response.getSoapBody().getFault();\n\t\tAssert.assertEquals(\"Invalid fault code on fault\", SoapVersion.SOAP_11.getClientOrSenderFaultName(),\n\t\t\t\tfault.getFaultCode());\n\t\tAssert.assertEquals(\"Invalid fault string on fault\", \"Client error\", fault.getFaultStringOrReason());\n\t\tAssert.assertNull(\"Detail on fault\", fault.getFaultDetail());\n\t}", "signature": "void testResolveExceptionClientSoap11()", "full_signature": "@Test public void testResolveExceptionClientSoap11()", "class_method_signature": "SoapFaultMappingExceptionResolverTest.testResolveExceptionClientSoap11()", "testcase": true, "constructor": false, "invocations": ["setProperty", "getName", "setProperty", "getName", "setExceptionMappings", "newInstance", "createMessage", "resolveException", "assertTrue", "assertTrue", "hasResponse", "getResponse", "assertTrue", "hasFault", "getSoapBody", "getFault", "getSoapBody", "assertEquals", "getClientOrSenderFaultName", "getFaultCode", "assertEquals", "getFaultStringOrReason", "assertNull", "getFaultDetail"]}, "focal_class": {"identifier": "SoapFaultMappingExceptionResolver", "superclass": "extends AbstractSoapFaultDefinitionExceptionResolver", "interfaces": "", "fields": [{"original_string": "private Map<String, String> exceptionMappings = new LinkedHashMap<String, String>();", "modifier": "private", "type": "Map<String, String>", "declarator": "exceptionMappings = new LinkedHashMap<String, String>()", "var_name": "exceptionMappings"}], "methods": [{"identifier": "setExceptionMappings", "parameters": "(Properties mappings)", "modifiers": "public", "return": "void", "signature": "void setExceptionMappings(Properties mappings)", "full_signature": "public void setExceptionMappings(Properties mappings)", "class_method_signature": "SoapFaultMappingExceptionResolver.setExceptionMappings(Properties mappings)", "testcase": false, "constructor": false}, {"identifier": "getFaultDefinition", "parameters": "(Object endpoint, Exception ex)", "modifiers": "@Override protected", "return": "SoapFaultDefinition", "signature": "SoapFaultDefinition getFaultDefinition(Object endpoint, Exception ex)", "full_signature": "@Override protected SoapFaultDefinition getFaultDefinition(Object endpoint, Exception ex)", "class_method_signature": "SoapFaultMappingExceptionResolver.getFaultDefinition(Object endpoint, Exception ex)", "testcase": false, "constructor": false}, {"identifier": "getDepth", "parameters": "(String exceptionMapping, Exception ex)", "modifiers": "protected", "return": "int", "signature": "int getDepth(String exceptionMapping, Exception ex)", "full_signature": "protected int getDepth(String exceptionMapping, Exception ex)", "class_method_signature": "SoapFaultMappingExceptionResolver.getDepth(String exceptionMapping, Exception ex)", "testcase": false, "constructor": false}, {"identifier": "getDepth", "parameters": "(String exceptionMapping, Class<? extends Exception> exceptionClass, int depth)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "int", "signature": "int getDepth(String exceptionMapping, Class<? extends Exception> exceptionClass, int depth)", "full_signature": "@SuppressWarnings(\"unchecked\") private int getDepth(String exceptionMapping, Class<? extends Exception> exceptionClass, int depth)", "class_method_signature": "SoapFaultMappingExceptionResolver.getDepth(String exceptionMapping, Class<? extends Exception> exceptionClass, int depth)", "testcase": false, "constructor": false}], "file": "spring-ws-core/src/main/java/org/springframework/ws/soap/server/endpoint/SoapFaultMappingExceptionResolver.java"}, "focal_method": {"identifier": "setExceptionMappings", "parameters": "(Properties mappings)", "modifiers": "public", "return": "void", "body": "public void setExceptionMappings(Properties mappings) {\n\t\tfor (Map.Entry<Object, Object> entry : mappings.entrySet()) {\n\t\t\tif (entry.getKey() instanceof String && entry.getValue() instanceof String) {\n\t\t\t\texceptionMappings.put((String) entry.getKey(), (String) entry.getValue());\n\t\t\t}\n\t\t}\n\t}", "signature": "void setExceptionMappings(Properties mappings)", "full_signature": "public void setExceptionMappings(Properties mappings)", "class_method_signature": "SoapFaultMappingExceptionResolver.setExceptionMappings(Properties mappings)", "testcase": false, "constructor": false, "invocations": ["entrySet", "getKey", "getValue", "put", "getKey", "getValue"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}