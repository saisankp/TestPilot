{"test_class": {"identifier": "ExcelChartDefaultTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<?> CATEGORIES = Arrays.asList(\"cat 1\", \"cat 2\", \"cat 3\", \"cat 4\", \"cat 5\");", "modifier": "private static final", "type": "List<?>", "declarator": "CATEGORIES = Arrays.asList(\"cat 1\", \"cat 2\", \"cat 3\", \"cat 4\", \"cat 5\")", "var_name": "CATEGORIES"}, {"original_string": "private static final List<List<? extends Number>> VALUES =\n            Arrays.asList(Arrays.asList(5, 7, 10, 12, 6), Arrays.asList(20, 12, 10, 5, 14));", "modifier": "private static final", "type": "List<List<? extends Number>>", "declarator": "VALUES =\n            Arrays.asList(Arrays.asList(5, 7, 10, 12, 6), Arrays.asList(20, 12, 10, 5, 14))", "var_name": "VALUES"}], "file": "web/src/test/java/org/devgateway/toolkit/web/excelcharts/ExcelChartDefaultTest.java"}, "test_case": {"identifier": "createWorkbook", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void createWorkbook() throws Exception {\n        final ExcelChart excelChart = new ExcelChartDefault(\"line chart\", ChartType.line, CATEGORIES, VALUES);\n        excelChart.configureSeriesTitle(Arrays.asList(\"foo\", \"bar\"));\n        final Workbook workbook = excelChart.createWorkbook();\n        Assert.assertNotNull(workbook);\n\n        final Sheet sheet = workbook.getSheet(ChartType.line.toString());\n        Assert.assertNotNull(sheet);\n\n        final XSSFDrawing drawing = (XSSFDrawing) sheet.getDrawingPatriarch();\n        final List<XSSFChart> charts = drawing.getCharts();\n        Assert.assertEquals(\"number of charts\", 1, charts.size());\n\n        final XSSFChart chart = charts.get(0);\n        Assert.assertEquals(\"chart title\", \"line chart\", chart.getTitleText().getString());\n\n        final CTChart ctChart = chart.getCTChart();\n        Assert.assertEquals(\"We should not have any area chart\", 0, ctChart.getPlotArea().getAreaChartArray().length);\n        Assert.assertEquals(\"Check if we have 1 line chart\", 1, ctChart.getPlotArea().getLineChartArray().length);\n        Assert.assertEquals(\"Check that we have a legend and that it's position is bottom\", STLegendPos.B,\n                ctChart.getLegend().getLegendPos().getVal());\n\n        // check the actual chart data\n        final CTLineChart ctLineChart = ctChart.getPlotArea().getLineChartArray()[0];\n        final CTLineSer[] ctLineSer = ctLineChart.getSerArray();\n        Assert.assertEquals(\"Check number of CTLineSer\", 2, ctLineSer.length);\n        Assert.assertEquals(\"check first series title\", \"foo\", ctLineSer[0].getTx().getV());\n        Assert.assertEquals(\"check second series title\", \"bar\", ctLineSer[1].getTx().getV());\n\n        final CTAxDataSource cat1 = ctLineSer[0].getCat();\n        Assert.assertEquals(\"check first category\", \"cat 1\", cat1.getStrRef().getStrCache().getPtArray()[0].getV());\n        Assert.assertEquals(\"check last category\", \"cat 5\", cat1.getStrRef().getStrCache().getPtArray()[4].getV());\n        final CTAxDataSource cat2 = ctLineSer[1].getCat();\n        Assert.assertEquals(\"check first category\", \"cat 1\", cat2.getStrRef().getStrCache().getPtArray()[0].getV());\n        Assert.assertEquals(\"check last category\", \"cat 5\", cat2.getStrRef().getStrCache().getPtArray()[4].getV());\n\n        final CTNumDataSource val1 = ctLineSer[0].getVal();\n        Assert.assertEquals(\"check first value\", \"5.0\", val1.getNumRef().getNumCache().getPtArray()[0].getV());\n        Assert.assertEquals(\"check last value\", \"6.0\", val1.getNumRef().getNumCache().getPtArray()[4].getV());\n        final CTNumDataSource val2 = ctLineSer[1].getVal();\n        Assert.assertEquals(\"check first value\", \"20.0\", val2.getNumRef().getNumCache().getPtArray()[0].getV());\n        Assert.assertEquals(\"check last value\", \"14.0\", val2.getNumRef().getNumCache().getPtArray()[4].getV());\n\n        final List<? extends XSSFChartAxis> axis = chart.getAxis();\n        Assert.assertEquals(\"number of axis\", 2, axis.size());\n        Assert.assertTrue(\"category axis\", axis.get(0) instanceof XSSFCategoryAxis);\n        Assert.assertTrue(\"value axis\", axis.get(1) instanceof XSSFValueAxis);\n    }", "signature": "void createWorkbook()", "full_signature": "@Test public void createWorkbook()", "class_method_signature": "ExcelChartDefaultTest.createWorkbook()", "testcase": true, "constructor": false, "invocations": ["configureSeriesTitle", "asList", "createWorkbook", "assertNotNull", "getSheet", "toString", "assertNotNull", "getDrawingPatriarch", "getCharts", "assertEquals", "size", "get", "assertEquals", "getString", "getTitleText", "getCTChart", "assertEquals", "getAreaChartArray", "getPlotArea", "assertEquals", "getLineChartArray", "getPlotArea", "assertEquals", "getVal", "getLegendPos", "getLegend", "getLineChartArray", "getPlotArea", "getSerArray", "assertEquals", "assertEquals", "getV", "getTx", "assertEquals", "getV", "getTx", "getCat", "assertEquals", "getV", "getPtArray", "getStrCache", "getStrRef", "assertEquals", "getV", "getPtArray", "getStrCache", "getStrRef", "getCat", "assertEquals", "getV", "getPtArray", "getStrCache", "getStrRef", "assertEquals", "getV", "getPtArray", "getStrCache", "getStrRef", "getVal", "assertEquals", "getV", "getPtArray", "getNumCache", "getNumRef", "assertEquals", "getV", "getPtArray", "getNumCache", "getNumRef", "getVal", "assertEquals", "getV", "getPtArray", "getNumCache", "getNumRef", "assertEquals", "getV", "getPtArray", "getNumCache", "getNumRef", "getAxis", "assertEquals", "size", "assertTrue", "get", "assertTrue", "get"]}, "focal_class": {"identifier": "ExcelChartDefault", "superclass": "", "interfaces": "implements ExcelChart", "fields": [{"original_string": "private final ChartType type;", "modifier": "private final", "type": "ChartType", "declarator": "type", "var_name": "type"}, {"original_string": "private final String title;", "modifier": "private final", "type": "String", "declarator": "title", "var_name": "title"}, {"original_string": "private final List<?> categories;", "modifier": "private final", "type": "List<?>", "declarator": "categories", "var_name": "categories"}, {"original_string": "private final List<List<? extends Number>> values;", "modifier": "private final", "type": "List<List<? extends Number>>", "declarator": "values", "var_name": "values"}, {"original_string": "private final Workbook workbook;", "modifier": "private final", "type": "Workbook", "declarator": "workbook", "var_name": "workbook"}, {"original_string": "private final List<String> seriesTitle;", "modifier": "private final", "type": "List<String>", "declarator": "seriesTitle", "var_name": "seriesTitle"}, {"original_string": "private static final int COLUMNWIDTH = 3500;", "modifier": "private static final", "type": "int", "declarator": "COLUMNWIDTH = 3500", "var_name": "COLUMNWIDTH"}], "methods": [{"identifier": "ExcelChartDefault", "parameters": "(final String title, final ChartType type, final List<?> categories,\n            final List<List<? extends Number>> values)", "modifiers": "public", "return": "", "signature": " ExcelChartDefault(final String title, final ChartType type, final List<?> categories,\n            final List<List<? extends Number>> values)", "full_signature": "public  ExcelChartDefault(final String title, final ChartType type, final List<?> categories,\n            final List<List<? extends Number>> values)", "class_method_signature": "ExcelChartDefault.ExcelChartDefault(final String title, final ChartType type, final List<?> categories,\n            final List<List<? extends Number>> values)", "testcase": false, "constructor": true}, {"identifier": "createWorkbook", "parameters": "()", "modifiers": "@Override public", "return": "Workbook", "signature": "Workbook createWorkbook()", "full_signature": "@Override public Workbook createWorkbook()", "class_method_signature": "ExcelChartDefault.createWorkbook()", "testcase": false, "constructor": false}, {"identifier": "configureSeriesTitle", "parameters": "(final List<String> seriesTitle)", "modifiers": "@Override public", "return": "void", "signature": "void configureSeriesTitle(final List<String> seriesTitle)", "full_signature": "@Override public void configureSeriesTitle(final List<String> seriesTitle)", "class_method_signature": "ExcelChartDefault.configureSeriesTitle(final List<String> seriesTitle)", "testcase": false, "constructor": false}, {"identifier": "addCategories", "parameters": "(final ExcelChartSheet excelChartSheet)", "modifiers": "private", "return": "void", "signature": "void addCategories(final ExcelChartSheet excelChartSheet)", "full_signature": "private void addCategories(final ExcelChartSheet excelChartSheet)", "class_method_signature": "ExcelChartDefault.addCategories(final ExcelChartSheet excelChartSheet)", "testcase": false, "constructor": false}, {"identifier": "addValues", "parameters": "(final ExcelChartSheet excelChartSheet)", "modifiers": "private", "return": "void", "signature": "void addValues(final ExcelChartSheet excelChartSheet)", "full_signature": "private void addValues(final ExcelChartSheet excelChartSheet)", "class_method_signature": "ExcelChartDefault.addValues(final ExcelChartSheet excelChartSheet)", "testcase": false, "constructor": false}], "file": "web/src/main/java/org/devgateway/toolkit/web/excelcharts/ExcelChartDefault.java"}, "focal_method": {"identifier": "createWorkbook", "parameters": "()", "modifiers": "@Override public", "return": "Workbook", "body": "@Override\n    public Workbook createWorkbook() {\n        final ExcelChartSheet excelChartSheet = new ExcelChartSheetDefault(workbook, type.toString());\n        final Chart chart = excelChartSheet.createChartAndLegend();\n\n        addCategories(excelChartSheet);\n        addValues(excelChartSheet);\n\n        final CustomChartDataFactory customChartDataFactory = new CustomChartDataFactoryDefault();\n        final CustomChartData chartData = customChartDataFactory.createChartData(type, title);\n\n        final ChartDataSource<?> categoryDataSource = excelChartSheet.getCategoryChartDataSource();\n        final List<ChartDataSource<Number>> valuesDataSource = excelChartSheet.getValuesChartDataSource();\n        for (int i = 0; i < valuesDataSource.size(); i++) {\n            final ChartDataSource<Number> valueDataSource = valuesDataSource.get(i);\n            if (seriesTitle.isEmpty()) {\n                chartData.addSeries(categoryDataSource, valueDataSource);\n            } else {\n                chartData.addSeries(seriesTitle.get(i), categoryDataSource, valueDataSource);\n            }\n        }\n\n        // we don't have any axis for a pie chart\n        if (type.equals(ChartType.pie)) {\n            chart.plot(chartData);\n        } else {\n            // Use a category axis for the bottom axis.\n            final ChartAxis bottomAxis = chart.getChartAxisFactory().createCategoryAxis(AxisPosition.BOTTOM);\n            final ValueAxis leftAxis = chart.getChartAxisFactory().createValueAxis(AxisPosition.LEFT);\n            leftAxis.setCrosses(AxisCrosses.AUTO_ZERO);\n\n            chart.plot(chartData, bottomAxis, leftAxis);\n        }\n\n        return workbook;\n    }", "signature": "Workbook createWorkbook()", "full_signature": "@Override public Workbook createWorkbook()", "class_method_signature": "ExcelChartDefault.createWorkbook()", "testcase": false, "constructor": false, "invocations": ["toString", "createChartAndLegend", "addCategories", "addValues", "createChartData", "getCategoryChartDataSource", "getValuesChartDataSource", "size", "get", "isEmpty", "addSeries", "addSeries", "get", "equals", "plot", "createCategoryAxis", "getChartAxisFactory", "createValueAxis", "getChartAxisFactory", "setCrosses", "plot"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}