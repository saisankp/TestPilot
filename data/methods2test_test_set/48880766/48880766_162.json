{"test_class": {"identifier": "SqlResultSetReaderTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/tech/tablesaw/io/jdbc/SqlResultSetReaderTest.java"}, "test_case": {"identifier": "invalidPrecision", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void invalidPrecision() {\n    assertEquals(ColumnType.DOUBLE, SqlResultSetReader.getColumnType(Types.NUMERIC, 0, 0));\n  }", "signature": "void invalidPrecision()", "full_signature": "@Test public void invalidPrecision()", "class_method_signature": "SqlResultSetReaderTest.invalidPrecision()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getColumnType"]}, "focal_class": {"identifier": "SqlResultSetReader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<Integer, ColumnType> SQL_TYPE_TO_TABLESAW_TYPE = initializeMap();", "modifier": "private static final", "type": "Map<Integer, ColumnType>", "declarator": "SQL_TYPE_TO_TABLESAW_TYPE = initializeMap()", "var_name": "SQL_TYPE_TO_TABLESAW_TYPE"}], "methods": [{"identifier": "initializeMap", "parameters": "()", "modifiers": "private static", "return": "Map<Integer, ColumnType>", "signature": "Map<Integer, ColumnType> initializeMap()", "full_signature": "private static Map<Integer, ColumnType> initializeMap()", "class_method_signature": "SqlResultSetReader.initializeMap()", "testcase": false, "constructor": false}, {"identifier": "mapJdbcTypeToColumnType", "parameters": "(Integer jdbc, ColumnType columnType)", "modifiers": "public static", "return": "void", "signature": "void mapJdbcTypeToColumnType(Integer jdbc, ColumnType columnType)", "full_signature": "public static void mapJdbcTypeToColumnType(Integer jdbc, ColumnType columnType)", "class_method_signature": "SqlResultSetReader.mapJdbcTypeToColumnType(Integer jdbc, ColumnType columnType)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(ResultSet resultSet)", "modifiers": "public static", "return": "Table", "signature": "Table read(ResultSet resultSet)", "full_signature": "public static Table read(ResultSet resultSet)", "class_method_signature": "SqlResultSetReader.read(ResultSet resultSet)", "testcase": false, "constructor": false}, {"identifier": "appendToColumn", "parameters": "(Column<?> column, ResultSet resultSet, Object value)", "modifiers": "protected static", "return": "void", "signature": "void appendToColumn(Column<?> column, ResultSet resultSet, Object value)", "full_signature": "protected static void appendToColumn(Column<?> column, ResultSet resultSet, Object value)", "class_method_signature": "SqlResultSetReader.appendToColumn(Column<?> column, ResultSet resultSet, Object value)", "testcase": false, "constructor": false}, {"identifier": "getColumnType", "parameters": "(int columnType, int scale, int precision)", "modifiers": "protected static", "return": "ColumnType", "signature": "ColumnType getColumnType(int columnType, int scale, int precision)", "full_signature": "protected static ColumnType getColumnType(int columnType, int scale, int precision)", "class_method_signature": "SqlResultSetReader.getColumnType(int columnType, int scale, int precision)", "testcase": false, "constructor": false}], "file": "core/src/main/java/tech/tablesaw/io/jdbc/SqlResultSetReader.java"}, "focal_method": {"identifier": "getColumnType", "parameters": "(int columnType, int scale, int precision)", "modifiers": "protected static", "return": "ColumnType", "body": "protected static ColumnType getColumnType(int columnType, int scale, int precision) {\n    ColumnType type = SQL_TYPE_TO_TABLESAW_TYPE.get(columnType);\n    // Try to improve on the initial type assigned to 'type' to minimize size/space of type needed.\n    // For all generic numeric columns inspect closer, checking the precision and\n    // scale to more accurately determine the appropriate java type to use.\n    if (columnType == Types.NUMERIC || columnType == Types.DECIMAL) {\n      // When scale is 0 then column is a type of integer\n      if (scale == 0) {\n        /* Mapping to java integer types based on integer precision defined:\n\n        Java type           TypeMinVal              TypeMaxVal          p               MaxIntVal\n        -----------------------------------------------------------------------------------------\n        byte, Byte:         -128                    127                 NUMBER(2)       99\n        short, Short:       -32768                  32767               NUMBER(4)       9_999\n        int, Integer:       -2147483648             2147483647          NUMBER(9)       999_999_999\n        long, Long:         -9223372036854775808    9223372036854775807 NUMBER(18)      999_999_999_999_999_999\n\n        */\n        if (precision > 0) {\n          if (precision <= 4) {\n            // Start with SHORT (since ColumnType.BYTE isn't supported yet)\n            // and find the smallest java integer type that fits\n            type = ColumnType.SHORT;\n          } else if (precision <= 9) {\n            type = ColumnType.INTEGER;\n          } else if (precision <= 18) {\n            type = ColumnType.LONG;\n          }\n        }\n      } else { // s is not zero, so a decimal value is expected. First try float, then double\n        if (scale <= 7) {\n          type = ColumnType.FLOAT;\n        } else if (scale <= 16) {\n          type = ColumnType.DOUBLE;\n        }\n      }\n    }\n    return type;\n  }", "signature": "ColumnType getColumnType(int columnType, int scale, int precision)", "full_signature": "protected static ColumnType getColumnType(int columnType, int scale, int precision)", "class_method_signature": "SqlResultSetReader.getColumnType(int columnType, int scale, int precision)", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 48880766, "url": "https://github.com/jtablesaw/tablesaw", "stars": 2021, "created": "1/1/2016 2:58:28 PM +00:00", "updates": "2020-01-24T23:26:07+00:00", "fork": "False", "license": "licensed"}}