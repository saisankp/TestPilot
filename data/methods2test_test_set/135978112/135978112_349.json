{"test_class": {"identifier": "TopologyBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "streams/src/test/java/org/apache/kafka/streams/processor/TopologyBuilderTest.java"}, "test_case": {"identifier": "testTopicGroups", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTopicGroups() {\n        final TopologyBuilder builder = new TopologyBuilder();\n\n        builder.addSource(\"source-1\", \"topic-1\", \"topic-1x\");\n        builder.addSource(\"source-2\", \"topic-2\");\n        builder.addSource(\"source-3\", \"topic-3\");\n        builder.addSource(\"source-4\", \"topic-4\");\n        builder.addSource(\"source-5\", \"topic-5\");\n\n        builder.addProcessor(\"processor-1\", new MockProcessorSupplier(), \"source-1\");\n\n        builder.addProcessor(\"processor-2\", new MockProcessorSupplier(), \"source-2\", \"processor-1\");\n        builder.copartitionSources(mkList(\"source-1\", \"source-2\"));\n\n        builder.addProcessor(\"processor-3\", new MockProcessorSupplier(), \"source-3\", \"source-4\");\n\n        Map<Integer, TopicsInfo> topicGroups = builder.topicGroups(\"X\");\n\n        Map<Integer, TopicsInfo> expectedTopicGroups = new HashMap<>();\n        expectedTopicGroups.put(0, new TopicsInfo(Collections.<String>emptySet(), mkSet(\"topic-1\", \"topic-1x\", \"topic-2\"), Collections.<String>emptySet(), Collections.<String>emptySet()));\n        expectedTopicGroups.put(1, new TopicsInfo(Collections.<String>emptySet(), mkSet(\"topic-3\", \"topic-4\"), Collections.<String>emptySet(), Collections.<String>emptySet()));\n        expectedTopicGroups.put(2, new TopicsInfo(Collections.<String>emptySet(), mkSet(\"topic-5\"), Collections.<String>emptySet(), Collections.<String>emptySet()));\n\n        assertEquals(3, topicGroups.size());\n        assertEquals(expectedTopicGroups, topicGroups);\n\n        Collection<Set<String>> copartitionGroups = builder.copartitionGroups();\n\n        assertEquals(mkSet(mkSet(\"topic-1\", \"topic-1x\", \"topic-2\")), new HashSet<>(copartitionGroups));\n    }", "signature": "void testTopicGroups()", "full_signature": "@Test public void testTopicGroups()", "class_method_signature": "TopologyBuilderTest.testTopicGroups()", "testcase": true, "constructor": false, "invocations": ["addSource", "addSource", "addSource", "addSource", "addSource", "addProcessor", "addProcessor", "copartitionSources", "mkList", "addProcessor", "topicGroups", "put", "emptySet", "mkSet", "emptySet", "emptySet", "put", "emptySet", "mkSet", "emptySet", "emptySet", "put", "emptySet", "mkSet", "emptySet", "emptySet", "assertEquals", "size", "assertEquals", "copartitionGroups", "assertEquals", "mkSet", "mkSet"]}, "focal_class": {"identifier": "TopologyBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final LinkedHashMap<String, NodeFactory> nodeFactories = new LinkedHashMap<>();", "modifier": "private final", "type": "LinkedHashMap<String, NodeFactory>", "declarator": "nodeFactories = new LinkedHashMap<>()", "var_name": "nodeFactories"}, {"original_string": "private final Map<String, StateStoreFactory> stateFactories = new HashMap<>();", "modifier": "private final", "type": "Map<String, StateStoreFactory>", "declarator": "stateFactories = new HashMap<>()", "var_name": "stateFactories"}, {"original_string": "private final Set<String> sourceTopicNames = new HashSet<>();", "modifier": "private final", "type": "Set<String>", "declarator": "sourceTopicNames = new HashSet<>()", "var_name": "sourceTopicNames"}, {"original_string": "private final Set<String> internalTopicNames = new HashSet<>();", "modifier": "private final", "type": "Set<String>", "declarator": "internalTopicNames = new HashSet<>()", "var_name": "internalTopicNames"}, {"original_string": "private final QuickUnion<String> nodeGrouper = new QuickUnion<>();", "modifier": "private final", "type": "QuickUnion<String>", "declarator": "nodeGrouper = new QuickUnion<>()", "var_name": "nodeGrouper"}, {"original_string": "private final List<Set<String>> copartitionSourceGroups = new ArrayList<>();", "modifier": "private final", "type": "List<Set<String>>", "declarator": "copartitionSourceGroups = new ArrayList<>()", "var_name": "copartitionSourceGroups"}, {"original_string": "private final HashMap<String, String[]> nodeToSourceTopics = new HashMap<>();", "modifier": "private final", "type": "HashMap<String, String[]>", "declarator": "nodeToSourceTopics = new HashMap<>()", "var_name": "nodeToSourceTopics"}, {"original_string": "private final HashMap<String, String> nodeToSinkTopic = new HashMap<>();", "modifier": "private final", "type": "HashMap<String, String>", "declarator": "nodeToSinkTopic = new HashMap<>()", "var_name": "nodeToSinkTopic"}, {"original_string": "private Map<Integer, Set<String>> nodeGroups = null;", "modifier": "private", "type": "Map<Integer, Set<String>>", "declarator": "nodeGroups = null", "var_name": "nodeGroups"}], "methods": [{"identifier": "TopologyBuilder", "parameters": "()", "modifiers": "public", "return": "", "signature": " TopologyBuilder()", "full_signature": "public  TopologyBuilder()", "class_method_signature": "TopologyBuilder.TopologyBuilder()", "testcase": false, "constructor": true}, {"identifier": "addSource", "parameters": "(String name, String... topics)", "modifiers": "public synchronized final", "return": "TopologyBuilder", "signature": "TopologyBuilder addSource(String name, String... topics)", "full_signature": "public synchronized final TopologyBuilder addSource(String name, String... topics)", "class_method_signature": "TopologyBuilder.addSource(String name, String... topics)", "testcase": false, "constructor": false}, {"identifier": "addSource", "parameters": "(String name, Deserializer keyDeserializer, Deserializer valDeserializer, String... topics)", "modifiers": "public synchronized final", "return": "TopologyBuilder", "signature": "TopologyBuilder addSource(String name, Deserializer keyDeserializer, Deserializer valDeserializer, String... topics)", "full_signature": "public synchronized final TopologyBuilder addSource(String name, Deserializer keyDeserializer, Deserializer valDeserializer, String... topics)", "class_method_signature": "TopologyBuilder.addSource(String name, Deserializer keyDeserializer, Deserializer valDeserializer, String... topics)", "testcase": false, "constructor": false}, {"identifier": "addSink", "parameters": "(String name, String topic, String... parentNames)", "modifiers": "public synchronized final", "return": "TopologyBuilder", "signature": "TopologyBuilder addSink(String name, String topic, String... parentNames)", "full_signature": "public synchronized final TopologyBuilder addSink(String name, String topic, String... parentNames)", "class_method_signature": "TopologyBuilder.addSink(String name, String topic, String... parentNames)", "testcase": false, "constructor": false}, {"identifier": "addSink", "parameters": "(String name, String topic, StreamPartitioner partitioner, String... parentNames)", "modifiers": "public synchronized final", "return": "TopologyBuilder", "signature": "TopologyBuilder addSink(String name, String topic, StreamPartitioner partitioner, String... parentNames)", "full_signature": "public synchronized final TopologyBuilder addSink(String name, String topic, StreamPartitioner partitioner, String... parentNames)", "class_method_signature": "TopologyBuilder.addSink(String name, String topic, StreamPartitioner partitioner, String... parentNames)", "testcase": false, "constructor": false}, {"identifier": "addSink", "parameters": "(String name, String topic, Serializer keySerializer, Serializer valSerializer, String... parentNames)", "modifiers": "public synchronized final", "return": "TopologyBuilder", "signature": "TopologyBuilder addSink(String name, String topic, Serializer keySerializer, Serializer valSerializer, String... parentNames)", "full_signature": "public synchronized final TopologyBuilder addSink(String name, String topic, Serializer keySerializer, Serializer valSerializer, String... parentNames)", "class_method_signature": "TopologyBuilder.addSink(String name, String topic, Serializer keySerializer, Serializer valSerializer, String... parentNames)", "testcase": false, "constructor": false}, {"identifier": "addSink", "parameters": "(String name, String topic, Serializer<K> keySerializer, Serializer<V> valSerializer, StreamPartitioner<K, V> partitioner, String... parentNames)", "modifiers": "public synchronized final", "return": "TopologyBuilder", "signature": "TopologyBuilder addSink(String name, String topic, Serializer<K> keySerializer, Serializer<V> valSerializer, StreamPartitioner<K, V> partitioner, String... parentNames)", "full_signature": "public synchronized final TopologyBuilder addSink(String name, String topic, Serializer<K> keySerializer, Serializer<V> valSerializer, StreamPartitioner<K, V> partitioner, String... parentNames)", "class_method_signature": "TopologyBuilder.addSink(String name, String topic, Serializer<K> keySerializer, Serializer<V> valSerializer, StreamPartitioner<K, V> partitioner, String... parentNames)", "testcase": false, "constructor": false}, {"identifier": "addProcessor", "parameters": "(String name, ProcessorSupplier supplier, String... parentNames)", "modifiers": "public synchronized final", "return": "TopologyBuilder", "signature": "TopologyBuilder addProcessor(String name, ProcessorSupplier supplier, String... parentNames)", "full_signature": "public synchronized final TopologyBuilder addProcessor(String name, ProcessorSupplier supplier, String... parentNames)", "class_method_signature": "TopologyBuilder.addProcessor(String name, ProcessorSupplier supplier, String... parentNames)", "testcase": false, "constructor": false}, {"identifier": "addStateStore", "parameters": "(StateStoreSupplier supplier, boolean isInternal, String... processorNames)", "modifiers": "public synchronized final", "return": "TopologyBuilder", "signature": "TopologyBuilder addStateStore(StateStoreSupplier supplier, boolean isInternal, String... processorNames)", "full_signature": "public synchronized final TopologyBuilder addStateStore(StateStoreSupplier supplier, boolean isInternal, String... processorNames)", "class_method_signature": "TopologyBuilder.addStateStore(StateStoreSupplier supplier, boolean isInternal, String... processorNames)", "testcase": false, "constructor": false}, {"identifier": "addStateStore", "parameters": "(StateStoreSupplier supplier, String... processorNames)", "modifiers": "public synchronized final", "return": "TopologyBuilder", "signature": "TopologyBuilder addStateStore(StateStoreSupplier supplier, String... processorNames)", "full_signature": "public synchronized final TopologyBuilder addStateStore(StateStoreSupplier supplier, String... processorNames)", "class_method_signature": "TopologyBuilder.addStateStore(StateStoreSupplier supplier, String... processorNames)", "testcase": false, "constructor": false}, {"identifier": "connectProcessorAndStateStores", "parameters": "(String processorName, String... stateStoreNames)", "modifiers": "public synchronized final", "return": "TopologyBuilder", "signature": "TopologyBuilder connectProcessorAndStateStores(String processorName, String... stateStoreNames)", "full_signature": "public synchronized final TopologyBuilder connectProcessorAndStateStores(String processorName, String... stateStoreNames)", "class_method_signature": "TopologyBuilder.connectProcessorAndStateStores(String processorName, String... stateStoreNames)", "testcase": false, "constructor": false}, {"identifier": "connectProcessors", "parameters": "(String... processorNames)", "modifiers": "public synchronized final", "return": "TopologyBuilder", "signature": "TopologyBuilder connectProcessors(String... processorNames)", "full_signature": "public synchronized final TopologyBuilder connectProcessors(String... processorNames)", "class_method_signature": "TopologyBuilder.connectProcessors(String... processorNames)", "testcase": false, "constructor": false}, {"identifier": "addInternalTopic", "parameters": "(String topicName)", "modifiers": "public synchronized final", "return": "TopologyBuilder", "signature": "TopologyBuilder addInternalTopic(String topicName)", "full_signature": "public synchronized final TopologyBuilder addInternalTopic(String topicName)", "class_method_signature": "TopologyBuilder.addInternalTopic(String topicName)", "testcase": false, "constructor": false}, {"identifier": "connectProcessorAndStateStore", "parameters": "(String processorName, String stateStoreName)", "modifiers": "private", "return": "void", "signature": "void connectProcessorAndStateStore(String processorName, String stateStoreName)", "full_signature": "private void connectProcessorAndStateStore(String processorName, String stateStoreName)", "class_method_signature": "TopologyBuilder.connectProcessorAndStateStore(String processorName, String stateStoreName)", "testcase": false, "constructor": false}, {"identifier": "topicGroups", "parameters": "(String applicationId)", "modifiers": "public synchronized", "return": "Map<Integer, TopicsInfo>", "signature": "Map<Integer, TopicsInfo> topicGroups(String applicationId)", "full_signature": "public synchronized Map<Integer, TopicsInfo> topicGroups(String applicationId)", "class_method_signature": "TopologyBuilder.topicGroups(String applicationId)", "testcase": false, "constructor": false}, {"identifier": "nodeGroups", "parameters": "()", "modifiers": "public synchronized", "return": "Map<Integer, Set<String>>", "signature": "Map<Integer, Set<String>> nodeGroups()", "full_signature": "public synchronized Map<Integer, Set<String>> nodeGroups()", "class_method_signature": "TopologyBuilder.nodeGroups()", "testcase": false, "constructor": false}, {"identifier": "makeNodeGroups", "parameters": "()", "modifiers": "private", "return": "Map<Integer, Set<String>>", "signature": "Map<Integer, Set<String>> makeNodeGroups()", "full_signature": "private Map<Integer, Set<String>> makeNodeGroups()", "class_method_signature": "TopologyBuilder.makeNodeGroups()", "testcase": false, "constructor": false}, {"identifier": "copartitionSources", "parameters": "(Collection<String> sourceNodes)", "modifiers": "public synchronized final", "return": "TopologyBuilder", "signature": "TopologyBuilder copartitionSources(Collection<String> sourceNodes)", "full_signature": "public synchronized final TopologyBuilder copartitionSources(Collection<String> sourceNodes)", "class_method_signature": "TopologyBuilder.copartitionSources(Collection<String> sourceNodes)", "testcase": false, "constructor": false}, {"identifier": "copartitionGroups", "parameters": "()", "modifiers": "public synchronized", "return": "Collection<Set<String>>", "signature": "Collection<Set<String>> copartitionGroups()", "full_signature": "public synchronized Collection<Set<String>> copartitionGroups()", "class_method_signature": "TopologyBuilder.copartitionGroups()", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(String applicationId, Integer topicGroupId)", "modifiers": "public synchronized", "return": "ProcessorTopology", "signature": "ProcessorTopology build(String applicationId, Integer topicGroupId)", "full_signature": "public synchronized ProcessorTopology build(String applicationId, Integer topicGroupId)", "class_method_signature": "TopologyBuilder.build(String applicationId, Integer topicGroupId)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(String applicationId, Set<String> nodeGroup)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "ProcessorTopology", "signature": "ProcessorTopology build(String applicationId, Set<String> nodeGroup)", "full_signature": "@SuppressWarnings(\"unchecked\") private ProcessorTopology build(String applicationId, Set<String> nodeGroup)", "class_method_signature": "TopologyBuilder.build(String applicationId, Set<String> nodeGroup)", "testcase": false, "constructor": false}, {"identifier": "sourceTopics", "parameters": "(String applicationId)", "modifiers": "public synchronized", "return": "Set<String>", "signature": "Set<String> sourceTopics(String applicationId)", "full_signature": "public synchronized Set<String> sourceTopics(String applicationId)", "class_method_signature": "TopologyBuilder.sourceTopics(String applicationId)", "testcase": false, "constructor": false}], "file": "streams/src/main/java/org/apache/kafka/streams/processor/TopologyBuilder.java"}, "focal_method": {"identifier": "topicGroups", "parameters": "(String applicationId)", "modifiers": "public synchronized", "return": "Map<Integer, TopicsInfo>", "body": "public synchronized Map<Integer, TopicsInfo> topicGroups(String applicationId) {\n        Map<Integer, TopicsInfo> topicGroups = new HashMap<>();\n\n        if (nodeGroups == null)\n            nodeGroups = makeNodeGroups();\n\n        for (Map.Entry<Integer, Set<String>> entry : nodeGroups.entrySet()) {\n            Set<String> sinkTopics = new HashSet<>();\n            Set<String> sourceTopics = new HashSet<>();\n            Set<String> internalSourceTopics = new HashSet<>();\n            Set<String> stateChangelogTopics = new HashSet<>();\n            for (String node : entry.getValue()) {\n                // if the node is a source node, add to the source topics\n                String[] topics = nodeToSourceTopics.get(node);\n                if (topics != null) {\n                    // if some of the topics are internal, add them to the internal topics\n                    for (String topic : topics) {\n                        if (this.internalTopicNames.contains(topic)) {\n                            // prefix the internal topic name with the application id\n                            String internalTopic = applicationId + \"-\" + topic;\n                            internalSourceTopics.add(internalTopic);\n                            sourceTopics.add(internalTopic);\n                        } else {\n                            sourceTopics.add(topic);\n                        }\n                    }\n                }\n\n                // if the node is a sink node, add to the sink topics\n                String topic = nodeToSinkTopic.get(node);\n                if (topic != null) {\n                    if (internalTopicNames.contains(topic)) {\n                        // prefix the change log topic name with the application id\n                        sinkTopics.add(applicationId + \"-\" + topic);\n                    } else {\n                        sinkTopics.add(topic);\n                    }\n                }\n\n                // if the node is connected to a state, add to the state topics\n                for (StateStoreFactory stateFactory : stateFactories.values()) {\n                    if (stateFactory.isInternal && stateFactory.users.contains(node)) {\n                        // prefix the change log topic name with the application id\n                        stateChangelogTopics.add(applicationId + \"-\" + stateFactory.supplier.name() + ProcessorStateManager.STATE_CHANGELOG_TOPIC_SUFFIX);\n                    }\n                }\n            }\n            topicGroups.put(entry.getKey(), new TopicsInfo(\n                    Collections.unmodifiableSet(sinkTopics),\n                    Collections.unmodifiableSet(sourceTopics),\n                    Collections.unmodifiableSet(internalSourceTopics),\n                    Collections.unmodifiableSet(stateChangelogTopics)));\n        }\n\n        return Collections.unmodifiableMap(topicGroups);\n    }", "signature": "Map<Integer, TopicsInfo> topicGroups(String applicationId)", "full_signature": "public synchronized Map<Integer, TopicsInfo> topicGroups(String applicationId)", "class_method_signature": "TopologyBuilder.topicGroups(String applicationId)", "testcase": false, "constructor": false, "invocations": ["makeNodeGroups", "entrySet", "getValue", "get", "contains", "add", "add", "add", "get", "contains", "add", "add", "values", "contains", "add", "name", "put", "getKey", "unmodifiableSet", "unmodifiableSet", "unmodifiableSet", "unmodifiableSet", "unmodifiableMap"]}, "repository": {"repo_id": 135978112, "url": "https://github.com/anurnomeru/kafka-0.10.0.1-source-reading", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 7, "size": 2953, "license": "licensed"}}