{"test_class": {"identifier": "DateUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "agent/core/src/test/java/org/jolokia/util/DateUtilTest.java"}, "test_case": {"identifier": "illegalFormat", "parameters": "()", "modifiers": "@Test(expectedExceptions = {IllegalArgumentException.class}) public", "return": "void", "body": "@Test(expectedExceptions = {IllegalArgumentException.class})\n    public void illegalFormat() {\n        DateUtil.fromISO8601(\"Bla\");\n    }", "signature": "void illegalFormat()", "full_signature": "@Test(expectedExceptions = {IllegalArgumentException.class}) public void illegalFormat()", "class_method_signature": "DateUtilTest.illegalFormat()", "testcase": true, "constructor": false, "invocations": ["fromISO8601"]}, "focal_class": {"identifier": "DateUtil", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static DatatypeFactory datatypeFactory;", "modifier": "private static", "type": "DatatypeFactory", "declarator": "datatypeFactory", "var_name": "datatypeFactory"}], "methods": [{"identifier": "DateUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " DateUtil()", "full_signature": "private  DateUtil()", "class_method_signature": "DateUtil.DateUtil()", "testcase": false, "constructor": true}, {"identifier": "fromISO8601", "parameters": "(String pDateString)", "modifiers": "public static", "return": "Date", "signature": "Date fromISO8601(String pDateString)", "full_signature": "public static Date fromISO8601(String pDateString)", "class_method_signature": "DateUtil.fromISO8601(String pDateString)", "testcase": false, "constructor": false}, {"identifier": "toISO8601", "parameters": "(Date pDate)", "modifiers": "public static", "return": "String", "signature": "String toISO8601(Date pDate)", "full_signature": "public static String toISO8601(Date pDate)", "class_method_signature": "DateUtil.toISO8601(Date pDate)", "testcase": false, "constructor": false}, {"identifier": "toISO8601", "parameters": "(Date pDate,TimeZone pTimeZone)", "modifiers": "public static", "return": "String", "signature": "String toISO8601(Date pDate,TimeZone pTimeZone)", "full_signature": "public static String toISO8601(Date pDate,TimeZone pTimeZone)", "class_method_signature": "DateUtil.toISO8601(Date pDate,TimeZone pTimeZone)", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/util/DateUtil.java"}, "focal_method": {"identifier": "fromISO8601", "parameters": "(String pDateString)", "modifiers": "public static", "return": "Date", "body": "public static Date fromISO8601(String pDateString) {\n        if (datatypeFactory != null) {\n            return datatypeFactory.newXMLGregorianCalendar(pDateString.trim()).toGregorianCalendar().getTime();\n        } else {\n            try {\n                // Try on our own, works for most cases\n                String date = pDateString.replaceFirst(\"([+-])(0\\\\d)\\\\:(\\\\d{2})$\", \"$1$2$3\");\n                date = date.replaceFirst(\"Z$\",\"+0000\");\n                SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n                return dateFormat.parse(date);\n            } catch (ParseException e) {\n                throw new IllegalArgumentException(\"Cannot parse date '\" + pDateString + \"': \" +e,e);\n            }\n        }\n    }", "signature": "Date fromISO8601(String pDateString)", "full_signature": "public static Date fromISO8601(String pDateString)", "class_method_signature": "DateUtil.fromISO8601(String pDateString)", "testcase": false, "constructor": false, "invocations": ["getTime", "toGregorianCalendar", "newXMLGregorianCalendar", "trim", "replaceFirst", "replaceFirst", "parse"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}