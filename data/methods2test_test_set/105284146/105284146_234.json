{"test_class": {"identifier": "XMLImporterTest", "superclass": "extends AbstractConverterTest", "interfaces": "", "fields": [{"original_string": "private XMLImporter importer;", "modifier": "private", "type": "XMLImporter", "declarator": "importer", "var_name": "importer"}], "file": "iidm/iidm-xml-converter/src/test/java/com/powsybl/iidm/xml/XMLImporterTest.java"}, "test_case": {"identifier": "copy", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void copy() throws Exception {\n        importer.copy(new FileDataSource(fileSystem.getPath(\"/\"), \"test0\"), new FileDataSource(fileSystem.getPath(\"/\"), \"test0_copy\"));\n        assertTrue(Files.exists(fileSystem.getPath(\"/test0_copy.xiidm\")));\n        assertEquals(Files.readAllLines(fileSystem.getPath(\"/test0.xiidm\"), StandardCharsets.UTF_8),\n                Files.readAllLines(fileSystem.getPath(\"/test0_copy.xiidm\"), StandardCharsets.UTF_8));\n\n        // test copy with id mapping file\n        importer.copy(new FileDataSource(fileSystem.getPath(\"/\"), \"test6\"), new FileDataSource(fileSystem.getPath(\"/\"), \"test6_copy\"));\n        assertTrue(Files.exists(fileSystem.getPath(\"/test6_copy.xiidm\")));\n        assertTrue(Files.exists(fileSystem.getPath(\"/test6_copy_mapping.csv\")));\n        assertEquals(Files.readAllLines(fileSystem.getPath(\"/test6.xiidm\"), StandardCharsets.UTF_8),\n                Files.readAllLines(fileSystem.getPath(\"/test6_copy.xiidm\"), StandardCharsets.UTF_8));\n        assertEquals(Files.readAllLines(fileSystem.getPath(\"/test6_mapping.csv\"), StandardCharsets.UTF_8),\n                Files.readAllLines(fileSystem.getPath(\"/test6_copy_mapping.csv\"), StandardCharsets.UTF_8));\n    }", "signature": "void copy()", "full_signature": "@Test public void copy()", "class_method_signature": "XMLImporterTest.copy()", "testcase": true, "constructor": false, "invocations": ["copy", "getPath", "getPath", "assertTrue", "exists", "getPath", "assertEquals", "readAllLines", "getPath", "readAllLines", "getPath", "copy", "getPath", "getPath", "assertTrue", "exists", "getPath", "assertTrue", "exists", "getPath", "assertEquals", "readAllLines", "getPath", "readAllLines", "getPath", "assertEquals", "readAllLines", "getPath", "readAllLines", "getPath"]}, "focal_class": {"identifier": "XMLImporter", "superclass": "", "interfaces": "implements Importer", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(XMLImporter.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(XMLImporter.class)", "var_name": "LOGGER"}, {"original_string": "private static final String[] EXTENSIONS = {\"xiidm\", \"iidm\", \"xml\", \"iidm.xml\"};", "modifier": "private static final", "type": "String[]", "declarator": "EXTENSIONS = {\"xiidm\", \"iidm\", \"xml\", \"iidm.xml\"}", "var_name": "EXTENSIONS"}, {"original_string": "private static final Supplier<XMLInputFactory> XML_INPUT_FACTORY_SUPPLIER = Suppliers.memoize(XMLInputFactory::newInstance);", "modifier": "private static final", "type": "Supplier<XMLInputFactory>", "declarator": "XML_INPUT_FACTORY_SUPPLIER = Suppliers.memoize(XMLInputFactory::newInstance)", "var_name": "XML_INPUT_FACTORY_SUPPLIER"}, {"original_string": "public static final String THROW_EXCEPTION_IF_EXTENSION_NOT_FOUND = \"iidm.import.xml.throw-exception-if-extension-not-found\";", "modifier": "public static final", "type": "String", "declarator": "THROW_EXCEPTION_IF_EXTENSION_NOT_FOUND = \"iidm.import.xml.throw-exception-if-extension-not-found\"", "var_name": "THROW_EXCEPTION_IF_EXTENSION_NOT_FOUND"}, {"original_string": "public static final String EXTENSIONS_LIST = \"iidm.import.xml.extensions\";", "modifier": "public static final", "type": "String", "declarator": "EXTENSIONS_LIST = \"iidm.import.xml.extensions\"", "var_name": "EXTENSIONS_LIST"}, {"original_string": "private static final Parameter THROW_EXCEPTION_IF_EXTENSION_NOT_FOUND_PARAMETER\n            = new Parameter(THROW_EXCEPTION_IF_EXTENSION_NOT_FOUND, ParameterType.BOOLEAN, \"Throw exception if extension not found\", Boolean.FALSE)\n            .addAdditionalNames(\"throwExceptionIfExtensionNotFound\");", "modifier": "private static final", "type": "Parameter", "declarator": "THROW_EXCEPTION_IF_EXTENSION_NOT_FOUND_PARAMETER\n            = new Parameter(THROW_EXCEPTION_IF_EXTENSION_NOT_FOUND, ParameterType.BOOLEAN, \"Throw exception if extension not found\", Boolean.FALSE)\n            .addAdditionalNames(\"throwExceptionIfExtensionNotFound\")", "var_name": "THROW_EXCEPTION_IF_EXTENSION_NOT_FOUND_PARAMETER"}, {"original_string": "private static final Parameter EXTENSIONS_LIST_PARAMETER\n            = new Parameter(EXTENSIONS_LIST, ParameterType.STRING_LIST, \"The list of extension files \", null);", "modifier": "private static final", "type": "Parameter", "declarator": "EXTENSIONS_LIST_PARAMETER\n            = new Parameter(EXTENSIONS_LIST, ParameterType.STRING_LIST, \"The list of extension files \", null)", "var_name": "EXTENSIONS_LIST_PARAMETER"}, {"original_string": "private final ParameterDefaultValueConfig defaultValueConfig;", "modifier": "private final", "type": "ParameterDefaultValueConfig", "declarator": "defaultValueConfig", "var_name": "defaultValueConfig"}, {"original_string": "static final String SUFFIX_MAPPING = \"_mapping\";", "modifier": "static final", "type": "String", "declarator": "SUFFIX_MAPPING = \"_mapping\"", "var_name": "SUFFIX_MAPPING"}], "methods": [{"identifier": "XMLImporter", "parameters": "()", "modifiers": "public", "return": "", "signature": " XMLImporter()", "full_signature": "public  XMLImporter()", "class_method_signature": "XMLImporter.XMLImporter()", "testcase": false, "constructor": true}, {"identifier": "XMLImporter", "parameters": "(PlatformConfig platformConfig)", "modifiers": "public", "return": "", "signature": " XMLImporter(PlatformConfig platformConfig)", "full_signature": "public  XMLImporter(PlatformConfig platformConfig)", "class_method_signature": "XMLImporter.XMLImporter(PlatformConfig platformConfig)", "testcase": false, "constructor": true}, {"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getFormat()", "full_signature": "@Override public String getFormat()", "class_method_signature": "XMLImporter.getFormat()", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "List<Parameter>", "signature": "List<Parameter> getParameters()", "full_signature": "@Override public List<Parameter> getParameters()", "class_method_signature": "XMLImporter.getParameters()", "testcase": false, "constructor": false}, {"identifier": "getComment", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getComment()", "full_signature": "@Override public String getComment()", "class_method_signature": "XMLImporter.getComment()", "testcase": false, "constructor": false}, {"identifier": "findExtension", "parameters": "(ReadOnlyDataSource dataSource)", "modifiers": "private", "return": "String", "signature": "String findExtension(ReadOnlyDataSource dataSource)", "full_signature": "private String findExtension(ReadOnlyDataSource dataSource)", "class_method_signature": "XMLImporter.findExtension(ReadOnlyDataSource dataSource)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(ReadOnlyDataSource dataSource)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean exists(ReadOnlyDataSource dataSource)", "full_signature": "@Override public boolean exists(ReadOnlyDataSource dataSource)", "class_method_signature": "XMLImporter.exists(ReadOnlyDataSource dataSource)", "testcase": false, "constructor": false}, {"identifier": "exists", "parameters": "(ReadOnlyDataSource dataSource, String ext)", "modifiers": "private", "return": "boolean", "signature": "boolean exists(ReadOnlyDataSource dataSource, String ext)", "full_signature": "private boolean exists(ReadOnlyDataSource dataSource, String ext)", "class_method_signature": "XMLImporter.exists(ReadOnlyDataSource dataSource, String ext)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "modifiers": "@Override public", "return": "void", "signature": "void copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "full_signature": "@Override public void copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "class_method_signature": "XMLImporter.copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "testcase": false, "constructor": false}, {"identifier": "importData", "parameters": "(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "modifiers": "@Override public", "return": "Network", "signature": "Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "full_signature": "@Override public Network importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "class_method_signature": "XMLImporter.importData(ReadOnlyDataSource dataSource, NetworkFactory networkFactory, Properties parameters)", "testcase": false, "constructor": false}, {"identifier": "createImportOptions", "parameters": "(Properties parameters)", "modifiers": "private", "return": "ImportOptions", "signature": "ImportOptions createImportOptions(Properties parameters)", "full_signature": "private ImportOptions createImportOptions(Properties parameters)", "class_method_signature": "XMLImporter.createImportOptions(Properties parameters)", "testcase": false, "constructor": false}], "file": "iidm/iidm-xml-converter/src/main/java/com/powsybl/iidm/xml/XMLImporter.java"}, "focal_method": {"identifier": "copy", "parameters": "(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource) {\n        try {\n            String ext = findExtension(fromDataSource);\n            if (!exists(fromDataSource, ext)) {\n                throw new PowsyblException(\"From data source is not importable\");\n            }\n            // copy iidm file\n            try (InputStream is = fromDataSource.newInputStream(null, ext);\n                 OutputStream os = toDataSource.newOutputStream(null, ext, false)) {\n                ByteStreams.copy(is, os);\n            }\n            // and also anonymization file if exists\n            if (fromDataSource.exists(SUFFIX_MAPPING, \"csv\")) {\n                try (InputStream is = fromDataSource.newInputStream(SUFFIX_MAPPING, \"csv\");\n                     OutputStream os = toDataSource.newOutputStream(SUFFIX_MAPPING, \"csv\", false)) {\n                    ByteStreams.copy(is, os);\n                }\n            }\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }", "signature": "void copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "full_signature": "@Override public void copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "class_method_signature": "XMLImporter.copy(ReadOnlyDataSource fromDataSource, DataSource toDataSource)", "testcase": false, "constructor": false, "invocations": ["findExtension", "exists", "newInputStream", "newOutputStream", "copy", "exists", "newInputStream", "newOutputStream", "copy"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}