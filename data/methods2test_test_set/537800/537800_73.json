{"test_class": {"identifier": "InstrumentedAppenderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String METRIC_NAME_PREFIX = \"ch.qos.logback.core.Appender\";", "modifier": "public static final", "type": "String", "declarator": "METRIC_NAME_PREFIX = \"ch.qos.logback.core.Appender\"", "var_name": "METRIC_NAME_PREFIX"}, {"original_string": "private final MetricRegistry registry = new MetricRegistry();", "modifier": "private final", "type": "MetricRegistry", "declarator": "registry = new MetricRegistry()", "var_name": "registry"}, {"original_string": "private final InstrumentedAppender appender = new InstrumentedAppender(registry);", "modifier": "private final", "type": "InstrumentedAppender", "declarator": "appender = new InstrumentedAppender(registry)", "var_name": "appender"}, {"original_string": "private final ILoggingEvent event = mock(ILoggingEvent.class);", "modifier": "private final", "type": "ILoggingEvent", "declarator": "event = mock(ILoggingEvent.class)", "var_name": "event"}], "file": "metrics-logback/src/test/java/com/codahale/metrics/logback/InstrumentedAppenderTest.java"}, "test_case": {"identifier": "usesDefaultRegistry", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void usesDefaultRegistry() {\n        SharedMetricRegistries.add(InstrumentedAppender.DEFAULT_REGISTRY, registry);\n        final InstrumentedAppender shared = new InstrumentedAppender();\n        shared.start();\n        when(event.getLevel()).thenReturn(Level.INFO);\n        shared.doAppend(event);\n\n        assertThat(SharedMetricRegistries.names()).contains(InstrumentedAppender.DEFAULT_REGISTRY);\n        assertThat(registry.meter(METRIC_NAME_PREFIX + \".info\").getCount())\n                .isEqualTo(1);\n    }", "signature": "void usesDefaultRegistry()", "full_signature": "@Test public void usesDefaultRegistry()", "class_method_signature": "InstrumentedAppenderTest.usesDefaultRegistry()", "testcase": true, "constructor": false, "invocations": ["add", "start", "thenReturn", "when", "getLevel", "doAppend", "contains", "assertThat", "names", "isEqualTo", "assertThat", "getCount", "meter"]}, "focal_class": {"identifier": "InstrumentedAppender", "superclass": "extends UnsynchronizedAppenderBase<ILoggingEvent>", "interfaces": "", "fields": [{"original_string": "private final MetricRegistry registry;", "modifier": "private final", "type": "MetricRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "public static final String DEFAULT_REGISTRY = \"logback-metrics\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_REGISTRY = \"logback-metrics\"", "var_name": "DEFAULT_REGISTRY"}, {"original_string": "public static final String REGISTRY_PROPERTY_NAME = \"metrics.logback.registry\";", "modifier": "public static final", "type": "String", "declarator": "REGISTRY_PROPERTY_NAME = \"metrics.logback.registry\"", "var_name": "REGISTRY_PROPERTY_NAME"}, {"original_string": "private Meter all;", "modifier": "private", "type": "Meter", "declarator": "all", "var_name": "all"}, {"original_string": "private Meter trace;", "modifier": "private", "type": "Meter", "declarator": "trace", "var_name": "trace"}, {"original_string": "private Meter debug;", "modifier": "private", "type": "Meter", "declarator": "debug", "var_name": "debug"}, {"original_string": "private Meter info;", "modifier": "private", "type": "Meter", "declarator": "info", "var_name": "info"}, {"original_string": "private Meter warn;", "modifier": "private", "type": "Meter", "declarator": "warn", "var_name": "warn"}, {"original_string": "private Meter error;", "modifier": "private", "type": "Meter", "declarator": "error", "var_name": "error"}], "methods": [{"identifier": "InstrumentedAppender", "parameters": "()", "modifiers": "public", "return": "", "signature": " InstrumentedAppender()", "full_signature": "public  InstrumentedAppender()", "class_method_signature": "InstrumentedAppender.InstrumentedAppender()", "testcase": false, "constructor": true}, {"identifier": "InstrumentedAppender", "parameters": "(String registryName)", "modifiers": "public", "return": "", "signature": " InstrumentedAppender(String registryName)", "full_signature": "public  InstrumentedAppender(String registryName)", "class_method_signature": "InstrumentedAppender.InstrumentedAppender(String registryName)", "testcase": false, "constructor": true}, {"identifier": "InstrumentedAppender", "parameters": "(MetricRegistry registry)", "modifiers": "public", "return": "", "signature": " InstrumentedAppender(MetricRegistry registry)", "full_signature": "public  InstrumentedAppender(MetricRegistry registry)", "class_method_signature": "InstrumentedAppender.InstrumentedAppender(MetricRegistry registry)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "InstrumentedAppender.start()", "testcase": false, "constructor": false}, {"identifier": "append", "parameters": "(ILoggingEvent event)", "modifiers": "@Override protected", "return": "void", "signature": "void append(ILoggingEvent event)", "full_signature": "@Override protected void append(ILoggingEvent event)", "class_method_signature": "InstrumentedAppender.append(ILoggingEvent event)", "testcase": false, "constructor": false}], "file": "metrics-logback/src/main/java/com/codahale/metrics/logback/InstrumentedAppender.java"}, "focal_method": {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void start() {\n        this.all = registry.meter(name(getName(), \"all\"));\n        this.trace = registry.meter(name(getName(), \"trace\"));\n        this.debug = registry.meter(name(getName(), \"debug\"));\n        this.info = registry.meter(name(getName(), \"info\"));\n        this.warn = registry.meter(name(getName(), \"warn\"));\n        this.error = registry.meter(name(getName(), \"error\"));\n        super.start();\n    }", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "InstrumentedAppender.start()", "testcase": false, "constructor": false, "invocations": ["meter", "name", "getName", "meter", "name", "getName", "meter", "name", "getName", "meter", "name", "getName", "meter", "name", "getName", "meter", "name", "getName", "start"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}