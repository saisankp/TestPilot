{"test_class": {"identifier": "DateFormatValidatorFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String JAVA_LANG_STRING = \"java.lang.String\";", "modifier": "private static final", "type": "String", "declarator": "JAVA_LANG_STRING = \"java.lang.String\"", "var_name": "JAVA_LANG_STRING"}, {"original_string": "private TypeMirror voidTypeMirror = new TypeMirror() {\n\n        @Override\n        public List<? extends AnnotationMirror> getAnnotationMirrors() {\n            return null;\n        }\n\n        @Override\n        public <A extends Annotation> A getAnnotation(Class<A> annotationType) {\n            return null;\n        }\n\n        @Override\n        public <A extends Annotation> A[] getAnnotationsByType(Class<A> annotationType) {\n            return null;\n        }\n\n        @Override\n        public TypeKind getKind() {\n            return TypeKind.VOID;\n        }\n\n        @Override\n        public <R, P> R accept(TypeVisitor<R, P> v, P p) {\n            return null;\n        }\n    };", "modifier": "private", "type": "TypeMirror", "declarator": "voidTypeMirror = new TypeMirror() {\n\n        @Override\n        public List<? extends AnnotationMirror> getAnnotationMirrors() {\n            return null;\n        }\n\n        @Override\n        public <A extends Annotation> A getAnnotation(Class<A> annotationType) {\n            return null;\n        }\n\n        @Override\n        public <A extends Annotation> A[] getAnnotationsByType(Class<A> annotationType) {\n            return null;\n        }\n\n        @Override\n        public TypeKind getKind() {\n            return TypeKind.VOID;\n        }\n\n        @Override\n        public <R, P> R accept(TypeVisitor<R, P> v, P p) {\n            return null;\n        }\n    }", "var_name": "voidTypeMirror"}], "file": "processor/src/test/java/org/mapstruct/ap/internal/model/common/DateFormatValidatorFactoryTest.java"}, "test_case": {"identifier": "testUnsupportedTypes", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testUnsupportedTypes() {\n        Type sourceType = typeWithFQN( JAVA_LANG_STRING );\n        Type targetType = typeWithFQN( JAVA_LANG_STRING );\n        DateFormatValidator dateFormatValidator = DateFormatValidatorFactory.forTypes( sourceType, targetType );\n        assertThat( dateFormatValidator.validate( \"XXXX\" ).isValid() ).isTrue();\n    }", "signature": "void testUnsupportedTypes()", "full_signature": "@Test public void testUnsupportedTypes()", "class_method_signature": "DateFormatValidatorFactoryTest.testUnsupportedTypes()", "testcase": true, "constructor": false, "invocations": ["typeWithFQN", "typeWithFQN", "forTypes", "isTrue", "assertThat", "isValid", "validate"]}, "focal_class": {"identifier": "DateFormatValidatorFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String JAVA_UTIL_DATE = \"java.util.Date\";", "modifier": "private static final", "type": "String", "declarator": "JAVA_UTIL_DATE = \"java.util.Date\"", "var_name": "JAVA_UTIL_DATE"}, {"original_string": "private static final String JAVA_TIME_FORMAT_DATE_TIME_FORMATTER = \"java.time.format.DateTimeFormatter\";", "modifier": "private static final", "type": "String", "declarator": "JAVA_TIME_FORMAT_DATE_TIME_FORMATTER = \"java.time.format.DateTimeFormatter\"", "var_name": "JAVA_TIME_FORMAT_DATE_TIME_FORMATTER"}, {"original_string": "private static final String OF_PATTERN = \"ofPattern\";", "modifier": "private static final", "type": "String", "declarator": "OF_PATTERN = \"ofPattern\"", "var_name": "OF_PATTERN"}, {"original_string": "private static final String ORG_JODA_TIME_FORMAT_DATE_TIME_FORMAT = \"org.joda.time.format.DateTimeFormat\";", "modifier": "private static final", "type": "String", "declarator": "ORG_JODA_TIME_FORMAT_DATE_TIME_FORMAT = \"org.joda.time.format.DateTimeFormat\"", "var_name": "ORG_JODA_TIME_FORMAT_DATE_TIME_FORMAT"}, {"original_string": "private static final String FOR_PATTERN = \"forPattern\";", "modifier": "private static final", "type": "String", "declarator": "FOR_PATTERN = \"forPattern\"", "var_name": "FOR_PATTERN"}], "methods": [{"identifier": "DateFormatValidatorFactory", "parameters": "()", "modifiers": "private", "return": "", "signature": " DateFormatValidatorFactory()", "full_signature": "private  DateFormatValidatorFactory()", "class_method_signature": "DateFormatValidatorFactory.DateFormatValidatorFactory()", "testcase": false, "constructor": true}, {"identifier": "forTypes", "parameters": "(final Type sourceType, final Type targetType)", "modifiers": "public static", "return": "DateFormatValidator", "signature": "DateFormatValidator forTypes(final Type sourceType, final Type targetType)", "full_signature": "public static DateFormatValidator forTypes(final Type sourceType, final Type targetType)", "class_method_signature": "DateFormatValidatorFactory.forTypes(final Type sourceType, final Type targetType)", "testcase": false, "constructor": false}, {"identifier": "isXmlGregorianCalendarSupposedToBeMapped", "parameters": "(Type sourceType, Type targetType)", "modifiers": "private static", "return": "boolean", "signature": "boolean isXmlGregorianCalendarSupposedToBeMapped(Type sourceType, Type targetType)", "full_signature": "private static boolean isXmlGregorianCalendarSupposedToBeMapped(Type sourceType, Type targetType)", "class_method_signature": "DateFormatValidatorFactory.isXmlGregorianCalendarSupposedToBeMapped(Type sourceType, Type targetType)", "testcase": false, "constructor": false}, {"identifier": "isJodaDateTimeSupposed", "parameters": "(Type sourceType, Type targetType)", "modifiers": "private static", "return": "boolean", "signature": "boolean isJodaDateTimeSupposed(Type sourceType, Type targetType)", "full_signature": "private static boolean isJodaDateTimeSupposed(Type sourceType, Type targetType)", "class_method_signature": "DateFormatValidatorFactory.isJodaDateTimeSupposed(Type sourceType, Type targetType)", "testcase": false, "constructor": false}, {"identifier": "isJava8DateTimeSupposed", "parameters": "(Type sourceType, Type targetType)", "modifiers": "private static", "return": "boolean", "signature": "boolean isJava8DateTimeSupposed(Type sourceType, Type targetType)", "full_signature": "private static boolean isJava8DateTimeSupposed(Type sourceType, Type targetType)", "class_method_signature": "DateFormatValidatorFactory.isJava8DateTimeSupposed(Type sourceType, Type targetType)", "testcase": false, "constructor": false}, {"identifier": "isJavaUtilDateSupposed", "parameters": "(Type sourceType, Type targetType)", "modifiers": "private static", "return": "boolean", "signature": "boolean isJavaUtilDateSupposed(Type sourceType, Type targetType)", "full_signature": "private static boolean isJavaUtilDateSupposed(Type sourceType, Type targetType)", "class_method_signature": "DateFormatValidatorFactory.isJavaUtilDateSupposed(Type sourceType, Type targetType)", "testcase": false, "constructor": false}, {"identifier": "typesEqualsOneOf", "parameters": "(Type sourceType, Type targetType, String... typeNames)", "modifiers": "private static", "return": "boolean", "signature": "boolean typesEqualsOneOf(Type sourceType, Type targetType, String... typeNames)", "full_signature": "private static boolean typesEqualsOneOf(Type sourceType, Type targetType, String... typeNames)", "class_method_signature": "DateFormatValidatorFactory.typesEqualsOneOf(Type sourceType, Type targetType, String... typeNames)", "testcase": false, "constructor": false}, {"identifier": "validDateFormat", "parameters": "(String dateFormat)", "modifiers": "private static", "return": "DateFormatValidationResult", "signature": "DateFormatValidationResult validDateFormat(String dateFormat)", "full_signature": "private static DateFormatValidationResult validDateFormat(String dateFormat)", "class_method_signature": "DateFormatValidatorFactory.validDateFormat(String dateFormat)", "testcase": false, "constructor": false}, {"identifier": "invalidDateFormat", "parameters": "(String dateFormat, Throwable e)", "modifiers": "private static", "return": "DateFormatValidationResult", "signature": "DateFormatValidationResult invalidDateFormat(String dateFormat, Throwable e)", "full_signature": "private static DateFormatValidationResult invalidDateFormat(String dateFormat, Throwable e)", "class_method_signature": "DateFormatValidatorFactory.invalidDateFormat(String dateFormat, Throwable e)", "testcase": false, "constructor": false}, {"identifier": "noJodaOnClassPath", "parameters": "()", "modifiers": "private static", "return": "DateFormatValidationResult", "signature": "DateFormatValidationResult noJodaOnClassPath()", "full_signature": "private static DateFormatValidationResult noJodaOnClassPath()", "class_method_signature": "DateFormatValidatorFactory.noJodaOnClassPath()", "testcase": false, "constructor": false}], "file": "processor/src/main/java/org/mapstruct/ap/internal/model/common/DateFormatValidatorFactory.java"}, "focal_method": {"identifier": "forTypes", "parameters": "(final Type sourceType, final Type targetType)", "modifiers": "public static", "return": "DateFormatValidator", "body": "public static DateFormatValidator forTypes(final Type sourceType, final Type targetType) {\n        DateFormatValidator dateFormatValidator;\n\n        if ( isJavaUtilDateSupposed( sourceType, targetType ) ) {\n            dateFormatValidator = new SimpleDateFormatValidator();\n        }\n        else if ( isXmlGregorianCalendarSupposedToBeMapped( sourceType, targetType ) ) {\n            dateFormatValidator = new SimpleDateFormatValidator();\n        }\n        else if ( isJava8DateTimeSupposed( sourceType, targetType ) ) {\n            dateFormatValidator = new JavaDateTimeDateFormatValidator();\n        }\n        else if ( isJodaDateTimeSupposed( sourceType, targetType ) ) {\n            dateFormatValidator = new JodaTimeDateFormatValidator();\n        }\n        else {\n            dateFormatValidator = new DateFormatValidator() {\n                @Override\n                public DateFormatValidationResult validate(String dateFormat) {\n                    return new DateFormatValidationResult( true, Message.GENERAL_UNSUPPORTED_DATE_FORMAT_CHECK,\n                                                           sourceType, targetType );\n                }\n            };\n        }\n        return dateFormatValidator;\n\n    }", "signature": "DateFormatValidator forTypes(final Type sourceType, final Type targetType)", "full_signature": "public static DateFormatValidator forTypes(final Type sourceType, final Type targetType)", "class_method_signature": "DateFormatValidatorFactory.forTypes(final Type sourceType, final Type targetType)", "testcase": false, "constructor": false, "invocations": ["isJavaUtilDateSupposed", "isXmlGregorianCalendarSupposedToBeMapped", "isJava8DateTimeSupposed", "isJodaDateTimeSupposed"]}, "repository": {"repo_id": 4470435, "url": "https://github.com/mapstruct/mapstruct", "stars": 2319, "created": "5/28/2012 12:42:42 PM +00:00", "updates": "2020-01-27T19:16:09+00:00", "fork": "False", "license": "licensed"}}