{"test_class": {"identifier": "SCTPShellExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private FastMap<String, Management> sctpManagements = null;", "modifier": "private", "type": "FastMap<String, Management>", "declarator": "sctpManagements = null", "var_name": "sctpManagements"}, {"original_string": "private SCTPShellExecutor sctpShellExecutor = null;", "modifier": "private", "type": "SCTPShellExecutor", "declarator": "sctpShellExecutor = null", "var_name": "sctpShellExecutor"}, {"original_string": "private ManagementImpl management1;", "modifier": "private", "type": "ManagementImpl", "declarator": "management1", "var_name": "management1"}, {"original_string": "private ManagementImpl management2;", "modifier": "private", "type": "ManagementImpl", "declarator": "management2", "var_name": "management2"}], "file": "m3ua/impl/src/test/java/org/mobicents/protocols/ss7/m3ua/impl/oam/SCTPShellExecutorTest.java"}, "test_case": {"identifier": "testServerCommands", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testServerCommands() throws Exception {\n        // CREATE\n\n        // Test 0\n        String sctpServerCommand = \"sctp server create TestServer1 127.0.0.1 2905 stackname TestSCTP0\";\n        String result = this.sctpShellExecutor.execute(sctpServerCommand.split(\" \"));\n        assertEquals(result, String.format(M3UAOAMMessages.NO_SCTP_MANAGEMENT_BEAN_FOR_NAME, \"TestSCTP0\"));\n\n        // Test`1\n        sctpServerCommand = \"sctp server create TestServer1 127.0.0.1 2905\";\n        result = this.sctpShellExecutor.execute(sctpServerCommand.split(\" \"));\n        assertEquals(result, String.format(SCTPOAMMessages.ADD_SERVER_SUCCESS, \"TestServer1\", this.management1.getName()));\n        assertEquals(1, this.management1.getServers().size());\n        assertEquals(0, this.management2.getServers().size());\n\n        // Test`2\n        sctpServerCommand = \"sctp server create TestServer2 127.0.0.1 2906 sockettype TCP\";\n        result = this.sctpShellExecutor.execute(sctpServerCommand.split(\" \"));\n        assertEquals(result, String.format(SCTPOAMMessages.ADD_SERVER_SUCCESS, \"TestServer2\", this.management1.getName()));\n        assertEquals(2, this.management1.getServers().size());\n        assertEquals(0, this.management2.getServers().size());\n\n        // Test`3\n        sctpServerCommand = \"sctp server create TestServer3 127.0.0.1 2907 stackname TestSCTP2\";\n        result = this.sctpShellExecutor.execute(sctpServerCommand.split(\" \"));\n        assertEquals(result, String.format(SCTPOAMMessages.ADD_SERVER_SUCCESS, \"TestServer3\", this.management2.getName()));\n        assertEquals(1, this.management2.getServers().size());\n        assertEquals(2, this.management1.getServers().size());\n\n        // Test`4\n        sctpServerCommand = \"sctp server create TestServer4 127.0.0.1 2908 stackname TestSCTP2 sockettype TCP\";\n        result = this.sctpShellExecutor.execute(sctpServerCommand.split(\" \"));\n        assertEquals(result, String.format(SCTPOAMMessages.ADD_SERVER_SUCCESS, \"TestServer4\", this.management2.getName()));\n        assertEquals(2, this.management2.getServers().size());\n        assertEquals(2, this.management1.getServers().size());\n\n        // START\n\n        // Test 5\n        sctpServerCommand = \"sctp server start TestServer4\";\n        result = this.sctpShellExecutor.execute(sctpServerCommand.split(\" \"));\n        assertEquals(result, String.format(SCTPOAMMessages.START_SERVER_SUCCESS, \"TestServer4\", this.management2.getName()));\n        Server server = this.management2.getServers().get(1);\n        assertTrue(server.isStarted());\n\n        // Test 6\n        sctpServerCommand = \"sctp server start TestServer2 stackname TestSCTP1\";\n        result = this.sctpShellExecutor.execute(sctpServerCommand.split(\" \"));\n        assertEquals(result, String.format(SCTPOAMMessages.START_SERVER_SUCCESS, \"TestServer2\", this.management1.getName()));\n        server = this.management2.getServers().get(1);\n        assertTrue(server.isStarted());\n\n        // STOP\n        // Test 7\n        sctpServerCommand = \"sctp server stop TestServer2\";\n        result = this.sctpShellExecutor.execute(sctpServerCommand.split(\" \"));\n        assertEquals(result, String.format(SCTPOAMMessages.STOP_SERVER_SUCCESS, \"TestServer2\", this.management1.getName()));\n        server = this.management1.getServers().get(1);\n        assertFalse(server.isStarted());\n\n        // Test 8\n        sctpServerCommand = \"sctp server stop TestServer4 stackname TestSCTP2\";\n        result = this.sctpShellExecutor.execute(sctpServerCommand.split(\" \"));\n        assertEquals(result, String.format(SCTPOAMMessages.STOP_SERVER_SUCCESS, \"TestServer4\", this.management2.getName()));\n        server = this.management2.getServers().get(1);\n        assertFalse(server.isStarted());\n\n        // SHOW\n\n        // Test 9\n        sctpServerCommand = \"sctp server show\";\n        result = this.sctpShellExecutor.execute(sctpServerCommand.split(\" \"));\n        assertTrue(result.contains(\"TestServer4\") && result.contains(\"TestServer3\"));\n        assertFalse(result.contains(\"TestServer1\") || result.contains(\"TestServer2\"));\n\n        // Test 10\n        sctpServerCommand = \"sctp server show stackname TestSCTP1\";\n        result = this.sctpShellExecutor.execute(sctpServerCommand.split(\" \"));\n        assertTrue(result.contains(\"TestServer1\") && result.contains(\"TestServer2\"));\n        assertFalse(result.contains(\"TestServer3\") || result.contains(\"TestServer4\"));\n\n        // DESTROY\n\n        // Test 11\n        sctpServerCommand = \"sctp server destroy TestServer1\";\n        result = this.sctpShellExecutor.execute(sctpServerCommand.split(\" \"));\n        assertEquals(result, String.format(SCTPOAMMessages.REMOVE_SERVER_SUCCESS, \"TestServer1\", this.management1.getName()));\n        assertEquals(1, this.management1.getServers().size());\n\n        // Test 12\n        sctpServerCommand = \"sctp server destroy TestServer2\";\n        result = this.sctpShellExecutor.execute(sctpServerCommand.split(\" \"));\n        assertEquals(result, String.format(SCTPOAMMessages.REMOVE_SERVER_SUCCESS, \"TestServer2\", this.management1.getName()));\n        assertEquals(0, this.management1.getServers().size());\n\n        // Test 13\n        sctpServerCommand = \"sctp server destroy TestServer3 stackname TestSCTP2\";\n        result = this.sctpShellExecutor.execute(sctpServerCommand.split(\" \"));\n        assertEquals(result, String.format(SCTPOAMMessages.REMOVE_SERVER_SUCCESS, \"TestServer3\", this.management2.getName()));\n        assertEquals(1, this.management2.getServers().size());\n\n        // Test 14\n        sctpServerCommand = \"sctp server destroy TestServer4\";\n        result = this.sctpShellExecutor.execute(sctpServerCommand.split(\" \"));\n        assertEquals(result, String.format(SCTPOAMMessages.REMOVE_SERVER_SUCCESS, \"TestServer4\", this.management2.getName()));\n        assertEquals(0, this.management2.getServers().size());\n\n    }", "signature": "void testServerCommands()", "full_signature": "@Test public void testServerCommands()", "class_method_signature": "SCTPShellExecutorTest.testServerCommands()", "testcase": true, "constructor": false, "invocations": ["execute", "split", "assertEquals", "format", "execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getServers", "assertEquals", "size", "getServers", "execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getServers", "assertEquals", "size", "getServers", "execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getServers", "assertEquals", "size", "getServers", "execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getServers", "assertEquals", "size", "getServers", "execute", "split", "assertEquals", "format", "getName", "get", "getServers", "assertTrue", "isStarted", "execute", "split", "assertEquals", "format", "getName", "get", "getServers", "assertTrue", "isStarted", "execute", "split", "assertEquals", "format", "getName", "get", "getServers", "assertFalse", "isStarted", "execute", "split", "assertEquals", "format", "getName", "get", "getServers", "assertFalse", "isStarted", "execute", "split", "assertTrue", "contains", "contains", "assertFalse", "contains", "contains", "execute", "split", "assertTrue", "contains", "contains", "assertFalse", "contains", "contains", "execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getServers", "execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getServers", "execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getServers", "execute", "split", "assertEquals", "format", "getName", "assertEquals", "size", "getServers"]}, "focal_class": {"identifier": "SCTPShellExecutor", "superclass": "", "interfaces": "implements ShellExecutor", "fields": [{"original_string": "private static final Logger logger = Logger.getLogger(SCTPShellExecutor.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = Logger.getLogger(SCTPShellExecutor.class)", "var_name": "logger"}, {"original_string": "private FastMap<String, Management> sctpManagements = new FastMap<String, Management>();", "modifier": "private", "type": "FastMap<String, Management>", "declarator": "sctpManagements = new FastMap<String, Management>()", "var_name": "sctpManagements"}, {"original_string": "private Management sctpManagement = null;", "modifier": "private", "type": "Management", "declarator": "sctpManagement = null", "var_name": "sctpManagement"}], "methods": [{"identifier": "getSctpManagements", "parameters": "()", "modifiers": "public", "return": "Map<String, Management>", "signature": "Map<String, Management> getSctpManagements()", "full_signature": "public Map<String, Management> getSctpManagements()", "class_method_signature": "SCTPShellExecutor.getSctpManagements()", "testcase": false, "constructor": false}, {"identifier": "setSctpManagements", "parameters": "(Map<String, Management> sctpManagementsTemp)", "modifiers": "public", "return": "void", "signature": "void setSctpManagements(Map<String, Management> sctpManagementsTemp)", "full_signature": "public void setSctpManagements(Map<String, Management> sctpManagementsTemp)", "class_method_signature": "SCTPShellExecutor.setSctpManagements(Map<String, Management> sctpManagementsTemp)", "testcase": false, "constructor": false}, {"identifier": "setDefaultValue", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setDefaultValue()", "full_signature": "private void setDefaultValue()", "class_method_signature": "SCTPShellExecutor.setDefaultValue()", "testcase": false, "constructor": false}, {"identifier": "showServers", "parameters": "(String[] args)", "modifiers": "private", "return": "String", "signature": "String showServers(String[] args)", "full_signature": "private String showServers(String[] args)", "class_method_signature": "SCTPShellExecutor.showServers(String[] args)", "testcase": false, "constructor": false}, {"identifier": "showAssociations", "parameters": "(String[] args)", "modifiers": "private", "return": "String", "signature": "String showAssociations(String[] args)", "full_signature": "private String showAssociations(String[] args)", "class_method_signature": "SCTPShellExecutor.showAssociations(String[] args)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(String[] args)", "modifiers": "@Override public", "return": "String", "signature": "String execute(String[] args)", "full_signature": "@Override public String execute(String[] args)", "class_method_signature": "SCTPShellExecutor.execute(String[] args)", "testcase": false, "constructor": false}, {"identifier": "manageSet", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageSet(String[] options)", "full_signature": "private String manageSet(String[] options)", "class_method_signature": "SCTPShellExecutor.manageSet(String[] options)", "testcase": false, "constructor": false}, {"identifier": "manageGet", "parameters": "(String[] options)", "modifiers": "private", "return": "String", "signature": "String manageGet(String[] options)", "full_signature": "private String manageGet(String[] options)", "class_method_signature": "SCTPShellExecutor.manageGet(String[] options)", "testcase": false, "constructor": false}, {"identifier": "handles", "parameters": "(String command)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean handles(String command)", "full_signature": "@Override public boolean handles(String command)", "class_method_signature": "SCTPShellExecutor.handles(String command)", "testcase": false, "constructor": false}], "file": "m3ua/impl/src/main/java/org/mobicents/protocols/ss7/m3ua/impl/oam/SCTPShellExecutor.java"}, "focal_method": {"identifier": "execute", "parameters": "(String[] args)", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String execute(String[] args) {\n        try {\n            if (this.sctpManagements.size() == 0) {\n                return M3UAOAMMessages.NO_SCTP_MANAGEMENT_BEAN;\n            }\n\n            if (args.length < 2 || args.length > 13) {\n                // any command will have atleast 3 args\n                return M3UAOAMMessages.INVALID_COMMAND;\n            }\n\n            if (args[1] == null) {\n                return M3UAOAMMessages.INVALID_COMMAND;\n            }\n\n            if (args[1].equals(\"server\")) {\n                if (args.length < 3 ){\n                    return M3UAOAMMessages.INVALID_COMMAND;\n                }\n\n                String command = args[2];\n\n                if (command == null) {\n                    return M3UAOAMMessages.INVALID_COMMAND;\n                } else if (command.equals(\"create\")) {\n                    // command is sctp server create <sever-name> <host-ip> <host-port> sockettype <socket-type> stackname\n                    // <stack-name>\n\n                    if (args.length < 6 || args.length > 10) {\n                        return M3UAOAMMessages.INVALID_COMMAND;\n                    }\n\n                    String serverName = args[3];\n                    if (serverName == null) {\n                        return M3UAOAMMessages.INVALID_COMMAND;\n                    }\n\n                    String hostAddress = args[4];\n                    if (hostAddress == null) {\n                        return M3UAOAMMessages.INVALID_COMMAND;\n                    }\n\n                    String[] hostAddresses = hostAddress.split(\",\");\n                    String primaryAddress = hostAddresses[0];\n                    String[] secondaryAddresses = null;\n\n                    if (hostAddresses.length > 1) {\n                        secondaryAddresses = new String[(hostAddresses.length - 1)];\n                        for (int i = 0; i < secondaryAddresses.length; i++) {\n                            secondaryAddresses[i] = hostAddresses[(i + 1)];\n                        }\n                    }\n\n                    int hostPort = Integer.parseInt(args[5]);\n\n                    IpChannelType ipChnnelType = null;\n\n                    String sctpStackName = null;\n\n                    int i = 6;\n                    if (args.length > 6) {\n\n                        while (i < args.length) {\n\n                            if (args[i].equals(\"stackname\")) {\n                                sctpStackName = args[i + 1];\n\n                                Management sctpManagementtmp = this.sctpManagements.get(sctpStackName);\n\n                                if (sctpManagementtmp == null) {\n                                    return String.format(M3UAOAMMessages.NO_SCTP_MANAGEMENT_BEAN_FOR_NAME, sctpStackName);\n                                }\n\n                                this.sctpManagement = sctpManagementtmp;\n                            } else if (args[i].equals(\"sockettype\")) {\n                                ipChnnelType = IpChannelType.getInstance(args[i + 1]);\n                            }\n\n                            i = i + 2;\n\n                        }// while loop\n                    }\n\n                    this.setDefaultValue();\n\n                    if (ipChnnelType == null) {\n                        ipChnnelType = IpChannelType.SCTP;\n                    }\n\n                    this.sctpManagement.addServer(serverName, primaryAddress, hostPort, ipChnnelType, secondaryAddresses);\n\n                    return String.format(SCTPOAMMessages.ADD_SERVER_SUCCESS, serverName, this.sctpManagement.getName());\n\n                } else if (command.equals(\"destroy\")) {\n                    // sctp server destroy <sever-name> stackname <stack-name>\n                    if (args.length < 4) {\n                        return M3UAOAMMessages.INVALID_COMMAND;\n                    }\n\n                    String serverName = args[3];\n                    if (serverName == null) {\n                        return M3UAOAMMessages.INVALID_COMMAND;\n                    }\n\n                    String sctpStackName = null;\n                    if (args.length > 4) {\n                        if (!args[4].equals(\"stackname\")) {\n                            return M3UAOAMMessages.INVALID_COMMAND;\n                        }\n\n                        sctpStackName = args[5];\n                        Management sctpManagementtmp = this.sctpManagements.get(sctpStackName);\n\n                        if (sctpManagementtmp == null) {\n                            return String.format(M3UAOAMMessages.NO_SCTP_MANAGEMENT_BEAN_FOR_NAME, sctpStackName);\n                        }\n\n                        this.sctpManagement = sctpManagementtmp;\n                    } else {\n                        this.setDefaultValue();\n                    }\n\n                    this.sctpManagement.removeServer(serverName);\n                    return String.format(SCTPOAMMessages.REMOVE_SERVER_SUCCESS, serverName, this.sctpManagement.getName());\n\n                } else if (command.equals(\"start\")) {\n                    // sctp server start <sever-name> stackname <stack-name>\n\n                    if (args.length < 4) {\n                        return M3UAOAMMessages.INVALID_COMMAND;\n                    }\n\n                    String serverName = args[3];\n                    if (serverName == null) {\n                        return M3UAOAMMessages.INVALID_COMMAND;\n                    }\n\n                    String sctpStackName = null;\n                    if (args.length > 4) {\n                        if (!args[4].equals(\"stackname\")) {\n                            return M3UAOAMMessages.INVALID_COMMAND;\n                        }\n\n                        sctpStackName = args[5];\n                        Management sctpManagementtmp = this.sctpManagements.get(sctpStackName);\n\n                        if (sctpManagementtmp == null) {\n                            return String.format(M3UAOAMMessages.NO_SCTP_MANAGEMENT_BEAN_FOR_NAME, sctpStackName);\n                        }\n\n                        this.sctpManagement = sctpManagementtmp;\n                    } else {\n                        this.setDefaultValue();\n                    }\n\n                    this.sctpManagement.startServer(serverName);\n                    return String.format(SCTPOAMMessages.START_SERVER_SUCCESS, serverName, this.sctpManagement.getName());\n                } else if (command.equals(\"stop\")) {\n                    // sctp server stop <sever-name> stackname <stack-name>\n\n                    if (args.length < 4) {\n                        return M3UAOAMMessages.INVALID_COMMAND;\n                    }\n\n                    String serverName = args[3];\n                    if (serverName == null) {\n                        return M3UAOAMMessages.INVALID_COMMAND;\n                    }\n\n                    String sctpStackName = null;\n                    if (args.length > 4) {\n                        if (!args[4].equals(\"stackname\")) {\n                            return M3UAOAMMessages.INVALID_COMMAND;\n                        }\n\n                        sctpStackName = args[5];\n                        Management sctpManagementtmp = this.sctpManagements.get(sctpStackName);\n\n                        if (sctpManagementtmp == null) {\n                            return String.format(M3UAOAMMessages.NO_SCTP_MANAGEMENT_BEAN_FOR_NAME, sctpStackName);\n                        }\n\n                        this.sctpManagement = sctpManagementtmp;\n                    } else {\n                        this.setDefaultValue();\n                    }\n\n                    this.sctpManagement.stopServer(serverName);\n                    return String.format(SCTPOAMMessages.STOP_SERVER_SUCCESS, serverName, this.sctpManagement.getName());\n                } else if (command.equals(\"show\")) {\n                    return this.showServers(args);\n                }\n\n                return M3UAOAMMessages.INVALID_COMMAND;\n\n            } else if (args[1].equals(\"association\")) {\n                if (args.length < 3 ){\n                    return M3UAOAMMessages.INVALID_COMMAND;\n                }\n\n                String command = args[2];\n\n                if (command == null) {\n                    return M3UAOAMMessages.INVALID_COMMAND;\n                } else if (command.equals(\"create\")) {\n                    // sctp association create <assoc-name> <CLIENT | SERVER> <server-name> <peerip> <peer-port> <host- ip>\n                    // <host-port> sockettype <socket-type> stackname <stack-name>\n\n                    if (args.length < 8 || args.length > 13) {\n                        return M3UAOAMMessages.INVALID_COMMAND;\n                    }\n\n                    String assocName = args[3];\n                    if (assocName == null) {\n                        return M3UAOAMMessages.INVALID_COMMAND;\n                    }\n\n                    String type = args[4];\n                    if (type == null) {\n                        return M3UAOAMMessages.INVALID_COMMAND;\n                    } else if (type.equals(\"CLIENT\")) {\n                        if (args.length < 9) {\n                            return M3UAOAMMessages.INVALID_COMMAND;\n                        }\n\n                        String peerIp = args[5];\n                        int peerPort = Integer.parseInt(args[6]);\n\n                        String hostIp = args[7];\n\n                        String[] hostAddresses = hostIp.split(\",\");\n                        String primaryAddress = hostAddresses[0];\n                        String[] secondaryAddresses = null;\n\n                        if (hostAddresses.length > 1) {\n                            secondaryAddresses = new String[(hostAddresses.length - 1)];\n                            for (int i = 0; i < secondaryAddresses.length; i++) {\n                                secondaryAddresses[i] = hostAddresses[(i + 1)];\n                            }\n                        }\n\n                        int hostPort = Integer.parseInt(args[8]);\n\n                        IpChannelType ipChnnelType = null;\n\n                        String sctpStackName = null;\n\n                        int i = 9;\n                        if (args.length > 9) {\n\n                            while (i < args.length) {\n\n                                if (args[i].equals(\"stackname\")) {\n                                    sctpStackName = args[i + 1];\n\n                                    Management sctpManagementtmp = this.sctpManagements.get(sctpStackName);\n\n                                    if (sctpManagementtmp == null) {\n                                        return String.format(M3UAOAMMessages.NO_SCTP_MANAGEMENT_BEAN_FOR_NAME, sctpStackName);\n                                    }\n\n                                    this.sctpManagement = sctpManagementtmp;\n                                } else if (args[i].equals(\"sockettype\")) {\n                                    ipChnnelType = IpChannelType.getInstance(args[i + 1]);\n                                }\n\n                                i = i + 2;\n\n                            }// while loop\n                        }\n\n                        this.setDefaultValue();\n\n                        if (ipChnnelType == null) {\n                            ipChnnelType = IpChannelType.SCTP;\n                        }\n\n                        this.sctpManagement.addAssociation(primaryAddress, hostPort, peerIp, peerPort, assocName, ipChnnelType,\n                                secondaryAddresses);\n\n                        return String.format(SCTPOAMMessages.ADD_CLIENT_ASSOCIATION_SUCCESS, assocName,\n                                this.sctpManagement.getName());\n                    } else if (type.equals(\"SERVER\")) {\n                        String serverName = args[5];\n\n                        String peerIp = args[6];\n                        int peerPort = Integer.parseInt(args[7]);\n\n                        IpChannelType ipChnnelType = null;\n\n                        String sctpStackName = null;\n\n                        int i = 8;\n                        if (args.length > 8) {\n\n                            while (i < args.length) {\n\n                                if (args[i].equals(\"stackname\")) {\n                                    sctpStackName = args[i + 1];\n\n                                    Management sctpManagementtmp = this.sctpManagements.get(sctpStackName);\n\n                                    if (sctpManagementtmp == null) {\n                                        return String.format(M3UAOAMMessages.NO_SCTP_MANAGEMENT_BEAN_FOR_NAME, sctpStackName);\n                                    }\n\n                                    this.sctpManagement = sctpManagementtmp;\n                                } else if (args[i].equals(\"sockettype\")) {\n                                    ipChnnelType = IpChannelType.getInstance(args[i + 1]);\n                                }\n\n                                i = i + 2;\n\n                            }// while loop\n                        }\n\n                        if (this.sctpManagement == null) {\n                            this.setDefaultValue();\n                        }\n\n                        if (ipChnnelType == null) {\n                            ipChnnelType = IpChannelType.SCTP;\n                        }\n\n                        this.sctpManagement.addServerAssociation(peerIp, peerPort, serverName, assocName, ipChnnelType);\n                        return String.format(SCTPOAMMessages.ADD_SERVER_ASSOCIATION_SUCCESS, assocName,\n                                this.sctpManagement.getName());\n                    }\n\n                    return M3UAOAMMessages.INVALID_COMMAND;\n\n                } else if (command.equals(\"destroy\")) {\n                    // sctp association destroy <assoc-name> stackname <stack-name>\n\n                    if (args.length < 4) {\n                        return M3UAOAMMessages.INVALID_COMMAND;\n                    }\n\n                    String assocName = args[3];\n                    if (assocName == null) {\n                        return M3UAOAMMessages.INVALID_COMMAND;\n                    }\n\n                    String sctpStackName = null;\n\n                    if (args.length > 4) {\n                        if (!args[4].equals(\"stackname\")) {\n                            return M3UAOAMMessages.INVALID_COMMAND;\n                        }\n\n                        sctpStackName = args[5];\n                        Management sctpManagementtmp = this.sctpManagements.get(sctpStackName);\n\n                        if (sctpManagementtmp == null) {\n                            return String.format(M3UAOAMMessages.NO_SCTP_MANAGEMENT_BEAN_FOR_NAME, sctpStackName);\n                        }\n\n                        this.sctpManagement = sctpManagementtmp;\n                    } else {\n                        this.setDefaultValue();\n                    }\n\n                    this.sctpManagement.removeAssociation(assocName);\n                    return String.format(SCTPOAMMessages.REMOVE_ASSOCIATION_SUCCESS, assocName, this.sctpManagement.getName());\n\n                } else if (command.equals(\"show\")) {\n                    return this.showAssociations(args);\n                }\n\n                return M3UAOAMMessages.INVALID_COMMAND;\n            } else if (args[1].equals(\"set\")) {\n                return this.manageSet(args);\n            } else if (args[1].equals(\"get\")) {\n                return this.manageGet(args);\n            }\n\n            return M3UAOAMMessages.INVALID_COMMAND;\n        } catch (Exception e) {\n            logger.error(String.format(\"Error while executing comand %s\", Arrays.toString(args)), e);\n            return e.toString();\n        } catch (Throwable t) {\n            logger.error(String.format(\"Error while executing comand %s\", Arrays.toString(args)), t);\n            return t.toString();\n        }\n    }", "signature": "String execute(String[] args)", "full_signature": "@Override public String execute(String[] args)", "class_method_signature": "SCTPShellExecutor.execute(String[] args)", "testcase": false, "constructor": false, "invocations": ["size", "equals", "equals", "split", "parseInt", "equals", "get", "format", "equals", "getInstance", "setDefaultValue", "addServer", "format", "getName", "equals", "equals", "get", "format", "setDefaultValue", "removeServer", "format", "getName", "equals", "equals", "get", "format", "setDefaultValue", "startServer", "format", "getName", "equals", "equals", "get", "format", "setDefaultValue", "stopServer", "format", "getName", "equals", "showServers", "equals", "equals", "equals", "parseInt", "split", "parseInt", "equals", "get", "format", "equals", "getInstance", "setDefaultValue", "addAssociation", "format", "getName", "equals", "parseInt", "equals", "get", "format", "equals", "getInstance", "setDefaultValue", "addServerAssociation", "format", "getName", "equals", "equals", "get", "format", "setDefaultValue", "removeAssociation", "format", "getName", "equals", "showAssociations", "equals", "manageSet", "equals", "manageGet", "error", "format", "toString", "toString", "error", "format", "toString", "toString"]}, "repository": {"repo_id": 53577396, "url": "https://github.com/polarking/jss7-attack-simulator", "language": "Java", "is_fork": false, "fork_count": 27, "stargazer_count": 29, "size": 28339, "license": "licensed"}}