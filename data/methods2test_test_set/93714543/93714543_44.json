{"test_class": {"identifier": "TypesTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "List<? extends CharSequence> listSubtype;", "modifier": "", "type": "List<? extends CharSequence>", "declarator": "listSubtype", "var_name": "listSubtype"}, {"original_string": "List<? super String> listSupertype;", "modifier": "", "type": "List<? super String>", "declarator": "listSupertype", "var_name": "listSupertype"}, {"original_string": "Map<String, Integer> mapOfStringInteger;", "modifier": "", "type": "Map<String, Integer>", "declarator": "mapOfStringInteger", "var_name": "mapOfStringInteger"}, {"original_string": "Map<String, Integer>[] arrayOfMapOfStringInteger;", "modifier": "", "type": "Map<String, Integer>[]", "declarator": "arrayOfMapOfStringInteger", "var_name": "arrayOfMapOfStringInteger"}, {"original_string": "ArrayList<Map<String, Integer>> arrayListOfMapOfStringInteger;", "modifier": "", "type": "ArrayList<Map<String, Integer>>", "declarator": "arrayListOfMapOfStringInteger", "var_name": "arrayListOfMapOfStringInteger"}], "file": "rocketchat-common/src/test/java/com/rocketchat/common/utils/TypesTest.java"}, "test_case": {"identifier": "parameterizedTypeWithRequiredOwnerMissing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parameterizedTypeWithRequiredOwnerMissing() throws Exception {\n        try {\n            Types.newParameterizedType(A.class, B.class);\n            fail();\n        } catch (IllegalArgumentException expected) {\n            String message = \"unexpected owner type for \" + A.class + \": null\";\n            assertThat(expected.getMessage(), is(equalTo(message)));\n        }\n    }", "signature": "void parameterizedTypeWithRequiredOwnerMissing()", "full_signature": "@Test public void parameterizedTypeWithRequiredOwnerMissing()", "class_method_signature": "TypesTest.parameterizedTypeWithRequiredOwnerMissing()", "testcase": true, "constructor": false, "invocations": ["newParameterizedType", "fail", "assertThat", "getMessage", "is", "equalTo"]}, "focal_class": {"identifier": "Types", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Type[] EMPTY_TYPE_ARRAY = new Type[]{};", "modifier": "static final", "type": "Type[]", "declarator": "EMPTY_TYPE_ARRAY = new Type[]{}", "var_name": "EMPTY_TYPE_ARRAY"}], "methods": [{"identifier": "Types", "parameters": "()", "modifiers": "private", "return": "", "signature": " Types()", "full_signature": "private  Types()", "class_method_signature": "Types.Types()", "testcase": false, "constructor": true}, {"identifier": "newParameterizedType", "parameters": "(Type rawType, Type... typeArguments)", "modifiers": "public static", "return": "ParameterizedType", "signature": "ParameterizedType newParameterizedType(Type rawType, Type... typeArguments)", "full_signature": "public static ParameterizedType newParameterizedType(Type rawType, Type... typeArguments)", "class_method_signature": "Types.newParameterizedType(Type rawType, Type... typeArguments)", "testcase": false, "constructor": false}, {"identifier": "newParameterizedTypeWithOwner", "parameters": "(\n            Type ownerType, Type rawType, Type... typeArguments)", "modifiers": "public static", "return": "ParameterizedType", "signature": "ParameterizedType newParameterizedTypeWithOwner(\n            Type ownerType, Type rawType, Type... typeArguments)", "full_signature": "public static ParameterizedType newParameterizedTypeWithOwner(\n            Type ownerType, Type rawType, Type... typeArguments)", "class_method_signature": "Types.newParameterizedTypeWithOwner(\n            Type ownerType, Type rawType, Type... typeArguments)", "testcase": false, "constructor": false}, {"identifier": "arrayOf", "parameters": "(Type componentType)", "modifiers": "public static", "return": "GenericArrayType", "signature": "GenericArrayType arrayOf(Type componentType)", "full_signature": "public static GenericArrayType arrayOf(Type componentType)", "class_method_signature": "Types.arrayOf(Type componentType)", "testcase": false, "constructor": false}, {"identifier": "subtypeOf", "parameters": "(Type bound)", "modifiers": "public static", "return": "WildcardType", "signature": "WildcardType subtypeOf(Type bound)", "full_signature": "public static WildcardType subtypeOf(Type bound)", "class_method_signature": "Types.subtypeOf(Type bound)", "testcase": false, "constructor": false}, {"identifier": "supertypeOf", "parameters": "(Type bound)", "modifiers": "public static", "return": "WildcardType", "signature": "WildcardType supertypeOf(Type bound)", "full_signature": "public static WildcardType supertypeOf(Type bound)", "class_method_signature": "Types.supertypeOf(Type bound)", "testcase": false, "constructor": false}, {"identifier": "canonicalize", "parameters": "(Type type)", "modifiers": "static", "return": "Type", "signature": "Type canonicalize(Type type)", "full_signature": "static Type canonicalize(Type type)", "class_method_signature": "Types.canonicalize(Type type)", "testcase": false, "constructor": false}, {"identifier": "getRawType", "parameters": "(Type type)", "modifiers": "public static", "return": "Class<?>", "signature": "Class<?> getRawType(Type type)", "full_signature": "public static Class<?> getRawType(Type type)", "class_method_signature": "Types.getRawType(Type type)", "testcase": false, "constructor": false}, {"identifier": "equal", "parameters": "(@Nullable Object a, @Nullable Object b)", "modifiers": "static", "return": "boolean", "signature": "boolean equal(@Nullable Object a, @Nullable Object b)", "full_signature": "static boolean equal(@Nullable Object a, @Nullable Object b)", "class_method_signature": "Types.equal(@Nullable Object a, @Nullable Object b)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(@Nullable Type a, @Nullable Type b)", "modifiers": "public static", "return": "boolean", "signature": "boolean equals(@Nullable Type a, @Nullable Type b)", "full_signature": "public static boolean equals(@Nullable Type a, @Nullable Type b)", "class_method_signature": "Types.equals(@Nullable Type a, @Nullable Type b)", "testcase": false, "constructor": false}, {"identifier": "hashCodeOrZero", "parameters": "(@Nullable Object o)", "modifiers": "static", "return": "int", "signature": "int hashCodeOrZero(@Nullable Object o)", "full_signature": "static int hashCodeOrZero(@Nullable Object o)", "class_method_signature": "Types.hashCodeOrZero(@Nullable Object o)", "testcase": false, "constructor": false}, {"identifier": "typeToString", "parameters": "(Type type)", "modifiers": "static", "return": "String", "signature": "String typeToString(Type type)", "full_signature": "static String typeToString(Type type)", "class_method_signature": "Types.typeToString(Type type)", "testcase": false, "constructor": false}, {"identifier": "getGenericSupertype", "parameters": "(Type context, Class<?> rawType, Class<?> toResolve)", "modifiers": "static", "return": "Type", "signature": "Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve)", "full_signature": "static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve)", "class_method_signature": "Types.getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve)", "testcase": false, "constructor": false}, {"identifier": "getSupertype", "parameters": "(Type context, Class<?> contextRawType, Class<?> supertype)", "modifiers": "static", "return": "Type", "signature": "Type getSupertype(Type context, Class<?> contextRawType, Class<?> supertype)", "full_signature": "static Type getSupertype(Type context, Class<?> contextRawType, Class<?> supertype)", "class_method_signature": "Types.getSupertype(Type context, Class<?> contextRawType, Class<?> supertype)", "testcase": false, "constructor": false}, {"identifier": "getGenericSuperclass", "parameters": "(Type type)", "modifiers": "static", "return": "Type", "signature": "Type getGenericSuperclass(Type type)", "full_signature": "static Type getGenericSuperclass(Type type)", "class_method_signature": "Types.getGenericSuperclass(Type type)", "testcase": false, "constructor": false}, {"identifier": "arrayComponentType", "parameters": "(Type type)", "modifiers": "static", "return": "Type", "signature": "Type arrayComponentType(Type type)", "full_signature": "static Type arrayComponentType(Type type)", "class_method_signature": "Types.arrayComponentType(Type type)", "testcase": false, "constructor": false}, {"identifier": "collectionElementType", "parameters": "(Type context, Class<?> contextRawType)", "modifiers": "public static", "return": "Type", "signature": "Type collectionElementType(Type context, Class<?> contextRawType)", "full_signature": "public static Type collectionElementType(Type context, Class<?> contextRawType)", "class_method_signature": "Types.collectionElementType(Type context, Class<?> contextRawType)", "testcase": false, "constructor": false}, {"identifier": "mapKeyAndValueTypes", "parameters": "(Type context, Class<?> contextRawType)", "modifiers": "static", "return": "Type[]", "signature": "Type[] mapKeyAndValueTypes(Type context, Class<?> contextRawType)", "full_signature": "static Type[] mapKeyAndValueTypes(Type context, Class<?> contextRawType)", "class_method_signature": "Types.mapKeyAndValueTypes(Type context, Class<?> contextRawType)", "testcase": false, "constructor": false}, {"identifier": "resolve", "parameters": "(Type context, Class<?> contextRawType, Type toResolve)", "modifiers": "static", "return": "Type", "signature": "Type resolve(Type context, Class<?> contextRawType, Type toResolve)", "full_signature": "static Type resolve(Type context, Class<?> contextRawType, Type toResolve)", "class_method_signature": "Types.resolve(Type context, Class<?> contextRawType, Type toResolve)", "testcase": false, "constructor": false}, {"identifier": "resolveTypeVariable", "parameters": "(Type context, Class<?> contextRawType, TypeVariable<?> unknown)", "modifiers": "static", "return": "Type", "signature": "Type resolveTypeVariable(Type context, Class<?> contextRawType, TypeVariable<?> unknown)", "full_signature": "static Type resolveTypeVariable(Type context, Class<?> contextRawType, TypeVariable<?> unknown)", "class_method_signature": "Types.resolveTypeVariable(Type context, Class<?> contextRawType, TypeVariable<?> unknown)", "testcase": false, "constructor": false}, {"identifier": "indexOf", "parameters": "(Object[] array, Object toFind)", "modifiers": "private static", "return": "int", "signature": "int indexOf(Object[] array, Object toFind)", "full_signature": "private static int indexOf(Object[] array, Object toFind)", "class_method_signature": "Types.indexOf(Object[] array, Object toFind)", "testcase": false, "constructor": false}, {"identifier": "declaringClassOf", "parameters": "(TypeVariable<?> typeVariable)", "modifiers": "private static @Nullable", "return": "Class<?>", "signature": "Class<?> declaringClassOf(TypeVariable<?> typeVariable)", "full_signature": "private static @Nullable Class<?> declaringClassOf(TypeVariable<?> typeVariable)", "class_method_signature": "Types.declaringClassOf(TypeVariable<?> typeVariable)", "testcase": false, "constructor": false}, {"identifier": "checkNotPrimitive", "parameters": "(Type type)", "modifiers": "static", "return": "void", "signature": "void checkNotPrimitive(Type type)", "full_signature": "static void checkNotPrimitive(Type type)", "class_method_signature": "Types.checkNotPrimitive(Type type)", "testcase": false, "constructor": false}], "file": "rocketchat-common/src/main/java/com/rocketchat/common/utils/Types.java"}, "focal_method": {"identifier": "newParameterizedType", "parameters": "(Type rawType, Type... typeArguments)", "modifiers": "public static", "return": "ParameterizedType", "body": "public static ParameterizedType newParameterizedType(Type rawType, Type... typeArguments) {\n        return new ParameterizedTypeImpl(null, rawType, typeArguments);\n    }", "signature": "ParameterizedType newParameterizedType(Type rawType, Type... typeArguments)", "full_signature": "public static ParameterizedType newParameterizedType(Type rawType, Type... typeArguments)", "class_method_signature": "Types.newParameterizedType(Type rawType, Type... typeArguments)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 93714543, "url": "https://github.com/RocketChat/Rocket.Chat.Java.SDK", "language": "Java", "is_fork": false, "fork_count": 22, "stargazer_count": 26, "size": 2962, "license": "licensed"}}