{"test_class": {"identifier": "SnapshotManagerTest", "superclass": "extends AbstractActorTest", "interfaces": "", "fields": [{"original_string": "@Mock\n    private RaftActorContext mockRaftActorContext;", "modifier": "@Mock\n    private", "type": "RaftActorContext", "declarator": "mockRaftActorContext", "var_name": "mockRaftActorContext"}, {"original_string": "@Mock\n    private ConfigParams mockConfigParams;", "modifier": "@Mock\n    private", "type": "ConfigParams", "declarator": "mockConfigParams", "var_name": "mockConfigParams"}, {"original_string": "@Mock\n    private ReplicatedLog mockReplicatedLog;", "modifier": "@Mock\n    private", "type": "ReplicatedLog", "declarator": "mockReplicatedLog", "var_name": "mockReplicatedLog"}, {"original_string": "@Mock\n    private DataPersistenceProvider mockDataPersistenceProvider;", "modifier": "@Mock\n    private", "type": "DataPersistenceProvider", "declarator": "mockDataPersistenceProvider", "var_name": "mockDataPersistenceProvider"}, {"original_string": "@Mock\n    private RaftActorBehavior mockRaftActorBehavior;", "modifier": "@Mock\n    private", "type": "RaftActorBehavior", "declarator": "mockRaftActorBehavior", "var_name": "mockRaftActorBehavior"}, {"original_string": "@Mock\n    private Consumer<Optional<OutputStream>> mockProcedure;", "modifier": "@Mock\n    private", "type": "Consumer<Optional<OutputStream>>", "declarator": "mockProcedure", "var_name": "mockProcedure"}, {"original_string": "@Mock\n    private ElectionTerm mockElectionTerm;", "modifier": "@Mock\n    private", "type": "ElectionTerm", "declarator": "mockElectionTerm", "var_name": "mockElectionTerm"}, {"original_string": "private SnapshotManager snapshotManager;", "modifier": "private", "type": "SnapshotManager", "declarator": "snapshotManager", "var_name": "snapshotManager"}, {"original_string": "private TestActorFactory factory;", "modifier": "private", "type": "TestActorFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "private ActorRef actorRef;", "modifier": "private", "type": "ActorRef", "declarator": "actorRef", "var_name": "actorRef"}], "file": "opendaylight/md-sal/sal-akka-raft/src/test/java/org/opendaylight/controller/cluster/raft/SnapshotManagerTest.java"}, "test_case": {"identifier": "testTrimLogWhenLastAppliedZero", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTrimLogWhenLastAppliedZero() {\n        doReturn(0L).when(mockRaftActorContext).getLastApplied();\n\n        ReplicatedLogEntry replicatedLogEntry = mock(ReplicatedLogEntry.class);\n        doReturn(true).when(mockReplicatedLog).isPresent(10);\n        doReturn(replicatedLogEntry).when(mockReplicatedLog).get(10);\n        doReturn(5L).when(replicatedLogEntry).getTerm();\n\n        long retIndex = snapshotManager.trimLog(10);\n        assertEquals(\"return index\", -1L, retIndex);\n\n        verify(mockReplicatedLog, never()).snapshotPreCommit(anyLong(), anyLong());\n        verify(mockReplicatedLog, never()).snapshotCommit();\n\n        verify(mockRaftActorBehavior, never()).setReplicatedToAllIndex(anyLong());\n    }", "signature": "void testTrimLogWhenLastAppliedZero()", "full_signature": "@Test public void testTrimLogWhenLastAppliedZero()", "class_method_signature": "SnapshotManagerTest.testTrimLogWhenLastAppliedZero()", "testcase": true, "constructor": false, "invocations": ["getLastApplied", "when", "doReturn", "mock", "isPresent", "when", "doReturn", "get", "when", "doReturn", "getTerm", "when", "doReturn", "trimLog", "assertEquals", "snapshotPreCommit", "verify", "never", "anyLong", "anyLong", "snapshotCommit", "verify", "never", "setReplicatedToAllIndex", "verify", "never", "anyLong"]}, "focal_class": {"identifier": "SnapshotManager", "superclass": "", "interfaces": "implements SnapshotState", "fields": [{"original_string": "@SuppressWarnings(\"checkstyle:MemberName\")\n    private final SnapshotState IDLE = new Idle();", "modifier": "@SuppressWarnings(\"checkstyle:MemberName\")\n    private final", "type": "SnapshotState", "declarator": "IDLE = new Idle()", "var_name": "IDLE"}, {"original_string": "@SuppressWarnings({\"checkstyle:MemberName\", \"checkstyle:AbbreviationAsWordInName\"})\n    private final SnapshotState PERSISTING = new Persisting();", "modifier": "@SuppressWarnings({\"checkstyle:MemberName\", \"checkstyle:AbbreviationAsWordInName\"})\n    private final", "type": "SnapshotState", "declarator": "PERSISTING = new Persisting()", "var_name": "PERSISTING"}, {"original_string": "@SuppressWarnings({\"checkstyle:MemberName\", \"checkstyle:AbbreviationAsWordInName\"})\n    private final SnapshotState CREATING = new Creating();", "modifier": "@SuppressWarnings({\"checkstyle:MemberName\", \"checkstyle:AbbreviationAsWordInName\"})\n    private final", "type": "SnapshotState", "declarator": "CREATING = new Creating()", "var_name": "CREATING"}, {"original_string": "private final Logger log;", "modifier": "private final", "type": "Logger", "declarator": "log", "var_name": "log"}, {"original_string": "private final RaftActorContext context;", "modifier": "private final", "type": "RaftActorContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final LastAppliedTermInformationReader lastAppliedTermInformationReader =\n            new LastAppliedTermInformationReader();", "modifier": "private final", "type": "LastAppliedTermInformationReader", "declarator": "lastAppliedTermInformationReader =\n            new LastAppliedTermInformationReader()", "var_name": "lastAppliedTermInformationReader"}, {"original_string": "private final ReplicatedToAllTermInformationReader replicatedToAllTermInformationReader =\n            new ReplicatedToAllTermInformationReader();", "modifier": "private final", "type": "ReplicatedToAllTermInformationReader", "declarator": "replicatedToAllTermInformationReader =\n            new ReplicatedToAllTermInformationReader()", "var_name": "replicatedToAllTermInformationReader"}, {"original_string": "private SnapshotState currentState = IDLE;", "modifier": "private", "type": "SnapshotState", "declarator": "currentState = IDLE", "var_name": "currentState"}, {"original_string": "private CaptureSnapshot captureSnapshot;", "modifier": "private", "type": "CaptureSnapshot", "declarator": "captureSnapshot", "var_name": "captureSnapshot"}, {"original_string": "private long lastSequenceNumber = -1;", "modifier": "private", "type": "long", "declarator": "lastSequenceNumber = -1", "var_name": "lastSequenceNumber"}, {"original_string": "private Consumer<Optional<OutputStream>> createSnapshotProcedure = null;", "modifier": "private", "type": "Consumer<Optional<OutputStream>>", "declarator": "createSnapshotProcedure = null", "var_name": "createSnapshotProcedure"}, {"original_string": "private ApplySnapshot applySnapshot;", "modifier": "private", "type": "ApplySnapshot", "declarator": "applySnapshot", "var_name": "applySnapshot"}, {"original_string": "private RaftActorSnapshotCohort snapshotCohort = NoopRaftActorSnapshotCohort.INSTANCE;", "modifier": "private", "type": "RaftActorSnapshotCohort", "declarator": "snapshotCohort = NoopRaftActorSnapshotCohort.INSTANCE", "var_name": "snapshotCohort"}], "methods": [{"identifier": "SnapshotManager", "parameters": "(final RaftActorContext context, final Logger logger)", "modifiers": "public", "return": "", "signature": " SnapshotManager(final RaftActorContext context, final Logger logger)", "full_signature": "public  SnapshotManager(final RaftActorContext context, final Logger logger)", "class_method_signature": "SnapshotManager.SnapshotManager(final RaftActorContext context, final Logger logger)", "testcase": false, "constructor": true}, {"identifier": "isApplying", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isApplying()", "full_signature": "public boolean isApplying()", "class_method_signature": "SnapshotManager.isApplying()", "testcase": false, "constructor": false}, {"identifier": "isCapturing", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isCapturing()", "full_signature": "@Override public boolean isCapturing()", "class_method_signature": "SnapshotManager.isCapturing()", "testcase": false, "constructor": false}, {"identifier": "captureToInstall", "parameters": "(final ReplicatedLogEntry lastLogEntry, final long replicatedToAllIndex,\n            final String targetFollower)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean captureToInstall(final ReplicatedLogEntry lastLogEntry, final long replicatedToAllIndex,\n            final String targetFollower)", "full_signature": "@Override public boolean captureToInstall(final ReplicatedLogEntry lastLogEntry, final long replicatedToAllIndex,\n            final String targetFollower)", "class_method_signature": "SnapshotManager.captureToInstall(final ReplicatedLogEntry lastLogEntry, final long replicatedToAllIndex,\n            final String targetFollower)", "testcase": false, "constructor": false}, {"identifier": "capture", "parameters": "(final ReplicatedLogEntry lastLogEntry, final long replicatedToAllIndex)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean capture(final ReplicatedLogEntry lastLogEntry, final long replicatedToAllIndex)", "full_signature": "@Override public boolean capture(final ReplicatedLogEntry lastLogEntry, final long replicatedToAllIndex)", "class_method_signature": "SnapshotManager.capture(final ReplicatedLogEntry lastLogEntry, final long replicatedToAllIndex)", "testcase": false, "constructor": false}, {"identifier": "captureWithForcedTrim", "parameters": "(final ReplicatedLogEntry lastLogEntry, final long replicatedToAllIndex)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean captureWithForcedTrim(final ReplicatedLogEntry lastLogEntry, final long replicatedToAllIndex)", "full_signature": "@Override public boolean captureWithForcedTrim(final ReplicatedLogEntry lastLogEntry, final long replicatedToAllIndex)", "class_method_signature": "SnapshotManager.captureWithForcedTrim(final ReplicatedLogEntry lastLogEntry, final long replicatedToAllIndex)", "testcase": false, "constructor": false}, {"identifier": "apply", "parameters": "(final ApplySnapshot snapshot)", "modifiers": "@Override public", "return": "void", "signature": "void apply(final ApplySnapshot snapshot)", "full_signature": "@Override public void apply(final ApplySnapshot snapshot)", "class_method_signature": "SnapshotManager.apply(final ApplySnapshot snapshot)", "testcase": false, "constructor": false}, {"identifier": "persist", "parameters": "(final Snapshot.State state, final Optional<OutputStream> installSnapshotStream,\n            final long totalMemory)", "modifiers": "@Override public", "return": "void", "signature": "void persist(final Snapshot.State state, final Optional<OutputStream> installSnapshotStream,\n            final long totalMemory)", "full_signature": "@Override public void persist(final Snapshot.State state, final Optional<OutputStream> installSnapshotStream,\n            final long totalMemory)", "class_method_signature": "SnapshotManager.persist(final Snapshot.State state, final Optional<OutputStream> installSnapshotStream,\n            final long totalMemory)", "testcase": false, "constructor": false}, {"identifier": "commit", "parameters": "(final long sequenceNumber, final long timeStamp)", "modifiers": "@Override public", "return": "void", "signature": "void commit(final long sequenceNumber, final long timeStamp)", "full_signature": "@Override public void commit(final long sequenceNumber, final long timeStamp)", "class_method_signature": "SnapshotManager.commit(final long sequenceNumber, final long timeStamp)", "testcase": false, "constructor": false}, {"identifier": "rollback", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void rollback()", "full_signature": "@Override public void rollback()", "class_method_signature": "SnapshotManager.rollback()", "testcase": false, "constructor": false}, {"identifier": "trimLog", "parameters": "(final long desiredTrimIndex)", "modifiers": "@Override public", "return": "long", "signature": "long trimLog(final long desiredTrimIndex)", "full_signature": "@Override public long trimLog(final long desiredTrimIndex)", "class_method_signature": "SnapshotManager.trimLog(final long desiredTrimIndex)", "testcase": false, "constructor": false}, {"identifier": "setCreateSnapshotConsumer", "parameters": "(final Consumer<Optional<OutputStream>> createSnapshotProcedure)", "modifiers": "@SuppressWarnings(\"checkstyle:hiddenField\")", "return": "void", "signature": "void setCreateSnapshotConsumer(final Consumer<Optional<OutputStream>> createSnapshotProcedure)", "full_signature": "@SuppressWarnings(\"checkstyle:hiddenField\") void setCreateSnapshotConsumer(final Consumer<Optional<OutputStream>> createSnapshotProcedure)", "class_method_signature": "SnapshotManager.setCreateSnapshotConsumer(final Consumer<Optional<OutputStream>> createSnapshotProcedure)", "testcase": false, "constructor": false}, {"identifier": "setSnapshotCohort", "parameters": "(final RaftActorSnapshotCohort snapshotCohort)", "modifiers": "", "return": "void", "signature": "void setSnapshotCohort(final RaftActorSnapshotCohort snapshotCohort)", "full_signature": " void setSnapshotCohort(final RaftActorSnapshotCohort snapshotCohort)", "class_method_signature": "SnapshotManager.setSnapshotCohort(final RaftActorSnapshotCohort snapshotCohort)", "testcase": false, "constructor": false}, {"identifier": "convertSnapshot", "parameters": "(final ByteSource snapshotBytes)", "modifiers": "public", "return": "Snapshot.@NonNull State", "signature": "Snapshot.@NonNull State convertSnapshot(final ByteSource snapshotBytes)", "full_signature": "public Snapshot.@NonNull State convertSnapshot(final ByteSource snapshotBytes)", "class_method_signature": "SnapshotManager.convertSnapshot(final ByteSource snapshotBytes)", "testcase": false, "constructor": false}, {"identifier": "getLastSequenceNumber", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getLastSequenceNumber()", "full_signature": "public long getLastSequenceNumber()", "class_method_signature": "SnapshotManager.getLastSequenceNumber()", "testcase": false, "constructor": false}, {"identifier": "getCaptureSnapshot", "parameters": "()", "modifiers": "@VisibleForTesting public", "return": "CaptureSnapshot", "signature": "CaptureSnapshot getCaptureSnapshot()", "full_signature": "@VisibleForTesting public CaptureSnapshot getCaptureSnapshot()", "class_method_signature": "SnapshotManager.getCaptureSnapshot()", "testcase": false, "constructor": false}, {"identifier": "hasFollowers", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean hasFollowers()", "full_signature": "private boolean hasFollowers()", "class_method_signature": "SnapshotManager.hasFollowers()", "testcase": false, "constructor": false}, {"identifier": "persistenceId", "parameters": "()", "modifiers": "private", "return": "String", "signature": "String persistenceId()", "full_signature": "private String persistenceId()", "class_method_signature": "SnapshotManager.persistenceId()", "testcase": false, "constructor": false}, {"identifier": "newCaptureSnapshot", "parameters": "(final ReplicatedLogEntry lastLogEntry, final long replicatedToAllIndex,\n                                              final boolean mandatoryTrim)", "modifiers": "public", "return": "CaptureSnapshot", "signature": "CaptureSnapshot newCaptureSnapshot(final ReplicatedLogEntry lastLogEntry, final long replicatedToAllIndex,\n                                              final boolean mandatoryTrim)", "full_signature": "public CaptureSnapshot newCaptureSnapshot(final ReplicatedLogEntry lastLogEntry, final long replicatedToAllIndex,\n                                              final boolean mandatoryTrim)", "class_method_signature": "SnapshotManager.newCaptureSnapshot(final ReplicatedLogEntry lastLogEntry, final long replicatedToAllIndex,\n                                              final boolean mandatoryTrim)", "testcase": false, "constructor": false}], "file": "opendaylight/md-sal/sal-akka-raft/src/main/java/org/opendaylight/controller/cluster/raft/SnapshotManager.java"}, "focal_method": {"identifier": "trimLog", "parameters": "(final long desiredTrimIndex)", "modifiers": "@Override public", "return": "long", "body": "@Override\n    public long trimLog(final long desiredTrimIndex) {\n        return currentState.trimLog(desiredTrimIndex);\n    }", "signature": "long trimLog(final long desiredTrimIndex)", "full_signature": "@Override public long trimLog(final long desiredTrimIndex)", "class_method_signature": "SnapshotManager.trimLog(final long desiredTrimIndex)", "testcase": false, "constructor": false, "invocations": ["trimLog"]}, "repository": {"repo_id": 16362479, "url": "https://github.com/opendaylight/controller", "stars": 313, "created": "1/29/2014 11:10:45 PM +00:00", "updates": "2020-01-20T11:02:36+00:00", "fork": "False", "license": "licensed"}}