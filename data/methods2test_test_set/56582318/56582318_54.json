{"test_class": {"identifier": "NoeudTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static Logger logger = Logger.getLogger(NoeudTest.class);", "modifier": "private static", "type": "Logger", "declarator": "logger = Logger.getLogger(NoeudTest.class)", "var_name": "logger"}, {"original_string": "protected CarteTopo ct1 = null;", "modifier": "protected", "type": "CarteTopo", "declarator": "ct1 = null", "var_name": "ct1"}], "file": "geoxygene-contrib/src/test/java/fr/ign/cogit/geoxygene/contrib/cartetopo/NoeudTest.java"}, "test_case": {"identifier": "testPlusCourtChemin", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPlusCourtChemin() {\n\n        logger.info(\"D\u00e9but du test plus court chemin\");\n\n        // Initialisation de la carte topo 1 pour les tests.\n        initCarteTopo1();\n\n        // On r\u00e9cup\u00e8re les objets\n        Noeud n1 = ct1.getListeNoeuds().get(0);\n        Noeud n2 = ct1.getListeNoeuds().get(1);\n        Noeud n3 = ct1.getListeNoeuds().get(2);\n        Noeud n4 = ct1.getListeNoeuds().get(3);\n        // Arc a1 = ct1.getListeArcs().get(0);\n        Arc a2 = ct1.getListeArcs().get(1);\n        Arc a3 = ct1.getListeArcs().get(2);\n        Arc a4 = ct1.getListeArcs().get(3);\n        Arc a5 = ct1.getListeArcs().get(4);\n\n        // Groupe final\n        Groupe gpFinal = null;\n        // Groupe resultat\n        Groupe gpResult = null;\n\n        // ====================================================================\n        logger.info(\"Cas n\u00b01 : chemin n1-n2\");\n\n        // on calcule le plus court chenmin\n        gpResult = n1.plusCourtChemin(n2, 10);\n\n        // On construit le r\u00e9sultat pour comparer avec le calcul\n        gpFinal = new Groupe();\n        gpFinal.addNoeud(n1);\n        gpFinal.addNoeud(n4);\n        gpFinal.addNoeud(n2);\n        gpFinal.addArc(a5);\n        gpFinal.addArc(a4);\n\n        // On compare le r\u00e9sultat\n        Assert.assertEquals(\"Comparaison de la liste des noeuds cas 1 : \",\n                gpFinal.getListeNoeuds(), gpResult.getListeNoeuds());\n        Assert.assertEquals(\"Comparaison de la liste des arcs cas 1 : \",\n                gpFinal.getListeArcs(), gpResult.getListeArcs());\n\n        // ================================================================\n        logger.info(\"Cas n\u00b02 : chemin n2-n1\");\n\n        // On vide les groupes\n        gpResult.vide();\n        gpFinal.vide();\n\n        // on calcule le plus court chenmin\n        gpResult = n2.plusCourtChemin(n1, 10);\n\n        // On construit le r\u00e9sultat pour comparer avec le calcul\n        gpFinal = new Groupe();\n        gpFinal.addNoeud(n2);\n        gpFinal.addNoeud(n3);\n        gpFinal.addNoeud(n1);\n        gpFinal.addArc(a3);\n        gpFinal.addArc(a2);\n\n        // On compare le r\u00e9sultat\n        Assert.assertEquals(\"Comparaison de la liste des noeuds cas 2 : \",\n                gpFinal.getListeNoeuds(), gpResult.getListeNoeuds());\n        Assert.assertEquals(\"Comparaison de la liste des arcs cas 2 : \",\n                gpFinal.getListeArcs(), gpResult.getListeArcs());\n\n        // ================================================================\n        logger.info(\"Cas n\u00b03 : chemin n1-n1\");\n\n        // On vide les groupes\n        gpResult.vide();\n        gpFinal.vide();\n\n        // on calcule le plus court chenmin\n        gpResult = n1.plusCourtChemin(n1, 10);\n\n        // On construit le r\u00e9sultat pour comparer avec le calcul\n        gpFinal = new Groupe();\n        gpFinal.addNoeud(n1);\n\n        // On compare le r\u00e9sultat\n        Assert.assertEquals(\"Comparaison de la liste des noeuds cas 3 : \",\n                gpFinal.getListeNoeuds(), gpResult.getListeNoeuds());\n        Assert.assertEquals(\"Comparaison de la liste des arcs cas 3 : \",\n                gpFinal.getListeArcs(), gpResult.getListeArcs());\n\n        // ================================================================\n        logger.info(\"Cas n\u00b04.1 : chemin n4-n1 (bonne comparaison)\");\n\n        // On vide les groupes\n        gpResult.vide();\n        gpFinal.vide();\n\n        // on calcule le plus court chenmin\n        gpResult = n4.plusCourtChemin(n1, 10);\n\n        // On construit le bon r\u00e9sultat pour comparer avec le calcul\n        gpFinal = new Groupe();\n        gpFinal.addNoeud(n4);\n        gpFinal.addNoeud(n1);\n        gpFinal.addArc(a5);\n\n        // On compare le r\u00e9sultat\n        Assert.assertEquals(\"Comparaison de la liste des noeuds cas 4.1 : \",\n                gpFinal.getListeNoeuds(), gpResult.getListeNoeuds());\n        Assert.assertEquals(\"Comparaison de la liste des arcs cas 4.1 : \",\n                gpFinal.getListeArcs(), gpResult.getListeArcs());\n\n        Assert.assertTrue(\"\",\n                gpFinal.getListeNoeuds().equals(gpResult.getListeNoeuds()));\n        Assert.assertTrue(\"\",\n                gpFinal.getListeArcs().equals(gpResult.getListeArcs()));\n\n        // On inverse les noeuds pour v\u00e9rifier que ce n'est pas le bon r\u00e9sultat\n        logger.info(\"Cas n\u00b04.1 : chemin n4-n1 (mauvaise comparaison : inversion des noeuds)\");\n\n        // On vide le groupe construit avec le bon resultat\n        gpFinal.vide();\n\n        // On construit le mauvais r\u00e9sultat pour comparer avec le calcul\n        gpFinal = new Groupe();\n        gpFinal.addNoeud(n1);\n        gpFinal.addNoeud(n4);\n\n        // On compare le r\u00e9sultat\n        Assert.assertFalse(\n                \"Comparaison de la liste des noeuds en sens inverse cas 4.2 : \",\n                gpFinal.getListeNoeuds().equals(gpResult.getListeNoeuds()));\n        \n    }", "signature": "void testPlusCourtChemin()", "full_signature": "@Test public void testPlusCourtChemin()", "class_method_signature": "NoeudTest.testPlusCourtChemin()", "testcase": true, "constructor": false, "invocations": ["info", "initCarteTopo1", "get", "getListeNoeuds", "get", "getListeNoeuds", "get", "getListeNoeuds", "get", "getListeNoeuds", "get", "getListeArcs", "get", "getListeArcs", "get", "getListeArcs", "get", "getListeArcs", "info", "plusCourtChemin", "addNoeud", "addNoeud", "addNoeud", "addArc", "addArc", "assertEquals", "getListeNoeuds", "getListeNoeuds", "assertEquals", "getListeArcs", "getListeArcs", "info", "vide", "vide", "plusCourtChemin", "addNoeud", "addNoeud", "addNoeud", "addArc", "addArc", "assertEquals", "getListeNoeuds", "getListeNoeuds", "assertEquals", "getListeArcs", "getListeArcs", "info", "vide", "vide", "plusCourtChemin", "addNoeud", "assertEquals", "getListeNoeuds", "getListeNoeuds", "assertEquals", "getListeArcs", "getListeArcs", "info", "vide", "vide", "plusCourtChemin", "addNoeud", "addNoeud", "addArc", "assertEquals", "getListeNoeuds", "getListeNoeuds", "assertEquals", "getListeArcs", "getListeArcs", "assertTrue", "equals", "getListeNoeuds", "getListeNoeuds", "assertTrue", "equals", "getListeArcs", "getListeArcs", "info", "vide", "addNoeud", "addNoeud", "assertFalse", "equals", "getListeNoeuds", "getListeNoeuds"]}, "focal_class": {"identifier": "Noeud", "superclass": "extends ElementCarteTopo", "interfaces": "", "fields": [{"original_string": "private List<Arc> entrants = new ArrayList<Arc>(0);", "modifier": "private", "type": "List<Arc>", "declarator": "entrants = new ArrayList<Arc>(0)", "var_name": "entrants"}, {"original_string": "private List<Arc> sortants = new ArrayList<Arc>(0);", "modifier": "private", "type": "List<Arc>", "declarator": "sortants = new ArrayList<Arc>(0)", "var_name": "sortants"}, {"original_string": "private List<Groupe> listeGroupes = new ArrayList<Groupe>(0);", "modifier": "private", "type": "List<Groupe>", "declarator": "listeGroupes = new ArrayList<Groupe>(0)", "var_name": "listeGroupes"}, {"original_string": "private double distance;", "modifier": "private", "type": "double", "declarator": "distance", "var_name": "distance"}, {"original_string": "private Arc arcPrecedent;", "modifier": "private", "type": "Arc", "declarator": "arcPrecedent", "var_name": "arcPrecedent"}, {"original_string": "private Noeud noeudPrecedent;", "modifier": "private", "type": "Noeud", "declarator": "noeudPrecedent", "var_name": "noeudPrecedent"}], "methods": [{"identifier": "Noeud", "parameters": "()", "modifiers": "public", "return": "", "signature": " Noeud()", "full_signature": "public  Noeud()", "class_method_signature": "Noeud.Noeud()", "testcase": false, "constructor": true}, {"identifier": "Noeud", "parameters": "(IPoint point)", "modifiers": "public", "return": "", "signature": " Noeud(IPoint point)", "full_signature": "public  Noeud(IPoint point)", "class_method_signature": "Noeud.Noeud(IPoint point)", "testcase": false, "constructor": true}, {"identifier": "Noeud", "parameters": "(IDirectPosition p)", "modifiers": "public", "return": "", "signature": " Noeud(IDirectPosition p)", "full_signature": "public  Noeud(IDirectPosition p)", "class_method_signature": "Noeud.Noeud(IDirectPosition p)", "testcase": false, "constructor": true}, {"identifier": "getGeometrie", "parameters": "()", "modifiers": "public", "return": "IPoint", "signature": "IPoint getGeometrie()", "full_signature": "public IPoint getGeometrie()", "class_method_signature": "Noeud.getGeometrie()", "testcase": false, "constructor": false}, {"identifier": "setGeometrie", "parameters": "(IPoint geometrie)", "modifiers": "public", "return": "void", "signature": "void setGeometrie(IPoint geometrie)", "full_signature": "public void setGeometrie(IPoint geometrie)", "class_method_signature": "Noeud.setGeometrie(IPoint geometrie)", "testcase": false, "constructor": false}, {"identifier": "getCoord", "parameters": "()", "modifiers": "public", "return": "IDirectPosition", "signature": "IDirectPosition getCoord()", "full_signature": "public IDirectPosition getCoord()", "class_method_signature": "Noeud.getCoord()", "testcase": false, "constructor": false}, {"identifier": "setCoord", "parameters": "(IDirectPosition dp)", "modifiers": "public", "return": "void", "signature": "void setCoord(IDirectPosition dp)", "full_signature": "public void setCoord(IDirectPosition dp)", "class_method_signature": "Noeud.setCoord(IDirectPosition dp)", "testcase": false, "constructor": false}, {"identifier": "getEntrants", "parameters": "()", "modifiers": "public", "return": "List<Arc>", "signature": "List<Arc> getEntrants()", "full_signature": "public List<Arc> getEntrants()", "class_method_signature": "Noeud.getEntrants()", "testcase": false, "constructor": false}, {"identifier": "addEntrant", "parameters": "(Arc arc)", "modifiers": "public", "return": "void", "signature": "void addEntrant(Arc arc)", "full_signature": "public void addEntrant(Arc arc)", "class_method_signature": "Noeud.addEntrant(Arc arc)", "testcase": false, "constructor": false}, {"identifier": "enleveEntrant", "parameters": "(Arc arc)", "modifiers": "public", "return": "void", "signature": "void enleveEntrant(Arc arc)", "full_signature": "public void enleveEntrant(Arc arc)", "class_method_signature": "Noeud.enleveEntrant(Arc arc)", "testcase": false, "constructor": false}, {"identifier": "getSortants", "parameters": "()", "modifiers": "public", "return": "List<Arc>", "signature": "List<Arc> getSortants()", "full_signature": "public List<Arc> getSortants()", "class_method_signature": "Noeud.getSortants()", "testcase": false, "constructor": false}, {"identifier": "addSortant", "parameters": "(Arc arc)", "modifiers": "public", "return": "void", "signature": "void addSortant(Arc arc)", "full_signature": "public void addSortant(Arc arc)", "class_method_signature": "Noeud.addSortant(Arc arc)", "testcase": false, "constructor": false}, {"identifier": "enleveSortant", "parameters": "(Arc arc)", "modifiers": "public", "return": "void", "signature": "void enleveSortant(Arc arc)", "full_signature": "public void enleveSortant(Arc arc)", "class_method_signature": "Noeud.enleveSortant(Arc arc)", "testcase": false, "constructor": false}, {"identifier": "arcs", "parameters": "()", "modifiers": "public", "return": "List<Arc>", "signature": "List<Arc> arcs()", "full_signature": "public List<Arc> arcs()", "class_method_signature": "Noeud.arcs()", "testcase": false, "constructor": false}, {"identifier": "voisins", "parameters": "()", "modifiers": "public", "return": "List<Noeud>", "signature": "List<Noeud> voisins()", "full_signature": "public List<Noeud> voisins()", "class_method_signature": "Noeud.voisins()", "testcase": false, "constructor": false}, {"identifier": "faces", "parameters": "()", "modifiers": "public", "return": "List<Face>", "signature": "List<Face> faces()", "full_signature": "public List<Face> faces()", "class_method_signature": "Noeud.faces()", "testcase": false, "constructor": false}, {"identifier": "entrantsOrientes", "parameters": "()", "modifiers": "public", "return": "List<Arc>", "signature": "List<Arc> entrantsOrientes()", "full_signature": "public List<Arc> entrantsOrientes()", "class_method_signature": "Noeud.entrantsOrientes()", "testcase": false, "constructor": false}, {"identifier": "sortantsOrientes", "parameters": "()", "modifiers": "public", "return": "List<Arc>", "signature": "List<Arc> sortantsOrientes()", "full_signature": "public List<Arc> sortantsOrientes()", "class_method_signature": "Noeud.sortantsOrientes()", "testcase": false, "constructor": false}, {"identifier": "noeudsSortantsOrientes", "parameters": "()", "modifiers": "public", "return": "Map<Noeud, Arc>", "signature": "Map<Noeud, Arc> noeudsSortantsOrientes()", "full_signature": "public Map<Noeud, Arc> noeudsSortantsOrientes()", "class_method_signature": "Noeud.noeudsSortantsOrientes()", "testcase": false, "constructor": false}, {"identifier": "arcsClasses", "parameters": "()", "modifiers": "public", "return": "List<Object>", "signature": "List<Object> arcsClasses()", "full_signature": "public List<Object> arcsClasses()", "class_method_signature": "Noeud.arcsClasses()", "testcase": false, "constructor": false}, {"identifier": "getListeGroupes", "parameters": "()", "modifiers": "public", "return": "List<Groupe>", "signature": "List<Groupe> getListeGroupes()", "full_signature": "public List<Groupe> getListeGroupes()", "class_method_signature": "Noeud.getListeGroupes()", "testcase": false, "constructor": false}, {"identifier": "setListeGroupes", "parameters": "(List<Groupe> liste)", "modifiers": "public", "return": "void", "signature": "void setListeGroupes(List<Groupe> liste)", "full_signature": "public void setListeGroupes(List<Groupe> liste)", "class_method_signature": "Noeud.setListeGroupes(List<Groupe> liste)", "testcase": false, "constructor": false}, {"identifier": "addGroupe", "parameters": "(Groupe groupe)", "modifiers": "public", "return": "void", "signature": "void addGroupe(Groupe groupe)", "full_signature": "public void addGroupe(Groupe groupe)", "class_method_signature": "Noeud.addGroupe(Groupe groupe)", "testcase": false, "constructor": false}, {"identifier": "voisins", "parameters": "(Groupe groupe)", "modifiers": "public", "return": "List<Noeud>", "signature": "List<Noeud> voisins(Groupe groupe)", "full_signature": "public List<Noeud> voisins(Groupe groupe)", "class_method_signature": "Noeud.voisins(Groupe groupe)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(Noeud noeud)", "modifiers": "public", "return": "double", "signature": "double distance(Noeud noeud)", "full_signature": "public double distance(Noeud noeud)", "class_method_signature": "Noeud.distance(Noeud noeud)", "testcase": false, "constructor": false}, {"identifier": "distance2D", "parameters": "(Noeud noeud)", "modifiers": "public", "return": "double", "signature": "double distance2D(Noeud noeud)", "full_signature": "public double distance2D(Noeud noeud)", "class_method_signature": "Noeud.distance2D(Noeud noeud)", "testcase": false, "constructor": false}, {"identifier": "distance", "parameters": "(Arc arc)", "modifiers": "public", "return": "double", "signature": "double distance(Arc arc)", "full_signature": "public double distance(Arc arc)", "class_method_signature": "Noeud.distance(Arc arc)", "testcase": false, "constructor": false}, {"identifier": "plusCourtChemin", "parameters": "(Noeud arrivee, double maxLongueur)", "modifiers": "public", "return": "Groupe", "signature": "Groupe plusCourtChemin(Noeud arrivee, double maxLongueur)", "full_signature": "public Groupe plusCourtChemin(Noeud arrivee, double maxLongueur)", "class_method_signature": "Noeud.plusCourtChemin(Noeud arrivee, double maxLongueur)", "testcase": false, "constructor": false}, {"identifier": "chercheArcsNoeudsVoisins", "parameters": "(List<Noeud> noeudsVoisins,\n      List<Double> distancesVoisins, List<Arc> arcsVoisins)", "modifiers": "private", "return": "void", "signature": "void chercheArcsNoeudsVoisins(List<Noeud> noeudsVoisins,\n      List<Double> distancesVoisins, List<Arc> arcsVoisins)", "full_signature": "private void chercheArcsNoeudsVoisins(List<Noeud> noeudsVoisins,\n      List<Double> distancesVoisins, List<Arc> arcsVoisins)", "class_method_signature": "Noeud.chercheArcsNoeudsVoisins(List<Noeud> noeudsVoisins,\n      List<Double> distancesVoisins, List<Arc> arcsVoisins)", "testcase": false, "constructor": false}, {"identifier": "plusCourtChemin", "parameters": "(Noeud arrivee, Groupe groupe, double maxLongueur)", "modifiers": "public", "return": "Groupe", "signature": "Groupe plusCourtChemin(Noeud arrivee, Groupe groupe, double maxLongueur)", "full_signature": "public Groupe plusCourtChemin(Noeud arrivee, Groupe groupe, double maxLongueur)", "class_method_signature": "Noeud.plusCourtChemin(Noeud arrivee, Groupe groupe, double maxLongueur)", "testcase": false, "constructor": false}, {"identifier": "chercheArcsNoeudsVoisins", "parameters": "(Groupe groupe,\n      List<Noeud> noeudsVoisins, List<Double> distancesVoisins,\n      List<Arc> arcsVoisins)", "modifiers": "private", "return": "void", "signature": "void chercheArcsNoeudsVoisins(Groupe groupe,\n      List<Noeud> noeudsVoisins, List<Double> distancesVoisins,\n      List<Arc> arcsVoisins)", "full_signature": "private void chercheArcsNoeudsVoisins(Groupe groupe,\n      List<Noeud> noeudsVoisins, List<Double> distancesVoisins,\n      List<Arc> arcsVoisins)", "class_method_signature": "Noeud.chercheArcsNoeudsVoisins(Groupe groupe,\n      List<Noeud> noeudsVoisins, List<Double> distancesVoisins,\n      List<Arc> arcsVoisins)", "testcase": false, "constructor": false}, {"identifier": "directionArc", "parameters": "(Arc arc, double longueurEspaceTravail,\n      double pasEchantillonage)", "modifiers": "public", "return": "Angle", "signature": "Angle directionArc(Arc arc, double longueurEspaceTravail,\n      double pasEchantillonage)", "full_signature": "public Angle directionArc(Arc arc, double longueurEspaceTravail,\n      double pasEchantillonage)", "class_method_signature": "Noeud.directionArc(Arc arc, double longueurEspaceTravail,\n      double pasEchantillonage)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Noeud.toString()", "testcase": false, "constructor": false}, {"identifier": "getDistance", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double getDistance()", "full_signature": "public double getDistance()", "class_method_signature": "Noeud.getDistance()", "testcase": false, "constructor": false}, {"identifier": "setDistance", "parameters": "(double distance)", "modifiers": "public", "return": "void", "signature": "void setDistance(double distance)", "full_signature": "public void setDistance(double distance)", "class_method_signature": "Noeud.setDistance(double distance)", "testcase": false, "constructor": false}, {"identifier": "enleveArc", "parameters": "(Arc arc)", "modifiers": "public", "return": "void", "signature": "void enleveArc(Arc arc)", "full_signature": "public void enleveArc(Arc arc)", "class_method_signature": "Noeud.enleveArc(Arc arc)", "testcase": false, "constructor": false}, {"identifier": "copy", "parameters": "()", "modifiers": "public", "return": "Noeud", "signature": "Noeud copy()", "full_signature": "public Noeud copy()", "class_method_signature": "Noeud.copy()", "testcase": false, "constructor": false}], "file": "geoxygene-contrib/src/main/java/fr/ign/cogit/geoxygene/contrib/cartetopo/Noeud.java"}, "focal_method": {"identifier": "plusCourtChemin", "parameters": "(Noeud arrivee, double maxLongueur)", "modifiers": "public", "return": "Groupe", "body": "public Groupe plusCourtChemin(Noeud arrivee, double maxLongueur) {\n\n    // Noeud.logger.debug(\"shortest path between \" + this.getCoord() + \" - \" + arrivee.getCoord());\n\n    List<Noeud> noeudsFinaux = new ArrayList<Noeud>(0);\n    List<Arc> arcsFinaux = new ArrayList<Arc>(0);\n    List<Noeud> noeudsVoisins = new ArrayList<Noeud>(0);\n    List<Arc> arcsVoisins = new ArrayList<Arc>(0);\n    List<Double> distancesVoisins = new ArrayList<Double>(0);\n    List<Noeud> traites = new ArrayList<Noeud>(0);\n    List<Noeud> aTraiter = new ArrayList<Noeud>(0);\n    int i;\n    Arc arcVoisin;\n    Noeud noeudVoisin, plusProche, suivant;\n    double dist;\n\n    try {\n\n      if (this.getCarteTopo() == null) {\n        Noeud.logger.error(\"ATTENTION : le noeud \" + this + \" ne fait pas partie d'une carte topo\");\n        Noeud.logger.error(\"            Impossible de calculer un plus court chemin\");\n        return null;\n      }\n\n      if (this.getCarteTopo().getPopGroupes() == null) {\n        Noeud.logger.error(\"ATTENTION : le noeud \" + this\n            + \" fait partie d'une carte topo sans population de groupes\");\n        Noeud.logger.error(\"            Impossible de calculer un plus court chemin\");\n        return null;\n      }\n\n      Groupe plusCourtChemin = this.getCarteTopo().getPopGroupes().nouvelElement();\n      \n      // Schema ??? - Quels attributs ???\n      plusCourtChemin.setSchema(this.getSchema());\n      \n      \n      if (this == arrivee) {\n          Noeud.logger.debug(\"node is arrival\");\n          plusCourtChemin.addNoeud(this);\n          this.addGroupe(plusCourtChemin);\n          return plusCourtChemin;\n      }\n\n      this.distance = 0;\n      this.chercheArcsNoeudsVoisins(noeudsVoisins, distancesVoisins, arcsVoisins);\n      // logger.info(\"voisins \" + noeudsVoisins.size());\n\n      for (i = 0; i < noeudsVoisins.size(); i++) {\n        noeudVoisin = noeudsVoisins.get(i);\n        arcVoisin = arcsVoisins.get(i);\n        dist = distancesVoisins.get(i).doubleValue();\n        noeudVoisin.distance = dist;\n        noeudVoisin.arcPrecedent = arcVoisin;\n        noeudVoisin.noeudPrecedent = this;\n      }\n      aTraiter.addAll(noeudsVoisins);\n\n      // Phase \"avant\"\n      while (!aTraiter.isEmpty()) {\n        // choisi le noeud \u00e0 marquer comme trait\u00e9 parmi les voisins\n        plusProche = aTraiter.get(0);\n        for (i = 1; i < aTraiter.size(); i++) {\n          if (aTraiter.get(i).distance < plusProche.distance) {\n            plusProche = aTraiter.get(i);\n          }\n        }\n        // logger.info(\"plus proche \" + plusProche);\n        traites.add(plusProche);\n        aTraiter.remove(plusProche);\n        // il s'agit du noeud d'arriv\u00e9e\n        if (plusProche == arrivee) {\n          // logger.info(\"arriv\u00e9 !!!\");\n          break;\n        }\n        if (maxLongueur != 0) {\n          if (plusProche.distance > maxLongueur) {\n            // Noeud.logger.debug(\"Trop long, on s'arr\u00eate\");\n            return null; // heuristique pour stopper la recherche\n          }\n        }\n        plusProche.chercheArcsNoeudsVoisins(noeudsVoisins, distancesVoisins, arcsVoisins);\n        // logger.info(\"voisins \" + noeudsVoisins.size());\n        for (i = 0; i < noeudsVoisins.size(); i++) {\n          noeudVoisin = noeudsVoisins.get(i);\n          arcVoisin = arcsVoisins.get(i);\n          dist = distancesVoisins.get(i).doubleValue();\n          if (traites.contains(noeudVoisin)) {\n            continue; // Noeud d\u00e9j\u00e0 trait\u00e9\n          }\n          if (aTraiter.contains(noeudVoisin)) {\n            // Noeud d\u00e9j\u00e0 atteint, on voit si on a trouv\u00e9 un chemin\n            // plus court pour y acc\u00e8der\n            if (noeudVoisin.distance > (plusProche.distance + dist)) {\n              noeudVoisin.distance = plusProche.distance + dist;\n              noeudVoisin.arcPrecedent = arcVoisin;\n              noeudVoisin.noeudPrecedent = plusProche;\n            }\n            continue;\n          }\n          // Nouveau noeud atteint, on l'initialise\n          noeudVoisin.distance = plusProche.distance + dist;\n          noeudVoisin.arcPrecedent = arcVoisin;\n          noeudVoisin.noeudPrecedent = plusProche;\n          aTraiter.add(noeudVoisin);\n        }\n      }\n\n      // Phase \"arriere\"\n      if (!traites.contains(arrivee)) {\n        Noeud.logger.debug(\"couldn't reach it\");\n        return null;\n      }\n      suivant = arrivee;\n      while (true) {\n        arcsFinaux.add(0, suivant.arcPrecedent);\n        suivant.arcPrecedent.addGroupe(plusCourtChemin);\n        suivant = suivant.noeudPrecedent;\n        if (suivant == this) {\n          break;\n        }\n        noeudsFinaux.add(0, suivant);\n        suivant.addGroupe(plusCourtChemin);\n      }\n      noeudsFinaux.add(0, this);\n      this.addGroupe(plusCourtChemin);\n      noeudsFinaux.add(arrivee);\n      arrivee.addGroupe(plusCourtChemin);\n      plusCourtChemin.setListeArcs(arcsFinaux);\n      plusCourtChemin.setListeNoeuds(noeudsFinaux);\n      plusCourtChemin.setLength(arrivee.distance);\n      return plusCourtChemin;\n    } catch (Exception e) {\n      Noeud.logger.error(\"----- ERREUR dans calcul de plus court chemin.\");\n      e.printStackTrace();\n      return null;\n    }\n  }", "signature": "Groupe plusCourtChemin(Noeud arrivee, double maxLongueur)", "full_signature": "public Groupe plusCourtChemin(Noeud arrivee, double maxLongueur)", "class_method_signature": "Noeud.plusCourtChemin(Noeud arrivee, double maxLongueur)", "testcase": false, "constructor": false, "invocations": ["getCarteTopo", "error", "error", "getPopGroupes", "getCarteTopo", "error", "error", "nouvelElement", "getPopGroupes", "getCarteTopo", "setSchema", "getSchema", "debug", "addNoeud", "addGroupe", "chercheArcsNoeudsVoisins", "size", "get", "get", "doubleValue", "get", "addAll", "isEmpty", "get", "size", "get", "get", "add", "remove", "chercheArcsNoeudsVoisins", "size", "get", "get", "doubleValue", "get", "contains", "contains", "add", "contains", "debug", "add", "addGroupe", "add", "addGroupe", "add", "addGroupe", "add", "addGroupe", "setListeArcs", "setListeNoeuds", "setLength", "error", "printStackTrace"]}, "repository": {"repo_id": 56582318, "url": "https://github.com/IGNF/geoxygene", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 22, "size": 323511, "license": "licensed"}}