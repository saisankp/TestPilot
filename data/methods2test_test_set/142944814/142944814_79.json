{"test_class": {"identifier": "JustRetryFailoverHandlerTest", "superclass": "extends AbstractTestCase", "interfaces": "", "fields": [], "file": "core/transport/src/test/java/hera/client/JustRetryFailoverHandlerTest.java"}, "test_case": {"identifier": "shouldNotRunOnSuccess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void shouldNotRunOnSuccess() {\n    // given\n    final int count = 3;\n    final JustRetryFailoverHandler justRetryFailoverHandler = new JustRetryFailoverHandler(count,\n        Time.of(100L, TimeUnit.MILLISECONDS));\n    final AtomicInteger countDown = new AtomicInteger(count);\n    final RequestMethod<String> requestMethod = new RequestMethod<String>() {\n\n      @Getter\n      protected final String name = randomUUID().toString();\n\n      @Override\n      protected String runInternal(List<Object> parameters) throws Exception {\n        countDown.decrementAndGet();\n        return null;\n      }\n    };\n\n    // then\n    final String expected = randomUUID().toString();\n    final Response<String> response = Response.success(expected);\n    final Response<String> handled = justRetryFailoverHandler\n        .handle(new TestInvocation<>(requestMethod), response);\n    assertEquals(expected, handled.getValue());\n    assertEquals(count, countDown.get());\n  }", "signature": "void shouldNotRunOnSuccess()", "full_signature": "@Test public void shouldNotRunOnSuccess()", "class_method_signature": "JustRetryFailoverHandlerTest.shouldNotRunOnSuccess()", "testcase": true, "constructor": false, "invocations": ["of", "toString", "randomUUID", "decrementAndGet", "toString", "randomUUID", "success", "handle", "assertEquals", "getValue", "assertEquals", "get"]}, "focal_class": {"identifier": "JustRetryFailoverHandler", "superclass": "extends ComparableFailoverHandler", "interfaces": "", "fields": [{"original_string": "@ToString.Exclude\n  protected final transient Logger logger = getLogger(getClass());", "modifier": "@ToString.Exclude\n  protected final transient", "type": "Logger", "declarator": "logger = getLogger(getClass())", "var_name": "logger"}, {"original_string": "@Getter\n  protected final int priority = 2;", "modifier": "@Getter\n  protected final", "type": "int", "declarator": "priority = 2", "var_name": "priority"}, {"original_string": "protected final int count;", "modifier": "protected final", "type": "int", "declarator": "count", "var_name": "count"}, {"original_string": "protected final long interval;", "modifier": "protected final", "type": "long", "declarator": "interval", "var_name": "interval"}], "methods": [{"identifier": "JustRetryFailoverHandler", "parameters": "(final int count, final Time interval)", "modifiers": "", "return": "", "signature": " JustRetryFailoverHandler(final int count, final Time interval)", "full_signature": "  JustRetryFailoverHandler(final int count, final Time interval)", "class_method_signature": "JustRetryFailoverHandler.JustRetryFailoverHandler(final int count, final Time interval)", "testcase": false, "constructor": true}, {"identifier": "handle", "parameters": "(final Invocation<T> invocation, final Response<T> response)", "modifiers": "@Override public", "return": "Response<T>", "signature": "Response<T> handle(final Invocation<T> invocation, final Response<T> response)", "full_signature": "@Override public Response<T> handle(final Invocation<T> invocation, final Response<T> response)", "class_method_signature": "JustRetryFailoverHandler.handle(final Invocation<T> invocation, final Response<T> response)", "testcase": false, "constructor": false}], "file": "core/transport/src/main/java/hera/client/JustRetryFailoverHandler.java"}, "focal_method": {"identifier": "handle", "parameters": "(final Invocation<T> invocation, final Response<T> response)", "modifiers": "@Override public", "return": "Response<T>", "body": "@Override\n  public <T> Response<T> handle(final Invocation<T> invocation, final Response<T> response) {\n    logger.debug(\"Handle {} with {}\", response.getError(), this);\n\n    Response<T> next = response;\n    int countDown = this.count;\n    while (null != next.getError() && 0 < countDown) {\n      try {\n        logger.debug(\"Just retry with {} after sleep {}ms (count left: {})\", invocation,\n            this.interval, countDown);\n        Thread.sleep(this.interval);\n      } catch (Exception e) {\n        throw new HerajException(\"Unexpected error\", e);\n      }\n\n      try {\n        final T ret = invocation.invoke();\n        next = Response.success(ret);\n      } catch (Exception e) {\n        next = Response.fail(e);\n      }\n      --countDown;\n    }\n    return next;\n  }", "signature": "Response<T> handle(final Invocation<T> invocation, final Response<T> response)", "full_signature": "@Override public Response<T> handle(final Invocation<T> invocation, final Response<T> response)", "class_method_signature": "JustRetryFailoverHandler.handle(final Invocation<T> invocation, final Response<T> response)", "testcase": false, "constructor": false, "invocations": ["debug", "getError", "getError", "debug", "sleep", "invoke", "success", "fail"]}, "repository": {"repo_id": 142944814, "url": "https://github.com/aergoio/heraj", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 18, "size": 11443, "license": "licensed"}}