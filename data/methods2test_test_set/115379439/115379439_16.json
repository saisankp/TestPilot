{"test_class": {"identifier": "SimpleTaskSchedulerTest", "superclass": "", "interfaces": "", "fields": [], "file": "gollum-common/src/test/java/org/gollum/common/scheduling/SimpleTaskSchedulerTest.java"}, "test_case": {"identifier": "schedule_twice", "parameters": "()", "modifiers": "@Test(expected = TaskExistsException.class) public", "return": "void", "body": "@Test(expected = TaskExistsException.class)\n    public void schedule_twice() throws Exception {\n        SimpleTaskScheduler scheduler = new SimpleTaskScheduler();\n        String name = \"hello\";\n        Runnable task = mock(Runnable.class);\n        scheduler.schedule(name, task, 10);\n        scheduler.schedule(name, task, 10);\n    }", "signature": "void schedule_twice()", "full_signature": "@Test(expected = TaskExistsException.class) public void schedule_twice()", "class_method_signature": "SimpleTaskSchedulerTest.schedule_twice()", "testcase": true, "constructor": false, "invocations": ["mock", "schedule", "schedule"]}, "focal_class": {"identifier": "SimpleTaskScheduler", "superclass": "", "interfaces": "implements TinyScheduler", "fields": [{"original_string": "private final ScheduledExecutorService executor;", "modifier": "private final", "type": "ScheduledExecutorService", "declarator": "executor", "var_name": "executor"}, {"original_string": "private final Map<String, Future<?>> tasks = new ConcurrentHashMap<>();", "modifier": "private final", "type": "Map<String, Future<?>>", "declarator": "tasks = new ConcurrentHashMap<>()", "var_name": "tasks"}], "methods": [{"identifier": "SimpleTaskScheduler", "parameters": "()", "modifiers": "public", "return": "", "signature": " SimpleTaskScheduler()", "full_signature": "public  SimpleTaskScheduler()", "class_method_signature": "SimpleTaskScheduler.SimpleTaskScheduler()", "testcase": false, "constructor": true}, {"identifier": "SimpleTaskScheduler", "parameters": "(ScheduledExecutorService executor)", "modifiers": "public", "return": "", "signature": " SimpleTaskScheduler(ScheduledExecutorService executor)", "full_signature": "public  SimpleTaskScheduler(ScheduledExecutorService executor)", "class_method_signature": "SimpleTaskScheduler.SimpleTaskScheduler(ScheduledExecutorService executor)", "testcase": false, "constructor": true}, {"identifier": "schedule", "parameters": "(String name, Runnable task, long delay, TimeUnit unit)", "modifiers": "@Override public", "return": "Future<?>", "signature": "Future<?> schedule(String name, Runnable task, long delay, TimeUnit unit)", "full_signature": "@Override public Future<?> schedule(String name, Runnable task, long delay, TimeUnit unit)", "class_method_signature": "SimpleTaskScheduler.schedule(String name, Runnable task, long delay, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "cancel", "parameters": "(String name)", "modifiers": "@Override public", "return": "void", "signature": "void cancel(String name)", "full_signature": "@Override public void cancel(String name)", "class_method_signature": "SimpleTaskScheduler.cancel(String name)", "testcase": false, "constructor": false}, {"identifier": "has", "parameters": "(String name)", "modifiers": "public", "return": "boolean", "signature": "boolean has(String name)", "full_signature": "public boolean has(String name)", "class_method_signature": "SimpleTaskScheduler.has(String name)", "testcase": false, "constructor": false}, {"identifier": "done", "parameters": "(String name)", "modifiers": "private", "return": "void", "signature": "void done(String name)", "full_signature": "private void done(String name)", "class_method_signature": "SimpleTaskScheduler.done(String name)", "testcase": false, "constructor": false}], "file": "gollum-common/src/main/java/org/gollum/common/scheduling/SimpleTaskScheduler.java"}, "focal_method": {"identifier": "schedule", "parameters": "(String name, Runnable task, long delay, TimeUnit unit)", "modifiers": "@Override public", "return": "Future<?>", "body": "@Override\n    public Future<?> schedule(String name, Runnable task, long delay, TimeUnit unit) {\n        Assertion.notNullOrEmpty(name, \"name\");\n        Assertion.notNull(task, \"task\");\n        if (tasks.containsKey(name)) {\n            throw new TaskExistsException(name);\n        }\n        TaskProxy proxy = new TaskProxy(name, task);\n        ScheduledFuture<?> future = executor.schedule(proxy, delay, unit);\n        tasks.put(name, future);\n        return future;\n    }", "signature": "Future<?> schedule(String name, Runnable task, long delay, TimeUnit unit)", "full_signature": "@Override public Future<?> schedule(String name, Runnable task, long delay, TimeUnit unit)", "class_method_signature": "SimpleTaskScheduler.schedule(String name, Runnable task, long delay, TimeUnit unit)", "testcase": false, "constructor": false, "invocations": ["notNullOrEmpty", "notNull", "containsKey", "schedule", "put"]}, "repository": {"repo_id": 115379439, "url": "https://github.com/hziee514/gollum", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 7, "size": 224, "license": "licensed"}}