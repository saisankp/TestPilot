{"test_class": {"identifier": "MapConditionTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Map<String, String> input;", "modifier": "", "type": "Map<String, String>", "declarator": "input", "var_name": "input"}], "file": "lib/src/test/java/com/busybusy/dbc/conditions/MapConditionTest.java"}, "test_case": {"identifier": "containsKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void containsKey() throws Exception\n\t{\n\t\tMapCondition<Map<String, String>, String, String> condition = new MapCondition<>(this.input);\n\t\tcondition.containsKey(\"KeyTwo\");\n\n\t\tAssertions.assertThatThrownBy(() -> condition.containsKey(\"Chicago\"))\n\t\t          .isInstanceOf(DbcAssertionError.class)\n\t\t          .hasCauseInstanceOf(IllegalArgumentException.class);\n\t}", "signature": "void containsKey()", "full_signature": "@Test public void containsKey()", "class_method_signature": "MapConditionTest.containsKey()", "testcase": true, "constructor": false, "invocations": ["containsKey", "hasCauseInstanceOf", "isInstanceOf", "assertThatThrownBy", "containsKey"]}, "focal_class": {"identifier": "MapCondition", "superclass": "extends BasicCondition<T, MapCondition<T, K, V>>", "interfaces": "implements MapChecks<T, K, V, MapCondition<T, K, V>>", "fields": [], "methods": [{"identifier": "MapCondition", "parameters": "(T subject)", "modifiers": "public", "return": "", "signature": " MapCondition(T subject)", "full_signature": "public  MapCondition(T subject)", "class_method_signature": "MapCondition.MapCondition(T subject)", "testcase": false, "constructor": true}, {"identifier": "isNotEmpty", "parameters": "()", "modifiers": "@Override public", "return": "MapCondition<T, K, V>", "signature": "MapCondition<T, K, V> isNotEmpty()", "full_signature": "@Override public MapCondition<T, K, V> isNotEmpty()", "class_method_signature": "MapCondition.isNotEmpty()", "testcase": false, "constructor": false}, {"identifier": "hasSize", "parameters": "(int size)", "modifiers": "@Override public", "return": "MapCondition<T, K, V>", "signature": "MapCondition<T, K, V> hasSize(int size)", "full_signature": "@Override public MapCondition<T, K, V> hasSize(int size)", "class_method_signature": "MapCondition.hasSize(int size)", "testcase": false, "constructor": false}, {"identifier": "hasSizeBetween", "parameters": "(int startInclusive, int endInclusive)", "modifiers": "@Override public", "return": "MapCondition<T, K, V>", "signature": "MapCondition<T, K, V> hasSizeBetween(int startInclusive, int endInclusive)", "full_signature": "@Override public MapCondition<T, K, V> hasSizeBetween(int startInclusive, int endInclusive)", "class_method_signature": "MapCondition.hasSizeBetween(int startInclusive, int endInclusive)", "testcase": false, "constructor": false}, {"identifier": "containsKey", "parameters": "(K key)", "modifiers": "@Override public", "return": "MapCondition<T, K, V>", "signature": "MapCondition<T, K, V> containsKey(K key)", "full_signature": "@Override public MapCondition<T, K, V> containsKey(K key)", "class_method_signature": "MapCondition.containsKey(K key)", "testcase": false, "constructor": false}, {"identifier": "containsValue", "parameters": "(V value)", "modifiers": "@Override public", "return": "MapCondition<T, K, V>", "signature": "MapCondition<T, K, V> containsValue(V value)", "full_signature": "@Override public MapCondition<T, K, V> containsValue(V value)", "class_method_signature": "MapCondition.containsValue(V value)", "testcase": false, "constructor": false}, {"identifier": "hasSizeGreaterThan", "parameters": "(int minSizeExclusive)", "modifiers": "@Override public", "return": "MapCondition<T, K, V>", "signature": "MapCondition<T, K, V> hasSizeGreaterThan(int minSizeExclusive)", "full_signature": "@Override public MapCondition<T, K, V> hasSizeGreaterThan(int minSizeExclusive)", "class_method_signature": "MapCondition.hasSizeGreaterThan(int minSizeExclusive)", "testcase": false, "constructor": false}, {"identifier": "hasSizeGreaterThanOrEqual", "parameters": "(int minSize)", "modifiers": "@Override public", "return": "MapCondition<T, K, V>", "signature": "MapCondition<T, K, V> hasSizeGreaterThanOrEqual(int minSize)", "full_signature": "@Override public MapCondition<T, K, V> hasSizeGreaterThanOrEqual(int minSize)", "class_method_signature": "MapCondition.hasSizeGreaterThanOrEqual(int minSize)", "testcase": false, "constructor": false}, {"identifier": "hasSizeLessThan", "parameters": "(int maxSizeExclusive)", "modifiers": "@Override public", "return": "MapCondition<T, K, V>", "signature": "MapCondition<T, K, V> hasSizeLessThan(int maxSizeExclusive)", "full_signature": "@Override public MapCondition<T, K, V> hasSizeLessThan(int maxSizeExclusive)", "class_method_signature": "MapCondition.hasSizeLessThan(int maxSizeExclusive)", "testcase": false, "constructor": false}, {"identifier": "hasSizeLessThanOrEqual", "parameters": "(int maxSize)", "modifiers": "@Override public", "return": "MapCondition<T, K, V>", "signature": "MapCondition<T, K, V> hasSizeLessThanOrEqual(int maxSize)", "full_signature": "@Override public MapCondition<T, K, V> hasSizeLessThanOrEqual(int maxSize)", "class_method_signature": "MapCondition.hasSizeLessThanOrEqual(int maxSize)", "testcase": false, "constructor": false}], "file": "lib/src/main/java/com/busybusy/dbc/conditions/MapCondition.java"}, "focal_method": {"identifier": "containsKey", "parameters": "(K key)", "modifiers": "@Override public", "return": "MapCondition<T, K, V>", "body": "@Override\n\tpublic MapCondition<T, K, V> containsKey(K key)\n\t{\n\t\trequire(this.subject).isNotNull();\n\n\t\tif (!this.subject.containsKey(key))\n\t\t{\n\t\t\tDbcAssertionError.throwNew(new IllegalArgumentException(\"Expected map to contain key: \" + key), this.message);\n\t\t}\n\n\t\treturn result();\n\t}", "signature": "MapCondition<T, K, V> containsKey(K key)", "full_signature": "@Override public MapCondition<T, K, V> containsKey(K key)", "class_method_signature": "MapCondition.containsKey(K key)", "testcase": false, "constructor": false, "invocations": ["isNotNull", "require", "containsKey", "throwNew", "result"]}, "repository": {"repo_id": 61247013, "url": "https://github.com/busybusy/DBC-Android", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 203, "license": "licensed"}}