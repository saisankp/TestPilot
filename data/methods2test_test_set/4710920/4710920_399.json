{"test_class": {"identifier": "AbortPolicyWithReportTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-common/src/test/java/org/apache/dubbo/common/threadpool/support/AbortPolicyWithReportTest.java"}, "test_case": {"identifier": "jStackDumpTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void jStackDumpTest() throws InterruptedException {\n        URL url = URL.valueOf(\"dubbo://admin:hello1234@10.20.130.230:20880/context/path?dump.directory=/tmp&version=1.0.0&application=morgan&noValue\");\n        AbortPolicyWithReport abortPolicyWithReport = new AbortPolicyWithReport(\"Test\", url);\n\n        try {\n            abortPolicyWithReport.rejectedExecution(new Runnable() {\n                @Override\n                public void run() {\n                    System.out.println(\"hello\");\n                }\n            }, (ThreadPoolExecutor) Executors.newFixedThreadPool(1));\n        } catch (RejectedExecutionException rj) {\n            // ignore\n        }\n\n        Thread.sleep(1000);\n\n    }", "signature": "void jStackDumpTest()", "full_signature": "@Test public void jStackDumpTest()", "class_method_signature": "AbortPolicyWithReportTest.jStackDumpTest()", "testcase": true, "constructor": false, "invocations": ["valueOf", "rejectedExecution", "println", "newFixedThreadPool", "sleep"]}, "focal_class": {"identifier": "AbortPolicyWithReport", "superclass": "extends ThreadPoolExecutor.AbortPolicy", "interfaces": "", "fields": [{"original_string": "protected static final Logger logger = LoggerFactory.getLogger(AbortPolicyWithReport.class);", "modifier": "protected static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AbortPolicyWithReport.class)", "var_name": "logger"}, {"original_string": "private final String threadName;", "modifier": "private final", "type": "String", "declarator": "threadName", "var_name": "threadName"}, {"original_string": "private final URL url;", "modifier": "private final", "type": "URL", "declarator": "url", "var_name": "url"}, {"original_string": "private static volatile long lastPrintTime = 0;", "modifier": "private static volatile", "type": "long", "declarator": "lastPrintTime = 0", "var_name": "lastPrintTime"}, {"original_string": "private static final long TEN_MINUTES_MILLS = 10 * 60 * 1000;", "modifier": "private static final", "type": "long", "declarator": "TEN_MINUTES_MILLS = 10 * 60 * 1000", "var_name": "TEN_MINUTES_MILLS"}, {"original_string": "private static final String OS_WIN_PREFIX = \"win\";", "modifier": "private static final", "type": "String", "declarator": "OS_WIN_PREFIX = \"win\"", "var_name": "OS_WIN_PREFIX"}, {"original_string": "private static final String OS_NAME_KEY = \"os.name\";", "modifier": "private static final", "type": "String", "declarator": "OS_NAME_KEY = \"os.name\"", "var_name": "OS_NAME_KEY"}, {"original_string": "private static final String WIN_DATETIME_FORMAT = \"yyyy-MM-dd_HH-mm-ss\";", "modifier": "private static final", "type": "String", "declarator": "WIN_DATETIME_FORMAT = \"yyyy-MM-dd_HH-mm-ss\"", "var_name": "WIN_DATETIME_FORMAT"}, {"original_string": "private static final String DEFAULT_DATETIME_FORMAT = \"yyyy-MM-dd_HH:mm:ss\";", "modifier": "private static final", "type": "String", "declarator": "DEFAULT_DATETIME_FORMAT = \"yyyy-MM-dd_HH:mm:ss\"", "var_name": "DEFAULT_DATETIME_FORMAT"}, {"original_string": "private static Semaphore guard = new Semaphore(1);", "modifier": "private static", "type": "Semaphore", "declarator": "guard = new Semaphore(1)", "var_name": "guard"}], "methods": [{"identifier": "AbortPolicyWithReport", "parameters": "(String threadName, URL url)", "modifiers": "public", "return": "", "signature": " AbortPolicyWithReport(String threadName, URL url)", "full_signature": "public  AbortPolicyWithReport(String threadName, URL url)", "class_method_signature": "AbortPolicyWithReport.AbortPolicyWithReport(String threadName, URL url)", "testcase": false, "constructor": true}, {"identifier": "rejectedExecution", "parameters": "(Runnable r, ThreadPoolExecutor e)", "modifiers": "@Override public", "return": "void", "signature": "void rejectedExecution(Runnable r, ThreadPoolExecutor e)", "full_signature": "@Override public void rejectedExecution(Runnable r, ThreadPoolExecutor e)", "class_method_signature": "AbortPolicyWithReport.rejectedExecution(Runnable r, ThreadPoolExecutor e)", "testcase": false, "constructor": false}, {"identifier": "dispatchThreadPoolExhaustedEvent", "parameters": "(String msg)", "modifiers": "public", "return": "void", "signature": "void dispatchThreadPoolExhaustedEvent(String msg)", "full_signature": "public void dispatchThreadPoolExhaustedEvent(String msg)", "class_method_signature": "AbortPolicyWithReport.dispatchThreadPoolExhaustedEvent(String msg)", "testcase": false, "constructor": false}, {"identifier": "dumpJStack", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void dumpJStack()", "full_signature": "private void dumpJStack()", "class_method_signature": "AbortPolicyWithReport.dumpJStack()", "testcase": false, "constructor": false}], "file": "dubbo-common/src/main/java/org/apache/dubbo/common/threadpool/support/AbortPolicyWithReport.java"}, "focal_method": {"identifier": "rejectedExecution", "parameters": "(Runnable r, ThreadPoolExecutor e)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        String msg = String.format(\"Thread pool is EXHAUSTED!\" +\n                \" Thread Name: %s, Pool Size: %d (active: %d, core: %d, max: %d, largest: %d), Task: %d (completed: \"\n                + \"%d),\" +\n                \" Executor status:(isShutdown:%s, isTerminated:%s, isTerminating:%s), in %s://%s:%d!\",\n            threadName, e.getPoolSize(), e.getActiveCount(), e.getCorePoolSize(), e.getMaximumPoolSize(),\n            e.getLargestPoolSize(),\n            e.getTaskCount(), e.getCompletedTaskCount(), e.isShutdown(), e.isTerminated(), e.isTerminating(),\n            url.getProtocol(), url.getIp(), url.getPort());\n        logger.warn(msg);\n        dumpJStack();\n        dispatchThreadPoolExhaustedEvent(msg);\n        throw new RejectedExecutionException(msg);\n    }", "signature": "void rejectedExecution(Runnable r, ThreadPoolExecutor e)", "full_signature": "@Override public void rejectedExecution(Runnable r, ThreadPoolExecutor e)", "class_method_signature": "AbortPolicyWithReport.rejectedExecution(Runnable r, ThreadPoolExecutor e)", "testcase": false, "constructor": false, "invocations": ["format", "getPoolSize", "getActiveCount", "getCorePoolSize", "getMaximumPoolSize", "getLargestPoolSize", "getTaskCount", "getCompletedTaskCount", "isShutdown", "isTerminated", "isTerminating", "getProtocol", "getIp", "getPort", "warn", "dumpJStack", "dispatchThreadPoolExhaustedEvent"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}