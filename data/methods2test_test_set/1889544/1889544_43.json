{"test_class": {"identifier": "SampleServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private SampleService service;", "modifier": "private", "type": "SampleService", "declarator": "service", "var_name": "service"}, {"original_string": "@Rule\n    public final GriffonUnitRule griffon = new GriffonUnitRule();", "modifier": "@Rule\n    public final", "type": "GriffonUnitRule", "declarator": "griffon = new GriffonUnitRule()", "var_name": "griffon"}], "file": "tutorials/simplified/src/test/java/org/example/SampleServiceTest.java"}, "test_case": {"identifier": "sayHello", "parameters": "(String input, String output)", "modifiers": "@Test @Parameters({\",Howdy stranger!\", \"Test, Hello Test\"}) public", "return": "void", "body": "@Test\n    @Parameters({\",Howdy stranger!\",\n        \"Test, Hello Test\"})\n    public void sayHello(String input, String output) {\n        assertThat(service.sayHello(input), equalTo(output));\n    }", "signature": "void sayHello(String input, String output)", "full_signature": "@Test @Parameters({\",Howdy stranger!\", \"Test, Hello Test\"}) public void sayHello(String input, String output)", "class_method_signature": "SampleServiceTest.sayHello(String input, String output)", "testcase": true, "constructor": false, "invocations": ["assertThat", "sayHello", "equalTo"]}, "focal_class": {"identifier": "SampleService", "superclass": "extends AbstractGriffonService", "interfaces": "", "fields": [], "methods": [{"identifier": "sayHello", "parameters": "(String input)", "modifiers": "public", "return": "String", "signature": "String sayHello(String input)", "full_signature": "public String sayHello(String input)", "class_method_signature": "SampleService.sayHello(String input)", "testcase": false, "constructor": false}], "file": "tutorials/simplified/src/main/java/org/example/SampleService.java"}, "focal_method": {"identifier": "sayHello", "parameters": "(String input)", "modifiers": "public", "return": "String", "body": "public String sayHello(String input) {\n        MessageSource messageSource = getApplication().getMessageSource();\n        if (isBlank(input)) {\n            return messageSource.getMessage(\"greeting.default\");\n        } else {\n            return messageSource.getMessage(\"greeting.parameterized\", asList(input));\n        }\n    }", "signature": "String sayHello(String input)", "full_signature": "public String sayHello(String input)", "class_method_signature": "SampleService.sayHello(String input)", "testcase": false, "constructor": false, "invocations": ["getMessageSource", "getApplication", "isBlank", "getMessage", "getMessage", "asList"]}, "repository": {"repo_id": 1889544, "url": "https://github.com/griffon/griffon", "language": "Java", "is_fork": false, "fork_count": 82, "stargazer_count": 268, "size": 818435, "license": "licensed"}}