{"test_class": {"identifier": "DefaultIriExpressionProcessorTest", "superclass": "extends OrmEnabledTestCase", "interfaces": "", "fields": [{"original_string": "private static final String ONT_URI = \"urn://mobi.com/ontologies/testExtraction\";", "modifier": "private static final", "type": "String", "declarator": "ONT_URI = \"urn://mobi.com/ontologies/testExtraction\"", "var_name": "ONT_URI"}, {"original_string": "private DefaultIriExpressionProcessor processor;", "modifier": "private", "type": "DefaultIriExpressionProcessor", "declarator": "processor", "var_name": "processor"}], "file": "document-translation/com.mobi.document.translator.api/src/test/java/com/mobi/document/translator/expression/DefaultIriExpressionProcessorTest.java"}, "test_case": {"identifier": "testBadExpression", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBadExpression() throws Exception {\n        ExtractedOntology ont = getRequiredOrmFactory(ExtractedOntology.class).createNew(VALUE_FACTORY.createIRI(ONT_URI));\n        PropertyIriExpressionContext context = new DefaultPropertyIriExpressionContext(ont, \"test-ontology\",\n                \"simple-test-ontology-for-iri-expressions\", VALUE_FACTORY.createIRI(\"urn://domain\"),\n                VALUE_FACTORY.createIRI(\"urn://range\"));\n        try {\n            processor.processExpression(\"getNoSuchMethod()\", context);\n            Assert.fail(\"Exception should have been thrown when hitting a non-existent method\");\n        } catch (SemanticTranslationException e) {\n            Assert.assertFalse(e.getMessage().isEmpty());\n            Assert.assertNotNull(e.getCause());\n        }\n    }", "signature": "void testBadExpression()", "full_signature": "@Test public void testBadExpression()", "class_method_signature": "DefaultIriExpressionProcessorTest.testBadExpression()", "testcase": true, "constructor": false, "invocations": ["createNew", "getRequiredOrmFactory", "createIRI", "createIRI", "createIRI", "processExpression", "fail", "assertFalse", "isEmpty", "getMessage", "assertNotNull", "getCause"]}, "focal_class": {"identifier": "DefaultIriExpressionProcessor", "superclass": "", "interfaces": "implements IriExpressionProcessor", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(DefaultIriExpressionProcessor.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(DefaultIriExpressionProcessor.class)", "var_name": "LOG"}, {"original_string": "private static final ExpressionParser PARSER = new SpelExpressionParser();", "modifier": "private static final", "type": "ExpressionParser", "declarator": "PARSER = new SpelExpressionParser()", "var_name": "PARSER"}, {"original_string": "private ValueFactory valueFactory;", "modifier": "private", "type": "ValueFactory", "declarator": "valueFactory", "var_name": "valueFactory"}], "methods": [{"identifier": "setValueFactory", "parameters": "(ValueFactory valueFactory)", "modifiers": "@Reference public", "return": "void", "signature": "void setValueFactory(ValueFactory valueFactory)", "full_signature": "@Reference public void setValueFactory(ValueFactory valueFactory)", "class_method_signature": "DefaultIriExpressionProcessor.setValueFactory(ValueFactory valueFactory)", "testcase": false, "constructor": false}, {"identifier": "processExpression", "parameters": "(String expression, IriExpressionContext context)", "modifiers": "@Override public", "return": "IRI", "signature": "IRI processExpression(String expression, IriExpressionContext context)", "full_signature": "@Override public IRI processExpression(String expression, IriExpressionContext context)", "class_method_signature": "DefaultIriExpressionProcessor.processExpression(String expression, IriExpressionContext context)", "testcase": false, "constructor": false}], "file": "document-translation/com.mobi.document.translator.api/src/main/java/com/mobi/document/translator/expression/DefaultIriExpressionProcessor.java"}, "focal_method": {"identifier": "processExpression", "parameters": "(String expression, IriExpressionContext context)", "modifiers": "@Override public", "return": "IRI", "body": "@Override\n    public IRI processExpression(String expression, IriExpressionContext context) throws SemanticTranslationException {\n        try {\n            final Expression compiledExpression = PARSER.parseExpression(expression);\n            String result = compiledExpression.getValue(new StandardEvaluationContext(context), String.class);\n            LOG.debug(\"IRI expression resulted in '{}' with context of type {}\", result, context.getClass().getName());\n            return valueFactory.createIRI(result);\n        } catch (SpelEvaluationException | SpelParseException | IllegalArgumentException e) {\n            throw new SemanticTranslationException(\"Issue processing IRI expression for expression '\"\n                    + expression + \"' with context of type: \" + context.getClass().getName(), e);\n        }\n    }", "signature": "IRI processExpression(String expression, IriExpressionContext context)", "full_signature": "@Override public IRI processExpression(String expression, IriExpressionContext context)", "class_method_signature": "DefaultIriExpressionProcessor.processExpression(String expression, IriExpressionContext context)", "testcase": false, "constructor": false, "invocations": ["parseExpression", "getValue", "debug", "getName", "getClass", "createIRI", "getName", "getClass"]}, "repository": {"repo_id": 62253355, "url": "https://github.com/inovexcorp/mobi", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 30, "size": 54070, "license": "licensed"}}