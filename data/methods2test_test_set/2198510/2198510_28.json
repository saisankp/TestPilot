{"test_class": {"identifier": "TestLogRecord", "superclass": "", "interfaces": "", "fields": [], "file": "flume-ng-channels/flume-file-channel/src/test/java/org/apache/flume/channel/file/TestLogRecord.java"}, "test_case": {"identifier": "testSortOrder", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSortOrder() {\n    // events should sort in the reverse order we put them on\n    long now = System.currentTimeMillis();\n    List<LogRecord> records = Lists.newArrayList();\n    for (int i = 0; i < 3; i++) {\n      Commit commit = new Commit((long)i, now - i);\n      LogRecord logRecord = new LogRecord(1, i, commit);\n      records.add(logRecord);\n    }\n    LogRecord logRecord;\n\n    logRecord = Collections.min(records);\n    Assert.assertTrue(String.valueOf(logRecord.getOffset()),\n        2 == logRecord.getOffset());\n    records.remove(logRecord);\n\n    logRecord = Collections.min(records);\n    Assert.assertTrue(String.valueOf(logRecord.getOffset()),\n        1 == logRecord.getOffset());\n    records.remove(logRecord);\n\n    logRecord = Collections.min(records);\n    Assert.assertTrue(String.valueOf(logRecord.getOffset()),\n        0 == logRecord.getOffset());\n    records.remove(logRecord);\n  }", "signature": "void testSortOrder()", "full_signature": "@Test public void testSortOrder()", "class_method_signature": "TestLogRecord.testSortOrder()", "testcase": true, "constructor": false, "invocations": ["currentTimeMillis", "newArrayList", "add", "min", "assertTrue", "valueOf", "getOffset", "getOffset", "remove", "min", "assertTrue", "valueOf", "getOffset", "getOffset", "remove", "min", "assertTrue", "valueOf", "getOffset", "getOffset", "remove"]}, "focal_class": {"identifier": "LogRecord", "superclass": "", "interfaces": "implements Comparable<LogRecord>", "fields": [{"original_string": "private int fileID;", "modifier": "private", "type": "int", "declarator": "fileID", "var_name": "fileID"}, {"original_string": "private int offset;", "modifier": "private", "type": "int", "declarator": "offset", "var_name": "offset"}, {"original_string": "private TransactionEventRecord event;", "modifier": "private", "type": "TransactionEventRecord", "declarator": "event", "var_name": "event"}, {"original_string": "private static final short[] replaySortOrder = new short[] {\n    TransactionEventRecord.Type.TAKE.get(),\n    TransactionEventRecord.Type.PUT.get(),\n    TransactionEventRecord.Type.ROLLBACK.get(),\n    TransactionEventRecord.Type.COMMIT.get(),\n  };", "modifier": "private static final", "type": "short[]", "declarator": "replaySortOrder = new short[] {\n    TransactionEventRecord.Type.TAKE.get(),\n    TransactionEventRecord.Type.PUT.get(),\n    TransactionEventRecord.Type.ROLLBACK.get(),\n    TransactionEventRecord.Type.COMMIT.get(),\n  }", "var_name": "replaySortOrder"}], "methods": [{"identifier": "LogRecord", "parameters": "(int fileID, int offset, TransactionEventRecord event)", "modifiers": "public", "return": "", "signature": " LogRecord(int fileID, int offset, TransactionEventRecord event)", "full_signature": "public  LogRecord(int fileID, int offset, TransactionEventRecord event)", "class_method_signature": "LogRecord.LogRecord(int fileID, int offset, TransactionEventRecord event)", "testcase": false, "constructor": true}, {"identifier": "getFileID", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getFileID()", "full_signature": "public int getFileID()", "class_method_signature": "LogRecord.getFileID()", "testcase": false, "constructor": false}, {"identifier": "getOffset", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getOffset()", "full_signature": "public int getOffset()", "class_method_signature": "LogRecord.getOffset()", "testcase": false, "constructor": false}, {"identifier": "getEvent", "parameters": "()", "modifiers": "public", "return": "TransactionEventRecord", "signature": "TransactionEventRecord getEvent()", "full_signature": "public TransactionEventRecord getEvent()", "class_method_signature": "LogRecord.getEvent()", "testcase": false, "constructor": false}, {"identifier": "compareTo", "parameters": "(LogRecord o)", "modifiers": "@Override public", "return": "int", "signature": "int compareTo(LogRecord o)", "full_signature": "@Override public int compareTo(LogRecord o)", "class_method_signature": "LogRecord.compareTo(LogRecord o)", "testcase": false, "constructor": false}], "file": "flume-ng-channels/flume-file-channel/src/main/java/org/apache/flume/channel/file/LogRecord.java"}, "focal_method": {"identifier": "getOffset", "parameters": "()", "modifiers": "public", "return": "int", "body": "public int getOffset() {\n    return offset;\n  }", "signature": "int getOffset()", "full_signature": "public int getOffset()", "class_method_signature": "LogRecord.getOffset()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}