{"test_class": {"identifier": "SharingControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private CurrentUserService currentUserService;", "modifier": "@Mock\n    private", "type": "CurrentUserService", "declarator": "currentUserService", "var_name": "currentUserService"}, {"original_string": "@Mock\n    private IdentifiableObjectManager manager;", "modifier": "@Mock\n    private", "type": "IdentifiableObjectManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "@Mock\n    private UserGroupService userGroupService;", "modifier": "@Mock\n    private", "type": "UserGroupService", "declarator": "userGroupService", "var_name": "userGroupService"}, {"original_string": "@Mock\n    private UserService userService;", "modifier": "@Mock\n    private", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "@Mock\n    private UserGroupAccessService userGroupAccessService;", "modifier": "@Mock\n    private", "type": "UserGroupAccessService", "declarator": "userGroupAccessService", "var_name": "userGroupAccessService"}, {"original_string": "@Mock\n    private UserAccessService userAccessService;", "modifier": "@Mock\n    private", "type": "UserAccessService", "declarator": "userAccessService", "var_name": "userAccessService"}, {"original_string": "@Mock\n    private AclService aclService;", "modifier": "@Mock\n    private", "type": "AclService", "declarator": "aclService", "var_name": "aclService"}, {"original_string": "@Mock\n    private WebMessageService webMessageService;", "modifier": "@Mock\n    private", "type": "WebMessageService", "declarator": "webMessageService", "var_name": "webMessageService"}, {"original_string": "@Mock\n    private RenderService renderService;", "modifier": "@Mock\n    private", "type": "RenderService", "declarator": "renderService", "var_name": "renderService"}, {"original_string": "@Mock\n    private SchemaService schemaService;", "modifier": "@Mock\n    private", "type": "SchemaService", "declarator": "schemaService", "var_name": "schemaService"}, {"original_string": "private MockHttpServletRequest request = new MockHttpServletRequest();", "modifier": "private", "type": "MockHttpServletRequest", "declarator": "request = new MockHttpServletRequest()", "var_name": "request"}, {"original_string": "private MockHttpServletResponse response = new MockHttpServletResponse();", "modifier": "private", "type": "MockHttpServletResponse", "declarator": "response = new MockHttpServletResponse()", "var_name": "response"}, {"original_string": "@InjectMocks\n    private SharingController sharingController;", "modifier": "@InjectMocks\n    private", "type": "SharingController", "declarator": "sharingController", "var_name": "sharingController"}, {"original_string": "@Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}], "file": "dhis-2/dhis-web/dhis-web-api/src/test/java/org/hisp/dhis/webapi/controller/SharingControllerTest.java"}, "test_case": {"identifier": "notSystemDefaultMetadataNoAccess", "parameters": "()", "modifiers": "@Test( expected = AccessDeniedException.class ) public", "return": "void", "body": "@Test( expected = AccessDeniedException.class )\n    public void notSystemDefaultMetadataNoAccess() throws Exception\n    {\n        final OrganisationUnit organisationUnit = new OrganisationUnit();\n\n        Mockito.doReturn( OrganisationUnit.class ).when( aclService ).classForType( Mockito.eq( \"organisationUnit\" ) );\n        Mockito.when( aclService.isShareable( Mockito.eq( OrganisationUnit.class ) ) ).thenReturn( true );\n        Mockito.doReturn( organisationUnit ).when( manager ).get( Mockito.eq( OrganisationUnit.class ), Mockito.eq( \"kkSjhdhks\" ) );\n\n        sharingController.setSharing( \"organisationUnit\", \"kkSjhdhks\", response, request );\n    }", "signature": "void notSystemDefaultMetadataNoAccess()", "full_signature": "@Test( expected = AccessDeniedException.class ) public void notSystemDefaultMetadataNoAccess()", "class_method_signature": "SharingControllerTest.notSystemDefaultMetadataNoAccess()", "testcase": true, "constructor": false, "invocations": ["classForType", "when", "doReturn", "eq", "thenReturn", "when", "isShareable", "eq", "get", "when", "doReturn", "eq", "eq", "setSharing"]}, "focal_class": {"identifier": "SharingController", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String RESOURCE_PATH = \"/sharing\";", "modifier": "public static final", "type": "String", "declarator": "RESOURCE_PATH = \"/sharing\"", "var_name": "RESOURCE_PATH"}, {"original_string": "@Autowired\n    private CurrentUserService currentUserService;", "modifier": "@Autowired\n    private", "type": "CurrentUserService", "declarator": "currentUserService", "var_name": "currentUserService"}, {"original_string": "@Autowired\n    private IdentifiableObjectManager manager;", "modifier": "@Autowired\n    private", "type": "IdentifiableObjectManager", "declarator": "manager", "var_name": "manager"}, {"original_string": "@Autowired\n    private UserGroupService userGroupService;", "modifier": "@Autowired\n    private", "type": "UserGroupService", "declarator": "userGroupService", "var_name": "userGroupService"}, {"original_string": "@Autowired\n    private UserService userService;", "modifier": "@Autowired\n    private", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "@Autowired\n    private UserGroupAccessService userGroupAccessService;", "modifier": "@Autowired\n    private", "type": "UserGroupAccessService", "declarator": "userGroupAccessService", "var_name": "userGroupAccessService"}, {"original_string": "@Autowired\n    private UserAccessService userAccessService;", "modifier": "@Autowired\n    private", "type": "UserAccessService", "declarator": "userAccessService", "var_name": "userAccessService"}, {"original_string": "@Autowired\n    private AclService aclService;", "modifier": "@Autowired\n    private", "type": "AclService", "declarator": "aclService", "var_name": "aclService"}, {"original_string": "@Autowired\n    private WebMessageService webMessageService;", "modifier": "@Autowired\n    private", "type": "WebMessageService", "declarator": "webMessageService", "var_name": "webMessageService"}, {"original_string": "@Autowired\n    private RenderService renderService;", "modifier": "@Autowired\n    private", "type": "RenderService", "declarator": "renderService", "var_name": "renderService"}, {"original_string": "@Autowired\n    private SchemaService schemaService;", "modifier": "@Autowired\n    private", "type": "SchemaService", "declarator": "schemaService", "var_name": "schemaService"}], "methods": [{"identifier": "getSharing", "parameters": "( @RequestParam String type, @RequestParam String id, HttpServletResponse response )", "modifiers": "@RequestMapping( method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE ) public", "return": "void", "signature": "void getSharing( @RequestParam String type, @RequestParam String id, HttpServletResponse response )", "full_signature": "@RequestMapping( method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE ) public void getSharing( @RequestParam String type, @RequestParam String id, HttpServletResponse response )", "class_method_signature": "SharingController.getSharing( @RequestParam String type, @RequestParam String id, HttpServletResponse response )", "testcase": false, "constructor": false}, {"identifier": "setSharing", "parameters": "( @RequestParam String type, @RequestParam String id, HttpServletResponse response, HttpServletRequest request )", "modifiers": "@RequestMapping( method = { RequestMethod.POST, RequestMethod.PUT }, consumes = MediaType.APPLICATION_JSON_VALUE ) public", "return": "void", "signature": "void setSharing( @RequestParam String type, @RequestParam String id, HttpServletResponse response, HttpServletRequest request )", "full_signature": "@RequestMapping( method = { RequestMethod.POST, RequestMethod.PUT }, consumes = MediaType.APPLICATION_JSON_VALUE ) public void setSharing( @RequestParam String type, @RequestParam String id, HttpServletResponse response, HttpServletRequest request )", "class_method_signature": "SharingController.setSharing( @RequestParam String type, @RequestParam String id, HttpServletResponse response, HttpServletRequest request )", "testcase": false, "constructor": false}, {"identifier": "searchUserGroups", "parameters": "( @RequestParam String key, @RequestParam( required = false ) Integer pageSize,\n        HttpServletResponse response )", "modifiers": "@RequestMapping( value = \"/search\", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE ) public", "return": "void", "signature": "void searchUserGroups( @RequestParam String key, @RequestParam( required = false ) Integer pageSize,\n        HttpServletResponse response )", "full_signature": "@RequestMapping( value = \"/search\", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE ) public void searchUserGroups( @RequestParam String key, @RequestParam( required = false ) Integer pageSize,\n        HttpServletResponse response )", "class_method_signature": "SharingController.searchUserGroups( @RequestParam String key, @RequestParam( required = false ) Integer pageSize,\n        HttpServletResponse response )", "testcase": false, "constructor": false}, {"identifier": "getSharingUser", "parameters": "( String key, int max )", "modifiers": "private", "return": "List<SharingUserAccess>", "signature": "List<SharingUserAccess> getSharingUser( String key, int max )", "full_signature": "private List<SharingUserAccess> getSharingUser( String key, int max )", "class_method_signature": "SharingController.getSharingUser( String key, int max )", "testcase": false, "constructor": false}, {"identifier": "getSharingUserGroups", "parameters": "( @RequestParam String key, int max )", "modifiers": "private", "return": "List<SharingUserGroupAccess>", "signature": "List<SharingUserGroupAccess> getSharingUserGroups( @RequestParam String key, int max )", "full_signature": "private List<SharingUserGroupAccess> getSharingUserGroups( @RequestParam String key, int max )", "class_method_signature": "SharingController.getSharingUserGroups( @RequestParam String key, int max )", "testcase": false, "constructor": false}, {"identifier": "sharingToString", "parameters": "( BaseIdentifiableObject object )", "modifiers": "private", "return": "String", "signature": "String sharingToString( BaseIdentifiableObject object )", "full_signature": "private String sharingToString( BaseIdentifiableObject object )", "class_method_signature": "SharingController.sharingToString( BaseIdentifiableObject object )", "testcase": false, "constructor": false}, {"identifier": "syncSharingForEventProgram", "parameters": "( Program program )", "modifiers": "private", "return": "void", "signature": "void syncSharingForEventProgram( Program program )", "full_signature": "private void syncSharingForEventProgram( Program program )", "class_method_signature": "SharingController.syncSharingForEventProgram( Program program )", "testcase": false, "constructor": false}, {"identifier": "getSharingType", "parameters": "( final String type )", "modifiers": "@Deprecated private", "return": "String", "signature": "String getSharingType( final String type )", "full_signature": "@Deprecated private String getSharingType( final String type )", "class_method_signature": "SharingController.getSharingType( final String type )", "testcase": false, "constructor": false}], "file": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/SharingController.java"}, "focal_method": {"identifier": "setSharing", "parameters": "( @RequestParam String type, @RequestParam String id, HttpServletResponse response, HttpServletRequest request )", "modifiers": "@RequestMapping( method = { RequestMethod.POST, RequestMethod.PUT }, consumes = MediaType.APPLICATION_JSON_VALUE ) public", "return": "void", "body": "@RequestMapping( method = { RequestMethod.POST, RequestMethod.PUT }, consumes = MediaType.APPLICATION_JSON_VALUE )\n    public void setSharing( @RequestParam String type, @RequestParam String id, HttpServletResponse response, HttpServletRequest request ) throws IOException, WebMessageException\n    {\n        type = getSharingType( type );\n\n        Class<? extends IdentifiableObject> sharingClass = aclService.classForType( type );\n\n        if ( sharingClass == null || !aclService.isShareable( sharingClass ) )\n        {\n            throw new WebMessageException( WebMessageUtils.conflict( \"Type \" + type + \" is not supported.\" ) );\n        }\n\n        BaseIdentifiableObject object = (BaseIdentifiableObject) manager.get( sharingClass, id );\n\n        if ( object == null )\n        {\n            throw new WebMessageException( WebMessageUtils.notFound( \"Object of type \" + type + \" with ID \" + id + \" was not found.\" ) );\n        }\n\n        if ( ( object instanceof SystemDefaultMetadataObject ) && ( (SystemDefaultMetadataObject) object ).isDefault() )\n        {\n            throw new WebMessageException( WebMessageUtils.conflict( \"Sharing settings of system default metadata object of type \" + type + \" cannot be modified.\" ) );\n        }\n\n        User user = currentUserService.getCurrentUser();\n\n        if ( !aclService.canManage( user, object ) )\n        {\n            throw new AccessDeniedException( \"You do not have manage access to this object.\" );\n        }\n\n        Sharing sharing = renderService.fromJson( request.getInputStream(), Sharing.class );\n\n        if ( !AccessStringHelper.isValid( sharing.getObject().getPublicAccess() ) )\n        {\n            throw new WebMessageException( WebMessageUtils.conflict( \"Invalid public access string: \" + sharing.getObject().getPublicAccess() ) );\n        }\n\n        // ---------------------------------------------------------------------\n        // Ignore externalAccess if user is not allowed to make objects external\n        // ---------------------------------------------------------------------\n\n        if ( aclService.canMakeExternal( user, object.getClass() ) )\n        {\n            object.setExternalAccess( sharing.getObject().hasExternalAccess() );\n        }\n\n        // ---------------------------------------------------------------------\n        // Ignore publicAccess if user is not allowed to make objects public\n        // ---------------------------------------------------------------------\n\n        Schema schema = schemaService.getDynamicSchema( sharingClass );\n\n        if ( aclService.canMakePublic( user, object.getClass() ) )\n        {\n            object.setPublicAccess( sharing.getObject().getPublicAccess() );\n        }\n\n        if ( !schema.isDataShareable() )\n        {\n            if ( AccessStringHelper.hasDataSharing( object.getPublicAccess() ) )\n            {\n                throw new WebMessageException( WebMessageUtils.conflict( \"Data sharing is not enabled for this object.\" ) );\n            }\n        }\n\n        if ( object.getUser() == null )\n        {\n            object.setUser( user );\n        }\n\n        Iterator<UserGroupAccess> userGroupAccessIterator = object.getUserGroupAccesses().iterator();\n\n        while ( userGroupAccessIterator.hasNext() )\n        {\n            UserGroupAccess userGroupAccess = userGroupAccessIterator.next();\n            userGroupAccessIterator.remove();\n\n            userGroupAccessService.deleteUserGroupAccess( userGroupAccess );\n        }\n\n        for ( SharingUserGroupAccess sharingUserGroupAccess : sharing.getObject().getUserGroupAccesses() )\n        {\n            UserGroupAccess userGroupAccess = new UserGroupAccess();\n\n            if ( !AccessStringHelper.isValid( sharingUserGroupAccess.getAccess() ) )\n            {\n                throw new WebMessageException( WebMessageUtils.conflict( \"Invalid user group access string: \" + sharingUserGroupAccess.getAccess() ) );\n            }\n\n            if ( !schema.isDataShareable() )\n            {\n                if ( AccessStringHelper.hasDataSharing( sharingUserGroupAccess.getAccess() ) )\n                {\n                    throw new WebMessageException( WebMessageUtils.conflict( \"Data sharing is not enabled for this object.\" ) );\n                }\n            }\n\n            userGroupAccess.setAccess( sharingUserGroupAccess.getAccess() );\n\n            UserGroup userGroup = manager.get( UserGroup.class, sharingUserGroupAccess.getId() );\n\n            if ( userGroup != null )\n            {\n                userGroupAccess.setUserGroup( userGroup );\n                userGroupAccessService.addUserGroupAccess( userGroupAccess );\n\n                object.getUserGroupAccesses().add( userGroupAccess );\n            }\n        }\n\n        Iterator<UserAccess> userAccessIterator = object.getUserAccesses().iterator();\n\n        while ( userAccessIterator.hasNext() )\n        {\n            UserAccess userAccess = userAccessIterator.next();\n            userAccessIterator.remove();\n\n            userAccessService.deleteUserAccess( userAccess );\n        }\n\n        for ( SharingUserAccess sharingUserAccess : sharing.getObject().getUserAccesses() )\n        {\n            UserAccess userAccess = new UserAccess();\n\n            if ( !AccessStringHelper.isValid( sharingUserAccess.getAccess() ) )\n            {\n                throw new WebMessageException( WebMessageUtils.conflict( \"Invalid user access string: \" + sharingUserAccess.getAccess() ) );\n            }\n\n            if ( !schema.isDataShareable() )\n            {\n                if ( AccessStringHelper.hasDataSharing( sharingUserAccess.getAccess() ) )\n                {\n                    throw new WebMessageException( WebMessageUtils.conflict( \"Data sharing is not enabled for this object.\" ) );\n                }\n            }\n\n            userAccess.setAccess( sharingUserAccess.getAccess() );\n\n            User sharingUser = manager.get( User.class, sharingUserAccess.getId() );\n\n            if ( sharingUser != null )\n            {\n                userAccess.setUser( sharingUser );\n                userAccessService.addUserAccess( userAccess );\n\n                object.getUserAccesses().add( userAccess );\n            }\n        }\n\n        manager.updateNoAcl( object );\n\n        if ( Program.class.isInstance( object ) )\n        {\n            syncSharingForEventProgram( (Program) object );\n        }\n\n        log.info( sharingToString( object ) );\n\n        webMessageService.send( WebMessageUtils.ok( \"Access control set\" ), response, request );\n    }", "signature": "void setSharing( @RequestParam String type, @RequestParam String id, HttpServletResponse response, HttpServletRequest request )", "full_signature": "@RequestMapping( method = { RequestMethod.POST, RequestMethod.PUT }, consumes = MediaType.APPLICATION_JSON_VALUE ) public void setSharing( @RequestParam String type, @RequestParam String id, HttpServletResponse response, HttpServletRequest request )", "class_method_signature": "SharingController.setSharing( @RequestParam String type, @RequestParam String id, HttpServletResponse response, HttpServletRequest request )", "testcase": false, "constructor": false, "invocations": ["getSharingType", "classForType", "isShareable", "conflict", "get", "notFound", "isDefault", "conflict", "getCurrentUser", "canManage", "fromJson", "getInputStream", "isValid", "getPublicAccess", "getObject", "conflict", "getPublicAccess", "getObject", "canMakeExternal", "getClass", "setExternalAccess", "hasExternalAccess", "getObject", "getDynamicSchema", "canMakePublic", "getClass", "setPublicAccess", "getPublicAccess", "getObject", "isDataShareable", "hasDataSharing", "getPublicAccess", "conflict", "getUser", "setUser", "iterator", "getUserGroupAccesses", "hasNext", "next", "remove", "deleteUserGroupAccess", "getUserGroupAccesses", "getObject", "isValid", "getAccess", "conflict", "getAccess", "isDataShareable", "hasDataSharing", "getAccess", "conflict", "setAccess", "getAccess", "get", "getId", "setUserGroup", "addUserGroupAccess", "add", "getUserGroupAccesses", "iterator", "getUserAccesses", "hasNext", "next", "remove", "deleteUserAccess", "getUserAccesses", "getObject", "isValid", "getAccess", "conflict", "getAccess", "isDataShareable", "hasDataSharing", "getAccess", "conflict", "setAccess", "getAccess", "get", "getId", "setUser", "addUserAccess", "add", "getUserAccesses", "updateNoAcl", "isInstance", "syncSharingForEventProgram", "info", "sharingToString", "send", "ok"]}, "repository": {"repo_id": 66940520, "url": "https://github.com/dhis2/dhis2-core", "stars": 151, "created": "8/30/2016 12:57:05 PM +00:00", "updates": "2020-01-24T18:06:36+00:00", "fork": "False", "license": "licensed"}}