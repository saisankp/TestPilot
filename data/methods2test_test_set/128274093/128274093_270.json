{"test_class": {"identifier": "ExceptionHelperTest", "superclass": "", "interfaces": "", "fields": [], "file": "rxjava/src/test/java/io/reactivex/internal/util/ExceptionHelperTest.java"}, "test_case": {"identifier": "addRace", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addRace() {\n        for (int i = 0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {\n\n            final AtomicReference<Throwable> error = new AtomicReference<Throwable>();\n\n            final TestException ex = new TestException();\n\n            Runnable r = new Runnable() {\n                @Override\n                public void run() {\n                    assertTrue(ExceptionHelper.addThrowable(error, ex));\n                }\n            };\n\n            TestHelper.race(r, r);\n        }\n    }", "signature": "void addRace()", "full_signature": "@Test public void addRace()", "class_method_signature": "ExceptionHelperTest.addRace()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "addThrowable", "race"]}, "focal_class": {"identifier": "ExceptionHelper", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Throwable TERMINATED = new Termination();", "modifier": "public static final", "type": "Throwable", "declarator": "TERMINATED = new Termination()", "var_name": "TERMINATED"}], "methods": [{"identifier": "ExceptionHelper", "parameters": "()", "modifiers": "private", "return": "", "signature": " ExceptionHelper()", "full_signature": "private  ExceptionHelper()", "class_method_signature": "ExceptionHelper.ExceptionHelper()", "testcase": false, "constructor": true}, {"identifier": "wrapOrThrow", "parameters": "(Throwable error)", "modifiers": "public static", "return": "RuntimeException", "signature": "RuntimeException wrapOrThrow(Throwable error)", "full_signature": "public static RuntimeException wrapOrThrow(Throwable error)", "class_method_signature": "ExceptionHelper.wrapOrThrow(Throwable error)", "testcase": false, "constructor": false}, {"identifier": "addThrowable", "parameters": "(AtomicReference<Throwable> field, Throwable exception)", "modifiers": "public static", "return": "boolean", "signature": "boolean addThrowable(AtomicReference<Throwable> field, Throwable exception)", "full_signature": "public static boolean addThrowable(AtomicReference<Throwable> field, Throwable exception)", "class_method_signature": "ExceptionHelper.addThrowable(AtomicReference<Throwable> field, Throwable exception)", "testcase": false, "constructor": false}, {"identifier": "terminate", "parameters": "(AtomicReference<Throwable> field)", "modifiers": "public static", "return": "Throwable", "signature": "Throwable terminate(AtomicReference<Throwable> field)", "full_signature": "public static Throwable terminate(AtomicReference<Throwable> field)", "class_method_signature": "ExceptionHelper.terminate(AtomicReference<Throwable> field)", "testcase": false, "constructor": false}, {"identifier": "flatten", "parameters": "(Throwable t)", "modifiers": "public static", "return": "List<Throwable>", "signature": "List<Throwable> flatten(Throwable t)", "full_signature": "public static List<Throwable> flatten(Throwable t)", "class_method_signature": "ExceptionHelper.flatten(Throwable t)", "testcase": false, "constructor": false}, {"identifier": "throwIfThrowable", "parameters": "(Throwable e)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Exception", "signature": "Exception throwIfThrowable(Throwable e)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Exception throwIfThrowable(Throwable e)", "class_method_signature": "ExceptionHelper.throwIfThrowable(Throwable e)", "testcase": false, "constructor": false}], "file": "rxjava/src/main/java/io/reactivex/internal/util/ExceptionHelper.java"}, "focal_method": {"identifier": "addThrowable", "parameters": "(AtomicReference<Throwable> field, Throwable exception)", "modifiers": "public static", "return": "boolean", "body": "public static <T> boolean addThrowable(AtomicReference<Throwable> field, Throwable exception) {\n        for (;;) {\n            Throwable current = field.get();\n\n            if (current == TERMINATED) {\n                return false;\n            }\n\n            Throwable update;\n            if (current == null) {\n                update = exception;\n            } else {\n                update = new CompositeException(current, exception);\n            }\n\n            if (field.compareAndSet(current, update)) {\n                return true;\n            }\n        }\n    }", "signature": "boolean addThrowable(AtomicReference<Throwable> field, Throwable exception)", "full_signature": "public static boolean addThrowable(AtomicReference<Throwable> field, Throwable exception)", "class_method_signature": "ExceptionHelper.addThrowable(AtomicReference<Throwable> field, Throwable exception)", "testcase": false, "constructor": false, "invocations": ["get", "compareAndSet"]}, "repository": {"repo_id": 128274093, "url": "https://github.com/artem-zinnatullin/error-prone-performance", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 13, "size": 22484, "license": "licensed"}}