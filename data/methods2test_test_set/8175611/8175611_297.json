{"test_class": {"identifier": "DataConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "@SuppressFBWarnings(value = \"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD\", justification = \"Mockito rule needs no further configuration\")\n    @Rule\n    public MockitoRule mockitoRule = MockitoJUnit.rule();", "modifier": "@SuppressFBWarnings(value = \"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD\", justification = \"Mockito rule needs no further configuration\")\n    @Rule\n    public", "type": "MockitoRule", "declarator": "mockitoRule = MockitoJUnit.rule()", "var_name": "mockitoRule"}, {"original_string": "@InjectMocks\n    private DataConverter underTest;", "modifier": "@InjectMocks\n    private", "type": "DataConverter", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "private ConverterContext context;", "modifier": "private", "type": "ConverterContext", "declarator": "context", "var_name": "context"}, {"original_string": "@Mock\n    private ObjectArrayConverter objectArrayConverter;", "modifier": "@Mock\n    private", "type": "ObjectArrayConverter", "declarator": "objectArrayConverter", "var_name": "objectArrayConverter"}, {"original_string": "@Mock\n    private SingleArgConverter singleArgConverter;", "modifier": "@Mock\n    private", "type": "SingleArgConverter", "declarator": "singleArgConverter", "var_name": "singleArgConverter"}, {"original_string": "@Mock\n    private StringConverter stringConverter;", "modifier": "@Mock\n    private", "type": "StringConverter", "declarator": "stringConverter", "var_name": "stringConverter"}], "file": "core/src/test/java/com/tngtech/junit/dataprovider/convert/DataConverterTest.java"}, "test_case": {"identifier": "testConvertShouldCallStringConverterOnlyOnceForStringArrayWithOneElement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testConvertShouldCallStringConverterOnlyOnceForStringArrayWithOneElement() {\n        // Given:\n        String[] data = new String[] { \"foo,true\" };\n        Class<?>[] parameterTypes = new Class<?>[] { String.class, boolean.class };\n\n        // When:\n        List<Object[]> result = underTest.convert(data, true, parameterTypes, context);\n\n        // Then:\n        assertThat(result).hasSize(1);\n        verify(stringConverter).convert(data[0], true, parameterTypes, context, 0);\n        verifyNoMoreInteractions(objectArrayConverter, singleArgConverter, stringConverter);\n    }", "signature": "void testConvertShouldCallStringConverterOnlyOnceForStringArrayWithOneElement()", "full_signature": "@Test public void testConvertShouldCallStringConverterOnlyOnceForStringArrayWithOneElement()", "class_method_signature": "DataConverterTest.testConvertShouldCallStringConverterOnlyOnceForStringArrayWithOneElement()", "testcase": true, "constructor": false, "invocations": ["convert", "hasSize", "assertThat", "convert", "verify", "verifyNoMoreInteractions"]}, "focal_class": {"identifier": "DataConverter", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "convert", "parameters": "(Object data, boolean isVarargs, Class<?>[] parameterTypes, ConverterContext context)", "modifiers": "public", "return": "List<Object[]>", "signature": "List<Object[]> convert(Object data, boolean isVarargs, Class<?>[] parameterTypes, ConverterContext context)", "full_signature": "public List<Object[]> convert(Object data, boolean isVarargs, Class<?>[] parameterTypes, ConverterContext context)", "class_method_signature": "DataConverter.convert(Object data, boolean isVarargs, Class<?>[] parameterTypes, ConverterContext context)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Object[][] data, boolean isVarargs, Class<?>[] parameterTypes,\n            ConverterContext config)", "modifiers": "private", "return": "List<Object[]>", "signature": "List<Object[]> convert(Object[][] data, boolean isVarargs, Class<?>[] parameterTypes,\n            ConverterContext config)", "full_signature": "private List<Object[]> convert(Object[][] data, boolean isVarargs, Class<?>[] parameterTypes,\n            ConverterContext config)", "class_method_signature": "DataConverter.convert(Object[][] data, boolean isVarargs, Class<?>[] parameterTypes,\n            ConverterContext config)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(String[] data, boolean isVarargs, Class<?>[] parameterTypes,\n            ConverterContext context)", "modifiers": "private", "return": "List<Object[]>", "signature": "List<Object[]> convert(String[] data, boolean isVarargs, Class<?>[] parameterTypes,\n            ConverterContext context)", "full_signature": "private List<Object[]> convert(String[] data, boolean isVarargs, Class<?>[] parameterTypes,\n            ConverterContext context)", "class_method_signature": "DataConverter.convert(String[] data, boolean isVarargs, Class<?>[] parameterTypes,\n            ConverterContext context)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Object[] data, boolean isVarargs, Class<?>[] parameterTypes,\n            ConverterContext context)", "modifiers": "private", "return": "List<Object[]>", "signature": "List<Object[]> convert(Object[] data, boolean isVarargs, Class<?>[] parameterTypes,\n            ConverterContext context)", "full_signature": "private List<Object[]> convert(Object[] data, boolean isVarargs, Class<?>[] parameterTypes,\n            ConverterContext context)", "class_method_signature": "DataConverter.convert(Object[] data, boolean isVarargs, Class<?>[] parameterTypes,\n            ConverterContext context)", "testcase": false, "constructor": false}, {"identifier": "convert", "parameters": "(Iterable<?> data, boolean isVarargs, Class<?>[] parameterTypes,\n            ConverterContext context)", "modifiers": "private", "return": "List<Object[]>", "signature": "List<Object[]> convert(Iterable<?> data, boolean isVarargs, Class<?>[] parameterTypes,\n            ConverterContext context)", "full_signature": "private List<Object[]> convert(Iterable<?> data, boolean isVarargs, Class<?>[] parameterTypes,\n            ConverterContext context)", "class_method_signature": "DataConverter.convert(Iterable<?> data, boolean isVarargs, Class<?>[] parameterTypes,\n            ConverterContext context)", "testcase": false, "constructor": false}, {"identifier": "toArray", "parameters": "(Iterable<?> iterable)", "modifiers": "private", "return": "Object[]", "signature": "Object[] toArray(Iterable<?> iterable)", "full_signature": "private Object[] toArray(Iterable<?> iterable)", "class_method_signature": "DataConverter.toArray(Iterable<?> iterable)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/tngtech/junit/dataprovider/convert/DataConverter.java"}, "focal_method": {"identifier": "convert", "parameters": "(Object data, boolean isVarargs, Class<?>[] parameterTypes, ConverterContext context)", "modifiers": "public", "return": "List<Object[]>", "body": "public List<Object[]> convert(Object data, boolean isVarargs, Class<?>[] parameterTypes, ConverterContext context) {\n        checkNotNull(parameterTypes, \"'parameterTypes' must not be null\");\n        checkArgument(parameterTypes.length != 0, \"'parameterTypes' must not be empty\");\n\n        if (data instanceof Object[][]) {\n            return convert((Object[][]) data, isVarargs, parameterTypes, context);\n\n        } else if (data instanceof String[]) {\n            checkState(context != null, \"'context' must not be null for 'String[]' data\");\n            return convert((String[]) data, isVarargs, parameterTypes, context);\n\n        } else if (data instanceof Object[]) {\n            return convert((Object[]) data, isVarargs, parameterTypes, context);\n\n        } else if (data instanceof Iterable) {\n            @SuppressWarnings(\"rawtypes\")\n            Iterable iterableData = (Iterable) data;\n            return convert(iterableData, isVarargs, parameterTypes, context);\n        }\n        throw new ClassCastException(\n                String.format(\"Cannot cast to either Object[][], Object[], String[], or Iterable because data was: %s\", data));\n    }", "signature": "List<Object[]> convert(Object data, boolean isVarargs, Class<?>[] parameterTypes, ConverterContext context)", "full_signature": "public List<Object[]> convert(Object data, boolean isVarargs, Class<?>[] parameterTypes, ConverterContext context)", "class_method_signature": "DataConverter.convert(Object data, boolean isVarargs, Class<?>[] parameterTypes, ConverterContext context)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "checkArgument", "convert", "checkState", "convert", "convert", "convert", "format"]}, "repository": {"repo_id": 8175611, "url": "https://github.com/TNG/junit-dataprovider", "language": "Java", "is_fork": false, "fork_count": 37, "stargazer_count": 215, "size": 1383, "license": "licensed"}}