{"test_class": {"identifier": "RDBERuleTest", "superclass": "extends FormulaRuleTest", "interfaces": "", "fields": [{"original_string": "private static IChemObjectBuilder builder;", "modifier": "private static", "type": "IChemObjectBuilder", "declarator": "builder", "var_name": "builder"}], "file": "tool/formula/src/test/java/org/openscience/cdk/formula/rules/RDBERuleTest.java"}, "test_case": {"identifier": "testB", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testB() throws ClassNotFoundException, CDKException, Exception {\n\n        RDBERule rule = new RDBERule();\n\n        IMolecularFormula formula = MolecularFormulaManipulator.getMajorIsotopeMolecularFormula(\"C6H9BNO2\", builder);\n        formula.setCharge(1);\n\n        Assert.assertEquals(1.0, rule.validate(formula), 0.0001);\n    }", "signature": "void testB()", "full_signature": "@Test public void testB()", "class_method_signature": "RDBERuleTest.testB()", "testcase": true, "constructor": false, "invocations": ["getMajorIsotopeMolecularFormula", "setCharge", "assertEquals", "validate"]}, "focal_class": {"identifier": "RDBERule", "superclass": "", "interfaces": "implements IRule", "fields": [{"original_string": "private static Map<String, int[]> oxidationStateTable = null;", "modifier": "private static", "type": "Map<String, int[]>", "declarator": "oxidationStateTable = null", "var_name": "oxidationStateTable"}, {"original_string": "private static ILoggingTool       logger              = LoggingToolFactory.createLoggingTool(RDBERule.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger              = LoggingToolFactory.createLoggingTool(RDBERule.class)", "var_name": "logger"}, {"original_string": "private double                    min                 = -0.5;", "modifier": "private", "type": "double", "declarator": "min                 = -0.5", "var_name": "min"}, {"original_string": "private double                    max                 = 30;", "modifier": "private", "type": "double", "declarator": "max                 = 30", "var_name": "max"}], "methods": [{"identifier": "RDBERule", "parameters": "()", "modifiers": "public", "return": "", "signature": " RDBERule()", "full_signature": "public  RDBERule()", "class_method_signature": "RDBERule.RDBERule()", "testcase": false, "constructor": true}, {"identifier": "setParameters", "parameters": "(Object[] params)", "modifiers": "@Override public", "return": "void", "signature": "void setParameters(Object[] params)", "full_signature": "@Override public void setParameters(Object[] params)", "class_method_signature": "RDBERule.setParameters(Object[] params)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "Object[]", "signature": "Object[] getParameters()", "full_signature": "@Override public Object[] getParameters()", "class_method_signature": "RDBERule.getParameters()", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(IMolecularFormula formula)", "modifiers": "@Override public", "return": "double", "signature": "double validate(IMolecularFormula formula)", "full_signature": "@Override public double validate(IMolecularFormula formula)", "class_method_signature": "RDBERule.validate(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(IMolecularFormula formula, double value)", "modifiers": "public", "return": "boolean", "signature": "boolean validate(IMolecularFormula formula, double value)", "full_signature": "public boolean validate(IMolecularFormula formula, double value)", "class_method_signature": "RDBERule.validate(IMolecularFormula formula, double value)", "testcase": false, "constructor": false}, {"identifier": "getRDBEValue", "parameters": "(IMolecularFormula formula)", "modifiers": "public", "return": "List<Double>", "signature": "List<Double> getRDBEValue(IMolecularFormula formula)", "full_signature": "public List<Double> getRDBEValue(IMolecularFormula formula)", "class_method_signature": "RDBERule.getRDBEValue(IMolecularFormula formula)", "testcase": false, "constructor": false}, {"identifier": "getOxidationState", "parameters": "(IAtom newAtom)", "modifiers": "private", "return": "int[]", "signature": "int[] getOxidationState(IAtom newAtom)", "full_signature": "private int[] getOxidationState(IAtom newAtom)", "class_method_signature": "RDBERule.getOxidationState(IAtom newAtom)", "testcase": false, "constructor": false}, {"identifier": "createTable", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void createTable()", "full_signature": "private void createTable()", "class_method_signature": "RDBERule.createTable()", "testcase": false, "constructor": false}], "file": "tool/formula/src/main/java/org/openscience/cdk/formula/rules/RDBERule.java"}, "focal_method": {"identifier": "validate", "parameters": "(IMolecularFormula formula)", "modifiers": "@Override public", "return": "double", "body": "@Override\n    public double validate(IMolecularFormula formula) throws CDKException {\n        logger.info(\"Start validation of \", formula);\n\n        List<Double> RDBEList = getRDBEValue(formula);\n        for (Iterator<Double> it = RDBEList.iterator(); it.hasNext();) {\n            double RDBE = it.next();\n            if (min <= RDBE && RDBE <= 30) if (validate(formula, RDBE)) return 1.0;\n        }\n\n        return 0.0;\n\n    }", "signature": "double validate(IMolecularFormula formula)", "full_signature": "@Override public double validate(IMolecularFormula formula)", "class_method_signature": "RDBERule.validate(IMolecularFormula formula)", "testcase": false, "constructor": false, "invocations": ["info", "getRDBEValue", "iterator", "hasNext", "next", "validate"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}