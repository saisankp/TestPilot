{"test_class": {"identifier": "PreparationStepMarkerTest", "superclass": "", "interfaces": "", "fields": [], "file": "dataprep-maintenance/src/test/java/org/talend/dataprep/maintenance/preparation/PreparationStepMarkerTest.java"}, "test_case": {"identifier": "shouldDisableCleanUpAtStart", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldDisableCleanUpAtStart() {\n        // Given\n        final UUID stepMarker = UUID.randomUUID();\n        final StepMarker marker = new PreparationStepMarker();\n        final PreparationRepository repository = mock(PreparationRepository.class);\n        when(repository.exist(eq(Preparation.class), any())).thenReturn(true);\n\n        // When\n        final StepMarker.Result result = marker.mark(repository, stepMarker);\n\n        // Then\n        assertEquals(StepMarker.Result.INTERRUPTED, result);\n    }", "signature": "void shouldDisableCleanUpAtStart()", "full_signature": "@Test public void shouldDisableCleanUpAtStart()", "class_method_signature": "PreparationStepMarkerTest.shouldDisableCleanUpAtStart()", "testcase": true, "constructor": false, "invocations": ["randomUUID", "mock", "thenReturn", "when", "exist", "eq", "any", "mark", "assertEquals"]}, "focal_class": {"identifier": "PreparationStepMarker", "superclass": "", "interfaces": "implements StepMarker", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(PreparationStepMarker.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PreparationStepMarker.class)", "var_name": "LOGGER"}, {"original_string": "@Value(\"${cleaner.recently.modified:3600}\")\n    private int recentlyModified;", "modifier": "@Value(\"${cleaner.recently.modified:3600}\")\n    private", "type": "int", "declarator": "recentlyModified", "var_name": "recentlyModified"}], "methods": [{"identifier": "logRecentlyModified", "parameters": "(PreparationRepository repository)", "modifiers": "private", "return": "void", "signature": "void logRecentlyModified(PreparationRepository repository)", "full_signature": "private void logRecentlyModified(PreparationRepository repository)", "class_method_signature": "PreparationStepMarker.logRecentlyModified(PreparationRepository repository)", "testcase": false, "constructor": false}, {"identifier": "recentlyModified", "parameters": "()", "modifiers": "private", "return": "Expression", "signature": "Expression recentlyModified()", "full_signature": "private Expression recentlyModified()", "class_method_signature": "PreparationStepMarker.recentlyModified()", "testcase": false, "constructor": false}, {"identifier": "mark", "parameters": "(PreparationRepository repository, UUID marker)", "modifiers": "@Override public", "return": "Result", "signature": "Result mark(PreparationRepository repository, UUID marker)", "full_signature": "@Override public Result mark(PreparationRepository repository, UUID marker)", "class_method_signature": "PreparationStepMarker.mark(PreparationRepository repository, UUID marker)", "testcase": false, "constructor": false}], "file": "dataprep-maintenance/src/main/java/org/talend/dataprep/maintenance/preparation/PreparationStepMarker.java"}, "focal_method": {"identifier": "mark", "parameters": "(PreparationRepository repository, UUID marker)", "modifiers": "@Override public", "return": "Result", "body": "@Override\n    public Result mark(PreparationRepository repository, UUID marker) {\n        if (repository.exist(Preparation.class, recentlyModified())) {\n            LOGGER.info(\"Not running clean up (at least a preparation modified within last hour).\");\n            logRecentlyModified(repository);\n            return Result.INTERRUPTED;\n        }\n\n        final AtomicBoolean interrupted = new AtomicBoolean(false);\n        repository\n                .list(Preparation.class) //\n                .filter(p -> !interrupted.get()) //\n                .forEach(p -> {\n                    if (repository.exist(Preparation.class, recentlyModified())) {\n                        LOGGER.info(\"Interrupting clean up (preparation modified within last hour).\");\n                        logRecentlyModified(repository);\n                        interrupted.set(true);\n                        return;\n                    }\n                    final Collection<Identifiable> markedSteps = p\n                            .getSteps() //\n                            .stream() //\n                            .filter(s -> !Objects.equals(s, Step.ROOT_STEP))\n                            .peek(s -> s.setMarker(marker.toString())) //\n                            .collect(Collectors.toList());\n                    repository.add(markedSteps);\n                });\n        return interrupted.get() ? Result.INTERRUPTED : Result.COMPLETED;\n    }", "signature": "Result mark(PreparationRepository repository, UUID marker)", "full_signature": "@Override public Result mark(PreparationRepository repository, UUID marker)", "class_method_signature": "PreparationStepMarker.mark(PreparationRepository repository, UUID marker)", "testcase": false, "constructor": false, "invocations": ["exist", "recentlyModified", "info", "logRecentlyModified", "forEach", "filter", "list", "get", "exist", "recentlyModified", "info", "logRecentlyModified", "set", "collect", "peek", "filter", "stream", "getSteps", "equals", "setMarker", "toString", "toList", "add", "get"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}