{"test_class": {"identifier": "FeatureRowToStoreAllocatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule public transient TestPipeline p = TestPipeline.create();", "modifier": "@Rule public transient", "type": "TestPipeline", "declarator": "p = TestPipeline.create()", "var_name": "p"}], "file": "ingestion/src/test/java/feast/ingestion/transform/FeatureRowToStoreAllocatorTest.java"}, "test_case": {"identifier": "featureRowShouldBeAllocatedToStoreTagsAccordingToSubscription", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void featureRowShouldBeAllocatedToStoreTagsAccordingToSubscription() {\n    StoreProto.Store bqOnlyStore = newStore(\"bq*\");\n    StoreProto.Store redisOnlyStore = newStore(\"redis*\");\n    StoreProto.Store anyStore = newStore(\"*\");\n\n    Map<StoreProto.Store, TupleTag<FeatureRowProto.FeatureRow>> storeTags =\n        ImmutableMap.of(\n            bqOnlyStore, new TupleTag<>(),\n            redisOnlyStore, new TupleTag<>(),\n            anyStore, new TupleTag<>());\n\n    PCollectionTuple allocatedRows =\n        p.apply(\n                Create.of(\n                    FeatureRowProto.FeatureRow.newBuilder().setFeatureSet(\"project/bq_1\").build(),\n                    FeatureRowProto.FeatureRow.newBuilder().setFeatureSet(\"project/bq_2\").build(),\n                    FeatureRowProto.FeatureRow.newBuilder()\n                        .setFeatureSet(\"project/redis_1\")\n                        .build(),\n                    FeatureRowProto.FeatureRow.newBuilder()\n                        .setFeatureSet(\"project/redis_2\")\n                        .build(),\n                    FeatureRowProto.FeatureRow.newBuilder()\n                        .setFeatureSet(\"project/redis_3\")\n                        .build()))\n            .apply(\n                FeatureRowToStoreAllocator.newBuilder()\n                    .setStoreTags(storeTags)\n                    .setStores(ImmutableList.of(bqOnlyStore, redisOnlyStore, anyStore))\n                    .build());\n\n    PAssert.that(\n            allocatedRows\n                .get(storeTags.get(bqOnlyStore))\n                .setCoder(ProtoCoder.of(FeatureRowProto.FeatureRow.class))\n                .apply(\"CountBq\", Count.globally()))\n        .containsInAnyOrder(2L);\n\n    PAssert.that(\n            allocatedRows\n                .get(storeTags.get(redisOnlyStore))\n                .setCoder(ProtoCoder.of(FeatureRowProto.FeatureRow.class))\n                .apply(\"CountRedis\", Count.globally()))\n        .containsInAnyOrder(3L);\n\n    PAssert.that(\n            allocatedRows\n                .get(storeTags.get(anyStore))\n                .setCoder(ProtoCoder.of(FeatureRowProto.FeatureRow.class))\n                .apply(\"CountAll\", Count.globally()))\n        .containsInAnyOrder(5L);\n\n    p.run();\n  }", "signature": "void featureRowShouldBeAllocatedToStoreTagsAccordingToSubscription()", "full_signature": "@Test public void featureRowShouldBeAllocatedToStoreTagsAccordingToSubscription()", "class_method_signature": "FeatureRowToStoreAllocatorTest.featureRowShouldBeAllocatedToStoreTagsAccordingToSubscription()", "testcase": true, "constructor": false, "invocations": ["newStore", "newStore", "newStore", "of", "apply", "apply", "of", "build", "setFeatureSet", "newBuilder", "build", "setFeatureSet", "newBuilder", "build", "setFeatureSet", "newBuilder", "build", "setFeatureSet", "newBuilder", "build", "setFeatureSet", "newBuilder", "build", "setStores", "setStoreTags", "newBuilder", "of", "containsInAnyOrder", "that", "apply", "setCoder", "get", "get", "of", "globally", "containsInAnyOrder", "that", "apply", "setCoder", "get", "get", "of", "globally", "containsInAnyOrder", "that", "apply", "setCoder", "get", "get", "of", "globally", "run"]}, "focal_class": {"identifier": "FeatureRowToStoreAllocator", "superclass": "extends PTransform<PCollection<FeatureRowProto.FeatureRow>, PCollectionTuple>", "interfaces": "", "fields": [], "methods": [{"identifier": "getStores", "parameters": "()", "modifiers": "public abstract", "return": "List<StoreProto.Store>", "signature": "List<StoreProto.Store> getStores()", "full_signature": "public abstract List<StoreProto.Store> getStores()", "class_method_signature": "FeatureRowToStoreAllocator.getStores()", "testcase": false, "constructor": false}, {"identifier": "getStoreTags", "parameters": "()", "modifiers": "public abstract", "return": "Map<StoreProto.Store, TupleTag<FeatureRowProto.FeatureRow>>", "signature": "Map<StoreProto.Store, TupleTag<FeatureRowProto.FeatureRow>> getStoreTags()", "full_signature": "public abstract Map<StoreProto.Store, TupleTag<FeatureRowProto.FeatureRow>> getStoreTags()", "class_method_signature": "FeatureRowToStoreAllocator.getStoreTags()", "testcase": false, "constructor": false}, {"identifier": "newBuilder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder newBuilder()", "full_signature": "public static Builder newBuilder()", "class_method_signature": "FeatureRowToStoreAllocator.newBuilder()", "testcase": false, "constructor": false}, {"identifier": "expand", "parameters": "(PCollection<FeatureRowProto.FeatureRow> input)", "modifiers": "@Override public", "return": "PCollectionTuple", "signature": "PCollectionTuple expand(PCollection<FeatureRowProto.FeatureRow> input)", "full_signature": "@Override public PCollectionTuple expand(PCollection<FeatureRowProto.FeatureRow> input)", "class_method_signature": "FeatureRowToStoreAllocator.expand(PCollection<FeatureRowProto.FeatureRow> input)", "testcase": false, "constructor": false}], "file": "ingestion/src/main/java/feast/ingestion/transform/FeatureRowToStoreAllocator.java"}, "focal_method": {"identifier": "newBuilder", "parameters": "()", "modifiers": "public static", "return": "Builder", "body": "public static Builder newBuilder() {\n    return new AutoValue_FeatureRowToStoreAllocator.Builder();\n  }", "signature": "Builder newBuilder()", "full_signature": "public static Builder newBuilder()", "class_method_signature": "FeatureRowToStoreAllocator.newBuilder()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 161133770, "url": "https://github.com/gojek/feast", "stars": 633, "created": "12/10/2018 7:20:15 AM +00:00", "updates": "2020-01-27T12:39:33+00:00", "fork": "False", "license": "licensed"}}