{"test_class": {"identifier": "IconPropertyTest", "superclass": "", "interfaces": "", "fields": [], "file": "observable-ui/testSrc/com/android/tools/idea/observable/ui/IconPropertyTest.java"}, "test_case": {"identifier": "iconPropertyCanWrapButton", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void iconPropertyCanWrapButton() throws Exception {\n    JButton button = new JButton();\n    Icon dummyIcon = new DummyIcon();\n\n    IconProperty iconProperty = new IconProperty(button);\n    CountListener listener = new CountListener();\n    iconProperty.addListener(listener);\n\n    assertThat(iconProperty.get().isPresent()).isFalse();\n    assertThat(listener.getCount()).isEqualTo(0);\n\n    button.setIcon(dummyIcon);\n    assertThat(iconProperty.get().isPresent()).isTrue();\n    assertThat(iconProperty.getValue()).isEqualTo(dummyIcon);\n    assertThat(listener.getCount()).isEqualTo(1);\n\n    button.setIcon(null);\n    assertThat(iconProperty.get().isPresent()).isFalse();\n    assertThat(listener.getCount()).isEqualTo(2);\n  }", "signature": "void iconPropertyCanWrapButton()", "full_signature": "@Test public void iconPropertyCanWrapButton()", "class_method_signature": "IconPropertyTest.iconPropertyCanWrapButton()", "testcase": true, "constructor": false, "invocations": ["addListener", "isFalse", "assertThat", "isPresent", "get", "isEqualTo", "assertThat", "getCount", "setIcon", "isTrue", "assertThat", "isPresent", "get", "isEqualTo", "assertThat", "getValue", "isEqualTo", "assertThat", "getCount", "setIcon", "isFalse", "assertThat", "isPresent", "get", "isEqualTo", "assertThat", "getCount"]}, "focal_class": {"identifier": "IconProperty", "superclass": "extends OptionalProperty<Icon>", "interfaces": "implements PropertyChangeListener", "fields": [{"original_string": "@NotNull private final JComponent myComponent;", "modifier": "@NotNull private final", "type": "JComponent", "declarator": "myComponent", "var_name": "myComponent"}], "methods": [{"identifier": "IconProperty", "parameters": "(@NotNull JLabel label)", "modifiers": "public", "return": "", "signature": " IconProperty(@NotNull JLabel label)", "full_signature": "public  IconProperty(@NotNull JLabel label)", "class_method_signature": "IconProperty.IconProperty(@NotNull JLabel label)", "testcase": false, "constructor": true}, {"identifier": "IconProperty", "parameters": "(@NotNull AbstractButton button)", "modifiers": "public", "return": "", "signature": " IconProperty(@NotNull AbstractButton button)", "full_signature": "public  IconProperty(@NotNull AbstractButton button)", "class_method_signature": "IconProperty.IconProperty(@NotNull AbstractButton button)", "testcase": false, "constructor": true}, {"identifier": "propertyChange", "parameters": "(PropertyChangeEvent propertyChangeEvent)", "modifiers": "@Override public", "return": "void", "signature": "void propertyChange(PropertyChangeEvent propertyChangeEvent)", "full_signature": "@Override public void propertyChange(PropertyChangeEvent propertyChangeEvent)", "class_method_signature": "IconProperty.propertyChange(PropertyChangeEvent propertyChangeEvent)", "testcase": false, "constructor": false}, {"identifier": "setDirectly", "parameters": "(@NotNull Optional<Icon> value)", "modifiers": "@Override protected", "return": "void", "signature": "void setDirectly(@NotNull Optional<Icon> value)", "full_signature": "@Override protected void setDirectly(@NotNull Optional<Icon> value)", "class_method_signature": "IconProperty.setDirectly(@NotNull Optional<Icon> value)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Optional<Icon>", "signature": "Optional<Icon> get()", "full_signature": "@NotNull @Override public Optional<Icon> get()", "class_method_signature": "IconProperty.get()", "testcase": false, "constructor": false}], "file": "observable-ui/src/com/android/tools/idea/observable/ui/IconProperty.java"}, "focal_method": {"identifier": "get", "parameters": "()", "modifiers": "@NotNull @Override public", "return": "Optional<Icon>", "body": "@NotNull\n  @Override\n  public Optional<Icon> get() {\n    if (myComponent instanceof JLabel) {\n      return Optional.ofNullable(((JLabel)myComponent).getIcon());\n    }\n    else if (myComponent instanceof AbstractButton) {\n      return Optional.ofNullable(((AbstractButton)myComponent).getIcon());\n    }\n    else {\n      throw new IllegalStateException(\"Unexpected icon component type: \" + myComponent.getClass().getSimpleName());\n    }\n  }", "signature": "Optional<Icon> get()", "full_signature": "@NotNull @Override public Optional<Icon> get()", "class_method_signature": "IconProperty.get()", "testcase": false, "constructor": false, "invocations": ["ofNullable", "getIcon", "ofNullable", "getIcon", "getSimpleName", "getClass"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}