{"test_class": {"identifier": "TreeBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/modules/common/src/test/java/org/onetwo/common/tree/TreeBuilderTest.java"}, "test_case": {"identifier": "testBuildTree", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testBuildTree() {\n\t\tTreeNodeDataTest data1 = new TreeNodeDataTest(1L, null, \"node1\");\n\t\tTreeNodeDataTest data2 = new TreeNodeDataTest(2L, 1L, \"node2\");\n\t\tTreeNodeDataTest data3 = new TreeNodeDataTest(3L, 2L, \"node3\");\n\t\tTreeNodeDataTest data4 = new TreeNodeDataTest(4L, 1L, \"node4\");\n\t\tTreeNodeDataTest data5 = new TreeNodeDataTest(5L, 4L, \"node5\");\n\t\tList<TreeNodeDataTest> datas = Lists.newArrayList(data1, data2, data3, data4, data5);\n\t\t\n\t\tList<DefaultTreeModel> models = datas.stream().map(d->{\n\t\t\treturn new DefaultTreeModel(d.getId(), d.getName(), d.getParentId());\n\t\t}).collect(Collectors.toList());\n\t\tTreeBuilder<DefaultTreeModel> treeBuilder = new TreeBuilder<>(models);\n\t\tList<DefaultTreeModel> roots = treeBuilder.buidTree();\n\t\tSystem.out.println(\"roots: \\n\" + roots.get(0));\n\t\t\n\t\tStringBuilder str = new StringBuilder();\n\t\tTreeUtils.buildString(str, roots.get(0), \"--\");\n\t\tSystem.out.println(\"roots: \\n\" + str);\n\t}", "signature": "void testBuildTree()", "full_signature": "@Test public void testBuildTree()", "class_method_signature": "TreeBuilderTest.testBuildTree()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "collect", "map", "stream", "getId", "getName", "getParentId", "toList", "buidTree", "println", "get", "buildString", "get", "println"]}, "focal_class": {"identifier": "TreeBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(this.getClass());", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(this.getClass())", "var_name": "logger"}, {"original_string": "private Comparator<TM> comparator = new SortComparator<>();", "modifier": "private", "type": "Comparator<TM>", "declarator": "comparator = new SortComparator<>()", "var_name": "comparator"}, {"original_string": "private final ParentNodeNotFoundAction<TM> THROW_ERROR = node->{\n\t\tthrow new RuntimeException(\"build tree error: can't not find the node[\" + node.getId() + \", \" + node.getName() + \"]'s parent node[\" + node.getParentId() + \"]\");\n\t};", "modifier": "private final", "type": "ParentNodeNotFoundAction<TM>", "declarator": "THROW_ERROR = node->{\n\t\tthrow new RuntimeException(\"build tree error: can't not find the node[\" + node.getId() + \", \" + node.getName() + \"]'s parent node[\" + node.getParentId() + \"]\");\n\t}", "var_name": "THROW_ERROR"}, {"original_string": "private final ParentNodeNotFoundAction<TM> IGNORE = node->{\n\t\tlogger.error(\"build tree error: can't not find the node[\" + node.getId() + \", \" + node.getName() + \"]'s parent node[\" + node.getParentId() + \"]\");\n\t\treturn null;\n\t};", "modifier": "private final", "type": "ParentNodeNotFoundAction<TM>", "declarator": "IGNORE = node->{\n\t\tlogger.error(\"build tree error: can't not find the node[\" + node.getId() + \", \" + node.getName() + \"]'s parent node[\" + node.getParentId() + \"]\");\n\t\treturn null;\n\t}", "var_name": "IGNORE"}, {"original_string": "final private Map<Object, TM> nodeMap = new LinkedHashMap<Object, TM>();", "modifier": "final private", "type": "Map<Object, TM>", "declarator": "nodeMap = new LinkedHashMap<Object, TM>()", "var_name": "nodeMap"}, {"original_string": "private List<TM> rootNodes = new ArrayList<TM>();", "modifier": "private", "type": "List<TM>", "declarator": "rootNodes = new ArrayList<TM>()", "var_name": "rootNodes"}, {"original_string": "private RootNodeFunc<TM> rootNodeFunc;", "modifier": "private", "type": "RootNodeFunc<TM>", "declarator": "rootNodeFunc", "var_name": "rootNodeFunc"}, {"original_string": "private ParentNodeNotFoundAction<TM> parentNotFoundAction = THROW_ERROR;", "modifier": "private", "type": "ParentNodeNotFoundAction<TM>", "declarator": "parentNotFoundAction = THROW_ERROR", "var_name": "parentNotFoundAction"}], "methods": [{"identifier": "TreeBuilder", "parameters": "(Collection<TM> datas)", "modifiers": "public", "return": "", "signature": " TreeBuilder(Collection<TM> datas)", "full_signature": "public  TreeBuilder(Collection<TM> datas)", "class_method_signature": "TreeBuilder.TreeBuilder(Collection<TM> datas)", "testcase": false, "constructor": true}, {"identifier": "TreeBuilder", "parameters": "(Collection<T> datas, TreeModelCreator<TM, T> treeNodeCreator)", "modifiers": "public", "return": "<T>", "signature": "<T> TreeBuilder(Collection<T> datas, TreeModelCreator<TM, T> treeNodeCreator)", "full_signature": "public <T> TreeBuilder(Collection<T> datas, TreeModelCreator<TM, T> treeNodeCreator)", "class_method_signature": "TreeBuilder.TreeBuilder(Collection<T> datas, TreeModelCreator<TM, T> treeNodeCreator)", "testcase": false, "constructor": true}, {"identifier": "TreeBuilder", "parameters": "(Collection<T> datas, TreeModelCreator<TM, T> treeNodeCreator, Comparator<TM> comparator)", "modifiers": "public", "return": "<T>", "signature": "<T> TreeBuilder(Collection<T> datas, TreeModelCreator<TM, T> treeNodeCreator, Comparator<TM> comparator)", "full_signature": "public <T> TreeBuilder(Collection<T> datas, TreeModelCreator<TM, T> treeNodeCreator, Comparator<TM> comparator)", "class_method_signature": "TreeBuilder.TreeBuilder(Collection<T> datas, TreeModelCreator<TM, T> treeNodeCreator, Comparator<TM> comparator)", "testcase": false, "constructor": true}, {"identifier": "sortAndPutToMap", "parameters": "(List<TM> datas)", "modifiers": "private final", "return": "void", "signature": "void sortAndPutToMap(List<TM> datas)", "full_signature": "private final void sortAndPutToMap(List<TM> datas)", "class_method_signature": "TreeBuilder.sortAndPutToMap(List<TM> datas)", "testcase": false, "constructor": false}, {"identifier": "rootIds", "parameters": "(Object...objects)", "modifiers": "public", "return": "TreeBuilder<TM>", "signature": "TreeBuilder<TM> rootIds(Object...objects)", "full_signature": "public TreeBuilder<TM> rootIds(Object...objects)", "class_method_signature": "TreeBuilder.rootIds(Object...objects)", "testcase": false, "constructor": false}, {"identifier": "rootNodeFunc", "parameters": "(RootNodeFunc<TM> rootNodeFunc)", "modifiers": "public", "return": "TreeBuilder<TM>", "signature": "TreeBuilder<TM> rootNodeFunc(RootNodeFunc<TM> rootNodeFunc)", "full_signature": "public TreeBuilder<TM> rootNodeFunc(RootNodeFunc<TM> rootNodeFunc)", "class_method_signature": "TreeBuilder.rootNodeFunc(RootNodeFunc<TM> rootNodeFunc)", "testcase": false, "constructor": false}, {"identifier": "ignoreParentNotFound", "parameters": "()", "modifiers": "public", "return": "TreeBuilder<TM>", "signature": "TreeBuilder<TM> ignoreParentNotFound()", "full_signature": "public TreeBuilder<TM> ignoreParentNotFound()", "class_method_signature": "TreeBuilder.ignoreParentNotFound()", "testcase": false, "constructor": false}, {"identifier": "parentNotFound", "parameters": "(ParentNodeNotFoundAction<TM> parentNotFoundAction)", "modifiers": "public", "return": "TreeBuilder<TM>", "signature": "TreeBuilder<TM> parentNotFound(ParentNodeNotFoundAction<TM> parentNotFoundAction)", "full_signature": "public TreeBuilder<TM> parentNotFound(ParentNodeNotFoundAction<TM> parentNotFoundAction)", "class_method_signature": "TreeBuilder.parentNotFound(ParentNodeNotFoundAction<TM> parentNotFoundAction)", "testcase": false, "constructor": false}, {"identifier": "buidTree", "parameters": "()", "modifiers": "public", "return": "List<TM>", "signature": "List<TM> buidTree()", "full_signature": "public List<TM> buidTree()", "class_method_signature": "TreeBuilder.buidTree()", "testcase": false, "constructor": false}, {"identifier": "buidTree", "parameters": "(ParentNodeNotFoundAction<TM> notFoundAction)", "modifiers": "public", "return": "List<TM>", "signature": "List<TM> buidTree(ParentNodeNotFoundAction<TM> notFoundAction)", "full_signature": "public List<TM> buidTree(ParentNodeNotFoundAction<TM> notFoundAction)", "class_method_signature": "TreeBuilder.buidTree(ParentNodeNotFoundAction<TM> notFoundAction)", "testcase": false, "constructor": false}, {"identifier": "reverseRoots", "parameters": "()", "modifiers": "public", "return": "List<TM>", "signature": "List<TM> reverseRoots()", "full_signature": "public List<TM> reverseRoots()", "class_method_signature": "TreeBuilder.reverseRoots()", "testcase": false, "constructor": false}, {"identifier": "findParent", "parameters": "(Map<Object, TM> nodeMap, TM node)", "modifiers": "protected", "return": "TM", "signature": "TM findParent(Map<Object, TM> nodeMap, TM node)", "full_signature": "protected TM findParent(Map<Object, TM> nodeMap, TM node)", "class_method_signature": "TreeBuilder.findParent(Map<Object, TM> nodeMap, TM node)", "testcase": false, "constructor": false}, {"identifier": "addRoot", "parameters": "(TM node)", "modifiers": "protected", "return": "void", "signature": "void addRoot(TM node)", "full_signature": "protected void addRoot(TM node)", "class_method_signature": "TreeBuilder.addRoot(TM node)", "testcase": false, "constructor": false}, {"identifier": "isExistsRootNode", "parameters": "(TreeModel<?> node)", "modifiers": "protected", "return": "boolean", "signature": "boolean isExistsRootNode(TreeModel<?> node)", "full_signature": "protected boolean isExistsRootNode(TreeModel<?> node)", "class_method_signature": "TreeBuilder.isExistsRootNode(TreeModel<?> node)", "testcase": false, "constructor": false}, {"identifier": "getBranch", "parameters": "(Object rootId)", "modifiers": "public", "return": "TreeModel<?>", "signature": "TreeModel<?> getBranch(Object rootId)", "full_signature": "public TreeModel<?> getBranch(Object rootId)", "class_method_signature": "TreeBuilder.getBranch(Object rootId)", "testcase": false, "constructor": false}, {"identifier": "getRootNodes", "parameters": "()", "modifiers": "public", "return": "List<TM>", "signature": "List<TM> getRootNodes()", "full_signature": "public List<TM> getRootNodes()", "class_method_signature": "TreeBuilder.getRootNodes()", "testcase": false, "constructor": false}, {"identifier": "getNodeMap", "parameters": "()", "modifiers": "public", "return": "Map<Object, TM>", "signature": "Map<Object, TM> getNodeMap()", "full_signature": "public Map<Object, TM> getNodeMap()", "class_method_signature": "TreeBuilder.getNodeMap()", "testcase": false, "constructor": false}, {"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "TreeBuilder.main(String[] args)", "testcase": false, "constructor": false}], "file": "core/modules/common/src/main/java/org/onetwo/common/tree/TreeBuilder.java"}, "focal_method": {"identifier": "buidTree", "parameters": "()", "modifiers": "public", "return": "List<TM>", "body": "public List<TM> buidTree() {\n\t\treturn this.buidTree(parentNotFoundAction);\n\t}", "signature": "List<TM> buidTree()", "full_signature": "public List<TM> buidTree()", "class_method_signature": "TreeBuilder.buidTree()", "testcase": false, "constructor": false, "invocations": ["buidTree"]}, "repository": {"repo_id": 47802308, "url": "https://github.com/wayshall/onetwo", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 16, "size": 57582, "license": "licensed"}}