{"test_class": {"identifier": "SecurityRoleFunctionServiceImplTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public ExpectedException expectedException = ExpectedException.none();", "modifier": "@Rule\n    public", "type": "ExpectedException", "declarator": "expectedException = ExpectedException.none()", "var_name": "expectedException"}, {"original_string": "@Mock\n    private SecurityFunctionDaoHelper securityFunctionDaoHelper;", "modifier": "@Mock\n    private", "type": "SecurityFunctionDaoHelper", "declarator": "securityFunctionDaoHelper", "var_name": "securityFunctionDaoHelper"}, {"original_string": "@Mock\n    private SecurityFunctionHelper securityFunctionHelper;", "modifier": "@Mock\n    private", "type": "SecurityFunctionHelper", "declarator": "securityFunctionHelper", "var_name": "securityFunctionHelper"}, {"original_string": "@Mock\n    private SecurityRoleDaoHelper securityRoleDaoHelper;", "modifier": "@Mock\n    private", "type": "SecurityRoleDaoHelper", "declarator": "securityRoleDaoHelper", "var_name": "securityRoleDaoHelper"}, {"original_string": "@Mock\n    private SecurityRoleFunctionDao securityRoleFunctionDao;", "modifier": "@Mock\n    private", "type": "SecurityRoleFunctionDao", "declarator": "securityRoleFunctionDao", "var_name": "securityRoleFunctionDao"}, {"original_string": "@Mock\n    private SecurityRoleFunctionDaoHelper securityRoleFunctionDaoHelper;", "modifier": "@Mock\n    private", "type": "SecurityRoleFunctionDaoHelper", "declarator": "securityRoleFunctionDaoHelper", "var_name": "securityRoleFunctionDaoHelper"}, {"original_string": "@Mock\n    private SecurityRoleFunctionHelper securityRoleFunctionHelper;", "modifier": "@Mock\n    private", "type": "SecurityRoleFunctionHelper", "declarator": "securityRoleFunctionHelper", "var_name": "securityRoleFunctionHelper"}, {"original_string": "@InjectMocks\n    private SecurityRoleFunctionServiceImpl securityRoleFunctionService;", "modifier": "@InjectMocks\n    private", "type": "SecurityRoleFunctionServiceImpl", "declarator": "securityRoleFunctionService", "var_name": "securityRoleFunctionService"}, {"original_string": "@Mock\n    private SecurityRoleHelper securityRoleHelper;", "modifier": "@Mock\n    private", "type": "SecurityRoleHelper", "declarator": "securityRoleHelper", "var_name": "securityRoleHelper"}], "file": "herd-code/herd-service/src/test/java/org/finra/herd/service/impl/SecurityRoleFunctionServiceImplTest.java"}, "test_case": {"identifier": "testCreateSecurityRoleFunction", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateSecurityRoleFunction()\n    {\n        // Create a security role to function mapping key.\n        SecurityRoleFunctionKey securityRoleFunctionKey = new SecurityRoleFunctionKey(SECURITY_ROLE, SECURITY_FUNCTION);\n\n        // Create a security role to function mapping create request.\n        SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest = new SecurityRoleFunctionCreateRequest(securityRoleFunctionKey);\n\n        // Create a security role entity.\n        SecurityRoleEntity securityRoleEntity = new SecurityRoleEntity();\n        securityRoleEntity.setCode(SECURITY_ROLE);\n\n        // Create a security function entity.\n        SecurityFunctionEntity securityFunctionEntity = new SecurityFunctionEntity();\n        securityFunctionEntity.setCode(SECURITY_FUNCTION);\n\n        // Mock the external calls.\n        when(securityRoleFunctionDao.getSecurityRoleFunctionByKey(securityRoleFunctionKey)).thenReturn(null);\n        when(securityRoleDaoHelper.getSecurityRoleEntity(SECURITY_ROLE)).thenReturn(securityRoleEntity);\n        when(securityFunctionDaoHelper.getSecurityFunctionEntity(SECURITY_FUNCTION)).thenReturn(securityFunctionEntity);\n        doAnswer(new Answer<Void>()\n        {\n            public Void answer(InvocationOnMock invocation)\n            {\n                // Get the security role to function mapping entity and set its primary key.\n                SecurityRoleFunctionEntity securityRoleFunctionEntity = (SecurityRoleFunctionEntity) invocation.getArguments()[0];\n                securityRoleFunctionEntity.setId(ID);\n                return null;\n            }\n        }).when(securityRoleFunctionDao).saveAndRefresh(any(SecurityRoleFunctionEntity.class));\n\n        // Call the method under test.\n        SecurityRoleFunction result = securityRoleFunctionService.createSecurityRoleFunction(securityRoleFunctionCreateRequest);\n\n        // Validate the results.\n        assertEquals(new SecurityRoleFunction(result.getId(), securityRoleFunctionKey), result);\n\n        // Verify the external calls.\n        verify(securityRoleFunctionHelper).validateAndTrimSecurityRoleFunctionCreateRequest(securityRoleFunctionCreateRequest);\n        verify(securityRoleFunctionDao).getSecurityRoleFunctionByKey(securityRoleFunctionKey);\n        verify(securityRoleDaoHelper).getSecurityRoleEntity(SECURITY_ROLE);\n        verify(securityFunctionDaoHelper).getSecurityFunctionEntity(SECURITY_FUNCTION);\n        verify(securityRoleFunctionDao).saveAndRefresh(any(SecurityRoleFunctionEntity.class));\n        verifyNoMoreInteractionsHelper();\n    }", "signature": "void testCreateSecurityRoleFunction()", "full_signature": "@Test public void testCreateSecurityRoleFunction()", "class_method_signature": "SecurityRoleFunctionServiceImplTest.testCreateSecurityRoleFunction()", "testcase": true, "constructor": false, "invocations": ["setCode", "setCode", "thenReturn", "when", "getSecurityRoleFunctionByKey", "thenReturn", "when", "getSecurityRoleEntity", "thenReturn", "when", "getSecurityFunctionEntity", "saveAndRefresh", "when", "doAnswer", "getArguments", "setId", "any", "createSecurityRoleFunction", "assertEquals", "getId", "validateAndTrimSecurityRoleFunctionCreateRequest", "verify", "getSecurityRoleFunctionByKey", "verify", "getSecurityRoleEntity", "verify", "getSecurityFunctionEntity", "verify", "saveAndRefresh", "verify", "any", "verifyNoMoreInteractionsHelper"]}, "focal_class": {"identifier": "SecurityRoleFunctionServiceImpl", "superclass": "", "interfaces": "implements SecurityRoleFunctionService", "fields": [{"original_string": "@Autowired\n    private SecurityFunctionDaoHelper securityFunctionDaoHelper;", "modifier": "@Autowired\n    private", "type": "SecurityFunctionDaoHelper", "declarator": "securityFunctionDaoHelper", "var_name": "securityFunctionDaoHelper"}, {"original_string": "@Autowired\n    private SecurityFunctionHelper securityFunctionHelper;", "modifier": "@Autowired\n    private", "type": "SecurityFunctionHelper", "declarator": "securityFunctionHelper", "var_name": "securityFunctionHelper"}, {"original_string": "@Autowired\n    private SecurityRoleDaoHelper securityRoleDaoHelper;", "modifier": "@Autowired\n    private", "type": "SecurityRoleDaoHelper", "declarator": "securityRoleDaoHelper", "var_name": "securityRoleDaoHelper"}, {"original_string": "@Autowired\n    private SecurityRoleFunctionDao securityRoleFunctionDao;", "modifier": "@Autowired\n    private", "type": "SecurityRoleFunctionDao", "declarator": "securityRoleFunctionDao", "var_name": "securityRoleFunctionDao"}, {"original_string": "@Autowired\n    private SecurityRoleFunctionDaoHelper securityRoleFunctionDaoHelper;", "modifier": "@Autowired\n    private", "type": "SecurityRoleFunctionDaoHelper", "declarator": "securityRoleFunctionDaoHelper", "var_name": "securityRoleFunctionDaoHelper"}, {"original_string": "@Autowired\n    private SecurityRoleFunctionHelper securityRoleFunctionHelper;", "modifier": "@Autowired\n    private", "type": "SecurityRoleFunctionHelper", "declarator": "securityRoleFunctionHelper", "var_name": "securityRoleFunctionHelper"}, {"original_string": "@Autowired\n    private SecurityRoleHelper securityRoleHelper;", "modifier": "@Autowired\n    private", "type": "SecurityRoleHelper", "declarator": "securityRoleHelper", "var_name": "securityRoleHelper"}], "methods": [{"identifier": "createSecurityRoleFunction", "parameters": "(SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)", "modifiers": "@Override public", "return": "SecurityRoleFunction", "signature": "SecurityRoleFunction createSecurityRoleFunction(SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)", "full_signature": "@Override public SecurityRoleFunction createSecurityRoleFunction(SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)", "class_method_signature": "SecurityRoleFunctionServiceImpl.createSecurityRoleFunction(SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)", "testcase": false, "constructor": false}, {"identifier": "deleteSecurityRoleFunction", "parameters": "(SecurityRoleFunctionKey securityRoleFunctionKey)", "modifiers": "@Override public", "return": "SecurityRoleFunction", "signature": "SecurityRoleFunction deleteSecurityRoleFunction(SecurityRoleFunctionKey securityRoleFunctionKey)", "full_signature": "@Override public SecurityRoleFunction deleteSecurityRoleFunction(SecurityRoleFunctionKey securityRoleFunctionKey)", "class_method_signature": "SecurityRoleFunctionServiceImpl.deleteSecurityRoleFunction(SecurityRoleFunctionKey securityRoleFunctionKey)", "testcase": false, "constructor": false}, {"identifier": "getSecurityRoleFunction", "parameters": "(SecurityRoleFunctionKey securityRoleFunctionKey)", "modifiers": "@Override public", "return": "SecurityRoleFunction", "signature": "SecurityRoleFunction getSecurityRoleFunction(SecurityRoleFunctionKey securityRoleFunctionKey)", "full_signature": "@Override public SecurityRoleFunction getSecurityRoleFunction(SecurityRoleFunctionKey securityRoleFunctionKey)", "class_method_signature": "SecurityRoleFunctionServiceImpl.getSecurityRoleFunction(SecurityRoleFunctionKey securityRoleFunctionKey)", "testcase": false, "constructor": false}, {"identifier": "getSecurityRoleFunctions", "parameters": "()", "modifiers": "@Override public", "return": "SecurityRoleFunctionKeys", "signature": "SecurityRoleFunctionKeys getSecurityRoleFunctions()", "full_signature": "@Override public SecurityRoleFunctionKeys getSecurityRoleFunctions()", "class_method_signature": "SecurityRoleFunctionServiceImpl.getSecurityRoleFunctions()", "testcase": false, "constructor": false}, {"identifier": "getSecurityRoleFunctionsBySecurityFunction", "parameters": "(SecurityFunctionKey securityFunctionKey)", "modifiers": "@Override public", "return": "SecurityRoleFunctionKeys", "signature": "SecurityRoleFunctionKeys getSecurityRoleFunctionsBySecurityFunction(SecurityFunctionKey securityFunctionKey)", "full_signature": "@Override public SecurityRoleFunctionKeys getSecurityRoleFunctionsBySecurityFunction(SecurityFunctionKey securityFunctionKey)", "class_method_signature": "SecurityRoleFunctionServiceImpl.getSecurityRoleFunctionsBySecurityFunction(SecurityFunctionKey securityFunctionKey)", "testcase": false, "constructor": false}, {"identifier": "getSecurityRoleFunctionsBySecurityRole", "parameters": "(SecurityRoleKey securityRoleKey)", "modifiers": "@Override public", "return": "SecurityRoleFunctionKeys", "signature": "SecurityRoleFunctionKeys getSecurityRoleFunctionsBySecurityRole(SecurityRoleKey securityRoleKey)", "full_signature": "@Override public SecurityRoleFunctionKeys getSecurityRoleFunctionsBySecurityRole(SecurityRoleKey securityRoleKey)", "class_method_signature": "SecurityRoleFunctionServiceImpl.getSecurityRoleFunctionsBySecurityRole(SecurityRoleKey securityRoleKey)", "testcase": false, "constructor": false}, {"identifier": "createSecurityRoleFunctionEntity", "parameters": "(SecurityRoleEntity securityRoleEntity, SecurityFunctionEntity securityFunctionEntity)", "modifiers": "private", "return": "SecurityRoleFunctionEntity", "signature": "SecurityRoleFunctionEntity createSecurityRoleFunctionEntity(SecurityRoleEntity securityRoleEntity, SecurityFunctionEntity securityFunctionEntity)", "full_signature": "private SecurityRoleFunctionEntity createSecurityRoleFunctionEntity(SecurityRoleEntity securityRoleEntity, SecurityFunctionEntity securityFunctionEntity)", "class_method_signature": "SecurityRoleFunctionServiceImpl.createSecurityRoleFunctionEntity(SecurityRoleEntity securityRoleEntity, SecurityFunctionEntity securityFunctionEntity)", "testcase": false, "constructor": false}, {"identifier": "createSecurityRoleFunctionFromEntity", "parameters": "(SecurityRoleFunctionEntity securityRoleFunctionEntity)", "modifiers": "private", "return": "SecurityRoleFunction", "signature": "SecurityRoleFunction createSecurityRoleFunctionFromEntity(SecurityRoleFunctionEntity securityRoleFunctionEntity)", "full_signature": "private SecurityRoleFunction createSecurityRoleFunctionFromEntity(SecurityRoleFunctionEntity securityRoleFunctionEntity)", "class_method_signature": "SecurityRoleFunctionServiceImpl.createSecurityRoleFunctionFromEntity(SecurityRoleFunctionEntity securityRoleFunctionEntity)", "testcase": false, "constructor": false}], "file": "herd-code/herd-service/src/main/java/org/finra/herd/service/impl/SecurityRoleFunctionServiceImpl.java"}, "focal_method": {"identifier": "createSecurityRoleFunction", "parameters": "(SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)", "modifiers": "@Override public", "return": "SecurityRoleFunction", "body": "@Override\n    public SecurityRoleFunction createSecurityRoleFunction(SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)\n    {\n        // Validate and trim the security role to function mapping create request.\n        securityRoleFunctionHelper.validateAndTrimSecurityRoleFunctionCreateRequest(securityRoleFunctionCreateRequest);\n\n        // Ensure a security role to function mapping with the specified parameters doesn't already exist.\n        SecurityRoleFunctionEntity securityRoleFunctionEntity =\n            securityRoleFunctionDao.getSecurityRoleFunctionByKey(securityRoleFunctionCreateRequest.getSecurityRoleFunctionKey());\n        if (securityRoleFunctionEntity != null)\n        {\n            throw new AlreadyExistsException(String.format(\n                \"Unable to create security role to function mapping for \\\"%s\\\" security role name and \\\"%s\\\" security function name because it already exists.\",\n                securityRoleFunctionCreateRequest.getSecurityRoleFunctionKey().getSecurityRoleName(),\n                securityRoleFunctionCreateRequest.getSecurityRoleFunctionKey().getSecurityFunctionName()));\n        }\n\n        // Retrieve and ensure that a security role with the specified name exists.\n        SecurityRoleEntity securityRoleEntity =\n            securityRoleDaoHelper.getSecurityRoleEntity(securityRoleFunctionCreateRequest.getSecurityRoleFunctionKey().getSecurityRoleName());\n\n        // Retrieve and ensure that a security function with the specified name exists.\n        SecurityFunctionEntity securityFunctionEntity =\n            securityFunctionDaoHelper.getSecurityFunctionEntity(securityRoleFunctionCreateRequest.getSecurityRoleFunctionKey().getSecurityFunctionName());\n\n        // Creates and persist a security role to function mapping entity.\n        securityRoleFunctionEntity = createSecurityRoleFunctionEntity(securityRoleEntity, securityFunctionEntity);\n\n        // Persist the new entity.\n        securityRoleFunctionDao.saveAndRefresh(securityRoleFunctionEntity);\n\n        // Create a security role to function mapping object from the entity and return it.\n        return createSecurityRoleFunctionFromEntity(securityRoleFunctionEntity);\n    }", "signature": "SecurityRoleFunction createSecurityRoleFunction(SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)", "full_signature": "@Override public SecurityRoleFunction createSecurityRoleFunction(SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)", "class_method_signature": "SecurityRoleFunctionServiceImpl.createSecurityRoleFunction(SecurityRoleFunctionCreateRequest securityRoleFunctionCreateRequest)", "testcase": false, "constructor": false, "invocations": ["validateAndTrimSecurityRoleFunctionCreateRequest", "getSecurityRoleFunctionByKey", "getSecurityRoleFunctionKey", "format", "getSecurityRoleName", "getSecurityRoleFunctionKey", "getSecurityFunctionName", "getSecurityRoleFunctionKey", "getSecurityRoleEntity", "getSecurityRoleName", "getSecurityRoleFunctionKey", "getSecurityFunctionEntity", "getSecurityFunctionName", "getSecurityRoleFunctionKey", "createSecurityRoleFunctionEntity", "saveAndRefresh", "createSecurityRoleFunctionFromEntity"]}, "repository": {"repo_id": 42949039, "url": "https://github.com/FINRAOS/herd", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 120, "size": 205797, "license": "licensed"}}