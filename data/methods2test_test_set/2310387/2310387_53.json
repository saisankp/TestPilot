{"test_class": {"identifier": "ScriptRunnerTest", "superclass": "extends TestCase", "interfaces": "", "fields": [], "file": "medium/src/test/java/net/sourceforge/cruisecontrol/builders/ScriptRunnerTest.java"}, "test_case": {"identifier": "testDoNotCreateAntOutputLoggerFile", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDoNotCreateAntOutputLoggerFile() throws Exception {\n\n        final MockCommandline mockCommandline = new MockCommandline();\n        mockCommandline.setAssertCorrectCommandline(false);\n\n        mockCommandline.setProcessInputStream(\n                // need to provide some output to ensure StreamPumper threads have some work to do\n                new ByteArrayInputStream(\"some stuff\\nmore stuff\\n\".getBytes()));\n\n        mockCommandline.setProcessErrorStream(new ByteArrayInputStream(\"\".getBytes()));\n\n        final Script dummyScript = new Script() {\n\n            public Commandline buildCommandline() throws CruiseControlException {\n                return mockCommandline;\n            }\n\n            public void setExitCode(int result) {\n            }\n\n            public int getExitCode() {\n                return 0;\n            }\n        };\n\n        final ScriptRunner sr = new ScriptRunner();\n\n        sr.runScript(TestUtil.getTargetDir(), dummyScript, ScriptRunner.NO_TIMEOUT);\n\n        final File expectedAntBuilderLog = new File(TestUtil.getTargetDir(), AntOutputLogger.DEFAULT_OUTFILE_NAME);\n        assertFalse(\"Generic ScriptRunner should not have created AntOuputLogger file: \"\n                + expectedAntBuilderLog.getAbsolutePath(),\n                expectedAntBuilderLog.exists());\n    }", "signature": "void testDoNotCreateAntOutputLoggerFile()", "full_signature": "@Test public void testDoNotCreateAntOutputLoggerFile()", "class_method_signature": "ScriptRunnerTest.testDoNotCreateAntOutputLoggerFile()", "testcase": true, "constructor": false, "invocations": ["setAssertCorrectCommandline", "setProcessInputStream", "getBytes", "setProcessErrorStream", "getBytes", "runScript", "getTargetDir", "getTargetDir", "assertFalse", "getAbsolutePath", "exists"]}, "focal_class": {"identifier": "ScriptRunner", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final Logger LOG = Logger.getLogger(ScriptRunner.class);", "modifier": "static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(ScriptRunner.class)", "var_name": "LOG"}, {"original_string": "public static final long NO_TIMEOUT = -1;", "modifier": "public static final", "type": "long", "declarator": "NO_TIMEOUT = -1", "var_name": "NO_TIMEOUT"}], "methods": [{"identifier": "runScript", "parameters": "(final File workingDir, final Script script, final long timeout)", "modifiers": "public", "return": "boolean", "signature": "boolean runScript(final File workingDir, final Script script, final long timeout)", "full_signature": "public boolean runScript(final File workingDir, final Script script, final long timeout)", "class_method_signature": "ScriptRunner.runScript(final File workingDir, final Script script, final long timeout)", "testcase": false, "constructor": false}, {"identifier": "runScript", "parameters": "(final File workingDir, final Script script, final long timeout,\n                             final BuildOutputLogger buildOutputConsumer)", "modifiers": "public", "return": "boolean", "signature": "boolean runScript(final File workingDir, final Script script, final long timeout,\n                             final BuildOutputLogger buildOutputConsumer)", "full_signature": "public boolean runScript(final File workingDir, final Script script, final long timeout,\n                             final BuildOutputLogger buildOutputConsumer)", "class_method_signature": "ScriptRunner.runScript(final File workingDir, final Script script, final long timeout,\n                             final BuildOutputLogger buildOutputConsumer)", "testcase": false, "constructor": false}, {"identifier": "runScript", "parameters": "(final File workingDir, final Script script, final long timeout,\n                             final InputStream scriptInputProvider, final BuildOutputLogger buildOutputConsumer)", "modifiers": "public", "return": "boolean", "signature": "boolean runScript(final File workingDir, final Script script, final long timeout,\n                             final InputStream scriptInputProvider, final BuildOutputLogger buildOutputConsumer)", "full_signature": "public boolean runScript(final File workingDir, final Script script, final long timeout,\n                             final InputStream scriptInputProvider, final BuildOutputLogger buildOutputConsumer)", "class_method_signature": "ScriptRunner.runScript(final File workingDir, final Script script, final long timeout,\n                             final InputStream scriptInputProvider, final BuildOutputLogger buildOutputConsumer)", "testcase": false, "constructor": false}, {"identifier": "runScript", "parameters": "(Script script, long timeout, BuildOutputLogger logger)", "modifiers": "public", "return": "boolean", "signature": "boolean runScript(Script script, long timeout, BuildOutputLogger logger)", "full_signature": "public boolean runScript(Script script, long timeout, BuildOutputLogger logger)", "class_method_signature": "ScriptRunner.runScript(Script script, long timeout, BuildOutputLogger logger)", "testcase": false, "constructor": false}, {"identifier": "getOutPumper", "parameters": "(final Process p, final StreamConsumer consumer)", "modifiers": "", "return": "StreamPumper", "signature": "StreamPumper getOutPumper(final Process p, final StreamConsumer consumer)", "full_signature": " StreamPumper getOutPumper(final Process p, final StreamConsumer consumer)", "class_method_signature": "ScriptRunner.getOutPumper(final Process p, final StreamConsumer consumer)", "testcase": false, "constructor": false}, {"identifier": "getErrPumper", "parameters": "(final Process p, final StreamConsumer consumer)", "modifiers": "", "return": "StreamPumper", "signature": "StreamPumper getErrPumper(final Process p, final StreamConsumer consumer)", "full_signature": " StreamPumper getErrPumper(final Process p, final StreamConsumer consumer)", "class_method_signature": "ScriptRunner.getErrPumper(final Process p, final StreamConsumer consumer)", "testcase": false, "constructor": false}, {"identifier": "getDirectOutLogger", "parameters": "()", "modifiers": "", "return": "StreamConsumer", "signature": "StreamConsumer getDirectOutLogger()", "full_signature": " StreamConsumer getDirectOutLogger()", "class_method_signature": "ScriptRunner.getDirectOutLogger()", "testcase": false, "constructor": false}, {"identifier": "getDirectErrLogger", "parameters": "()", "modifiers": "", "return": "StreamConsumer", "signature": "StreamConsumer getDirectErrLogger()", "full_signature": " StreamConsumer getDirectErrLogger()", "class_method_signature": "ScriptRunner.getDirectErrLogger()", "testcase": false, "constructor": false}, {"identifier": "letConsumeOut", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean letConsumeOut()", "full_signature": " boolean letConsumeOut()", "class_method_signature": "ScriptRunner.letConsumeOut()", "testcase": false, "constructor": false}, {"identifier": "letConsumeErr", "parameters": "()", "modifiers": "", "return": "boolean", "signature": "boolean letConsumeErr()", "full_signature": " boolean letConsumeErr()", "class_method_signature": "ScriptRunner.letConsumeErr()", "testcase": false, "constructor": false}], "file": "medium/src/main/java/net/sourceforge/cruisecontrol/builders/ScriptRunner.java"}, "focal_method": {"identifier": "runScript", "parameters": "(final File workingDir, final Script script, final long timeout)", "modifiers": "public", "return": "boolean", "body": "public boolean runScript(final File workingDir, final Script script, final long timeout)\n            throws CruiseControlException {\n        return runScript(workingDir, script, timeout, null, null);\n    }", "signature": "boolean runScript(final File workingDir, final Script script, final long timeout)", "full_signature": "public boolean runScript(final File workingDir, final Script script, final long timeout)", "class_method_signature": "ScriptRunner.runScript(final File workingDir, final Script script, final long timeout)", "testcase": false, "constructor": false, "invocations": ["runScript"]}, "repository": {"repo_id": 2310387, "url": "https://github.com/builddoctor/JavaBuildComparison", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 6, "size": 14939, "license": "licensed"}}