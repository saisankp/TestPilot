{"test_class": {"identifier": "BeanCopyTest", "superclass": "extends CachedLogger", "interfaces": "", "fields": [], "file": "concurrency/src/test/java/com/baidu/unbiz/common/bean/BeanCopyTest.java"}, "test_case": {"identifier": "copyByAnnotation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void copyByAnnotation() {\n        AnnoBean bean = new AnnoBean();\n        bean.setCompany(new StringBuilder(\"comp\"));\n        bean.setTest1(11);\n        bean.setTest2(22);\n        bean.setTest3(\"33\");\n        bean.setTest4(\"44\");\n        AnnoBean acopied = new AnnoBean();\n        BeanCopy.copyByAnnotation(bean, acopied);\n        Assert.assertNull(null, acopied.getTest3());\n        Assert.assertEquals(\"44\", acopied.getTest4());\n\n        logger.info(acopied);\n    }", "signature": "void copyByAnnotation()", "full_signature": "@Test public void copyByAnnotation()", "class_method_signature": "BeanCopyTest.copyByAnnotation()", "testcase": true, "constructor": false, "invocations": ["setCompany", "setTest1", "setTest2", "setTest3", "setTest4", "copyByAnnotation", "assertNull", "getTest3", "assertEquals", "getTest4", "info"]}, "focal_class": {"identifier": "BeanCopy", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final FieldCache fieldCache = FieldCache.getInstance();", "modifier": "private static final", "type": "FieldCache", "declarator": "fieldCache = FieldCache.getInstance()", "var_name": "fieldCache"}, {"original_string": "private static final BeanInfoCache beanInfoCache = BeanInfoCache.getInstance();", "modifier": "private static final", "type": "BeanInfoCache", "declarator": "beanInfoCache = BeanInfoCache.getInstance()", "var_name": "beanInfoCache"}], "methods": [{"identifier": "copy", "parameters": "(Object src, Object dest, boolean useAnnotation)", "modifiers": "public static", "return": "void", "signature": "void copy(Object src, Object dest, boolean useAnnotation)", "full_signature": "public static void copy(Object src, Object dest, boolean useAnnotation)", "class_method_signature": "BeanCopy.copy(Object src, Object dest, boolean useAnnotation)", "testcase": false, "constructor": false}, {"identifier": "copyProperties", "parameters": "(Object src, Object dest)", "modifiers": "public static", "return": "void", "signature": "void copyProperties(Object src, Object dest)", "full_signature": "public static void copyProperties(Object src, Object dest)", "class_method_signature": "BeanCopy.copyProperties(Object src, Object dest)", "testcase": false, "constructor": false}, {"identifier": "copyByAnnotation", "parameters": "(Object src, Object dest)", "modifiers": "public static", "return": "void", "signature": "void copyByAnnotation(Object src, Object dest)", "full_signature": "public static void copyByAnnotation(Object src, Object dest)", "class_method_signature": "BeanCopy.copyByAnnotation(Object src, Object dest)", "testcase": false, "constructor": false}, {"identifier": "copyByMethod", "parameters": "(Object src, Object dest)", "modifiers": "public static", "return": "void", "signature": "void copyByMethod(Object src, Object dest)", "full_signature": "public static void copyByMethod(Object src, Object dest)", "class_method_signature": "BeanCopy.copyByMethod(Object src, Object dest)", "testcase": false, "constructor": false}, {"identifier": "supportFor", "parameters": "(Class<?> fromClass, CopyField copyField)", "modifiers": "private static", "return": "boolean", "signature": "boolean supportFor(Class<?> fromClass, CopyField copyField)", "full_signature": "private static boolean supportFor(Class<?> fromClass, CopyField copyField)", "class_method_signature": "BeanCopy.supportFor(Class<?> fromClass, CopyField copyField)", "testcase": false, "constructor": false}], "file": "concurrency/src/main/java/com/baidu/unbiz/common/bean/BeanCopy.java"}, "focal_method": {"identifier": "copyByAnnotation", "parameters": "(Object src, Object dest)", "modifiers": "public static", "return": "void", "body": "public static void copyByAnnotation(Object src, Object dest) {\n        if (ObjectUtil.isAnyNull(src, dest)) {\n            return;\n        }\n\n        Class<?> srcClazz = src.getClass();\n        Class<?> destClazz = dest.getClass();\n        Field[] destFields = fieldCache.getInstanceFields(dest.getClass());\n\n        for (Field field : destFields) {\n            if (ReflectionUtil.isFinal(field) || ReflectionUtil.hasAnnotation(field, IgnoreField.class)) {\n                continue;\n            }\n            Field srcField = fieldCache.getField(srcClazz, CopyField.class, field.getName());\n            if (srcField != null && supportFor(destClazz, srcField.getAnnotation(CopyField.class))) {\n                Object value = ReflectionUtil.readField(srcField, src);\n                ReflectionUtil.writeField(field, dest, value);\n            }\n\n        }\n\n    }", "signature": "void copyByAnnotation(Object src, Object dest)", "full_signature": "public static void copyByAnnotation(Object src, Object dest)", "class_method_signature": "BeanCopy.copyByAnnotation(Object src, Object dest)", "testcase": false, "constructor": false, "invocations": ["isAnyNull", "getClass", "getClass", "getInstanceFields", "getClass", "isFinal", "hasAnnotation", "getField", "getName", "supportFor", "getAnnotation", "readField", "writeField"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}