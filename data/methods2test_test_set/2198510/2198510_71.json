{"test_class": {"identifier": "TestHBase2Sink", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger =\n          LoggerFactory.getLogger(TestHBase2Sink.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger =\n          LoggerFactory.getLogger(TestHBase2Sink.class)", "var_name": "logger"}, {"original_string": "private static final String tableName = \"TestHbaseSink\";", "modifier": "private static final", "type": "String", "declarator": "tableName = \"TestHbaseSink\"", "var_name": "tableName"}, {"original_string": "private static final String columnFamily = \"TestColumnFamily\";", "modifier": "private static final", "type": "String", "declarator": "columnFamily = \"TestColumnFamily\"", "var_name": "columnFamily"}, {"original_string": "private static final String inColumn = \"iCol\";", "modifier": "private static final", "type": "String", "declarator": "inColumn = \"iCol\"", "var_name": "inColumn"}, {"original_string": "private static final String plCol = \"pCol\";", "modifier": "private static final", "type": "String", "declarator": "plCol = \"pCol\"", "var_name": "plCol"}, {"original_string": "private static final String valBase = \"testing hbase sink: jham\";", "modifier": "private static final", "type": "String", "declarator": "valBase = \"testing hbase sink: jham\"", "var_name": "valBase"}, {"original_string": "private static HBaseTestingUtility testUtility;", "modifier": "private static", "type": "HBaseTestingUtility", "declarator": "testUtility", "var_name": "testUtility"}, {"original_string": "private Configuration conf;", "modifier": "private", "type": "Configuration", "declarator": "conf", "var_name": "conf"}], "file": "flume-ng-sinks/flume-ng-hbase2-sink/src/test/java/org/apache/flume/sink/hbase2/TestHBase2Sink.java"}, "test_case": {"identifier": "testZKQuorumIncorrectPorts", "parameters": "()", "modifiers": "@Test(expected = FlumeException.class) public", "return": "void", "body": "@Test(expected = FlumeException.class)\n  public void testZKQuorumIncorrectPorts() throws Exception {\n    Context ctx = getContextForSimpleHBase2EventSerializer();\n    Context tmpContext = new Context(ctx.getParameters());\n\n    String zkQuorum = \"zk1.flume.apache.org:3345, zk2.flume.apache.org:3342, \" +\n                      \"zk3.flume.apache.org:3342\";\n    tmpContext.put(\"batchSize\", \"2\");\n    tmpContext.put(HBase2SinkConfigurationConstants.ZK_QUORUM, zkQuorum);\n    tmpContext.put(HBase2SinkConfigurationConstants.ZK_ZNODE_PARENT,\n                   conf.get(HConstants.ZOOKEEPER_ZNODE_PARENT,\n                            HConstants.DEFAULT_ZOOKEEPER_ZNODE_PARENT));\n    HBase2Sink sink = new HBase2Sink();\n    Configurables.configure(sink, tmpContext);\n    Assert.fail();\n  }", "signature": "void testZKQuorumIncorrectPorts()", "full_signature": "@Test(expected = FlumeException.class) public void testZKQuorumIncorrectPorts()", "class_method_signature": "TestHBase2Sink.testZKQuorumIncorrectPorts()", "testcase": true, "constructor": false, "invocations": ["getContextForSimpleHBase2EventSerializer", "getParameters", "put", "put", "put", "get", "configure", "fail"]}, "focal_class": {"identifier": "HBase2Sink", "superclass": "extends AbstractSink", "interfaces": "implements Configurable, BatchSizeSupported", "fields": [{"original_string": "private String tableName;", "modifier": "private", "type": "String", "declarator": "tableName", "var_name": "tableName"}, {"original_string": "private byte[] columnFamily;", "modifier": "private", "type": "byte[]", "declarator": "columnFamily", "var_name": "columnFamily"}, {"original_string": "private Connection conn;", "modifier": "private", "type": "Connection", "declarator": "conn", "var_name": "conn"}, {"original_string": "private BufferedMutator table;", "modifier": "private", "type": "BufferedMutator", "declarator": "table", "var_name": "table"}, {"original_string": "private long batchSize;", "modifier": "private", "type": "long", "declarator": "batchSize", "var_name": "batchSize"}, {"original_string": "private final Configuration config;", "modifier": "private final", "type": "Configuration", "declarator": "config", "var_name": "config"}, {"original_string": "private static final Logger logger = LoggerFactory.getLogger(HBase2Sink.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HBase2Sink.class)", "var_name": "logger"}, {"original_string": "private HBase2EventSerializer serializer;", "modifier": "private", "type": "HBase2EventSerializer", "declarator": "serializer", "var_name": "serializer"}, {"original_string": "private String kerberosPrincipal;", "modifier": "private", "type": "String", "declarator": "kerberosPrincipal", "var_name": "kerberosPrincipal"}, {"original_string": "private String kerberosKeytab;", "modifier": "private", "type": "String", "declarator": "kerberosKeytab", "var_name": "kerberosKeytab"}, {"original_string": "private boolean enableWal = true;", "modifier": "private", "type": "boolean", "declarator": "enableWal = true", "var_name": "enableWal"}, {"original_string": "private boolean batchIncrements = false;", "modifier": "private", "type": "boolean", "declarator": "batchIncrements = false", "var_name": "batchIncrements"}, {"original_string": "private SinkCounter sinkCounter;", "modifier": "private", "type": "SinkCounter", "declarator": "sinkCounter", "var_name": "sinkCounter"}, {"original_string": "private PrivilegedExecutor privilegedExecutor;", "modifier": "private", "type": "PrivilegedExecutor", "declarator": "privilegedExecutor", "var_name": "privilegedExecutor"}, {"original_string": "private DebugIncrementsCallback debugIncrCallback = null;", "modifier": "private", "type": "DebugIncrementsCallback", "declarator": "debugIncrCallback = null", "var_name": "debugIncrCallback"}], "methods": [{"identifier": "HBase2Sink", "parameters": "()", "modifiers": "public", "return": "", "signature": " HBase2Sink()", "full_signature": "public  HBase2Sink()", "class_method_signature": "HBase2Sink.HBase2Sink()", "testcase": false, "constructor": true}, {"identifier": "HBase2Sink", "parameters": "(Configuration conf)", "modifiers": "public", "return": "", "signature": " HBase2Sink(Configuration conf)", "full_signature": "public  HBase2Sink(Configuration conf)", "class_method_signature": "HBase2Sink.HBase2Sink(Configuration conf)", "testcase": false, "constructor": true}, {"identifier": "HBase2Sink", "parameters": "(Configuration conf, DebugIncrementsCallback cb)", "modifiers": "@VisibleForTesting @InterfaceAudience.Private", "return": "", "signature": " HBase2Sink(Configuration conf, DebugIncrementsCallback cb)", "full_signature": "@VisibleForTesting @InterfaceAudience.Private  HBase2Sink(Configuration conf, DebugIncrementsCallback cb)", "class_method_signature": "HBase2Sink.HBase2Sink(Configuration conf, DebugIncrementsCallback cb)", "testcase": false, "constructor": true}, {"identifier": "start", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void start()", "full_signature": "@Override public void start()", "class_method_signature": "HBase2Sink.start()", "testcase": false, "constructor": false}, {"identifier": "stop", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void stop()", "full_signature": "@Override public void stop()", "class_method_signature": "HBase2Sink.stop()", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(Context context)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "signature": "void configure(Context context)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void configure(Context context)", "class_method_signature": "HBase2Sink.configure(Context context)", "testcase": false, "constructor": false}, {"identifier": "getConfig", "parameters": "()", "modifiers": "public", "return": "Configuration", "signature": "Configuration getConfig()", "full_signature": "public Configuration getConfig()", "class_method_signature": "HBase2Sink.getConfig()", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "()", "modifiers": "@Override public", "return": "Status", "signature": "Status process()", "full_signature": "@Override public Status process()", "class_method_signature": "HBase2Sink.process()", "testcase": false, "constructor": false}, {"identifier": "putEventsAndCommit", "parameters": "(final List<Row> actions,\n                                  final List<Increment> incs, Transaction txn)", "modifiers": "private", "return": "void", "signature": "void putEventsAndCommit(final List<Row> actions,\n                                  final List<Increment> incs, Transaction txn)", "full_signature": "private void putEventsAndCommit(final List<Row> actions,\n                                  final List<Increment> incs, Transaction txn)", "class_method_signature": "HBase2Sink.putEventsAndCommit(final List<Row> actions,\n                                  final List<Increment> incs, Transaction txn)", "testcase": false, "constructor": false}, {"identifier": "getFamilyMap", "parameters": "(Increment inc)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Map<byte[], NavigableMap<byte[], Long>>", "signature": "Map<byte[], NavigableMap<byte[], Long>> getFamilyMap(Increment inc)", "full_signature": "@SuppressWarnings(\"unchecked\") private Map<byte[], NavigableMap<byte[], Long>> getFamilyMap(Increment inc)", "class_method_signature": "HBase2Sink.getFamilyMap(Increment inc)", "testcase": false, "constructor": false}, {"identifier": "coalesceIncrements", "parameters": "(Iterable<Increment> incs)", "modifiers": "private", "return": "List<Increment>", "signature": "List<Increment> coalesceIncrements(Iterable<Increment> incs)", "full_signature": "private List<Increment> coalesceIncrements(Iterable<Increment> incs)", "class_method_signature": "HBase2Sink.coalesceIncrements(Iterable<Increment> incs)", "testcase": false, "constructor": false}, {"identifier": "incrementCounter", "parameters": "(\n      Map<byte[], Map<byte[], NavigableMap<byte[], Long>>> counters,\n      byte[] row, byte[] family, byte[] qualifier, Long count)", "modifiers": "private", "return": "void", "signature": "void incrementCounter(\n      Map<byte[], Map<byte[], NavigableMap<byte[], Long>>> counters,\n      byte[] row, byte[] family, byte[] qualifier, Long count)", "full_signature": "private void incrementCounter(\n      Map<byte[], Map<byte[], NavigableMap<byte[], Long>>> counters,\n      byte[] row, byte[] family, byte[] qualifier, Long count)", "class_method_signature": "HBase2Sink.incrementCounter(\n      Map<byte[], Map<byte[], NavigableMap<byte[], Long>>> counters,\n      byte[] row, byte[] family, byte[] qualifier, Long count)", "testcase": false, "constructor": false}, {"identifier": "getHBbaseVersionString", "parameters": "()", "modifiers": "", "return": "String", "signature": "String getHBbaseVersionString()", "full_signature": " String getHBbaseVersionString()", "class_method_signature": "HBase2Sink.getHBbaseVersionString()", "testcase": false, "constructor": false}, {"identifier": "getMajorVersion", "parameters": "(String version)", "modifiers": "private", "return": "int", "signature": "int getMajorVersion(String version)", "full_signature": "private int getMajorVersion(String version)", "class_method_signature": "HBase2Sink.getMajorVersion(String version)", "testcase": false, "constructor": false}, {"identifier": "hasVersionAtLeast2", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean hasVersionAtLeast2()", "full_signature": "private boolean hasVersionAtLeast2()", "class_method_signature": "HBase2Sink.hasVersionAtLeast2()", "testcase": false, "constructor": false}, {"identifier": "getSerializer", "parameters": "()", "modifiers": "@VisibleForTesting @InterfaceAudience.Private", "return": "HBase2EventSerializer", "signature": "HBase2EventSerializer getSerializer()", "full_signature": "@VisibleForTesting @InterfaceAudience.Private HBase2EventSerializer getSerializer()", "class_method_signature": "HBase2Sink.getSerializer()", "testcase": false, "constructor": false}, {"identifier": "getBatchSize", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getBatchSize()", "full_signature": "@Override public long getBatchSize()", "class_method_signature": "HBase2Sink.getBatchSize()", "testcase": false, "constructor": false}], "file": "flume-ng-sinks/flume-ng-hbase2-sink/src/main/java/org/apache/flume/sink/hbase2/HBase2Sink.java"}, "focal_method": {"identifier": "configure", "parameters": "(Context context)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n  @Override\n  public void configure(Context context) {\n    if (!this.hasVersionAtLeast2()) {\n      throw new ConfigurationException(\n              \"HBase major version number must be at least 2 for hbase2sink\");\n    }\n\n    tableName = context.getString(HBase2SinkConfigurationConstants.CONFIG_TABLE);\n    String cf = context.getString(\n        HBase2SinkConfigurationConstants.CONFIG_COLUMN_FAMILY);\n    batchSize = context.getLong(\n        HBase2SinkConfigurationConstants.CONFIG_BATCHSIZE, 100L);\n    Context serializerContext = new Context();\n    //If not specified, will use HBase defaults.\n    String eventSerializerType = context.getString(\n            HBase2SinkConfigurationConstants.CONFIG_SERIALIZER);\n    Preconditions.checkNotNull(tableName,\n        \"Table name cannot be empty, please specify in configuration file\");\n    Preconditions.checkNotNull(cf,\n        \"Column family cannot be empty, please specify in configuration file\");\n    //Check foe event serializer, if null set event serializer type\n    if (eventSerializerType == null || eventSerializerType.isEmpty()) {\n      eventSerializerType =\n          \"org.apache.flume.sink.hbase2.SimpleHBase2EventSerializer\";\n      logger.info(\"No serializer defined, Will use default\");\n    }\n    serializerContext.putAll(context.getSubProperties(\n        HBase2SinkConfigurationConstants.CONFIG_SERIALIZER_PREFIX));\n    columnFamily = cf.getBytes(Charsets.UTF_8);\n    try {\n      Class<? extends HBase2EventSerializer> clazz =\n          (Class<? extends HBase2EventSerializer>)\n              Class.forName(eventSerializerType);\n      serializer = clazz.newInstance();\n      serializer.configure(serializerContext);\n    } catch (Exception e) {\n      logger.error(\"Could not instantiate event serializer.\", e);\n      Throwables.propagate(e);\n    }\n    kerberosKeytab = context.getString(HBase2SinkConfigurationConstants.CONFIG_KEYTAB);\n    kerberosPrincipal = context.getString(HBase2SinkConfigurationConstants.CONFIG_PRINCIPAL);\n\n    enableWal = context.getBoolean(HBase2SinkConfigurationConstants\n        .CONFIG_ENABLE_WAL, HBase2SinkConfigurationConstants.DEFAULT_ENABLE_WAL);\n    logger.info(\"The write to WAL option is set to: \" + String.valueOf(enableWal));\n    if (!enableWal) {\n      logger.warn(\"HBase Sink's enableWal configuration is set to false. All \" +\n          \"writes to HBase will have WAL disabled, and any data in the \" +\n          \"memstore of this region in the Region Server could be lost!\");\n    }\n\n    batchIncrements = context.getBoolean(\n        HBase2SinkConfigurationConstants.CONFIG_COALESCE_INCREMENTS,\n        HBase2SinkConfigurationConstants.DEFAULT_COALESCE_INCREMENTS);\n\n    if (batchIncrements) {\n      logger.info(\"Increment coalescing is enabled. Increments will be \" +\n          \"buffered.\");\n    }\n\n    String zkQuorum = context.getString(HBase2SinkConfigurationConstants\n        .ZK_QUORUM);\n    Integer port = null;\n    /*\n     * HBase allows multiple nodes in the quorum, but all need to use the\n     * same client port. So get the nodes in host:port format,\n     * and ignore the ports for all nodes except the first one. If no port is\n     * specified, use default.\n     */\n    if (zkQuorum != null && !zkQuorum.isEmpty()) {\n      StringBuilder zkBuilder = new StringBuilder();\n      logger.info(\"Using ZK Quorum: \" + zkQuorum);\n      String[] zkHosts = zkQuorum.split(\",\");\n      int length = zkHosts.length;\n      for (int i = 0; i < length; i++) {\n        String[] zkHostAndPort = zkHosts[i].split(\":\");\n        zkBuilder.append(zkHostAndPort[0].trim());\n        if (i != length - 1) {\n          zkBuilder.append(\",\");\n        } else {\n          zkQuorum = zkBuilder.toString();\n        }\n        if (zkHostAndPort[1] == null) {\n          throw new FlumeException(\"Expected client port for the ZK node!\");\n        }\n        if (port == null) {\n          port = Integer.parseInt(zkHostAndPort[1].trim());\n        } else if (!port.equals(Integer.parseInt(zkHostAndPort[1].trim()))) {\n          throw new FlumeException(\"All Zookeeper nodes in the quorum must \" +\n              \"use the same client port.\");\n        }\n      }\n      if (port == null) {\n        port = HConstants.DEFAULT_ZOOKEPER_CLIENT_PORT;\n      }\n      this.config.set(HConstants.ZOOKEEPER_QUORUM, zkQuorum);\n      this.config.setInt(HConstants.ZOOKEEPER_CLIENT_PORT, port);\n    }\n    String hbaseZnode = context.getString(\n        HBase2SinkConfigurationConstants.ZK_ZNODE_PARENT);\n    if (hbaseZnode != null && !hbaseZnode.isEmpty()) {\n      this.config.set(HConstants.ZOOKEEPER_ZNODE_PARENT, hbaseZnode);\n    }\n    sinkCounter = new SinkCounter(this.getName());\n  }", "signature": "void configure(Context context)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public void configure(Context context)", "class_method_signature": "HBase2Sink.configure(Context context)", "testcase": false, "constructor": false, "invocations": ["hasVersionAtLeast2", "getString", "getString", "getLong", "getString", "checkNotNull", "checkNotNull", "isEmpty", "info", "putAll", "getSubProperties", "getBytes", "forName", "newInstance", "configure", "error", "propagate", "getString", "getString", "getBoolean", "info", "valueOf", "warn", "getBoolean", "info", "getString", "isEmpty", "info", "split", "split", "append", "trim", "append", "toString", "parseInt", "trim", "equals", "parseInt", "trim", "set", "setInt", "getString", "isEmpty", "set", "getName"]}, "repository": {"repo_id": 2198510, "url": "https://github.com/apache/flume", "language": "Java", "is_fork": false, "fork_count": 1372, "stargazer_count": 1971, "size": 44377, "license": "licensed"}}