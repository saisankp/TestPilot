{"test_class": {"identifier": "JcrObservationManagerTest", "superclass": "extends SingleUseAbstractTest", "interfaces": "", "fields": [{"original_string": "private static final String LOCK_MIXIN = \"mix:lockable\";", "modifier": "private static final", "type": "String", "declarator": "LOCK_MIXIN = \"mix:lockable\"", "var_name": "LOCK_MIXIN"}, {"original_string": "private static final String LOCK_OWNER = \"jcr:lockOwner\";", "modifier": "private static final", "type": "String", "declarator": "LOCK_OWNER = \"jcr:lockOwner\"", "var_name": "LOCK_OWNER"}, {"original_string": "private static final String LOCK_IS_DEEP = \"jcr:lockIsDeep\";", "modifier": "private static final", "type": "String", "declarator": "LOCK_IS_DEEP = \"jcr:lockIsDeep\"", "var_name": "LOCK_IS_DEEP"}, {"original_string": "private static final String REF_MIXIN = \"mix:referenceable\";", "modifier": "private static final", "type": "String", "declarator": "REF_MIXIN = \"mix:referenceable\"", "var_name": "REF_MIXIN"}, {"original_string": "private static final String UNSTRUCTURED = \"nt:unstructured\";", "modifier": "private static final", "type": "String", "declarator": "UNSTRUCTURED = \"nt:unstructured\"", "var_name": "UNSTRUCTURED"}, {"original_string": "private static final String USER_ID = \"superuser\";", "modifier": "private static final", "type": "String", "declarator": "USER_ID = \"superuser\"", "var_name": "USER_ID"}, {"original_string": "protected static final String WORKSPACE = \"ws1\";", "modifier": "protected static final", "type": "String", "declarator": "WORKSPACE = \"ws1\"", "var_name": "WORKSPACE"}, {"original_string": "protected static final String WORKSPACE2 = \"ws2\";", "modifier": "protected static final", "type": "String", "declarator": "WORKSPACE2 = \"ws2\"", "var_name": "WORKSPACE2"}, {"original_string": "private Node testRootNode;", "modifier": "private", "type": "Node", "declarator": "testRootNode", "var_name": "testRootNode"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/JcrObservationManagerTest.java"}, "test_case": {"identifier": "shouldProvideFullEventJournal", "parameters": "()", "modifiers": "@Test @FixFor( \"MODE-2019\" ) public", "return": "void", "body": "@Test\n    @FixFor( \"MODE-2019\" )\n    public void shouldProvideFullEventJournal() throws Exception {\n        // add node\n        Node node1 = getRoot().addNode(\"node1\");\n        node1.setProperty(\"prop1\", \"value\");\n        node1.setProperty(\"prop2\", \"value2\");\n        Node node2 = getRoot().addNode(\"node2\");\n        session.save();\n        Thread.sleep(100);\n\n        node1.setProperty(\"prop2\", \"edited value\");\n        node1.setProperty(\"prop1\", (String) null);\n        node2.remove();\n        session.save();\n        Thread.sleep(100);\n\n        EventJournal eventJournal = getObservationManager().getEventJournal();\n        assertPathsInJournal(eventJournal, false,\n                             \"/testroot/node1\", \"/testroot/node1/jcr:primaryType\", \"/testroot/node1/prop1\",\n                             \"/testroot/node1/prop2\", \"/testroot/node2/jcr:primaryType\", \"/testroot/node2/jcr:primaryType\",\n                             \"/testroot/node1/prop2\", \"/testroot/node1/prop1\", \"/testroot/node1/prop2\");\n\n    }", "signature": "void shouldProvideFullEventJournal()", "full_signature": "@Test @FixFor( \"MODE-2019\" ) public void shouldProvideFullEventJournal()", "class_method_signature": "JcrObservationManagerTest.shouldProvideFullEventJournal()", "testcase": true, "constructor": false, "invocations": ["addNode", "getRoot", "setProperty", "setProperty", "addNode", "getRoot", "save", "sleep", "setProperty", "setProperty", "remove", "save", "sleep", "getEventJournal", "getObservationManager", "assertPathsInJournal"]}, "focal_class": {"identifier": "JcrObservationManager", "superclass": "", "interfaces": "implements ObservationManager", "fields": [{"original_string": "protected static final Logger LOGGER = Logger.getLogger(JcrObservationManager.class);", "modifier": "protected static final", "type": "Logger", "declarator": "LOGGER = Logger.getLogger(JcrObservationManager.class)", "var_name": "LOGGER"}, {"original_string": "static final String OBSERVATION_USER_DATA_KEY = \"org.modeshape.jcr.observation.userdata\";", "modifier": "static final", "type": "String", "declarator": "OBSERVATION_USER_DATA_KEY = \"org.modeshape.jcr.observation.userdata\"", "var_name": "OBSERVATION_USER_DATA_KEY"}, {"original_string": "static final String MOVE_FROM_KEY = \"srcAbsPath\";", "modifier": "static final", "type": "String", "declarator": "MOVE_FROM_KEY = \"srcAbsPath\"", "var_name": "MOVE_FROM_KEY"}, {"original_string": "static final String MOVE_TO_KEY = \"destAbsPath\";", "modifier": "static final", "type": "String", "declarator": "MOVE_TO_KEY = \"destAbsPath\"", "var_name": "MOVE_TO_KEY"}, {"original_string": "static final String ORDER_DEST_KEY = \"destChildRelPath\";", "modifier": "static final", "type": "String", "declarator": "ORDER_DEST_KEY = \"destChildRelPath\"", "var_name": "ORDER_DEST_KEY"}, {"original_string": "static final String ORDER_SRC_KEY = \"srcChildRelPath\";", "modifier": "static final", "type": "String", "declarator": "ORDER_SRC_KEY = \"srcChildRelPath\"", "var_name": "ORDER_SRC_KEY"}, {"original_string": "protected final JcrSession session;", "modifier": "protected final", "type": "JcrSession", "declarator": "session", "var_name": "session"}, {"original_string": "private final Observable repositoryObservable;", "modifier": "private final", "type": "Observable", "declarator": "repositoryObservable", "var_name": "repositoryObservable"}, {"original_string": "private final Set<JcrListenerAdapter> listeners;", "modifier": "private final", "type": "Set<JcrListenerAdapter>", "declarator": "listeners", "var_name": "listeners"}, {"original_string": "private final StringFactory strings;", "modifier": "private final", "type": "StringFactory", "declarator": "strings", "var_name": "strings"}, {"original_string": "private final PathFactory paths;", "modifier": "private final", "type": "PathFactory", "declarator": "paths", "var_name": "paths"}, {"original_string": "private final NameFactory names;", "modifier": "private final", "type": "NameFactory", "declarator": "names", "var_name": "names"}], "methods": [{"identifier": "JcrObservationManager", "parameters": "( JcrSession session,\n                           Observable repositoryObservable )", "modifiers": "", "return": "", "signature": " JcrObservationManager( JcrSession session,\n                           Observable repositoryObservable )", "full_signature": "  JcrObservationManager( JcrSession session,\n                           Observable repositoryObservable )", "class_method_signature": "JcrObservationManager.JcrObservationManager( JcrSession session,\n                           Observable repositoryObservable )", "testcase": false, "constructor": true}, {"identifier": "addEventListener", "parameters": "( EventListener listener,\n                                  int eventTypes,\n                                  String absPath,\n                                  boolean isDeep,\n                                  String[] uuid,\n                                  String[] nodeTypeName,\n                                  boolean noLocal )", "modifiers": "@Override public", "return": "void", "signature": "void addEventListener( EventListener listener,\n                                  int eventTypes,\n                                  String absPath,\n                                  boolean isDeep,\n                                  String[] uuid,\n                                  String[] nodeTypeName,\n                                  boolean noLocal )", "full_signature": "@Override public void addEventListener( EventListener listener,\n                                  int eventTypes,\n                                  String absPath,\n                                  boolean isDeep,\n                                  String[] uuid,\n                                  String[] nodeTypeName,\n                                  boolean noLocal )", "class_method_signature": "JcrObservationManager.addEventListener( EventListener listener,\n                                  int eventTypes,\n                                  String absPath,\n                                  boolean isDeep,\n                                  String[] uuid,\n                                  String[] nodeTypeName,\n                                  boolean noLocal )", "testcase": false, "constructor": false}, {"identifier": "checkSession", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void checkSession()", "full_signature": "private void checkSession()", "class_method_signature": "JcrObservationManager.checkSession()", "testcase": false, "constructor": false}, {"identifier": "getRegisteredEventListeners", "parameters": "()", "modifiers": "@Override public", "return": "EventListenerIterator", "signature": "EventListenerIterator getRegisteredEventListeners()", "full_signature": "@Override public EventListenerIterator getRegisteredEventListeners()", "class_method_signature": "JcrObservationManager.getRegisteredEventListeners()", "testcase": false, "constructor": false}, {"identifier": "removeAllEventListeners", "parameters": "()", "modifiers": "", "return": "void", "signature": "void removeAllEventListeners()", "full_signature": " void removeAllEventListeners()", "class_method_signature": "JcrObservationManager.removeAllEventListeners()", "testcase": false, "constructor": false}, {"identifier": "removeEventListener", "parameters": "( EventListener listener )", "modifiers": "@Override public", "return": "void", "signature": "void removeEventListener( EventListener listener )", "full_signature": "@Override public void removeEventListener( EventListener listener )", "class_method_signature": "JcrObservationManager.removeEventListener( EventListener listener )", "testcase": false, "constructor": false}, {"identifier": "setUserData", "parameters": "( String userData )", "modifiers": "@Override public", "return": "void", "signature": "void setUserData( String userData )", "full_signature": "@Override public void setUserData( String userData )", "class_method_signature": "JcrObservationManager.setUserData( String userData )", "testcase": false, "constructor": false}, {"identifier": "getEventJournal", "parameters": "()", "modifiers": "@Override public", "return": "EventJournal", "signature": "EventJournal getEventJournal()", "full_signature": "@Override public EventJournal getEventJournal()", "class_method_signature": "JcrObservationManager.getEventJournal()", "testcase": false, "constructor": false}, {"identifier": "getEventJournal", "parameters": "( int eventTypes,\n                                         String absPath,\n                                         boolean isDeep,\n                                         String[] uuid,\n                                         String[] nodeTypeName )", "modifiers": "@Override public", "return": "EventJournal", "signature": "EventJournal getEventJournal( int eventTypes,\n                                         String absPath,\n                                         boolean isDeep,\n                                         String[] uuid,\n                                         String[] nodeTypeName )", "full_signature": "@Override public EventJournal getEventJournal( int eventTypes,\n                                         String absPath,\n                                         boolean isDeep,\n                                         String[] uuid,\n                                         String[] nodeTypeName )", "class_method_signature": "JcrObservationManager.getEventJournal( int eventTypes,\n                                         String absPath,\n                                         boolean isDeep,\n                                         String[] uuid,\n                                         String[] nodeTypeName )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/JcrObservationManager.java"}, "focal_method": {"identifier": "getEventJournal", "parameters": "()", "modifiers": "@Override public", "return": "EventJournal", "body": "@Override\n    public EventJournal getEventJournal() {\n        return session.repository().journalId() != null ? new JcrEventJournal() : null;\n    }", "signature": "EventJournal getEventJournal()", "full_signature": "@Override public EventJournal getEventJournal()", "class_method_signature": "JcrObservationManager.getEventJournal()", "testcase": false, "constructor": false, "invocations": ["journalId", "repository"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}