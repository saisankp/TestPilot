{"test_class": {"identifier": "NiciraNvpElementTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long NETWORK_ID = 42L;", "modifier": "private static final", "type": "long", "declarator": "NETWORK_ID = 42L", "var_name": "NETWORK_ID"}, {"original_string": "NiciraNvpElement element = new NiciraNvpElement();", "modifier": "", "type": "NiciraNvpElement", "declarator": "element = new NiciraNvpElement()", "var_name": "element"}, {"original_string": "NetworkOrchestrationService networkManager = mock(NetworkOrchestrationService.class);", "modifier": "", "type": "NetworkOrchestrationService", "declarator": "networkManager = mock(NetworkOrchestrationService.class)", "var_name": "networkManager"}, {"original_string": "NetworkModel networkModel = mock(NetworkModel.class);", "modifier": "", "type": "NetworkModel", "declarator": "networkModel = mock(NetworkModel.class)", "var_name": "networkModel"}, {"original_string": "NetworkServiceMapDao ntwkSrvcDao = mock(NetworkServiceMapDao.class);", "modifier": "", "type": "NetworkServiceMapDao", "declarator": "ntwkSrvcDao = mock(NetworkServiceMapDao.class)", "var_name": "ntwkSrvcDao"}, {"original_string": "AgentManager agentManager = mock(AgentManager.class);", "modifier": "", "type": "AgentManager", "declarator": "agentManager = mock(AgentManager.class)", "var_name": "agentManager"}, {"original_string": "HostDao hostDao = mock(HostDao.class);", "modifier": "", "type": "HostDao", "declarator": "hostDao = mock(HostDao.class)", "var_name": "hostDao"}, {"original_string": "NiciraNvpDao niciraNvpDao = mock(NiciraNvpDao.class);", "modifier": "", "type": "NiciraNvpDao", "declarator": "niciraNvpDao = mock(NiciraNvpDao.class)", "var_name": "niciraNvpDao"}, {"original_string": "NiciraNvpRouterMappingDao niciraNvpRouterMappingDao = mock(NiciraNvpRouterMappingDao.class);", "modifier": "", "type": "NiciraNvpRouterMappingDao", "declarator": "niciraNvpRouterMappingDao = mock(NiciraNvpRouterMappingDao.class)", "var_name": "niciraNvpRouterMappingDao"}], "file": "plugins/network-elements/nicira-nvp/src/test/java/com/cloud/network/element/NiciraNvpElementTest.java"}, "test_case": {"identifier": "implementTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void implementTest() throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {\n        final Network network = mock(Network.class);\n        when(network.getBroadcastDomainType()).thenReturn(BroadcastDomainType.Lswitch);\n        when(network.getId()).thenReturn(NETWORK_ID);\n\n        final NetworkOffering offering = mock(NetworkOffering.class);\n        when(offering.getId()).thenReturn(NETWORK_ID);\n        when(offering.getTrafficType()).thenReturn(TrafficType.Guest);\n        when(offering.getGuestType()).thenReturn(GuestType.Isolated);\n\n        mock(DeployDestination.class);\n\n        final Domain dom = mock(Domain.class);\n        when(dom.getName()).thenReturn(\"domain\");\n        final Account acc = mock(Account.class);\n        when(acc.getAccountName()).thenReturn(\"accountname\");\n        final ReservationContext context = mock(ReservationContext.class);\n        when(context.getDomain()).thenReturn(dom);\n        when(context.getAccount()).thenReturn(acc);\n    }", "signature": "void implementTest()", "full_signature": "@Test public void implementTest()", "class_method_signature": "NiciraNvpElementTest.implementTest()", "testcase": true, "constructor": false, "invocations": ["mock", "thenReturn", "when", "getBroadcastDomainType", "thenReturn", "when", "getId", "mock", "thenReturn", "when", "getId", "thenReturn", "when", "getTrafficType", "thenReturn", "when", "getGuestType", "mock", "mock", "thenReturn", "when", "getName", "mock", "thenReturn", "when", "getAccountName", "mock", "thenReturn", "when", "getDomain", "thenReturn", "when", "getAccount"]}, "focal_class": {"identifier": "NiciraNvpElement", "superclass": "extends AdapterBase", "interfaces": "implements ConnectivityProvider, SourceNatServiceProvider, PortForwardingServiceProvider, StaticNatServiceProvider,\nNiciraNvpElementService, ResourceStateAdapter, IpDeployer", "fields": [{"original_string": "private static final int MAX_PORT = 65535;", "modifier": "private static final", "type": "int", "declarator": "MAX_PORT = 65535", "var_name": "MAX_PORT"}, {"original_string": "private static final int MIN_PORT = 0;", "modifier": "private static final", "type": "int", "declarator": "MIN_PORT = 0", "var_name": "MIN_PORT"}, {"original_string": "private static final Logger s_logger = LoggerFactory.getLogger(NiciraNvpElement.class);", "modifier": "private static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(NiciraNvpElement.class)", "var_name": "s_logger"}, {"original_string": "private static final Map<Service, Map<Capability, String>> capabilities = setCapabilities();", "modifier": "private static final", "type": "Map<Service, Map<Capability, String>>", "declarator": "capabilities = setCapabilities()", "var_name": "capabilities"}, {"original_string": "@Inject\n    protected NicDao nicDao;", "modifier": "@Inject\n    protected", "type": "NicDao", "declarator": "nicDao", "var_name": "nicDao"}, {"original_string": "@Inject\n    protected ResourceManager resourceMgr;", "modifier": "@Inject\n    protected", "type": "ResourceManager", "declarator": "resourceMgr", "var_name": "resourceMgr"}, {"original_string": "@Inject\n    protected PhysicalNetworkDao physicalNetworkDao;", "modifier": "@Inject\n    protected", "type": "PhysicalNetworkDao", "declarator": "physicalNetworkDao", "var_name": "physicalNetworkDao"}, {"original_string": "@Inject\n    protected PhysicalNetworkServiceProviderDao physicalNetworkServiceProviderDao;", "modifier": "@Inject\n    protected", "type": "PhysicalNetworkServiceProviderDao", "declarator": "physicalNetworkServiceProviderDao", "var_name": "physicalNetworkServiceProviderDao"}, {"original_string": "@Inject\n    protected NiciraNvpDao niciraNvpDao;", "modifier": "@Inject\n    protected", "type": "NiciraNvpDao", "declarator": "niciraNvpDao", "var_name": "niciraNvpDao"}, {"original_string": "@Inject\n    protected HostDetailsDao hostDetailsDao;", "modifier": "@Inject\n    protected", "type": "HostDetailsDao", "declarator": "hostDetailsDao", "var_name": "hostDetailsDao"}, {"original_string": "@Inject\n    protected HostDao hostDao;", "modifier": "@Inject\n    protected", "type": "HostDao", "declarator": "hostDao", "var_name": "hostDao"}, {"original_string": "@Inject\n    protected AgentManager agentMgr;", "modifier": "@Inject\n    protected", "type": "AgentManager", "declarator": "agentMgr", "var_name": "agentMgr"}, {"original_string": "@Inject\n    protected NiciraNvpNicMappingDao niciraNvpNicMappingDao;", "modifier": "@Inject\n    protected", "type": "NiciraNvpNicMappingDao", "declarator": "niciraNvpNicMappingDao", "var_name": "niciraNvpNicMappingDao"}, {"original_string": "@Inject\n    protected NiciraNvpRouterMappingDao niciraNvpRouterMappingDao;", "modifier": "@Inject\n    protected", "type": "NiciraNvpRouterMappingDao", "declarator": "niciraNvpRouterMappingDao", "var_name": "niciraNvpRouterMappingDao"}, {"original_string": "@Inject\n    protected NetworkDao networkDao;", "modifier": "@Inject\n    protected", "type": "NetworkDao", "declarator": "networkDao", "var_name": "networkDao"}, {"original_string": "@Inject\n    protected NetworkOrchestrationService networkManager;", "modifier": "@Inject\n    protected", "type": "NetworkOrchestrationService", "declarator": "networkManager", "var_name": "networkManager"}, {"original_string": "@Inject\n    protected NetworkModel networkModel;", "modifier": "@Inject\n    protected", "type": "NetworkModel", "declarator": "networkModel", "var_name": "networkModel"}, {"original_string": "@Inject\n    protected ConfigurationManager configMgr;", "modifier": "@Inject\n    protected", "type": "ConfigurationManager", "declarator": "configMgr", "var_name": "configMgr"}, {"original_string": "@Inject\n    protected NetworkServiceMapDao ntwkSrvcDao;", "modifier": "@Inject\n    protected", "type": "NetworkServiceMapDao", "declarator": "ntwkSrvcDao", "var_name": "ntwkSrvcDao"}, {"original_string": "@Inject\n    protected VlanDao vlanDao;", "modifier": "@Inject\n    protected", "type": "VlanDao", "declarator": "vlanDao", "var_name": "vlanDao"}, {"original_string": "@Inject\n    protected IpAddressManager ipAddrMgr;", "modifier": "@Inject\n    protected", "type": "IpAddressManager", "declarator": "ipAddrMgr", "var_name": "ipAddrMgr"}], "methods": [{"identifier": "getCapabilities", "parameters": "()", "modifiers": "@Override public", "return": "Map<Service, Map<Capability, String>>", "signature": "Map<Service, Map<Capability, String>> getCapabilities()", "full_signature": "@Override public Map<Service, Map<Capability, String>> getCapabilities()", "class_method_signature": "NiciraNvpElement.getCapabilities()", "testcase": false, "constructor": false}, {"identifier": "getProvider", "parameters": "()", "modifiers": "@Override public", "return": "Provider", "signature": "Provider getProvider()", "full_signature": "@Override public Provider getProvider()", "class_method_signature": "NiciraNvpElement.getProvider()", "testcase": false, "constructor": false}, {"identifier": "canHandle", "parameters": "(Network network, Service service)", "modifiers": "protected", "return": "boolean", "signature": "boolean canHandle(Network network, Service service)", "full_signature": "protected boolean canHandle(Network network, Service service)", "class_method_signature": "NiciraNvpElement.canHandle(Network network, Service service)", "testcase": false, "constructor": false}, {"identifier": "configure", "parameters": "(String name, Map<String, Object> params)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean configure(String name, Map<String, Object> params)", "full_signature": "@Override public boolean configure(String name, Map<String, Object> params)", "class_method_signature": "NiciraNvpElement.configure(String name, Map<String, Object> params)", "testcase": false, "constructor": false}, {"identifier": "implement", "parameters": "(Network network, NetworkOffering offering, DeployDestination dest, ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean implement(Network network, NetworkOffering offering, DeployDestination dest, ReservationContext context)", "full_signature": "@Override public boolean implement(Network network, NetworkOffering offering, DeployDestination dest, ReservationContext context)", "class_method_signature": "NiciraNvpElement.implement(Network network, NetworkOffering offering, DeployDestination dest, ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "prepare", "parameters": "(Network network, NicProfile nic, VirtualMachineProfile vm, DeployDestination dest, ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean prepare(Network network, NicProfile nic, VirtualMachineProfile vm, DeployDestination dest, ReservationContext context)", "full_signature": "@Override public boolean prepare(Network network, NicProfile nic, VirtualMachineProfile vm, DeployDestination dest, ReservationContext context)", "class_method_signature": "NiciraNvpElement.prepare(Network network, NicProfile nic, VirtualMachineProfile vm, DeployDestination dest, ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "release", "parameters": "(Network network, NicProfile nic, VirtualMachineProfile vm, ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean release(Network network, NicProfile nic, VirtualMachineProfile vm, ReservationContext context)", "full_signature": "@Override public boolean release(Network network, NicProfile nic, VirtualMachineProfile vm, ReservationContext context)", "class_method_signature": "NiciraNvpElement.release(Network network, NicProfile nic, VirtualMachineProfile vm, ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "shutdown", "parameters": "(Network network, ReservationContext context, boolean cleanup)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean shutdown(Network network, ReservationContext context, boolean cleanup)", "full_signature": "@Override public boolean shutdown(Network network, ReservationContext context, boolean cleanup)", "class_method_signature": "NiciraNvpElement.shutdown(Network network, ReservationContext context, boolean cleanup)", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "(Network network, ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean destroy(Network network, ReservationContext context)", "full_signature": "@Override public boolean destroy(Network network, ReservationContext context)", "class_method_signature": "NiciraNvpElement.destroy(Network network, ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "isReady", "parameters": "(PhysicalNetworkServiceProvider provider)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReady(PhysicalNetworkServiceProvider provider)", "full_signature": "@Override public boolean isReady(PhysicalNetworkServiceProvider provider)", "class_method_signature": "NiciraNvpElement.isReady(PhysicalNetworkServiceProvider provider)", "testcase": false, "constructor": false}, {"identifier": "shutdownProviderInstances", "parameters": "(PhysicalNetworkServiceProvider provider, ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean shutdownProviderInstances(PhysicalNetworkServiceProvider provider, ReservationContext context)", "full_signature": "@Override public boolean shutdownProviderInstances(PhysicalNetworkServiceProvider provider, ReservationContext context)", "class_method_signature": "NiciraNvpElement.shutdownProviderInstances(PhysicalNetworkServiceProvider provider, ReservationContext context)", "testcase": false, "constructor": false}, {"identifier": "canEnableIndividualServices", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean canEnableIndividualServices()", "full_signature": "@Override public boolean canEnableIndividualServices()", "class_method_signature": "NiciraNvpElement.canEnableIndividualServices()", "testcase": false, "constructor": false}, {"identifier": "verifyServicesCombination", "parameters": "(Set<Service> services)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean verifyServicesCombination(Set<Service> services)", "full_signature": "@Override public boolean verifyServicesCombination(Set<Service> services)", "class_method_signature": "NiciraNvpElement.verifyServicesCombination(Set<Service> services)", "testcase": false, "constructor": false}, {"identifier": "setCapabilities", "parameters": "()", "modifiers": "private static", "return": "Map<Service, Map<Capability, String>>", "signature": "Map<Service, Map<Capability, String>> setCapabilities()", "full_signature": "private static Map<Service, Map<Capability, String>> setCapabilities()", "class_method_signature": "NiciraNvpElement.setCapabilities()", "testcase": false, "constructor": false}, {"identifier": "getCommands", "parameters": "()", "modifiers": "@Override public", "return": "List<Class<?>>", "signature": "List<Class<?>> getCommands()", "full_signature": "@Override public List<Class<?>> getCommands()", "class_method_signature": "NiciraNvpElement.getCommands()", "testcase": false, "constructor": false}, {"identifier": "addNiciraNvpDevice", "parameters": "(AddNiciraNvpDeviceCmd cmd)", "modifiers": "@Override @DB public", "return": "NiciraNvpDeviceVO", "signature": "NiciraNvpDeviceVO addNiciraNvpDevice(AddNiciraNvpDeviceCmd cmd)", "full_signature": "@Override @DB public NiciraNvpDeviceVO addNiciraNvpDevice(AddNiciraNvpDeviceCmd cmd)", "class_method_signature": "NiciraNvpElement.addNiciraNvpDevice(AddNiciraNvpDeviceCmd cmd)", "testcase": false, "constructor": false}, {"identifier": "createNiciraNvpDeviceResponse", "parameters": "(NiciraNvpDeviceVO niciraNvpDeviceVO)", "modifiers": "@Override public", "return": "NiciraNvpDeviceResponse", "signature": "NiciraNvpDeviceResponse createNiciraNvpDeviceResponse(NiciraNvpDeviceVO niciraNvpDeviceVO)", "full_signature": "@Override public NiciraNvpDeviceResponse createNiciraNvpDeviceResponse(NiciraNvpDeviceVO niciraNvpDeviceVO)", "class_method_signature": "NiciraNvpElement.createNiciraNvpDeviceResponse(NiciraNvpDeviceVO niciraNvpDeviceVO)", "testcase": false, "constructor": false}, {"identifier": "deleteNiciraNvpDevice", "parameters": "(DeleteNiciraNvpDeviceCmd cmd)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean deleteNiciraNvpDevice(DeleteNiciraNvpDeviceCmd cmd)", "full_signature": "@Override public boolean deleteNiciraNvpDevice(DeleteNiciraNvpDeviceCmd cmd)", "class_method_signature": "NiciraNvpElement.deleteNiciraNvpDevice(DeleteNiciraNvpDeviceCmd cmd)", "testcase": false, "constructor": false}, {"identifier": "listNiciraNvpDevices", "parameters": "(ListNiciraNvpDevicesCmd cmd)", "modifiers": "@Override public", "return": "List<NiciraNvpDeviceVO>", "signature": "List<NiciraNvpDeviceVO> listNiciraNvpDevices(ListNiciraNvpDevicesCmd cmd)", "full_signature": "@Override public List<NiciraNvpDeviceVO> listNiciraNvpDevices(ListNiciraNvpDevicesCmd cmd)", "class_method_signature": "NiciraNvpElement.listNiciraNvpDevices(ListNiciraNvpDevicesCmd cmd)", "testcase": false, "constructor": false}, {"identifier": "listNiciraNvpDeviceNetworks", "parameters": "(ListNiciraNvpDeviceNetworksCmd cmd)", "modifiers": "@Override public", "return": "List<? extends Network>", "signature": "List<? extends Network> listNiciraNvpDeviceNetworks(ListNiciraNvpDeviceNetworksCmd cmd)", "full_signature": "@Override public List<? extends Network> listNiciraNvpDeviceNetworks(ListNiciraNvpDeviceNetworksCmd cmd)", "class_method_signature": "NiciraNvpElement.listNiciraNvpDeviceNetworks(ListNiciraNvpDeviceNetworksCmd cmd)", "testcase": false, "constructor": false}, {"identifier": "createHostVOForConnectedAgent", "parameters": "(HostVO host, StartupCommand[] cmd)", "modifiers": "@Override public", "return": "HostVO", "signature": "HostVO createHostVOForConnectedAgent(HostVO host, StartupCommand[] cmd)", "full_signature": "@Override public HostVO createHostVOForConnectedAgent(HostVO host, StartupCommand[] cmd)", "class_method_signature": "NiciraNvpElement.createHostVOForConnectedAgent(HostVO host, StartupCommand[] cmd)", "testcase": false, "constructor": false}, {"identifier": "createHostVOForDirectConnectAgent", "parameters": "(HostVO host, StartupCommand[] startup, ServerResource resource, Map<String, String> details, List<String> hostTags)", "modifiers": "@Override public", "return": "HostVO", "signature": "HostVO createHostVOForDirectConnectAgent(HostVO host, StartupCommand[] startup, ServerResource resource, Map<String, String> details, List<String> hostTags)", "full_signature": "@Override public HostVO createHostVOForDirectConnectAgent(HostVO host, StartupCommand[] startup, ServerResource resource, Map<String, String> details, List<String> hostTags)", "class_method_signature": "NiciraNvpElement.createHostVOForDirectConnectAgent(HostVO host, StartupCommand[] startup, ServerResource resource, Map<String, String> details, List<String> hostTags)", "testcase": false, "constructor": false}, {"identifier": "deleteHost", "parameters": "(HostVO host, boolean isForced, boolean isForceDeleteStorage)", "modifiers": "@Override public", "return": "DeleteHostAnswer", "signature": "DeleteHostAnswer deleteHost(HostVO host, boolean isForced, boolean isForceDeleteStorage)", "full_signature": "@Override public DeleteHostAnswer deleteHost(HostVO host, boolean isForced, boolean isForceDeleteStorage)", "class_method_signature": "NiciraNvpElement.deleteHost(HostVO host, boolean isForced, boolean isForceDeleteStorage)", "testcase": false, "constructor": false}, {"identifier": "getIpDeployer", "parameters": "(Network network)", "modifiers": "@Override public", "return": "IpDeployer", "signature": "IpDeployer getIpDeployer(Network network)", "full_signature": "@Override public IpDeployer getIpDeployer(Network network)", "class_method_signature": "NiciraNvpElement.getIpDeployer(Network network)", "testcase": false, "constructor": false}, {"identifier": "applyIps", "parameters": "(Network network, List<? extends PublicIpAddress> ipAddress, Set<Service> services)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean applyIps(Network network, List<? extends PublicIpAddress> ipAddress, Set<Service> services)", "full_signature": "@Override public boolean applyIps(Network network, List<? extends PublicIpAddress> ipAddress, Set<Service> services)", "class_method_signature": "NiciraNvpElement.applyIps(Network network, List<? extends PublicIpAddress> ipAddress, Set<Service> services)", "testcase": false, "constructor": false}, {"identifier": "applyStaticNats", "parameters": "(Network network, List<? extends StaticNat> rules)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean applyStaticNats(Network network, List<? extends StaticNat> rules)", "full_signature": "@Override public boolean applyStaticNats(Network network, List<? extends StaticNat> rules)", "class_method_signature": "NiciraNvpElement.applyStaticNats(Network network, List<? extends StaticNat> rules)", "testcase": false, "constructor": false}, {"identifier": "applyPFRules", "parameters": "(Network network, List<PortForwardingRule> rules)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean applyPFRules(Network network, List<PortForwardingRule> rules)", "full_signature": "@Override public boolean applyPFRules(Network network, List<PortForwardingRule> rules)", "class_method_signature": "NiciraNvpElement.applyPFRules(Network network, List<PortForwardingRule> rules)", "testcase": false, "constructor": false}], "file": "plugins/network-elements/nicira-nvp/src/main/java/com/cloud/network/element/NiciraNvpElement.java"}, "focal_method": {"identifier": "implement", "parameters": "(Network network, NetworkOffering offering, DeployDestination dest, ReservationContext context)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean implement(Network network, NetworkOffering offering, DeployDestination dest, ReservationContext context) throws ConcurrentOperationException,\n    ResourceUnavailableException, InsufficientCapacityException {\n        s_logger.debug(\"entering NiciraNvpElement implement function for network \" + network.getDisplayText() + \" (state \" + network.getState() + \")\");\n\n        if (!canHandle(network, Service.Connectivity)) {\n            return false;\n        }\n\n        if (network.getBroadcastUri() == null) {\n            s_logger.error(\"Nic has no broadcast Uri with the LSwitch Uuid\");\n            return false;\n        }\n\n        final List<NiciraNvpDeviceVO> devices = niciraNvpDao.listByPhysicalNetwork(network.getPhysicalNetworkId());\n        if (devices.isEmpty()) {\n            s_logger.error(\"No NiciraNvp Controller on physical network \" + network.getPhysicalNetworkId());\n            return false;\n        }\n        final NiciraNvpDeviceVO niciraNvpDevice = devices.get(0);\n        final HostVO niciraNvpHost = hostDao.findById(niciraNvpDevice.getHostId());\n        hostDao.loadDetails(niciraNvpHost);\n\n        final Account owner = context.getAccount();\n\n        /*\n         * TODO Shouldn't we lock the network as we might need to do\n         * multiple operations that should be done only once.\n         */\n\n        // Implement SourceNat immediately as we have al the info already\n        if (networkModel.isProviderSupportServiceInNetwork(network.getId(), Service.SourceNat, Provider.NiciraNvp)) {\n            s_logger.debug(\"Apparently we are supposed to provide SourceNat on this network\");\n\n            final PublicIp sourceNatIp = ipAddrMgr.assignSourceNatIpAddressToGuestNetwork(owner, network);\n            final String publicCidr = sourceNatIp.getAddress().addr() + \"/\" + NetUtils.getCidrSize(sourceNatIp.getVlanNetmask());\n            final String internalCidr = network.getGateway() + \"/\" + network.getCidr().split(\"/\")[1];\n            // assuming a vlan:\n            String vtag = sourceNatIp.getVlanTag();\n            BroadcastDomainType tiep = null;\n            try {\n                tiep = BroadcastDomainType.getTypeOf(vtag);\n            } catch (final URISyntaxException use) {\n                throw new CloudRuntimeException(\"vlantag for sourceNatIp is not valid: \" + vtag, use);\n            }\n            if (tiep == BroadcastDomainType.Vlan) {\n                vtag = BroadcastDomainType.Vlan.getValueFrom(BroadcastDomainType.fromString(vtag));\n            } else if (!(tiep == BroadcastDomainType.UnDecided || tiep == BroadcastDomainType.Native)) {\n                throw new CloudRuntimeException(\"only vlans are supported for sourceNatIp, at this moment: \" + vtag);\n            }\n            final long vlanid = Vlan.UNTAGGED.equals(vtag) ? 0 : Long.parseLong(vtag);\n\n            final CreateLogicalRouterCommand cmd =\n                    new CreateLogicalRouterCommand(niciraNvpHost.getDetail(\"l3gatewayserviceuuid\"), vlanid, BroadcastDomainType.getValue(network.getBroadcastUri()),\n                            \"router-\" + network.getDisplayText(), publicCidr, sourceNatIp.getGateway(), internalCidr, context.getDomain().getName() + \"-\" +\n                                    context.getAccount().getAccountName());\n            final CreateLogicalRouterAnswer answer = (CreateLogicalRouterAnswer)agentMgr.easySend(niciraNvpHost.getId(), cmd);\n            if (answer.getResult() == false) {\n                s_logger.error(\"Failed to create Logical Router for network \" + network.getDisplayText());\n                return false;\n            }\n\n            // Store the uuid so we can easily find it during cleanup\n            final NiciraNvpRouterMappingVO routermapping = new NiciraNvpRouterMappingVO(answer.getLogicalRouterUuid(), network.getId());\n            niciraNvpRouterMappingDao.persist(routermapping);\n        }\n\n        return true;\n    }", "signature": "boolean implement(Network network, NetworkOffering offering, DeployDestination dest, ReservationContext context)", "full_signature": "@Override public boolean implement(Network network, NetworkOffering offering, DeployDestination dest, ReservationContext context)", "class_method_signature": "NiciraNvpElement.implement(Network network, NetworkOffering offering, DeployDestination dest, ReservationContext context)", "testcase": false, "constructor": false, "invocations": ["debug", "getDisplayText", "getState", "canHandle", "getBroadcastUri", "error", "listByPhysicalNetwork", "getPhysicalNetworkId", "isEmpty", "error", "getPhysicalNetworkId", "get", "findById", "getHostId", "loadDetails", "getAccount", "isProviderSupportServiceInNetwork", "getId", "debug", "assignSourceNatIpAddressToGuestNetwork", "addr", "getAddress", "getCidrSize", "getVlanNetmask", "getGateway", "split", "getCidr", "getVlanTag", "getTypeOf", "getValueFrom", "fromString", "equals", "parseLong", "getDetail", "getValue", "getBroadcastUri", "getDisplayText", "getGateway", "getName", "getDomain", "getAccountName", "getAccount", "easySend", "getId", "getResult", "error", "getDisplayText", "getLogicalRouterUuid", "getId", "persist"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}