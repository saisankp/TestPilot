{"test_class": {"identifier": "AxiomUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private OMElement element;", "modifier": "private", "type": "OMElement", "declarator": "element", "var_name": "element"}], "file": "spring-ws-core/src/test/java/org/springframework/ws/soap/axiom/support/AxiomUtilsTest.java"}, "test_case": {"identifier": "testToNamespaceUndeclared", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testToNamespaceUndeclared() throws Exception {\n\t\tQName qName = new QName(\"http://www.example.com\", \"localPart\");\n\t\tOMNamespace namespace = AxiomUtils.toNamespace(qName, element);\n\t\tAssert.assertNotNull(\"Invalid namespace\", namespace);\n\t\tAssert.assertEquals(\"Invalid namespace\", qName.getNamespaceURI(), namespace.getNamespaceURI());\n\t\tAssert.assertFalse(\"Invalid prefix\", \"prefix\".equals(namespace.getPrefix()));\n\t}", "signature": "void testToNamespaceUndeclared()", "full_signature": "@Test public void testToNamespaceUndeclared()", "class_method_signature": "AxiomUtilsTest.testToNamespaceUndeclared()", "testcase": true, "constructor": false, "invocations": ["toNamespace", "assertNotNull", "assertEquals", "getNamespaceURI", "getNamespaceURI", "assertFalse", "equals", "getPrefix"]}, "focal_class": {"identifier": "AxiomUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "toNamespace", "parameters": "(QName qName, OMElement resolveElement)", "modifiers": "public static", "return": "OMNamespace", "signature": "OMNamespace toNamespace(QName qName, OMElement resolveElement)", "full_signature": "public static OMNamespace toNamespace(QName qName, OMElement resolveElement)", "class_method_signature": "AxiomUtils.toNamespace(QName qName, OMElement resolveElement)", "testcase": false, "constructor": false}, {"identifier": "toLanguage", "parameters": "(Locale locale)", "modifiers": "public static", "return": "String", "signature": "String toLanguage(Locale locale)", "full_signature": "public static String toLanguage(Locale locale)", "class_method_signature": "AxiomUtils.toLanguage(Locale locale)", "testcase": false, "constructor": false}, {"identifier": "toLocale", "parameters": "(String language)", "modifiers": "public static", "return": "Locale", "signature": "Locale toLocale(String language)", "full_signature": "public static Locale toLocale(String language)", "class_method_signature": "AxiomUtils.toLocale(String language)", "testcase": false, "constructor": false}, {"identifier": "removeContents", "parameters": "(OMContainer container)", "modifiers": "public static", "return": "void", "signature": "void removeContents(OMContainer container)", "full_signature": "public static void removeContents(OMContainer container)", "class_method_signature": "AxiomUtils.removeContents(OMContainer container)", "testcase": false, "constructor": false}, {"identifier": "toDocument", "parameters": "(SOAPEnvelope envelope)", "modifiers": "public static", "return": "Document", "signature": "Document toDocument(SOAPEnvelope envelope)", "full_signature": "public static Document toDocument(SOAPEnvelope envelope)", "class_method_signature": "AxiomUtils.toDocument(SOAPEnvelope envelope)", "testcase": false, "constructor": false}, {"identifier": "toEnvelope", "parameters": "(Document document)", "modifiers": "public static", "return": "SOAPEnvelope", "signature": "SOAPEnvelope toEnvelope(Document document)", "full_signature": "public static SOAPEnvelope toEnvelope(Document document)", "class_method_signature": "AxiomUtils.toEnvelope(Document document)", "testcase": false, "constructor": false}], "file": "spring-ws-core/src/main/java/org/springframework/ws/soap/axiom/support/AxiomUtils.java"}, "focal_method": {"identifier": "toNamespace", "parameters": "(QName qName, OMElement resolveElement)", "modifiers": "public static", "return": "OMNamespace", "body": "public static OMNamespace toNamespace(QName qName, OMElement resolveElement) throws OMException {\n\t\tString prefix = qName.getPrefix();\n\t\tif (StringUtils.hasLength(qName.getNamespaceURI()) && StringUtils.hasLength(prefix)) {\n\t\t\treturn resolveElement.declareNamespace(qName.getNamespaceURI(), prefix);\n\t\t} else if (StringUtils.hasLength(qName.getNamespaceURI())) {\n\t\t\t// check for existing namespace, and declare if necessary\n\t\t\treturn resolveElement.declareNamespace(qName.getNamespaceURI(), \"\");\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"qName [\" + qName + \"] does not contain a namespace\");\n\t\t}\n\t}", "signature": "OMNamespace toNamespace(QName qName, OMElement resolveElement)", "full_signature": "public static OMNamespace toNamespace(QName qName, OMElement resolveElement)", "class_method_signature": "AxiomUtils.toNamespace(QName qName, OMElement resolveElement)", "testcase": false, "constructor": false, "invocations": ["getPrefix", "hasLength", "getNamespaceURI", "hasLength", "declareNamespace", "getNamespaceURI", "hasLength", "getNamespaceURI", "declareNamespace", "getNamespaceURI"]}, "repository": {"repo_id": 7914484, "url": "https://github.com/spring-projects/spring-ws", "language": "Java", "is_fork": false, "fork_count": 232, "stargazer_count": 209, "size": 20360, "license": "licensed"}}