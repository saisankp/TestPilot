{"test_class": {"identifier": "BalanceTest", "superclass": "extends TestBase", "interfaces": "", "fields": [], "file": "hbase0.98/hbase-manager-0.98/src/test/java/com/kakao/hbase/manager/command/BalanceTest.java"}, "test_case": {"identifier": "testBalanceAllTables", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testBalanceAllTables() throws Exception {\n        List<ServerName> serverNameList;\n        List<HRegionInfo> regionInfoList;\n\n        // create tables\n        String tableName2 = createAdditionalTable(TestBase.tableName + \"2\");\n        String tableName3 = createAdditionalTable(TestBase.tableName + \"3\");\n\n        // move all regions to rs1\n        serverNameList = getServerNameList();\n        ServerName rs1 = serverNameList.get(0);\n        regionInfoList = getRegionInfoList(tableName);\n        regionInfoList.addAll(getRegionInfoList(tableName2));\n        regionInfoList.addAll(getRegionInfoList(tableName3));\n        for (HRegionInfo hRegionInfo : regionInfoList) {\n            move(hRegionInfo, rs1);\n        }\n        Assert.assertEquals(3, getRegionInfoList(rs1, tableName).size() + getRegionInfoList(rs1, tableName2).size() + getRegionInfoList(rs1, tableName3).size());\n\n        String[] argsParam = {\"zookeeper\", \".*\", \"st\", \"--force-proceed\", \"--test\"};\n        Args args = new ManagerArgs(argsParam);\n        Assert.assertEquals(\"zookeeper\", args.getZookeeperQuorum());\n        Balance command = new Balance(admin, args);\n\n        command.run();\n\n        // check regions balanced\n        Assert.assertNotEquals(3, getRegionInfoList(rs1, tableName).size() + getRegionInfoList(rs1, tableName2).size() + getRegionInfoList(rs1, tableName3).size());\n    }", "signature": "void testBalanceAllTables()", "full_signature": "@Test public void testBalanceAllTables()", "class_method_signature": "BalanceTest.testBalanceAllTables()", "testcase": true, "constructor": false, "invocations": ["createAdditionalTable", "createAdditionalTable", "getServerNameList", "get", "getRegionInfoList", "addAll", "getRegionInfoList", "addAll", "getRegionInfoList", "move", "assertEquals", "size", "getRegionInfoList", "size", "getRegionInfoList", "size", "getRegionInfoList", "assertEquals", "getZookeeperQuorum", "run", "assertNotEquals", "size", "getRegionInfoList", "size", "getRegionInfoList", "size", "getRegionInfoList"]}, "focal_class": {"identifier": "Balance", "superclass": "", "interfaces": "implements Command", "fields": [{"original_string": "private static Map<HRegionInfo, ServerName> regionLocations = null;", "modifier": "private static", "type": "Map<HRegionInfo, ServerName>", "declarator": "regionLocations = null", "var_name": "regionLocations"}, {"original_string": "private static Set<String> cachedTableNames = new HashSet<>();", "modifier": "private static", "type": "Set<String>", "declarator": "cachedTableNames = new HashSet<>()", "var_name": "cachedTableNames"}, {"original_string": "private final HBaseAdmin admin;", "modifier": "private final", "type": "HBaseAdmin", "declarator": "admin", "var_name": "admin"}, {"original_string": "private final Args args;", "modifier": "private final", "type": "Args", "declarator": "args", "var_name": "args"}, {"original_string": "private final String ruleParam;", "modifier": "private final", "type": "String", "declarator": "ruleParam", "var_name": "ruleParam"}, {"original_string": "private final Set<String> tableNameSet;", "modifier": "private final", "type": "Set<String>", "declarator": "tableNameSet", "var_name": "tableNameSet"}], "methods": [{"identifier": "Balance", "parameters": "(HBaseAdmin admin, Args args)", "modifiers": "public", "return": "", "signature": " Balance(HBaseAdmin admin, Args args)", "full_signature": "public  Balance(HBaseAdmin admin, Args args)", "class_method_signature": "Balance.Balance(HBaseAdmin admin, Args args)", "testcase": false, "constructor": true}, {"identifier": "reset", "parameters": "()", "modifiers": "static", "return": "void", "signature": "void reset()", "full_signature": "static void reset()", "class_method_signature": "Balance.reset()", "testcase": false, "constructor": false}, {"identifier": "usage", "parameters": "()", "modifiers": "public static", "return": "String", "signature": "String usage()", "full_signature": "public static String usage()", "class_method_signature": "Balance.usage()", "testcase": false, "constructor": false}, {"identifier": "createRegionAssignmentMap", "parameters": "(HBaseAdmin admin, Set<String> tableNameSet)", "modifiers": "private static", "return": "Map<HRegionInfo, ServerName>", "signature": "Map<HRegionInfo, ServerName> createRegionAssignmentMap(HBaseAdmin admin, Set<String> tableNameSet)", "full_signature": "private static Map<HRegionInfo, ServerName> createRegionAssignmentMap(HBaseAdmin admin, Set<String> tableNameSet)", "class_method_signature": "Balance.createRegionAssignmentMap(HBaseAdmin admin, Set<String> tableNameSet)", "testcase": false, "constructor": false}, {"identifier": "getRegionLocations", "parameters": "(HBaseAdmin admin, String tableName)", "modifiers": "private static", "return": "void", "signature": "void getRegionLocations(HBaseAdmin admin, String tableName)", "full_signature": "private static void getRegionLocations(HBaseAdmin admin, String tableName)", "class_method_signature": "Balance.getRegionLocations(HBaseAdmin admin, String tableName)", "testcase": false, "constructor": false}, {"identifier": "getRegionAssignmentMap", "parameters": "(HBaseAdmin admin, Set<String> tableNameSet)", "modifiers": "@SuppressWarnings(\"deprecation\") public static", "return": "Map<HRegionInfo, ServerName>", "signature": "Map<HRegionInfo, ServerName> getRegionAssignmentMap(HBaseAdmin admin, Set<String> tableNameSet)", "full_signature": "@SuppressWarnings(\"deprecation\") public static Map<HRegionInfo, ServerName> getRegionAssignmentMap(HBaseAdmin admin, Set<String> tableNameSet)", "class_method_signature": "Balance.getRegionAssignmentMap(HBaseAdmin admin, Set<String> tableNameSet)", "testcase": false, "constructor": false}, {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "Balance.run()", "testcase": false, "constructor": false}, {"identifier": "preview", "parameters": "(List<RegionPlan> regionPlanList, boolean asynchronous)", "modifiers": "@SuppressWarnings(\"SimplifiableIfStatement\") private", "return": "boolean", "signature": "boolean preview(List<RegionPlan> regionPlanList, boolean asynchronous)", "full_signature": "@SuppressWarnings(\"SimplifiableIfStatement\") private boolean preview(List<RegionPlan> regionPlanList, boolean asynchronous)", "class_method_signature": "Balance.preview(List<RegionPlan> regionPlanList, boolean asynchronous)", "testcase": false, "constructor": false}, {"identifier": "warnBalanceAgain", "parameters": "(List<RegionPlan> regionPlanList)", "modifiers": "private", "return": "boolean", "signature": "boolean warnBalanceAgain(List<RegionPlan> regionPlanList)", "full_signature": "private boolean warnBalanceAgain(List<RegionPlan> regionPlanList)", "class_method_signature": "Balance.warnBalanceAgain(List<RegionPlan> regionPlanList)", "testcase": false, "constructor": false}, {"identifier": "turnBalancerOff", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean turnBalancerOff()", "full_signature": "private boolean turnBalancerOff()", "class_method_signature": "Balance.turnBalancerOff()", "testcase": false, "constructor": false}, {"identifier": "balance", "parameters": "(Args args, List<RegionPlan> regionPlanList, Phase phase, boolean asynchronous)", "modifiers": "@SuppressWarnings(\"deprecation\") private", "return": "void", "signature": "void balance(Args args, List<RegionPlan> regionPlanList, Phase phase, boolean asynchronous)", "full_signature": "@SuppressWarnings(\"deprecation\") private void balance(Args args, List<RegionPlan> regionPlanList, Phase phase, boolean asynchronous)", "class_method_signature": "Balance.balance(Args args, List<RegionPlan> regionPlanList, Phase phase, boolean asynchronous)", "testcase": false, "constructor": false}], "file": "hbase0.98/hbase-manager-0.98/src/main/java/com/kakao/hbase/manager/command/Balance.java"}, "focal_method": {"identifier": "run", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void run() throws Exception {\n        boolean balancerRunning = false;\n\n        try {\n            balancerRunning = turnBalancerOff();\n\n            BalanceRule rule = BalanceRule.valueOf(ruleParam.toUpperCase());\n            if (rule.equals(BalanceRule.DEFAULT)) {\n                if (!args.isForceProceed()) {\n                    if (!Util.askProceed()) {\n                        return;\n                    }\n                }\n                admin.balancer();\n                System.out.println(\"Run hbase default balancer. This is an asynchronous operation.\");\n            } else {\n                List<RegionPlan> regionPlanList = rule.makePlan(admin, tableNameSet, args);\n                BalanceFactor.printFactor(BalanceFactor.parseArg(args));\n\n                boolean asynchronous = args.has(Args.OPTION_MOVE_ASYNC);\n                if (preview(regionPlanList, asynchronous))\n                    balance(args, regionPlanList, Phase.BALANCE, asynchronous);\n            }\n        } finally {\n            if (balancerRunning) {\n                // turn balancer on if needed\n                admin.setBalancerRunning(true, true);\n                System.out.println(\"Turn balancer on.\");\n            }\n        }\n    }", "signature": "void run()", "full_signature": "@Override public void run()", "class_method_signature": "Balance.run()", "testcase": false, "constructor": false, "invocations": ["turnBalancerOff", "valueOf", "toUpperCase", "equals", "isForceProceed", "askProceed", "balancer", "println", "makePlan", "printFactor", "parseArg", "has", "preview", "balance", "setBalancerRunning", "println"]}, "repository": {"repo_id": 46396068, "url": "https://github.com/kakao/hbase-tools", "language": "Java", "is_fork": false, "fork_count": 21, "stargazer_count": 49, "size": 1758, "license": "licensed"}}