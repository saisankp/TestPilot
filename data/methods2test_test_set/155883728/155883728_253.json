{"test_class": {"identifier": "ChecklistPlannerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String MODULE_ALPHA = \"alpha\";", "modifier": "private static final", "type": "String", "declarator": "MODULE_ALPHA = \"alpha\"", "var_name": "MODULE_ALPHA"}, {"original_string": "private static final String MODULE_BRAVO = \"bravo\";", "modifier": "private static final", "type": "String", "declarator": "MODULE_BRAVO = \"bravo\"", "var_name": "MODULE_BRAVO"}, {"original_string": "private static final String MODULE_CHARLIE = \"charlie\";", "modifier": "private static final", "type": "String", "declarator": "MODULE_CHARLIE = \"charlie\"", "var_name": "MODULE_CHARLIE"}, {"original_string": "private static final String CKL_NAME_ALPHA = \"alpha\";", "modifier": "private static final", "type": "String", "declarator": "CKL_NAME_ALPHA = \"alpha\"", "var_name": "CKL_NAME_ALPHA"}, {"original_string": "private static final String CKL_ID_ALPHA = MODULE_ALPHA + \"/\" + CKL_NAME_ALPHA;", "modifier": "private static final", "type": "String", "declarator": "CKL_ID_ALPHA = MODULE_ALPHA + \"/\" + CKL_NAME_ALPHA", "var_name": "CKL_ID_ALPHA"}, {"original_string": "private static final String CKL_NAME_BRAVO_1 = \"bravo-1\";", "modifier": "private static final", "type": "String", "declarator": "CKL_NAME_BRAVO_1 = \"bravo-1\"", "var_name": "CKL_NAME_BRAVO_1"}, {"original_string": "private static final String CKL_ID_BRAVO_1 = MODULE_BRAVO + \"/\" + CKL_NAME_BRAVO_1;", "modifier": "private static final", "type": "String", "declarator": "CKL_ID_BRAVO_1 = MODULE_BRAVO + \"/\" + CKL_NAME_BRAVO_1", "var_name": "CKL_ID_BRAVO_1"}, {"original_string": "private static final String CKL_NAME_BRAVO_2 = \"bravo-2\";", "modifier": "private static final", "type": "String", "declarator": "CKL_NAME_BRAVO_2 = \"bravo-2\"", "var_name": "CKL_NAME_BRAVO_2"}, {"original_string": "private static final String CKL_ID_BRAVO_2 = MODULE_BRAVO + \"/\" + CKL_NAME_BRAVO_2;", "modifier": "private static final", "type": "String", "declarator": "CKL_ID_BRAVO_2 = MODULE_BRAVO + \"/\" + CKL_NAME_BRAVO_2", "var_name": "CKL_ID_BRAVO_2"}, {"original_string": "private static final String CKL_NAME_CHARLIE = \"charlie\";", "modifier": "private static final", "type": "String", "declarator": "CKL_NAME_CHARLIE = \"charlie\"", "var_name": "CKL_NAME_CHARLIE"}, {"original_string": "private static final String CKL_ID_CHARLIE = MODULE_CHARLIE + \"/\" + CKL_NAME_CHARLIE;", "modifier": "private static final", "type": "String", "declarator": "CKL_ID_CHARLIE = MODULE_CHARLIE + \"/\" + CKL_NAME_CHARLIE", "var_name": "CKL_ID_CHARLIE"}, {"original_string": "private static final List<String> ALL_CKL_IDS = Arrays.asList(\n            CKL_ID_ALPHA, CKL_ID_BRAVO_1, CKL_ID_BRAVO_2, CKL_ID_CHARLIE);", "modifier": "private static final", "type": "List<String>", "declarator": "ALL_CKL_IDS = Arrays.asList(\n            CKL_ID_ALPHA, CKL_ID_BRAVO_1, CKL_ID_BRAVO_2, CKL_ID_CHARLIE)", "var_name": "ALL_CKL_IDS"}, {"original_string": "private final File resourceDir = new File(\"src/test/resources/ChecklistPlannerTest\");", "modifier": "private final", "type": "File", "declarator": "resourceDir = new File(\"src/test/resources/ChecklistPlannerTest\")", "var_name": "resourceDir"}, {"original_string": "private final File alphaDir = new File(resourceDir, MODULE_ALPHA);", "modifier": "private final", "type": "File", "declarator": "alphaDir = new File(resourceDir, MODULE_ALPHA)", "var_name": "alphaDir"}, {"original_string": "private final File bravoDir = new File(resourceDir, MODULE_BRAVO);", "modifier": "private final", "type": "File", "declarator": "bravoDir = new File(resourceDir, MODULE_BRAVO)", "var_name": "bravoDir"}, {"original_string": "private final File charlieDir = new File(resourceDir, MODULE_CHARLIE);", "modifier": "private final", "type": "File", "declarator": "charlieDir = new File(resourceDir, MODULE_CHARLIE)", "var_name": "charlieDir"}, {"original_string": "private final File zuluDir = new File(resourceDir, \"zulu\");", "modifier": "private final", "type": "File", "declarator": "zuluDir = new File(resourceDir, \"zulu\")", "var_name": "zuluDir"}, {"original_string": "private URL alphaManifest;", "modifier": "private", "type": "URL", "declarator": "alphaManifest", "var_name": "alphaManifest"}, {"original_string": "private URL bravoManifest;", "modifier": "private", "type": "URL", "declarator": "bravoManifest", "var_name": "bravoManifest"}, {"original_string": "private URL charlieManifest;", "modifier": "private", "type": "URL", "declarator": "charlieManifest", "var_name": "charlieManifest"}, {"original_string": "private URL zuluManifest;", "modifier": "private", "type": "URL", "declarator": "zuluManifest", "var_name": "zuluManifest"}, {"original_string": "final Predicate<Checklist> alphaFilter = checklist ->\n            MODULE_ALPHA.equals(checklist.getModuleName()) && CKL_NAME_ALPHA.equals(checklist.getName());", "modifier": "final", "type": "Predicate<Checklist>", "declarator": "alphaFilter = checklist ->\n            MODULE_ALPHA.equals(checklist.getModuleName()) && CKL_NAME_ALPHA.equals(checklist.getName())", "var_name": "alphaFilter"}, {"original_string": "final Predicate<Checklist> bravo1Filter = checklist ->\n            MODULE_BRAVO.equals(checklist.getModuleName()) && CKL_NAME_BRAVO_1.equals(checklist.getName());", "modifier": "final", "type": "Predicate<Checklist>", "declarator": "bravo1Filter = checklist ->\n            MODULE_BRAVO.equals(checklist.getModuleName()) && CKL_NAME_BRAVO_1.equals(checklist.getName())", "var_name": "bravo1Filter"}, {"original_string": "final Predicate<Checklist> bravo2Filter = checklist ->\n            MODULE_BRAVO.equals(checklist.getModuleName()) && CKL_NAME_BRAVO_2.equals(checklist.getName());", "modifier": "final", "type": "Predicate<Checklist>", "declarator": "bravo2Filter = checklist ->\n            MODULE_BRAVO.equals(checklist.getModuleName()) && CKL_NAME_BRAVO_2.equals(checklist.getName())", "var_name": "bravo2Filter"}, {"original_string": "final Predicate<Checklist> charlieFilter = checklist ->\n            MODULE_CHARLIE.equals(checklist.getModuleName()) && CKL_NAME_CHARLIE.equals(checklist.getName());", "modifier": "final", "type": "Predicate<Checklist>", "declarator": "charlieFilter = checklist ->\n            MODULE_CHARLIE.equals(checklist.getModuleName()) && CKL_NAME_CHARLIE.equals(checklist.getName())", "var_name": "charlieFilter"}], "file": "core/src/test/java/net/adamcin/oakpal/core/ChecklistPlannerTest.java"}, "test_case": {"identifier": "testApplyOverrides", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testApplyOverrides() {\n        final CheckSpec base = new CheckSpec();\n        base.setName(CKL_ID_ALPHA + \"/\" + \"foo\");\n        base.setImpl(\"base_impl\");\n        base.setConfig(key(\"zero\", \"orez\").key(\"shared\", \"zero\").get());\n\n        final CheckSpec implicitSkipOverride = new CheckSpec();\n        implicitSkipOverride.setName(\"foo\");\n        implicitSkipOverride.setSkip(true);\n\n        final CheckSpec implicitConfigOverride1 = new CheckSpec();\n        implicitConfigOverride1.setName(\"foo\");\n        implicitConfigOverride1.setConfig(key(\"one\", \"eno\").key(\"shared\", \"one\").get());\n\n        final CheckSpec implicitConfigOverride2 = new CheckSpec();\n        implicitConfigOverride2.setName(\"foo\");\n        implicitConfigOverride2.setConfig(key(\"two\", \"owt\").key(\"shared\", \"two\").get());\n\n        final CheckSpec result = ChecklistPlanner.applyOverrides(Arrays.asList(\n                implicitSkipOverride,\n                implicitConfigOverride1,\n                implicitConfigOverride2\n        ), base);\n\n        assertTrue(\"skipped\", result.isSkip());\n        assertEquals(\"shared should be\", \"two\", result.getConfig().getString(\"shared\"));\n        assertEquals(\"zero should be\", \"orez\", result.getConfig().getString(\"zero\"));\n        assertEquals(\"one should be\", \"eno\", result.getConfig().getString(\"one\"));\n        assertEquals(\"two should be\", \"owt\", result.getConfig().getString(\"two\"));\n    }", "signature": "void testApplyOverrides()", "full_signature": "@Test public void testApplyOverrides()", "class_method_signature": "ChecklistPlannerTest.testApplyOverrides()", "testcase": true, "constructor": false, "invocations": ["setName", "setImpl", "setConfig", "get", "key", "key", "setName", "setSkip", "setName", "setConfig", "get", "key", "key", "setName", "setConfig", "get", "key", "key", "applyOverrides", "asList", "assertTrue", "isSkip", "assertEquals", "getString", "getConfig", "assertEquals", "getString", "getConfig", "assertEquals", "getString", "getConfig", "assertEquals", "getString", "getConfig"]}, "focal_class": {"identifier": "ChecklistPlanner", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(ChecklistPlanner.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(ChecklistPlanner.class)", "var_name": "LOGGER"}, {"original_string": "public static final String OAKPAL_CHECKLIST = \"Oakpal-Checklist\";", "modifier": "public static final", "type": "String", "declarator": "OAKPAL_CHECKLIST = \"Oakpal-Checklist\"", "var_name": "OAKPAL_CHECKLIST"}, {"original_string": "public static final String OAKPAL_MODULENAME = \"Oakpal-ModuleName\";", "modifier": "public static final", "type": "String", "declarator": "OAKPAL_MODULENAME = \"Oakpal-ModuleName\"", "var_name": "OAKPAL_MODULENAME"}, {"original_string": "public static final String BUNDLE_SYMBOLICNAME = \"Bundle-SymbolicName\";", "modifier": "public static final", "type": "String", "declarator": "BUNDLE_SYMBOLICNAME = \"Bundle-SymbolicName\"", "var_name": "BUNDLE_SYMBOLICNAME"}, {"original_string": "public static final String AUTOMATIC_MODULE_NAME = \"Automatic-Module-Name\";", "modifier": "public static final", "type": "String", "declarator": "AUTOMATIC_MODULE_NAME = \"Automatic-Module-Name\"", "var_name": "AUTOMATIC_MODULE_NAME"}, {"original_string": "private final Set<String> activeChecklistIds = new LinkedHashSet<>();", "modifier": "private final", "type": "Set<String>", "declarator": "activeChecklistIds = new LinkedHashSet<>()", "var_name": "activeChecklistIds"}, {"original_string": "private final List<Checklist> checklists = new ArrayList<>();", "modifier": "private final", "type": "List<Checklist>", "declarator": "checklists = new ArrayList<>()", "var_name": "checklists"}, {"original_string": "private final List<Checklist> inactiveChecklists = new ArrayList<>();", "modifier": "private final", "type": "List<Checklist>", "declarator": "inactiveChecklists = new ArrayList<>()", "var_name": "inactiveChecklists"}], "methods": [{"identifier": "ChecklistPlanner", "parameters": "(final List<String> activeChecklistIds)", "modifiers": "public", "return": "", "signature": " ChecklistPlanner(final List<String> activeChecklistIds)", "full_signature": "public  ChecklistPlanner(final List<String> activeChecklistIds)", "class_method_signature": "ChecklistPlanner.ChecklistPlanner(final List<String> activeChecklistIds)", "testcase": false, "constructor": true}, {"identifier": "provideChecklists", "parameters": "(final List<Checklist> constructed)", "modifiers": "public", "return": "void", "signature": "void provideChecklists(final List<Checklist> constructed)", "full_signature": "public void provideChecklists(final List<Checklist> constructed)", "class_method_signature": "ChecklistPlanner.provideChecklists(final List<Checklist> constructed)", "testcase": false, "constructor": false}, {"identifier": "discoverChecklists", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void discoverChecklists()", "full_signature": "public void discoverChecklists()", "class_method_signature": "ChecklistPlanner.discoverChecklists()", "testcase": false, "constructor": false}, {"identifier": "discoverChecklists", "parameters": "(final ClassLoader classLoader)", "modifiers": "public", "return": "void", "signature": "void discoverChecklists(final ClassLoader classLoader)", "full_signature": "public void discoverChecklists(final ClassLoader classLoader)", "class_method_signature": "ChecklistPlanner.discoverChecklists(final ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "discoverChecklists", "parameters": "(final List<File> files)", "modifiers": "public", "return": "void", "signature": "void discoverChecklists(final List<File> files)", "full_signature": "public void discoverChecklists(final List<File> files)", "class_method_signature": "ChecklistPlanner.discoverChecklists(final List<File> files)", "testcase": false, "constructor": false}, {"identifier": "selectChecklists", "parameters": "(final List<Checklist> constructed)", "modifiers": "private", "return": "void", "signature": "void selectChecklists(final List<Checklist> constructed)", "full_signature": "private void selectChecklists(final List<Checklist> constructed)", "class_method_signature": "ChecklistPlanner.selectChecklists(final List<Checklist> constructed)", "testcase": false, "constructor": false}, {"identifier": "isChecklistSelected", "parameters": "(final String activeId, final Checklist checklist)", "modifiers": "private", "return": "boolean", "signature": "boolean isChecklistSelected(final String activeId, final Checklist checklist)", "full_signature": "private boolean isChecklistSelected(final String activeId, final Checklist checklist)", "class_method_signature": "ChecklistPlanner.isChecklistSelected(final String activeId, final Checklist checklist)", "testcase": false, "constructor": false}, {"identifier": "getInitStages", "parameters": "()", "modifiers": "public", "return": "List<InitStage>", "signature": "List<InitStage> getInitStages()", "full_signature": "public List<InitStage> getInitStages()", "class_method_signature": "ChecklistPlanner.getInitStages()", "testcase": false, "constructor": false}, {"identifier": "getSelectedChecklists", "parameters": "()", "modifiers": "", "return": "Stream<Checklist>", "signature": "Stream<Checklist> getSelectedChecklists()", "full_signature": " Stream<Checklist> getSelectedChecklists()", "class_method_signature": "ChecklistPlanner.getSelectedChecklists()", "testcase": false, "constructor": false}, {"identifier": "getAllChecklists", "parameters": "()", "modifiers": "", "return": "Stream<Checklist>", "signature": "Stream<Checklist> getAllChecklists()", "full_signature": " Stream<Checklist> getAllChecklists()", "class_method_signature": "ChecklistPlanner.getAllChecklists()", "testcase": false, "constructor": false}, {"identifier": "getEffectiveCheckSpecs", "parameters": "(final List<CheckSpec> checkOverrides)", "modifiers": "public", "return": "List<CheckSpec>", "signature": "List<CheckSpec> getEffectiveCheckSpecs(final List<CheckSpec> checkOverrides)", "full_signature": "public List<CheckSpec> getEffectiveCheckSpecs(final List<CheckSpec> checkOverrides)", "class_method_signature": "ChecklistPlanner.getEffectiveCheckSpecs(final List<CheckSpec> checkOverrides)", "testcase": false, "constructor": false}, {"identifier": "applyOverrides", "parameters": "(final List<CheckSpec> checkOverrides, final CheckSpec base)", "modifiers": "static", "return": "CheckSpec", "signature": "CheckSpec applyOverrides(final List<CheckSpec> checkOverrides, final CheckSpec base)", "full_signature": "static CheckSpec applyOverrides(final List<CheckSpec> checkOverrides, final CheckSpec base)", "class_method_signature": "ChecklistPlanner.applyOverrides(final List<CheckSpec> checkOverrides, final CheckSpec base)", "testcase": false, "constructor": false}, {"identifier": "constructChecklists", "parameters": "(final Map<URL, List<JsonObject>> parsed)", "modifiers": "public static", "return": "List<Checklist>", "signature": "List<Checklist> constructChecklists(final Map<URL, List<JsonObject>> parsed)", "full_signature": "public static List<Checklist> constructChecklists(final Map<URL, List<JsonObject>> parsed)", "class_method_signature": "ChecklistPlanner.constructChecklists(final Map<URL, List<JsonObject>> parsed)", "testcase": false, "constructor": false}, {"identifier": "parseChecklists", "parameters": "(final URL manifestUrl)", "modifiers": "public static", "return": "Map<URL, List<JsonObject>>", "signature": "Map<URL, List<JsonObject>> parseChecklists(final URL manifestUrl)", "full_signature": "public static Map<URL, List<JsonObject>> parseChecklists(final URL manifestUrl)", "class_method_signature": "ChecklistPlanner.parseChecklists(final URL manifestUrl)", "testcase": false, "constructor": false}, {"identifier": "parseChecklists", "parameters": "(final ClassLoader classLoader)", "modifiers": "public static", "return": "Map<URL, List<JsonObject>>", "signature": "Map<URL, List<JsonObject>> parseChecklists(final ClassLoader classLoader)", "full_signature": "public static Map<URL, List<JsonObject>> parseChecklists(final ClassLoader classLoader)", "class_method_signature": "ChecklistPlanner.parseChecklists(final ClassLoader classLoader)", "testcase": false, "constructor": false}, {"identifier": "parseChecklists", "parameters": "(final List<File> files)", "modifiers": "public static", "return": "Map<URL, List<JsonObject>>", "signature": "Map<URL, List<JsonObject>> parseChecklists(final List<File> files)", "full_signature": "public static Map<URL, List<JsonObject>> parseChecklists(final List<File> files)", "class_method_signature": "ChecklistPlanner.parseChecklists(final List<File> files)", "testcase": false, "constructor": false}, {"identifier": "parseChecklists", "parameters": "(final Map<URL, List<URL>> manifestLookup)", "modifiers": "static", "return": "Map<URL, List<JsonObject>>", "signature": "Map<URL, List<JsonObject>> parseChecklists(final Map<URL, List<URL>> manifestLookup)", "full_signature": "static Map<URL, List<JsonObject>> parseChecklists(final Map<URL, List<URL>> manifestLookup)", "class_method_signature": "ChecklistPlanner.parseChecklists(final Map<URL, List<URL>> manifestLookup)", "testcase": false, "constructor": false}, {"identifier": "bestModuleName", "parameters": "(final URL manifestUrl)", "modifiers": "static", "return": "String", "signature": "String bestModuleName(final URL manifestUrl)", "full_signature": "static String bestModuleName(final URL manifestUrl)", "class_method_signature": "ChecklistPlanner.bestModuleName(final URL manifestUrl)", "testcase": false, "constructor": false}], "file": "core/src/main/java/net/adamcin/oakpal/core/ChecklistPlanner.java"}, "focal_method": {"identifier": "applyOverrides", "parameters": "(final List<CheckSpec> checkOverrides, final CheckSpec base)", "modifiers": "static", "return": "CheckSpec", "body": "static CheckSpec applyOverrides(final List<CheckSpec> checkOverrides, final CheckSpec base) {\n        CheckSpec merged = base;\n        LOGGER.trace(\"[applyOverrides] base: {}\", base);\n        List<CheckSpec> applicable = checkOverrides.stream().filter(base::isOverriddenBy)\n                .collect(Collectors.toList());\n        for (CheckSpec spec : applicable) {\n            merged = spec.overlay(merged);\n            LOGGER.trace(\"[applyOverrides] spec: {}, merged: {}\", spec, merged);\n        }\n        return merged;\n    }", "signature": "CheckSpec applyOverrides(final List<CheckSpec> checkOverrides, final CheckSpec base)", "full_signature": "static CheckSpec applyOverrides(final List<CheckSpec> checkOverrides, final CheckSpec base)", "class_method_signature": "ChecklistPlanner.applyOverrides(final List<CheckSpec> checkOverrides, final CheckSpec base)", "testcase": false, "constructor": false, "invocations": ["trace", "collect", "filter", "stream", "toList", "overlay", "trace"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}