{"test_class": {"identifier": "PreparationExportStrategyTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ObjectMapper mapper = new ObjectMapper();", "modifier": "private final", "type": "ObjectMapper", "declarator": "mapper = new ObjectMapper()", "var_name": "mapper"}, {"original_string": "@InjectMocks\n    private PreparationExportStrategy strategy;", "modifier": "@InjectMocks\n    private", "type": "PreparationExportStrategy", "declarator": "strategy", "var_name": "strategy"}, {"original_string": "@Mock\n    private TransformerFactory factory;", "modifier": "@Mock\n    private", "type": "TransformerFactory", "declarator": "factory", "var_name": "factory"}, {"original_string": "@Mock\n    private FormatRegistrationService formatRegistrationService;", "modifier": "@Mock\n    private", "type": "FormatRegistrationService", "declarator": "formatRegistrationService", "var_name": "formatRegistrationService"}, {"original_string": "@Mock\n    private ApplicationContext applicationContext;", "modifier": "@Mock\n    private", "type": "ApplicationContext", "declarator": "applicationContext", "var_name": "applicationContext"}, {"original_string": "@Mock\n    private SecurityProxy securityProxy;", "modifier": "@Mock\n    private", "type": "SecurityProxy", "declarator": "securityProxy", "var_name": "securityProxy"}, {"original_string": "@Mock\n    private CacheKeyGenerator cacheKeyGenerator;", "modifier": "@Mock\n    private", "type": "CacheKeyGenerator", "declarator": "cacheKeyGenerator", "var_name": "cacheKeyGenerator"}, {"original_string": "@Mock\n    private ContentCache contentCache;", "modifier": "@Mock\n    private", "type": "ContentCache", "declarator": "contentCache", "var_name": "contentCache"}, {"original_string": "@Mock\n    private Transformer transformer;", "modifier": "@Mock\n    private", "type": "Transformer", "declarator": "transformer", "var_name": "transformer"}, {"original_string": "@Mock\n    private PreparationSummaryGet preparationSummaryGet;", "modifier": "@Mock\n    private", "type": "PreparationSummaryGet", "declarator": "preparationSummaryGet", "var_name": "preparationSummaryGet"}, {"original_string": "@Mock\n    private DatasetClient datasetClient;", "modifier": "@Mock\n    private", "type": "DatasetClient", "declarator": "datasetClient", "var_name": "datasetClient"}], "file": "dataprep-transformation/src/test/java/org/talend/dataprep/transformation/service/export/PreparationExportStrategyTest.java"}, "test_case": {"identifier": "shouldAcceptParameters", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldAcceptParameters() {\n        // Then\n        final ExportParameters parameters = new ExportParameters();\n        parameters.setContent(null);\n        parameters.setFrom(null);\n        parameters.setFrom(ExportParameters.SourceType.HEAD);\n        parameters.setPreparationId(\"prep-1234\");\n        parameters.setDatasetId(\"\");\n        assertTrue(strategy.test(parameters));\n    }", "signature": "void shouldAcceptParameters()", "full_signature": "@Test public void shouldAcceptParameters()", "class_method_signature": "PreparationExportStrategyTest.shouldAcceptParameters()", "testcase": true, "constructor": false, "invocations": ["setContent", "setFrom", "setFrom", "setPreparationId", "setDatasetId", "assertTrue", "test"]}, "focal_class": {"identifier": "PreparationExportStrategy", "superclass": "extends BaseSampleExportStrategy", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(PreparationExportStrategy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(PreparationExportStrategy.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private CacheKeyGenerator cacheKeyGenerator;", "modifier": "@Autowired\n    private", "type": "CacheKeyGenerator", "declarator": "cacheKeyGenerator", "var_name": "cacheKeyGenerator"}, {"original_string": "@Autowired\n    private SecurityProxy securityProxy;", "modifier": "@Autowired\n    private", "type": "SecurityProxy", "declarator": "securityProxy", "var_name": "securityProxy"}, {"original_string": "@Autowired\n    private DatasetClient datasetClient;", "modifier": "@Autowired\n    private", "type": "DatasetClient", "declarator": "datasetClient", "var_name": "datasetClient"}], "methods": [{"identifier": "test", "parameters": "(final ExportParameters parameters)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean test(final ExportParameters parameters)", "full_signature": "@Override public boolean test(final ExportParameters parameters)", "class_method_signature": "PreparationExportStrategy.test(final ExportParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final ExportParameters parameters)", "modifiers": "@Override public", "return": "StreamingResponseBody", "signature": "StreamingResponseBody execute(final ExportParameters parameters)", "full_signature": "@Override public StreamingResponseBody execute(final ExportParameters parameters)", "class_method_signature": "PreparationExportStrategy.execute(final ExportParameters parameters)", "testcase": false, "constructor": false}, {"identifier": "performPreparation", "parameters": "(final ExportParameters parameters, final OutputStream outputStream)", "modifiers": "public", "return": "void", "signature": "void performPreparation(final ExportParameters parameters, final OutputStream outputStream)", "full_signature": "public void performPreparation(final ExportParameters parameters, final OutputStream outputStream)", "class_method_signature": "PreparationExportStrategy.performPreparation(final ExportParameters parameters, final OutputStream outputStream)", "testcase": false, "constructor": false}], "file": "dataprep-transformation/src/main/java/org/talend/dataprep/transformation/service/export/PreparationExportStrategy.java"}, "focal_method": {"identifier": "test", "parameters": "(final ExportParameters parameters)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean test(final ExportParameters parameters) {\n        if (parameters == null) {\n            return false;\n        }\n        return parameters.getContent() == null //\n                && (parameters.getFrom() == null || parameters.getFrom() == HEAD) //\n                && !StringUtils.isEmpty(parameters.getPreparationId()) //\n                && StringUtils.isEmpty(parameters.getDatasetId());\n    }", "signature": "boolean test(final ExportParameters parameters)", "full_signature": "@Override public boolean test(final ExportParameters parameters)", "class_method_signature": "PreparationExportStrategy.test(final ExportParameters parameters)", "testcase": false, "constructor": false, "invocations": ["getContent", "getFrom", "getFrom", "isEmpty", "getPreparationId", "isEmpty", "getDatasetId"]}, "repository": {"repo_id": 26644682, "url": "https://github.com/Talend/data-prep", "language": "Java", "is_fork": false, "fork_count": 29, "stargazer_count": 53, "size": 70450, "license": "licensed"}}