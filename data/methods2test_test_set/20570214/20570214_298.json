{"test_class": {"identifier": "RsaSsaPssSignJceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Charset UTF_8 = Charset.forName(\"UTF-8\");", "modifier": "private static final", "type": "Charset", "declarator": "UTF_8 = Charset.forName(\"UTF-8\")", "var_name": "UTF_8"}], "file": "java_src/src/test/java/com/google/crypto/tink/subtle/RsaSsaPssSignJceTest.java"}, "test_case": {"identifier": "testZeroSaltLength", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testZeroSaltLength() throws Exception {\n    if (TestUtil.isTsan()) {\n      // This test times out when running under thread sanitizer, so we just skip.\n      return;\n    }\n    int keySize = 2048;\n    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\n    keyGen.initialize(keySize);\n    KeyPair keyPair = keyGen.generateKeyPair();\n    RSAPublicKey pub = (RSAPublicKey) keyPair.getPublic();\n    RSAPrivateCrtKey priv = (RSAPrivateCrtKey) keyPair.getPrivate();\n\n    // Sign with RsaSsaPssSignJce.\n    byte[] message = \"Hello\".getBytes(UTF_8);\n    RsaSsaPssSignJce signer = new RsaSsaPssSignJce(priv, HashType.SHA256, HashType.SHA256, 0);\n\n    byte[] signature = signer.sign(message);\n    // Verify with JCE's Signature.\n    RsaSsaPssVerifyJce verifier = new RsaSsaPssVerifyJce(pub, HashType.SHA256, HashType.SHA256, 0);\n    try {\n      verifier.verify(signature, message);\n    } catch (GeneralSecurityException e) {\n      throw new AssertionError(\"Valid signature, shouldn't throw exception\", e);\n    }\n  }", "signature": "void testZeroSaltLength()", "full_signature": "@Test public void testZeroSaltLength()", "class_method_signature": "RsaSsaPssSignJceTest.testZeroSaltLength()", "testcase": true, "constructor": false, "invocations": ["isTsan", "getInstance", "initialize", "generateKeyPair", "getPublic", "getPrivate", "getBytes", "sign", "verify"]}, "focal_class": {"identifier": "RsaSsaPssSignJce", "superclass": "", "interfaces": "implements PublicKeySign", "fields": [{"original_string": "private final RSAPrivateCrtKey privateKey;", "modifier": "private final", "type": "RSAPrivateCrtKey", "declarator": "privateKey", "var_name": "privateKey"}, {"original_string": "private final RSAPublicKey publicKey;", "modifier": "private final", "type": "RSAPublicKey", "declarator": "publicKey", "var_name": "publicKey"}, {"original_string": "private final HashType sigHash;", "modifier": "private final", "type": "HashType", "declarator": "sigHash", "var_name": "sigHash"}, {"original_string": "private final HashType mgf1Hash;", "modifier": "private final", "type": "HashType", "declarator": "mgf1Hash", "var_name": "mgf1Hash"}, {"original_string": "private final int saltLength;", "modifier": "private final", "type": "int", "declarator": "saltLength", "var_name": "saltLength"}, {"original_string": "private static final String RAW_RSA_ALGORITHM = \"RSA/ECB/NOPADDING\";", "modifier": "private static final", "type": "String", "declarator": "RAW_RSA_ALGORITHM = \"RSA/ECB/NOPADDING\"", "var_name": "RAW_RSA_ALGORITHM"}], "methods": [{"identifier": "RsaSsaPssSignJce", "parameters": "(\n      final RSAPrivateCrtKey priv, HashType sigHash, HashType mgf1Hash, int saltLength)", "modifiers": "public", "return": "", "signature": " RsaSsaPssSignJce(\n      final RSAPrivateCrtKey priv, HashType sigHash, HashType mgf1Hash, int saltLength)", "full_signature": "public  RsaSsaPssSignJce(\n      final RSAPrivateCrtKey priv, HashType sigHash, HashType mgf1Hash, int saltLength)", "class_method_signature": "RsaSsaPssSignJce.RsaSsaPssSignJce(\n      final RSAPrivateCrtKey priv, HashType sigHash, HashType mgf1Hash, int saltLength)", "testcase": false, "constructor": true}, {"identifier": "sign", "parameters": "(final byte[] data)", "modifiers": "@Override public", "return": "byte[]", "signature": "byte[] sign(final byte[] data)", "full_signature": "@Override public byte[] sign(final byte[] data)", "class_method_signature": "RsaSsaPssSignJce.sign(final byte[] data)", "testcase": false, "constructor": false}, {"identifier": "rsasp1", "parameters": "(byte[] m)", "modifiers": "private", "return": "byte[]", "signature": "byte[] rsasp1(byte[] m)", "full_signature": "private byte[] rsasp1(byte[] m)", "class_method_signature": "RsaSsaPssSignJce.rsasp1(byte[] m)", "testcase": false, "constructor": false}, {"identifier": "emsaPssEncode", "parameters": "(byte[] m, int emBits)", "modifiers": "private", "return": "byte[]", "signature": "byte[] emsaPssEncode(byte[] m, int emBits)", "full_signature": "private byte[] emsaPssEncode(byte[] m, int emBits)", "class_method_signature": "RsaSsaPssSignJce.emsaPssEncode(byte[] m, int emBits)", "testcase": false, "constructor": false}], "file": "java_src/src/main/java/com/google/crypto/tink/subtle/RsaSsaPssSignJce.java"}, "focal_method": {"identifier": "sign", "parameters": "(final byte[] data)", "modifiers": "@Override public", "return": "byte[]", "body": "@Override\n  public byte[] sign(final byte[] data) throws GeneralSecurityException {\n    // https://tools.ietf.org/html/rfc8017#section-8.1.1.\n    int modBits = publicKey.getModulus().bitLength();\n\n    byte[] em = emsaPssEncode(data, modBits - 1);\n    return rsasp1(em);\n  }", "signature": "byte[] sign(final byte[] data)", "full_signature": "@Override public byte[] sign(final byte[] data)", "class_method_signature": "RsaSsaPssSignJce.sign(final byte[] data)", "testcase": false, "constructor": false, "invocations": ["bitLength", "getModulus", "emsaPssEncode", "rsasp1"]}, "repository": {"repo_id": 20570214, "url": "https://github.com/google/tink", "stars": 8884, "created": "6/6/2014 4:21:09 PM +00:00", "updates": "2020-01-27T11:52:16+00:00", "fork": "False", "license": "licensed"}}