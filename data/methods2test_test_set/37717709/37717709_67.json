{"test_class": {"identifier": "TestAssignStrategy", "superclass": "extends TagStrategyTestBase", "interfaces": "", "fields": [], "file": "org.jvoicexml.profile.vxml21/src/test/java/org/jvoicexml/profile/vxml21/tagstrategy/TestAssignStrategy.java"}, "test_case": {"identifier": "testExecute", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecute() throws Exception, SemanticError {\n        final AssignStrategy strategy = new AssignStrategy();\n        AssignStrategy clonedStrategy1 = (AssignStrategy) strategy\n                .newInstance();\n        final String var = \"test\";\n        final Block block = createBlock();\n        final Assign assign = block.appendChild(Assign.class);\n        assign.setName(var);\n        assign.setExpr(\"'assigned'\");\n\n        final DataModel model = getDataModel();\n        Mockito.when(model.evaluateExpression(\"'assigned'\", Object.class))\n                .thenReturn(\"'assigned'\");\n        Mockito.when(model.toString(\"'assigned'\")).thenReturn(\"'assigned'\");\n        try {\n            executeTagStrategy(assign, clonedStrategy1);\n        } catch (JVoiceXMLEvent e) {\n            Assert.fail(e.getMessage());\n        }\n\n        Mockito.verify(model).evaluateExpression(\"'assigned'\", Object.class);\n        Mockito.verify(model).updateVariable(var, \"'assigned'\");\n    }", "signature": "void testExecute()", "full_signature": "@Test public void testExecute()", "class_method_signature": "TestAssignStrategy.testExecute()", "testcase": true, "constructor": false, "invocations": ["newInstance", "createBlock", "appendChild", "setName", "setExpr", "getDataModel", "thenReturn", "when", "evaluateExpression", "thenReturn", "when", "toString", "executeTagStrategy", "fail", "getMessage", "evaluateExpression", "verify", "updateVariable", "verify"]}, "focal_class": {"identifier": "AssignStrategy", "superclass": "extends AbstractTagStrategy", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LogManager.getLogger(AssignStrategy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager.getLogger(AssignStrategy.class)", "var_name": "LOGGER"}, {"original_string": "private static final Collection<String> EVAL_ATTRIBUTES;", "modifier": "private static final", "type": "Collection<String>", "declarator": "EVAL_ATTRIBUTES", "var_name": "EVAL_ATTRIBUTES"}, {"original_string": "private String name;", "modifier": "private", "type": "String", "declarator": "name", "var_name": "name"}, {"original_string": "private Object expr;", "modifier": "private", "type": "Object", "declarator": "expr", "var_name": "expr"}], "methods": [{"identifier": "AssignStrategy", "parameters": "()", "modifiers": "", "return": "", "signature": " AssignStrategy()", "full_signature": "  AssignStrategy()", "class_method_signature": "AssignStrategy.AssignStrategy()", "testcase": false, "constructor": true}, {"identifier": "getEvalAttributes", "parameters": "()", "modifiers": "public", "return": "Collection<String>", "signature": "Collection<String> getEvalAttributes()", "full_signature": "public Collection<String> getEvalAttributes()", "class_method_signature": "AssignStrategy.getEvalAttributes()", "testcase": false, "constructor": false}, {"identifier": "validateAttributes", "parameters": "(final DataModel model)", "modifiers": "@Override public", "return": "void", "signature": "void validateAttributes(final DataModel model)", "full_signature": "@Override public void validateAttributes(final DataModel model)", "class_method_signature": "AssignStrategy.validateAttributes(final DataModel model)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "modifiers": "public", "return": "void", "signature": "void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "full_signature": "public void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "class_method_signature": "AssignStrategy.execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "testcase": false, "constructor": false}], "file": "org.jvoicexml.profile.vxml21/src/main/java/org/jvoicexml/profile/vxml21/tagstrategy/AssignStrategy.java"}, "focal_method": {"identifier": "execute", "parameters": "(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "modifiers": "public", "return": "void", "body": "public void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node) throws JVoiceXMLEvent {\n        final DataModel model = context.getDataModel();\n        model.updateVariable(name, expr);\n        if (LOGGER.isDebugEnabled()) {\n            final String log = model.toString(expr);\n            LOGGER.debug(\"assigned var '\" + name + \"' to value: '\" + log + \"'\");\n        }\n    }", "signature": "void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "full_signature": "public void execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "class_method_signature": "AssignStrategy.execute(final VoiceXmlInterpreterContext context,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm fia, final FormItem item,\n            final VoiceXmlNode node)", "testcase": false, "constructor": false, "invocations": ["getDataModel", "updateVariable", "isDebugEnabled", "toString", "debug"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}