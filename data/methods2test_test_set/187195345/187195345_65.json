{"test_class": {"identifier": "LineEncoderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "LineEncoder lineEncoder = new LineEncoder(new LocationReferencePointEncoder());", "modifier": "", "type": "LineEncoder", "declarator": "lineEncoder = new LineEncoder(new LocationReferencePointEncoder())", "var_name": "lineEncoder"}], "file": "proto/src/test/java/openlr/proto/encoder/LineEncoderTest.java"}, "test_case": {"identifier": "testEncodeLine", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEncodeLine() throws OpenLRProtoException {\n        List<LocationReferencePoint> locationReferencePoints = new ArrayList<>();\n\n        LocationReferencePointProtoImpl first = new LocationReferencePointProtoImpl(\n                1,\n                5.7,\n                53.5,\n                15.5,\n                FunctionalRoadClass.FRC_3,\n                FormOfWay.MULTIPLE_CARRIAGEWAY,\n                200,\n                FunctionalRoadClass.FRC_4);\n\n        LocationReferencePointProtoImpl second = new LocationReferencePointProtoImpl(\n                1,\n                5.8,\n                53.6,\n                20,\n                FunctionalRoadClass.FRC_3,\n                FormOfWay.MULTIPLE_CARRIAGEWAY,\n                100,\n                FunctionalRoadClass.FRC_4);\n\n        LocationReferencePointProtoImpl last = new LocationReferencePointProtoImpl(\n                2,\n                5.6,\n                53.6,\n                165,\n                FunctionalRoadClass.FRC_4,\n                FormOfWay.MULTIPLE_CARRIAGEWAY);\n\n        locationReferencePoints.add(first);\n        locationReferencePoints.add(second);\n        locationReferencePoints.add(last);\n\n        Offsets offsets = new OffsetsProtoImpl(20, 10);\n\n        RawLineLocRef rawLocationReference = new RawLineLocRef(\"1\", locationReferencePoints, offsets);\n\n        LocationReference locationReference = lineEncoder.encode(rawLocationReference);\n\n        assertNotNull(locationReference);\n        assertEquals(locationReference.getID(), \"1\");\n        assertEquals(locationReference.getLocationType(), LocationType.LINE_LOCATION);\n        assertTrue(locationReference.isValid());\n        assertEquals(locationReference.getDataClass(), LocationReferenceData.class);\n\n        Object locationReferenceData = locationReference.getLocationReferenceData();\n\n        assertNotNull(locationReferenceData);\n        assertTrue(locationReferenceData instanceof LocationReferenceData);\n\n        LocationReferenceData data = (LocationReferenceData) locationReferenceData;\n\n        assertTrue(data.hasLineLocationReference());\n\n        LineLocationReference lineLocationReference = data.getLineLocationReference();\n\n        assertEquals(lineLocationReference.getLocationReferencePointsCount(), 3);\n\n        openlr.proto.schema.LocationReferencePoint firstLrp = lineLocationReference.getLocationReferencePoints(0);\n\n        assertTrue(firstLrp.hasCoordinates());\n\n        Coordinates firstCoordinates = firstLrp.getCoordinates();\n        assertEquals(firstCoordinates.getLongitude(),5.7);\n        assertEquals(firstCoordinates.getLatitude(), 53.5);\n\n        assertTrue(firstLrp.hasLineAttributes());\n\n        LineAttributes firstLineAttributes = firstLrp.getLineAttributes();\n        assertEquals(firstLineAttributes.getBearing(), 15);\n        assertEquals(firstLineAttributes.getFrc(), FRC.FRC_3);\n        assertEquals(firstLineAttributes.getFow(), FOW.FOW_MULTIPLE_CARRIAGEWAY);\n\n        assertTrue(firstLrp.hasPathAttributes());\n\n        PathAttributes firstPathAttributes = firstLrp.getPathAttributes();\n        assertEquals(firstPathAttributes.getDistanceToNext(), 200);\n        assertEquals(firstPathAttributes.getLowestFrcAlongPath(), FRC.FRC_4);\n\n        openlr.proto.schema.LocationReferencePoint secondLrp = lineLocationReference.getLocationReferencePoints(1);\n\n        assertTrue(secondLrp.hasCoordinates());\n\n        Coordinates secondCoordinates = secondLrp.getCoordinates();\n        assertEquals(secondCoordinates.getLongitude(),5.8);\n        assertEquals(secondCoordinates.getLatitude(), 53.6);\n\n        assertTrue(secondLrp.hasLineAttributes());\n\n        LineAttributes secondLineAttributes = secondLrp.getLineAttributes();\n        assertEquals(secondLineAttributes.getBearing(), 20);\n        assertEquals(secondLineAttributes.getFrc(), FRC.FRC_3);\n        assertEquals(secondLineAttributes.getFow(), FOW.FOW_MULTIPLE_CARRIAGEWAY);\n\n        assertTrue(secondLrp.hasPathAttributes());\n\n        PathAttributes secondPathAttributes = secondLrp.getPathAttributes();\n        assertEquals(secondPathAttributes.getDistanceToNext(), 100);\n        assertEquals(secondPathAttributes.getLowestFrcAlongPath(), FRC.FRC_4);\n\n        openlr.proto.schema.LocationReferencePoint lastLrp = lineLocationReference.getLocationReferencePoints(2);\n\n        assertTrue(lastLrp.hasCoordinates());\n\n        Coordinates lastCoordinates = lastLrp.getCoordinates();\n        assertEquals(lastCoordinates.getLongitude(),5.6);\n        assertEquals(lastCoordinates.getLatitude(), 53.6);\n\n        assertTrue(lastLrp.hasLineAttributes());\n\n        LineAttributes lastLineAttributes = lastLrp.getLineAttributes();\n        assertEquals(lastLineAttributes.getBearing(), 165);\n        assertEquals(lastLineAttributes.getFrc(), FRC.FRC_4);\n        assertEquals(lastLineAttributes.getFow(), FOW.FOW_MULTIPLE_CARRIAGEWAY);\n\n        assertFalse(lastLrp.hasPathAttributes());\n\n        assertEquals(lineLocationReference.getPositiveOffset(), 20);\n        assertEquals(lineLocationReference.getNegativeOffset(), 10);\n    }", "signature": "void testEncodeLine()", "full_signature": "@Test public void testEncodeLine()", "class_method_signature": "LineEncoderTest.testEncodeLine()", "testcase": true, "constructor": false, "invocations": ["add", "add", "add", "encode", "assertNotNull", "assertEquals", "getID", "assertEquals", "getLocationType", "assertTrue", "isValid", "assertEquals", "getDataClass", "getLocationReferenceData", "assertNotNull", "assertTrue", "assertTrue", "hasLineLocationReference", "getLineLocationReference", "assertEquals", "getLocationReferencePointsCount", "getLocationReferencePoints", "assertTrue", "hasCoordinates", "getCoordinates", "assertEquals", "getLongitude", "assertEquals", "getLatitude", "assertTrue", "hasLineAttributes", "getLineAttributes", "assertEquals", "getBearing", "assertEquals", "getFrc", "assertEquals", "getFow", "assertTrue", "hasPathAttributes", "getPathAttributes", "assertEquals", "getDistanceToNext", "assertEquals", "getLowestFrcAlongPath", "getLocationReferencePoints", "assertTrue", "hasCoordinates", "getCoordinates", "assertEquals", "getLongitude", "assertEquals", "getLatitude", "assertTrue", "hasLineAttributes", "getLineAttributes", "assertEquals", "getBearing", "assertEquals", "getFrc", "assertEquals", "getFow", "assertTrue", "hasPathAttributes", "getPathAttributes", "assertEquals", "getDistanceToNext", "assertEquals", "getLowestFrcAlongPath", "getLocationReferencePoints", "assertTrue", "hasCoordinates", "getCoordinates", "assertEquals", "getLongitude", "assertEquals", "getLatitude", "assertTrue", "hasLineAttributes", "getLineAttributes", "assertEquals", "getBearing", "assertEquals", "getFrc", "assertEquals", "getFow", "assertFalse", "hasPathAttributes", "assertEquals", "getPositiveOffset", "assertEquals", "getNegativeOffset"]}, "focal_class": {"identifier": "LineEncoder", "superclass": "", "interfaces": "implements LocationReferenceEncoder", "fields": [{"original_string": "private final LocationReferencePointEncoder locationReferencePointEncoder;", "modifier": "private final", "type": "LocationReferencePointEncoder", "declarator": "locationReferencePointEncoder", "var_name": "locationReferencePointEncoder"}], "methods": [{"identifier": "LineEncoder", "parameters": "(LocationReferencePointEncoder locationReferencePointEncoder)", "modifiers": "", "return": "", "signature": " LineEncoder(LocationReferencePointEncoder locationReferencePointEncoder)", "full_signature": "  LineEncoder(LocationReferencePointEncoder locationReferencePointEncoder)", "class_method_signature": "LineEncoder.LineEncoder(LocationReferencePointEncoder locationReferencePointEncoder)", "testcase": false, "constructor": true}, {"identifier": "encode", "parameters": "(RawLocationReference rawLocationReference)", "modifiers": "@Override public", "return": "LocationReference", "signature": "LocationReference encode(RawLocationReference rawLocationReference)", "full_signature": "@Override public LocationReference encode(RawLocationReference rawLocationReference)", "class_method_signature": "LineEncoder.encode(RawLocationReference rawLocationReference)", "testcase": false, "constructor": false}], "file": "proto/src/main/java/openlr/proto/encoder/LineEncoder.java"}, "focal_method": {"identifier": "encode", "parameters": "(RawLocationReference rawLocationReference)", "modifiers": "@Override public", "return": "LocationReference", "body": "@Override\n    public LocationReference encode(RawLocationReference rawLocationReference) throws OpenLRProtoException {\n        if (rawLocationReference.getLocationType() != LocationType.LINE_LOCATION) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);\n        }\n\n        List<LocationReferencePoint> locationReferencePoints = rawLocationReference.getLocationReferencePoints();\n\n        if (locationReferencePoints.size() < 2) {\n            throw new OpenLRProtoException(OpenLRProtoStatusCode.INVALID_LOCATION_REFERENCE);\n        }\n\n        List<openlr.proto.schema.LocationReferencePoint> lrps = new ArrayList<>();\n\n        for (LocationReferencePoint locationReferencePoint : locationReferencePoints) {\n            openlr.proto.schema.LocationReferencePoint lrp = locationReferencePointEncoder.encode(locationReferencePoint);\n            lrps.add(lrp);\n        }\n\n        Offsets offsets = rawLocationReference.getOffsets();\n\n        int positiveLength = locationReferencePoints.get(0).getDistanceToNext();\n        int positiveOffset = offsets.getPositiveOffset(positiveLength);\n\n        int negativeLength = locationReferencePoints.get(locationReferencePoints.size() - 2).getDistanceToNext();\n        int negativeOffset = offsets.getNegativeOffset(negativeLength);\n\n        LineLocationReference lineLocationReference = LineLocationReference.newBuilder()\n                .addAllLocationReferencePoints(lrps)\n                .setPositiveOffset(positiveOffset)\n                .setNegativeOffset(negativeOffset)\n                .build();\n\n        LocationReferenceData locationReferenceData = LocationReferenceData.newBuilder()\n                .setLineLocationReference(lineLocationReference)\n                .build();\n\n        return new LocationReferenceProtoImpl(rawLocationReference.getID(), LocationType.LINE_LOCATION, locationReferenceData);\n    }", "signature": "LocationReference encode(RawLocationReference rawLocationReference)", "full_signature": "@Override public LocationReference encode(RawLocationReference rawLocationReference)", "class_method_signature": "LineEncoder.encode(RawLocationReference rawLocationReference)", "testcase": false, "constructor": false, "invocations": ["getLocationType", "getLocationReferencePoints", "size", "encode", "add", "getOffsets", "getDistanceToNext", "get", "getPositiveOffset", "getDistanceToNext", "get", "size", "getNegativeOffset", "build", "setNegativeOffset", "setPositiveOffset", "addAllLocationReferencePoints", "newBuilder", "build", "setLineLocationReference", "newBuilder", "getID"]}, "repository": {"repo_id": 187195345, "url": "https://github.com/tomtom-international/openlr", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 24, "size": 4809, "license": "licensed"}}