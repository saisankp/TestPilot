{"test_class": {"identifier": "TestMmiReceiver", "superclass": "", "interfaces": "implements MMIEventListener", "fields": [{"original_string": "private Node receivingNode;", "modifier": "private", "type": "Node", "declarator": "receivingNode", "var_name": "receivingNode"}, {"original_string": "private Node publishingNode;", "modifier": "private", "type": "Node", "declarator": "publishingNode", "var_name": "publishingNode"}, {"original_string": "private Object lock;", "modifier": "private", "type": "Object", "declarator": "lock", "var_name": "lock"}, {"original_string": "private LifeCycleEvent receivedEvent;", "modifier": "private", "type": "LifeCycleEvent", "declarator": "receivedEvent", "var_name": "receivedEvent"}], "file": "org.jvoicexml.callmanager.mmi.umundo/src/test/java/org/jvoicexml/callmanager/mmi/umundo/TestMmiReceiver.java"}, "test_case": {"identifier": "testReceiveObject", "parameters": "()", "modifiers": "@Test(timeout = 5000) public", "return": "void", "body": "@Test(timeout = 5000)\n    public void testReceiveObject() throws Exception {\n        final TypedPublisher publisher = new TypedPublisher(\"test\");\n        publishingNode.addPublisher(publisher);\n        publisher.waitForSubscribers(1);\n        final String requestId = \"requestId1\";\n        final String source = \"source1\";\n        final String target = \"target1\";\n        final String context = \"context1\";\n        final String content = \"content1\";\n        final String contentUrl = \"contentUrl1\";\n        final LifeCycleEvents.PrepareRequest prepareRequest = LifeCycleEvents.PrepareRequest\n                .newBuilder().setContent(content).setContentURL(contentUrl)\n                .build();\n        final LifeCycleEvents.LifeCycleRequest lifeCycleRequest = LifeCycleEvents.LifeCycleRequest\n                .newBuilder()\n                .setContext(context)\n                .setExtension(LifeCycleEvents.PrepareRequest.request,\n                        prepareRequest).build();\n        final LifeCycleEvents.LifeCycleEvent event1 = LifeCycleEvents.LifeCycleEvent\n                .newBuilder()\n                .setType(LifeCycleEventType.PREPARE_REQUEST)\n                .setRequestID(requestId)\n                .setSource(source)\n                .setTarget(target)\n                .setExtension(LifeCycleEvents.LifeCycleRequest.request,\n                        lifeCycleRequest).build();\n        publisher.sendObject(\"LifeCycleEvent\", event1);\n        synchronized (lock) {\n            lock.wait();\n        }\n        Assert.assertNotNull(receivedEvent);\n        Assert.assertTrue(receivedEvent instanceof PrepareRequest);\n    }", "signature": "void testReceiveObject()", "full_signature": "@Test(timeout = 5000) public void testReceiveObject()", "class_method_signature": "TestMmiReceiver.testReceiveObject()", "testcase": true, "constructor": false, "invocations": ["addPublisher", "waitForSubscribers", "build", "setContentURL", "setContent", "newBuilder", "build", "setExtension", "setContext", "newBuilder", "build", "setExtension", "setTarget", "setSource", "setRequestID", "setType", "newBuilder", "sendObject", "wait", "assertNotNull", "assertTrue"]}, "focal_class": {"identifier": "MmiReceiver", "superclass": "", "interfaces": "implements ITypedReceiver", "fields": [{"original_string": "private static final Logger LOGGER = Logger\n            .getLogger(MmiReceiver.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = Logger\n            .getLogger(MmiReceiver.class)", "var_name": "LOGGER"}, {"original_string": "private final Collection<MMIEventListener> listeners;", "modifier": "private final", "type": "Collection<MMIEventListener>", "declarator": "listeners", "var_name": "listeners"}, {"original_string": "private final String sourceUrl;", "modifier": "private final", "type": "String", "declarator": "sourceUrl", "var_name": "sourceUrl"}, {"original_string": "private DocumentBuilder builder;", "modifier": "private", "type": "DocumentBuilder", "declarator": "builder", "var_name": "builder"}, {"original_string": "private Templates template;", "modifier": "private", "type": "Templates", "declarator": "template", "var_name": "template"}], "methods": [{"identifier": "MmiReceiver", "parameters": "(final String source)", "modifiers": "public", "return": "", "signature": " MmiReceiver(final String source)", "full_signature": "public  MmiReceiver(final String source)", "class_method_signature": "MmiReceiver.MmiReceiver(final String source)", "testcase": false, "constructor": true}, {"identifier": "receiveObject", "parameters": "(final Object object, final Message msg)", "modifiers": "@Override public", "return": "void", "signature": "void receiveObject(final Object object, final Message msg)", "full_signature": "@Override public void receiveObject(final Object object, final Message msg)", "class_method_signature": "MmiReceiver.receiveObject(final Object object, final Message msg)", "testcase": false, "constructor": false}, {"identifier": "convertToLifeCycleEvent", "parameters": "(\n            final Object object)", "modifiers": "private", "return": "LifeCycleEvent", "signature": "LifeCycleEvent convertToLifeCycleEvent(\n            final Object object)", "full_signature": "private LifeCycleEvent convertToLifeCycleEvent(\n            final Object object)", "class_method_signature": "MmiReceiver.convertToLifeCycleEvent(\n            final Object object)", "testcase": false, "constructor": false}, {"identifier": "extractContext", "parameters": "(\n            final LifeCycleEvents.LifeCycleEvent receivedEvent,\n            final LifeCycleRequest request)", "modifiers": "private", "return": "LifeCycleEvents.LifeCycleRequest", "signature": "LifeCycleEvents.LifeCycleRequest extractContext(\n            final LifeCycleEvents.LifeCycleEvent receivedEvent,\n            final LifeCycleRequest request)", "full_signature": "private LifeCycleEvents.LifeCycleRequest extractContext(\n            final LifeCycleEvents.LifeCycleEvent receivedEvent,\n            final LifeCycleRequest request)", "class_method_signature": "MmiReceiver.extractContext(\n            final LifeCycleEvents.LifeCycleEvent receivedEvent,\n            final LifeCycleRequest request)", "testcase": false, "constructor": false}, {"identifier": "convertContent", "parameters": "(final String xml)", "modifiers": "private", "return": "Object", "signature": "Object convertContent(final String xml)", "full_signature": "private Object convertContent(final String xml)", "class_method_signature": "MmiReceiver.convertContent(final String xml)", "testcase": false, "constructor": false}, {"identifier": "addMMIEventListener", "parameters": "(final MMIEventListener listener)", "modifiers": "public", "return": "void", "signature": "void addMMIEventListener(final MMIEventListener listener)", "full_signature": "public void addMMIEventListener(final MMIEventListener listener)", "class_method_signature": "MmiReceiver.addMMIEventListener(final MMIEventListener listener)", "testcase": false, "constructor": false}, {"identifier": "removeMMIEventListener", "parameters": "(final MMIEventListener listener)", "modifiers": "public", "return": "void", "signature": "void removeMMIEventListener(final MMIEventListener listener)", "full_signature": "public void removeMMIEventListener(final MMIEventListener listener)", "class_method_signature": "MmiReceiver.removeMMIEventListener(final MMIEventListener listener)", "testcase": false, "constructor": false}], "file": "org.jvoicexml.callmanager.mmi.umundo/src/main/java/org/jvoicexml/callmanager/mmi/umundo/MmiReceiver.java"}, "focal_method": {"identifier": "receiveObject", "parameters": "(final Object object, final Message msg)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void receiveObject(final Object object, final Message msg) {\n        // bugfix\n        // Java uses the system classloader when being invoked from JNI.\n        // Thereby, it forgets about all the stuff it knew before.\n        final ClassLoader loader = getClass().getClassLoader();\n        Thread.currentThread().setContextClassLoader(loader);\n\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"received '\" + object + \"'\");\n        }\n        final LifeCycleEvent event;\n        try {\n            event = convertToLifeCycleEvent(object);\n        } catch (SAXException | IOException | TransformerException\n                | ParserConfigurationException e) {\n            LOGGER.error(e.getMessage(), e);\n            return;\n        }\n\n        // Notify all listeners about the event\n        final Mmi mmi = new Mmi();\n        mmi.setLifeCycleEvent(event);\n        final DecoratedMMIEvent docatedEvent = new DecoratedMMIEvent(sourceUrl,\n                mmi);\n        final CallMetadata data = new CallMetadata();\n        data.setProtocolName(\"umundo\");\n        synchronized (listeners) {\n            for (MMIEventListener listener : listeners) {\n                listener.receivedEvent(docatedEvent, data);\n            }\n        }\n    }", "signature": "void receiveObject(final Object object, final Message msg)", "full_signature": "@Override public void receiveObject(final Object object, final Message msg)", "class_method_signature": "MmiReceiver.receiveObject(final Object object, final Message msg)", "testcase": false, "constructor": false, "invocations": ["getClassLoader", "getClass", "setContextClassLoader", "currentThread", "isDebugEnabled", "debug", "convertToLifeCycleEvent", "error", "getMessage", "setLifeCycleEvent", "setProtocolName", "receivedEvent"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}