{"test_class": {"identifier": "MainTest", "superclass": "", "interfaces": "", "fields": [], "file": "section539/lesson14513/step50386/src/MainTest.java"}, "test_case": {"identifier": "checkLabels", "parameters": "()", "modifiers": "@Test(timeout = 8000) public", "return": "void", "body": "@Test(timeout = 8000)\n    public void checkLabels() throws Throwable {\n        Class<?> mainClass = TestUtils.getUserClass(\"Main\");\n\n        Class<?> keywordAnalyzerClass = TestUtils.getInnerClass(mainClass, \"KeywordAnalyzer\");\n        Class<?> spamAnalyzerClass = TestUtils.getInnerClass(mainClass, \"SpamAnalyzer\");\n        Class<?> negativeTextAnalyzerClass = TestUtils.getInnerClass(mainClass, \"NegativeTextAnalyzer\");\n        Class<?> tooLongTextAnalyzerClass = TestUtils.getInnerClass(mainClass, \"TooLongTextAnalyzer\");\n\n        assertTrue(\"KeywordAnalyzer is not implements TextAnalyzer\", TextAnalyzer.class.isAssignableFrom(keywordAnalyzerClass));\n        assertTrue(\"SpamAnalyzerClass is not extends KeywordAnalyzer\", keywordAnalyzerClass.isAssignableFrom(spamAnalyzerClass));\n        assertTrue(\"NegativeTextAnalyzer is not extends KeywordAnalyzer\", keywordAnalyzerClass.isAssignableFrom(negativeTextAnalyzerClass));\n\n        assertTrue(\"KeywordAnalyzer is not abstract\", Modifier.isAbstract(keywordAnalyzerClass.getModifiers()));\n\n        TestUtils.getMethod(keywordAnalyzerClass,\n                \"getKeywords\",\n                new int[]{Modifier.PROTECTED | Modifier.ABSTRACT},\n                String[].class);\n\n        TestUtils.getMethod(keywordAnalyzerClass,\n                \"getLabel\",\n                new int[]{Modifier.PROTECTED | Modifier.ABSTRACT},\n                Label.class);\n\n        Constructor<?> spamAnalyzerConstructor = TestUtils.getConstructor(spamAnalyzerClass,\n                new int[]{Modifier.PUBLIC, 0},\n                Main.class,\n                String[].class);\n\n        Constructor<?> negativeTextAnalyzerConstructor = TestUtils.getConstructor(negativeTextAnalyzerClass,\n                new int[]{Modifier.PUBLIC, 0},\n                Main.class);\n\n        Constructor<?> tooLongTextAnalyzerConstructor = TestUtils.getConstructor(tooLongTextAnalyzerClass,\n                new int[]{Modifier.PUBLIC, 0},\n                Main.class,\n                int.class);\n\n        String[] keywords = new String[]{\n                \"spam\",\n                \"same spam!\"\n        };\n\n        Object main = mainClass.newInstance();\n\n        TextAnalyzer[] analyzers = new TextAnalyzer[]{\n                (TextAnalyzer) spamAnalyzerConstructor.newInstance(main, keywords),\n                (TextAnalyzer) negativeTextAnalyzerConstructor.newInstance(main),\n                (TextAnalyzer) tooLongTextAnalyzerConstructor.newInstance(main, 10),\n        };\n\n        Method checkLabels = TestUtils.getMethod(mainClass,\n                \"checkLabels\",\n                new int[]{Modifier.PUBLIC, 0},\n                Label.class,\n                TextAnalyzer[].class, String.class);\n\n        assertEquals(Label.OK, TestUtils.invokeMethod(main, checkLabels, analyzers, \"Good text\"));\n        assertEquals(Label.NEGATIVE_TEXT, TestUtils.invokeMethod(main, checkLabels, analyzers, \"Sorry :(\"));\n        assertEquals(Label.NEGATIVE_TEXT, TestUtils.invokeMethod(main, checkLabels, analyzers, \"Bye =(!\"));\n        assertEquals(Label.NEGATIVE_TEXT, TestUtils.invokeMethod(main, checkLabels, analyzers, \"What?:|\"));\n        assertEquals(Label.TOO_LONG, TestUtils.invokeMethod(main, checkLabels, analyzers, \"I'm very long string!\"));\n        assertEquals(Label.SPAM, TestUtils.invokeMethod(main, checkLabels, analyzers, \"Hi. I'm spam\"));\n        assertEquals(Label.SPAM, TestUtils.invokeMethod(main, checkLabels, analyzers, \"Hi. I'm too spam!\"));\n    }", "signature": "void checkLabels()", "full_signature": "@Test(timeout = 8000) public void checkLabels()", "class_method_signature": "MainTest.checkLabels()", "testcase": true, "constructor": false, "invocations": ["getUserClass", "getInnerClass", "getInnerClass", "getInnerClass", "getInnerClass", "assertTrue", "isAssignableFrom", "assertTrue", "isAssignableFrom", "assertTrue", "isAssignableFrom", "assertTrue", "isAbstract", "getModifiers", "getMethod", "getMethod", "getConstructor", "getConstructor", "getConstructor", "newInstance", "newInstance", "newInstance", "newInstance", "getMethod", "assertEquals", "invokeMethod", "assertEquals", "invokeMethod", "assertEquals", "invokeMethod", "assertEquals", "invokeMethod", "assertEquals", "invokeMethod", "assertEquals", "invokeMethod", "assertEquals", "invokeMethod"]}, "focal_class": {"identifier": "Main", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "checkLabels", "parameters": "(TextAnalyzer[] analyzers, String text)", "modifiers": "public", "return": "Label", "signature": "Label checkLabels(TextAnalyzer[] analyzers, String text)", "full_signature": "public Label checkLabels(TextAnalyzer[] analyzers, String text)", "class_method_signature": "Main.checkLabels(TextAnalyzer[] analyzers, String text)", "testcase": false, "constructor": false}], "file": "section539/lesson14513/step50386/src/Main.java"}, "focal_method": {"identifier": "checkLabels", "parameters": "(TextAnalyzer[] analyzers, String text)", "modifiers": "public", "return": "Label", "body": "public Label checkLabels(TextAnalyzer[] analyzers, String text) {\n        return Label.OK;\n    }", "signature": "Label checkLabels(TextAnalyzer[] analyzers, String text)", "full_signature": "public Label checkLabels(TextAnalyzer[] analyzers, String text)", "class_method_signature": "Main.checkLabels(TextAnalyzer[] analyzers, String text)", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 69660791, "url": "https://github.com/meanmail/java_base", "language": "Java", "is_fork": false, "fork_count": 17, "stargazer_count": 24, "size": 432, "license": "licensed"}}