{"test_class": {"identifier": "CompressCLITest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String _configuration;", "modifier": "private", "type": "String", "declarator": "_configuration", "var_name": "_configuration"}, {"original_string": "private File _inputLocation;", "modifier": "private", "type": "File", "declarator": "_inputLocation", "var_name": "_inputLocation"}, {"original_string": "private File _outputLocation;", "modifier": "private", "type": "File", "declarator": "_outputLocation", "var_name": "_outputLocation"}, {"original_string": "private File _outputFile;", "modifier": "private", "type": "File", "declarator": "_outputFile", "var_name": "_outputFile"}], "file": "compress/src/test/java/com/switchfly/compress/cli/CompressCLITest.java"}, "test_case": {"identifier": "testMinifyAndObfuscateCss", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMinifyAndObfuscateCss() throws Exception {\n        File input = new File(getClass().getResource(\"input.css\").getFile());\n\n        CompressCLI compressCLI = new CompressCLI();\n        compressCLI.minifyAndObfuscateFile(input, _outputFile, false);\n\n        assertTrue(_outputFile.exists());\n\n        String actual = IOUtils.toString(new FileInputStream(_outputFile));\n        String expected = IOUtils.toString(getClass().getResourceAsStream(\"inputMinified.css\")).trim();\n        TestingUtil.assertEqualsIgnoreWhitespace(expected, actual.trim());\n    }", "signature": "void testMinifyAndObfuscateCss()", "full_signature": "@Test public void testMinifyAndObfuscateCss()", "class_method_signature": "CompressCLITest.testMinifyAndObfuscateCss()", "testcase": true, "constructor": false, "invocations": ["getFile", "getResource", "getClass", "minifyAndObfuscateFile", "assertTrue", "exists", "toString", "trim", "toString", "getResourceAsStream", "getClass", "assertEqualsIgnoreWhitespace", "trim"]}, "focal_class": {"identifier": "CompressCLI", "superclass": "", "interfaces": "", "fields": [{"original_string": "private String _baseInputPath;", "modifier": "private", "type": "String", "declarator": "_baseInputPath", "var_name": "_baseInputPath"}, {"original_string": "private IConfiguration _config;", "modifier": "private", "type": "IConfiguration", "declarator": "_config", "var_name": "_config"}, {"original_string": "private String _cssURIFragment = \"\";", "modifier": "private", "type": "String", "declarator": "_cssURIFragment = \"\"", "var_name": "_cssURIFragment"}, {"original_string": "private boolean _disableMicroOptimizations = false;", "modifier": "private", "type": "boolean", "declarator": "_disableMicroOptimizations = false", "var_name": "_disableMicroOptimizations"}, {"original_string": "private boolean _isListOnly = false;", "modifier": "private", "type": "boolean", "declarator": "_isListOnly = false", "var_name": "_isListOnly"}, {"original_string": "private boolean _isVerbose = false;", "modifier": "private", "type": "boolean", "declarator": "_isVerbose = false", "var_name": "_isVerbose"}, {"original_string": "private boolean _isDebug = false;", "modifier": "private", "type": "boolean", "declarator": "_isDebug = false", "var_name": "_isDebug"}, {"original_string": "private String _jsURIFragment = \"\";", "modifier": "private", "type": "String", "declarator": "_jsURIFragment = \"\"", "var_name": "_jsURIFragment"}, {"original_string": "private int _lineBreakPos = -1;", "modifier": "private", "type": "int", "declarator": "_lineBreakPos = -1", "var_name": "_lineBreakPos"}, {"original_string": "private boolean _obfuscate = true;", "modifier": "private", "type": "boolean", "declarator": "_obfuscate = true", "var_name": "_obfuscate"}, {"original_string": "private String _outputPath;", "modifier": "private", "type": "String", "declarator": "_outputPath", "var_name": "_outputPath"}, {"original_string": "private boolean _preserveUnecessarySemicolons = true;", "modifier": "private", "type": "boolean", "declarator": "_preserveUnecessarySemicolons = true", "var_name": "_preserveUnecessarySemicolons"}, {"original_string": "private String _jsTemplate = \"(function(){\" + \"var loader = function(name, files, asset_url){\" + \"var _files = files.split(',');\" +\n        \"var require = function(libraryName) {\" + \"if (libraryName.search(/\\\\.js$/i) > 0) {\" +\n        \"document.write('<script type=\\\"text/javascript\\\" src=\\\"'+libraryName+'\\\"></script>');\" +\n        \"} else if (libraryName.search(/\\\\.css$/i) > 0 ) {\" +\n        \"document.write('<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"'+libraryName+'\\\">');\" + \"}};\" + \"var include_files = function(path){\" +\n        \"var root = (path.slice(0,2) === '//' || path.slice(0,4) === 'http')? '' : location.protocol + '//' + location.host;\" +\n        \"if( path.charAt(path.length-1) !== '/') {\" + \"path+= '/';}\" + \"for(var i = 0, len = _files.length; i < len; i++){\" +\n        \"require(root + path + _files[i]);}};\" + \"if ( asset_url.length === 0 ) { return;}\" + \"include_files( asset_url );};\" +\n        \"loader('#{package_name}', '#{package_files}', '#{assets_url}');})();\";", "modifier": "private", "type": "String", "declarator": "_jsTemplate = \"(function(){\" + \"var loader = function(name, files, asset_url){\" + \"var _files = files.split(',');\" +\n        \"var require = function(libraryName) {\" + \"if (libraryName.search(/\\\\.js$/i) > 0) {\" +\n        \"document.write('<script type=\\\"text/javascript\\\" src=\\\"'+libraryName+'\\\"></script>');\" +\n        \"} else if (libraryName.search(/\\\\.css$/i) > 0 ) {\" +\n        \"document.write('<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"'+libraryName+'\\\">');\" + \"}};\" + \"var include_files = function(path){\" +\n        \"var root = (path.slice(0,2) === '//' || path.slice(0,4) === 'http')? '' : location.protocol + '//' + location.host;\" +\n        \"if( path.charAt(path.length-1) !== '/') {\" + \"path+= '/';}\" + \"for(var i = 0, len = _files.length; i < len; i++){\" +\n        \"require(root + path + _files[i]);}};\" + \"if ( asset_url.length === 0 ) { return;}\" + \"include_files( asset_url );};\" +\n        \"loader('#{package_name}', '#{package_files}', '#{assets_url}');})();\"", "var_name": "_jsTemplate"}], "methods": [{"identifier": "main", "parameters": "(String[] args)", "modifiers": "public static", "return": "void", "signature": "void main(String[] args)", "full_signature": "public static void main(String[] args)", "class_method_signature": "CompressCLI.main(String[] args)", "testcase": false, "constructor": false}, {"identifier": "printUsage", "parameters": "()", "modifiers": "private static", "return": "void", "signature": "void printUsage()", "full_signature": "private static void printUsage()", "class_method_signature": "CompressCLI.printUsage()", "testcase": false, "constructor": false}, {"identifier": "setIsListOnly", "parameters": "(boolean isListOnly)", "modifiers": "public", "return": "void", "signature": "void setIsListOnly(boolean isListOnly)", "full_signature": "public void setIsListOnly(boolean isListOnly)", "class_method_signature": "CompressCLI.setIsListOnly(boolean isListOnly)", "testcase": false, "constructor": false}, {"identifier": "setIsVerbose", "parameters": "(boolean isVerbose)", "modifiers": "public", "return": "void", "signature": "void setIsVerbose(boolean isVerbose)", "full_signature": "public void setIsVerbose(boolean isVerbose)", "class_method_signature": "CompressCLI.setIsVerbose(boolean isVerbose)", "testcase": false, "constructor": false}, {"identifier": "setIsDebug", "parameters": "(boolean isDebug)", "modifiers": "public", "return": "void", "signature": "void setIsDebug(boolean isDebug)", "full_signature": "public void setIsDebug(boolean isDebug)", "class_method_signature": "CompressCLI.setIsDebug(boolean isDebug)", "testcase": false, "constructor": false}, {"identifier": "setLineBreakPos", "parameters": "(int breakPos)", "modifiers": "public", "return": "void", "signature": "void setLineBreakPos(int breakPos)", "full_signature": "public void setLineBreakPos(int breakPos)", "class_method_signature": "CompressCLI.setLineBreakPos(int breakPos)", "testcase": false, "constructor": false}, {"identifier": "setObfuscate", "parameters": "(boolean obfuscate)", "modifiers": "public", "return": "void", "signature": "void setObfuscate(boolean obfuscate)", "full_signature": "public void setObfuscate(boolean obfuscate)", "class_method_signature": "CompressCLI.setObfuscate(boolean obfuscate)", "testcase": false, "constructor": false}, {"identifier": "setDisableMicroOptimizations", "parameters": "(boolean disableMicroOptimizations)", "modifiers": "public", "return": "void", "signature": "void setDisableMicroOptimizations(boolean disableMicroOptimizations)", "full_signature": "public void setDisableMicroOptimizations(boolean disableMicroOptimizations)", "class_method_signature": "CompressCLI.setDisableMicroOptimizations(boolean disableMicroOptimizations)", "testcase": false, "constructor": false}, {"identifier": "setPreserveUnecessarySemicolons", "parameters": "(boolean preserveUnecessarySemicolons)", "modifiers": "public", "return": "void", "signature": "void setPreserveUnecessarySemicolons(boolean preserveUnecessarySemicolons)", "full_signature": "public void setPreserveUnecessarySemicolons(boolean preserveUnecessarySemicolons)", "class_method_signature": "CompressCLI.setPreserveUnecessarySemicolons(boolean preserveUnecessarySemicolons)", "testcase": false, "constructor": false}, {"identifier": "setOutputPath", "parameters": "(String outputPath)", "modifiers": "public", "return": "void", "signature": "void setOutputPath(String outputPath)", "full_signature": "public void setOutputPath(String outputPath)", "class_method_signature": "CompressCLI.setOutputPath(String outputPath)", "testcase": false, "constructor": false}, {"identifier": "setConfigurationFromFile", "parameters": "(String configurationPath)", "modifiers": "public", "return": "void", "signature": "void setConfigurationFromFile(String configurationPath)", "full_signature": "public void setConfigurationFromFile(String configurationPath)", "class_method_signature": "CompressCLI.setConfigurationFromFile(String configurationPath)", "testcase": false, "constructor": false}, {"identifier": "setConfigurationFromStream", "parameters": "(InputStream in)", "modifiers": "public", "return": "void", "signature": "void setConfigurationFromStream(InputStream in)", "full_signature": "public void setConfigurationFromStream(InputStream in)", "class_method_signature": "CompressCLI.setConfigurationFromStream(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "setConfigurationFromString", "parameters": "(String in)", "modifiers": "public", "return": "void", "signature": "void setConfigurationFromString(String in)", "full_signature": "public void setConfigurationFromString(String in)", "class_method_signature": "CompressCLI.setConfigurationFromString(String in)", "testcase": false, "constructor": false}, {"identifier": "setBaseInputPath", "parameters": "(String baseInputPath)", "modifiers": "public", "return": "void", "signature": "void setBaseInputPath(String baseInputPath)", "full_signature": "public void setBaseInputPath(String baseInputPath)", "class_method_signature": "CompressCLI.setBaseInputPath(String baseInputPath)", "testcase": false, "constructor": false}, {"identifier": "setJsURIFragment", "parameters": "(String fragment)", "modifiers": "public", "return": "void", "signature": "void setJsURIFragment(String fragment)", "full_signature": "public void setJsURIFragment(String fragment)", "class_method_signature": "CompressCLI.setJsURIFragment(String fragment)", "testcase": false, "constructor": false}, {"identifier": "setCssURIFragment", "parameters": "(String fragment)", "modifiers": "public", "return": "void", "signature": "void setCssURIFragment(String fragment)", "full_signature": "public void setCssURIFragment(String fragment)", "class_method_signature": "CompressCLI.setCssURIFragment(String fragment)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void execute()", "full_signature": "public void execute()", "class_method_signature": "CompressCLI.execute()", "testcase": false, "constructor": false}, {"identifier": "processCompress", "parameters": "(String packageNamePrefix, List<String> files, File inputDir, File baseOutputDir, boolean isJs)", "modifiers": "protected", "return": "void", "signature": "void processCompress(String packageNamePrefix, List<String> files, File inputDir, File baseOutputDir, boolean isJs)", "full_signature": "protected void processCompress(String packageNamePrefix, List<String> files, File inputDir, File baseOutputDir, boolean isJs)", "class_method_signature": "CompressCLI.processCompress(String packageNamePrefix, List<String> files, File inputDir, File baseOutputDir, boolean isJs)", "testcase": false, "constructor": false}, {"identifier": "minifyAndObfuscateFile", "parameters": "(File input, File output, boolean isJs)", "modifiers": "public", "return": "void", "signature": "void minifyAndObfuscateFile(File input, File output, boolean isJs)", "full_signature": "public void minifyAndObfuscateFile(File input, File output, boolean isJs)", "class_method_signature": "CompressCLI.minifyAndObfuscateFile(File input, File output, boolean isJs)", "testcase": false, "constructor": false}, {"identifier": "processList", "parameters": "(String packageNamePrefix, List<String> files, File inputDir, File baseOutputDir, boolean isJs)", "modifiers": "private", "return": "void", "signature": "void processList(String packageNamePrefix, List<String> files, File inputDir, File baseOutputDir, boolean isJs)", "full_signature": "private void processList(String packageNamePrefix, List<String> files, File inputDir, File baseOutputDir, boolean isJs)", "class_method_signature": "CompressCLI.processList(String packageNamePrefix, List<String> files, File inputDir, File baseOutputDir, boolean isJs)", "testcase": false, "constructor": false}, {"identifier": "writePackageFile", "parameters": "(File pkg, String contents)", "modifiers": "private", "return": "void", "signature": "void writePackageFile(File pkg, String contents)", "full_signature": "private void writePackageFile(File pkg, String contents)", "class_method_signature": "CompressCLI.writePackageFile(File pkg, String contents)", "testcase": false, "constructor": false}, {"identifier": "copyfile", "parameters": "(File source, File target, boolean append)", "modifiers": "private", "return": "void", "signature": "void copyfile(File source, File target, boolean append)", "full_signature": "private void copyfile(File source, File target, boolean append)", "class_method_signature": "CompressCLI.copyfile(File source, File target, boolean append)", "testcase": false, "constructor": false}, {"identifier": "getContentsForJsPackage", "parameters": "(String packageName, String fileJsArray, String assetUri)", "modifiers": "private", "return": "String", "signature": "String getContentsForJsPackage(String packageName, String fileJsArray, String assetUri)", "full_signature": "private String getContentsForJsPackage(String packageName, String fileJsArray, String assetUri)", "class_method_signature": "CompressCLI.getContentsForJsPackage(String packageName, String fileJsArray, String assetUri)", "testcase": false, "constructor": false}], "file": "compress/src/main/java/com/switchfly/compress/cli/CompressCLI.java"}, "focal_method": {"identifier": "minifyAndObfuscateFile", "parameters": "(File input, File output, boolean isJs)", "modifiers": "public", "return": "void", "body": "public void minifyAndObfuscateFile(File input, File output, boolean isJs) throws EvaluatorException, IOException {\n\n        final String fileName = input.getCanonicalPath();\n        InputStreamReader in = new InputStreamReader(new FileInputStream(input), \"UTF-8\");\n        OutputStreamWriter out = null;\n        try {\n            if (isJs) {\n\n                JavaScriptCompressor compressor = new JavaScriptCompressor(in, new ErrorReporter() {\n\n                    public void warning(String message, String sourceName, int line, String lineSource, int lineOffset) {\n                        if (line < 0) {\n                            System.err.println(\"\\n[WARNING] \" + fileName + ':' + message);\n                        } else {\n                            System.err.println(\"\\n[WARNING] \" + fileName + ':' + line + ':' + lineOffset + ':' + message);\n                        }\n                    }\n\n                    public void error(String message, String sourceName, int line, String lineSource, int lineOffset) {\n                        if (line < 0) {\n                            System.err.println(\"\\n[ERROR] \" + fileName + ':' + message);\n                        } else {\n                            System.err.println(\"\\n[ERROR] \" + fileName + ':' + line + ':' + lineOffset + ':' + message);\n                        }\n                    }\n\n                    public EvaluatorException runtimeError(String message, String sourceName, int line, String lineSource, int lineOffset) {\n                        error(message, sourceName, line, lineSource, lineOffset);\n                        return new EvaluatorException(message);\n                    }\n                });\n\n                in.close();\n                in = null;\n                out = new OutputStreamWriter(new FileOutputStream(output), \"UTF-8\");\n                compressor.compress(out, _lineBreakPos, _obfuscate, _isDebug, _preserveUnecessarySemicolons, _disableMicroOptimizations);\n            } else {\n                CssCompressor compressor = new com.yahoo.platform.yui.compressor.CssCompressor(in);\n                in.close();\n                in = null;\n                out = new OutputStreamWriter(new FileOutputStream(output), \"UTF-8\");\n                compressor.compress(out, _lineBreakPos);\n            }\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n\n            if (out != null) {\n                out.close();\n            }\n        }\n    }", "signature": "void minifyAndObfuscateFile(File input, File output, boolean isJs)", "full_signature": "public void minifyAndObfuscateFile(File input, File output, boolean isJs)", "class_method_signature": "CompressCLI.minifyAndObfuscateFile(File input, File output, boolean isJs)", "testcase": false, "constructor": false, "invocations": ["getCanonicalPath", "println", "println", "println", "println", "error", "close", "compress", "close", "compress", "close", "close"]}, "repository": {"repo_id": 5622726, "url": "https://github.com/switchfly/switchfly-java", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 752, "license": "licensed"}}