{"test_class": {"identifier": "JavaImageIOMigrateTest", "superclass": "extends TestCase", "interfaces": "", "fields": [{"original_string": "String wsdlLoc = \"/pserv-pa-java-se/JavaImageIOMigrate?wsdl\";", "modifier": "", "type": "String", "declarator": "wsdlLoc = \"/pserv-pa-java-se/JavaImageIOMigrate?wsdl\"", "var_name": "wsdlLoc"}, {"original_string": "Migrate dom = null;", "modifier": "", "type": "Migrate", "declarator": "dom = null", "var_name": "dom"}], "file": "services/java-se/src/test/java/eu/planets_project/services/java_se/image/JavaImageIOMigrateTest.java"}, "test_case": {"identifier": "testMigrate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMigrate() throws IOException {\n        this.migrateTo(\"gif\");\n        this.migrateTo(\"jpg\");\n        /* These don't seem to work in server mode, as if the JAR is not being picked up.\n        this.migrateTo(\"tif\");\n        this.migrateTo(\"jpeg2000\");\n        */\n    }", "signature": "void testMigrate()", "full_signature": "@Test public void testMigrate()", "class_method_signature": "JavaImageIOMigrateTest.testMigrate()", "testcase": true, "constructor": false, "invocations": ["migrateTo", "migrateTo"]}, "focal_class": {"identifier": "JavaImageIOMigrate", "superclass": "", "interfaces": "implements Migrate", "fields": [{"original_string": "public static final String NAME = \"JavaImageIOMigrate\";", "modifier": "public static final", "type": "String", "declarator": "NAME = \"JavaImageIOMigrate\"", "var_name": "NAME"}, {"original_string": "private static final FormatRegistry format = FormatRegistryFactory.getFormatRegistry();", "modifier": "private static final", "type": "FormatRegistry", "declarator": "format = FormatRegistryFactory.getFormatRegistry()", "var_name": "format"}, {"original_string": "private static Logger log = Logger.getLogger(JavaImageIOMigrate.class.getName());", "modifier": "private static", "type": "Logger", "declarator": "log = Logger.getLogger(JavaImageIOMigrate.class.getName())", "var_name": "log"}], "methods": [{"identifier": "describe", "parameters": "()", "modifiers": "public", "return": "ServiceDescription", "signature": "ServiceDescription describe()", "full_signature": "public ServiceDescription describe()", "class_method_signature": "JavaImageIOMigrate.describe()", "testcase": false, "constructor": false}, {"identifier": "migrate", "parameters": "(DigitalObject dob, URI inputFormat,\n            URI outputFormat, List<Parameter> parameters)", "modifiers": "public", "return": "MigrateResult", "signature": "MigrateResult migrate(DigitalObject dob, URI inputFormat,\n            URI outputFormat, List<Parameter> parameters)", "full_signature": "public MigrateResult migrate(DigitalObject dob, URI inputFormat,\n            URI outputFormat, List<Parameter> parameters)", "class_method_signature": "JavaImageIOMigrate.migrate(DigitalObject dob, URI inputFormat,\n            URI outputFormat, List<Parameter> parameters)", "testcase": false, "constructor": false}, {"identifier": "returnWithErrorMessage", "parameters": "(String message, Exception e )", "modifiers": "private", "return": "MigrateResult", "signature": "MigrateResult returnWithErrorMessage(String message, Exception e )", "full_signature": "private MigrateResult returnWithErrorMessage(String message, Exception e )", "class_method_signature": "JavaImageIOMigrate.returnWithErrorMessage(String message, Exception e )", "testcase": false, "constructor": false}], "file": "services/java-se/src/main/java/eu/planets_project/services/java_se/image/JavaImageIOMigrate.java"}, "focal_method": {"identifier": "migrate", "parameters": "(DigitalObject dob, URI inputFormat,\n            URI outputFormat, List<Parameter> parameters)", "modifiers": "public", "return": "MigrateResult", "body": "public MigrateResult migrate(DigitalObject dob, URI inputFormat,\n            URI outputFormat, List<Parameter> parameters) {\n        // Start timing...\n        ServicePerformanceHelper sph = new ServicePerformanceHelper();\n        \n        BufferedImage image = null;\n\n        // There must be content:\n        if( dob.getContent() == null ) {\n            return this.returnWithErrorMessage(\"The Content of the DigitalObject should not be NULL.\", null);\n        }\n        // Both by-reference and by-value can be read as input streams:\n        try {\n            image = ImageIO.read( dob.getContent().getInputStream() );\n        } catch ( Exception e) {\n            return returnWithErrorMessage(\"Exception reading the image - unsupported or invalid input? \", e);\n        }\n        // Record time take to load the input into memory:\n        sph.loaded();\n        \n        // If that failed, then report an error.\n        if( image == null ) {\n            return returnWithErrorMessage(\"Failed to read the image - unsupported or invalid input? \", null);\n        }\n\n        // Pick up the output format:\n        //Format format = new Format(outputFormat);\n        Set<String> extensionsForURI = format.getExtensions(outputFormat);\n        if(extensionsForURI.isEmpty() ) {\n            return this.returnWithErrorMessage(\"Unsupported output format: \"+outputFormat,null);\n        } else {\n            log.info(\"Outputing image to format: \"+format.getExtensions(outputFormat).iterator().next());\n        }\n        \n        String extension = extensionsForURI.iterator().next();\n        File outfile = null;\n        try {\n            outfile = File.createTempFile(\"imageio\", extension);\n\n            // FIXME If writing an RBGA image, this simple write method can accidentally convert to CMYK for JPEG, as that is the only way to represent four channels.\n            /*\n            ImageWriter iw = ImageIO.getImageWritersByFormatName(extension).next();\n            ImageTypeSpecifier its =  iw.getDefaultWriteParam().getDestinationType();\n            its.getColorModel().hasAlpha();\n            its.getColorModel().getNumComponents();\n            // Compare with...\n            image.getColorModel().hasAlpha();\n            // Write:\n            iw.setOutput(new FileImageOutputStream(outfile));\n            ImageWriteParam iwp = iw.getDefaultWriteParam();\n            iwp.setDestinationType(its);\n            iw.write(null, new IIOImage(image, null, null), iwp);\n            */\n            \n            // Write using the simple approach:\n            ImageIO.write(image, extension, outfile );\n        } catch ( Exception e) {\n            return this.returnWithErrorMessage(\"Could not create image in the new format. \",e);\n        }\n\n        //try to build digital object with content by reference\n        /*\n        try {        \t        \t\n            WebContentHelper webHandler = new WebContentHelper();\n        \tURL contentUrl = webHandler.copyIntoHTMLDirectory(outfile);\n        \tlog.info(\"got content URL: \"+contentUrl);\n        \t\n            ServiceReport rep = new ServiceReport(Type.INFO, Status.SUCCESS, \"OK\");\n        \tDigitalObject ndo = new DigitalObject.Builder(Content.byReference(contentUrl)).build();\n            return new MigrateResult(ndo, rep);\n        } catch (Exception e) {\n            log.log(Level.SEVERE, \"Could not return content by reference. \", e);\n        }\n        */\n        ServiceReport rep = new ServiceReport(Type.INFO, Status.SUCCESS, \"OK\", sph.getPerformanceProperties() );\n        DigitalObject ndo = new DigitalObject.Builder(Content.byReference(outfile)).build();\n        return new MigrateResult(ndo, rep);\n    }", "signature": "MigrateResult migrate(DigitalObject dob, URI inputFormat,\n            URI outputFormat, List<Parameter> parameters)", "full_signature": "public MigrateResult migrate(DigitalObject dob, URI inputFormat,\n            URI outputFormat, List<Parameter> parameters)", "class_method_signature": "JavaImageIOMigrate.migrate(DigitalObject dob, URI inputFormat,\n            URI outputFormat, List<Parameter> parameters)", "testcase": false, "constructor": false, "invocations": ["getContent", "returnWithErrorMessage", "read", "getInputStream", "getContent", "returnWithErrorMessage", "loaded", "returnWithErrorMessage", "getExtensions", "isEmpty", "returnWithErrorMessage", "info", "next", "iterator", "getExtensions", "next", "iterator", "createTempFile", "write", "returnWithErrorMessage", "getPerformanceProperties", "build", "byReference"]}, "repository": {"repo_id": 1025030, "url": "https://github.com/opf-labs/planets-suite", "language": "Java", "is_fork": false, "fork_count": 5, "stargazer_count": 9, "size": 198462, "license": "licensed"}}