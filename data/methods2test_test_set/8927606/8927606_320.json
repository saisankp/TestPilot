{"test_class": {"identifier": "IsXmlIfPipeTest", "superclass": "extends PipeTestBase<IsXmlIfPipe>", "interfaces": "", "fields": [{"original_string": "@Mock\n\tprivate IPipeLineSession session;", "modifier": "@Mock\n\tprivate", "type": "IPipeLineSession", "declarator": "session", "var_name": "session"}, {"original_string": "String pipeForwardThen = \"then\";", "modifier": "", "type": "String", "declarator": "pipeForwardThen = \"then\"", "var_name": "pipeForwardThen"}, {"original_string": "String pipeForwardElse = \"else\";", "modifier": "", "type": "String", "declarator": "pipeForwardElse = \"else\"", "var_name": "pipeForwardElse"}], "file": "core/src/test/java/nl/nn/adapterframework/pipes/IsXmlIfPipeTest.java"}, "test_case": {"identifier": "validInputOnThenPipeTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void validInputOnThenPipeTest() throws PipeRunException, ConfigurationException, PipeStartException{\n\t\tpipe.configure();\n\t\tpipe.start();\n\n\t\tPipeRunResult prr  = doPipe(pipe, \"<test\", session);\n\t\tAssert.assertEquals(pipeForwardThen, prr.getPipeForward().getName());\n\t}", "signature": "void validInputOnThenPipeTest()", "full_signature": "@Test public void validInputOnThenPipeTest()", "class_method_signature": "IsXmlIfPipeTest.validInputOnThenPipeTest()", "testcase": true, "constructor": false, "invocations": ["configure", "start", "doPipe", "assertEquals", "getName", "getPipeForward"]}, "focal_class": {"identifier": "IsXmlIfPipe", "superclass": "extends AbstractPipe", "interfaces": "", "fields": [{"original_string": "private String thenForwardName = \"then\";", "modifier": "private", "type": "String", "declarator": "thenForwardName = \"then\"", "var_name": "thenForwardName"}, {"original_string": "private String elseForwardName = \"else\";", "modifier": "private", "type": "String", "declarator": "elseForwardName = \"else\"", "var_name": "elseForwardName"}, {"original_string": "private boolean elseForwardOnEmptyInput = true;", "modifier": "private", "type": "boolean", "declarator": "elseForwardOnEmptyInput = true", "var_name": "elseForwardOnEmptyInput"}], "methods": [{"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "IsXmlIfPipe.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "setThenForwardName", "parameters": "(String thenForwardName)", "modifiers": "@IbisDoc({\"forward returned when <code>'true'</code>\", \"then\"}) public", "return": "void", "signature": "void setThenForwardName(String thenForwardName)", "full_signature": "@IbisDoc({\"forward returned when <code>'true'</code>\", \"then\"}) public void setThenForwardName(String thenForwardName)", "class_method_signature": "IsXmlIfPipe.setThenForwardName(String thenForwardName)", "testcase": false, "constructor": false}, {"identifier": "getThenForwardName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getThenForwardName()", "full_signature": "public String getThenForwardName()", "class_method_signature": "IsXmlIfPipe.getThenForwardName()", "testcase": false, "constructor": false}, {"identifier": "setElseForwardName", "parameters": "(String elseForwardName)", "modifiers": "@IbisDoc({\"forward returned when 'false'\", \"else\"}) public", "return": "void", "signature": "void setElseForwardName(String elseForwardName)", "full_signature": "@IbisDoc({\"forward returned when 'false'\", \"else\"}) public void setElseForwardName(String elseForwardName)", "class_method_signature": "IsXmlIfPipe.setElseForwardName(String elseForwardName)", "testcase": false, "constructor": false}, {"identifier": "getElseForwardName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getElseForwardName()", "full_signature": "public String getElseForwardName()", "class_method_signature": "IsXmlIfPipe.getElseForwardName()", "testcase": false, "constructor": false}, {"identifier": "isElseForwardOnEmptyInput", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isElseForwardOnEmptyInput()", "full_signature": "public boolean isElseForwardOnEmptyInput()", "class_method_signature": "IsXmlIfPipe.isElseForwardOnEmptyInput()", "testcase": false, "constructor": false}, {"identifier": "setElseForwardOnEmptyInput", "parameters": "(boolean b)", "modifiers": "@IbisDoc({\"return elseforward when input is empty (or thenforward)\", \"true\"}) public", "return": "void", "signature": "void setElseForwardOnEmptyInput(boolean b)", "full_signature": "@IbisDoc({\"return elseforward when input is empty (or thenforward)\", \"true\"}) public void setElseForwardOnEmptyInput(boolean b)", "class_method_signature": "IsXmlIfPipe.setElseForwardOnEmptyInput(boolean b)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/pipes/IsXmlIfPipe.java"}, "focal_method": {"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "body": "@Override\n\tpublic PipeRunResult doPipe(Message message, IPipeLineSession session) throws PipeRunException {\n\t\tString forward = \"\";\n\t\tif (message==null) {\n\t\t\tif (isElseForwardOnEmptyInput()) {\n\t\t\t\tforward = elseForwardName;\n\t\t\t} else {\n\t\t\t\tforward = thenForwardName;\n\t\t\t}\n\t\t} else {\n\t\t\tString sInput;\n\t\t\ttry {\n\t\t\t\tsInput = message.asString();\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new PipeRunException(this, getLogPrefix(session)+\"cannot open stream\", e);\n\t\t\t}\n\t\t\tif (StringUtils.isEmpty(sInput)) {\n\t\t\t\tif (isElseForwardOnEmptyInput()) {\n\t\t\t\t\tforward = elseForwardName;\n\t\t\t\t} else {\n\t\t\t\t\tforward = thenForwardName;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tString firstChar = sInput.replaceAll(\"^\\\\s+\", \"\").substring(0, 1);\n\t\t\t\tif (firstChar.equals(\"<\")) {\n\t\t\t\t\tforward = thenForwardName;\n\t\t\t\t} else {\n\t\t\t\t\tforward = elseForwardName;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlog.debug(getLogPrefix(session) + \"determined forward [\" + forward\n\t\t\t\t+ \"]\");\n\n\t\tPipeForward pipeForward = findForward(forward);\n\n\t\tif (pipeForward == null) {\n\t\t\tthrow new PipeRunException(this, getLogPrefix(null)\n\t\t\t\t\t+ \"cannot find forward or pipe named [\" + forward + \"]\");\n\t\t}\n\t\tlog.debug(getLogPrefix(session) + \"resolved forward [\" + forward\n\t\t\t\t+ \"] to path [\" + pipeForward.getPath() + \"]\");\n\t\treturn new PipeRunResult(pipeForward, message);\n\t}", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "IsXmlIfPipe.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false, "invocations": ["isElseForwardOnEmptyInput", "asString", "getLogPrefix", "isEmpty", "isElseForwardOnEmptyInput", "substring", "replaceAll", "equals", "debug", "getLogPrefix", "findForward", "getLogPrefix", "debug", "getLogPrefix", "getPath"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}