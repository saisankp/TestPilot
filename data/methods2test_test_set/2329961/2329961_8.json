{"test_class": {"identifier": "SimpleArchiverTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final long MEGABYTE = 1024 * 1024;", "modifier": "private static final", "type": "long", "declarator": "MEGABYTE = 1024 * 1024", "var_name": "MEGABYTE"}, {"original_string": "@Rule\n    public TemporaryFolder temp = new TemporaryFolder();", "modifier": "@Rule\n    public", "type": "TemporaryFolder", "declarator": "temp = new TemporaryFolder()", "var_name": "temp"}], "file": "timber/src/test/java/org/cloudname/timber/server/handler/archiver/SimpleArchiverTest.java"}, "test_case": {"identifier": "testInitializationUnexist", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void testInitializationUnexist() throws Exception {\n        final String logPath = temp.newFolder(\"test2\").getAbsolutePath()\n            + File.separator\n            + \"unexist\";\n        final SimpleArchiver archiver = new SimpleArchiver(logPath, \"\", MEGABYTE);\n        archiver.init();\n    }", "signature": "void testInitializationUnexist()", "full_signature": "@Test public void testInitializationUnexist()", "class_method_signature": "SimpleArchiverTest.testInitializationUnexist()", "testcase": true, "constructor": false, "invocations": ["getAbsolutePath", "newFolder", "init"]}, "focal_class": {"identifier": "SimpleArchiver", "superclass": "", "interfaces": "implements LogEventHandler", "fields": [{"original_string": "private final Archiver archiver;", "modifier": "private final", "type": "Archiver", "declarator": "archiver", "var_name": "archiver"}], "methods": [{"identifier": "SimpleArchiver", "parameters": "(String logPath, String service, long maxFileSize)", "modifiers": "public", "return": "", "signature": " SimpleArchiver(String logPath, String service, long maxFileSize)", "full_signature": "public  SimpleArchiver(String logPath, String service, long maxFileSize)", "class_method_signature": "SimpleArchiver.SimpleArchiver(String logPath, String service, long maxFileSize)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void init()", "full_signature": "public void init()", "class_method_signature": "SimpleArchiver.init()", "testcase": false, "constructor": false}, {"identifier": "handle", "parameters": "(final Timber.LogEvent logEvent)", "modifiers": "@Override public", "return": "void", "signature": "void handle(final Timber.LogEvent logEvent)", "full_signature": "@Override public void handle(final Timber.LogEvent logEvent)", "class_method_signature": "SimpleArchiver.handle(final Timber.LogEvent logEvent)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void flush()", "full_signature": "@Override public void flush()", "class_method_signature": "SimpleArchiver.flush()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "SimpleArchiver.close()", "testcase": false, "constructor": false}, {"identifier": "getName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getName()", "full_signature": "@Override public String getName()", "class_method_signature": "SimpleArchiver.getName()", "testcase": false, "constructor": false}], "file": "timber/src/main/java/org/cloudname/timber/server/handler/archiver/SimpleArchiver.java"}, "focal_method": {"identifier": "init", "parameters": "()", "modifiers": "public", "return": "void", "body": "public void init() {\n        archiver.init();\n    }", "signature": "void init()", "full_signature": "public void init()", "class_method_signature": "SimpleArchiver.init()", "testcase": false, "constructor": false, "invocations": ["init"]}, "repository": {"repo_id": 2329961, "url": "https://github.com/Cloudname/cloudname", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 21, "size": 26031, "license": "licensed"}}