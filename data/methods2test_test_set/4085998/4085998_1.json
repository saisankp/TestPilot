{"test_class": {"identifier": "AuditParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String NS_FACILITY_ATTR_DEF= \"urn:perun:facility:attribute-def:def\";", "modifier": "private static final", "type": "String", "declarator": "NS_FACILITY_ATTR_DEF= \"urn:perun:facility:attribute-def:def\"", "var_name": "NS_FACILITY_ATTR_DEF"}, {"original_string": "private static final String NS_GROUP_RESOURCE_ATTR_DEF = \"urn:perun:group_resource:attribute-def:def\";", "modifier": "private static final", "type": "String", "declarator": "NS_GROUP_RESOURCE_ATTR_DEF = \"urn:perun:group_resource:attribute-def:def\"", "var_name": "NS_GROUP_RESOURCE_ATTR_DEF"}, {"original_string": "private final String textMismatch = \"!@#$%^<<&*()_+<\\\\><:{[}][]{>} sd\";", "modifier": "private final", "type": "String", "declarator": "textMismatch = \"!@#$%^<<&*()_+<\\\\><:{[}][]{>} sd\"", "var_name": "textMismatch"}, {"original_string": "private final String CLASS_NAME = \"AuditMessagesManagerEntry\";", "modifier": "private final", "type": "String", "declarator": "CLASS_NAME = \"AuditMessagesManagerEntry\"", "var_name": "CLASS_NAME"}, {"original_string": "private AuditMessage createdAuditMessage = new AuditMessage();", "modifier": "private", "type": "AuditMessage", "declarator": "createdAuditMessage = new AuditMessage()", "var_name": "createdAuditMessage"}, {"original_string": "private final User user = new User(5, textMismatch,textMismatch, textMismatch, textMismatch, textMismatch, false, false);", "modifier": "private final", "type": "User", "declarator": "user = new User(5, textMismatch,textMismatch, textMismatch, textMismatch, textMismatch, false, false)", "var_name": "user"}, {"original_string": "private final ExtSource extSource = new ExtSource(9, textMismatch, textMismatch);", "modifier": "private final", "type": "ExtSource", "declarator": "extSource = new ExtSource(9, textMismatch, textMismatch)", "var_name": "extSource"}, {"original_string": "private final UserExtSource userExtSource1 = new UserExtSource(12, extSource, textMismatch, user.getId(), 133);", "modifier": "private final", "type": "UserExtSource", "declarator": "userExtSource1 = new UserExtSource(12, extSource, textMismatch, user.getId(), 133)", "var_name": "userExtSource1"}, {"original_string": "private final UserExtSource userExtSource2 = new UserExtSource(15, extSource, textMismatch, -1, 156);", "modifier": "private final", "type": "UserExtSource", "declarator": "userExtSource2 = new UserExtSource(15, extSource, textMismatch, -1, 156)", "var_name": "userExtSource2"}, {"original_string": "private final Vo vo = new Vo(15, textMismatch, textMismatch);", "modifier": "private final", "type": "Vo", "declarator": "vo = new Vo(15, textMismatch, textMismatch)", "var_name": "vo"}, {"original_string": "private final Facility facility = new Facility(13, textMismatch);", "modifier": "private final", "type": "Facility", "declarator": "facility = new Facility(13, textMismatch)", "var_name": "facility"}, {"original_string": "private final Resource resource = new Resource(19, textMismatch, textMismatch, facility.getId(), vo.getId());", "modifier": "private final", "type": "Resource", "declarator": "resource = new Resource(19, textMismatch, textMismatch, facility.getId(), vo.getId())", "var_name": "resource"}, {"original_string": "private final Group group = new Group(35, textMismatch, textMismatch);", "modifier": "private final", "type": "Group", "declarator": "group = new Group(35, textMismatch, textMismatch)", "var_name": "group"}, {"original_string": "private Member member = new Member(13, user.getId(), vo.getId(), Status.VALID);", "modifier": "private", "type": "Member", "declarator": "member = new Member(13, user.getId(), vo.getId(), Status.VALID)", "var_name": "member"}, {"original_string": "private Candidate candidate;", "modifier": "private", "type": "Candidate", "declarator": "candidate", "var_name": "candidate"}, {"original_string": "private final Destination destination = new Destination(32, textMismatch, textMismatch);", "modifier": "private final", "type": "Destination", "declarator": "destination = new Destination(32, textMismatch, textMismatch)", "var_name": "destination"}, {"original_string": "private final Host host = new Host(32, textMismatch);", "modifier": "private final", "type": "Host", "declarator": "host = new Host(32, textMismatch)", "var_name": "host"}, {"original_string": "private final Owner owner = new Owner(39, textMismatch, textMismatch, OwnerType.administrative);", "modifier": "private final", "type": "Owner", "declarator": "owner = new Owner(39, textMismatch, textMismatch, OwnerType.administrative)", "var_name": "owner"}, {"original_string": "private final Owner owner1 = new Owner(12, null, textMismatch, null);", "modifier": "private final", "type": "Owner", "declarator": "owner1 = new Owner(12, null, textMismatch, null)", "var_name": "owner1"}, {"original_string": "private final Owner owner2 = new Owner(23, textMismatch, textMismatch, OwnerType.technical);", "modifier": "private final", "type": "Owner", "declarator": "owner2 = new Owner(23, textMismatch, textMismatch, OwnerType.technical)", "var_name": "owner2"}, {"original_string": "private final Service service = new Service(29, textMismatch, null);", "modifier": "private final", "type": "Service", "declarator": "service = new Service(29, textMismatch, null)", "var_name": "service"}, {"original_string": "private final AttributeDefinition attributeDefinition1 = new AttributeDefinition(getAttributeDefinition1());", "modifier": "private final", "type": "AttributeDefinition", "declarator": "attributeDefinition1 = new AttributeDefinition(getAttributeDefinition1())", "var_name": "attributeDefinition1"}, {"original_string": "private final Attribute attribute1 = new Attribute(attributeDefinition1);", "modifier": "private final", "type": "Attribute", "declarator": "attribute1 = new Attribute(attributeDefinition1)", "var_name": "attribute1"}, {"original_string": "private final AttributeDefinition attributeDefinition2 = new AttributeDefinition(getAttributeDefinition2());", "modifier": "private final", "type": "AttributeDefinition", "declarator": "attributeDefinition2 = new AttributeDefinition(getAttributeDefinition2())", "var_name": "attributeDefinition2"}, {"original_string": "private final Attribute attribute2 = new Attribute(attributeDefinition2);", "modifier": "private final", "type": "Attribute", "declarator": "attribute2 = new Attribute(attributeDefinition2)", "var_name": "attribute2"}, {"original_string": "private final AttributeDefinition attributeDefinition3 = new AttributeDefinition(getAttributeDefinition3());", "modifier": "private final", "type": "AttributeDefinition", "declarator": "attributeDefinition3 = new AttributeDefinition(getAttributeDefinition3())", "var_name": "attributeDefinition3"}, {"original_string": "private final Attribute attribute3 = new Attribute(attributeDefinition3);", "modifier": "private final", "type": "Attribute", "declarator": "attribute3 = new Attribute(attributeDefinition3)", "var_name": "attribute3"}, {"original_string": "private final AttributeDefinition attributeDefinition4 = new AttributeDefinition(getAttributeDefinition4());", "modifier": "private final", "type": "AttributeDefinition", "declarator": "attributeDefinition4 = new AttributeDefinition(getAttributeDefinition4())", "var_name": "attributeDefinition4"}, {"original_string": "private final Attribute attribute4 = new Attribute(attributeDefinition4);", "modifier": "private final", "type": "Attribute", "declarator": "attribute4 = new Attribute(attributeDefinition4)", "var_name": "attribute4"}, {"original_string": "private RichMember richMember;", "modifier": "private", "type": "RichMember", "declarator": "richMember", "var_name": "richMember"}, {"original_string": "private final RichDestination richDestination = new RichDestination(destination, facility, service);", "modifier": "private final", "type": "RichDestination", "declarator": "richDestination = new RichDestination(destination, facility, service)", "var_name": "richDestination"}, {"original_string": "private final RichResource richResource = new RichResource(resource);", "modifier": "private final", "type": "RichResource", "declarator": "richResource = new RichResource(resource)", "var_name": "richResource"}, {"original_string": "private RichUser richUser;", "modifier": "private", "type": "RichUser", "declarator": "richUser", "var_name": "richUser"}, {"original_string": "private RichGroup richGroup;", "modifier": "private", "type": "RichGroup", "declarator": "richGroup", "var_name": "richGroup"}, {"original_string": "private RichFacility richFacility;", "modifier": "private", "type": "RichFacility", "declarator": "richFacility", "var_name": "richFacility"}, {"original_string": "private ResourceTag resourceTag1 = new ResourceTag(5, \"cosi\" , 2);", "modifier": "private", "type": "ResourceTag", "declarator": "resourceTag1 = new ResourceTag(5, \"cosi\" , 2)", "var_name": "resourceTag1"}, {"original_string": "private ResourceTag resourceTag2 = new ResourceTag(8, null, 5);", "modifier": "private", "type": "ResourceTag", "declarator": "resourceTag2 = new ResourceTag(8, null, 5)", "var_name": "resourceTag2"}, {"original_string": "private SecurityTeam securityTeam1 = new SecurityTeam(1, \"jmeno\", \"popis\");", "modifier": "private", "type": "SecurityTeam", "declarator": "securityTeam1 = new SecurityTeam(1, \"jmeno\", \"popis\")", "var_name": "securityTeam1"}, {"original_string": "private SecurityTeam securityTeam2 = new SecurityTeam(2, null, null);", "modifier": "private", "type": "SecurityTeam", "declarator": "securityTeam2 = new SecurityTeam(2, null, null)", "var_name": "securityTeam2"}, {"original_string": "private TaskResult taskResult1 = new TaskResult();", "modifier": "private", "type": "TaskResult", "declarator": "taskResult1 = new TaskResult()", "var_name": "taskResult1"}, {"original_string": "private BanOnResource banOnResource1 = new BanOnResource(3, new Date(), \"neco\" , 10, 12);", "modifier": "private", "type": "BanOnResource", "declarator": "banOnResource1 = new BanOnResource(3, new Date(), \"neco\" , 10, 12)", "var_name": "banOnResource1"}, {"original_string": "private BanOnResource banOnResource2 = new BanOnResource(4, null, null, 10, 12);", "modifier": "private", "type": "BanOnResource", "declarator": "banOnResource2 = new BanOnResource(4, null, null, 10, 12)", "var_name": "banOnResource2"}, {"original_string": "private BanOnFacility banOnFacility1 = new BanOnFacility(5, new Date(), \"neco\", 10, 12);", "modifier": "private", "type": "BanOnFacility", "declarator": "banOnFacility1 = new BanOnFacility(5, new Date(), \"neco\", 10, 12)", "var_name": "banOnFacility1"}, {"original_string": "private BanOnFacility banOnFacility2 = new BanOnFacility(6, null, null, 10, 12);", "modifier": "private", "type": "BanOnFacility", "declarator": "banOnFacility2 = new BanOnFacility(6, null, null, 10, 12)", "var_name": "banOnFacility2"}], "file": "perun-auditparser/src/test/java/cz/metacentrum/perun/auditparser/AuditParserTest.java"}, "test_case": {"identifier": "sameObjectBeforeAndAfterSerializing", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void sameObjectBeforeAndAfterSerializing() throws Exception {\n\t\tSystem.out.println(CLASS_NAME + \":sameObjectBeforeAndAfterSerializing\");\n\n\t\t//FOR USER\n\t\tUser user = new User(8, null, textMismatch, null, textMismatch, null, true, true);\n\t\tuser.setUuid(UUID.randomUUID());\n\n\t\tList<PerunBean> userInList = AuditParser.parseLog(user.serializeToString());\n\t\tassertEquals(user.toString(), ((User) userInList.get(0)).toString());\n\t\tassertEquals(user.getFirstName(), ((User) userInList.get(0)).getFirstName());\n\t\tassertEquals(user.getUuid(), ((User) userInList.get(0)).getUuid());\n\n\t\t//FOR EXTSOURCE\n\t\tExtSource extSource = new ExtSource(11, null, textMismatch);\n\t\tList<PerunBean> extSourceInList = AuditParser.parseLog(extSource.serializeToString());\n\t\tassertEquals(extSource.toString(), ((ExtSource) extSourceInList.get(0)).toString());\n\t\tassertEquals(extSource.getName(), ((ExtSource) extSourceInList.get(0)).getName());\n\n\t\t//FOR USEREXTSOURCE\n\t\tUserExtSource userExtSource1 = new UserExtSource(15, extSource, null , 8, 15);\n\t\tUserExtSource userExtSource2 = new UserExtSource(15, null, textMismatch, 8, 15);\n\t\tList<PerunBean> userExtSource1InList = AuditParser.parseLog(userExtSource1.serializeToString());\n\t\tList<PerunBean> userExtSource2InList = AuditParser.parseLog(userExtSource2.serializeToString());\n\t\tassertEquals(userExtSource1.toString(), ((UserExtSource) userExtSource1InList.get(0)).toString());\n\t\tassertEquals(userExtSource2.toString(), ((UserExtSource) userExtSource2InList.get(0)).toString());\n\t\tassertEquals(userExtSource1.getLogin(), ((UserExtSource) userExtSource1InList.get(0)).getLogin());\n\t\tassertEquals(userExtSource2.getExtSource(), ((UserExtSource) userExtSource2InList.get(0)).getExtSource());\n\n\t\t//FOR VO (VO MUST HAVE ALL ATTRIBUTE NOT NULL)\n\t\tVo vo = new Vo(18, textMismatch, textMismatch);\n\t\tList<PerunBean> voInList = AuditParser.parseLog(vo.serializeToString());\n\t\tassertEquals(vo.toString(), ((Vo) voInList.get(0)).toString());\n\t\tassertEquals(vo.getName(), ((Vo) voInList.get(0)).getName());\n\n\t\t//FOR FACILITY\n\t\tFacility facility = new Facility(15, null);\n\t\tList<PerunBean> facilityInList = AuditParser.parseLog(facility.serializeToString());\n\t\tassertEquals(facility.toString(), ((Facility) facilityInList.get(0)).toString());\n\t\tassertEquals(facility.getName(), ((Facility) facility).getName());\n\n\t\t//FOR RESOURCE\n\t\tResource resource = new Resource(15, textMismatch, null, 10, 10);\n\t\tresource.setUuid(UUID.randomUUID());\n\t\tList<PerunBean> resourceInList = AuditParser.parseLog(resource.serializeToString());\n\t\tassertEquals(resource.toString(), ((Resource) resourceInList.get(0)).toString());\n\t\tassertEquals(resource.getDescription(), ((Resource) resourceInList.get(0)).getDescription());\n\t\tassertEquals(resource.getUuid(), ((Resource) resourceInList.get(0)).getUuid());\n\n\t\t//FOR GROUP\n\t\tGroup group = new Group(textMismatch, null);\n\t\tgroup.setId(15);\n\t\tgroup.setUuid(UUID.randomUUID());\n\t\tgroup.setParentGroupId(320);\n\t\tGroup group2 = new Group(textMismatch, null);\n\t\tgroup2.setId(36);\n\t\tgroup2.setParentGroupId(null);\n\t\tList<PerunBean> groupInList = AuditParser.parseLog(group.serializeToString());\n\t\tList<PerunBean> groupInList2 = AuditParser.parseLog(group2.serializeToString());\n\t\tassertEquals(group.toString(), ((Group) groupInList.get(0)).toString());\n\t\tassertEquals(group.getDescription(), ((Group) groupInList.get(0)).getDescription());\n\t\tassertEquals(group.getUuid(), ((Group) groupInList.get(0)).getUuid());\n\t\tassertEquals(group2.toString(), ((Group) groupInList2.get(0)).toString());\n\t\tassertEquals(group2.getParentGroupId(), ((Group) groupInList2.get(0)).getParentGroupId());\n\n\t\t//FOR RESOURCE TAG\n\t\tList<PerunBean> resourceTagInList1 = AuditParser.parseLog(resourceTag1.serializeToString());\n\t\tList<PerunBean> resourceTagInList2 = AuditParser.parseLog(resourceTag2.serializeToString());\n\t\tassertEquals(resourceTag1.toString(), ((ResourceTag) resourceTagInList1.get(0)).toString());\n\t\tassertEquals(resourceTag1.getTagName(), ((ResourceTag) resourceTagInList1.get(0)).getTagName());\n\t\tassertEquals(resourceTag2.toString(), ((ResourceTag) resourceTagInList2.get(0)).toString());\n\t\tassertEquals(resourceTag2.getTagName(), ((ResourceTag) resourceTagInList2.get(0)).getTagName());\n\n\t\t//FOR MEMBER\n\t\tMember member = new Member(6, 8, 8, null);\n\t\tmember.setSourceGroupId(null);\n\t\tList<PerunBean> memberInList = AuditParser.parseLog(member.serializeToString());\n\t\tassertEquals(member.toString(), ((Member) memberInList.get(0)).toString());\n\t\tassertEquals(member.getStatus(), ((Member) memberInList.get(0)).getStatus());\n\n\t\t//FOR DESTINATION\n\t\tDestination destination = new Destination(7, null, textMismatch);\n\t\tList<PerunBean> destinationInList = AuditParser.parseLog(destination.serializeToString());\n\t\tassertEquals(destination.toString(), ((Destination) destinationInList.get(0)).toString());\n\t\tassertEquals(destination.getDestination(), ((Destination) destinationInList.get(0)).getDestination());\n\n\t\t//FOR HOST\n\t\tHost host = new Host(5, null);\n\t\tList<PerunBean> hostInList = AuditParser.parseLog(host.serializeToString());\n\t\tassertEquals(host.toString(), ((Host) hostInList.get(0)).toString());\n\t\tassertEquals(host.getHostname(), ((Host) hostInList.get(0)).getHostname());\n\n\t\t//FOR OWNER\n\t\tOwner owner = new Owner(5, null, textMismatch, OwnerType.administrative);\n\t\tList<PerunBean> ownerInList = AuditParser.parseLog(owner.serializeToString());\n\t\tassertEquals(owner.toString(), ((Owner) ownerInList.get(0)).toString());\n\t\tassertEquals(owner.getName(), ((Owner) ownerInList.get(0)).getName());\n\n\t\t//FOR SERVICE\n\t\tService service = new Service(8, null, null);\n\t\tList<PerunBean> serviceInList = AuditParser.parseLog(service.serializeToString());\n\t\tassertEquals(service.toString(), ((Service) serviceInList.get(0)).toString());\n\t\tassertEquals(service.getName(), ((Service) serviceInList.get(0)).getName());\n\t\tassertEquals(service.getDescription(), ((Service) serviceInList.get(0)).getDescription());\n\t\tassertEquals(service.getDelay(), ((Service) serviceInList.get(0)).getDelay());\n\t\tassertEquals(service.getRecurrence(), ((Service) serviceInList.get(0)).getRecurrence());\n\t\tassertEquals(service.isEnabled(), ((Service) serviceInList.get(0)).isEnabled());\n\t\tassertEquals(service.getScript(), ((Service) serviceInList.get(0)).getScript());\n\n\t\t//FOR ATTRIBUTE DEFINITION\n\t\tAttributeDefinition attributeDefinition1 = new AttributeDefinition(getAttributeDefinition1());\n\t\tAttributeDefinition attributeDefinition2 = new AttributeDefinition(getAttributeDefinition2());\n\t\tAttributeDefinition attributeDefinition3 = new AttributeDefinition(getAttributeDefinition3());\n\t\tAttributeDefinition attributeDefinition4 = new AttributeDefinition(getAttributeDefinition4());\n\t\tattributeDefinition1.setType(null);\n\t\tattributeDefinition1.setDescription(null);\n\t\tattributeDefinition1.setFriendlyName(null);\n\t\tattributeDefinition1.setNamespace(null);\n\t\tList<PerunBean> attributeDefinition1InList = AuditParser.parseLog(attributeDefinition1.serializeToString());\n\t\tassertEquals(attributeDefinition1.toString(), ((AttributeDefinition) attributeDefinition1InList.get(0)).toString());\n\t\tassertEquals(attributeDefinition1.getNamespace(), ((AttributeDefinition) attributeDefinition1InList.get(0)).getNamespace());\n\n\t\t//FOR ATTRIBUTE\n\t\tAttribute attribute1 = new Attribute(getAttributeDefinition1());\n\t\tAttribute attribute2 = new Attribute(getAttributeDefinition2());\n\t\tAttribute attribute3 = new Attribute(getAttributeDefinition3());\n\t\tAttribute attribute4 = new Attribute(getAttributeDefinition4());\n\t\tAttribute attribute5 = new Attribute(getAttributeDefinition3());\n\t\tAttribute attribute6 = new Attribute(getAttributeDefinition4());\n\t\tattribute5.setValue(null);\n\t\tattribute6.setValue(null);\n\t\tattribute1.setValue(null);\n\t\tattribute2.setValue(null);\n\t\tattribute3.setValue(new ArrayList<String>(Arrays.asList(new String[] {\"a\", null, null})));\n\t\tMap<String, String> map = new LinkedHashMap<String, String>();\n\t\tmap.put(\"a\", null);\n\t\tmap.put(null, \"d\");\n\t\tattribute4.setValue(map);\n\t\tList<PerunBean> attribute1InList = AuditParser.parseLog(attribute1.serializeToString());\n\t\tList<PerunBean> attribute2InList = AuditParser.parseLog(attribute2.serializeToString());\n\t\tList<PerunBean> attribute3InList = AuditParser.parseLog(attribute3.serializeToString());\n\t\tList<PerunBean> attribute4InList = AuditParser.parseLog(attribute4.serializeToString());\n\t\tList<PerunBean> attribute5InList = AuditParser.parseLog(attribute5.serializeToString());\n\t\tList<PerunBean> attribute6InList = AuditParser.parseLog(attribute6.serializeToString());\n\t\tassertEquals(attribute1.toString(), ((Attribute) attribute1InList.get(0)).toString());\n\t\tassertEquals(attribute2.toString(), ((Attribute) attribute2InList.get(0)).toString());\n\t\tassertEquals(attribute3.toString(), ((Attribute) attribute3InList.get(0)).toString());\n\t\tassertEquals(attribute4.toString(), ((Attribute) attribute4InList.get(0)).toString());\n\t\tassertEquals(attribute5.toString(), ((Attribute) attribute5InList.get(0)).toString());\n\t\tassertEquals(attribute6.toString(), ((Attribute) attribute6InList.get(0)).toString());\n\t\tassertEquals(attribute3.getValue(), ((Attribute) attribute3InList.get(0)).getValue());\n\t\tassertEquals(attribute4.getValue(), ((Attribute) attribute4InList.get(0)).getValue());\n\t\tassertEquals(attribute5.getValue(), ((Attribute) attribute5InList.get(0)).getValue());\n\t\tassertEquals(attribute6.getValue(), ((Attribute) attribute6InList.get(0)).getValue());\n\n\t\t//FOR CANDIDATE\n\t\tMap<String, String> attributesMap1 = new HashMap<String, String>();\n\t\tattributesMap1.put(\"test1\", null);\n\t\tattributesMap1.put(null, null);\n\t\tCandidate candidate1 = new Candidate(userExtSource1, attributesMap1);\n\t\tCandidate candidate2 = new Candidate();\n\t\tcandidate2.setUserExtSource(null);\n\t\tcandidate2.setAttributes(null);\n\t\tcandidate1.setId(5);\n\t\tcandidate2.setId(6);\n\t\tcandidate1.setAdditionalUserExtSources(null);\n\t\tList<UserExtSource> userExtSources = new ArrayList<UserExtSource>();\n\t\tuserExtSources.add(userExtSource1);\n\t\tuserExtSources.add(userExtSource2);\n\t\tcandidate2.setAdditionalUserExtSources(userExtSources);\n\t\tList<PerunBean> candidate1InList = AuditParser.parseLog(candidate1.serializeToString());\n\t\tList<PerunBean> candidate2InList = AuditParser.parseLog(candidate2.serializeToString());\n\t\tassertEquals(candidate1.toString(), ((Candidate) candidate1InList.get(0)).toString());\n\t\tassertEquals(candidate2.toString(), ((Candidate) candidate2InList.get(0)).toString());\n\t\tassertEquals(candidate1.getAttributes(), ((Candidate) candidate1InList.get(0)).getAttributes());\n\t\tassertEquals(candidate2.getAttributes(), ((Candidate) candidate2InList.get(0)).getAttributes());\n\n\t\t//FOR SECURITY TEAM\n\t\tSecurityTeam securityTeam = new SecurityTeam(18, textMismatch, textMismatch);\n\t\tList<PerunBean> scsInList = AuditParser.parseLog(securityTeam.serializeToString());\n\t\tassertEquals(securityTeam.toString(), ((SecurityTeam) scsInList.get(0)).toString());\n\t\tassertEquals(securityTeam.getName(), ((SecurityTeam) scsInList.get(0)).getName());\n\t\tassertEquals(securityTeam.getDescription(), ((SecurityTeam) scsInList.get(0)).getDescription());\n\n\t\t//FOR TASK RESULT\n\t\tList<PerunBean> trList = AuditParser.parseLog(taskResult1.serializeToString());\n\t\tTaskResult taskResult2 = (TaskResult)trList.get(0);\n\t\tassertEquals(taskResult1.toString(), taskResult2.toString());\n\n\n\t\t//FOR BAN ON RESOURCE\n\t\tList<PerunBean> banOnResourceInList = AuditParser.parseLog(banOnResource1.serializeToString());\n\t\tassertEquals(banOnResource1.toString(), ((BanOnResource) banOnResourceInList.get(0)).toString());\n\t\tassertEquals(banOnResource1.getMemberId(), ((BanOnResource) banOnResourceInList.get(0)).getMemberId());\n\t\tassertEquals(banOnResource1.getResourceId(), ((BanOnResource) banOnResourceInList.get(0)).getResourceId());\n\t\tassertEquals(banOnResource1.getDescription(), ((BanOnResource) banOnResourceInList.get(0)).getDescription());\n\t\tassertEquals(banOnResource1.getValidityTo(), ((BanOnResource) banOnResourceInList.get(0)).getValidityTo());\n\n\t\t//FOR BAN ON FACILITY\n\t\tList<PerunBean> banOnFacilityInList = AuditParser.parseLog(banOnFacility1.serializeToString());\n\t\tassertEquals(banOnFacility1.toString(), ((BanOnFacility) banOnFacilityInList.get(0)).toString());\n\t\tassertEquals(banOnFacility1.getUserId(), ((BanOnFacility) banOnFacilityInList.get(0)).getUserId());\n\t\tassertEquals(banOnFacility1.getFacilityId(), ((BanOnFacility) banOnFacilityInList.get(0)).getFacilityId());\n\t\tassertEquals(banOnFacility1.getDescription(), ((BanOnFacility) banOnFacilityInList.get(0)).getDescription());\n\t\tassertEquals(banOnFacility1.getValidityTo(), ((BanOnFacility) banOnFacilityInList.get(0)).getValidityTo());\n\n\t\t//FOR RICHMEMBER\n\t\tRichMember richMember1 = new RichMember(null, member, null);\n\t\t//List<UserExtSource> userExtSources = new ArrayList<UserExtSource>();\n\t\t//userExtSources.add(userExtSource1);\n\t\t//userExtSources.add(null);\n\t\t//userExtSources.add(userExtSource2);\n\t\t//RichMember richMember2 = new RichMember(null, member, userExtSources);\n\t\tList<Attribute> listOfAttributes = new ArrayList<Attribute>();\n\t\tlistOfAttributes.add(attribute1);\n\t\tlistOfAttributes.add(attribute2);\n\t\tlistOfAttributes.add(attribute3);\n\t\tlistOfAttributes.add(attribute4);\n\t\tlistOfAttributes.add(attribute5);\n\t\t//TODO: Same problem like with userExtSources, what about null between attributes? Not Supported Now!\n\t\t//listOfAttributes.add(null);\n\t\tlistOfAttributes.add(attribute6);\n\t\tRichMember richMember3 = new RichMember(null, member, null, listOfAttributes, listOfAttributes);\n\t\tList<PerunBean> richMember1InList = AuditParser.parseLog(richMember1.serializeToString());\n\n\t\t//TODO: What about null pointers between userExtSources? Not Supported yet\n\n\t\t//List<PerunBean> richMember2InList = AuditParser.parseLog(richMember2.serializeToString());\n\t\tList<PerunBean> richMember3InList = AuditParser.parseLog(richMember3.serializeToString());\n\t\tassertEquals(richMember1.toString(), ((RichMember) richMember1InList.get(0)).toString());\n\t\tassertEquals(richMember1.isSponsored(), ((RichMember) richMember1InList.get(0)).isSponsored());\n\t\t//assertEquals(richMember2, ((RichMember) richMember2InList.get(0)));\n\t\tassertEquals(richMember3.toString(), ((RichMember) richMember3InList.get(0)).toString());\n\t\tassertEquals(richMember3.isSponsored(), ((RichMember) richMember3InList.get(0)).isSponsored());\n\t\tassertEquals(richMember1.getUser(), ((RichMember) richMember1InList.get(0)).getUser());\n\t\tassertEquals(richMember1.getUserExtSources(), ((RichMember) richMember1InList.get(0)).getUserExtSources());\n\n\t\t//FOR RICHUSER\n\t\tRichUser richUser1 = new RichUser(user, null, null);\n\t\trichUser1.setUuid(UUID.randomUUID());\n\t\tRichUser richUser2 = new RichUser(user, null, listOfAttributes);\n\t\tList<PerunBean> richUserInList = AuditParser.parseLog(richUser.serializeToString());\n\t\tList<PerunBean> richUser1InList = AuditParser.parseLog(richUser1.serializeToString());\n\t\tList<PerunBean> richUser2InList = AuditParser.parseLog(richUser2.serializeToString());\n\t\tassertEquals(richUser.toString(), ((RichUser) richUserInList.get(0)).toString());\n\t\tassertEquals(richUser1.toString(), ((RichUser) richUser1InList.get(0)).toString());\n\t\tassertEquals(richUser1.getUuid(), ((RichUser) richUser1InList.get(0)).getUuid());\n\t\tassertEquals(richUser2.toString(), ((RichUser) richUser2InList.get(0)).toString());\n\n\t\t//FOR RICHGROUP\n\t\tRichGroup richGroup1 = new RichGroup(group, null);\n\t\trichGroup1.setUuid(UUID.randomUUID());\n\t\tList<PerunBean> richGroupInList = AuditParser.parseLog(richGroup.serializeToString());\n\t\tList<PerunBean> richGroup1InList = AuditParser.parseLog(richGroup1.serializeToString());\n\t\tassertEquals(richGroup.toString(), ((RichGroup) richGroupInList.get(0)).toString());\n\t\tassertEquals(richGroup1.toString(), ((RichGroup) richGroup1InList.get(0)).toString());\n\t\tassertEquals(richGroup1.getUuid(), ((RichGroup) richGroup1InList.get(0)).getUuid());\n\n\t\t//FOR RICHFACILITY\n\t\tRichFacility richFacility1 = new RichFacility(facility, null);\n\t\tList<Owner> owners = new ArrayList<Owner>();\n\t\towners.add(owner);\n\t\towners.add(owner1);\n\t\towners.add(owner2);\n\t\tRichFacility richFacility2 = new RichFacility(facility, owners);\n\t\tList<PerunBean> richFacility1InList = AuditParser.parseLog(richFacility1.serializeToString());\n\t\tList<PerunBean> richFacility2InList = AuditParser.parseLog(richFacility2.serializeToString());\n\t\tassertEquals(richFacility1.toString(), ((RichFacility) richFacility1InList.get(0)).toString());\n\t\tassertEquals(richFacility2.toString(), ((RichFacility) richFacility2InList.get(0)).toString());\n\n\t\t//FOR RICHRESOURCE\n\t\tRichResource richResource = new RichResource(resource);\n\t\trichResource.setFacility(null);\n\t\trichResource.setVo(null);\n\t\trichResource.addResourceTag(resourceTag1);\n\t\trichResource.setUuid(UUID.randomUUID());\n\t\tList<PerunBean> richResourceInList = AuditParser.parseLog(richResource.serializeToString());\n\t\tassertEquals(richResource.toString(), ((RichResource) richResourceInList.get(0)).toString());\n\t\tassertEquals(richResource.getFacility(), ((RichResource) richResourceInList.get(0)).getFacility());\n\t\tassertEquals(richResource.getUuid(), ((RichResource) richResourceInList.get(0)).getUuid());\n\n\t\t//FOR RICHDESTINATION\n\t\tRichDestination richDestination = new RichDestination(destination, null, null);\n\t\tList<PerunBean> richDestinationInList = AuditParser.parseLog(richDestination.serializeToString());\n\t\tassertEquals(richDestination.toString(), ((RichDestination) richDestinationInList.get(0)).toString());\n\t\tassertEquals(richDestination.getFacility(), ((RichDestination) richDestinationInList.get(0)).getFacility());\n\n\t\t//FOR AUTHORSHIP\n\t\tAuthorship authorship1 = new Authorship();\n\t\tauthorship1.setId(1);\n\t\tauthorship1.setPublicationId(3);\n\t\tauthorship1.setUserId(18);\n\t\tauthorship1.setCreatedBy(textMismatch);\n\t\tauthorship1.setCreatedDate(new Date());\n\t\tauthorship1.setCreatedByUid(10);\n\t\tAuthorship authorship2 = new Authorship();\n\t\tauthorship2.setId(1);\n\t\tauthorship2.setPublicationId(3);\n\t\tauthorship2.setUserId(18);\n\t\tauthorship2.setCreatedBy(null);\n\t\tauthorship2.setCreatedDate(null);\n\t\tauthorship2.setCreatedByUid(0);\n\t\tList<PerunBean> authorship1InList = AuditParser.parseLog(authorship1.serializeToString());\n\t\tList<PerunBean> authorship2InList = AuditParser.parseLog(authorship2.serializeToString());\n\t\tassertEquals(authorship1.toString(), ((Authorship) authorship1InList.get(0)).toString());\n\t\tassertEquals(authorship2.toString(), ((Authorship) authorship2InList.get(0)).toString());\n\n\t}", "signature": "void sameObjectBeforeAndAfterSerializing()", "full_signature": "@Test public void sameObjectBeforeAndAfterSerializing()", "class_method_signature": "AuditParserTest.sameObjectBeforeAndAfterSerializing()", "testcase": true, "constructor": false, "invocations": ["println", "setUuid", "randomUUID", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "getFirstName", "getFirstName", "get", "assertEquals", "getUuid", "getUuid", "get", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "getName", "getName", "get", "parseLog", "serializeToString", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "toString", "toString", "get", "assertEquals", "getLogin", "getLogin", "get", "assertEquals", "getExtSource", "getExtSource", "get", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "getName", "getName", "get", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "getName", "getName", "setUuid", "randomUUID", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "getDescription", "getDescription", "get", "assertEquals", "getUuid", "getUuid", "get", "setId", "setUuid", "randomUUID", "setParentGroupId", "setId", "setParentGroupId", "parseLog", "serializeToString", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "getDescription", "getDescription", "get", "assertEquals", "getUuid", "getUuid", "get", "assertEquals", "toString", "toString", "get", "assertEquals", "getParentGroupId", "getParentGroupId", "get", "parseLog", "serializeToString", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "getTagName", "getTagName", "get", "assertEquals", "toString", "toString", "get", "assertEquals", "getTagName", "getTagName", "get", "setSourceGroupId", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "getStatus", "getStatus", "get", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "getDestination", "getDestination", "get", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "getHostname", "getHostname", "get", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "getName", "getName", "get", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "getName", "getName", "get", "assertEquals", "getDescription", "getDescription", "get", "assertEquals", "getDelay", "getDelay", "get", "assertEquals", "getRecurrence", "getRecurrence", "get", "assertEquals", "isEnabled", "isEnabled", "get", "assertEquals", "getScript", "getScript", "get", "getAttributeDefinition1", "getAttributeDefinition2", "getAttributeDefinition3", "getAttributeDefinition4", "setType", "setDescription", "setFriendlyName", "setNamespace", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "getNamespace", "getNamespace", "get", "getAttributeDefinition1", "getAttributeDefinition2", "getAttributeDefinition3", "getAttributeDefinition4", "getAttributeDefinition3", "getAttributeDefinition4", "setValue", "setValue", "setValue", "setValue", "setValue", "asList", "put", "put", "setValue", "parseLog", "serializeToString", "parseLog", "serializeToString", "parseLog", "serializeToString", "parseLog", "serializeToString", "parseLog", "serializeToString", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "toString", "toString", "get", "assertEquals", "toString", "toString", "get", "assertEquals", "toString", "toString", "get", "assertEquals", "toString", "toString", "get", "assertEquals", "toString", "toString", "get", "assertEquals", "getValue", "getValue", "get", "assertEquals", "getValue", "getValue", "get", "assertEquals", "getValue", "getValue", "get", "assertEquals", "getValue", "getValue", "get", "put", "put", "setUserExtSource", "setAttributes", "setId", "setId", "setAdditionalUserExtSources", "add", "add", "setAdditionalUserExtSources", "parseLog", "serializeToString", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "toString", "toString", "get", "assertEquals", "getAttributes", "getAttributes", "get", "assertEquals", "getAttributes", "getAttributes", "get", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "getName", "getName", "get", "assertEquals", "getDescription", "getDescription", "get", "parseLog", "serializeToString", "get", "assertEquals", "toString", "toString", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "getMemberId", "getMemberId", "get", "assertEquals", "getResourceId", "getResourceId", "get", "assertEquals", "getDescription", "getDescription", "get", "assertEquals", "getValidityTo", "getValidityTo", "get", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "getUserId", "getUserId", "get", "assertEquals", "getFacilityId", "getFacilityId", "get", "assertEquals", "getDescription", "getDescription", "get", "assertEquals", "getValidityTo", "getValidityTo", "get", "add", "add", "add", "add", "add", "add", "parseLog", "serializeToString", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "isSponsored", "isSponsored", "get", "assertEquals", "toString", "toString", "get", "assertEquals", "isSponsored", "isSponsored", "get", "assertEquals", "getUser", "getUser", "get", "assertEquals", "getUserExtSources", "getUserExtSources", "get", "setUuid", "randomUUID", "parseLog", "serializeToString", "parseLog", "serializeToString", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "toString", "toString", "get", "assertEquals", "getUuid", "getUuid", "get", "assertEquals", "toString", "toString", "get", "setUuid", "randomUUID", "parseLog", "serializeToString", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "toString", "toString", "get", "assertEquals", "getUuid", "getUuid", "get", "add", "add", "add", "parseLog", "serializeToString", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "toString", "toString", "get", "setFacility", "setVo", "addResourceTag", "setUuid", "randomUUID", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "getFacility", "getFacility", "get", "assertEquals", "getUuid", "getUuid", "get", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "getFacility", "getFacility", "get", "setId", "setPublicationId", "setUserId", "setCreatedBy", "setCreatedDate", "setCreatedByUid", "setId", "setPublicationId", "setUserId", "setCreatedBy", "setCreatedDate", "setCreatedByUid", "parseLog", "serializeToString", "parseLog", "serializeToString", "assertEquals", "toString", "toString", "get", "assertEquals", "toString", "toString", "get"]}, "focal_class": {"identifier": "AuditParser", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static Logger loger = LoggerFactory.getLogger(AuditParser.class);", "modifier": "private final static", "type": "Logger", "declarator": "loger = LoggerFactory.getLogger(AuditParser.class)", "var_name": "loger"}, {"original_string": "static final Pattern perunBeanStartPattern = Pattern.compile(\"\\\\w+:\\\\[\");", "modifier": "static final", "type": "Pattern", "declarator": "perunBeanStartPattern = Pattern.compile(\"\\\\w+:\\\\[\")", "var_name": "perunBeanStartPattern"}, {"original_string": "static final Pattern pointyAndSquareBracket = Pattern.compile(\".\\\\[|.\\\\]|[^\\\\\\\\](\\\\\\\\\\\\\\\\)*(<|>)\");", "modifier": "static final", "type": "Pattern", "declarator": "pointyAndSquareBracket = Pattern.compile(\".\\\\[|.\\\\]|[^\\\\\\\\](\\\\\\\\\\\\\\\\)*(<|>)\")", "var_name": "pointyAndSquareBracket"}], "methods": [{"identifier": "parseLog", "parameters": "(String log)", "modifiers": "public static", "return": "List<PerunBean>", "signature": "List<PerunBean> parseLog(String log)", "full_signature": "public static List<PerunBean> parseLog(String log)", "class_method_signature": "AuditParser.parseLog(String log)", "testcase": false, "constructor": false}, {"identifier": "beansToMap", "parameters": "(String log)", "modifiers": "private static", "return": "List<Pair<String, Map<String, String>>>", "signature": "List<Pair<String, Map<String, String>>> beansToMap(String log)", "full_signature": "private static List<Pair<String, Map<String, String>>> beansToMap(String log)", "class_method_signature": "AuditParser.beansToMap(String log)", "testcase": false, "constructor": false}, {"identifier": "parseOfLog", "parameters": "(String log)", "modifiers": "private static", "return": "List<String>", "signature": "List<String> parseOfLog(String log)", "full_signature": "private static List<String> parseOfLog(String log)", "class_method_signature": "AuditParser.parseOfLog(String log)", "testcase": false, "constructor": false}, {"identifier": "CutStartOfLog", "parameters": "(String log)", "modifiers": "private static", "return": "String", "signature": "String CutStartOfLog(String log)", "full_signature": "private static String CutStartOfLog(String log)", "class_method_signature": "AuditParser.CutStartOfLog(String log)", "testcase": false, "constructor": false}, {"identifier": "createUser", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "User", "signature": "User createUser(Map<String, String> beanAttr)", "full_signature": "private static User createUser(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createUser(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createAttribute", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Attribute", "signature": "Attribute createAttribute(Map<String, String> beanAttr)", "full_signature": "private static Attribute createAttribute(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createAttribute(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createAttributeDefinition", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "AttributeDefinition", "signature": "AttributeDefinition createAttributeDefinition(Map<String, String> beanAttr)", "full_signature": "private static AttributeDefinition createAttributeDefinition(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createAttributeDefinition(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createCandidate", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Candidate", "signature": "Candidate createCandidate(Map<String, String> beanAttr)", "full_signature": "private static Candidate createCandidate(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createCandidate(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createDestination", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Destination", "signature": "Destination createDestination(Map<String, String> beanAttr)", "full_signature": "private static Destination createDestination(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createDestination(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createExtSource", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "ExtSource", "signature": "ExtSource createExtSource(Map<String, String> beanAttr)", "full_signature": "private static ExtSource createExtSource(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createExtSource(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createFacility", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Facility", "signature": "Facility createFacility(Map<String, String> beanAttr)", "full_signature": "private static Facility createFacility(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createFacility(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createGroup", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Group", "signature": "Group createGroup(Map<String, String> beanAttr)", "full_signature": "private static Group createGroup(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createGroup(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createHost", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Host", "signature": "Host createHost(Map<String, String> beanAttr)", "full_signature": "private static Host createHost(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createHost(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createMember", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Member", "signature": "Member createMember(Map<String, String> beanAttr)", "full_signature": "private static Member createMember(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createMember(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createOwner", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Owner", "signature": "Owner createOwner(Map<String, String> beanAttr)", "full_signature": "private static Owner createOwner(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createOwner(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createResource", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Resource", "signature": "Resource createResource(Map<String, String> beanAttr)", "full_signature": "private static Resource createResource(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createResource(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createService", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Service", "signature": "Service createService(Map<String, String> beanAttr)", "full_signature": "private static Service createService(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createService(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createUserExtSource", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "UserExtSource", "signature": "UserExtSource createUserExtSource(Map<String, String> beanAttr)", "full_signature": "private static UserExtSource createUserExtSource(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createUserExtSource(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createVo", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Vo", "signature": "Vo createVo(Map<String, String> beanAttr)", "full_signature": "private static Vo createVo(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createVo(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createAuthorship", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Authorship", "signature": "Authorship createAuthorship(Map<String, String> beanAttr)", "full_signature": "private static Authorship createAuthorship(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createAuthorship(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createResourceTag", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "ResourceTag", "signature": "ResourceTag createResourceTag(Map<String, String> beanAttr)", "full_signature": "private static ResourceTag createResourceTag(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createResourceTag(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createSecurityTeam", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "SecurityTeam", "signature": "SecurityTeam createSecurityTeam(Map<String, String> beanAttr)", "full_signature": "private static SecurityTeam createSecurityTeam(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createSecurityTeam(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createTaskResult", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "TaskResult", "signature": "TaskResult createTaskResult(Map<String, String> beanAttr)", "full_signature": "private static TaskResult createTaskResult(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createTaskResult(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createBanOnResource", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Ban", "signature": "Ban createBanOnResource(Map<String, String> beanAttr)", "full_signature": "private static Ban createBanOnResource(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createBanOnResource(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createBanOnFacility", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "Ban", "signature": "Ban createBanOnFacility(Map<String, String> beanAttr)", "full_signature": "private static Ban createBanOnFacility(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createBanOnFacility(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createRichDestination", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "RichDestination", "signature": "RichDestination createRichDestination(Map<String, String> beanAttr)", "full_signature": "private static RichDestination createRichDestination(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createRichDestination(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createRichMember", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "RichMember", "signature": "RichMember createRichMember(Map<String, String> beanAttr)", "full_signature": "private static RichMember createRichMember(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createRichMember(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createRichUser", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "RichUser", "signature": "RichUser createRichUser(Map<String, String> beanAttr)", "full_signature": "private static RichUser createRichUser(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createRichUser(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createRichGroup", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "RichGroup", "signature": "RichGroup createRichGroup(Map<String, String> beanAttr)", "full_signature": "private static RichGroup createRichGroup(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createRichGroup(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createRichFacility", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "RichFacility", "signature": "RichFacility createRichFacility(Map<String, String> beanAttr)", "full_signature": "private static RichFacility createRichFacility(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createRichFacility(Map<String, String> beanAttr)", "testcase": false, "constructor": false}, {"identifier": "createRichResource", "parameters": "(Map<String, String> beanAttr)", "modifiers": "private static", "return": "RichResource", "signature": "RichResource createRichResource(Map<String, String> beanAttr)", "full_signature": "private static RichResource createRichResource(Map<String, String> beanAttr)", "class_method_signature": "AuditParser.createRichResource(Map<String, String> beanAttr)", "testcase": false, "constructor": false}], "file": "perun-auditparser/src/main/java/cz/metacentrum/perun/auditparser/AuditParser.java"}, "focal_method": {"identifier": "parseLog", "parameters": "(String log)", "modifiers": "public static", "return": "List<PerunBean>", "body": "public static List<PerunBean> parseLog(String log) {\n\t\tList<PerunBean> listPerunBeans = new ArrayList<PerunBean>();\n\t\tPerunBean perunBean = null;\n\t\t//Parse log to List of text Beanss\n\t\tList<Pair<String, Map<String, String>>> listOfTextBeans = new ArrayList<Pair<String, Map<String, String>>>();\n\t\ttry {\n\t\t\tlistOfTextBeans = beansToMap(log);\n\t\t} catch (RuntimeException ex) {\n\t\t\tloger.error(\"Message \" + log + \" was not correctly parsed to Map<NameOfBean,BodyOfBean>\", ex);\n\t\t}\n\t\t//For every bean try to find it and create object from text\n\t\tfor(Pair<String, Map<String, String>> p: listOfTextBeans) {\n\t\t\ttry {\n\t\t\t\tperunBean = null;\n\t\t\t\tif(p.getLeft().equals(\"Attribute\")) perunBean = createAttribute(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"AttributeDefinition\")) perunBean = createAttributeDefinition(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Candidate\")) perunBean = createCandidate(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Destination\")) perunBean = createDestination(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"ExtSource\")) perunBean = createExtSource(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"RichFacility\")) perunBean = createRichFacility(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Facility\")) perunBean = createFacility(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Group\")) perunBean = createGroup(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Host\")) perunBean = createHost(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Member\")) perunBean = createMember(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Owner\")) perunBean = createOwner(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Resource\")) perunBean = createResource(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"RichDestination\")) perunBean = createRichDestination(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"RichMember\")) perunBean = createRichMember(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"RichUser\")) perunBean = createRichUser(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"RichGroup\")) perunBean = createRichGroup(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"RichResource\")) perunBean = createRichResource(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Service\")) perunBean = createService(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"User\")) perunBean = createUser(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"UserExtSource\")) perunBean = createUserExtSource(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Vo\")) perunBean = createVo(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"Authorship\")) perunBean = createAuthorship(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"ResourceTag\")) perunBean = createResourceTag(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"SecurityTeam\")) perunBean = createSecurityTeam(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"TaskResult\")) perunBean = createTaskResult(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"BanOnResource\")) perunBean = createBanOnResource(p.getRight());\n\t\t\t\telse if(p.getLeft().equals(\"BanOnFacility\")) perunBean = createBanOnFacility(p.getRight());\n\t\t\t\telse loger.debug(\"Object of this type can't be parsed cause there is no such object in parser's branches. ObjectName:\" + p.getLeft());\n\t\t\t\tif(perunBean != null) listPerunBeans.add(perunBean);\n\t\t\t} catch (RuntimeException e) {\n\t\t\t\tloger.error(\"Object name \" + p.getLeft() + \" with attributes \" + p.getRight() + \" was not parsed due to fail {} \", e);\n\t\t\t}\n\t\t}\n\t\treturn listPerunBeans;\n\t}", "signature": "List<PerunBean> parseLog(String log)", "full_signature": "public static List<PerunBean> parseLog(String log)", "class_method_signature": "AuditParser.parseLog(String log)", "testcase": false, "constructor": false, "invocations": ["beansToMap", "error", "equals", "getLeft", "createAttribute", "getRight", "equals", "getLeft", "createAttributeDefinition", "getRight", "equals", "getLeft", "createCandidate", "getRight", "equals", "getLeft", "createDestination", "getRight", "equals", "getLeft", "createExtSource", "getRight", "equals", "getLeft", "createRichFacility", "getRight", "equals", "getLeft", "createFacility", "getRight", "equals", "getLeft", "createGroup", "getRight", "equals", "getLeft", "createHost", "getRight", "equals", "getLeft", "createMember", "getRight", "equals", "getLeft", "createOwner", "getRight", "equals", "getLeft", "createResource", "getRight", "equals", "getLeft", "createRichDestination", "getRight", "equals", "getLeft", "createRichMember", "getRight", "equals", "getLeft", "createRichUser", "getRight", "equals", "getLeft", "createRichGroup", "getRight", "equals", "getLeft", "createRichResource", "getRight", "equals", "getLeft", "createService", "getRight", "equals", "getLeft", "createUser", "getRight", "equals", "getLeft", "createUserExtSource", "getRight", "equals", "getLeft", "createVo", "getRight", "equals", "getLeft", "createAuthorship", "getRight", "equals", "getLeft", "createResourceTag", "getRight", "equals", "getLeft", "createSecurityTeam", "getRight", "equals", "getLeft", "createTaskResult", "getRight", "equals", "getLeft", "createBanOnResource", "getRight", "equals", "getLeft", "createBanOnFacility", "getRight", "debug", "getLeft", "add", "error", "getLeft", "getRight"]}, "repository": {"repo_id": 4085998, "url": "https://github.com/CESNET/perun", "stars": 38, "created": "4/20/2012 11:55:38 AM +00:00", "updates": "2020-01-27T09:51:13+00:00", "fork": "False", "license": "licensed"}}