{"test_class": {"identifier": "BasicAtomGeneratorTest", "superclass": "extends AbstractGeneratorTest", "interfaces": "", "fields": [{"original_string": "private BasicAtomGenerator generator;", "modifier": "private", "type": "BasicAtomGenerator", "declarator": "generator", "var_name": "generator"}], "file": "display/renderbasic/src/test/java/org/openscience/cdk/renderer/generators/BasicAtomGeneratorTest.java"}, "test_case": {"identifier": "generateElementTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void generateElementTest() {\n        IAtom atom = super.builder.newInstance(IAtom.class, \"C\");\n        atom.setPoint2d(new Point2d(2, 3));\n        atom.setImplicitHydrogenCount(0);\n        int alignment = 1;\n        AtomSymbolElement element = generator.generateElement(atom, alignment, model);\n        Assert.assertEquals(atom.getPoint2d().x, element.xCoord, 0.01);\n        Assert.assertEquals(atom.getPoint2d().y, element.yCoord, 0.01);\n        Assert.assertEquals(atom.getSymbol(), element.text);\n        Assert.assertEquals((int) atom.getFormalCharge(), element.formalCharge);\n        Assert.assertEquals((int) atom.getImplicitHydrogenCount(), element.hydrogenCount);\n        Assert.assertEquals(alignment, element.alignment);\n        Assert.assertEquals(generator.getAtomColor(atom, model), element.color);\n    }", "signature": "void generateElementTest()", "full_signature": "@Test public void generateElementTest()", "class_method_signature": "BasicAtomGeneratorTest.generateElementTest()", "testcase": true, "constructor": false, "invocations": ["newInstance", "setPoint2d", "setImplicitHydrogenCount", "generateElement", "assertEquals", "getPoint2d", "assertEquals", "getPoint2d", "assertEquals", "getSymbol", "assertEquals", "getFormalCharge", "assertEquals", "getImplicitHydrogenCount", "assertEquals", "assertEquals", "getAtomColor"]}, "focal_class": {"identifier": "BasicAtomGenerator", "superclass": "", "interfaces": "implements IGenerator<IAtomContainer>", "fields": [{"original_string": "private IGeneratorParameter<Color> atomColor = new AtomColor();", "modifier": "private", "type": "IGeneratorParameter<Color>", "declarator": "atomColor = new AtomColor()", "var_name": "atomColor"}, {"original_string": "private IGeneratorParameter<IAtomColorer> atomColorer = new AtomColorer();", "modifier": "private", "type": "IGeneratorParameter<IAtomColorer>", "declarator": "atomColorer = new AtomColorer()", "var_name": "atomColorer"}, {"original_string": "private IGeneratorParameter<Boolean> colorByType = new ColorByType();", "modifier": "private", "type": "IGeneratorParameter<Boolean>", "declarator": "colorByType = new ColorByType()", "var_name": "colorByType"}, {"original_string": "private IGeneratorParameter<Boolean> showExplicitHydrogens = new ShowExplicitHydrogens();", "modifier": "private", "type": "IGeneratorParameter<Boolean>", "declarator": "showExplicitHydrogens = new ShowExplicitHydrogens()", "var_name": "showExplicitHydrogens"}, {"original_string": "private IGeneratorParameter<Double> atomRadius = new AtomRadius();", "modifier": "private", "type": "IGeneratorParameter<Double>", "declarator": "atomRadius = new AtomRadius()", "var_name": "atomRadius"}, {"original_string": "private IGeneratorParameter<Boolean> isCompact = new CompactAtom();", "modifier": "private", "type": "IGeneratorParameter<Boolean>", "declarator": "isCompact = new CompactAtom()", "var_name": "isCompact"}, {"original_string": "private IGeneratorParameter<Boolean> isKekule = new KekuleStructure();", "modifier": "private", "type": "IGeneratorParameter<Boolean>", "declarator": "isKekule = new KekuleStructure()", "var_name": "isKekule"}, {"original_string": "private IGeneratorParameter<Shape> compactShape = new CompactShape();", "modifier": "private", "type": "IGeneratorParameter<Shape>", "declarator": "compactShape = new CompactShape()", "var_name": "compactShape"}, {"original_string": "private IGeneratorParameter<Boolean> showEndCarbons = new ShowEndCarbons();", "modifier": "private", "type": "IGeneratorParameter<Boolean>", "declarator": "showEndCarbons = new ShowEndCarbons()", "var_name": "showEndCarbons"}], "methods": [{"identifier": "BasicAtomGenerator", "parameters": "()", "modifiers": "public", "return": "", "signature": " BasicAtomGenerator()", "full_signature": "public  BasicAtomGenerator()", "class_method_signature": "BasicAtomGenerator.BasicAtomGenerator()", "testcase": false, "constructor": true}, {"identifier": "generate", "parameters": "(IAtomContainer container, RendererModel model)", "modifiers": "@Override public", "return": "IRenderingElement", "signature": "IRenderingElement generate(IAtomContainer container, RendererModel model)", "full_signature": "@Override public IRenderingElement generate(IAtomContainer container, RendererModel model)", "class_method_signature": "BasicAtomGenerator.generate(IAtomContainer container, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "hasCoordinates", "parameters": "(IAtom atom)", "modifiers": "protected", "return": "boolean", "signature": "boolean hasCoordinates(IAtom atom)", "full_signature": "protected boolean hasCoordinates(IAtom atom)", "class_method_signature": "BasicAtomGenerator.hasCoordinates(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "isHydrogen", "parameters": "(IAtom atom)", "modifiers": "protected", "return": "boolean", "signature": "boolean isHydrogen(IAtom atom)", "full_signature": "protected boolean isHydrogen(IAtom atom)", "class_method_signature": "BasicAtomGenerator.isHydrogen(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "isCarbon", "parameters": "(IAtom atom)", "modifiers": "private", "return": "boolean", "signature": "boolean isCarbon(IAtom atom)", "full_signature": "private boolean isCarbon(IAtom atom)", "class_method_signature": "BasicAtomGenerator.isCarbon(IAtom atom)", "testcase": false, "constructor": false}, {"identifier": "invisibleHydrogen", "parameters": "(IAtom atom, RendererModel model)", "modifiers": "protected", "return": "boolean", "signature": "boolean invisibleHydrogen(IAtom atom, RendererModel model)", "full_signature": "protected boolean invisibleHydrogen(IAtom atom, RendererModel model)", "class_method_signature": "BasicAtomGenerator.invisibleHydrogen(IAtom atom, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "invisibleCarbon", "parameters": "(IAtom atom, IAtomContainer atomContainer, RendererModel model)", "modifiers": "protected", "return": "boolean", "signature": "boolean invisibleCarbon(IAtom atom, IAtomContainer atomContainer, RendererModel model)", "full_signature": "protected boolean invisibleCarbon(IAtom atom, IAtomContainer atomContainer, RendererModel model)", "class_method_signature": "BasicAtomGenerator.invisibleCarbon(IAtom atom, IAtomContainer atomContainer, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "canDraw", "parameters": "(IAtom atom, IAtomContainer container, RendererModel model)", "modifiers": "protected", "return": "boolean", "signature": "boolean canDraw(IAtom atom, IAtomContainer container, RendererModel model)", "full_signature": "protected boolean canDraw(IAtom atom, IAtomContainer container, RendererModel model)", "class_method_signature": "BasicAtomGenerator.canDraw(IAtom atom, IAtomContainer container, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "generate", "parameters": "(IAtomContainer atomContainer, IAtom atom, RendererModel model)", "modifiers": "public", "return": "IRenderingElement", "signature": "IRenderingElement generate(IAtomContainer atomContainer, IAtom atom, RendererModel model)", "full_signature": "public IRenderingElement generate(IAtomContainer atomContainer, IAtom atom, RendererModel model)", "class_method_signature": "BasicAtomGenerator.generate(IAtomContainer atomContainer, IAtom atom, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "generateCompactElement", "parameters": "(IAtom atom, RendererModel model)", "modifiers": "public", "return": "IRenderingElement", "signature": "IRenderingElement generateCompactElement(IAtom atom, RendererModel model)", "full_signature": "public IRenderingElement generateCompactElement(IAtom atom, RendererModel model)", "class_method_signature": "BasicAtomGenerator.generateCompactElement(IAtom atom, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "generateElement", "parameters": "(IAtom atom, int alignment, RendererModel model)", "modifiers": "public", "return": "AtomSymbolElement", "signature": "AtomSymbolElement generateElement(IAtom atom, int alignment, RendererModel model)", "full_signature": "public AtomSymbolElement generateElement(IAtom atom, int alignment, RendererModel model)", "class_method_signature": "BasicAtomGenerator.generateElement(IAtom atom, int alignment, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "showCarbon", "parameters": "(IAtom carbonAtom, IAtomContainer container, RendererModel model)", "modifiers": "protected", "return": "boolean", "signature": "boolean showCarbon(IAtom carbonAtom, IAtomContainer container, RendererModel model)", "full_signature": "protected boolean showCarbon(IAtom carbonAtom, IAtomContainer container, RendererModel model)", "class_method_signature": "BasicAtomGenerator.showCarbon(IAtom carbonAtom, IAtomContainer container, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "getAtomColor", "parameters": "(IAtom atom, RendererModel model)", "modifiers": "protected", "return": "Color", "signature": "Color getAtomColor(IAtom atom, RendererModel model)", "full_signature": "protected Color getAtomColor(IAtom atom, RendererModel model)", "class_method_signature": "BasicAtomGenerator.getAtomColor(IAtom atom, RendererModel model)", "testcase": false, "constructor": false}, {"identifier": "getParameters", "parameters": "()", "modifiers": "@Override public", "return": "List<IGeneratorParameter<?>>", "signature": "List<IGeneratorParameter<?>> getParameters()", "full_signature": "@Override public List<IGeneratorParameter<?>> getParameters()", "class_method_signature": "BasicAtomGenerator.getParameters()", "testcase": false, "constructor": false}], "file": "display/renderbasic/src/main/java/org/openscience/cdk/renderer/generators/BasicAtomGenerator.java"}, "focal_method": {"identifier": "generateElement", "parameters": "(IAtom atom, int alignment, RendererModel model)", "modifiers": "public", "return": "AtomSymbolElement", "body": "public AtomSymbolElement generateElement(IAtom atom, int alignment, RendererModel model) {\n        String text;\n        if (atom instanceof IPseudoAtom) {\n            text = ((IPseudoAtom) atom).getLabel();\n        } else {\n            text = atom.getSymbol();\n        }\n        return new AtomSymbolElement(atom.getPoint2d().x, atom.getPoint2d().y, text, atom.getFormalCharge(),\n                atom.getImplicitHydrogenCount(), alignment, getAtomColor(atom, model));\n    }", "signature": "AtomSymbolElement generateElement(IAtom atom, int alignment, RendererModel model)", "full_signature": "public AtomSymbolElement generateElement(IAtom atom, int alignment, RendererModel model)", "class_method_signature": "BasicAtomGenerator.generateElement(IAtom atom, int alignment, RendererModel model)", "testcase": false, "constructor": false, "invocations": ["getLabel", "getSymbol", "getPoint2d", "getPoint2d", "getFormalCharge", "getImplicitHydrogenCount", "getAtomColor"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}