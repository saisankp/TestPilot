{"test_class": {"identifier": "XmlUtilsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(XmlUtilsTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(XmlUtilsTest.class)", "var_name": "logger"}, {"original_string": "private final String ACTUAL = \"<env:Envelope xmlns:env=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:S=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"><env:Header/><env:Body xmlns=\\\"http://www.intuit.com/iep/ServiceUsage/IntuitServiceUsageABO/V1\\\"><QueryUsageBalanceResponse xmlns=\\\"http://www.intuit.com/iep/ServiceUsage/IntuitServiceUsageABO/V1\\\"><Balance/><Result><Success/><Error><Category>DAT</Category><Code>DAT_USAGE_1003</Code><Description>Invalid Request: Invalid Input criteria: No asset found for license/eoc (630289335971198/855939).</Description><Source>SIEBEL</Source></Error></Result></QueryUsageBalanceResponse></env:Body></env:Envelope>\";", "modifier": "private final", "type": "String", "declarator": "ACTUAL = \"<env:Envelope xmlns:env=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" xmlns:S=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\"><env:Header/><env:Body xmlns=\\\"http://www.intuit.com/iep/ServiceUsage/IntuitServiceUsageABO/V1\\\"><QueryUsageBalanceResponse xmlns=\\\"http://www.intuit.com/iep/ServiceUsage/IntuitServiceUsageABO/V1\\\"><Balance/><Result><Success/><Error><Category>DAT</Category><Code>DAT_USAGE_1003</Code><Description>Invalid Request: Invalid Input criteria: No asset found for license/eoc (630289335971198/855939).</Description><Source>SIEBEL</Source></Error></Result></QueryUsageBalanceResponse></env:Body></env:Envelope>\"", "var_name": "ACTUAL"}, {"original_string": "public final static String TEACHERS_XML = \"<teachers>\\n\"\n            + \"\t<teacher department=\\\"science\\\" id=\\\"309\\\">\\n\"\n            + \"\t\t<subject>math</subject>\\n\"\n            + \"\t\t<subject>physics</subject>\\n\"\n            + \"\t</teacher>\\n\"\n            + \"\t<teacher department=\\\"arts\\\" id=\\\"310\\\">\\n\"\n            + \"\t\t<subject>political education</subject>\\n\"\n            + \"\t\t<subject>english</subject>\\n\"\n            + \"\t</teacher>\\n\"\n            + \"</teachers>\";", "modifier": "public final static", "type": "String", "declarator": "TEACHERS_XML = \"<teachers>\\n\"\n            + \"\t<teacher department=\\\"science\\\" id=\\\"309\\\">\\n\"\n            + \"\t\t<subject>math</subject>\\n\"\n            + \"\t\t<subject>physics</subject>\\n\"\n            + \"\t</teacher>\\n\"\n            + \"\t<teacher department=\\\"arts\\\" id=\\\"310\\\">\\n\"\n            + \"\t\t<subject>political education</subject>\\n\"\n            + \"\t\t<subject>english</subject>\\n\"\n            + \"\t</teacher>\\n\"\n            + \"</teachers>\"", "var_name": "TEACHERS_XML"}], "file": "karate-core/src/test/java/com/intuit/karate/XmlUtilsTest.java"}, "test_case": {"identifier": "testCreateElement", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreateElement() {\n        Node node = XmlUtils.createElement(getDocument(), \"foo\", \"bar\", null);\n        String result = XmlUtils.toString(node);\n        assertEquals(result, \"<foo>bar</foo>\");\n    }", "signature": "void testCreateElement()", "full_signature": "@Test public void testCreateElement()", "class_method_signature": "XmlUtilsTest.testCreateElement()", "testcase": true, "constructor": false, "invocations": ["createElement", "getDocument", "toString", "assertEquals"]}, "focal_class": {"identifier": "XmlUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "XmlUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " XmlUtils()", "full_signature": "private  XmlUtils()", "class_method_signature": "XmlUtils.XmlUtils()", "testcase": false, "constructor": true}, {"identifier": "toString", "parameters": "(Node node)", "modifiers": "public static", "return": "String", "signature": "String toString(Node node)", "full_signature": "public static String toString(Node node)", "class_method_signature": "XmlUtils.toString(Node node)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "(Node node, boolean pretty)", "modifiers": "public static", "return": "String", "signature": "String toString(Node node, boolean pretty)", "full_signature": "public static String toString(Node node, boolean pretty)", "class_method_signature": "XmlUtils.toString(Node node, boolean pretty)", "testcase": false, "constructor": false}, {"identifier": "trimWhiteSpace", "parameters": "(Node node)", "modifiers": "public static", "return": "void", "signature": "void trimWhiteSpace(Node node)", "full_signature": "public static void trimWhiteSpace(Node node)", "class_method_signature": "XmlUtils.trimWhiteSpace(Node node)", "testcase": false, "constructor": false}, {"identifier": "toXmlDoc", "parameters": "(String xml)", "modifiers": "public static", "return": "Document", "signature": "Document toXmlDoc(String xml)", "full_signature": "public static Document toXmlDoc(String xml)", "class_method_signature": "XmlUtils.toXmlDoc(String xml)", "testcase": false, "constructor": false}, {"identifier": "compile", "parameters": "(String path)", "modifiers": "private static", "return": "XPathExpression", "signature": "XPathExpression compile(String path)", "full_signature": "private static XPathExpression compile(String path)", "class_method_signature": "XmlUtils.compile(String path)", "testcase": false, "constructor": false}, {"identifier": "getNodeListByPath", "parameters": "(Node node, String path)", "modifiers": "public static", "return": "NodeList", "signature": "NodeList getNodeListByPath(Node node, String path)", "full_signature": "public static NodeList getNodeListByPath(Node node, String path)", "class_method_signature": "XmlUtils.getNodeListByPath(Node node, String path)", "testcase": false, "constructor": false}, {"identifier": "stripNameSpacePrefixes", "parameters": "(String path)", "modifiers": "public static", "return": "String", "signature": "String stripNameSpacePrefixes(String path)", "full_signature": "public static String stripNameSpacePrefixes(String path)", "class_method_signature": "XmlUtils.stripNameSpacePrefixes(String path)", "testcase": false, "constructor": false}, {"identifier": "getNodeByPath", "parameters": "(Node node, String path, boolean create)", "modifiers": "public static", "return": "Node", "signature": "Node getNodeByPath(Node node, String path, boolean create)", "full_signature": "public static Node getNodeByPath(Node node, String path, boolean create)", "class_method_signature": "XmlUtils.getNodeByPath(Node node, String path, boolean create)", "testcase": false, "constructor": false}, {"identifier": "createNodeByPath", "parameters": "(Document doc, String path)", "modifiers": "public static", "return": "Node", "signature": "Node createNodeByPath(Document doc, String path)", "full_signature": "public static Node createNodeByPath(Document doc, String path)", "class_method_signature": "XmlUtils.createNodeByPath(Document doc, String path)", "testcase": false, "constructor": false}, {"identifier": "getTextValueByPath", "parameters": "(Node node, String path)", "modifiers": "public static", "return": "String", "signature": "String getTextValueByPath(Node node, String path)", "full_signature": "public static String getTextValueByPath(Node node, String path)", "class_method_signature": "XmlUtils.getTextValueByPath(Node node, String path)", "testcase": false, "constructor": false}, {"identifier": "setByPath", "parameters": "(Node doc, String path, String value)", "modifiers": "public static", "return": "void", "signature": "void setByPath(Node doc, String path, String value)", "full_signature": "public static void setByPath(Node doc, String path, String value)", "class_method_signature": "XmlUtils.setByPath(Node doc, String path, String value)", "testcase": false, "constructor": false}, {"identifier": "removeByPath", "parameters": "(Document doc, String path)", "modifiers": "public static", "return": "void", "signature": "void removeByPath(Document doc, String path)", "full_signature": "public static void removeByPath(Document doc, String path)", "class_method_signature": "XmlUtils.removeByPath(Document doc, String path)", "testcase": false, "constructor": false}, {"identifier": "setByPath", "parameters": "(Document doc, String path, Node in)", "modifiers": "public static", "return": "void", "signature": "void setByPath(Document doc, String path, Node in)", "full_signature": "public static void setByPath(Document doc, String path, Node in)", "class_method_signature": "XmlUtils.setByPath(Document doc, String path, Node in)", "testcase": false, "constructor": false}, {"identifier": "toJsonDoc", "parameters": "(Node node)", "modifiers": "public static", "return": "DocumentContext", "signature": "DocumentContext toJsonDoc(Node node)", "full_signature": "public static DocumentContext toJsonDoc(Node node)", "class_method_signature": "XmlUtils.toJsonDoc(Node node)", "testcase": false, "constructor": false}, {"identifier": "getAttributes", "parameters": "(Node node)", "modifiers": "private static", "return": "Map<String, Object>", "signature": "Map<String, Object> getAttributes(Node node)", "full_signature": "private static Map<String, Object> getAttributes(Node node)", "class_method_signature": "XmlUtils.getAttributes(Node node)", "testcase": false, "constructor": false}, {"identifier": "getChildElementCount", "parameters": "(Node node)", "modifiers": "public static", "return": "int", "signature": "int getChildElementCount(Node node)", "full_signature": "public static int getChildElementCount(Node node)", "class_method_signature": "XmlUtils.getChildElementCount(Node node)", "testcase": false, "constructor": false}, {"identifier": "getElementAsObject", "parameters": "(Node node, boolean removeNamespace)", "modifiers": "private static", "return": "Object", "signature": "Object getElementAsObject(Node node, boolean removeNamespace)", "full_signature": "private static Object getElementAsObject(Node node, boolean removeNamespace)", "class_method_signature": "XmlUtils.getElementAsObject(Node node, boolean removeNamespace)", "testcase": false, "constructor": false}, {"identifier": "toObject", "parameters": "(Node node)", "modifiers": "public static", "return": "Object", "signature": "Object toObject(Node node)", "full_signature": "public static Object toObject(Node node)", "class_method_signature": "XmlUtils.toObject(Node node)", "testcase": false, "constructor": false}, {"identifier": "toObject", "parameters": "(Node node, boolean removeNamespace)", "modifiers": "public static", "return": "Object", "signature": "Object toObject(Node node, boolean removeNamespace)", "full_signature": "public static Object toObject(Node node, boolean removeNamespace)", "class_method_signature": "XmlUtils.toObject(Node node, boolean removeNamespace)", "testcase": false, "constructor": false}, {"identifier": "fromMap", "parameters": "(Map<String, Object> map)", "modifiers": "public static", "return": "Document", "signature": "Document fromMap(Map<String, Object> map)", "full_signature": "public static Document fromMap(Map<String, Object> map)", "class_method_signature": "XmlUtils.fromMap(Map<String, Object> map)", "testcase": false, "constructor": false}, {"identifier": "fromObject", "parameters": "(String name, Object o)", "modifiers": "public static", "return": "Document", "signature": "Document fromObject(String name, Object o)", "full_signature": "public static Document fromObject(String name, Object o)", "class_method_signature": "XmlUtils.fromObject(String name, Object o)", "testcase": false, "constructor": false}, {"identifier": "fromObject", "parameters": "(Document doc, String name, Object o)", "modifiers": "public static", "return": "List<Element>", "signature": "List<Element> fromObject(Document doc, String name, Object o)", "full_signature": "public static List<Element> fromObject(Document doc, String name, Object o)", "class_method_signature": "XmlUtils.fromObject(Document doc, String name, Object o)", "testcase": false, "constructor": false}, {"identifier": "newDocument", "parameters": "()", "modifiers": "public static", "return": "Document", "signature": "Document newDocument()", "full_signature": "public static Document newDocument()", "class_method_signature": "XmlUtils.newDocument()", "testcase": false, "constructor": false}, {"identifier": "addAttributes", "parameters": "(Element element, Map<String, Object> map)", "modifiers": "public static", "return": "void", "signature": "void addAttributes(Element element, Map<String, Object> map)", "full_signature": "public static void addAttributes(Element element, Map<String, Object> map)", "class_method_signature": "XmlUtils.addAttributes(Element element, Map<String, Object> map)", "testcase": false, "constructor": false}, {"identifier": "createElement", "parameters": "(Node node, String name, String value, Map<String, Object> attributes)", "modifiers": "public static", "return": "Element", "signature": "Element createElement(Node node, String name, String value, Map<String, Object> attributes)", "full_signature": "public static Element createElement(Node node, String name, String value, Map<String, Object> attributes)", "class_method_signature": "XmlUtils.createElement(Node node, String name, String value, Map<String, Object> attributes)", "testcase": false, "constructor": false}, {"identifier": "toNewDocument", "parameters": "(Node in)", "modifiers": "public static", "return": "Document", "signature": "Document toNewDocument(Node in)", "full_signature": "public static Document toNewDocument(Node in)", "class_method_signature": "XmlUtils.toNewDocument(Node in)", "testcase": false, "constructor": false}, {"identifier": "toXmlDoc", "parameters": "(Object o)", "modifiers": "public static", "return": "Document", "signature": "Document toXmlDoc(Object o)", "full_signature": "public static Document toXmlDoc(Object o)", "class_method_signature": "XmlUtils.toXmlDoc(Object o)", "testcase": false, "constructor": false}, {"identifier": "toXml", "parameters": "(Object o)", "modifiers": "public static", "return": "String", "signature": "String toXml(Object o)", "full_signature": "public static String toXml(Object o)", "class_method_signature": "XmlUtils.toXml(Object o)", "testcase": false, "constructor": false}], "file": "karate-core/src/main/java/com/intuit/karate/XmlUtils.java"}, "focal_method": {"identifier": "createElement", "parameters": "(Node node, String name, String value, Map<String, Object> attributes)", "modifiers": "public static", "return": "Element", "body": "public static Element createElement(Node node, String name, String value, Map<String, Object> attributes) {\n        Document doc = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node : node.getOwnerDocument();\n        Element element = doc.createElement(name);\n        element.setTextContent(value);\n        addAttributes(element, attributes);\n        return element;\n    }", "signature": "Element createElement(Node node, String name, String value, Map<String, Object> attributes)", "full_signature": "public static Element createElement(Node node, String name, String value, Map<String, Object> attributes)", "class_method_signature": "XmlUtils.createElement(Node node, String name, String value, Map<String, Object> attributes)", "testcase": false, "constructor": false, "invocations": ["getNodeType", "getOwnerDocument", "createElement", "setTextContent", "addAttributes"]}, "repository": {"repo_id": 81226206, "url": "https://github.com/intuit/karate", "stars": 2712, "created": "2/7/2017 3:59:17 PM +00:00", "updates": "2020-01-27T21:00:57+00:00", "fork": "False", "license": "licensed"}}