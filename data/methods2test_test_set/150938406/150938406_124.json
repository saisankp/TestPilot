{"test_class": {"identifier": "OnlineCorpusStepTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/com/alibaba/alink/operator/common/clustering/lda/OnlineCorpusStepTest.java"}, "test_case": {"identifier": "calcTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void calcTest() {\n        List<Vector> data = new ArrayList<>();\n\n        Row[] testArray =\n            new Row[]{\n                Row.of(new Object[]{0, \"0:1 1:2 2:6 3:0 4:2 5:3 6:1 7:1 8:0 9:0 10:3\"}),\n                Row.of(new Object[]{1, \"0:1 1:3 2:0 3:1 4:3 5:0 6:0 7:2 8:0 9:0 10:1\"}),\n                Row.of(new Object[]{2, \"0:1 1:4 2:1 3:0 4:0 5:4 6:9 7:0 8:1 9:2 10:0\"}),\n                Row.of(new Object[]{3, \"0:2 1:1 2:0 3:3 4:0 5:0 6:5 7:0 8:2 9:3 10:9\"}),\n                Row.of(new Object[]{4, \"0:3 1:1 2:1 3:9 4:3 5:0 6:2 7:0 8:0 9:1 10:3\"}),\n                Row.of(new Object[]{5, \"0:4 1:2 2:0 3:3 4:4 5:5 6:1 7:1 8:1 9:4 10:0\"}),\n                Row.of(new Object[]{6, \"0:2 1:1 2:0 3:3 4:0 5:0 6:5 7:0 8:2 9:2 10:9\"}),\n                Row.of(new Object[]{7, \"0:1 1:1 2:1 3:9 4:2 5:1 6:2 7:0 8:0 9:1 10:3\"}),\n                Row.of(new Object[]{8, \"0:4 1:4 2:0 3:3 4:4 5:2 6:1 7:3 8:0 9:0 10:0\"}),\n                Row.of(new Object[]{9, \"0:2 1:8 2:2 3:0 4:3 5:0 6:2 7:0 8:2 9:7 10:2\"}),\n                Row.of(new Object[]{10, \"0:1 1:1 2:1 3:9 4:0 5:2 6:2 7:0 8:0 9:3 10:3\"}),\n                Row.of(new Object[]{11, \"0:4 1:1 2:0 3:0 4:4 5:5 6:1 7:3 8:0 9:1 10:0\"})\n            };\n\n        for (int i = 0; i < testArray.length; i++) {\n            data.add(VectorUtil.parseSparse((String) testArray[i].getField(1)));\n        }\n\n        int row = 11;\n        int col = 5;\n\n        double[] temp = new double[]{0.8936825549031158,\n            0.9650683744577933,\n            1.1760851442955271,\n            0.889011463028263,\n            1.0355502890838704,\n            1.1720254142865503,\n            0.8496512959061578,\n            1.1564109073902848,\n            0.8528198328651976,\n            1.072261907065107,\n            1.0112487630821958,\n            1.0288027427394206,\n            1.1256918577237478,\n            1.0641131417250107,\n            0.9830788207753957,\n            0.9519235842178695,\n            1.0531103642783968,\n            1.0846663792488604,\n            0.9317316401779444,\n            0.9816247167440154,\n            0.953061129524052,\n            0.8836097897537777,\n            0.8539728772760822,\n            1.109432137460693,\n            0.9801693423689286,\n            0.9385725168762017,\n            1.009886079821316,\n            0.9741390218380398,\n            0.8734624459614093,\n            0.8548583255850564,\n            0.8934120594879987,\n            1.0200469492393616,\n            0.9461610896051537,\n            1.1912819895664948,\n            0.9650275833536232,\n            0.9312815665885328,\n            0.984681817963758,\n            1.1412711858668625,\n            1.1159082714127344,\n            1.0219124026668207,\n            1.1052645047308647,\n            1.1380919062139254,\n            0.9684793634316371,\n            1.023922805813918,\n            1.0777999541431174,\n            0.8730213177341947,\n            1.0353598060502658,\n            1.047104264664753,\n            1.1284793487722498,\n            0.8898021261569816,\n            1.1634869627283706,\n            0.817874601150865,\n            1.0424867867765728,\n            1.167773175905418,\n            0.915224402643435};\n\n        DenseMatrix lambda = new DenseMatrix(row, col, temp, false).transpose();\n\n        DenseMatrix alpha = new DenseMatrix(5, 1, new double[]{0.2, 0.3, 0.4, 0.5, 0.6});\n        int vocabularySize = 11;\n        int numTopic = 5;\n\n        DenseMatrix gammad = new DenseMatrix(numTopic, 1, new double[]{0.7, 0.8, 0.9, 1.0, 1.1});\n\n        Tuple4<DenseMatrix, DenseMatrix, Long, Long> tuple4 = OnlineCorpusStep.onlineCorpusUpdate(data, lambda,\n            alpha,\n            gammad,\n            vocabularySize,\n            numTopic);\n\n        Assert.assertEquals(tuple4.f0.get(1, 0), 0.9862984592756618, 10e-4);\n        Assert.assertEquals(tuple4.f1.get(1, 0), -73.2866169822335, 10e-4);\n    }", "signature": "void calcTest()", "full_signature": "@Test public void calcTest()", "class_method_signature": "OnlineCorpusStepTest.calcTest()", "testcase": true, "constructor": false, "invocations": ["of", "of", "of", "of", "of", "of", "of", "of", "of", "of", "of", "of", "add", "parseSparse", "getField", "transpose", "onlineCorpusUpdate", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "OnlineCorpusStep", "superclass": "extends ComputeFunction", "interfaces": "", "fields": [{"original_string": "private int numTopic;", "modifier": "private", "type": "int", "declarator": "numTopic", "var_name": "numTopic"}, {"original_string": "private double subSamplingRate;", "modifier": "private", "type": "double", "declarator": "subSamplingRate", "var_name": "subSamplingRate"}], "methods": [{"identifier": "OnlineCorpusStep", "parameters": "(int numTopic, double subSamplingRate)", "modifiers": "public", "return": "", "signature": " OnlineCorpusStep(int numTopic, double subSamplingRate)", "full_signature": "public  OnlineCorpusStep(int numTopic, double subSamplingRate)", "class_method_signature": "OnlineCorpusStep.OnlineCorpusStep(int numTopic, double subSamplingRate)", "testcase": false, "constructor": true}, {"identifier": "calc", "parameters": "(ComContext context)", "modifiers": "@Override public", "return": "void", "signature": "void calc(ComContext context)", "full_signature": "@Override public void calc(ComContext context)", "class_method_signature": "OnlineCorpusStep.calc(ComContext context)", "testcase": false, "constructor": false}, {"identifier": "onlineCorpusUpdate", "parameters": "(\n        List<Vector> data, DenseMatrix lambda, DenseMatrix alpha, DenseMatrix gammad,\n        int vocabularySize, int numTopic)", "modifiers": "static", "return": "Tuple4<DenseMatrix, DenseMatrix, Long, Long>", "signature": "Tuple4<DenseMatrix, DenseMatrix, Long, Long> onlineCorpusUpdate(\n        List<Vector> data, DenseMatrix lambda, DenseMatrix alpha, DenseMatrix gammad,\n        int vocabularySize, int numTopic)", "full_signature": "static Tuple4<DenseMatrix, DenseMatrix, Long, Long> onlineCorpusUpdate(\n        List<Vector> data, DenseMatrix lambda, DenseMatrix alpha, DenseMatrix gammad,\n        int vocabularySize, int numTopic)", "class_method_signature": "OnlineCorpusStep.onlineCorpusUpdate(\n        List<Vector> data, DenseMatrix lambda, DenseMatrix alpha, DenseMatrix gammad,\n        int vocabularySize, int numTopic)", "testcase": false, "constructor": false}, {"identifier": "onlineCorpusUpdate", "parameters": "(\n        List<Vector> data, DenseMatrix lambda, DenseMatrix alpha, DenseMatrix gammad,\n        int vocabularySize, int numTopic, double subSamplingRate)", "modifiers": "private static", "return": "Tuple4<DenseMatrix, DenseMatrix, Long, Long>", "signature": "Tuple4<DenseMatrix, DenseMatrix, Long, Long> onlineCorpusUpdate(\n        List<Vector> data, DenseMatrix lambda, DenseMatrix alpha, DenseMatrix gammad,\n        int vocabularySize, int numTopic, double subSamplingRate)", "full_signature": "private static Tuple4<DenseMatrix, DenseMatrix, Long, Long> onlineCorpusUpdate(\n        List<Vector> data, DenseMatrix lambda, DenseMatrix alpha, DenseMatrix gammad,\n        int vocabularySize, int numTopic, double subSamplingRate)", "class_method_signature": "OnlineCorpusStep.onlineCorpusUpdate(\n        List<Vector> data, DenseMatrix lambda, DenseMatrix alpha, DenseMatrix gammad,\n        int vocabularySize, int numTopic, double subSamplingRate)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/clustering/lda/OnlineCorpusStep.java"}, "focal_method": {"identifier": "calc", "parameters": "(ComContext context)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void calc(ComContext context) {\n        Tuple2<Long, Integer> tuple2 = ((List<Tuple2<Long, Integer>>) context.getObj(LdaVariable.shape)).get(0);\n        int vocabularySize = tuple2.f1;\n        List<Vector> data = context.getObj(LdaVariable.data);\n        DenseMatrix lambda;\n        DenseMatrix alpha;\n        //the first iteration\n        if (context.getStepNo() == 1) {\n            Tuple2<DenseMatrix, DenseMatrix> initGammaAndAlpha = ((List<Tuple2<DenseMatrix, DenseMatrix>>)\n                context.getObj(LdaVariable.initModel)).get(0);\n            lambda = initGammaAndAlpha.f0;\n            alpha = initGammaAndAlpha.f1;\n        } else {\n            lambda = context.getObj(LdaVariable.lambda);\n            alpha = context.getObj(LdaVariable.alpha);\n        }\n        if (data == null) {\n            context.putObj(LdaVariable.wordTopicStat, new double[numTopic * vocabularySize]);\n            context.putObj(LdaVariable.logPhatPart, new double[numTopic]);\n            context.putObj(LdaVariable.nonEmptyWordCount, new double[]{0});\n            context.putObj(LdaVariable.nonEmptyDocCount, new double[]{0});\n            return;\n        }\n        DenseMatrix gammad = null;\n        Tuple4<DenseMatrix, DenseMatrix, Long, Long> corpusUpdatedData =\n            onlineCorpusUpdate(data, lambda, alpha, gammad,\n                vocabularySize, numTopic, subSamplingRate);\n\n        context.putObj(LdaVariable.wordTopicStat, corpusUpdatedData.f0.getData().clone());\n        context.putObj(LdaVariable.logPhatPart, corpusUpdatedData.f1.getData().clone());\n        context.putObj(LdaVariable.nonEmptyWordCount, new double[]{corpusUpdatedData.f2});\n        context.putObj(LdaVariable.nonEmptyDocCount, new double[]{corpusUpdatedData.f3});\n    }", "signature": "void calc(ComContext context)", "full_signature": "@Override public void calc(ComContext context)", "class_method_signature": "OnlineCorpusStep.calc(ComContext context)", "testcase": false, "constructor": false, "invocations": ["get", "getObj", "getObj", "getStepNo", "get", "getObj", "getObj", "getObj", "putObj", "putObj", "putObj", "putObj", "onlineCorpusUpdate", "putObj", "clone", "getData", "putObj", "clone", "getData", "putObj", "putObj"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}