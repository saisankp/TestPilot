{"test_class": {"identifier": "MDLReaderTest", "superclass": "extends SimpleChemObjectReaderTest", "interfaces": "", "fields": [{"original_string": "private static ILoggingTool logger = LoggingToolFactory.createLoggingTool(MDLReaderTest.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger = LoggingToolFactory.createLoggingTool(MDLReaderTest.class)", "var_name": "logger"}], "file": "storage/ctab/src/test/java/org/openscience/cdk/io/MDLReaderTest.java"}, "test_case": {"identifier": "testAccepts", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testAccepts() {\n        MDLReader reader = new MDLReader();\n        reader.setReaderMode(Mode.STRICT);\n        Assert.assertTrue(reader.accepts(ChemFile.class));\n        Assert.assertTrue(reader.accepts(ChemModel.class));\n        Assert.assertTrue(reader.accepts(AtomContainer.class));\n    }", "signature": "void testAccepts()", "full_signature": "@Test public void testAccepts()", "class_method_signature": "MDLReaderTest.testAccepts()", "testcase": true, "constructor": false, "invocations": ["setReaderMode", "assertTrue", "accepts", "assertTrue", "accepts", "assertTrue", "accepts"]}, "focal_class": {"identifier": "MDLReader", "superclass": "extends DefaultChemObjectReader", "interfaces": "", "fields": [{"original_string": "BufferedReader               input          = null;", "modifier": "", "type": "BufferedReader", "declarator": "input          = null", "var_name": "input"}, {"original_string": "private static ILoggingTool  logger         = LoggingToolFactory.createLoggingTool(MDLReader.class);", "modifier": "private static", "type": "ILoggingTool", "declarator": "logger         = LoggingToolFactory.createLoggingTool(MDLReader.class)", "var_name": "logger"}, {"original_string": "private BooleanIOSetting     forceReadAs3DCoords;", "modifier": "private", "type": "BooleanIOSetting", "declarator": "forceReadAs3DCoords", "var_name": "forceReadAs3DCoords"}, {"original_string": "private static final Pattern TRAILING_SPACE = Pattern.compile(\"\\\\s+$\");", "modifier": "private static final", "type": "Pattern", "declarator": "TRAILING_SPACE = Pattern.compile(\"\\\\s+$\")", "var_name": "TRAILING_SPACE"}], "methods": [{"identifier": "MDLReader", "parameters": "()", "modifiers": "public", "return": "", "signature": " MDLReader()", "full_signature": "public  MDLReader()", "class_method_signature": "MDLReader.MDLReader()", "testcase": false, "constructor": true}, {"identifier": "MDLReader", "parameters": "(InputStream in)", "modifiers": "public", "return": "", "signature": " MDLReader(InputStream in)", "full_signature": "public  MDLReader(InputStream in)", "class_method_signature": "MDLReader.MDLReader(InputStream in)", "testcase": false, "constructor": true}, {"identifier": "MDLReader", "parameters": "(InputStream in, Mode mode)", "modifiers": "public", "return": "", "signature": " MDLReader(InputStream in, Mode mode)", "full_signature": "public  MDLReader(InputStream in, Mode mode)", "class_method_signature": "MDLReader.MDLReader(InputStream in, Mode mode)", "testcase": false, "constructor": true}, {"identifier": "MDLReader", "parameters": "(Reader in)", "modifiers": "public", "return": "", "signature": " MDLReader(Reader in)", "full_signature": "public  MDLReader(Reader in)", "class_method_signature": "MDLReader.MDLReader(Reader in)", "testcase": false, "constructor": true}, {"identifier": "MDLReader", "parameters": "(Reader in, Mode mode)", "modifiers": "public", "return": "", "signature": " MDLReader(Reader in, Mode mode)", "full_signature": "public  MDLReader(Reader in, Mode mode)", "class_method_signature": "MDLReader.MDLReader(Reader in, Mode mode)", "testcase": false, "constructor": true}, {"identifier": "getFormat", "parameters": "()", "modifiers": "@Override public", "return": "IResourceFormat", "signature": "IResourceFormat getFormat()", "full_signature": "@Override public IResourceFormat getFormat()", "class_method_signature": "MDLReader.getFormat()", "testcase": false, "constructor": false}, {"identifier": "setReader", "parameters": "(Reader input)", "modifiers": "@Override public", "return": "void", "signature": "void setReader(Reader input)", "full_signature": "@Override public void setReader(Reader input)", "class_method_signature": "MDLReader.setReader(Reader input)", "testcase": false, "constructor": false}, {"identifier": "setReader", "parameters": "(InputStream input)", "modifiers": "@Override public", "return": "void", "signature": "void setReader(InputStream input)", "full_signature": "@Override public void setReader(InputStream input)", "class_method_signature": "MDLReader.setReader(InputStream input)", "testcase": false, "constructor": false}, {"identifier": "accepts", "parameters": "(Class<? extends IChemObject> classObject)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean accepts(Class<? extends IChemObject> classObject)", "full_signature": "@Override public boolean accepts(Class<? extends IChemObject> classObject)", "class_method_signature": "MDLReader.accepts(Class<? extends IChemObject> classObject)", "testcase": false, "constructor": false}, {"identifier": "read", "parameters": "(T object)", "modifiers": "@Override public", "return": "T", "signature": "T read(T object)", "full_signature": "@Override public T read(T object)", "class_method_signature": "MDLReader.read(T object)", "testcase": false, "constructor": false}, {"identifier": "readChemModel", "parameters": "(IChemModel chemModel)", "modifiers": "private", "return": "IChemModel", "signature": "IChemModel readChemModel(IChemModel chemModel)", "full_signature": "private IChemModel readChemModel(IChemModel chemModel)", "class_method_signature": "MDLReader.readChemModel(IChemModel chemModel)", "testcase": false, "constructor": false}, {"identifier": "readChemFile", "parameters": "(IChemFile chemFile)", "modifiers": "private", "return": "IChemFile", "signature": "IChemFile readChemFile(IChemFile chemFile)", "full_signature": "private IChemFile readChemFile(IChemFile chemFile)", "class_method_signature": "MDLReader.readChemFile(IChemFile chemFile)", "testcase": false, "constructor": false}, {"identifier": "readMolecule", "parameters": "(IAtomContainer molecule)", "modifiers": "private", "return": "IAtomContainer", "signature": "IAtomContainer readMolecule(IAtomContainer molecule)", "full_signature": "private IAtomContainer readMolecule(IAtomContainer molecule)", "class_method_signature": "MDLReader.readMolecule(IAtomContainer molecule)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "MDLReader.close()", "testcase": false, "constructor": false}, {"identifier": "initIOSettings", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void initIOSettings()", "full_signature": "private void initIOSettings()", "class_method_signature": "MDLReader.initIOSettings()", "testcase": false, "constructor": false}, {"identifier": "customizeJob", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void customizeJob()", "full_signature": "public void customizeJob()", "class_method_signature": "MDLReader.customizeJob()", "testcase": false, "constructor": false}], "file": "storage/ctab/src/main/java/org/openscience/cdk/io/MDLReader.java"}, "focal_method": {"identifier": "accepts", "parameters": "(Class<? extends IChemObject> classObject)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean accepts(Class<? extends IChemObject> classObject) {\n        if (IChemFile.class.equals(classObject)) return true;\n        if (IChemModel.class.equals(classObject)) return true;\n        if (IAtomContainer.class.equals(classObject)) return true;\n        Class<?>[] interfaces = classObject.getInterfaces();\n        for (int i = 0; i < interfaces.length; i++) {\n            if (IChemFile.class.equals(interfaces[i])) return true;\n            if (IChemModel.class.equals(interfaces[i])) return true;\n            if (IAtomContainer.class.equals(interfaces[i])) return true;\n        }\n        Class superClass = classObject.getSuperclass();\n        if (superClass != null) return this.accepts(superClass);\n        return false;\n    }", "signature": "boolean accepts(Class<? extends IChemObject> classObject)", "full_signature": "@Override public boolean accepts(Class<? extends IChemObject> classObject)", "class_method_signature": "MDLReader.accepts(Class<? extends IChemObject> classObject)", "testcase": false, "constructor": false, "invocations": ["equals", "equals", "equals", "getInterfaces", "equals", "equals", "equals", "getSuperclass", "accepts"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}