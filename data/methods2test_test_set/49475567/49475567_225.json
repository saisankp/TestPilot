{"test_class": {"identifier": "SingleFieldSearchParserTest", "superclass": "extends AbstractSpecTest", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SingleFieldSearchParserTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SingleFieldSearchParserTest.class)", "var_name": "LOGGER"}, {"original_string": "@Autowired\n    private SingleFieldSearchParser parser;", "modifier": "@Autowired\n    private", "type": "SingleFieldSearchParser", "declarator": "parser", "var_name": "parser"}], "file": "geoclient-parser/src/test/java/gov/nyc/doitt/gis/geoclient/parser/SingleFieldSearchParserTest.java"}, "test_case": {"identifier": "testParse", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testParse()\n    {\n        List<ChunkSpec> specs =  specBuilder.getSpecs(\"AllParsers\");\n        assertThat(specs.isEmpty()).isFalse();\n        for (ChunkSpec spec : specs)\n        {\n            logSpecStart(LOGGER, spec);\n            Input input = spec.input();\n            LocationTokens locationTokens = this.parser.parse(input);\n            assertChunksEquals(spec.getId(), spec.getChunks(), locationTokens.getChunks(), LOGGER);\n        }\n    }", "signature": "void testParse()", "full_signature": "@Test public void testParse()", "class_method_signature": "SingleFieldSearchParserTest.testParse()", "testcase": true, "constructor": false, "invocations": ["getSpecs", "isFalse", "assertThat", "isEmpty", "logSpecStart", "input", "parse", "assertChunksEquals", "getId", "getChunks", "getChunks"]}, "focal_class": {"identifier": "SingleFieldSearchParser", "superclass": "", "interfaces": "implements LocationTokenizer", "fields": [{"original_string": "private List<Parser> parsers;", "modifier": "private", "type": "List<Parser>", "declarator": "parsers", "var_name": "parsers"}], "methods": [{"identifier": "SingleFieldSearchParser", "parameters": "(List<Parser> parsers)", "modifiers": "public", "return": "", "signature": " SingleFieldSearchParser(List<Parser> parsers)", "full_signature": "public  SingleFieldSearchParser(List<Parser> parsers)", "class_method_signature": "SingleFieldSearchParser.SingleFieldSearchParser(List<Parser> parsers)", "testcase": false, "constructor": true}, {"identifier": "parse", "parameters": "(Input input)", "modifiers": "@Override public", "return": "LocationTokens", "signature": "LocationTokens parse(Input input)", "full_signature": "@Override public LocationTokens parse(Input input)", "class_method_signature": "SingleFieldSearchParser.parse(Input input)", "testcase": false, "constructor": false}], "file": "geoclient-parser/src/main/java/gov/nyc/doitt/gis/geoclient/parser/SingleFieldSearchParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(Input input)", "modifiers": "@Override public", "return": "LocationTokens", "body": "@Override\n    public LocationTokens parse(Input input)\n    {\n        ParseContext parseContext = new ParseContext(input);\n        for (Parser parser : this.parsers)\n        {\n            parser.parse(parseContext);\n            if(parseContext.isParsed())\n            {\n                break;\n            }\n        }\n\n        return new LocationTokens(input, parseContext.getChunks());\n    }", "signature": "LocationTokens parse(Input input)", "full_signature": "@Override public LocationTokens parse(Input input)", "class_method_signature": "SingleFieldSearchParser.parse(Input input)", "testcase": false, "constructor": false, "invocations": ["parse", "isParsed", "getChunks"]}, "repository": {"repo_id": 49475567, "url": "https://github.com/CityOfNewYork/geoclient", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 42, "size": 9801, "license": "licensed"}}