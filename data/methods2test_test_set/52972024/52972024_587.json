{"test_class": {"identifier": "NonBlockingQueueTest", "superclass": "", "interfaces": "", "fields": [], "file": "CoreFeatures/Task/NonBlockingQueue/src/test/java/info/smart_tools/smartactors/task/non_blocking_queue/NonBlockingQueueTest.java"}, "test_case": {"identifier": "Should_callCallbackImmediately_When_thereAlreadyAreElementsInQueue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void Should_callCallbackImmediately_When_thereAlreadyAreElementsInQueue()\n            throws Exception {\n        Queue underlying = mock(Queue.class);\n\n        Runnable callback = mock(Runnable.class);\n\n        when(underlying.isEmpty()).thenReturn(false);\n\n        IQueue queue = new NonBlockingQueue(underlying);\n\n        queue.addNewItemCallback(callback);\n\n        verify(callback).run();\n    }", "signature": "void Should_callCallbackImmediately_When_thereAlreadyAreElementsInQueue()", "full_signature": "@Test public void Should_callCallbackImmediately_When_thereAlreadyAreElementsInQueue()", "class_method_signature": "NonBlockingQueueTest.Should_callCallbackImmediately_When_thereAlreadyAreElementsInQueue()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "thenReturn", "when", "isEmpty", "addNewItemCallback", "run", "verify"]}, "focal_class": {"identifier": "NonBlockingQueue", "superclass": "", "interfaces": "implements IQueue<T>", "fields": [{"original_string": "private final Queue<T> queue;", "modifier": "private final", "type": "Queue<T>", "declarator": "queue", "var_name": "queue"}, {"original_string": "private final List<Runnable> newElementCallbacks;", "modifier": "private final", "type": "List<Runnable>", "declarator": "newElementCallbacks", "var_name": "newElementCallbacks"}, {"original_string": "private final Object callbacksListLock;", "modifier": "private final", "type": "Object", "declarator": "callbacksListLock", "var_name": "callbacksListLock"}], "methods": [{"identifier": "NonBlockingQueue", "parameters": "(final Queue<T> queue)", "modifiers": "public", "return": "", "signature": " NonBlockingQueue(final Queue<T> queue)", "full_signature": "public  NonBlockingQueue(final Queue<T> queue)", "class_method_signature": "NonBlockingQueue.NonBlockingQueue(final Queue<T> queue)", "testcase": false, "constructor": true}, {"identifier": "put", "parameters": "(final T item)", "modifiers": "@Override public", "return": "void", "signature": "void put(final T item)", "full_signature": "@Override public void put(final T item)", "class_method_signature": "NonBlockingQueue.put(final T item)", "testcase": false, "constructor": false}, {"identifier": "take", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T take()", "full_signature": "@Override public T take()", "class_method_signature": "NonBlockingQueue.take()", "testcase": false, "constructor": false}, {"identifier": "tryTake", "parameters": "()", "modifiers": "@Override public", "return": "T", "signature": "T tryTake()", "full_signature": "@Override public T tryTake()", "class_method_signature": "NonBlockingQueue.tryTake()", "testcase": false, "constructor": false}, {"identifier": "addNewItemCallback", "parameters": "(final Runnable callback)", "modifiers": "@Override public", "return": "void", "signature": "void addNewItemCallback(final Runnable callback)", "full_signature": "@Override public void addNewItemCallback(final Runnable callback)", "class_method_signature": "NonBlockingQueue.addNewItemCallback(final Runnable callback)", "testcase": false, "constructor": false}, {"identifier": "removeNewItemCallback", "parameters": "(final Runnable callback)", "modifiers": "@Override public", "return": "void", "signature": "void removeNewItemCallback(final Runnable callback)", "full_signature": "@Override public void removeNewItemCallback(final Runnable callback)", "class_method_signature": "NonBlockingQueue.removeNewItemCallback(final Runnable callback)", "testcase": false, "constructor": false}], "file": "CoreFeatures/Task/NonBlockingQueue/src/main/java/info/smart_tools/smartactors/task/non_blocking_queue/NonBlockingQueue.java"}, "focal_method": {"identifier": "addNewItemCallback", "parameters": "(final Runnable callback)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void addNewItemCallback(final Runnable callback) {\n        synchronized (callbacksListLock) {\n            newElementCallbacks.add(callback);\n\n            if (!queue.isEmpty()) {\n                callback.run();\n            }\n        }\n    }", "signature": "void addNewItemCallback(final Runnable callback)", "full_signature": "@Override public void addNewItemCallback(final Runnable callback)", "class_method_signature": "NonBlockingQueue.addNewItemCallback(final Runnable callback)", "testcase": false, "constructor": false, "invocations": ["add", "isEmpty", "run"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}