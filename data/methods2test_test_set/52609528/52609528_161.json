{"test_class": {"identifier": "RequestPropertyFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String METHOD_PUT = \"PUT\";", "modifier": "private final", "type": "String", "declarator": "METHOD_PUT = \"PUT\"", "var_name": "METHOD_PUT"}, {"original_string": "private final String METHOD_PUT_POST_REGEX = \"PUT|POST\";", "modifier": "private final", "type": "String", "declarator": "METHOD_PUT_POST_REGEX = \"PUT|POST\"", "var_name": "METHOD_PUT_POST_REGEX"}, {"original_string": "private final String METHOD_GET = \"GET\";", "modifier": "private final", "type": "String", "declarator": "METHOD_GET = \"GET\"", "var_name": "METHOD_GET"}, {"original_string": "private final String PUT_REQUEST_REGEX = \"/playground/server/.*\";", "modifier": "private final", "type": "String", "declarator": "PUT_REQUEST_REGEX = \"/playground/server/.*\"", "var_name": "PUT_REQUEST_REGEX"}, {"original_string": "private final String PUT_REQUEST_URI = \"/playground/server/some_resource\";", "modifier": "private final", "type": "String", "declarator": "PUT_REQUEST_URI = \"/playground/server/some_resource\"", "var_name": "PUT_REQUEST_URI"}, {"original_string": "private final String OTHER_PUT_REQUEST_URI = \"/playground/server/some_other_resource\";", "modifier": "private final", "type": "String", "declarator": "OTHER_PUT_REQUEST_URI = \"/playground/server/some_other_resource\"", "var_name": "OTHER_PUT_REQUEST_URI"}], "file": "gateleen-logging/src/test/java/org/swisspush/gateleen/logging/RequestPropertyFilterTest.java"}, "test_case": {"identifier": "testPropertyMethodFilterRequest", "parameters": "(TestContext context)", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testPropertyMethodFilterRequest(TestContext context){\n        context.assertEquals(FilterResult.FILTER,\n                RequestPropertyFilter.filterProperty(new PUTRequest(), RequestPropertyFilter.METHOD, METHOD_PUT, false));\n\n        context.assertEquals(FilterResult.FILTER,\n                RequestPropertyFilter.filterProperty(new PUTRequest(), RequestPropertyFilter.METHOD, METHOD_PUT_POST_REGEX, false));\n    }", "signature": "void testPropertyMethodFilterRequest(TestContext context)", "full_signature": "@Test public void testPropertyMethodFilterRequest(TestContext context)", "class_method_signature": "RequestPropertyFilterTest.testPropertyMethodFilterRequest(TestContext context)", "testcase": true, "constructor": false, "invocations": ["assertEquals", "filterProperty", "assertEquals", "filterProperty"]}, "focal_class": {"identifier": "RequestPropertyFilter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String URL = \"url\";", "modifier": "public static final", "type": "String", "declarator": "URL = \"url\"", "var_name": "URL"}, {"original_string": "public static final String METHOD = \"method\";", "modifier": "public static final", "type": "String", "declarator": "METHOD = \"method\"", "var_name": "METHOD"}], "methods": [{"identifier": "filterProperty", "parameters": "(HttpServerRequest request, String filterPropertyKey, String filterPropertyValue, boolean reject)", "modifiers": "public static", "return": "FilterResult", "signature": "FilterResult filterProperty(HttpServerRequest request, String filterPropertyKey, String filterPropertyValue, boolean reject)", "full_signature": "public static FilterResult filterProperty(HttpServerRequest request, String filterPropertyKey, String filterPropertyValue, boolean reject)", "class_method_signature": "RequestPropertyFilter.filterProperty(HttpServerRequest request, String filterPropertyKey, String filterPropertyValue, boolean reject)", "testcase": false, "constructor": false}, {"identifier": "rejectIfNeeded", "parameters": "(boolean reject, boolean matches)", "modifiers": "private static", "return": "FilterResult", "signature": "FilterResult rejectIfNeeded(boolean reject, boolean matches)", "full_signature": "private static FilterResult rejectIfNeeded(boolean reject, boolean matches)", "class_method_signature": "RequestPropertyFilter.rejectIfNeeded(boolean reject, boolean matches)", "testcase": false, "constructor": false}, {"identifier": "filterRequestURL", "parameters": "(HttpServerRequest request, String url)", "modifiers": "private static", "return": "boolean", "signature": "boolean filterRequestURL(HttpServerRequest request, String url)", "full_signature": "private static boolean filterRequestURL(HttpServerRequest request, String url)", "class_method_signature": "RequestPropertyFilter.filterRequestURL(HttpServerRequest request, String url)", "testcase": false, "constructor": false}, {"identifier": "filterRequestMethod", "parameters": "(HttpServerRequest request, String method)", "modifiers": "private static", "return": "boolean", "signature": "boolean filterRequestMethod(HttpServerRequest request, String method)", "full_signature": "private static boolean filterRequestMethod(HttpServerRequest request, String method)", "class_method_signature": "RequestPropertyFilter.filterRequestMethod(HttpServerRequest request, String method)", "testcase": false, "constructor": false}, {"identifier": "logFilterResult", "parameters": "(HttpServerRequest request, String filterPropertyKey, String filterPropertyValue, FilterResult filterResult)", "modifiers": "private static", "return": "void", "signature": "void logFilterResult(HttpServerRequest request, String filterPropertyKey, String filterPropertyValue, FilterResult filterResult)", "full_signature": "private static void logFilterResult(HttpServerRequest request, String filterPropertyKey, String filterPropertyValue, FilterResult filterResult)", "class_method_signature": "RequestPropertyFilter.logFilterResult(HttpServerRequest request, String filterPropertyKey, String filterPropertyValue, FilterResult filterResult)", "testcase": false, "constructor": false}, {"identifier": "logFilterResult", "parameters": "(HttpServerRequest request, String filterPropertyKey, String filterPropertyValue, FilterResult filterResult, boolean noMatchingProperty)", "modifiers": "private static", "return": "void", "signature": "void logFilterResult(HttpServerRequest request, String filterPropertyKey, String filterPropertyValue, FilterResult filterResult, boolean noMatchingProperty)", "full_signature": "private static void logFilterResult(HttpServerRequest request, String filterPropertyKey, String filterPropertyValue, FilterResult filterResult, boolean noMatchingProperty)", "class_method_signature": "RequestPropertyFilter.logFilterResult(HttpServerRequest request, String filterPropertyKey, String filterPropertyValue, FilterResult filterResult, boolean noMatchingProperty)", "testcase": false, "constructor": false}], "file": "gateleen-logging/src/main/java/org/swisspush/gateleen/logging/RequestPropertyFilter.java"}, "focal_method": {"identifier": "filterProperty", "parameters": "(HttpServerRequest request, String filterPropertyKey, String filterPropertyValue, boolean reject)", "modifiers": "public static", "return": "FilterResult", "body": "public static FilterResult filterProperty(HttpServerRequest request, String filterPropertyKey, String filterPropertyValue, boolean reject) {\n\n        CaseInsensitiveHeaders headers = new CaseInsensitiveHeaders();\n        headers.setAll(request.headers());\n\n        if (URL.equals(filterPropertyKey)) {\n            boolean matches = filterRequestURL(request, filterPropertyValue);\n            FilterResult result = rejectIfNeeded(reject, matches);\n            logFilterResult(request, filterPropertyKey, filterPropertyValue, result);\n            return result;\n        }\n        if (METHOD.equals(filterPropertyKey)) {\n            boolean matches = filterRequestMethod(request, filterPropertyValue);\n            FilterResult result = rejectIfNeeded(reject, matches);\n            logFilterResult(request, filterPropertyKey, filterPropertyValue, result);\n            return result;\n        }\n        if (headers.names().contains(filterPropertyKey) && headers.get(filterPropertyKey).equalsIgnoreCase(filterPropertyValue)) {\n            FilterResult result = reject ? FilterResult.REJECT : FilterResult.FILTER;\n            logFilterResult(request, filterPropertyKey, filterPropertyValue, result);\n            return result;\n        }\n        logFilterResult(request, filterPropertyKey, filterPropertyValue, FilterResult.REJECT, true);\n        return FilterResult.REJECT;\n    }", "signature": "FilterResult filterProperty(HttpServerRequest request, String filterPropertyKey, String filterPropertyValue, boolean reject)", "full_signature": "public static FilterResult filterProperty(HttpServerRequest request, String filterPropertyKey, String filterPropertyValue, boolean reject)", "class_method_signature": "RequestPropertyFilter.filterProperty(HttpServerRequest request, String filterPropertyKey, String filterPropertyValue, boolean reject)", "testcase": false, "constructor": false, "invocations": ["setAll", "headers", "equals", "filterRequestURL", "rejectIfNeeded", "logFilterResult", "equals", "filterRequestMethod", "rejectIfNeeded", "logFilterResult", "contains", "names", "equalsIgnoreCase", "get", "logFilterResult", "logFilterResult"]}, "repository": {"repo_id": 52609528, "url": "https://github.com/swisspush/gateleen", "language": "Java", "is_fork": false, "fork_count": 28, "stargazer_count": 63, "size": 2919, "license": "licensed"}}