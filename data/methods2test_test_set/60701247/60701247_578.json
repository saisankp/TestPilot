{"test_class": {"identifier": "DefaultLineChartReducerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final float EPS = 1e-6f;", "modifier": "private static final", "type": "float", "declarator": "EPS = 1e-6f", "var_name": "EPS"}, {"original_string": "private static int FAKE_HEIGHT = 100;", "modifier": "private static", "type": "int", "declarator": "FAKE_HEIGHT = 100", "var_name": "FAKE_HEIGHT"}, {"original_string": "private DefaultLineChartReducer myReducer;", "modifier": "private", "type": "DefaultLineChartReducer", "declarator": "myReducer", "var_name": "myReducer"}, {"original_string": "private LineConfig myConfig;", "modifier": "private", "type": "LineConfig", "declarator": "myConfig", "var_name": "myConfig"}], "file": "adt-ui/src/test/java/com/android/tools/adtui/chart/linechart/DefaultLineChartReducerTest.java"}, "test_case": {"identifier": "simpleReducePath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void simpleReducePath() {\n    float[][] given = {{0, 0}, {0.1f, 1}, {0.2f, 6}, {0.3f, 4}, {1, 2}, {1.1f, 5}};\n    float[][] expected = {{0, 0}, {0.2f, 6}, {0.3f, 4}, {1, 2}, {1.1f, 5}};\n    convertToScreenCoordinates(given);\n    convertToScreenCoordinates(expected);\n\n    float[][] result = convertToArray(myReducer.reducePath(convertToPath(given), myConfig));\n    assertPointsEquals(expected, result);\n  }", "signature": "void simpleReducePath()", "full_signature": "@Test public void simpleReducePath()", "class_method_signature": "DefaultLineChartReducerTest.simpleReducePath()", "testcase": true, "constructor": false, "invocations": ["convertToScreenCoordinates", "convertToScreenCoordinates", "convertToArray", "reducePath", "convertToPath", "assertPointsEquals"]}, "focal_class": {"identifier": "DefaultLineChartReducer", "superclass": "", "interfaces": "implements LineChartReducer", "fields": [{"original_string": "private static final float EPS  = 1e-6f;", "modifier": "private static final", "type": "float", "declarator": "EPS  = 1e-6f", "var_name": "EPS"}, {"original_string": "private static int PATH_ITERATOR_COORDS_COUNT = 6;", "modifier": "private static", "type": "int", "declarator": "PATH_ITERATOR_COORDS_COUNT = 6", "var_name": "PATH_ITERATOR_COORDS_COUNT"}], "methods": [{"identifier": "reduceData", "parameters": "(@NotNull List<SeriesData<Long>> dataList, @NotNull LineConfig config)", "modifiers": "@Override public", "return": "List<SeriesData<Long>>", "signature": "List<SeriesData<Long>> reduceData(@NotNull List<SeriesData<Long>> dataList, @NotNull LineConfig config)", "full_signature": "@Override public List<SeriesData<Long>> reduceData(@NotNull List<SeriesData<Long>> dataList, @NotNull LineConfig config)", "class_method_signature": "DefaultLineChartReducer.reduceData(@NotNull List<SeriesData<Long>> dataList, @NotNull LineConfig config)", "testcase": false, "constructor": false}, {"identifier": "reducePath", "parameters": "(@NotNull Path2D path, @NotNull LineConfig config)", "modifiers": "@NotNull @Override public", "return": "Path2D", "signature": "Path2D reducePath(@NotNull Path2D path, @NotNull LineConfig config)", "full_signature": "@NotNull @Override public Path2D reducePath(@NotNull Path2D path, @NotNull LineConfig config)", "class_method_signature": "DefaultLineChartReducer.reducePath(@NotNull Path2D path, @NotNull LineConfig config)", "testcase": false, "constructor": false}, {"identifier": "addMinMaxPoints", "parameters": "(@NotNull Path2D path,\n                               @NotNull LineConfig config,\n                               int minIndex, float minX, float minY,\n                               int maxIndex, float maxX, float maxY)", "modifiers": "private static", "return": "void", "signature": "void addMinMaxPoints(@NotNull Path2D path,\n                               @NotNull LineConfig config,\n                               int minIndex, float minX, float minY,\n                               int maxIndex, float maxX, float maxY)", "full_signature": "private static void addMinMaxPoints(@NotNull Path2D path,\n                               @NotNull LineConfig config,\n                               int minIndex, float minX, float minY,\n                               int maxIndex, float maxX, float maxY)", "class_method_signature": "DefaultLineChartReducer.addMinMaxPoints(@NotNull Path2D path,\n                               @NotNull LineConfig config,\n                               int minIndex, float minX, float minY,\n                               int maxIndex, float maxX, float maxY)", "testcase": false, "constructor": false}, {"identifier": "addToResultPath", "parameters": "(@NotNull Path2D path, @NotNull LineConfig config, float ...coords)", "modifiers": "private static", "return": "void", "signature": "void addToResultPath(@NotNull Path2D path, @NotNull LineConfig config, float ...coords)", "full_signature": "private static void addToResultPath(@NotNull Path2D path, @NotNull LineConfig config, float ...coords)", "class_method_signature": "DefaultLineChartReducer.addToResultPath(@NotNull Path2D path, @NotNull LineConfig config, float ...coords)", "testcase": false, "constructor": false}, {"identifier": "addToSteppedLinePath", "parameters": "(@NotNull Path2D path, float x, float y)", "modifiers": "private static", "return": "void", "signature": "void addToSteppedLinePath(@NotNull Path2D path, float x, float y)", "full_signature": "private static void addToSteppedLinePath(@NotNull Path2D path, float x, float y)", "class_method_signature": "DefaultLineChartReducer.addToSteppedLinePath(@NotNull Path2D path, float x, float y)", "testcase": false, "constructor": false}, {"identifier": "addToPath", "parameters": "(@NotNull Path2D path, float x, float y)", "modifiers": "private static", "return": "void", "signature": "void addToPath(@NotNull Path2D path, float x, float y)", "full_signature": "private static void addToPath(@NotNull Path2D path, float x, float y)", "class_method_signature": "DefaultLineChartReducer.addToPath(@NotNull Path2D path, float x, float y)", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(float a, float b)", "modifiers": "private static", "return": "boolean", "signature": "boolean equals(float a, float b)", "full_signature": "private static boolean equals(float a, float b)", "class_method_signature": "DefaultLineChartReducer.equals(float a, float b)", "testcase": false, "constructor": false}], "file": "adt-ui/src/main/java/com/android/tools/adtui/chart/linechart/DefaultLineChartReducer.java"}, "focal_method": {"identifier": "reducePath", "parameters": "(@NotNull Path2D path, @NotNull LineConfig config)", "modifiers": "@NotNull @Override public", "return": "Path2D", "body": "@NotNull\n  @Override\n  public Path2D reducePath(@NotNull Path2D path, @NotNull LineConfig config) {\n    if (path.getCurrentPoint() == null) {\n      return path;\n    }\n\n    Path2D resultPath = new Path2D.Float();\n    float[] coords = new float[PATH_ITERATOR_COORDS_COUNT];\n    float pixel = -1;\n    float minX = -1, minY = -1;\n    float maxX = -1, maxY = -1;\n    float curX = -1, curY = -1;\n    int minIndex = -1, maxIndex = -1;\n    int curIndex = 0;\n\n    PathIterator iterator = path.getPathIterator(null);\n    while (!iterator.isDone()) {\n      int segType = iterator.currentSegment(coords);\n      assert segType == PathIterator.SEG_MOVETO || segType == PathIterator.SEG_LINETO;\n\n      float previousX = curX;\n      float previousY = curY;\n      curX = coords[0];\n      curY = coords[1];\n\n      if (curIndex > 0 && curX < previousX) {\n        // This can happen only for a filled line\n        break;\n      }\n\n      if (curIndex == 0 || curX >= pixel) {\n        // We entered into a new pixel\n\n        if (curIndex > 0) {\n          // Add min and max points from the previous pixel\n          addMinMaxPoints(resultPath, config, minIndex, minX, minY, maxIndex, maxX, maxY);\n\n          // Add the last point from the previous pixel\n          addToResultPath(resultPath, config, previousX, previousY);\n        }\n\n        pixel = (float)Math.floor(curX) + 1;\n        minX = maxX = curX;\n        minY = maxY = curY;\n        minIndex = maxIndex = curIndex;\n\n        // Add the first point from the current pixel\n        addToResultPath(resultPath, config, curX, curY);\n      } else {\n        // We are in the same pixel\n\n        if (minY > curY) {\n          minIndex = curIndex;\n          minX = curX;\n          minY = curY;\n        }\n\n        if (maxY <= curY) {\n          maxIndex = curIndex;\n          maxX = curX;\n          maxY = curY;\n        }\n      }\n\n      iterator.next();\n      curIndex++;\n    }\n\n    addMinMaxPoints(resultPath, config, minIndex, minX, minY, maxIndex, maxX, maxY);\n    addToResultPath(resultPath, config, curX, curY);\n\n    if (config.isStepped()) {\n      // The last point won't be added if Y value is the same with previous point, so let's add it\n      if (resultPath.getCurrentPoint() == null || equals((float)resultPath.getCurrentPoint().getY(), curY)) {\n        addToPath(resultPath, curX, curY);\n      }\n    }\n    return resultPath;\n  }", "signature": "Path2D reducePath(@NotNull Path2D path, @NotNull LineConfig config)", "full_signature": "@NotNull @Override public Path2D reducePath(@NotNull Path2D path, @NotNull LineConfig config)", "class_method_signature": "DefaultLineChartReducer.reducePath(@NotNull Path2D path, @NotNull LineConfig config)", "testcase": false, "constructor": false, "invocations": ["getCurrentPoint", "getPathIterator", "isDone", "currentSegment", "addMinMaxPoints", "addToResultPath", "floor", "addToResultPath", "next", "addMinMaxPoints", "addToResultPath", "isStepped", "getCurrentPoint", "equals", "getY", "getCurrentPoint", "addToPath"]}, "repository": {"repo_id": 60701247, "url": "https://github.com/JetBrains/android", "stars": 486, "created": "6/8/2016 1:46:48 PM +00:00", "updates": "2020-01-27T16:45:40+00:00", "fork": "False", "license": "licensed"}}