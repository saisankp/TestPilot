{"test_class": {"identifier": "StreamUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "agorava-core-impl/src/test/java/org/agorava/utils/StreamUtilsTest.java"}, "test_case": {"identifier": "shouldCorrectlyDecodeAStream", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldCorrectlyDecodeAStream() {\n        String value = \"expected\";\n        InputStream is = new ByteArrayInputStream(value.getBytes());\n        String decoded = StreamUtils.getStreamContents(is);\n        assertEquals(\"expected\", decoded);\n    }", "signature": "void shouldCorrectlyDecodeAStream()", "full_signature": "@Test public void shouldCorrectlyDecodeAStream()", "class_method_signature": "StreamUtilsTest.shouldCorrectlyDecodeAStream()", "testcase": true, "constructor": false, "invocations": ["getBytes", "getStreamContents", "assertEquals"]}, "focal_class": {"identifier": "StreamUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "StreamUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " StreamUtils()", "full_signature": "private  StreamUtils()", "class_method_signature": "StreamUtils.StreamUtils()", "testcase": false, "constructor": true}, {"identifier": "getStreamContents", "parameters": "(InputStream is)", "modifiers": "public static", "return": "String", "signature": "String getStreamContents(InputStream is)", "full_signature": "public static String getStreamContents(InputStream is)", "class_method_signature": "StreamUtils.getStreamContents(InputStream is)", "testcase": false, "constructor": false}], "file": "agorava-core-impl/src/main/java/org/agorava/utils/StreamUtils.java"}, "focal_method": {"identifier": "getStreamContents", "parameters": "(InputStream is)", "modifiers": "public static", "return": "String", "body": "public static String getStreamContents(InputStream is) {\n        Preconditions.checkNotNull(is, \"Cannot get String from a null object\");\n        try {\n            final char[] buffer = new char[0x10000];\n            StringBuilder out = new StringBuilder();\n            Reader in = new InputStreamReader(is, \"UTF-8\");\n            int read;\n            do {\n                read = in.read(buffer, 0, buffer.length);\n                if (read > 0) {\n                    out.append(buffer, 0, read);\n                }\n            } while (read >= 0);\n            in.close();\n            return out.toString();\n        } catch (IOException ioe) {\n            throw new IllegalStateException(\"Error while reading response body\", ioe);\n        }\n    }", "signature": "String getStreamContents(InputStream is)", "full_signature": "public static String getStreamContents(InputStream is)", "class_method_signature": "StreamUtils.getStreamContents(InputStream is)", "testcase": false, "constructor": false, "invocations": ["checkNotNull", "read", "append", "close", "toString"]}, "repository": {"repo_id": 4263930, "url": "https://github.com/agorava/agorava-core", "language": "Java", "is_fork": false, "fork_count": 19, "stargazer_count": 51, "size": 862, "license": "licensed"}}