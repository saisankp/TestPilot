{"test_class": {"identifier": "WeatherTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final Temperature temperature = new Temperature(32.0, TemperatureType.CELSIUS);", "modifier": "private final", "type": "Temperature", "declarator": "temperature = new Temperature(32.0, TemperatureType.CELSIUS)", "var_name": "temperature"}, {"original_string": "private final Pressure pressure = new Pressure(1020, PressureType.H_PA);", "modifier": "private final", "type": "Pressure", "declarator": "pressure = new Pressure(1020, PressureType.H_PA)", "var_name": "pressure"}, {"original_string": "private final Location location = new Location(\"Berlin\", Location.UNKNOWN, null);", "modifier": "private final", "type": "Location", "declarator": "location = new Location(\"Berlin\", Location.UNKNOWN, null)", "var_name": "location"}, {"original_string": "private final Instant timestamp = Instant.ofEpochSecond(1534332000);", "modifier": "private final", "type": "Instant", "declarator": "timestamp = Instant.ofEpochSecond(1534332000)", "var_name": "timestamp"}, {"original_string": "private final Weather weather = new Weather(\n\t\t\"42\",\n\t\ttemperature,\n\t\tpressure,\n\t\t45,\n\t\ttimestamp,\n\t\tlocation);", "modifier": "private final", "type": "Weather", "declarator": "weather = new Weather(\n\t\t\"42\",\n\t\ttemperature,\n\t\tpressure,\n\t\t45,\n\t\ttimestamp,\n\t\tlocation)", "var_name": "weather"}], "file": "server/src/test/java/org/jvalue/ods/processor/adapter/domain/weather/models/WeatherTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testEquals() {\n\t\tTemperature otherTemp = new Temperature(32.0, TemperatureType.CELSIUS);\n\t\tPressure otherPress = new Pressure(1020, PressureType.H_PA);\n\t\tLocation otherLoc = new Location(\"Berlin\", Location.UNKNOWN, null);\n\t\tWeather other = new Weather(\"42\", otherTemp, otherPress, 45, timestamp,\totherLoc);\n\n\t\tAssert.assertEquals(weather, other);\n\t}", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "WeatherTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["assertEquals"]}, "focal_class": {"identifier": "Weather", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final String stationId;", "modifier": "private final", "type": "String", "declarator": "stationId", "var_name": "stationId"}, {"original_string": "private final Temperature temperature;", "modifier": "private final", "type": "Temperature", "declarator": "temperature", "var_name": "temperature"}, {"original_string": "private final Pressure pressure;", "modifier": "private final", "type": "Pressure", "declarator": "pressure", "var_name": "pressure"}, {"original_string": "private final int humidityInPercent;", "modifier": "private final", "type": "int", "declarator": "humidityInPercent", "var_name": "humidityInPercent"}, {"original_string": "@JsonDeserialize(using = CustomInstantDeserializer.class)\n\tprivate final Instant timestamp;", "modifier": "@JsonDeserialize(using = CustomInstantDeserializer.class)\n\tprivate final", "type": "Instant", "declarator": "timestamp", "var_name": "timestamp"}, {"original_string": "private final Location location;", "modifier": "private final", "type": "Location", "declarator": "location", "var_name": "location"}], "methods": [{"identifier": "Weather", "parameters": "(\n\t\t@JsonProperty(\"stationId\") String stationId,\n\t\t@JsonProperty(\"temperature\") Temperature temperature,\n\t\t@JsonProperty(\"pressure\")Pressure pressure,\n\t\t@JsonProperty(\"humidityInPercent\") int humidityInPercent,\n\t\t@JsonProperty(\"timestamp\") Instant timestamp,\n\t\t@JsonProperty(\"location\") Location location)", "modifiers": "@JsonCreator public", "return": "", "signature": " Weather(\n\t\t@JsonProperty(\"stationId\") String stationId,\n\t\t@JsonProperty(\"temperature\") Temperature temperature,\n\t\t@JsonProperty(\"pressure\")Pressure pressure,\n\t\t@JsonProperty(\"humidityInPercent\") int humidityInPercent,\n\t\t@JsonProperty(\"timestamp\") Instant timestamp,\n\t\t@JsonProperty(\"location\") Location location)", "full_signature": "@JsonCreator public  Weather(\n\t\t@JsonProperty(\"stationId\") String stationId,\n\t\t@JsonProperty(\"temperature\") Temperature temperature,\n\t\t@JsonProperty(\"pressure\")Pressure pressure,\n\t\t@JsonProperty(\"humidityInPercent\") int humidityInPercent,\n\t\t@JsonProperty(\"timestamp\") Instant timestamp,\n\t\t@JsonProperty(\"location\") Location location)", "class_method_signature": "Weather.Weather(\n\t\t@JsonProperty(\"stationId\") String stationId,\n\t\t@JsonProperty(\"temperature\") Temperature temperature,\n\t\t@JsonProperty(\"pressure\")Pressure pressure,\n\t\t@JsonProperty(\"humidityInPercent\") int humidityInPercent,\n\t\t@JsonProperty(\"timestamp\") Instant timestamp,\n\t\t@JsonProperty(\"location\") Location location)", "testcase": false, "constructor": true}, {"identifier": "getStationId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getStationId()", "full_signature": "public String getStationId()", "class_method_signature": "Weather.getStationId()", "testcase": false, "constructor": false}, {"identifier": "getTemperature", "parameters": "()", "modifiers": "public", "return": "Temperature", "signature": "Temperature getTemperature()", "full_signature": "public Temperature getTemperature()", "class_method_signature": "Weather.getTemperature()", "testcase": false, "constructor": false}, {"identifier": "getPressure", "parameters": "()", "modifiers": "public", "return": "Pressure", "signature": "Pressure getPressure()", "full_signature": "public Pressure getPressure()", "class_method_signature": "Weather.getPressure()", "testcase": false, "constructor": false}, {"identifier": "getHumidityInPercent", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getHumidityInPercent()", "full_signature": "public int getHumidityInPercent()", "class_method_signature": "Weather.getHumidityInPercent()", "testcase": false, "constructor": false}, {"identifier": "getTimestamp", "parameters": "()", "modifiers": "public", "return": "Instant", "signature": "Instant getTimestamp()", "full_signature": "public Instant getTimestamp()", "class_method_signature": "Weather.getTimestamp()", "testcase": false, "constructor": false}, {"identifier": "getLocation", "parameters": "()", "modifiers": "public", "return": "Location", "signature": "Location getLocation()", "full_signature": "public Location getLocation()", "class_method_signature": "Weather.getLocation()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Weather.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Weather.hashCode()", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/jvalue/ods/processor/adapter/domain/weather/models/Weather.java"}, "focal_method": {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n\tpublic boolean equals(Object o) {\n\t\tif (this == o) return true;\n\t\tif (o == null || getClass() != o.getClass()) return false;\n\t\tWeather weather = (Weather) o;\n\t\treturn Double.compare(weather.humidityInPercent, humidityInPercent) == 0 &&\n\t\t\tObjects.equals(stationId, weather.stationId) &&\n\t\t\tObjects.equals(temperature, weather.temperature) &&\n\t\t\tObjects.equals(pressure, weather.pressure) &&\n\t\t\tObjects.equals(timestamp, weather.timestamp) &&\n\t\t\tObjects.equals(location, weather.location);\n\t}", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Weather.equals(Object o)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "compare", "equals", "equals", "equals", "equals", "equals"]}, "repository": {"repo_id": 14989619, "url": "https://github.com/jvalue/open-data-service-v1", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 6, "size": 4525, "license": "licensed"}}