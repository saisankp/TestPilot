{"test_class": {"identifier": "TestFormLevelRecognitionEventStrategy", "superclass": "", "interfaces": "", "fields": [{"original_string": "private VoiceXmlInterpreterContext context;", "modifier": "private", "type": "VoiceXmlInterpreterContext", "declarator": "context", "var_name": "context"}, {"original_string": "private DataModel model;", "modifier": "private", "type": "DataModel", "declarator": "model", "var_name": "model"}, {"original_string": "private VoiceXmlInterpreter interpreter;", "modifier": "private", "type": "VoiceXmlInterpreter", "declarator": "interpreter", "var_name": "interpreter"}], "file": "org.jvoicexml/src/test/java/org/jvoicexml/interpreter/event/TestFormLevelRecognitionEventStrategy.java"}, "test_case": {"identifier": "testProcess", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testProcess() throws Exception, JVoiceXMLEvent {\n        final VoiceXmlDocument document = new VoiceXmlDocument();\n        final Vxml vxml = document.getVxml();\n        final Form form = vxml.appendChild(Form.class);\n        final Initial initial = form.appendChild(Initial.class);\n        initial.setName(\"start\");\n        final Field field1 = form.appendChild(Field.class);\n        field1.setName(\"drink\");\n        field1.setSlot(\"order.drink\");\n        final Field field2 = form.appendChild(Field.class);\n        field2.setName(\"food\");\n        field2.setSlot(\"order.food\");\n        final Dialog dialog = new ExecutablePlainForm();\n        dialog.setNode(form);\n        final FormInterpretationAlgorithm fia = new FormInterpretationAlgorithm(\n                context, interpreter, dialog);\n        final FormLevelRecognitionEventStrategy strategy = new FormLevelRecognitionEventStrategy(\n                context, interpreter, fia, dialog);\n\n        final String drink = \"Cola\";\n        final String food = \"Pizza\";\n        final RecognitionResult result = Mockito.mock(RecognitionResult.class);\n        Mockito.when(result.getUtterance()).thenReturn(drink + \" and \" + food);\n        Mockito.when(result.isAccepted()).thenReturn(true);\n        Mockito.when(result.getConfidence()).thenReturn(0.55f);\n        Mockito.when(result.getMode()).thenReturn(ModeType.VOICE);\n        Mockito.when(result.getSemanticInterpretation(context.getDataModel()))\n                .thenReturn(drink + \" and \" + food);\n        Mockito.when(\n                model.readVariable(\"application.lastresult$.interpretation.\"\n                        + field1.getSlot(), Object.class)).thenReturn(drink);\n        Mockito.when(\n                model.existsVariable(\"application.lastresult$.interpretation.\"\n                        + field1.getSlot())).thenReturn(true);\n        Mockito.when(\n                model.readVariable(\"application.lastresult$.interpretation.\"\n                        + field2.getSlot(), Object.class)).thenReturn(food);\n        Mockito.when(\n                model.existsVariable(\"application.lastresult$.interpretation.\"\n                        + field2.getSlot())).thenReturn(true);\n\n        final RecognitionEvent event = new RecognitionEvent(null, null, result);\n        strategy.process(event);\n        Mockito.verify(model).updateVariable(field1.getName(), drink);\n        Mockito.verify(model).updateVariable(field2.getName(), food);\n    }", "signature": "void testProcess()", "full_signature": "@Test public void testProcess()", "class_method_signature": "TestFormLevelRecognitionEventStrategy.testProcess()", "testcase": true, "constructor": false, "invocations": ["getVxml", "appendChild", "appendChild", "setName", "appendChild", "setName", "setSlot", "appendChild", "setName", "setSlot", "setNode", "mock", "thenReturn", "when", "getUtterance", "thenReturn", "when", "isAccepted", "thenReturn", "when", "getConfidence", "thenReturn", "when", "getMode", "thenReturn", "when", "getSemanticInterpretation", "getDataModel", "thenReturn", "when", "readVariable", "getSlot", "thenReturn", "when", "existsVariable", "getSlot", "thenReturn", "when", "readVariable", "getSlot", "thenReturn", "when", "existsVariable", "getSlot", "process", "updateVariable", "verify", "getName", "updateVariable", "verify", "getName"]}, "focal_class": {"identifier": "FormLevelRecognitionEventStrategy", "superclass": "extends AbstractEventStrategy", "interfaces": "implements EventStrategyPrototype", "fields": [{"original_string": "private static final Logger LOGGER = LogManager\n            .getLogger(FormLevelRecognitionEventStrategy.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LogManager\n            .getLogger(FormLevelRecognitionEventStrategy.class)", "var_name": "LOGGER"}, {"original_string": "private final Dialog dialog;", "modifier": "private final", "type": "Dialog", "declarator": "dialog", "var_name": "dialog"}, {"original_string": "private Collection<InputItem> inputItems;", "modifier": "private", "type": "Collection<InputItem>", "declarator": "inputItems", "var_name": "inputItems"}, {"original_string": "private Collection<InitialFormItem> initalItems;", "modifier": "private", "type": "Collection<InitialFormItem>", "declarator": "initalItems", "var_name": "initalItems"}], "methods": [{"identifier": "FormLevelRecognitionEventStrategy", "parameters": "()", "modifiers": "", "return": "", "signature": " FormLevelRecognitionEventStrategy()", "full_signature": "  FormLevelRecognitionEventStrategy()", "class_method_signature": "FormLevelRecognitionEventStrategy.FormLevelRecognitionEventStrategy()", "testcase": false, "constructor": true}, {"identifier": "FormLevelRecognitionEventStrategy", "parameters": "(\n            final VoiceXmlInterpreterContext ctx,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm algorithm, final Dialog dlg)", "modifiers": "", "return": "", "signature": " FormLevelRecognitionEventStrategy(\n            final VoiceXmlInterpreterContext ctx,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm algorithm, final Dialog dlg)", "full_signature": "  FormLevelRecognitionEventStrategy(\n            final VoiceXmlInterpreterContext ctx,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm algorithm, final Dialog dlg)", "class_method_signature": "FormLevelRecognitionEventStrategy.FormLevelRecognitionEventStrategy(\n            final VoiceXmlInterpreterContext ctx,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm algorithm, final Dialog dlg)", "testcase": false, "constructor": true}, {"identifier": "getInputItems", "parameters": "()", "modifiers": "private", "return": "Collection<InputItem>", "signature": "Collection<InputItem> getInputItems()", "full_signature": "private Collection<InputItem> getInputItems()", "class_method_signature": "FormLevelRecognitionEventStrategy.getInputItems()", "testcase": false, "constructor": false}, {"identifier": "getInitialItems", "parameters": "()", "modifiers": "private", "return": "Collection<InitialFormItem>", "signature": "Collection<InitialFormItem> getInitialItems()", "full_signature": "private Collection<InitialFormItem> getInitialItems()", "class_method_signature": "FormLevelRecognitionEventStrategy.getInitialItems()", "testcase": false, "constructor": false}, {"identifier": "setApplicationLastResult", "parameters": "(final RecognitionResult result)", "modifiers": "private", "return": "void", "signature": "void setApplicationLastResult(final RecognitionResult result)", "full_signature": "private void setApplicationLastResult(final RecognitionResult result)", "class_method_signature": "FormLevelRecognitionEventStrategy.setApplicationLastResult(final RecognitionResult result)", "testcase": false, "constructor": false}, {"identifier": "process", "parameters": "(final JVoiceXMLEvent event)", "modifiers": "@Override public", "return": "void", "signature": "void process(final JVoiceXMLEvent event)", "full_signature": "@Override public void process(final JVoiceXMLEvent event)", "class_method_signature": "FormLevelRecognitionEventStrategy.process(final JVoiceXMLEvent event)", "testcase": false, "constructor": false}, {"identifier": "shouldExecute", "parameters": "(final Filled filled, final DataModel model)", "modifiers": "private", "return": "boolean", "signature": "boolean shouldExecute(final Filled filled, final DataModel model)", "full_signature": "private boolean shouldExecute(final Filled filled, final DataModel model)", "class_method_signature": "FormLevelRecognitionEventStrategy.shouldExecute(final Filled filled, final DataModel model)", "testcase": false, "constructor": false}, {"identifier": "areAllFilled", "parameters": "(final TokenList tokens, final DataModel model)", "modifiers": "private", "return": "boolean", "signature": "boolean areAllFilled(final TokenList tokens, final DataModel model)", "full_signature": "private boolean areAllFilled(final TokenList tokens, final DataModel model)", "class_method_signature": "FormLevelRecognitionEventStrategy.areAllFilled(final TokenList tokens, final DataModel model)", "testcase": false, "constructor": false}, {"identifier": "isAnyFilled", "parameters": "(final TokenList tokens, final DataModel model)", "modifiers": "private", "return": "boolean", "signature": "boolean isAnyFilled(final TokenList tokens, final DataModel model)", "full_signature": "private boolean isAnyFilled(final TokenList tokens, final DataModel model)", "class_method_signature": "FormLevelRecognitionEventStrategy.isAnyFilled(final TokenList tokens, final DataModel model)", "testcase": false, "constructor": false}, {"identifier": "setFilledInputItems", "parameters": "(final RecognitionResult result,\n            final Collection<InputItem> filtered)", "modifiers": "private", "return": "void", "signature": "void setFilledInputItems(final RecognitionResult result,\n            final Collection<InputItem> filtered)", "full_signature": "private void setFilledInputItems(final RecognitionResult result,\n            final Collection<InputItem> filtered)", "class_method_signature": "FormLevelRecognitionEventStrategy.setFilledInputItems(final RecognitionResult result,\n            final Collection<InputItem> filtered)", "testcase": false, "constructor": false}, {"identifier": "filterEvent", "parameters": "(final DataModel model,\n            final RecognitionResult result)", "modifiers": "private", "return": "Collection<InputItem>", "signature": "Collection<InputItem> filterEvent(final DataModel model,\n            final RecognitionResult result)", "full_signature": "private Collection<InputItem> filterEvent(final DataModel model,\n            final RecognitionResult result)", "class_method_signature": "FormLevelRecognitionEventStrategy.filterEvent(final DataModel model,\n            final RecognitionResult result)", "testcase": false, "constructor": false}, {"identifier": "setInitialFormItems", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void setInitialFormItems()", "full_signature": "private void setInitialFormItems()", "class_method_signature": "FormLevelRecognitionEventStrategy.setInitialFormItems()", "testcase": false, "constructor": false}, {"identifier": "newInstance", "parameters": "(final VoiceXmlInterpreterContext ctx,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm algorithm,\n            final FormItem formItem)", "modifiers": "@Override public", "return": "EventStrategy", "signature": "EventStrategy newInstance(final VoiceXmlInterpreterContext ctx,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm algorithm,\n            final FormItem formItem)", "full_signature": "@Override public EventStrategy newInstance(final VoiceXmlInterpreterContext ctx,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm algorithm,\n            final FormItem formItem)", "class_method_signature": "FormLevelRecognitionEventStrategy.newInstance(final VoiceXmlInterpreterContext ctx,\n            final VoiceXmlInterpreter interpreter,\n            final FormInterpretationAlgorithm algorithm,\n            final FormItem formItem)", "testcase": false, "constructor": false}], "file": "org.jvoicexml/src/main/java/org/jvoicexml/interpreter/event/FormLevelRecognitionEventStrategy.java"}, "focal_method": {"identifier": "process", "parameters": "(final JVoiceXMLEvent event)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void process(final JVoiceXMLEvent event) throws JVoiceXMLEvent {\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"processing event \" + event + \"...\");\n        }\n        final RecognitionEvent recognitionEvent = (RecognitionEvent) event;\n        final RecognitionResult result = recognitionEvent\n                .getRecognitionResult();\n        final VoiceXmlInterpreterContext context =\n                getVoiceXmlInterpreterContext();\n        final DataModel model = context.getDataModel();\n        setApplicationLastResult(result);\n        final Collection<InputItem> filtered = filterEvent(model, result);\n        if ((filtered == null) || filtered.isEmpty()) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"no matching form items: processing aborted\");\n            }\n            return;\n        }\n        setFilledInputItems(result, filtered);\n        setInitialFormItems();\n\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"executing filled elements...\");\n        }\n        final Collection<Filled> filledElements = dialog.getFilledElements();\n        final FormInterpretationAlgorithm fia =\n                getFormInterpretationAlgorithm();\n        final VoiceXmlInterpreter interpreter = getVoiceXmlInterpreter();\n        final TagStrategyExecutor executor = getTagStrategyExecutor();\n        for (Filled filled : filledElements) {\n            if (shouldExecute(filled, model)) {\n                executor.executeChildNodes(context, interpreter, fia, null,\n                        filled);\n            }\n        }\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"...done executing filled element\");\n        }\n    }", "signature": "void process(final JVoiceXMLEvent event)", "full_signature": "@Override public void process(final JVoiceXMLEvent event)", "class_method_signature": "FormLevelRecognitionEventStrategy.process(final JVoiceXMLEvent event)", "testcase": false, "constructor": false, "invocations": ["isDebugEnabled", "debug", "getRecognitionResult", "getVoiceXmlInterpreterContext", "getDataModel", "setApplicationLastResult", "filterEvent", "isEmpty", "isDebugEnabled", "debug", "setFilledInputItems", "setInitialFormItems", "isDebugEnabled", "debug", "getFilledElements", "getFormInterpretationAlgorithm", "getVoiceXmlInterpreter", "getTagStrategyExecutor", "shouldExecute", "executeChildNodes", "isDebugEnabled", "debug"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}