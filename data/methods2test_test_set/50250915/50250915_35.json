{"test_class": {"identifier": "GithubScmContentProviderTest", "superclass": "extends GithubMockBase", "interfaces": "", "fields": [], "file": "blueocean-github-pipeline/src/test/java/io/jenkins/blueocean/blueocean_github_pipeline/GithubScmContentProviderTest.java"}, "test_case": {"identifier": "getContentForOrgFolderGHE", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getContentForOrgFolderGHE() throws UnirestException {\n        String credentialId = createGithubEnterpriseCredential();\n\n        StaplerRequest staplerRequest = mockStapler(GithubEnterpriseScm.ID);\n\n        MultiBranchProject mbp = mockMbp(credentialId, user, GithubEnterpriseScm.DOMAIN_NAME);\n\n        GithubFile content = (GithubFile) new GithubScmContentProvider().getContent(staplerRequest, mbp);\n        assertEquals(\"Jenkinsfile\", content.getContent().getName());\n        assertEquals(\"e23b8ef5c2c4244889bf94db6c05cc08ea138aef\", content.getContent().getSha());\n        assertEquals(\"PR-demo\", content.getContent().getRepo());\n        assertEquals(\"cloudbeers\", content.getContent().getOwner());\n    }", "signature": "void getContentForOrgFolderGHE()", "full_signature": "@Test public void getContentForOrgFolderGHE()", "class_method_signature": "GithubScmContentProviderTest.getContentForOrgFolderGHE()", "testcase": true, "constructor": false, "invocations": ["createGithubEnterpriseCredential", "mockStapler", "mockMbp", "getContent", "assertEquals", "getName", "getContent", "assertEquals", "getSha", "getContent", "assertEquals", "getRepo", "getContent", "assertEquals", "getOwner", "getContent"]}, "focal_class": {"identifier": "GithubScmContentProvider", "superclass": "extends AbstractScmContentProvider", "interfaces": "", "fields": [], "methods": [{"identifier": "getScmId", "parameters": "()", "modifiers": "@Nonnull @Override public", "return": "String", "signature": "String getScmId()", "full_signature": "@Nonnull @Override public String getScmId()", "class_method_signature": "GithubScmContentProvider.getScmId()", "testcase": false, "constructor": false}, {"identifier": "getApiUrl", "parameters": "(@Nonnull Item item)", "modifiers": "@Override public", "return": "String", "signature": "String getApiUrl(@Nonnull Item item)", "full_signature": "@Override public String getApiUrl(@Nonnull Item item)", "class_method_signature": "GithubScmContentProvider.getApiUrl(@Nonnull Item item)", "testcase": false, "constructor": false}, {"identifier": "getContent", "parameters": "(ScmGetRequest request)", "modifiers": "@Override protected", "return": "Object", "signature": "Object getContent(ScmGetRequest request)", "full_signature": "@Override protected Object getContent(ScmGetRequest request)", "class_method_signature": "GithubScmContentProvider.getContent(ScmGetRequest request)", "testcase": false, "constructor": false}, {"identifier": "getScmParamsFromItem", "parameters": "(Item item)", "modifiers": "@Override protected", "return": "ScmContentProviderParams", "signature": "ScmContentProviderParams getScmParamsFromItem(Item item)", "full_signature": "@Override protected ScmContentProviderParams getScmParamsFromItem(Item item)", "class_method_signature": "GithubScmContentProvider.getScmParamsFromItem(Item item)", "testcase": false, "constructor": false}, {"identifier": "saveContent", "parameters": "(@Nonnull StaplerRequest staplerRequest, @Nonnull Item item)", "modifiers": "@Override public", "return": "Object", "signature": "Object saveContent(@Nonnull StaplerRequest staplerRequest, @Nonnull Item item)", "full_signature": "@Override public Object saveContent(@Nonnull StaplerRequest staplerRequest, @Nonnull Item item)", "class_method_signature": "GithubScmContentProvider.saveContent(@Nonnull StaplerRequest staplerRequest, @Nonnull Item item)", "testcase": false, "constructor": false}, {"identifier": "saveContent", "parameters": "(@Nonnull GithubScmSaveFileRequest githubRequest, @Nonnull Item item)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Object", "signature": "Object saveContent(@Nonnull GithubScmSaveFileRequest githubRequest, @Nonnull Item item)", "full_signature": "@SuppressWarnings(\"unchecked\") private Object saveContent(@Nonnull GithubScmSaveFileRequest githubRequest, @Nonnull Item item)", "class_method_signature": "GithubScmContentProvider.saveContent(@Nonnull GithubScmSaveFileRequest githubRequest, @Nonnull Item item)", "testcase": false, "constructor": false}, {"identifier": "support", "parameters": "(@Nonnull Item item)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "boolean", "signature": "boolean support(@Nonnull Item item)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public boolean support(@Nonnull Item item)", "class_method_signature": "GithubScmContentProvider.support(@Nonnull Item item)", "testcase": false, "constructor": false}, {"identifier": "isItemUsingGithubScm", "parameters": "(@Nonnull Item item)", "modifiers": "@SuppressWarnings(\"unchecked\") protected", "return": "boolean", "signature": "boolean isItemUsingGithubScm(@Nonnull Item item)", "full_signature": "@SuppressWarnings(\"unchecked\") protected boolean isItemUsingGithubScm(@Nonnull Item item)", "class_method_signature": "GithubScmContentProvider.isItemUsingGithubScm(@Nonnull Item item)", "testcase": false, "constructor": false}], "file": "blueocean-github-pipeline/src/main/java/io/jenkins/blueocean/blueocean_github_pipeline/GithubScmContentProvider.java"}, "focal_method": {"identifier": "getContent", "parameters": "(ScmGetRequest request)", "modifiers": "@Override protected", "return": "Object", "body": "@Override\n    protected Object getContent(ScmGetRequest request) {\n        GithubScm.validateUserHasPushPermission(request.getApiUrl(), request.getCredentials().getPassword().getPlainText(), request.getOwner(), request.getRepo());\n\n        String url = String.format(\"%s/repos/%s/%s/contents/%s\",\n                request.getApiUrl(),\n                request.getOwner(),\n                request.getRepo(),\n                request.getPath());\n        if(request.getBranch() != null){ //if branch is present fetch this file from branch\n            url += \"?ref=\"+request.getBranch();\n        }\n        try {\n            Map ghContent = HttpRequest.get(url)\n                    .withAuthorizationToken(request.getCredentials().getPassword().getPlainText())\n                    .to(Map.class);\n\n            if(ghContent == null){\n                throw new ServiceException.UnexpectedErrorException(\"Failed to load file: \"+request.getPath());\n            }\n\n            String base64Data = (String)ghContent.get(\"content\");\n            // JENKINS-47887 - this content contains \\n which breaks IE11\n            base64Data = base64Data == null ? null : base64Data.replace(\"\\n\", \"\");\n            return new GithubFile(new GitContent.Builder()\n                    .sha((String)ghContent.get(\"sha\"))\n                    .name((String)ghContent.get(\"name\"))\n                    .repo(request.getRepo())\n                    .owner(request.getOwner())\n                    .path(request.getPath())\n                    .base64Data(base64Data)\n                    .build());\n        } catch (IOException e) {\n            throw new ServiceException.UnexpectedErrorException(String.format(\"Failed to load file %s: %s\", request.getPath(),e.getMessage()), e);\n        }\n    }", "signature": "Object getContent(ScmGetRequest request)", "full_signature": "@Override protected Object getContent(ScmGetRequest request)", "class_method_signature": "GithubScmContentProvider.getContent(ScmGetRequest request)", "testcase": false, "constructor": false, "invocations": ["validateUserHasPushPermission", "getApiUrl", "getPlainText", "getPassword", "getCredentials", "getOwner", "getRepo", "format", "getApiUrl", "getOwner", "getRepo", "getPath", "getBranch", "getBranch", "to", "withAuthorizationToken", "get", "getPlainText", "getPassword", "getCredentials", "getPath", "get", "replace", "build", "base64Data", "path", "owner", "repo", "name", "sha", "get", "get", "getRepo", "getOwner", "getPath", "format", "getPath", "getMessage"]}, "repository": {"repo_id": 50250915, "url": "https://github.com/jenkinsci/blueocean-plugin", "stars": 2605, "created": "1/23/2016 6:02:45 PM +00:00", "updates": "2020-01-25T17:58:46+00:00", "fork": "False", "license": "licensed"}}