{"test_class": {"identifier": "DetectorMapperCacheTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Cache<String, String> cache;", "modifier": "@Mock\n    private", "type": "Cache<String, String>", "declarator": "cache", "var_name": "cache"}, {"original_string": "@InjectMocks\n    private DetectorMapperCache detectorMapperCache = new DetectorMapperCache(new MetricRegistry());", "modifier": "@InjectMocks\n    private", "type": "DetectorMapperCache", "declarator": "detectorMapperCache = new DetectorMapperCache(new MetricRegistry())", "var_name": "detectorMapperCache"}, {"original_string": "private String detectorIds;", "modifier": "private", "type": "String", "declarator": "detectorIds", "var_name": "detectorIds"}, {"original_string": "private List<Detector> detectors;", "modifier": "private", "type": "List<Detector>", "declarator": "detectors", "var_name": "detectors"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/mapper/DetectorMapperCacheTest.java"}, "test_case": {"identifier": "get", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void get() {\n        val key = \"metricKeyWithValue\";\n        val key2 = \"metricKeyWithOutValue\";\n        detectors = Collections.singletonList(new Detector(\"cid\", UUID.randomUUID()));\n        detectorIds = CacheUtil.getDetectors(detectors);\n\n        Mockito.when(cache.getIfPresent(key)).thenReturn(detectorIds);\n\n        Assert.assertEquals(detectors, detectorMapperCache.get(key));\n        verify(cache, times(1)).getIfPresent(key);\n\n        Assert.assertEquals(Collections.emptyList(), detectorMapperCache.get(key2));\n        verify(cache, times(1)).getIfPresent(key);\n\n    }", "signature": "void get()", "full_signature": "@Test public void get()", "class_method_signature": "DetectorMapperCacheTest.get()", "testcase": true, "constructor": false, "invocations": ["singletonList", "randomUUID", "getDetectors", "thenReturn", "when", "getIfPresent", "assertEquals", "get", "getIfPresent", "verify", "times", "assertEquals", "emptyList", "get", "getIfPresent", "verify", "times"]}, "focal_class": {"identifier": "DetectorMapperCache", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Cache<String, String> cache;", "modifier": "private", "type": "Cache<String, String>", "declarator": "cache", "var_name": "cache"}], "methods": [{"identifier": "DetectorMapperCache", "parameters": "(MetricRegistry metricRegistry)", "modifiers": "public", "return": "", "signature": " DetectorMapperCache(MetricRegistry metricRegistry)", "full_signature": "public  DetectorMapperCache(MetricRegistry metricRegistry)", "class_method_signature": "DetectorMapperCache.DetectorMapperCache(MetricRegistry metricRegistry)", "testcase": false, "constructor": true}, {"identifier": "metricsFor", "parameters": "(String cacheName, final Cache cache)", "modifiers": "private", "return": "MetricSet", "signature": "MetricSet metricsFor(String cacheName, final Cache cache)", "full_signature": "private MetricSet metricsFor(String cacheName, final Cache cache)", "class_method_signature": "DetectorMapperCache.metricsFor(String cacheName, final Cache cache)", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(String key)", "modifiers": "public", "return": "List<Detector>", "signature": "List<Detector> get(String key)", "full_signature": "public List<Detector> get(String key)", "class_method_signature": "DetectorMapperCache.get(String key)", "testcase": false, "constructor": false}, {"identifier": "put", "parameters": "(String key, List<Detector> detectors)", "modifiers": "public", "return": "void", "signature": "void put(String key, List<Detector> detectors)", "full_signature": "public void put(String key, List<Detector> detectors)", "class_method_signature": "DetectorMapperCache.put(String key, List<Detector> detectors)", "testcase": false, "constructor": false}, {"identifier": "removeDisabledDetectorMappings", "parameters": "(List<DetectorMapping> disabledMappings)", "modifiers": "public", "return": "void", "signature": "void removeDisabledDetectorMappings(List<DetectorMapping> disabledMappings)", "full_signature": "public void removeDisabledDetectorMappings(List<DetectorMapping> disabledMappings)", "class_method_signature": "DetectorMapperCache.removeDisabledDetectorMappings(List<DetectorMapping> disabledMappings)", "testcase": false, "constructor": false}, {"identifier": "removeDisabledDetectors", "parameters": "(List<Detector> detectorsToBeDisabled, String detectorsString)", "modifiers": "private", "return": "String", "signature": "String removeDisabledDetectors(List<Detector> detectorsToBeDisabled, String detectorsString)", "full_signature": "private String removeDisabledDetectors(List<Detector> detectorsToBeDisabled, String detectorsString)", "class_method_signature": "DetectorMapperCache.removeDisabledDetectors(List<Detector> detectorsToBeDisabled, String detectorsString)", "testcase": false, "constructor": false}, {"identifier": "invalidateMetricsWithOldDetectorMappings", "parameters": "(List<DetectorMapping> detectorMappings)", "modifiers": "public", "return": "void", "signature": "void invalidateMetricsWithOldDetectorMappings(List<DetectorMapping> detectorMappings)", "full_signature": "public void invalidateMetricsWithOldDetectorMappings(List<DetectorMapping> detectorMappings)", "class_method_signature": "DetectorMapperCache.invalidateMetricsWithOldDetectorMappings(List<DetectorMapping> detectorMappings)", "testcase": false, "constructor": false}, {"identifier": "findTags", "parameters": "(List<DetectorMapping> newDetectorMappings)", "modifiers": "private", "return": "List<Map<String, String>>", "signature": "List<Map<String, String>> findTags(List<DetectorMapping> newDetectorMappings)", "full_signature": "private List<Map<String, String>> findTags(List<DetectorMapping> newDetectorMappings)", "class_method_signature": "DetectorMapperCache.findTags(List<DetectorMapping> newDetectorMappings)", "testcase": false, "constructor": false}, {"identifier": "doMetricTagsMatchesWithTagsPresentInExpression", "parameters": "(Map<String, String> metricTags,\n                                                                   List<Map<String, String>> tagsFromDetectorMappingExpression)", "modifiers": "private", "return": "boolean", "signature": "boolean doMetricTagsMatchesWithTagsPresentInExpression(Map<String, String> metricTags,\n                                                                   List<Map<String, String>> tagsFromDetectorMappingExpression)", "full_signature": "private boolean doMetricTagsMatchesWithTagsPresentInExpression(Map<String, String> metricTags,\n                                                                   List<Map<String, String>> tagsFromDetectorMappingExpression)", "class_method_signature": "DetectorMapperCache.doMetricTagsMatchesWithTagsPresentInExpression(Map<String, String> metricTags,\n                                                                   List<Map<String, String>> tagsFromDetectorMappingExpression)", "testcase": false, "constructor": false}, {"identifier": "findTagsFromDetectorMappingExpression", "parameters": "(ExpressionTree expression)", "modifiers": "private", "return": "Map<String, String>", "signature": "Map<String, String> findTagsFromDetectorMappingExpression(ExpressionTree expression)", "full_signature": "private Map<String, String> findTagsFromDetectorMappingExpression(ExpressionTree expression)", "class_method_signature": "DetectorMapperCache.findTagsFromDetectorMappingExpression(ExpressionTree expression)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/mapper/DetectorMapperCache.java"}, "focal_method": {"identifier": "get", "parameters": "(String key)", "modifiers": "public", "return": "List<Detector>", "body": "public List<Detector> get(String key) {\n        String detectorsString = cache.getIfPresent(key);\n        if (detectorsString == null) {\n            return Collections.emptyList();\n        } else {\n            return CacheUtil.buildDetectors(detectorsString);\n        }\n    }", "signature": "List<Detector> get(String key)", "full_signature": "public List<Detector> get(String key)", "class_method_signature": "DetectorMapperCache.get(String key)", "testcase": false, "constructor": false, "invocations": ["getIfPresent", "emptyList", "buildDetectors"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}