{"test_class": {"identifier": "SubscriberTest", "superclass": "", "interfaces": "", "fields": [], "file": "zava/src/test/java/rx/SubscriberTest.java"}, "test_case": {"identifier": "testRequestFromFinalSubscribeWithoutRequestValue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testRequestFromFinalSubscribeWithoutRequestValue() {\n        Subscriber<String> s = new TestSubscriber<String>();\n        final AtomicLong r = new AtomicLong();\n        s.setProducer(new Producer() {\n\n            @Override\n            public void request(long n) {\n                r.set(n);\n            }\n\n        });\n        assertEquals(Long.MAX_VALUE, r.get());\n    }", "signature": "void testRequestFromFinalSubscribeWithoutRequestValue()", "full_signature": "@Test public void testRequestFromFinalSubscribeWithoutRequestValue()", "class_method_signature": "SubscriberTest.testRequestFromFinalSubscribeWithoutRequestValue()", "testcase": true, "constructor": false, "invocations": ["setProducer", "set", "assertEquals", "get"]}, "focal_class": {"identifier": "Subscriber", "superclass": "", "interfaces": "implements Observer<T>, Subscription", "fields": [{"original_string": "private final SubscriptionList cs;", "modifier": "private final", "type": "SubscriptionList", "declarator": "cs", "var_name": "cs"}, {"original_string": "private final Subscriber<?> op;", "modifier": "private final", "type": "Subscriber<?>", "declarator": "op", "var_name": "op"}, {"original_string": "private Producer p;", "modifier": "private", "type": "Producer", "declarator": "p", "var_name": "p"}, {"original_string": "private long requested = Long.MIN_VALUE;", "modifier": "private", "type": "long", "declarator": "requested = Long.MIN_VALUE", "var_name": "requested"}], "methods": [{"identifier": "Subscriber", "parameters": "()", "modifiers": "protected", "return": "", "signature": " Subscriber()", "full_signature": "protected  Subscriber()", "class_method_signature": "Subscriber.Subscriber()", "testcase": false, "constructor": true}, {"identifier": "Subscriber", "parameters": "(Subscriber<?> op)", "modifiers": "protected", "return": "", "signature": " Subscriber(Subscriber<?> op)", "full_signature": "protected  Subscriber(Subscriber<?> op)", "class_method_signature": "Subscriber.Subscriber(Subscriber<?> op)", "testcase": false, "constructor": true}, {"identifier": "Subscriber", "parameters": "(Subscriber<?> op, boolean shareSubscriptions)", "modifiers": "protected", "return": "", "signature": " Subscriber(Subscriber<?> op, boolean shareSubscriptions)", "full_signature": "protected  Subscriber(Subscriber<?> op, boolean shareSubscriptions)", "class_method_signature": "Subscriber.Subscriber(Subscriber<?> op, boolean shareSubscriptions)", "testcase": false, "constructor": true}, {"identifier": "add", "parameters": "(Subscription s)", "modifiers": "public final", "return": "void", "signature": "void add(Subscription s)", "full_signature": "public final void add(Subscription s)", "class_method_signature": "Subscriber.add(Subscription s)", "testcase": false, "constructor": false}, {"identifier": "unsubscribe", "parameters": "()", "modifiers": "@Override public final", "return": "void", "signature": "void unsubscribe()", "full_signature": "@Override public final void unsubscribe()", "class_method_signature": "Subscriber.unsubscribe()", "testcase": false, "constructor": false}, {"identifier": "isUnsubscribed", "parameters": "()", "modifiers": "@Override public final", "return": "boolean", "signature": "boolean isUnsubscribed()", "full_signature": "@Override public final boolean isUnsubscribed()", "class_method_signature": "Subscriber.isUnsubscribed()", "testcase": false, "constructor": false}, {"identifier": "onStart", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void onStart()", "full_signature": "public void onStart()", "class_method_signature": "Subscriber.onStart()", "testcase": false, "constructor": false}, {"identifier": "request", "parameters": "(long n)", "modifiers": "protected final", "return": "void", "signature": "void request(long n)", "full_signature": "protected final void request(long n)", "class_method_signature": "Subscriber.request(long n)", "testcase": false, "constructor": false}, {"identifier": "setProducer", "parameters": "(Producer producer)", "modifiers": "public", "return": "void", "signature": "void setProducer(Producer producer)", "full_signature": "public void setProducer(Producer producer)", "class_method_signature": "Subscriber.setProducer(Producer producer)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/Subscriber.java"}, "focal_method": {"identifier": "setProducer", "parameters": "(Producer producer)", "modifiers": "public", "return": "void", "body": "public void setProducer(Producer producer) {\n        long toRequest;\n        boolean setProducer = false;\n        synchronized (this) {\n            toRequest = requested;\n            p = producer;\n            if (op != null) {\n                // middle operator ... we pass thru unless a request has been made\n                if (toRequest == Long.MIN_VALUE) {\n                    // we pass-thru to the next producer as nothing has been requested\n                    setProducer = true;\n                }\n\n            }\n        }\n        // do after releasing lock\n        if (setProducer) {\n            op.setProducer(p);\n        } else {\n            // we execute the request with whatever has been requested (or Long.MAX_VALUE)\n            if (toRequest == Long.MIN_VALUE) {\n                p.request(Long.MAX_VALUE);\n            } else {\n                p.request(toRequest);\n            }\n        }\n    }", "signature": "void setProducer(Producer producer)", "full_signature": "public void setProducer(Producer producer)", "class_method_signature": "Subscriber.setProducer(Producer producer)", "testcase": false, "constructor": false, "invocations": ["setProducer", "request", "request"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}