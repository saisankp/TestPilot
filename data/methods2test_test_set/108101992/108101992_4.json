{"test_class": {"identifier": "IRIBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "producer/src/test/java/de/ubleipzig/iiifproducer/producer/IRIBuilderTest.java"}, "test_case": {"identifier": "testBuildImageServiceContext", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void testBuildImageServiceContext() {\n        final Config config = new Config();\n        config.setIsUBLImageService(true);\n        config.setViewId(\"12345\");\n        config.setImageServiceBaseUrl(\"https://iiif.ub.uni-leipzig.de/iiif\");\n        config.setImageServiceImageDirPrefix(\"/j2k/\");\n        final IRIBuilder iriBuilder = new IRIBuilder(config);\n        final String imageServiceContext = iriBuilder.buildImageServiceContext(\"12345\");\n        assertEquals(\"https://iiif.ub.uni-leipzig.de/iiif/j2k/0000/0123/0000012345\", imageServiceContext);\n    }", "signature": "void testBuildImageServiceContext()", "full_signature": "@Test void testBuildImageServiceContext()", "class_method_signature": "IRIBuilderTest.testBuildImageServiceContext()", "testcase": true, "constructor": false, "invocations": ["setIsUBLImageService", "setViewId", "setImageServiceBaseUrl", "setImageServiceImageDirPrefix", "buildImageServiceContext", "assertEquals"]}, "focal_class": {"identifier": "IRIBuilder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Config config;", "modifier": "private", "type": "Config", "declarator": "config", "var_name": "config"}, {"original_string": "private static final RDF rdf = new SimpleRDF();", "modifier": "private static final", "type": "RDF", "declarator": "rdf = new SimpleRDF()", "var_name": "rdf"}], "methods": [{"identifier": "IRIBuilder", "parameters": "(final Config config)", "modifiers": "public", "return": "", "signature": " IRIBuilder(final Config config)", "full_signature": "public  IRIBuilder(final Config config)", "class_method_signature": "IRIBuilder.IRIBuilder(final Config config)", "testcase": false, "constructor": true}, {"identifier": "buildCanvasIRI", "parameters": "(final String canvasIdString)", "modifiers": "public", "return": "IRI", "signature": "IRI buildCanvasIRI(final String canvasIdString)", "full_signature": "public IRI buildCanvasIRI(final String canvasIdString)", "class_method_signature": "IRIBuilder.buildCanvasIRI(final String canvasIdString)", "testcase": false, "constructor": false}, {"identifier": "buildResourceIRI", "parameters": "(final String resourceIdString)", "modifiers": "public", "return": "IRI", "signature": "IRI buildResourceIRI(final String resourceIdString)", "full_signature": "public IRI buildResourceIRI(final String resourceIdString)", "class_method_signature": "IRIBuilder.buildResourceIRI(final String resourceIdString)", "testcase": false, "constructor": false}, {"identifier": "buildServiceIRI", "parameters": "(final String imageServiceContext, final String resourceIdString)", "modifiers": "public", "return": "IRI", "signature": "IRI buildServiceIRI(final String imageServiceContext, final String resourceIdString)", "full_signature": "public IRI buildServiceIRI(final String imageServiceContext, final String resourceIdString)", "class_method_signature": "IRIBuilder.buildServiceIRI(final String imageServiceContext, final String resourceIdString)", "testcase": false, "constructor": false}, {"identifier": "buildImageServiceContext", "parameters": "(final String viewId)", "modifiers": "public", "return": "String", "signature": "String buildImageServiceContext(final String viewId)", "full_signature": "public String buildImageServiceContext(final String viewId)", "class_method_signature": "IRIBuilder.buildImageServiceContext(final String viewId)", "testcase": false, "constructor": false}, {"identifier": "buildCanvasIRIfromPhysical", "parameters": "(final String physical)", "modifiers": "public", "return": "String", "signature": "String buildCanvasIRIfromPhysical(final String physical)", "full_signature": "public String buildCanvasIRIfromPhysical(final String physical)", "class_method_signature": "IRIBuilder.buildCanvasIRIfromPhysical(final String physical)", "testcase": false, "constructor": false}, {"identifier": "buildAnnotationId", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String buildAnnotationId()", "full_signature": "public String buildAnnotationId()", "class_method_signature": "IRIBuilder.buildAnnotationId()", "testcase": false, "constructor": false}, {"identifier": "IRIBuilder", "parameters": "()", "modifiers": "private", "return": "", "signature": " IRIBuilder()", "full_signature": "private  IRIBuilder()", "class_method_signature": "IRIBuilder.IRIBuilder()", "testcase": false, "constructor": true}], "file": "producer/src/main/java/de/ubleipzig/iiifproducer/producer/IRIBuilder.java"}, "focal_method": {"identifier": "buildImageServiceContext", "parameters": "(final String viewId)", "modifiers": "public", "return": "String", "body": "public String buildImageServiceContext(final String viewId) {\n        final int viewIdInt = parseInt(viewId);\n        final String v = format(\"%010d\", viewIdInt);\n        final String imageDirPrefix = config.getImageServiceImageDirPrefix();\n        final int part1 = parseInt(v.substring(0,4));\n        final String first = format(\"%04d\", part1);\n        final int part2 = parseInt(v.substring(5,8));\n        final String second = format(\"%04d\", part2);\n        if (config.getIsUBLImageService()) {\n            return config.getImageServiceBaseUrl() + imageDirPrefix + first + separator + second + separator + v;\n        } else {\n            return config.getImageServiceBaseUrl() + viewId;\n        }\n    }", "signature": "String buildImageServiceContext(final String viewId)", "full_signature": "public String buildImageServiceContext(final String viewId)", "class_method_signature": "IRIBuilder.buildImageServiceContext(final String viewId)", "testcase": false, "constructor": false, "invocations": ["parseInt", "format", "getImageServiceImageDirPrefix", "parseInt", "substring", "format", "parseInt", "substring", "format", "getIsUBLImageService", "getImageServiceBaseUrl", "getImageServiceBaseUrl"]}, "repository": {"repo_id": 108101992, "url": "https://github.com/ubleipzig/iiif-producer", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 95115, "license": "licensed"}}