{"test_class": {"identifier": "ListsTest", "superclass": "", "interfaces": "", "fields": [], "file": "brave/src/test/java/brave/internal/collect/ListsTest.java"}, "test_case": {"identifier": "concat_concatenates", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void concat_concatenates() {\n    List<Object> list1 = ImmutableList.of(\"foo\");\n    List<Object> list2 = ImmutableList.of(\"bar\", \"baz\");\n\n    assertThat(Lists.concat(list1, list2))\n      .hasSameClassAs(Collections.unmodifiableList(list1))\n      .containsExactly(\"foo\", \"bar\", \"baz\");\n  }", "signature": "void concat_concatenates()", "full_signature": "@Test public void concat_concatenates()", "class_method_signature": "ListsTest.concat_concatenates()", "testcase": true, "constructor": false, "invocations": ["of", "of", "containsExactly", "hasSameClassAs", "assertThat", "concat", "unmodifiableList"]}, "focal_class": {"identifier": "Lists", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "ensureMutable", "parameters": "(List<E> list)", "modifiers": "public static", "return": "List<E>", "signature": "List<E> ensureMutable(List<E> list)", "full_signature": "public static List<E> ensureMutable(List<E> list)", "class_method_signature": "Lists.ensureMutable(List<E> list)", "testcase": false, "constructor": false}, {"identifier": "ensureImmutable", "parameters": "(List<E> list)", "modifiers": "public static", "return": "List<E>", "signature": "List<E> ensureImmutable(List<E> list)", "full_signature": "public static List<E> ensureImmutable(List<E> list)", "class_method_signature": "Lists.ensureImmutable(List<E> list)", "testcase": false, "constructor": false}, {"identifier": "isImmutable", "parameters": "(List<?> extra)", "modifiers": "static", "return": "boolean", "signature": "boolean isImmutable(List<?> extra)", "full_signature": "static boolean isImmutable(List<?> extra)", "class_method_signature": "Lists.isImmutable(List<?> extra)", "testcase": false, "constructor": false}, {"identifier": "concat", "parameters": "(List<E> left, List<E> right)", "modifiers": "public static", "return": "List<E>", "signature": "List<E> concat(List<E> left, List<E> right)", "full_signature": "public static List<E> concat(List<E> left, List<E> right)", "class_method_signature": "Lists.concat(List<E> left, List<E> right)", "testcase": false, "constructor": false}, {"identifier": "Lists", "parameters": "()", "modifiers": "", "return": "", "signature": " Lists()", "full_signature": "  Lists()", "class_method_signature": "Lists.Lists()", "testcase": false, "constructor": true}], "file": "brave/src/main/java/brave/internal/collect/Lists.java"}, "focal_method": {"identifier": "concat", "parameters": "(List<E> left, List<E> right)", "modifiers": "public static", "return": "List<E>", "body": "public static <E> List<E> concat(List<E> left, List<E> right) {\n    int leftSize = left.size();\n    if (leftSize == 0) return right;\n    int rightSize = right.size();\n    if (rightSize == 0) return left;\n\n    // We have to concat. Use Arrays.asList instead of ArrayList as it is simpler due to fixed size\n    E[] array = (E[]) new Object[leftSize + rightSize];\n    int i = 0;\n    for (int l = 0; l < leftSize; l++) {\n      array[i++] = left.get(l);\n    }\n    for (int r = 0; r < rightSize; r++) {\n      array[i++] = right.get(r);\n    }\n    return Collections.unmodifiableList(Arrays.asList(array));\n  }", "signature": "List<E> concat(List<E> left, List<E> right)", "full_signature": "public static List<E> concat(List<E> left, List<E> right)", "class_method_signature": "Lists.concat(List<E> left, List<E> right)", "testcase": false, "constructor": false, "invocations": ["size", "size", "get", "get", "unmodifiableList", "asList"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}