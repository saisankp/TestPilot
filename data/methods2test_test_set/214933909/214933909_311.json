{"test_class": {"identifier": "UserControllerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private WebApplicationContext webApplicationContext;", "modifier": "@Autowired\n    private", "type": "WebApplicationContext", "declarator": "webApplicationContext", "var_name": "webApplicationContext"}, {"original_string": "@MockBean\n    private UserLoginInterceptor userLoginInterceptor;", "modifier": "@MockBean\n    private", "type": "UserLoginInterceptor", "declarator": "userLoginInterceptor", "var_name": "userLoginInterceptor"}, {"original_string": "@MockBean\n    private CommStatusInterceptor commStatusInterceptor;", "modifier": "@MockBean\n    private", "type": "CommStatusInterceptor", "declarator": "commStatusInterceptor", "var_name": "commStatusInterceptor"}, {"original_string": "@MockBean\n    private PermissionService permissionService;", "modifier": "@MockBean\n    private", "type": "PermissionService", "declarator": "permissionService", "var_name": "permissionService"}, {"original_string": "@MockBean\n    private Message message;", "modifier": "@MockBean\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@MockBean\n    private UserService userService;", "modifier": "@MockBean\n    private", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "@MockBean\n    private LoginUserDao loginUserDao;", "modifier": "@MockBean\n    private", "type": "LoginUserDao", "declarator": "loginUserDao", "var_name": "loginUserDao"}, {"original_string": "private MockMvc mockMvc;", "modifier": "private", "type": "MockMvc", "declarator": "mockMvc", "var_name": "mockMvc"}, {"original_string": "private String requestJson;", "modifier": "private", "type": "String", "declarator": "requestJson", "var_name": "requestJson"}], "file": "das-console-manager/src/test/java/com/ppdai/das/console/controller/UserControllerTest.java"}, "test_case": {"identifier": "delete", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void delete() throws Exception {\n        mockMvc.perform(MockMvcRequestBuilders.delete(\"/user/delete\")\n                .contentType(MediaType.APPLICATION_JSON_UTF8)\n                .content(requestJson)\n                .accept(MediaType.APPLICATION_JSON_UTF8))\n                .andExpect(MockMvcResultMatchers.status().isOk())\n                .andDo(MockMvcResultHandlers.print());\n    }", "signature": "void delete()", "full_signature": "@Test public void delete()", "class_method_signature": "UserControllerTest.delete()", "testcase": true, "constructor": false, "invocations": ["andDo", "andExpect", "perform", "accept", "content", "contentType", "delete", "isOk", "status", "print"]}, "focal_class": {"identifier": "UserController", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private Message message;", "modifier": "@Autowired\n    private", "type": "Message", "declarator": "message", "var_name": "message"}, {"original_string": "@Autowired\n    private UserService userService;", "modifier": "@Autowired\n    private", "type": "UserService", "declarator": "userService", "var_name": "userService"}, {"original_string": "@Autowired\n    private LoginUserDao loginUserDao;", "modifier": "@Autowired\n    private", "type": "LoginUserDao", "declarator": "loginUserDao", "var_name": "loginUserDao"}], "methods": [{"identifier": "findGroupUserList", "parameters": "(@RequestParam(value = \"groupId\", defaultValue = \"0\") Long groupId)", "modifiers": "@RequestMapping(value = \"/group/users\") public", "return": "ServiceResult<List<LoginUser>>", "signature": "ServiceResult<List<LoginUser>> findGroupUserList(@RequestParam(value = \"groupId\", defaultValue = \"0\") Long groupId)", "full_signature": "@RequestMapping(value = \"/group/users\") public ServiceResult<List<LoginUser>> findGroupUserList(@RequestParam(value = \"groupId\", defaultValue = \"0\") Long groupId)", "class_method_signature": "UserController.findGroupUserList(@RequestParam(value = \"groupId\", defaultValue = \"0\") Long groupId)", "testcase": false, "constructor": false}, {"identifier": "findUserPageList", "parameters": "(@RequestBody Paging<LoginUser> paging)", "modifiers": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public", "return": "ServiceResult<ListResult<LoginUserView>>", "signature": "ServiceResult<ListResult<LoginUserView>> findUserPageList(@RequestBody Paging<LoginUser> paging)", "full_signature": "@RequestMapping(value = \"/list\", method = RequestMethod.POST) public ServiceResult<ListResult<LoginUserView>> findUserPageList(@RequestBody Paging<LoginUser> paging)", "class_method_signature": "UserController.findUserPageList(@RequestBody Paging<LoginUser> paging)", "testcase": false, "constructor": false}, {"identifier": "getWorkInfo", "parameters": "(@RequestParam(value = \"name\", defaultValue = \"\") String name, @CurrentUser LoginUser user)", "modifiers": "@RequestMapping(value = \"/getWorkInfo\") public", "return": "ServiceResult<LoginUser>", "signature": "ServiceResult<LoginUser> getWorkInfo(@RequestParam(value = \"name\", defaultValue = \"\") String name, @CurrentUser LoginUser user)", "full_signature": "@RequestMapping(value = \"/getWorkInfo\") public ServiceResult<LoginUser> getWorkInfo(@RequestParam(value = \"name\", defaultValue = \"\") String name, @CurrentUser LoginUser user)", "class_method_signature": "UserController.getWorkInfo(@RequestParam(value = \"name\", defaultValue = \"\") String name, @CurrentUser LoginUser user)", "testcase": false, "constructor": false}, {"identifier": "addUser", "parameters": "(@Validated(AddUser.class) @RequestBody LoginUser user, @CurrentUser LoginUser currentUser, Errors errors)", "modifiers": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> addUser(@Validated(AddUser.class) @RequestBody LoginUser user, @CurrentUser LoginUser currentUser, Errors errors)", "full_signature": "@RequestMapping(value = \"/add\", method = RequestMethod.POST) public ServiceResult<String> addUser(@Validated(AddUser.class) @RequestBody LoginUser user, @CurrentUser LoginUser currentUser, Errors errors)", "class_method_signature": "UserController.addUser(@Validated(AddUser.class) @RequestBody LoginUser user, @CurrentUser LoginUser currentUser, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "update", "parameters": "(@Validated(UpdateUser.class) @RequestBody LoginUser user, @CurrentUser LoginUser currentUser, Errors errors)", "modifiers": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> update(@Validated(UpdateUser.class) @RequestBody LoginUser user, @CurrentUser LoginUser currentUser, Errors errors)", "full_signature": "@RequestMapping(value = \"/update\", method = RequestMethod.PUT) public ServiceResult<String> update(@Validated(UpdateUser.class) @RequestBody LoginUser user, @CurrentUser LoginUser currentUser, Errors errors)", "class_method_signature": "UserController.update(@Validated(UpdateUser.class) @RequestBody LoginUser user, @CurrentUser LoginUser currentUser, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(@Validated(DeleteUser.class) @RequestBody LoginUser user, @CurrentUser LoginUser currentUser, Errors errors)", "modifiers": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public", "return": "ServiceResult<String>", "signature": "ServiceResult<String> delete(@Validated(DeleteUser.class) @RequestBody LoginUser user, @CurrentUser LoginUser currentUser, Errors errors)", "full_signature": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public ServiceResult<String> delete(@Validated(DeleteUser.class) @RequestBody LoginUser user, @CurrentUser LoginUser currentUser, Errors errors)", "class_method_signature": "UserController.delete(@Validated(DeleteUser.class) @RequestBody LoginUser user, @CurrentUser LoginUser currentUser, Errors errors)", "testcase": false, "constructor": false}, {"identifier": "getDataBaseButton", "parameters": "(@CurrentUser LoginUser user)", "modifiers": "@RequestMapping(\"/buttons\") public", "return": "ServiceResult", "signature": "ServiceResult getDataBaseButton(@CurrentUser LoginUser user)", "full_signature": "@RequestMapping(\"/buttons\") public ServiceResult getDataBaseButton(@CurrentUser LoginUser user)", "class_method_signature": "UserController.getDataBaseButton(@CurrentUser LoginUser user)", "testcase": false, "constructor": false}], "file": "das-console-manager/src/main/java/com/ppdai/das/console/controller/UserController.java"}, "focal_method": {"identifier": "delete", "parameters": "(@Validated(DeleteUser.class) @RequestBody LoginUser user, @CurrentUser LoginUser currentUser, Errors errors)", "modifiers": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public", "return": "ServiceResult<String>", "body": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE)\n    public ServiceResult<String> delete(@Validated(DeleteUser.class) @RequestBody LoginUser user, @CurrentUser LoginUser currentUser, Errors errors) throws Exception {\n        ValidateResult validateRes = userService.validatePermision(currentUser, errors)\n                .addAssert(() -> userService.canUpdateOrDeleteUser(currentUser, user), message.permisson_user_crud)\n                .addAssert(() -> loginUserDao.deleteUser(user.getId()) > 1, message.db_message_delete_operation_failed).validate();\n        if (!validateRes.isValid()) {\n            return ServiceResult.fail(validateRes.getSummarize());\n        }\n        return ServiceResult.success();\n    }", "signature": "ServiceResult<String> delete(@Validated(DeleteUser.class) @RequestBody LoginUser user, @CurrentUser LoginUser currentUser, Errors errors)", "full_signature": "@RequestMapping(value = \"/delete\", method = RequestMethod.DELETE) public ServiceResult<String> delete(@Validated(DeleteUser.class) @RequestBody LoginUser user, @CurrentUser LoginUser currentUser, Errors errors)", "class_method_signature": "UserController.delete(@Validated(DeleteUser.class) @RequestBody LoginUser user, @CurrentUser LoginUser currentUser, Errors errors)", "testcase": false, "constructor": false, "invocations": ["validate", "addAssert", "addAssert", "validatePermision", "canUpdateOrDeleteUser", "deleteUser", "getId", "isValid", "fail", "getSummarize", "success"]}, "repository": {"repo_id": 214933909, "url": "https://github.com/ppdaicorp/das", "stars": 55, "created": "10/14/2019 2:49:17 AM +00:00", "updates": "2020-01-20T09:24:23+00:00", "fork": "False", "license": "licensed"}}