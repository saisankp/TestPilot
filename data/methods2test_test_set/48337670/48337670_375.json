{"test_class": {"identifier": "AbstractResourceIconProviderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private IconProvider provider;", "modifier": "private", "type": "IconProvider", "declarator": "provider", "var_name": "provider"}, {"original_string": "private @Mock TranslationProvider i18nProviderMock;", "modifier": "private @Mock", "type": "TranslationProvider", "declarator": "i18nProviderMock", "var_name": "i18nProviderMock"}], "file": "bundles/org.openhab.core.ui.icon/src/test/java/org/openhab/core/ui/icon/AbstractResourceIconProviderTest.java"}, "test_case": {"identifier": "testWithQuantityTypeState", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithQuantityTypeState() throws IOException {\n        try (InputStream is = provider.getIcon(\"x\", \"classic\", \"34 \u00b0C\", Format.PNG)) {\n            assertThat(new String(is.readAllBytes(), StandardCharsets.UTF_8), is(\"x-30.png\"));\n        }\n    }", "signature": "void testWithQuantityTypeState()", "full_signature": "@Test public void testWithQuantityTypeState()", "class_method_signature": "AbstractResourceIconProviderTest.testWithQuantityTypeState()", "testcase": true, "constructor": false, "invocations": ["getIcon", "assertThat", "readAllBytes", "is"]}, "focal_class": {"identifier": "AbstractResourceIconProvider", "superclass": "", "interfaces": "implements IconProvider", "fields": [{"original_string": "private final Logger logger = LoggerFactory.getLogger(AbstractResourceIconProvider.class);", "modifier": "private final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(AbstractResourceIconProvider.class)", "var_name": "logger"}, {"original_string": "protected final TranslationProvider i18nProvider;", "modifier": "protected final", "type": "TranslationProvider", "declarator": "i18nProvider", "var_name": "i18nProvider"}], "methods": [{"identifier": "AbstractResourceIconProvider", "parameters": "(final TranslationProvider i18nProvider)", "modifiers": "public", "return": "", "signature": " AbstractResourceIconProvider(final TranslationProvider i18nProvider)", "full_signature": "public  AbstractResourceIconProvider(final TranslationProvider i18nProvider)", "class_method_signature": "AbstractResourceIconProvider.AbstractResourceIconProvider(final TranslationProvider i18nProvider)", "testcase": false, "constructor": true}, {"identifier": "getIconSets", "parameters": "()", "modifiers": "@Override public", "return": "Set<IconSet>", "signature": "Set<IconSet> getIconSets()", "full_signature": "@Override public Set<IconSet> getIconSets()", "class_method_signature": "AbstractResourceIconProvider.getIconSets()", "testcase": false, "constructor": false}, {"identifier": "hasIcon", "parameters": "(String category, String iconSetId, Format format)", "modifiers": "@Override public @Nullable", "return": "Integer", "signature": "Integer hasIcon(String category, String iconSetId, Format format)", "full_signature": "@Override public @Nullable Integer hasIcon(String category, String iconSetId, Format format)", "class_method_signature": "AbstractResourceIconProvider.hasIcon(String category, String iconSetId, Format format)", "testcase": false, "constructor": false}, {"identifier": "getIcon", "parameters": "(String category, String iconSetId, @Nullable String state, Format format)", "modifiers": "@Override public @Nullable", "return": "InputStream", "signature": "InputStream getIcon(String category, String iconSetId, @Nullable String state, Format format)", "full_signature": "@Override public @Nullable InputStream getIcon(String category, String iconSetId, @Nullable String state, Format format)", "class_method_signature": "AbstractResourceIconProvider.getIcon(String category, String iconSetId, @Nullable String state, Format format)", "testcase": false, "constructor": false}, {"identifier": "getPriority", "parameters": "()", "modifiers": "protected abstract", "return": "Integer", "signature": "Integer getPriority()", "full_signature": "protected abstract Integer getPriority()", "class_method_signature": "AbstractResourceIconProvider.getPriority()", "testcase": false, "constructor": false}, {"identifier": "getResource", "parameters": "(String iconSetId, String resourceName)", "modifiers": "protected abstract @Nullable", "return": "InputStream", "signature": "InputStream getResource(String iconSetId, String resourceName)", "full_signature": "protected abstract @Nullable InputStream getResource(String iconSetId, String resourceName)", "class_method_signature": "AbstractResourceIconProvider.getResource(String iconSetId, String resourceName)", "testcase": false, "constructor": false}, {"identifier": "hasResource", "parameters": "(String iconSetId, String resourceName)", "modifiers": "protected abstract", "return": "boolean", "signature": "boolean hasResource(String iconSetId, String resourceName)", "full_signature": "protected abstract boolean hasResource(String iconSetId, String resourceName)", "class_method_signature": "AbstractResourceIconProvider.hasResource(String iconSetId, String resourceName)", "testcase": false, "constructor": false}], "file": "bundles/org.openhab.core.ui.icon/src/main/java/org/openhab/core/ui/icon/AbstractResourceIconProvider.java"}, "focal_method": {"identifier": "getIcon", "parameters": "(String category, String iconSetId, @Nullable String state, Format format)", "modifiers": "@Override public @Nullable", "return": "InputStream", "body": "@Override\n    public @Nullable InputStream getIcon(String category, String iconSetId, @Nullable String state, Format format) {\n        String resourceWithoutState = category.toLowerCase() + \".\" + format.toString().toLowerCase();\n        if (state == null) {\n            return getResource(iconSetId, resourceWithoutState);\n        }\n\n        String iconState;\n        if (state.contains(\" \")) {\n            try {\n                String firstPart = state.substring(0, state.indexOf(\" \"));\n                Double.valueOf(firstPart);\n                iconState = firstPart;\n            } catch (NumberFormatException e) {\n                // firstPart is not a number, pass on the full state\n                iconState = state;\n            }\n        } else {\n            iconState = state;\n        }\n\n        String resourceWithState = category.toLowerCase() + \"-\" + iconState.toLowerCase() + \".\"\n                + format.toString().toLowerCase();\n        if (hasResource(iconSetId, resourceWithState)) {\n            return getResource(iconSetId, resourceWithState);\n        } else {\n            // let's treat all percentage-based categories\n            try {\n                Double stateAsDouble = Double.valueOf(iconState);\n                if (stateAsDouble >= 0 && stateAsDouble <= 100) {\n                    for (int i = stateAsDouble.intValue(); i >= 0; i--) {\n                        String resourceWithNumberState = category.toLowerCase() + \"-\" + i + \".\"\n                                + format.toString().toLowerCase();\n                        if (hasResource(iconSetId, resourceWithNumberState)) {\n                            return getResource(iconSetId, resourceWithNumberState);\n                        }\n                    }\n                }\n            } catch (NumberFormatException e) {\n                // does not seem to be a number, so ignore it\n            }\n            logger.debug(\"Use icon {} as {} is not found\", resourceWithoutState, resourceWithState);\n            return getResource(iconSetId, resourceWithoutState);\n        }\n    }", "signature": "InputStream getIcon(String category, String iconSetId, @Nullable String state, Format format)", "full_signature": "@Override public @Nullable InputStream getIcon(String category, String iconSetId, @Nullable String state, Format format)", "class_method_signature": "AbstractResourceIconProvider.getIcon(String category, String iconSetId, @Nullable String state, Format format)", "testcase": false, "constructor": false, "invocations": ["toLowerCase", "toLowerCase", "toString", "getResource", "contains", "substring", "indexOf", "valueOf", "toLowerCase", "toLowerCase", "toLowerCase", "toString", "hasResource", "getResource", "valueOf", "intValue", "toLowerCase", "toLowerCase", "toString", "hasResource", "getResource", "debug", "getResource"]}, "repository": {"repo_id": 48337670, "url": "https://github.com/openhab/openhab-core", "stars": 241, "created": "12/20/2015 9:23:20 PM +00:00", "updates": "2020-01-27T16:55:53+00:00", "fork": "False", "license": "licensed"}}