{"test_class": {"identifier": "MetricsServletTest", "superclass": "extends AbstractServletTest", "interfaces": "", "fields": [{"original_string": "private final Clock clock = mock(Clock.class);", "modifier": "private final", "type": "Clock", "declarator": "clock = mock(Clock.class)", "var_name": "clock"}, {"original_string": "private final MetricRegistry registry = new MetricRegistry();", "modifier": "private final", "type": "MetricRegistry", "declarator": "registry = new MetricRegistry()", "var_name": "registry"}, {"original_string": "private ServletTester tester;", "modifier": "private", "type": "ServletTester", "declarator": "tester", "var_name": "tester"}], "file": "metrics-servlets/src/test/java/com/codahale/metrics/servlets/MetricsServletTest.java"}, "test_case": {"identifier": "constructorWithRegistryAsArgumentUsesServletConfigWhenNull", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void constructorWithRegistryAsArgumentUsesServletConfigWhenNull() throws Exception {\n        final MetricRegistry metricRegistry = mock(MetricRegistry.class);\n        final ServletContext servletContext = mock(ServletContext.class);\n        final ServletConfig servletConfig = mock(ServletConfig.class);\n        when(servletConfig.getServletContext()).thenReturn(servletContext);\n        when(servletContext.getAttribute(eq(MetricsServlet.METRICS_REGISTRY)))\n                .thenReturn(metricRegistry);\n\n        final MetricsServlet metricsServlet = new MetricsServlet(null);\n        metricsServlet.init(servletConfig);\n\n        verify(servletConfig, times(1)).getServletContext();\n        verify(servletContext, times(1)).getAttribute(eq(MetricsServlet.METRICS_REGISTRY));\n    }", "signature": "void constructorWithRegistryAsArgumentUsesServletConfigWhenNull()", "full_signature": "@Test public void constructorWithRegistryAsArgumentUsesServletConfigWhenNull()", "class_method_signature": "MetricsServletTest.constructorWithRegistryAsArgumentUsesServletConfigWhenNull()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "thenReturn", "when", "getServletContext", "thenReturn", "when", "getAttribute", "eq", "init", "getServletContext", "verify", "times", "getAttribute", "verify", "times", "eq"]}, "focal_class": {"identifier": "MetricsServlet", "superclass": "extends HttpServlet", "interfaces": "", "fields": [{"original_string": "public static final String RATE_UNIT = MetricsServlet.class.getCanonicalName() + \".rateUnit\";", "modifier": "public static final", "type": "String", "declarator": "RATE_UNIT = MetricsServlet.class.getCanonicalName() + \".rateUnit\"", "var_name": "RATE_UNIT"}, {"original_string": "public static final String DURATION_UNIT = MetricsServlet.class.getCanonicalName() + \".durationUnit\";", "modifier": "public static final", "type": "String", "declarator": "DURATION_UNIT = MetricsServlet.class.getCanonicalName() + \".durationUnit\"", "var_name": "DURATION_UNIT"}, {"original_string": "public static final String SHOW_SAMPLES = MetricsServlet.class.getCanonicalName() + \".showSamples\";", "modifier": "public static final", "type": "String", "declarator": "SHOW_SAMPLES = MetricsServlet.class.getCanonicalName() + \".showSamples\"", "var_name": "SHOW_SAMPLES"}, {"original_string": "public static final String METRICS_REGISTRY = MetricsServlet.class.getCanonicalName() + \".registry\";", "modifier": "public static final", "type": "String", "declarator": "METRICS_REGISTRY = MetricsServlet.class.getCanonicalName() + \".registry\"", "var_name": "METRICS_REGISTRY"}, {"original_string": "public static final String ALLOWED_ORIGIN = MetricsServlet.class.getCanonicalName() + \".allowedOrigin\";", "modifier": "public static final", "type": "String", "declarator": "ALLOWED_ORIGIN = MetricsServlet.class.getCanonicalName() + \".allowedOrigin\"", "var_name": "ALLOWED_ORIGIN"}, {"original_string": "public static final String METRIC_FILTER = MetricsServlet.class.getCanonicalName() + \".metricFilter\";", "modifier": "public static final", "type": "String", "declarator": "METRIC_FILTER = MetricsServlet.class.getCanonicalName() + \".metricFilter\"", "var_name": "METRIC_FILTER"}, {"original_string": "public static final String CALLBACK_PARAM = MetricsServlet.class.getCanonicalName() + \".jsonpCallback\";", "modifier": "public static final", "type": "String", "declarator": "CALLBACK_PARAM = MetricsServlet.class.getCanonicalName() + \".jsonpCallback\"", "var_name": "CALLBACK_PARAM"}, {"original_string": "private static final long serialVersionUID = 1049773947734939602L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1049773947734939602L", "var_name": "serialVersionUID"}, {"original_string": "private static final String CONTENT_TYPE = \"application/json\";", "modifier": "private static final", "type": "String", "declarator": "CONTENT_TYPE = \"application/json\"", "var_name": "CONTENT_TYPE"}, {"original_string": "protected String allowedOrigin;", "modifier": "protected", "type": "String", "declarator": "allowedOrigin", "var_name": "allowedOrigin"}, {"original_string": "protected String jsonpParamName;", "modifier": "protected", "type": "String", "declarator": "jsonpParamName", "var_name": "jsonpParamName"}, {"original_string": "protected transient MetricRegistry registry;", "modifier": "protected transient", "type": "MetricRegistry", "declarator": "registry", "var_name": "registry"}, {"original_string": "protected transient ObjectMapper mapper;", "modifier": "protected transient", "type": "ObjectMapper", "declarator": "mapper", "var_name": "mapper"}], "methods": [{"identifier": "MetricsServlet", "parameters": "()", "modifiers": "public", "return": "", "signature": " MetricsServlet()", "full_signature": "public  MetricsServlet()", "class_method_signature": "MetricsServlet.MetricsServlet()", "testcase": false, "constructor": true}, {"identifier": "MetricsServlet", "parameters": "(MetricRegistry registry)", "modifiers": "public", "return": "", "signature": " MetricsServlet(MetricRegistry registry)", "full_signature": "public  MetricsServlet(MetricRegistry registry)", "class_method_signature": "MetricsServlet.MetricsServlet(MetricRegistry registry)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "(ServletConfig config)", "modifiers": "@Override public", "return": "void", "signature": "void init(ServletConfig config)", "full_signature": "@Override public void init(ServletConfig config)", "class_method_signature": "MetricsServlet.init(ServletConfig config)", "testcase": false, "constructor": false}, {"identifier": "setupMetricsModule", "parameters": "(ServletContext context)", "modifiers": "protected", "return": "void", "signature": "void setupMetricsModule(ServletContext context)", "full_signature": "protected void setupMetricsModule(ServletContext context)", "class_method_signature": "MetricsServlet.setupMetricsModule(ServletContext context)", "testcase": false, "constructor": false}, {"identifier": "doGet", "parameters": "(HttpServletRequest req,\n                         HttpServletResponse resp)", "modifiers": "@Override protected", "return": "void", "signature": "void doGet(HttpServletRequest req,\n                         HttpServletResponse resp)", "full_signature": "@Override protected void doGet(HttpServletRequest req,\n                         HttpServletResponse resp)", "class_method_signature": "MetricsServlet.doGet(HttpServletRequest req,\n                         HttpServletResponse resp)", "testcase": false, "constructor": false}, {"identifier": "getWriter", "parameters": "(HttpServletRequest request)", "modifiers": "protected", "return": "ObjectWriter", "signature": "ObjectWriter getWriter(HttpServletRequest request)", "full_signature": "protected ObjectWriter getWriter(HttpServletRequest request)", "class_method_signature": "MetricsServlet.getWriter(HttpServletRequest request)", "testcase": false, "constructor": false}, {"identifier": "parseTimeUnit", "parameters": "(String value, TimeUnit defaultValue)", "modifiers": "protected", "return": "TimeUnit", "signature": "TimeUnit parseTimeUnit(String value, TimeUnit defaultValue)", "full_signature": "protected TimeUnit parseTimeUnit(String value, TimeUnit defaultValue)", "class_method_signature": "MetricsServlet.parseTimeUnit(String value, TimeUnit defaultValue)", "testcase": false, "constructor": false}], "file": "metrics-servlets/src/main/java/com/codahale/metrics/servlets/MetricsServlet.java"}, "focal_method": {"identifier": "init", "parameters": "(ServletConfig config)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void init(ServletConfig config) throws ServletException {\n        super.init(config);\n\n        final ServletContext context = config.getServletContext();\n        if (null == registry) {\n            final Object registryAttr = context.getAttribute(METRICS_REGISTRY);\n            if (registryAttr instanceof MetricRegistry) {\n                this.registry = (MetricRegistry) registryAttr;\n            } else {\n                throw new ServletException(\"Couldn't find a MetricRegistry instance.\");\n            }\n        }\n        this.allowedOrigin = context.getInitParameter(ALLOWED_ORIGIN);\n        this.jsonpParamName = context.getInitParameter(CALLBACK_PARAM);\n\n        setupMetricsModule(context);\n    }", "signature": "void init(ServletConfig config)", "full_signature": "@Override public void init(ServletConfig config)", "class_method_signature": "MetricsServlet.init(ServletConfig config)", "testcase": false, "constructor": false, "invocations": ["init", "getServletContext", "getAttribute", "getInitParameter", "getInitParameter", "setupMetricsModule"]}, "repository": {"repo_id": 537800, "url": "https://github.com/dropwizard/metrics", "stars": 6879, "created": "2/26/2010 7:44:42 PM +00:00", "updates": "2020-01-26T22:33:14+00:00", "fork": "False", "license": "licensed"}}