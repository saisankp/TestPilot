{"test_class": {"identifier": "AnnotationMapperTest", "superclass": "", "interfaces": "", "fields": [], "file": "module/typegen/src/test/java/fabric/module/typegen/java/AnnotationMapperTest.java"}, "test_case": {"identifier": "testAnnotationLookup", "parameters": "()", "modifiers": "@Test(timeout = 1000) public", "return": "void", "body": "@Test(timeout = 1000)\n  public void testAnnotationLookup() throws Exception\n  {\n    AnnotationMapper mapper = new AnnotationMapper();\n    assertEquals(\"Returned annotation must be 'Attribute'.\", \"Attribute\", mapper.getAttributeAnnotations(null)[0]);\n  }", "signature": "void testAnnotationLookup()", "full_signature": "@Test(timeout = 1000) public void testAnnotationLookup()", "class_method_signature": "AnnotationMapperTest.testAnnotationLookup()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getAttributeAnnotations"]}, "focal_class": {"identifier": "AnnotationMapper", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Map<String, XMLFramework> FRAMEWORKS = initFrameworks();", "modifier": "private static final", "type": "Map<String, XMLFramework>", "declarator": "FRAMEWORKS = initFrameworks()", "var_name": "FRAMEWORKS"}, {"original_string": "private String usedFramework;", "modifier": "private", "type": "String", "declarator": "usedFramework", "var_name": "usedFramework"}, {"original_string": "private ArrayList<String> usedImports;", "modifier": "private", "type": "ArrayList<String>", "declarator": "usedImports", "var_name": "usedImports"}], "methods": [{"identifier": "AnnotationMapper", "parameters": "()", "modifiers": "public", "return": "", "signature": " AnnotationMapper()", "full_signature": "public  AnnotationMapper()", "class_method_signature": "AnnotationMapper.AnnotationMapper()", "testcase": false, "constructor": true}, {"identifier": "AnnotationMapper", "parameters": "(final String usedFramework)", "modifiers": "public", "return": "", "signature": " AnnotationMapper(final String usedFramework)", "full_signature": "public  AnnotationMapper(final String usedFramework)", "class_method_signature": "AnnotationMapper.AnnotationMapper(final String usedFramework)", "testcase": false, "constructor": true}, {"identifier": "initFrameworks", "parameters": "()", "modifiers": "private static", "return": "Map<String, XMLFramework>", "signature": "Map<String, XMLFramework> initFrameworks()", "full_signature": "private static Map<String, XMLFramework> initFrameworks()", "class_method_signature": "AnnotationMapper.initFrameworks()", "testcase": false, "constructor": false}, {"identifier": "getUsedFramework", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUsedFramework()", "full_signature": "public String getUsedFramework()", "class_method_signature": "AnnotationMapper.getUsedFramework()", "testcase": false, "constructor": false}, {"identifier": "getUsedImports", "parameters": "()", "modifiers": "public", "return": "ArrayList<String>", "signature": "ArrayList<String> getUsedImports()", "full_signature": "public ArrayList<String> getUsedImports()", "class_method_signature": "AnnotationMapper.getUsedImports()", "testcase": false, "constructor": false}, {"identifier": "addUsedImport", "parameters": "(final String requiredImport)", "modifiers": "private", "return": "void", "signature": "void addUsedImport(final String requiredImport)", "full_signature": "private void addUsedImport(final String requiredImport)", "class_method_signature": "AnnotationMapper.addUsedImport(final String requiredImport)", "testcase": false, "constructor": false}, {"identifier": "addUsedImports", "parameters": "(final String[] requiredImports)", "modifiers": "private", "return": "void", "signature": "void addUsedImports(final String[] requiredImports)", "full_signature": "private void addUsedImports(final String[] requiredImports)", "class_method_signature": "AnnotationMapper.addUsedImports(final String[] requiredImports)", "testcase": false, "constructor": false}, {"identifier": "handleAnnotationData", "parameters": "(AnnotationData[] annotationData)", "modifiers": "private", "return": "String[]", "signature": "String[] handleAnnotationData(AnnotationData[] annotationData)", "full_signature": "private String[] handleAnnotationData(AnnotationData[] annotationData)", "class_method_signature": "AnnotationMapper.handleAnnotationData(AnnotationData[] annotationData)", "testcase": false, "constructor": false}, {"identifier": "getRootAnnotations", "parameters": "(final String rootName)", "modifiers": "public", "return": "String[]", "signature": "String[] getRootAnnotations(final String rootName)", "full_signature": "public String[] getRootAnnotations(final String rootName)", "class_method_signature": "AnnotationMapper.getRootAnnotations(final String rootName)", "testcase": false, "constructor": false}, {"identifier": "getElementAnnotations", "parameters": "(final String elementName)", "modifiers": "public", "return": "String[]", "signature": "String[] getElementAnnotations(final String elementName)", "full_signature": "public String[] getElementAnnotations(final String elementName)", "class_method_signature": "AnnotationMapper.getElementAnnotations(final String elementName)", "testcase": false, "constructor": false}, {"identifier": "getAttributeAnnotations", "parameters": "(final String attributeName)", "modifiers": "public", "return": "String[]", "signature": "String[] getAttributeAnnotations(final String attributeName)", "full_signature": "public String[] getAttributeAnnotations(final String attributeName)", "class_method_signature": "AnnotationMapper.getAttributeAnnotations(final String attributeName)", "testcase": false, "constructor": false}, {"identifier": "getEnumAnnotations", "parameters": "(final String enumName)", "modifiers": "public", "return": "String[]", "signature": "String[] getEnumAnnotations(final String enumName)", "full_signature": "public String[] getEnumAnnotations(final String enumName)", "class_method_signature": "AnnotationMapper.getEnumAnnotations(final String enumName)", "testcase": false, "constructor": false}, {"identifier": "getArrayAnnotations", "parameters": "(final String arrayName, final String arrayClassName, final String itemName, final String itemClassName)", "modifiers": "public", "return": "String[]", "signature": "String[] getArrayAnnotations(final String arrayName, final String arrayClassName, final String itemName, final String itemClassName)", "full_signature": "public String[] getArrayAnnotations(final String arrayName, final String arrayClassName, final String itemName, final String itemClassName)", "class_method_signature": "AnnotationMapper.getArrayAnnotations(final String arrayName, final String arrayClassName, final String itemName, final String itemClassName)", "testcase": false, "constructor": false}, {"identifier": "getListAnnotations", "parameters": "(final String listName, final String itemName, final String itemClassName)", "modifiers": "public", "return": "String[]", "signature": "String[] getListAnnotations(final String listName, final String itemName, final String itemClassName)", "full_signature": "public String[] getListAnnotations(final String listName, final String itemName, final String itemClassName)", "class_method_signature": "AnnotationMapper.getListAnnotations(final String listName, final String itemName, final String itemClassName)", "testcase": false, "constructor": false}], "file": "module/typegen/src/main/java/fabric/module/typegen/java/AnnotationMapper.java"}, "focal_method": {"identifier": "getAttributeAnnotations", "parameters": "(final String attributeName)", "modifiers": "public", "return": "String[]", "body": "public String[] getAttributeAnnotations(final String attributeName)\n  {\n    return this.handleAnnotationData(AnnotationMapper.FRAMEWORKS.get(this.usedFramework).createAttributeAnnotations(attributeName));\n  }", "signature": "String[] getAttributeAnnotations(final String attributeName)", "full_signature": "public String[] getAttributeAnnotations(final String attributeName)", "class_method_signature": "AnnotationMapper.getAttributeAnnotations(final String attributeName)", "testcase": false, "constructor": false, "invocations": ["handleAnnotationData", "createAttributeAnnotations", "get"]}, "repository": {"repo_id": 1467919, "url": "https://github.com/pfisterer/fabric", "language": "Java", "is_fork": false, "fork_count": 4, "stargazer_count": 7, "size": 6699, "license": "licensed"}}