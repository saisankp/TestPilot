{"test_class": {"identifier": "MockInvokerTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-rpc/dubbo-rpc-api/src/test/java/org/apache/dubbo/rpc/support/MockInvokerTest.java"}, "test_case": {"identifier": "testGetMockObject", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetMockObject() {\n        Assertions.assertEquals(\"\",\n                MockInvoker.getMockObject(\"java.lang.String\", String.class));\n\n        Assertions.assertThrows(IllegalStateException.class, () -> MockInvoker\n                .getMockObject(\"true\", String.class));\n        Assertions.assertThrows(IllegalStateException.class, () -> MockInvoker\n                .getMockObject(\"default\", String.class));\n        Assertions.assertThrows(IllegalStateException.class, () -> MockInvoker\n                .getMockObject(\"java.lang.String\", Integer.class));\n        Assertions.assertThrows(IllegalStateException.class, () -> MockInvoker\n                .getMockObject(\"java.io.Serializable\", Serializable.class));\n    }", "signature": "void testGetMockObject()", "full_signature": "@Test public void testGetMockObject()", "class_method_signature": "MockInvokerTest.testGetMockObject()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getMockObject", "assertThrows", "getMockObject", "assertThrows", "getMockObject", "assertThrows", "getMockObject", "assertThrows", "getMockObject"]}, "focal_class": {"identifier": "MockInvoker", "superclass": "", "interfaces": "implements Invoker<T>", "fields": [{"original_string": "private final static ProxyFactory PROXY_FACTORY = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();", "modifier": "private final static", "type": "ProxyFactory", "declarator": "PROXY_FACTORY = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension()", "var_name": "PROXY_FACTORY"}, {"original_string": "private final static Map<String, Invoker<?>> MOCK_MAP = new ConcurrentHashMap<String, Invoker<?>>();", "modifier": "private final static", "type": "Map<String, Invoker<?>>", "declarator": "MOCK_MAP = new ConcurrentHashMap<String, Invoker<?>>()", "var_name": "MOCK_MAP"}, {"original_string": "private final static Map<String, Throwable> THROWABLE_MAP = new ConcurrentHashMap<String, Throwable>();", "modifier": "private final static", "type": "Map<String, Throwable>", "declarator": "THROWABLE_MAP = new ConcurrentHashMap<String, Throwable>()", "var_name": "THROWABLE_MAP"}, {"original_string": "private final URL url;", "modifier": "private final", "type": "URL", "declarator": "url", "var_name": "url"}, {"original_string": "private final Class<T> type;", "modifier": "private final", "type": "Class<T>", "declarator": "type", "var_name": "type"}], "methods": [{"identifier": "MockInvoker", "parameters": "(URL url, Class<T> type)", "modifiers": "public", "return": "", "signature": " MockInvoker(URL url, Class<T> type)", "full_signature": "public  MockInvoker(URL url, Class<T> type)", "class_method_signature": "MockInvoker.MockInvoker(URL url, Class<T> type)", "testcase": false, "constructor": true}, {"identifier": "parseMockValue", "parameters": "(String mock)", "modifiers": "public static", "return": "Object", "signature": "Object parseMockValue(String mock)", "full_signature": "public static Object parseMockValue(String mock)", "class_method_signature": "MockInvoker.parseMockValue(String mock)", "testcase": false, "constructor": false}, {"identifier": "parseMockValue", "parameters": "(String mock, Type[] returnTypes)", "modifiers": "public static", "return": "Object", "signature": "Object parseMockValue(String mock, Type[] returnTypes)", "full_signature": "public static Object parseMockValue(String mock, Type[] returnTypes)", "class_method_signature": "MockInvoker.parseMockValue(String mock, Type[] returnTypes)", "testcase": false, "constructor": false}, {"identifier": "invoke", "parameters": "(Invocation invocation)", "modifiers": "@Override public", "return": "Result", "signature": "Result invoke(Invocation invocation)", "full_signature": "@Override public Result invoke(Invocation invocation)", "class_method_signature": "MockInvoker.invoke(Invocation invocation)", "testcase": false, "constructor": false}, {"identifier": "getThrowable", "parameters": "(String throwstr)", "modifiers": "public static", "return": "Throwable", "signature": "Throwable getThrowable(String throwstr)", "full_signature": "public static Throwable getThrowable(String throwstr)", "class_method_signature": "MockInvoker.getThrowable(String throwstr)", "testcase": false, "constructor": false}, {"identifier": "getInvoker", "parameters": "(String mockService)", "modifiers": "@SuppressWarnings(\"unchecked\") private", "return": "Invoker<T>", "signature": "Invoker<T> getInvoker(String mockService)", "full_signature": "@SuppressWarnings(\"unchecked\") private Invoker<T> getInvoker(String mockService)", "class_method_signature": "MockInvoker.getInvoker(String mockService)", "testcase": false, "constructor": false}, {"identifier": "getMockObject", "parameters": "(String mockService, Class serviceType)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Object", "signature": "Object getMockObject(String mockService, Class serviceType)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Object getMockObject(String mockService, Class serviceType)", "class_method_signature": "MockInvoker.getMockObject(String mockService, Class serviceType)", "testcase": false, "constructor": false}, {"identifier": "normalizeMock", "parameters": "(String mock)", "modifiers": "public static", "return": "String", "signature": "String normalizeMock(String mock)", "full_signature": "public static String normalizeMock(String mock)", "class_method_signature": "MockInvoker.normalizeMock(String mock)", "testcase": false, "constructor": false}, {"identifier": "getUrl", "parameters": "()", "modifiers": "@Override public", "return": "URL", "signature": "URL getUrl()", "full_signature": "@Override public URL getUrl()", "class_method_signature": "MockInvoker.getUrl()", "testcase": false, "constructor": false}, {"identifier": "isAvailable", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAvailable()", "full_signature": "@Override public boolean isAvailable()", "class_method_signature": "MockInvoker.isAvailable()", "testcase": false, "constructor": false}, {"identifier": "destroy", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void destroy()", "full_signature": "@Override public void destroy()", "class_method_signature": "MockInvoker.destroy()", "testcase": false, "constructor": false}, {"identifier": "getInterface", "parameters": "()", "modifiers": "@Override public", "return": "Class<T>", "signature": "Class<T> getInterface()", "full_signature": "@Override public Class<T> getInterface()", "class_method_signature": "MockInvoker.getInterface()", "testcase": false, "constructor": false}], "file": "dubbo-rpc/dubbo-rpc-api/src/main/java/org/apache/dubbo/rpc/support/MockInvoker.java"}, "focal_method": {"identifier": "getMockObject", "parameters": "(String mockService, Class serviceType)", "modifiers": "@SuppressWarnings(\"unchecked\") public static", "return": "Object", "body": "@SuppressWarnings(\"unchecked\")\n    public static Object getMockObject(String mockService, Class serviceType) {\n        boolean isDefault = ConfigUtils.isDefault(mockService);\n        if (isDefault) {\n            mockService = serviceType.getName() + \"Mock\";\n        }\n\n        Class<?> mockClass;\n        try {\n            mockClass = ReflectUtils.forName(mockService);\n        } catch (Exception e) {\n            if (!isDefault) {// does not check Spring bean if it is default config.\n                ExtensionFactory extensionFactory =\n                        ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension();\n                Object obj = extensionFactory.getExtension(serviceType, mockService);\n                if (obj != null) {\n                    return obj;\n                }\n            }\n            throw new IllegalStateException(\"Did not find mock class or instance \"\n                    + mockService\n                    + \", please check if there's mock class or instance implementing interface \"\n                    + serviceType.getName(), e);\n        }\n        if (mockClass == null || !serviceType.isAssignableFrom(mockClass)) {\n            throw new IllegalStateException(\"The mock class \" + mockClass.getName() +\n                    \" not implement interface \" + serviceType.getName());\n        }\n\n        try {\n            return mockClass.newInstance();\n        } catch (InstantiationException e) {\n            throw new IllegalStateException(\"No default constructor from mock class \" + mockClass.getName(), e);\n        } catch (IllegalAccessException e) {\n            throw new IllegalStateException(e);\n        }\n    }", "signature": "Object getMockObject(String mockService, Class serviceType)", "full_signature": "@SuppressWarnings(\"unchecked\") public static Object getMockObject(String mockService, Class serviceType)", "class_method_signature": "MockInvoker.getMockObject(String mockService, Class serviceType)", "testcase": false, "constructor": false, "invocations": ["isDefault", "getName", "forName", "getAdaptiveExtension", "getExtensionLoader", "getExtension", "getName", "isAssignableFrom", "getName", "getName", "newInstance", "getName"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}