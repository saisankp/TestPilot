{"test_class": {"identifier": "TrampolineSchedulerTest", "superclass": "extends AbstractSchedulerTests", "interfaces": "", "fields": [], "file": "zava/src/test/java/rx/schedulers/TrampolineSchedulerTest.java"}, "test_case": {"identifier": "testTrampolineWorkerHandlesConcurrentScheduling", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testTrampolineWorkerHandlesConcurrentScheduling() {\n        final Worker trampolineWorker = Schedulers.trampoline().createWorker();\n        final Observer<Subscription> observer = Observers.empty();\n        final TestSubscriber<Subscription> ts = new TestSubscriber<Subscription>(observer);\n\n        // Spam the trampoline with actions.\n        Observable.range(0, 50)\n                .flatMap(new Func1<Integer, Observable<Subscription>>() {\n\n                    @Override\n                    public Observable<Subscription> call(Integer count) {\n                        return Observable.interval(1, TimeUnit.MICROSECONDS).map(\n                                new Func1<Long, Subscription>() {\n\n                                     @Override\n                                     public Subscription call(Long count) {\n                                         return trampolineWorker.schedule(new Action0() {\n\n                                             @Override\n                                             public void call() {}\n\n                                         });\n                                     }\n\n                                }).limit(100);\n                    }\n\n                })\n                .subscribeOn(Schedulers.computation())\n                .subscribe(ts);\n        ts.awaitTerminalEvent();\n        ts.assertNoErrors();\n    }", "signature": "void testTrampolineWorkerHandlesConcurrentScheduling()", "full_signature": "@Test public void testTrampolineWorkerHandlesConcurrentScheduling()", "class_method_signature": "TrampolineSchedulerTest.testTrampolineWorkerHandlesConcurrentScheduling()", "testcase": true, "constructor": false, "invocations": ["createWorker", "trampoline", "empty", "subscribe", "subscribeOn", "flatMap", "range", "limit", "map", "interval", "schedule", "computation", "awaitTerminalEvent", "assertNoErrors"]}, "focal_class": {"identifier": "TrampolineScheduler", "superclass": "extends Scheduler", "interfaces": "", "fields": [{"original_string": "private static final TrampolineScheduler INSTANCE = new TrampolineScheduler();", "modifier": "private static final", "type": "TrampolineScheduler", "declarator": "INSTANCE = new TrampolineScheduler()", "var_name": "INSTANCE"}], "methods": [{"identifier": "instance", "parameters": "()", "modifiers": "static", "return": "TrampolineScheduler", "signature": "TrampolineScheduler instance()", "full_signature": "static TrampolineScheduler instance()", "class_method_signature": "TrampolineScheduler.instance()", "testcase": false, "constructor": false}, {"identifier": "createWorker", "parameters": "()", "modifiers": "@Override public", "return": "Worker", "signature": "Worker createWorker()", "full_signature": "@Override public Worker createWorker()", "class_method_signature": "TrampolineScheduler.createWorker()", "testcase": false, "constructor": false}, {"identifier": "TrampolineScheduler", "parameters": "()", "modifiers": "", "return": "", "signature": " TrampolineScheduler()", "full_signature": "  TrampolineScheduler()", "class_method_signature": "TrampolineScheduler.TrampolineScheduler()", "testcase": false, "constructor": true}, {"identifier": "compare", "parameters": "(int x, int y)", "modifiers": "private static", "return": "int", "signature": "int compare(int x, int y)", "full_signature": "private static int compare(int x, int y)", "class_method_signature": "TrampolineScheduler.compare(int x, int y)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/schedulers/TrampolineScheduler.java"}, "focal_method": {"identifier": "createWorker", "parameters": "()", "modifiers": "@Override public", "return": "Worker", "body": "@Override\n    public Worker createWorker() {\n        return new InnerCurrentThreadScheduler();\n    }", "signature": "Worker createWorker()", "full_signature": "@Override public Worker createWorker()", "class_method_signature": "TrampolineScheduler.createWorker()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}