{"test_class": {"identifier": "DefaultLimitViolationDetectorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Network network;", "modifier": "private", "type": "Network", "declarator": "network", "var_name": "network"}, {"original_string": "private Line line1;", "modifier": "private", "type": "Line", "declarator": "line1", "var_name": "line1"}, {"original_string": "private Line line2;", "modifier": "private", "type": "Line", "declarator": "line2", "var_name": "line2"}, {"original_string": "private VoltageLevel voltageLevelHv1;", "modifier": "private", "type": "VoltageLevel", "declarator": "voltageLevelHv1", "var_name": "voltageLevelHv1"}, {"original_string": "private LimitViolationDetector detector;", "modifier": "private", "type": "LimitViolationDetector", "declarator": "detector", "var_name": "detector"}, {"original_string": "private List<LimitViolation> violationsCollector;", "modifier": "private", "type": "List<LimitViolation>", "declarator": "violationsCollector", "var_name": "violationsCollector"}], "file": "security-analysis-api/src/test/java/com/powsybl/security/detectors/DefaultLimitViolationDetectorTest.java"}, "test_case": {"identifier": "detectTemporaryLimitOverloadOnSide2OfLine1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void detectTemporaryLimitOverloadOnSide2OfLine1() {\n\n        detector.checkCurrent(line1, Branch.Side.TWO, 1201, violationsCollector::add);\n\n        Assertions.assertThat(violationsCollector)\n                .hasSize(1)\n                .allSatisfy(l -> {\n                    assertEquals(1200, l.getLimit(), 0d);\n                    assertEquals(1201, l.getValue(), 0d);\n                    assertSame(Branch.Side.TWO, l.getSide());\n                    assertEquals(60, l.getAcceptableDuration());\n                });\n    }", "signature": "void detectTemporaryLimitOverloadOnSide2OfLine1()", "full_signature": "@Test public void detectTemporaryLimitOverloadOnSide2OfLine1()", "class_method_signature": "DefaultLimitViolationDetectorTest.detectTemporaryLimitOverloadOnSide2OfLine1()", "testcase": true, "constructor": false, "invocations": ["checkCurrent", "allSatisfy", "hasSize", "assertThat", "assertEquals", "getLimit", "assertEquals", "getValue", "assertSame", "getSide", "assertEquals", "getAcceptableDuration"]}, "focal_class": {"identifier": "DefaultLimitViolationDetector", "superclass": "extends AbstractContingencyBlindDetector", "interfaces": "", "fields": [{"original_string": "private final float limitReduction;", "modifier": "private final", "type": "float", "declarator": "limitReduction", "var_name": "limitReduction"}, {"original_string": "private final Set<Security.CurrentLimitType> currentLimitTypes;", "modifier": "private final", "type": "Set<Security.CurrentLimitType>", "declarator": "currentLimitTypes", "var_name": "currentLimitTypes"}], "methods": [{"identifier": "DefaultLimitViolationDetector", "parameters": "(float limitReduction, Collection<Security.CurrentLimitType> currentLimitTypes)", "modifiers": "public", "return": "", "signature": " DefaultLimitViolationDetector(float limitReduction, Collection<Security.CurrentLimitType> currentLimitTypes)", "full_signature": "public  DefaultLimitViolationDetector(float limitReduction, Collection<Security.CurrentLimitType> currentLimitTypes)", "class_method_signature": "DefaultLimitViolationDetector.DefaultLimitViolationDetector(float limitReduction, Collection<Security.CurrentLimitType> currentLimitTypes)", "testcase": false, "constructor": true}, {"identifier": "DefaultLimitViolationDetector", "parameters": "(Collection<Security.CurrentLimitType> currentLimitTypes)", "modifiers": "public", "return": "", "signature": " DefaultLimitViolationDetector(Collection<Security.CurrentLimitType> currentLimitTypes)", "full_signature": "public  DefaultLimitViolationDetector(Collection<Security.CurrentLimitType> currentLimitTypes)", "class_method_signature": "DefaultLimitViolationDetector.DefaultLimitViolationDetector(Collection<Security.CurrentLimitType> currentLimitTypes)", "testcase": false, "constructor": true}, {"identifier": "DefaultLimitViolationDetector", "parameters": "()", "modifiers": "public", "return": "", "signature": " DefaultLimitViolationDetector()", "full_signature": "public  DefaultLimitViolationDetector()", "class_method_signature": "DefaultLimitViolationDetector.DefaultLimitViolationDetector()", "testcase": false, "constructor": true}, {"identifier": "checkPermanentLimit", "parameters": "(Branch branch, Branch.Side side, double value, Consumer<LimitViolation> consumer)", "modifiers": "private", "return": "void", "signature": "void checkPermanentLimit(Branch branch, Branch.Side side, double value, Consumer<LimitViolation> consumer)", "full_signature": "private void checkPermanentLimit(Branch branch, Branch.Side side, double value, Consumer<LimitViolation> consumer)", "class_method_signature": "DefaultLimitViolationDetector.checkPermanentLimit(Branch branch, Branch.Side side, double value, Consumer<LimitViolation> consumer)", "testcase": false, "constructor": false}, {"identifier": "checkCurrent", "parameters": "(Branch branch, Branch.Side side, double value, Consumer<LimitViolation> consumer)", "modifiers": "@Override public", "return": "void", "signature": "void checkCurrent(Branch branch, Branch.Side side, double value, Consumer<LimitViolation> consumer)", "full_signature": "@Override public void checkCurrent(Branch branch, Branch.Side side, double value, Consumer<LimitViolation> consumer)", "class_method_signature": "DefaultLimitViolationDetector.checkCurrent(Branch branch, Branch.Side side, double value, Consumer<LimitViolation> consumer)", "testcase": false, "constructor": false}, {"identifier": "checkVoltage", "parameters": "(Bus bus, double value, Consumer<LimitViolation> consumer)", "modifiers": "@Override public", "return": "void", "signature": "void checkVoltage(Bus bus, double value, Consumer<LimitViolation> consumer)", "full_signature": "@Override public void checkVoltage(Bus bus, double value, Consumer<LimitViolation> consumer)", "class_method_signature": "DefaultLimitViolationDetector.checkVoltage(Bus bus, double value, Consumer<LimitViolation> consumer)", "testcase": false, "constructor": false}], "file": "security-analysis-api/src/main/java/com/powsybl/security/detectors/DefaultLimitViolationDetector.java"}, "focal_method": {"identifier": "checkCurrent", "parameters": "(Branch branch, Branch.Side side, double value, Consumer<LimitViolation> consumer)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void checkCurrent(Branch branch, Branch.Side side, double value, Consumer<LimitViolation> consumer) {\n\n        Branch.Overload overload = LimitViolationUtils.checkTemporaryLimits(branch, side, limitReduction, value);\n\n        if (currentLimitTypes.contains(Security.CurrentLimitType.TATL) && (overload != null)) {\n            consumer.accept(new LimitViolation(branch.getId(),\n                    ((Branch<?>) branch).getOptionalName().orElse(null),\n                    LimitViolationType.CURRENT,\n                    overload.getPreviousLimitName(),\n                    overload.getTemporaryLimit().getAcceptableDuration(),\n                    overload.getPreviousLimit(),\n                    limitReduction,\n                    value,\n                    side));\n        } else if (currentLimitTypes.contains(Security.CurrentLimitType.PATL)) {\n            checkPermanentLimit(branch, side, value, consumer);\n        }\n    }", "signature": "void checkCurrent(Branch branch, Branch.Side side, double value, Consumer<LimitViolation> consumer)", "full_signature": "@Override public void checkCurrent(Branch branch, Branch.Side side, double value, Consumer<LimitViolation> consumer)", "class_method_signature": "DefaultLimitViolationDetector.checkCurrent(Branch branch, Branch.Side side, double value, Consumer<LimitViolation> consumer)", "testcase": false, "constructor": false, "invocations": ["checkTemporaryLimits", "contains", "accept", "getId", "orElse", "getOptionalName", "getPreviousLimitName", "getAcceptableDuration", "getTemporaryLimit", "getPreviousLimit", "contains", "checkPermanentLimit"]}, "repository": {"repo_id": 105284146, "url": "https://github.com/powsybl/powsybl-core", "stars": 53, "created": "9/29/2017 2:51:18 PM +00:00", "updates": "2020-01-27T10:39:13+00:00", "fork": "False", "license": "licensed"}}