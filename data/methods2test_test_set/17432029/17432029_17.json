{"test_class": {"identifier": "HttpContentTest", "superclass": "", "interfaces": "", "fields": [], "file": "volleyer/src/test/java/com/navercorp/volleyextensions/volleyer/http/HttpContentTest.java"}, "test_case": {"identifier": "addHeaderMethodShouldThrowNpeWhenKeyIsNull", "parameters": "()", "modifiers": "@Test(expected=NullPointerException.class) public", "return": "void", "body": "@Test(expected=NullPointerException.class)\n\tpublic void addHeaderMethodShouldThrowNpeWhenKeyIsNull() {\n\t\t// Given\n\t\tString nullKey = null;\n\t\tString value = \"test\";\n\t\t\n\t\tString url = \"test\";\n\t\tHttpMethod method = HttpMethod.GET;\n\t\tHttpContent httpContent = new HttpContent(url, method);\n\t\t\n\t\t// When & Then\n\t\thttpContent.addHeader(nullKey, value);\n\t}", "signature": "void addHeaderMethodShouldThrowNpeWhenKeyIsNull()", "full_signature": "@Test(expected=NullPointerException.class) public void addHeaderMethodShouldThrowNpeWhenKeyIsNull()", "class_method_signature": "HttpContentTest.addHeaderMethodShouldThrowNpeWhenKeyIsNull()", "testcase": true, "constructor": false, "invocations": ["addHeader"]}, "focal_class": {"identifier": "HttpContent", "superclass": "", "interfaces": "implements MultipartContainer", "fields": [{"original_string": "private HttpMethod method;", "modifier": "private", "type": "HttpMethod", "declarator": "method", "var_name": "method"}, {"original_string": "private String url;", "modifier": "private", "type": "String", "declarator": "url", "var_name": "url"}, {"original_string": "private Map<String, String> headers;", "modifier": "private", "type": "Map<String, String>", "declarator": "headers", "var_name": "headers"}, {"original_string": "private byte[] body;", "modifier": "private", "type": "byte[]", "declarator": "body", "var_name": "body"}, {"original_string": "private Multipart multipart;", "modifier": "private", "type": "Multipart", "declarator": "multipart", "var_name": "multipart"}], "methods": [{"identifier": "HttpContent", "parameters": "(String url, HttpMethod method)", "modifiers": "public", "return": "", "signature": " HttpContent(String url, HttpMethod method)", "full_signature": "public  HttpContent(String url, HttpMethod method)", "class_method_signature": "HttpContent.HttpContent(String url, HttpMethod method)", "testcase": false, "constructor": true}, {"identifier": "getMethod", "parameters": "()", "modifiers": "public", "return": "HttpMethod", "signature": "HttpMethod getMethod()", "full_signature": "public HttpMethod getMethod()", "class_method_signature": "HttpContent.getMethod()", "testcase": false, "constructor": false}, {"identifier": "getUrl", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUrl()", "full_signature": "public String getUrl()", "class_method_signature": "HttpContent.getUrl()", "testcase": false, "constructor": false}, {"identifier": "addHeader", "parameters": "(String key, String value)", "modifiers": "public", "return": "void", "signature": "void addHeader(String key, String value)", "full_signature": "public void addHeader(String key, String value)", "class_method_signature": "HttpContent.addHeader(String key, String value)", "testcase": false, "constructor": false}, {"identifier": "getHeader", "parameters": "(String key)", "modifiers": "public", "return": "String", "signature": "String getHeader(String key)", "full_signature": "public String getHeader(String key)", "class_method_signature": "HttpContent.getHeader(String key)", "testcase": false, "constructor": false}, {"identifier": "getHeaders", "parameters": "()", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> getHeaders()", "full_signature": "public Map<String, String> getHeaders()", "class_method_signature": "HttpContent.getHeaders()", "testcase": false, "constructor": false}, {"identifier": "setBody", "parameters": "(byte[] body)", "modifiers": "public", "return": "void", "signature": "void setBody(byte[] body)", "full_signature": "public void setBody(byte[] body)", "class_method_signature": "HttpContent.setBody(byte[] body)", "testcase": false, "constructor": false}, {"identifier": "getBody", "parameters": "()", "modifiers": "public", "return": "byte[]", "signature": "byte[] getBody()", "full_signature": "public byte[] getBody()", "class_method_signature": "HttpContent.getBody()", "testcase": false, "constructor": false}, {"identifier": "hasMultipart", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasMultipart()", "full_signature": "@Override public boolean hasMultipart()", "class_method_signature": "HttpContent.hasMultipart()", "testcase": false, "constructor": false}, {"identifier": "getMultipart", "parameters": "()", "modifiers": "@Override public", "return": "Multipart", "signature": "Multipart getMultipart()", "full_signature": "@Override public Multipart getMultipart()", "class_method_signature": "HttpContent.getMultipart()", "testcase": false, "constructor": false}, {"identifier": "addPart", "parameters": "(Part part)", "modifiers": "public", "return": "void", "signature": "void addPart(Part part)", "full_signature": "public void addPart(Part part)", "class_method_signature": "HttpContent.addPart(Part part)", "testcase": false, "constructor": false}], "file": "volleyer/src/main/java/com/navercorp/volleyextensions/volleyer/http/HttpContent.java"}, "focal_method": {"identifier": "addHeader", "parameters": "(String key, String value)", "modifiers": "public", "return": "void", "body": "public void addHeader(String key, String value) {\n\t\tAssert.notNull(key, \"Header key\");\n\t\tAssert.notNull(value, \"Header value\");\n\t\theaders.put(key, value);\n\t}", "signature": "void addHeader(String key, String value)", "full_signature": "public void addHeader(String key, String value)", "class_method_signature": "HttpContent.addHeader(String key, String value)", "testcase": false, "constructor": false, "invocations": ["notNull", "notNull", "put"]}, "repository": {"repo_id": 17432029, "url": "https://github.com/naver/volley-extensions", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 138, "size": 666, "license": "licensed"}}