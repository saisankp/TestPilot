{"test_class": {"identifier": "TypeHierarchyTest", "superclass": "", "interfaces": "", "fields": [], "file": "mubench/src/test/java/de/tu_darmstadt/stg/mudetect/typehierarchy/TypeHierarchyTest.java"}, "test_case": {"identifier": "intIsNotAString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void intIsNotAString() throws Exception {\n        TypeHierarchy hierarchy = new TypeHierarchy();\n\n        assertFalse(hierarchy.isA(\"int\", \"String\"));\n    }", "signature": "void intIsNotAString()", "full_signature": "@Test public void intIsNotAString()", "class_method_signature": "TypeHierarchyTest.intIsNotAString()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "isA"]}, "focal_class": {"identifier": "TypeHierarchy", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Map<String, Set<String>> supertypesByType = new HashMap<>();", "modifier": "private", "type": "Map<String, Set<String>>", "declarator": "supertypesByType = new HashMap<>()", "var_name": "supertypesByType"}], "methods": [{"identifier": "TypeHierarchy", "parameters": "()", "modifiers": "protected", "return": "", "signature": " TypeHierarchy()", "full_signature": "protected  TypeHierarchy()", "class_method_signature": "TypeHierarchy.TypeHierarchy()", "testcase": false, "constructor": true}, {"identifier": "isA", "parameters": "(String type, String supertype)", "modifiers": "public", "return": "boolean", "signature": "boolean isA(String type, String supertype)", "full_signature": "public boolean isA(String type, String supertype)", "class_method_signature": "TypeHierarchy.isA(String type, String supertype)", "testcase": false, "constructor": false}, {"identifier": "getSupertypes", "parameters": "(String type)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> getSupertypes(String type)", "full_signature": "private Set<String> getSupertypes(String type)", "class_method_signature": "TypeHierarchy.getSupertypes(String type)", "testcase": false, "constructor": false}, {"identifier": "addSupertype", "parameters": "(String type, String supertype)", "modifiers": "protected", "return": "void", "signature": "void addSupertype(String type, String supertype)", "full_signature": "protected void addSupertype(String type, String supertype)", "class_method_signature": "TypeHierarchy.addSupertype(String type, String supertype)", "testcase": false, "constructor": false}, {"identifier": "addSupertypes", "parameters": "(String type, Iterable<String> supertypes)", "modifiers": "", "return": "void", "signature": "void addSupertypes(String type, Iterable<String> supertypes)", "full_signature": " void addSupertypes(String type, Iterable<String> supertypes)", "class_method_signature": "TypeHierarchy.addSupertypes(String type, Iterable<String> supertypes)", "testcase": false, "constructor": false}], "file": "mubench/src/main/java/de/tu_darmstadt/stg/mudetect/typehierarchy/TypeHierarchy.java"}, "focal_method": {"identifier": "isA", "parameters": "(String type, String supertype)", "modifiers": "public", "return": "boolean", "body": "public boolean isA(String type, String supertype) {\n        Set<String> supertypes = getSupertypes(type);\n        return type.equals(supertype) ||\n                supertypes.contains(supertype);\n    }", "signature": "boolean isA(String type, String supertype)", "full_signature": "public boolean isA(String type, String supertype)", "class_method_signature": "TypeHierarchy.isA(String type, String supertype)", "testcase": false, "constructor": false, "invocations": ["getSupertypes", "equals", "contains"]}, "repository": {"repo_id": 99890719, "url": "https://github.com/stg-tud/MUDetect", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 5, "size": 11835, "license": "licensed"}}