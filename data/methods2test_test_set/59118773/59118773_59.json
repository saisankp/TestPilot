{"test_class": {"identifier": "CorruptionRiskDashboardTablesControllerTest", "superclass": "extends AbstractEndPointControllerTest", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private CorruptionRiskDashboardTablesController corruptionRiskDashboardTablesController;", "modifier": "@Autowired\n    private", "type": "CorruptionRiskDashboardTablesController", "declarator": "corruptionRiskDashboardTablesController", "var_name": "corruptionRiskDashboardTablesController"}, {"original_string": "@Autowired\n    private ReleaseFlaggingService releaseFlaggingService;", "modifier": "@Autowired\n    private", "type": "ReleaseFlaggingService", "declarator": "releaseFlaggingService", "var_name": "releaseFlaggingService"}, {"original_string": "@Autowired\n    private FlaggedReleaseRepository releaseRepository;", "modifier": "@Autowired\n    private", "type": "FlaggedReleaseRepository", "declarator": "releaseRepository", "var_name": "releaseRepository"}, {"original_string": "@Autowired\n    private ObjectMapper objectMapper;", "modifier": "@Autowired\n    private", "type": "ObjectMapper", "declarator": "objectMapper", "var_name": "objectMapper"}], "file": "web/src/test/java/org/devgateway/ocds/web/rest/controller/CorruptionRiskDashboardTablesControllerTest.java"}, "test_case": {"identifier": "corruptionRiskOverviewTableTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void corruptionRiskOverviewTableTest() throws Exception {\n        final List<Document> result = corruptionRiskDashboardTablesController\n                .corruptionRiskOverviewTable(new YearFilterPagingRequest());\n        Assert.assertEquals(1, result.size());\n        Assert.assertEquals(\"[ocds-endpoint-001] procuringEntity name\",\n                ((DBObject)result.get(0).get(\"procuringEntity\")).get(\"name\"));\n    }", "signature": "void corruptionRiskOverviewTableTest()", "full_signature": "@Test public void corruptionRiskOverviewTableTest()", "class_method_signature": "CorruptionRiskDashboardTablesControllerTest.corruptionRiskOverviewTableTest()", "testcase": true, "constructor": false, "invocations": ["corruptionRiskOverviewTable", "assertEquals", "size", "assertEquals", "get", "get", "get"]}, "focal_class": {"identifier": "CorruptionRiskDashboardTablesController", "superclass": "extends GenericOCDSController", "interfaces": "", "fields": [], "methods": [{"identifier": "corruptionRiskOverviewTable", "parameters": "(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Returns data to show in the table on corruption risk overview page.\" + \"This is presented as releases only with the information in the table present and unwinded by \" + \"flags.flaggedStats\") @RequestMapping(value = \"/api/corruptionRiskOverviewTable\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> corruptionRiskOverviewTable(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Returns data to show in the table on corruption risk overview page.\" + \"This is presented as releases only with the information in the table present and unwinded by \" + \"flags.flaggedStats\") @RequestMapping(value = \"/api/corruptionRiskOverviewTable\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> corruptionRiskOverviewTable(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "CorruptionRiskDashboardTablesController.corruptionRiskOverviewTable(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}, {"identifier": "corruptionRiskOverviewTableCount", "parameters": "(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Counts data to show in the table on corruption risk overview page.\") @RequestMapping(value = \"/api/corruptionRiskOverviewTable/count\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "signature": "List<Document> corruptionRiskOverviewTableCount(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Counts data to show in the table on corruption risk overview page.\") @RequestMapping(value = \"/api/corruptionRiskOverviewTable/count\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> corruptionRiskOverviewTableCount(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "CorruptionRiskDashboardTablesController.corruptionRiskOverviewTableCount(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false}], "file": "web/src/main/java/org/devgateway/ocds/web/rest/controller/CorruptionRiskDashboardTablesController.java"}, "focal_method": {"identifier": "corruptionRiskOverviewTable", "parameters": "(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "modifiers": "@ApiOperation(value = \"Returns data to show in the table on corruption risk overview page.\" + \"This is presented as releases only with the information in the table present and unwinded by \" + \"flags.flaggedStats\") @RequestMapping(value = \"/api/corruptionRiskOverviewTable\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public", "return": "List<Document>", "body": "@ApiOperation(value = \"Returns data to show in the table on corruption risk overview page.\"\n            + \"This is presented as releases only with the information in the table present and unwinded by \"\n            + \"flags.flaggedStats\")\n    @RequestMapping(value = \"/api/corruptionRiskOverviewTable\",\n            method = {RequestMethod.POST, RequestMethod.GET},\n            produces = \"application/json\")\n    public List<Document> corruptionRiskOverviewTable(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter) {\n\n\n        Aggregation agg = newAggregation(\n                match(where(\"flags.flaggedStats.0\").exists(true)\n                        .andOperator(getYearDefaultFilterCriteria(filter,\n                                MongoConstants.FieldNames.TENDER_PERIOD_START_DATE))),\n                unwind(\"flags.flaggedStats\"),\n                project(\"ocid\", \"tender.procuringEntity.name\", \"tender.tenderPeriod\", \"flags\",\n                        \"tender.title\", \"tag\")\n                        .and(\"tender.value\").as(\"tender.value\").and(\"awards.value\").as(\"awards.value\")\n                        .and(MongoConstants.FieldNames.AWARDS_STATUS).as(MongoConstants.FieldNames.AWARDS_STATUS)\n                        .andExclude(Fields.UNDERSCORE_ID),\n                sort(Sort.Direction.DESC, \"flags.flaggedStats.count\"),\n                skip(filter.getSkip()),\n                limit(filter.getPageSize())\n        );\n\n        return releaseAgg(agg);\n    }", "signature": "List<Document> corruptionRiskOverviewTable(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "full_signature": "@ApiOperation(value = \"Returns data to show in the table on corruption risk overview page.\" + \"This is presented as releases only with the information in the table present and unwinded by \" + \"flags.flaggedStats\") @RequestMapping(value = \"/api/corruptionRiskOverviewTable\", method = {RequestMethod.POST, RequestMethod.GET}, produces = \"application/json\") public List<Document> corruptionRiskOverviewTable(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "class_method_signature": "CorruptionRiskDashboardTablesController.corruptionRiskOverviewTable(\n            @ModelAttribute @Valid final YearFilterPagingRequest filter)", "testcase": false, "constructor": false, "invocations": ["newAggregation", "match", "andOperator", "exists", "where", "getYearDefaultFilterCriteria", "unwind", "andExclude", "as", "and", "as", "and", "as", "and", "project", "sort", "skip", "getSkip", "limit", "getPageSize", "releaseAgg"]}, "repository": {"repo_id": 59118773, "url": "https://github.com/devgateway/oc-explorer", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 5, "size": 9004, "license": "licensed"}}