{"test_class": {"identifier": "SimpleViolationTest", "superclass": "", "interfaces": "", "fields": [], "file": "api/src/test/java/net/adamcin/oakpal/api/SimpleViolationTest.java"}, "test_case": {"identifier": "testEquals", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testEquals() {\n        final Severity severity = Severity.MINOR;\n        final PackageId packId = PackageId.fromString(\"my_pack\");\n        final String description = \"some description\";\n        final Violation violation = new Violation() {\n            @Override\n            public Severity getSeverity() {\n                return severity;\n            }\n\n            @Override\n            public Collection<PackageId> getPackages() {\n                return Collections.singletonList(packId);\n            }\n\n            @Override\n            public String getDescription() {\n                return description;\n            }\n        };\n\n        final JsonObject json = violation.toJson();\n        final SimpleViolation simpleViolation = SimpleViolation.fromJson(json);\n        assertNotEquals(\"SimpleViolation not equal to Violation\", simpleViolation, violation);\n        final SimpleViolation simpleViolationCopy = SimpleViolation.fromReported(violation);\n        assertEquals(\"SimpleViolation equal to copy SimpleViolation\", simpleViolation, simpleViolationCopy);\n\n        // also hashCode\n        assertNotEquals(\"SimpleViolation hashCode not equal to Violation hashCode\",\n                simpleViolation.hashCode(), violation.hashCode());\n        assertEquals(\"SimpleViolation hashCode equal to copy SimpleViolation hashCode\",\n                simpleViolation.hashCode(), simpleViolationCopy.hashCode());\n    }", "signature": "void testEquals()", "full_signature": "@Test public void testEquals()", "class_method_signature": "SimpleViolationTest.testEquals()", "testcase": true, "constructor": false, "invocations": ["fromString", "singletonList", "toJson", "fromJson", "assertNotEquals", "fromReported", "assertEquals", "assertNotEquals", "hashCode", "hashCode", "assertEquals", "hashCode", "hashCode"]}, "focal_class": {"identifier": "SimpleViolation", "superclass": "", "interfaces": "implements Violation", "fields": [{"original_string": "private final Severity severity;", "modifier": "private final", "type": "Severity", "declarator": "severity", "var_name": "severity"}, {"original_string": "private final String description;", "modifier": "private final", "type": "String", "declarator": "description", "var_name": "description"}, {"original_string": "private final List<PackageId> packages;", "modifier": "private final", "type": "List<PackageId>", "declarator": "packages", "var_name": "packages"}], "methods": [{"identifier": "SimpleViolation", "parameters": "(final Severity severity, final String description, final PackageId... packages)", "modifiers": "public", "return": "", "signature": " SimpleViolation(final Severity severity, final String description, final PackageId... packages)", "full_signature": "public  SimpleViolation(final Severity severity, final String description, final PackageId... packages)", "class_method_signature": "SimpleViolation.SimpleViolation(final Severity severity, final String description, final PackageId... packages)", "testcase": false, "constructor": true}, {"identifier": "SimpleViolation", "parameters": "(final Severity severity, final String description, final List<PackageId> packages)", "modifiers": "public", "return": "", "signature": " SimpleViolation(final Severity severity, final String description, final List<PackageId> packages)", "full_signature": "public  SimpleViolation(final Severity severity, final String description, final List<PackageId> packages)", "class_method_signature": "SimpleViolation.SimpleViolation(final Severity severity, final String description, final List<PackageId> packages)", "testcase": false, "constructor": true}, {"identifier": "builder", "parameters": "()", "modifiers": "public static", "return": "Builder", "signature": "Builder builder()", "full_signature": "public static Builder builder()", "class_method_signature": "SimpleViolation.builder()", "testcase": false, "constructor": false}, {"identifier": "builder", "parameters": "(final ResourceBundle resourceBundle)", "modifiers": "public static", "return": "Builder", "signature": "Builder builder(final ResourceBundle resourceBundle)", "full_signature": "public static Builder builder(final ResourceBundle resourceBundle)", "class_method_signature": "SimpleViolation.builder(final ResourceBundle resourceBundle)", "testcase": false, "constructor": false}, {"identifier": "getSeverity", "parameters": "()", "modifiers": "@Override public", "return": "Severity", "signature": "Severity getSeverity()", "full_signature": "@Override public Severity getSeverity()", "class_method_signature": "SimpleViolation.getSeverity()", "testcase": false, "constructor": false}, {"identifier": "getPackages", "parameters": "()", "modifiers": "@Override public", "return": "Collection<PackageId>", "signature": "Collection<PackageId> getPackages()", "full_signature": "@Override public Collection<PackageId> getPackages()", "class_method_signature": "SimpleViolation.getPackages()", "testcase": false, "constructor": false}, {"identifier": "getDescription", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getDescription()", "full_signature": "@Override public String getDescription()", "class_method_signature": "SimpleViolation.getDescription()", "testcase": false, "constructor": false}, {"identifier": "fromReported", "parameters": "(final Violation violation)", "modifiers": "public static", "return": "SimpleViolation", "signature": "SimpleViolation fromReported(final Violation violation)", "full_signature": "public static SimpleViolation fromReported(final Violation violation)", "class_method_signature": "SimpleViolation.fromReported(final Violation violation)", "testcase": false, "constructor": false}, {"identifier": "fromJson", "parameters": "(final JsonObject jsonViolation)", "modifiers": "public static", "return": "SimpleViolation", "signature": "SimpleViolation fromJson(final JsonObject jsonViolation)", "full_signature": "public static SimpleViolation fromJson(final JsonObject jsonViolation)", "class_method_signature": "SimpleViolation.fromJson(final JsonObject jsonViolation)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SimpleViolation.toString()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "SimpleViolation.equals(final Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "SimpleViolation.hashCode()", "testcase": false, "constructor": false}], "file": "api/src/main/java/net/adamcin/oakpal/api/SimpleViolation.java"}, "focal_method": {"identifier": "equals", "parameters": "(final Object o)", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean equals(final Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        SimpleViolation that = (SimpleViolation) o;\n        return severity == that.severity &&\n                Objects.equals(description, that.description) &&\n                packages.equals(that.packages);\n    }", "signature": "boolean equals(final Object o)", "full_signature": "@Override public boolean equals(final Object o)", "class_method_signature": "SimpleViolation.equals(final Object o)", "testcase": false, "constructor": false, "invocations": ["getClass", "getClass", "equals", "equals"]}, "repository": {"repo_id": 155883728, "url": "https://github.com/adamcin/oakpal", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 13349, "license": "licensed"}}