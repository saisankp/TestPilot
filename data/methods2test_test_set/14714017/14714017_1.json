{"test_class": {"identifier": "FluentIterableTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final List<Integer> LIST_1_2_3 = Lists.of(1, 2, 3);", "modifier": "private static final", "type": "List<Integer>", "declarator": "LIST_1_2_3 = Lists.of(1, 2, 3)", "var_name": "LIST_1_2_3"}, {"original_string": "private static final List<Integer> LIST_2_1_3 = Lists.of(2, 1, 3);", "modifier": "private static final", "type": "List<Integer>", "declarator": "LIST_2_1_3 = Lists.of(2, 1, 3)", "var_name": "LIST_2_1_3"}, {"original_string": "private static final Predicate<Integer> MORE_THAN_ONE_PREDICATE = new Predicate<Integer>() {\n    @Override\n    public boolean apply(@Nullable Integer s) {\n      return s > 1;\n    }\n  };", "modifier": "private static final", "type": "Predicate<Integer>", "declarator": "MORE_THAN_ONE_PREDICATE = new Predicate<Integer>() {\n    @Override\n    public boolean apply(@Nullable Integer s) {\n      return s > 1;\n    }\n  }", "var_name": "MORE_THAN_ONE_PREDICATE"}, {"original_string": "private static final Function<Integer,Integer> MULTIPLY_BY_TWO_FUNCTION = new Function<Integer, Integer>() {\n    @Nullable\n    @Override\n    public Integer apply(@Nullable Integer integer) {\n      return integer * 2;\n    }\n  };", "modifier": "private static final", "type": "Function<Integer,Integer>", "declarator": "MULTIPLY_BY_TWO_FUNCTION = new Function<Integer, Integer>() {\n    @Nullable\n    @Override\n    public Integer apply(@Nullable Integer integer) {\n      return integer * 2;\n    }\n  }", "var_name": "MULTIPLY_BY_TWO_FUNCTION"}, {"original_string": "private static final Function<Integer,String> APPEND_COLON_FUNCTION = new Function<Integer, String>() {\n    @Nullable\n    @Override\n    public String apply(@Nullable Integer integer) {\n      return integer + \":\";\n    }\n  };", "modifier": "private static final", "type": "Function<Integer,String>", "declarator": "APPEND_COLON_FUNCTION = new Function<Integer, String>() {\n    @Nullable\n    @Override\n    public String apply(@Nullable Integer integer) {\n      return integer + \":\";\n    }\n  }", "var_name": "APPEND_COLON_FUNCTION"}], "file": "core-parent/util/src/test/java/fr/javatronic/damapping/util/FluentIterableTest.java"}, "test_case": {"identifier": "filter_from_null_collection_throws_NPE", "parameters": "()", "modifiers": "@Test(expectedExceptions = NullPointerException.class) public", "return": "void", "body": "@Test(expectedExceptions = NullPointerException.class)\n  public void filter_from_null_collection_throws_NPE() throws Exception {\n    from(null);\n  }", "signature": "void filter_from_null_collection_throws_NPE()", "full_signature": "@Test(expectedExceptions = NullPointerException.class) public void filter_from_null_collection_throws_NPE()", "class_method_signature": "FluentIterableTest.filter_from_null_collection_throws_NPE()", "testcase": true, "constructor": false, "invocations": ["from"]}, "focal_class": {"identifier": "FluentIterable", "superclass": "", "interfaces": "implements Iterable<Q>", "fields": [{"original_string": "@Nonnull\n  private final Iterable<Q> source;", "modifier": "@Nonnull\n  private final", "type": "Iterable<Q>", "declarator": "source", "var_name": "source"}], "methods": [{"identifier": "FluentIterable", "parameters": "(@Nullable Iterable<Q> source)", "modifiers": "private", "return": "", "signature": " FluentIterable(@Nullable Iterable<Q> source)", "full_signature": "private  FluentIterable(@Nullable Iterable<Q> source)", "class_method_signature": "FluentIterable.FluentIterable(@Nullable Iterable<Q> source)", "testcase": false, "constructor": true}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override public", "return": "Iterator<Q>", "signature": "Iterator<Q> iterator()", "full_signature": "@Override public Iterator<Q> iterator()", "class_method_signature": "FluentIterable.iterator()", "testcase": false, "constructor": false}, {"identifier": "from", "parameters": "(@Nonnull Iterable<T> from)", "modifiers": "public static", "return": "FluentIterable<T>", "signature": "FluentIterable<T> from(@Nonnull Iterable<T> from)", "full_signature": "public static FluentIterable<T> from(@Nonnull Iterable<T> from)", "class_method_signature": "FluentIterable.from(@Nonnull Iterable<T> from)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(final Class<T> type)", "modifiers": "@SuppressWarnings(\"unchecked\") public final", "return": "FluentIterable<T>", "signature": "FluentIterable<T> filter(final Class<T> type)", "full_signature": "@SuppressWarnings(\"unchecked\") public final FluentIterable<T> filter(final Class<T> type)", "class_method_signature": "FluentIterable.filter(final Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "filter", "parameters": "(final Predicate<? super Q> predicate)", "modifiers": "public", "return": "FluentIterable<Q>", "signature": "FluentIterable<Q> filter(final Predicate<? super Q> predicate)", "full_signature": "public FluentIterable<Q> filter(final Predicate<? super Q> predicate)", "class_method_signature": "FluentIterable.filter(final Predicate<? super Q> predicate)", "testcase": false, "constructor": false}, {"identifier": "transform", "parameters": "(final Function<? super Q, ? extends V> function)", "modifiers": "public", "return": "FluentIterable<V>", "signature": "FluentIterable<V> transform(final Function<? super Q, ? extends V> function)", "full_signature": "public FluentIterable<V> transform(final Function<? super Q, ? extends V> function)", "class_method_signature": "FluentIterable.transform(final Function<? super Q, ? extends V> function)", "testcase": false, "constructor": false}, {"identifier": "nonNullIterable", "parameters": "(@Nullable Iterable<Q> source)", "modifiers": "@Nonnull private", "return": "Iterable<Q>", "signature": "Iterable<Q> nonNullIterable(@Nullable Iterable<Q> source)", "full_signature": "@Nonnull private Iterable<Q> nonNullIterable(@Nullable Iterable<Q> source)", "class_method_signature": "FluentIterable.nonNullIterable(@Nullable Iterable<Q> source)", "testcase": false, "constructor": false}, {"identifier": "toList", "parameters": "()", "modifiers": "public", "return": "List<Q>", "signature": "List<Q> toList()", "full_signature": "public List<Q> toList()", "class_method_signature": "FluentIterable.toList()", "testcase": false, "constructor": false}, {"identifier": "toSet", "parameters": "()", "modifiers": "public", "return": "Set<Q>", "signature": "Set<Q> toSet()", "full_signature": "public Set<Q> toSet()", "class_method_signature": "FluentIterable.toSet()", "testcase": false, "constructor": false}, {"identifier": "populateFromIterator", "parameters": "(T collection, Iterator<R> iterator)", "modifiers": "private static", "return": "T", "signature": "T populateFromIterator(T collection, Iterator<R> iterator)", "full_signature": "private static T populateFromIterator(T collection, Iterator<R> iterator)", "class_method_signature": "FluentIterable.populateFromIterator(T collection, Iterator<R> iterator)", "testcase": false, "constructor": false}, {"identifier": "first", "parameters": "()", "modifiers": "public", "return": "Optional<Q>", "signature": "Optional<Q> first()", "full_signature": "public Optional<Q> first()", "class_method_signature": "FluentIterable.first()", "testcase": false, "constructor": false}, {"identifier": "firstMatch", "parameters": "(Predicate<Q> predicate)", "modifiers": "public", "return": "Optional<Q>", "signature": "Optional<Q> firstMatch(Predicate<Q> predicate)", "full_signature": "public Optional<Q> firstMatch(Predicate<Q> predicate)", "class_method_signature": "FluentIterable.firstMatch(Predicate<Q> predicate)", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int size()", "full_signature": "public int size()", "class_method_signature": "FluentIterable.size()", "testcase": false, "constructor": false}], "file": "core-parent/util/src/main/java/fr/javatronic/damapping/util/FluentIterable.java"}, "focal_method": {"identifier": "from", "parameters": "(@Nonnull Iterable<T> from)", "modifiers": "public static", "return": "FluentIterable<T>", "body": "public static <T> FluentIterable<T> from(@Nonnull Iterable<T> from) {\n    return new FluentIterable<T>(checkNotNull(from, \"Source can not be null\"));\n  }", "signature": "FluentIterable<T> from(@Nonnull Iterable<T> from)", "full_signature": "public static FluentIterable<T> from(@Nonnull Iterable<T> from)", "class_method_signature": "FluentIterable.from(@Nonnull Iterable<T> from)", "testcase": false, "constructor": false, "invocations": ["checkNotNull"]}, "repository": {"repo_id": 14714017, "url": "https://github.com/lesaint/damapping", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 14, "size": 4324, "license": "licensed"}}