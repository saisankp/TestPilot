{"test_class": {"identifier": "StringToOpenTypeConverterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private StringToOpenTypeConverter converter;", "modifier": "private", "type": "StringToOpenTypeConverter", "declarator": "converter", "var_name": "converter"}], "file": "agent/core/src/test/java/org/jolokia/converter/object/StringToOpenTypeConverterTest.java"}, "test_case": {"identifier": "multipleLevleTabularData", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void multipleLevleTabularData() throws OpenDataException {\n        JSONObject map = new JSONObject();\n        JSONObject inner = new JSONObject();\n        map.put(\"fcn\",inner);\n        JSONObject innerinner = new JSONObject();\n        inner.put(\"franconia\",innerinner);\n        innerinner.put(\"verein\",\"fcn\");\n        innerinner.put(\"region\",\"franconia\");\n        innerinner.put(\"absteiger\",false);\n\n        TabularType type = new TabularType(\"soccer\",\"soccer\",\n                                           new CompositeType(\"row\",\"row\",\n                                                             new String[] { \"verein\", \"region\", \"absteiger\" },\n                                                             new String[] { \"verein\",\"region\",\"absteiger\"},\n                                                             new OpenType[] { STRING, STRING, BOOLEAN}),\n                                           new String[] { \"verein\", \"region\" });\n        TabularData data = (TabularData) converter.convertToObject(type,map);\n        CompositeData row = data.get(new Object[] { \"fcn\", \"franconia\" });\n        assertNotNull(row);\n        assertFalse((Boolean) row.get(\"absteiger\"));\n    }", "signature": "void multipleLevleTabularData()", "full_signature": "@Test public void multipleLevleTabularData()", "class_method_signature": "StringToOpenTypeConverterTest.multipleLevleTabularData()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "put", "put", "convertToObject", "get", "assertNotNull", "assertFalse", "get"]}, "focal_class": {"identifier": "StringToOpenTypeConverter", "superclass": "extends OpenTypeConverter", "interfaces": "", "fields": [{"original_string": "private List<OpenTypeConverter<? extends OpenType>> converters;", "modifier": "private", "type": "List<OpenTypeConverter<? extends OpenType>>", "declarator": "converters", "var_name": "converters"}], "methods": [{"identifier": "StringToOpenTypeConverter", "parameters": "(StringToObjectConverter pStringToObjectConverter)", "modifiers": "public", "return": "", "signature": " StringToOpenTypeConverter(StringToObjectConverter pStringToObjectConverter)", "full_signature": "public  StringToOpenTypeConverter(StringToObjectConverter pStringToObjectConverter)", "class_method_signature": "StringToOpenTypeConverter.StringToOpenTypeConverter(StringToObjectConverter pStringToObjectConverter)", "testcase": false, "constructor": true}, {"identifier": "convertToObject", "parameters": "(OpenType openType, Object pValue)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "Object", "signature": "Object convertToObject(OpenType openType, Object pValue)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public Object convertToObject(OpenType openType, Object pValue)", "class_method_signature": "StringToOpenTypeConverter.convertToObject(OpenType openType, Object pValue)", "testcase": false, "constructor": false}, {"identifier": "canConvert", "parameters": "(OpenType pType)", "modifiers": "@Override", "return": "boolean", "signature": "boolean canConvert(OpenType pType)", "full_signature": "@Override boolean canConvert(OpenType pType)", "class_method_signature": "StringToOpenTypeConverter.canConvert(OpenType pType)", "testcase": false, "constructor": false}, {"identifier": "makeForgiving", "parameters": "()", "modifiers": "public", "return": "StringToOpenTypeConverter", "signature": "StringToOpenTypeConverter makeForgiving()", "full_signature": "public StringToOpenTypeConverter makeForgiving()", "class_method_signature": "StringToOpenTypeConverter.makeForgiving()", "testcase": false, "constructor": false}], "file": "agent/core/src/main/java/org/jolokia/converter/object/StringToOpenTypeConverter.java"}, "focal_method": {"identifier": "convertToObject", "parameters": "(OpenType openType, Object pValue)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "Object", "body": "@SuppressWarnings(\"unchecked\")\n    @Override\n\tpublic Object convertToObject(OpenType openType, Object pValue) {\n        if (pValue == null) {\n            return null;\n        } else {\n            for (OpenTypeConverter converter : converters) {\n                if (converter.canConvert(openType)) {\n                    return converter.convertToObject(openType,pValue);\n                }\n            }\n            throw new IllegalArgumentException(\n                    \"Cannot convert \" + pValue + \" to \" + openType + \": \" + \"No converter could be found\");\n        }\n\t}", "signature": "Object convertToObject(OpenType openType, Object pValue)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public Object convertToObject(OpenType openType, Object pValue)", "class_method_signature": "StringToOpenTypeConverter.convertToObject(OpenType openType, Object pValue)", "testcase": false, "constructor": false, "invocations": ["canConvert", "convertToObject"]}, "repository": {"repo_id": 777444, "url": "https://github.com/rhuss/jolokia", "language": "Java", "is_fork": false, "fork_count": 187, "stargazer_count": 682, "size": 20451, "license": "licensed"}}