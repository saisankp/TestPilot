{"test_class": {"identifier": "ExtendedFingerprinterTest", "superclass": "extends AbstractFixedLengthFingerprinterTest", "interfaces": "", "fields": [], "file": "descriptor/fingerprint/src/test/java/org/openscience/cdk/fingerprint/ExtendedFingerprinterTest.java"}, "test_case": {"identifier": "testCondensedSingle", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCondensedSingle() throws Exception {\n        IAtomContainer molcondensed = new AtomContainer();\n        IAtom a1 = molcondensed.getBuilder().newInstance(IAtom.class, \"C\");\n        a1.setPoint2d(new Point2d(421.99999999999994, 860.0));\n        molcondensed.addAtom(a1);\n        IAtom a2 = molcondensed.getBuilder().newInstance(IAtom.class, \"C\");\n        a2.setPoint2d(new Point2d(390.8230854637602, 878.0));\n        molcondensed.addAtom(a2);\n        IAtom a3 = molcondensed.getBuilder().newInstance(IAtom.class, \"C\");\n        a3.setPoint2d(new Point2d(390.8230854637602, 914.0));\n        molcondensed.addAtom(a3);\n        IAtom a4 = molcondensed.getBuilder().newInstance(IAtom.class, \"C\");\n        a4.setPoint2d(new Point2d(422.0, 932.0));\n        molcondensed.addAtom(a4);\n        IAtom a5 = molcondensed.getBuilder().newInstance(IAtom.class, \"C\");\n        a5.setPoint2d(new Point2d(453.1769145362398, 914.0));\n        molcondensed.addAtom(a5);\n        IAtom a6 = molcondensed.getBuilder().newInstance(IAtom.class, \"C\");\n        a6.setPoint2d(new Point2d(453.1769145362398, 878.0));\n        molcondensed.addAtom(a6);\n        IAtom a7 = molcondensed.getBuilder().newInstance(IAtom.class, \"C\");\n        a7.setPoint2d(new Point2d(484.3538290724796, 860.0));\n        molcondensed.addAtom(a7);\n        IAtom a8 = molcondensed.getBuilder().newInstance(IAtom.class, \"C\");\n        a8.setPoint2d(new Point2d(515.5307436087194, 878.0));\n        molcondensed.addAtom(a8);\n        IAtom a9 = molcondensed.getBuilder().newInstance(IAtom.class, \"C\");\n        a9.setPoint2d(new Point2d(515.5307436087194, 914.0));\n        molcondensed.addAtom(a9);\n        IAtom a10 = molcondensed.getBuilder().newInstance(IAtom.class, \"C\");\n        a10.setPoint2d(new Point2d(484.3538290724796, 932.0));\n        molcondensed.addAtom(a10);\n        IAtom a11 = molcondensed.getBuilder().newInstance(IAtom.class, \"C\");\n        a11.setPoint2d(new Point2d(546.7076581449592, 932.0));\n        molcondensed.addAtom(a11);\n        IAtom a12 = molcondensed.getBuilder().newInstance(IAtom.class, \"C\");\n        a12.setPoint2d(new Point2d(577.884572681199, 914.0));\n        molcondensed.addAtom(a12);\n        IAtom a13 = molcondensed.getBuilder().newInstance(IAtom.class, \"C\");\n        a13.setPoint2d(new Point2d(577.884572681199, 878.0));\n        molcondensed.addAtom(a13);\n        IAtom a14 = molcondensed.getBuilder().newInstance(IAtom.class, \"C\");\n        a14.setPoint2d(new Point2d(546.7076581449592, 860.0));\n        molcondensed.addAtom(a14);\n        IAtom a15 = molcondensed.getBuilder().newInstance(IAtom.class, \"C\");\n        a15.setPoint2d(new Point2d(359.6461709275204, 860.0));\n        molcondensed.addAtom(a15);\n        IAtom a16 = molcondensed.getBuilder().newInstance(IAtom.class, \"C\");\n        a16.setPoint2d(new Point2d(609.0614872174388, 860.0));\n        molcondensed.addAtom(a16);\n        IBond b1 = molcondensed.getBuilder().newInstance(IBond.class, a1, a2, IBond.Order.SINGLE);\n        molcondensed.addBond(b1);\n        IBond b2 = molcondensed.getBuilder().newInstance(IBond.class, a2, a3, IBond.Order.SINGLE);\n        molcondensed.addBond(b2);\n        IBond b3 = molcondensed.getBuilder().newInstance(IBond.class, a3, a4, IBond.Order.SINGLE);\n        molcondensed.addBond(b3);\n        IBond b4 = molcondensed.getBuilder().newInstance(IBond.class, a4, a5, IBond.Order.SINGLE);\n        molcondensed.addBond(b4);\n        IBond b5 = molcondensed.getBuilder().newInstance(IBond.class, a5, a6, IBond.Order.SINGLE);\n        molcondensed.addBond(b5);\n        IBond b6 = molcondensed.getBuilder().newInstance(IBond.class, a6, a1, IBond.Order.SINGLE);\n        molcondensed.addBond(b6);\n        IBond b7 = molcondensed.getBuilder().newInstance(IBond.class, a6, a7, IBond.Order.SINGLE);\n        molcondensed.addBond(b7);\n        IBond b8 = molcondensed.getBuilder().newInstance(IBond.class, a7, a8, IBond.Order.SINGLE);\n        molcondensed.addBond(b8);\n        IBond b9 = molcondensed.getBuilder().newInstance(IBond.class, a8, a9, IBond.Order.SINGLE);\n        molcondensed.addBond(b9);\n        IBond b10 = molcondensed.getBuilder().newInstance(IBond.class, a9, a10, IBond.Order.SINGLE);\n        molcondensed.addBond(b10);\n        IBond b11 = molcondensed.getBuilder().newInstance(IBond.class, a10, a5, IBond.Order.SINGLE);\n        molcondensed.addBond(b11);\n        IBond b12 = molcondensed.getBuilder().newInstance(IBond.class, a9, a11, IBond.Order.SINGLE);\n        molcondensed.addBond(b12);\n        IBond b13 = molcondensed.getBuilder().newInstance(IBond.class, a11, a12, IBond.Order.SINGLE);\n        molcondensed.addBond(b13);\n        IBond b14 = molcondensed.getBuilder().newInstance(IBond.class, a12, a13, IBond.Order.SINGLE);\n        molcondensed.addBond(b14);\n        IBond b15 = molcondensed.getBuilder().newInstance(IBond.class, a13, a14, IBond.Order.SINGLE);\n        molcondensed.addBond(b15);\n        IBond b16 = molcondensed.getBuilder().newInstance(IBond.class, a14, a8, IBond.Order.SINGLE);\n        molcondensed.addBond(b16);\n        IBond b17 = molcondensed.getBuilder().newInstance(IBond.class, a2, a15, IBond.Order.SINGLE);\n        molcondensed.addBond(b17);\n        IBond b18 = molcondensed.getBuilder().newInstance(IBond.class, a13, a16, IBond.Order.SINGLE);\n        molcondensed.addBond(b18);\n\n        IAtomContainer molsingle = new AtomContainer();\n        IAtom a1s = molsingle.getBuilder().newInstance(IAtom.class, \"C\");\n        a1s.setPoint2d(new Point2d(421.99999999999994, 860.0));\n        molsingle.addAtom(a1s);\n        IAtom a2s = molsingle.getBuilder().newInstance(IAtom.class, \"C\");\n        a2s.setPoint2d(new Point2d(390.8230854637602, 878.0));\n        molsingle.addAtom(a2s);\n        IAtom a6s = molsingle.getBuilder().newInstance(IAtom.class, \"C\");\n        a6s.setPoint2d(new Point2d(453.1769145362398, 878.0));\n        molsingle.addAtom(a6s);\n        IAtom a3s = molsingle.getBuilder().newInstance(IAtom.class, \"C\");\n        a3s.setPoint2d(new Point2d(390.8230854637602, 914.0));\n        molsingle.addAtom(a3s);\n        IAtom a15s = molsingle.getBuilder().newInstance(IAtom.class, \"C\");\n        a15s.setPoint2d(new Point2d(359.6461709275204, 860.0));\n        molsingle.addAtom(a15s);\n        IAtom a5s = molsingle.getBuilder().newInstance(IAtom.class, \"C\");\n        a5s.setPoint2d(new Point2d(453.1769145362398, 914.0));\n        molsingle.addAtom(a5s);\n        IAtom a7s = molsingle.getBuilder().newInstance(IAtom.class, \"C\");\n        a7s.setPoint2d(new Point2d(492.8230854637602, 881.0));\n        molsingle.addAtom(a7s);\n        IAtom a4s = molsingle.getBuilder().newInstance(IAtom.class, \"C\");\n        a4s.setPoint2d(new Point2d(422.0, 932.0));\n        molsingle.addAtom(a4s);\n        IAtom a8s = molsingle.getBuilder().newInstance(IAtom.class, \"C\");\n        a8s.setPoint2d(new Point2d(524.0, 863.0));\n        molsingle.addAtom(a8s);\n        IAtom a9s = molsingle.getBuilder().newInstance(IAtom.class, \"C\");\n        a9s.setPoint2d(new Point2d(492.8230854637602, 917.0));\n        molsingle.addAtom(a9s);\n        IAtom a10s = molsingle.getBuilder().newInstance(IAtom.class, \"C\");\n        a10s.setPoint2d(new Point2d(555.1769145362398, 881.0));\n        molsingle.addAtom(a10s);\n        IAtom a11s = molsingle.getBuilder().newInstance(IAtom.class, \"C\");\n        a11s.setPoint2d(new Point2d(524.0, 935.0));\n        molsingle.addAtom(a11s);\n        IAtom a12s = molsingle.getBuilder().newInstance(IAtom.class, \"C\");\n        a12s.setPoint2d(new Point2d(555.1769145362398, 917.0));\n        molsingle.addAtom(a12s);\n        IAtom a13s = molsingle.getBuilder().newInstance(IAtom.class, \"C\");\n        a13s.setPoint2d(new Point2d(592.8230854637602, 889.0));\n        molsingle.addAtom(a13s);\n        IAtom a14s = molsingle.getBuilder().newInstance(IAtom.class, \"C\");\n        a14s.setPoint2d(new Point2d(624.0, 871.0));\n        molsingle.addAtom(a14s);\n        IAtom a16s = molsingle.getBuilder().newInstance(IAtom.class, \"C\");\n        a16s.setPoint2d(new Point2d(592.8230854637602, 925.0));\n        molsingle.addAtom(a16s);\n        IAtom a17s = molsingle.getBuilder().newInstance(IAtom.class, \"C\");\n        a17s.setPoint2d(new Point2d(655.1769145362398, 889.0));\n        molsingle.addAtom(a17s);\n        IAtom a18s = molsingle.getBuilder().newInstance(IAtom.class, \"C\");\n        a18s.setPoint2d(new Point2d(624.0, 943.0));\n        molsingle.addAtom(a18s);\n        IAtom a19s = molsingle.getBuilder().newInstance(IAtom.class, \"C\");\n        a19s.setPoint2d(new Point2d(655.1769145362398, 925.0));\n        molsingle.addAtom(a19s);\n        IAtom a20s = molsingle.getBuilder().newInstance(IAtom.class, \"C\");\n        a20s.setPoint2d(new Point2d(686.3538290724796, 871.0));\n        molsingle.addAtom(a20s);\n        IBond b1s = molsingle.getBuilder().newInstance(IBond.class, a1s, a2s, IBond.Order.SINGLE);\n        molsingle.addBond(b1s);\n        IBond b6s = molsingle.getBuilder().newInstance(IBond.class, a6s, a1s, IBond.Order.SINGLE);\n        molsingle.addBond(b6s);\n        IBond b2s = molsingle.getBuilder().newInstance(IBond.class, a2s, a3s, IBond.Order.SINGLE);\n        molsingle.addBond(b2s);\n        IBond b17s = molsingle.getBuilder().newInstance(IBond.class, a2s, a15s, IBond.Order.SINGLE);\n        molsingle.addBond(b17s);\n        IBond b5s = molsingle.getBuilder().newInstance(IBond.class, a5s, a6s, IBond.Order.SINGLE);\n        molsingle.addBond(b5s);\n        IBond b7s = molsingle.getBuilder().newInstance(IBond.class, a6s, a7s, IBond.Order.SINGLE);\n        molsingle.addBond(b7s);\n        IBond b3s = molsingle.getBuilder().newInstance(IBond.class, a3s, a4s, IBond.Order.SINGLE);\n        molsingle.addBond(b3s);\n        IBond b4s = molsingle.getBuilder().newInstance(IBond.class, a4s, a5s, IBond.Order.SINGLE);\n        molsingle.addBond(b4s);\n        IBond b8s = molsingle.getBuilder().newInstance(IBond.class, a8s, a7s, IBond.Order.SINGLE);\n        molsingle.addBond(b8s);\n        IBond b9s = molsingle.getBuilder().newInstance(IBond.class, a7s, a9s, IBond.Order.SINGLE);\n        molsingle.addBond(b9s);\n        IBond b10s = molsingle.getBuilder().newInstance(IBond.class, a10s, a8s, IBond.Order.SINGLE);\n        molsingle.addBond(b10s);\n        IBond b11s = molsingle.getBuilder().newInstance(IBond.class, a9s, a11s, IBond.Order.SINGLE);\n        molsingle.addBond(b11s);\n        IBond b12s = molsingle.getBuilder().newInstance(IBond.class, a12s, a10s, IBond.Order.SINGLE);\n        molsingle.addBond(b12s);\n        IBond b13s = molsingle.getBuilder().newInstance(IBond.class, a10s, a13s, IBond.Order.SINGLE);\n        molsingle.addBond(b13s);\n        IBond b14s = molsingle.getBuilder().newInstance(IBond.class, a11s, a12s, IBond.Order.SINGLE);\n        molsingle.addBond(b14s);\n        IBond b15s = molsingle.getBuilder().newInstance(IBond.class, a14s, a13s, IBond.Order.SINGLE);\n        molsingle.addBond(b15s);\n        IBond b16s = molsingle.getBuilder().newInstance(IBond.class, a13s, a16s, IBond.Order.SINGLE);\n        molsingle.addBond(b16s);\n        IBond b18s = molsingle.getBuilder().newInstance(IBond.class, a17s, a14s, IBond.Order.SINGLE);\n        molsingle.addBond(b18s);\n        IBond b19s = molsingle.getBuilder().newInstance(IBond.class, a16s, a18s, IBond.Order.SINGLE);\n        molsingle.addBond(b19s);\n        IBond b20s = molsingle.getBuilder().newInstance(IBond.class, a19s, a17s, IBond.Order.SINGLE);\n        molsingle.addBond(b20s);\n        IBond b21s = molsingle.getBuilder().newInstance(IBond.class, a18s, a19s, IBond.Order.SINGLE);\n        molsingle.addBond(b21s);\n        IBond b22s = molsingle.getBuilder().newInstance(IBond.class, a17s, a20s, IBond.Order.SINGLE);\n        molsingle.addBond(b22s);\n\n        IFingerprinter fingerprinter = new ExtendedFingerprinter();\n        BitSet bs1 = fingerprinter.getBitFingerprint(molsingle).asBitSet();\n        BitSet bs2 = fingerprinter.getBitFingerprint(molcondensed).asBitSet();\n\n        Assert.assertFalse(FingerprinterTool.isSubset(bs1, bs2));\n        Assert.assertTrue(FingerprinterTool.isSubset(bs2, bs1));\n\n    }", "signature": "void testCondensedSingle()", "full_signature": "@Test public void testCondensedSingle()", "class_method_signature": "ExtendedFingerprinterTest.testCondensedSingle()", "testcase": true, "constructor": false, "invocations": ["newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "setPoint2d", "addAtom", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "newInstance", "getBuilder", "addBond", "asBitSet", "getBitFingerprint", "asBitSet", "getBitFingerprint", "assertFalse", "isSubset", "assertTrue", "isSubset"]}, "focal_class": {"identifier": "ExtendedFingerprinter", "superclass": "extends Fingerprinter", "interfaces": "implements IFingerprinter", "fields": [{"original_string": "private final int     RESERVED_BITS = 25;", "modifier": "private final", "type": "int", "declarator": "RESERVED_BITS = 25", "var_name": "RESERVED_BITS"}, {"original_string": "private Fingerprinter fingerprinter = null;", "modifier": "private", "type": "Fingerprinter", "declarator": "fingerprinter = null", "var_name": "fingerprinter"}], "methods": [{"identifier": "ExtendedFingerprinter", "parameters": "()", "modifiers": "public", "return": "", "signature": " ExtendedFingerprinter()", "full_signature": "public  ExtendedFingerprinter()", "class_method_signature": "ExtendedFingerprinter.ExtendedFingerprinter()", "testcase": false, "constructor": true}, {"identifier": "ExtendedFingerprinter", "parameters": "(int size)", "modifiers": "public", "return": "", "signature": " ExtendedFingerprinter(int size)", "full_signature": "public  ExtendedFingerprinter(int size)", "class_method_signature": "ExtendedFingerprinter.ExtendedFingerprinter(int size)", "testcase": false, "constructor": true}, {"identifier": "ExtendedFingerprinter", "parameters": "(int size, int searchDepth)", "modifiers": "public", "return": "", "signature": " ExtendedFingerprinter(int size, int searchDepth)", "full_signature": "public  ExtendedFingerprinter(int size, int searchDepth)", "class_method_signature": "ExtendedFingerprinter.ExtendedFingerprinter(int size, int searchDepth)", "testcase": false, "constructor": true}, {"identifier": "getBitFingerprint", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "IBitFingerprint", "signature": "IBitFingerprint getBitFingerprint(IAtomContainer container)", "full_signature": "@Override public IBitFingerprint getBitFingerprint(IAtomContainer container)", "class_method_signature": "ExtendedFingerprinter.getBitFingerprint(IAtomContainer container)", "testcase": false, "constructor": false}, {"identifier": "getRawFingerprint", "parameters": "(IAtomContainer iAtomContainer)", "modifiers": "@Override public", "return": "Map<String, Integer>", "signature": "Map<String, Integer> getRawFingerprint(IAtomContainer iAtomContainer)", "full_signature": "@Override public Map<String, Integer> getRawFingerprint(IAtomContainer iAtomContainer)", "class_method_signature": "ExtendedFingerprinter.getRawFingerprint(IAtomContainer iAtomContainer)", "testcase": false, "constructor": false}, {"identifier": "getBitFingerprint", "parameters": "(IAtomContainer atomContainer, IRingSet ringSet, List<IRingSet> rslist)", "modifiers": "public", "return": "IBitFingerprint", "signature": "IBitFingerprint getBitFingerprint(IAtomContainer atomContainer, IRingSet ringSet, List<IRingSet> rslist)", "full_signature": "public IBitFingerprint getBitFingerprint(IAtomContainer atomContainer, IRingSet ringSet, List<IRingSet> rslist)", "class_method_signature": "ExtendedFingerprinter.getBitFingerprint(IAtomContainer atomContainer, IRingSet ringSet, List<IRingSet> rslist)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSize()", "full_signature": "@Override public int getSize()", "class_method_signature": "ExtendedFingerprinter.getSize()", "testcase": false, "constructor": false}, {"identifier": "getCountFingerprint", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "ICountFingerprint", "signature": "ICountFingerprint getCountFingerprint(IAtomContainer container)", "full_signature": "@Override public ICountFingerprint getCountFingerprint(IAtomContainer container)", "class_method_signature": "ExtendedFingerprinter.getCountFingerprint(IAtomContainer container)", "testcase": false, "constructor": false}], "file": "descriptor/fingerprint/src/main/java/org/openscience/cdk/fingerprint/ExtendedFingerprinter.java"}, "focal_method": {"identifier": "getBitFingerprint", "parameters": "(IAtomContainer container)", "modifiers": "@Override public", "return": "IBitFingerprint", "body": "@Override\n    public IBitFingerprint getBitFingerprint(IAtomContainer container) throws CDKException {\n        return this.getBitFingerprint(container, null, null);\n    }", "signature": "IBitFingerprint getBitFingerprint(IAtomContainer container)", "full_signature": "@Override public IBitFingerprint getBitFingerprint(IAtomContainer container)", "class_method_signature": "ExtendedFingerprinter.getBitFingerprint(IAtomContainer container)", "testcase": false, "constructor": false, "invocations": ["getBitFingerprint"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}