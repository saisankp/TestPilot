{"test_class": {"identifier": "OakIndexDefinitionValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private OakIndexDefinitionValidator validator;", "modifier": "private", "type": "OakIndexDefinitionValidator", "declarator": "validator", "var_name": "validator"}, {"original_string": "private Path rootPackagePath = Paths.get(\"rootpackage\");", "modifier": "private", "type": "Path", "declarator": "rootPackagePath = Paths.get(\"rootpackage\")", "var_name": "rootPackagePath"}], "file": "vault-validation/src/test/java/org/apache/jackrabbit/vault/validation/spi/impl/OakIndexDefinitionValidatorTest.java"}, "test_case": {"identifier": "test_index_acl", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void test_index_acl() throws IOException, ConfigurationException {\n        try (InputStream input = this.getClass().getResourceAsStream(\"/oak-index/filter-with-acl.xml\")) {\n            DefaultWorkspaceFilter filter = new DefaultWorkspaceFilter();\n            filter.load(input);\n            Assert.assertThat(validator.validate(filter), AnyValidationMessageMatcher.noValidationInCollection());\n        }\n        Map<String, DocViewProperty> props = new HashMap<>();\n        props.put(\"rep:policy\", new DocViewProperty(\"rep:policy\", new String[] { \"/home]\" }, true, PropertyType.STRING));\n        DocViewNode node = new DocViewNode(\"rep:policy\", \"rep:policy\", null, props, null, \"rep:ACL\");\n\n        Collection<ValidationMessage> messages = validator.validate(node, \"/oak:index/rep:policy\",\n                Paths.get(\"_oak_index\", \"_rep_policy.xml\"), true);\n        Assert.assertThat(messages, AnyValidationMessageMatcher.noValidationInCollection());\n        node = new DocViewNode(\"allow\", \"allow\", null, props, null, \"rep:GrantACE\");\n        messages = validator.validate(node, \"/oak:index/rep:policy/allow\",\n                Paths.get(\"_oak_index\", \"_rep_policy.xml\"), false);\n        Assert.assertThat(messages, AnyValidationMessageMatcher.noValidationInCollection());\n    }", "signature": "void test_index_acl()", "full_signature": "@Test public void test_index_acl()", "class_method_signature": "OakIndexDefinitionValidatorTest.test_index_acl()", "testcase": true, "constructor": false, "invocations": ["getResourceAsStream", "getClass", "load", "assertThat", "validate", "noValidationInCollection", "put", "validate", "get", "assertThat", "noValidationInCollection", "validate", "get", "assertThat", "noValidationInCollection"]}, "focal_class": {"identifier": "OakIndexDefinitionValidator", "superclass": "", "interfaces": "implements FilterValidator, DocumentViewXmlValidator", "fields": [{"original_string": "static final String MESSAGE_POTENTIAL_INDEX_IN_FILTER = \"Package '%s' contains filter rule overwriting a potential index definition below '%s' but the according property \" + PackageProperties.NAME_ALLOW_INDEX_DEFINITIONS + \" is not set to 'true'\";", "modifier": "static final", "type": "String", "declarator": "MESSAGE_POTENTIAL_INDEX_IN_FILTER = \"Package '%s' contains filter rule overwriting a potential index definition below '%s' but the according property \" + PackageProperties.NAME_ALLOW_INDEX_DEFINITIONS + \" is not set to 'true'\"", "var_name": "MESSAGE_POTENTIAL_INDEX_IN_FILTER"}, {"original_string": "static final String MESSAGE_INDEX_AT_NODE = \"Package '%s' contains index definition at node '%s but the according property \" + PackageProperties.NAME_ALLOW_INDEX_DEFINITIONS + \" is not set to 'true'\";", "modifier": "static final", "type": "String", "declarator": "MESSAGE_INDEX_AT_NODE = \"Package '%s' contains index definition at node '%s but the according property \" + PackageProperties.NAME_ALLOW_INDEX_DEFINITIONS + \" is not set to 'true'\"", "var_name": "MESSAGE_INDEX_AT_NODE"}, {"original_string": "private final Path packageRootPathOfNotAllowedIndexDefinition;", "modifier": "private final", "type": "Path", "declarator": "packageRootPathOfNotAllowedIndexDefinition", "var_name": "packageRootPathOfNotAllowedIndexDefinition"}, {"original_string": "private final ValidationMessageSeverity defaultMessageSeverity;", "modifier": "private final", "type": "ValidationMessageSeverity", "declarator": "defaultMessageSeverity", "var_name": "defaultMessageSeverity"}], "methods": [{"identifier": "OakIndexDefinitionValidator", "parameters": "(Path path, ValidationMessageSeverity defaultMessageSeverity)", "modifiers": "public", "return": "", "signature": " OakIndexDefinitionValidator(Path path, ValidationMessageSeverity defaultMessageSeverity)", "full_signature": "public  OakIndexDefinitionValidator(Path path, ValidationMessageSeverity defaultMessageSeverity)", "class_method_signature": "OakIndexDefinitionValidator.OakIndexDefinitionValidator(Path path, ValidationMessageSeverity defaultMessageSeverity)", "testcase": false, "constructor": true}, {"identifier": "validate", "parameters": "(@NotNull WorkspaceFilter filter)", "modifiers": "@Override public @Nullable", "return": "Collection<ValidationMessage>", "signature": "Collection<ValidationMessage> validate(@NotNull WorkspaceFilter filter)", "full_signature": "@Override public @Nullable Collection<ValidationMessage> validate(@NotNull WorkspaceFilter filter)", "class_method_signature": "OakIndexDefinitionValidator.validate(@NotNull WorkspaceFilter filter)", "testcase": false, "constructor": false}, {"identifier": "collectIndexPaths", "parameters": "(List<PathFilterSet> pathFilters)", "modifiers": "public", "return": "Collection<ValidationMessage>", "signature": "Collection<ValidationMessage> collectIndexPaths(List<PathFilterSet> pathFilters)", "full_signature": "public Collection<ValidationMessage> collectIndexPaths(List<PathFilterSet> pathFilters)", "class_method_signature": "OakIndexDefinitionValidator.collectIndexPaths(List<PathFilterSet> pathFilters)", "testcase": false, "constructor": false}, {"identifier": "validate", "parameters": "(@NotNull DocViewNode node, @NotNull String nodePath, @NotNull Path filePath, boolean isRoot)", "modifiers": "@Override public @Nullable", "return": "Collection<ValidationMessage>", "signature": "Collection<ValidationMessage> validate(@NotNull DocViewNode node, @NotNull String nodePath, @NotNull Path filePath, boolean isRoot)", "full_signature": "@Override public @Nullable Collection<ValidationMessage> validate(@NotNull DocViewNode node, @NotNull String nodePath, @NotNull Path filePath, boolean isRoot)", "class_method_signature": "OakIndexDefinitionValidator.validate(@NotNull DocViewNode node, @NotNull String nodePath, @NotNull Path filePath, boolean isRoot)", "testcase": false, "constructor": false}, {"identifier": "done", "parameters": "()", "modifiers": "@Override public @Nullable", "return": "Collection<ValidationMessage>", "signature": "Collection<ValidationMessage> done()", "full_signature": "@Override public @Nullable Collection<ValidationMessage> done()", "class_method_signature": "OakIndexDefinitionValidator.done()", "testcase": false, "constructor": false}], "file": "vault-validation/src/main/java/org/apache/jackrabbit/vault/validation/spi/impl/OakIndexDefinitionValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(@NotNull WorkspaceFilter filter)", "modifiers": "@Override public @Nullable", "return": "Collection<ValidationMessage>", "body": "@Override\n    public @Nullable Collection<ValidationMessage> validate(@NotNull WorkspaceFilter filter) {\n        Collection<ValidationMessage> violations = new LinkedList<>();\n        violations.addAll(collectIndexPaths(filter.getFilterSets()));\n        return violations;\n    }", "signature": "Collection<ValidationMessage> validate(@NotNull WorkspaceFilter filter)", "full_signature": "@Override public @Nullable Collection<ValidationMessage> validate(@NotNull WorkspaceFilter filter)", "class_method_signature": "OakIndexDefinitionValidator.validate(@NotNull WorkspaceFilter filter)", "testcase": false, "constructor": false, "invocations": ["addAll", "collectIndexPaths", "getFilterSets"]}, "repository": {"repo_id": 16021499, "url": "https://github.com/apache/jackrabbit-filevault", "stars": 24, "created": "1/18/2014 8:00:07 AM +00:00", "updates": "2020-01-22T11:47:21+00:00", "fork": "False", "license": "licensed"}}