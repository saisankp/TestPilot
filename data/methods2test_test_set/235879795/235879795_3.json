{"test_class": {"identifier": "DartAnalyzerReportParserTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String FILE_PATH = \"lib/main.dart\";", "modifier": "private static final", "type": "String", "declarator": "FILE_PATH = \"lib/main.dart\"", "var_name": "FILE_PATH"}, {"original_string": "private static final String RULE_ID_UNUSED_LOCAL_VARIABLE = \"unused_local_variable\";", "modifier": "private static final", "type": "String", "declarator": "RULE_ID_UNUSED_LOCAL_VARIABLE = \"unused_local_variable\"", "var_name": "RULE_ID_UNUSED_LOCAL_VARIABLE"}, {"original_string": "private DartAnalyzerReportParser parser;", "modifier": "private", "type": "DartAnalyzerReportParser", "declarator": "parser", "var_name": "parser"}], "file": "dart-lang/src/test/java/fr/insideapp/sonarqube/dart/lang/issues/dartanalyzer/DartAnalyzerReportParserTest.java"}, "test_case": {"identifier": "parseWithTraces", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void parseWithTraces() {\n    \tString input = \"Analyzing D:\\\\workspace\\\\samples-master\\\\platform_design\\\\lib\\\\main.dart, D:\\\\workspace\\\\samples-master\\\\platform_design\\\\lib\\\\utils.dart, D:\\\\workspace\\\\samples-master\\\\platform_design\\\\lib\\\\songs_tab.dart, D:\\\\workspace\\\\samples-master\\\\platform_design\\\\lib\\\\news_tab.dart, D:\\\\workspace\\\\samples-master\\\\platform_design\\\\lib\\\\song_detail_tab.dart...\\r\\n\" + \n    \t\t\t\"  error - Target of URI doesn't exist: 'package:flutter/material.dart'. - lib/main.dart:1:8 - uri_does_not_exist\\r\\n\" + \n    \t\t\t\"  hint - The value of the local variable 'a' isn't used. - lib/main.dart:7:7 - unused_local_variable\\r\\n\" +\n    \t\t\t\"  hint - The value of the local variable 'b' isn't used. - lib/main.dart:8:7 - unused_local_variable\\r\\n\" +\n    \t\t\t\"  hint - The value of the local variable 'c' isn't used. - lib/main.dart:9:7 - unused_local_variable\\r\\n\" +\n    \t\t\t\"  hint - The value of the local variable 'd' isn't used. - lib/main.dart:10:7 - unused_local_variable\\r\\n\" +\n    \t\t\t\"  hint - The value of the local variable 'e' isn't used. - lib/main.dart:11:7 - unused_local_variable\\r\\n\" +\n    \t\t\t\"  hint - The value of the local variable 'f' isn't used. - lib/main.dart:12:7 - unused_local_variable\\r\\n\" +\n    \t\t\t\"  hint - The value of the local variable 'g' isn't used. - lib/main.dart:13:7 - unused_local_variable\\r\\n\" +\n    \t\t\t\"  hint - The value of the local variable 'h' isn't used. - lib/main.dart:14:7 - unused_local_variable\\r\\n\" +\n    \t\t\t\"  hint - The value of the local variable 'i' isn't used. - lib/main.dart:15:7 - unused_local_variable\\r\\n\" +\n    \t\t\t\"  hint - The value of the local variable 'j' isn't used. - lib/main.dart:16:7 - unused_local_variable\\r\\n\" +\n    \t\t\t\"  hint - The value of the local variable 'k' isn't used. - lib/main.dart:17:7 - unused_local_variable\\r\\n\" +\n    \t\t\t\"1 errors and 11 hints found.\";\n    \t\n    \tList<DartAnalyzerReportIssue> issues = parser.parse(input);\n\n    \tassertThat(issues.size()).isEqualTo(12);   \n    \t\n    \tassertFilePath(issues.get(0), FILE_PATH); \n    \tassertLineNumber(issues.get(0), 1);\n    \tassertRuleId(issues.get(0), \"uri_does_not_exist\");\n    \tassertMessage(issues.get(0), \"Target of URI doesn't exist: 'package:flutter/material.dart'.\");\n    \t\n    \t\n    \tassertFilePath(issues.get(10), FILE_PATH); \n    \tassertLineNumber(issues.get(10), 16);\n    \tassertRuleId(issues.get(10), RULE_ID_UNUSED_LOCAL_VARIABLE);\n    \tassertMessage(issues.get(10), \"The value of the local variable 'j' isn't used.\");\n    }", "signature": "void parseWithTraces()", "full_signature": "@Test public void parseWithTraces()", "class_method_signature": "DartAnalyzerReportParserTest.parseWithTraces()", "testcase": true, "constructor": false, "invocations": ["parse", "isEqualTo", "assertThat", "size", "assertFilePath", "get", "assertLineNumber", "get", "assertRuleId", "get", "assertMessage", "get", "assertFilePath", "get", "assertLineNumber", "get", "assertRuleId", "get", "assertMessage", "get"]}, "focal_class": {"identifier": "DartAnalyzerReportParser", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "parse", "parameters": "(String input)", "modifiers": "public", "return": "List<DartAnalyzerReportIssue>", "signature": "List<DartAnalyzerReportIssue> parse(String input)", "full_signature": "public List<DartAnalyzerReportIssue> parse(String input)", "class_method_signature": "DartAnalyzerReportParser.parse(String input)", "testcase": false, "constructor": false}], "file": "dart-lang/src/main/java/fr/insideapp/sonarqube/dart/lang/issues/dartanalyzer/DartAnalyzerReportParser.java"}, "focal_method": {"identifier": "parse", "parameters": "(String input)", "modifiers": "public", "return": "List<DartAnalyzerReportIssue>", "body": "public List<DartAnalyzerReportIssue> parse(String input) {\n\n        List<DartAnalyzerReportIssue> issues = new ArrayList<>();\n\n        String[] lines = input.split(System.getProperty(\"line.separator\"));\n        Pattern pattern = Pattern.compile(\"(error|hint|lint)(.*)(-|\u2022)(.*)(-|\u2022)(.*):(.*):(.*)(-|\u2022)(.*)\");\n        for (int i = 0; i < lines.length; i++) {\n            Matcher matcher = pattern.matcher(lines[i]);\n            while (matcher.find()) {\n                String filePath = matcher.group(6).trim();\n                int lineNum = Integer.parseInt(matcher.group(7).trim());\n                String message = matcher.group(4).trim();\n                String ruleId = matcher.group(10).trim();\n\n                issues.add(new DartAnalyzerReportIssue(ruleId, message, filePath, lineNum));\n            }\n        }\n        return issues;\n    }", "signature": "List<DartAnalyzerReportIssue> parse(String input)", "full_signature": "public List<DartAnalyzerReportIssue> parse(String input)", "class_method_signature": "DartAnalyzerReportParser.parse(String input)", "testcase": false, "constructor": false, "invocations": ["split", "getProperty", "compile", "matcher", "find", "trim", "group", "parseInt", "trim", "group", "trim", "group", "trim", "group", "add"]}, "repository": {"repo_id": 235879795, "url": "https://github.com/insideapp-oss/sonar-flutter", "language": "Java", "is_fork": false, "fork_count": 12, "stargazer_count": 70, "size": 799, "license": "licensed"}}