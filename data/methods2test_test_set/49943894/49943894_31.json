{"test_class": {"identifier": "CreateUserCmdTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Logger s_logger = LoggerFactory.getLogger(CreateUserCmdTest.class.getName());", "modifier": "public static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(CreateUserCmdTest.class.getName())", "var_name": "s_logger"}, {"original_string": "@Mock\n    private AccountService accountService;", "modifier": "@Mock\n    private", "type": "AccountService", "declarator": "accountService", "var_name": "accountService"}, {"original_string": "@InjectMocks\n    private CreateUserCmd createUserCmd = new CreateUserCmd();", "modifier": "@InjectMocks\n    private", "type": "CreateUserCmd", "declarator": "createUserCmd = new CreateUserCmd()", "var_name": "createUserCmd"}], "file": "api/src/test/java/org/apache/cloudstack/api/command/admin/user/CreateUserCmdTest.java"}, "test_case": {"identifier": "testExecuteWithEmptyPassword", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testExecuteWithEmptyPassword() {\n        ReflectionTestUtils.setField(createUserCmd, \"password\", \"\");\n        try {\n            createUserCmd.execute();\n            Assert.fail(\"should throw exception for a empty password\");\n        } catch (ServerApiException e) {\n            Assert.assertEquals(ApiErrorCode.PARAM_ERROR,e.getErrorCode());\n            Assert.assertEquals(\"Empty passwords are not allowed\", e.getMessage());\n        }\n        Mockito.verify(accountService, Mockito.never()).createUser(null, null, null, null, null, null, null, null, null);\n    }", "signature": "void testExecuteWithEmptyPassword()", "full_signature": "@Test public void testExecuteWithEmptyPassword()", "class_method_signature": "CreateUserCmdTest.testExecuteWithEmptyPassword()", "testcase": true, "constructor": false, "invocations": ["setField", "execute", "fail", "assertEquals", "getErrorCode", "assertEquals", "getMessage", "createUser", "verify", "never"]}, "focal_class": {"identifier": "CreateUserCmd", "superclass": "extends BaseCmd", "interfaces": "", "fields": [{"original_string": "public static final Logger s_logger = LoggerFactory.getLogger(CreateUserCmd.class.getName());", "modifier": "public static final", "type": "Logger", "declarator": "s_logger = LoggerFactory.getLogger(CreateUserCmd.class.getName())", "var_name": "s_logger"}, {"original_string": "private static final String s_name = \"createuserresponse\";", "modifier": "private static final", "type": "String", "declarator": "s_name = \"createuserresponse\"", "var_name": "s_name"}, {"original_string": "@Parameter(name = ApiConstants.ACCOUNT,\n               type = CommandType.STRING,\n               required = true,\n               description = \"Creates the user under the specified account. If no account is specified, the username will be used as the account name.\")\n    private String accountName;", "modifier": "@Parameter(name = ApiConstants.ACCOUNT,\n               type = CommandType.STRING,\n               required = true,\n               description = \"Creates the user under the specified account. If no account is specified, the username will be used as the account name.\")\n    private", "type": "String", "declarator": "accountName", "var_name": "accountName"}, {"original_string": "@Parameter(name = ApiConstants.DOMAIN_ID,\n               type = CommandType.UUID,\n               entityType = DomainResponse.class,\n               description = \"Creates the user under the specified domain. Has to be accompanied with the account parameter\")\n    private Long domainId;", "modifier": "@Parameter(name = ApiConstants.DOMAIN_ID,\n               type = CommandType.UUID,\n               entityType = DomainResponse.class,\n               description = \"Creates the user under the specified domain. Has to be accompanied with the account parameter\")\n    private", "type": "Long", "declarator": "domainId", "var_name": "domainId"}, {"original_string": "@Parameter(name = ApiConstants.EMAIL, type = CommandType.STRING, required = true, description = \"email\")\n    private String email;", "modifier": "@Parameter(name = ApiConstants.EMAIL, type = CommandType.STRING, required = true, description = \"email\")\n    private", "type": "String", "declarator": "email", "var_name": "email"}, {"original_string": "@Parameter(name = ApiConstants.FIRSTNAME, type = CommandType.STRING, required = true, description = \"firstname\")\n    private String firstname;", "modifier": "@Parameter(name = ApiConstants.FIRSTNAME, type = CommandType.STRING, required = true, description = \"firstname\")\n    private", "type": "String", "declarator": "firstname", "var_name": "firstname"}, {"original_string": "@Parameter(name = ApiConstants.LASTNAME, type = CommandType.STRING, required = true, description = \"lastname\")\n    private String lastname;", "modifier": "@Parameter(name = ApiConstants.LASTNAME, type = CommandType.STRING, required = true, description = \"lastname\")\n    private", "type": "String", "declarator": "lastname", "var_name": "lastname"}, {"original_string": "@Parameter(name = ApiConstants.PASSWORD,\n               type = CommandType.STRING,\n               required = true,\n               description = \"Clear text password (Default hashed to SHA256SALT). If you wish to use any other hashing algorithm, you would need to write a custom authentication adapter See Docs section.\")\n    private String password;", "modifier": "@Parameter(name = ApiConstants.PASSWORD,\n               type = CommandType.STRING,\n               required = true,\n               description = \"Clear text password (Default hashed to SHA256SALT). If you wish to use any other hashing algorithm, you would need to write a custom authentication adapter See Docs section.\")\n    private", "type": "String", "declarator": "password", "var_name": "password"}, {"original_string": "@Parameter(name = ApiConstants.TIMEZONE,\n               type = CommandType.STRING,\n               description = \"Specifies a timezone for this command. For more information on the timezone parameter, see Time Zone Format.\")\n    private String timezone;", "modifier": "@Parameter(name = ApiConstants.TIMEZONE,\n               type = CommandType.STRING,\n               description = \"Specifies a timezone for this command. For more information on the timezone parameter, see Time Zone Format.\")\n    private", "type": "String", "declarator": "timezone", "var_name": "timezone"}, {"original_string": "@Parameter(name = ApiConstants.USERNAME, type = CommandType.STRING, required = true, description = \"Unique username.\")\n    private String username;", "modifier": "@Parameter(name = ApiConstants.USERNAME, type = CommandType.STRING, required = true, description = \"Unique username.\")\n    private", "type": "String", "declarator": "username", "var_name": "username"}, {"original_string": "@Parameter(name = ApiConstants.USER_ID, type = CommandType.STRING, description = \"User UUID, required for adding account from external provisioning system\")\n    private String userUUID;", "modifier": "@Parameter(name = ApiConstants.USER_ID, type = CommandType.STRING, description = \"User UUID, required for adding account from external provisioning system\")\n    private", "type": "String", "declarator": "userUUID", "var_name": "userUUID"}], "methods": [{"identifier": "getAccountName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getAccountName()", "full_signature": "public String getAccountName()", "class_method_signature": "CreateUserCmd.getAccountName()", "testcase": false, "constructor": false}, {"identifier": "getDomainId", "parameters": "()", "modifiers": "public", "return": "Long", "signature": "Long getDomainId()", "full_signature": "public Long getDomainId()", "class_method_signature": "CreateUserCmd.getDomainId()", "testcase": false, "constructor": false}, {"identifier": "getEmail", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getEmail()", "full_signature": "public String getEmail()", "class_method_signature": "CreateUserCmd.getEmail()", "testcase": false, "constructor": false}, {"identifier": "getFirstName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getFirstName()", "full_signature": "public String getFirstName()", "class_method_signature": "CreateUserCmd.getFirstName()", "testcase": false, "constructor": false}, {"identifier": "getLastName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getLastName()", "full_signature": "public String getLastName()", "class_method_signature": "CreateUserCmd.getLastName()", "testcase": false, "constructor": false}, {"identifier": "getPassword", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getPassword()", "full_signature": "public String getPassword()", "class_method_signature": "CreateUserCmd.getPassword()", "testcase": false, "constructor": false}, {"identifier": "getTimezone", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getTimezone()", "full_signature": "public String getTimezone()", "class_method_signature": "CreateUserCmd.getTimezone()", "testcase": false, "constructor": false}, {"identifier": "getUserName", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUserName()", "full_signature": "public String getUserName()", "class_method_signature": "CreateUserCmd.getUserName()", "testcase": false, "constructor": false}, {"identifier": "getUserUUID", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getUserUUID()", "full_signature": "public String getUserUUID()", "class_method_signature": "CreateUserCmd.getUserUUID()", "testcase": false, "constructor": false}, {"identifier": "getCommandName", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getCommandName()", "full_signature": "@Override public String getCommandName()", "class_method_signature": "CreateUserCmd.getCommandName()", "testcase": false, "constructor": false}, {"identifier": "getEntityOwnerId", "parameters": "()", "modifiers": "@Override public", "return": "long", "signature": "long getEntityOwnerId()", "full_signature": "@Override public long getEntityOwnerId()", "class_method_signature": "CreateUserCmd.getEntityOwnerId()", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "CreateUserCmd.execute()", "testcase": false, "constructor": false}, {"identifier": "validateParams", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void validateParams()", "full_signature": "private void validateParams()", "class_method_signature": "CreateUserCmd.validateParams()", "testcase": false, "constructor": false}], "file": "api/src/main/java/org/apache/cloudstack/api/command/admin/user/CreateUserCmd.java"}, "focal_method": {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void execute() {\n        validateParams();\n        CallContext.current().setEventDetails(\"UserName: \" + getUserName() + \", FirstName :\" + getFirstName() + \", LastName: \" + getLastName());\n        User user =\n            _accountService.createUser(getUserName(), getPassword(), getFirstName(), getLastName(), getEmail(), getTimezone(), getAccountName(), getDomainId(),\n                getUserUUID());\n        if (user != null) {\n            UserResponse response = _responseGenerator.createUserResponse(user);\n            response.setResponseName(getCommandName());\n            this.setResponseObject(response);\n        } else {\n            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, \"Failed to create a user\");\n        }\n    }", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "CreateUserCmd.execute()", "testcase": false, "constructor": false, "invocations": ["validateParams", "setEventDetails", "current", "getUserName", "getFirstName", "getLastName", "createUser", "getUserName", "getPassword", "getFirstName", "getLastName", "getEmail", "getTimezone", "getAccountName", "getDomainId", "getUserUUID", "createUserResponse", "setResponseName", "getCommandName", "setResponseObject"]}, "repository": {"repo_id": 49943894, "url": "https://github.com/MissionCriticalCloudOldRepos/cosmic-core", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 9, "size": 18165, "license": "licensed"}}