{"test_class": {"identifier": "HttpBasicExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "final CamelContext context = new DefaultCamelContext();", "modifier": "final", "type": "CamelContext", "declarator": "context = new DefaultCamelContext()", "var_name": "context"}], "file": "exposure-engine/auth-manager/src/test/java/com/alu/e3/auth/executor/HttpBasicExecutorTest.java"}, "test_case": {"identifier": "testFailBadFormat2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testFailBadFormat2(){\n\t\tExchange exchange = new DefaultExchange(context);\n\t\t\n\t\tApi api = new Api();\n\t\tapi.setId(\"123\");\n\n\t\t// Setting the username = \"win\" should succeed\n\t\t// This one is bad because it is missing the space between Basic and the user/pass\n\t\texchange.getIn().setHeader(AuthHttpHeaders.Authorization.toString(), \"Basic\"+new String(Base64.encodeBase64(\"win:blarg\".getBytes())));\n\t\tHttpBasicExecutor executor = new HttpBasicExecutor(new MockAuthDataAccess(null, \"win:blarg\", null));\n\t\t\n\t\tAuthReport authReport = executor.checkAllowed(exchange, api);\t\t\n\n\t\tassertNull(\"This authentication should have failed\", authReport.getAuthIdentity());\n\t}", "signature": "void testFailBadFormat2()", "full_signature": "@Test public void testFailBadFormat2()", "class_method_signature": "HttpBasicExecutorTest.testFailBadFormat2()", "testcase": true, "constructor": false, "invocations": ["setId", "setHeader", "getIn", "toString", "encodeBase64", "getBytes", "checkAllowed", "assertNull", "getAuthIdentity"]}, "focal_class": {"identifier": "HttpBasicExecutor", "superclass": "", "interfaces": "implements IAuthExecutor", "fields": [{"original_string": "private static final CategoryLogger logger = CategoryLoggerFactory.getLogger(HttpBasicExecutor.class, Category.AUTH);", "modifier": "private static final", "type": "CategoryLogger", "declarator": "logger = CategoryLoggerFactory.getLogger(HttpBasicExecutor.class, Category.AUTH)", "var_name": "logger"}, {"original_string": "private IAuthDataAccess dataAccess;", "modifier": "private", "type": "IAuthDataAccess", "declarator": "dataAccess", "var_name": "dataAccess"}], "methods": [{"identifier": "HttpBasicExecutor", "parameters": "(IAuthDataAccess dataAcccess)", "modifiers": "public", "return": "", "signature": " HttpBasicExecutor(IAuthDataAccess dataAcccess)", "full_signature": "public  HttpBasicExecutor(IAuthDataAccess dataAcccess)", "class_method_signature": "HttpBasicExecutor.HttpBasicExecutor(IAuthDataAccess dataAcccess)", "testcase": false, "constructor": true}, {"identifier": "checkAllowed", "parameters": "(Exchange exchange, Api api)", "modifiers": "@Override public", "return": "AuthReport", "signature": "AuthReport checkAllowed(Exchange exchange, Api api)", "full_signature": "@Override public AuthReport checkAllowed(Exchange exchange, Api api)", "class_method_signature": "HttpBasicExecutor.checkAllowed(Exchange exchange, Api api)", "testcase": false, "constructor": false}, {"identifier": "getType", "parameters": "()", "modifiers": "@Override public", "return": "AuthType", "signature": "AuthType getType()", "full_signature": "@Override public AuthType getType()", "class_method_signature": "HttpBasicExecutor.getType()", "testcase": false, "constructor": false}, {"identifier": "getErrorCode", "parameters": "()", "modifiers": "@Override public", "return": "GatewayExceptionCode", "signature": "GatewayExceptionCode getErrorCode()", "full_signature": "@Override public GatewayExceptionCode getErrorCode()", "class_method_signature": "HttpBasicExecutor.getErrorCode()", "testcase": false, "constructor": false}], "file": "exposure-engine/auth-manager/src/main/java/com/alu/e3/auth/executor/HttpBasicExecutor.java"}, "focal_method": {"identifier": "checkAllowed", "parameters": "(Exchange exchange, Api api)", "modifiers": "@Override public", "return": "AuthReport", "body": "@Override\n\tpublic AuthReport checkAllowed(Exchange exchange, Api api) {\n\t\t\n\t\tAuthReport authReport = new AuthReport();\n\t\t\n\t\tString authHeader = (String) exchange.getIn().getHeader(\"Authorization\");\n\t\t\n\t\tif(authHeader != null){\n\t\t\tString[] chunks = authHeader.split(\" \");\n\t\t\t\n\t\t\t// Only expect two parts: the auth scheme and the user/pass encoding\n\t\t\tif(chunks.length == 2){\n\t\t\t\tString scheme = chunks[0];\n\t\t\t\tif(\"Basic\".equalsIgnoreCase(scheme)){\n\t\t\t\t\tString base64 = chunks[1];\n\t\t\t\t\tString decoded = new String(Base64.decodeBase64(base64.getBytes()));\n\t\t\t\t\tchunks = decoded.split(\":\");\n\t\t\t\t\tif(chunks.length >= 2){\n\t\t\t\t\t\tString user = chunks[0];\n\t\t\t\t\t\tString pass = chunks[1];\n\t\t\t\t\t\t// Checks if the user is allowed to use this service\n\t\t\t\t\t\tauthReport = dataAccess.checkAllowed(api, user, pass);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tif(logger.isDebugEnabled()) {\n\t\t\t\t\t\t\tlogger.debug(\"Unable to decode user/pass\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tauthReport.setBadRequest(true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif(logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger.debug(\"Auth scheme not Basic (\"+scheme+\"). Cannot authenticate request\");\n\t\t\t\t\t}\n\t\t\t\t\tauthReport.setBadRequest(true);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Improperly formed authorization header:\"+authHeader);\n\t\t\t\t}\n\t\t\t\tauthReport.setBadRequest(true);\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif(logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Http Basic Authentication Header is missing\");\n\t\t\t}\n\t\t\tauthReport.setBadRequest(true);\n\t\t}\n\t\t\n\t\treturn authReport;\n\t}", "signature": "AuthReport checkAllowed(Exchange exchange, Api api)", "full_signature": "@Override public AuthReport checkAllowed(Exchange exchange, Api api)", "class_method_signature": "HttpBasicExecutor.checkAllowed(Exchange exchange, Api api)", "testcase": false, "constructor": false, "invocations": ["getHeader", "getIn", "split", "equalsIgnoreCase", "decodeBase64", "getBytes", "split", "checkAllowed", "isDebugEnabled", "debug", "setBadRequest", "isDebugEnabled", "debug", "setBadRequest", "isDebugEnabled", "debug", "setBadRequest", "isDebugEnabled", "debug", "setBadRequest"]}, "repository": {"repo_id": 5239065, "url": "https://github.com/apigrove/apigrove", "language": "Java", "is_fork": false, "fork_count": 33, "stargazer_count": 118, "size": 215144, "license": "licensed"}}