{"test_class": {"identifier": "TokenBindingValidatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final TokenBindingValidator target = new TokenBindingValidator();", "modifier": "private final", "type": "TokenBindingValidator", "declarator": "target = new TokenBindingValidator()", "var_name": "target"}], "file": "webauthn4j-core/src/test/java/com/webauthn4j/validator/TokenBindingValidatorTest.java"}, "test_case": {"identifier": "validate_TokenBinding_supported_test", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void validate_TokenBinding_supported_test() {\n        byte[] bindingId = null;\n        TokenBinding tokenBinding = new TokenBinding(TokenBindingStatus.SUPPORTED, bindingId);\n        target.validate(tokenBinding, bindingId);\n    }", "signature": "void validate_TokenBinding_supported_test()", "full_signature": "@Test void validate_TokenBinding_supported_test()", "class_method_signature": "TokenBindingValidatorTest.validate_TokenBinding_supported_test()", "testcase": true, "constructor": false, "invocations": ["validate"]}, "focal_class": {"identifier": "TokenBindingValidator", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "validate", "parameters": "(TokenBinding clientDataTokenBinding, byte[] serverTokenBindingId)", "modifiers": "public", "return": "void", "signature": "void validate(TokenBinding clientDataTokenBinding, byte[] serverTokenBindingId)", "full_signature": "public void validate(TokenBinding clientDataTokenBinding, byte[] serverTokenBindingId)", "class_method_signature": "TokenBindingValidator.validate(TokenBinding clientDataTokenBinding, byte[] serverTokenBindingId)", "testcase": false, "constructor": false}], "file": "webauthn4j-core/src/main/java/com/webauthn4j/validator/TokenBindingValidator.java"}, "focal_method": {"identifier": "validate", "parameters": "(TokenBinding clientDataTokenBinding, byte[] serverTokenBindingId)", "modifiers": "public", "return": "void", "body": "public void validate(TokenBinding clientDataTokenBinding, byte[] serverTokenBindingId) {\n        if (clientDataTokenBinding == null) {\n            // nop\n        } else {\n            byte[] clientDataTokenBindingId;\n            if (clientDataTokenBinding.getId() == null) {\n                clientDataTokenBindingId = null;\n            } else {\n                clientDataTokenBindingId = Base64UrlUtil.decode(clientDataTokenBinding.getId());\n            }\n            switch (clientDataTokenBinding.getStatus()) {\n                case NOT_SUPPORTED:\n                    break;\n                case SUPPORTED:\n                    break;\n                case PRESENT:\n                    if (!Arrays.equals(clientDataTokenBindingId, serverTokenBindingId)) {\n                        throw new TokenBindingException(\"TokenBinding id does not match\");\n                    }\n            }\n        }\n    }", "signature": "void validate(TokenBinding clientDataTokenBinding, byte[] serverTokenBindingId)", "full_signature": "public void validate(TokenBinding clientDataTokenBinding, byte[] serverTokenBindingId)", "class_method_signature": "TokenBindingValidator.validate(TokenBinding clientDataTokenBinding, byte[] serverTokenBindingId)", "testcase": false, "constructor": false, "invocations": ["getId", "decode", "getId", "getStatus", "equals"]}, "repository": {"repo_id": 134147639, "url": "https://github.com/webauthn4j/webauthn4j", "stars": 101, "created": "5/20/2018 12:14:36 PM +00:00", "updates": "2020-01-27T13:01:46+00:00", "fork": "False", "license": "licensed"}}