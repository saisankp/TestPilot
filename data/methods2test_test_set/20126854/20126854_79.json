{"test_class": {"identifier": "PreDiffExecutorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final UnitTestZipEntry ENTRY_LEVEL_6 =\n      UnitTestZipArchive.makeUnitTestZipEntry(\"/for/great/justice\", 6, \"entry A\", null);", "modifier": "private static final", "type": "UnitTestZipEntry", "declarator": "ENTRY_LEVEL_6 =\n      UnitTestZipArchive.makeUnitTestZipEntry(\"/for/great/justice\", 6, \"entry A\", null)", "var_name": "ENTRY_LEVEL_6"}, {"original_string": "private static final UnitTestZipEntry ENTRY_LEVEL_9 =\n      UnitTestZipArchive.makeUnitTestZipEntry(\"/for/great/justice\", 9, \"entry A\", null);", "modifier": "private static final", "type": "UnitTestZipEntry", "declarator": "ENTRY_LEVEL_9 =\n      UnitTestZipArchive.makeUnitTestZipEntry(\"/for/great/justice\", 9, \"entry A\", null)", "var_name": "ENTRY_LEVEL_9"}, {"original_string": "private List<File> tempFilesCreated;", "modifier": "private", "type": "List<File>", "declarator": "tempFilesCreated", "var_name": "tempFilesCreated"}, {"original_string": "private File deltaFriendlyOldFile;", "modifier": "private", "type": "File", "declarator": "deltaFriendlyOldFile", "var_name": "deltaFriendlyOldFile"}, {"original_string": "private File deltaFriendlyNewFile;", "modifier": "private", "type": "File", "declarator": "deltaFriendlyNewFile", "var_name": "deltaFriendlyNewFile"}], "file": "feya/libraries/archive_diff/diff.generator/src/test/java/com/google/archivepatcher/generator/PreDiffExecutorTest.java"}, "test_case": {"identifier": "testPrepareForDiffing_OneCompressedEntry_Changed", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testPrepareForDiffing_OneCompressedEntry_Changed() throws IOException {\n    byte[] oldBytes = UnitTestZipArchive.makeTestZip(Collections.singletonList(ENTRY_LEVEL_6));\n    File oldFile = store(oldBytes);\n    byte[] newBytes = UnitTestZipArchive.makeTestZip(Collections.singletonList(ENTRY_LEVEL_9));\n    File newFile = store(newBytes);\n    PreDiffExecutor executor =\n        new PreDiffExecutor.Builder()\n            .readingOriginalFiles(oldFile, newFile)\n            .writingDeltaFriendlyFiles(deltaFriendlyOldFile, deltaFriendlyNewFile)\n            .build();\n    PreDiffPlan plan = executor.prepareForDiffing();\n    Assert.assertNotNull(plan);\n    // The plan should be to uncompress the data in both the old and new files.\n    Assert.assertEquals(1, plan.getOldFileUncompressionPlan().size());\n    Assert.assertEquals(1, plan.getNewFileUncompressionPlan().size());\n    Assert.assertEquals(1, plan.getDeltaFriendlyNewFileRecompressionPlan().size());\n    // The delta-friendly files should be larger than the originals.\n    Assert.assertTrue(oldFile.length() < deltaFriendlyOldFile.length());\n    Assert.assertTrue(newFile.length() < deltaFriendlyNewFile.length());\n\n    // Nitty-gritty, assert that the file content is exactly what is expected.\n    // 1. Find the entry in the old file.\n    // 2. Create a buffer to hold the expected data.\n    // 3. Copy all the file data that PRECEDES the compressed data into the buffer.\n    // 4. Copy the UNCOMPRESSED data from the unit test object into the buffer.\n    // 5. Copy all the file data the FOLLOWS the compressed data into the buffer.\n    // This should be exactly what is produced. Note that this is not a valid ZIP archive, as the\n    // offsets and lengths in the zip metadata are no longer tied to the actual data. This is\n    // normal and expected, since the delta-friendly file is not actually an archive anymore.\n    { // Scoping block for sanity\n      MinimalZipEntry oldEntry = findEntry(oldFile, ENTRY_LEVEL_6.path);\n      ByteArrayOutputStream expectedDeltaFriendlyOldFileBytes = new ByteArrayOutputStream();\n      expectedDeltaFriendlyOldFileBytes.write(\n          oldBytes, 0, (int) oldEntry.getFileOffsetOfCompressedData());\n      expectedDeltaFriendlyOldFileBytes.write(ENTRY_LEVEL_6.getUncompressedBinaryContent());\n      int oldRemainderOffset =\n          (int) (oldEntry.getFileOffsetOfCompressedData() + oldEntry.getCompressedSize());\n      int oldRemainderLength = oldBytes.length - oldRemainderOffset;\n      expectedDeltaFriendlyOldFileBytes.write(oldBytes, oldRemainderOffset, oldRemainderLength);\n      byte[] expectedOld = expectedDeltaFriendlyOldFileBytes.toByteArray();\n      byte[] actualOld = readFile(deltaFriendlyOldFile);\n      Assert.assertArrayEquals(expectedOld, actualOld);\n    }\n\n    // Now do the same for the new file and new entry\n    { // Scoping block for sanity\n      MinimalZipEntry newEntry = findEntry(newFile, ENTRY_LEVEL_9.path);\n      ByteArrayOutputStream expectedDeltaFriendlyNewFileBytes = new ByteArrayOutputStream();\n      expectedDeltaFriendlyNewFileBytes.write(\n          newBytes, 0, (int) newEntry.getFileOffsetOfCompressedData());\n      expectedDeltaFriendlyNewFileBytes.write(ENTRY_LEVEL_9.getUncompressedBinaryContent());\n      int newRemainderOffset =\n          (int) (newEntry.getFileOffsetOfCompressedData() + newEntry.getCompressedSize());\n      int newRemainderLength = newBytes.length - newRemainderOffset;\n      expectedDeltaFriendlyNewFileBytes.write(newBytes, newRemainderOffset, newRemainderLength);\n      byte[] expectedNew = expectedDeltaFriendlyNewFileBytes.toByteArray();\n      byte[] actualNew = readFile(deltaFriendlyNewFile);\n      Assert.assertArrayEquals(expectedNew, actualNew);\n    }\n  }", "signature": "void testPrepareForDiffing_OneCompressedEntry_Changed()", "full_signature": "@Test public void testPrepareForDiffing_OneCompressedEntry_Changed()", "class_method_signature": "PreDiffExecutorTest.testPrepareForDiffing_OneCompressedEntry_Changed()", "testcase": true, "constructor": false, "invocations": ["makeTestZip", "singletonList", "store", "makeTestZip", "singletonList", "store", "build", "writingDeltaFriendlyFiles", "readingOriginalFiles", "prepareForDiffing", "assertNotNull", "assertEquals", "size", "getOldFileUncompressionPlan", "assertEquals", "size", "getNewFileUncompressionPlan", "assertEquals", "size", "getDeltaFriendlyNewFileRecompressionPlan", "assertTrue", "length", "length", "assertTrue", "length", "length", "findEntry", "write", "getFileOffsetOfCompressedData", "write", "getUncompressedBinaryContent", "getFileOffsetOfCompressedData", "getCompressedSize", "write", "toByteArray", "readFile", "assertArrayEquals", "findEntry", "write", "getFileOffsetOfCompressedData", "write", "getUncompressedBinaryContent", "getFileOffsetOfCompressedData", "getCompressedSize", "write", "toByteArray", "readFile", "assertArrayEquals"]}, "focal_class": {"identifier": "PreDiffExecutor", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final File originalOldFile;", "modifier": "private final", "type": "File", "declarator": "originalOldFile", "var_name": "originalOldFile"}, {"original_string": "private final File originalNewFile;", "modifier": "private final", "type": "File", "declarator": "originalNewFile", "var_name": "originalNewFile"}, {"original_string": "private final File deltaFriendlyOldFile;", "modifier": "private final", "type": "File", "declarator": "deltaFriendlyOldFile", "var_name": "deltaFriendlyOldFile"}, {"original_string": "private final File deltaFriendlyNewFile;", "modifier": "private final", "type": "File", "declarator": "deltaFriendlyNewFile", "var_name": "deltaFriendlyNewFile"}, {"original_string": "private final List<RecommendationModifier> recommendationModifiers;", "modifier": "private final", "type": "List<RecommendationModifier>", "declarator": "recommendationModifiers", "var_name": "recommendationModifiers"}], "methods": [{"identifier": "PreDiffExecutor", "parameters": "(\n      File originalOldFile,\n      File originalNewFile,\n      File deltaFriendlyOldFile,\n      File deltaFriendlyNewFile,\n      List<RecommendationModifier> recommendationModifiers)", "modifiers": "private", "return": "", "signature": " PreDiffExecutor(\n      File originalOldFile,\n      File originalNewFile,\n      File deltaFriendlyOldFile,\n      File deltaFriendlyNewFile,\n      List<RecommendationModifier> recommendationModifiers)", "full_signature": "private  PreDiffExecutor(\n      File originalOldFile,\n      File originalNewFile,\n      File deltaFriendlyOldFile,\n      File deltaFriendlyNewFile,\n      List<RecommendationModifier> recommendationModifiers)", "class_method_signature": "PreDiffExecutor.PreDiffExecutor(\n      File originalOldFile,\n      File originalNewFile,\n      File deltaFriendlyOldFile,\n      File deltaFriendlyNewFile,\n      List<RecommendationModifier> recommendationModifiers)", "testcase": false, "constructor": true}, {"identifier": "prepareForDiffing", "parameters": "()", "modifiers": "public", "return": "PreDiffPlan", "signature": "PreDiffPlan prepareForDiffing()", "full_signature": "public PreDiffPlan prepareForDiffing()", "class_method_signature": "PreDiffExecutor.prepareForDiffing()", "testcase": false, "constructor": false}, {"identifier": "generateDeltaFriendlyFiles", "parameters": "(PreDiffPlan preDiffPlan)", "modifiers": "private", "return": "List<TypedRange<JreDeflateParameters>>", "signature": "List<TypedRange<JreDeflateParameters>> generateDeltaFriendlyFiles(PreDiffPlan preDiffPlan)", "full_signature": "private List<TypedRange<JreDeflateParameters>> generateDeltaFriendlyFiles(PreDiffPlan preDiffPlan)", "class_method_signature": "PreDiffExecutor.generateDeltaFriendlyFiles(PreDiffPlan preDiffPlan)", "testcase": false, "constructor": false}, {"identifier": "generatePreDiffPlan", "parameters": "()", "modifiers": "private", "return": "PreDiffPlan", "signature": "PreDiffPlan generatePreDiffPlan()", "full_signature": "private PreDiffPlan generatePreDiffPlan()", "class_method_signature": "PreDiffExecutor.generatePreDiffPlan()", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.generator/src/main/java/com/google/archivepatcher/generator/PreDiffExecutor.java"}, "focal_method": {"identifier": "prepareForDiffing", "parameters": "()", "modifiers": "public", "return": "PreDiffPlan", "body": "public PreDiffPlan prepareForDiffing() throws IOException {\n    PreDiffPlan preDiffPlan = generatePreDiffPlan();\n    List<TypedRange<JreDeflateParameters>> deltaFriendlyNewFileRecompressionPlan = null;\n    if (deltaFriendlyOldFile != null) {\n      // Builder.writingDeltaFriendlyFiles() ensures old and new are non-null when called, so a\n      // check on either is sufficient.\n      deltaFriendlyNewFileRecompressionPlan =\n          Collections.unmodifiableList(generateDeltaFriendlyFiles(preDiffPlan));\n    }\n    return new PreDiffPlan(\n        preDiffPlan.getQualifiedRecommendations(),\n        preDiffPlan.getOldFileUncompressionPlan(),\n        preDiffPlan.getNewFileUncompressionPlan(),\n        deltaFriendlyNewFileRecompressionPlan);\n  }", "signature": "PreDiffPlan prepareForDiffing()", "full_signature": "public PreDiffPlan prepareForDiffing()", "class_method_signature": "PreDiffExecutor.prepareForDiffing()", "testcase": false, "constructor": false, "invocations": ["generatePreDiffPlan", "unmodifiableList", "generateDeltaFriendlyFiles", "getQualifiedRecommendations", "getOldFileUncompressionPlan", "getNewFileUncompressionPlan"]}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}