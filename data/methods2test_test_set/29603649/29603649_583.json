{"test_class": {"identifier": "SequenceDescriptorFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private SequenceDescriptorAttributesParser sequenceDescriptorAttributesParser;", "modifier": "@Mock\n    private", "type": "SequenceDescriptorAttributesParser", "declarator": "sequenceDescriptorAttributesParser", "var_name": "sequenceDescriptorAttributesParser"}, {"original_string": "@Mock\n    private DialogDescriptorReferenceParser dialogDescriptorReferenceParser;", "modifier": "@Mock\n    private", "type": "DialogDescriptorReferenceParser", "declarator": "dialogDescriptorReferenceParser", "var_name": "dialogDescriptorReferenceParser"}, {"original_string": "@Mock\n    private DialogDescriptorMapper dialogDescriptorMapper;", "modifier": "@Mock\n    private", "type": "DialogDescriptorMapper", "declarator": "dialogDescriptorMapper", "var_name": "dialogDescriptorMapper"}, {"original_string": "@Mock\n    private ConditionDescriptorNodesParser conditionDescriptorNodesParser;", "modifier": "@Mock\n    private", "type": "ConditionDescriptorNodesParser", "declarator": "conditionDescriptorNodesParser", "var_name": "conditionDescriptorNodesParser"}, {"original_string": "@InjectMocks\n    private SequenceDescriptorFactory underTest;", "modifier": "@InjectMocks\n    private", "type": "SequenceDescriptorFactory", "declarator": "underTest", "var_name": "underTest"}, {"original_string": "@Mock\n    private Document document;", "modifier": "@Mock\n    private", "type": "Document", "declarator": "document", "var_name": "document"}, {"original_string": "@Mock\n    private Element sequenceElement;", "modifier": "@Mock\n    private", "type": "Element", "declarator": "sequenceElement", "var_name": "sequenceElement"}, {"original_string": "private List<DialogDescriptor> dialogDescriptors;", "modifier": "private", "type": "List<DialogDescriptor>", "declarator": "dialogDescriptors", "var_name": "dialogDescriptors"}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/test/java/com/epam/wilma/stubconfig/dom/parser/sequence/SequenceDescriptorFactoryTest.java"}, "test_case": {"identifier": "testCreate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCreate() {\n        //GIVEN\n        List<ConditionDescriptor> conditionDescriptors = new ArrayList<>();\n        List<DialogDescriptor> sequenceDialogDescriptors = new ArrayList<>();\n        Map<String, DialogDescriptor> nameToDialogDescriptor = new HashMap<>();\n        DummySequenceHandler dummySequenceHandler = new DummySequenceHandler();\n        SequenceDescriptorAttributes sequenceDescriptorAttributes = new SequenceDescriptorAttributes.Builder().name(\"bob\")\n                .handler(dummySequenceHandler).defaultTimeout(1L).build();\n        given(conditionDescriptorNodesParser.parseNodesOfElement(document, sequenceElement)).willReturn(conditionDescriptors);\n        given(dialogDescriptorMapper.groupByName(dialogDescriptors)).willReturn(nameToDialogDescriptor);\n        given(dialogDescriptorReferenceParser.parse(sequenceElement, nameToDialogDescriptor)).willReturn(sequenceDialogDescriptors);\n        given(sequenceDescriptorAttributesParser.parseNode(sequenceElement, document)).willReturn(sequenceDescriptorAttributes);\n        //WHEN\n        SequenceDescriptor result = underTest.create(document, sequenceElement, dialogDescriptors);\n        //THEN\n        assertEquals(conditionDescriptors, result.getConditionDescriptors());\n        assertEquals(sequenceDialogDescriptors, result.getDialogDescriptors());\n        assertEquals(1L, result.getDefaultTimeout());\n        assertEquals(dummySequenceHandler, result.getHandler());\n        assertEquals(\"bob\", result.getName());\n    }", "signature": "void testCreate()", "full_signature": "@Test public void testCreate()", "class_method_signature": "SequenceDescriptorFactoryTest.testCreate()", "testcase": true, "constructor": false, "invocations": ["build", "defaultTimeout", "handler", "name", "willReturn", "given", "parseNodesOfElement", "willReturn", "given", "groupByName", "willReturn", "given", "parse", "willReturn", "given", "parseNode", "create", "assertEquals", "getConditionDescriptors", "assertEquals", "getDialogDescriptors", "assertEquals", "getDefaultTimeout", "assertEquals", "getHandler", "assertEquals", "getName"]}, "focal_class": {"identifier": "SequenceDescriptorFactory", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Autowired\n    private SequenceDescriptorAttributesParser sequenceDescriptorAttributesParser;", "modifier": "@Autowired\n    private", "type": "SequenceDescriptorAttributesParser", "declarator": "sequenceDescriptorAttributesParser", "var_name": "sequenceDescriptorAttributesParser"}, {"original_string": "@Autowired\n    private DialogDescriptorReferenceParser dialogDescriptorReferenceParser;", "modifier": "@Autowired\n    private", "type": "DialogDescriptorReferenceParser", "declarator": "dialogDescriptorReferenceParser", "var_name": "dialogDescriptorReferenceParser"}, {"original_string": "@Autowired\n    private DialogDescriptorMapper dialogDescriptorMapper;", "modifier": "@Autowired\n    private", "type": "DialogDescriptorMapper", "declarator": "dialogDescriptorMapper", "var_name": "dialogDescriptorMapper"}, {"original_string": "@Autowired\n    private ConditionDescriptorNodesParser conditionDescriptorNodesParser;", "modifier": "@Autowired\n    private", "type": "ConditionDescriptorNodesParser", "declarator": "conditionDescriptorNodesParser", "var_name": "conditionDescriptorNodesParser"}], "methods": [{"identifier": "create", "parameters": "(final Document document, final Element sequenceElement, final List<DialogDescriptor> dialogDescriptors)", "modifiers": "public", "return": "SequenceDescriptor", "signature": "SequenceDescriptor create(final Document document, final Element sequenceElement, final List<DialogDescriptor> dialogDescriptors)", "full_signature": "public SequenceDescriptor create(final Document document, final Element sequenceElement, final List<DialogDescriptor> dialogDescriptors)", "class_method_signature": "SequenceDescriptorFactory.create(final Document document, final Element sequenceElement, final List<DialogDescriptor> dialogDescriptors)", "testcase": false, "constructor": false}], "file": "wilma-application/modules/wilma-stub-configuration-parser/src/main/java/com/epam/wilma/stubconfig/dom/parser/sequence/SequenceDescriptorFactory.java"}, "focal_method": {"identifier": "create", "parameters": "(final Document document, final Element sequenceElement, final List<DialogDescriptor> dialogDescriptors)", "modifiers": "public", "return": "SequenceDescriptor", "body": "public SequenceDescriptor create(final Document document, final Element sequenceElement, final List<DialogDescriptor> dialogDescriptors) {\n        List<ConditionDescriptor> conditionDescriptors = conditionDescriptorNodesParser.parseNodesOfElement(document, sequenceElement);\n        Map<String, DialogDescriptor> dialogDescriptorMap = dialogDescriptorMapper.groupByName(dialogDescriptors);\n        List<DialogDescriptor> referencedDialogDescriptors = dialogDescriptorReferenceParser.parse(sequenceElement, dialogDescriptorMap);\n        SequenceDescriptorAttributes attributes = sequenceDescriptorAttributesParser.parseNode(sequenceElement, document);\n        return new SequenceDescriptor(conditionDescriptors, referencedDialogDescriptors, attributes);\n    }", "signature": "SequenceDescriptor create(final Document document, final Element sequenceElement, final List<DialogDescriptor> dialogDescriptors)", "full_signature": "public SequenceDescriptor create(final Document document, final Element sequenceElement, final List<DialogDescriptor> dialogDescriptors)", "class_method_signature": "SequenceDescriptorFactory.create(final Document document, final Element sequenceElement, final List<DialogDescriptor> dialogDescriptors)", "testcase": false, "constructor": false, "invocations": ["parseNodesOfElement", "groupByName", "parse", "parseNode"]}, "repository": {"repo_id": 29603649, "url": "https://github.com/epam/Wilma", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 35, "size": 5732, "license": "licensed"}}