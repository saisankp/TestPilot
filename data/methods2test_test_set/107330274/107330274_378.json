{"test_class": {"identifier": "SchedulingMachinesFilterTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SchedulerConfiguration schedulerConfiguration = mock(SchedulerConfiguration.class);", "modifier": "private final", "type": "SchedulerConfiguration", "declarator": "schedulerConfiguration = mock(SchedulerConfiguration.class)", "var_name": "schedulerConfiguration"}, {"original_string": "private final AgentManagementService agentManagementService = mock(AgentManagementService.class);", "modifier": "private final", "type": "AgentManagementService", "declarator": "agentManagementService = mock(AgentManagementService.class)", "var_name": "agentManagementService"}, {"original_string": "private final AgentStatusMonitor agentStatusMonitor = mock(AgentStatusMonitor.class);", "modifier": "private final", "type": "AgentStatusMonitor", "declarator": "agentStatusMonitor = mock(AgentStatusMonitor.class)", "var_name": "agentStatusMonitor"}, {"original_string": "private final V3JobOperations jobOperations = mock(V3JobOperations.class);", "modifier": "private final", "type": "V3JobOperations", "declarator": "jobOperations = mock(V3JobOperations.class)", "var_name": "jobOperations"}, {"original_string": "private final SchedulingMachinesFilter machinesFilter = new SchedulingMachinesFilter(schedulerConfiguration,\n            agentManagementService, agentStatusMonitor, jobOperations);", "modifier": "private final", "type": "SchedulingMachinesFilter", "declarator": "machinesFilter = new SchedulingMachinesFilter(schedulerConfiguration,\n            agentManagementService, agentStatusMonitor, jobOperations)", "var_name": "machinesFilter"}], "file": "titus-server-master/src/test/java/com/netflix/titus/master/scheduler/SchedulingMachinesFilterTest.java"}, "test_case": {"identifier": "instanceGroupNotActive", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void instanceGroupNotActive() {\n        AgentInstance instance = createAgentInstance(INSTANCE_ID, UNKNOWN_INSTANCE_GROUP_ID);\n        when(agentManagementService.findAgentInstance(INSTANCE_ID)).thenReturn(Optional.of(instance));\n        AgentInstanceGroup agentInstanceGroup = createAgentInstanceGroup(UNKNOWN_INSTANCE_GROUP_ID,\n                InstanceGroupLifecycleState.Inactive, Tier.Flex);\n        when(agentManagementService.findInstanceGroup(INSTANCE_GROUP_ID)).thenReturn(Optional.of(agentInstanceGroup));\n        VirtualMachineCurrentState currentState = createVirtualMachineCurrentStateMock(INSTANCE_ID);\n        AssignableVirtualMachine machine = createAssignableVirtualMachineMock(currentState);\n        List<AssignableVirtualMachine> filteredMachines = machinesFilter.filter(Collections.singletonList(machine));\n        assertThat(filteredMachines).isEmpty();\n    }", "signature": "void instanceGroupNotActive()", "full_signature": "@Test public void instanceGroupNotActive()", "class_method_signature": "SchedulingMachinesFilterTest.instanceGroupNotActive()", "testcase": true, "constructor": false, "invocations": ["createAgentInstance", "thenReturn", "when", "findAgentInstance", "of", "createAgentInstanceGroup", "thenReturn", "when", "findInstanceGroup", "of", "createVirtualMachineCurrentStateMock", "createAssignableVirtualMachineMock", "filter", "singletonList", "isEmpty", "assertThat"]}, "focal_class": {"identifier": "SchedulingMachinesFilter", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final SchedulerConfiguration schedulerConfiguration;", "modifier": "private final", "type": "SchedulerConfiguration", "declarator": "schedulerConfiguration", "var_name": "schedulerConfiguration"}, {"original_string": "private final AgentManagementService agentManagementService;", "modifier": "private final", "type": "AgentManagementService", "declarator": "agentManagementService", "var_name": "agentManagementService"}, {"original_string": "private final AgentStatusMonitor agentStatusMonitor;", "modifier": "private final", "type": "AgentStatusMonitor", "declarator": "agentStatusMonitor", "var_name": "agentStatusMonitor"}, {"original_string": "private final V3JobOperations v3JobOperations;", "modifier": "private final", "type": "V3JobOperations", "declarator": "v3JobOperations", "var_name": "v3JobOperations"}], "methods": [{"identifier": "SchedulingMachinesFilter", "parameters": "(SchedulerConfiguration schedulerConfiguration,\n                                    AgentManagementService agentManagementService,\n                                    AgentStatusMonitor agentStatusMonitor,\n                                    V3JobOperations v3JobOperations)", "modifiers": "@Inject public", "return": "", "signature": " SchedulingMachinesFilter(SchedulerConfiguration schedulerConfiguration,\n                                    AgentManagementService agentManagementService,\n                                    AgentStatusMonitor agentStatusMonitor,\n                                    V3JobOperations v3JobOperations)", "full_signature": "@Inject public  SchedulingMachinesFilter(SchedulerConfiguration schedulerConfiguration,\n                                    AgentManagementService agentManagementService,\n                                    AgentStatusMonitor agentStatusMonitor,\n                                    V3JobOperations v3JobOperations)", "class_method_signature": "SchedulingMachinesFilter.SchedulingMachinesFilter(SchedulerConfiguration schedulerConfiguration,\n                                    AgentManagementService agentManagementService,\n                                    AgentStatusMonitor agentStatusMonitor,\n                                    V3JobOperations v3JobOperations)", "testcase": false, "constructor": true}, {"identifier": "filter", "parameters": "(List<AssignableVirtualMachine> machines)", "modifiers": "public", "return": "List<AssignableVirtualMachine>", "signature": "List<AssignableVirtualMachine> filter(List<AssignableVirtualMachine> machines)", "full_signature": "public List<AssignableVirtualMachine> filter(List<AssignableVirtualMachine> machines)", "class_method_signature": "SchedulingMachinesFilter.filter(List<AssignableVirtualMachine> machines)", "testcase": false, "constructor": false}, {"identifier": "isInstanceGroupSchedulable", "parameters": "(AgentInstanceGroup instanceGroup)", "modifiers": "private", "return": "boolean", "signature": "boolean isInstanceGroupSchedulable(AgentInstanceGroup instanceGroup)", "full_signature": "private boolean isInstanceGroupSchedulable(AgentInstanceGroup instanceGroup)", "class_method_signature": "SchedulingMachinesFilter.isInstanceGroupSchedulable(AgentInstanceGroup instanceGroup)", "testcase": false, "constructor": false}, {"identifier": "isInstanceSchedulable", "parameters": "(AgentInstance instance)", "modifiers": "private", "return": "boolean", "signature": "boolean isInstanceSchedulable(AgentInstance instance)", "full_signature": "private boolean isInstanceSchedulable(AgentInstance instance)", "class_method_signature": "SchedulingMachinesFilter.isInstanceSchedulable(AgentInstance instance)", "testcase": false, "constructor": false}, {"identifier": "isSchedulable", "parameters": "(Map<String, String> attributes)", "modifiers": "private", "return": "boolean", "signature": "boolean isSchedulable(Map<String, String> attributes)", "full_signature": "private boolean isSchedulable(Map<String, String> attributes)", "class_method_signature": "SchedulingMachinesFilter.isSchedulable(Map<String, String> attributes)", "testcase": false, "constructor": false}, {"identifier": "isInstanceLaunchingTooManyTasks", "parameters": "(Map<String, Task> tasksById,\n                                                    VirtualMachineCurrentState vmCurrentState,\n                                                    int maxLaunchingTasksPerMachine)", "modifiers": "private", "return": "boolean", "signature": "boolean isInstanceLaunchingTooManyTasks(Map<String, Task> tasksById,\n                                                    VirtualMachineCurrentState vmCurrentState,\n                                                    int maxLaunchingTasksPerMachine)", "full_signature": "private boolean isInstanceLaunchingTooManyTasks(Map<String, Task> tasksById,\n                                                    VirtualMachineCurrentState vmCurrentState,\n                                                    int maxLaunchingTasksPerMachine)", "class_method_signature": "SchedulingMachinesFilter.isInstanceLaunchingTooManyTasks(Map<String, Task> tasksById,\n                                                    VirtualMachineCurrentState vmCurrentState,\n                                                    int maxLaunchingTasksPerMachine)", "testcase": false, "constructor": false}], "file": "titus-server-master/src/main/java/com/netflix/titus/master/scheduler/SchedulingMachinesFilter.java"}, "focal_method": {"identifier": "filter", "parameters": "(List<AssignableVirtualMachine> machines)", "modifiers": "public", "return": "List<AssignableVirtualMachine>", "body": "public List<AssignableVirtualMachine> filter(List<AssignableVirtualMachine> machines) {\n        if (!schedulerConfiguration.isSchedulingMachinesFilterEnabled()) {\n            return machines;\n        }\n\n        Map<String, Task> tasksById = new HashMap<>();\n        for (Task task : v3JobOperations.getTasks()) {\n            tasksById.put(task.getId(), task);\n        }\n\n        int maxLaunchingTasksPerMachine = schedulerConfiguration.getMaxLaunchingTasksPerMachine();\n        List<AssignableVirtualMachine> filteredMachines = new ArrayList<>();\n\n        for (AssignableVirtualMachine machine : machines) {\n            VirtualMachineCurrentState vmCurrentState = machine.getVmCurrentState();\n            Optional<AgentInstance> instanceOpt = SchedulerUtils.findInstance(agentManagementService,\n                    schedulerConfiguration.getInstanceAttributeName(), vmCurrentState);\n\n            if (!instanceOpt.isPresent()) {\n                continue;\n            }\n\n            AgentInstance instance = instanceOpt.get();\n\n            Optional<AgentInstanceGroup> instanceGroupOpt = agentManagementService.findInstanceGroup(instance.getInstanceGroupId());\n            if (!instanceGroupOpt.isPresent()) {\n                continue;\n            }\n\n            AgentInstanceGroup instanceGroup = instanceGroupOpt.get();\n\n            if (!isInstanceGroupSchedulable(instanceGroup) || !isInstanceSchedulable(instance) ||\n                    isInstanceLaunchingTooManyTasks(tasksById, vmCurrentState, maxLaunchingTasksPerMachine)) {\n                continue;\n            }\n\n            filteredMachines.add(machine);\n        }\n\n        if (schedulerConfiguration.isSchedulingMachinesFilterShuffleEnabled()) {\n            Collections.shuffle(filteredMachines);\n        }\n\n        return filteredMachines;\n    }", "signature": "List<AssignableVirtualMachine> filter(List<AssignableVirtualMachine> machines)", "full_signature": "public List<AssignableVirtualMachine> filter(List<AssignableVirtualMachine> machines)", "class_method_signature": "SchedulingMachinesFilter.filter(List<AssignableVirtualMachine> machines)", "testcase": false, "constructor": false, "invocations": ["isSchedulingMachinesFilterEnabled", "getTasks", "put", "getId", "getMaxLaunchingTasksPerMachine", "getVmCurrentState", "findInstance", "getInstanceAttributeName", "isPresent", "get", "findInstanceGroup", "getInstanceGroupId", "isPresent", "get", "isInstanceGroupSchedulable", "isInstanceSchedulable", "isInstanceLaunchingTooManyTasks", "add", "isSchedulingMachinesFilterShuffleEnabled", "shuffle"]}, "repository": {"repo_id": 107330274, "url": "https://github.com/Netflix/titus-control-plane", "stars": 241, "created": "10/17/2017 10:20:55 PM +00:00", "updates": "2020-01-25T13:01:05+00:00", "fork": "False", "license": "licensed"}}