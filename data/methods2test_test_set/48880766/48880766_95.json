{"test_class": {"identifier": "ColumnTypeDetectorTest", "superclass": "", "interfaces": "", "fields": [], "file": "core/src/test/java/tech/tablesaw/io/ColumnTypeDetectorTest.java"}, "test_case": {"identifier": "detectColumnTypes", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n  void detectColumnTypes() {\n\n    String[][] val = {{\"\", \"2010-05-03\", \"x\"}, {\"\", \"\", \"\"}};\n\n    ArrayList<String[]> dates = Lists.newArrayList(val);\n\n    ColumnTypeDetector detector =\n        new ColumnTypeDetector(\n            Lists.newArrayList(\n                LOCAL_DATE_TIME,\n                LOCAL_TIME,\n                LOCAL_DATE,\n                BOOLEAN,\n                SHORT,\n                INTEGER,\n                LONG,\n                FLOAT,\n                DOUBLE,\n                STRING,\n                TEXT));\n\n    ColumnType[] types =\n        detector.detectColumnTypes(dates.iterator(), new ReadOptions.Builder().build());\n    assertEquals(TextColumnType.instance(), types[0]);\n    assertEquals(DateColumnType.instance(), types[1]);\n    assertEquals(StringColumnType.instance(), types[2]);\n  }", "signature": "void detectColumnTypes()", "full_signature": "@Test void detectColumnTypes()", "class_method_signature": "ColumnTypeDetectorTest.detectColumnTypes()", "testcase": true, "constructor": false, "invocations": ["newArrayList", "newArrayList", "detectColumnTypes", "iterator", "build", "assertEquals", "instance", "assertEquals", "instance", "assertEquals", "instance"]}, "focal_class": {"identifier": "ColumnTypeDetector", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final int STRING_COLUMN_ROW_COUNT_CUTOFF = 50_000;", "modifier": "private static final", "type": "int", "declarator": "STRING_COLUMN_ROW_COUNT_CUTOFF = 50_000", "var_name": "STRING_COLUMN_ROW_COUNT_CUTOFF"}, {"original_string": "private static final double STRING_COLUMN_CUTOFF = 0.50;", "modifier": "private static final", "type": "double", "declarator": "STRING_COLUMN_CUTOFF = 0.50", "var_name": "STRING_COLUMN_CUTOFF"}, {"original_string": "private final List<ColumnType> typeArray;", "modifier": "private final", "type": "List<ColumnType>", "declarator": "typeArray", "var_name": "typeArray"}], "methods": [{"identifier": "ColumnTypeDetector", "parameters": "(List<ColumnType> typeArray)", "modifiers": "public", "return": "", "signature": " ColumnTypeDetector(List<ColumnType> typeArray)", "full_signature": "public  ColumnTypeDetector(List<ColumnType> typeArray)", "class_method_signature": "ColumnTypeDetector.ColumnTypeDetector(List<ColumnType> typeArray)", "testcase": false, "constructor": true}, {"identifier": "detectColumnTypes", "parameters": "(Iterator<String[]> rows, ReadOptions options)", "modifiers": "public", "return": "ColumnType[]", "signature": "ColumnType[] detectColumnTypes(Iterator<String[]> rows, ReadOptions options)", "full_signature": "public ColumnType[] detectColumnTypes(Iterator<String[]> rows, ReadOptions options)", "class_method_signature": "ColumnTypeDetector.detectColumnTypes(Iterator<String[]> rows, ReadOptions options)", "testcase": false, "constructor": false}, {"identifier": "nextRowWithoutSampling", "parameters": "(int nextRow)", "modifiers": "private", "return": "int", "signature": "int nextRowWithoutSampling(int nextRow)", "full_signature": "private int nextRowWithoutSampling(int nextRow)", "class_method_signature": "ColumnTypeDetector.nextRowWithoutSampling(int nextRow)", "testcase": false, "constructor": false}, {"identifier": "nextRow", "parameters": "(int nextRow)", "modifiers": "private", "return": "int", "signature": "int nextRow(int nextRow)", "full_signature": "private int nextRow(int nextRow)", "class_method_signature": "ColumnTypeDetector.nextRow(int nextRow)", "testcase": false, "constructor": false}, {"identifier": "detectType", "parameters": "(List<String> valuesList, ReadOptions options)", "modifiers": "private", "return": "ColumnType", "signature": "ColumnType detectType(List<String> valuesList, ReadOptions options)", "full_signature": "private ColumnType detectType(List<String> valuesList, ReadOptions options)", "class_method_signature": "ColumnTypeDetector.detectType(List<String> valuesList, ReadOptions options)", "testcase": false, "constructor": false}, {"identifier": "selectType", "parameters": "(List<ColumnType> typeCandidates)", "modifiers": "private", "return": "ColumnType", "signature": "ColumnType selectType(List<ColumnType> typeCandidates)", "full_signature": "private ColumnType selectType(List<ColumnType> typeCandidates)", "class_method_signature": "ColumnTypeDetector.selectType(List<ColumnType> typeCandidates)", "testcase": false, "constructor": false}, {"identifier": "getParserList", "parameters": "(\n      List<ColumnType> typeArray, ReadOptions options)", "modifiers": "private", "return": "List<AbstractColumnParser<?>>", "signature": "List<AbstractColumnParser<?>> getParserList(\n      List<ColumnType> typeArray, ReadOptions options)", "full_signature": "private List<AbstractColumnParser<?>> getParserList(\n      List<ColumnType> typeArray, ReadOptions options)", "class_method_signature": "ColumnTypeDetector.getParserList(\n      List<ColumnType> typeArray, ReadOptions options)", "testcase": false, "constructor": false}], "file": "core/src/main/java/tech/tablesaw/io/ColumnTypeDetector.java"}, "focal_method": {"identifier": "detectColumnTypes", "parameters": "(Iterator<String[]> rows, ReadOptions options)", "modifiers": "public", "return": "ColumnType[]", "body": "public ColumnType[] detectColumnTypes(Iterator<String[]> rows, ReadOptions options) {\n    boolean useSampling = options.sample();\n\n    // to hold the results\n    List<ColumnType> columnTypes = new ArrayList<>();\n\n    // to hold the data read from the file\n    List<List<String>> columnData = new ArrayList<>();\n\n    int rowCount = 0; // make sure we don't go over maxRows\n\n    int nextRow = 0;\n    while (rows.hasNext()) {\n      String[] nextLine = rows.next();\n      // initialize the arrays to hold the strings. we don't know how many we need until we read the\n      // first row\n      if (rowCount == 0) {\n        for (int i = 0; i < nextLine.length; i++) {\n          columnData.add(new ArrayList<>());\n        }\n      }\n      int columnNumber = 0;\n      if (rowCount == nextRow) {\n        for (String field : nextLine) {\n          columnData.get(columnNumber).add(field);\n          columnNumber++;\n        }\n        if (useSampling) {\n          nextRow = nextRow(nextRow);\n        } else {\n          nextRow = nextRowWithoutSampling(nextRow);\n        }\n      }\n      rowCount++;\n    }\n\n    // now detect\n    for (List<String> valuesList : columnData) {\n      ColumnType detectedType = detectType(valuesList, options);\n      if (detectedType.equals(StringColumnType.STRING)\n          && rowCount > STRING_COLUMN_ROW_COUNT_CUTOFF) {\n        HashSet<String> unique = new HashSet<>(valuesList);\n        double uniquePct = unique.size() / (valuesList.size() * 1.0);\n        if (uniquePct > STRING_COLUMN_CUTOFF) {\n          detectedType = TEXT;\n        }\n      }\n      columnTypes.add(detectedType);\n    }\n    return columnTypes.toArray(new ColumnType[0]);\n  }", "signature": "ColumnType[] detectColumnTypes(Iterator<String[]> rows, ReadOptions options)", "full_signature": "public ColumnType[] detectColumnTypes(Iterator<String[]> rows, ReadOptions options)", "class_method_signature": "ColumnTypeDetector.detectColumnTypes(Iterator<String[]> rows, ReadOptions options)", "testcase": false, "constructor": false, "invocations": ["sample", "hasNext", "next", "add", "add", "get", "nextRow", "nextRowWithoutSampling", "detectType", "equals", "size", "size", "add", "toArray"]}, "repository": {"repo_id": 48880766, "url": "https://github.com/jtablesaw/tablesaw", "stars": 2021, "created": "1/1/2016 2:58:28 PM +00:00", "updates": "2020-01-24T23:26:07+00:00", "fork": "False", "license": "licensed"}}