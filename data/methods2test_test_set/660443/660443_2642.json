{"test_class": {"identifier": "DebugElementTest", "superclass": "extends AbstractElementTest", "interfaces": "", "fields": [], "file": "base/datadebug/src/test/java/org/openscience/cdk/debug/DebugElementTest.java"}, "test_case": {"identifier": "testDebugElement_String", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testDebugElement_String() {\n        IElement e = new DebugElement(\"C\");\n        Assert.assertEquals(\"C\", e.getSymbol());\n    }", "signature": "void testDebugElement_String()", "full_signature": "@Test public void testDebugElement_String()", "class_method_signature": "DebugElementTest.testDebugElement_String()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getSymbol"]}, "focal_class": {"identifier": "DebugElement", "superclass": "extends Element", "interfaces": "implements IElement", "fields": [{"original_string": "private static final long serialVersionUID = -8520499563841667066L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -8520499563841667066L", "var_name": "serialVersionUID"}, {"original_string": "ILoggingTool              logger           = LoggingToolFactory.createLoggingTool(DebugElement.class);", "modifier": "", "type": "ILoggingTool", "declarator": "logger           = LoggingToolFactory.createLoggingTool(DebugElement.class)", "var_name": "logger"}], "methods": [{"identifier": "DebugElement", "parameters": "()", "modifiers": "public", "return": "", "signature": " DebugElement()", "full_signature": "public  DebugElement()", "class_method_signature": "DebugElement.DebugElement()", "testcase": false, "constructor": true}, {"identifier": "DebugElement", "parameters": "(String symbol)", "modifiers": "public", "return": "", "signature": " DebugElement(String symbol)", "full_signature": "public  DebugElement(String symbol)", "class_method_signature": "DebugElement.DebugElement(String symbol)", "testcase": false, "constructor": true}, {"identifier": "DebugElement", "parameters": "(String symbol, int atomicNumber)", "modifiers": "public", "return": "", "signature": " DebugElement(String symbol, int atomicNumber)", "full_signature": "public  DebugElement(String symbol, int atomicNumber)", "class_method_signature": "DebugElement.DebugElement(String symbol, int atomicNumber)", "testcase": false, "constructor": true}, {"identifier": "DebugElement", "parameters": "(IElement element)", "modifiers": "public", "return": "", "signature": " DebugElement(IElement element)", "full_signature": "public  DebugElement(IElement element)", "class_method_signature": "DebugElement.DebugElement(IElement element)", "testcase": false, "constructor": true}, {"identifier": "getAtomicNumber", "parameters": "()", "modifiers": "@Override public", "return": "Integer", "signature": "Integer getAtomicNumber()", "full_signature": "@Override public Integer getAtomicNumber()", "class_method_signature": "DebugElement.getAtomicNumber()", "testcase": false, "constructor": false}, {"identifier": "setAtomicNumber", "parameters": "(Integer atomicNumber)", "modifiers": "@Override public", "return": "void", "signature": "void setAtomicNumber(Integer atomicNumber)", "full_signature": "@Override public void setAtomicNumber(Integer atomicNumber)", "class_method_signature": "DebugElement.setAtomicNumber(Integer atomicNumber)", "testcase": false, "constructor": false}, {"identifier": "getSymbol", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getSymbol()", "full_signature": "@Override public String getSymbol()", "class_method_signature": "DebugElement.getSymbol()", "testcase": false, "constructor": false}, {"identifier": "setSymbol", "parameters": "(String symbol)", "modifiers": "@Override public", "return": "void", "signature": "void setSymbol(String symbol)", "full_signature": "@Override public void setSymbol(String symbol)", "class_method_signature": "DebugElement.setSymbol(String symbol)", "testcase": false, "constructor": false}, {"identifier": "addListener", "parameters": "(IChemObjectListener col)", "modifiers": "@Override public", "return": "void", "signature": "void addListener(IChemObjectListener col)", "full_signature": "@Override public void addListener(IChemObjectListener col)", "class_method_signature": "DebugElement.addListener(IChemObjectListener col)", "testcase": false, "constructor": false}, {"identifier": "getListenerCount", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getListenerCount()", "full_signature": "@Override public int getListenerCount()", "class_method_signature": "DebugElement.getListenerCount()", "testcase": false, "constructor": false}, {"identifier": "removeListener", "parameters": "(IChemObjectListener col)", "modifiers": "@Override public", "return": "void", "signature": "void removeListener(IChemObjectListener col)", "full_signature": "@Override public void removeListener(IChemObjectListener col)", "class_method_signature": "DebugElement.removeListener(IChemObjectListener col)", "testcase": false, "constructor": false}, {"identifier": "notifyChanged", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void notifyChanged()", "full_signature": "@Override public void notifyChanged()", "class_method_signature": "DebugElement.notifyChanged()", "testcase": false, "constructor": false}, {"identifier": "notifyChanged", "parameters": "(IChemObjectChangeEvent evt)", "modifiers": "@Override public", "return": "void", "signature": "void notifyChanged(IChemObjectChangeEvent evt)", "full_signature": "@Override public void notifyChanged(IChemObjectChangeEvent evt)", "class_method_signature": "DebugElement.notifyChanged(IChemObjectChangeEvent evt)", "testcase": false, "constructor": false}, {"identifier": "setProperty", "parameters": "(Object description, Object property)", "modifiers": "@Override public", "return": "void", "signature": "void setProperty(Object description, Object property)", "full_signature": "@Override public void setProperty(Object description, Object property)", "class_method_signature": "DebugElement.setProperty(Object description, Object property)", "testcase": false, "constructor": false}, {"identifier": "removeProperty", "parameters": "(Object description)", "modifiers": "@Override public", "return": "void", "signature": "void removeProperty(Object description)", "full_signature": "@Override public void removeProperty(Object description)", "class_method_signature": "DebugElement.removeProperty(Object description)", "testcase": false, "constructor": false}, {"identifier": "getProperty", "parameters": "(Object description)", "modifiers": "@Override public", "return": "T", "signature": "T getProperty(Object description)", "full_signature": "@Override public T getProperty(Object description)", "class_method_signature": "DebugElement.getProperty(Object description)", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "()", "modifiers": "@Override public", "return": "Map<Object, Object>", "signature": "Map<Object, Object> getProperties()", "full_signature": "@Override public Map<Object, Object> getProperties()", "class_method_signature": "DebugElement.getProperties()", "testcase": false, "constructor": false}, {"identifier": "getID", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String getID()", "full_signature": "@Override public String getID()", "class_method_signature": "DebugElement.getID()", "testcase": false, "constructor": false}, {"identifier": "setID", "parameters": "(String identifier)", "modifiers": "@Override public", "return": "void", "signature": "void setID(String identifier)", "full_signature": "@Override public void setID(String identifier)", "class_method_signature": "DebugElement.setID(String identifier)", "testcase": false, "constructor": false}, {"identifier": "setFlag", "parameters": "(int flagType, boolean flagValue)", "modifiers": "@Override public", "return": "void", "signature": "void setFlag(int flagType, boolean flagValue)", "full_signature": "@Override public void setFlag(int flagType, boolean flagValue)", "class_method_signature": "DebugElement.setFlag(int flagType, boolean flagValue)", "testcase": false, "constructor": false}, {"identifier": "getFlag", "parameters": "(int flagType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean getFlag(int flagType)", "full_signature": "@Override public boolean getFlag(int flagType)", "class_method_signature": "DebugElement.getFlag(int flagType)", "testcase": false, "constructor": false}, {"identifier": "addProperties", "parameters": "(Map<Object, Object> properties)", "modifiers": "@Override public", "return": "void", "signature": "void addProperties(Map<Object, Object> properties)", "full_signature": "@Override public void addProperties(Map<Object, Object> properties)", "class_method_signature": "DebugElement.addProperties(Map<Object, Object> properties)", "testcase": false, "constructor": false}, {"identifier": "setFlags", "parameters": "(boolean[] flagsNew)", "modifiers": "@Override public", "return": "void", "signature": "void setFlags(boolean[] flagsNew)", "full_signature": "@Override public void setFlags(boolean[] flagsNew)", "class_method_signature": "DebugElement.setFlags(boolean[] flagsNew)", "testcase": false, "constructor": false}, {"identifier": "getFlags", "parameters": "()", "modifiers": "@Override public", "return": "boolean[]", "signature": "boolean[] getFlags()", "full_signature": "@Override public boolean[] getFlags()", "class_method_signature": "DebugElement.getFlags()", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "()", "modifiers": "@Override public", "return": "Object", "signature": "Object clone()", "full_signature": "@Override public Object clone()", "class_method_signature": "DebugElement.clone()", "testcase": false, "constructor": false}, {"identifier": "getBuilder", "parameters": "()", "modifiers": "@Override public", "return": "IChemObjectBuilder", "signature": "IChemObjectBuilder getBuilder()", "full_signature": "@Override public IChemObjectBuilder getBuilder()", "class_method_signature": "DebugElement.getBuilder()", "testcase": false, "constructor": false}], "file": "base/datadebug/src/main/java/org/openscience/cdk/debug/DebugElement.java"}, "focal_method": {"identifier": "getSymbol", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n    public String getSymbol() {\n        logger.debug(\"Getting symbol: \", super.getSymbol());\n        return super.getSymbol();\n    }", "signature": "String getSymbol()", "full_signature": "@Override public String getSymbol()", "class_method_signature": "DebugElement.getSymbol()", "testcase": false, "constructor": false, "invocations": ["debug", "getSymbol", "getSymbol"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}