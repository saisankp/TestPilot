{"test_class": {"identifier": "MetricFrameLoaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String DEF_FILENAME = \"datasets/cal-inflow-metric-def.json\";", "modifier": "private static final", "type": "String", "declarator": "DEF_FILENAME = \"datasets/cal-inflow-metric-def.json\"", "var_name": "DEF_FILENAME"}, {"original_string": "private static final String DATA_FILENAME = \"datasets/cal-inflow-2.csv\";", "modifier": "private static final", "type": "String", "declarator": "DATA_FILENAME = \"datasets/cal-inflow-2.csv\"", "var_name": "DATA_FILENAME"}, {"original_string": "private static final double TOLERANCE = 0.001;", "modifier": "private static final", "type": "double", "declarator": "TOLERANCE = 0.001", "var_name": "TOLERANCE"}], "file": "anomdetect/src/test/java/com/expedia/adaptivealerting/anomdetect/util/MetricFrameLoaderTest.java"}, "test_case": {"identifier": "testLoadCsv_files", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testLoadCsv_files() throws Exception {\n        val defFile = getResourceAsFile(DEF_FILENAME);\n        val dataFile = getResourceAsFile(DATA_FILENAME);\n        log.info(\"defFile={}, dataFile={}\", defFile, dataFile);\n        val frame = MetricFrameLoader.loadCsv(defFile, dataFile, true);\n        assertEquals(5040, frame.getNumRows());\n        assertEquals(9.0, frame.getMetricData().get(118).getValue(), 0.001);\n    }", "signature": "void testLoadCsv_files()", "full_signature": "@Test public void testLoadCsv_files()", "class_method_signature": "MetricFrameLoaderTest.testLoadCsv_files()", "testcase": true, "constructor": false, "invocations": ["getResourceAsFile", "getResourceAsFile", "info", "loadCsv", "assertEquals", "getNumRows", "assertEquals", "getValue", "get", "getMetricData"]}, "focal_class": {"identifier": "MetricFrameLoader", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final static ObjectMapper OBJECT_MAPPER = new ObjectMapper().registerModule(new MetricsJavaModule());", "modifier": "private final static", "type": "ObjectMapper", "declarator": "OBJECT_MAPPER = new ObjectMapper().registerModule(new MetricsJavaModule())", "var_name": "OBJECT_MAPPER"}], "methods": [{"identifier": "loadCsv", "parameters": "(File metricDefFile, File metricDataFile, boolean hasHeader)", "modifiers": "public static", "return": "MetricFrame", "signature": "MetricFrame loadCsv(File metricDefFile, File metricDataFile, boolean hasHeader)", "full_signature": "public static MetricFrame loadCsv(File metricDefFile, File metricDataFile, boolean hasHeader)", "class_method_signature": "MetricFrameLoader.loadCsv(File metricDefFile, File metricDataFile, boolean hasHeader)", "testcase": false, "constructor": false}, {"identifier": "loadCsv", "parameters": "(MetricDefinition metricDef, InputStream in, boolean hasHeader)", "modifiers": "public static", "return": "MetricFrame", "signature": "MetricFrame loadCsv(MetricDefinition metricDef, InputStream in, boolean hasHeader)", "full_signature": "public static MetricFrame loadCsv(MetricDefinition metricDef, InputStream in, boolean hasHeader)", "class_method_signature": "MetricFrameLoader.loadCsv(MetricDefinition metricDef, InputStream in, boolean hasHeader)", "testcase": false, "constructor": false}, {"identifier": "toMetricData", "parameters": "(MetricDefinition metricDefinition, String[] row)", "modifiers": "private static", "return": "MetricData", "signature": "MetricData toMetricData(MetricDefinition metricDefinition, String[] row)", "full_signature": "private static MetricData toMetricData(MetricDefinition metricDefinition, String[] row)", "class_method_signature": "MetricFrameLoader.toMetricData(MetricDefinition metricDefinition, String[] row)", "testcase": false, "constructor": false}, {"identifier": "safeClose", "parameters": "(FileInputStream fis)", "modifiers": "private static", "return": "void", "signature": "void safeClose(FileInputStream fis)", "full_signature": "private static void safeClose(FileInputStream fis)", "class_method_signature": "MetricFrameLoader.safeClose(FileInputStream fis)", "testcase": false, "constructor": false}], "file": "anomdetect/src/main/java/com/expedia/adaptivealerting/anomdetect/util/MetricFrameLoader.java"}, "focal_method": {"identifier": "loadCsv", "parameters": "(File metricDefFile, File metricDataFile, boolean hasHeader)", "modifiers": "public static", "return": "MetricFrame", "body": "public static MetricFrame loadCsv(File metricDefFile, File metricDataFile, boolean hasHeader)\n            throws IOException {\n\n        val metricDef = OBJECT_MAPPER.readValue(metricDefFile, MetricDefinition.class);\n\n        //SAST SCAN. Unreleased Resource. Close the file input stream. [KS]\n        FileInputStream fileInputStream  = new FileInputStream(metricDataFile);\n        try {\n            return loadCsv(metricDef, fileInputStream, hasHeader);\n        } finally {\n            if (fileInputStream != null) {\n                safeClose(fileInputStream);\n            }\n        }\n    }", "signature": "MetricFrame loadCsv(File metricDefFile, File metricDataFile, boolean hasHeader)", "full_signature": "public static MetricFrame loadCsv(File metricDefFile, File metricDataFile, boolean hasHeader)", "class_method_signature": "MetricFrameLoader.loadCsv(File metricDefFile, File metricDataFile, boolean hasHeader)", "testcase": false, "constructor": false, "invocations": ["readValue", "loadCsv", "safeClose"]}, "repository": {"repo_id": 129125498, "url": "https://github.com/ExpediaDotCom/adaptive-alerting", "stars": 104, "created": "4/11/2018 4:51:18 PM +00:00", "updates": "2020-01-24T16:20:26+00:00", "fork": "False", "license": "licensed"}}