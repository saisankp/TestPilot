{"test_class": {"identifier": "DataSetLookupConstraintsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String OFFICE = \"office\";", "modifier": "public static final", "type": "String", "declarator": "OFFICE = \"office\"", "var_name": "OFFICE"}, {"original_string": "public static final String DEPARTMENT = \"department\";", "modifier": "public static final", "type": "String", "declarator": "DEPARTMENT = \"department\"", "var_name": "DEPARTMENT"}, {"original_string": "public static final String EMPLOYEE = \"employee\";", "modifier": "public static final", "type": "String", "declarator": "EMPLOYEE = \"employee\"", "var_name": "EMPLOYEE"}, {"original_string": "public static final String AMOUNT = \"amount\";", "modifier": "public static final", "type": "String", "declarator": "AMOUNT = \"amount\"", "var_name": "AMOUNT"}, {"original_string": "public static final String DATE = \"date\";", "modifier": "public static final", "type": "String", "declarator": "DATE = \"date\"", "var_name": "DATE"}, {"original_string": "public static final DataSetMetadata METADATA = new DataSetMetadataImpl(null, \"test\", 100, 5,\n            Arrays.asList(OFFICE, DEPARTMENT, EMPLOYEE, AMOUNT, DATE),\n            Arrays.asList(LABEL, LABEL, LABEL, NUMBER, ColumnType.DATE), 0);", "modifier": "public static final", "type": "DataSetMetadata", "declarator": "METADATA = new DataSetMetadataImpl(null, \"test\", 100, 5,\n            Arrays.asList(OFFICE, DEPARTMENT, EMPLOYEE, AMOUNT, DATE),\n            Arrays.asList(LABEL, LABEL, LABEL, NUMBER, ColumnType.DATE), 0)", "var_name": "METADATA"}, {"original_string": "public static final DataSetMetadata METADATA2 = new DataSetMetadataImpl(null, \"test\", 100, 3,\n            Arrays.asList(OFFICE, DEPARTMENT, EMPLOYEE),\n            Arrays.asList(LABEL, LABEL, LABEL), 0);", "modifier": "public static final", "type": "DataSetMetadata", "declarator": "METADATA2 = new DataSetMetadataImpl(null, \"test\", 100, 3,\n            Arrays.asList(OFFICE, DEPARTMENT, EMPLOYEE),\n            Arrays.asList(LABEL, LABEL, LABEL), 0)", "var_name": "METADATA2"}, {"original_string": "public static final DataSetLookupConstraints TWO_COLUMNS_GROUPED = new DataSetLookupConstraints()\n            .setGroupRequired(true)\n            .setGroupColumn(true)\n            .setMaxColumns(2)\n            .setMinColumns(2)\n            .setExtraColumnsAllowed(false)\n            .setGroupsTitle(\"Categories\")\n            .setColumnsTitle(\"Values\")\n            .setColumnTypes(new ColumnType[]{\n                    LABEL,\n                    NUMBER});", "modifier": "public static final", "type": "DataSetLookupConstraints", "declarator": "TWO_COLUMNS_GROUPED = new DataSetLookupConstraints()\n            .setGroupRequired(true)\n            .setGroupColumn(true)\n            .setMaxColumns(2)\n            .setMinColumns(2)\n            .setExtraColumnsAllowed(false)\n            .setGroupsTitle(\"Categories\")\n            .setColumnsTitle(\"Values\")\n            .setColumnTypes(new ColumnType[]{\n                    LABEL,\n                    NUMBER})", "var_name": "TWO_COLUMNS_GROUPED"}, {"original_string": "public static final DataSetLookupConstraints MULTIPLE_COLUMNS = new DataSetLookupConstraints()\n            .setGroupAllowed(true)\n            .setGroupRequired(false)\n            .setMaxColumns(-1)\n            .setMinColumns(1)\n            .setExtraColumnsAllowed(true)\n            .setGroupsTitle(\"Rows\")\n            .setColumnsTitle(\"Columns\");", "modifier": "public static final", "type": "DataSetLookupConstraints", "declarator": "MULTIPLE_COLUMNS = new DataSetLookupConstraints()\n            .setGroupAllowed(true)\n            .setGroupRequired(false)\n            .setMaxColumns(-1)\n            .setMinColumns(1)\n            .setExtraColumnsAllowed(true)\n            .setGroupsTitle(\"Rows\")\n            .setColumnsTitle(\"Columns\")", "var_name": "MULTIPLE_COLUMNS"}, {"original_string": "DataSetLookupConstraints lookupConstraints = new DataSetLookupConstraints()\n            .setGroupRequired(true)\n            .setGroupColumn(true)\n            .setMaxColumns(10)\n            .setMinColumns(2)\n            .setExtraColumnsAllowed(true)\n            .setExtraColumnsType( ColumnType.NUMBER)\n            .setColumnTypes(new ColumnType[] {\n                    ColumnType.LABEL,\n                    ColumnType.NUMBER});", "modifier": "", "type": "DataSetLookupConstraints", "declarator": "lookupConstraints = new DataSetLookupConstraints()\n            .setGroupRequired(true)\n            .setGroupColumn(true)\n            .setMaxColumns(10)\n            .setMinColumns(2)\n            .setExtraColumnsAllowed(true)\n            .setExtraColumnsType( ColumnType.NUMBER)\n            .setColumnTypes(new ColumnType[] {\n                    ColumnType.LABEL,\n                    ColumnType.NUMBER})", "var_name": "lookupConstraints"}], "file": "kie-soup-dataset/kie-soup-dataset-api/src/test/java/org/dashbuilder/dataset/DataSetLookupConstraintsTest.java"}, "test_case": {"identifier": "testWrongColumnType", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWrongColumnType() {\n        DataSetLookup lookup = DataSetLookupFactory.newDataSetLookupBuilder()\n                .group(DEPARTMENT)\n                .column(DEPARTMENT)\n                .column(EMPLOYEE)\n                .buildLookup();\n\n        ValidationError error = TWO_COLUMNS_GROUPED.check(lookup, METADATA);\n        assertNotNull(error);\n        assertEquals(error.getCode(), DataSetLookupConstraints.ERROR_COLUMN_TYPE);\n\n        lookup = DataSetLookupFactory.newDataSetLookupBuilder()\n                .group(DATE)\n                .column(DATE)\n                .column(EMPLOYEE)\n                .buildLookup();\n\n        error = TWO_COLUMNS_GROUPED.check(lookup, METADATA);\n        assertNotNull(error);\n        assertEquals(error.getCode(), DataSetLookupConstraints.ERROR_COLUMN_TYPE);\n    }", "signature": "void testWrongColumnType()", "full_signature": "@Test public void testWrongColumnType()", "class_method_signature": "DataSetLookupConstraintsTest.testWrongColumnType()", "testcase": true, "constructor": false, "invocations": ["buildLookup", "column", "column", "group", "newDataSetLookupBuilder", "check", "assertNotNull", "assertEquals", "getCode", "buildLookup", "column", "column", "group", "newDataSetLookupBuilder", "check", "assertNotNull", "assertEquals", "getCode"]}, "focal_class": {"identifier": "DataSetLookupConstraints", "superclass": "extends DataSetConstraints<DataSetLookupConstraints>", "interfaces": "", "fields": [{"original_string": "public static final int ERROR_GROUP_NUMBER = 200;", "modifier": "public static final", "type": "int", "declarator": "ERROR_GROUP_NUMBER = 200", "var_name": "ERROR_GROUP_NUMBER"}, {"original_string": "public static final int ERROR_GROUP_NOT_ALLOWED = 201;", "modifier": "public static final", "type": "int", "declarator": "ERROR_GROUP_NOT_ALLOWED = 201", "var_name": "ERROR_GROUP_NOT_ALLOWED"}, {"original_string": "public static final int ERROR_GROUP_REQUIRED = 203;", "modifier": "public static final", "type": "int", "declarator": "ERROR_GROUP_REQUIRED = 203", "var_name": "ERROR_GROUP_REQUIRED"}, {"original_string": "public static final int ERROR_DUPLICATED_COLUMN_ID = 204;", "modifier": "public static final", "type": "int", "declarator": "ERROR_DUPLICATED_COLUMN_ID = 204", "var_name": "ERROR_DUPLICATED_COLUMN_ID"}, {"original_string": "protected boolean uniqueColumnIds = false;", "modifier": "protected", "type": "boolean", "declarator": "uniqueColumnIds = false", "var_name": "uniqueColumnIds"}, {"original_string": "protected boolean filterAllowed = true;", "modifier": "protected", "type": "boolean", "declarator": "filterAllowed = true", "var_name": "filterAllowed"}, {"original_string": "protected boolean groupAllowed = true;", "modifier": "protected", "type": "boolean", "declarator": "groupAllowed = true", "var_name": "groupAllowed"}, {"original_string": "protected boolean groupRequired = false;", "modifier": "protected", "type": "boolean", "declarator": "groupRequired = false", "var_name": "groupRequired"}, {"original_string": "protected int maxGroups = -1;", "modifier": "protected", "type": "int", "declarator": "maxGroups = -1", "var_name": "maxGroups"}, {"original_string": "protected String groupsTitle = \"Rows\";", "modifier": "protected", "type": "String", "declarator": "groupsTitle = \"Rows\"", "var_name": "groupsTitle"}, {"original_string": "protected String columnsTitle = \"Columns\";", "modifier": "protected", "type": "String", "declarator": "columnsTitle = \"Columns\"", "var_name": "columnsTitle"}, {"original_string": "protected boolean groupColumn = false;", "modifier": "protected", "type": "boolean", "declarator": "groupColumn = false", "var_name": "groupColumn"}, {"original_string": "protected boolean functionRequired = false;", "modifier": "protected", "type": "boolean", "declarator": "functionRequired = false", "var_name": "functionRequired"}, {"original_string": "protected Map<Integer,String> columnTitleMap = new HashMap<Integer,String>();", "modifier": "protected", "type": "Map<Integer,String>", "declarator": "columnTitleMap = new HashMap<Integer,String>()", "var_name": "columnTitleMap"}], "methods": [{"identifier": "isUniqueColumnIds", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isUniqueColumnIds()", "full_signature": "public boolean isUniqueColumnIds()", "class_method_signature": "DataSetLookupConstraints.isUniqueColumnIds()", "testcase": false, "constructor": false}, {"identifier": "setUniqueColumnIds", "parameters": "(boolean uniqueColumnIds)", "modifiers": "public", "return": "DataSetLookupConstraints", "signature": "DataSetLookupConstraints setUniqueColumnIds(boolean uniqueColumnIds)", "full_signature": "public DataSetLookupConstraints setUniqueColumnIds(boolean uniqueColumnIds)", "class_method_signature": "DataSetLookupConstraints.setUniqueColumnIds(boolean uniqueColumnIds)", "testcase": false, "constructor": false}, {"identifier": "isFilterAllowed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFilterAllowed()", "full_signature": "public boolean isFilterAllowed()", "class_method_signature": "DataSetLookupConstraints.isFilterAllowed()", "testcase": false, "constructor": false}, {"identifier": "setFilterAllowed", "parameters": "(boolean filterAllowed)", "modifiers": "public", "return": "DataSetLookupConstraints", "signature": "DataSetLookupConstraints setFilterAllowed(boolean filterAllowed)", "full_signature": "public DataSetLookupConstraints setFilterAllowed(boolean filterAllowed)", "class_method_signature": "DataSetLookupConstraints.setFilterAllowed(boolean filterAllowed)", "testcase": false, "constructor": false}, {"identifier": "isGroupAllowed", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isGroupAllowed()", "full_signature": "public boolean isGroupAllowed()", "class_method_signature": "DataSetLookupConstraints.isGroupAllowed()", "testcase": false, "constructor": false}, {"identifier": "setGroupAllowed", "parameters": "(boolean groupAllowed)", "modifiers": "public", "return": "DataSetLookupConstraints", "signature": "DataSetLookupConstraints setGroupAllowed(boolean groupAllowed)", "full_signature": "public DataSetLookupConstraints setGroupAllowed(boolean groupAllowed)", "class_method_signature": "DataSetLookupConstraints.setGroupAllowed(boolean groupAllowed)", "testcase": false, "constructor": false}, {"identifier": "isGroupRequired", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isGroupRequired()", "full_signature": "public boolean isGroupRequired()", "class_method_signature": "DataSetLookupConstraints.isGroupRequired()", "testcase": false, "constructor": false}, {"identifier": "setGroupRequired", "parameters": "(boolean groupRequired)", "modifiers": "public", "return": "DataSetLookupConstraints", "signature": "DataSetLookupConstraints setGroupRequired(boolean groupRequired)", "full_signature": "public DataSetLookupConstraints setGroupRequired(boolean groupRequired)", "class_method_signature": "DataSetLookupConstraints.setGroupRequired(boolean groupRequired)", "testcase": false, "constructor": false}, {"identifier": "getMaxGroups", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getMaxGroups()", "full_signature": "public int getMaxGroups()", "class_method_signature": "DataSetLookupConstraints.getMaxGroups()", "testcase": false, "constructor": false}, {"identifier": "setMaxGroups", "parameters": "(int maxGroups)", "modifiers": "public", "return": "DataSetLookupConstraints", "signature": "DataSetLookupConstraints setMaxGroups(int maxGroups)", "full_signature": "public DataSetLookupConstraints setMaxGroups(int maxGroups)", "class_method_signature": "DataSetLookupConstraints.setMaxGroups(int maxGroups)", "testcase": false, "constructor": false}, {"identifier": "getGroupsTitle", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getGroupsTitle()", "full_signature": "public String getGroupsTitle()", "class_method_signature": "DataSetLookupConstraints.getGroupsTitle()", "testcase": false, "constructor": false}, {"identifier": "setGroupsTitle", "parameters": "(String groupsTitle)", "modifiers": "public", "return": "DataSetLookupConstraints", "signature": "DataSetLookupConstraints setGroupsTitle(String groupsTitle)", "full_signature": "public DataSetLookupConstraints setGroupsTitle(String groupsTitle)", "class_method_signature": "DataSetLookupConstraints.setGroupsTitle(String groupsTitle)", "testcase": false, "constructor": false}, {"identifier": "getColumnsTitle", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getColumnsTitle()", "full_signature": "public String getColumnsTitle()", "class_method_signature": "DataSetLookupConstraints.getColumnsTitle()", "testcase": false, "constructor": false}, {"identifier": "setColumnsTitle", "parameters": "(String columnsTitle)", "modifiers": "public", "return": "DataSetLookupConstraints", "signature": "DataSetLookupConstraints setColumnsTitle(String columnsTitle)", "full_signature": "public DataSetLookupConstraints setColumnsTitle(String columnsTitle)", "class_method_signature": "DataSetLookupConstraints.setColumnsTitle(String columnsTitle)", "testcase": false, "constructor": false}, {"identifier": "setColumnTitle", "parameters": "(Integer index, String title)", "modifiers": "public", "return": "DataSetLookupConstraints", "signature": "DataSetLookupConstraints setColumnTitle(Integer index, String title)", "full_signature": "public DataSetLookupConstraints setColumnTitle(Integer index, String title)", "class_method_signature": "DataSetLookupConstraints.setColumnTitle(Integer index, String title)", "testcase": false, "constructor": false}, {"identifier": "getColumnTitle", "parameters": "(Integer index)", "modifiers": "public", "return": "String", "signature": "String getColumnTitle(Integer index)", "full_signature": "public String getColumnTitle(Integer index)", "class_method_signature": "DataSetLookupConstraints.getColumnTitle(Integer index)", "testcase": false, "constructor": false}, {"identifier": "isGroupColumn", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isGroupColumn()", "full_signature": "public boolean isGroupColumn()", "class_method_signature": "DataSetLookupConstraints.isGroupColumn()", "testcase": false, "constructor": false}, {"identifier": "setGroupColumn", "parameters": "(boolean groupColumn)", "modifiers": "public", "return": "DataSetLookupConstraints", "signature": "DataSetLookupConstraints setGroupColumn(boolean groupColumn)", "full_signature": "public DataSetLookupConstraints setGroupColumn(boolean groupColumn)", "class_method_signature": "DataSetLookupConstraints.setGroupColumn(boolean groupColumn)", "testcase": false, "constructor": false}, {"identifier": "isFunctionRequired", "parameters": "()", "modifiers": "public", "return": "boolean", "signature": "boolean isFunctionRequired()", "full_signature": "public boolean isFunctionRequired()", "class_method_signature": "DataSetLookupConstraints.isFunctionRequired()", "testcase": false, "constructor": false}, {"identifier": "setFunctionRequired", "parameters": "(boolean functionRequired)", "modifiers": "public", "return": "DataSetLookupConstraints", "signature": "DataSetLookupConstraints setFunctionRequired(boolean functionRequired)", "full_signature": "public DataSetLookupConstraints setFunctionRequired(boolean functionRequired)", "class_method_signature": "DataSetLookupConstraints.setFunctionRequired(boolean functionRequired)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(DataSetLookup lookup)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError check(DataSetLookup lookup)", "full_signature": "public ValidationError check(DataSetLookup lookup)", "class_method_signature": "DataSetLookupConstraints.check(DataSetLookup lookup)", "testcase": false, "constructor": false}, {"identifier": "check", "parameters": "(DataSetLookup lookup, DataSetMetadata metadata)", "modifiers": "public", "return": "ValidationError", "signature": "ValidationError check(DataSetLookup lookup, DataSetMetadata metadata)", "full_signature": "public ValidationError check(DataSetLookup lookup, DataSetMetadata metadata)", "class_method_signature": "DataSetLookupConstraints.check(DataSetLookup lookup, DataSetMetadata metadata)", "testcase": false, "constructor": false}, {"identifier": "checkTypes", "parameters": "(DataSetMetadata metadata, DataSetGroup groupOp, ColumnType[] types)", "modifiers": "private", "return": "ValidationError", "signature": "ValidationError checkTypes(DataSetMetadata metadata, DataSetGroup groupOp, ColumnType[] types)", "full_signature": "private ValidationError checkTypes(DataSetMetadata metadata, DataSetGroup groupOp, ColumnType[] types)", "class_method_signature": "DataSetLookupConstraints.checkTypes(DataSetMetadata metadata, DataSetGroup groupOp, ColumnType[] types)", "testcase": false, "constructor": false}, {"identifier": "createValidationError", "parameters": "(int error, Object... params)", "modifiers": "protected", "return": "ValidationError", "signature": "ValidationError createValidationError(int error, Object... params)", "full_signature": "protected ValidationError createValidationError(int error, Object... params)", "class_method_signature": "DataSetLookupConstraints.createValidationError(int error, Object... params)", "testcase": false, "constructor": false}, {"identifier": "newDataSetLookup", "parameters": "(DataSetMetadata metatada)", "modifiers": "public", "return": "DataSetLookup", "signature": "DataSetLookup newDataSetLookup(DataSetMetadata metatada)", "full_signature": "public DataSetLookup newDataSetLookup(DataSetMetadata metatada)", "class_method_signature": "DataSetLookupConstraints.newDataSetLookup(DataSetMetadata metatada)", "testcase": false, "constructor": false}, {"identifier": "buildUniqueColumnId", "parameters": "(DataSetLookup lookup, String targetId)", "modifiers": "public", "return": "String", "signature": "String buildUniqueColumnId(DataSetLookup lookup, String targetId)", "full_signature": "public String buildUniqueColumnId(DataSetLookup lookup, String targetId)", "class_method_signature": "DataSetLookupConstraints.buildUniqueColumnId(DataSetLookup lookup, String targetId)", "testcase": false, "constructor": false}, {"identifier": "buildUniqueColumnId", "parameters": "(DataSetLookup lookup, GroupFunction column)", "modifiers": "public", "return": "String", "signature": "String buildUniqueColumnId(DataSetLookup lookup, GroupFunction column)", "full_signature": "public String buildUniqueColumnId(DataSetLookup lookup, GroupFunction column)", "class_method_signature": "DataSetLookupConstraints.buildUniqueColumnId(DataSetLookup lookup, GroupFunction column)", "testcase": false, "constructor": false}, {"identifier": "getGroupColumn", "parameters": "(DataSetMetadata metatada)", "modifiers": "private", "return": "int", "signature": "int getGroupColumn(DataSetMetadata metatada)", "full_signature": "private int getGroupColumn(DataSetMetadata metatada)", "class_method_signature": "DataSetLookupConstraints.getGroupColumn(DataSetMetadata metatada)", "testcase": false, "constructor": false}, {"identifier": "getTargetColumn", "parameters": "(DataSetMetadata metatada, ColumnType type, Set<Integer> exclude)", "modifiers": "private", "return": "int", "signature": "int getTargetColumn(DataSetMetadata metatada, ColumnType type, Set<Integer> exclude)", "full_signature": "private int getTargetColumn(DataSetMetadata metatada, ColumnType type, Set<Integer> exclude)", "class_method_signature": "DataSetLookupConstraints.getTargetColumn(DataSetMetadata metatada, ColumnType type, Set<Integer> exclude)", "testcase": false, "constructor": false}, {"identifier": "getTargetColumn", "parameters": "(DataSetMetadata metatada, Set<Integer> exclude)", "modifiers": "private", "return": "int", "signature": "int getTargetColumn(DataSetMetadata metatada, Set<Integer> exclude)", "full_signature": "private int getTargetColumn(DataSetMetadata metatada, Set<Integer> exclude)", "class_method_signature": "DataSetLookupConstraints.getTargetColumn(DataSetMetadata metatada, Set<Integer> exclude)", "testcase": false, "constructor": false}], "file": "kie-soup-dataset/kie-soup-dataset-api/src/main/java/org/dashbuilder/dataset/DataSetLookupConstraints.java"}, "focal_method": {"identifier": "check", "parameters": "(DataSetLookup lookup)", "modifiers": "public", "return": "ValidationError", "body": "public ValidationError check(DataSetLookup lookup) {\n        return check(lookup, null);\n    }", "signature": "ValidationError check(DataSetLookup lookup)", "full_signature": "public ValidationError check(DataSetLookup lookup)", "class_method_signature": "DataSetLookupConstraints.check(DataSetLookup lookup)", "testcase": false, "constructor": false, "invocations": ["check"]}, "repository": {"repo_id": 103437385, "url": "https://github.com/kiegroup/kie-soup", "stars": 11, "created": "9/13/2017 6:41:37 PM +00:00", "updates": "2020-01-21T13:07:53+00:00", "fork": "False", "license": "licensed"}}