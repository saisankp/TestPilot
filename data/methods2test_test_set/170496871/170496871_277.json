{"test_class": {"identifier": "ROCAUCTest", "superclass": "", "interfaces": "", "fields": [], "file": "modules/ml/src/test/java/org/apache/ignite/ml/selection/scoring/metric/classification/ROCAUCTest.java"}, "test_case": {"identifier": "testNotOnlyBinaryValues", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testNotOnlyBinaryValues() {\n        Metric<Double> scoreCalculator = new ROCAUC();\n\n        LabelPairCursor<Double> cursor = new TestLabelPairCursor<>(\n            Arrays.asList(1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0),\n            Arrays.asList(0.40209054, 0.33697626, 0.5449324, 0.13010869, 0.19019675, 0.39767829, 0.9686739, 0.91783275, 0.7503783, 0.5306605)\n        );\n\n        double score = scoreCalculator.score(cursor.iterator());\n\n        assertEquals(0.625, score, 1e-12);\n    }", "signature": "void testNotOnlyBinaryValues()", "full_signature": "@Test public void testNotOnlyBinaryValues()", "class_method_signature": "ROCAUCTest.testNotOnlyBinaryValues()", "testcase": true, "constructor": false, "invocations": ["asList", "asList", "score", "iterator", "assertEquals"]}, "focal_class": {"identifier": "ROCAUC", "superclass": "", "interfaces": "implements Metric<Double>", "fields": [{"original_string": "private double positiveClsLb = 1.0;", "modifier": "private", "type": "double", "declarator": "positiveClsLb = 1.0", "var_name": "positiveClsLb"}, {"original_string": "private double negativeClsLb;", "modifier": "private", "type": "double", "declarator": "negativeClsLb", "var_name": "negativeClsLb"}], "methods": [{"identifier": "score", "parameters": "(Iterator<LabelPair<Double>> iter)", "modifiers": "@Override public", "return": "double", "signature": "double score(Iterator<LabelPair<Double>> iter)", "full_signature": "@Override public double score(Iterator<LabelPair<Double>> iter)", "class_method_signature": "ROCAUC.score(Iterator<LabelPair<Double>> iter)", "testcase": false, "constructor": false}, {"identifier": "calculateROCAUC", "parameters": "(PriorityQueue<Pair<Double, Double>> queue, long pos, long neg, double positiveClsLb)", "modifiers": "public static", "return": "double", "signature": "double calculateROCAUC(PriorityQueue<Pair<Double, Double>> queue, long pos, long neg, double positiveClsLb)", "full_signature": "public static double calculateROCAUC(PriorityQueue<Pair<Double, Double>> queue, long pos, long neg, double positiveClsLb)", "class_method_signature": "ROCAUC.calculateROCAUC(PriorityQueue<Pair<Double, Double>> queue, long pos, long neg, double positiveClsLb)", "testcase": false, "constructor": false}, {"identifier": "positiveClsLb", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double positiveClsLb()", "full_signature": "public double positiveClsLb()", "class_method_signature": "ROCAUC.positiveClsLb()", "testcase": false, "constructor": false}, {"identifier": "withPositiveClsLb", "parameters": "(double positiveClsLb)", "modifiers": "public", "return": "ROCAUC", "signature": "ROCAUC withPositiveClsLb(double positiveClsLb)", "full_signature": "public ROCAUC withPositiveClsLb(double positiveClsLb)", "class_method_signature": "ROCAUC.withPositiveClsLb(double positiveClsLb)", "testcase": false, "constructor": false}, {"identifier": "negativeClsLb", "parameters": "()", "modifiers": "public", "return": "double", "signature": "double negativeClsLb()", "full_signature": "public double negativeClsLb()", "class_method_signature": "ROCAUC.negativeClsLb()", "testcase": false, "constructor": false}, {"identifier": "withNegativeClsLb", "parameters": "(double negativeClsLb)", "modifiers": "public", "return": "ROCAUC", "signature": "ROCAUC withNegativeClsLb(double negativeClsLb)", "full_signature": "public ROCAUC withNegativeClsLb(double negativeClsLb)", "class_method_signature": "ROCAUC.withNegativeClsLb(double negativeClsLb)", "testcase": false, "constructor": false}, {"identifier": "name", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String name()", "full_signature": "@Override public String name()", "class_method_signature": "ROCAUC.name()", "testcase": false, "constructor": false}], "file": "modules/ml/src/main/java/org/apache/ignite/ml/selection/scoring/metric/classification/ROCAUC.java"}, "focal_method": {"identifier": "score", "parameters": "(Iterator<LabelPair<Double>> iter)", "modifiers": "@Override public", "return": "double", "body": "@Override public double score(Iterator<LabelPair<Double>> iter) {\n        //TODO: It should work with not binary values only, see IGNITE-11680.\n\n        PriorityQueue<Pair<Double, Double>> queue = new PriorityQueue<>(Comparator.comparingDouble(Pair::getKey));\n\n        long pos = 0;\n        long neg = 0;\n\n        while (iter.hasNext()) {\n            LabelPair<Double> e = iter.next();\n\n            Double prediction = e.getPrediction();\n            Double truth = e.getTruth();\n\n            queue.add(new Pair<>(prediction, truth));\n\n            if (truth == positiveClsLb)\n                pos++;\n            else if (truth == negativeClsLb)\n                neg++;\n            else\n                throw new UnknownClassLabelException(truth, positiveClsLb, negativeClsLb);\n\n        }\n\n        return calculateROCAUC(queue, pos, neg, positiveClsLb);\n    }", "signature": "double score(Iterator<LabelPair<Double>> iter)", "full_signature": "@Override public double score(Iterator<LabelPair<Double>> iter)", "class_method_signature": "ROCAUC.score(Iterator<LabelPair<Double>> iter)", "testcase": false, "constructor": false, "invocations": ["comparingDouble", "hasNext", "next", "getPrediction", "getTruth", "add", "calculateROCAUC"]}, "repository": {"repo_id": 170496871, "url": "https://github.com/gridgain/gridgain", "stars": 46, "created": "2/13/2019 11:31:35 AM +00:00", "updates": "2020-01-27T16:02:24+00:00", "fork": "False", "license": "licensed"}}