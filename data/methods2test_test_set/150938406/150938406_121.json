{"test_class": {"identifier": "NaiveBayesTextModelMapperTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Row[] rows = new Row[] {\n\t\tRow.of(0L, \"{\\\"labelType\\\":\\\"4\\\",\\\"modelType\\\":\\\"\\\\\\\"BERNOULLI\\\\\\\"\\\",\\\"labelTypeName\\\":\\\"\\\\\\\"INTEGER\\\\\\\"\\\",\"\n\t\t\t\t+ \"\\\"modelSchema\\\":\\\"\\\\\\\"model_id bigint,model_info string,label_type int\\\\\\\"\\\",\"\n\t\t\t\t+ \"\\\"isNewFormat\\\":\\\"true\\\",\\\"vectorCol\\\":\\\"vec\\\"}\",\n\t\t\tnull),\n\t\tRow.of(1048576L, \"{\\\"piArray\\\":[-0.6931471805599454,-0.6931471805599454],\\\"theta\\\":{\\\"m\\\":2,\\\"n\\\":4,\"\n\t\t\t+ \"\\\"data\\\":[-2.3025850929940455,-0.10536051565782611,-0.10536051565782611,-0.6931471805599452,\"\n\t\t\t+ \"-0.10536051565782611,-0.3566749439387322,-2.3025850929940455,-0.10536051565782611]}}\", null),\n\t\tRow.of(Integer.MAX_VALUE * 1048576L, null, 0),\n\t\tRow.of(Integer.MAX_VALUE * 1048576L + 1L, null, 1),\n\t};", "modifier": "", "type": "Row[]", "declarator": "rows = new Row[] {\n\t\tRow.of(0L, \"{\\\"labelType\\\":\\\"4\\\",\\\"modelType\\\":\\\"\\\\\\\"BERNOULLI\\\\\\\"\\\",\\\"labelTypeName\\\":\\\"\\\\\\\"INTEGER\\\\\\\"\\\",\"\n\t\t\t\t+ \"\\\"modelSchema\\\":\\\"\\\\\\\"model_id bigint,model_info string,label_type int\\\\\\\"\\\",\"\n\t\t\t\t+ \"\\\"isNewFormat\\\":\\\"true\\\",\\\"vectorCol\\\":\\\"vec\\\"}\",\n\t\t\tnull),\n\t\tRow.of(1048576L, \"{\\\"piArray\\\":[-0.6931471805599454,-0.6931471805599454],\\\"theta\\\":{\\\"m\\\":2,\\\"n\\\":4,\"\n\t\t\t+ \"\\\"data\\\":[-2.3025850929940455,-0.10536051565782611,-0.10536051565782611,-0.6931471805599452,\"\n\t\t\t+ \"-0.10536051565782611,-0.3566749439387322,-2.3025850929940455,-0.10536051565782611]}}\", null),\n\t\tRow.of(Integer.MAX_VALUE * 1048576L, null, 0),\n\t\tRow.of(Integer.MAX_VALUE * 1048576L + 1L, null, 1),\n\t}", "var_name": "rows"}, {"original_string": "List <Row> model = Arrays.asList(rows);", "modifier": "", "type": "List <Row>", "declarator": "model = Arrays.asList(rows)", "var_name": "model"}, {"original_string": "TableSchema modelSchema = new TableSchema(new String[] {\"model_id\", \"model_info\", \"label_type\"},\n\t\tnew TypeInformation[] {Types.LONG, Types.STRING, Types.INT});", "modifier": "", "type": "TableSchema", "declarator": "modelSchema = new TableSchema(new String[] {\"model_id\", \"model_info\", \"label_type\"},\n\t\tnew TypeInformation[] {Types.LONG, Types.STRING, Types.INT})", "var_name": "modelSchema"}], "file": "core/src/test/java/com/alibaba/alink/operator/common/classification/NaiveBayesTextModelMapperTest.java"}, "test_case": {"identifier": "testPredictReservedCol", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testPredictReservedCol() throws Exception {\n\t\tTableSchema dataSchema = new TableSchema(\n\t\t\tnew String[] {\"vec\"},\n\t\t\tnew TypeInformation<?>[] {Types.STRING}\n\t\t);\n\t\tParams params = new Params()\n\t\t\t.set(NaiveBayesTextPredictParams.VECTOR_COL, \"vec\")\n\t\t\t.set(NaiveBayesTextPredictParams.PREDICTION_COL, \"pred\");\n\n\t\tNaiveBayesTextModelMapper mapper = new NaiveBayesTextModelMapper(modelSchema, dataSchema, params);\n\t\tmapper.loadModel(model);\n\n\t\tassertEquals(mapper.map(Row.of(\"1.0, 1.0, 0.0, 1.0\")).getField(1), 1);\n\t\tassertEquals(mapper.getOutputSchema(), new TableSchema(new String[] {\"vec\", \"pred\"},\n\t\t\tnew TypeInformation<?>[] {Types.STRING, Types.INT}));\n\t}", "signature": "void testPredictReservedCol()", "full_signature": "@Test public void testPredictReservedCol()", "class_method_signature": "NaiveBayesTextModelMapperTest.testPredictReservedCol()", "testcase": true, "constructor": false, "invocations": ["set", "set", "loadModel", "assertEquals", "getField", "map", "of", "assertEquals", "getOutputSchema"]}, "focal_class": {"identifier": "NaiveBayesTextModelMapper", "superclass": "extends RichModelMapper", "interfaces": "", "fields": [{"original_string": "public String[] colNames;", "modifier": "public", "type": "String[]", "declarator": "colNames", "var_name": "colNames"}, {"original_string": "public String vectorColName;", "modifier": "public", "type": "String", "declarator": "vectorColName", "var_name": "vectorColName"}, {"original_string": "private int vectorIndex;", "modifier": "private", "type": "int", "declarator": "vectorIndex", "var_name": "vectorIndex"}, {"original_string": "private NaiveBayesTextPredictModelData modelData;", "modifier": "private", "type": "NaiveBayesTextPredictModelData", "declarator": "modelData", "var_name": "modelData"}], "methods": [{"identifier": "NaiveBayesTextModelMapper", "parameters": "(TableSchema modelSchema, TableSchema dataSchema, Params params)", "modifiers": "public", "return": "", "signature": " NaiveBayesTextModelMapper(TableSchema modelSchema, TableSchema dataSchema, Params params)", "full_signature": "public  NaiveBayesTextModelMapper(TableSchema modelSchema, TableSchema dataSchema, Params params)", "class_method_signature": "NaiveBayesTextModelMapper.NaiveBayesTextModelMapper(TableSchema modelSchema, TableSchema dataSchema, Params params)", "testcase": false, "constructor": true}, {"identifier": "multinomialCalculation", "parameters": "(Vector vec)", "modifiers": "private", "return": "double[]", "signature": "double[] multinomialCalculation(Vector vec)", "full_signature": "private double[] multinomialCalculation(Vector vec)", "class_method_signature": "NaiveBayesTextModelMapper.multinomialCalculation(Vector vec)", "testcase": false, "constructor": false}, {"identifier": "bernoulliCalculation", "parameters": "(Vector vec)", "modifiers": "private", "return": "double[]", "signature": "double[] bernoulliCalculation(Vector vec)", "full_signature": "private double[] bernoulliCalculation(Vector vec)", "class_method_signature": "NaiveBayesTextModelMapper.bernoulliCalculation(Vector vec)", "testcase": false, "constructor": false}, {"identifier": "loadModel", "parameters": "(List<Row> modelRows)", "modifiers": "@Override public", "return": "void", "signature": "void loadModel(List<Row> modelRows)", "full_signature": "@Override public void loadModel(List<Row> modelRows)", "class_method_signature": "NaiveBayesTextModelMapper.loadModel(List<Row> modelRows)", "testcase": false, "constructor": false}, {"identifier": "predictResult", "parameters": "(Row row)", "modifiers": "@Override protected", "return": "Object", "signature": "Object predictResult(Row row)", "full_signature": "@Override protected Object predictResult(Row row)", "class_method_signature": "NaiveBayesTextModelMapper.predictResult(Row row)", "testcase": false, "constructor": false}, {"identifier": "predictResultDetail", "parameters": "(Row row)", "modifiers": "@Override protected", "return": "Tuple2<Object, String>", "signature": "Tuple2<Object, String> predictResultDetail(Row row)", "full_signature": "@Override protected Tuple2<Object, String> predictResultDetail(Row row)", "class_method_signature": "NaiveBayesTextModelMapper.predictResultDetail(Row row)", "testcase": false, "constructor": false}, {"identifier": "generateDetail", "parameters": "(double[] prob, double[] pi, Object[] labels)", "modifiers": "protected static", "return": "String", "signature": "String generateDetail(double[] prob, double[] pi, Object[] labels)", "full_signature": "protected static String generateDetail(double[] prob, double[] pi, Object[] labels)", "class_method_signature": "NaiveBayesTextModelMapper.generateDetail(double[] prob, double[] pi, Object[] labels)", "testcase": false, "constructor": false}, {"identifier": "findMaxProbLabel", "parameters": "(double[] prob, Object[] label)", "modifiers": "protected static", "return": "Object", "signature": "Object findMaxProbLabel(double[] prob, Object[] label)", "full_signature": "protected static Object findMaxProbLabel(double[] prob, Object[] label)", "class_method_signature": "NaiveBayesTextModelMapper.findMaxProbLabel(double[] prob, Object[] label)", "testcase": false, "constructor": false}, {"identifier": "calculateProb", "parameters": "(Row row)", "modifiers": "private", "return": "double[]", "signature": "double[] calculateProb(Row row)", "full_signature": "private double[] calculateProb(Row row)", "class_method_signature": "NaiveBayesTextModelMapper.calculateProb(Row row)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/classification/NaiveBayesTextModelMapper.java"}, "focal_method": {"identifier": "loadModel", "parameters": "(List<Row> modelRows)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void loadModel(List<Row> modelRows) {\n        modelData = new NaiveBayesTextModelDataConverter().load(modelRows); }", "signature": "void loadModel(List<Row> modelRows)", "full_signature": "@Override public void loadModel(List<Row> modelRows)", "class_method_signature": "NaiveBayesTextModelMapper.loadModel(List<Row> modelRows)", "testcase": false, "constructor": false, "invocations": ["load"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}