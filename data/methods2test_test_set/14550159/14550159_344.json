{"test_class": {"identifier": "MapMultipartFormDataMessageBodyReaderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private Providers                             providers;", "modifier": "private", "type": "Providers", "declarator": "providers", "var_name": "providers"}, {"original_string": "private MapMultipartFormDataMessageBodyReader mapMultipartFormDataMessageBodyReader;", "modifier": "private", "type": "MapMultipartFormDataMessageBodyReader", "declarator": "mapMultipartFormDataMessageBodyReader", "var_name": "mapMultipartFormDataMessageBodyReader"}], "file": "everrest-core/src/test/java/org/everrest/core/impl/provider/multipart/MapMultipartFormDataMessageBodyReaderTest.java"}, "test_case": {"identifier": "readsMapOfInputItems", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void readsMapOfInputItems() throws Exception {\n        Class type = Map.class;\n        ParameterizedType genericType = newParameterizedType(Map.class, String.class, InputItem.class);\n        Annotation[] annotations = new Annotation[0];\n        MediaType mediaType = MULTIPART_FORM_DATA_TYPE;\n        MultivaluedMap<String, String> headers = new MultivaluedHashMap<>();\n        InputStream in = mock(InputStream.class);\n\n        FileItem fileItem = createFileItem(\"fileItem1\");\n        MessageBodyReader fileItemReader = createFileItemMessageBodyReader(annotations, mediaType, headers, in, fileItem);\n        when(providers.getMessageBodyReader(eq(Iterator.class), eq(newParameterizedType(Iterator.class, FileItem.class)), aryEq(annotations), eq(mediaType)))\n                .thenReturn(fileItemReader);\n\n        Map<String, InputItem> inputItems = mapMultipartFormDataMessageBodyReader.readFrom(type, genericType, annotations, mediaType, headers, in);\n        assertEquals(1, inputItems.size());\n        assertEquals(fileItem.getFieldName(), inputItems.get(fileItem.getFieldName()).getName());\n    }", "signature": "void readsMapOfInputItems()", "full_signature": "@Test public void readsMapOfInputItems()", "class_method_signature": "MapMultipartFormDataMessageBodyReaderTest.readsMapOfInputItems()", "testcase": true, "constructor": false, "invocations": ["newParameterizedType", "mock", "createFileItem", "createFileItemMessageBodyReader", "thenReturn", "when", "getMessageBodyReader", "eq", "eq", "newParameterizedType", "aryEq", "eq", "readFrom", "assertEquals", "size", "assertEquals", "getFieldName", "getName", "get", "getFieldName"]}, "focal_class": {"identifier": "MapMultipartFormDataMessageBodyReader", "superclass": "", "interfaces": "implements MessageBodyReader<Map<String, InputItem>>", "fields": [{"original_string": "private final Providers providers;", "modifier": "private final", "type": "Providers", "declarator": "providers", "var_name": "providers"}], "methods": [{"identifier": "MapMultipartFormDataMessageBodyReader", "parameters": "(@Context Providers providers)", "modifiers": "public", "return": "", "signature": " MapMultipartFormDataMessageBodyReader(@Context Providers providers)", "full_signature": "public  MapMultipartFormDataMessageBodyReader(@Context Providers providers)", "class_method_signature": "MapMultipartFormDataMessageBodyReader.MapMultipartFormDataMessageBodyReader(@Context Providers providers)", "testcase": false, "constructor": true}, {"identifier": "isReadable", "parameters": "(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "full_signature": "@Override public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "class_method_signature": "MapMultipartFormDataMessageBodyReader.isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)", "testcase": false, "constructor": false}, {"identifier": "readFrom", "parameters": "(Class<Map<String, InputItem>> type, Type genericType, Annotation[] annotations,\n                                           MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "modifiers": "@Override public", "return": "Map<String, InputItem>", "signature": "Map<String, InputItem> readFrom(Class<Map<String, InputItem>> type, Type genericType, Annotation[] annotations,\n                                           MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "full_signature": "@Override public Map<String, InputItem> readFrom(Class<Map<String, InputItem>> type, Type genericType, Annotation[] annotations,\n                                           MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "class_method_signature": "MapMultipartFormDataMessageBodyReader.readFrom(Class<Map<String, InputItem>> type, Type genericType, Annotation[] annotations,\n                                           MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "testcase": false, "constructor": false}], "file": "everrest-core/src/main/java/org/everrest/core/impl/provider/multipart/MapMultipartFormDataMessageBodyReader.java"}, "focal_method": {"identifier": "readFrom", "parameters": "(Class<Map<String, InputItem>> type, Type genericType, Annotation[] annotations,\n                                           MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "modifiers": "@Override public", "return": "Map<String, InputItem>", "body": "@Override\n    public Map<String, InputItem> readFrom(Class<Map<String, InputItem>> type, Type genericType, Annotation[] annotations,\n                                           MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream)\n            throws IOException, WebApplicationException {\n        final Type genericSuperclass = ParameterizedTypeImpl.newParameterizedType(Iterator.class, FileItem.class);\n        final MessageBodyReader<Iterator> multipartReader =\n                providers.getMessageBodyReader(Iterator.class, genericSuperclass, annotations, mediaType);\n        final Iterator iterator =\n                multipartReader.readFrom(Iterator.class, genericSuperclass, annotations, mediaType, httpHeaders, entityStream);\n        final Map<String, InputItem> result = new LinkedHashMap<>();\n        while (iterator.hasNext()) {\n            final DefaultInputItem item = new DefaultInputItem((FileItem)iterator.next(), providers);\n            result.put(item.getName(), item);\n        }\n        return result;\n    }", "signature": "Map<String, InputItem> readFrom(Class<Map<String, InputItem>> type, Type genericType, Annotation[] annotations,\n                                           MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "full_signature": "@Override public Map<String, InputItem> readFrom(Class<Map<String, InputItem>> type, Type genericType, Annotation[] annotations,\n                                           MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "class_method_signature": "MapMultipartFormDataMessageBodyReader.readFrom(Class<Map<String, InputItem>> type, Type genericType, Annotation[] annotations,\n                                           MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream)", "testcase": false, "constructor": false, "invocations": ["newParameterizedType", "getMessageBodyReader", "readFrom", "hasNext", "next", "put", "getName"]}, "repository": {"repo_id": 14550159, "url": "https://github.com/codenvy/everrest", "language": "Java", "is_fork": false, "fork_count": 14, "stargazer_count": 24, "size": 4563, "license": "licensed"}}