{"test_class": {"identifier": "RuleSheetParserUtilTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-decisiontables/src/test/java/org/drools/decisiontable/parser/RuleSheetParserUtilTest.java"}, "test_case": {"identifier": "testIsStringMeaningTrue", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testIsStringMeaningTrue() {\n        assertTrue( RuleSheetParserUtil.isStringMeaningTrue( \"true\" ) );\n        assertTrue( RuleSheetParserUtil.isStringMeaningTrue( \"TRUE\" ) );\n        assertTrue( RuleSheetParserUtil.isStringMeaningTrue( \"yes\" ) );\n        assertTrue( RuleSheetParserUtil.isStringMeaningTrue( \"oN\" ) );\n\n        assertFalse( RuleSheetParserUtil.isStringMeaningTrue( \"no\" ) );\n        assertFalse( RuleSheetParserUtil.isStringMeaningTrue( \"false\" ) );\n        assertFalse( RuleSheetParserUtil.isStringMeaningTrue( null ) );\n    }", "signature": "void testIsStringMeaningTrue()", "full_signature": "@Test public void testIsStringMeaningTrue()", "class_method_signature": "RuleSheetParserUtilTest.testIsStringMeaningTrue()", "testcase": true, "constructor": false, "invocations": ["assertTrue", "isStringMeaningTrue", "assertTrue", "isStringMeaningTrue", "assertTrue", "isStringMeaningTrue", "assertTrue", "isStringMeaningTrue", "assertFalse", "isStringMeaningTrue", "assertFalse", "isStringMeaningTrue", "assertFalse", "isStringMeaningTrue"]}, "focal_class": {"identifier": "RuleSheetParserUtil", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "RuleSheetParserUtil", "parameters": "()", "modifiers": "private", "return": "", "signature": " RuleSheetParserUtil()", "full_signature": "private  RuleSheetParserUtil()", "class_method_signature": "RuleSheetParserUtil.RuleSheetParserUtil()", "testcase": false, "constructor": true}, {"identifier": "getRuleName", "parameters": "(final String ruleRow)", "modifiers": "public static", "return": "String", "signature": "String getRuleName(final String ruleRow)", "full_signature": "public static String getRuleName(final String ruleRow)", "class_method_signature": "RuleSheetParserUtil.getRuleName(final String ruleRow)", "testcase": false, "constructor": false}, {"identifier": "invalidRuleTableDef", "parameters": "(final String ruleRow)", "modifiers": "private static", "return": "void", "signature": "void invalidRuleTableDef(final String ruleRow)", "full_signature": "private static void invalidRuleTableDef(final String ruleRow)", "class_method_signature": "RuleSheetParserUtil.invalidRuleTableDef(final String ruleRow)", "testcase": false, "constructor": false}, {"identifier": "getImportList", "parameters": "(final List<String> importCells)", "modifiers": "public static", "return": "List<Import>", "signature": "List<Import> getImportList(final List<String> importCells)", "full_signature": "public static List<Import> getImportList(final List<String> importCells)", "class_method_signature": "RuleSheetParserUtil.getImportList(final List<String> importCells)", "testcase": false, "constructor": false}, {"identifier": "getVariableList", "parameters": "( final List<String> variableCells )", "modifiers": "public static", "return": "List<Global>", "signature": "List<Global> getVariableList( final List<String> variableCells )", "full_signature": "public static List<Global> getVariableList( final List<String> variableCells )", "class_method_signature": "RuleSheetParserUtil.getVariableList( final List<String> variableCells )", "testcase": false, "constructor": false}, {"identifier": "isStringMeaningTrue", "parameters": "(String property)", "modifiers": "public static", "return": "boolean", "signature": "boolean isStringMeaningTrue(String property)", "full_signature": "public static boolean isStringMeaningTrue(String property)", "class_method_signature": "RuleSheetParserUtil.isStringMeaningTrue(String property)", "testcase": false, "constructor": false}, {"identifier": "rc2name", "parameters": "( int row, int col )", "modifiers": "public static", "return": "String", "signature": "String rc2name( int row, int col )", "full_signature": "public static String rc2name( int row, int col )", "class_method_signature": "RuleSheetParserUtil.rc2name( int row, int col )", "testcase": false, "constructor": false}], "file": "drools-decisiontables/src/main/java/org/drools/decisiontable/parser/RuleSheetParserUtil.java"}, "focal_method": {"identifier": "isStringMeaningTrue", "parameters": "(String property)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isStringMeaningTrue(String property) {\n        if ( property == null ) {\n            return false;\n        } else {\n            property = property.trim();\n            if ( property.equalsIgnoreCase( \"true\" ) ) {\n                return true;\n            } else if ( property.startsWith( \"Y\" ) ) {\n                return true;\n            } else if ( property.startsWith( \"y\" ) ) {\n                return true;\n            } else if ( property.equalsIgnoreCase( \"on\" ) ) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }", "signature": "boolean isStringMeaningTrue(String property)", "full_signature": "public static boolean isStringMeaningTrue(String property)", "class_method_signature": "RuleSheetParserUtil.isStringMeaningTrue(String property)", "testcase": false, "constructor": false, "invocations": ["trim", "equalsIgnoreCase", "startsWith", "startsWith", "equalsIgnoreCase"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}