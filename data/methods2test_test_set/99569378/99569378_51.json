{"test_class": {"identifier": "ExecutorActorThreadTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n    private Executor mExecutor;", "modifier": "@Mock\n    private", "type": "Executor", "declarator": "mExecutor", "var_name": "mExecutor"}, {"original_string": "@Mock\n    private ProxyFactory mProxyFactory;", "modifier": "@Mock\n    private", "type": "ProxyFactory", "declarator": "mProxyFactory", "var_name": "mProxyFactory"}, {"original_string": "@Mock\n    private FailureHandler mFailureHandler;", "modifier": "@Mock\n    private", "type": "FailureHandler", "declarator": "mFailureHandler", "var_name": "mFailureHandler"}, {"original_string": "@Mock\n    private Runnable mActorImpl;", "modifier": "@Mock\n    private", "type": "Runnable", "declarator": "mActorImpl", "var_name": "mActorImpl"}, {"original_string": "@Mock\n    private Runnable mProxy;", "modifier": "@Mock\n    private", "type": "Runnable", "declarator": "mProxy", "var_name": "mProxy"}, {"original_string": "private ExecutorActorThread mThread;", "modifier": "private", "type": "ExecutorActorThread", "declarator": "mThread", "var_name": "mThread"}], "file": "actors-library/src/test/java/com/truecaller/androidactors/ExecutorActorThreadTest.java"}, "test_case": {"identifier": "messageDeliverTest", "parameters": "()", "modifiers": "@SuppressWarnings(\"unchecked\") @Test public", "return": "void", "body": "@SuppressWarnings(\"unchecked\")\n    @Test\n    public void messageDeliverTest() throws Exception {\n        ActorRef<Runnable> runnableRef = mThread.bind(Runnable.class, mActorImpl);\n        // Check that we provided correct proxy class\n        Assert.assertSame(mProxy, runnableRef.tell());\n        // Grab postman and check it\n        ArgumentCaptor<MessageSender> postmanCaptor = ArgumentCaptor.forClass(MessageSender.class);\n        Mockito.verify(mProxyFactory).newProxy(Mockito.<Class>any(), postmanCaptor.capture());\n\n        final Message message = Mockito.mock(Message.class);\n        final MessageSender postman = postmanCaptor.getValue();\n        postman.deliver(message);\n\n        ArgumentCaptor<Runnable> runnableCaptor = ArgumentCaptor.forClass(Runnable.class);\n        Mockito.verify(mExecutor).execute(runnableCaptor.capture());\n        Runnable runnable = runnableCaptor.getValue();\n        Assert.assertNotNull(runnable);\n\n        // Check that we tried to invoke method\n        runnable.run();\n\n        Mockito.verify(message).invoke(mActorImpl);\n    }", "signature": "void messageDeliverTest()", "full_signature": "@SuppressWarnings(\"unchecked\") @Test public void messageDeliverTest()", "class_method_signature": "ExecutorActorThreadTest.messageDeliverTest()", "testcase": true, "constructor": false, "invocations": ["bind", "assertSame", "tell", "forClass", "newProxy", "verify", "any", "capture", "mock", "getValue", "deliver", "forClass", "execute", "verify", "capture", "getValue", "assertNotNull", "run", "invoke", "verify"]}, "focal_class": {"identifier": "ExecutorActorThread", "superclass": "", "interfaces": "implements ActorThread", "fields": [{"original_string": "@NonNull\n    private final Executor mExecutor;", "modifier": "@NonNull\n    private final", "type": "Executor", "declarator": "mExecutor", "var_name": "mExecutor"}, {"original_string": "@NonNull\n    private final ProxyFactory mProxyFactory;", "modifier": "@NonNull\n    private final", "type": "ProxyFactory", "declarator": "mProxyFactory", "var_name": "mProxyFactory"}, {"original_string": "@NonNull\n    private final FailureHandler mFailureHandler;", "modifier": "@NonNull\n    private final", "type": "FailureHandler", "declarator": "mFailureHandler", "var_name": "mFailureHandler"}], "methods": [{"identifier": "ExecutorActorThread", "parameters": "(@NonNull Executor executor, @NonNull ProxyFactory proxyFactory,\n                                      @NonNull FailureHandler failureHandler)", "modifiers": "", "return": "", "signature": " ExecutorActorThread(@NonNull Executor executor, @NonNull ProxyFactory proxyFactory,\n                                      @NonNull FailureHandler failureHandler)", "full_signature": "  ExecutorActorThread(@NonNull Executor executor, @NonNull ProxyFactory proxyFactory,\n                                      @NonNull FailureHandler failureHandler)", "class_method_signature": "ExecutorActorThread.ExecutorActorThread(@NonNull Executor executor, @NonNull ProxyFactory proxyFactory,\n                                      @NonNull FailureHandler failureHandler)", "testcase": false, "constructor": true}, {"identifier": "bind", "parameters": "(@NonNull Class<T> cls, @NonNull T impl)", "modifiers": "@NonNull @Override public", "return": "ActorRef<T>", "signature": "ActorRef<T> bind(@NonNull Class<T> cls, @NonNull T impl)", "full_signature": "@NonNull @Override public ActorRef<T> bind(@NonNull Class<T> cls, @NonNull T impl)", "class_method_signature": "ExecutorActorThread.bind(@NonNull Class<T> cls, @NonNull T impl)", "testcase": false, "constructor": false}], "file": "actors-library/src/main/java/com/truecaller/androidactors/ExecutorActorThread.java"}, "focal_method": {"identifier": "bind", "parameters": "(@NonNull Class<T> cls, @NonNull T impl)", "modifiers": "@NonNull @Override public", "return": "ActorRef<T>", "body": "@NonNull\n    @Override\n    public <T> ActorRef<T> bind(@NonNull Class<T> cls, @NonNull T impl) {\n        MessageSenderProxy<T> postman = new MessageSenderProxy<>(impl, mExecutor, mFailureHandler);\n        T instance = mProxyFactory.newProxy(cls, postman);\n        return new ActorRefImpl<>(instance);\n    }", "signature": "ActorRef<T> bind(@NonNull Class<T> cls, @NonNull T impl)", "full_signature": "@NonNull @Override public ActorRef<T> bind(@NonNull Class<T> cls, @NonNull T impl)", "class_method_signature": "ExecutorActorThread.bind(@NonNull Class<T> cls, @NonNull T impl)", "testcase": false, "constructor": false, "invocations": ["newProxy"]}, "repository": {"repo_id": 99569378, "url": "https://github.com/truecaller/android-actors-library", "language": "Java", "is_fork": false, "fork_count": 2, "stargazer_count": 20, "size": 352, "license": "licensed"}}