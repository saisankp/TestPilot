{"test_class": {"identifier": "ConsequenceTest", "superclass": "", "interfaces": "", "fields": [], "file": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/builder/generator/ConsequenceTest.java"}, "test_case": {"identifier": "containsWordTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void containsWordTest() throws Exception {\n        assertFalse(containsWord(\"$cheesery\", \"results.add($cheeseryResult);\\n\"));\n        assertTrue(containsWord(\"$cheeseryResult\", \"results.add($cheeseryResult);\\n\"));\n        assertFalse(containsWord(\"cheesery\", \"results.add($cheesery);\\n\"));\n    }", "signature": "void containsWordTest()", "full_signature": "@Test public void containsWordTest()", "class_method_signature": "ConsequenceTest.containsWordTest()", "testcase": true, "constructor": false, "invocations": ["assertFalse", "containsWord", "assertTrue", "containsWord", "assertFalse", "containsWord"]}, "focal_class": {"identifier": "Consequence", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final Set<String> knowledgeHelperMethods = new HashSet<>();", "modifier": "public static final", "type": "Set<String>", "declarator": "knowledgeHelperMethods = new HashSet<>()", "var_name": "knowledgeHelperMethods"}, {"original_string": "public static final Set<String> implicitDroolsMethods = new HashSet<>();", "modifier": "public static final", "type": "Set<String>", "declarator": "implicitDroolsMethods = new HashSet<>()", "var_name": "implicitDroolsMethods"}, {"original_string": "private final RuleContext context;", "modifier": "private final", "type": "RuleContext", "declarator": "context", "var_name": "context"}, {"original_string": "private final PackageModel packageModel;", "modifier": "private final", "type": "PackageModel", "declarator": "packageModel", "var_name": "packageModel"}], "methods": [{"identifier": "createAsKnowledgeHelperExpression", "parameters": "()", "modifiers": "private", "return": "Expression", "signature": "Expression createAsKnowledgeHelperExpression()", "full_signature": "private Expression createAsKnowledgeHelperExpression()", "class_method_signature": "Consequence.createAsKnowledgeHelperExpression()", "testcase": false, "constructor": false}, {"identifier": "Consequence", "parameters": "(RuleContext context)", "modifiers": "public", "return": "", "signature": " Consequence(RuleContext context)", "full_signature": "public  Consequence(RuleContext context)", "class_method_signature": "Consequence.Consequence(RuleContext context)", "testcase": false, "constructor": true}, {"identifier": "createCall", "parameters": "(RuleDescr ruleDescr, String consequenceString, BlockStmt ruleVariablesBlock, boolean isBreaking)", "modifiers": "public", "return": "MethodCallExpr", "signature": "MethodCallExpr createCall(RuleDescr ruleDescr, String consequenceString, BlockStmt ruleVariablesBlock, boolean isBreaking)", "full_signature": "public MethodCallExpr createCall(RuleDescr ruleDescr, String consequenceString, BlockStmt ruleVariablesBlock, boolean isBreaking)", "class_method_signature": "Consequence.createCall(RuleDescr ruleDescr, String consequenceString, BlockStmt ruleVariablesBlock, boolean isBreaking)", "testcase": false, "constructor": false}, {"identifier": "rewriteReassignedDeclrations", "parameters": "( BlockStmt ruleConsequence, Set<String> usedDeclarationInRHS )", "modifiers": "private", "return": "void", "signature": "void rewriteReassignedDeclrations( BlockStmt ruleConsequence, Set<String> usedDeclarationInRHS )", "full_signature": "private void rewriteReassignedDeclrations( BlockStmt ruleConsequence, Set<String> usedDeclarationInRHS )", "class_method_signature": "Consequence.rewriteReassignedDeclrations( BlockStmt ruleConsequence, Set<String> usedDeclarationInRHS )", "testcase": false, "constructor": false}, {"identifier": "createExecuteCallMvel", "parameters": "(RuleDescr ruleDescr, BlockStmt ruleVariablesBlock, Set<String> usedDeclarationInRHS, MethodCallExpr onCall)", "modifiers": "private", "return": "MethodCallExpr", "signature": "MethodCallExpr createExecuteCallMvel(RuleDescr ruleDescr, BlockStmt ruleVariablesBlock, Set<String> usedDeclarationInRHS, MethodCallExpr onCall)", "full_signature": "private MethodCallExpr createExecuteCallMvel(RuleDescr ruleDescr, BlockStmt ruleVariablesBlock, Set<String> usedDeclarationInRHS, MethodCallExpr onCall)", "class_method_signature": "Consequence.createExecuteCallMvel(RuleDescr ruleDescr, BlockStmt ruleVariablesBlock, Set<String> usedDeclarationInRHS, MethodCallExpr onCall)", "testcase": false, "constructor": false}, {"identifier": "rewriteConsequence", "parameters": "(String consequence)", "modifiers": "private", "return": "BlockStmt", "signature": "BlockStmt rewriteConsequence(String consequence)", "full_signature": "private BlockStmt rewriteConsequence(String consequence)", "class_method_signature": "Consequence.rewriteConsequence(String consequence)", "testcase": false, "constructor": false}, {"identifier": "rewriteChannels", "parameters": "(BlockStmt consequence)", "modifiers": "private", "return": "void", "signature": "void rewriteChannels(BlockStmt consequence)", "full_signature": "private void rewriteChannels(BlockStmt consequence)", "class_method_signature": "Consequence.rewriteChannels(BlockStmt consequence)", "testcase": false, "constructor": false}, {"identifier": "extractUsedDeclarations", "parameters": "(BlockStmt ruleConsequence, String consequenceString)", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> extractUsedDeclarations(BlockStmt ruleConsequence, String consequenceString)", "full_signature": "private Set<String> extractUsedDeclarations(BlockStmt ruleConsequence, String consequenceString)", "class_method_signature": "Consequence.extractUsedDeclarations(BlockStmt ruleConsequence, String consequenceString)", "testcase": false, "constructor": false}, {"identifier": "containsWord", "parameters": "(String word, String body)", "modifiers": "public static", "return": "boolean", "signature": "boolean containsWord(String word, String body)", "full_signature": "public static boolean containsWord(String word, String body)", "class_method_signature": "Consequence.containsWord(String word, String body)", "testcase": false, "constructor": false}, {"identifier": "executeCall", "parameters": "(BlockStmt ruleVariablesBlock, BlockStmt ruleConsequence, Collection<String> verifiedDeclUsedInRHS, MethodCallExpr onCall, Set<String> modifyProperties)", "modifiers": "private", "return": "MethodCallExpr", "signature": "MethodCallExpr executeCall(BlockStmt ruleVariablesBlock, BlockStmt ruleConsequence, Collection<String> verifiedDeclUsedInRHS, MethodCallExpr onCall, Set<String> modifyProperties)", "full_signature": "private MethodCallExpr executeCall(BlockStmt ruleVariablesBlock, BlockStmt ruleConsequence, Collection<String> verifiedDeclUsedInRHS, MethodCallExpr onCall, Set<String> modifyProperties)", "class_method_signature": "Consequence.executeCall(BlockStmt ruleVariablesBlock, BlockStmt ruleConsequence, Collection<String> verifiedDeclUsedInRHS, MethodCallExpr onCall, Set<String> modifyProperties)", "testcase": false, "constructor": false}, {"identifier": "onCall", "parameters": "(Collection<String> usedArguments)", "modifiers": "private", "return": "MethodCallExpr", "signature": "MethodCallExpr onCall(Collection<String> usedArguments)", "full_signature": "private MethodCallExpr onCall(Collection<String> usedArguments)", "class_method_signature": "Consequence.onCall(Collection<String> usedArguments)", "testcase": false, "constructor": false}, {"identifier": "rewriteModifyBlock", "parameters": "(String consequence)", "modifiers": "private", "return": "String", "signature": "String rewriteModifyBlock(String consequence)", "full_signature": "private String rewriteModifyBlock(String consequence)", "class_method_signature": "Consequence.rewriteModifyBlock(String consequence)", "testcase": false, "constructor": false}, {"identifier": "rewriteRHS", "parameters": "(BlockStmt ruleBlock, BlockStmt rhs)", "modifiers": "private", "return": "boolean", "signature": "boolean rewriteRHS(BlockStmt ruleBlock, BlockStmt rhs)", "full_signature": "private boolean rewriteRHS(BlockStmt ruleBlock, BlockStmt rhs)", "class_method_signature": "Consequence.rewriteRHS(BlockStmt ruleBlock, BlockStmt rhs)", "testcase": false, "constructor": false}, {"identifier": "findUpdatedClass", "parameters": "( Map<String, String> newDeclarations, String updatedVar )", "modifiers": "private", "return": "Class<?>", "signature": "Class<?> findUpdatedClass( Map<String, String> newDeclarations, String updatedVar )", "full_signature": "private Class<?> findUpdatedClass( Map<String, String> newDeclarations, String updatedVar )", "class_method_signature": "Consequence.findUpdatedClass( Map<String, String> newDeclarations, String updatedVar )", "testcase": false, "constructor": false}, {"identifier": "createBitMaskInitialization", "parameters": "(Class<?> updatedClass, Set<String> modifiedProps)", "modifiers": "private", "return": "MethodCallExpr", "signature": "MethodCallExpr createBitMaskInitialization(Class<?> updatedClass, Set<String> modifiedProps)", "full_signature": "private MethodCallExpr createBitMaskInitialization(Class<?> updatedClass, Set<String> modifiedProps)", "class_method_signature": "Consequence.createBitMaskInitialization(Class<?> updatedClass, Set<String> modifiedProps)", "testcase": false, "constructor": false}, {"identifier": "createBitMaskField", "parameters": "(String updatedVar, MethodCallExpr bitMaskCreation)", "modifiers": "private", "return": "AssignExpr", "signature": "AssignExpr createBitMaskField(String updatedVar, MethodCallExpr bitMaskCreation)", "full_signature": "private AssignExpr createBitMaskField(String updatedVar, MethodCallExpr bitMaskCreation)", "class_method_signature": "Consequence.createBitMaskField(String updatedVar, MethodCallExpr bitMaskCreation)", "testcase": false, "constructor": false}, {"identifier": "findModifiedProperties", "parameters": "( List<MethodCallExpr> methodCallExprs, MethodCallExpr updateExpr, String updatedVar )", "modifiers": "private", "return": "Set<String>", "signature": "Set<String> findModifiedProperties( List<MethodCallExpr> methodCallExprs, MethodCallExpr updateExpr, String updatedVar )", "full_signature": "private Set<String> findModifiedProperties( List<MethodCallExpr> methodCallExprs, MethodCallExpr updateExpr, String updatedVar )", "class_method_signature": "Consequence.findModifiedProperties( List<MethodCallExpr> methodCallExprs, MethodCallExpr updateExpr, String updatedVar )", "testcase": false, "constructor": false}, {"identifier": "isDirectExpression", "parameters": "(MethodCallExpr methodCall)", "modifiers": "private", "return": "boolean", "signature": "boolean isDirectExpression(MethodCallExpr methodCall)", "full_signature": "private boolean isDirectExpression(MethodCallExpr methodCall)", "class_method_signature": "Consequence.isDirectExpression(MethodCallExpr methodCall)", "testcase": false, "constructor": false}, {"identifier": "hasDroolsAsParameter", "parameters": "( MethodCallExpr mce )", "modifiers": "private static", "return": "boolean", "signature": "boolean hasDroolsAsParameter( MethodCallExpr mce )", "full_signature": "private static boolean hasDroolsAsParameter( MethodCallExpr mce )", "class_method_signature": "Consequence.hasDroolsAsParameter( MethodCallExpr mce )", "testcase": false, "constructor": false}, {"identifier": "hasDroolsScope", "parameters": "( MethodCallExpr mce )", "modifiers": "private static", "return": "boolean", "signature": "boolean hasDroolsScope( MethodCallExpr mce )", "full_signature": "private static boolean hasDroolsScope( MethodCallExpr mce )", "class_method_signature": "Consequence.hasDroolsScope( MethodCallExpr mce )", "testcase": false, "constructor": false}, {"identifier": "isImplicitDroolsMethod", "parameters": "( MethodCallExpr mce )", "modifiers": "private static", "return": "boolean", "signature": "boolean isImplicitDroolsMethod( MethodCallExpr mce )", "full_signature": "private static boolean isImplicitDroolsMethod( MethodCallExpr mce )", "class_method_signature": "Consequence.isImplicitDroolsMethod( MethodCallExpr mce )", "testcase": false, "constructor": false}], "file": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/Consequence.java"}, "focal_method": {"identifier": "containsWord", "parameters": "(String word, String body)", "modifiers": "public static", "return": "boolean", "body": "public static boolean containsWord(String word, String body) {\n        // $ is quite a common character for a drools binding but it's not considered a word for the regexp engine\n        // By converting to a character is easier to write the regexp\n        final String wordWithDollarReplaced = word.replace(\"$\", \"\u72ac\");\n        final String bodyWithDollarReplaced = body.replace(\"$\", \"\u72ac\");\n\n        Pattern p = Pattern.compile(\"\\\\b\" + wordWithDollarReplaced + \"\\\\b\");\n        Matcher m = p.matcher(bodyWithDollarReplaced);\n        return m.find();\n    }", "signature": "boolean containsWord(String word, String body)", "full_signature": "public static boolean containsWord(String word, String body)", "class_method_signature": "Consequence.containsWord(String word, String body)", "testcase": false, "constructor": false, "invocations": ["replace", "replace", "compile", "matcher", "find"]}, "repository": {"repo_id": 1381673, "url": "https://github.com/kiegroup/drools", "stars": 2733, "created": "2/18/2011 8:37:05 AM +00:00", "updates": "2020-01-27T13:12:15+00:00", "fork": "False", "license": "licensed"}}