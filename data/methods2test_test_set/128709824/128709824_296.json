{"test_class": {"identifier": "SimpleMapSerializerTest", "superclass": "", "interfaces": "", "fields": [], "file": "remoting/remoting-bolt/src/test/java/com/alipay/sofa/rpc/codec/bolt/SimpleMapSerializerTest.java"}, "test_case": {"identifier": "encode", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void encode() throws Exception {\n        SimpleMapSerializer simpleMapSerializer = new SimpleMapSerializer();\n        Map<String, String> map = null;\n        byte[] bs = simpleMapSerializer.encode(map);\n        Assert.assertEquals(bs, null);\n\n        map = new HashMap<String, String>();\n        bs = simpleMapSerializer.encode(map);\n        Assert.assertEquals(bs, null);\n\n        map.put(\"1\", \"2\");\n        map.put(\"\", \"x\");\n        map.put(\"a\", \"\");\n        map.put(\"b\", null);\n        bs = simpleMapSerializer.encode(map);\n        Assert.assertEquals(28, bs.length);\n\n        Map<String, String> map1 = simpleMapSerializer.decode(bs);\n        Assert.assertNotNull(map1);\n        Assert.assertEquals(3, map1.size());\n        Assert.assertEquals(\"2\", map1.get(\"1\"));\n        Assert.assertEquals(\"x\", map1.get(\"\"));\n        Assert.assertEquals(\"\", map1.get(\"a\"));\n        Assert.assertNull(map1.get(\"b\"));\n\n        map1 = simpleMapSerializer.decode(null);\n        Assert.assertNotNull(map1);\n        Assert.assertEquals(0, map1.size());\n\n        map1 = simpleMapSerializer.decode(new byte[0]);\n        Assert.assertNotNull(map1);\n        Assert.assertEquals(0, map1.size());\n    }", "signature": "void encode()", "full_signature": "@Test public void encode()", "class_method_signature": "SimpleMapSerializerTest.encode()", "testcase": true, "constructor": false, "invocations": ["encode", "assertEquals", "encode", "assertEquals", "put", "put", "put", "put", "encode", "assertEquals", "decode", "assertNotNull", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertNull", "get", "decode", "assertNotNull", "assertEquals", "size", "decode", "assertNotNull", "assertEquals", "size"]}, "focal_class": {"identifier": "SimpleMapSerializer", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "encode", "parameters": "(Map<String, String> map)", "modifiers": "public", "return": "byte[]", "signature": "byte[] encode(Map<String, String> map)", "full_signature": "public byte[] encode(Map<String, String> map)", "class_method_signature": "SimpleMapSerializer.encode(Map<String, String> map)", "testcase": false, "constructor": false}, {"identifier": "decode", "parameters": "(byte[] bytes)", "modifiers": "public", "return": "Map<String, String>", "signature": "Map<String, String> decode(byte[] bytes)", "full_signature": "public Map<String, String> decode(byte[] bytes)", "class_method_signature": "SimpleMapSerializer.decode(byte[] bytes)", "testcase": false, "constructor": false}, {"identifier": "writeString", "parameters": "(OutputStream out, String str)", "modifiers": "protected", "return": "void", "signature": "void writeString(OutputStream out, String str)", "full_signature": "protected void writeString(OutputStream out, String str)", "class_method_signature": "SimpleMapSerializer.writeString(OutputStream out, String str)", "testcase": false, "constructor": false}, {"identifier": "readString", "parameters": "(InputStream in)", "modifiers": "protected", "return": "String", "signature": "String readString(InputStream in)", "full_signature": "protected String readString(InputStream in)", "class_method_signature": "SimpleMapSerializer.readString(InputStream in)", "testcase": false, "constructor": false}, {"identifier": "writeInt", "parameters": "(OutputStream out, int i)", "modifiers": "private", "return": "void", "signature": "void writeInt(OutputStream out, int i)", "full_signature": "private void writeInt(OutputStream out, int i)", "class_method_signature": "SimpleMapSerializer.writeInt(OutputStream out, int i)", "testcase": false, "constructor": false}, {"identifier": "readInt", "parameters": "(InputStream in)", "modifiers": "public", "return": "int", "signature": "int readInt(InputStream in)", "full_signature": "public int readInt(InputStream in)", "class_method_signature": "SimpleMapSerializer.readInt(InputStream in)", "testcase": false, "constructor": false}], "file": "remoting/remoting-bolt/src/main/java/com/alipay/sofa/rpc/codec/bolt/SimpleMapSerializer.java"}, "focal_method": {"identifier": "encode", "parameters": "(Map<String, String> map)", "modifiers": "public", "return": "byte[]", "body": "public byte[] encode(Map<String, String> map) throws SerializationException {\n        if (map == null || map.isEmpty()) {\n            return null;\n        }\n        UnsafeByteArrayOutputStream out = new UnsafeByteArrayOutputStream(64);\n        try {\n            for (Map.Entry<String, String> entry : map.entrySet()) {\n                String key = entry.getKey();\n                String value = entry.getValue();\n                /**\n                 * \u6392\u9664\u4e0d\u5199null\u4f5c\u4e3akey\n                 */\n                if (key != null && value != null) {\n                    writeString(out, key);\n                    writeString(out, value);\n                }\n            }\n            return out.toByteArray();\n        } catch (IOException ex) {\n            throw new SerializationException(ex.getMessage(), ex);\n        }\n    }", "signature": "byte[] encode(Map<String, String> map)", "full_signature": "public byte[] encode(Map<String, String> map)", "class_method_signature": "SimpleMapSerializer.encode(Map<String, String> map)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "entrySet", "getKey", "getValue", "writeString", "writeString", "toByteArray", "getMessage"]}, "repository": {"repo_id": 128709824, "url": "https://github.com/sofastack/sofa-rpc", "stars": 3001, "created": "4/9/2018 3:32:04 AM +00:00", "updates": "2020-01-22T02:08:51+00:00", "fork": "False", "license": "licensed"}}