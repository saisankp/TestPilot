{"test_class": {"identifier": "ChildPathTest", "superclass": "extends AbstractPathTest", "interfaces": "", "fields": [{"original_string": "protected Path parent;", "modifier": "protected", "type": "Path", "declarator": "parent", "var_name": "parent"}, {"original_string": "protected Path root;", "modifier": "protected", "type": "Path", "declarator": "root", "var_name": "root"}, {"original_string": "protected Path.Segment childSegment;", "modifier": "protected", "type": "Path.Segment", "declarator": "childSegment", "var_name": "childSegment"}], "file": "modeshape-jcr/src/test/java/org/modeshape/jcr/value/basic/ChildPathTest.java"}, "test_case": {"identifier": "shouldConsiderParentNotBeDecendantOfChildPath", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void shouldConsiderParentNotBeDecendantOfChildPath() {\n        assertThat(parent.isDescendantOf(path), is(false));\n    }", "signature": "void shouldConsiderParentNotBeDecendantOfChildPath()", "full_signature": "@Test public void shouldConsiderParentNotBeDecendantOfChildPath()", "class_method_signature": "ChildPathTest.shouldConsiderParentNotBeDecendantOfChildPath()", "testcase": true, "constructor": false, "invocations": ["assertThat", "isDescendantOf", "is"]}, "focal_class": {"identifier": "ChildPath", "superclass": "extends AbstractPath", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = 1L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 1L", "var_name": "serialVersionUID"}, {"original_string": "private final Path parent;", "modifier": "private final", "type": "Path", "declarator": "parent", "var_name": "parent"}, {"original_string": "private final Path.Segment child;", "modifier": "private final", "type": "Path.Segment", "declarator": "child", "var_name": "child"}, {"original_string": "private final int size;", "modifier": "private final", "type": "int", "declarator": "size", "var_name": "size"}, {"original_string": "private transient List<Segment> cachedSegmentList;", "modifier": "private transient", "type": "List<Segment>", "declarator": "cachedSegmentList", "var_name": "cachedSegmentList"}], "methods": [{"identifier": "ChildPath", "parameters": "( Path parent,\n                      Path.Segment child )", "modifiers": "public", "return": "", "signature": " ChildPath( Path parent,\n                      Path.Segment child )", "full_signature": "public  ChildPath( Path parent,\n                      Path.Segment child )", "class_method_signature": "ChildPath.ChildPath( Path parent,\n                      Path.Segment child )", "testcase": false, "constructor": true}, {"identifier": "getAncestor", "parameters": "( int degree )", "modifiers": "@Override public", "return": "Path", "signature": "Path getAncestor( int degree )", "full_signature": "@Override public Path getAncestor( int degree )", "class_method_signature": "ChildPath.getAncestor( int degree )", "testcase": false, "constructor": false}, {"identifier": "getSegmentsOfParent", "parameters": "()", "modifiers": "@Override protected", "return": "Iterator<Segment>", "signature": "Iterator<Segment> getSegmentsOfParent()", "full_signature": "@Override protected Iterator<Segment> getSegmentsOfParent()", "class_method_signature": "ChildPath.getSegmentsOfParent()", "testcase": false, "constructor": false}, {"identifier": "getLastSegment", "parameters": "()", "modifiers": "@Override public", "return": "Segment", "signature": "Segment getLastSegment()", "full_signature": "@Override public Segment getLastSegment()", "class_method_signature": "ChildPath.getLastSegment()", "testcase": false, "constructor": false}, {"identifier": "getParent", "parameters": "()", "modifiers": "@Override public", "return": "Path", "signature": "Path getParent()", "full_signature": "@Override public Path getParent()", "class_method_signature": "ChildPath.getParent()", "testcase": false, "constructor": false}, {"identifier": "getSegment", "parameters": "( int index )", "modifiers": "@Override public", "return": "Segment", "signature": "Segment getSegment( int index )", "full_signature": "@Override public Segment getSegment( int index )", "class_method_signature": "ChildPath.getSegment( int index )", "testcase": false, "constructor": false}, {"identifier": "getSegmentsList", "parameters": "()", "modifiers": "@Override public", "return": "List<Segment>", "signature": "List<Segment> getSegmentsList()", "full_signature": "@Override public List<Segment> getSegmentsList()", "class_method_signature": "ChildPath.getSegmentsList()", "testcase": false, "constructor": false}, {"identifier": "hasSameAncestor", "parameters": "( Path that )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean hasSameAncestor( Path that )", "full_signature": "@Override public boolean hasSameAncestor( Path that )", "class_method_signature": "ChildPath.hasSameAncestor( Path that )", "testcase": false, "constructor": false}, {"identifier": "isAbsolute", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAbsolute()", "full_signature": "@Override public boolean isAbsolute()", "class_method_signature": "ChildPath.isAbsolute()", "testcase": false, "constructor": false}, {"identifier": "isAtOrBelow", "parameters": "( Path other )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isAtOrBelow( Path other )", "full_signature": "@Override public boolean isAtOrBelow( Path other )", "class_method_signature": "ChildPath.isAtOrBelow( Path other )", "testcase": false, "constructor": false}, {"identifier": "isDescendantOf", "parameters": "( Path ancestor )", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isDescendantOf( Path ancestor )", "full_signature": "@Override public boolean isDescendantOf( Path ancestor )", "class_method_signature": "ChildPath.isDescendantOf( Path ancestor )", "testcase": false, "constructor": false}, {"identifier": "isNormalized", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isNormalized()", "full_signature": "@Override public boolean isNormalized()", "class_method_signature": "ChildPath.isNormalized()", "testcase": false, "constructor": false}, {"identifier": "isRoot", "parameters": "()", "modifiers": "@Override public", "return": "boolean", "signature": "boolean isRoot()", "full_signature": "@Override public boolean isRoot()", "class_method_signature": "ChildPath.isRoot()", "testcase": false, "constructor": false}, {"identifier": "iterator", "parameters": "()", "modifiers": "@Override @SuppressWarnings( \"synthetic-access\" ) public", "return": "Iterator<Segment>", "signature": "Iterator<Segment> iterator()", "full_signature": "@Override @SuppressWarnings( \"synthetic-access\" ) public Iterator<Segment> iterator()", "class_method_signature": "ChildPath.iterator()", "testcase": false, "constructor": false}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "ChildPath.size()", "testcase": false, "constructor": false}, {"identifier": "subpath", "parameters": "( int beginIndex,\n                         int endIndex )", "modifiers": "@Override public", "return": "Path", "signature": "Path subpath( int beginIndex,\n                         int endIndex )", "full_signature": "@Override public Path subpath( int beginIndex,\n                         int endIndex )", "class_method_signature": "ChildPath.subpath( int beginIndex,\n                         int endIndex )", "testcase": false, "constructor": false}], "file": "modeshape-jcr/src/main/java/org/modeshape/jcr/value/basic/ChildPath.java"}, "focal_method": {"identifier": "isDescendantOf", "parameters": "( Path ancestor )", "modifiers": "@Override public", "return": "boolean", "body": "@Override\n    public boolean isDescendantOf( Path ancestor ) {\n        if (parent == ancestor) return true; // same instance\n        return parent.isAtOrBelow(ancestor);\n    }", "signature": "boolean isDescendantOf( Path ancestor )", "full_signature": "@Override public boolean isDescendantOf( Path ancestor )", "class_method_signature": "ChildPath.isDescendantOf( Path ancestor )", "testcase": false, "constructor": false, "invocations": ["isAtOrBelow"]}, "repository": {"repo_id": 1244027, "url": "https://github.com/ModeShape/modeshape", "language": "Java", "is_fork": false, "fork_count": 213, "stargazer_count": 208, "size": 134266, "license": "licensed"}}