{"test_class": {"identifier": "NCXDocumentTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "byte[] ncxData;", "modifier": "", "type": "byte[]", "declarator": "ncxData", "var_name": "ncxData"}], "file": "epublib-core/src/test/java/nl/siegmann/epublib/epub/NCXDocumentTest.java"}, "test_case": {"identifier": "testReadWithNonRootLevelTOC", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testReadWithNonRootLevelTOC() {\n        \n        // If the tox.ncx file is not in the root, the hrefs it refers to need to preserve its path.\n        Book book = new Book();\n        Resource ncxResource = new Resource(ncxData, \"xhtml/toc.ncx\");\n        Resource chapterResource = new Resource(\"id1\", \"Hello, world !\".getBytes(), \"xhtml/chapter1.html\", MediatypeService.XHTML);\n        book.addResource(chapterResource);\n        book.getSpine().addResource(chapterResource);\n\n        book.setNcxResource(ncxResource);\n        book.getSpine().setTocResource(ncxResource);\n\n        NCXDocument.read(book, new EpubReader());\n        assertEquals(\"xhtml/chapter1.html\", book.getTableOfContents().getTocReferences().get(0).getCompleteHref());\n    }", "signature": "void testReadWithNonRootLevelTOC()", "full_signature": "@Test public void testReadWithNonRootLevelTOC()", "class_method_signature": "NCXDocumentTest.testReadWithNonRootLevelTOC()", "testcase": true, "constructor": false, "invocations": ["getBytes", "addResource", "addResource", "getSpine", "setNcxResource", "setTocResource", "getSpine", "read", "assertEquals", "getCompleteHref", "get", "getTocReferences", "getTableOfContents"]}, "focal_class": {"identifier": "NCXDocument", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String NAMESPACE_NCX = \"http://www.daisy.org/z3986/2005/ncx/\";", "modifier": "public static final", "type": "String", "declarator": "NAMESPACE_NCX = \"http://www.daisy.org/z3986/2005/ncx/\"", "var_name": "NAMESPACE_NCX"}, {"original_string": "public static final String PREFIX_NCX = \"ncx\";", "modifier": "public static final", "type": "String", "declarator": "PREFIX_NCX = \"ncx\"", "var_name": "PREFIX_NCX"}, {"original_string": "public static final String NCX_ITEM_ID = \"ncx\";", "modifier": "public static final", "type": "String", "declarator": "NCX_ITEM_ID = \"ncx\"", "var_name": "NCX_ITEM_ID"}, {"original_string": "public static final String DEFAULT_NCX_HREF = \"toc.ncx\";", "modifier": "public static final", "type": "String", "declarator": "DEFAULT_NCX_HREF = \"toc.ncx\"", "var_name": "DEFAULT_NCX_HREF"}, {"original_string": "public static final String PREFIX_DTB = \"dtb\";", "modifier": "public static final", "type": "String", "declarator": "PREFIX_DTB = \"dtb\"", "var_name": "PREFIX_DTB"}, {"original_string": "private static final Logger log = LoggerFactory.getLogger(NCXDocument.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = LoggerFactory.getLogger(NCXDocument.class)", "var_name": "log"}], "methods": [{"identifier": "read", "parameters": "(Book book, EpubReader epubReader)", "modifiers": "public static", "return": "Resource", "signature": "Resource read(Book book, EpubReader epubReader)", "full_signature": "public static Resource read(Book book, EpubReader epubReader)", "class_method_signature": "NCXDocument.read(Book book, EpubReader epubReader)", "testcase": false, "constructor": false}, {"identifier": "readTOCReferences", "parameters": "(NodeList navpoints, Book book)", "modifiers": "private static", "return": "List<TOCReference>", "signature": "List<TOCReference> readTOCReferences(NodeList navpoints, Book book)", "full_signature": "private static List<TOCReference> readTOCReferences(NodeList navpoints, Book book)", "class_method_signature": "NCXDocument.readTOCReferences(NodeList navpoints, Book book)", "testcase": false, "constructor": false}, {"identifier": "readTOCReference", "parameters": "(Element navpointElement, Book book)", "modifiers": "private static", "return": "TOCReference", "signature": "TOCReference readTOCReference(Element navpointElement, Book book)", "full_signature": "private static TOCReference readTOCReference(Element navpointElement, Book book)", "class_method_signature": "NCXDocument.readTOCReference(Element navpointElement, Book book)", "testcase": false, "constructor": false}, {"identifier": "readNavReference", "parameters": "(Element navpointElement)", "modifiers": "private static", "return": "String", "signature": "String readNavReference(Element navpointElement)", "full_signature": "private static String readNavReference(Element navpointElement)", "class_method_signature": "NCXDocument.readNavReference(Element navpointElement)", "testcase": false, "constructor": false}, {"identifier": "readNavLabel", "parameters": "(Element navpointElement)", "modifiers": "private static", "return": "String", "signature": "String readNavLabel(Element navpointElement)", "full_signature": "private static String readNavLabel(Element navpointElement)", "class_method_signature": "NCXDocument.readNavLabel(Element navpointElement)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(EpubWriter epubWriter, Book book, ZipOutputStream resultStream)", "modifiers": "public static", "return": "void", "signature": "void write(EpubWriter epubWriter, Book book, ZipOutputStream resultStream)", "full_signature": "public static void write(EpubWriter epubWriter, Book book, ZipOutputStream resultStream)", "class_method_signature": "NCXDocument.write(EpubWriter epubWriter, Book book, ZipOutputStream resultStream)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(XmlSerializer xmlSerializer, Book book)", "modifiers": "public static", "return": "void", "signature": "void write(XmlSerializer xmlSerializer, Book book)", "full_signature": "public static void write(XmlSerializer xmlSerializer, Book book)", "class_method_signature": "NCXDocument.write(XmlSerializer xmlSerializer, Book book)", "testcase": false, "constructor": false}, {"identifier": "createNCXResource", "parameters": "(Book book)", "modifiers": "public static", "return": "Resource", "signature": "Resource createNCXResource(Book book)", "full_signature": "public static Resource createNCXResource(Book book)", "class_method_signature": "NCXDocument.createNCXResource(Book book)", "testcase": false, "constructor": false}, {"identifier": "createNCXResource", "parameters": "(List<Identifier> identifiers, DcmesElement title, List<Author> authors, TableOfContents tableOfContents)", "modifiers": "public static", "return": "Resource", "signature": "Resource createNCXResource(List<Identifier> identifiers, DcmesElement title, List<Author> authors, TableOfContents tableOfContents)", "full_signature": "public static Resource createNCXResource(List<Identifier> identifiers, DcmesElement title, List<Author> authors, TableOfContents tableOfContents)", "class_method_signature": "NCXDocument.createNCXResource(List<Identifier> identifiers, DcmesElement title, List<Author> authors, TableOfContents tableOfContents)", "testcase": false, "constructor": false}, {"identifier": "write", "parameters": "(XmlSerializer serializer, List<Identifier> identifiers, DcmesElement title, List<Author> authors, TableOfContents tableOfContents)", "modifiers": "public static", "return": "void", "signature": "void write(XmlSerializer serializer, List<Identifier> identifiers, DcmesElement title, List<Author> authors, TableOfContents tableOfContents)", "full_signature": "public static void write(XmlSerializer serializer, List<Identifier> identifiers, DcmesElement title, List<Author> authors, TableOfContents tableOfContents)", "class_method_signature": "NCXDocument.write(XmlSerializer serializer, List<Identifier> identifiers, DcmesElement title, List<Author> authors, TableOfContents tableOfContents)", "testcase": false, "constructor": false}, {"identifier": "writeMetaElement", "parameters": "(String dtbName, String content, XmlSerializer serializer)", "modifiers": "private static", "return": "void", "signature": "void writeMetaElement(String dtbName, String content, XmlSerializer serializer)", "full_signature": "private static void writeMetaElement(String dtbName, String content, XmlSerializer serializer)", "class_method_signature": "NCXDocument.writeMetaElement(String dtbName, String content, XmlSerializer serializer)", "testcase": false, "constructor": false}, {"identifier": "writeNavPoints", "parameters": "(List<TOCReference> tocReferences, int playOrder,\n\t\t\tXmlSerializer serializer)", "modifiers": "private static", "return": "int", "signature": "int writeNavPoints(List<TOCReference> tocReferences, int playOrder,\n\t\t\tXmlSerializer serializer)", "full_signature": "private static int writeNavPoints(List<TOCReference> tocReferences, int playOrder,\n\t\t\tXmlSerializer serializer)", "class_method_signature": "NCXDocument.writeNavPoints(List<TOCReference> tocReferences, int playOrder,\n\t\t\tXmlSerializer serializer)", "testcase": false, "constructor": false}, {"identifier": "writeNavPointStart", "parameters": "(TOCReference tocReference, int playOrder, XmlSerializer serializer)", "modifiers": "private static", "return": "void", "signature": "void writeNavPointStart(TOCReference tocReference, int playOrder, XmlSerializer serializer)", "full_signature": "private static void writeNavPointStart(TOCReference tocReference, int playOrder, XmlSerializer serializer)", "class_method_signature": "NCXDocument.writeNavPointStart(TOCReference tocReference, int playOrder, XmlSerializer serializer)", "testcase": false, "constructor": false}, {"identifier": "writeNavPointEnd", "parameters": "(TOCReference tocReference, XmlSerializer serializer)", "modifiers": "private static", "return": "void", "signature": "void writeNavPointEnd(TOCReference tocReference, XmlSerializer serializer)", "full_signature": "private static void writeNavPointEnd(TOCReference tocReference, XmlSerializer serializer)", "class_method_signature": "NCXDocument.writeNavPointEnd(TOCReference tocReference, XmlSerializer serializer)", "testcase": false, "constructor": false}], "file": "epublib-core/src/main/java/nl/siegmann/epublib/epub/NCXDocument.java"}, "focal_method": {"identifier": "read", "parameters": "(Book book, EpubReader epubReader)", "modifiers": "public static", "return": "Resource", "body": "public static Resource read(Book book, EpubReader epubReader) {\n\t\tResource ncxResource = null;\n\t\tif(book.getSpine().getTocResource() == null) {\n//\t\t\tlog.error(\"Book does not contain a table of contents file\");\n\t\t\treturn ncxResource;\n\t\t}\n\t\ttry {\n\t\t\tncxResource = book.getSpine().getTocResource();\n\t\t\tif(ncxResource == null) {\n\t\t\t\treturn ncxResource;\n\t\t\t}\n\t\t\tDocument ncxDocument = ResourceUtil.getAsDocument(ncxResource);\n\t\t\tElement navMapElement = DOMUtil.getFirstElementByTagNameNS(ncxDocument.getDocumentElement(), NAMESPACE_NCX, NCXTags.navMap);\n\t\t\tTableOfContents tableOfContents = new TableOfContents(readTOCReferences(navMapElement.getChildNodes(), book));\n\t\t\tbook.setTableOfContents(tableOfContents);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(e.getMessage(), e);\n\t\t}\n\t\treturn ncxResource;\n\t}", "signature": "Resource read(Book book, EpubReader epubReader)", "full_signature": "public static Resource read(Book book, EpubReader epubReader)", "class_method_signature": "NCXDocument.read(Book book, EpubReader epubReader)", "testcase": false, "constructor": false, "invocations": ["getTocResource", "getSpine", "getTocResource", "getSpine", "getAsDocument", "getFirstElementByTagNameNS", "getDocumentElement", "readTOCReferences", "getChildNodes", "setTableOfContents", "error", "getMessage"]}, "repository": {"repo_id": 10306448, "url": "https://github.com/linq/epublib", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 8, "size": 2520, "license": "licensed"}}