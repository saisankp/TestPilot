{"test_class": {"identifier": "RestxSpecRepositoryTest", "superclass": "", "interfaces": "", "fields": [], "file": "restx-core/src/test/java/restx/specs/RestxSpecRepositoryTest.java"}, "test_case": {"identifier": "should_find_specs_for_operation", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void should_find_specs_for_operation() throws Exception {\n        RestxSpecRepository resource = getRestxSpecRepository();\n\n        ImmutableMap<String, RestxSpec> allSpecs = ImmutableMap.of(\n                \"cases/test/test.spec.yaml\", spec(\"should say hello on path\", when(\"GET\", \"/messages/xavier\")),\n                \"cases/test/test2.spec.yaml\", spec(\"should say hello w/ query param\", when(\"GET\", \"/messages?who=xavier\")));\n\n        assertThat(resource.filterSpecsByOperation(allSpecs, \"GET\", \"/messages/{id}\"))\n                .isNotEmpty().containsExactly(\"cases/test/test.spec.yaml\");\n        assertThat(resource.filterSpecsByOperation(allSpecs, \"GET\", \"/messages\"))\n                .isNotEmpty().containsExactly(\"cases/test/test2.spec.yaml\");\n    }", "signature": "void should_find_specs_for_operation()", "full_signature": "@Test public void should_find_specs_for_operation()", "class_method_signature": "RestxSpecRepositoryTest.should_find_specs_for_operation()", "testcase": true, "constructor": false, "invocations": ["getRestxSpecRepository", "of", "spec", "when", "spec", "when", "containsExactly", "isNotEmpty", "assertThat", "filterSpecsByOperation", "containsExactly", "isNotEmpty", "assertThat", "filterSpecsByOperation"]}, "focal_class": {"identifier": "RestxSpecRepository", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger logger = LoggerFactory.getLogger(RestxSpecRepository.class);", "modifier": "private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(RestxSpecRepository.class)", "var_name": "logger"}, {"original_string": "private ImmutableMap<String, RestxSpec> allSpecs;", "modifier": "private", "type": "ImmutableMap<String, RestxSpec>", "declarator": "allSpecs", "var_name": "allSpecs"}, {"original_string": "private RestxSpecLoader specLoader;", "modifier": "private", "type": "RestxSpecLoader", "declarator": "specLoader", "var_name": "specLoader"}], "methods": [{"identifier": "RestxSpecRepository", "parameters": "(RestxSpecLoader specLoader)", "modifiers": "public", "return": "", "signature": " RestxSpecRepository(RestxSpecLoader specLoader)", "full_signature": "public  RestxSpecRepository(RestxSpecLoader specLoader)", "class_method_signature": "RestxSpecRepository.RestxSpecRepository(RestxSpecLoader specLoader)", "testcase": false, "constructor": true}, {"identifier": "findAll", "parameters": "()", "modifiers": "public", "return": "Iterable<String>", "signature": "Iterable<String> findAll()", "full_signature": "public Iterable<String> findAll()", "class_method_signature": "RestxSpecRepository.findAll()", "testcase": false, "constructor": false}, {"identifier": "findSpecById", "parameters": "(String id)", "modifiers": "public", "return": "Optional<RestxSpec>", "signature": "Optional<RestxSpec> findSpecById(String id)", "full_signature": "public Optional<RestxSpec> findSpecById(String id)", "class_method_signature": "RestxSpecRepository.findSpecById(String id)", "testcase": false, "constructor": false}, {"identifier": "findSpecsByOperation", "parameters": "(String httpMethod, String path)", "modifiers": "public", "return": "Iterable<String>", "signature": "Iterable<String> findSpecsByOperation(String httpMethod, String path)", "full_signature": "public Iterable<String> findSpecsByOperation(String httpMethod, String path)", "class_method_signature": "RestxSpecRepository.findSpecsByOperation(String httpMethod, String path)", "testcase": false, "constructor": false}, {"identifier": "findSpecsByRequest", "parameters": "(RestxRequest request)", "modifiers": "public", "return": "Iterable<WhenHttpRequest>", "signature": "Iterable<WhenHttpRequest> findSpecsByRequest(RestxRequest request)", "full_signature": "public Iterable<WhenHttpRequest> findSpecsByRequest(RestxRequest request)", "class_method_signature": "RestxSpecRepository.findSpecsByRequest(RestxRequest request)", "testcase": false, "constructor": false}, {"identifier": "findAllSpecs", "parameters": "()", "modifiers": "synchronized", "return": "ImmutableMap<String, RestxSpec>", "signature": "ImmutableMap<String, RestxSpec> findAllSpecs()", "full_signature": "synchronized ImmutableMap<String, RestxSpec> findAllSpecs()", "class_method_signature": "RestxSpecRepository.findAllSpecs()", "testcase": false, "constructor": false}, {"identifier": "buildSpecsMap", "parameters": "(boolean searchInSources)", "modifiers": "protected", "return": "Map<String, RestxSpec>", "signature": "Map<String, RestxSpec> buildSpecsMap(boolean searchInSources)", "full_signature": "protected Map<String, RestxSpec> buildSpecsMap(boolean searchInSources)", "class_method_signature": "RestxSpecRepository.buildSpecsMap(boolean searchInSources)", "testcase": false, "constructor": false}, {"identifier": "filterSpecsByOperation", "parameters": "(ImmutableMap<String, RestxSpec> allSpecs,\n                                                    String httpMethod, String path)", "modifiers": "", "return": "Iterable<String>", "signature": "Iterable<String> filterSpecsByOperation(ImmutableMap<String, RestxSpec> allSpecs,\n                                                    String httpMethod, String path)", "full_signature": " Iterable<String> filterSpecsByOperation(ImmutableMap<String, RestxSpec> allSpecs,\n                                                    String httpMethod, String path)", "class_method_signature": "RestxSpecRepository.filterSpecsByOperation(ImmutableMap<String, RestxSpec> allSpecs,\n                                                    String httpMethod, String path)", "testcase": false, "constructor": false}, {"identifier": "findWhensMatchingRequest", "parameters": "(ImmutableMap<String, RestxSpec> allSpecs, RestxRequest restxRequest)", "modifiers": "", "return": "Iterable<WhenHttpRequest>", "signature": "Iterable<WhenHttpRequest> findWhensMatchingRequest(ImmutableMap<String, RestxSpec> allSpecs, RestxRequest restxRequest)", "full_signature": " Iterable<WhenHttpRequest> findWhensMatchingRequest(ImmutableMap<String, RestxSpec> allSpecs, RestxRequest restxRequest)", "class_method_signature": "RestxSpecRepository.findWhensMatchingRequest(ImmutableMap<String, RestxSpec> allSpecs, RestxRequest restxRequest)", "testcase": false, "constructor": false}], "file": "restx-core/src/main/java/restx/specs/RestxSpecRepository.java"}, "focal_method": {"identifier": "filterSpecsByOperation", "parameters": "(ImmutableMap<String, RestxSpec> allSpecs,\n                                                    String httpMethod, String path)", "modifiers": "", "return": "Iterable<String>", "body": "Iterable<String> filterSpecsByOperation(ImmutableMap<String, RestxSpec> allSpecs,\n                                                    String httpMethod, String path) {\n        StdRestxRequestMatcher matcher = new StdRestxRequestMatcher(httpMethod, path);\n        Collection<String> specs = Lists.newArrayList();\n        for (Map.Entry<String, RestxSpec> spec : allSpecs.entrySet()) {\n            for (When when : spec.getValue().getWhens()) {\n                if (when instanceof WhenHttpRequest) {\n                    WhenHttpRequest request = (WhenHttpRequest) when;\n                    String requestPath = request.getPath();\n                    if (!requestPath.startsWith(\"/\")) {\n                        requestPath = \"/\" + requestPath;\n                    }\n                    if (requestPath.indexOf(\"?\") != -1) {\n                        requestPath = requestPath.substring(0, requestPath.indexOf(\"?\"));\n                    }\n                    Optional<? extends RestxRequestMatch> match = matcher.match(request.getMethod(), requestPath);\n                    if (match.isPresent()) {\n                        specs.add(spec.getKey());\n                        break;\n                    }\n                }\n            }\n        }\n        return specs;\n    }", "signature": "Iterable<String> filterSpecsByOperation(ImmutableMap<String, RestxSpec> allSpecs,\n                                                    String httpMethod, String path)", "full_signature": " Iterable<String> filterSpecsByOperation(ImmutableMap<String, RestxSpec> allSpecs,\n                                                    String httpMethod, String path)", "class_method_signature": "RestxSpecRepository.filterSpecsByOperation(ImmutableMap<String, RestxSpec> allSpecs,\n                                                    String httpMethod, String path)", "testcase": false, "constructor": false, "invocations": ["newArrayList", "entrySet", "getWhens", "getValue", "getPath", "startsWith", "indexOf", "substring", "indexOf", "match", "getMethod", "isPresent", "add", "getKey"]}, "repository": {"repo_id": 9836833, "url": "https://github.com/restx/restx", "language": "Java", "is_fork": false, "fork_count": 78, "stargazer_count": 433, "size": 7896, "license": "licensed"}}