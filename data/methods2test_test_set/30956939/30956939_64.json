{"test_class": {"identifier": "WorkflowReportJSONTest", "superclass": "extends DummyWorkflowReport", "interfaces": "", "fields": [{"original_string": "private final WorkflowReportJSON workflowReportJson = new WorkflowReportJSON();", "modifier": "private final", "type": "WorkflowReportJSON", "declarator": "workflowReportJson = new WorkflowReportJSON()", "var_name": "workflowReportJson"}], "file": "taverna-run-impl/src/test/java/org/apache/taverna/platform/run/impl/WorkflowReportJSONTest.java"}, "test_case": {"identifier": "load", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void load() throws Exception {\n        URI bundleUri = getClass().getResource(\"/workflowrun.bundle.zip\").toURI();\n        Path bundlePath = Paths.get(bundleUri);\n        try (Bundle bundle = DataBundles.openBundle(bundlePath)) {\n            WorkflowReport wfReport = workflowReportJson.load(bundle);\n            assertEquals(State.COMPLETED, wfReport.getState());\n            assertNull(wfReport.getParentReport());\n            \n            assertEquals(wfBundle.getMainWorkflow().getName(), wfReport.getSubject().getName());\n            URI mainWf = new URITools().uriForBean(wfBundle.getMainWorkflow());\n            assertEquals(mainWf, wfReport.getSubjectURI());\n            \n            assertEquals(date(2013,1,2,13,37), wfReport.getCreatedDate());\n            assertEquals(date(2013,1,2,14,50), wfReport.getStartedDate());\n            assertEquals(date(2013,12,31,0,0), wfReport.getCompletedDate());\n            assertNull(wfReport.getCancelledDate());\n            assertNull(wfReport.getResumedDate());\n            assertNull(wfReport.getPausedDate());\n            assertTrue(wfReport.getResumedDates().isEmpty());\n            assertTrue(wfReport.getPausedDates().isEmpty());\n            \n            // wf invocation\n            assertEquals(1, wfReport.getInvocations().size());\n            Invocation wfInvov = wfReport.getInvocations().first();\n            assertEquals(\"wf0\", wfInvov.getName());\n            assertEquals(\"wf0\", wfInvov.getId());\n            assertNull(wfInvov.getParentId());\n            assertNull(wfInvov.getParent());\n            assertEquals(0, wfInvov.getIndex().length);\n            assertSame(wfReport, wfInvov.getReport());\n            assertEquals(State.COMPLETED, wfInvov.getState());\n\n            assertEquals(date(2013,1,2,14,51), wfInvov.getStartedDate());\n            assertEquals(date(2013,12,30,23,50), wfInvov.getCompletedDate());\n\n            // wf invocation in/out\n            assertEquals(1, wfInvov.getInputs().size());\n            assertEquals(1, wfInvov.getOutputs().size());\n            \n            Path name = wfInvov.getInputs().get(\"name\");\n            assertEquals(\"/inputs/name\", name.toString());\n            assertEquals(\"John Doe\", DataBundles.getStringValue(name));\n            \n            Path greeting = wfInvov.getOutputs().get(\"greeting\");\n            assertEquals(\"/outputs/greeting\", greeting.toString());\n            assertEquals(\"Hello, John Doe\", DataBundles.getStringValue(greeting));\n            \n            \n            // processor reports\n            assertEquals(2, wfReport.getProcessorReports().size());\n            for (ProcessorReport procRepo : wfReport.getProcessorReports()) {\n                Processor processor = procRepo.getSubject();\n                assertTrue(wfBundle.getMainWorkflow().getProcessors().containsName(processor.getName()));\n                assertEquals(1, procRepo.getJobsQueued());\n                assertEquals(2, procRepo.getJobsCompletedWithErrors());\n                assertEquals(3, procRepo.getJobsCompleted());\n                assertEquals(5, procRepo.getJobsStarted());\n                \n\n                assertEquals(date(2013,2,1,00,00), procRepo.getCreatedDate());\n                assertEquals(date(2013,2,2,00,00), procRepo.getStartedDate());\n                assertEquals(date(2013,7,28,12,0), procRepo.getCompletedDate());\n                assertEquals(date(2013,2,5,0,0), procRepo.getPausedDate());\n                assertEquals(Arrays.asList(date(2013,2,3,0,0), date(2013,2,5,0,0)),\n                        procRepo.getPausedDates());\n                assertEquals(date(2013,2,6,0,0), procRepo.getResumedDate());\n                assertEquals(Arrays.asList(date(2013,2,4,0,0), date(2013,2,6,0,0)),\n                        procRepo.getResumedDates());\n\n                assertEquals(date(2013,7,28,12,0), procRepo.getCompletedDate());\n                \n                assertEquals(1, procRepo.getInvocations().size());\n                Invocation pInvoc = procRepo.getInvocations().first();\n                assertEquals(date(2013,2,2,11,00), pInvoc.getStartedDate());\n                assertEquals(date(2013,2,2,13,00), pInvoc.getCompletedDate());\n                assertEquals(State.COMPLETED, pInvoc.getState());\n                assertEquals(wfInvov, pInvoc.getParent());\n                assertEquals(\"wf0\", pInvoc.getParentId());                \n                if (processor.getName().equals(\"hello\")) {\n                    assertEquals(\"proc-hello0\", pInvoc.getName());\n                    assertEquals(\"wf0/proc-hello0\", pInvoc.getId());\n                    assertEquals(0, pInvoc.getInputs().size());\n                    assertEquals(1, pInvoc.getOutputs().size());\n                    assertEquals(\"Hello, \", DataBundles.getStringValue(pInvoc.getOutputs().get(\"value\")));\n                } else if (processor.getName().equals(\"Concatenate_two_strings\")) {\n                    assertEquals(\"proc-Concatenate_two_strings0\", pInvoc.getName());\n                    assertEquals(\"wf0/proc-Concatenate_two_strings0\", pInvoc.getId());\n                    assertEquals(2, pInvoc.getInputs().size());\n                    assertEquals(\"Hello, \", DataBundles.getStringValue(pInvoc.getInputs().get(\"string1\")));\n                    assertEquals(\"John Doe\", DataBundles.getStringValue(pInvoc.getInputs().get(\"string2\")));\n\n                    assertEquals(1, pInvoc.getOutputs().size());\n                    assertEquals(\"Hello, John Doe\", DataBundles.getStringValue(pInvoc.getOutputs().get(\"output\")));                    \n                } else {\n                    fail(\"Unknown processor: \" + processor.getName());\n                }\n                \n                assertEquals(1, procRepo.getActivityReports().size());\n                for (ActivityReport actRepo : procRepo.getActivityReports()) {\n                    assertEquals(procRepo, actRepo.getParentReport());\n                    assertEquals(State.CANCELLED, actRepo.getState());\n                    assertEquals(date(2013,2,20,00,00), actRepo.getCreatedDate());\n                    assertEquals(date(2013,2,20,11,00), actRepo.getStartedDate());\n                    assertEquals(date(2013,2,21,11,30), actRepo.getCancelledDate());                   \n                    // TODO: Test nested workflow\n                }\n            }\n        }\n        \n    }", "signature": "void load()", "full_signature": "@Test public void load()", "class_method_signature": "WorkflowReportJSONTest.load()", "testcase": true, "constructor": false, "invocations": ["toURI", "getResource", "getClass", "get", "openBundle", "load", "assertEquals", "getState", "assertNull", "getParentReport", "assertEquals", "getName", "getMainWorkflow", "getName", "getSubject", "uriForBean", "getMainWorkflow", "assertEquals", "getSubjectURI", "assertEquals", "date", "getCreatedDate", "assertEquals", "date", "getStartedDate", "assertEquals", "date", "getCompletedDate", "assertNull", "getCancelledDate", "assertNull", "getResumedDate", "assertNull", "getPausedDate", "assertTrue", "isEmpty", "getResumedDates", "assertTrue", "isEmpty", "getPausedDates", "assertEquals", "size", "getInvocations", "first", "getInvocations", "assertEquals", "getName", "assertEquals", "getId", "assertNull", "getParentId", "assertNull", "getParent", "assertEquals", "getIndex", "assertSame", "getReport", "assertEquals", "getState", "assertEquals", "date", "getStartedDate", "assertEquals", "date", "getCompletedDate", "assertEquals", "size", "getInputs", "assertEquals", "size", "getOutputs", "get", "getInputs", "assertEquals", "toString", "assertEquals", "getStringValue", "get", "getOutputs", "assertEquals", "toString", "assertEquals", "getStringValue", "assertEquals", "size", "getProcessorReports", "getProcessorReports", "getSubject", "assertTrue", "containsName", "getProcessors", "getMainWorkflow", "getName", "assertEquals", "getJobsQueued", "assertEquals", "getJobsCompletedWithErrors", "assertEquals", "getJobsCompleted", "assertEquals", "getJobsStarted", "assertEquals", "date", "getCreatedDate", "assertEquals", "date", "getStartedDate", "assertEquals", "date", "getCompletedDate", "assertEquals", "date", "getPausedDate", "assertEquals", "asList", "date", "date", "getPausedDates", "assertEquals", "date", "getResumedDate", "assertEquals", "asList", "date", "date", "getResumedDates", "assertEquals", "date", "getCompletedDate", "assertEquals", "size", "getInvocations", "first", "getInvocations", "assertEquals", "date", "getStartedDate", "assertEquals", "date", "getCompletedDate", "assertEquals", "getState", "assertEquals", "getParent", "assertEquals", "getParentId", "equals", "getName", "assertEquals", "getName", "assertEquals", "getId", "assertEquals", "size", "getInputs", "assertEquals", "size", "getOutputs", "assertEquals", "getStringValue", "get", "getOutputs", "equals", "getName", "assertEquals", "getName", "assertEquals", "getId", "assertEquals", "size", "getInputs", "assertEquals", "getStringValue", "get", "getInputs", "assertEquals", "getStringValue", "get", "getInputs", "assertEquals", "size", "getOutputs", "assertEquals", "getStringValue", "get", "getOutputs", "fail", "getName", "assertEquals", "size", "getActivityReports", "getActivityReports", "assertEquals", "getParentReport", "assertEquals", "getState", "assertEquals", "date", "getCreatedDate", "assertEquals", "date", "getStartedDate", "assertEquals", "date", "getCancelledDate"]}, "focal_class": {"identifier": "WorkflowReportJSON", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static URITools uriTools = new URITools();", "modifier": "private static", "type": "URITools", "declarator": "uriTools = new URITools()", "var_name": "uriTools"}, {"original_string": "private static final StdDateFormat STD_DATE_FORMAT = new StdDateFormat();", "modifier": "private static final", "type": "StdDateFormat", "declarator": "STD_DATE_FORMAT = new StdDateFormat()", "var_name": "STD_DATE_FORMAT"}], "methods": [{"identifier": "save", "parameters": "(WorkflowReport wfReport, Path path)", "modifiers": "public", "return": "void", "signature": "void save(WorkflowReport wfReport, Path path)", "full_signature": "public void save(WorkflowReport wfReport, Path path)", "class_method_signature": "WorkflowReportJSON.save(WorkflowReport wfReport, Path path)", "testcase": false, "constructor": false}, {"identifier": "makeObjectMapperForLoad", "parameters": "()", "modifiers": "protected static", "return": "ObjectMapper", "signature": "ObjectMapper makeObjectMapperForLoad()", "full_signature": "protected static ObjectMapper makeObjectMapperForLoad()", "class_method_signature": "WorkflowReportJSON.makeObjectMapperForLoad()", "testcase": false, "constructor": false}, {"identifier": "makeObjectMapperForSave", "parameters": "()", "modifiers": "protected static", "return": "ObjectMapper", "signature": "ObjectMapper makeObjectMapperForSave()", "full_signature": "protected static ObjectMapper makeObjectMapperForSave()", "class_method_signature": "WorkflowReportJSON.makeObjectMapperForSave()", "testcase": false, "constructor": false}, {"identifier": "injectContext", "parameters": "(ObjectNode objNode)", "modifiers": "@SuppressWarnings(\"unused\") private", "return": "void", "signature": "void injectContext(ObjectNode objNode)", "full_signature": "@SuppressWarnings(\"unused\") private void injectContext(ObjectNode objNode)", "class_method_signature": "WorkflowReportJSON.injectContext(ObjectNode objNode)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(WorkflowReport wfReport, Bundle dataBundle)", "modifiers": "public", "return": "void", "signature": "void save(WorkflowReport wfReport, Bundle dataBundle)", "full_signature": "public void save(WorkflowReport wfReport, Bundle dataBundle)", "class_method_signature": "WorkflowReportJSON.save(WorkflowReport wfReport, Bundle dataBundle)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(Bundle bundle)", "modifiers": "public", "return": "WorkflowReport", "signature": "WorkflowReport load(Bundle bundle)", "full_signature": "public WorkflowReport load(Bundle bundle)", "class_method_signature": "WorkflowReportJSON.load(Bundle bundle)", "testcase": false, "constructor": false}, {"identifier": "load", "parameters": "(Path workflowReportJson,\n\t\t\tWorkflowBundle workflowBundle)", "modifiers": "public", "return": "WorkflowReport", "signature": "WorkflowReport load(Path workflowReportJson,\n\t\t\tWorkflowBundle workflowBundle)", "full_signature": "public WorkflowReport load(Path workflowReportJson,\n\t\t\tWorkflowBundle workflowBundle)", "class_method_signature": "WorkflowReportJSON.load(Path workflowReportJson,\n\t\t\tWorkflowBundle workflowBundle)", "testcase": false, "constructor": false}, {"identifier": "parseWorkflowReport", "parameters": "(JsonNode reportJson,\n\t\t\tPath workflowReportJson, ActivityReport actReport,\n\t\t\tWorkflowBundle workflowBundle)", "modifiers": "protected", "return": "WorkflowReport", "signature": "WorkflowReport parseWorkflowReport(JsonNode reportJson,\n\t\t\tPath workflowReportJson, ActivityReport actReport,\n\t\t\tWorkflowBundle workflowBundle)", "full_signature": "protected WorkflowReport parseWorkflowReport(JsonNode reportJson,\n\t\t\tPath workflowReportJson, ActivityReport actReport,\n\t\t\tWorkflowBundle workflowBundle)", "class_method_signature": "WorkflowReportJSON.parseWorkflowReport(JsonNode reportJson,\n\t\t\tPath workflowReportJson, ActivityReport actReport,\n\t\t\tWorkflowBundle workflowBundle)", "testcase": false, "constructor": false}, {"identifier": "parseProcessorReport", "parameters": "(JsonNode reportJson,\n\t\t\tPath workflowReportJson, WorkflowReport workflowReport,\n\t\t\tWorkflowBundle workflowBundle)", "modifiers": "protected", "return": "ProcessorReport", "signature": "ProcessorReport parseProcessorReport(JsonNode reportJson,\n\t\t\tPath workflowReportJson, WorkflowReport workflowReport,\n\t\t\tWorkflowBundle workflowBundle)", "full_signature": "protected ProcessorReport parseProcessorReport(JsonNode reportJson,\n\t\t\tPath workflowReportJson, WorkflowReport workflowReport,\n\t\t\tWorkflowBundle workflowBundle)", "class_method_signature": "WorkflowReportJSON.parseProcessorReport(JsonNode reportJson,\n\t\t\tPath workflowReportJson, WorkflowReport workflowReport,\n\t\t\tWorkflowBundle workflowBundle)", "testcase": false, "constructor": false}, {"identifier": "parseActivityReport", "parameters": "(JsonNode actJson,\n\t\t\tPath workflowReportJson, ProcessorReport procReport,\n\t\t\tWorkflowBundle workflowBundle)", "modifiers": "protected", "return": "ActivityReport", "signature": "ActivityReport parseActivityReport(JsonNode actJson,\n\t\t\tPath workflowReportJson, ProcessorReport procReport,\n\t\t\tWorkflowBundle workflowBundle)", "full_signature": "protected ActivityReport parseActivityReport(JsonNode actJson,\n\t\t\tPath workflowReportJson, ProcessorReport procReport,\n\t\t\tWorkflowBundle workflowBundle)", "class_method_signature": "WorkflowReportJSON.parseActivityReport(JsonNode actJson,\n\t\t\tPath workflowReportJson, ProcessorReport procReport,\n\t\t\tWorkflowBundle workflowBundle)", "testcase": false, "constructor": false}, {"identifier": "parseInvocation", "parameters": "(JsonNode json, Path workflowReportJson,\n\t\t\t@SuppressWarnings(\"rawtypes\") StatusReport report)", "modifiers": "protected", "return": "void", "signature": "void parseInvocation(JsonNode json, Path workflowReportJson,\n\t\t\t@SuppressWarnings(\"rawtypes\") StatusReport report)", "full_signature": "protected void parseInvocation(JsonNode json, Path workflowReportJson,\n\t\t\t@SuppressWarnings(\"rawtypes\") StatusReport report)", "class_method_signature": "WorkflowReportJSON.parseInvocation(JsonNode json, Path workflowReportJson,\n\t\t\t@SuppressWarnings(\"rawtypes\") StatusReport report)", "testcase": false, "constructor": false}, {"identifier": "parseValues", "parameters": "(JsonNode json, Path basePath)", "modifiers": "protected", "return": "Map<String, Path>", "signature": "Map<String, Path> parseValues(JsonNode json, Path basePath)", "full_signature": "protected Map<String, Path> parseValues(JsonNode json, Path basePath)", "class_method_signature": "WorkflowReportJSON.parseValues(JsonNode json, Path basePath)", "testcase": false, "constructor": false}, {"identifier": "iterate", "parameters": "(final Iterator<T> iterator)", "modifiers": "private static", "return": "Iterable<T>", "signature": "Iterable<T> iterate(final Iterator<T> iterator)", "full_signature": "private static Iterable<T> iterate(final Iterator<T> iterator)", "class_method_signature": "WorkflowReportJSON.iterate(final Iterator<T> iterator)", "testcase": false, "constructor": false}, {"identifier": "parseDates", "parameters": "(JsonNode json,\n\t\t\t@SuppressWarnings(\"rawtypes\") StatusReport report)", "modifiers": "protected", "return": "void", "signature": "void parseDates(JsonNode json,\n\t\t\t@SuppressWarnings(\"rawtypes\") StatusReport report)", "full_signature": "protected void parseDates(JsonNode json,\n\t\t\t@SuppressWarnings(\"rawtypes\") StatusReport report)", "class_method_signature": "WorkflowReportJSON.parseDates(JsonNode json,\n\t\t\t@SuppressWarnings(\"rawtypes\") StatusReport report)", "testcase": false, "constructor": false}, {"identifier": "getDate", "parameters": "(JsonNode json, String name)", "modifiers": "protected", "return": "Date", "signature": "Date getDate(JsonNode json, String name)", "full_signature": "protected Date getDate(JsonNode json, String name)", "class_method_signature": "WorkflowReportJSON.getDate(JsonNode json, String name)", "testcase": false, "constructor": false}, {"identifier": "getSubject", "parameters": "(JsonNode reportJson,\n\t\t\tWorkflowBundle workflowBundle)", "modifiers": "private", "return": "WorkflowBean", "signature": "WorkflowBean getSubject(JsonNode reportJson,\n\t\t\tWorkflowBundle workflowBundle)", "full_signature": "private WorkflowBean getSubject(JsonNode reportJson,\n\t\t\tWorkflowBundle workflowBundle)", "class_method_signature": "WorkflowReportJSON.getSubject(JsonNode reportJson,\n\t\t\tWorkflowBundle workflowBundle)", "testcase": false, "constructor": false}, {"identifier": "loadWorkflowReportJson", "parameters": "(Path path)", "modifiers": "protected", "return": "JsonNode", "signature": "JsonNode loadWorkflowReportJson(Path path)", "full_signature": "protected JsonNode loadWorkflowReportJson(Path path)", "class_method_signature": "WorkflowReportJSON.loadWorkflowReportJson(Path path)", "testcase": false, "constructor": false}], "file": "taverna-run-impl/src/main/java/org/apache/taverna/platform/run/impl/WorkflowReportJSON.java"}, "focal_method": {"identifier": "load", "parameters": "(Bundle bundle)", "modifiers": "public", "return": "WorkflowReport", "body": "public WorkflowReport load(Bundle bundle) throws IOException,\n\t\t\tReaderException, ParseException {\n\t\tPath path = getWorkflowRunReport(bundle);\n\t\tWorkflowBundle workflow = getWorkflowBundle(bundle);\n\t\treturn load(path, workflow);\n\t}", "signature": "WorkflowReport load(Bundle bundle)", "full_signature": "public WorkflowReport load(Bundle bundle)", "class_method_signature": "WorkflowReportJSON.load(Bundle bundle)", "testcase": false, "constructor": false, "invocations": ["getWorkflowRunReport", "getWorkflowBundle", "load"]}, "repository": {"repo_id": 30956939, "url": "https://github.com/apache/incubator-taverna-engine", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 12, "size": 6590, "license": "licensed"}}