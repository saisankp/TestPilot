{"test_class": {"identifier": "StrictScopeDecoratorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "StrictScopeDecorator decorator = StrictScopeDecorator.create();", "modifier": "", "type": "StrictScopeDecorator", "declarator": "decorator = StrictScopeDecorator.create()", "var_name": "decorator"}, {"original_string": "CurrentTraceContext currentTraceContext = ThreadLocalCurrentTraceContext.newBuilder()\n    .addScopeDecorator(decorator)\n    .build();", "modifier": "", "type": "CurrentTraceContext", "declarator": "currentTraceContext = ThreadLocalCurrentTraceContext.newBuilder()\n    .addScopeDecorator(decorator)\n    .build()", "var_name": "currentTraceContext"}, {"original_string": "Tracing tracing = Tracing.newBuilder()\n    .currentTraceContext(currentTraceContext)\n    .build();", "modifier": "", "type": "Tracing", "declarator": "tracing = Tracing.newBuilder()\n    .currentTraceContext(currentTraceContext)\n    .build()", "var_name": "tracing"}, {"original_string": "TraceContext context = TraceContext.newBuilder().traceId(1L).spanId(2L).build();", "modifier": "", "type": "TraceContext", "declarator": "context = TraceContext.newBuilder().traceId(1L).spanId(2L).build()", "var_name": "context"}, {"original_string": "BusinessClass businessClass = new BusinessClass(tracing, decorator, context);", "modifier": "", "type": "BusinessClass", "declarator": "businessClass = new BusinessClass(tracing, decorator, context)", "var_name": "businessClass"}], "file": "brave/src/test/java/brave/propagation/StrictScopeDecoratorTest.java"}, "test_case": {"identifier": "decorator_close_afterCorrectUsage", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test public void decorator_close_afterCorrectUsage() {\n    try (Scope ws = currentTraceContext.newScope(null)) {\n      try (Scope ws2 = currentTraceContext.newScope(context)) {\n      }\n    }\n\n    decorator.close(); // doesn't error\n  }", "signature": "void decorator_close_afterCorrectUsage()", "full_signature": "@Test public void decorator_close_afterCorrectUsage()", "class_method_signature": "StrictScopeDecoratorTest.decorator_close_afterCorrectUsage()", "testcase": true, "constructor": false, "invocations": ["newScope", "newScope", "close"]}, "focal_class": {"identifier": "StrictScopeDecorator", "superclass": "", "interfaces": "implements ScopeDecorator, Closeable", "fields": [{"original_string": "final Set<CallerStackTrace> currentCallers = Collections.synchronizedSet(new LinkedHashSet<>());", "modifier": "final", "type": "Set<CallerStackTrace>", "declarator": "currentCallers = Collections.synchronizedSet(new LinkedHashSet<>())", "var_name": "currentCallers"}], "methods": [{"identifier": "create", "parameters": "()", "modifiers": "public static", "return": "StrictScopeDecorator", "signature": "StrictScopeDecorator create()", "full_signature": "public static StrictScopeDecorator create()", "class_method_signature": "StrictScopeDecorator.create()", "testcase": false, "constructor": false}, {"identifier": "decorateScope", "parameters": "(@Nullable TraceContext context, Scope scope)", "modifiers": "@Override public", "return": "Scope", "signature": "Scope decorateScope(@Nullable TraceContext context, Scope scope)", "full_signature": "@Override public Scope decorateScope(@Nullable TraceContext context, Scope scope)", "class_method_signature": "StrictScopeDecorator.decorateScope(@Nullable TraceContext context, Scope scope)", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "StrictScopeDecorator.close()", "testcase": false, "constructor": false}, {"identifier": "StrictScopeDecorator", "parameters": "()", "modifiers": "", "return": "", "signature": " StrictScopeDecorator()", "full_signature": "  StrictScopeDecorator()", "class_method_signature": "StrictScopeDecorator.StrictScopeDecorator()", "testcase": false, "constructor": true}], "file": "brave/src/main/java/brave/propagation/StrictScopeDecorator.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override public void close() {\n    // toArray is synchronized while iterators are not\n    CallerStackTrace[] leakedCallers = currentCallers.toArray(new CallerStackTrace[0]);\n    for (CallerStackTrace caller : leakedCallers) {\n      // Sometimes unit test runners truncate the cause of the exception.\n      // This flattens the exception as the caller of close() isn't important vs the one that leaked\n      AssertionError toThrow = new AssertionError(\n        \"Thread [\" + caller.threadName + \"] opened a scope of \" + caller.context + \" here:\");\n      toThrow.setStackTrace(caller.getStackTrace());\n      throw toThrow;\n    }\n  }", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "StrictScopeDecorator.close()", "testcase": false, "constructor": false, "invocations": ["toArray", "setStackTrace", "getStackTrace"]}, "repository": {"repo_id": 9278888, "url": "https://github.com/openzipkin/brave", "stars": 1754, "created": "4/7/2013 3:48:18 PM +00:00", "updates": "2020-01-26T11:52:41+00:00", "fork": "False", "license": "licensed"}}