{"test_class": {"identifier": "WidthCalculatorTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "Tag body = new Tag(\"body\", new HashMap<String,String>());", "modifier": "", "type": "Tag", "declarator": "body = new Tag(\"body\", new HashMap<String,String>())", "var_name": "body"}, {"original_string": "Tag table = new Tag(\"table\", new HashMap<String,String>());", "modifier": "", "type": "Tag", "declarator": "table = new Tag(\"table\", new HashMap<String,String>())", "var_name": "table"}, {"original_string": "Tag row = new Tag(\"tr\", new HashMap<String,String>());", "modifier": "", "type": "Tag", "declarator": "row = new Tag(\"tr\", new HashMap<String,String>())", "var_name": "row"}, {"original_string": "Tag cell = new Tag(\"td\", new HashMap<String,String>());", "modifier": "", "type": "Tag", "declarator": "cell = new Tag(\"td\", new HashMap<String,String>())", "var_name": "cell"}, {"original_string": "private final HtmlPipelineContext config = new HtmlPipelineContext(null);", "modifier": "private final", "type": "HtmlPipelineContext", "declarator": "config = new HtmlPipelineContext(null)", "var_name": "config"}, {"original_string": "private final WidthCalculator calc = new WidthCalculator();", "modifier": "private final", "type": "WidthCalculator", "declarator": "calc = new WidthCalculator()", "var_name": "calc"}], "file": "xmlworker/src/test/java/com/itextpdf/tool/xml/css/WidthCalculatorTest.java"}, "test_case": {"identifier": "resolveCellWidth20of80", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void resolveCellWidth20of80() throws IOException {\n\t\ttable.getAttributes().put(HTML.Attribute.WIDTH, \"80%\");\n\t\tcell.getAttributes().put(HTML.Attribute.WIDTH, \"20%\");\n\t\tassertEquals(0.8f*config.getPageSize().getWidth()*0.2f, calc.getWidth(cell, config.getRootTags(), config.getPageSize().getWidth()),0.01f);\n\t}", "signature": "void resolveCellWidth20of80()", "full_signature": "@Test public void resolveCellWidth20of80()", "class_method_signature": "WidthCalculatorTest.resolveCellWidth20of80()", "testcase": true, "constructor": false, "invocations": ["put", "getAttributes", "put", "getAttributes", "assertEquals", "getWidth", "getPageSize", "getWidth", "getRootTags", "getWidth", "getPageSize"]}, "focal_class": {"identifier": "WidthCalculator", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final CssUtils utils = CssUtils.getInstance();", "modifier": "private final", "type": "CssUtils", "declarator": "utils = CssUtils.getInstance()", "var_name": "utils"}], "methods": [{"identifier": "getWidth", "parameters": "(final Tag tag, final List<String> roottags, final float pagewidth)", "modifiers": "public", "return": "float", "signature": "float getWidth(final Tag tag, final List<String> roottags, final float pagewidth)", "full_signature": "public float getWidth(final Tag tag, final List<String> roottags, final float pagewidth)", "class_method_signature": "WidthCalculator.getWidth(final Tag tag, final List<String> roottags, final float pagewidth)", "testcase": false, "constructor": false}, {"identifier": "getWidth", "parameters": "(final Tag tag, final List<String> roottags, final float pagewidth, final float initialTotalWidth)", "modifiers": "public", "return": "float", "signature": "float getWidth(final Tag tag, final List<String> roottags, final float pagewidth, final float initialTotalWidth)", "full_signature": "public float getWidth(final Tag tag, final List<String> roottags, final float pagewidth, final float initialTotalWidth)", "class_method_signature": "WidthCalculator.getWidth(final Tag tag, final List<String> roottags, final float pagewidth, final float initialTotalWidth)", "testcase": false, "constructor": false}], "file": "xmlworker/src/main/java/com/itextpdf/tool/xml/css/WidthCalculator.java"}, "focal_method": {"identifier": "getWidth", "parameters": "(final Tag tag, final List<String> roottags, final float pagewidth)", "modifiers": "public", "return": "float", "body": "public float getWidth(final Tag tag, final List<String> roottags, final float pagewidth){\n\t\treturn getWidth(tag, roottags, pagewidth, -1);\n\t}", "signature": "float getWidth(final Tag tag, final List<String> roottags, final float pagewidth)", "full_signature": "public float getWidth(final Tag tag, final List<String> roottags, final float pagewidth)", "class_method_signature": "WidthCalculator.getWidth(final Tag tag, final List<String> roottags, final float pagewidth)", "testcase": false, "constructor": false, "invocations": ["getWidth"]}, "repository": {"repo_id": 14892248, "url": "https://github.com/itext/itextpdf", "language": "Java", "is_fork": false, "fork_count": 400, "stargazer_count": 1164, "size": 115070, "license": "licensed"}}