{"test_class": {"identifier": "GetAsyncOperationTaskTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private GetAsyncOperationTask testTask;", "modifier": "private", "type": "GetAsyncOperationTask", "declarator": "testTask", "var_name": "testTask"}, {"original_string": "private IStorageConnection connection;", "modifier": "private", "type": "IStorageConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private IDatabaseTask targetTask;", "modifier": "private", "type": "IDatabaseTask", "declarator": "targetTask", "var_name": "targetTask"}, {"original_string": "private IField callbackField;", "modifier": "private", "type": "IField", "declarator": "callbackField", "var_name": "callbackField"}, {"original_string": "private IField equalsField;", "modifier": "private", "type": "IField", "declarator": "equalsField", "var_name": "equalsField"}, {"original_string": "private IField filterField;", "modifier": "private", "type": "IField", "declarator": "filterField", "var_name": "filterField"}, {"original_string": "private IField tokenField;", "modifier": "private", "type": "IField", "declarator": "tokenField", "var_name": "tokenField"}, {"original_string": "private IField collectionNameField;", "modifier": "private", "type": "IField", "declarator": "collectionNameField", "var_name": "collectionNameField"}], "file": "CoreFeatures/Database/AsyncOperationCollection/src/test/java/info/smart_tools/smartactors/database/async_operation_collection/task/GetAsyncOperationTaskTest.java"}, "test_case": {"identifier": "MustInCorrectPrepareWhenFieldOutThrowException", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void MustInCorrectPrepareWhenFieldOutThrowException() throws ResolutionException, ReadValueException, InvalidArgumentException, TaskPrepareException, ChangeValueException {\n        IObject query = mock(IObject.class);\n\n        IObject queryForNestedTask  = mock(IObject.class);\n        IObject filterObject = mock(IObject.class);\n        IObject eqKeyObject = mock(IObject.class);\n\n        IKey iObjectKey = mock(IKey.class);\n        when(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\")).thenReturn(iObjectKey);\n\n        when(IOC.resolve(iObjectKey)).thenReturn(queryForNestedTask).thenReturn(filterObject).thenReturn(eqKeyObject);\n\n        String token = \"token\";\n        when(tokenField.in(query)).thenReturn(token);\n\n        doThrow(new ChangeValueException()).when(equalsField).out(eqKeyObject, token);\n\n        try {\n            testTask.prepare(query);\n        } catch (TaskPrepareException e) {\n            verifyStatic(times(3));\n            Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\");\n\n            verifyStatic(times(3));\n            IOC.resolve(iObjectKey);\n\n            verify(tokenField).in(query);\n\n            verify(equalsField).out(eqKeyObject, token);\n            return;\n        }\n        assertTrue(false);\n    }", "signature": "void MustInCorrectPrepareWhenFieldOutThrowException()", "full_signature": "@Test public void MustInCorrectPrepareWhenFieldOutThrowException()", "class_method_signature": "GetAsyncOperationTaskTest.MustInCorrectPrepareWhenFieldOutThrowException()", "testcase": true, "constructor": false, "invocations": ["mock", "mock", "mock", "mock", "mock", "thenReturn", "when", "getOrAdd", "thenReturn", "thenReturn", "thenReturn", "when", "resolve", "thenReturn", "when", "in", "out", "when", "doThrow", "prepare", "verifyStatic", "times", "getOrAdd", "verifyStatic", "times", "resolve", "in", "verify", "out", "verify", "assertTrue"]}, "focal_class": {"identifier": "GetAsyncOperationTask", "superclass": "", "interfaces": "implements IDatabaseTask", "fields": [{"original_string": "private IDatabaseTask getItemTask;", "modifier": "private", "type": "IDatabaseTask", "declarator": "getItemTask", "var_name": "getItemTask"}, {"original_string": "private IStorageConnection connection;", "modifier": "private", "type": "IStorageConnection", "declarator": "connection", "var_name": "connection"}, {"original_string": "private IField collectionNameField;", "modifier": "private", "type": "IField", "declarator": "collectionNameField", "var_name": "collectionNameField"}, {"original_string": "private IField callbackField;", "modifier": "private", "type": "IField", "declarator": "callbackField", "var_name": "callbackField"}, {"original_string": "private IField equalsField;", "modifier": "private", "type": "IField", "declarator": "equalsField", "var_name": "equalsField"}, {"original_string": "private IField filterField;", "modifier": "private", "type": "IField", "declarator": "filterField", "var_name": "filterField"}, {"original_string": "private IField tokenField;", "modifier": "private", "type": "IField", "declarator": "tokenField", "var_name": "tokenField"}], "methods": [{"identifier": "GetAsyncOperationTask", "parameters": "(final IStorageConnection connection)", "modifiers": "public", "return": "", "signature": " GetAsyncOperationTask(final IStorageConnection connection)", "full_signature": "public  GetAsyncOperationTask(final IStorageConnection connection)", "class_method_signature": "GetAsyncOperationTask.GetAsyncOperationTask(final IStorageConnection connection)", "testcase": false, "constructor": true}, {"identifier": "prepare", "parameters": "(final IObject query)", "modifiers": "@Override public", "return": "void", "signature": "void prepare(final IObject query)", "full_signature": "@Override public void prepare(final IObject query)", "class_method_signature": "GetAsyncOperationTask.prepare(final IObject query)", "testcase": false, "constructor": false}, {"identifier": "execute", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void execute()", "full_signature": "@Override public void execute()", "class_method_signature": "GetAsyncOperationTask.execute()", "testcase": false, "constructor": false}], "file": "CoreFeatures/Database/AsyncOperationCollection/src/main/java/info/smart_tools/smartactors/database/async_operation_collection/task/GetAsyncOperationTask.java"}, "focal_method": {"identifier": "prepare", "parameters": "(final IObject query)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void prepare(final IObject query) throws TaskPrepareException {\n        try {\n            IObject queryForNestedTask  = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"));\n            IObject filterObject = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"));\n\n            String token = tokenField.in(query);\n\n            IObject eqKeyObject = IOC.resolve(Keys.getOrAdd(\"info.smart_tools.smartactors.iobject.iobject.IObject\"));\n            equalsField.out(eqKeyObject, token);\n            tokenField.out(filterObject, eqKeyObject);\n\n            filterField.out(queryForNestedTask, filterObject);\n\n\n            getItemTask = IOC.resolve(\n                    Keys.getOrAdd(\"db.collection.search\"),\n                    connection,\n                    collectionNameField.in(query),\n                    queryForNestedTask,\n                    callbackField.in(query)\n            );\n        } catch (ResolutionException e) {\n            throw new TaskPrepareException(\"Can't create ISearchQuery from input query\", e);\n        } catch (ReadValueException | ChangeValueException | InvalidArgumentException e) {\n            throw new TaskPrepareException(\"Can't change value in one of IObjects\", e);\n        }\n    }", "signature": "void prepare(final IObject query)", "full_signature": "@Override public void prepare(final IObject query)", "class_method_signature": "GetAsyncOperationTask.prepare(final IObject query)", "testcase": false, "constructor": false, "invocations": ["resolve", "getOrAdd", "resolve", "getOrAdd", "in", "resolve", "getOrAdd", "out", "out", "out", "resolve", "getOrAdd", "in", "in"]}, "repository": {"repo_id": 52972024, "url": "https://github.com/SmartTools/smartactors-core", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 17, "size": 58816, "license": "licensed"}}