{"test_class": {"identifier": "OperatorSequenceEqualTest", "superclass": "", "interfaces": "", "fields": [], "file": "zava/src/test/java/rx/internal/operators/OperatorSequenceEqualTest.java"}, "test_case": {"identifier": "testWithEmpty2", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testWithEmpty2() {\n        Observable<Boolean> observable = Observable.sequenceEqual(\n                Observable.just(\"one\", \"two\", \"three\"),\n                Observable.<String> empty());\n        verifyResult(observable, false);\n    }", "signature": "void testWithEmpty2()", "full_signature": "@Test public void testWithEmpty2()", "class_method_signature": "OperatorSequenceEqualTest.testWithEmpty2()", "testcase": true, "constructor": false, "invocations": ["sequenceEqual", "just", "empty", "verifyResult"]}, "focal_class": {"identifier": "OperatorSequenceEqual", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Object LOCAL_ONCOMPLETED = new Object();", "modifier": "private static final", "type": "Object", "declarator": "LOCAL_ONCOMPLETED = new Object()", "var_name": "LOCAL_ONCOMPLETED"}], "methods": [{"identifier": "OperatorSequenceEqual", "parameters": "()", "modifiers": "private", "return": "", "signature": " OperatorSequenceEqual()", "full_signature": "private  OperatorSequenceEqual()", "class_method_signature": "OperatorSequenceEqual.OperatorSequenceEqual()", "testcase": false, "constructor": true}, {"identifier": "materializeLite", "parameters": "(Observable<T> source)", "modifiers": "static", "return": "Observable<Object>", "signature": "Observable<Object> materializeLite(Observable<T> source)", "full_signature": "static Observable<Object> materializeLite(Observable<T> source)", "class_method_signature": "OperatorSequenceEqual.materializeLite(Observable<T> source)", "testcase": false, "constructor": false}, {"identifier": "sequenceEqual", "parameters": "(\n            Observable<? extends T> first, Observable<? extends T> second,\n            final Func2<? super T, ? super T, Boolean> equality)", "modifiers": "public static", "return": "Observable<Boolean>", "signature": "Observable<Boolean> sequenceEqual(\n            Observable<? extends T> first, Observable<? extends T> second,\n            final Func2<? super T, ? super T, Boolean> equality)", "full_signature": "public static Observable<Boolean> sequenceEqual(\n            Observable<? extends T> first, Observable<? extends T> second,\n            final Func2<? super T, ? super T, Boolean> equality)", "class_method_signature": "OperatorSequenceEqual.sequenceEqual(\n            Observable<? extends T> first, Observable<? extends T> second,\n            final Func2<? super T, ? super T, Boolean> equality)", "testcase": false, "constructor": false}], "file": "zava/src/main/java/rx/internal/operators/OperatorSequenceEqual.java"}, "focal_method": {"identifier": "sequenceEqual", "parameters": "(\n            Observable<? extends T> first, Observable<? extends T> second,\n            final Func2<? super T, ? super T, Boolean> equality)", "modifiers": "public static", "return": "Observable<Boolean>", "body": "public static <T> Observable<Boolean> sequenceEqual(\n            Observable<? extends T> first, Observable<? extends T> second,\n            final Func2<? super T, ? super T, Boolean> equality) {\n        Observable<Object> firstObservable = materializeLite(first);\n        Observable<Object> secondObservable = materializeLite(second);\n\n        return zip(firstObservable, secondObservable,\n                new Func2<Object, Object, Boolean>() {\n\n                    @Override\n                    @SuppressWarnings(\"unchecked\")\n                    public Boolean call(Object t1, Object t2) {\n                        boolean c1 = t1 == LOCAL_ONCOMPLETED;\n                        boolean c2 = t2 == LOCAL_ONCOMPLETED;\n                        if (c1 && c2) {\n                            return true;\n                        }\n                        if (c1 || c2) {\n                            return false;\n                        }\n                        // Now t1 and t2 must be 'onNext'.\n                        return equality.call((T)t1, (T)t2);\n                    }\n\n                }).all(UtilityFunctions.<Boolean> identity());\n    }", "signature": "Observable<Boolean> sequenceEqual(\n            Observable<? extends T> first, Observable<? extends T> second,\n            final Func2<? super T, ? super T, Boolean> equality)", "full_signature": "public static Observable<Boolean> sequenceEqual(\n            Observable<? extends T> first, Observable<? extends T> second,\n            final Func2<? super T, ? super T, Boolean> equality)", "class_method_signature": "OperatorSequenceEqual.sequenceEqual(\n            Observable<? extends T> first, Observable<? extends T> second,\n            final Func2<? super T, ? super T, Boolean> equality)", "testcase": false, "constructor": false, "invocations": ["materializeLite", "materializeLite", "all", "zip", "call", "identity"]}, "repository": {"repo_id": 33645537, "url": "https://github.com/zqhxuyuan/tutorials", "language": "Java", "is_fork": false, "fork_count": 8, "stargazer_count": 5, "size": 35273, "license": "licensed"}}