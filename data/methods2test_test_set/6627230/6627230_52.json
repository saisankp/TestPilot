{"test_class": {"identifier": "ValueTokenResolverTest", "superclass": "extends AbstractTokenResolverTest", "interfaces": "", "fields": [], "file": "dal-jdbc/src/test/java/org/unidal/dal/jdbc/query/token/resolver/ValueTokenResolverTest.java"}, "test_case": {"identifier": "testUserName", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n   public void testUserName() throws Exception {\n      QueryDef query = new QueryDef(\"test\", UserEntity.class, QueryType.INSERT, \"<value name='user-name'/>\");\n      User user = new User();\n      QueryContext ctx = getSelectContext(query, user, null);\n\n      user.setUserName(\"test\");\n      m_queryResolver.resolve(ctx);\n      Assert.assertEquals(\"?\", ctx.getSqlStatement());\n      Assert.assertEquals(\"[${user-name}]\", ctx.getParameters().toString());\n   }", "signature": "void testUserName()", "full_signature": "@Test public void testUserName()", "class_method_signature": "ValueTokenResolverTest.testUserName()", "testcase": true, "constructor": false, "invocations": ["getSelectContext", "setUserName", "resolve", "assertEquals", "getSqlStatement", "assertEquals", "toString", "getParameters"]}, "focal_class": {"identifier": "ValueTokenResolver", "superclass": "", "interfaces": "implements TokenResolver", "fields": [{"original_string": "@Inject\n   private ExpressionResolver m_expressionResolver;", "modifier": "@Inject\n   private", "type": "ExpressionResolver", "declarator": "m_expressionResolver", "var_name": "m_expressionResolver"}], "methods": [{"identifier": "resolve", "parameters": "(Token token, QueryContext ctx)", "modifiers": "public", "return": "String", "signature": "String resolve(Token token, QueryContext ctx)", "full_signature": "public String resolve(Token token, QueryContext ctx)", "class_method_signature": "ValueTokenResolver.resolve(Token token, QueryContext ctx)", "testcase": false, "constructor": false}], "file": "dal-jdbc/src/main/java/org/unidal/dal/jdbc/query/token/resolver/ValueTokenResolver.java"}, "focal_method": {"identifier": "resolve", "parameters": "(Token token, QueryContext ctx)", "modifiers": "public", "return": "String", "body": "public String resolve(Token token, QueryContext ctx) {\n      if (token.getType() != TokenType.VALUE) {\n         throw new DalRuntimeException(\"Internal error: only VALUE token is supported by \" + getClass());\n      }\n\n      EntityInfo entityInfo = ctx.getEntityInfo();\n      StringBuilder sb = new StringBuilder(1024);\n      String fieldName = ((SimpleTagToken) token).getAttribute(\"name\", null);\n      DataField field = ctx.getEntityInfo().getFieldByName(fieldName);\n\n      if (field != null) {\n         switch (ctx.getQuery().getType()) {\n         case SELECT:\n            throw new DalRuntimeException(\"VALUE token does not support query type: \" + ctx.getQuery().getType());\n         case INSERT:\n            DataObject proto = ctx.getProto();\n            Attribute attribute = entityInfo.getAttribute(field);\n\n            if (!proto.isFieldUsed(field) && attribute.insertExpr().length() > 0) {\n               sb.append(m_expressionResolver.resolve(ctx, attribute.insertExpr()));\n            } else {\n               ctx.addParameter(new Parameter(field));\n               sb.append('?');\n            }\n\n            break;\n         case UPDATE:\n            throw new DalRuntimeException(\"VALUES token does not support query type: \" + ctx.getQuery().getType());\n         case DELETE:\n            throw new DalRuntimeException(\"VALUES token does not support query type: \" + ctx.getQuery().getType());\n         default:\n            throw new DalRuntimeException(\"VALUES token does not support query type: \" + ctx.getQuery().getType());\n         }\n      } else {\n         throw new DalRuntimeException(\"DataField(\" + fieldName + \") is not defined in \"\n               + ctx.getQuery().getEntityClass() + \". Query: \" + ctx.getQuery());\n      }\n\n      return sb.toString();\n   }", "signature": "String resolve(Token token, QueryContext ctx)", "full_signature": "public String resolve(Token token, QueryContext ctx)", "class_method_signature": "ValueTokenResolver.resolve(Token token, QueryContext ctx)", "testcase": false, "constructor": false, "invocations": ["getType", "getClass", "getEntityInfo", "getAttribute", "getFieldByName", "getEntityInfo", "getType", "getQuery", "getType", "getQuery", "getProto", "getAttribute", "isFieldUsed", "length", "insertExpr", "append", "resolve", "insertExpr", "addParameter", "append", "getType", "getQuery", "getType", "getQuery", "getType", "getQuery", "getEntityClass", "getQuery", "getQuery", "toString"]}, "repository": {"repo_id": 6627230, "url": "https://github.com/unidal/frameworks", "language": "Java", "is_fork": false, "fork_count": 96, "stargazer_count": 100, "size": 3009, "license": "licensed"}}