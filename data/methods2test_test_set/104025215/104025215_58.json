{"test_class": {"identifier": "LifecycleRegistryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private LifecycleOwner mLifecycleOwner;", "modifier": "private", "type": "LifecycleOwner", "declarator": "mLifecycleOwner", "var_name": "mLifecycleOwner"}, {"original_string": "private Lifecycle mLifecycle;", "modifier": "private", "type": "Lifecycle", "declarator": "mLifecycle", "var_name": "mLifecycle"}, {"original_string": "private LifecycleRegistry mRegistry;", "modifier": "private", "type": "LifecycleRegistry", "declarator": "mRegistry", "var_name": "mRegistry"}], "file": "lifecycle/runtime/src/test/java/android/arch/lifecycle/LifecycleRegistryTest.java"}, "test_case": {"identifier": "addDuringAddition", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void addDuringAddition() {\n        final TestObserver observer3 = mock(TestObserver.class);\n        final TestObserver observer2 = spy(new TestObserver() {\n            @Override\n            public void onCreate() {\n                mRegistry.addObserver(observer3);\n            }\n        });\n\n        final TestObserver observer1 = spy(new TestObserver() {\n            @Override\n            public void onResume() {\n                mRegistry.addObserver(observer2);\n            }\n        });\n\n        mRegistry.addObserver(observer1);\n\n        dispatchEvent(ON_CREATE);\n        dispatchEvent(ON_START);\n        dispatchEvent(ON_RESUME);\n\n        InOrder inOrder = inOrder(observer1, observer2, observer3);\n        inOrder.verify(observer1).onCreate();\n        inOrder.verify(observer1).onStart();\n        inOrder.verify(observer1).onResume();\n        inOrder.verify(observer2).onCreate();\n        inOrder.verify(observer2).onStart();\n        inOrder.verify(observer2).onResume();\n        inOrder.verify(observer3).onCreate();\n        inOrder.verify(observer3).onStart();\n        inOrder.verify(observer3).onResume();\n    }", "signature": "void addDuringAddition()", "full_signature": "@Test public void addDuringAddition()", "class_method_signature": "LifecycleRegistryTest.addDuringAddition()", "testcase": true, "constructor": false, "invocations": ["mock", "spy", "addObserver", "spy", "addObserver", "addObserver", "dispatchEvent", "dispatchEvent", "dispatchEvent", "inOrder", "onCreate", "verify", "onStart", "verify", "onResume", "verify", "onCreate", "verify", "onStart", "verify", "onResume", "verify", "onCreate", "verify", "onStart", "verify", "onResume", "verify"]}, "focal_class": {"identifier": "LifecycleRegistry", "superclass": "extends Lifecycle", "interfaces": "", "fields": [{"original_string": "private FastSafeIterableMap<LifecycleObserver, ObserverWithState> mObserverMap =\n            new FastSafeIterableMap<>();", "modifier": "private", "type": "FastSafeIterableMap<LifecycleObserver, ObserverWithState>", "declarator": "mObserverMap =\n            new FastSafeIterableMap<>()", "var_name": "mObserverMap"}, {"original_string": "private State mState;", "modifier": "private", "type": "State", "declarator": "mState", "var_name": "mState"}, {"original_string": "private final LifecycleOwner mLifecycleOwner;", "modifier": "private final", "type": "LifecycleOwner", "declarator": "mLifecycleOwner", "var_name": "mLifecycleOwner"}, {"original_string": "private int mAddingObserverCounter = 0;", "modifier": "private", "type": "int", "declarator": "mAddingObserverCounter = 0", "var_name": "mAddingObserverCounter"}, {"original_string": "private boolean mHandlingEvent = false;", "modifier": "private", "type": "boolean", "declarator": "mHandlingEvent = false", "var_name": "mHandlingEvent"}, {"original_string": "private boolean mNewEventOccurred = false;", "modifier": "private", "type": "boolean", "declarator": "mNewEventOccurred = false", "var_name": "mNewEventOccurred"}, {"original_string": "private ArrayList<State> mParentStates = new ArrayList<>();", "modifier": "private", "type": "ArrayList<State>", "declarator": "mParentStates = new ArrayList<>()", "var_name": "mParentStates"}], "methods": [{"identifier": "LifecycleRegistry", "parameters": "(@NonNull LifecycleOwner provider)", "modifiers": "public", "return": "", "signature": " LifecycleRegistry(@NonNull LifecycleOwner provider)", "full_signature": "public  LifecycleRegistry(@NonNull LifecycleOwner provider)", "class_method_signature": "LifecycleRegistry.LifecycleRegistry(@NonNull LifecycleOwner provider)", "testcase": false, "constructor": true}, {"identifier": "markState", "parameters": "(State state)", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "void", "signature": "void markState(State state)", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public void markState(State state)", "class_method_signature": "LifecycleRegistry.markState(State state)", "testcase": false, "constructor": false}, {"identifier": "handleLifecycleEvent", "parameters": "(Lifecycle.Event event)", "modifiers": "public", "return": "void", "signature": "void handleLifecycleEvent(Lifecycle.Event event)", "full_signature": "public void handleLifecycleEvent(Lifecycle.Event event)", "class_method_signature": "LifecycleRegistry.handleLifecycleEvent(Lifecycle.Event event)", "testcase": false, "constructor": false}, {"identifier": "isSynced", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isSynced()", "full_signature": "private boolean isSynced()", "class_method_signature": "LifecycleRegistry.isSynced()", "testcase": false, "constructor": false}, {"identifier": "calculateTargetState", "parameters": "(LifecycleObserver observer)", "modifiers": "private", "return": "State", "signature": "State calculateTargetState(LifecycleObserver observer)", "full_signature": "private State calculateTargetState(LifecycleObserver observer)", "class_method_signature": "LifecycleRegistry.calculateTargetState(LifecycleObserver observer)", "testcase": false, "constructor": false}, {"identifier": "addObserver", "parameters": "(LifecycleObserver observer)", "modifiers": "@Override public", "return": "void", "signature": "void addObserver(LifecycleObserver observer)", "full_signature": "@Override public void addObserver(LifecycleObserver observer)", "class_method_signature": "LifecycleRegistry.addObserver(LifecycleObserver observer)", "testcase": false, "constructor": false}, {"identifier": "popParentState", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void popParentState()", "full_signature": "private void popParentState()", "class_method_signature": "LifecycleRegistry.popParentState()", "testcase": false, "constructor": false}, {"identifier": "pushParentState", "parameters": "(State state)", "modifiers": "private", "return": "void", "signature": "void pushParentState(State state)", "full_signature": "private void pushParentState(State state)", "class_method_signature": "LifecycleRegistry.pushParentState(State state)", "testcase": false, "constructor": false}, {"identifier": "removeObserver", "parameters": "(LifecycleObserver observer)", "modifiers": "@Override public", "return": "void", "signature": "void removeObserver(LifecycleObserver observer)", "full_signature": "@Override public void removeObserver(LifecycleObserver observer)", "class_method_signature": "LifecycleRegistry.removeObserver(LifecycleObserver observer)", "testcase": false, "constructor": false}, {"identifier": "getObserverCount", "parameters": "()", "modifiers": "@SuppressWarnings(\"WeakerAccess\") public", "return": "int", "signature": "int getObserverCount()", "full_signature": "@SuppressWarnings(\"WeakerAccess\") public int getObserverCount()", "class_method_signature": "LifecycleRegistry.getObserverCount()", "testcase": false, "constructor": false}, {"identifier": "getCurrentState", "parameters": "()", "modifiers": "@Override public", "return": "State", "signature": "State getCurrentState()", "full_signature": "@Override public State getCurrentState()", "class_method_signature": "LifecycleRegistry.getCurrentState()", "testcase": false, "constructor": false}, {"identifier": "getStateAfter", "parameters": "(Event event)", "modifiers": "static", "return": "State", "signature": "State getStateAfter(Event event)", "full_signature": "static State getStateAfter(Event event)", "class_method_signature": "LifecycleRegistry.getStateAfter(Event event)", "testcase": false, "constructor": false}, {"identifier": "downEvent", "parameters": "(State state)", "modifiers": "private static", "return": "Event", "signature": "Event downEvent(State state)", "full_signature": "private static Event downEvent(State state)", "class_method_signature": "LifecycleRegistry.downEvent(State state)", "testcase": false, "constructor": false}, {"identifier": "upEvent", "parameters": "(State state)", "modifiers": "private static", "return": "Event", "signature": "Event upEvent(State state)", "full_signature": "private static Event upEvent(State state)", "class_method_signature": "LifecycleRegistry.upEvent(State state)", "testcase": false, "constructor": false}, {"identifier": "forwardPass", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void forwardPass()", "full_signature": "private void forwardPass()", "class_method_signature": "LifecycleRegistry.forwardPass()", "testcase": false, "constructor": false}, {"identifier": "backwardPass", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void backwardPass()", "full_signature": "private void backwardPass()", "class_method_signature": "LifecycleRegistry.backwardPass()", "testcase": false, "constructor": false}, {"identifier": "sync", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void sync()", "full_signature": "private void sync()", "class_method_signature": "LifecycleRegistry.sync()", "testcase": false, "constructor": false}, {"identifier": "min", "parameters": "(@NonNull State state1, @Nullable State state2)", "modifiers": "static", "return": "State", "signature": "State min(@NonNull State state1, @Nullable State state2)", "full_signature": "static State min(@NonNull State state1, @Nullable State state2)", "class_method_signature": "LifecycleRegistry.min(@NonNull State state1, @Nullable State state2)", "testcase": false, "constructor": false}], "file": "lifecycle/runtime/src/main/java/android/arch/lifecycle/LifecycleRegistry.java"}, "focal_method": {"identifier": "addObserver", "parameters": "(LifecycleObserver observer)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void addObserver(LifecycleObserver observer) {\n        State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;\n        ObserverWithState statefulObserver = new ObserverWithState(observer, initialState);\n        ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);\n\n        if (previous != null) {\n            return;\n        }\n\n        boolean isReentrance = mAddingObserverCounter != 0 || mHandlingEvent;\n\n        State targetState = calculateTargetState(observer);\n        mAddingObserverCounter++;\n        while ((statefulObserver.mState.compareTo(targetState) < 0\n                && mObserverMap.contains(observer))) {\n            pushParentState(statefulObserver.mState);\n            statefulObserver.dispatchEvent(mLifecycleOwner, upEvent(statefulObserver.mState));\n            popParentState();\n            // mState / subling may have been changed recalculate\n            targetState = calculateTargetState(observer);\n        }\n\n        if (!isReentrance) {\n            // we do sync only on the top level.\n            sync();\n        }\n        mAddingObserverCounter--;\n    }", "signature": "void addObserver(LifecycleObserver observer)", "full_signature": "@Override public void addObserver(LifecycleObserver observer)", "class_method_signature": "LifecycleRegistry.addObserver(LifecycleObserver observer)", "testcase": false, "constructor": false, "invocations": ["putIfAbsent", "calculateTargetState", "compareTo", "contains", "pushParentState", "dispatchEvent", "upEvent", "popParentState", "calculateTargetState", "sync"]}, "repository": {"repo_id": 104025215, "url": "https://github.com/Rayduh/support", "language": "Java", "is_fork": false, "fork_count": 10, "stargazer_count": 8, "size": 253405, "license": "licensed"}}