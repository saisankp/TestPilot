{"test_class": {"identifier": "TestSsmlDocument", "superclass": "", "interfaces": "", "fields": [], "file": "org.jvoicexml.xml/src/test/java/org/jvoicexml/xml/ssml/TestSsmlDocument.java"}, "test_case": {"identifier": "testSerialize", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSerialize() throws Exception {\n        System.setProperty(\"jvoicexml.xml.encoding\", \"UTF-8\");\n        final SsmlDocument doc = new SsmlDocument();\n        final Speak speak = doc.getSpeak();\n        speak.addText(\"Hello World!\");\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        final ObjectOutputStream oout = new ObjectOutputStream(out);\n        oout.writeObject(doc);\n        final ByteArrayInputStream in =\n            new ByteArrayInputStream(out.toByteArray());\n        final ObjectInputStream oin = new ObjectInputStream(in);\n        final Object o = oin.readObject();\n        Assert.assertEquals(doc.toString(), o.toString());\n\n        final String str = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"\n            + \"<speak><audio \"\n            + \"src=\\\"http://localhost:8080/ivr.audios-0.0.1/a774.wav\\\"></audio>\"\n            + \"</speak>\";\n        final StringReader reader = new StringReader(str);\n        final InputSource source = new InputSource(reader);\n        final SsmlDocument doc2 = new SsmlDocument(source);\n        final ByteArrayOutputStream out2 = new ByteArrayOutputStream();\n        final ObjectOutputStream oout2 = new ObjectOutputStream(out2);\n        oout2.writeObject(doc2);\n        final ByteArrayInputStream in2 =\n            new ByteArrayInputStream(out2.toByteArray());\n        final ObjectInputStream oin2 = new ObjectInputStream(in2);\n        final Object o2 = oin2.readObject();\n        Assert.assertEquals(doc2.toString(), o2.toString());\n    }", "signature": "void testSerialize()", "full_signature": "@Test public void testSerialize()", "class_method_signature": "TestSsmlDocument.testSerialize()", "testcase": true, "constructor": false, "invocations": ["setProperty", "getSpeak", "addText", "writeObject", "toByteArray", "readObject", "assertEquals", "toString", "toString", "writeObject", "toByteArray", "readObject", "assertEquals", "toString", "toString"]}, "focal_class": {"identifier": "SsmlDocument", "superclass": "extends XmlDocument", "interfaces": "", "fields": [{"original_string": "private static final long serialVersionUID = -1716883656994858759L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = -1716883656994858759L", "var_name": "serialVersionUID"}, {"original_string": "private static final transient SsmlNodeFactory NODE_FACTORY;", "modifier": "private static final transient", "type": "SsmlNodeFactory", "declarator": "NODE_FACTORY", "var_name": "NODE_FACTORY"}], "methods": [{"identifier": "SsmlDocument", "parameters": "()", "modifiers": "public", "return": "", "signature": " SsmlDocument()", "full_signature": "public  SsmlDocument()", "class_method_signature": "SsmlDocument.SsmlDocument()", "testcase": false, "constructor": true}, {"identifier": "SsmlDocument", "parameters": "(final InputSource source)", "modifiers": "public", "return": "", "signature": " SsmlDocument(final InputSource source)", "full_signature": "public  SsmlDocument(final InputSource source)", "class_method_signature": "SsmlDocument.SsmlDocument(final InputSource source)", "testcase": false, "constructor": true}, {"identifier": "getXmlNodefactory", "parameters": "()", "modifiers": "@Override public", "return": "XmlNodeFactory<?>", "signature": "XmlNodeFactory<?> getXmlNodefactory()", "full_signature": "@Override public XmlNodeFactory<?> getXmlNodefactory()", "class_method_signature": "SsmlDocument.getXmlNodefactory()", "testcase": false, "constructor": false}, {"identifier": "createRootNode", "parameters": "()", "modifiers": "@Override protected", "return": "Node", "signature": "Node createRootNode()", "full_signature": "@Override protected Node createRootNode()", "class_method_signature": "SsmlDocument.createRootNode()", "testcase": false, "constructor": false}, {"identifier": "getXmlNodeList", "parameters": "(final NodeList nodeList)", "modifiers": "@Override protected", "return": "NodeList", "signature": "NodeList getXmlNodeList(final NodeList nodeList)", "full_signature": "@Override protected NodeList getXmlNodeList(final NodeList nodeList)", "class_method_signature": "SsmlDocument.getXmlNodeList(final NodeList nodeList)", "testcase": false, "constructor": false}, {"identifier": "getSpeak", "parameters": "()", "modifiers": "public", "return": "Speak", "signature": "Speak getSpeak()", "full_signature": "public Speak getSpeak()", "class_method_signature": "SsmlDocument.getSpeak()", "testcase": false, "constructor": false}, {"identifier": "getDefaultNamespaceURI", "parameters": "()", "modifiers": "@Override protected", "return": "String", "signature": "String getDefaultNamespaceURI()", "full_signature": "@Override protected String getDefaultNamespaceURI()", "class_method_signature": "SsmlDocument.getDefaultNamespaceURI()", "testcase": false, "constructor": false}], "file": "org.jvoicexml.xml/src/main/java/org/jvoicexml/xml/ssml/SsmlDocument.java"}, "focal_method": {"identifier": "getSpeak", "parameters": "()", "modifiers": "public", "return": "Speak", "body": "public Speak getSpeak() {\n        NodeList speak = getElementsByTagName(Speak.TAG_NAME);\n        if (speak.getLength() == 0) {\n            speak = getElementsByTagNameNS(\"*\", Speak.TAG_NAME);\n            if (speak.getLength() == 0) {\n                return null;\n            }\n        }\n\n        return new Speak(speak.item(0));\n    }", "signature": "Speak getSpeak()", "full_signature": "public Speak getSpeak()", "class_method_signature": "SsmlDocument.getSpeak()", "testcase": false, "constructor": false, "invocations": ["getElementsByTagName", "getLength", "getElementsByTagNameNS", "getLength", "item"]}, "repository": {"repo_id": 37717709, "url": "https://github.com/JVoiceXML/JVoiceXML", "language": "Java", "is_fork": false, "fork_count": 32, "stargazer_count": 50, "size": 436089, "license": "licensed"}}