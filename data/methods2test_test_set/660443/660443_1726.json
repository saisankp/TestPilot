{"test_class": {"identifier": "SubstructureFingerprinterTest", "superclass": "extends AbstractFixedLengthFingerprinterTest", "interfaces": "", "fields": [], "file": "descriptor/fingerprint/src/test/java/org/openscience/cdk/fingerprint/SubstructureFingerprinterTest.java"}, "test_case": {"identifier": "testGetCountFingerprint", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGetCountFingerprint() throws Exception {\n        // See other function for specific test cases\n    }", "signature": "void testGetCountFingerprint()", "full_signature": "@Test public void testGetCountFingerprint()", "class_method_signature": "SubstructureFingerprinterTest.testGetCountFingerprint()", "testcase": true, "constructor": false, "invocations": []}, "focal_class": {"identifier": "SubstructureFingerprinter", "superclass": "extends AbstractFingerprinter", "interfaces": "implements IFingerprinter", "fields": [{"original_string": "private List<Key> keys = new ArrayList<>();", "modifier": "private", "type": "List<Key>", "declarator": "keys = new ArrayList<>()", "var_name": "keys"}], "methods": [{"identifier": "SubstructureFingerprinter", "parameters": "(String[] smarts)", "modifiers": "public", "return": "", "signature": " SubstructureFingerprinter(String[] smarts)", "full_signature": "public  SubstructureFingerprinter(String[] smarts)", "class_method_signature": "SubstructureFingerprinter.SubstructureFingerprinter(String[] smarts)", "testcase": false, "constructor": true}, {"identifier": "SubstructureFingerprinter", "parameters": "()", "modifiers": "public", "return": "", "signature": " SubstructureFingerprinter()", "full_signature": "public  SubstructureFingerprinter()", "class_method_signature": "SubstructureFingerprinter.SubstructureFingerprinter()", "testcase": false, "constructor": true}, {"identifier": "setSmarts", "parameters": "(String[] smarts)", "modifiers": "private", "return": "void", "signature": "void setSmarts(String[] smarts)", "full_signature": "private void setSmarts(String[] smarts)", "class_method_signature": "SubstructureFingerprinter.setSmarts(String[] smarts)", "testcase": false, "constructor": false}, {"identifier": "getBitFingerprint", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "IBitFingerprint", "signature": "IBitFingerprint getBitFingerprint(IAtomContainer atomContainer)", "full_signature": "@Override public IBitFingerprint getBitFingerprint(IAtomContainer atomContainer)", "class_method_signature": "SubstructureFingerprinter.getBitFingerprint(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getCountFingerprint", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "ICountFingerprint", "signature": "ICountFingerprint getCountFingerprint(IAtomContainer atomContainer)", "full_signature": "@Override public ICountFingerprint getCountFingerprint(IAtomContainer atomContainer)", "class_method_signature": "SubstructureFingerprinter.getCountFingerprint(IAtomContainer atomContainer)", "testcase": false, "constructor": false}, {"identifier": "getRawFingerprint", "parameters": "(IAtomContainer iAtomContainer)", "modifiers": "@Override public", "return": "Map<String, Integer>", "signature": "Map<String, Integer> getRawFingerprint(IAtomContainer iAtomContainer)", "full_signature": "@Override public Map<String, Integer> getRawFingerprint(IAtomContainer iAtomContainer)", "class_method_signature": "SubstructureFingerprinter.getRawFingerprint(IAtomContainer iAtomContainer)", "testcase": false, "constructor": false}, {"identifier": "getSize", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int getSize()", "full_signature": "@Override public int getSize()", "class_method_signature": "SubstructureFingerprinter.getSize()", "testcase": false, "constructor": false}, {"identifier": "getSubstructure", "parameters": "(int bitIndex)", "modifiers": "public", "return": "String", "signature": "String getSubstructure(int bitIndex)", "full_signature": "public String getSubstructure(int bitIndex)", "class_method_signature": "SubstructureFingerprinter.getSubstructure(int bitIndex)", "testcase": false, "constructor": false}], "file": "descriptor/fingerprint/src/main/java/org/openscience/cdk/fingerprint/SubstructureFingerprinter.java"}, "focal_method": {"identifier": "getCountFingerprint", "parameters": "(IAtomContainer atomContainer)", "modifiers": "@Override public", "return": "ICountFingerprint", "body": "@Override\n    public ICountFingerprint getCountFingerprint(IAtomContainer atomContainer) throws CDKException {\n        if (keys.isEmpty()) {\n            throw new CDKException(\"No substructures were defined\");\n        }\n\n        // init SMARTS invariants (connectivity, degree, etc)\n        SmartsPattern.prepare(atomContainer);\n\n        final Map<Integer, Integer> map = new TreeMap<Integer, Integer>();\n        for (int i = 0; i < keys.size(); i++) {\n            Pattern ptrn = keys.get(i).pattern;\n            map.put(i,\n                    ptrn.matchAll(atomContainer)\n                        .countUnique());\n        }\n\n        final int length = keys.size();\n        final int size = map.size();\n        final int[] hash = new int[size], count = new int[size];\n        int n = 0;\n        for (int h : map.keySet()) {\n            hash[n] = h;\n            count[n++] = map.get(h);\n        }\n\n        return new ICountFingerprint() {\n\n            @Override\n            public long size() { return length; }\n\n            @Override\n            public int numOfPopulatedbins() { return size; }\n\n            @Override\n            public int getCount(int index) { return count[index]; }\n\n            @Override\n            public int getHash(int index) { return hash[index]; }\n\n            @Override\n            public void merge(ICountFingerprint fp) {}\n\n            @Override\n            public void setBehaveAsBitFingerprint(boolean behaveAsBitFingerprint) {}\n\n            @Override\n            public boolean hasHash(int hash) { return map.containsKey(hash); }\n\n            @Override\n            public int getCountForHash(int hash) { return map.get(hash); }\n        };\n    }", "signature": "ICountFingerprint getCountFingerprint(IAtomContainer atomContainer)", "full_signature": "@Override public ICountFingerprint getCountFingerprint(IAtomContainer atomContainer)", "class_method_signature": "SubstructureFingerprinter.getCountFingerprint(IAtomContainer atomContainer)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "prepare", "size", "get", "put", "countUnique", "matchAll", "size", "size", "keySet", "get", "containsKey", "get"]}, "repository": {"repo_id": 660443, "url": "https://github.com/cdk/cdk", "stars": 220, "created": "5/11/2010 8:30:07 AM +00:00", "updates": "2020-01-27T19:04:04+00:00", "fork": "False", "license": "licensed"}}