{"test_class": {"identifier": "SubstituteTransformRuntimeTest", "superclass": "", "interfaces": "", "fields": [], "file": "streams/runtime/src/test/java/com/hortonworks/streamline/streams/runtime/transform/SubstituteTransformRuntimeTest.java"}, "test_case": {"identifier": "testSubstituteNoVars", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSubstituteNoVars() throws Exception {\n        Map<String, Object> fieldsAndValues = new HashMap<>();\n        fieldsAndValues.put(\"1\", \"one\");\n        fieldsAndValues.put(\"2\", \"two\");\n        fieldsAndValues.put(\"3\", \"three\");\n\n        StreamlineEvent event = StreamlineEventImpl.builder().fieldsAndValues(fieldsAndValues).dataSourceId(\"dsrcid\").build();\n        TransformRuntime transformRuntime = new SubstituteTransformRuntime();\n        List<StreamlineEvent> result = transformRuntime.execute(event);\n        assertEquals(1, result.size());\n        assertEquals(3, result.get(0).size());\n        assertEquals(\"one\", result.get(0).get(\"1\"));\n        assertEquals(\"two\", result.get(0).get(\"2\"));\n        assertEquals(\"three\", result.get(0).get(\"3\"));\n    }", "signature": "void testSubstituteNoVars()", "full_signature": "@Test public void testSubstituteNoVars()", "class_method_signature": "SubstituteTransformRuntimeTest.testSubstituteNoVars()", "testcase": true, "constructor": false, "invocations": ["put", "put", "put", "build", "dataSourceId", "fieldsAndValues", "builder", "execute", "assertEquals", "size", "assertEquals", "size", "get", "assertEquals", "get", "get", "assertEquals", "get", "get", "assertEquals", "get", "get"]}, "focal_class": {"identifier": "SubstituteTransformRuntime", "superclass": "", "interfaces": "implements TransformRuntime", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(SubstituteTransformRuntime.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(SubstituteTransformRuntime.class)", "var_name": "LOG"}, {"original_string": "private final SubstituteTransform substituteTransform;", "modifier": "private final", "type": "SubstituteTransform", "declarator": "substituteTransform", "var_name": "substituteTransform"}], "methods": [{"identifier": "SubstituteTransformRuntime", "parameters": "()", "modifiers": "public", "return": "", "signature": " SubstituteTransformRuntime()", "full_signature": "public  SubstituteTransformRuntime()", "class_method_signature": "SubstituteTransformRuntime.SubstituteTransformRuntime()", "testcase": false, "constructor": true}, {"identifier": "SubstituteTransformRuntime", "parameters": "(SubstituteTransform substituteTransform)", "modifiers": "public", "return": "", "signature": " SubstituteTransformRuntime(SubstituteTransform substituteTransform)", "full_signature": "public  SubstituteTransformRuntime(SubstituteTransform substituteTransform)", "class_method_signature": "SubstituteTransformRuntime.SubstituteTransformRuntime(SubstituteTransform substituteTransform)", "testcase": false, "constructor": true}, {"identifier": "execute", "parameters": "(StreamlineEvent input)", "modifiers": "@Override public", "return": "List<StreamlineEvent>", "signature": "List<StreamlineEvent> execute(StreamlineEvent input)", "full_signature": "@Override public List<StreamlineEvent> execute(StreamlineEvent input)", "class_method_signature": "SubstituteTransformRuntime.execute(StreamlineEvent input)", "testcase": false, "constructor": false}, {"identifier": "substitute", "parameters": "(StreamlineEvent input)", "modifiers": "private", "return": "List<StreamlineEvent>", "signature": "List<StreamlineEvent> substitute(StreamlineEvent input)", "full_signature": "private List<StreamlineEvent> substitute(StreamlineEvent input)", "class_method_signature": "SubstituteTransformRuntime.substitute(StreamlineEvent input)", "testcase": false, "constructor": false}, {"identifier": "shouldSubstitue", "parameters": "(String key, Object value)", "modifiers": "private", "return": "boolean", "signature": "boolean shouldSubstitue(String key, Object value)", "full_signature": "private boolean shouldSubstitue(String key, Object value)", "class_method_signature": "SubstituteTransformRuntime.shouldSubstitue(String key, Object value)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SubstituteTransformRuntime.toString()", "testcase": false, "constructor": false}], "file": "streams/runtime/src/main/java/com/hortonworks/streamline/streams/runtime/transform/SubstituteTransformRuntime.java"}, "focal_method": {"identifier": "execute", "parameters": "(StreamlineEvent input)", "modifiers": "@Override public", "return": "List<StreamlineEvent>", "body": "@Override\n    public List<StreamlineEvent> execute(StreamlineEvent input) {\n        List<StreamlineEvent> result;\n        try {\n            result = substitute(input);\n        } catch (Exception ex) {\n            LOG.error(\"Variable substitution failed\", ex);\n            LOG.error(\"Returning the input event as is without replacing the variables\");\n            result = Collections.singletonList(input);\n        }\n        return result;\n    }", "signature": "List<StreamlineEvent> execute(StreamlineEvent input)", "full_signature": "@Override public List<StreamlineEvent> execute(StreamlineEvent input)", "class_method_signature": "SubstituteTransformRuntime.execute(StreamlineEvent input)", "testcase": false, "constructor": false, "invocations": ["substitute", "error", "error", "singletonList"]}, "repository": {"repo_id": 35627039, "url": "https://github.com/hortonworks/streamline", "language": "Java", "is_fork": false, "fork_count": 94, "stargazer_count": 147, "size": 69226, "license": "licensed"}}