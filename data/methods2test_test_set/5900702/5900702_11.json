{"test_class": {"identifier": "BundleClassesFinderTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock\n\tprivate Bundle bundle;", "modifier": "@Mock\n\tprivate", "type": "Bundle", "declarator": "bundle", "var_name": "bundle"}, {"original_string": "private BundleClassesFinder classFinder;", "modifier": "private", "type": "BundleClassesFinder", "declarator": "classFinder", "var_name": "classFinder"}], "file": "slice-core/src/test/java/com/cognifide/slice/core/internal/scanner/BundleClassesFinderTest.java"}, "test_case": {"identifier": "testGetClasses", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testGetClasses() throws ClassNotFoundException {\n\t\tbundleSetup();\n\t\tCollection<Class<?>> classes = classFinder.getClasses(Lists.newArrayList(bundle));\n\t\tAssert.assertEquals(classes.size(), 3);\n\t\tfor (Class clazz : classes) {\n\t\t\tAssert.assertFalse(clazz.getSimpleName().equals(\"TestBundleClass4\"));\n\t\t}\n\t}", "signature": "void testGetClasses()", "full_signature": "@Test public void testGetClasses()", "class_method_signature": "BundleClassesFinderTest.testGetClasses()", "testcase": true, "constructor": false, "invocations": ["bundleSetup", "getClasses", "newArrayList", "assertEquals", "size", "assertFalse", "equals", "getSimpleName"]}, "focal_class": {"identifier": "BundleClassesFinder", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOG = LoggerFactory.getLogger(BundleClassesFinder.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOG = LoggerFactory.getLogger(BundleClassesFinder.class)", "var_name": "LOG"}, {"original_string": "private static final String RESOURCE_PATTERN = \"*.class\";", "modifier": "private static final", "type": "String", "declarator": "RESOURCE_PATTERN = \"*.class\"", "var_name": "RESOURCE_PATTERN"}, {"original_string": "private final String basePackage;", "modifier": "private final", "type": "String", "declarator": "basePackage", "var_name": "basePackage"}, {"original_string": "private List<ClassFilter> filters = new ArrayList<ClassFilter>();", "modifier": "private", "type": "List<ClassFilter>", "declarator": "filters = new ArrayList<ClassFilter>()", "var_name": "filters"}], "methods": [{"identifier": "BundleClassesFinder", "parameters": "(String basePackage)", "modifiers": "public", "return": "", "signature": " BundleClassesFinder(String basePackage)", "full_signature": "public  BundleClassesFinder(String basePackage)", "class_method_signature": "BundleClassesFinder.BundleClassesFinder(String basePackage)", "testcase": false, "constructor": true}, {"identifier": "getClasses", "parameters": "(final Bundle bundle)", "modifiers": "public", "return": "Collection<Class<?>>", "signature": "Collection<Class<?>> getClasses(final Bundle bundle)", "full_signature": "public Collection<Class<?>> getClasses(final Bundle bundle)", "class_method_signature": "BundleClassesFinder.getClasses(final Bundle bundle)", "testcase": false, "constructor": false}, {"identifier": "getClasses", "parameters": "(final Collection<Bundle> bundles)", "modifiers": "public", "return": "Collection<Class<?>>", "signature": "Collection<Class<?>> getClasses(final Collection<Bundle> bundles)", "full_signature": "public Collection<Class<?>> getClasses(final Collection<Bundle> bundles)", "class_method_signature": "BundleClassesFinder.getClasses(final Collection<Bundle> bundles)", "testcase": false, "constructor": false}, {"identifier": "accepts", "parameters": "(ClassReader classReader)", "modifiers": "private", "return": "boolean", "signature": "boolean accepts(ClassReader classReader)", "full_signature": "private boolean accepts(ClassReader classReader)", "class_method_signature": "BundleClassesFinder.accepts(ClassReader classReader)", "testcase": false, "constructor": false}, {"identifier": "addFilter", "parameters": "(ClassFilter classFilter)", "modifiers": "public", "return": "void", "signature": "void addFilter(ClassFilter classFilter)", "full_signature": "public void addFilter(ClassFilter classFilter)", "class_method_signature": "BundleClassesFinder.addFilter(ClassFilter classFilter)", "testcase": false, "constructor": false}, {"identifier": "traverseBundlesForOsgiServices", "parameters": "(final Collection<Bundle> bundles)", "modifiers": "public", "return": "Collection<Class<?>>", "signature": "Collection<Class<?>> traverseBundlesForOsgiServices(final Collection<Bundle> bundles)", "full_signature": "public Collection<Class<?>> traverseBundlesForOsgiServices(final Collection<Bundle> bundles)", "class_method_signature": "BundleClassesFinder.traverseBundlesForOsgiServices(final Collection<Bundle> bundles)", "testcase": false, "constructor": false}, {"identifier": "readOsgiServicesForClass", "parameters": "(Class<?> clazz)", "modifiers": "", "return": "Set<Class<?>>", "signature": "Set<Class<?>> readOsgiServicesForClass(Class<?> clazz)", "full_signature": " Set<Class<?>> readOsgiServicesForClass(Class<?> clazz)", "class_method_signature": "BundleClassesFinder.readOsgiServicesForClass(Class<?> clazz)", "testcase": false, "constructor": false}], "file": "slice-core/src/main/java/com/cognifide/slice/core/internal/scanner/BundleClassesFinder.java"}, "focal_method": {"identifier": "getClasses", "parameters": "(final Bundle bundle)", "modifiers": "public", "return": "Collection<Class<?>>", "body": "public Collection<Class<?>> getClasses(final Bundle bundle) {\n\t\tCollection<Class<?>> classes = new ArrayList<Class<?>>();\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tEnumeration<URL> classEntries = bundle.findEntries(this.basePackage, RESOURCE_PATTERN, true);\n\t\twhile ((classEntries != null) && classEntries.hasMoreElements()) {\n\t\t\ttry {\n\t\t\t\tURL classURL = classEntries.nextElement();\n\t\t\t\tClassReader classReader = new ClassReader(classURL.openStream());\n\t\t\t\tif (accepts(classReader)) {\n\t\t\t\t\tString className = classReader.getClassName().replace('/', '.');\n\t\t\t\t\tif (LOG.isDebugEnabled()) {\n\t\t\t\t\t\tLOG.debug(\"Class: \" + className + \" has been found.\");\n\t\t\t\t\t}\n\t\t\t\t\tClass<?> clazz = bundle.loadClass(className);\n\t\t\t\t\tclasses.add(clazz);\n\t\t\t\t}\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\tLOG.error(\"Error loading class!\", e);\n\t\t\t} catch (IOException e) {\n\t\t\t\tLOG.error(\"Error reading the class!\", e);\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}", "signature": "Collection<Class<?>> getClasses(final Bundle bundle)", "full_signature": "public Collection<Class<?>> getClasses(final Bundle bundle)", "class_method_signature": "BundleClassesFinder.getClasses(final Bundle bundle)", "testcase": false, "constructor": false, "invocations": ["findEntries", "hasMoreElements", "nextElement", "openStream", "accepts", "replace", "getClassName", "isDebugEnabled", "debug", "loadClass", "add", "error", "error"]}, "repository": {"repo_id": 5900702, "url": "https://github.com/Cognifide/Slice", "language": "Java", "is_fork": false, "fork_count": 23, "stargazer_count": 61, "size": 11367, "license": "licensed"}}