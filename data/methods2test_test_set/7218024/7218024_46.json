{"test_class": {"identifier": "TestDynamicInputFormat", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(TestDynamicInputFormat.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(TestDynamicInputFormat.class)", "var_name": "LOG"}, {"original_string": "private static MiniDFSCluster cluster;", "modifier": "private static", "type": "MiniDFSCluster", "declarator": "cluster", "var_name": "cluster"}, {"original_string": "private static final int N_FILES = 1000;", "modifier": "private static final", "type": "int", "declarator": "N_FILES = 1000", "var_name": "N_FILES"}, {"original_string": "private static final int NUM_SPLITS = 7;", "modifier": "private static final", "type": "int", "declarator": "NUM_SPLITS = 7", "var_name": "NUM_SPLITS"}, {"original_string": "private static final Credentials CREDENTIALS = new Credentials();", "modifier": "private static final", "type": "Credentials", "declarator": "CREDENTIALS = new Credentials()", "var_name": "CREDENTIALS"}, {"original_string": "private static List<String> expectedFilePaths = new ArrayList<String>(N_FILES);", "modifier": "private static", "type": "List<String>", "declarator": "expectedFilePaths = new ArrayList<String>(N_FILES)", "var_name": "expectedFilePaths"}], "file": "conduit-distcp/src/test/java/com/inmobi/conduit/distcp/tools/mapred/lib/TestDynamicInputFormat.java"}, "test_case": {"identifier": "testGetSplitRatio", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testGetSplitRatio() throws Exception {\n    Assert.assertEquals(1, DynamicInputFormat.getSplitRatio(1, 1000000000));\n    Assert.assertEquals(2, DynamicInputFormat.getSplitRatio(11000000, 10));\n    Assert.assertEquals(4, DynamicInputFormat.getSplitRatio(30, 700));\n    Assert.assertEquals(2, DynamicInputFormat.getSplitRatio(30, 200));\n  }", "signature": "void testGetSplitRatio()", "full_signature": "@Test public void testGetSplitRatio()", "class_method_signature": "TestDynamicInputFormat.testGetSplitRatio()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "getSplitRatio", "assertEquals", "getSplitRatio", "assertEquals", "getSplitRatio", "assertEquals", "getSplitRatio"]}, "focal_class": {"identifier": "DynamicInputFormat", "superclass": "extends InputFormat<K, V>", "interfaces": "", "fields": [{"original_string": "private static final Log LOG = LogFactory.getLog(DynamicInputFormat.class);", "modifier": "private static final", "type": "Log", "declarator": "LOG = LogFactory.getLog(DynamicInputFormat.class)", "var_name": "LOG"}, {"original_string": "private static final String CONF_LABEL_LISTING_SPLIT_RATIO\n          = \"mapred.listing.split.ratio\";", "modifier": "private static final", "type": "String", "declarator": "CONF_LABEL_LISTING_SPLIT_RATIO\n          = \"mapred.listing.split.ratio\"", "var_name": "CONF_LABEL_LISTING_SPLIT_RATIO"}, {"original_string": "private static final String CONF_LABEL_NUM_SPLITS\n          = \"mapred.num.splits\";", "modifier": "private static final", "type": "String", "declarator": "CONF_LABEL_NUM_SPLITS\n          = \"mapred.num.splits\"", "var_name": "CONF_LABEL_NUM_SPLITS"}, {"original_string": "private static final String CONF_LABEL_NUM_ENTRIES_PER_CHUNK\n          = \"mapred.num.entries.per.chunk\";", "modifier": "private static final", "type": "String", "declarator": "CONF_LABEL_NUM_ENTRIES_PER_CHUNK\n          = \"mapred.num.entries.per.chunk\"", "var_name": "CONF_LABEL_NUM_ENTRIES_PER_CHUNK"}, {"original_string": "private static int N_CHUNKS_OPEN_AT_ONCE_DEFAULT = 16;", "modifier": "private static", "type": "int", "declarator": "N_CHUNKS_OPEN_AT_ONCE_DEFAULT = 16", "var_name": "N_CHUNKS_OPEN_AT_ONCE_DEFAULT"}, {"original_string": "private static final int MAX_CHUNKS_TOLERABLE = 400;", "modifier": "private static final", "type": "int", "declarator": "MAX_CHUNKS_TOLERABLE = 400", "var_name": "MAX_CHUNKS_TOLERABLE"}, {"original_string": "private static final int MAX_CHUNKS_IDEAL     = 100;", "modifier": "private static final", "type": "int", "declarator": "MAX_CHUNKS_IDEAL     = 100", "var_name": "MAX_CHUNKS_IDEAL"}, {"original_string": "private static final int MIN_RECORDS_PER_CHUNK = 5;", "modifier": "private static final", "type": "int", "declarator": "MIN_RECORDS_PER_CHUNK = 5", "var_name": "MIN_RECORDS_PER_CHUNK"}, {"original_string": "private static final int SPLIT_RATIO_DEFAULT  = 2;", "modifier": "private static final", "type": "int", "declarator": "SPLIT_RATIO_DEFAULT  = 2", "var_name": "SPLIT_RATIO_DEFAULT"}], "methods": [{"identifier": "getSplits", "parameters": "(JobContext jobContext)", "modifiers": "@Override public", "return": "List<InputSplit>", "signature": "List<InputSplit> getSplits(JobContext jobContext)", "full_signature": "@Override public List<InputSplit> getSplits(JobContext jobContext)", "class_method_signature": "DynamicInputFormat.getSplits(JobContext jobContext)", "testcase": false, "constructor": false}, {"identifier": "createSplits", "parameters": "(JobContext jobContext,\n                                        List<DynamicInputChunk> chunks)", "modifiers": "private", "return": "List<InputSplit>", "signature": "List<InputSplit> createSplits(JobContext jobContext,\n                                        List<DynamicInputChunk> chunks)", "full_signature": "private List<InputSplit> createSplits(JobContext jobContext,\n                                        List<DynamicInputChunk> chunks)", "class_method_signature": "DynamicInputFormat.createSplits(JobContext jobContext,\n                                        List<DynamicInputChunk> chunks)", "testcase": false, "constructor": false}, {"identifier": "splitCopyListingIntoChunksWithShuffle", "parameters": "(JobContext context)", "modifiers": "private", "return": "List<DynamicInputChunk>", "signature": "List<DynamicInputChunk> splitCopyListingIntoChunksWithShuffle(JobContext context)", "full_signature": "private List<DynamicInputChunk> splitCopyListingIntoChunksWithShuffle(JobContext context)", "class_method_signature": "DynamicInputFormat.splitCopyListingIntoChunksWithShuffle(JobContext context)", "testcase": false, "constructor": false}, {"identifier": "validateNumChunksUsing", "parameters": "(int splitRatio, int numMaps)", "modifiers": "private static", "return": "void", "signature": "void validateNumChunksUsing(int splitRatio, int numMaps)", "full_signature": "private static void validateNumChunksUsing(int splitRatio, int numMaps)", "class_method_signature": "DynamicInputFormat.validateNumChunksUsing(int splitRatio, int numMaps)", "testcase": false, "constructor": false}, {"identifier": "closeAll", "parameters": "(List<DynamicInputChunk> chunks)", "modifiers": "private static", "return": "void", "signature": "void closeAll(List<DynamicInputChunk> chunks)", "full_signature": "private static void closeAll(List<DynamicInputChunk> chunks)", "class_method_signature": "DynamicInputFormat.closeAll(List<DynamicInputChunk> chunks)", "testcase": false, "constructor": false}, {"identifier": "createChunks", "parameters": "(DynamicInputChunkSet chunkSet,\n                      int chunkCount, int nChunksTotal, int nChunksOpenAtOnce)", "modifiers": "private static", "return": "List<DynamicInputChunk>", "signature": "List<DynamicInputChunk> createChunks(DynamicInputChunkSet chunkSet,\n                      int chunkCount, int nChunksTotal, int nChunksOpenAtOnce)", "full_signature": "private static List<DynamicInputChunk> createChunks(DynamicInputChunkSet chunkSet,\n                      int chunkCount, int nChunksTotal, int nChunksOpenAtOnce)", "class_method_signature": "DynamicInputFormat.createChunks(DynamicInputChunkSet chunkSet,\n                      int chunkCount, int nChunksTotal, int nChunksOpenAtOnce)", "testcase": false, "constructor": false}, {"identifier": "createChunk", "parameters": "(int chunkId,\n                           DynamicInputChunkSet chunkSet)", "modifiers": "private static", "return": "DynamicInputChunk", "signature": "DynamicInputChunk createChunk(int chunkId,\n                           DynamicInputChunkSet chunkSet)", "full_signature": "private static DynamicInputChunk createChunk(int chunkId,\n                           DynamicInputChunkSet chunkSet)", "class_method_signature": "DynamicInputFormat.createChunk(int chunkId,\n                           DynamicInputChunkSet chunkSet)", "testcase": false, "constructor": false}, {"identifier": "getListingFilePath", "parameters": "(Configuration configuration)", "modifiers": "private static", "return": "Path", "signature": "Path getListingFilePath(Configuration configuration)", "full_signature": "private static Path getListingFilePath(Configuration configuration)", "class_method_signature": "DynamicInputFormat.getListingFilePath(Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "getNumberOfRecords", "parameters": "(Configuration configuration)", "modifiers": "private static", "return": "int", "signature": "int getNumberOfRecords(Configuration configuration)", "full_signature": "private static int getNumberOfRecords(Configuration configuration)", "class_method_signature": "DynamicInputFormat.getNumberOfRecords(Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "getNumMapTasks", "parameters": "(Configuration configuration)", "modifiers": "private static", "return": "int", "signature": "int getNumMapTasks(Configuration configuration)", "full_signature": "private static int getNumMapTasks(Configuration configuration)", "class_method_signature": "DynamicInputFormat.getNumMapTasks(Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "getListingSplitRatio", "parameters": "(Configuration configuration,\n                                            int numMaps, int numPaths)", "modifiers": "private static", "return": "int", "signature": "int getListingSplitRatio(Configuration configuration,\n                                            int numMaps, int numPaths)", "full_signature": "private static int getListingSplitRatio(Configuration configuration,\n                                            int numMaps, int numPaths)", "class_method_signature": "DynamicInputFormat.getListingSplitRatio(Configuration configuration,\n                                            int numMaps, int numPaths)", "testcase": false, "constructor": false}, {"identifier": "getSplitRatio", "parameters": "(int nMaps, int nRecords)", "modifiers": "static", "return": "int", "signature": "int getSplitRatio(int nMaps, int nRecords)", "full_signature": "static int getSplitRatio(int nMaps, int nRecords)", "class_method_signature": "DynamicInputFormat.getSplitRatio(int nMaps, int nRecords)", "testcase": false, "constructor": false}, {"identifier": "getNumEntriesPerChunk", "parameters": "(Configuration configuration)", "modifiers": "private", "return": "int", "signature": "int getNumEntriesPerChunk(Configuration configuration)", "full_signature": "private int getNumEntriesPerChunk(Configuration configuration)", "class_method_signature": "DynamicInputFormat.getNumEntriesPerChunk(Configuration configuration)", "testcase": false, "constructor": false}, {"identifier": "createRecordReader", "parameters": "(\n          InputSplit inputSplit,\n          TaskAttemptContext taskAttemptContext)", "modifiers": "@Override public", "return": "RecordReader<K, V>", "signature": "RecordReader<K, V> createRecordReader(\n          InputSplit inputSplit,\n          TaskAttemptContext taskAttemptContext)", "full_signature": "@Override public RecordReader<K, V> createRecordReader(\n          InputSplit inputSplit,\n          TaskAttemptContext taskAttemptContext)", "class_method_signature": "DynamicInputFormat.createRecordReader(\n          InputSplit inputSplit,\n          TaskAttemptContext taskAttemptContext)", "testcase": false, "constructor": false}], "file": "conduit-distcp/src/main/java/com/inmobi/conduit/distcp/tools/mapred/lib/DynamicInputFormat.java"}, "focal_method": {"identifier": "getSplitRatio", "parameters": "(int nMaps, int nRecords)", "modifiers": "static", "return": "int", "body": "static int getSplitRatio(int nMaps, int nRecords) {\n    if (nMaps == 1) {\n      LOG.warn(\"nMaps == 1. Why use DynamicInputFormat?\");\n      return 1;\n    }\n\n    if (nMaps > MAX_CHUNKS_IDEAL)\n      return SPLIT_RATIO_DEFAULT;\n\n    int nPickups = (int)Math.ceil((float)MAX_CHUNKS_IDEAL/nMaps);\n    int nRecordsPerChunk = (int)Math.ceil((float)nRecords/(nMaps*nPickups));\n\n    return nRecordsPerChunk < MIN_RECORDS_PER_CHUNK ?\n              SPLIT_RATIO_DEFAULT : nPickups;\n  }", "signature": "int getSplitRatio(int nMaps, int nRecords)", "full_signature": "static int getSplitRatio(int nMaps, int nRecords)", "class_method_signature": "DynamicInputFormat.getSplitRatio(int nMaps, int nRecords)", "testcase": false, "constructor": false, "invocations": ["warn", "ceil", "ceil"]}, "repository": {"repo_id": 7218024, "url": "https://github.com/InMobi/conduit", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 9, "size": 49400, "license": "licensed"}}