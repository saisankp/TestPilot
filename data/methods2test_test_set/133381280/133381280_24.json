{"test_class": {"identifier": "MeasurableSchedulerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final AtomicLong AL = new AtomicLong(0);", "modifier": "private static final", "type": "AtomicLong", "declarator": "AL = new AtomicLong(0)", "var_name": "AL"}], "file": "client/lookout-core/src/test/java/com/alipay/lookout/step/MeasurableSchedulerTest.java"}, "test_case": {"identifier": "testSchedulerRunFixedRateSkipIfLong", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testSchedulerRunFixedRateSkipIfLong() {\n        Registry r = new DefaultRegistry();\n        MeasurableScheduler scheduler = new MeasurableScheduler(r, \"fixed-rate\", 1);\n        AL.set(0);\n        final AtomicLong latecount = new AtomicLong(0);\n        scheduler.scheduleAtFixedRateSkipIfLong(new Runnable() {\n            @Override\n            public void run() {\n                AL.incrementAndGet();\n                Random r = new Random();\n                int sleep = r.nextInt(150);\n                if (sleep >= 100)\n                    latecount.incrementAndGet();\n                try {\n                    Thread.sleep(sleep);\n                } catch (InterruptedException e) {\n                    System.err.println(\"eeee\");\n                }\n                System.out.println(\"--sleep:\" + sleep + \"--now:\" + System.currentTimeMillis());\n            }\n        }, 0, 100, TimeUnit.MILLISECONDS);\n\n        try {\n            Thread.sleep(3000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        scheduler.shutdown();\n        String str = printMetrics(r);\n        System.out.println(\"_____________\" + AL.get());\n    }", "signature": "void testSchedulerRunFixedRateSkipIfLong()", "full_signature": "@Test public void testSchedulerRunFixedRateSkipIfLong()", "class_method_signature": "MeasurableSchedulerTest.testSchedulerRunFixedRateSkipIfLong()", "testcase": true, "constructor": false, "invocations": ["set", "scheduleAtFixedRateSkipIfLong", "incrementAndGet", "nextInt", "incrementAndGet", "sleep", "println", "println", "currentTimeMillis", "sleep", "printStackTrace", "shutdown", "printMetrics", "println", "get"]}, "focal_class": {"identifier": "MeasurableScheduler", "superclass": "extends ThreadPoolExecutor", "interfaces": "implements ScheduledExecutorService,\n                                                           ScheduledService", "fields": [{"original_string": "private static final AtomicLong sequencer = new AtomicLong(0);", "modifier": "private static final", "type": "AtomicLong", "declarator": "sequencer = new AtomicLong(0)", "var_name": "sequencer"}, {"original_string": "private final Counter           activeCount;", "modifier": "private final", "type": "Counter", "declarator": "activeCount", "var_name": "activeCount"}, {"original_string": "private final Timer             taskExecutionTime;", "modifier": "private final", "type": "Timer", "declarator": "taskExecutionTime", "var_name": "taskExecutionTime"}, {"original_string": "private final Timer             taskExecutionDelay;", "modifier": "private final", "type": "Timer", "declarator": "taskExecutionDelay", "var_name": "taskExecutionDelay"}, {"original_string": "private final Counter           skipped;", "modifier": "private final", "type": "Counter", "declarator": "skipped", "var_name": "skipped"}, {"original_string": "Id                              id;", "modifier": "", "type": "Id", "declarator": "id", "var_name": "id"}, {"original_string": "Registry                        registry;", "modifier": "", "type": "Registry", "declarator": "registry", "var_name": "registry"}], "methods": [{"identifier": "MeasurableScheduler", "parameters": "(final Registry registry, final String name, int poolSize)", "modifiers": "public", "return": "", "signature": " MeasurableScheduler(final Registry registry, final String name, int poolSize)", "full_signature": "public  MeasurableScheduler(final Registry registry, final String name, int poolSize)", "class_method_signature": "MeasurableScheduler.MeasurableScheduler(final Registry registry, final String name, int poolSize)", "testcase": false, "constructor": true}, {"identifier": "newThreadFactory", "parameters": "(final String id)", "modifiers": "private static", "return": "ThreadFactory", "signature": "ThreadFactory newThreadFactory(final String id)", "full_signature": "private static ThreadFactory newThreadFactory(final String id)", "class_method_signature": "MeasurableScheduler.newThreadFactory(final String id)", "testcase": false, "constructor": false}, {"identifier": "schedule", "parameters": "(Runnable command, long delay, TimeUnit unit)", "modifiers": "@Override public", "return": "ScheduledFuture<?>", "signature": "ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit)", "full_signature": "@Override public ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit)", "class_method_signature": "MeasurableScheduler.schedule(Runnable command, long delay, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "schedule", "parameters": "(Callable<V> callable, long delay, TimeUnit unit)", "modifiers": "@Override public", "return": "ScheduledFuture<V>", "signature": "ScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit)", "full_signature": "@Override public ScheduledFuture<V> schedule(Callable<V> callable, long delay, TimeUnit unit)", "class_method_signature": "MeasurableScheduler.schedule(Callable<V> callable, long delay, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "scheduleAtFixedRateSkipIfLong", "parameters": "(Runnable command, long initialDelay,\n                                                            long period, TimeUnit unit)", "modifiers": "public", "return": "ScheduledFuture<?>", "signature": "ScheduledFuture<?> scheduleAtFixedRateSkipIfLong(Runnable command, long initialDelay,\n                                                            long period, TimeUnit unit)", "full_signature": "public ScheduledFuture<?> scheduleAtFixedRateSkipIfLong(Runnable command, long initialDelay,\n                                                            long period, TimeUnit unit)", "class_method_signature": "MeasurableScheduler.scheduleAtFixedRateSkipIfLong(Runnable command, long initialDelay,\n                                                            long period, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "scheduleAtFixedRate", "parameters": "(Runnable command, long initialDelay, long period,\n                                                  TimeUnit unit)", "modifiers": "@Override public", "return": "ScheduledFuture<?>", "signature": "ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period,\n                                                  TimeUnit unit)", "full_signature": "@Override public ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period,\n                                                  TimeUnit unit)", "class_method_signature": "MeasurableScheduler.scheduleAtFixedRate(Runnable command, long initialDelay, long period,\n                                                  TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "scheduleWithFixedDelay", "parameters": "(Runnable command, long initialDelay,\n                                                     long delay, TimeUnit unit)", "modifiers": "@Override public", "return": "ScheduledFuture<?>", "signature": "ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay,\n                                                     long delay, TimeUnit unit)", "full_signature": "@Override public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay,\n                                                     long delay, TimeUnit unit)", "class_method_signature": "MeasurableScheduler.scheduleWithFixedDelay(Runnable command, long initialDelay,\n                                                     long delay, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "decorateTask", "parameters": "(Runnable runnable,\n                                                          RunnableScheduledFuture<V> task)", "modifiers": "protected", "return": "RunnableScheduledFuture<V>", "signature": "RunnableScheduledFuture<V> decorateTask(Runnable runnable,\n                                                          RunnableScheduledFuture<V> task)", "full_signature": "protected RunnableScheduledFuture<V> decorateTask(Runnable runnable,\n                                                          RunnableScheduledFuture<V> task)", "class_method_signature": "MeasurableScheduler.decorateTask(Runnable runnable,\n                                                          RunnableScheduledFuture<V> task)", "testcase": false, "constructor": false}, {"identifier": "delayedExecute", "parameters": "(Runnable command)", "modifiers": "private", "return": "void", "signature": "void delayedExecute(Runnable command)", "full_signature": "private void delayedExecute(Runnable command)", "class_method_signature": "MeasurableScheduler.delayedExecute(Runnable command)", "testcase": false, "constructor": false}, {"identifier": "reject", "parameters": "(Runnable command)", "modifiers": "", "return": "void", "signature": "void reject(Runnable command)", "full_signature": " void reject(Runnable command)", "class_method_signature": "MeasurableScheduler.reject(Runnable command)", "testcase": false, "constructor": false}, {"identifier": "triggerTime", "parameters": "(long delay, TimeUnit unit)", "modifiers": "private", "return": "long", "signature": "long triggerTime(long delay, TimeUnit unit)", "full_signature": "private long triggerTime(long delay, TimeUnit unit)", "class_method_signature": "MeasurableScheduler.triggerTime(long delay, TimeUnit unit)", "testcase": false, "constructor": false}, {"identifier": "triggerTime", "parameters": "(long delay)", "modifiers": "", "return": "long", "signature": "long triggerTime(long delay)", "full_signature": " long triggerTime(long delay)", "class_method_signature": "MeasurableScheduler.triggerTime(long delay)", "testcase": false, "constructor": false}, {"identifier": "now", "parameters": "()", "modifiers": "final", "return": "long", "signature": "long now()", "full_signature": "final long now()", "class_method_signature": "MeasurableScheduler.now()", "testcase": false, "constructor": false}, {"identifier": "overflowFree", "parameters": "(long delay)", "modifiers": "private", "return": "long", "signature": "long overflowFree(long delay)", "full_signature": "private long overflowFree(long delay)", "class_method_signature": "MeasurableScheduler.overflowFree(long delay)", "testcase": false, "constructor": false}, {"identifier": "interruptIdleWorkers", "parameters": "()", "modifiers": "", "return": "void", "signature": "void interruptIdleWorkers()", "full_signature": " void interruptIdleWorkers()", "class_method_signature": "MeasurableScheduler.interruptIdleWorkers()", "testcase": false, "constructor": false}], "file": "client/lookout-core/src/main/java/com/alipay/lookout/step/MeasurableScheduler.java"}, "focal_method": {"identifier": "scheduleAtFixedRateSkipIfLong", "parameters": "(Runnable command, long initialDelay,\n                                                            long period, TimeUnit unit)", "modifiers": "public", "return": "ScheduledFuture<?>", "body": "public ScheduledFuture<?> scheduleAtFixedRateSkipIfLong(Runnable command, long initialDelay,\n                                                            long period, TimeUnit unit) {\n        if (command == null || unit == null)\n            throw new NullPointerException();\n        if (period <= 0)\n            throw new IllegalArgumentException();\n        RunnableScheduledFuture<?> t = decorateTask(\n            command,\n            new MeasurableScheduler.ScheduledFutureTask<Object>(command, null, triggerTime(\n                initialDelay, unit), unit.toNanos(period), true));\n        delayedExecute(t);\n        return t;\n    }", "signature": "ScheduledFuture<?> scheduleAtFixedRateSkipIfLong(Runnable command, long initialDelay,\n                                                            long period, TimeUnit unit)", "full_signature": "public ScheduledFuture<?> scheduleAtFixedRateSkipIfLong(Runnable command, long initialDelay,\n                                                            long period, TimeUnit unit)", "class_method_signature": "MeasurableScheduler.scheduleAtFixedRateSkipIfLong(Runnable command, long initialDelay,\n                                                            long period, TimeUnit unit)", "testcase": false, "constructor": false, "invocations": ["decorateTask", "triggerTime", "toNanos", "delayedExecute"]}, "repository": {"repo_id": 133381280, "url": "https://github.com/sofastack/sofa-lookout", "language": "Java", "is_fork": false, "fork_count": 113, "stargazer_count": 318, "size": 1394, "license": "licensed"}}