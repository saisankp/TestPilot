{"test_class": {"identifier": "TestTrailFilePositionSetter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final String MODULE = TestTrailFilePositionSetter.class.getName();", "modifier": "public static final", "type": "String", "declarator": "MODULE = TestTrailFilePositionSetter.class.getName()", "var_name": "MODULE"}, {"original_string": "public static final Logger LOG = Logger.getLogger(MODULE);", "modifier": "public static final", "type": "Logger", "declarator": "LOG = Logger.getLogger(MODULE)", "var_name": "LOG"}, {"original_string": "private static final String TRAIL_FILENAME_PREFIX = \"x3\";", "modifier": "private static final", "type": "String", "declarator": "TRAIL_FILENAME_PREFIX = \"x3\"", "var_name": "TRAIL_FILENAME_PREFIX"}, {"original_string": "private static final String[] _txnPattern =\n    {\n      \"<transaction timestamp=\\\"2013-03-09:02:54:34.000000\\\">\",\n      \" <dbupdate table=\\\"TASKMGR.TASKCTL_JOBS_1\\\" type=\\\"update\\\">\",\n      \"   <columns>\",\n      \"     <column name=\\\"JOB_ID\\\" key=\\\"true\\\">1621745</column>\",\n      \"     <column name=\\\"GG_MODI_TS\\\">2013-03-09:02:54:33.996072000</column>\",\n      \"     <column name=\\\"GG_STATUS\\\">o</column>\",\n      \"   </columns>\",\n      \"   <tokens>\",\n      \"     <token name=\\\"TK-XID\\\">42.8.2681282</token>\",\n      \"     <token name=\\\"TK-CSN\\\">${SCN}</token>\",\n      \"   </tokens>\",\n      \" </dbupdate>\",\n      \" <dbupdate table=\\\"TASKMGR.TASKCTL_JOBS_2\\\" type=\\\"update\\\">\",\n      \"   <columns>\",\n      \"     <column name=\\\"JOB_ID\\\" key=\\\"true\\\">1621745</column>\",\n      \"     <column name=\\\"GG_MODI_TS\\\">2013-03-09:02:54:33.996072000</column>\",\n      \"     <column name=\\\"GG_STATUS\\\">o</column>\",\n      \"   </columns>\",\n      \"   <tokens>\",\n      \"     <token name=\\\"TK-XID\\\">42.8.2681283</token>\",\n      \"     <token name=\\\"TK-CSN\\\">${SCN}</token>\",\n      \"   </tokens>\",\n      \" </dbupdate>\",\n      \"</transaction>\"\n   };", "modifier": "private static final", "type": "String[]", "declarator": "_txnPattern =\n    {\n      \"<transaction timestamp=\\\"2013-03-09:02:54:34.000000\\\">\",\n      \" <dbupdate table=\\\"TASKMGR.TASKCTL_JOBS_1\\\" type=\\\"update\\\">\",\n      \"   <columns>\",\n      \"     <column name=\\\"JOB_ID\\\" key=\\\"true\\\">1621745</column>\",\n      \"     <column name=\\\"GG_MODI_TS\\\">2013-03-09:02:54:33.996072000</column>\",\n      \"     <column name=\\\"GG_STATUS\\\">o</column>\",\n      \"   </columns>\",\n      \"   <tokens>\",\n      \"     <token name=\\\"TK-XID\\\">42.8.2681282</token>\",\n      \"     <token name=\\\"TK-CSN\\\">${SCN}</token>\",\n      \"   </tokens>\",\n      \" </dbupdate>\",\n      \" <dbupdate table=\\\"TASKMGR.TASKCTL_JOBS_2\\\" type=\\\"update\\\">\",\n      \"   <columns>\",\n      \"     <column name=\\\"JOB_ID\\\" key=\\\"true\\\">1621745</column>\",\n      \"     <column name=\\\"GG_MODI_TS\\\">2013-03-09:02:54:33.996072000</column>\",\n      \"     <column name=\\\"GG_STATUS\\\">o</column>\",\n      \"   </columns>\",\n      \"   <tokens>\",\n      \"     <token name=\\\"TK-XID\\\">42.8.2681283</token>\",\n      \"     <token name=\\\"TK-CSN\\\">${SCN}</token>\",\n      \"   </tokens>\",\n      \" </dbupdate>\",\n      \"</transaction>\"\n   }", "var_name": "_txnPattern"}, {"original_string": "private static final String DONE_STRING =\n      \"done\\n----------------------------------------------------------------------------\\n\";", "modifier": "private static final", "type": "String", "declarator": "DONE_STRING =\n      \"done\\n----------------------------------------------------------------------------\\n\"", "var_name": "DONE_STRING"}, {"original_string": "private ArrayList<File> _dirsToDelete = new ArrayList<File>(100);", "modifier": "private", "type": "ArrayList<File>", "declarator": "_dirsToDelete = new ArrayList<File>(100)", "var_name": "_dirsToDelete"}], "file": "databus2-relay/databus2-relay-impl/src/test/java/com/linkedin/databus/core/TestTrailFilePositionSetter.java"}, "test_case": {"identifier": "testSplitBytesByNewLines", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testSplitBytesByNewLines()\n  {\n    final Logger log = Logger.getLogger(\"TestTrailFilePositionSetter.testSplitBytesByNewLines\");\n    log.info(\"starting\");\n\n    String s = \"abc\\r\\ndef\\r\\n\";\n    List<String> l = new ArrayList<String>();\n    List<Integer> endPos = new ArrayList<Integer>();\n    String lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), false, -1, null, l, endPos);\n\n    Assert.assertNull(lastLineStr,\"Returned String should be null\");\n    Assert.assertEquals(2,l.size(),\"Length\");\n    Assert.assertEquals(endPos.size(),2,\"Length\");\n    Assert.assertEquals(l.get(0),\"abc\",\"First in \" + l);\n    Assert.assertEquals(l.get(1),\"def\",\"Second in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),5,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(1).intValue(),10,\"Second in \" + endPos);\n\n    s = \"abc\\r\\ndef\\r\\n\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), true, 0, null, l, endPos);\n\n    Assert.assertNull(lastLineStr,\"Returned String should be null\");\n    Assert.assertEquals(3,l.size(),\"Length\");\n    Assert.assertEquals(endPos.size(),3,\"Length\");\n    Assert.assertEquals(l.get(0),\"\",\"First in \" + l);\n    Assert.assertEquals(l.get(1),\"abc\",\"Second in \" + l);\n    Assert.assertEquals(l.get(2),\"def\",\"Third in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),-1,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(1).intValue(),5,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(2).intValue(),10,\"Second in \" + endPos);\n\n    s = \"abc\\r\\ndef\\r\\n\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), true, 1, null, l, endPos);\n\n    Assert.assertNull(lastLineStr,\"Returned String should be null\");\n    Assert.assertEquals(3,l.size(),\"Length\");\n    Assert.assertEquals(endPos.size(),3,\"Length\");\n    Assert.assertEquals(l.get(0),\"a\",\"First in \" + l);\n    Assert.assertEquals(l.get(1),\"bc\",\"Second in \" + l);\n    Assert.assertEquals(l.get(2),\"def\",\"Third in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),-1,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(1).intValue(),5,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(2).intValue(),10,\"Second in \" + endPos);\n\n    s = \"abc\\r\\ndef\\r\\n\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), true, 2, null, l, endPos);\n\n    Assert.assertNull(lastLineStr,\"Returned String should be null\");\n    Assert.assertEquals(3,l.size(),\"Length\");\n    Assert.assertEquals(endPos.size(),3,\"Length\");\n    Assert.assertEquals(l.get(0),\"ab\",\"First in \" + l);\n    Assert.assertEquals(l.get(1),\"c\",\"Second in \" + l);\n    Assert.assertEquals(l.get(2),\"def\",\"Third in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),-1,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(1).intValue(),5,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(2).intValue(),10,\"Second in \" + endPos);\n\n    s = \"abc\\r\\ndef\\r\\n\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), true, 3, null, l, endPos);\n\n    Assert.assertNull(lastLineStr,\"Returned String should be null\");\n    Assert.assertEquals(2,l.size(),\"Length\");\n    Assert.assertEquals(endPos.size(),2,\"Length\");\n    Assert.assertEquals(l.get(0),\"abc\",\"First in \" + l);\n    Assert.assertEquals(l.get(1),\"def\",\"Second in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),5,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(1).intValue(),10,\"Second in \" + endPos);\n\n    s = \"abc\\r\\ndef\\r\\n\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), true, 5, null, l, endPos);\n\n    Assert.assertNull(lastLineStr,\"Returned String should be null\");\n    Assert.assertEquals(l.size(),3,\"Length\");\n    Assert.assertEquals(endPos.size(),3,\"Length\");\n    Assert.assertEquals(l.get(0),\"abc\",\"First in \" + l);\n    Assert.assertEquals(l.get(1),\"\",\"Second in \" + l);\n    Assert.assertEquals(l.get(2),\"def\",\"Third in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),5,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(1).intValue(),-1,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(2).intValue(),10,\"Second in \" + endPos);\n\n    s = \"abc\\r\\ndef\\r\\n\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), true, 6, null, l, endPos);\n\n    Assert.assertNull(lastLineStr,\"Returned String should be null\");\n    Assert.assertEquals(l.size(),3,\"Length\");\n    Assert.assertEquals(endPos.size(),3,\"Length\");\n    Assert.assertEquals(l.get(0),\"abc\",\"First in \" + l);\n    Assert.assertEquals(l.get(1),\"d\",\"Second in \" + l);\n    Assert.assertEquals(l.get(2),\"ef\",\"Third in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),5,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(1).intValue(),-1,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(2).intValue(),10,\"Second in \" + endPos);\n\n    s = \"abc\\r\\ndef\\r\\n\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    //log.info(\"Starting !!\");\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), true, 7, null, l, endPos);\n\n    Assert.assertNull(lastLineStr,\"Returned String should be null\");\n    Assert.assertEquals(l.size(),3,\"Length\");\n    Assert.assertEquals(endPos.size(),3,\"Length\");\n    Assert.assertEquals(l.get(0),\"abc\",\"First in \" + l);\n    Assert.assertEquals(l.get(1),\"de\",\"Second in \" + l);\n    Assert.assertEquals(l.get(2),\"f\",\"Third in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),5,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(1).intValue(),-1,\"Second in \" + endPos);\n    Assert.assertEquals(endPos.get(2).intValue(),10,\"Third in \" + endPos);\n\n    s = \"abc\\r\\ndef\\r\\n\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), true, 4, null, l, endPos);\n\n    Assert.assertNull(lastLineStr,\"Returned String should be null\");\n    Assert.assertEquals(2,l.size(),\"Length\");\n    Assert.assertEquals(endPos.size(),2,\"Length\");\n    Assert.assertEquals(l.get(0),\"abc\",\"First in \" + l);\n    Assert.assertEquals(l.get(1),\"def\",\"Second in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),5,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(1).intValue(),10,\"Second in \" + endPos);\n\n    s = \"abc\\r\\ndef\\r\\n\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), true, 8, null, l, endPos);\n\n    Assert.assertNull(lastLineStr,\"Returned String should be null\");\n    Assert.assertEquals(2,l.size(),\"Length\");\n    Assert.assertEquals(endPos.size(),2,\"Length\");\n    Assert.assertEquals(l.get(0),\"abc\",\"First in \" + l);\n    Assert.assertEquals(l.get(1),\"def\",\"Second in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),5,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(1).intValue(),10,\"Second in \" + endPos);\n\n    s = \"abc\\ndef\\n\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), true, 3, null, l, endPos);\n\n    Assert.assertNull(lastLineStr,\"Returned String should be null\");\n    Assert.assertEquals(2,l.size(),\"Length\");\n    Assert.assertEquals(endPos.size(),2,\"Length\");\n    Assert.assertEquals(l.get(0),\"abc\",\"First in \" + l);\n    Assert.assertEquals(l.get(1),\"def\",\"Second in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),4,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(1).intValue(),8,\"Second in \" + endPos);\n\n    s = \"abc\\ndef\\n\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), false, -1, null, l,endPos);\n\n    Assert.assertNull(lastLineStr,\"Returned String should be null\");\n    Assert.assertEquals(2,l.size(),\"Length\");\n    Assert.assertEquals(endPos.size(),2,\"Length\");\n    Assert.assertEquals(l.get(0),\"abc\",\"First in \" + l);\n    Assert.assertEquals(l.get(1),\"def\",\"Second in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),4,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(1).intValue(),8,\"Second in \" + endPos);\n\n    s = \"abc\\r\\ndef\\n\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), false, -1, null, l,endPos);\n\n    Assert.assertNull(lastLineStr,\"Returned String should be null\");\n    Assert.assertEquals(2,l.size(),\"Length\");\n    Assert.assertEquals(endPos.size(),2,\"Length\");\n    Assert.assertEquals(l.get(0),\"abc\",\"First in \" + l);\n    Assert.assertEquals(l.get(1),\"def\",\"Second in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),5,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(1).intValue(),9,\"Second in \" + endPos);\n\n    s = \"abc\\r\\ndef\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), false, -1, null, l, endPos);\n\n    Assert.assertEquals( lastLineStr,\"def\",\"Returned String\");\n    Assert.assertEquals(l.size(),1,\"Length\");\n    Assert.assertEquals(endPos.size(),1,\"Length\");\n    Assert.assertEquals(l.get(0),\"abc\",\"First in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),5,\"First in \" + endPos);\n\n    s = \"abc\\r\\ndef\\r\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), false, -1, null, l,endPos);\n    //log.info(\"Length: \" + lastLineStr.length());\n    Assert.assertEquals( lastLineStr,\"def\\r\",\"Returned String\");\n    Assert.assertEquals(l.size(),1,\"Length\");\n    Assert.assertEquals(endPos.size(),1,\"Length\");\n    Assert.assertEquals(l.get(0),\"abc\",\"First in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),5,\"First in \" + endPos);\n\n    lastLineStr = \"abc\";\n    s = \"def\\r\\nghi\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), false, -1, lastLineStr, l, endPos);\n\n    Assert.assertEquals( lastLineStr,\"ghi\",\"Returned String\");\n    Assert.assertEquals(l.size(),1,\"Length\");\n    Assert.assertEquals(endPos.size(),1,\"Length\");\n    Assert.assertEquals(l.get(0),\"abcdef\",\"First in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),8,\"First in \" + endPos);\n\n    lastLineStr = \"abc\\r\";\n    s = \"def\\r\\nghi\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), false, -1, lastLineStr, l,endPos);\n\n    Assert.assertEquals( lastLineStr,\"ghi\",\"Returned String\");\n    Assert.assertEquals(l.size(),2,\"Length: \" + l);\n    Assert.assertEquals(endPos.size(),2,\"Length\");\n    Assert.assertEquals(l.get(0),\"abc\",\"First in \" + l);\n    Assert.assertEquals(l.get(1),\"def\",\"First in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),4,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(1).intValue(),9,\"Second in \" + endPos);\n\n    lastLineStr = \"abc\\r\";\n    s = \"\\ndef\\r\\nghi\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), false, -1,lastLineStr, l,endPos);\n    Assert.assertEquals( lastLineStr,\"ghi\",\"Returned String\");\n    Assert.assertEquals(l.size(),2,\"Length: \" + l);\n    Assert.assertEquals(endPos.size(),2,\"Length\");\n    Assert.assertEquals(l.get(0),\"abc\",\"First in \" + l);\n    Assert.assertEquals(l.get(1),\"def\",\"First in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),5,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(1).intValue(),10,\"Second in \" + endPos);\n\n    lastLineStr = \"abc\";\n    s = \"\\ndef\\r\\nghi\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), false, -1, lastLineStr, l, endPos);\n\n    Assert.assertEquals( lastLineStr,\"ghi\",\"Returned String\");\n    Assert.assertEquals(l.size(),2,\"Length\");\n    Assert.assertEquals(endPos.size(),2,\"Length\");\n    Assert.assertEquals(l.get(0),\"abc\",\"First in \" + l);\n    Assert.assertEquals(l.get(1),\"def\",\"First in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),4,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(1).intValue(),9,\"Second in \" + endPos);\n\n    lastLineStr = \"abc\";\n    s = \"\\rdef\\r\\nghi\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), false, -1, lastLineStr, l,endPos);\n\n    Assert.assertEquals( lastLineStr,\"ghi\",\"Returned String\");\n    Assert.assertEquals(l.size(),2,\"Length\");\n    Assert.assertEquals(endPos.size(),2,\"Length\");\n\n    Assert.assertEquals(l.get(0),\"abc\",\"First in \" + l);\n    Assert.assertEquals(l.get(1),\"def\",\"Second in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),4,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(1).intValue(),9,\"Second in \" + endPos);\n\n    lastLineStr = \"xyz\";\n    s = \"abcdef\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), false, -1, lastLineStr, l,endPos);\n\n    Assert.assertEquals( lastLineStr,\"xyzabcdef\",\"Returned String\");\n    Assert.assertEquals(l.size(),0,\"Length\");\n    Assert.assertEquals(endPos.size(),0,\"Length\");\n\n    s = \"abcdef\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), false, -1, null, l,endPos);\n\n    Assert.assertEquals( lastLineStr,\"abcdef\",\"Returned String\");\n    Assert.assertEquals(l.size(),0,\"Length\");\n    Assert.assertEquals(endPos.size(),0,\"Length\");\n\n    s = \"abc\\n\\n  def\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), false, -1, null, l,endPos);\n\n    Assert.assertEquals( lastLineStr,\"  def\",\"Returned String\");\n    Assert.assertEquals(l.size(),2,\"Length\");\n    Assert.assertEquals(endPos.size(),2,\"Length\");\n    Assert.assertEquals(l.get(0),\"abc\",\"First in \" + l);\n    Assert.assertEquals(l.get(1),\"\",\"Second in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),4,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(1).intValue(),5,\"Second in \" + endPos);\n\n    s = \"abc\\n\\n  def\\n   ghi\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), true, 4, null, l,endPos);\n\n    Assert.assertEquals( lastLineStr,\"   ghi\",\"Returned String\");\n    Assert.assertEquals(l.size(),3,\"Length\");\n    Assert.assertEquals(endPos.size(),3,\"Length\");\n    Assert.assertEquals(l.get(0),\"abc\",\"First in \" + l);\n    Assert.assertEquals(l.get(1),\"\",\"Second in \" + l);\n    Assert.assertEquals(l.get(2),\"  def\",\"Third in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),4,\"First in \" + endPos);\n    Assert.assertEquals(endPos.get(1).intValue(),5,\"Second in \" + endPos);\n    Assert.assertEquals(endPos.get(2).intValue(),11,\"Third in \" + endPos);\n\n    s = \"\\n\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), false, -1, null, l,endPos);\n\n    Assert.assertEquals( lastLineStr,null,\"Returned String\");\n    Assert.assertEquals(l.size(),1,\"Length\");\n    Assert.assertEquals(endPos.size(),1,\"Length\");\n    Assert.assertEquals(l.get(0),\"\",\"First in \" + l);\n    Assert.assertEquals(endPos.get(0).intValue(),1,\"First in \" + endPos);\n\n    s = \" \";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), false, -1, null, l,endPos);\n\n    Assert.assertEquals( lastLineStr,\" \",\"Returned String\");\n    Assert.assertEquals(l.size(),0,\"Length\");\n    Assert.assertEquals(endPos.size(),0,\"Length\");\n\n    s = \"\";\n    l = new ArrayList<String>();\n    endPos = new ArrayList<Integer>();\n    lastLineStr = TrailFilePositionSetter.splitBytesByNewLines(s.getBytes(Charset.defaultCharset()), s.length(), false, -1, null, l,endPos);\n\n    Assert.assertEquals( lastLineStr,null,\"Returned String\");\n    Assert.assertEquals(l.size(),0,\"Length\");\n    Assert.assertEquals(endPos.size(),0,\"Length\");\n\n    log.info(DONE_STRING);\n  }", "signature": "void testSplitBytesByNewLines()", "full_signature": "@Test public void testSplitBytesByNewLines()", "class_method_signature": "TestTrailFilePositionSetter.testSplitBytesByNewLines()", "testcase": true, "constructor": false, "invocations": ["getLogger", "info", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertNull", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertNull", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertNull", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertNull", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertNull", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertNull", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertNull", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertNull", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertNull", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertNull", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertNull", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertNull", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertNull", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertEquals", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertEquals", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertEquals", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertEquals", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertEquals", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertEquals", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertEquals", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertEquals", "assertEquals", "size", "assertEquals", "size", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertEquals", "assertEquals", "size", "assertEquals", "size", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertEquals", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertEquals", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertEquals", "assertEquals", "size", "assertEquals", "size", "assertEquals", "get", "assertEquals", "intValue", "get", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertEquals", "assertEquals", "size", "assertEquals", "size", "splitBytesByNewLines", "getBytes", "defaultCharset", "length", "assertEquals", "assertEquals", "size", "assertEquals", "size", "info"]}, "focal_class": {"identifier": "TrailFilePositionSetter", "superclass": "", "interfaces": "", "fields": [{"original_string": "public Logger _log;", "modifier": "public", "type": "Logger", "declarator": "_log", "var_name": "_log"}, {"original_string": "public static final long USE_LATEST_SCN  = -1;", "modifier": "public static final", "type": "long", "declarator": "USE_LATEST_SCN  = -1", "var_name": "USE_LATEST_SCN"}, {"original_string": "public static final long USE_EARLIEST_SCN = -2;", "modifier": "public static final", "type": "long", "declarator": "USE_EARLIEST_SCN = -2", "var_name": "USE_EARLIEST_SCN"}, {"original_string": "private final File _dir;", "modifier": "private final", "type": "File", "declarator": "_dir", "var_name": "_dir"}, {"original_string": "private final String _filePrefix;", "modifier": "private final", "type": "String", "declarator": "_filePrefix", "var_name": "_filePrefix"}, {"original_string": "private final FileFilter _filter;", "modifier": "private final", "type": "FileFilter", "declarator": "_filter", "var_name": "_filter"}, {"original_string": "private String _phySourceName;", "modifier": "private", "type": "String", "declarator": "_phySourceName", "var_name": "_phySourceName"}, {"original_string": "public static final String NEW_LINE_PATTERN_STR = \"\\r?\\n|\\r\";", "modifier": "public static final", "type": "String", "declarator": "NEW_LINE_PATTERN_STR = \"\\r?\\n|\\r\"", "var_name": "NEW_LINE_PATTERN_STR"}, {"original_string": "public static final String DOUBLE_CHAR_NEWLINE = \"\\r\\n\";", "modifier": "public static final", "type": "String", "declarator": "DOUBLE_CHAR_NEWLINE = \"\\r\\n\"", "var_name": "DOUBLE_CHAR_NEWLINE"}, {"original_string": "public static final int NO_NEWLINE_LEN = -1;", "modifier": "public static final", "type": "int", "declarator": "NO_NEWLINE_LEN = -1", "var_name": "NO_NEWLINE_LEN"}], "methods": [{"identifier": "TrailFilePositionSetter", "parameters": "(String dir, String filePrefix)", "modifiers": "public", "return": "", "signature": " TrailFilePositionSetter(String dir, String filePrefix)", "full_signature": "public  TrailFilePositionSetter(String dir, String filePrefix)", "class_method_signature": "TrailFilePositionSetter.TrailFilePositionSetter(String dir, String filePrefix)", "testcase": false, "constructor": true}, {"identifier": "TrailFilePositionSetter", "parameters": "(String dir, String filePrefix, String phySourceName)", "modifiers": "public", "return": "", "signature": " TrailFilePositionSetter(String dir, String filePrefix, String phySourceName)", "full_signature": "public  TrailFilePositionSetter(String dir, String filePrefix, String phySourceName)", "class_method_signature": "TrailFilePositionSetter.TrailFilePositionSetter(String dir, String filePrefix, String phySourceName)", "testcase": false, "constructor": true}, {"identifier": "validateDir", "parameters": "(String dir)", "modifiers": "private static", "return": "void", "signature": "void validateDir(String dir)", "full_signature": "private static void validateDir(String dir)", "class_method_signature": "TrailFilePositionSetter.validateDir(String dir)", "testcase": false, "constructor": false}, {"identifier": "locateFilePosition", "parameters": "(long scn, TransactionSCNFinderCallback callback)", "modifiers": "public synchronized", "return": "FilePositionResult", "signature": "FilePositionResult locateFilePosition(long scn, TransactionSCNFinderCallback callback)", "full_signature": "public synchronized FilePositionResult locateFilePosition(long scn, TransactionSCNFinderCallback callback)", "class_method_signature": "TrailFilePositionSetter.locateFilePosition(long scn, TransactionSCNFinderCallback callback)", "testcase": false, "constructor": false}, {"identifier": "getFilePosition", "parameters": "(long scn, TransactionSCNFinderCallback callback)", "modifiers": "protected synchronized", "return": "FilePositionResult", "signature": "FilePositionResult getFilePosition(long scn, TransactionSCNFinderCallback callback)", "full_signature": "protected synchronized FilePositionResult getFilePosition(long scn, TransactionSCNFinderCallback callback)", "class_method_signature": "TrailFilePositionSetter.getFilePosition(long scn, TransactionSCNFinderCallback callback)", "testcase": false, "constructor": false}, {"identifier": "getFilePosition", "parameters": "(long scn, TransactionSCNFinderCallback callback, String startFile)", "modifiers": "protected synchronized", "return": "FilePositionResult", "signature": "FilePositionResult getFilePosition(long scn, TransactionSCNFinderCallback callback, String startFile)", "full_signature": "protected synchronized FilePositionResult getFilePosition(long scn, TransactionSCNFinderCallback callback, String startFile)", "class_method_signature": "TrailFilePositionSetter.getFilePosition(long scn, TransactionSCNFinderCallback callback, String startFile)", "testcase": false, "constructor": false}, {"identifier": "findTxnScn", "parameters": "(ConcurrentAppendableCompositeFileInputStream stream,\n          long expScn,\n          TransactionSCNFinderCallback callback)", "modifiers": "private", "return": "FilePositionResult", "signature": "FilePositionResult findTxnScn(ConcurrentAppendableCompositeFileInputStream stream,\n          long expScn,\n          TransactionSCNFinderCallback callback)", "full_signature": "private FilePositionResult findTxnScn(ConcurrentAppendableCompositeFileInputStream stream,\n          long expScn,\n          TransactionSCNFinderCallback callback)", "class_method_signature": "TrailFilePositionSetter.findTxnScn(ConcurrentAppendableCompositeFileInputStream stream,\n          long expScn,\n          TransactionSCNFinderCallback callback)", "testcase": false, "constructor": false}, {"identifier": "splitBytesByNewLines", "parameters": "(byte[] buf,\n                                               int numBytes,\n                                               boolean spanFile,\n                                               int endOffset,\n                                               String prevLine,\n                                               List<String> lines,\n                                               List<Integer> lineEndPos)", "modifiers": "protected static", "return": "String", "signature": "String splitBytesByNewLines(byte[] buf,\n                                               int numBytes,\n                                               boolean spanFile,\n                                               int endOffset,\n                                               String prevLine,\n                                               List<String> lines,\n                                               List<Integer> lineEndPos)", "full_signature": "protected static String splitBytesByNewLines(byte[] buf,\n                                               int numBytes,\n                                               boolean spanFile,\n                                               int endOffset,\n                                               String prevLine,\n                                               List<String> lines,\n                                               List<Integer> lineEndPos)", "class_method_signature": "TrailFilePositionSetter.splitBytesByNewLines(byte[] buf,\n                                               int numBytes,\n                                               boolean spanFile,\n                                               int endOffset,\n                                               String prevLine,\n                                               List<String> lines,\n                                               List<Integer> lineEndPos)", "testcase": false, "constructor": false}], "file": "databus2-relay/databus2-relay-impl/src/main/java/com/linkedin/databus/core/TrailFilePositionSetter.java"}, "focal_method": {"identifier": "splitBytesByNewLines", "parameters": "(byte[] buf,\n                                               int numBytes,\n                                               boolean spanFile,\n                                               int endOffset,\n                                               String prevLine,\n                                               List<String> lines,\n                                               List<Integer> lineEndPos)", "modifiers": "protected static", "return": "String", "body": "protected static String splitBytesByNewLines(byte[] buf,\n                                               int numBytes,\n                                               boolean spanFile,\n                                               int endOffset,\n                                               String prevLine,\n                                               List<String> lines,\n                                               List<Integer> lineEndPos)\n  {\n    String s = (prevLine != null) ? prevLine + new String(buf,0,numBytes) : new String(buf,0,numBytes);\n\n    if ( s.isEmpty())\n      return null;\n\n    // endOffset should be updated with prepended string\n    if ( prevLine != null)\n      endOffset += prevLine.length();\n\n    String[] strArr = s.split(NEW_LINE_PATTERN_STR); //Newline can be one \\n, \\r,\\r\\n\n\n    // if buf contains only newlines, a zero sized array is returned. Massage it so it works with below logic\n    if (strArr.length == 0)\n    {\n      strArr = new String[1];\n      strArr[0] = \"\";\n    }\n\n    int pos = 0;\n    for (int i = 0 ; i < strArr.length - 1; i++)\n    {\n      String l = strArr[i];\n\n      // If this line spans file, split it\n      if ( spanFile && (pos <= endOffset) && ((pos + l.length()) > endOffset))\n      {\n        int pivot = endOffset - pos;\n        lines.add(l.substring(0,pivot));\n        pos += pivot;\n        l = l.substring(pivot);\n        lineEndPos.add(-1);\n        spanFile = false;\n      }\n\n      lines.add(l);\n      pos += l.length();\n      int newLineLen = 0;\n\n      if (s.startsWith(DOUBLE_CHAR_NEWLINE, pos))\n        newLineLen = 2;\n      else\n        newLineLen = 1;\n\n      pos += newLineLen;\n      lineEndPos.add(pos);\n    }\n\n    char c = s.charAt(s.length() -1);\n\n    String lastLine = null;\n\n    String l = strArr[strArr.length - 1];\n    if ( spanFile && (pos <= endOffset) && ((pos + l.length()) > endOffset))\n    {\n      int pivot = endOffset - pos;\n      lines.add(l.substring(0,pivot));\n      pos += pivot;\n      l = l.substring(pivot);\n      lineEndPos.add(-1);\n    }\n\n    /**\n     * If last character of the block read is '\\r', then we need to read next block before deciding\n     * if '\\r' is newline or it is followed by '\\n'\n     */\n    if ((c == '\\r'))\n    {\n       lastLine = l + '\\r';\n    } else if (c != '\\n') {\n      lastLine = l;\n    } else {\n      lines.add(l);\n      pos += l.length();\n      if (s.startsWith(DOUBLE_CHAR_NEWLINE, pos))\n        pos += 2;\n      else\n        pos += 1;\n      lineEndPos.add(pos);\n    }\n\n    return lastLine;\n  }", "signature": "String splitBytesByNewLines(byte[] buf,\n                                               int numBytes,\n                                               boolean spanFile,\n                                               int endOffset,\n                                               String prevLine,\n                                               List<String> lines,\n                                               List<Integer> lineEndPos)", "full_signature": "protected static String splitBytesByNewLines(byte[] buf,\n                                               int numBytes,\n                                               boolean spanFile,\n                                               int endOffset,\n                                               String prevLine,\n                                               List<String> lines,\n                                               List<Integer> lineEndPos)", "class_method_signature": "TrailFilePositionSetter.splitBytesByNewLines(byte[] buf,\n                                               int numBytes,\n                                               boolean spanFile,\n                                               int endOffset,\n                                               String prevLine,\n                                               List<String> lines,\n                                               List<Integer> lineEndPos)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "length", "split", "length", "add", "substring", "substring", "add", "add", "length", "startsWith", "add", "charAt", "length", "length", "add", "substring", "substring", "add", "add", "length", "startsWith", "add"]}, "repository": {"repo_id": 7209229, "url": "https://github.com/linkedin/databus", "language": "Java", "is_fork": false, "fork_count": 653, "stargazer_count": 2899, "size": 51191, "license": "licensed"}}