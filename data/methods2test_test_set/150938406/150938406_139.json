{"test_class": {"identifier": "KMeansUtilTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final FastDistance distance = new EuclideanDistance();", "modifier": "private final", "type": "FastDistance", "declarator": "distance = new EuclideanDistance()", "var_name": "distance"}, {"original_string": "private final int vectorSize = 2;", "modifier": "private final", "type": "int", "declarator": "vectorSize = 2", "var_name": "vectorSize"}, {"original_string": "private final int length = 10;", "modifier": "private final", "type": "int", "declarator": "length = 10", "var_name": "length"}, {"original_string": "private final List<Row> modelRows = Arrays.asList(\n        Row.of(0L, \"{\\\"vectorCol\\\":\\\"\\\\\\\"Y\\\\\\\"\\\",\\\"latitudeCol\\\":null,\\\"longitudeCol\\\":null,\"\n            + \"\\\"distanceType\\\":\\\"\\\\\\\"EUCLIDEAN\\\\\\\"\\\",\\\"k\\\":\\\"2\\\",\\\"vectorSize\\\":\\\"3\\\"}\"),\n        Row.of(1048576L, \"{\\\"clusterId\\\":0,\\\"weight\\\":3.0,\\\"vec\\\":{\\\"data\\\":[9.1,9.1,9.1]}}\"),\n        Row.of(2097152L, \"{\\\"clusterId\\\":1,\\\"weight\\\":3.0,\\\"vec\\\":{\\\"data\\\":[0.1,0.1,0.1]}}\")\n    );", "modifier": "private final", "type": "List<Row>", "declarator": "modelRows = Arrays.asList(\n        Row.of(0L, \"{\\\"vectorCol\\\":\\\"\\\\\\\"Y\\\\\\\"\\\",\\\"latitudeCol\\\":null,\\\"longitudeCol\\\":null,\"\n            + \"\\\"distanceType\\\":\\\"\\\\\\\"EUCLIDEAN\\\\\\\"\\\",\\\"k\\\":\\\"2\\\",\\\"vectorSize\\\":\\\"3\\\"}\"),\n        Row.of(1048576L, \"{\\\"clusterId\\\":0,\\\"weight\\\":3.0,\\\"vec\\\":{\\\"data\\\":[9.1,9.1,9.1]}}\"),\n        Row.of(2097152L, \"{\\\"clusterId\\\":1,\\\"weight\\\":3.0,\\\"vec\\\":{\\\"data\\\":[0.1,0.1,0.1]}}\")\n    )", "var_name": "modelRows"}], "file": "core/src/test/java/com/alibaba/alink/operator/common/clustering/kmeans/KMeansUtilTest.java"}, "test_case": {"identifier": "getKMeansPredictVectorTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void getKMeansPredictVectorTest() {\n        int[] colIdxs = new int[] {1};\n        Row row = Row.of(1, \"0 0 0\");\n        Assert.assertEquals(KMeansUtil.getKMeansPredictVector(colIdxs, row), DenseVector.zeros(3));\n    }", "signature": "void getKMeansPredictVectorTest()", "full_signature": "@Test public void getKMeansPredictVectorTest()", "class_method_signature": "KMeansUtilTest.getKMeansPredictVectorTest()", "testcase": true, "constructor": false, "invocations": ["of", "assertEquals", "getKMeansPredictVector", "zeros"]}, "focal_class": {"identifier": "KMeansUtil", "superclass": "", "interfaces": "implements Serializable", "fields": [], "methods": [{"identifier": "buildCentroidsMatrix", "parameters": "(List<FastDistanceVectorData> vectors,\n                                                              FastDistance distance,\n                                                              int vectorSize)", "modifiers": "public static", "return": "FastDistanceMatrixData", "signature": "FastDistanceMatrixData buildCentroidsMatrix(List<FastDistanceVectorData> vectors,\n                                                              FastDistance distance,\n                                                              int vectorSize)", "full_signature": "public static FastDistanceMatrixData buildCentroidsMatrix(List<FastDistanceVectorData> vectors,\n                                                              FastDistance distance,\n                                                              int vectorSize)", "class_method_signature": "KMeansUtil.buildCentroidsMatrix(List<FastDistanceVectorData> vectors,\n                                                              FastDistance distance,\n                                                              int vectorSize)", "testcase": false, "constructor": false}, {"identifier": "updateSumMatrix", "parameters": "(FastDistanceVectorData sample,\n                                      long sampleWeight,\n                                      FastDistanceMatrixData centroids,\n                                      int vectorSize,\n                                      double[] sumMatrix,\n                                      int k,\n                                      FastDistance fastDistance,\n                                      DenseMatrix distanceMatrix)", "modifiers": "public static", "return": "int", "signature": "int updateSumMatrix(FastDistanceVectorData sample,\n                                      long sampleWeight,\n                                      FastDistanceMatrixData centroids,\n                                      int vectorSize,\n                                      double[] sumMatrix,\n                                      int k,\n                                      FastDistance fastDistance,\n                                      DenseMatrix distanceMatrix)", "full_signature": "public static int updateSumMatrix(FastDistanceVectorData sample,\n                                      long sampleWeight,\n                                      FastDistanceMatrixData centroids,\n                                      int vectorSize,\n                                      double[] sumMatrix,\n                                      int k,\n                                      FastDistance fastDistance,\n                                      DenseMatrix distanceMatrix)", "class_method_signature": "KMeansUtil.updateSumMatrix(FastDistanceVectorData sample,\n                                      long sampleWeight,\n                                      FastDistanceMatrixData centroids,\n                                      int vectorSize,\n                                      double[] sumMatrix,\n                                      int k,\n                                      FastDistance fastDistance,\n                                      DenseMatrix distanceMatrix)", "testcase": false, "constructor": false}, {"identifier": "getClosestClusterIndex", "parameters": "(FastDistanceVectorData sample,\n                                                                 FastDistanceMatrixData centroids,\n                                                                 int k,\n                                                                 FastDistance distance,\n                                                                 DenseMatrix distanceMatrix)", "modifiers": "public static", "return": "Tuple2<Integer, Double>", "signature": "Tuple2<Integer, Double> getClosestClusterIndex(FastDistanceVectorData sample,\n                                                                 FastDistanceMatrixData centroids,\n                                                                 int k,\n                                                                 FastDistance distance,\n                                                                 DenseMatrix distanceMatrix)", "full_signature": "public static Tuple2<Integer, Double> getClosestClusterIndex(FastDistanceVectorData sample,\n                                                                 FastDistanceMatrixData centroids,\n                                                                 int k,\n                                                                 FastDistance distance,\n                                                                 DenseMatrix distanceMatrix)", "class_method_signature": "KMeansUtil.getClosestClusterIndex(FastDistanceVectorData sample,\n                                                                 FastDistanceMatrixData centroids,\n                                                                 int k,\n                                                                 FastDistance distance,\n                                                                 DenseMatrix distanceMatrix)", "testcase": false, "constructor": false}, {"identifier": "getClusterDistances", "parameters": "(FastDistanceVectorData sample,\n                                               FastDistanceMatrixData centroids,\n                                               FastDistance distance,\n                                               DenseMatrix distanceMatrix)", "modifiers": "public static", "return": "double[]", "signature": "double[] getClusterDistances(FastDistanceVectorData sample,\n                                               FastDistanceMatrixData centroids,\n                                               FastDistance distance,\n                                               DenseMatrix distanceMatrix)", "full_signature": "public static double[] getClusterDistances(FastDistanceVectorData sample,\n                                               FastDistanceMatrixData centroids,\n                                               FastDistance distance,\n                                               DenseMatrix distanceMatrix)", "class_method_signature": "KMeansUtil.getClusterDistances(FastDistanceVectorData sample,\n                                               FastDistanceMatrixData centroids,\n                                               FastDistance distance,\n                                               DenseMatrix distanceMatrix)", "testcase": false, "constructor": false}, {"identifier": "getClosestClusterIndex", "parameters": "(KMeansTrainModelData trainModelData,\n                                                                 Vector sample,\n                                                                 ContinuousDistance distance)", "modifiers": "public static", "return": "Tuple2<Integer, Double>", "signature": "Tuple2<Integer, Double> getClosestClusterIndex(KMeansTrainModelData trainModelData,\n                                                                 Vector sample,\n                                                                 ContinuousDistance distance)", "full_signature": "public static Tuple2<Integer, Double> getClosestClusterIndex(KMeansTrainModelData trainModelData,\n                                                                 Vector sample,\n                                                                 ContinuousDistance distance)", "class_method_signature": "KMeansUtil.getClosestClusterIndex(KMeansTrainModelData trainModelData,\n                                                                 Vector sample,\n                                                                 ContinuousDistance distance)", "testcase": false, "constructor": false}, {"identifier": "getClusterDistances", "parameters": "(KMeansTrainModelData trainModelData,\n                                               Vector sample,\n                                               ContinuousDistance distance)", "modifiers": "public static", "return": "double[]", "signature": "double[] getClusterDistances(KMeansTrainModelData trainModelData,\n                                               Vector sample,\n                                               ContinuousDistance distance)", "full_signature": "public static double[] getClusterDistances(KMeansTrainModelData trainModelData,\n                                               Vector sample,\n                                               ContinuousDistance distance)", "class_method_signature": "KMeansUtil.getClusterDistances(KMeansTrainModelData trainModelData,\n                                               Vector sample,\n                                               ContinuousDistance distance)", "testcase": false, "constructor": false}, {"identifier": "getMinPointIndex", "parameters": "(double[] data, int endIndex)", "modifiers": "public static", "return": "int", "signature": "int getMinPointIndex(double[] data, int endIndex)", "full_signature": "public static int getMinPointIndex(double[] data, int endIndex)", "class_method_signature": "KMeansUtil.getMinPointIndex(double[] data, int endIndex)", "testcase": false, "constructor": false}, {"identifier": "getKmeansPredictColIdxs", "parameters": "(KMeansTrainModelData.ParamSummary params, String[] dataCols)", "modifiers": "public static", "return": "int[]", "signature": "int[] getKmeansPredictColIdxs(KMeansTrainModelData.ParamSummary params, String[] dataCols)", "full_signature": "public static int[] getKmeansPredictColIdxs(KMeansTrainModelData.ParamSummary params, String[] dataCols)", "class_method_signature": "KMeansUtil.getKmeansPredictColIdxs(KMeansTrainModelData.ParamSummary params, String[] dataCols)", "testcase": false, "constructor": false}, {"identifier": "getKMeansPredictVector", "parameters": "(int[] colIdxs, Row row)", "modifiers": "public static", "return": "Vector", "signature": "Vector getKMeansPredictVector(int[] colIdxs, Row row)", "full_signature": "public static Vector getKMeansPredictVector(int[] colIdxs, Row row)", "class_method_signature": "KMeansUtil.getKMeansPredictVector(int[] colIdxs, Row row)", "testcase": false, "constructor": false}, {"identifier": "transformPredictDataToTrainData", "parameters": "(KMeansPredictModelData predictModelData)", "modifiers": "public static", "return": "KMeansTrainModelData", "signature": "KMeansTrainModelData transformPredictDataToTrainData(KMeansPredictModelData predictModelData)", "full_signature": "public static KMeansTrainModelData transformPredictDataToTrainData(KMeansPredictModelData predictModelData)", "class_method_signature": "KMeansUtil.transformPredictDataToTrainData(KMeansPredictModelData predictModelData)", "testcase": false, "constructor": false}, {"identifier": "transformTrainDataToPredictData", "parameters": "(KMeansTrainModelData trainModelData)", "modifiers": "public static", "return": "KMeansPredictModelData", "signature": "KMeansPredictModelData transformTrainDataToPredictData(KMeansTrainModelData trainModelData)", "full_signature": "public static KMeansPredictModelData transformTrainDataToPredictData(KMeansTrainModelData trainModelData)", "class_method_signature": "KMeansUtil.transformTrainDataToPredictData(KMeansTrainModelData trainModelData)", "testcase": false, "constructor": false}, {"identifier": "getProbArrayFromDistanceArray", "parameters": "(double[] distances)", "modifiers": "public static", "return": "double[]", "signature": "double[] getProbArrayFromDistanceArray(double[] distances)", "full_signature": "public static double[] getProbArrayFromDistanceArray(double[] distances)", "class_method_signature": "KMeansUtil.getProbArrayFromDistanceArray(double[] distances)", "testcase": false, "constructor": false}, {"identifier": "loadModelForTrain", "parameters": "(Params params, Iterable<String> data)", "modifiers": "public static", "return": "KMeansTrainModelData", "signature": "KMeansTrainModelData loadModelForTrain(Params params, Iterable<String> data)", "full_signature": "public static KMeansTrainModelData loadModelForTrain(Params params, Iterable<String> data)", "class_method_signature": "KMeansUtil.loadModelForTrain(Params params, Iterable<String> data)", "testcase": false, "constructor": false}], "file": "core/src/main/java/com/alibaba/alink/operator/common/clustering/kmeans/KMeansUtil.java"}, "focal_method": {"identifier": "getKMeansPredictVector", "parameters": "(int[] colIdxs, Row row)", "modifiers": "public static", "return": "Vector", "body": "public static Vector getKMeansPredictVector(int[] colIdxs, Row row) {\n        Vector vec;\n        if (colIdxs.length > 1) {\n            vec = new DenseVector(2);\n            vec.set(0, ((Number)row.getField(colIdxs[0])).doubleValue());\n            vec.set(1, ((Number)row.getField(colIdxs[1])).doubleValue());\n        } else {\n            vec = VectorUtil.getVector(row.getField(colIdxs[0]));\n        }\n        return vec;\n    }", "signature": "Vector getKMeansPredictVector(int[] colIdxs, Row row)", "full_signature": "public static Vector getKMeansPredictVector(int[] colIdxs, Row row)", "class_method_signature": "KMeansUtil.getKMeansPredictVector(int[] colIdxs, Row row)", "testcase": false, "constructor": false, "invocations": ["set", "doubleValue", "getField", "set", "doubleValue", "getField", "getVector", "getField"]}, "repository": {"repo_id": 150938406, "url": "https://github.com/alibaba/Alink", "stars": 1923, "created": "9/30/2018 6:36:11 AM +00:00", "updates": "2020-01-27T10:24:34+00:00", "fork": "False", "license": "licensed"}}