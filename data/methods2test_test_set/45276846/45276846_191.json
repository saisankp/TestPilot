{"test_class": {"identifier": "TestAuthUtils", "superclass": "", "interfaces": "", "fields": [], "file": "xenon-common/src/test/java/com/vmware/xenon/common/TestAuthUtils.java"}, "test_case": {"identifier": "defaultBehavior", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void defaultBehavior() throws Exception {\n        Arguments args = new Arguments();\n        args.id = \"id\";\n        args.port = 0;\n        args.authProviderHostUri = \"http://auth-service.somewhere.local:4444\";\n\n        VerificationHost customHost = new VerificationHost();\n        VerificationHost.initialize(customHost, args);\n\n        String link = \"/link-to-sth\";\n        URI uri = AuthUtils.buildAuthProviderHostUri(customHost, link);\n        assertEquals(URI.create(args.authProviderHostUri + link), uri);\n    }", "signature": "void defaultBehavior()", "full_signature": "@Test public void defaultBehavior()", "class_method_signature": "TestAuthUtils.defaultBehavior()", "testcase": true, "constructor": false, "invocations": ["initialize", "buildAuthProviderHostUri", "assertEquals", "create"]}, "focal_class": {"identifier": "AuthUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final ConcurrentMap<String, Function<Claims, String>> URI_BUILDERS = new ConcurrentSkipListMap<>();", "modifier": "private static final", "type": "ConcurrentMap<String, Function<Claims, String>>", "declarator": "URI_BUILDERS = new ConcurrentSkipListMap<>()", "var_name": "URI_BUILDERS"}], "methods": [{"identifier": "AuthUtils", "parameters": "()", "modifiers": "private", "return": "", "signature": " AuthUtils()", "full_signature": "private  AuthUtils()", "class_method_signature": "AuthUtils.AuthUtils()", "testcase": false, "constructor": true}, {"identifier": "buildAuthProviderHostUri", "parameters": "(ServiceHost host, String serviceLink)", "modifiers": "public static", "return": "URI", "signature": "URI buildAuthProviderHostUri(ServiceHost host, String serviceLink)", "full_signature": "public static URI buildAuthProviderHostUri(ServiceHost host, String serviceLink)", "class_method_signature": "AuthUtils.buildAuthProviderHostUri(ServiceHost host, String serviceLink)", "testcase": false, "constructor": false}, {"identifier": "registerUserLinkBuilder", "parameters": "(String authnServiceLink, Function<Claims, String> userLinkBuilder)", "modifiers": "public static", "return": "void", "signature": "void registerUserLinkBuilder(String authnServiceLink, Function<Claims, String> userLinkBuilder)", "full_signature": "public static void registerUserLinkBuilder(String authnServiceLink, Function<Claims, String> userLinkBuilder)", "class_method_signature": "AuthUtils.registerUserLinkBuilder(String authnServiceLink, Function<Claims, String> userLinkBuilder)", "testcase": false, "constructor": false}, {"identifier": "buildUserUriFromClaims", "parameters": "(ServiceHost host, Claims claims)", "modifiers": "public static", "return": "URI", "signature": "URI buildUserUriFromClaims(ServiceHost host, Claims claims)", "full_signature": "public static URI buildUserUriFromClaims(ServiceHost host, Claims claims)", "class_method_signature": "AuthUtils.buildUserUriFromClaims(ServiceHost host, Claims claims)", "testcase": false, "constructor": false}, {"identifier": "setAuthDurationStat", "parameters": "(Service service, String prefix, double value)", "modifiers": "public static", "return": "void", "signature": "void setAuthDurationStat(Service service, String prefix, double value)", "full_signature": "public static void setAuthDurationStat(Service service, String prefix, double value)", "class_method_signature": "AuthUtils.setAuthDurationStat(Service service, String prefix, double value)", "testcase": false, "constructor": false}], "file": "xenon-common/src/main/java/com/vmware/xenon/common/AuthUtils.java"}, "focal_method": {"identifier": "buildAuthProviderHostUri", "parameters": "(ServiceHost host, String serviceLink)", "modifiers": "public static", "return": "URI", "body": "public static URI buildAuthProviderHostUri(ServiceHost host, String serviceLink) {\n        URI uri = host.getStateNoCloning().authProviderHostURI;\n        URI baseUri = uri != null ? uri : host.getUri();\n        return UriUtils.extendUri(baseUri, serviceLink);\n    }", "signature": "URI buildAuthProviderHostUri(ServiceHost host, String serviceLink)", "full_signature": "public static URI buildAuthProviderHostUri(ServiceHost host, String serviceLink)", "class_method_signature": "AuthUtils.buildAuthProviderHostUri(ServiceHost host, String serviceLink)", "testcase": false, "constructor": false, "invocations": ["getStateNoCloning", "getUri", "extendUri"]}, "repository": {"repo_id": 45276846, "url": "https://github.com/vmware-archive/xenon", "language": "Java", "is_fork": false, "fork_count": 97, "stargazer_count": 226, "size": 52010, "license": "licensed"}}