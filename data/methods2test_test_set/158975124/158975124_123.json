{"test_class": {"identifier": "SyncSenderLogAnalyzerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SyncSenderLogAnalyzerTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SyncSenderLogAnalyzerTest.class)", "var_name": "LOGGER"}, {"original_string": "private ISyncSenderLogger senderLogger;", "modifier": "private", "type": "ISyncSenderLogger", "declarator": "senderLogger", "var_name": "senderLogger"}, {"original_string": "private ISyncSenderLogAnalyzer senderLogAnalyzer;", "modifier": "private", "type": "ISyncSenderLogAnalyzer", "declarator": "senderLogAnalyzer", "var_name": "senderLogAnalyzer"}, {"original_string": "private ISyncFileManager manager = SyncFileManager.getInstance();", "modifier": "private", "type": "ISyncFileManager", "declarator": "manager = SyncFileManager.getInstance()", "var_name": "manager"}, {"original_string": "private SyncSenderConfig config = SyncSenderDescriptor.getInstance().getConfig();", "modifier": "private", "type": "SyncSenderConfig", "declarator": "config = SyncSenderDescriptor.getInstance().getConfig()", "var_name": "config"}, {"original_string": "private String dataDir;", "modifier": "private", "type": "String", "declarator": "dataDir", "var_name": "dataDir"}], "file": "server/src/test/java/org/apache/iotdb/db/sync/sender/recover/SyncSenderLogAnalyzerTest.java"}, "test_case": {"identifier": "recover", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void recover() throws IOException, MetadataException {\n    Map<String, Map<Long, Set<File>>> allFileList = new HashMap<>();\n\n    for (int i = 0; i < 3; i++) {\n      IoTDB.metaManager.setStorageGroup(new PartialPath(getSgName(i)));\n    }\n    Random r = new Random(0);\n    for (int i = 0; i < 3; i++) {\n      for (int j = 0; j < 5; j++) {\n        allFileList.computeIfAbsent(getSgName(i), k -> new HashMap<>()).computeIfAbsent(0L, k -> new HashSet<>());\n        String rand = r.nextInt(10000) + TSFILE_SUFFIX;\n        String fileName = FilePathUtils.regularizePath(dataDir) + IoTDBConstant.SEQUENCE_FLODER_NAME\n            + File.separator + getSgName(i) + File.separator + \"0\" + File.separator + rand;\n        File file = new File(fileName);\n        allFileList.get(getSgName(i)).get(0L).add(file);\n        if (!file.getParentFile().exists()) {\n          file.getParentFile().mkdirs();\n        }\n        if (!file.exists() && !file.createNewFile()) {\n          LOGGER.error(\"Can not create new file {}\", file.getPath());\n        }\n        if (!new File(file.getAbsolutePath() + TsFileResource.RESOURCE_SUFFIX).exists()\n            && !new File(file.getAbsolutePath() + TsFileResource.RESOURCE_SUFFIX).createNewFile()) {\n          LOGGER.error(\"Can not create new file {}\", file.getPath());\n        }\n      }\n    }\n    manager.getValidFiles(dataDir);\n    assertTrue(SyncUtils.isEmpty(manager.getLastLocalFilesMap()));\n    senderLogger.startSyncTsFiles();\n    for (Map<Long, Set<File>> map : allFileList.values()) {\n      for (Set<File> newTsFiles : map.values()) {\n        for (File file : newTsFiles) {\n          senderLogger.finishSyncTsfile(file);\n        }\n      }\n    }\n    senderLogger.close();\n\n    // recover log\n    senderLogAnalyzer.recover();\n    manager.getValidFiles(dataDir);\n    assertFalse(SyncUtils.isEmpty(manager.getLastLocalFilesMap()));\n    Map<String, Map<Long, Set<File>>> lastFilesMap = manager.getLastLocalFilesMap();\n    assertFileMap(allFileList, lastFilesMap);\n\n    // delete some files\n    assertFalse(new File(config.getSenderFolderPath(), SyncConstant.SYNC_LOG_NAME).exists());\n    senderLogger = new SyncSenderLogger(\n        new File(config.getSenderFolderPath(), SyncConstant.SYNC_LOG_NAME));\n    manager.getValidFiles(dataDir);\n    assertFalse(SyncUtils.isEmpty(manager.getLastLocalFilesMap()));\n    senderLogger.startSyncDeletedFilesName();\n    for (Map<Long, Set<File>> map : allFileList.values()) {\n      for (Set<File> newTsFiles : map.values()) {\n        for (File file : newTsFiles) {\n          senderLogger.finishSyncDeletedFileName(file);\n        }\n      }\n    }\n    senderLogger.close();\n    // recover log\n    senderLogAnalyzer.recover();\n    manager.getValidFiles(dataDir);\n    assertTrue(SyncUtils.isEmpty(manager.getLastLocalFilesMap()));\n    assertTrue(SyncUtils.isEmpty(manager.getDeletedFilesMap()));\n    Map<String, Map<Long, Set<File>>> toBeSyncedFilesMap = manager.getToBeSyncedFilesMap();\n    assertFileMap(allFileList, toBeSyncedFilesMap);\n  }", "signature": "void recover()", "full_signature": "@Test public void recover()", "class_method_signature": "SyncSenderLogAnalyzerTest.recover()", "testcase": true, "constructor": false, "invocations": ["setStorageGroup", "getSgName", "computeIfAbsent", "computeIfAbsent", "getSgName", "nextInt", "regularizePath", "getSgName", "add", "get", "get", "getSgName", "exists", "getParentFile", "mkdirs", "getParentFile", "exists", "createNewFile", "error", "getPath", "exists", "getAbsolutePath", "createNewFile", "getAbsolutePath", "error", "getPath", "getValidFiles", "assertTrue", "isEmpty", "getLastLocalFilesMap", "startSyncTsFiles", "values", "values", "finishSyncTsfile", "close", "recover", "getValidFiles", "assertFalse", "isEmpty", "getLastLocalFilesMap", "getLastLocalFilesMap", "assertFileMap", "assertFalse", "exists", "getSenderFolderPath", "getSenderFolderPath", "getValidFiles", "assertFalse", "isEmpty", "getLastLocalFilesMap", "startSyncDeletedFilesName", "values", "values", "finishSyncDeletedFileName", "close", "recover", "getValidFiles", "assertTrue", "isEmpty", "getLastLocalFilesMap", "assertTrue", "isEmpty", "getDeletedFilesMap", "getToBeSyncedFilesMap", "assertFileMap"]}, "focal_class": {"identifier": "SyncSenderLogAnalyzer", "superclass": "", "interfaces": "implements ISyncSenderLogAnalyzer", "fields": [{"original_string": "private static final Logger LOGGER = LoggerFactory.getLogger(SyncSenderLogAnalyzer.class);", "modifier": "private static final", "type": "Logger", "declarator": "LOGGER = LoggerFactory.getLogger(SyncSenderLogAnalyzer.class)", "var_name": "LOGGER"}, {"original_string": "private String senderPath;", "modifier": "private", "type": "String", "declarator": "senderPath", "var_name": "senderPath"}, {"original_string": "private File currentLocalFile;", "modifier": "private", "type": "File", "declarator": "currentLocalFile", "var_name": "currentLocalFile"}, {"original_string": "private File lastLocalFile;", "modifier": "private", "type": "File", "declarator": "lastLocalFile", "var_name": "lastLocalFile"}, {"original_string": "private File syncLogFile;", "modifier": "private", "type": "File", "declarator": "syncLogFile", "var_name": "syncLogFile"}], "methods": [{"identifier": "SyncSenderLogAnalyzer", "parameters": "(String senderPath)", "modifiers": "public", "return": "", "signature": " SyncSenderLogAnalyzer(String senderPath)", "full_signature": "public  SyncSenderLogAnalyzer(String senderPath)", "class_method_signature": "SyncSenderLogAnalyzer.SyncSenderLogAnalyzer(String senderPath)", "testcase": false, "constructor": true}, {"identifier": "recover", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void recover()", "full_signature": "@Override public void recover()", "class_method_signature": "SyncSenderLogAnalyzer.recover()", "testcase": false, "constructor": false}, {"identifier": "loadLastLocalFiles", "parameters": "(Set<String> lastLocalFiles)", "modifiers": "@Override public", "return": "void", "signature": "void loadLastLocalFiles(Set<String> lastLocalFiles)", "full_signature": "@Override public void loadLastLocalFiles(Set<String> lastLocalFiles)", "class_method_signature": "SyncSenderLogAnalyzer.loadLastLocalFiles(Set<String> lastLocalFiles)", "testcase": false, "constructor": false}, {"identifier": "loadLogger", "parameters": "(Set<String> deletedFiles, Set<String> newFiles)", "modifiers": "@Override public", "return": "void", "signature": "void loadLogger(Set<String> deletedFiles, Set<String> newFiles)", "full_signature": "@Override public void loadLogger(Set<String> deletedFiles, Set<String> newFiles)", "class_method_signature": "SyncSenderLogAnalyzer.loadLogger(Set<String> deletedFiles, Set<String> newFiles)", "testcase": false, "constructor": false}, {"identifier": "updateLastLocalFile", "parameters": "(Set<String> currentLocalFiles)", "modifiers": "@Override public", "return": "void", "signature": "void updateLastLocalFile(Set<String> currentLocalFiles)", "full_signature": "@Override public void updateLastLocalFile(Set<String> currentLocalFiles)", "class_method_signature": "SyncSenderLogAnalyzer.updateLastLocalFile(Set<String> currentLocalFiles)", "testcase": false, "constructor": false}], "file": "server/src/main/java/org/apache/iotdb/db/sync/sender/recover/SyncSenderLogAnalyzer.java"}, "focal_method": {"identifier": "recover", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n  public void recover() throws IOException {\n    if (currentLocalFile.exists() && !lastLocalFile.exists()) {\n      FileUtils.moveFile(currentLocalFile, lastLocalFile);\n    } else {\n      Set<String> lastLocalFiles = new HashSet<>();\n      Set<String> deletedFiles = new HashSet<>();\n      Set<String> newFiles = new HashSet<>();\n      loadLastLocalFiles(lastLocalFiles);\n      loadLogger(deletedFiles, newFiles);\n      lastLocalFiles.removeAll(deletedFiles);\n      lastLocalFiles.addAll(newFiles);\n      updateLastLocalFile(lastLocalFiles);\n    }\n    FileUtils.deleteDirectory(new File(senderPath, SyncConstant.DATA_SNAPSHOT_NAME));\n    syncLogFile.delete();\n  }", "signature": "void recover()", "full_signature": "@Override public void recover()", "class_method_signature": "SyncSenderLogAnalyzer.recover()", "testcase": false, "constructor": false, "invocations": ["exists", "exists", "moveFile", "loadLastLocalFiles", "loadLogger", "removeAll", "addAll", "updateLastLocalFile", "deleteDirectory", "delete"]}, "repository": {"repo_id": 158975124, "url": "https://github.com/apache/incubator-iotdb", "stars": 449, "created": "11/24/2018 9:29:17 PM +00:00", "updates": "2020-01-21T08:10:15+00:00", "fork": "False", "license": "licensed"}}