{"test_class": {"identifier": "CSVReaderDataPoolTest", "superclass": "extends AbstractArtefactTest", "interfaces": "", "fields": [], "file": "step-plans/step-plans-base-artefacts/src/test/java/step/datapool/file/CSVReaderDataPoolTest.java"}, "test_case": {"identifier": "testCSVReaderDataPoolPut", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testCSVReaderDataPoolPut() throws IOException {\t\t\n\t\tFile tempFile = FileHelper.extractResourceToTempFile(this.getClass(), \"testCSVReaderDataPoolPut.csv\");\n\t\t\n\t\tDataSet<?> pool = getDataPool(tempFile, true);\n\t\t\n\t\tExecutorService threadPool = Executors.newCachedThreadPool();\n\t\tfor(int i=0;i<5;i++) {\n\t\t\tthreadPool.submit(() -> {\n\t\t\t\tDataPoolRow row = null;\n\t\t\t\twhile((row=pool.next())!=null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t((SimpleStringMap)row.getValue()).put(\"Col4\", \"test\");\t\t\t\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif(row != null) {\n\t\t\t\t\t\t\trow.commit();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tpool.close();\n\t\t\n\t\tPlanRunnerResultAssert.assertEquals(getClass(), \"testCSVReaderDataPoolPut.expected.csv\", tempFile);\n\t}", "signature": "void testCSVReaderDataPoolPut()", "full_signature": "@Test public void testCSVReaderDataPoolPut()", "class_method_signature": "CSVReaderDataPoolTest.testCSVReaderDataPoolPut()", "testcase": true, "constructor": false, "invocations": ["extractResourceToTempFile", "getClass", "getDataPool", "newCachedThreadPool", "submit", "next", "put", "getValue", "commit", "close", "assertEquals", "getClass"]}, "focal_class": {"identifier": "CSVReaderDataPool", "superclass": "extends FileReaderDataPool", "interfaces": "", "fields": [{"original_string": "public static final Logger logger = LoggerFactory.getLogger(CSVReaderDataPool.class);", "modifier": "public static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(CSVReaderDataPool.class)", "var_name": "logger"}, {"original_string": "protected Vector<String> headers;", "modifier": "protected", "type": "Vector<String>", "declarator": "headers", "var_name": "headers"}, {"original_string": "protected String delimiter;", "modifier": "protected", "type": "String", "declarator": "delimiter", "var_name": "delimiter"}, {"original_string": "protected AtomicBoolean hasChanges = new AtomicBoolean(false);", "modifier": "protected", "type": "AtomicBoolean", "declarator": "hasChanges = new AtomicBoolean(false)", "var_name": "hasChanges"}, {"original_string": "protected File tempFile;", "modifier": "protected", "type": "File", "declarator": "tempFile", "var_name": "tempFile"}, {"original_string": "protected PrintWriter tempFileWriter;", "modifier": "protected", "type": "PrintWriter", "declarator": "tempFileWriter", "var_name": "tempFileWriter"}], "methods": [{"identifier": "CSVReaderDataPool", "parameters": "(CSVDataPool configuration)", "modifiers": "public", "return": "", "signature": " CSVReaderDataPool(CSVDataPool configuration)", "full_signature": "public  CSVReaderDataPool(CSVDataPool configuration)", "class_method_signature": "CSVReaderDataPool.CSVReaderDataPool(CSVDataPool configuration)", "testcase": false, "constructor": true}, {"identifier": "init", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void init()", "full_signature": "@Override public void init()", "class_method_signature": "CSVReaderDataPool.init()", "testcase": false, "constructor": false}, {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "CSVReaderDataPool.close()", "testcase": false, "constructor": false}, {"identifier": "writeRow", "parameters": "(DataPoolRow row)", "modifiers": "@Override public", "return": "void", "signature": "void writeRow(DataPoolRow row)", "full_signature": "@Override public void writeRow(DataPoolRow row)", "class_method_signature": "CSVReaderDataPool.writeRow(DataPoolRow row)", "testcase": false, "constructor": false}, {"identifier": "isWriteQueueSupportEnabled", "parameters": "()", "modifiers": "@Override protected", "return": "boolean", "signature": "boolean isWriteQueueSupportEnabled()", "full_signature": "@Override protected boolean isWriteQueueSupportEnabled()", "class_method_signature": "CSVReaderDataPool.isWriteQueueSupportEnabled()", "testcase": false, "constructor": false}, {"identifier": "isWriteEnabled", "parameters": "()", "modifiers": "private", "return": "boolean", "signature": "boolean isWriteEnabled()", "full_signature": "private boolean isWriteEnabled()", "class_method_signature": "CSVReaderDataPool.isWriteEnabled()", "testcase": false, "constructor": false}, {"identifier": "postProcess", "parameters": "(String line)", "modifiers": "@Override public", "return": "Object", "signature": "Object postProcess(String line)", "full_signature": "@Override public Object postProcess(String line)", "class_method_signature": "CSVReaderDataPool.postProcess(String line)", "testcase": false, "constructor": false}, {"identifier": "getHeaders", "parameters": "(String readOneLine)", "modifiers": "public", "return": "Vector<String>", "signature": "Vector<String> getHeaders(String readOneLine)", "full_signature": "public Vector<String> getHeaders(String readOneLine)", "class_method_signature": "CSVReaderDataPool.getHeaders(String readOneLine)", "testcase": false, "constructor": false}, {"identifier": "splitCSV", "parameters": "(String readOneLine)", "modifiers": "public", "return": "Vector<String>", "signature": "Vector<String> splitCSV(String readOneLine)", "full_signature": "public Vector<String> splitCSV(String readOneLine)", "class_method_signature": "CSVReaderDataPool.splitCSV(String readOneLine)", "testcase": false, "constructor": false}, {"identifier": "doFirst_", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void doFirst_()", "full_signature": "@Override public void doFirst_()", "class_method_signature": "CSVReaderDataPool.doFirst_()", "testcase": false, "constructor": false}, {"identifier": "addRow", "parameters": "(Object row)", "modifiers": "@Override public", "return": "void", "signature": "void addRow(Object row)", "full_signature": "@Override public void addRow(Object row)", "class_method_signature": "CSVReaderDataPool.addRow(Object row)", "testcase": false, "constructor": false}], "file": "step-plans/step-plans-base-artefacts/src/main/java/step/datapool/file/CSVReaderDataPool.java"}, "focal_method": {"identifier": "close", "parameters": "()", "modifiers": "@Override public", "return": "void", "body": "@Override\n\tpublic void close() {\n\t\tsuper.close();\n\n\t\ttry {\n\t\t\ttempFileWriter.close();\n\t\t\t// persist the changes if necessary\n\t\t\tif (isWriteEnabled() && hasChanges.get()) {\n\t\t\t\t// move the initial file\n\t\t\t\tFile initialFile = new File(filePath + \".initial\");\n\t\t\t\tFiles.move(new File(filePath), initialFile);\n\t\t\t\t// replace the initial file by the temporary file containing the changes\n\t\t\t\tFiles.move(tempFile, new File(filePath));\n\t\t\t\t// delete the initial file\n\t\t\t\tinitialFile.delete();\n\t\t\t}\n\t\t\ttempFile.delete();\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"Error while closing the CSV dataset\", e);\n\t\t}\n\t}", "signature": "void close()", "full_signature": "@Override public void close()", "class_method_signature": "CSVReaderDataPool.close()", "testcase": false, "constructor": false, "invocations": ["close", "close", "isWriteEnabled", "get", "move", "move", "delete", "delete", "error"]}, "repository": {"repo_id": 62342369, "url": "https://github.com/exense/step", "stars": 12, "created": "6/30/2016 9:08:29 PM +00:00", "updates": "2020-01-24T17:13:24+00:00", "fork": "False", "license": "licensed"}}