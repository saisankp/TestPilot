{"test_class": {"identifier": "ElementaryTransformationsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final int N = 10, R=20;", "modifier": "static final", "type": "int", "declarator": "N = 10", "var_name": "N"}, {"original_string": "static final Matrix M = Matrix.square(N), S=new Matrix(N, R), T=new Matrix(R,N);", "modifier": "static final", "type": "Matrix", "declarator": "M = Matrix.square(N)", "var_name": "M"}], "file": "jtstoolkit/src/test/java/ec/tstoolkit/maths/matrices/ElementaryTransformationsTest.java"}, "test_case": {"identifier": "testGivens", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGivens() {\n        Matrix M1 = M.clone(), M2 = M.clone();\n        ElementaryTransformations.fastGivensTriangularize(M1.subMatrix());\n        ElementaryTransformations.givensTriangularize(M2.subMatrix());\n        assertTrue(M1.minus(M2).nrm2() < 1e-9);\n        Matrix S1 = S.clone(), S2 = S.clone();\n        ElementaryTransformations.fastGivensTriangularize(S1.subMatrix());\n        ElementaryTransformations.givensTriangularize(S2.subMatrix());\n        assertTrue(S1.minus(S2).nrm2() < 1e-9);\n        Matrix T1 = T.clone(), T2 = T.clone();\n        ElementaryTransformations.fastGivensTriangularize(T1.subMatrix());\n        ElementaryTransformations.givensTriangularize(T2.subMatrix());\n        assertTrue(T1.minus(T2).nrm2() < 1e-9);\n    }", "signature": "void testGivens()", "full_signature": "@Test public void testGivens()", "class_method_signature": "ElementaryTransformationsTest.testGivens()", "testcase": true, "constructor": false, "invocations": ["clone", "clone", "fastGivensTriangularize", "subMatrix", "givensTriangularize", "subMatrix", "assertTrue", "nrm2", "minus", "clone", "clone", "fastGivensTriangularize", "subMatrix", "givensTriangularize", "subMatrix", "assertTrue", "nrm2", "minus", "clone", "clone", "fastGivensTriangularize", "subMatrix", "givensTriangularize", "subMatrix", "assertTrue", "nrm2", "minus"]}, "focal_class": {"identifier": "ElementaryTransformations", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "transform", "parameters": "(IVectorTransformation transformation, DataBlockIterator vectors)", "modifiers": "public static", "return": "void", "signature": "void transform(IVectorTransformation transformation, DataBlockIterator vectors)", "full_signature": "public static void transform(IVectorTransformation transformation, DataBlockIterator vectors)", "class_method_signature": "ElementaryTransformations.transform(IVectorTransformation transformation, DataBlockIterator vectors)", "testcase": false, "constructor": false}, {"identifier": "rowHouseholder", "parameters": "(SubMatrix m)", "modifiers": "public static", "return": "void", "signature": "void rowHouseholder(SubMatrix m)", "full_signature": "public static void rowHouseholder(SubMatrix m)", "class_method_signature": "ElementaryTransformations.rowHouseholder(SubMatrix m)", "testcase": false, "constructor": false}, {"identifier": "givensTriangularize", "parameters": "(final SubMatrix X)", "modifiers": "public static", "return": "boolean", "signature": "boolean givensTriangularize(final SubMatrix X)", "full_signature": "public static boolean givensTriangularize(final SubMatrix X)", "class_method_signature": "ElementaryTransformations.givensTriangularize(final SubMatrix X)", "testcase": false, "constructor": false}, {"identifier": "fastRowGivens", "parameters": "(final SubMatrix X)", "modifiers": "public static", "return": "boolean", "signature": "boolean fastRowGivens(final SubMatrix X)", "full_signature": "public static boolean fastRowGivens(final SubMatrix X)", "class_method_signature": "ElementaryTransformations.fastRowGivens(final SubMatrix X)", "testcase": false, "constructor": false}, {"identifier": "rowHouseholder", "parameters": "(final DataBlock row, final SubMatrix X)", "modifiers": "public static", "return": "void", "signature": "void rowHouseholder(final DataBlock row, final SubMatrix X)", "full_signature": "public static void rowHouseholder(final DataBlock row, final SubMatrix X)", "class_method_signature": "ElementaryTransformations.rowHouseholder(final DataBlock row, final SubMatrix X)", "testcase": false, "constructor": false}, {"identifier": "fastRowGivens", "parameters": "(final DataBlock row, final SubMatrix X)", "modifiers": "public static", "return": "boolean", "signature": "boolean fastRowGivens(final DataBlock row, final SubMatrix X)", "full_signature": "public static boolean fastRowGivens(final DataBlock row, final SubMatrix X)", "class_method_signature": "ElementaryTransformations.fastRowGivens(final DataBlock row, final SubMatrix X)", "testcase": false, "constructor": false}, {"identifier": "fastGivensTriangularize", "parameters": "(final SubMatrix X)", "modifiers": "public static", "return": "boolean", "signature": "boolean fastGivensTriangularize(final SubMatrix X)", "full_signature": "public static boolean fastGivensTriangularize(final SubMatrix X)", "class_method_signature": "ElementaryTransformations.fastGivensTriangularize(final SubMatrix X)", "testcase": false, "constructor": false}, {"identifier": "householderTriangularize", "parameters": "(final SubMatrix X)", "modifiers": "public static", "return": "boolean", "signature": "boolean householderTriangularize(final SubMatrix X)", "full_signature": "public static boolean householderTriangularize(final SubMatrix X)", "class_method_signature": "ElementaryTransformations.householderTriangularize(final SubMatrix X)", "testcase": false, "constructor": false}, {"identifier": "rowGivens", "parameters": "(SubMatrix m)", "modifiers": "public static", "return": "void", "signature": "void rowGivens(SubMatrix m)", "full_signature": "public static void rowGivens(SubMatrix m)", "class_method_signature": "ElementaryTransformations.rowGivens(SubMatrix m)", "testcase": false, "constructor": false}, {"identifier": "columnHouseholder", "parameters": "(SubMatrix m)", "modifiers": "public static", "return": "void", "signature": "void columnHouseholder(SubMatrix m)", "full_signature": "public static void columnHouseholder(SubMatrix m)", "class_method_signature": "ElementaryTransformations.columnHouseholder(SubMatrix m)", "testcase": false, "constructor": false}, {"identifier": "householder", "parameters": "(DataBlockIterator vectors)", "modifiers": "private static", "return": "void", "signature": "void householder(DataBlockIterator vectors)", "full_signature": "private static void householder(DataBlockIterator vectors)", "class_method_signature": "ElementaryTransformations.householder(DataBlockIterator vectors)", "testcase": false, "constructor": false}, {"identifier": "extendedGivensTriangularize", "parameters": "(Matrix X, DataBlock W, Matrix L, DataBlock V)", "modifiers": "public static", "return": "boolean", "signature": "boolean extendedGivensTriangularize(Matrix X, DataBlock W, Matrix L, DataBlock V)", "full_signature": "public static boolean extendedGivensTriangularize(Matrix X, DataBlock W, Matrix L, DataBlock V)", "class_method_signature": "ElementaryTransformations.extendedGivensTriangularize(Matrix X, DataBlock W, Matrix L, DataBlock V)", "testcase": false, "constructor": false}, {"identifier": "givens", "parameters": "(DataBlockIterator vectors, int n)", "modifiers": "private static", "return": "void", "signature": "void givens(DataBlockIterator vectors, int n)", "full_signature": "private static void givens(DataBlockIterator vectors, int n)", "class_method_signature": "ElementaryTransformations.givens(DataBlockIterator vectors, int n)", "testcase": false, "constructor": false}, {"identifier": "hypotenuse", "parameters": "(double x, double y)", "modifiers": "public static", "return": "double", "signature": "double hypotenuse(double x, double y)", "full_signature": "public static double hypotenuse(double x, double y)", "class_method_signature": "ElementaryTransformations.hypotenuse(double x, double y)", "testcase": false, "constructor": false}], "file": "jtstoolkit/src/main/java/ec/tstoolkit/maths/matrices/ElementaryTransformations.java"}, "focal_method": {"identifier": "givens", "parameters": "(DataBlockIterator vectors, int n)", "modifiers": "private static", "return": "void", "body": "private static void givens(DataBlockIterator vectors, int n) {\n        DataBlock cur = vectors.getData();\n        for (int i = 1; i < n; ++i) {\n            vectors.begin();\n            if (cur.get(i) != 0) {\n                GivensRotation rotation = new GivensRotation(cur, i);\n                while (vectors.next()) {\n                    rotation.transform(cur);\n                }\n            }\n        }\n    }", "signature": "void givens(DataBlockIterator vectors, int n)", "full_signature": "private static void givens(DataBlockIterator vectors, int n)", "class_method_signature": "ElementaryTransformations.givens(DataBlockIterator vectors, int n)", "testcase": false, "constructor": false, "invocations": ["getData", "begin", "get", "next", "transform"]}, "repository": {"repo_id": 28178086, "url": "https://github.com/jdemetra/jdemetra-core", "stars": 24, "created": "12/18/2014 10:00:58 AM +00:00", "updates": "2020-01-17T15:50:24+00:00", "fork": "False", "license": "licensed"}}