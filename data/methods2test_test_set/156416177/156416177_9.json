{"test_class": {"identifier": "TagTest", "superclass": "", "interfaces": "", "fields": [], "file": "java/component/keyple-core/src/test/java/org/eclipse/keyple/core/util/bertlv/TagTest.java"}, "test_case": {"identifier": "equals1", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void equals1() {\n    Tag tag1 = new Tag(0x55, Tag.UNIVERSAL, Tag.TagType.PRIMITIVE, 2);\n    Tag tag2 = new Tag(ByteArrayUtil.fromHex(\"1F550100\"), 0);\n    Tag tag3 = new Tag(ByteArrayUtil.fromHex(\"6F550100\"), 0);\n    System.out.println(\"Tag1: \" + tag1.toString());\n    System.out.println(\"Tag2: \" + tag2.toString());\n    System.out.println(\"Tag3: \" + tag3.toString());\n    Assert.assertEquals(tag1, tag2);\n    Assert.assertNotEquals(tag1, tag3);\n    Assert.assertNotEquals(tag2, tag3);\n\n    Tag tag4 = new Tag(0x05, Tag.UNIVERSAL, Tag.TagType.CONSTRUCTED, 1);\n    Tag tag5 = new Tag(ByteArrayUtil.fromHex(\"250100\"), 0);\n    System.out.println(\"Tag4: \" + tag4.toString());\n    System.out.println(\"Tag5: \" + tag5.toString());\n    Assert.assertEquals(tag4, tag5);\n\n    Tag tag6 = new Tag(0x07, Tag.UNIVERSAL, Tag.TagType.PRIMITIVE, 1);\n    Tag tag7 = new Tag(ByteArrayUtil.fromHex(\"070100\"), 0);\n    System.out.println(\"Tag6: \" + tag6.toString());\n    System.out.println(\"Tag7: \" + tag7.toString());\n    Assert.assertEquals(tag6, tag7);\n\n    Tag tag8 = new Tag(0x12, Tag.UNIVERSAL, Tag.TagType.PRIMITIVE, 2);\n    Tag tag9 = new Tag(ByteArrayUtil.fromHex(\"1F120100\"), 0);\n    System.out.println(\"Tag8: \" + tag8.toString());\n    System.out.println(\"Tag9: \" + tag9.toString());\n    Assert.assertEquals(tag8, tag9);\n  }", "signature": "void equals1()", "full_signature": "@Test public void equals1()", "class_method_signature": "TagTest.equals1()", "testcase": true, "constructor": false, "invocations": ["fromHex", "fromHex", "println", "toString", "println", "toString", "println", "toString", "assertEquals", "assertNotEquals", "assertNotEquals", "fromHex", "println", "toString", "println", "toString", "assertEquals", "fromHex", "println", "toString", "println", "toString", "assertEquals", "fromHex", "println", "toString", "println", "toString", "assertEquals"]}, "focal_class": {"identifier": "Tag", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final int tagNumber;", "modifier": "private final", "type": "int", "declarator": "tagNumber", "var_name": "tagNumber"}, {"original_string": "private final byte tagClass;", "modifier": "private final", "type": "byte", "declarator": "tagClass", "var_name": "tagClass"}, {"original_string": "private final TagType tagType;", "modifier": "private final", "type": "TagType", "declarator": "tagType", "var_name": "tagType"}, {"original_string": "private final int tagSize;", "modifier": "private final", "type": "int", "declarator": "tagSize", "var_name": "tagSize"}, {"original_string": "public static final byte UNIVERSAL = (byte) 0x00;", "modifier": "public static final", "type": "byte", "declarator": "UNIVERSAL = (byte) 0x00", "var_name": "UNIVERSAL"}, {"original_string": "public static final byte APPLICATION = (byte) 0x01;", "modifier": "public static final", "type": "byte", "declarator": "APPLICATION = (byte) 0x01", "var_name": "APPLICATION"}, {"original_string": "public static final byte CONTEXT = (byte) 0x02;", "modifier": "public static final", "type": "byte", "declarator": "CONTEXT = (byte) 0x02", "var_name": "CONTEXT"}, {"original_string": "public static final byte PRIVATE = (byte) 0x03;", "modifier": "public static final", "type": "byte", "declarator": "PRIVATE = (byte) 0x03", "var_name": "PRIVATE"}], "methods": [{"identifier": "Tag", "parameters": "(int tagNumber, byte tagClass, TagType tagType, int tagSize)", "modifiers": "public", "return": "", "signature": " Tag(int tagNumber, byte tagClass, TagType tagType, int tagSize)", "full_signature": "public  Tag(int tagNumber, byte tagClass, TagType tagType, int tagSize)", "class_method_signature": "Tag.Tag(int tagNumber, byte tagClass, TagType tagType, int tagSize)", "testcase": false, "constructor": true}, {"identifier": "Tag", "parameters": "(byte[] binary, int offset)", "modifiers": "public", "return": "", "signature": " Tag(byte[] binary, int offset)", "full_signature": "public  Tag(byte[] binary, int offset)", "class_method_signature": "Tag.Tag(byte[] binary, int offset)", "testcase": false, "constructor": true}, {"identifier": "getTagNumber", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTagNumber()", "full_signature": "public int getTagNumber()", "class_method_signature": "Tag.getTagNumber()", "testcase": false, "constructor": false}, {"identifier": "getTagClass", "parameters": "()", "modifiers": "public", "return": "byte", "signature": "byte getTagClass()", "full_signature": "public byte getTagClass()", "class_method_signature": "Tag.getTagClass()", "testcase": false, "constructor": false}, {"identifier": "getTagType", "parameters": "()", "modifiers": "public", "return": "TagType", "signature": "TagType getTagType()", "full_signature": "public TagType getTagType()", "class_method_signature": "Tag.getTagType()", "testcase": false, "constructor": false}, {"identifier": "getTagSize", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTagSize()", "full_signature": "public int getTagSize()", "class_method_signature": "Tag.getTagSize()", "testcase": false, "constructor": false}, {"identifier": "equals", "parameters": "(Object o)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean equals(Object o)", "full_signature": "@Override public boolean equals(Object o)", "class_method_signature": "Tag.equals(Object o)", "testcase": false, "constructor": false}, {"identifier": "hashCode", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int hashCode()", "full_signature": "@Override public int hashCode()", "class_method_signature": "Tag.hashCode()", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Tag.toString()", "testcase": false, "constructor": false}], "file": "java/component/keyple-core/src/main/java/org/eclipse/keyple/core/util/bertlv/Tag.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String toString() {\n    String tagClassString;\n    switch (tagClass) {\n      case Tag.UNIVERSAL:\n        tagClassString = \"UNIVERSAL\";\n        break;\n      case Tag.APPLICATION:\n        tagClassString = \"APPLICATION\";\n        break;\n      case Tag.CONTEXT:\n        tagClassString = \"CONTEXT\";\n        break;\n      case Tag.PRIVATE:\n        tagClassString = \"PRIVATE\";\n        break;\n      default:\n        tagClassString = \"UNKWOWN\";\n        break;\n    }\n    return String.format(\n        \"TAG: size=%d Class=%s, Type=%s, Number=%X\", tagSize, tagClassString, tagType, tagNumber);\n  }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "Tag.toString()", "testcase": false, "constructor": false, "invocations": ["format"]}, "repository": {"repo_id": 156416177, "url": "https://github.com/eclipse/keyple-java", "language": "Java", "is_fork": false, "fork_count": 11, "stargazer_count": 8, "size": 10325, "license": "licensed"}}