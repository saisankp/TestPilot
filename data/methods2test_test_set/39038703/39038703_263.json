{"test_class": {"identifier": "LicenseUtilsTest", "superclass": "extends AbstractUnitTest", "interfaces": "", "fields": [{"original_string": "private static final Logger log = Logger.getLogger(LicenseUtilsTest.class);", "modifier": "private static final", "type": "Logger", "declarator": "log = Logger.getLogger(LicenseUtilsTest.class)", "var_name": "log"}, {"original_string": "protected CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();", "modifier": "protected", "type": "CommunityService", "declarator": "communityService = ContentServiceFactory.getInstance().getCommunityService()", "var_name": "communityService"}, {"original_string": "protected CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();", "modifier": "protected", "type": "CollectionService", "declarator": "collectionService = ContentServiceFactory.getInstance().getCollectionService()", "var_name": "collectionService"}, {"original_string": "protected EPersonService ePersonService = EPersonServiceFactory.getInstance().getEPersonService();", "modifier": "protected", "type": "EPersonService", "declarator": "ePersonService = EPersonServiceFactory.getInstance().getEPersonService()", "var_name": "ePersonService"}, {"original_string": "protected ItemService itemService = ContentServiceFactory.getInstance().getItemService();", "modifier": "protected", "type": "ItemService", "declarator": "itemService = ContentServiceFactory.getInstance().getItemService()", "var_name": "itemService"}, {"original_string": "protected InstallItemService installItemService = ContentServiceFactory.getInstance().getInstallItemService();", "modifier": "protected", "type": "InstallItemService", "declarator": "installItemService = ContentServiceFactory.getInstance().getInstallItemService()", "var_name": "installItemService"}, {"original_string": "protected WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();", "modifier": "protected", "type": "WorkspaceItemService", "declarator": "workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService()", "var_name": "workspaceItemService"}, {"original_string": "protected LicenseService licenseService = CoreServiceFactory.getInstance().getLicenseService();", "modifier": "protected", "type": "LicenseService", "declarator": "licenseService = CoreServiceFactory.getInstance().getLicenseService()", "var_name": "licenseService"}, {"original_string": "protected BitstreamService bitstreamService = ContentServiceFactory.getInstance().getBitstreamService();", "modifier": "protected", "type": "BitstreamService", "declarator": "bitstreamService = ContentServiceFactory.getInstance().getBitstreamService()", "var_name": "bitstreamService"}, {"original_string": "private Community owningCommunity;", "modifier": "private", "type": "Community", "declarator": "owningCommunity", "var_name": "owningCommunity"}], "file": "dspace-api/src/test/java/org/dspace/content/LicenseUtilsTest.java"}, "test_case": {"identifier": "testGrantLicense", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGrantLicense() throws Exception\n    {\n        context.turnOffAuthorisationSystem();\n        Collection collection = collectionService.create(context, owningCommunity);\n        Item item = installItemService.installItem(context, workspaceItemService.create(context, collection, false));\n        String defaultLicense = licenseService.getDefaultSubmissionLicense();\n\n        LicenseUtils.grantLicense(context, item, defaultLicense);\n\n        StringWriter writer = new StringWriter();\n        IOUtils.copy(bitstreamService.retrieve(context, itemService.getBundles(item, \"LICENSE\").get(0).getBitstreams().get(0)), writer);\n        String license = writer.toString();\n\n        assertThat(\"testGrantLicense 0\",license, equalTo(defaultLicense));\n        context.restoreAuthSystemState();\n    }", "signature": "void testGrantLicense()", "full_signature": "@Test public void testGrantLicense()", "class_method_signature": "LicenseUtilsTest.testGrantLicense()", "testcase": true, "constructor": false, "invocations": ["turnOffAuthorisationSystem", "create", "installItem", "create", "getDefaultSubmissionLicense", "grantLicense", "copy", "retrieve", "get", "getBitstreams", "get", "getBundles", "toString", "assertThat", "equalTo", "restoreAuthSystemState"]}, "focal_class": {"identifier": "LicenseUtils", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final BitstreamService bitstreamService = ContentServiceFactory.getInstance().getBitstreamService();", "modifier": "private static final", "type": "BitstreamService", "declarator": "bitstreamService = ContentServiceFactory.getInstance().getBitstreamService()", "var_name": "bitstreamService"}, {"original_string": "private static final BitstreamFormatService bitstreamFormat = ContentServiceFactory.getInstance().getBitstreamFormatService();", "modifier": "private static final", "type": "BitstreamFormatService", "declarator": "bitstreamFormat = ContentServiceFactory.getInstance().getBitstreamFormatService()", "var_name": "bitstreamFormat"}, {"original_string": "private static final CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();", "modifier": "private static final", "type": "CollectionService", "declarator": "collectionService = ContentServiceFactory.getInstance().getCollectionService()", "var_name": "collectionService"}, {"original_string": "private static final ItemService itemService = ContentServiceFactory.getInstance().getItemService();", "modifier": "private static final", "type": "ItemService", "declarator": "itemService = ContentServiceFactory.getInstance().getItemService()", "var_name": "itemService"}], "methods": [{"identifier": "getLicenseText", "parameters": "(Locale locale, Collection collection,\n            Item item, EPerson eperson, Map<String, Object> additionalInfo)", "modifiers": "public static", "return": "String", "signature": "String getLicenseText(Locale locale, Collection collection,\n            Item item, EPerson eperson, Map<String, Object> additionalInfo)", "full_signature": "public static String getLicenseText(Locale locale, Collection collection,\n            Item item, EPerson eperson, Map<String, Object> additionalInfo)", "class_method_signature": "LicenseUtils.getLicenseText(Locale locale, Collection collection,\n            Item item, EPerson eperson, Map<String, Object> additionalInfo)", "testcase": false, "constructor": false}, {"identifier": "getLicenseText", "parameters": "(Locale locale, Collection collection,\n            Item item, EPerson eperson)", "modifiers": "public static", "return": "String", "signature": "String getLicenseText(Locale locale, Collection collection,\n            Item item, EPerson eperson)", "full_signature": "public static String getLicenseText(Locale locale, Collection collection,\n            Item item, EPerson eperson)", "class_method_signature": "LicenseUtils.getLicenseText(Locale locale, Collection collection,\n            Item item, EPerson eperson)", "testcase": false, "constructor": false}, {"identifier": "grantLicense", "parameters": "(Context context, Item item,\n            String licenseText)", "modifiers": "public static", "return": "void", "signature": "void grantLicense(Context context, Item item,\n            String licenseText)", "full_signature": "public static void grantLicense(Context context, Item item,\n            String licenseText)", "class_method_signature": "LicenseUtils.grantLicense(Context context, Item item,\n            String licenseText)", "testcase": false, "constructor": false}], "file": "dspace-api/src/main/java/org/dspace/content/LicenseUtils.java"}, "focal_method": {"identifier": "grantLicense", "parameters": "(Context context, Item item,\n            String licenseText)", "modifiers": "public static", "return": "void", "body": "public static void grantLicense(Context context, Item item,\n            String licenseText) throws SQLException, IOException,\n            AuthorizeException\n    {\n        // Put together text to store\n        // String licenseText = \"License granted by \" + eperson.getFullName()\n        // + \" (\" + eperson.getEmail() + \") on \"\n        // + DCDate.getCurrent().toString() + \" (GMT):\\n\\n\" + license;\n\n        // Store text as a bitstream\n        byte[] licenseBytes = licenseText.getBytes(\"UTF-8\");\n        ByteArrayInputStream bais = new ByteArrayInputStream(licenseBytes);\n        Bitstream b = itemService.createSingleBitstream(context, bais, item, \"LICENSE\");\n\n        // Now set the format and name of the bitstream\n        b.setName(context, \"license.txt\");\n        b.setSource(context, \"Written by org.dspace.content.LicenseUtils\");\n\n        // Find the License format\n        BitstreamFormat bf = bitstreamFormat.findByShortDescription(context,\n                \"License\");\n        b.setFormat(bf);\n\n        bitstreamService.update(context, b);\n    }", "signature": "void grantLicense(Context context, Item item,\n            String licenseText)", "full_signature": "public static void grantLicense(Context context, Item item,\n            String licenseText)", "class_method_signature": "LicenseUtils.grantLicense(Context context, Item item,\n            String licenseText)", "testcase": false, "constructor": false, "invocations": ["getBytes", "createSingleBitstream", "setName", "setSource", "findByShortDescription", "setFormat", "update"]}, "repository": {"repo_id": 39038703, "url": "https://github.com/VTUL/vtechworks", "language": "Java", "is_fork": false, "fork_count": 6, "stargazer_count": 6, "size": 112021, "license": "licensed"}}