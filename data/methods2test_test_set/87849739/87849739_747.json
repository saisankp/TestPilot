{"test_class": {"identifier": "MainMethodExceptionHandlerTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private static final String CLASS_NAME = \"com.example.FooService\";", "modifier": "private static final", "type": "String", "declarator": "CLASS_NAME = \"com.example.FooService\"", "var_name": "CLASS_NAME"}, {"original_string": "@Mock\n    private Logger logger;", "modifier": "@Mock\n    private", "type": "Logger", "declarator": "logger", "var_name": "logger"}, {"original_string": "private MainMethodExceptionHandler underTest;", "modifier": "private", "type": "MainMethodExceptionHandler", "declarator": "underTest", "var_name": "underTest"}], "file": "services/base/src/test/java/org/eclipse/ditto/services/base/MainMethodExceptionHandlerTest.java"}, "test_case": {"identifier": "tryToRunNullRunnable", "parameters": "()", "modifiers": "@SuppressWarnings(\"ConstantConditions\") @Test public", "return": "void", "body": "@SuppressWarnings(\"ConstantConditions\")\n    @Test\n    public void tryToRunNullRunnable() {\n        assertThatNullPointerException()\n                .isThrownBy(() -> underTest.call(null))\n                .withMessage(\"The %s must not be null!\", \"Runnable to be executed\")\n                .withNoCause();\n    }", "signature": "void tryToRunNullRunnable()", "full_signature": "@SuppressWarnings(\"ConstantConditions\") @Test public void tryToRunNullRunnable()", "class_method_signature": "MainMethodExceptionHandlerTest.tryToRunNullRunnable()", "testcase": true, "constructor": false, "invocations": ["withNoCause", "withMessage", "isThrownBy", "assertThatNullPointerException", "call"]}, "focal_class": {"identifier": "MainMethodExceptionHandler", "superclass": "", "interfaces": "", "fields": [{"original_string": "static final String LOG_MESSAGE_PATTERN = \"An exception occurred in main method of <{0}>!\";", "modifier": "static final", "type": "String", "declarator": "LOG_MESSAGE_PATTERN = \"An exception occurred in main method of <{0}>!\"", "var_name": "LOG_MESSAGE_PATTERN"}, {"original_string": "private final Logger logger;", "modifier": "private final", "type": "Logger", "declarator": "logger", "var_name": "logger"}], "methods": [{"identifier": "MainMethodExceptionHandler", "parameters": "(final Logger theLogger)", "modifiers": "private", "return": "", "signature": " MainMethodExceptionHandler(final Logger theLogger)", "full_signature": "private  MainMethodExceptionHandler(final Logger theLogger)", "class_method_signature": "MainMethodExceptionHandler.MainMethodExceptionHandler(final Logger theLogger)", "testcase": false, "constructor": true}, {"identifier": "getInstance", "parameters": "(final Logger logger)", "modifiers": "public static", "return": "MainMethodExceptionHandler", "signature": "MainMethodExceptionHandler getInstance(final Logger logger)", "full_signature": "public static MainMethodExceptionHandler getInstance(final Logger logger)", "class_method_signature": "MainMethodExceptionHandler.getInstance(final Logger logger)", "testcase": false, "constructor": false}, {"identifier": "call", "parameters": "(final Callable<ActorSystem> mainMethodBody)", "modifiers": "public", "return": "ActorSystem", "signature": "ActorSystem call(final Callable<ActorSystem> mainMethodBody)", "full_signature": "public ActorSystem call(final Callable<ActorSystem> mainMethodBody)", "class_method_signature": "MainMethodExceptionHandler.call(final Callable<ActorSystem> mainMethodBody)", "testcase": false, "constructor": false}, {"identifier": "tryToRunMainMethodBody", "parameters": "(final Callable<ActorSystem> mainMethodBody)", "modifiers": "@SuppressWarnings(\"squid:S1181\") private", "return": "ActorSystem", "signature": "ActorSystem tryToRunMainMethodBody(final Callable<ActorSystem> mainMethodBody)", "full_signature": "@SuppressWarnings(\"squid:S1181\") private ActorSystem tryToRunMainMethodBody(final Callable<ActorSystem> mainMethodBody)", "class_method_signature": "MainMethodExceptionHandler.tryToRunMainMethodBody(final Callable<ActorSystem> mainMethodBody)", "testcase": false, "constructor": false}], "file": "services/base/src/main/java/org/eclipse/ditto/services/base/MainMethodExceptionHandler.java"}, "focal_method": {"identifier": "call", "parameters": "(final Callable<ActorSystem> mainMethodBody)", "modifiers": "public", "return": "ActorSystem", "body": "public ActorSystem call(final Callable<ActorSystem> mainMethodBody) {\n        return tryToRunMainMethodBody(checkNotNull(mainMethodBody, \"Runnable to be executed\"));\n    }", "signature": "ActorSystem call(final Callable<ActorSystem> mainMethodBody)", "full_signature": "public ActorSystem call(final Callable<ActorSystem> mainMethodBody)", "class_method_signature": "MainMethodExceptionHandler.call(final Callable<ActorSystem> mainMethodBody)", "testcase": false, "constructor": false, "invocations": ["tryToRunMainMethodBody", "checkNotNull"]}, "repository": {"repo_id": 87849739, "url": "https://github.com/eclipse/ditto", "stars": 139, "created": "4/10/2017 7:29:57 PM +00:00", "updates": "2020-01-27T14:02:39+00:00", "fork": "False", "license": "licensed"}}