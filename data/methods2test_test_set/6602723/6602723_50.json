{"test_class": {"identifier": "TestAnnotatedMethodScanner", "superclass": "", "interfaces": "", "fields": [{"original_string": "private ClassLoader mockClassLoader;", "modifier": "private", "type": "ClassLoader", "declarator": "mockClassLoader", "var_name": "mockClassLoader"}, {"original_string": "private ClassPathScanningCandidateComponentProvider mockProvider;", "modifier": "private", "type": "ClassPathScanningCandidateComponentProvider", "declarator": "mockProvider", "var_name": "mockProvider"}, {"original_string": "private AnnotatedMethodScanner impl;", "modifier": "private", "type": "AnnotatedMethodScanner", "declarator": "impl", "var_name": "impl"}], "file": "jrugged-spring/src/test/java/org/fishwife/jrugged/spring/TestAnnotatedMethodScanner.java"}, "test_case": {"identifier": "testFindCandidateBeansAppliesAnnotatedMethodFilter", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFindCandidateBeansAppliesAnnotatedMethodFilter() {\n        String basePackage = \"faux.package\";\n        Set<BeanDefinition> filteredComponents = new HashSet<BeanDefinition>();\n\n        mockProvider.resetFilters(false);\n        expectLastCall();\n        mockProvider.addIncludeFilter(EasyMock.isA(AnnotatedMethodFilter.class));\n        expectLastCall();\n\n        expect(mockProvider.findCandidateComponents(eq(basePackage.replace('.', '/')))).\n                   andReturn(filteredComponents);\n\n        replayMocks();\n        impl.findCandidateBeans(basePackage, SomeAnno.class);\n        verifyMocks();\n    }", "signature": "void testFindCandidateBeansAppliesAnnotatedMethodFilter()", "full_signature": "@Test public void testFindCandidateBeansAppliesAnnotatedMethodFilter()", "class_method_signature": "TestAnnotatedMethodScanner.testFindCandidateBeansAppliesAnnotatedMethodFilter()", "testcase": true, "constructor": false, "invocations": ["resetFilters", "expectLastCall", "addIncludeFilter", "isA", "expectLastCall", "andReturn", "expect", "findCandidateComponents", "eq", "replace", "replayMocks", "findCandidateBeans", "verifyMocks"]}, "focal_class": {"identifier": "AnnotatedMethodScanner", "superclass": "", "interfaces": "", "fields": [{"original_string": "private final ClassLoader classLoader;", "modifier": "private final", "type": "ClassLoader", "declarator": "classLoader", "var_name": "classLoader"}, {"original_string": "private final ClassPathScanningCandidateComponentProvider provider;", "modifier": "private final", "type": "ClassPathScanningCandidateComponentProvider", "declarator": "provider", "var_name": "provider"}], "methods": [{"identifier": "AnnotatedMethodScanner", "parameters": "()", "modifiers": "public", "return": "", "signature": " AnnotatedMethodScanner()", "full_signature": "public  AnnotatedMethodScanner()", "class_method_signature": "AnnotatedMethodScanner.AnnotatedMethodScanner()", "testcase": false, "constructor": true}, {"identifier": "AnnotatedMethodScanner", "parameters": "(ClassLoader classLoader, ClassPathScanningCandidateComponentProvider provider)", "modifiers": "", "return": "", "signature": " AnnotatedMethodScanner(ClassLoader classLoader, ClassPathScanningCandidateComponentProvider provider)", "full_signature": "  AnnotatedMethodScanner(ClassLoader classLoader, ClassPathScanningCandidateComponentProvider provider)", "class_method_signature": "AnnotatedMethodScanner.AnnotatedMethodScanner(ClassLoader classLoader, ClassPathScanningCandidateComponentProvider provider)", "testcase": false, "constructor": true}, {"identifier": "findAnnotatedMethods", "parameters": "(String scanBase, Class<? extends Annotation> annotationClass)", "modifiers": "public", "return": "Set<Method>", "signature": "Set<Method> findAnnotatedMethods(String scanBase, Class<? extends Annotation> annotationClass)", "full_signature": "public Set<Method> findAnnotatedMethods(String scanBase, Class<? extends Annotation> annotationClass)", "class_method_signature": "AnnotatedMethodScanner.findAnnotatedMethods(String scanBase, Class<? extends Annotation> annotationClass)", "testcase": false, "constructor": false}, {"identifier": "extractAnnotatedMethods", "parameters": "(\n            Set<BeanDefinition> filteredComponents,\n            Class<? extends Annotation> annoClass)", "modifiers": "", "return": "Set<Method>", "signature": "Set<Method> extractAnnotatedMethods(\n            Set<BeanDefinition> filteredComponents,\n            Class<? extends Annotation> annoClass)", "full_signature": " Set<Method> extractAnnotatedMethods(\n            Set<BeanDefinition> filteredComponents,\n            Class<? extends Annotation> annoClass)", "class_method_signature": "AnnotatedMethodScanner.extractAnnotatedMethods(\n            Set<BeanDefinition> filteredComponents,\n            Class<? extends Annotation> annoClass)", "testcase": false, "constructor": false}, {"identifier": "findCandidateBeans", "parameters": "(String scanBase,\n            Class<? extends Annotation> annotatedClass)", "modifiers": "synchronized", "return": "Set<BeanDefinition>", "signature": "Set<BeanDefinition> findCandidateBeans(String scanBase,\n            Class<? extends Annotation> annotatedClass)", "full_signature": "synchronized Set<BeanDefinition> findCandidateBeans(String scanBase,\n            Class<? extends Annotation> annotatedClass)", "class_method_signature": "AnnotatedMethodScanner.findCandidateBeans(String scanBase,\n            Class<? extends Annotation> annotatedClass)", "testcase": false, "constructor": false}], "file": "jrugged-spring/src/main/java/org/fishwife/jrugged/spring/AnnotatedMethodScanner.java"}, "focal_method": {"identifier": "findCandidateBeans", "parameters": "(String scanBase,\n            Class<? extends Annotation> annotatedClass)", "modifiers": "synchronized", "return": "Set<BeanDefinition>", "body": "synchronized Set<BeanDefinition> findCandidateBeans(String scanBase,\n            Class<? extends Annotation> annotatedClass) {\n        provider.resetFilters(false);\n        provider.addIncludeFilter(new AnnotatedMethodFilter(annotatedClass));\n\n        String basePackage = scanBase.replace('.', '/');\n        return provider.findCandidateComponents(basePackage);\n    }", "signature": "Set<BeanDefinition> findCandidateBeans(String scanBase,\n            Class<? extends Annotation> annotatedClass)", "full_signature": "synchronized Set<BeanDefinition> findCandidateBeans(String scanBase,\n            Class<? extends Annotation> annotatedClass)", "class_method_signature": "AnnotatedMethodScanner.findCandidateBeans(String scanBase,\n            Class<? extends Annotation> annotatedClass)", "testcase": false, "constructor": false, "invocations": ["resetFilters", "addIncludeFilter", "replace", "findCandidateComponents"]}, "repository": {"repo_id": 6602723, "url": "https://github.com/Comcast/jrugged", "language": "Java", "is_fork": false, "fork_count": 90, "stargazer_count": 236, "size": 1302, "license": "licensed"}}