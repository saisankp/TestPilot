{"test_class": {"identifier": "HystrixCommandMetricsTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Rule\n    public HystrixRequestContextRule ctx = new HystrixRequestContextRule();", "modifier": "@Rule\n    public", "type": "HystrixRequestContextRule", "declarator": "ctx = new HystrixRequestContextRule()", "var_name": "ctx"}], "file": "hystrix-core/src/test/java/com/netflix/hystrix/HystrixCommandMetricsTest.java"}, "test_case": {"identifier": "testCurrentConcurrentExecutionCount", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCurrentConcurrentExecutionCount() throws InterruptedException {\n        String key = \"cmd-metrics-C\";\n\n        HystrixCommandMetrics metrics = null;\n        List<Observable<Boolean>> cmdResults = new ArrayList<Observable<Boolean>>();\n\n        int NUM_CMDS = 8;\n        for (int i = 0; i < NUM_CMDS; i++) {\n            HystrixCommand<Boolean> cmd = new SuccessCommand(key, 900);\n            if (metrics == null) {\n                metrics = cmd.metrics;\n            }\n            Observable<Boolean> eagerObservable = cmd.observe();\n            cmdResults.add(eagerObservable);\n        }\n\n        try {\n            Thread.sleep(150);\n        } catch (InterruptedException ie) {\n            fail(ie.getMessage());\n        }\n        System.out.println(\"ReqLog: \" + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());\n        assertEquals(NUM_CMDS, metrics.getCurrentConcurrentExecutionCount());\n\n        final CountDownLatch latch = new CountDownLatch(1);\n        Observable.merge(cmdResults).subscribe(new Subscriber<Boolean>() {\n            @Override\n            public void onCompleted() {\n                System.out.println(\"All commands done\");\n                latch.countDown();\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                System.out.println(\"Error duing command execution\");\n                e.printStackTrace();\n                latch.countDown();\n            }\n\n            @Override\n            public void onNext(Boolean aBoolean) {\n\n            }\n        });\n\n        latch.await(10000, TimeUnit.MILLISECONDS);\n        assertEquals(0, metrics.getCurrentConcurrentExecutionCount());\n    }", "signature": "void testCurrentConcurrentExecutionCount()", "full_signature": "@Test public void testCurrentConcurrentExecutionCount()", "class_method_signature": "HystrixCommandMetricsTest.testCurrentConcurrentExecutionCount()", "testcase": true, "constructor": false, "invocations": ["observe", "add", "sleep", "fail", "getMessage", "println", "getExecutedCommandsAsString", "getCurrentRequest", "assertEquals", "getCurrentConcurrentExecutionCount", "subscribe", "merge", "println", "countDown", "println", "printStackTrace", "countDown", "await", "assertEquals", "getCurrentConcurrentExecutionCount"]}, "focal_class": {"identifier": "HystrixCommandMetrics", "superclass": "extends HystrixMetrics", "interfaces": "", "fields": [{"original_string": "@SuppressWarnings(\"unused\")\n    private static final Logger logger = LoggerFactory.getLogger(HystrixCommandMetrics.class);", "modifier": "@SuppressWarnings(\"unused\")\n    private static final", "type": "Logger", "declarator": "logger = LoggerFactory.getLogger(HystrixCommandMetrics.class)", "var_name": "logger"}, {"original_string": "private static final HystrixEventType[] ALL_EVENT_TYPES = HystrixEventType.values();", "modifier": "private static final", "type": "HystrixEventType[]", "declarator": "ALL_EVENT_TYPES = HystrixEventType.values()", "var_name": "ALL_EVENT_TYPES"}, {"original_string": "public static final Func2<long[], HystrixCommandCompletion, long[]> appendEventToBucket = new Func2<long[], HystrixCommandCompletion, long[]>() {\n        @Override\n        public long[] call(long[] initialCountArray, HystrixCommandCompletion execution) {\n            ExecutionResult.EventCounts eventCounts = execution.getEventCounts();\n            for (HystrixEventType eventType: ALL_EVENT_TYPES) {\n                switch (eventType) {\n                    case EXCEPTION_THROWN: break; //this is just a sum of other anyway - don't do the work here\n                    default:\n                        initialCountArray[eventType.ordinal()] += eventCounts.getCount(eventType);\n                        break;\n                }\n            }\n            return initialCountArray;\n        }\n    };", "modifier": "public static final", "type": "Func2<long[], HystrixCommandCompletion, long[]>", "declarator": "appendEventToBucket = new Func2<long[], HystrixCommandCompletion, long[]>() {\n        @Override\n        public long[] call(long[] initialCountArray, HystrixCommandCompletion execution) {\n            ExecutionResult.EventCounts eventCounts = execution.getEventCounts();\n            for (HystrixEventType eventType: ALL_EVENT_TYPES) {\n                switch (eventType) {\n                    case EXCEPTION_THROWN: break; //this is just a sum of other anyway - don't do the work here\n                    default:\n                        initialCountArray[eventType.ordinal()] += eventCounts.getCount(eventType);\n                        break;\n                }\n            }\n            return initialCountArray;\n        }\n    }", "var_name": "appendEventToBucket"}, {"original_string": "public static final Func2<long[], long[], long[]> bucketAggregator = new Func2<long[], long[], long[]>() {\n        @Override\n        public long[] call(long[] cumulativeEvents, long[] bucketEventCounts) {\n            for (HystrixEventType eventType: ALL_EVENT_TYPES) {\n                switch (eventType) {\n                    case EXCEPTION_THROWN:\n                        for (HystrixEventType exceptionEventType: HystrixEventType.EXCEPTION_PRODUCING_EVENT_TYPES) {\n                            cumulativeEvents[eventType.ordinal()] += bucketEventCounts[exceptionEventType.ordinal()];\n                        }\n                        break;\n                    default:\n                        cumulativeEvents[eventType.ordinal()] += bucketEventCounts[eventType.ordinal()];\n                        break;\n                }\n            }\n            return cumulativeEvents;\n        }\n    };", "modifier": "public static final", "type": "Func2<long[], long[], long[]>", "declarator": "bucketAggregator = new Func2<long[], long[], long[]>() {\n        @Override\n        public long[] call(long[] cumulativeEvents, long[] bucketEventCounts) {\n            for (HystrixEventType eventType: ALL_EVENT_TYPES) {\n                switch (eventType) {\n                    case EXCEPTION_THROWN:\n                        for (HystrixEventType exceptionEventType: HystrixEventType.EXCEPTION_PRODUCING_EVENT_TYPES) {\n                            cumulativeEvents[eventType.ordinal()] += bucketEventCounts[exceptionEventType.ordinal()];\n                        }\n                        break;\n                    default:\n                        cumulativeEvents[eventType.ordinal()] += bucketEventCounts[eventType.ordinal()];\n                        break;\n                }\n            }\n            return cumulativeEvents;\n        }\n    }", "var_name": "bucketAggregator"}, {"original_string": "private static final ConcurrentHashMap<String, HystrixCommandMetrics> metrics = new ConcurrentHashMap<String, HystrixCommandMetrics>();", "modifier": "private static final", "type": "ConcurrentHashMap<String, HystrixCommandMetrics>", "declarator": "metrics = new ConcurrentHashMap<String, HystrixCommandMetrics>()", "var_name": "metrics"}, {"original_string": "private final HystrixCommandProperties properties;", "modifier": "private final", "type": "HystrixCommandProperties", "declarator": "properties", "var_name": "properties"}, {"original_string": "private final HystrixCommandKey key;", "modifier": "private final", "type": "HystrixCommandKey", "declarator": "key", "var_name": "key"}, {"original_string": "private final HystrixCommandGroupKey group;", "modifier": "private final", "type": "HystrixCommandGroupKey", "declarator": "group", "var_name": "group"}, {"original_string": "private final HystrixThreadPoolKey threadPoolKey;", "modifier": "private final", "type": "HystrixThreadPoolKey", "declarator": "threadPoolKey", "var_name": "threadPoolKey"}, {"original_string": "private final AtomicInteger concurrentExecutionCount = new AtomicInteger();", "modifier": "private final", "type": "AtomicInteger", "declarator": "concurrentExecutionCount = new AtomicInteger()", "var_name": "concurrentExecutionCount"}, {"original_string": "private HealthCountsStream healthCountsStream;", "modifier": "private", "type": "HealthCountsStream", "declarator": "healthCountsStream", "var_name": "healthCountsStream"}, {"original_string": "private final RollingCommandEventCounterStream rollingCommandEventCounterStream;", "modifier": "private final", "type": "RollingCommandEventCounterStream", "declarator": "rollingCommandEventCounterStream", "var_name": "rollingCommandEventCounterStream"}, {"original_string": "private final CumulativeCommandEventCounterStream cumulativeCommandEventCounterStream;", "modifier": "private final", "type": "CumulativeCommandEventCounterStream", "declarator": "cumulativeCommandEventCounterStream", "var_name": "cumulativeCommandEventCounterStream"}, {"original_string": "private final RollingCommandLatencyDistributionStream rollingCommandLatencyDistributionStream;", "modifier": "private final", "type": "RollingCommandLatencyDistributionStream", "declarator": "rollingCommandLatencyDistributionStream", "var_name": "rollingCommandLatencyDistributionStream"}, {"original_string": "private final RollingCommandUserLatencyDistributionStream rollingCommandUserLatencyDistributionStream;", "modifier": "private final", "type": "RollingCommandUserLatencyDistributionStream", "declarator": "rollingCommandUserLatencyDistributionStream", "var_name": "rollingCommandUserLatencyDistributionStream"}, {"original_string": "private final RollingCommandMaxConcurrencyStream rollingCommandMaxConcurrencyStream;", "modifier": "private final", "type": "RollingCommandMaxConcurrencyStream", "declarator": "rollingCommandMaxConcurrencyStream", "var_name": "rollingCommandMaxConcurrencyStream"}], "methods": [{"identifier": "getInstance", "parameters": "(HystrixCommandKey key, HystrixCommandGroupKey commandGroup, HystrixCommandProperties properties)", "modifiers": "public static", "return": "HystrixCommandMetrics", "signature": "HystrixCommandMetrics getInstance(HystrixCommandKey key, HystrixCommandGroupKey commandGroup, HystrixCommandProperties properties)", "full_signature": "public static HystrixCommandMetrics getInstance(HystrixCommandKey key, HystrixCommandGroupKey commandGroup, HystrixCommandProperties properties)", "class_method_signature": "HystrixCommandMetrics.getInstance(HystrixCommandKey key, HystrixCommandGroupKey commandGroup, HystrixCommandProperties properties)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(HystrixCommandKey key, HystrixCommandGroupKey commandGroup, HystrixThreadPoolKey threadPoolKey, HystrixCommandProperties properties)", "modifiers": "public static", "return": "HystrixCommandMetrics", "signature": "HystrixCommandMetrics getInstance(HystrixCommandKey key, HystrixCommandGroupKey commandGroup, HystrixThreadPoolKey threadPoolKey, HystrixCommandProperties properties)", "full_signature": "public static HystrixCommandMetrics getInstance(HystrixCommandKey key, HystrixCommandGroupKey commandGroup, HystrixThreadPoolKey threadPoolKey, HystrixCommandProperties properties)", "class_method_signature": "HystrixCommandMetrics.getInstance(HystrixCommandKey key, HystrixCommandGroupKey commandGroup, HystrixThreadPoolKey threadPoolKey, HystrixCommandProperties properties)", "testcase": false, "constructor": false}, {"identifier": "getInstance", "parameters": "(HystrixCommandKey key)", "modifiers": "public static", "return": "HystrixCommandMetrics", "signature": "HystrixCommandMetrics getInstance(HystrixCommandKey key)", "full_signature": "public static HystrixCommandMetrics getInstance(HystrixCommandKey key)", "class_method_signature": "HystrixCommandMetrics.getInstance(HystrixCommandKey key)", "testcase": false, "constructor": false}, {"identifier": "getInstances", "parameters": "()", "modifiers": "public static", "return": "Collection<HystrixCommandMetrics>", "signature": "Collection<HystrixCommandMetrics> getInstances()", "full_signature": "public static Collection<HystrixCommandMetrics> getInstances()", "class_method_signature": "HystrixCommandMetrics.getInstances()", "testcase": false, "constructor": false}, {"identifier": "reset", "parameters": "()", "modifiers": "static", "return": "void", "signature": "void reset()", "full_signature": "static void reset()", "class_method_signature": "HystrixCommandMetrics.reset()", "testcase": false, "constructor": false}, {"identifier": "HystrixCommandMetrics", "parameters": "(final HystrixCommandKey key, HystrixCommandGroupKey commandGroup, HystrixThreadPoolKey threadPoolKey, HystrixCommandProperties properties, HystrixEventNotifier eventNotifier)", "modifiers": "", "return": "", "signature": " HystrixCommandMetrics(final HystrixCommandKey key, HystrixCommandGroupKey commandGroup, HystrixThreadPoolKey threadPoolKey, HystrixCommandProperties properties, HystrixEventNotifier eventNotifier)", "full_signature": "  HystrixCommandMetrics(final HystrixCommandKey key, HystrixCommandGroupKey commandGroup, HystrixThreadPoolKey threadPoolKey, HystrixCommandProperties properties, HystrixEventNotifier eventNotifier)", "class_method_signature": "HystrixCommandMetrics.HystrixCommandMetrics(final HystrixCommandKey key, HystrixCommandGroupKey commandGroup, HystrixThreadPoolKey threadPoolKey, HystrixCommandProperties properties, HystrixEventNotifier eventNotifier)", "testcase": false, "constructor": true}, {"identifier": "resetStream", "parameters": "()", "modifiers": "synchronized", "return": "void", "signature": "void resetStream()", "full_signature": "synchronized void resetStream()", "class_method_signature": "HystrixCommandMetrics.resetStream()", "testcase": false, "constructor": false}, {"identifier": "getCommandKey", "parameters": "()", "modifiers": "public", "return": "HystrixCommandKey", "signature": "HystrixCommandKey getCommandKey()", "full_signature": "public HystrixCommandKey getCommandKey()", "class_method_signature": "HystrixCommandMetrics.getCommandKey()", "testcase": false, "constructor": false}, {"identifier": "getCommandGroup", "parameters": "()", "modifiers": "public", "return": "HystrixCommandGroupKey", "signature": "HystrixCommandGroupKey getCommandGroup()", "full_signature": "public HystrixCommandGroupKey getCommandGroup()", "class_method_signature": "HystrixCommandMetrics.getCommandGroup()", "testcase": false, "constructor": false}, {"identifier": "getThreadPoolKey", "parameters": "()", "modifiers": "public", "return": "HystrixThreadPoolKey", "signature": "HystrixThreadPoolKey getThreadPoolKey()", "full_signature": "public HystrixThreadPoolKey getThreadPoolKey()", "class_method_signature": "HystrixCommandMetrics.getThreadPoolKey()", "testcase": false, "constructor": false}, {"identifier": "getProperties", "parameters": "()", "modifiers": "public", "return": "HystrixCommandProperties", "signature": "HystrixCommandProperties getProperties()", "full_signature": "public HystrixCommandProperties getProperties()", "class_method_signature": "HystrixCommandMetrics.getProperties()", "testcase": false, "constructor": false}, {"identifier": "getRollingCount", "parameters": "(HystrixEventType eventType)", "modifiers": "public", "return": "long", "signature": "long getRollingCount(HystrixEventType eventType)", "full_signature": "public long getRollingCount(HystrixEventType eventType)", "class_method_signature": "HystrixCommandMetrics.getRollingCount(HystrixEventType eventType)", "testcase": false, "constructor": false}, {"identifier": "getCumulativeCount", "parameters": "(HystrixEventType eventType)", "modifiers": "public", "return": "long", "signature": "long getCumulativeCount(HystrixEventType eventType)", "full_signature": "public long getCumulativeCount(HystrixEventType eventType)", "class_method_signature": "HystrixCommandMetrics.getCumulativeCount(HystrixEventType eventType)", "testcase": false, "constructor": false}, {"identifier": "getCumulativeCount", "parameters": "(HystrixRollingNumberEvent event)", "modifiers": "@Override public", "return": "long", "signature": "long getCumulativeCount(HystrixRollingNumberEvent event)", "full_signature": "@Override public long getCumulativeCount(HystrixRollingNumberEvent event)", "class_method_signature": "HystrixCommandMetrics.getCumulativeCount(HystrixRollingNumberEvent event)", "testcase": false, "constructor": false}, {"identifier": "getRollingCount", "parameters": "(HystrixRollingNumberEvent event)", "modifiers": "@Override public", "return": "long", "signature": "long getRollingCount(HystrixRollingNumberEvent event)", "full_signature": "@Override public long getRollingCount(HystrixRollingNumberEvent event)", "class_method_signature": "HystrixCommandMetrics.getRollingCount(HystrixRollingNumberEvent event)", "testcase": false, "constructor": false}, {"identifier": "getExecutionTimePercentile", "parameters": "(double percentile)", "modifiers": "public", "return": "int", "signature": "int getExecutionTimePercentile(double percentile)", "full_signature": "public int getExecutionTimePercentile(double percentile)", "class_method_signature": "HystrixCommandMetrics.getExecutionTimePercentile(double percentile)", "testcase": false, "constructor": false}, {"identifier": "getExecutionTimeMean", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getExecutionTimeMean()", "full_signature": "public int getExecutionTimeMean()", "class_method_signature": "HystrixCommandMetrics.getExecutionTimeMean()", "testcase": false, "constructor": false}, {"identifier": "getTotalTimePercentile", "parameters": "(double percentile)", "modifiers": "public", "return": "int", "signature": "int getTotalTimePercentile(double percentile)", "full_signature": "public int getTotalTimePercentile(double percentile)", "class_method_signature": "HystrixCommandMetrics.getTotalTimePercentile(double percentile)", "testcase": false, "constructor": false}, {"identifier": "getTotalTimeMean", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getTotalTimeMean()", "full_signature": "public int getTotalTimeMean()", "class_method_signature": "HystrixCommandMetrics.getTotalTimeMean()", "testcase": false, "constructor": false}, {"identifier": "getRollingMaxConcurrentExecutions", "parameters": "()", "modifiers": "public", "return": "long", "signature": "long getRollingMaxConcurrentExecutions()", "full_signature": "public long getRollingMaxConcurrentExecutions()", "class_method_signature": "HystrixCommandMetrics.getRollingMaxConcurrentExecutions()", "testcase": false, "constructor": false}, {"identifier": "getCurrentConcurrentExecutionCount", "parameters": "()", "modifiers": "public", "return": "int", "signature": "int getCurrentConcurrentExecutionCount()", "full_signature": "public int getCurrentConcurrentExecutionCount()", "class_method_signature": "HystrixCommandMetrics.getCurrentConcurrentExecutionCount()", "testcase": false, "constructor": false}, {"identifier": "markCommandStart", "parameters": "(HystrixCommandKey commandKey, HystrixThreadPoolKey threadPoolKey, HystrixCommandProperties.ExecutionIsolationStrategy isolationStrategy)", "modifiers": "", "return": "void", "signature": "void markCommandStart(HystrixCommandKey commandKey, HystrixThreadPoolKey threadPoolKey, HystrixCommandProperties.ExecutionIsolationStrategy isolationStrategy)", "full_signature": " void markCommandStart(HystrixCommandKey commandKey, HystrixThreadPoolKey threadPoolKey, HystrixCommandProperties.ExecutionIsolationStrategy isolationStrategy)", "class_method_signature": "HystrixCommandMetrics.markCommandStart(HystrixCommandKey commandKey, HystrixThreadPoolKey threadPoolKey, HystrixCommandProperties.ExecutionIsolationStrategy isolationStrategy)", "testcase": false, "constructor": false}, {"identifier": "markCommandDone", "parameters": "(ExecutionResult executionResult, HystrixCommandKey commandKey, HystrixThreadPoolKey threadPoolKey, boolean executionStarted)", "modifiers": "", "return": "void", "signature": "void markCommandDone(ExecutionResult executionResult, HystrixCommandKey commandKey, HystrixThreadPoolKey threadPoolKey, boolean executionStarted)", "full_signature": " void markCommandDone(ExecutionResult executionResult, HystrixCommandKey commandKey, HystrixThreadPoolKey threadPoolKey, boolean executionStarted)", "class_method_signature": "HystrixCommandMetrics.markCommandDone(ExecutionResult executionResult, HystrixCommandKey commandKey, HystrixThreadPoolKey threadPoolKey, boolean executionStarted)", "testcase": false, "constructor": false}, {"identifier": "getHealthCountsStream", "parameters": "()", "modifiers": "", "return": "HealthCountsStream", "signature": "HealthCountsStream getHealthCountsStream()", "full_signature": " HealthCountsStream getHealthCountsStream()", "class_method_signature": "HystrixCommandMetrics.getHealthCountsStream()", "testcase": false, "constructor": false}, {"identifier": "getHealthCounts", "parameters": "()", "modifiers": "public", "return": "HealthCounts", "signature": "HealthCounts getHealthCounts()", "full_signature": "public HealthCounts getHealthCounts()", "class_method_signature": "HystrixCommandMetrics.getHealthCounts()", "testcase": false, "constructor": false}, {"identifier": "unsubscribeAll", "parameters": "()", "modifiers": "private", "return": "void", "signature": "void unsubscribeAll()", "full_signature": "private void unsubscribeAll()", "class_method_signature": "HystrixCommandMetrics.unsubscribeAll()", "testcase": false, "constructor": false}], "file": "hystrix-core/src/main/java/com/netflix/hystrix/HystrixCommandMetrics.java"}, "focal_method": {"identifier": "getCurrentConcurrentExecutionCount", "parameters": "()", "modifiers": "public", "return": "int", "body": "public int getCurrentConcurrentExecutionCount() {\n        return concurrentExecutionCount.get();\n    }", "signature": "int getCurrentConcurrentExecutionCount()", "full_signature": "public int getCurrentConcurrentExecutionCount()", "class_method_signature": "HystrixCommandMetrics.getCurrentConcurrentExecutionCount()", "testcase": false, "constructor": false, "invocations": ["get"]}, "repository": {"repo_id": 6766558, "url": "https://github.com/Netflix/Hystrix", "stars": 19028, "created": "11/19/2012 8:14:46 PM +00:00", "updates": "2020-01-27T17:55:28+00:00", "fork": "False", "license": "licensed"}}