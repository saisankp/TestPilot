{"test_class": {"identifier": "LocationCheckTest", "superclass": "", "interfaces": "", "fields": [], "file": "common/src/test/java/com/platypii/baseline/location/LocationCheckTest.java"}, "test_case": {"identifier": "validate", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void validate() {\n        assertEquals(LocationCheck.VALID, LocationCheck.validate(20, 30));\n        // Equator\n        assertEquals(LocationCheck.UNLIKELY_LAT, LocationCheck.validate(0, 30));\n        // Prime meridian\n        assertEquals(LocationCheck.UNLIKELY_LON, LocationCheck.validate(3, 0));\n        assertEquals(LocationCheck.VALID, LocationCheck.validate(20, 0));\n        assertEquals(LocationCheck.UNLIKELY_LON, LocationCheck.validate(60, 0));\n        assertEquals(LocationCheck.INVALID_ZERO, LocationCheck.validate(0, 0));\n        // Bounds\n        assertEquals(LocationCheck.INVALID_RANGE, LocationCheck.validate(95, 30));\n        assertEquals(LocationCheck.INVALID_RANGE, LocationCheck.validate(20, 200));\n        // Keep it real\n        assertEquals(LocationCheck.INVALID_NAN, LocationCheck.validate(20, Double.NaN));\n        assertEquals(LocationCheck.INVALID_NAN, LocationCheck.validate(20, Double.POSITIVE_INFINITY));\n        assertEquals(LocationCheck.INVALID_NAN, LocationCheck.validate(20, Double.NEGATIVE_INFINITY));\n    }", "signature": "void validate()", "full_signature": "@Test public void validate()", "class_method_signature": "LocationCheckTest.validate()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "validate", "assertEquals", "validate", "assertEquals", "validate", "assertEquals", "validate", "assertEquals", "validate", "assertEquals", "validate", "assertEquals", "validate", "assertEquals", "validate", "assertEquals", "validate", "assertEquals", "validate", "assertEquals", "validate"]}, "focal_class": {"identifier": "LocationCheck", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int VALID = 0;", "modifier": "public static final", "type": "int", "declarator": "VALID = 0", "var_name": "VALID"}, {"original_string": "public static final int UNLIKELY_LAT = 1;", "modifier": "public static final", "type": "int", "declarator": "UNLIKELY_LAT = 1", "var_name": "UNLIKELY_LAT"}, {"original_string": "public static final int UNLIKELY_LON = 2;", "modifier": "public static final", "type": "int", "declarator": "UNLIKELY_LON = 2", "var_name": "UNLIKELY_LON"}, {"original_string": "public static final int INVALID_ZERO = 3;", "modifier": "public static final", "type": "int", "declarator": "INVALID_ZERO = 3", "var_name": "INVALID_ZERO"}, {"original_string": "public static final int INVALID_NAN = 4;", "modifier": "public static final", "type": "int", "declarator": "INVALID_NAN = 4", "var_name": "INVALID_NAN"}, {"original_string": "public static final int INVALID_RANGE = 5;", "modifier": "public static final", "type": "int", "declarator": "INVALID_RANGE = 5", "var_name": "INVALID_RANGE"}, {"original_string": "public static final String[] message = {\n            \"Valid\",\n            \"Unlikely latitude\",\n            \"Unlikely longitude\",\n            \"Lat/long unlikely zero\",\n            \"Lat/long not a number\",\n            \"Lat/long out of bounds\"\n    };", "modifier": "public static final", "type": "String[]", "declarator": "message = {\n            \"Valid\",\n            \"Unlikely latitude\",\n            \"Unlikely longitude\",\n            \"Lat/long unlikely zero\",\n            \"Lat/long not a number\",\n            \"Lat/long out of bounds\"\n    }", "var_name": "message"}], "methods": [{"identifier": "validate", "parameters": "(double latitude, double longitude)", "modifiers": "public static", "return": "int", "signature": "int validate(double latitude, double longitude)", "full_signature": "public static int validate(double latitude, double longitude)", "class_method_signature": "LocationCheck.validate(double latitude, double longitude)", "testcase": false, "constructor": false}], "file": "common/src/main/java/com/platypii/baseline/location/LocationCheck.java"}, "focal_method": {"identifier": "validate", "parameters": "(double latitude, double longitude)", "modifiers": "public static", "return": "int", "body": "public static int validate(double latitude, double longitude) {\n        if (Numbers.isReal(latitude) && Numbers.isReal(longitude)) {\n            final double latitude_abs = Math.abs(latitude);\n            final double longitude_abs = Math.abs(longitude);\n            if (latitude_abs < 0.1 && longitude_abs < 0.1) {\n                // If lat,lon == 0,0 assume bad data (there's no BASE off the coast of Africa)\n                return INVALID_ZERO;\n            } else if (latitude_abs > 90.0 || longitude_abs > 180.0) {\n                // Lat/lon out of bounds. Likely parsing error.\n                return INVALID_RANGE;\n            } else if (latitude_abs < 0.1) {\n                // No BASE jumps on the equator?\n                return UNLIKELY_LAT;\n            } else if (longitude_abs < 0.1 && (latitude < 4 || 55 < latitude)) {\n                // There is no landmass south of 4 degrees latitude on the prime meridian\n                // There is no landmass north of 55 degrees latitude on the prime meridian\n                return UNLIKELY_LON;\n            } else {\n                return VALID;\n            }\n        } else {\n            return INVALID_NAN;\n        }\n    }", "signature": "int validate(double latitude, double longitude)", "full_signature": "public static int validate(double latitude, double longitude)", "class_method_signature": "LocationCheck.validate(double latitude, double longitude)", "testcase": false, "constructor": false, "invocations": ["isReal", "isReal", "abs", "abs"]}, "repository": {"repo_id": 4671935, "url": "https://github.com/platypii/BASElineFlightComputer", "language": "Java", "is_fork": false, "fork_count": 3, "stargazer_count": 18, "size": 6949, "license": "licensed"}}