{"test_class": {"identifier": "TestSpdzSInt", "superclass": "", "interfaces": "", "fields": [{"original_string": "private BigIntegerFieldDefinition definition = new BigIntegerFieldDefinition(\n      ModulusFinder.findSuitableModulus(8));", "modifier": "private", "type": "BigIntegerFieldDefinition", "declarator": "definition = new BigIntegerFieldDefinition(\n      ModulusFinder.findSuitableModulus(8))", "var_name": "definition"}], "file": "suite/spdz/src/test/java/dk/alexandra/fresco/suite/spdz/datatypes/TestSpdzSInt.java"}, "test_case": {"identifier": "string", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void string() {\n    FieldElement share = get(BigInteger.ONE);\n    FieldElement mac = get(BigInteger.ZERO);\n    String result = new SpdzSInt(share, mac).toString();\n    assertThat(result, StringContains.containsString(share.toString()));\n    assertThat(result, StringContains.containsString(mac.toString()));\n  }", "signature": "void string()", "full_signature": "@Test public void string()", "class_method_signature": "TestSpdzSInt.string()", "testcase": true, "constructor": false, "invocations": ["get", "get", "toString", "assertThat", "containsString", "toString", "assertThat", "containsString", "toString"]}, "focal_class": {"identifier": "SpdzSInt", "superclass": "", "interfaces": "implements SInt, Serializable", "fields": [{"original_string": "private static final long serialVersionUID = 8828769687281856043L;", "modifier": "private static final", "type": "long", "declarator": "serialVersionUID = 8828769687281856043L", "var_name": "serialVersionUID"}, {"original_string": "private final FieldElement share;", "modifier": "private final", "type": "FieldElement", "declarator": "share", "var_name": "share"}, {"original_string": "private final FieldElement mac;", "modifier": "private final", "type": "FieldElement", "declarator": "mac", "var_name": "mac"}], "methods": [{"identifier": "SpdzSInt", "parameters": "(FieldElement share, FieldElement mac)", "modifiers": "public", "return": "", "signature": " SpdzSInt(FieldElement share, FieldElement mac)", "full_signature": "public  SpdzSInt(FieldElement share, FieldElement mac)", "class_method_signature": "SpdzSInt.SpdzSInt(FieldElement share, FieldElement mac)", "testcase": false, "constructor": true}, {"identifier": "getShare", "parameters": "()", "modifiers": "public", "return": "FieldElement", "signature": "FieldElement getShare()", "full_signature": "public FieldElement getShare()", "class_method_signature": "SpdzSInt.getShare()", "testcase": false, "constructor": false}, {"identifier": "getMac", "parameters": "()", "modifiers": "public", "return": "FieldElement", "signature": "FieldElement getMac()", "full_signature": "public FieldElement getMac()", "class_method_signature": "SpdzSInt.getMac()", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(SpdzSInt e)", "modifiers": "public", "return": "SpdzSInt", "signature": "SpdzSInt add(SpdzSInt e)", "full_signature": "public SpdzSInt add(SpdzSInt e)", "class_method_signature": "SpdzSInt.add(SpdzSInt e)", "testcase": false, "constructor": false}, {"identifier": "add", "parameters": "(SpdzSInt e, int id)", "modifiers": "public", "return": "SpdzSInt", "signature": "SpdzSInt add(SpdzSInt e, int id)", "full_signature": "public SpdzSInt add(SpdzSInt e, int id)", "class_method_signature": "SpdzSInt.add(SpdzSInt e, int id)", "testcase": false, "constructor": false}, {"identifier": "subtract", "parameters": "(SpdzSInt e)", "modifiers": "public", "return": "SpdzSInt", "signature": "SpdzSInt subtract(SpdzSInt e)", "full_signature": "public SpdzSInt subtract(SpdzSInt e)", "class_method_signature": "SpdzSInt.subtract(SpdzSInt e)", "testcase": false, "constructor": false}, {"identifier": "multiply", "parameters": "(FieldElement c)", "modifiers": "public", "return": "SpdzSInt", "signature": "SpdzSInt multiply(FieldElement c)", "full_signature": "public SpdzSInt multiply(FieldElement c)", "class_method_signature": "SpdzSInt.multiply(FieldElement c)", "testcase": false, "constructor": false}, {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SpdzSInt.toString()", "testcase": false, "constructor": false}, {"identifier": "out", "parameters": "()", "modifiers": "@Override public", "return": "SInt", "signature": "SInt out()", "full_signature": "@Override public SInt out()", "class_method_signature": "SpdzSInt.out()", "testcase": false, "constructor": false}, {"identifier": "serializeShare", "parameters": "(ByteSerializer<FieldElement> serializer)", "modifiers": "public", "return": "byte[]", "signature": "byte[] serializeShare(ByteSerializer<FieldElement> serializer)", "full_signature": "public byte[] serializeShare(ByteSerializer<FieldElement> serializer)", "class_method_signature": "SpdzSInt.serializeShare(ByteSerializer<FieldElement> serializer)", "testcase": false, "constructor": false}], "file": "suite/spdz/src/main/java/dk/alexandra/fresco/suite/spdz/datatypes/SpdzSInt.java"}, "focal_method": {"identifier": "toString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override\n  public String toString() {\n    return \"spdz(\" + share + \", \" + mac + \")\";\n  }", "signature": "String toString()", "full_signature": "@Override public String toString()", "class_method_signature": "SpdzSInt.toString()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 46789213, "url": "https://github.com/aicis/fresco", "language": "Java", "is_fork": false, "fork_count": 35, "stargazer_count": 72, "size": 17923, "license": "licensed"}}