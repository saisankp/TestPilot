{"test_class": {"identifier": "UploadFilePipeTest", "superclass": "extends PipeTestBase<UploadFilePipe>", "interfaces": "", "fields": [{"original_string": "private static ZipInputStream zis;", "modifier": "private static", "type": "ZipInputStream", "declarator": "zis", "var_name": "zis"}, {"original_string": "@ClassRule\n\tpublic static TemporaryFolder testFolderSource = new TemporaryFolder();", "modifier": "@ClassRule\n\tpublic static", "type": "TemporaryFolder", "declarator": "testFolderSource = new TemporaryFolder()", "var_name": "testFolderSource"}, {"original_string": "private static String sourceFolderPath;", "modifier": "private static", "type": "String", "declarator": "sourceFolderPath", "var_name": "sourceFolderPath"}, {"original_string": "private static File newFile;", "modifier": "private static", "type": "File", "declarator": "newFile", "var_name": "newFile"}, {"original_string": "private static File newFile2;", "modifier": "private static", "type": "File", "declarator": "newFile2", "var_name": "newFile2"}, {"original_string": "@Mock\n\tprivate IPipeLineSession session1 = new PipeLineSessionBase();", "modifier": "@Mock\n\tprivate", "type": "IPipeLineSession", "declarator": "session1 = new PipeLineSessionBase()", "var_name": "session1"}], "file": "core/src/test/java/nl/nn/adapterframework/pipes/UploadFilePipeTest.java"}, "test_case": {"identifier": "testNullSessionKey", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n\tpublic void testNullSessionKey() throws Exception {\n\t\texception.expect(PipeRunException.class);\n\t\tconfigureAndStartPipe();\n\t\tdoPipe(pipe, \"das\", session);\n\t\tfail(\"this is expected to fail\");\n\n\t}", "signature": "void testNullSessionKey()", "full_signature": "@Test public void testNullSessionKey()", "class_method_signature": "UploadFilePipeTest.testNullSessionKey()", "testcase": true, "constructor": false, "invocations": ["expect", "configureAndStartPipe", "doPipe", "fail"]}, "focal_class": {"identifier": "UploadFilePipe", "superclass": "extends FixedForwardPipe", "interfaces": "", "fields": [{"original_string": "private String directory;", "modifier": "private", "type": "String", "declarator": "directory", "var_name": "directory"}, {"original_string": "protected String directorySessionKey = \"destination\";", "modifier": "protected", "type": "String", "declarator": "directorySessionKey = \"destination\"", "var_name": "directorySessionKey"}, {"original_string": "private String sessionKey = \"file\";", "modifier": "private", "type": "String", "declarator": "sessionKey = \"file\"", "var_name": "sessionKey"}], "methods": [{"identifier": "configure", "parameters": "()", "modifiers": "@Override public", "return": "void", "signature": "void configure()", "full_signature": "@Override public void configure()", "class_method_signature": "UploadFilePipe.configure()", "testcase": false, "constructor": false}, {"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "UploadFilePipe.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false}, {"identifier": "setDirectory", "parameters": "(String string)", "modifiers": "@IbisDoc({\"base directory where files are unzipped to\", \"\"}) public", "return": "void", "signature": "void setDirectory(String string)", "full_signature": "@IbisDoc({\"base directory where files are unzipped to\", \"\"}) public void setDirectory(String string)", "class_method_signature": "UploadFilePipe.setDirectory(String string)", "testcase": false, "constructor": false}, {"identifier": "getDirectory", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDirectory()", "full_signature": "public String getDirectory()", "class_method_signature": "UploadFilePipe.getDirectory()", "testcase": false, "constructor": false}, {"identifier": "setDirectorySessionKey", "parameters": "(String string)", "modifiers": "@IbisDoc({\"the session key that contains the base directory where files are unzipped to\", \"destination\"}) public", "return": "void", "signature": "void setDirectorySessionKey(String string)", "full_signature": "@IbisDoc({\"the session key that contains the base directory where files are unzipped to\", \"destination\"}) public void setDirectorySessionKey(String string)", "class_method_signature": "UploadFilePipe.setDirectorySessionKey(String string)", "testcase": false, "constructor": false}, {"identifier": "getDirectorySessionKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getDirectorySessionKey()", "full_signature": "public String getDirectorySessionKey()", "class_method_signature": "UploadFilePipe.getDirectorySessionKey()", "testcase": false, "constructor": false}, {"identifier": "getSessionKey", "parameters": "()", "modifiers": "public", "return": "String", "signature": "String getSessionKey()", "full_signature": "public String getSessionKey()", "class_method_signature": "UploadFilePipe.getSessionKey()", "testcase": false, "constructor": false}, {"identifier": "setSessionKey", "parameters": "(String string)", "modifiers": "@IbisDoc({\"name of the key in the <code>pipelinesession</code> which contains the inputstream\", \"file\"}) public", "return": "void", "signature": "void setSessionKey(String string)", "full_signature": "@IbisDoc({\"name of the key in the <code>pipelinesession</code> which contains the inputstream\", \"file\"}) public void setSessionKey(String string)", "class_method_signature": "UploadFilePipe.setSessionKey(String string)", "testcase": false, "constructor": false}], "file": "core/src/main/java/nl/nn/adapterframework/pipes/UploadFilePipe.java"}, "focal_method": {"identifier": "doPipe", "parameters": "(Message message, IPipeLineSession session)", "modifiers": "@Override public", "return": "PipeRunResult", "body": "@Override\n\tpublic PipeRunResult doPipe(Message message, IPipeLineSession session) throws PipeRunException {\n\t\tInputStream inputStream = (InputStream) session.get(getSessionKey());\n\t\tif (inputStream == null) {\n\t\t\tthrow new PipeRunException(this, getLogPrefix(session) + \"got null value from session under key [\" + getSessionKey() + \"]\");\n\t\t}\n\n\t\tFile dir;\n\t\tif (StringUtils.isNotEmpty(getDirectory())) {\n\t\t\tdir = new File(getDirectory());\n\t\t} else {\n\t\t\tif (StringUtils.isNotEmpty(getDirectorySessionKey())) {\n\t\t\t\tdir = new File((String) session.get(getDirectorySessionKey()));\n\t\t\t} else {\n\t\t\t\tString filename;\n\t\t\t\ttry {\n\t\t\t\t\tfilename = message.asString();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new PipeRunException(this, getLogPrefix(session)+\"cannot open stream\", e);\n\t\t\t\t}\n\t\t\t\tdir = new File(filename);\n\t\t\t}\n\t\t}\n\n\t\tif (!dir.exists()) {\n\t\t\tif (dir.mkdirs()) {\n\t\t\t\tlog.debug(getLogPrefix(session) + \"created directory [\" + dir.getPath() + \"]\");\n\t\t\t} else {\n\t\t\t\tlog.warn(getLogPrefix(session) + \"directory [\" + dir.getPath() + \"] could not be created\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tString fileName;\n\t\ttry {\n\t\t\tfileName = (String) session.get(\"fileName\");\n\t\t\tif (FileUtils.extensionEqualsIgnoreCase(fileName, \"zip\")) {\n\t\t\t\tFileUtils.unzipStream(inputStream, dir);\n\t\t\t} else {\n\t\t\t\tthrow new PipeRunException(this, getLogPrefix(session) + \"file extension [\" + FileUtils.getFileNameExtension(fileName) + \"] should be 'zip'\");\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tthrow new PipeRunException(this, getLogPrefix(session) + \" Exception on uploading and unzipping/writing file\", e);\n\t\t}\n\n\t\treturn new PipeRunResult(getForward(), dir.getPath());\n\t}", "signature": "PipeRunResult doPipe(Message message, IPipeLineSession session)", "full_signature": "@Override public PipeRunResult doPipe(Message message, IPipeLineSession session)", "class_method_signature": "UploadFilePipe.doPipe(Message message, IPipeLineSession session)", "testcase": false, "constructor": false, "invocations": ["get", "getSessionKey", "getLogPrefix", "getSessionKey", "isNotEmpty", "getDirectory", "getDirectory", "isNotEmpty", "getDirectorySessionKey", "get", "getDirectorySessionKey", "asString", "getLogPrefix", "exists", "mkdirs", "debug", "getLogPrefix", "getPath", "warn", "getLogPrefix", "getPath", "get", "extensionEqualsIgnoreCase", "unzipStream", "getLogPrefix", "getFileNameExtension", "getLogPrefix", "getForward", "getPath"]}, "repository": {"repo_id": 8927606, "url": "https://github.com/ibissource/iaf", "stars": 17, "created": "3/21/2013 11:48:24 AM +00:00", "updates": "2020-01-27T15:25:21+00:00", "fork": "False", "license": "licensed"}}