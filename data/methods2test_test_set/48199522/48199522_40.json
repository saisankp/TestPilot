{"test_class": {"identifier": "LatticeNodeTest", "superclass": "", "interfaces": "", "fields": [], "file": "contrib/src/test/java/macrobase/analysis/contextualoutlier/LatticeNodeTest.java"}, "test_case": {"identifier": "latticeNodeTest", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void latticeNodeTest() {\n        LatticeNode node0 = new LatticeNode(0);\n        LatticeNode node1 = new LatticeNode(1);\n        LatticeNode node2 = new LatticeNode(2);\n        \n        List<ContextualDatum> data = new ArrayList<>();\n        \n        LatticeNode node01 = node0.join(node1, data, 1.0);\n        LatticeNode node02 = node0.join(node2, data, 1.0);\n        LatticeNode node12 = node1.join(node2, data, 1.0);\n\n        assertEquals(node01.getDimensions().contains(0),true);\n        assertEquals(node01.getDimensions().contains(1),true);\n        \n        assertEquals(node02.getDimensions().contains(0),true);\n        assertEquals(node02.getDimensions().contains(2),true);\n        \n        assertEquals(node12.getDimensions().contains(1),true);\n        assertEquals(node12.getDimensions().contains(2),true);\n        \n        LatticeNode node012 = node01.join(node02, data, 1.0);\n        assertEquals(node012.getDimensions().contains(0),true);\n        assertEquals(node012.getDimensions().contains(1),true);\n        assertEquals(node012.getDimensions().contains(2),true);\n        node012.clear();\n        assertEquals(node012.getDimensions().size(),0);\n\n        LatticeNode node012Null = node12.join(node02, data, 1.0);\n        assertEquals(node012Null,null);\n        \n        List<LatticeNode> latticeNodeByDimensions = new ArrayList<LatticeNode>();\n        latticeNodeByDimensions.add(node12);\n        latticeNodeByDimensions.add(node02);\n        latticeNodeByDimensions.add(node01);\n        assertEquals(latticeNodeByDimensions.get(0),node12);\n        assertEquals(latticeNodeByDimensions.get(1),node02);\n        assertEquals(latticeNodeByDimensions.get(2),node01);\n        Collections.sort(latticeNodeByDimensions, new LatticeNode.DimensionComparator());\n        assertEquals(latticeNodeByDimensions.get(0),node01);\n        assertEquals(latticeNodeByDimensions.get(1),node02);\n        assertEquals(latticeNodeByDimensions.get(2),node12);\n        \n        LatticeNode node01Copy = node1.join(node0, data, 1.0);\n        latticeNodeByDimensions.add(node01Copy);\n        Collections.sort(latticeNodeByDimensions, new LatticeNode.DimensionComparator());\n        assertEquals(latticeNodeByDimensions.get(0),node01);\n        assertEquals(latticeNodeByDimensions.get(1),node01Copy);\n\n        LatticeNode node00 = node0.join(node0, data, 1.0);\n        assertEquals(node00,null);\n        \n        latticeNodeByDimensions.remove(node01Copy);\n        latticeNodeByDimensions.add(node01);\n        Collections.sort(latticeNodeByDimensions, new LatticeNode.DimensionComparator());\n        assertEquals(latticeNodeByDimensions.get(0),node01);\n        assertEquals(latticeNodeByDimensions.get(1),node01);\n        //assertEquals(latticeNodeByDimensions.get(2),node01Copy);\n    }", "signature": "void latticeNodeTest()", "full_signature": "@Test public void latticeNodeTest()", "class_method_signature": "LatticeNodeTest.latticeNodeTest()", "testcase": true, "constructor": false, "invocations": ["join", "join", "join", "assertEquals", "contains", "getDimensions", "assertEquals", "contains", "getDimensions", "assertEquals", "contains", "getDimensions", "assertEquals", "contains", "getDimensions", "assertEquals", "contains", "getDimensions", "assertEquals", "contains", "getDimensions", "join", "assertEquals", "contains", "getDimensions", "assertEquals", "contains", "getDimensions", "assertEquals", "contains", "getDimensions", "clear", "assertEquals", "size", "getDimensions", "join", "assertEquals", "add", "add", "add", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "sort", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "join", "add", "sort", "assertEquals", "get", "assertEquals", "get", "join", "assertEquals", "remove", "add", "sort", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "LatticeNode", "superclass": "", "interfaces": "", "fields": [{"original_string": "List<Integer> dimensions;", "modifier": "", "type": "List<Integer>", "declarator": "dimensions", "var_name": "dimensions"}, {"original_string": "List<Context> denseContexts;", "modifier": "", "type": "List<Context>", "declarator": "denseContexts", "var_name": "denseContexts"}], "methods": [{"identifier": "LatticeNode", "parameters": "(int dimension)", "modifiers": "public", "return": "", "signature": " LatticeNode(int dimension)", "full_signature": "public  LatticeNode(int dimension)", "class_method_signature": "LatticeNode.LatticeNode(int dimension)", "testcase": false, "constructor": true}, {"identifier": "LatticeNode", "parameters": "(List<Integer> dimensions)", "modifiers": "public", "return": "", "signature": " LatticeNode(List<Integer> dimensions)", "full_signature": "public  LatticeNode(List<Integer> dimensions)", "class_method_signature": "LatticeNode.LatticeNode(List<Integer> dimensions)", "testcase": false, "constructor": true}, {"identifier": "getDenseContexts", "parameters": "()", "modifiers": "public", "return": "List<Context>", "signature": "List<Context> getDenseContexts()", "full_signature": "public List<Context> getDenseContexts()", "class_method_signature": "LatticeNode.getDenseContexts()", "testcase": false, "constructor": false}, {"identifier": "addDenseContext", "parameters": "(Context c)", "modifiers": "public", "return": "void", "signature": "void addDenseContext(Context c)", "full_signature": "public void addDenseContext(Context c)", "class_method_signature": "LatticeNode.addDenseContext(Context c)", "testcase": false, "constructor": false}, {"identifier": "join", "parameters": "(LatticeNode other, List<ContextualDatum> data, double tau)", "modifiers": "public", "return": "LatticeNode", "signature": "LatticeNode join(LatticeNode other, List<ContextualDatum> data, double tau)", "full_signature": "public LatticeNode join(LatticeNode other, List<ContextualDatum> data, double tau)", "class_method_signature": "LatticeNode.join(LatticeNode other, List<ContextualDatum> data, double tau)", "testcase": false, "constructor": false}, {"identifier": "getDimensions", "parameters": "()", "modifiers": "public", "return": "List<Integer>", "signature": "List<Integer> getDimensions()", "full_signature": "public List<Integer> getDimensions()", "class_method_signature": "LatticeNode.getDimensions()", "testcase": false, "constructor": false}, {"identifier": "joinedDimensions", "parameters": "(LatticeNode other)", "modifiers": "public", "return": "List<Integer>", "signature": "List<Integer> joinedDimensions(LatticeNode other)", "full_signature": "public List<Integer> joinedDimensions(LatticeNode other)", "class_method_signature": "LatticeNode.joinedDimensions(LatticeNode other)", "testcase": false, "constructor": false}, {"identifier": "clear", "parameters": "()", "modifiers": "public", "return": "void", "signature": "void clear()", "full_signature": "public void clear()", "class_method_signature": "LatticeNode.clear()", "testcase": false, "constructor": false}], "file": "contrib/src/main/java/macrobase/analysis/contextualoutlier/LatticeNode.java"}, "focal_method": {"identifier": "LatticeNode", "parameters": "(int dimension)", "modifiers": "public", "return": "", "body": "public LatticeNode(int dimension) {\n        dimensions = new ArrayList<Integer>();\n        dimensions.add(dimension);\n        denseContexts = new ArrayList<Context>();\n    }", "signature": " LatticeNode(int dimension)", "full_signature": "public  LatticeNode(int dimension)", "class_method_signature": "LatticeNode.LatticeNode(int dimension)", "testcase": false, "constructor": true, "invocations": []}, "repository": {"repo_id": 48199522, "url": "https://github.com/stanford-futuredata/macrobase", "language": "Java", "is_fork": false, "fork_count": 116, "stargazer_count": 606, "size": 27614, "license": "licensed"}}