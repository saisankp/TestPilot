{"test_class": {"identifier": "TransformUtilsTest", "superclass": "", "interfaces": "", "fields": [], "file": "app/src/test/java/apidez/com/doit/utils/TransformUtilsTest.java"}, "test_case": {"identifier": "testMap", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testMap() throws Exception {\n        Collection<Integer> data = Arrays.asList(2, 4, 6);\n        Collection<Integer> newData = TransformUtils.map(data, new TransformUtils.Map<Integer>() {\n            @Override\n            public Integer map(Integer item) {\n                return item / 2;\n            }\n        });\n        assertEquals(3, newData.size());\n        assertTrue(newData.contains(1));\n        assertTrue(newData.contains(2));\n        assertTrue(newData.contains(3));\n    }", "signature": "void testMap()", "full_signature": "@Test public void testMap()", "class_method_signature": "TransformUtilsTest.testMap()", "testcase": true, "constructor": false, "invocations": ["asList", "map", "assertEquals", "size", "assertTrue", "contains", "assertTrue", "contains", "assertTrue", "contains"]}, "focal_class": {"identifier": "TransformUtils", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "filter", "parameters": "(Collection<T> items, Predicate<T> predicate)", "modifiers": "public static", "return": "Collection<T>", "signature": "Collection<T> filter(Collection<T> items, Predicate<T> predicate)", "full_signature": "public static Collection<T> filter(Collection<T> items, Predicate<T> predicate)", "class_method_signature": "TransformUtils.filter(Collection<T> items, Predicate<T> predicate)", "testcase": false, "constructor": false}, {"identifier": "map", "parameters": "(Collection<T> items, Map<T> mapper)", "modifiers": "public static", "return": "Collection<E>", "signature": "Collection<E> map(Collection<T> items, Map<T> mapper)", "full_signature": "public static Collection<E> map(Collection<T> items, Map<T> mapper)", "class_method_signature": "TransformUtils.map(Collection<T> items, Map<T> mapper)", "testcase": false, "constructor": false}], "file": "app/src/main/java/apidez/com/doit/utils/TransformUtils.java"}, "focal_method": {"identifier": "map", "parameters": "(Collection<T> items, Map<T> mapper)", "modifiers": "public static", "return": "Collection<E>", "body": "public static <T, E> Collection<E> map(Collection<T> items, Map<T> mapper) {\n        Collection<E> result = new ArrayList<>();\n        for (T item : items) {\n            result.add(mapper.map(item));\n        }\n        return result;\n    }", "signature": "Collection<E> map(Collection<T> items, Map<T> mapper)", "full_signature": "public static Collection<E> map(Collection<T> items, Map<T> mapper)", "class_method_signature": "TransformUtils.map(Collection<T> items, Map<T> mapper)", "testcase": false, "constructor": false, "invocations": ["add", "map"]}, "repository": {"repo_id": 50765065, "url": "https://github.com/nongdenchet/DO.IT", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 6, "size": 16808, "license": "licensed"}}