{"test_class": {"identifier": "ProviderBasedDataObjectServiceTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "@Mock PersistenceProvider mockProvider;", "modifier": "@Mock", "type": "PersistenceProvider", "declarator": "mockProvider", "var_name": "mockProvider"}, {"original_string": "@Mock ProviderRegistry providerRegistry;", "modifier": "@Mock", "type": "ProviderRegistry", "declarator": "providerRegistry", "var_name": "providerRegistry"}, {"original_string": "@Mock\n    MetadataRepository metadataRepository;", "modifier": "@Mock", "type": "MetadataRepository", "declarator": "metadataRepository", "var_name": "metadataRepository"}, {"original_string": "ProviderBasedDataObjectService service = new ProviderBasedDataObjectService();", "modifier": "", "type": "ProviderBasedDataObjectService", "declarator": "service = new ProviderBasedDataObjectService()", "var_name": "service"}], "file": "rice-framework/krad-data/src/test/java/org/kuali/rice/krad/data/provider/impl/ProviderBasedDataObjectServiceTest.java"}, "test_case": {"identifier": "testFind", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testFind() {\n        Object findResult = new Object();\n        when(mockProvider.find(any(Class.class), any())).thenReturn(findResult);\n\n        assertSame(findResult, service.find(Object.class, \"id\"));\n\n        verify(mockProvider).find(any(Class.class), eq(\"id\"));\n    }", "signature": "void testFind()", "full_signature": "@Test public void testFind()", "class_method_signature": "ProviderBasedDataObjectServiceTest.testFind()", "testcase": true, "constructor": false, "invocations": ["thenReturn", "when", "find", "any", "any", "assertSame", "find", "find", "verify", "any", "eq"]}, "focal_class": {"identifier": "ProviderBasedDataObjectService", "superclass": "", "interfaces": "implements DataObjectService", "fields": [{"original_string": "private static final org.apache.log4j.Logger LOG = org.apache.log4j.Logger\n\t\t\t.getLogger(ProviderBasedDataObjectService.class);", "modifier": "private static final", "type": "org.apache.log4j.Logger", "declarator": "LOG = org.apache.log4j.Logger\n\t\t\t.getLogger(ProviderBasedDataObjectService.class)", "var_name": "LOG"}, {"original_string": "protected ProviderRegistry providerRegistry;", "modifier": "protected", "type": "ProviderRegistry", "declarator": "providerRegistry", "var_name": "providerRegistry"}, {"original_string": "protected MetadataRepository metadataRepository;", "modifier": "protected", "type": "MetadataRepository", "declarator": "metadataRepository", "var_name": "metadataRepository"}, {"original_string": "protected ReferenceLinker referenceLinker;", "modifier": "protected", "type": "ReferenceLinker", "declarator": "referenceLinker", "var_name": "referenceLinker"}], "methods": [{"identifier": "find", "parameters": "(Class<T> type, Object id)", "modifiers": "@Override public", "return": "T", "signature": "T find(Class<T> type, Object id)", "full_signature": "@Override public T find(Class<T> type, Object id)", "class_method_signature": "ProviderBasedDataObjectService.find(Class<T> type, Object id)", "testcase": false, "constructor": false}, {"identifier": "reduceCompoundKey", "parameters": "(Object id)", "modifiers": "protected", "return": "Object", "signature": "Object reduceCompoundKey(Object id)", "full_signature": "protected Object reduceCompoundKey(Object id)", "class_method_signature": "ProviderBasedDataObjectService.reduceCompoundKey(Object id)", "testcase": false, "constructor": false}, {"identifier": "findMatching", "parameters": "(Class<T> type, QueryByCriteria queryByCriteria)", "modifiers": "@Override public", "return": "QueryResults<T>", "signature": "QueryResults<T> findMatching(Class<T> type, QueryByCriteria queryByCriteria)", "full_signature": "@Override public QueryResults<T> findMatching(Class<T> type, QueryByCriteria queryByCriteria)", "class_method_signature": "ProviderBasedDataObjectService.findMatching(Class<T> type, QueryByCriteria queryByCriteria)", "testcase": false, "constructor": false}, {"identifier": "findAll", "parameters": "(Class<T> type)", "modifiers": "@Override public", "return": "QueryResults<T>", "signature": "QueryResults<T> findAll(Class<T> type)", "full_signature": "@Override public QueryResults<T> findAll(Class<T> type)", "class_method_signature": "ProviderBasedDataObjectService.findAll(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "findUnique", "parameters": "(Class<T> type, QueryByCriteria queryByCriteria)", "modifiers": "@Override public", "return": "T", "signature": "T findUnique(Class<T> type, QueryByCriteria queryByCriteria)", "full_signature": "@Override public T findUnique(Class<T> type, QueryByCriteria queryByCriteria)", "class_method_signature": "ProviderBasedDataObjectService.findUnique(Class<T> type, QueryByCriteria queryByCriteria)", "testcase": false, "constructor": false}, {"identifier": "delete", "parameters": "(Object dataObject)", "modifiers": "@Override public", "return": "void", "signature": "void delete(Object dataObject)", "full_signature": "@Override public void delete(Object dataObject)", "class_method_signature": "ProviderBasedDataObjectService.delete(Object dataObject)", "testcase": false, "constructor": false}, {"identifier": "deleteMatching", "parameters": "(Class<T> type, QueryByCriteria queryByCriteria)", "modifiers": "@Override public", "return": "void", "signature": "void deleteMatching(Class<T> type, QueryByCriteria queryByCriteria)", "full_signature": "@Override public void deleteMatching(Class<T> type, QueryByCriteria queryByCriteria)", "class_method_signature": "ProviderBasedDataObjectService.deleteMatching(Class<T> type, QueryByCriteria queryByCriteria)", "testcase": false, "constructor": false}, {"identifier": "deleteAll", "parameters": "(Class<T> type)", "modifiers": "@Override public", "return": "void", "signature": "void deleteAll(Class<T> type)", "full_signature": "@Override public void deleteAll(Class<T> type)", "class_method_signature": "ProviderBasedDataObjectService.deleteAll(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "save", "parameters": "(T dataObject, PersistenceOption... options)", "modifiers": "@Override public", "return": "T", "signature": "T save(T dataObject, PersistenceOption... options)", "full_signature": "@Override public T save(T dataObject, PersistenceOption... options)", "class_method_signature": "ProviderBasedDataObjectService.save(T dataObject, PersistenceOption... options)", "testcase": false, "constructor": false}, {"identifier": "pushOneToOneKeysToChildObjects", "parameters": "(Object dataObject)", "modifiers": "protected", "return": "void", "signature": "void pushOneToOneKeysToChildObjects(Object dataObject)", "full_signature": "protected void pushOneToOneKeysToChildObjects(Object dataObject)", "class_method_signature": "ProviderBasedDataObjectService.pushOneToOneKeysToChildObjects(Object dataObject)", "testcase": false, "constructor": false}, {"identifier": "getMetadataRepository", "parameters": "()", "modifiers": "@Override public", "return": "MetadataRepository", "signature": "MetadataRepository getMetadataRepository()", "full_signature": "@Override public MetadataRepository getMetadataRepository()", "class_method_signature": "ProviderBasedDataObjectService.getMetadataRepository()", "testcase": false, "constructor": false}, {"identifier": "copyInstance", "parameters": "(T dataObject, CopyOption... options)", "modifiers": "@Override public", "return": "T", "signature": "T copyInstance(T dataObject, CopyOption... options)", "full_signature": "@Override public T copyInstance(T dataObject, CopyOption... options)", "class_method_signature": "ProviderBasedDataObjectService.copyInstance(T dataObject, CopyOption... options)", "testcase": false, "constructor": false}, {"identifier": "wrap", "parameters": "(T dataObject)", "modifiers": "@Override public", "return": "DataObjectWrapper<T>", "signature": "DataObjectWrapper<T> wrap(T dataObject)", "full_signature": "@Override public DataObjectWrapper<T> wrap(T dataObject)", "class_method_signature": "ProviderBasedDataObjectService.wrap(T dataObject)", "testcase": false, "constructor": false}, {"identifier": "supports", "parameters": "(Class<T> type)", "modifiers": "@Override public", "return": "boolean", "signature": "boolean supports(Class<T> type)", "full_signature": "@Override public boolean supports(Class<T> type)", "class_method_signature": "ProviderBasedDataObjectService.supports(Class<T> type)", "testcase": false, "constructor": false}, {"identifier": "persistenceProviderForType", "parameters": "(Class<?> type)", "modifiers": "protected", "return": "PersistenceProvider", "signature": "PersistenceProvider persistenceProviderForType(Class<?> type)", "full_signature": "protected PersistenceProvider persistenceProviderForType(Class<?> type)", "class_method_signature": "ProviderBasedDataObjectService.persistenceProviderForType(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "persistenceProviderForObject", "parameters": "(Object object)", "modifiers": "protected", "return": "PersistenceProvider", "signature": "PersistenceProvider persistenceProviderForObject(Object object)", "full_signature": "protected PersistenceProvider persistenceProviderForObject(Object object)", "class_method_signature": "ProviderBasedDataObjectService.persistenceProviderForObject(Object object)", "testcase": false, "constructor": false}, {"identifier": "flush", "parameters": "(Class<?> type)", "modifiers": "@Override public", "return": "void", "signature": "void flush(Class<?> type)", "full_signature": "@Override public void flush(Class<?> type)", "class_method_signature": "ProviderBasedDataObjectService.flush(Class<?> type)", "testcase": false, "constructor": false}, {"identifier": "setProviderRegistry", "parameters": "(ProviderRegistry providerRegistry)", "modifiers": "@Required public", "return": "void", "signature": "void setProviderRegistry(ProviderRegistry providerRegistry)", "full_signature": "@Required public void setProviderRegistry(ProviderRegistry providerRegistry)", "class_method_signature": "ProviderBasedDataObjectService.setProviderRegistry(ProviderRegistry providerRegistry)", "testcase": false, "constructor": false}, {"identifier": "setMetadataRepository", "parameters": "(MetadataRepository metadataRepository)", "modifiers": "@Required public", "return": "void", "signature": "void setMetadataRepository(MetadataRepository metadataRepository)", "full_signature": "@Required public void setMetadataRepository(MetadataRepository metadataRepository)", "class_method_signature": "ProviderBasedDataObjectService.setMetadataRepository(MetadataRepository metadataRepository)", "testcase": false, "constructor": false}, {"identifier": "getReferenceLinker", "parameters": "()", "modifiers": "public", "return": "ReferenceLinker", "signature": "ReferenceLinker getReferenceLinker()", "full_signature": "public ReferenceLinker getReferenceLinker()", "class_method_signature": "ProviderBasedDataObjectService.getReferenceLinker()", "testcase": false, "constructor": false}, {"identifier": "setReferenceLinker", "parameters": "(ReferenceLinker referenceLinker)", "modifiers": "@Required public", "return": "void", "signature": "void setReferenceLinker(ReferenceLinker referenceLinker)", "full_signature": "@Required public void setReferenceLinker(ReferenceLinker referenceLinker)", "class_method_signature": "ProviderBasedDataObjectService.setReferenceLinker(ReferenceLinker referenceLinker)", "testcase": false, "constructor": false}], "file": "rice-framework/krad-data/src/main/java/org/kuali/rice/krad/data/provider/impl/ProviderBasedDataObjectService.java"}, "focal_method": {"identifier": "find", "parameters": "(Class<T> type, Object id)", "modifiers": "@Override public", "return": "T", "body": "@Override\n    public <T> T find(Class<T> type, Object id) {\n        return persistenceProviderForType(type).find(type, reduceCompoundKey(id));\n    }", "signature": "T find(Class<T> type, Object id)", "full_signature": "@Override public T find(Class<T> type, Object id)", "class_method_signature": "ProviderBasedDataObjectService.find(Class<T> type, Object id)", "testcase": false, "constructor": false, "invocations": ["find", "persistenceProviderForType", "reduceCompoundKey"]}, "repository": {"repo_id": 25359676, "url": "https://github.com/kuali/rice", "language": "Java", "is_fork": false, "fork_count": 36, "stargazer_count": 16, "size": 289156, "license": "licensed"}}