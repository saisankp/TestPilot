{"test_class": {"identifier": "TestGitCheckout", "superclass": "extends TestBase", "interfaces": "", "fields": [{"original_string": "public static final String TEST_BRANCH = \"testBranch\";", "modifier": "public static final", "type": "String", "declarator": "TEST_BRANCH = \"testBranch\"", "var_name": "TEST_BRANCH"}, {"original_string": "private File repositoryDirectory;", "modifier": "private", "type": "File", "declarator": "repositoryDirectory", "var_name": "repositoryDirectory"}, {"original_string": "private String repositoryPath;", "modifier": "private", "type": "String", "declarator": "repositoryPath", "var_name": "repositoryPath"}, {"original_string": "private GitCommit gitCommit;", "modifier": "private", "type": "GitCommit", "declarator": "gitCommit", "var_name": "gitCommit"}, {"original_string": "private GitAdd gitAdd;", "modifier": "private", "type": "GitAdd", "declarator": "gitAdd", "var_name": "gitAdd"}, {"original_string": "private GitCheckout gitCheckout;", "modifier": "private", "type": "GitCheckout", "declarator": "gitCheckout", "var_name": "gitCheckout"}, {"original_string": "private File file1;", "modifier": "private", "type": "File", "declarator": "file1", "var_name": "file1"}, {"original_string": "private File file2;", "modifier": "private", "type": "File", "declarator": "file2", "var_name": "file2"}], "file": "javagit/src/test/java/edu/nyu/cs/javagit/api/commands/TestGitCheckout.java"}, "test_case": {"identifier": "testCheckingOutFileFromAnotherBranch", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testCheckingOutFileFromAnotherBranch() throws JavaGitException, IOException {\n        // Create a testBranch01 from master\n        GitCheckoutOptions options = new GitCheckoutOptions();\n        Ref branch1 = Ref.createBranchRef(\"testBranch01\");\n        options.setOptB(branch1);\n        Ref branch = Ref.createBranchRef(\"master\");\n        gitCheckout.checkout(repositoryDirectory, options, branch);\n        //File file3 = FileUtilities.createFile(repositoryDirectory, \"foobar03\", \"New file foobar03\");\n        File file3 = new File(repositoryDirectory.getPath() + File.separator + \"foobar03\");\n        file3.createNewFile();\n        // add a file to testBranch01\n        gitAdd.add(repositoryDirectory, null, new File(\"foobar03\"));\n        gitCommit.commit(repositoryDirectory, \"Added foobar03 to the repository\");\n        assertFileExistsInDirectory(repositoryDirectory, new File(\"foobar03\"));\n        Ref master = Ref.createBranchRef(\"master\");\n        options = new GitCheckoutOptions();\n        // Switch to new branch - testBranch02, base branch as master\n        Ref newBranch = Ref.createBranchRef(\"testBranch02\");\n        options.setOptB(newBranch);\n        gitCheckout.checkout(repositoryDirectory, options, master);\n        // foobar03 does not exist in testBranch02 as it was created from master branch\n        assertFalse(file3.exists());\n        // checking out foobar03 file from branch - testBranch01\n        gitCheckout.checkout(repositoryDirectory, null, branch1, file3);\n        assertFileExistsInDirectory(repositoryDirectory, new File(\"foobar03\"));\n    }", "signature": "void testCheckingOutFileFromAnotherBranch()", "full_signature": "@Test public void testCheckingOutFileFromAnotherBranch()", "class_method_signature": "TestGitCheckout.testCheckingOutFileFromAnotherBranch()", "testcase": true, "constructor": false, "invocations": ["createBranchRef", "setOptB", "createBranchRef", "checkout", "getPath", "createNewFile", "add", "commit", "assertFileExistsInDirectory", "createBranchRef", "createBranchRef", "setOptB", "checkout", "assertFalse", "exists", "checkout", "assertFileExistsInDirectory"]}, "focal_class": {"identifier": "GitCheckout", "superclass": "", "interfaces": "", "fields": [], "methods": [{"identifier": "checkout", "parameters": "(File repositoryPath, GitCheckoutOptions options, Ref branch)", "modifiers": "public", "return": "GitCheckoutResponse", "signature": "GitCheckoutResponse checkout(File repositoryPath, GitCheckoutOptions options, Ref branch)", "full_signature": "public GitCheckoutResponse checkout(File repositoryPath, GitCheckoutOptions options, Ref branch)", "class_method_signature": "GitCheckout.checkout(File repositoryPath, GitCheckoutOptions options, Ref branch)", "testcase": false, "constructor": false}, {"identifier": "checkout", "parameters": "(File repositoryPath, List<File> paths)", "modifiers": "public", "return": "GitCheckoutResponse", "signature": "GitCheckoutResponse checkout(File repositoryPath, List<File> paths)", "full_signature": "public GitCheckoutResponse checkout(File repositoryPath, List<File> paths)", "class_method_signature": "GitCheckout.checkout(File repositoryPath, List<File> paths)", "testcase": false, "constructor": false}, {"identifier": "checkout", "parameters": "(File repositoryPath, GitCheckoutOptions options, Ref branch,\n      File file)", "modifiers": "public", "return": "GitCheckoutResponse", "signature": "GitCheckoutResponse checkout(File repositoryPath, GitCheckoutOptions options, Ref branch,\n      File file)", "full_signature": "public GitCheckoutResponse checkout(File repositoryPath, GitCheckoutOptions options, Ref branch,\n      File file)", "class_method_signature": "GitCheckout.checkout(File repositoryPath, GitCheckoutOptions options, Ref branch,\n      File file)", "testcase": false, "constructor": false}, {"identifier": "checkout", "parameters": "(File repositoryPath, GitCheckoutOptions options, Ref branch,\n      List<File> paths)", "modifiers": "public", "return": "GitCheckoutResponse", "signature": "GitCheckoutResponse checkout(File repositoryPath, GitCheckoutOptions options, Ref branch,\n      List<File> paths)", "full_signature": "public GitCheckoutResponse checkout(File repositoryPath, GitCheckoutOptions options, Ref branch,\n      List<File> paths)", "class_method_signature": "GitCheckout.checkout(File repositoryPath, GitCheckoutOptions options, Ref branch,\n      List<File> paths)", "testcase": false, "constructor": false}, {"identifier": "checkout", "parameters": "(File repositoryPath, Ref ref, List<File> paths)", "modifiers": "public", "return": "GitCheckoutResponse", "signature": "GitCheckoutResponse checkout(File repositoryPath, Ref ref, List<File> paths)", "full_signature": "public GitCheckoutResponse checkout(File repositoryPath, Ref ref, List<File> paths)", "class_method_signature": "GitCheckout.checkout(File repositoryPath, Ref ref, List<File> paths)", "testcase": false, "constructor": false}], "file": "javagit/src/main/java/edu/nyu/cs/javagit/api/commands/GitCheckout.java"}, "focal_method": {"identifier": "checkout", "parameters": "(File repositoryPath, GitCheckoutOptions options, Ref branch)", "modifiers": "public", "return": "GitCheckoutResponse", "body": "public GitCheckoutResponse checkout(File repositoryPath, GitCheckoutOptions options, Ref branch)\n      throws IOException, JavaGitException {\n    CheckUtilities.checkFileValidity(repositoryPath);\n    CheckUtilities.validateArgumentRefType(branch, RefType.BRANCH, \"Branch name\");\n    IClient client = ClientManager.getInstance().getPreferredClient();\n    IGitCheckout gitCheckout = client.getGitCheckoutInstance();\n    return gitCheckout.checkout(repositoryPath, options, branch);\n  }", "signature": "GitCheckoutResponse checkout(File repositoryPath, GitCheckoutOptions options, Ref branch)", "full_signature": "public GitCheckoutResponse checkout(File repositoryPath, GitCheckoutOptions options, Ref branch)", "class_method_signature": "GitCheckout.checkout(File repositoryPath, GitCheckoutOptions options, Ref branch)", "testcase": false, "constructor": false, "invocations": ["checkFileValidity", "validateArgumentRefType", "getPreferredClient", "getInstance", "getGitCheckoutInstance", "checkout"]}, "repository": {"repo_id": 8397753, "url": "https://github.com/bit-man/SwissArmyJavaGit", "language": "Java", "is_fork": false, "fork_count": 7, "stargazer_count": 7, "size": 1549, "license": "licensed"}}