{"test_class": {"identifier": "ByteArraysTest", "superclass": "", "interfaces": "", "fields": [], "file": "pcap4j-core/src/test/java/org/pcap4j/util/ByteArraysTest.java"}, "test_case": {"identifier": "testToHexString", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testToHexString() throws Exception {\n    byte[] arr =\n        new byte[] {\n          (byte) 0x0,\n          (byte) 0x1,\n          (byte) 0x2,\n          (byte) 0x3,\n          (byte) 0x4,\n          (byte) 0x55,\n          (byte) 0x56,\n          (byte) 0x57,\n          (byte) 0x58,\n          (byte) 0x59,\n          (byte) 0xaa,\n          (byte) 0xab,\n          (byte) 0xac,\n          (byte) 0xad,\n          (byte) 0xae,\n          (byte) 0xaf,\n          (byte) 0xfa,\n          (byte) 0xfb,\n          (byte) 0xfc,\n          (byte) 0xfd,\n          (byte) 0xfe,\n          (byte) 0xff\n        };\n\n    assertEquals(\n        \"00:01:02:03:04:55:56:57:58:59:aa:ab:ac:ad:ae:af:fa:fb:fc:fd:fe:ff\",\n        ByteArrays.toHexString(arr, \":\"));\n    assertEquals(\n        \"00 : 01 : 02 : 03 : 04 : 55 : 56 : 57 : 58 : 59 : aa : ab : ac : ad : ae : af : fa : fb : fc : fd : fe : ff\",\n        ByteArrays.toHexString(arr, \" : \"));\n    assertEquals(\"55-56-57-58-59\", ByteArrays.toHexString(arr, \"-\", 5, 5));\n    assertEquals(\"aaabacadaeaf\", ByteArrays.toHexString(arr, \"\", 10, 6));\n  }", "signature": "void testToHexString()", "full_signature": "@Test public void testToHexString()", "class_method_signature": "ByteArraysTest.testToHexString()", "testcase": true, "constructor": false, "invocations": ["assertEquals", "toHexString", "assertEquals", "toHexString", "assertEquals", "toHexString", "assertEquals", "toHexString"]}, "focal_class": {"identifier": "ByteArrays", "superclass": "", "interfaces": "", "fields": [{"original_string": "public static final int BYTE_SIZE_IN_BYTES = 1;", "modifier": "public static final", "type": "int", "declarator": "BYTE_SIZE_IN_BYTES = 1", "var_name": "BYTE_SIZE_IN_BYTES"}, {"original_string": "public static final int SHORT_SIZE_IN_BYTES = 2;", "modifier": "public static final", "type": "int", "declarator": "SHORT_SIZE_IN_BYTES = 2", "var_name": "SHORT_SIZE_IN_BYTES"}, {"original_string": "public static final int INT_SIZE_IN_BYTES = 4;", "modifier": "public static final", "type": "int", "declarator": "INT_SIZE_IN_BYTES = 4", "var_name": "INT_SIZE_IN_BYTES"}, {"original_string": "public static final int LONG_SIZE_IN_BYTES = 8;", "modifier": "public static final", "type": "int", "declarator": "LONG_SIZE_IN_BYTES = 8", "var_name": "LONG_SIZE_IN_BYTES"}, {"original_string": "public static final int INET4_ADDRESS_SIZE_IN_BYTES = 4;", "modifier": "public static final", "type": "int", "declarator": "INET4_ADDRESS_SIZE_IN_BYTES = 4", "var_name": "INET4_ADDRESS_SIZE_IN_BYTES"}, {"original_string": "public static final int INET6_ADDRESS_SIZE_IN_BYTES = 16;", "modifier": "public static final", "type": "int", "declarator": "INET6_ADDRESS_SIZE_IN_BYTES = 16", "var_name": "INET6_ADDRESS_SIZE_IN_BYTES"}, {"original_string": "public static final int BYTE_SIZE_IN_BITS = 8;", "modifier": "public static final", "type": "int", "declarator": "BYTE_SIZE_IN_BITS = 8", "var_name": "BYTE_SIZE_IN_BITS"}, {"original_string": "private static final Pattern NO_SEPARATOR_HEX_STRING_PATTERN =\n      Pattern.compile(\"\\\\A([0-9a-fA-F][0-9a-fA-F])+\\\\z\");", "modifier": "private static final", "type": "Pattern", "declarator": "NO_SEPARATOR_HEX_STRING_PATTERN =\n      Pattern.compile(\"\\\\A([0-9a-fA-F][0-9a-fA-F])+\\\\z\")", "var_name": "NO_SEPARATOR_HEX_STRING_PATTERN"}, {"original_string": "private static final char[] HEX_CHARS = \"0123456789abcdef\".toCharArray();", "modifier": "private static final", "type": "char[]", "declarator": "HEX_CHARS = \"0123456789abcdef\".toCharArray()", "var_name": "HEX_CHARS"}, {"original_string": "private static final int[] CRC32C_TABLE =\n      new int[] {\n        0x00000000, 0xf26b8303, 0xe13b70f7, 0x1350f3f4, 0xc79a971f, 0x35f1141c, 0x26a1e7e8,\n            0xd4ca64eb,\n        0x8ad958cf, 0x78b2dbcc, 0x6be22838, 0x9989ab3b, 0x4d43cfd0, 0xbf284cd3, 0xac78bf27,\n            0x5e133c24,\n        0x105ec76f, 0xe235446c, 0xf165b798, 0x030e349b, 0xd7c45070, 0x25afd373, 0x36ff2087,\n            0xc494a384,\n        0x9a879fa0, 0x68ec1ca3, 0x7bbcef57, 0x89d76c54, 0x5d1d08bf, 0xaf768bbc, 0xbc267848,\n            0x4e4dfb4b,\n        0x20bd8ede, 0xd2d60ddd, 0xc186fe29, 0x33ed7d2a, 0xe72719c1, 0x154c9ac2, 0x061c6936,\n            0xf477ea35,\n        0xaa64d611, 0x580f5512, 0x4b5fa6e6, 0xb93425e5, 0x6dfe410e, 0x9f95c20d, 0x8cc531f9,\n            0x7eaeb2fa,\n        0x30e349b1, 0xc288cab2, 0xd1d83946, 0x23b3ba45, 0xf779deae, 0x05125dad, 0x1642ae59,\n            0xe4292d5a,\n        0xba3a117e, 0x4851927d, 0x5b016189, 0xa96ae28a, 0x7da08661, 0x8fcb0562, 0x9c9bf696,\n            0x6ef07595,\n        0x417b1dbc, 0xb3109ebf, 0xa0406d4b, 0x522bee48, 0x86e18aa3, 0x748a09a0, 0x67dafa54,\n            0x95b17957,\n        0xcba24573, 0x39c9c670, 0x2a993584, 0xd8f2b687, 0x0c38d26c, 0xfe53516f, 0xed03a29b,\n            0x1f682198,\n        0x5125dad3, 0xa34e59d0, 0xb01eaa24, 0x42752927, 0x96bf4dcc, 0x64d4cecf, 0x77843d3b,\n            0x85efbe38,\n        0xdbfc821c, 0x2997011f, 0x3ac7f2eb, 0xc8ac71e8, 0x1c661503, 0xee0d9600, 0xfd5d65f4,\n            0x0f36e6f7,\n        0x61c69362, 0x93ad1061, 0x80fde395, 0x72966096, 0xa65c047d, 0x5437877e, 0x4767748a,\n            0xb50cf789,\n        0xeb1fcbad, 0x197448ae, 0x0a24bb5a, 0xf84f3859, 0x2c855cb2, 0xdeeedfb1, 0xcdbe2c45,\n            0x3fd5af46,\n        0x7198540d, 0x83f3d70e, 0x90a324fa, 0x62c8a7f9, 0xb602c312, 0x44694011, 0x5739b3e5,\n            0xa55230e6,\n        0xfb410cc2, 0x092a8fc1, 0x1a7a7c35, 0xe811ff36, 0x3cdb9bdd, 0xceb018de, 0xdde0eb2a,\n            0x2f8b6829,\n        0x82f63b78, 0x709db87b, 0x63cd4b8f, 0x91a6c88c, 0x456cac67, 0xb7072f64, 0xa457dc90,\n            0x563c5f93,\n        0x082f63b7, 0xfa44e0b4, 0xe9141340, 0x1b7f9043, 0xcfb5f4a8, 0x3dde77ab, 0x2e8e845f,\n            0xdce5075c,\n        0x92a8fc17, 0x60c37f14, 0x73938ce0, 0x81f80fe3, 0x55326b08, 0xa759e80b, 0xb4091bff,\n            0x466298fc,\n        0x1871a4d8, 0xea1a27db, 0xf94ad42f, 0x0b21572c, 0xdfeb33c7, 0x2d80b0c4, 0x3ed04330,\n            0xccbbc033,\n        0xa24bb5a6, 0x502036a5, 0x4370c551, 0xb11b4652, 0x65d122b9, 0x97baa1ba, 0x84ea524e,\n            0x7681d14d,\n        0x2892ed69, 0xdaf96e6a, 0xc9a99d9e, 0x3bc21e9d, 0xef087a76, 0x1d63f975, 0x0e330a81,\n            0xfc588982,\n        0xb21572c9, 0x407ef1ca, 0x532e023e, 0xa145813d, 0x758fe5d6, 0x87e466d5, 0x94b49521,\n            0x66df1622,\n        0x38cc2a06, 0xcaa7a905, 0xd9f75af1, 0x2b9cd9f2, 0xff56bd19, 0x0d3d3e1a, 0x1e6dcdee,\n            0xec064eed,\n        0xc38d26c4, 0x31e6a5c7, 0x22b65633, 0xd0ddd530, 0x0417b1db, 0xf67c32d8, 0xe52cc12c,\n            0x1747422f,\n        0x49547e0b, 0xbb3ffd08, 0xa86f0efc, 0x5a048dff, 0x8ecee914, 0x7ca56a17, 0x6ff599e3,\n            0x9d9e1ae0,\n        0xd3d3e1ab, 0x21b862a8, 0x32e8915c, 0xc083125f, 0x144976b4, 0xe622f5b7, 0xf5720643,\n            0x07198540,\n        0x590ab964, 0xab613a67, 0xb831c993, 0x4a5a4a90, 0x9e902e7b, 0x6cfbad78, 0x7fab5e8c,\n            0x8dc0dd8f,\n        0xe330a81a, 0x115b2b19, 0x020bd8ed, 0xf0605bee, 0x24aa3f05, 0xd6c1bc06, 0xc5914ff2,\n            0x37faccf1,\n        0x69e9f0d5, 0x9b8273d6, 0x88d28022, 0x7ab90321, 0xae7367ca, 0x5c18e4c9, 0x4f48173d,\n            0xbd23943e,\n        0xf36e6f75, 0x0105ec76, 0x12551f82, 0xe03e9c81, 0x34f4f86a, 0xc69f7b69, 0xd5cf889d,\n            0x27a40b9e,\n        0x79b737ba, 0x8bdcb4b9, 0x988c474d, 0x6ae7c44e, 0xbe2da0a5, 0x4c4623a6, 0x5f16d052,\n            0xad7d5351,\n      };", "modifier": "private static final", "type": "int[]", "declarator": "CRC32C_TABLE =\n      new int[] {\n        0x00000000, 0xf26b8303, 0xe13b70f7, 0x1350f3f4, 0xc79a971f, 0x35f1141c, 0x26a1e7e8,\n            0xd4ca64eb,\n        0x8ad958cf, 0x78b2dbcc, 0x6be22838, 0x9989ab3b, 0x4d43cfd0, 0xbf284cd3, 0xac78bf27,\n            0x5e133c24,\n        0x105ec76f, 0xe235446c, 0xf165b798, 0x030e349b, 0xd7c45070, 0x25afd373, 0x36ff2087,\n            0xc494a384,\n        0x9a879fa0, 0x68ec1ca3, 0x7bbcef57, 0x89d76c54, 0x5d1d08bf, 0xaf768bbc, 0xbc267848,\n            0x4e4dfb4b,\n        0x20bd8ede, 0xd2d60ddd, 0xc186fe29, 0x33ed7d2a, 0xe72719c1, 0x154c9ac2, 0x061c6936,\n            0xf477ea35,\n        0xaa64d611, 0x580f5512, 0x4b5fa6e6, 0xb93425e5, 0x6dfe410e, 0x9f95c20d, 0x8cc531f9,\n            0x7eaeb2fa,\n        0x30e349b1, 0xc288cab2, 0xd1d83946, 0x23b3ba45, 0xf779deae, 0x05125dad, 0x1642ae59,\n            0xe4292d5a,\n        0xba3a117e, 0x4851927d, 0x5b016189, 0xa96ae28a, 0x7da08661, 0x8fcb0562, 0x9c9bf696,\n            0x6ef07595,\n        0x417b1dbc, 0xb3109ebf, 0xa0406d4b, 0x522bee48, 0x86e18aa3, 0x748a09a0, 0x67dafa54,\n            0x95b17957,\n        0xcba24573, 0x39c9c670, 0x2a993584, 0xd8f2b687, 0x0c38d26c, 0xfe53516f, 0xed03a29b,\n            0x1f682198,\n        0x5125dad3, 0xa34e59d0, 0xb01eaa24, 0x42752927, 0x96bf4dcc, 0x64d4cecf, 0x77843d3b,\n            0x85efbe38,\n        0xdbfc821c, 0x2997011f, 0x3ac7f2eb, 0xc8ac71e8, 0x1c661503, 0xee0d9600, 0xfd5d65f4,\n            0x0f36e6f7,\n        0x61c69362, 0x93ad1061, 0x80fde395, 0x72966096, 0xa65c047d, 0x5437877e, 0x4767748a,\n            0xb50cf789,\n        0xeb1fcbad, 0x197448ae, 0x0a24bb5a, 0xf84f3859, 0x2c855cb2, 0xdeeedfb1, 0xcdbe2c45,\n            0x3fd5af46,\n        0x7198540d, 0x83f3d70e, 0x90a324fa, 0x62c8a7f9, 0xb602c312, 0x44694011, 0x5739b3e5,\n            0xa55230e6,\n        0xfb410cc2, 0x092a8fc1, 0x1a7a7c35, 0xe811ff36, 0x3cdb9bdd, 0xceb018de, 0xdde0eb2a,\n            0x2f8b6829,\n        0x82f63b78, 0x709db87b, 0x63cd4b8f, 0x91a6c88c, 0x456cac67, 0xb7072f64, 0xa457dc90,\n            0x563c5f93,\n        0x082f63b7, 0xfa44e0b4, 0xe9141340, 0x1b7f9043, 0xcfb5f4a8, 0x3dde77ab, 0x2e8e845f,\n            0xdce5075c,\n        0x92a8fc17, 0x60c37f14, 0x73938ce0, 0x81f80fe3, 0x55326b08, 0xa759e80b, 0xb4091bff,\n            0x466298fc,\n        0x1871a4d8, 0xea1a27db, 0xf94ad42f, 0x0b21572c, 0xdfeb33c7, 0x2d80b0c4, 0x3ed04330,\n            0xccbbc033,\n        0xa24bb5a6, 0x502036a5, 0x4370c551, 0xb11b4652, 0x65d122b9, 0x97baa1ba, 0x84ea524e,\n            0x7681d14d,\n        0x2892ed69, 0xdaf96e6a, 0xc9a99d9e, 0x3bc21e9d, 0xef087a76, 0x1d63f975, 0x0e330a81,\n            0xfc588982,\n        0xb21572c9, 0x407ef1ca, 0x532e023e, 0xa145813d, 0x758fe5d6, 0x87e466d5, 0x94b49521,\n            0x66df1622,\n        0x38cc2a06, 0xcaa7a905, 0xd9f75af1, 0x2b9cd9f2, 0xff56bd19, 0x0d3d3e1a, 0x1e6dcdee,\n            0xec064eed,\n        0xc38d26c4, 0x31e6a5c7, 0x22b65633, 0xd0ddd530, 0x0417b1db, 0xf67c32d8, 0xe52cc12c,\n            0x1747422f,\n        0x49547e0b, 0xbb3ffd08, 0xa86f0efc, 0x5a048dff, 0x8ecee914, 0x7ca56a17, 0x6ff599e3,\n            0x9d9e1ae0,\n        0xd3d3e1ab, 0x21b862a8, 0x32e8915c, 0xc083125f, 0x144976b4, 0xe622f5b7, 0xf5720643,\n            0x07198540,\n        0x590ab964, 0xab613a67, 0xb831c993, 0x4a5a4a90, 0x9e902e7b, 0x6cfbad78, 0x7fab5e8c,\n            0x8dc0dd8f,\n        0xe330a81a, 0x115b2b19, 0x020bd8ed, 0xf0605bee, 0x24aa3f05, 0xd6c1bc06, 0xc5914ff2,\n            0x37faccf1,\n        0x69e9f0d5, 0x9b8273d6, 0x88d28022, 0x7ab90321, 0xae7367ca, 0x5c18e4c9, 0x4f48173d,\n            0xbd23943e,\n        0xf36e6f75, 0x0105ec76, 0x12551f82, 0xe03e9c81, 0x34f4f86a, 0xc69f7b69, 0xd5cf889d,\n            0x27a40b9e,\n        0x79b737ba, 0x8bdcb4b9, 0x988c474d, 0x6ae7c44e, 0xbe2da0a5, 0x4c4623a6, 0x5f16d052,\n            0xad7d5351,\n      }", "var_name": "CRC32C_TABLE"}], "methods": [{"identifier": "ByteArrays", "parameters": "()", "modifiers": "private", "return": "", "signature": " ByteArrays()", "full_signature": "private  ByteArrays()", "class_method_signature": "ByteArrays.ByteArrays()", "testcase": false, "constructor": true}, {"identifier": "reverse", "parameters": "(byte[] array)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] reverse(byte[] array)", "full_signature": "public static byte[] reverse(byte[] array)", "class_method_signature": "ByteArrays.reverse(byte[] array)", "testcase": false, "constructor": false}, {"identifier": "getByte", "parameters": "(byte[] array, int offset)", "modifiers": "public static", "return": "byte", "signature": "byte getByte(byte[] array, int offset)", "full_signature": "public static byte getByte(byte[] array, int offset)", "class_method_signature": "ByteArrays.getByte(byte[] array, int offset)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(byte value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(byte value)", "full_signature": "public static byte[] toByteArray(byte value)", "class_method_signature": "ByteArrays.toByteArray(byte value)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(byte value, String separator)", "modifiers": "public static", "return": "String", "signature": "String toHexString(byte value, String separator)", "full_signature": "public static String toHexString(byte value, String separator)", "class_method_signature": "ByteArrays.toHexString(byte value, String separator)", "testcase": false, "constructor": false}, {"identifier": "getShort", "parameters": "(byte[] array, int offset)", "modifiers": "public static", "return": "short", "signature": "short getShort(byte[] array, int offset)", "full_signature": "public static short getShort(byte[] array, int offset)", "class_method_signature": "ByteArrays.getShort(byte[] array, int offset)", "testcase": false, "constructor": false}, {"identifier": "getShort", "parameters": "(byte[] array, int offset, ByteOrder bo)", "modifiers": "public static", "return": "short", "signature": "short getShort(byte[] array, int offset, ByteOrder bo)", "full_signature": "public static short getShort(byte[] array, int offset, ByteOrder bo)", "class_method_signature": "ByteArrays.getShort(byte[] array, int offset, ByteOrder bo)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(short value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(short value)", "full_signature": "public static byte[] toByteArray(short value)", "class_method_signature": "ByteArrays.toByteArray(short value)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(short value, ByteOrder bo)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(short value, ByteOrder bo)", "full_signature": "public static byte[] toByteArray(short value, ByteOrder bo)", "class_method_signature": "ByteArrays.toByteArray(short value, ByteOrder bo)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(short value, String separator)", "modifiers": "public static", "return": "String", "signature": "String toHexString(short value, String separator)", "full_signature": "public static String toHexString(short value, String separator)", "class_method_signature": "ByteArrays.toHexString(short value, String separator)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(short value, String separator, ByteOrder bo)", "modifiers": "public static", "return": "String", "signature": "String toHexString(short value, String separator, ByteOrder bo)", "full_signature": "public static String toHexString(short value, String separator, ByteOrder bo)", "class_method_signature": "ByteArrays.toHexString(short value, String separator, ByteOrder bo)", "testcase": false, "constructor": false}, {"identifier": "getInt", "parameters": "(byte[] array, int offset)", "modifiers": "public static", "return": "int", "signature": "int getInt(byte[] array, int offset)", "full_signature": "public static int getInt(byte[] array, int offset)", "class_method_signature": "ByteArrays.getInt(byte[] array, int offset)", "testcase": false, "constructor": false}, {"identifier": "getInt", "parameters": "(byte[] array, int offset, ByteOrder bo)", "modifiers": "public static", "return": "int", "signature": "int getInt(byte[] array, int offset, ByteOrder bo)", "full_signature": "public static int getInt(byte[] array, int offset, ByteOrder bo)", "class_method_signature": "ByteArrays.getInt(byte[] array, int offset, ByteOrder bo)", "testcase": false, "constructor": false}, {"identifier": "getInt", "parameters": "(byte[] array, int offset, int length)", "modifiers": "public static", "return": "int", "signature": "int getInt(byte[] array, int offset, int length)", "full_signature": "public static int getInt(byte[] array, int offset, int length)", "class_method_signature": "ByteArrays.getInt(byte[] array, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "getInt", "parameters": "(byte[] array, int offset, int length, ByteOrder bo)", "modifiers": "public static", "return": "int", "signature": "int getInt(byte[] array, int offset, int length, ByteOrder bo)", "full_signature": "public static int getInt(byte[] array, int offset, int length, ByteOrder bo)", "class_method_signature": "ByteArrays.getInt(byte[] array, int offset, int length, ByteOrder bo)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(int value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(int value)", "full_signature": "public static byte[] toByteArray(int value)", "class_method_signature": "ByteArrays.toByteArray(int value)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(int value, ByteOrder bo)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(int value, ByteOrder bo)", "full_signature": "public static byte[] toByteArray(int value, ByteOrder bo)", "class_method_signature": "ByteArrays.toByteArray(int value, ByteOrder bo)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(int value, int length)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(int value, int length)", "full_signature": "public static byte[] toByteArray(int value, int length)", "class_method_signature": "ByteArrays.toByteArray(int value, int length)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(int value, int length, ByteOrder bo)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(int value, int length, ByteOrder bo)", "full_signature": "public static byte[] toByteArray(int value, int length, ByteOrder bo)", "class_method_signature": "ByteArrays.toByteArray(int value, int length, ByteOrder bo)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(int value, String separator)", "modifiers": "public static", "return": "String", "signature": "String toHexString(int value, String separator)", "full_signature": "public static String toHexString(int value, String separator)", "class_method_signature": "ByteArrays.toHexString(int value, String separator)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(int value, String separator, ByteOrder bo)", "modifiers": "public static", "return": "String", "signature": "String toHexString(int value, String separator, ByteOrder bo)", "full_signature": "public static String toHexString(int value, String separator, ByteOrder bo)", "class_method_signature": "ByteArrays.toHexString(int value, String separator, ByteOrder bo)", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "(byte[] array, int offset)", "modifiers": "public static", "return": "long", "signature": "long getLong(byte[] array, int offset)", "full_signature": "public static long getLong(byte[] array, int offset)", "class_method_signature": "ByteArrays.getLong(byte[] array, int offset)", "testcase": false, "constructor": false}, {"identifier": "getLong", "parameters": "(byte[] array, int offset, ByteOrder bo)", "modifiers": "public static", "return": "long", "signature": "long getLong(byte[] array, int offset, ByteOrder bo)", "full_signature": "public static long getLong(byte[] array, int offset, ByteOrder bo)", "class_method_signature": "ByteArrays.getLong(byte[] array, int offset, ByteOrder bo)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(long value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(long value)", "full_signature": "public static byte[] toByteArray(long value)", "class_method_signature": "ByteArrays.toByteArray(long value)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(long value, ByteOrder bo)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(long value, ByteOrder bo)", "full_signature": "public static byte[] toByteArray(long value, ByteOrder bo)", "class_method_signature": "ByteArrays.toByteArray(long value, ByteOrder bo)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(long value, String separator)", "modifiers": "public static", "return": "String", "signature": "String toHexString(long value, String separator)", "full_signature": "public static String toHexString(long value, String separator)", "class_method_signature": "ByteArrays.toHexString(long value, String separator)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(long value, String separator, ByteOrder bo)", "modifiers": "public static", "return": "String", "signature": "String toHexString(long value, String separator, ByteOrder bo)", "full_signature": "public static String toHexString(long value, String separator, ByteOrder bo)", "class_method_signature": "ByteArrays.toHexString(long value, String separator, ByteOrder bo)", "testcase": false, "constructor": false}, {"identifier": "getMacAddress", "parameters": "(byte[] array, int offset)", "modifiers": "public static", "return": "MacAddress", "signature": "MacAddress getMacAddress(byte[] array, int offset)", "full_signature": "public static MacAddress getMacAddress(byte[] array, int offset)", "class_method_signature": "ByteArrays.getMacAddress(byte[] array, int offset)", "testcase": false, "constructor": false}, {"identifier": "getMacAddress", "parameters": "(byte[] array, int offset, ByteOrder bo)", "modifiers": "public static", "return": "MacAddress", "signature": "MacAddress getMacAddress(byte[] array, int offset, ByteOrder bo)", "full_signature": "public static MacAddress getMacAddress(byte[] array, int offset, ByteOrder bo)", "class_method_signature": "ByteArrays.getMacAddress(byte[] array, int offset, ByteOrder bo)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(MacAddress value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(MacAddress value)", "full_signature": "public static byte[] toByteArray(MacAddress value)", "class_method_signature": "ByteArrays.toByteArray(MacAddress value)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(MacAddress value, ByteOrder bo)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(MacAddress value, ByteOrder bo)", "full_signature": "public static byte[] toByteArray(MacAddress value, ByteOrder bo)", "class_method_signature": "ByteArrays.toByteArray(MacAddress value, ByteOrder bo)", "testcase": false, "constructor": false}, {"identifier": "getLinkLayerAddress", "parameters": "(byte[] array, int offset, int length)", "modifiers": "public static", "return": "LinkLayerAddress", "signature": "LinkLayerAddress getLinkLayerAddress(byte[] array, int offset, int length)", "full_signature": "public static LinkLayerAddress getLinkLayerAddress(byte[] array, int offset, int length)", "class_method_signature": "ByteArrays.getLinkLayerAddress(byte[] array, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "getLinkLayerAddress", "parameters": "(\n      byte[] array, int offset, int length, ByteOrder bo)", "modifiers": "public static", "return": "LinkLayerAddress", "signature": "LinkLayerAddress getLinkLayerAddress(\n      byte[] array, int offset, int length, ByteOrder bo)", "full_signature": "public static LinkLayerAddress getLinkLayerAddress(\n      byte[] array, int offset, int length, ByteOrder bo)", "class_method_signature": "ByteArrays.getLinkLayerAddress(\n      byte[] array, int offset, int length, ByteOrder bo)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(LinkLayerAddress value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(LinkLayerAddress value)", "full_signature": "public static byte[] toByteArray(LinkLayerAddress value)", "class_method_signature": "ByteArrays.toByteArray(LinkLayerAddress value)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(LinkLayerAddress value, ByteOrder bo)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(LinkLayerAddress value, ByteOrder bo)", "full_signature": "public static byte[] toByteArray(LinkLayerAddress value, ByteOrder bo)", "class_method_signature": "ByteArrays.toByteArray(LinkLayerAddress value, ByteOrder bo)", "testcase": false, "constructor": false}, {"identifier": "getInet4Address", "parameters": "(byte[] array, int offset)", "modifiers": "public static", "return": "Inet4Address", "signature": "Inet4Address getInet4Address(byte[] array, int offset)", "full_signature": "public static Inet4Address getInet4Address(byte[] array, int offset)", "class_method_signature": "ByteArrays.getInet4Address(byte[] array, int offset)", "testcase": false, "constructor": false}, {"identifier": "getInet4Address", "parameters": "(byte[] array, int offset, ByteOrder bo)", "modifiers": "public static", "return": "Inet4Address", "signature": "Inet4Address getInet4Address(byte[] array, int offset, ByteOrder bo)", "full_signature": "public static Inet4Address getInet4Address(byte[] array, int offset, ByteOrder bo)", "class_method_signature": "ByteArrays.getInet4Address(byte[] array, int offset, ByteOrder bo)", "testcase": false, "constructor": false}, {"identifier": "parseInet4Address", "parameters": "(String addr)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] parseInet4Address(String addr)", "full_signature": "public static byte[] parseInet4Address(String addr)", "class_method_signature": "ByteArrays.parseInet4Address(String addr)", "testcase": false, "constructor": false}, {"identifier": "getInet6Address", "parameters": "(byte[] array, int offset)", "modifiers": "public static", "return": "Inet6Address", "signature": "Inet6Address getInet6Address(byte[] array, int offset)", "full_signature": "public static Inet6Address getInet6Address(byte[] array, int offset)", "class_method_signature": "ByteArrays.getInet6Address(byte[] array, int offset)", "testcase": false, "constructor": false}, {"identifier": "getInet6Address", "parameters": "(byte[] array, int offset, ByteOrder bo)", "modifiers": "public static", "return": "Inet6Address", "signature": "Inet6Address getInet6Address(byte[] array, int offset, ByteOrder bo)", "full_signature": "public static Inet6Address getInet6Address(byte[] array, int offset, ByteOrder bo)", "class_method_signature": "ByteArrays.getInet6Address(byte[] array, int offset, ByteOrder bo)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(InetAddress value)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(InetAddress value)", "full_signature": "public static byte[] toByteArray(InetAddress value)", "class_method_signature": "ByteArrays.toByteArray(InetAddress value)", "testcase": false, "constructor": false}, {"identifier": "toByteArray", "parameters": "(InetAddress value, ByteOrder bo)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] toByteArray(InetAddress value, ByteOrder bo)", "full_signature": "public static byte[] toByteArray(InetAddress value, ByteOrder bo)", "class_method_signature": "ByteArrays.toByteArray(InetAddress value, ByteOrder bo)", "testcase": false, "constructor": false}, {"identifier": "getSubArray", "parameters": "(byte[] array, int offset, int length)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getSubArray(byte[] array, int offset, int length)", "full_signature": "public static byte[] getSubArray(byte[] array, int offset, int length)", "class_method_signature": "ByteArrays.getSubArray(byte[] array, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "getSubArray", "parameters": "(byte[] array, int offset)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] getSubArray(byte[] array, int offset)", "full_signature": "public static byte[] getSubArray(byte[] array, int offset)", "class_method_signature": "ByteArrays.getSubArray(byte[] array, int offset)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(byte[] array, String separator)", "modifiers": "public static", "return": "String", "signature": "String toHexString(byte[] array, String separator)", "full_signature": "public static String toHexString(byte[] array, String separator)", "class_method_signature": "ByteArrays.toHexString(byte[] array, String separator)", "testcase": false, "constructor": false}, {"identifier": "toHexString", "parameters": "(byte[] array, String separator, int offset, int length)", "modifiers": "public static", "return": "String", "signature": "String toHexString(byte[] array, String separator, int offset, int length)", "full_signature": "public static String toHexString(byte[] array, String separator, int offset, int length)", "class_method_signature": "ByteArrays.toHexString(byte[] array, String separator, int offset, int length)", "testcase": false, "constructor": false}, {"identifier": "calcChecksum", "parameters": "(byte[] data)", "modifiers": "public static", "return": "short", "signature": "short calcChecksum(byte[] data)", "full_signature": "public static short calcChecksum(byte[] data)", "class_method_signature": "ByteArrays.calcChecksum(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "calcCrc32Checksum", "parameters": "(byte[] data)", "modifiers": "public static", "return": "int", "signature": "int calcCrc32Checksum(byte[] data)", "full_signature": "public static int calcCrc32Checksum(byte[] data)", "class_method_signature": "ByteArrays.calcCrc32Checksum(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "calcCrc32cChecksum", "parameters": "(byte[] data)", "modifiers": "public static", "return": "int", "signature": "int calcCrc32cChecksum(byte[] data)", "full_signature": "public static int calcCrc32cChecksum(byte[] data)", "class_method_signature": "ByteArrays.calcCrc32cChecksum(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "calcAdler32Checksum", "parameters": "(byte[] data)", "modifiers": "public static", "return": "int", "signature": "int calcAdler32Checksum(byte[] data)", "full_signature": "public static int calcAdler32Checksum(byte[] data)", "class_method_signature": "ByteArrays.calcAdler32Checksum(byte[] data)", "testcase": false, "constructor": false}, {"identifier": "parseByteArray", "parameters": "(String hexString, String separator)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] parseByteArray(String hexString, String separator)", "full_signature": "public static byte[] parseByteArray(String hexString, String separator)", "class_method_signature": "ByteArrays.parseByteArray(String hexString, String separator)", "testcase": false, "constructor": false}, {"identifier": "clone", "parameters": "(byte[] array)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] clone(byte[] array)", "full_signature": "public static byte[] clone(byte[] array)", "class_method_signature": "ByteArrays.clone(byte[] array)", "testcase": false, "constructor": false}, {"identifier": "validateBounds", "parameters": "(byte[] arr, int offset, int len)", "modifiers": "public static", "return": "void", "signature": "void validateBounds(byte[] arr, int offset, int len)", "full_signature": "public static void validateBounds(byte[] arr, int offset, int len)", "class_method_signature": "ByteArrays.validateBounds(byte[] arr, int offset, int len)", "testcase": false, "constructor": false}, {"identifier": "xor", "parameters": "(byte[] arr1, byte[] arr2)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] xor(byte[] arr1, byte[] arr2)", "full_signature": "public static byte[] xor(byte[] arr1, byte[] arr2)", "class_method_signature": "ByteArrays.xor(byte[] arr1, byte[] arr2)", "testcase": false, "constructor": false}, {"identifier": "concatenate", "parameters": "(byte[] arr1, byte[] arr2)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] concatenate(byte[] arr1, byte[] arr2)", "full_signature": "public static byte[] concatenate(byte[] arr1, byte[] arr2)", "class_method_signature": "ByteArrays.concatenate(byte[] arr1, byte[] arr2)", "testcase": false, "constructor": false}, {"identifier": "concatenate", "parameters": "(List<byte[]> arrs)", "modifiers": "public static", "return": "byte[]", "signature": "byte[] concatenate(List<byte[]> arrs)", "full_signature": "public static byte[] concatenate(List<byte[]> arrs)", "class_method_signature": "ByteArrays.concatenate(List<byte[]> arrs)", "testcase": false, "constructor": false}], "file": "pcap4j-core/src/main/java/org/pcap4j/util/ByteArrays.java"}, "focal_method": {"identifier": "toHexString", "parameters": "(byte value, String separator)", "modifiers": "public static", "return": "String", "body": "public static String toHexString(byte value, String separator) {\n    return toHexString(toByteArray(value), separator);\n  }", "signature": "String toHexString(byte value, String separator)", "full_signature": "public static String toHexString(byte value, String separator)", "class_method_signature": "ByteArrays.toHexString(byte value, String separator)", "testcase": false, "constructor": false, "invocations": ["toHexString", "toByteArray"]}, "repository": {"repo_id": 3005042, "url": "https://github.com/kaitoy/pcap4j", "language": "Java", "is_fork": false, "fork_count": 247, "stargazer_count": 779, "size": 15246, "license": "licensed"}}