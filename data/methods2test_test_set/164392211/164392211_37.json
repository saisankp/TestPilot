{"test_class": {"identifier": "ByRowSeriesTest", "superclass": "", "interfaces": "", "fields": [], "file": "dflib/src/test/java/com/nhl/dflib/series/ByRowSeriesTest.java"}, "test_case": {"identifier": "testGet", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n    public void testGet() {\n        DataFrame df = DataFrame.newFrame(\"a\", \"b\").foldByRow(\n                \"a1\", \"b1\",\n                \"a2\", \"b2\");\n\n        ByRowSeries s = new ByRowSeries(df);\n        assertEquals(\"a1\", s.get(0));\n        assertEquals(\"b1\", s.get(1));\n        assertEquals(\"a2\", s.get(2));\n        assertEquals(\"b2\", s.get(3));\n    }", "signature": "void testGet()", "full_signature": "@Test public void testGet()", "class_method_signature": "ByRowSeriesTest.testGet()", "testcase": true, "constructor": false, "invocations": ["foldByRow", "newFrame", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get", "assertEquals", "get"]}, "focal_class": {"identifier": "ByRowSeries", "superclass": "extends ObjectSeries<Object>", "interfaces": "", "fields": [{"original_string": "private DataFrame source;", "modifier": "private", "type": "DataFrame", "declarator": "source", "var_name": "source"}, {"original_string": "private final int width;", "modifier": "private final", "type": "int", "declarator": "width", "var_name": "width"}, {"original_string": "private final int size;", "modifier": "private final", "type": "int", "declarator": "size", "var_name": "size"}, {"original_string": "private Series<Object> materialized;", "modifier": "private", "type": "Series<Object>", "declarator": "materialized", "var_name": "materialized"}], "methods": [{"identifier": "ByRowSeries", "parameters": "(DataFrame source)", "modifiers": "public", "return": "", "signature": " ByRowSeries(DataFrame source)", "full_signature": "public  ByRowSeries(DataFrame source)", "class_method_signature": "ByRowSeries.ByRowSeries(DataFrame source)", "testcase": false, "constructor": true}, {"identifier": "size", "parameters": "()", "modifiers": "@Override public", "return": "int", "signature": "int size()", "full_signature": "@Override public int size()", "class_method_signature": "ByRowSeries.size()", "testcase": false, "constructor": false}, {"identifier": "get", "parameters": "(int index)", "modifiers": "@Override public", "return": "Object", "signature": "Object get(int index)", "full_signature": "@Override public Object get(int index)", "class_method_signature": "ByRowSeries.get(int index)", "testcase": false, "constructor": false}, {"identifier": "copyTo", "parameters": "(Object[] to, int fromOffset, int toOffset, int len)", "modifiers": "@Override public", "return": "void", "signature": "void copyTo(Object[] to, int fromOffset, int toOffset, int len)", "full_signature": "@Override public void copyTo(Object[] to, int fromOffset, int toOffset, int len)", "class_method_signature": "ByRowSeries.copyTo(Object[] to, int fromOffset, int toOffset, int len)", "testcase": false, "constructor": false}, {"identifier": "materialize", "parameters": "()", "modifiers": "@Override public", "return": "Series<Object>", "signature": "Series<Object> materialize()", "full_signature": "@Override public Series<Object> materialize()", "class_method_signature": "ByRowSeries.materialize()", "testcase": false, "constructor": false}, {"identifier": "doMaterialize", "parameters": "()", "modifiers": "protected", "return": "Series<Object>", "signature": "Series<Object> doMaterialize()", "full_signature": "protected Series<Object> doMaterialize()", "class_method_signature": "ByRowSeries.doMaterialize()", "testcase": false, "constructor": false}, {"identifier": "fillNulls", "parameters": "(Object value)", "modifiers": "@Override public", "return": "Series<Object>", "signature": "Series<Object> fillNulls(Object value)", "full_signature": "@Override public Series<Object> fillNulls(Object value)", "class_method_signature": "ByRowSeries.fillNulls(Object value)", "testcase": false, "constructor": false}, {"identifier": "fillNullsFromSeries", "parameters": "(Series<?> values)", "modifiers": "@Override public", "return": "Series<Object>", "signature": "Series<Object> fillNullsFromSeries(Series<?> values)", "full_signature": "@Override public Series<Object> fillNullsFromSeries(Series<?> values)", "class_method_signature": "ByRowSeries.fillNullsFromSeries(Series<?> values)", "testcase": false, "constructor": false}, {"identifier": "fillNullsBackwards", "parameters": "()", "modifiers": "@Override public", "return": "Series<Object>", "signature": "Series<Object> fillNullsBackwards()", "full_signature": "@Override public Series<Object> fillNullsBackwards()", "class_method_signature": "ByRowSeries.fillNullsBackwards()", "testcase": false, "constructor": false}, {"identifier": "fillNullsForward", "parameters": "()", "modifiers": "@Override public", "return": "Series<Object>", "signature": "Series<Object> fillNullsForward()", "full_signature": "@Override public Series<Object> fillNullsForward()", "class_method_signature": "ByRowSeries.fillNullsForward()", "testcase": false, "constructor": false}], "file": "dflib/src/main/java/com/nhl/dflib/series/ByRowSeries.java"}, "focal_method": {"identifier": "get", "parameters": "(int index)", "modifiers": "@Override public", "return": "Object", "body": "@Override\n    public Object get(int index) {\n\n        // make a copy of \"source\" to avoid race conditions\n        DataFrame source = this.source;\n        if (source != null) {\n            int row = index / width;\n            int column = index % width;\n            return source.getColumn(column).get(row);\n        }\n\n        return materialize().get(index);\n    }", "signature": "Object get(int index)", "full_signature": "@Override public Object get(int index)", "class_method_signature": "ByRowSeries.get(int index)", "testcase": false, "constructor": false, "invocations": ["get", "getColumn", "get", "materialize"]}, "repository": {"repo_id": 164392211, "url": "https://github.com/nhl/dflib", "stars": 13, "created": "1/7/2019 7:07:58 AM +00:00", "updates": "2019-12-23T13:26:53+00:00", "fork": "False", "license": "licensed"}}