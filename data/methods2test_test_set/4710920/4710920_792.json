{"test_class": {"identifier": "AbstractReferenceBuilderTest", "superclass": "", "interfaces": "", "fields": [], "file": "dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/bootstrap/builders/AbstractReferenceBuilderTest.java"}, "test_case": {"identifier": "build", "parameters": "()", "modifiers": "@Test", "return": "void", "body": "@Test\n    void build() {\n        ReferenceBuilder builder = new ReferenceBuilder();\n        builder.check(true).init(false).generic(true).injvm(false).lazy(true).reconnect(\"reconnect\").sticky(false)\n                .version(\"version\").group(\"group\").id(\"id\").prefix(\"prefix\");\n\n        ReferenceConfig config = builder.build();\n        ReferenceConfig config2 = builder.build();\n\n        Assertions.assertEquals(\"id\", config.getId());\n        Assertions.assertEquals(\"prefix\", config.getPrefix());\n        Assertions.assertTrue(config.isCheck());\n        Assertions.assertFalse(config.isInit());\n        Assertions.assertTrue(config.isGeneric());\n        Assertions.assertFalse(config.isInjvm());\n        Assertions.assertTrue(config.getLazy());\n        Assertions.assertFalse(config.getSticky());\n        Assertions.assertEquals(\"reconnect\", config.getReconnect());\n        Assertions.assertEquals(\"version\", config.getVersion());\n        Assertions.assertEquals(\"group\", config.getGroup());\n\n        Assertions.assertNotSame(config, config2);\n    }", "signature": "void build()", "full_signature": "@Test void build()", "class_method_signature": "AbstractReferenceBuilderTest.build()", "testcase": true, "constructor": false, "invocations": ["prefix", "id", "group", "version", "sticky", "reconnect", "lazy", "injvm", "generic", "init", "check", "build", "build", "assertEquals", "getId", "assertEquals", "getPrefix", "assertTrue", "isCheck", "assertFalse", "isInit", "assertTrue", "isGeneric", "assertFalse", "isInjvm", "assertTrue", "getLazy", "assertFalse", "getSticky", "assertEquals", "getReconnect", "assertEquals", "getVersion", "assertEquals", "getGroup", "assertNotSame"]}, "focal_class": {"identifier": "AbstractReferenceBuilder", "superclass": "extends AbstractInterfaceBuilder<T, B>", "interfaces": "", "fields": [{"original_string": "protected Boolean check;", "modifier": "protected", "type": "Boolean", "declarator": "check", "var_name": "check"}, {"original_string": "protected Boolean init;", "modifier": "protected", "type": "Boolean", "declarator": "init", "var_name": "init"}, {"original_string": "protected String generic;", "modifier": "protected", "type": "String", "declarator": "generic", "var_name": "generic"}, {"original_string": "protected Boolean injvm;", "modifier": "protected", "type": "Boolean", "declarator": "injvm", "var_name": "injvm"}, {"original_string": "protected Boolean lazy;", "modifier": "protected", "type": "Boolean", "declarator": "lazy", "var_name": "lazy"}, {"original_string": "protected String reconnect;", "modifier": "protected", "type": "String", "declarator": "reconnect", "var_name": "reconnect"}, {"original_string": "protected Boolean sticky;", "modifier": "protected", "type": "Boolean", "declarator": "sticky", "var_name": "sticky"}, {"original_string": "protected String version;", "modifier": "protected", "type": "String", "declarator": "version", "var_name": "version"}, {"original_string": "protected String group;", "modifier": "protected", "type": "String", "declarator": "group", "var_name": "group"}], "methods": [{"identifier": "check", "parameters": "(Boolean check)", "modifiers": "public", "return": "B", "signature": "B check(Boolean check)", "full_signature": "public B check(Boolean check)", "class_method_signature": "AbstractReferenceBuilder.check(Boolean check)", "testcase": false, "constructor": false}, {"identifier": "init", "parameters": "(Boolean init)", "modifiers": "public", "return": "B", "signature": "B init(Boolean init)", "full_signature": "public B init(Boolean init)", "class_method_signature": "AbstractReferenceBuilder.init(Boolean init)", "testcase": false, "constructor": false}, {"identifier": "generic", "parameters": "(String generic)", "modifiers": "public", "return": "B", "signature": "B generic(String generic)", "full_signature": "public B generic(String generic)", "class_method_signature": "AbstractReferenceBuilder.generic(String generic)", "testcase": false, "constructor": false}, {"identifier": "generic", "parameters": "(Boolean generic)", "modifiers": "public", "return": "B", "signature": "B generic(Boolean generic)", "full_signature": "public B generic(Boolean generic)", "class_method_signature": "AbstractReferenceBuilder.generic(Boolean generic)", "testcase": false, "constructor": false}, {"identifier": "injvm", "parameters": "(Boolean injvm)", "modifiers": "@Deprecated public", "return": "B", "signature": "B injvm(Boolean injvm)", "full_signature": "@Deprecated public B injvm(Boolean injvm)", "class_method_signature": "AbstractReferenceBuilder.injvm(Boolean injvm)", "testcase": false, "constructor": false}, {"identifier": "lazy", "parameters": "(Boolean lazy)", "modifiers": "public", "return": "B", "signature": "B lazy(Boolean lazy)", "full_signature": "public B lazy(Boolean lazy)", "class_method_signature": "AbstractReferenceBuilder.lazy(Boolean lazy)", "testcase": false, "constructor": false}, {"identifier": "reconnect", "parameters": "(String reconnect)", "modifiers": "public", "return": "B", "signature": "B reconnect(String reconnect)", "full_signature": "public B reconnect(String reconnect)", "class_method_signature": "AbstractReferenceBuilder.reconnect(String reconnect)", "testcase": false, "constructor": false}, {"identifier": "sticky", "parameters": "(Boolean sticky)", "modifiers": "public", "return": "B", "signature": "B sticky(Boolean sticky)", "full_signature": "public B sticky(Boolean sticky)", "class_method_signature": "AbstractReferenceBuilder.sticky(Boolean sticky)", "testcase": false, "constructor": false}, {"identifier": "version", "parameters": "(String version)", "modifiers": "public", "return": "B", "signature": "B version(String version)", "full_signature": "public B version(String version)", "class_method_signature": "AbstractReferenceBuilder.version(String version)", "testcase": false, "constructor": false}, {"identifier": "group", "parameters": "(String group)", "modifiers": "public", "return": "B", "signature": "B group(String group)", "full_signature": "public B group(String group)", "class_method_signature": "AbstractReferenceBuilder.group(String group)", "testcase": false, "constructor": false}, {"identifier": "build", "parameters": "(T instance)", "modifiers": "@Override public", "return": "void", "signature": "void build(T instance)", "full_signature": "@Override public void build(T instance)", "class_method_signature": "AbstractReferenceBuilder.build(T instance)", "testcase": false, "constructor": false}], "file": "dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/bootstrap/builders/AbstractReferenceBuilder.java"}, "focal_method": {"identifier": "build", "parameters": "(T instance)", "modifiers": "@Override public", "return": "void", "body": "@Override\n    public void build(T instance) {\n        super.build(instance);\n\n        if (check != null) {\n            instance.setCheck(check);\n        }\n        if (init != null) {\n            instance.setInit(init);\n        }\n        if (!StringUtils.isEmpty(generic)) {\n            instance.setGeneric(generic);\n        }\n        if (injvm != null) {\n            instance.setInjvm(injvm);\n        }\n        if (lazy != null) {\n            instance.setLazy(lazy);\n        }\n        if (!StringUtils.isEmpty(reconnect)) {\n            instance.setReconnect(reconnect);\n        }\n        if (sticky != null) {\n            instance.setSticky(sticky);\n        }\n        if (!StringUtils.isEmpty(version)) {\n            instance.setVersion(version);\n        }\n        if (!StringUtils.isEmpty(group)) {\n            instance.setGroup(group);\n        }\n    }", "signature": "void build(T instance)", "full_signature": "@Override public void build(T instance)", "class_method_signature": "AbstractReferenceBuilder.build(T instance)", "testcase": false, "constructor": false, "invocations": ["build", "setCheck", "setInit", "isEmpty", "setGeneric", "setInjvm", "setLazy", "isEmpty", "setReconnect", "setSticky", "isEmpty", "setVersion", "isEmpty", "setGroup"]}, "repository": {"repo_id": 4710920, "url": "https://github.com/apache/dubbo", "stars": 30960, "created": "6/19/2012 7:56:02 AM +00:00", "updates": "2020-01-27T14:21:03+00:00", "fork": "False", "license": "licensed"}}