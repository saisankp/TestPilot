{"test_class": {"identifier": "RandomAccessFileInputStreamFactoryTest", "superclass": "", "interfaces": "", "fields": [{"original_string": "private RandomAccessFileInputStreamFactory factory = null;", "modifier": "private", "type": "RandomAccessFileInputStreamFactory", "declarator": "factory = null", "var_name": "factory"}, {"original_string": "private byte[] testData = null;", "modifier": "private", "type": "byte[]", "declarator": "testData = null", "var_name": "testData"}, {"original_string": "private File tempFile = null;", "modifier": "private", "type": "File", "declarator": "tempFile = null", "var_name": "tempFile"}], "file": "feya/libraries/archive_diff/diff.shared/src/test/java/com/google/archivepatcher/shared/RandomAccessFileInputStreamFactoryTest.java"}, "test_case": {"identifier": "testNewStream_MakesIdenticalStreams", "parameters": "()", "modifiers": "@Test public", "return": "void", "body": "@Test\n  public void testNewStream_MakesIdenticalStreams() throws IOException {\n    RandomAccessFileInputStream rafis1 = factory.newStream();\n    RandomAccessFileInputStream rafis2 = factory.newStream();\n    try {\n      Assert.assertNotSame(rafis1, rafis2);\n      for (int x = 0; x < testData.length; x++) {\n        Assert.assertEquals(x, rafis1.read());\n        Assert.assertEquals(x, rafis2.read());\n      }\n      Assert.assertEquals(-1, rafis1.read());\n      Assert.assertEquals(-1, rafis2.read());\n    } finally {\n      try {\n        rafis1.close();\n      } catch (Exception ignored) {\n        // Nothing\n      }\n      try {\n        rafis2.close();\n      } catch (Exception ignored) {\n        // Nothing\n      }\n    }\n  }", "signature": "void testNewStream_MakesIdenticalStreams()", "full_signature": "@Test public void testNewStream_MakesIdenticalStreams()", "class_method_signature": "RandomAccessFileInputStreamFactoryTest.testNewStream_MakesIdenticalStreams()", "testcase": true, "constructor": false, "invocations": ["newStream", "newStream", "assertNotSame", "assertEquals", "read", "assertEquals", "read", "assertEquals", "read", "assertEquals", "read", "close", "close"]}, "focal_class": {"identifier": "RandomAccessFileInputStreamFactory", "superclass": "", "interfaces": "implements MultiViewInputStreamFactory<RandomAccessFileInputStream>", "fields": [{"original_string": "private final File file;", "modifier": "private final", "type": "File", "declarator": "file", "var_name": "file"}, {"original_string": "private final long rangeOffset;", "modifier": "private final", "type": "long", "declarator": "rangeOffset", "var_name": "rangeOffset"}, {"original_string": "private final long rangeLength;", "modifier": "private final", "type": "long", "declarator": "rangeLength", "var_name": "rangeLength"}], "methods": [{"identifier": "RandomAccessFileInputStreamFactory", "parameters": "(File file, long rangeOffset, long rangeLength)", "modifiers": "public", "return": "", "signature": " RandomAccessFileInputStreamFactory(File file, long rangeOffset, long rangeLength)", "full_signature": "public  RandomAccessFileInputStreamFactory(File file, long rangeOffset, long rangeLength)", "class_method_signature": "RandomAccessFileInputStreamFactory.RandomAccessFileInputStreamFactory(File file, long rangeOffset, long rangeLength)", "testcase": false, "constructor": true}, {"identifier": "newStream", "parameters": "()", "modifiers": "@Override public", "return": "RandomAccessFileInputStream", "signature": "RandomAccessFileInputStream newStream()", "full_signature": "@Override public RandomAccessFileInputStream newStream()", "class_method_signature": "RandomAccessFileInputStreamFactory.newStream()", "testcase": false, "constructor": false}], "file": "feya/libraries/archive_diff/diff.shared/src/main/java/com/google/archivepatcher/shared/RandomAccessFileInputStreamFactory.java"}, "focal_method": {"identifier": "newStream", "parameters": "()", "modifiers": "@Override public", "return": "RandomAccessFileInputStream", "body": "@Override\n  public RandomAccessFileInputStream newStream() throws IOException {\n    return new RandomAccessFileInputStream(file, rangeOffset, rangeLength);\n  }", "signature": "RandomAccessFileInputStream newStream()", "full_signature": "@Override public RandomAccessFileInputStream newStream()", "class_method_signature": "RandomAccessFileInputStreamFactory.newStream()", "testcase": false, "constructor": false, "invocations": []}, "repository": {"repo_id": 20126854, "url": "https://github.com/kaedea/Feya", "language": "Java", "is_fork": false, "fork_count": 1, "stargazer_count": 12, "size": 7798, "license": "licensed"}}